<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.data">
  <import name="org.ejml.alg.dense.mult.MatrixDimensionException" />
  <class name="D1Matrix64F" extends="ReshapeMatrix64F" startLine="24">
    <javadoc>
      <text>* A generic abstract class for matrices whose data is stored in a single 1D array of doubles.  The
 * format of the elements in this array is not specified.  For example row major, column major,
 * and block row major are all common formats.</text>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* Where the raw data for the matrix is stored.  The format is type dependent.</text>
    </javadoc>
    <declaration type="double[]" name="data" />
    <javadoc>
      <text>* Used to get a reference to the internal data.</text>
      <return>Reference to the matrix's data.</return>
    </javadoc>
    <method type="double[]" name="getData" startLine="42" endLine="44" />
    <javadoc>
      <text>* Changes the internal array reference.</text>
    </javadoc>
    <method type="void" name="setData" startLine="49" endLine="51" />
    <method name="getIndex" type="int" startLine="53" endLine="60" />
    <javadoc>
      <text>* Returns the internal array index for the specified row and column.</text>
      <param>row Row index.</param>
      <param>col Column index.</param>
      <return>Internal array index.</return>
    </javadoc>
    <javadoc>
      <text>* Sets the value of this matrix to be the same as the value of the provided matrix.  Both
 * matrices must have the same shape:<br>
 * <br>
 * a<sub>ij</sub> = b<sub>ij</sub><br>
 * <br></text>
      <param>b The matrix that this matrix is to be set equal to.</param>
    </javadoc>
    <method type="void" name="set" startLine="72" endLine="80">
      <scope startLine="73" endLine="75" />
      <declaration type="int" name="dataLength" />
    </method>
    <javadoc>
      <text>* Returns the value of the matrix at the specified internal array index. The element at which row and column
 * returned by this function depends upon the matrix's internal structure, e.g. row-major, column-major, or block.</text>
      <param>index Internal array index.</param>
      <return>Value at the specified index.</return>
    </javadoc>
    <method type="double" name="get" startLine="89" endLine="91" />
    <javadoc>
      <text>* Sets the element's value at the specified index.  The element at which row and column
 * modified by this function depends upon the matrix's internal structure, e.g. row-major, column-major, or block.</text>
      <param>index Index of element that is to be set.</param>
      <param>val The new value of the index.</param>
    </javadoc>
    <method type="double" name="set" startLine="100" endLine="103">
      <comment>See benchmarkFunctionReturn.  Pointless return does not degrade performance.  Tested on JDK 1.6.0_21</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Adds the specified value to the internal data array at the specified index.<br>
 * <br>
 * Equivalent to: this.data[index] += val;
 * </p>
 * <p>
 * Intended for use in highly optimized code.  The  row/column coordinate of the modified element is
 * dependent upon the matrix's internal structure.
 * </p></text>
      <param>index The index which is being modified.</param>
      <param>val The value that is being added.</param>
    </javadoc>
    <method type="double" name="plus" startLine="120" endLine="123">
      <comment>See benchmarkFunctionReturn.  Pointless return does not degrade performance.  Tested on JDK 1.6.0_21</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Subtracts the specified value to the internal data array at the specified index.<br>
 * <br>
 * Equivalent to: this.data[index] -= val;
 * </p>
 * <p>
 * Intended for use in highly optimized code.  The  row/column coordinate of the modified element is
 * dependent upon the matrix's internal structure.
 * </p></text>
      <param>index The index which is being modified.</param>
      <param>val The value that is being subtracted.</param>
    </javadoc>
    <method type="double" name="minus" startLine="140" endLine="143">
      <comment>See benchmarkFunctionReturn.  Pointless return does not degrade performance.  Tested on JDK 1.6.0_21</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Multiplies the specified value to the internal data array at the specified index.<br>
 * <br>
 * Equivalent to: this.data[index] *= val;
 * </p>
 * <p>
 * Intended for use in highly optimized code.  The  row/column coordinate of the modified element is
 * dependent upon the matrix's internal structure.
 * </p></text>
      <param>index The index which is being modified.</param>
      <param>val The value that is being multiplied.</param>
    </javadoc>
    <method type="double" name="times" startLine="160" endLine="163">
      <comment>See benchmarkFunctionReturn.  Pointless return does not degrade performance.  Tested on JDK 1.6.0_21</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Divides the specified value to the internal data array at the specified index.<br>
 * <br>
 * Equivalent to: this.data[index] /= val;
 * </p>
 * <p>
 * Intended for use in highly optimized code.  The  row/column coordinate of the modified element is
 * dependent upon the matrix's internal structure.
 * </p></text>
      <param>index The index which is being modified.</param>
      <param>val The value that is being divided.</param>
    </javadoc>
    <method type="double" name="div" startLine="180" endLine="183">
      <comment>See benchmarkFunctionReturn.  Pointless return does not degrade performance.  Tested on JDK 1.6.0_21</comment>
    </method>
  </class>
</source>
