<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.data">
  <import name="org.ejml.UtilEjml" />
  <import name="org.ejml.ops.CommonOps" />
  <import name="org.ejml.ops.MatrixIO" />
  <import name="java.io.ByteArrayOutputStream" />
  <import name="java.io.PrintStream" />
  <class name="DenseMatrix64F" extends="RowD1Matrix64F" startLine="29">
    <javadoc>
      <text>* <p>
 * DenseMatrix64F is a dense matrix with elements that are 64-bit floats (doubles).  A matrix
 * is the fundamental data structure in linear algebra.  Unlike a sparse matrix, there is no
 * compression in a dense matrix and every element is stored in memory.  This allows for fast
 * reads and writes to the matrix.
 * </p>
 * <p>
 * To keep the code manageable and the library easier to use only basic functions for accessing and editing elements
 * are provided in this class.  The numerous operations which can be performed on DenseMatrix64F
 * are contained in various other classes, where the most common operations can be found in
 * the {@link org.ejml.ops.CommonOps} and {@link org.ejml.ops.SpecializedOps} classes.
 * </p>
 * <p>
 * The matrix is stored internally in a row-major 1D array format:<br>
 * <br>
 * data[ y*numCols + x ] = data[y][x]<br>
 * <br>
 * For example:<br>
 * data =
 * <table border="1">
 * <tr>
 * <td>a<sub>11</sub></td>
 * <td>a<sub>12</sub></td>
 * <td>a<sub>13</sub></td>
 * <td>a<sub>14</sub></td>
 * <td>a<sub>21</sub></td>
 * <td>a<sub>22</sub></td>
 * <td>a<sub>23</sub></td>
 * <td>a<sub>24</sub></td>
 * <td>a<sub>31</sub></td>
 * <td>a<sub>32</sub></td>
 * <td>a<sub>33</sub></td>
 * <td>a<sub>34</sub></td>
 * <td>a<sub>41</sub></td>
 * <td>a<sub>42</sub></td>
 * <td>a<sub>43</sub></td>
 * <td>a<sub>44</sub></td>
 * </tr>
 * </table>
 * </p>
 * <p>
 * An alternative to working directly with DenseMatrix64 is {@link org.ejml.simple.SimpleMatrix}.
 * SimpleMatrix is a wrapper around DenseMatrix64F that provides an easier to use object oriented way of manipulating
 * matrices, at the cost of efficiency.
 * </p></text>
      <see>org.ejml.ops.CommonOps</see>
      <see>org.ejml.ops.SpecializedOps</see>
      <see>org.ejml.simple.SimpleMatrix</see>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* <p>
 * Creates a new matrix which has the same value as the matrix encoded in the
 * provided array.  The input matrix's format can either be row-major or
 * column-major.
 * </p>
 * <p>
 * Note that 'data' is a variable argument type, so either 1D arrays or a set of numbers can be
 * passed in:<br>
 * DenseMatrix a = new DenseMatrix(2,2,true,new double[]{1,2,3,4});<br>
 * DenseMatrix b = new DenseMatrix(2,2,true,1,2,3,4);<br>
 * <br>
 * Both are equivalent.
 * </p></text>
      <param>numRows The number of rows.</param>
      <param>numCols The number of columns.</param>
      <param>rowMajor If the array is encoded in a row-major or a column-major format.</param>
      <param>data The formatted 1D array. Not modified.</param>
    </javadoc>
    <method type="constructor" name="DenseMatrix64F" startLine="109" endLine="117">
      <declaration type="int" name="length" />
    </method>
    <javadoc>
      <text>* <p>
 * Creates a matrix with the values and shape defined by the 2D array 'data'.
 * It is assumed that 'data' has a row-major formatting:<br>
 * <br>
 * data[ row ][ column ]
 * </p></text>
      <param>data 2D array representation of the matrix. Not modified.</param>
    </javadoc>
    <method type="constructor" name="DenseMatrix64F" startLine="128" endLine="146">
      <declaration type="int" name="pos" />
      <scope startLine="135" endLine="145">
        <declaration type="double[]" name="row" />
        <scope startLine="138" endLine="140" />
      </scope>
    </method>
    <javadoc>
      <text>* Creates a new Matrix with the specified shape whose elements initially
 * have the value of zero.</text>
      <param>numRows The number of rows in the matrix.</param>
      <param>numCols The number of columns in the matrix.</param>
    </javadoc>
    <method type="constructor" name="DenseMatrix64F" startLine="155" endLine="160" />
    <javadoc>
      <text>* Creates a new matrix which is equivalent to the provided matrix.  Note that
 * the length of the data will be determined by the shape of the matrix.</text>
      <param>orig The matrix which is to be copied.  This is not modified or saved.</param>
    </javadoc>
    <method type="constructor" name="DenseMatrix64F" startLine="168" endLine="171" />
    <javadoc>
      <text>* This declares an array that can store a matrix up to the specified length.  This is usefull
 * when a matrix's size will be growing and it is desirable to avoid reallocating memory.</text>
      <param>length The size of the matrice's data array.</param>
    </javadoc>
    <method type="constructor" name="DenseMatrix64F" startLine="179" endLine="181" />
    <javadoc>
      <text>* Default constructor where nothing is assigned.  In general this should not be used.</text>
    </javadoc>
    <method type="constructor" name="DenseMatrix64F" startLine="186" endLine="186" />
    <javadoc>
      <text>* Creates a new DenseMatrix64F which contains the same information as the provided Matrix64F.</text>
      <param>mat Matrix whose values will be copied.  Not modified.</param>
    </javadoc>
    <method type="constructor" name="DenseMatrix64F" startLine="193" endLine="200">
      <scope startLine="195" endLine="199">
        <scope startLine="196" endLine="198" />
      </scope>
    </method>
    <javadoc>
      <text>* Creates a new DenseMatrix64F around the provided data.  The data must encode
 * a row-major matrix.  Any modification to the returned matrix will modify the
 * provided data.</text>
      <param>numRows Number of rows in the matrix.</param>
      <param>numCols Number of columns in the matrix.</param>
      <param>data Data that is being wrapped. Referenced Saved.</param>
      <return>A matrix which references the provided data internally.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="wrap" startLine="212" endLine="219">
      <declaration type="DenseMatrix64F" name="s" />
    </method>
    <javadoc>
      <inheritDoc />
    </javadoc>
    <method type="void" name="reshape" startLine="225" endLine="238">
      <scope startLine="226" endLine="234">
        <declaration type="double[]" name="d" />
        <scope startLine="229" endLine="231" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Assigns the element in the Matrix to the specified value.  Performs a bounds check to make sure
 * the requested element is part of the matrix. <br>
 * <br>
 * a<sub>ij</sub> = value<br>
 * </p></text>
      <param>row The row of the element.</param>
      <param>col The column of the element.</param>
      <param>value The element's new value.</param>
    </javadoc>
    <method type="void" name="set" startLine="253" endLine="259">
      <scope startLine="254" endLine="256" />
    </method>
    <method type="void" name="unsafe_set" startLine="262" endLine="264" />
    <javadoc>
      <text>* <p>
 * Adds 'value' to the specified element in the matrix.<br>
 * <br>
 * a<sub>ij</sub> = a<sub>ij</sub> + value<br>
 * </p></text>
      <param>row The row of the element.</param>
      <param>col The column of the element.</param>
      <param>value The value that is added to the element</param>
    </javadoc>
    <method type="void" name="add" startLine="278" endLine="284">
      <scope startLine="279" endLine="281" />
    </method>
    <javadoc>
      <text>* Returns the value of the specified matrix element.  Performs a bounds check to make sure
 * the requested element is part of the matrix.</text>
      <param>row The row of the element.</param>
      <param>col The column of the element.</param>
      <return>The value of the element.</return>
    </javadoc>
    <method type="double" name="get" startLine="295" endLine="301">
      <scope startLine="296" endLine="298" />
    </method>
    <method type="double" name="unsafe_get" startLine="304" endLine="306" />
    <method type="int" name="getIndex" startLine="309" endLine="311" />
    <javadoc>
      <text>* Determins if the specified element is inside the bounds of the Matrix.</text>
      <param>row The element's row.</param>
      <param>col The elements' column.</param>
      <return>True if it is inside the matrices bound, false otherwise.</return>
    </javadoc>
    <method type="boolean" name="isInBounds" startLine="320" endLine="322" />
    <javadoc>
      <text>* Returns the number of elements in this matrix, which is equal to
 * the number of rows times the number of columns.</text>
      <return>The number of elements in the matrix.</return>
    </javadoc>
    <method type="int" name="getNumElements" startLine="331" endLine="333" />
    <javadoc>
      <text>* <p>
 * Sets the value and shape of this matrix to be identical to the specified matrix. The width and height are
 * changed to match the matrix that has been provided.  If more memory is needed then a new data array is
 * declared.<br>
 * <br>
 * a.numRows = b.numRows<br>
 * a.numCols = b.numCols<br>
 * <br>
 * a<sub>ij</sub> = b<sub>ij</sub><br>
 * <br>
 * <p></text>
      <param>b The matrix that this matrix is to be set equal to.</param>
    </javadoc>
    <method type="void" name="setReshape" startLine="352" endLine="363">
      <declaration type="int" name="dataLength" />
      <scope startLine="355" endLine="357" />
    </method>
    <javadoc>
      <text>* Sets this matrix equal to the matrix encoded in the array.</text>
      <param>numRows The number of rows.</param>
      <param>numCols The number of columns.</param>
      <param>rowMajor If the array is encoded in a row-major or a column-major format.</param>
      <param>data The formatted 1D array. Not modified.</param>
    </javadoc>
    <method type="void" name="set" startLine="374" endLine="392">
      <declaration type="int" name="length" />
      <scope startLine="382" endLine="384" />
      <scope startLine="384" endLine="391">
        <declaration type="int" name="index" />
        <scope startLine="386" endLine="390">
          <scope startLine="387" endLine="389" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Sets all elements equal to zero.</text>
    </javadoc>
    <method type="void" name="zero" startLine="397" endLine="399" />
    <javadoc>
      <text>* Creates and returns a matrix which is idential to this one.</text>
      <return>A new identical matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="copy" startLine="407" endLine="409" />
    <javadoc>
      <text>* Prints the value of this matrix to the screen.  For more options see{@link UtilEjml}</text>
    </javadoc>
    <method type="void" name="print" startLine="417" endLine="419" />
    <javadoc>
      <text>* <p>
 * Prints the value of this matrix to the screen using the same format as {@link java.io.PrintStream#printf).
 * </p>}</text>
      <param>format The format which each element is printed uses.</param>
    </javadoc>
    <method type="void" name="print" startLine="428" endLine="430" />
    <javadoc>
      <text>* <p>
 * Converts the array into a string format for display purposes.
 * The conversion is done using {@link MatrixIO#print(java.io.PrintStream,Matrix64F)}.
 * </p></text>
      <return>String representation of the matrix.</return>
    </javadoc>
    <method type="String" name="toString" startLine="441" endLine="446">
      <declaration type="ByteArrayOutputStream" name="stream" />
    </method>
    <comment>todo move to commonops</comment>
  </class>
</source>
