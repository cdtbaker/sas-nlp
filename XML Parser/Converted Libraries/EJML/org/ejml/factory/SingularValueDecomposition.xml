<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.factory">
  <import name="org.ejml.data.Matrix64F" />
  <interface name="SingularValueDecomposition" startLine="24">
    <implements name="DecompositionInterface<T>" />
    <javadoc>
      <text>* <p>
 * This is an abstract class for computing the singular value decomposition (SVD) of a matrix, which is defined
 * as:<br>
 * <div align=center> A = U * W * V <sup>T</sup> </div><br>
 * where A is m by n, and U and V are orthogonal matrices, and  W is a diagonal matrix.
 * </p>
 * <p>
 * The dimension of U,W,V depends if it is a compact SVD or not.  If not compact then U  is m by m, W is  m by n, V is n by n.
 * If compact then let s be the number of singular values, U is m by s, W is s by s, and V is n by s.
 * </p>
 * <p>
 * Accessor functions for decomposed matrices can return an internally constructed matrix if null is passed in for the
 * optional storage parameter.  The exact behavior is implementation specific.  If an internally maintained matrix is
 * returned then on the next call to decompose the matrix will be modified.  The advantage of this approach is reduced
 * memory overhead.
 * </p>
 * <p>
 * To create a new instance of SingularValueDecomposition see {@link DecompositionFactory#svd(int,int,boolean,boolean,boolean)}and {@link org.ejml.ops.SingularOps} contains additional helpful SVD related functions.
 * </p>
 * <p>
 * <b>*Note*</b> that the ordering of singular values is not guaranteed, unless done so by a specific implementation.
 * The singular values can be put into descending order while adjusting U and V using {@link org.ejml.ops.SingularOps#descendingOrder(org.ejml.data.DenseMatrix64F,boolean,org.ejml.data.DenseMatrix64F,org.ejml.data.DenseMatrix64F,boolean)}  SingularOps.descendingOrder()}.
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <method name="getSingularValues" type="double[]" startLine="59" endLine="66" />
    <javadoc>
      <text>* Returns the singular values.  This is the diagonal elements of the W matrix in the decomposition.
 * <b>Ordering of singular values is not guaranteed.</b>.</text>
      <return>Singular values. Note this array can be longer than the number of singular values.
 * Extra elements have no meaning.</return>
    </javadoc>
    <method name="numberOfSingularValues" type="int" startLine="68" endLine="73" />
    <javadoc>
      <text>* The number of singular values in the matrix. This is equal to the length of the smallest side.</text>
      <return>Number of singular values in the matrix.</return>
    </javadoc>
    <method name="isCompact" type="boolean" startLine="75" endLine="80" />
    <javadoc>
      <text>* If true then compact matrices are returned.</text>
      <return>true if results use compact notation.</return>
    </javadoc>
    <method name="getU" type="T" startLine="82" endLine="95" />
    <javadoc>
      <text>* <p>
 * Returns the orthogonal 'U' matrix.
 * </p>
 * <p>
 * Internally the SVD algorithm might compute U transposed or it might not.  To avoid an
 * unnecessary double transpose the option is provided to select if the transpose is returned.
 * </p></text>
      <param>U Optional storage for U. If null a new instance or internally maintained matrix is returned.  Modified.</param>
      <param>transposed If the returned U is transposed.</param>
      <return>An orthogonal matrix.</return>
    </javadoc>
    <method name="getV" type="T" startLine="97" endLine="111" />
    <javadoc>
      <text>* <p>
 * Returns the orthogonal 'V' matrix.
 * </p>
 * <p>
 * Internally the SVD algorithm might compute V transposed or it might not.  To avoid an
 * unnecessary double transpose the option is provided to select if the transpose is returned.
 * </p></text>
      <param>V Optional storage for v. If null a new instance or internally maintained matrix is returned.  Modified.</param>
      <param>transposed If the returned V is transposed.</param>
      <return>An orthogonal matrix.</return>
    </javadoc>
    <method name="getW" type="T" startLine="113" endLine="120" />
    <javadoc>
      <text>* Returns a diagonal matrix with the singular values.  Order of the singular values
 * is not guaranteed.</text>
      <param>W Optional storage for W. If null a new instance or internally maintained matrix is returned.  Modified.</param>
      <return>Diagonal matrix with singular values along the diagonal.</return>
    </javadoc>
    <method name="numRows" type="int" startLine="122" endLine="126" />
    <javadoc>
      <text>* Number of rows in the decomposed matrix.</text>
      <return>Number of rows in the decomposed matrix.</return>
    </javadoc>
    <method name="numCols" type="int" startLine="128" endLine="132" />
    <javadoc>
      <text>* Number of columns in the decomposed matrix.</text>
      <return>Number of columns in the decomposed matrix.</return>
    </javadoc>
  </interface>
</source>
