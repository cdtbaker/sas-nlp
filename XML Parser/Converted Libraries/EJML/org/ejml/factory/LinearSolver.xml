<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.factory">
  <import name="org.ejml.data.Matrix64F" />
  <interface name="LinearSolver" startLine="24">
    <javadoc>
      <text>* <p>
 * An implementation of LinearSolver solves a linear system or inverts a matrix.  It masks more complex
 * implementation details, while giving the programmer control over memory management and performance.
 * To quickly detect nearly singular matrices without computing the SVD the {@link #quality()}function is provided.
 * </p>
 * <p>
 * A linear system is defined as:
 * A*X = B.<br>
 * where A &isin; &real; <sup>m &times; n</sup>, X &isin; &real; <sup>n &times; p</sup>,
 * B &isin; &real; <sup>m &times; p</sup>.  Different implementations can solve different
 * types and shapes in input matrices and have different memory and runtime performance.
 * </p>
 * <p>
 * To solve a system:<br>
 * <ol>
 * <li> Call {@link #setA(org.ejml.data.Matrix64F)}<li> Call {@link #solve(org.ejml.data.Matrix64F,org.ejml.data.Matrix64F)}.
 * </ol>
 * </p>
 * <p>
 * To invert a matrix:<br>
 * <ol>
 * <li> Call {@link #setA(org.ejml.data.Matrix64F)}<li> Call {@link #invert(org.ejml.data.Matrix64F)}.
 * </ol>
 * A matrix can also be inverted by passing in an identity matrix to solve, but this will be
 * slower and more memory intensive than the specialized invert() function.
 * </p>
 * <p>
 * <b>IMPORTANT:</b> Depending upon the implementation, input matrices might be overwritten by
 * the solver.  This
 * reduces memory and computational requirements and give more control to the programmer.  If
 * the input matrices need to be not modified then {@link org.ejml.alg.dense.linsol.LinearSolverSafe} can be used.  The
 * functions {@link #modifiesA()} and {@link #modifiesB()} specify which input matrices are being
 * modified.
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <method name="setA" type="boolean" startLine="71" endLine="86" />
    <javadoc>
      <text>* <p>
 * Specifies the A matrix in the linear equation.  A reference might be saved
 * and it might also be modified depending on the implementation.  If it is modified
 * then {@link #modifiesA()} will return true.
 * </p>
 * <p>
 * If this value returns true that does not guarantee a valid solution was generated.  This
 * is because some decompositions don't detect singular matrices.
 * </p></text>
      <param>A The 'A' matrix in the linear equation. Might be modified or save the reference.</param>
      <return>true if it can be processed.</return>
    </javadoc>
    <method name="quality" type="double" startLine="88" endLine="105" />
    <javadoc>
      <text>* <p>
 * Returns a very quick to compute measure of how singular the system is.  This measure will
 * be invariant to the scale of the matrix and always be positive, with larger values
 * indicating it is less singular.  If not supported by the solver then the runtime
 * exception IllegalArgumentException is thrown.  This is NOT the matrix's condition.
 * <p>
 * <p>
 * How this function is implemented is not specified.  One possible implementation is the following:
 * In many decompositions a triangular matrix
 * is extracted.  The determinant of a triangular matrix is easily computed and once normalized
 * to be scale invariant and its absolute value taken it will provide functionality described above.
 * </p></text>
      <return>The quality of the linear system.</return>
    </javadoc>
    <method name="solve" type="void" startLine="107" endLine="119" />
    <javadoc>
      <text>* <p>
 * Solves for X in the linear system, A*X=B.
 * </p>
 * <p>
 * In some implementations 'B' and 'X' can be the same instance of a variable.  Call{@link #modifiesB()} to determine if 'B' is modified.
 * </p></text>
      <param>B A matrix &real; <sup>m &times; p</sup>.  Might be modified.</param>
      <param>X A matrix &real; <sup>n &times; p</sup>, where the solution is written to.  Modified.</param>
    </javadoc>
    <method name="invert" type="void" startLine="122" endLine="129" />
    <javadoc>
      <text>* Computes the inverse of of the 'A' matrix passed into {@link #setA(org.ejml.data.Matrix64F)}and writes the results to the provided matrix.  If 'A_inv' needs to be different from 'A'
 * is implementation dependent.</text>
      <param>A_inv Where the inverted matrix saved. Modified.</param>
    </javadoc>
    <method name="modifiesA" type="boolean" startLine="131" endLine="137" />
    <javadoc>
      <text>* Returns true if the passed in matrix to {@link #setA(org.ejml.data.Matrix64F)}is modified.</text>
      <return>true if A is modified in setA().</return>
    </javadoc>
    <method name="modifiesB" type="boolean" startLine="139" endLine="145" />
    <javadoc>
      <text>* Returns true if the passed in 'B' matrix to {@link #solve(org.ejml.data.Matrix64F,org.ejml.data.Matrix64F)}is modified.</text>
      <return>true if B is modified in solve(B,X).</return>
    </javadoc>
  </interface>
</source>
