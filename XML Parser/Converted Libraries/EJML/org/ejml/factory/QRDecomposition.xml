<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.factory">
  <import name="org.ejml.data.Matrix64F" />
  <interface name="QRDecomposition" startLine="24">
    <implements name="DecompositionInterface<T>" />
    <javadoc>
      <text>* <p>
 * QR decompositions decompose a rectangular matrix 'A' such that 'A=QR'.  Where
 * A &isin; &real; <sup>n &times; m</sup> , n &ge; m, Q &isin; &real; <sup>n &times; n</sup> is an orthogonal matrix,
 * and R &isin; &real; <sup>n &times; m</sup> is an upper triangular matrix.  Some implementations
 * of QR decomposition require that A has full rank.
 * </p>
 * <p>
 * Some features of QR decompositions:
 * <ul>
 * <li> Can decompose rectangular matrices. </li>
 * <li> Numerically stable solutions to least-squares problem, but not as stable as SVD </li>
 * <li> Can incrementally add and remove columns from the decomposed matrix.  See {@link org.ejml.alg.dense.linsol.qr.AdjLinearSolverQr} </li>
 * </ul>
 * </p>
 * <p>
 * Orthogonal matrices have the following properties:
 * <ul>
 * <li>QQ<sup>T</sup>=I</li>
 * <li>Q<sup>T</sup>=Q<sup>-1</sup></li>
 * </ul>
 * </p></text>
      <see>org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholder</see>
      <see>org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholderColumn</see>
      <author>Peter Abeles</author>
    </javadoc>
    <method name="getQ" type="T" startLine="54" endLine="70" />
    <javadoc>
      <text>* <p>
 * Returns the Q matrix from the decomposition.  Should only
 * be called after {@link #decompose(org.ejml.data.Matrix64F)} has
 * been called.
 * </p>
 * <p>
 * If parameter Q is not null, then that matrix is used to store the Q matrix.  Otherwise
 * a new matrix is created.
 * </p></text>
      <param>Q If not null then the Q matrix is written to it.  Modified.</param>
      <param>compact If true an m by n matrix is created, otherwise n by n.</param>
      <return>The Q matrix.</return>
    </javadoc>
    <method name="getR" type="T" startLine="72" endLine="92" />
    <javadoc>
      <text>* <p>
 * Returns the R matrix from the decomposition.  Should only be
 * called after {@link #decompose(org.ejml.data.Matrix64F)} has been.
 * </p>
 * <p>
 * If setZeros is true then an n &times; m matrix is required and all the elements are set.
 * If setZeros is false then the matrix must be at least m &times; m and only the upper triangular
 * elements are set.
 * </p>
 * <p>
 * If parameter R is not null, then that matrix is used to store the R matrix.  Otherwise
 * a new matrix is created.
 * </p></text>
      <param>R If not null then the R matrix is written to it. Modified.</param>
      <param>compact If true only the upper triangular elements are set</param>
      <return>The R matrix.</return>
    </javadoc>
  </interface>
</source>
