<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.factory">
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.data.Matrix64F" />
  <interface name="QRPDecomposition" startLine="24">
    <implements name="QRDecomposition<T>" />
    <javadoc>
      <text>* <p>
 * Similar to {@link QRDecomposition} but it can handle the rank deficient case by
 * performing column pivots during the decomposition. The final decomposition has the
 * following structure:<br>
 * A*P=Q*R<br>
 * where A is the original matrix, P is a pivot matrix, Q is an orthogonal matrix, and R is
 * upper triangular.
 * </p>
 * <p>
 * WARNING: You should always call {@link #setSingularThreshold(double)} before {@link #decompose(org.ejml.data.Matrix64F)}.
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <method name="setSingularThreshold" type="void" startLine="43" endLine="53" />
    <javadoc>
      <text>* <p>
 * Specifies the threshold used to flag a column as being singular.  The optimal threshold (if one exists)
 * varies by the matrix being processed.  A reasonable value would be the maximum absolute value of the
 * matrix's elements multiplied by EPS:<br>
 * decomposition.setSingularThreshold(CommonOps.elementMaxAbs(A)*UtilEjml.EPS)
 * </p></text>
      <param>threshold Singular threshold.</param>
    </javadoc>
    <method name="getRank" type="int" startLine="55" endLine="61" />
    <javadoc>
      <text>* Returns the rank as determined by the algorithm.  This is dependent upon a fixed threshold
 * and might not be appropriate for some applications.</text>
      <return>Matrix's rank</return>
    </javadoc>
    <method name="getPivots" type="int[]" startLine="63" endLine="68" />
    <javadoc>
      <text>* Ordering of each column after pivoting.   The current column i was original at column pivot[i].</text>
      <return>Order of columns.</return>
    </javadoc>
    <method name="getPivotMatrix" type="DenseMatrix64F" startLine="70" endLine="76" />
    <javadoc>
      <text>* Creates the pivot matrix.</text>
      <param>P Optional storage for pivot matrix.  If null a new matrix will be created.</param>
      <return>The pivot matrix.</return>
    </javadoc>
  </interface>
</source>
