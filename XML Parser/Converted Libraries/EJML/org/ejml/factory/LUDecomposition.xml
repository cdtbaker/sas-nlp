<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.factory">
  <import name="org.ejml.data.Matrix64F" />
  <interface name="LUDecomposition" startLine="24">
    <implements name="DecompositionInterface<T>" />
    <javadoc>
      <text>* <p>
 * LU Decomposition refactors the original matrix such that:<br>
 * <div align=center> P<sup>T</sup>*L*U = A</div>
 * where P is a pivot matrix, L is a lower triangular matrix, U is an upper triangular matrix and A is
 * the original matrix.
 * </p>
 * <p>
 * LU Decomposition is useful since once the decomposition has been performed linear
 * equations can be quickly solved and the original matrix A inverted.  Different algorithms
 * can be selected to perform the decomposition, all will have the same end result.
 * </p>
 * <p>
 * To use this class first specify the size of the matrix that will be decomposed by it in
 * the constructor.  Only square m by m matrices can be decomposed.  Then to decompose a matrix
 * call {@link #decompose}.  If it encounters any problems an exception will be thrown.  After
 * that all the other functions will be available for solving and inverting matrices.
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <method name="getLower" type="T" startLine="49" endLine="64" />
    <javadoc>
      <text>* <p>
 * Returns the L matrix from the decomposition.  Should only
 * be called after {@link #decompose(org.ejml.data.Matrix64F)} has
 * been called.
 * </p>
 * <p>
 * If parameter 'lower' is not null, then that matrix is used to store the L matrix.  Otherwise
 * a new matrix is created.
 * </p></text>
      <param>lower Storage for T matrix. If null then a new matrix is returned.  Modified.</param>
      <return>The L matrix.</return>
    </javadoc>
    <method name="getUpper" type="T" startLine="66" endLine="81" />
    <javadoc>
      <text>* <p>
 * Returns the U matrix from the decomposition.  Should only
 * be called after {@link #decompose(org.ejml.data.Matrix64F)}  has
 * been called.
 * </p>
 * <p>
 * If parameter 'upper' is not null, then that matrix is used to store the U matrix.  Otherwise
 * a new matrix is created.
 * </p></text>
      <param>upper Storage for U matrix. If null then a new matrix is returned. Modified.</param>
      <return>The U matrix.</return>
    </javadoc>
    <method name="getPivot" type="T" startLine="83" endLine="92" />
    <javadoc>
      <text>* <p>
 * For numerical stability there are often row interchanges.  This computes
 * a pivot matrix that will undo those changes.
 * </p></text>
      <param>pivot Storage for the pivot matrix. If null then a new matrix is returned. Modified.</param>
      <return>The pivot matrix.</return>
    </javadoc>
    <method name="isSingular" type="boolean" startLine="94" endLine="101">
      <comment>TODO Remove?  If singular decomposition will fail.</comment>
    </method>
    <javadoc>
      <text>* Returns true if the decomposition detected a singular matrix.  This check
 * will not work 100% of the time due to machine precision issues.</text>
      <return>True if the matrix is singular and false if it is not.</return>
    </javadoc>
    <method name="computeDeterminant" type="double" startLine="103" endLine="108" />
    <javadoc>
      <text>* Computes the matrix's determinant using the LU decomposition.</text>
      <return>The determinant.</return>
    </javadoc>
  </interface>
</source>
