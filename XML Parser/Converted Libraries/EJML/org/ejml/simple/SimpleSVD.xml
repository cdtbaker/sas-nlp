<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.simple">
  <import name="org.ejml.UtilEjml" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.factory.DecompositionFactory" />
  <import name="org.ejml.factory.SingularValueDecomposition" />
  <import name="org.ejml.ops.SingularOps" />
  <class name="SimpleSVD" startLine="28">
    <javadoc>
      <text>* <p>
 * Wrapper around SVD for simple matrix.  See {@link SingularValueDecomposition} for more details.
 * </p>
 * <p>
 * SVD is defined as the following decomposition:<br>
 * <div align=center> A = U * W * V <sup>T</sup> </div><br>
 * where A is m by n, and U and V are orthogonal matrices, and  W is a diagonal matrix
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="SingularValueDecomposition<DenseMatrix64F>" name="svd" />
    <declaration type="T" name="U" />
    <declaration type="T" name="W" />
    <declaration type="T" name="V" />
    <declaration type="DenseMatrix64F" name="mat" />
    <method type="constructor" name="SimpleSVD" startLine="50" endLine="61">
      <comment>order singular values from largest to smallest</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Returns the orthogonal 'U' matrix.
 * </p></text>
      <return>An orthogonal m by m matrix.</return>
    </javadoc>
    <method type="T" name="getU" startLine="70" endLine="72" />
    <javadoc>
      <text>* Returns a diagonal matrix with the singular values.  The singular values are ordered
 * from largest to smallest.</text>
      <return>Diagonal matrix with singular values along the diagonal.</return>
    </javadoc>
    <method type="T" name="getW" startLine="80" endLine="82" />
    <javadoc>
      <text>* <p>
 * Returns the orthogonal 'V' matrix.
 * </p></text>
      <return>An orthogonal n by n matrix.</return>
    </javadoc>
    <method type="T" name="getV" startLine="91" endLine="93" />
    <javadoc>
      <text>* <p>
 * Computes the quality of the computed decomposition.  A value close to or less than 1e-15
 * is considered to be within machine precision.
 * </p>
 * <p>
 * This function must be called before the original matrix has been modified or else it will
 * produce meaningless results.
 * </p></text>
      <return>Quality of the decomposition.</return>
    </javadoc>
    <method type="double" name="quality" startLine="108" endLine="110" />
    <javadoc>
      <text>* Computes the null space from an SVD.  For more information see {@link SingularOps#nullSpace}.</text>
      <return>Null space vector.</return>
    </javadoc>
    <method type="SimpleMatrix" name="nullSpace" startLine="116" endLine="119">
      <comment>TODO take advantage of the singular values being ordered already</comment>
    </method>
    <javadoc>
      <text>* Returns the specified singular value.</text>
      <param>index Which singular value is to be returned.</param>
      <return>A singular value.</return>
    </javadoc>
    <method type="double" name="getSingleValue" startLine="127" endLine="129" />
    <javadoc>
      <text>* Returns the rank of the decomposed matrix.</text>
      <see>SingularOps#rank(org.ejml.factory.SingularValueDecomposition,double)</see>
      <return>The matrix's rank</return>
    </javadoc>
    <method type="int" name="rank" startLine="138" endLine="140" />
    <javadoc>
      <text>* The nullity of the decomposed matrix.</text>
      <see>SingularOps#nullity(org.ejml.factory.SingularValueDecomposition,double)</see>
      <return>The matrix's nullity</return>
    </javadoc>
    <method type="int" name="nullity" startLine="149" endLine="151" />
    <javadoc>
      <text>* Returns the underlying decomposition that this is a wrapper around.</text>
      <return>SingularValueDecomposition</return>
    </javadoc>
    <method type="SingularValueDecomposition" name="getSVD" startLine="158" endLine="160" />
  </class>
</source>
