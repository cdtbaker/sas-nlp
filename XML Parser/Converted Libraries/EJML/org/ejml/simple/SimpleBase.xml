<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.simple">
  <import name="org.ejml.alg.dense.mult.VectorVectorMult" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.data.MatrixIterator" />
  <import name="org.ejml.data.ReshapeMatrix64F" />
  <import name="org.ejml.factory.SingularMatrixException" />
  <import name="org.ejml.ops.*" />
  <import name="java.io.ByteArrayOutputStream" />
  <import name="java.io.IOException" />
  <import name="java.io.PrintStream" />
  <import name="java.io.Serializable" />
  <class name="SimpleBase" startLine="34">
    <implements name="Serializable" />
    <javadoc>
      <text>* Parent of {@link SimpleMatrix} implements all the standard matrix operations and uses
 * generics to allow the returned matrix type to be changed.  This class should be extended
 * instead of SimpleMatrix.</text>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* Internal matrix which this is a wrapper around.</text>
    </javadoc>
    <declaration type="DenseMatrix64F" name="mat" />
    <method type="constructor" name="SimpleBase" startLine="50" endLine="52" />
    <method type="constructor" name="SimpleBase" startLine="54" endLine="55" />
    <method name="createMatrix" type="T" startLine="57" endLine="66" />
    <javadoc>
      <text>* Used internally for creating new instances of SimpleMatrix.  If SimpleMatrix is extended
 * by another class this function should be overridden so that the returned matrices are
 * of the correct type.</text>
      <param>numRows number of rows in the new matrix.</param>
      <param>numCols number of columns in the new matrix.</param>
      <return>A new matrix.</return>
    </javadoc>
    <javadoc>
      <text>* <p>
 * Returns a reference to the matrix that it uses internally.  This is useful
 * when an operation is needed that is not provided by this class.
 * </p></text>
      <return>Reference to the internal DenseMatrix64F.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="getMatrix" startLine="76" endLine="78" />
    <javadoc>
      <text>* <p>
 * Returns the transpose of this matrix.<br>
 * a<sup>T</sup>
 * </p></text>
      <see>org.ejml.ops.CommonOps#transpose(DenseMatrix64F,DenseMatrix64F)</see>
      <return>A matrix that is n by m.</return>
    </javadoc>
    <method type="T" name="transpose" startLine="90" endLine="96">
      <declaration type="T" name="ret" />
    </method>
    <javadoc>
      <text>* <p>
 * Returns a matrix which is the result of matrix multiplication:<br>
 * <br>
 * c = a * b <br>
 * <br>
 * where c is the returned matrix, a is this matrix, and b is the passed in matrix.
 * </p></text>
      <see>CommonOps#mult(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
      <param>b A matrix that is n by bn. Not modified.</param>
      <return>The results of this operation.</return>
    </javadoc>
    <method type="T" name="mult" startLine="113" endLine="119">
      <declaration type="T" name="ret" />
    </method>
    <javadoc>
      <text>* <p>
 * Computes the Kronecker product between this matrix and the provided B matrix:<br>
 * <br>
 * C = kron(A,B)
 * </p></text>
      <see>CommonOps#kron(DenseMatrix64F,DenseMatrix64F,DenseMatrix64F)</see>
      <param>B The right matrix in the operation. Not modified.</param>
      <return>Kronecker product between this matrix and B.</return>
    </javadoc>
    <method type="T" name="kron" startLine="133" endLine="138">
      <declaration type="T" name="ret" />
    </method>
    <javadoc>
      <text>* <p>
 * Returns the result of matrix addition:<br>
 * <br>
 * c = a + b <br>
 * <br>
 * where c is the returned matrix, a is this matrix, and b is the passed in matrix.
 * </p></text>
      <see>CommonOps#mult(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
      <param>b m by n matrix. Not modified.</param>
      <return>The results of this operation.</return>
    </javadoc>
    <method type="T" name="plus" startLine="155" endLine="161">
      <declaration type="T" name="ret" />
    </method>
    <javadoc>
      <text>* <p>
 * Returns the result of matrix subtraction:<br>
 * <br>
 * c = a - b <br>
 * <br>
 * where c is the returned matrix, a is this matrix, and b is the passed in matrix.
 * </p></text>
      <see>CommonOps#sub(org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)</see>
      <param>b m by n matrix. Not modified.</param>
      <return>The results of this operation.</return>
    </javadoc>
    <method type="T" name="minus" startLine="178" endLine="184">
      <declaration type="T" name="ret" />
    </method>
    <javadoc>
      <text>* <p>
 * Performs a matrix addition and scale operation.<br>
 * <br>
 * c = a + &beta;*b <br>
 * <br>
 * where c is the returned matrix, a is this matrix, and b is the passed in matrix.
 * </p></text>
      <see>CommonOps#add(org.ejml.data.D1Matrix64F,double,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)</see>
      <param>b m by n matrix. Not modified.</param>
      <return>A matrix that contains the results.</return>
    </javadoc>
    <method type="T" name="plus" startLine="201" endLine="207">
      <declaration type="T" name="ret" />
    </method>
    <javadoc>
      <text>* Computes the dot product (a.k.a. inner product) between this vector and vector 'v'.</text>
      <param>v The second vector in the dot product.  Not modified.</param>
      <return>dot product</return>
    </javadoc>
    <method type="double" name="dot" startLine="215" endLine="223">
      <scope startLine="216" endLine="218" />
      <scope startLine="218" endLine="220" />
    </method>
    <javadoc>
      <text>* Returns true if this matrix is a vector.  A vector is defined as a matrix
 * that has either one row or column.</text>
      <return>Returns true for vectors and false otherwise.</return>
    </javadoc>
    <method type="boolean" name="isVector" startLine="231" endLine="233" />
    <javadoc>
      <text>* <p>
 * Returns the result of scaling each element by 'val':<br>
 * b<sub>i,j</sub> = val*a<sub>i,j</sub>
 * </p></text>
      <see>CommonOps#scale(double,org.ejml.data.D1Matrix64F)</see>
      <param>val The multiplication factor.</param>
      <return>The scaled matrix.</return>
    </javadoc>
    <method type="T" name="scale" startLine="246" endLine="252">
      <declaration type="T" name="ret" />
    </method>
    <javadoc>
      <text>* <p>
 * Returns the result of dividing each element by 'val':
 * b<sub>i,j</sub> = a<sub>i,j</sub>/val
 * </p></text>
      <see>CommonOps#divide(double,org.ejml.data.D1Matrix64F)</see>
      <param>val Divisor.</param>
      <return>Matrix with its elements divided by the specified value.</return>
    </javadoc>
    <method type="T" name="divide" startLine="265" endLine="271">
      <declaration type="T" name="ret" />
    </method>
    <javadoc>
      <text>* <p>
 * Returns the inverse of this matrix.<br>
 * <br>
 * b = a<sup>-1<sup><br>
 * </p>
 * <p>
 * If the matrix could not be inverted then SingularMatrixException is thrown.  Even
 * if no exception is thrown the matrix could still be singular or nearly singular.
 * </p></text>
      <see>CommonOps#invert(DenseMatrix64F,DenseMatrix64F)</see>
      <throws>org.ejml.factory.SingularMatrixException</throws>
      <return>The inverse of this matrix.</return>
    </javadoc>
    <method type="T" name="invert" startLine="291" endLine="297">
      <declaration type="T" name="ret" />
      <scope startLine="293" endLine="295" />
    </method>
    <javadoc>
      <text>* <p>
 * Computes the Moore-Penrose pseudo-inverse
 * </p></text>
      <return>inverse computed using the pseudo inverse.</return>
    </javadoc>
    <method type="T" name="pseudoInverse" startLine="306" endLine="310">
      <declaration type="T" name="ret" />
    </method>
    <javadoc>
      <text>* <p>
 * Solves for X in the following equation:<br>
 * <br>
 * x = a<sup>-1</sup>b<br>
 * <br>
 * where 'a' is this matrix and 'b' is an n by p matrix.
 * </p>
 * <p>
 * If the system could not be solved then SingularMatrixException is thrown.  Even
 * if no exception is thrown 'a' could still be singular or nearly singular.
 * </p></text>
      <see>CommonOps#solve(DenseMatrix64F,DenseMatrix64F,DenseMatrix64F)</see>
      <throws>SingularMatrixException</throws>
      <param>b n by p matrix. Not modified.</param>
      <return>The solution for 'x' that is n by p.</return>
    </javadoc>
    <method type="T" name="solve" startLine="334" endLine="341">
      <declaration type="T" name="x" />
    </method>
    <javadoc>
      <text>* Sets the elements in this matrix to be equal to the elements in the passed in matrix.
 * Both matrix must have the same dimension.</text>
      <param>a The matrix whose value this matrix is being set to.</param>
    </javadoc>
    <method type="void" name="set" startLine="350" endLine="352" />
    <javadoc>
      <text>* <p>
 * Sets all the elements in this matrix equal to the specified value.<br>
 * <br>
 * a<sub>ij</sub> = val<br>
 * </p></text>
      <see>CommonOps#fill(org.ejml.data.D1Matrix64F,double)</see>
      <param>val The value each element is set to.</param>
    </javadoc>
    <method type="void" name="set" startLine="366" endLine="368" />
    <javadoc>
      <text>* Sets all the elements in the matrix equal to zero.</text>
      <see>CommonOps#fill(org.ejml.data.D1Matrix64F,double)</see>
    </javadoc>
    <method type="void" name="zero" startLine="375" endLine="377" />
    <javadoc>
      <text>* <p>
 * Computes the Frobenius normal of the matrix:<br>
 * <br>
 * normF = Sqrt{  &sum;<sub>i=1:m</sub> &sum;<sub>j=1:n</sub> { a<sub>ij</sub><sup>2</sup>}   }
 * </p></text>
      <see>org.ejml.ops.NormOps#normF(org.ejml.data.D1Matrix64F)</see>
      <return>The matrix's Frobenius normal.</return>
    </javadoc>
    <method type="double" name="normF" startLine="390" endLine="392" />
    <javadoc>
      <text>* <p>
 * The condition p = 2 number of a matrix is used to measure the sensitivity of the linear
 * system <b>Ax=b</b>.  A value near one indicates that it is a well conditioned matrix.
 * </p></text>
      <see>NormOps#conditionP2(DenseMatrix64F)</see>
      <return>The condition number.</return>
    </javadoc>
    <method type="double" name="conditionP2" startLine="404" endLine="406" />
    <javadoc>
      <text>* Computes the determinant of the matrix.</text>
      <see>CommonOps#det(DenseMatrix64F)</see>
      <return>The determinant.</return>
    </javadoc>
    <method type="double" name="determinant" startLine="415" endLine="417" />
    <javadoc>
      <text>* <p>
 * Computes the trace of the matrix.
 * </p></text>
      <see>CommonOps#trace(org.ejml.data.RowD1Matrix64F)</see>
      <return>The trace of the matrix.</return>
    </javadoc>
    <method type="double" name="trace" startLine="428" endLine="430" />
    <javadoc>
      <text>* <p>
 * Reshapes the matrix to the specified number of rows and columns.  If the total number of elements
 * is <= number of elements it had before the data is saved.  Otherwise a new internal array is
 * declared and the old data lost.
 * </p>
 * <p>
 * This is equivalent to calling A.getMatrix().reshape(numRows,numCols,false).
 * </p></text>
      <see>org.ejml.data.ReshapeMatrix64F#reshape(int,int,boolean)</see>
      <param>numRows The new number of rows in the matrix.</param>
      <param>numCols The new number of columns in the matrix.</param>
    </javadoc>
    <method type="void" name="reshape" startLine="448" endLine="450" />
    <javadoc>
      <text>* Assigns the element in the Matrix to the specified value.  Performs a bounds check to make sure
 * the requested element is part of the matrix.</text>
      <param>row The row of the element.</param>
      <param>col The column of the element.</param>
      <param>value The element's new value.</param>
    </javadoc>
    <method type="void" name="set" startLine="460" endLine="462" />
    <javadoc>
      <text>* Assigns an element a value based on its index in the internal array..</text>
      <param>index The matrix element that is being assigned a value.</param>
      <param>value The element's new value.</param>
    </javadoc>
    <method type="void" name="set" startLine="470" endLine="472" />
    <javadoc>
      <text>* <p>
 * Assigns consecutive elements inside a row to the provided array.<br>
 * <br>
 * A(row,offset:(offset + values.length)) = values
 * </p></text>
      <param>row The row that the array is to be written to.</param>
      <param>offset The initial column that the array is written to.</param>
      <param>values Values which are to be written to the row in a matrix.</param>
    </javadoc>
    <method type="void" name="setRow" startLine="485" endLine="489">
      <scope startLine="486" endLine="488" />
    </method>
    <javadoc>
      <text>* <p>
 * Assigns consecutive elements inside a column to the provided array.<br>
 * <br>
 * A(offset:(offset + values.length),column) = values
 * </p></text>
      <param>column The column that the array is to be written to.</param>
      <param>offset The initial column that the array is written to.</param>
      <param>values Values which are to be written to the row in a matrix.</param>
    </javadoc>
    <method type="void" name="setColumn" startLine="502" endLine="506">
      <scope startLine="503" endLine="505" />
    </method>
    <javadoc>
      <text>* Returns the value of the specified matrix element.  Performs a bounds check to make sure
 * the requested element is part of the matrix.</text>
      <param>row The row of the element.</param>
      <param>col The column of the element.</param>
      <return>The value of the element.</return>
    </javadoc>
    <method type="double" name="get" startLine="516" endLine="518" />
    <javadoc>
      <text>* Returns the value of the matrix at the specified index of the 1D row major array.</text>
      <see>org.ejml.data.DenseMatrix64F#get(int)</see>
      <param>index The element's index whose value is to be returned</param>
      <return>The value of the specified element.</return>
    </javadoc>
    <method type="double" name="get" startLine="528" endLine="530" />
    <javadoc>
      <text>* Returns the index in the matrix's array.</text>
      <see>org.ejml.data.DenseMatrix64F#getIndex(int,int)</see>
      <param>row The row number.</param>
      <param>col The column number.</param>
      <return>The index of the specified element.</return>
    </javadoc>
    <method type="int" name="getIndex" startLine="541" endLine="543" />
    <javadoc>
      <text>* Creates a new iterator for traversing through a submatrix inside this matrix.  It can be traversed
 * by row or by column.  Range of elements is inclusive, e.g. minRow = 0 and maxRow = 1 will include rows
 * 0 and 1.  The iteration starts at (minRow,minCol) and ends at (maxRow,maxCol)</text>
      <param>rowMajor true means it will traverse through the submatrix by row first, false by columns.</param>
      <param>minRow first row it will start at.</param>
      <param>minCol first column it will start at.</param>
      <param>maxRow last row it will stop at.</param>
      <param>maxCol last column it will stop at.</param>
      <return>A new MatrixIterator</return>
    </javadoc>
    <method type="MatrixIterator" name="iterator" startLine="558" endLine="560" />
    <javadoc>
      <text>* Creates and returns a matrix which is idential to this one.</text>
      <return>A new identical matrix.</return>
    </javadoc>
    <method type="T" name="copy" startLine="567" endLine="571">
      <declaration type="T" name="ret" />
    </method>
    <javadoc>
      <text>* Returns the number of rows in this matrix.</text>
      <return>number of rows.</return>
    </javadoc>
    <method type="int" name="numRows" startLine="578" endLine="580" />
    <javadoc>
      <text>* Returns the number of columns in this matrix.</text>
      <return>number of columns.</return>
    </javadoc>
    <method type="int" name="numCols" startLine="587" endLine="589" />
    <javadoc>
      <text>* Returns the number of elements in this matrix, which is equal to
 * the number of rows times the number of columns.</text>
      <return>The number of elements in the matrix.</return>
    </javadoc>
    <method type="int" name="getNumElements" startLine="597" endLine="599" />
    <javadoc>
      <text>* Prints the matrix to standard out.</text>
    </javadoc>
    <method type="void" name="print" startLine="605" endLine="607" />
    <javadoc>
      <text>* Prints the matrix to standard out with the specified precision.</text>
    </javadoc>
    <method type="void" name="print" startLine="612" endLine="614" />
    <javadoc>
      <text>* <p>
 * Prints the matrix to standard out given a {@link java.io.PrintStream#printf) style floating point format,
 * e.g. print("%f").
 * </p>}</text>
    </javadoc>
    <method type="void" name="print" startLine="622" endLine="624" />
    <javadoc>
      <text>* <p>
 * Converts the array into a string format for display purposes.
 * The conversion is done using {@link MatrixIO#print(java.io.PrintStream,org.ejml.data.ReshapeMatrix64F)}.
 * </p></text>
      <return>String representation of the matrix.</return>
    </javadoc>
    <method type="String" name="toString" startLine="634" endLine="639">
      <declaration type="ByteArrayOutputStream" name="stream" />
    </method>
    <javadoc>
      <text>* <p>
 * Creates a new SimpleMatrix which is a submatrix of this matrix.
 * </p>
 * <p>
 * s<sub>i-y0 , j-x0</sub> = o<sub>ij</sub> for all y0 &le; i < y1 and x0 &le; j < x1<br>
 * <br>
 * where 's<sub>ij</sub>' is an element in the submatrix and 'o<sub>ij</sub>' is an element in the
 * original matrix.
 * </p>
 * <p>
 * If any of the inputs are set to T.END then it will be set to the last row
 * or column in the matrix.
 * </p></text>
      <param>x0 Start column.</param>
      <param>x1 Stop column.</param>
      <param>y0 Start row.</param>
      <param>y1 Stop row.</param>
      <return>The submatrix.</return>
    </javadoc>
    <method type="T" name="extractMatrix" startLine="663" endLine="674">
      <declaration type="T" name="ret" />
    </method>
    <javadoc>
      <text>* <p>
 * Extracts a row or column from this matrix. The returned vector will either be a row
 * or column vector depending on the input type.
 * </p></text>
      <param>extractRow If true a row will be extracted.</param>
      <param>element The row or column the vector is contained in.</param>
      <return>Extracted vector.</return>
    </javadoc>
    <method type="T" name="extractVector" startLine="687" endLine="699">
      <declaration type="int" name="length" />
      <declaration type="T" name="ret" />
      <scope startLine="692" endLine="694" />
      <scope startLine="694" endLine="696" />
    </method>
    <javadoc>
      <text>* <p>
 * Extracts the diagonal from this matrix and returns them inside a column vector.
 * </p></text>
      <see>org.ejml.ops.CommonOps#extractDiag(DenseMatrix64F,DenseMatrix64F)</see>
      <return>Diagonal elements inside a column vector.</return>
    </javadoc>
    <method type="T" name="extractDiag" startLine="710" endLine="718">
      <declaration type="int" name="N" />
      <declaration type="T" name="diag" />
    </method>
    <javadoc>
      <text>* Checks to see if matrix 'a' is the same as this matrix within the specified
 * tolerance.</text>
      <param>a The matrix it is being compared against.</param>
      <param>tol How similar they must be to be equals.</param>
      <return>If they are equal within tolerance of each other.</return>
    </javadoc>
    <method type="boolean" name="isIdentical" startLine="728" endLine="730" />
    <javadoc>
      <text>* Checks to see if any of the elements in this matrix are either NaN or infinite.</text>
      <return>True of an element is NaN or infinite.  False otherwise.</return>
    </javadoc>
    <method type="boolean" name="hasUncountable" startLine="737" endLine="739" />
    <javadoc>
      <text>* Computes a full Singular Value Decomposition (SVD) of this matrix with the
 * eigenvalues ordered from largest to smallest.</text>
      <return>SVD</return>
    </javadoc>
    <method type="SimpleSVD" name="svd" startLine="747" endLine="749" />
    <javadoc>
      <text>* Computes the SVD in either  compact format or full format.</text>
      <return>SVD of this matrix.</return>
    </javadoc>
    <method type="SimpleSVD" name="svd" startLine="756" endLine="758" />
    <javadoc>
      <text>* Returns the Eigen Value Decomposition (EVD) of this matrix.</text>
    </javadoc>
    <method type="SimpleEVD" name="eig" startLine="763" endLine="765" />
    <javadoc>
      <text>* Copy matrix B into this matrix at location (insertRow, insertCol).</text>
      <param>insertRow First row the matrix is to be inserted into.</param>
      <param>insertCol First column the matrix is to be inserted into.</param>
      <param>B The matrix that is being inserted.</param>
    </javadoc>
    <method type="void" name="insertIntoThis" startLine="774" endLine="776" />
    <javadoc>
      <text>* <p>
 * Creates a new matrix that is a combination of this matrix and matrix B.  B is
 * written into A at the specified location if needed the size of A is increased by
 * growing it.  A is grown by padding the new area with zeros.
 * </p>
 * <p>
 * While useful when adding data to a matrix which will be solved for it is also much
 * less efficient than predeclaring a matrix and inserting data into it.
 * </p>
 * <p>
 * If insertRow or insertCol is set to SimpleMatrix.END then it will be combined
 * at the last row or column respectively.
 * <p></text>
      <param>insertRow Row where matrix B is written in to.</param>
      <param>insertCol Column where matrix B is written in to.</param>
      <param>B The matrix that is written into A.</param>
      <return>A new combined matrix.</return>
    </javadoc>
    <method type="T" name="combine" startLine="800" endLine="828">
      <scope startLine="802" endLine="804" />
      <scope startLine="806" endLine="808" />
      <declaration type="int" name="maxRow" />
      <declaration type="int" name="maxCol" />
      <declaration type="T" name="ret" />
      <scope startLine="815" endLine="821">
        <declaration type="int" name="M" />
        <declaration type="int" name="N" />
      </scope>
      <scope startLine="821" endLine="823" />
    </method>
    <javadoc>
      <text>* Returns the maximum absolute value of all the elements in this matrix.  This is
 * equivalent the the infinite p-norm of the matrix.</text>
      <return>Largest absolute value of any element.</return>
    </javadoc>
    <method type="double" name="elementMaxAbs" startLine="836" endLine="838" />
    <javadoc>
      <text>* Computes the sum of all the elements in the matrix.</text>
      <return>Sum of all the elements.</return>
    </javadoc>
    <method type="double" name="elementSum" startLine="845" endLine="847" />
    <javadoc>
      <text>* <p>
 * Returns a matrix which is the result of an element by element multiplication of 'this' and 'b':
 * c<sub>i,j</sub> = a<sub>i,j</sub>*b<sub>i,j</sub>
 * </p></text>
      <param>b A simple matrix.</param>
      <return>The element by element multiplication of 'this' and 'b'.</return>
    </javadoc>
    <method type="T" name="elementMult" startLine="859" endLine="865">
      <declaration type="T" name="c" />
    </method>
    <javadoc>
      <text>* <p>
 * Returns a new matrix whose elements are the negative of 'this' matrix's elements.<br>
 * <br>
 * b<sub>ij</sub> = -a<sub>ij</sub>
 * </p></text>
      <return>A matrix that is the negative of the original.</return>
    </javadoc>
    <method type="T" name="negative" startLine="876" endLine="880">
      <declaration type="T" name="A" />
    </method>
    <javadoc>
      <text>* <p>
 * Saves this matrix to a file as a serialized binary object.
 * </p></text>
      <see>MatrixIO#saveBin(org.ejml.data.ReshapeMatrix64F,String)</see>
      <param>fileName</param>
      <throws>java.io.IOException</throws>
    </javadoc>
    <method type="void" name="saveToFileBinary" startLine="894" endLine="896" />
    <javadoc>
      <text>* <p>
 * Loads a new matrix from a serialized binary file.
 * </p></text>
      <see>MatrixIO#loadBin(String)</see>
      <param>fileName File which is to be loaded.</param>
      <return>The matrix.</return>
      <throws>IOException</throws>
    </javadoc>
    <method type="SimpleMatrix" name="loadBinary" startLine="910" endLine="920">
      <declaration type="ReshapeMatrix64F" name="mat" />
      <scope startLine="914" endLine="916" />
      <scope startLine="916" endLine="919">
        <comment>if not convert it into one and wrap it</comment>
      </scope>
      <comment>see if its a DenseMatrix64F</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Saves this matrix to a file in a CSV format.  For the file format see {@link MatrixIO}.
 * </p></text>
      <see>MatrixIO#saveBin(org.ejml.data.ReshapeMatrix64F,String)</see>
      <param>fileName</param>
      <throws>java.io.IOException</throws>
    </javadoc>
    <method type="void" name="saveToFileCSV" startLine="934" endLine="936" />
    <javadoc>
      <text>* <p>
 * Loads a new matrix from a CSV file.  For the file format see {@link MatrixIO}.
 * </p></text>
      <see>MatrixIO#loadCSV(String)</see>
      <param>fileName File which is to be loaded.</param>
      <return>The matrix.</return>
      <throws>IOException</throws>
    </javadoc>
    <method type="SimpleMatrix" name="loadCSV" startLine="950" endLine="960">
      <declaration type="ReshapeMatrix64F" name="mat" />
      <scope startLine="954" endLine="956" />
      <scope startLine="956" endLine="959">
        <comment>if not convert it into one and wrap it</comment>
      </scope>
      <comment>see if its a DenseMatrix64F</comment>
    </method>
    <javadoc>
      <text>* Returns true of the specified matrix element is valid element inside this matrix.</text>
      <param>row Row index.</param>
      <param>col Column index.</param>
      <return>true if it is a valid element in the matrix.</return>
    </javadoc>
    <method type="boolean" name="isInBounds" startLine="969" endLine="971" />
    <javadoc>
      <text>* Prints the number of rows and column in this matrix.</text>
    </javadoc>
    <method type="void" name="printDimensions" startLine="976" endLine="978" />
  </class>
</source>
