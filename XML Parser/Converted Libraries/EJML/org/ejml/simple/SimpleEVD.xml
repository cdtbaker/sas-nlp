<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.simple">
  <import name="org.ejml.data.Complex64F" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.factory.DecompositionFactory" />
  <import name="org.ejml.factory.EigenDecomposition" />
  <class name="SimpleEVD" startLine="27">
    <javadoc>
      <text>* Wrapper around EigenDecomposition for SimpleMatrix</text>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="EigenDecomposition<DenseMatrix64F>" name="eig" />
    <declaration type="DenseMatrix64F" name="mat" />
    <method type="constructor" name="SimpleEVD" startLine="40" endLine="45" />
    <javadoc>
      <text>* Returns the number of eigenvalues/eigenvectors.  This is the matrix's dimension.</text>
      <return>number of eigenvalues/eigenvectors.</return>
    </javadoc>
    <method type="int" name="getNumberOfEigenvalues" startLine="52" endLine="54" />
    <javadoc>
      <text>* <p>
 * Returns an eigenvalue as a complex number.  For symmetric matrices the returned eigenvalue will always be a real
 * number, which means the imaginary component will be equal to zero.
 * </p>
 * <p>
 * NOTE: The order of the eigenvalues is dependent upon the decomposition algorithm used.  This means that they may
 * or may not be ordered by magnitude.  For example the QR algorithm will returns results that are partially
 * ordered by magnitude, but this behavior should not be relied upon.
 * </p></text>
      <param>index Index of the eigenvalue eigenvector pair.</param>
      <return>An eigenvalue.</return>
    </javadoc>
    <method type="Complex64F" name="getEigenvalue" startLine="71" endLine="73" />
    <javadoc>
      <text>* <p>
 * Used to retrieve real valued eigenvectors.  If an eigenvector is associated with a complex eigenvalue
 * then null is returned instead.
 * </p></text>
      <param>index Index of the eigenvalue eigenvector pair.</param>
      <return>If the associated eigenvalue is real then an eigenvector is returned, null otherwise.</return>
    </javadoc>
    <method type="T" name="getEigenVector" startLine="84" endLine="86" />
    <javadoc>
      <text>* <p>
 * Computes the quality of the computed decomposition.  A value close to or less than 1e-15
 * is considered to be within machine precision.
 * </p>
 * <p>
 * This function must be called before the original matrix has been modified or else it will
 * produce meaningless results.
 * </p></text>
      <return>Quality of the decomposition.</return>
    </javadoc>
    <method type="double" name="quality" startLine="101" endLine="103" />
    <javadoc>
      <text>* Returns the underlying decomposition that this is a wrapper around.</text>
      <return>EigenDecomposition</return>
    </javadoc>
    <method type="EigenDecomposition" name="getEVD" startLine="110" endLine="112" />
    <javadoc>
      <text>* Returns the index of the eigenvalue which has the largest magnitude.</text>
      <return>index of the largest magnitude eigen value.</return>
    </javadoc>
    <method type="int" name="getIndexMax" startLine="119" endLine="133">
      <declaration type="int" name="indexMax" />
      <declaration type="double" name="max" />
      <declaration type="int" name="N" />
      <scope startLine="124" endLine="130">
        <declaration type="double" name="m" />
        <scope startLine="126" endLine="129" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the index of the eigenvalue which has the smallest magnitude.</text>
      <return>index of the smallest magnitude eigen value.</return>
    </javadoc>
    <method type="int" name="getIndexMin" startLine="140" endLine="154">
      <declaration type="int" name="indexMin" />
      <declaration type="double" name="min" />
      <declaration type="int" name="N" />
      <scope startLine="145" endLine="151">
        <declaration type="double" name="m" />
        <scope startLine="147" endLine="150" />
      </scope>
    </method>
  </class>
</source>
