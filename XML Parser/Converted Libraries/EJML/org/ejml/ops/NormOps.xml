<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.ops">
  <import name="org.ejml.UtilEjml" />
  <import name="org.ejml.data.D1Matrix64F" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.data.RowD1Matrix64F" />
  <import name="org.ejml.factory.DecompositionFactory" />
  <import name="org.ejml.factory.SingularValueDecomposition" />
  <class name="NormOps" startLine="29">
    <javadoc>
      <text>* <p>
 * Norms are a measure of the size of a vector or a matrix.  One typical application is in error analysis.
 * </p>
 * <p>
 * Vector norms have the following properties:
 * <ol>
 * <li>||x|| > 0 if x &ne; 0 and ||0|| = 0</li>
 * <li>||&alpha;x|| = |&alpha;| ||x||</li>
 * <li>||x+y|| &le; ||x|| + ||y||</li>
 * </ol>
 * </p>
 * <p>
 * Matrix norms have the following properties:
 * <ol>
 * <li>||A|| > 0 if A &ne; 0 where A &isin; &real; <sup>m &times; n</sup></li>
 * <li> || &alpha; A || = |&alpha;| ||A|| where A &isin; &real; <sup>m &times; n</sup></li>
 * <li>||A+B|| &le; ||A|| + ||B|| where A and B are &isin; &real; <sup>m &times; n</sup></li>
 * <li>||AB|| &le; ||A|| ||B|| where A and B are &isin; &real; <sup>m &times; m</sup></li>
 * </ol>
 * Note that the last item in the list only applies to square matrices.
 * </p>
 * <p>
 * Matrix norms can be induced from vector norms as is shown below:<br>
 * <br>
 * ||A||<sub>M</sub> = max<sub>x&ne;0</sub>||Ax||<sub>v</sub>/||x||<sub>v</sub><br>
 * <br>
 * where ||.||<sub>M</sub> is the induced matrix norm for the vector norm ||.||<sub>v</sub>.
 * </p>
 * <p>
 * By default implementations that try to mitigate overflow/underflow are used.  If the word fast is
 * found before a function's name that means it does not mitigate those issues, but runs a bit faster.
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* Normalizes the matrix such that the Frobenius norm is equal to one.</text>
      <param>A The matrix that is to be normalized.</param>
    </javadoc>
    <method type="void" name="normalizeF" startLine="75" endLine="86">
      <declaration type="double" name="val" />
      <declaration type="int" name="size" />
      <scope startLine="83" endLine="85" />
    </method>
    <javadoc>
      <text>* <p>
 * The condition number of a matrix is used to measure the sensitivity of the linear
 * system <b>Ax=b</b>.  A value near one indicates that it is a well conditioned matrix.<br>
 * <br>
 * &kappa;<sub>p</sub> = ||A||<sub>p</sub>||A<sup>-1</sup>||<sub>p</sub>
 * </p>
 * <p>
 * If the matrix is not square then the condition of either A<sup>T</sup>A or AA<sup>T</sup> is computed. 
 * <p></text>
      <param>A The matrix.</param>
      <param>p p-norm</param>
      <return>The condition number.</return>
    </javadoc>
    <method type="double" name="conditionP" startLine="103" endLine="121">
      <scope startLine="104" endLine="106" />
      <scope startLine="106" endLine="115">
        <declaration type="DenseMatrix64F" name="A_inv" />
        <comment>square matrices are the typical case</comment>
      </scope>
      <scope startLine="115" endLine="120">
        <declaration type="DenseMatrix64F" name="pinv" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * The condition p = 2 number of a matrix is used to measure the sensitivity of the linear
 * system <b>Ax=b</b>.  A value near one indicates that it is a well conditioned matrix.<br>
 * <br>
 * &kappa;<sub>2</sub> = ||A||<sub>2</sub>||A<sup>-1</sup>||<sub>2</sub>
 * </p>
 * <p>
 * This is also known as the spectral condition number.
 * </p></text>
      <param>A The matrix.</param>
      <return>The condition number.</return>
    </javadoc>
    <method type="double" name="conditionP2" startLine="138" endLine="160">
      <declaration type="SingularValueDecomposition<DenseMatrix64F>" name="svd" />
      <declaration type="double[]" name="singularValues" />
      <declaration type="int" name="n" />
      <declaration type="double" name="smallest" />
      <declaration type="double" name="largest" />
      <scope startLine="152" endLine="157" />
    </method>
    <javadoc>
      <text>* <p>
 * This implementation of the Frobenius norm is a straight forward implementation and can
 * be susceptible for overflow/underflow issues.  A more resilient implementation is{@link #normF}.
 * </p></text>
      <param>a The matrix whose norm is computed.  Not modified.</param>
    </javadoc>
    <method type="double" name="fastNormF" startLine="171" endLine="182">
      <declaration type="double" name="total" />
      <declaration type="int" name="size" />
      <scope startLine="176" endLine="179">
        <declaration type="double" name="val" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Computes the Frobenius matrix norm:<br>
 * <br>
 * normF = Sqrt{  &sum;<sub>i=1:m</sub> &sum;<sub>j=1:n</sub> { a<sub>ij</sub><sup>2</sup>}   }
 * </p>
 * <p>
 * This is equivalent to the element wise p=2 norm.  See {@link #fastNormF} for another implementation
 * that is faster, but more prone to underflow/overflow errors.
 * </p></text>
      <param>a The matrix whose norm is computed.  Not modified.</param>
      <return>The norm's value.</return>
    </javadoc>
    <method type="double" name="normF" startLine="198" endLine="214">
      <declaration type="double" name="total" />
      <declaration type="double" name="scale" />
      <declaration type="int" name="size" />
      <scope startLine="208" endLine="211">
        <declaration type="double" name="val" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Element wise p-norm:<br>
 * <br>
 * norm = {&sum;<sub>i=1:m</sub> &sum;<sub>j=1:n</sub> { |a<sub>ij</sub>|<sup>p</sup>}}<sup>1/p</sup>
 * </p>
 * <p>
 * This is not the same as the induced p-norm used on matrices, but is the same as the vector p-norm.
 * </p></text>
      <param>A Matrix. Not modified.</param>
      <param>p p value.</param>
      <return>The norm's value.</return>
    </javadoc>
    <method type="double" name="elementP" startLine="231" endLine="254">
      <scope startLine="232" endLine="234" />
      <scope startLine="234" endLine="236" />
      <scope startLine="236" endLine="253">
        <declaration type="double" name="max" />
        <declaration type="double" name="total" />
        <declaration type="int" name="size" />
        <scope startLine="246" endLine="250">
          <declaration type="double" name="a" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Same as {@link #elementP} but runs faster by not mitigating overflow/underflow related problems.</text>
      <param>A Matrix. Not modified.</param>
      <param>p p value.</param>
      <return>The norm's value.</return>
    </javadoc>
    <method type="double" name="fastElementP" startLine="263" endLine="279">
      <scope startLine="264" endLine="266" />
      <scope startLine="266" endLine="278">
        <declaration type="double" name="total" />
        <declaration type="int" name="size" />
        <scope startLine="271" endLine="275">
          <declaration type="double" name="a" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Computes either the vector p-norm or the induced matrix p-norm depending on A
 * being a vector or a matrix respectively.</text>
      <param>A Vector or matrix whose norm is to be computed.</param>
      <param>p The p value of the p-norm.</param>
      <return>The computed norm.</return>
    </javadoc>
    <method type="double" name="normP" startLine="289" endLine="302">
      <scope startLine="290" endLine="292" />
      <scope startLine="292" endLine="294" />
      <scope startLine="294" endLine="296" />
      <scope startLine="297" endLine="299" />
      <scope startLine="299" endLine="301" />
    </method>
    <javadoc>
      <text>* An unsafe but faster version of {@link #normP} that calls routines which are faster
 * but more prone to overflow/underflow problems.</text>
      <param>A Vector or matrix whose norm is to be computed.</param>
      <param>p The p value of the p-norm.</param>
      <return>The computed norm.</return>
    </javadoc>
    <method type="double" name="fastNormP" startLine="312" endLine="325">
      <scope startLine="313" endLine="315" />
      <scope startLine="315" endLine="317" />
      <scope startLine="317" endLine="319" />
      <scope startLine="320" endLine="322" />
      <scope startLine="322" endLine="324" />
    </method>
    <javadoc>
      <text>* Computes the p=1 norm.  If A is a matrix then the induced norm is computed.</text>
      <param>A Matrix or vector.</param>
      <return>The norm.</return>
    </javadoc>
    <method type="double" name="normP1" startLine="333" endLine="339">
      <scope startLine="334" endLine="336" />
      <scope startLine="336" endLine="338" />
    </method>
    <javadoc>
      <text>* Computes the p=2 norm.  If A is a matrix then the induced norm is computed.</text>
      <param>A Matrix or vector.</param>
      <return>The norm.</return>
    </javadoc>
    <method type="double" name="normP2" startLine="347" endLine="353">
      <scope startLine="348" endLine="350" />
      <scope startLine="350" endLine="352" />
    </method>
    <javadoc>
      <text>* Computes the p=2 norm.  If A is a matrix then the induced norm is computed. This
 * implementation is faster, but more prone to buffer overflow or underflow problems.</text>
      <param>A Matrix or vector.</param>
      <return>The norm.</return>
    </javadoc>
    <method type="double" name="fastNormP2" startLine="362" endLine="368">
      <scope startLine="363" endLine="365" />
      <scope startLine="365" endLine="367" />
    </method>
    <javadoc>
      <text>* Computes the p=&#8734; norm.  If A is a matrix then the induced norm is computed.</text>
      <param>A Matrix or vector.</param>
      <return>The norm.</return>
    </javadoc>
    <method type="double" name="normPInf" startLine="376" endLine="382">
      <scope startLine="377" endLine="379" />
      <scope startLine="379" endLine="381" />
    </method>
    <javadoc>
      <text>* <p>
 * Computes the induced p = 1 matrix norm.<br>
 * <br>
 * ||A||<sub>1</sub>= max(j=1 to n; sum(i=1 to m; |a<sub>ij</sub>|))
 * </p></text>
      <param>A Matrix. Not modified.</param>
      <return>The norm.</return>
    </javadoc>
    <method type="double" name="inducedP1" startLine="394" endLine="411">
      <declaration type="double" name="max" />
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <scope startLine="400" endLine="408">
        <declaration type="double" name="total" />
        <scope startLine="402" endLine="404" />
        <scope startLine="405" endLine="407" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Computes the induced p = 2 matrix norm, which is the largest singular value.
 * </p></text>
      <param>A Matrix. Not modified.</param>
      <return>The norm.</return>
    </javadoc>
    <method type="double" name="inducedP2" startLine="421" endLine="431">
      <declaration type="SingularValueDecomposition<DenseMatrix64F>" name="svd" />
      <declaration type="double[]" name="singularValues" />
      <comment>the largest singular value is the induced p2 norm</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Induced matrix p = infinity norm.<br>
 * <br>
 * ||A||<sub>&#8734;</sub> = max(i=1 to m; sum(j=1 to n; |a<sub>ij</sub>|))
 * </p></text>
      <param>A A matrix.</param>
      <return>the norm.</return>
    </javadoc>
    <method type="double" name="inducedPInf" startLine="443" endLine="460">
      <declaration type="double" name="max" />
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <scope startLine="449" endLine="457">
        <declaration type="double" name="total" />
        <scope startLine="451" endLine="453" />
        <scope startLine="454" endLine="456" />
      </scope>
    </method>
  </class>
</source>
