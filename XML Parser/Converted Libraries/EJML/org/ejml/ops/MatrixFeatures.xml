<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.ops">
  <import name="org.ejml.UtilEjml" />
  <import name="org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionInner" />
  <import name="org.ejml.alg.dense.mult.VectorVectorMult" />
  <import name="org.ejml.data.Complex64F" />
  <import name="org.ejml.data.D1Matrix64F" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.data.ReshapeMatrix64F" />
  <import name="org.ejml.factory.DecompositionFactory" />
  <import name="org.ejml.factory.EigenDecomposition" />
  <import name="org.ejml.factory.LUDecomposition" />
  <import name="org.ejml.factory.SingularValueDecomposition" />
  <class name="MatrixFeatures" startLine="34">
    <javadoc>
      <text>* <p>
 * Used to compute features that describe the structure of a matrix.
 * <p>
 * <p>
 * Unless explicitly stated otherwise it is assumed that the elements of input matrices
 * contain only real numbers.  If an element is NaN or infinite then the behavior is undefined.
 * See IEEE 754 for more information on this issue.
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* Checks to see if any element in the matrix is NaN.</text>
      <param>m A matrix. Not modified.</param>
      <return>True if any element in the matrix is NaN.</return>
    </javadoc>
    <method type="boolean" name="hasNaN" startLine="56" endLine="64">
      <declaration type="int" name="length" />
      <scope startLine="59" endLine="62" />
    </method>
    <javadoc>
      <text>* Checks to see if any element in the matrix is NaN of Infinite.</text>
      <param>m A matrix. Not modified.</param>
      <return>True if any element in the matrix is NaN of Infinite.</return>
    </javadoc>
    <method type="boolean" name="hasUncountable" startLine="73" endLine="82">
      <declaration type="int" name="length" />
      <scope startLine="76" endLine="80">
        <declaration type="double" name="a" />
      </scope>
    </method>
    <javadoc>
      <text>* Checks to see if the matrix is a vector or not.</text>
      <param>mat A matrix. Not modified.</param>
      <return>True if it is a vector and false if it is not.</return>
    </javadoc>
    <method type="boolean" name="isVector" startLine="91" endLine="93" />
    <javadoc>
      <text>* <p>
 * Checks to see if the matrix is positive definite.
 * </p>
 * <p>
 * x<sup>T</sup> A x > 0<br>
 * for all x where x is a non-zero vector and A is a symmetric matrix.
 * </p></text>
      <param>A square symmetric matrix. Not modified.</param>
      <return>True if it is positive definite and false if it is not.</return>
    </javadoc>
    <method type="boolean" name="isPositiveDefinite" startLine="108" endLine="117">
      <declaration type="CholeskyDecompositionInner" name="chol" />
    </method>
    <javadoc>
      <text>* <p>
 * Checks to see if the matrix is positive semidefinite:
 * </p>
 * <p>
 * x<sup>T</sup> A x >= 0<br>
 * for all x where x is a non-zero vector and A is a symmetric matrix.
 * </p></text>
      <param>A square symmetric matrix. Not modified.</param>
      <return>True if it is positive semidefinite and false if it is not.</return>
    </javadoc>
    <method type="boolean" name="isPositiveSemidefinite" startLine="132" endLine="149">
      <declaration type="EigenDecomposition<DenseMatrix64F>" name="eig" />
      <scope startLine="141" endLine="146">
        <declaration type="Complex64F" name="v" />
      </scope>
    </method>
    <javadoc>
      <text>* Checks to see if it is a square matrix.  A square matrix has
 * the same number of rows and columns.</text>
      <param>mat A matrix. Not modified.</param>
      <return>True if it is a square matrix and false if it is not.</return>
    </javadoc>
    <method type="boolean" name="isSquare" startLine="158" endLine="160" />
    <javadoc>
      <text>* <p>
 * Returns true if the matrix is symmetric within the tolerance.  Only square matrices can be
 * symmetric.
 * </p>
 * <p>
 * A matrix is symmetric if:<br>
 * |a<sub>ij</sub> - a<sub>ji</sub>| &le; tol
 * </p></text>
      <param>m A matrix. Not modified.</param>
      <param>tol Tolerance for how similar two elements need to be.</param>
      <return>true if it is symmetric and false if it is not.</return>
    </javadoc>
    <method type="boolean" name="isSymmetric" startLine="176" endLine="195">
      <declaration type="double" name="max" />
      <scope startLine="182" endLine="193">
        <scope startLine="183" endLine="192">
          <declaration type="double" name="a" />
          <declaration type="double" name="b" />
          <declaration type="double" name="diff" />
          <scope startLine="189" endLine="191" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Returns true if the matrix is perfectly symmetric.  Only square matrices can be symmetric.
 * </p>
 * <p>
 * A matrix is symmetric if:<br>
 * a<sub>ij</sub> == a<sub>ji</sub>
 * </p></text>
      <param>m A matrix. Not modified.</param>
      <return>true if it is symmetric and false if it is not.</return>
    </javadoc>
    <method type="boolean" name="isSymmetric" startLine="209" endLine="211" />
    <javadoc>
      <text>* <p>
 * Checks to see if a matrix is skew symmetric with in tolerance:<br>
 * <br>
 * -A = A<sup>T</sup><br>
 * or<br>
 * |a<sub>ij</sub> + a<sub>ji</sub>| &le; tol
 * </p></text>
      <param>A The matrix being tested.</param>
      <param>tol Tolerance for being skew symmetric.</param>
      <return>True if it is skew symmetric and false if it is not.</return>
    </javadoc>
    <method type="boolean" name="isSkewSymmetric" startLine="226" endLine="243">
      <scope startLine="230" endLine="241">
        <scope startLine="231" endLine="240">
          <declaration type="double" name="a" />
          <declaration type="double" name="b" />
          <declaration type="double" name="diff" />
          <scope startLine="237" endLine="239" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Checks to see if the two matrices are inverses of each other.</text>
      <param>a A matrix. Not modified.</param>
      <param>b A matrix. Not modified.</param>
    </javadoc>
    <method type="boolean" name="isInverse" startLine="251" endLine="275">
      <scope startLine="252" endLine="254" />
      <declaration type="int" name="numRows" />
      <declaration type="int" name="numCols" />
      <scope startLine="259" endLine="272">
        <scope startLine="260" endLine="271">
          <declaration type="double" name="total" />
          <scope startLine="262" endLine="264" />
          <scope startLine="266" endLine="269" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Checks to see if each element in the two matrices are within tolerance of
 * each other: tol &ge; |a<sub>ij</sub> - b<sub>ij</sub>|.
 * <p>
 * <p>
 * NOTE: If any of the elements are not countable then false is returned.<br>
 * NOTE: If a tolerance of zero is passed in this is equivalent to calling{@link #isEquals(org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)}</p></text>
      <param>a A matrix. Not modified.</param>
      <param>b A matrix. Not modified.</param>
      <param>tol How close to being identical each element needs to be.</param>
      <return>true if equals and false otherwise.</return>
    </javadoc>
    <method type="boolean" name="isEquals" startLine="295" endLine="311">
      <scope startLine="296" endLine="298" />
      <declaration type="int" name="length" />
      <scope startLine="305" endLine="309">
        <scope startLine="306" endLine="308" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Checks to see if each element in the upper or lower triangular portion of the two matrices are within tolerance of
 * each other: tol &ge; |a<sub>ij</sub> - b<sub>ij</sub>|.
 * <p>
 * <p>
 * NOTE: If any of the elements are not countable then false is returned.<br>
 * NOTE: If a tolerance of zero is passed in this is equivalent to calling{@link #isEquals(org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)}</p></text>
      <param>a A matrix. Not modified.</param>
      <param>b A matrix. Not modified.</param>
      <param>upper true of upper triangular and false for lower.</param>
      <param>tol How close to being identical each element needs to be.</param>
      <return>true if equals and false otherwise.</return>
    </javadoc>
    <method type="boolean" name="isEqualsTriangle" startLine="332" endLine="356">
      <scope startLine="333" endLine="335" />
      <scope startLine="337" endLine="344">
        <scope startLine="338" endLine="343">
          <scope startLine="339" endLine="342" />
        </scope>
      </scope>
      <scope startLine="344" endLine="353">
        <scope startLine="345" endLine="352">
          <declaration type="int" name="end" />
          <scope startLine="348" endLine="351" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Checks to see if each element in the two matrices are equal:
 * a<sub>ij</sub> == b<sub>ij</sub>
 * <p>
 * <p>
 * NOTE: If any of the elements are NaN then false is returned.  If two corresponding
 * elements are both positive or negative infinity then they are equal.
 * </p></text>
      <param>a A matrix. Not modified.</param>
      <param>b A matrix. Not modified.</param>
      <return>true if identical and false otherwise.</return>
    </javadoc>
    <method type="boolean" name="isEquals" startLine="373" endLine="386">
      <scope startLine="374" endLine="376" />
      <declaration type="int" name="length" />
      <scope startLine="379" endLine="383">
        <scope startLine="380" endLine="382" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Checks to see if each corresponding element in the two matrices are
 * within tolerance of each other or have the some symbolic meaning.  This
 * can handle NaN and Infinite numbers.
 * <p>
 * <p>
 * If both elements are countable then the following equality test is used:<br>
 * |a<sub>ij</sub> - b<sub>ij</sub>| &le; tol.<br>
 * Otherwise both numbers must both be Double.NaN, Double.POSITIVE_INFINITY, or
 * Double.NEGATIVE_INFINITY to be identical.
 * </p></text>
      <param>a A matrix. Not modified.</param>
      <param>b A matrix. Not modified.</param>
      <param>tol Tolerance for equality.</param>
      <return>true if identical and false otherwise.</return>
    </javadoc>
    <method type="boolean" name="isIdentical" startLine="407" endLine="438">
      <scope startLine="408" endLine="410" />
      <declaration type="int" name="length" />
      <scope startLine="415" endLine="435">
        <declaration type="double" name="valA" />
        <declaration type="double" name="valB" />
        <declaration type="double" name="diff" />
        <scope startLine="428" endLine="430" />
        <scope startLine="430" endLine="432" />
        <scope startLine="432" endLine="434" />
        <comment>if either is negative or positive infinity the result will be positive infinity</comment>
        <comment>if either is NaN the result will be NaN</comment>
        <comment>diff = NaN == false</comment>
        <comment>diff = infinity == false</comment>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Checks to see if a matrix is orthogonal or isometric.
 * </p></text>
      <param>Q The matrix being tested. Not modified.</param>
      <param>tol Tolerance.</param>
      <return>True if it passes the test.</return>
    </javadoc>
    <method type="boolean" name="isOrthogonal" startLine="450" endLine="469">
      <scope startLine="451" endLine="453" />
      <declaration type="DenseMatrix64F[]" name="u" />
      <scope startLine="457" endLine="466">
        <declaration type="DenseMatrix64F" name="a" />
        <scope startLine="460" endLine="465">
          <declaration type="double" name="val" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Checks to see if the rows of the provided matrix are linearly independent.</text>
      <param>A Matrix whose rows are being tested for linear independence.</param>
      <return>true if linearly independent and false otherwise.</return>
    </javadoc>
    <method type="boolean" name="isRowsLinearIndependent" startLine="478" endLine="489">
      <declaration type="LUDecomposition<DenseMatrix64F>" name="lu" />
      <comment>LU decomposition</comment>
      <comment>if they are linearly independent it should not be singular</comment>
    </method>
    <javadoc>
      <text>* Checks to see if the provided matrix is within tolerance to an identity matrix.</text>
      <param>mat Matrix being examined.  Not modified.</param>
      <param>tol Tolerance.</param>
      <return>True if it is within tolerance to an identify matrix.</return>
    </javadoc>
    <method type="boolean" name="isIdentity" startLine="499" endLine="515">
      <declaration type="int" name="index" />
      <scope startLine="502" endLine="512">
        <scope startLine="503" endLine="511">
          <scope startLine="504" endLine="507" />
          <scope startLine="507" endLine="510" />
        </scope>
      </scope>
      <comment>see if the result is an identity matrix</comment>
    </method>
    <javadoc>
      <text>* Checks to see if every value in the matrix is the specified value.</text>
      <param>mat The matrix being tested.  Not modified.</param>
      <param>val Checks to see if every element in the matrix has this value.</param>
      <param>tol True if all the elements are within this tolerance.</param>
      <return>true if the test passes.</return>
    </javadoc>
    <method type="boolean" name="isConstantVal" startLine="526" endLine="538">
      <declaration type="int" name="index" />
      <scope startLine="529" endLine="535">
        <scope startLine="530" endLine="534" />
      </scope>
      <comment>see if the result is an identity matrix</comment>
    </method>
    <javadoc>
      <text>* Checks to see if all the diagonal elements in the matrix are positive.</text>
      <param>a A matrix. Not modified.</param>
      <return>true if all the  diagonal elements are positive, false otherwise.</return>
    </javadoc>
    <method type="boolean" name="isDiagonalPositive" startLine="546" endLine="552">
      <scope startLine="547" endLine="550" />
    </method>
    <method type="boolean" name="isFullRank" startLine="555" endLine="557" />
    <javadoc>
      <text>* <p>
 * Checks to see if the two matrices are the negative of each other:<br>
 * <br>
 * a<sub>ij</sub> = -b<sub>ij</sub>
 * </p></text>
      <param>a First matrix.  Not modified.</param>
      <param>b Second matrix.  Not modified.</param>
      <param>tol Numerical tolerance.</param>
      <return>True if they are the negative of each other within tolerance.</return>
    </javadoc>
    <method type="boolean" name="isNegative" startLine="571" endLine="583">
      <declaration type="int" name="length" />
      <scope startLine="577" endLine="580" />
    </method>
    <javadoc>
      <text>* <p>
 * Checks to see if a matrix is upper triangular or Hessenberg. A Hessenberg matrix of degree N
 * has the following property:<br>
 * <br>
 * a<sub>ij</sub> &le; 0 for all i < j+N<br>
 * <br>
 * A triangular matrix is a Hessenberg matrix of degree 0.
 * </p></text>
      <param>A Matrix being tested.  Not modified.</param>
      <param>hessenberg The degree of being hessenberg.</param>
      <param>tol How close to zero the lower left elements need to be.</param>
      <return>If it is an upper triangular/hessenberg matrix or not.</return>
    </javadoc>
    <method type="boolean" name="isUpperTriangle" startLine="599" endLine="611">
      <scope startLine="603" endLine="609">
        <scope startLine="604" endLine="608">
          <scope startLine="605" endLine="607" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Computes the rank of a matrix using a default tolerance.</text>
      <param>A Matrix whose rank is to be calculated.  Not modified.</param>
      <return>The matrix's rank.</return>
    </javadoc>
    <method type="int" name="rank" startLine="619" endLine="621" />
    <javadoc>
      <text>* Computes the rank of a matrix using the specified tolerance.</text>
      <param>A Matrix whose rank is to be calculated.  Not modified.</param>
      <param>threshold The numerical threshold used to determine a singular value.</param>
      <return>The matrix's rank.</return>
    </javadoc>
    <method type="int" name="rank" startLine="630" endLine="640">
      <declaration type="SingularValueDecomposition<DenseMatrix64F>" name="svd" />
    </method>
    <javadoc>
      <text>* Computes the nullity of a matrix using the default tolerance.</text>
      <param>A Matrix whose rank is to be calculated.  Not modified.</param>
      <return>The matrix's nullity.</return>
    </javadoc>
    <method type="int" name="nullity" startLine="648" endLine="650" />
    <javadoc>
      <text>* Computes the nullity of a matrix using the specified tolerance.</text>
      <param>A Matrix whose rank is to be calculated.  Not modified.</param>
      <param>threshold The numerical threshold used to determine a singular value.</param>
      <return>The matrix's nullity.</return>
    </javadoc>
    <method type="int" name="nullity" startLine="659" endLine="669">
      <declaration type="SingularValueDecomposition<DenseMatrix64F>" name="svd" />
    </method>
    <comment>TODO write this</comment>
  </class>
</source>
