<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.ops">
  <import name="org.ejml.alg.dense.mult.SubmatrixOps" />
  <import name="org.ejml.alg.dense.mult.VectorVectorMult" />
  <import name="org.ejml.data.D1Matrix64F" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="java.util.Random" />
  <class name="RandomMatrices" startLine="29">
    <javadoc>
      <text>* Contains a list of functions for creating random matrices and vectors with different structures.</text>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* <p>
 * Creates a randomly generated set of orthonormal vectors.  At most it can generate the same
 * number of vectors as the dimension of the vectors.
 * </p>
 * <p>
 * This is done by creating random vectors then ensuring that they are orthogonal
 * to all the ones previously created with reflectors.
 * </p>
 * <p>
 * NOTE: This employs a brute force O(N<sup>3</sup>) algorithm.
 * </p></text>
      <param>dimen dimension of the space which the vectors will span.</param>
      <param>numVectors How many vectors it should generate.</param>
      <param>rand Used to create random vectors.</param>
      <return>Array of N random orthogonal vectors of unit length.</return>
    </javadoc>
    <method type="DenseMatrix64F[]" name="createSpan" startLine="57" endLine="100">
      <declaration type="DenseMatrix64F[]" name="u" />
      <scope startLine="66" endLine="97">
        <declaration type="DenseMatrix64F" name="a" />
        <declaration type="DenseMatrix64F" name="r" />
        <scope startLine="71" endLine="94">
          <declaration type="DenseMatrix64F" name="t" />
          <declaration type="double" name="val" />
        </scope>
        <comment>System.out.println(" i = "+i);</comment>
        <comment>System.out.println("j = "+j);</comment>
        <comment>find a vector that is normal to vector j</comment>
        <comment>u[i] = (1/2)*(r + Q[j]*r)</comment>
        <comment>UtilEjml.print(a);</comment>
        <comment>normalize it so it doesn't get too small</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Creates a random vector that is inside the specified span.</text>
      <param>span The span the random vector belongs in.</param>
      <param>rand RNG</param>
      <return>A random vector within the specified span.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="createInSpan" startLine="109" endLine="124">
      <declaration type="DenseMatrix64F" name="A" />
      <declaration type="DenseMatrix64F" name="B" />
      <scope startLine="114" endLine="121">
        <declaration type="double" name="val" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Creates a random orthogonal or isometric matrix, depending on the number of rows and columns.
 * The number of rows must be more than or equal to the number of columns.
 * </p></text>
      <param>numRows Number of rows in the generated matrix.</param>
      <param>numCols Number of columns in the generated matrix.</param>
      <param>rand Random number generator used to create matrices.</param>
      <return>A new isometric matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="createOrthogonal" startLine="137" endLine="150">
      <scope startLine="138" endLine="140" />
      <declaration type="DenseMatrix64F[]" name="u" />
      <declaration type="DenseMatrix64F" name="ret" />
      <scope startLine="145" endLine="147" />
    </method>
    <javadoc>
      <text>* Creates a random diagonal matrix where the diagonal elements are selected from a uniform
 * distribution that goes from min to max.</text>
      <param>N Dimension of the matrix.</param>
      <param>min Minimum value of a diagonal element.</param>
      <param>max Maximum value of a diagonal element.</param>
      <param>rand Random number generator.</param>
      <return>A random diagonal matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="createDiagonal" startLine="162" endLine="164" />
    <javadoc>
      <text>* Creates a random matrix where all elements are zero but diagonal elements.  Diagonal elements
 * randomly drawn from a uniform distribution from min to max, inclusive.</text>
      <param>numRows Number of rows in the returned matrix..</param>
      <param>numCols Number of columns in the returned matrix.</param>
      <param>min Minimum value of a diagonal element.</param>
      <param>max Maximum value of a diagonal element.</param>
      <param>rand Random number generator.</param>
      <return>A random diagonal matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="createDiagonal" startLine="177" endLine="192">
      <declaration type="DenseMatrix64F" name="ret" />
      <declaration type="int" name="N" />
      <declaration type="double" name="r" />
      <scope startLine="187" endLine="189" />
    </method>
    <javadoc>
      <text>* <p>
 * Creates a random matrix which will have the provided singular values.  The length of sv
 * is assumed to be the rank of the matrix.  This can be useful for testing purposes when one
 * needs to ensure that a matrix is not singular but randomly generated.
 * </p></text>
      <param>numRows Number of rows in generated matrix.</param>
      <param>numCols NUmber of columns in generated matrix.</param>
      <param>rand Random number generator.</param>
      <param>sv Singular values of the matrix.</param>
      <return>A new matrix with the specified singular values.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="createSingularValues" startLine="208" endLine="226">
      <declaration type="DenseMatrix64F" name="U" />
      <declaration type="DenseMatrix64F" name="V" />
      <declaration type="DenseMatrix64F" name="S" />
      <declaration type="int" name="min" />
      <scope startLine="217" endLine="219" />
      <declaration type="DenseMatrix64F" name="tmp" />
    </method>
    <javadoc>
      <text>* Creates a new random symmetric matrix that will have the specified real eigenvalues.</text>
      <param>num Dimension of the resulting matrix.</param>
      <param>rand Random number generator.</param>
      <param>eigenvalues Set of real eigenvalues that the matrix will have.</param>
      <return>A random matrix with the specified eigenvalues.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="createEigenvaluesSymm" startLine="236" endLine="246">
      <declaration type="DenseMatrix64F" name="V" />
      <declaration type="DenseMatrix64F" name="D" />
      <declaration type="DenseMatrix64F" name="temp" />
    </method>
    <javadoc>
      <text>* Returns a matrix where all the elements are selected independently from
 * a uniform distribution between 0 and 1 inclusive.</text>
      <param>numRow Number of rows in the new matrix.</param>
      <param>numCol Number of columns in the new matrix.</param>
      <param>rand Random number generator used to fill the matrix.</param>
      <return>The randomly generated matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="createRandom" startLine="257" endLine="263">
      <declaration type="DenseMatrix64F" name="mat" />
    </method>
    <javadoc>
      <text>* <p>
 * Adds random values to each element in the matrix from an uniform distribution.<br>
 * <br>
 * a<sub>ij</sub> = a<sub>ij</sub> + U(min,max)<br>
 * </p></text>
      <param>A The matrix who is to be randomized. Modified</param>
      <param>min The minimum value each element can be.</param>
      <param>max The maximum value each element can be..</param>
      <param>rand Random number generator used to fill the matrix.</param>
    </javadoc>
    <method type="void" name="addRandom" startLine="277" endLine="286">
      <declaration type="double[]" name="d" />
      <declaration type="int" name="size" />
      <declaration type="double" name="r" />
      <scope startLine="283" endLine="285" />
    </method>
    <javadoc>
      <text>* <p>
 * Returns a matrix where all the elements are selected independently from
 * a uniform distribution between 'min' and 'max' inclusive.
 * </p></text>
      <param>numRow Number of rows in the new matrix.</param>
      <param>numCol Number of columns in the new matrix.</param>
      <param>min The minimum value each element can be.</param>
      <param>max The maximum value each element can be.</param>
      <param>rand Random number generator used to fill the matrix.</param>
      <return>The randomly generated matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="createRandom" startLine="301" endLine="307">
      <declaration type="DenseMatrix64F" name="mat" />
    </method>
    <javadoc>
      <text>* <p>
 * Sets each element in the matrix to a value drawn from an uniform distribution from 0 to 1 inclusive.
 * </p></text>
      <param>mat The matrix who is to be randomized. Modified.</param>
      <param>rand Random number generator used to fill the matrix.</param>
    </javadoc>
    <method type="void" name="setRandom" startLine="318" endLine="320" />
    <javadoc>
      <text>* <p>
 * Sets each element in the matrix to a value drawn from an uniform distribution from 'min' to 'max' inclusive.
 * </p></text>
      <param>min The minimum value each element can be.</param>
      <param>max The maximum value each element can be.</param>
      <param>mat The matrix who is to be randomized. Modified.</param>
      <param>rand Random number generator used to fill the matrix.</param>
    </javadoc>
    <method type="void" name="setRandom" startLine="333" endLine="342">
      <declaration type="double[]" name="d" />
      <declaration type="int" name="size" />
      <declaration type="double" name="r" />
      <scope startLine="339" endLine="341" />
    </method>
    <javadoc>
      <text>* Creates a random symmetric positive definite matrix.</text>
      <param>width The width of the square matrix it returns.</param>
      <param>rand Random number generator used to make the matrix.</param>
      <return>The random symmetric  positive definite matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="createSymmPosDef" startLine="351" endLine="367">
      <declaration type="DenseMatrix64F" name="a" />
      <declaration type="DenseMatrix64F" name="b" />
      <scope startLine="356" endLine="358" />
      <scope startLine="362" endLine="364" />
      <comment>This is not formally proven to work.  It just seems to work.</comment>
    </method>
    <javadoc>
      <text>* Creates a random symmetric matrix whose values are selected from an uniform distribution
 * from min to max, inclusive.</text>
      <param>length Width and height of the matrix.</param>
      <param>min Minimum value an element can have.</param>
      <param>max Maximum value an element can have.</param>
      <param>rand Random number generator.</param>
      <return>A symmetric matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="createSymmetric" startLine="379" endLine="385">
      <declaration type="DenseMatrix64F" name="A" />
    </method>
    <javadoc>
      <text>* Sets the provided square matrix to be a random symmetric matrix whose values are selected from an uniform distribution
 * from min to max, inclusive.</text>
      <param>A The matrix that is to be modified.  Must be square.  Modified.</param>
      <param>min Minimum value an element can have.</param>
      <param>max Maximum value an element can have.</param>
      <param>rand Random number generator.</param>
    </javadoc>
    <method type="void" name="createSymmetric" startLine="396" endLine="411">
      <declaration type="double" name="range" />
      <declaration type="int" name="length" />
      <scope startLine="404" endLine="410">
        <scope startLine="405" endLine="409">
          <declaration type="double" name="val" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Creates an upper triangular matrix whose values are selected from a uniform distribution.  If hessenberg
 * is greater than zero then a hessenberg matrix of the specified degree is created instead.</text>
      <param>dimen Number of rows and columns in the matrix..</param>
      <param>hessenberg 0 for triangular matrix and > 0 for hessenberg matrix.</param>
      <param>min minimum value an element can be.</param>
      <param>max maximum value an element can be.</param>
      <param>rand random number generator used.</param>
      <return>The randomly generated matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="createUpperTriangle" startLine="425" endLine="443">
      <declaration type="double" name="range" />
      <declaration type="DenseMatrix64F" name="A" />
      <scope startLine="433" endLine="440">
        <declaration type="int" name="start" />
        <scope startLine="436" endLine="438" />
      </scope>
    </method>
    <comment>is there a faster algorithm out there? This one is a bit sluggish</comment>
  </class>
</source>
