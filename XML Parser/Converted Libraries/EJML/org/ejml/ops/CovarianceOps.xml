<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.ops">
  <import name="org.ejml.alg.dense.linsol.LinearSolverSafe" />
  <import name="org.ejml.alg.dense.misc.UnrolledInverseFromMinor" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.factory.LinearSolver" />
  <import name="org.ejml.factory.LinearSolverFactory" />
  <import name="java.util.Random" />
  <class name="CovarianceOps" startLine="30">
    <javadoc>
      <text>* Contains operations specific to covariance matrices.</text>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="double" name="TOL" />
    <javadoc>
      <text>* This is a fairly light weight check to see of a covariance matrix is valid.
 * It checks to see if the diagonal elements are all positive, which they should be
 * if it is valid.  Not all invalid covariance matrices will be caught by this method.</text>
      <return>true if valid and false if invalid</return>
    </javadoc>
    <method type="boolean" name="isValidFast" startLine="46" endLine="48" />
    <javadoc>
      <text>* Performs a variety of tests to see if the provided matrix is a valid
 * covariance matrix.</text>
      <return>0 = is valid 1 = failed positive diagonal, 2 = failed on symmetry, 2 = failed on positive definite</return>
    </javadoc>
    <method type="int" name="isValid" startLine="56" endLine="67" />
    <javadoc>
      <text>* Performs a matrix inversion operations that takes advantage of the special
 * properties of a covariance matrix.</text>
      <param>cov On input it is a covariance matrix, on output it is the inverse.  Modified.</param>
      <return>true if it could invert the matrix false if it could not.</return>
    </javadoc>
    <method type="boolean" name="invert" startLine="76" endLine="78" />
    <javadoc>
      <text>* Performs a matrix inversion operations that takes advantage of the special
 * properties of a covariance matrix.</text>
      <param>cov A covariance matrix. Not modified.</param>
      <param>cov_inv The inverse of cov.  Modified.</param>
      <return>true if it could invert the matrix false if it could not.</return>
    </javadoc>
    <method type="boolean" name="invert" startLine="88" endLine="108">
      <scope startLine="89" endLine="99">
        <scope startLine="90" endLine="92" />
      </scope>
      <scope startLine="99" endLine="106">
        <declaration type="LinearSolver<DenseMatrix64F>" name="solver" />
        <comment>wrap it to make sure the covariance is not modified.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Sets vector to a random value based upon a zero-mean multivariate Gaussian distribution with
 * covariance 'cov'.  If repeat calls are made to this class, consider using {@link CovarianceRandomDraw} instead.</text>
      <param>cov The distirbutions covariance.  Not modified.</param>
      <param>vector The random vector. Modified.</param>
      <param>rand Random number generator.</param>
    </javadoc>
    <method type="void" name="randomVector" startLine="121" endLine="124">
      <declaration type="CovarianceRandomDraw" name="rng" />
    </method>
  </class>
</source>
