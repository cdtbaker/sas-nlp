<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.ops">
  <import name="org.ejml.data.D1Matrix64F" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.data.RowD1Matrix64F" />
  <class name="SpecializedOps" startLine="26">
    <javadoc>
      <text>* This contains less common or more specialized matrix operations.</text>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* <p>
 * Creates a reflector from the provided vector.<br>
 * <br>
 * Q = I - &gamma; u u<sup>T</sup><br>
 * &gamma; = 2/||u||<sup>2</sup>
 * </p>
 * <p>
 * In practice {@link org.ejml.alg.dense.mult.VectorVectorMult#householder(double,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)}  multHouseholder}
 * should be used for performance reasons since there is no need to calculate Q explicitly.
 * </p></text>
      <param>u A vector. Not modified.</param>
      <return>An orthogonal reflector.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="createReflector" startLine="49" endLine="60">
      <declaration type="double" name="norm" />
      <declaration type="double" name="gamma" />
      <declaration type="DenseMatrix64F" name="Q" />
    </method>
    <javadoc>
      <text>* <p>
 * Creates a reflector from the provided vector and gamma.<br>
 * <br>
 * Q = I - &gamma; u u<sup>T</sup><br>
 * </p>
 * <p>
 * In practice {@link org.ejml.alg.dense.mult.VectorVectorMult#householder(double,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)}  multHouseholder}
 * should be used for performance reasons since there is no need to calculate Q explicitly.
 * </p></text>
      <param>u A vector.  Not modified.</param>
      <param>gamma To produce a reflector gamma needs to be equal to 2/||u||.</param>
      <return>An orthogonal reflector.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="createReflector" startLine="78" endLine="86">
      <declaration type="DenseMatrix64F" name="Q" />
    </method>
    <javadoc>
      <text>* Creates a copy of a matrix but swaps the rows as specified by the order array.</text>
      <param>order Specifies which row in the dest corresponds to a row in the src. Not modified.</param>
      <param>src The original matrix. Not modified.</param>
      <param>dst A Matrix that is a row swapped copy of src. Modified.</param>
    </javadoc>
    <method type="DenseMatrix64F" name="copyChangeRow" startLine="96" endLine="111">
      <scope startLine="97" endLine="99" />
      <scope startLine="99" endLine="101" />
      <scope startLine="103" endLine="108">
        <declaration type="int" name="indexDst" />
        <declaration type="int" name="indexSrc" />
      </scope>
    </method>
    <javadoc>
      <text>* Copies just the upper or lower triangular portion of a matrix.</text>
      <param>src Matrix being copied. Not modified.</param>
      <param>dst Where just a triangle from src is copied.  If null a new one will be created. Modified.</param>
      <param>upper If the upper or lower triangle should be copied.</param>
      <return>The copied matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="copyTriangle" startLine="121" endLine="143">
      <scope startLine="122" endLine="124" />
      <scope startLine="124" endLine="126" />
      <scope startLine="128" endLine="134">
        <declaration type="int" name="N" />
        <scope startLine="130" endLine="133">
          <declaration type="int" name="index" />
        </scope>
      </scope>
      <scope startLine="134" endLine="140">
        <scope startLine="135" endLine="139">
          <declaration type="int" name="length" />
          <declaration type="int" name="index" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Computes the F norm of the difference between the two Matrices:<br>
 * <br>
 * Sqrt{&sum;<sub>i=1:m</sub> &sum;<sub>j=1:n</sub> ( a<sub>ij</sub> - b<sub>ij</sub>)<sup>2</sup>}
 * </p>
 * <p>
 * This is often used as a cost function.
 * </p></text>
      <see>NormOps#fastNormF</see>
      <param>a m by n matrix. Not modified.</param>
      <param>b m by n matrix. Not modified.</param>
      <return>The F normal of the difference matrix.</return>
    </javadoc>
    <method type="double" name="diffNormF" startLine="163" endLine="176">
      <scope startLine="164" endLine="166" />
      <declaration type="int" name="size" />
      <declaration type="DenseMatrix64F" name="diff" />
      <scope startLine="172" endLine="174" />
    </method>
    <method type="double" name="diffNormF_fast" startLine="179" endLine="192">
      <scope startLine="180" endLine="182" />
      <declaration type="int" name="size" />
      <declaration type="double" name="total" />
      <scope startLine="187" endLine="190">
        <declaration type="double" name="diff" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Computes the p=1 p-norm of the difference between the two Matrices:<br>
 * <br>
 * &sum;<sub>i=1:m</sub> &sum;<sub>j=1:n</sub> | a<sub>ij</sub> - b<sub>ij</sub>| <br>
 * <br>
 * where |x| is the absolute value of x.
 * </p>
 * <p>
 * This is often used as a cost function.
 * </p></text>
      <param>a m by n matrix. Not modified.</param>
      <param>b m by n matrix. Not modified.</param>
      <return>The p=1 p-norm of the difference matrix.</return>
    </javadoc>
    <method type="double" name="diffNormP1" startLine="212" endLine="224">
      <scope startLine="213" endLine="215" />
      <declaration type="int" name="size" />
      <declaration type="double" name="total" />
      <scope startLine="220" endLine="222" />
    </method>
    <javadoc>
      <text>* <p>
 * Performs the following operation:<br>
 * <br>
 * B = A + &alpha;I
 * <p></text>
      <param>A A square matrix.  Not modified.</param>
      <param>B A square matrix that the results are saved to.  Modified.</param>
      <param>alpha Scaling factor for the identity matrix.</param>
    </javadoc>
    <method type="void" name="addIdentity" startLine="238" endLine="256">
      <declaration type="int" name="n" />
      <declaration type="int" name="index" />
      <scope startLine="247" endLine="255">
        <scope startLine="248" endLine="254">
          <scope startLine="249" endLine="251" />
          <scope startLine="251" endLine="253" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Extracts a row or column vector from matrix A.  The first element in the matrix is at element (rowA,colA).
 * The next 'length' elements are extracted along a row or column.  The results are put into vector 'v'
 * start at its element v0.
 * </p></text>
      <param>A Matrix that the vector is being extracted from.  Not modified.</param>
      <param>rowA Row of the first element that is extracted.</param>
      <param>colA Column of the first element that is extracted.</param>
      <param>length Length of the extracted vector.</param>
      <param>row If true a row vector is extracted, otherwise a column vector is extracted.</param>
      <param>offsetV First element in 'v' where the results are extracted to.</param>
      <param>v Vector where the results are written to. Modified.</param>
    </javadoc>
    <method type="void" name="subvector" startLine="273" endLine="283">
      <scope startLine="274" endLine="278">
        <scope startLine="275" endLine="277" />
      </scope>
      <scope startLine="278" endLine="282">
        <scope startLine="279" endLine="281" />
      </scope>
    </method>
    <javadoc>
      <text>* Takes a matrix and splits it into a set of row or column vectors.</text>
      <param>A original matrix.</param>
      <param>column If true then column vectors will be created.</param>
      <return>Set of vectors.</return>
    </javadoc>
    <method type="DenseMatrix64F[]" name="splitIntoVectors" startLine="293" endLine="315">
      <declaration type="int" name="w" />
      <declaration type="int" name="M" />
      <declaration type="int" name="N" />
      <declaration type="int" name="o" />
      <declaration type="DenseMatrix64F[]" name="ret" />
      <scope startLine="303" endLine="312">
        <declaration type="DenseMatrix64F" name="a" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Creates a pivot matrix that exchanges the rows in a matrix:
 * <br>
 * A' = P*A<br>
 * </p>
 * <p>
 * For example, if element 0 in 'pivots' is 2 then the first row in A' will be the 3rd row in A.
 * </p></text>
      <param>ret If null then a new matrix is declared otherwise the results are written to it.  Is modified.</param>
      <param>pivots Specifies the new order of rows in a matrix.</param>
      <param>numPivots How many elements in pivots are being used.</param>
      <param>transposed If the transpose of the matrix is returned.</param>
      <return>A pivot matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="pivotMatrix" startLine="333" endLine="354">
      <scope startLine="335" endLine="337" />
      <scope startLine="337" endLine="341" />
      <scope startLine="343" endLine="347">
        <scope startLine="344" endLine="346" />
      </scope>
      <scope startLine="347" endLine="351">
        <scope startLine="348" endLine="350" />
      </scope>
    </method>
    <javadoc>
      <text>* Computes the product of the diagonal elements.  For a diagonal or triangular
 * matrix this is the determinant.</text>
      <param>T A matrix.</param>
      <return>product of the diagonal elements.</return>
    </javadoc>
    <method type="double" name="diagProd" startLine="364" endLine="372">
      <declaration type="double" name="prod" />
      <declaration type="int" name="N" />
      <scope startLine="367" endLine="369" />
    </method>
    <javadoc>
      <text>* Computes the quality of a triangular matrix, where the quality of a matrix
 * is defined in {@link org.ejml.factory.LinearSolver#quality()}.  In
 * this situation the quality os the absolute value of the product of
 * each diagonal element divided by the magnitude of the largest diagonal element.
 * If all diagonal elements are zero then zero is returned.</text>
      <param>upper if it is upper triangular or not.</param>
      <param>T A matrix.  @return product of the diagonal elements.</param>
      <return>the quality of the system.</return>
    </javadoc>
    <method type="double" name="qualityTriangular" startLine="386" endLine="401">
      <declaration type="int" name="N" />
      <declaration type="double" name="max" />
      <declaration type="double" name="quality" />
      <scope startLine="396" endLine="398" />
      <comment>TODO make faster by just checking the upper triangular portion</comment>
    </method>
    <javadoc>
      <text>* Sums up the square of each element in the matrix.  This is equivalent to the
 * Frobenius norm squared.</text>
      <param>m Matrix.</param>
      <return>Sum of elements squared.</return>
    </javadoc>
    <method type="double" name="elementSumSq" startLine="410" endLine="420">
      <declaration type="double" name="total" />
      <declaration type="int" name="N" />
      <scope startLine="414" endLine="417">
        <declaration type="double" name="d" />
      </scope>
    </method>
  </class>
</source>
