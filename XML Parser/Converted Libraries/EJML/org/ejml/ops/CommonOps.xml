<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.ops">
  <import name="org.ejml.EjmlParameters" />
  <import name="org.ejml.UtilEjml" />
  <import name="org.ejml.alg.dense.decomposition.lu.LUDecompositionAlt" />
  <import name="org.ejml.alg.dense.linsol.LinearSolverSafe" />
  <import name="org.ejml.alg.dense.linsol.lu.LinearSolverLu" />
  <import name="org.ejml.alg.dense.misc.*" />
  <import name="org.ejml.alg.dense.mult.MatrixMatrixMult" />
  <import name="org.ejml.alg.dense.mult.MatrixMultProduct" />
  <import name="org.ejml.alg.dense.mult.MatrixVectorMult" />
  <import name="org.ejml.data.D1Matrix64F" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.data.ReshapeMatrix64F" />
  <import name="org.ejml.data.RowD1Matrix64F" />
  <import name="org.ejml.factory.LinearSolver" />
  <import name="org.ejml.factory.LinearSolverFactory" />
  <import name="org.ejml.factory.ReducedRowEchelonForm" />
  <class name="CommonOps" startLine="39">
    <javadoc>
      <text>* <p>
 * Common matrix operations are contained here.  Which specific underlying algorithm is used
 * is not specified just the out come of the operation.  Nor should calls to these functions
 * reply on the underlying implementation.  Which algorithm is used can depend on the matrix
 * being passed in.
 * </p>
 * <p>
 * For more exotic and specialized generic operations see {@link org.ejml.ops.SpecializedOps}.
 * </p></text>
      <see>org.ejml.alg.dense.mult.MatrixMatrixMult</see>
      <see>org.ejml.alg.dense.mult.MatrixVectorMult</see>
      <see>org.ejml.ops.SpecializedOps</see>
      <see>org.ejml.ops.MatrixFeatures</see>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* <p>Performs the following operation:<br>
 * <br>
 * c = a * b <br>
 * <br>
 * c<sub>ij</sub> = &sum;<sub>k=1:n</sub> { a<sub>ik</sub> * b<sub>kj</sub>}
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="mult" startLine="71" endLine="79">
      <scope startLine="72" endLine="74" />
      <scope startLine="74" endLine="76" />
      <scope startLine="76" endLine="78" />
    </method>
    <javadoc>
      <text>* <p>Performs the following operation:<br>
 * <br>
 * c = &alpha; * a * b <br>
 * <br>
 * c<sub>ij</sub> = &alpha; &sum;<sub>k=1:n</sub> { * a<sub>ik</sub> * b<sub>kj</sub>}
 * </p></text>
      <param>alpha Scaling factor.</param>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="mult" startLine="95" endLine="102">
      <scope startLine="97" endLine="99" />
      <scope startLine="99" endLine="101" />
      <comment>TODO add a matrix vectory multiply here</comment>
    </method>
    <javadoc>
      <text>* <p>Performs the following operation:<br>
 * <br>
 * c = a<sup>T</sup> * b <br>
 * <br>
 * c<sub>ij</sub> = &sum;<sub>k=1:n</sub> { a<sub>ki</sub> * b<sub>kj</sub>}
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multTransA" startLine="117" endLine="132">
      <scope startLine="118" endLine="126">
        <scope startLine="121" endLine="123" />
        <scope startLine="123" endLine="125" />
        <comment>todo check a.numCols == 1 and do inner product?</comment>
        <comment>there are significantly faster algorithms when dealing with vectors</comment>
      </scope>
      <scope startLine="127" endLine="129" />
      <scope startLine="129" endLine="131" />
    </method>
    <javadoc>
      <text>* <p>Performs the following operation:<br>
 * <br>
 * c = &alpha; * a<sup>T</sup> * b <br>
 * <br>
 * c<sub>ij</sub> = &alpha; &sum;<sub>k=1:n</sub> { a<sub>ki</sub> * b<sub>kj</sub>}
 * </p></text>
      <param>alpha Scaling factor.</param>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multTransA" startLine="148" endLine="156">
      <scope startLine="151" endLine="153" />
      <scope startLine="153" endLine="155" />
      <comment>TODO add a matrix vectory multiply here</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Performs the following operation:<br>
 * <br>
 * c = a * b<sup>T</sup> <br>
 * c<sub>ij</sub> = &sum;<sub>k=1:n</sub> { a<sub>ik</sub> * b<sub>jk</sub>}
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multTransB" startLine="171" endLine="177">
      <scope startLine="172" endLine="174" />
      <scope startLine="174" endLine="176" />
    </method>
    <javadoc>
      <text>* <p>
 * Performs the following operation:<br>
 * <br>
 * c =  &alpha; * a * b<sup>T</sup> <br>
 * c<sub>ij</sub> = &alpha; &sum;<sub>k=1:n</sub> {  a<sub>ik</sub> * b<sub>jk</sub>}
 * </p></text>
      <param>alpha Scaling factor.</param>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multTransB" startLine="193" endLine="196">
      <comment>TODO add a matrix vectory multiply here</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Performs the following operation:<br>
 * <br>
 * c = a<sup>T</sup> * b<sup>T</sup><br>
 * c<sub>ij</sub> = &sum;<sub>k=1:n</sub> { a<sub>ki</sub> * b<sub>jk</sub>}
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multTransAB" startLine="211" endLine="224">
      <scope startLine="212" endLine="219">
        <scope startLine="214" endLine="216" />
        <scope startLine="216" endLine="218" />
        <comment>there are significantly faster algorithms when dealing with vectors</comment>
      </scope>
      <scope startLine="219" endLine="221" />
      <scope startLine="221" endLine="223" />
    </method>
    <javadoc>
      <text>* <p>
 * Performs the following operation:<br>
 * <br>
 * c = &alpha; * a<sup>T</sup> * b<sup>T</sup><br>
 * c<sub>ij</sub> = &alpha; &sum;<sub>k=1:n</sub> { a<sub>ki</sub> * b<sub>jk</sub>}
 * </p></text>
      <param>alpha Scaling factor.</param>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multTransAB" startLine="240" endLine="247">
      <scope startLine="242" endLine="244" />
      <scope startLine="244" endLine="246" />
      <comment>TODO add a matrix vectory multiply here</comment>
    </method>
    <javadoc>
      <text>* <p>Computes the matrix multiplication inner product:<br>
 * <br>
 * c = a<sup>T</sup> * a <br>
 * <br>
 * c<sub>ij</sub> = &sum;<sub>k=1:n</sub> { a<sub>ki</sub> * a<sub>kj</sub>}
 * </p>
 * <p>
 * Is faster than using a generic matrix multiplication by taking advantage of symmetry.  For
 * vectors there is an even faster option, see {@link org.ejml.alg.dense.mult.VectorVectorMult#innerProd(org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)}</p></text>
      <param>a The matrix being multiplied. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multInner" startLine="266" endLine="275">
      <scope startLine="270" endLine="272" />
      <scope startLine="272" endLine="274" />
    </method>
    <javadoc>
      <text>* <p>Computes the matrix multiplication outer product:<br>
 * <br>
 * c = a * a<sup>T</sup> <br>
 * <br>
 * c<sub>ij</sub> = &sum;<sub>k=1:m</sub> { a<sub>ik</sub> * a<sub>jk</sub>}
 * </p>
 * <p>
 * Is faster than using a generic matrix multiplication by taking advantage of symmetry.
 * </p></text>
      <param>a The matrix being multiplied. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multOuter" startLine="293" endLine="298" />
    <javadoc>
      <text>* <p>
 * Performs the following operation:<br>
 * <br>
 * c = c + a * b<br>
 * c<sub>ij</sub> = c<sub>ij</sub> + &sum;<sub>k=1:n</sub> { a<sub>ik</sub> * b<sub>kj</sub>}
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multAdd" startLine="313" endLine="323">
      <scope startLine="314" endLine="316" />
      <scope startLine="316" endLine="322">
        <scope startLine="317" endLine="319" />
        <scope startLine="319" endLine="321" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Performs the following operation:<br>
 * <br>
 * c = c + &alpha; * a * b<br>
 * c<sub>ij</sub> = c<sub>ij</sub> +  &alpha; * &sum;<sub>k=1:n</sub> { a<sub>ik</sub> * b<sub>kj</sub>}
 * </p></text>
      <param>alpha scaling factor.</param>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multAdd" startLine="339" endLine="346">
      <scope startLine="341" endLine="343" />
      <scope startLine="343" endLine="345" />
      <comment>TODO add a matrix vectory multiply here</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Performs the following operation:<br>
 * <br>
 * c = c + a<sup>T</sup> * b<br>
 * c<sub>ij</sub> = c<sub>ij</sub> + &sum;<sub>k=1:n</sub> { a<sub>ki</sub> * b<sub>kj</sub>}
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multAddTransA" startLine="361" endLine="376">
      <scope startLine="362" endLine="368">
        <scope startLine="363" endLine="365" />
        <scope startLine="365" endLine="367" />
      </scope>
      <scope startLine="368" endLine="375">
        <scope startLine="370" endLine="372" />
        <scope startLine="372" endLine="374" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Performs the following operation:<br>
 * <br>
 * c = c + &alpha; * a<sup>T</sup> * b<br>
 * c<sub>ij</sub> =c<sub>ij</sub> +  &alpha; * &sum;<sub>k=1:n</sub> { a<sub>ki</sub> * b<sub>kj</sub>}
 * </p></text>
      <param>alpha scaling factor</param>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multAddTransA" startLine="392" endLine="400">
      <scope startLine="395" endLine="397" />
      <scope startLine="397" endLine="399" />
      <comment>TODO add a matrix vectory multiply here</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Performs the following operation:<br>
 * <br>
 * c = c + a * b<sup>T</sup> <br>
 * c<sub>ij</sub> = c<sub>ij</sub> + &sum;<sub>k=1:n</sub> { a<sub>ik</sub> * b<sub>jk</sub>}
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multAddTransB" startLine="415" endLine="417" />
    <javadoc>
      <text>* <p>
 * Performs the following operation:<br>
 * <br>
 * c = c + &alpha; * a * b<sup>T</sup><br>
 * c<sub>ij</sub> = c<sub>ij</sub> + &alpha; * &sum;<sub>k=1:n</sub> { a<sub>ik</sub> * b<sub>jk</sub>}
 * </p></text>
      <param>alpha Scaling factor.</param>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multAddTransB" startLine="433" endLine="436">
      <comment>TODO add a matrix vectory multiply here</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Performs the following operation:<br>
 * <br>
 * c = c + a<sup>T</sup> * b<sup>T</sup><br>
 * c<sub>ij</sub> = c<sub>ij</sub> + &sum;<sub>k=1:n</sub> { a<sub>ki</sub> * b<sub>jk</sub>}
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not Modified.</param>
      <param>b The right matrix in the multiplication operation. Not Modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multAddTransAB" startLine="451" endLine="464">
      <scope startLine="452" endLine="459">
        <scope startLine="454" endLine="456" />
        <scope startLine="456" endLine="458" />
        <comment>there are significantly faster algorithms when dealing with vectors</comment>
      </scope>
      <scope startLine="459" endLine="461" />
      <scope startLine="461" endLine="463" />
    </method>
    <javadoc>
      <text>* <p>
 * Performs the following operation:<br>
 * <br>
 * c = c + &alpha; * a<sup>T</sup> * b<sup>T</sup><br>
 * c<sub>ij</sub> = c<sub>ij</sub> + &alpha; * &sum;<sub>k=1:n</sub> { a<sub>ki</sub> * b<sub>jk</sub>}
 * </p></text>
      <param>alpha Scaling factor.</param>
      <param>a The left matrix in the multiplication operation. Not Modified.</param>
      <param>b The right matrix in the multiplication operation. Not Modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multAddTransAB" startLine="480" endLine="487">
      <scope startLine="482" endLine="484" />
      <scope startLine="484" endLine="486" />
      <comment>TODO add a matrix vectory multiply here</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Solves for x in the following equation:<br>
 * <br>
 * A*x = b
 * </p>
 * <p>
 * If the system could not be solved then false is returned.  If it returns true
 * that just means the algorithm finished operating, but the results could still be bad
 * because 'A' is singular or nearly singular.
 * </p>
 * <p>
 * If repeat calls to solve are being made then one should consider using {@link LinearSolverFactory}instead.
 * </p>
 * <p>
 * It is ok for 'b' and 'x' to be the same matrix.
 * </p></text>
      <param>a A matrix that is m by m. Not modified.</param>
      <param>b A matrix that is m by n. Not modified.</param>
      <param>x A matrix that is m by n. Modified.</param>
      <return>true if it could invert the matrix false if it could not.</return>
    </javadoc>
    <method type="boolean" name="solve" startLine="518" endLine="529">
      <declaration type="LinearSolver<DenseMatrix64F>" name="solver" />
      <comment>make sure the inputs 'a' and 'b' are not modified</comment>
    </method>
    <javadoc>
      <text>* Performs an in-place transpose.  This algorithm is only efficient for square
 * matrices.</text>
      <param>mat The matrix that is to be transposed. Modified.</param>
    </javadoc>
    <method type="void" name="transpose" startLine="537" endLine="545">
      <scope startLine="538" endLine="540" />
      <scope startLine="540" endLine="544">
        <declaration type="DenseMatrix64F" name="b" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Transposes matrix 'a' and stores the results in 'b':<br>
 * <br>
 * b<sub>ij</sub> = a<sub>ji</sub><br>
 * where 'b' is the transpose of 'a'.
 * </p></text>
      <param>A The original matrix.  Not modified.</param>
      <param>A_tran Where the transpose is stored. If null a new matrix is created. Modified.</param>
      <return>The transposed matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="transpose" startLine="560" endLine="576">
      <scope startLine="561" endLine="563" />
      <scope startLine="563" endLine="567">
        <scope startLine="564" endLine="566" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * This computes the trace of the matrix:<br>
 * <br>
 * trace = &sum;<sub>i=1:n</sub> { a<sub>ii</sub> }
 * </p>
 * <p>
 * The trace is only defined for square matrices.
 * </p></text>
      <param>a A square matrix.  Not modified.</param>
    </javadoc>
    <method type="double" name="trace" startLine="591" endLine="604">
      <scope startLine="592" endLine="594" />
      <declaration type="double" name="sum" />
      <declaration type="int" name="index" />
      <scope startLine="598" endLine="601" />
    </method>
    <javadoc>
      <text>* Returns the determinant of the matrix.  If the inverse of the matrix is also
 * needed, then using {@link org.ejml.alg.dense.decomposition.lu.LUDecompositionAlt} directly (or any
 * similar algorithm) can be more efficient.</text>
      <param>mat The matrix whose determinant is to be computed.  Not modified.</param>
      <return>The determinant.</return>
    </javadoc>
    <method type="double" name="det" startLine="615" endLine="642">
      <declaration type="int" name="numCol" />
      <declaration type="int" name="numRow" />
      <scope startLine="620" endLine="622" />
      <scope startLine="622" endLine="631">
        <scope startLine="626" endLine="628" />
        <scope startLine="628" endLine="630" />
        <comment>slight performance boost overall by doing it this way</comment>
        <comment>when it was the case statement the VM did some strange optimization</comment>
        <comment>and made case 2 about 1/2 the speed</comment>
      </scope>
      <scope startLine="631" endLine="641">
        <declaration type="LUDecompositionAlt" name="alg" />
        <scope startLine="634" endLine="636" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Performs a matrix inversion operation on the specified matrix and stores the results
 * in the same matrix.<br>
 * <br>
 * a = a<sup>-1<sup>
 * </p>
 * <p>
 * If the algorithm could not invert the matrix then false is returned.  If it returns true
 * that just means the algorithm finished.  The results could still be bad
 * because the matrix is singular or nearly singular.
 * </p></text>
      <param>mat The matrix that is to be inverted.  Results are stored here.  Modified.</param>
      <return>true if it could invert the matrix false if it could not.</return>
    </javadoc>
    <method type="boolean" name="invert" startLine="661" endLine="682">
      <scope startLine="662" endLine="672">
        <scope startLine="663" endLine="665" />
        <scope startLine="667" endLine="669" />
        <scope startLine="669" endLine="671" />
      </scope>
      <scope startLine="672" endLine="680">
        <declaration type="LUDecompositionAlt" name="alg" />
        <declaration type="LinearSolverLu" name="solver" />
        <scope startLine="675" endLine="677" />
        <scope startLine="677" endLine="679" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Performs a matrix inversion operation that does not modify the original
 * and stores the results in another matrix.  The two matrices must have the
 * same dimension.<br>
 * <br>
 * b = a<sup>-1<sup>
 * </p>
 * <p>
 * If the algorithm could not invert the matrix then false is returned.  If it returns true
 * that just means the algorithm finished.  The results could still be bad
 * because the matrix is singular or nearly singular.
 * </p>
 * <p>
 * For medium to large matrices there might be a slight performance boost to using{@link LinearSolverFactory} instead.
 * </p></text>
      <param>mat The matrix that is to be inverted. Not modified.</param>
      <param>result Where the inverse matrix is stored.  Modified.</param>
      <return>true if it could invert the matrix false if it could not.</return>
    </javadoc>
    <method type="boolean" name="invert" startLine="708" endLine="730">
      <scope startLine="709" endLine="718">
        <scope startLine="710" endLine="712" />
        <scope startLine="713" endLine="715" />
        <scope startLine="715" endLine="717" />
      </scope>
      <scope startLine="718" endLine="728">
        <declaration type="LUDecompositionAlt" name="alg" />
        <declaration type="LinearSolverLu" name="solver" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Computes the Moore-Penrose pseudo-inverse:<br>
 * <br>
 * pinv(A) = (A<sup>T</sup>A)<sup>-1</sup> A<sup>T</sup><br>
 * or<br>
 * pinv(A) = A<sup>T</sup>(AA<sup>T</sup>)<sup>-1</sup><br>
 * </p>
 * <p>
 * Internally it uses {@link org.ejml.alg.dense.linsol.svd.SolvePseudoInverseSvd} to compute the inverse.  For performance reasons, this should only
 * be used when a matrix is singular or nearly singular.
 * </p></text>
      <param>A  A m by n Matrix.  Not modified.</param>
      <param>invA Where the computed pseudo inverse is stored. n by m.  Modified.</param>
      <return />
    </javadoc>
    <method type="void" name="pinv" startLine="749" endLine="758">
      <declaration type="LinearSolver<DenseMatrix64F>" name="solver" />
    </method>
    <javadoc>
      <text>* Converts the columns in a matrix into a set of vectors.</text>
      <param>A Matrix.  Not modified.</param>
      <param>v</param>
      <return>An array of vectors.</return>
    </javadoc>
    <method type="DenseMatrix64F[]" name="columnsToVector" startLine="768" endLine="791">
      <declaration type="DenseMatrix64F[]" name="ret" />
      <scope startLine="770" endLine="772" />
      <scope startLine="772" endLine="774" />
      <scope startLine="776" endLine="788">
        <scope startLine="777" endLine="779" />
        <scope startLine="779" endLine="781" />
        <declaration type="DenseMatrix64F" name="u" />
        <scope startLine="785" endLine="787" />
      </scope>
    </method>
    <javadoc>
      <text>* Converts the rows in a matrix into a set of vectors.</text>
      <param>A Matrix.  Not modified.</param>
      <param>v</param>
      <return>An array of vectors.</return>
    </javadoc>
    <method type="DenseMatrix64F[]" name="rowsToVector" startLine="801" endLine="825">
      <declaration type="DenseMatrix64F[]" name="ret" />
      <scope startLine="803" endLine="805" />
      <scope startLine="805" endLine="807" />
      <scope startLine="810" endLine="822">
        <scope startLine="811" endLine="813" />
        <scope startLine="813" endLine="815" />
        <declaration type="DenseMatrix64F" name="u" />
        <scope startLine="819" endLine="821" />
      </scope>
    </method>
    <javadoc>
      <text>* Sets all the diagonal elements equal to one and everything else equal to zero.
 * If this is a square matrix then it will be an identity matrix.</text>
      <see>#identity(int)</see>
      <param>mat A square matrix.</param>
    </javadoc>
    <method type="void" name="setIdentity" startLine="836" endLine="849">
      <declaration type="int" name="width" />
      <declaration type="int" name="length" />
      <scope startLine="841" endLine="843" />
      <declaration type="int" name="index" />
      <scope startLine="846" endLine="848" />
    </method>
    <javadoc>
      <text>* <p>
 * Creates an identity matrix of the specified size.<br>
 * <br>
 * a<sub>ij</sub> = 0   if i &ne; j<br>
 * a<sub>ij</sub> = 1   if i = j<br>
 * </p></text>
      <param>width The width and height of the identity matrix.</param>
      <return>A new instance of an identity matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="identity" startLine="863" endLine="871">
      <declaration type="DenseMatrix64F" name="ret" />
      <scope startLine="866" endLine="868" />
    </method>
    <javadoc>
      <text>* Creates a rectangular matrix which is zero except along the diagonals.</text>
      <param>numRows Number of rows in the matrix.</param>
      <param>numCols NUmber of columns in the matrix.</param>
      <return>A matrix with diagonal elements equal to one.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="identity" startLine="881" endLine="891">
      <declaration type="DenseMatrix64F" name="ret" />
      <declaration type="int" name="small" />
      <scope startLine="886" endLine="888" />
    </method>
    <javadoc>
      <text>* <p>
 * Creates a new square matrix whose diagonal elements are specified by diagEl and all
 * the other elements are zero.<br>
 * <br>
 * a<sub>ij</sub> = 0         if i &le; j<br>
 * a<sub>ij</sub> = diag[i]   if i = j<br>
 * </p></text>
      <see>#diagR</see>
      <param>diagEl Contains the values of the diagonal elements of the resulting matrix.</param>
      <return>A new matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="diag" startLine="908" endLine="910" />
    <method type="DenseMatrix64F" name="diag" startLine="913" endLine="928">
      <scope startLine="914" endLine="916" />
      <scope startLine="916" endLine="921" />
      <scope startLine="923" endLine="925" />
    </method>
    <javadoc>
      <text>* <p>
 * Creates a new rectangular matrix whose diagonal elements are specified by diagEl and all
 * the other elements are zero.<br>
 * <br>
 * a<sub>ij</sub> = 0         if i &le; j<br>
 * a<sub>ij</sub> = diag[i]   if i = j<br>
 * </p></text>
      <see>#diag</see>
      <param>numRows Number of rows in the matrix.</param>
      <param>numCols Number of columns in the matrix.</param>
      <param>diagEl Contains the values of the diagonal elements of the resulting matrix.</param>
      <return>A new matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="diagR" startLine="947" endLine="957">
      <declaration type="DenseMatrix64F" name="ret" />
      <declaration type="int" name="o" />
      <scope startLine="952" endLine="954" />
    </method>
    <javadoc>
      <text>* <p>
 * The Kronecker product of two matrices is defined as:<br>
 * C<sub>ij</sub> = a<sub>ij</sub>B<br>
 * where C<sub>ij</sub> is a sub matrix inside of C &isin; &real; <sup>m*k &times; n*l</sup>,
 * A &isin; &real; <sup>m &times; n</sup>, and B &isin; &real; <sup>k &times; l</sup>.
 * </p></text>
      <param>A The left matrix in the operation. Not modified.</param>
      <param>B The right matrix in the operation. Not modified.</param>
      <param>C Where the results of the operation are stored. Modified.</param>
      <return>The results of the operation.</return>
    </javadoc>
    <method type="void" name="kron" startLine="973" endLine="996">
      <declaration type="int" name="numColsC" />
      <declaration type="int" name="numRowsC" />
      <scope startLine="977" endLine="979" />
      <scope startLine="984" endLine="995">
        <scope startLine="985" endLine="994">
          <declaration type="double" name="a" />
          <scope startLine="988" endLine="993">
            <scope startLine="989" endLine="992">
              <declaration type="double" name="val" />
            </scope>
          </scope>
        </scope>
      </scope>
      <comment>TODO see comment below</comment>
      <comment>this will work well for small matrices</comment>
      <comment>but an alternative version should be made for large matrices</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Extracts a submatrix from 'src' and inserts it in a submatrix in 'dst'.
 * </p>
 * <p>
 * s<sub>i-y0 , j-x0</sub> = o<sub>ij</sub> for all y0 &le; i < y1 and x0 &le; j < x1 <br>
 * <br>
 * where 's<sub>ij</sub>' is an element in the submatrix and 'o<sub>ij</sub>' is an element in the
 * original matrix.
 * </p></text>
      <param>src The original matrix which is to be copied.  Not modified.</param>
      <param>srcX0 Start column.</param>
      <param>srcX1 Stop column+1.</param>
      <param>srcY0 Start row.</param>
      <param>srcY1 Stop row+1.</param>
      <param>dst Where the submatrix are stored.  Modified.</param>
      <param>dstY0 Start row in dst.</param>
      <param>dstX0 start column in dst.</param>
    </javadoc>
    <method type="void" name="extract" startLine="1023" endLine="1043">
      <declaration type="int" name="w" />
      <declaration type="int" name="h" />
      <scope startLine="1038" endLine="1040" />
      <scope startLine="1040" endLine="1042" />
      <comment>interestingly, the performance is only different for small matrices but identical for larger ones</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Creates a new matrix which is the specified submatrix of 'src'
 * </p>
 * <p>
 * s<sub>i-y0 , j-x0</sub> = o<sub>ij</sub> for all y0 &le; i < y1 and x0 &le; j < x1 <br>
 * <br>
 * where 's<sub>ij</sub>' is an element in the submatrix and 'o<sub>ij</sub>' is an element in the
 * original matrix.
 * </p></text>
      <param>src The original matrix which is to be copied.  Not modified.</param>
      <param>srcX0 Start column.</param>
      <param>srcX1 Stop column+1.</param>
      <param>srcY0 Start row.</param>
      <param>srcY1 Stop row+1.</param>
      <return>Extracted submatrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="extract" startLine="1066" endLine="1080">
      <declaration type="int" name="w" />
      <declaration type="int" name="h" />
      <declaration type="DenseMatrix64F" name="dst" />
    </method>
    <javadoc>
      <text>* <p>
 * Extracts the diagonal elements 'src' write it to the 'dst' vector.  'dst'
 * can either be a row or column vector.
 * <p></text>
      <param>src Matrix whose diagonal elements are being extracted. Not modified.</param>
      <param>dst A vector the results will be written into. Modified.</param>
    </javadoc>
    <method type="void" name="extractDiag" startLine="1092" endLine="1104">
      <declaration type="int" name="N" />
      <scope startLine="1095" endLine="1097" />
      <scope startLine="1097" endLine="1099" />
      <scope startLine="1101" endLine="1103" />
    </method>
    <javadoc>
      <text>* Inserts matrix 'src' into matrix 'dest' with the (0,0) of src at (row,col) in dest.
 * This is equivalent to calling extract(src,0,src.numRows,0,src.numCols,dest,destY0,destX0).</text>
      <param>src matrix that is being copied into dest. Not modified.</param>
      <param>dest Where src is being copied into. Modified.</param>
      <param>destY0 Start row for the copy into dest.</param>
      <param>destX0 Start column for the copy into dest.</param>
    </javadoc>
    <method type="void" name="insert" startLine="1115" endLine="1117" />
    <javadoc>
      <text>* <p>
 * Returns the value of the element in the matrix that has the largest value.<br>
 * <br>
 * Max{ a<sub>ij</sub> } for all i and j<br>
 * </p></text>
      <param>a A matrix. Not modified.</param>
      <return>The max element value of the matrix.</return>
    </javadoc>
    <method type="double" name="elementMax" startLine="1129" endLine="1141">
      <declaration type="int" name="size" />
      <declaration type="double" name="max" />
      <scope startLine="1133" endLine="1138">
        <declaration type="double" name="val" />
        <scope startLine="1135" endLine="1137" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Returns the absolute value of the element in the matrix that has the largest absolute value.<br>
 * <br>
 * Max{ |a<sub>ij</sub>| } for all i and j<br>
 * </p></text>
      <param>a A matrix. Not modified.</param>
      <return>The max abs element value of the matrix.</return>
    </javadoc>
    <method type="double" name="elementMaxAbs" startLine="1153" endLine="1165">
      <declaration type="int" name="size" />
      <declaration type="double" name="max" />
      <scope startLine="1157" endLine="1162">
        <declaration type="double" name="val" />
        <scope startLine="1159" endLine="1161" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Returns the value of the element in the matrix that has the minimum value.<br>
 * <br>
 * Min{ a<sub>ij</sub> } for all i and j<br>
 * </p></text>
      <param>a A matrix. Not modified.</param>
      <return>The value of element in the matrix with the minimum value.</return>
    </javadoc>
    <method type="double" name="elementMin" startLine="1177" endLine="1189">
      <declaration type="int" name="size" />
      <declaration type="double" name="min" />
      <scope startLine="1181" endLine="1186">
        <declaration type="double" name="val" />
        <scope startLine="1183" endLine="1185" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Returns the absolute value of the element in the matrix that has the smallest absolute value.<br>
 * <br>
 * Min{ |a<sub>ij</sub>| } for all i and j<br>
 * </p></text>
      <param>a A matrix. Not modified.</param>
      <return>The max element value of the matrix.</return>
    </javadoc>
    <method type="double" name="elementMinAbs" startLine="1201" endLine="1213">
      <declaration type="int" name="size" />
      <declaration type="double" name="min" />
      <scope startLine="1205" endLine="1210">
        <declaration type="double" name="val" />
        <scope startLine="1207" endLine="1209" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>Performs the an element by element multiplication operation:<br>
 * <br>
 * a<sub>ij</sub> = a<sub>ij</sub> * b<sub>ij</sub> <br>
 * </p></text>
      <param>a The left matrix in the multiplication operation. Modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
    </javadoc>
    <method type="void" name="elementMult" startLine="1224" endLine="1234">
      <scope startLine="1225" endLine="1227" />
      <declaration type="int" name="length" />
      <scope startLine="1231" endLine="1233" />
    </method>
    <javadoc>
      <text>* <p>Performs the an element by element multiplication operation:<br>
 * <br>
 * c<sub>ij</sub> = a<sub>ij</sub> * b<sub>ij</sub> <br>
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="elementMult" startLine="1246" endLine="1257">
      <scope startLine="1248" endLine="1250" />
      <declaration type="int" name="length" />
      <scope startLine="1254" endLine="1256" />
    </method>
    <javadoc>
      <text>* <p>Performs the an element by element division operation:<br>
 * <br>
 * a<sub>ij</sub> = a<sub>ij</sub> / b<sub>ij</sub> <br>
 * </p></text>
      <param>a The left matrix in the division operation. Modified.</param>
      <param>b The right matrix in the division operation. Not modified.</param>
    </javadoc>
    <method type="void" name="elementDiv" startLine="1268" endLine="1278">
      <scope startLine="1269" endLine="1271" />
      <declaration type="int" name="length" />
      <scope startLine="1275" endLine="1277" />
    </method>
    <javadoc>
      <text>* <p>Performs the an element by element division operation:<br>
 * <br>
 * c<sub>ij</sub> = a<sub>ij</sub> / b<sub>ij</sub> <br>
 * </p></text>
      <param>a The left matrix in the division operation. Not modified.</param>
      <param>b The right matrix in the division operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="elementDiv" startLine="1290" endLine="1301">
      <scope startLine="1292" endLine="1294" />
      <declaration type="int" name="length" />
      <scope startLine="1298" endLine="1300" />
    </method>
    <javadoc>
      <text>* <p>
 * Computes the sum of all the elements in the matrix:<br>
 * <br>
 * sum(i=1:m , j=1:n ; a<sub>ij</sub>)
 * <p></text>
      <param>mat An m by n matrix. Not modified.</param>
      <return>The sum of the elements.</return>
    </javadoc>
    <method type="double" name="elementSum" startLine="1313" endLine="1323">
      <declaration type="double" name="total" />
      <declaration type="int" name="size" />
      <scope startLine="1318" endLine="1320" />
    </method>
    <javadoc>
      <text>* <p>
 * Computes the sum of the absolute value all the elements in the matrix:<br>
 * <br>
 * sum(i=1:m , j=1:n ; |a<sub>ij</sub>|)
 * <p></text>
      <param>mat An m by n matrix. Not modified.</param>
      <return>The sum of the absolute value of each element.</return>
    </javadoc>
    <method type="double" name="elementSumAbs" startLine="1335" endLine="1345">
      <declaration type="double" name="total" />
      <declaration type="int" name="size" />
      <scope startLine="1340" endLine="1342" />
    </method>
    <javadoc>
      <text>* <p>
 * Computes the sum of each row in the input matrix and returns the results in a vector:<br>
 * <br>
 * b<sub>j</sub> = sum(i=1:n ; |a<sub>ji</sub>|)
 * </p></text>
      <param>input INput matrix whose rows are summed.</param>
      <param>output Optional storage for output.  Must be a vector. If null a row vector is returned. Modified.</param>
      <return>Vector containing the sum of each row in the input.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="sumRows" startLine="1358" endLine="1375">
      <scope startLine="1359" endLine="1361" />
      <scope startLine="1364" endLine="1373">
        <declaration type="double" name="total" />
        <declaration type="int" name="end" />
        <scope startLine="1368" endLine="1370" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Computes the sum of each column in the input matrix and returns the results in a vector:<br>
 * <br>
 * b<sub>j</sub> = sum(i=1:m ; |a<sub>ij</sub>|)
 * </p></text>
      <param>input INput matrix whose rows are summed.</param>
      <param>output Optional storage for output.  Must be a vector. If null a column vector is returned. Modified.</param>
      <return>Vector containing the sum of each row in the input.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="sumCols" startLine="1388" endLine="1406">
      <scope startLine="1389" endLine="1391" />
      <scope startLine="1394" endLine="1404">
        <declaration type="double" name="total" />
        <declaration type="int" name="index" />
        <declaration type="int" name="end" />
        <scope startLine="1399" endLine="1401" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>Performs the following operation:<br>
 * <br>
 * a = a + b <br>
 * a<sub>ij</sub> = a<sub>ij</sub> + b<sub>ij</sub> <br>
 * </p></text>
      <param>a A Matrix. Modified.</param>
      <param>b A Matrix. Not modified.</param>
    </javadoc>
    <method type="void" name="addEquals" startLine="1419" endLine="1429">
      <scope startLine="1420" endLine="1422" />
      <declaration type="int" name="length" />
      <scope startLine="1426" endLine="1428" />
    </method>
    <javadoc>
      <text>* <p>Performs the following operation:<br>
 * <br>
 * a = a +  &beta; * b  <br>
 * a<sub>ij</sub> = a<sub>ij</sub> + &beta; * b<sub>ij</sub>
 * </p></text>
      <param>beta The number that matrix 'b' is multiplied by.</param>
      <param>a A Matrix. Modified.</param>
      <param>b A Matrix. Not modified.</param>
    </javadoc>
    <method type="void" name="addEquals" startLine="1443" endLine="1453">
      <scope startLine="1444" endLine="1446" />
      <declaration type="int" name="length" />
      <scope startLine="1450" endLine="1452" />
    </method>
    <javadoc>
      <text>* <p>Performs the following operation:<br>
 * <br>
 * c = a + b <br>
 * c<sub>ij</sub> = a<sub>ij</sub> + b<sub>ij</sub> <br>
 * </p>
 * <p>
 * Matrix C can be the same instance as Matrix A and/or B.
 * </p></text>
      <param>a A Matrix. Not modified.</param>
      <param>b A Matrix. Not modified.</param>
      <param>c A Matrix where the results are stored. Modified.</param>
    </javadoc>
    <method type="void" name="add" startLine="1471" endLine="1482">
      <scope startLine="1473" endLine="1475" />
      <declaration type="int" name="length" />
      <scope startLine="1479" endLine="1481" />
    </method>
    <javadoc>
      <text>* <p>Performs the following operation:<br>
 * <br>
 * c = a + &beta; * b <br>
 * c<sub>ij</sub> = a<sub>ij</sub> + &beta; * b<sub>ij</sub> <br>
 * </p>
 * <p>
 * Matrix C can be the same instance as Matrix A and/or B.
 * </p></text>
      <param>a A Matrix. Not modified.</param>
      <param>beta Scaling factor for matrix b.</param>
      <param>b A Matrix. Not modified.</param>
      <param>c A Matrix where the results are stored. Modified.</param>
    </javadoc>
    <method type="void" name="add" startLine="1501" endLine="1512">
      <scope startLine="1503" endLine="1505" />
      <declaration type="int" name="length" />
      <scope startLine="1509" endLine="1511" />
    </method>
    <javadoc>
      <text>* <p>Performs the following operation:<br>
 * <br>
 * c = &alpha; * a + &beta; * b <br>
 * c<sub>ij</sub> = &alpha; * a<sub>ij</sub> + &beta; * b<sub>ij</sub> <br>
 * </p>
 * <p>
 * Matrix C can be the same instance as Matrix A and/or B.
 * </p></text>
      <param>alpha A scaling factor for matrix a.</param>
      <param>a A Matrix. Not modified.</param>
      <param>beta A scaling factor for matrix b.</param>
      <param>b A Matrix. Not modified.</param>
      <param>c A Matrix where the results are stored. Modified.</param>
    </javadoc>
    <method type="void" name="add" startLine="1532" endLine="1543">
      <scope startLine="1534" endLine="1536" />
      <declaration type="int" name="length" />
      <scope startLine="1540" endLine="1542" />
    </method>
    <javadoc>
      <text>* <p>Performs the following operation:<br>
 * <br>
 * c = &alpha; * a + b <br>
 * c<sub>ij</sub> = &alpha; * a<sub>ij</sub> + b<sub>ij</sub> <br>
 * </p>
 * <p>
 * Matrix C can be the same instance as Matrix A and/or B.
 * </p></text>
      <param>alpha A scaling factor for matrix a.</param>
      <param>a A Matrix. Not modified.</param>
      <param>b A Matrix. Not modified.</param>
      <param>c A Matrix where the results are stored. Modified.</param>
    </javadoc>
    <method type="void" name="add" startLine="1562" endLine="1573">
      <scope startLine="1564" endLine="1566" />
      <declaration type="int" name="length" />
      <scope startLine="1570" endLine="1572" />
    </method>
    <javadoc>
      <text>* <p>Performs an in-place scalar addition:<br>
 * <br>
 * a = a + val<br>
 * a<sub>ij</sub> = a<sub>ij</sub> + val<br>
 * </p></text>
      <param>a A matrix.  Modified.</param>
      <param>val The value that's added to each element.</param>
    </javadoc>
    <method type="void" name="add" startLine="1585" endLine="1591">
      <declaration type="int" name="length" />
      <scope startLine="1588" endLine="1590" />
    </method>
    <javadoc>
      <text>* <p>Performs scalar addition:<br>
 * <br>
 * c = a + val<br>
 * c<sub>ij</sub> = a<sub>ij</sub> + val<br>
 * </p></text>
      <param>a A matrix. Not modified.</param>
      <param>c A matrix. Modified.</param>
      <param>val The value that's added to each element.</param>
    </javadoc>
    <method type="void" name="add" startLine="1604" endLine="1614">
      <scope startLine="1605" endLine="1607" />
      <declaration type="int" name="length" />
      <scope startLine="1611" endLine="1613" />
    </method>
    <javadoc>
      <text>* <p>Performs the following subtraction operation:<br>
 * <br>
 * a = a - b  <br>
 * a<sub>ij</sub> = a<sub>ij</sub> - b<sub>ij</sub>
 * </p></text>
      <param>a A Matrix. Modified.</param>
      <param>b A Matrix. Not modified.</param>
    </javadoc>
    <method type="void" name="subEquals" startLine="1627" endLine="1637">
      <scope startLine="1628" endLine="1630" />
      <declaration type="int" name="length" />
      <scope startLine="1634" endLine="1636" />
    </method>
    <javadoc>
      <text>* <p>Performs the following subtraction operation:<br>
 * <br>
 * c = a - b  <br>
 * c<sub>ij</sub> = a<sub>ij</sub> - b<sub>ij</sub>
 * </p>
 * <p>
 * Matrix C can be the same instance as Matrix A and/or B.
 * </p></text>
      <param>a A Matrix. Not modified.</param>
      <param>b A Matrix. Not modified.</param>
      <param>c A Matrix. Modified.</param>
    </javadoc>
    <method type="void" name="sub" startLine="1654" endLine="1664">
      <scope startLine="1655" endLine="1657" />
      <declaration type="int" name="length" />
      <scope startLine="1661" endLine="1663" />
    </method>
    <javadoc>
      <text>* <p>
 * Performs an in-place element by element scalar multiplication.<br>
 * <br>
 * a<sub>ij</sub> = &alpha;*a<sub>ij</sub>
 * </p></text>
      <param>a The matrix that is to be scaled.  Modified.</param>
      <param>alpha the amount each element is multiplied by.</param>
    </javadoc>
    <method type="void" name="scale" startLine="1677" endLine="1685">
      <declaration type="int" name="size" />
      <scope startLine="1682" endLine="1684" />
      <comment>on very small matrices (2 by 2) the call to getNumElements() can slow it down</comment>
      <comment>slightly compared to other libraries since it involves an extra multiplication.</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Performs an element by element scalar multiplication.<br>
 * <br>
 * b<sub>ij</sub> = &alpha;*a<sub>ij</sub>
 * </p></text>
      <param>alpha the amount each element is multiplied by.</param>
      <param>a The matrix that is to be scaled.  Not modified.</param>
      <param>b Where the scaled matrix is stored. Modified.</param>
    </javadoc>
    <method type="void" name="scale" startLine="1699" endLine="1708">
      <declaration type="int" name="size" />
      <scope startLine="1705" endLine="1707" />
    </method>
    <javadoc>
      <text>* <p>
 * Performs an in-place element by element scalar division.<br>
 * <br>
 * a<sub>ij</sub> = a<sub>ij</sub>/&alpha;
 * </p></text>
      <param>a The matrix whose elements are to be divided.  Modified.</param>
      <param>alpha the amount each element is divided by.</param>
    </javadoc>
    <method type="void" name="divide" startLine="1721" endLine="1727">
      <declaration type="int" name="size" />
      <scope startLine="1724" endLine="1726" />
    </method>
    <javadoc>
      <text>* <p>
 * Performs an element by element scalar division.<br>
 * <br>
 * b<sub>ij</sub> = *a<sub>ij</sub> /&alpha;
 * </p></text>
      <param>alpha the amount each element is divided by.</param>
      <param>a The matrix whose elements are to be divided.  Not modified.</param>
      <param>b Where the results are stored. Modified.</param>
    </javadoc>
    <method type="void" name="divide" startLine="1741" endLine="1750">
      <declaration type="int" name="size" />
      <scope startLine="1747" endLine="1749" />
    </method>
    <javadoc>
      <text>* <p>
 * Changes the sign of every element in the matrix.<br>
 * <br>
 * a<sub>ij</sub> = -a<sub>ij</sub>
 * </p></text>
      <param>a A matrix. Modified.</param>
    </javadoc>
    <method type="void" name="changeSign" startLine="1762" endLine="1768">
      <declaration type="int" name="size" />
      <scope startLine="1765" endLine="1767" />
    </method>
    <javadoc>
      <text>* <p>
 * Sets every element in the matrix to the specified value.<br>
 * <br>
 * a<sub>ij</sub> = value
 * <p></text>
      <param>a A matrix whose elements are about to be set. Modified.</param>
      <param>value The value each element will have.</param>
    </javadoc>
    <method type="void" name="fill" startLine="1781" endLine="1787">
      <declaration type="int" name="size" />
      <scope startLine="1784" endLine="1786" />
    </method>
    <javadoc>
      <text>* <p>
 * Puts the augmented system matrix into reduced row echelon form (RREF).  A matrix is said to be in
 * RREF is the following conditions are true:
 * </p>
 * <ol>
 * <li>If a row has non-zero entries, then the first non-zero entry is 1.  This is known as the leading one.</li>
 * <li>If a column contains a leading one then all other entries in that column are zero.</li>
 * <li>If a row contains a leading 1, then each row above contains a leading 1 further to the left.</li>
 * </ol>
 * <p>
 * [1] Page 19 in, Otter Bretscherm "Linear Algebra with Applications" Prentice-Hall Inc, 1997
 * </p></text>
      <param>A Input matrix.  Unmodified.</param>
      <param>numUnknowns Number of unknowns/columns that are reduced. Set to -1 to default to
 * Math.min(A.numRows,A.numCols), which works for most systems.</param>
      <param>reduced Storage for reduced echelon matrix. If null then a new matrix is returned. Modified.</param>
      <return>Reduced echelon form of A</return>
    </javadoc>
    <method type="DenseMatrix64F" name="rref" startLine="1811" endLine="1827">
      <scope startLine="1812" endLine="1814" />
      <declaration type="ReducedRowEchelonForm<DenseMatrix64F>" name="alg" />
    </method>
  </class>
</source>
