<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.ops">
  <import name="java.io.BufferedReader" />
  <import name="java.io.IOException" />
  <import name="java.io.InputStream" />
  <import name="java.io.InputStreamReader" />
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <class name="ReadCsv" startLine="28">
    <javadoc>
      <text>* <p>
 * Base class for reading CSV formatted files.  CSV stands for column-space-value where text strings are separated
 * by a space character.  The values are typically stored in a human readable format.  The encoded text for a single
 * variable is referred to as a word.
 * </p>
 * <p>
 * Comments are allowed and identified by starting a line with the comment character.  The comment character is user
 * configurable.  By default there is no comment character.
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="boolean" name="hasComment" />
    <declaration type="char" name="comment" />
    <declaration type="BufferedReader" name="in" />
    <declaration type="int" name="lineNumber" />
    <javadoc>
      <text>* Constructor for ReadCsv</text>
      <param>in Where the input comes from.</param>
    </javadoc>
    <method type="constructor" name="ReadCsv" startLine="59" endLine="61" />
    <javadoc>
      <text>* Sets the comment character.  All lines that start with this character will be ignored.</text>
      <param>comment The new comment character.</param>
    </javadoc>
    <method type="void" name="setComment" startLine="68" endLine="71" />
    <javadoc>
      <text>* Returns how many lines have been read.</text>
      <return>Line number</return>
    </javadoc>
    <method type="int" name="getLineNumber" startLine="78" endLine="80" />
    <javadoc>
      <text>* Returns the reader that it is using internally.</text>
      <return>The reader.</return>
    </javadoc>
    <method type="BufferedReader" name="getReader" startLine="86" endLine="88" />
    <javadoc>
      <text>* Finds the next valid line of words in the stream and extracts them.</text>
      <return>List of valid words on the line.  null if the end of the file has been reached.</return>
      <throws>java.io.IOException</throws>
    </javadoc>
    <method type="List<String>" name="extractWords" startLine="97" endLine="114">
      <scope startLine="98" endLine="113">
        <declaration type="String" name="line" />
        <scope startLine="101" endLine="103" />
        <scope startLine="106" endLine="109" />
        <comment>skip comment lines</comment>
        <comment>extract the words, which are the variables encoded</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Extracts the words from a string.  Words are seperated by a space character.</text>
      <param>line The line that is being parsed.</param>
      <return>A list of words contained on the line.</return>
    </javadoc>
    <method type="List<String>" name="parseWords" startLine="122" endLine="148">
      <declaration type="List<String>" name="words" />
      <declaration type="boolean" name="insideWord" />
      <declaration type="int" name="last" />
      <scope startLine="126" endLine="141">
        <declaration type="char" name="c" />
        <scope startLine="129" endLine="135">
          <scope startLine="131" endLine="134" />
        </scope>
        <scope startLine="135" endLine="140">
          <scope startLine="136" endLine="139" />
        </scope>
        <comment>see if its at the end of a word</comment>
      </scope>
      <scope startLine="144" endLine="146" />
      <comment>if the line ended add the final word</comment>
    </method>
    <javadoc>
      <text>* Checks to see if 'c' is a space character or not.</text>
      <param>c The character being tested.</param>
      <return>if it is a space character or not.</return>
    </javadoc>
    <method type="boolean" name="isSpace" startLine="156" endLine="158" />
    <comment>if there is a comment character</comment>
    <comment>what the comment character is</comment>
    <comment>reader for the input stream</comment>
    <comment>number of lines that have been read</comment>
  </class>
</source>
