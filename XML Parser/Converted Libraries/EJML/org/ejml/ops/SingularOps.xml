<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.ops">
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.factory.SingularValueDecomposition" />
  <class name="SingularOps" startLine="25">
    <javadoc>
      <text>* Operations related to singular value decomposition.</text>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* <p>
 * Adjusts the matrices so that the singular values are in descending order.
 * </p>
 * <p>
 * In most implementations of SVD the singular values are automatically arranged in in descending
 * order.  In EJML this is not the case since it is often not needed and some computations can
 * be saved by not doing that.
 * </p></text>
      <param>U Matrix. Modified.</param>
      <param>tranU is U transposed or not.</param>
      <param>W Diagonal matrix with singular values. Modified.</param>
      <param>V Matrix. Modified.</param>
      <param>tranV is V transposed or not.</param>
    </javadoc>
    <method type="void" name="descendingOrder" startLine="53" endLine="93">
      <declaration type="int" name="numSingular" />
      <scope startLine="58" endLine="92">
        <declaration type="double" name="bigValue" />
        <declaration type="int" name="bigIndex" />
        <scope startLine="63" endLine="70">
          <declaration type="double" name="v" />
          <scope startLine="66" endLine="69" />
        </scope>
        <scope startLine="76" endLine="79" />
        <declaration type="double" name="tmp" />
        <scope startLine="85" endLine="87" />
        <scope startLine="89" endLine="91" />
        <comment>find the smallest singular value in the submatrix</comment>
        <comment>only swap if the current index is not the smallest</comment>
        <comment>there is at least one uncountable singular value.  just stop here</comment>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Similar to {@link #descendingOrder(org.ejml.data.DenseMatrix64F,boolean,org.ejml.data.DenseMatrix64F,org.ejml.data.DenseMatrix64F,boolean)}but takes in an array of singular values instead.
 * </p></text>
      <param>U Matrix. Modified.</param>
      <param>tranU is U transposed or not.</param>
      <param>singularValues Array of singular values. Modified.</param>
      <param>numSingularValues Number of elements in singularValues array</param>
      <param>V Matrix. Modified.</param>
      <param>tranV is V transposed or not.</param>
    </javadoc>
    <method type="void" name="descendingOrder" startLine="112" endLine="150">
      <scope startLine="115" endLine="149">
        <declaration type="double" name="bigValue" />
        <declaration type="int" name="bigIndex" />
        <scope startLine="120" endLine="127">
          <declaration type="double" name="v" />
          <scope startLine="123" endLine="126" />
        </scope>
        <scope startLine="133" endLine="136" />
        <declaration type="double" name="tmp" />
        <scope startLine="142" endLine="144" />
        <scope startLine="146" endLine="148" />
        <comment>find the smallest singular value in the submatrix</comment>
        <comment>only swap if the current index is not the smallest</comment>
        <comment>there is at least one uncountable singular value.  just stop here</comment>
      </scope>
      <comment>checkSvdMatrixSize(U, tranU, W, V, tranV);</comment>
    </method>
    <javadoc>
      <text>* Checks to see if all the provided matrices are the expected size for an SVD.  If an error is encountered
 * then an exception is thrown.  This automatically handles compact and non-compact formats</text>
    </javadoc>
    <method type="void" name="checkSvdMatrixSize" startLine="156" endLine="184">
      <declaration type="int" name="numSingular" />
      <declaration type="boolean" name="compact" />
      <scope startLine="160" endLine="174">
        <scope startLine="161" endLine="166" />
        <scope startLine="168" endLine="173" />
      </scope>
      <scope startLine="174" endLine="183" />
    </method>
    <method type="void" name="swapRowOrCol" startLine="186" endLine="203">
      <declaration type="double" name="tmp" />
      <scope startLine="188" endLine="195">
        <scope startLine="190" endLine="194" />
        <comment>swap the rows</comment>
      </scope>
      <scope startLine="195" endLine="202">
        <scope startLine="197" endLine="201" />
        <comment>swap the columns</comment>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Returns the null-space from the singular value decomposition. The null space is a set of non-zero vectors that
 * when multiplied by the original matrix return zero.
 * </p>
 * <p>
 * The null space is found by extracting the columns in V that are associated singular values less than
 * or equal to the threshold. In some situations a non-compact SVD is required.
 * </p></text>
      <param>svd A precomputed decomposition.  Not modified.</param>
      <param>nullSpace Storage for null space.  Will be reshaped as needed.  Modified.</param>
      <param>tol Threshold for selecting singular values.  Try UtilEjml.EPS.</param>
      <return>The null space.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="nullSpace" startLine="223" endLine="263">
      <declaration type="int" name="N" />
      <declaration type="double[]" name="s" />
      <declaration type="DenseMatrix64F" name="V" />
      <scope startLine="229" endLine="231" />
      <declaration type="int" name="numVectors" />
      <scope startLine="236" endLine="240">
        <scope startLine="237" endLine="239" />
      </scope>
      <scope startLine="243" endLine="245" />
      <scope startLine="245" endLine="247" />
      <declaration type="int" name="count" />
      <scope startLine="251" endLine="255">
        <scope startLine="252" endLine="254" />
      </scope>
      <scope startLine="256" endLine="258" />
      <comment>first determine the size of the null space</comment>
      <comment>declare output data</comment>
      <comment>now extract the vectors</comment>
    </method>
    <javadoc>
      <text>* <p>
 * The vector associated will the smallest singular value is returned as the null space
 * of the decomposed system.  A right null space is returned if 'isRight' is set to true,
 * and a left null space if false.
 * </p></text>
      <param>svd A precomputed decomposition.  Not modified.</param>
      <param>isRight true for right null space and false for left null space.  Right is more commonly used.</param>
      <param>nullVector Optional storage for a vector for the null space.  Modified.</param>
      <return>Vector in V associated with smallest singular value..</return>
    </javadoc>
    <method type="DenseMatrix64F" name="nullVector" startLine="280" endLine="329">
      <declaration type="int" name="N" />
      <declaration type="double[]" name="s" />
      <declaration type="DenseMatrix64F" name="A" />
      <scope startLine="286" endLine="294">
        <scope startLine="287" endLine="289" />
        <scope startLine="291" endLine="293" />
      </scope>
      <scope startLine="294" endLine="302">
        <scope startLine="295" endLine="297" />
        <scope startLine="299" endLine="301" />
      </scope>
      <declaration type="int" name="smallestIndex" />
      <scope startLine="310" endLine="320">
        <declaration type="double" name="smallestValue" />
        <scope startLine="314" endLine="319">
          <scope startLine="315" endLine="318" />
        </scope>
        <comment>find the smallest singular value</comment>
      </scope>
      <comment>extract the null space</comment>
    </method>
    <javadoc>
      <text>* Extracts the rank of a matrix using a preexisting decomposition.</text>
      <param>svd A precomputed decomposition.  Not modified.</param>
      <param>threshold Tolerance used to determine of a singular value is singular.</param>
      <return>The rank of the decomposed matrix.</return>
    </javadoc>
    <method type="int" name="rank" startLine="338" endLine="351">
      <declaration type="int" name="numRank" />
      <declaration type="double[]" name="w" />
      <declaration type="int" name="N" />
      <scope startLine="345" endLine="348" />
    </method>
    <javadoc>
      <text>* Extracts the nullity of a matrix using a preexisting decomposition.</text>
      <param>svd A precomputed decomposition.  Not modified.</param>
      <param>threshold Tolerance used to determine of a singular value is singular.</param>
      <return>The nullity of the decomposed matrix.</return>
    </javadoc>
    <method type="int" name="nullity" startLine="360" endLine="373">
      <declaration type="int" name="ret" />
      <declaration type="double[]" name="w" />
      <declaration type="int" name="N" />
      <declaration type="int" name="numCol" />
      <scope startLine="369" endLine="371" />
    </method>
    <comment>TODO the number of copies can probably be reduced here</comment>
  </class>
</source>
