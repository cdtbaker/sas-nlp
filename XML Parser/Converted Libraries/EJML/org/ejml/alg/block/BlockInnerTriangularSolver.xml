<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.block">
  <class name="BlockInnerTriangularSolver" startLine="21">
    <javadoc>
      <text>* <p>
 * Contains triangular solvers for inner blocks of a {@link org.ejml.data.BlockMatrix64F}.
 * </p>
 * <p>
 * Algorithm for lower triangular inverse:<br>
 * <pre>
 * for i=1:m
 * for j=1:i-1
 * val = 0
 * for k=j:i-1
 * val = val - L(i,k) * X(k,j)
 * end
 * x(i,j) = val / L(i,i)
 * end
 * x(i,i) = 1 / L(i,i)
 * end
 * </pre> 
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* <p>
 * Inverts a square lower triangular matrix:  L = L<sup>-1</sup>
 * </p></text>
      <param>L Lower triangular matrix being inverted. Not modified.</param>
      <oaran>K_inv Where the inverse is stored.  Can be the same as L.  Modified.</oaran>
      <param>m The number of rows and columns.</param>
      <param>offsetL which index does the L matrix start at.</param>
      <param>offsetL_inv which index does the L_inv matrix start at.</param>
    </javadoc>
    <method type="void" name="invertLower" startLine="64" endLine="76">
      <scope startLine="65" endLine="75">
        <declaration type="double" name="L_ii" />
        <scope startLine="67" endLine="73">
          <declaration type="double" name="val" />
          <scope startLine="69" endLine="71" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Inverts a square lower triangular matrix:  L = L<sup>-1</sup>
 * </p></text>
      <param>L Lower triangular matrix being inverted. Over written with inverted matrix.  Modified.</param>
      <param>m The number of rows and columns.</param>
      <param>offsetL which index does the L matrix start at.</param>
    </javadoc>
    <method type="void" name="invertLower" startLine="91" endLine="103">
      <scope startLine="92" endLine="102">
        <declaration type="double" name="L_ii" />
        <scope startLine="94" endLine="100">
          <declaration type="double" name="val" />
          <scope startLine="96" endLine="98" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Solves for non-singular lower triangular matrices using forward substitution.
 * <br>
 * B = L<sup>-1</sup>B<br>
 * <br>
 * where B is a (m by n) matrix, L is a lower triangular (m by m) matrix.
 * </p></text>
      <param>L An m by m non-singular lower triangular matrix. Not modified.</param>
      <param>b An m by n matrix. Modified.</param>
      <param>m size of the L matrix</param>
      <param>n number of columns in the B matrix.</param>
      <param>strideL number of elements that need to be added to go to the next row in L</param>
      <param>offsetL initial index in L where the matrix starts</param>
      <param>offsetB initial index in B where the matrix starts</param>
    </javadoc>
    <method type="void" name="solveL" startLine="125" endLine="135">
      <scope startLine="126" endLine="134">
        <scope startLine="127" endLine="133">
          <declaration type="double" name="sum" />
          <scope startLine="129" endLine="131" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Solves for non-singular transposed lower triangular matrices using backwards substitution:
 * <br>
 * B = L<sup>-T</sup>B<br>
 * <br>
 * where B is a (m by n) matrix, L is a lower triangular (m by m) matrix.
 * </p></text>
      <param>L An m by m non-singular lower triangular matrix. Not modified.</param>
      <param>b An m by n matrix. Modified.</param>
      <param>m size of the L matrix</param>
      <param>n number of columns in the B matrix.</param>
      <param>strideL number of elements that need to be added to go to the next row in L</param>
      <param>offsetL initial index in L where the matrix starts</param>
      <param>offsetB initial index in B where the matrix starts</param>
    </javadoc>
    <method type="void" name="solveTransL" startLine="157" endLine="167">
      <scope startLine="158" endLine="166">
        <scope startLine="159" endLine="165">
          <declaration type="double" name="sum" />
          <scope startLine="161" endLine="163" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Solves for non-singular lower triangular matrices using forward substitution.
 * <br>
 * B<sup>T</sup> = L<sup>-1</sup>B<sup>T</sup><br>
 * <br>
 * where B is a (n by m) matrix, L is a lower triangular (m by m) matrix.
 * </p></text>
      <param>L An m by m non-singular lower triangular matrix. Not modified.</param>
      <param>b An n by m matrix. Modified.</param>
      <param>m size of the L matrix</param>
      <param>n number of columns in the B matrix.</param>
      <param>offsetL initial index in L where the matrix starts</param>
      <param>offsetB initial index in B where the matrix starts</param>
    </javadoc>
    <method type="void" name="solveLTransB" startLine="188" endLine="211">
      <scope startLine="198" endLine="210">
        <scope startLine="199" endLine="209">
          <declaration type="double" name="sum" />
          <declaration type="int" name="l" />
          <declaration type="int" name="bb" />
          <declaration type="int" name="endL" />
          <scope startLine="204" endLine="207" />
        </scope>
        <comment>for( int k=0; k<i; k++ ) {</comment>
      </scope>
      <comment>for( int j = 0; j < n; j++ ) {</comment>
      <comment>for( int i = 0; i < m; i++ ) {</comment>
      <comment>double sum = b[offsetB + j*m+i];</comment>
      <comment>for( int k=0; k<i; k++ ) {</comment>
      <comment>sum -= L[offsetL + i*m+k]* b[offsetB + j*m+k];</comment>
      <comment>}</comment>
      <comment>b[offsetB + j*m+i] = sum / L[offsetL + i*m+i];</comment>
      <comment>}</comment>
      <comment>}</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Solves for non-singular upper triangular matrices using backwards substitution.
 * <br>
 * B = U<sup>-1</sup>B<br>
 * <br>
 * where B (m by n) is a matrix, U is a (m by m ) upper triangular matrix.<br>
 * </p></text>
      <param>U An m by m non-singular upper triangular matrix. Not modified.</param>
      <param>b An m by n matrix. Modified.</param>
      <param>m size of the L matrix</param>
      <paramUn>number of columns in the B matrix.</paramUn>
      <param>offsetU initial index in L where the matrix starts</param>
      <param>offsetB initial index in B where the matrix starts</param>
    </javadoc>
    <method type="void" name="solveU" startLine="232" endLine="242">
      <scope startLine="233" endLine="241">
        <scope startLine="234" endLine="240">
          <declaration type="double" name="sum" />
          <scope startLine="236" endLine="238" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Solves for non-singular upper triangular matrices using forward substitution.
 * <br>
 * B = U<sup>-T</sup>B<br>
 * <br>
 * where B (m by n) is a matrix, U is a (m by m ) upper triangular matrix.<br>
 * </p></text>
      <param>U An m by m non-singular upper triangular matrix. Not modified.</param>
      <param>b An m by n matrix. Modified.</param>
      <param>m size of the L matrix</param>
      <paramUn>number of columns in the B matrix.</paramUn>
      <param>offsetU initial index in L where the matrix starts</param>
      <param>offsetB initial index in B where the matrix starts</param>
    </javadoc>
    <method type="void" name="solveTransU" startLine="263" endLine="273">
      <scope startLine="264" endLine="272">
        <scope startLine="265" endLine="271">
          <declaration type="double" name="sum" />
          <scope startLine="267" endLine="269" />
        </scope>
      </scope>
    </method>
  </class>
</source>
