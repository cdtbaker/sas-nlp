<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.block">
  <import name="org.ejml.data.D1Submatrix64F" />
  <import name="static org.ejml.alg.block.BlockInnerMultiplication.blockMultMinus" />
  <class name="BlockTriangularSolver" startLine="26">
    <javadoc>
      <text>* <p>
 * Contains triangular solvers for {@link org.ejml.data.BlockMatrix64F} block aligned sub-matrices.
 * </p>
 * <p>
 * For a more detailed description of a similar algorithm see:
 * Page 30 in "Fundamentals of Matrix Computations" 2nd Ed. by David S. Watkins
 * or any description of a block triangular solver in any other computational linear algebra book.
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* Inverts an upper or lower triangular block submatrix.</text>
      <param>blockLength</param>
      <param>upper Is it upper or lower triangular.</param>
      <param>T Triangular matrix that is to be inverted.  Must be block aligned.  Not Modified.</param>
      <param>T_inv Where the inverse is stored.  This can be the same as T.  Modified.</param>
      <param>temp Work space variable that is size blockLength*blockLength.</param>
    </javadoc>
    <method type="void" name="invert" startLine="55" endLine="100">
      <declaration type="int" name="M" />
      <declaration type="double[]" name="dataT" />
      <declaration type="double[]" name="dataX" />
      <declaration type="int" name="offsetT" />
      <scope startLine="72" endLine="99">
        <declaration type="int" name="heightT" />
        <declaration type="int" name="indexII" />
        <scope startLine="77" endLine="97">
          <declaration type="int" name="widthX" />
          <scope startLine="80" endLine="82" />
          <scope startLine="84" endLine="91">
            <declaration type="int" name="widthT" />
            <declaration type="int" name="indexL" />
            <declaration type="int" name="indexX" />
          </scope>
          <declaration type="int" name="indexX" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Inverts an upper or lower triangular block submatrix.</text>
      <param>blockLength</param>
      <param>upper Is it upper or lower triangular.</param>
      <param>T Triangular matrix that is to be inverted.  Overwritten with solution.  Modified.</param>
      <param>temp Work space variable that is size blockLength*blockLength.</param>
    </javadoc>
    <method type="void" name="invert" startLine="114" endLine="154">
      <declaration type="int" name="M" />
      <declaration type="double[]" name="dataT" />
      <declaration type="int" name="offsetT" />
      <scope startLine="126" endLine="153">
        <declaration type="int" name="heightT" />
        <declaration type="int" name="indexII" />
        <scope startLine="131" endLine="151">
          <declaration type="int" name="widthX" />
          <scope startLine="134" endLine="136" />
          <scope startLine="138" endLine="145">
            <declaration type="int" name="widthT" />
            <declaration type="int" name="indexL" />
            <declaration type="int" name="indexX" />
          </scope>
          <declaration type="int" name="indexX" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Performs an in-place solve operation on the provided block aligned sub-matrices.<br>
 * <br>
 * B = T<sup>-1</sup> B<br>
 * <br>
 * where T is a triangular matrix. T or B can be transposed.  T is a square matrix of arbitrary
 * size and B has the same number of rows as T and an arbitrary number of columns.
 * </p></text>
      <param>blockLength Size of the inner blocks.</param>
      <param>upper If T is upper or lower triangular.</param>
      <param>T An upper or lower triangular matrix. Not modified.</param>
      <param>B A matrix whose height is the same as T's width. Solution is written here. Modified.</param>
    </javadoc>
    <method type="void" name="solve" startLine="176" endLine="183">
      <scope startLine="178" endLine="180" />
      <scope startLine="180" endLine="182" />
    </method>
    <javadoc>
      <text>* <p>
 * Performs an in-place solve operation where T is contained in a single block.<br>
 * <br>
 * B = T<sup>-1</sup> B<br>
 * <br>
 * where T is a triangular matrix contained in an inner block. T or B can be transposed.  T must be a single complete inner block
 * and B is either a column block vector or row block vector.
 * </p></text>
      <param>blockLength Size of the inner blocks in the block matrix.</param>
      <param>upper If T is upper or lower triangular.</param>
      <param>T An upper or lower triangular matrix that is contained in an inner block. Not modified.</param>
      <param>B A block aligned row or column submatrix. Modified.</param>
      <param>transT If T is transposed or not.</param>
      <param>transB If B is transposed or not.</param>
    </javadoc>
    <method type="void" name="solveBlock" startLine="207" endLine="278">
      <declaration type="int" name="Trows" />
      <declaration type="int" name="blockT_rows" />
      <declaration type="int" name="blockT_cols" />
      <declaration type="int" name="offsetT" />
      <declaration type="double[]" name="dataT" />
      <declaration type="double[]" name="dataB" />
      <scope startLine="220" endLine="240">
        <scope startLine="221" endLine="227">
          <scope startLine="222" endLine="224" />
          <scope startLine="224" endLine="226" />
        </scope>
        <scope startLine="227" endLine="239">
          <scope startLine="228" endLine="230" />
          <scope startLine="230" endLine="238">
            <scope startLine="231" endLine="237">
              <declaration type="int" name="N" />
              <declaration type="int" name="offsetB" />
            </scope>
          </scope>
        </scope>
      </scope>
      <scope startLine="240" endLine="277">
        <scope startLine="244" endLine="260">
          <scope startLine="245" endLine="252">
            <scope startLine="246" endLine="251">
              <declaration type="int" name="offsetB" />
              <declaration type="int" name="N" />
            </scope>
          </scope>
          <scope startLine="252" endLine="259">
            <scope startLine="253" endLine="258">
              <declaration type="int" name="offsetB" />
              <declaration type="int" name="N" />
            </scope>
          </scope>
        </scope>
        <scope startLine="260" endLine="276">
          <scope startLine="261" endLine="268">
            <scope startLine="262" endLine="267">
              <declaration type="int" name="offsetB" />
              <declaration type="int" name="N" />
            </scope>
          </scope>
          <scope startLine="268" endLine="275">
            <scope startLine="269" endLine="274">
              <declaration type="int" name="offsetB" />
              <declaration type="int" name="N" />
            </scope>
          </scope>
        </scope>
      </scope>
      <comment>number of rows in a block.  The submatrix can be smaller than a block</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Solves lower triangular systems:<br>
 * <br>
 * B = L<sup>-1</sup> B<br>
 * <br>
 * </p>
 * <p> Reverse or forward substitution is used depending upon L being transposed or not. </p></text>
      <param>blockLength</param>
      <param>L Lower triangular with dimensions m by m.  Not modified.</param>
      <param>B A matrix with dimensions m by n.  Solution is written into here. Modified.</param>
      <param>transL Is the triangular matrix transposed?</param>
    </javadoc>
    <method type="void" name="solveL" startLine="298" endLine="394">
      <declaration type="D1Submatrix64F" name="Y" />
      <declaration type="D1Submatrix64F" name="Linner" />
      <declaration type="D1Submatrix64F" name="Binner" />
      <declaration type="int" name="lengthL" />
      <declaration type="int" name="startI" />
      <scope startLine="309" endLine="315" />
      <scope startLine="315" endLine="318" />
      <scope startLine="320" endLine="393">
        <scope startLine="321" endLine="323" />
        <scope startLine="323" endLine="325" />
        <declaration type="int" name="widthT" />
        <declaration type="boolean" name="updateY" />
        <scope startLine="341" endLine="343" />
        <scope startLine="343" endLine="345" />
        <scope startLine="346" endLine="392">
          <scope startLine="350" endLine="361" />
          <scope startLine="361" endLine="372" />
          <scope startLine="375" endLine="391">
            <scope startLine="383" endLine="386" />
            <scope startLine="386" endLine="390" />
          </scope>
        </scope>
        <comment>width and height of the inner T(i,i) block</comment>
        <comment>solve the top row block</comment>
        <comment>B(i,:) = T(i,i)^-1 Y(i,:)</comment>
        <comment>Y[i,:] = Y[i,:] - sum j=1:i-1 { T[i,j] B[j,i] }</comment>
        <comment>where i is the next block down</comment>
        <comment>The summation is a block inner product</comment>
        <comment>Tinner.col1 = Tinner.col1;</comment>
        <comment>Binner.row0 = Binner.row0;</comment>
        <comment>Tinner.col1 = Tinner.col1;</comment>
        <comment>Binner.row1 = Binner.row1;</comment>
        <comment>step through each block column</comment>
        <comment>Y = Y - T^T * B</comment>
        <comment>Y = Y - T * B</comment>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Solves upper triangular systems:<br>
 * <br>
 * B = R<sup>-1</sup> B<br>
 * <br>
 * </p>
 * <p>Only the first B.numRows rows in R will be processed.  Lower triangular elements are ignored.<p>
 * <p> Reverse or forward substitution is used depending upon L being transposed or not. </p></text>
      <param>blockLength</param>
      <param>R Upper triangular with dimensions m by m.  Not modified.</param>
      <param>B A matrix with dimensions m by n.  Solution is written into here. Modified.</param>
      <param>transR Is the triangular matrix transposed?</param>
    </javadoc>
    <method type="void" name="solveR" startLine="416" endLine="515">
      <declaration type="int" name="lengthR" />
      <scope startLine="419" endLine="421" />
      <scope startLine="421" endLine="423" />
      <declaration type="D1Submatrix64F" name="Y" />
      <declaration type="D1Submatrix64F" name="Rinner" />
      <declaration type="D1Submatrix64F" name="Binner" />
      <declaration type="int" name="startI" />
      <scope startLine="432" endLine="435" />
      <scope startLine="435" endLine="441" />
      <scope startLine="443" endLine="514">
        <scope startLine="444" endLine="446" />
        <scope startLine="446" endLine="448" />
        <declaration type="int" name="widthT" />
        <declaration type="boolean" name="updateY" />
        <scope startLine="464" endLine="466" />
        <scope startLine="466" endLine="468" />
        <scope startLine="469" endLine="513">
          <scope startLine="473" endLine="484" />
          <scope startLine="484" endLine="494" />
          <scope startLine="497" endLine="512">
            <scope startLine="505" endLine="508" />
            <scope startLine="508" endLine="511" />
          </scope>
        </scope>
        <comment>width and height of the inner T(i,i) block</comment>
        <comment>solve the top row block</comment>
        <comment>B(i,:) = T(i,i)^-1 Y(i,:)</comment>
        <comment>Y[i,:] = Y[i,:] - sum j=1:i-1 { T[i,j] B[j,i] }</comment>
        <comment>where i is the next block down</comment>
        <comment>The summation is a block inner product</comment>
        <comment>Rinner.row1 = Rinner.row1;</comment>
        <comment>Binner.row1 = Binner.row1;</comment>
        <comment>Binner.row0 = Binner.row0;</comment>
        <comment>step through each block column</comment>
        <comment>Y = Y - T^T * B</comment>
        <comment>Y = Y - T * B</comment>
      </scope>
    </method>
  </class>
</source>
