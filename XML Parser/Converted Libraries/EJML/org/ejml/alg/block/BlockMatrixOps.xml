<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.block">
  <import name="org.ejml.data.BlockMatrix64F" />
  <import name="org.ejml.data.D1Submatrix64F" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.ops.CommonOps" />
  <import name="org.ejml.ops.MatrixFeatures" />
  <import name="org.ejml.ops.RandomMatrices" />
  <import name="org.ejml.simple.SimpleMatrix" />
  <import name="java.util.Random" />
  <class name="BlockMatrixOps" startLine="32">
    <javadoc>
      <text>* Various operations on {@link BlockMatrix64F}.</text>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* Converts a row major matrix into a row major block matrix.</text>
      <param>src Original DenseMatrix64F.  Not modified.</param>
      <param>dst Equivalent BlockMatrix64F. Modified.</param>
    </javadoc>
    <method type="void" name="convert" startLine="46" endLine="66">
      <scope startLine="50" endLine="65">
        <declaration type="int" name="blockHeight" />
        <scope startLine="53" endLine="64">
          <declaration type="int" name="blockWidth" />
          <declaration type="int" name="indexDst" />
          <declaration type="int" name="indexSrcRow" />
          <scope startLine="59" endLine="63" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Converts matrix data stored is a row major format into a block row major format in place.
 * </p></text>
      <param>numRows number of rows in the matrix.</param>
      <param>numCols number of columns in the matrix.</param>
      <param>blockLength Block size in the converted matrix.</param>
      <param>data Matrix data in a row-major format. Modified.</param>
      <param>tmp Temporary data structure that is to be the size of a block row.</param>
    </javadoc>
    <method type="void" name="convertRowToBlock" startLine="81" endLine="106">
      <declaration type="int" name="minLength" />
      <scope startLine="83" endLine="85" />
      <scope startLine="87" endLine="105">
        <declaration type="int" name="blockHeight" />
        <scope startLine="93" endLine="104">
          <declaration type="int" name="blockWidth" />
          <declaration type="int" name="indexDst" />
          <declaration type="int" name="indexSrcRow" />
          <scope startLine="99" endLine="103" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Converts a row major block matrix into a row major matrix.</text>
      <param>src Original BlockMatrix64F..  Not modified.</param>
      <param>dst Equivalent DenseMatrix64F.  Modified.</param>
    </javadoc>
    <method type="DenseMatrix64F" name="convert" startLine="115" endLine="141">
      <scope startLine="116" endLine="119" />
      <scope startLine="119" endLine="121" />
      <scope startLine="123" endLine="138">
        <declaration type="int" name="blockHeight" />
        <scope startLine="126" endLine="137">
          <declaration type="int" name="blockWidth" />
          <declaration type="int" name="indexSrc" />
          <declaration type="int" name="indexDstRow" />
          <scope startLine="132" endLine="136" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Converts matrix data stored is a block row major format into a row major format in place.
 * </p></text>
      <param>numRows number of rows in the matrix.</param>
      <param>numCols number of columns in the matrix.</param>
      <param>blockLength Block size in the converted matrix.</param>
      <param>data Matrix data in a block row-major format. Modified.</param>
      <param>tmp Temporary data structure that is to be the size of a block row.</param>
    </javadoc>
    <method type="void" name="convertBlockToRow" startLine="156" endLine="180">
      <declaration type="int" name="minLength" />
      <scope startLine="158" endLine="160" />
      <scope startLine="162" endLine="179">
        <declaration type="int" name="blockHeight" />
        <scope startLine="167" endLine="178">
          <declaration type="int" name="blockWidth" />
          <declaration type="int" name="indexSrc" />
          <declaration type="int" name="indexDstRow" />
          <scope startLine="173" endLine="177" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Converts the transpose of a row major matrix into a row major block matrix.</text>
      <param>src Original DenseMatrix64F.  Not modified.</param>
      <param>dst Equivalent BlockMatrix64F. Modified.</param>
    </javadoc>
    <method type="void" name="convertTranSrc" startLine="189" endLine="211">
      <scope startLine="193" endLine="210">
        <declaration type="int" name="blockHeight" />
        <scope startLine="196" endLine="209">
          <declaration type="int" name="blockWidth" />
          <declaration type="int" name="indexDst" />
          <declaration type="int" name="indexSrc" />
          <scope startLine="202" endLine="208">
            <declaration type="int" name="rowSrc" />
            <declaration type="int" name="rowDst" />
            <scope startLine="205" endLine="207" />
          </scope>
        </scope>
      </scope>
    </method>
    <method type="void" name="mult" startLine="216" endLine="233">
      <declaration type="int" name="blockLength" />
      <declaration type="D1Submatrix64F" name="Asub" />
      <declaration type="D1Submatrix64F" name="Bsub" />
      <declaration type="D1Submatrix64F" name="Csub" />
    </method>
    <method type="void" name="multTransA" startLine="236" endLine="253">
      <declaration type="int" name="blockLength" />
      <declaration type="D1Submatrix64F" name="Asub" />
      <declaration type="D1Submatrix64F" name="Bsub" />
      <declaration type="D1Submatrix64F" name="Csub" />
    </method>
    <method type="void" name="multTransB" startLine="256" endLine="273">
      <declaration type="int" name="blockLength" />
      <declaration type="D1Submatrix64F" name="Asub" />
      <declaration type="D1Submatrix64F" name="Bsub" />
      <declaration type="D1Submatrix64F" name="Csub" />
    </method>
    <javadoc>
      <text>* Transposes a block matrix.</text>
      <param>A Original matrix.  Not modified.</param>
      <param>A_tran Transposed matrix.  Modified.</param>
    </javadoc>
    <method type="BlockMatrix64F" name="transpose" startLine="282" endLine="307">
      <scope startLine="283" endLine="288" />
      <scope startLine="288" endLine="291" />
      <scope startLine="293" endLine="304">
        <declaration type="int" name="blockHeight" />
        <scope startLine="296" endLine="303">
          <declaration type="int" name="blockWidth" />
          <declaration type="int" name="indexA" />
          <declaration type="int" name="indexC" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Transposes an individual block inside a block matrix.</text>
    </javadoc>
    <method type="void" name="transposeBlock" startLine="315" endLine="324">
      <scope startLine="316" endLine="323">
        <declaration type="int" name="rowIndexC" />
        <declaration type="int" name="rowIndexA" />
        <declaration type="int" name="end" />
        <scope startLine="320" endLine="322" />
      </scope>
    </method>
    <method type="BlockMatrix64F" name="createRandom" startLine="328" endLine="334">
      <declaration type="BlockMatrix64F" name="ret" />
    </method>
    <method type="BlockMatrix64F" name="createRandom" startLine="339" endLine="345">
      <declaration type="BlockMatrix64F" name="ret" />
    </method>
    <method type="BlockMatrix64F" name="convert" startLine="348" endLine="352">
      <declaration type="BlockMatrix64F" name="ret" />
    </method>
    <method type="BlockMatrix64F" name="convert" startLine="354" endLine="358">
      <declaration type="BlockMatrix64F" name="ret" />
    </method>
    <method type="boolean" name="isEquals" startLine="361" endLine="366" />
    <method type="boolean" name="isEquals" startLine="369" endLine="374" />
    <javadoc>
      <text>* Sets either the upper or low triangle of a matrix to zero</text>
    </javadoc>
    <method type="void" name="zeroTriangle" startLine="380" endLine="433">
      <declaration type="int" name="blockLength" />
      <scope startLine="383" endLine="407">
        <scope startLine="384" endLine="406">
          <declaration type="int" name="h" />
          <scope startLine="387" endLine="405">
            <declaration type="int" name="w" />
            <declaration type="int" name="index" />
            <scope startLine="392" endLine="398">
              <scope startLine="393" endLine="397">
                <scope startLine="394" endLine="396" />
              </scope>
            </scope>
            <scope startLine="398" endLine="404">
              <scope startLine="399" endLine="403">
                <scope startLine="400" endLine="402" />
              </scope>
            </scope>
          </scope>
        </scope>
      </scope>
      <scope startLine="407" endLine="432">
        <scope startLine="408" endLine="431">
          <declaration type="int" name="h" />
          <scope startLine="411" endLine="430">
            <declaration type="int" name="w" />
            <declaration type="int" name="index" />
            <scope startLine="416" endLine="423">
              <scope startLine="417" endLine="422">
                <declaration type="int" name="z" />
                <scope startLine="419" endLine="421" />
              </scope>
            </scope>
            <scope startLine="423" endLine="429">
              <scope startLine="424" endLine="428">
                <scope startLine="425" endLine="427" />
              </scope>
            </scope>
          </scope>
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Copies either the upper or lower triangular portion of src into dst.  Dst can be smaller
 * than src.</text>
      <param>upper If the upper or lower triangle is copied.</param>
      <param>src The source matrix. Not modified.</param>
      <param>dst The destination matrix. Modified.</param>
    </javadoc>
    <method type="void" name="copyTriangle" startLine="444" endLine="509">
      <declaration type="int" name="blockLength" />
      <declaration type="int" name="numRows" />
      <declaration type="int" name="numCols" />
      <scope startLine="457" endLine="482">
        <scope startLine="458" endLine="481">
          <declaration type="int" name="heightSrc" />
          <declaration type="int" name="heightDst" />
          <scope startLine="462" endLine="480">
            <declaration type="int" name="widthSrc" />
            <declaration type="int" name="widthDst" />
            <declaration type="int" name="indexSrc" />
            <declaration type="int" name="indexDst" />
            <scope startLine="469" endLine="475">
              <scope startLine="470" endLine="474">
                <scope startLine="471" endLine="473" />
              </scope>
            </scope>
            <scope startLine="475" endLine="479">
              <scope startLine="476" endLine="478" />
            </scope>
          </scope>
        </scope>
      </scope>
      <scope startLine="482" endLine="508">
        <scope startLine="483" endLine="507">
          <declaration type="int" name="heightSrc" />
          <declaration type="int" name="heightDst" />
          <scope startLine="487" endLine="506">
            <declaration type="int" name="widthSrc" />
            <declaration type="int" name="widthDst" />
            <declaration type="int" name="indexSrc" />
            <declaration type="int" name="indexDst" />
            <scope startLine="494" endLine="501">
              <scope startLine="495" endLine="500">
                <declaration type="int" name="z" />
                <scope startLine="497" endLine="499" />
              </scope>
            </scope>
            <scope startLine="501" endLine="505">
              <scope startLine="502" endLine="504" />
            </scope>
          </scope>
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Sets every element in the matrix to the specified value.<br>
 * <br>
 * a<sub>ij</sub> = value
 * <p></text>
      <param>A A matrix whose elements are about to be set. Modified.</param>
      <param>value The value each element will have.</param>
    </javadoc>
    <method type="void" name="set" startLine="521" endLine="523" />
    <javadoc>
      <text>* <p>Sets the value of A to all zeros except along the diagonal.</p></text>
      <param>A Block matrix.</param>
    </javadoc>
    <method type="void" name="setIdentity" startLine="531" endLine="549">
      <declaration type="int" name="minLength" />
      <declaration type="int" name="blockLength" />
      <scope startLine="538" endLine="548">
        <declaration type="int" name="h" />
        <declaration type="int" name="w" />
        <declaration type="int" name="index" />
        <declaration type="int" name="m" />
        <scope startLine="545" endLine="547" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>Converts the block matrix into a SimpleMatrix.</p></text>
      <param>A Block matrix that is being converted.  Not modified.</param>
      <return>Equivalent SimpleMatrix.</return>
    </javadoc>
    <method type="SimpleMatrix" name="convertSimple" startLine="557" endLine="561">
      <declaration type="DenseMatrix64F" name="B" />
    </method>
    <javadoc>
      <text>* <p>
 * Returns a new matrix with ones along the diagonal and zeros everywhere else.
 * </p></text>
      <param>numRows Number of rows.</param>
      <param>numCols NUmber of columns.</param>
      <param>blockLength Block length.</param>
      <return>An identify matrix.</return>
    </javadoc>
    <method type="BlockMatrix64F" name="identity" startLine="573" endLine="591">
      <declaration type="BlockMatrix64F" name="A" />
      <declaration type="int" name="minLength" />
      <scope startLine="578" endLine="588">
        <declaration type="int" name="h" />
        <declaration type="int" name="w" />
        <declaration type="int" name="index" />
        <declaration type="int" name="m" />
        <scope startLine="585" endLine="587" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Checks to see if the two matrices have an identical shape an block size.
 * </p></text>
      <param>A Matrix.</param>
      <param>B Matrix.</param>
    </javadoc>
    <method type="void" name="checkIdenticalShape" startLine="601" endLine="608" />
    <javadoc>
      <text>* <p>
 * Extracts a matrix from src into dst.  The submatrix which is copied has its initial coordinate
 * at (0,0) and ends at (dst.numRows,dst.numCols). The end rows/columns must be aligned along blocks
 * or else it will silently screw things up.
 * </p></text>
      <param>src Matrix which a submatrix is being extracted from. Not modified.</param>
      <param>dst Where the submatrix is written to.  Its rows and columns be less than or equal to 'src'.  Modified.</param>
    </javadoc>
    <method type="void" name="extractAligned" startLine="620" endLine="649">
      <declaration type="int" name="blockLength" />
      <declaration type="int" name="numRows" />
      <declaration type="int" name="numCols" />
      <scope startLine="633" endLine="648">
        <declaration type="int" name="heightSrc" />
        <declaration type="int" name="heightDst" />
        <scope startLine="637" endLine="647">
          <declaration type="int" name="widthSrc" />
          <declaration type="int" name="widthDst" />
          <declaration type="int" name="indexSrc" />
          <declaration type="int" name="indexDst" />
          <scope startLine="644" endLine="646" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Checks to see if the submatrix has its boundaries along inner blocks.</text>
      <param>blockLength Size of an inner block.</param>
      <param>A Submatrix.</param>
      <return>If it is block aligned or not.</return>
    </javadoc>
    <method type="boolean" name="blockAligned" startLine="658" endLine="673">
      <scope startLine="664" endLine="666" />
      <scope startLine="668" endLine="670" />
    </method>
    <comment>This can be speed up by inlining the multBlock* calls, reducing number of multiplications</comment>
    <comment>and other stuff.  doesn't seem to have any speed advantage over mult_reorder()</comment>
  </class>
</source>
