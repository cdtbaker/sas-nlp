<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.block.linsol.qr">
  <import name="org.ejml.alg.block.BlockMatrixOps" />
  <import name="org.ejml.alg.block.BlockTriangularSolver" />
  <import name="org.ejml.alg.block.decomposition.qr.BlockMatrix64HouseholderQR" />
  <import name="org.ejml.data.BlockMatrix64F" />
  <import name="org.ejml.data.D1Submatrix64F" />
  <import name="org.ejml.factory.LinearSolver" />
  <import name="org.ejml.ops.SpecializedOps" />
  <class name="BlockQrHouseHolderSolver" startLine="30">
    <implements name="LinearSolver<BlockMatrix64F>" />
    <javadoc>
      <text>* <p>
 * A solver for {@link BlockMatrix64HouseholderQR}.  Systems are solved for using the standard
 * QR decomposition method, sketched below.
 * </p>
 * <p>
 * A = Q*R<br>
 * A*x = b<br>
 * Q*R*x = b <br>
 * R*x = y = Q<sup>T</sup>b<br>
 * x = R<sup>-1</sup>y<br>
 * <br>
 * Where A is the m by n matrix being decomposed. Q is an orthogonal matrix. R is upper triangular matrix.
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="BlockMatrix64HouseholderQR" name="decomp" />
    <declaration type="BlockMatrix64F" name="QR" />
    <method type="constructor" name="BlockQrHouseHolderSolver" startLine="57" endLine="59" />
    <javadoc>
      <text>* Computes the QR decomposition of A and store the results in A.</text>
      <param>A The A matrix in the linear equation. Modified. Reference saved.</param>
      <return>true if the decomposition was successful.</return>
    </javadoc>
    <method type="boolean" name="setA" startLine="68" endLine="79" />
    <javadoc>
      <text>* Computes the quality using diagonal elements the triangular R matrix in the QR decomposition.</text>
      <return>Solutions quality.</return>
    </javadoc>
    <method type="double" name="quality" startLine="87" endLine="89" />
    <method type="void" name="solve" startLine="92" endLine="120">
      <declaration type="int" name="M" />
      <comment>The system being solved for can be described as:</comment>
      <comment>Q*R*X = B</comment>
      <comment>First apply householder reflectors to B</comment>
      <comment>Y = Q^T*B</comment>
      <comment>Second solve for Y using the upper triangle matrix R and the just computed Y</comment>
      <comment>X = R^-1 * Y</comment>
      <comment>extract a block aligned matrix</comment>
    </method>
    <javadoc>
      <text>* Invert by solving for against an identity matrix.</text>
      <param>A_inv Where the inverted matrix saved. Modified.</param>
    </javadoc>
    <method type="void" name="invert" startLine="128" endLine="147">
      <declaration type="int" name="M" />
      <comment>Solve for A^-1</comment>
      <comment>Q*R*A^-1 = I</comment>
      <comment>Apply householder reflectors to the identity matrix</comment>
      <comment>y = Q^T*I = Q^T</comment>
      <comment>Solve using upper triangular R matrix</comment>
      <comment>R*A^-1 = y</comment>
      <comment>A^-1 = R^-1*y</comment>
    </method>
    <method type="boolean" name="modifiesA" startLine="150" endLine="152" />
    <method type="boolean" name="modifiesB" startLine="155" endLine="157" />
    <comment>QR decomposition algorithm</comment>
    <comment>the input matrix which has been decomposed</comment>
  </class>
</source>
