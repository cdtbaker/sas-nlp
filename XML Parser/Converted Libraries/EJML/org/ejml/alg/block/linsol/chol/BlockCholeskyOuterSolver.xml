<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.block.linsol.chol">
  <import name="org.ejml.alg.block.BlockMatrixOps" />
  <import name="org.ejml.alg.block.BlockTriangularSolver" />
  <import name="org.ejml.alg.block.decomposition.chol.BlockCholeskyOuterForm" />
  <import name="org.ejml.data.BlockMatrix64F" />
  <import name="org.ejml.data.D1Submatrix64F" />
  <import name="org.ejml.factory.LinearSolver" />
  <import name="org.ejml.ops.SpecializedOps" />
  <class name="BlockCholeskyOuterSolver" startLine="30">
    <implements name="LinearSolver<BlockMatrix64F>" />
    <javadoc>
      <text>* <p> Linear solver that uses a block cholesky decomposition. </p>
 * <p>
 * Solver works by using the standard Cholesky solving strategy:<br>
 * A=L*L<sup>T</sup> <br>
 * A*x=b<br>
 * L*L<sup>T</sup>*x = b <br>
 * L*y = b<br>
 * L<sup>T</sup>*x = y<br>
 * x = L<sup>-T</sup>y
 * </p>
 * <p>
 * It is also possible to use the upper triangular cholesky decomposition.
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="BlockCholeskyOuterForm" name="chol" />
    <declaration type="int" name="blockLength" />
    <declaration type="double" name="temp" />
    <javadoc>
      <text>* Decomposes and overwrites the input matrix.</text>
      <param>A Semi-Positive Definite (SPD) system matrix. Modified. Reference saved.</param>
      <return>If the matrix can be decomposed.  Will always return false of not SPD.</return>
    </javadoc>
    <method type="boolean" name="setA" startLine="67" endLine="75">
      <comment>Extract a lower triangular solution</comment>
    </method>
    <method type="double" name="quality" startLine="78" endLine="80" />
    <javadoc>
      <text>* If X == null then the solution is written into B.  Otherwise the solution is copied
 * from B into X.</text>
    </javadoc>
    <method type="void" name="solve" startLine="87" endLine="114">
      <declaration type="D1Submatrix64F" name="L" />
      <scope startLine="93" endLine="97" />
      <scope startLine="109" endLine="112">
        <comment>copy the solution from B into X</comment>
      </scope>
      <comment>L * L^T*X = B</comment>
      <comment>Solve for Y:  L*Y = B</comment>
      <comment>L^T * X = Y</comment>
    </method>
    <method type="void" name="invert" startLine="117" endLine="141">
      <declaration type="BlockMatrix64F" name="T" />
      <declaration type="D1Submatrix64F" name="L" />
      <declaration type="D1Submatrix64F" name="B" />
      <comment>zero the upper triangular portion of A_inv</comment>
      <comment>invert L from cholesky decomposition and write the solution into the lower</comment>
      <comment>triangular portion of A_inv</comment>
      <comment>B = inv(L)</comment>
      <comment>B = L^-T * B</comment>
      <comment>todo could speed up by taking advantage of B being lower triangular</comment>
      <comment>todo take advantage of symmetry</comment>
    </method>
    <method type="boolean" name="modifiesA" startLine="144" endLine="146" />
    <method type="boolean" name="modifiesB" startLine="149" endLine="151" />
    <comment>cholesky decomposition</comment>
    <comment>size of a block take from input matrix</comment>
    <comment>temporary data structure used in some calculation.</comment>
  </class>
</source>
