<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.fixed">
  <import name="org.ejml.data.FixedMatrix6_64F" />
  <import name="org.ejml.data.FixedMatrix6x6_64F" />
  <class name="FixedOps6" startLine="24">
    <javadoc>
      <text>* <p>Common matrix operations for fixed sized matrices which are 6 x 6 or 6 element vectors.</p>
 * <p>DO NOT MODIFY.  Automatically generated code created by GenerateFixedOps</p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* <p>Performs the following operation:<br>
 * <br>
 * c = a + b <br>
 * c<sub>ij</sub> = a<sub>ij</sub> + b<sub>ij</sub> <br>
 * </p>
 * <p>
 * Matrix C can be the same instance as Matrix A and/or B.
 * </p></text>
      <param>a A Matrix. Not modified.</param>
      <param>b A Matrix. Not modified.</param>
      <param>c A Matrix where the results are stored. Modified.</param>
    </javadoc>
    <method type="void" name="add" startLine="46" endLine="83" />
    <javadoc>
      <text>* <p>Performs the following operation:<br>
 * <br>
 * a = a + b <br>
 * a<sub>ij</sub> = a<sub>ij</sub> + b<sub>ij</sub> <br>
 * </p></text>
      <param>a A Matrix. Modified.</param>
      <param>b A Matrix. Not modified.</param>
    </javadoc>
    <method type="void" name="addEquals" startLine="95" endLine="132" />
    <javadoc>
      <text>* Performs an in-place transpose.  This algorithm is only efficient for square
 * matrices.</text>
      <param>m The matrix that is to be transposed. Modified.</param>
    </javadoc>
    <method type="void" name="transpose" startLine="140" endLine="157">
      <declaration type="double" name="tmp" />
    </method>
    <javadoc>
      <text>* <p>
 * Transposes matrix 'a' and stores the results in 'b':<br>
 * <br>
 * b<sub>ij</sub> = a<sub>ji</sub><br>
 * where 'b' is the transpose of 'a'.
 * </p></text>
      <param>input The original matrix.  Not modified.</param>
      <param>output Where the transpose is stored. If null a new matrix is created. Modified.</param>
      <return>The transposed matrix.</return>
    </javadoc>
    <method type="FixedMatrix6x6_64F" name="transpose" startLine="171" endLine="213" />
    <javadoc>
      <text>* <p>Performs the following operation:<br>
 * <br>
 * c = a * b <br>
 * <br>
 * c<sub>ij</sub> = &sum;<sub>k=1:n</sub> { a<sub>ik</sub> * b<sub>kj</sub>}
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="mult" startLine="227" endLine="264" />
    <javadoc>
      <text>* <p>Performs the following operation:<br>
 * <br>
 * c = a<sup>T</sup> * b <br>
 * <br>
 * c<sub>ij</sub> = &sum;<sub>k=1:n</sub> { a<sub>ki</sub> * b<sub>kj</sub>}
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multTransA" startLine="278" endLine="315" />
    <javadoc>
      <text>* <p>
 * Performs the following operation:<br>
 * <br>
 * c = a<sup>T</sup> * b<sup>T</sup><br>
 * c<sub>ij</sub> = &sum;<sub>k=1:n</sub> { a<sub>ki</sub> * b<sub>jk</sub>}
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multTransAB" startLine="329" endLine="366" />
    <javadoc>
      <text>* <p>
 * Performs the following operation:<br>
 * <br>
 * c = a * b<sup>T</sup> <br>
 * c<sub>ij</sub> = &sum;<sub>k=1:n</sub> { a<sub>ik</sub> * b<sub>jk</sub>}
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multTransB" startLine="380" endLine="417" />
    <javadoc>
      <text>* <p>Performs matrix to vector multiplication:<br>
 * <br>
 * c = a * b <br>
 * <br>
 * c<sub>i</sub> = &sum;<sub>k=1:n</sub> { a<sub>ik</sub> * b<sub>k</sub>}
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right vector in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="mult" startLine="431" endLine="438" />
    <javadoc>
      <text>* <p>Performs vector to matrix multiplication:<br>
 * <br>
 * c = a * b <br>
 * <br>
 * c<sub>j</sub> = &sum;<sub>k=1:n</sub> { b<sub>k</sub> * a<sub>kj</sub> }
 * </p></text>
      <param>a The left vector in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="mult" startLine="452" endLine="459" />
    <javadoc>
      <text>* <p>Performs the vector dot product:<br>
 * <br>
 * c = a * b <br>
 * <br>
 * c> = &sum;<sub>k=1:n</sub> { b<sub>k</sub> * a<sub>k</sub> }
 * </p></text>
      <param>a The left vector in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <return>The dot product</return>
    </javadoc>
    <method type="double" name="dot" startLine="473" endLine="475" />
    <javadoc>
      <text>* Sets all the diagonal elements equal to one and everything else equal to zero.
 * If this is a square matrix then it will be an identity matrix.</text>
      <param>a A matrix.</param>
    </javadoc>
    <method type="void" name="setIdentity" startLine="483" endLine="490" />
    <javadoc>
      <text>* <p>
 * This computes the trace of the matrix:<br>
 * <br>
 * trace = &sum;<sub>i=1:n</sub> { a<sub>ii</sub> }
 * </p>
 * <p>
 * The trace is only defined for square matrices.
 * </p></text>
      <param>a A square matrix.  Not modified.</param>
    </javadoc>
    <method type="double" name="trace" startLine="504" endLine="506" />
    <javadoc>
      <text>* <p>
 * Extracts all diagonal elements from 'input' and places them inside the 'out' vector. Elements
 * are in sequential order.
 * </p></text>
      <param>input Matrix.  Not modified.</param>
      <param>out Vector containing diagonal elements.  Modified.</param>
    </javadoc>
    <method type="void" name="diag" startLine="518" endLine="525" />
    <javadoc>
      <text>* <p>
 * Returns the value of the element in the matrix that has the largest value.<br>
 * <br>
 * Max{ a<sub>ij</sub> } for all i and j<br>
 * </p></text>
      <param>a A matrix. Not modified.</param>
      <return>The max element value of the matrix.</return>
    </javadoc>
    <method type="double" name="elementMax" startLine="537" endLine="576">
      <declaration type="double" name="max" />
    </method>
    <javadoc>
      <text>* <p>
 * Returns the absolute value of the element in the matrix that has the largest absolute value.<br>
 * <br>
 * Max{ |a<sub>ij</sub>| } for all i and j<br>
 * </p></text>
      <param>a A matrix. Not modified.</param>
      <return>The max abs element value of the matrix.</return>
    </javadoc>
    <method type="double" name="elementMaxAbs" startLine="588" endLine="627">
      <declaration type="double" name="max" />
    </method>
    <javadoc>
      <text>* <p>
 * Returns the value of the element in the matrix that has the minimum value.<br>
 * <br>
 * Min{ a<sub>ij</sub> } for all i and j<br>
 * </p></text>
      <param>a A matrix. Not modified.</param>
      <return>The value of element in the matrix with the minimum value.</return>
    </javadoc>
    <method type="double" name="elementMin" startLine="639" endLine="678">
      <declaration type="double" name="min" />
    </method>
    <javadoc>
      <text>* <p>
 * Returns the absolute value of the element in the matrix that has the smallest absolute value.<br>
 * <br>
 * Min{ |a<sub>ij</sub>| } for all i and j<br>
 * </p></text>
      <param>a A matrix. Not modified.</param>
      <return>The max element value of the matrix.</return>
    </javadoc>
    <method type="double" name="elementMinAbs" startLine="690" endLine="729">
      <declaration type="double" name="min" />
    </method>
    <javadoc>
      <text>* <p>Performs the an element by element multiplication operation:<br>
 * <br>
 * a<sub>ij</sub> = a<sub>ij</sub> * b<sub>ij</sub> <br>
 * </p></text>
      <param>a The left matrix in the multiplication operation. Modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
    </javadoc>
    <method type="void" name="elementMult" startLine="739" endLine="746" />
    <javadoc>
      <text>* <p>Performs the an element by element multiplication operation:<br>
 * <br>
 * c<sub>ij</sub> = a<sub>ij</sub> * b<sub>ij</sub> <br>
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="elementMult" startLine="757" endLine="764" />
    <javadoc>
      <text>* <p>Performs the an element by element division operation:<br>
 * <br>
 * a<sub>ij</sub> = a<sub>ij</sub> / b<sub>ij</sub> <br>
 * </p></text>
      <param>a The left matrix in the division operation. Modified.</param>
      <param>b The right matrix in the division operation. Not modified.</param>
    </javadoc>
    <method type="void" name="elementDiv" startLine="774" endLine="781" />
    <javadoc>
      <text>* <p>Performs the an element by element division operation:<br>
 * <br>
 * c<sub>ij</sub> = a<sub>ij</sub> / b<sub>ij</sub> <br>
 * </p></text>
      <param>a The left matrix in the division operation. Not modified.</param>
      <param>b The right matrix in the division operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="elementDiv" startLine="792" endLine="799" />
    <javadoc>
      <text>* <p>
 * Performs an in-place element by element scalar multiplication.<br>
 * <br>
 * a<sub>ij</sub> = &alpha;*a<sub>ij</sub>
 * </p></text>
      <param>a The matrix that is to be scaled.  Modified.</param>
      <param>alpha the amount each element is multiplied by.</param>
    </javadoc>
    <method type="void" name="scale" startLine="811" endLine="818" />
    <javadoc>
      <text>* <p>
 * Performs an element by element scalar multiplication.<br>
 * <br>
 * b<sub>ij</sub> = &alpha;*a<sub>ij</sub>
 * </p></text>
      <param>alpha the amount each element is multiplied by.</param>
      <param>a The matrix that is to be scaled.  Not modified.</param>
      <param>b Where the scaled matrix is stored. Modified.</param>
    </javadoc>
    <method type="void" name="scale" startLine="831" endLine="838" />
    <javadoc>
      <text>* <p>
 * Performs an in-place element by element scalar division.<br>
 * <br>
 * a<sub>ij</sub> = a<sub>ij</sub>/&alpha;
 * </p></text>
      <param>a The matrix whose elements are to be divided.  Modified.</param>
      <param>alpha the amount each element is divided by.</param>
    </javadoc>
    <method type="void" name="divide" startLine="850" endLine="857" />
    <javadoc>
      <text>* <p>
 * Performs an element by element scalar division.<br>
 * <br>
 * b<sub>ij</sub> = *a<sub>ij</sub> /&alpha;
 * </p></text>
      <param>alpha the amount each element is divided by.</param>
      <param>a The matrix whose elements are to be divided.  Not modified.</param>
      <param>b Where the results are stored. Modified.</param>
    </javadoc>
    <method type="void" name="divide" startLine="870" endLine="877" />
    <javadoc>
      <text>* <p>
 * Changes the sign of every element in the matrix.<br>
 * <br>
 * a<sub>ij</sub> = -a<sub>ij</sub>
 * </p></text>
      <param>a A matrix. Modified.</param>
    </javadoc>
    <method type="void" name="changeSign" startLine="889" endLine="896" />
    <javadoc>
      <text>* <p>
 * Sets every element in the matrix to the specified value.<br>
 * <br>
 * a<sub>ij</sub> = value
 * <p></text>
      <param>a A matrix whose elements are about to be set. Modified.</param>
      <param>v The value each element will have.</param>
    </javadoc>
    <method type="void" name="fill" startLine="908" endLine="915" />
  </class>
</source>
