<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.fixed">
  <import name="org.ejml.data.FixedMatrix3_64F" />
  <import name="org.ejml.data.FixedMatrix3x3_64F" />
  <class name="FixedOps3" startLine="24">
    <javadoc>
      <text>* <p>Common matrix operations for fixed sized matrices which are 3 x 3 or 3 element vectors.</p>
 * <p>DO NOT MODIFY.  Automatically generated code created by GenerateFixedOps</p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* <p>Performs the following operation:<br>
 * <br>
 * c = a + b <br>
 * c<sub>ij</sub> = a<sub>ij</sub> + b<sub>ij</sub> <br>
 * </p>
 * <p>
 * Matrix C can be the same instance as Matrix A and/or B.
 * </p></text>
      <param>a A Matrix. Not modified.</param>
      <param>b A Matrix. Not modified.</param>
      <param>c A Matrix where the results are stored. Modified.</param>
    </javadoc>
    <method type="void" name="add" startLine="46" endLine="56" />
    <javadoc>
      <text>* <p>Performs the following operation:<br>
 * <br>
 * a = a + b <br>
 * a<sub>ij</sub> = a<sub>ij</sub> + b<sub>ij</sub> <br>
 * </p></text>
      <param>a A Matrix. Modified.</param>
      <param>b A Matrix. Not modified.</param>
    </javadoc>
    <method type="void" name="addEquals" startLine="68" endLine="78" />
    <javadoc>
      <text>* Performs an in-place transpose.  This algorithm is only efficient for square
 * matrices.</text>
      <param>m The matrix that is to be transposed. Modified.</param>
    </javadoc>
    <method type="void" name="transpose" startLine="86" endLine="91">
      <declaration type="double" name="tmp" />
    </method>
    <javadoc>
      <text>* <p>
 * Transposes matrix 'a' and stores the results in 'b':<br>
 * <br>
 * b<sub>ij</sub> = a<sub>ji</sub><br>
 * where 'b' is the transpose of 'a'.
 * </p></text>
      <param>input The original matrix.  Not modified.</param>
      <param>output Where the transpose is stored. If null a new matrix is created. Modified.</param>
      <return>The transposed matrix.</return>
    </javadoc>
    <method type="FixedMatrix3x3_64F" name="transpose" startLine="105" endLine="120" />
    <javadoc>
      <text>* <p>Performs the following operation:<br>
 * <br>
 * c = a * b <br>
 * <br>
 * c<sub>ij</sub> = &sum;<sub>k=1:n</sub> { a<sub>ik</sub> * b<sub>kj</sub>}
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="mult" startLine="134" endLine="144" />
    <javadoc>
      <text>* <p>Performs the following operation:<br>
 * <br>
 * c = a<sup>T</sup> * b <br>
 * <br>
 * c<sub>ij</sub> = &sum;<sub>k=1:n</sub> { a<sub>ki</sub> * b<sub>kj</sub>}
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multTransA" startLine="158" endLine="168" />
    <javadoc>
      <text>* <p>
 * Performs the following operation:<br>
 * <br>
 * c = a<sup>T</sup> * b<sup>T</sup><br>
 * c<sub>ij</sub> = &sum;<sub>k=1:n</sub> { a<sub>ki</sub> * b<sub>jk</sub>}
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multTransAB" startLine="182" endLine="192" />
    <javadoc>
      <text>* <p>
 * Performs the following operation:<br>
 * <br>
 * c = a * b<sup>T</sup> <br>
 * c<sub>ij</sub> = &sum;<sub>k=1:n</sub> { a<sub>ik</sub> * b<sub>jk</sub>}
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="multTransB" startLine="206" endLine="216" />
    <javadoc>
      <text>* <p>Performs matrix to vector multiplication:<br>
 * <br>
 * c = a * b <br>
 * <br>
 * c<sub>i</sub> = &sum;<sub>k=1:n</sub> { a<sub>ik</sub> * b<sub>k</sub>}
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right vector in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="mult" startLine="230" endLine="234" />
    <javadoc>
      <text>* <p>Performs vector to matrix multiplication:<br>
 * <br>
 * c = a * b <br>
 * <br>
 * c<sub>j</sub> = &sum;<sub>k=1:n</sub> { b<sub>k</sub> * a<sub>kj</sub> }
 * </p></text>
      <param>a The left vector in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="mult" startLine="248" endLine="252" />
    <javadoc>
      <text>* <p>Performs the vector dot product:<br>
 * <br>
 * c = a * b <br>
 * <br>
 * c> = &sum;<sub>k=1:n</sub> { b<sub>k</sub> * a<sub>k</sub> }
 * </p></text>
      <param>a The left vector in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <return>The dot product</return>
    </javadoc>
    <method type="double" name="dot" startLine="266" endLine="268" />
    <javadoc>
      <text>* Sets all the diagonal elements equal to one and everything else equal to zero.
 * If this is a square matrix then it will be an identity matrix.</text>
      <param>a A matrix.</param>
    </javadoc>
    <method type="void" name="setIdentity" startLine="276" endLine="280" />
    <javadoc>
      <text>* Inverts matrix 'a' using minor matrices and stores the results in 'inv'.  Scaling is applied to improve
 * stability against overflow and underflow.
 * WARNING: Potentially less stable than using LU decomposition.</text>
      <param>a Input matrix. Not modified.</param>
      <param>inv Inverted output matrix.  Modified.</param>
      <return>true if it was successful or false if it failed.  Not always reliable.</return>
    </javadoc>
    <method type="boolean" name="invert" startLine="292" endLine="329">
      <declaration type="double" name="scale" />
      <declaration type="double" name="a11" />
      <declaration type="double" name="a12" />
      <declaration type="double" name="a13" />
      <declaration type="double" name="a21" />
      <declaration type="double" name="a22" />
      <declaration type="double" name="a23" />
      <declaration type="double" name="a31" />
      <declaration type="double" name="a32" />
      <declaration type="double" name="a33" />
      <declaration type="double" name="m11" />
      <declaration type="double" name="m12" />
      <declaration type="double" name="m13" />
      <declaration type="double" name="m21" />
      <declaration type="double" name="m22" />
      <declaration type="double" name="m23" />
      <declaration type="double" name="m31" />
      <declaration type="double" name="m32" />
      <declaration type="double" name="m33" />
      <declaration type="double" name="det" />
    </method>
    <javadoc>
      <text>* Computes the determinant using minor matrices.
 * <p></p>
 * WARNING: Potentially less stable than using LU decomposition.</text>
      <param>mat Input matrix.  Not modified.</param>
      <return>The determinant.</return>
    </javadoc>
    <method type="double" name="det" startLine="339" endLine="346">
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
      <declaration type="double" name="c" />
    </method>
    <javadoc>
      <text>* <p>
 * This computes the trace of the matrix:<br>
 * <br>
 * trace = &sum;<sub>i=1:n</sub> { a<sub>ii</sub> }
 * </p>
 * <p>
 * The trace is only defined for square matrices.
 * </p></text>
      <param>a A square matrix.  Not modified.</param>
    </javadoc>
    <method type="double" name="trace" startLine="360" endLine="362" />
    <javadoc>
      <text>* <p>
 * Extracts all diagonal elements from 'input' and places them inside the 'out' vector. Elements
 * are in sequential order.
 * </p></text>
      <param>input Matrix.  Not modified.</param>
      <param>out Vector containing diagonal elements.  Modified.</param>
    </javadoc>
    <method type="void" name="diag" startLine="374" endLine="378" />
    <javadoc>
      <text>* <p>
 * Returns the value of the element in the matrix that has the largest value.<br>
 * <br>
 * Max{ a<sub>ij</sub> } for all i and j<br>
 * </p></text>
      <param>a A matrix. Not modified.</param>
      <return>The max element value of the matrix.</return>
    </javadoc>
    <method type="double" name="elementMax" startLine="390" endLine="402">
      <declaration type="double" name="max" />
    </method>
    <javadoc>
      <text>* <p>
 * Returns the absolute value of the element in the matrix that has the largest absolute value.<br>
 * <br>
 * Max{ |a<sub>ij</sub>| } for all i and j<br>
 * </p></text>
      <param>a A matrix. Not modified.</param>
      <return>The max abs element value of the matrix.</return>
    </javadoc>
    <method type="double" name="elementMaxAbs" startLine="414" endLine="426">
      <declaration type="double" name="max" />
    </method>
    <javadoc>
      <text>* <p>
 * Returns the value of the element in the matrix that has the minimum value.<br>
 * <br>
 * Min{ a<sub>ij</sub> } for all i and j<br>
 * </p></text>
      <param>a A matrix. Not modified.</param>
      <return>The value of element in the matrix with the minimum value.</return>
    </javadoc>
    <method type="double" name="elementMin" startLine="438" endLine="450">
      <declaration type="double" name="min" />
    </method>
    <javadoc>
      <text>* <p>
 * Returns the absolute value of the element in the matrix that has the smallest absolute value.<br>
 * <br>
 * Min{ |a<sub>ij</sub>| } for all i and j<br>
 * </p></text>
      <param>a A matrix. Not modified.</param>
      <return>The max element value of the matrix.</return>
    </javadoc>
    <method type="double" name="elementMinAbs" startLine="462" endLine="474">
      <declaration type="double" name="min" />
    </method>
    <javadoc>
      <text>* <p>Performs the an element by element multiplication operation:<br>
 * <br>
 * a<sub>ij</sub> = a<sub>ij</sub> * b<sub>ij</sub> <br>
 * </p></text>
      <param>a The left matrix in the multiplication operation. Modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
    </javadoc>
    <method type="void" name="elementMult" startLine="484" endLine="488" />
    <javadoc>
      <text>* <p>Performs the an element by element multiplication operation:<br>
 * <br>
 * c<sub>ij</sub> = a<sub>ij</sub> * b<sub>ij</sub> <br>
 * </p></text>
      <param>a The left matrix in the multiplication operation. Not modified.</param>
      <param>b The right matrix in the multiplication operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="elementMult" startLine="499" endLine="503" />
    <javadoc>
      <text>* <p>Performs the an element by element division operation:<br>
 * <br>
 * a<sub>ij</sub> = a<sub>ij</sub> / b<sub>ij</sub> <br>
 * </p></text>
      <param>a The left matrix in the division operation. Modified.</param>
      <param>b The right matrix in the division operation. Not modified.</param>
    </javadoc>
    <method type="void" name="elementDiv" startLine="513" endLine="517" />
    <javadoc>
      <text>* <p>Performs the an element by element division operation:<br>
 * <br>
 * c<sub>ij</sub> = a<sub>ij</sub> / b<sub>ij</sub> <br>
 * </p></text>
      <param>a The left matrix in the division operation. Not modified.</param>
      <param>b The right matrix in the division operation. Not modified.</param>
      <param>c Where the results of the operation are stored. Modified.</param>
    </javadoc>
    <method type="void" name="elementDiv" startLine="528" endLine="532" />
    <javadoc>
      <text>* <p>
 * Performs an in-place element by element scalar multiplication.<br>
 * <br>
 * a<sub>ij</sub> = &alpha;*a<sub>ij</sub>
 * </p></text>
      <param>a The matrix that is to be scaled.  Modified.</param>
      <param>alpha the amount each element is multiplied by.</param>
    </javadoc>
    <method type="void" name="scale" startLine="544" endLine="548" />
    <javadoc>
      <text>* <p>
 * Performs an element by element scalar multiplication.<br>
 * <br>
 * b<sub>ij</sub> = &alpha;*a<sub>ij</sub>
 * </p></text>
      <param>alpha the amount each element is multiplied by.</param>
      <param>a The matrix that is to be scaled.  Not modified.</param>
      <param>b Where the scaled matrix is stored. Modified.</param>
    </javadoc>
    <method type="void" name="scale" startLine="561" endLine="565" />
    <javadoc>
      <text>* <p>
 * Performs an in-place element by element scalar division.<br>
 * <br>
 * a<sub>ij</sub> = a<sub>ij</sub>/&alpha;
 * </p></text>
      <param>a The matrix whose elements are to be divided.  Modified.</param>
      <param>alpha the amount each element is divided by.</param>
    </javadoc>
    <method type="void" name="divide" startLine="577" endLine="581" />
    <javadoc>
      <text>* <p>
 * Performs an element by element scalar division.<br>
 * <br>
 * b<sub>ij</sub> = *a<sub>ij</sub> /&alpha;
 * </p></text>
      <param>alpha the amount each element is divided by.</param>
      <param>a The matrix whose elements are to be divided.  Not modified.</param>
      <param>b Where the results are stored. Modified.</param>
    </javadoc>
    <method type="void" name="divide" startLine="594" endLine="598" />
    <javadoc>
      <text>* <p>
 * Changes the sign of every element in the matrix.<br>
 * <br>
 * a<sub>ij</sub> = -a<sub>ij</sub>
 * </p></text>
      <param>a A matrix. Modified.</param>
    </javadoc>
    <method type="void" name="changeSign" startLine="610" endLine="614" />
    <javadoc>
      <text>* <p>
 * Sets every element in the matrix to the specified value.<br>
 * <br>
 * a<sub>ij</sub> = value
 * <p></text>
      <param>a A matrix whose elements are about to be set. Modified.</param>
      <param>v The value each element will have.</param>
    </javadoc>
    <method type="void" name="fill" startLine="626" endLine="630" />
  </class>
</source>
