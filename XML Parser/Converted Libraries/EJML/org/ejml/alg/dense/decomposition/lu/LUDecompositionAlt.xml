<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.decomposition.lu">
  <import name="org.ejml.data.DenseMatrix64F" />
  <class name="LUDecompositionAlt" extends="LUDecompositionBase" startLine="24">
    <javadoc>
      <text>* <p>
 * An LU decomposition algorithm that originally came from Jama.  In general this is faster than
 * what is in NR since it creates a cache of a column, which makes a big difference in larger
 * matrices.
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* This is a modified version of what was found in the JAMA package.  The order that it
 * performs its permutations in is the primary difference from NR</text>
      <param>a The matrix that is to be decomposed.  Not modified.</param>
      <return>true If the matrix can be decomposed and false if it can not.</return>
    </javadoc>
    <method type="boolean" name="decompose" startLine="43" endLine="112">
      <declaration type="double[]" name="LUcolj" />
      <scope startLine="48" endLine="109">
        <scope startLine="51" endLine="53" />
        <scope startLine="56" endLine="67">
          <declaration type="int" name="rowIndex" />
          <declaration type="int" name="kmax" />
          <declaration type="double" name="s" />
          <scope startLine="62" endLine="64" />
        </scope>
        <declaration type="int" name="p" />
        <declaration type="double" name="max" />
        <scope startLine="72" endLine="78">
          <declaration type="double" name="v" />
          <scope startLine="74" endLine="77" />
        </scope>
        <scope startLine="80" endLine="97">
          <declaration type="int" name="rowP" />
          <declaration type="int" name="rowJ" />
          <declaration type="int" name="endP" />
          <scope startLine="90" endLine="94">
            <declaration type="double" name="t" />
          </scope>
          <declaration type="int" name="k" />
        </scope>
        <scope startLine="101" endLine="108">
          <declaration type="double" name="lujj" />
          <scope startLine="103" endLine="107">
            <scope startLine="104" endLine="106" />
          </scope>
        </scope>
        <comment>make a copy of the column to avoid cache jumping issues</comment>
        <comment>Apply previous transformations.</comment>
        <comment>Most of the time is spent in the following dot product.</comment>
        <comment>Find pivot and exchange if necessary.</comment>
        <comment>swap the rows</comment>
        <comment>for (int k = 0; k < n; k++) {</comment>
        <comment>double t = dataLU[p*n + k];</comment>
        <comment>dataLU[p*n + k] = dataLU[j*n + k];</comment>
        <comment>dataLU[j*n + k] = t;</comment>
        <comment>}</comment>
        <comment>Compute multipliers.</comment>
      </scope>
    </method>
  </class>
</source>
