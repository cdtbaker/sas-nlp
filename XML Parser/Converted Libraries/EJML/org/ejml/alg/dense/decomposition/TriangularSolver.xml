<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.decomposition">
  <class name="TriangularSolver" startLine="21">
    <javadoc>
      <text>* <p>
 * This contains algorithms for solving systems of equations where T is a
 * non-singular triangular matrix:<br>
 * <br>
 * T*x = b<br>
 * <br>
 * where x and b are vectors, and T is an n by n matrix. T can either be a lower or upper triangular matrix.<br>
 * </p>
 * <p>
 * These functions are designed for use inside of other algorithms.  To use them directly
 * is dangerous since no sanity checks are performed.
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* <p>
 * Inverts a square lower triangular matrix:  L = L<sup>-1</sup>
 * </p></text>
      <param>L</param>
      <param>m</param>
    </javadoc>
    <method type="void" name="invertLower" startLine="48" endLine="60">
      <scope startLine="49" endLine="59">
        <declaration type="double" name="L_ii" />
        <scope startLine="51" endLine="57">
          <declaration type="double" name="val" />
          <scope startLine="53" endLine="55" />
        </scope>
      </scope>
    </method>
    <method type="void" name="invertLower" startLine="62" endLine="74">
      <scope startLine="63" endLine="73">
        <declaration type="double" name="L_ii" />
        <scope startLine="65" endLine="71">
          <declaration type="double" name="val" />
          <scope startLine="67" endLine="69" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Solves for non-singular lower triangular matrices using forward substitution.
 * <br>
 * b = L<sup>-1</sup>b<br>
 * <br>
 * where b is a vector, L is an n by n matrix.<br>
 * </p></text>
      <param>L An n by n non-singular lower triangular matrix. Not modified.</param>
      <param>b A vector of length n. Modified.</param>
      <param>n The size of the matrices.</param>
    </javadoc>
    <method type="void" name="solveL" startLine="90" endLine="106">
      <scope startLine="98" endLine="105">
        <declaration type="double" name="sum" />
        <declaration type="int" name="indexL" />
        <scope startLine="101" endLine="103" />
      </scope>
      <comment>for( int i = 0; i < n; i++ ) {</comment>
      <comment>double sum = b[i];</comment>
      <comment>for( int k=0; k<i; k++ ) {</comment>
      <comment>sum -= L[i*n+k]* b[k];</comment>
      <comment>}</comment>
      <comment>b[i] = sum / L[i*n+i];</comment>
      <comment>}</comment>
    </method>
    <javadoc>
      <text>* L is a m by m matrix
 * B is a m by n matrix</text>
      <param>L</param>
      <param>b</param>
      <param>m</param>
      <param>n</param>
    </javadoc>
    <method type="void" name="solveL" startLine="119" endLine="129">
      <scope startLine="120" endLine="128">
        <scope startLine="121" endLine="127">
          <declaration type="double" name="sum" />
          <scope startLine="123" endLine="125" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * This is a forward substitution solver for non-singular lower triangular matrices.
 * <br>
 * b = (L<sup>T</sup>)<sup>-1</sup>b<br>
 * <br>
 * where b is a vector, L is an n by n matrix.<br>
 * </p>
 * <p>
 * L is a lower triangular matrix, but it comes up with a solution as if it was
 * an upper triangular matrix that was computed by transposing L.
 * </p></text>
      <param>L An n by n non-singular lower triangular matrix. Not modified.</param>
      <param>b A vector of length n. Modified.</param>
      <param>n The size of the matrices.</param>
    </javadoc>
    <method type="void" name="solveTranL" startLine="149" endLine="157">
      <scope startLine="150" endLine="156">
        <declaration type="double" name="sum" />
        <scope startLine="152" endLine="154" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * This is a forward substitution solver for non-singular upper triangular matrices.
 * <br>
 * b = U<sup>-1</sup>b<br>
 * <br>
 * where b is a vector, U is an n by n matrix.<br>
 * </p></text>
      <param>U An n by n non-singular upper triangular matrix. Not modified.</param>
      <param>b A vector of length n. Modified.</param>
      <param>n The size of the matrices.</param>
    </javadoc>
    <method type="void" name="solveU" startLine="173" endLine="189">
      <scope startLine="181" endLine="188">
        <declaration type="double" name="sum" />
        <declaration type="int" name="indexU" />
        <scope startLine="184" endLine="186" />
      </scope>
      <comment>for( int i =n-1; i>=0; i-- ) {</comment>
      <comment>double sum = b[i];</comment>
      <comment>for( int j = i+1; j <n; j++ ) {</comment>
      <comment>sum -= U[i*n+j]* b[j];</comment>
      <comment>}</comment>
      <comment>b[i] = sum/U[i*n+i];</comment>
      <comment>}</comment>
    </method>
    <method type="void" name="solveU" startLine="192" endLine="208">
      <scope startLine="200" endLine="207">
        <declaration type="double" name="sum" />
        <declaration type="int" name="indexU" />
        <scope startLine="203" endLine="205" />
      </scope>
      <comment>for( int i =maxRow-1; i>=minRow; i-- ) {</comment>
      <comment>double sum = b[i];</comment>
      <comment>for( int j = i+1; j <maxRow; j++ ) {</comment>
      <comment>sum -= U[i*sideLength+j]* b[j];</comment>
      <comment>}</comment>
      <comment>b[i] = sum/U[i*sideLength+i];</comment>
      <comment>}</comment>
    </method>
    <javadoc>
      <text>* <p>
 * This is a forward substitution solver for non-singular upper triangular matrices which are
 * a sub-matrix inside a larger.  The columns of 'b' are solved for individually
 * <br>
 * b = U<sup>-1</sup>b<br>
 * <br>
 * where b is a matrix, U is an n by n matrix.<br>
 * </p></text>
      <param>U Matrix containing the upper triangle system</param>
      <param>startU Index of the first element in U</param>
      <param>strideU stride between rows</param>
      <param>widthU How wide the square matrix is</param>
      <param>b Matrix containing the solution to the system.  Overwritten with the solution.</param>
      <param>startB Index of the first element in B</param>
      <param>strideB stride between rows</param>
      <param>widthB How wide the matrix is.  Length is the same as U's width</param>
    </javadoc>
    <method type="void" name="solveU" startLine="231" endLine="243">
      <scope startLine="232" endLine="240">
        <scope startLine="233" endLine="239">
          <declaration type="double" name="sum" />
          <scope startLine="235" endLine="237" />
        </scope>
      </scope>
      <comment>todo comment out the above and optimize it</comment>
    </method>
  </class>
</source>
