<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.decomposition.chol">
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.factory.CholeskyDecomposition" />
  <import name="org.ejml.ops.CommonOps" />
  <class name="CholeskyDecompositionCommon" startLine="27">
    <implements name="CholeskyDecomposition<DenseMatrix64F>" />
    <javadoc>
      <text>* <p>
 * This is an abstract class for a Cholesky decomposition.  It provides the solvers, but the actual
 * decompsoition is provided in other classes.
 * </p>
 * <p>
 * A Cholesky Decomposition is a special decomposition for positive-definite symmetric matrices
 * that is more efficient than other general purposes decomposition. It refactors matrices
 * using one of the two following equations:<br>
 * <br>
 * L*L<sup>T</sup>=A<br>
 * R<sup>T</sup>*R=A<br>
 * <br>
 * where L is a lower triangular matrix and R is an upper traingular matrix.<br>
 * </p></text>
      <see>CholeskyDecompositionInner</see>
      <see>org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionBlock</see>
      <see>org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionLDL</see>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="int" name="maxWidth" />
    <declaration type="int" name="n" />
    <declaration type="DenseMatrix64F" name="T" />
    <declaration type="double[]" name="t" />
    <declaration type="double" name="vv" />
    <declaration type="boolean" name="lower" />
    <javadoc>
      <text>* Creates a CholeksyDecomposition capable of decompositong a matrix that is
 * n by n, where n is the width.</text>
      <param>lower should a lower or upper triangular matrix be used.</param>
    </javadoc>
    <method type="constructor" name="CholeskyDecompositionCommon" startLine="75" endLine="77" />
    <method type="void" name="setExpectedMaxSize" startLine="79" endLine="87">
      <scope startLine="80" endLine="82" />
    </method>
    <javadoc>
      <text>* If true the decomposition was for a lower triangular matrix.
 * If false it was for an upper triangular matrix.</text>
      <return>True if lower, false if upper.</return>
    </javadoc>
    <method type="boolean" name="isLower" startLine="96" endLine="98" />
    <javadoc>
      <text>* <p>
 * Performs Choleksy decomposition on the provided matrix.
 * </p>
 * <p>
 * If the matrix is not positive definite then this function will return
 * false since it can't complete its computations.  Not all errors will be
 * found.  This is an efficient way to check for positive definiteness.
 * </p></text>
      <param>mat A symmetric positive definite matrix with n <= widthMax.</param>
      <return>True if it was able to finish the decomposition.</return>
    </javadoc>
    <method type="boolean" name="decompose" startLine="114" endLine="131">
      <scope startLine="115" endLine="117" />
      <scope startLine="117" endLine="119" />
      <scope startLine="126" endLine="128" />
      <scope startLine="128" endLine="130" />
    </method>
    <method type="boolean" name="inputModified" startLine="134" endLine="136" />
    <method name="decomposeLower" type="boolean" startLine="138" endLine="143" />
    <javadoc>
      <text>* Performs an lower triangular decomposition.</text>
      <return>true if the matrix was decomposed.</return>
    </javadoc>
    <method name="decomposeUpper" type="boolean" startLine="145" endLine="150" />
    <javadoc>
      <text>* Performs an upper triangular decomposition.</text>
      <return>true if the matrix was decomposed.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="getT" startLine="153" endLine="180">
      <scope startLine="155" endLine="157" />
      <scope startLine="157" endLine="162" />
      <scope startLine="165" endLine="171">
        <scope startLine="166" endLine="170">
          <scope startLine="167" endLine="169" />
        </scope>
      </scope>
      <scope startLine="171" endLine="177">
        <scope startLine="172" endLine="176">
          <scope startLine="173" endLine="175" />
        </scope>
      </scope>
      <comment>see if it needs to declare a new matrix or not</comment>
      <comment>write the values to T</comment>
    </method>
    <javadoc>
      <text>* Returns the triangular matrix from the decomposition.</text>
      <return>A lower or upper triangular matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="getT" startLine="187" endLine="189" />
    <method type="double[]" name="_getVV" startLine="191" endLine="193" />
    <comment>it can decompose a matrix up to this width</comment>
    <comment>width and height of the matrix</comment>
    <comment>the decomposed matrix</comment>
    <comment>tempoary variable used by various functions</comment>
    <comment>is it a lower triangular matrix or an upper triangular matrix</comment>
  </class>
</source>
