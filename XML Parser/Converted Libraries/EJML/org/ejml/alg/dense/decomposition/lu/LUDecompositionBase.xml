<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.decomposition.lu">
  <import name="org.ejml.UtilEjml" />
  <import name="org.ejml.alg.dense.decomposition.TriangularSolver" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.factory.LUDecomposition" />
  <import name="org.ejml.ops.CommonOps" />
  <import name="org.ejml.ops.SpecializedOps" />
  <class name="LUDecompositionBase" startLine="29">
    <implements name="LUDecomposition<DenseMatrix64F>" />
    <javadoc>
      <text>* <p>
 * Contains common data structures and operations for LU decomposition algorithms.
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="DenseMatrix64F" name="LU" />
    <declaration type="int" name="maxWidth" />
    <declaration type="int" name="m" />
    <declaration type="double" name="dataLU" />
    <declaration type="double" name="vv" />
    <declaration type="int" name="indx" />
    <declaration type="int" name="pivot" />
    <declaration type="double" name="pivsign" />
    <method type="void" name="setExpectedMaxSize" startLine="58" endLine="67" />
    <method type="DenseMatrix64F" name="getLU" startLine="69" endLine="71" />
    <method type="int[]" name="getIndx" startLine="73" endLine="75" />
    <method type="int[]" name="getPivot" startLine="77" endLine="79" />
    <method type="boolean" name="inputModified" startLine="82" endLine="84" />
    <javadoc>
      <text>* Writes the lower triangular matrix into the specified matrix.</text>
      <param>lower Where the lower triangular matrix is writen to.</param>
    </javadoc>
    <method type="DenseMatrix64F" name="getLower" startLine="93" endLine="121">
      <declaration type="int" name="numRows" />
      <declaration type="int" name="numCols" />
      <scope startLine="97" endLine="99" />
      <scope startLine="99" endLine="103" />
      <scope startLine="105" endLine="111">
        <scope startLine="108" endLine="110" />
      </scope>
      <scope startLine="113" endLine="119">
        <scope startLine="114" endLine="118">
          <scope startLine="115" endLine="117" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Writes the upper triangular matrix into the specified matrix.</text>
      <param>upper Where the upper triangular matrix is writen to.</param>
    </javadoc>
    <method type="DenseMatrix64F" name="getUpper" startLine="130" endLine="149">
      <declaration type="int" name="numRows" />
      <declaration type="int" name="numCols" />
      <scope startLine="134" endLine="136" />
      <scope startLine="136" endLine="140" />
      <scope startLine="142" endLine="146">
        <scope startLine="143" endLine="145" />
      </scope>
    </method>
    <method type="DenseMatrix64F" name="getPivot" startLine="151" endLine="153" />
    <method type="void" name="decomposeCommonInit" startLine="155" endLine="168">
      <scope startLine="156" endLine="158" />
      <scope startLine="164" endLine="166" />
    </method>
    <javadoc>
      <text>* Determines if the decomposed matrix is singular.  This function can return
 * false and the matrix be almost singular, which is still bad.</text>
      <return>true if singular false otherwise.</return>
    </javadoc>
    <method type="boolean" name="isSingular" startLine="177" endLine="183">
      <scope startLine="178" endLine="181" />
    </method>
    <javadoc>
      <text>* Computes the determinant from the LU decomposition.</text>
      <return>The matrix's determinant.</return>
    </javadoc>
    <method type="double" name="computeDeterminant" startLine="191" endLine="203">
      <declaration type="double" name="ret" />
      <declaration type="int" name="total" />
      <scope startLine="198" endLine="200" />
    </method>
    <method type="double" name="quality" startLine="205" endLine="207" />
    <javadoc>
      <text>* a specialized version of solve that avoid additional checks that are not needed.</text>
    </javadoc>
    <method type="void" name="_solveVectorInternal" startLine="213" endLine="235">
      <declaration type="int" name="ii" />
      <scope startLine="217" endLine="231">
        <declaration type="int" name="ip" />
        <declaration type="double" name="sum" />
        <scope startLine="221" endLine="227">
          <declaration type="int" name="index" />
        </scope>
        <scope startLine="227" endLine="229" />
        <comment>for( int j = ii-1; j < i; j++ )</comment>
        <comment>sum -= dataLU[i* n +j]*vv[j];</comment>
      </scope>
      <comment>Solve L*Y = B</comment>
      <comment>Solve U*X = Y;</comment>
    </method>
    <method type="double[]" name="_getVV" startLine="237" endLine="239" />
    <comment>the decomposed matrix</comment>
    <comment>it can decompose a matrix up to this size</comment>
    <comment>the shape of the matrix</comment>
    <comment>data in the matrix</comment>
    <comment>used in set, solve, invert</comment>
    <comment>used in set</comment>
    <comment>used by determinant</comment>
  </class>
</source>
