<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.decomposition.eig.watched">
  <import name="org.ejml.UtilEjml" />
  <import name="org.ejml.alg.dense.decomposition.TriangularSolver" />
  <import name="org.ejml.data.Complex64F" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.factory.LinearSolver" />
  <import name="org.ejml.factory.LinearSolverFactory" />
  <import name="org.ejml.ops.CommonOps" />
  <import name="org.ejml.ops.NormOps" />
  <import name="org.ejml.ops.SpecializedOps" />
  <class name="WatchedDoubleStepQREigenvector" startLine="32">
    <javadoc>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="WatchedDoubleStepQREigen" name="implicit" />
    <declaration type="DenseMatrix64F" name="Q" />
    <declaration type="DenseMatrix64F" name="eigenvectors" />
    <declaration type="DenseMatrix64F" name="eigenvectorTemp" />
    <declaration type="LinearSolver" name="solver" />
    <declaration type="Complex64F" name="origEigenvalues" />
    <declaration type="int" name="N" />
    <declaration type="int" name="splits" />
    <declaration type="int" name="numSplits" />
    <declaration type="int" name="x1" />
    <declaration type="int" name="indexVal" />
    <declaration type="boolean" name="onscript" />
    <method type="boolean" name="process" startLine="61" endLine="91">
      <scope startLine="64" endLine="73" />
      <scope startLine="73" endLine="76">
        <comment>UtilEjml.setnull(eigenvectors);</comment>
      </scope>
      <comment>System.out.println("Orig A");</comment>
      <comment>A.print("%12.10f");</comment>
    </method>
    <method type="boolean" name="extractVectors" startLine="93" endLine="126">
      <declaration type="boolean" name="triangular" />
      <scope startLine="99" endLine="109">
        <declaration type="Complex64F" name="c" />
        <scope startLine="106" endLine="108" />
      </scope>
      <scope startLine="112" endLine="123">
        <declaration type="DenseMatrix64F" name="temp" />
        <scope startLine="114" endLine="122">
          <declaration type="DenseMatrix64F" name="v" />
          <scope startLine="117" endLine="121" />
        </scope>
      </scope>
      <comment>extract eigenvectors from the shur matrix</comment>
      <comment>start at the top left corner of the matrix</comment>
      <comment>translate the eigenvectors into the frame of the original matrix</comment>
    </method>
    <method type="void" name="solveEigenvectorDuplicateEigenvalue" startLine="128" endLine="160">
      <declaration type="double" name="scale" />
      <scope startLine="136" endLine="142">
        <scope startLine="137" endLine="139" />
        <scope startLine="139" endLine="141" />
      </scope>
      <scope startLine="146" endLine="159">
        <declaration type="Complex64F" name="c" />
        <scope startLine="149" endLine="158">
          <declaration type="DenseMatrix64F" name="v" />
        </scope>
      </scope>
    </method>
    <method type="void" name="solveUsingTriangle" startLine="162" endLine="175">
      <scope startLine="163" endLine="165" />
      <scope startLine="172" endLine="174" />
    </method>
    <method type="void" name="solveWithLU" startLine="177" endLine="195">
      <declaration type="DenseMatrix64F" name="A" />
      <scope startLine="182" endLine="184" />
      <comment>TODO this must be very inefficient</comment>
    </method>
    <method type="boolean" name="findQandR" startLine="197" endLine="216">
      <scope startLine="205" endLine="209">
        <scope startLine="206" endLine="208" />
      </scope>
      <comment>use the already computed eigenvalues to recompute the Q and R matrices</comment>
      <comment>Q.print("%1.10f");</comment>
      <comment />
      <comment>implicit.A.print("%1.10f");</comment>
    </method>
    <method type="boolean" name="findNextEigenvalue" startLine="218" endLine="253">
      <declaration type="boolean" name="foundEigen" />
      <scope startLine="220" endLine="251">
        <scope startLine="224" endLine="226" />
        <scope startLine="226" endLine="231" />
        <scope startLine="231" endLine="236" />
        <scope startLine="236" endLine="242" />
        <scope startLine="242" endLine="248" />
        <scope startLine="248" endLine="250" />
        <comment>implicit.A.print();</comment>
        <comment>implicit.A.print("%e");</comment>
        <comment>System.err.println("If it needs to do an exceptional shift then something went very bad.");</comment>
        <comment>return false;</comment>
        <comment>check for convergence</comment>
      </scope>
    </method>
    <method type="void" name="checkSplitPerformImplicit" startLine="256" endLine="289">
      <scope startLine="258" endLine="265">
        <scope startLine="259" endLine="264" />
        <comment>reduce the scope of what it is looking at</comment>
      </scope>
      <scope startLine="267" endLine="282">
        <scope startLine="268" endLine="270" />
        <scope startLine="270" endLine="281">
          <declaration type="Complex64F" name="a" />
          <scope startLine="274" endLine="276" />
          <scope startLine="276" endLine="278" />
          <scope startLine="278" endLine="280" />
        </scope>
        <comment>if no splits are found perform an implicit step</comment>
      </scope>
      <scope startLine="282" endLine="288">
        <comment>that didn't work so try a modified order</comment>
      </scope>
      <comment>check for splits</comment>
      <comment>first try using known eigenvalues in the same order they were originally found</comment>
    </method>
    <method type="void" name="moveToNextSplit" startLine="292" endLine="303">
      <scope startLine="298" endLine="300" />
      <scope startLine="300" endLine="302" />
    </method>
    <method type="DenseMatrix64F" name="getQ" startLine="305" endLine="307" />
    <method type="WatchedDoubleStepQREigen" name="getImplicit" startLine="309" endLine="311" />
    <method type="DenseMatrix64F[]" name="getEigenvectors" startLine="313" endLine="315" />
    <method type="Complex64F[]" name="getEigenvalues" startLine="317" endLine="319" />
    <comment>Q matrix from double step QR</comment>
  </class>
</source>
