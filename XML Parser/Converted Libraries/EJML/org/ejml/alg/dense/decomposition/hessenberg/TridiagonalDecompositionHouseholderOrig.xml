<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.decomposition.hessenberg">
  <import name="org.ejml.alg.dense.decomposition.qr.QrHelperFunctions" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.ops.CommonOps" />
  <class name="TridiagonalDecompositionHouseholderOrig" startLine="25">
    <javadoc>
      <text>* <p>
 * A straight forward implementation from "Fundamentals of Matrix Computations," Second Edition.<br>
 * <br>
 * This is only saved to provide a point of reference in benchmarks.
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* Internal storage of decomposed matrix.  The tridiagonal matrix is stored in the
 * upper tridiagonal portion of the matrix.  The householder vectors are stored
 * in the upper rows.</text>
    </javadoc>
    <declaration type="DenseMatrix64F" name="QT" />
    <declaration type="int" name="N" />
    <declaration type="double" name="w" />
    <declaration type="double" name="gammas" />
    <declaration type="double" name="b" />
    <method type="constructor" name="TridiagonalDecompositionHouseholderOrig" startLine="53" endLine="59" />
    <javadoc>
      <text>* Returns the interal matrix where the decomposed results are stored.</text>
      <return />
    </javadoc>
    <method type="DenseMatrix64F" name="getQT" startLine="65" endLine="67" />
    <javadoc>
      <text>* Extracts the tridiagonal matrix found in the decomposition.</text>
      <param>T If not null then the results will be stored here.  Otherwise a new matrix will be created.</param>
      <return>The extracted T matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="getT" startLine="75" endLine="98">
      <scope startLine="76" endLine="78" />
      <scope startLine="88" endLine="92" />
    </method>
    <javadoc>
      <text>* An orthogonal matrix that has the following property: T = Q<sup>T</sup>AQ</text>
      <param>Q If not null then the results will be stored here.  Otherwise a new matrix will be created.</param>
      <return>The extracted Q matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="getQ" startLine="106" endLine="129">
      <scope startLine="107" endLine="112">
        <scope startLine="109" endLine="111" />
      </scope>
      <scope startLine="119" endLine="126">
        <scope startLine="121" endLine="123" />
        <comment>Q.print();</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Decomposes the provided symmetric matrix.</text>
      <param>A Symmetric matrix that is going to be decomposed.  Not modified.</param>
    </javadoc>
    <method type="void" name="decompose" startLine="136" endLine="144">
      <scope startLine="139" endLine="143">
        <comment>System.out.println("k=="+k);</comment>
        <comment>QT.print();</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Computes and performs the similar a transform for submatrix k.</text>
    </javadoc>
    <method type="void" name="similarTransform" startLine="149" endLine="200">
      <declaration type="double[]" name="t" />
      <declaration type="double" name="max" />
      <declaration type="int" name="rowU" />
      <scope startLine="158" endLine="162">
        <declaration type="double" name="val" />
      </scope>
      <scope startLine="164" endLine="197">
        <declaration type="double" name="tau" />
        <scope startLine="170" endLine="173">
          <declaration type="double" name="val" />
        </scope>
        <declaration type="double" name="nu" />
        <scope startLine="184" endLine="186" />
        <declaration type="double" name="gamma" />
        <comment>-------- set up the reflector Q_k</comment>
        <comment>normalize to reduce overflow/underflow</comment>
        <comment>and compute tau for the reflector</comment>
        <comment>write the reflector into the lower left column of the matrix</comment>
        <comment>---------- Specialized householder that takes advantage of the symmetry</comment>
        <comment>since the first element in the householder vector is known to be 1</comment>
        <comment>store the full upper hessenberg</comment>
      </scope>
      <scope startLine="197" endLine="199" />
      <comment>find the largest value in this column</comment>
      <comment>this is used to normalize the column and mitigate overflow/underflow</comment>
    </method>
    <javadoc>
      <text>* Performs the householder operations on left and right and side of the matrix.  Q<sup>T</sup>AQ</text>
      <param>row Specifies the submatrix.</param>
      <param>gamma The gamma for the householder operation</param>
    </javadoc>
    <method type="void" name="householderSymmetric" startLine="209" endLine="246">
      <declaration type="int" name="startU" />
      <scope startLine="213" endLine="220">
        <declaration type="double" name="total" />
        <scope startLine="215" endLine="217" />
        <comment>System.out.println("y["+i+"] = "+w[i]);</comment>
      </scope>
      <declaration type="double" name="alpha" />
      <scope startLine="224" endLine="226" />
      <scope startLine="230" endLine="233">
        <comment>System.out.println("w["+i+"] = "+w[i]);</comment>
      </scope>
      <scope startLine="235" endLine="244">
        <declaration type="double" name="ww" />
        <declaration type="double" name="uu" />
        <scope startLine="241" endLine="243" />
        <comment>System.out.println("u["+i+"] = "+uu);</comment>
      </scope>
      <comment>compute v = -gamma*A*u</comment>
      <comment>alpha = -0.5*gamma*u^T*v</comment>
      <comment>w = v + alpha*u</comment>
      <comment>A = A + w*u^T + u*w^T</comment>
    </method>
    <javadoc>
      <text>* If needed declares and sets up internal data structures.</text>
      <param>A Matrix being decomposed.</param>
    </javadoc>
    <method type="void" name="init" startLine="254" endLine="271">
      <scope startLine="258" endLine="267">
        <scope startLine="262" endLine="266" />
      </scope>
      <comment>just copy the top right triangle</comment>
    </method>
    <method type="double" name="getGamma" startLine="273" endLine="275" />
    <comment>The size of the matrix</comment>
    <comment>temporary storage</comment>
    <comment>gammas for the householder operations</comment>
    <comment>temporary storage</comment>
  </class>
</source>
