<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.decomposition.eig">
  <import name="org.ejml.data.Complex64F" />
  <class name="EigenvalueSmall" startLine="24">
    <javadoc>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="Complex64F" name="value0" />
    <declaration type="Complex64F" name="value1" />
    <method type="void" name="value2x2" startLine="34" endLine="89">
      <declaration type="double" name="c" />
      <scope startLine="38" endLine="40">
        <comment>is this pointless since</comment>
      </scope>
      <scope startLine="40" endLine="49">
        <declaration type="double" name="aa" />
        <declaration type="double" name="bb" />
        <declaration type="double" name="t_hat" />
        <declaration type="double" name="t" />
      </scope>
      <declaration type="double" name="c2" />
      <declaration type="double" name="s2" />
      <declaration type="double" name="cs" />
      <declaration type="double" name="b11" />
      <declaration type="double" name="b12" />
      <declaration type="double" name="b21" />
      <scope startLine="61" endLine="84">
        <scope startLine="62" endLine="65" />
        <scope startLine="65" endLine="68" />
        <comment>c2 = b12;c*c;</comment>
        <comment>s2 = b21;s*s;</comment>
        <comment>a12 = c2*b12 - s2*b21;</comment>
        <comment>a21 = c2*b21 - s2*b12;</comment>
      </scope>
      <scope startLine="84" endLine="88" />
      <comment>apply a rotators such that th a11 and a22 elements are the same</comment>
      <comment>double b22 = c2*a22 + s2*a11 + cs*(a12+a21);</comment>
      <comment>apply second rotator to make A upper triangular if real eigenvalues</comment>
    </method>
    <javadoc>
      <text>* Computes the eigenvalues of a 2 by 2 matrix using a faster but more prone to errors method.  This
 * is the typical method.</text>
    </javadoc>
    <method type="void" name="value2x2_fast" startLine="96" endLine="110">
      <declaration type="double" name="left" />
      <declaration type="double" name="inside" />
      <scope startLine="100" endLine="104" />
      <scope startLine="104" endLine="109">
        <declaration type="double" name="right" />
      </scope>
    </method>
    <javadoc>
      <text>* Compute the symmetric eigenvalue using a slightly safer technique</text>
    </javadoc>
    <method type="void" name="symm2x2_fast" startLine="117" endLine="132">
      <declaration type="double" name="left" />
      <declaration type="double" name="b" />
      <declaration type="double" name="right" />
      <comment>double p = (a11 - a22)*0.5;</comment>
      <comment>double r = Math.sqrt(p*p + a12*a12);</comment>
      <comment />
      <comment>value0.real = a22 + a12*a12/(r-p);</comment>
      <comment>value1.real = a22 - a12*a12/(r+p);</comment>
      <comment>}</comment>
      <comment />
      <comment>public void symm2x2_std( double a11 , double a12, double a22 )</comment>
      <comment>{</comment>
    </method>
    <comment>if |a11-a22| >> |a12+a21| there might be a better way.  see pg371</comment>
    <comment>See page 385 of Fundamentals of Matrix Computations 2nd</comment>
  </class>
</source>
