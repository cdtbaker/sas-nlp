<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.decomposition.bidiagonal">
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.ops.SpecializedOps" />
  <import name="org.ejml.simple.SimpleMatrix" />
  <class name="BidiagonalDecompositionNaive" startLine="26">
    <javadoc>
      <text>* A slower but much simpler version of {@link BidiagonalDecompositionRow} that internally uses
 * SimpleMatrix and explicitly computes the householder matrices.  This was easier to code up and is
 * used to validate other implementations.</text>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="SimpleMatrix" name="U" />
    <declaration type="SimpleMatrix" name="B" />
    <declaration type="SimpleMatrix" name="V" />
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <declaration type="int" name="min" />
    <declaration type="DenseMatrix64F" name="u" />
    <method type="SimpleMatrix" name="getU" startLine="48" endLine="50" />
    <method type="SimpleMatrix" name="getB" startLine="52" endLine="54" />
    <method type="SimpleMatrix" name="getV" startLine="56" endLine="58" />
    <javadoc>
      <text>* Computes the decomposition of the provided matrix.  If no errors are detected then true is returned,
 * false otherwise.</text>
      <param>A  The matrix that is being decomposed.  Not modified.</param>
      <return>If it detects any errors or not.</return>
    </javadoc>
    <method type="boolean" name="decompose" startLine="67" endLine="70" />
    <method type="void" name="init" startLine="72" endLine="84">
      <declaration type="int" name="max" />
    </method>
    <javadoc>
      <text>* Internal function for computing the decomposition.</text>
    </javadoc>
    <method type="boolean" name="_decompose" startLine="91" endLine="98">
      <scope startLine="92" endLine="95" />
    </method>
    <method type="void" name="computeU" startLine="100" endLine="145">
      <declaration type="double[]" name="u" />
      <declaration type="double" name="max" />
      <scope startLine="108" endLine="115">
        <declaration type="double" name="val" />
        <comment>copy the householder vector to vector outside of the matrix to reduce caching issues</comment>
        <comment>big improvement on larger matrices and a relatively small performance hit on small matrices.</comment>
      </scope>
      <scope startLine="117" endLine="144">
        <declaration type="double" name="tau" />
        <scope startLine="123" endLine="126">
          <declaration type="double" name="val" />
        </scope>
        <declaration type="double" name="nu" />
        <scope startLine="137" endLine="139" />
        <declaration type="SimpleMatrix" name="Q_k" />
        <comment>-------- set up the reflector Q_k</comment>
        <comment>normalize to reduce overflow/underflow</comment>
        <comment>and compute tau for the reflector</comment>
        <comment>write the reflector into the lower left column of the matrix</comment>
      </scope>
      <comment>find the largest value in this column</comment>
      <comment>this is used to normalize the column and mitigate overflow/underflow</comment>
    </method>
    <method type="void" name="computeV" startLine="147" endLine="196">
      <declaration type="double[]" name="u" />
      <declaration type="double" name="max" />
      <scope startLine="157" endLine="164">
        <declaration type="double" name="val" />
        <comment>copy the householder vector to vector outside of the matrix to reduce caching issues</comment>
        <comment>big improvement on larger matrices and a relatively small performance hit on small matrices.</comment>
      </scope>
      <scope startLine="166" endLine="195">
        <declaration type="double" name="tau" />
        <scope startLine="172" endLine="175">
          <declaration type="double" name="val" />
        </scope>
        <declaration type="double" name="nu" />
        <scope startLine="186" endLine="188" />
        <declaration type="SimpleMatrix" name="Q_k" />
        <comment>-------- set up the reflector Q_k</comment>
        <comment>normalize to reduce overflow/underflow</comment>
        <comment>and compute tau for the reflector</comment>
        <comment>write the reflector into the lower left column of the matrix</comment>
        <comment>---------- multiply on the left by Q_k</comment>
      </scope>
      <comment>find the largest value in this column</comment>
      <comment>this is used to normalize the column and mitigate overflow/underflow</comment>
    </method>
    <comment>number of rows</comment>
    <comment>number of columns</comment>
    <comment>smallest of m and n</comment>
  </class>
</source>
