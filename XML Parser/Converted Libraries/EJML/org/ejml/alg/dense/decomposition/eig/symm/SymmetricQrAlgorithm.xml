<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.decomposition.eig.symm">
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.ops.CommonOps" />
  <class name="SymmetricQrAlgorithm" startLine="25">
    <implements name="A" />
    <implements name="B" />
    <javadoc>
      <text>* <p>
 * Computes the eigenvalues and eigenvectors of a symmetric tridiagonal matrix using the symmetric QR algorithm.
 * </p>
 * <p>
 * This implementation is based on the algorithm is sketched out in:<br>
 * David S. Watkins, "Fundamentals of Matrix Computations," Second Edition. page 377-385
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="SymmetricQREigenHelper" name="helper" />
    <declaration type="DenseMatrix64F" name="Q" />
    <declaration type="double" name="eigenvalues" />
    <declaration type="int" name="exceptionalThresh" />
    <declaration type="int" name="maxIterations" />
    <declaration type="boolean" name="fastEigenvalues" />
    <declaration type="boolean" name="followingScript" />
    <method type="constructor" name="SymmetricQrAlgorithm" startLine="56" endLine="58" />
    <javadoc>
      <text>* Creates a new SymmetricQREigenvalue class that declares its own SymmetricQREigenHelper.</text>
    </javadoc>
    <method type="constructor" name="SymmetricQrAlgorithm" startLine="63" endLine="65" />
    <method type="void" name="setMaxIterations" startLine="67" endLine="69" />
    <method type="DenseMatrix64F" name="getQ" startLine="71" endLine="73" />
    <method type="void" name="setQ" startLine="75" endLine="77" />
    <method type="void" name="setFastEigenvalues" startLine="79" endLine="81" />
    <javadoc>
      <text>* Returns the eigenvalue at the specified index.</text>
      <param>index Which eigenvalue.</param>
      <return>The eigenvalue.</return>
    </javadoc>
    <method type="double" name="getEigenvalue" startLine="89" endLine="91" />
    <javadoc>
      <text>* Returns the number of eigenvalues available.</text>
      <return>How many eigenvalues there are.</return>
    </javadoc>
    <method type="int" name="getNumberOfEigenvalues" startLine="98" endLine="100" />
    <javadoc>
      <text>* Computes the eigenvalue of the provided tridiagonal matrix.  Note that only the upper portion
 * needs to be tridiagonal.  The bottom diagonal is assumed to be the same as the top.</text>
      <param>sideLength Number of rows and columns in the input matrix.</param>
      <param>diag Diagonal elements from tridiagonal matrix. Modified.</param>
      <param>off Off diagonal elements from tridiagonal matrix. Modified.</param>
      <return>true if it succeeds and false if it fails.</return>
    </javadoc>
    <method type="boolean" name="process" startLine="114" endLine="126" />
    <method type="boolean" name="process" startLine="130" endLine="138" />
    <method type="boolean" name="_process" startLine="141" endLine="172">
      <scope startLine="142" endLine="168">
        <scope startLine="144" endLine="146" />
        <scope startLine="148" endLine="154" />
        <scope startLine="154" endLine="160" />
        <scope startLine="160" endLine="163" />
        <scope startLine="163" endLine="165" />
        <comment>if it has cycled too many times give up</comment>
        <comment>System.out.println("Steps = "+helper.steps);</comment>
        <comment>see if it is done processing this submatrix</comment>
        <comment>There are analytical solutions to this case. Just compute them directly.</comment>
        <comment>TODO might be able to speed this up by doing the 3 by 3 case also</comment>
        <comment>it isn't a good sign if exceptional shifts are being done here</comment>
        <comment>helper.printMatrix();</comment>
      </scope>
      <comment>helper.printMatrix();</comment>
    </method>
    <javadoc>
      <text>* First looks for zeros and then performs the implicit single step in the QR Algorithm.</text>
    </javadoc>
    <method type="void" name="performStep" startLine="177" endLine="205">
      <scope startLine="179" endLine="185">
        <scope startLine="180" endLine="184" />
      </scope>
      <declaration type="double" name="lambda" />
      <scope startLine="189" endLine="198">
        <scope startLine="190" endLine="193" />
        <scope startLine="193" endLine="197" />
        <comment>Using the true eigenvalues will in general lead to the fastest convergence</comment>
        <comment>typically takes 1 or 2 steps</comment>
      </scope>
      <scope startLine="198" endLine="201">
        <comment>the current eigenvalue isn't working so try something else</comment>
      </scope>
      <comment>check for zeros</comment>
      <comment>similar transforms</comment>
    </method>
    <comment>performs many of the low level calculations</comment>
    <comment>transpose of the orthogonal matrix</comment>
    <comment>the eigenvalues previously computed</comment>
    <comment>should it ever analytically compute eigenvalues</comment>
    <comment>if this is true then it can't compute eigenvalues at the same time</comment>
    <comment>is it following a script or not</comment>
  </class>
</source>
