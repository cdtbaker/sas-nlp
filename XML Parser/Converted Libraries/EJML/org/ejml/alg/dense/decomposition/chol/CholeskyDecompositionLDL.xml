<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.decomposition.chol">
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.factory.DecompositionInterface" />
  <class name="CholeskyDecompositionLDL" startLine="25">
    <implements name="DecompositionInterface<DenseMatrix64F>" />
    <javadoc>
      <text>* <p>
 * This variant on the Cholesky decomposition avoid the need to take the square root
 * by performing the following decomposition:<br>
 * <br>
 * L*D*L<sup>T</sup>=A<br>
 * <br>
 * where L is a lower triangular matrix with zeros on the diagonal. D is a diagonal matrix.
 * The diagonal elements of L are equal to one.
 * </p>
 * <p>
 * Unfortunately the speed advantage of not computing the square root is washed out by the
 * increased number of array accesses.  There only appears to be a slight speed boost for
 * very small matrices.
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="int" name="maxWidth" />
    <declaration type="int" name="n" />
    <declaration type="DenseMatrix64F" name="L" />
    <declaration type="double[]" name="el" />
    <declaration type="double[]" name="d" />
    <declaration type="double" name="vv" />
    <method type="void" name="setExpectedMaxSize" startLine="61" endLine="73">
      <scope startLine="62" endLine="64" />
    </method>
    <javadoc>
      <text>* <p>
 * Performs Choleksy decomposition on the provided matrix.
 * </p>
 * <p>
 * If the matrix is not positive definite then this function will return
 * false since it can't complete its computations.  Not all errors will be
 * found.
 * </p></text>
      <param>mat A symetric n by n positive definite matrix.</param>
      <return>True if it was able to finish the decomposition.</return>
    </javadoc>
    <method type="boolean" name="decompose" startLine="88" endLine="128">
      <scope startLine="89" endLine="91" />
      <scope startLine="91" endLine="93" />
      <declaration type="double" name="d_inv" />
      <scope startLine="99" endLine="119">
        <scope startLine="100" endLine="118">
          <declaration type="double" name="sum" />
          <scope startLine="103" endLine="105" />
          <scope startLine="107" endLine="115" />
          <scope startLine="115" endLine="117" />
        </scope>
        <comment>is it positive-definate?</comment>
      </scope>
      <scope startLine="121" endLine="125">
        <scope startLine="122" endLine="124" />
      </scope>
      <comment>zero the top right corner.</comment>
    </method>
    <method type="boolean" name="inputModified" startLine="131" endLine="133" />
    <javadoc>
      <text>* Diagonal elements of the diagonal D matrix.</text>
      <return>diagonal elements of D</return>
    </javadoc>
    <method type="double[]" name="getD" startLine="140" endLine="142" />
    <javadoc>
      <text>* Returns L matrix from the decomposition.<br>
 * L*D*L<sup>T</sup>=A</text>
      <return>A lower triangular matrix.</return>
    </javadoc>
    <method type="DenseMatrix64F" name="getL" startLine="150" endLine="152" />
    <method type="double[]" name="_getVV" startLine="154" endLine="156" />
    <comment>it can decompose a matrix up to this width</comment>
    <comment>width and height of the matrix</comment>
    <comment>the decomposed matrix</comment>
    <comment>the D vector</comment>
    <comment>tempoary variable used by various functions</comment>
  </class>
</source>
