<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.decomposition.eig">
  <import name="org.ejml.alg.dense.decomposition.eig.symm.SymmetricQREigenHelper" />
  <import name="org.ejml.alg.dense.decomposition.eig.symm.SymmetricQrAlgorithm" />
  <import name="org.ejml.alg.dense.decomposition.hessenberg.TridiagonalSimilarDecomposition" />
  <import name="org.ejml.data.Complex64F" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.factory.DecompositionFactory" />
  <import name="org.ejml.factory.EigenDecomposition" />
  <import name="org.ejml.ops.CommonOps" />
  <class name="SymmetricQRAlgorithmDecomposition" startLine="31">
    <implements name="EigenDecomposition<DenseMatrix64F>" />
    <javadoc>
      <text>* <p>
 * Computes the eigenvalues and eigenvectors of a real symmetric matrix using the symmetric implicit QR algorithm.
 * Inside each iteration a QR decomposition of A<sub>i</sub>-p<sub>i</sub>I is implicitly computed.
 * </p>
 * <p>
 * This implementation is based on the algorithm is sketched out in:<br>
 * David S. Watkins, "Fundamentals of Matrix Computations," Second Edition. page 377-385
 * </p></text>
      <see>org.ejml.alg.dense.decomposition.eig.symm.SymmetricQrAlgorithm</see>
      <see>org.ejml.alg.dense.decomposition.hessenberg.TridiagonalDecompositionHouseholder</see>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="TridiagonalSimilarDecomposition<DenseMatrix64F>" name="decomp" />
    <declaration type="SymmetricQREigenHelper" name="helper" />
    <declaration type="SymmetricQrAlgorithm" name="vector" />
    <declaration type="boolean" name="computeVectorsWithValues" />
    <declaration type="double" name="values" />
    <declaration type="double" name="diag" />
    <declaration type="double" name="off" />
    <declaration type="double" name="diagSaved" />
    <declaration type="double" name="offSaved" />
    <declaration type="DenseMatrix64F" name="V" />
    <declaration type="DenseMatrix64F" name="eigenvectors" />
    <declaration type="boolean" name="computeVectors" />
    <method type="constructor" name="SymmetricQRAlgorithmDecomposition" startLine="79" endLine="87" />
    <method type="constructor" name="SymmetricQRAlgorithmDecomposition" startLine="89" endLine="92" />
    <method type="void" name="setComputeVectorsWithValues" startLine="94" endLine="99" />
    <javadoc>
      <text>* Used to limit the number of internal QR iterations that the QR algorithm performs.  20
 * should be enough for most applications.</text>
      <param>max The maximum number of QR iterations it will perform.</param>
    </javadoc>
    <method type="void" name="setMaxIterations" startLine="107" endLine="109" />
    <method type="int" name="getNumberOfEigenvalues" startLine="112" endLine="114" />
    <method type="Complex64F" name="getEigenvalue" startLine="117" endLine="119" />
    <method type="DenseMatrix64F" name="getEigenVector" startLine="122" endLine="124" />
    <javadoc>
      <text>* Decomposes the matrix using the QR algorithm.  Care was taken to minimize unnecessary memory copying
 * and cache skipping.</text>
      <param>orig The matrix which is being decomposed.  Not modified.</param>
      <return>true if it decomposed the matrix or false if an error was detected.  This will not catch all errors.</return>
    </javadoc>
    <method type="boolean" name="decompose" startLine="134" endLine="162">
      <declaration type="int" name="N" />
      <scope startLine="144" endLine="147" />
      <scope startLine="153" endLine="159">
        <scope startLine="154" endLine="156" />
        <scope startLine="156" endLine="158" />
      </scope>
      <scope startLine="159" endLine="161" />
      <comment>compute a similar tridiagonal matrix</comment>
      <comment>Tell the helper to work with this matrix</comment>
    </method>
    <method type="boolean" name="inputModified" startLine="165" endLine="167" />
    <method type="boolean" name="extractTogether" startLine="169" endLine="189">
      <comment>extract the orthogonal from the similar transform</comment>
      <comment>tell eigenvector algorithm to update this matrix as it computes the rotators</comment>
      <comment>extract the eigenvalues</comment>
      <comment>the V matrix contains the eigenvectors.  Convert those into column vectors</comment>
      <comment>save a copy of them since this data structure will be recycled next</comment>
    </method>
    <method type="boolean" name="extractSeparate" startLine="191" endLine="217">
      <comment>---- set up the helper to decompose the same tridiagonal matrix</comment>
      <comment>swap arrays instead of copying them to make it slightly faster</comment>
      <comment>extract the orthogonal from the similar transform</comment>
      <comment>tell eigenvector algorithm to update this matrix as it computes the rotators</comment>
      <comment>extract eigenvectors</comment>
      <comment>the ordering of the eigenvalues might have changed</comment>
      <comment>the V matrix contains the eigenvectors.  Convert those into column vectors</comment>
    </method>
    <javadoc>
      <text>* Computes eigenvalues only</text>
      <return />
    </javadoc>
    <method type="boolean" name="computeEigenValues" startLine="224" endLine="239">
      <comment>make a copy of the internal tridiagonal matrix data for later use</comment>
      <comment>extract the eigenvalues</comment>
      <comment>save a copy of them since this data structure will be recycled next</comment>
    </method>
    <comment>computes a tridiagonal matrix whose eigenvalues are the same as the original</comment>
    <comment>matrix and can be easily computed.</comment>
    <comment>helper class for eigenvalue and eigenvector algorithms</comment>
    <comment>computes the eigenvectors</comment>
    <comment>should it compute eigenvectors at the same time as the eigenvalues?</comment>
    <comment>where the found eigenvalues are stored</comment>
    <comment>where the tridiagonal matrix is stored</comment>
    <comment>temporary variable used to store/compute eigenvectors</comment>
    <comment>the extracted eigenvectors</comment>
    <comment>should it compute eigenvectors or just eigenvalues</comment>
  </class>
</source>
