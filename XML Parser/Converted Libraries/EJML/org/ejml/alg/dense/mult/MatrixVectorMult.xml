<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.mult">
  <import name="org.ejml.data.D1Matrix64F" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.data.RowD1Matrix64F" />
  <class name="MatrixVectorMult" startLine="26">
    <javadoc>
      <text>* <p>
 * This class contains various types of matrix vector multiplcation operations for {@link DenseMatrix64F}.
 * </p>
 * <p>
 * If a matrix has only one column or row then it is a vector.  There are faster algorithms
 * that can be used to multiply matrices by vectors.  Strangely, even though the operations
 * count smaller, the difference between this and a regular matrix multiply is insignificant
 * for large matrices.  The smaller matrices there is about a 40% speed improvement.  In
 * practice the speed improvement for smaller matrices is not noticeable unless 10s of millions
 * of matrix multiplications are being performed.
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* <p>
 * Performs a matrix vector multiply.<br>
 * <br>
 * c = A * b <br>
 * and<br>
 * c = A * b<sup>T</sup> <br>
 * <br>
 * c<sub>i</sub> = Sum{ j=1:n, a<sub>ij</sub> * b<sub>j</sub>}<br>
 * <br>
 * where A is a matrix, b is a column or transposed row vector, and c is a column vector.
 * </p></text>
      <param>a A matrix that is m by n. Not modified.</param>
      <param>b A vector that has length n. Not modified.</param>
      <param>c A column vector that has length m. Modified.</param>
    </javadoc>
    <method type="void" name="mult" startLine="62" endLine="93">
      <scope startLine="63" endLine="65" />
      <scope startLine="65" endLine="67" />
      <scope startLine="69" endLine="73">
        <scope startLine="70" endLine="72" />
      </scope>
      <scope startLine="73" endLine="77">
        <scope startLine="74" endLine="76" />
      </scope>
      <scope startLine="77" endLine="79" />
      <declaration type="int" name="indexA" />
      <declaration type="int" name="cIndex" />
      <declaration type="double" name="b0" />
      <scope startLine="84" endLine="92">
        <declaration type="double" name="total" />
        <scope startLine="87" endLine="89" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Performs a matrix vector multiply.<br>
 * <br>
 * C = C + A * B <br>
 * or<br>
 * C = C + A * B<sup>T</sup> <br>
 * <br>
 * c<sub>i</sub> = Sum{ j=1:n, c<sub>i</sub> + a<sub>ij</sub> * b<sub>j</sub>}<br>
 * <br>
 * where A is a matrix, B is a column or transposed row vector, and C is a column vector.
 * </p></text>
      <param>A A matrix that is m by n. Not modified.</param>
      <param>B A vector that has length n. Not modified.</param>
      <param>C A column vector that has length m. Modified.</param>
    </javadoc>
    <method type="void" name="multAdd" startLine="113" endLine="143">
      <scope startLine="115" endLine="117" />
      <scope startLine="117" endLine="119" />
      <scope startLine="120" endLine="124">
        <scope startLine="121" endLine="123" />
      </scope>
      <scope startLine="124" endLine="128">
        <scope startLine="125" endLine="127" />
      </scope>
      <scope startLine="128" endLine="130" />
      <declaration type="int" name="indexA" />
      <declaration type="int" name="cIndex" />
      <scope startLine="134" endLine="142">
        <declaration type="double" name="total" />
        <scope startLine="137" endLine="139" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Performs a matrix vector multiply.<br>
 * <br>
 * C = A<sup>T</sup> * B <br>
 * where B is a column vector.<br>
 * or<br>
 * C = A<sup>T</sup> * B<sup>T</sup> <br>
 * where B is a row vector. <br>
 * <br>
 * c<sub>i</sub> = Sum{ j=1:n, a<sub>ji</sub> * b<sub>j</sub>}<br>
 * <br>
 * where A is a matrix, B is a column or transposed row vector, and C is a column vector.
 * </p>
 * <p>
 * This implementation is optimal for small matrices.  There is a huge performance hit when
 * used on large matrices due to CPU cache issues.
 * </p></text>
      <param>A A matrix that is m by n. Not modified.</param>
      <param>B A that has length m and is a column. Not modified.</param>
      <param>C A column vector that has length n. Modified.</param>
    </javadoc>
    <method type="void" name="multTransA_small" startLine="169" endLine="199">
      <scope startLine="170" endLine="172" />
      <scope startLine="172" endLine="174" />
      <scope startLine="175" endLine="179">
        <scope startLine="176" endLine="178" />
      </scope>
      <scope startLine="179" endLine="183">
        <scope startLine="180" endLine="182" />
      </scope>
      <scope startLine="183" endLine="185" />
      <declaration type="int" name="cIndex" />
      <scope startLine="188" endLine="198">
        <declaration type="double" name="total" />
        <declaration type="int" name="indexA" />
        <scope startLine="192" endLine="195" />
      </scope>
    </method>
    <javadoc>
      <text>* An alternative implementation of {@link #multTransA_small} that performs well on large
 * matrices.  There is a relative performance hit when used on small matrices.</text>
      <param>A A matrix that is m by n. Not modified.</param>
      <param>B A Vector that has length m. Not modified.</param>
      <param>C A column vector that has length n. Modified.</param>
    </javadoc>
    <method type="void" name="multTransA_reorder" startLine="210" endLine="240">
      <scope startLine="211" endLine="213" />
      <scope startLine="213" endLine="215" />
      <scope startLine="216" endLine="220">
        <scope startLine="217" endLine="219" />
      </scope>
      <scope startLine="220" endLine="224">
        <scope startLine="221" endLine="223" />
      </scope>
      <scope startLine="224" endLine="226" />
      <declaration type="double" name="B_val" />
      <scope startLine="229" endLine="231" />
      <declaration type="int" name="indexA" />
      <scope startLine="234" endLine="239">
        <scope startLine="236" endLine="238" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Performs a matrix vector multiply.<br>
 * <br>
 * C = C + A<sup>T</sup> * B <br>
 * or<br>
 * C = C<sup>T</sup> + A<sup>T</sup> * B<sup>T</sup> <br>
 * <br>
 * c<sub>i</sub> = Sum{ j=1:n, c<sub>i</sub> + a<sub>ji</sub> * b<sub>j</sub>}<br>
 * <br>
 * where A is a matrix, B is a column or transposed row vector, and C is a column vector.
 * </p>
 * <p>
 * This implementation is optimal for small matrices.  There is a huge performance hit when
 * used on large matrices due to CPU cache issues.
 * </p></text>
      <param>A A matrix that is m by n. Not modified.</param>
      <param>B A vector that has length m. Not modified.</param>
      <param>C A column vector that has length n. Modified.</param>
    </javadoc>
    <method type="void" name="multAddTransA_small" startLine="264" endLine="294">
      <scope startLine="265" endLine="267" />
      <scope startLine="267" endLine="269" />
      <scope startLine="270" endLine="274">
        <scope startLine="271" endLine="273" />
      </scope>
      <scope startLine="274" endLine="278">
        <scope startLine="275" endLine="277" />
      </scope>
      <scope startLine="278" endLine="280" />
      <declaration type="int" name="cIndex" />
      <scope startLine="283" endLine="293">
        <declaration type="double" name="total" />
        <declaration type="int" name="indexA" />
        <scope startLine="287" endLine="290" />
      </scope>
    </method>
    <javadoc>
      <text>* An alternative implementation of {@link #multAddTransA_small} that performs well on large
 * matrices.  There is a relative performance hit when used on small matrices.</text>
      <param>A A matrix that is m by n. Not modified.</param>
      <param>B A vector that has length m. Not modified.</param>
      <param>C A column vector that has length n. Modified.</param>
    </javadoc>
    <method type="void" name="multAddTransA_reorder" startLine="305" endLine="330">
      <scope startLine="306" endLine="308" />
      <scope startLine="308" endLine="310" />
      <scope startLine="311" endLine="315">
        <scope startLine="312" endLine="314" />
      </scope>
      <scope startLine="315" endLine="319">
        <scope startLine="316" endLine="318" />
      </scope>
      <scope startLine="319" endLine="321" />
      <declaration type="int" name="indexA" />
      <scope startLine="324" endLine="329">
        <declaration type="double" name="B_val" />
        <scope startLine="326" endLine="328" />
      </scope>
    </method>
  </class>
</source>
