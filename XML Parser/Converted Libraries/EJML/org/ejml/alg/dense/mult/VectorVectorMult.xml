<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.mult">
  <import name="org.ejml.data.D1Matrix64F" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.data.RowD1Matrix64F" />
  <class name="VectorVectorMult" startLine="26">
    <javadoc>
      <text>* Operations that involve multiplication of two vectors.</text>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <param>x</param>
      <param>y</param>
      <param>A</param>
    </javadoc>
    <method type="void" name="mult" startLine="42" endLine="46">
      <comment>sanity check inputs</comment>
      <comment>call the outer or inner product</comment>
    </method>
    <javadoc>
      <text>* <p>
 * Computes the inner product of the two vectors.  In geometry this is known as the dot product.<br>
 * <br>
 * &sum;<sub>k=1:n</sub> x<sub>k</sub> * y<sub>k</sub><br>
 * where x and y are vectors with n elements.
 * </p>
 * <p>
 * These functions are often used inside of highly optimized code and therefor sanity checks are
 * kept to a minimum.  It is not recommended that any of these functions be used directly.
 * </p></text>
      <param>x A vector with n elements. Not modified.</param>
      <param>y A vector with n elements. Not modified.</param>
      <return>The inner product of the two vectors.</return>
    </javadoc>
    <method type="double" name="innerProd" startLine="66" endLine="75">
      <declaration type="int" name="m" />
      <declaration type="double" name="total" />
      <scope startLine="70" endLine="72" />
    </method>
    <javadoc>
      <text>* <p>
 * x<sup>T</sup>Ay
 * </p></text>
      <param>x  A vector with n elements. Not modified.</param>
      <param>A  A matrix with n by m elements.  Not modified.</param>
      <param>y  A vector with m elements. Not modified.</param>
      <return>The results.</return>
    </javadoc>
    <method type="double" name="innerProdA" startLine="88" endLine="110">
      <declaration type="int" name="n" />
      <declaration type="int" name="m" />
      <declaration type="double" name="result" />
      <scope startLine="99" endLine="107">
        <declaration type="double" name="total" />
        <scope startLine="102" endLine="104" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * x<sup>T</sup>A<sup>T</sup>y
 * </p></text>
      <param>x  A vector with n elements. Not modified.</param>
      <param>A  A matrix with n by n elements.  Not modified.</param>
      <param>y  A vector with n elements. Not modified.</param>
      <return>The results.</return>
    </javadoc>
    <method type="double" name="innerProdTranA" startLine="125" endLine="149">
      <declaration type="int" name="n" />
      <declaration type="double" name="result" />
      <scope startLine="138" endLine="146">
        <declaration type="double" name="total" />
        <scope startLine="141" endLine="143" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Sets A &isin; &real; <sup>m &times; n</sup> equal to an outer product multiplication of the two
 * vectors.  This is also known as a rank-1 operation.<br>
 * <br>
 * A = x * y'
 * where x &isin; &real; <sup>m</sup> and y &isin; &real; <sup>n</sup> are vectors.
 * </p>
 * <p>
 * Which is equivalent to: A<sub>ij</sub> = x<sub>i</sub>*y<sub>j</sub>
 * </p>
 * <p>
 * These functions are often used inside of highly optimized code and therefor sanity checks are
 * kept to a minimum.  It is not recommended that any of these functions be used directly.
 * </p></text>
      <param>x A vector with m elements. Not modified.</param>
      <param>y A vector with n elements. Not modified.</param>
      <param>A A Matrix with m by n elements. Modified.</param>
    </javadoc>
    <method type="void" name="outerProd" startLine="172" endLine="183">
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="int" name="index" />
      <scope startLine="177" endLine="182">
        <declaration type="double" name="xdat" />
        <scope startLine="179" endLine="181" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Adds to A &isin; &real; <sup>m &times; n</sup> the results of an outer product multiplication
 * of the two vectors.  This is also known as a rank 1 update.<br>
 * <br>
 * A = A + &gamma; x * y<sup>T</sup>
 * where x &isin; &real; <sup>m</sup> and y &isin; &real; <sup>n</sup> are vectors.
 * </p>
 * <p>
 * Which is equivalent to: A<sub>ij</sub> = A<sub>ij</sub> + &gamma; x<sub>i</sub>*y<sub>j</sub>
 * </p>
 * <p>
 * These functions are often used inside of highly optimized code and therefor sanity checks are
 * kept to a minimum.  It is not recommended that any of these functions be used directly.
 * </p></text>
      <param>gamma A multiplication factor for the outer product.</param>
      <param>x A vector with m elements. Not modified.</param>
      <param>y A vector with n elements. Not modified.</param>
      <param>A A Matrix with m by n elements. Modified.</param>
    </javadoc>
    <method type="void" name="addOuterProd" startLine="207" endLine="227">
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="int" name="index" />
      <scope startLine="212" endLine="219">
        <scope startLine="213" endLine="218">
          <declaration type="double" name="xdat" />
          <scope startLine="215" endLine="217" />
        </scope>
      </scope>
      <scope startLine="219" endLine="226">
        <scope startLine="220" endLine="225">
          <declaration type="double" name="xdat" />
          <scope startLine="222" endLine="224" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Multiplies a householder reflection against a vector:<br>
 * <br>
 * y = (I + &gamma; u u<sup>T</sup>)x<br>
 * </p>
 * <p>
 * The Householder reflection is used in some implementations of QR decomposition.
 * </p></text>
      <param>u A vector. Not modified.</param>
      <param>x a vector. Not modified.</param>
      <param>y Vector where the result are written to.</param>
    </javadoc>
    <method type="void" name="householder" startLine="246" endLine="256">
      <declaration type="int" name="n" />
      <declaration type="double" name="sum" />
      <scope startLine="250" endLine="252" />
      <scope startLine="253" endLine="255" />
    </method>
    <javadoc>
      <text>* <p>
 * Performs a rank one update on matrix A using vectors u and w.  The results are stored in B.<br>
 * <br>
 * B = A + &gamma; u w<sup>T</sup><br>
 * </p>
 * <p>
 * This is called a rank1 update because the matrix u w<sup>T</sup> has a rank of 1.  Both A and B
 * can be the same matrix instance, but there is a special rank1Update for that.
 * </p></text>
      <param>gamma A scalar.</param>
      <param>A A m by m matrix. Not modified.</param>
      <param>u A vector with m elements.  Not modified.</param>
      <param>w A vector with m elements.  Not modified.</param>
      <param>B A m by m matrix where the results are stored. Modified.</param>
    </javadoc>
    <method type="void" name="rank1Update" startLine="279" endLine="290">
      <declaration type="int" name="n" />
      <declaration type="int" name="matrixIndex" />
      <scope startLine="283" endLine="289">
        <declaration type="double" name="elementU" />
        <scope startLine="286" endLine="288" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Performs a rank one update on matrix A using vectors u and w.  The results are stored in A.<br>
 * <br>
 * A = A + &gamma; u w<sup>T</sup><br>
 * </p>
 * <p>
 * This is called a rank1 update because the matrix u w<sup>T</sup> has a rank of 1.
 * </p></text>
      <param>gamma A scalar.</param>
      <param>A A m by m matrix. Modified.</param>
      <param>u A vector with m elements.  Not modified.</param>
    </javadoc>
    <method type="void" name="rank1Update" startLine="310" endLine="321">
      <declaration type="int" name="n" />
      <declaration type="int" name="matrixIndex" />
      <scope startLine="314" endLine="320">
        <declaration type="double" name="elementU" />
        <scope startLine="317" endLine="319" />
      </scope>
    </method>
    <comment>TODO write this</comment>
    <comment>TODO create a VectorOps for meer mortals to use?</comment>
    <comment>TODO have DenseMatrix64F flag itself as being a vector to make checks faster?</comment>
    <comment>TODO better name for this</comment>
  </class>
</source>
