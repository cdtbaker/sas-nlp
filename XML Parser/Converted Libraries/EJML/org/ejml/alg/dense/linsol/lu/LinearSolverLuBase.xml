<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.linsol.lu">
  <import name="org.ejml.alg.dense.decomposition.lu.LUDecompositionBase" />
  <import name="org.ejml.alg.dense.linsol.LinearSolverAbstract" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <class name="LinearSolverLuBase" extends="LinearSolverAbstract" startLine="26">
    <javadoc>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="LUDecompositionBase" name="decomp" />
    <method type="constructor" name="LinearSolverLuBase" startLine="33" endLine="36" />
    <method type="boolean" name="setA" startLine="39" endLine="43" />
    <method type="double" name="quality" startLine="46" endLine="48" />
    <method type="void" name="invert" startLine="51" endLine="70">
      <declaration type="double[]" name="vv" />
      <declaration type="DenseMatrix64F" name="LU" />
      <declaration type="int" name="n" />
      <declaration type="double[]" name="dataInv" />
      <scope startLine="62" endLine="69">
        <declaration type="int" name="index" />
        <comment>don't need to change inv into an identity matrix before hand</comment>
        <comment>for( int i = 0; i < n; i++ ) dataInv[i* n +j] = vv[i];</comment>
      </scope>
    </method>
    <javadoc>
      <text>* This attempts to improve upon the solution generated by account
 * for numerical imprecisions.  See numerical recipes for more information.  It
 * is assumed that solve has already been run on 'b' and 'x' at least once.</text>
      <param>b A matrix. Not modified.</param>
      <param>x A matrix. Modified.</param>
    </javadoc>
    <method type="void" name="improveSol" startLine="81" endLine="114">
      <scope startLine="82" endLine="84" />
      <declaration type="double[]" name="dataA" />
      <declaration type="double[]" name="dataB" />
      <declaration type="double[]" name="dataX" />
      <declaration type="int" name="nc" />
      <declaration type="int" name="n" />
      <declaration type="double[]" name="vv" />
      <declaration type="DenseMatrix64F" name="LU" />
      <scope startLine="97" endLine="113">
        <scope startLine="98" endLine="108">
          <declaration type="double" name="sdp" />
          <scope startLine="102" endLine="105" />
        </scope>
        <scope startLine="110" endLine="112" />
        <comment>*NOTE* in the book this is a long double.  extra precision might be required</comment>
        <comment>BigDecimal sdp = new BigDecimal(-dataB[ i * nc + k]);</comment>
        <comment>sdp = sdp.add( BigDecimal.valueOf(dataA[i* n +j] * dataX[ j * nc + k]));</comment>
        <comment>vv[i] = sdp.doubleValue();</comment>
      </scope>
      <comment>BigDecimal sdp = new BigDecimal(0);</comment>
    </method>
    <method type="boolean" name="modifiesA" startLine="117" endLine="119" />
    <method type="boolean" name="modifiesB" startLine="122" endLine="124" />
  </class>
</source>
