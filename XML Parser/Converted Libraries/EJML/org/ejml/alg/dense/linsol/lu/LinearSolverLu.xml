<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.linsol.lu">
  <import name="org.ejml.alg.dense.decomposition.lu.LUDecompositionBase" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <class name="LinearSolverLu" extends="LinearSolverLuBase" startLine="25">
    <javadoc>
      <text>* For each column in the B matrix it makes a copy, which is then solved for and
 * writen into X.  By making a copy of the column cpu cache issues are reduced.</text>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="boolean" name="doImprove" />
    <method type="constructor" name="LinearSolverLu" startLine="35" endLine="37" />
    <method type="constructor" name="LinearSolverLu" startLine="39" endLine="42" />
    <method type="void" name="solve" startLine="46" endLine="74">
      <scope startLine="47" endLine="49" />
      <declaration type="int" name="numCols" />
      <declaration type="double[]" name="dataB" />
      <declaration type="double[]" name="dataX" />
      <declaration type="double[]" name="vv" />
      <scope startLine="63" endLine="69">
        <declaration type="int" name="index" />
      </scope>
      <scope startLine="71" endLine="73" />
      <comment>for( int j = 0; j < numCols; j++ ) {</comment>
      <comment>for( int i = 0; i < this.numCols; i++ ) vv[i] = dataB[i*numCols+j];</comment>
      <comment>decomp._solveVectorInternal(vv);</comment>
      <comment>for( int i = 0; i < this.numCols; i++ ) dataX[i*numCols+j] = vv[i];</comment>
      <comment>}</comment>
    </method>
  </class>
</source>
