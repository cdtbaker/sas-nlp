<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.linsol.qr">
  <import name="org.ejml.UtilEjml" />
  <import name="org.ejml.alg.dense.decomposition.TriangularSolver" />
  <import name="org.ejml.alg.dense.linsol.LinearSolverAbstract" />
  <import name="org.ejml.alg.dense.linsol.LinearSolverSafe" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.factory.LinearSolver" />
  <import name="org.ejml.factory.LinearSolverFactory" />
  <import name="org.ejml.factory.QRPDecomposition" />
  <import name="org.ejml.ops.CommonOps" />
  <import name="org.ejml.ops.SpecializedOps" />
  <class name="BaseLinearSolverQrp" extends="LinearSolverAbstract" startLine="32">
    <javadoc>
      <text>* <p>
 * Base class for QR pivot based pseudo inverse classes.  It will return either the
 * basic of minimal 2-norm solution. See [1] for details.  The minimal 2-norm solution refers to the solution
 * 'x' whose 2-norm is the smallest making it unique, not some other error function.
 * </p>
 * <p>
 * <pre>
 * R = [ R12  R12 ] r      P^T*x = [ y ] r       Q^T*b = [ c ] r
 * [  0    0  ] m-r            [ z ] n -r            [ d ] m-r
 * r   n-r
 * where r is the rank of the matrix and (m,n) is the dimension of the linear system.
 * </pre>
 * </p>
 * <p>
 * <pre>
 * The solution 'x' is found by solving the system below.  The basic solution is found by setting z=0
 * [ R_11^-1*(c - R12*z) ]
 * x = [          z          ]
 * </pre>
 * </p>
 * <p>
 * NOTE: The matrix rank is determined using the provided QR decomposition. [1] mentions that this will not always
 * work and could cause some problems.
 * </p>
 * <p>
 * [1] See page 258-259 in Gene H. Golub and Charles F. Van Loan "Matrix Computations" 3rd Ed, 1996
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="QRPDecomposition<DenseMatrix64F>" name="decomposition" />
    <declaration type="boolean" name="norm2Solution" />
    <declaration type="DenseMatrix64F" name="Y" />
    <declaration type="DenseMatrix64F" name="R" />
    <declaration type="DenseMatrix64F" name="R11" />
    <declaration type="DenseMatrix64F" name="I" />
    <declaration type="int" name="rank" />
    <declaration type="LinearSolver<DenseMatrix64F>" name="internalSolver" />
    <declaration type="DenseMatrix64F" name="W" />
    <javadoc>
      <text>* Configures internal parameters.</text>
      <param>decomposition Used to solve the linear system.</param>
      <param>norm2Solution If true then the optimal 2-norm solution will be computed for degenerate systems.</param>
    </javadoc>
    <method type="constructor" name="BaseLinearSolverQrp" startLine="101" endLine="107" />
    <method type="boolean" name="setA" startLine="110" endLine="149">
      <scope startLine="127" endLine="146">
        <scope startLine="138" endLine="145">
          <scope startLine="139" endLine="144" />
        </scope>
        <comment>extract the R12 sub-matrix</comment>
        <comment>W=inv(R11)*R12</comment>
        <comment>set the identity matrix in the upper portion</comment>
      </scope>
      <comment>extract the r11 triangle sub matrix</comment>
    </method>
    <method type="double" name="quality" startLine="152" endLine="154" />
    <javadoc>
      <text>* <p>
 * Upgrades the basic solution to the optimal 2-norm solution.
 * </p>
 * <pre>
 * First solves for 'z'
 * || x_b - P*[ R_11^-1 * R_12 ] * z ||2
 * min z ||         [ - I_{n-r}      ]     ||
 * </pre></text>
      <param>X basic solution, also output solution</param>
    </javadoc>
    <method type="void" name="upgradeSolution" startLine="171" endLine="183">
      <declaration type="DenseMatrix64F" name="z" />
      <comment>recycle Y</comment>
      <comment>compute the z which will minimize the 2-norm of X</comment>
      <comment>because of the identity matrix tacked onto the end 'A' should never be singular</comment>
      <comment>compute X by tweaking the original</comment>
    </method>
    <method type="void" name="invert" startLine="186" endLine="194" />
    <comment>if true then only the basic solution will be found</comment>
    <comment>stores sub-matrices inside the R matrix</comment>
    <comment>store an identity matrix for computing the inverse</comment>
    <comment>rank of the system matrix</comment>
    <comment>used to compute optimal 2-norm solution</comment>
  </class>
</source>
