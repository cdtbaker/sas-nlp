<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.linsol">
  <import name="org.ejml.alg.block.BlockMatrixOps" />
  <import name="org.ejml.alg.block.linsol.chol.BlockCholeskyOuterSolver" />
  <import name="org.ejml.data.BlockMatrix64F" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.factory.LinearSolver" />
  <class name="WrapLinearSolverBlock64" startLine="28">
    <implements name="LinearSolver<DenseMatrix64F>" />
    <javadoc>
      <text>* Wrapper that allows {@link org.ejml.factory.LinearSolver <BlockMatrix64F>} to implements {@link org.ejml.factory.LinearSolver}.  It works
 * by converting {@link DenseMatrix64F} into {@link BlockMatrix64F} and calling the equivalent
 * functions.  Since a local copy is made all input matrices are never modified.</text>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="LinearSolver<BlockMatrix64F>" name="alg" />
    <declaration type="BlockMatrix64F" name="blockA" />
    <declaration type="BlockMatrix64F" name="blockB" />
    <declaration type="BlockMatrix64F" name="blockX" />
    <method type="constructor" name="WrapLinearSolverBlock64" startLine="45" endLine="47" />
    <javadoc>
      <text>* Converts 'A' into a block matrix and call setA() on the block matrix solver.</text>
      <param>A The A matrix in the linear equation. Not modified. Reference saved.</param>
      <return>true if it can solve the system.</return>
    </javadoc>
    <method type="boolean" name="setA" startLine="56" endLine="61" />
    <method type="double" name="quality" startLine="64" endLine="66" />
    <javadoc>
      <text>* Converts B and X into block matrices and calls the block matrix solve routine.</text>
      <param>B A matrix &real; <sup>m &times; p</sup>.  Not modified.</param>
      <param>X A matrix &real; <sup>n &times; p</sup>, where the solution is written to.  Modified.</param>
    </javadoc>
    <method type="void" name="solve" startLine="75" endLine="83" />
    <javadoc>
      <text>* Creates a block matrix the same size as A_inv, inverts the matrix and copies the results back
 * onto A_inv.</text>
      <param>A_inv Where the inverted matrix saved. Modified.</param>
    </javadoc>
    <method type="void" name="invert" startLine="92" endLine="98" />
    <method type="boolean" name="modifiesA" startLine="101" endLine="103" />
    <method type="boolean" name="modifiesB" startLine="106" endLine="108" />
    <comment>block matrix copy of the system A matrix.</comment>
    <comment>block matrix copy of B matrix passed into solve</comment>
    <comment>block matrix copy of X matrix passed into solve</comment>
  </class>
</source>
