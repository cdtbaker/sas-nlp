<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.linsol.chol">
  <import name="org.ejml.alg.dense.decomposition.TriangularSolver" />
  <import name="org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionLDL" />
  <import name="org.ejml.alg.dense.linsol.LinearSolverAbstract" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.ops.SpecializedOps" />
  <class name="LinearSolverCholLDL" extends="LinearSolverAbstract" startLine="28">
    <javadoc>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="CholeskyDecompositionLDL" name="decomp" />
    <declaration type="int" name="n" />
    <declaration type="double" name="vv" />
    <declaration type="double" name="el" />
    <declaration type="double" name="d" />
    <method type="constructor" name="LinearSolverCholLDL" startLine="39" endLine="41" />
    <method type="constructor" name="LinearSolverCholLDL" startLine="43" endLine="45" />
    <method type="boolean" name="setA" startLine="48" endLine="60">
      <scope startLine="51" endLine="57" />
      <scope startLine="57" endLine="59" />
    </method>
    <method type="double" name="quality" startLine="63" endLine="65" />
    <javadoc>
      <text>* <p>
 * Using the decomposition, finds the value of 'X' in the linear equation below:<br>
 * A*x = b<br>
 * where A has dimension of n by n, x and b are n by m dimension.
 * </p>
 * <p>
 * *Note* that 'b' and 'x' can be the same matrix instance.
 * </p></text>
      <param>B A matrix that is n by m.  Not modified.</param>
      <param>X An n by m matrix where the solution is writen to.  Modified.</param>
    </javadoc>
    <method type="void" name="solve" startLine="83" endLine="98">
      <scope startLine="84" endLine="86" />
      <declaration type="int" name="numCols" />
      <declaration type="double[]" name="dataB" />
      <declaration type="double[]" name="dataX" />
      <scope startLine="93" endLine="97" />
    </method>
    <javadoc>
      <text>* Used internally to find the solution to a single column vector.</text>
    </javadoc>
    <method type="void" name="solveInternal" startLine="103" endLine="114">
      <scope startLine="108" endLine="110" />
      <comment>solve L*s=b storing y in x</comment>
      <comment>solve D*y=s</comment>
      <comment>solve L^T*x=y</comment>
    </method>
    <javadoc>
      <text>* Sets the matrix 'inv' equal to the inverse of the matrix that was decomposed.</text>
      <param>inv Where the value of the inverse will be stored.  Modified.</param>
    </javadoc>
    <method type="void" name="invert" startLine="122" endLine="158">
      <scope startLine="123" endLine="125" />
      <declaration type="double[]" name="a" />
      <scope startLine="130" endLine="138">
        <scope startLine="131" endLine="137">
          <declaration type="double" name="sum" />
          <scope startLine="133" endLine="135" />
        </scope>
      </scope>
      <scope startLine="141" endLine="146">
        <declaration type="double" name="inv_d" />
        <scope startLine="143" endLine="145" />
      </scope>
      <scope startLine="149" endLine="157">
        <scope startLine="150" endLine="156">
          <declaration type="double" name="sum" />
          <scope startLine="152" endLine="154" />
        </scope>
      </scope>
      <comment>solve L*z = b</comment>
      <comment>solve D*y=z</comment>
      <comment>solve L^T*x = y</comment>
    </method>
    <method type="boolean" name="modifiesA" startLine="161" endLine="163" />
    <method type="boolean" name="modifiesB" startLine="166" endLine="168" />
  </class>
</source>
