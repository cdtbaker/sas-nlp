<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.linsol.qr">
  <import name="org.ejml.alg.dense.decomposition.TriangularSolver" />
  <import name="org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholderTran" />
  <import name="org.ejml.alg.dense.linsol.LinearSolverAbstract" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.ops.SpecializedOps" />
  <class name="LinearSolverQrHouseTran" extends="LinearSolverAbstract" startLine="28">
    <javadoc>
      <text>* <p>
 * QR decomposition can be used to solve for systems.  However, this is not as computationally efficient
 * as LU decomposition and costs about 3n<sup>2</sup> flops.
 * </p>
 * <p>
 * It solve for x by first multiplying b by the transpose of Q then solving for the result.
 * <br>
 * QRx=b<br>
 * Rx=Q^T b<br>
 * </p>
 * <p>
 * A column major decomposition is used in this solver.
 * <p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="QRDecompositionHouseholderTran" name="decomposer" />
    <declaration type="double[]" name="a" />
    <declaration type="int" name="maxRows" />
    <declaration type="int" name="maxCols" />
    <declaration type="DenseMatrix64F" name="QR" />
    <declaration type="DenseMatrix64F" name="U" />
    <javadoc>
      <text>* Creates a linear solver that uses QR decomposition.</text>
    </javadoc>
    <method type="constructor" name="LinearSolverQrHouseTran" startLine="61" endLine="63" />
    <method type="void" name="setMaxSize" startLine="66" endLine="70" />
    <javadoc>
      <text>* Performs QR decomposition on A</text>
      <param>A not modified.</param>
    </javadoc>
    <method type="boolean" name="setA" startLine="78" endLine="88" />
    <method type="double" name="quality" startLine="91" endLine="95">
      <comment>even those it is transposed the diagonal elements are at the same</comment>
      <comment>elements</comment>
    </method>
    <javadoc>
      <text>* Solves for X using the QR decomposition.</text>
      <param>B A matrix that is n by m.  Not modified.</param>
      <param>X An n by m matrix where the solution is written to.  Modified.</param>
    </javadoc>
    <method type="void" name="solve" startLine="104" endLine="156">
      <declaration type="double[]" name="gammas" />
      <declaration type="double[]" name="dataQR" />
      <declaration type="int" name="BnumCols" />
      <scope startLine="117" endLine="155">
        <scope startLine="120" endLine="122" />
        <scope startLine="129" endLine="146">
          <declaration type="int" name="indexU" />
          <declaration type="double" name="ub" />
          <scope startLine="134" endLine="136" />
          <scope startLine="143" endLine="145" />
        </scope>
        <scope startLine="152" endLine="154" />
        <comment>make a copy of this column in the vector</comment>
        <comment>Solve Qa=b</comment>
        <comment>a = Q'b</comment>
        <comment>a = Q_{n-1}...Q_2*Q_1*b</comment>
        <comment />
        <comment>Q_n*b = (I-gamma*u*u^T)*b = b - u*(gamma*U^T*b)</comment>
        <comment>U^T*b</comment>
        <comment>gamma*U^T*b</comment>
        <comment>solve for Rx = b using the standard upper triangular solver</comment>
        <comment>save the results</comment>
      </scope>
      <comment>solve each column one by one</comment>
    </method>
    <method type="boolean" name="modifiesA" startLine="159" endLine="161" />
    <method type="boolean" name="modifiesB" startLine="164" endLine="166" />
    <comment>a column major QR matrix</comment>
  </class>
</source>
