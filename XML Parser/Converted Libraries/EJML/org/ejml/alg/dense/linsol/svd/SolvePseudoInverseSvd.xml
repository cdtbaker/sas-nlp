<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.linsol.svd">
  <import name="org.ejml.UtilEjml" />
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.factory.DecompositionFactory" />
  <import name="org.ejml.factory.LinearSolver" />
  <import name="org.ejml.factory.SingularValueDecomposition" />
  <import name="org.ejml.ops.CommonOps" />
  <class name="SolvePseudoInverseSvd" startLine="29">
    <implements name="LinearSolver<DenseMatrix64F>" />
    <javadoc>
      <text>* <p>
 * The pseudo-inverse is typically used to solve over determined system for which there is no unique solution.<br>
 * x=inv(A<sup>T</sup>A)A<sup>T</sup>b<br>
 * where A &isin; &real; <sup>m &times; n</sup> and m &ge; n.
 * </p>
 * <p>
 * This class implements the Moore-Penrose pseudo-inverse using SVD and should never fail.  Alternative implementations
 * can use Cholesky decomposition, but those will fail if the A<sup>T</sup>A matrix is singular.
 * However the Cholesky implementation is much faster.
 * </p></text>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="SingularValueDecomposition<DenseMatrix64F>" name="svd" />
    <declaration type="DenseMatrix64F" name="pinv" />
    <declaration type="double" name="threshold" />
    <javadoc>
      <text>* Creates a new solver targeted at the specified matrix size.</text>
      <param>maxRows The expected largest matrix it might have to process.  Can be larger.</param>
      <param>maxCols The expected largest matrix it might have to process.  Can be larger.</param>
    </javadoc>
    <method type="constructor" name="SolvePseudoInverseSvd" startLine="61" endLine="64" />
    <javadoc>
      <text>* Creates a solver targeted at matrices around 100x100</text>
    </javadoc>
    <method type="constructor" name="SolvePseudoInverseSvd" startLine="69" endLine="71" />
    <method type="boolean" name="setA" startLine="74" endLine="115">
      <declaration type="DenseMatrix64F" name="U_t" />
      <declaration type="DenseMatrix64F" name="V" />
      <declaration type="double[]" name="S" />
      <declaration type="int" name="N" />
      <declaration type="double" name="maxSingular" />
      <scope startLine="87" endLine="90" />
      <declaration type="double" name="tau" />
      <scope startLine="95" endLine="101">
        <declaration type="double" name="s" />
      </scope>
      <scope startLine="104" endLine="109">
        <declaration type="int" name="index" />
        <scope startLine="106" endLine="108" />
      </scope>
      <comment>compute the threshold for singular values which are to be zeroed</comment>
      <comment>computer the pseudo inverse of A</comment>
      <comment>V*W</comment>
      <comment>V*W*U^T</comment>
    </method>
    <method type="double" name="quality" startLine="118" endLine="120" />
    <method type="void" name="solve" startLine="123" endLine="125" />
    <method type="void" name="invert" startLine="128" endLine="130" />
    <method type="boolean" name="modifiesA" startLine="133" endLine="135" />
    <method type="boolean" name="modifiesB" startLine="138" endLine="140" />
    <javadoc>
      <text>* Specify the relative threshold used to select singular values.  By default it's UtilEjml.EPS.</text>
      <param>threshold The singular value threshold</param>
    </javadoc>
    <method type="void" name="setThreshold" startLine="146" endLine="148" />
    <comment>Used to compute pseudo inverse</comment>
    <comment>the results of the pseudo-inverse</comment>
    <comment>relative threshold used to select singular values</comment>
  </class>
</source>
