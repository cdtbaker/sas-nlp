<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.misc">
  <import name="org.ejml.data.RowD1Matrix64F" />
  <class name="TransposeAlgs" startLine="24">
    <javadoc>
      <text>* Low level transpose algorithms.  No sanity checks are performed.</text>
      <author>Peter Abeles</author>
    </javadoc>
    <javadoc>
      <text>* In-place transpose for a square matrix.  The most efficient algorithm but can
 * only be used on square matrices.</text>
      <param>mat The matrix that is transposed in-place.  Modified.</param>
    </javadoc>
    <method type="void" name="square" startLine="38" endLine="50">
      <declaration type="int" name="index" />
      <declaration type="int" name="indexEnd" />
      <scope startLine="42" endLine="49">
        <declaration type="int" name="indexOther" />
        <scope startLine="44" endLine="48">
          <declaration type="double" name="val" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Performs a transpose across block sub-matrices.  Reduces
 * the number of cache misses on larger matrices.
 * *NOTE* If this is beneficial is highly dependent on the computer it is run on. e.g:
 * - Q6600 Almost twice as fast as standard.
 * - Pentium-M Same speed and some times a bit slower than standard.</text>
      <param>A Original matrix.  Not modified.</param>
      <param>A_tran Transposed matrix.  Modified.</param>
      <param>blockLength Length of a block.</param>
    </javadoc>
    <method type="void" name="block" startLine="66" endLine="94">
      <scope startLine="67" endLine="93">
        <declaration type="int" name="blockHeight" />
        <declaration type="int" name="indexSrc" />
        <declaration type="int" name="indexDst" />
        <scope startLine="73" endLine="92">
          <declaration type="int" name="blockWidth" />
          <declaration type="int" name="indexSrcEnd" />
          <scope startLine="81" endLine="91">
            <declaration type="int" name="rowSrc" />
            <declaration type="int" name="rowDst" />
            <declaration type="int" name="end" />
            <scope startLine="86" endLine="89" />
          </scope>
        </scope>
        <comment>int indexSrc = i*A.numCols + j;</comment>
        <comment>int indexDst = j*A_tran.numCols + i;</comment>
        <comment>for( int l = 0; l < blockWidth; l++ , indexSrc++ ) {</comment>
        <comment>for( int k = 0; k < blockHeight; k++ , rowSrc += A.numCols ) {</comment>
        <comment>faster to write in sequence than to read in sequence</comment>
      </scope>
    </method>
    <javadoc>
      <text>* A straight forward transpose.  Good for small non-square matrices.</text>
      <param>A Original matrix.  Not modified.</param>
      <param>A_tran Transposed matrix.  Modified.</param>
    </javadoc>
    <method type="void" name="standard" startLine="103" endLine="114">
      <declaration type="int" name="index" />
      <scope startLine="105" endLine="113">
        <declaration type="int" name="index2" />
        <declaration type="int" name="end" />
        <scope startLine="109" endLine="112" />
      </scope>
    </method>
  </class>
</source>
