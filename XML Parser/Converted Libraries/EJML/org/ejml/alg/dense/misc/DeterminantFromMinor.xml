<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.misc">
  <import name="org.ejml.data.DenseMatrix64F" />
  <import name="org.ejml.data.RowD1Matrix64F" />
  <class name="DeterminantFromMinor" startLine="25">
    <javadoc>
      <text>* <p>
 * Computes the determinant of a matrix using Laplace expansion.  This is done
 * using minor matrices as is shown below:<br>
 * <br>
 * |A| = Sum{ i=1:k ; a<sub>ij</sub> C<sub>ij</sub> }<br>
 * <br>
 * C<sub>ij</sub> = (-1)<sup>i+j</sup> M<sub>ij</sub><br>
 * <br>
 * Where M_ij is the minor of matrix A formed by eliminating row i and column j from A.
 * </p>
 * <p>
 * This is significantly more computationally expensive than using LU decomposition, but
 * its computation has the advantage being independent of the matrices value.
 * </p></text>
      <see>org.ejml.alg.dense.decomposition.lu.LUDecompositionAlt</see>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="int" name="width" />
    <declaration type="int" name="minWidth" />
    <declaration type="int[]" name="levelIndexes" />
    <declaration type="double[]" name="levelResults" />
    <declaration type="int[]" name="levelRemoved" />
    <declaration type="int" name="open" />
    <declaration type="int" name="numOpen" />
    <declaration type="DenseMatrix64F" name="tempMat" />
    <declaration type="boolean" name="dirty" />
    <javadoc>
      <param>width The width of the matrices that it will be computing the determinant for</param>
    </javadoc>
    <method type="constructor" name="DeterminantFromMinor" startLine="74" endLine="76" />
    <javadoc>
      <param>width The width of the matrices that it will be computing the determinant for</param>
      <param>minWidth At which point should it use a predefined function to compute the determinant.</param>
    </javadoc>
    <method type="constructor" name="DeterminantFromMinor" startLine="84" endLine="104">
      <scope startLine="85" endLine="87" />
      <declaration type="int" name="numLevels" />
    </method>
    <javadoc>
      <text>* Computes the determinant for the specified matrix.  It must be square and have
 * the same width and height as what was specified in the constructor.</text>
      <param>mat The matrix whose determinant is to be computed.</param>
      <return>The determinant.</return>
    </javadoc>
    <method type="double" name="compute" startLine="113" endLine="171">
      <scope startLine="114" endLine="116" />
      <declaration type="int" name="level" />
      <scope startLine="124" endLine="170">
        <declaration type="int" name="levelWidth" />
        <declaration type="int" name="levelIndex" />
        <scope startLine="128" endLine="146">
          <scope startLine="129" endLine="131" />
          <declaration type="int" name="prevLevelIndex" />
          <declaration type="double" name="val" />
          <scope startLine="135" endLine="137" />
          <scope startLine="137" endLine="139" />
        </scope>
        <scope startLine="146" endLine="169">
          <declaration type="int" name="excluded" />
          <scope startLine="151" endLine="166">
            <declaration type="double" name="subresult" />
            <scope startLine="157" endLine="159" />
            <scope startLine="159" endLine="161" />
          </scope>
          <scope startLine="166" endLine="168" />
        </scope>
        <comment>put it back into the list</comment>
      </scope>
      <comment>make sure everything is in the proper state before it starts</comment>
      <comment>System.arraycopy(mat.data,0,minorMatrix[0],0,mat.data.length);</comment>
    </method>
    <method type="void" name="initStructures" startLine="173" endLine="187">
      <scope startLine="174" endLine="176" />
      <scope startLine="179" endLine="185">
        <scope startLine="180" endLine="184" />
      </scope>
    </method>
    <method type="int" name="openRemove" startLine="189" endLine="196">
      <declaration type="int" name="val" />
    </method>
    <method type="void" name="openAdd" startLine="199" endLine="205">
      <scope startLine="200" endLine="202" />
    </method>
    <method type="void" name="openAdd" startLine="207" endLine="209" />
    <method type="void" name="putIntoOpen" startLine="211" endLine="223">
      <declaration type="boolean" name="added" />
      <scope startLine="213" endLine="219">
        <scope startLine="214" endLine="218" />
      </scope>
      <scope startLine="220" endLine="222" />
    </method>
    <method type="void" name="createMinor" startLine="225" endLine="241">
      <declaration type="int" name="w" />
      <declaration type="int" name="firstRow" />
      <scope startLine="230" endLine="240">
        <declaration type="int" name="col" />
        <declaration type="int" name="srcIndex" />
        <declaration type="int" name="dstIndex" />
        <scope startLine="235" endLine="239" />
      </scope>
    </method>
    <comment>how wide the square matrix is</comment>
    <comment>used to decide at which point it uses a direct algorithm to compute the determinant</comment>
    <comment>used to keep track of which submatrix it is computing the results for</comment>
    <comment>the results at different levels of minor matrices</comment>
    <comment>which columns where removed at what level</comment>
    <comment>columns that are currently open</comment>
    <comment>a minor matrix which is created at the lowest level</comment>
  </class>
</source>
