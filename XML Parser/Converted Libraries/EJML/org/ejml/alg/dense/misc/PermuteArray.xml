<?xml version="1.0" encoding="UTF-8"?>
<source package="org.ejml.alg.dense.misc">
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <class name="PermuteArray" startLine="25">
    <javadoc>
      <text>* Generates a permutations of an integer set from 0 to N-1.  This can either be generated
 * all at once as a list of one at a time.</text>
      <author>Peter Abeles</author>
    </javadoc>
    <declaration type="int" name="level" />
    <declaration type="int" name="data" />
    <declaration type="int" name="iter" />
    <declaration type="int" name="valk" />
    <declaration type="int" name="ret" />
    <method type="constructor" name="PermuteArray" startLine="42" endLine="51">
      <scope startLine="48" endLine="50" />
    </method>
    <javadoc>
      <text>* <p>
 * Returns signature of the permutation.  This is the sgn() operator and returns
 * -1 or 1 depending on it being odd or even.
 * <br>
 * sgn(σ) = ( − 1)<sup>m</sup><br>
 * <br>
 * where m is the number of inversions.
 * </p>
 * <p>
 * NOTE: This implementation is painfully slow O(N!).  There is probably another algorithm out there
 * which is much faster.
 * </p></text>
      <return>-1 or 1 for odd or even permutations.</return>
    </javadoc>
    <method type="int" name="sgn" startLine="69" endLine="87">
      <declaration type="int" name="total" />
      <scope startLine="74" endLine="82">
        <declaration type="int" name="val" />
        <scope startLine="77" endLine="81">
          <scope startLine="78" endLine="80" />
        </scope>
      </scope>
      <comment>Is there a way to compute the parity while performing the permutations</comment>
      <comment>making this much less expensive</comment>
    </method>
    <javadoc>
      <text>* Computes N factorial</text>
    </javadoc>
    <method type="int" name="fact" startLine="92" endLine="100">
      <declaration type="int" name="ret" />
      <scope startLine="95" endLine="97" />
    </method>
    <javadoc>
      <text>* Creates a list of all permutations for a set with N elements.</text>
      <param>N Number of elements in the list being permuted.</param>
      <return>A list containing all the permutations.</return>
    </javadoc>
    <method type="List<int[]>" name="createList" startLine="109" endLine="120">
      <declaration type="int[]" name="data" />
      <scope startLine="111" endLine="113" />
      <declaration type="List<int[]>[]" name="ret" />
    </method>
    <javadoc>
      <text>* Internal function that uses recursion to create the list</text>
    </javadoc>
    <method type="void" name="createList" startLine="127" endLine="142">
      <scope startLine="130" endLine="136">
        <scope startLine="131" endLine="135">
          <scope startLine="132" endLine="134" />
        </scope>
      </scope>
      <scope startLine="136" endLine="140">
        <declaration type="int[]" name="copy" />
      </scope>
    </method>
    <javadoc>
      <text>* Creates the next permutation in the sequence.</text>
      <return>An array containing the permutation.  The returned array is modified each time this function is called.</return>
    </javadoc>
    <method type="int[]" name="next" startLine="150" endLine="184">
      <declaration type="boolean" name="hasNewPerm" />
      <scope startLine="153" endLine="179">
        <scope startLine="155" endLine="173">
          <scope startLine="158" endLine="172">
            <scope startLine="162" endLine="169" />
            <scope startLine="169" endLine="171" />
          </scope>
        </scope>
        <comment>boolean foundZero = false;</comment>
        <comment>a new permutation has been created return the results.</comment>
      </scope>
    </method>
    <comment>used by next</comment>
  </class>
</source>
