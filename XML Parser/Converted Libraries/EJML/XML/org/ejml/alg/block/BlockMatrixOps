<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.block">
        <import package="org.ejml.data.BlockMatrix64F"/>
        <import package="org.ejml.data.D1Submatrix64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.ops.CommonOps"/>
        <import package="org.ejml.ops.MatrixFeatures"/>
        <import package="org.ejml.ops.RandomMatrices"/>
        <import package="org.ejml.simple.SimpleMatrix"/>
        <import package="java.util.Random"/>
        <class name="BlockMatrixOps" line="32">
            <comment line="33">
                This can be speed up by inlining the multBlock* calls, reducing number of multiplications                
            </comment>
            <comment line="33">
                and other stuff.  doesn&apos;t seem to have any speed advantage over mult_reorder()                
            </comment>
            <javadoc line="32">
                Various operations on {@link BlockMatrix64F}.                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <javadoc line="39">
                Converts a row major matrix into a row major block matrix.                
                <@param>
                    m src Original DenseMatrix64F.  Not modified.                    
                </@param>
                <@param>
                    m dst Equivalent BlockMatrix64F. Modified.                    
                </@param>
            </javadoc>
            <method name="convert" type="void" line="46">
                <scope line="50">
                    <declaration name="blockHeight" type="int" line="51"/>
                    <scope line="53">
                        <declaration name="blockWidth" type="int" line="54"/>
                        <declaration name="indexDst" type="int" line="56"/>
                        <declaration name="indexSrcRow" type="int" line="57"/>
                        <scope line="59"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="68">
                &lt;p&gt;
                 * Converts matrix data stored is a row major format into a block row major format in place.
                 * &lt;/p&gt;                
                <@param>
                    m numRows number of rows in the matrix.                    
                </@param>
                <@param>
                    m numCols number of columns in the matrix.                    
                </@param>
                <@param>
                    m blockLength Block size in the converted matrix.                    
                </@param>
                <@param>
                    m data Matrix data in a row-major format. Modified.                    
                </@param>
                <@param>
                    m tmp Temporary data structure that is to be the size of a block row.                    
                </@param>
            </javadoc>
            <method name="convertRowToBlock" type="void" line="81">
                <declaration name="minLength" type="int" line="82"/>
                <scope line="83"/>
                <scope line="87">
                    <declaration name="blockHeight" type="int" line="88"/>
                    <scope line="93">
                        <declaration name="blockWidth" type="int" line="94"/>
                        <declaration name="indexDst" type="int" line="96"/>
                        <declaration name="indexSrcRow" type="int" line="97"/>
                        <scope line="99"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="108">
                Converts a row major block matrix into a row major matrix.                
                <@param>
                    m src Original BlockMatrix64F..  Not modified.                    
                </@param>
                <@param>
                    m dst Equivalent DenseMatrix64F.  Modified.                    
                </@param>
            </javadoc>
            <method name="convert" type="DenseMatrix64F" line="115">
                <scope line="116"/>
                <scope line="119"/>
                <scope line="123">
                    <declaration name="blockHeight" type="int" line="124"/>
                    <scope line="126">
                        <declaration name="blockWidth" type="int" line="127"/>
                        <declaration name="indexSrc" type="int" line="129"/>
                        <declaration name="indexDstRow" type="int" line="130"/>
                        <scope line="132"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="143">
                &lt;p&gt;
                 * Converts matrix data stored is a block row major format into a row major format in place.
                 * &lt;/p&gt;                
                <@param>
                    m numRows number of rows in the matrix.                    
                </@param>
                <@param>
                    m numCols number of columns in the matrix.                    
                </@param>
                <@param>
                    m blockLength Block size in the converted matrix.                    
                </@param>
                <@param>
                    m data Matrix data in a block row-major format. Modified.                    
                </@param>
                <@param>
                    m tmp Temporary data structure that is to be the size of a block row.                    
                </@param>
            </javadoc>
            <method name="convertBlockToRow" type="void" line="156">
                <declaration name="minLength" type="int" line="157"/>
                <scope line="158"/>
                <scope line="162">
                    <declaration name="blockHeight" type="int" line="163"/>
                    <scope line="167">
                        <declaration name="blockWidth" type="int" line="168"/>
                        <declaration name="indexSrc" type="int" line="170"/>
                        <declaration name="indexDstRow" type="int" line="171"/>
                        <scope line="173"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="182">
                Converts the transpose of a row major matrix into a row major block matrix.                
                <@param>
                    m src Original DenseMatrix64F.  Not modified.                    
                </@param>
                <@param>
                    m dst Equivalent BlockMatrix64F. Modified.                    
                </@param>
            </javadoc>
            <method name="convertTranSrc" type="void" line="189">
                <scope line="193">
                    <declaration name="blockHeight" type="int" line="194"/>
                    <scope line="196">
                        <declaration name="blockWidth" type="int" line="197"/>
                        <declaration name="indexDst" type="int" line="199"/>
                        <declaration name="indexSrc" type="int" line="200"/>
                        <scope line="202">
                            <declaration name="rowSrc" type="int" line="203"/>
                            <declaration name="rowDst" type="int" line="204"/>
                            <scope line="205"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="mult" type="void" line="216">
                <declaration name="blockLength" type="int" line="226"/>
                <declaration name="Asub" type="D1Submatrix64F" line="228"/>
                <declaration name="Bsub" type="D1Submatrix64F" line="229"/>
                <declaration name="Csub" type="D1Submatrix64F" line="230"/>
            </method>
            <method name="multTransA" type="void" line="236">
                <declaration name="blockLength" type="int" line="246"/>
                <declaration name="Asub" type="D1Submatrix64F" line="248"/>
                <declaration name="Bsub" type="D1Submatrix64F" line="249"/>
                <declaration name="Csub" type="D1Submatrix64F" line="250"/>
            </method>
            <method name="multTransB" type="void" line="256">
                <declaration name="blockLength" type="int" line="266"/>
                <declaration name="Asub" type="D1Submatrix64F" line="268"/>
                <declaration name="Bsub" type="D1Submatrix64F" line="269"/>
                <declaration name="Csub" type="D1Submatrix64F" line="270"/>
            </method>
            <javadoc line="275">
                Transposes a block matrix.                
                <@param>
                    m A Original matrix.  Not modified.                    
                </@param>
                <@param>
                    m A_tran Transposed matrix.  Modified.                    
                </@param>
            </javadoc>
            <method name="transpose" type="BlockMatrix64F" line="282">
                <scope line="283"/>
                <scope line="288"/>
                <scope line="293">
                    <declaration name="blockHeight" type="int" line="294"/>
                    <scope line="296">
                        <declaration name="blockWidth" type="int" line="297"/>
                        <declaration name="indexA" type="int" line="299"/>
                        <declaration name="indexC" type="int" line="300"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="309">
                Transposes an individual block inside a block matrix.                
            </javadoc>
            <method name="transposeBlock" type="void" line="315">
                <scope line="316">
                    <declaration name="rowIndexC" type="int" line="317"/>
                    <declaration name="rowIndexA" type="int" line="318"/>
                    <declaration name="end" type="int" line="319"/>
                    <scope line="320"/>
                </scope>
            </method>
            <method name="createRandom" type="BlockMatrix64F" line="328">
                <declaration name="ret" type="BlockMatrix64F" line="329"/>
            </method>
            <method name="createRandom" type="BlockMatrix64F" line="339">
                <declaration name="ret" type="BlockMatrix64F" line="340"/>
            </method>
            <method name="convert" type="BlockMatrix64F" line="348">
                <declaration name="ret" type="BlockMatrix64F" line="349"/>
            </method>
            <method name="convert" type="BlockMatrix64F" line="354">
                <declaration name="ret" type="BlockMatrix64F" line="355"/>
            </method>
            <method name="isEquals" type="boolean" line="361"/>
            <method name="isEquals" type="boolean" line="369"/>
            <javadoc line="376">
                Sets either the upper or low triangle of a matrix to zero                
            </javadoc>
            <method name="zeroTriangle" type="void" line="380">
                <declaration name="blockLength" type="int" line="381"/>
                <scope line="383">
                    <scope line="384">
                        <declaration name="h" type="int" line="385"/>
                        <scope line="387">
                            <declaration name="w" type="int" line="388"/>
                            <declaration name="index" type="int" line="390"/>
                            <scope line="392">
                                <scope line="393">
                                    <scope line="394"/>
                                </scope>
                            </scope>
                            <scope line="398">
                                <scope line="399">
                                    <scope line="400"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="407">
                    <scope line="408">
                        <declaration name="h" type="int" line="409"/>
                        <scope line="411">
                            <declaration name="w" type="int" line="412"/>
                            <declaration name="index" type="int" line="414"/>
                            <scope line="416">
                                <scope line="417">
                                    <declaration name="z" type="int" line="418"/>
                                    <scope line="419"/>
                                </scope>
                            </scope>
                            <scope line="423">
                                <scope line="424">
                                    <scope line="425"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="435">
                Copies either the upper or lower triangular portion of src into dst.  Dst can be smaller
                 * than src.                
                <@param>
                    m upper If the upper or lower triangle is copied.                    
                </@param>
                <@param>
                    m src The source matrix. Not modified.                    
                </@param>
                <@param>
                    m dst The destination matrix. Modified.                    
                </@param>
            </javadoc>
            <method name="copyTriangle" type="void" line="444">
                <declaration name="blockLength" type="int" line="452"/>
                <declaration name="numRows" type="int" line="454"/>
                <declaration name="numCols" type="int" line="455"/>
                <scope line="457">
                    <scope line="458">
                        <declaration name="heightSrc" type="int" line="459"/>
                        <declaration name="heightDst" type="int" line="460"/>
                        <scope line="462">
                            <declaration name="widthSrc" type="int" line="463"/>
                            <declaration name="widthDst" type="int" line="464"/>
                            <declaration name="indexSrc" type="int" line="466"/>
                            <declaration name="indexDst" type="int" line="467"/>
                            <scope line="469">
                                <scope line="470">
                                    <scope line="471"/>
                                </scope>
                            </scope>
                            <scope line="475">
                                <scope line="476"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="482">
                    <scope line="483">
                        <declaration name="heightSrc" type="int" line="484"/>
                        <declaration name="heightDst" type="int" line="485"/>
                        <scope line="487">
                            <declaration name="widthSrc" type="int" line="488"/>
                            <declaration name="widthDst" type="int" line="489"/>
                            <declaration name="indexSrc" type="int" line="491"/>
                            <declaration name="indexDst" type="int" line="492"/>
                            <scope line="494">
                                <scope line="495">
                                    <declaration name="z" type="int" line="496"/>
                                    <scope line="497"/>
                                </scope>
                            </scope>
                            <scope line="501">
                                <scope line="502"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="511">
                &lt;p&gt;
                 * Sets every element in the matrix to the specified value.&lt;br&gt;
                 * &lt;br&gt;
                 * a&lt;sub&gt;ij&lt;/sub&gt; = value
                 * &lt;p&gt;                
                <@param>
                    m A A matrix whose elements are about to be set. Modified.                    
                </@param>
                <@param>
                    m value The value each element will have.                    
                </@param>
            </javadoc>
            <method name="set" type="void" line="521"/>
            <javadoc line="525">
                &lt;p&gt;Sets the value of A to all zeros except along the diagonal.&lt;/p&gt;                
                <@param>
                    m A Block matrix.                    
                </@param>
            </javadoc>
            <method name="setIdentity" type="void" line="531">
                <declaration name="minLength" type="int" line="532"/>
                <declaration name="blockLength" type="int" line="536"/>
                <scope line="538">
                    <declaration name="h" type="int" line="539"/>
                    <declaration name="w" type="int" line="540"/>
                    <declaration name="index" type="int" line="542"/>
                    <declaration name="m" type="int" line="544"/>
                    <scope line="545"/>
                </scope>
            </method>
            <javadoc line="551">
                &lt;p&gt;Converts the block matrix into a SimpleMatrix.&lt;/p&gt;                
                <@param>
                    m A Block matrix that is being converted.  Not modified.                    
                </@param>
                <@return>
                    n Equivalent SimpleMatrix.                    
                </@return>
            </javadoc>
            <method name="convertSimple" type="SimpleMatrix" line="557">
                <declaration name="B" type="DenseMatrix64F" line="558"/>
            </method>
            <javadoc line="563">
                &lt;p&gt;
                 * Returns a new matrix with ones along the diagonal and zeros everywhere else.
                 * &lt;/p&gt;                
                <@param>
                    m numRows Number of rows.                    
                </@param>
                <@param>
                    m numCols NUmber of columns.                    
                </@param>
                <@param>
                    m blockLength Block length.                    
                </@param>
                <@return>
                    n An identify matrix.                    
                </@return>
            </javadoc>
            <method name="identity" type="BlockMatrix64F" line="573">
                <declaration name="A" type="BlockMatrix64F" line="574"/>
                <declaration name="minLength" type="int" line="576"/>
                <scope line="578">
                    <declaration name="h" type="int" line="579"/>
                    <declaration name="w" type="int" line="580"/>
                    <declaration name="index" type="int" line="582"/>
                    <declaration name="m" type="int" line="584"/>
                    <scope line="585"/>
                </scope>
            </method>
            <javadoc line="593">
                &lt;p&gt;
                 * Checks to see if the two matrices have an identical shape an block size.
                 * &lt;/p&gt;                
                <@param>
                    m A Matrix.                    
                </@param>
                <@param>
                    m B Matrix.                    
                </@param>
            </javadoc>
            <method name="checkIdenticalShape" type="void" line="601"/>
            <javadoc line="610">
                &lt;p&gt;
                 * Extracts a matrix from src into dst.  The submatrix which is copied has its initial coordinate
                 * at (0,0) and ends at (dst.numRows,dst.numCols). The end rows/columns must be aligned along blocks
                 * or else it will silently screw things up.
                 * &lt;/p&gt;                
                <@param>
                    m src Matrix which a submatrix is being extracted from. Not modified.                    
                </@param>
                <@param>
                    m dst Where the submatrix is written to.  Its rows and columns be less than or equal to 'src'.  Modified.                    
                </@param>
            </javadoc>
            <method name="extractAligned" type="void" line="620">
                <declaration name="blockLength" type="int" line="628"/>
                <declaration name="numRows" type="int" line="630"/>
                <declaration name="numCols" type="int" line="631"/>
                <scope line="633">
                    <declaration name="heightSrc" type="int" line="634"/>
                    <declaration name="heightDst" type="int" line="635"/>
                    <scope line="637">
                        <declaration name="widthSrc" type="int" line="638"/>
                        <declaration name="widthDst" type="int" line="639"/>
                        <declaration name="indexSrc" type="int" line="641"/>
                        <declaration name="indexDst" type="int" line="642"/>
                        <scope line="644"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="651">
                Checks to see if the submatrix has its boundaries along inner blocks.                
                <@param>
                    m blockLength Size of an inner block.                    
                </@param>
                <@param>
                    m A Submatrix.                    
                </@param>
                <@return>
                    n If it is block aligned or not.                    
                </@return>
            </javadoc>
            <method name="blockAligned" type="boolean" line="658">
                <scope line="664"/>
                <scope line="668"/>
            </method>
        </class>
    </source>