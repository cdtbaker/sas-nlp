<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.block.decomposition.chol">
        <import package="org.ejml.alg.block.BlockInnerRankUpdate"/>
        <import package="org.ejml.alg.block.BlockMatrixOps"/>
        <import package="org.ejml.alg.block.BlockTriangularSolver"/>
        <import package="org.ejml.data.BlockMatrix64F"/>
        <import package="org.ejml.data.D1Submatrix64F"/>
        <import package="org.ejml.factory.CholeskyDecomposition"/>
        <class name="BlockCholeskyOuterForm" line="29">
            <comment line="30">
                if it should compute an upper or lower triangular matrix                
            </comment>
            <comment line="30">
                The decomposed matrix.                
            </comment>
            <implements interface="CholeskyDecomposition">
                <type_params>
                    <type_param name="BlockMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="29">
                &lt;p&gt;
                  Block Cholesky using outer product form.  The original matrix is stored and modified.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Based on the description provided in &quot;Fundamentals of Matrix Computations&quot; 2nd Ed. by David S. Watkins.
                  &lt;/p&gt;                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <declaration name="lower" type="boolean" line="43"/>
            <declaration name="T" type="BlockMatrix64F" line="45"/>
            <javadoc line="47">
                Creates a new BlockCholeskyOuterForm                
                <@param>
                    m lower Should it decompose it into a lower triangular matrix or not.                    
                </@param>
            </javadoc>
            <method name="BlockCholeskyOuterForm" type="constructor" line="52">
                <params>
                    <param name="lower" type="boolean"/>
                </params>
            </method>
            <javadoc line="56">
                Decomposes the provided matrix and stores the result in the same matrix.                
                <@param>
                    m A Matrix that is to be decomposed.  Modified.                    
                </@param>
                <@return>
                    n If it succeeded or not.                    
                </@return>
            </javadoc>
            <method name="decompose" type="boolean" line="63">
                <params>
                    <param name="A" type="BlockMatrix64F"/>
                </params>
            </method>
            <method name="decomposeLower" type="boolean" line="75">
                <declaration name="blockLength" type="int" line="76"/>
                <declaration name="subA" type="D1Submatrix64F" line="78"/>
                <declaration name="subB" type="D1Submatrix64F" line="79"/>
                <declaration name="subC" type="D1Submatrix64F" line="80"/>
                <scope line="82">
                    <declaration name="widthA" type="int" line="83"/>
                    <scope line="99"/>
                </scope>
            </method>
            <method name="decomposeUpper" type="boolean" line="114">
                <declaration name="blockLength" type="int" line="115"/>
                <declaration name="subA" type="D1Submatrix64F" line="117"/>
                <declaration name="subB" type="D1Submatrix64F" line="118"/>
                <declaration name="subC" type="D1Submatrix64F" line="119"/>
                <scope line="121">
                    <declaration name="widthA" type="int" line="122"/>
                    <scope line="138"/>
                </scope>
            </method>
            <method name="isLower" type="boolean" line="153"/>
            <method name="getT" type="BlockMatrix64F" line="158">
                <params>
                    <param name="T" type="BlockMatrix64F"/>
                </params>
            </method>
            <method name="inputModified" type="boolean" line="167"/>
        </class>
    </source>