<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.block.linsol.chol">
        <import package="org.ejml.alg.block.BlockMatrixOps"/>
        <import package="org.ejml.alg.block.BlockTriangularSolver"/>
        <import package="org.ejml.alg.block.decomposition.chol.BlockCholeskyOuterForm"/>
        <import package="org.ejml.data.BlockMatrix64F"/>
        <import package="org.ejml.data.D1Submatrix64F"/>
        <import package="org.ejml.factory.LinearSolver"/>
        <import package="org.ejml.ops.SpecializedOps"/>
        <class name="BlockCholeskyOuterSolver" line="30">
            <comment line="31">
                cholesky decomposition                
            </comment>
            <comment line="31">
                size of a block take from input matrix                
            </comment>
            <comment line="31">
                temporary data structure used in some calculation.                
            </comment>
            <implements interface="LinearSolver&lt;BlockMatrix64F&gt;"/>
            <javadoc line="30">
                &lt;p&gt; Linear solver that uses a block cholesky decomposition. &lt;/p&gt;
                 * &lt;p&gt;
                 * Solver works by using the standard Cholesky solving strategy:&lt;br&gt;
                 * A=L*L&lt;sup&gt;T&lt;/sup&gt; &lt;br&gt;
                 * A*x=b&lt;br&gt;
                 * L*L&lt;sup&gt;T&lt;/sup&gt;*x = b &lt;br&gt;
                 * L*y = b&lt;br&gt;
                 * L&lt;sup&gt;T&lt;/sup&gt;*x = y&lt;br&gt;
                 * x = L&lt;sup&gt;-T&lt;/sup&gt;y
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * It is also possible to use the upper triangular cholesky decomposition.
                 * &lt;/p&gt;                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <declaration name="chol" type="BlockCholeskyOuterForm" line="52"/>
            <declaration name="blockLength" type="int" line="55"/>
            <declaration name="temp" type="double" line="58"/>
            <javadoc line="60">
                Decomposes and overwrites the input matrix.                
                <@param>
                    m A Semi-Positive Definite (SPD) system matrix. Modified. Reference saved.                    
                </@param>
                <@return>
                    n If the matrix can be decomposed.  Will always return false of not SPD.                    
                </@return>
            </javadoc>
            <method name="setA" type="boolean" line="67">
                <comment line="68">
                    Extract a lower triangular solution                    
                </comment>
            </method>
            <method name="quality" type="double" line="78"/>
            <javadoc line="82">
                If X == null then the solution is written into B.  Otherwise the solution is copied
                 * from B into X.                
            </javadoc>
            <method name="solve" type="void" line="87">
                <comment line="88">
                    L * L^T*X = B                    
                </comment>
                <comment line="88">
                    Solve for Y:  L*Y = B                    
                </comment>
                <comment line="88">
                    L^T * X = Y                    
                </comment>
                <declaration name="L" type="D1Submatrix64F" line="91"/>
                <scope line="93"/>
                <scope line="109"/>
            </method>
            <method name="invert" type="void" line="117">
                <comment line="118">
                    zero the upper triangular portion of A_inv                    
                </comment>
                <comment line="118">
                    invert L from cholesky decomposition and write the solution into the lower                    
                </comment>
                <comment line="118">
                    triangular portion of A_inv                    
                </comment>
                <comment line="118">
                    B = inv(L)                    
                </comment>
                <comment line="118">
                    B = L^-T * B                    
                </comment>
                <comment line="118">
                    todo could speed up by taking advantage of B being lower triangular                    
                </comment>
                <comment line="118">
                    todo take advantage of symmetry                    
                </comment>
                <declaration name="T" type="BlockMatrix64F" line="118"/>
                <declaration name="L" type="D1Submatrix64F" line="129"/>
                <declaration name="B" type="D1Submatrix64F" line="130"/>
            </method>
            <method name="modifiesA" type="boolean" line="144"/>
            <method name="modifiesB" type="boolean" line="149"/>
        </class>
    </source>