<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.block.decomposition.hessenberg">
        <import package="org.ejml.alg.block.BlockMultiplication"/>
        <import package="org.ejml.alg.block.decomposition.qr.BlockMatrix64HouseholderQR"/>
        <import package="org.ejml.alg.dense.decomposition.hessenberg.TridiagonalSimilarDecomposition"/>
        <import package="org.ejml.data.BlockMatrix64F"/>
        <import package="org.ejml.data.D1Submatrix64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.ops.CommonOps"/>
        <import package="org.ejml.alg.block.BlockInnerMultiplication.blockMultPlusTransA"/>
        <class name="TridiagonalDecompositionBlockHouseholder" line="32">
            <comment line="33">
                matrix which is being decomposed                
            </comment>
            <comment line="33">
                householder vectors are stored along the upper triangle rows                
            </comment>
            <comment line="33">
                temporary storage for block computations                
            </comment>
            <comment line="33">
                stores intermediate results in matrix multiplication                
            </comment>
            <comment line="33">
                temporary storage for zeros and ones in U                
            </comment>
            <implements interface="TridiagonalSimilarDecomposition&lt;BlockMatrix64F&gt;"/>
            <javadoc line="32">
                &lt;p&gt;
                 * Tridiagonal similar decomposition for block matrices.  Orthogonal matrices are computed using
                 * householder vectors.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * Based off algorithm in section 2 of J. J. Dongarra, D. C. Sorensen, S. J. Hammarling,
                 * &quot;Block Reduction of Matrices to Condensed Forms for Eigenvalue Computations&quot; Journal of
                 * Computations and Applied Mathematics 27 (1989) 215-227&lt;b&gt;
                 * &lt;br&gt;
                 * Computations of Householder reflectors has been modified from what is presented in that paper to how 
                 * it is performed in &quot;Fundamentals of Matrix Computations&quot; 2nd ed. by David S. Watkins.
                 * &lt;/p&gt;                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <declaration name="A" type="BlockMatrix64F" line="54"/>
            <declaration name="V" type="BlockMatrix64F" line="56"/>
            <declaration name="tmp" type="BlockMatrix64F" line="58"/>
            <declaration name="gammas" type="double" line="59"/>
            <declaration name="zerosM" type="DenseMatrix64F" line="62"/>
            <method name="getT" type="BlockMatrix64F" line="65">
                <scope line="66"/>
                <scope line="68"/>
                <scope line="76">
                    <declaration name="d" type="double" line="77"/>
                </scope>
            </method>
            <method name="getQ" type="BlockMatrix64F" line="87">
                <comment line="88">
                    (Q1^T * (Q2^T * (Q3^t * A)))                    
                </comment>
                <declaration name="height" type="int" line="90"/>
                <declaration name="subQ" type="D1Submatrix64F" line="94"/>
                <declaration name="subU" type="D1Submatrix64F" line="95"/>
                <declaration name="subW" type="D1Submatrix64F" line="96"/>
                <declaration name="tmp" type="D1Submatrix64F" line="97"/>
                <declaration name="N" type="int" line="100"/>
                <declaration name="start" type="int" line="102"/>
                <scope line="109">
                    <declaration name="blockSize" type="int" line="110"/>
                    <scope line="116"/>
                    <scope line="121"/>
                </scope>
            </method>
            <method name="copyZeros" type="void" line="164">
                <declaration name="N" type="int" line="165"/>
                <scope line="166">
                    <scope line="168"/>
                    <scope line="173"/>
                </scope>
            </method>
            <method name="replaceZeros" type="void" line="180">
                <declaration name="N" type="int" line="181"/>
                <scope line="182">
                    <scope line="184"/>
                    <scope line="188"/>
                </scope>
            </method>
            <method name="getDiagonal" type="void" line="195">
                <scope line="197"/>
            </method>
            <method name="decompose" type="boolean" line="204">
                <declaration name="subA" type="D1Submatrix64F" line="210"/>
                <declaration name="subV" type="D1Submatrix64F" line="211"/>
                <declaration name="subU" type="D1Submatrix64F" line="212"/>
                <declaration name="N" type="int" line="214"/>
                <scope line="216">
                    <declaration name="height" type="int" line="218"/>
                    <scope line="234">
                        <declaration name="before" type="double" line="236"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="250">
                C = C + A^T*B                
                <@param>
                    m blockLength                    
                </@param>
                <@param>
                    m A row block vector                    
                </@param>
                <@param>
                    m B row block vector                    
                </@param>
                <@param>
                    m C                    
                </@param>
            </javadoc>
            <method name="multPlusTransA" type="void" line="261">
                <declaration name="heightA" type="int" line="262"/>
                <scope line="264">
                    <declaration name="heightC" type="int" line="265"/>
                    <declaration name="indexA" type="int" line="267"/>
                    <scope line="269">
                        <declaration name="widthC" type="int" line="270"/>
                        <declaration name="indexC" type="int" line="272"/>
                        <declaration name="indexB" type="int" line="273"/>
                    </scope>
                </scope>
            </method>
            <method name="init" type="void" line="281">
                <declaration name="height" type="int" line="284"/>
            </method>
            <method name="inputModified" type="boolean" line="295"/>
        </class>
    </source>