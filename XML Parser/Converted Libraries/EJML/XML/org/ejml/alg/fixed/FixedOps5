<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.fixed">
        <import package="org.ejml.data.FixedMatrix5_64F"/>
        <import package="org.ejml.data.FixedMatrix5x5_64F"/>
        <class name="FixedOps5" line="24">
            <javadoc line="24">
                &lt;p&gt;Common matrix operations for fixed sized matrices which are 5 x 5 or 5 element vectors.&lt;/p&gt;
                 * &lt;p&gt;DO NOT MODIFY.  Automatically generated code created by GenerateFixedOps&lt;/p&gt;                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <javadoc line="31">
                &lt;p&gt;Performs the following operation:&lt;br&gt;
                 * &lt;br&gt;
                 * c = a + b &lt;br&gt;
                 * c&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; + b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * Matrix C can be the same instance as Matrix A and/or B.
                 * &lt;/p&gt;                
                <@param>
                    m a A Matrix. Not modified.                    
                </@param>
                <@param>
                    m b A Matrix. Not modified.                    
                </@param>
                <@param>
                    m c A Matrix where the results are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="add" type="void" line="46"/>
            <javadoc line="74">
                &lt;p&gt;Performs the following operation:&lt;br&gt;
                 * &lt;br&gt;
                 * a = a + b &lt;br&gt;
                 * a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; + b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a A Matrix. Modified.                    
                </@param>
                <@param>
                    m b A Matrix. Not modified.                    
                </@param>
            </javadoc>
            <method name="addEquals" type="void" line="84"/>
            <javadoc line="112">
                Performs an in-place transpose.  This algorithm is only efficient for square
                 * matrices.                
                <@param>
                    m m The matrix that is to be transposed. Modified.                    
                </@param>
            </javadoc>
            <method name="transpose" type="void" line="118">
                <declaration name="tmp" type="double" line="119"/>
            </method>
            <javadoc line="132">
                &lt;p&gt;
                 * Transposes matrix &apos;a&apos; and stores the results in &apos;b&apos;:&lt;br&gt;
                 * &lt;br&gt;
                 * b&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ji&lt;/sub&gt;&lt;br&gt;
                 * where &apos;b&apos; is the transpose of &apos;a&apos;.
                 * &lt;/p&gt;                
                <@param>
                    m input The original matrix.  Not modified.                    
                </@param>
                <@param>
                    m output Where the transpose is stored. If null a new matrix is created. Modified.                    
                </@param>
                <@return>
                    n The transposed matrix.                    
                </@return>
            </javadoc>
            <method name="transpose" type="FixedMatrix5x5_64F" line="144"/>
            <javadoc line="177">
                &lt;p&gt;Performs the following operation:&lt;br&gt;
                 * &lt;br&gt;
                 * c = a * b &lt;br&gt;
                 * &lt;br&gt;
                 * c&lt;sub&gt;ij&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ik&lt;/sub&gt; * b&lt;sub&gt;kj&lt;/sub&gt;}
                 * &lt;/p&gt;                
                <@param>
                    m a The left matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m b The right matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m c Where the results of the operation are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="mult" type="void" line="189"/>
            <javadoc line="217">
                &lt;p&gt;Performs the following operation:&lt;br&gt;
                 * &lt;br&gt;
                 * c = a&lt;sup&gt;T&lt;/sup&gt; * b &lt;br&gt;
                 * &lt;br&gt;
                 * c&lt;sub&gt;ij&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ki&lt;/sub&gt; * b&lt;sub&gt;kj&lt;/sub&gt;}
                 * &lt;/p&gt;                
                <@param>
                    m a The left matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m b The right matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m c Where the results of the operation are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="multTransA" type="void" line="229"/>
            <javadoc line="257">
                &lt;p&gt;
                 * Performs the following operation:&lt;br&gt;
                 * &lt;br&gt;
                 * c = a&lt;sup&gt;T&lt;/sup&gt; * b&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                 * c&lt;sub&gt;ij&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ki&lt;/sub&gt; * b&lt;sub&gt;jk&lt;/sub&gt;}
                 * &lt;/p&gt;                
                <@param>
                    m a The left matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m b The right matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m c Where the results of the operation are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="multTransAB" type="void" line="269"/>
            <javadoc line="297">
                &lt;p&gt;
                 * Performs the following operation:&lt;br&gt;
                 * &lt;br&gt;
                 * c = a * b&lt;sup&gt;T&lt;/sup&gt; &lt;br&gt;
                 * c&lt;sub&gt;ij&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ik&lt;/sub&gt; * b&lt;sub&gt;jk&lt;/sub&gt;}
                 * &lt;/p&gt;                
                <@param>
                    m a The left matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m b The right matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m c Where the results of the operation are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="multTransB" type="void" line="309"/>
            <javadoc line="337">
                &lt;p&gt;Performs matrix to vector multiplication:&lt;br&gt;
                 * &lt;br&gt;
                 * c = a * b &lt;br&gt;
                 * &lt;br&gt;
                 * c&lt;sub&gt;i&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ik&lt;/sub&gt; * b&lt;sub&gt;k&lt;/sub&gt;}
                 * &lt;/p&gt;                
                <@param>
                    m a The left matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m b The right vector in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m c Where the results of the operation are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="mult" type="void" line="349"/>
            <javadoc line="357">
                &lt;p&gt;Performs vector to matrix multiplication:&lt;br&gt;
                 * &lt;br&gt;
                 * c = a * b &lt;br&gt;
                 * &lt;br&gt;
                 * c&lt;sub&gt;j&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { b&lt;sub&gt;k&lt;/sub&gt; * a&lt;sub&gt;kj&lt;/sub&gt; }
                 * &lt;/p&gt;                
                <@param>
                    m a The left vector in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m b The right matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m c Where the results of the operation are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="mult" type="void" line="369"/>
            <javadoc line="377">
                &lt;p&gt;Performs the vector dot product:&lt;br&gt;
                 * &lt;br&gt;
                 * c = a * b &lt;br&gt;
                 * &lt;br&gt;
                 * c&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { b&lt;sub&gt;k&lt;/sub&gt; * a&lt;sub&gt;k&lt;/sub&gt; }
                 * &lt;/p&gt;                
                <@param>
                    m a The left vector in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m b The right matrix in the multiplication operation. Not modified.                    
                </@param>
                <@return>
                    n The dot product                    
                </@return>
            </javadoc>
            <method name="dot" type="double" line="389"/>
            <javadoc line="393">
                Sets all the diagonal elements equal to one and everything else equal to zero.
                 * If this is a square matrix then it will be an identity matrix.                
                <@param>
                    m a A matrix.                    
                </@param>
            </javadoc>
            <method name="setIdentity" type="void" line="399"/>
            <javadoc line="407">
                Inverts matrix &apos;a&apos; using minor matrices and stores the results in &apos;inv&apos;.  Scaling is applied to improve
                 * stability against overflow and underflow.
                 * WARNING: Potentially less stable than using LU decomposition.                
                <@param>
                    m a Input matrix. Not modified.                    
                </@param>
                <@param>
                    m inv Inverted output matrix.  Modified.                    
                </@param>
                <@return>
                    n true if it was successful or false if it failed.  Not always reliable.                    
                </@return>
            </javadoc>
            <method name="invert" type="boolean" line="417">
                <declaration name="scale" type="double" line="419"/>
                <declaration name="a11" type="double" line="421"/>
                <declaration name="a12" type="double" line="422"/>
                <declaration name="a13" type="double" line="423"/>
                <declaration name="a14" type="double" line="424"/>
                <declaration name="a15" type="double" line="425"/>
                <declaration name="a21" type="double" line="426"/>
                <declaration name="a22" type="double" line="427"/>
                <declaration name="a23" type="double" line="428"/>
                <declaration name="a24" type="double" line="429"/>
                <declaration name="a25" type="double" line="430"/>
                <declaration name="a31" type="double" line="431"/>
                <declaration name="a32" type="double" line="432"/>
                <declaration name="a33" type="double" line="433"/>
                <declaration name="a34" type="double" line="434"/>
                <declaration name="a35" type="double" line="435"/>
                <declaration name="a41" type="double" line="436"/>
                <declaration name="a42" type="double" line="437"/>
                <declaration name="a43" type="double" line="438"/>
                <declaration name="a44" type="double" line="439"/>
                <declaration name="a45" type="double" line="440"/>
                <declaration name="a51" type="double" line="441"/>
                <declaration name="a52" type="double" line="442"/>
                <declaration name="a53" type="double" line="443"/>
                <declaration name="a54" type="double" line="444"/>
                <declaration name="a55" type="double" line="445"/>
                <declaration name="m11" type="double" line="447"/>
                <declaration name="m12" type="double" line="448"/>
                <declaration name="m13" type="double" line="449"/>
                <declaration name="m14" type="double" line="450"/>
                <declaration name="m15" type="double" line="451"/>
                <declaration name="m21" type="double" line="452"/>
                <declaration name="m22" type="double" line="453"/>
                <declaration name="m23" type="double" line="454"/>
                <declaration name="m24" type="double" line="455"/>
                <declaration name="m25" type="double" line="456"/>
                <declaration name="m31" type="double" line="457"/>
                <declaration name="m32" type="double" line="458"/>
                <declaration name="m33" type="double" line="459"/>
                <declaration name="m34" type="double" line="460"/>
                <declaration name="m35" type="double" line="461"/>
                <declaration name="m41" type="double" line="462"/>
                <declaration name="m42" type="double" line="463"/>
                <declaration name="m43" type="double" line="464"/>
                <declaration name="m44" type="double" line="465"/>
                <declaration name="m45" type="double" line="466"/>
                <declaration name="m51" type="double" line="467"/>
                <declaration name="m52" type="double" line="468"/>
                <declaration name="m53" type="double" line="469"/>
                <declaration name="m54" type="double" line="470"/>
                <declaration name="m55" type="double" line="471"/>
                <declaration name="det" type="double" line="473"/>
            </method>
            <javadoc line="504">
                Computes the determinant using minor matrices.
                 * &lt;p&gt;&lt;/p&gt;
                 * WARNING: Potentially less stable than using LU decomposition.                
                <@param>
                    m mat Input matrix.  Not modified.                    
                </@param>
                <@return>
                    n The determinant.                    
                </@return>
            </javadoc>
            <method name="det" type="double" line="512">
                <declaration name="a11" type="double" line="514"/>
                <declaration name="a12" type="double" line="515"/>
                <declaration name="a13" type="double" line="516"/>
                <declaration name="a14" type="double" line="517"/>
                <declaration name="a21" type="double" line="518"/>
                <declaration name="a22" type="double" line="519"/>
                <declaration name="a23" type="double" line="520"/>
                <declaration name="a24" type="double" line="521"/>
                <declaration name="a31" type="double" line="522"/>
                <declaration name="a32" type="double" line="523"/>
                <declaration name="a33" type="double" line="524"/>
                <declaration name="a34" type="double" line="525"/>
                <declaration name="a41" type="double" line="526"/>
                <declaration name="a42" type="double" line="527"/>
                <declaration name="a43" type="double" line="528"/>
                <declaration name="a44" type="double" line="529"/>
                <declaration name="ret" type="double" line="531"/>
            </method>
            <javadoc line="557">
                &lt;p&gt;
                 * This computes the trace of the matrix:&lt;br&gt;
                 * &lt;br&gt;
                 * trace = &amp;sum;&lt;sub&gt;i=1:n&lt;/sub&gt; { a&lt;sub&gt;ii&lt;/sub&gt; }
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * The trace is only defined for square matrices.
                 * &lt;/p&gt;                
                <@param>
                    m a A square matrix.  Not modified.                    
                </@param>
            </javadoc>
            <method name="trace" type="double" line="569"/>
            <javadoc line="573">
                &lt;p&gt;
                 * Extracts all diagonal elements from &apos;input&apos; and places them inside the &apos;out&apos; vector. Elements
                 * are in sequential order.
                 * &lt;/p&gt;                
                <@param>
                    m input Matrix.  Not modified.                    
                </@param>
                <@param>
                    m out Vector containing diagonal elements.  Modified.                    
                </@param>
            </javadoc>
            <method name="diag" type="void" line="583"/>
            <javadoc line="591">
                &lt;p&gt;
                 * Returns the value of the element in the matrix that has the largest value.&lt;br&gt;
                 * &lt;br&gt;
                 * Max{ a&lt;sub&gt;ij&lt;/sub&gt; } for all i and j&lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a A matrix. Not modified.                    
                </@param>
                <@return>
                    n The max element value of the matrix.                    
                </@return>
            </javadoc>
            <method name="elementMax" type="double" line="601">
                <declaration name="max" type="double" line="602"/>
            </method>
            <javadoc line="631">
                &lt;p&gt;
                 * Returns the absolute value of the element in the matrix that has the largest absolute value.&lt;br&gt;
                 * &lt;br&gt;
                 * Max{ |a&lt;sub&gt;ij&lt;/sub&gt;| } for all i and j&lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a A matrix. Not modified.                    
                </@param>
                <@return>
                    n The max abs element value of the matrix.                    
                </@return>
            </javadoc>
            <method name="elementMaxAbs" type="double" line="641">
                <declaration name="max" type="double" line="642"/>
            </method>
            <javadoc line="671">
                &lt;p&gt;
                 * Returns the value of the element in the matrix that has the minimum value.&lt;br&gt;
                 * &lt;br&gt;
                 * Min{ a&lt;sub&gt;ij&lt;/sub&gt; } for all i and j&lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a A matrix. Not modified.                    
                </@param>
                <@return>
                    n The value of element in the matrix with the minimum value.                    
                </@return>
            </javadoc>
            <method name="elementMin" type="double" line="681">
                <declaration name="min" type="double" line="682"/>
            </method>
            <javadoc line="711">
                &lt;p&gt;
                 * Returns the absolute value of the element in the matrix that has the smallest absolute value.&lt;br&gt;
                 * &lt;br&gt;
                 * Min{ |a&lt;sub&gt;ij&lt;/sub&gt;| } for all i and j&lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a A matrix. Not modified.                    
                </@param>
                <@return>
                    n The max element value of the matrix.                    
                </@return>
            </javadoc>
            <method name="elementMinAbs" type="double" line="721">
                <declaration name="min" type="double" line="722"/>
            </method>
            <javadoc line="751">
                &lt;p&gt;Performs the an element by element multiplication operation:&lt;br&gt;
                 * &lt;br&gt;
                 * a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; * b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a The left matrix in the multiplication operation. Modified.                    
                </@param>
                <@param>
                    m b The right matrix in the multiplication operation. Not modified.                    
                </@param>
            </javadoc>
            <method name="elementMult" type="void" line="759"/>
            <javadoc line="767">
                &lt;p&gt;Performs the an element by element multiplication operation:&lt;br&gt;
                 * &lt;br&gt;
                 * c&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; * b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a The left matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m b The right matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m c Where the results of the operation are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="elementMult" type="void" line="776"/>
            <javadoc line="784">
                &lt;p&gt;Performs the an element by element division operation:&lt;br&gt;
                 * &lt;br&gt;
                 * a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; / b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a The left matrix in the division operation. Modified.                    
                </@param>
                <@param>
                    m b The right matrix in the division operation. Not modified.                    
                </@param>
            </javadoc>
            <method name="elementDiv" type="void" line="792"/>
            <javadoc line="800">
                &lt;p&gt;Performs the an element by element division operation:&lt;br&gt;
                 * &lt;br&gt;
                 * c&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; / b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a The left matrix in the division operation. Not modified.                    
                </@param>
                <@param>
                    m b The right matrix in the division operation. Not modified.                    
                </@param>
                <@param>
                    m c Where the results of the operation are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="elementDiv" type="void" line="809"/>
            <javadoc line="817">
                &lt;p&gt;
                 * Performs an in-place element by element scalar multiplication.&lt;br&gt;
                 * &lt;br&gt;
                 * a&lt;sub&gt;ij&lt;/sub&gt; = &amp;alpha;*a&lt;sub&gt;ij&lt;/sub&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a The matrix that is to be scaled.  Modified.                    
                </@param>
                <@param>
                    m alpha the amount each element is multiplied by.                    
                </@param>
            </javadoc>
            <method name="scale" type="void" line="827"/>
            <javadoc line="835">
                &lt;p&gt;
                 * Performs an element by element scalar multiplication.&lt;br&gt;
                 * &lt;br&gt;
                 * b&lt;sub&gt;ij&lt;/sub&gt; = &amp;alpha;*a&lt;sub&gt;ij&lt;/sub&gt;
                 * &lt;/p&gt;                
                <@param>
                    m alpha the amount each element is multiplied by.                    
                </@param>
                <@param>
                    m a The matrix that is to be scaled.  Not modified.                    
                </@param>
                <@param>
                    m b Where the scaled matrix is stored. Modified.                    
                </@param>
            </javadoc>
            <method name="scale" type="void" line="846"/>
            <javadoc line="854">
                &lt;p&gt;
                 * Performs an in-place element by element scalar division.&lt;br&gt;
                 * &lt;br&gt;
                 * a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt;/&amp;alpha;
                 * &lt;/p&gt;                
                <@param>
                    m a The matrix whose elements are to be divided.  Modified.                    
                </@param>
                <@param>
                    m alpha the amount each element is divided by.                    
                </@param>
            </javadoc>
            <method name="divide" type="void" line="864"/>
            <javadoc line="872">
                &lt;p&gt;
                 * Performs an element by element scalar division.&lt;br&gt;
                 * &lt;br&gt;
                 * b&lt;sub&gt;ij&lt;/sub&gt; = *a&lt;sub&gt;ij&lt;/sub&gt; /&amp;alpha;
                 * &lt;/p&gt;                
                <@param>
                    m alpha the amount each element is divided by.                    
                </@param>
                <@param>
                    m a The matrix whose elements are to be divided.  Not modified.                    
                </@param>
                <@param>
                    m b Where the results are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="divide" type="void" line="883"/>
            <javadoc line="891">
                &lt;p&gt;
                 * Changes the sign of every element in the matrix.&lt;br&gt;
                 * &lt;br&gt;
                 * a&lt;sub&gt;ij&lt;/sub&gt; = -a&lt;sub&gt;ij&lt;/sub&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a A matrix. Modified.                    
                </@param>
            </javadoc>
            <method name="changeSign" type="void" line="901"/>
            <javadoc line="909">
                &lt;p&gt;
                 * Sets every element in the matrix to the specified value.&lt;br&gt;
                 * &lt;br&gt;
                 * a&lt;sub&gt;ij&lt;/sub&gt; = value
                 * &lt;p&gt;                
                <@param>
                    m a A matrix whose elements are about to be set. Modified.                    
                </@param>
                <@param>
                    m v The value each element will have.                    
                </@param>
            </javadoc>
            <method name="fill" type="void" line="919"/>
        </class>
    </source>