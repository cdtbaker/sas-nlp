<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.fixed">
        <import package="org.ejml.data.FixedMatrix3_64F"/>
        <import package="org.ejml.data.FixedMatrix3x3_64F"/>
        <class name="FixedOps3" line="24">
            <javadoc line="24">
                &lt;p&gt;Common matrix operations for fixed sized matrices which are 3 x 3 or 3 element vectors.&lt;/p&gt;
                 * &lt;p&gt;DO NOT MODIFY.  Automatically generated code created by GenerateFixedOps&lt;/p&gt;                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <javadoc line="31">
                &lt;p&gt;Performs the following operation:&lt;br&gt;
                 * &lt;br&gt;
                 * c = a + b &lt;br&gt;
                 * c&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; + b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * Matrix C can be the same instance as Matrix A and/or B.
                 * &lt;/p&gt;                
                <@param>
                    m a A Matrix. Not modified.                    
                </@param>
                <@param>
                    m b A Matrix. Not modified.                    
                </@param>
                <@param>
                    m c A Matrix where the results are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="add" type="void" line="46"/>
            <javadoc line="58">
                &lt;p&gt;Performs the following operation:&lt;br&gt;
                 * &lt;br&gt;
                 * a = a + b &lt;br&gt;
                 * a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; + b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a A Matrix. Modified.                    
                </@param>
                <@param>
                    m b A Matrix. Not modified.                    
                </@param>
            </javadoc>
            <method name="addEquals" type="void" line="68"/>
            <javadoc line="80">
                Performs an in-place transpose.  This algorithm is only efficient for square
                 * matrices.                
                <@param>
                    m m The matrix that is to be transposed. Modified.                    
                </@param>
            </javadoc>
            <method name="transpose" type="void" line="86">
                <declaration name="tmp" type="double" line="87"/>
            </method>
            <javadoc line="93">
                &lt;p&gt;
                 * Transposes matrix &apos;a&apos; and stores the results in &apos;b&apos;:&lt;br&gt;
                 * &lt;br&gt;
                 * b&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ji&lt;/sub&gt;&lt;br&gt;
                 * where &apos;b&apos; is the transpose of &apos;a&apos;.
                 * &lt;/p&gt;                
                <@param>
                    m input The original matrix.  Not modified.                    
                </@param>
                <@param>
                    m output Where the transpose is stored. If null a new matrix is created. Modified.                    
                </@param>
                <@return>
                    n The transposed matrix.                    
                </@return>
            </javadoc>
            <method name="transpose" type="FixedMatrix3x3_64F" line="105"/>
            <javadoc line="122">
                &lt;p&gt;Performs the following operation:&lt;br&gt;
                 * &lt;br&gt;
                 * c = a * b &lt;br&gt;
                 * &lt;br&gt;
                 * c&lt;sub&gt;ij&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ik&lt;/sub&gt; * b&lt;sub&gt;kj&lt;/sub&gt;}
                 * &lt;/p&gt;                
                <@param>
                    m a The left matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m b The right matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m c Where the results of the operation are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="mult" type="void" line="134"/>
            <javadoc line="146">
                &lt;p&gt;Performs the following operation:&lt;br&gt;
                 * &lt;br&gt;
                 * c = a&lt;sup&gt;T&lt;/sup&gt; * b &lt;br&gt;
                 * &lt;br&gt;
                 * c&lt;sub&gt;ij&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ki&lt;/sub&gt; * b&lt;sub&gt;kj&lt;/sub&gt;}
                 * &lt;/p&gt;                
                <@param>
                    m a The left matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m b The right matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m c Where the results of the operation are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="multTransA" type="void" line="158"/>
            <javadoc line="170">
                &lt;p&gt;
                 * Performs the following operation:&lt;br&gt;
                 * &lt;br&gt;
                 * c = a&lt;sup&gt;T&lt;/sup&gt; * b&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                 * c&lt;sub&gt;ij&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ki&lt;/sub&gt; * b&lt;sub&gt;jk&lt;/sub&gt;}
                 * &lt;/p&gt;                
                <@param>
                    m a The left matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m b The right matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m c Where the results of the operation are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="multTransAB" type="void" line="182"/>
            <javadoc line="194">
                &lt;p&gt;
                 * Performs the following operation:&lt;br&gt;
                 * &lt;br&gt;
                 * c = a * b&lt;sup&gt;T&lt;/sup&gt; &lt;br&gt;
                 * c&lt;sub&gt;ij&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ik&lt;/sub&gt; * b&lt;sub&gt;jk&lt;/sub&gt;}
                 * &lt;/p&gt;                
                <@param>
                    m a The left matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m b The right matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m c Where the results of the operation are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="multTransB" type="void" line="206"/>
            <javadoc line="218">
                &lt;p&gt;Performs matrix to vector multiplication:&lt;br&gt;
                 * &lt;br&gt;
                 * c = a * b &lt;br&gt;
                 * &lt;br&gt;
                 * c&lt;sub&gt;i&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ik&lt;/sub&gt; * b&lt;sub&gt;k&lt;/sub&gt;}
                 * &lt;/p&gt;                
                <@param>
                    m a The left matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m b The right vector in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m c Where the results of the operation are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="mult" type="void" line="230"/>
            <javadoc line="236">
                &lt;p&gt;Performs vector to matrix multiplication:&lt;br&gt;
                 * &lt;br&gt;
                 * c = a * b &lt;br&gt;
                 * &lt;br&gt;
                 * c&lt;sub&gt;j&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { b&lt;sub&gt;k&lt;/sub&gt; * a&lt;sub&gt;kj&lt;/sub&gt; }
                 * &lt;/p&gt;                
                <@param>
                    m a The left vector in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m b The right matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m c Where the results of the operation are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="mult" type="void" line="248"/>
            <javadoc line="254">
                &lt;p&gt;Performs the vector dot product:&lt;br&gt;
                 * &lt;br&gt;
                 * c = a * b &lt;br&gt;
                 * &lt;br&gt;
                 * c&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { b&lt;sub&gt;k&lt;/sub&gt; * a&lt;sub&gt;k&lt;/sub&gt; }
                 * &lt;/p&gt;                
                <@param>
                    m a The left vector in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m b The right matrix in the multiplication operation. Not modified.                    
                </@param>
                <@return>
                    n The dot product                    
                </@return>
            </javadoc>
            <method name="dot" type="double" line="266"/>
            <javadoc line="270">
                Sets all the diagonal elements equal to one and everything else equal to zero.
                 * If this is a square matrix then it will be an identity matrix.                
                <@param>
                    m a A matrix.                    
                </@param>
            </javadoc>
            <method name="setIdentity" type="void" line="276"/>
            <javadoc line="282">
                Inverts matrix &apos;a&apos; using minor matrices and stores the results in &apos;inv&apos;.  Scaling is applied to improve
                 * stability against overflow and underflow.
                 * WARNING: Potentially less stable than using LU decomposition.                
                <@param>
                    m a Input matrix. Not modified.                    
                </@param>
                <@param>
                    m inv Inverted output matrix.  Modified.                    
                </@param>
                <@return>
                    n true if it was successful or false if it failed.  Not always reliable.                    
                </@return>
            </javadoc>
            <method name="invert" type="boolean" line="292">
                <declaration name="scale" type="double" line="294"/>
                <declaration name="a11" type="double" line="296"/>
                <declaration name="a12" type="double" line="297"/>
                <declaration name="a13" type="double" line="298"/>
                <declaration name="a21" type="double" line="299"/>
                <declaration name="a22" type="double" line="300"/>
                <declaration name="a23" type="double" line="301"/>
                <declaration name="a31" type="double" line="302"/>
                <declaration name="a32" type="double" line="303"/>
                <declaration name="a33" type="double" line="304"/>
                <declaration name="m11" type="double" line="306"/>
                <declaration name="m12" type="double" line="307"/>
                <declaration name="m13" type="double" line="308"/>
                <declaration name="m21" type="double" line="309"/>
                <declaration name="m22" type="double" line="310"/>
                <declaration name="m23" type="double" line="311"/>
                <declaration name="m31" type="double" line="312"/>
                <declaration name="m32" type="double" line="313"/>
                <declaration name="m33" type="double" line="314"/>
                <declaration name="det" type="double" line="316"/>
            </method>
            <javadoc line="331">
                Computes the determinant using minor matrices.
                 * &lt;p&gt;&lt;/p&gt;
                 * WARNING: Potentially less stable than using LU decomposition.                
                <@param>
                    m mat Input matrix.  Not modified.                    
                </@param>
                <@return>
                    n The determinant.                    
                </@return>
            </javadoc>
            <method name="det" type="double" line="339">
                <declaration name="a" type="double" line="341"/>
                <declaration name="b" type="double" line="342"/>
                <declaration name="c" type="double" line="343"/>
            </method>
            <javadoc line="348">
                &lt;p&gt;
                 * This computes the trace of the matrix:&lt;br&gt;
                 * &lt;br&gt;
                 * trace = &amp;sum;&lt;sub&gt;i=1:n&lt;/sub&gt; { a&lt;sub&gt;ii&lt;/sub&gt; }
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * The trace is only defined for square matrices.
                 * &lt;/p&gt;                
                <@param>
                    m a A square matrix.  Not modified.                    
                </@param>
            </javadoc>
            <method name="trace" type="double" line="360"/>
            <javadoc line="364">
                &lt;p&gt;
                 * Extracts all diagonal elements from &apos;input&apos; and places them inside the &apos;out&apos; vector. Elements
                 * are in sequential order.
                 * &lt;/p&gt;                
                <@param>
                    m input Matrix.  Not modified.                    
                </@param>
                <@param>
                    m out Vector containing diagonal elements.  Modified.                    
                </@param>
            </javadoc>
            <method name="diag" type="void" line="374"/>
            <javadoc line="380">
                &lt;p&gt;
                 * Returns the value of the element in the matrix that has the largest value.&lt;br&gt;
                 * &lt;br&gt;
                 * Max{ a&lt;sub&gt;ij&lt;/sub&gt; } for all i and j&lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a A matrix. Not modified.                    
                </@param>
                <@return>
                    n The max element value of the matrix.                    
                </@return>
            </javadoc>
            <method name="elementMax" type="double" line="390">
                <declaration name="max" type="double" line="391"/>
            </method>
            <javadoc line="404">
                &lt;p&gt;
                 * Returns the absolute value of the element in the matrix that has the largest absolute value.&lt;br&gt;
                 * &lt;br&gt;
                 * Max{ |a&lt;sub&gt;ij&lt;/sub&gt;| } for all i and j&lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a A matrix. Not modified.                    
                </@param>
                <@return>
                    n The max abs element value of the matrix.                    
                </@return>
            </javadoc>
            <method name="elementMaxAbs" type="double" line="414">
                <declaration name="max" type="double" line="415"/>
            </method>
            <javadoc line="428">
                &lt;p&gt;
                 * Returns the value of the element in the matrix that has the minimum value.&lt;br&gt;
                 * &lt;br&gt;
                 * Min{ a&lt;sub&gt;ij&lt;/sub&gt; } for all i and j&lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a A matrix. Not modified.                    
                </@param>
                <@return>
                    n The value of element in the matrix with the minimum value.                    
                </@return>
            </javadoc>
            <method name="elementMin" type="double" line="438">
                <declaration name="min" type="double" line="439"/>
            </method>
            <javadoc line="452">
                &lt;p&gt;
                 * Returns the absolute value of the element in the matrix that has the smallest absolute value.&lt;br&gt;
                 * &lt;br&gt;
                 * Min{ |a&lt;sub&gt;ij&lt;/sub&gt;| } for all i and j&lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a A matrix. Not modified.                    
                </@param>
                <@return>
                    n The max element value of the matrix.                    
                </@return>
            </javadoc>
            <method name="elementMinAbs" type="double" line="462">
                <declaration name="min" type="double" line="463"/>
            </method>
            <javadoc line="476">
                &lt;p&gt;Performs the an element by element multiplication operation:&lt;br&gt;
                 * &lt;br&gt;
                 * a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; * b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a The left matrix in the multiplication operation. Modified.                    
                </@param>
                <@param>
                    m b The right matrix in the multiplication operation. Not modified.                    
                </@param>
            </javadoc>
            <method name="elementMult" type="void" line="484"/>
            <javadoc line="490">
                &lt;p&gt;Performs the an element by element multiplication operation:&lt;br&gt;
                 * &lt;br&gt;
                 * c&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; * b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a The left matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m b The right matrix in the multiplication operation. Not modified.                    
                </@param>
                <@param>
                    m c Where the results of the operation are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="elementMult" type="void" line="499"/>
            <javadoc line="505">
                &lt;p&gt;Performs the an element by element division operation:&lt;br&gt;
                 * &lt;br&gt;
                 * a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; / b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a The left matrix in the division operation. Modified.                    
                </@param>
                <@param>
                    m b The right matrix in the division operation. Not modified.                    
                </@param>
            </javadoc>
            <method name="elementDiv" type="void" line="513"/>
            <javadoc line="519">
                &lt;p&gt;Performs the an element by element division operation:&lt;br&gt;
                 * &lt;br&gt;
                 * c&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; / b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a The left matrix in the division operation. Not modified.                    
                </@param>
                <@param>
                    m b The right matrix in the division operation. Not modified.                    
                </@param>
                <@param>
                    m c Where the results of the operation are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="elementDiv" type="void" line="528"/>
            <javadoc line="534">
                &lt;p&gt;
                 * Performs an in-place element by element scalar multiplication.&lt;br&gt;
                 * &lt;br&gt;
                 * a&lt;sub&gt;ij&lt;/sub&gt; = &amp;alpha;*a&lt;sub&gt;ij&lt;/sub&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a The matrix that is to be scaled.  Modified.                    
                </@param>
                <@param>
                    m alpha the amount each element is multiplied by.                    
                </@param>
            </javadoc>
            <method name="scale" type="void" line="544"/>
            <javadoc line="550">
                &lt;p&gt;
                 * Performs an element by element scalar multiplication.&lt;br&gt;
                 * &lt;br&gt;
                 * b&lt;sub&gt;ij&lt;/sub&gt; = &amp;alpha;*a&lt;sub&gt;ij&lt;/sub&gt;
                 * &lt;/p&gt;                
                <@param>
                    m alpha the amount each element is multiplied by.                    
                </@param>
                <@param>
                    m a The matrix that is to be scaled.  Not modified.                    
                </@param>
                <@param>
                    m b Where the scaled matrix is stored. Modified.                    
                </@param>
            </javadoc>
            <method name="scale" type="void" line="561"/>
            <javadoc line="567">
                &lt;p&gt;
                 * Performs an in-place element by element scalar division.&lt;br&gt;
                 * &lt;br&gt;
                 * a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt;/&amp;alpha;
                 * &lt;/p&gt;                
                <@param>
                    m a The matrix whose elements are to be divided.  Modified.                    
                </@param>
                <@param>
                    m alpha the amount each element is divided by.                    
                </@param>
            </javadoc>
            <method name="divide" type="void" line="577"/>
            <javadoc line="583">
                &lt;p&gt;
                 * Performs an element by element scalar division.&lt;br&gt;
                 * &lt;br&gt;
                 * b&lt;sub&gt;ij&lt;/sub&gt; = *a&lt;sub&gt;ij&lt;/sub&gt; /&amp;alpha;
                 * &lt;/p&gt;                
                <@param>
                    m alpha the amount each element is divided by.                    
                </@param>
                <@param>
                    m a The matrix whose elements are to be divided.  Not modified.                    
                </@param>
                <@param>
                    m b Where the results are stored. Modified.                    
                </@param>
            </javadoc>
            <method name="divide" type="void" line="594"/>
            <javadoc line="600">
                &lt;p&gt;
                 * Changes the sign of every element in the matrix.&lt;br&gt;
                 * &lt;br&gt;
                 * a&lt;sub&gt;ij&lt;/sub&gt; = -a&lt;sub&gt;ij&lt;/sub&gt;
                 * &lt;/p&gt;                
                <@param>
                    m a A matrix. Modified.                    
                </@param>
            </javadoc>
            <method name="changeSign" type="void" line="610"/>
            <javadoc line="616">
                &lt;p&gt;
                 * Sets every element in the matrix to the specified value.&lt;br&gt;
                 * &lt;br&gt;
                 * a&lt;sub&gt;ij&lt;/sub&gt; = value
                 * &lt;p&gt;                
                <@param>
                    m a A matrix whose elements are about to be set. Modified.                    
                </@param>
                <@param>
                    m v The value each element will have.                    
                </@param>
            </javadoc>
            <method name="fill" type="void" line="626"/>
        </class>
    </source>