<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.qr">
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="QrUpdate" line="25">
            <comment line="26">
                the decomposition that is being adjusted                
            </comment>
            <comment line="26">
                product of planar multiplications                
            </comment>
            <comment line="26">
                ivate DenseMatrix64F U_tran; // using transpose of U reduces cache misses                
            </comment>
            <comment line="26">
                used to temporarially store data                
            </comment>
            <comment line="26">
                it can process matrices up to this size                
            </comment>
            <comment line="26">
                number of rows and columns in the original A matrix that was decomposed                
            </comment>
            <comment line="26">
                number of rows in the adjusted matrices                
            </comment>
            <comment line="26">
                should it declare new internal data when what currently exists is too small or throw                
            </comment>
            <comment line="26">
                and exception.                
            </comment>
            <javadoc line="25">
                &lt;p&gt;
                  The effects of adding and removing rows from the A matrix in a QR decomposition can
                  be computed much faster than simply recomputing the whole decomposition.  There are many real
                  world situations where this is useful.  For example, when computing a rolling solution to
                  the most recent N measurements.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Definitions: A &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt;, m &amp;ge; n, rank(A) = n and that A = QR, where
                  Q &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; m&lt;/sup&gt; is orthogonal, and R &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt; is
                  upper triangular.
                  &lt;/p&gt;
                  &lt;p&gt;
                   IMPORTANT USAGE NOTE  If auto grow is set to true then the internal data structures will grow automatically
                  to accommodate the matrices passed in.  When adding elements to the decomposition the matrices must have enough
                  data elements to grow before hand.
                  &lt;/p&gt;
                  &lt;p&gt;
                  For more information see David S. Watkins, &quot;Fundamentals of Matrix Computations&quot; 2nd edition, pages 249-259.
                  It is also possible to add and remove columns efficiently, but this is less common and is not supported at
                  this time.
                  &lt;/p&gt;                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <declaration name="Q" type="DenseMatrix64F" line="55"/>
            <declaration name="U_tran" type="DenseMatrix64F" line="57"/>
            <declaration name="Qm" type="DenseMatrix64F" line="58"/>
            <declaration name="r_row" type="double" line="61"/>
            <declaration name="maxCols" type="int" line="64"/>
            <declaration name="maxRows" type="int" line="65"/>
            <declaration name="m" type="int" line="68"/>
            <declaration name="m_m" type="int" line="70"/>
            <declaration name="autoGrow" type="boolean" line="74"/>
            <javadoc line="76">
                Creates an update which can decompose matrices up to the specified size.  Autogrow
                  is set to false.                
                <@param>
                    m maxRows                    
                </@param>
                <@param>
                    m maxCols                    
                </@param>
            </javadoc>
            <method name="QrUpdate" type="constructor" line="83">
                <params>
                    <param name="maxRows" type="int"/>
                    <param name="maxCols" type="int"/>
                </params>
            </method>
            <javadoc line="88">
                Creates an update which can decompose matrices up to the specified size.  Autogrow
                  is configurable.                
                <@param>
                    m maxRows                    
                </@param>
                <@param>
                    m maxCols                    
                </@param>
                <@param>
                    m autoGrow                    
                </@param>
            </javadoc>
            <method name="QrUpdate" type="constructor" line="96">
                <params>
                    <param name="maxRows" type="int"/>
                    <param name="maxCols" type="int"/>
                    <param name="autoGrow" type="boolean"/>
                </params>
            </method>
            <javadoc line="101">
                Does not predeclare data and it will autogrow.                
            </javadoc>
            <method name="QrUpdate" type="constructor" line="104"/>
            <javadoc line="108">
                Declares the internal data structures so that it can process matrices up to the specified size.                
                <@param>
                    m maxRows                    
                </@param>
                <@param>
                    m maxCols                    
                </@param>
            </javadoc>
            <method name="declareInternalData" type="void" line="114">
                <params>
                    <param name="maxRows" type="int"/>
                    <param name="maxCols" type="int"/>
                </params>
            </method>
            <javadoc line="124">
                &lt;p&gt;
                  Adjusts the values of the Q and R matrices to take in account the effects of inserting
                  a row to the &apos;A&apos; matrix at the specified location.  This operation requires about 6mn + O(n) flops.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If Q and/or R does not have enough data elements to grow then an exception is thrown.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The adjustment done is by computing a series of planar Givens rotations that make the adjusted R
                  matrix upper triangular again.  This is then used to modify the Q matrix.
                  &lt;/p&gt;                
                <@param>
                    m Q The Q matrix which is to be modified, must be big enough to grow.  Must be n by n..  Is modified.                    
                </@param>
                <@param>
                    m R The R matrix which is to be modified, must be big enough to grow.  Must be m by n.  Is modified.                    
                </@param>
                <@param>
                    m row The row being inserted.  Not modified.                    
                </@param>
                <@param>
                    m rowIndex Which row index it is to be inserted at.                    
                </@param>
                <@param>
                    m resizeR Should the number of rows in R be changed?  The additional rows are all zero.                    
                </@param>
            </javadoc>
            <method name="addRow" type="void" line="145">
                <params>
                    <param name="Q" type="DenseMatrix64F"/>
                    <param name="R" type="DenseMatrix64F"/>
                    <param name="row" type="double[]"/>
                    <param name="rowIndex" type="int"/>
                    <param name="resizeR" type="boolean"/>
                </params>
                <comment line="146">
                    memory management and check precoditions                    
                </comment>
                <comment line="146">
                    apply givens rotation to the first two rows of the augmented R matrix                    
                </comment>
                <comment line="146">
                    compute new Q matrix                    
                </comment>
                <comment line="146">
                    discard the reference since it is no longer needed                    
                </comment>
            </method>
            <javadoc line="171">
                &lt;p&gt;
                  Adjusts the values of the Q and R matrices to take in account the effects of removing
                  a row from the &apos;A&apos; matrix at the specified location.  This operation requires about 6mn + O(n) flops.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The adjustment is done by computing a series of planar Givens rotations that make the removed row in Q
                  equal to [1 0 ... 0].
                  &lt;/p&gt;                
                <@param>
                    m Q The Q matrix.  Is modified.                    
                </@param>
                <@param>
                    m R The R matrix.  Is modified.                    
                </@param>
                <@param>
                    m rowIndex Which index of the row that is being removed.                    
                </@param>
                <@param>
                    m resizeR should the shape of R be adjusted?                    
                </@param>
            </javadoc>
            <method name="deleteRow" type="void" line="187">
                <params>
                    <param name="Q" type="DenseMatrix64F"/>
                    <param name="R" type="DenseMatrix64F"/>
                    <param name="rowIndex" type="int"/>
                    <param name="resizeR" type="boolean"/>
                </params>
                <comment line="188">
                    discard the reference since it is no longer needed                    
                </comment>
                <scope line="189"/>
            </method>
            <javadoc line="208">
                Provides the results of a QR decomposition.  These will be modified by adding or removing
                  rows from the original &apos;A&apos; matrix.                
                <@param>
                    m Q The Q matrix which is to be modified.  Is modified later and reference saved.                    
                </@param>
                <@param>
                    m R The R matrix which is to be modified.  Is modified later and reference saved.                    
                </@param>
            </javadoc>
            <method name="setQR" type="void" line="215">
                <params>
                    <param name="Q" type="DenseMatrix64F"/>
                    <param name="R" type="DenseMatrix64F"/>
                    <param name="growRows" type="int"/>
                </params>
                <scope line="216"/>
                <scope line="226">
                    <scope line="227"/>
                    <scope line="229"/>
                </scope>
            </method>
            <javadoc line="236">
                Updates the Q matrix to take in account the inserted matrix.                
                <@param>
                    m rowIndex where the matrix has been inserted.                    
                </@param>
            </javadoc>
            <method name="updateInsertQ" type="void" line="241">
                <params>
                    <param name="rowIndex" type="int"/>
                </params>
                <scope line="245">
                    <scope line="246">
                        <declaration name="sum" type="double" line="247"/>
                        <scope line="248"/>
                    </scope>
                </scope>
                <scope line="255"/>
                <scope line="259">
                    <scope line="260">
                        <declaration name="sum" type="double" line="261"/>
                        <scope line="262"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="270">
                Updates the Q matrix to take inaccount the row that was removed by only multiplying e
                  lements that need to be.  There is still some room for improvement here...                
                <@param>
                    m rowIndex                    
                </@param>
            </javadoc>
            <method name="updateRemoveQ" type="void" line="275">
                <params>
                    <param name="rowIndex" type="int"/>
                </params>
                <scope line="279">
                    <scope line="280">
                        <declaration name="sum" type="double" line="281"/>
                        <scope line="282"/>
                    </scope>
                </scope>
                <scope line="289">
                    <scope line="290">
                        <declaration name="sum" type="double" line="291"/>
                        <scope line="292"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="300">
                Updates the R matrix to take in account the removed row.                
            </javadoc>
            <method name="updateRemoveR" type="void" line="303">
                <scope line="304">
                    <scope line="305">
                        <declaration name="sum" type="double" line="306"/>
                        <scope line="307"/>
                    </scope>
                </scope>
            </method>
            <method name="applyFirstGivens" type="void" line="315">
                <params>
                    <param name="row" type="double[]"/>
                </params>
                <comment line="316">
                    set U to its initial values                    
                </comment>
                <declaration name="c" type="double" line="316"/>
                <declaration name="xi" type="double" line="317"/>
                <declaration name="xj" type="double" line="318"/>
                <declaration name="r" type="double" line="320"/>
                <scope line="321"/>
                <scope line="326"/>
                <scope line="332">
                    <declaration name="vali" type="double" line="333"/>
                    <declaration name="valj" type="double" line="334"/>
                </scope>
            </method>
            <method name="applyLaterGivens" type="void" line="349">
                <scope line="350">
                    <declaration name="c" type="double" line="352"/>
                    <declaration name="xi" type="double" line="353"/>
                    <declaration name="xj" type="double" line="354"/>
                    <declaration name="r" type="double" line="356"/>
                    <scope line="357"/>
                    <scope line="362"/>
                    <scope line="369">
                        <declaration name="vali" type="double" line="370"/>
                        <declaration name="valj" type="double" line="371"/>
                    </scope>
                    <scope line="378">
                        <declaration name="q1" type="double" line="379"/>
                        <declaration name="q2" type="double" line="380"/>
                    </scope>
                </scope>
            </method>
            <method name="computeRemoveGivens" type="void" line="389">
                <params>
                    <param name="selectedRow" type="int"/>
                </params>
                <declaration name="xj" type="double" line="392"/>
                <scope line="394">
                    <declaration name="c" type="double" line="396"/>
                    <declaration name="xi" type="double" line="397"/>
                    <declaration name="r" type="double" line="399"/>
                    <scope line="400"/>
                    <scope line="404"/>
                    <scope line="413">
                        <declaration name="q1" type="double" line="414"/>
                        <declaration name="q2" type="double" line="415"/>
                    </scope>
                </scope>
            </method>
            <method name="getU_tran" type="DenseMatrix64F" line="423"/>
        </class>
    </source>