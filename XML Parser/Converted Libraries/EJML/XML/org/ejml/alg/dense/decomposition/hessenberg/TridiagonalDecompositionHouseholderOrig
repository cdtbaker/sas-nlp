<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.hessenberg">
        <import package="org.ejml.alg.dense.decomposition.qr.QrHelperFunctions"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="TridiagonalDecompositionHouseholderOrig" line="25">
            <comment line="26">
                The size of the matrix                
            </comment>
            <comment line="26">
                temporary storage                
            </comment>
            <comment line="26">
                gammas for the householder operations                
            </comment>
            <comment line="26">
                temporary storage                
            </comment>
            <javadoc line="25">
                &lt;p&gt;
                 * A straight forward implementation from &quot;Fundamentals of Matrix Computations,&quot; Second Edition.&lt;br&gt;
                 * &lt;br&gt;
                 * This is only saved to provide a point of reference in benchmarks.
                 * &lt;/p&gt;                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <declaration name="QT" type="DenseMatrix64F" line="36"/>
            <javadoc line="36">
                Internal storage of decomposed matrix.  The tridiagonal matrix is stored in the
                 * upper tridiagonal portion of the matrix.  The householder vectors are stored
                 * in the upper rows.                
            </javadoc>
            <declaration name="N" type="int" line="44"/>
            <declaration name="w" type="double" line="47"/>
            <declaration name="gammas" type="double" line="49"/>
            <declaration name="b" type="double" line="51"/>
            <method name="TridiagonalDecompositionHouseholderOrig" type="constructor" line="53"/>
            <javadoc line="61">
                Returns the interal matrix where the decomposed results are stored.                
                <@return>
                    n                    
                </@return>
            </javadoc>
            <method name="getQT" type="DenseMatrix64F" line="65"/>
            <javadoc line="69">
                Extracts the tridiagonal matrix found in the decomposition.                
                <@param>
                    m T If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </@param>
                <@return>
                    n The extracted T matrix.                    
                </@return>
            </javadoc>
            <method name="getT" type="DenseMatrix64F" line="75">
                <scope line="76"/>
                <scope line="88"/>
            </method>
            <javadoc line="100">
                An orthogonal matrix that has the following property: T = Q&lt;sup&gt;T&lt;/sup&gt;AQ                
                <@param>
                    m Q If not null then the results will be stored here.  Otherwise a new matrix will be created.                    
                </@param>
                <@return>
                    n The extracted Q matrix.                    
                </@return>
            </javadoc>
            <method name="getQ" type="DenseMatrix64F" line="106">
                <scope line="107">
                    <scope line="109"/>
                </scope>
                <scope line="119">
                    <scope line="121"/>
                </scope>
            </method>
            <javadoc line="131">
                Decomposes the provided symmetric matrix.                
                <@param>
                    m A Symmetric matrix that is going to be decomposed.  Not modified.                    
                </@param>
            </javadoc>
            <method name="decompose" type="void" line="136">
                <scope line="139"/>
            </method>
            <javadoc line="146">
                Computes and performs the similar a transform for submatrix k.                
            </javadoc>
            <method name="similarTransform" type="void" line="149">
                <comment line="150">
                    find the largest value in this column                    
                </comment>
                <comment line="150">
                    this is used to normalize the column and mitigate overflow/underflow                    
                </comment>
                <declaration name="t" type="double" line="150"/>
                <declaration name="max" type="double" line="154"/>
                <declaration name="rowU" type="int" line="156"/>
                <scope line="158">
                    <declaration name="val" type="double" line="159"/>
                </scope>
                <scope line="164">
                    <declaration name="tau" type="double" line="167"/>
                    <scope line="170">
                        <declaration name="val" type="double" line="171"/>
                    </scope>
                    <declaration name="nu" type="double" line="181"/>
                    <scope line="184"/>
                    <declaration name="gamma" type="double" line="188"/>
                </scope>
                <scope line="197"/>
            </method>
            <javadoc line="202">
                Performs the householder operations on left and right and side of the matrix.  Q&lt;sup&gt;T&lt;/sup&gt;AQ                
                <@param>
                    m row Specifies the submatrix.                    
                </@param>
                <@param>
                    m gamma The gamma for the householder operation                    
                </@param>
            </javadoc>
            <method name="householderSymmetric" type="void" line="209">
                <comment line="210">
                    compute v = -gamma*A*u                    
                </comment>
                <comment line="210">
                    alpha = -0.5*gamma*u^T*v                    
                </comment>
                <comment line="210">
                    w = v + alpha*u                    
                </comment>
                <comment line="210">
                    A = A + w*u^T + u*w^T                    
                </comment>
                <declaration name="startU" type="int" line="210"/>
                <scope line="213">
                    <declaration name="total" type="double" line="214"/>
                    <scope line="215"/>
                </scope>
                <declaration name="alpha" type="double" line="222"/>
                <scope line="224"/>
                <scope line="230"/>
                <scope line="235">
                    <declaration name="ww" type="double" line="237"/>
                    <declaration name="uu" type="double" line="238"/>
                    <scope line="241"/>
                </scope>
            </method>
            <javadoc line="249">
                If needed declares and sets up internal data structures.                
                <@param>
                    m A Matrix being decomposed.                    
                </@param>
            </javadoc>
            <method name="init" type="void" line="254">
                <comment line="255">
                    just copy the top right triangle                    
                </comment>
                <scope line="258">
                    <scope line="262"/>
                </scope>
            </method>
            <method name="getGamma" type="double" line="273"/>
        </class>
    </source>