<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.eig">
        <import package="org.ejml.data.Complex64F"/>
        <class name="EigenvalueSmall" line="24">
            <comment line="25">
                if |a11-a22| &gt;&gt; |a12+a21| there might be a better way.  see pg371                
            </comment>
            <javadoc line="24">
                @author Peter Abeles                
            </javadoc>
            <declaration name="value0" type="Complex64F" line="29"/>
            <declaration name="value1" type="Complex64F" line="30"/>
            <method name="value2x2" type="void" line="34">
                <params>
                    <param name="a11" type="double"/>
                    <param name="a12" type="double"/>
                    <param name="a21" type="double"/>
                    <param name="a22" type="double"/>
                </params>
                <comment line="35">
                    apply a rotators such that th a11 and a22 elements are the same                    
                </comment>
                <comment line="35">
                    double b22 = c2*a22 + s2*a11 + cs*(a12+a21);                    
                </comment>
                <comment line="35">
                    apply second rotator to make A upper triangular if real eigenvalues                    
                </comment>
                <declaration name="c" type="double" line="36"/>
                <scope line="38"/>
                <scope line="40">
                    <declaration name="aa" type="double" line="41"/>
                    <declaration name="bb" type="double" line="42"/>
                    <declaration name="t_hat" type="double" line="44"/>
                    <declaration name="t" type="double" line="45"/>
                </scope>
                <declaration name="c2" type="double" line="51"/>
                <declaration name="s2" type="double" line="52"/>
                <declaration name="cs" type="double" line="53"/>
                <declaration name="b11" type="double" line="55"/>
                <declaration name="b12" type="double" line="56"/>
                <declaration name="b21" type="double" line="57"/>
                <scope line="61">
                    <scope line="62"/>
                    <scope line="65"/>
                </scope>
                <scope line="84"/>
            </method>
            <javadoc line="91">
                Computes the eigenvalues of a 2 by 2 matrix using a faster but more prone to errors method.  This
                  is the typical method.                
            </javadoc>
            <method name="value2x2_fast" type="void" line="96">
                <params>
                    <param name="a11" type="double"/>
                    <param name="a12" type="double"/>
                    <param name="a21" type="double"/>
                    <param name="a22" type="double"/>
                </params>
                <declaration name="left" type="double" line="97"/>
                <declaration name="inside" type="double" line="98"/>
                <scope line="100"/>
                <scope line="104">
                    <declaration name="right" type="double" line="105"/>
                </scope>
            </method>
            <javadoc line="112">
                Compute the symmetric eigenvalue using a slightly safer technique                
            </javadoc>
            <method name="symm2x2_fast" type="void" line="117">
                <params>
                    <param name="a11" type="double"/>
                    <param name="a12" type="double"/>
                    <param name="a22" type="double"/>
                </params>
                <comment line="118">
                    double p = (a11 - a22)*0.5;                    
                </comment>
                <comment line="118">
                    double r = Math.sqrt(p*p + a12*a12);                    
                </comment>
                <comment line="118">
                                        
                </comment>
                <comment line="118">
                    value0.real = a22 + a12*a12/(r-p);                    
                </comment>
                <comment line="118">
                    value1.real = a22 - a12*a12/(r+p);                    
                </comment>
                <comment line="118">
                    }                    
                </comment>
                <comment line="118">
                                        
                </comment>
                <comment line="118">
                    public void symm2x2_std( double a11 , double a12, double a22 )                    
                </comment>
                <comment line="118">
                    {                    
                </comment>
                <declaration name="left" type="double" line="127"/>
                <declaration name="b" type="double" line="128"/>
                <declaration name="right" type="double" line="129"/>
            </method>
        </class>
    </source>