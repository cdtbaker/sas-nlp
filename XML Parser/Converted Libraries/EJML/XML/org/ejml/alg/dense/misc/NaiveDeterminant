<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.misc">
        <import package="org.ejml.data.DenseMatrix64F"/>
        <class name="NaiveDeterminant" line="24">
            <javadoc line="24">
                Computes the determinant using different very simple and computationally expensive algorithms.                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <javadoc line="31">
                &lt;p&gt;
                  Computes the determinant of the matrix using Leibniz&apos;s formula
                  &lt;/p&gt;
                  &lt;p&gt;
                  A direct implementation of Leibniz determinant equation.  This is of little practical use
                  because of its slow runtime of O(n!) where n is the width of the matrix. LU decomposition
                  should be used instead.  One advantage of Leibniz&apos;s equation is how simplistic it is.
                  &lt;/p&gt;
                  &lt;p&gt;
                  det(A) = Sum( &amp;sigma; in S&lt;sub&gt;n&lt;/sub&gt; ; sgn(&amp;sigma;) Prod( i = 1 to n ; a&lt;sub&gt;i,&amp;sigma;(i)&lt;/sub&gt;) )&lt;br&gt;
                  &lt;ul&gt;
                  &lt;li&gt;sgn is the sign function of permutations. +1 or -1 for even and odd permutations&lt;/li&gt;
                  &lt;li&gt;a set of permutations. if n=3 then the possible permutations are (1,2,3) (1,3,2), (3,2,1), ... etc&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <@param>
                    m mat The matrix whose determinant is computed.                    
                </@param>
                <@return>
                    n The value of the determinant                    
                </@return>
            </javadoc>
            <method name="leibniz" type="double" line="53">
                <params>
                    <param name="mat" type="DenseMatrix64F"/>
                </params>
                <declaration name="perm" type="PermuteArray" line="54"/>
                <declaration name="total" type="double" line="56"/>
                <declaration name="p" type="int" line="58"/>
                <scope line="60">
                    <declaration name="prod" type="double" line="62"/>
                    <scope line="64"/>
                </scope>
            </method>
            <javadoc line="75">
                &lt;p&gt;
                  A simple and inefficient algorithm for computing the determinant. This should never be used.
                  It is at least two orders of magnitude slower than {@link DeterminantFromMinor}. This is included
                  to provide a point of comparision for other algorithms.
                  &lt;/p&gt;                
                <@param>
                    m mat The matrix that the determinant is to be computed from                    
                </@param>
                <@return>
                    n The determinant.                    
                </@return>
            </javadoc>
            <method name="recursive" type="double" line="85">
                <params>
                    <param name="mat" type="DenseMatrix64F"/>
                </params>
                <scope line="86"/>
                <scope line="88"/>
                <scope line="90"/>
                <declaration name="result" type="double" line="94"/>
                <scope line="96">
                    <declaration name="minorMat" type="DenseMatrix64F" line="97"/>
                    <scope line="99">
                        <scope line="100">
                            <scope line="102"/>
                            <scope line="104"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>