<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition">
        <class name="TriangularSolver" line="21">
            <javadoc line="21">
                &lt;p&gt;
                 * This contains algorithms for solving systems of equations where T is a
                 * non-singular triangular matrix:&lt;br&gt;
                 * &lt;br&gt;
                 * T*x = b&lt;br&gt;
                 * &lt;br&gt;
                 * where x and b are vectors, and T is an n by n matrix. T can either be a lower or upper triangular matrix.&lt;br&gt;
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * These functions are designed for use inside of other algorithms.  To use them directly
                 * is dangerous since no sanity checks are performed.
                 * &lt;/p&gt;                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <javadoc line="39">
                &lt;p&gt;
                 * Inverts a square lower triangular matrix:  L = L&lt;sup&gt;-1&lt;/sup&gt;
                 * &lt;/p&gt;                
                <@param>
                    m L                    
                </@param>
                <@param>
                    m m                    
                </@param>
            </javadoc>
            <method name="invertLower" type="void" line="48">
                <scope line="49">
                    <declaration name="L_ii" type="double" line="50"/>
                    <scope line="51">
                        <declaration name="val" type="double" line="52"/>
                        <scope line="53"/>
                    </scope>
                </scope>
            </method>
            <method name="invertLower" type="void" line="62">
                <scope line="63">
                    <declaration name="L_ii" type="double" line="64"/>
                    <scope line="65">
                        <declaration name="val" type="double" line="66"/>
                        <scope line="67"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="76">
                &lt;p&gt;
                 * Solves for non-singular lower triangular matrices using forward substitution.
                 * &lt;br&gt;
                 * b = L&lt;sup&gt;-1&lt;/sup&gt;b&lt;br&gt;
                 * &lt;br&gt;
                 * where b is a vector, L is an n by n matrix.&lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m L An n by n non-singular lower triangular matrix. Not modified.                    
                </@param>
                <@param>
                    m b A vector of length n. Modified.                    
                </@param>
                <@param>
                    m n The size of the matrices.                    
                </@param>
            </javadoc>
            <method name="solveL" type="void" line="90">
                <comment line="91">
                    for( int i = 0; i &lt; n; i++ ) {                    
                </comment>
                <comment line="91">
                    double sum = b[i];                    
                </comment>
                <comment line="91">
                    for( int k=0; k&lt;i; k++ ) {                    
                </comment>
                <comment line="91">
                    sum -= L[i*n+k]* b[k];                    
                </comment>
                <comment line="91">
                    }                    
                </comment>
                <comment line="91">
                    b[i] = sum / L[i*n+i];                    
                </comment>
                <comment line="91">
                    }                    
                </comment>
                <scope line="98">
                    <declaration name="sum" type="double" line="99"/>
                    <declaration name="indexL" type="int" line="100"/>
                    <scope line="101"/>
                </scope>
            </method>
            <javadoc line="108">
                L is a m by m matrix
                 * B is a m by n matrix                
                <@param>
                    m L                    
                </@param>
                <@param>
                    m b                    
                </@param>
                <@param>
                    m m                    
                </@param>
                <@param>
                    m n                    
                </@param>
            </javadoc>
            <method name="solveL" type="void" line="119">
                <scope line="120">
                    <scope line="121">
                        <declaration name="sum" type="double" line="122"/>
                        <scope line="123"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="131">
                &lt;p&gt;
                 * This is a forward substitution solver for non-singular lower triangular matrices.
                 * &lt;br&gt;
                 * b = (L&lt;sup&gt;T&lt;/sup&gt;)&lt;sup&gt;-1&lt;/sup&gt;b&lt;br&gt;
                 * &lt;br&gt;
                 * where b is a vector, L is an n by n matrix.&lt;br&gt;
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * L is a lower triangular matrix, but it comes up with a solution as if it was
                 * an upper triangular matrix that was computed by transposing L.
                 * &lt;/p&gt;                
                <@param>
                    m L An n by n non-singular lower triangular matrix. Not modified.                    
                </@param>
                <@param>
                    m b A vector of length n. Modified.                    
                </@param>
                <@param>
                    m n The size of the matrices.                    
                </@param>
            </javadoc>
            <method name="solveTranL" type="void" line="149">
                <scope line="150">
                    <declaration name="sum" type="double" line="151"/>
                    <scope line="152"/>
                </scope>
            </method>
            <javadoc line="159">
                &lt;p&gt;
                 * This is a forward substitution solver for non-singular upper triangular matrices.
                 * &lt;br&gt;
                 * b = U&lt;sup&gt;-1&lt;/sup&gt;b&lt;br&gt;
                 * &lt;br&gt;
                 * where b is a vector, U is an n by n matrix.&lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m U An n by n non-singular upper triangular matrix. Not modified.                    
                </@param>
                <@param>
                    m b A vector of length n. Modified.                    
                </@param>
                <@param>
                    m n The size of the matrices.                    
                </@param>
            </javadoc>
            <method name="solveU" type="void" line="173">
                <comment line="174">
                    for( int i =n-1; i&gt;=0; i-- ) {                    
                </comment>
                <comment line="174">
                    double sum = b[i];                    
                </comment>
                <comment line="174">
                    for( int j = i+1; j &lt;n; j++ ) {                    
                </comment>
                <comment line="174">
                    sum -= U[i*n+j]* b[j];                    
                </comment>
                <comment line="174">
                    }                    
                </comment>
                <comment line="174">
                    b[i] = sum/U[i*n+i];                    
                </comment>
                <comment line="174">
                    }                    
                </comment>
                <scope line="181">
                    <declaration name="sum" type="double" line="182"/>
                    <declaration name="indexU" type="int" line="183"/>
                    <scope line="184"/>
                </scope>
            </method>
            <method name="solveU" type="void" line="192">
                <comment line="193">
                    for( int i =maxRow-1; i&gt;=minRow; i-- ) {                    
                </comment>
                <comment line="193">
                    double sum = b[i];                    
                </comment>
                <comment line="193">
                    for( int j = i+1; j &lt;maxRow; j++ ) {                    
                </comment>
                <comment line="193">
                    sum -= U[i*sideLength+j]* b[j];                    
                </comment>
                <comment line="193">
                    }                    
                </comment>
                <comment line="193">
                    b[i] = sum/U[i*sideLength+i];                    
                </comment>
                <comment line="193">
                    }                    
                </comment>
                <scope line="200">
                    <declaration name="sum" type="double" line="201"/>
                    <declaration name="indexU" type="int" line="202"/>
                    <scope line="203"/>
                </scope>
            </method>
            <javadoc line="210">
                &lt;p&gt;
                 * This is a forward substitution solver for non-singular upper triangular matrices which are
                 * a sub-matrix inside a larger.  The columns of &apos;b&apos; are solved for individually
                 * &lt;br&gt;
                 * b = U&lt;sup&gt;-1&lt;/sup&gt;b&lt;br&gt;
                 * &lt;br&gt;
                 * where b is a matrix, U is an n by n matrix.&lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m U Matrix containing the upper triangle system                    
                </@param>
                <@param>
                    m startU Index of the first element in U                    
                </@param>
                <@param>
                    m strideU stride between rows                    
                </@param>
                <@param>
                    m widthU How wide the square matrix is                    
                </@param>
                <@param>
                    m b Matrix containing the solution to the system.  Overwritten with the solution.                    
                </@param>
                <@param>
                    m startB Index of the first element in B                    
                </@param>
                <@param>
                    m strideB stride between rows                    
                </@param>
                <@param>
                    m widthB How wide the matrix is.  Length is the same as U's width                    
                </@param>
            </javadoc>
            <method name="solveU" type="void" line="231">
                <comment line="232">
                    todo comment out the above and optimize it                    
                </comment>
                <scope line="232">
                    <scope line="233">
                        <declaration name="sum" type="double" line="234"/>
                        <scope line="235"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>