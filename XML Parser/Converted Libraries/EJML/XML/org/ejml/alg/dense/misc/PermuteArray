<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.misc">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <class name="PermuteArray" line="25">
            <comment line="26">
                used by next                
            </comment>
            <javadoc line="25">
                Generates a permutations of an integer set from 0 to N-1.  This can either be generated
                 * all at once as a list of one at a time.                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <declaration name="level" type="int" line="34"/>
            <declaration name="data" type="int" line="36"/>
            <declaration name="iter" type="int" line="37"/>
            <declaration name="valk" type="int" line="38"/>
            <declaration name="ret" type="int" line="39"/>
            <method name="PermuteArray" type="constructor" line="42">
                <scope line="48"/>
            </method>
            <javadoc line="53">
                &lt;p&gt;
                 * Returns signature of the permutation.  This is the sgn() operator and returns
                 * -1 or 1 depending on it being odd or even.
                 * &lt;br&gt;
                 * sgn(σ) = ( − 1)&lt;sup&gt;m&lt;/sup&gt;&lt;br&gt;
                 * &lt;br&gt;
                 * where m is the number of inversions.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * NOTE: This implementation is painfully slow O(N!).  There is probably another algorithm out there
                 * which is much faster.
                 * &lt;/p&gt;                
                <@return>
                    n -1 or 1 for odd or even permutations.                    
                </@return>
            </javadoc>
            <method name="sgn" type="int" line="69">
                <comment line="70">
                    Is there a way to compute the parity while performing the permutations                    
                </comment>
                <comment line="70">
                    making this much less expensive                    
                </comment>
                <declaration name="total" type="int" line="72"/>
                <scope line="74">
                    <declaration name="val" type="int" line="75"/>
                    <scope line="77">
                        <scope line="78"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="89">
                Computes N factorial                
            </javadoc>
            <method name="fact" type="int" line="92">
                <declaration name="ret" type="int" line="93"/>
                <scope line="95"/>
            </method>
            <javadoc line="102">
                Creates a list of all permutations for a set with N elements.                
                <@param>
                    m N Number of elements in the list being permuted.                    
                </@param>
                <@return>
                    n A list containing all the permutations.                    
                </@return>
            </javadoc>
            <method name="createList" type="List<int[]>" line="109">
                <declaration name="data" type="int" line="110"/>
                <scope line="111"/>
                <declaration name="ret" type="List&lt;int[]&gt;" line="115"/>
            </method>
            <javadoc line="123">
                Internal function that uses recursion to create the list                
            </javadoc>
            <method name="createList" type="void" line="127">
                <scope line="130">
                    <scope line="131">
                        <scope line="132"/>
                    </scope>
                </scope>
                <scope line="136">
                    <declaration name="copy" type="int[]" line="137"/>
                </scope>
            </method>
            <javadoc line="144">
                Creates the next permutation in the sequence.                
                <@return>
                    n An array containing the permutation.  The returned array is modified each time this function is called.                    
                </@return>
            </javadoc>
            <method name="next" type="int[]" line="150">
                <declaration name="hasNewPerm" type="boolean" line="151"/>
                <scope line="153">
                    <scope line="155">
                        <scope line="158">
                            <scope line="162"/>
                            <scope line="169"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>