<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.lu">
        <import package="org.ejml.UtilEjml"/>
        <import package="org.ejml.alg.dense.decomposition.TriangularSolver"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.LUDecomposition"/>
        <import package="org.ejml.ops.CommonOps"/>
        <import package="org.ejml.ops.SpecializedOps"/>
        <class name="LUDecompositionBase" line="29">
            <comment line="30">
                the decomposed matrix                
            </comment>
            <comment line="30">
                it can decompose a matrix up to this size                
            </comment>
            <comment line="30">
                the shape of the matrix                
            </comment>
            <comment line="30">
                data in the matrix                
            </comment>
            <comment line="30">
                used in set, solve, invert                
            </comment>
            <comment line="30">
                used in set                
            </comment>
            <comment line="30">
                used by determinant                
            </comment>
            <implements interface="LUDecomposition">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="29">
                &lt;p&gt;
                  Contains common data structures and operations for LU decomposition algorithms.
                  &lt;/p&gt;                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <declaration name="LU" type="DenseMatrix64F" line="38"/>
            <declaration name="maxWidth" type="int" line="41"/>
            <declaration name="m" type="int" line="44"/>
            <declaration name="dataLU" type="double" line="46"/>
            <declaration name="vv" type="double" line="49"/>
            <declaration name="indx" type="int" line="51"/>
            <declaration name="pivot" type="int" line="52"/>
            <declaration name="pivsign" type="double" line="55"/>
            <method name="setExpectedMaxSize" type="void" line="58">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                </params>
            </method>
            <method name="getLU" type="DenseMatrix64F" line="69"/>
            <method name="getIndx" type="int[]" line="73"/>
            <method name="getPivot" type="int[]" line="77"/>
            <method name="inputModified" type="boolean" line="82"/>
            <javadoc line="86">
                Writes the lower triangular matrix into the specified matrix.                
                <@param>
                    m lower Where the lower triangular matrix is writen to.                    
                </@param>
            </javadoc>
            <method name="getLower" type="DenseMatrix64F" line="93">
                <params>
                    <param name="lower" type="DenseMatrix64F"/>
                </params>
                <declaration name="numRows" type="int" line="94"/>
                <declaration name="numCols" type="int" line="95"/>
                <scope line="97"/>
                <scope line="99"/>
                <scope line="105">
                    <scope line="108"/>
                </scope>
                <scope line="113">
                    <scope line="114">
                        <scope line="115"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="123">
                Writes the upper triangular matrix into the specified matrix.                
                <@param>
                    m upper Where the upper triangular matrix is writen to.                    
                </@param>
            </javadoc>
            <method name="getUpper" type="DenseMatrix64F" line="130">
                <params>
                    <param name="upper" type="DenseMatrix64F"/>
                </params>
                <declaration name="numRows" type="int" line="131"/>
                <declaration name="numCols" type="int" line="132"/>
                <scope line="134"/>
                <scope line="136"/>
                <scope line="142">
                    <scope line="143"/>
                </scope>
            </method>
            <method name="getPivot" type="DenseMatrix64F" line="151">
                <params>
                    <param name="pivot" type="DenseMatrix64F"/>
                </params>
            </method>
            <method name="decomposeCommonInit" type="void" line="155">
                <params>
                    <param name="a" type="DenseMatrix64F"/>
                </params>
                <scope line="156"/>
                <scope line="164"/>
            </method>
            <javadoc line="170">
                Determines if the decomposed matrix is singular.  This function can return
                  false and the matrix be almost singular, which is still bad.                
                <@return>
                    n true if singular false otherwise.                    
                </@return>
            </javadoc>
            <method name="isSingular" type="boolean" line="177">
                <scope line="178"/>
            </method>
            <javadoc line="185">
                Computes the determinant from the LU decomposition.                
                <@return>
                    n The matrix's determinant.                    
                </@return>
            </javadoc>
            <method name="computeDeterminant" type="double" line="191">
                <declaration name="ret" type="double" line="195"/>
                <declaration name="total" type="int" line="197"/>
                <scope line="198"/>
            </method>
            <method name="quality" type="double" line="205"/>
            <javadoc line="209">
                a specialized version of solve that avoid additional checks that are not needed.                
            </javadoc>
            <method name="_solveVectorInternal" type="void" line="213">
                <params>
                    <param name="vv" type="double[]"/>
                </params>
                <comment line="214">
                    Solve L*Y = B                    
                </comment>
                <comment line="214">
                    Solve U*X = Y;                    
                </comment>
                <declaration name="ii" type="int" line="215"/>
                <scope line="217">
                    <declaration name="ip" type="int" line="218"/>
                    <declaration name="sum" type="double" line="219"/>
                    <scope line="221">
                        <declaration name="index" type="int" line="224"/>
                    </scope>
                    <scope line="227"/>
                </scope>
            </method>
            <method name="_getVV" type="double[]" line="237"/>
        </class>
    </source>