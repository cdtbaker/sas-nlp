<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.eig.symm">
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="SymmetricQrAlgorithm" line="25">
            <comment line="26">
                performs many of the low level calculations                
            </comment>
            <comment line="26">
                transpose of the orthogonal matrix                
            </comment>
            <comment line="26">
                the eigenvalues previously computed                
            </comment>
            <comment line="26">
                should it ever analytically compute eigenvalues                
            </comment>
            <comment line="26">
                if this is true then it can&apos;t compute eigenvalues at the same time                
            </comment>
            <comment line="26">
                is it following a script or not                
            </comment>
            <implements interface="A"/>
            <implements interface="B"/>
            <javadoc line="25">
                &lt;p&gt;
                  Computes the eigenvalues and eigenvectors of a symmetric tridiagonal matrix using the symmetric QR algorithm.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This implementation is based on the algorithm is sketched out in:&lt;br&gt;
                  David S. Watkins, &quot;Fundamentals of Matrix Computations,&quot; Second Edition. page 377-385
                  &lt;/p&gt;                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <declaration name="helper" type="SymmetricQREigenHelper" line="38"/>
            <declaration name="Q" type="DenseMatrix64F" line="41"/>
            <declaration name="eigenvalues" type="double" line="44"/>
            <declaration name="exceptionalThresh" type="int" line="46"/>
            <declaration name="maxIterations" type="int" line="47"/>
            <declaration name="fastEigenvalues" type="boolean" line="51"/>
            <declaration name="followingScript" type="boolean" line="54"/>
            <method name="SymmetricQrAlgorithm" type="constructor" line="56">
                <params>
                    <param name="helper" type="SymmetricQREigenHelper"/>
                </params>
            </method>
            <javadoc line="60">
                Creates a new SymmetricQREigenvalue class that declares its own SymmetricQREigenHelper.                
            </javadoc>
            <method name="SymmetricQrAlgorithm" type="constructor" line="63"/>
            <method name="setMaxIterations" type="void" line="67">
                <params>
                    <param name="maxIterations" type="int"/>
                </params>
            </method>
            <method name="getQ" type="DenseMatrix64F" line="71"/>
            <method name="setQ" type="void" line="75">
                <params>
                    <param name="q" type="DenseMatrix64F"/>
                </params>
            </method>
            <method name="setFastEigenvalues" type="void" line="79">
                <params>
                    <param name="fastEigenvalues" type="boolean"/>
                </params>
            </method>
            <javadoc line="83">
                Returns the eigenvalue at the specified index.                
                <@param>
                    m index Which eigenvalue.                    
                </@param>
                <@return>
                    n The eigenvalue.                    
                </@return>
            </javadoc>
            <method name="getEigenvalue" type="double" line="89">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="93">
                Returns the number of eigenvalues available.                
                <@return>
                    n How many eigenvalues there are.                    
                </@return>
            </javadoc>
            <method name="getNumberOfEigenvalues" type="int" line="98"/>
            <javadoc line="102">
                Computes the eigenvalue of the provided tridiagonal matrix.  Note that only the upper portion
                  needs to be tridiagonal.  The bottom diagonal is assumed to be the same as the top.                
                <@param>
                    m sideLength Number of rows and columns in the input matrix.                    
                </@param>
                <@param>
                    m diag Diagonal elements from tridiagonal matrix. Modified.                    
                </@param>
                <@param>
                    m off Off diagonal elements from tridiagonal matrix. Modified.                    
                </@param>
                <@return>
                    n true if it succeeds and false if it fails.                    
                </@return>
            </javadoc>
            <method name="process" type="boolean" line="114">
                <params>
                    <param name="sideLength" type="int"/>
                    <param name="diag" type="double"/>
                    <param name="off" type="double"/>
                    <param name="eigenvalues" type="double"/>
                </params>
            </method>
            <method name="process" type="boolean" line="130">
                <params>
                    <param name="sideLength" type="int"/>
                    <param name="diag" type="double"/>
                    <param name="off" type="double"/>
                </params>
            </method>
            <method name="_process" type="boolean" line="141">
                <comment line="142">
                    helper.printMatrix();                    
                </comment>
                <scope line="142">
                    <scope line="144"/>
                    <scope line="148"/>
                    <scope line="154"/>
                    <scope line="160"/>
                    <scope line="163"/>
                </scope>
            </method>
            <javadoc line="174">
                First looks for zeros and then performs the implicit single step in the QR Algorithm.                
            </javadoc>
            <method name="performStep" type="void" line="177">
                <comment line="178">
                    check for zeros                    
                </comment>
                <comment line="178">
                    similar transforms                    
                </comment>
                <scope line="179">
                    <scope line="180"/>
                </scope>
                <declaration name="lambda" type="double" line="187"/>
                <scope line="189">
                    <scope line="190"/>
                    <scope line="193"/>
                </scope>
                <scope line="198"/>
            </method>
        </class>
    </source>