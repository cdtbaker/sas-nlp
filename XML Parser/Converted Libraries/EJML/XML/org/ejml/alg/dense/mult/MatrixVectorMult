<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.mult">
        <import package="org.ejml.data.D1Matrix64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.data.RowD1Matrix64F"/>
        <class name="MatrixVectorMult" line="26">
            <javadoc line="26">
                &lt;p&gt;
                 * This class contains various types of matrix vector multiplcation operations for {@link DenseMatrix64F}.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * If a matrix has only one column or row then it is a vector.  There are faster algorithms
                 * that can be used to multiply matrices by vectors.  Strangely, even though the operations
                 * count smaller, the difference between this and a regular matrix multiply is insignificant
                 * for large matrices.  The smaller matrices there is about a 40% speed improvement.  In
                 * practice the speed improvement for smaller matrices is not noticeable unless 10s of millions
                 * of matrix multiplications are being performed.
                 * &lt;/p&gt;                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <javadoc line="44">
                &lt;p&gt;
                 * Performs a matrix vector multiply.&lt;br&gt;
                 * &lt;br&gt;
                 * c = A * b &lt;br&gt;
                 * and&lt;br&gt;
                 * c = A * b&lt;sup&gt;T&lt;/sup&gt; &lt;br&gt;
                 * &lt;br&gt;
                 * c&lt;sub&gt;i&lt;/sub&gt; = Sum{ j=1:n, a&lt;sub&gt;ij&lt;/sub&gt; * b&lt;sub&gt;j&lt;/sub&gt;}&lt;br&gt;
                 * &lt;br&gt;
                 * where A is a matrix, b is a column or transposed row vector, and c is a column vector.
                 * &lt;/p&gt;                
                <@param>
                    m a A matrix that is m by n. Not modified.                    
                </@param>
                <@param>
                    m b A vector that has length n. Not modified.                    
                </@param>
                <@param>
                    m c A column vector that has length m. Modified.                    
                </@param>
            </javadoc>
            <method name="mult" type="void" line="62">
                <scope line="63"/>
                <scope line="65"/>
                <scope line="69">
                    <scope line="70"/>
                </scope>
                <scope line="73">
                    <scope line="74"/>
                </scope>
                <scope line="77"/>
                <declaration name="indexA" type="int" line="81"/>
                <declaration name="cIndex" type="int" line="82"/>
                <declaration name="b0" type="double" line="83"/>
                <scope line="84">
                    <declaration name="total" type="double" line="85"/>
                    <scope line="87"/>
                </scope>
            </method>
            <javadoc line="95">
                &lt;p&gt;
                 * Performs a matrix vector multiply.&lt;br&gt;
                 * &lt;br&gt;
                 * C = C + A * B &lt;br&gt;
                 * or&lt;br&gt;
                 * C = C + A * B&lt;sup&gt;T&lt;/sup&gt; &lt;br&gt;
                 * &lt;br&gt;
                 * c&lt;sub&gt;i&lt;/sub&gt; = Sum{ j=1:n, c&lt;sub&gt;i&lt;/sub&gt; + a&lt;sub&gt;ij&lt;/sub&gt; * b&lt;sub&gt;j&lt;/sub&gt;}&lt;br&gt;
                 * &lt;br&gt;
                 * where A is a matrix, B is a column or transposed row vector, and C is a column vector.
                 * &lt;/p&gt;                
                <@param>
                    m A A matrix that is m by n. Not modified.                    
                </@param>
                <@param>
                    m B A vector that has length n. Not modified.                    
                </@param>
                <@param>
                    m C A column vector that has length m. Modified.                    
                </@param>
            </javadoc>
            <method name="multAdd" type="void" line="113">
                <scope line="115"/>
                <scope line="117"/>
                <scope line="120">
                    <scope line="121"/>
                </scope>
                <scope line="124">
                    <scope line="125"/>
                </scope>
                <scope line="128"/>
                <declaration name="indexA" type="int" line="132"/>
                <declaration name="cIndex" type="int" line="133"/>
                <scope line="134">
                    <declaration name="total" type="double" line="135"/>
                    <scope line="137"/>
                </scope>
            </method>
            <javadoc line="145">
                &lt;p&gt;
                 * Performs a matrix vector multiply.&lt;br&gt;
                 * &lt;br&gt;
                 * C = A&lt;sup&gt;T&lt;/sup&gt; * B &lt;br&gt;
                 * where B is a column vector.&lt;br&gt;
                 * or&lt;br&gt;
                 * C = A&lt;sup&gt;T&lt;/sup&gt; * B&lt;sup&gt;T&lt;/sup&gt; &lt;br&gt;
                 * where B is a row vector. &lt;br&gt;
                 * &lt;br&gt;
                 * c&lt;sub&gt;i&lt;/sub&gt; = Sum{ j=1:n, a&lt;sub&gt;ji&lt;/sub&gt; * b&lt;sub&gt;j&lt;/sub&gt;}&lt;br&gt;
                 * &lt;br&gt;
                 * where A is a matrix, B is a column or transposed row vector, and C is a column vector.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * This implementation is optimal for small matrices.  There is a huge performance hit when
                 * used on large matrices due to CPU cache issues.
                 * &lt;/p&gt;                
                <@param>
                    m A A matrix that is m by n. Not modified.                    
                </@param>
                <@param>
                    m B A that has length m and is a column. Not modified.                    
                </@param>
                <@param>
                    m C A column vector that has length n. Modified.                    
                </@param>
            </javadoc>
            <method name="multTransA_small" type="void" line="169">
                <scope line="170"/>
                <scope line="172"/>
                <scope line="175">
                    <scope line="176"/>
                </scope>
                <scope line="179">
                    <scope line="180"/>
                </scope>
                <scope line="183"/>
                <declaration name="cIndex" type="int" line="187"/>
                <scope line="188">
                    <declaration name="total" type="double" line="189"/>
                    <declaration name="indexA" type="int" line="191"/>
                    <scope line="192"/>
                </scope>
            </method>
            <javadoc line="201">
                An alternative implementation of {@link #multTransA_small} that performs well on large
                 * matrices.  There is a relative performance hit when used on small matrices.                
                <@param>
                    m A A matrix that is m by n. Not modified.                    
                </@param>
                <@param>
                    m B A Vector that has length m. Not modified.                    
                </@param>
                <@param>
                    m C A column vector that has length n. Modified.                    
                </@param>
            </javadoc>
            <method name="multTransA_reorder" type="void" line="210">
                <scope line="211"/>
                <scope line="213"/>
                <scope line="216">
                    <scope line="217"/>
                </scope>
                <scope line="220">
                    <scope line="221"/>
                </scope>
                <scope line="224"/>
                <declaration name="B_val" type="double" line="228"/>
                <scope line="229"/>
                <declaration name="indexA" type="int" line="233"/>
                <scope line="234">
                    <scope line="236"/>
                </scope>
            </method>
            <javadoc line="242">
                &lt;p&gt;
                 * Performs a matrix vector multiply.&lt;br&gt;
                 * &lt;br&gt;
                 * C = C + A&lt;sup&gt;T&lt;/sup&gt; * B &lt;br&gt;
                 * or&lt;br&gt;
                 * C = C&lt;sup&gt;T&lt;/sup&gt; + A&lt;sup&gt;T&lt;/sup&gt; * B&lt;sup&gt;T&lt;/sup&gt; &lt;br&gt;
                 * &lt;br&gt;
                 * c&lt;sub&gt;i&lt;/sub&gt; = Sum{ j=1:n, c&lt;sub&gt;i&lt;/sub&gt; + a&lt;sub&gt;ji&lt;/sub&gt; * b&lt;sub&gt;j&lt;/sub&gt;}&lt;br&gt;
                 * &lt;br&gt;
                 * where A is a matrix, B is a column or transposed row vector, and C is a column vector.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * This implementation is optimal for small matrices.  There is a huge performance hit when
                 * used on large matrices due to CPU cache issues.
                 * &lt;/p&gt;                
                <@param>
                    m A A matrix that is m by n. Not modified.                    
                </@param>
                <@param>
                    m B A vector that has length m. Not modified.                    
                </@param>
                <@param>
                    m C A column vector that has length n. Modified.                    
                </@param>
            </javadoc>
            <method name="multAddTransA_small" type="void" line="264">
                <scope line="265"/>
                <scope line="267"/>
                <scope line="270">
                    <scope line="271"/>
                </scope>
                <scope line="274">
                    <scope line="275"/>
                </scope>
                <scope line="278"/>
                <declaration name="cIndex" type="int" line="282"/>
                <scope line="283">
                    <declaration name="total" type="double" line="284"/>
                    <declaration name="indexA" type="int" line="286"/>
                    <scope line="287"/>
                </scope>
            </method>
            <javadoc line="296">
                An alternative implementation of {@link #multAddTransA_small} that performs well on large
                 * matrices.  There is a relative performance hit when used on small matrices.                
                <@param>
                    m A A matrix that is m by n. Not modified.                    
                </@param>
                <@param>
                    m B A vector that has length m. Not modified.                    
                </@param>
                <@param>
                    m C A column vector that has length n. Modified.                    
                </@param>
            </javadoc>
            <method name="multAddTransA_reorder" type="void" line="305">
                <scope line="306"/>
                <scope line="308"/>
                <scope line="311">
                    <scope line="312"/>
                </scope>
                <scope line="315">
                    <scope line="316"/>
                </scope>
                <scope line="319"/>
                <declaration name="indexA" type="int" line="323"/>
                <scope line="324">
                    <declaration name="B_val" type="double" line="325"/>
                    <scope line="326"/>
                </scope>
            </method>
        </class>
    </source>