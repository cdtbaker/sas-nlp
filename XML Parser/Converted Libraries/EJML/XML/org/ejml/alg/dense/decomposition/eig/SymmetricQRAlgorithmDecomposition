<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.alg.dense.decomposition.eig">
        <import package="org.ejml.alg.dense.decomposition.eig.symm.SymmetricQREigenHelper"/>
        <import package="org.ejml.alg.dense.decomposition.eig.symm.SymmetricQrAlgorithm"/>
        <import package="org.ejml.alg.dense.decomposition.hessenberg.TridiagonalSimilarDecomposition"/>
        <import package="org.ejml.data.Complex64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.DecompositionFactory"/>
        <import package="org.ejml.factory.EigenDecomposition"/>
        <import package="org.ejml.ops.CommonOps"/>
        <class name="SymmetricQRAlgorithmDecomposition" line="31">
            <comment line="32">
                computes a tridiagonal matrix whose eigenvalues are the same as the original                
            </comment>
            <comment line="32">
                matrix and can be easily computed.                
            </comment>
            <comment line="32">
                helper class for eigenvalue and eigenvector algorithms                
            </comment>
            <comment line="32">
                computes the eigenvectors                
            </comment>
            <comment line="32">
                should it compute eigenvectors at the same time as the eigenvalues?                
            </comment>
            <comment line="32">
                where the found eigenvalues are stored                
            </comment>
            <comment line="32">
                where the tridiagonal matrix is stored                
            </comment>
            <comment line="32">
                temporary variable used to store/compute eigenvectors                
            </comment>
            <comment line="32">
                the extracted eigenvectors                
            </comment>
            <comment line="32">
                should it compute eigenvectors or just eigenvalues                
            </comment>
            <implements interface="EigenDecomposition">
                <type_params>
                    <type_param name="DenseMatrix64F"/>
                </type_params>
            </implements>
            <javadoc line="31">
                &lt;p&gt;
                  Computes the eigenvalues and eigenvectors of a real symmetric matrix using the symmetric implicit QR algorithm.
                  Inside each iteration a QR decomposition of A&lt;sub&gt;i&lt;/sub&gt;-p&lt;sub&gt;i&lt;/sub&gt;I is implicitly computed.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This implementation is based on the algorithm is sketched out in:&lt;br&gt;
                  David S. Watkins, &quot;Fundamentals of Matrix Computations,&quot; Second Edition. page 377-385
                  &lt;/p&gt;                
                <@see>
                    e org.ejml.alg.dense.decomposition.eig.symm.SymmetricQrAlgorithm                    
                </@see>
                <@see>
                    e org.ejml.alg.dense.decomposition.hessenberg.TridiagonalDecompositionHouseholder                    
                </@see>
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <declaration name="decomp" type="TridiagonalSimilarDecomposition&lt;DenseMatrix64F&gt;" line="51"/>
            <declaration name="helper" type="SymmetricQREigenHelper" line="53"/>
            <declaration name="vector" type="SymmetricQrAlgorithm" line="55"/>
            <declaration name="computeVectorsWithValues" type="boolean" line="58"/>
            <declaration name="values" type="double" line="61"/>
            <declaration name="diag" type="double" line="64"/>
            <declaration name="off" type="double" line="65"/>
            <declaration name="diagSaved" type="double" line="67"/>
            <declaration name="offSaved" type="double" line="68"/>
            <declaration name="V" type="DenseMatrix64F" line="71"/>
            <declaration name="eigenvectors" type="DenseMatrix64F" line="73"/>
            <declaration name="computeVectors" type="boolean" line="76"/>
            <method name="SymmetricQRAlgorithmDecomposition" type="constructor" line="79">
                <params>
                    <param name="decomp" type="TridiagonalSimilarDecomposition<DenseMatrix64F>"/>
                    <param name="computeVectors" type="boolean"/>
                </params>
            </method>
            <method name="SymmetricQRAlgorithmDecomposition" type="constructor" line="89">
                <params>
                    <param name="computeVectors" type="boolean"/>
                </params>
            </method>
            <method name="setComputeVectorsWithValues" type="void" line="94">
                <params>
                    <param name="computeVectorsWithValues" type="boolean"/>
                </params>
            </method>
            <javadoc line="101">
                Used to limit the number of internal QR iterations that the QR algorithm performs.  20
                  should be enough for most applications.                
                <@param>
                    m max The maximum number of QR iterations it will perform.                    
                </@param>
            </javadoc>
            <method name="setMaxIterations" type="void" line="107">
                <params>
                    <param name="max" type="int"/>
                </params>
            </method>
            <method name="getNumberOfEigenvalues" type="int" line="112"/>
            <method name="getEigenvalue" type="Complex64F" line="117">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getEigenVector" type="DenseMatrix64F" line="122">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="126">
                Decomposes the matrix using the QR algorithm.  Care was taken to minimize unnecessary memory copying
                  and cache skipping.                
                <@param>
                    m orig The matrix which is being decomposed.  Not modified.                    
                </@param>
                <@return>
                    n true if it decomposed the matrix or false if an error was detected.  This will not catch all errors.                    
                </@return>
            </javadoc>
            <method name="decompose" type="boolean" line="134">
                <params>
                    <param name="orig" type="DenseMatrix64F"/>
                </params>
                <comment line="135">
                    compute a similar tridiagonal matrix                    
                </comment>
                <comment line="135">
                    Tell the helper to work with this matrix                    
                </comment>
                <declaration name="N" type="int" line="138"/>
                <scope line="144"/>
                <scope line="153">
                    <scope line="154"/>
                    <scope line="156"/>
                </scope>
                <scope line="159"/>
            </method>
            <method name="inputModified" type="boolean" line="165"/>
            <method name="extractTogether" type="boolean" line="169">
                <comment line="170">
                    extract the orthogonal from the similar transform                    
                </comment>
                <comment line="170">
                    tell eigenvector algorithm to update this matrix as it computes the rotators                    
                </comment>
                <comment line="170">
                    extract the eigenvalues                    
                </comment>
                <comment line="170">
                    the V matrix contains the eigenvectors.  Convert those into column vectors                    
                </comment>
                <comment line="170">
                    save a copy of them since this data structure will be recycled next                    
                </comment>
            </method>
            <method name="extractSeparate" type="boolean" line="191">
                <params>
                    <param name="numCols" type="int"/>
                </params>
                <comment line="192">
                    ---- set up the helper to decompose the same tridiagonal matrix                    
                </comment>
                <comment line="192">
                    swap arrays instead of copying them to make it slightly faster                    
                </comment>
                <comment line="192">
                    extract the orthogonal from the similar transform                    
                </comment>
                <comment line="192">
                    tell eigenvector algorithm to update this matrix as it computes the rotators                    
                </comment>
                <comment line="192">
                    extract eigenvectors                    
                </comment>
                <comment line="192">
                    the ordering of the eigenvalues might have changed                    
                </comment>
                <comment line="192">
                    the V matrix contains the eigenvectors.  Convert those into column vectors                    
                </comment>
            </method>
            <javadoc line="219">
                Computes eigenvalues only                
                <@return>
                    n                    
                </@return>
            </javadoc>
            <method name="computeEigenValues" type="boolean" line="224">
                <comment line="225">
                    make a copy of the internal tridiagonal matrix data for later use                    
                </comment>
                <comment line="225">
                    extract the eigenvalues                    
                </comment>
                <comment line="225">
                    save a copy of them since this data structure will be recycled next                    
                </comment>
            </method>
        </class>
    </source>