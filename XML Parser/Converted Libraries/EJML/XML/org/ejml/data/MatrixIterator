<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.data">
        <import package="java.util.Iterator"/>
        <class name="MatrixIterator" line="24">
            <comment line="25">
                the matrix which is being iterated through                
            </comment>
            <comment line="25">
                should it iterate through by row or by column                
            </comment>
            <comment line="25">
                the first row and column it returns                
            </comment>
            <comment line="25">
                where in the iteration it is                
            </comment>
            <comment line="25">
                how many elements inside will it return                
            </comment>
            <comment line="25">
                how wide the submatrix is                
            </comment>
            <comment line="25">
                the current element                
            </comment>
            <implements interface="Iterator&lt;Double&gt;"/>
            <javadoc line="24">
                This is a matrix iterator for traversing through a submatrix.  For speed it is recommended
                 * that you directly access the elements in the matrix, but there are some situations where this
                 * can be a better design.                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <declaration name="a" type="ReshapeMatrix64F" line="33"/>
            <declaration name="rowMajor" type="boolean" line="36"/>
            <declaration name="minCol" type="int" line="39"/>
            <declaration name="minRow" type="int" line="40"/>
            <declaration name="index" type="int" line="43"/>
            <declaration name="size" type="int" line="45"/>
            <declaration name="submatrixStride" type="int" line="48"/>
            <declaration name="subRow" type="int" line="51"/>
            <javadoc line="53">
                Creates a new iterator for traversing through a submatrix inside this matrix.  It can be traversed
                 * by row or by column.  Range of elements is inclusive, e.g. minRow = 0 and maxRow = 1 will include rows
                 * 0 and 1.  The iteration starts at (minRow,minCol) and ends at (maxRow,maxCol)                
                <@param>
                    m a the matrix it is iterating through                    
                </@param>
                <@param>
                    m rowMajor true means it will traverse through the submatrix by row first, false by columns.                    
                </@param>
                <@param>
                    m minRow first row it will start at.                    
                </@param>
                <@param>
                    m minCol first column it will start at.                    
                </@param>
                <@param>
                    m maxRow last row it will stop at.                    
                </@param>
                <@param>
                    m maxCol last column it will stop at.                    
                </@param>
                <@return>
                    n A new MatrixIterator                    
                </@return>
            </javadoc>
            <method name="MatrixIterator" type="constructor" line="68"/>
            <method name="hasNext" type="boolean" line="94"/>
            <method name="next" type="Double" line="99">
                <scope line="100"/>
                <scope line="103"/>
            </method>
            <method name="remove" type="void" line="112"/>
            <javadoc line="116">
                Which element in the submatrix was returned by next()                
                <@return>
                    n Submatrix element's index.                    
                </@return>
            </javadoc>
            <method name="getIndex" type="int" line="121"/>
            <javadoc line="125">
                True if it is iterating through the matrix by rows and false if by columns.                
                <@return>
                    n row major or column major                    
                </@return>
            </javadoc>
            <method name="isRowMajor" type="boolean" line="129"/>
            <javadoc line="133">
                Sets the value of the current element.                
                <@param>
                    m value The element's new value.                    
                </@param>
            </javadoc>
            <method name="set" type="void" line="138"/>
        </class>
    </source>