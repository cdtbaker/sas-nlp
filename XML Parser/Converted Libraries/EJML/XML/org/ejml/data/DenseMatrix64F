<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.data">
        <import package="org.ejml.UtilEjml"/>
        <import package="org.ejml.ops.CommonOps"/>
        <import package="org.ejml.ops.MatrixIO"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.PrintStream"/>
        <class name="DenseMatrix64F" extends="RowD1Matrix64F" line="29">
            <javadoc line="29">
                &lt;p&gt;
                 * DenseMatrix64F is a dense matrix with elements that are 64-bit floats (doubles).  A matrix
                 * is the fundamental data structure in linear algebra.  Unlike a sparse matrix, there is no
                 * compression in a dense matrix and every element is stored in memory.  This allows for fast
                 * reads and writes to the matrix.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * To keep the code manageable and the library easier to use only basic functions for accessing and editing elements
                 * are provided in this class.  The numerous operations which can be performed on DenseMatrix64F
                 * are contained in various other classes, where the most common operations can be found in
                 * the {@link org.ejml.ops.CommonOps} and {@link org.ejml.ops.SpecializedOps} classes.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * The matrix is stored internally in a row-major 1D array format:&lt;br&gt;
                 * &lt;br&gt;
                 * data[ y*numCols + x ] = data[y][x]&lt;br&gt;
                 * &lt;br&gt;
                 * For example:&lt;br&gt;
                 * data =
                 * &lt;table border=&quot;1&quot;&gt;
                 * &lt;tr&gt;
                 * &lt;td&gt;a&lt;sub&gt;11&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;12&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;13&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;14&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;21&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;22&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;23&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;24&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;31&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;32&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;33&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;34&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;41&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;42&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;43&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;44&lt;/sub&gt;&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;/table&gt;
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * An alternative to working directly with DenseMatrix64 is {@link org.ejml.simple.SimpleMatrix}.
                 * SimpleMatrix is a wrapper around DenseMatrix64F that provides an easier to use object oriented way of manipulating
                 * matrices, at the cost of efficiency.
                 * &lt;/p&gt;                
                <@see>
                    e org.ejml.ops.CommonOps                    
                </@see>
                <@see>
                    e org.ejml.ops.SpecializedOps                    
                </@see>
                <@see>
                    e org.ejml.simple.SimpleMatrix                    
                </@see>
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <javadoc line="88">
                &lt;p&gt;
                 * Creates a new matrix which has the same value as the matrix encoded in the
                 * provided array.  The input matrix&apos;s format can either be row-major or
                 * column-major.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * Note that &apos;data&apos; is a variable argument type, so either 1D arrays or a set of numbers can be
                 * passed in:&lt;br&gt;
                 * DenseMatrix a = new DenseMatrix(2,2,true,new double[]{1,2,3,4});&lt;br&gt;
                 * DenseMatrix b = new DenseMatrix(2,2,true,1,2,3,4);&lt;br&gt;
                 * &lt;br&gt;
                 * Both are equivalent.
                 * &lt;/p&gt;                
                <@param>
                    m numRows The number of rows.                    
                </@param>
                <@param>
                    m numCols The number of columns.                    
                </@param>
                <@param>
                    m rowMajor If the array is encoded in a row-major or a column-major format.                    
                </@param>
                <@param>
                    m data The formatted 1D array. Not modified.                    
                </@param>
            </javadoc>
            <method name="DenseMatrix64F" type="constructor" line="109">
                <declaration name="length" type="int" line="110"/>
            </method>
            <javadoc line="119">
                &lt;p&gt;
                 * Creates a matrix with the values and shape defined by the 2D array &apos;data&apos;.
                 * It is assumed that &apos;data&apos; has a row-major formatting:&lt;br&gt;
                 * &lt;br&gt;
                 * data[ row ][ column ]
                 * &lt;/p&gt;                
                <@param>
                    m data 2D array representation of the matrix. Not modified.                    
                </@param>
            </javadoc>
            <method name="DenseMatrix64F" type="constructor" line="128">
                <declaration name="pos" type="int" line="134"/>
                <scope line="135">
                    <declaration name="row" type="double[]" line="136"/>
                    <scope line="138"/>
                </scope>
            </method>
            <javadoc line="148">
                Creates a new Matrix with the specified shape whose elements initially
                 * have the value of zero.                
                <@param>
                    m numRows The number of rows in the matrix.                    
                </@param>
                <@param>
                    m numCols The number of columns in the matrix.                    
                </@param>
            </javadoc>
            <method name="DenseMatrix64F" type="constructor" line="155"/>
            <javadoc line="162">
                Creates a new matrix which is equivalent to the provided matrix.  Note that
                 * the length of the data will be determined by the shape of the matrix.                
                <@param>
                    m orig The matrix which is to be copied.  This is not modified or saved.                    
                </@param>
            </javadoc>
            <method name="DenseMatrix64F" type="constructor" line="168"/>
            <javadoc line="173">
                This declares an array that can store a matrix up to the specified length.  This is usefull
                 * when a matrix&apos;s size will be growing and it is desirable to avoid reallocating memory.                
                <@param>
                    m length The size of the matrice's data array.                    
                </@param>
            </javadoc>
            <method name="DenseMatrix64F" type="constructor" line="179"/>
            <javadoc line="183">
                Default constructor where nothing is assigned.  In general this should not be used.                
            </javadoc>
            <method name="DenseMatrix64F" type="constructor" line="186"/>
            <javadoc line="188">
                Creates a new DenseMatrix64F which contains the same information as the provided Matrix64F.                
                <@param>
                    m mat Matrix whose values will be copied.  Not modified.                    
                </@param>
            </javadoc>
            <method name="DenseMatrix64F" type="constructor" line="193">
                <scope line="195">
                    <scope line="196"/>
                </scope>
            </method>
            <javadoc line="202">
                Creates a new DenseMatrix64F around the provided data.  The data must encode
                 * a row-major matrix.  Any modification to the returned matrix will modify the
                 * provided data.                
                <@param>
                    m numRows Number of rows in the matrix.                    
                </@param>
                <@param>
                    m numCols Number of columns in the matrix.                    
                </@param>
                <@param>
                    m data Data that is being wrapped. Referenced Saved.                    
                </@param>
                <@return>
                    n A matrix which references the provided data internally.                    
                </@return>
            </javadoc>
            <method name="wrap" type="DenseMatrix64F" line="212">
                <declaration name="s" type="DenseMatrix64F" line="213"/>
            </method>
            <javadoc line="221">
                @inheritDoc                
            </javadoc>
            <method name="reshape" type="void" line="225">
                <scope line="226">
                    <declaration name="d" type="double[]" line="227"/>
                    <scope line="229"/>
                </scope>
            </method>
            <javadoc line="240">
                &lt;p&gt;
                 * Assigns the element in the Matrix to the specified value.  Performs a bounds check to make sure
                 * the requested element is part of the matrix. &lt;br&gt;
                 * &lt;br&gt;
                 * a&lt;sub&gt;ij&lt;/sub&gt; = value&lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m row The row of the element.                    
                </@param>
                <@param>
                    m col The column of the element.                    
                </@param>
                <@param>
                    m value The element's new value.                    
                </@param>
            </javadoc>
            <method name="set" type="void" line="253">
                <scope line="254"/>
            </method>
            <method name="unsafe_set" type="void" line="262"/>
            <javadoc line="266">
                &lt;p&gt;
                 * Adds &apos;value&apos; to the specified element in the matrix.&lt;br&gt;
                 * &lt;br&gt;
                 * a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; + value&lt;br&gt;
                 * &lt;/p&gt;                
                <@param>
                    m row The row of the element.                    
                </@param>
                <@param>
                    m col The column of the element.                    
                </@param>
                <@param>
                    m value The value that is added to the element                    
                </@param>
            </javadoc>
            <method name="add" type="void" line="278">
                <scope line="279"/>
            </method>
            <javadoc line="286">
                Returns the value of the specified matrix element.  Performs a bounds check to make sure
                 * the requested element is part of the matrix.                
                <@param>
                    m row The row of the element.                    
                </@param>
                <@param>
                    m col The column of the element.                    
                </@param>
                <@return>
                    n The value of the element.                    
                </@return>
            </javadoc>
            <method name="get" type="double" line="295">
                <scope line="296"/>
            </method>
            <method name="unsafe_get" type="double" line="304"/>
            <method name="getIndex" type="int" line="309"/>
            <javadoc line="313">
                Determins if the specified element is inside the bounds of the Matrix.                
                <@param>
                    m row The element's row.                    
                </@param>
                <@param>
                    m col The elements' column.                    
                </@param>
                <@return>
                    n True if it is inside the matrices bound, false otherwise.                    
                </@return>
            </javadoc>
            <method name="isInBounds" type="boolean" line="320"/>
            <javadoc line="324">
                Returns the number of elements in this matrix, which is equal to
                 * the number of rows times the number of columns.                
                <@return>
                    n The number of elements in the matrix.                    
                </@return>
            </javadoc>
            <method name="getNumElements" type="int" line="331"/>
            <javadoc line="336">
                &lt;p&gt;
                 * Sets the value and shape of this matrix to be identical to the specified matrix. The width and height are
                 * changed to match the matrix that has been provided.  If more memory is needed then a new data array is
                 * declared.&lt;br&gt;
                 * &lt;br&gt;
                 * a.numRows = b.numRows&lt;br&gt;
                 * a.numCols = b.numCols&lt;br&gt;
                 * &lt;br&gt;
                 * a&lt;sub&gt;ij&lt;/sub&gt; = b&lt;sub&gt;ij&lt;/sub&gt;&lt;br&gt;
                 * &lt;br&gt;
                 * &lt;p&gt;                
                <@param>
                    m b The matrix that this matrix is to be set equal to.                    
                </@param>
            </javadoc>
            <method name="setReshape" type="void" line="352">
                <declaration name="dataLength" type="int" line="353"/>
                <scope line="355"/>
            </method>
            <javadoc line="365">
                Sets this matrix equal to the matrix encoded in the array.                
                <@param>
                    m numRows The number of rows.                    
                </@param>
                <@param>
                    m numCols The number of columns.                    
                </@param>
                <@param>
                    m rowMajor If the array is encoded in a row-major or a column-major format.                    
                </@param>
                <@param>
                    m data The formatted 1D array. Not modified.                    
                </@param>
            </javadoc>
            <method name="set" type="void" line="374">
                <declaration name="length" type="int" line="375"/>
                <scope line="382"/>
                <scope line="384">
                    <declaration name="index" type="int" line="385"/>
                    <scope line="386">
                        <scope line="387"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="394">
                Sets all elements equal to zero.                
            </javadoc>
            <method name="zero" type="void" line="397"/>
            <javadoc line="401">
                Creates and returns a matrix which is idential to this one.                
                <@return>
                    n A new identical matrix.                    
                </@return>
            </javadoc>
            <method name="copy" type="DenseMatrix64F" line="407"/>
            <javadoc line="411">
                Prints the value of this matrix to the screen.  For more options see{@link UtilEjml}                
            </javadoc>
            <method name="print" type="void" line="417"/>
            <javadoc line="421">
                &lt;p&gt;
                 * Prints the value of this matrix to the screen using the same format as {@link java.io.PrintStream#printf).
                 * &lt;/p&gt;}                
                <@param>
                    m format The format which each element is printed uses.                    
                </@param>
            </javadoc>
            <method name="print" type="void" line="428"/>
            <javadoc line="432">
                &lt;p&gt;
                 * Converts the array into a string format for display purposes.
                 * The conversion is done using {@link MatrixIO#print(java.io.PrintStream,Matrix64F)}.
                 * &lt;/p&gt;                
                <@return>
                    n String representation of the matrix.                    
                </@return>
            </javadoc>
            <method name="toString" type="String" line="441">
                <declaration name="stream" type="ByteArrayOutputStream" line="442"/>
            </method>
        </class>
    </source>