<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.ops">
        <import package="org.ejml.alg.dense.mult.SubmatrixOps"/>
        <import package="org.ejml.alg.dense.mult.VectorVectorMult"/>
        <import package="org.ejml.data.D1Matrix64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="java.util.Random"/>
        <class name="RandomMatrices" line="29">
            <javadoc line="29">
                Contains a list of functions for creating random matrices and vectors with different structures.                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <javadoc line="36">
                &lt;p&gt;
                  Creates a randomly generated set of orthonormal vectors.  At most it can generate the same
                  number of vectors as the dimension of the vectors.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This is done by creating random vectors then ensuring that they are orthogonal
                  to all the ones previously created with reflectors.
                  &lt;/p&gt;
                  &lt;p&gt;
                  NOTE: This employs a brute force O(N&lt;sup&gt;3&lt;/sup&gt;) algorithm.
                  &lt;/p&gt;                
                <@param>
                    m dimen dimension of the space which the vectors will span.                    
                </@param>
                <@param>
                    m numVectors How many vectors it should generate.                    
                </@param>
                <@param>
                    m rand Used to create random vectors.                    
                </@param>
                <@return>
                    n Array of N random orthogonal vectors of unit length.                    
                </@return>
            </javadoc>
            <method name="createSpan" type="DenseMatrix64F[]" line="57">
                <params>
                    <param name="dimen" type="int"/>
                    <param name="numVectors" type="int"/>
                    <param name="rand" type="Random"/>
                </params>
                <declaration name="u" type="DenseMatrix64F" line="61"/>
                <scope line="66">
                    <declaration name="a" type="DenseMatrix64F" line="68"/>
                    <declaration name="r" type="DenseMatrix64F" line="69"/>
                    <scope line="71">
                        <declaration name="t" type="DenseMatrix64F" line="85"/>
                        <declaration name="val" type="double" line="90"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="102">
                Creates a random vector that is inside the specified span.                
                <@param>
                    m span The span the random vector belongs in.                    
                </@param>
                <@param>
                    m rand RNG                    
                </@param>
                <@return>
                    n A random vector within the specified span.                    
                </@return>
            </javadoc>
            <method name="createInSpan" type="DenseMatrix64F" line="109">
                <params>
                    <param name="span" type="DenseMatrix64F[]"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="rand" type="Random"/>
                </params>
                <declaration name="A" type="DenseMatrix64F" line="110"/>
                <declaration name="B" type="DenseMatrix64F" line="112"/>
                <scope line="114">
                    <declaration name="val" type="double" line="116"/>
                </scope>
            </method>
            <javadoc line="126">
                &lt;p&gt;
                  Creates a random orthogonal or isometric matrix, depending on the number of rows and columns.
                  The number of rows must be more than or equal to the number of columns.
                  &lt;/p&gt;                
                <@param>
                    m numRows Number of rows in the generated matrix.                    
                </@param>
                <@param>
                    m numCols Number of columns in the generated matrix.                    
                </@param>
                <@param>
                    m rand Random number generator used to create matrices.                    
                </@param>
                <@return>
                    n A new isometric matrix.                    
                </@return>
            </javadoc>
            <method name="createOrthogonal" type="DenseMatrix64F" line="137">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                    <param name="rand" type="Random"/>
                </params>
                <scope line="138"/>
                <declaration name="u" type="DenseMatrix64F" line="142"/>
                <declaration name="ret" type="DenseMatrix64F" line="144"/>
                <scope line="145"/>
            </method>
            <javadoc line="152">
                Creates a random diagonal matrix where the diagonal elements are selected from a uniform
                  distribution that goes from min to max.                
                <@param>
                    m N Dimension of the matrix.                    
                </@param>
                <@param>
                    m min Minimum value of a diagonal element.                    
                </@param>
                <@param>
                    m max Maximum value of a diagonal element.                    
                </@param>
                <@param>
                    m rand Random number generator.                    
                </@param>
                <@return>
                    n A random diagonal matrix.                    
                </@return>
            </javadoc>
            <method name="createDiagonal" type="DenseMatrix64F" line="162">
                <params>
                    <param name="N" type="int"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="rand" type="Random"/>
                </params>
            </method>
            <javadoc line="166">
                Creates a random matrix where all elements are zero but diagonal elements.  Diagonal elements
                  randomly drawn from a uniform distribution from min to max, inclusive.                
                <@param>
                    m numRows Number of rows in the returned matrix..                    
                </@param>
                <@param>
                    m numCols Number of columns in the returned matrix.                    
                </@param>
                <@param>
                    m min Minimum value of a diagonal element.                    
                </@param>
                <@param>
                    m max Maximum value of a diagonal element.                    
                </@param>
                <@param>
                    m rand Random number generator.                    
                </@param>
                <@return>
                    n A random diagonal matrix.                    
                </@return>
            </javadoc>
            <method name="createDiagonal" type="DenseMatrix64F" line="177">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="rand" type="Random"/>
                </params>
                <declaration name="ret" type="DenseMatrix64F" line="181"/>
                <declaration name="N" type="int" line="183"/>
                <declaration name="r" type="double" line="185"/>
                <scope line="187"/>
            </method>
            <javadoc line="194">
                &lt;p&gt;
                  Creates a random matrix which will have the provided singular values.  The length of sv
                  is assumed to be the rank of the matrix.  This can be useful for testing purposes when one
                  needs to ensure that a matrix is not singular but randomly generated.
                  &lt;/p&gt;                
                <@param>
                    m numRows Number of rows in generated matrix.                    
                </@param>
                <@param>
                    m numCols NUmber of columns in generated matrix.                    
                </@param>
                <@param>
                    m rand Random number generator.                    
                </@param>
                <@param>
                    m sv Singular values of the matrix.                    
                </@param>
                <@return>
                    n A new matrix with the specified singular values.                    
                </@return>
            </javadoc>
            <method name="createSingularValues" type="DenseMatrix64F" line="208">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numCols" type="int"/>
                    <param name="rand" type="Random"/>
                    <param name="sv" type="double"/>
                </params>
                <declaration name="U" type="DenseMatrix64F" line="209"/>
                <declaration name="V" type="DenseMatrix64F" line="210"/>
                <declaration name="S" type="DenseMatrix64F" line="212"/>
                <declaration name="min" type="int" line="214"/>
                <scope line="217"/>
                <declaration name="tmp" type="DenseMatrix64F" line="221"/>
            </method>
            <javadoc line="228">
                Creates a new random symmetric matrix that will have the specified real eigenvalues.                
                <@param>
                    m num Dimension of the resulting matrix.                    
                </@param>
                <@param>
                    m rand Random number generator.                    
                </@param>
                <@param>
                    m eigenvalues Set of real eigenvalues that the matrix will have.                    
                </@param>
                <@return>
                    n A random matrix with the specified eigenvalues.                    
                </@return>
            </javadoc>
            <method name="createEigenvaluesSymm" type="DenseMatrix64F" line="236">
                <params>
                    <param name="num" type="int"/>
                    <param name="rand" type="Random"/>
                    <param name="eigenvalues" type="double"/>
                </params>
                <declaration name="V" type="DenseMatrix64F" line="237"/>
                <declaration name="D" type="DenseMatrix64F" line="238"/>
                <declaration name="temp" type="DenseMatrix64F" line="240"/>
            </method>
            <javadoc line="248">
                Returns a matrix where all the elements are selected independently from
                  a uniform distribution between 0 and 1 inclusive.                
                <@param>
                    m numRow Number of rows in the new matrix.                    
                </@param>
                <@param>
                    m numCol Number of columns in the new matrix.                    
                </@param>
                <@param>
                    m rand Random number generator used to fill the matrix.                    
                </@param>
                <@return>
                    n The randomly generated matrix.                    
                </@return>
            </javadoc>
            <method name="createRandom" type="DenseMatrix64F" line="257">
                <params>
                    <param name="numRow" type="int"/>
                    <param name="numCol" type="int"/>
                    <param name="rand" type="Random"/>
                </params>
                <declaration name="mat" type="DenseMatrix64F" line="258"/>
            </method>
            <javadoc line="265">
                &lt;p&gt;
                  Adds random values to each element in the matrix from an uniform distribution.&lt;br&gt;
                  &lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; + U(min,max)&lt;br&gt;
                  &lt;/p&gt;                
                <@param>
                    m A The matrix who is to be randomized. Modified                    
                </@param>
                <@param>
                    m min The minimum value each element can be.                    
                </@param>
                <@param>
                    m max The maximum value each element can be..                    
                </@param>
                <@param>
                    m rand Random number generator used to fill the matrix.                    
                </@param>
            </javadoc>
            <method name="addRandom" type="void" line="277">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="rand" type="Random"/>
                </params>
                <declaration name="d" type="double" line="278"/>
                <declaration name="size" type="int" line="279"/>
                <declaration name="r" type="double" line="281"/>
                <scope line="283"/>
            </method>
            <javadoc line="288">
                &lt;p&gt;
                  Returns a matrix where all the elements are selected independently from
                  a uniform distribution between &apos;min&apos; and &apos;max&apos; inclusive.
                  &lt;/p&gt;                
                <@param>
                    m numRow Number of rows in the new matrix.                    
                </@param>
                <@param>
                    m numCol Number of columns in the new matrix.                    
                </@param>
                <@param>
                    m min The minimum value each element can be.                    
                </@param>
                <@param>
                    m max The maximum value each element can be.                    
                </@param>
                <@param>
                    m rand Random number generator used to fill the matrix.                    
                </@param>
                <@return>
                    n The randomly generated matrix.                    
                </@return>
            </javadoc>
            <method name="createRandom" type="DenseMatrix64F" line="301">
                <params>
                    <param name="numRow" type="int"/>
                    <param name="numCol" type="int"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="rand" type="Random"/>
                </params>
                <declaration name="mat" type="DenseMatrix64F" line="302"/>
            </method>
            <javadoc line="309">
                &lt;p&gt;
                  Sets each element in the matrix to a value drawn from an uniform distribution from 0 to 1 inclusive.
                  &lt;/p&gt;                
                <@param>
                    m mat The matrix who is to be randomized. Modified.                    
                </@param>
                <@param>
                    m rand Random number generator used to fill the matrix.                    
                </@param>
            </javadoc>
            <method name="setRandom" type="void" line="318">
                <params>
                    <param name="mat" type="DenseMatrix64F"/>
                    <param name="rand" type="Random"/>
                </params>
            </method>
            <javadoc line="322">
                &lt;p&gt;
                  Sets each element in the matrix to a value drawn from an uniform distribution from &apos;min&apos; to &apos;max&apos; inclusive.
                  &lt;/p&gt;                
                <@param>
                    m min The minimum value each element can be.                    
                </@param>
                <@param>
                    m max The maximum value each element can be.                    
                </@param>
                <@param>
                    m mat The matrix who is to be randomized. Modified.                    
                </@param>
                <@param>
                    m rand Random number generator used to fill the matrix.                    
                </@param>
            </javadoc>
            <method name="setRandom" type="void" line="333">
                <params>
                    <param name="mat" type="D1Matrix64F"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="rand" type="Random"/>
                </params>
                <declaration name="d" type="double" line="334"/>
                <declaration name="size" type="int" line="335"/>
                <declaration name="r" type="double" line="337"/>
                <scope line="339"/>
            </method>
            <javadoc line="344">
                Creates a random symmetric positive definite matrix.                
                <@param>
                    m width The width of the square matrix it returns.                    
                </@param>
                <@param>
                    m rand Random number generator used to make the matrix.                    
                </@param>
                <@return>
                    n The random symmetric  positive definite matrix.                    
                </@return>
            </javadoc>
            <method name="createSymmPosDef" type="DenseMatrix64F" line="351">
                <params>
                    <param name="width" type="int"/>
                    <param name="rand" type="Random"/>
                </params>
                <comment line="352">
                    This is not formally proven to work.  It just seems to work.                    
                </comment>
                <declaration name="a" type="DenseMatrix64F" line="353"/>
                <declaration name="b" type="DenseMatrix64F" line="354"/>
                <scope line="356"/>
                <scope line="362"/>
            </method>
            <javadoc line="369">
                Creates a random symmetric matrix whose values are selected from an uniform distribution
                  from min to max, inclusive.                
                <@param>
                    m length Width and height of the matrix.                    
                </@param>
                <@param>
                    m min Minimum value an element can have.                    
                </@param>
                <@param>
                    m max Maximum value an element can have.                    
                </@param>
                <@param>
                    m rand Random number generator.                    
                </@param>
                <@return>
                    n A symmetric matrix.                    
                </@return>
            </javadoc>
            <method name="createSymmetric" type="DenseMatrix64F" line="379">
                <params>
                    <param name="length" type="int"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="rand" type="Random"/>
                </params>
                <declaration name="A" type="DenseMatrix64F" line="380"/>
            </method>
            <javadoc line="387">
                Sets the provided square matrix to be a random symmetric matrix whose values are selected from an uniform distribution
                  from min to max, inclusive.                
                <@param>
                    m A The matrix that is to be modified.  Must be square.  Modified.                    
                </@param>
                <@param>
                    m min Minimum value an element can have.                    
                </@param>
                <@param>
                    m max Maximum value an element can have.                    
                </@param>
                <@param>
                    m rand Random number generator.                    
                </@param>
            </javadoc>
            <method name="createSymmetric" type="void" line="396">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="rand" type="Random"/>
                </params>
                <declaration name="range" type="double" line="400"/>
                <declaration name="length" type="int" line="402"/>
                <scope line="404">
                    <scope line="405">
                        <declaration name="val" type="double" line="406"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="413">
                Creates an upper triangular matrix whose values are selected from a uniform distribution.  If hessenberg
                  is greater than zero then a hessenberg matrix of the specified degree is created instead.                
                <@param>
                    m dimen Number of rows and columns in the matrix..                    
                </@param>
                <@param>
                    m hessenberg 0 for triangular matrix and > 0 for hessenberg matrix.                    
                </@param>
                <@param>
                    m min minimum value an element can be.                    
                </@param>
                <@param>
                    m max maximum value an element can be.                    
                </@param>
                <@param>
                    m rand random number generator used.                    
                </@param>
                <@return>
                    n The randomly generated matrix.                    
                </@return>
            </javadoc>
            <method name="createUpperTriangle" type="DenseMatrix64F" line="425">
                <params>
                    <param name="dimen" type="int"/>
                    <param name="hessenberg" type="int"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="rand" type="Random"/>
                </params>
                <declaration name="range" type="double" line="429"/>
                <declaration name="A" type="DenseMatrix64F" line="431"/>
                <scope line="433">
                    <declaration name="start" type="int" line="434"/>
                    <scope line="436"/>
                </scope>
            </method>
        </class>
    </source>