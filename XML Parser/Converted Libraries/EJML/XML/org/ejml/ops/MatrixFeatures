<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.ops">
        <import package="org.ejml.UtilEjml"/>
        <import package="org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionInner"/>
        <import package="org.ejml.alg.dense.mult.VectorVectorMult"/>
        <import package="org.ejml.data.Complex64F"/>
        <import package="org.ejml.data.D1Matrix64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.data.ReshapeMatrix64F"/>
        <import package="org.ejml.factory.DecompositionFactory"/>
        <import package="org.ejml.factory.EigenDecomposition"/>
        <import package="org.ejml.factory.LUDecomposition"/>
        <import package="org.ejml.factory.SingularValueDecomposition"/>
        <class name="MatrixFeatures" line="34">
            <comment line="35">
                TODO write this                
            </comment>
            <javadoc line="34">
                &lt;p&gt;
                  Used to compute features that describe the structure of a matrix.
                  &lt;p&gt;
                  &lt;p&gt;
                  Unless explicitly stated otherwise it is assumed that the elements of input matrices
                  contain only real numbers.  If an element is NaN or infinite then the behavior is undefined.
                  See IEEE 754 for more information on this issue.
                  &lt;/p&gt;                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <javadoc line="49">
                Checks to see if any element in the matrix is NaN.                
                <@param>
                    m m A matrix. Not modified.                    
                </@param>
                <@return>
                    n True if any element in the matrix is NaN.                    
                </@return>
            </javadoc>
            <method name="hasNaN" type="boolean" line="56">
                <params>
                    <param name="m" type="D1Matrix64F"/>
                </params>
                <declaration name="length" type="int" line="57"/>
                <scope line="59"/>
            </method>
            <javadoc line="66">
                Checks to see if any element in the matrix is NaN of Infinite.                
                <@param>
                    m m A matrix. Not modified.                    
                </@param>
                <@return>
                    n True if any element in the matrix is NaN of Infinite.                    
                </@return>
            </javadoc>
            <method name="hasUncountable" type="boolean" line="73">
                <params>
                    <param name="m" type="D1Matrix64F"/>
                </params>
                <declaration name="length" type="int" line="74"/>
                <scope line="76">
                    <declaration name="a" type="double" line="77"/>
                </scope>
            </method>
            <javadoc line="84">
                Checks to see if the matrix is a vector or not.                
                <@param>
                    m mat A matrix. Not modified.                    
                </@param>
                <@return>
                    n True if it is a vector and false if it is not.                    
                </@return>
            </javadoc>
            <method name="isVector" type="boolean" line="91">
                <params>
                    <param name="mat" type="D1Matrix64F"/>
                </params>
            </method>
            <javadoc line="95">
                &lt;p&gt;
                  Checks to see if the matrix is positive definite.
                  &lt;/p&gt;
                  &lt;p&gt;
                  x&lt;sup&gt;T&lt;/sup&gt; A x &gt; 0&lt;br&gt;
                  for all x where x is a non-zero vector and A is a symmetric matrix.
                  &lt;/p&gt;                
                <@param>
                    m A square symmetric matrix. Not modified.                    
                </@param>
                <@return>
                    n True if it is positive definite and false if it is not.                    
                </@return>
            </javadoc>
            <method name="isPositiveDefinite" type="boolean" line="108">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="chol" type="CholeskyDecompositionInner" line="112"/>
            </method>
            <javadoc line="119">
                &lt;p&gt;
                  Checks to see if the matrix is positive semidefinite:
                  &lt;/p&gt;
                  &lt;p&gt;
                  x&lt;sup&gt;T&lt;/sup&gt; A x &gt;= 0&lt;br&gt;
                  for all x where x is a non-zero vector and A is a symmetric matrix.
                  &lt;/p&gt;                
                <@param>
                    m A square symmetric matrix. Not modified.                    
                </@param>
                <@return>
                    n True if it is positive semidefinite and false if it is not.                    
                </@return>
            </javadoc>
            <method name="isPositiveSemidefinite" type="boolean" line="132">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <declaration name="eig" type="EigenDecomposition&lt;DenseMatrix64F&gt;" line="136"/>
                <scope line="141">
                    <declaration name="v" type="Complex64F" line="142"/>
                </scope>
            </method>
            <javadoc line="151">
                Checks to see if it is a square matrix.  A square matrix has
                  the same number of rows and columns.                
                <@param>
                    m mat A matrix. Not modified.                    
                </@param>
                <@return>
                    n True if it is a square matrix and false if it is not.                    
                </@return>
            </javadoc>
            <method name="isSquare" type="boolean" line="158">
                <params>
                    <param name="mat" type="D1Matrix64F"/>
                </params>
            </method>
            <javadoc line="162">
                &lt;p&gt;
                  Returns true if the matrix is symmetric within the tolerance.  Only square matrices can be
                  symmetric.
                  &lt;/p&gt;
                  &lt;p&gt;
                  A matrix is symmetric if:&lt;br&gt;
                  |a&lt;sub&gt;ij&lt;/sub&gt; - a&lt;sub&gt;ji&lt;/sub&gt;| &amp;le; tol
                  &lt;/p&gt;                
                <@param>
                    m m A matrix. Not modified.                    
                </@param>
                <@param>
                    m tol Tolerance for how similar two elements need to be.                    
                </@param>
                <@return>
                    n true if it is symmetric and false if it is not.                    
                </@return>
            </javadoc>
            <method name="isSymmetric" type="boolean" line="176">
                <params>
                    <param name="m" type="DenseMatrix64F"/>
                    <param name="tol" type="double"/>
                </params>
                <declaration name="max" type="double" line="180"/>
                <scope line="182">
                    <scope line="183">
                        <declaration name="a" type="double" line="184"/>
                        <declaration name="b" type="double" line="185"/>
                        <declaration name="diff" type="double" line="187"/>
                        <scope line="189"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="197">
                &lt;p&gt;
                  Returns true if the matrix is perfectly symmetric.  Only square matrices can be symmetric.
                  &lt;/p&gt;
                  &lt;p&gt;
                  A matrix is symmetric if:&lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; == a&lt;sub&gt;ji&lt;/sub&gt;
                  &lt;/p&gt;                
                <@param>
                    m m A matrix. Not modified.                    
                </@param>
                <@return>
                    n true if it is symmetric and false if it is not.                    
                </@return>
            </javadoc>
            <method name="isSymmetric" type="boolean" line="209">
                <params>
                    <param name="m" type="DenseMatrix64F"/>
                </params>
            </method>
            <javadoc line="213">
                &lt;p&gt;
                  Checks to see if a matrix is skew symmetric with in tolerance:&lt;br&gt;
                  &lt;br&gt;
                  -A = A&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
                  or&lt;br&gt;
                  |a&lt;sub&gt;ij&lt;/sub&gt; + a&lt;sub&gt;ji&lt;/sub&gt;| &amp;le; tol
                  &lt;/p&gt;                
                <@param>
                    m A The matrix being tested.                    
                </@param>
                <@param>
                    m tol Tolerance for being skew symmetric.                    
                </@param>
                <@return>
                    n True if it is skew symmetric and false if it is not.                    
                </@return>
            </javadoc>
            <method name="isSkewSymmetric" type="boolean" line="226">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="tol" type="double"/>
                </params>
                <scope line="230">
                    <scope line="231">
                        <declaration name="a" type="double" line="232"/>
                        <declaration name="b" type="double" line="233"/>
                        <declaration name="diff" type="double" line="235"/>
                        <scope line="237"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="245">
                Checks to see if the two matrices are inverses of each other.                
                <@param>
                    m a A matrix. Not modified.                    
                </@param>
                <@param>
                    m b A matrix. Not modified.                    
                </@param>
            </javadoc>
            <method name="isInverse" type="boolean" line="251">
                <params>
                    <param name="a" type="DenseMatrix64F"/>
                    <param name="b" type="DenseMatrix64F"/>
                    <param name="tol" type="double"/>
                </params>
                <scope line="252"/>
                <declaration name="numRows" type="int" line="256"/>
                <declaration name="numCols" type="int" line="257"/>
                <scope line="259">
                    <scope line="260">
                        <declaration name="total" type="double" line="261"/>
                        <scope line="262"/>
                        <scope line="266"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="277">
                &lt;p&gt;
                  Checks to see if each element in the two matrices are within tolerance of
                  each other: tol &amp;ge; |a&lt;sub&gt;ij&lt;/sub&gt; - b&lt;sub&gt;ij&lt;/sub&gt;|.
                  &lt;p&gt;
                  &lt;p&gt;
                  NOTE: If any of the elements are not countable then false is returned.&lt;br&gt;
                  NOTE: If a tolerance of zero is passed in this is equivalent to calling{@link #isEquals(org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)}&lt;/p&gt;                
                <@param>
                    m a A matrix. Not modified.                    
                </@param>
                <@param>
                    m b A matrix. Not modified.                    
                </@param>
                <@param>
                    m tol How close to being identical each element needs to be.                    
                </@param>
                <@return>
                    n true if equals and false otherwise.                    
                </@return>
            </javadoc>
            <method name="isEquals" type="boolean" line="295">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                    <param name="tol" type="double"/>
                </params>
                <scope line="296"/>
                <declaration name="length" type="int" line="303"/>
                <scope line="305">
                    <scope line="306"/>
                </scope>
            </method>
            <javadoc line="313">
                &lt;p&gt;
                  Checks to see if each element in the upper or lower triangular portion of the two matrices are within tolerance of
                  each other: tol &amp;ge; |a&lt;sub&gt;ij&lt;/sub&gt; - b&lt;sub&gt;ij&lt;/sub&gt;|.
                  &lt;p&gt;
                  &lt;p&gt;
                  NOTE: If any of the elements are not countable then false is returned.&lt;br&gt;
                  NOTE: If a tolerance of zero is passed in this is equivalent to calling{@link #isEquals(org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)}&lt;/p&gt;                
                <@param>
                    m a A matrix. Not modified.                    
                </@param>
                <@param>
                    m b A matrix. Not modified.                    
                </@param>
                <@param>
                    m upper true of upper triangular and false for lower.                    
                </@param>
                <@param>
                    m tol How close to being identical each element needs to be.                    
                </@param>
                <@return>
                    n true if equals and false otherwise.                    
                </@return>
            </javadoc>
            <method name="isEqualsTriangle" type="boolean" line="332">
                <params>
                    <param name="a" type="ReshapeMatrix64F"/>
                    <param name="b" type="ReshapeMatrix64F"/>
                    <param name="upper" type="boolean"/>
                    <param name="tol" type="double"/>
                </params>
                <scope line="333"/>
                <scope line="337">
                    <scope line="338">
                        <scope line="339"/>
                    </scope>
                </scope>
                <scope line="344">
                    <scope line="345">
                        <declaration name="end" type="int" line="346"/>
                        <scope line="348"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="358">
                &lt;p&gt;
                  Checks to see if each element in the two matrices are equal:
                  a&lt;sub&gt;ij&lt;/sub&gt; == b&lt;sub&gt;ij&lt;/sub&gt;
                  &lt;p&gt;
                  &lt;p&gt;
                  NOTE: If any of the elements are NaN then false is returned.  If two corresponding
                  elements are both positive or negative infinity then they are equal.
                  &lt;/p&gt;                
                <@param>
                    m a A matrix. Not modified.                    
                </@param>
                <@param>
                    m b A matrix. Not modified.                    
                </@param>
                <@return>
                    n true if identical and false otherwise.                    
                </@return>
            </javadoc>
            <method name="isEquals" type="boolean" line="373">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                </params>
                <scope line="374"/>
                <declaration name="length" type="int" line="378"/>
                <scope line="379">
                    <scope line="380"/>
                </scope>
            </method>
            <javadoc line="388">
                &lt;p&gt;
                  Checks to see if each corresponding element in the two matrices are
                  within tolerance of each other or have the some symbolic meaning.  This
                  can handle NaN and Infinite numbers.
                  &lt;p&gt;
                  &lt;p&gt;
                  If both elements are countable then the following equality test is used:&lt;br&gt;
                  |a&lt;sub&gt;ij&lt;/sub&gt; - b&lt;sub&gt;ij&lt;/sub&gt;| &amp;le; tol.&lt;br&gt;
                  Otherwise both numbers must both be Double.NaN, Double.POSITIVE_INFINITY, or
                  Double.NEGATIVE_INFINITY to be identical.
                  &lt;/p&gt;                
                <@param>
                    m a A matrix. Not modified.                    
                </@param>
                <@param>
                    m b A matrix. Not modified.                    
                </@param>
                <@param>
                    m tol Tolerance for equality.                    
                </@param>
                <@return>
                    n true if identical and false otherwise.                    
                </@return>
            </javadoc>
            <method name="isIdentical" type="boolean" line="407">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                    <param name="tol" type="double"/>
                </params>
                <scope line="408"/>
                <declaration name="length" type="int" line="414"/>
                <scope line="415">
                    <declaration name="valA" type="double" line="416"/>
                    <declaration name="valB" type="double" line="417"/>
                    <declaration name="diff" type="double" line="421"/>
                    <scope line="428"/>
                    <scope line="430"/>
                    <scope line="432"/>
                </scope>
            </method>
            <javadoc line="440">
                &lt;p&gt;
                  Checks to see if a matrix is orthogonal or isometric.
                  &lt;/p&gt;                
                <@param>
                    m Q The matrix being tested. Not modified.                    
                </@param>
                <@param>
                    m tol Tolerance.                    
                </@param>
                <@return>
                    n True if it passes the test.                    
                </@return>
            </javadoc>
            <method name="isOrthogonal" type="boolean" line="450">
                <params>
                    <param name="Q" type="DenseMatrix64F"/>
                    <param name="tol" type="double"/>
                </params>
                <scope line="451"/>
                <declaration name="u" type="DenseMatrix64F" line="455"/>
                <scope line="457">
                    <declaration name="a" type="DenseMatrix64F" line="458"/>
                    <scope line="460">
                        <declaration name="val" type="double" line="461"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="471">
                Checks to see if the rows of the provided matrix are linearly independent.                
                <@param>
                    m A Matrix whose rows are being tested for linear independence.                    
                </@param>
                <@return>
                    n true if linearly independent and false otherwise.                    
                </@return>
            </javadoc>
            <method name="isRowsLinearIndependent" type="boolean" line="478">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
                <comment line="479">
                    LU decomposition                    
                </comment>
                <comment line="479">
                    if they are linearly independent it should not be singular                    
                </comment>
                <declaration name="lu" type="LUDecomposition&lt;DenseMatrix64F&gt;" line="480"/>
            </method>
            <javadoc line="491">
                Checks to see if the provided matrix is within tolerance to an identity matrix.                
                <@param>
                    m mat Matrix being examined.  Not modified.                    
                </@param>
                <@param>
                    m tol Tolerance.                    
                </@param>
                <@return>
                    n True if it is within tolerance to an identify matrix.                    
                </@return>
            </javadoc>
            <method name="isIdentity" type="boolean" line="499">
                <params>
                    <param name="mat" type="DenseMatrix64F"/>
                    <param name="tol" type="double"/>
                </params>
                <comment line="500">
                    see if the result is an identity matrix                    
                </comment>
                <declaration name="index" type="int" line="501"/>
                <scope line="502">
                    <scope line="503">
                        <scope line="504"/>
                        <scope line="507"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="517">
                Checks to see if every value in the matrix is the specified value.                
                <@param>
                    m mat The matrix being tested.  Not modified.                    
                </@param>
                <@param>
                    m val Checks to see if every element in the matrix has this value.                    
                </@param>
                <@param>
                    m tol True if all the elements are within this tolerance.                    
                </@param>
                <@return>
                    n true if the test passes.                    
                </@return>
            </javadoc>
            <method name="isConstantVal" type="boolean" line="526">
                <params>
                    <param name="mat" type="DenseMatrix64F"/>
                    <param name="val" type="double"/>
                    <param name="tol" type="double"/>
                </params>
                <comment line="527">
                    see if the result is an identity matrix                    
                </comment>
                <declaration name="index" type="int" line="528"/>
                <scope line="529">
                    <scope line="530"/>
                </scope>
            </method>
            <javadoc line="540">
                Checks to see if all the diagonal elements in the matrix are positive.                
                <@param>
                    m a A matrix. Not modified.                    
                </@param>
                <@return>
                    n true if all the  diagonal elements are positive, false otherwise.                    
                </@return>
            </javadoc>
            <method name="isDiagonalPositive" type="boolean" line="546">
                <params>
                    <param name="a" type="DenseMatrix64F"/>
                </params>
                <scope line="547"/>
            </method>
            <method name="isFullRank" type="boolean" line="555">
                <params>
                    <param name="a" type="DenseMatrix64F"/>
                </params>
            </method>
            <javadoc line="559">
                &lt;p&gt;
                  Checks to see if the two matrices are the negative of each other:&lt;br&gt;
                  &lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; = -b&lt;sub&gt;ij&lt;/sub&gt;
                  &lt;/p&gt;                
                <@param>
                    m a First matrix.  Not modified.                    
                </@param>
                <@param>
                    m b Second matrix.  Not modified.                    
                </@param>
                <@param>
                    m tol Numerical tolerance.                    
                </@param>
                <@return>
                    n True if they are the negative of each other within tolerance.                    
                </@return>
            </javadoc>
            <method name="isNegative" type="boolean" line="571">
                <params>
                    <param name="a" type="D1Matrix64F"/>
                    <param name="b" type="D1Matrix64F"/>
                    <param name="tol" type="double"/>
                </params>
                <declaration name="length" type="int" line="575"/>
                <scope line="577"/>
            </method>
            <javadoc line="585">
                &lt;p&gt;
                  Checks to see if a matrix is upper triangular or Hessenberg. A Hessenberg matrix of degree N
                  has the following property:&lt;br&gt;
                  &lt;br&gt;
                  a&lt;sub&gt;ij&lt;/sub&gt; &amp;le; 0 for all i &lt; j+N&lt;br&gt;
                  &lt;br&gt;
                  A triangular matrix is a Hessenberg matrix of degree 0.
                  &lt;/p&gt;                
                <@param>
                    m A Matrix being tested.  Not modified.                    
                </@param>
                <@param>
                    m hessenberg The degree of being hessenberg.                    
                </@param>
                <@param>
                    m tol How close to zero the lower left elements need to be.                    
                </@param>
                <@return>
                    n If it is an upper triangular/hessenberg matrix or not.                    
                </@return>
            </javadoc>
            <method name="isUpperTriangle" type="boolean" line="599">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="hessenberg" type="int"/>
                    <param name="tol" type="double"/>
                </params>
                <scope line="603">
                    <scope line="604">
                        <scope line="605"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="613">
                Computes the rank of a matrix using a default tolerance.                
                <@param>
                    m A Matrix whose rank is to be calculated.  Not modified.                    
                </@param>
                <@return>
                    n The matrix's rank.                    
                </@return>
            </javadoc>
            <method name="rank" type="int" line="619">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
            </method>
            <javadoc line="623">
                Computes the rank of a matrix using the specified tolerance.                
                <@param>
                    m A Matrix whose rank is to be calculated.  Not modified.                    
                </@param>
                <@param>
                    m threshold The numerical threshold used to determine a singular value.                    
                </@param>
                <@return>
                    n The matrix's rank.                    
                </@return>
            </javadoc>
            <method name="rank" type="int" line="630">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="threshold" type="double"/>
                </params>
                <declaration name="svd" type="SingularValueDecomposition&lt;DenseMatrix64F&gt;" line="631"/>
            </method>
            <javadoc line="642">
                Computes the nullity of a matrix using the default tolerance.                
                <@param>
                    m A Matrix whose rank is to be calculated.  Not modified.                    
                </@param>
                <@return>
                    n The matrix's nullity.                    
                </@return>
            </javadoc>
            <method name="nullity" type="int" line="648">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                </params>
            </method>
            <javadoc line="652">
                Computes the nullity of a matrix using the specified tolerance.                
                <@param>
                    m A Matrix whose rank is to be calculated.  Not modified.                    
                </@param>
                <@param>
                    m threshold The numerical threshold used to determine a singular value.                    
                </@param>
                <@return>
                    n The matrix's nullity.                    
                </@return>
            </javadoc>
            <method name="nullity" type="int" line="659">
                <params>
                    <param name="A" type="DenseMatrix64F"/>
                    <param name="threshold" type="double"/>
                </params>
                <declaration name="svd" type="SingularValueDecomposition&lt;DenseMatrix64F&gt;" line="660"/>
            </method>
        </class>
    </source>