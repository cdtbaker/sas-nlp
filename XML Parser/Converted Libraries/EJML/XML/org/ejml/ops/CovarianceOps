<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.ops">
        <import package="org.ejml.alg.dense.linsol.LinearSolverSafe"/>
        <import package="org.ejml.alg.dense.misc.UnrolledInverseFromMinor"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.LinearSolver"/>
        <import package="org.ejml.factory.LinearSolverFactory"/>
        <import package="java.util.Random"/>
        <class name="CovarianceOps" line="30">
            <javadoc line="30">
                Contains operations specific to covariance matrices.                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <declaration name="TOL" type="double" line="37"/>
            <javadoc line="39">
                This is a fairly light weight check to see of a covariance matrix is valid.
                 * It checks to see if the diagonal elements are all positive, which they should be
                 * if it is valid.  Not all invalid covariance matrices will be caught by this method.                
                <@return>
                    n true if valid and false if invalid                    
                </@return>
            </javadoc>
            <method name="isValidFast" type="boolean" line="46"/>
            <javadoc line="50">
                Performs a variety of tests to see if the provided matrix is a valid
                 * covariance matrix.                
                <@return>
                    n  0 = is valid 1 = failed positive diagonal, 2 = failed on symmetry, 2 = failed on positive definite                    
                </@return>
            </javadoc>
            <method name="isValid" type="int" line="56"/>
            <javadoc line="69">
                Performs a matrix inversion operations that takes advantage of the special
                 * properties of a covariance matrix.                
                <@param>
                    m cov On input it is a covariance matrix, on output it is the inverse.  Modified.                    
                </@param>
                <@return>
                    n true if it could invert the matrix false if it could not.                    
                </@return>
            </javadoc>
            <method name="invert" type="boolean" line="76"/>
            <javadoc line="80">
                Performs a matrix inversion operations that takes advantage of the special
                 * properties of a covariance matrix.                
                <@param>
                    m cov A covariance matrix. Not modified.                    
                </@param>
                <@param>
                    m cov_inv The inverse of cov.  Modified.                    
                </@param>
                <@return>
                    n true if it could invert the matrix false if it could not.                    
                </@return>
            </javadoc>
            <method name="invert" type="boolean" line="88">
                <scope line="89">
                    <scope line="90"/>
                </scope>
                <scope line="99">
                    <declaration name="solver" type="LinearSolver&lt;DenseMatrix64F&gt;" line="100"/>
                </scope>
            </method>
            <javadoc line="110">
                Sets vector to a random value based upon a zero-mean multivariate Gaussian distribution with
                 * covariance &apos;cov&apos;.  If repeat calls are made to this class, consider using {@link CovarianceRandomDraw} instead.                
                <@param>
                    m cov The distirbutions covariance.  Not modified.                    
                </@param>
                <@param>
                    m vector The random vector. Modified.                    
                </@param>
                <@param>
                    m rand Random number generator.                    
                </@param>
            </javadoc>
            <method name="randomVector" type="void" line="121">
                <declaration name="rng" type="CovarianceRandomDraw" line="122"/>
            </method>
        </class>
    </source>