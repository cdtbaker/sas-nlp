<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.ops">
        <import package="java.io.BufferedReader"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <class name="ReadCsv" line="28">
            <comment line="29">
                if there is a comment character                
            </comment>
            <comment line="29">
                what the comment character is                
            </comment>
            <comment line="29">
                reader for the input stream                
            </comment>
            <comment line="29">
                number of lines that have been read                
            </comment>
            <javadoc line="28">
                &lt;p&gt;
                 * Base class for reading CSV formatted files.  CSV stands for column-space-value where text strings are separated
                 * by a space character.  The values are typically stored in a human readable format.  The encoded text for a single
                 * variable is referred to as a word.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * Comments are allowed and identified by starting a line with the comment character.  The comment character is user
                 * configurable.  By default there is no comment character.
                 * &lt;/p&gt;                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <declaration name="hasComment" type="boolean" line="44"/>
            <declaration name="comment" type="char" line="46"/>
            <declaration name="in" type="BufferedReader" line="49"/>
            <declaration name="lineNumber" type="int" line="52"/>
            <javadoc line="54">
                Constructor for ReadCsv                
                <@param>
                    m in Where the input comes from.                    
                </@param>
            </javadoc>
            <method name="ReadCsv" type="constructor" line="59"/>
            <javadoc line="63">
                Sets the comment character.  All lines that start with this character will be ignored.                
                <@param>
                    m comment The new comment character.                    
                </@param>
            </javadoc>
            <method name="setComment" type="void" line="68"/>
            <javadoc line="73">
                Returns how many lines have been read.                
                <@return>
                    n Line number                    
                </@return>
            </javadoc>
            <method name="getLineNumber" type="int" line="78"/>
            <javadoc line="82">
                Returns the reader that it is using internally.                
                <@return>
                    n The reader.                    
                </@return>
            </javadoc>
            <method name="getReader" type="BufferedReader" line="86"/>
            <javadoc line="90">
                Finds the next valid line of words in the stream and extracts them.                
                <@return>
                    n List of valid words on the line.  null if the end of the file has been reached.                    
                </@return>
                <@throws>
                    s java.io.IOException                    
                </@throws>
            </javadoc>
            <method name="extractWords" type="List<String>" line="97">
                <scope line="98">
                    <declaration name="line" type="String" line="100"/>
                    <scope line="101"/>
                    <scope line="106"/>
                </scope>
            </method>
            <javadoc line="116">
                Extracts the words from a string.  Words are seperated by a space character.                
                <@param>
                    m line The line that is being parsed.                    
                </@param>
                <@return>
                    n A list of words contained on the line.                    
                </@return>
            </javadoc>
            <method name="parseWords" type="List<String>" line="122">
                <comment line="123">
                    if the line ended add the final word                    
                </comment>
                <declaration name="words" type="List&lt;String&gt;" line="123"/>
                <declaration name="insideWord" type="boolean" line="124"/>
                <declaration name="last" type="int" line="125"/>
                <scope line="126">
                    <declaration name="c" type="char" line="127"/>
                    <scope line="129">
                        <scope line="131"/>
                    </scope>
                    <scope line="135">
                        <scope line="136"/>
                    </scope>
                </scope>
                <scope line="144"/>
            </method>
            <javadoc line="150">
                Checks to see if &apos;c&apos; is a space character or not.                
                <@param>
                    m c The character being tested.                    
                </@param>
                <@return>
                    n if it is a space character or not.                    
                </@return>
            </javadoc>
            <method name="isSpace" type="boolean" line="156"/>
        </class>
    </source>