<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.ops">
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.SingularValueDecomposition"/>
        <class name="SingularOps" line="25">
            <javadoc line="25">
                Operations related to singular value decomposition.                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <javadoc line="32">
                &lt;p&gt;
                 * Adjusts the matrices so that the singular values are in descending order.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * In most implementations of SVD the singular values are automatically arranged in in descending
                 * order.  In EJML this is not the case since it is often not needed and some computations can
                 * be saved by not doing that.
                 * &lt;/p&gt;                
                <@param>
                    m U Matrix. Modified.                    
                </@param>
                <@param>
                    m tranU is U transposed or not.                    
                </@param>
                <@param>
                    m W Diagonal matrix with singular values. Modified.                    
                </@param>
                <@param>
                    m V Matrix. Modified.                    
                </@param>
                <@param>
                    m tranV is V transposed or not.                    
                </@param>
            </javadoc>
            <method name="descendingOrder" type="void" line="53">
                <declaration name="numSingular" type="int" line="54"/>
                <scope line="58">
                    <declaration name="bigValue" type="double" line="59"/>
                    <declaration name="bigIndex" type="int" line="60"/>
                    <scope line="63">
                        <declaration name="v" type="double" line="64"/>
                        <scope line="66"/>
                    </scope>
                    <scope line="76"/>
                    <declaration name="tmp" type="double" line="81"/>
                    <scope line="85"/>
                    <scope line="89"/>
                </scope>
            </method>
            <javadoc line="95">
                &lt;p&gt;
                 * Similar to {@link #descendingOrder(org.ejml.data.DenseMatrix64F,boolean,org.ejml.data.DenseMatrix64F,org.ejml.data.DenseMatrix64F,boolean)}but takes in an array of singular values instead.
                 * &lt;/p&gt;                
                <@param>
                    m U Matrix. Modified.                    
                </@param>
                <@param>
                    m tranU is U transposed or not.                    
                </@param>
                <@param>
                    m singularValues Array of singular values. Modified.                    
                </@param>
                <@param>
                    m numSingularValues Number of elements in singularValues array                    
                </@param>
                <@param>
                    m V Matrix. Modified.                    
                </@param>
                <@param>
                    m tranV is V transposed or not.                    
                </@param>
            </javadoc>
            <method name="descendingOrder" type="void" line="112">
                <comment line="113">
                    checkSvdMatrixSize(U, tranU, W, V, tranV);                    
                </comment>
                <scope line="115">
                    <declaration name="bigValue" type="double" line="116"/>
                    <declaration name="bigIndex" type="int" line="117"/>
                    <scope line="120">
                        <declaration name="v" type="double" line="121"/>
                        <scope line="123"/>
                    </scope>
                    <scope line="133"/>
                    <declaration name="tmp" type="double" line="138"/>
                    <scope line="142"/>
                    <scope line="146"/>
                </scope>
            </method>
            <javadoc line="152">
                Checks to see if all the provided matrices are the expected size for an SVD.  If an error is encountered
                 * then an exception is thrown.  This automatically handles compact and non-compact formats                
            </javadoc>
            <method name="checkSvdMatrixSize" type="void" line="156">
                <declaration name="numSingular" type="int" line="157"/>
                <declaration name="compact" type="boolean" line="158"/>
                <scope line="160">
                    <scope line="161"/>
                    <scope line="168"/>
                </scope>
                <scope line="174"/>
            </method>
            <method name="swapRowOrCol" type="void" line="186">
                <declaration name="tmp" type="double" line="187"/>
                <scope line="188">
                    <scope line="190"/>
                </scope>
                <scope line="195">
                    <scope line="197"/>
                </scope>
            </method>
            <javadoc line="205">
                &lt;p&gt;
                 * Returns the null-space from the singular value decomposition. The null space is a set of non-zero vectors that
                 * when multiplied by the original matrix return zero.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * The null space is found by extracting the columns in V that are associated singular values less than
                 * or equal to the threshold. In some situations a non-compact SVD is required.
                 * &lt;/p&gt;                
                <@param>
                    m svd A precomputed decomposition.  Not modified.                    
                </@param>
                <@param>
                    m nullSpace Storage for null space.  Will be reshaped as needed.  Modified.                    
                </@param>
                <@param>
                    m tol Threshold for selecting singular values.  Try UtilEjml.EPS.                    
                </@param>
                <@return>
                    n The null space.                    
                </@return>
            </javadoc>
            <method name="nullSpace" type="DenseMatrix64F" line="223">
                <comment line="224">
                    first determine the size of the null space                    
                </comment>
                <comment line="224">
                    declare output data                    
                </comment>
                <comment line="224">
                    now extract the vectors                    
                </comment>
                <declaration name="N" type="int" line="224"/>
                <declaration name="s" type="double" line="225"/>
                <declaration name="V" type="DenseMatrix64F" line="227"/>
                <scope line="229"/>
                <declaration name="numVectors" type="int" line="234"/>
                <scope line="236">
                    <scope line="237"/>
                </scope>
                <scope line="243"/>
                <scope line="245"/>
                <declaration name="count" type="int" line="250"/>
                <scope line="251">
                    <scope line="252"/>
                </scope>
                <scope line="256"/>
            </method>
            <javadoc line="265">
                &lt;p&gt;
                 * The vector associated will the smallest singular value is returned as the null space
                 * of the decomposed system.  A right null space is returned if &apos;isRight&apos; is set to true,
                 * and a left null space if false.
                 * &lt;/p&gt;                
                <@param>
                    m svd A precomputed decomposition.  Not modified.                    
                </@param>
                <@param>
                    m isRight true for right null space and false for left null space.  Right is more commonly used.                    
                </@param>
                <@param>
                    m nullVector Optional storage for a vector for the null space.  Modified.                    
                </@param>
                <@return>
                    n Vector in V associated with smallest singular value..                    
                </@return>
            </javadoc>
            <method name="nullVector" type="DenseMatrix64F" line="280">
                <comment line="281">
                    extract the null space                    
                </comment>
                <declaration name="N" type="int" line="281"/>
                <declaration name="s" type="double" line="282"/>
                <declaration name="A" type="DenseMatrix64F" line="284"/>
                <scope line="286">
                    <scope line="287"/>
                    <scope line="291"/>
                </scope>
                <scope line="294">
                    <scope line="295"/>
                    <scope line="299"/>
                </scope>
                <declaration name="smallestIndex" type="int" line="304"/>
                <scope line="310">
                    <declaration name="smallestValue" type="double" line="312"/>
                    <scope line="314">
                        <scope line="315"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="331">
                Extracts the rank of a matrix using a preexisting decomposition.                
                <@param>
                    m svd A precomputed decomposition.  Not modified.                    
                </@param>
                <@param>
                    m threshold Tolerance used to determine of a singular value is singular.                    
                </@param>
                <@return>
                    n The rank of the decomposed matrix.                    
                </@return>
            </javadoc>
            <method name="rank" type="int" line="338">
                <declaration name="numRank" type="int" line="339"/>
                <declaration name="w" type="double" line="341"/>
                <declaration name="N" type="int" line="343"/>
                <scope line="345"/>
            </method>
            <javadoc line="353">
                Extracts the nullity of a matrix using a preexisting decomposition.                
                <@param>
                    m svd A precomputed decomposition.  Not modified.                    
                </@param>
                <@param>
                    m threshold Tolerance used to determine of a singular value is singular.                    
                </@param>
                <@return>
                    n The nullity of the decomposed matrix.                    
                </@return>
            </javadoc>
            <method name="nullity" type="int" line="360">
                <declaration name="ret" type="int" line="361"/>
                <declaration name="w" type="double" line="363"/>
                <declaration name="N" type="int" line="365"/>
                <declaration name="numCol" type="int" line="367"/>
                <scope line="369"/>
            </method>
        </class>
    </source>