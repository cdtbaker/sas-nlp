<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.ejml.simple">
        <import package="org.ejml.data.Complex64F"/>
        <import package="org.ejml.data.DenseMatrix64F"/>
        <import package="org.ejml.factory.DecompositionFactory"/>
        <import package="org.ejml.factory.EigenDecomposition"/>
        <class name="SimpleEVD" line="27">
            <javadoc line="27">
                Wrapper around EigenDecomposition for SimpleMatrix                
                <@author>
                    r Peter Abeles                    
                </@author>
            </javadoc>
            <declaration name="eig" type="EigenDecomposition&lt;DenseMatrix64F&gt;" line="35"/>
            <declaration name="mat" type="DenseMatrix64F" line="37"/>
            <method name="SimpleEVD" type="constructor" line="40"/>
            <javadoc line="47">
                Returns the number of eigenvalues/eigenvectors.  This is the matrix&apos;s dimension.                
                <@return>
                    n number of eigenvalues/eigenvectors.                    
                </@return>
            </javadoc>
            <method name="getNumberOfEigenvalues" type="int" line="52"/>
            <javadoc line="56">
                &lt;p&gt;
                 * Returns an eigenvalue as a complex number.  For symmetric matrices the returned eigenvalue will always be a real
                 * number, which means the imaginary component will be equal to zero.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * NOTE: The order of the eigenvalues is dependent upon the decomposition algorithm used.  This means that they may
                 * or may not be ordered by magnitude.  For example the QR algorithm will returns results that are partially
                 * ordered by magnitude, but this behavior should not be relied upon.
                 * &lt;/p&gt;                
                <@param>
                    m index Index of the eigenvalue eigenvector pair.                    
                </@param>
                <@return>
                    n An eigenvalue.                    
                </@return>
            </javadoc>
            <method name="getEigenvalue" type="Complex64F" line="71"/>
            <javadoc line="75">
                &lt;p&gt;
                 * Used to retrieve real valued eigenvectors.  If an eigenvector is associated with a complex eigenvalue
                 * then null is returned instead.
                 * &lt;/p&gt;                
                <@param>
                    m index Index of the eigenvalue eigenvector pair.                    
                </@param>
                <@return>
                    n If the associated eigenvalue is real then an eigenvector is returned, null otherwise.                    
                </@return>
            </javadoc>
            <method name="getEigenVector" type="T" line="84"/>
            <javadoc line="88">
                &lt;p&gt;
                 * Computes the quality of the computed decomposition.  A value close to or less than 1e-15
                 * is considered to be within machine precision.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * This function must be called before the original matrix has been modified or else it will
                 * produce meaningless results.
                 * &lt;/p&gt;                
                <@return>
                    n Quality of the decomposition.                    
                </@return>
            </javadoc>
            <method name="quality" type="double" line="101"/>
            <javadoc line="105">
                Returns the underlying decomposition that this is a wrapper around.                
                <@return>
                    n EigenDecomposition                    
                </@return>
            </javadoc>
            <method name="getEVD" type="EigenDecomposition" line="110"/>
            <javadoc line="114">
                Returns the index of the eigenvalue which has the largest magnitude.                
                <@return>
                    n index of the largest magnitude eigen value.                    
                </@return>
            </javadoc>
            <method name="getIndexMax" type="int" line="119">
                <declaration name="indexMax" type="int" line="120"/>
                <declaration name="max" type="double" line="121"/>
                <declaration name="N" type="int" line="123"/>
                <scope line="124">
                    <declaration name="m" type="double" line="125"/>
                    <scope line="126"/>
                </scope>
            </method>
            <javadoc line="135">
                Returns the index of the eigenvalue which has the smallest magnitude.                
                <@return>
                    n index of the smallest magnitude eigen value.                    
                </@return>
            </javadoc>
            <method name="getIndexMin" type="int" line="140">
                <declaration name="indexMin" type="int" line="141"/>
                <declaration name="min" type="double" line="142"/>
                <declaration name="N" type="int" line="144"/>
                <scope line="145">
                    <declaration name="m" type="double" line="146"/>
                    <scope line="147"/>
                </scope>
            </method>
        </class>
    </source>