<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix">
  <import name="com.github.fommil.netlib.LAPACK" />
  <import name="org.netlib.util.intW" />
  <class name="SymmDenseEVD" extends="SymmEVD" startLine="27">
    <javadoc>
      <text>* Computes eigenvalues of symmetrical, dense matrices</text>
    </javadoc>
    <javadoc>
      <text>* Double work array</text>
    </javadoc>
    <declaration type="double[]" name="work" />
    <javadoc>
      <text>* Integer work array</text>
    </javadoc>
    <declaration type="int[]" name="iwork" />
    <javadoc>
      <text>* Upper or lower part stored</text>
    </javadoc>
    <declaration type="UpLo" name="uplo" />
    <javadoc>
      <text>* Range of eigenvalues to compute</text>
    </javadoc>
    <declaration type="JobEigRange" name="range" />
    <javadoc>
      <text>* Eigenvector supports</text>
    </javadoc>
    <declaration type="int[]" name="isuppz" />
    <javadoc>
      <text>* Tolerance criteria</text>
    </javadoc>
    <declaration type="double" name="abstol" />
    <javadoc>
      <text>* Sets up an eigenvalue decomposition for symmetrical, dense matrices.
 * Computes all eigenvalues and eigenvectors, and uses a low default
 * tolerance criteria</text>
      <param>nSize of the matrix</param>
      <param>upperTrue if the upper part of the matrix is stored, and false if
 * the lower part of the matrix is stored instead</param>
    </javadoc>
    <method type="constructor" name="SymmDenseEVD" startLine="73" endLine="75" />
    <javadoc>
      <text>* Sets up an eigenvalue decomposition for symmetrical, dense matrices.
 * Computes all eigenvalues and eigenvectors</text>
      <param>nSize of the matrix</param>
      <param>upperTrue if the upper part of the matrix is stored, and false if
 * the lower part of the matrix is stored instead</param>
      <param>abstolAbsolute tolerance criteria</param>
    </javadoc>
    <method type="constructor" name="SymmDenseEVD" startLine="89" endLine="91" />
    <javadoc>
      <text>* Sets up an eigenvalue decomposition for symmetrical, dense matrices. Uses
 * a low default tolerance criteria</text>
      <param>nSize of the matrix</param>
      <param>upperTrue if the upper part of the matrix is stored, and false if
 * the lower part of the matrix is stored instead</param>
      <param>vectorsTrue to compute the eigenvectors, false for just the
 * eigenvalues</param>
    </javadoc>
    <method type="constructor" name="SymmDenseEVD" startLine="106" endLine="108" />
    <javadoc>
      <text>* Sets up an eigenvalue decomposition for symmetrical, dense matrices</text>
      <param>nSize of the matrix</param>
      <param>upperTrue if the upper part of the matrix is stored, and false if
 * the lower part of the matrix is stored instead</param>
      <param>vectorsTrue to compute the eigenvectors, false for just the
 * eigenvalues</param>
      <param>abstolAbsolute tolerance criteria</param>
    </javadoc>
    <method type="constructor" name="SymmDenseEVD" startLine="124" endLine="154">
      <declaration type="double[]" name="worksize" />
      <declaration type="int[]" name="iworksize" />
      <declaration type="intW" name="info" />
      <declaration type="int" name="lwork" />
      <scope startLine="142" endLine="145" />
      <scope startLine="145" endLine="148" />
      <comment>Find the needed workspace</comment>
      <comment>Allocate workspace</comment>
    </method>
    <javadoc>
      <text>* Convenience method for computing the full eigenvalue decomposition of the
 * given matrix</text>
      <param>AMatrix to factorize. Upper part extracted, and the matrix is
 * not modified</param>
      <return>Newly allocated decomposition</return>
      <throws>NotConvergedException</throws>
    </javadoc>
    <method type="SymmDenseEVD" name="factorize" startLine="166" endLine="169" />
    <javadoc>
      <text>* Computes the eigenvalue decomposition of the given matrix</text>
      <param>AMatrix to factorize. Overwritten on return</param>
      <return>The current eigenvalue decomposition</return>
      <throws>NotConvergedException</throws>
    </javadoc>
    <method type="SymmDenseEVD" name="factor" startLine="180" endLine="186" />
    <javadoc>
      <text>* Computes the eigenvalue decomposition of the given matrix</text>
      <param>AMatrix to factorize. Overwritten on return</param>
      <return>The current eigenvalue decomposition</return>
      <throws>NotConvergedException</throws>
    </javadoc>
    <method type="SymmDenseEVD" name="factor" startLine="197" endLine="203" />
    <method type="SymmDenseEVD" name="factor" startLine="206" endLine="223">
      <declaration type="intW" name="info" />
    </method>
  </class>
</source>
