<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix">
  <import name="com.github.fommil.netlib.LAPACK" />
  <import name="no.uib.cipr.matrix.Matrix.Norm" />
  <import name="org.netlib.util.doubleW" />
  <import name="org.netlib.util.intW" />
  <class name="DenseLU" startLine="28">
    <javadoc>
      <text>* Dense Partial Pivot LU decomposition: {@code A = P * L * U}.</text>
    </javadoc>
    <javadoc>
      <text>* Holds the LU factors</text>
    </javadoc>
    <declaration type="DenseMatrix" name="LU" />
    <javadoc>
      <text>* Row pivotations</text>
    </javadoc>
    <declaration type="int[]" name="piv" />
    <javadoc>
      <text>* True if the matrix was singular</text>
    </javadoc>
    <declaration type="boolean" name="singular" />
    <javadoc>
      <text>* Constructor for DenseLU</text>
      <param>mNumber of rows</param>
      <param>nNumber of columns</param>
    </javadoc>
    <method type="constructor" name="DenseLU" startLine="56" endLine="59" />
    <javadoc>
      <text>* Creates an LU decomposition of the given matrix</text>
      <param>AMatrix to decompose. Not modified</param>
      <return>The current decomposition</return>
    </javadoc>
    <method type="DenseLU" name="factorize" startLine="68" endLine="70" />
    <javadoc>
      <text>* Creates an LU decomposition of the given matrix</text>
      <param>AMatrix to decompose. Overwritten with the decomposition</param>
      <return>The current decomposition</return>
    </javadoc>
    <method type="DenseLU" name="factor" startLine="79" endLine="94">
      <declaration type="intW" name="info" />
    </method>
    <javadoc>
      <text>* Returns the permutation matrix.</text>
    </javadoc>
    <method type="PermutationMatrix" name="getP" startLine="99" endLine="103">
      <declaration type="PermutationMatrix" name="perm" />
    </method>
    <javadoc>
      <text>* Returns the lower triangular factor</text>
    </javadoc>
    <method type="UnitLowerTriangDenseMatrix" name="getL" startLine="108" endLine="110" />
    <javadoc>
      <text>* Returns the upper triangular factor</text>
    </javadoc>
    <method type="UpperTriangDenseMatrix" name="getU" startLine="115" endLine="117" />
    <javadoc>
      <text>* Returns the decomposition matrix</text>
    </javadoc>
    <method type="DenseMatrix" name="getLU" startLine="122" endLine="124" />
    <javadoc>
      <text>* Computes the reciprocal condition number, using either the infinity norm
 * of the 1 norm.</text>
      <param>AThe matrix this is a decomposition of</param>
      <param>normEither <code>Norm.One</code> or <code>Norm.Infinity</code></param>
      <return>The reciprocal condition number. Values close to unity indicate a
 * well-conditioned system, while numbers close to zero do not.</return>
    </javadoc>
    <method type="double" name="rcond" startLine="137" endLine="155">
      <declaration type="double" name="anorm" />
      <declaration type="int" name="n" />
      <declaration type="intW" name="info" />
      <declaration type="doubleW" name="rcond" />
    </method>
    <javadoc>
      <text>* Returns the row pivots</text>
    </javadoc>
    <method type="int[]" name="getPivots" startLine="160" endLine="162" />
    <javadoc>
      <text>* Checks for singularity</text>
    </javadoc>
    <method type="boolean" name="isSingular" startLine="167" endLine="169" />
    <javadoc>
      <text>* Computes <code>A\B</code>, overwriting <code>B</code></text>
    </javadoc>
    <method type="DenseMatrix" name="solve" startLine="174" endLine="176" />
    <javadoc>
      <text>* Computes <code>A<sup>T</sup>\B</code>, overwriting <code>B</code></text>
    </javadoc>
    <method type="DenseMatrix" name="transSolve" startLine="181" endLine="183" />
    <method type="DenseMatrix" name="solve" startLine="186" endLine="201">
      <declaration type="intW" name="info" />
    </method>
  </class>
</source>
