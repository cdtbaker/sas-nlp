<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix.sparse">
  <import name="java.util.Iterator" />
  <import name="no.uib.cipr.matrix.AbstractVector" />
  <import name="no.uib.cipr.matrix.DenseVector" />
  <import name="no.uib.cipr.matrix.Matrices" />
  <import name="no.uib.cipr.matrix.Vector" />
  <import name="no.uib.cipr.matrix.VectorEntry" />
  <class name="SparseVector" extends="AbstractVector" startLine="31">
    <implements name="ISparseVector" />
    <javadoc>
      <text>* Sparse vector</text>
    </javadoc>
    <javadoc>
      <text>* Data</text>
    </javadoc>
    <declaration type="double[]" name="data" />
    <javadoc>
      <text>* Indices to data</text>
    </javadoc>
    <declaration type="int[]" name="index" />
    <javadoc>
      <text>* How much has been used</text>
    </javadoc>
    <declaration type="int" name="used" />
    <javadoc>
      <text>* Constructor for SparseVector.</text>
      <param>sizeSize of the vector</param>
      <param>nzInitial number of non-zeros</param>
    </javadoc>
    <method type="constructor" name="SparseVector" startLine="59" endLine="63" />
    <javadoc>
      <text>* Constructor for SparseVector, and copies the contents from the supplied
 * vector.</text>
      <param>xVector to copy from</param>
      <param>deepTrue if a deep copy is to be made. If the copy is shallow,
 * <code>x</code> must be a <code>SparseVector</code></param>
    </javadoc>
    <method type="constructor" name="SparseVector" startLine="75" endLine="89">
      <scope startLine="78" endLine="83">
        <declaration type="int" name="nz" />
      </scope>
      <scope startLine="83" endLine="88">
        <declaration type="SparseVector" name="xs" />
      </scope>
    </method>
    <javadoc>
      <text>* Constructor for SparseVector, and copies the contents from the supplied
 * vector. Zero initial pre-allocation</text>
      <param>xVector to copy from. A deep copy is made</param>
    </javadoc>
    <method type="constructor" name="SparseVector" startLine="98" endLine="100" />
    <javadoc>
      <text>* Constructor for SparseVector. Zero initial pre-allocation</text>
      <param>sizeSize of the vector</param>
    </javadoc>
    <method type="constructor" name="SparseVector" startLine="108" endLine="110" />
    <javadoc>
      <text>* Constructor for SparseVector</text>
      <param>sizeSize of the vector</param>
      <param>indexIndices of the vector</param>
      <param>dataEntries of the vector</param>
      <param>deepTrue for a deep copy. For shallow copies, the given indices
 * will be used internally</param>
    </javadoc>
    <method type="constructor" name="SparseVector" startLine="125" endLine="140">
      <scope startLine="131" endLine="135" />
      <scope startLine="135" endLine="139" />
    </method>
    <javadoc>
      <text>* Constructor for SparseVector</text>
      <param>sizeSize of the vector</param>
      <param>indexThe vector indices are copies from this array</param>
      <param>dataThe vector entries are copies from this array</param>
    </javadoc>
    <method type="constructor" name="SparseVector" startLine="152" endLine="154" />
    <method type="void" name="set" startLine="157" endLine="164">
      <declaration type="int" name="i" />
      <comment>TODO: should we check against zero when setting zeros?</comment>
    </method>
    <method type="void" name="add" startLine="167" endLine="172">
      <declaration type="int" name="i" />
    </method>
    <method type="double" name="get" startLine="175" endLine="182">
      <declaration type="int" name="in" />
    </method>
    <javadoc>
      <text>* Tries to find the index. If it is not found, a reallocation is done, and
 * a new index is returned.</text>
    </javadoc>
    <method type="int" name="getIndex" startLine="188" endLine="227">
      <declaration type="int" name="i" />
      <declaration type="int[]" name="newIndex" />
      <declaration type="double[]" name="newData" />
      <scope startLine="201" endLine="211">
        <declaration type="int" name="newLength" />
        <comment>If zero-length, use new length of 1, else double the bandwidth</comment>
        <comment>Copy existing data into new arrays</comment>
      </scope>
      <comment>Try to find column index</comment>
      <comment>Found</comment>
      <comment>Check available memory</comment>
      <comment>All ok, make room for insertion</comment>
      <comment>Put in new structure</comment>
      <comment>Update pointers</comment>
      <comment>Return insertion index</comment>
    </method>
    <method type="SparseVector" name="copy" startLine="230" endLine="232" />
    <method type="SparseVector" name="zero" startLine="235" endLine="239" />
    <method type="SparseVector" name="scale" startLine="242" endLine="253">
      <comment>Quick return if possible</comment>
    </method>
    <method type="double" name="dot" startLine="256" endLine="268">
      <declaration type="double[]" name="yd" />
      <declaration type="double" name="ret" />
    </method>
    <method type="double" name="norm1" startLine="271" endLine="276">
      <declaration type="double" name="sum" />
    </method>
    <method type="double" name="norm2" startLine="279" endLine="284">
      <declaration type="double" name="norm" />
    </method>
    <method type="double" name="norm2_robust" startLine="287" endLine="300">
      <declaration type="double" name="scale" />
      <scope startLine="289" endLine="298">
        <scope startLine="290" endLine="297">
          <declaration type="double" name="absxi" />
          <scope startLine="292" endLine="295" />
        </scope>
      </scope>
    </method>
    <method type="double" name="normInf" startLine="303" endLine="308">
      <declaration type="double" name="max" />
    </method>
    <javadoc>
      <text>* Returns the internal data</text>
    </javadoc>
    <method type="double[]" name="getData" startLine="313" endLine="315" />
    <javadoc>
      <text>* Returns the indices</text>
    </javadoc>
    <method type="int[]" name="getIndex" startLine="320" endLine="331">
      <declaration type="int[]" name="indices" />
      <scope startLine="327" endLine="329" />
      <comment>could run compact, or return subarray</comment>
      <comment>compact();</comment>
    </method>
    <javadoc>
      <text>* Number of entries used in the sparse structure</text>
    </javadoc>
    <method type="int" name="getUsed" startLine="336" endLine="338" />
    <javadoc>
      <text>* Compacts the vector</text>
    </javadoc>
    <method type="void" name="compact" startLine="343" endLine="362">
      <declaration type="int" name="nz" />
      <scope startLine="346" endLine="361">
        <declaration type="int[]" name="newIndex" />
        <declaration type="double[]" name="newData" />
        <scope startLine="352" endLine="356" />
        <comment>Copy only non-zero entries</comment>
      </scope>
      <comment>catches zero entries</comment>
    </method>
    <method type="Iterator<VectorEntry>" name="iterator" startLine="365" endLine="367" />
    <method type="Vector" name="set" startLine="370" endLine="388">
      <declaration type="SparseVector" name="yc" />
      <scope startLine="378" endLine="381" />
    </method>
    <class name="SparseVectorIterator" startLine="390">
      <implements name="Iterator<VectorEntry>" />
      <javadoc>
        <text>* Iterator over a sparse vector</text>
      </javadoc>
      <declaration type="int" name="cursor" />
      <declaration type="SparseVectorEntry" name="entry" />
      <method type="boolean" name="hasNext" startLine="399" endLine="401" />
      <method type="VectorEntry" name="next" startLine="403" endLine="409" />
      <method type="void" name="remove" startLine="411" endLine="413" />
      <class name="SparseVectorEntry" startLine="417">
        <implements name="VectorEntry" />
        <javadoc>
          <text>* Entry of a sparse vector</text>
        </javadoc>
        <declaration type="int" name="cursor" />
        <method type="void" name="update" startLine="424" endLine="426" />
        <method type="int" name="index" startLine="428" endLine="430" />
        <method type="double" name="get" startLine="432" endLine="434" />
        <method type="void" name="set" startLine="436" endLine="438" />
      </class>
    </class>
  </class>
</source>
