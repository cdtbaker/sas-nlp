<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix.sparse">
  <import name="com.github.fommil.netlib.ARPACK" />
  <import name="lombok.extern.java.Log" />
  <import name="no.uib.cipr.matrix.*" />
  <import name="org.netlib.util.doubleW" />
  <import name="org.netlib.util.intW" />
  <import name="java.util.Comparator" />
  <import name="java.util.Map" />
  <import name="java.util.TreeMap" />
  <class name="ArpackSym" startLine="13">
    <javadoc>
      <text>* Uses ARPACK to partially solve symmetric eigensystems
 * (ARPACK is designed to compute a subset of eigenvalues/eigenvectors).</text>
      <author>Sam Halliday</author>
    </javadoc>
    <javadoc>
      <text>* compute the NEV largest (algebraic) eigenvalues.</text>
    </javadoc>
    <javadoc>
      <text>* compute the NEV smallest (algebraic) eigenvalues.</text>
    </javadoc>
    <javadoc>
      <text>* compute the NEV largest (in magnitude) eigenvalues.</text>
    </javadoc>
    <javadoc>
      <text>* compute the NEV smallest (in magnitude) eigenvalues.</text>
    </javadoc>
    <javadoc>
      <text>* compute NEV eigenvalues, half from each end of the spectrum</text>
    </javadoc>
    <declaration type="ARPACK" name="arpack" />
    <declaration type="double" name="TOL" />
    <declaration type="boolean" name="EXPENSIVE_CHECKS" />
    <declaration type="Matrix" name="matrix" />
    <method type="constructor" name="ArpackSym" startLine="54" endLine="63">
      <scope startLine="58" endLine="61" />
    </method>
    <javadoc>
      <text>* Solve the eigensystem for the number of eigenvalues requested.
 * <p>
 * NOTE: The references to the eigenvectors will keep alive a reference to
 * a {@code nev * n} double array, so use the {@code copy()} method to free
 * it up if only a subset is required.</text>
      <param>eigenvalues</param>
      <param>ritz        preference for solutions</param>
      <return>a map from eigenvalues to corresponding eigenvectors.</return>
    </javadoc>
    <method type="Map<Double,DenseVectorSub>" name="solve" startLine="77" endLine="148">
      <declaration type="int" name="n" />
      <declaration type="intW" name="nev" />
      <declaration type="int" name="ncv" />
      <declaration type="String" name="bmat" />
      <declaration type="String" name="which" />
      <declaration type="doubleW" name="tol" />
      <declaration type="intW" name="info" />
      <declaration type="int[]" name="iparam" />
      <declaration type="intW" name="ido" />
      <declaration type="double[]" name="resid" />
      <declaration type="double[]" name="v" />
      <declaration type="double[]" name="workd" />
      <declaration type="double[]" name="workl" />
      <declaration type="int[]" name="ipntr" />
      <declaration type="int" name="i" />
      <scope startLine="110" endLine="117">
        <comment>could be refactored to handle the other types of mode</comment>
      </scope>
      <declaration type="double[]" name="d" />
      <declaration type="boolean[]" name="select" />
      <declaration type="double[]" name="z" />
      <declaration type="int" name="computed" />
      <declaration type="Map<Double,DenseVectorSub>" name="solution" />
      <method type="int" name="compare" startLine="135" endLine="138" />
      <declaration type="DenseVector" name="eigenvectors" />
      <scope startLine="141" endLine="145">
        <declaration type="double" name="eigenvalue" />
        <declaration type="DenseVectorSub" name="eigenvector" />
      </scope>
      <comment>used for initial residual (if info != 0)</comment>
      <comment>and eventually the output residual</comment>
      <comment>Lanczos basis vectors</comment>
      <comment>Arnoldi reverse communication</comment>
      <comment>private work array</comment>
      <comment>highest first</comment>
    </method>
    <method type="void" name="av" startLine="150" endLine="155">
      <declaration type="DenseVector" name="w" />
      <declaration type="Vector" name="x" />
      <declaration type="Vector" name="y" />
    </method>
  </class>
</source>
