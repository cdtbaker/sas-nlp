<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix.sparse">
  <import name="no.uib.cipr.matrix.DenseMatrix" />
  <import name="no.uib.cipr.matrix.DenseVector" />
  <import name="no.uib.cipr.matrix.GivensRotation" />
  <import name="no.uib.cipr.matrix.Matrix" />
  <import name="no.uib.cipr.matrix.UpperTriangDenseMatrix" />
  <import name="no.uib.cipr.matrix.Vector" />
  <import name="no.uib.cipr.matrix.Vector.Norm" />
  <class name="GMRES" extends="AbstractIterativeSolver" startLine="34">
    <javadoc>
      <text>* GMRES solver. GMRES solves the unsymmetric linear system <code>Ax = b</code>
 * using the Generalized Minimum Residual method. The GMRES iteration is
 * restarted after a given number of iterations. By default it is restarted
 * after 30 iterations.</text>
      <author>Templates</author>
    </javadoc>
    <javadoc>
      <text>* After this many iterations, the GMRES will be restarted.</text>
    </javadoc>
    <declaration type="int" name="restart" />
    <javadoc>
      <text>* Vectors for use in the iterative solution process</text>
    </javadoc>
    <declaration type="Vector" name="w" />
    <javadoc>
      <text>* Vectors spanning the subspace</text>
    </javadoc>
    <declaration type="Vector[]" name="v" />
    <javadoc>
      <text>* Restart vector</text>
    </javadoc>
    <declaration type="DenseVector" name="s" />
    <javadoc>
      <text>* Hessenberg matrix</text>
    </javadoc>
    <declaration type="DenseMatrix" name="H" />
    <javadoc>
      <text>* Givens rotations for the QR factorization</text>
    </javadoc>
    <declaration type="GivensRotation[]" name="rotation" />
    <javadoc>
      <text>* Constructor for GMRES. Uses the given vector as template for creating
 * scratch vectors. Typically, the solution or the right hand side vector
 * can be passed, and the template is not modified. The iteration is
 * restarted every 30 iterations</text>
      <param>templateVector to use as template for the work vectors needed in the
 * solution process</param>
    </javadoc>
    <method type="constructor" name="GMRES" startLine="84" endLine="86" />
    <javadoc>
      <text>* Constructor for GMRES. Uses the given vector as template for creating
 * scratch vectors. Typically, the solution or the right hand side vector
 * can be passed, and the template is not modified</text>
      <param>templateVector to use as template for the work vectors needed in the
 * solution process</param>
      <param>restartGMRES iteration is restarted after this number of iterations</param>
    </javadoc>
    <method type="constructor" name="GMRES" startLine="99" endLine="104" />
    <javadoc>
      <text>* Sets the restart parameter</text>
      <param>restartGMRES iteration is restarted after this number of iterations</param>
    </javadoc>
    <method type="void" name="setRestart" startLine="112" endLine="125" />
    <method type="Vector" name="solve" startLine="128" endLine="176">
      <declaration type="double" name="normr" />
      <scope startLine="137" endLine="173">
        <declaration type="int" name="i" />
        <scope startLine="145" endLine="163">
          <scope startLine="149" endLine="152" />
        </scope>
        <comment>Inner iteration</comment>
        <comment>QR factorization of H using Givens rotations</comment>
        <comment>Update solution in current subspace</comment>
      </scope>
      <comment>Outer iteration</comment>
    </method>
  </class>
</source>
