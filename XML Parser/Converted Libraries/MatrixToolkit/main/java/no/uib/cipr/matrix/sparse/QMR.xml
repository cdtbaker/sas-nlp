<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix.sparse">
  <import name="no.uib.cipr.matrix.Matrix" />
  <import name="no.uib.cipr.matrix.NotConvergedException" />
  <import name="no.uib.cipr.matrix.Vector" />
  <import name="no.uib.cipr.matrix.Vector.Norm" />
  <class name="QMR" extends="AbstractIterativeSolver" startLine="31">
    <javadoc>
      <text>* Quasi-Minimal Residual method. QMR solves the unsymmetric linear system
 * <code>Ax = b</code> using the Quasi-Minimal Residual method. QMR uses two
 * preconditioners, and by default these are the same preconditioner.</text>
      <author>Templates</author>
    </javadoc>
    <javadoc>
      <text>* Left preconditioner</text>
    </javadoc>
    <declaration type="Preconditioner" name="M1" />
    <javadoc>
      <text>* Right preconditioner</text>
    </javadoc>
    <declaration type="Preconditioner" name="M2" />
    <javadoc>
      <text>* Vectors for use in the iterative solution process</text>
    </javadoc>
    <declaration type="Vector" name="r" />
    <javadoc>
      <text>* Constructor for QMR. Uses the given vector as template for creating
 * scratch vectors. Typically, the solution or the right hand side vector
 * can be passed, and the template is not modified</text>
      <param>templateVector to use as template for the work vectors needed in the
 * solution process</param>
    </javadoc>
    <method type="constructor" name="QMR" startLine="65" endLine="82" />
    <javadoc>
      <text>* Constructor for QMR. Uses the given vector as template for creating
 * scratch vectors. Typically, the solution or the right hand side vector
 * can be passed, and the template is not modified. Allows setting different
 * right and left preconditioners</text>
      <param>templateVector to use as template for the work vectors needed in the
 * solution process</param>
      <param>M1Left preconditioner</param>
      <param>M2Right preconditioner</param>
    </javadoc>
    <method type="constructor" name="QMR" startLine="98" endLine="115" />
    <method type="Vector" name="solve" startLine="118" endLine="213">
      <declaration type="double" name="rho" />
      <scope startLine="133" endLine="210">
        <scope startLine="157" endLine="160" />
        <scope startLine="160" endLine="163" />
        <scope startLine="199" endLine="202" />
        <scope startLine="202" endLine="206">
          <declaration type="double" name="val" />
        </scope>
      </scope>
    </method>
    <method type="void" name="setPreconditioner" startLine="216" endLine="220" />
  </class>
</source>
