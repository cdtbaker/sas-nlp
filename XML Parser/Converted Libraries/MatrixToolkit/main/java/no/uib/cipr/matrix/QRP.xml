<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix">
  <import name="com.github.fommil.netlib.LAPACK" />
  <import name="org.netlib.util.intW" />
  <class name="QRP" startLine="25">
    <javadoc>
      <text>* Computes QR decompositions with column pivoting:{@code A*P = Q*R} where{@code A(m,n)}, {@code Q(m,m)}, and {@code R(m,n)}, more generally:{@code A*P = [Q1 Q2] * [R11, R12; 0 R22]} and {@code R22} elements are
 * negligible.</text>
    </javadoc>
    <javadoc>
      <text>* Pivoting vector</text>
    </javadoc>
    <declaration type="int" name="jpvt" />
    <javadoc>
      <text>* Scales for the reflectors</text>
    </javadoc>
    <declaration type="double[]" name="tau" />
    <javadoc>
      <text>* Factorisation sizes</text>
    </javadoc>
    <declaration type="int" name="m" />
    <javadoc>
      <text>* The factored matrix rank</text>
    </javadoc>
    <declaration type="int" name="rank" />
    <javadoc>
      <text>* Work array</text>
    </javadoc>
    <declaration type="double[]" name="work" />
    <javadoc>
      <text>* The factored matrix</text>
    </javadoc>
    <declaration type="DenseMatrix" name="Afact" />
    <javadoc>
      <text>* The orthogonal matrix</text>
    </javadoc>
    <declaration type="DenseMatrix" name="Q" />
    <javadoc>
      <text>* The general upper triangular matrix.</text>
    </javadoc>
    <declaration type="DenseMatrix" name="R" />
    <javadoc>
      <text>* Constructs an empty QR decomposition</text>
      <param>m the number of rows.</param>
      <param>n the number of columns.</param>
    </javadoc>
    <method type="constructor" name="QRP" startLine="73" endLine="101">
      <declaration type="int" name="lwork1" />
      <declaration type="intW" name="info" />
      <declaration type="double[]" name="dummy" />
      <declaration type="double[]" name="ret" />
      <declaration type="LAPACK" name="lapack" />
      <comment>Query optimal workspace. First for computing the factorization</comment>
      <comment>Workspace needed for generating an explicit orthogonal matrix</comment>
    </method>
    <javadoc>
      <text>* Convenience method to compute a QR decomposition</text>
      <param>A the matrix to decompose (not modified)</param>
      <return>Newly allocated decomposition</return>
    </javadoc>
    <method type="QRP" name="factorize" startLine="109" endLine="111" />
    <javadoc>
      <text>* Executes a QR factorization for the given matrix.</text>
      <param>A the matrix to be factored (not modified)</param>
      <return>the factorization object</return>
    </javadoc>
    <method type="QRP" name="factor" startLine="119" endLine="181">
      <scope startLine="127" endLine="129" />
      <declaration type="intW" name="info" />
      <declaration type="LAPACK" name="lapack" />
      <scope startLine="147" endLine="151">
        <scope startLine="148" endLine="150" />
      </scope>
      <declaration type="double" name="EPS" />
      <scope startLine="157" endLine="160" />
      <scope startLine="167" endLine="170" />
      <scope startLine="176" endLine="178" />
      <comment>copy A values in Afact</comment>
      <comment>Calculate factorisation</comment>
      <comment>Get R from Afact</comment>
      <comment>Calculate the rank based on a precision EPS</comment>
      <comment>Explicit the orthogonal matrix</comment>
      <comment>Adjust the permutation to zero offset</comment>
    </method>
    <javadoc>
      <text>* Returns the upper triangular factor</text>
    </javadoc>
    <method type="DenseMatrix" name="getR" startLine="186" endLine="188" />
    <javadoc>
      <text>* Returns the orthogonal matrix</text>
    </javadoc>
    <method type="DenseMatrix" name="getQ" startLine="193" endLine="195" />
    <javadoc>
      <text>* Returns the column pivoting vector.
 * This function is cheaper than {@link #getP()}.</text>
    </javadoc>
    <method type="int[]" name="getPVector" startLine="201" endLine="203" />
    <javadoc>
      <text>* Returns the column pivoting matrix.
 * This function allocates a new Matrix to be returned,
 * a more cheap option is tu use {@link #getPVector()}.</text>
    </javadoc>
    <method type="Matrix" name="getP" startLine="210" endLine="216">
      <declaration type="Matrix" name="P" />
      <scope startLine="212" endLine="214" />
    </method>
    <javadoc>
      <text>* Returns the rank of the factored matrix</text>
    </javadoc>
    <method type="int" name="getRank" startLine="221" endLine="223" />
  </class>
</source>
