<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix.sparse">
  <import name="no.uib.cipr.matrix.DenseVector" />
  <import name="no.uib.cipr.matrix.Matrix" />
  <import name="no.uib.cipr.matrix.Vector" />
  <class name="SSOR" startLine="27">
    <implements name="Preconditioner" />
    <javadoc>
      <text>* SSOR preconditioner. Uses symmetrical sucessive overrelaxation as a
 * preconditioner. Meant for symmetrical, positive definite matrices. For best
 * performance, omega must be carefully chosen (between 0 and 2).</text>
    </javadoc>
    <javadoc>
      <text>* Overrelaxation parameter for the forward sweep</text>
    </javadoc>
    <declaration type="double" name="omegaF" />
    <javadoc>
      <text>* Overrelaxation parameter for the backwards sweep</text>
    </javadoc>
    <declaration type="double" name="omegaR" />
    <javadoc>
      <text>* Holds a copy of the matrix A in the compressed row format</text>
    </javadoc>
    <declaration type="CompRowMatrix" name="F" />
    <javadoc>
      <text>* Indices to the diagonal entries of the matrix</text>
    </javadoc>
    <declaration type="int[]" name="diagind" />
    <javadoc>
      <text>* Temporary vector for holding the half-step state</text>
    </javadoc>
    <declaration type="double[]" name="xx" />
    <javadoc>
      <text>* True if the reverse (backward) sweep is to be done. Without this, the
 * method is SOR instead of SSOR</text>
    </javadoc>
    <declaration type="boolean" name="reverse" />
    <javadoc>
      <text>* Constructor for SSOR</text>
      <param>FMatrix to use internally. It will not be modified, thus the
 * system matrix may be passed</param>
      <param>reverseTrue to perform a reverse sweep as well as the forward sweep.
 * If false, this preconditioner becomes the SOR method instead</param>
      <param>omegaFOverrelaxation parameter for the forward sweep. Between 0 and
 * 2.</param>
      <param>omegaROverrelaxation parameter for the backwards sweep. Between 0
 * and 2.</param>
    </javadoc>
    <method type="constructor" name="SSOR" startLine="81" endLine="93">
      <declaration type="int" name="n" />
    </method>
    <javadoc>
      <text>* Constructor for SSOR. Uses <code>omega=1</code> with a backwards sweep</text>
      <param>FMatrix to use internally. It will not be modified, thus the
 * system matrix may be passed</param>
    </javadoc>
    <method type="constructor" name="SSOR" startLine="102" endLine="104" />
    <javadoc>
      <text>* Sets the overrelaxation parameters</text>
      <param>omegaFOverrelaxation parameter for the forward sweep. Between 0 and
 * 2.</param>
      <param>omegaROverrelaxation parameter for the backwards sweep. Between 0
 * and 2.</param>
    </javadoc>
    <method type="void" name="setOmega" startLine="116" endLine="124" />
    <method type="void" name="setMatrix" startLine="126" endLine="141">
      <declaration type="int" name="n" />
      <declaration type="int[]" name="rowptr" />
      <declaration type="int[]" name="colind" />
      <scope startLine="135" endLine="140" />
      <comment>Find the indices to the diagonal entries</comment>
    </method>
    <method type="Vector" name="apply" startLine="143" endLine="194">
      <declaration type="int[]" name="rowptr" />
      <declaration type="int[]" name="colind" />
      <declaration type="double[]" name="data" />
      <declaration type="double[]" name="bd" />
      <declaration type="double[]" name="xd" />
      <declaration type="int" name="n" />
      <scope startLine="158" endLine="170">
        <declaration type="double" name="sigma" />
      </scope>
      <scope startLine="173" endLine="176" />
      <scope startLine="179" endLine="191">
        <declaration type="double" name="sigma" />
      </scope>
      <comment>Forward sweep (xd oldest, xx halfiterate)</comment>
      <comment>Stop here if the reverse sweep was not requested</comment>
      <comment>Backward sweep (xx oldest, xd halfiterate)</comment>
    </method>
    <method type="Vector" name="transApply" startLine="196" endLine="199">
      <comment>Assume a symmetric matrix</comment>
    </method>
  </class>
</source>
