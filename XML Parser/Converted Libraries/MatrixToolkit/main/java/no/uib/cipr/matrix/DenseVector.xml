<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix">
  <import name="java.io.IOException" />
  <import name="java.io.Serializable" />
  <import name="java.util.Arrays" />
  <import name="no.uib.cipr.matrix.io.MatrixVectorReader" />
  <import name="no.uib.cipr.matrix.io.VectorInfo" />
  <import name="no.uib.cipr.matrix.io.VectorSize" />
  <import name="no.uib.cipr.matrix.io.VectorInfo.VectorField" />
  <class name="DenseVector" extends="AbstractVector" startLine="32">
    <implements name="Serializable" />
    <javadoc>
      <text>* Dense vector. Stored by a <code>double[]</code> array of the same length as
 * the vector itself.</text>
    </javadoc>
    <javadoc>
      <text>* just the private data</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Vector data</text>
    </javadoc>
    <declaration type="double[]" name="data" />
    <javadoc>
      <text>* Constructor for DenseVector</text>
      <param>rReader to get vector from</param>
    </javadoc>
    <method type="constructor" name="DenseVector" startLine="52" endLine="96">
      <declaration type="VectorInfo" name="info" />
      <declaration type="VectorSize" name="size" />
      <scope startLine="78" endLine="93">
        <declaration type="int" name="nz" />
        <declaration type="int[]" name="index" />
        <declaration type="double[]" name="entry" />
        <comment>Read coordinate data</comment>
        <comment>Shift indices from 1-offset to 0-offset</comment>
        <comment>Store them</comment>
      </scope>
      <comment>Start with a zero-sized vector</comment>
      <comment>Get vector information. Use the header if present, else use a safe</comment>
      <comment>default</comment>
      <comment>Resize the vector to correct size</comment>
      <comment>Check that the vector is in an acceptable format</comment>
      <comment>Read the entries</comment>
      <comment>info.isArray()</comment>
    </method>
    <javadoc>
      <text>* Constructor for DenseVector</text>
      <param>sizeSize of the vector</param>
    </javadoc>
    <method type="constructor" name="DenseVector" startLine="104" endLine="107" />
    <javadoc>
      <text>* Constructor for DenseVector</text>
      <param>xCopies contents from this vector. A deep copy is made</param>
    </javadoc>
    <method type="constructor" name="DenseVector" startLine="115" endLine="117" />
    <javadoc>
      <text>* Constructor for DenseVector</text>
      <param>xCopies contents from this vector</param>
      <param>deepTrue for a deep copy. For a shallow copy, <code>x</code>
 * must be a <code>DenseVector</code></param>
    </javadoc>
    <method type="constructor" name="DenseVector" startLine="128" endLine="136">
      <scope startLine="131" endLine="134" />
    </method>
    <javadoc>
      <text>* Constructor for DenseVector</text>
      <param>xCopies contents from this array</param>
      <param>deepTrue for a deep copy. For a shallow copy, <code>x</code> is
 * aliased with the internal storage</param>
    </javadoc>
    <method type="constructor" name="DenseVector" startLine="147" endLine="154" />
    <javadoc>
      <text>* Constructor for DenseVector</text>
      <param>xCopies contents from this array in a deep copy</param>
    </javadoc>
    <method type="constructor" name="DenseVector" startLine="162" endLine="164" />
    <method type="void" name="set" startLine="167" endLine="170" />
    <method type="void" name="add" startLine="173" endLine="176" />
    <method type="double" name="get" startLine="179" endLine="182" />
    <method type="DenseVector" name="copy" startLine="185" endLine="187" />
    <method type="DenseVector" name="zero" startLine="190" endLine="193" />
    <method type="DenseVector" name="scale" startLine="196" endLine="200" />
    <method type="Vector" name="set" startLine="203" endLine="213">
      <declaration type="double[]" name="yd" />
    </method>
    <method type="Vector" name="set" startLine="216" endLine="231">
      <declaration type="double[]" name="yd" />
    </method>
    <method type="Vector" name="add" startLine="234" endLine="246">
      <declaration type="double[]" name="yd" />
    </method>
    <method type="Vector" name="add" startLine="249" endLine="264">
      <declaration type="double[]" name="yd" />
    </method>
    <method type="double" name="dot" startLine="267" endLine="279">
      <declaration type="double[]" name="yd" />
      <declaration type="double" name="dot" />
    </method>
    <method type="double" name="norm1" startLine="282" endLine="287">
      <declaration type="double" name="sum" />
    </method>
    <method type="double" name="norm2" startLine="290" endLine="295">
      <declaration type="double" name="norm" />
    </method>
    <method type="double" name="norm2_robust" startLine="298" endLine="310">
      <declaration type="double" name="scale" />
      <scope startLine="301" endLine="308">
        <declaration type="double" name="absxi" />
        <scope startLine="303" endLine="306" />
      </scope>
    </method>
    <method type="double" name="normInf" startLine="313" endLine="318">
      <declaration type="double" name="max" />
    </method>
    <javadoc>
      <text>* Returns the internal vector contents. The array indices correspond to the
 * vector indices</text>
    </javadoc>
    <method type="double[]" name="getData" startLine="324" endLine="326" />
  </class>
</source>
