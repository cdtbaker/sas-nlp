<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix">
  <class name="OrthogonalComputer" startLine="23">
    <javadoc>
      <text>* Base class for the orthogonal matrix decompositions (QR, RQ, LQ, and QL)</text>
    </javadoc>
    <javadoc>
      <text>* The orthogonal matrix</text>
    </javadoc>
    <declaration type="DenseMatrix" name="Q" />
    <javadoc>
      <text>* Lower triangular factor. May not be present</text>
    </javadoc>
    <declaration type="LowerTriangDenseMatrix" name="L" />
    <javadoc>
      <text>* Upper triangular factor. May not be present</text>
    </javadoc>
    <declaration type="UpperTriangDenseMatrix" name="R" />
    <javadoc>
      <text>* Factorisation sizes</text>
    </javadoc>
    <declaration type="int" name="m" />
    <javadoc>
      <text>* Work arrays</text>
    </javadoc>
    <declaration type="double[]" name="work" />
    <javadoc>
      <text>* Scales for the reflectors</text>
    </javadoc>
    <declaration type="double[]" name="tau" />
    <javadoc>
      <text>* Constructor for OrthogonalComputer</text>
      <param>mNumber of rows</param>
      <param>nNumber of columns</param>
      <param>upperTrue for storing an upper triangular factor, false for a lower
 * triangular factor</param>
    </javadoc>
    <method type="constructor" name="OrthogonalComputer" startLine="69" endLine="84">
      <scope startLine="77" endLine="80" />
      <scope startLine="80" endLine="83" />
    </method>
    <method name="factor" type="OrthogonalComputer" startLine="86" endLine="94" />
    <javadoc>
      <text>* Computes an orthogonal decomposition</text>
      <param>AMatrix to decompose. Overwritten on exit. Pass a copy to avoid
 * this</param>
      <return>The current decomposition</return>
    </javadoc>
    <javadoc>
      <text>* Returns the orthogonal part of the factorization</text>
    </javadoc>
    <method type="DenseMatrix" name="getQ" startLine="99" endLine="101" />
  </class>
</source>
