<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix">
  <import name="java.util.Arrays" />
  <import name="java.util.Iterator" />
  <import name="com.github.fommil.netlib.LAPACK" />
  <import name="org.netlib.util.intW" />
  <class name="TridiagMatrix" extends="AbstractMatrix" startLine="29">
    <javadoc>
      <text>* Tridiagonal matrix. Stored in three arrays, one of length <code>n</code>
 * for the diagonal, two of length <code>n-1</code> for the superdiagonal and
 * subdiagonal entries.</text>
    </javadoc>
    <javadoc>
      <text>* Diagonal, super-diagonal and sub-diagonal</text>
    </javadoc>
    <declaration type="double[]" name="diag" />
    <javadoc>
      <text>* Size of the matrix</text>
    </javadoc>
    <declaration type="int" name="n" />
    <javadoc>
      <text>* Constructor for TridiagMatrix</text>
      <param>nSize of the matrix. Since the matrix must be square, this
 * equals both the number of rows and columns</param>
    </javadoc>
    <method type="constructor" name="TridiagMatrix" startLine="53" endLine="63" />
    <javadoc>
      <text>* Constructor for TridiagMatrix</text>
      <param>AMatrix to copy from. Only the tridiagonal part is copied</param>
    </javadoc>
    <method type="constructor" name="TridiagMatrix" startLine="71" endLine="73" />
    <javadoc>
      <text>* Constructor for TridiagMatrix</text>
      <param>AMatrix to copy from. Only the tridiagonal part is copied</param>
      <param>deepTrue for a deep copy, else it's shallow. For shallow copies,
 * <code>A</code> must be a <code>TridiagMatrix</code></param>
    </javadoc>
    <method type="constructor" name="TridiagMatrix" startLine="84" endLine="108">
      <scope startLine="94" endLine="102" />
      <scope startLine="102" endLine="107">
        <declaration type="TridiagMatrix" name="B" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the diagonal entries. Length equal <code>n</code></text>
    </javadoc>
    <method type="double[]" name="getDiagonal" startLine="113" endLine="115" />
    <javadoc>
      <text>* Returns the sub diagonal entries. Length equal <code>n-1</code></text>
    </javadoc>
    <method type="double[]" name="getSubDiagonal" startLine="120" endLine="122" />
    <javadoc>
      <text>* Returns the super diagonal entries. Length equal <code>n-1</code></text>
    </javadoc>
    <method type="double[]" name="getSuperDiagonal" startLine="127" endLine="129" />
    <method type="void" name="add" startLine="132" endLine="143" />
    <method type="double" name="get" startLine="146" endLine="156" />
    <method type="void" name="set" startLine="159" endLine="170" />
    <method type="TridiagMatrix" name="copy" startLine="173" endLine="175" />
    <method type="TridiagMatrix" name="zero" startLine="178" endLine="183" />
    <method type="Matrix" name="solve" startLine="186" endLine="206">
      <declaration type="double[]" name="Xd" />
      <declaration type="intW" name="info" />
    </method>
    <method type="Vector" name="solve" startLine="209" endLine="213">
      <declaration type="DenseMatrix" name="B" />
    </method>
    <method type="Matrix" name="transpose" startLine="216" endLine="221">
      <declaration type="double[]" name="otherDiag" />
    </method>
    <method type="Iterator<MatrixEntry>" name="iterator" startLine="224" endLine="226" />
    <class name="TridiagMatrixIterator" extends="RefMatrixIterator" startLine="228">
      <javadoc>
        <text>* Iterator over a tridiagonal matrix</text>
      </javadoc>
      <javadoc>
        <text>* Current band, starting with the main diagonal</text>
      </javadoc>
      <declaration type="double[]" name="band" />
      <javadoc>
        <text>* Band index</text>
      </javadoc>
      <declaration type="int" name="bandIndex" />
      <javadoc>
        <text>* Which band in use (0 for main, 1 for sub, 2 for super)</text>
      </javadoc>
      <declaration type="int" name="whichBand" />
      <method type="boolean" name="hasNext" startLine="249" endLine="251" />
      <method type="MatrixEntry" name="next" startLine="254" endLine="289">
        <scope startLine="260" endLine="274">
          <comment>Move to the next band</comment>
          <comment>If the off-diagonals are zero-sized, we are done</comment>
          <comment>This happens if the matrix is 1*1</comment>
        </scope>
        <comment>Move in the band</comment>
        <comment>Set row index</comment>
        <comment>Set column index</comment>
      </method>
    </class>
  </class>
</source>
