<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix.sparse">
  <import name="java.io.IOException" />
  <import name="java.util.Arrays" />
  <import name="java.util.Iterator" />
  <import name="java.util.Set" />
  <import name="java.util.TreeSet" />
  <import name="no.uib.cipr.matrix.AbstractMatrix" />
  <import name="no.uib.cipr.matrix.DenseVector" />
  <import name="no.uib.cipr.matrix.Matrix" />
  <import name="no.uib.cipr.matrix.MatrixEntry" />
  <import name="no.uib.cipr.matrix.Vector" />
  <import name="no.uib.cipr.matrix.io.MatrixInfo" />
  <import name="no.uib.cipr.matrix.io.MatrixSize" />
  <import name="no.uib.cipr.matrix.io.MatrixVectorReader" />
  <class name="CompDiagMatrix" extends="AbstractMatrix" startLine="38">
    <javadoc>
      <text>* Compressed diagonal storage (CDS) matrix</text>
    </javadoc>
    <javadoc>
      <text>* The diagonals</text>
    </javadoc>
    <declaration type="double[][]" name="diag" />
    <javadoc>
      <text>* Indices to the start of the diagonal, relative to the main diagonal.
 * Positive means the number of diagonals shifted up, while negative is the
 * number of diagonals shifted down</text>
    </javadoc>
    <declaration type="int[]" name="ind" />
    <javadoc>
      <text>* Constructor for CompDiagMatrix</text>
      <param>rReader to get sparse matrix from</param>
    </javadoc>
    <method type="constructor" name="CompDiagMatrix" startLine="61" endLine="137">
      <declaration type="MatrixInfo" name="info" />
      <declaration type="MatrixSize" name="size" />
      <declaration type="int[]" name="row" />
      <declaration type="double[]" name="entry" />
      <declaration type="Set<Integer>" name="diags" />
      <declaration type="int[]" name="ind" />
      <scope startLine="112" endLine="117">
        <declaration type="Integer[]" name="ints" />
      </scope>
      <scope startLine="128" endLine="131" />
      <scope startLine="133" endLine="136" />
      <comment>Start with a zero-sized matrix</comment>
      <comment>Get matrix information. Use the header if present, else use a safe</comment>
      <comment>default</comment>
      <comment>Resize the matrix to correct size</comment>
      <comment>Check that the matrix is in an acceptable format</comment>
      <comment>Start reading entries</comment>
      <comment>Shift the indices from 1 based to 0 based</comment>
      <comment>Find all the diagonals so that we can preallocate</comment>
      <comment>Convert into an integer array</comment>
      <comment>Create the structure with preallocation</comment>
      <comment>Insert the entries</comment>
      <comment>Put in missing entries from symmetry or skew symmetry</comment>
    </method>
    <javadoc>
      <text>* Creates a new sparse matrix with the given diagonals preallocated. A
 * negative index is a subdiagonal, positive is superdiagonal</text>
    </javadoc>
    <method type="constructor" name="CompDiagMatrix" startLine="143" endLine="146" />
    <method type="void" name="construct" startLine="148" endLine="161">
      <declaration type="int[]" name="sortedDiagonal" />
      <scope startLine="157" endLine="160" />
      <comment>Keep the diagonal indices sorted</comment>
    </method>
    <javadoc>
      <text>* Creates a new sparse matrix without preallocation</text>
    </javadoc>
    <method type="constructor" name="CompDiagMatrix" startLine="166" endLine="168" />
    <javadoc>
      <text>* Creates a new sparse matrix copied from the given matrix. Can take a deep
 * copy or a shallow copy. For the latter, the supplied matrix must be a
 * CompDiagMatrix. Preallocation is also possible, but is only used for the
 * deep copy.</text>
    </javadoc>
    <method type="constructor" name="CompDiagMatrix" startLine="176" endLine="187">
      <scope startLine="179" endLine="182" />
      <scope startLine="182" endLine="186">
        <declaration type="CompDiagMatrix" name="Ac" />
      </scope>
    </method>
    <javadoc>
      <text>* Creates a new sparse matrix copied from the given matrix. Takes a deep
 * copy, with possibility to specify preallocation</text>
    </javadoc>
    <method type="constructor" name="CompDiagMatrix" startLine="193" endLine="195" />
    <javadoc>
      <text>* Creates a new sparse matrix copied from the given matrix. Can take a deep
 * copy or a shallow copy. For the latter, the supplied matrix must be a
 * CompDiagMatrix. No preallocation is done</text>
    </javadoc>
    <method type="constructor" name="CompDiagMatrix" startLine="202" endLine="204" />
    <javadoc>
      <text>* Creates a new sparse matrix copied from the given matrix. Takes a deep
 * copy without preallocation</text>
    </javadoc>
    <method type="constructor" name="CompDiagMatrix" startLine="210" endLine="212" />
    <javadoc>
      <text>* Returns the internal diagonal storage</text>
    </javadoc>
    <method type="double[][]" name="getDiagonals" startLine="217" endLine="219" />
    <javadoc>
      <text>* Returns the diagonal offsets</text>
    </javadoc>
    <method type="int[]" name="getIndex" startLine="224" endLine="226" />
    <method type="void" name="add" startLine="229" endLine="235">
      <declaration type="int" name="diagonal" />
    </method>
    <method type="double" name="get" startLine="238" endLine="247">
      <declaration type="int" name="diagonal" />
    </method>
    <method type="void" name="set" startLine="250" endLine="256">
      <declaration type="int" name="diagonal" />
    </method>
    <method type="int" name="getDiagonal" startLine="258" endLine="260" />
    <method type="int" name="getOnDiagIndex" startLine="262" endLine="264" />
    <method type="int" name="getCompDiagIndex" startLine="266" endLine="299">
      <declaration type="int" name="diagonal" />
      <declaration type="int" name="index" />
      <declaration type="int" name="size" />
      <declaration type="double[]" name="newDiag" />
      <declaration type="double[][][]" name="newDiagArray" />
      <declaration type="int[]" name="newInd" />
      <comment>Check if the diagonal is already present</comment>
      <comment>Need to allocate new diagonal. Get the diagonal size</comment>
      <comment>Allocate new primary structure</comment>
      <comment>Move data from the old into the new structure</comment>
      <comment>Update pointers</comment>
    </method>
    <javadoc>
      <text>* Finds the size of the requested diagonal to be allocated</text>
    </javadoc>
    <method type="int" name="getDiagSize" startLine="304" endLine="309" />
    <method type="Matrix" name="copy" startLine="312" endLine="314" />
    <method type="Matrix" name="zero" startLine="317" endLine="321" />
    <method type="Vector" name="mult" startLine="324" endLine="344">
      <declaration type="double[]" name="xd" />
      <declaration type="double[]" name="yd" />
      <scope startLine="335" endLine="341">
        <declaration type="int" name="row" />
        <declaration type="int" name="column" />
        <declaration type="double[]" name="locDiag" />
      </scope>
    </method>
    <method type="Vector" name="multAdd" startLine="347" endLine="365">
      <declaration type="double[]" name="xd" />
      <declaration type="double[]" name="yd" />
      <scope startLine="356" endLine="362">
        <declaration type="int" name="row" />
        <declaration type="int" name="column" />
        <declaration type="double[]" name="locDiag" />
      </scope>
    </method>
    <method type="Vector" name="transMultAdd" startLine="368" endLine="386">
      <declaration type="double[]" name="xd" />
      <declaration type="double[]" name="yd" />
      <scope startLine="377" endLine="383">
        <declaration type="int" name="row" />
        <declaration type="int" name="column" />
        <declaration type="double[]" name="locDiag" />
      </scope>
    </method>
    <method type="Iterator<MatrixEntry>" name="iterator" startLine="389" endLine="391" />
    <class name="CompDiagMatrixIterator" startLine="393">
      <implements name="Iterator<MatrixEntry>" />
      <javadoc>
        <text>* Iterator over a compressed diagonal matrix</text>
      </javadoc>
      <declaration type="int" name="diagonal" />
      <declaration type="CompDiagMatrixEntry" name="entry" />
      <method type="boolean" name="hasNext" startLine="402" endLine="404" />
      <method type="MatrixEntry" name="next" startLine="406" endLine="420">
        <scope startLine="414" endLine="417" />
        <comment>Move along current diagonal</comment>
        <comment>Move to the next diagonal</comment>
      </method>
      <method type="void" name="remove" startLine="422" endLine="424" />
      <class name="CompDiagMatrixEntry" startLine="428">
        <implements name="MatrixEntry" />
        <javadoc>
          <text>* Entry of a compressed diagonal matrix</text>
        </javadoc>
        <declaration type="int" name="diagonal" />
        <method type="void" name="update" startLine="435" endLine="438" />
        <method type="int" name="row" startLine="440" endLine="442" />
        <method type="int" name="column" startLine="444" endLine="446" />
        <method type="double" name="get" startLine="448" endLine="450" />
        <method type="void" name="set" startLine="452" endLine="454" />
      </class>
    </class>
  </class>
</source>
