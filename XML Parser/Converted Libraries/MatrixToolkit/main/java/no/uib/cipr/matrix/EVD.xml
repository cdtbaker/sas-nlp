<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix">
  <import name="com.github.fommil.netlib.LAPACK" />
  <import name="org.netlib.util.intW" />
  <class name="EVD" startLine="26">
    <javadoc>
      <text>* Computes eigenvalue decompositions of general matrices</text>
    </javadoc>
    <javadoc>
      <text>* Double work array</text>
    </javadoc>
    <declaration type="double[]" name="work" />
    <javadoc>
      <text>* Size of the matrix</text>
    </javadoc>
    <declaration type="int" name="n" />
    <javadoc>
      <text>* Job to do on the left and right eigenvectors</text>
    </javadoc>
    <declaration type="JobEig" name="jobLeft" />
    <javadoc>
      <text>* Contains the real and imaginary parts of the eigenvalues</text>
    </javadoc>
    <declaration type="double[]" name="Wr" />
    <javadoc>
      <text>* Contains the left and the right eigenvectors</text>
    </javadoc>
    <declaration type="DenseMatrix" name="Vl" />
    <javadoc>
      <text>* Creates an empty eigenvalue decomposition which will compute all the
 * eigenvalues and eigenvectors (left and right)</text>
      <param>nSize of the matrix</param>
    </javadoc>
    <method type="constructor" name="EVD" startLine="63" endLine="65" />
    <javadoc>
      <text>* Creates an empty eigenvalue decomposition</text>
      <param>nSize of the matrix</param>
      <param>leftWhether to compute the left eigenvectors or not</param>
      <param>rightWhether to compute the right eigenvectors or not</param>
    </javadoc>
    <method type="constructor" name="EVD" startLine="77" endLine="115">
      <declaration type="double[]" name="worksize" />
      <declaration type="intW" name="info" />
      <declaration type="int" name="lwork" />
      <scope startLine="105" endLine="110" />
      <comment>Allocate space for the decomposition</comment>
      <comment>Find the needed workspace</comment>
      <comment>Allocate workspace</comment>
    </method>
    <javadoc>
      <text>* Convenience method for computing the complete eigenvalue decomposition of
 * the given matrix</text>
      <param>AMatrix to factorize. Not modified</param>
      <return>Newly allocated decomposition</return>
      <throws>NotConvergedException</throws>
    </javadoc>
    <method type="EVD" name="factorize" startLine="126" endLine="128" />
    <javadoc>
      <text>* Computes the eigenvalue decomposition of the given matrix</text>
      <param>AMatrix to factorize. Overwritten on return</param>
      <return>The current decomposition</return>
      <throws>NotConvergedException</throws>
    </javadoc>
    <method type="EVD" name="factor" startLine="138" endLine="157">
      <declaration type="intW" name="info" />
    </method>
    <javadoc>
      <text>* Gets the left eigenvectors, if available</text>
    </javadoc>
    <method type="DenseMatrix" name="getLeftEigenvectors" startLine="162" endLine="164" />
    <javadoc>
      <text>* Gets the right eigenvectors, if available</text>
    </javadoc>
    <method type="DenseMatrix" name="getRightEigenvectors" startLine="169" endLine="171" />
    <javadoc>
      <text>* Gets the real part of the eigenvalues</text>
    </javadoc>
    <method type="double[]" name="getRealEigenvalues" startLine="176" endLine="178" />
    <javadoc>
      <text>* Gets the imaginary part of the eigenvalues</text>
    </javadoc>
    <method type="double[]" name="getImaginaryEigenvalues" startLine="183" endLine="185" />
    <javadoc>
      <text>* True if the left eigenvectors have been computed</text>
    </javadoc>
    <method type="boolean" name="hasLeftEigenvectors" startLine="190" endLine="192" />
    <javadoc>
      <text>* True if the right eigenvectors have been computed</text>
    </javadoc>
    <method type="boolean" name="hasRightEigenvectors" startLine="197" endLine="199" />
  </class>
</source>
