<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix.sparse">
  <import name="java.util.Iterator" />
  <import name="java.util.List" />
  <class name="SuperIterator" startLine="26">
    <implements name="Iterator<SuperIterator.SuperIteratorEntry>" />
    <javadoc>
      <text>* An iterator over an array of iterable objects</text>
    </javadoc>
    <declaration type="List<T>" name="iterable" />
    <javadoc>
      <text>* Two iterators. We need the "next" iterator so that hasNext works properly
 * from one iterable to the next. Using a single iterator won't do</text>
    </javadoc>
    <declaration type="Iterator<E>" name="current" />
    <declaration type="int" name="currentIndex" />
    <javadoc>
      <text>* Recyled entry returned from next()</text>
    </javadoc>
    <declaration type="SuperIteratorEntry<E>" name="entry" />
    <javadoc>
      <text>* Constructor for SuperIterator</text>
      <param>iterableIterable objects to iterate over</param>
    </javadoc>
    <method type="constructor" name="SuperIterator" startLine="53" endLine="75">
      <scope startLine="58" endLine="61" />
      <scope startLine="61" endLine="74">
        <comment>This moves the next pointer to a non-empty iterable</comment>
        <comment>Then we move the current pointer in the same way</comment>
        <comment>Finally, move the next one step ahead if possible</comment>
      </scope>
      <comment>Try to be somewhat fault tolerant</comment>
    </method>
    <method type="void" name="moveNext" startLine="77" endLine="80" />
    <method type="void" name="moveCurrent" startLine="82" endLine="85" />
    <method type="boolean" name="hasNext" startLine="87" endLine="89" />
    <method type="SuperIteratorEntry<E>" name="next" startLine="91" endLine="104">
      <comment>A wrapped object containing the relevant index and data</comment>
      <comment>Move current if necessary</comment>
      <comment>Move the next pointer</comment>
    </method>
    <method type="void" name="remove" startLine="106" endLine="108" />
    <class name="DummyIterator" startLine="110">
      <implements name="Iterator<E>" />
      <javadoc>
        <text>* Dummy iterator, for degenerate cases</text>
      </javadoc>
      <method type="boolean" name="hasNext" startLine="115" endLine="117" />
      <method type="E" name="next" startLine="119" endLine="121" />
      <method type="void" name="remove" startLine="123" endLine="125" />
      <class name="SuperIteratorEntry" startLine="128">
        <javadoc>
          <text>* Entry returned from this superiterator</text>
        </javadoc>
        <javadoc>
          <text>* Index of the iterator which returned this</text>
        </javadoc>
        <declaration type="int" name="i" />
        <javadoc>
          <text>* Object returned</text>
        </javadoc>
        <declaration type="F" name="o" />
        <method type="void" name="update" startLine="143" endLine="146" />
        <method type="int" name="index" startLine="148" endLine="150" />
        <method type="F" name="get" startLine="152" endLine="154" />
      </class>
    </class>
  </class>
</source>
