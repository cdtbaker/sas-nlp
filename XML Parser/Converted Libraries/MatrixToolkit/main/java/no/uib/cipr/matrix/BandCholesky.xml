<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix">
  <import name="no.uib.cipr.matrix.Matrix.Norm" />
  <import name="com.github.fommil.netlib.LAPACK" />
  <import name="org.netlib.util.doubleW" />
  <import name="org.netlib.util.intW" />
  <class name="BandCholesky" startLine="29">
    <javadoc>
      <text>* Banded Cholesky decomposition</text>
    </javadoc>
    <javadoc>
      <text>* Matrix dimension</text>
    </javadoc>
    <declaration type="int" name="n" />
    <javadoc>
      <text>* Number of bands in the matrix A</text>
    </javadoc>
    <declaration type="int" name="kd" />
    <javadoc>
      <text>* Cholesky decomposition of a lower matrix</text>
    </javadoc>
    <declaration type="LowerTriangBandMatrix" name="Cl" />
    <javadoc>
      <text>* Cholesky decomposition of an upper matrix</text>
    </javadoc>
    <declaration type="UpperTriangBandMatrix" name="Cu" />
    <javadoc>
      <text>* If the matrix is SPD or not</text>
    </javadoc>
    <declaration type="boolean" name="notspd" />
    <javadoc>
      <text>* True for upper part, else false</text>
    </javadoc>
    <declaration type="boolean" name="upper" />
    <javadoc>
      <text>* Constructor for BandCholesky</text>
      <param>nMatrix size</param>
      <param>kdNumber of matrix bands</param>
      <param>upperTrue for decomposing an upper symmetrical matrix, false for a
 * lower symmetrical matrix</param>
    </javadoc>
    <method type="constructor" name="BandCholesky" startLine="75" endLine="84" />
    <javadoc>
      <text>* Creates a Cholesky decomposition of the given matrix</text>
      <param>AMatrix to decompose. Not modified</param>
      <return>A Cholesky decomposition of the matrix</return>
    </javadoc>
    <method type="BandCholesky" name="factorize" startLine="93" endLine="95" />
    <javadoc>
      <text>* Creates a Cholesky decomposition of the given matrix</text>
      <param>AMatrix to decompose. Not modified</param>
      <return>A Cholesky decomposition of the matrix</return>
    </javadoc>
    <method type="BandCholesky" name="factorize" startLine="104" endLine="106" />
    <javadoc>
      <text>* Creates a Cholesky decomposition of the given matrix</text>
      <param>AMatrix to decompose. Overwritten on return</param>
      <return>The current decomposition</return>
    </javadoc>
    <method type="BandCholesky" name="factor" startLine="115" endLine="121" />
    <javadoc>
      <text>* Creates a Cholesky decomposition of the given matrix</text>
      <param>AMatrix to decompose. Overwritten on return</param>
      <return>The current decomposition</return>
    </javadoc>
    <method type="BandCholesky" name="factor" startLine="130" endLine="136" />
    <method type="BandCholesky" name="decompose" startLine="138" endLine="167">
      <declaration type="intW" name="info" />
    </method>
    <javadoc>
      <text>* Returns the decomposition matrix. Only valid for decomposition of a lower
 * SPD matrix</text>
    </javadoc>
    <method type="LowerTriangBandMatrix" name="getL" startLine="173" endLine="178" />
    <javadoc>
      <text>* Returns the decomposition matrix. Only valid for decomposition of a upper
 * SPD matrix</text>
    </javadoc>
    <method type="UpperTriangBandMatrix" name="getU" startLine="184" endLine="189" />
    <javadoc>
      <text>* Returns true if the matrix decomposed is symmetrical, positive definite</text>
    </javadoc>
    <method type="boolean" name="isSPD" startLine="194" endLine="196" />
    <javadoc>
      <text>* Computes the reciprocal condition number</text>
      <param>AThe matrix this is a decomposition of</param>
      <return>The reciprocal condition number. Values close to unity indicate a
 * well-conditioned system, while numbers close to zero do not.</return>
    </javadoc>
    <method type="double" name="rcond" startLine="206" endLine="230">
      <declaration type="double" name="anorm" />
      <declaration type="double[]" name="work" />
      <declaration type="int[]" name="lwork" />
      <declaration type="intW" name="info" />
      <declaration type="doubleW" name="rcond" />
    </method>
    <javadoc>
      <text>* Computes <code>A\B</code>, overwriting <code>B</code></text>
    </javadoc>
    <method type="DenseMatrix" name="solve" startLine="235" endLine="253">
      <declaration type="intW" name="info" />
    </method>
  </class>
</source>
