<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix">
  <import name="com.github.fommil.netlib.LAPACK" />
  <import name="org.netlib.util.intW" />
  <class name="SymmTridiagEVD" extends="SymmEVD" startLine="26">
    <javadoc>
      <text>* Computes eigenvalues of symmetrical, tridiagonal matrices</text>
    </javadoc>
    <javadoc>
      <text>* Double work array</text>
    </javadoc>
    <declaration type="double[]" name="work" />
    <javadoc>
      <text>* Integer work array</text>
    </javadoc>
    <declaration type="int[]" name="iwork" />
    <javadoc>
      <text>* Range of eigenvalues to compute</text>
    </javadoc>
    <declaration type="JobEigRange" name="range" />
    <javadoc>
      <text>* Eigenvector supports</text>
    </javadoc>
    <declaration type="int[]" name="isuppz" />
    <javadoc>
      <text>* Tolerance criteria</text>
    </javadoc>
    <declaration type="double" name="abstol" />
    <javadoc>
      <text>* Sets up an eigenvalue decomposition for symmetrical, tridiagonal
 * matrices. Computes all eigenvalues and eigenvectors, and uses a low
 * default tolerance criteria</text>
      <param>nSize of the matrix</param>
    </javadoc>
    <method type="constructor" name="SymmTridiagEVD" startLine="64" endLine="66" />
    <javadoc>
      <text>* Sets up an eigenvalue decomposition for symmetrical, tridiagonal
 * matrices. Computes all eigenvalues and eigenvectors</text>
      <param>nSize of the matrix</param>
      <param>abstolAbsolute tolerance criteria</param>
    </javadoc>
    <method type="constructor" name="SymmTridiagEVD" startLine="77" endLine="79" />
    <javadoc>
      <text>* Sets up an eigenvalue decomposition for symmetrical, tridiagonal
 * matrices. Uses a low default tolerance criteria</text>
      <param>nSize of the matrix</param>
      <param>vectorsTrue to compute the eigenvectors, false for just the
 * eigenvalues</param>
    </javadoc>
    <method type="constructor" name="SymmTridiagEVD" startLine="91" endLine="93" />
    <javadoc>
      <text>* Sets up an eigenvalue decomposition for symmetrical, tridiagonal matrices</text>
      <param>nSize of the matrix</param>
      <param>vectorsTrue to compute the eigenvectors, false for just the
 * eigenvalues</param>
      <param>abstolAbsolute tolerance criteria</param>
    </javadoc>
    <method type="constructor" name="SymmTridiagEVD" startLine="106" endLine="135">
      <declaration type="double[]" name="worksize" />
      <declaration type="int[]" name="iworksize" />
      <declaration type="intW" name="info" />
      <declaration type="int" name="lwork" />
      <scope startLine="123" endLine="126" />
      <scope startLine="126" endLine="129" />
      <comment>Find the needed workspace</comment>
      <comment>Allocate workspace</comment>
    </method>
    <javadoc>
      <text>* Convenience method for computing the full eigenvalue decomposition of the
 * given matrix</text>
      <param>AMatrix to factorize. Main diagonal and superdiagonal is
 * copied, and the matrix is not modified</param>
      <return>Newly allocated decomposition</return>
      <throws>NotConvergedException</throws>
    </javadoc>
    <method type="SymmTridiagEVD" name="factorize" startLine="148" endLine="150" />
    <javadoc>
      <text>* Computes the eigenvalue decomposition of the given matrix</text>
      <param>AMatrix to factorize. Overwritten on return</param>
      <return>The current eigenvalue decomposition</return>
      <throws>NotConvergedException</throws>
    </javadoc>
    <method type="SymmTridiagEVD" name="factor" startLine="161" endLine="178">
      <declaration type="intW" name="info" />
    </method>
  </class>
</source>
