<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix.io">
  <class name="MatrixInfo" startLine="23">
    <javadoc>
      <text>* Contains information on a matrix in the <a
 * href="http://math.nist.gov/MatrixMarket">Matrix Market</a> exchange format.
 * Supports all valid matrices.</text>
    </javadoc>
    <javadoc>
      <text>* What kind of numbers are stored</text>
    </javadoc>
    <javadoc>
      <text>* Real numbers</text>
    </javadoc>
    <javadoc>
      <text>* Integers</text>
    </javadoc>
    <javadoc>
      <text>* Complex numbers</text>
    </javadoc>
    <javadoc>
      <text>* Pattern matrix. No numbers stored</text>
    </javadoc>
    <javadoc>
      <text>* Symmetry structure of the matrix, if any</text>
    </javadoc>
    <javadoc>
      <text>* General matrix, no symmetry</text>
    </javadoc>
    <javadoc>
      <text>* Symmetrical matrix</text>
    </javadoc>
    <javadoc>
      <text>* Skew symmetrical matrix</text>
    </javadoc>
    <javadoc>
      <text>* Hermitian matrix. Only applicable for complex entris</text>
    </javadoc>
    <javadoc>
      <text>* True if the matrix is sparse, else false</text>
    </javadoc>
    <declaration type="boolean" name="sparse" />
    <javadoc>
      <text>* Type of data stored</text>
    </javadoc>
    <declaration type="MatrixField" name="field" />
    <javadoc>
      <text>* Matrix symmetry</text>
    </javadoc>
    <declaration type="MatrixSymmetry" name="symmetry" />
    <javadoc>
      <text>* Creates a specific type</text>
      <param>sparseTrue for sparse matrices, else false</param>
      <param>fieldType of data stored</param>
      <param>symmetryMatrix symmetry</param>
    </javadoc>
    <method type="constructor" name="MatrixInfo" startLine="107" endLine="113" />
    <javadoc>
      <text>* Validates the representation</text>
    </javadoc>
    <method type="void" name="validate" startLine="118" endLine="131" />
    <javadoc>
      <text>* Returns <code>true</code> if the matrix is in coordinate format, else
 * <code>false</code></text>
    </javadoc>
    <method type="boolean" name="isSparse" startLine="137" endLine="139" />
    <javadoc>
      <text>* Returns <code>true</code> if the matrix is in coordinate format, else
 * <code>false</code></text>
    </javadoc>
    <method type="boolean" name="isCoordinate" startLine="145" endLine="147" />
    <javadoc>
      <text>* Returns <code>true</code> if the matrix is in array format, else
 * <code>false</code></text>
    </javadoc>
    <method type="boolean" name="isDense" startLine="153" endLine="155" />
    <javadoc>
      <text>* Returns <code>true</code> if the matrix is in array format, else
 * <code>false</code></text>
    </javadoc>
    <method type="boolean" name="isArray" startLine="161" endLine="163" />
    <javadoc>
      <text>* Returns <code>true</code> if the matrix stores real numbers, else
 * <code>false</code></text>
    </javadoc>
    <method type="boolean" name="isReal" startLine="169" endLine="171" />
    <javadoc>
      <text>* Returns <code>true</code> if the matrix stores integers, else
 * <code>false</code></text>
    </javadoc>
    <method type="boolean" name="isInteger" startLine="177" endLine="179" />
    <javadoc>
      <text>* Returns <code>true</code> if the matrix stores complex numbers, else
 * <code>false</code></text>
    </javadoc>
    <method type="boolean" name="isComplex" startLine="185" endLine="187" />
    <javadoc>
      <text>* Returns <code>true</code> if the matrix does not store any numbers,
 * else <code>false</code></text>
    </javadoc>
    <method type="boolean" name="isPattern" startLine="193" endLine="195" />
    <javadoc>
      <text>* Returns <code>true</code> if the matrix form is general, else
 * <code>false</code></text>
    </javadoc>
    <method type="boolean" name="isGeneral" startLine="201" endLine="203" />
    <javadoc>
      <text>* Returns <code>true</code> if the matrix is symmetrical, else
 * <code>false</code></text>
    </javadoc>
    <method type="boolean" name="isSymmetric" startLine="209" endLine="211" />
    <javadoc>
      <text>* Returns <code>true</code> if the matrix is skew-symmetrical, else
 * <code>false</code></text>
    </javadoc>
    <method type="boolean" name="isSkewSymmetric" startLine="217" endLine="219" />
    <javadoc>
      <text>* Returns <code>true</code> if the matrix is Hermitian, else
 * <code>false</code></text>
    </javadoc>
    <method type="boolean" name="isHermitian" startLine="225" endLine="227" />
    <javadoc>
      <text>* Returns a string representation of the specifier. Can be used to provide
 * a header for writing to a file. It is a two-line output, which can look
 * like this:
 * <pre>
 * %%MatrixMarket matrix coordinate real general
 * </pre></text>
    </javadoc>
    <method type="String" name="toString" startLine="239" endLine="274">
      <declaration type="StringBuilder" name="buf" />
      <comment>This should never happen</comment>
      <comment>This should never happen</comment>
    </method>
  </class>
</source>
