<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix.sparse">
  <import name="java.util.ArrayList" />
  <import name="java.util.Arrays" />
  <import name="java.util.Collections" />
  <import name="java.util.List" />
  <import name="no.uib.cipr.matrix.AbstractMatrix" />
  <import name="no.uib.cipr.matrix.DenseVector" />
  <import name="no.uib.cipr.matrix.Matrix" />
  <import name="no.uib.cipr.matrix.Vector" />
  <import name="no.uib.cipr.matrix.VectorEntry" />
  <class name="ILUT" startLine="34">
    <implements name="Preconditioner" />
    <javadoc>
      <text>* ILU preconditioner with fill-in. Uses the dual threshold approach of Saad.</text>
    </javadoc>
    <javadoc>
      <text>* Factorisation matrix</text>
    </javadoc>
    <declaration type="FlexCompRowMatrix" name="LU" />
    <javadoc>
      <text>* The L and U factors</text>
    </javadoc>
    <declaration type="Matrix" name="L" />
    <javadoc>
      <text>* Temporary vector for solving the factorised system</text>
    </javadoc>
    <declaration type="Vector" name="y" />
    <javadoc>
      <text>* Drop-tolerance</text>
    </javadoc>
    <declaration type="double" name="tau" />
    <javadoc>
      <text>* Diagonal indices</text>
    </javadoc>
    <declaration type="int[]" name="diagind" />
    <javadoc>
      <text>* Stores entries in the lower and upper part of the matrix. Used by the
 * dropping rule to determine the largest entries in the two parts of the
 * matrix</text>
    </javadoc>
    <declaration type="List<IntDoubleEntry>" name="lower" />
    <javadoc>
      <text>* Number of additional entries to keep in the lower and upper part of the
 * factored matrix. The entries of the original matrix are always kept,
 * unless they numerically too small</text>
    </javadoc>
    <declaration type="int" name="p" />
    <javadoc>
      <text>* Sets up the preconditioner for the given matrix</text>
      <param>LUMatrix to use internally. For best performance, its non-zero
 * pattern should conform to that of the system matrix</param>
      <param>tauDrop tolerance</param>
      <param>pNumber of entries to keep on each row in of the factored
 * matrix. This is in addition to the entries of the original
 * matrix</param>
    </javadoc>
    <method type="constructor" name="ILUT" startLine="91" endLine="105">
      <declaration type="int" name="n" />
    </method>
    <javadoc>
      <text>* Sets up the preconditioner for the given matrix. Uses a drop-tolerance of
 * 10<sup>-6</sup>, and keeps 50 entries on each row, including the main
 * diagonal and any previous entries in the matrix structure</text>
      <param>LUMatrix to use internally. For best performance, its non-zero
 * pattern should conform to that of the system matrix</param>
    </javadoc>
    <method type="constructor" name="ILUT" startLine="116" endLine="118" />
    <method type="Vector" name="apply" startLine="120" endLine="126">
      <comment>Ly = b, y = L\b</comment>
      <comment>Ux = L\b = y</comment>
    </method>
    <method type="Vector" name="transApply" startLine="128" endLine="134">
      <comment>U'y = b, y = U'\b</comment>
      <comment>L'x = U'\b = y</comment>
    </method>
    <method type="void" name="setMatrix" startLine="136" endLine="141" />
    <method type="void" name="factor" startLine="143" endLine="208">
      <declaration type="int" name="n" />
      <declaration type="double[]" name="LUi" />
      <scope startLine="149" endLine="155">
        <declaration type="SparseVector" name="row" />
      </scope>
      <scope startLine="157" endLine="204">
        <declaration type="SparseVector" name="rowi" />
        <declaration type="double" name="taui" />
        <scope startLine="168" endLine="192">
          <declaration type="SparseVector" name="rowk" />
          <declaration type="int[]" name="rowIndex" />
          <declaration type="int" name="rowUsed" />
          <declaration type="double[]" name="rowData" />
          <declaration type="double" name="LUik" />
        </scope>
        <scope startLine="198" endLine="203" />
        <comment>Get row i</comment>
        <comment>Drop tolerance on current row</comment>
        <comment>Store in dense format</comment>
        <comment>Get row k</comment>
        <comment>Check for small elimination entry</comment>
        <comment>Traverse the sparse row k, reducing row i</comment>
        <comment>The above has overwritten LUik, so remedy that</comment>
        <comment>Store back into the LU matrix, dropping as needed</comment>
        <comment>Update diagonal index on row i if it is outdated</comment>
      </scope>
      <comment>Find the indices to the diagonal entries</comment>
    </method>
    <method type="int" name="findDiagonalIndex" startLine="210" endLine="213" />
    <javadoc>
      <text>* Copies the sparse vector into a dense array</text>
    </javadoc>
    <method type="void" name="scatter" startLine="218" endLine="225">
      <declaration type="int[]" name="index" />
      <declaration type="int" name="used" />
      <declaration type="double[]" name="data" />
    </method>
    <javadoc>
      <text>* Copies the dense array back into the sparse vector, applying a numerical
 * dropping rule and keeping only a given number of entries</text>
    </javadoc>
    <method type="void" name="gather" startLine="231" endLine="272">
      <declaration type="int" name="nl" />
      <scope startLine="234" endLine="239" />
      <scope startLine="262" endLine="265">
        <declaration type="IntDoubleEntry" name="e" />
      </scope>
      <scope startLine="268" endLine="271">
        <declaration type="IntDoubleEntry" name="e" />
      </scope>
      <comment>Number of entries in the lower and upper part of the original matrix</comment>
      <comment>Entries in the L part of the vector</comment>
      <comment>Entries in the U part of the vector</comment>
      <comment>Sort in descending order</comment>
      <comment>Always keep the diagonal</comment>
      <comment>Keep at most nl+p lower entries</comment>
      <comment>Keep at most nu+p upper entries</comment>
    </method>
    <class name="IntDoubleEntry" startLine="274">
      <implements name="Comparable<IntDoubleEntry>" />
      <javadoc>
        <text>* Stores an integer/value pair, sorted by descending order according to the
 * value</text>
      </javadoc>
      <declaration type="int" name="index" />
      <declaration type="double" name="value" />
      <method type="constructor" name="IntDoubleEntry" startLine="284" endLine="287" />
      <method type="int" name="compareTo" startLine="289" endLine="297">
        <comment>Descending order, so keep the largest entries first</comment>
      </method>
      <method type="String" name="toString" startLine="300" endLine="302" />
      <class name="UnitLowerFlexCompRowMatrix" extends="AbstractMatrix" startLine="305">
        <javadoc>
          <text>* Unit lower triangular flex-CRS matrix. Only used for triangular solves</text>
        </javadoc>
        <declaration type="FlexCompRowMatrix" name="LU" />
        <declaration type="int[]" name="diagind" />
        <method type="constructor" name="UnitLowerFlexCompRowMatrix" startLine="314" endLine="318" />
        <method type="Vector" name="solve" startLine="321" endLine="344">
          <declaration type="double[]" name="bd" />
          <declaration type="double[]" name="xd" />
          <scope startLine="328" endLine="341">
            <declaration type="SparseVector" name="row" />
            <declaration type="int[]" name="index" />
            <declaration type="double[]" name="data" />
            <declaration type="double" name="sum" />
            <comment>Get row i</comment>
            <comment>xi = bi - sum[j<i] Lij * xj</comment>
          </scope>
        </method>
        <method type="Vector" name="transSolve" startLine="347" endLine="370">
          <declaration type="double[]" name="xd" />
          <scope startLine="355" endLine="367">
            <declaration type="SparseVector" name="row" />
            <declaration type="int[]" name="index" />
            <declaration type="double[]" name="data" />
            <comment>Get row i</comment>
            <comment>At this stage, x[i] is known, so move it over to the right</comment>
            <comment>hand side for the remaining equations</comment>
          </scope>
        </method>
        <class name="UpperFlexCompRowMatrix" extends="AbstractMatrix" startLine="374">
          <javadoc>
            <text>* Upper triangular flex-CRS matrix. Only used for triangular solves</text>
          </javadoc>
          <declaration type="FlexCompRowMatrix" name="LU" />
          <declaration type="int[]" name="diagind" />
          <method type="constructor" name="UpperFlexCompRowMatrix" startLine="383" endLine="387" />
          <method type="Vector" name="solve" startLine="390" endLine="414">
            <declaration type="double[]" name="bd" />
            <declaration type="double[]" name="xd" />
            <scope startLine="397" endLine="411">
              <declaration type="SparseVector" name="row" />
              <declaration type="int[]" name="index" />
              <declaration type="int" name="used" />
              <declaration type="double[]" name="data" />
              <declaration type="double" name="sum" />
              <comment>Get row i</comment>
              <comment>xi = (bi - sum[j>i] Uij * xj) / Uii</comment>
            </scope>
          </method>
          <method type="Vector" name="transSolve" startLine="417" endLine="443">
            <declaration type="double[]" name="xd" />
            <scope startLine="425" endLine="440">
              <declaration type="SparseVector" name="row" />
              <declaration type="int[]" name="index" />
              <declaration type="int" name="used" />
              <declaration type="double[]" name="data" />
              <comment>Get row i</comment>
              <comment>Solve for the current entry</comment>
              <comment>Move this known solution over to the right hand side for the</comment>
              <comment>remaining equations</comment>
            </scope>
          </method>
        </class>
      </class>
    </class>
  </class>
</source>
