<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix">
  <import name="java.io.IOException" />
  <import name="no.uib.cipr.matrix.io.MatrixInfo" />
  <import name="no.uib.cipr.matrix.io.MatrixSize" />
  <import name="no.uib.cipr.matrix.io.MatrixVectorReader" />
  <import name="com.github.fommil.netlib.BLAS" />
  <import name="com.github.fommil.netlib.LAPACK" />
  <import name="org.netlib.util.intW" />
  <class name="DenseMatrix" extends="AbstractDenseMatrix" startLine="33">
    <javadoc>
      <text>* Dense matrix. It is a good all-round matrix structure, with fast access and
 * efficient algebraic operations. The matrix
 * <p>
 * <table border="1">
 * <tr>
 * <td>a<sub>11</sub></td>
 * <td>a<sub>12</sub></td>
 * <td>a<sub>13</sub></td>
 * <td>a<sub>14</sub></td>
 * </tr>
 * <tr>
 * <td>a<sub>21</sub></td>
 * <td>a<sub>22</sub></td>
 * <td>a<sub>23</sub></td>
 * <td>a<sub>24</sub></td>
 * </tr>
 * <tr>
 * <td>a<sub>31</sub></td>
 * <td>a<sub>32</sub></td>
 * <td>a<sub>33</sub></td>
 * <td>a<sub>34</sub></td>
 * </tr>
 * <tr>
 * <td>a<sub>41</sub></td>
 * <td>a<sub>42</sub></td>
 * <td>a<sub>43</sub></td>
 * <td>a<sub>44</sub></td>
 * </tr>
 * </table>
 * </p>
 * <p>
 * is stored column major in a single array, as follows:
 * </p>
 * <p>
 * <table border="1">
 * <tr>
 * <td>a<sub>11</sub></td>
 * <td>a<sub>21</sub></td>
 * <td>a<sub>31</sub></td>
 * <td>a<sub>41</sub></td>
 * <td>a<sub>12</sub></td>
 * <td>a<sub>22</sub></td>
 * <td>a<sub>32</sub></td>
 * <td>a<sub>42</sub></td>
 * <td>a<sub>13</sub></td>
 * <td>a<sub>23</sub></td>
 * <td>a<sub>33</sub></td>
 * <td>a<sub>43</sub></td>
 * <td>a<sub>14</sub></td>
 * <td>a<sub>24</sub></td>
 * <td>a<sub>34</sub></td>
 * <td>a<sub>44</sub></td>
 * </tr>
 * </table>
 * </p></text>
    </javadoc>
    <javadoc>
      <text>* Constructor for DenseMatrix</text>
      <param>rReader to get the matrix from</param>
    </javadoc>
    <method type="constructor" name="DenseMatrix" startLine="98" endLine="156">
      <declaration type="MatrixInfo" name="info" />
      <declaration type="MatrixSize" name="size" />
      <scope startLine="126" endLine="143">
        <declaration type="int" name="nz" />
        <declaration type="int[]" name="row" />
        <declaration type="int[]" name="column" />
        <declaration type="double[]" name="entry" />
        <comment>Read coordinate data</comment>
        <comment>Shift indices from 1-offset to 0-offset</comment>
        <comment>Store them</comment>
      </scope>
      <comment>Start with a zero-sized matrix</comment>
      <comment>Get matrix information. Use the header if present, else use a safe</comment>
      <comment>default</comment>
      <comment>Resize the matrix to correct size</comment>
      <comment>Check that the matrix is in an acceptable format</comment>
      <comment>Read the entries, in either coordinate or array format</comment>
      <comment>info.isArray()</comment>
      <comment>Put in missing entries from symmetry or skew symmetry</comment>
    </method>
    <javadoc>
      <text>* Constructor for DenseMatrix</text>
      <param>numRowsNumber of rows</param>
      <param>numColumnsNumber of columns</param>
    </javadoc>
    <method type="constructor" name="DenseMatrix" startLine="166" endLine="168" />
    <javadoc>
      <text>* Constructor for DenseMatrix</text>
      <param>AMatrix to copy. A deep copy is made</param>
    </javadoc>
    <method type="constructor" name="DenseMatrix" startLine="176" endLine="178" />
    <javadoc>
      <text>* Constructor for DenseMatrix</text>
      <param>AMatrix to copy contents from</param>
      <param>deepIf true, <code>A</code> is copied, else a shallow copy is
 * made and the matrices share underlying storage. For this,
 * <code>A</code> must be a dense matrix</param>
    </javadoc>
    <method type="constructor" name="DenseMatrix" startLine="190" endLine="192" />
    <javadoc>
      <text>* Constructor for DenseMatrix. Builds the matrix from a vector</text>
      <param>xVector to copy from. This will form this matrix' single column</param>
      <param>deepIf true, x is copied, if false, the internal storage of this
 * matrix is the same as that of the vector. In that case,
 * <code>x</code> must be a <code>DenseVector</code></param>
    </javadoc>
    <method type="constructor" name="DenseMatrix" startLine="204" endLine="215">
      <scope startLine="210" endLine="214" />
    </method>
    <javadoc>
      <text>* Constructor for DenseMatrix. Builds the matrix from a vector</text>
      <param>xThe vector which forms this matrix' single column. It is
 * copied, not referenced</param>
    </javadoc>
    <method type="constructor" name="DenseMatrix" startLine="224" endLine="226" />
    <javadoc>
      <text>* Constructor for DenseMatrix. Builds the matrix from vectors. Each vector
 * will correspond to a column of the matrix</text>
      <param>xVectors which forms the columns of this matrix. Every vector
 * must have the same size</param>
    </javadoc>
    <method type="constructor" name="DenseMatrix" startLine="236" endLine="249">
      <comment>Ensure correct sizes</comment>
      <comment>Copy the contents</comment>
    </method>
    <javadoc>
      <text>* Constructor for DenseMatrix. Copies from the passed array</text>
      <param>valuesArrays to copy from. Every sub-array must have the same size</param>
    </javadoc>
    <method type="constructor" name="DenseMatrix" startLine="257" endLine="267">
      <scope startLine="261" endLine="266" />
      <comment>Copy the contents</comment>
    </method>
    <javadoc>
      <param>numRows</param>
      <param>numColumns</param>
      <param>values</param>
      <param>deep if true the array will be cloned, if false the array is used directly.</param>
    </javadoc>
    <method type="constructor" name="DenseMatrix" startLine="275" endLine="283" />
    <method type="DenseMatrix" name="copy" startLine="286" endLine="288" />
    <method type="void" name="copy" startLine="291" endLine="294" />
    <method type="Matrix" name="multAdd" startLine="297" endLine="312">
      <declaration type="double[]" name="Bd" />
    </method>
    <method type="Matrix" name="transAmultAdd" startLine="315" endLine="330">
      <declaration type="double[]" name="Bd" />
    </method>
    <method type="Matrix" name="transBmultAdd" startLine="333" endLine="348">
      <declaration type="double[]" name="Bd" />
    </method>
    <method type="Matrix" name="transABmultAdd" startLine="351" endLine="366">
      <declaration type="double[]" name="Bd" />
    </method>
    <method type="Matrix" name="rank1" startLine="369" endLine="382">
      <declaration type="double[]" name="xd" />
    </method>
    <method type="Vector" name="multAdd" startLine="385" endLine="398">
      <declaration type="double[]" name="xd" />
    </method>
    <method type="Vector" name="transMultAdd" startLine="401" endLine="414">
      <declaration type="double[]" name="xd" />
    </method>
    <method type="Matrix" name="solve" startLine="417" endLine="434">
      <comment>We allow non-square matrices, as we then use a least-squares solver</comment>
    </method>
    <method type="Vector" name="solve" startLine="437" endLine="441">
      <declaration type="DenseMatrix" name="B" />
    </method>
    <method type="Matrix" name="transSolve" startLine="444" endLine="458">
      <comment>We allow non-square matrices, as we then use a least-squares solver</comment>
    </method>
    <method type="Vector" name="transSolve" startLine="461" endLine="465">
      <declaration type="DenseMatrix" name="B" />
    </method>
    <method type="Matrix" name="LUsolve" startLine="467" endLine="487">
      <declaration type="double[]" name="Xd" />
      <declaration type="int[]" name="piv" />
      <declaration type="intW" name="info" />
    </method>
    <method type="Matrix" name="QRsolve" startLine="489" endLine="531">
      <declaration type="int" name="nrhs" />
      <declaration type="DenseMatrix" name="Xtmp" />
      <declaration type="int" name="M" />
      <declaration type="double[]" name="newData" />
      <declaration type="double[]" name="work" />
      <declaration type="intW" name="info" />
      <declaration type="int" name="lwork" />
      <declaration type="int" name="N" />
      <comment>Allocate temporary solution matrix</comment>
      <comment>Query optimal workspace</comment>
      <comment>Allocate workspace</comment>
      <comment>Compute the factorization</comment>
      <comment>Extract the solution</comment>
    </method>
  </class>
</source>
