<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix">
  <import name="java.util.Formatter" />
  <import name="java.util.Iterator" />
  <class name="AbstractMatrix" startLine="26">
    <implements name="Matrix" />
    <javadoc>
      <text>* Partial implementation of <code>Matrix</code>. The following methods throw
 * <code>UnsupportedOperationException</code>, and should be overridden by a
 * subclass:
 * <ul>
 * <li><code>get(int,int)</code></li>
 * <li><code>set(int,int,double)</code></li>
 * <li><code>copy</code></li>
 * <li>All the direct solution methods</li>
 * </ul>
 * <p>
 * For the rest of the methods, simple default implementations using a matrix
 * iterator has been provided. There are some kernel operations which the
 * simpler operations forward to, for instance, <code>mult(Matrix,Matrix)</code>
 * forwards to <code>multAdd(double,Matrix,Matrix)</code>. Subclasses can
 * thus focus on overriding the kernel operations, which are:
 * <ul>
 * <li> <code>multAdd(double,Vector,Vector)</code> and
 * <code>transMultAdd(double,Vector,Vector)</code>. </li>
 * <li> <code>rank1(double,Vector,Vector)</code> and
 * <code>rank1(double,Vector,Vector)</code>.</li>
 * <li> <code>multAdd(double,Matrix,Matrix)</code>,
 * <code>transAmultAdd(double,Matrix,Matrix)</code>,
 * <code>transBmultAdd(double,Matrix,Matrix)</code>, and
 * <code>transABmultAdd(double,Matrix,Matrix)</code>. </li>
 * <li> <code>scale(double)</code>. </li>
 * <li> <code>set(double,Matrix)</code> and <code>add(double,Matrix)</code>.
 * </li>
 * <li> <code>transpose</code> and <code>transpose(Matrix)</code>. </li>
 * <li> All the norms.</li>
 * </ul>
 * <p>
 * Finally, a default iterator is provided by this class, which works by calling
 * the <code>get</code> function. A tailored replacement should be used by
 * subclasses.
 * </ul></text>
    </javadoc>
    <javadoc>
      <text>* Number of rows</text>
    </javadoc>
    <declaration type="int" name="numRows" />
    <javadoc>
      <text>* Number of columns</text>
    </javadoc>
    <declaration type="int" name="numColumns" />
    <javadoc>
      <text>* Constructor for AbstractMatrix</text>
    </javadoc>
    <method type="constructor" name="AbstractMatrix" startLine="78" endLine="84" />
    <javadoc>
      <text>* Constructor for AbstractMatrix, same size as A. The invoking constructor
 * should set this matrix equal the argument matrix</text>
    </javadoc>
    <method type="constructor" name="AbstractMatrix" startLine="90" endLine="92" />
    <method type="int" name="numRows" startLine="94" endLine="96" />
    <method type="int" name="numColumns" startLine="98" endLine="100" />
    <method type="boolean" name="isSquare" startLine="102" endLine="104" />
    <method type="void" name="set" startLine="106" endLine="108" />
    <method type="void" name="add" startLine="110" endLine="112" />
    <method type="double" name="get" startLine="114" endLine="116" />
    <javadoc>
      <text>* Checks the passed row and column indices</text>
    </javadoc>
    <method type="void" name="check" startLine="121" endLine="134" />
    <method type="Matrix" name="copy" startLine="136" endLine="138" />
    <method type="Matrix" name="zero" startLine="140" endLine="144" />
    <method type="Vector" name="mult" startLine="146" endLine="148" />
    <method type="Vector" name="mult" startLine="150" endLine="152" />
    <method type="Vector" name="multAdd" startLine="154" endLine="156" />
    <method type="Vector" name="multAdd" startLine="158" endLine="166" />
    <javadoc>
      <text>* Checks the arguments to <code>mult</code> and <code>multAdd</code></text>
    </javadoc>
    <method type="void" name="checkMultAdd" startLine="171" endLine="178" />
    <method type="Vector" name="transMult" startLine="180" endLine="182" />
    <method type="Vector" name="transMult" startLine="184" endLine="186" />
    <method type="Vector" name="transMultAdd" startLine="188" endLine="190" />
    <method type="Vector" name="transMultAdd" startLine="192" endLine="200" />
    <javadoc>
      <text>* Checks the arguments to <code>transMult</code> and
 * <code>transMultAdd</code></text>
    </javadoc>
    <method type="void" name="checkTransMultAdd" startLine="206" endLine="213" />
    <method type="Vector" name="solve" startLine="215" endLine="217" />
    <method type="Vector" name="transSolve" startLine="219" endLine="221" />
    <javadoc>
      <text>* Checks that a matrix inversion is legal for the given arguments. This is
 * for the square case, not for least-squares problems</text>
    </javadoc>
    <method type="void" name="checkSolve" startLine="227" endLine="236" />
    <method type="Matrix" name="rank1" startLine="238" endLine="240" />
    <method type="Matrix" name="rank1" startLine="242" endLine="244" />
    <method type="Matrix" name="rank1" startLine="246" endLine="248" />
    <method type="Matrix" name="rank1" startLine="250" endLine="263" />
    <javadoc>
      <text>* Checks that a vector rank1 update is possible for the given vectors</text>
    </javadoc>
    <method type="void" name="checkRank1" startLine="268" endLine="277" />
    <method type="Matrix" name="rank2" startLine="279" endLine="281" />
    <method type="Matrix" name="rank2" startLine="283" endLine="296">
      <scope startLine="290" endLine="293" />
    </method>
    <javadoc>
      <text>* Checks that a vector rank2 update is legal with the given vectors</text>
    </javadoc>
    <method type="void" name="checkRank2" startLine="301" endLine="310" />
    <method type="Matrix" name="mult" startLine="312" endLine="314" />
    <method type="Matrix" name="mult" startLine="316" endLine="318" />
    <method type="Matrix" name="multAdd" startLine="320" endLine="322" />
    <method type="Matrix" name="multAdd" startLine="324" endLine="337">
      <scope startLine="329" endLine="334">
        <declaration type="double" name="dot" />
      </scope>
    </method>
    <javadoc>
      <text>* Checks the arguments to <code>mult</code> and <code>multAdd</code></text>
    </javadoc>
    <method type="void" name="checkMultAdd" startLine="342" endLine="353" />
    <method type="Matrix" name="transAmult" startLine="355" endLine="357" />
    <method type="Matrix" name="transAmult" startLine="359" endLine="361" />
    <method type="Matrix" name="transAmultAdd" startLine="363" endLine="365" />
    <method type="Matrix" name="transAmultAdd" startLine="367" endLine="380">
      <scope startLine="372" endLine="377">
        <declaration type="double" name="dot" />
      </scope>
    </method>
    <javadoc>
      <text>* Checks the arguments to <code>transAmult</code> and
 * <code>transAmultAdd</code></text>
    </javadoc>
    <method type="void" name="checkTransAmultAdd" startLine="386" endLine="397" />
    <method type="Matrix" name="transBmult" startLine="399" endLine="401" />
    <method type="Matrix" name="transBmult" startLine="403" endLine="405" />
    <method type="Matrix" name="transBmultAdd" startLine="407" endLine="409" />
    <method type="Matrix" name="transBmultAdd" startLine="411" endLine="424">
      <scope startLine="416" endLine="421">
        <declaration type="double" name="dot" />
      </scope>
    </method>
    <javadoc>
      <text>* Checks the arguments to <code>transBmult</code> and
 * <code>transBmultAdd</code></text>
    </javadoc>
    <method type="void" name="checkTransBmultAdd" startLine="430" endLine="441" />
    <method type="Matrix" name="transABmult" startLine="443" endLine="445" />
    <method type="Matrix" name="transABmult" startLine="447" endLine="449" />
    <method type="Matrix" name="transABmultAdd" startLine="451" endLine="453" />
    <method type="Matrix" name="transABmultAdd" startLine="455" endLine="468">
      <scope startLine="460" endLine="465">
        <declaration type="double" name="dot" />
      </scope>
    </method>
    <javadoc>
      <text>* Checks the arguments to <code>transABmultAdd</code> and
 * <code>transABmultAdd</code></text>
    </javadoc>
    <method type="void" name="checkTransABmultAdd" startLine="474" endLine="484" />
    <method type="Matrix" name="solve" startLine="486" endLine="488" />
    <method type="Matrix" name="transSolve" startLine="490" endLine="492" />
    <javadoc>
      <text>* Checks that a matrix inversion is legal for the given arguments. This is
 * for the square case, not for least-squares problems</text>
    </javadoc>
    <method type="void" name="checkSolve" startLine="498" endLine="511" />
    <method type="Matrix" name="rank1" startLine="513" endLine="515" />
    <method type="Matrix" name="rank1" startLine="517" endLine="524" />
    <javadoc>
      <text>* Checks that a matrix rank1 update is possible for the given matrix</text>
    </javadoc>
    <method type="void" name="checkRank1" startLine="529" endLine="535" />
    <method type="Matrix" name="transRank1" startLine="537" endLine="539" />
    <method type="Matrix" name="transRank1" startLine="541" endLine="548" />
    <javadoc>
      <text>* Checks that a transposed rank1 update is leagal with the given argument</text>
    </javadoc>
    <method type="void" name="checkTransRank1" startLine="553" endLine="559" />
    <method type="Matrix" name="rank2" startLine="561" endLine="563" />
    <method type="Matrix" name="rank2" startLine="565" endLine="572" />
    <javadoc>
      <text>* Checks that a rank2 update is legal for the given arguments</text>
    </javadoc>
    <method type="void" name="checkRank2" startLine="577" endLine="587" />
    <method type="Matrix" name="transRank2" startLine="589" endLine="591" />
    <method type="Matrix" name="transRank2" startLine="593" endLine="600" />
    <javadoc>
      <text>* Checks that a transposed rank2 update is leagal with the given arguments</text>
    </javadoc>
    <method type="void" name="checkTransRank2" startLine="605" endLine="618" />
    <method type="Matrix" name="scale" startLine="620" endLine="630" />
    <method type="Matrix" name="set" startLine="632" endLine="634" />
    <method type="Matrix" name="set" startLine="636" endLine="649" />
    <method type="Matrix" name="add" startLine="651" endLine="653" />
    <method type="Matrix" name="add" startLine="655" endLine="663" />
    <javadoc>
      <text>* Checks that the sizes of this matrix and the given conform</text>
    </javadoc>
    <method type="void" name="checkSize" startLine="668" endLine="676" />
    <method type="Matrix" name="transpose" startLine="678" endLine="689">
      <scope startLine="682" endLine="686">
        <declaration type="double" name="value" />
      </scope>
    </method>
    <javadoc>
      <text>* Checks that the matrix may be transposed</text>
    </javadoc>
    <method type="void" name="checkTranspose" startLine="694" endLine="697" />
    <method type="Matrix" name="transpose" startLine="699" endLine="710" />
    <javadoc>
      <text>* Checks that this matrix can be transposed into the given matrix</text>
    </javadoc>
    <method type="void" name="checkTranspose" startLine="715" endLine="722" />
    <method type="double" name="norm" startLine="724" endLine="734">
      <comment>Maxvalue</comment>
    </method>
    <javadoc>
      <text>* Computes the 1 norm</text>
    </javadoc>
    <method type="double" name="norm1" startLine="739" endLine="744">
      <declaration type="double[]" name="rowSum" />
    </method>
    <javadoc>
      <text>* Computes the Frobenius norm. This implementation is overflow resistant</text>
    </javadoc>
    <method type="double" name="normF" startLine="749" endLine="763">
      <declaration type="double" name="scale" />
      <scope startLine="751" endLine="761">
        <declaration type="double" name="Aval" />
        <scope startLine="753" endLine="760">
          <declaration type="double" name="absxi" />
          <scope startLine="755" endLine="758" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Computes the infinity norm</text>
    </javadoc>
    <method type="double" name="normInf" startLine="768" endLine="773">
      <declaration type="double[]" name="columnSum" />
    </method>
    <javadoc>
      <text>* Returns the largest absolute value</text>
    </javadoc>
    <method type="double" name="max" startLine="778" endLine="783">
      <declaration type="double" name="max" />
    </method>
    <javadoc>
      <text>* Returns the largest element of the passed array</text>
    </javadoc>
    <method type="double" name="max" startLine="788" endLine="793">
      <declaration type="double" name="max" />
    </method>
    <method type="String" name="toString" startLine="796" endLine="814">
      <declaration type="Formatter" name="out" />
      <declaration type="int" name="i" />
      <scope startLine="804" endLine="811">
        <scope startLine="807" endLine="810" />
      </scope>
      <comment>Output into coordinate format. Indices start from 1 instead of 0</comment>
    </method>
    <method type="Iterator<MatrixEntry>" name="iterator" startLine="816" endLine="818" />
    <class name="RefMatrixIterator" startLine="820">
      <implements name="Iterator<MatrixEntry>" />
      <javadoc>
        <text>* Iterator over a general matrix. Uses column-major traversal</text>
      </javadoc>
      <javadoc>
        <text>* Matrix cursor</text>
      </javadoc>
      <declaration type="int" name="row" />
      <javadoc>
        <text>* Matrix entry</text>
      </javadoc>
      <declaration type="RefMatrixEntry" name="entry" />
      <method type="boolean" name="hasNext" startLine="835" endLine="837" />
      <method type="MatrixEntry" name="next" startLine="839" endLine="851">
        <scope startLine="845" endLine="848" />
        <comment>Traversal first down the columns, then the rows</comment>
      </method>
      <method type="void" name="remove" startLine="853" endLine="855" />
      <class name="RefMatrixEntry" startLine="859">
        <implements name="MatrixEntry" />
        <javadoc>
          <text>* Matrix entry backed by the matrix. May be reused for higher performance</text>
        </javadoc>
        <javadoc>
          <text>* Matrix position</text>
        </javadoc>
        <declaration type="int" name="row" />
        <javadoc>
          <text>* Updates the entry</text>
        </javadoc>
        <method type="void" name="update" startLine="872" endLine="875" />
        <method type="int" name="row" startLine="877" endLine="879" />
        <method type="int" name="column" startLine="881" endLine="883" />
        <method type="double" name="get" startLine="885" endLine="887" />
        <method type="void" name="set" startLine="889" endLine="891" />
      </class>
    </class>
  </class>
</source>
