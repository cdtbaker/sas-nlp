<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix">
  <import name="no.uib.cipr.matrix.Matrix.Norm" />
  <import name="com.github.fommil.netlib.LAPACK" />
  <import name="org.netlib.util.doubleW" />
  <import name="org.netlib.util.intW" />
  <class name="BandLU" startLine="29">
    <javadoc>
      <text>* Banded LU decomposition</text>
    </javadoc>
    <javadoc>
      <text>* Matrix dimension</text>
    </javadoc>
    <declaration type="int" name="n" />
    <javadoc>
      <text>* Number of bands in the matrix A</text>
    </javadoc>
    <declaration type="int" name="kl" />
    <javadoc>
      <text>* Holds the LU factors</text>
    </javadoc>
    <declaration type="BandMatrix" name="LU" />
    <javadoc>
      <text>* Row pivotations</text>
    </javadoc>
    <declaration type="int[]" name="ipiv" />
    <javadoc>
      <text>* True if the matrix was singular</text>
    </javadoc>
    <declaration type="boolean" name="singular" />
    <javadoc>
      <text>* Constructor for BandLU</text>
      <param>nMatrix size</param>
      <param>klNumber of lower matrix bands</param>
      <param>kuNumber of upper matrix bands</param>
    </javadoc>
    <method type="constructor" name="BandLU" startLine="69" endLine="77" />
    <javadoc>
      <text>* Creates an LU decomposition of the given matrix</text>
      <param>AMatrix to decompose. Not modified</param>
      <return>A LU decomposition of the matrix</return>
    </javadoc>
    <method type="BandLU" name="factorize" startLine="86" endLine="88" />
    <javadoc>
      <text>* Creates an LU decomposition of the given matrix</text>
      <param>AMatrix to decompose. If the decomposition is in-place, its
 * number of superdiagonals must equal <code>kl+ku</code></param>
      <param>inplaceWheter or not the decomposition should overwrite the passed
 * matrix</param>
      <return>The current decomposition</return>
    </javadoc>
    <method type="BandLU" name="factor" startLine="101" endLine="106" />
    <javadoc>
      <text>* Creates an LU decomposition of the given matrix</text>
      <param>AMatrix to decompose. It will be overwritten with the
 * decomposition. Its number of superdiagonals must equal
 * <code>kl+ku</code></param>
      <return>The current decomposition</return>
    </javadoc>
    <method type="BandLU" name="factor" startLine="117" endLine="138">
      <declaration type="intW" name="info" />
    </method>
    <javadoc>
      <text>* Returns the lower triangular factor</text>
    </javadoc>
    <method type="UnitLowerTriangBandMatrix" name="getL" startLine="143" endLine="145" />
    <javadoc>
      <text>* Returns the upper triangular factor</text>
    </javadoc>
    <method type="UpperTriangBandMatrix" name="getU" startLine="150" endLine="152" />
    <javadoc>
      <text>* Returns the decomposition matrix</text>
    </javadoc>
    <method type="BandMatrix" name="getLU" startLine="157" endLine="159" />
    <javadoc>
      <text>* Returns the row pivots</text>
    </javadoc>
    <method type="int[]" name="getPivots" startLine="164" endLine="166" />
    <javadoc>
      <text>* Checks for singularity</text>
    </javadoc>
    <method type="boolean" name="isSingular" startLine="171" endLine="173" />
    <javadoc>
      <text>* Computes the reciprocal condition number, using either the infinity norm
 * of the 1 norm.</text>
      <param>AThe matrix this is a decomposition of</param>
      <param>normEither <code>Norm.One</code> or <code>Norm.Infinity</code></param>
      <return>The reciprocal condition number. Values close to unity indicate a
 * well-conditioned system, while numbers close to zero do not.</return>
    </javadoc>
    <method type="double" name="rcond" startLine="186" endLine="209">
      <declaration type="double" name="anorm" />
      <declaration type="double[]" name="work" />
      <declaration type="int[]" name="lwork" />
      <declaration type="intW" name="info" />
      <declaration type="doubleW" name="rcond" />
    </method>
    <javadoc>
      <text>* Computes <code>A\B</code>, overwriting <code>B</code></text>
    </javadoc>
    <method type="DenseMatrix" name="solve" startLine="214" endLine="216" />
    <javadoc>
      <text>* Computes <code>A<sup>T</sup>\B</code>, overwriting <code>B</code></text>
    </javadoc>
    <method type="DenseMatrix" name="transSolve" startLine="221" endLine="223" />
    <method type="DenseMatrix" name="solve" startLine="226" endLine="240">
      <declaration type="intW" name="info" />
    </method>
  </class>
</source>
