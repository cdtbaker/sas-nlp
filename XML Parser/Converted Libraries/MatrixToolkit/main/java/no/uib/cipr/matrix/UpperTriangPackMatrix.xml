<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix">
  <class name="UpperTriangPackMatrix" extends="AbstractTriangPackMatrix" startLine="24">
    <javadoc>
      <text>* Upper triangular packed matrix. In contrast with{@link no.uib.cipr.matrix.LowerTriangDenseMatrix LowerTriangDenseMatrix},
 * this matrix exploits the sparsity by only storing about half the matrix. As
 * such, the triangular matrix
 * <p>
 * <table border="1">
 * <tr>
 * <td>a<sub>11</sub></td>
 * <td>a<sub>12</sub></td>
 * <td>a<sub>13</sub></td>
 * <td>a<sub>14</sub></td>
 * </tr>
 * <tr>
 * <td>&nbsp;</td>
 * <td>a<sub>22</sub></td>
 * <td>a<sub>23</sub></td>
 * <td>a<sub>24</sub></td>
 * </tr>
 * <tr>
 * <td>&nbsp;</td>
 * <td>&nbsp;</td>
 * <td>a<sub>33</sub></td>
 * <td>a<sub>34</sub></td>
 * </tr>
 * <tr>
 * <td>&nbsp;</td>
 * <td>&nbsp;</td>
 * <td>&nbsp;</td>
 * <td>a<sub>44</sub></td>
 * </tr>
 * </table>
 * </p>
 * <p>
 * is packed as follows:
 * </p>
 * <p>
 * <table border="1">
 * <tr>
 * <td>a<sub>11</sub></td>
 * <td>a<sub>12</sub></td>
 * <td>a<sub>22</sub></td>
 * <td>a<sub>13</sub></td>
 * <td>a<sub>23</sub></td>
 * <td>a<sub>33</sub></td>
 * <td>a<sub>14</sub></td>
 * <td>a<sub>24</sub></td>
 * <td>a<sub>34</sub></td>
 * <td>a<sub>44</sub></td>
 * </tr>
 * </table>
 * </p></text>
    </javadoc>
    <javadoc>
      <text>* Constructor for UpperTriangPackMatrix</text>
      <param>nSize of the matrix. Since the matrix must be square, this
 * equals both the number of rows and columns</param>
    </javadoc>
    <method type="constructor" name="UpperTriangPackMatrix" startLine="86" endLine="88" />
    <javadoc>
      <text>* Constructor for UpperTriangPackMatrix</text>
      <param>nSize of the matrix. Since the matrix must be square, this
 * equals both the number of rows and columns</param>
    </javadoc>
    <method type="constructor" name="UpperTriangPackMatrix" startLine="97" endLine="99" />
    <javadoc>
      <text>* Constructor for UpperTriangPackMatrix</text>
      <param>AMatrix to copy contents from. Only the entries of the relevant
 * part are copied</param>
    </javadoc>
    <method type="constructor" name="UpperTriangPackMatrix" startLine="108" endLine="110" />
    <javadoc>
      <text>* Constructor for UpperTriangPackMatrix</text>
      <param>AMatrix to copy contents from. Only the entries of the relevant
 * part are copied</param>
      <param>deepTrue if the copy is deep, else false (giving a shallow copy).
 * For shallow copies, <code>A</code> must be a packed matrix</param>
    </javadoc>
    <method type="constructor" name="UpperTriangPackMatrix" startLine="122" endLine="124" />
    <javadoc>
      <text>* Constructor for UpperTriangPackMatrix</text>
      <param>AMatrix to copy contents from. Only the entries of the relevant
 * part are copied</param>
      <param>deepTrue if the copy is deep, else false (giving a shallow copy).
 * For shallow copies, <code>A</code> must be a packed matrix</param>
    </javadoc>
    <method type="constructor" name="UpperTriangPackMatrix" startLine="136" endLine="138" />
    <method type="void" name="add" startLine="141" endLine="145" />
    <method type="void" name="set" startLine="148" endLine="152" />
    <method type="double" name="get" startLine="155" endLine="159" />
    <javadoc>
      <text>* Checks the row and column indices, and returns the linear data index</text>
    </javadoc>
    <method type="int" name="getIndex" startLine="164" endLine="167" />
    <method type="void" name="copy" startLine="170" endLine="174" />
    <method type="UpperTriangPackMatrix" name="copy" startLine="177" endLine="179" />
  </class>
</source>
