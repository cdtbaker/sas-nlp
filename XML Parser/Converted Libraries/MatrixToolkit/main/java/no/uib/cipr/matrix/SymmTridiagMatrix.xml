<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix">
  <import name="java.util.Arrays" />
  <import name="java.util.Iterator" />
  <import name="com.github.fommil.netlib.LAPACK" />
  <import name="org.netlib.util.intW" />
  <class name="SymmTridiagMatrix" extends="AbstractMatrix" startLine="29">
    <javadoc>
      <text>* Symmetrical tridiagonal matrix. Storage as for{@link no.uib.cipr.matrix.TridiagMatrix TridiagMatrix}, but only one
 * off-diagonal array is stored.</text>
    </javadoc>
    <javadoc>
      <text>* Diagonal and off-diagonal</text>
    </javadoc>
    <declaration type="double[]" name="diag" />
    <javadoc>
      <text>* Size of the matrix</text>
    </javadoc>
    <declaration type="int" name="n" />
    <javadoc>
      <text>* Constructor for SymmTridiagMatrix</text>
      <param>diagMain diagonal</param>
      <param>offDiagOffdiagonals, both upper and lower</param>
      <param>nSize of the matrix. The main diagonal must be at least as long
 * as n, and the off diagonal part must be at least as long as
 * n-1</param>
    </javadoc>
    <method type="constructor" name="SymmTridiagMatrix" startLine="58" endLine="72" />
    <javadoc>
      <text>* Constructor for SymmTridiagMatrix</text>
      <param>diagMain diagonal</param>
      <param>offDiagOffdiagonals. Must be one shorter than diag</param>
    </javadoc>
    <method type="constructor" name="SymmTridiagMatrix" startLine="82" endLine="84" />
    <javadoc>
      <text>* Constructor for SymmTridiagMatrix</text>
      <param>nSize of the matrix. Since the matrix must be square, this
 * equals both the number of rows and columns. <code>n</code>
 * cannot be zero</param>
    </javadoc>
    <method type="constructor" name="SymmTridiagMatrix" startLine="94" endLine="103" />
    <javadoc>
      <text>* Constructor for SymmTridiagMatrix</text>
      <param>AMatrix to copy contents from. Only main and the superdiagonal
 * is copied over</param>
    </javadoc>
    <method type="constructor" name="SymmTridiagMatrix" startLine="112" endLine="114" />
    <javadoc>
      <text>* Constructor for SymmTridiagMatrix</text>
      <param>AMatrix to copy contents from. Only main and the superdiagonal
 * is copied over. It must be square and cannot have any zero
 * dimension lengths</param>
      <param>deepTrue for a deep copy. For shallow copies <code>A</code> must
 * be a <code>SymmTridiagMatrix</code></param>
    </javadoc>
    <method type="constructor" name="SymmTridiagMatrix" startLine="127" endLine="148">
      <scope startLine="137" endLine="143" />
      <scope startLine="143" endLine="147">
        <declaration type="SymmTridiagMatrix" name="B" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the diagonal entries. Length equal <code>n</code></text>
    </javadoc>
    <method type="double[]" name="getDiagonal" startLine="153" endLine="155" />
    <javadoc>
      <text>* Returns the off diagonal entries. Length equal <code>n-1</code></text>
    </javadoc>
    <method type="double[]" name="getOffDiagonal" startLine="160" endLine="162" />
    <method type="void" name="add" startLine="165" endLine="174" />
    <method type="double" name="get" startLine="177" endLine="187" />
    <method type="void" name="set" startLine="190" endLine="199" />
    <method type="SymmTridiagMatrix" name="copy" startLine="202" endLine="204" />
    <method type="SymmTridiagMatrix" name="zero" startLine="207" endLine="211" />
    <method type="Matrix" name="solve" startLine="214" endLine="233">
      <declaration type="double[]" name="Xd" />
      <declaration type="intW" name="info" />
    </method>
    <method type="Vector" name="solve" startLine="236" endLine="240">
      <declaration type="DenseMatrix" name="B" />
    </method>
    <method type="Matrix" name="transSolve" startLine="243" endLine="245" />
    <method type="Vector" name="transSolve" startLine="248" endLine="250" />
    <method type="Matrix" name="transpose" startLine="253" endLine="255" />
    <method type="Iterator<MatrixEntry>" name="iterator" startLine="258" endLine="260" />
    <class name="SymmTridiagMatrixIterator" extends="RefMatrixIterator" startLine="262">
      <javadoc>
        <text>* Iterator over a symmetrical, tridiagonal matrix</text>
      </javadoc>
      <javadoc>
        <text>* Current band, starting with the main diagonal</text>
      </javadoc>
      <declaration type="double[]" name="band" />
      <javadoc>
        <text>* Band index</text>
      </javadoc>
      <declaration type="int" name="bandIndex" />
      <javadoc>
        <text>* Which band in use (0 for main, 1 for off)</text>
      </javadoc>
      <declaration type="int" name="whichBand" />
      <method type="boolean" name="hasNext" startLine="283" endLine="285" />
      <method type="MatrixEntry" name="next" startLine="288" endLine="320">
        <scope startLine="294" endLine="305">
          <comment>Move to the off-diagonal (twice)</comment>
          <comment>If the off-diagonals are zero-sized, we are done</comment>
          <comment>This happens if the matrix is 1*1</comment>
        </scope>
        <comment>Move in the band</comment>
        <comment>Set row index</comment>
        <comment>Set column index</comment>
      </method>
    </class>
  </class>
</source>
