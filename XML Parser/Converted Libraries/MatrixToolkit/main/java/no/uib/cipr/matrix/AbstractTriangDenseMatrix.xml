<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix">
  <import name="java.util.Iterator" />
  <import name="com.github.fommil.netlib.BLAS" />
  <import name="com.github.fommil.netlib.LAPACK" />
  <import name="org.netlib.util.intW" />
  <class name="AbstractTriangDenseMatrix" extends="AbstractDenseMatrix" startLine="30">
    <javadoc>
      <text>* Partial implementation of a triangular, dense matrix</text>
    </javadoc>
    <javadoc>
      <text>* If the matrix is upper triangular</text>
    </javadoc>
    <declaration type="UpLo" name="uplo" />
    <javadoc>
      <text>* If the matrix is unit diagonal or not unit</text>
    </javadoc>
    <declaration type="Diag" name="diag" />
    <javadoc>
      <text>* Leading dimension of the matrix</text>
    </javadoc>
    <declaration type="int" name="ld" />
    <javadoc>
      <text>* Constructor for AbstractTriangDenseMatrix</text>
      <param>nSize of the matrix. Since the matrix must be square, this
 * equals both the number of rows and columns</param>
    </javadoc>
    <method type="constructor" name="AbstractTriangDenseMatrix" startLine="57" endLine="62" />
    <javadoc>
      <text>* Constructor for AbstractTriangDenseMatrix</text>
      <param>AMatrix to copy from</param>
    </javadoc>
    <method type="constructor" name="AbstractTriangDenseMatrix" startLine="70" endLine="72" />
    <javadoc>
      <text>* Constructor for AbstractTriangDenseMatrix</text>
      <param>AMatrix to copy from</param>
      <param>deepIf true, <code>A</code> is copied, else a shallow copy is
 * made and the matrices share underlying storage. For this,
 * <code>A</code> must be a dense matrix</param>
    </javadoc>
    <method type="constructor" name="AbstractTriangDenseMatrix" startLine="84" endLine="86" />
    <javadoc>
      <text>* Constructor for AbstractTriangDenseMatrix</text>
      <param>AMatrix to copy from</param>
      <param>kSize of matrix to refer.
 * <code>k&lt;min(numRows,numColumns)</code></param>
    </javadoc>
    <method type="constructor" name="AbstractTriangDenseMatrix" startLine="97" endLine="99" />
    <javadoc>
      <text>* Constructor for AbstractTriangDenseMatrix</text>
      <param>AMatrix to copy from</param>
      <param>kSize of matrix to refer.
 * <code>k&lt;min(numRows,numColumns)</code></param>
      <param>deepIf true, <code>A</code> is copied, else a shallow copy is
 * made and the matrices share underlying storage. For this,
 * <code>A</code> must be a dense matrix</param>
    </javadoc>
    <method type="constructor" name="AbstractTriangDenseMatrix" startLine="115" endLine="125" />
    <method type="Vector" name="mult" startLine="128" endLine="144">
      <declaration type="double[]" name="yd" />
      <comment>y = alpha*x</comment>
      <comment>y = A*z</comment>
    </method>
    <method type="Vector" name="transMult" startLine="147" endLine="163">
      <declaration type="double[]" name="yd" />
      <comment>y = alpha*x</comment>
      <comment>y = A'*y</comment>
    </method>
    <method type="Matrix" name="mult" startLine="166" endLine="182">
      <declaration type="double[]" name="Cd" />
      <comment>C = alpha*A*C</comment>
    </method>
    <method type="Matrix" name="transAmult" startLine="185" endLine="201">
      <declaration type="double[]" name="Cd" />
      <comment>C = alpha*A'*C</comment>
    </method>
    <method type="Matrix" name="solve" startLine="204" endLine="206" />
    <method type="Vector" name="solve" startLine="209" endLine="213">
      <declaration type="DenseMatrix" name="B" />
    </method>
    <method type="Matrix" name="transSolve" startLine="216" endLine="218" />
    <method type="Vector" name="transSolve" startLine="221" endLine="225">
      <declaration type="DenseMatrix" name="B" />
    </method>
    <method type="Matrix" name="solve" startLine="227" endLine="255">
      <declaration type="double[]" name="Xd" />
      <declaration type="intW" name="info" />
      <comment>Different argument checking to support Hessenberg type matrices for</comment>
      <comment>solvers such as GMRES</comment>
    </method>
    <method type="int" name="getIndex" startLine="258" endLine="261" />
    <method type="Iterator<MatrixEntry>" name="iterator" startLine="264" endLine="266" />
    <class name="TriangDenseMatrixIterator" extends="RefMatrixIterator" startLine="268">
      <method type="MatrixEntry" name="next" startLine="271" endLine="291">
        <scope startLine="277" endLine="280" />
        <scope startLine="281" endLine="288">
          <scope startLine="284" endLine="287" />
          <comment>uplo == UpLo.Upper</comment>
        </scope>
      </method>
    </class>
  </class>
</source>
