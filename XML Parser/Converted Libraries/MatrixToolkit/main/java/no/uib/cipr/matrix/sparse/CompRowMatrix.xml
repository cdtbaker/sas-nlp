<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix.sparse">
  <import name="java.io.IOException" />
  <import name="java.util.ArrayList" />
  <import name="java.util.Arrays" />
  <import name="java.util.HashSet" />
  <import name="java.util.Iterator" />
  <import name="java.util.List" />
  <import name="java.util.Set" />
  <import name="no.uib.cipr.matrix.AbstractMatrix" />
  <import name="no.uib.cipr.matrix.DenseVector" />
  <import name="no.uib.cipr.matrix.Matrix" />
  <import name="no.uib.cipr.matrix.MatrixEntry" />
  <import name="no.uib.cipr.matrix.Vector" />
  <import name="no.uib.cipr.matrix.io.MatrixInfo" />
  <import name="no.uib.cipr.matrix.io.MatrixSize" />
  <import name="no.uib.cipr.matrix.io.MatrixVectorReader" />
  <import name="com.github.fommil.netlib.BLAS" />
  <class name="CompRowMatrix" extends="AbstractMatrix" startLine="42">
    <javadoc>
      <text>* Compressed row storage (CRS) matrix</text>
    </javadoc>
    <javadoc>
      <text>* Matrix data</text>
    </javadoc>
    <declaration type="double[]" name="data" />
    <javadoc>
      <text>* Column indices. These are kept sorted within each row.</text>
    </javadoc>
    <declaration type="int[]" name="columnIndex" />
    <javadoc>
      <text>* Indices to the start of each row</text>
    </javadoc>
    <declaration type="int[]" name="rowPointer" />
    <javadoc>
      <text>* Constructor for CompRowMatrix</text>
      <param>rReader to get sparse matrix from</param>
    </javadoc>
    <method type="constructor" name="CompRowMatrix" startLine="68" endLine="148">
      <declaration type="MatrixInfo" name="info" />
      <declaration type="MatrixSize" name="size" />
      <declaration type="int" name="numEntries" />
      <declaration type="int[]" name="row" />
      <declaration type="int[]" name="column" />
      <declaration type="double[]" name="entry" />
      <declaration type="List<Set<Integer>>" name="rnz" />
      <declaration type="int[][][]" name="nz" />
      <scope startLine="123" endLine="128">
        <declaration type="int" name="j" />
      </scope>
      <scope startLine="139" endLine="142" />
      <scope startLine="144" endLine="147" />
      <comment>Start with a zero-sized matrix</comment>
      <comment>Get matrix information. Use the header if present, else just assume</comment>
      <comment>that the matrix stores real numbers without any symmetry</comment>
      <comment>Check that the matrix is in an acceptable format</comment>
      <comment>Resize the matrix to correct size</comment>
      <comment>Start reading entries</comment>
      <comment>Shift the indices from 1 based to 0 based</comment>
      <comment>Find the number of entries on each row</comment>
      <comment>Allocate some more in case of symmetry</comment>
      <comment>Create the sparse matrix structure</comment>
      <comment>Insert the entries</comment>
      <comment>Put in extra entries from symmetry or skew symmetry</comment>
    </method>
    <javadoc>
      <text>* Constructor for CompRowMatrix</text>
      <param>numRowsNumber of rows</param>
      <param>numColumnsNumber of columns</param>
      <param>nzThe nonzero column indices on each row</param>
    </javadoc>
    <method type="constructor" name="CompRowMatrix" startLine="160" endLine="163" />
    <method type="void" name="construct" startLine="165" endLine="190">
      <declaration type="int" name="nnz" />
      <scope startLine="177" endLine="189">
        <scope startLine="180" endLine="186" />
      </scope>
    </method>
    <method type="void" name="construct" startLine="192" endLine="232">
      <scope startLine="193" endLine="226">
        <scope startLine="194" endLine="205">
          <declaration type="CompRowMatrix" name="Ac" />
        </scope>
        <scope startLine="205" endLine="225">
          <declaration type="List<Set<Integer>>" name="rnz" />
          <declaration type="int[][][]" name="nz" />
          <scope startLine="215" endLine="220">
            <declaration type="int" name="j" />
          </scope>
        </scope>
      </scope>
      <scope startLine="226" endLine="231">
        <declaration type="CompRowMatrix" name="Ac" />
      </scope>
    </method>
    <javadoc>
      <text>* Constructor for CompRowMatrix</text>
      <param>ACopies from this matrix</param>
      <param>deepTrue if the copy is to be deep. If it is a shallow copy,
 * <code>A</code> must be a <code>CompRowMatrix</code></param>
    </javadoc>
    <method type="constructor" name="CompRowMatrix" startLine="243" endLine="246" />
    <javadoc>
      <text>* Constructor for CompRowMatrix</text>
      <param>ACopies from this matrix. The copy will be deep</param>
    </javadoc>
    <method type="constructor" name="CompRowMatrix" startLine="254" endLine="256" />
    <javadoc>
      <text>* Returns the column indices</text>
    </javadoc>
    <method type="int[]" name="getColumnIndices" startLine="261" endLine="263" />
    <javadoc>
      <text>* Returns the row pointers</text>
    </javadoc>
    <method type="int[]" name="getRowPointers" startLine="268" endLine="270" />
    <javadoc>
      <text>* Returns the internal data storage</text>
    </javadoc>
    <method type="double[]" name="getData" startLine="275" endLine="277" />
    <method type="Matrix" name="mult" startLine="280" endLine="298">
      <scope startLine="286" endLine="296">
        <scope startLine="287" endLine="295">
          <declaration type="double" name="dot" />
          <scope startLine="289" endLine="291" />
          <scope startLine="292" endLine="294" />
        </scope>
      </scope>
      <comment>optimised a little bit to avoid zeros in rows, but not to</comment>
      <comment>exploit sparsity of matrix B</comment>
    </method>
    <method type="Vector" name="mult" startLine="301" endLine="333">
      <scope startLine="307" endLine="320">
        <declaration type="double[]" name="xd" />
        <scope startLine="310" endLine="318">
          <declaration type="double" name="dot" />
          <scope startLine="312" endLine="314" />
          <scope startLine="315" endLine="317" />
        </scope>
        <comment>DenseVector optimisations</comment>
      </scope>
      <scope startLine="325" endLine="331">
        <declaration type="double" name="dot" />
        <scope startLine="327" endLine="329" />
      </scope>
      <comment>check dimensions</comment>
      <comment>can't assume this, unfortunately</comment>
      <comment>use sparsity of matrix (not vector), as get(,) is slow</comment>
      <comment>TODO: additional optimisations for mult(ISparseVector, Vector)</comment>
      <comment>note that this would require Sparse BLAS, e.g. BLAS_DUSDOT(,,,,)</comment>
      <comment>@see http:www.netlib.org/blas/blast-forum/chapter3.pdf</comment>
    </method>
    <method type="Vector" name="multAdd" startLine="336" endLine="353">
      <declaration type="double[]" name="xd" />
      <declaration type="double[]" name="yd" />
      <scope startLine="345" endLine="350">
        <declaration type="double" name="dot" />
      </scope>
    </method>
    <method type="Vector" name="transMult" startLine="356" endLine="372">
      <declaration type="double[]" name="xd" />
      <declaration type="double[]" name="yd" />
    </method>
    <method type="Vector" name="transMultAdd" startLine="375" endLine="394">
      <declaration type="double[]" name="xd" />
      <declaration type="double[]" name="yd" />
      <comment>y = 1/alpha * y</comment>
      <comment>y = A'x + y</comment>
      <comment>y = alpha*y = alpha*A'x + y</comment>
    </method>
    <method type="void" name="set" startLine="397" endLine="402">
      <declaration type="int" name="index" />
    </method>
    <method type="void" name="add" startLine="405" endLine="410">
      <declaration type="int" name="index" />
    </method>
    <method type="double" name="get" startLine="413" endLine="423">
      <declaration type="int" name="index" />
    </method>
    <javadoc>
      <text>* Finds the insertion index</text>
    </javadoc>
    <method type="int" name="getIndex" startLine="428" endLine="437">
      <declaration type="int" name="i" />
    </method>
    <method type="CompRowMatrix" name="copy" startLine="440" endLine="442" />
    <method type="Iterator<MatrixEntry>" name="iterator" startLine="445" endLine="447" />
    <method type="CompRowMatrix" name="zero" startLine="450" endLine="453" />
    <method type="Matrix" name="set" startLine="456" endLine="477">
      <declaration type="CompRowMatrix" name="Bc" />
      <scope startLine="466" endLine="470" />
      <comment>Reallocate matrix structure, if necessary</comment>
    </method>
    <class name="CompRowMatrixIterator" startLine="479">
      <implements name="Iterator<MatrixEntry>" />
      <javadoc>
        <text>* Iterator over a compressed row matrix</text>
      </javadoc>
      <declaration type="int" name="row" />
      <declaration type="CompRowMatrixEntry" name="entry" />
      <method type="constructor" name="CompRowMatrixIterator" startLine="488" endLine="491">
        <comment>Find first non-empty row</comment>
      </method>
      <javadoc>
        <text>* Locates the first non-empty row, starting at the current. After the
 * new row has been found, the cursor is also updated</text>
      </javadoc>
      <method type="void" name="nextNonEmptyRow" startLine="497" endLine="501" />
      <method type="boolean" name="hasNext" startLine="503" endLine="505" />
      <method type="MatrixEntry" name="next" startLine="507" endLine="521">
        <scope startLine="515" endLine="518" />
        <comment>Next position is in the same row</comment>
        <comment>Next position is at the following (non-empty) row</comment>
      </method>
      <method type="void" name="remove" startLine="523" endLine="525" />
      <class name="CompRowMatrixEntry" startLine="529">
        <implements name="MatrixEntry" />
        <javadoc>
          <text>* Entry of a compressed row matrix</text>
        </javadoc>
        <declaration type="int" name="row" />
        <javadoc>
          <text>* Updates the entry</text>
        </javadoc>
        <method type="void" name="update" startLine="539" endLine="542" />
        <method type="int" name="row" startLine="544" endLine="546" />
        <method type="int" name="column" startLine="548" endLine="550" />
        <method type="double" name="get" startLine="552" endLine="554" />
        <method type="void" name="set" startLine="556" endLine="558" />
      </class>
    </class>
  </class>
</source>
