<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix.sparse">
  <import name="java.util.Arrays" />
  <import name="no.uib.cipr.matrix.DenseVector" />
  <import name="no.uib.cipr.matrix.Matrix" />
  <import name="no.uib.cipr.matrix.Vector" />
  <class name="ICC" startLine="29">
    <implements name="Preconditioner" />
    <javadoc>
      <text>* Incomplete Cholesky preconditioner without fill-in using a compressed row
 * matrix as internal storage</text>
    </javadoc>
    <javadoc>
      <text>* Factorisation matrix</text>
    </javadoc>
    <declaration type="CompRowMatrix" name="R" />
    <javadoc>
      <text>* Triangular view onto R for solution purposes</text>
    </javadoc>
    <declaration type="Matrix" name="Rt" />
    <javadoc>
      <text>* Temporary vector for solving the factorised system</text>
    </javadoc>
    <declaration type="Vector" name="y" />
    <javadoc>
      <text>* Sets up the ICC preconditioner</text>
      <param>RMatrix to use internally. For best performance, its non-zero
 * pattern must conform to that of the system matrix</param>
    </javadoc>
    <method type="constructor" name="ICC" startLine="57" endLine="65">
      <declaration type="int" name="n" />
    </method>
    <method type="Vector" name="apply" startLine="67" endLine="73">
      <comment>R'y = b, y = R'\b</comment>
      <comment>Rx = R'\b = y</comment>
    </method>
    <method type="Vector" name="transApply" startLine="75" endLine="77" />
    <method type="void" name="setMatrix" startLine="79" endLine="83" />
    <method type="void" name="factor" startLine="85" endLine="139">
      <declaration type="int" name="n" />
      <declaration type="int[]" name="colind" />
      <declaration type="int[]" name="rowptr" />
      <declaration type="double[]" name="data" />
      <declaration type="double[]" name="Rk" />
      <declaration type="int[]" name="diagind" />
      <scope startLine="100" endLine="136">
        <scope startLine="107" endLine="125">
          <declaration type="double" name="Rii" />
          <declaration type="double" name="Rki" />
        </scope>
        <declaration type="double" name="sqRkk" />
        <comment>Expand current row to dense storage</comment>
        <comment>Get the current diagonal entry</comment>
        <comment>Elimination factor</comment>
        <comment>Traverse the sparse row i, reducing on row k</comment>
        <comment>Store the row back into the factorisation matrix</comment>
      </scope>
      <comment>Internal CRS matrix storage</comment>
      <comment>Temporary storage of a dense row</comment>
      <comment>Find the indices to the diagonal entries</comment>
      <comment>Go down along the main diagonal</comment>
    </method>
    <method type="int[]" name="findDiagonalIndices" startLine="141" endLine="154">
      <declaration type="int[]" name="diagind" />
      <scope startLine="144" endLine="151" />
    </method>
  </class>
</source>
