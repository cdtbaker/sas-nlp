<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix.sparse">
  <import name="java.io.IOException" />
  <import name="java.util.ArrayList" />
  <import name="java.util.Arrays" />
  <import name="java.util.HashSet" />
  <import name="java.util.Iterator" />
  <import name="java.util.List" />
  <import name="java.util.Set" />
  <import name="no.uib.cipr.matrix.AbstractMatrix" />
  <import name="no.uib.cipr.matrix.DenseVector" />
  <import name="no.uib.cipr.matrix.Matrix" />
  <import name="no.uib.cipr.matrix.MatrixEntry" />
  <import name="no.uib.cipr.matrix.Vector" />
  <import name="no.uib.cipr.matrix.io.MatrixInfo" />
  <import name="no.uib.cipr.matrix.io.MatrixSize" />
  <import name="no.uib.cipr.matrix.io.MatrixVectorReader" />
  <class name="CompColMatrix" extends="AbstractMatrix" startLine="40">
    <javadoc>
      <text>* Compressed column storage (CCS) matrix</text>
    </javadoc>
    <javadoc>
      <text>* Matrix data</text>
    </javadoc>
    <declaration type="double[]" name="data" />
    <javadoc>
      <text>* Column indices. These are kept sorted within each row.</text>
    </javadoc>
    <declaration type="int[]" name="columnPointer" />
    <javadoc>
      <text>* Indices to the start of each row</text>
    </javadoc>
    <declaration type="int[]" name="rowIndex" />
    <javadoc>
      <text>* Constructor for CompColMatrix</text>
      <param>rReader to get sparse matrix from</param>
    </javadoc>
    <method type="constructor" name="CompColMatrix" startLine="66" endLine="146">
      <declaration type="MatrixInfo" name="info" />
      <declaration type="MatrixSize" name="size" />
      <declaration type="int" name="numEntries" />
      <declaration type="int[]" name="row" />
      <declaration type="int[]" name="column" />
      <declaration type="double[]" name="entry" />
      <declaration type="List<Set<Integer>>" name="cnz" />
      <declaration type="int[][][]" name="nz" />
      <scope startLine="121" endLine="126">
        <declaration type="int" name="j" />
      </scope>
      <scope startLine="137" endLine="140" />
      <scope startLine="142" endLine="145" />
      <comment>Start with a zero-sized matrix</comment>
      <comment>Get matrix information. Use the header if present, else just assume</comment>
      <comment>that the matrix stores real numbers without any symmetry</comment>
      <comment>Check that the matrix is in an acceptable format</comment>
      <comment>Resize the matrix to correct size</comment>
      <comment>Start reading entries</comment>
      <comment>Shift the indices from 1 based to 0 based</comment>
      <comment>Find the number of entries on each column</comment>
      <comment>Allocate some more in case of symmetry</comment>
      <comment>Create the sparse matrix structure</comment>
      <comment>Insert the entries</comment>
      <comment>Put in extra entries from symmetry or skew symmetry</comment>
    </method>
    <javadoc>
      <text>* Constructor for CompColMatrix</text>
      <param>numRowsNumber of rows</param>
      <param>numColumnsNumber of columns</param>
      <param>nzThe nonzero column indices on each column</param>
    </javadoc>
    <method type="constructor" name="CompColMatrix" startLine="158" endLine="161" />
    <method type="void" name="construct" startLine="163" endLine="188">
      <declaration type="int" name="nnz" />
      <scope startLine="175" endLine="187">
        <scope startLine="178" endLine="184" />
      </scope>
    </method>
    <method type="void" name="construct" startLine="190" endLine="229">
      <scope startLine="191" endLine="223">
        <scope startLine="192" endLine="202">
          <declaration type="CompColMatrix" name="Ac" />
        </scope>
        <scope startLine="202" endLine="222">
          <declaration type="List<Set<Integer>>" name="cnz" />
          <declaration type="int[][][]" name="nz" />
          <scope startLine="212" endLine="217">
            <declaration type="int" name="j" />
          </scope>
        </scope>
      </scope>
      <scope startLine="223" endLine="228">
        <declaration type="CompColMatrix" name="Ac" />
      </scope>
    </method>
    <javadoc>
      <text>* Constructor for CompColMatrix</text>
      <param>ACopies from this matrix</param>
      <param>deepTrue if the copy is to be deep. If it is a shallow copy,
 * <code>A</code> must be a <code>CompColMatrix</code></param>
    </javadoc>
    <method type="constructor" name="CompColMatrix" startLine="240" endLine="243" />
    <javadoc>
      <text>* Constructor for CompColMatrix</text>
      <param>ACopies from this matrix. The copy will be deep</param>
    </javadoc>
    <method type="constructor" name="CompColMatrix" startLine="251" endLine="253" />
    <javadoc>
      <text>* Returns the column pointers</text>
    </javadoc>
    <method type="int[]" name="getColumnPointers" startLine="258" endLine="260" />
    <javadoc>
      <text>* Returns the row indices</text>
    </javadoc>
    <method type="int[]" name="getRowIndices" startLine="265" endLine="267" />
    <javadoc>
      <text>* Returns the internal data storage</text>
    </javadoc>
    <method type="double[]" name="getData" startLine="272" endLine="274" />
    <method type="Vector" name="multAdd" startLine="277" endLine="296">
      <declaration type="double[]" name="xd" />
      <comment>y = 1/alpha * y</comment>
      <comment>y = A*x + y</comment>
      <comment>y = alpha*y = alpha*A*x + y</comment>
    </method>
    <method type="Vector" name="transMult" startLine="299" endLine="316">
      <declaration type="double[]" name="xd" />
      <declaration type="double[]" name="yd" />
      <scope startLine="308" endLine="313">
        <declaration type="double" name="dot" />
      </scope>
    </method>
    <method type="Vector" name="transMultAdd" startLine="319" endLine="336">
      <declaration type="double[]" name="xd" />
      <declaration type="double[]" name="yd" />
      <scope startLine="328" endLine="333">
        <declaration type="double" name="dot" />
      </scope>
    </method>
    <method type="void" name="set" startLine="339" endLine="344">
      <declaration type="int" name="index" />
    </method>
    <method type="void" name="add" startLine="347" endLine="352">
      <declaration type="int" name="index" />
    </method>
    <method type="double" name="get" startLine="355" endLine="365">
      <declaration type="int" name="index" />
    </method>
    <javadoc>
      <text>* Finds the insertion index</text>
    </javadoc>
    <method type="int" name="getIndex" startLine="370" endLine="379">
      <declaration type="int" name="i" />
    </method>
    <method type="CompColMatrix" name="copy" startLine="382" endLine="384" />
    <method type="Iterator<MatrixEntry>" name="iterator" startLine="387" endLine="389" />
    <method type="CompColMatrix" name="zero" startLine="392" endLine="395" />
    <class name="CompColMatrixIterator" startLine="397">
      <implements name="Iterator<MatrixEntry>" />
      <javadoc>
        <text>* Iterator over a compressed column matrix</text>
      </javadoc>
      <declaration type="int" name="column" />
      <declaration type="CompColMatrixEntry" name="entry" />
      <method type="constructor" name="CompColMatrixIterator" startLine="406" endLine="409">
        <comment>Find first non-empty column</comment>
      </method>
      <javadoc>
        <text>* Locates the first non-empty column, starting at the current. After
 * the new column has been found, the cursor is also updated</text>
      </javadoc>
      <method type="void" name="nextNonEmptyColumn" startLine="415" endLine="420" />
      <method type="boolean" name="hasNext" startLine="422" endLine="424" />
      <method type="MatrixEntry" name="next" startLine="426" endLine="440">
        <scope startLine="434" endLine="437" />
        <comment>Next position is in the same column</comment>
        <comment>Next position is at the following (non-empty) column</comment>
      </method>
      <method type="void" name="remove" startLine="442" endLine="444" />
      <class name="CompColMatrixEntry" startLine="448">
        <implements name="MatrixEntry" />
        <javadoc>
          <text>* Entry of a compressed column matrix</text>
        </javadoc>
        <declaration type="int" name="column" />
        <javadoc>
          <text>* Updates the entry</text>
        </javadoc>
        <method type="void" name="update" startLine="458" endLine="461" />
        <method type="int" name="row" startLine="463" endLine="465" />
        <method type="int" name="column" startLine="467" endLine="469" />
        <method type="double" name="get" startLine="471" endLine="473" />
        <method type="void" name="set" startLine="475" endLine="477" />
      </class>
    </class>
  </class>
</source>
