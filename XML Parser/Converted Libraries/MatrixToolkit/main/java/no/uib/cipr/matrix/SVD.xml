<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix">
  <import name="com.github.fommil.netlib.LAPACK" />
  <import name="org.netlib.util.intW" />
  <class name="SVD" startLine="26">
    <javadoc>
      <text>* Computes singular value decompositions</text>
    </javadoc>
    <javadoc>
      <text>* Work array</text>
    </javadoc>
    <declaration type="double[]" name="work" />
    <javadoc>
      <text>* Work array</text>
    </javadoc>
    <declaration type="int[]" name="iwork" />
    <javadoc>
      <text>* Matrix dimension</text>
    </javadoc>
    <declaration type="int" name="m" />
    <javadoc>
      <text>* Compute the singular vectors fully?</text>
    </javadoc>
    <declaration type="boolean" name="vectors" />
    <javadoc>
      <text>* Job to do</text>
    </javadoc>
    <declaration type="JobSVD" name="job" />
    <javadoc>
      <text>* The singular values</text>
    </javadoc>
    <declaration type="double[]" name="S" />
    <javadoc>
      <text>* Singular vectors</text>
    </javadoc>
    <declaration type="DenseMatrix" name="U" />
    <javadoc>
      <text>* Creates an empty SVD which will compute all singular values and vectors</text>
      <param>mNumber of rows</param>
      <param>nNumber of columns</param>
    </javadoc>
    <method type="constructor" name="SVD" startLine="74" endLine="76" />
    <javadoc>
      <text>* Creates an empty SVD</text>
      <param>mNumber of rows</param>
      <param>nNumber of columns</param>
      <param>vectorsTrue to compute the singular vectors, false for just the
 * singular values</param>
    </javadoc>
    <method type="constructor" name="SVD" startLine="89" endLine="135">
      <scope startLine="96" endLine="99" />
      <declaration type="double[]" name="worksize" />
      <declaration type="intW" name="info" />
      <declaration type="int" name="lwork" />
      <scope startLine="117" endLine="130" />
      <comment>Allocate space for the decomposition</comment>
      <comment>Find workspace requirements</comment>
      <comment>Query optimal workspace</comment>
      <comment>Allocate workspace</comment>
    </method>
    <javadoc>
      <text>* Convenience method for computing a full SVD</text>
      <param>AMatrix to decompose, not modified</param>
      <return>Newly allocated factorization</return>
      <throws>NotConvergedException</throws>
    </javadoc>
    <method type="SVD" name="factorize" startLine="145" endLine="147" />
    <javadoc>
      <text>* Computes an SVD</text>
      <param>AMatrix to decompose. Size must conform, and it will be
 * overwritten on return. Pass a copy to avoid this</param>
      <return>The current decomposition</return>
      <throws>NotConvergedException</throws>
    </javadoc>
    <method type="SVD" name="factor" startLine="158" endLine="177">
      <declaration type="intW" name="info" />
    </method>
    <javadoc>
      <text>* True if singular vectors are stored</text>
    </javadoc>
    <method type="boolean" name="hasSingularVectors" startLine="182" endLine="184" />
    <javadoc>
      <text>* Returns the left singular vectors, column-wise. Not available for partial
 * decompositions</text>
      <return>Matrix of size m*m</return>
    </javadoc>
    <method type="DenseMatrix" name="getU" startLine="192" endLine="194" />
    <javadoc>
      <text>* Returns the right singular vectors, row-wise. Not available for partial
 * decompositions</text>
      <return>Matrix of size n*n</return>
    </javadoc>
    <method type="DenseMatrix" name="getVt" startLine="202" endLine="204" />
    <javadoc>
      <text>* Returns the singular values (stored in descending order)</text>
      <return>Array of size min(m,n)</return>
    </javadoc>
    <method type="double[]" name="getS" startLine="211" endLine="213" />
  </class>
</source>
