<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix.io">
  <import name="java.io.BufferedReader" />
  <import name="java.io.EOFException" />
  <import name="java.io.IOException" />
  <import name="java.io.Reader" />
  <import name="java.io.StreamTokenizer" />
  <import name="java.util.LinkedList" />
  <import name="java.util.List" />
  <class name="MatrixVectorReader" extends="BufferedReader" startLine="31">
    <javadoc>
      <text>* Reads matrices and vectors</text>
    </javadoc>
    <javadoc>
      <text>* Reads the entries of the matrix or vector</text>
    </javadoc>
    <declaration type="StreamTokenizer" name="st" />
    <javadoc>
      <text>* Constructor for MatrixVectorReader</text>
      <param>inA Reader</param>
    </javadoc>
    <method type="constructor" name="MatrixVectorReader" startLine="47" endLine="50" />
    <javadoc>
      <text>* Constructor for MatrixVectorReader</text>
      <param>inA Reader</param>
      <param>szInput buffer size</param>
    </javadoc>
    <method type="constructor" name="MatrixVectorReader" startLine="60" endLine="63" />
    <javadoc>
      <text>* Sets up the stream tokenizer</text>
    </javadoc>
    <method type="void" name="setup" startLine="68" endLine="87">
      <comment>Parse numbers as words</comment>
      <comment>Characters as words</comment>
      <comment>Skip comments</comment>
      <comment>Skip whitespace and newlines</comment>
    </method>
    <javadoc>
      <text>* Shifts the indices. Useful for converting between 0- and 1-based
 * indicing.</text>
      <param>numAdded to every index</param>
      <param>indicesIndices to shift</param>
    </javadoc>
    <method type="void" name="add" startLine="98" endLine="101" />
    <javadoc>
      <text>* Reads a line, and trims it of surrounding whitespace</text>
      <throws>IOExceptionIf either I/O errors occur, or there was nothing to read</throws>
    </javadoc>
    <method type="String" name="readTrimmedLine" startLine="109" endLine="115">
      <declaration type="String" name="line" />
    </method>
    <javadoc>
      <text>* Reads the matrix info for the Matrix Market exchange format. The line
 * must consist of exactly 5 space-separated entries, the first being
 * "%%MatrixMarket"</text>
    </javadoc>
    <method type="MatrixInfo" name="readMatrixInfo" startLine="122" endLine="174">
      <declaration type="String[]" name="component" />
      <declaration type="boolean" name="sparse" />
      <declaration type="MatrixInfo.MatrixField" name="field" />
      <declaration type="MatrixInfo.MatrixSymmetry" name="symmetry" />
      <comment>Read header</comment>
      <comment>This will always be "matrix"</comment>
      <comment>Sparse or dense?</comment>
      <comment>Dataformat</comment>
      <comment>Matrix pattern</comment>
      <comment>Pack together. This also verifies the format</comment>
    </method>
    <javadoc>
      <text>* Reads the vector info for the Matrix Market exchange format. The line
 * must consist of exactly 4 space-separated entries, the first being
 * "%%MatrixMarket"</text>
    </javadoc>
    <method type="VectorInfo" name="readVectorInfo" startLine="181" endLine="219">
      <declaration type="String[]" name="component" />
      <declaration type="boolean" name="sparse" />
      <declaration type="VectorInfo.VectorField" name="field" />
      <comment>Read header</comment>
      <comment>This will always be "vector"</comment>
      <comment>Sparse or dense?</comment>
      <comment>Dataformat</comment>
      <comment>Pack together. This also verifies the format</comment>
    </method>
    <javadoc>
      <text>* Checks if a Matrix Market header is present ("%%MatrixMarket")</text>
      <return>True if a header was found, else false</return>
      <throws>IOException</throws>
    </javadoc>
    <method type="boolean" name="hasInfo" startLine="227" endLine="234">
      <declaration type="String[]" name="component" />
      <comment>Read a line, then skip back</comment>
    </method>
    <javadoc>
      <text>* Reads all the comments (lines starting with '%'). Positions the reader at
 * the first non-comment line. Can only be called after reading the matrix
 * or vector info. The comments read does not include '%' or the newline</text>
    </javadoc>
    <method type="String[]" name="readComments" startLine="241" endLine="254">
      <declaration type="List<String>" name="list" />
      <scope startLine="243" endLine="252">
        <declaration type="String" name="line" />
        <scope startLine="247" endLine="250" />
        <comment>Line length equal 1024 at most</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Reads in the size of a matrix. Skips initial comments</text>
    </javadoc>
    <method type="MatrixSize" name="readMatrixSize" startLine="259" endLine="270">
      <declaration type="int" name="numRows" />
      <scope startLine="266" endLine="269">
        <declaration type="int" name="numEntries" />
      </scope>
      <comment>Always read the matrix size</comment>
      <comment>For coordinate matrices we also read the number of entries</comment>
    </method>
    <javadoc>
      <text>* Reads in the size of an array matrix. Skips initial comments</text>
    </javadoc>
    <method type="MatrixSize" name="readArraySize" startLine="275" endLine="279">
      <declaration type="int" name="numRows" />
    </method>
    <javadoc>
      <text>* Reads in the size of a coordinate matrix. Skips initial comments</text>
    </javadoc>
    <method type="MatrixSize" name="readCoordinateSize" startLine="284" endLine="288">
      <declaration type="int" name="numRows" />
    </method>
    <javadoc>
      <text>* Reads in the size of a vector. Skips initial comments</text>
    </javadoc>
    <method type="VectorSize" name="readVectorSize" startLine="293" endLine="304">
      <declaration type="int" name="size" />
      <scope startLine="300" endLine="303">
        <declaration type="int" name="numEntries" />
      </scope>
      <comment>Always read the vector size</comment>
      <comment>For coordinate vectors we also read the number of entries</comment>
    </method>
    <javadoc>
      <text>* Reads in the size of a dense vector. Skips initial comments</text>
    </javadoc>
    <method type="VectorSize" name="readVectorArraySize" startLine="309" endLine="313">
      <declaration type="int" name="size" />
    </method>
    <javadoc>
      <text>* Reads in the size of a coordinate vector. Skips initial comments</text>
    </javadoc>
    <method type="VectorSize" name="readVectorCoordinateSize" startLine="318" endLine="322">
      <declaration type="int" name="size" />
    </method>
    <javadoc>
      <text>* Reads the array data</text>
    </javadoc>
    <method type="void" name="readArray" startLine="327" endLine="331">
      <declaration type="int" name="size" />
    </method>
    <javadoc>
      <text>* Reads the array data</text>
    </javadoc>
    <method type="void" name="readArray" startLine="336" endLine="340">
      <declaration type="int" name="size" />
    </method>
    <javadoc>
      <text>* Reads the array data</text>
    </javadoc>
    <method type="void" name="readArray" startLine="345" endLine="349">
      <declaration type="int" name="size" />
    </method>
    <javadoc>
      <text>* Reads the array data</text>
    </javadoc>
    <method type="void" name="readArray" startLine="354" endLine="358">
      <declaration type="int" name="size" />
    </method>
    <javadoc>
      <text>* Reads the array data. The first array will contain real entries, while
 * the second contain imaginary entries</text>
    </javadoc>
    <method type="void" name="readArray" startLine="364" endLine="373">
      <declaration type="int" name="size" />
      <scope startLine="369" endLine="372" />
    </method>
    <javadoc>
      <text>* Reads the array data. The first array will contain real entries, while
 * the second contain imaginary entries</text>
    </javadoc>
    <method type="void" name="readArray" startLine="379" endLine="388">
      <declaration type="int" name="size" />
      <scope startLine="384" endLine="387" />
    </method>
    <javadoc>
      <text>* Reads a coordinate vector</text>
    </javadoc>
    <method type="void" name="readCoordinate" startLine="393" endLine="402">
      <declaration type="int" name="size" />
      <scope startLine="398" endLine="401" />
    </method>
    <javadoc>
      <text>* Reads a coordinate vector</text>
    </javadoc>
    <method type="void" name="readCoordinate" startLine="407" endLine="416">
      <declaration type="int" name="size" />
      <scope startLine="412" endLine="415" />
    </method>
    <javadoc>
      <text>* Reads a coordinate vector</text>
    </javadoc>
    <method type="void" name="readCoordinate" startLine="421" endLine="430">
      <declaration type="int" name="size" />
      <scope startLine="426" endLine="429" />
    </method>
    <javadoc>
      <text>* Reads a coordinate vector</text>
    </javadoc>
    <method type="void" name="readCoordinate" startLine="435" endLine="444">
      <declaration type="int" name="size" />
      <scope startLine="440" endLine="443" />
    </method>
    <javadoc>
      <text>* Reads a coordinate vector. First data array contains real entries, and
 * the second contains imaginary entries</text>
    </javadoc>
    <method type="void" name="readCoordinate" startLine="451" endLine="461">
      <declaration type="int" name="size" />
      <scope startLine="456" endLine="460" />
    </method>
    <javadoc>
      <text>* Reads a coordinate vector. First data array contains real entries, and
 * the second contains imaginary entries</text>
    </javadoc>
    <method type="void" name="readCoordinate" startLine="468" endLine="478">
      <declaration type="int" name="size" />
      <scope startLine="473" endLine="477" />
    </method>
    <javadoc>
      <text>* Reads a pattern vector</text>
    </javadoc>
    <method type="void" name="readPattern" startLine="483" endLine="487">
      <declaration type="int" name="size" />
    </method>
    <javadoc>
      <text>* Reads a coordinate matrix</text>
    </javadoc>
    <method type="void" name="readCoordinate" startLine="493" endLine="503">
      <declaration type="int" name="size" />
      <scope startLine="498" endLine="502" />
    </method>
    <javadoc>
      <text>* Reads a coordinate matrix</text>
    </javadoc>
    <method type="void" name="readCoordinate" startLine="509" endLine="519">
      <declaration type="int" name="size" />
      <scope startLine="514" endLine="518" />
    </method>
    <javadoc>
      <text>* Reads a coordinate matrix</text>
    </javadoc>
    <method type="void" name="readCoordinate" startLine="525" endLine="535">
      <declaration type="int" name="size" />
      <scope startLine="530" endLine="534" />
    </method>
    <javadoc>
      <text>* Reads a coordinate matrix</text>
    </javadoc>
    <method type="void" name="readCoordinate" startLine="541" endLine="551">
      <declaration type="int" name="size" />
      <scope startLine="546" endLine="550" />
    </method>
    <javadoc>
      <text>* Reads a pattern matrix</text>
    </javadoc>
    <method type="void" name="readPattern" startLine="556" endLine="565">
      <declaration type="int" name="size" />
      <scope startLine="561" endLine="564" />
    </method>
    <javadoc>
      <text>* Reads a coordinate matrix. First data array contains real entries, and
 * the second contains imaginary entries</text>
    </javadoc>
    <method type="void" name="readCoordinate" startLine="572" endLine="584">
      <declaration type="int" name="size" />
      <scope startLine="578" endLine="583" />
    </method>
    <javadoc>
      <text>* Reads a coordinate matrix. First data array contains real entries, and
 * the second contains imaginary entries</text>
    </javadoc>
    <method type="void" name="readCoordinate" startLine="591" endLine="603">
      <declaration type="int" name="size" />
      <scope startLine="597" endLine="602" />
    </method>
    <javadoc>
      <text>* Reads an integer</text>
    </javadoc>
    <method type="int" name="getInt" startLine="608" endLine="616" />
    <javadoc>
      <text>* Reads a long</text>
    </javadoc>
    <method type="long" name="getLong" startLine="621" endLine="629" />
    <javadoc>
      <text>* Reads a double</text>
    </javadoc>
    <method type="double" name="getDouble" startLine="634" endLine="642" />
    <javadoc>
      <text>* Reads a float</text>
    </javadoc>
    <method type="float" name="getFloat" startLine="647" endLine="655" />
  </class>
</source>
