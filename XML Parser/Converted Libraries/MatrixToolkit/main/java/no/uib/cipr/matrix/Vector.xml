<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix">
  <import name="java.io.Serializable" />
  <interface name="Vector" startLine="25">
    <implements name="Iterable<VectorEntry>" />
    <implements name="Serializable" />
    <javadoc>
      <text>* Basic vector interface. It holds <code>double</code>s in an array, and is
 * used alongside <code>Matrix</code> in numerical computations. Implementing
 * classes decides on the actual storage.
 * <h4>Basic operations</h4>
 * <p>
 * Use <code>size</code> to get the vector size. <code>get(int)</code> gets
 * an element, and there are corresponding <code>set(int,double)</code> and
 * <code>add(int,double)</code> methods as well. Note that vector indices are
 * zero-based (typical for Java and C). This means that they range from 0 to
 * <code>size-1</code>. It is legal to have <code>size</code> equal zero.
 * </p>
 * <p>
 * Other basic operations are <code>zero</code> which zeros all the entries of
 * the vector, which can be cheaper than either zeroing the vector manually, or
 * creating a new vector, and the operation <code>copy</code> which creates a
 * deep copy of the vector. This copy has separate storage, but starts with the
 * same contents as the current vector.
 * </p>
 * <h4>Iterators</h4>
 * <p>
 * The vector interface extends <code>Iterable</code>, and the iterator
 * returns a <code>VectorEntry</code> which contains current index and entry
 * value. Note that the iterator may skip non-zero entries. Using an iterator,
 * many simple and efficient algorithms can be created. The iterator also
 * permits changing values in the vector, however only non-zero entries can be
 * changed.
 * </p>
 * <h4>Basic linear algebra</h4>
 * <p>
 * A selection of basic linear algebra operations are available. To ensure high
 * efficiency, little or no internal memory allocation is done, and the user is
 * required to supply the output arguments.
 * </p>
 * <p>
 * The operations available include:
 * </p>
 * <dl>
 * <dt><i>Additions</i></dt>
 * <dd>Vectors can be added to each other, even if their underlying vector
 * structures are incompatible</dd>
 * <dt><i>Scaling</i></dt>
 * <dd>Scalar multiplication (scaling) of a whole vector</dd>
 * <dt><i>Norms</i></dt>
 * <dd>Both innerproducts and norms can be computed. Several common norms are
 * supported</dd>
 * </dl></text>
    </javadoc>
    <method name="size" type="int" startLine="76" endLine="79" />
    <javadoc>
      <text>* Size of the vector</text>
    </javadoc>
    <method name="set" type="void" startLine="81" endLine="84" />
    <javadoc>
      <text>* <code>x(index) = value</code></text>
    </javadoc>
    <method name="add" type="void" startLine="86" endLine="89" />
    <javadoc>
      <text>* <code>x(index) += value</code></text>
    </javadoc>
    <method name="get" type="double" startLine="91" endLine="94" />
    <javadoc>
      <text>* Returns <code>x(index)</code></text>
    </javadoc>
    <method name="copy" type="Vector" startLine="96" endLine="99" />
    <javadoc>
      <text>* Creates a deep copy of the vector</text>
    </javadoc>
    <method name="zero" type="Vector" startLine="101" endLine="105" />
    <javadoc>
      <text>* Zeros all the entries in the vector, while preserving any underlying
 * structure</text>
    </javadoc>
    <method name="scale" type="Vector" startLine="107" endLine="112" />
    <javadoc>
      <text>* <code>x=alpha*x</code></text>
      <return>x</return>
    </javadoc>
    <method name="set" type="Vector" startLine="114" endLine="119" />
    <javadoc>
      <text>* <code>x=y</code></text>
      <return>x</return>
    </javadoc>
    <method name="set" type="Vector" startLine="121" endLine="126" />
    <javadoc>
      <text>* <code>x=alpha*y</code></text>
      <return>x</return>
    </javadoc>
    <method name="add" type="Vector" startLine="128" endLine="133" />
    <javadoc>
      <text>* <code>x = y + x</code></text>
      <return>x</return>
    </javadoc>
    <method name="add" type="Vector" startLine="135" endLine="140" />
    <javadoc>
      <text>* <code>x = alpha*y + x</code></text>
      <return>x</return>
    </javadoc>
    <method name="dot" type="double" startLine="142" endLine="145" />
    <javadoc>
      <text>* <code>x<sup>T</sup>*y</code></text>
    </javadoc>
    <method name="norm" type="double" startLine="147" endLine="153" />
    <javadoc>
      <text>* Computes the given norm of the vector</text>
      <param>typeThe type of norm to compute</param>
    </javadoc>
    <javadoc>
      <text>* Supported vector-norms. The difference between the two 2-norms is that
 * one is fast, but can overflow, while the robust version is overflow
 * resistant, but slower.</text>
    </javadoc>
    <javadoc>
      <text>* Sum of the absolute values of the entries</text>
    </javadoc>
    <javadoc>
      <text>* The root of sum of squares</text>
    </javadoc>
    <javadoc>
      <text>* As the 2 norm may overflow, an overflow resistant version is also
 * available. Note that it may be slower.</text>
    </javadoc>
    <javadoc>
      <text>* Largest entry in absolute value</text>
    </javadoc>
  </interface>
</source>
