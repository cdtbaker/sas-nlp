<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix.sparse">
  <import name="lombok.AllArgsConstructor" />
  <import name="lombok.ToString" />
  <import name="lombok.extern.java.Log" />
  <import name="no.uib.cipr.matrix.AbstractMatrix" />
  <import name="no.uib.cipr.matrix.Matrix" />
  <import name="no.uib.cipr.matrix.MatrixEntry" />
  <import name="no.uib.cipr.matrix.Vector" />
  <import name="no.uib.cipr.matrix.io.MatrixInfo" />
  <import name="no.uib.cipr.matrix.io.MatrixSize" />
  <import name="no.uib.cipr.matrix.io.MatrixVectorReader" />
  <import name="java.io.IOException" />
  <import name="java.util.Iterator" />
  <class name="LinkedSparseMatrix" extends="AbstractMatrix" startLine="17">
    <javadoc>
      <text>* A Linked List (with shortcuts to important nodes)
 * implementation of an {@code n x m} Matrix with {@code z} elements that
 * has a typical {@code O(z / m)} insertion / lookup cost
 * and an iterator that traverses columns then rows:
 * a good fit for unstructured sparse matrices. A secondary
 * link maintains fast transpose iteration.
 * <p/>
 * However, memory requirements
 * ({@code 1 instance (8 bytes), 2 int (16 bytes), 2 ref (16 bytes), 1 double (8 bytes) = 48 bytes}per matrix element, plus {@code 8 x numcol + 8 x numrow bytes}s for the cache) are slightly higher
 * than structured sparse matrix storage. Note that on 32 bit JVMs, or on 64 bit JVMs
 * with <a href="https://wikis.oracle.com/display/HotSpotInternals/CompressedOops">CompressedOops</a>
 * enabled, references and ints only cost 4 bytes each, bringing the cost to 28 bytes per element.</text>
      <author>Sam Halliday</author>
    </javadoc>
    <class name="Node" startLine="38">
      <declaration type="int" name="row" />
      <declaration type="double" name="val" />
      <declaration type="Node" name="rowTail" />
      <class name="Linked" startLine="49">
        <declaration type="Node" name="head" />
        <declaration type="Node[]" name="rows" />
        <method type="boolean" name="isHead" startLine="55" endLine="57" />
        <method type="boolean" name="isNextByRow" startLine="60" endLine="62" />
        <method type="boolean" name="isNextByCol" startLine="65" endLine="67" />
        <method type="double" name="get" startLine="69" endLine="82">
          <scope startLine="72" endLine="76">
            <declaration type="Node" name="node" />
          </scope>
          <scope startLine="76" endLine="80">
            <declaration type="Node" name="node" />
          </scope>
        </method>
        <method type="void" name="set" startLine="84" endLine="103">
          <scope startLine="85" endLine="88" />
          <scope startLine="91" endLine="102">
            <declaration type="Node" name="prevRow" />
            <scope startLine="95" endLine="101">
              <declaration type="Node" name="prevCol" />
              <declaration type="Node" name="nextCol" />
            </scope>
          </scope>
        </method>
        <method type="Node" name="findNextByCol" startLine="105" endLine="112">
          <declaration type="Node" name="cur" />
          <scope startLine="107" endLine="110" />
        </method>
        <method type="void" name="updateCache" startLine="114" endLine="119" />
        <method type="void" name="delete" startLine="121" endLine="138">
          <scope startLine="122" endLine="125" />
          <declaration type="Node" name="precRow" />
          <declaration type="Node" name="precCol" />
          <scope startLine="128" endLine="132" />
          <scope startLine="133" endLine="137" />
        </method>
        <method type="Node" name="findPreceedingByRow" startLine="142" endLine="151">
          <declaration type="Node" name="last" />
          <declaration type="Node" name="cur" />
          <scope startLine="145" endLine="149" />
        </method>
        <method type="Node" name="cachedByRow" startLine="154" endLine="159" />
        <method type="Node" name="findPreceedingByCol" startLine="161" endLine="170">
          <declaration type="Node" name="last" />
          <declaration type="Node" name="cur" />
          <scope startLine="164" endLine="168" />
        </method>
        <method type="Node" name="cachedByCol" startLine="172" endLine="177" />
        <method type="Node" name="startOfRow" startLine="179" endLine="185">
          <declaration type="Node" name="prec" />
        </method>
        <method type="Node" name="startOfCol" startLine="187" endLine="193">
          <declaration type="Node" name="prec" />
        </method>
        <declaration type="Linked" name="links" />
        <method type="constructor" name="LinkedSparseMatrix" startLine="198" endLine="201" />
        <method type="constructor" name="LinkedSparseMatrix" startLine="203" endLine="207" />
        <method type="constructor" name="LinkedSparseMatrix" startLine="209" endLine="232">
          <scope startLine="211" endLine="229">
            <declaration type="MatrixInfo" name="info" />
            <declaration type="MatrixSize" name="size" />
            <declaration type="int" name="nz" />
            <declaration type="int[]" name="row" />
            <declaration type="int[]" name="column" />
            <declaration type="double[]" name="entry" />
          </scope>
          <scope startLine="229" endLine="231" />
        </method>
        <method type="Matrix" name="zero" startLine="236" endLine="239" />
        <method type="double" name="get" startLine="242" endLine="244" />
        <method type="void" name="set" startLine="247" endLine="250" />
        <class name="ReusableMatrixEntry" startLine="253">
          <implements name="MatrixEntry" />
          <declaration type="int" name="row" />
          <declaration type="double" name="val" />
          <method type="int" name="column" startLine="259" endLine="261" />
          <method type="int" name="row" startLine="264" endLine="266" />
          <method type="double" name="get" startLine="269" endLine="271" />
          <method type="void" name="set" startLine="274" endLine="276" />
          <method type="String" name="toString" startLine="279" endLine="281" />
          <method type="Iterator<MatrixEntry>" name="iterator" startLine="286" endLine="310">
            <declaration type="Node" name="cur" />
            <declaration type="ReusableMatrixEntry" name="entry" />
            <method type="boolean" name="hasNext" startLine="292" endLine="294" />
            <method type="MatrixEntry" name="next" startLine="297" endLine="303" />
            <method type="void" name="remove" startLine="306" endLine="308" />
          </method>
          <method type="Matrix" name="scale" startLine="313" endLine="319" />
          <method type="Matrix" name="copy" startLine="322" endLine="324" />
          <method type="Matrix" name="transpose" startLine="327" endLine="338">
            <declaration type="Linked" name="old" />
            <declaration type="Node" name="node" />
            <scope startLine="333" endLine="336" />
          </method>
          <method type="Vector" name="multAdd" startLine="341" endLine="350">
            <declaration type="Node" name="node" />
            <scope startLine="345" endLine="348" />
          </method>
          <method type="Vector" name="transMultAdd" startLine="353" endLine="362">
            <declaration type="Node" name="node" />
            <scope startLine="357" endLine="360" />
          </method>
          <method type="Matrix" name="multAdd" startLine="367" endLine="385">
            <scope startLine="371" endLine="383">
              <declaration type="Node" name="row" />
              <scope startLine="374" endLine="382">
                <declaration type="Node" name="node" />
                <declaration type="double" name="v" />
                <scope startLine="377" endLine="380" />
              </scope>
            </scope>
          </method>
          <method type="Matrix" name="transBmultAdd" startLine="388" endLine="406">
            <scope startLine="392" endLine="404">
              <declaration type="Node" name="row" />
              <scope startLine="395" endLine="403">
                <declaration type="Node" name="node" />
                <declaration type="double" name="v" />
                <scope startLine="398" endLine="401" />
              </scope>
            </scope>
          </method>
          <method type="Matrix" name="transAmultAdd" startLine="409" endLine="427">
            <scope startLine="413" endLine="425">
              <declaration type="Node" name="row" />
              <scope startLine="416" endLine="424">
                <declaration type="Node" name="node" />
                <declaration type="double" name="v" />
                <scope startLine="419" endLine="422" />
              </scope>
            </scope>
          </method>
          <method type="Matrix" name="transABmultAdd" startLine="430" endLine="448">
            <scope startLine="434" endLine="446">
              <declaration type="Node" name="row" />
              <scope startLine="437" endLine="445">
                <declaration type="Node" name="node" />
                <declaration type="double" name="v" />
                <scope startLine="440" endLine="443" />
              </scope>
            </scope>
          </method>
        </class>
      </class>
    </class>
    <comment>java.util.LinkedList is doubly linked and therefore too heavyweight.</comment>
    <comment>there is a lot of duplicated code in this class between</comment>
    <comment>row and col linkages, but subtle differences make it</comment>
    <comment>extremely difficult to factor away.</comment>
    <comment>true if node exists, it's row tail exists, and has this row/col</comment>
    <comment>true if node exists, it's col tail exists, and has this row/col</comment>
    <comment>returns the node that either references this</comment>
    <comment>index, or should reference it if inserted.</comment>
    <comment>helper for findPreceeding</comment>
    <comment>avoids object creation</comment>
    <comment>TODO: optimise matrix mults based on RHS Matrix</comment>
  </class>
</source>
