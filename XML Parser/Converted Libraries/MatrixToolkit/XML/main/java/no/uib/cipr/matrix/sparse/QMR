<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="no.uib.cipr.matrix.Matrix"/>
        <import package="no.uib.cipr.matrix.NotConvergedException"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <import package="no.uib.cipr.matrix.Vector.Norm"/>
        <class name="QMR" extends="AbstractIterativeSolver" line="31">
            <javadoc line="31">
                Quasi-Minimal Residual method. QMR solves the unsymmetric linear system
                 * &lt;code&gt;Ax = b&lt;/code&gt; using the Quasi-Minimal Residual method. QMR uses two
                 * preconditioners, and by default these are the same preconditioner.                
                <@author>
                    r Templates                    
                </@author>
            </javadoc>
            <declaration name="M1" type="Preconditioner" line="40"/>
            <javadoc line="40">
                Left preconditioner                
            </javadoc>
            <declaration name="M2" type="Preconditioner" line="45"/>
            <javadoc line="45">
                Right preconditioner                
            </javadoc>
            <declaration name="r" type="Vector" line="50"/>
            <javadoc line="50">
                Vectors for use in the iterative solution process                
            </javadoc>
            <javadoc line="56">
                Constructor for QMR. Uses the given vector as template for creating
                 * scratch vectors. Typically, the solution or the right hand side vector
                 * can be passed, and the template is not modified                
                <@param>
                    m templateVector to use as template for the work vectors needed in the
                     * solution process                    
                </@param>
            </javadoc>
            <method name="QMR" type="constructor" line="65"/>
            <javadoc line="84">
                Constructor for QMR. Uses the given vector as template for creating
                 * scratch vectors. Typically, the solution or the right hand side vector
                 * can be passed, and the template is not modified. Allows setting different
                 * right and left preconditioners                
                <@param>
                    m templateVector to use as template for the work vectors needed in the
                     * solution process                    
                </@param>
                <@param>
                    m M1Left preconditioner                    
                </@param>
                <@param>
                    m M2Right preconditioner                    
                </@param>
            </javadoc>
            <method name="QMR" type="constructor" line="98"/>
            <method name="solve" type="Vector" line="118">
                <declaration name="rho" type="double" line="121"/>
                <scope line="133">
                    <scope line="157"/>
                    <scope line="160"/>
                    <scope line="199"/>
                    <scope line="202">
                        <declaration name="val" type="double" line="203"/>
                    </scope>
                </scope>
            </method>
            <method name="setPreconditioner" type="void" line="216"/>
        </class>
    </source>