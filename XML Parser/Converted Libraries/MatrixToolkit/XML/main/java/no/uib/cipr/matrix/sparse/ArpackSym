<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="com.github.fommil.netlib.ARPACK"/>
        <import package="lombok.extern.java.Log"/>
        <import package="no.uib.cipr.matrix"/>
        <import package="org.netlib.util.doubleW"/>
        <import package="org.netlib.util.intW"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.Map"/>
        <import package="java.util.TreeMap"/>
        <class name="ArpackSym" line="13">
            <javadoc line="13">
                Uses ARPACK to partially solve symmetric eigensystems
                  (ARPACK is designed to compute a subset of eigenvalues/eigenvectors).                
                <@author>
                    r Sam Halliday                    
                </@author>
            </javadoc>
            <javadoc line="23">
                compute the NEV largest (algebraic) eigenvalues.                
            </javadoc>
            <javadoc line="27">
                compute the NEV smallest (algebraic) eigenvalues.                
            </javadoc>
            <javadoc line="31">
                compute the NEV largest (in magnitude) eigenvalues.                
            </javadoc>
            <javadoc line="35">
                compute the NEV smallest (in magnitude) eigenvalues.                
            </javadoc>
            <javadoc line="39">
                compute NEV eigenvalues, half from each end of the spectrum                
            </javadoc>
            <declaration name="arpack" type="ARPACK" line="45"/>
            <declaration name="TOL" type="double" line="47"/>
            <declaration name="EXPENSIVE_CHECKS" type="boolean" line="49"/>
            <declaration name="matrix" type="Matrix" line="51"/>
            <method name="ArpackSym" type="constructor" line="54">
                <params>
                    <param name="matrix" type="Matrix"/>
                </params>
                <scope line="58"/>
            </method>
            <javadoc line="66">
                Solve the eigensystem for the number of eigenvalues requested.
                  &lt;p&gt;
                  NOTE: The references to the eigenvectors will keep alive a reference to
                  a {@code nev  n} double array, so use the {@code copy()} method to free
                  it up if only a subset is required.                
                <@param>
                    m eigenvalues                    
                </@param>
                <@param>
                    m ritz        preference for solutions                    
                </@param>
                <@return>
                    n a map from eigenvalues to corresponding eigenvectors.                    
                </@return>
            </javadoc>
            <method name="solve" type="Map<Double,DenseVectorSub>" line="77">
                <params>
                    <param name="eigenvalues" type="int"/>
                    <param name="ritz" type="Ritz"/>
                </params>
                <comment line="78">
                    used for initial residual (if info != 0)                    
                </comment>
                <comment line="78">
                    and eventually the output residual                    
                </comment>
                <comment line="78">
                    Lanczos basis vectors                    
                </comment>
                <comment line="78">
                    Arnoldi reverse communication                    
                </comment>
                <comment line="78">
                    private work array                    
                </comment>
                <declaration name="n" type="int" line="83"/>
                <declaration name="nev" type="intW" line="84"/>
                <declaration name="ncv" type="int" line="86"/>
                <declaration name="bmat" type="String" line="88"/>
                <declaration name="which" type="String" line="89"/>
                <declaration name="tol" type="doubleW" line="90"/>
                <declaration name="info" type="intW" line="91"/>
                <declaration name="iparam" type="int[]" line="92"/>
                <declaration name="ido" type="intW" line="96"/>
                <declaration name="resid" type="double[]" line="100"/>
                <declaration name="v" type="double[]" line="102"/>
                <declaration name="workd" type="double[]" line="104"/>
                <declaration name="workl" type="double[]" line="106"/>
                <declaration name="ipntr" type="int[]" line="107"/>
                <declaration name="i" type="int" line="109"/>
                <scope line="110"/>
                <declaration name="d" type="double[]" line="123"/>
                <declaration name="select" type="boolean[]" line="124"/>
                <declaration name="z" type="double[]" line="125"/>
                <declaration name="computed" type="int" line="130"/>
                <anonymous_class line="133">
                    <method name="compare" type="int" line="135">
                        <params>
                            <param name="o1" type="Double"/>
                            <param name="o2" type="Double"/>
                        </params>
                        <comment line="136">
                            highest first                            
                        </comment>
                    </method>
                </anonymous_class>
                <declaration name="solution" type="Map&lt;Double,DenseVectorSub&gt;" line="133"/>
                <declaration name="eigenvectors" type="DenseVector" line="140"/>
                <scope line="141">
                    <declaration name="eigenvalue" type="double" line="142"/>
                    <declaration name="eigenvector" type="DenseVectorSub" line="143"/>
                </scope>
            </method>
            <method name="av" type="void" line="150">
                <params>
                    <param name="work" type="double[]"/>
                    <param name="input_offset" type="int"/>
                    <param name="output_offset" type="int"/>
                </params>
                <declaration name="w" type="DenseVector" line="151"/>
                <declaration name="x" type="Vector" line="152"/>
                <declaration name="y" type="Vector" line="153"/>
            </method>
        </class>
    </source>