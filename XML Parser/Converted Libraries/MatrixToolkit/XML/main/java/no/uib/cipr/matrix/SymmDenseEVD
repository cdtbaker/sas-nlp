<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="com.github.fommil.netlib.LAPACK"/>
        <import package="org.netlib.util.intW"/>
        <class name="SymmDenseEVD" extends="SymmEVD" line="27">
            <javadoc line="27">
                Computes eigenvalues of symmetrical, dense matrices                
            </javadoc>
            <declaration name="work" type="double[]" line="32"/>
            <javadoc line="32">
                Double work array                
            </javadoc>
            <declaration name="iwork" type="int[]" line="37"/>
            <javadoc line="37">
                Integer work array                
            </javadoc>
            <declaration name="uplo" type="UpLo" line="42"/>
            <javadoc line="42">
                Upper or lower part stored                
            </javadoc>
            <declaration name="range" type="JobEigRange" line="47"/>
            <javadoc line="47">
                Range of eigenvalues to compute                
            </javadoc>
            <declaration name="isuppz" type="int[]" line="52"/>
            <javadoc line="52">
                Eigenvector supports                
            </javadoc>
            <declaration name="abstol" type="double" line="57"/>
            <javadoc line="57">
                Tolerance criteria                
            </javadoc>
            <javadoc line="62">
                Sets up an eigenvalue decomposition for symmetrical, dense matrices.
                 * Computes all eigenvalues and eigenvectors, and uses a low default
                 * tolerance criteria                
                <@param>
                    m nSize of the matrix                    
                </@param>
                <@param>
                    m upperTrue if the upper part of the matrix is stored, and false if
                     * the lower part of the matrix is stored instead                    
                </@param>
            </javadoc>
            <method name="SymmDenseEVD" type="constructor" line="73"/>
            <javadoc line="77">
                Sets up an eigenvalue decomposition for symmetrical, dense matrices.
                 * Computes all eigenvalues and eigenvectors                
                <@param>
                    m nSize of the matrix                    
                </@param>
                <@param>
                    m upperTrue if the upper part of the matrix is stored, and false if
                     * the lower part of the matrix is stored instead                    
                </@param>
                <@param>
                    m abstolAbsolute tolerance criteria                    
                </@param>
            </javadoc>
            <method name="SymmDenseEVD" type="constructor" line="89"/>
            <javadoc line="93">
                Sets up an eigenvalue decomposition for symmetrical, dense matrices. Uses
                 * a low default tolerance criteria                
                <@param>
                    m nSize of the matrix                    
                </@param>
                <@param>
                    m upperTrue if the upper part of the matrix is stored, and false if
                     * the lower part of the matrix is stored instead                    
                </@param>
                <@param>
                    m vectorsTrue to compute the eigenvectors, false for just the
                     * eigenvalues                    
                </@param>
            </javadoc>
            <method name="SymmDenseEVD" type="constructor" line="106"/>
            <javadoc line="110">
                Sets up an eigenvalue decomposition for symmetrical, dense matrices                
                <@param>
                    m nSize of the matrix                    
                </@param>
                <@param>
                    m upperTrue if the upper part of the matrix is stored, and false if
                     * the lower part of the matrix is stored instead                    
                </@param>
                <@param>
                    m vectorsTrue to compute the eigenvectors, false for just the
                     * eigenvalues                    
                </@param>
                <@param>
                    m abstolAbsolute tolerance criteria                    
                </@param>
            </javadoc>
            <method name="SymmDenseEVD" type="constructor" line="124">
                <comment line="125">
                    Find the needed workspace                    
                </comment>
                <comment line="125">
                    Allocate workspace                    
                </comment>
                <declaration name="worksize" type="double[]" line="133"/>
                <declaration name="iworksize" type="int[]" line="134"/>
                <declaration name="info" type="intW" line="135"/>
                <declaration name="lwork" type="int" line="141"/>
                <scope line="142"/>
                <scope line="145"/>
            </method>
            <javadoc line="156">
                Convenience method for computing the full eigenvalue decomposition of the
                 * given matrix                
                <@param>
                    m AMatrix to factorize. Upper part extracted, and the matrix is
                     * not modified                    
                </@param>
                <@return>
                    n Newly allocated decomposition                    
                </@return>
                <@throws>
                    s NotConvergedException                    
                </@throws>
            </javadoc>
            <method name="factorize" type="SymmDenseEVD" line="166"/>
            <javadoc line="171">
                Computes the eigenvalue decomposition of the given matrix                
                <@param>
                    m AMatrix to factorize. Overwritten on return                    
                </@param>
                <@return>
                    n The current eigenvalue decomposition                    
                </@return>
                <@throws>
                    s NotConvergedException                    
                </@throws>
            </javadoc>
            <method name="factor" type="SymmDenseEVD" line="180"/>
            <javadoc line="188">
                Computes the eigenvalue decomposition of the given matrix                
                <@param>
                    m AMatrix to factorize. Overwritten on return                    
                </@param>
                <@return>
                    n The current eigenvalue decomposition                    
                </@return>
                <@throws>
                    s NotConvergedException                    
                </@throws>
            </javadoc>
            <method name="factor" type="SymmDenseEVD" line="197"/>
            <method name="factor" type="SymmDenseEVD" line="206">
                <declaration name="info" type="intW" line="210"/>
            </method>
        </class>
    </source>