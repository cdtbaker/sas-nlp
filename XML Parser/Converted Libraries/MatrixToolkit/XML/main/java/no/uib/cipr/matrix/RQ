<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="com.github.fommil.netlib.LAPACK"/>
        <import package="org.netlib.util.intW"/>
        <class name="RQ" extends="OrthogonalComputer" line="26">
            <javadoc line="26">
                Computes RQ decompositions                
            </javadoc>
            <javadoc line="31">
                Constructs an empty RQ decomposition                
                <@param>
                    m mNumber of rows                    
                </@param>
                <@param>
                    m nNumber of columns. Must be larger than or equal the number of
                     * rows                    
                </@param>
            </javadoc>
            <method name="RQ" type="constructor" line="40">
                <comment line="41">
                    Query optimal workspace. First for computing the factorization                    
                </comment>
                <comment line="41">
                    Workspace needed for generating an explicit orthogonal matrix                    
                </comment>
                <declaration name="lwork" type="int" line="46"/>
                <scope line="49">
                    <declaration name="info" type="intW" line="51"/>
                </scope>
                <scope line="64">
                    <declaration name="info" type="intW" line="66"/>
                </scope>
            </method>
            <javadoc line="80">
                Convenience method to compute an RQ decomposition                
                <@param>
                    m AMatrix to decompose. Not modified                    
                </@param>
                <@return>
                    n Newly allocated decomposition                    
                </@return>
            </javadoc>
            <method name="factorize" type="RQ" line="87"/>
            <method name="factor" type="RQ" line="92">
                <comment line="93">
                    Calculate factorisation, and extract the triangular factor
                    
                    intW info = new intW(0);                    
                </comment>
                <comment line="93">
                    Generate the orthogonal matrix                    
                </comment>
                <declaration name="info" type="intW" line="105"/>
            </method>
            <javadoc line="132">
                Returns the upper triangular factor                
            </javadoc>
            <method name="getR" type="UpperTriangDenseMatrix" line="135"/>
        </class>
    </source>