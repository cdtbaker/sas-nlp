<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="com.github.fommil.netlib.LAPACK"/>
        <import package="org.netlib.util.intW"/>
        <class name="QRP" line="25">
            <javadoc line="25">
                Computes QR decompositions with column pivoting:{@code AP = QR} where{@code A(m,n)}, {@code Q(m,m)}, and {@code R(m,n)}, more generally:{@code AP = [Q1 Q2]  [R11, R12; 0 R22]} and {@code R22} elements are
                  negligible.                
            </javadoc>
            <declaration name="jpvt" type="int" line="38"/>
            <javadoc line="38">
                Pivoting vector                
            </javadoc>
            <declaration name="tau" type="double[]" line="40"/>
            <javadoc line="40">
                Scales for the reflectors                
            </javadoc>
            <declaration name="m" type="int" line="44"/>
            <javadoc line="44">
                Factorisation sizes                
            </javadoc>
            <declaration name="rank" type="int" line="48"/>
            <javadoc line="48">
                The factored matrix rank                
            </javadoc>
            <declaration name="work" type="double[]" line="50"/>
            <javadoc line="50">
                Work array                
            </javadoc>
            <declaration name="Afact" type="DenseMatrix" line="54"/>
            <javadoc line="54">
                The factored matrix                
            </javadoc>
            <declaration name="Q" type="DenseMatrix" line="58"/>
            <javadoc line="58">
                The orthogonal matrix                
            </javadoc>
            <declaration name="R" type="DenseMatrix" line="62"/>
            <javadoc line="62">
                The general upper triangular matrix.                
            </javadoc>
            <javadoc line="67">
                Constructs an empty QR decomposition                
                <@param>
                    m m the number of rows.                    
                </@param>
                <@param>
                    m n the number of columns.                    
                </@param>
            </javadoc>
            <method name="QRP" type="constructor" line="73">
                <params>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <comment line="74">
                    Query optimal workspace. First for computing the factorization                    
                </comment>
                <comment line="74">
                    Workspace needed for generating an explicit orthogonal matrix                    
                </comment>
                <declaration name="lwork1" type="int" line="85"/>
                <declaration name="info" type="intW" line="86"/>
                <declaration name="dummy" type="double" line="87"/>
                <declaration name="ret" type="double" line="88"/>
                <declaration name="lapack" type="LAPACK" line="90"/>
            </method>
            <javadoc line="103">
                Convenience method to compute a QR decomposition                
                <@param>
                    m A the matrix to decompose (not modified)                    
                </@param>
                <@return>
                    n Newly allocated decomposition                    
                </@return>
            </javadoc>
            <method name="factorize" type="QRP" line="109">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <javadoc line="113">
                Executes a QR factorization for the given matrix.                
                <@param>
                    m A the matrix to be factored (not modified)                    
                </@param>
                <@return>
                    n the factorization object                    
                </@return>
            </javadoc>
            <method name="factor" type="QRP" line="119">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <comment line="120">
                    copy A values in Afact                    
                </comment>
                <comment line="120">
                                        
                </comment>
                <comment line="120">
                                        
                </comment>
                <comment line="120">
                    Calculate the rank based on a precision EPS                    
                </comment>
                <comment line="120">
                                        
                </comment>
                <comment line="120">
                    Adjust the permutation to zero offset                    
                </comment>
                <scope line="127"/>
                <declaration name="info" type="intW" line="131"/>
                <declaration name="lapack" type="LAPACK" line="132"/>
                <scope line="147">
                    <scope line="148"/>
                </scope>
                <declaration name="EPS" type="double" line="156"/>
                <scope line="157"/>
                <scope line="167"/>
                <scope line="176"/>
            </method>
            <javadoc line="183">
                Returns the upper triangular factor                
            </javadoc>
            <method name="getR" type="DenseMatrix" line="186"/>
            <javadoc line="190">
                Returns the orthogonal matrix                
            </javadoc>
            <method name="getQ" type="DenseMatrix" line="193"/>
            <javadoc line="197">
                Returns the column pivoting vector.
                  This function is cheaper than {@link #getP()}.                
            </javadoc>
            <method name="getPVector" type="int[]" line="201"/>
            <javadoc line="205">
                Returns the column pivoting matrix.
                  This function allocates a new Matrix to be returned,
                  a more cheap option is tu use {@link #getPVector()}.                
            </javadoc>
            <method name="getP" type="Matrix" line="210">
                <declaration name="P" type="Matrix" line="211"/>
                <scope line="212"/>
            </method>
            <javadoc line="218">
                Returns the rank of the factored matrix                
            </javadoc>
            <method name="getRank" type="int" line="221"/>
        </class>
    </source>