<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="com.github.fommil.netlib.LAPACK"/>
        <import package="org.netlib.util.intW"/>
        <class name="TridiagMatrix" extends="AbstractMatrix" line="29">
            <javadoc line="29">
                Tridiagonal matrix. Stored in three arrays, one of length &lt;code&gt;n&lt;/code&gt;
                 * for the diagonal, two of length &lt;code&gt;n-1&lt;/code&gt; for the superdiagonal and
                 * subdiagonal entries.                
            </javadoc>
            <declaration name="diag" type="double[]" line="36"/>
            <javadoc line="36">
                Diagonal, super-diagonal and sub-diagonal                
            </javadoc>
            <declaration name="n" type="int" line="41"/>
            <javadoc line="41">
                Size of the matrix                
            </javadoc>
            <javadoc line="46">
                Constructor for TridiagMatrix                
                <@param>
                    m nSize of the matrix. Since the matrix must be square, this
                     * equals both the number of rows and columns                    
                </@param>
            </javadoc>
            <method name="TridiagMatrix" type="constructor" line="53"/>
            <javadoc line="65">
                Constructor for TridiagMatrix                
                <@param>
                    m AMatrix to copy from. Only the tridiagonal part is copied                    
                </@param>
            </javadoc>
            <method name="TridiagMatrix" type="constructor" line="71"/>
            <javadoc line="75">
                Constructor for TridiagMatrix                
                <@param>
                    m AMatrix to copy from. Only the tridiagonal part is copied                    
                </@param>
                <@param>
                    m deepTrue for a deep copy, else it's shallow. For shallow copies,
                     * <code>A</code> must be a <code>TridiagMatrix</code>                    
                </@param>
            </javadoc>
            <method name="TridiagMatrix" type="constructor" line="84">
                <scope line="94"/>
                <scope line="102">
                    <declaration name="B" type="TridiagMatrix" line="103"/>
                </scope>
            </method>
            <javadoc line="110">
                Returns the diagonal entries. Length equal &lt;code&gt;n&lt;/code&gt;                
            </javadoc>
            <method name="getDiagonal" type="double[]" line="113"/>
            <javadoc line="117">
                Returns the sub diagonal entries. Length equal &lt;code&gt;n-1&lt;/code&gt;                
            </javadoc>
            <method name="getSubDiagonal" type="double[]" line="120"/>
            <javadoc line="124">
                Returns the super diagonal entries. Length equal &lt;code&gt;n-1&lt;/code&gt;                
            </javadoc>
            <method name="getSuperDiagonal" type="double[]" line="127"/>
            <method name="add" type="void" line="132"/>
            <method name="get" type="double" line="146"/>
            <method name="set" type="void" line="159"/>
            <method name="copy" type="TridiagMatrix" line="173"/>
            <method name="zero" type="TridiagMatrix" line="178"/>
            <method name="solve" type="Matrix" line="186">
                <declaration name="Xd" type="double[]" line="192"/>
                <declaration name="info" type="intW" line="196"/>
            </method>
            <method name="solve" type="Vector" line="209">
                <declaration name="B" type="DenseMatrix" line="210"/>
            </method>
            <method name="transpose" type="Matrix" line="216">
                <declaration name="otherDiag" type="double[]" line="217"/>
            </method>
            <method name="iterator" type="Iterator<MatrixEntry>" line="224"/>
            <class name="TridiagMatrixIterator" extends="RefMatrixIterator" line="228">
                <javadoc line="228">
                    Iterator over a tridiagonal matrix                    
                </javadoc>
                <declaration name="band" type="double[]" line="233"/>
                <javadoc line="233">
                    Current band, starting with the main diagonal                    
                </javadoc>
                <declaration name="bandIndex" type="int" line="238"/>
                <javadoc line="238">
                    Band index                    
                </javadoc>
                <declaration name="whichBand" type="int" line="243"/>
                <javadoc line="243">
                    Which band in use (0 for main, 1 for sub, 2 for super)                    
                </javadoc>
                <method name="hasNext" type="boolean" line="249"/>
                <method name="next" type="MatrixEntry" line="254">
                    <comment line="255">
                        Move in the band                        
                    </comment>
                    <comment line="255">
                        Set row index                        
                    </comment>
                    <comment line="255">
                        Set column index                        
                    </comment>
                    <scope line="260"/>
                </method>
            </class>
        </class>
    </source>