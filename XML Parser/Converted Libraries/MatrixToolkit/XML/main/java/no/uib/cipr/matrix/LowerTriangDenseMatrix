<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <class name="LowerTriangDenseMatrix" extends="AbstractTriangDenseMatrix" line="24">
            <javadoc line="24">
                Lower triangular dense matrix. It has the same storage layout as the{@link no.uib.cipr.matrix.DenseMatrix DenseMatrix}, but only refers to
                 * elements below or on the main diagonal. The remaining elements are assumed to
                 * be zero, but since they are never accessed, they need not be.                
            </javadoc>
            <javadoc line="32">
                Constructor for LowerTriangDenseMatrix                
                <@param>
                    m nSize of the matrix. Since the matrix must be square, this
                     * equals both the number of rows and columns                    
                </@param>
            </javadoc>
            <method name="LowerTriangDenseMatrix" type="constructor" line="39"/>
            <javadoc line="43">
                Constructor for LowerTriangDenseMatrix                
                <@param>
                    m nSize of the matrix. Since the matrix must be square, this
                     * equals both the number of rows and columns                    
                </@param>
            </javadoc>
            <method name="LowerTriangDenseMatrix" type="constructor" line="50"/>
            <javadoc line="54">
                Constructor for LowerTriangDenseMatrix                
                <@param>
                    m AMatrix to copy from. Only the lower triangular part is copied                    
                </@param>
            </javadoc>
            <method name="LowerTriangDenseMatrix" type="constructor" line="60"/>
            <javadoc line="64">
                Constructor for LowerTriangDenseMatrix                
                <@param>
                    m AMatrix to copy from. Only the lower triangular part is copied                    
                </@param>
                <@param>
                    m deepIf true, <code>A</code> is copied, else a shallow copy is
                     * made and the matrices share underlying storage. For this,
                     * <code>A</code> must be a dense matrix                    
                </@param>
            </javadoc>
            <method name="LowerTriangDenseMatrix" type="constructor" line="74"/>
            <javadoc line="78">
                Constructor for LowerTriangDenseMatrix                
                <@param>
                    m AMatrix to copy from. Only the lower triangular part is copied                    
                </@param>
                <@param>
                    m deepIf true, <code>A</code> is copied, else a shallow copy is
                     * made and the matrices share underlying storage. For this,
                     * <code>A</code> must be a dense matrix                    
                </@param>
            </javadoc>
            <method name="LowerTriangDenseMatrix" type="constructor" line="88"/>
            <javadoc line="92">
                Constructor for LowerTriangDenseMatrix                
                <@param>
                    m AMatrix to copy from. Only the lower triangular part is copied                    
                </@param>
                <@param>
                    m kSize of matrix to refer.
                     * <code>k&lt;min(numRows,numColumns)</code>                    
                </@param>
            </javadoc>
            <method name="LowerTriangDenseMatrix" type="constructor" line="101"/>
            <javadoc line="105">
                Constructor for LowerTriangDenseMatrix                
                <@param>
                    m AMatrix to copy from. Only the lower triangular part is copied                    
                </@param>
                <@param>
                    m kSize of matrix to refer.
                     * <code>k&lt;min(numRows,numColumns)</code>                    
                </@param>
                <@param>
                    m deepIf true, <code>A</code> is copied, else a shallow copy is
                     * made and the matrices share underlying storage. For this,
                     * <code>A</code> must be a dense matrix                    
                </@param>
            </javadoc>
            <method name="LowerTriangDenseMatrix" type="constructor" line="118"/>
            <javadoc line="122">
                Constructor for LowerTriangDenseMatrix                
                <@param>
                    m AMatrix to copy from. Only the lower triangular part is copied                    
                </@param>
                <@param>
                    m kSize of matrix to refer.
                     * <code>k&lt;min(numRows,numColumns)</code>                    
                </@param>
                <@param>
                    m deepIf true, <code>A</code> is copied, else a shallow copy is
                     * made and the matrices share underlying storage. For this,
                     * <code>A</code> must be a dense matrix                    
                </@param>
            </javadoc>
            <method name="LowerTriangDenseMatrix" type="constructor" line="135"/>
            <method name="add" type="void" line="140"/>
            <method name="get" type="double" line="147"/>
            <method name="set" type="void" line="154"/>
            <method name="copy" type="LowerTriangDenseMatrix" line="161"/>
            <method name="copy" type="void" line="166"/>
            <method name="set" type="Matrix" line="173"/>
        </class>
    </source>