<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="no.uib.cipr.matrix.Matrix.Norm"/>
        <import package="com.github.fommil.netlib.LAPACK"/>
        <import package="org.netlib.util.doubleW"/>
        <import package="org.netlib.util.intW"/>
        <class name="BandLU" line="29">
            <javadoc line="29">
                Banded LU decomposition                
            </javadoc>
            <declaration name="n" type="int" line="34"/>
            <javadoc line="34">
                Matrix dimension                
            </javadoc>
            <declaration name="kl" type="int" line="39"/>
            <javadoc line="39">
                Number of bands in the matrix A                
            </javadoc>
            <declaration name="LU" type="BandMatrix" line="44"/>
            <javadoc line="44">
                Holds the LU factors                
            </javadoc>
            <declaration name="ipiv" type="int[]" line="49"/>
            <javadoc line="49">
                Row pivotations                
            </javadoc>
            <declaration name="singular" type="boolean" line="54"/>
            <javadoc line="54">
                True if the matrix was singular                
            </javadoc>
            <javadoc line="59">
                Constructor for BandLU                
                <@param>
                    m nMatrix size                    
                </@param>
                <@param>
                    m klNumber of lower matrix bands                    
                </@param>
                <@param>
                    m kuNumber of upper matrix bands                    
                </@param>
            </javadoc>
            <method name="BandLU" type="constructor" line="69"/>
            <javadoc line="79">
                Creates an LU decomposition of the given matrix                
                <@param>
                    m AMatrix to decompose. Not modified                    
                </@param>
                <@return>
                    n A LU decomposition of the matrix                    
                </@return>
            </javadoc>
            <method name="factorize" type="BandLU" line="86"/>
            <javadoc line="90">
                Creates an LU decomposition of the given matrix                
                <@param>
                    m AMatrix to decompose. If the decomposition is in-place, its
                     * number of superdiagonals must equal <code>kl+ku</code>                    
                </@param>
                <@param>
                    m inplaceWheter or not the decomposition should overwrite the passed
                     * matrix                    
                </@param>
                <@return>
                    n The current decomposition                    
                </@return>
            </javadoc>
            <method name="factor" type="BandLU" line="101"/>
            <javadoc line="108">
                Creates an LU decomposition of the given matrix                
                <@param>
                    m AMatrix to decompose. It will be overwritten with the
                     * decomposition. Its number of superdiagonals must equal
                     * <code>kl+ku</code>                    
                </@param>
                <@return>
                    n The current decomposition                    
                </@return>
            </javadoc>
            <method name="factor" type="BandLU" line="117">
                <declaration name="info" type="intW" line="127"/>
            </method>
            <javadoc line="140">
                Returns the lower triangular factor                
            </javadoc>
            <method name="getL" type="UnitLowerTriangBandMatrix" line="143"/>
            <javadoc line="147">
                Returns the upper triangular factor                
            </javadoc>
            <method name="getU" type="UpperTriangBandMatrix" line="150"/>
            <javadoc line="154">
                Returns the decomposition matrix                
            </javadoc>
            <method name="getLU" type="BandMatrix" line="157"/>
            <javadoc line="161">
                Returns the row pivots                
            </javadoc>
            <method name="getPivots" type="int[]" line="164"/>
            <javadoc line="168">
                Checks for singularity                
            </javadoc>
            <method name="isSingular" type="boolean" line="171"/>
            <javadoc line="175">
                Computes the reciprocal condition number, using either the infinity norm
                 * of the 1 norm.                
                <@param>
                    m AThe matrix this is a decomposition of                    
                </@param>
                <@param>
                    m normEither <code>Norm.One</code> or <code>Norm.Infinity</code>                    
                </@param>
                <@return>
                    n The reciprocal condition number. Values close to unity indicate a
                     * well-conditioned system, while numbers close to zero do not.                    
                </@return>
            </javadoc>
            <method name="rcond" type="double" line="186">
                <declaration name="anorm" type="double" line="195"/>
                <declaration name="work" type="double[]" line="197"/>
                <declaration name="lwork" type="int[]" line="198"/>
                <declaration name="info" type="intW" line="200"/>
                <declaration name="rcond" type="doubleW" line="201"/>
            </method>
            <javadoc line="211">
                Computes &lt;code&gt;A\B&lt;/code&gt;, overwriting &lt;code&gt;B&lt;/code&gt;                
            </javadoc>
            <method name="solve" type="DenseMatrix" line="214"/>
            <javadoc line="218">
                Computes &lt;code&gt;A&lt;sup&gt;T&lt;/sup&gt;\B&lt;/code&gt;, overwriting &lt;code&gt;B&lt;/code&gt;                
            </javadoc>
            <method name="transSolve" type="DenseMatrix" line="221"/>
            <method name="solve" type="DenseMatrix" line="226">
                <declaration name="info" type="intW" line="232"/>
            </method>
        </class>
    </source>