<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="java.text.DecimalFormat"/>
        <import package="java.util.Arrays"/>
        <class name="AbstractDenseMatrix" extends="AbstractMatrix" line="26">
            <javadoc line="26">
                Partial implementation of a dense matrix                
            </javadoc>
            <declaration name="data" type="double[]" line="31"/>
            <javadoc line="31">
                Matrix contents                
            </javadoc>
            <javadoc line="36">
                Constructor for AbstractDenseMatrix. The matrix contents will be set to
                 * zero                
                <@param>
                    m numRowsNumber of rows                    
                </@param>
                <@param>
                    m numColumnsNumber of columns                    
                </@param>
            </javadoc>
            <method name="AbstractDenseMatrix" type="constructor" line="45">
                <comment line="46">
                    We know that numRows and numColumns is positive from the super                    
                </comment>
                <comment line="46">
                    constructor.                    
                </comment>
                <declaration name="size" type="long" line="51"/>
                <scope line="53"/>
            </method>
            <javadoc line="62">
                Constructor for AbstractDenseMatrix. Matrix is copied from the supplied
                 * matrix                
                <@param>
                    m AMatrix to copy from                    
                </@param>
            </javadoc>
            <method name="AbstractDenseMatrix" type="constructor" line="69"/>
            <javadoc line="73">
                Constructor for AbstractDenseMatrix. Matrix is copied from the supplied
                 * matrix                
                <@param>
                    m AMatrix to copy from                    
                </@param>
                <@param>
                    m deepTrue for deep copy, false for reference                    
                </@param>
            </javadoc>
            <method name="AbstractDenseMatrix" type="constructor" line="82">
                <scope line="85"/>
            </method>
            <method name="copy" type="void" line="92"/>
            <javadoc line="92">
                Set this matrix equal to the given matrix                
            </javadoc>
            <javadoc line="97">
                Returns the matrix contents. Ordering depends on the underlying storage
                 * assumptions                
            </javadoc>
            <method name="getData" type="double[]" line="101"/>
            <method name="add" type="void" line="106"/>
            <method name="set" type="void" line="111"/>
            <method name="get" type="double" line="116"/>
            <javadoc line="120">
                Checks the row and column indices, and returns the linear data index                
            </javadoc>
            <method name="getIndex" type="int" line="123"/>
            <method name="set" type="Matrix" line="129">
                <comment line="130">
                    using instanceof results in weird problems                    
                </comment>
                <comment line="130">
                    with implementations that mask some values                    
                </comment>
                <declaration name="Bd" type="double[]" line="137"/>
            </method>
            <method name="zero" type="Matrix" line="148"/>
            <method name="toString" type="String" line="154">
                <declaration name="out" type="StringBuilder" line="155"/>
                <declaration name="df" type="DecimalFormat" line="156"/>
                <scope line="158">
                    <scope line="159">
                        <declaration name="value" type="double" line="160"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>