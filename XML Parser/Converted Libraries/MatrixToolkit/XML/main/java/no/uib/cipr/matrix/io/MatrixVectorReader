<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.io">
        <import package="java.io.BufferedReader"/>
        <import package="java.io.EOFException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.Reader"/>
        <import package="java.io.StreamTokenizer"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.List"/>
        <class name="MatrixVectorReader" extends="BufferedReader" line="31">
            <javadoc line="31">
                Reads matrices and vectors                
            </javadoc>
            <declaration name="st" type="StreamTokenizer" line="36"/>
            <javadoc line="36">
                Reads the entries of the matrix or vector                
            </javadoc>
            <javadoc line="41">
                Constructor for MatrixVectorReader                
                <@param>
                    m inA Reader                    
                </@param>
            </javadoc>
            <method name="MatrixVectorReader" type="constructor" line="47"/>
            <javadoc line="52">
                Constructor for MatrixVectorReader                
                <@param>
                    m inA Reader                    
                </@param>
                <@param>
                    m szInput buffer size                    
                </@param>
            </javadoc>
            <method name="MatrixVectorReader" type="constructor" line="60"/>
            <javadoc line="65">
                Sets up the stream tokenizer                
            </javadoc>
            <method name="setup" type="void" line="68">
                <comment line="69">
                    Parse numbers as words                    
                </comment>
                <comment line="69">
                    Characters as words                    
                </comment>
                <comment line="69">
                    Skip comments                    
                </comment>
                <comment line="69">
                    Skip whitespace and newlines                    
                </comment>
            </method>
            <javadoc line="89">
                Shifts the indices. Useful for converting between 0- and 1-based
                 * indicing.                
                <@param>
                    m numAdded to every index                    
                </@param>
                <@param>
                    m indicesIndices to shift                    
                </@param>
            </javadoc>
            <method name="add" type="void" line="98"/>
            <javadoc line="103">
                Reads a line, and trims it of surrounding whitespace                
                <@throws>
                    s IOExceptionIf either I/O errors occur, or there was nothing to read                    
                </@throws>
            </javadoc>
            <method name="readTrimmedLine" type="String" line="109">
                <declaration name="line" type="String" line="110"/>
            </method>
            <javadoc line="117">
                Reads the matrix info for the Matrix Market exchange format. The line
                 * must consist of exactly 5 space-separated entries, the first being
                 * &quot;%%MatrixMarket&quot;                
            </javadoc>
            <method name="readMatrixInfo" type="MatrixInfo" line="122">
                <comment line="123">
                    Read header                    
                </comment>
                <comment line="123">
                    This will always be &quot;matrix&quot;                    
                </comment>
                <comment line="123">
                    Sparse or dense?                    
                </comment>
                <comment line="123">
                    Dataformat                    
                </comment>
                <comment line="123">
                    Matrix pattern                    
                </comment>
                <comment line="123">
                    Pack together. This also verifies the format                    
                </comment>
                <declaration name="component" type="String[]" line="123"/>
                <declaration name="sparse" type="boolean" line="137"/>
                <declaration name="field" type="MatrixInfo.MatrixField" line="146"/>
                <declaration name="symmetry" type="MatrixInfo.MatrixSymmetry" line="159"/>
            </method>
            <javadoc line="176">
                Reads the vector info for the Matrix Market exchange format. The line
                 * must consist of exactly 4 space-separated entries, the first being
                 * &quot;%%MatrixMarket&quot;                
            </javadoc>
            <method name="readVectorInfo" type="VectorInfo" line="181">
                <comment line="182">
                    Read header                    
                </comment>
                <comment line="182">
                    This will always be &quot;vector&quot;                    
                </comment>
                <comment line="182">
                    Sparse or dense?                    
                </comment>
                <comment line="182">
                    Dataformat                    
                </comment>
                <comment line="182">
                    Pack together. This also verifies the format                    
                </comment>
                <declaration name="component" type="String[]" line="182"/>
                <declaration name="sparse" type="boolean" line="196"/>
                <declaration name="field" type="VectorInfo.VectorField" line="205"/>
            </method>
            <javadoc line="221">
                Checks if a Matrix Market header is present (&quot;%%MatrixMarket&quot;)                
                <@return>
                    n True if a header was found, else false                    
                </@return>
                <@throws>
                    s IOException                    
                </@throws>
            </javadoc>
            <method name="hasInfo" type="boolean" line="227">
                <comment line="228">
                    Read a line, then skip back                    
                </comment>
                <declaration name="component" type="String[]" line="230"/>
            </method>
            <javadoc line="236">
                Reads all the comments (lines starting with &apos;%&apos;). Positions the reader at
                 * the first non-comment line. Can only be called after reading the matrix
                 * or vector info. The comments read does not include &apos;%&apos; or the newline                
            </javadoc>
            <method name="readComments" type="String[]" line="241">
                <declaration name="list" type="List&lt;String&gt;" line="242"/>
                <scope line="243">
                    <declaration name="line" type="String" line="245"/>
                    <scope line="247"/>
                </scope>
            </method>
            <javadoc line="256">
                Reads in the size of a matrix. Skips initial comments                
            </javadoc>
            <method name="readMatrixSize" type="MatrixSize" line="259">
                <comment line="260">
                    Always read the matrix size                    
                </comment>
                <comment line="260">
                    For coordinate matrices we also read the number of entries                    
                </comment>
                <declaration name="numRows" type="int" line="261"/>
                <scope line="266">
                    <declaration name="numEntries" type="int" line="267"/>
                </scope>
            </method>
            <javadoc line="272">
                Reads in the size of an array matrix. Skips initial comments                
            </javadoc>
            <method name="readArraySize" type="MatrixSize" line="275">
                <declaration name="numRows" type="int" line="276"/>
            </method>
            <javadoc line="281">
                Reads in the size of a coordinate matrix. Skips initial comments                
            </javadoc>
            <method name="readCoordinateSize" type="MatrixSize" line="284">
                <declaration name="numRows" type="int" line="285"/>
            </method>
            <javadoc line="290">
                Reads in the size of a vector. Skips initial comments                
            </javadoc>
            <method name="readVectorSize" type="VectorSize" line="293">
                <comment line="294">
                    Always read the vector size                    
                </comment>
                <comment line="294">
                    For coordinate vectors we also read the number of entries                    
                </comment>
                <declaration name="size" type="int" line="295"/>
                <scope line="300">
                    <declaration name="numEntries" type="int" line="301"/>
                </scope>
            </method>
            <javadoc line="306">
                Reads in the size of a dense vector. Skips initial comments                
            </javadoc>
            <method name="readVectorArraySize" type="VectorSize" line="309">
                <declaration name="size" type="int" line="310"/>
            </method>
            <javadoc line="315">
                Reads in the size of a coordinate vector. Skips initial comments                
            </javadoc>
            <method name="readVectorCoordinateSize" type="VectorSize" line="318">
                <declaration name="size" type="int" line="319"/>
            </method>
            <javadoc line="324">
                Reads the array data                
            </javadoc>
            <method name="readArray" type="void" line="327">
                <declaration name="size" type="int" line="328"/>
            </method>
            <javadoc line="333">
                Reads the array data                
            </javadoc>
            <method name="readArray" type="void" line="336">
                <declaration name="size" type="int" line="337"/>
            </method>
            <javadoc line="342">
                Reads the array data                
            </javadoc>
            <method name="readArray" type="void" line="345">
                <declaration name="size" type="int" line="346"/>
            </method>
            <javadoc line="351">
                Reads the array data                
            </javadoc>
            <method name="readArray" type="void" line="354">
                <declaration name="size" type="int" line="355"/>
            </method>
            <javadoc line="360">
                Reads the array data. The first array will contain real entries, while
                 * the second contain imaginary entries                
            </javadoc>
            <method name="readArray" type="void" line="364">
                <declaration name="size" type="int" line="365"/>
                <scope line="369"/>
            </method>
            <javadoc line="375">
                Reads the array data. The first array will contain real entries, while
                 * the second contain imaginary entries                
            </javadoc>
            <method name="readArray" type="void" line="379">
                <declaration name="size" type="int" line="380"/>
                <scope line="384"/>
            </method>
            <javadoc line="390">
                Reads a coordinate vector                
            </javadoc>
            <method name="readCoordinate" type="void" line="393">
                <declaration name="size" type="int" line="394"/>
                <scope line="398"/>
            </method>
            <javadoc line="404">
                Reads a coordinate vector                
            </javadoc>
            <method name="readCoordinate" type="void" line="407">
                <declaration name="size" type="int" line="408"/>
                <scope line="412"/>
            </method>
            <javadoc line="418">
                Reads a coordinate vector                
            </javadoc>
            <method name="readCoordinate" type="void" line="421">
                <declaration name="size" type="int" line="422"/>
                <scope line="426"/>
            </method>
            <javadoc line="432">
                Reads a coordinate vector                
            </javadoc>
            <method name="readCoordinate" type="void" line="435">
                <declaration name="size" type="int" line="436"/>
                <scope line="440"/>
            </method>
            <javadoc line="446">
                Reads a coordinate vector. First data array contains real entries, and
                 * the second contains imaginary entries                
            </javadoc>
            <method name="readCoordinate" type="void" line="451">
                <declaration name="size" type="int" line="452"/>
                <scope line="456"/>
            </method>
            <javadoc line="463">
                Reads a coordinate vector. First data array contains real entries, and
                 * the second contains imaginary entries                
            </javadoc>
            <method name="readCoordinate" type="void" line="468">
                <declaration name="size" type="int" line="469"/>
                <scope line="473"/>
            </method>
            <javadoc line="480">
                Reads a pattern vector                
            </javadoc>
            <method name="readPattern" type="void" line="483">
                <declaration name="size" type="int" line="484"/>
            </method>
            <javadoc line="489">
                Reads a coordinate matrix                
            </javadoc>
            <method name="readCoordinate" type="void" line="493">
                <declaration name="size" type="int" line="494"/>
                <scope line="498"/>
            </method>
            <javadoc line="505">
                Reads a coordinate matrix                
            </javadoc>
            <method name="readCoordinate" type="void" line="509">
                <declaration name="size" type="int" line="510"/>
                <scope line="514"/>
            </method>
            <javadoc line="521">
                Reads a coordinate matrix                
            </javadoc>
            <method name="readCoordinate" type="void" line="525">
                <declaration name="size" type="int" line="526"/>
                <scope line="530"/>
            </method>
            <javadoc line="537">
                Reads a coordinate matrix                
            </javadoc>
            <method name="readCoordinate" type="void" line="541">
                <declaration name="size" type="int" line="542"/>
                <scope line="546"/>
            </method>
            <javadoc line="553">
                Reads a pattern matrix                
            </javadoc>
            <method name="readPattern" type="void" line="556">
                <declaration name="size" type="int" line="557"/>
                <scope line="561"/>
            </method>
            <javadoc line="567">
                Reads a coordinate matrix. First data array contains real entries, and
                 * the second contains imaginary entries                
            </javadoc>
            <method name="readCoordinate" type="void" line="572">
                <declaration name="size" type="int" line="573"/>
                <scope line="578"/>
            </method>
            <javadoc line="586">
                Reads a coordinate matrix. First data array contains real entries, and
                 * the second contains imaginary entries                
            </javadoc>
            <method name="readCoordinate" type="void" line="591">
                <declaration name="size" type="int" line="592"/>
                <scope line="597"/>
            </method>
            <javadoc line="605">
                Reads an integer                
            </javadoc>
            <method name="getInt" type="int" line="608"/>
            <javadoc line="618">
                Reads a long                
            </javadoc>
            <method name="getLong" type="long" line="621"/>
            <javadoc line="631">
                Reads a double                
            </javadoc>
            <method name="getDouble" type="double" line="634"/>
            <javadoc line="644">
                Reads a float                
            </javadoc>
            <method name="getFloat" type="float" line="647"/>
        </class>
    </source>