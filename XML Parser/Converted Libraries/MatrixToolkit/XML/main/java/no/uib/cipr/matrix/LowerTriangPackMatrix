<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <class name="LowerTriangPackMatrix" extends="AbstractTriangPackMatrix" line="24">
            <javadoc line="24">
                Lower triangular packed matrix. In contrast with{@link no.uib.cipr.matrix.LowerTriangDenseMatrix LowerTriangDenseMatrix},
                 * this matrix exploits the sparsity by only storing about half the matrix. As
                 * such, the triangular matrix
                 * &lt;p&gt;
                 * &lt;table border=&quot;1&quot;&gt;
                 * &lt;tr&gt;
                 * &lt;td&gt;a&lt;sub&gt;11&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                 * &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                 * &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr&gt;
                 * &lt;td&gt;a&lt;sub&gt;21&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;22&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                 * &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr&gt;
                 * &lt;td&gt;a&lt;sub&gt;31&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;32&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;33&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr&gt;
                 * &lt;td&gt;a&lt;sub&gt;41&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;42&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;43&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;44&lt;/sub&gt;&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;/table&gt;
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * is packed as follows:
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;table border=&quot;1&quot;&gt;
                 * &lt;tr&gt;
                 * &lt;td&gt;a&lt;sub&gt;11&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;21&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;31&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;41&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;22&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;32&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;42&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;33&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;43&lt;/sub&gt;&lt;/td&gt;
                 * &lt;td&gt;a&lt;sub&gt;44&lt;/sub&gt;&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;/table&gt;
                 * &lt;/p&gt;                
            </javadoc>
            <javadoc line="79">
                Constructor for LowerTriangPackMatrix                
                <@param>
                    m nSize of the matrix. Since the matrix must be square, this
                     * equals both the number of rows and columns                    
                </@param>
            </javadoc>
            <method name="LowerTriangPackMatrix" type="constructor" line="86"/>
            <javadoc line="90">
                Constructor for LowerTriangPackMatrix                
                <@param>
                    m nSize of the matrix. Since the matrix must be square, this
                     * equals both the number of rows and columns                    
                </@param>
            </javadoc>
            <method name="LowerTriangPackMatrix" type="constructor" line="97"/>
            <javadoc line="101">
                Constructor for LowerTriangPackMatrix                
                <@param>
                    m AMatrix to copy contents from. Only the entries of the relevant
                     * part are copied                    
                </@param>
            </javadoc>
            <method name="LowerTriangPackMatrix" type="constructor" line="108"/>
            <javadoc line="112">
                Constructor for LowerTriangPackMatrix                
                <@param>
                    m AMatrix to copy contents from. Only the entries of the relevant
                     * part are copied                    
                </@param>
                <@param>
                    m deepTrue if the copy is deep, else false (giving a shallow copy).
                     * For shallow copies, <code>A</code> must be a packed matrix                    
                </@param>
            </javadoc>
            <method name="LowerTriangPackMatrix" type="constructor" line="122"/>
            <javadoc line="126">
                Constructor for LowerTriangPackMatrix                
                <@param>
                    m AMatrix to copy contents from. Only the entries of the relevant
                     * part are copied                    
                </@param>
                <@param>
                    m deepTrue if the copy is deep, else false (giving a shallow copy).
                     * For shallow copies, <code>A</code> must be a packed matrix                    
                </@param>
            </javadoc>
            <method name="LowerTriangPackMatrix" type="constructor" line="136"/>
            <method name="add" type="void" line="141"/>
            <method name="set" type="void" line="148"/>
            <method name="get" type="double" line="155"/>
            <javadoc line="161">
                Checks the row and column indices, and returns the linear data index                
            </javadoc>
            <method name="getIndex" type="int" line="164"/>
            <method name="copy" type="void" line="170"/>
            <method name="copy" type="LowerTriangPackMatrix" line="177"/>
        </class>
    </source>