<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="java.util.Iterator"/>
        <import package="no.uib.cipr.matrix.AbstractVector"/>
        <import package="no.uib.cipr.matrix.DenseVector"/>
        <import package="no.uib.cipr.matrix.Matrices"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <import package="no.uib.cipr.matrix.VectorEntry"/>
        <class name="SparseVector" line="31">
            <extends class="AbstractVector"/>
            <implements interface="ISparseVector"/>
            <javadoc line="31">
                Sparse vector                
            </javadoc>
            <declaration name="data" type="double[]" line="36"/>
            <javadoc line="36">
                Data                
            </javadoc>
            <declaration name="index" type="int[]" line="41"/>
            <javadoc line="41">
                Indices to data                
            </javadoc>
            <declaration name="used" type="int" line="46"/>
            <javadoc line="46">
                How much has been used                
            </javadoc>
            <javadoc line="51">
                Constructor for SparseVector.                
                <@param>
                    m sizeSize of the vector                    
                </@param>
                <@param>
                    m nzInitial number of non-zeros                    
                </@param>
            </javadoc>
            <method name="SparseVector" type="constructor" line="59">
                <params>
                    <param name="size" type="int"/>
                    <param name="nz" type="int"/>
                </params>
            </method>
            <javadoc line="65">
                Constructor for SparseVector, and copies the contents from the supplied
                  vector.                
                <@param>
                    m xVector to copy from                    
                </@param>
                <@param>
                    m deepTrue if a deep copy is to be made. If the copy is shallow,
                      <code>x</code> must be a <code>SparseVector</code>                    
                </@param>
            </javadoc>
            <method name="SparseVector" type="constructor" line="75">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="deep" type="boolean"/>
                </params>
                <scope line="78">
                    <declaration name="nz" type="int" line="79"/>
                </scope>
                <scope line="83">
                    <declaration name="xs" type="SparseVector" line="84"/>
                </scope>
            </method>
            <javadoc line="91">
                Constructor for SparseVector, and copies the contents from the supplied
                  vector. Zero initial pre-allocation                
                <@param>
                    m xVector to copy from. A deep copy is made                    
                </@param>
            </javadoc>
            <method name="SparseVector" type="constructor" line="98">
                <params>
                    <param name="x" type="Vector"/>
                </params>
            </method>
            <javadoc line="102">
                Constructor for SparseVector. Zero initial pre-allocation                
                <@param>
                    m sizeSize of the vector                    
                </@param>
            </javadoc>
            <method name="SparseVector" type="constructor" line="108">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="112">
                Constructor for SparseVector                
                <@param>
                    m sizeSize of the vector                    
                </@param>
                <@param>
                    m indexIndices of the vector                    
                </@param>
                <@param>
                    m dataEntries of the vector                    
                </@param>
                <@param>
                    m deepTrue for a deep copy. For shallow copies, the given indices
                      will be used internally                    
                </@param>
            </javadoc>
            <method name="SparseVector" type="constructor" line="125">
                <params>
                    <param name="size" type="int"/>
                    <param name="index" type="int[]"/>
                    <param name="data" type="double[]"/>
                    <param name="deep" type="boolean"/>
                </params>
                <scope line="131"/>
                <scope line="135"/>
            </method>
            <javadoc line="142">
                Constructor for SparseVector                
                <@param>
                    m sizeSize of the vector                    
                </@param>
                <@param>
                    m indexThe vector indices are copies from this array                    
                </@param>
                <@param>
                    m dataThe vector entries are copies from this array                    
                </@param>
            </javadoc>
            <method name="SparseVector" type="constructor" line="152">
                <params>
                    <param name="size" type="int"/>
                    <param name="index" type="int[]"/>
                    <param name="data" type="double[]"/>
                </params>
            </method>
            <method name="set" type="void" line="157">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <comment line="158">
                    TODO: should we check against zero when setting zeros?                    
                </comment>
                <declaration name="i" type="int" line="162"/>
            </method>
            <method name="add" type="void" line="167">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="i" type="int" line="170"/>
            </method>
            <method name="get" type="double" line="175">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="in" type="int" line="178"/>
            </method>
            <javadoc line="184">
                Tries to find the index. If it is not found, a reallocation is done, and
                  a new index is returned.                
            </javadoc>
            <method name="getIndex" type="int" line="188">
                <params>
                    <param name="ind" type="int"/>
                </params>
                <comment line="189">
                    Try to find column index                    
                </comment>
                <comment line="189">
                    Found                    
                </comment>
                <comment line="189">
                    Check available memory                    
                </comment>
                <comment line="189">
                    All ok, make room for insertion                    
                </comment>
                <comment line="189">
                    Put in new structure                    
                </comment>
                <comment line="189">
                    Update pointers                    
                </comment>
                <comment line="189">
                    Return insertion index                    
                </comment>
                <declaration name="i" type="int" line="191"/>
                <declaration name="newIndex" type="int[]" line="197"/>
                <declaration name="newData" type="double[]" line="198"/>
                <scope line="201">
                    <declaration name="newLength" type="int" line="204"/>
                </scope>
            </method>
            <method name="copy" type="SparseVector" line="230"/>
            <method name="zero" type="SparseVector" line="235"/>
            <method name="scale" type="SparseVector" line="242">
                <params>
                    <param name="alpha" type="double"/>
                </params>
                <comment line="243">
                    Quick return if possible                    
                </comment>
            </method>
            <method name="dot" type="double" line="256">
                <params>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="yd" type="double[]" line="262"/>
                <declaration name="ret" type="double" line="264"/>
            </method>
            <method name="norm1" type="double" line="271">
                <declaration name="sum" type="double" line="272"/>
            </method>
            <method name="norm2" type="double" line="279">
                <declaration name="norm" type="double" line="280"/>
            </method>
            <method name="norm2_robust" type="double" line="287">
                <declaration name="scale" type="double" line="288"/>
                <scope line="289">
                    <scope line="290">
                        <declaration name="absxi" type="double" line="291"/>
                        <scope line="292"/>
                    </scope>
                </scope>
            </method>
            <method name="normInf" type="double" line="303">
                <declaration name="max" type="double" line="304"/>
            </method>
            <javadoc line="310">
                Returns the internal data                
            </javadoc>
            <method name="getData" type="double[]" line="313"/>
            <javadoc line="317">
                Returns the indices                
            </javadoc>
            <method name="getIndex" type="int[]" line="320">
                <comment line="321">
                    could run compact, or return subarray                    
                </comment>
                <comment line="321">
                    compact();                    
                </comment>
                <declaration name="indices" type="int[]" line="326"/>
                <scope line="327"/>
            </method>
            <javadoc line="333">
                Number of entries used in the sparse structure                
            </javadoc>
            <method name="getUsed" type="int" line="336"/>
            <javadoc line="340">
                Compacts the vector                
            </javadoc>
            <method name="compact" type="void" line="343">
                <comment line="344">
                    t nz = Matrices.cardinality(this); // catches zero entries                    
                </comment>
                <declaration name="nz" type="int" line="344"/>
                <scope line="346">
                    <declaration name="newIndex" type="int[]" line="347"/>
                    <declaration name="newData" type="double[]" line="348"/>
                    <scope line="352"/>
                </scope>
            </method>
            <method name="iterator" type="Iterator<VectorEntry>" line="365"/>
            <method name="set" type="Vector" line="370">
                <params>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="yc" type="SparseVector" line="376"/>
                <scope line="378"/>
            </method>
            <class name="SparseVectorIterator" line="390">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="VectorEntry"/>
                    </type_params>
                </implements>
                <javadoc line="390">
                    Iterator over a sparse vector                    
                </javadoc>
                <declaration name="cursor" type="int" line="395"/>
                <declaration name="entry" type="SparseVectorEntry" line="397"/>
                <method name="hasNext" type="boolean" line="399"/>
                <method name="next" type="VectorEntry" line="403"/>
                <method name="remove" type="void" line="411"/>
            </class>
            <class name="SparseVectorEntry" line="417">
                <implements interface="VectorEntry"/>
                <javadoc line="417">
                    Entry of a sparse vector                    
                </javadoc>
                <declaration name="cursor" type="int" line="422"/>
                <method name="update" type="void" line="424">
                    <params>
                        <param name="cursor" type="int"/>
                    </params>
                </method>
                <method name="index" type="int" line="428"/>
                <method name="get" type="double" line="432"/>
                <method name="set" type="void" line="436">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
            </class>
        </class>
    </source>