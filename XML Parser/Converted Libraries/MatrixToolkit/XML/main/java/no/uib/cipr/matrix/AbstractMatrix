<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="java.util.Formatter"/>
        <import package="java.util.Iterator"/>
        <class name="AbstractMatrix" line="26">
            <implements interface="Matrix"/>
            <javadoc line="26">
                Partial implementation of &lt;code&gt;Matrix&lt;/code&gt;. The following methods throw
                 * &lt;code&gt;UnsupportedOperationException&lt;/code&gt;, and should be overridden by a
                 * subclass:
                 * &lt;ul&gt;
                 * &lt;li&gt;&lt;code&gt;get(int,int)&lt;/code&gt;&lt;/li&gt;
                 * &lt;li&gt;&lt;code&gt;set(int,int,double)&lt;/code&gt;&lt;/li&gt;
                 * &lt;li&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/li&gt;
                 * &lt;li&gt;All the direct solution methods&lt;/li&gt;
                 * &lt;/ul&gt;
                 * &lt;p&gt;
                 * For the rest of the methods, simple default implementations using a matrix
                 * iterator has been provided. There are some kernel operations which the
                 * simpler operations forward to, for instance, &lt;code&gt;mult(Matrix,Matrix)&lt;/code&gt;
                 * forwards to &lt;code&gt;multAdd(double,Matrix,Matrix)&lt;/code&gt;. Subclasses can
                 * thus focus on overriding the kernel operations, which are:
                 * &lt;ul&gt;
                 * &lt;li&gt; &lt;code&gt;multAdd(double,Vector,Vector)&lt;/code&gt; and
                 * &lt;code&gt;transMultAdd(double,Vector,Vector)&lt;/code&gt;. &lt;/li&gt;
                 * &lt;li&gt; &lt;code&gt;rank1(double,Vector,Vector)&lt;/code&gt; and
                 * &lt;code&gt;rank1(double,Vector,Vector)&lt;/code&gt;.&lt;/li&gt;
                 * &lt;li&gt; &lt;code&gt;multAdd(double,Matrix,Matrix)&lt;/code&gt;,
                 * &lt;code&gt;transAmultAdd(double,Matrix,Matrix)&lt;/code&gt;,
                 * &lt;code&gt;transBmultAdd(double,Matrix,Matrix)&lt;/code&gt;, and
                 * &lt;code&gt;transABmultAdd(double,Matrix,Matrix)&lt;/code&gt;. &lt;/li&gt;
                 * &lt;li&gt; &lt;code&gt;scale(double)&lt;/code&gt;. &lt;/li&gt;
                 * &lt;li&gt; &lt;code&gt;set(double,Matrix)&lt;/code&gt; and &lt;code&gt;add(double,Matrix)&lt;/code&gt;.
                 * &lt;/li&gt;
                 * &lt;li&gt; &lt;code&gt;transpose&lt;/code&gt; and &lt;code&gt;transpose(Matrix)&lt;/code&gt;. &lt;/li&gt;
                 * &lt;li&gt; All the norms.&lt;/li&gt;
                 * &lt;/ul&gt;
                 * &lt;p&gt;
                 * Finally, a default iterator is provided by this class, which works by calling
                 * the &lt;code&gt;get&lt;/code&gt; function. A tailored replacement should be used by
                 * subclasses.
                 * &lt;/ul&gt;                
            </javadoc>
            <declaration name="numRows" type="int" line="65"/>
            <javadoc line="65">
                Number of rows                
            </javadoc>
            <declaration name="numColumns" type="int" line="70"/>
            <javadoc line="70">
                Number of columns                
            </javadoc>
            <javadoc line="75">
                Constructor for AbstractMatrix                
            </javadoc>
            <method name="AbstractMatrix" type="constructor" line="78"/>
            <javadoc line="86">
                Constructor for AbstractMatrix, same size as A. The invoking constructor
                 * should set this matrix equal the argument matrix                
            </javadoc>
            <method name="AbstractMatrix" type="constructor" line="90"/>
            <method name="numRows" type="int" line="94"/>
            <method name="numColumns" type="int" line="98"/>
            <method name="isSquare" type="boolean" line="102"/>
            <method name="set" type="void" line="106"/>
            <method name="add" type="void" line="110"/>
            <method name="get" type="double" line="114"/>
            <javadoc line="118">
                Checks the passed row and column indices                
            </javadoc>
            <method name="check" type="void" line="121"/>
            <method name="copy" type="Matrix" line="136"/>
            <method name="zero" type="Matrix" line="140"/>
            <method name="mult" type="Vector" line="146"/>
            <method name="mult" type="Vector" line="150"/>
            <method name="multAdd" type="Vector" line="154"/>
            <method name="multAdd" type="Vector" line="158"/>
            <javadoc line="168">
                Checks the arguments to &lt;code&gt;mult&lt;/code&gt; and &lt;code&gt;multAdd&lt;/code&gt;                
            </javadoc>
            <method name="checkMultAdd" type="void" line="171"/>
            <method name="transMult" type="Vector" line="180"/>
            <method name="transMult" type="Vector" line="184"/>
            <method name="transMultAdd" type="Vector" line="188"/>
            <method name="transMultAdd" type="Vector" line="192"/>
            <javadoc line="202">
                Checks the arguments to &lt;code&gt;transMult&lt;/code&gt; and
                 * &lt;code&gt;transMultAdd&lt;/code&gt;                
            </javadoc>
            <method name="checkTransMultAdd" type="void" line="206"/>
            <method name="solve" type="Vector" line="215"/>
            <method name="transSolve" type="Vector" line="219"/>
            <javadoc line="223">
                Checks that a matrix inversion is legal for the given arguments. This is
                 * for the square case, not for least-squares problems                
            </javadoc>
            <method name="checkSolve" type="void" line="227"/>
            <method name="rank1" type="Matrix" line="238"/>
            <method name="rank1" type="Matrix" line="242"/>
            <method name="rank1" type="Matrix" line="246"/>
            <method name="rank1" type="Matrix" line="250"/>
            <javadoc line="265">
                Checks that a vector rank1 update is possible for the given vectors                
            </javadoc>
            <method name="checkRank1" type="void" line="268"/>
            <method name="rank2" type="Matrix" line="279"/>
            <method name="rank2" type="Matrix" line="283">
                <scope line="290"/>
            </method>
            <javadoc line="298">
                Checks that a vector rank2 update is legal with the given vectors                
            </javadoc>
            <method name="checkRank2" type="void" line="301"/>
            <method name="mult" type="Matrix" line="312"/>
            <method name="mult" type="Matrix" line="316"/>
            <method name="multAdd" type="Matrix" line="320"/>
            <method name="multAdd" type="Matrix" line="324">
                <scope line="329">
                    <declaration name="dot" type="double" line="330"/>
                </scope>
            </method>
            <javadoc line="339">
                Checks the arguments to &lt;code&gt;mult&lt;/code&gt; and &lt;code&gt;multAdd&lt;/code&gt;                
            </javadoc>
            <method name="checkMultAdd" type="void" line="342"/>
            <method name="transAmult" type="Matrix" line="355"/>
            <method name="transAmult" type="Matrix" line="359"/>
            <method name="transAmultAdd" type="Matrix" line="363"/>
            <method name="transAmultAdd" type="Matrix" line="367">
                <scope line="372">
                    <declaration name="dot" type="double" line="373"/>
                </scope>
            </method>
            <javadoc line="382">
                Checks the arguments to &lt;code&gt;transAmult&lt;/code&gt; and
                 * &lt;code&gt;transAmultAdd&lt;/code&gt;                
            </javadoc>
            <method name="checkTransAmultAdd" type="void" line="386"/>
            <method name="transBmult" type="Matrix" line="399"/>
            <method name="transBmult" type="Matrix" line="403"/>
            <method name="transBmultAdd" type="Matrix" line="407"/>
            <method name="transBmultAdd" type="Matrix" line="411">
                <scope line="416">
                    <declaration name="dot" type="double" line="417"/>
                </scope>
            </method>
            <javadoc line="426">
                Checks the arguments to &lt;code&gt;transBmult&lt;/code&gt; and
                 * &lt;code&gt;transBmultAdd&lt;/code&gt;                
            </javadoc>
            <method name="checkTransBmultAdd" type="void" line="430"/>
            <method name="transABmult" type="Matrix" line="443"/>
            <method name="transABmult" type="Matrix" line="447"/>
            <method name="transABmultAdd" type="Matrix" line="451"/>
            <method name="transABmultAdd" type="Matrix" line="455">
                <scope line="460">
                    <declaration name="dot" type="double" line="461"/>
                </scope>
            </method>
            <javadoc line="470">
                Checks the arguments to &lt;code&gt;transABmultAdd&lt;/code&gt; and
                 * &lt;code&gt;transABmultAdd&lt;/code&gt;                
            </javadoc>
            <method name="checkTransABmultAdd" type="void" line="474"/>
            <method name="solve" type="Matrix" line="486"/>
            <method name="transSolve" type="Matrix" line="490"/>
            <javadoc line="494">
                Checks that a matrix inversion is legal for the given arguments. This is
                 * for the square case, not for least-squares problems                
            </javadoc>
            <method name="checkSolve" type="void" line="498"/>
            <method name="rank1" type="Matrix" line="513"/>
            <method name="rank1" type="Matrix" line="517"/>
            <javadoc line="526">
                Checks that a matrix rank1 update is possible for the given matrix                
            </javadoc>
            <method name="checkRank1" type="void" line="529"/>
            <method name="transRank1" type="Matrix" line="537"/>
            <method name="transRank1" type="Matrix" line="541"/>
            <javadoc line="550">
                Checks that a transposed rank1 update is leagal with the given argument                
            </javadoc>
            <method name="checkTransRank1" type="void" line="553"/>
            <method name="rank2" type="Matrix" line="561"/>
            <method name="rank2" type="Matrix" line="565"/>
            <javadoc line="574">
                Checks that a rank2 update is legal for the given arguments                
            </javadoc>
            <method name="checkRank2" type="void" line="577"/>
            <method name="transRank2" type="Matrix" line="589"/>
            <method name="transRank2" type="Matrix" line="593"/>
            <javadoc line="602">
                Checks that a transposed rank2 update is leagal with the given arguments                
            </javadoc>
            <method name="checkTransRank2" type="void" line="605"/>
            <method name="scale" type="Matrix" line="620"/>
            <method name="set" type="Matrix" line="632"/>
            <method name="set" type="Matrix" line="636"/>
            <method name="add" type="Matrix" line="651"/>
            <method name="add" type="Matrix" line="655"/>
            <javadoc line="665">
                Checks that the sizes of this matrix and the given conform                
            </javadoc>
            <method name="checkSize" type="void" line="668"/>
            <method name="transpose" type="Matrix" line="678">
                <scope line="682">
                    <declaration name="value" type="double" line="683"/>
                </scope>
            </method>
            <javadoc line="691">
                Checks that the matrix may be transposed                
            </javadoc>
            <method name="checkTranspose" type="void" line="694"/>
            <method name="transpose" type="Matrix" line="699"/>
            <javadoc line="712">
                Checks that this matrix can be transposed into the given matrix                
            </javadoc>
            <method name="checkTranspose" type="void" line="715"/>
            <method name="norm" type="double" line="724"/>
            <javadoc line="736">
                Computes the 1 norm                
            </javadoc>
            <method name="norm1" type="double" line="739">
                <declaration name="rowSum" type="double[]" line="740"/>
            </method>
            <javadoc line="746">
                Computes the Frobenius norm. This implementation is overflow resistant                
            </javadoc>
            <method name="normF" type="double" line="749">
                <declaration name="scale" type="double" line="750"/>
                <scope line="751">
                    <declaration name="Aval" type="double" line="752"/>
                    <scope line="753">
                        <declaration name="absxi" type="double" line="754"/>
                        <scope line="755"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="765">
                Computes the infinity norm                
            </javadoc>
            <method name="normInf" type="double" line="768">
                <declaration name="columnSum" type="double[]" line="769"/>
            </method>
            <javadoc line="775">
                Returns the largest absolute value                
            </javadoc>
            <method name="max" type="double" line="778">
                <declaration name="max" type="double" line="779"/>
            </method>
            <javadoc line="785">
                Returns the largest element of the passed array                
            </javadoc>
            <method name="max" type="double" line="788">
                <declaration name="max" type="double" line="789"/>
            </method>
            <method name="toString" type="String" line="796">
                <comment line="797">
                    Output into coordinate format. Indices start from 1 instead of 0                    
                </comment>
                <declaration name="out" type="Formatter" line="798"/>
                <declaration name="i" type="int" line="803"/>
                <scope line="804">
                    <scope line="807"/>
                </scope>
            </method>
            <method name="iterator" type="Iterator<MatrixEntry>" line="816"/>
            <class name="RefMatrixIterator" line="820">
                <implements interface="Iterator&lt;MatrixEntry&gt;"/>
                <javadoc line="820">
                    Iterator over a general matrix. Uses column-major traversal                    
                </javadoc>
                <declaration name="row" type="int" line="825"/>
                <javadoc line="825">
                    Matrix cursor                    
                </javadoc>
                <declaration name="entry" type="RefMatrixEntry" line="830"/>
                <javadoc line="830">
                    Matrix entry                    
                </javadoc>
                <method name="hasNext" type="boolean" line="835"/>
                <method name="next" type="MatrixEntry" line="839">
                    <comment line="840">
                        Traversal first down the columns, then the rows                        
                    </comment>
                    <scope line="845"/>
                </method>
                <method name="remove" type="void" line="853"/>
            </class>
            <class name="RefMatrixEntry" line="859">
                <implements interface="MatrixEntry"/>
                <javadoc line="859">
                    Matrix entry backed by the matrix. May be reused for higher performance                    
                </javadoc>
                <declaration name="row" type="int" line="864"/>
                <javadoc line="864">
                    Matrix position                    
                </javadoc>
                <javadoc line="869">
                    Updates the entry                    
                </javadoc>
                <method name="update" type="void" line="872"/>
                <method name="row" type="int" line="877"/>
                <method name="column" type="int" line="881"/>
                <method name="get" type="double" line="885"/>
                <method name="set" type="void" line="889"/>
            </class>
        </class>
    </source>