<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="no.uib.cipr.matrix.Matrix.Norm"/>
        <import package="com.github.fommil.netlib.LAPACK"/>
        <import package="org.netlib.util.doubleW"/>
        <import package="org.netlib.util.intW"/>
        <class name="DenseCholesky" line="29">
            <javadoc line="29">
                Dense Cholesky decomposition                
            </javadoc>
            <declaration name="n" type="int" line="34"/>
            <javadoc line="34">
                Matrix dimension                
            </javadoc>
            <declaration name="Cl" type="LowerTriangDenseMatrix" line="39"/>
            <javadoc line="39">
                Cholesky decomposition of a lower matrix                
            </javadoc>
            <declaration name="Cu" type="UpperTriangDenseMatrix" line="44"/>
            <javadoc line="44">
                Cholesky decomposition of an upper matrix                
            </javadoc>
            <declaration name="notspd" type="boolean" line="49"/>
            <javadoc line="49">
                If the matrix is SPD or not                
            </javadoc>
            <declaration name="upper" type="boolean" line="54"/>
            <javadoc line="54">
                True for upper part, else false                
            </javadoc>
            <javadoc line="59">
                Constructor for DenseCholesky                
                <@param>
                    m nMatrix size                    
                </@param>
                <@param>
                    m upperTrue for decomposing an upper symmetrical matrix, false for a
                     * lower symmetrical matrix                    
                </@param>
            </javadoc>
            <method name="DenseCholesky" type="constructor" line="68"/>
            <javadoc line="78">
                Calculates a Cholesky decomposition                
                <@param>
                    m AMatrix to decompose. Not modified                    
                </@param>
                <@return>
                    n The current decomposition                    
                </@return>
            </javadoc>
            <method name="factorize" type="DenseCholesky" line="85"/>
            <javadoc line="90">
                Calculates a Cholesky decomposition                
                <@param>
                    m AMatrix to decompose. Overwritten on return                    
                </@param>
                <@return>
                    n The current decomposition                    
                </@return>
            </javadoc>
            <method name="factor" type="DenseCholesky" line="97"/>
            <javadoc line="105">
                Calculates a Cholesky decomposition                
                <@param>
                    m AMatrix to decompose. Overwritten on return                    
                </@param>
                <@return>
                    n The current decomposition                    
                </@return>
            </javadoc>
            <method name="factor" type="DenseCholesky" line="112"/>
            <method name="decompose" type="DenseCholesky" line="120">
                <declaration name="info" type="intW" line="126"/>
            </method>
            <javadoc line="147">
                Returns true if the matrix decomposed is symmetrical, positive definite                
            </javadoc>
            <method name="isSPD" type="boolean" line="150"/>
            <javadoc line="154">
                Returns the decomposition matrix. Only valid for decomposition of a lower
                 * SPD matrix                
            </javadoc>
            <method name="getL" type="LowerTriangDenseMatrix" line="158"/>
            <javadoc line="165">
                Returns the decomposition matrix. Only valid for decomposition of a upper
                 * SPD matrix                
            </javadoc>
            <method name="getU" type="UpperTriangDenseMatrix" line="169"/>
            <javadoc line="176">
                Solves for &lt;code&gt;B&lt;/code&gt;, overwriting it on return                
            </javadoc>
            <method name="solve" type="DenseMatrix" line="179">
                <declaration name="info" type="intW" line="185"/>
            </method>
            <javadoc line="201">
                Computes the reciprocal condition number                
                <@param>
                    m AThe matrix this is a decomposition of                    
                </@param>
                <@return>
                    n The reciprocal condition number. Values close to unity indicate a
                     * well-conditioned system, while numbers close to zero do not.                    
                </@return>
            </javadoc>
            <method name="rcond" type="double" line="209">
                <declaration name="anorm" type="double" line="215"/>
                <declaration name="work" type="double[]" line="217"/>
                <declaration name="iwork" type="int[]" line="218"/>
                <declaration name="info" type="intW" line="220"/>
                <declaration name="rcond" type="doubleW" line="221"/>
            </method>
        </class>
    </source>