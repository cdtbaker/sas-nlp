<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="java.io.IOException"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Set"/>
        <import package="java.util.TreeSet"/>
        <import package="no.uib.cipr.matrix.AbstractMatrix"/>
        <import package="no.uib.cipr.matrix.DenseVector"/>
        <import package="no.uib.cipr.matrix.Matrix"/>
        <import package="no.uib.cipr.matrix.MatrixEntry"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <import package="no.uib.cipr.matrix.io.MatrixInfo"/>
        <import package="no.uib.cipr.matrix.io.MatrixSize"/>
        <import package="no.uib.cipr.matrix.io.MatrixVectorReader"/>
        <class name="CompDiagMatrix" extends="AbstractMatrix" line="38">
            <javadoc line="38">
                Compressed diagonal storage (CDS) matrix                
            </javadoc>
            <declaration name="diag" type="double[][]" line="43"/>
            <javadoc line="43">
                The diagonals                
            </javadoc>
            <declaration name="ind" type="int[]" line="48"/>
            <javadoc line="48">
                Indices to the start of the diagonal, relative to the main diagonal.
                 * Positive means the number of diagonals shifted up, while negative is the
                 * number of diagonals shifted down                
            </javadoc>
            <javadoc line="55">
                Constructor for CompDiagMatrix                
                <@param>
                    m rReader to get sparse matrix from                    
                </@param>
            </javadoc>
            <method name="CompDiagMatrix" type="constructor" line="61">
                <comment line="62">
                    Start with a zero-sized matrix                    
                </comment>
                <comment line="62">
                    Get matrix information. Use the header if present, else use a safe                    
                </comment>
                <comment line="62">
                    default                    
                </comment>
                <comment line="62">
                    Resize the matrix to correct size                    
                </comment>
                <comment line="62">
                    Check that the matrix is in an acceptable format                    
                </comment>
                <comment line="62">
                    Start reading entries                    
                </comment>
                <comment line="62">
                    Shift the indices from 1 based to 0 based                    
                </comment>
                <comment line="62">
                    Find all the diagonals so that we can preallocate                    
                </comment>
                <comment line="62">
                    Convert into an integer array                    
                </comment>
                <comment line="62">
                    Create the structure with preallocation                    
                </comment>
                <comment line="62">
                    Insert the entries                    
                </comment>
                <comment line="62">
                    Put in missing entries from symmetry or skew symmetry                    
                </comment>
                <declaration name="info" type="MatrixInfo" line="67"/>
                <declaration name="size" type="MatrixSize" line="73"/>
                <declaration name="row" type="int[]" line="91"/>
                <declaration name="entry" type="double[]" line="93"/>
                <declaration name="diags" type="Set&lt;Integer&gt;" line="101"/>
                <declaration name="ind" type="int[]" line="111"/>
                <scope line="112">
                    <declaration name="ints" type="Integer[]" line="113"/>
                </scope>
                <scope line="128"/>
                <scope line="133"/>
            </method>
            <javadoc line="139">
                Creates a new sparse matrix with the given diagonals preallocated. A
                 * negative index is a subdiagonal, positive is superdiagonal                
            </javadoc>
            <method name="CompDiagMatrix" type="constructor" line="143"/>
            <method name="construct" type="void" line="148">
                <comment line="149">
                    Keep the diagonal indices sorted                    
                </comment>
                <declaration name="sortedDiagonal" type="int[]" line="153"/>
                <scope line="157"/>
            </method>
            <javadoc line="163">
                Creates a new sparse matrix without preallocation                
            </javadoc>
            <method name="CompDiagMatrix" type="constructor" line="166"/>
            <javadoc line="170">
                Creates a new sparse matrix copied from the given matrix. Can take a deep
                 * copy or a shallow copy. For the latter, the supplied matrix must be a
                 * CompDiagMatrix. Preallocation is also possible, but is only used for the
                 * deep copy.                
            </javadoc>
            <method name="CompDiagMatrix" type="constructor" line="176">
                <scope line="179"/>
                <scope line="182">
                    <declaration name="Ac" type="CompDiagMatrix" line="183"/>
                </scope>
            </method>
            <javadoc line="189">
                Creates a new sparse matrix copied from the given matrix. Takes a deep
                 * copy, with possibility to specify preallocation                
            </javadoc>
            <method name="CompDiagMatrix" type="constructor" line="193"/>
            <javadoc line="197">
                Creates a new sparse matrix copied from the given matrix. Can take a deep
                 * copy or a shallow copy. For the latter, the supplied matrix must be a
                 * CompDiagMatrix. No preallocation is done                
            </javadoc>
            <method name="CompDiagMatrix" type="constructor" line="202"/>
            <javadoc line="206">
                Creates a new sparse matrix copied from the given matrix. Takes a deep
                 * copy without preallocation                
            </javadoc>
            <method name="CompDiagMatrix" type="constructor" line="210"/>
            <javadoc line="214">
                Returns the internal diagonal storage                
            </javadoc>
            <method name="getDiagonals" type="double[][]" line="217"/>
            <javadoc line="221">
                Returns the diagonal offsets                
            </javadoc>
            <method name="getIndex" type="int[]" line="224"/>
            <method name="add" type="void" line="229">
                <declaration name="diagonal" type="int" line="232"/>
            </method>
            <method name="get" type="double" line="238">
                <declaration name="diagonal" type="int" line="241"/>
            </method>
            <method name="set" type="void" line="250">
                <declaration name="diagonal" type="int" line="253"/>
            </method>
            <method name="getDiagonal" type="int" line="258"/>
            <method name="getOnDiagIndex" type="int" line="262"/>
            <method name="getCompDiagIndex" type="int" line="266">
                <comment line="267">
                    Check if the diagonal is already present                    
                </comment>
                <comment line="267">
                    Need to allocate new diagonal. Get the diagonal size                    
                </comment>
                <comment line="267">
                    Allocate new primary structure                    
                </comment>
                <comment line="267">
                    Move data from the old into the new structure                    
                </comment>
                <comment line="267">
                    Update pointers                    
                </comment>
                <declaration name="diagonal" type="int" line="267"/>
                <declaration name="index" type="int" line="270"/>
                <declaration name="size" type="int" line="276"/>
                <declaration name="newDiag" type="double[]" line="279"/>
                <declaration name="newDiagArray" type="double[][]" line="280"/>
                <declaration name="newInd" type="int[]" line="281"/>
            </method>
            <javadoc line="301">
                Finds the size of the requested diagonal to be allocated                
            </javadoc>
            <method name="getDiagSize" type="int" line="304"/>
            <method name="copy" type="Matrix" line="312"/>
            <method name="zero" type="Matrix" line="317"/>
            <method name="mult" type="Vector" line="324">
                <declaration name="xd" type="double[]" line="330"/>
                <declaration name="yd" type="double[]" line="331"/>
                <scope line="335">
                    <declaration name="row" type="int" line="336"/>
                    <declaration name="column" type="int" line="337"/>
                    <declaration name="locDiag" type="double[]" line="338"/>
                </scope>
            </method>
            <method name="multAdd" type="Vector" line="347">
                <declaration name="xd" type="double[]" line="353"/>
                <declaration name="yd" type="double[]" line="354"/>
                <scope line="356">
                    <declaration name="row" type="int" line="357"/>
                    <declaration name="column" type="int" line="358"/>
                    <declaration name="locDiag" type="double[]" line="359"/>
                </scope>
            </method>
            <method name="transMultAdd" type="Vector" line="368">
                <declaration name="xd" type="double[]" line="374"/>
                <declaration name="yd" type="double[]" line="375"/>
                <scope line="377">
                    <declaration name="row" type="int" line="378"/>
                    <declaration name="column" type="int" line="379"/>
                    <declaration name="locDiag" type="double[]" line="380"/>
                </scope>
            </method>
            <method name="iterator" type="Iterator<MatrixEntry>" line="389"/>
            <class name="CompDiagMatrixIterator" line="393">
                <implements interface="Iterator&lt;MatrixEntry&gt;"/>
                <javadoc line="393">
                    Iterator over a compressed diagonal matrix                    
                </javadoc>
                <declaration name="diagonal" type="int" line="398"/>
                <declaration name="entry" type="CompDiagMatrixEntry" line="400"/>
                <method name="hasNext" type="boolean" line="402"/>
                <method name="next" type="MatrixEntry" line="406">
                    <comment line="407">
                        Move along current diagonal                        
                    </comment>
                    <scope line="414"/>
                </method>
                <method name="remove" type="void" line="422"/>
            </class>
            <class name="CompDiagMatrixEntry" line="428">
                <implements interface="MatrixEntry"/>
                <javadoc line="428">
                    Entry of a compressed diagonal matrix                    
                </javadoc>
                <declaration name="diagonal" type="int" line="433"/>
                <method name="update" type="void" line="435"/>
                <method name="row" type="int" line="440"/>
                <method name="column" type="int" line="444"/>
                <method name="get" type="double" line="448"/>
                <method name="set" type="void" line="452"/>
            </class>
        </class>
    </source>