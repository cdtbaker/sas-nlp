<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="no.uib.cipr.matrix.DenseVector"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <import package="no.uib.cipr.matrix.Utilities"/>
        <import package="no.uib.cipr.matrix.VectorEntry"/>
        <import package="no.uib.cipr.matrix.VectorTestAbstract"/>
        <class name="SparseVectorTest" extends="VectorTestAbstract" line="32">
            <javadoc line="32">
                Test of SparseVector                
            </javadoc>
            <method name="SparseVectorTest" type="constructor" line="37"/>
            <method name="createPrimary" type="void" line="42">
                <declaration name="n" type="int" line="43"/>
                <declaration name="m" type="int" line="44"/>
            </method>
            <method name="testSparseVectorIndices" type="void" line="49">
                <comment line="50">
                    MTJ subtlety in getIndex() for SparseVector. before calling
                     getIndex(), you must call compact()... implementations may choose to
                     do nothing in this call, but the Intel extended LAPACK
                     implementations (and MTJ&apos;s SparseVector) require it. An alternative
                     to vector.getIndex() is VectorMethods.getIndex(Vector) which will
                     wrap this for you. It can take an arbitrary Vector and if it can be
                     cast to a SparseVector will compact it and use its getIndex() method
                     instead. (just so you&apos;re aware of this). Sam.
                    
                    
                     check that &quot;infinite dimensions&quot; doesn&apos;t use infinite memory                    
                </comment>
                <comment line="50">
                    check that &quot;infinite dimensions&quot; doesn&apos;t use infinite memory                    
                </comment>
                <comment line="50">
                    check that creating with double[] with zeros works                    
                </comment>
                <comment line="50">
                    NOTE: must compact before calling getIndex()!!!                    
                </comment>
                <comment line="50">
                    vector.compact();                    
                </comment>
                <declaration name="vector" type="SparseVector" line="62"/>
                <declaration name="index" type="int[]" line="63"/>
                <declaration name="entries" type="double[]" line="68"/>
                <declaration name="dense" type="Vector" line="74"/>
            </method>
            <method name="testBug27" type="void" line="85">
                <comment line="86">
                    sertTrue(vectorTF.getUsed() == 2);  // vectorTF.getUsed() returns 5                    
                </comment>
                <declaration name="tfVector" type="double[]" line="86"/>
                <declaration name="dense" type="DenseVector" line="87"/>
                <declaration name="vectorTF" type="SparseVector" line="88"/>
                <scope line="93">
                    <declaration name="ve" type="VectorEntry" line="94"/>
                    <declaration name="index" type="int" line="95"/>
                    <declaration name="value" type="double" line="96"/>
                </scope>
            </method>
        </class>
    </source>