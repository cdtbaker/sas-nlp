<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="au.com.bytecode.opencsv.CSVWriter"/>
        <import package="com.google.common.base.Stopwatch"/>
        <import package="com.google.common.collect.Lists"/>
        <import package="junit.framework.Assert"/>
        <import package="lombok.Cleanup"/>
        <import package="lombok.extern.java.Log"/>
        <import package="no.uib.cipr.matrix.DenseMatrix"/>
        <import package="no.uib.cipr.matrix.Matrix"/>
        <import package="no.uib.cipr.matrix.MatrixEntry"/>
        <import package="no.uib.cipr.matrix.Utilities"/>
        <import package="java.io.File"/>
        <import package="java.io.FileWriter"/>
        <import package="java.util.concurrent.TimeUnit"/>
        <class name="LinkedSparseMatrixTest" line="18">
            <extends class="SparseMatrixTestAbstract"/>
            <javadoc line="18">
                @author Sam Halliday                
            </javadoc>
            <method name="LinkedSparseMatrixTest" type="constructor" line="23">
                <params>
                    <param name="arg0" type="String"/>
                </params>
            </method>
            <method name="createPrimary" type="void" line="28">
                <declaration name="n" type="int" line="29"/>
                <declaration name="m" type="int" line="30"/>
                <declaration name="b" type="int" line="31"/>
                <declaration name="nz" type="int[][]" line="32"/>
                <scope line="36">
                    <declaration name="row" type="int" line="37"/>
                    <declaration name="col" type="int" line="38"/>
                    <declaration name="expect" type="double" line="39"/>
                </scope>
                <scope line="44">
                    <scope line="45">
                        <declaration name="expect" type="double" line="46"/>
                    </scope>
                </scope>
                <declaration name="head" type="LinkedSparseMatrix.Node" line="51"/>
                <declaration name="node" type="LinkedSparseMatrix.Node" line="52"/>
                <scope line="53"/>
                <scope line="59"/>
            </method>
            <method name="ignoredTimedMult" type="void" line="66">
                <declaration name="watch" type="Stopwatch" line="67"/>
                <declaration name="dense" type="DenseMatrix" line="68"/>
                <declaration name="nz" type="int[][]" line="69"/>
                <declaration name="sparse" type="Matrix" line="72"/>
                <scope line="75">
                    <declaration name="t" type="Matrix" line="77"/>
                    <declaration name="o" type="Matrix" line="79"/>
                </scope>
            </method>
            <method name="ignoredTimedTransMult" type="void" line="92">
                <declaration name="watch" type="Stopwatch" line="93"/>
                <declaration name="dense" type="DenseMatrix" line="94"/>
                <declaration name="nz" type="int[][]" line="95"/>
                <declaration name="sparse" type="Matrix" line="98"/>
                <scope line="101">
                    <declaration name="t" type="Matrix" line="103"/>
                    <declaration name="o" type="Matrix" line="104"/>
                </scope>
            </method>
            <method name="testIteratorSet" type="void" line="118"/>
            <method name="testIteratorSetGet" type="void" line="122"/>
            <javadoc line="126">
                Does a naive perf test against DenseMatrix, outputting CSV
                  that we plot in R.
                  &lt;p/&gt;
                  Generate n x n matrix with m entries, on left, and
                  an n x n dense matrix with m entries on the right,
                  using the same population algo. Then we multiply
                  them and output into a dense matrix. We compare
                  dense vs linked sparse from the left, and also
                  look at memory usage. We repeat for 10 different
                  values of m (10,000 to 100,000), and in both cases
                  vary m from 1,000 to 10,000. This requires about
                  8GB heap to be on the safe side.
                  &lt;p/&gt;
                  -Xms8g -Xmx8g -Djava.util.logging.config.file=logging.properties                
                <@param>
                    m args                    
                </@param>
            </javadoc>
            <method name="main" type="void" line="144">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <declaration name="file" type="File" line="145"/>
                <declaration name="csv" type="CSVWriter" line="147"/>
                <scope line="149">
                    <scope line="150">
                        <scope line="151">
                            <declaration name="patternA" type="int[][]" line="152"/>
                            <declaration name="origA" type="DenseMatrix" line="153"/>
                            <declaration name="patternB" type="int[][]" line="155"/>
                            <declaration name="origB" type="DenseMatrix" line="156"/>
                            <declaration name="denseMem" type="long" line="160"/>
                            <declaration name="timer" type="Stopwatch" line="162"/>
                            <scope line="163">
                                <declaration name="A" type="DenseMatrix" line="166"/>
                                <declaration name="B" type="DenseMatrix" line="173"/>
                                <declaration name="C" type="DenseMatrix" line="174"/>
                            </scope>
                            <scope line="180">
                                <declaration name="A" type="LinkedSparseMatrix" line="183"/>
                                <declaration name="B" type="DenseMatrix" line="190"/>
                                <declaration name="C" type="DenseMatrix" line="191"/>
                            </scope>
                            <declaration name="line" type="String[]" line="198"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>