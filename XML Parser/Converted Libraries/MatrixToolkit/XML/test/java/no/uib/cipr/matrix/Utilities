<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="java.util.Arrays"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Random"/>
        <import package="java.util.Set"/>
        <class name="Utilities" line="28">
            <javadoc line="28">
                Utilities for the testers
                  NOTE: many of these random matrices are not guaranteed to have solutions                
            </javadoc>
            <method name="Utilities" type="constructor" line="35">
                <comment line="36">
                    No need to instantiate                    
                </comment>
            </method>
            <javadoc line="39">
                Populates the sparse matrix in a symmetric fashion                
                <@param>
                    m AMatrix to populate                    
                </@param>
                <@param>
                    m numNumber of entries on each symmetry band                    
                </@param>
                <@return>
                    n The matrix data in dense format                    
                </@return>
            </javadoc>
            <method name="symmetryPopulate" type="double[][]" line="48">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="num" type="int"/>
                </params>
                <declaration name="n" type="int" line="49"/>
                <declaration name="values" type="double[][]" line="52"/>
                <scope line="57">
                    <declaration name="value" type="double" line="58"/>
                    <declaration name="k" type="int" line="59"/>
                </scope>
            </method>
            <javadoc line="68">
                Populates the matrix, putting a given number of entries on each column                
                <@param>
                    m AMatrix to populate                    
                </@param>
                <@param>
                    m numNumber of entries on each column                    
                </@param>
                <@return>
                    n The matrix data in dense format                    
                </@return>
            </javadoc>
            <method name="columnPopulate" type="double[][]" line="77">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="num" type="int"/>
                </params>
                <declaration name="n" type="int" line="78"/>
                <declaration name="values" type="double[][]" line="79"/>
                <scope line="84">
                    <declaration name="value" type="double" line="85"/>
                    <declaration name="k" type="int" line="86"/>
                </scope>
            </method>
            <javadoc line="93">
                Populates the matrix, putting a given number of entries on each row                
                <@param>
                    m AMatrix to populate                    
                </@param>
                <@param>
                    m numNumber of entries on each row                    
                </@param>
                <@return>
                    n The matrix data in dense format                    
                </@return>
            </javadoc>
            <method name="rowPopulate" type="double[][]" line="102">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="num" type="int"/>
                </params>
                <declaration name="n" type="int" line="103"/>
                <declaration name="values" type="double[][]" line="104"/>
                <scope line="109">
                    <declaration name="value" type="double" line="110"/>
                    <declaration name="k" type="int" line="111"/>
                </scope>
            </method>
            <javadoc line="118">
                Gets a row-wise non-zero pattern suitable for creating compressed row
                  matrices                
                <@param>
                    m nNumber of rows                    
                </@param>
                <@param>
                    m mNumber of columns                    
                </@param>
                <@param>
                    m bNumber of entries on each row                    
                </@param>
            </javadoc>
            <method name="getRowPattern" type="int[][]" line="129">
                <params>
                    <param name="n" type="int"/>
                    <param name="m" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="nz" type="int[][]" line="130"/>
                <scope line="132">
                    <declaration name="row" type="Set&lt;Integer&gt;" line="133"/>
                    <declaration name="j" type="int" line="138"/>
                </scope>
            </method>
            <javadoc line="146">
                Gets a column-wise non-zero pattern suitable for creating compressed
                  column matrices                
                <@param>
                    m nNumber of rows                    
                </@param>
                <@param>
                    m mNumber of columns                    
                </@param>
                <@param>
                    m bNumber of entries on each column                    
                </@param>
            </javadoc>
            <method name="getColumnPattern" type="int[][]" line="157">
                <params>
                    <param name="n" type="int"/>
                    <param name="m" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="nz" type="int[][]" line="158"/>
                <scope line="160">
                    <declaration name="column" type="Set&lt;Integer&gt;" line="161"/>
                    <declaration name="j" type="int" line="166"/>
                </scope>
            </method>
            <javadoc line="174">
                Populates the matrix, using the given non-zero pattern                
                <@param>
                    m AMatrix to populate                    
                </@param>
                <@param>
                    m nzColumn indices on each row                    
                </@param>
                <@return>
                    n The matrix data in dense format                    
                </@return>
            </javadoc>
            <method name="rowPopulate" type="double[][]" line="183">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="nz" type="int[][]"/>
                </params>
                <declaration name="n" type="int" line="184"/>
                <declaration name="values" type="double[][]" line="185"/>
                <scope line="190">
                    <declaration name="value" type="double" line="191"/>
                    <declaration name="k" type="int" line="192"/>
                </scope>
            </method>
            <javadoc line="200">
                Populates the matrix, using the given non-zero pattern                
                <@param>
                    m AMatrix to populate                    
                </@param>
                <@param>
                    m nzRow indices on each column                    
                </@param>
                <@return>
                    n The matrix data in dense format                    
                </@return>
            </javadoc>
            <method name="columnPopulate" type="double[][]" line="209">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="nz" type="int[][]"/>
                </params>
                <declaration name="n" type="int" line="210"/>
                <declaration name="values" type="double[][]" line="211"/>
                <scope line="216">
                    <declaration name="value" type="double" line="217"/>
                    <declaration name="k" type="int" line="218"/>
                </scope>
            </method>
            <javadoc line="226">
                Populates the matrix fully                
                <@param>
                    m AMatrix to populate                    
                </@param>
                <@return>
                    n The matrix data in dense format                    
                </@return>
            </javadoc>
            <method name="populate" type="double[][]" line="233">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="random" type="Random" line="234"/>
                <declaration name="n" type="int" line="235"/>
                <declaration name="values" type="double[][]" line="236"/>
                <scope line="238">
                    <declaration name="value" type="double" line="239"/>
                </scope>
            </method>
            <javadoc line="246">
                Populates the banded matrix                
                <@param>
                    m AMatrix to populate                    
                </@param>
                <@param>
                    m klNumber of subdiagonls                    
                </@param>
                <@param>
                    m kuNumber of superdiagonals                    
                </@param>
                <@return>
                    n The matrix data in dense format                    
                </@return>
            </javadoc>
            <method name="bandPopulate" type="double[][]" line="257">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="kl" type="int"/>
                    <param name="ku" type="int"/>
                </params>
                <declaration name="n" type="int" line="258"/>
                <declaration name="values" type="double[][]" line="259"/>
                <scope line="262">
                    <declaration name="value" type="double" line="263"/>
                </scope>
            </method>
            <javadoc line="270">
                Populates the banded matrix, but not its main diagonal                
                <@param>
                    m AMatrix to populate                    
                </@param>
                <@param>
                    m klNumber of subdiagonls                    
                </@param>
                <@param>
                    m kuNumber of superdiagonals                    
                </@param>
                <@return>
                    n The matrix data in dense format                    
                </@return>
            </javadoc>
            <method name="unitBandPopulate" type="double[][]" line="281">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="kl" type="int"/>
                    <param name="ku" type="int"/>
                </params>
                <declaration name="n" type="int" line="282"/>
                <declaration name="values" type="double[][]" line="283"/>
                <scope line="286">
                    <declaration name="value" type="double" line="287"/>
                </scope>
            </method>
            <javadoc line="294">
                Populates the lower triangular part of the matrix                
                <@param>
                    m AMatrix to populate                    
                </@param>
                <@return>
                    n The matrix data in dense format                    
                </@return>
            </javadoc>
            <method name="lowerPopulate" type="double[][]" line="301">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="n" type="int" line="302"/>
                <declaration name="values" type="double[][]" line="303"/>
                <scope line="306">
                    <declaration name="value" type="double" line="307"/>
                </scope>
            </method>
            <javadoc line="314">
                Populates the upper triangular part of the matrix                
                <@param>
                    m AMatrix to populate                    
                </@param>
                <@return>
                    n The matrix data in dense format                    
                </@return>
            </javadoc>
            <method name="upperPopulate" type="double[][]" line="321">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="n" type="int" line="322"/>
                <declaration name="values" type="double[][]" line="323"/>
                <scope line="326">
                    <declaration name="value" type="double" line="327"/>
                </scope>
            </method>
            <method name="upperPopulateGauss" type="void" line="334">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="random" type="Random" line="335"/>
            </method>
            <javadoc line="341">
                Populates the strictly lower triangular part of the matrix                
                <@param>
                    m AMatrix to populate                    
                </@param>
                <@return>
                    n The matrix data in dense format                    
                </@return>
            </javadoc>
            <method name="unitLowerPopulate" type="double[][]" line="348">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="n" type="int" line="349"/>
                <declaration name="values" type="double[][]" line="350"/>
                <scope line="353">
                    <declaration name="value" type="double" line="354"/>
                </scope>
            </method>
            <javadoc line="361">
                Populates the strictly upper triangular part of the matrix                
                <@param>
                    m AMatrix to populate                    
                </@param>
                <@return>
                    n The matrix data in dense format                    
                </@return>
            </javadoc>
            <method name="unitUpperPopulate" type="double[][]" line="368">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="n" type="int" line="369"/>
                <declaration name="values" type="double[][]" line="370"/>
                <scope line="373">
                    <declaration name="value" type="double" line="374"/>
                </scope>
            </method>
            <javadoc line="381">
                Puts the upper triangular part into the lower triangle                
            </javadoc>
            <method name="lowerSymmetrice" type="void" line="384">
                <params>
                    <param name="Ad" type="double[][]"/>
                </params>
                <declaration name="n" type="int" line="385"/>
            </method>
            <javadoc line="391">
                Puts the lower triangular part into the upper triangle                
            </javadoc>
            <method name="upperSymmetrice" type="void" line="394">
                <params>
                    <param name="Ad" type="double[][]"/>
                </params>
                <declaration name="n" type="int" line="395"/>
                <scope line="396">
                    <declaration name="m" type="int" line="397"/>
                </scope>
            </method>
            <javadoc line="403">
                Sets one on the main diagonal                
            </javadoc>
            <method name="unitSet" type="double[][]" line="406">
                <params>
                    <param name="Ad" type="double[][]"/>
                </params>
            </method>
            <declaration name="r" type="Random" line="412"/>
            <javadoc line="414">
                Returns an integer between zero (inclusive) and max (exclusive)                
            </javadoc>
            <method name="getInt" type="int" line="417">
                <params>
                    <param name="max" type="int"/>
                </params>
            </method>
            <javadoc line="421">
                Returns an integer between min (inclusive) and max (exclusive)                
            </javadoc>
            <method name="getInt" type="int" line="424">
                <params>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
            </method>
            <javadoc line="428">
                Returns true if the matrix is singular                
            </javadoc>
            <method name="singular" type="boolean" line="431">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="svd" type="SVD" line="432"/>
                <declaration name="S" type="double[]" line="433"/>
            </method>
            <javadoc line="440">
                Returns true if the matrix is positive definite                
            </javadoc>
            <method name="spd" type="boolean" line="443">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="evd" type="EVD" line="444"/>
                <scope line="445">
                    <declaration name="S" type="double[]" line="446"/>
                </scope>
                <scope line="451">
                    <declaration name="S" type="double[]" line="452"/>
                </scope>
            </method>
            <javadoc line="460">
                Populates the given vector, and returns an array containing its values                
            </javadoc>
            <method name="populate" type="double[]" line="463">
                <params>
                    <param name="x" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="464"/>
                <scope line="465">
                    <declaration name="alpha" type="double" line="466"/>
                </scope>
            </method>
            <javadoc line="473">
                Populates the given vector, and returns an array containing its values.
                  Only m entries are inserted                
            </javadoc>
            <method name="populate" type="double[]" line="477">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="m" type="int"/>
                </params>
                <declaration name="xd" type="double[]" line="478"/>
                <scope line="479">
                    <declaration name="alpha" type="double" line="480"/>
                    <declaration name="k" type="int" line="481"/>
                </scope>
            </method>
            <javadoc line="488">
                Zeros the given array                
            </javadoc>
            <method name="zero" type="void" line="491">
                <params>
                    <param name="A" type="double[][]"/>
                </params>
            </method>
            <javadoc line="496">
                Adds to the diagonal of both the matrix and the array                
            </javadoc>
            <method name="addDiagonal" type="void" line="499">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="Ad" type="double[][]"/>
                    <param name="shift" type="double"/>
                </params>
                <declaration name="n" type="int" line="500"/>
                <scope line="501"/>
            </method>
            <javadoc line="507">
                Adds to the diagonal of the matrix                
            </javadoc>
            <method name="addDiagonal" type="void" line="510">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="shift" type="double"/>
                </params>
                <declaration name="n" type="int" line="511"/>
            </method>
        </class>
    </source>