<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix.sparse">
  <import name="au.com.bytecode.opencsv.CSVWriter" />
  <import name="com.google.common.base.Stopwatch" />
  <import name="com.google.common.collect.Lists" />
  <import name="junit.framework.Assert" />
  <import name="lombok.Cleanup" />
  <import name="lombok.extern.java.Log" />
  <import name="no.uib.cipr.matrix.DenseMatrix" />
  <import name="no.uib.cipr.matrix.Matrix" />
  <import name="no.uib.cipr.matrix.MatrixEntry" />
  <import name="no.uib.cipr.matrix.Utilities" />
  <import name="java.io.File" />
  <import name="java.io.FileWriter" />
  <import name="java.util.concurrent.TimeUnit" />
  <class name="LinkedSparseMatrixTest" extends="SparseMatrixTestAbstract" startLine="18">
    <javadoc>
      <author>Sam Halliday</author>
    </javadoc>
    <method type="constructor" name="LinkedSparseMatrixTest" startLine="23" endLine="25" />
    <method type="void" name="createPrimary" startLine="28" endLine="64">
      <declaration type="int" name="n" />
      <declaration type="int" name="m" />
      <declaration type="int" name="b" />
      <declaration type="int[][]" name="nz" />
      <scope startLine="36" endLine="42">
        <declaration type="int" name="row" />
        <declaration type="int" name="col" />
        <declaration type="double" name="expect" />
      </scope>
      <scope startLine="44" endLine="49">
        <scope startLine="45" endLine="48">
          <declaration type="double" name="expect" />
        </scope>
      </scope>
      <declaration type="LinkedSparseMatrix.Node" name="head" />
      <declaration type="LinkedSparseMatrix.Node" name="node" />
      <scope startLine="53" endLine="57">
        <comment>log.info(node.toString());</comment>
      </scope>
      <scope startLine="59" endLine="63">
        <comment>log.info(node.toString());</comment>
      </scope>
    </method>
    <method type="void" name="ignoredTimedMult" startLine="66" endLine="90">
      <declaration type="Stopwatch" name="watch" />
      <declaration type="DenseMatrix" name="dense" />
      <declaration type="int[][]" name="nz" />
      <declaration type="Matrix" name="sparse" />
      <scope startLine="75" endLine="89">
        <declaration type="Matrix" name="t" />
        <declaration type="Matrix" name="o" />
      </scope>
    </method>
    <method type="void" name="ignoredTimedTransMult" startLine="92" endLine="115">
      <declaration type="Stopwatch" name="watch" />
      <declaration type="DenseMatrix" name="dense" />
      <declaration type="int[][]" name="nz" />
      <declaration type="Matrix" name="sparse" />
      <scope startLine="101" endLine="114">
        <declaration type="Matrix" name="t" />
        <declaration type="Matrix" name="o" />
      </scope>
    </method>
    <method type="void" name="testIteratorSet" startLine="118" endLine="119" />
    <method type="void" name="testIteratorSetGet" startLine="122" endLine="123" />
    <javadoc>
      <text>* Does a naive perf test against DenseMatrix, outputting CSV
 * that we plot in R.
 * <p/>
 * Generate n x n matrix with m entries, on left, and
 * an n x n dense matrix with m entries on the right,
 * using the same population algo. Then we multiply
 * them and output into a dense matrix. We compare
 * dense vs linked sparse from the left, and also
 * look at memory usage. We repeat for 10 different
 * values of m (10,000 to 100,000), and in both cases
 * vary m from 1,000 to 10,000. This requires about
 * 8GB heap to be on the safe side.
 * <p/>
 * -Xms8g -Xmx8g -Djava.util.logging.config.file=logging.properties</text>
      <param>args</param>
    </javadoc>
    <method type="void" name="main" startLine="144" endLine="211">
      <declaration type="File" name="file" />
      <declaration type="CSVWriter" name="csv" />
      <scope startLine="149" endLine="210">
        <scope startLine="150" endLine="209">
          <scope startLine="151" endLine="208">
            <declaration type="int[][]" name="patternA" />
            <declaration type="DenseMatrix" name="origA" />
            <declaration type="int[][]" name="patternB" />
            <declaration type="DenseMatrix" name="origB" />
            <declaration type="long" name="denseMem" />
            <declaration type="Stopwatch" name="timer" />
            <scope startLine="163" endLine="179">
              <declaration type="DenseMatrix" name="A" />
              <declaration type="DenseMatrix" name="B" />
              <declaration type="DenseMatrix" name="C" />
            </scope>
            <scope startLine="180" endLine="196">
              <declaration type="LinkedSparseMatrix" name="A" />
              <declaration type="DenseMatrix" name="B" />
              <declaration type="DenseMatrix" name="C" />
            </scope>
            <declaration type="String[][]" name="line" />
          </scope>
        </scope>
        <comment>to be fair, we reuse the same matrix values</comment>
        <comment>all attempts to measure memory usage failed</comment>
        <comment>using compressedooms</comment>
        <comment>these are to keep lots of refs above alive from GC</comment>
      </scope>
    </method>
  </class>
</source>
