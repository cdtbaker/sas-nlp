<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix.sparse">
  <import name="java.util.Arrays" />
  <import name="java.util.Iterator" />
  <import name="no.uib.cipr.matrix.DenseVector" />
  <import name="no.uib.cipr.matrix.Vector" />
  <import name="no.uib.cipr.matrix.Utilities" />
  <import name="no.uib.cipr.matrix.VectorEntry" />
  <import name="no.uib.cipr.matrix.VectorTestAbstract" />
  <class name="SparseVectorTest" extends="VectorTestAbstract" startLine="32">
    <javadoc>
      <text>* Test of SparseVector</text>
    </javadoc>
    <method type="constructor" name="SparseVectorTest" startLine="37" endLine="39" />
    <method type="void" name="createPrimary" startLine="42" endLine="47">
      <declaration type="int" name="n" />
      <declaration type="int" name="m" />
    </method>
    <method type="void" name="testSparseVectorIndices" startLine="49" endLine="83">
      <declaration type="SparseVector" name="vector" />
      <declaration type="int[]" name="index" />
      <declaration type="double[]" name="entries" />
      <declaration type="Vector" name="dense" />
      <comment>MTJ subtlety in getIndex() for SparseVector. before calling
 getIndex(), you must call compact()... implementations may choose to
 do nothing in this call, but the Intel extended LAPACK
 implementations (and MTJ's SparseVector) require it. An alternative
 to vector.getIndex() is VectorMethods.getIndex(Vector) which will
 wrap this for you. It can take an arbitrary Vector and if it can be
 cast to a SparseVector will compact it and use its getIndex() method
 instead. (just so you're aware of this). Sam.</comment>
      <comment>check that "infinite dimensions" doesn't use infinite memory</comment>
      <comment>check that creating with double[] with zeros works</comment>
      <comment>NOTE: must compact before calling getIndex()!!!</comment>
      <comment>vector.compact();</comment>
    </method>
    <method type="void" name="testBug27" startLine="85" endLine="99">
      <declaration type="double[]" name="tfVector" />
      <declaration type="DenseVector" name="dense" />
      <declaration type="SparseVector" name="vectorTF" />
      <scope startLine="93" endLine="98">
        <declaration type="VectorEntry" name="ve" />
        <declaration type="int" name="index" />
        <declaration type="double" name="value" />
      </scope>
      <comment>vectorTF.getUsed() returns 5</comment>
    </method>
  </class>
</source>
