<?xml version="1.0" encoding="UTF-8"?>
<source package="no.uib.cipr.matrix">
  <import name="java.util.Arrays" />
  <import name="java.util.HashSet" />
  <import name="java.util.Random" />
  <import name="java.util.Set" />
  <class name="Utilities" startLine="28">
    <javadoc>
      <text>* Utilities for the testers
 * NOTE: many of these random matrices are not guaranteed to have solutions</text>
    </javadoc>
    <method type="constructor" name="Utilities" startLine="35" endLine="37">
      <comment>No need to instantiate</comment>
    </method>
    <javadoc>
      <text>* Populates the sparse matrix in a symmetric fashion</text>
      <param>AMatrix to populate</param>
      <param>numNumber of entries on each symmetry band</param>
      <return>The matrix data in dense format</return>
    </javadoc>
    <method type="double[][]" name="symmetryPopulate" startLine="48" endLine="66">
      <declaration type="int" name="n" />
      <declaration type="double[][]" name="values" />
      <scope startLine="57" endLine="64">
        <declaration type="double" name="value" />
        <declaration type="int" name="k" />
      </scope>
    </method>
    <javadoc>
      <text>* Populates the matrix, putting a given number of entries on each column</text>
      <param>AMatrix to populate</param>
      <param>numNumber of entries on each column</param>
      <return>The matrix data in dense format</return>
    </javadoc>
    <method type="double[][]" name="columnPopulate" startLine="77" endLine="91">
      <declaration type="int" name="n" />
      <declaration type="double[][]" name="values" />
      <scope startLine="84" endLine="89">
        <declaration type="double" name="value" />
        <declaration type="int" name="k" />
      </scope>
    </method>
    <javadoc>
      <text>* Populates the matrix, putting a given number of entries on each row</text>
      <param>AMatrix to populate</param>
      <param>numNumber of entries on each row</param>
      <return>The matrix data in dense format</return>
    </javadoc>
    <method type="double[][]" name="rowPopulate" startLine="102" endLine="116">
      <declaration type="int" name="n" />
      <declaration type="double[][]" name="values" />
      <scope startLine="109" endLine="114">
        <declaration type="double" name="value" />
        <declaration type="int" name="k" />
      </scope>
    </method>
    <javadoc>
      <text>* Gets a row-wise non-zero pattern suitable for creating compressed row
 * matrices</text>
      <param>nNumber of rows</param>
      <param>mNumber of columns</param>
      <param>bNumber of entries on each row</param>
    </javadoc>
    <method type="int[][]" name="getRowPattern" startLine="129" endLine="144">
      <declaration type="int[][][]" name="nz" />
      <scope startLine="132" endLine="141">
        <declaration type="Set<Integer>" name="row" />
        <declaration type="int" name="j" />
      </scope>
    </method>
    <javadoc>
      <text>* Gets a column-wise non-zero pattern suitable for creating compressed
 * column matrices</text>
      <param>nNumber of rows</param>
      <param>mNumber of columns</param>
      <param>bNumber of entries on each column</param>
    </javadoc>
    <method type="int[][]" name="getColumnPattern" startLine="157" endLine="172">
      <declaration type="int[][][]" name="nz" />
      <scope startLine="160" endLine="169">
        <declaration type="Set<Integer>" name="column" />
        <declaration type="int" name="j" />
      </scope>
    </method>
    <javadoc>
      <text>* Populates the matrix, using the given non-zero pattern</text>
      <param>AMatrix to populate</param>
      <param>nzColumn indices on each row</param>
      <return>The matrix data in dense format</return>
    </javadoc>
    <method type="double[][]" name="rowPopulate" startLine="183" endLine="198">
      <declaration type="int" name="n" />
      <declaration type="double[][]" name="values" />
      <scope startLine="190" endLine="195">
        <declaration type="double" name="value" />
        <declaration type="int" name="k" />
      </scope>
    </method>
    <javadoc>
      <text>* Populates the matrix, using the given non-zero pattern</text>
      <param>AMatrix to populate</param>
      <param>nzRow indices on each column</param>
      <return>The matrix data in dense format</return>
    </javadoc>
    <method type="double[][]" name="columnPopulate" startLine="209" endLine="224">
      <declaration type="int" name="n" />
      <declaration type="double[][]" name="values" />
      <scope startLine="216" endLine="221">
        <declaration type="double" name="value" />
        <declaration type="int" name="k" />
      </scope>
    </method>
    <javadoc>
      <text>* Populates the matrix fully</text>
      <param>AMatrix to populate</param>
      <return>The matrix data in dense format</return>
    </javadoc>
    <method type="double[][]" name="populate" startLine="233" endLine="244">
      <declaration type="Random" name="random" />
      <declaration type="int" name="n" />
      <declaration type="double[][]" name="values" />
      <scope startLine="238" endLine="242">
        <declaration type="double" name="value" />
      </scope>
    </method>
    <javadoc>
      <text>* Populates the banded matrix</text>
      <param>AMatrix to populate</param>
      <param>klNumber of subdiagonls</param>
      <param>kuNumber of superdiagonals</param>
      <return>The matrix data in dense format</return>
    </javadoc>
    <method type="double[][]" name="bandPopulate" startLine="257" endLine="268">
      <declaration type="int" name="n" />
      <declaration type="double[][]" name="values" />
      <scope startLine="262" endLine="266">
        <declaration type="double" name="value" />
      </scope>
    </method>
    <javadoc>
      <text>* Populates the banded matrix, but not its main diagonal</text>
      <param>AMatrix to populate</param>
      <param>klNumber of subdiagonls</param>
      <param>kuNumber of superdiagonals</param>
      <return>The matrix data in dense format</return>
    </javadoc>
    <method type="double[][]" name="unitBandPopulate" startLine="281" endLine="292">
      <declaration type="int" name="n" />
      <declaration type="double[][]" name="values" />
      <scope startLine="286" endLine="290">
        <declaration type="double" name="value" />
      </scope>
    </method>
    <javadoc>
      <text>* Populates the lower triangular part of the matrix</text>
      <param>AMatrix to populate</param>
      <return>The matrix data in dense format</return>
    </javadoc>
    <method type="double[][]" name="lowerPopulate" startLine="301" endLine="312">
      <declaration type="int" name="n" />
      <declaration type="double[][]" name="values" />
      <scope startLine="306" endLine="310">
        <declaration type="double" name="value" />
      </scope>
    </method>
    <javadoc>
      <text>* Populates the upper triangular part of the matrix</text>
      <param>AMatrix to populate</param>
      <return>The matrix data in dense format</return>
    </javadoc>
    <method type="double[][]" name="upperPopulate" startLine="321" endLine="332">
      <declaration type="int" name="n" />
      <declaration type="double[][]" name="values" />
      <scope startLine="326" endLine="330">
        <declaration type="double" name="value" />
      </scope>
    </method>
    <method type="void" name="upperPopulateGauss" startLine="334" endLine="339">
      <declaration type="Random" name="random" />
    </method>
    <javadoc>
      <text>* Populates the strictly lower triangular part of the matrix</text>
      <param>AMatrix to populate</param>
      <return>The matrix data in dense format</return>
    </javadoc>
    <method type="double[][]" name="unitLowerPopulate" startLine="348" endLine="359">
      <declaration type="int" name="n" />
      <declaration type="double[][]" name="values" />
      <scope startLine="353" endLine="357">
        <declaration type="double" name="value" />
      </scope>
    </method>
    <javadoc>
      <text>* Populates the strictly upper triangular part of the matrix</text>
      <param>AMatrix to populate</param>
      <return>The matrix data in dense format</return>
    </javadoc>
    <method type="double[][]" name="unitUpperPopulate" startLine="368" endLine="379">
      <declaration type="int" name="n" />
      <declaration type="double[][]" name="values" />
      <scope startLine="373" endLine="377">
        <declaration type="double" name="value" />
      </scope>
    </method>
    <javadoc>
      <text>* Puts the upper triangular part into the lower triangle</text>
    </javadoc>
    <method type="void" name="lowerSymmetrice" startLine="384" endLine="389">
      <declaration type="int" name="n" />
    </method>
    <javadoc>
      <text>* Puts the lower triangular part into the upper triangle</text>
    </javadoc>
    <method type="void" name="upperSymmetrice" startLine="394" endLine="401">
      <declaration type="int" name="n" />
      <scope startLine="396" endLine="400">
        <declaration type="int" name="m" />
      </scope>
    </method>
    <javadoc>
      <text>* Sets one on the main diagonal</text>
    </javadoc>
    <method type="double[][]" name="unitSet" startLine="406" endLine="410" />
    <declaration type="Random" name="r" />
    <javadoc>
      <text>* Returns an integer between zero (inclusive) and max (exclusive)</text>
    </javadoc>
    <method type="int" name="getInt" startLine="417" endLine="419" />
    <javadoc>
      <text>* Returns an integer between min (inclusive) and max (exclusive)</text>
    </javadoc>
    <method type="int" name="getInt" startLine="424" endLine="426" />
    <javadoc>
      <text>* Returns true if the matrix is singular</text>
    </javadoc>
    <method type="boolean" name="singular" startLine="431" endLine="438">
      <declaration type="SVD" name="svd" />
      <declaration type="double[]" name="S" />
    </method>
    <javadoc>
      <text>* Returns true if the matrix is positive definite</text>
    </javadoc>
    <method type="boolean" name="spd" startLine="443" endLine="458">
      <declaration type="EVD" name="evd" />
      <scope startLine="445" endLine="450">
        <declaration type="double[]" name="S" />
      </scope>
      <scope startLine="451" endLine="456">
        <declaration type="double[]" name="S" />
      </scope>
    </method>
    <javadoc>
      <text>* Populates the given vector, and returns an array containing its values</text>
    </javadoc>
    <method type="double[]" name="populate" startLine="463" endLine="471">
      <declaration type="double[]" name="xd" />
      <scope startLine="465" endLine="469">
        <declaration type="double" name="alpha" />
      </scope>
    </method>
    <javadoc>
      <text>* Populates the given vector, and returns an array containing its values.
 * Only m entries are inserted</text>
    </javadoc>
    <method type="double[]" name="populate" startLine="477" endLine="486">
      <declaration type="double[]" name="xd" />
      <scope startLine="479" endLine="484">
        <declaration type="double" name="alpha" />
        <declaration type="int" name="k" />
      </scope>
    </method>
    <javadoc>
      <text>* Zeros the given array</text>
    </javadoc>
    <method type="void" name="zero" startLine="491" endLine="494" />
    <javadoc>
      <text>* Adds to the diagonal of both the matrix and the array</text>
    </javadoc>
    <method type="void" name="addDiagonal" startLine="499" endLine="505">
      <declaration type="int" name="n" />
      <scope startLine="501" endLine="504" />
    </method>
    <javadoc>
      <text>* Adds to the diagonal of the matrix</text>
    </javadoc>
    <method type="void" name="addDiagonal" startLine="510" endLine="514">
      <declaration type="int" name="n" />
    </method>
  </class>
</source>
