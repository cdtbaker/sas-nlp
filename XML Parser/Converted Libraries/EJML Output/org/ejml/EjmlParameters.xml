<?xml version="1.0" encoding="UTF-8"?>
<class name="EjmlParameters">
  <javadoc>
    <text>This is a list of parameters that are used across the code.  To tune performance
 * for a particular system change these values.</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>Used to adjust which algorithms are used.  Often there is a trade off between memory usage
 * and speed.</text>
  </javadoc>
  <declaration type="MemoryUsage" name="MEMORY" />
  <javadoc>
    <text>&lt;p&gt;
 * In modern computers there are high speed memory caches.  It is assumed that a square
 * block with this width can be contained entirely in one of those caches.  Settings this
 * value too large can have a dramatic effect on performance in some situations.  Setting
 * it too low results in a less dramatic performance hit.  The optimal value is dependent
 * on the computer's memory architecture.
 * &lt;/p&gt;</text>
  </javadoc>
  <declaration type="int" name="BLOCK_WIDTH" />
  <declaration type="int" name="BLOCK_WIDTH_CHOL" />
  <javadoc>
    <text>Number of elements in a block.</text>
  </javadoc>
  <declaration type="int" name="BLOCK_SIZE" />
  <declaration type="int" name="TRANSPOSE_SWITCH" />
  <javadoc>
    <text>At what point does it switch from a small matrix multiply to the reorder version.</text>
  </javadoc>
  <declaration type="int" name="MULT_COLUMN_SWITCH" />
  <declaration type="int" name="MULT_TRANAB_COLUMN_SWITCH" />
  <declaration type="int" name="MULT_INNER_SWITCH" />
  <javadoc>
    <text>&lt;p&gt;
 * At which point should it switch to the block cholesky algorithm.
 * &lt;/p&gt;
 * &lt;p&gt;
 * In benchmarks  the basic actually performed slightly better at 1000
 * but in JVM 1.6 it some times get stuck in a mode where the basic version was very slow
 * in that case the block performed much better.
 * &lt;/p&gt;</text>
  </javadoc>
  <declaration type="int" name="SWITCH_BLOCK64_CHOLESKY" />
  <declaration type="int" name="SWITCH_BLOCK64_QR" />
  <javadoc>
    <text>Use lower memory algorithm while not totally sacrificing speed.</text>
  </javadoc>
  <javadoc>
    <text>Always favor faster algorithms even if they use more memory.</text>
  </javadoc>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>See design notes</comment>
</class>
