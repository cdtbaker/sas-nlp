<?xml version="1.0" encoding="UTF-8"?>
<class name="DecompositionFactory">
  <javadoc>
    <text>&lt;p&gt;
 * Contains operations related to creating and evaluating the quality of common matrix decompositions.  Except
 * in specialized situations, matrix decompositions should be instantiated from this factory instead of being
 * directly constructed.  Low level implementations are more prone to changes and new algorithms will be
 * automatically placed here.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Several functions are also provided to evaluate the quality of a decomposition.  This is provided
 * as a way to sanity check a decomposition.  Often times a significant error in a decomposition will
 * result in a poor (larger) quality value. Typically a quality value of around 1e-15 means it is within
 * machine precision.
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>&lt;p&gt;
 * Returns a {@link CholeskyDecomposition} that has been optimized for the specified matrix size.
 * &lt;/p&gt;</text>
    <param>matrixSize Number of rows and columns that the returned decomposition is optimized for.</param>
    <param>lower should a lower or upper triangular matrix be used. If not sure set to true.</param>
    <return>A new CholeskyDecomposition.</return>
  </javadoc>
  <method type="CholeskyDecomposition&lt;DenseMatrix64F&gt;" name="chol">
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Returns a {@link CholeskyDecompositionLDL} that has been optimized for the specified matrix size.
 * &lt;/p&gt;</text>
    <param>matrixSize Number of rows and columns that the returned decomposition is optimized for.</param>
    <return>CholeskyDecompositionLDL</return>
  </javadoc>
  <method type="CholeskyDecompositionLDL" name="cholLDL" />
  <javadoc>
    <text>&lt;p&gt;
 * Returns a {@link LUDecomposition} that has been optimized for the specified matrix size.
 * &lt;/p&gt;</text>
    <parm>matrixWidth The matrix size that the decomposition should be optimized for.</parm>
    <return>LUDecomposition</return>
  </javadoc>
  <method type="LUDecomposition&lt;DenseMatrix64F&gt;" name="lu" />
  <javadoc>
    <text>&lt;p&gt;
 * Returns a {@link SingularValueDecomposition} that has been optimized for the specified matrix size.
 * For improved performance only the portion of the decomposition that the user requests will be computed.
 * &lt;/p&gt;</text>
    <param>numRows Number of rows the returned decomposition is optimized for.</param>
    <param>numCols Number of columns that the returned decomposition is optimized for.</param>
    <param>needU Should it compute the U matrix. If not sure set to true.</param>
    <param>needV Should it compute the V matrix. If not sure set to true.</param>
    <param>compact Should it compute the SVD in compact form.  If not sure set to false.</param>
    <return />
  </javadoc>
  <method type="SingularValueDecomposition&lt;DenseMatrix64F&gt;" name="svd">
    <comment>Don't allow the tall decomposition by default since it *might* be less stable</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Returns a {@link QRDecomposition} that has been optimized for the specified matrix size.
 * &lt;/p&gt;</text>
    <param>numRows Number of rows the returned decomposition is optimized for.</param>
    <param>numCols Number of columns that the returned decomposition is optimized for.</param>
    <return>QRDecomposition</return>
  </javadoc>
  <method type="QRDecomposition&lt;DenseMatrix64F&gt;" name="qr" />
  <javadoc>
    <text>&lt;p&gt;
 * Returns a {@link QRPDecomposition} that has been optimized for the specified matrix size.
 * &lt;/p&gt;</text>
    <param>numRows Number of rows the returned decomposition is optimized for.</param>
    <param>numCols Number of columns that the returned decomposition is optimized for.</param>
    <return>QRPDecomposition</return>
  </javadoc>
  <method type="QRPDecomposition&lt;DenseMatrix64F&gt;" name="qrp" />
  <javadoc>
    <text>&lt;p&gt;
 * Returns an {@link EigenDecomposition} that has been optimized for the specified matrix size.
 * If the input matrix is symmetric within tolerance then the symmetric algorithm will be used, otherwise
 * a general purpose eigenvalue decomposition is used.
 * &lt;/p&gt;</text>
    <param>matrixSize Number of rows and columns that the returned decomposition is optimized for.</param>
    <param>needVectors Should eigenvectors be computed or not.  If not sure set to true.</param>
    <return>A new EigenDecomposition</return>
  </javadoc>
  <method type="EigenDecomposition&lt;DenseMatrix64F&gt;" name="eig" />
  <javadoc>
    <text>&lt;p&gt;
 * Returns an {@link EigenDecomposition} which is specialized for symmetric matrices or the general problem.
 * &lt;/p&gt;</text>
    <param>matrixSize Number of rows and columns that the returned decomposition is optimized for.</param>
    <param>computeVectors Should it compute the eigenvectors or just eigenvalues.</param>
    <param>isSymmetric If true then the returned algorithm is specialized only for symmetric matrices, if false
 * then a general purpose algorithm is returned.</param>
    <return>EVD for any matrix.</return>
  </javadoc>
  <method type="EigenDecomposition&lt;DenseMatrix64F&gt;" name="eig">
    <scope>
      <declaration type="TridiagonalSimilarDecomposition&lt;DenseMatrix64F&gt;" name="decomp" />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Computes a metric which measures the the quality of a singular value decomposition.  If a
 * value is returned that is close to or smaller than 1e-15 then it is within machine precision.
 * &lt;/p&gt;
 * &lt;p&gt;
 * SVD quality is defined as:&lt;br&gt;
 * &lt;br&gt;
 * Quality = || A - U W V&lt;sup&gt;T&lt;/sup&gt;|| / || A || &lt;br&gt;
 * where A is the original matrix , U W V is the decomposition, and ||A|| is the norm-f of A.
 * &lt;/p&gt;</text>
    <param>orig The original matrix which was decomposed. Not modified.</param>
    <param>svd The decomposition after processing 'orig'. Not modified.</param>
    <return>The quality of the decomposition.</return>
  </javadoc>
  <method type="double" name="quality" />
  <method type="double" name="quality">
    <declaration type="SimpleMatrix" name="_U" />
    <declaration type="SimpleMatrix" name="_W" />
    <declaration type="SimpleMatrix" name="_Vt" />
    <declaration type="SimpleMatrix" name="foundA" />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Computes a metric which measures the the quality of an eigen value decomposition.  If a
 * value is returned that is close to or smaller than 1e-15 then it is within machine precision.
 * &lt;/p&gt;
 * &lt;p&gt;
 * EVD quality is defined as:&lt;br&gt;
 * &lt;br&gt;
 * Quality = ||A*V - V*D|| / ||A*V||.
 * &lt;/p&gt;</text>
    <param>orig The original matrix. Not modified.</param>
    <param>eig EVD of the original matrix. Not modified.</param>
    <return>The quality of the decomposition.</return>
  </javadoc>
  <method type="double" name="quality">
    <declaration type="SimpleMatrix" name="A" />
    <declaration type="SimpleMatrix" name="V" />
    <declaration type="SimpleMatrix" name="D" />
    <declaration type="SimpleMatrix" name="L" />
    <declaration type="SimpleMatrix" name="R" />
    <declaration type="SimpleMatrix" name="diff" />
    <declaration type="double" name="top" />
    <declaration type="double" name="bottom" />
    <declaration type="double" name="error" />
  </method>
  <javadoc>
    <text>Checks to see if the passed in tridiagonal decomposition is of the appropriate type
 * for the matrix of the provided size.  Returns the same instance or a new instance.</text>
    <param>matrixSize Number of rows and columns that the returned decomposition is optimized for.</param>
  </javadoc>
  <method type="TridiagonalSimilarDecomposition&lt;DenseMatrix64F&gt;" name="tridiagonal">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>A simple convinience function that decomposes the matrix but automatically checks the input ti make
 * sure is not being modified.</text>
    <param>decomp Decomposition which is being wrapped</param>
    <param>M THe matrix being decomposed.</param>
    <param>&lt;T&gt;
 *  Matrix type.</param>
    <return>If the decomposition was successful or not.</return>
  </javadoc>
  <method type="boolean" name="decomposeSafe">
    <scope />
    <scope />
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
