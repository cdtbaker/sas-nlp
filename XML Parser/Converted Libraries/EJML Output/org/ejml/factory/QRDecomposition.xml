<?xml version="1.0" encoding="UTF-8"?>
<class name="QRDecomposition">
  <javadoc>
    <text>&lt;p&gt;
 * QR decompositions decompose a rectangular matrix 'A' such that 'A=QR'.  Where
 * A &amp;isin; &amp;real; &lt;sup&gt;n &amp;times; m&lt;/sup&gt; , n &amp;ge; m, Q &amp;isin; &amp;real; &lt;sup&gt;n &amp;times; n&lt;/sup&gt; is an orthogonal matrix,
 * and R &amp;isin; &amp;real; &lt;sup&gt;n &amp;times; m&lt;/sup&gt; is an upper triangular matrix.  Some implementations
 * of QR decomposition require that A has full rank.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Some features of QR decompositions:
 * &lt;ul&gt;
 * &lt;li&gt; Can decompose rectangular matrices. &lt;/li&gt;
 * &lt;li&gt; Numerically stable solutions to least-squares problem, but not as stable as SVD &lt;/li&gt;
 * &lt;li&gt; Can incrementally add and remove columns from the decomposed matrix.  See {@link org.ejml.alg.dense.linsol.qr.AdjLinearSolverQr} &lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * Orthogonal matrices have the following properties:
 * &lt;ul&gt;
 * &lt;li&gt;QQ&lt;sup&gt;T&lt;/sup&gt;=I&lt;/li&gt;
 * &lt;li&gt;Q&lt;sup&gt;T&lt;/sup&gt;=Q&lt;sup&gt;-1&lt;/sup&gt;&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;</text>
    <see>org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholder</see>
    <see>org.ejml.alg.dense.decomposition.qr.QRDecompositionHouseholderColumn</see>
    <author>Peter Abeles</author>
  </javadoc>
  <method name="getQ" type="T" />
  <javadoc>
    <text>&lt;p&gt;
 * Returns the Q matrix from the decomposition.  Should only
 * be called after {@link #decompose(org.ejml.data.Matrix64F)} has
 * been called.
 * &lt;/p&gt;
 * &lt;p&gt;
 * If parameter Q is not null, then that matrix is used to store the Q matrix.  Otherwise
 * a new matrix is created.
 * &lt;/p&gt;</text>
    <param>Q If not null then the Q matrix is written to it.  Modified.</param>
    <param>compact If true an m by n matrix is created, otherwise n by n.</param>
    <return>The Q matrix.</return>
  </javadoc>
  <method name="getR" type="T" />
  <javadoc>
    <text>&lt;p&gt;
 * Returns the R matrix from the decomposition.  Should only be
 * called after {@link #decompose(org.ejml.data.Matrix64F)} has been.
 * &lt;/p&gt;
 * &lt;p&gt;
 * If setZeros is true then an n &amp;times; m matrix is required and all the elements are set.
 * If setZeros is false then the matrix must be at least m &amp;times; m and only the upper triangular
 * elements are set.
 * &lt;/p&gt;
 * &lt;p&gt;
 * If parameter R is not null, then that matrix is used to store the R matrix.  Otherwise
 * a new matrix is created.
 * &lt;/p&gt;</text>
    <param>R If not null then the R matrix is written to it. Modified.</param>
    <param>compact If true only the upper triangular elements are set</param>
    <return>The R matrix.</return>
  </javadoc>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
