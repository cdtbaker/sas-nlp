<?xml version="1.0" encoding="UTF-8"?>
<class name="LinearSolverFactory">
  <javadoc>
    <text>A factory for generating solvers for systems of the form A*x=b, where A and B are known and x is unknown.</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>Creates a general purpose solver.  Use this if you are not sure what you need.</text>
    <param>numRows The number of rows that the decomposition is optimized for.</param>
    <param>numCols The number of columns that the decomposition is optimized for.</param>
  </javadoc>
  <method type="LinearSolver&lt;DenseMatrix64F&gt;" name="general" />
  <javadoc>
    <text>Creates a solver for linear systems.  The A matrix will have dimensions (m,m).</text>
    <return>A new linear solver.</return>
  </javadoc>
  <method type="LinearSolver&lt;DenseMatrix64F&gt;" name="linear" />
  <javadoc>
    <text>Creates a good general purpose solver for over determined systems and returns the optimal least-squares
 * solution.  The A matrix will have dimensions (m,n) where m &amp;ge; n.</text>
    <param>numRows The number of rows that the decomposition is optimized for.</param>
    <param>numCols The number of columns that the decomposition is optimized for.</param>
    <return>A new least-squares solver for over determined systems.</return>
  </javadoc>
  <method type="LinearSolver&lt;DenseMatrix64F&gt;" name="leastSquares">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Creates a solver for symmetric positive definite matrices.</text>
    <return>A new solver for symmetric positive definite matrices.</return>
  </javadoc>
  <method type="LinearSolver&lt;DenseMatrix64F&gt;" name="symmPosDef">
    <scope>
      <declaration type="CholeskyDecompositionCommon" name="decomp" />
    </scope>
    <scope>
      <scope>
        <declaration type="CholeskyDecompositionCommon" name="decomp" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Linear solver which uses QR pivot decomposition.  These solvers can handle singular systems
 * and should never fail.  For singular systems, the solution might not be as accurate as a
 * pseudo inverse that uses SVD.
 * &lt;/p&gt;
 * &lt;p&gt;
 * For singular systems there are multiple correct solutions.  The optimal 2-norm solution is the
 * solution vector with the minimal 2-norm and is unique.  If the optimal solution is not computed
 * then the basic solution is returned.  See {@link org.ejml.alg.dense.linsol.qr.BaseLinearSolverQrp}for details.  There is only a runtime difference for small matrices, 2-norm solution is slower.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Two different solvers are available.  Compute Q will compute the Q matrix once then use it multiple times.
 * If the solution for a single vector is being found then this should be set to false.  If the pseudo inverse
 * is being found or the solution matrix has more than one columns AND solve is being called numerous multiples
 * times then this should be set to true.
 * &lt;/p&gt;</text>
    <param>computeNorm2 true to compute the minimum 2-norm solution for singular systems. Try true.</param>
    <param>computeQ Should it precompute Q or use house holder.  Try false;</param>
    <return>Pseudo inverse type solver using QR with column pivots.</return>
  </javadoc>
  <method type="LinearSolver&lt;DenseMatrix64F&gt;" name="leastSquaresQrPivot">
    <declaration type="QRColPivDecompositionHouseholderColumn" name="decomposition" />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Returns a solver which uses the pseudo inverse.  Useful when a matrix
 * needs to be inverted which is singular.  Two variants of pseudo inverse are provided.  SVD
 * will tend to be the most robust but the slowest and QR decomposition with column pivots will
 * be faster, but less robust.
 * &lt;/p&gt;
 * &lt;p&gt;
 * See {@link #leastSquaresQrPivot} for additional options specific to QR decomposition based
 * pseudo inverse.  These options allow for better runtime performance in different situations.
 * &lt;/p&gt;</text>
    <param>useSVD If true SVD will be used, otherwise QR with column pivot will be used.</param>
    <return>Solver for singular matrices.</return>
  </javadoc>
  <method type="LinearSolver&lt;DenseMatrix64F&gt;" name="pseudoInverse" />
  <javadoc>
    <text>Create a solver which can efficiently add and remove elements instead of recomputing
 * everything from scratch.</text>
  </javadoc>
  <method type="AdjustableLinearSolver" name="adjustable" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
