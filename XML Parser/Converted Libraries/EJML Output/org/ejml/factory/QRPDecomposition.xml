<?xml version="1.0" encoding="UTF-8"?>
<class name="QRPDecomposition">
  <javadoc>
    <text>&lt;p&gt;
 * Similar to {@link QRDecomposition} but it can handle the rank deficient case by
 * performing column pivots during the decomposition. The final decomposition has the
 * following structure:&lt;br&gt;
 * A*P=Q*R&lt;br&gt;
 * where A is the original matrix, P is a pivot matrix, Q is an orthogonal matrix, and R is
 * upper triangular.
 * &lt;/p&gt;
 * &lt;p&gt;
 * WARNING: You should always call {@link #setSingularThreshold(double)} before {@link #decompose(org.ejml.data.Matrix64F)}.
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <method name="setSingularThreshold" type="void" />
  <javadoc>
    <text>&lt;p&gt;
 * Specifies the threshold used to flag a column as being singular.  The optimal threshold (if one exists)
 * varies by the matrix being processed.  A reasonable value would be the maximum absolute value of the
 * matrix's elements multiplied by EPS:&lt;br&gt;
 * decomposition.setSingularThreshold(CommonOps.elementMaxAbs(A)*UtilEjml.EPS)
 * &lt;/p&gt;</text>
    <param>threshold Singular threshold.</param>
  </javadoc>
  <method name="getRank" type="int" />
  <javadoc>
    <text>Returns the rank as determined by the algorithm.  This is dependent upon a fixed threshold
 * and might not be appropriate for some applications.</text>
    <return>Matrix's rank</return>
  </javadoc>
  <method name="getPivots" type="int[]" />
  <javadoc>
    <text>Ordering of each column after pivoting.   The current column i was original at column pivot[i].</text>
    <return>Order of columns.</return>
  </javadoc>
  <method name="getPivotMatrix" type="DenseMatrix64F" />
  <javadoc>
    <text>Creates the pivot matrix.</text>
    <param>P Optional storage for pivot matrix.  If null a new matrix will be created.</param>
    <return>The pivot matrix.</return>
  </javadoc>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
