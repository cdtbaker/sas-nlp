<?xml version="1.0" encoding="UTF-8"?>
<class name="D1Matrix64F">
  <javadoc>
    <text>A generic abstract class for matrices whose data is stored in a single 1D array of doubles.  The
 * format of the elements in this array is not specified.  For example row major, column major,
 * and block row major are all common formats.</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>Where the raw data for the matrix is stored.  The format is type dependent.</text>
  </javadoc>
  <declaration type="double[]" name="data" />
  <javadoc>
    <text>Used to get a reference to the internal data.</text>
    <return>Reference to the matrix's data.</return>
  </javadoc>
  <method type="double[]" name="getData" />
  <javadoc>
    <text>Changes the internal array reference.</text>
  </javadoc>
  <method type="void" name="setData" />
  <method name="getIndex" type="int" />
  <javadoc>
    <text>Returns the internal array index for the specified row and column.</text>
    <param>row Row index.</param>
    <param>col Column index.</param>
    <return>Internal array index.</return>
  </javadoc>
  <javadoc>
    <text>Sets the value of this matrix to be the same as the value of the provided matrix.  Both
 * matrices must have the same shape:&lt;br&gt;
 * &lt;br&gt;
 * a&lt;sub&gt;ij&lt;/sub&gt; = b&lt;sub&gt;ij&lt;/sub&gt;&lt;br&gt;
 * &lt;br&gt;</text>
    <param>b The matrix that this matrix is to be set equal to.</param>
  </javadoc>
  <method type="void" name="set">
    <scope />
    <declaration type="int" name="dataLength" />
  </method>
  <javadoc>
    <text>Returns the value of the matrix at the specified internal array index. The element at which row and column
 * returned by this function depends upon the matrix's internal structure, e.g. row-major, column-major, or block.</text>
    <param>index Internal array index.</param>
    <return>Value at the specified index.</return>
  </javadoc>
  <method type="double" name="get" />
  <javadoc>
    <text>Sets the element's value at the specified index.  The element at which row and column
 * modified by this function depends upon the matrix's internal structure, e.g. row-major, column-major, or block.</text>
    <param>index Index of element that is to be set.</param>
    <param>val The new value of the index.</param>
  </javadoc>
  <method type="double" name="set">
    <comment>See benchmarkFunctionReturn.  Pointless return does not degrade performance.  Tested on JDK 1.6.0_21</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Adds the specified value to the internal data array at the specified index.&lt;br&gt;
 * &lt;br&gt;
 * Equivalent to: this.data[index] += val;
 * &lt;/p&gt;
 * &lt;p&gt;
 * Intended for use in highly optimized code.  The  row/column coordinate of the modified element is
 * dependent upon the matrix's internal structure.
 * &lt;/p&gt;</text>
    <param>index The index which is being modified.</param>
    <param>val The value that is being added.</param>
  </javadoc>
  <method type="double" name="plus">
    <comment>See benchmarkFunctionReturn.  Pointless return does not degrade performance.  Tested on JDK 1.6.0_21</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Subtracts the specified value to the internal data array at the specified index.&lt;br&gt;
 * &lt;br&gt;
 * Equivalent to: this.data[index] -= val;
 * &lt;/p&gt;
 * &lt;p&gt;
 * Intended for use in highly optimized code.  The  row/column coordinate of the modified element is
 * dependent upon the matrix's internal structure.
 * &lt;/p&gt;</text>
    <param>index The index which is being modified.</param>
    <param>val The value that is being subtracted.</param>
  </javadoc>
  <method type="double" name="minus">
    <comment>See benchmarkFunctionReturn.  Pointless return does not degrade performance.  Tested on JDK 1.6.0_21</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Multiplies the specified value to the internal data array at the specified index.&lt;br&gt;
 * &lt;br&gt;
 * Equivalent to: this.data[index] *= val;
 * &lt;/p&gt;
 * &lt;p&gt;
 * Intended for use in highly optimized code.  The  row/column coordinate of the modified element is
 * dependent upon the matrix's internal structure.
 * &lt;/p&gt;</text>
    <param>index The index which is being modified.</param>
    <param>val The value that is being multiplied.</param>
  </javadoc>
  <method type="double" name="times">
    <comment>See benchmarkFunctionReturn.  Pointless return does not degrade performance.  Tested on JDK 1.6.0_21</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Divides the specified value to the internal data array at the specified index.&lt;br&gt;
 * &lt;br&gt;
 * Equivalent to: this.data[index] /= val;
 * &lt;/p&gt;
 * &lt;p&gt;
 * Intended for use in highly optimized code.  The  row/column coordinate of the modified element is
 * dependent upon the matrix's internal structure.
 * &lt;/p&gt;</text>
    <param>index The index which is being modified.</param>
    <param>val The value that is being divided.</param>
  </javadoc>
  <method type="double" name="div">
    <comment>See benchmarkFunctionReturn.  Pointless return does not degrade performance.  Tested on JDK 1.6.0_21</comment>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
