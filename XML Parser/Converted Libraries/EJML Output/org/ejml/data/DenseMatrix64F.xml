<?xml version="1.0" encoding="UTF-8"?>
<class name="DenseMatrix64F">
  <javadoc>
    <text>&lt;p&gt;
 * DenseMatrix64F is a dense matrix with elements that are 64-bit floats (doubles).  A matrix
 * is the fundamental data structure in linear algebra.  Unlike a sparse matrix, there is no
 * compression in a dense matrix and every element is stored in memory.  This allows for fast
 * reads and writes to the matrix.
 * &lt;/p&gt;
 * &lt;p&gt;
 * To keep the code manageable and the library easier to use only basic functions for accessing and editing elements
 * are provided in this class.  The numerous operations which can be performed on DenseMatrix64F
 * are contained in various other classes, where the most common operations can be found in
 * the {@link org.ejml.ops.CommonOps} and {@link org.ejml.ops.SpecializedOps} classes.
 * &lt;/p&gt;
 * &lt;p&gt;
 * The matrix is stored internally in a row-major 1D array format:&lt;br&gt;
 * &lt;br&gt;
 * data[ y*numCols + x ] = data[y][x]&lt;br&gt;
 * &lt;br&gt;
 * For example:&lt;br&gt;
 * data =
 * &lt;table border="1"&gt;
 * &lt;tr&gt;
 * &lt;td&gt;a&lt;sub&gt;11&lt;/sub&gt;&lt;/td&gt;
 * &lt;td&gt;a&lt;sub&gt;12&lt;/sub&gt;&lt;/td&gt;
 * &lt;td&gt;a&lt;sub&gt;13&lt;/sub&gt;&lt;/td&gt;
 * &lt;td&gt;a&lt;sub&gt;14&lt;/sub&gt;&lt;/td&gt;
 * &lt;td&gt;a&lt;sub&gt;21&lt;/sub&gt;&lt;/td&gt;
 * &lt;td&gt;a&lt;sub&gt;22&lt;/sub&gt;&lt;/td&gt;
 * &lt;td&gt;a&lt;sub&gt;23&lt;/sub&gt;&lt;/td&gt;
 * &lt;td&gt;a&lt;sub&gt;24&lt;/sub&gt;&lt;/td&gt;
 * &lt;td&gt;a&lt;sub&gt;31&lt;/sub&gt;&lt;/td&gt;
 * &lt;td&gt;a&lt;sub&gt;32&lt;/sub&gt;&lt;/td&gt;
 * &lt;td&gt;a&lt;sub&gt;33&lt;/sub&gt;&lt;/td&gt;
 * &lt;td&gt;a&lt;sub&gt;34&lt;/sub&gt;&lt;/td&gt;
 * &lt;td&gt;a&lt;sub&gt;41&lt;/sub&gt;&lt;/td&gt;
 * &lt;td&gt;a&lt;sub&gt;42&lt;/sub&gt;&lt;/td&gt;
 * &lt;td&gt;a&lt;sub&gt;43&lt;/sub&gt;&lt;/td&gt;
 * &lt;td&gt;a&lt;sub&gt;44&lt;/sub&gt;&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * An alternative to working directly with DenseMatrix64 is {@link org.ejml.simple.SimpleMatrix}.
 * SimpleMatrix is a wrapper around DenseMatrix64F that provides an easier to use object oriented way of manipulating
 * matrices, at the cost of efficiency.
 * &lt;/p&gt;</text>
    <see>org.ejml.ops.CommonOps</see>
    <see>org.ejml.ops.SpecializedOps</see>
    <see>org.ejml.simple.SimpleMatrix</see>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>&lt;p&gt;
 * Creates a new matrix which has the same value as the matrix encoded in the
 * provided array.  The input matrix's format can either be row-major or
 * column-major.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Note that 'data' is a variable argument type, so either 1D arrays or a set of numbers can be
 * passed in:&lt;br&gt;
 * DenseMatrix a = new DenseMatrix(2,2,true,new double[]{1,2,3,4});&lt;br&gt;
 * DenseMatrix b = new DenseMatrix(2,2,true,1,2,3,4);&lt;br&gt;
 * &lt;br&gt;
 * Both are equivalent.
 * &lt;/p&gt;</text>
    <param>numRows The number of rows.</param>
    <param>numCols The number of columns.</param>
    <param>rowMajor If the array is encoded in a row-major or a column-major format.</param>
    <param>data The formatted 1D array. Not modified.</param>
  </javadoc>
  <method type="constructor" name="DenseMatrix64F">
    <declaration type="int" name="length" />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Creates a matrix with the values and shape defined by the 2D array 'data'.
 * It is assumed that 'data' has a row-major formatting:&lt;br&gt;
 * &lt;br&gt;
 * data[ row ][ column ]
 * &lt;/p&gt;</text>
    <param>data 2D array representation of the matrix. Not modified.</param>
  </javadoc>
  <method type="constructor" name="DenseMatrix64F">
    <declaration type="int" name="pos" />
    <scope>
      <declaration type="double[]" name="row" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Creates a new Matrix with the specified shape whose elements initially
 * have the value of zero.</text>
    <param>numRows The number of rows in the matrix.</param>
    <param>numCols The number of columns in the matrix.</param>
  </javadoc>
  <method type="constructor" name="DenseMatrix64F" />
  <javadoc>
    <text>Creates a new matrix which is equivalent to the provided matrix.  Note that
 * the length of the data will be determined by the shape of the matrix.</text>
    <param>orig The matrix which is to be copied.  This is not modified or saved.</param>
  </javadoc>
  <method type="constructor" name="DenseMatrix64F" />
  <javadoc>
    <text>This declares an array that can store a matrix up to the specified length.  This is usefull
 * when a matrix's size will be growing and it is desirable to avoid reallocating memory.</text>
    <param>length The size of the matrice's data array.</param>
  </javadoc>
  <method type="constructor" name="DenseMatrix64F" />
  <javadoc>
    <text>Default constructor where nothing is assigned.  In general this should not be used.</text>
  </javadoc>
  <method type="constructor" name="DenseMatrix64F" />
  <javadoc>
    <text>Creates a new DenseMatrix64F which contains the same information as the provided Matrix64F.</text>
    <param>mat Matrix whose values will be copied.  Not modified.</param>
  </javadoc>
  <method type="constructor" name="DenseMatrix64F">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Creates a new DenseMatrix64F around the provided data.  The data must encode
 * a row-major matrix.  Any modification to the returned matrix will modify the
 * provided data.</text>
    <param>numRows Number of rows in the matrix.</param>
    <param>numCols Number of columns in the matrix.</param>
    <param>data Data that is being wrapped. Referenced Saved.</param>
    <return>A matrix which references the provided data internally.</return>
  </javadoc>
  <method type="DenseMatrix64F" name="wrap">
    <declaration type="DenseMatrix64F" name="s" />
  </method>
  <javadoc>
    <inheritDoc />
  </javadoc>
  <method type="void" name="reshape">
    <scope>
      <declaration type="double[]" name="d" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Assigns the element in the Matrix to the specified value.  Performs a bounds check to make sure
 * the requested element is part of the matrix. &lt;br&gt;
 * &lt;br&gt;
 * a&lt;sub&gt;ij&lt;/sub&gt; = value&lt;br&gt;
 * &lt;/p&gt;</text>
    <param>row The row of the element.</param>
    <param>col The column of the element.</param>
    <param>value The element's new value.</param>
  </javadoc>
  <method type="void" name="set">
    <scope />
  </method>
  <method type="void" name="unsafe_set" />
  <javadoc>
    <text>&lt;p&gt;
 * Adds 'value' to the specified element in the matrix.&lt;br&gt;
 * &lt;br&gt;
 * a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; + value&lt;br&gt;
 * &lt;/p&gt;</text>
    <param>row The row of the element.</param>
    <param>col The column of the element.</param>
    <param>value The value that is added to the element</param>
  </javadoc>
  <method type="void" name="add">
    <scope />
    <comment>todo move to commonops</comment>
  </method>
  <javadoc>
    <text>Returns the value of the specified matrix element.  Performs a bounds check to make sure
 * the requested element is part of the matrix.</text>
    <param>row The row of the element.</param>
    <param>col The column of the element.</param>
    <return>The value of the element.</return>
  </javadoc>
  <method type="double" name="get">
    <scope />
  </method>
  <method type="double" name="unsafe_get" />
  <method type="int" name="getIndex" />
  <javadoc>
    <text>Determins if the specified element is inside the bounds of the Matrix.</text>
    <param>row The element's row.</param>
    <param>col The elements' column.</param>
    <return>True if it is inside the matrices bound, false otherwise.</return>
  </javadoc>
  <method type="boolean" name="isInBounds" />
  <javadoc>
    <text>Returns the number of elements in this matrix, which is equal to
 * the number of rows times the number of columns.</text>
    <return>The number of elements in the matrix.</return>
  </javadoc>
  <method type="int" name="getNumElements" />
  <javadoc>
    <text>&lt;p&gt;
 * Sets the value and shape of this matrix to be identical to the specified matrix. The width and height are
 * changed to match the matrix that has been provided.  If more memory is needed then a new data array is
 * declared.&lt;br&gt;
 * &lt;br&gt;
 * a.numRows = b.numRows&lt;br&gt;
 * a.numCols = b.numCols&lt;br&gt;
 * &lt;br&gt;
 * a&lt;sub&gt;ij&lt;/sub&gt; = b&lt;sub&gt;ij&lt;/sub&gt;&lt;br&gt;
 * &lt;br&gt;
 * &lt;p&gt;</text>
    <param>b The matrix that this matrix is to be set equal to.</param>
  </javadoc>
  <method type="void" name="setReshape">
    <declaration type="int" name="dataLength" />
    <scope />
  </method>
  <javadoc>
    <text>Sets this matrix equal to the matrix encoded in the array.</text>
    <param>numRows The number of rows.</param>
    <param>numCols The number of columns.</param>
    <param>rowMajor If the array is encoded in a row-major or a column-major format.</param>
    <param>data The formatted 1D array. Not modified.</param>
  </javadoc>
  <method type="void" name="set">
    <declaration type="int" name="length" />
    <scope />
    <scope>
      <declaration type="int" name="index" />
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Sets all elements equal to zero.</text>
  </javadoc>
  <method type="void" name="zero" />
  <javadoc>
    <text>Creates and returns a matrix which is idential to this one.</text>
    <return>A new identical matrix.</return>
  </javadoc>
  <method type="DenseMatrix64F" name="copy" />
  <javadoc>
    <text>Prints the value of this matrix to the screen.  For more options see{@link UtilEjml}</text>
  </javadoc>
  <method type="void" name="print" />
  <javadoc>
    <text>&lt;p&gt;
 * Prints the value of this matrix to the screen using the same format as {@link java.io.PrintStream#printf).
 * &lt;/p&gt;}</text>
    <param>format The format which each element is printed uses.</param>
  </javadoc>
  <method type="void" name="print" />
  <javadoc>
    <text>&lt;p&gt;
 * Converts the array into a string format for display purposes.
 * The conversion is done using {@link MatrixIO#print(java.io.PrintStream,Matrix64F)}.
 * &lt;/p&gt;</text>
    <return>String representation of the matrix.</return>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="ByteArrayOutputStream" name="stream" />
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
