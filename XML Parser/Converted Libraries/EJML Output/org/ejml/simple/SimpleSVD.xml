<?xml version="1.0" encoding="UTF-8"?>
<class name="SimpleSVD">
  <javadoc>
    <text>&lt;p&gt;
 * Wrapper around SVD for simple matrix.  See {@link SingularValueDecomposition} for more details.
 * &lt;/p&gt;
 * &lt;p&gt;
 * SVD is defined as the following decomposition:&lt;br&gt;
 * &lt;div align=center&gt; A = U * W * V &lt;sup&gt;T&lt;/sup&gt; &lt;/div&gt;&lt;br&gt;
 * where A is m by n, and U and V are orthogonal matrices, and  W is a diagonal matrix
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="SingularValueDecomposition&lt;DenseMatrix64F&gt;" name="svd" />
  <declaration type="T" name="U" />
  <declaration type="T" name="W" />
  <declaration type="T" name="V" />
  <declaration type="DenseMatrix64F" name="mat" />
  <method type="constructor" name="SimpleSVD">
    <comment>order singular values from largest to smallest</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Returns the orthogonal 'U' matrix.
 * &lt;/p&gt;</text>
    <return>An orthogonal m by m matrix.</return>
  </javadoc>
  <method type="T" name="getU" />
  <javadoc>
    <text>Returns a diagonal matrix with the singular values.  The singular values are ordered
 * from largest to smallest.</text>
    <return>Diagonal matrix with singular values along the diagonal.</return>
  </javadoc>
  <method type="T" name="getW" />
  <javadoc>
    <text>&lt;p&gt;
 * Returns the orthogonal 'V' matrix.
 * &lt;/p&gt;</text>
    <return>An orthogonal n by n matrix.</return>
  </javadoc>
  <method type="T" name="getV" />
  <javadoc>
    <text>&lt;p&gt;
 * Computes the quality of the computed decomposition.  A value close to or less than 1e-15
 * is considered to be within machine precision.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This function must be called before the original matrix has been modified or else it will
 * produce meaningless results.
 * &lt;/p&gt;</text>
    <return>Quality of the decomposition.</return>
  </javadoc>
  <method type="double" name="quality" />
  <javadoc>
    <text>Computes the null space from an SVD.  For more information see {@link SingularOps#nullSpace}.</text>
    <return>Null space vector.</return>
  </javadoc>
  <method type="SimpleMatrix" name="nullSpace">
    <comment>TODO take advantage of the singular values being ordered already</comment>
  </method>
  <javadoc>
    <text>Returns the specified singular value.</text>
    <param>index Which singular value is to be returned.</param>
    <return>A singular value.</return>
  </javadoc>
  <method type="double" name="getSingleValue" />
  <javadoc>
    <text>Returns the rank of the decomposed matrix.</text>
    <see>SingularOps#rank(org.ejml.factory.SingularValueDecomposition,double)</see>
    <return>The matrix's rank</return>
  </javadoc>
  <method type="int" name="rank" />
  <javadoc>
    <text>The nullity of the decomposed matrix.</text>
    <see>SingularOps#nullity(org.ejml.factory.SingularValueDecomposition,double)</see>
    <return>The matrix's nullity</return>
  </javadoc>
  <method type="int" name="nullity" />
  <javadoc>
    <text>Returns the underlying decomposition that this is a wrapper around.</text>
    <return>SingularValueDecomposition</return>
  </javadoc>
  <method type="SingularValueDecomposition" name="getSVD" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
