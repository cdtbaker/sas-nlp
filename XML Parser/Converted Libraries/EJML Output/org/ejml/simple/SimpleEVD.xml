<?xml version="1.0" encoding="UTF-8"?>
<class name="SimpleEVD">
  <javadoc>
    <text>Wrapper around EigenDecomposition for SimpleMatrix</text>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="EigenDecomposition&lt;DenseMatrix64F&gt;" name="eig" />
  <declaration type="DenseMatrix64F" name="mat" />
  <method type="constructor" name="SimpleEVD" />
  <javadoc>
    <text>Returns the number of eigenvalues/eigenvectors.  This is the matrix's dimension.</text>
    <return>number of eigenvalues/eigenvectors.</return>
  </javadoc>
  <method type="int" name="getNumberOfEigenvalues" />
  <javadoc>
    <text>&lt;p&gt;
 * Returns an eigenvalue as a complex number.  For symmetric matrices the returned eigenvalue will always be a real
 * number, which means the imaginary component will be equal to zero.
 * &lt;/p&gt;
 * &lt;p&gt;
 * NOTE: The order of the eigenvalues is dependent upon the decomposition algorithm used.  This means that they may
 * or may not be ordered by magnitude.  For example the QR algorithm will returns results that are partially
 * ordered by magnitude, but this behavior should not be relied upon.
 * &lt;/p&gt;</text>
    <param>index Index of the eigenvalue eigenvector pair.</param>
    <return>An eigenvalue.</return>
  </javadoc>
  <method type="Complex64F" name="getEigenvalue" />
  <javadoc>
    <text>&lt;p&gt;
 * Used to retrieve real valued eigenvectors.  If an eigenvector is associated with a complex eigenvalue
 * then null is returned instead.
 * &lt;/p&gt;</text>
    <param>index Index of the eigenvalue eigenvector pair.</param>
    <return>If the associated eigenvalue is real then an eigenvector is returned, null otherwise.</return>
  </javadoc>
  <method type="T" name="getEigenVector" />
  <javadoc>
    <text>&lt;p&gt;
 * Computes the quality of the computed decomposition.  A value close to or less than 1e-15
 * is considered to be within machine precision.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This function must be called before the original matrix has been modified or else it will
 * produce meaningless results.
 * &lt;/p&gt;</text>
    <return>Quality of the decomposition.</return>
  </javadoc>
  <method type="double" name="quality" />
  <javadoc>
    <text>Returns the underlying decomposition that this is a wrapper around.</text>
    <return>EigenDecomposition</return>
  </javadoc>
  <method type="EigenDecomposition" name="getEVD" />
  <javadoc>
    <text>Returns the index of the eigenvalue which has the largest magnitude.</text>
    <return>index of the largest magnitude eigen value.</return>
  </javadoc>
  <method type="int" name="getIndexMax">
    <declaration type="int" name="indexMax" />
    <declaration type="double" name="max" />
    <declaration type="int" name="N" />
    <scope>
      <declaration type="double" name="m" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns the index of the eigenvalue which has the smallest magnitude.</text>
    <return>index of the smallest magnitude eigen value.</return>
  </javadoc>
  <method type="int" name="getIndexMin">
    <declaration type="int" name="indexMin" />
    <declaration type="double" name="min" />
    <declaration type="int" name="N" />
    <scope>
      <declaration type="double" name="m" />
      <scope />
    </scope>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
