<?xml version="1.0" encoding="UTF-8"?>
<class name="SimpleMatrix">
  <javadoc>
    <text>&lt;p&gt;{@link SimpleMatrix} is a wrapper around {@link org.ejml.data.DenseMatrix64F} that provides an
 * easy to use object oriented interface for performing matrix operations.  It is designed to be
 * more accessible to novice programmers and provide a way to rapidly code up solutions by simplifying
 * memory management and providing easy to use functions.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Most functions in SimpleMatrix do not modify the original matrix.  Instead they
 * create a new SimpleMatrix instance which is modified and returned.  This greatly simplifies memory
 * management and writing of code in general. It also allows operations to be chained, as is shown
 * below:&lt;br&gt;
 * &lt;br&gt;
 * SimpleMatrix K = P.mult(H.transpose().mult(S.invert()));
 * &lt;/p&gt;
 * &lt;p&gt;
 * Working with both {@link org.ejml.data.DenseMatrix64F} and SimpleMatrix in the same code base is easy.
 * To access the internal DenseMatrix64F in a SimpleMatrix simply call {@link SimpleMatrix#getMatrix()}.
 * To turn a DenseMatrix64F into a SimpleMatrix use {@link SimpleMatrix#wrap(org.ejml.data.DenseMatrix64F)}.  Not
 * all operations in EJML are provided for SimpleMatrix, but can be accessed by extracting the internal
 * DenseMatrix64F.
 * &lt;/p&gt;
 * &lt;p&gt;
 * EXTENDING: SimpleMatrix contains a list of narrowly focused functions for linear algebra.  To harness
 * the functionality for another application and to the number of functions it supports it is recommended
 * that one extends {@link SimpleBase} instead.  This way the returned matrix type's of SimpleMatrix functions
 * will be of the appropriate types.  See StatisticsMatrix inside of the examples directory.
 * &lt;/p&gt;
 * &lt;p&gt;
 * PERFORMANCE: The disadvantage of using this class is that it is more resource intensive, since
 * it creates a new matrix each time an operation is performed.  This makes the JavaVM work harder and
 * Java automatically initializes the matrix to be all zeros.  Typically operations on small matrices
 * or operations that have a runtime linear with the number of elements are the most affected.  More
 * computationally intensive operations have only a slight unnoticeable performance loss.  MOST PEOPLE
 * SHOULD NOT WORRY ABOUT THE SLIGHT LOSS IN PERFORMANCE.
 * &lt;/p&gt;
 * &lt;p&gt;
 * It is hard to judge how significant the performance hit will be in general.  Often the performance
 * hit is insignificant since other parts of the application are more processor intensive or the bottle
 * neck is a more computationally complex operation.  The best approach is benchmark and then optimize the code.
 * &lt;/p&gt;
 * &lt;p&gt;
 * If SimpleMatrix is extended then the protected function {link #createMatrix} should be extended and return
 * the child class.  The results of SimpleMatrix operations will then be of the correct matrix type. 
 * &lt;/p&gt;
 * &lt;p&gt;
 * The object oriented approach used in SimpleMatrix was originally inspired by Jama.
 * http://math.nist.gov/javanumerics/jama/
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>A simplified way to reference the last row or column in the matrix for some functions.</text>
  </javadoc>
  <declaration type="int" name="END" />
  <javadoc>
    <text>&lt;p&gt;
 * Creates a new matrix which has the same value as the matrix encoded in the
 * provided array.  The input matrix's format can either be row-major or
 * column-major.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Note that 'data' is a variable argument type, so either 1D arrays or a set of numbers can be
 * passed in:&lt;br&gt;
 * SimpleMatrix a = new SimpleMatrix(2,2,true,new double[]{1,2,3,4});&lt;br&gt;
 * SimpleMatrix b = new SimpleMatrix(2,2,true,1,2,3,4);&lt;br&gt;
 * &lt;br&gt;
 * Both are equivalent.
 * &lt;/p&gt;</text>
    <see>DenseMatrix64F#DenseMatrix64F(int,int,boolean,double...)</see>
    <param>numRows The number of rows.</param>
    <param>numCols The number of columns.</param>
    <param>rowMajor If the array is encoded in a row-major or a column-major format.</param>
    <param>data The formatted 1D array. Not modified.</param>
  </javadoc>
  <method type="constructor" name="SimpleMatrix" />
  <javadoc>
    <text>&lt;p&gt;
 * Creates a matrix with the values and shape defined by the 2D array 'data'.
 * It is assumed that 'data' has a row-major formatting:&lt;br&gt;
 * &lt;br&gt;
 * data[ row ][ column ]
 * &lt;/p&gt;</text>
    <see>org.ejml.data.DenseMatrix64F#DenseMatrix64F(double[][])</see>
    <param>data 2D array representation of the matrix. Not modified.</param>
  </javadoc>
  <method type="constructor" name="SimpleMatrix" />
  <javadoc>
    <text>Creates a new matrix that is initially set to zero with the specified dimensions.</text>
    <see>org.ejml.data.DenseMatrix64F#DenseMatrix64F(int,int)</see>
    <param>numRows The number of rows in the matrix.</param>
    <param>numCols The number of columns in the matrix.</param>
  </javadoc>
  <method type="constructor" name="SimpleMatrix" />
  <javadoc>
    <text>Creats a new SimpleMatrix which is identical to the original.</text>
    <param>orig The matrix which is to be copied. Not modified.</param>
  </javadoc>
  <method type="constructor" name="SimpleMatrix" />
  <javadoc>
    <text>Creates a new SimpleMatrix which is a copy of the DenseMatrix64F.</text>
    <param>orig The original matrix whose value is copied.  Not modified.</param>
  </javadoc>
  <method type="constructor" name="SimpleMatrix" />
  <javadoc>
    <text>Creates a new SimpleMatrix which is a copy of the Matrix64F.</text>
    <param>orig The original matrix whose value is copied.  Not modified.</param>
  </javadoc>
  <method type="constructor" name="SimpleMatrix" />
  <method type="constructor" name="SimpleMatrix" />
  <javadoc>
    <text>Creates a new SimpleMatrix with the specified DenseMatrix64F used as its internal matrix.  This means
 * that the reference is saved and calls made to the returned SimpleMatrix will modify the passed in DenseMatrix64F.</text>
    <param>internalMat The internal DenseMatrix64F of the returned SimpleMatrix. Will be modified.</param>
  </javadoc>
  <method type="SimpleMatrix" name="wrap">
    <declaration type="SimpleMatrix" name="ret" />
  </method>
  <javadoc>
    <text>Creates a new identity matrix with the specified size.</text>
    <see>org.ejml.ops.CommonOps#identity(int)</see>
    <param>width The width and height of the matrix.</param>
    <return>An identity matrix.</return>
  </javadoc>
  <method type="SimpleMatrix" name="identity">
    <declaration type="SimpleMatrix" name="ret" />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Creates a matrix where all but the diagonal elements are zero.  The values
 * of the diagonal elements are specified by the parameter 'vals'.
 * &lt;/p&gt;
 * &lt;p&gt;
 * To extract the diagonal elements from a matrix see {@link #extractDiag()}.
 * &lt;/p&gt;</text>
    <see>org.ejml.ops.CommonOps#diag(double...)</see>
    <param>vals The values of the diagonal elements.</param>
    <return>A diagonal matrix.</return>
  </javadoc>
  <method type="SimpleMatrix" name="diag">
    <declaration type="DenseMatrix64F" name="m" />
    <declaration type="SimpleMatrix" name="ret" />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Creates a new SimpleMatrix with random elements drawn from a uniform distribution from minValue to maxValue.
 * &lt;/p&gt;</text>
    <see>org.ejml.ops.RandomMatrices#setRandom(DenseMatrix64F,java.util.Random)</see>
    <param>numRows The number of rows in the new matrix</param>
    <param>numCols The number of columns in the new matrix</param>
    <param>minValue Lower bound</param>
    <param>maxValue Upper bound</param>
    <param>rand The random number generator that's used to fill the matrix.  @return The new random matrix.</param>
  </javadoc>
  <method type="SimpleMatrix" name="random">
    <declaration type="SimpleMatrix" name="ret" />
  </method>
  <javadoc>
    <inheritdoc />
  </javadoc>
  <method type="SimpleMatrix" name="createMatrix" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>TODO should this function be added back?  It makes the code hard to read when its used</comment>
  <comment>/**</comment>
  <comment>* &lt;p&gt;</comment>
  <comment>* Performs one of the following matrix multiplication operations:&lt;br&gt;</comment>
  <comment>* &lt;br&gt;</comment>
  <comment>* c = a * b &lt;br&gt;</comment>
  <comment>* c = a&lt;sup&gt;T&lt;/sup&gt; * b &lt;br&gt;</comment>
  <comment>* c = a * b &lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;</comment>
  <comment>* c = a&lt;sup&gt;T&lt;/sup&gt; * b &lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;</comment>
  <comment>* &lt;br&gt;</comment>
  <comment>* where c is the returned matrix, a is this matrix, and b is the passed in matrix.</comment>
  <comment>* &lt;/p&gt;</comment>
  <comment>*</comment>
  <comment>* @see CommonOps#mult(DenseMatrix64F, DenseMatrix64F, DenseMatrix64F)</comment>
  <comment>* @see CommonOps#multTransA(DenseMatrix64F, DenseMatrix64F, DenseMatrix64F)</comment>
  <comment>* @see CommonOps#multTransB(DenseMatrix64F, DenseMatrix64F, DenseMatrix64F)</comment>
  <comment>* @see CommonOps#multTransAB(DenseMatrix64F, DenseMatrix64F, DenseMatrix64F)</comment>
  <comment>*</comment>
  <comment>* @param tranA If true matrix A is transposed.</comment>
  <comment>* @param tranB If true matrix B is transposed.</comment>
  <comment>* @param b A matrix that is n by bn. Not modified.</comment>
  <comment>*</comment>
  <comment>* @return The results of this operation.</comment>
  <comment>*/</comment>
  <comment>public SimpleMatrix mult( boolean tranA , boolean tranB , SimpleMatrix b) {</comment>
  <comment>SimpleMatrix ret;</comment>
  <comment />
  <comment>if( tranA &amp;&amp; tranB ) {</comment>
  <comment>ret = createMatrix(mat.numCols,b.mat.numRows);</comment>
  <comment>CommonOps.multTransAB(mat,b.mat,ret.mat);</comment>
  <comment>} else if( tranA ) {</comment>
  <comment>ret = createMatrix(mat.numCols,b.mat.numCols);</comment>
  <comment>CommonOps.multTransA(mat,b.mat,ret.mat);</comment>
  <comment>} else if( tranB ) {</comment>
  <comment>ret = createMatrix(mat.numRows,b.mat.numRows);</comment>
  <comment>CommonOps.multTransB(mat,b.mat,ret.mat);</comment>
  <comment>}  else  {</comment>
  <comment>ret = createMatrix(mat.numRows,b.mat.numCols);</comment>
  <comment>CommonOps.mult(mat,b.mat,ret.mat);</comment>
  <comment>}</comment>
  <comment />
  <comment>return ret;</comment>
  <comment>}</comment>
</class>
