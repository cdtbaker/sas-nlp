<?xml version="1.0" encoding="UTF-8"?>
<class name="MatrixFeatures">
  <javadoc>
    <text>&lt;p&gt;
 * Used to compute features that describe the structure of a matrix.
 * &lt;p&gt;
 * &lt;p&gt;
 * Unless explicitly stated otherwise it is assumed that the elements of input matrices
 * contain only real numbers.  If an element is NaN or infinite then the behavior is undefined.
 * See IEEE 754 for more information on this issue.
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>Checks to see if any element in the matrix is NaN.</text>
    <param>m A matrix. Not modified.</param>
    <return>True if any element in the matrix is NaN.</return>
  </javadoc>
  <method type="boolean" name="hasNaN">
    <declaration type="int" name="length" />
    <scope />
  </method>
  <javadoc>
    <text>Checks to see if any element in the matrix is NaN of Infinite.</text>
    <param>m A matrix. Not modified.</param>
    <return>True if any element in the matrix is NaN of Infinite.</return>
  </javadoc>
  <method type="boolean" name="hasUncountable">
    <declaration type="int" name="length" />
    <scope>
      <declaration type="double" name="a" />
    </scope>
  </method>
  <javadoc>
    <text>Checks to see if the matrix is a vector or not.</text>
    <param>mat A matrix. Not modified.</param>
    <return>True if it is a vector and false if it is not.</return>
  </javadoc>
  <method type="boolean" name="isVector" />
  <javadoc>
    <text>&lt;p&gt;
 * Checks to see if the matrix is positive definite.
 * &lt;/p&gt;
 * &lt;p&gt;
 * x&lt;sup&gt;T&lt;/sup&gt; A x &gt; 0&lt;br&gt;
 * for all x where x is a non-zero vector and A is a symmetric matrix.
 * &lt;/p&gt;</text>
    <param>A square symmetric matrix. Not modified.</param>
    <return>True if it is positive definite and false if it is not.</return>
  </javadoc>
  <method type="boolean" name="isPositiveDefinite">
    <declaration type="CholeskyDecompositionInner" name="chol" />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Checks to see if the matrix is positive semidefinite:
 * &lt;/p&gt;
 * &lt;p&gt;
 * x&lt;sup&gt;T&lt;/sup&gt; A x &gt;= 0&lt;br&gt;
 * for all x where x is a non-zero vector and A is a symmetric matrix.
 * &lt;/p&gt;</text>
    <param>A square symmetric matrix. Not modified.</param>
    <return>True if it is positive semidefinite and false if it is not.</return>
  </javadoc>
  <method type="boolean" name="isPositiveSemidefinite">
    <declaration type="EigenDecomposition&lt;DenseMatrix64F&gt;" name="eig" />
    <scope>
      <declaration type="Complex64F" name="v" />
    </scope>
  </method>
  <javadoc>
    <text>Checks to see if it is a square matrix.  A square matrix has
 * the same number of rows and columns.</text>
    <param>mat A matrix. Not modified.</param>
    <return>True if it is a square matrix and false if it is not.</return>
  </javadoc>
  <method type="boolean" name="isSquare" />
  <javadoc>
    <text>&lt;p&gt;
 * Returns true if the matrix is symmetric within the tolerance.  Only square matrices can be
 * symmetric.
 * &lt;/p&gt;
 * &lt;p&gt;
 * A matrix is symmetric if:&lt;br&gt;
 * |a&lt;sub&gt;ij&lt;/sub&gt; - a&lt;sub&gt;ji&lt;/sub&gt;| &amp;le; tol
 * &lt;/p&gt;</text>
    <param>m A matrix. Not modified.</param>
    <param>tol Tolerance for how similar two elements need to be.</param>
    <return>true if it is symmetric and false if it is not.</return>
  </javadoc>
  <method type="boolean" name="isSymmetric">
    <declaration type="double" name="max" />
    <scope>
      <scope>
        <declaration type="double" name="a" />
        <declaration type="double" name="b" />
        <declaration type="double" name="diff" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Returns true if the matrix is perfectly symmetric.  Only square matrices can be symmetric.
 * &lt;/p&gt;
 * &lt;p&gt;
 * A matrix is symmetric if:&lt;br&gt;
 * a&lt;sub&gt;ij&lt;/sub&gt; == a&lt;sub&gt;ji&lt;/sub&gt;
 * &lt;/p&gt;</text>
    <param>m A matrix. Not modified.</param>
    <return>true if it is symmetric and false if it is not.</return>
  </javadoc>
  <method type="boolean" name="isSymmetric" />
  <javadoc>
    <text>&lt;p&gt;
 * Checks to see if a matrix is skew symmetric with in tolerance:&lt;br&gt;
 * &lt;br&gt;
 * -A = A&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
 * or&lt;br&gt;
 * |a&lt;sub&gt;ij&lt;/sub&gt; + a&lt;sub&gt;ji&lt;/sub&gt;| &amp;le; tol
 * &lt;/p&gt;</text>
    <param>A The matrix being tested.</param>
    <param>tol Tolerance for being skew symmetric.</param>
    <return>True if it is skew symmetric and false if it is not.</return>
  </javadoc>
  <method type="boolean" name="isSkewSymmetric">
    <scope>
      <scope>
        <declaration type="double" name="a" />
        <declaration type="double" name="b" />
        <declaration type="double" name="diff" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Checks to see if the two matrices are inverses of each other.</text>
    <param>a A matrix. Not modified.</param>
    <param>b A matrix. Not modified.</param>
  </javadoc>
  <method type="boolean" name="isInverse">
    <scope />
    <declaration type="int" name="numRows" />
    <declaration type="int" name="numCols" />
    <scope>
      <scope>
        <declaration type="double" name="total" />
        <scope />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Checks to see if each element in the two matrices are within tolerance of
 * each other: tol &amp;ge; |a&lt;sub&gt;ij&lt;/sub&gt; - b&lt;sub&gt;ij&lt;/sub&gt;|.
 * &lt;p&gt;
 * &lt;p&gt;
 * NOTE: If any of the elements are not countable then false is returned.&lt;br&gt;
 * NOTE: If a tolerance of zero is passed in this is equivalent to calling{@link #isEquals(org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)}&lt;/p&gt;</text>
    <param>a A matrix. Not modified.</param>
    <param>b A matrix. Not modified.</param>
    <param>tol How close to being identical each element needs to be.</param>
    <return>true if equals and false otherwise.</return>
  </javadoc>
  <method type="boolean" name="isEquals">
    <scope />
    <declaration type="int" name="length" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Checks to see if each element in the upper or lower triangular portion of the two matrices are within tolerance of
 * each other: tol &amp;ge; |a&lt;sub&gt;ij&lt;/sub&gt; - b&lt;sub&gt;ij&lt;/sub&gt;|.
 * &lt;p&gt;
 * &lt;p&gt;
 * NOTE: If any of the elements are not countable then false is returned.&lt;br&gt;
 * NOTE: If a tolerance of zero is passed in this is equivalent to calling{@link #isEquals(org.ejml.data.D1Matrix64F,org.ejml.data.D1Matrix64F)}&lt;/p&gt;</text>
    <param>a A matrix. Not modified.</param>
    <param>b A matrix. Not modified.</param>
    <param>upper true of upper triangular and false for lower.</param>
    <param>tol How close to being identical each element needs to be.</param>
    <return>true if equals and false otherwise.</return>
  </javadoc>
  <method type="boolean" name="isEqualsTriangle">
    <scope />
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <scope>
      <scope>
        <declaration type="int" name="end" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Checks to see if each element in the two matrices are equal:
 * a&lt;sub&gt;ij&lt;/sub&gt; == b&lt;sub&gt;ij&lt;/sub&gt;
 * &lt;p&gt;
 * &lt;p&gt;
 * NOTE: If any of the elements are NaN then false is returned.  If two corresponding
 * elements are both positive or negative infinity then they are equal.
 * &lt;/p&gt;</text>
    <param>a A matrix. Not modified.</param>
    <param>b A matrix. Not modified.</param>
    <return>true if identical and false otherwise.</return>
  </javadoc>
  <method type="boolean" name="isEquals">
    <scope />
    <declaration type="int" name="length" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Checks to see if each corresponding element in the two matrices are
 * within tolerance of each other or have the some symbolic meaning.  This
 * can handle NaN and Infinite numbers.
 * &lt;p&gt;
 * &lt;p&gt;
 * If both elements are countable then the following equality test is used:&lt;br&gt;
 * |a&lt;sub&gt;ij&lt;/sub&gt; - b&lt;sub&gt;ij&lt;/sub&gt;| &amp;le; tol.&lt;br&gt;
 * Otherwise both numbers must both be Double.NaN, Double.POSITIVE_INFINITY, or
 * Double.NEGATIVE_INFINITY to be identical.
 * &lt;/p&gt;</text>
    <param>a A matrix. Not modified.</param>
    <param>b A matrix. Not modified.</param>
    <param>tol Tolerance for equality.</param>
    <return>true if identical and false otherwise.</return>
  </javadoc>
  <method type="boolean" name="isIdentical">
    <scope />
    <declaration type="int" name="length" />
    <scope>
      <declaration type="double" name="valA" />
      <declaration type="double" name="valB" />
      <declaration type="double" name="diff" />
      <scope />
      <scope />
      <scope />
    </scope>
    <comment>if either is negative or positive infinity the result will be positive infinity</comment>
    <comment>if either is NaN the result will be NaN</comment>
    <comment>diff = NaN == false</comment>
    <comment>diff = infinity == false</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Checks to see if a matrix is orthogonal or isometric.
 * &lt;/p&gt;</text>
    <param>Q The matrix being tested. Not modified.</param>
    <param>tol Tolerance.</param>
    <return>True if it passes the test.</return>
  </javadoc>
  <method type="boolean" name="isOrthogonal">
    <scope />
    <declaration type="DenseMatrix64F[]" name="u" />
    <scope>
      <declaration type="DenseMatrix64F" name="a" />
      <scope>
        <declaration type="double" name="val" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Checks to see if the rows of the provided matrix are linearly independent.</text>
    <param>A Matrix whose rows are being tested for linear independence.</param>
    <return>true if linearly independent and false otherwise.</return>
  </javadoc>
  <method type="boolean" name="isRowsLinearIndependent">
    <declaration type="LUDecomposition&lt;DenseMatrix64F&gt;" name="lu" />
    <comment>LU decomposition</comment>
    <comment>if they are linearly independent it should not be singular</comment>
  </method>
  <javadoc>
    <text>Checks to see if the provided matrix is within tolerance to an identity matrix.</text>
    <param>mat Matrix being examined.  Not modified.</param>
    <param>tol Tolerance.</param>
    <return>True if it is within tolerance to an identify matrix.</return>
  </javadoc>
  <method type="boolean" name="isIdentity">
    <declaration type="int" name="index" />
    <scope>
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>see if the result is an identity matrix</comment>
  </method>
  <javadoc>
    <text>Checks to see if every value in the matrix is the specified value.</text>
    <param>mat The matrix being tested.  Not modified.</param>
    <param>val Checks to see if every element in the matrix has this value.</param>
    <param>tol True if all the elements are within this tolerance.</param>
    <return>true if the test passes.</return>
  </javadoc>
  <method type="boolean" name="isConstantVal">
    <declaration type="int" name="index" />
    <scope>
      <scope />
    </scope>
    <comment>see if the result is an identity matrix</comment>
  </method>
  <javadoc>
    <text>Checks to see if all the diagonal elements in the matrix are positive.</text>
    <param>a A matrix. Not modified.</param>
    <return>true if all the  diagonal elements are positive, false otherwise.</return>
  </javadoc>
  <method type="boolean" name="isDiagonalPositive">
    <scope />
  </method>
  <method type="boolean" name="isFullRank">
    <comment>TODO write this</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Checks to see if the two matrices are the negative of each other:&lt;br&gt;
 * &lt;br&gt;
 * a&lt;sub&gt;ij&lt;/sub&gt; = -b&lt;sub&gt;ij&lt;/sub&gt;
 * &lt;/p&gt;</text>
    <param>a First matrix.  Not modified.</param>
    <param>b Second matrix.  Not modified.</param>
    <param>tol Numerical tolerance.</param>
    <return>True if they are the negative of each other within tolerance.</return>
  </javadoc>
  <method type="boolean" name="isNegative">
    <declaration type="int" name="length" />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Checks to see if a matrix is upper triangular or Hessenberg. A Hessenberg matrix of degree N
 * has the following property:&lt;br&gt;
 * &lt;br&gt;
 * a&lt;sub&gt;ij&lt;/sub&gt; &amp;le; 0 for all i &lt; j+N&lt;br&gt;
 * &lt;br&gt;
 * A triangular matrix is a Hessenberg matrix of degree 0.
 * &lt;/p&gt;</text>
    <param>A Matrix being tested.  Not modified.</param>
    <param>hessenberg The degree of being hessenberg.</param>
    <param>tol How close to zero the lower left elements need to be.</param>
    <return>If it is an upper triangular/hessenberg matrix or not.</return>
  </javadoc>
  <method type="boolean" name="isUpperTriangle">
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Computes the rank of a matrix using a default tolerance.</text>
    <param>A Matrix whose rank is to be calculated.  Not modified.</param>
    <return>The matrix's rank.</return>
  </javadoc>
  <method type="int" name="rank" />
  <javadoc>
    <text>Computes the rank of a matrix using the specified tolerance.</text>
    <param>A Matrix whose rank is to be calculated.  Not modified.</param>
    <param>threshold The numerical threshold used to determine a singular value.</param>
    <return>The matrix's rank.</return>
  </javadoc>
  <method type="int" name="rank">
    <declaration type="SingularValueDecomposition&lt;DenseMatrix64F&gt;" name="svd" />
  </method>
  <javadoc>
    <text>Computes the nullity of a matrix using the default tolerance.</text>
    <param>A Matrix whose rank is to be calculated.  Not modified.</param>
    <return>The matrix's nullity.</return>
  </javadoc>
  <method type="int" name="nullity" />
  <javadoc>
    <text>Computes the nullity of a matrix using the specified tolerance.</text>
    <param>A Matrix whose rank is to be calculated.  Not modified.</param>
    <param>threshold The numerical threshold used to determine a singular value.</param>
    <return>The matrix's nullity.</return>
  </javadoc>
  <method type="int" name="nullity">
    <declaration type="SingularValueDecomposition&lt;DenseMatrix64F&gt;" name="svd" />
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
