<?xml version="1.0" encoding="UTF-8"?>
<class name="ReadCsv">
  <javadoc>
    <text>&lt;p&gt;
 * Base class for reading CSV formatted files.  CSV stands for column-space-value where text strings are separated
 * by a space character.  The values are typically stored in a human readable format.  The encoded text for a single
 * variable is referred to as a word.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Comments are allowed and identified by starting a line with the comment character.  The comment character is user
 * configurable.  By default there is no comment character.
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="boolean" name="hasComment" />
  <declaration type="char" name="comment" />
  <declaration type="BufferedReader" name="in" />
  <declaration type="int" name="lineNumber" />
  <javadoc>
    <text>Constructor for ReadCsv</text>
    <param>in Where the input comes from.</param>
  </javadoc>
  <method type="constructor" name="ReadCsv" />
  <javadoc>
    <text>Sets the comment character.  All lines that start with this character will be ignored.</text>
    <param>comment The new comment character.</param>
  </javadoc>
  <method type="void" name="setComment" />
  <javadoc>
    <text>Returns how many lines have been read.</text>
    <return>Line number</return>
  </javadoc>
  <method type="int" name="getLineNumber" />
  <javadoc>
    <text>Returns the reader that it is using internally.</text>
    <return>The reader.</return>
  </javadoc>
  <method type="BufferedReader" name="getReader" />
  <javadoc>
    <text>Finds the next valid line of words in the stream and extracts them.</text>
    <return>List of valid words on the line.  null if the end of the file has been reached.</return>
    <throws>java.io.IOException</throws>
  </javadoc>
  <method type="List&lt;String&gt;" name="extractWords">
    <scope>
      <declaration type="String" name="line" />
      <scope />
      <scope />
    </scope>
    <comment>skip comment lines</comment>
    <comment>extract the words, which are the variables encoded</comment>
  </method>
  <javadoc>
    <text>Extracts the words from a string.  Words are seperated by a space character.</text>
    <param>line The line that is being parsed.</param>
    <return>A list of words contained on the line.</return>
  </javadoc>
  <method type="List&lt;String&gt;" name="parseWords">
    <declaration type="List&lt;String&gt;" name="words" />
    <declaration type="boolean" name="insideWord" />
    <declaration type="int" name="last" />
    <scope>
      <declaration type="char" name="c" />
      <scope>
        <scope />
      </scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <scope />
    <comment>see if its at the end of a word</comment>
    <comment>if the line ended add the final word</comment>
  </method>
  <javadoc>
    <text>Checks to see if 'c' is a space character or not.</text>
    <param>c The character being tested.</param>
    <return>if it is a space character or not.</return>
  </javadoc>
  <method type="boolean" name="isSpace" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>if there is a comment character</comment>
  <comment>what the comment character is</comment>
  <comment>reader for the input stream</comment>
  <comment>number of lines that have been read</comment>
</class>
