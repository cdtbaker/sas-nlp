<?xml version="1.0" encoding="UTF-8"?>
<class name="EjmlUnitTests">
  <javadoc>
    <text>Contains various functions related to unit testing matrix operations.</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>Checks to see if every element in A is countable.  A doesn't have any element with
 * a value of NaN or infinite.</text>
    <param>A Matrix</param>
  </javadoc>
  <method type="void" name="assertCountable">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Checks to see if A and B have the same shape.
 * &lt;/p&gt;</text>
    <param>A Matrix</param>
    <param>B Matrix</param>
  </javadoc>
  <method type="void" name="assertShape" />
  <javadoc>
    <text>&lt;p&gt;
 * Checks to see if the matrix has the specified number of rows and columns.
 * &lt;/p&gt;</text>
    <param>A Matrix</param>
    <param>numRows expected number of rows in the matrix</param>
    <param>numCols expected number of columns in the matrix</param>
  </javadoc>
  <method type="void" name="assertShape" />
  <javadoc>
    <text>&lt;p&gt;
 * Checks to see if each element in the matrix is within tolerance of each other:
 * &lt;/p&gt;
 * &lt;p&gt;
 * The two matrices are identical with in tolerance if:&lt;br&gt;
 * |a&lt;sub&gt;ij&lt;/sub&gt; - b&lt;sub&gt;ij&lt;/sub&gt;| &amp;le; tol
 * &lt;/p&gt;
 * &lt;p&gt;
 * In addition if an element is NaN or infinite in one matrix it must be the same in the other.
 * &lt;/p&gt;</text>
    <param>A Matrix A</param>
    <param>B Matrix B</param>
    <param>tol Tolerance</param>
  </javadoc>
  <method type="void" name="assertEqualsUncountable">
    <scope>
      <scope>
        <declaration type="double" name="valA" />
        <declaration type="double" name="valB" />
        <scope />
        <scope />
        <scope>
          <declaration type="double" name="diff" />
        </scope>
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Checks to see if each element in the matrices are within tolerance of each other and countable:
 * &lt;/p&gt;
 * &lt;p&gt;
 * The two matrices are identical with in tolerance if:&lt;br&gt;
 * |a&lt;sub&gt;ij&lt;/sub&gt; - b&lt;sub&gt;ij&lt;/sub&gt;| &amp;le; tol
 * &lt;/p&gt;
 * &lt;p&gt;
 * The test will fail if any element in either matrix is NaN or infinite.
 * &lt;/p&gt;</text>
    <param>A Matrix A</param>
    <param>B Matrix B</param>
    <param>tol Tolerance</param>
  </javadoc>
  <method type="void" name="assertEquals">
    <scope>
      <scope>
        <declaration type="double" name="valA" />
        <declaration type="double" name="valB" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Checks to see if the transpose of B is equal to A and countable:
 * &lt;/p&gt;
 * &lt;p&gt;
 * |a&lt;sub&gt;ij&lt;/sub&gt; - b&lt;sub&gt;ji&lt;/sub&gt;| &amp;le; tol
 * &lt;/p&gt;
 * &lt;p&gt;
 * The test will fail if any element in either matrix is NaN or infinite.
 * &lt;/p&gt;</text>
    <param>A Matrix A</param>
    <param>B Matrix B</param>
    <param>tol Tolerance</param>
  </javadoc>
  <method type="void" name="assertEqualsTrans">
    <scope>
      <scope>
        <declaration type="double" name="valA" />
        <declaration type="double" name="valB" />
      </scope>
    </scope>
  </method>
  <method type="void" name="assertTrue">
    <comment>if turned on use asserts</comment>
    <comment>otherwise throw an exception</comment>
  </method>
  <method type="constructor" name="TestException" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
