<?xml version="1.0" encoding="UTF-8"?>
<class name="ConvertMatrixType">
  <javadoc>
    <text>Functions for converting between matrix types.  Both matrices must be the same size and their values will
 * be copied.</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>Generic, but slow, conversion function.</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.</param>
  </javadoc>
  <method type="void" name="convert">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Converts {@link FixedMatrix2x2_64F} into {@link DenseMatrix64F}.</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="DenseMatrix64F" name="convert" />
  <javadoc>
    <text>Converts {@link FixedMatrix3x3_64F} into {@link DenseMatrix64F}.</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="DenseMatrix64F" name="convert" />
  <javadoc>
    <text>Converts {@link FixedMatrix4x4_64F} into {@link DenseMatrix64F}.</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="DenseMatrix64F" name="convert" />
  <javadoc>
    <text>Converts {@link FixedMatrix5x5_64F} into {@link DenseMatrix64F}.</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="DenseMatrix64F" name="convert" />
  <javadoc>
    <text>Converts {@link FixedMatrix6x6_64F} into {@link DenseMatrix64F}.</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="DenseMatrix64F" name="convert" />
  <javadoc>
    <text>Converts {@link DenseMatrix64F} into {@link FixedMatrix2x2_64F}</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="FixedMatrix2x2_64F" name="convert" />
  <javadoc>
    <text>Converts {@link DenseMatrix64F} into {@link FixedMatrix3x3_64F}</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="FixedMatrix3x3_64F" name="convert" />
  <javadoc>
    <text>Converts {@link DenseMatrix64F} into {@link FixedMatrix4x4_64F}</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="FixedMatrix4x4_64F" name="convert" />
  <javadoc>
    <text>Converts {@link DenseMatrix64F} into {@link FixedMatrix5x5_64F}</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="FixedMatrix5x5_64F" name="convert" />
  <javadoc>
    <text>Converts {@link DenseMatrix64F} into {@link FixedMatrix6x6_64F}</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="FixedMatrix6x6_64F" name="convert" />
  <javadoc>
    <text>Converts {@link FixedMatrix2_64F} into {@link DenseMatrix64F}.</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="DenseMatrix64F" name="convert">
    <declaration type="int" name="length" />
  </method>
  <javadoc>
    <text>Converts {@link FixedMatrix3_64F} into {@link DenseMatrix64F}.</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="DenseMatrix64F" name="convert">
    <declaration type="int" name="length" />
  </method>
  <javadoc>
    <text>Converts {@link FixedMatrix4_64F} into {@link DenseMatrix64F}.</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="DenseMatrix64F" name="convert">
    <declaration type="int" name="length" />
  </method>
  <javadoc>
    <text>Converts {@link FixedMatrix5_64F} into {@link DenseMatrix64F}.</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="DenseMatrix64F" name="convert">
    <declaration type="int" name="length" />
  </method>
  <javadoc>
    <text>Converts {@link FixedMatrix6_64F} into {@link DenseMatrix64F}.</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="DenseMatrix64F" name="convert">
    <declaration type="int" name="length" />
  </method>
  <javadoc>
    <text>Converts {@link DenseMatrix64F} into {@link FixedMatrix2_64F}</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="FixedMatrix2_64F" name="convert">
    <declaration type="int" name="length" />
  </method>
  <javadoc>
    <text>Converts {@link DenseMatrix64F} into {@link FixedMatrix3_64F}</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="FixedMatrix3_64F" name="convert">
    <declaration type="int" name="length" />
  </method>
  <javadoc>
    <text>Converts {@link DenseMatrix64F} into {@link FixedMatrix4_64F}</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="FixedMatrix4_64F" name="convert">
    <declaration type="int" name="length" />
  </method>
  <javadoc>
    <text>Converts {@link DenseMatrix64F} into {@link FixedMatrix5_64F}</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="FixedMatrix5_64F" name="convert">
    <declaration type="int" name="length" />
  </method>
  <javadoc>
    <text>Converts {@link DenseMatrix64F} into {@link FixedMatrix6_64F}</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="FixedMatrix6_64F" name="convert">
    <declaration type="int" name="length" />
  </method>
  <javadoc>
    <text>Converts {@link DenseMatrix64F} into {@link BlockMatrix64F}Can't handle null output matrix since block size needs to be specified.</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.</param>
  </javadoc>
  <method type="void" name="convert" />
  <javadoc>
    <text>Converts {@link BlockMatrix64F} into {@link DenseMatrix64F}</text>
    <param>input Input matrix.</param>
    <param>output Output matrix.  If null a new matrix will be declared.</param>
    <return>Converted matrix.</return>
  </javadoc>
  <method type="DenseMatrix64F" name="convert" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
