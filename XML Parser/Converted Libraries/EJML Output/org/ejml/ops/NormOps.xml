<?xml version="1.0" encoding="UTF-8"?>
<class name="NormOps">
  <javadoc>
    <text>&lt;p&gt;
 * Norms are a measure of the size of a vector or a matrix.  One typical application is in error analysis.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Vector norms have the following properties:
 * &lt;ol&gt;
 * &lt;li&gt;||x|| &gt; 0 if x &amp;ne; 0 and ||0|| = 0&lt;/li&gt;
 * &lt;li&gt;||&amp;alpha;x|| = |&amp;alpha;| ||x||&lt;/li&gt;
 * &lt;li&gt;||x+y|| &amp;le; ||x|| + ||y||&lt;/li&gt;
 * &lt;/ol&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * Matrix norms have the following properties:
 * &lt;ol&gt;
 * &lt;li&gt;||A|| &gt; 0 if A &amp;ne; 0 where A &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt;&lt;/li&gt;
 * &lt;li&gt; || &amp;alpha; A || = |&amp;alpha;| ||A|| where A &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt;&lt;/li&gt;
 * &lt;li&gt;||A+B|| &amp;le; ||A|| + ||B|| where A and B are &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt;&lt;/li&gt;
 * &lt;li&gt;||AB|| &amp;le; ||A|| ||B|| where A and B are &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; m&lt;/sup&gt;&lt;/li&gt;
 * &lt;/ol&gt;
 * Note that the last item in the list only applies to square matrices.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Matrix norms can be induced from vector norms as is shown below:&lt;br&gt;
 * &lt;br&gt;
 * ||A||&lt;sub&gt;M&lt;/sub&gt; = max&lt;sub&gt;x&amp;ne;0&lt;/sub&gt;||Ax||&lt;sub&gt;v&lt;/sub&gt;/||x||&lt;sub&gt;v&lt;/sub&gt;&lt;br&gt;
 * &lt;br&gt;
 * where ||.||&lt;sub&gt;M&lt;/sub&gt; is the induced matrix norm for the vector norm ||.||&lt;sub&gt;v&lt;/sub&gt;.
 * &lt;/p&gt;
 * &lt;p&gt;
 * By default implementations that try to mitigate overflow/underflow are used.  If the word fast is
 * found before a function's name that means it does not mitigate those issues, but runs a bit faster.
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>Normalizes the matrix such that the Frobenius norm is equal to one.</text>
    <param>A The matrix that is to be normalized.</param>
  </javadoc>
  <method type="void" name="normalizeF">
    <declaration type="double" name="val" />
    <declaration type="int" name="size" />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * The condition number of a matrix is used to measure the sensitivity of the linear
 * system &lt;b&gt;Ax=b&lt;/b&gt;.  A value near one indicates that it is a well conditioned matrix.&lt;br&gt;
 * &lt;br&gt;
 * &amp;kappa;&lt;sub&gt;p&lt;/sub&gt; = ||A||&lt;sub&gt;p&lt;/sub&gt;||A&lt;sup&gt;-1&lt;/sup&gt;||&lt;sub&gt;p&lt;/sub&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * If the matrix is not square then the condition of either A&lt;sup&gt;T&lt;/sup&gt;A or AA&lt;sup&gt;T&lt;/sup&gt; is computed. 
 * &lt;p&gt;</text>
    <param>A The matrix.</param>
    <param>p p-norm</param>
    <return>The condition number.</return>
  </javadoc>
  <method type="double" name="conditionP">
    <scope />
    <scope>
      <declaration type="DenseMatrix64F" name="A_inv" />
    </scope>
    <scope>
      <declaration type="DenseMatrix64F" name="pinv" />
    </scope>
    <comment>square matrices are the typical case</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * The condition p = 2 number of a matrix is used to measure the sensitivity of the linear
 * system &lt;b&gt;Ax=b&lt;/b&gt;.  A value near one indicates that it is a well conditioned matrix.&lt;br&gt;
 * &lt;br&gt;
 * &amp;kappa;&lt;sub&gt;2&lt;/sub&gt; = ||A||&lt;sub&gt;2&lt;/sub&gt;||A&lt;sup&gt;-1&lt;/sup&gt;||&lt;sub&gt;2&lt;/sub&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * This is also known as the spectral condition number.
 * &lt;/p&gt;</text>
    <param>A The matrix.</param>
    <return>The condition number.</return>
  </javadoc>
  <method type="double" name="conditionP2">
    <declaration type="SingularValueDecomposition&lt;DenseMatrix64F&gt;" name="svd" />
    <declaration type="double[]" name="singularValues" />
    <declaration type="int" name="n" />
    <declaration type="double" name="smallest" />
    <declaration type="double" name="largest" />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * This implementation of the Frobenius norm is a straight forward implementation and can
 * be susceptible for overflow/underflow issues.  A more resilient implementation is{@link #normF}.
 * &lt;/p&gt;</text>
    <param>a The matrix whose norm is computed.  Not modified.</param>
  </javadoc>
  <method type="double" name="fastNormF">
    <declaration type="double" name="total" />
    <declaration type="int" name="size" />
    <scope>
      <declaration type="double" name="val" />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Computes the Frobenius matrix norm:&lt;br&gt;
 * &lt;br&gt;
 * normF = Sqrt{  &amp;sum;&lt;sub&gt;i=1:m&lt;/sub&gt; &amp;sum;&lt;sub&gt;j=1:n&lt;/sub&gt; { a&lt;sub&gt;ij&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt;}   }
 * &lt;/p&gt;
 * &lt;p&gt;
 * This is equivalent to the element wise p=2 norm.  See {@link #fastNormF} for another implementation
 * that is faster, but more prone to underflow/overflow errors.
 * &lt;/p&gt;</text>
    <param>a The matrix whose norm is computed.  Not modified.</param>
    <return>The norm's value.</return>
  </javadoc>
  <method type="double" name="normF">
    <declaration type="double" name="total" />
    <declaration type="double" name="scale" />
    <declaration type="int" name="size" />
    <scope>
      <declaration type="double" name="val" />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Element wise p-norm:&lt;br&gt;
 * &lt;br&gt;
 * norm = {&amp;sum;&lt;sub&gt;i=1:m&lt;/sub&gt; &amp;sum;&lt;sub&gt;j=1:n&lt;/sub&gt; { |a&lt;sub&gt;ij&lt;/sub&gt;|&lt;sup&gt;p&lt;/sup&gt;}}&lt;sup&gt;1/p&lt;/sup&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * This is not the same as the induced p-norm used on matrices, but is the same as the vector p-norm.
 * &lt;/p&gt;</text>
    <param>A Matrix. Not modified.</param>
    <param>p p value.</param>
    <return>The norm's value.</return>
  </javadoc>
  <method type="double" name="elementP">
    <scope />
    <scope />
    <scope>
      <declaration type="double" name="max" />
      <declaration type="double" name="total" />
      <declaration type="int" name="size" />
      <scope>
        <declaration type="double" name="a" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Same as {@link #elementP} but runs faster by not mitigating overflow/underflow related problems.</text>
    <param>A Matrix. Not modified.</param>
    <param>p p value.</param>
    <return>The norm's value.</return>
  </javadoc>
  <method type="double" name="fastElementP">
    <scope />
    <scope>
      <declaration type="double" name="total" />
      <declaration type="int" name="size" />
      <scope>
        <declaration type="double" name="a" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Computes either the vector p-norm or the induced matrix p-norm depending on A
 * being a vector or a matrix respectively.</text>
    <param>A Vector or matrix whose norm is to be computed.</param>
    <param>p The p value of the p-norm.</param>
    <return>The computed norm.</return>
  </javadoc>
  <method type="double" name="normP">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>An unsafe but faster version of {@link #normP} that calls routines which are faster
 * but more prone to overflow/underflow problems.</text>
    <param>A Vector or matrix whose norm is to be computed.</param>
    <param>p The p value of the p-norm.</param>
    <return>The computed norm.</return>
  </javadoc>
  <method type="double" name="fastNormP">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Computes the p=1 norm.  If A is a matrix then the induced norm is computed.</text>
    <param>A Matrix or vector.</param>
    <return>The norm.</return>
  </javadoc>
  <method type="double" name="normP1">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Computes the p=2 norm.  If A is a matrix then the induced norm is computed.</text>
    <param>A Matrix or vector.</param>
    <return>The norm.</return>
  </javadoc>
  <method type="double" name="normP2">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Computes the p=2 norm.  If A is a matrix then the induced norm is computed. This
 * implementation is faster, but more prone to buffer overflow or underflow problems.</text>
    <param>A Matrix or vector.</param>
    <return>The norm.</return>
  </javadoc>
  <method type="double" name="fastNormP2">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Computes the p=&amp;#8734; norm.  If A is a matrix then the induced norm is computed.</text>
    <param>A Matrix or vector.</param>
    <return>The norm.</return>
  </javadoc>
  <method type="double" name="normPInf">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Computes the induced p = 1 matrix norm.&lt;br&gt;
 * &lt;br&gt;
 * ||A||&lt;sub&gt;1&lt;/sub&gt;= max(j=1 to n; sum(i=1 to m; |a&lt;sub&gt;ij&lt;/sub&gt;|))
 * &lt;/p&gt;</text>
    <param>A Matrix. Not modified.</param>
    <return>The norm.</return>
  </javadoc>
  <method type="double" name="inducedP1">
    <declaration type="double" name="max" />
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <scope>
      <declaration type="double" name="total" />
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Computes the induced p = 2 matrix norm, which is the largest singular value.
 * &lt;/p&gt;</text>
    <param>A Matrix. Not modified.</param>
    <return>The norm.</return>
  </javadoc>
  <method type="double" name="inducedP2">
    <declaration type="SingularValueDecomposition&lt;DenseMatrix64F&gt;" name="svd" />
    <declaration type="double[]" name="singularValues" />
    <comment>the largest singular value is the induced p2 norm</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Induced matrix p = infinity norm.&lt;br&gt;
 * &lt;br&gt;
 * ||A||&lt;sub&gt;&amp;#8734;&lt;/sub&gt; = max(i=1 to m; sum(j=1 to n; |a&lt;sub&gt;ij&lt;/sub&gt;|))
 * &lt;/p&gt;</text>
    <param>A A matrix.</param>
    <return>the norm.</return>
  </javadoc>
  <method type="double" name="inducedPInf">
    <declaration type="double" name="max" />
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <scope>
      <declaration type="double" name="total" />
      <scope />
      <scope />
    </scope>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
