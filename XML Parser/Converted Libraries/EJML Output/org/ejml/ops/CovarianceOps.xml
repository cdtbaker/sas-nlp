<?xml version="1.0" encoding="UTF-8"?>
<class name="CovarianceOps">
  <javadoc>
    <text>Contains operations specific to covariance matrices.</text>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="double" name="TOL" />
  <javadoc>
    <text>This is a fairly light weight check to see of a covariance matrix is valid.
 * It checks to see if the diagonal elements are all positive, which they should be
 * if it is valid.  Not all invalid covariance matrices will be caught by this method.</text>
    <return>true if valid and false if invalid</return>
  </javadoc>
  <method type="boolean" name="isValidFast" />
  <javadoc>
    <text>Performs a variety of tests to see if the provided matrix is a valid
 * covariance matrix.</text>
    <return>0 = is valid 1 = failed positive diagonal, 2 = failed on symmetry, 2 = failed on positive definite</return>
  </javadoc>
  <method type="int" name="isValid" />
  <javadoc>
    <text>Performs a matrix inversion operations that takes advantage of the special
 * properties of a covariance matrix.</text>
    <param>cov On input it is a covariance matrix, on output it is the inverse.  Modified.</param>
    <return>true if it could invert the matrix false if it could not.</return>
  </javadoc>
  <method type="boolean" name="invert" />
  <javadoc>
    <text>Performs a matrix inversion operations that takes advantage of the special
 * properties of a covariance matrix.</text>
    <param>cov A covariance matrix. Not modified.</param>
    <param>cov_inv The inverse of cov.  Modified.</param>
    <return>true if it could invert the matrix false if it could not.</return>
  </javadoc>
  <method type="boolean" name="invert">
    <scope>
      <scope />
    </scope>
    <scope>
      <declaration type="LinearSolver&lt;DenseMatrix64F&gt;" name="solver" />
    </scope>
    <comment>wrap it to make sure the covariance is not modified.</comment>
  </method>
  <javadoc>
    <text>Sets vector to a random value based upon a zero-mean multivariate Gaussian distribution with
 * covariance 'cov'.  If repeat calls are made to this class, consider using {@link CovarianceRandomDraw} instead.</text>
    <param>cov The distirbutions covariance.  Not modified.</param>
    <param>vector The random vector. Modified.</param>
    <param>rand Random number generator.</param>
  </javadoc>
  <method type="void" name="randomVector">
    <declaration type="CovarianceRandomDraw" name="rng" />
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
