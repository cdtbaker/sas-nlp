<?xml version="1.0" encoding="UTF-8"?>
<class name="BlockQrHouseHolderSolver">
  <javadoc>
    <text>&lt;p&gt;
 * A solver for {@link BlockMatrix64HouseholderQR}.  Systems are solved for using the standard
 * QR decomposition method, sketched below.
 * &lt;/p&gt;
 * &lt;p&gt;
 * A = Q*R&lt;br&gt;
 * A*x = b&lt;br&gt;
 * Q*R*x = b &lt;br&gt;
 * R*x = y = Q&lt;sup&gt;T&lt;/sup&gt;b&lt;br&gt;
 * x = R&lt;sup&gt;-1&lt;/sup&gt;y&lt;br&gt;
 * &lt;br&gt;
 * Where A is the m by n matrix being decomposed. Q is an orthogonal matrix. R is upper triangular matrix.
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="BlockMatrix64HouseholderQR" name="decomp" />
  <declaration type="BlockMatrix64F" name="QR" />
  <method type="constructor" name="BlockQrHouseHolderSolver" />
  <javadoc>
    <text>Computes the QR decomposition of A and store the results in A.</text>
    <param>A The A matrix in the linear equation. Modified. Reference saved.</param>
    <return>true if the decomposition was successful.</return>
  </javadoc>
  <method type="boolean" name="setA" />
  <javadoc>
    <text>Computes the quality using diagonal elements the triangular R matrix in the QR decomposition.</text>
    <return>Solutions quality.</return>
  </javadoc>
  <method type="double" name="quality" />
  <method type="void" name="solve">
    <declaration type="int" name="M" />
    <comment>The system being solved for can be described as:</comment>
    <comment>Q*R*X = B</comment>
    <comment>First apply householder reflectors to B</comment>
    <comment>Y = Q^T*B</comment>
    <comment>Second solve for Y using the upper triangle matrix R and the just computed Y</comment>
    <comment>X = R^-1 * Y</comment>
    <comment>extract a block aligned matrix</comment>
  </method>
  <javadoc>
    <text>Invert by solving for against an identity matrix.</text>
    <param>A_inv Where the inverted matrix saved. Modified.</param>
  </javadoc>
  <method type="void" name="invert">
    <declaration type="int" name="M" />
    <comment>Solve for A^-1</comment>
    <comment>Q*R*A^-1 = I</comment>
    <comment>Apply householder reflectors to the identity matrix</comment>
    <comment>y = Q^T*I = Q^T</comment>
    <comment>Solve using upper triangular R matrix</comment>
    <comment>R*A^-1 = y</comment>
    <comment>A^-1 = R^-1*y</comment>
  </method>
  <method type="boolean" name="modifiesA" />
  <method type="boolean" name="modifiesB" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>QR decomposition algorithm</comment>
  <comment>the input matrix which has been decomposed</comment>
</class>
