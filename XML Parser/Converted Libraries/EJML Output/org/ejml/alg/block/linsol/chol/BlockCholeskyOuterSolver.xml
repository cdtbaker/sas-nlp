<?xml version="1.0" encoding="UTF-8"?>
<class name="BlockCholeskyOuterSolver">
  <javadoc>
    <text>&lt;p&gt; Linear solver that uses a block cholesky decomposition. &lt;/p&gt;
 * &lt;p&gt;
 * Solver works by using the standard Cholesky solving strategy:&lt;br&gt;
 * A=L*L&lt;sup&gt;T&lt;/sup&gt; &lt;br&gt;
 * A*x=b&lt;br&gt;
 * L*L&lt;sup&gt;T&lt;/sup&gt;*x = b &lt;br&gt;
 * L*y = b&lt;br&gt;
 * L&lt;sup&gt;T&lt;/sup&gt;*x = y&lt;br&gt;
 * x = L&lt;sup&gt;-T&lt;/sup&gt;y
 * &lt;/p&gt;
 * &lt;p&gt;
 * It is also possible to use the upper triangular cholesky decomposition.
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="BlockCholeskyOuterForm" name="chol" />
  <declaration type="int" name="blockLength" />
  <declaration type="double" name="temp" />
  <javadoc>
    <text>Decomposes and overwrites the input matrix.</text>
    <param>A Semi-Positive Definite (SPD) system matrix. Modified. Reference saved.</param>
    <return>If the matrix can be decomposed.  Will always return false of not SPD.</return>
  </javadoc>
  <method type="boolean" name="setA">
    <comment>Extract a lower triangular solution</comment>
  </method>
  <method type="double" name="quality" />
  <javadoc>
    <text>If X == null then the solution is written into B.  Otherwise the solution is copied
 * from B into X.</text>
  </javadoc>
  <method type="void" name="solve">
    <declaration type="D1Submatrix64F" name="L" />
    <scope />
    <scope />
    <comment>L * L^T*X = B</comment>
    <comment>Solve for Y:  L*Y = B</comment>
    <comment>L^T * X = Y</comment>
    <comment>copy the solution from B into X</comment>
  </method>
  <method type="void" name="invert">
    <declaration type="BlockMatrix64F" name="T" />
    <declaration type="D1Submatrix64F" name="L" />
    <declaration type="D1Submatrix64F" name="B" />
    <comment>zero the upper triangular portion of A_inv</comment>
    <comment>invert L from cholesky decomposition and write the solution into the lower</comment>
    <comment>triangular portion of A_inv</comment>
    <comment>B = inv(L)</comment>
    <comment>B = L^-T * B</comment>
    <comment>todo could speed up by taking advantage of B being lower triangular</comment>
    <comment>todo take advantage of symmetry</comment>
  </method>
  <method type="boolean" name="modifiesA" />
  <method type="boolean" name="modifiesB" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>cholesky decomposition</comment>
  <comment>size of a block take from input matrix</comment>
  <comment>temporary data structure used in some calculation.</comment>
</class>
