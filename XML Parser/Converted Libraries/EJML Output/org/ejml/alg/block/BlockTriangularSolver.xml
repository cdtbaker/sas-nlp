<?xml version="1.0" encoding="UTF-8"?>
<class name="BlockTriangularSolver">
  <javadoc>
    <text>&lt;p&gt;
 * Contains triangular solvers for {@link org.ejml.data.BlockMatrix64F} block aligned sub-matrices.
 * &lt;/p&gt;
 * &lt;p&gt;
 * For a more detailed description of a similar algorithm see:
 * Page 30 in "Fundamentals of Matrix Computations" 2nd Ed. by David S. Watkins
 * or any description of a block triangular solver in any other computational linear algebra book.
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>Inverts an upper or lower triangular block submatrix.</text>
    <param>blockLength</param>
    <param>upper Is it upper or lower triangular.</param>
    <param>T Triangular matrix that is to be inverted.  Must be block aligned.  Not Modified.</param>
    <param>T_inv Where the inverse is stored.  This can be the same as T.  Modified.</param>
    <param>temp Work space variable that is size blockLength*blockLength.</param>
  </javadoc>
  <method type="void" name="invert">
    <declaration type="int" name="M" />
    <declaration type="double[]" name="dataT" />
    <declaration type="double[]" name="dataX" />
    <declaration type="int" name="offsetT" />
    <scope>
      <declaration type="int" name="heightT" />
      <declaration type="int" name="indexII" />
      <scope>
        <declaration type="int" name="widthX" />
        <scope />
        <scope>
          <declaration type="int" name="widthT" />
          <declaration type="int" name="indexL" />
          <declaration type="int" name="indexX" />
        </scope>
        <declaration type="int" name="indexX" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Inverts an upper or lower triangular block submatrix.</text>
    <param>blockLength</param>
    <param>upper Is it upper or lower triangular.</param>
    <param>T Triangular matrix that is to be inverted.  Overwritten with solution.  Modified.</param>
    <param>temp Work space variable that is size blockLength*blockLength.</param>
  </javadoc>
  <method type="void" name="invert">
    <declaration type="int" name="M" />
    <declaration type="double[]" name="dataT" />
    <declaration type="int" name="offsetT" />
    <scope>
      <declaration type="int" name="heightT" />
      <declaration type="int" name="indexII" />
      <scope>
        <declaration type="int" name="widthX" />
        <scope />
        <scope>
          <declaration type="int" name="widthT" />
          <declaration type="int" name="indexL" />
          <declaration type="int" name="indexX" />
        </scope>
        <declaration type="int" name="indexX" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Performs an in-place solve operation on the provided block aligned sub-matrices.&lt;br&gt;
 * &lt;br&gt;
 * B = T&lt;sup&gt;-1&lt;/sup&gt; B&lt;br&gt;
 * &lt;br&gt;
 * where T is a triangular matrix. T or B can be transposed.  T is a square matrix of arbitrary
 * size and B has the same number of rows as T and an arbitrary number of columns.
 * &lt;/p&gt;</text>
    <param>blockLength Size of the inner blocks.</param>
    <param>upper If T is upper or lower triangular.</param>
    <param>T An upper or lower triangular matrix. Not modified.</param>
    <param>B A matrix whose height is the same as T's width. Solution is written here. Modified.</param>
  </javadoc>
  <method type="void" name="solve">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Performs an in-place solve operation where T is contained in a single block.&lt;br&gt;
 * &lt;br&gt;
 * B = T&lt;sup&gt;-1&lt;/sup&gt; B&lt;br&gt;
 * &lt;br&gt;
 * where T is a triangular matrix contained in an inner block. T or B can be transposed.  T must be a single complete inner block
 * and B is either a column block vector or row block vector.
 * &lt;/p&gt;</text>
    <param>blockLength Size of the inner blocks in the block matrix.</param>
    <param>upper If T is upper or lower triangular.</param>
    <param>T An upper or lower triangular matrix that is contained in an inner block. Not modified.</param>
    <param>B A block aligned row or column submatrix. Modified.</param>
    <param>transT If T is transposed or not.</param>
    <param>transB If B is transposed or not.</param>
  </javadoc>
  <method type="void" name="solveBlock">
    <declaration type="int" name="Trows" />
    <declaration type="int" name="blockT_rows" />
    <declaration type="int" name="blockT_cols" />
    <declaration type="int" name="offsetT" />
    <declaration type="double[]" name="dataT" />
    <declaration type="double[]" name="dataB" />
    <scope>
      <scope>
        <scope />
        <scope />
      </scope>
      <scope>
        <scope />
        <scope>
          <scope>
            <declaration type="int" name="N" />
            <declaration type="int" name="offsetB" />
          </scope>
        </scope>
      </scope>
    </scope>
    <scope>
      <scope>
        <scope>
          <scope>
            <declaration type="int" name="offsetB" />
            <declaration type="int" name="N" />
          </scope>
        </scope>
        <scope>
          <scope>
            <declaration type="int" name="offsetB" />
            <declaration type="int" name="N" />
          </scope>
        </scope>
      </scope>
      <scope>
        <scope>
          <scope>
            <declaration type="int" name="offsetB" />
            <declaration type="int" name="N" />
          </scope>
        </scope>
        <scope>
          <scope>
            <declaration type="int" name="offsetB" />
            <declaration type="int" name="N" />
          </scope>
        </scope>
      </scope>
    </scope>
    <comment>number of rows in a block.  The submatrix can be smaller than a block</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Solves lower triangular systems:&lt;br&gt;
 * &lt;br&gt;
 * B = L&lt;sup&gt;-1&lt;/sup&gt; B&lt;br&gt;
 * &lt;br&gt;
 * &lt;/p&gt;
 * &lt;p&gt; Reverse or forward substitution is used depending upon L being transposed or not. &lt;/p&gt;</text>
    <param>blockLength</param>
    <param>L Lower triangular with dimensions m by m.  Not modified.</param>
    <param>B A matrix with dimensions m by n.  Solution is written into here. Modified.</param>
    <param>transL Is the triangular matrix transposed?</param>
  </javadoc>
  <method type="void" name="solveL">
    <declaration type="D1Submatrix64F" name="Y" />
    <declaration type="D1Submatrix64F" name="Linner" />
    <declaration type="D1Submatrix64F" name="Binner" />
    <declaration type="int" name="lengthL" />
    <declaration type="int" name="startI" />
    <scope />
    <scope />
    <scope>
      <scope />
      <scope />
      <declaration type="int" name="widthT" />
      <declaration type="boolean" name="updateY" />
      <scope />
      <scope />
      <scope>
        <scope />
        <scope />
        <scope>
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>width and height of the inner T(i,i) block</comment>
    <comment>solve the top row block</comment>
    <comment>B(i,:) = T(i,i)^-1 Y(i,:)</comment>
    <comment>Y[i,:] = Y[i,:] - sum j=1:i-1 { T[i,j] B[j,i] }</comment>
    <comment>where i is the next block down</comment>
    <comment>The summation is a block inner product</comment>
    <comment>Tinner.col1 = Tinner.col1;</comment>
    <comment>Binner.row0 = Binner.row0;</comment>
    <comment>Tinner.col1 = Tinner.col1;</comment>
    <comment>Binner.row1 = Binner.row1;</comment>
    <comment>step through each block column</comment>
    <comment>Y = Y - T^T * B</comment>
    <comment>Y = Y - T * B</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Solves upper triangular systems:&lt;br&gt;
 * &lt;br&gt;
 * B = R&lt;sup&gt;-1&lt;/sup&gt; B&lt;br&gt;
 * &lt;br&gt;
 * &lt;/p&gt;
 * &lt;p&gt;Only the first B.numRows rows in R will be processed.  Lower triangular elements are ignored.&lt;p&gt;
 * &lt;p&gt; Reverse or forward substitution is used depending upon L being transposed or not. &lt;/p&gt;</text>
    <param>blockLength</param>
    <param>R Upper triangular with dimensions m by m.  Not modified.</param>
    <param>B A matrix with dimensions m by n.  Solution is written into here. Modified.</param>
    <param>transR Is the triangular matrix transposed?</param>
  </javadoc>
  <method type="void" name="solveR">
    <declaration type="int" name="lengthR" />
    <scope />
    <scope />
    <declaration type="D1Submatrix64F" name="Y" />
    <declaration type="D1Submatrix64F" name="Rinner" />
    <declaration type="D1Submatrix64F" name="Binner" />
    <declaration type="int" name="startI" />
    <scope />
    <scope />
    <scope>
      <scope />
      <scope />
      <declaration type="int" name="widthT" />
      <declaration type="boolean" name="updateY" />
      <scope />
      <scope />
      <scope>
        <scope />
        <scope />
        <scope>
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>width and height of the inner T(i,i) block</comment>
    <comment>solve the top row block</comment>
    <comment>B(i,:) = T(i,i)^-1 Y(i,:)</comment>
    <comment>Y[i,:] = Y[i,:] - sum j=1:i-1 { T[i,j] B[j,i] }</comment>
    <comment>where i is the next block down</comment>
    <comment>The summation is a block inner product</comment>
    <comment>Rinner.row1 = Rinner.row1;</comment>
    <comment>Binner.row1 = Binner.row1;</comment>
    <comment>Binner.row0 = Binner.row0;</comment>
    <comment>step through each block column</comment>
    <comment>Y = Y - T^T * B</comment>
    <comment>Y = Y - T * B</comment>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
