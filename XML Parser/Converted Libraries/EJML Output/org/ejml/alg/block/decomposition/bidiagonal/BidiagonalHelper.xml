<?xml version="1.0" encoding="UTF-8"?>
<class name="BidiagonalHelper">
  <javadoc>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>Performs a standard bidiagonal decomposition just on the outer blocks of the provided matrix</text>
    <param>blockLength</param>
    <param>A</param>
    <param>gammasU</param>
  </javadoc>
  <method type="boolean" name="bidiagOuterBlocks">
    <declaration type="int" name="width" />
    <declaration type="int" name="height" />
    <declaration type="int" name="min" />
    <scope />
    <comment>System.out.println("---------- Orig");</comment>
    <comment>A.original.print();</comment>
    <comment>--- Apply reflector to the column</comment>
    <comment>compute the householder vector</comment>
    <comment>apply to rest of the columns in the column block</comment>
    <comment>apply to the top row block</comment>
    <comment>-- Apply reflector to the row</comment>
    <comment>apply to rest of the rows in the row block</comment>
    <comment>apply to the left column block</comment>
    <comment>TODO THIS WON'T WORK!!!!!!!!!!!!!</comment>
    <comment>Needs the whole matrix to have been updated by the left reflector to compute the correct solution</comment>
    <comment>rank1UpdateMultL_LeftCol(blockLength,A,i,i+1,gammasV[A.row0+i]);</comment>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
