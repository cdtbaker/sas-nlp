<?xml version="1.0" encoding="UTF-8"?>
<class name="BlockCholeskyOuterForm">
  <javadoc>
    <text>&lt;p&gt;
 * Block Cholesky using outer product form.  The original matrix is stored and modified.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Based on the description provided in "Fundamentals of Matrix Computations" 2nd Ed. by David S. Watkins.
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="boolean" name="lower" />
  <declaration type="BlockMatrix64F" name="T" />
  <javadoc>
    <text>Creates a new BlockCholeskyOuterForm</text>
    <param>lower Should it decompose it into a lower triangular matrix or not.</param>
  </javadoc>
  <method type="constructor" name="BlockCholeskyOuterForm" />
  <javadoc>
    <text>Decomposes the provided matrix and stores the result in the same matrix.</text>
    <param>A Matrix that is to be decomposed.  Modified.</param>
    <return>If it succeeded or not.</return>
  </javadoc>
  <method type="boolean" name="decompose" />
  <method type="boolean" name="decomposeLower">
    <declaration type="int" name="blockLength" />
    <declaration type="D1Submatrix64F" name="subA" />
    <declaration type="D1Submatrix64F" name="subB" />
    <declaration type="D1Submatrix64F" name="subC" />
    <scope>
      <declaration type="int" name="widthA" />
      <scope />
    </scope>
    <comment>cholesky on inner block A</comment>
    <comment>on the last block these operations are not needed.</comment>
    <comment>B = L^-1 B</comment>
    <comment>C = C - B * B^T</comment>
  </method>
  <method type="boolean" name="decomposeUpper">
    <declaration type="int" name="blockLength" />
    <declaration type="D1Submatrix64F" name="subA" />
    <declaration type="D1Submatrix64F" name="subB" />
    <declaration type="D1Submatrix64F" name="subC" />
    <scope>
      <declaration type="int" name="widthA" />
      <scope />
    </scope>
    <comment>cholesky on inner block A</comment>
    <comment>on the last block these operations are not needed.</comment>
    <comment>B = U^-1 B</comment>
    <comment>C = C - B^T * B</comment>
  </method>
  <method type="boolean" name="isLower" />
  <method type="BlockMatrix64F" name="getT" />
  <method type="boolean" name="inputModified" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>if it should compute an upper or lower triangular matrix</comment>
  <comment>The decomposed matrix.</comment>
</class>
