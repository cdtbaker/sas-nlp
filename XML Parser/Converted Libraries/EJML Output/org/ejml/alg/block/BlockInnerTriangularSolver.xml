<?xml version="1.0" encoding="UTF-8"?>
<class name="BlockInnerTriangularSolver">
  <javadoc>
    <text>&lt;p&gt;
 * Contains triangular solvers for inner blocks of a {@link org.ejml.data.BlockMatrix64F}.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Algorithm for lower triangular inverse:&lt;br&gt;
 * &lt;pre&gt;
 * for i=1:m
 * for j=1:i-1
 * val = 0
 * for k=j:i-1
 * val = val - L(i,k) * X(k,j)
 * end
 * x(i,j) = val / L(i,i)
 * end
 * x(i,i) = 1 / L(i,i)
 * end
 * &lt;/pre&gt; 
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>&lt;p&gt;
 * Inverts a square lower triangular matrix:  L = L&lt;sup&gt;-1&lt;/sup&gt;
 * &lt;/p&gt;</text>
    <param>L Lower triangular matrix being inverted. Not modified.</param>
    <oaran>K_inv Where the inverse is stored.  Can be the same as L.  Modified.</oaran>
    <param>m The number of rows and columns.</param>
    <param>offsetL which index does the L matrix start at.</param>
    <param>offsetL_inv which index does the L_inv matrix start at.</param>
  </javadoc>
  <method type="void" name="invertLower">
    <scope>
      <declaration type="double" name="L_ii" />
      <scope>
        <declaration type="double" name="val" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Inverts a square lower triangular matrix:  L = L&lt;sup&gt;-1&lt;/sup&gt;
 * &lt;/p&gt;</text>
    <param>L Lower triangular matrix being inverted. Over written with inverted matrix.  Modified.</param>
    <param>m The number of rows and columns.</param>
    <param>offsetL which index does the L matrix start at.</param>
  </javadoc>
  <method type="void" name="invertLower">
    <scope>
      <declaration type="double" name="L_ii" />
      <scope>
        <declaration type="double" name="val" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Solves for non-singular lower triangular matrices using forward substitution.
 * &lt;br&gt;
 * B = L&lt;sup&gt;-1&lt;/sup&gt;B&lt;br&gt;
 * &lt;br&gt;
 * where B is a (m by n) matrix, L is a lower triangular (m by m) matrix.
 * &lt;/p&gt;</text>
    <param>L An m by m non-singular lower triangular matrix. Not modified.</param>
    <param>b An m by n matrix. Modified.</param>
    <param>m size of the L matrix</param>
    <param>n number of columns in the B matrix.</param>
    <param>strideL number of elements that need to be added to go to the next row in L</param>
    <param>offsetL initial index in L where the matrix starts</param>
    <param>offsetB initial index in B where the matrix starts</param>
  </javadoc>
  <method type="void" name="solveL">
    <scope>
      <scope>
        <declaration type="double" name="sum" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Solves for non-singular transposed lower triangular matrices using backwards substitution:
 * &lt;br&gt;
 * B = L&lt;sup&gt;-T&lt;/sup&gt;B&lt;br&gt;
 * &lt;br&gt;
 * where B is a (m by n) matrix, L is a lower triangular (m by m) matrix.
 * &lt;/p&gt;</text>
    <param>L An m by m non-singular lower triangular matrix. Not modified.</param>
    <param>b An m by n matrix. Modified.</param>
    <param>m size of the L matrix</param>
    <param>n number of columns in the B matrix.</param>
    <param>strideL number of elements that need to be added to go to the next row in L</param>
    <param>offsetL initial index in L where the matrix starts</param>
    <param>offsetB initial index in B where the matrix starts</param>
  </javadoc>
  <method type="void" name="solveTransL">
    <scope>
      <scope>
        <declaration type="double" name="sum" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Solves for non-singular lower triangular matrices using forward substitution.
 * &lt;br&gt;
 * B&lt;sup&gt;T&lt;/sup&gt; = L&lt;sup&gt;-1&lt;/sup&gt;B&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
 * &lt;br&gt;
 * where B is a (n by m) matrix, L is a lower triangular (m by m) matrix.
 * &lt;/p&gt;</text>
    <param>L An m by m non-singular lower triangular matrix. Not modified.</param>
    <param>b An n by m matrix. Modified.</param>
    <param>m size of the L matrix</param>
    <param>n number of columns in the B matrix.</param>
    <param>offsetL initial index in L where the matrix starts</param>
    <param>offsetB initial index in B where the matrix starts</param>
  </javadoc>
  <method type="void" name="solveLTransB">
    <scope>
      <scope>
        <declaration type="double" name="sum" />
        <declaration type="int" name="l" />
        <declaration type="int" name="bb" />
        <declaration type="int" name="endL" />
        <scope />
      </scope>
    </scope>
    <comment>for( int j = 0; j &lt; n; j++ ) {</comment>
    <comment>for( int i = 0; i &lt; m; i++ ) {</comment>
    <comment>double sum = b[offsetB + j*m+i];</comment>
    <comment>for( int k=0; k&lt;i; k++ ) {</comment>
    <comment>sum -= L[offsetL + i*m+k]* b[offsetB + j*m+k];</comment>
    <comment>}</comment>
    <comment>b[offsetB + j*m+i] = sum / L[offsetL + i*m+i];</comment>
    <comment>}</comment>
    <comment>}</comment>
    <comment>for( int k=0; k&lt;i; k++ ) {</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Solves for non-singular upper triangular matrices using backwards substitution.
 * &lt;br&gt;
 * B = U&lt;sup&gt;-1&lt;/sup&gt;B&lt;br&gt;
 * &lt;br&gt;
 * where B (m by n) is a matrix, U is a (m by m ) upper triangular matrix.&lt;br&gt;
 * &lt;/p&gt;</text>
    <param>U An m by m non-singular upper triangular matrix. Not modified.</param>
    <param>b An m by n matrix. Modified.</param>
    <param>m size of the L matrix</param>
    <paramUn>number of columns in the B matrix.</paramUn>
    <param>offsetU initial index in L where the matrix starts</param>
    <param>offsetB initial index in B where the matrix starts</param>
  </javadoc>
  <method type="void" name="solveU">
    <scope>
      <scope>
        <declaration type="double" name="sum" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Solves for non-singular upper triangular matrices using forward substitution.
 * &lt;br&gt;
 * B = U&lt;sup&gt;-T&lt;/sup&gt;B&lt;br&gt;
 * &lt;br&gt;
 * where B (m by n) is a matrix, U is a (m by m ) upper triangular matrix.&lt;br&gt;
 * &lt;/p&gt;</text>
    <param>U An m by m non-singular upper triangular matrix. Not modified.</param>
    <param>b An m by n matrix. Modified.</param>
    <param>m size of the L matrix</param>
    <paramUn>number of columns in the B matrix.</paramUn>
    <param>offsetU initial index in L where the matrix starts</param>
    <param>offsetB initial index in B where the matrix starts</param>
  </javadoc>
  <method type="void" name="solveTransU">
    <scope>
      <scope>
        <declaration type="double" name="sum" />
        <scope />
      </scope>
    </scope>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
