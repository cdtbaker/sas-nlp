<?xml version="1.0" encoding="UTF-8"?>
<class name="BlockVectorOps">
  <javadoc>
    <text>&lt;p&gt;
 * Math operations for inner vectors (row and column) inside of block matrices:&lt;br&gt;
 * &lt;br&gt;
 * scale: b&lt;sub&gt;i&lt;/sub&gt; = &amp;alpha;*a&lt;sub&gt;i&lt;/sub&gt;&lt;br&gt;
 * div:  &lt;sub&gt;i&lt;/sub&gt; = a&lt;sub&gt;i&lt;/sub&gt;/&amp;alpha;&lt;br&gt;
 * add: c&lt;sub&gt;i&lt;/sub&gt; = &amp;alpha;*a&lt;sub&gt;i&lt;/sub&gt; + &amp;beta;B&lt;sub&gt;i&lt;/sub&gt;&lt;br&gt;
 * dot: c = sum a&lt;sub&gt;i&lt;/sub&gt;*b&lt;sub&gt;i&lt;/sub&gt;&lt;br&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * All submatrices must be block aligned.  All offsets and end indexes are relative to the beginning of each
 * submatrix.
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>&lt;p&gt;
 * Row vector scale:&lt;br&gt;
 * scale: b&lt;sub&gt;i&lt;/sub&gt; = &amp;alpha;*a&lt;sub&gt;i&lt;/sub&gt;&lt;br&gt;
 * where 'a' and 'b' are row vectors within the row block vector A and B.
 * &lt;/p&gt;</text>
    <param>A submatrix. Not modified.</param>
    <param>rowA which row in A the vector is contained in.</param>
    <param>alpha scale factor.</param>
    <param>B submatrix that the results are written to.  Modified.</param>
    <param>offset Index at which the vectors start at.</param>
    <param>end Index at which the vectors end at.</param>
  </javadoc>
  <method type="void" name="scale_row">
    <declaration type="double[]" name="dataA" />
    <declaration type="double[]" name="dataB" />
    <declaration type="int" name="startI" />
    <declaration type="int" name="rowBlockA" />
    <declaration type="int" name="rowBlockB" />
    <declaration type="int" name="heightA" />
    <declaration type="int" name="heightB" />
    <scope>
      <declaration type="int" name="segment" />
      <declaration type="int" name="widthA" />
      <declaration type="int" name="widthB" />
      <declaration type="int" name="indexA" />
      <declaration type="int" name="indexB" />
      <scope>
        <scope />
      </scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>handle the case where offset is more than a block</comment>
    <comment>handle rows in any block</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Row vector divide:&lt;br&gt;
 * div: b&lt;sub&gt;i&lt;/sub&gt; = a&lt;sub&gt;i&lt;/sub&gt;/&amp;alpha;&lt;br&gt;
 * where 'a' and 'b' are row vectors within the row block vector A and B.
 * &lt;/p&gt;</text>
    <param>A submatrix. Not modified.</param>
    <param>rowA which row in A the vector is contained in.</param>
    <param>alpha scale factor.</param>
    <param>B submatrix that the results are written to.  Modified.</param>
    <param>offset Index at which the vectors start at.</param>
    <param>end Index at which the vectors end at.</param>
  </javadoc>
  <method type="void" name="div_row">
    <declaration type="double[]" name="dataA" />
    <declaration type="double[]" name="dataB" />
    <declaration type="int" name="startI" />
    <declaration type="int" name="rowBlockA" />
    <declaration type="int" name="rowBlockB" />
    <declaration type="int" name="heightA" />
    <declaration type="int" name="heightB" />
    <scope>
      <declaration type="int" name="segment" />
      <declaration type="int" name="widthA" />
      <declaration type="int" name="widthB" />
      <declaration type="int" name="indexA" />
      <declaration type="int" name="indexB" />
      <scope>
        <scope />
      </scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>handle the case where offset is more than a block</comment>
    <comment>handle rows in any block</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Row vector add:&lt;br&gt;
 * add: c&lt;sub&gt;i&lt;/sub&gt; = &amp;alpha;*a&lt;sub&gt;i&lt;/sub&gt; + &amp;beta;B&lt;sub&gt;i&lt;/sub&gt;&lt;br&gt;
 * where 'a', 'b', and 'c' are row vectors within the row block vectors of A, B, and C respectively.
 * &lt;/p&gt;</text>
    <param>blockLength Length of each inner matrix block.</param>
    <param>A submatrix. Not modified.</param>
    <param>rowA which row in A the vector is contained in.</param>
    <param>alpha scale factor of A</param>
    <param>B submatrix. Not modified.</param>
    <param>rowB which row in B the vector is contained in.</param>
    <param>beta scale factor of B</param>
    <param>C submatrix where the results are written to. Modified.</param>
    <param>rowC which row in C is the vector contained.</param>
    <param>offset Index at which the vectors start at.</param>
    <param>end Index at which the vectors end at.</param>
  </javadoc>
  <method type="void" name="add_row">
    <declaration type="int" name="heightA" />
    <declaration type="int" name="heightB" />
    <declaration type="int" name="heightC" />
    <declaration type="int" name="startI" />
    <declaration type="double[]" name="dataA" />
    <declaration type="double[]" name="dataB" />
    <declaration type="double[]" name="dataC" />
    <scope>
      <declaration type="int" name="segment" />
      <declaration type="int" name="widthA" />
      <declaration type="int" name="widthB" />
      <declaration type="int" name="widthC" />
      <declaration type="int" name="indexA" />
      <declaration type="int" name="indexB" />
      <declaration type="int" name="indexC" />
      <scope>
        <scope />
      </scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>handle the case where offset is more than a block</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Row vector dot/inner product:&lt;br&gt;
 * dot: c = sum a&lt;sub&gt;i&lt;/sub&gt;*b&lt;sub&gt;i&lt;/sub&gt;&lt;br&gt;
 * where 'a' and 'b' are row vectors within the row block vector A and B, and 'c' is a scalar.
 * &lt;/p&gt;</text>
    <param>A submatrix. Not modified.</param>
    <param>rowA which row in A the vector is contained in.</param>
    <param>B submatrix. Not modified.</param>
    <param>rowB which row in B the vector is contained in.</param>
    <param>offset Index at which the vectors start at.</param>
    <param>end Index at which the vectors end at.</param>
    <return>Results of the dot product.</return>
  </javadoc>
  <method type="double" name="dot_row">
    <declaration type="int" name="startI" />
    <declaration type="double[]" name="dataA" />
    <declaration type="double[]" name="dataB" />
    <declaration type="double" name="total" />
    <declaration type="int" name="rowBlockA" />
    <declaration type="int" name="rowBlockB" />
    <declaration type="int" name="heightA" />
    <declaration type="int" name="heightB" />
    <scope>
      <declaration type="int" name="segment" />
      <declaration type="int" name="widthA" />
      <declaration type="int" name="widthB" />
      <declaration type="int" name="indexA" />
      <declaration type="int" name="indexB" />
      <scope>
        <scope />
      </scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>handle the case where offset is more than a block</comment>
    <comment>handle rows in any block</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * vector dot/inner product from one row vector and one column vector:&lt;br&gt;
 * dot: c = sum a&lt;sub&gt;i&lt;/sub&gt;*b&lt;sub&gt;i&lt;/sub&gt;&lt;br&gt;
 * where 'a' is a row vector 'b' is a column vectors within the row block vector A and B, and 'c' is a scalar.
 * &lt;/p&gt;</text>
    <param>A block row vector. Not modified.</param>
    <param>rowA which row in A the vector is contained in.</param>
    <param>B block column vector. Not modified.</param>
    <param>colB which column in B is the vector contained in.</param>
    <param>offset Index at which the vectors start at.</param>
    <param>end Index at which the vectors end at.</param>
    <return>Results of the dot product.</return>
  </javadoc>
  <method type="double" name="dot_row_col">
    <declaration type="int" name="startI" />
    <declaration type="double[]" name="dataA" />
    <declaration type="double[]" name="dataB" />
    <declaration type="double" name="total" />
    <declaration type="int" name="rowBlockA" />
    <declaration type="int" name="colBlockB" />
    <declaration type="int" name="heightA" />
    <declaration type="int" name="widthB" />
    <scope>
      <declaration type="int" name="segment" />
      <declaration type="int" name="widthA" />
      <declaration type="int" name="heightB" />
      <declaration type="int" name="indexA" />
      <declaration type="int" name="indexB" />
      <scope>
        <scope />
      </scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>handle the case where offset is more than a block</comment>
    <comment>handle rows in any block</comment>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
