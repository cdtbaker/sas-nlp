<?xml version="1.0" encoding="UTF-8"?>
<class name="BlockMatrixOps">
  <javadoc>
    <text>Various operations on {@link BlockMatrix64F}.</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>Converts a row major matrix into a row major block matrix.</text>
    <param>src Original DenseMatrix64F.  Not modified.</param>
    <param>dst Equivalent BlockMatrix64F. Modified.</param>
  </javadoc>
  <method type="void" name="convert">
    <scope>
      <declaration type="int" name="blockHeight" />
      <scope>
        <declaration type="int" name="blockWidth" />
        <declaration type="int" name="indexDst" />
        <declaration type="int" name="indexSrcRow" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Converts matrix data stored is a row major format into a block row major format in place.
 * &lt;/p&gt;</text>
    <param>numRows number of rows in the matrix.</param>
    <param>numCols number of columns in the matrix.</param>
    <param>blockLength Block size in the converted matrix.</param>
    <param>data Matrix data in a row-major format. Modified.</param>
    <param>tmp Temporary data structure that is to be the size of a block row.</param>
  </javadoc>
  <method type="void" name="convertRowToBlock">
    <declaration type="int" name="minLength" />
    <scope />
    <scope>
      <declaration type="int" name="blockHeight" />
      <scope>
        <declaration type="int" name="blockWidth" />
        <declaration type="int" name="indexDst" />
        <declaration type="int" name="indexSrcRow" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Converts a row major block matrix into a row major matrix.</text>
    <param>src Original BlockMatrix64F..  Not modified.</param>
    <param>dst Equivalent DenseMatrix64F.  Modified.</param>
  </javadoc>
  <method type="DenseMatrix64F" name="convert">
    <scope />
    <scope />
    <scope>
      <declaration type="int" name="blockHeight" />
      <scope>
        <declaration type="int" name="blockWidth" />
        <declaration type="int" name="indexSrc" />
        <declaration type="int" name="indexDstRow" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Converts matrix data stored is a block row major format into a row major format in place.
 * &lt;/p&gt;</text>
    <param>numRows number of rows in the matrix.</param>
    <param>numCols number of columns in the matrix.</param>
    <param>blockLength Block size in the converted matrix.</param>
    <param>data Matrix data in a block row-major format. Modified.</param>
    <param>tmp Temporary data structure that is to be the size of a block row.</param>
  </javadoc>
  <method type="void" name="convertBlockToRow">
    <declaration type="int" name="minLength" />
    <scope />
    <scope>
      <declaration type="int" name="blockHeight" />
      <scope>
        <declaration type="int" name="blockWidth" />
        <declaration type="int" name="indexSrc" />
        <declaration type="int" name="indexDstRow" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Converts the transpose of a row major matrix into a row major block matrix.</text>
    <param>src Original DenseMatrix64F.  Not modified.</param>
    <param>dst Equivalent BlockMatrix64F. Modified.</param>
  </javadoc>
  <method type="void" name="convertTranSrc">
    <scope>
      <declaration type="int" name="blockHeight" />
      <scope>
        <declaration type="int" name="blockWidth" />
        <declaration type="int" name="indexDst" />
        <declaration type="int" name="indexSrc" />
        <scope>
          <declaration type="int" name="rowSrc" />
          <declaration type="int" name="rowDst" />
          <scope />
        </scope>
      </scope>
    </scope>
  </method>
  <method type="void" name="mult">
    <declaration type="int" name="blockLength" />
    <declaration type="D1Submatrix64F" name="Asub" />
    <declaration type="D1Submatrix64F" name="Bsub" />
    <declaration type="D1Submatrix64F" name="Csub" />
  </method>
  <method type="void" name="multTransA">
    <declaration type="int" name="blockLength" />
    <declaration type="D1Submatrix64F" name="Asub" />
    <declaration type="D1Submatrix64F" name="Bsub" />
    <declaration type="D1Submatrix64F" name="Csub" />
  </method>
  <method type="void" name="multTransB">
    <declaration type="int" name="blockLength" />
    <declaration type="D1Submatrix64F" name="Asub" />
    <declaration type="D1Submatrix64F" name="Bsub" />
    <declaration type="D1Submatrix64F" name="Csub" />
  </method>
  <javadoc>
    <text>Transposes a block matrix.</text>
    <param>A Original matrix.  Not modified.</param>
    <param>A_tran Transposed matrix.  Modified.</param>
  </javadoc>
  <method type="BlockMatrix64F" name="transpose">
    <scope />
    <scope />
    <scope>
      <declaration type="int" name="blockHeight" />
      <scope>
        <declaration type="int" name="blockWidth" />
        <declaration type="int" name="indexA" />
        <declaration type="int" name="indexC" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Transposes an individual block inside a block matrix.</text>
  </javadoc>
  <method type="void" name="transposeBlock">
    <scope>
      <declaration type="int" name="rowIndexC" />
      <declaration type="int" name="rowIndexA" />
      <declaration type="int" name="end" />
      <scope />
    </scope>
  </method>
  <method type="BlockMatrix64F" name="createRandom">
    <declaration type="BlockMatrix64F" name="ret" />
  </method>
  <method type="BlockMatrix64F" name="createRandom">
    <declaration type="BlockMatrix64F" name="ret" />
  </method>
  <method type="BlockMatrix64F" name="convert">
    <declaration type="BlockMatrix64F" name="ret" />
  </method>
  <method type="BlockMatrix64F" name="convert">
    <declaration type="BlockMatrix64F" name="ret" />
  </method>
  <method type="boolean" name="isEquals" />
  <method type="boolean" name="isEquals" />
  <javadoc>
    <text>Sets either the upper or low triangle of a matrix to zero</text>
  </javadoc>
  <method type="void" name="zeroTriangle">
    <declaration type="int" name="blockLength" />
    <scope>
      <scope>
        <declaration type="int" name="h" />
        <scope>
          <declaration type="int" name="w" />
          <declaration type="int" name="index" />
          <scope>
            <scope>
              <scope />
            </scope>
          </scope>
          <scope>
            <scope>
              <scope />
            </scope>
          </scope>
        </scope>
      </scope>
    </scope>
    <scope>
      <scope>
        <declaration type="int" name="h" />
        <scope>
          <declaration type="int" name="w" />
          <declaration type="int" name="index" />
          <scope>
            <scope>
              <declaration type="int" name="z" />
              <scope />
            </scope>
          </scope>
          <scope>
            <scope>
              <scope />
            </scope>
          </scope>
        </scope>
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Copies either the upper or lower triangular portion of src into dst.  Dst can be smaller
 * than src.</text>
    <param>upper If the upper or lower triangle is copied.</param>
    <param>src The source matrix. Not modified.</param>
    <param>dst The destination matrix. Modified.</param>
  </javadoc>
  <method type="void" name="copyTriangle">
    <declaration type="int" name="blockLength" />
    <declaration type="int" name="numRows" />
    <declaration type="int" name="numCols" />
    <scope>
      <scope>
        <declaration type="int" name="heightSrc" />
        <declaration type="int" name="heightDst" />
        <scope>
          <declaration type="int" name="widthSrc" />
          <declaration type="int" name="widthDst" />
          <declaration type="int" name="indexSrc" />
          <declaration type="int" name="indexDst" />
          <scope>
            <scope>
              <scope />
            </scope>
          </scope>
          <scope>
            <scope />
          </scope>
        </scope>
      </scope>
    </scope>
    <scope>
      <scope>
        <declaration type="int" name="heightSrc" />
        <declaration type="int" name="heightDst" />
        <scope>
          <declaration type="int" name="widthSrc" />
          <declaration type="int" name="widthDst" />
          <declaration type="int" name="indexSrc" />
          <declaration type="int" name="indexDst" />
          <scope>
            <scope>
              <declaration type="int" name="z" />
              <scope />
            </scope>
          </scope>
          <scope>
            <scope />
          </scope>
        </scope>
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Sets every element in the matrix to the specified value.&lt;br&gt;
 * &lt;br&gt;
 * a&lt;sub&gt;ij&lt;/sub&gt; = value
 * &lt;p&gt;</text>
    <param>A A matrix whose elements are about to be set. Modified.</param>
    <param>value The value each element will have.</param>
  </javadoc>
  <method type="void" name="set" />
  <javadoc>
    <text>&lt;p&gt;Sets the value of A to all zeros except along the diagonal.&lt;/p&gt;</text>
    <param>A Block matrix.</param>
  </javadoc>
  <method type="void" name="setIdentity">
    <declaration type="int" name="minLength" />
    <declaration type="int" name="blockLength" />
    <scope>
      <declaration type="int" name="h" />
      <declaration type="int" name="w" />
      <declaration type="int" name="index" />
      <declaration type="int" name="m" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;Converts the block matrix into a SimpleMatrix.&lt;/p&gt;</text>
    <param>A Block matrix that is being converted.  Not modified.</param>
    <return>Equivalent SimpleMatrix.</return>
  </javadoc>
  <method type="SimpleMatrix" name="convertSimple">
    <declaration type="DenseMatrix64F" name="B" />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Returns a new matrix with ones along the diagonal and zeros everywhere else.
 * &lt;/p&gt;</text>
    <param>numRows Number of rows.</param>
    <param>numCols NUmber of columns.</param>
    <param>blockLength Block length.</param>
    <return>An identify matrix.</return>
  </javadoc>
  <method type="BlockMatrix64F" name="identity">
    <declaration type="BlockMatrix64F" name="A" />
    <declaration type="int" name="minLength" />
    <scope>
      <declaration type="int" name="h" />
      <declaration type="int" name="w" />
      <declaration type="int" name="index" />
      <declaration type="int" name="m" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Checks to see if the two matrices have an identical shape an block size.
 * &lt;/p&gt;</text>
    <param>A Matrix.</param>
    <param>B Matrix.</param>
  </javadoc>
  <method type="void" name="checkIdenticalShape" />
  <javadoc>
    <text>&lt;p&gt;
 * Extracts a matrix from src into dst.  The submatrix which is copied has its initial coordinate
 * at (0,0) and ends at (dst.numRows,dst.numCols). The end rows/columns must be aligned along blocks
 * or else it will silently screw things up.
 * &lt;/p&gt;</text>
    <param>src Matrix which a submatrix is being extracted from. Not modified.</param>
    <param>dst Where the submatrix is written to.  Its rows and columns be less than or equal to 'src'.  Modified.</param>
  </javadoc>
  <method type="void" name="extractAligned">
    <declaration type="int" name="blockLength" />
    <declaration type="int" name="numRows" />
    <declaration type="int" name="numCols" />
    <scope>
      <declaration type="int" name="heightSrc" />
      <declaration type="int" name="heightDst" />
      <scope>
        <declaration type="int" name="widthSrc" />
        <declaration type="int" name="widthDst" />
        <declaration type="int" name="indexSrc" />
        <declaration type="int" name="indexDst" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Checks to see if the submatrix has its boundaries along inner blocks.</text>
    <param>blockLength Size of an inner block.</param>
    <param>A Submatrix.</param>
    <return>If it is block aligned or not.</return>
  </javadoc>
  <method type="boolean" name="blockAligned">
    <scope />
    <scope />
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>This can be speed up by inlining the multBlock* calls, reducing number of multiplications</comment>
  <comment>and other stuff.  doesn't seem to have any speed advantage over mult_reorder()</comment>
</class>
