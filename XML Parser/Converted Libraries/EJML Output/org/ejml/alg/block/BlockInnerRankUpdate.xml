<?xml version="1.0" encoding="UTF-8"?>
<class name="BlockInnerRankUpdate">
  <javadoc>
    <text>Performs rank-n update operations on the inner blocks of a {@link org.ejml.data.BlockMatrix64F}It is assumed and not checked that the submatrices are aligned along the matrix's blocks.</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>&lt;p&gt;
 * Performs:&lt;br&gt;
 * &lt;br&gt;
 * A = A + &amp;alpha; B &lt;sup&gt;T&lt;/sup&gt;B
 * &lt;/p&gt;</text>
    <param>blockLength Size of the block in the block matrix.</param>
    <param>alpha scaling factor for right hand side.</param>
    <param>A Block aligned submatrix.</param>
    <param>B Block aligned submatrix.</param>
  </javadoc>
  <method type="void" name="rankNUpdate">
    <declaration type="int" name="heightB" />
    <declaration type="int" name="N" />
    <scope>
      <declaration type="int" name="indexB_i" />
      <declaration type="int" name="widthB_i" />
      <declaration type="int" name="rowA" />
      <declaration type="int" name="heightA" />
      <scope>
        <declaration type="int" name="widthB_j" />
        <declaration type="int" name="indexA" />
        <declaration type="int" name="indexB_j" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Rank N update function for a symmetric inner submatrix and only operates on the upper
 * triangular portion of the submatrix.&lt;br&gt;
 * &lt;br&gt;
 * A = A - B &lt;sup&gt;T&lt;/sup&gt;B
 * &lt;/p&gt;</text>
  </javadoc>
  <method type="void" name="symmRankNMinus_U">
    <declaration type="int" name="heightB" />
    <declaration type="int" name="N" />
    <scope>
      <declaration type="int" name="indexB_i" />
      <declaration type="int" name="widthB_i" />
      <declaration type="int" name="rowA" />
      <declaration type="int" name="heightA" />
      <scope>
        <declaration type="int" name="widthB_j" />
        <declaration type="int" name="indexA" />
        <declaration type="int" name="indexB_j" />
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>only the upper portion of this block needs to be modified since it is along a diagonal</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Rank N update function for a symmetric inner submatrix and only operates on the lower
 * triangular portion of the submatrix.&lt;br&gt;
 * &lt;br&gt;
 * A = A - B*B&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
 * &lt;/p&gt;</text>
  </javadoc>
  <method type="void" name="symmRankNMinus_L">
    <declaration type="int" name="widthB" />
    <declaration type="int" name="N" />
    <scope>
      <declaration type="int" name="heightB_i" />
      <declaration type="int" name="indexB_i" />
      <declaration type="int" name="rowA" />
      <declaration type="int" name="heightA" />
      <scope>
        <declaration type="int" name="widthB_j" />
        <declaration type="int" name="indexA" />
        <declaration type="int" name="indexB_j" />
        <scope />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Performs the following operation on a block:&lt;br&gt;
 * &lt;br&gt;
 * c = c - a&lt;sup&gt;T&lt;/sup&gt;a&lt;br&gt;
 * &lt;/p&gt;</text>
  </javadoc>
  <method type="void" name="multTransABlockMinus">
    <declaration type="int" name="rowB" />
    <declaration type="int" name="endLoopK" />
    <declaration type="int" name="startA" />
    <scope>
      <declaration type="int" name="a" />
      <declaration type="int" name="c" />
      <declaration type="int" name="endA" />
      <declaration type="int" name="endB" />
      <scope>
        <declaration type="double" name="valA" />
        <declaration type="int" name="b" />
        <scope />
      </scope>
    </scope>
    <comment>for( int i = 0; i &lt; widthA; i++ ) {</comment>
    <comment>for( int k = 0; k &lt; heightA; k++ ) {</comment>
    <comment />
    <comment>double valA = dataA[k*widthA + i + indexA];</comment>
    <comment>for( int j = 0; j &lt; widthC; j++ ) {</comment>
    <comment>dataC[ i*widthC + j + indexC ] -= valA * dataA[k*widthC + j + indexB];</comment>
    <comment>}</comment>
    <comment>}</comment>
    <comment>}</comment>
    <comment>for( int k = 0; k &lt; heightA; k++ ) {</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Performs the following operation on the upper triangular portion of a block:&lt;br&gt;
 * &lt;br&gt;
 * c = c - a&lt;sup&gt;T&lt;/sup&gt;a&lt;br&gt;
 * &lt;/p&gt;</text>
  </javadoc>
  <method type="void" name="multTransABlockMinus_U">
    <scope>
      <scope>
        <declaration type="double" name="valA" />
        <declaration type="int" name="b" />
        <declaration type="int" name="c" />
        <declaration type="int" name="endC" />
        <scope />
      </scope>
    </scope>
    <comment>for( int i = 0; i &lt; widthA; i++ ) {</comment>
    <comment>for( int k = 0; k &lt; heightA; k++ ) {</comment>
    <comment />
    <comment>double valA = dataA[k*widthA + i + indexA];</comment>
    <comment>for( int j = i; j &lt; widthC; j++ ) {</comment>
    <comment>dataC[ i*widthC + j + indexC ] -= valA * dataA[k*widthC + j + indexB];</comment>
    <comment>}</comment>
    <comment>}</comment>
    <comment>}</comment>
    <comment>for( int j = i; j &lt; widthC; j++ ) {</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Performs the following operation on a block:&lt;br&gt;
 * &lt;br&gt;
 * c = c - a*a&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
 * &lt;/p&gt;</text>
  </javadoc>
  <method type="void" name="multTransBBlockMinus">
    <declaration type="int" name="rowA" />
    <declaration type="int" name="c" />
    <scope>
      <declaration type="int" name="endA" />
      <declaration type="int" name="rowB" />
      <declaration type="int" name="endLoopJ" />
      <scope>
        <declaration type="int" name="a" />
        <declaration type="int" name="b" />
        <declaration type="double" name="sum" />
        <scope />
      </scope>
    </scope>
    <comment>for( int i = 0; i &lt; heightA; i++ ) {</comment>
    <comment>for( int j = 0; j &lt; widthC; j++ ) {</comment>
    <comment>double sum = 0;</comment>
    <comment>for( int k = 0; k &lt; widthA; k++ ) {</comment>
    <comment>sum += dataA[i*widthA + k + indexA] * dataA[j*widthA + k + indexB];</comment>
    <comment>}</comment>
    <comment>dataC[ i*widthC + j + indexC ] -= sum;</comment>
    <comment>}</comment>
    <comment>}</comment>
    <comment>for( int j = 0; j &lt; widthC; j++  ) {</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Performs the following operation on the lower triangular portion of a block:&lt;br&gt;
 * &lt;br&gt;
 * c = c - a*a&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
 * &lt;/p&gt;</text>
  </javadoc>
  <method type="void" name="multTransBBlockMinus_L">
    <scope>
      <declaration type="int" name="rowA" />
      <declaration type="int" name="endA" />
      <declaration type="int" name="rowB" />
      <declaration type="int" name="rowC" />
      <scope>
        <declaration type="double" name="sum" />
        <declaration type="int" name="a" />
        <declaration type="int" name="b" />
        <scope />
      </scope>
    </scope>
    <comment>for( int i = 0; i &lt; heightA; i++ ) {</comment>
    <comment>for( int j = 0; j &lt;= i; j++ ) {</comment>
    <comment>double sum = 0;</comment>
    <comment>for( int k = 0; k &lt; widthA; k++ ) {</comment>
    <comment>sum += dataA[i*widthA + k + indexA] * dataA[j*widthA + k + indexB];</comment>
    <comment>}</comment>
    <comment>dataC[ i*widthC + j + indexC ] -= sum;</comment>
    <comment>}</comment>
    <comment>}</comment>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
