<?xml version="1.0" encoding="UTF-8"?>
<class name="TransposeAlgs">
  <javadoc>
    <text>Low level transpose algorithms.  No sanity checks are performed.</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>In-place transpose for a square matrix.  The most efficient algorithm but can
 * only be used on square matrices.</text>
    <param>mat The matrix that is transposed in-place.  Modified.</param>
  </javadoc>
  <method type="void" name="square">
    <declaration type="int" name="index" />
    <declaration type="int" name="indexEnd" />
    <scope>
      <declaration type="int" name="indexOther" />
      <scope>
        <declaration type="double" name="val" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Performs a transpose across block sub-matrices.  Reduces
 * the number of cache misses on larger matrices.
 * *NOTE* If this is beneficial is highly dependent on the computer it is run on. e.g:
 * - Q6600 Almost twice as fast as standard.
 * - Pentium-M Same speed and some times a bit slower than standard.</text>
    <param>A Original matrix.  Not modified.</param>
    <param>A_tran Transposed matrix.  Modified.</param>
    <param>blockLength Length of a block.</param>
  </javadoc>
  <method type="void" name="block">
    <scope>
      <declaration type="int" name="blockHeight" />
      <declaration type="int" name="indexSrc" />
      <declaration type="int" name="indexDst" />
      <scope>
        <declaration type="int" name="blockWidth" />
        <declaration type="int" name="indexSrcEnd" />
        <scope>
          <declaration type="int" name="rowSrc" />
          <declaration type="int" name="rowDst" />
          <declaration type="int" name="end" />
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>int indexSrc = i*A.numCols + j;</comment>
    <comment>int indexDst = j*A_tran.numCols + i;</comment>
    <comment>for( int l = 0; l &lt; blockWidth; l++ , indexSrc++ ) {</comment>
    <comment>for( int k = 0; k &lt; blockHeight; k++ , rowSrc += A.numCols ) {</comment>
    <comment>faster to write in sequence than to read in sequence</comment>
  </method>
  <javadoc>
    <text>A straight forward transpose.  Good for small non-square matrices.</text>
    <param>A Original matrix.  Not modified.</param>
    <param>A_tran Transposed matrix.  Modified.</param>
  </javadoc>
  <method type="void" name="standard">
    <declaration type="int" name="index" />
    <scope>
      <declaration type="int" name="index2" />
      <declaration type="int" name="end" />
      <scope />
    </scope>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
