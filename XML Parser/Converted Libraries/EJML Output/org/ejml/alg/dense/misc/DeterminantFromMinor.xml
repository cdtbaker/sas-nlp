<?xml version="1.0" encoding="UTF-8"?>
<class name="DeterminantFromMinor">
  <javadoc>
    <text>&lt;p&gt;
 * Computes the determinant of a matrix using Laplace expansion.  This is done
 * using minor matrices as is shown below:&lt;br&gt;
 * &lt;br&gt;
 * |A| = Sum{ i=1:k ; a&lt;sub&gt;ij&lt;/sub&gt; C&lt;sub&gt;ij&lt;/sub&gt; }&lt;br&gt;
 * &lt;br&gt;
 * C&lt;sub&gt;ij&lt;/sub&gt; = (-1)&lt;sup&gt;i+j&lt;/sup&gt; M&lt;sub&gt;ij&lt;/sub&gt;&lt;br&gt;
 * &lt;br&gt;
 * Where M_ij is the minor of matrix A formed by eliminating row i and column j from A.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This is significantly more computationally expensive than using LU decomposition, but
 * its computation has the advantage being independent of the matrices value.
 * &lt;/p&gt;</text>
    <see>org.ejml.alg.dense.decomposition.lu.LUDecompositionAlt</see>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="int" name="width" />
  <declaration type="int" name="minWidth" />
  <declaration type="int[]" name="levelIndexes" />
  <declaration type="double[]" name="levelResults" />
  <declaration type="int[]" name="levelRemoved" />
  <declaration type="int" name="open" />
  <declaration type="int" name="numOpen" />
  <declaration type="DenseMatrix64F" name="tempMat" />
  <declaration type="boolean" name="dirty" />
  <javadoc>
    <param>width The width of the matrices that it will be computing the determinant for</param>
  </javadoc>
  <method type="constructor" name="DeterminantFromMinor" />
  <javadoc>
    <param>width The width of the matrices that it will be computing the determinant for</param>
    <param>minWidth At which point should it use a predefined function to compute the determinant.</param>
  </javadoc>
  <method type="constructor" name="DeterminantFromMinor">
    <scope />
    <declaration type="int" name="numLevels" />
  </method>
  <javadoc>
    <text>Computes the determinant for the specified matrix.  It must be square and have
 * the same width and height as what was specified in the constructor.</text>
    <param>mat The matrix whose determinant is to be computed.</param>
    <return>The determinant.</return>
  </javadoc>
  <method type="double" name="compute">
    <scope />
    <declaration type="int" name="level" />
    <scope>
      <declaration type="int" name="levelWidth" />
      <declaration type="int" name="levelIndex" />
      <scope>
        <scope />
        <declaration type="int" name="prevLevelIndex" />
        <declaration type="double" name="val" />
        <scope />
        <scope />
      </scope>
      <scope>
        <declaration type="int" name="excluded" />
        <scope>
          <declaration type="double" name="subresult" />
          <scope />
          <scope />
        </scope>
        <scope />
      </scope>
    </scope>
    <comment>make sure everything is in the proper state before it starts</comment>
    <comment>System.arraycopy(mat.data,0,minorMatrix[0],0,mat.data.length);</comment>
    <comment>put it back into the list</comment>
  </method>
  <method type="void" name="initStructures">
    <scope />
    <scope>
      <scope />
    </scope>
  </method>
  <method type="int" name="openRemove">
    <declaration type="int" name="val" />
  </method>
  <method type="void" name="openAdd">
    <scope />
  </method>
  <method type="void" name="openAdd" />
  <method type="void" name="putIntoOpen">
    <declaration type="boolean" name="added" />
    <scope>
      <scope />
    </scope>
    <scope />
  </method>
  <method type="void" name="createMinor">
    <declaration type="int" name="w" />
    <declaration type="int" name="firstRow" />
    <scope>
      <declaration type="int" name="col" />
      <declaration type="int" name="srcIndex" />
      <declaration type="int" name="dstIndex" />
      <scope />
    </scope>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>how wide the square matrix is</comment>
  <comment>used to decide at which point it uses a direct algorithm to compute the determinant</comment>
  <comment>used to keep track of which submatrix it is computing the results for</comment>
  <comment>the results at different levels of minor matrices</comment>
  <comment>which columns where removed at what level</comment>
  <comment>columns that are currently open</comment>
  <comment>a minor matrix which is created at the lowest level</comment>
</class>
