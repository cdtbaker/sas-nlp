<?xml version="1.0" encoding="UTF-8"?>
<class name="NaiveDeterminant">
  <javadoc>
    <text>Computes the determinant using different very simple and computationally expensive algorithms.</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>&lt;p&gt;
 * Computes the determinant of the matrix using Leibniz's formula
 * &lt;/p&gt;
 * &lt;p&gt;
 * A direct implementation of Leibniz determinant equation.  This is of little practical use
 * because of its slow runtime of O(n!) where n is the width of the matrix. LU decomposition
 * should be used instead.  One advantage of Leibniz's equation is how simplistic it is.
 * &lt;/p&gt;
 * &lt;p&gt;
 * det(A) = Sum( &amp;sigma; in S&lt;sub&gt;n&lt;/sub&gt; ; sgn(&amp;sigma;) Prod( i = 1 to n ; a&lt;sub&gt;i,&amp;sigma;(i)&lt;/sub&gt;) )&lt;br&gt;
 * &lt;ul&gt;
 * &lt;li&gt;sgn is the sign function of permutations. +1 or -1 for even and odd permutations&lt;/li&gt;
 * &lt;li&gt;a set of permutations. if n=3 then the possible permutations are (1,2,3) (1,3,2), (3,2,1), ... etc&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;</text>
    <param>mat The matrix whose determinant is computed.</param>
    <return>The value of the determinant</return>
  </javadoc>
  <method type="double" name="leibniz">
    <declaration type="PermuteArray" name="perm" />
    <declaration type="double" name="total" />
    <declaration type="int[]" name="p" />
    <scope>
      <declaration type="double" name="prod" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * A simple and inefficient algorithm for computing the determinant. This should never be used.
 * It is at least two orders of magnitude slower than {@link DeterminantFromMinor}. This is included
 * to provide a point of comparision for other algorithms.
 * &lt;/p&gt;</text>
    <param>mat The matrix that the determinant is to be computed from</param>
    <return>The determinant.</return>
  </javadoc>
  <method type="double" name="recursive">
    <scope />
    <scope />
    <scope />
    <declaration type="double" name="result" />
    <scope>
      <declaration type="DenseMatrix64F" name="minorMat" />
      <scope>
        <scope>
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
