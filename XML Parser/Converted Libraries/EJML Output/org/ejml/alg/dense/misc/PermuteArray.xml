<?xml version="1.0" encoding="UTF-8"?>
<class name="PermuteArray">
  <javadoc>
    <text>Generates a permutations of an integer set from 0 to N-1.  This can either be generated
 * all at once as a list of one at a time.</text>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="int" name="level" />
  <declaration type="int" name="data" />
  <declaration type="int" name="iter" />
  <declaration type="int" name="valk" />
  <declaration type="int" name="ret" />
  <method type="constructor" name="PermuteArray">
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Returns signature of the permutation.  This is the sgn() operator and returns
 * -1 or 1 depending on it being odd or even.
 * &lt;br&gt;
 * sgn(σ) = ( − 1)&lt;sup&gt;m&lt;/sup&gt;&lt;br&gt;
 * &lt;br&gt;
 * where m is the number of inversions.
 * &lt;/p&gt;
 * &lt;p&gt;
 * NOTE: This implementation is painfully slow O(N!).  There is probably another algorithm out there
 * which is much faster.
 * &lt;/p&gt;</text>
    <return>-1 or 1 for odd or even permutations.</return>
  </javadoc>
  <method type="int" name="sgn">
    <declaration type="int" name="total" />
    <scope>
      <declaration type="int" name="val" />
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>Is there a way to compute the parity while performing the permutations</comment>
    <comment>making this much less expensive</comment>
  </method>
  <javadoc>
    <text>Computes N factorial</text>
  </javadoc>
  <method type="int" name="fact">
    <declaration type="int" name="ret" />
    <scope />
  </method>
  <javadoc>
    <text>Creates a list of all permutations for a set with N elements.</text>
    <param>N Number of elements in the list being permuted.</param>
    <return>A list containing all the permutations.</return>
  </javadoc>
  <method type="List&lt;int[]&gt;" name="createList">
    <declaration type="int[]" name="data" />
    <scope />
    <declaration type="List&lt;int[]&gt;[]" name="ret" />
  </method>
  <javadoc>
    <text>Internal function that uses recursion to create the list</text>
  </javadoc>
  <method type="void" name="createList">
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <scope>
      <declaration type="int[]" name="copy" />
    </scope>
  </method>
  <javadoc>
    <text>Creates the next permutation in the sequence.</text>
    <return>An array containing the permutation.  The returned array is modified each time this function is called.</return>
  </javadoc>
  <method type="int[]" name="next">
    <declaration type="boolean" name="hasNewPerm" />
    <scope>
      <scope>
        <scope>
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>boolean foundZero = false;</comment>
    <comment>a new permutation has been created return the results.</comment>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>used by next</comment>
</class>
