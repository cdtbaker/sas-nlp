<?xml version="1.0" encoding="UTF-8"?>
<class name="LinearSolverQrHouseTran">
  <javadoc>
    <text>&lt;p&gt;
 * QR decomposition can be used to solve for systems.  However, this is not as computationally efficient
 * as LU decomposition and costs about 3n&lt;sup&gt;2&lt;/sup&gt; flops.
 * &lt;/p&gt;
 * &lt;p&gt;
 * It solve for x by first multiplying b by the transpose of Q then solving for the result.
 * &lt;br&gt;
 * QRx=b&lt;br&gt;
 * Rx=Q^T b&lt;br&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * A column major decomposition is used in this solver.
 * &lt;p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="QRDecompositionHouseholderTran" name="decomposer" />
  <declaration type="double[]" name="a" />
  <declaration type="int" name="maxRows" />
  <declaration type="int" name="maxCols" />
  <declaration type="DenseMatrix64F" name="QR" />
  <declaration type="DenseMatrix64F" name="U" />
  <javadoc>
    <text>Creates a linear solver that uses QR decomposition.</text>
  </javadoc>
  <method type="constructor" name="LinearSolverQrHouseTran" />
  <method type="void" name="setMaxSize" />
  <javadoc>
    <text>Performs QR decomposition on A</text>
    <param>A not modified.</param>
  </javadoc>
  <method type="boolean" name="setA" />
  <method type="double" name="quality">
    <comment>even those it is transposed the diagonal elements are at the same</comment>
    <comment>elements</comment>
  </method>
  <javadoc>
    <text>Solves for X using the QR decomposition.</text>
    <param>B A matrix that is n by m.  Not modified.</param>
    <param>X An n by m matrix where the solution is written to.  Modified.</param>
  </javadoc>
  <method type="void" name="solve">
    <declaration type="double[]" name="gammas" />
    <declaration type="double[]" name="dataQR" />
    <declaration type="int" name="BnumCols" />
    <scope>
      <scope />
      <scope>
        <declaration type="int" name="indexU" />
        <declaration type="double" name="ub" />
        <scope />
        <scope />
      </scope>
      <scope />
    </scope>
    <comment>solve each column one by one</comment>
    <comment>make a copy of this column in the vector</comment>
    <comment>Solve Qa=b</comment>
    <comment>a = Q'b</comment>
    <comment>a = Q_{n-1}...Q_2*Q_1*b</comment>
    <comment />
    <comment>Q_n*b = (I-gamma*u*u^T)*b = b - u*(gamma*U^T*b)</comment>
    <comment>U^T*b</comment>
    <comment>gamma*U^T*b</comment>
    <comment>solve for Rx = b using the standard upper triangular solver</comment>
    <comment>save the results</comment>
  </method>
  <method type="boolean" name="modifiesA" />
  <method type="boolean" name="modifiesB" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>a column major QR matrix</comment>
</class>
