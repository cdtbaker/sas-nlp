<?xml version="1.0" encoding="UTF-8"?>
<class name="BaseLinearSolverQrp">
  <javadoc>
    <text>&lt;p&gt;
 * Base class for QR pivot based pseudo inverse classes.  It will return either the
 * basic of minimal 2-norm solution. See [1] for details.  The minimal 2-norm solution refers to the solution
 * 'x' whose 2-norm is the smallest making it unique, not some other error function.
 * &lt;/p&gt;
 * &lt;p&gt;
 * &lt;pre&gt;
 * R = [ R12  R12 ] r      P^T*x = [ y ] r       Q^T*b = [ c ] r
 * [  0    0  ] m-r            [ z ] n -r            [ d ] m-r
 * r   n-r
 * where r is the rank of the matrix and (m,n) is the dimension of the linear system.
 * &lt;/pre&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * &lt;pre&gt;
 * The solution 'x' is found by solving the system below.  The basic solution is found by setting z=0
 * [ R_11^-1*(c - R12*z) ]
 * x = [          z          ]
 * &lt;/pre&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * NOTE: The matrix rank is determined using the provided QR decomposition. [1] mentions that this will not always
 * work and could cause some problems.
 * &lt;/p&gt;
 * &lt;p&gt;
 * [1] See page 258-259 in Gene H. Golub and Charles F. Van Loan "Matrix Computations" 3rd Ed, 1996
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="QRPDecomposition&lt;DenseMatrix64F&gt;" name="decomposition" />
  <declaration type="boolean" name="norm2Solution" />
  <declaration type="DenseMatrix64F" name="Y" />
  <declaration type="DenseMatrix64F" name="R" />
  <declaration type="DenseMatrix64F" name="R11" />
  <declaration type="DenseMatrix64F" name="I" />
  <declaration type="int" name="rank" />
  <declaration type="LinearSolver&lt;DenseMatrix64F&gt;" name="internalSolver" />
  <declaration type="DenseMatrix64F" name="W" />
  <javadoc>
    <text>Configures internal parameters.</text>
    <param>decomposition Used to solve the linear system.</param>
    <param>norm2Solution If true then the optimal 2-norm solution will be computed for degenerate systems.</param>
  </javadoc>
  <method type="constructor" name="BaseLinearSolverQrp" />
  <method type="boolean" name="setA">
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>extract the r11 triangle sub matrix</comment>
    <comment>extract the R12 sub-matrix</comment>
    <comment>W=inv(R11)*R12</comment>
    <comment>set the identity matrix in the upper portion</comment>
  </method>
  <method type="double" name="quality" />
  <javadoc>
    <text>&lt;p&gt;
 * Upgrades the basic solution to the optimal 2-norm solution.
 * &lt;/p&gt;
 * &lt;pre&gt;
 * First solves for 'z'
 * || x_b - P*[ R_11^-1 * R_12 ] * z ||2
 * min z ||         [ - I_{n-r}      ]     ||
 * &lt;/pre&gt;</text>
    <param>X basic solution, also output solution</param>
  </javadoc>
  <method type="void" name="upgradeSolution">
    <declaration type="DenseMatrix64F" name="z" />
    <comment>recycle Y</comment>
    <comment>compute the z which will minimize the 2-norm of X</comment>
    <comment>because of the identity matrix tacked onto the end 'A' should never be singular</comment>
    <comment>compute X by tweaking the original</comment>
  </method>
  <method type="void" name="invert" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>if true then only the basic solution will be found</comment>
  <comment>stores sub-matrices inside the R matrix</comment>
  <comment>store an identity matrix for computing the inverse</comment>
  <comment>rank of the system matrix</comment>
  <comment>used to compute optimal 2-norm solution</comment>
</class>
