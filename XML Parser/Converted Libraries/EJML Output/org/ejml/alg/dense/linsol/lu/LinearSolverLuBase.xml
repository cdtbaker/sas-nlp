<?xml version="1.0" encoding="UTF-8"?>
<class name="LinearSolverLuBase">
  <javadoc>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="LUDecompositionBase" name="decomp" />
  <method type="constructor" name="LinearSolverLuBase" />
  <method type="boolean" name="setA" />
  <method type="double" name="quality" />
  <method type="void" name="invert">
    <declaration type="double[]" name="vv" />
    <declaration type="DenseMatrix64F" name="LU" />
    <declaration type="int" name="n" />
    <declaration type="double[]" name="dataInv" />
    <scope>
      <declaration type="int" name="index" />
    </scope>
    <comment>don't need to change inv into an identity matrix before hand</comment>
    <comment>for( int i = 0; i &lt; n; i++ ) dataInv[i* n +j] = vv[i];</comment>
  </method>
  <javadoc>
    <text>This attempts to improve upon the solution generated by account
 * for numerical imprecisions.  See numerical recipes for more information.  It
 * is assumed that solve has already been run on 'b' and 'x' at least once.</text>
    <param>b A matrix. Not modified.</param>
    <param>x A matrix. Modified.</param>
  </javadoc>
  <method type="void" name="improveSol">
    <scope />
    <declaration type="double[]" name="dataA" />
    <declaration type="double[]" name="dataB" />
    <declaration type="double[]" name="dataX" />
    <declaration type="int" name="nc" />
    <declaration type="int" name="n" />
    <declaration type="double[]" name="vv" />
    <declaration type="DenseMatrix64F" name="LU" />
    <scope>
      <scope>
        <declaration type="double" name="sdp" />
        <scope />
      </scope>
      <scope />
    </scope>
    <comment>BigDecimal sdp = new BigDecimal(0);</comment>
    <comment>*NOTE* in the book this is a long double.  extra precision might be required</comment>
    <comment>BigDecimal sdp = new BigDecimal(-dataB[ i * nc + k]);</comment>
    <comment>sdp = sdp.add( BigDecimal.valueOf(dataA[i* n +j] * dataX[ j * nc + k]));</comment>
    <comment>vv[i] = sdp.doubleValue();</comment>
  </method>
  <method type="boolean" name="modifiesA" />
  <method type="boolean" name="modifiesB" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
