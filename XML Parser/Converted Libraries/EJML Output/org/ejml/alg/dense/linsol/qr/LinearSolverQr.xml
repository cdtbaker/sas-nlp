<?xml version="1.0" encoding="UTF-8"?>
<class name="LinearSolverQr">
  <javadoc>
    <text>&lt;p&gt;
 * A solver for a generic QR decomposition algorithm.  This will in general be a bit slower than the
 * specialized once since the full Q and R matrices need to be extracted.
 * &lt;/p&gt;
 * &lt;p&gt;
 * It solve for x by first multiplying b by the transpose of Q then solving for the result.
 * &lt;br&gt;
 * QRx=b&lt;br&gt;
 * Rx=Q^T b&lt;br&gt;
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="QRDecomposition&lt;DenseMatrix64F&gt;" name="decomposer" />
  <declaration type="int" name="maxRows" />
  <declaration type="int" name="maxCols" />
  <declaration type="DenseMatrix64F" name="Q" />
  <declaration type="DenseMatrix64F" name="R" />
  <declaration type="DenseMatrix64F" name="Y" />
  <javadoc>
    <text>Creates a linear solver that uses QR decomposition.</text>
  </javadoc>
  <method type="constructor" name="LinearSolverQr" />
  <javadoc>
    <text>Changes the size of the matrix it can solve for</text>
    <param>maxRows Maximum number of rows in the matrix it will decompose.</param>
    <param>maxCols Maximum number of columns in the matrix it will decompose.</param>
  </javadoc>
  <method type="void" name="setMaxSize" />
  <javadoc>
    <text>Performs QR decomposition on A</text>
    <param>A not modified.</param>
  </javadoc>
  <method type="boolean" name="setA">
    <scope />
  </method>
  <method type="double" name="quality" />
  <javadoc>
    <text>Solves for X using the QR decomposition.</text>
    <param>B A matrix that is n by m.  Not modified.</param>
    <param>X An n by m matrix where the solution is written to.  Modified.</param>
  </javadoc>
  <method type="void" name="solve">
    <declaration type="int" name="BnumCols" />
    <scope>
      <scope />
      <scope />
    </scope>
    <comment>solve each column one by one</comment>
    <comment>make a copy of this column in the vector</comment>
    <comment>Solve Qa=b</comment>
    <comment>a = Q'b</comment>
    <comment>solve for Rx = b using the standard upper triangular solver</comment>
    <comment>save the results</comment>
  </method>
  <method type="boolean" name="modifiesA" />
  <method type="boolean" name="modifiesB" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
