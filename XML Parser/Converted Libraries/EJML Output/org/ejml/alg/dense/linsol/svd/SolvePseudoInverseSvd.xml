<?xml version="1.0" encoding="UTF-8"?>
<class name="SolvePseudoInverseSvd">
  <javadoc>
    <text>&lt;p&gt;
 * The pseudo-inverse is typically used to solve over determined system for which there is no unique solution.&lt;br&gt;
 * x=inv(A&lt;sup&gt;T&lt;/sup&gt;A)A&lt;sup&gt;T&lt;/sup&gt;b&lt;br&gt;
 * where A &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt; and m &amp;ge; n.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This class implements the Moore-Penrose pseudo-inverse using SVD and should never fail.  Alternative implementations
 * can use Cholesky decomposition, but those will fail if the A&lt;sup&gt;T&lt;/sup&gt;A matrix is singular.
 * However the Cholesky implementation is much faster.
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="SingularValueDecomposition&lt;DenseMatrix64F&gt;" name="svd" />
  <declaration type="DenseMatrix64F" name="pinv" />
  <declaration type="double" name="threshold" />
  <javadoc>
    <text>Creates a new solver targeted at the specified matrix size.</text>
    <param>maxRows The expected largest matrix it might have to process.  Can be larger.</param>
    <param>maxCols The expected largest matrix it might have to process.  Can be larger.</param>
  </javadoc>
  <method type="constructor" name="SolvePseudoInverseSvd" />
  <javadoc>
    <text>Creates a solver targeted at matrices around 100x100</text>
  </javadoc>
  <method type="constructor" name="SolvePseudoInverseSvd" />
  <method type="boolean" name="setA">
    <declaration type="DenseMatrix64F" name="U_t" />
    <declaration type="DenseMatrix64F" name="V" />
    <declaration type="double[]" name="S" />
    <declaration type="int" name="N" />
    <declaration type="double" name="maxSingular" />
    <scope />
    <declaration type="double" name="tau" />
    <scope>
      <declaration type="double" name="s" />
    </scope>
    <scope>
      <declaration type="int" name="index" />
      <scope />
    </scope>
    <comment>compute the threshold for singular values which are to be zeroed</comment>
    <comment>computer the pseudo inverse of A</comment>
    <comment>V*W</comment>
    <comment>V*W*U^T</comment>
  </method>
  <method type="double" name="quality" />
  <method type="void" name="solve" />
  <method type="void" name="invert" />
  <method type="boolean" name="modifiesA" />
  <method type="boolean" name="modifiesB" />
  <javadoc>
    <text>Specify the relative threshold used to select singular values.  By default it's UtilEjml.EPS.</text>
    <param>threshold The singular value threshold</param>
  </javadoc>
  <method type="void" name="setThreshold" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>Used to compute pseudo inverse</comment>
  <comment>the results of the pseudo-inverse</comment>
  <comment>relative threshold used to select singular values</comment>
</class>
