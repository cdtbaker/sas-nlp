<?xml version="1.0" encoding="UTF-8"?>
<class name="LinearSolverChol">
  <javadoc>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="CholeskyDecompositionCommon" name="decomp" />
  <declaration type="int" name="n" />
  <declaration type="double" name="vv" />
  <declaration type="double" name="t" />
  <method type="constructor" name="LinearSolverChol" />
  <method type="boolean" name="setA">
    <scope />
    <scope />
  </method>
  <method type="double" name="quality" />
  <javadoc>
    <text>&lt;p&gt;
 * Using the decomposition, finds the value of 'X' in the linear equation below:&lt;br&gt;
 * A*x = b&lt;br&gt;
 * where A has dimension of n by n, x and b are n by m dimension.
 * &lt;/p&gt;
 * &lt;p&gt;
 * *Note* that 'b' and 'x' can be the same matrix instance.
 * &lt;/p&gt;</text>
    <param>B A matrix that is n by m.  Not modified.</param>
    <param>X An n by m matrix where the solution is writen to.  Modified.</param>
  </javadoc>
  <method type="void" name="solve">
    <scope />
    <declaration type="int" name="numCols" />
    <declaration type="double[]" name="dataB" />
    <declaration type="double[]" name="dataX" />
    <scope>
      <scope />
    </scope>
    <scope />
  </method>
  <javadoc>
    <text>Used internally to find the solution to a single column vector.</text>
  </javadoc>
  <method type="void" name="solveInternalL">
    <comment>solve L*y=b storing y in x</comment>
    <comment>solve L^T*x=y</comment>
  </method>
  <javadoc>
    <text>Sets the matrix 'inv' equal to the inverse of the matrix that was decomposed.</text>
    <param>inv Where the value of the inverse will be stored.  Modified.</param>
  </javadoc>
  <method type="void" name="invert">
    <scope />
    <scope />
    <declaration type="double[]" name="a" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Sets the matrix to the inverse using a lower triangular matrix.</text>
  </javadoc>
  <method type="void" name="setToInverseL">
    <scope>
      <declaration type="double" name="el_ii" />
      <scope>
        <declaration type="double" name="sum" />
        <scope />
      </scope>
    </scope>
    <scope>
      <declaration type="double" name="el_ii" />
      <scope>
        <declaration type="double" name="sum" />
        <scope />
      </scope>
    </scope>
    <comment>TODO reorder these operations to avoid cache misses</comment>
    <comment>inverts the lower triangular system and saves the result</comment>
    <comment>in the upper triangle to minimize cache misses</comment>
    <comment>solve the system and handle the previous solution being in the upper triangle</comment>
    <comment>takes advantage of symmetry</comment>
  </method>
  <method type="boolean" name="modifiesA" />
  <method type="boolean" name="modifiesB" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
