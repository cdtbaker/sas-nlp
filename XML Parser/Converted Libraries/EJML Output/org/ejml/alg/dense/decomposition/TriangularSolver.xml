<?xml version="1.0" encoding="UTF-8"?>
<class name="TriangularSolver">
  <javadoc>
    <text>&lt;p&gt;
 * This contains algorithms for solving systems of equations where T is a
 * non-singular triangular matrix:&lt;br&gt;
 * &lt;br&gt;
 * T*x = b&lt;br&gt;
 * &lt;br&gt;
 * where x and b are vectors, and T is an n by n matrix. T can either be a lower or upper triangular matrix.&lt;br&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * These functions are designed for use inside of other algorithms.  To use them directly
 * is dangerous since no sanity checks are performed.
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>&lt;p&gt;
 * Inverts a square lower triangular matrix:  L = L&lt;sup&gt;-1&lt;/sup&gt;
 * &lt;/p&gt;</text>
    <param>L</param>
    <param>m</param>
  </javadoc>
  <method type="void" name="invertLower">
    <scope>
      <declaration type="double" name="L_ii" />
      <scope>
        <declaration type="double" name="val" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="invertLower">
    <scope>
      <declaration type="double" name="L_ii" />
      <scope>
        <declaration type="double" name="val" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Solves for non-singular lower triangular matrices using forward substitution.
 * &lt;br&gt;
 * b = L&lt;sup&gt;-1&lt;/sup&gt;b&lt;br&gt;
 * &lt;br&gt;
 * where b is a vector, L is an n by n matrix.&lt;br&gt;
 * &lt;/p&gt;</text>
    <param>L An n by n non-singular lower triangular matrix. Not modified.</param>
    <param>b A vector of length n. Modified.</param>
    <param>n The size of the matrices.</param>
  </javadoc>
  <method type="void" name="solveL">
    <scope>
      <declaration type="double" name="sum" />
      <declaration type="int" name="indexL" />
      <scope />
    </scope>
    <comment>for( int i = 0; i &lt; n; i++ ) {</comment>
    <comment>double sum = b[i];</comment>
    <comment>for( int k=0; k&lt;i; k++ ) {</comment>
    <comment>sum -= L[i*n+k]* b[k];</comment>
    <comment>}</comment>
    <comment>b[i] = sum / L[i*n+i];</comment>
    <comment>}</comment>
  </method>
  <javadoc>
    <text>L is a m by m matrix
 * B is a m by n matrix</text>
    <param>L</param>
    <param>b</param>
    <param>m</param>
    <param>n</param>
  </javadoc>
  <method type="void" name="solveL">
    <scope>
      <scope>
        <declaration type="double" name="sum" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * This is a forward substitution solver for non-singular lower triangular matrices.
 * &lt;br&gt;
 * b = (L&lt;sup&gt;T&lt;/sup&gt;)&lt;sup&gt;-1&lt;/sup&gt;b&lt;br&gt;
 * &lt;br&gt;
 * where b is a vector, L is an n by n matrix.&lt;br&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * L is a lower triangular matrix, but it comes up with a solution as if it was
 * an upper triangular matrix that was computed by transposing L.
 * &lt;/p&gt;</text>
    <param>L An n by n non-singular lower triangular matrix. Not modified.</param>
    <param>b A vector of length n. Modified.</param>
    <param>n The size of the matrices.</param>
  </javadoc>
  <method type="void" name="solveTranL">
    <scope>
      <declaration type="double" name="sum" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * This is a forward substitution solver for non-singular upper triangular matrices.
 * &lt;br&gt;
 * b = U&lt;sup&gt;-1&lt;/sup&gt;b&lt;br&gt;
 * &lt;br&gt;
 * where b is a vector, U is an n by n matrix.&lt;br&gt;
 * &lt;/p&gt;</text>
    <param>U An n by n non-singular upper triangular matrix. Not modified.</param>
    <param>b A vector of length n. Modified.</param>
    <param>n The size of the matrices.</param>
  </javadoc>
  <method type="void" name="solveU">
    <scope>
      <declaration type="double" name="sum" />
      <declaration type="int" name="indexU" />
      <scope />
    </scope>
    <comment>for( int i =n-1; i&gt;=0; i-- ) {</comment>
    <comment>double sum = b[i];</comment>
    <comment>for( int j = i+1; j &lt;n; j++ ) {</comment>
    <comment>sum -= U[i*n+j]* b[j];</comment>
    <comment>}</comment>
    <comment>b[i] = sum/U[i*n+i];</comment>
    <comment>}</comment>
  </method>
  <method type="void" name="solveU">
    <scope>
      <declaration type="double" name="sum" />
      <declaration type="int" name="indexU" />
      <scope />
    </scope>
    <comment>for( int i =maxRow-1; i&gt;=minRow; i-- ) {</comment>
    <comment>double sum = b[i];</comment>
    <comment>for( int j = i+1; j &lt;maxRow; j++ ) {</comment>
    <comment>sum -= U[i*sideLength+j]* b[j];</comment>
    <comment>}</comment>
    <comment>b[i] = sum/U[i*sideLength+i];</comment>
    <comment>}</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * This is a forward substitution solver for non-singular upper triangular matrices which are
 * a sub-matrix inside a larger.  The columns of 'b' are solved for individually
 * &lt;br&gt;
 * b = U&lt;sup&gt;-1&lt;/sup&gt;b&lt;br&gt;
 * &lt;br&gt;
 * where b is a matrix, U is an n by n matrix.&lt;br&gt;
 * &lt;/p&gt;</text>
    <param>U Matrix containing the upper triangle system</param>
    <param>startU Index of the first element in U</param>
    <param>strideU stride between rows</param>
    <param>widthU How wide the square matrix is</param>
    <param>b Matrix containing the solution to the system.  Overwritten with the solution.</param>
    <param>startB Index of the first element in B</param>
    <param>strideB stride between rows</param>
    <param>widthB How wide the matrix is.  Length is the same as U's width</param>
  </javadoc>
  <method type="void" name="solveU">
    <scope>
      <scope>
        <declaration type="double" name="sum" />
        <scope />
      </scope>
    </scope>
    <comment>todo comment out the above and optimize it</comment>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
