<?xml version="1.0" encoding="UTF-8"?>
<class name="EigenvalueSmall">
  <javadoc>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="Complex64F" name="value0" />
  <declaration type="Complex64F" name="value1" />
  <method type="void" name="value2x2">
    <declaration type="double" name="c" />
    <scope />
    <scope>
      <declaration type="double" name="aa" />
      <declaration type="double" name="bb" />
      <declaration type="double" name="t_hat" />
      <declaration type="double" name="t" />
    </scope>
    <declaration type="double" name="c2" />
    <declaration type="double" name="s2" />
    <declaration type="double" name="cs" />
    <declaration type="double" name="b11" />
    <declaration type="double" name="b12" />
    <declaration type="double" name="b21" />
    <scope>
      <scope />
      <scope />
    </scope>
    <scope />
    <comment>apply a rotators such that th a11 and a22 elements are the same</comment>
    <comment>is this pointless since</comment>
    <comment>double b22 = c2*a22 + s2*a11 + cs*(a12+a21);</comment>
    <comment>apply second rotator to make A upper triangular if real eigenvalues</comment>
    <comment>c2 = b12;c*c;</comment>
    <comment>s2 = b21;s*s;</comment>
    <comment>a12 = c2*b12 - s2*b21;</comment>
    <comment>a21 = c2*b21 - s2*b12;</comment>
  </method>
  <javadoc>
    <text>Computes the eigenvalues of a 2 by 2 matrix using a faster but more prone to errors method.  This
 * is the typical method.</text>
  </javadoc>
  <method type="void" name="value2x2_fast">
    <declaration type="double" name="left" />
    <declaration type="double" name="inside" />
    <scope />
    <scope>
      <declaration type="double" name="right" />
    </scope>
  </method>
  <javadoc>
    <text>Compute the symmetric eigenvalue using a slightly safer technique</text>
  </javadoc>
  <method type="void" name="symm2x2_fast">
    <declaration type="double" name="left" />
    <declaration type="double" name="b" />
    <declaration type="double" name="right" />
    <comment>double p = (a11 - a22)*0.5;</comment>
    <comment>double r = Math.sqrt(p*p + a12*a12);</comment>
    <comment />
    <comment>value0.real = a22 + a12*a12/(r-p);</comment>
    <comment>value1.real = a22 - a12*a12/(r+p);</comment>
    <comment>}</comment>
    <comment />
    <comment>public void symm2x2_std( double a11 , double a12, double a22 )</comment>
    <comment>{</comment>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>if |a11-a22| &gt;&gt; |a12+a21| there might be a better way.  see pg371</comment>
  <comment>See page 385 of Fundamentals of Matrix Computations 2nd</comment>
</class>
