<?xml version="1.0" encoding="UTF-8"?>
<class name="LUDecompositionBase">
  <javadoc>
    <text>&lt;p&gt;
 * Contains common data structures and operations for LU decomposition algorithms.
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="DenseMatrix64F" name="LU" />
  <declaration type="int" name="maxWidth" />
  <declaration type="int" name="m" />
  <declaration type="double" name="dataLU" />
  <declaration type="double" name="vv" />
  <declaration type="int" name="indx" />
  <declaration type="int" name="pivot" />
  <declaration type="double" name="pivsign" />
  <method type="void" name="setExpectedMaxSize" />
  <method type="DenseMatrix64F" name="getLU" />
  <method type="int[]" name="getIndx" />
  <method type="int[]" name="getPivot" />
  <method type="boolean" name="inputModified" />
  <javadoc>
    <text>Writes the lower triangular matrix into the specified matrix.</text>
    <param>lower Where the lower triangular matrix is writen to.</param>
  </javadoc>
  <method type="DenseMatrix64F" name="getLower">
    <declaration type="int" name="numRows" />
    <declaration type="int" name="numCols" />
    <scope />
    <scope />
    <scope>
      <scope />
    </scope>
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Writes the upper triangular matrix into the specified matrix.</text>
    <param>upper Where the upper triangular matrix is writen to.</param>
  </javadoc>
  <method type="DenseMatrix64F" name="getUpper">
    <declaration type="int" name="numRows" />
    <declaration type="int" name="numCols" />
    <scope />
    <scope />
    <scope>
      <scope />
    </scope>
  </method>
  <method type="DenseMatrix64F" name="getPivot" />
  <method type="void" name="decomposeCommonInit">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Determines if the decomposed matrix is singular.  This function can return
 * false and the matrix be almost singular, which is still bad.</text>
    <return>true if singular false otherwise.</return>
  </javadoc>
  <method type="boolean" name="isSingular">
    <scope />
  </method>
  <javadoc>
    <text>Computes the determinant from the LU decomposition.</text>
    <return>The matrix's determinant.</return>
  </javadoc>
  <method type="double" name="computeDeterminant">
    <declaration type="double" name="ret" />
    <declaration type="int" name="total" />
    <scope />
  </method>
  <method type="double" name="quality" />
  <javadoc>
    <text>a specialized version of solve that avoid additional checks that are not needed.</text>
  </javadoc>
  <method type="void" name="_solveVectorInternal">
    <declaration type="int" name="ii" />
    <scope>
      <declaration type="int" name="ip" />
      <declaration type="double" name="sum" />
      <scope>
        <declaration type="int" name="index" />
      </scope>
      <scope />
    </scope>
    <comment>Solve L*Y = B</comment>
    <comment>for( int j = ii-1; j &lt; i; j++ )</comment>
    <comment>sum -= dataLU[i* n +j]*vv[j];</comment>
    <comment>Solve U*X = Y;</comment>
  </method>
  <method type="double[]" name="_getVV" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>the decomposed matrix</comment>
  <comment>it can decompose a matrix up to this size</comment>
  <comment>the shape of the matrix</comment>
  <comment>data in the matrix</comment>
  <comment>used in set, solve, invert</comment>
  <comment>used in set</comment>
  <comment>used by determinant</comment>
</class>
