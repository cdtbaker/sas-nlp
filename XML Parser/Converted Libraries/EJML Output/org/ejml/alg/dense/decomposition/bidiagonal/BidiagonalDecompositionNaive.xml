<?xml version="1.0" encoding="UTF-8"?>
<class name="BidiagonalDecompositionNaive">
  <javadoc>
    <text>A slower but much simpler version of {@link BidiagonalDecompositionRow} that internally uses
 * SimpleMatrix and explicitly computes the householder matrices.  This was easier to code up and is
 * used to validate other implementations.</text>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="SimpleMatrix" name="U" />
  <declaration type="SimpleMatrix" name="B" />
  <declaration type="SimpleMatrix" name="V" />
  <declaration type="int" name="m" />
  <declaration type="int" name="n" />
  <declaration type="int" name="min" />
  <declaration type="DenseMatrix64F" name="u" />
  <method type="SimpleMatrix" name="getU" />
  <method type="SimpleMatrix" name="getB" />
  <method type="SimpleMatrix" name="getV" />
  <javadoc>
    <text>Computes the decomposition of the provided matrix.  If no errors are detected then true is returned,
 * false otherwise.</text>
    <param>A  The matrix that is being decomposed.  Not modified.</param>
    <return>If it detects any errors or not.</return>
  </javadoc>
  <method type="boolean" name="decompose" />
  <method type="void" name="init">
    <declaration type="int" name="max" />
  </method>
  <javadoc>
    <text>Internal function for computing the decomposition.</text>
  </javadoc>
  <method type="boolean" name="_decompose">
    <scope />
  </method>
  <method type="void" name="computeU">
    <declaration type="double[]" name="u" />
    <declaration type="double" name="max" />
    <scope>
      <declaration type="double" name="val" />
    </scope>
    <scope>
      <declaration type="double" name="tau" />
      <scope>
        <declaration type="double" name="val" />
      </scope>
      <declaration type="double" name="nu" />
      <scope />
      <declaration type="SimpleMatrix" name="Q_k" />
    </scope>
    <comment>find the largest value in this column</comment>
    <comment>this is used to normalize the column and mitigate overflow/underflow</comment>
    <comment>copy the householder vector to vector outside of the matrix to reduce caching issues</comment>
    <comment>big improvement on larger matrices and a relatively small performance hit on small matrices.</comment>
    <comment>-------- set up the reflector Q_k</comment>
    <comment>normalize to reduce overflow/underflow</comment>
    <comment>and compute tau for the reflector</comment>
    <comment>write the reflector into the lower left column of the matrix</comment>
  </method>
  <method type="void" name="computeV">
    <declaration type="double[]" name="u" />
    <declaration type="double" name="max" />
    <scope>
      <declaration type="double" name="val" />
    </scope>
    <scope>
      <declaration type="double" name="tau" />
      <scope>
        <declaration type="double" name="val" />
      </scope>
      <declaration type="double" name="nu" />
      <scope />
      <declaration type="SimpleMatrix" name="Q_k" />
    </scope>
    <comment>find the largest value in this column</comment>
    <comment>this is used to normalize the column and mitigate overflow/underflow</comment>
    <comment>copy the householder vector to vector outside of the matrix to reduce caching issues</comment>
    <comment>big improvement on larger matrices and a relatively small performance hit on small matrices.</comment>
    <comment>-------- set up the reflector Q_k</comment>
    <comment>normalize to reduce overflow/underflow</comment>
    <comment>and compute tau for the reflector</comment>
    <comment>write the reflector into the lower left column of the matrix</comment>
    <comment>---------- multiply on the left by Q_k</comment>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>number of rows</comment>
  <comment>number of columns</comment>
  <comment>smallest of m and n</comment>
</class>
