<?xml version="1.0" encoding="UTF-8"?>
<class name="CholeskyBlockHelper">
  <javadoc>
    <text>A specialized Cholesky decomposition algorithm that is designed to help out{@link CholeskyDecompositionBlock} perform its calculations.  While decomposing
 * the matrix it will modify its internal lower triangular matrix and the original
 * that is being modified.</text>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="DenseMatrix64F" name="L" />
  <declaration type="double[]" name="el" />
  <javadoc>
    <text>Creates a CholeksyDecomposition capable of decomposing a matrix that is
 * n by n, where n is the width.</text>
    <param>widthMax The maximum width of a matrix that can be processed.</param>
  </javadoc>
  <method type="constructor" name="CholeskyBlockHelper" />
  <javadoc>
    <text>Decomposes a submatrix.  The results are written to the submatrix
 * and to its internal matrix L.</text>
    <param>mat A matrix which has a submatrix that needs to be inverted</param>
    <param>indexStart the first index of the submatrix</param>
    <param>n The width of the submatrix that is to be inverted.</param>
    <return>True if it was able to finish the decomposition.</return>
  </javadoc>
  <method type="boolean" name="decompose">
    <declaration type="double[]" name="m" />
    <declaration type="double" name="el_ii" />
    <declaration type="double" name="div_el_ii" />
    <scope>
      <scope>
        <declaration type="double" name="sum" />
        <declaration type="int" name="iEl" />
        <declaration type="int" name="jEl" />
        <declaration type="int" name="end" />
        <scope />
        <scope />
        <scope>
          <declaration type="double" name="v" />
        </scope>
      </scope>
    </scope>
    <comment>k = 0:i-1</comment>
    <comment>sum -= el[i*n+k]*el[j*n+k];</comment>
    <comment>is it positive-definate?</comment>
  </method>
  <javadoc>
    <text>Returns L matrix from the decomposition.&lt;br&gt;
 * L*L&lt;sup&gt;T&lt;/sup&gt;=A</text>
    <return>A lower triangular matrix.</return>
  </javadoc>
  <method type="DenseMatrix64F" name="getL" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>the decomposed matrix</comment>
</class>
