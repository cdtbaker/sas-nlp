<?xml version="1.0" encoding="UTF-8"?>
<class name="CholeskyDecompositionLDL">
  <javadoc>
    <text>&lt;p&gt;
 * This variant on the Cholesky decomposition avoid the need to take the square root
 * by performing the following decomposition:&lt;br&gt;
 * &lt;br&gt;
 * L*D*L&lt;sup&gt;T&lt;/sup&gt;=A&lt;br&gt;
 * &lt;br&gt;
 * where L is a lower triangular matrix with zeros on the diagonal. D is a diagonal matrix.
 * The diagonal elements of L are equal to one.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Unfortunately the speed advantage of not computing the square root is washed out by the
 * increased number of array accesses.  There only appears to be a slight speed boost for
 * very small matrices.
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="int" name="maxWidth" />
  <declaration type="int" name="n" />
  <declaration type="DenseMatrix64F" name="L" />
  <declaration type="double[]" name="el" />
  <declaration type="double[]" name="d" />
  <declaration type="double" name="vv" />
  <method type="void" name="setExpectedMaxSize">
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Performs Choleksy decomposition on the provided matrix.
 * &lt;/p&gt;
 * &lt;p&gt;
 * If the matrix is not positive definite then this function will return
 * false since it can't complete its computations.  Not all errors will be
 * found.
 * &lt;/p&gt;</text>
    <param>mat A symetric n by n positive definite matrix.</param>
    <return>True if it was able to finish the decomposition.</return>
  </javadoc>
  <method type="boolean" name="decompose">
    <scope />
    <scope />
    <declaration type="double" name="d_inv" />
    <scope>
      <scope>
        <declaration type="double" name="sum" />
        <scope />
        <scope />
        <scope />
      </scope>
    </scope>
    <scope>
      <scope />
    </scope>
    <comment>is it positive-definate?</comment>
    <comment>zero the top right corner.</comment>
  </method>
  <method type="boolean" name="inputModified" />
  <javadoc>
    <text>Diagonal elements of the diagonal D matrix.</text>
    <return>diagonal elements of D</return>
  </javadoc>
  <method type="double[]" name="getD" />
  <javadoc>
    <text>Returns L matrix from the decomposition.&lt;br&gt;
 * L*D*L&lt;sup&gt;T&lt;/sup&gt;=A</text>
    <return>A lower triangular matrix.</return>
  </javadoc>
  <method type="DenseMatrix64F" name="getL" />
  <method type="double[]" name="_getVV" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>it can decompose a matrix up to this width</comment>
  <comment>width and height of the matrix</comment>
  <comment>the decomposed matrix</comment>
  <comment>the D vector</comment>
  <comment>tempoary variable used by various functions</comment>
</class>
