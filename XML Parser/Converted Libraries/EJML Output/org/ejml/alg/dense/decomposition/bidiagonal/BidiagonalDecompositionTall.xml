<?xml version="1.0" encoding="UTF-8"?>
<class name="BidiagonalDecompositionTall">
  <javadoc>
    <text>&lt;p&gt;{@link BidiagonalDecomposition} specifically designed for tall matrices.
 * First step is to perform QR decomposition on the input matrix.  Then R is decomposed using
 * a bidiagonal decomposition.  By performing the bidiagonal decomposition on the smaller matrix
 * computations can be saved if m/n &gt; 5/3 and if U is NOT needed.
 * &lt;/p&gt;
 * &lt;p&gt;
 * A = [Q&lt;sub&gt;1&lt;/sub&gt; Q&lt;sub&gt;2&lt;/sub&gt;][U1 0; 0 I] [B1;0] V&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
 * U=[Q&lt;sub&gt;1&lt;/sub&gt;*U1 Q&lt;sub&gt;2&lt;/sub&gt;]&lt;br&gt;
 * B=[B1;0]&lt;br&gt;
 * A = U*B*V&lt;sup&gt;T&lt;/sup&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * A QRP decomposition is used internally.  That decomposition relies an a fixed threshold for selecting singular
 * values and is known to be less stable than SVD.  There is the potential for a degregation of stability
 * by using BidiagonalDecompositionTall instead of BidiagonalDecomposition. A few simple tests have shown
 * that loss in stability to be insignificant.
 * &lt;/p&gt;
 * &lt;p&gt;
 * See page 404 in "Fundamentals of Matrix Computations", 2nd by David S. Watkins.
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="QRPDecomposition&lt;DenseMatrix64F&gt;" name="decompQRP" />
  <declaration type="BidiagonalDecomposition&lt;DenseMatrix64F&gt;" name="decompBi" />
  <declaration type="DenseMatrix64F" name="B" />
  <declaration type="int" name="m" />
  <declaration type="int" name="n" />
  <declaration type="int" name="min" />
  <method type="void" name="getDiagonal">
    <scope />
  </method>
  <method type="DenseMatrix64F" name="getB">
    <scope />
  </method>
  <method type="DenseMatrix64F" name="getU">
    <scope>
      <declaration type="DenseMatrix64F" name="Q1" />
      <declaration type="DenseMatrix64F" name="U1" />
    </scope>
    <scope>
      <declaration type="DenseMatrix64F" name="Q" />
      <declaration type="DenseMatrix64F" name="U1" />
      <declaration type="DenseMatrix64F" name="Q1" />
      <declaration type="DenseMatrix64F" name="tmp" />
    </scope>
    <comment>U = Q*U1</comment>
    <comment>U = [Q1*U1 Q2]</comment>
  </method>
  <method type="DenseMatrix64F" name="getV" />
  <method type="boolean" name="decompose">
    <scope />
    <declaration type="DenseMatrix64F" name="result" />
    <declaration type="DenseMatrix64F" name="P" />
    <comment>apply the column pivots.</comment>
    <comment>TODO this is horribly inefficient</comment>
  </method>
  <method type="boolean" name="inputModified" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>TODO optimize this code</comment>
  <comment>todo this should be passed in</comment>
  <comment>number of rows</comment>
  <comment>number of column</comment>
  <comment>min(m,n)</comment>
</class>
