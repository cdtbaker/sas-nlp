<?xml version="1.0" encoding="UTF-8"?>
<class name="SymmetricQRAlgorithmDecomposition">
  <javadoc>
    <text>&lt;p&gt;
 * Computes the eigenvalues and eigenvectors of a real symmetric matrix using the symmetric implicit QR algorithm.
 * Inside each iteration a QR decomposition of A&lt;sub&gt;i&lt;/sub&gt;-p&lt;sub&gt;i&lt;/sub&gt;I is implicitly computed.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This implementation is based on the algorithm is sketched out in:&lt;br&gt;
 * David S. Watkins, "Fundamentals of Matrix Computations," Second Edition. page 377-385
 * &lt;/p&gt;</text>
    <see>org.ejml.alg.dense.decomposition.eig.symm.SymmetricQrAlgorithm</see>
    <see>org.ejml.alg.dense.decomposition.hessenberg.TridiagonalDecompositionHouseholder</see>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="TridiagonalSimilarDecomposition&lt;DenseMatrix64F&gt;" name="decomp" />
  <declaration type="SymmetricQREigenHelper" name="helper" />
  <declaration type="SymmetricQrAlgorithm" name="vector" />
  <declaration type="boolean" name="computeVectorsWithValues" />
  <declaration type="double" name="values" />
  <declaration type="double" name="diag" />
  <declaration type="double" name="off" />
  <declaration type="double" name="diagSaved" />
  <declaration type="double" name="offSaved" />
  <declaration type="DenseMatrix64F" name="V" />
  <declaration type="DenseMatrix64F" name="eigenvectors" />
  <declaration type="boolean" name="computeVectors" />
  <method type="constructor" name="SymmetricQRAlgorithmDecomposition" />
  <method type="constructor" name="SymmetricQRAlgorithmDecomposition" />
  <method type="void" name="setComputeVectorsWithValues" />
  <javadoc>
    <text>Used to limit the number of internal QR iterations that the QR algorithm performs.  20
 * should be enough for most applications.</text>
    <param>max The maximum number of QR iterations it will perform.</param>
  </javadoc>
  <method type="void" name="setMaxIterations" />
  <method type="int" name="getNumberOfEigenvalues" />
  <method type="Complex64F" name="getEigenvalue" />
  <method type="DenseMatrix64F" name="getEigenVector" />
  <javadoc>
    <text>Decomposes the matrix using the QR algorithm.  Care was taken to minimize unnecessary memory copying
 * and cache skipping.</text>
    <param>orig The matrix which is being decomposed.  Not modified.</param>
    <return>true if it decomposed the matrix or false if an error was detected.  This will not catch all errors.</return>
  </javadoc>
  <method type="boolean" name="decompose">
    <declaration type="int" name="N" />
    <scope />
    <scope>
      <scope />
      <scope />
    </scope>
    <scope />
    <comment>compute a similar tridiagonal matrix</comment>
    <comment>Tell the helper to work with this matrix</comment>
  </method>
  <method type="boolean" name="inputModified" />
  <method type="boolean" name="extractTogether">
    <comment>extract the orthogonal from the similar transform</comment>
    <comment>tell eigenvector algorithm to update this matrix as it computes the rotators</comment>
    <comment>extract the eigenvalues</comment>
    <comment>the V matrix contains the eigenvectors.  Convert those into column vectors</comment>
    <comment>save a copy of them since this data structure will be recycled next</comment>
  </method>
  <method type="boolean" name="extractSeparate">
    <comment>---- set up the helper to decompose the same tridiagonal matrix</comment>
    <comment>swap arrays instead of copying them to make it slightly faster</comment>
    <comment>extract the orthogonal from the similar transform</comment>
    <comment>tell eigenvector algorithm to update this matrix as it computes the rotators</comment>
    <comment>extract eigenvectors</comment>
    <comment>the ordering of the eigenvalues might have changed</comment>
    <comment>the V matrix contains the eigenvectors.  Convert those into column vectors</comment>
  </method>
  <javadoc>
    <text>Computes eigenvalues only</text>
    <return />
  </javadoc>
  <method type="boolean" name="computeEigenValues">
    <comment>make a copy of the internal tridiagonal matrix data for later use</comment>
    <comment>extract the eigenvalues</comment>
    <comment>save a copy of them since this data structure will be recycled next</comment>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>computes a tridiagonal matrix whose eigenvalues are the same as the original</comment>
  <comment>matrix and can be easily computed.</comment>
  <comment>helper class for eigenvalue and eigenvector algorithms</comment>
  <comment>computes the eigenvectors</comment>
  <comment>should it compute eigenvectors at the same time as the eigenvalues?</comment>
  <comment>where the found eigenvalues are stored</comment>
  <comment>where the tridiagonal matrix is stored</comment>
  <comment>temporary variable used to store/compute eigenvectors</comment>
  <comment>the extracted eigenvectors</comment>
  <comment>should it compute eigenvectors or just eigenvalues</comment>
</class>
