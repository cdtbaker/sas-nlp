<?xml version="1.0" encoding="UTF-8"?>
<class name="LUDecompositionAlt">
  <javadoc>
    <text>&lt;p&gt;
 * An LU decomposition algorithm that originally came from Jama.  In general this is faster than
 * what is in NR since it creates a cache of a column, which makes a big difference in larger
 * matrices.
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>This is a modified version of what was found in the JAMA package.  The order that it
 * performs its permutations in is the primary difference from NR</text>
    <param>a The matrix that is to be decomposed.  Not modified.</param>
    <return>true If the matrix can be decomposed and false if it can not.</return>
  </javadoc>
  <method type="boolean" name="decompose">
    <declaration type="double[]" name="LUcolj" />
    <scope>
      <scope />
      <scope>
        <declaration type="int" name="rowIndex" />
        <declaration type="int" name="kmax" />
        <declaration type="double" name="s" />
        <scope />
      </scope>
      <declaration type="int" name="p" />
      <declaration type="double" name="max" />
      <scope>
        <declaration type="double" name="v" />
        <scope />
      </scope>
      <scope>
        <declaration type="int" name="rowP" />
        <declaration type="int" name="rowJ" />
        <declaration type="int" name="endP" />
        <scope>
          <declaration type="double" name="t" />
        </scope>
        <declaration type="int" name="k" />
      </scope>
      <scope>
        <declaration type="double" name="lujj" />
        <scope>
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>make a copy of the column to avoid cache jumping issues</comment>
    <comment>Apply previous transformations.</comment>
    <comment>Most of the time is spent in the following dot product.</comment>
    <comment>Find pivot and exchange if necessary.</comment>
    <comment>swap the rows</comment>
    <comment>for (int k = 0; k &lt; n; k++) {</comment>
    <comment>double t = dataLU[p*n + k];</comment>
    <comment>dataLU[p*n + k] = dataLU[j*n + k];</comment>
    <comment>dataLU[j*n + k] = t;</comment>
    <comment>}</comment>
    <comment>Compute multipliers.</comment>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
