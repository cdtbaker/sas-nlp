<?xml version="1.0" encoding="UTF-8"?>
<class name="CholeskyDecompositionCommon">
  <javadoc>
    <text>&lt;p&gt;
 * This is an abstract class for a Cholesky decomposition.  It provides the solvers, but the actual
 * decompsoition is provided in other classes.
 * &lt;/p&gt;
 * &lt;p&gt;
 * A Cholesky Decomposition is a special decomposition for positive-definite symmetric matrices
 * that is more efficient than other general purposes decomposition. It refactors matrices
 * using one of the two following equations:&lt;br&gt;
 * &lt;br&gt;
 * L*L&lt;sup&gt;T&lt;/sup&gt;=A&lt;br&gt;
 * R&lt;sup&gt;T&lt;/sup&gt;*R=A&lt;br&gt;
 * &lt;br&gt;
 * where L is a lower triangular matrix and R is an upper traingular matrix.&lt;br&gt;
 * &lt;/p&gt;</text>
    <see>CholeskyDecompositionInner</see>
    <see>org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionBlock</see>
    <see>org.ejml.alg.dense.decomposition.chol.CholeskyDecompositionLDL</see>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="int" name="maxWidth" />
  <declaration type="int" name="n" />
  <declaration type="DenseMatrix64F" name="T" />
  <declaration type="double[]" name="t" />
  <declaration type="double" name="vv" />
  <declaration type="boolean" name="lower" />
  <javadoc>
    <text>Creates a CholeksyDecomposition capable of decompositong a matrix that is
 * n by n, where n is the width.</text>
    <param>lower should a lower or upper triangular matrix be used.</param>
  </javadoc>
  <method type="constructor" name="CholeskyDecompositionCommon" />
  <method type="void" name="setExpectedMaxSize">
    <scope />
  </method>
  <javadoc>
    <text>If true the decomposition was for a lower triangular matrix.
 * If false it was for an upper triangular matrix.</text>
    <return>True if lower, false if upper.</return>
  </javadoc>
  <method type="boolean" name="isLower" />
  <javadoc>
    <text>&lt;p&gt;
 * Performs Choleksy decomposition on the provided matrix.
 * &lt;/p&gt;
 * &lt;p&gt;
 * If the matrix is not positive definite then this function will return
 * false since it can't complete its computations.  Not all errors will be
 * found.  This is an efficient way to check for positive definiteness.
 * &lt;/p&gt;</text>
    <param>mat A symmetric positive definite matrix with n &lt;= widthMax.</param>
    <return>True if it was able to finish the decomposition.</return>
  </javadoc>
  <method type="boolean" name="decompose">
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <method type="boolean" name="inputModified" />
  <method name="decomposeLower" type="boolean" />
  <javadoc>
    <text>Performs an lower triangular decomposition.</text>
    <return>true if the matrix was decomposed.</return>
  </javadoc>
  <method name="decomposeUpper" type="boolean" />
  <javadoc>
    <text>Performs an upper triangular decomposition.</text>
    <return>true if the matrix was decomposed.</return>
  </javadoc>
  <method type="DenseMatrix64F" name="getT">
    <scope />
    <scope />
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>see if it needs to declare a new matrix or not</comment>
    <comment>write the values to T</comment>
  </method>
  <javadoc>
    <text>Returns the triangular matrix from the decomposition.</text>
    <return>A lower or upper triangular matrix.</return>
  </javadoc>
  <method type="DenseMatrix64F" name="getT" />
  <method type="double[]" name="_getVV" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>it can decompose a matrix up to this width</comment>
  <comment>width and height of the matrix</comment>
  <comment>the decomposed matrix</comment>
  <comment>tempoary variable used by various functions</comment>
  <comment>is it a lower triangular matrix or an upper triangular matrix</comment>
</class>
