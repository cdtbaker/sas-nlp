<?xml version="1.0" encoding="UTF-8"?>
<class name="SymmetricQrAlgorithm">
  <javadoc>
    <text>&lt;p&gt;
 * Computes the eigenvalues and eigenvectors of a symmetric tridiagonal matrix using the symmetric QR algorithm.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This implementation is based on the algorithm is sketched out in:&lt;br&gt;
 * David S. Watkins, "Fundamentals of Matrix Computations," Second Edition. page 377-385
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <declaration type="SymmetricQREigenHelper" name="helper" />
  <declaration type="DenseMatrix64F" name="Q" />
  <declaration type="double" name="eigenvalues" />
  <declaration type="int" name="exceptionalThresh" />
  <declaration type="int" name="maxIterations" />
  <declaration type="boolean" name="fastEigenvalues" />
  <declaration type="boolean" name="followingScript" />
  <method type="constructor" name="SymmetricQrAlgorithm" />
  <javadoc>
    <text>Creates a new SymmetricQREigenvalue class that declares its own SymmetricQREigenHelper.</text>
  </javadoc>
  <method type="constructor" name="SymmetricQrAlgorithm" />
  <method type="void" name="setMaxIterations" />
  <method type="DenseMatrix64F" name="getQ" />
  <method type="void" name="setQ" />
  <method type="void" name="setFastEigenvalues" />
  <javadoc>
    <text>Returns the eigenvalue at the specified index.</text>
    <param>index Which eigenvalue.</param>
    <return>The eigenvalue.</return>
  </javadoc>
  <method type="double" name="getEigenvalue" />
  <javadoc>
    <text>Returns the number of eigenvalues available.</text>
    <return>How many eigenvalues there are.</return>
  </javadoc>
  <method type="int" name="getNumberOfEigenvalues" />
  <javadoc>
    <text>Computes the eigenvalue of the provided tridiagonal matrix.  Note that only the upper portion
 * needs to be tridiagonal.  The bottom diagonal is assumed to be the same as the top.</text>
    <param>sideLength Number of rows and columns in the input matrix.</param>
    <param>diag Diagonal elements from tridiagonal matrix. Modified.</param>
    <param>off Off diagonal elements from tridiagonal matrix. Modified.</param>
    <return>true if it succeeds and false if it fails.</return>
  </javadoc>
  <method type="boolean" name="process" />
  <method type="boolean" name="process" />
  <method type="boolean" name="_process">
    <scope>
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
    </scope>
    <comment>if it has cycled too many times give up</comment>
    <comment>System.out.println("Steps = "+helper.steps);</comment>
    <comment>see if it is done processing this submatrix</comment>
    <comment>There are analytical solutions to this case. Just compute them directly.</comment>
    <comment>TODO might be able to speed this up by doing the 3 by 3 case also</comment>
    <comment>it isn't a good sign if exceptional shifts are being done here</comment>
    <comment>helper.printMatrix();</comment>
    <comment>helper.printMatrix();</comment>
  </method>
  <javadoc>
    <text>First looks for zeros and then performs the implicit single step in the QR Algorithm.</text>
  </javadoc>
  <method type="void" name="performStep">
    <scope>
      <scope />
    </scope>
    <declaration type="double" name="lambda" />
    <scope>
      <scope />
      <scope />
    </scope>
    <scope />
    <comment>check for zeros</comment>
    <comment>Using the true eigenvalues will in general lead to the fastest convergence</comment>
    <comment>typically takes 1 or 2 steps</comment>
    <comment>the current eigenvalue isn't working so try something else</comment>
    <comment>similar transforms</comment>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>performs many of the low level calculations</comment>
  <comment>transpose of the orthogonal matrix</comment>
  <comment>the eigenvalues previously computed</comment>
  <comment>should it ever analytically compute eigenvalues</comment>
  <comment>if this is true then it can't compute eigenvalues at the same time</comment>
  <comment>is it following a script or not</comment>
</class>
