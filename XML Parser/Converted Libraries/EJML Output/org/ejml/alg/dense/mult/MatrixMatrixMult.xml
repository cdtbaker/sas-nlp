<?xml version="1.0" encoding="UTF-8"?>
<class name="MatrixMatrixMult">
  <javadoc>
    <text>&lt;p&gt;
 * This class contains various types of matrix matrix multiplication operations for {@link RowD1Matrix64F}.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Two algorithms that are equivalent can often have very different runtime performance.
 * This is because of how modern computers uses fast memory caches to speed up reading/writing to data.
 * Depending on the order in which variables are processed different algorithms can run much faster than others,
 * even if the number of operations is the same.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Algorithms that are labeled as 'reorder' are designed to avoid caching jumping issues, some times at the cost
 * of increasing the number of operations.  This is important for large matrices.  The straight forward 
 * implementation seems to be faster for small matrices.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Algorithms that are labeled as 'aux' use an auxiliary array of length n.  This array is used to create
 * a copy of an out of sequence column vector that is referenced several times.  This reduces the number
 * of cache misses.  If the 'aux' parameter passed in is null then the array is declared internally.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Typically the straight forward implementation runs about 30% faster on smaller matrices and
 * about 5 times slower on larger matrices.  This is all computer architecture and matrix shape/size specific.
 * &lt;/p&gt;
 * &lt;p&gt;
 * &lt;center&gt;******** IMPORTANT **********&lt;/center&gt;
 * This class was auto generated using {@link GeneratorMatrixMatrixMult}If this code needs to be modified, please modify {@link GeneratorMatrixMatrixMult} instead
 * and regenerate the code by running that.
 * &lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <see>org.ejml.ops.CommonOps#mult(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="mult_reorder">
    <scope />
    <scope />
    <declaration type="double" name="valA" />
    <declaration type="int" name="indexCbase" />
    <declaration type="int" name="endOfKLoop" />
    <scope>
      <declaration type="int" name="indexA" />
      <declaration type="int" name="indexB" />
      <declaration type="int" name="indexC" />
      <declaration type="int" name="end" />
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>need to assign c.data to a value initially</comment>
    <comment>now add to it</comment>
    <comment>k loop</comment>
    <comment>j loop</comment>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#mult(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="mult_small">
    <scope />
    <scope />
    <declaration type="int" name="aIndexStart" />
    <declaration type="int" name="cIndex" />
    <scope>
      <scope>
        <declaration type="double" name="total" />
        <declaration type="int" name="indexA" />
        <declaration type="int" name="indexB" />
        <declaration type="int" name="end" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#mult(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="mult_aux">
    <scope />
    <scope />
    <scope>
      <scope />
      <declaration type="int" name="indexA" />
      <scope>
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
    <comment>create a copy of the column in B to avoid cache issues</comment>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multTransA(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multTransA_reorder">
    <scope />
    <scope />
    <declaration type="double" name="valA" />
    <scope>
      <declaration type="int" name="indexC_start" />
      <declaration type="int" name="indexB" />
      <declaration type="int" name="end" />
      <declaration type="int" name="indexC" />
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>first assign R</comment>
    <comment>now increment it</comment>
    <comment>this is the loop for j</comment>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multTransA(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multTransA_small">
    <scope />
    <scope />
    <declaration type="int" name="cIndex" />
    <scope>
      <scope>
        <declaration type="int" name="indexA" />
        <declaration type="int" name="indexB" />
        <declaration type="int" name="end" />
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
    <comment>loop for k</comment>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multTransAB(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multTransAB">
    <scope />
    <scope />
    <declaration type="int" name="cIndex" />
    <scope>
      <declaration type="int" name="indexB" />
      <scope>
        <declaration type="int" name="indexA" />
        <declaration type="int" name="end" />
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multTransAB(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multTransAB_aux">
    <scope />
    <scope />
    <declaration type="int" name="indexC" />
    <scope>
      <scope />
      <scope>
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multTransB(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multTransB">
    <scope />
    <scope />
    <declaration type="int" name="cIndex" />
    <declaration type="int" name="aIndexStart" />
    <scope>
      <declaration type="int" name="end" />
      <declaration type="int" name="indexB" />
      <scope>
        <declaration type="int" name="indexA" />
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multAdd(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multAdd_reorder">
    <scope />
    <scope />
    <declaration type="double" name="valA" />
    <declaration type="int" name="indexCbase" />
    <declaration type="int" name="endOfKLoop" />
    <scope>
      <declaration type="int" name="indexA" />
      <declaration type="int" name="indexB" />
      <declaration type="int" name="indexC" />
      <declaration type="int" name="end" />
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>need to assign c.data to a value initially</comment>
    <comment>now add to it</comment>
    <comment>k loop</comment>
    <comment>j loop</comment>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multAdd(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multAdd_small">
    <scope />
    <scope />
    <declaration type="int" name="aIndexStart" />
    <declaration type="int" name="cIndex" />
    <scope>
      <scope>
        <declaration type="double" name="total" />
        <declaration type="int" name="indexA" />
        <declaration type="int" name="indexB" />
        <declaration type="int" name="end" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multAdd(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multAdd_aux">
    <scope />
    <scope />
    <scope>
      <scope />
      <declaration type="int" name="indexA" />
      <scope>
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
    <comment>create a copy of the column in B to avoid cache issues</comment>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multAddTransA(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multAddTransA_reorder">
    <scope />
    <scope />
    <declaration type="double" name="valA" />
    <scope>
      <declaration type="int" name="indexC_start" />
      <declaration type="int" name="indexB" />
      <declaration type="int" name="end" />
      <declaration type="int" name="indexC" />
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>first assign R</comment>
    <comment>now increment it</comment>
    <comment>this is the loop for j</comment>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multAddTransA(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multAddTransA_small">
    <scope />
    <scope />
    <declaration type="int" name="cIndex" />
    <scope>
      <scope>
        <declaration type="int" name="indexA" />
        <declaration type="int" name="indexB" />
        <declaration type="int" name="end" />
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
    <comment>loop for k</comment>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multAddTransAB(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multAddTransAB">
    <scope />
    <scope />
    <declaration type="int" name="cIndex" />
    <scope>
      <declaration type="int" name="indexB" />
      <scope>
        <declaration type="int" name="indexA" />
        <declaration type="int" name="end" />
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multAddTransAB(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multAddTransAB_aux">
    <scope />
    <scope />
    <declaration type="int" name="indexC" />
    <scope>
      <scope />
      <scope>
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multAddTransB(org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multAddTransB">
    <scope />
    <scope />
    <declaration type="int" name="cIndex" />
    <declaration type="int" name="aIndexStart" />
    <scope>
      <declaration type="int" name="end" />
      <declaration type="int" name="indexB" />
      <scope>
        <declaration type="int" name="indexA" />
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#mult(double,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="mult_reorder">
    <scope />
    <scope />
    <declaration type="double" name="valA" />
    <declaration type="int" name="indexCbase" />
    <declaration type="int" name="endOfKLoop" />
    <scope>
      <declaration type="int" name="indexA" />
      <declaration type="int" name="indexB" />
      <declaration type="int" name="indexC" />
      <declaration type="int" name="end" />
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>need to assign c.data to a value initially</comment>
    <comment>now add to it</comment>
    <comment>k loop</comment>
    <comment>j loop</comment>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#mult(double,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="mult_small">
    <scope />
    <scope />
    <declaration type="int" name="aIndexStart" />
    <declaration type="int" name="cIndex" />
    <scope>
      <scope>
        <declaration type="double" name="total" />
        <declaration type="int" name="indexA" />
        <declaration type="int" name="indexB" />
        <declaration type="int" name="end" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#mult(double,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="mult_aux">
    <scope />
    <scope />
    <scope>
      <scope />
      <declaration type="int" name="indexA" />
      <scope>
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
    <comment>create a copy of the column in B to avoid cache issues</comment>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multTransA(double,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multTransA_reorder">
    <scope />
    <scope />
    <declaration type="double" name="valA" />
    <scope>
      <declaration type="int" name="indexC_start" />
      <declaration type="int" name="indexB" />
      <declaration type="int" name="end" />
      <declaration type="int" name="indexC" />
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>first assign R</comment>
    <comment>now increment it</comment>
    <comment>this is the loop for j</comment>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multTransA(double,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multTransA_small">
    <scope />
    <scope />
    <declaration type="int" name="cIndex" />
    <scope>
      <scope>
        <declaration type="int" name="indexA" />
        <declaration type="int" name="indexB" />
        <declaration type="int" name="end" />
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
    <comment>loop for k</comment>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multTransAB(double,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multTransAB">
    <scope />
    <scope />
    <declaration type="int" name="cIndex" />
    <scope>
      <declaration type="int" name="indexB" />
      <scope>
        <declaration type="int" name="indexA" />
        <declaration type="int" name="end" />
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multTransAB(double,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multTransAB_aux">
    <scope />
    <scope />
    <declaration type="int" name="indexC" />
    <scope>
      <scope />
      <scope>
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multTransB(double,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multTransB">
    <scope />
    <scope />
    <declaration type="int" name="cIndex" />
    <declaration type="int" name="aIndexStart" />
    <scope>
      <declaration type="int" name="end" />
      <declaration type="int" name="indexB" />
      <scope>
        <declaration type="int" name="indexA" />
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multAdd(double,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multAdd_reorder">
    <scope />
    <scope />
    <declaration type="double" name="valA" />
    <declaration type="int" name="indexCbase" />
    <declaration type="int" name="endOfKLoop" />
    <scope>
      <declaration type="int" name="indexA" />
      <declaration type="int" name="indexB" />
      <declaration type="int" name="indexC" />
      <declaration type="int" name="end" />
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>need to assign c.data to a value initially</comment>
    <comment>now add to it</comment>
    <comment>k loop</comment>
    <comment>j loop</comment>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multAdd(double,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multAdd_small">
    <scope />
    <scope />
    <declaration type="int" name="aIndexStart" />
    <declaration type="int" name="cIndex" />
    <scope>
      <scope>
        <declaration type="double" name="total" />
        <declaration type="int" name="indexA" />
        <declaration type="int" name="indexB" />
        <declaration type="int" name="end" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multAdd(double,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multAdd_aux">
    <scope />
    <scope />
    <scope>
      <scope />
      <declaration type="int" name="indexA" />
      <scope>
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
    <comment>create a copy of the column in B to avoid cache issues</comment>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multAddTransA(double,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multAddTransA_reorder">
    <scope />
    <scope />
    <declaration type="double" name="valA" />
    <scope>
      <declaration type="int" name="indexC_start" />
      <declaration type="int" name="indexB" />
      <declaration type="int" name="end" />
      <declaration type="int" name="indexC" />
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>first assign R</comment>
    <comment>now increment it</comment>
    <comment>this is the loop for j</comment>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multAddTransA(double,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multAddTransA_small">
    <scope />
    <scope />
    <declaration type="int" name="cIndex" />
    <scope>
      <scope>
        <declaration type="int" name="indexA" />
        <declaration type="int" name="indexB" />
        <declaration type="int" name="end" />
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
    <comment>loop for k</comment>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multAddTransAB(double,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multAddTransAB">
    <scope />
    <scope />
    <declaration type="int" name="cIndex" />
    <scope>
      <declaration type="int" name="indexB" />
      <scope>
        <declaration type="int" name="indexA" />
        <declaration type="int" name="end" />
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multAddTransAB(double,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multAddTransAB_aux">
    <scope />
    <scope />
    <declaration type="int" name="indexC" />
    <scope>
      <scope />
      <scope>
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <see>org.ejml.ops.CommonOps#multAddTransB(double,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F,org.ejml.data.RowD1Matrix64F)</see>
  </javadoc>
  <method type="void" name="multAddTransB">
    <scope />
    <scope />
    <declaration type="int" name="cIndex" />
    <declaration type="int" name="aIndexStart" />
    <scope>
      <declaration type="int" name="end" />
      <declaration type="int" name="indexB" />
      <scope>
        <declaration type="int" name="indexA" />
        <declaration type="double" name="total" />
        <scope />
      </scope>
    </scope>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
