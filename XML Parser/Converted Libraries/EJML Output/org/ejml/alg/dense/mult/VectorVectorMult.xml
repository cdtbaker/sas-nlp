<?xml version="1.0" encoding="UTF-8"?>
<class name="VectorVectorMult">
  <javadoc>
    <text>Operations that involve multiplication of two vectors.</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <param>x</param>
    <param>y</param>
    <param>A</param>
  </javadoc>
  <method type="void" name="mult">
    <comment>sanity check inputs</comment>
    <comment>call the outer or inner product</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Computes the inner product of the two vectors.  In geometry this is known as the dot product.&lt;br&gt;
 * &lt;br&gt;
 * &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; x&lt;sub&gt;k&lt;/sub&gt; * y&lt;sub&gt;k&lt;/sub&gt;&lt;br&gt;
 * where x and y are vectors with n elements.
 * &lt;/p&gt;
 * &lt;p&gt;
 * These functions are often used inside of highly optimized code and therefor sanity checks are
 * kept to a minimum.  It is not recommended that any of these functions be used directly.
 * &lt;/p&gt;</text>
    <param>x A vector with n elements. Not modified.</param>
    <param>y A vector with n elements. Not modified.</param>
    <return>The inner product of the two vectors.</return>
  </javadoc>
  <method type="double" name="innerProd">
    <declaration type="int" name="m" />
    <declaration type="double" name="total" />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * x&lt;sup&gt;T&lt;/sup&gt;Ay
 * &lt;/p&gt;</text>
    <param>x  A vector with n elements. Not modified.</param>
    <param>A  A matrix with n by m elements.  Not modified.</param>
    <param>y  A vector with m elements. Not modified.</param>
    <return>The results.</return>
  </javadoc>
  <method type="double" name="innerProdA">
    <declaration type="int" name="n" />
    <declaration type="int" name="m" />
    <declaration type="double" name="result" />
    <scope>
      <declaration type="double" name="total" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * x&lt;sup&gt;T&lt;/sup&gt;A&lt;sup&gt;T&lt;/sup&gt;y
 * &lt;/p&gt;</text>
    <param>x  A vector with n elements. Not modified.</param>
    <param>A  A matrix with n by n elements.  Not modified.</param>
    <param>y  A vector with n elements. Not modified.</param>
    <return>The results.</return>
  </javadoc>
  <method type="double" name="innerProdTranA">
    <declaration type="int" name="n" />
    <declaration type="double" name="result" />
    <scope>
      <declaration type="double" name="total" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Sets A &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt; equal to an outer product multiplication of the two
 * vectors.  This is also known as a rank-1 operation.&lt;br&gt;
 * &lt;br&gt;
 * A = x * y'
 * where x &amp;isin; &amp;real; &lt;sup&gt;m&lt;/sup&gt; and y &amp;isin; &amp;real; &lt;sup&gt;n&lt;/sup&gt; are vectors.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Which is equivalent to: A&lt;sub&gt;ij&lt;/sub&gt; = x&lt;sub&gt;i&lt;/sub&gt;*y&lt;sub&gt;j&lt;/sub&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * These functions are often used inside of highly optimized code and therefor sanity checks are
 * kept to a minimum.  It is not recommended that any of these functions be used directly.
 * &lt;/p&gt;</text>
    <param>x A vector with m elements. Not modified.</param>
    <param>y A vector with n elements. Not modified.</param>
    <param>A A Matrix with m by n elements. Modified.</param>
  </javadoc>
  <method type="void" name="outerProd">
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <declaration type="int" name="index" />
    <scope>
      <declaration type="double" name="xdat" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Adds to A &amp;isin; &amp;real; &lt;sup&gt;m &amp;times; n&lt;/sup&gt; the results of an outer product multiplication
 * of the two vectors.  This is also known as a rank 1 update.&lt;br&gt;
 * &lt;br&gt;
 * A = A + &amp;gamma; x * y&lt;sup&gt;T&lt;/sup&gt;
 * where x &amp;isin; &amp;real; &lt;sup&gt;m&lt;/sup&gt; and y &amp;isin; &amp;real; &lt;sup&gt;n&lt;/sup&gt; are vectors.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Which is equivalent to: A&lt;sub&gt;ij&lt;/sub&gt; = A&lt;sub&gt;ij&lt;/sub&gt; + &amp;gamma; x&lt;sub&gt;i&lt;/sub&gt;*y&lt;sub&gt;j&lt;/sub&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * These functions are often used inside of highly optimized code and therefor sanity checks are
 * kept to a minimum.  It is not recommended that any of these functions be used directly.
 * &lt;/p&gt;</text>
    <param>gamma A multiplication factor for the outer product.</param>
    <param>x A vector with m elements. Not modified.</param>
    <param>y A vector with n elements. Not modified.</param>
    <param>A A Matrix with m by n elements. Modified.</param>
  </javadoc>
  <method type="void" name="addOuterProd">
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <declaration type="int" name="index" />
    <scope>
      <scope>
        <declaration type="double" name="xdat" />
        <scope />
      </scope>
    </scope>
    <scope>
      <scope>
        <declaration type="double" name="xdat" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Multiplies a householder reflection against a vector:&lt;br&gt;
 * &lt;br&gt;
 * y = (I + &amp;gamma; u u&lt;sup&gt;T&lt;/sup&gt;)x&lt;br&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * The Householder reflection is used in some implementations of QR decomposition.
 * &lt;/p&gt;</text>
    <param>u A vector. Not modified.</param>
    <param>x a vector. Not modified.</param>
    <param>y Vector where the result are written to.</param>
  </javadoc>
  <method type="void" name="householder">
    <declaration type="int" name="n" />
    <declaration type="double" name="sum" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Performs a rank one update on matrix A using vectors u and w.  The results are stored in B.&lt;br&gt;
 * &lt;br&gt;
 * B = A + &amp;gamma; u w&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * This is called a rank1 update because the matrix u w&lt;sup&gt;T&lt;/sup&gt; has a rank of 1.  Both A and B
 * can be the same matrix instance, but there is a special rank1Update for that.
 * &lt;/p&gt;</text>
    <param>gamma A scalar.</param>
    <param>A A m by m matrix. Not modified.</param>
    <param>u A vector with m elements.  Not modified.</param>
    <param>w A vector with m elements.  Not modified.</param>
    <param>B A m by m matrix where the results are stored. Modified.</param>
  </javadoc>
  <method type="void" name="rank1Update">
    <declaration type="int" name="n" />
    <declaration type="int" name="matrixIndex" />
    <scope>
      <declaration type="double" name="elementU" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Performs a rank one update on matrix A using vectors u and w.  The results are stored in A.&lt;br&gt;
 * &lt;br&gt;
 * A = A + &amp;gamma; u w&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * This is called a rank1 update because the matrix u w&lt;sup&gt;T&lt;/sup&gt; has a rank of 1.
 * &lt;/p&gt;</text>
    <param>gamma A scalar.</param>
    <param>A A m by m matrix. Modified.</param>
    <param>u A vector with m elements.  Not modified.</param>
  </javadoc>
  <method type="void" name="rank1Update">
    <declaration type="int" name="n" />
    <declaration type="int" name="matrixIndex" />
    <scope>
      <declaration type="double" name="elementU" />
      <scope />
    </scope>
  </method>
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>TODO write this</comment>
  <comment>TODO create a VectorOps for meer mortals to use?</comment>
  <comment>TODO have DenseMatrix64F flag itself as being a vector to make checks faster?</comment>
  <comment>TODO better name for this</comment>
</class>
