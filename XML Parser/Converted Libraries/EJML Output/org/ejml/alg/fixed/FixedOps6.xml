<?xml version="1.0" encoding="UTF-8"?>
<class name="FixedOps6">
  <javadoc>
    <text>&lt;p&gt;Common matrix operations for fixed sized matrices which are 6 x 6 or 6 element vectors.&lt;/p&gt;
 * &lt;p&gt;DO NOT MODIFY.  Automatically generated code created by GenerateFixedOps&lt;/p&gt;</text>
    <author>Peter Abeles</author>
  </javadoc>
  <javadoc>
    <text>&lt;p&gt;Performs the following operation:&lt;br&gt;
 * &lt;br&gt;
 * c = a + b &lt;br&gt;
 * c&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; + b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * Matrix C can be the same instance as Matrix A and/or B.
 * &lt;/p&gt;</text>
    <param>a A Matrix. Not modified.</param>
    <param>b A Matrix. Not modified.</param>
    <param>c A Matrix where the results are stored. Modified.</param>
  </javadoc>
  <method type="void" name="add" />
  <javadoc>
    <text>&lt;p&gt;Performs the following operation:&lt;br&gt;
 * &lt;br&gt;
 * a = a + b &lt;br&gt;
 * a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; + b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
 * &lt;/p&gt;</text>
    <param>a A Matrix. Modified.</param>
    <param>b A Matrix. Not modified.</param>
  </javadoc>
  <method type="void" name="addEquals" />
  <javadoc>
    <text>Performs an in-place transpose.  This algorithm is only efficient for square
 * matrices.</text>
    <param>m The matrix that is to be transposed. Modified.</param>
  </javadoc>
  <method type="void" name="transpose">
    <declaration type="double" name="tmp" />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Transposes matrix 'a' and stores the results in 'b':&lt;br&gt;
 * &lt;br&gt;
 * b&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ji&lt;/sub&gt;&lt;br&gt;
 * where 'b' is the transpose of 'a'.
 * &lt;/p&gt;</text>
    <param>input The original matrix.  Not modified.</param>
    <param>output Where the transpose is stored. If null a new matrix is created. Modified.</param>
    <return>The transposed matrix.</return>
  </javadoc>
  <method type="FixedMatrix6x6_64F" name="transpose" />
  <javadoc>
    <text>&lt;p&gt;Performs the following operation:&lt;br&gt;
 * &lt;br&gt;
 * c = a * b &lt;br&gt;
 * &lt;br&gt;
 * c&lt;sub&gt;ij&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ik&lt;/sub&gt; * b&lt;sub&gt;kj&lt;/sub&gt;}
 * &lt;/p&gt;</text>
    <param>a The left matrix in the multiplication operation. Not modified.</param>
    <param>b The right matrix in the multiplication operation. Not modified.</param>
    <param>c Where the results of the operation are stored. Modified.</param>
  </javadoc>
  <method type="void" name="mult" />
  <javadoc>
    <text>&lt;p&gt;Performs the following operation:&lt;br&gt;
 * &lt;br&gt;
 * c = a&lt;sup&gt;T&lt;/sup&gt; * b &lt;br&gt;
 * &lt;br&gt;
 * c&lt;sub&gt;ij&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ki&lt;/sub&gt; * b&lt;sub&gt;kj&lt;/sub&gt;}
 * &lt;/p&gt;</text>
    <param>a The left matrix in the multiplication operation. Not modified.</param>
    <param>b The right matrix in the multiplication operation. Not modified.</param>
    <param>c Where the results of the operation are stored. Modified.</param>
  </javadoc>
  <method type="void" name="multTransA" />
  <javadoc>
    <text>&lt;p&gt;
 * Performs the following operation:&lt;br&gt;
 * &lt;br&gt;
 * c = a&lt;sup&gt;T&lt;/sup&gt; * b&lt;sup&gt;T&lt;/sup&gt;&lt;br&gt;
 * c&lt;sub&gt;ij&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ki&lt;/sub&gt; * b&lt;sub&gt;jk&lt;/sub&gt;}
 * &lt;/p&gt;</text>
    <param>a The left matrix in the multiplication operation. Not modified.</param>
    <param>b The right matrix in the multiplication operation. Not modified.</param>
    <param>c Where the results of the operation are stored. Modified.</param>
  </javadoc>
  <method type="void" name="multTransAB" />
  <javadoc>
    <text>&lt;p&gt;
 * Performs the following operation:&lt;br&gt;
 * &lt;br&gt;
 * c = a * b&lt;sup&gt;T&lt;/sup&gt; &lt;br&gt;
 * c&lt;sub&gt;ij&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ik&lt;/sub&gt; * b&lt;sub&gt;jk&lt;/sub&gt;}
 * &lt;/p&gt;</text>
    <param>a The left matrix in the multiplication operation. Not modified.</param>
    <param>b The right matrix in the multiplication operation. Not modified.</param>
    <param>c Where the results of the operation are stored. Modified.</param>
  </javadoc>
  <method type="void" name="multTransB" />
  <javadoc>
    <text>&lt;p&gt;Performs matrix to vector multiplication:&lt;br&gt;
 * &lt;br&gt;
 * c = a * b &lt;br&gt;
 * &lt;br&gt;
 * c&lt;sub&gt;i&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { a&lt;sub&gt;ik&lt;/sub&gt; * b&lt;sub&gt;k&lt;/sub&gt;}
 * &lt;/p&gt;</text>
    <param>a The left matrix in the multiplication operation. Not modified.</param>
    <param>b The right vector in the multiplication operation. Not modified.</param>
    <param>c Where the results of the operation are stored. Modified.</param>
  </javadoc>
  <method type="void" name="mult" />
  <javadoc>
    <text>&lt;p&gt;Performs vector to matrix multiplication:&lt;br&gt;
 * &lt;br&gt;
 * c = a * b &lt;br&gt;
 * &lt;br&gt;
 * c&lt;sub&gt;j&lt;/sub&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { b&lt;sub&gt;k&lt;/sub&gt; * a&lt;sub&gt;kj&lt;/sub&gt; }
 * &lt;/p&gt;</text>
    <param>a The left vector in the multiplication operation. Not modified.</param>
    <param>b The right matrix in the multiplication operation. Not modified.</param>
    <param>c Where the results of the operation are stored. Modified.</param>
  </javadoc>
  <method type="void" name="mult" />
  <javadoc>
    <text>&lt;p&gt;Performs the vector dot product:&lt;br&gt;
 * &lt;br&gt;
 * c = a * b &lt;br&gt;
 * &lt;br&gt;
 * c&gt; = &amp;sum;&lt;sub&gt;k=1:n&lt;/sub&gt; { b&lt;sub&gt;k&lt;/sub&gt; * a&lt;sub&gt;k&lt;/sub&gt; }
 * &lt;/p&gt;</text>
    <param>a The left vector in the multiplication operation. Not modified.</param>
    <param>b The right matrix in the multiplication operation. Not modified.</param>
    <return>The dot product</return>
  </javadoc>
  <method type="double" name="dot" />
  <javadoc>
    <text>Sets all the diagonal elements equal to one and everything else equal to zero.
 * If this is a square matrix then it will be an identity matrix.</text>
    <param>a A matrix.</param>
  </javadoc>
  <method type="void" name="setIdentity" />
  <javadoc>
    <text>&lt;p&gt;
 * This computes the trace of the matrix:&lt;br&gt;
 * &lt;br&gt;
 * trace = &amp;sum;&lt;sub&gt;i=1:n&lt;/sub&gt; { a&lt;sub&gt;ii&lt;/sub&gt; }
 * &lt;/p&gt;
 * &lt;p&gt;
 * The trace is only defined for square matrices.
 * &lt;/p&gt;</text>
    <param>a A square matrix.  Not modified.</param>
  </javadoc>
  <method type="double" name="trace" />
  <javadoc>
    <text>&lt;p&gt;
 * Extracts all diagonal elements from 'input' and places them inside the 'out' vector. Elements
 * are in sequential order.
 * &lt;/p&gt;</text>
    <param>input Matrix.  Not modified.</param>
    <param>out Vector containing diagonal elements.  Modified.</param>
  </javadoc>
  <method type="void" name="diag" />
  <javadoc>
    <text>&lt;p&gt;
 * Returns the value of the element in the matrix that has the largest value.&lt;br&gt;
 * &lt;br&gt;
 * Max{ a&lt;sub&gt;ij&lt;/sub&gt; } for all i and j&lt;br&gt;
 * &lt;/p&gt;</text>
    <param>a A matrix. Not modified.</param>
    <return>The max element value of the matrix.</return>
  </javadoc>
  <method type="double" name="elementMax">
    <declaration type="double" name="max" />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Returns the absolute value of the element in the matrix that has the largest absolute value.&lt;br&gt;
 * &lt;br&gt;
 * Max{ |a&lt;sub&gt;ij&lt;/sub&gt;| } for all i and j&lt;br&gt;
 * &lt;/p&gt;</text>
    <param>a A matrix. Not modified.</param>
    <return>The max abs element value of the matrix.</return>
  </javadoc>
  <method type="double" name="elementMaxAbs">
    <declaration type="double" name="max" />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Returns the value of the element in the matrix that has the minimum value.&lt;br&gt;
 * &lt;br&gt;
 * Min{ a&lt;sub&gt;ij&lt;/sub&gt; } for all i and j&lt;br&gt;
 * &lt;/p&gt;</text>
    <param>a A matrix. Not modified.</param>
    <return>The value of element in the matrix with the minimum value.</return>
  </javadoc>
  <method type="double" name="elementMin">
    <declaration type="double" name="min" />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Returns the absolute value of the element in the matrix that has the smallest absolute value.&lt;br&gt;
 * &lt;br&gt;
 * Min{ |a&lt;sub&gt;ij&lt;/sub&gt;| } for all i and j&lt;br&gt;
 * &lt;/p&gt;</text>
    <param>a A matrix. Not modified.</param>
    <return>The max element value of the matrix.</return>
  </javadoc>
  <method type="double" name="elementMinAbs">
    <declaration type="double" name="min" />
  </method>
  <javadoc>
    <text>&lt;p&gt;Performs the an element by element multiplication operation:&lt;br&gt;
 * &lt;br&gt;
 * a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; * b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
 * &lt;/p&gt;</text>
    <param>a The left matrix in the multiplication operation. Modified.</param>
    <param>b The right matrix in the multiplication operation. Not modified.</param>
  </javadoc>
  <method type="void" name="elementMult" />
  <javadoc>
    <text>&lt;p&gt;Performs the an element by element multiplication operation:&lt;br&gt;
 * &lt;br&gt;
 * c&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; * b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
 * &lt;/p&gt;</text>
    <param>a The left matrix in the multiplication operation. Not modified.</param>
    <param>b The right matrix in the multiplication operation. Not modified.</param>
    <param>c Where the results of the operation are stored. Modified.</param>
  </javadoc>
  <method type="void" name="elementMult" />
  <javadoc>
    <text>&lt;p&gt;Performs the an element by element division operation:&lt;br&gt;
 * &lt;br&gt;
 * a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; / b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
 * &lt;/p&gt;</text>
    <param>a The left matrix in the division operation. Modified.</param>
    <param>b The right matrix in the division operation. Not modified.</param>
  </javadoc>
  <method type="void" name="elementDiv" />
  <javadoc>
    <text>&lt;p&gt;Performs the an element by element division operation:&lt;br&gt;
 * &lt;br&gt;
 * c&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt; / b&lt;sub&gt;ij&lt;/sub&gt; &lt;br&gt;
 * &lt;/p&gt;</text>
    <param>a The left matrix in the division operation. Not modified.</param>
    <param>b The right matrix in the division operation. Not modified.</param>
    <param>c Where the results of the operation are stored. Modified.</param>
  </javadoc>
  <method type="void" name="elementDiv" />
  <javadoc>
    <text>&lt;p&gt;
 * Performs an in-place element by element scalar multiplication.&lt;br&gt;
 * &lt;br&gt;
 * a&lt;sub&gt;ij&lt;/sub&gt; = &amp;alpha;*a&lt;sub&gt;ij&lt;/sub&gt;
 * &lt;/p&gt;</text>
    <param>a The matrix that is to be scaled.  Modified.</param>
    <param>alpha the amount each element is multiplied by.</param>
  </javadoc>
  <method type="void" name="scale" />
  <javadoc>
    <text>&lt;p&gt;
 * Performs an element by element scalar multiplication.&lt;br&gt;
 * &lt;br&gt;
 * b&lt;sub&gt;ij&lt;/sub&gt; = &amp;alpha;*a&lt;sub&gt;ij&lt;/sub&gt;
 * &lt;/p&gt;</text>
    <param>alpha the amount each element is multiplied by.</param>
    <param>a The matrix that is to be scaled.  Not modified.</param>
    <param>b Where the scaled matrix is stored. Modified.</param>
  </javadoc>
  <method type="void" name="scale" />
  <javadoc>
    <text>&lt;p&gt;
 * Performs an in-place element by element scalar division.&lt;br&gt;
 * &lt;br&gt;
 * a&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;ij&lt;/sub&gt;/&amp;alpha;
 * &lt;/p&gt;</text>
    <param>a The matrix whose elements are to be divided.  Modified.</param>
    <param>alpha the amount each element is divided by.</param>
  </javadoc>
  <method type="void" name="divide" />
  <javadoc>
    <text>&lt;p&gt;
 * Performs an element by element scalar division.&lt;br&gt;
 * &lt;br&gt;
 * b&lt;sub&gt;ij&lt;/sub&gt; = *a&lt;sub&gt;ij&lt;/sub&gt; /&amp;alpha;
 * &lt;/p&gt;</text>
    <param>alpha the amount each element is divided by.</param>
    <param>a The matrix whose elements are to be divided.  Not modified.</param>
    <param>b Where the results are stored. Modified.</param>
  </javadoc>
  <method type="void" name="divide" />
  <javadoc>
    <text>&lt;p&gt;
 * Changes the sign of every element in the matrix.&lt;br&gt;
 * &lt;br&gt;
 * a&lt;sub&gt;ij&lt;/sub&gt; = -a&lt;sub&gt;ij&lt;/sub&gt;
 * &lt;/p&gt;</text>
    <param>a A matrix. Modified.</param>
  </javadoc>
  <method type="void" name="changeSign" />
  <javadoc>
    <text>&lt;p&gt;
 * Sets every element in the matrix to the specified value.&lt;br&gt;
 * &lt;br&gt;
 * a&lt;sub&gt;ij&lt;/sub&gt; = value
 * &lt;p&gt;</text>
    <param>a A matrix whose elements are about to be set. Modified.</param>
    <param>v The value each element will have.</param>
  </javadoc>
  <method type="void" name="fill" />
  <comment>Copyright (c) 2009-2013, Peter Abeles. All Rights Reserved.

 This file is part of Efficient Java Matrix Library (EJML).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
