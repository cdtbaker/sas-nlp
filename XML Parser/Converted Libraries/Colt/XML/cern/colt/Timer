<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt">
        <class name="Timer" extends="PersistentObject" line="11">
            <javadoc line="11">
                A handy stopwatch for benchmarking.
                 * Like a real stop watch used on ancient running tracks you can start the watch, stop it,
                 * start it again, stop it again, display the elapsed time and reset the watch.                
            </javadoc>
            <declaration name="baseTime" type="long" line="17"/>
            <declaration name="elapsedTime" type="long" line="18"/>
            <declaration name="UNIT" type="long" line="20"/>
            <javadoc line="21">
                Constructs a new timer, initially not started. Use start() to start the timer.                
            </javadoc>
            <method name="Timer" type="constructor" line="24"/>
            <javadoc line="27">
                Prints the elapsed time on System.out                
                <@return>
                    n <tt>this</tt> (for convenience only).                    
                </@return>
            </javadoc>
            <method name="display" type="Timer" line="31"/>
            <javadoc line="35">
                Same as &lt;tt&gt;seconds()&lt;/tt&gt;.                
            </javadoc>
            <method name="elapsedTime" type="float" line="38"/>
            <javadoc line="41">
                Returns the elapsed time in milli seconds; does not stop the timer, if started.                
            </javadoc>
            <method name="millis" type="long" line="44">
                <declaration name="elapsed" type="long" line="45"/>
                <scope line="46"/>
            </method>
            <javadoc line="51">
                &lt;tt&gt;T = this - other&lt;/tt&gt;; Constructs and returns a new timer which is the difference of the receiver and the other timer.
                 * The new timer is not started.                
                <@param>
                    m other the timer to subtract.                    
                </@param>
                <@return>
                    n a new timer.                    
                </@return>
            </javadoc>
            <method name="minus" type="Timer" line="57">
                <declaration name="copy" type="Timer" line="58"/>
            </method>
            <javadoc line="62">
                Returns the elapsed time in minutes; does not stop the timer, if started.                
            </javadoc>
            <method name="minutes" type="float" line="65"/>
            <javadoc line="68">
                &lt;tt&gt;T = this + other&lt;/tt&gt;; Constructs and returns a new timer which is the sum of the receiver and the other timer.
                 * The new timer is not started.                
                <@param>
                    m other the timer to add.                    
                </@param>
                <@return>
                    n a new timer.                    
                </@return>
            </javadoc>
            <method name="plus" type="Timer" line="74">
                <declaration name="copy" type="Timer" line="75"/>
            </method>
            <javadoc line="79">
                Resets the timer.                
                <@return>
                    n <tt>this</tt> (for convenience only).                    
                </@return>
            </javadoc>
            <method name="reset" type="Timer" line="83"/>
            <javadoc line="88">
                Returns the elapsed time in seconds; does not stop the timer, if started.                
            </javadoc>
            <method name="seconds" type="float" line="91"/>
            <javadoc line="94">
                Starts the timer.                
                <@return>
                    n <tt>this</tt> (for convenience only).                    
                </@return>
            </javadoc>
            <method name="start" type="Timer" line="98"/>
            <javadoc line="102">
                Stops the timer. You can start it again later, if necessary.                
                <@return>
                    n <tt>this</tt> (for convenience only).                    
                </@return>
            </javadoc>
            <method name="stop" type="Timer" line="106">
                <scope line="107"/>
            </method>
            <javadoc line="113">
                Shows how to use a timer in convenient ways.                
            </javadoc>
            <method name="test" type="void" line="116">
                <comment line="117">
                    benchmark this piece                    
                </comment>
                <comment line="117">
                    do something we do not want to benchmark                    
                </comment>
                <comment line="117">
                    benchmark another piece and add to last benchmark                    
                </comment>
                <comment line="117">
                    benchmark yet another piece independently                    
                </comment>
                <comment line="117">
                    reset(); //set timer to zero                    
                </comment>
                <declaration name="t" type="Timer" line="118"/>
                <declaration name="j" type="int" line="119"/>
                <scope line="120"/>
                <scope line="131"/>
                <scope line="140"/>
                <scope line="151"/>
            </method>
            <javadoc line="156">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="159"/>
        </class>
    </source>