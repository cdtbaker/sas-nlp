<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix">
        <import package="cern.colt.matrix.impl.DenseDoubleMatrix1D"/>
        <import package="cern.colt.matrix.impl.SparseDoubleMatrix1D"/>
        <class name="DoubleFactory1D" extends="cern.colt.PersistentObject" line="13">
            <javadoc line="13">
                Factory for convenient construction of 1-d matrices holding &lt;tt&gt;double&lt;/tt&gt; cells.
                 * Use idioms like &lt;tt&gt;DoubleFactory1D.dense.make(1000)&lt;/tt&gt; to construct dense matrices, 
                 * &lt;tt&gt;DoubleFactory1D.sparse.make(1000)&lt;/tt&gt; to construct sparse matrices.
                 * If the factory is used frequently it might be useful to streamline the notation. 
                 * For example by aliasing:
                 * &lt;table&gt;
                 * &lt;td class=&quot;PRE&quot;&gt; 
                 * &lt;pre&gt;
                 * DoubleFactory1D F = DoubleFactory1D.dense;
                 * F.make(1000);
                 * F.descending(10);
                 * F.random(3);
                 * ...
                 * &lt;/pre&gt;
                 * &lt;/td&gt;
                 * &lt;/table&gt;                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="dense" type="DoubleFactory1D" line="36"/>
            <javadoc line="36">
                A factory producing dense matrices.                
            </javadoc>
            <declaration name="sparse" type="DoubleFactory1D" line="41"/>
            <javadoc line="41">
                A factory producing sparse matrices.                
            </javadoc>
            <javadoc line="45">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="DoubleFactory1D" type="constructor" line="48"/>
            <javadoc line="49">
                C = A||B; Constructs a new matrix which is the concatenation of two other matrices.
                 * Example: &lt;tt&gt;0 1&lt;/tt&gt; append &lt;tt&gt;3 4&lt;/tt&gt; --&gt; &lt;tt&gt;0 1 3 4&lt;/tt&gt;.                
            </javadoc>
            <method name="append" type="DoubleMatrix1D" line="53">
                <comment line="54">
                    concatenate                    
                </comment>
                <declaration name="matrix" type="DoubleMatrix1D" line="55"/>
            </method>
            <javadoc line="60">
                Constructs a matrix with cells having ascending values.
                 * For debugging purposes.
                 * Example: &lt;tt&gt;0 1 2&lt;/tt&gt;                
            </javadoc>
            <method name="ascending" type="DoubleMatrix1D" line="65">
                <declaration name="F" type="cern.jet.math.Functions" line="66"/>
            </method>
            <javadoc line="69">
                Constructs a matrix with cells having descending values.
                 * For debugging purposes.
                 * Example: &lt;tt&gt;2 1 0&lt;/tt&gt;                
            </javadoc>
            <method name="descending" type="DoubleMatrix1D" line="74">
                <declaration name="matrix" type="DoubleMatrix1D" line="75"/>
                <declaration name="v" type="int" line="76"/>
                <scope line="77"/>
            </method>
            <javadoc line="82">
                Constructs a matrix with the given cell values.
                 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <@param>
                    m values The values to be filled into the new matrix.                    
                </@param>
            </javadoc>
            <method name="make" type="DoubleMatrix1D" line="88"/>
            <javadoc line="92">
                Constructs a matrix which is the concatenation of all given parts.
                 * Cells are copied.                
            </javadoc>
            <method name="make" type="DoubleMatrix1D" line="96">
                <declaration name="size" type="int" line="99"/>
                <declaration name="vector" type="DoubleMatrix1D" line="102"/>
                <scope line="104"/>
            </method>
            <javadoc line="111">
                Constructs a matrix with the given shape, each cell initialized with zero.                
            </javadoc>
            <method name="make" type="DoubleMatrix1D" line="114"/>
            <javadoc line="118">
                Constructs a matrix with the given shape, each cell initialized with the given value.                
            </javadoc>
            <method name="make" type="DoubleMatrix1D" line="121"/>
            <javadoc line="124">
                Constructs a matrix from the values of the given list.
                 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <@param>
                    m values The values to be filled into the new matrix.                    
                </@param>
                <@return>
                    n a new matrix.                    
                </@return>
            </javadoc>
            <method name="make" type="DoubleMatrix1D" line="131">
                <declaration name="size" type="int" line="132"/>
                <declaration name="vector" type="DoubleMatrix1D" line="133"/>
            </method>
            <javadoc line="137">
                Constructs a matrix with uniformly distributed values in &lt;tt&gt;(0,1)&lt;/tt&gt; (exclusive).                
            </javadoc>
            <method name="random" type="DoubleMatrix1D" line="140"/>
            <javadoc line="143">
                C = A||A||..||A; Constructs a new matrix which is concatenated &lt;tt&gt;repeat&lt;/tt&gt; times.
                 * Example:
                 * &lt;pre&gt;
                 * 0 1
                 * repeat(3) --&gt;
                 * 0 1 0 1 0 1
                 * &lt;/pre&gt;                
            </javadoc>
            <method name="repeat" type="DoubleMatrix1D" line="152">
                <declaration name="size" type="int" line="153"/>
                <declaration name="matrix" type="DoubleMatrix1D" line="154"/>
                <scope line="155"/>
            </method>
            <javadoc line="160">
                Constructs a randomly sampled matrix with the given shape.
                 * Randomly picks exactly &lt;tt&gt;Math.round(size*nonZeroFraction)&lt;/tt&gt; cells and initializes them to &lt;tt&gt;value&lt;/tt&gt;, all the rest will be initialized to zero.
                 * Note that this is not the same as setting each cell with probability &lt;tt&gt;nonZeroFraction&lt;/tt&gt; to &lt;tt&gt;value&lt;/tt&gt;.                
                <@throws>
                    s IllegalArgumentException if <tt>nonZeroFraction < 0 || nonZeroFraction > 1</tt>.                    
                </@throws>
                <@see>
                    e cern.jet.random.sampling.RandomSampler                    
                </@see>
            </javadoc>
            <method name="sample" type="DoubleMatrix1D" line="167">
                <declaration name="epsilon" type="double" line="168"/>
                <declaration name="matrix" type="DoubleMatrix1D" line="173"/>
                <declaration name="n" type="int" line="175"/>
                <declaration name="sampler" type="cern.jet.random.sampling.RandomSamplingAssistant" line="178"/>
                <scope line="179">
                    <scope line="180"/>
                </scope>
            </method>
            <javadoc line="187">
                Constructs a list from the given matrix.
                 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the list, and vice-versa.                
                <@param>
                    m values The values to be filled into the new list.                    
                </@param>
                <@return>
                    n a new list.                    
                </@return>
            </javadoc>
            <method name="toList" type="cern.colt.list.DoubleArrayList" line="194">
                <declaration name="size" type="int" line="195"/>
                <declaration name="list" type="cern.colt.list.DoubleArrayList" line="196"/>
            </method>
        </class>
    </source>