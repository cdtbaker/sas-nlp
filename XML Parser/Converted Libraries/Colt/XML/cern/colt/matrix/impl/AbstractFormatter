<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <class name="AbstractFormatter" extends="cern.colt.PersistentObject" line="11">
            <comment line="12">
                ivate static String[] blanksCache; // for efficient String manipulations                
            </comment>
            <javadoc line="11">
                Abstract base class for flexible, well human readable matrix print formatting.
                 * Value type independent.
                 * A single cell is formatted via a format string.
                 * Columns can be aligned left, centered, right and by decimal point. 
                 * &lt;p&gt;A column can be broader than specified by the parameter &lt;tt&gt;minColumnWidth&lt;/tt&gt; 
                 * (because a cell may not fit into that width) but a column is never smaller than 
                 * &lt;tt&gt;minColumnWidth&lt;/tt&gt;. Normally one does not need to specify &lt;tt&gt;minColumnWidth&lt;/tt&gt;.
                 * Cells in a row are separated by a separator string, similar separators can be set for rows and slices.
                 * For more info, see the concrete subclasses.                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="LEFT" type="String" line="26"/>
            <javadoc line="26">
                The alignment string aligning the cells of a column to the left.                
            </javadoc>
            <declaration name="CENTER" type="String" line="31"/>
            <javadoc line="31">
                The alignment string aligning the cells of a column to its center.                
            </javadoc>
            <declaration name="RIGHT" type="String" line="36"/>
            <javadoc line="36">
                The alignment string aligning the cells of a column to the right.                
            </javadoc>
            <declaration name="DECIMAL" type="String" line="41"/>
            <javadoc line="41">
                The alignment string aligning the cells of a column to the decimal point.                
            </javadoc>
            <declaration name="DEFAULT_MIN_COLUMN_WIDTH" type="int" line="46"/>
            <javadoc line="46">
                The default minimum number of characters a column may have; currently &lt;tt&gt;1&lt;/tt&gt;.                
            </javadoc>
            <declaration name="DEFAULT_COLUMN_SEPARATOR" type="String" line="51"/>
            <javadoc line="51">
                The default string separating any two columns from another; currently &lt;tt&gt;&quot; &quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="DEFAULT_ROW_SEPARATOR" type="String" line="56"/>
            <javadoc line="56">
                The default string separating any two rows from another; currently &lt;tt&gt;&quot;\n&quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="DEFAULT_SLICE_SEPARATOR" type="String" line="61"/>
            <javadoc line="61">
                The default string separating any two slices from another; currently &lt;tt&gt;&quot;\n\n&quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="alignment" type="String" line="67"/>
            <javadoc line="67">
                The default format string for formatting a single cell value; currently &lt;tt&gt;&quot;%G&quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="format" type="String" line="72"/>
            <javadoc line="72">
                The default format string for formatting a single cell value; currently &lt;tt&gt;&quot;%G&quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="minColumnWidth" type="int" line="77"/>
            <javadoc line="77">
                The default minimum number of characters a column may have; currently &lt;tt&gt;1&lt;/tt&gt;.                
            </javadoc>
            <declaration name="columnSeparator" type="String" line="82"/>
            <javadoc line="82">
                The default string separating any two columns from another; currently &lt;tt&gt;&quot; &quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="rowSeparator" type="String" line="87"/>
            <javadoc line="87">
                The default string separating any two rows from another; currently &lt;tt&gt;&quot;\n&quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="sliceSeparator" type="String" line="92"/>
            <javadoc line="92">
                The default string separating any two slices from another; currently &lt;tt&gt;&quot;\n\n&quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="printShape" type="boolean" line="97"/>
            <javadoc line="97">
                Tells whether String representations are to be preceded with summary of the shape; currently &lt;tt&gt;true&lt;/tt&gt;.                
            </javadoc>
            <declaration name="blanksCache" type="String[]" line="103"/>
            <declaration name="factory" type="FormerFactory" line="105"/>
            <scope line="107"/>
            <javadoc line="110">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="AbstractFormatter" type="constructor" line="113"/>
            <javadoc line="114">
                Modifies the strings in a column of the string matrix to be aligned (left,centered,right,decimal).                
            </javadoc>
            <method name="align" type="void" line="117">
                <comment line="118">
                    int[] maxColTrail = new int[columns];                    
                </comment>
                <comment line="118">
                    for each column, determine alignment parameters                    
                </comment>
                <comment line="118">
                    format each row according to alignment parameters                    
                </comment>
                <comment line="118">
                    StringBuffer total = new StringBuffer();                    
                </comment>
                <declaration name="rows" type="int" line="118"/>
                <declaration name="columns" type="int" line="119"/>
                <declaration name="maxColWidth" type="int[]" line="122"/>
                <declaration name="maxColLead" type="int[]" line="123"/>
                <declaration name="isDecimal" type="boolean" line="124"/>
                <scope line="129">
                    <declaration name="maxWidth" type="int" line="130"/>
                    <declaration name="maxLead" type="int" line="131"/>
                    <scope line="133">
                        <declaration name="s" type="String" line="134"/>
                    </scope>
                </scope>
                <scope line="146"/>
            </method>
            <javadoc line="151">
                Converts a row into a string.                
            </javadoc>
            <method name="alignmentCode" type="int" line="154">
                <comment line="155">
                    {-1,0,1,2} = {left,centered,right,decimal point}                    
                </comment>
            </method>
            <javadoc line="162">
                Modifies the strings the string matrix to be aligned (left,centered,right,decimal).                
            </javadoc>
            <method name="alignRow" type="void" line="165">
                <comment line="166">
                    t align = alignmentCode(alignment); //{-1,0,1,2} = {left,centered,right,decimal point}                    
                </comment>
                <declaration name="align" type="int" line="166"/>
                <declaration name="s" type="StringBuffer" line="167"/>
                <declaration name="columns" type="int" line="169"/>
                <scope line="170">
                    <declaration name="c" type="String" line="172"/>
                    <scope line="174"/>
                    <scope line="179"/>
                    <scope line="185"/>
                    <scope line="192"/>
                </scope>
            </method>
            <javadoc line="201">
                Returns a String with &lt;tt&gt;length&lt;/tt&gt; blanks.                
            </javadoc>
            <method name="blanks" type="String" line="204">
                <declaration name="buf" type="StringBuffer" line="208"/>
                <scope line="209"/>
            </method>
            <javadoc line="214">
                Demonstrates how to use this class.                
            </javadoc>
            <method name="demo1" type="void" line="217">
                <comment line="218">
                    parameters
                    Object[][] values = {
                    {3,     0,        -3.4, 0},
                    {5.1   ,0,        +3.0123456789, 0},
                    {16.37, 0.0,       2.5, 0},
                    {-16.3, 0,        -3.012345678E-4, -1},
                    {1236.3456789, 0,  7, -1.2}
                    };
                    String[] formats =         {&quot;%G&quot;, &quot;%1.10G&quot;, &quot;%f&quot;, &quot;%1.2f&quot;, &quot;%0.2e&quot;, null};
                    
                    
                     now the processing
                    int size = formats.length;
                    ObjectMatrix2D matrix = cern.colt.matrix.ObjectFactory2D.dense.make(values);
                    String[] strings = new String[size];
                    String[] sourceCodes = new String[size];
                    String[] htmlStrings = new String[size];
                    String[] htmlSourceCodes = new String[size];
                    
                    for (int i=0; i&lt;size; i++) {
                    String format = formats[i];
                    strings[i] = toString(matrix,format);
                    sourceCodes[i] = toSourceCode(matrix,format);
                    
                     may not compile because of packages not included in the distribution
                    htmlStrings[i] = cern.colt.matrixpattern.Converting.toHTML(strings[i]);
                    htmlSourceCodes[i] = cern.colt.matrixpattern.Converting.toHTML(sourceCodes[i]);                    
                </comment>
            </method>
            <javadoc line="262">
                Demonstrates how to use this class.                
            </javadoc>
            <method name="demo2" type="void" line="265">
                <comment line="266">
                    parameters
                    Object[] values = {
                    5, 0.0, -0.0, -Object.NaN, Object.NaN, 0.00.0, Object.NEGATIVE_INFINITY, Object.POSITIVE_INFINITY, Object.MIN_VALUE, Object.MAX_VALUE
                    5, 0.0, -0.0, -Object.NaN, Object.NaN, 0.00.0, Object.MIN_VALUE, Object.MAX_VALUE , Object.NEGATIVE_INFINITY, Object.POSITIVE_INFINITY
                    Object.MIN_VALUE, Object.MAX_VALUE , Object.NEGATIVE_INFINITY, Object.POSITIVE_INFINITY
                    };
                    String[] formats =         {&quot;%G&quot;, &quot;%1.10G&quot;, &quot;%f&quot;, &quot;%1.2f&quot;, &quot;%0.2e&quot;};
                    String[] formats =         {&quot;%G&quot;, &quot;%1.19G&quot;};
                    
                    
                     now the processing
                    int size = formats.length;
                    ObjectMatrix1D matrix = new DenseObjectMatrix1D(values);
                    
                    String[] strings = new String[size];
                    String[] javaStrings = new String[size];                    
                </comment>
            </method>
            <javadoc line="299">
                Demonstrates how to use this class.                
            </javadoc>
            <method name="demo3" type="void" line="302">
                <comment line="303">
                    cern.colt.Timer timer = new cern.colt.Timer();
                    String s;
                    StringBuffer buf;
                    ObjectMatrix2D matrix = cern.colt.matrix.ObjectFactory2D.dense.make(size,size, value);
                    
                    timer.reset().start();
                    buf = new StringBuffer();
                    for (int i=size; --i &gt;= 0; ) {
                    for (int j=size; --j &gt;= 0; ) {
                    buf.append(matrix.getQuick(i,j));
                    }
                    }
                    buf = null;
                    timer.stop().display();                    
                </comment>
            </method>
            <method name="form" type="String" line="343"/>
            <javadoc line="343">
                Converts a given cell to a String; no alignment considered.                
            </javadoc>
            <method name="format" type="String[][]" line="347"/>
            <javadoc line="347">
                Returns a string representations of all cells; no alignment considered.                
            </javadoc>
            <javadoc line="351">
                Returns a string representations of all cells; no alignment considered.                
            </javadoc>
            <method name="formatRow" type="String[]" line="354">
                <declaration name="formatter" type="Former" line="355"/>
                <declaration name="s" type="int" line="357"/>
                <declaration name="strings" type="String[]" line="358"/>
                <scope line="359"/>
            </method>
            <javadoc line="364">
                Returns the number of characters or the number of characters before the decimal point.                
            </javadoc>
            <method name="lead" type="int" line="367"/>
            <javadoc line="370">
                Returns a String with the given character repeated &lt;tt&gt;length&lt;/tt&gt; times.                
            </javadoc>
            <method name="repeat" type="String" line="373">
                <declaration name="buf" type="StringBuffer" line="376"/>
                <scope line="377"/>
            </method>
            <javadoc line="382">
                Sets the column alignment (left,center,right,decimal).                
                <@param>
                    m alignment the new alignment to be used; must be one of <tt>{LEFT,CENTER,RIGHT,DECIMAL}</tt>.                    
                </@param>
            </javadoc>
            <method name="setAlignment" type="void" line="386"/>
            <javadoc line="389">
                Sets the string separating any two columns from another.                
                <@param>
                    m columnSeparator the new columnSeparator to be used.                    
                </@param>
            </javadoc>
            <method name="setColumnSeparator" type="void" line="393"/>
            <javadoc line="396">
                Sets the way a &lt;i&gt;single&lt;/i&gt; cell value is to be formatted.                
                <@param>
                    m format the new format to be used.                    
                </@param>
            </javadoc>
            <method name="setFormat" type="void" line="400"/>
            <javadoc line="403">
                Sets the minimum number of characters a column may have.                
                <@param>
                    m minColumnWidth the new minColumnWidth to be used.                    
                </@param>
            </javadoc>
            <method name="setMinColumnWidth" type="void" line="407"/>
            <javadoc line="411">
                Specifies whether a string representation of a matrix is to be preceded with a summary of its shape.                
                <@param>
                    m printShape <tt>true</tt> shape summary is printed, otherwise not printed.                    
                </@param>
            </javadoc>
            <method name="setPrintShape" type="void" line="415"/>
            <javadoc line="418">
                Sets the string separating any two rows from another.                
                <@param>
                    m rowSeparator the new rowSeparator to be used.                    
                </@param>
            </javadoc>
            <method name="setRowSeparator" type="void" line="422"/>
            <javadoc line="425">
                Sets the string separating any two slices from another.                
                <@param>
                    m sliceSeparator the new sliceSeparator to be used.                    
                </@param>
            </javadoc>
            <method name="setSliceSeparator" type="void" line="429"/>
            <javadoc line="432">
                Cache for faster string processing.                
            </javadoc>
            <method name="setupBlanksCache" type="void" line="435">
                <comment line="436">
                    Pre-fabricate 40 static strings with 0,1,2,..,39 blanks, for usage within method blanks(length).                    
                </comment>
                <comment line="436">
                    Now, we don&apos;t need to construct and fill them on demand, and garbage collect them again.                    
                </comment>
                <comment line="436">
                    All 40 strings share the identical char[] array, only with different offset and length --&gt; somewhat smaller static memory footprint                    
                </comment>
                <declaration name="size" type="int" line="439"/>
                <declaration name="buf" type="StringBuffer" line="441"/>
                <declaration name="str" type="String" line="443"/>
                <scope line="444"/>
            </method>
            <javadoc line="449">
                Returns a short string representation describing the shape of the matrix.                
            </javadoc>
            <method name="shape" type="String" line="452">
                <comment line="453">
                    return &quot;Matrix1D of size=&quot;+matrix.size();                    
                </comment>
                <comment line="453">
                    return matrix.size()+&quot; element matrix&quot;;                    
                </comment>
                <comment line="453">
                    return &quot;matrix(&quot;+matrix.size()+&quot;)&quot;;                    
                </comment>
            </method>
            <javadoc line="458">
                Returns a short string representation describing the shape of the matrix.                
            </javadoc>
            <method name="shape" type="String" line="461"/>
            <javadoc line="464">
                Returns a short string representation describing the shape of the matrix.                
            </javadoc>
            <method name="shape" type="String" line="467"/>
            <javadoc line="470">
                Returns a single string representation of the given string matrix.                
                <@param>
                    m strings the matrix to be converted to a single string.                    
                </@param>
            </javadoc>
            <method name="toString" type="String" line="474">
                <declaration name="rows" type="int" line="475"/>
                <declaration name="columns" type="int" line="476"/>
                <declaration name="total" type="StringBuffer" line="478"/>
                <declaration name="s" type="StringBuffer" line="479"/>
                <scope line="480">
                    <scope line="482"/>
                </scope>
            </method>
            <javadoc line="492">
                Returns a string representation of the given matrix.                
                <@param>
                    m matrix the matrix to convert.                    
                </@param>
            </javadoc>
            <method name="toString" type="String" line="496">
                <declaration name="strings" type="String[][]" line="497"/>
                <declaration name="total" type="StringBuffer" line="499"/>
            </method>
        </class>
    </source>