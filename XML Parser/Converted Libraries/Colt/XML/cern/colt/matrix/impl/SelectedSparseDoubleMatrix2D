<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <import package="cern.colt.map.AbstractIntDoubleMap"/>
        <import package="cern.colt.matrix.DoubleMatrix1D"/>
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <class name="SelectedSparseDoubleMatrix2D" extends="DoubleMatrix2D" line="14">
            <comment line="15">
                                
            </comment>
            <javadoc line="14">
                Selection view on sparse 2-d matrices holding &lt;tt&gt;double&lt;/tt&gt; elements.
                 * First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                 * &lt;p&gt;
                 * &lt;b&gt;Implementation:&lt;/b&gt;
                 * &lt;p&gt;
                 * Objects of this class are typically constructed via &lt;tt&gt;viewIndexes&lt;/tt&gt; methods on some source matrix.
                 * The interface introduced in abstract super classes defines everything a user can do.
                 * From a user point of view there is nothing special about this class; it presents the same functionality with the same signatures and semantics as its abstract superclass(es) while introducing no additional functionality.
                 * Thus, this class need not be visible to users.
                 * By the way, the same principle applies to concrete DenseXXX and SparseXXX classes: they presents the same functionality with the same signatures and semantics as abstract superclass(es) while introducing no additional functionality.
                 * Thus, they need not be visible to users, either. 
                 * Factory methods could hide all these concrete types.
                 * &lt;p&gt;
                 * This class uses no delegation. 
                 * Its instances point directly to the data. 
                 * Cell addressing overhead is 1 additional int addition and 2 additional array index accesses per get/set.
                 * &lt;p&gt;
                 * Note that this implementation is not synchronized.
                 * &lt;p&gt;
                 * &lt;b&gt;Memory requirements:&lt;/b&gt;
                 * &lt;p&gt;
                 * &lt;tt&gt;memory [bytes] = 4*(rowIndexes.length+columnIndexes.length)&lt;/tt&gt;.
                 * Thus, an index view with 1000 x 1000 indexes additionally uses 8 KB.
                 * &lt;p&gt;
                 * &lt;b&gt;Time complexity:&lt;/b&gt;
                 * &lt;p&gt;
                 * Depends on the parent view holding cells.
                 * &lt;p&gt;                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="elements" type="AbstractIntDoubleMap" line="50"/>
            <declaration name="rowOffsets" type="int[]" line="52"/>
            <javadoc line="52">
                The offsets of the visible cells of this matrix.                
            </javadoc>
            <declaration name="columnOffsets" type="int[]" line="56"/>
            <declaration name="offset" type="int" line="58"/>
            <javadoc line="58">
                The offset.                
            </javadoc>
            <javadoc line="62">
                Constructs a matrix view with the given parameters.                
                <@param>
                    m rows the number of rows the matrix shall have.                    
                </@param>
                <@param>
                    m columns the number of columns the matrix shall have.                    
                </@param>
                <@param>
                    m elements the cells.                    
                </@param>
                <@param>
                    m rowZero the position of the first element.                    
                </@param>
                <@param>
                    m columnZero the position of the first element.                    
                </@param>
                <@param>
                    m rowStride the number of elements between two rows, i.e. <tt>index(i+1,j)-index(i,j)</tt>.                    
                </@param>
                <@param>
                    m columnStride the number of elements between two columns, i.e. <tt>index(i,j+1)-index(i,j)</tt>.                    
                </@param>
                <@param>
                    m rowOffsets   The row offsets of the cells that shall be visible.                    
                </@param>
                <@param>
                    m columnOffsets   The column offsets of the cells that shall be visible.                    
                </@param>
                <@param>
                    m offset                    
                </@param>
            </javadoc>
            <method name="SelectedSparseDoubleMatrix2D" type="constructor" line="75">
                <comment line="76">
                    be sure parameters are valid, we do not check...                    
                </comment>
            </method>
            <javadoc line="86">
                Constructs a matrix view with the given parameters.                
                <@param>
                    m elements the cells.                    
                </@param>
                <@param>
                    m rowOffsets   The row offsets of the cells that shall be visible.                    
                </@param>
                <@param>
                    m columnOffsets   The column offsets of the cells that shall be visible.                    
                </@param>
                <@param>
                    m offset                    
                </@param>
            </javadoc>
            <method name="SelectedSparseDoubleMatrix2D" type="constructor" line="93"/>
            <javadoc line="96">
                Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
                 * Default implementation. Override, if necessary.                
                <@param>
                    m rank   the absolute rank of the element.                    
                </@param>
                <@return>
                    n the position.                    
                </@return>
            </javadoc>
            <method name="_columnOffset" type="int" line="103"/>
            <javadoc line="106">
                Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
                 * Default implementation. Override, if necessary.                
                <@param>
                    m rank   the absolute rank of the element.                    
                </@param>
                <@return>
                    n the position.                    
                </@return>
            </javadoc>
            <method name="_rowOffset" type="int" line="113"/>
            <javadoc line="116">
                Returns the matrix cell value at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt;.
                 * &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
                 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                 * Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.                
                <@param>
                    m row   the index of the row-coordinate.                    
                </@param>
                <@param>
                    m column   the index of the column-coordinate.                    
                </@param>
                <@return>
                    n    the value at the specified coordinate.                    
                </@return>
            </javadoc>
            <method name="getQuick" type="double" line="127">
                <comment line="128">
                    if (debug) if (column&lt;0 || column&gt;=columns || row&lt;0 || row&gt;=rows) throw new IndexOutOfBoundsException(&quot;row:&quot;+row+&quot;, column:&quot;+column);                    
                </comment>
                <comment line="128">
                    return elements.get(index(row,column));                    
                </comment>
                <comment line="128">
                    manually inlined:                    
                </comment>
            </method>
            <javadoc line="133">
                Returns &lt;tt&gt;true&lt;/tt&gt; if both matrices share common cells.
                 * More formally, returns &lt;tt&gt;true&lt;/tt&gt; if &lt;tt&gt;other != null&lt;/tt&gt; and at least one of the following conditions is met
                 * &lt;ul&gt;
                 * &lt;li&gt;the receiver is a view of the other matrix
                 * &lt;li&gt;the other matrix is a view of the receiver
                 * &lt;li&gt;&lt;tt&gt;this == other&lt;/tt&gt;
                 * &lt;/ul&gt;                
            </javadoc>
            <method name="haveSharedCellsRaw" type="boolean" line="142">
                <scope line="143">
                    <declaration name="otherMatrix" type="SelectedSparseDoubleMatrix2D" line="144"/>
                </scope>
                <scope line="147">
                    <declaration name="otherMatrix" type="SparseDoubleMatrix2D" line="148"/>
                </scope>
            </method>
            <javadoc line="153">
                Returns the position of the given coordinate within the (virtual or non-virtual) internal 1-dimensional array.                
                <@param>
                    m row   the index of the row-coordinate.                    
                </@param>
                <@param>
                    m column   the index of the column-coordinate.                    
                </@param>
            </javadoc>
            <method name="index" type="int" line="159">
                <comment line="160">
                    return this.offset + super.index(row,column);                    
                </comment>
                <comment line="160">
                    manually inlined:                    
                </comment>
            </method>
            <javadoc line="164">
                Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified number of rows and columns.
                 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt;,
                 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt;, etc.
                 * In general, the new matrix should have internal parametrization as similar as possible.                
                <@param>
                    m rows the number of rows the matrix shall have.                    
                </@param>
                <@param>
                    m columns the number of columns the matrix shall have.                    
                </@param>
                <@return>
                    n  a new empty matrix of the same dynamic type.                    
                </@return>
            </javadoc>
            <method name="like" type="DoubleMatrix2D" line="174"/>
            <javadoc line="177">
                Construct and returns a new 1-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, entirelly independent of the receiver.
                 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt;,
                 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt;, etc.                
                <@param>
                    m size the number of cells the matrix shall have.                    
                </@param>
                <@return>
                    n  a new matrix of the corresponding dynamic type.                    
                </@return>
            </javadoc>
            <method name="like1D" type="DoubleMatrix1D" line="185"/>
            <javadoc line="188">
                Construct and returns a new 1-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, sharing the same cells.
                 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt;,
                 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt;, etc.                
                <@param>
                    m size the number of cells the matrix shall have.                    
                </@param>
                <@param>
                    m zero the index of the first element.                    
                </@param>
                <@param>
                    m stride the number of indexes between any two elements, i.e. <tt>index(i+1)-index(i)</tt>.                    
                </@param>
                <@return>
                    n  a new matrix of the corresponding dynamic type.                    
                </@return>
            </javadoc>
            <method name="like1D" type="DoubleMatrix1D" line="198">
                <comment line="199">
                    row new InternalError(); // this method is never called since viewRow() and viewColumn are overridden properly.                    
                </comment>
            </method>
            <javadoc line="201">
                Sets the matrix cell at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt; to the specified value.
                 * &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
                 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                 * Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.                
                <@param>
                    m row   the index of the row-coordinate.                    
                </@param>
                <@param>
                    m column   the index of the column-coordinate.                    
                </@param>
                <@param>
                    m value the value to be filled into the specified cell.                    
                </@param>
            </javadoc>
            <method name="setQuick" type="void" line="212">
                <comment line="213">
                    if (debug) if (column&lt;0 || column&gt;=columns || row&lt;0 || row&gt;=rows) throw new IndexOutOfBoundsException(&quot;row:&quot;+row+&quot;, column:&quot;+column);                    
                </comment>
                <comment line="213">
                    int index =	index(row,column);                    
                </comment>
                <comment line="213">
                    manually inlined:                    
                </comment>
                <declaration name="index" type="int" line="216"/>
            </method>
            <javadoc line="223">
                Sets up a matrix with a given number of rows and columns.                
                <@param>
                    m rows the number of rows the matrix shall have.                    
                </@param>
                <@param>
                    m columns the number of columns the matrix shall have.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if <tt>(double)columns*rows > Integer.MAX_VALUE</tt>.                    
                </@throws>
            </javadoc>
            <method name="setUp" type="void" line="229"/>
            <javadoc line="235">
                Self modifying version of viewDice().                
            </javadoc>
            <method name="vDice" type="AbstractMatrix2D" line="238">
                <comment line="239">
                    swap                    
                </comment>
                <comment line="239">
                    flips stay unaffected                    
                </comment>
                <declaration name="tmp" type="int[]" line="241"/>
            </method>
            <javadoc line="248">
                Constructs and returns a new &lt;i&gt;slice view&lt;/i&gt; representing the rows of the given column.
                 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
                 * To obtain a slice view on subranges, construct a sub-ranging view (&lt;tt&gt;viewPart(...)&lt;/tt&gt;), then apply this method to the sub-range view.
                 * &lt;p&gt; 
                 * &lt;b&gt;Example:&lt;/b&gt; 
                 * &lt;table border=&quot;0&quot;&gt;
                 * &lt;tr nowrap&gt; 
                 * &lt;td valign=&quot;top&quot;&gt;2 x 3 matrix: &lt;br&gt;
                 * 1, 2, 3&lt;br&gt;
                 * 4, 5, 6 &lt;/td&gt;
                 * &lt;td&gt;viewColumn(0) ==&gt;&lt;/td&gt;
                 * &lt;td valign=&quot;top&quot;&gt;Matrix1D of size 2:&lt;br&gt;
                 * 1, 4&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;/table&gt;                
                <@param>
                    m the column to fix.                    
                </@param>
                <@return>
                    n a new slice view.                    
                </@return>
                <@throws>
                    s IllegalArgumentException if <tt>column < 0 || column >= columns()</tt>.                    
                </@throws>
                <@see>
                    e #viewRow(int)                    
                </@see>
            </javadoc>
            <method name="viewColumn" type="DoubleMatrix1D" line="270">
                <declaration name="viewSize" type="int" line="272"/>
                <declaration name="viewZero" type="int" line="273"/>
                <declaration name="viewStride" type="int" line="274"/>
                <declaration name="viewOffsets" type="int[]" line="275"/>
                <declaration name="viewOffset" type="int" line="276"/>
            </method>
            <javadoc line="279">
                Constructs and returns a new &lt;i&gt;slice view&lt;/i&gt; representing the columns of the given row.
                 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
                 * To obtain a slice view on subranges, construct a sub-ranging view (&lt;tt&gt;viewPart(...)&lt;/tt&gt;), then apply this method to the sub-range view.
                 * &lt;p&gt; 
                 * &lt;b&gt;Example:&lt;/b&gt; 
                 * &lt;table border=&quot;0&quot;&gt;
                 * &lt;tr nowrap&gt; 
                 * &lt;td valign=&quot;top&quot;&gt;2 x 3 matrix: &lt;br&gt;
                 * 1, 2, 3&lt;br&gt;
                 * 4, 5, 6 &lt;/td&gt;
                 * &lt;td&gt;viewRow(0) ==&gt;&lt;/td&gt;
                 * &lt;td valign=&quot;top&quot;&gt;Matrix1D of size 3:&lt;br&gt;
                 * 1, 2, 3&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;/table&gt;                
                <@param>
                    m the row to fix.                    
                </@param>
                <@return>
                    n a new slice view.                    
                </@return>
                <@throws>
                    s IndexOutOfBoundsException if <tt>row < 0 || row >= rows()</tt>.                    
                </@throws>
                <@see>
                    e #viewColumn(int)                    
                </@see>
            </javadoc>
            <method name="viewRow" type="DoubleMatrix1D" line="301">
                <declaration name="viewSize" type="int" line="303"/>
                <declaration name="viewZero" type="int" line="304"/>
                <declaration name="viewStride" type="int" line="305"/>
                <declaration name="viewOffsets" type="int[]" line="306"/>
                <declaration name="viewOffset" type="int" line="307"/>
            </method>
            <javadoc line="310">
                Construct and returns a new selection view.                
                <@param>
                    m rowOffsets the offsets of the visible elements.                    
                </@param>
                <@param>
                    m columnOffsets the offsets of the visible elements.                    
                </@param>
                <@return>
                    n  a new view.                    
                </@return>
            </javadoc>
            <method name="viewSelectionLike" type="DoubleMatrix2D" line="317"/>
        </class>
    </source>