<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <import package="cern.colt.matrix.DoubleMatrix1D"/>
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <class name="TridiagonalDoubleMatrix2D" extends="WrapperDoubleMatrix2D" line="13">
            <comment line="14">
                The non zero elements of the matrix: {lower, diagonal, upper}.                
            </comment>
            <comment line="14">
                The startIndexes and number of non zeros: {lowerStart, diagonalStart, upperStart, values.length, lowerNonZeros, diagonalNonZeros, upperNonZeros}.
                 lowerStart = 0                
            </comment>
            <comment line="14">
                protected double diagonal[];                
            </comment>
            <comment line="14">
                protected double lower[];                
            </comment>
            <comment line="14">
                protected double upper[];                
            </comment>
            <comment line="14">
                protected int diagonalNonZeros;                
            </comment>
            <comment line="14">
                protected int lowerNonZeros;                
            </comment>
            <comment line="14">
                protected int upperNonZeros;                
            </comment>
            <comment line="14">
                protected int N;                
            </comment>
            <javadoc line="13">
                Tridiagonal 2-d matrix holding &lt;tt&gt;double&lt;/tt&gt; elements.
                 * First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                 * &lt;p&gt;
                 * &lt;b&gt;Implementation:&lt;/b&gt;
                 * TODO.                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 0.9, 04/14/2000                    
                </@version>
            </javadoc>
            <declaration name="values" type="double[]" line="27"/>
            <declaration name="dims" type="int[]" line="35"/>
            <declaration name="NONZERO" type="int" line="37"/>
            <javadoc line="47">
                Constructs a matrix with a copy of the given values.
                 * &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[row][column]&lt;/tt&gt;
                 * and have exactly the same number of columns in every row.
                 * &lt;p&gt;
                 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <@param>
                    m values The values to be filled into the new matrix.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if <tt>for any 1 &lt;= row &lt; values.length: values[row].length != values[row-1].length</tt>.                    
                </@throws>
            </javadoc>
            <method name="TridiagonalDoubleMatrix2D" type="constructor" line="57"/>
            <javadoc line="61">
                Constructs a matrix with a given number of rows and columns.
                 * All entries are initially &lt;tt&gt;0&lt;/tt&gt;.                
                <@param>
                    m rows the number of rows the matrix shall have.                    
                </@param>
                <@param>
                    m columns the number of columns the matrix shall have.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if <tt>rows<0 || columns<0 || (double)columns*rows > Integer.MAX_VALUE</tt>.                    
                </@throws>
            </javadoc>
            <method name="TridiagonalDoubleMatrix2D" type="constructor" line="68">
                <comment line="69">
                    lues = new double[l+d+u]; // {lower, diagonal, upper}                    
                </comment>
                <comment line="69">
                    t[] dimensions = { 0, l, l+d, l+d+u, 0, 0, 0}; // {lowerStart, diagonalStart, upperStart, values.length, lowerNonZeros, diagonalNonZeros, upperNonZeros}                    
                </comment>
                <comment line="69">
                    diagonal = new double[d];                    
                </comment>
                <comment line="69">
                    lower = new double[l];                    
                </comment>
                <comment line="69">
                    upper = new double[u];                    
                </comment>
                <comment line="69">
                    diagonalNonZeros = 0;                    
                </comment>
                <comment line="69">
                    lowerNonZeros = 0;                    
                </comment>
                <comment line="69">
                    upperNonZeros = 0;                    
                </comment>
                <declaration name="d" type="int" line="72"/>
                <declaration name="u" type="int" line="73"/>
                <declaration name="l" type="int" line="74"/>
                <declaration name="dimensions" type="int[]" line="79"/>
            </method>
            <javadoc line="90">
                Sets all cells to the state specified by &lt;tt&gt;value&lt;/tt&gt;.                
                <@param>
                    m value the value to be filled into the cells.                    
                </@param>
                <@return>
                    n <tt>this</tt> (for convenience only).                    
                </@return>
            </javadoc>
            <method name="assign" type="DoubleMatrix2D" line="95">
                <comment line="96">
                    overriden for performance only                    
                </comment>
                <scope line="97"/>
            </method>
            <method name="assign" type="DoubleMatrix2D" line="112">
                <scope line="113">
                    <declaration name="alpha" type="double" line="114"/>
                    <anonymous_class line="127">
                        <method name="apply" type="double" line="128"/>
                    </anonymous_class>
                </scope>
                <scope line="134"/>
            </method>
            <javadoc line="139">
                Replaces all cell values of the receiver with the values of another matrix.
                 * Both matrices must have the same number of rows and columns.
                 * If both matrices share the same cells (as is the case if they are views derived from the same matrix) and intersect in an ambiguous way, then replaces &lt;i&gt;as if&lt;/i&gt; using an intermediate auxiliary deep copy of &lt;tt&gt;other&lt;/tt&gt;.                
                <@param>
                    m source   the source matrix to copy from (may be identical to the receiver).                    
                </@param>
                <@return>
                    n <tt>this</tt> (for convenience only).                    
                </@return>
                <@throws>
                    s IllegalArgumentException if <tt>columns() != source.columns() || rows() != source.rows()</tt>                    
                </@throws>
            </javadoc>
            <method name="assign" type="DoubleMatrix2D" line="148">
                <comment line="149">
                    overriden for performance only                    
                </comment>
                <comment line="149">
                    (source==this) return this; // nothing to do                    
                </comment>
                <scope line="153">
                    <declaration name="other" type="TridiagonalDoubleMatrix2D" line="155"/>
                </scope>
                <scope line="162">
                    <anonymous_class line="165">
                        <method name="apply" type="double" line="166"/>
                    </anonymous_class>
                </scope>
            </method>
            <method name="assign" type="DoubleMatrix2D" line="177">
                <scope line="180">
                    <declaration name="alpha" type="double" line="181"/>
                    <anonymous_class line="184">
                        <method name="apply" type="double" line="185"/>
                    </anonymous_class>
                </scope>
                <scope line="194">
                    <anonymous_class line="196">
                        <method name="apply" type="double" line="197"/>
                    </anonymous_class>
                </scope>
                <scope line="206">
                    <anonymous_class line="208">
                        <method name="apply" type="double" line="209"/>
                    </anonymous_class>
                </scope>
            </method>
            <method name="forEachNonZero" type="DoubleMatrix2D" line="220">
                <scope line="221">
                    <declaration name="i" type="int" line="222"/>
                    <scope line="224"/>
                    <scope line="226"/>
                    <declaration name="low" type="int" line="228"/>
                    <declaration name="high" type="int" line="229"/>
                    <scope line="231">
                        <declaration name="value" type="double" line="232"/>
                        <scope line="233">
                            <declaration name="r" type="double" line="234"/>
                            <scope line="235"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="244">
                Returns the content of this matrix if it is a wrapper; or &lt;tt&gt;this&lt;/tt&gt; otherwise.
                 * Override this method in wrappers.                
            </javadoc>
            <method name="getContent" type="DoubleMatrix2D" line="248"/>
            <javadoc line="251">
                Returns the matrix cell value at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt;.
                 * &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
                 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                 * Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.                
                <@param>
                    m row   the index of the row-coordinate.                    
                </@param>
                <@param>
                    m column   the index of the column-coordinate.                    
                </@param>
                <@return>
                    n    the value at the specified coordinate.                    
                </@return>
            </javadoc>
            <method name="getQuick" type="double" line="262">
                <comment line="263">
                    (k==0) q=j; // lower diagonal                    
                </comment>
                <comment line="263">
                    int k = -1;                    
                </comment>
                <comment line="263">
                    int q = 0;                    
                </comment>
                <comment line="263">
                    if (i==j) { k=0; q=i; }                    
                </comment>
                <comment line="263">
                    if (i==j+1) { k=1; q=j; }                    
                </comment>
                <comment line="263">
                    if (i==j-1) { k=2; q=i; }                    
                </comment>
                <comment line="263">
                    if (k&lt;0) return 0;                    
                </comment>
                <comment line="263">
                    return values[dims[k]+q];                    
                </comment>
                <comment line="263">
                    if (i==j) return diagonal[i];                    
                </comment>
                <comment line="263">
                    if (i==j+1) return lower[j];                    
                </comment>
                <comment line="263">
                    if (i==j-1) return upper[i];                    
                </comment>
                <comment line="263">
                    return 0;                    
                </comment>
                <declaration name="i" type="int" line="263"/>
                <declaration name="j" type="int" line="264"/>
                <declaration name="k" type="int" line="266"/>
                <declaration name="q" type="int" line="267"/>
                <scope line="270"/>
            </method>
            <javadoc line="299">
                Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified number of rows and columns.
                 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt;,
                 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt;, etc.
                 * In general, the new matrix should have internal parametrization as similar as possible.                
                <@param>
                    m rows the number of rows the matrix shall have.                    
                </@param>
                <@param>
                    m columns the number of columns the matrix shall have.                    
                </@param>
                <@return>
                    n  a new empty matrix of the same dynamic type.                    
                </@return>
            </javadoc>
            <method name="like" type="DoubleMatrix2D" line="309"/>
            <javadoc line="312">
                Construct and returns a new 1-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, entirelly independent of the receiver.
                 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt;,
                 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt;, etc.                
                <@param>
                    m size the number of cells the matrix shall have.                    
                </@param>
                <@return>
                    n  a new matrix of the corresponding dynamic type.                    
                </@return>
            </javadoc>
            <method name="like1D" type="DoubleMatrix1D" line="320"/>
            <javadoc line="323">
                Sets the matrix cell at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt; to the specified value.
                 * &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
                 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                 * Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.                
                <@param>
                    m row   the index of the row-coordinate.                    
                </@param>
                <@param>
                    m column   the index of the column-coordinate.                    
                </@param>
                <@param>
                    m value the value to be filled into the specified cell.                    
                </@param>
            </javadoc>
            <method name="setQuick" type="void" line="334">
                <comment line="335">
                    (k==0) q=j; // lower diagonal                    
                </comment>
                <comment line="335">
                    int k = -1;                    
                </comment>
                <comment line="335">
                    int q = 0;                    
                </comment>
                <comment line="335">
                    if (i==j) { k=0; q=i; } // diagonal                    
                </comment>
                <comment line="335">
                    if (i==j+1) { k=1; q=j; } // lower diagonal                    
                </comment>
                <comment line="335">
                    if (i==j-1) { k=2; q=i; } // upper diagonal                    
                </comment>
                <comment line="335">
                    if (k&gt;0) {                    
                </comment>
                <comment line="335">
                    int index = dims[k]+q;                    
                </comment>
                <comment line="335">
                    if (values[index]!=0) {                    
                </comment>
                <comment line="335">
                    if (isZero) dims[k+NONZERO]--; // one nonZero less                    
                </comment>
                <comment line="335">
                    }                    
                </comment>
                <comment line="335">
                    else {                    
                </comment>
                <comment line="335">
                    if (!isZero) dims[k+NONZERO]++; // one nonZero more                    
                </comment>
                <comment line="335">
                    }                    
                </comment>
                <comment line="335">
                    values[index] = value;                    
                </comment>
                <comment line="335">
                    return;                    
                </comment>
                <comment line="335">
                    }                    
                </comment>
                <comment line="335">
                    if (!isZero) throw new IllegalArgumentException(&quot;Can&apos;t store non-zero value to non-tridiagonal coordinate: row=&quot;+row+&quot;, column=&quot;+column+&quot;, value=&quot;+value);                    
                </comment>
                <comment line="335">
                    if (i==j) {                    
                </comment>
                <comment line="335">
                    if (diagonal[i]!=0) {                    
                </comment>
                <comment line="335">
                    if (isZero) diagonalNonZeros--;                    
                </comment>
                <comment line="335">
                    }                    
                </comment>
                <comment line="335">
                    else {                    
                </comment>
                <comment line="335">
                    if (!isZero) diagonalNonZeros++;                    
                </comment>
                <comment line="335">
                    }                    
                </comment>
                <comment line="335">
                    diagonal[i] = value;                    
                </comment>
                <comment line="335">
                    return;                    
                </comment>
                <comment line="335">
                    }                    
                </comment>
                <comment line="335">
                    if (i==j+1) {                    
                </comment>
                <comment line="335">
                    if (lower[j]!=0) {                    
                </comment>
                <comment line="335">
                    if (isZero) lowerNonZeros--;                    
                </comment>
                <comment line="335">
                    }                    
                </comment>
                <comment line="335">
                    else {                    
                </comment>
                <comment line="335">
                    if (!isZero) lowerNonZeros++;                    
                </comment>
                <comment line="335">
                    }                    
                </comment>
                <comment line="335">
                    lower[j] = value;                    
                </comment>
                <comment line="335">
                    return;                    
                </comment>
                <comment line="335">
                    }                    
                </comment>
                <comment line="335">
                    if (i==j-1) {                    
                </comment>
                <comment line="335">
                    if (upper[i]!=0) {                    
                </comment>
                <comment line="335">
                    if (isZero) upperNonZeros--;                    
                </comment>
                <comment line="335">
                    }                    
                </comment>
                <comment line="335">
                    else {                    
                </comment>
                <comment line="335">
                    if (!isZero) upperNonZeros++;                    
                </comment>
                <comment line="335">
                    }                    
                </comment>
                <comment line="335">
                    upper[i] = value;                    
                </comment>
                <comment line="335">
                    return;                    
                </comment>
                <comment line="335">
                    }                    
                </comment>
                <comment line="335">
                    if (!isZero) throw new IllegalArgumentException(&quot;Can&apos;t store non-zero value to non-tridiagonal coordinate: row=&quot;+row+&quot;, column=&quot;+column+&quot;, value=&quot;+value);                    
                </comment>
                <declaration name="i" type="int" line="335"/>
                <declaration name="j" type="int" line="336"/>
                <declaration name="isZero" type="boolean" line="338"/>
                <declaration name="k" type="int" line="340"/>
                <declaration name="q" type="int" line="341"/>
                <scope line="344">
                    <declaration name="index" type="int" line="345"/>
                    <scope line="346"/>
                    <scope line="349"/>
                </scope>
            </method>
            <method name="zMult" type="DoubleMatrix1D" line="419">
                <declaration name="m" type="int" line="420"/>
                <declaration name="n" type="int" line="421"/>
                <scope line="422"/>
                <declaration name="ignore" type="boolean" line="427"/>
                <scope line="430"/>
                <declaration name="zz" type="DenseDoubleMatrix1D" line="439"/>
                <declaration name="zElements" type="double[]" line="440"/>
                <declaration name="zStride" type="int" line="441"/>
                <declaration name="zi" type="int" line="442"/>
                <declaration name="yy" type="DenseDoubleMatrix1D" line="444"/>
                <declaration name="yElements" type="double[]" line="445"/>
                <declaration name="yStride" type="int" line="446"/>
                <declaration name="yi" type="int" line="447"/>
                <anonymous_class line="452">
                    <method name="apply" type="double" line="453">
                        <comment line="454">
                            z.setQuick(row,z.getQuick(row) + value * y.getQuick(column));                            
                        </comment>
                        <comment line="454">
                            System.out.println(&quot;[&quot;+i+&quot;,&quot;+j+&quot;]--&gt;&quot;+value);                            
                        </comment>
                        <scope line="454">
                            <declaration name="tmp" type="int" line="454"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="zMult" type="DoubleMatrix2D" line="466">
                <comment line="467">
                    cache views                    
                </comment>
                <declaration name="m" type="int" line="468"/>
                <declaration name="n" type="int" line="469"/>
                <scope line="470"/>
                <declaration name="p" type="int" line="474"/>
                <declaration name="ignore" type="boolean" line="475"/>
                <declaration name="Brows" type="DoubleMatrix1D[]" line="488"/>
                <declaration name="Crows" type="DoubleMatrix1D[]" line="490"/>
                <declaration name="fun" type="cern.jet.math.PlusMult" line="493"/>
                <anonymous_class line="496">
                    <method name="apply" type="double" line="497"/>
                </anonymous_class>
            </method>
        </class>
    </source>