<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <import package="cern.colt.map.AbstractIntObjectMap"/>
        <import package="cern.colt.map.OpenIntObjectHashMap"/>
        <import package="cern.colt.matrix.ObjectMatrix2D"/>
        <import package="cern.colt.matrix.ObjectMatrix3D"/>
        <class name="SparseObjectMatrix3D" extends="ObjectMatrix3D" line="15">
            <comment line="16">
                                
            </comment>
            <javadoc line="15">
                Sparse hashed 3-d matrix holding &lt;tt&gt;Object&lt;/tt&gt; elements.
                 * First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                 * &lt;p&gt;
                 * &lt;b&gt;Implementation:&lt;/b&gt;
                 * &lt;p&gt;
                 * Note that this implementation is not synchronized.
                 * Uses a {@link cern.colt.map.OpenIntObjectHashMap}, which is a compact and performant hashing technique.
                 * &lt;p&gt;
                 * &lt;b&gt;Memory requirements:&lt;/b&gt;
                 * &lt;p&gt;
                 * Cells that
                 * &lt;ul&gt;
                 * &lt;li&gt;are never set to non-zero values do not use any memory.
                 * &lt;li&gt;switch from zero to non-zero state do use memory.
                 * &lt;li&gt;switch back from non-zero to zero state also do use memory. However, their memory is automatically reclaimed from time to time. It can also manually be reclaimed by calling {@link #trimToSize()}.
                 * &lt;/ul&gt;
                 * &lt;p&gt;
                 * worst case: &lt;tt&gt;memory [bytes] = (1/minLoadFactor) * nonZeros * 13&lt;/tt&gt;.
                 * &lt;br&gt;best  case: &lt;tt&gt;memory [bytes] = (1/maxLoadFactor) * nonZeros * 13&lt;/tt&gt;.
                 * &lt;br&gt;Where &lt;tt&gt;nonZeros = cardinality()&lt;/tt&gt; is the number of non-zero cells.
                 * Thus, a 100 x 100 x 100 matrix with minLoadFactor=0.25 and maxLoadFactor=0.5 and 1000000 non-zero cells consumes between 25 MB and 50 MB.
                 * The same 100 x 100 x 100 matrix with 1000 non-zero cells consumes between 25 and 50 KB.
                 * &lt;p&gt;
                 * &lt;b&gt;Time complexity:&lt;/b&gt;
                 * &lt;p&gt;
                 * This class offers &lt;i&gt;expected&lt;/i&gt; time complexity &lt;tt&gt;O(1)&lt;/tt&gt; (i.e. constant time) for the basic operations
                 * &lt;tt&gt;get&lt;/tt&gt;, &lt;tt&gt;getQuick&lt;/tt&gt;, &lt;tt&gt;set&lt;/tt&gt;, &lt;tt&gt;setQuick&lt;/tt&gt; and &lt;tt&gt;size&lt;/tt&gt;
                 * assuming the hash function disperses the elements properly among the buckets.
                 * Otherwise, pathological cases, although highly improbable, can occur, degrading performance to &lt;tt&gt;O(N)&lt;/tt&gt; in the worst case.
                 * As such this sparse class is expected to have no worse time complexity than its dense counterpart {@link DenseObjectMatrix2D}.
                 * However, constant factors are considerably larger.
                 * &lt;p&gt;
                 * Cells are internally addressed in (in decreasing order of significance): slice major, row major, column major.
                 * Applications demanding utmost speed can exploit this fact.
                 * Setting/getting values in a loop slice-by-slice, row-by-row, column-by-column is quicker than, for example, column-by-column, row-by-row, slice-by-slice.
                 * Thus
                 * &lt;pre&gt;
                 * for (int slice=0; slice &lt; slices; slice++) {
                 * for (int row=0; row &lt; rows; row++) {
                 * for (int column=0; column &lt; columns; column++) {
                 * matrix.setQuick(slice,row,column,someValue);
                 * }		    
                 * }
                 * }
                 * &lt;/pre&gt;
                 * is quicker than
                 * &lt;pre&gt;
                 * for (int column=0; column &lt; columns; column++) {
                 * for (int row=0; row &lt; rows; row++) {
                 * for (int slice=0; slice &lt; slices; slice++) {
                 * matrix.setQuick(slice,row,column,someValue);
                 * }
                 * }
                 * }
                 * &lt;/pre&gt;                
                <@see>
                    e cern.colt.map                    
                </@see>
                <@see>
                    e cern.colt.map.OpenIntObjectHashMap                    
                </@see>
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="elements" type="AbstractIntObjectMap" line="81"/>
            <javadoc line="82">
                Constructs a matrix with a copy of the given values.
                 * &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[slice][row][column]&lt;/tt&gt;
                 * and have exactly the same number of rows in in every slice and exactly the same number of columns in in every row.
                 * &lt;p&gt;
                 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <@param>
                    m values The values to be filled into the new matrix.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if <tt>for any 1 &lt;= slice &lt; values.length: values[slice].length != values[slice-1].length</tt>.                    
                </@throws>
                <@throws>
                    s IllegalArgumentException if <tt>for any 1 &lt;= row &lt; values[0].length: values[slice][row].length != values[slice][row-1].length</tt>.                    
                </@throws>
            </javadoc>
            <method name="SparseObjectMatrix3D" type="constructor" line="93"/>
            <javadoc line="97">
                Constructs a matrix with a given number of slices, rows and columns and default memory usage.
                 * All entries are initially &lt;tt&gt;null&lt;/tt&gt;.                
                <@param>
                    m slices the number of slices the matrix shall have.                    
                </@param>
                <@param>
                    m rows the number of rows the matrix shall have.                    
                </@param>
                <@param>
                    m columns the number of columns the matrix shall have.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if <tt>(double)slices*columns*rows > Integer.MAX_VALUE</tt>.                    
                </@throws>
                <@throws>
                    s IllegalArgumentException if <tt>slices<0 || rows<0 || columns<0</tt>.                    
                </@throws>
            </javadoc>
            <method name="SparseObjectMatrix3D" type="constructor" line="106"/>
            <javadoc line="109">
                Constructs a matrix with a given number of slices, rows and columns using memory as specified.
                 * All entries are initially &lt;tt&gt;null&lt;/tt&gt;.
                 * For details related to memory usage see {@link cern.colt.map.OpenIntObjectHashMap}.                
                <@param>
                    m slices the number of slices the matrix shall have.                    
                </@param>
                <@param>
                    m rows the number of rows the matrix shall have.                    
                </@param>
                <@param>
                    m columns the number of columns the matrix shall have.                    
                </@param>
                <@param>
                    m initialCapacity   the initial capacity of the hash map.
                     * If not known, set <tt>initialCapacity=0</tt> or small.                    
                </@param>
                <@param>
                    m minLoadFactor        the minimum load factor of the hash map.                    
                </@param>
                <@param>
                    m maxLoadFactor        the maximum load factor of the hash map.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if <tt>initialCapacity < 0 || (minLoadFactor < 0.0 || minLoadFactor >= 1.0) || (maxLoadFactor <= 0.0 || maxLoadFactor >= 1.0) || (minLoadFactor >= maxLoadFactor)</tt>.                    
                </@throws>
                <@throws>
                    s IllegalArgumentException if <tt>(double)slices*columns*rows > Integer.MAX_VALUE</tt>.                    
                </@throws>
                <@throws>
                    s IllegalArgumentException if <tt>slices<0 || rows<0 || columns<0</tt>.                    
                </@throws>
            </javadoc>
            <method name="SparseObjectMatrix3D" type="constructor" line="125"/>
            <javadoc line="129">
                Constructs a view with the given parameters.                
                <@param>
                    m slices the number of slices the matrix shall have.                    
                </@param>
                <@param>
                    m rows the number of rows the matrix shall have.                    
                </@param>
                <@param>
                    m columns the number of columns the matrix shall have.                    
                </@param>
                <@param>
                    m elements the cells.                    
                </@param>
                <@param>
                    m sliceZero the position of the first element.                    
                </@param>
                <@param>
                    m rowZero the position of the first element.                    
                </@param>
                <@param>
                    m columnZero the position of the first element.                    
                </@param>
                <@param>
                    m sliceStride the number of elements between two slices, i.e. <tt>index(k+1,i,j)-index(k,i,j)</tt>.                    
                </@param>
                <@param>
                    m rowStride the number of elements between two rows, i.e. <tt>index(k,i+1,j)-index(k,i,j)</tt>.                    
                </@param>
                <@param>
                    m columnnStride the number of elements between two columns, i.e. <tt>index(k,i,j+1)-index(k,i,j)</tt>.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if <tt>(Object)slices*columns*rows > Integer.MAX_VALUE</tt>.                    
                </@throws>
                <@throws>
                    s IllegalArgumentException if <tt>slices<0 || rows<0 || columns<0</tt>.                    
                </@throws>
            </javadoc>
            <method name="SparseObjectMatrix3D" type="constructor" line="144"/>
            <javadoc line="149">
                Returns the number of cells having non-zero values.                
            </javadoc>
            <method name="cardinality" type="int" line="152"/>
            <javadoc line="156">
                Ensures that the receiver can hold at least the specified number of non-zero cells without needing to allocate new internal memory.
                 * If necessary, allocates new internal memory and increases the capacity of the receiver.
                 * &lt;p&gt;
                 * This method never need be called; it is for performance tuning only.
                 * Calling this method before tt&gt;set()&lt;/tt&gt;ing a large number of non-zero values boosts performance,
                 * because the receiver will grow only once instead of potentially many times and hash collisions get less probable.                
                <@param>
                    m minNonZeros   the desired minimum number of non-zero cells.                    
                </@param>
            </javadoc>
            <method name="ensureCapacity" type="void" line="166"/>
            <javadoc line="169">
                Returns the matrix cell value at coordinate &lt;tt&gt;[slice,row,column]&lt;/tt&gt;.
                 * &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
                 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                 * Precondition (unchecked): &lt;tt&gt;slice&amp;lt;0 || slice&amp;gt;=slices() || row&amp;lt;0 || row&amp;gt;=rows() || column&amp;lt;0 || column&amp;gt;=column()&lt;/tt&gt;.                
                <@param>
                    m slice   the index of the slice-coordinate.                    
                </@param>
                <@param>
                    m row   the index of the row-coordinate.                    
                </@param>
                <@param>
                    m column   the index of the column-coordinate.                    
                </@param>
                <@return>
                    n    the value at the specified coordinate.                    
                </@return>
            </javadoc>
            <method name="getQuick" type="Object" line="181">
                <comment line="182">
                    if (debug) if (slice&lt;0 || slice&gt;=slices || row&lt;0 || row&gt;=rows || column&lt;0 || column&gt;=columns) throw new IndexOutOfBoundsException(&quot;slice:&quot;+slice+&quot;, row:&quot;+row+&quot;, column:&quot;+column);                    
                </comment>
                <comment line="182">
                    return elements.get(index(slice,row,column));                    
                </comment>
                <comment line="182">
                    manually inlined:                    
                </comment>
            </method>
            <javadoc line="187">
                Returns &lt;tt&gt;true&lt;/tt&gt; if both matrices share at least one identical cell.                
            </javadoc>
            <method name="haveSharedCellsRaw" type="boolean" line="190">
                <scope line="191">
                    <declaration name="otherMatrix" type="SelectedSparseObjectMatrix3D" line="192"/>
                </scope>
                <scope line="195">
                    <declaration name="otherMatrix" type="SparseObjectMatrix3D" line="196"/>
                </scope>
            </method>
            <javadoc line="201">
                Returns the position of the given coordinate within the (virtual or non-virtual) internal 1-dimensional array.                
                <@param>
                    m slice   the index of the slice-coordinate.                    
                </@param>
                <@param>
                    m row   the index of the row-coordinate.                    
                </@param>
                <@param>
                    m column   the index of the third-coordinate.                    
                </@param>
            </javadoc>
            <method name="index" type="int" line="208">
                <comment line="209">
                    return _sliceOffset(_sliceRank(slice)) + _rowOffset(_rowRank(row)) + _columnOffset(_columnRank(column));                    
                </comment>
                <comment line="209">
                    manually inlined:                    
                </comment>
            </method>
            <javadoc line="213">
                Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified number of slices, rows and columns.
                 * For example, if the receiver is an instance of type &lt;tt&gt;DenseObjectMatrix3D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseObjectMatrix3D&lt;/tt&gt;,
                 * if the receiver is an instance of type &lt;tt&gt;SparseObjectMatrix3D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseObjectMatrix3D&lt;/tt&gt;, etc.
                 * In general, the new matrix should have internal parametrization as similar as possible.                
                <@param>
                    m slices the number of slices the matrix shall have.                    
                </@param>
                <@param>
                    m rows the number of rows the matrix shall have.                    
                </@param>
                <@param>
                    m columns the number of columns the matrix shall have.                    
                </@param>
                <@return>
                    n  a new empty matrix of the same dynamic type.                    
                </@return>
            </javadoc>
            <method name="like" type="ObjectMatrix3D" line="224"/>
            <javadoc line="227">
                Construct and returns a new 2-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, sharing the same cells.
                 * For example, if the receiver is an instance of type &lt;tt&gt;DenseObjectMatrix3D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseObjectMatrix2D&lt;/tt&gt;,
                 * if the receiver is an instance of type &lt;tt&gt;SparseObjectMatrix3D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseObjectMatrix2D&lt;/tt&gt;, etc.                
                <@param>
                    m rows the number of rows the matrix shall have.                    
                </@param>
                <@param>
                    m columns the number of columns the matrix shall have.                    
                </@param>
                <@param>
                    m rowZero the position of the first element.                    
                </@param>
                <@param>
                    m columnZero the position of the first element.                    
                </@param>
                <@param>
                    m rowStride the number of elements between two rows, i.e. <tt>index(i+1,j)-index(i,j)</tt>.                    
                </@param>
                <@param>
                    m columnStride the number of elements between two columns, i.e. <tt>index(i,j+1)-index(i,j)</tt>.                    
                </@param>
                <@return>
                    n  a new matrix of the corresponding dynamic type.                    
                </@return>
            </javadoc>
            <method name="like2D" type="ObjectMatrix2D" line="240"/>
            <javadoc line="243">
                Sets the matrix cell at coordinate &lt;tt&gt;[slice,row,column]&lt;/tt&gt; to the specified value.
                 * &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
                 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
                 * Precondition (unchecked): &lt;tt&gt;slice&amp;lt;0 || slice&amp;gt;=slices() || row&amp;lt;0 || row&amp;gt;=rows() || column&amp;lt;0 || column&amp;gt;=column()&lt;/tt&gt;.                
                <@param>
                    m slice   the index of the slice-coordinate.                    
                </@param>
                <@param>
                    m row   the index of the row-coordinate.                    
                </@param>
                <@param>
                    m column   the index of the column-coordinate.                    
                </@param>
                <@param>
                    m value the value to be filled into the specified cell.                    
                </@param>
            </javadoc>
            <method name="setQuick" type="void" line="255">
                <comment line="256">
                    if (debug) if (slice&lt;0 || slice&gt;=slices || row&lt;0 || row&gt;=rows || column&lt;0 || column&gt;=columns) throw new IndexOutOfBoundsException(&quot;slice:&quot;+slice+&quot;, row:&quot;+row+&quot;, column:&quot;+column);                    
                </comment>
                <comment line="256">
                    int index =	index(slice,row,column);                    
                </comment>
                <comment line="256">
                    manually inlined:                    
                </comment>
                <declaration name="index" type="int" line="259"/>
            </method>
            <javadoc line="265">
                Releases any superfluous memory created by explicitly putting zero values into cells formerly having non-zero values; 
                 * An application can use this operation to minimize the
                 * storage of the receiver.
                 * &lt;p&gt;
                 * &lt;b&gt;Background:&lt;/b&gt;
                 * &lt;p&gt;
                 * Cells that &lt;ul&gt;
                 * &lt;li&gt;are never set to non-zero values do not use any memory.
                 * &lt;li&gt;switch from zero to non-zero state do use memory.
                 * &lt;li&gt;switch back from non-zero to zero state also do use memory. However, their memory can be reclaimed by calling &lt;tt&gt;trimToSize()&lt;/tt&gt;.
                 * &lt;/ul&gt;
                 * A sequence like &lt;tt&gt;set(s,r,c,5); set(s,r,c,0);&lt;/tt&gt;
                 * sets a cell to non-zero state and later back to zero state.
                 * Such as sequence generates obsolete memory that is automatically reclaimed from time to time or can manually be reclaimed by calling &lt;tt&gt;trimToSize()&lt;/tt&gt;.
                 * Putting zeros into cells already containing zeros does not generate obsolete memory since no memory was allocated to them in the first place.                
            </javadoc>
            <method name="trimToSize" type="void" line="282"/>
            <javadoc line="285">
                Construct and returns a new selection view.                
                <@param>
                    m sliceOffsets the offsets of the visible elements.                    
                </@param>
                <@param>
                    m rowOffsets the offsets of the visible elements.                    
                </@param>
                <@param>
                    m columnOffsets the offsets of the visible elements.                    
                </@param>
                <@return>
                    n  a new view.                    
                </@return>
            </javadoc>
            <method name="viewSelectionLike" type="ObjectMatrix3D" line="293"/>
        </class>
    </source>