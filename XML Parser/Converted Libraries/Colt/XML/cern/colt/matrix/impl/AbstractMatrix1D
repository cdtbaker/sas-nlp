<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <class name="AbstractMatrix1D" line="11">
            <extends class="AbstractMatrix"/>
            <comment line="12">
                Indicates non-flipped state (flip==1) or flipped state (flip==-1).                
            </comment>
            <comment line="12">
                protected int flip;                
            </comment>
            <comment line="12">
                Indicates non-flipped state or flipped state.                
            </comment>
            <comment line="12">
                protected int flipMask;                
            </comment>
            <comment line="12">
                this.isNoView implies: offset==0, stride==1                
            </comment>
            <javadoc line="11">
                Abstract base class for 1-d matrices (aka &lt;i&gt;vectors&lt;/i&gt;) holding objects or primitive data types such as &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, etc.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  &lt;b&gt;Note that this implementation is not synchronized.&lt;/b&gt;                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="size" type="int" line="21"/>
            <javadoc line="21">
                the number of cells this matrix (view) has                
            </javadoc>
            <declaration name="zero" type="int" line="25"/>
            <javadoc line="25">
                the index of the first element                
            </javadoc>
            <declaration name="stride" type="int" line="28"/>
            <javadoc line="28">
                the number of indexes between any two elements, i.e. &lt;tt&gt;index(i+1) - index(i)&lt;/tt&gt;.                
            </javadoc>
            <javadoc line="44">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="AbstractMatrix1D" type="constructor" line="47"/>
            <javadoc line="48">
                Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
                  Default implementation. Override, if necessary.                
                <@param>
                    m rank   the absolute rank of the element.                    
                </@param>
                <@return>
                    n the position.                    
                </@return>
            </javadoc>
            <method name="_offset" type="int" line="55">
                <params>
                    <param name="absRank" type="int"/>
                </params>
            </method>
            <javadoc line="58">
                Returns the absolute rank of the given relative rank.                
                <@param>
                    m rank   the relative rank of the element.                    
                </@param>
                <@return>
                    n the absolute rank of the element.                    
                </@return>
            </javadoc>
            <method name="_rank" type="int" line="64">
                <params>
                    <param name="rank" type="int"/>
                </params>
                <comment line="65">
                    return zero + ((rank+flipMask)^flipMask);                    
                </comment>
                <comment line="65">
                    return zero + rank*flip; // slower                    
                </comment>
            </method>
            <javadoc line="69">
                Sanity check for operations requiring an index to be within bounds.                
                <@throws>
                    s IndexOutOfBoundsException if <tt>index < 0 || index >= size()</tt>.                    
                </@throws>
            </javadoc>
            <method name="checkIndex" type="void" line="73">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="76">
                Checks whether indexes are legal and throws an exception, if necessary.                
                <@throws>
                    s IndexOutOfBoundsException if <tt>! (0 <= indexes[i] < size())</tt> for any i=0..indexes.length()-1.                    
                </@throws>
            </javadoc>
            <method name="checkIndexes" type="void" line="80">
                <params>
                    <param name="indexes" type="int[]"/>
                </params>
                <scope line="81">
                    <declaration name="index" type="int" line="82"/>
                </scope>
            </method>
            <javadoc line="86">
                Checks whether the receiver contains the given range and throws an exception, if necessary.                
                <@throws>
                    s IndexOutOfBoundsException if <tt>index<0 || index+width>size()</tt>.                    
                </@throws>
            </javadoc>
            <method name="checkRange" type="void" line="90">
                <params>
                    <param name="index" type="int"/>
                    <param name="width" type="int"/>
                </params>
            </method>
            <javadoc line="94">
                Sanity check for operations requiring two matrices with the same size.                
                <@throws>
                    s IllegalArgumentException if <tt>size() != B.size()</tt>.                    
                </@throws>
            </javadoc>
            <method name="checkSize" type="void" line="98">
                <params>
                    <param name="B" type="double[]"/>
                </params>
            </method>
            <javadoc line="101">
                Sanity check for operations requiring two matrices with the same size.                
                <@throws>
                    s IllegalArgumentException if <tt>size() != B.size()</tt>.                    
                </@throws>
            </javadoc>
            <method name="checkSize" type="void" line="105">
                <params>
                    <param name="B" type="AbstractMatrix1D"/>
                </params>
            </method>
            <javadoc line="108">
                Returns the position of the element with the given relative rank within the (virtual or non-virtual) internal 1-dimensional array.
                  You may want to override this method for performance.                
                <@param>
                    m rank   the rank of the element.                    
                </@param>
            </javadoc>
            <method name="index" type="int" line="114">
                <params>
                    <param name="rank" type="int"/>
                </params>
            </method>
            <javadoc line="117">
                Sets up a matrix with a given number of cells.                
                <@param>
                    m size the number of cells the matrix shall have.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if <tt>size<0</tt>.                    
                </@throws>
            </javadoc>
            <method name="setUp" type="void" line="122">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="125">
                Sets up a matrix with the given parameters.                
                <@param>
                    m size the number of elements the matrix shall have.                    
                </@param>
                <@param>
                    m zero the index of the first element.                    
                </@param>
                <@param>
                    m stride the number of indexes between any two elements, i.e. <tt>index(i+1)-index(i)</tt>.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if <tt>size<0</tt>.                    
                </@throws>
            </javadoc>
            <method name="setUp" type="void" line="132">
                <params>
                    <param name="size" type="int"/>
                    <param name="zero" type="int"/>
                    <param name="stride" type="int"/>
                </params>
            </method>
            <javadoc line="140">
                Returns the number of cells.                
            </javadoc>
            <method name="size" type="int" line="143"/>
            <javadoc line="146">
                Returns the stride of the given dimension (axis, rank).                
                <@dimension>
                    n the index of the dimension.                    
                </@dimension>
                <@return>
                    n the stride in the given dimension.                    
                </@return>
                <@throws>
                    s IllegalArgumentException if <tt>dimension != 0</tt>.                    
                </@throws>
            </javadoc>
            <method name="stride" type="int" line="153">
                <params>
                    <param name="dimension" type="int"/>
                </params>
            </method>
            <javadoc line="157">
                Returns a string representation of the receiver&apos;s shape.                
            </javadoc>
            <method name="toStringShort" type="String" line="160"/>
            <javadoc line="163">
                Self modifying version of viewFlip().
                  What used to be index &lt;tt&gt;0&lt;/tt&gt; is now index &lt;tt&gt;size()-1&lt;/tt&gt;, ..., what used to be index &lt;tt&gt;size()-1&lt;/tt&gt; is now index &lt;tt&gt;0&lt;/tt&gt;.                
            </javadoc>
            <method name="vFlip" type="AbstractMatrix1D" line="167">
                <scope line="168"/>
            </method>
            <javadoc line="175">
                Self modifying version of viewPart().                
                <@throws>
                    s IndexOutOfBoundsException if <tt>index<0 || index+width>size()</tt>.                    
                </@throws>
            </javadoc>
            <method name="vPart" type="AbstractMatrix1D" line="179">
                <params>
                    <param name="index" type="int"/>
                    <param name="width" type="int"/>
                </params>
            </method>
            <javadoc line="186">
                Self modifying version of viewStrides().                
                <@throws>
                    s IndexOutOfBoundsException if <tt>stride <= 0</tt>.                    
                </@throws>
            </javadoc>
            <method name="vStrides" type="AbstractMatrix1D" line="190">
                <params>
                    <param name="stride" type="int"/>
                </params>
            </method>
        </class>
    </source>