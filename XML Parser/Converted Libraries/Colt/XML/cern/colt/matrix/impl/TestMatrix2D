<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <import package="cern.colt.function.DoubleDoubleFunction"/>
        <import package="cern.colt.function.DoubleFunction"/>
        <import package="cern.colt.list.IntArrayList"/>
        <import package="cern.colt.map.AbstractIntDoubleMap"/>
        <import package="cern.colt.map.OpenIntDoubleHashMap"/>
        <import package="cern.colt.matrix.DoubleFactory2D"/>
        <import package="cern.colt.matrix.DoubleMatrix1D"/>
        <import package="cern.colt.matrix.DoubleMatrix2D"/>
        <import package="cern.colt.matrix.DoubleMatrix3D"/>
        <import package="cern.colt.matrix.doublealgo.DoubleMatrix2DComparator"/>
        <import package="cern.colt.matrix.linalg.Algebra"/>
        <import package="cern.colt.matrix.linalg.LUDecompositionQuick"/>
        <import package="cern.colt.matrix.linalg.SeqBlas"/>
        <class name="TestMatrix2D" line="24">
            <javadoc line="24">
                Quick and dirty tests.                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="F" type="cern.jet.math.Functions" line="31"/>
            <declaration name="Factory2D" type="cern.colt.matrix.DoubleFactory2D" line="32"/>
            <declaration name="Factory1D" type="cern.colt.matrix.DoubleFactory1D" line="33"/>
            <declaration name="LinearAlgebra" type="cern.colt.matrix.linalg.Algebra" line="34"/>
            <declaration name="Transform" type="cern.colt.matrix.doublealgo.Transform" line="35"/>
            <declaration name="Property" type="cern.colt.matrix.linalg.Property" line="36"/>
            <javadoc line="37">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="TestMatrix2D" type="constructor" line="40"/>
            <javadoc line="43">
                                
            </javadoc>
            <method name="doubleTest" type="void" line="45">
                <comment line="46">
                    t columns = 5; // make a 4*5 matrix                    
                </comment>
                <comment line="46">
                    ster.assign(1); // set all cells to 1                    
                </comment>
                <comment line="46">
                    ster.viewPart(2,1,2,3).assign(2); // set [2,1] .. [3,3] to 2                    
                </comment>
                <comment line="46">
                    pyPart.assign(3); // modify an independent copy                    
                </comment>
                <comment line="46">
                    stem.out.println(&quot;\n&quot;+copyPart); // has changed                    
                </comment>
                <comment line="46">
                    stem.out.println(&quot;\n&quot;+master); // master has not changed                    
                </comment>
                <comment line="46">
                    ubleMatrix2D view1 = master.viewPart(0,3,4,2); // [0,3] .. [3,4]                    
                </comment>
                <comment line="46">
                    ubleMatrix2D view2 = view1.viewPart(0,0,4,1); // a view from a view                    
                </comment>
                <declaration name="rows" type="int" line="46"/>
                <declaration name="columns" type="int" line="47"/>
                <declaration name="master" type="DoubleMatrix2D" line="48"/>
                <declaration name="copyPart" type="DoubleMatrix2D" line="55"/>
                <declaration name="view1" type="DoubleMatrix2D" line="61"/>
                <declaration name="view2" type="DoubleMatrix2D" line="62"/>
            </method>
            <javadoc line="66">
                                
            </javadoc>
            <method name="doubleTest" type="void" line="68">
                <declaration name="matrix" type="DoubleMatrix2D" line="69"/>
                <declaration name="i" type="int" line="73"/>
                <scope line="74">
                    <scope line="75"/>
                </scope>
                <scope line="85">
                    <scope line="86"/>
                </scope>
            </method>
            <javadoc line="96">
                                
            </javadoc>
            <method name="doubleTest10" type="void" line="98">
                <comment line="99">
                    t columns = 7; // make a 4*5 matrix                    
                </comment>
                <comment line="99">
                    DoubleMatrix2D master = new DenseDoubleMatrix2D(rows,columns);                    
                </comment>
                <comment line="99">
                    Basic.ascending(master);                    
                </comment>
                <comment line="99">
                    master.assign(1); // set all cells to 1                    
                </comment>
                <comment line="99">
                    master.viewPart(2,0,2,3).assign(2); // set [2,1] .. [3,3] to 2                    
                </comment>
                <comment line="99">
                    System.out.println(&quot;\n&quot;+master);                    
                </comment>
                <comment line="99">
                    Basic.ascending(view3);                    
                </comment>
                <comment line="99">
                    view2.assign(-1);                    
                </comment>
                <declaration name="rows" type="int" line="99"/>
                <declaration name="columns" type="int" line="100"/>
                <declaration name="master" type="DoubleMatrix2D" line="102"/>
                <declaration name="rowIndexes" type="int[]" line="110"/>
                <declaration name="columnIndexes" type="int[]" line="111"/>
                <declaration name="rowIndexes2" type="int[]" line="113"/>
                <declaration name="columnIndexes2" type="int[]" line="114"/>
                <declaration name="view1" type="DoubleMatrix2D" line="115"/>
                <declaration name="view9" type="DoubleMatrix2D" line="117"/>
                <declaration name="view2" type="DoubleMatrix2D" line="121"/>
                <declaration name="view3" type="DoubleMatrix2D" line="123"/>
            </method>
            <javadoc line="136">
                                
            </javadoc>
            <method name="doubleTest11" type="void" line="138">
                <comment line="139">
                    t columns = 5; // make a 1*1 matrix                    
                </comment>
                <declaration name="rows" type="int" line="139"/>
                <declaration name="columns" type="int" line="140"/>
                <declaration name="master" type="DoubleMatrix2D" line="141"/>
                <declaration name="rowIndexes" type="int[]" line="145"/>
                <declaration name="columnIndexes" type="int[]" line="146"/>
                <declaration name="view1" type="DoubleMatrix2D" line="148"/>
            </method>
            <javadoc line="155">
                                
            </javadoc>
            <method name="doubleTest12" type="void" line="157">
                <declaration name="A" type="DoubleMatrix2D" line="158"/>
            </method>
            <javadoc line="178">
                                
            </javadoc>
            <method name="doubleTest13" type="void" line="180">
                <comment line="181">
                    Sum( x[i]*x[i] )                    
                </comment>
                <comment line="181">
                    --&gt; 14                    
                </comment>
                <comment line="181">
                    Sum( x[i]*x[i] )                    
                </comment>
                <comment line="181">
                    --&gt; 14                    
                </comment>
                <comment line="181">
                    Sum( x[i]*x[i]*x[i] )                    
                </comment>
                <comment line="181">
                    --&gt; 36                    
                </comment>
                <comment line="181">
                    Sum( x[i] )                    
                </comment>
                <comment line="181">
                    --&gt; 6                    
                </comment>
                <comment line="181">
                    Min( x[i] )                    
                </comment>
                <comment line="181">
                    --&gt; 0                    
                </comment>
                <comment line="181">
                    Max( Sqrt(x[i]) / 2 )                    
                </comment>
                <comment line="181">
                    --&gt; 0.8660254037844386                    
                </comment>
                <comment line="181">
                    Number of all cells with 0 &lt;= value &lt;= 2                    
                </comment>
                <comment line="181">
                    --&gt; 3                    
                </comment>
                <comment line="181">
                    Number of all cells with 0.8 &lt;= Log2(value) &lt;= 1.2                    
                </comment>
                <comment line="181">
                    --&gt; 1                    
                </comment>
                <comment line="181">
                    Product( x[i] )                    
                </comment>
                <comment line="181">
                    --&gt; 0                    
                </comment>
                <comment line="181">
                    Product( x[i] ) of all x[i] &gt; limit                    
                </comment>
                <comment line="181">
                    --&gt; 6                    
                </comment>
                <comment line="181">
                    Sum( (x[i]+y[i])^2 )                    
                </comment>
                <comment line="181">
                    --&gt; 56                    
                </comment>
                <comment line="181">
                    otherMatrix1D.zMult(3);                    
                </comment>
                <comment line="181">
                    Sum(Math.PI * Math.log(otherMatrix1D[i] / matrix[i]))                    
                </comment>
                <comment line="181">
                    or, perhaps less error prone and more readable:                    
                </comment>
                <comment line="181">
                    Sum( x[slice,row,col]*x[slice,row,col] )                    
                </comment>
                <comment line="181">
                    --&gt; 140                    
                </comment>
                <comment line="181">
                    Sum( (x[i]+y[i])^2 )                    
                </comment>
                <comment line="181">
                    --&gt; 560                    
                </comment>
                <declaration name="values" type="double[]" line="181"/>
                <declaration name="matrix" type="DoubleMatrix1D" line="182"/>
                <anonymous_class line="187">
                    <method name="apply" type="boolean" line="188"/>
                </anonymous_class>
                <declaration name="limit" type="double" line="226"/>
                <anonymous_class line="227">
                    <method name="apply" type="double" line="228"/>
                </anonymous_class>
                <declaration name="f" type="DoubleFunction" line="227"/>
                <declaration name="otherMatrix1D" type="DoubleMatrix1D" line="234"/>
                <anonymous_class line="248">
                    <method name="apply" type="double" line="249"/>
                </anonymous_class>
                <declaration name="x" type="DoubleMatrix3D" line="254"/>
                <declaration name="y" type="DoubleMatrix3D" line="262"/>
            </method>
            <javadoc line="271">
                                
            </javadoc>
            <method name="doubleTest14" type="void" line="273">
                <comment line="274">
                    System.out.println(a);                    
                </comment>
                <comment line="274">
                    System.out.println(b);                    
                </comment>
                <comment line="274">
                    System.out.println(Basic.product(a,b));                    
                </comment>
                <declaration name="values" type="double[]" line="274"/>
                <declaration name="a" type="DoubleMatrix2D" line="275"/>
                <declaration name="b" type="DoubleMatrix2D" line="276"/>
                <declaration name="timer" type="cern.colt.Timer" line="285"/>
            </method>
            <javadoc line="289">
                                
            </javadoc>
            <method name="doubleTest15" type="void" line="291">
                <comment line="292">
                    DoubleMatrix2D A = Factory2D.make(values);                    
                </comment>
                <comment line="292">
                    DoubleMatrix2D A = Factory2D.makeIdentity(size,size);                    
                </comment>
                <comment line="292">
                    DoubleMatrix2D A = Factory2D.makeAscending(size,size).assign(new cern.jet.random.engine.MersenneTwister());                    
                </comment>
                <comment line="292">
                    timer.reset().start();                    
                </comment>
                <comment line="292">
                    System.out.println(&quot;A=&quot;+A);                    
                </comment>
                <comment line="292">
                    System.out.println(&quot;inverse(A)=&quot;+inv);                    
                </comment>
                <comment line="292">
                    System.out.println(&quot;formatted inverse(A)=&quot;+ new Jama.Matrix(inv.toArray()));                    
                </comment>
                <comment line="292">
                    -1.0000000000000018, 2.000000000000007, -1.0000000000000047
                    2.000000000000007, -6.750000000000024, 4.500000000000016                    
                </comment>
                <declaration name="values" type="double[][]" line="293"/>
                <declaration name="A" type="DoubleMatrix2D" line="301"/>
                <declaration name="value" type="double" line="302"/>
                <scope line="303"/>
                <declaration name="timer" type="cern.colt.Timer" line="312"/>
                <declaration name="inv" type="DoubleMatrix2D" line="313"/>
                <scope line="314"/>
            </method>
            <javadoc line="336">
                                
            </javadoc>
            <method name="doubleTest17" type="void" line="338">
                <comment line="339">
                    DoubleMatrix2D A = Factory2D.make(values);                    
                </comment>
                <comment line="339">
                    System.out.println(&quot;\n&quot;+A);                    
                </comment>
                <comment line="339">
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A.toString()));                    
                </comment>
                <comment line="339">
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(B.toString()));                    
                </comment>
                <comment line="339">
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(C.toString()));                    
                </comment>
                <comment line="339">
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(Factory2D.diagonal(A,B,C).toString()));                    
                </comment>
                <declaration name="A" type="DoubleMatrix2D" line="342"/>
                <declaration name="B" type="DoubleMatrix2D" line="343"/>
                <declaration name="C" type="DoubleMatrix2D" line="344"/>
            </method>
            <javadoc line="361">
                                
            </javadoc>
            <method name="doubleTest18" type="void" line="363">
                <comment line="364">
                    DoubleMatrix2D A = Factory2D.make(values);                    
                </comment>
                <comment line="364">
                    A01 = empty;                    
                </comment>
                <comment line="364">
                    A11 = Factory2D.ascending(s,s).assign(F.plus(A10.getQuick(s-1,s-1)));                    
                </comment>
                <comment line="364">
                    A12 = Factory2D.ascending(s,s).assign(F.plus(A11.getQuick(s-1,s-1)));                    
                </comment>
                <comment line="364">
                    A21 = Factory2D.ascending(s,s).assign(F.plus(A20.getQuick(s-1,s-1)));                    
                </comment>
                <comment line="364">
                    A22 = Factory2D.ascending(s,s).assign(F.plus(A21.getQuick(s-1,s-1)));                    
                </comment>
                <comment line="364">
                    B.assign(F.plus(A.zSum()));                    
                </comment>
                <comment line="364">
                    C.assign(F.plus(B.zSum()));                    
                </comment>
                <comment line="364">
                    System.out.println(&quot;\n&quot;+Factory2D.make33(A00,A01,A02,A10,A11,A12,A20,A21,A22));                    
                </comment>
                <comment line="364">
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A00.toString()));
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A01.toString()));
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A02.toString()));
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A10.toString()));
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A11.toString()));
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A12.toString()));
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A20.toString()));
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A21.toString()));
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A22.toString()));
                    
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(Factory2D.make33(A00,A01,A02,A10,A11,A12,A20,A21,A22).toString()));
                    
                    }
                    
                    
                    public static void doubleTest19() {
                    System.out.println(&quot;\n\n&quot;);                    
                </comment>
                <declaration name="s" type="int" line="365"/>
                <declaration name="A00" type="DoubleMatrix2D" line="368"/>
            </method>
            <javadoc line="419">
                                
            </javadoc>
            <method name="doubleTest19" type="void" line="421">
                <comment line="422">
                    System.out.println(&quot;\n\nbandwidth=&quot;+k+&quot; &quot;+cern.colt.matrixpattern.Converting.toHTML(A.toString()));                    
                </comment>
                <comment line="422">
                    System.out.println(&quot;\n\nbandwidth=&quot;+k+&quot; &quot;+cern.colt.matrixpattern.Converting.toHTML(A.toString()));                    
                </comment>
                <comment line="422">
                    System.out.println(&quot;\n\nbandwidth=&quot;+k+&quot; &quot;+cern.colt.matrixpattern.Converting.toHTML(A.toString()));                    
                </comment>
                <comment line="422">
                    System.out.println(&quot;\n\nbandwidth=&quot;+k+&quot; &quot;+cern.colt.matrixpattern.Converting.toHTML(A.toString()));                    
                </comment>
                <comment line="422">
                    System.out.println(&quot;\n\nbandwidth=&quot;+k+&quot; &quot;+cern.colt.matrixpattern.Converting.toHTML(A.toString()));                    
                </comment>
                <comment line="422">
                    System.out.println(&quot;\n\nbandwidth=&quot;+k+&quot; &quot;+cern.colt.matrixpattern.Converting.toHTML(A.toString()));                    
                </comment>
                <comment line="422">
                    System.out.println(&quot;\n\nbandwidth=&quot;+k+&quot; &quot;+cern.colt.matrixpattern.Converting.toHTML(A.toString()));                    
                </comment>
                <declaration name="A" type="DoubleMatrix2D" line="423"/>
                <declaration name="k" type="int" line="424"/>
                <declaration name="uk" type="int" line="425"/>
                <declaration name="lk" type="int" line="426"/>
                <declaration name="values5" type="double[][]" line="428"/>
                <declaration name="values4" type="double[][]" line="445"/>
                <declaration name="values1" type="double[][]" line="461"/>
                <declaration name="values6" type="double[][]" line="478"/>
                <declaration name="values7" type="double[][]" line="494"/>
                <declaration name="values2" type="double[][]" line="511"/>
                <declaration name="values3" type="double[][]" line="527"/>
            </method>
            <javadoc line="548">
                                
            </javadoc>
            <method name="doubleTest19" type="void" line="550">
                <comment line="551">
                    DoubleMatrix2D A = Factory2D.make(values);                    
                </comment>
                <comment line="551">
                    A01 = empty;                    
                </comment>
                <comment line="551">
                    A11 = Factory2D.ascending(s,s).assign(F.plus(A10.getQuick(s-1,s-1)));                    
                </comment>
                <comment line="551">
                    A12 = Factory2D.ascending(s,s).assign(F.plus(A11.getQuick(s-1,s-1)));                    
                </comment>
                <comment line="551">
                    A21 = Factory2D.ascending(s,s).assign(F.plus(A20.getQuick(s-1,s-1)));                    
                </comment>
                <comment line="551">
                    A22 = Factory2D.ascending(s,s).assign(F.plus(A21.getQuick(s-1,s-1)));                    
                </comment>
                <comment line="551">
                    B.assign(F.plus(A.zSum()));                    
                </comment>
                <comment line="551">
                    C.assign(F.plus(B.zSum()));                    
                </comment>
                <comment line="551">
                    System.out.println(&quot;\n&quot;+Factory2D.make33(A00,A01,A02,A10,A11,A12,A20,A21,A22));                    
                </comment>
                <comment line="551">
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A00.toString()));
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A01.toString()));
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A02.toString()));
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A10.toString()));
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A11.toString()));
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A12.toString()));
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A20.toString()));
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A21.toString()));
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(A22.toString()));
                    
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(Factory2D.make33(A00,A01,A02,A10,A11,A12,A20,A21,A22).toString()));
                    
                    }
                    
                    
                    public static void doubleTest2() {
                     using a map                    
                </comment>
                <declaration name="s" type="int" line="552"/>
                <declaration name="A00" type="DoubleMatrix2D" line="555"/>
            </method>
            <javadoc line="606">
                                
            </javadoc>
            <method name="doubleTest2" type="void" line="608">
                <comment line="609">
                    using a map                    
                </comment>
                <declaration name="keys" type="int[]" line="610"/>
                <declaration name="values" type="double[]" line="611"/>
                <declaration name="size" type="int" line="613"/>
                <declaration name="map" type="AbstractIntDoubleMap" line="614"/>
                <scope line="616"/>
            </method>
            <javadoc line="631">
                                
            </javadoc>
            <method name="doubleTest20" type="void" line="633">
                <comment line="634">
                    System.out.println(&quot;\n\nbandwidth=&quot;+k+&quot; &quot;+cern.colt.matrixpattern.Converting.toHTML(A.toString()));                    
                </comment>
                <comment line="634">
                    System.out.println(&quot;\n\nbandwidth=&quot;+k+&quot; &quot;+cern.colt.matrixpattern.Converting.toHTML(A.toString()));                    
                </comment>
                <comment line="634">
                    System.out.println(&quot;\n\nbandwidth=&quot;+k+&quot; &quot;+cern.colt.matrixpattern.Converting.toHTML(A.toString()));                    
                </comment>
                <comment line="634">
                    Exact eigenvalues from Westlake (1968), p.150 (ei&apos;vectors given too):                    
                </comment>
                <declaration name="A" type="DoubleMatrix2D" line="635"/>
                <declaration name="k" type="int" line="636"/>
                <declaration name="uk" type="int" line="637"/>
                <declaration name="lk" type="int" line="638"/>
                <declaration name="values1" type="double[][]" line="640"/>
                <declaration name="values2" type="double[][]" line="653"/>
                <declaration name="values3" type="double[][]" line="667"/>
                <declaration name="a" type="double" line="686"/>
                <declaration name="b" type="double" line="686"/>
                <declaration name="e" type="double[]" line="687"/>
            </method>
            <javadoc line="692">
                                
            </javadoc>
            <method name="doubleTest21" type="void" line="694">
                <comment line="695">
                    System.out.println(&quot;\n\n&quot;+LinearAlgebra.toVerboseString(A));                    
                </comment>
                <comment line="695">
                    System.out.println(new LUDecomposition(A));                    
                </comment>
                <comment line="695">
                    System.out.println(&quot;\n\nbandwidth=&quot;+k+&quot; &quot;+cern.colt.matrixpattern.Converting.toHTML(A.toString()));                    
                </comment>
                <declaration name="A" type="DoubleMatrix2D" line="696"/>
                <declaration name="k" type="int" line="697"/>
                <declaration name="uk" type="int" line="698"/>
                <declaration name="lk" type="int" line="699"/>
                <declaration name="values1" type="double[][]" line="701"/>
            </method>
            <javadoc line="716">
                                
            </javadoc>
            <method name="doubleTest22" type="void" line="718">
                <comment line="719">
                    System.out.println(&quot;\n\n&quot;+LinearAlgebra.toVerboseString(A));                    
                </comment>
                <comment line="719">
                    System.out.println(new LUDecomposition(A));                    
                </comment>
                <comment line="719">
                    System.out.println(&quot;\n\nbandwidth=&quot;+k+&quot; &quot;+cern.colt.matrixpattern.Converting.toHTML(A.toString()));                    
                </comment>
                <declaration name="A" type="DoubleMatrix2D" line="720"/>
                <declaration name="k" type="int" line="721"/>
                <declaration name="uk" type="int" line="722"/>
                <declaration name="lk" type="int" line="723"/>
                <declaration name="values1" type="double[][]" line="725"/>
            </method>
            <javadoc line="745">
                                
            </javadoc>
            <method name="doubleTest23" type="void" line="747">
                <comment line="748">
                    A.assign(random);                    
                </comment>
                <comment line="748">
                    A.assign(F.rint); // round                    
                </comment>
                <comment line="748">
                    I = Factory2D.identity(size);                    
                </comment>
                <comment line="748">
                    Inv = Factory2D.make(size,size);                    
                </comment>
                <comment line="748">
                    System.out.println(&quot;A=&quot;+A);                    
                </comment>
                <comment line="748">
                    System.out.println(&quot;LU=&quot;+LU);                    
                </comment>
                <comment line="748">
                    System.out.println(&quot;U=&quot;+lu.getU());                    
                </comment>
                <comment line="748">
                    System.out.println(&quot;L=&quot;+lu.getL());                    
                </comment>
                <declaration name="A" type="DoubleMatrix2D" line="750"/>
                <declaration name="b" type="DoubleMatrix1D" line="751"/>
                <declaration name="mean" type="double" line="753"/>
                <declaration name="stdDev" type="double" line="754"/>
                <declaration name="random" type="cern.jet.random.Normal" line="755"/>
                <declaration name="value" type="double" line="758"/>
                <declaration name="lu" type="LUDecompositionQuick" line="776"/>
                <declaration name="timer" type="cern.colt.Timer" line="779"/>
                <scope line="789"/>
            </method>
            <javadoc line="805">
                                
            </javadoc>
            <method name="doubleTest24" type="void" line="807">
                <comment line="808">
                    A.zSum4Neighbors(A,alpha,beta,runs);                    
                </comment>
                <comment line="808">
                    System.out.println(&quot;A=&quot;+A);                    
                </comment>
                <declaration name="A" type="DoubleMatrix2D" line="810"/>
                <declaration name="factory" type="DoubleFactory2D" line="811"/>
                <declaration name="value" type="double" line="817"/>
                <declaration name="omega" type="double" line="818"/>
                <declaration name="alpha" type="double" line="819"/>
                <declaration name="beta" type="double" line="820"/>
                <anonymous_class line="823">
                    <method name="apply" type="double" line="824"/>
                </anonymous_class>
                <declaration name="function" type="cern.colt.function.Double9Function" line="823"/>
                <declaration name="timer" type="cern.colt.Timer" line="828"/>
                <scope line="831"/>
                <declaration name="B" type="double[][]" line="839"/>
                <scope line="843"/>
            </method>
            <javadoc line="852">
                                
            </javadoc>
            <method name="doubleTest25" type="void" line="854">
                <declaration name="dense" type="boolean" line="859"/>
                <declaration name="A" type="DoubleMatrix2D" line="860"/>
                <declaration name="factory" type="DoubleFactory2D" line="861"/>
                <declaration name="value" type="double" line="867"/>
                <declaration name="timer" type="cern.colt.Timer" line="870"/>
            </method>
            <javadoc line="880">
                                
            </javadoc>
            <method name="doubleTest26" type="void" line="882">
                <declaration name="dense" type="boolean" line="887"/>
                <declaration name="A" type="DoubleMatrix2D" line="888"/>
                <declaration name="factory" type="DoubleFactory2D" line="889"/>
                <declaration name="value" type="double" line="895"/>
                <declaration name="timer" type="cern.colt.Timer" line="898"/>
                <anonymous_class line="900">
                    <method name="compare" type="int" line="901"/>
                </anonymous_class>
                <declaration name="fun" type="DoubleMatrix2DComparator" line="900"/>
            </method>
            <javadoc line="914">
                                
            </javadoc>
            <method name="doubleTest27" type="void" line="916">
                <comment line="917">
                    form a matrix with the columns as training vectors                    
                </comment>
                <comment line="917">
                    copy the patterns into the matrix                    
                </comment>
                <declaration name="rows" type="int" line="922"/>
                <declaration name="columns" type="int" line="923"/>
                <declaration name="trainingSet" type="double[][]" line="924"/>
                <declaration name="patternIndex" type="int" line="927"/>
                <declaration name="unitIndex" type="int" line="928"/>
                <declaration name="patternMatrix" type="DoubleMatrix2D" line="930"/>
                <declaration name="transposeMatrix" type="DoubleMatrix2D" line="931"/>
                <declaration name="QMatrix" type="DoubleMatrix2D" line="932"/>
                <declaration name="inverseQMatrix" type="DoubleMatrix2D" line="933"/>
                <declaration name="pseudoInverseMatrix" type="DoubleMatrix2D" line="934"/>
                <declaration name="weightMatrix" type="DoubleMatrix2D" line="935"/>
                <scope line="941">
                    <scope line="942"/>
                </scope>
            </method>
            <javadoc line="955">
                                
            </javadoc>
            <method name="doubleTest28" type="void" line="957">
                <declaration name="data" type="double[]" line="958"/>
                <declaration name="arrMatrix" type="double[][]" line="959"/>
                <declaration name="f" type="DoubleFactory2D" line="964"/>
                <declaration name="vector" type="DoubleMatrix1D" line="965"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="966"/>
                <declaration name="res" type="DoubleMatrix1D" line="967"/>
            </method>
            <javadoc line="973">
                                
            </javadoc>
            <method name="doubleTest28" type="void" line="975">
                <declaration name="data" type="double[]" line="976"/>
                <declaration name="arrMatrix" type="double[][]" line="977"/>
                <declaration name="vector" type="DoubleMatrix1D" line="983"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="984"/>
                <declaration name="res" type="DoubleMatrix1D" line="985"/>
            </method>
            <javadoc line="991">
                                
            </javadoc>
            <method name="doubleTest29" type="void" line="993">
                <comment line="994">
                    System.out.println(&quot;\n\n&quot;);
                    System.out.println(&quot;initializing...&quot;);
                    boolean dense = false;
                    DoubleMatrix2D A;
                    DoubleFactory2D factory;
                    if (dense)
                    factory = Factory2D.dense;
                    else
                    factory = Factory2D.sparse;
                    
                    double value = 0.5;
                    
                    DoubleMatrix2D C = Factory2D.dense.sample(size,size,value,1);
                    
                    A = factory.make(size,size);
                    System.out.print(&quot;A assign C... &quot;);
                    cern.colt.Timer timer = new cern.colt.Timer().start();
                    A.assign(C);
                    timer.stop().display();
                    
                    System.out.print(&quot;A getquick... &quot;);
                    timer.reset().start();
                    double sum=0;
                    for (int i=0; i&lt;size; i++) {
                    for (int j=0; j&lt;size; j++ ) {
                    sum+=A.getQuick(i,j);
                    }
                    }
                    timer.stop().display();
                    System.out.println(sum);                    
                </comment>
            </method>
            <javadoc line="1063">
                                
            </javadoc>
            <method name="doubleTest29" type="void" line="1065">
                <comment line="1066">
                    System.out.println(res);                    
                </comment>
                <declaration name="x" type="DoubleMatrix2D" line="1067"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="1068"/>
                <declaration name="timer" type="cern.colt.Timer" line="1070"/>
                <declaration name="res" type="DoubleMatrix2D" line="1071"/>
            </method>
            <javadoc line="1076">
                                
            </javadoc>
            <method name="doubleTest29" type="void" line="1078">
                <declaration name="data" type="double[][]" line="1079"/>
                <declaration name="arrMatrix" type="double[][]" line="1089"/>
                <declaration name="x" type="DoubleMatrix2D" line="1095"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="1096"/>
                <declaration name="res" type="DoubleMatrix2D" line="1098"/>
            </method>
            <javadoc line="1102">
                                
            </javadoc>
            <method name="doubleTest3" type="void" line="1104">
                <comment line="1105">
                    t columns = 5; // make a 4*5 matrix                    
                </comment>
                <comment line="1105">
                    ster.assign(1); // set all cells to 1                    
                </comment>
                <comment line="1105">
                    ster.viewPart(2,0,2,3).assign(2); // set [2,1] .. [3,3] to 2                    
                </comment>
                <comment line="1105">
                    DoubleMatrix2D copyPart = master.copyPart(2,1,2,3);
                    copyPart.assign(3);  modify an independent copy
                    copyPart.set(0,0,4);
                    System.out.println(&quot;\n&quot;+copyPart);  has changed                    
                </comment>
                <declaration name="rows" type="int" line="1105"/>
                <declaration name="columns" type="int" line="1106"/>
                <declaration name="master" type="DoubleMatrix2D" line="1107"/>
                <declaration name="flip1" type="DoubleMatrix2D" line="1114"/>
                <declaration name="flip2" type="DoubleMatrix2D" line="1116"/>
            </method>
            <javadoc line="1138">
                                
            </javadoc>
            <method name="doubleTest30" type="void" line="1140">
                <declaration name="data" type="double[][]" line="1141"/>
                <declaration name="x" type="double[]" line="1147"/>
                <declaration name="y" type="double[]" line="1148"/>
                <declaration name="A" type="DoubleMatrix2D" line="1150"/>
            </method>
            <javadoc line="1155">
                                
            </javadoc>
            <method name="doubleTest30" type="void" line="1157">
                <comment line="1158">
                    System.out.println(&quot;sum = &quot;+sum);                    
                </comment>
                <comment line="1158">
                    System.out.println(&quot;\n\n&quot;);
                    System.out.println(&quot;initializing...&quot;);
                    boolean dense = false;
                    DoubleMatrix2D A;
                    DoubleFactory2D factory;
                    if (dense)
                    factory = Factory2D.dense;
                    else
                    factory = Factory2D.sparse;
                    
                    double value = 0.5;
                    
                    DoubleMatrix2D C = Factory2D.dense.sample(size,size,value,0.01);
                    
                    A = factory.make(size,size);
                    cern.colt.Timer timer = new cern.colt.Timer().start();
                    A.assign(C);
                    timer.stop().display();
                    
                    timer.reset().start();
                    double sum=0;
                    for (int i=0; i&lt;size; i++) {
                    for (int j=0; j&lt;size; j++ ) {
                    sum+=A.getQuick(i,j);
                    }                    
                </comment>
                <declaration name="values" type="int[]" line="1159"/>
                <declaration name="list" type="IntArrayList" line="1160"/>
                <declaration name="val" type="int" line="1161"/>
                <declaration name="sum" type="int" line="1162"/>
                <declaration name="timer" type="cern.colt.Timer" line="1163"/>
                <scope line="1164">
                    <declaration name="k" type="int" line="1165"/>
                </scope>
            </method>
            <javadoc line="1230">
                                
            </javadoc>
            <method name="doubleTest30" type="void" line="1232">
                <comment line="1233">
                    int[] values = { 0, 2};                    
                </comment>
                <comment line="1233">
                    System.out.println(&quot;\n\n&quot;);
                    System.out.println(&quot;initializing...&quot;);
                    boolean dense = false;
                    DoubleMatrix2D A;
                    DoubleFactory2D factory;
                    if (dense)
                    factory = Factory2D.dense;
                    else
                    factory = Factory2D.sparse;
                    
                    double value = 0.5;
                    
                    DoubleMatrix2D C = Factory2D.dense.sample(size,size,value,0.01);
                    
                    A = factory.make(size,size);
                    cern.colt.Timer timer = new cern.colt.Timer().start();
                    A.assign(C);
                    timer.stop().display();
                    
                    timer.reset().start();
                    double sum=0;
                    for (int i=0; i&lt;size; i++) {
                    for (int j=0; j&lt;size; j++ ) {
                    sum+=A.getQuick(i,j);
                    }                    
                </comment>
                <declaration name="values" type="int[]" line="1235"/>
                <declaration name="list" type="IntArrayList" line="1236"/>
                <declaration name="l" type="int" line="1237"/>
                <declaration name="sum" type="int" line="1238"/>
                <declaration name="timer" type="cern.colt.Timer" line="1239"/>
                <scope line="1240">
                    <declaration name="k" type="int" line="1241"/>
                </scope>
            </method>
            <javadoc line="1307">
                                
            </javadoc>
            <method name="doubleTest31" type="void" line="1309">
                <comment line="1310">
                    DoubleMatrix1D c = b.viewFlip();                    
                </comment>
                <comment line="1310">
                    DoubleMatrix1D d = c.viewFlip();                    
                </comment>
                <declaration name="a" type="DoubleMatrix1D" line="1312"/>
                <declaration name="b" type="DoubleMatrix1D" line="1313"/>
                <declaration name="c" type="DoubleMatrix1D" line="1314"/>
                <declaration name="d" type="DoubleMatrix1D" line="1315"/>
            </method>
            <javadoc line="1328">
                                
            </javadoc>
            <method name="doubleTest32" type="void" line="1330">
                <declaration name="data" type="double[][]" line="1331"/>
                <declaration name="x" type="DoubleMatrix2D" line="1341"/>
            </method>
            <javadoc line="1347">
                                
            </javadoc>
            <method name="doubleTest33" type="void" line="1349">
                <comment line="1350">
                    {                    
                </comment>
                <declaration name="nan" type="double" line="1350"/>
                <declaration name="inf" type="double" line="1351"/>
                <declaration name="ninf" type="double" line="1352"/>
                <declaration name="data" type="double[][]" line="1354"/>
                <declaration name="x" type="DoubleMatrix2D" line="1367"/>
            </method>
            <javadoc line="1372">
                                
            </javadoc>
            <method name="doubleTest34" type="void" line="1374">
                <declaration name="data" type="double[][]" line="1375"/>
                <declaration name="A" type="DoubleMatrix2D" line="1383"/>
                <declaration name="inv" type="DoubleMatrix2D" line="1385"/>
                <declaration name="B" type="DoubleMatrix2D" line="1390"/>
                <scope line="1392"/>
            </method>
            <javadoc line="1396">
                Title:        Aero3D&lt;p&gt;
                 * Description:  A Program to analyse aeroelestic evects in transonic wings&lt;p&gt;
                 * Copyright:    Copyright (c) 1998&lt;p&gt;
                 * Company:      PIERSOL Engineering Inc.&lt;p&gt;                
                <@author>
                    r John R. Piersol                    
                </@author>
                <@version>
                    n                    
                </@version>
            </javadoc>
            <method name="doubleTest35" type="void" line="1404">
                <comment line="1405">
                    final int DOF = 200;
                    final cern.jet.random.engine.MersenneTwister RANDOM = new cern.jet.random.engine.MersenneTwister();
                    final Algebra ALGEBRA = new Algebra();
                    
                    System.out.println(&quot;\n\n\nStarting...&quot;);
                    double[][] k = randomMatrix(DOF, RANDOM);
                    DoubleMatrix2D kd = new DenseDoubleMatrix2D(k);
                    Jama.Matrix km = new Jama.Matrix(k);
                    
                    
                    
                    
                    
                    DoubleMatrix2D coltL = new LUDecomposition(kd).getL();
                    DoubleMatrix2D coltU = new LUDecomposition(kd).getU();
                    Jama.Matrix jamaL = new Jama.LUDecomposition(km).getL();
                    Jama.Matrix jamaU = new Jama.LUDecomposition(km).getU();
                    
                    System.out.println(coltL.equals(kd.like().assign(jamaL.getArrayCopy())));
                    System.out.println(coltL.aggregate(F.plus,F.abs));
                    double s = 0;
                    double[] temp2 = jamaL.getColumnPackedCopy();
                    for (int i = 0, n = temp2.length; i &lt; n; ++i) s += Math.abs(temp2[i]);
                    System.out.println(s);
                    
                    System.out.println(coltU.equals(kd.like().assign(jamaU.getArrayCopy())));
                    System.out.println(coltU.aggregate(F.plus,F.abs));
                    s = 0;
                    temp2 = jamaU.getColumnPackedCopy();
                    for (int i = 0, n = temp2.length; i &lt; n; ++i) s += Math.abs(temp2[i]);
                    System.out.println(s);
                    
                    System.out.println(&quot;colt=&quot;+new LUDecomposition(kd).toString());
                    System.out.println(&quot;jama=&quot;+new Jama.LUDecomposition(km).toString());                    
                </comment>
            </method>
            <javadoc line="1458">
                Title:        Aero3D&lt;p&gt;
                 * Description:  A Program to analyse aeroelestic evects in transonic wings&lt;p&gt;
                 * Copyright:    Copyright (c) 1998&lt;p&gt;
                 * Company:      PIERSOL Engineering Inc.&lt;p&gt;                
                <@author>
                    r John R. Piersol                    
                </@author>
                <@version>
                    n                    
                </@version>
            </javadoc>
            <method name="doubleTest36" type="void" line="1466">
                <declaration name="testSort" type="double[]" line="1467"/>
                <declaration name="doubleDense" type="DoubleMatrix1D" line="1473"/>
            </method>
            <javadoc line="1480">
                                
            </javadoc>
            <method name="doubleTest4" type="void" line="1482">
                <comment line="1483">
                    t columns = 5; // make a 4*5 matrix                    
                </comment>
                <comment line="1483">
                    ster.assign(1); // set all cells to 1                    
                </comment>
                <comment line="1483">
                    DoubleMatrix2D copyPart = master.copyPart(2,1,2,3);
                    copyPart.assign(3);  modify an independent copy
                    copyPart.set(0,0,4);
                    System.out.println(&quot;\n&quot;+copyPart);  has changed                    
                </comment>
                <declaration name="rows" type="int" line="1483"/>
                <declaration name="columns" type="int" line="1484"/>
                <declaration name="master" type="DoubleMatrix2D" line="1485"/>
                <declaration name="view" type="DoubleMatrix2D" line="1488"/>
            </method>
            <javadoc line="1509">
                                
            </javadoc>
            <method name="doubleTest5" type="void" line="1511">
                <comment line="1512">
                    int rows = 4;
                    int columns = 5;  make a 45 matrix
                    DoubleMatrix2D master = new DenseDoubleMatrix2D(rows,columns);
                    System.out.println(master);
                    master.assign(1);  set all cells to 1
                    DoubleMatrix2D view = master.viewPart(2,0,2,3);
                    view.assign(0);
                    for (int i=0; i&lt;rows; i++) {
                    for (int j=0; j&lt;columns; j++) {
                    boolean hasIndex = view.hasIndex(master.index(i,j));
                    System.out.println(&quot;(&quot;+i+&quot;,&quot;+j+&quot;):&quot;+hasIndex);
                    }
                    }
                    System.out.println(&quot;\n&quot;+master);
                    System.out.println(&quot;\n&quot;+view);                    
                </comment>
            </method>
            <javadoc line="1538">
                                
            </javadoc>
            <method name="doubleTest6" type="void" line="1540">
                <comment line="1541">
                    t columns = 5; // make a 4*5 matrix                    
                </comment>
                <comment line="1541">
                    master.assign(1); // set all cells to 1                    
                </comment>
                <comment line="1541">
                    ster.viewPart(2,0,2,3).assign(2); // set [2,1] .. [3,3] to 2                    
                </comment>
                <comment line="1541">
                    DoubleMatrix2D copyPart = master.copyPart(2,1,2,3);
                    copyPart.assign(3);  modify an independent copy
                    copyPart.set(0,0,4);
                    System.out.println(&quot;\n&quot;+copyPart);  has changed                    
                </comment>
                <declaration name="rows" type="int" line="1541"/>
                <declaration name="columns" type="int" line="1542"/>
                <declaration name="master" type="DoubleMatrix2D" line="1543"/>
                <declaration name="indexes" type="int[]" line="1549"/>
                <declaration name="view1" type="DoubleMatrix1D" line="1550"/>
                <declaration name="view2" type="DoubleMatrix1D" line="1552"/>
            </method>
            <javadoc line="1574">
                                
            </javadoc>
            <method name="doubleTest7" type="void" line="1576">
                <comment line="1577">
                    t columns = 5; // make a 4*5 matrix                    
                </comment>
                <comment line="1577">
                    master.assign(1); // set all cells to 1                    
                </comment>
                <comment line="1577">
                    master.viewPart(2,0,2,3).assign(2); // set [2,1] .. [3,3] to 2                    
                </comment>
                <comment line="1577">
                    System.out.println(&quot;\n&quot;+master);                    
                </comment>
                <declaration name="rows" type="int" line="1577"/>
                <declaration name="columns" type="int" line="1578"/>
                <declaration name="master" type="DoubleMatrix2D" line="1579"/>
                <declaration name="rowIndexes" type="int[]" line="1585"/>
                <declaration name="columnIndexes" type="int[]" line="1586"/>
                <declaration name="view1" type="DoubleMatrix2D" line="1587"/>
                <declaration name="view2" type="DoubleMatrix2D" line="1589"/>
            </method>
            <javadoc line="1598">
                                
            </javadoc>
            <method name="doubleTest8" type="void" line="1600">
                <comment line="1601">
                    t columns = 3; // make a 4*5 matrix                    
                </comment>
                <comment line="1601">
                    master.assign(1); // set all cells to 1                    
                </comment>
                <comment line="1601">
                    master.viewPart(2,0,2,3).assign(2); // set [2,1] .. [3,3] to 2                    
                </comment>
                <comment line="1601">
                    System.out.println(&quot;\n&quot;+master);                    
                </comment>
                <declaration name="rows" type="int" line="1601"/>
                <declaration name="columns" type="int" line="1602"/>
                <declaration name="master" type="DoubleMatrix2D" line="1603"/>
                <declaration name="view1" type="DoubleMatrix2D" line="1609"/>
                <declaration name="view2" type="DoubleMatrix2D" line="1611"/>
            </method>
            <javadoc line="1620">
                                
            </javadoc>
            <method name="doubleTest9" type="void" line="1622">
                <comment line="1623">
                    t columns = 3; // make a 4*5 matrix                    
                </comment>
                <comment line="1623">
                    master.assign(1); // set all cells to 1                    
                </comment>
                <comment line="1623">
                    master.viewPart(2,0,2,3).assign(2); // set [2,1] .. [3,3] to 2                    
                </comment>
                <comment line="1623">
                    System.out.println(&quot;\n&quot;+master);                    
                </comment>
                <declaration name="rows" type="int" line="1623"/>
                <declaration name="columns" type="int" line="1624"/>
                <declaration name="master" type="DoubleMatrix2D" line="1625"/>
                <declaration name="view1" type="DoubleMatrix2D" line="1631"/>
                <declaration name="view2" type="DoubleMatrix2D" line="1633"/>
            </method>
            <method name="doubleTestQR" type="void" line="1642">
                <comment line="1643">
                    test case0...                    
                </comment>
                <declaration name="x0" type="double" line="1644"/>
                <declaration name="y0" type="double" line="1645"/>
                <declaration name="x1" type="double" line="1646"/>
                <declaration name="y1" type="double" line="1647"/>
            </method>
            <javadoc line="1652">
                                
            </javadoc>
            <method name="main" type="void" line="1654">
                <comment line="1655">
                    int runs = Integer.parseInt(args[0]);
                    int size = Integer.parseInt(args[1]);
                    double nonZeroFraction = new Double(args[2]).doubleValue();                    
                </comment>
                <declaration name="runs" type="int" line="1655"/>
                <declaration name="val" type="int" line="1656"/>
            </method>
            <method name="randomMatrix" type="double[][]" line="1667">
                <comment line="1668">
                    for (int i = 0; i &lt; dof; ++i) {                    
                </comment>
                <comment line="1668">
                    for (int i = 0; i &lt; dof; ++i)                    
                </comment>
                <comment line="1668">
                    for (int j = 0; j &lt; dof; ++j) m[i][j] = RANDOM.nextDouble();                    
                </comment>
                <declaration name="m" type="double[][]" line="1668"/>
                <scope line="1677">
                    <scope line="1678"/>
                </scope>
            </method>
            <method name="solve" type="void" line="1686">
                <comment line="1687">
                    create the matrix object
                    DoubleMatrix2D A = new DenseDoubleMatrix2D(numpnt, 5);
                    DoubleMatrix2D B = new DenseDoubleMatrix2D(numpnt, 1);
                    fillout the matrix
                    for (int i = 0; i &lt; numpnt; i++) {
                    A.setQuick(i, 0, x[i]  y[i]);
                    A.setQuick(i, 1, y[i]  y[i]);
                    A.setQuick(i, 2, x[i]);
                    A.setQuick(i, 3, y[i]);
                    A.setQuick(i, 4, 1.0);
                    B.setQuick(i, 0, -x[i]  x[i]);
                    }
                    System.out.println(A);
                    test the matrix condition
                    SingularValueDecomposition svd = new SingularValueDecomposition(A);
                    System.out.println(svd);
                     Using Algebra to solve the equation
                    Algebra alg = new Algebra();
                    DoubleMatrix2D resAlg = alg.solve(A.copy(), B.copy());
                    System.out.println(&quot;Using Algebra...&quot;);
                    System.out.println(resAlg);
                     Using QRDecomposition to solve the problem..
                    QRDecomposition qrd = new QRDecomposition(A);
                    DoubleMatrix2D resQRD = qrd.solve(B);
                    System.out.println(&quot;Using QRDecomposition...&quot;);
                    System.out.println(resQRD);
                     Using Jama.QRDecomposition to solve the problem..
                    Jama.QRDecomposition qrdJama = new Jama.QRDecomposition(new Jama.Matrix(A.toArray()));
                    resQRD = new DenseDoubleMatrix2D(qrdJama.solve(new Jama.Matrix(B.toArray())).getArrayCopy());                    
                </comment>
            </method>
            <javadoc line="1721">
                                
            </javadoc>
            <method name="testLU" type="void" line="1723">
                <comment line="1724">
                    ubleMatrix2D H = new DenseDoubleMatrix2D( vals ); // see values below...                    
                </comment>
                <comment line="1724">
                    DoubleMatrix2D HtH = new DenseDoubleMatrix2D( 5, 5 );
                    DoubleMatrix2D Hplus = new DenseDoubleMatrix2D( 5, 6 );
                    LUDecompositionQuick LUD = new LUDecompositionQuick();
                    H.zMult( H, HtH, 1, 0, true, false );
                    DoubleMatrix2D res = Algebra.DEFAULT.inverse(HtH).zMult(H,null,1,0,false,true);
                    LUD.decompose( HtH );
                     first fill Hplus with the transpose of H...
                    for (int i = 0; i &lt; 6; i++ ) {
                    for ( int j = 0; j &lt; 5; j++ ) {
                    Hplus.set( j, i, H.get( i, j ) );
                    }                    
                </comment>
                <comment line="1724">
                    in matlab...                    
                </comment>
                <comment line="1724">
                    Hplus = inv(H&apos; * H) * H&apos;                    
                </comment>
                <comment line="1724">
                    System.out.println(&quot;\nLU=&quot;+LUD);                    
                </comment>
                <comment line="1724">
                    System.out.println(&quot;\nHplus=&quot;+Hplus);                    
                </comment>
                <comment line="1724">
                    System.out.println(&quot;\nperm=&quot;+perm);                    
                </comment>
                <comment line="1724">
                    System.out.println(&quot;\ninv=&quot;+inv);                    
                </comment>
                <comment line="1724">
                    System.out.println(&quot;\nres=&quot;+res);                    
                </comment>
                <declaration name="vals" type="double[][]" line="1724"/>
                <declaration name="H" type="DoubleMatrix2D" line="1733"/>
                <declaration name="Hplus" type="DoubleMatrix2D" line="1736"/>
            </method>
            <javadoc line="1768">
                                
            </javadoc>
            <method name="testMax" type="void" line="1770">
                <declaration name="temp" type="double[]" line="1771"/>
                <declaration name="d1Double" type="DenseDoubleMatrix1D" line="1776"/>
                <declaration name="d1ynamicBin" type="hep.aida.bin.DynamicBin1D" line="1778"/>
                <declaration name="max" type="double" line="1780"/>
            </method>
        </class>
    </source>