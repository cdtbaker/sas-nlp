<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.impl">
        <class name="AbstractMatrix2D" line="11">
            <extends class="AbstractMatrix"/>
            <comment line="12">
                Indicates non-flipped state (flip==1) or flipped state (flip==-1).                
            </comment>
            <comment line="12">
                protected int rowFlip, columnFlip;                
            </comment>
            <comment line="12">
                Indicates non-flipped state or flipped state.                
            </comment>
            <comment line="12">
                protected int rowFlipMask, columnFlipMask;                
            </comment>
            <javadoc line="11">
                Abstract base class for 2-d matrices holding objects or primitive data types such as &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, etc.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  &lt;b&gt;Note that this implementation is not synchronized.&lt;/b&gt;                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="columns" type="int" line="21"/>
            <javadoc line="21">
                the number of colums and rows this matrix (view) has                
            </javadoc>
            <declaration name="rowStride" type="int" line="24"/>
            <javadoc line="24">
                the number of elements between two rows, i.e. &lt;tt&gt;index(i+1,j,k) - index(i,j,k)&lt;/tt&gt;.                
            </javadoc>
            <declaration name="columnStride" type="int" line="27"/>
            <javadoc line="27">
                the number of elements between two columns, i.e. &lt;tt&gt;index(i,j+1,k) - index(i,j,k)&lt;/tt&gt;.                
            </javadoc>
            <declaration name="rowZero" type="int" line="31"/>
            <javadoc line="31">
                the index of the first element                
            </javadoc>
            <javadoc line="46">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="AbstractMatrix2D" type="constructor" line="49"/>
            <javadoc line="50">
                Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
                  Default implementation. Override, if necessary.                
                <@param>
                    m rank   the absolute rank of the element.                    
                </@param>
                <@return>
                    n the position.                    
                </@return>
            </javadoc>
            <method name="_columnOffset" type="int" line="57">
                <params>
                    <param name="absRank" type="int"/>
                </params>
            </method>
            <javadoc line="60">
                Returns the absolute rank of the given relative rank.                
                <@param>
                    m rank   the relative rank of the element.                    
                </@param>
                <@return>
                    n the absolute rank of the element.                    
                </@return>
            </javadoc>
            <method name="_columnRank" type="int" line="66">
                <params>
                    <param name="rank" type="int"/>
                </params>
                <comment line="67">
                    return columnZero + ((rank+columnFlipMask)^columnFlipMask);                    
                </comment>
                <comment line="67">
                    return columnZero + rank*columnFlip; // slower                    
                </comment>
            </method>
            <javadoc line="71">
                Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
                  Default implementation. Override, if necessary.                
                <@param>
                    m rank   the absolute rank of the element.                    
                </@param>
                <@return>
                    n the position.                    
                </@return>
            </javadoc>
            <method name="_rowOffset" type="int" line="78">
                <params>
                    <param name="absRank" type="int"/>
                </params>
            </method>
            <javadoc line="81">
                Returns the absolute rank of the given relative rank.                
                <@param>
                    m rank   the relative rank of the element.                    
                </@param>
                <@return>
                    n the absolute rank of the element.                    
                </@return>
            </javadoc>
            <method name="_rowRank" type="int" line="87">
                <params>
                    <param name="rank" type="int"/>
                </params>
                <comment line="88">
                    return rowZero + ((rank+rowFlipMask)^rowFlipMask);                    
                </comment>
                <comment line="88">
                    return rowZero + rank*rowFlip; // slower                    
                </comment>
            </method>
            <javadoc line="92">
                Checks whether the receiver contains the given box and throws an exception, if necessary.                
                <@throws>
                    s IndexOutOfBoundsException if <tt>column<0 || width<0 || column+width>columns() || row<0 || height<0 || row+height>rows()</tt>                    
                </@throws>
            </javadoc>
            <method name="checkBox" type="void" line="96">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="height" type="int"/>
                    <param name="width" type="int"/>
                </params>
            </method>
            <javadoc line="99">
                Sanity check for operations requiring a column index to be within bounds.                
                <@throws>
                    s IndexOutOfBoundsException if <tt>column < 0 || column >= columns()</tt>.                    
                </@throws>
            </javadoc>
            <method name="checkColumn" type="void" line="103">
                <params>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="106">
                Checks whether indexes are legal and throws an exception, if necessary.                
                <@throws>
                    s IndexOutOfBoundsException if <tt>! (0 <= indexes[i] < columns())</tt> for any i=0..indexes.length()-1.                    
                </@throws>
            </javadoc>
            <method name="checkColumnIndexes" type="void" line="110">
                <params>
                    <param name="indexes" type="int[]"/>
                </params>
                <scope line="111">
                    <declaration name="index" type="int" line="112"/>
                </scope>
            </method>
            <javadoc line="116">
                Sanity check for operations requiring a row index to be within bounds.                
                <@throws>
                    s IndexOutOfBoundsException if <tt>row < 0 || row >= rows()</tt>.                    
                </@throws>
            </javadoc>
            <method name="checkRow" type="void" line="120">
                <params>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="123">
                Checks whether indexes are legal and throws an exception, if necessary.                
                <@throws>
                    s IndexOutOfBoundsException if <tt>! (0 <= indexes[i] < rows())</tt> for any i=0..indexes.length()-1.                    
                </@throws>
            </javadoc>
            <method name="checkRowIndexes" type="void" line="127">
                <params>
                    <param name="indexes" type="int[]"/>
                </params>
                <scope line="128">
                    <declaration name="index" type="int" line="129"/>
                </scope>
            </method>
            <javadoc line="133">
                Sanity check for operations requiring two matrices with the same number of columns and rows.                
                <@throws>
                    s IllegalArgumentException if <tt>columns() != B.columns() || rows() != B.rows()</tt>.                    
                </@throws>
            </javadoc>
            <method name="checkShape" type="void" line="137">
                <params>
                    <param name="B" type="AbstractMatrix2D"/>
                </params>
            </method>
            <javadoc line="140">
                Sanity check for operations requiring matrices with the same number of columns and rows.                
                <@throws>
                    s IllegalArgumentException if <tt>columns() != B.columns() || rows() != B.rows() || columns() != C.columns() || rows() != C.rows()</tt>.                    
                </@throws>
            </javadoc>
            <method name="checkShape" type="void" line="144">
                <params>
                    <param name="B" type="AbstractMatrix2D"/>
                    <param name="C" type="AbstractMatrix2D"/>
                </params>
            </method>
            <javadoc line="147">
                Returns the number of columns.                
            </javadoc>
            <method name="columns" type="int" line="150"/>
            <javadoc line="153">
                Returns the position of the given coordinate within the (virtual or non-virtual) internal 1-dimensional array.                
                <@param>
                    m row   the index of the row-coordinate.                    
                </@param>
                <@param>
                    m column   the index of the column-coordinate.                    
                </@param>
            </javadoc>
            <method name="index" type="int" line="159">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="162">
                Returns the number of rows.                
            </javadoc>
            <method name="rows" type="int" line="165"/>
            <javadoc line="168">
                Sets up a matrix with a given number of rows and columns.                
                <@param>
                    m rows the number of rows the matrix shall have.                    
                </@param>
                <@param>
                    m columns the number of columns the matrix shall have.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if <tt>rows<0 || columns<0 || (double)columnsrows > Integer.MAX_VALUE</tt>.                    
                </@throws>
            </javadoc>
            <method name="setUp" type="void" line="174">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="177">
                Sets up a matrix with a given number of rows and columns and the given strides.                
                <@param>
                    m rows the number of rows the matrix shall have.                    
                </@param>
                <@param>
                    m columns the number of columns the matrix shall have.                    
                </@param>
                <@param>
                    m rowZero the position of the first element.                    
                </@param>
                <@param>
                    m columnZero the position of the first element.                    
                </@param>
                <@param>
                    m rowStride the number of elements between two rows, i.e. <tt>index(i+1,j)-index(i,j)</tt>.                    
                </@param>
                <@param>
                    m columnStride the number of elements between two columns, i.e. <tt>index(i,j+1)-index(i,j)</tt>.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if <tt>rows<0 || columns<0 || (double)columnsrows > Integer.MAX_VALUE</tt> or flip's are illegal.                    
                </@throws>
            </javadoc>
            <method name="setUp" type="void" line="187">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="rowZero" type="int"/>
                    <param name="columnZero" type="int"/>
                    <param name="rowStride" type="int"/>
                    <param name="columnStride" type="int"/>
                </params>
            </method>
            <javadoc line="201">
                Returns the number of cells which is &lt;tt&gt;rows()columns()&lt;/tt&gt;.                
            </javadoc>
            <method name="size" type="int" line="204"/>
            <javadoc line="207">
                Returns a string representation of the receiver&apos;s shape.                
            </javadoc>
            <method name="toStringShort" type="String" line="210"/>
            <javadoc line="213">
                Self modifying version of viewColumnFlip().                
            </javadoc>
            <method name="vColumnFlip" type="AbstractMatrix2D" line="216">
                <scope line="217"/>
            </method>
            <javadoc line="224">
                Self modifying version of viewDice().                
            </javadoc>
            <method name="vDice" type="AbstractMatrix2D" line="227">
                <comment line="228">
                    swap;                    
                </comment>
                <comment line="228">
                    flips stay unaffected                    
                </comment>
                <declaration name="tmp" type="int" line="228"/>
            </method>
            <javadoc line="239">
                Self modifying version of viewPart().                
                <@throws>
                    s IndexOutOfBoundsException if <tt>column<0 || width<0 || column+width>columns() || row<0 || height<0 || row+height>rows()</tt>                    
                </@throws>
            </javadoc>
            <method name="vPart" type="AbstractMatrix2D" line="243">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="height" type="int"/>
                    <param name="width" type="int"/>
                </params>
            </method>
            <javadoc line="252">
                Self modifying version of viewRowFlip().                
            </javadoc>
            <method name="vRowFlip" type="AbstractMatrix2D" line="255">
                <scope line="256"/>
            </method>
            <javadoc line="263">
                Self modifying version of viewStrides().                
                <@throws>
                    s IndexOutOfBoundsException if <tt>rowStride<=0 || columnStride<=0</tt>.                    
                </@throws>
            </javadoc>
            <method name="vStrides" type="AbstractMatrix2D" line="267">
                <params>
                    <param name="rowStride" type="int"/>
                    <param name="columnStride" type="int"/>
                </params>
            </method>
        </class>
    </source>