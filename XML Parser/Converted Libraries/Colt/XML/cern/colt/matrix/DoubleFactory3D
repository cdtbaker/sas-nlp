<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix">
        <import package="cern.colt.matrix.impl.DenseDoubleMatrix3D"/>
        <import package="cern.colt.matrix.impl.SparseDoubleMatrix3D"/>
        <class name="DoubleFactory3D" line="13">
            <extends class="cern.colt.PersistentObject"/>
            <javadoc line="13">
                Factory for convenient construction of 3-d matrices holding &lt;tt&gt;double&lt;/tt&gt; cells. 
                  Use idioms like &lt;tt&gt;DoubleFactory3D.dense.make(4,4,4)&lt;/tt&gt; to construct dense matrices, 
                  &lt;tt&gt;DoubleFactory3D.sparse.make(4,4,4)&lt;/tt&gt; to construct sparse matrices.
                  If the factory is used frequently it might be useful to streamline the notation. 
                  For example by aliasing:
                  &lt;table&gt;
                  &lt;td class=&quot;PRE&quot;&gt; 
                  &lt;pre&gt;
                  DoubleFactory3D F = DoubleFactory3D.dense;
                  F.make(4,4,4);
                  F.descending(10,20,5);
                  F.random(4,4,5);
                  ...
                  &lt;/pre&gt;
                  &lt;/td&gt;
                  &lt;/table&gt;                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="dense" type="DoubleFactory3D" line="36"/>
            <javadoc line="36">
                A factory producing dense matrices.                
            </javadoc>
            <declaration name="sparse" type="DoubleFactory3D" line="41"/>
            <javadoc line="41">
                A factory producing sparse matrices.                
            </javadoc>
            <javadoc line="45">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="DoubleFactory3D" type="constructor" line="48"/>
            <javadoc line="49">
                Constructs a matrix with cells having ascending values.
                  For debugging purposes.                
            </javadoc>
            <method name="ascending" type="DoubleMatrix3D" line="53">
                <params>
                    <param name="slices" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
                <declaration name="F" type="cern.jet.math.Functions" line="54"/>
            </method>
            <javadoc line="57">
                Constructs a matrix with cells having descending values.
                  For debugging purposes.                
            </javadoc>
            <method name="descending" type="DoubleMatrix3D" line="61">
                <params>
                    <param name="slices" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
                <declaration name="matrix" type="DoubleMatrix3D" line="62"/>
                <declaration name="v" type="int" line="63"/>
                <scope line="64">
                    <scope line="65">
                        <scope line="66"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="73">
                Constructs a matrix with the given cell values.
                  &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[slice][row][column]&lt;/tt&gt;
                  and have exactly the same number of slices, rows and columns as the receiver.
                  &lt;p&gt;
                  The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <@param>
                    m values the values to be filled into the cells.                    
                </@param>
                <@return>
                    n <tt>this</tt> (for convenience only).                    
                </@return>
                <@throws>
                    s IllegalArgumentException if <tt>values.length != slices() || for any 0 &lt;= slice &lt; slices(): values[slice].length != rows()</tt>.                    
                </@throws>
                <@throws>
                    s IllegalArgumentException if <tt>for any 0 &lt;= column &lt; columns(): values[slice][row].length != columns()</tt>.                    
                </@throws>
            </javadoc>
            <method name="make" type="DoubleMatrix3D" line="85">
                <params>
                    <param name="values" type="double[][][]"/>
                </params>
            </method>
            <javadoc line="89">
                Constructs a matrix with the given shape, each cell initialized with zero.                
            </javadoc>
            <method name="make" type="DoubleMatrix3D" line="92">
                <params>
                    <param name="slices" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="96">
                Constructs a matrix with the given shape, each cell initialized with the given value.                
            </javadoc>
            <method name="make" type="DoubleMatrix3D" line="99">
                <params>
                    <param name="slices" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                    <param name="initialValue" type="double"/>
                </params>
            </method>
            <javadoc line="102">
                Constructs a matrix with uniformly distributed values in &lt;tt&gt;(0,1)&lt;/tt&gt; (exclusive).                
            </javadoc>
            <method name="random" type="DoubleMatrix3D" line="105">
                <params>
                    <param name="slices" type="int"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
        </class>
    </source>