<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix.objectalgo">
        <import package="cern.colt.matrix.ObjectMatrix2D"/>
        <interface name="ObjectMatrix2DComparator">
            <javadoc line="12">
                A comparison function which imposes a &lt;i&gt;total ordering&lt;/i&gt; on some
                  collection of elements.  Comparators can be passed to a sort method (such as
                  &lt;tt&gt;cern.colt.matrix.objectalgo.Sorting.quickSort&lt;/tt&gt;) to allow precise control over the sort order.&lt;p&gt;
                  Note: It is generally a good idea for comparators to implement
                  &lt;tt&gt;java.io.Serializable&lt;/tt&gt;, as they may be used as ordering methods in
                  serializable data structures.  In
                  order for the data structure to serialize successfully, the comparator (if
                  provided) must implement &lt;tt&gt;Serializable&lt;/tt&gt;.&lt;p&gt;                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
                <@see>
                    e java.util.Comparator                    
                </@see>
                <@see>
                    e cern.colt                    
                </@see>
                <@see>
                    e cern.colt.Sorting                    
                </@see>
            </javadoc>
            <method name="compare" type="int" line="30"/>
            <javadoc line="30">
                Compares its two arguments for order.  Returns a negative integer,
                  zero, or a positive integer as the first argument is less than, equal
                  to, or greater than the second.&lt;p&gt;
                  The implementor must ensure that &lt;tt&gt;sgn(compare(x, y)) ==
                  -sgn(compare(y, x))&lt;/tt&gt; for all &lt;tt&gt;x&lt;/tt&gt; and &lt;tt&gt;y&lt;/tt&gt;.  (This
                  implies that &lt;tt&gt;compare(x, y)&lt;/tt&gt; must throw an exception if and only
                  if &lt;tt&gt;compare(y, x)&lt;/tt&gt; throws an exception.)&lt;p&gt;
                  The implementor must also ensure that the relation is transitive:
                  &lt;tt&gt;((compare(x, y)&amp;gt;0) &amp;amp;&amp;amp; (compare(y, z)&amp;gt;0))&lt;/tt&gt; implies
                  &lt;tt&gt;compare(x, z)&amp;gt;0&lt;/tt&gt;.&lt;p&gt;
                  Finally, the implementer must ensure that &lt;tt&gt;compare(x, y)==0&lt;/tt&gt;
                  implies that &lt;tt&gt;sgn(compare(x, z))==sgn(compare(y, z))&lt;/tt&gt; for all
                  &lt;tt&gt;z&lt;/tt&gt;.&lt;p&gt;                
                <@return>
                    n a negative integer, zero, or a positive integer as the
                      first argument is less than, equal to, or greater than the
                      second.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="54"/>
            <javadoc line="54">
                Indicates whether some other object is &amp;quot;equal to&amp;quot; this
                  Comparator.  This method must obey the general contract of
                  &lt;tt&gt;Object.equals(Object)&lt;/tt&gt;.  Additionally, this method can return
                  &lt;tt&gt;true&lt;/tt&gt; &lt;i&gt;only&lt;/i&gt; if the specified Object is also a comparator
                  and it imposes the same ordering as this comparator.  Thus,
                  &lt;code&gt;comp1.equals(comp2)&lt;/code&gt; implies that &lt;tt&gt;sgn(comp1.compare(o1,
                  o2))==sgn(comp2.compare(o1, o2))&lt;/tt&gt; for every element
                  &lt;tt&gt;o1&lt;/tt&gt; and &lt;tt&gt;o2&lt;/tt&gt;.&lt;p&gt;
                  Note that it is &lt;i&gt;always&lt;/i&gt; safe &lt;i&gt;not&lt;/i&gt; to override
                  &lt;tt&gt;Object.equals(Object)&lt;/tt&gt;.  However, overriding this method may,
                  in some cases, improve performance by allowing programs to determine
                  that two distinct Comparators impose the same order.                
                <@param>
                    m obj   the reference object with which to compare.                    
                </@param>
                <@return>
                    n  <code>true</code> only if the specified object is also
                      a comparator and it imposes the same ordering as this
                      comparator.                    
                </@return>
                <@see>
                    e java.lang.Object#equals(java.lang.Object)                    
                </@see>
                <@see>
                    e java.lang.Object#hashCode()                    
                </@see>
            </javadoc>
        </interface>
    </source>