<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.matrix">
        <import package="cern.colt.matrix.impl.DenseDoubleMatrix2D"/>
        <import package="cern.colt.matrix.impl.RCDoubleMatrix2D"/>
        <import package="cern.colt.matrix.impl.SparseDoubleMatrix2D"/>
        <class name="DoubleFactory2D" extends="cern.colt.PersistentObject" line="14">
            <comment line="15">
                A factory producing sparse row compressed modified matrices.                
            </comment>
            <comment line="15">
                public static final DoubleFactory2D rowCompressedModified = new DoubleFactory2D();                
            </comment>
            <javadoc line="14">
                Factory for convenient construction of 2-d matrices holding &lt;tt&gt;double&lt;/tt&gt; 
                 * cells. Also provides convenient methods to compose (concatenate) and decompose 
                 * (split) matrices from/to constituent blocks. &lt;/p&gt;
                 * &lt;p&gt;&amp;nbsp; &lt;/p&gt;
                 * &lt;table border=&quot;0&quot; cellspacing=&quot;0&quot;&gt;
                 * &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                 * &lt;td&gt;&lt;i&gt;Construction&lt;/i&gt;&lt;/td&gt;
                 * &lt;td&gt;Use idioms like &lt;tt&gt;DoubleFactory2D.dense.make(4,4)&lt;/tt&gt; to construct 
                 * dense matrices, &lt;tt&gt;DoubleFactory2D.sparse.make(4,4)&lt;/tt&gt; to construct sparse 
                 * matrices.&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                 * &lt;td&gt;&lt;i&gt; Construction with initial values &lt;/i&gt;&lt;/td&gt;
                 * &lt;td&gt;Use other &lt;tt&gt;make&lt;/tt&gt; methods to construct matrices with given initial 
                 * values. &lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                 * &lt;td&gt;&lt;i&gt; Appending rows and columns &lt;/i&gt;&lt;/td&gt;
                 * &lt;td&gt;Use methods {@link #appendColumns(DoubleMatrix2D,DoubleMatrix2D) appendColumns}, {@link #appendColumns(DoubleMatrix2D,DoubleMatrix2D) appendRows} and {@link #repeat(DoubleMatrix2D,int,int) repeat} to append rows and columns. &lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                 * &lt;td&gt;&lt;i&gt; General block matrices &lt;/i&gt;&lt;/td&gt;
                 * &lt;td&gt;Use methods {@link #compose(DoubleMatrix2D[][]) compose} and {@link #decompose(DoubleMatrix2D[][],DoubleMatrix2D) 
                 * decompose} to work with general block matrices. &lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                 * &lt;td&gt;&lt;i&gt; Diagonal matrices &lt;/i&gt;&lt;/td&gt;
                 * &lt;td&gt;Use methods {@link #diagonal(DoubleMatrix1D) diagonal(vector)}, {@link #diagonal(DoubleMatrix2D) diagonal(matrix)} and {@link #identity(int) identity} 
                 * to work with diagonal matrices. &lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                 * &lt;td&gt;&lt;i&gt; Diagonal block matrices &lt;/i&gt;&lt;/td&gt;
                 * &lt;td&gt;Use method {@link #composeDiagonal(DoubleMatrix2D,DoubleMatrix2D,DoubleMatrix2D) 
                 * composeDiagonal} to work with diagonal block matrices. &lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                 * &lt;td&gt;&lt;i&gt;Random&lt;/i&gt;&lt;/td&gt;
                 * &lt;td&gt;Use methods {@link #random(int,int) random} and {@link #sample(int,int,double,double) 
                 * sample} to construct random matrices. &lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;/table&gt;
                 * &lt;p&gt;&amp;nbsp;&lt;/p&gt;
                 * &lt;p&gt;If the factory is used frequently it might be useful to streamline the notation. 
                 * For example by aliasing: &lt;/p&gt;
                 * &lt;table&gt;
                 * &lt;td class=&quot;PRE&quot;&gt; 
                 * &lt;pre&gt;
                 * DoubleFactory2D F = DoubleFactory2D.dense;
                 * F.make(4,4);
                 * F.descending(10,20);
                 * F.random(4,4);
                 * ...
                 * &lt;/pre&gt;
                 * &lt;/td&gt;
                 * &lt;/table&gt;                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="dense" type="DoubleFactory2D" line="78"/>
            <javadoc line="78">
                A factory producing dense matrices.                
            </javadoc>
            <declaration name="sparse" type="DoubleFactory2D" line="83"/>
            <javadoc line="83">
                A factory producing sparse hash matrices.                
            </javadoc>
            <declaration name="rowCompressed" type="DoubleFactory2D" line="88"/>
            <javadoc line="88">
                A factory producing sparse row compressed matrices.                
            </javadoc>
            <javadoc line="97">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="DoubleFactory2D" type="constructor" line="100"/>
            <javadoc line="101">
                C = A||B; Constructs a new matrix which is the column-wise concatenation of two other matrices.
                 * &lt;pre&gt;
                 * 0 1 2
                 * 3 4 5
                 * appendColumns
                 * 6 7
                 * 8 9
                 * --&gt;
                 * 0 1 2 6 7 
                 * 3 4 5 8 9
                 * &lt;/pre&gt;                
            </javadoc>
            <method name="appendColumns" type="DoubleMatrix2D" line="114">
                <comment line="115">
                    force both to have maximal shared number of rows.                    
                </comment>
                <comment line="115">
                    concatenate                    
                </comment>
                <declaration name="ac" type="int" line="120"/>
                <declaration name="bc" type="int" line="121"/>
                <declaration name="r" type="int" line="122"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="123"/>
            </method>
            <javadoc line="128">
                C = A||B; Constructs a new matrix which is the row-wise concatenation of two other matrices.
                 * &lt;pre&gt;
                 * 0 1 
                 * 2 3 
                 * 4 5
                 * appendRows
                 * 6 7
                 * 8 9
                 * --&gt;
                 * 0 1 
                 * 2 3 
                 * 4 5
                 * 6 7
                 * 8 9
                 * &lt;/pre&gt;                
            </javadoc>
            <method name="appendRows" type="DoubleMatrix2D" line="145">
                <comment line="146">
                    force both to have maximal shared number of columns.                    
                </comment>
                <comment line="146">
                    concatenate                    
                </comment>
                <declaration name="ar" type="int" line="151"/>
                <declaration name="br" type="int" line="152"/>
                <declaration name="c" type="int" line="153"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="154"/>
            </method>
            <javadoc line="159">
                Constructs a matrix with cells having ascending values.
                 * For debugging purposes.
                 * Example:
                 * &lt;pre&gt;
                 * 0 1 2 
                 * 3 4 5
                 * &lt;/pre&gt;                
            </javadoc>
            <method name="ascending" type="DoubleMatrix2D" line="168">
                <declaration name="F" type="cern.jet.math.Functions" line="169"/>
            </method>
            <javadoc line="172">
                Checks whether the given array is rectangular, that is, whether all rows have the same number of columns.                
                <@throws>
                    s IllegalArgumentException if the array is not rectangular.                    
                </@throws>
            </javadoc>
            <method name="checkRectangularShape" type="void" line="176">
                <declaration name="columns" type="int" line="177"/>
                <scope line="178">
                    <scope line="179"/>
                </scope>
            </method>
            <javadoc line="185">
                Checks whether the given array is rectangular, that is, whether all rows have the same number of columns.                
                <@throws>
                    s IllegalArgumentException if the array is not rectangular.                    
                </@throws>
            </javadoc>
            <method name="checkRectangularShape" type="void" line="189">
                <declaration name="columns" type="int" line="190"/>
                <scope line="191">
                    <scope line="192"/>
                </scope>
            </method>
            <javadoc line="198">
                Constructs a block matrix made from the given parts.
                 * The inverse to method {@link #decompose(DoubleMatrix2D[][],DoubleMatrix2D)}.
                 * &lt;p&gt;
                 * All matrices of a given column within &lt;tt&gt;parts&lt;/tt&gt; must have the same number of columns.
                 * All matrices of a given row within &lt;tt&gt;parts&lt;/tt&gt; must have the same number of rows.
                 * Otherwise an &lt;tt&gt;IllegalArgumentException&lt;/tt&gt; is thrown. 
                 * Note that &lt;tt&gt;null&lt;/tt&gt;s within &lt;tt&gt;parts[row,col]&lt;/tt&gt; are an exception to this rule: they are ignored.
                 * Cells are copied.
                 * Example:
                 * &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;
                 * &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                 * &lt;td&gt;&lt;tt&gt;Code&lt;/tt&gt;&lt;/td&gt;
                 * &lt;td&gt;&lt;tt&gt;Result&lt;/tt&gt;&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                 * &lt;td&gt; 
                 * &lt;pre&gt;
                 * DoubleMatrix2D[][] parts1 = 
                 * {
                 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{ null,        make(2,2,1), null        },
                 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{ make(4,4,2), null,        make(4,3,3) },
                 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{ null,        make(2,2,4), null        }
                 * };
                 * System.out.println(compose(parts1));
                 * &lt;/pre&gt;
                 * &lt;/td&gt;
                 * &lt;td&gt;&lt;tt&gt;8&amp;nbsp;x&amp;nbsp;9&amp;nbsp;matrix&lt;br&gt;
                 * 0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                 * 0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                 * 2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                 * 2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                 * 2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                 * 2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                 * 0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;4&amp;nbsp;4&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                 * 0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;4&amp;nbsp;4&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;/tt&gt;&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                 * &lt;td&gt; 
                 * &lt;pre&gt;
                 * DoubleMatrix2D[][] parts3 = 
                 * {
                 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{ identity(3),               null,                        },
                 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{ null,                      identity(3).viewColumnFlip() },
                 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{ identity(3).viewRowFlip(), null                         }
                 * };
                 * System.out.println(&quot;\n&quot;+make(parts3));
                 * &lt;/pre&gt;
                 * &lt;/td&gt;
                 * &lt;td&gt;&lt;tt&gt;9&amp;nbsp;x&amp;nbsp;6&amp;nbsp;matrix&lt;br&gt;
                 * 1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                 * 0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                 * 0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                 * 0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&lt;br&gt;
                 * 0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;0&lt;br&gt;
                 * 0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                 * 0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                 * 0&amp;nbsp;1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                 * 1&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0 &lt;/tt&gt;&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                 * &lt;td&gt; 
                 * &lt;pre&gt;
                 * DoubleMatrix2D A = ascending(2,2);
                 * DoubleMatrix2D B = descending(2,2);
                 * DoubleMatrix2D _ = null;
                 * DoubleMatrix2D[][] parts4 = 
                 * {
                 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{ A, _, A, _ },
                 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{ _, A, _, B }
                 * };
                 * System.out.println(&quot;\n&quot;+make(parts4));
                 * &lt;/pre&gt;
                 * &lt;/td&gt;
                 * &lt;td&gt;&lt;tt&gt;4&amp;nbsp;x&amp;nbsp;8&amp;nbsp;matrix&lt;br&gt;
                 * 1&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                 * 3&amp;nbsp;4&amp;nbsp;0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;4&amp;nbsp;0&amp;nbsp;0&lt;br&gt;
                 * 0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;2&amp;nbsp;0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;2&lt;br&gt;
                 * 0&amp;nbsp;0&amp;nbsp;3&amp;nbsp;4&amp;nbsp;0&amp;nbsp;0&amp;nbsp;1&amp;nbsp;0 &lt;/tt&gt;&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                 * &lt;td&gt; 
                 * &lt;pre&gt;
                 * DoubleMatrix2D[][] parts2 = 
                 * {
                 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{ null,        make(2,2,1), null        },
                 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{ make(4,4,2), null,        make(4,3,3) },
                 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{ null,        make(2,3,4), null        }
                 * };
                 * System.out.println(&quot;\n&quot;+Factory2D.make(parts2));
                 * &lt;/pre&gt;
                 * &lt;/td&gt;
                 * &lt;td&gt;&lt;tt&gt;IllegalArgumentException&lt;br&gt;
                 * A[0,1].cols != A[2,1].cols&lt;br&gt;
                 * (2 != 3)&lt;/tt&gt;&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;/table&gt;                
                <@throws>
                    s IllegalArgumentException subject to the conditions outlined above.                    
                </@throws>
            </javadoc>
            <method name="compose" type="DoubleMatrix2D" line="298">
                <comment line="299">
                    determine maximum column width of each column                    
                </comment>
                <comment line="299">
                    determine row height of each row                    
                </comment>
                <comment line="299">
                    shape of result                    
                </comment>
                <comment line="299">
                    copy                    
                </comment>
                <declaration name="rows" type="int" line="300"/>
                <declaration name="columns" type="int" line="301"/>
                <declaration name="empty" type="DoubleMatrix2D" line="303"/>
                <declaration name="maxWidths" type="int[]" line="308"/>
                <scope line="309">
                    <declaration name="maxWidth" type="int" line="310"/>
                    <scope line="311">
                        <declaration name="part" type="DoubleMatrix2D" line="312"/>
                        <scope line="313">
                            <declaration name="width" type="int" line="314"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="maxHeights" type="int[]" line="323"/>
                <scope line="324">
                    <declaration name="maxHeight" type="int" line="325"/>
                    <scope line="326">
                        <declaration name="part" type="DoubleMatrix2D" line="327"/>
                        <scope line="328">
                            <declaration name="height" type="int" line="329"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="resultRows" type="int" line="339"/>
                <declaration name="resultCols" type="int" line="341"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="344"/>
                <declaration name="r" type="int" line="347"/>
                <scope line="348">
                    <declaration name="c" type="int" line="349"/>
                    <scope line="350">
                        <declaration name="part" type="DoubleMatrix2D" line="351"/>
                        <scope line="352"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="362">
                Constructs a diagonal block matrix from the given parts (the &lt;i&gt;direct sum&lt;/i&gt; of two matrices).
                 * That is the concatenation
                 * &lt;pre&gt;
                 * A 0
                 * 0 B
                 * &lt;/pre&gt;
                 * (The direct sum has &lt;tt&gt;A.rows()+B.rows()&lt;/tt&gt; rows and &lt;tt&gt;A.columns()+B.columns()&lt;/tt&gt; columns).
                 * Cells are copied.                
                <@return>
                    n a new matrix which is the direct sum.                    
                </@return>
            </javadoc>
            <method name="composeDiagonal" type="DoubleMatrix2D" line="373">
                <declaration name="ar" type="int" line="374"/>
                <declaration name="ac" type="int" line="374"/>
                <declaration name="br" type="int" line="375"/>
                <declaration name="bc" type="int" line="375"/>
                <declaration name="sum" type="DoubleMatrix2D" line="376"/>
            </method>
            <javadoc line="381">
                Constructs a diagonal block matrix from the given parts.
                 * The concatenation has the form
                 * &lt;pre&gt;
                 * A 0 0
                 * 0 B 0
                 * 0 0 C
                 * &lt;/pre&gt;
                 * from the given parts.
                 * Cells are copied.                
            </javadoc>
            <method name="composeDiagonal" type="DoubleMatrix2D" line="392">
                <declaration name="diag" type="DoubleMatrix2D" line="393"/>
            </method>
            <javadoc line="399">
                Splits a block matrix into its constituent blocks; Copies blocks of a matrix into the given parts.
                 * The inverse to method {@link #compose(DoubleMatrix2D[][])}.
                 * &lt;p&gt;
                 * All matrices of a given column within &lt;tt&gt;parts&lt;/tt&gt; must have the same number of columns.
                 * All matrices of a given row within &lt;tt&gt;parts&lt;/tt&gt; must have the same number of rows.
                 * Otherwise an &lt;tt&gt;IllegalArgumentException&lt;/tt&gt; is thrown. 
                 * Note that &lt;tt&gt;null&lt;/tt&gt;s within &lt;tt&gt;parts[row,col]&lt;/tt&gt; are an exception to this rule: they are ignored.
                 * Cells are copied.
                 * Example:
                 * &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;
                 * &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                 * &lt;td&gt;&lt;tt&gt;Code&lt;/tt&gt;&lt;/td&gt;
                 * &lt;td&gt;&lt;tt&gt;matrix&lt;/tt&gt;&lt;/td&gt;
                 * &lt;td&gt;&lt;tt&gt;--&amp;gt; parts &lt;/tt&gt;&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr align=&quot;left&quot; valign=&quot;top&quot;&gt; 
                 * &lt;td&gt; 
                 * &lt;pre&gt;
                 * DoubleMatrix2D matrix = ... ;
                 * DoubleMatrix2D _ = null;
                 * DoubleMatrix2D A,B,C,D;
                 * A = make(2,2); B = make (4,4);
                 * C = make(4,3); D = make (2,2);
                 * DoubleMatrix2D[][] parts = 
                 * {
                 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{ _, A, _ },
                 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{ B, _, C },
                 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{ _, D, _ }
                 * };
                 * decompose(parts,matrix);
                 * System.out.println(&amp;quot;\nA = &amp;quot;+A);
                 * System.out.println(&amp;quot;\nB = &amp;quot;+B);
                 * System.out.println(&amp;quot;\nC = &amp;quot;+C);
                 * System.out.println(&amp;quot;\nD = &amp;quot;+D);
                 * &lt;/pre&gt;
                 * &lt;/td&gt;
                 * &lt;td&gt;&lt;tt&gt;8&amp;nbsp;x&amp;nbsp;9&amp;nbsp;matrix&lt;br&gt;
                 * 9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;1&amp;nbsp;1&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&lt;br&gt;
                 * 9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;1&amp;nbsp;1&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&lt;br&gt;
                 * 2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;9&amp;nbsp;9&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                 * 2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;9&amp;nbsp;9&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                 * 2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;9&amp;nbsp;9&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                 * 2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;9&amp;nbsp;9&amp;nbsp;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                 * 9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;4&amp;nbsp;4&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&lt;br&gt;
                 * 9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&amp;nbsp;4&amp;nbsp;4&amp;nbsp;9&amp;nbsp;9&amp;nbsp;9&lt;/tt&gt;&lt;/td&gt;
                 * &lt;td&gt; 
                 * &lt;p&gt;&lt;tt&gt;A = 2&amp;nbsp;x&amp;nbsp;2&amp;nbsp;matrix&lt;br&gt;
                 * 1&amp;nbsp;1&lt;br&gt;
                 * 1&amp;nbsp;1&lt;/tt&gt;&lt;/p&gt;
                 * &lt;p&gt;&lt;tt&gt;B = 4&amp;nbsp;x&amp;nbsp;4&amp;nbsp;matrix&lt;br&gt;
                 * 2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&lt;br&gt;
                 * 2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&lt;br&gt;
                 * 2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&lt;br&gt;
                 * 2&amp;nbsp;2&amp;nbsp;2&amp;nbsp;2&lt;/tt&gt;&lt;/p&gt;
                 * &lt;p&gt;&lt;tt&gt;C = 4&amp;nbsp;x&amp;nbsp;3&amp;nbsp;matrix&lt;br&gt;
                 * 3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                 * 3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                 * &lt;/tt&gt;&lt;tt&gt;3&amp;nbsp;3&amp;nbsp;3&lt;br&gt;
                 * &lt;/tt&gt;&lt;tt&gt;3&amp;nbsp;3&amp;nbsp;3&lt;/tt&gt;&lt;/p&gt;
                 * &lt;p&gt;&lt;tt&gt;D = 2&amp;nbsp;x&amp;nbsp;2&amp;nbsp;matrix&lt;br&gt;
                 * 4&amp;nbsp;4&lt;br&gt;
                 * 4&amp;nbsp;4&lt;/tt&gt;&lt;/p&gt;
                 * &lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;/table&gt;                
                <@throws>
                    s IllegalArgumentException subject to the conditions outlined above.                    
                </@throws>
            </javadoc>
            <method name="decompose" type="void" line="467">
                <comment line="468">
                    determine maximum column width of each column                    
                </comment>
                <comment line="468">
                    determine row height of each row                    
                </comment>
                <comment line="468">
                    shape of result parts                    
                </comment>
                <comment line="468">
                    copy                    
                </comment>
                <declaration name="rows" type="int" line="469"/>
                <declaration name="columns" type="int" line="470"/>
                <declaration name="maxWidths" type="int[]" line="475"/>
                <scope line="476">
                    <declaration name="maxWidth" type="int" line="477"/>
                    <scope line="478">
                        <declaration name="part" type="DoubleMatrix2D" line="479"/>
                        <scope line="480">
                            <declaration name="width" type="int" line="481"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="maxHeights" type="int[]" line="490"/>
                <scope line="491">
                    <declaration name="maxHeight" type="int" line="492"/>
                    <scope line="493">
                        <declaration name="part" type="DoubleMatrix2D" line="494"/>
                        <scope line="495">
                            <declaration name="height" type="int" line="496"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="resultRows" type="int" line="506"/>
                <declaration name="resultCols" type="int" line="508"/>
                <declaration name="r" type="int" line="514"/>
                <scope line="515">
                    <declaration name="c" type="int" line="516"/>
                    <scope line="517">
                        <declaration name="part" type="DoubleMatrix2D" line="518"/>
                        <scope line="519"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="528">
                Demonstrates usage of this class.                
            </javadoc>
            <method name="demo1" type="void" line="531">
                <comment line="532">
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(make(parts1).toString()));                    
                </comment>
                <comment line="532">
                    illegal 2 != 3                    
                </comment>
                <comment line="532">
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(make(parts3).toString()));                    
                </comment>
                <comment line="532">
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(make(parts4).toString()));                    
                </comment>
                <declaration name="parts1" type="DoubleMatrix2D[][]" line="533"/>
                <declaration name="parts3" type="DoubleMatrix2D[][]" line="554"/>
                <declaration name="A" type="DoubleMatrix2D" line="563"/>
                <declaration name="B" type="DoubleMatrix2D" line="564"/>
                <declaration name="_" type="DoubleMatrix2D" line="565"/>
                <declaration name="parts4" type="DoubleMatrix2D[][]" line="567"/>
            </method>
            <javadoc line="576">
                Demonstrates usage of this class.                
            </javadoc>
            <method name="demo2" type="void" line="579">
                <comment line="580">
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(make(parts1).toString()));                    
                </comment>
                <comment line="580">
                    illegal 2 != 3                    
                </comment>
                <comment line="580">
                    DoubleMatrix2D[][] parts3 =
                    {
                    { identity(3),               null,                        },
                    { null,                      identity(3).viewColumnFlip() },
                    { identity(3).viewRowFlip(), null                         }
                    };
                    System.out.println(&quot;\n&quot;+make(parts3));
                    System.out.println(&quot;\n&quot;+cern.colt.matrixpattern.Converting.toHTML(make(parts3).toString()));
                    
                    DoubleMatrix2D A = ascending(2,2);
                    DoubleMatrix2D B = descending(2,2);                    
                </comment>
                <declaration name="matrix" type="DoubleMatrix2D" line="581"/>
                <declaration name="A" type="DoubleMatrix2D" line="582"/>
                <declaration name="_" type="DoubleMatrix2D" line="583"/>
                <declaration name="parts1" type="DoubleMatrix2D[][]" line="585"/>
            </method>
            <javadoc line="637">
                Constructs a matrix with cells having descending values.
                 * For debugging purposes.
                 * Example:
                 * &lt;pre&gt;
                 * 5 4 3 
                 * 2 1 0
                 * &lt;/pre&gt;                
            </javadoc>
            <method name="descending" type="DoubleMatrix2D" line="646">
                <declaration name="matrix" type="DoubleMatrix2D" line="647"/>
                <declaration name="v" type="int" line="648"/>
                <scope line="649">
                    <scope line="650"/>
                </scope>
            </method>
            <javadoc line="656">
                Constructs a new diagonal matrix whose diagonal elements are the elements of &lt;tt&gt;vector&lt;/tt&gt;.
                 * Cells values are copied. The new matrix is not a view.
                 * Example:
                 * &lt;pre&gt;
                 * 5 4 3 --&gt;
                 * 5 0 0
                 * 0 4 0
                 * 0 0 3
                 * &lt;/pre&gt;                
                <@return>
                    n a new matrix.                    
                </@return>
            </javadoc>
            <method name="diagonal" type="DoubleMatrix2D" line="668">
                <declaration name="size" type="int" line="669"/>
                <declaration name="diag" type="DoubleMatrix2D" line="670"/>
                <scope line="671"/>
            </method>
            <javadoc line="676">
                Constructs a new vector consisting of the diagonal elements of &lt;tt&gt;A&lt;/tt&gt;.
                 * Cells values are copied. The new vector is not a view.
                 * Example:
                 * &lt;pre&gt;
                 * 5 0 0 9
                 * 0 4 0 9
                 * 0 0 3 9
                 * --&gt; 5 4 3
                 * &lt;/pre&gt;                
                <@param>
                    m A the matrix, need not be square.                    
                </@param>
                <@return>
                    n a new vector.                    
                </@return>
            </javadoc>
            <method name="diagonal" type="DoubleMatrix1D" line="689">
                <declaration name="min" type="int" line="690"/>
                <declaration name="diag" type="DoubleMatrix1D" line="691"/>
                <scope line="692"/>
            </method>
            <javadoc line="697">
                Constructs an identity matrix (having ones on the diagonal and zeros elsewhere).                
            </javadoc>
            <method name="identity" type="DoubleMatrix2D" line="700">
                <declaration name="matrix" type="DoubleMatrix2D" line="701"/>
                <scope line="702"/>
            </method>
            <javadoc line="707">
                Constructs a matrix with the given cell values.
                 * &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[row][column]&lt;/tt&gt;
                 * and have exactly the same number of columns in every row.
                 * &lt;p&gt;
                 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.                
                <@param>
                    m values The values to be filled into the new matrix.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if <tt>for any 1 &lt;= row &lt; values.length: values[row].length != values[row-1].length</tt>.                    
                </@throws>
            </javadoc>
            <method name="make" type="DoubleMatrix2D" line="717"/>
            <javadoc line="721">
                Construct a matrix from a one-dimensional column-major packed array, ala Fortran.
                 * Has the form &lt;tt&gt;matrix.get(row,column) == values[row + column*rows]&lt;/tt&gt;.
                 * The values are copied.                
                <@param>
                    m values One-dimensional array of doubles, packed by columns (ala Fortran).                    
                </@param>
                <@param>
                    m rows  the number of rows.                    
                </@param>
                <@exception>
                    n IllegalArgumentException <tt>values.length</tt> must be a multiple of <tt>rows</tt>.                    
                </@exception>
            </javadoc>
            <method name="make" type="DoubleMatrix2D" line="730">
                <declaration name="columns" type="int" line="731"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="735"/>
                <scope line="736">
                    <scope line="737"/>
                </scope>
            </method>
            <javadoc line="743">
                Constructs a matrix with the given shape, each cell initialized with zero.                
            </javadoc>
            <method name="make" type="DoubleMatrix2D" line="746"/>
            <javadoc line="752">
                Constructs a matrix with the given shape, each cell initialized with the given value.                
            </javadoc>
            <method name="make" type="DoubleMatrix2D" line="755"/>
            <javadoc line="759">
                Constructs a 1d matrix of the right dynamic type.                
            </javadoc>
            <method name="make1D" type="DoubleMatrix1D" line="762"/>
            <javadoc line="765">
                Constructs a matrix with uniformly distributed values in &lt;tt&gt;(0,1)&lt;/tt&gt; (exclusive).                
            </javadoc>
            <method name="random" type="DoubleMatrix2D" line="768"/>
            <javadoc line="771">
                C = A||A||..||A; Constructs a new matrix which is duplicated both along the row and column dimension.
                 * Example:
                 * &lt;pre&gt;
                 * 0 1
                 * 2 3
                 * repeat(2,3) --&gt;
                 * 0 1 0 1 0 1
                 * 2 3 2 3 2 3
                 * 0 1 0 1 0 1
                 * 2 3 2 3 2 3
                 * &lt;/pre&gt;                
            </javadoc>
            <method name="repeat" type="DoubleMatrix2D" line="784">
                <declaration name="r" type="int" line="785"/>
                <declaration name="c" type="int" line="786"/>
                <declaration name="matrix" type="DoubleMatrix2D" line="787"/>
                <scope line="788">
                    <scope line="789"/>
                </scope>
            </method>
            <javadoc line="795">
                Constructs a randomly sampled matrix with the given shape.
                 * Randomly picks exactly &lt;tt&gt;Math.round(rows*columns*nonZeroFraction)&lt;/tt&gt; cells and initializes them to &lt;tt&gt;value&lt;/tt&gt;, all the rest will be initialized to zero.
                 * Note that this is not the same as setting each cell with probability &lt;tt&gt;nonZeroFraction&lt;/tt&gt; to &lt;tt&gt;value&lt;/tt&gt;.
                 * Note: The random seed is a constant.                
                <@throws>
                    s IllegalArgumentException if <tt>nonZeroFraction < 0 || nonZeroFraction > 1</tt>.                    
                </@throws>
                <@see>
                    e cern.jet.random.sampling.RandomSampler                    
                </@see>
            </javadoc>
            <method name="sample" type="DoubleMatrix2D" line="803">
                <declaration name="matrix" type="DoubleMatrix2D" line="804"/>
            </method>
            <javadoc line="808">
                Modifies the given matrix to be a randomly sampled matrix.
                 * Randomly picks exactly &lt;tt&gt;Math.round(rows*columns*nonZeroFraction)&lt;/tt&gt; cells and initializes them to &lt;tt&gt;value&lt;/tt&gt;, all the rest will be initialized to zero.
                 * Note that this is not the same as setting each cell with probability &lt;tt&gt;nonZeroFraction&lt;/tt&gt; to &lt;tt&gt;value&lt;/tt&gt;.
                 * Note: The random seed is a constant.                
                <@throws>
                    s IllegalArgumentException if <tt>nonZeroFraction < 0 || nonZeroFraction > 1</tt>.                    
                </@throws>
                <@see>
                    e cern.jet.random.sampling.RandomSampler                    
                </@see>
            </javadoc>
            <method name="sample" type="DoubleMatrix2D" line="816">
                <declaration name="rows" type="int" line="817"/>
                <declaration name="columns" type="int" line="818"/>
                <declaration name="epsilon" type="double" line="819"/>
                <declaration name="size" type="int" line="826"/>
                <declaration name="n" type="int" line="827"/>
                <declaration name="sampler" type="cern.jet.random.sampling.RandomSamplingAssistant" line="830"/>
                <scope line="831">
                    <scope line="832">
                        <declaration name="row" type="int" line="833"/>
                        <declaration name="column" type="int" line="834"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>