<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.list">
        <class name="SimpleLongArrayList" extends="AbstractLongList" line="11">
            <javadoc line="11">
                Resizable list holding &lt;code&gt;long&lt;/code&gt; elements; implemented with arrays; not efficient; just to demonstrate which methods you must override to implement a fully functional list.
                 * First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.                
            </javadoc>
            <declaration name="elements" type="long[]" line="16"/>
            <javadoc line="16">
                The array buffer into which the elements of the list are stored.
                 * The capacity of the list is the length of this array buffer.                
                <@serial>
                    l                    
                </@serial>
            </javadoc>
            <declaration name="size" type="int" line="23"/>
            <javadoc line="23">
                The size of the list.                
                <@serial>
                    l                    
                </@serial>
            </javadoc>
            <javadoc line="28">
                Constructs an empty list.                
            </javadoc>
            <method name="SimpleLongArrayList" type="constructor" line="31"/>
            <javadoc line="34">
                Constructs a list containing the specified elements. 
                 * The initial size and capacity of the list is the length of the array.
                 * &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, &lt;b&gt;the array is not copied&lt;/b&gt;.
                 * So if subsequently you modify the specified array directly via the [] operator, be sure you know what you&apos;re doing.                
                <@param>
                    m elements the array to be backed by the the constructed list                    
                </@param>
            </javadoc>
            <method name="SimpleLongArrayList" type="constructor" line="43"/>
            <javadoc line="46">
                Constructs an empty list with the specified initial capacity.                
                <@param>
                    m initialCapacity   the number of elements the receiver can hold without auto-expanding itself by allocating new internal memory.                    
                </@param>
            </javadoc>
            <method name="SimpleLongArrayList" type="constructor" line="51"/>
            <javadoc line="59">
                Ensures that the receiver can hold at least the specified number of elements without needing to allocate new internal memory.
                 * If necessary, allocates new internal memory and increases the capacity of the receiver.                
                <@param>
                    m minCapacity   the desired minimum capacity.                    
                </@param>
            </javadoc>
            <method name="ensureCapacity" type="void" line="65"/>
            <javadoc line="68">
                Returns the element at the specified position in the receiver; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions. 
                 * Provided with invalid parameters this method may return invalid elements without throwing any exception!
                 * &lt;b&gt;You should only use this method when you are absolutely sure that the index is within bounds.&lt;/b&gt;
                 * Precondition (unchecked): &lt;tt&gt;index &amp;gt;= 0 &amp;&amp; index &amp;lt; size()&lt;/tt&gt;.                
                <@param>
                    m index index of element to return.                    
                </@param>
            </javadoc>
            <method name="getQuick" type="long" line="76"/>
            <javadoc line="79">
                Replaces the element at the specified position in the receiver with the specified element; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions. 
                 * Provided with invalid parameters this method may access invalid indexes without throwing any exception!
                 * &lt;b&gt;You should only use this method when you are absolutely sure that the index is within bounds.&lt;/b&gt;
                 * Precondition (unchecked): &lt;tt&gt;index &amp;gt;= 0 &amp;&amp; index &amp;lt; size()&lt;/tt&gt;.                
                <@param>
                    m index index of element to replace.                    
                </@param>
                <@param>
                    m element element to be stored at the specified position.                    
                </@param>
            </javadoc>
            <method name="setQuick" type="void" line="88"/>
            <javadoc line="91">
                Trims the capacity of the receiver to be the receiver&apos;s current 
                 * size. An application can use this operation to minimize the 
                 * storage of the receiver.                
            </javadoc>
            <method name="trimToSize" type="void" line="96"/>
        </class>
    </source>