<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.list.adapter">
        <import package="cern.colt.list.AbstractLongList"/>
        <class name="LongListAdapter" extends="java.util.AbstractList" line="12">
            <implements interface="java.util.List"/>
            <javadoc line="12">
                Adapter that permits an {@link cern.colt.list.AbstractLongList} to be viewed and treated as a JDK 1.2 {@link java.util.AbstractList}.
                 * Makes the contained list compatible with the JDK 1.2 Collections Framework.
                 * &lt;p&gt;
                 * Any attempt to pass elements other than &lt;tt&gt;java.lang.Number&lt;/tt&gt; to setter methods will throw a &lt;tt&gt;java.lang.ClassCastException&lt;/tt&gt;.
                 * &lt;tt&gt;java.lang.Number.longValue()&lt;/tt&gt; is used to convert objects into primitive values which are then stored in the backing templated list.
                 * Getter methods return &lt;tt&gt;java.lang.Long&lt;/tt&gt; objects.                
            </javadoc>
            <declaration name="content" type="AbstractLongList" line="21"/>
            <javadoc line="22">
                Constructs a list backed by the specified content list.                
            </javadoc>
            <method name="LongListAdapter" type="constructor" line="25"/>
            <javadoc line="28">
                Inserts the specified element at the specified position in this list
                 * (optional operation).  Shifts the element currently at that position
                 * (if any) and any subsequent elements to the right (adds one to their
                 * indices).&lt;p&gt;                
                <@param>
                    m index index at which the specified element is to be inserted.                    
                </@param>
                <@param>
                    m element element to be inserted.                    
                </@param>
                <@throws>
                    s ClassCastException if the class of the specified element
                     * prevents it from being added to this list.                    
                </@throws>
                <@throws>
                    s IllegalArgumentException if some aspect of the specified
                     * element prevents it from being added to this list.                    
                </@throws>
                <@throws>
                    s IndexOutOfBoundsException index is out of range (<tt>index &lt;
                     * 0 || index &gt; size()</tt>).                    
                </@throws>
            </javadoc>
            <method name="add" type="void" line="44"/>
            <javadoc line="48">
                Returns the element at the specified position in this list.                
                <@param>
                    m index index of element to return.                    
                </@param>
                <@return>
                    n the element at the specified position in this list.                    
                </@return>
                <@throws>
                    s IndexOutOfBoundsException if the given index is out of range
                     * (<tt>index &lt; 0 || index &gt;= size()</tt>).                    
                </@throws>
            </javadoc>
            <method name="get" type="Object" line="57"/>
            <javadoc line="60">
                Transforms an element of a primitive data type to an object.                
            </javadoc>
            <method name="object" type="Object" line="63"/>
            <javadoc line="66">
                Removes the element at the specified position in this list (optional
                 * operation).  Shifts any subsequent elements to the left (subtracts one
                 * from their indices).  Returns the element that was removed from the
                 * list.&lt;p&gt;                
                <@param>
                    m index the index of the element to remove.                    
                </@param>
                <@return>
                    n the element previously at the specified position.                    
                </@return>
                <@throws>
                    s IndexOutOfBoundsException if the specified index is out of
                     * range (<tt>index &lt; 0 || index &gt;= size()</tt>).                    
                </@throws>
            </javadoc>
            <method name="remove" type="Object" line="78">
                <declaration name="old" type="Object" line="79"/>
            </method>
            <javadoc line="84">
                Replaces the element at the specified position in this list with the
                 * specified element (optional operation). &lt;p&gt;                
                <@param>
                    m index index of element to replace.                    
                </@param>
                <@param>
                    m element element to be stored at the specified position.                    
                </@param>
                <@return>
                    n the element previously at the specified position.                    
                </@return>
                <@throws>
                    s ClassCastException if the class of the specified element
                     * prevents it from being added to this list.                    
                </@throws>
                <@throws>
                    s IllegalArgumentException if some aspect of the specified
                     * element prevents it from being added to this list.                    
                </@throws>
                <@throws>
                    s IndexOutOfBoundsException if the specified index is out of
                     * range (<tt>index &lt; 0 || index &gt;= size()</tt>).                    
                </@throws>
            </javadoc>
            <method name="set" type="Object" line="101">
                <declaration name="old" type="Object" line="102"/>
            </method>
            <javadoc line="106">
                Returns the number of elements in this list.                
                <@return>
                    n  the number of elements in this list.                    
                </@return>
            </javadoc>
            <method name="size" type="int" line="111"/>
            <javadoc line="114">
                Transforms an object element to a primitive data type.                
            </javadoc>
            <method name="value" type="long" line="117"/>
        </class>
    </source>