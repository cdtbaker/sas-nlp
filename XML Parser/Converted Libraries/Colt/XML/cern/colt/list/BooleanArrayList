<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.list">
        <import package="cern.colt.function.BooleanProcedure"/>
        <class name="BooleanArrayList" extends="AbstractBooleanList" line="12">
            <javadoc line="12">
                Resizable list holding &lt;code&gt;boolean&lt;/code&gt; elements; implemented with arrays.
                 * First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.                
            </javadoc>
            <declaration name="elements" type="boolean[]" line="17"/>
            <javadoc line="17">
                The array buffer into which the elements of the list are stored.
                 * The capacity of the list is the length of this array buffer.                
                <@serial>
                    l                    
                </@serial>
            </javadoc>
            <javadoc line="23">
                Constructs an empty list.                
            </javadoc>
            <method name="BooleanArrayList" type="constructor" line="26"/>
            <javadoc line="29">
                Constructs a list containing the specified elements. 
                 * The initial size and capacity of the list is the length of the array.
                 * &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, &lt;b&gt;the array is not copied&lt;/b&gt;.
                 * So if subsequently you modify the specified array directly via the [] operator, be sure you know what you&apos;re doing.                
                <@param>
                    m elements the array to be backed by the the constructed list                    
                </@param>
            </javadoc>
            <method name="BooleanArrayList" type="constructor" line="38"/>
            <javadoc line="41">
                Constructs an empty list with the specified initial capacity.                
                <@param>
                    m initialCapacity   the number of elements the receiver can hold without auto-expanding itself by allocating new internal memory.                    
                </@param>
            </javadoc>
            <method name="BooleanArrayList" type="constructor" line="46"/>
            <javadoc line="50">
                Appends the specified element to the end of this list.                
                <@param>
                    m element element to be appended to this list.                    
                </@param>
            </javadoc>
            <method name="add" type="void" line="55">
                <comment line="56">
                    overridden for performance only.                    
                </comment>
                <scope line="57"/>
            </method>
            <javadoc line="62">
                Inserts the specified element before the specified position into the receiver. 
                 * Shifts the element currently at that position (if any) and
                 * any subsequent elements to the right.                
                <@param>
                    m index index before which the specified element is to be inserted (must be in [0,size]).                    
                </@param>
                <@param>
                    m element element to be inserted.                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>index &lt; 0 || index &gt; size()</tt>).                    
                </@exception>
            </javadoc>
            <method name="beforeInsert" type="void" line="71">
                <comment line="72">
                    overridden for performance only.                    
                </comment>
            </method>
            <javadoc line="80">
                Returns a deep copy of the receiver.                
                <@return>
                    n  a deep copy of the receiver.                    
                </@return>
            </javadoc>
            <method name="clone" type="Object" line="85">
                <comment line="86">
                    overridden for performance only.                    
                </comment>
                <declaration name="clone" type="BooleanArrayList" line="87"/>
            </method>
            <javadoc line="91">
                Returns a deep copy of the receiver; uses &lt;code&gt;clone()&lt;/code&gt; and casts the result.                
                <@return>
                    n  a deep copy of the receiver.                    
                </@return>
            </javadoc>
            <method name="copy" type="BooleanArrayList" line="96"/>
            <javadoc line="99">
                Sorts the specified range of the receiver into ascending numerical order (&lt;tt&gt;false &amp;lt; true&lt;/tt&gt;). 
                 * The sorting algorithm is a count sort. This algorithm offers guaranteed
                 * O(n) performance without auxiliary memory.                
                <@param>
                    m from the index of the first element (inclusive) to be sorted.                    
                </@param>
                <@param>
                    m to the index of the last element (inclusive) to be sorted.                    
                </@param>
            </javadoc>
            <method name="countSortFromTo" type="void" line="108">
                <declaration name="theElements" type="boolean[]" line="112"/>
                <declaration name="trues" type="int" line="113"/>
                <declaration name="falses" type="int" line="116"/>
            </method>
            <javadoc line="120">
                Returns the elements currently stored, including invalid elements between size and capacity, if any.
                 * &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, &lt;b&gt;the array is not copied&lt;/b&gt;.
                 * So if subsequently you modify the returned array directly via the [] operator, be sure you know what you&apos;re doing.                
                <@return>
                    n the elements currently stored.                    
                </@return>
            </javadoc>
            <method name="elements" type="boolean[]" line="128"/>
            <javadoc line="131">
                Sets the receiver&apos;s elements to be the specified array (not a copy of it).
                 * The size and capacity of the list is the length of the array.
                 * &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, &lt;b&gt;the array is not copied&lt;/b&gt;.
                 * So if subsequently you modify the specified array directly via the [] operator, be sure you know what you&apos;re doing.                
                <@param>
                    m elements the new elements to be stored.                    
                </@param>
                <@return>
                    n the receiver itself.                    
                </@return>
            </javadoc>
            <method name="elements" type="AbstractBooleanList" line="141"/>
            <javadoc line="146">
                Ensures that the receiver can hold at least the specified number of elements without needing to allocate new internal memory.
                 * If necessary, allocates new internal memory and increases the capacity of the receiver.                
                <@param>
                    m minCapacity   the desired minimum capacity.                    
                </@param>
            </javadoc>
            <method name="ensureCapacity" type="void" line="152"/>
            <javadoc line="155">
                Compares the specified Object with the receiver.  
                 * Returns true if and only if the specified Object is also an ArrayList of the same type, both Lists have the
                 * same size, and all corresponding pairs of elements in the two Lists are identical.
                 * In other words, two Lists are defined to be equal if they contain the
                 * same elements in the same order.                
                <@param>
                    m otherObj the Object to be compared for equality with the receiver.                    
                </@param>
                <@return>
                    n true if the specified Object is equal to the receiver.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="165">
                <comment line="166">
                    blic boolean equals(Object otherObj) { //delta                    
                </comment>
                <comment line="166">
                    overridden for performance only.                    
                </comment>
                <declaration name="other" type="BooleanArrayList" line="170"/>
                <declaration name="theElements" type="boolean[]" line="173"/>
                <declaration name="otherElements" type="boolean[]" line="174"/>
                <scope line="175"/>
            </method>
            <javadoc line="180">
                Applies a procedure to each element of the receiver, if any.
                 * Starts at index 0, moving rightwards.                
                <@param>
                    m procedure    the procedure to be applied. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.                    
                </@param>
                <@return>
                    n <tt>false</tt> if the procedure stopped before all elements where iterated over, <tt>true</tt> otherwise.                    
                </@return>
            </javadoc>
            <method name="forEach" type="boolean" line="186">
                <comment line="187">
                    overridden for performance only.                    
                </comment>
                <declaration name="theElements" type="boolean[]" line="188"/>
                <declaration name="theSize" type="int" line="189"/>
            </method>
            <javadoc line="194">
                Returns the element at the specified position in the receiver.                
                <@param>
                    m index index of element to return.                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (index
                     * &lt; 0 || index &gt;= size()).                    
                </@exception>
            </javadoc>
            <method name="get" type="boolean" line="201">
                <comment line="202">
                    overridden for performance only.                    
                </comment>
            </method>
            <javadoc line="207">
                Returns the element at the specified position in the receiver; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions. 
                 * Provided with invalid parameters this method may return invalid elements without throwing any exception!
                 * &lt;b&gt;You should only use this method when you are absolutely sure that the index is within bounds.&lt;/b&gt;
                 * Precondition (unchecked): &lt;tt&gt;index &amp;gt;= 0 &amp;&amp; index &amp;lt; size()&lt;/tt&gt;.                
                <@param>
                    m index index of element to return.                    
                </@param>
            </javadoc>
            <method name="getQuick" type="boolean" line="215"/>
            <javadoc line="218">
                Returns the index of the first occurrence of the specified
                 * element. Returns &lt;code&gt;-1&lt;/code&gt; if the receiver does not contain this element.
                 * Searches between &lt;code&gt;from&lt;/code&gt;, inclusive and &lt;code&gt;to&lt;/code&gt;, inclusive.
                 * Tests for identity.                
                <@param>
                    m element element to search for.                    
                </@param>
                <@param>
                    m from the leftmost search position, inclusive.                    
                </@param>
                <@param>
                    m to the rightmost search position, inclusive.                    
                </@param>
                <@return>
                    n  the index of the first occurrence of the element in the receiver; returns <code>-1</code> if the element is not found.                    
                </@return>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="indexOfFromTo" type="int" line="230">
                <comment line="231">
                    overridden for performance only.                    
                </comment>
                <comment line="231">
                    turn -1; //not found                    
                </comment>
                <declaration name="theElements" type="boolean[]" line="235"/>
                <scope line="236">
                    <scope line="237"/>
                </scope>
            </method>
            <javadoc line="241">
                Returns the index of the last occurrence of the specified
                 * element. Returns &lt;code&gt;-1&lt;/code&gt; if the receiver does not contain this element.
                 * Searches beginning at &lt;code&gt;to&lt;/code&gt;, inclusive until &lt;code&gt;from&lt;/code&gt;, inclusive.
                 * Tests for identity.                
                <@param>
                    m element element to search for.                    
                </@param>
                <@param>
                    m from the leftmost search position, inclusive.                    
                </@param>
                <@param>
                    m to the rightmost search position, inclusive.                    
                </@param>
                <@return>
                    n  the index of the last occurrence of the element in the receiver; returns <code>-1</code> if the element is not found.                    
                </@return>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="lastIndexOfFromTo" type="int" line="253">
                <comment line="254">
                    overridden for performance only.                    
                </comment>
                <comment line="254">
                    turn -1; //not found                    
                </comment>
                <declaration name="theElements" type="boolean[]" line="258"/>
                <scope line="259">
                    <scope line="260"/>
                </scope>
            </method>
            <javadoc line="264">
                Sorts the specified range of the receiver into ascending order (&lt;tt&gt;false &amp;lt; true&lt;/tt&gt;). 
                 * The sorting algorithm is &lt;b&gt;not&lt;/b&gt; a mergesort, but rather a countsort.
                 * This algorithm offers guaranteed O(n) performance.                
                <@param>
                    m from the index of the first element (inclusive) to be sorted.                    
                </@param>
                <@param>
                    m to the index of the last element (inclusive) to be sorted.                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="mergeSortFromTo" type="void" line="274"/>
            <javadoc line="277">
                Returns a new list of the part of the receiver between &lt;code&gt;from&lt;/code&gt;, inclusive, and &lt;code&gt;to&lt;/code&gt;, inclusive.                
                <@param>
                    m from the index of the first element (inclusive).                    
                </@param>
                <@param>
                    m to the index of the last element (inclusive).                    
                </@param>
                <@return>
                    n a new list                    
                </@return>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="partFromTo" type="AbstractBooleanList" line="284">
                <declaration name="part" type="boolean[]" line="289"/>
            </method>
            <javadoc line="293">
                Sorts the specified range of the receiver into ascending order (&lt;tt&gt;false &amp;lt; true&lt;/tt&gt;). 
                 * The sorting algorithm is &lt;b&gt;not&lt;/b&gt; a quicksort, but rather a countsort.
                 * This algorithm offers guaranteed O(n) performance.                
                <@param>
                    m from the index of the first element (inclusive) to be sorted.                    
                </@param>
                <@param>
                    m to the index of the last element (inclusive) to be sorted.                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="quickSortFromTo" type="void" line="303"/>
            <javadoc line="306">
                Removes from the receiver all elements that are contained in the specified list.
                 * Tests for identity.                
                <@param>
                    m other the other list.                    
                </@param>
                <@return>
                    n <code>true</code> if the receiver changed as a result of the call.                    
                </@return>
            </javadoc>
            <method name="removeAll" type="boolean" line="313">
                <comment line="314">
                    overridden for performance only.                    
                </comment>
                <comment line="314">
                    There are two possibilities to do the thing
                    a) use other.indexOf(...)
                    b) sort other, then use other.binarySearch(...)
                    
                    Let&apos;s try to figure out which one is faster. Let M=size, N=other.size, then                    
                </comment>
                <comment line="314">
                    (other.size()==0) {return false;} //nothing to do                    
                </comment>
                <scope line="327"/>
                <declaration name="limit" type="int" line="328"/>
                <declaration name="j" type="int" line="329"/>
                <declaration name="theElements" type="boolean[]" line="330"/>
                <declaration name="mySize" type="int" line="331"/>
                <declaration name="N" type="double" line="333"/>
                <declaration name="M" type="double" line="334"/>
                <scope line="335">
                    <declaration name="sortedList" type="BooleanArrayList" line="337"/>
                    <scope line="340"/>
                </scope>
                <scope line="344">
                    <scope line="346"/>
                </scope>
                <declaration name="modified" type="boolean" line="351"/>
            </method>
            <javadoc line="355">
                Replaces a number of elements in the receiver with the same number of elements of another list.
                 * Replaces elements in the receiver, between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive),
                 * with elements of &lt;code&gt;other&lt;/code&gt;, starting from &lt;code&gt;otherFrom&lt;/code&gt; (inclusive).                
                <@param>
                    m from the position of the first element to be replaced in the receiver                    
                </@param>
                <@param>
                    m to the position of the last element to be replaced in the receiver                    
                </@param>
                <@param>
                    m other list holding elements to be copied into the receiver.                    
                </@param>
                <@param>
                    m otherFrom position of first element within other list to be copied.                    
                </@param>
            </javadoc>
            <method name="replaceFromToWithFrom" type="void" line="365">
                <comment line="366">
                    overridden for performance only.                    
                </comment>
                <scope line="367"/>
                <declaration name="length" type="int" line="372"/>
                <scope line="373"/>
            </method>
            <javadoc line="379">
                Retains (keeps) only the elements in the receiver that are contained in the specified other list.
                 * In other words, removes from the receiver all of its elements that are not contained in the
                 * specified other list.                
                <@param>
                    m other the other list to test against.                    
                </@param>
                <@return>
                    n <code>true</code> if the receiver changed as a result of the call.                    
                </@return>
            </javadoc>
            <method name="retainAll" type="boolean" line="386">
                <comment line="387">
                    overridden for performance only.                    
                </comment>
                <comment line="387">
                    There are two possibilities to do the thing
                    a) use other.indexOf(...)
                    b) sort other, then use other.binarySearch(...)
                    
                    Let&apos;s try to figure out which one is faster. Let M=size, N=other.size, then                    
                </comment>
                <declaration name="limit" type="int" line="400"/>
                <declaration name="j" type="int" line="401"/>
                <declaration name="theElements" type="boolean[]" line="402"/>
                <declaration name="mySize" type="int" line="403"/>
                <declaration name="N" type="double" line="405"/>
                <declaration name="M" type="double" line="406"/>
                <scope line="407">
                    <declaration name="sortedList" type="BooleanArrayList" line="409"/>
                    <scope line="412"/>
                </scope>
                <scope line="416">
                    <scope line="418"/>
                </scope>
                <declaration name="modified" type="boolean" line="423"/>
            </method>
            <javadoc line="427">
                Reverses the elements of the receiver.
                 * Last becomes first, second last becomes second first, and so on.                
            </javadoc>
            <method name="reverse" type="void" line="431">
                <comment line="432">
                    overridden for performance only.                    
                </comment>
                <declaration name="tmp" type="boolean" line="433"/>
                <declaration name="limit" type="int" line="434"/>
                <declaration name="j" type="int" line="435"/>
                <declaration name="theElements" type="boolean[]" line="437"/>
                <scope line="438"/>
            </method>
            <javadoc line="444">
                Replaces the element at the specified position in the receiver with the specified element.                
                <@param>
                    m index index of element to replace.                    
                </@param>
                <@param>
                    m element element to be stored at the specified position.                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (index
                     * &lt; 0 || index &gt;= size()).                    
                </@exception>
            </javadoc>
            <method name="set" type="void" line="452">
                <comment line="453">
                    overridden for performance only.                    
                </comment>
            </method>
            <javadoc line="458">
                Replaces the element at the specified position in the receiver with the specified element; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions.
                 * Provided with invalid parameters this method may access invalid indexes without throwing any exception!
                 * &lt;b&gt;You should only use this method when you are absolutely sure that the index is within bounds.&lt;/b&gt;
                 * Precondition (unchecked): &lt;tt&gt;index &amp;gt;= 0 &amp;&amp; index &amp;lt; size()&lt;/tt&gt;.                
                <@param>
                    m index index of element to replace.                    
                </@param>
                <@param>
                    m element element to be stored at the specified position.                    
                </@param>
            </javadoc>
            <method name="setQuick" type="void" line="467"/>
            <javadoc line="470">
                Randomly permutes the part of the receiver between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive).                
                <@param>
                    m from the index of the first element (inclusive) to be permuted.                    
                </@param>
                <@param>
                    m to the index of the last element (inclusive) to be permuted.                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="shuffleFromTo" type="void" line="476">
                <comment line="477">
                    overridden for performance only.                    
                </comment>
                <scope line="478"/>
                <declaration name="gen" type="cern.jet.random.Uniform" line="481"/>
                <declaration name="tmpElement" type="boolean" line="482"/>
                <declaration name="theElements" type="boolean[]" line="483"/>
                <declaration name="random" type="int" line="484"/>
                <scope line="485"/>
            </method>
            <javadoc line="494">
                Sorts the specified range of the receiver into ascending order. 
                 * The sorting algorithm is countsort.                
                <@param>
                    m from the index of the first element (inclusive) to be sorted.                    
                </@param>
                <@param>
                    m to the index of the last element (inclusive) to be sorted.                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="sortFromTo" type="void" line="503"/>
            <javadoc line="506">
                Trims the capacity of the receiver to be the receiver&apos;s current 
                 * size. Releases any superfluos internal memory. An application can use this operation to minimize the 
                 * storage of the receiver.                
            </javadoc>
            <method name="trimToSize" type="void" line="511"/>
        </class>
    </source>