<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.list">
        <import package="cern.colt.function.IntComparator"/>
        <import package="cern.colt.function.IntProcedure"/>
        <class name="AbstractIntList" extends="AbstractList" line="13">
            <implements interface="cern.colt.buffer.IntBufferConsumer"/>
            <javadoc line="13">
                Abstract base class for resizable lists holding &lt;code&gt;int&lt;/code&gt; elements; abstract.
                 * First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.                
            </javadoc>
            <declaration name="size" type="int" line="18"/>
            <javadoc line="18">
                The size of the list.
                 * This is a READ_ONLY variable for all methods but setSizeRaw(int newSize) !!!
                 * If you violate this principle in subclasses, you should exactly know what you are doing.                
                <@serial>
                    l                    
                </@serial>
            </javadoc>
            <javadoc line="25">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="AbstractIntList" type="constructor" line="28"/>
            <javadoc line="29">
                Appends the specified element to the end of this list.                
                <@param>
                    m element element to be appended to this list.                    
                </@param>
            </javadoc>
            <method name="add" type="void" line="34"/>
            <javadoc line="37">
                Appends all elements of the specified list to the receiver.                
                <@param>
                    m list the list of which all elements shall be appended.                    
                </@param>
            </javadoc>
            <method name="addAllOf" type="void" line="41"/>
            <javadoc line="44">
                Appends the part of the specified list between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive) to the receiver.                
                <@param>
                    m other the list to be added to the receiver.                    
                </@param>
                <@param>
                    m from the index of the first element to be appended (inclusive).                    
                </@param>
                <@param>
                    m to the index of the last element to be appended (inclusive).                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>other.size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=other.size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="addAllOfFromTo" type="void" line="52"/>
            <javadoc line="55">
                Inserts the specified element before the specified position into the receiver. 
                 * Shifts the element currently at that position (if any) and
                 * any subsequent elements to the right.                
                <@param>
                    m index index before which the specified element is to be inserted (must be in [0,size]).                    
                </@param>
                <@param>
                    m element element to be inserted.                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>index &lt; 0 || index &gt; size()</tt>).                    
                </@exception>
            </javadoc>
            <method name="beforeInsert" type="void" line="64"/>
            <javadoc line="68">
                Inserts the part of the specified list between &lt;code&gt;otherFrom&lt;/code&gt; (inclusive) and &lt;code&gt;otherTo&lt;/code&gt; (inclusive) before the specified position into the receiver. 
                 * Shifts the element currently at that position (if any) and
                 * any subsequent elements to the right.                
                <@param>
                    m index index before which to insert first element from the specified list (must be in [0,size])..                    
                </@param>
                <@param>
                    m other list of which a part is to be inserted into the receiver.                    
                </@param>
                <@param>
                    m from the index of the first element to be inserted (inclusive).                    
                </@param>
                <@param>
                    m to the index of the last element to be inserted (inclusive).                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>other.size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=other.size())</tt>).                    
                </@exception>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>index &lt; 0 || index &gt; size()</tt>).                    
                </@exception>
            </javadoc>
            <method name="beforeInsertAllOfFromTo" type="void" line="80">
                <declaration name="length" type="int" line="81"/>
            </method>
            <javadoc line="85">
                Inserts &lt;tt&gt;length&lt;/tt&gt; dummy elements before the specified position into the receiver. 
                 * Shifts the element currently at that position (if any) and
                 * any subsequent elements to the right.
                 * &lt;b&gt;This method must set the new size to be &lt;tt&gt;size()+length&lt;/tt&gt;.                
                <@param>
                    m index index before which to insert dummy elements (must be in [0,size])..                    
                </@param>
                <@param>
                    m length number of dummy elements to be inserted.                    
                </@param>
                <@throws>
                    s IndexOutOfBoundsException if <tt>index &lt; 0 || index &gt; size()</tt>.                    
                </@throws>
            </javadoc>
            <method name="beforeInsertDummies" type="void" line="95">
                <scope line="98"/>
            </method>
            <javadoc line="104">
                Searches the receiver for the specified value using
                 * the binary search algorithm.  The receiver must &lt;strong&gt;must&lt;/strong&gt; be
                 * sorted (as by the sort method) prior to making this call.  If
                 * it is not sorted, the results are undefined: in particular, the call
                 * may enter an infinite loop.  If the receiver contains multiple elements
                 * equal to the specified object, there is no guarantee which instance
                 * will be found.                
                <@param>
                    m key the value to be searched for.                    
                </@param>
                <@return>
                    n index of the search key, if it is contained in the receiver;
                     * otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The <i>insertion
                     * point</i> is defined as the the point at which the value would
                     * be inserted into the receiver: the index of the first
                     * element greater than the key, or <tt>receiver.size()</tt>, if all
                     * elements in the receiver are less than the specified key.  Note
                     * that this guarantees that the return value will be &gt;= 0 if
                     * and only if the key is found.                    
                </@return>
                <@see>
                    e java.util.Arrays                    
                </@see>
            </javadoc>
            <method name="binarySearch" type="int" line="124"/>
            <javadoc line="127">
                Searches the receiver for the specified value using
                 * the binary search algorithm.  The receiver must &lt;strong&gt;must&lt;/strong&gt; be
                 * sorted (as by the sort method) prior to making this call.  If
                 * it is not sorted, the results are undefined: in particular, the call
                 * may enter an infinite loop.  If the receiver contains multiple elements
                 * equal to the specified object, there is no guarantee which instance
                 * will be found.                
                <@param>
                    m key the value to be searched for.                    
                </@param>
                <@param>
                    m from the leftmost search position, inclusive.                    
                </@param>
                <@param>
                    m to the rightmost search position, inclusive.                    
                </@param>
                <@return>
                    n index of the search key, if it is contained in the receiver;
                     * otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The <i>insertion
                     * point</i> is defined as the the point at which the value would
                     * be inserted into the receiver: the index of the first
                     * element greater than the key, or <tt>receiver.size()</tt>, if all
                     * elements in the receiver are less than the specified key.  Note
                     * that this guarantees that the return value will be &gt;= 0 if
                     * and only if the key is found.                    
                </@return>
                <@see>
                    e java.util.Arrays                    
                </@see>
            </javadoc>
            <method name="binarySearchFromTo" type="int" line="149">
                <comment line="150">
                    turn -(low + 1);  // key not found.                    
                </comment>
                <declaration name="low" type="int" line="150"/>
                <declaration name="high" type="int" line="151"/>
                <scope line="152">
                    <declaration name="mid" type="int" line="153"/>
                    <declaration name="midVal" type="int" line="154"/>
                </scope>
            </method>
            <javadoc line="162">
                Returns a deep copy of the receiver.                
                <@return>
                    n  a deep copy of the receiver.                    
                </@return>
            </javadoc>
            <method name="clone" type="Object" line="167"/>
            <javadoc line="170">
                Returns true if the receiver contains the specified element.                
                <@param>
                    m element element whose presence in the receiver is to be tested.                    
                </@param>
            </javadoc>
            <method name="contains" type="boolean" line="175"/>
            <javadoc line="178">
                Deletes the first element from the receiver that is identical to the specified element.
                 * Does nothing, if no such matching element is contained.                
                <@param>
                    m element the element to be deleted.                    
                </@param>
            </javadoc>
            <method name="delete" type="void" line="184">
                <declaration name="index" type="int" line="185"/>
            </method>
            <javadoc line="188">
                Returns the elements currently stored, possibly including invalid elements between size and capacity.
                 * &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, this method may decide &lt;b&gt;not to copy the array&lt;/b&gt;.
                 * So if subsequently you modify the returned array directly via the [] operator, be sure you know what you&apos;re doing.                
                <@return>
                    n the elements currently stored.                    
                </@return>
            </javadoc>
            <method name="elements" type="int[]" line="196">
                <declaration name="myElements" type="int[]" line="197"/>
            </method>
            <javadoc line="201">
                Sets the receiver&apos;s elements to be the specified array.
                 * The size and capacity of the list is the length of the array.
                 * &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, this method may decide &lt;b&gt;not to copy the array&lt;/b&gt;.
                 * So if subsequently you modify the returned array directly via the [] operator, be sure you know what you&apos;re doing.                
                <@param>
                    m elements the new elements to be stored.                    
                </@param>
                <@return>
                    n the receiver itself.                    
                </@return>
            </javadoc>
            <method name="elements" type="AbstractIntList" line="210"/>
            <method name="ensureCapacity" type="void" line="215"/>
            <javadoc line="215">
                Ensures that the receiver can hold at least the specified number of elements without needing to allocate new internal memory.
                 * If necessary, allocates new internal memory and increases the capacity of the receiver.                
                <@param>
                    m minCapacity   the desired minimum capacity.                    
                </@param>
            </javadoc>
            <javadoc line="222">
                Compares the specified Object with the receiver.  
                 * Returns true if and only if the specified Object is also an ArrayList of the same type, both Lists have the
                 * same size, and all corresponding pairs of elements in the two Lists are identical.
                 * In other words, two Lists are defined to be equal if they contain the
                 * same elements in the same order.                
                <@param>
                    m otherObj the Object to be compared for equality with the receiver.                    
                </@param>
                <@return>
                    n true if the specified Object is equal to the receiver.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="232">
                <comment line="233">
                    blic boolean equals(Object otherObj) { //delta                    
                </comment>
                <scope line="233"/>
                <declaration name="other" type="AbstractIntList" line="236"/>
                <scope line="239"/>
            </method>
            <javadoc line="244">
                Sets the specified range of elements in the specified array to the specified value.                
                <@param>
                    m from the index of the first element (inclusive) to be filled with the specified value.                    
                </@param>
                <@param>
                    m to the index of the last element (inclusive) to be filled with the specified value.                    
                </@param>
                <@param>
                    m val the value to be stored in the specified elements of the receiver.                    
                </@param>
            </javadoc>
            <method name="fillFromToWith" type="void" line="251"/>
            <javadoc line="255">
                Applies a procedure to each element of the receiver, if any.
                 * Starts at index 0, moving rightwards.                
                <@param>
                    m procedure    the procedure to be applied. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.                    
                </@param>
                <@return>
                    n <tt>false</tt> if the procedure stopped before all elements where iterated over, <tt>true</tt> otherwise.                    
                </@return>
            </javadoc>
            <method name="forEach" type="boolean" line="261"/>
            <javadoc line="265">
                Returns the element at the specified position in the receiver.                
                <@param>
                    m index index of element to return.                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (index
                     * &lt; 0 || index &gt;= size()).                    
                </@exception>
            </javadoc>
            <method name="get" type="int" line="272"/>
            <method name="getQuick" type="int" line="277"/>
            <javadoc line="277">
                Returns the element at the specified position in the receiver; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions. 
                 * Provided with invalid parameters this method may return invalid elements without throwing any exception!
                 * &lt;b&gt;You should only use this method when you are absolutely sure that the index is within bounds.&lt;/b&gt;
                 * Precondition (unchecked): &lt;tt&gt;index &amp;gt;= 0 &amp;&amp; index &amp;lt; size()&lt;/tt&gt;.
                 * This method is normally only used internally in large loops where bounds are explicitly checked before the loop and need no be rechecked within the loop.
                 * However, when desperately, you can give this method &lt;tt&gt;public&lt;/tt&gt; visibility in subclasses.                
                <@param>
                    m index index of element to return.                    
                </@param>
            </javadoc>
            <javadoc line="289">
                Returns the index of the first occurrence of the specified
                 * element. Returns &lt;code&gt;-1&lt;/code&gt; if the receiver does not contain this element.                
                <@param>
                    m element   the element to be searched for.                    
                </@param>
                <@return>
                    n  the index of the first occurrence of the element in the receiver; returns <code>-1</code> if the element is not found.                    
                </@return>
            </javadoc>
            <method name="indexOf" type="int" line="296">
                <comment line="297">
                    blic int indexOf(int element) { //delta                    
                </comment>
            </method>
            <javadoc line="299">
                Returns the index of the first occurrence of the specified
                 * element. Returns &lt;code&gt;-1&lt;/code&gt; if the receiver does not contain this element.
                 * Searches between &lt;code&gt;from&lt;/code&gt;, inclusive and &lt;code&gt;to&lt;/code&gt;, inclusive.
                 * Tests for identity.                
                <@param>
                    m element element to search for.                    
                </@param>
                <@param>
                    m from the leftmost search position, inclusive.                    
                </@param>
                <@param>
                    m to the rightmost search position, inclusive.                    
                </@param>
                <@return>
                    n  the index of the first occurrence of the element in the receiver; returns <code>-1</code> if the element is not found.                    
                </@return>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="indexOfFromTo" type="int" line="311">
                <comment line="312">
                    turn -1; //not found                    
                </comment>
                <scope line="314"/>
            </method>
            <javadoc line="319">
                Returns the index of the last occurrence of the specified
                 * element. Returns &lt;code&gt;-1&lt;/code&gt; if the receiver does not contain this element.                
                <@param>
                    m element   the element to be searched for.                    
                </@param>
                <@return>
                    n  the index of the last occurrence of the element in the receiver; returns <code>-1</code> if the element is not found.                    
                </@return>
            </javadoc>
            <method name="lastIndexOf" type="int" line="326"/>
            <javadoc line="329">
                Returns the index of the last occurrence of the specified
                 * element. Returns &lt;code&gt;-1&lt;/code&gt; if the receiver does not contain this element.
                 * Searches beginning at &lt;code&gt;to&lt;/code&gt;, inclusive until &lt;code&gt;from&lt;/code&gt;, inclusive.
                 * Tests for identity.                
                <@param>
                    m element element to search for.                    
                </@param>
                <@param>
                    m from the leftmost search position, inclusive.                    
                </@param>
                <@param>
                    m to the rightmost search position, inclusive.                    
                </@param>
                <@return>
                    n  the index of the last occurrence of the element in the receiver; returns <code>-1</code> if the element is not found.                    
                </@return>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="lastIndexOfFromTo" type="int" line="341">
                <comment line="342">
                    turn -1; //not found                    
                </comment>
                <scope line="344"/>
            </method>
            <javadoc line="349">
                Sorts the specified range of the receiver into ascending order. 
                 * The sorting algorithm is a modified mergesort (in which the merge is
                 * omitted if the highest element in the low sublist is less than the
                 * lowest element in the high sublist).  This algorithm offers guaranteed
                 * n*log(n) performance, and can approach linear performance on nearly
                 * sorted lists.
                 * &lt;p&gt;&lt;b&gt;You should never call this method unless you are sure that this particular sorting algorithm is the right one for your data set.&lt;/b&gt;
                 * It is generally better to call &lt;tt&gt;sort()&lt;/tt&gt; or &lt;tt&gt;sortFromTo(...)&lt;/tt&gt; instead, because those methods automatically choose the best sorting algorithm.                
                <@param>
                    m from the index of the first element (inclusive) to be sorted.                    
                </@param>
                <@param>
                    m to the index of the last element (inclusive) to be sorted.                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="mergeSortFromTo" type="void" line="365">
                <declaration name="mySize" type="int" line="366"/>
                <declaration name="myElements" type="int[]" line="369"/>
            </method>
            <javadoc line="374">
                Sorts the receiver according
                 * to the order induced by the specified comparator.  All elements in the
                 * range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                 * (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                 * &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                 * &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                 * This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;:  equal elements will
                 * not be reordered as a result of the sort.&lt;p&gt;
                 * The sorting algorithm is a modified mergesort (in which the merge is
                 * omitted if the highest element in the low sublist is less than the
                 * lowest element in the high sublist).  This algorithm offers guaranteed
                 * n*log(n) performance, and can approach linear performance on nearly
                 * sorted lists.                
                <@param>
                    m from the index of the first element (inclusive) to be
                     * sorted.                    
                </@param>
                <@param>
                    m to the index of the last element (inclusive) to be sorted.                    
                </@param>
                <@param>
                    m c the comparator to determine the order of the receiver.                    
                </@param>
                <@throws>
                    s ClassCastException if the array contains elements that are not
                     * <i>mutually comparable</i> using the specified comparator.                    
                </@throws>
                <@throws>
                    s IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </@throws>
                <@throws>
                    s ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                     * <tt>toIndex &gt; a.length</tt>                    
                </@throws>
                <@see>
                    e Comparator                    
                </@see>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="mergeSortFromTo" type="void" line="403">
                <declaration name="mySize" type="int" line="404"/>
                <declaration name="myElements" type="int[]" line="407"/>
            </method>
            <javadoc line="412">
                Returns a new list of the part of the receiver between &lt;code&gt;from&lt;/code&gt;, inclusive, and &lt;code&gt;to&lt;/code&gt;, inclusive.                
                <@param>
                    m from the index of the first element (inclusive).                    
                </@param>
                <@param>
                    m to the index of the last element (inclusive).                    
                </@param>
                <@return>
                    n a new list                    
                </@return>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="partFromTo" type="AbstractIntList" line="419">
                <declaration name="length" type="int" line="422"/>
                <declaration name="part" type="IntArrayList" line="423"/>
            </method>
            <javadoc line="427">
                Sorts the specified range of the receiver into
                 * ascending numerical order.  The sorting algorithm is a tuned quicksort,
                 * adapted from Jon L. Bentley and M. Douglas McIlroy&apos;s &quot;Engineering a
                 * Sort Function&quot;, Software-Practice and Experience, Vol. 23(11)
                 * P. 1249-1265 (November 1993).  This algorithm offers n*log(n)
                 * performance on many data sets that cause other quicksorts to degrade to
                 * quadratic performance.
                 * &lt;p&gt;&lt;b&gt;You should never call this method unless you are sure that this particular sorting algorithm is the right one for your data set.&lt;/b&gt;
                 * It is generally better to call &lt;tt&gt;sort()&lt;/tt&gt; or &lt;tt&gt;sortFromTo(...)&lt;/tt&gt; instead, because those methods automatically choose the best sorting algorithm.                
                <@param>
                    m from the index of the first element (inclusive) to be sorted.                    
                </@param>
                <@param>
                    m to the index of the last element (inclusive) to be sorted.                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="quickSortFromTo" type="void" line="443">
                <comment line="444">
                    cern.colt.Sorting.mergeSort(myElements, from, to+1); // TODO just for debugging                    
                </comment>
                <declaration name="mySize" type="int" line="444"/>
                <declaration name="myElements" type="int[]" line="447"/>
            </method>
            <javadoc line="453">
                Sorts the receiver according
                 * to the order induced by the specified comparator.  All elements in the
                 * range must be &lt;i&gt;mutually comparable&lt;/i&gt; by the specified comparator
                 * (that is, &lt;tt&gt;c.compare(e1, e2)&lt;/tt&gt; must not throw a
                 * &lt;tt&gt;ClassCastException&lt;/tt&gt; for any elements &lt;tt&gt;e1&lt;/tt&gt; and
                 * &lt;tt&gt;e2&lt;/tt&gt; in the range).&lt;p&gt;
                 * The sorting algorithm is a tuned quicksort,
                 * adapted from Jon L. Bentley and M. Douglas McIlroy&apos;s &quot;Engineering a
                 * Sort Function&quot;, Software-Practice and Experience, Vol. 23(11)
                 * P. 1249-1265 (November 1993).  This algorithm offers n*log(n)
                 * performance on many data sets that cause other quicksorts to degrade to
                 * quadratic performance.                
                <@param>
                    m from the index of the first element (inclusive) to be
                     * sorted.                    
                </@param>
                <@param>
                    m to the index of the last element (inclusive) to be sorted.                    
                </@param>
                <@param>
                    m c the comparator to determine the order of the receiver.                    
                </@param>
                <@throws>
                    s ClassCastException if the array contains elements that are not
                     * <i>mutually comparable</i> using the specified comparator.                    
                </@throws>
                <@throws>
                    s IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>                    
                </@throws>
                <@throws>
                    s ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or
                     * <tt>toIndex &gt; a.length</tt>                    
                </@throws>
                <@see>
                    e Comparator                    
                </@see>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="quickSortFromTo" type="void" line="480">
                <declaration name="mySize" type="int" line="481"/>
                <declaration name="myElements" type="int[]" line="484"/>
            </method>
            <javadoc line="489">
                Removes from the receiver all elements that are contained in the specified list.
                 * Tests for identity.                
                <@param>
                    m other the other list.                    
                </@param>
                <@return>
                    n <code>true</code> if the receiver changed as a result of the call.                    
                </@return>
            </javadoc>
            <method name="removeAll" type="boolean" line="496">
                <comment line="497">
                    (other.size()==0) return false; //nothing to do                    
                </comment>
                <declaration name="limit" type="int" line="498"/>
                <declaration name="j" type="int" line="499"/>
                <scope line="501"/>
                <declaration name="modified" type="boolean" line="505"/>
            </method>
            <javadoc line="509">
                Removes from the receiver all elements whose index is between
                 * &lt;code&gt;from&lt;/code&gt;, inclusive and &lt;code&gt;to&lt;/code&gt;, inclusive.  Shifts any succeeding
                 * elements to the left (reduces their index).
                 * This call shortens the list by &lt;tt&gt;(to - from + 1)&lt;/tt&gt; elements.                
                <@param>
                    m from index of first element to be removed.                    
                </@param>
                <@param>
                    m to index of last element to be removed.                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="removeFromTo" type="void" line="519">
                <declaration name="numMoved" type="int" line="521"/>
                <scope line="522"/>
                <declaration name="width" type="int" line="526"/>
            </method>
            <javadoc line="529">
                Replaces a number of elements in the receiver with the same number of elements of another list.
                 * Replaces elements in the receiver, between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive),
                 * with elements of &lt;code&gt;other&lt;/code&gt;, starting from &lt;code&gt;otherFrom&lt;/code&gt; (inclusive).                
                <@param>
                    m from the position of the first element to be replaced in the receiver                    
                </@param>
                <@param>
                    m to the position of the last element to be replaced in the receiver                    
                </@param>
                <@param>
                    m other list holding elements to be copied into the receiver.                    
                </@param>
                <@param>
                    m otherFrom position of first element within other list to be copied.                    
                </@param>
            </javadoc>
            <method name="replaceFromToWithFrom" type="void" line="539">
                <declaration name="length" type="int" line="540"/>
                <scope line="541">
                    <scope line="546"/>
                    <scope line="549">
                        <declaration name="otherTo" type="int" line="550"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="557">
                Replaces the part between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive) with the other list&apos;s
                 * part between &lt;code&gt;otherFrom&lt;/code&gt; and &lt;code&gt;otherTo&lt;/code&gt;. 
                 * Powerful (and tricky) method!
                 * Both parts need not be of the same size (part A can both be smaller or larger than part B).
                 * Parts may overlap.
                 * Receiver and other list may (but most not) be identical.
                 * If &lt;code&gt;from &amp;gt; to&lt;/code&gt;, then inserts other part before &lt;code&gt;from&lt;/code&gt;.                
                <@param>
                    m from the first element of the receiver (inclusive)                    
                </@param>
                <@param>
                    m to the last element of the receiver (inclusive)                    
                </@param>
                <@param>
                    m other the other list (may be identical with receiver)                    
                </@param>
                <@param>
                    m otherFrom the first element of the other list (inclusive)                    
                </@param>
                <@param>
                    m otherTo the last element of the other list (inclusive)
                     * <p><b>Examples:</b><pre>
                     * a=[0, 1, 2, 3, 4, 5, 6, 7]
                     * b=[50, 60, 70, 80, 90]
                     * a.R(...)=a.replaceFromToWithFromTo(...)
                     * a.R(3,5,b,0,4)-->[0, 1, 2, 50, 60, 70, 80, 90, 6, 7]
                     * a.R(1,6,b,0,4)-->[0, 50, 60, 70, 80, 90, 7]
                     * a.R(0,6,b,0,4)-->[50, 60, 70, 80, 90, 7]
                     * a.R(3,5,b,1,2)-->[0, 1, 2, 60, 70, 6, 7]
                     * a.R(1,6,b,1,2)-->[0, 60, 70, 7]
                     * a.R(0,6,b,1,2)-->[60, 70, 7]
                     * a.R(5,3,b,0,4)-->[0, 1, 2, 3, 4, 50, 60, 70, 80, 90, 5, 6, 7]
                     * a.R(5,0,b,0,4)-->[0, 1, 2, 3, 4, 50, 60, 70, 80, 90, 5, 6, 7]
                     * a.R(5,3,b,1,2)-->[0, 1, 2, 3, 4, 60, 70, 5, 6, 7]
                     * a.R(5,0,b,1,2)-->[0, 1, 2, 3, 4, 60, 70, 5, 6, 7]
                     * Extreme cases:
                     * a.R(5,3,b,0,0)-->[0, 1, 2, 3, 4, 50, 5, 6, 7]
                     * a.R(5,3,b,4,4)-->[0, 1, 2, 3, 4, 90, 5, 6, 7]
                     * a.R(3,5,a,0,1)-->[0, 1, 2, 0, 1, 6, 7]
                     * a.R(3,5,a,3,5)-->[0, 1, 2, 3, 4, 5, 6, 7]
                     * a.R(3,5,a,4,4)-->[0, 1, 2, 4, 6, 7]
                     * a.R(5,3,a,0,4)-->[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 6, 7]
                     * a.R(0,-1,b,0,4)-->[50, 60, 70, 80, 90, 0, 1, 2, 3, 4, 5, 6, 7]
                     * a.R(0,-1,a,0,4)-->[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 6, 7]
                     * a.R(8,0,a,0,4)-->[0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4]
                     * </pre>                    
                </@param>
            </javadoc>
            <method name="replaceFromToWithFromTo" type="void" line="600">
                <scope line="601"/>
                <scope line="605"/>
                <declaration name="length" type="int" line="610"/>
                <declaration name="diff" type="int" line="611"/>
                <declaration name="theLast" type="int" line="612"/>
                <scope line="614"/>
                <scope line="619"/>
                <scope line="622">
                    <scope line="623"/>
                </scope>
                <scope line="628"/>
            </method>
            <javadoc line="632">
                Replaces the part of the receiver starting at &lt;code&gt;from&lt;/code&gt; (inclusive) with all the elements of the specified collection.
                 * Does not alter the size of the receiver.
                 * Replaces exactly &lt;tt&gt;Math.max(0,Math.min(size()-from, other.size()))&lt;/tt&gt; elements.                
                <@param>
                    m from the index at which to copy the first element from the specified collection.                    
                </@param>
                <@param>
                    m other Collection to replace part of the receiver                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (index &lt; 0 || index &gt;= size()).                    
                </@exception>
            </javadoc>
            <method name="replaceFromWith" type="void" line="641">
                <comment line="642">
                    t(index++,((Number) e.next()).intValue()); //delta                    
                </comment>
                <declaration name="e" type="java.util.Iterator" line="643"/>
                <declaration name="index" type="int" line="644"/>
                <declaration name="limit" type="int" line="645"/>
            </method>
            <javadoc line="649">
                Retains (keeps) only the elements in the receiver that are contained in the specified other list.
                 * In other words, removes from the receiver all of its elements that are not contained in the
                 * specified other list.                
                <@param>
                    m other the other list to test against.                    
                </@param>
                <@return>
                    n <code>true</code> if the receiver changed as a result of the call.                    
                </@return>
            </javadoc>
            <method name="retainAll" type="boolean" line="656">
                <scope line="657"/>
                <declaration name="limit" type="int" line="663"/>
                <declaration name="j" type="int" line="664"/>
                <scope line="665"/>
                <declaration name="modified" type="boolean" line="669"/>
            </method>
            <javadoc line="673">
                Reverses the elements of the receiver.
                 * Last becomes first, second last becomes second first, and so on.                
            </javadoc>
            <method name="reverse" type="void" line="677">
                <declaration name="tmp" type="int" line="678"/>
                <declaration name="limit" type="int" line="679"/>
                <declaration name="j" type="int" line="680"/>
                <scope line="682"/>
            </method>
            <javadoc line="688">
                Replaces the element at the specified position in the receiver with the specified element.                
                <@param>
                    m index index of element to replace.                    
                </@param>
                <@param>
                    m element element to be stored at the specified position.                    
                </@param>
                <@throws>
                    s IndexOutOfBoundsException if <tt>index &lt; 0 || index &gt;= size()</tt>.                    
                </@throws>
            </javadoc>
            <method name="set" type="void" line="695"/>
            <method name="setQuick" type="void" line="700"/>
            <javadoc line="700">
                Replaces the element at the specified position in the receiver with the specified element; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions.
                 * Provided with invalid parameters this method may access invalid indexes without throwing any exception!
                 * &lt;b&gt;You should only use this method when you are absolutely sure that the index is within bounds.&lt;/b&gt;
                 * Precondition (unchecked): &lt;tt&gt;index &amp;gt;= 0 &amp;&amp; index &amp;lt; size()&lt;/tt&gt;.
                 * This method is normally only used internally in large loops where bounds are explicitly checked before the loop and need no be rechecked within the loop.
                 * However, when desperately, you can give this method &lt;tt&gt;public&lt;/tt&gt; visibility in subclasses.                
                <@param>
                    m index index of element to replace.                    
                </@param>
                <@param>
                    m element element to be stored at the specified position.                    
                </@param>
            </javadoc>
            <javadoc line="713">
                Sets the size of the receiver without modifying it otherwise.
                 * This method should not release or allocate new memory but simply set some instance variable like &lt;tt&gt;size&lt;/tt&gt;.
                 * If your subclass overrides and delegates size changing methods to some other object,
                 * you must make sure that those overriding methods not only update the size of the delegate but also of this class.
                 * For example:
                 * public DatabaseList extends AbstractIntList {
                 * ...
                 * public void removeFromTo(int from,int to) {
                 * myDatabase.removeFromTo(from,to);
                 * this.setSizeRaw(size-(to-from+1));
                 * }
                 * }                
            </javadoc>
            <method name="setSizeRaw" type="void" line="728"/>
            <javadoc line="731">
                Randomly permutes the part of the receiver between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive).                
                <@param>
                    m from the index of the first element (inclusive) to be permuted.                    
                </@param>
                <@param>
                    m to the index of the last element (inclusive) to be permuted.                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="shuffleFromTo" type="void" line="737">
                <declaration name="gen" type="cern.jet.random.Uniform" line="740"/>
                <scope line="741">
                    <declaration name="random" type="int" line="742"/>
                    <declaration name="tmpElement" type="int" line="745"/>
                </scope>
            </method>
            <javadoc line="750">
                Returns the number of elements contained in the receiver.                
                <@returns>
                    s  the number of elements contained in the receiver.                    
                </@returns>
            </javadoc>
            <method name="size" type="int" line="755"/>
            <javadoc line="758">
                Returns a list which is a concatenation of &lt;code&gt;times&lt;/code&gt; times the receiver.                
                <@param>
                    m times the number of times the receiver shall be copied.                    
                </@param>
            </javadoc>
            <method name="times" type="AbstractIntList" line="762">
                <declaration name="newList" type="AbstractIntList" line="763"/>
                <scope line="764"/>
            </method>
            <javadoc line="769">
                Returns a &lt;code&gt;java.util.ArrayList&lt;/code&gt; containing all the elements in the receiver.                
            </javadoc>
            <method name="toList" type="java.util.ArrayList" line="772">
                <declaration name="mySize" type="int" line="773"/>
                <declaration name="list" type="java.util.ArrayList" line="774"/>
            </method>
            <javadoc line="778">
                Returns a string representation of the receiver, containing
                 * the String representation of each element.                
            </javadoc>
            <method name="toString" type="String" line="782"/>
        </class>
    </source>