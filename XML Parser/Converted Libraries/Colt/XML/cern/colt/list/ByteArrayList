<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.colt.list">
        <import package="cern.colt.function.ByteProcedure"/>
        <class name="ByteArrayList" extends="AbstractByteList" line="12">
            <javadoc line="12">
                Resizable list holding &lt;code&gt;byte&lt;/code&gt; elements; implemented with arrays.
                 * First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.                
            </javadoc>
            <declaration name="elements" type="byte[]" line="17"/>
            <javadoc line="17">
                The array buffer into which the elements of the list are stored.
                 * The capacity of the list is the length of this array buffer.                
                <@serial>
                    l                    
                </@serial>
            </javadoc>
            <javadoc line="23">
                Constructs an empty list.                
            </javadoc>
            <method name="ByteArrayList" type="constructor" line="26"/>
            <javadoc line="29">
                Constructs a list containing the specified elements. 
                 * The initial size and capacity of the list is the length of the array.
                 * &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, &lt;b&gt;the array is not copied&lt;/b&gt;.
                 * So if subsequently you modify the specified array directly via the [] operator, be sure you know what you&apos;re doing.                
                <@param>
                    m elements the array to be backed by the the constructed list                    
                </@param>
            </javadoc>
            <method name="ByteArrayList" type="constructor" line="38"/>
            <javadoc line="41">
                Constructs an empty list with the specified initial capacity.                
                <@param>
                    m initialCapacity   the number of elements the receiver can hold without auto-expanding itself by allocating new internal memory.                    
                </@param>
            </javadoc>
            <method name="ByteArrayList" type="constructor" line="46"/>
            <javadoc line="50">
                Appends the specified element to the end of this list.                
                <@param>
                    m element element to be appended to this list.                    
                </@param>
            </javadoc>
            <method name="add" type="void" line="55">
                <comment line="56">
                    overridden for performance only.                    
                </comment>
                <scope line="57"/>
            </method>
            <javadoc line="62">
                Inserts the specified element before the specified position into the receiver. 
                 * Shifts the element currently at that position (if any) and
                 * any subsequent elements to the right.                
                <@param>
                    m index index before which the specified element is to be inserted (must be in [0,size]).                    
                </@param>
                <@param>
                    m element element to be inserted.                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>index &lt; 0 || index &gt; size()</tt>).                    
                </@exception>
            </javadoc>
            <method name="beforeInsert" type="void" line="71">
                <comment line="72">
                    overridden for performance only.                    
                </comment>
            </method>
            <javadoc line="80">
                Searches the receiver for the specified value using
                 * the binary search algorithm.  The receiver must &lt;strong&gt;must&lt;/strong&gt; be
                 * sorted (as by the sort method) prior to making this call.  If
                 * it is not sorted, the results are undefined: in particular, the call
                 * may enter an infinite loop.  If the receiver contains multiple elements
                 * equal to the specified object, there is no guarantee which instance
                 * will be found.                
                <@param>
                    m key the value to be searched for.                    
                </@param>
                <@param>
                    m from the leftmost search position, inclusive.                    
                </@param>
                <@param>
                    m to the rightmost search position, inclusive.                    
                </@param>
                <@return>
                    n index of the search key, if it is contained in the receiver;
                     * otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The <i>insertion
                     * point</i> is defined as the the point at which the value would
                     * be inserted into the receiver: the index of the first
                     * element greater than the key, or <tt>receiver.size()</tt>, if all
                     * elements in the receiver are less than the specified key.  Note
                     * that this guarantees that the return value will be &gt;= 0 if
                     * and only if the key is found.                    
                </@return>
                <@see>
                    e cern.colt.Sorting                    
                </@see>
                <@see>
                    e java.util.Arrays                    
                </@see>
            </javadoc>
            <method name="binarySearchFromTo" type="int" line="103"/>
            <javadoc line="106">
                Returns a deep copy of the receiver.                
                <@return>
                    n  a deep copy of the receiver.                    
                </@return>
            </javadoc>
            <method name="clone" type="Object" line="111">
                <comment line="112">
                    overridden for performance only.                    
                </comment>
                <declaration name="clone" type="ByteArrayList" line="113"/>
            </method>
            <javadoc line="117">
                Returns a deep copy of the receiver; uses &lt;code&gt;clone()&lt;/code&gt; and casts the result.                
                <@return>
                    n  a deep copy of the receiver.                    
                </@return>
            </javadoc>
            <method name="copy" type="ByteArrayList" line="122"/>
            <javadoc line="125">
                Sorts the specified range of the receiver into ascending numerical order. 
                 * The sorting algorithm is a count sort. This algorithm offers guaranteed
                 * O(Max(n,256)) performance.                
                <@param>
                    m from the index of the first element (inclusive) to be sorted.                    
                </@param>
                <@param>
                    m to the index of the last element (inclusive) to be sorted.                    
                </@param>
            </javadoc>
            <method name="countSortFromTo" type="void" line="134">
                <declaration name="min" type="int" line="138"/>
                <declaration name="range" type="int" line="139"/>
                <declaration name="theElements" type="byte[]" line="140"/>
                <declaration name="counts" type="int[]" line="141"/>
                <declaration name="fromIndex" type="int" line="145"/>
                <declaration name="val" type="byte" line="146"/>
                <scope line="147">
                    <declaration name="c" type="int" line="148"/>
                    <scope line="149">
                        <scope line="151">
                            <declaration name="toIndex" type="int" line="152"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="159">
                Sorts the specified range of the receiver into ascending numerical order. 
                 * The sorting algorithm is a count sort. This algorithm offers guaranteed
                 * &lt;dt&gt;Performance: O(Max(n,max-min+1)).
                 * &lt;dt&gt;Space requirements: int[max-min+1] buffer.
                 * &lt;p&gt;This algorithm is only applicable if max-min+1 is not large!
                 * But if applicable, it usually outperforms quicksort by a factor of 3-4.                
                <@param>
                    m from the index of the first element (inclusive) to be sorted.                    
                </@param>
                <@param>
                    m to the index of the last element (inclusive) to be sorted.                    
                </@param>
                <@param>
                    m min the smallest element contained in the range.                    
                </@param>
                <@param>
                    m max the largest element contained in the range.                    
                </@param>
            </javadoc>
            <method name="countSortFromTo" type="void" line="173">
                <declaration name="width" type="int" line="177"/>
                <declaration name="counts" type="int[]" line="179"/>
                <declaration name="theElements" type="byte[]" line="180"/>
                <declaration name="fromIndex" type="int" line="183"/>
                <declaration name="val" type="byte" line="184"/>
                <scope line="185">
                    <declaration name="c" type="int" line="186"/>
                    <scope line="187">
                        <scope line="189">
                            <declaration name="toIndex" type="int" line="190"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="197">
                Returns the elements currently stored, including invalid elements between size and capacity, if any.
                 * &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, &lt;b&gt;the array is not copied&lt;/b&gt;.
                 * So if subsequently you modify the returned array directly via the [] operator, be sure you know what you&apos;re doing.                
                <@return>
                    n the elements currently stored.                    
                </@return>
            </javadoc>
            <method name="elements" type="byte[]" line="205"/>
            <javadoc line="208">
                Sets the receiver&apos;s elements to be the specified array (not a copy of it).
                 * The size and capacity of the list is the length of the array.
                 * &lt;b&gt;WARNING:&lt;/b&gt; For efficiency reasons and to keep memory usage low, &lt;b&gt;the array is not copied&lt;/b&gt;.
                 * So if subsequently you modify the specified array directly via the [] operator, be sure you know what you&apos;re doing.                
                <@param>
                    m elements the new elements to be stored.                    
                </@param>
                <@return>
                    n the receiver itself.                    
                </@return>
            </javadoc>
            <method name="elements" type="AbstractByteList" line="218"/>
            <javadoc line="223">
                Ensures that the receiver can hold at least the specified number of elements without needing to allocate new internal memory.
                 * If necessary, allocates new internal memory and increases the capacity of the receiver.                
                <@param>
                    m minCapacity   the desired minimum capacity.                    
                </@param>
            </javadoc>
            <method name="ensureCapacity" type="void" line="229"/>
            <javadoc line="232">
                Compares the specified Object with the receiver.  
                 * Returns true if and only if the specified Object is also an ArrayList of the same type, both Lists have the
                 * same size, and all corresponding pairs of elements in the two Lists are identical.
                 * In other words, two Lists are defined to be equal if they contain the
                 * same elements in the same order.                
                <@param>
                    m otherObj the Object to be compared for equality with the receiver.                    
                </@param>
                <@return>
                    n true if the specified Object is equal to the receiver.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="242">
                <comment line="243">
                    blic boolean equals(Object otherObj) { //delta                    
                </comment>
                <comment line="243">
                    overridden for performance only.                    
                </comment>
                <declaration name="other" type="ByteArrayList" line="247"/>
                <declaration name="theElements" type="byte[]" line="250"/>
                <declaration name="otherElements" type="byte[]" line="251"/>
                <scope line="252"/>
            </method>
            <javadoc line="257">
                Applies a procedure to each element of the receiver, if any.
                 * Starts at index 0, moving rightwards.                
                <@param>
                    m procedure    the procedure to be applied. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.                    
                </@param>
                <@return>
                    n <tt>false</tt> if the procedure stopped before all elements where iterated over, <tt>true</tt> otherwise.                    
                </@return>
            </javadoc>
            <method name="forEach" type="boolean" line="263">
                <comment line="264">
                    overridden for performance only.                    
                </comment>
                <declaration name="theElements" type="byte[]" line="265"/>
                <declaration name="theSize" type="int" line="266"/>
            </method>
            <javadoc line="271">
                Returns the element at the specified position in the receiver.                
                <@param>
                    m index index of element to return.                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (index
                     * &lt; 0 || index &gt;= size()).                    
                </@exception>
            </javadoc>
            <method name="get" type="byte" line="278">
                <comment line="279">
                    overridden for performance only.                    
                </comment>
            </method>
            <javadoc line="284">
                Returns the element at the specified position in the receiver; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions. 
                 * Provided with invalid parameters this method may return invalid elements without throwing any exception!
                 * &lt;b&gt;You should only use this method when you are absolutely sure that the index is within bounds.&lt;/b&gt;
                 * Precondition (unchecked): &lt;tt&gt;index &amp;gt;= 0 &amp;&amp; index &amp;lt; size()&lt;/tt&gt;.                
                <@param>
                    m index index of element to return.                    
                </@param>
            </javadoc>
            <method name="getQuick" type="byte" line="292"/>
            <javadoc line="295">
                Returns the index of the first occurrence of the specified
                 * element. Returns &lt;code&gt;-1&lt;/code&gt; if the receiver does not contain this element.
                 * Searches between &lt;code&gt;from&lt;/code&gt;, inclusive and &lt;code&gt;to&lt;/code&gt;, inclusive.
                 * Tests for identity.                
                <@param>
                    m element element to search for.                    
                </@param>
                <@param>
                    m from the leftmost search position, inclusive.                    
                </@param>
                <@param>
                    m to the rightmost search position, inclusive.                    
                </@param>
                <@return>
                    n  the index of the first occurrence of the element in the receiver; returns <code>-1</code> if the element is not found.                    
                </@return>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="indexOfFromTo" type="int" line="307">
                <comment line="308">
                    overridden for performance only.                    
                </comment>
                <comment line="308">
                    turn -1; //not found                    
                </comment>
                <declaration name="theElements" type="byte[]" line="312"/>
                <scope line="313">
                    <scope line="314"/>
                </scope>
            </method>
            <javadoc line="318">
                Returns the index of the last occurrence of the specified
                 * element. Returns &lt;code&gt;-1&lt;/code&gt; if the receiver does not contain this element.
                 * Searches beginning at &lt;code&gt;to&lt;/code&gt;, inclusive until &lt;code&gt;from&lt;/code&gt;, inclusive.
                 * Tests for identity.                
                <@param>
                    m element element to search for.                    
                </@param>
                <@param>
                    m from the leftmost search position, inclusive.                    
                </@param>
                <@param>
                    m to the rightmost search position, inclusive.                    
                </@param>
                <@return>
                    n  the index of the last occurrence of the element in the receiver; returns <code>-1</code> if the element is not found.                    
                </@return>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="lastIndexOfFromTo" type="int" line="330">
                <comment line="331">
                    overridden for performance only.                    
                </comment>
                <comment line="331">
                    turn -1; //not found                    
                </comment>
                <declaration name="theElements" type="byte[]" line="335"/>
                <scope line="336">
                    <scope line="337"/>
                </scope>
            </method>
            <javadoc line="341">
                Returns a new list of the part of the receiver between &lt;code&gt;from&lt;/code&gt;, inclusive, and &lt;code&gt;to&lt;/code&gt;, inclusive.                
                <@param>
                    m from the index of the first element (inclusive).                    
                </@param>
                <@param>
                    m to the index of the last element (inclusive).                    
                </@param>
                <@return>
                    n a new list                    
                </@return>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="partFromTo" type="AbstractByteList" line="348">
                <declaration name="part" type="byte[]" line="353"/>
            </method>
            <javadoc line="357">
                Removes from the receiver all elements that are contained in the specified list.
                 * Tests for identity.                
                <@param>
                    m other the other list.                    
                </@param>
                <@return>
                    n <code>true</code> if the receiver changed as a result of the call.                    
                </@return>
            </javadoc>
            <method name="removeAll" type="boolean" line="364">
                <comment line="365">
                    overridden for performance only.                    
                </comment>
                <comment line="365">
                    There are two possibilities to do the thing
                    a) use other.indexOf(...)
                    b) sort other, then use other.binarySearch(...)
                    
                    Let&apos;s try to figure out which one is faster. Let M=size, N=other.size, then                    
                </comment>
                <comment line="365">
                    (other.size()==0) {return false;} //nothing to do                    
                </comment>
                <scope line="378"/>
                <declaration name="limit" type="int" line="379"/>
                <declaration name="j" type="int" line="380"/>
                <declaration name="theElements" type="byte[]" line="381"/>
                <declaration name="mySize" type="int" line="382"/>
                <declaration name="N" type="double" line="384"/>
                <declaration name="M" type="double" line="385"/>
                <scope line="386">
                    <declaration name="sortedList" type="ByteArrayList" line="388"/>
                    <scope line="391"/>
                </scope>
                <scope line="395">
                    <scope line="397"/>
                </scope>
                <declaration name="modified" type="boolean" line="402"/>
            </method>
            <javadoc line="406">
                Replaces a number of elements in the receiver with the same number of elements of another list.
                 * Replaces elements in the receiver, between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive),
                 * with elements of &lt;code&gt;other&lt;/code&gt;, starting from &lt;code&gt;otherFrom&lt;/code&gt; (inclusive).                
                <@param>
                    m from the position of the first element to be replaced in the receiver                    
                </@param>
                <@param>
                    m to the position of the last element to be replaced in the receiver                    
                </@param>
                <@param>
                    m other list holding elements to be copied into the receiver.                    
                </@param>
                <@param>
                    m otherFrom position of first element within other list to be copied.                    
                </@param>
            </javadoc>
            <method name="replaceFromToWithFrom" type="void" line="416">
                <comment line="417">
                    overridden for performance only.                    
                </comment>
                <scope line="418"/>
                <declaration name="length" type="int" line="423"/>
                <scope line="424"/>
            </method>
            <javadoc line="430">
                Retains (keeps) only the elements in the receiver that are contained in the specified other list.
                 * In other words, removes from the receiver all of its elements that are not contained in the
                 * specified other list.                
                <@param>
                    m other the other list to test against.                    
                </@param>
                <@return>
                    n <code>true</code> if the receiver changed as a result of the call.                    
                </@return>
            </javadoc>
            <method name="retainAll" type="boolean" line="437">
                <comment line="438">
                    overridden for performance only.                    
                </comment>
                <comment line="438">
                    There are two possibilities to do the thing
                    a) use other.indexOf(...)
                    b) sort other, then use other.binarySearch(...)
                    
                    Let&apos;s try to figure out which one is faster. Let M=size, N=other.size, then                    
                </comment>
                <declaration name="limit" type="int" line="451"/>
                <declaration name="j" type="int" line="452"/>
                <declaration name="theElements" type="byte[]" line="453"/>
                <declaration name="mySize" type="int" line="454"/>
                <declaration name="N" type="double" line="456"/>
                <declaration name="M" type="double" line="457"/>
                <scope line="458">
                    <declaration name="sortedList" type="ByteArrayList" line="460"/>
                    <scope line="463"/>
                </scope>
                <scope line="467">
                    <scope line="469"/>
                </scope>
                <declaration name="modified" type="boolean" line="474"/>
            </method>
            <javadoc line="478">
                Reverses the elements of the receiver.
                 * Last becomes first, second last becomes second first, and so on.                
            </javadoc>
            <method name="reverse" type="void" line="482">
                <comment line="483">
                    overridden for performance only.                    
                </comment>
                <declaration name="tmp" type="byte" line="484"/>
                <declaration name="limit" type="int" line="485"/>
                <declaration name="j" type="int" line="486"/>
                <declaration name="theElements" type="byte[]" line="488"/>
                <scope line="489"/>
            </method>
            <javadoc line="495">
                Replaces the element at the specified position in the receiver with the specified element.                
                <@param>
                    m index index of element to replace.                    
                </@param>
                <@param>
                    m element element to be stored at the specified position.                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (index
                     * &lt; 0 || index &gt;= size()).                    
                </@exception>
            </javadoc>
            <method name="set" type="void" line="503">
                <comment line="504">
                    overridden for performance only.                    
                </comment>
            </method>
            <javadoc line="509">
                Replaces the element at the specified position in the receiver with the specified element; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions.
                 * Provided with invalid parameters this method may access invalid indexes without throwing any exception!
                 * &lt;b&gt;You should only use this method when you are absolutely sure that the index is within bounds.&lt;/b&gt;
                 * Precondition (unchecked): &lt;tt&gt;index &amp;gt;= 0 &amp;&amp; index &amp;lt; size()&lt;/tt&gt;.                
                <@param>
                    m index index of element to replace.                    
                </@param>
                <@param>
                    m element element to be stored at the specified position.                    
                </@param>
            </javadoc>
            <method name="setQuick" type="void" line="518"/>
            <javadoc line="521">
                Randomly permutes the part of the receiver between &lt;code&gt;from&lt;/code&gt; (inclusive) and &lt;code&gt;to&lt;/code&gt; (inclusive).                
                <@param>
                    m from the index of the first element (inclusive) to be permuted.                    
                </@param>
                <@param>
                    m to the index of the last element (inclusive) to be permuted.                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="shuffleFromTo" type="void" line="527">
                <comment line="528">
                    overridden for performance only.                    
                </comment>
                <scope line="529"/>
                <declaration name="gen" type="cern.jet.random.Uniform" line="532"/>
                <declaration name="tmpElement" type="byte" line="533"/>
                <declaration name="theElements" type="byte[]" line="534"/>
                <declaration name="random" type="int" line="535"/>
                <scope line="536"/>
            </method>
            <javadoc line="545">
                Sorts the specified range of the receiver into ascending order. 
                 * The sorting algorithm is countsort.                
                <@param>
                    m from the index of the first element (inclusive) to be sorted.                    
                </@param>
                <@param>
                    m to the index of the last element (inclusive) to be sorted.                    
                </@param>
                <@exception>
                    n IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).                    
                </@exception>
            </javadoc>
            <method name="sortFromTo" type="void" line="554">
                <comment line="555">
                    try to figure out which option is fastest.                    
                </comment>
                <comment line="555">
                    uble quickSortEstimate = 	N * Math.log(N)/0.6931471805599453; // O(N*log(N,base=2)) ; ln(2)=0.6931471805599453                    
                </comment>
                <comment line="555">
                    uble countSortEstimate = 	Math.max(width,N); // O(Max(width,N))                    
                </comment>
                <declaration name="N" type="double" line="556"/>
                <declaration name="quickSortEstimate" type="double" line="557"/>
                <declaration name="width" type="double" line="559"/>
                <declaration name="countSortEstimate" type="double" line="560"/>
                <scope line="562"/>
                <scope line="565"/>
            </method>
            <javadoc line="569">
                Trims the capacity of the receiver to be the receiver&apos;s current 
                 * size. Releases any superfluos internal memory. An application can use this operation to minimize the 
                 * storage of the receiver.                
            </javadoc>
            <method name="trimToSize" type="void" line="574"/>
        </class>
    </source>