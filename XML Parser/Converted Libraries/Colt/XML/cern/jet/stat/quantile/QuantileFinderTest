<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.stat.quantile">
        <import package="cern.colt.Timer"/>
        <import package="cern.colt.list.DoubleArrayList"/>
        <import package="cern.colt.list.IntArrayList"/>
        <class name="QuantileFinderTest" line="14">
            <javadoc line="14">
                A class holding test cases for exact and approximate quantile finders.                
            </javadoc>
            <javadoc line="18">
                Finds the first and last indexes of a specific element within a sorted list.                
                <@return>
                    n int[]                    
                </@return>
                <@param>
                    m list cern.colt.list.DoubleArrayList                    
                </@param>
                <@param>
                    m element the element to search for                    
                </@param>
            </javadoc>
            <method name="binaryMultiSearch" type="IntArrayList" line="24">
                <params>
                    <param name="list" type="DoubleArrayList"/>
                    <param name="element" type="double"/>
                </params>
                <comment line="25">
                    (index&lt;0) return null; //not found                    
                </comment>
                <declaration name="index" type="int" line="25"/>
                <declaration name="from" type="int" line="28"/>
                <declaration name="to" type="int" line="32"/>
            </method>
            <javadoc line="38">
                Observed epsilon                
            </javadoc>
            <method name="epsilon" type="double" line="41">
                <params>
                    <param name="size" type="int"/>
                    <param name="phi" type="double"/>
                    <param name="rank" type="double"/>
                </params>
                <comment line="42">
                    System.out.println(&quot;\n&quot;);                    
                </comment>
                <comment line="42">
                    System.out.println(&quot;s=&quot;+size+&quot;, rank=&quot;+rank+&quot;, phi=&quot;+phi+&quot;, eps=&quot;+Math.abs((rank)/s - phi));                    
                </comment>
                <comment line="42">
                    System.out.println(&quot;\n&quot;);                    
                </comment>
                <declaration name="s" type="double" line="42"/>
            </method>
            <javadoc line="48">
                Observed epsilon                
            </javadoc>
            <method name="epsilon" type="double" line="51">
                <params>
                    <param name="sortedList" type="DoubleArrayList"/>
                    <param name="phi" type="double"/>
                    <param name="element" type="double"/>
                </params>
                <declaration name="rank" type="double" line="52"/>
            </method>
            <javadoc line="55">
                Observed epsilon                
            </javadoc>
            <method name="epsilon" type="double" line="58">
                <params>
                    <param name="sortedList" type="DoubleArrayList"/>
                    <param name="finder" type="DoubleQuantileFinder"/>
                    <param name="phi" type="double"/>
                </params>
                <declaration name="element" type="double" line="59"/>
            </method>
            <method name="main" type="void" line="62">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <comment line="63">
                    testQuantileCalculation(args);                    
                </comment>
                <comment line="63">
                    testCollapse();                    
                </comment>
            </method>
            <javadoc line="67">
                This method was created in VisualAge.                
                <@return>
                    n double[]                    
                </@return>
                <@param>
                    m values cern.it.hepodbms.primitivearray.DoubleArrayList                    
                </@param>
                <@param>
                    m phis double[]                    
                </@param>
            </javadoc>
            <method name="observedEpsilonAtPhi" type="double" line="73">
                <params>
                    <param name="phi" type="double"/>
                    <param name="exactFinder" type="ExactDoubleQuantileFinder"/>
                    <param name="approxFinder" type="DoubleQuantileFinder"/>
                </params>
                <comment line="74">
                    System.out.println(&quot;exactRank=&quot;+exactRank);                    
                </comment>
                <comment line="74">
                    actFinder.quantileElements(new DoubleArrayList(new double[] {phi})).get(0); // just to ensure exactFinder is sorted                    
                </comment>
                <comment line="74">
                    System.out.println(&quot;approxElem=&quot;+approxElement);                    
                </comment>
                <declaration name="N" type="int" line="74"/>
                <declaration name="exactRank" type="int" line="76"/>
                <declaration name="approxElement" type="double" line="79"/>
                <declaration name="approxRanks" type="IntArrayList" line="81"/>
                <declaration name="from" type="int" line="82"/>
                <declaration name="to" type="int" line="83"/>
                <declaration name="distance" type="int" line="85"/>
                <scope line="87"/>
                <declaration name="epsilon" type="double" line="92"/>
            </method>
            <javadoc line="95">
                This method was created in VisualAge.                
                <@return>
                    n double[]                    
                </@return>
                <@param>
                    m values cern.it.hepodbms.primitivearray.DoubleArrayList                    
                </@param>
                <@param>
                    m phis double[]                    
                </@param>
            </javadoc>
            <method name="observedEpsilonsAtPhis" type="DoubleArrayList" line="101">
                <params>
                    <param name="phis" type="DoubleArrayList"/>
                    <param name="exactFinder" type="ExactDoubleQuantileFinder"/>
                    <param name="approxFinder" type="DoubleQuantileFinder"/>
                    <param name="desiredEpsilon" type="double"/>
                </params>
                <declaration name="epsilons" type="DoubleArrayList" line="102"/>
                <scope line="104">
                    <declaration name="epsilon" type="double" line="105"/>
                </scope>
            </method>
            <javadoc line="111">
                Not yet commented.                
            </javadoc>
            <method name="test" type="void" line="114">
                <comment line="115">
                    String b=&quot;5&quot;;                    
                </comment>
                <comment line="115">
                    String delta = &quot;0.0001&quot;;                    
                </comment>
                <declaration name="args" type="String[]" line="115"/>
                <declaration name="size" type="String" line="117"/>
                <declaration name="b" type="String" line="121"/>
                <declaration name="k" type="String" line="124"/>
                <declaration name="enableLogging" type="String" line="127"/>
                <declaration name="chunks" type="String" line="130"/>
                <declaration name="computeExactQuantilesAlso" type="String" line="133"/>
                <declaration name="doShuffle" type="String" line="136"/>
                <declaration name="epsilon" type="String" line="139"/>
                <declaration name="delta" type="String" line="142"/>
                <declaration name="quantiles" type="String" line="146"/>
                <declaration name="max_N" type="String" line="149"/>
            </method>
            <javadoc line="155">
                This method was created in VisualAge.                
            </javadoc>
            <method name="testBestBandKCalculation" type="void" line="158">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <comment line="159">
                    boolean known_N;                    
                </comment>
                <comment line="159">
                    if (args==null) known_N = false;                    
                </comment>
                <comment line="159">
                    else known_N = new Boolean(args[0]).booleanValue();                    
                </comment>
                <comment line="159">
                    int[] quantiles = {1,100,10000};                    
                </comment>
                <comment line="159">
                    double[] deltas = {0.0, 0.001, 0.00001, 0.000001};                    
                </comment>
                <comment line="159">
                    double[] epsilons = {0.0, 0.01, 0.001, 0.0001, 0.00001};                    
                </comment>
                <comment line="159">
                    if (! known_N) sizes = new long[] {0};                    
                </comment>
                <comment line="159">
                    if (known_N)                    
                </comment>
                <comment line="159">
                    System.out.println(&quot;Computing b&apos;s and k&apos;s for KNOWN N&quot;);                    
                </comment>
                <comment line="159">
                    else                    
                </comment>
                <comment line="159">
                    System.out.println(&quot;Computing b&apos;s and k&apos;s for UNKNOWN N&quot;);                    
                </comment>
                <declaration name="quantiles" type="int[]" line="163"/>
                <declaration name="sizes" type="long[]" line="166"/>
                <declaration name="deltas" type="double[]" line="168"/>
                <declaration name="epsilons" type="double[]" line="172"/>
                <declaration name="timer" type="Timer" line="184"/>
                <scope line="186">
                    <declaration name="p" type="int" line="187"/>
                    <scope line="190">
                        <declaration name="N" type="long" line="191"/>
                        <scope line="194">
                            <declaration name="epsilon" type="double" line="195"/>
                            <scope line="198">
                                <declaration name="delta" type="double" line="199"/>
                                <scope line="200">
                                    <declaration name="known_N" type="boolean" line="201"/>
                                    <declaration name="finder" type="DoubleQuantileFinder" line="205"/>
                                    <declaration name="knownStr" type="String" line="233"/>
                                    <declaration name="mem" type="long" line="234"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="256">
                This method was created in VisualAge.                
            </javadoc>
            <method name="testLocalVarDeclarationSpeed" type="void" line="259">
                <params>
                    <param name="size" type="int"/>
                </params>
                <comment line="260">
                    Timer timer = new Timer().start();
                    for (int i=0; i&lt;size; i++) {
                    for (int j=0; j&lt;size; j++) {                    
                </comment>
                <declaration name="timer" type="Timer" line="274"/>
                <declaration name="buffer" type="DoubleBuffer" line="275"/>
                <declaration name="val" type="int" line="276"/>
                <declaration name="f" type="double" line="277"/>
                <declaration name="j" type="int" line="278"/>
                <scope line="280">
                    <scope line="281"/>
                </scope>
            </method>
            <javadoc line="292">
                                
            </javadoc>
            <method name="testQuantileCalculation" type="void" line="294">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <comment line="295">
                    cern.it.util.Log.enableLogging(args[3].equals(&quot;log&quot;));                    
                </comment>
                <comment line="295">
                    int quantiles = phis.length;                    
                </comment>
                <comment line="295">
                    new UnknownApproximateDoubleQuantileFinder(b,k);                    
                </comment>
                <comment line="295">
                    approxFinder = new ApproximateDoubleQuantileFinder(b,k);                    
                </comment>
                <comment line="295">
                    double[] returnSamplingRate = new double[1];
                    long[] result = ApproximateQuantileFinder.computeBestBandK(sizechunks, epsilon, delta, quantiles, returnSamplingRate);
                    approxFinder = new ApproximateQuantileFinder((int) result[0], (int) result[1]);
                    System.out.println(&quot;epsilon=&quot;+epsilon);                    
                </comment>
                <comment line="295">
                    System.out.println(&quot;free=&quot;+Runtime.getRuntime().freeMemory());                    
                </comment>
                <comment line="295">
                    System.out.println(&quot;total=&quot;+Runtime.getRuntime().totalMemory());                    
                </comment>
                <comment line="295">
                    approxFinder.close();                    
                </comment>
                <comment line="295">
                    System.out.println(&quot;MaxLevel of full buffers=&quot;+maxLevelOfFullBuffers(approxFinder.bufferSet));                    
                </comment>
                <comment line="295">
                    System.out.println(&quot;total buffers filled=&quot;+ approxFinder.totalBuffersFilled);                    
                </comment>
                <comment line="295">
                    System.out.println(&quot;free=&quot;+Runtime.getRuntime().freeMemory());                    
                </comment>
                <comment line="295">
                    System.out.println(&quot;total=&quot;+Runtime.getRuntime().totalMemory());                    
                </comment>
                <declaration name="size" type="int" line="295"/>
                <declaration name="b" type="int" line="296"/>
                <declaration name="k" type="int" line="297"/>
                <declaration name="chunks" type="int" line="299"/>
                <declaration name="computeExactQuantilesAlso" type="boolean" line="300"/>
                <declaration name="doShuffle" type="boolean" line="301"/>
                <declaration name="epsilon" type="double" line="302"/>
                <declaration name="delta" type="double" line="303"/>
                <declaration name="quantiles" type="int" line="304"/>
                <declaration name="max_N" type="long" line="305"/>
                <declaration name="phis" type="double[]" line="312"/>
                <declaration name="timer" type="Timer" line="315"/>
                <declaration name="timer2" type="Timer" line="316"/>
                <declaration name="approxFinder" type="DoubleQuantileFinder" line="317"/>
                <declaration name="exactFinder" type="DoubleQuantileFinder" line="333"/>
                <declaration name="list" type="DoubleArrayList" line="336"/>
                <scope line="338">
                    <declaration name="d" type="int" line="340"/>
                    <scope line="342"/>
                    <scope line="350">
                        <declaration name="timer3" type="Timer" line="351"/>
                    </scope>
                    <scope line="364"/>
                </scope>
                <declaration name="approxQuantiles" type="DoubleArrayList" line="378"/>
                <scope line="392">
                    <declaration name="exactQuantiles" type="DoubleArrayList" line="398"/>
                    <declaration name="observedEpsilons" type="DoubleArrayList" line="419"/>
                    <declaration name="element" type="double" line="422"/>
                </scope>
            </method>
            <javadoc line="432">
                Not yet commented.                
            </javadoc>
            <method name="testRank" type="void" line="435">
                <comment line="436">
                    System.out.println(rankOfWithin(5.0f, list));                    
                </comment>
                <declaration name="list" type="DoubleArrayList" line="436"/>
            </method>
        </class>
    </source>