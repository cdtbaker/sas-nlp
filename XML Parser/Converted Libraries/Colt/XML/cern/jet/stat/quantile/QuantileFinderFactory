<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.stat.quantile">
        <import package="cern.jet.math.Arithmetic"/>
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="QuantileFinderFactory" line="14">
            <extends class="Object"/>
            <javadoc line="14">
                Factory constructing exact and approximate quantile finders for both known and unknown &lt;tt&gt;N&lt;/tt&gt;.
                  Also see {@link hep.aida.bin.QuantileBin1D}, demonstrating how this package can be used.
                  The approx. algorithms compute approximate quantiles of large data sequences in a single pass.
                  The approximation guarantees are explicit, and apply for arbitrary value distributions and arrival distributions of the data sequence.
                  The main memory requirements are smaller than for any other known technique by an order of magnitude.
                  &lt;p&gt;The approx. algorithms are primarily intended to help applications scale.
                  When faced with a large data sequences, traditional methods either need very large memories or time consuming disk based sorting.
                  In constrast, the approx. algorithms can deal with &gt; 10^10 values without disk based sorting.
                  &lt;p&gt;All classes can be seen from various angles, for example as
                  &lt;dt&gt;1. Algorithm to compute quantiles.
                  &lt;dt&gt;2. 1-dim-equi-depth histogram.
                  &lt;dt&gt;3. 1-dim-histogram arbitrarily rebinnable in real-time.
                  &lt;dt&gt;4. A space efficient MultiSet data structure using lossy compression.
                  &lt;dt&gt;5. A space efficient value preserving bin of a 2-dim or d-dim histogram.
                  &lt;dt&gt;(All subject to an accuracy specified by the user.)
                  &lt;p&gt;Use methods &lt;tt&gt;newXXX(...)&lt;/tt&gt; to get new instances of one of the following quantile finders.
                  &lt;p&gt;&lt;b&gt;1. Exact quantile finding algorithm for known and unknown &lt;tt&gt;N&lt;/tt&gt; requiring large main memory.&lt;/b&gt;&lt;/p&gt;
                  The folkore algorithm: Keeps all elements in main memory, sorts the list, then picks the quantiles.
                  &lt;p&gt;&lt;p&gt;&lt;b&gt;2. Approximate quantile finding algorithm for known &lt;tt&gt;N&lt;/tt&gt; requiring only one pass and little main memory.&lt;/b&gt;&lt;/p&gt;
                  &lt;p&gt;Needs as input the following parameters:&lt;p&gt;
                  &lt;dt&gt;1. &lt;tt&gt;N&lt;/tt&gt; - the number of values of the data sequence over which quantiles are to be determined.
                  &lt;dt&gt;2. &lt;tt&gt;quantiles&lt;/tt&gt; - the number of quantiles to be computed. If unknown in advance, set this number large, e.g. &lt;tt&gt;quantiles &amp;gt;= 10000&lt;/tt&gt;.
                  &lt;dt&gt;3. &lt;tt&gt;epsilon&lt;/tt&gt; - the allowed approximation error on quantiles. The approximation guarantee of this algorithm is explicit.
                  &lt;p&gt;It is also possible to couple the approximation algorithm with random sampling to further reduce memory requirements. 
                  With sampling, the approximation guarantees are explicit but probabilistic, i.e. they apply with respect to a (user controlled) confidence parameter &quot;delta&quot;.
                  &lt;dt&gt;4. &lt;tt&gt;delta&lt;/tt&gt; - the probability allowed that the approximation error fails to be smaller than epsilon. Set &lt;tt&gt;delta&lt;/tt&gt; to zero for explicit non probabilistic guarantees.
                  &lt;p&gt;After Gurmeet Singh Manku, Sridhar Rajagopalan and Bruce G. Lindsay, 
                  Approximate Medians and other Quantiles in One Pass and with Limited Memory,
                  Proc. of the 1998 ACM SIGMOD Int. Conf. on Management of Data,
                  Paper available &lt;A HREF=&quot;http://www-cad.eecs.berkeley.edu/~manku/papers/quantiles.ps.gz&quot;&gt; here&lt;/A&gt;.
                  &lt;p&gt;&lt;p&gt;&lt;b&gt;3. Approximate quantile finding algorithm for unknown &lt;tt&gt;N&lt;/tt&gt; requiring only one pass and little main memory.&lt;/b&gt;&lt;/p&gt;
                  This algorithm requires at most two times the memory of a corresponding approx. quantile finder knowing &lt;tt&gt;N&lt;/tt&gt;.
                  &lt;p&gt;Needs as input the following parameters:&lt;p&gt;
                  &lt;dt&gt;2. &lt;tt&gt;quantiles&lt;/tt&gt; - the number of quantiles to be computed. If unknown in advance, set this number large, e.g. &lt;tt&gt;quantiles &amp;gt;= 1000&lt;/tt&gt;.
                  &lt;dt&gt;2. &lt;tt&gt;epsilon&lt;/tt&gt; - the allowed approximation error on quantiles. The approximation guarantee of this algorithm is explicit.
                  &lt;p&gt;It is also possible to couple the approximation algorithm with random sampling to further reduce memory requirements. 
                  With sampling, the approximation guarantees are explicit but probabilistic, i.e. they apply with respect to a (user controlled) confidence parameter &quot;delta&quot;.
                  &lt;dt&gt;3. &lt;tt&gt;delta&lt;/tt&gt; - the probability allowed that the approximation error fails to be smaller than epsilon. Set &lt;tt&gt;delta&lt;/tt&gt; to zero for explicit non probabilistic guarantees.
                  &lt;p&gt;After Gurmeet Singh Manku, Sridhar Rajagopalan and Bruce G. Lindsay,
                  Random Sampling Techniques for Space Efficient Online Computation of Order Statistics of Large Datasets.
                  Proc. of the 1999 ACM SIGMOD Int. Conf. on Management of Data,
                  Paper available &lt;A HREF=&quot;http://www-cad.eecs.berkeley.edu/~manku/papers/unknown.ps.gz&quot;&gt; here&lt;/A&gt;.
                  &lt;p&gt;&lt;b&gt;Example usage:&lt;/b&gt;
                  &lt;pre&gt;
                  _TODO_
                  &lt;/pre&gt;&lt;p&gt;                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
                <@see>
                    e KnownDoubleQuantileEstimator                    
                </@see>
                <@see>
                    e UnknownDoubleQuantileEstimator                    
                </@see>
            </javadoc>
            <javadoc line="92">
                Make this class non instantiable. Let still allow others to inherit.                
            </javadoc>
            <method name="QuantileFinderFactory" type="constructor" line="95"/>
            <javadoc line="97">
                Computes the number of buffers and number of values per buffer such that
                  quantiles can be determined with an approximation error no more than epsilon with a certain probability.
                  Assumes that quantiles are to be computed over N values.
                  The required sampling rate is computed and stored in the first element of the provided &lt;tt&gt;returnSamplingRate&lt;/tt&gt; array, which, therefore must be at least of length 1.                
                <@param>
                    m N the number of values over which quantiles shall be computed (e.g <tt>10^6</tt>).                    
                </@param>
                <@param>
                    m epsilon the approximation error which is guaranteed not to be exceeded (e.g. <tt>0.001</tt>) (<tt>0 &lt;= epsilon &lt;= 1</tt>). To get exact result, set <tt>epsilon=0.0</tt>;                    
                </@param>
                <@param>
                    m delta the probability that the approximation error is more than than epsilon (e.g. <tt>0.0001</tt>) (<tt>0 &lt;= delta &lt;= 1</tt>). To avoid probabilistic answers, set <tt>delta=0.0</tt>.                    
                </@param>
                <@param>
                    m quantiles the number of quantiles to be computed (e.g. <tt>100</tt>) (<tt>quantiles &gt;= 1</tt>). If unknown in advance, set this number large, e.g. <tt>quantiles &gt;= 10000</tt>.                    
                </@param>
                <@param>
                    m samplingRate output parameter, a <tt>double[1]</tt> where the sampling rate is to be filled in.                    
                </@param>
                <@return>
                    n <tt>long[2]</tt> - <tt>long[0]</tt>=the number of buffers, <tt>long[1]</tt>=the number of elements per buffer, <tt>returnSamplingRate[0]</tt>=the required sampling rate.                    
                </@return>
            </javadoc>
            <method name="known_N_compute_B_and_K" type="long[]" line="111">
                <params>
                    <param name="N" type="long"/>
                    <param name="epsilon" type="double"/>
                    <param name="delta" type="double"/>
                    <param name="quantiles" type="int"/>
                    <param name="returnSamplingRate" type="double[]"/>
                </params>
                <scope line="113">
                    <declaration name="result" type="long[]" line="115"/>
                </scope>
                <scope line="120">
                    <declaration name="result" type="long[]" line="122"/>
                </scope>
                <scope line="128"/>
            </method>
            <javadoc line="133">
                Computes the number of buffers and number of values per buffer such that
                  quantiles can be determined with a &lt;b&gt;guaranteed&lt;/b&gt; approximation error no more than epsilon.
                  Assumes that quantiles are to be computed over N values.                
                <@return>
                    n <tt>long[2]</tt> - <tt>long[0]</tt>=the number of buffers, <tt>long[1]</tt>=the number of elements per buffer.                    
                </@return>
                <@param>
                    m N the anticipated number of values over which quantiles shall be determined.                    
                </@param>
                <@param>
                    m epsilon the approximation error which is guaranteed not to be exceeded (e.g. <tt>0.001</tt>) (<tt>0 &lt;= epsilon &lt;= 1</tt>). To get exact result, set <tt>epsilon=0.0</tt>;                    
                </@param>
            </javadoc>
            <method name="known_N_compute_B_and_K_quick" type="long[]" line="141">
                <params>
                    <param name="N" type="long"/>
                    <param name="epsilon" type="double"/>
                </params>
                <comment line="142">
                    for each b, determine maximum height, i.e. the height for which x&lt;=0 and x is a maximum                    
                </comment>
                <comment line="142">
                    with x = binomial(b+h-2, h-1) - binomial(b+h-3, h-3) + binomial(b+h-3, h-2) - N * epsilon * 2.0                    
                </comment>
                <comment line="142">
                    //end for                    
                </comment>
                <comment line="142">
                    for each b, determine the smallest k satisfying the constraints, i.e.                    
                </comment>
                <comment line="142">
                    for each b, determine kMin, with kMin = N/binomial(b+hMax-2,hMax-1)                    
                </comment>
                <comment line="142">
                    from all b&apos;s, determine b that minimizes b*kMin                    
                </comment>
                <declaration name="maxBuffers" type="int" line="142"/>
                <declaration name="maxHeight" type="int" line="143"/>
                <declaration name="N_double" type="double" line="144"/>
                <declaration name="c" type="double" line="145"/>
                <declaration name="heightMaximums" type="int[]" line="146"/>
                <scope line="150">
                    <declaration name="h" type="int" line="151"/>
                    <scope line="158"/>
                    <scope line="165"/>
                    <declaration name="hMax" type="int" line="169"/>
                    <scope line="174"/>
                    <scope line="177"/>
                </scope>
                <declaration name="kMinimums" type="long[]" line="187"/>
                <scope line="188">
                    <declaration name="h" type="int" line="189"/>
                    <declaration name="kMin" type="long" line="190"/>
                    <scope line="191">
                        <declaration name="value" type="double" line="192"/>
                        <declaration name="tmpK" type="long" line="193"/>
                        <scope line="194"/>
                    </scope>
                </scope>
                <declaration name="multMin" type="long" line="202"/>
                <declaration name="minB" type="int" line="203"/>
                <scope line="204">
                    <scope line="205">
                        <declaration name="mult" type="long" line="206"/>
                        <scope line="207"/>
                    </scope>
                </scope>
                <declaration name="b" type="long" line="214"/>
                <scope line="215"/>
                <scope line="219"/>
                <declaration name="result" type="long[]" line="224"/>
            </method>
            <javadoc line="229">
                Computes the number of buffers and number of values per buffer such that
                  quantiles can be determined with an approximation error no more than epsilon with a certain probability.
                  Assumes that quantiles are to be computed over N values.
                  The required sampling rate is computed and stored in the first element of the provided &lt;tt&gt;returnSamplingRate&lt;/tt&gt; array, which, therefore must be at least of length 1.                
                <@param>
                    m N the anticipated number of values over which quantiles shall be computed (e.g 10^6).                    
                </@param>
                <@param>
                    m epsilon the approximation error which is guaranteed not to be exceeded (e.g. <tt>0.001</tt>) (<tt>0 &lt;= epsilon &lt;= 1</tt>). To get exact result, set <tt>epsilon=0.0</tt>;                    
                </@param>
                <@param>
                    m delta the probability that the approximation error is more than than epsilon (e.g. <tt>0.0001</tt>) (<tt>0 &lt;= delta &lt;= 1</tt>). To avoid probabilistic answers, set <tt>delta=0.0</tt>.                    
                </@param>
                <@param>
                    m quantiles the number of quantiles to be computed (e.g. <tt>100</tt>) (<tt>quantiles &gt;= 1</tt>). If unknown in advance, set this number large, e.g. <tt>quantiles &gt;= 10000</tt>.                    
                </@param>
                <@param>
                    m samplingRate a <tt>double[1]</tt> where the sampling rate is to be filled in.                    
                </@param>
                <@return>
                    n <tt>long[2]</tt> - <tt>long[0]</tt>=the number of buffers, <tt>long[1]</tt>=the number of elements per buffer, <tt>returnSamplingRate[0]</tt>=the required sampling rate.                    
                </@return>
            </javadoc>
            <method name="known_N_compute_B_and_K_slow" type="long[]" line="241">
                <params>
                    <param name="N" type="long"/>
                    <param name="epsilon" type="double"/>
                    <param name="delta" type="double"/>
                    <param name="quantiles" type="int"/>
                    <param name="returnSamplingRate" type="double[]"/>
                </params>
                <comment line="242">
                    One possibility is to use one buffer of size N                    
                </comment>
                <comment line="242">
                                        
                </comment>
                <comment line="242">
                    Otherwise, there are at least two buffers (b &gt;= 2)                    
                </comment>
                <comment line="242">
                    and the height of the tree is at least three (h &gt;= 3)                    
                </comment>
                <comment line="242">
                                        
                </comment>
                <comment line="242">
                    We restrict the search for b and h to MAX_BINOM, a large enough value for                    
                </comment>
                <comment line="242">
                    practical values of    epsilon &gt;= 0.001   and    delta &gt;= 0.00001                    
                </comment>
                <comment line="242">
                                        
                </comment>
                <declaration name="maxBuffers" type="int" line="242"/>
                <declaration name="maxHeight" type="int" line="243"/>
                <declaration name="N_double" type="double" line="244"/>
                <declaration name="ret_b" type="long" line="248"/>
                <declaration name="ret_k" type="long" line="249"/>
                <declaration name="sampling_rate" type="double" line="250"/>
                <declaration name="memory" type="long" line="251"/>
                <declaration name="logarithm" type="double" line="260"/>
                <declaration name="c" type="double" line="261"/>
                <scope line="263">
                    <declaration name="binomial" type="double" line="264"/>
                    <declaration name="tmp" type="long" line="265"/>
                    <scope line="268"/>
                    <scope line="274">
                        <declaration name="t" type="double" line="275"/>
                        <declaration name="u" type="double" line="276"/>
                        <declaration name="v" type="double" line="277"/>
                        <declaration name="w" type="double" line="278"/>
                        <declaration name="x" type="double" line="291"/>
                        <declaration name="k" type="long" line="292"/>
                        <scope line="293"/>
                    </scope>
                </scope>
                <declaration name="result" type="long[]" line="302"/>
            </method>
            <javadoc line="308">
                Returns a quantile finder that minimizes the amount of memory needed under the user provided constraints.
                  Many applications don&apos;t know in advance over how many elements quantiles are to be computed. 
                  However, some of them can give an upper limit, which will assist the factory in choosing quantile finders with minimal memory requirements.  
                  For example if you select values from a database and fill them into histograms, then you probably don&apos;t know how many values you will fill, but you probably do know that you will fill at most &lt;tt&gt;S&lt;/tt&gt; elements, the size of your database.                
                <@param>
                    m known_N specifies whether the number of elements over which quantiles are to be computed is known or not.                    
                </@param>
                <@param>
                    m N if <tt>known_N==true</tt>, the number of elements over which quantiles are to be computed.
                      if <tt>known_N==false</tt>, the upper limit on the number of elements over which quantiles are to be computed. 
                      If such an upper limit is a-priori unknown, then set <tt>N = Long.MAX_VALUE</tt>.                    
                </@param>
                <@param>
                    m epsilon the approximation error which is guaranteed not to be exceeded (e.g. <tt>0.001</tt>) (<tt>0 &lt;= epsilon &lt;= 1</tt>). To get exact result, set <tt>epsilon=0.0</tt>;                    
                </@param>
                <@param>
                    m delta the probability that the approximation error is more than than epsilon (e.g. 0.0001) (0 &lt;= delta &lt;= 1). To avoid probabilistic answers, set <tt>delta=0.0</tt>.                    
                </@param>
                <@param>
                    m quantiles the number of quantiles to be computed (e.g. <tt>100</tt>) (<tt>quantiles &gt;= 1</tt>). If unknown in advance, set this number large, e.g. <tt>quantiles &gt;= 10000</tt>.                    
                </@param>
                <@param>
                    m generator a uniform random number generator. Set this parameter to <tt>null</tt> to use a default generator.                    
                </@param>
                <@return>
                    n the quantile finder minimizing memory requirements under the given constraints.                    
                </@return>
            </javadoc>
            <method name="newDoubleQuantileFinder" type="DoubleQuantileFinder" line="325">
                <params>
                    <param name="known_N" type="boolean"/>
                    <param name="N" type="long"/>
                    <param name="epsilon" type="double"/>
                    <param name="delta" type="double"/>
                    <param name="quantiles" type="int"/>
                    <param name="generator" type="RandomEngine"/>
                </params>
                <comment line="326">
                    boolean known_N = true;                    
                </comment>
                <comment line="326">
                    if (N==Long.MAX_VALUE) known_N = false;                    
                </comment>
                <comment line="326">
                    check parameters.                    
                </comment>
                <comment line="326">
                    if they are illegal, keep quite and return an exact finder.                    
                </comment>
                <declaration name="finder" type="KnownDoubleQuantileEstimator" line="337"/>
                <scope line="338">
                    <declaration name="samplingRate" type="double[]" line="339"/>
                    <declaration name="resultKnown" type="long[]" line="340"/>
                    <declaration name="b" type="long" line="341"/>
                    <declaration name="k" type="long" line="342"/>
                </scope>
                <scope line="346">
                    <declaration name="resultUnknown" type="long[]" line="347"/>
                    <declaration name="b1" type="long" line="348"/>
                    <declaration name="k1" type="long" line="349"/>
                    <declaration name="h1" type="long" line="350"/>
                    <declaration name="preComputeEpsilon" type="double" line="351"/>
                    <scope line="357"/>
                    <declaration name="samplingRate" type="double[]" line="363"/>
                    <declaration name="resultKnown" type="long[]" line="368"/>
                    <declaration name="b2" type="long" line="370"/>
                    <declaration name="k2" type="long" line="371"/>
                    <scope line="373"/>
                </scope>
            </method>
            <javadoc line="383">
                Convenience method that computes phi&apos;s for equi-depth histograms.
                  This is simply a list of numbers with &lt;tt&gt;i / (double)quantiles&lt;/tt&gt; for &lt;tt&gt;i={1,2,...,quantiles-1}&lt;/tt&gt;.                
                <@return>
                    n the equi-depth phi's                    
                </@return>
            </javadoc>
            <method name="newEquiDepthPhis" type="cern.colt.list.DoubleArrayList" line="388">
                <params>
                    <param name="quantiles" type="int"/>
                </params>
                <declaration name="phis" type="cern.colt.list.DoubleArrayList" line="389"/>
            </method>
            <javadoc line="393">
                Computes the number of buffers and number of values per buffer such that
                  quantiles can be determined with an approximation error no more than epsilon with a certain probability.                
                <@param>
                    m epsilon the approximation error which is guaranteed not to be exceeded (e.g. <tt>0.001</tt>) (<tt>0 &lt;= epsilon &lt;= 1</tt>). To get exact results, set <tt>epsilon=0.0</tt>;                    
                </@param>
                <@param>
                    m delta the probability that the approximation error is more than than epsilon (e.g. <tt>0.0001</tt>) (<tt>0 &lt;= delta &lt;= 1</tt>). To get exact results, set <tt>delta=0.0</tt>.                    
                </@param>
                <@param>
                    m quantiles the number of quantiles to be computed (e.g. <tt>100</tt>) (<tt>quantiles &gt;= 1</tt>). If unknown in advance, set this number large, e.g. <tt>quantiles &gt;= 10000</tt>.                    
                </@param>
                <@return>
                    n <tt>long[4]</tt> - <tt>long[0]</tt>=the number of buffers, <tt>long[1]</tt>=the number of elements per buffer, <tt>long[2]</tt>=the tree height where sampling shall start, <tt>long[3]==1</tt> if precomputing is better, otherwise 0;                    
                </@return>
            </javadoc>
            <method name="unknown_N_compute_B_and_K" type="long[]" line="402">
                <params>
                    <param name="epsilon" type="double"/>
                    <param name="delta" type="double"/>
                    <param name="quantiles" type="int"/>
                </params>
                <comment line="403">
                    move stuff from _raw(..) here and delete _raw(...)                    
                </comment>
                <comment line="403">
                    long[] result_1 = unknown_N_compute_B_and_K_raw(epsilon,delta,quantiles);
                    long b1 = result_1[0];
                    long k1 = result_1[1];
                    
                    
                    int quantilesToPrecompute = (int) Doubles.ceiling(1.0  epsilon);
                    
                    if (quantiles&gt;quantilesToPrecompute) {
                     try if precomputing quantiles requires less memory.                    
                </comment>
            </method>
            <javadoc line="428">
                Computes the number of buffers and number of values per buffer such that
                  quantiles can be determined with an approximation error no more than epsilon with a certain probability.
                  &lt;b&gt;You never need to call this method.&lt;/b&gt; It is only for curious users wanting to gain some insight into the workings of the algorithms.                
                <@param>
                    m epsilon the approximation error which is guaranteed not to be exceeded (e.g. <tt>0.001</tt>) (<tt>0 &lt;= epsilon &lt;= 1</tt>). To get exact result, set <tt>epsilon=0.0</tt>;                    
                </@param>
                <@param>
                    m delta the probability that the approximation error is more than than epsilon (e.g. <tt>0.0001</tt>) (<tt>0 &lt;= delta &lt;= 1</tt>). To get exact results, set <tt>delta=0.0</tt>.                    
                </@param>
                <@param>
                    m quantiles the number of quantiles to be computed (e.g. <tt>100</tt>) (<tt>quantiles &gt;= 1</tt>). If unknown in advance, set this number large, e.g. <tt>quantiles &gt;= 10000</tt>.                    
                </@param>
                <@return>
                    n <tt>long[4]</tt> - <tt>long[0]</tt>=the number of buffers, <tt>long[1]</tt>=the number of elements per buffer, <tt>long[2]</tt>=the tree height where sampling shall start, <tt>long[3]==1</tt> if precomputing is better, otherwise 0;                    
                </@return>
            </javadoc>
            <method name="unknown_N_compute_B_and_K_raw" type="long[]" line="438">
                <params>
                    <param name="epsilon" type="double"/>
                    <param name="delta" type="double"/>
                    <param name="quantiles" type="int"/>
                </params>
                <comment line="439">
                    delta can be set to zero, i.e., all quantiles should be approximate with probability 1                    
                </comment>
                <comment line="439">
                    double logDelta =  Math.log(2.0/(quantiles*delta)) / (2.0*epsilon*epsilon);                    
                </comment>
                <comment line="439">
                    //end while                    
                </comment>
                <scope line="440">
                    <declaration name="result" type="long[]" line="441"/>
                </scope>
                <scope line="448">
                    <declaration name="result" type="long[]" line="450"/>
                </scope>
                <scope line="457">
                    <declaration name="result" type="long[]" line="459"/>
                </scope>
                <declaration name="max_b" type="int" line="467"/>
                <declaration name="max_h" type="int" line="468"/>
                <declaration name="max_H" type="int" line="469"/>
                <declaration name="max_Iterations" type="int" line="470"/>
                <declaration name="best_b" type="long" line="472"/>
                <declaration name="best_k" type="long" line="473"/>
                <declaration name="best_h" type="long" line="474"/>
                <declaration name="best_memory" type="long" line="475"/>
                <declaration name="pow" type="double" line="477"/>
                <declaration name="logDelta" type="double" line="478"/>
                <scope line="481">
                    <scope line="484">
                        <scope line="485">
                            <declaration name="Ld" type="double" line="486"/>
                            <declaration name="Ls" type="double" line="487"/>
                            <declaration name="c" type="double" line="492"/>
                            <declaration name="beta" type="double" line="496"/>
                            <declaration name="cc" type="double" line="497"/>
                            <declaration name="d" type="double" line="498"/>
                            <declaration name="f" type="double" line="508"/>
                            <declaration name="root" type="double" line="510"/>
                            <declaration name="alpha_one" type="double" line="511"/>
                            <declaration name="alpha_two" type="double" line="512"/>
                            <declaration name="alpha_one_OK" type="boolean" line="515"/>
                            <declaration name="alpha_two_OK" type="boolean" line="516"/>
                            <scope line="519">
                                <declaration name="alpha" type="double" line="520"/>
                                <scope line="521"/>
                                <scope line="525"/>
                                <declaration name="k" type="long" line="530"/>
                                <scope line="531">
                                    <declaration name="memory" type="long" line="532"/>
                                    <scope line="533"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="545"/>
                </scope>
                <declaration name="result" type="long[]" line="554"/>
                <scope line="556"/>
                <scope line="563"/>
            </method>
        </class>
    </source>