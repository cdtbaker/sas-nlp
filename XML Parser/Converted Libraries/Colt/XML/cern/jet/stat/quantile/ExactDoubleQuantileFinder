<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.stat.quantile">
        <import package="cern.colt.list.DoubleArrayList"/>
        <class name="ExactDoubleQuantileFinder" extends="cern.colt.PersistentObject" line="12">
            <comment line="13">
                class ExactDoubleQuantileFinder extends Object implements DoubleQuantileFinder {                
            </comment>
            <implements interface="DoubleQuantileFinder"/>
            <javadoc line="12">
                Exact quantile finding algorithm for known and unknown &lt;tt&gt;N&lt;/tt&gt; requiring large main memory; computes quantiles over a sequence of &lt;tt&gt;double&lt;/tt&gt; elements.
                 * The folkore algorithm: Keeps all elements in main memory, sorts the list, then picks the quantiles.                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="buffer" type="DoubleArrayList" line="21"/>
            <declaration name="isSorted" type="boolean" line="22"/>
            <javadoc line="23">
                Constructs an empty exact quantile finder.                
            </javadoc>
            <method name="ExactDoubleQuantileFinder" type="constructor" line="26"/>
            <javadoc line="30">
                Adds a value to the receiver.                
                <@param>
                    m value the value to add.                    
                </@param>
            </javadoc>
            <method name="add" type="void" line="34"/>
            <javadoc line="38">
                Adds all values of the specified list to the receiver.                
                <@param>
                    m values the list of which all values shall be added.                    
                </@param>
            </javadoc>
            <method name="addAllOf" type="void" line="42"/>
            <javadoc line="45">
                Adds the part of the specified list between indexes &lt;tt&gt;from&lt;/tt&gt; (inclusive) and &lt;tt&gt;to&lt;/tt&gt; (inclusive) to the receiver.                
                <@param>
                    m values the list of which elements shall be added.                    
                </@param>
                <@param>
                    m from the index of the first element to be added (inclusive).                    
                </@param>
                <@param>
                    m to the index of the last element to be added (inclusive).                    
                </@param>
            </javadoc>
            <method name="addAllOfFromTo" type="void" line="52"/>
            <javadoc line="56">
                Removes all elements from the receiver.  The receiver will
                 * be empty after this call returns, and its memory requirements will be close to zero.                
            </javadoc>
            <method name="clear" type="void" line="60"/>
            <javadoc line="65">
                Returns a deep copy of the receiver.                
                <@return>
                    n a deep copy of the receiver.                    
                </@return>
            </javadoc>
            <method name="clone" type="Object" line="70">
                <declaration name="copy" type="ExactDoubleQuantileFinder" line="71"/>
            </method>
            <javadoc line="75">
                Returns whether the specified element is contained in the receiver.                
            </javadoc>
            <method name="contains" type="boolean" line="78"/>
            <javadoc line="82">
                Applies a procedure to each element of the receiver, if any.
                 * Iterates over the receiver in no particular order.                
                <@param>
                    m procedure    the procedure to be applied. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.                    
                </@param>
                <@return>
                    n <tt>false</tt> if the procedure stopped before all elements where iterated over, <tt>true</tt> otherwise.                    
                </@return>
            </javadoc>
            <method name="forEach" type="boolean" line="88">
                <declaration name="theElements" type="double[]" line="89"/>
                <declaration name="theSize" type="int" line="90"/>
            </method>
            <javadoc line="95">
                Returns the number of elements currently needed to store all contained elements.
                 * This number usually differs from the results of method &lt;tt&gt;size()&lt;/tt&gt;, according to the underlying datastructure.                
            </javadoc>
            <method name="memory" type="long" line="99"/>
            <javadoc line="102">
                Returns how many percent of the elements contained in the receiver are &lt;tt&gt;&amp;lt;= element&lt;/tt&gt;.
                 * Does linear interpolation if the element is not contained but lies in between two contained elements.                
                <@param>
                    m the element to search for.                    
                </@param>
                <@return>
                    n the percentage <tt>p</tt> of elements <tt>&lt;= element</tt> (<tt>0.0 &lt;= p &lt;=1.0)</tt>.                    
                </@return>
            </javadoc>
            <method name="phi" type="double" line="109"/>
            <javadoc line="113">
                Computes the specified quantile elements over the values previously added.                
                <@param>
                    m phis the quantiles for which elements are to be computed. Each phi must be in the interval [0.0,1.0]. <tt>phis</tt> must be sorted ascending.                    
                </@param>
                <@return>
                    n the exact quantile elements.                    
                </@return>
            </javadoc>
            <method name="quantileElements" type="DoubleArrayList" line="118">
                <comment line="119">
                    int bufferSize = (int) this.size();
                    double[] quantileElements = new double[phis.size()];
                    for (int i=phis.size(); --i &gt;=0;) {                    
                </comment>
            </method>
            <javadoc line="131">
                Returns the number of elements currently contained in the receiver (identical to the number of values added so far).                
            </javadoc>
            <method name="size" type="long" line="134"/>
            <javadoc line="137">
                Sorts the receiver.                
            </javadoc>
            <method name="sort" type="void" line="140">
                <scope line="141"/>
            </method>
            <javadoc line="149">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="152">
                <declaration name="s" type="String" line="153"/>
            </method>
            <javadoc line="157">
                Returns the number of elements currently needed to store all contained elements.
                 * This number usually differs from the results of method &lt;tt&gt;size()&lt;/tt&gt;, according to the underlying datastructure.                
            </javadoc>
            <method name="totalMemory" type="long" line="161"/>
        </class>
    </source>