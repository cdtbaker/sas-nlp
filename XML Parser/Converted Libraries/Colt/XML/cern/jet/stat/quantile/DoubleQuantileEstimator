<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.stat.quantile">
        <import package="cern.colt.list.DoubleArrayList"/>
        <import package="cern.colt.list.ObjectArrayList"/>
        <class name="DoubleQuantileEstimator" extends="cern.colt.PersistentObject" line="13">
            <comment line="14">
                abstract class ApproximateDoubleQuantileFinder extends Object implements DoubleQuantileFinder {                
            </comment>
            <implements interface="DoubleQuantileFinder"/>
            <javadoc line="13">
                The abstract base class for approximate quantile finders computing quantiles over a sequence of &lt;tt&gt;double&lt;/tt&gt; elements.                
            </javadoc>
            <declaration name="bufferSet" type="DoubleBufferSet" line="18"/>
            <declaration name="currentBufferToFill" type="DoubleBuffer" line="19"/>
            <declaration name="totalElementsFilled" type="int" line="20"/>
            <javadoc line="21">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="DoubleQuantileEstimator" type="constructor" line="24"/>
            <javadoc line="25">
                Adds a value to the receiver.                
                <@param>
                    m value the value to add.                    
                </@param>
            </javadoc>
            <method name="add" type="void" line="29">
                <comment line="30">
                    System.out.println(&quot;adding &quot;+value);                    
                </comment>
                <scope line="35"/>
            </method>
            <javadoc line="43">
                Adds all values of the specified list to the receiver.                
                <@param>
                    m values the list of which all values shall be added.                    
                </@param>
            </javadoc>
            <method name="addAllOf" type="void" line="47"/>
            <javadoc line="50">
                Adds the part of the specified list between indexes &lt;tt&gt;from&lt;/tt&gt; (inclusive) and &lt;tt&gt;to&lt;/tt&gt; (inclusive) to the receiver.                
                <@param>
                    m values the list of which elements shall be added.                    
                </@param>
                <@param>
                    m from the index of the first element to be added (inclusive).                    
                </@param>
                <@param>
                    m to the index of the last element to be added (inclusive).                    
                </@param>
            </javadoc>
            <method name="addAllOfFromTo" type="void" line="57">
                <comment line="58">
                    the obvious version, but we can do quicker...                    
                </comment>
                <declaration name="valuesToAdd" type="double[]" line="65"/>
                <declaration name="k" type="int" line="66"/>
                <declaration name="bufferSize" type="int" line="67"/>
                <declaration name="bufferValues" type="double[]" line="68"/>
                <scope line="69"/>
                <scope line="74">
                    <scope line="75">
                        <scope line="76"/>
                        <scope line="86"/>
                    </scope>
                </scope>
                <scope line="92"/>
            </method>
            <javadoc line="98">
                Not yet commented.                
            </javadoc>
            <method name="buffersToCollapse" type="DoubleBuffer[]" line="101">
                <declaration name="minLevel" type="int" line="102"/>
            </method>
            <javadoc line="105">
                Removes all elements from the receiver.  The receiver will
                 * be empty after this call returns, and its memory requirements will be close to zero.                
            </javadoc>
            <method name="clear" type="void" line="109"/>
            <javadoc line="114">
                Returns a deep copy of the receiver.                
                <@return>
                    n a deep copy of the receiver.                    
                </@return>
            </javadoc>
            <method name="clone" type="Object" line="119">
                <declaration name="copy" type="DoubleQuantileEstimator" line="120"/>
                <scope line="121">
                    <scope line="123">
                        <declaration name="index" type="int" line="124"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="130">
                Not yet commented.                
            </javadoc>
            <method name="collapse" type="void" line="133">
                <declaration name="toCollapse" type="DoubleBuffer[]" line="134"/>
                <declaration name="outputBuffer" type="DoubleBuffer" line="135"/>
                <declaration name="minLevel" type="int" line="137"/>
            </method>
            <javadoc line="142">
                Returns whether the specified element is contained in the receiver.                
            </javadoc>
            <method name="contains" type="boolean" line="145"/>
            <javadoc line="148">
                Applies a procedure to each element of the receiver, if any.
                 * Iterates over the receiver in no particular order.                
                <@param>
                    m procedure    the procedure to be applied. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.                    
                </@param>
                <@return>
                    n <tt>false</tt> if the procedure stopped before all elements where iterated over, <tt>true</tt> otherwise.                    
                </@return>
            </javadoc>
            <method name="forEach" type="boolean" line="154"/>
            <javadoc line="157">
                Returns the number of elements currently needed to store all contained elements.
                 * This number usually differs from the results of method &lt;tt&gt;size()&lt;/tt&gt;, according to the underlying datastructure.                
            </javadoc>
            <method name="memory" type="long" line="161"/>
            <method name="newBuffer" type="void" line="164"/>
            <javadoc line="164">
                Not yet commented.                
            </javadoc>
            <javadoc line="168">
                Returns how many percent of the elements contained in the receiver are &lt;tt&gt;&amp;lt;= element&lt;/tt&gt;.
                 * Does linear interpolation if the element is not contained but lies in between two contained elements.                
                <@param>
                    m the element to search for.                    
                </@param>
                <@return>
                    n the percentage <tt>p</tt> of elements <tt>&lt;= element</tt> (<tt>0.0 &lt;= p &lt;=1.0)</tt>.                    
                </@return>
            </javadoc>
            <method name="phi" type="double" line="175"/>
            <method name="postCollapse" type="void" line="178"/>
            <javadoc line="178">
                Not yet commented.                
            </javadoc>
            <javadoc line="182">
                Default implementation does nothing.                
            </javadoc>
            <method name="preProcessPhis" type="DoubleArrayList" line="185"/>
            <javadoc line="188">
                Computes the specified quantile elements over the values previously added.                
                <@param>
                    m phis the quantiles for which elements are to be computed. Each phi must be in the interval [0.0,1.0]. <tt>phis</tt> must be sorted ascending.                    
                </@param>
                <@return>
                    n the approximate quantile elements.                    
                </@return>
            </javadoc>
            <method name="quantileElements" type="DoubleArrayList" line="193">
                <comment line="194">
                    check parameter
                    DoubleArrayList sortedPhiList = phis.copy();                    
                </comment>
                <comment line="194">
                    System.out.println(&quot;starting to augment missing values, if necessary...&quot;);                    
                </comment>
                <comment line="194">
                    System.out.println(&quot;triggerPositions=&quot;+cern.colt.Arrays.toString(triggerPositions));                    
                </comment>
                <comment line="194">
                    System.out.println(&quot;starting to determine quantiles...&quot;);                    
                </comment>
                <comment line="194">
                    System.out.println(bufferSet);                    
                </comment>
                <comment line="194">
                    do the main work: determine values at given positions in sorted sequence                    
                </comment>
                <declaration name="triggerPositions" type="long[]" line="207"/>
                <declaration name="totalSize" type="long" line="208"/>
                <scope line="209"/>
                <declaration name="fullBuffers" type="DoubleBuffer[]" line="217"/>
                <declaration name="quantileElements" type="double[]" line="218"/>
            </method>
            <method name="sampleNextElement" type="boolean" line="223"/>
            <javadoc line="223">
                Not yet commented.                
            </javadoc>
            <javadoc line="227">
                Initializes the receiver                
            </javadoc>
            <method name="setUp" type="void" line="230">
                <scope line="231"/>
            </method>
            <javadoc line="237">
                Returns the number of elements currently contained in the receiver (identical to the number of values added so far).                
            </javadoc>
            <method name="size" type="long" line="240"/>
            <javadoc line="243">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="246">
                <declaration name="s" type="String" line="247"/>
                <declaration name="b" type="int" line="249"/>
                <declaration name="k" type="int" line="250"/>
            </method>
            <javadoc line="253">
                Returns the number of elements currently needed to store all contained elements.
                 * This number usually differs from the results of method &lt;tt&gt;size()&lt;/tt&gt;, according to the underlying datastructure.                
            </javadoc>
            <method name="totalMemory" type="long" line="257"/>
        </class>
    </source>