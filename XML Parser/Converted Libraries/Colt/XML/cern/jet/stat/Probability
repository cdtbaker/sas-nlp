<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.stat">
        <import package="cern.jet.math.Polynomial"/>
        <class name="Probability" extends="cern.jet.math.Constants" line="12">
            <comment line="13">
                Approximation for interval z = sqrt(-2 log y ) between 2 and 8
                 i.e., y between exp(-2) = .135 and exp(-32) = 1.27e-14.                
            </comment>
            <comment line="13">
                Approximation for interval z = sqrt(-2 log y ) between 8 and 64
                 i.e., y between exp(-32) = 1.27e-14 and exp(-2048) = 3.67e-890.                
            </comment>
            <javadoc line="12">
                Custom tailored numerical integration of certain probability distributions.
                 * &lt;p&gt;
                 * &lt;b&gt;Implementation:&lt;/b&gt;
                 * &lt;dt&gt;
                 * Some code taken and adapted from the &lt;A HREF=&quot;http://www.sci.usq.edu.au/staff/leighb/graph/Top.html&quot;&gt;Java 2D Graph Package 2.4&lt;/A&gt;,
                 * which in turn is a port from the &lt;A HREF=&quot;http://people.ne.mediaone.net/moshier/index.html#Cephes&quot;&gt;Cephes 2.2&lt;/A&gt; Math Library (C).
                 * Most Cephes code (missing from the 2D Graph Package) directly ported.                
                <@author>
                    r peter.gedeck@pharma.Novartis.com                    
                </@author>
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 0.91, 08-Dec-99                    
                </@version>
            </javadoc>
            <declaration name="P0" type="double" line="26"/>
            <javadoc line="26">
                COEFFICIENTS FOR METHOD  normalInverse()                
            </javadoc>
            <declaration name="Q0" type="double" line="37"/>
            <declaration name="P1" type="double" line="53"/>
            <declaration name="Q1" type="double" line="64"/>
            <declaration name="P2" type="double" line="79"/>
            <declaration name="Q2" type="double" line="90"/>
            <javadoc line="102">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="Probability" type="constructor" line="105"/>
            <javadoc line="106">
                Returns the area from zero to &lt;tt&gt;x&lt;/tt&gt; under the beta density
                 * function.
                 * &lt;pre&gt;
                 * x
                 * -             -
                 * | (a+b)       | |  a-1      b-1
                 * P(x)  =  ----------     |   t    (1-t)    dt
                 * -     -     | |
                 * | (a) | (b)   -
                 * 0
                 * &lt;/pre&gt;
                 * This function is identical to the incomplete beta
                 * integral function &lt;tt&gt;Gamma.incompleteBeta(a, b, x)&lt;/tt&gt;.
                 * The complemented function is
                 * &lt;tt&gt;1 - P(1-x)  =  Gamma.incompleteBeta( b, a, x )&lt;/tt&gt;;                
            </javadoc>
            <method name="beta" type="double" line="126"/>
            <javadoc line="129">
                Returns the area under the right hand tail (from &lt;tt&gt;x&lt;/tt&gt; to
                 * infinity) of the beta density function.
                 * This function is identical to the incomplete beta
                 * integral function &lt;tt&gt;Gamma.incompleteBeta(b, a, x)&lt;/tt&gt;.                
            </javadoc>
            <method name="betaComplemented" type="double" line="136"/>
            <javadoc line="139">
                Returns the sum of the terms &lt;tt&gt;0&lt;/tt&gt; through &lt;tt&gt;k&lt;/tt&gt; of the Binomial
                 * probability density.
                 * &lt;pre&gt;
                 * k
                 * --  ( n )   j      n-j
                 * &gt;   (   )  p  (1-p)
                 * --  ( j )
                 * j=0
                 * &lt;/pre&gt;
                 * The terms are not summed directly; instead the incomplete
                 * beta integral is employed, according to the formula
                 * &lt;p&gt;
                 * &lt;tt&gt;y = binomial( k, n, p ) = Gamma.incompleteBeta( n-k, k+1, 1-p )&lt;/tt&gt;.
                 * &lt;p&gt;
                 * All arguments must be positive,                
                <@param>
                    m k end term.                    
                </@param>
                <@param>
                    m n the number of trials.                    
                </@param>
                <@param>
                    m p the probability of success (must be in <tt>(0.0,1.0)</tt>).                    
                </@param>
            </javadoc>
            <method name="binomial" type="double" line="159"/>
            <javadoc line="168">
                Returns the sum of the terms &lt;tt&gt;k+1&lt;/tt&gt; through &lt;tt&gt;n&lt;/tt&gt; of the Binomial
                 * probability density.
                 * &lt;pre&gt;
                 * n
                 * --  ( n )   j      n-j
                 * &gt;   (   )  p  (1-p)
                 * --  ( j )
                 * j=k+1
                 * &lt;/pre&gt;
                 * The terms are not summed directly; instead the incomplete
                 * beta integral is employed, according to the formula
                 * &lt;p&gt;
                 * &lt;tt&gt;y = binomialComplemented( k, n, p ) = Gamma.incompleteBeta( k+1, n-k, p )&lt;/tt&gt;.
                 * &lt;p&gt;
                 * All arguments must be positive,                
                <@param>
                    m k end term.                    
                </@param>
                <@param>
                    m n the number of trials.                    
                </@param>
                <@param>
                    m p the probability of success (must be in <tt>(0.0,1.0)</tt>).                    
                </@param>
            </javadoc>
            <method name="binomialComplemented" type="double" line="188"/>
            <javadoc line="197">
                Returns the area under the left hand tail (from 0 to &lt;tt&gt;x&lt;/tt&gt;)
                 * of the Chi square probability density function with
                 * &lt;tt&gt;v&lt;/tt&gt; degrees of freedom.
                 * &lt;pre&gt;
                 * inf.
                 * -
                 * 1          | |  v/2-1  -t/2
                 * P( x | v )   =   -----------     |   t      e     dt
                 * v/2  -       | |
                 * 2    | (v/2)   -
                 * x
                 * &lt;/pre&gt;
                 * where &lt;tt&gt;x&lt;/tt&gt; is the Chi-square variable.
                 * &lt;p&gt;
                 * The incomplete gamma integral is used, according to the
                 * formula
                 * &lt;p&gt;
                 * &lt;tt&gt;y = chiSquare( v, x ) = incompleteGamma( v/2.0, x/2.0 )&lt;/tt&gt;.
                 * &lt;p&gt;
                 * The arguments must both be positive.                
                <@param>
                    m v degrees of freedom.                    
                </@param>
                <@param>
                    m x integration end point.                    
                </@param>
            </javadoc>
            <method name="chiSquare" type="double" line="222"/>
            <javadoc line="226">
                Returns the area under the right hand tail (from &lt;tt&gt;x&lt;/tt&gt; to
                 * infinity) of the Chi square probability density function
                 * with &lt;tt&gt;v&lt;/tt&gt; degrees of freedom.
                 * &lt;pre&gt;
                 * inf.
                 * -
                 * 1          | |  v/2-1  -t/2
                 * P( x | v )   =   -----------     |   t      e     dt
                 * v/2  -       | |
                 * 2    | (v/2)   -
                 * x
                 * &lt;/pre&gt;
                 * where &lt;tt&gt;x&lt;/tt&gt; is the Chi-square variable.
                 * The incomplete gamma integral is used, according to the
                 * formula
                 * &lt;tt&gt;y = chiSquareComplemented( v, x ) = incompleteGammaComplement( v/2.0, x/2.0 )&lt;/tt&gt;.
                 * The arguments must both be positive.                
                <@param>
                    m v degrees of freedom.                    
                </@param>
            </javadoc>
            <method name="chiSquareComplemented" type="double" line="251"/>
            <javadoc line="255">
                Returns the error function of the normal distribution; formerly named &lt;tt&gt;erf&lt;/tt&gt;.
                 * The integral is
                 * &lt;pre&gt;
                 * x 
                 * -
                 * 2         | |          2
                 * erf(x)  =  --------     |    exp( - t  ) dt.
                 * sqrt(pi)   | |
                 * -
                 * 0
                 * &lt;/pre&gt;
                 * &lt;b&gt;Implementation:&lt;/b&gt;
                 * For &lt;tt&gt;0 &lt;= |x| &lt; 1, erf(x) = x * P4(x**2)/Q5(x**2)&lt;/tt&gt;; otherwise
                 * &lt;tt&gt;erf(x) = 1 - erfc(x)&lt;/tt&gt;.
                 * &lt;p&gt;
                 * Code adapted from the &lt;A HREF=&quot;http://www.sci.usq.edu.au/staff/leighb/graph/Top.html&quot;&gt;Java 2D Graph Package 2.4&lt;/A&gt;,
                 * which in turn is a port from the &lt;A HREF=&quot;http://people.ne.mediaone.net/moshier/index.html#Cephes&quot;&gt;Cephes 2.2&lt;/A&gt; Math Library (C).                
                <@param>
                    m a the argument to the function.                    
                </@param>
            </javadoc>
            <method name="errorFunction" type="double" line="276">
                <declaration name="y" type="double" line="277"/>
                <declaration name="T" type="double" line="278"/>
                <declaration name="U" type="double" line="285"/>
            </method>
            <javadoc line="299">
                Returns the complementary Error function of the normal distribution; formerly named &lt;tt&gt;erfc&lt;/tt&gt;.
                 * &lt;pre&gt;
                 * 1 - erf(x) =
                 * inf. 
                 * -
                 * 2         | |          2
                 * erfc(x)  =  --------     |    exp( - t  ) dt
                 * sqrt(pi)   | |
                 * -
                 * x
                 * &lt;/pre&gt;
                 * &lt;b&gt;Implementation:&lt;/b&gt;
                 * For small x, &lt;tt&gt;erfc(x) = 1 - erf(x)&lt;/tt&gt;; otherwise rational
                 * approximations are computed.
                 * &lt;p&gt;
                 * Code adapted from the &lt;A HREF=&quot;http://www.sci.usq.edu.au/staff/leighb/graph/Top.html&quot;&gt;Java 2D Graph Package 2.4&lt;/A&gt;,
                 * which in turn is a port from the &lt;A HREF=&quot;http://people.ne.mediaone.net/moshier/index.html#Cephes&quot;&gt;Cephes 2.2&lt;/A&gt; Math Library (C).                
                <@param>
                    m a the argument to the function.                    
                </@param>
            </javadoc>
            <method name="errorFunctionComplemented" type="double" line="321">
                <declaration name="x" type="double" line="322"/>
                <declaration name="P" type="double" line="324"/>
                <declaration name="Q" type="double" line="335"/>
                <declaration name="R" type="double" line="347"/>
                <declaration name="S" type="double" line="355"/>
                <scope line="372"/>
                <scope line="379"/>
                <scope line="382"/>
                <scope line="391"/>
            </method>
            <javadoc line="398">
                Returns the integral from zero to &lt;tt&gt;x&lt;/tt&gt; of the gamma probability
                 * density function.
                 * &lt;pre&gt;
                 * x
                 * b       -
                 * a       | |   b-1  -at
                 * y =  -----    |    t    e    dt
                 * -     | |
                 * | (b)   -
                 * 0
                 * &lt;/pre&gt;
                 * The incomplete gamma integral is used, according to the
                 * relation
                 * &lt;tt&gt;y = Gamma.incompleteGamma( b, a*x )&lt;/tt&gt;.                
                <@param>
                    m a the paramater a (alpha) of the gamma distribution.                    
                </@param>
                <@param>
                    m b the paramater b (beta, lambda) of the gamma distribution.                    
                </@param>
                <@param>
                    m x integration end point.                    
                </@param>
            </javadoc>
            <method name="gamma" type="double" line="419"/>
            <javadoc line="423">
                Returns the integral from &lt;tt&gt;x&lt;/tt&gt; to infinity of the gamma
                 * probability density function:
                 * &lt;pre&gt;
                 * inf.
                 * b       -
                 * a       | |   b-1  -at
                 * y =  -----    |    t    e    dt
                 * -     | |
                 * | (b)   -
                 * x
                 * &lt;/pre&gt;
                 * The incomplete gamma integral is used, according to the
                 * relation
                 * &lt;p&gt;
                 * y = Gamma.incompleteGammaComplement( b, a*x ).                
                <@param>
                    m a the paramater a (alpha) of the gamma distribution.                    
                </@param>
                <@param>
                    m b the paramater b (beta, lambda) of the gamma distribution.                    
                </@param>
                <@param>
                    m x integration end point.                    
                </@param>
            </javadoc>
            <method name="gammaComplemented" type="double" line="444"/>
            <javadoc line="448">
                Returns the sum of the terms &lt;tt&gt;0&lt;/tt&gt; through &lt;tt&gt;k&lt;/tt&gt; of the Negative Binomial Distribution.
                 * &lt;pre&gt;
                 * k
                 * --  ( n+j-1 )   n      j
                 * &gt;   (       )  p  (1-p)
                 * --  (   j   )
                 * j=0
                 * &lt;/pre&gt;
                 * In a sequence of Bernoulli trials, this is the probability
                 * that &lt;tt&gt;k&lt;/tt&gt; or fewer failures precede the &lt;tt&gt;n&lt;/tt&gt;-th success.
                 * &lt;p&gt;
                 * The terms are not computed individually; instead the incomplete
                 * beta integral is employed, according to the formula
                 * &lt;p&gt;
                 * &lt;tt&gt;y = negativeBinomial( k, n, p ) = Gamma.incompleteBeta( n, k+1, p )&lt;/tt&gt;.
                 * All arguments must be positive,                
                <@param>
                    m k end term.                    
                </@param>
                <@param>
                    m n the number of trials.                    
                </@param>
                <@param>
                    m p the probability of success (must be in <tt>(0.0,1.0)</tt>).                    
                </@param>
            </javadoc>
            <method name="negativeBinomial" type="double" line="470"/>
            <javadoc line="476">
                Returns the sum of the terms &lt;tt&gt;k+1&lt;/tt&gt; to infinity of the Negative
                 * Binomial distribution.
                 * &lt;pre&gt;
                 * inf
                 * --  ( n+j-1 )   n      j
                 * &gt;   (       )  p  (1-p)
                 * --  (   j   )
                 * j=k+1
                 * &lt;/pre&gt;
                 * The terms are not computed individually; instead the incomplete
                 * beta integral is employed, according to the formula
                 * &lt;p&gt;
                 * y = negativeBinomialComplemented( k, n, p ) = Gamma.incompleteBeta( k+1, n, 1-p ).
                 * All arguments must be positive,                
                <@param>
                    m k end term.                    
                </@param>
                <@param>
                    m n the number of trials.                    
                </@param>
                <@param>
                    m p the probability of success (must be in <tt>(0.0,1.0)</tt>).                    
                </@param>
            </javadoc>
            <method name="negativeBinomialComplemented" type="double" line="496"/>
            <javadoc line="502">
                Returns the area under the Normal (Gaussian) probability density
                 * function, integrated from minus infinity to &lt;tt&gt;x&lt;/tt&gt; (assumes mean is zero, variance is one).
                 * &lt;pre&gt;
                 * x
                 * -
                 * 1        | |          2
                 * normal(x)  = ---------    |    exp( - t /2 ) dt
                 * sqrt(2pi)  | |
                 * -
                 * -inf.
                 * =  ( 1 + erf(z) ) / 2
                 * =  erfc(z) / 2
                 * &lt;/pre&gt;
                 * where &lt;tt&gt;z = x/sqrt(2)&lt;/tt&gt;.
                 * Computation is via the functions &lt;tt&gt;errorFunction&lt;/tt&gt; and &lt;tt&gt;errorFunctionComplement&lt;/tt&gt;.                
            </javadoc>
            <method name="normal" type="double" line="520">
                <declaration name="x" type="double" line="521"/>
                <scope line="527"/>
            </method>
            <javadoc line="534">
                Returns the area under the Normal (Gaussian) probability density
                 * function, integrated from minus infinity to &lt;tt&gt;x&lt;/tt&gt;.
                 * &lt;pre&gt;
                 * x
                 * -
                 * 1        | |                 2
                 * normal(x)  = ---------    |    exp( - (t-mean) / 2v ) dt
                 * sqrt(2pi*v)| |
                 * -
                 * -inf.
                 * &lt;/pre&gt;
                 * where &lt;tt&gt;v = variance&lt;/tt&gt;.
                 * Computation is via the functions &lt;tt&gt;errorFunction&lt;/tt&gt;.                
                <@param>
                    m mean the mean of the normal distribution.                    
                </@param>
                <@param>
                    m variance the variance of the normal distribution.                    
                </@param>
                <@param>
                    m x the integration limit.                    
                </@param>
            </javadoc>
            <method name="normal" type="double" line="554"/>
            <javadoc line="560">
                Returns the value, &lt;tt&gt;x&lt;/tt&gt;, for which the area under the
                 * Normal (Gaussian) probability density function (integrated from
                 * minus infinity to &lt;tt&gt;x&lt;/tt&gt;) is equal to the argument &lt;tt&gt;y&lt;/tt&gt; (assumes mean is zero, variance is one); formerly named &lt;tt&gt;ndtri&lt;/tt&gt;.
                 * &lt;p&gt;
                 * For small arguments &lt;tt&gt;0 &lt; y &lt; exp(-2)&lt;/tt&gt;, the program computes
                 * &lt;tt&gt;z = sqrt( -2.0 * log(y) )&lt;/tt&gt;;  then the approximation is
                 * &lt;tt&gt;x = z - log(z)/z  - (1/z) P(1/z) / Q(1/z)&lt;/tt&gt;.
                 * There are two rational functions P/Q, one for &lt;tt&gt;0 &lt; y &lt; exp(-32)&lt;/tt&gt;
                 * and the other for &lt;tt&gt;y&lt;/tt&gt; up to &lt;tt&gt;exp(-2)&lt;/tt&gt;. 
                 * For larger arguments,
                 * &lt;tt&gt;w = y - 0.5&lt;/tt&gt;, and  &lt;tt&gt;x/sqrt(2pi) = w + w**3 R(w**2)/S(w**2))&lt;/tt&gt;.                
            </javadoc>
            <method name="normalInverse" type="double" line="574">
                <declaration name="x" type="double" line="575"/>
                <declaration name="code" type="int" line="576"/>
                <declaration name="s2pi" type="double" line="578"/>
                <scope line="584"/>
                <scope line="589"/>
            </method>
            <javadoc line="610">
                Returns the sum of the first &lt;tt&gt;k&lt;/tt&gt; terms of the Poisson distribution.
                 * &lt;pre&gt;
                 * k         j
                 * --   -m  m
                 * &gt;   e    --
                 * --       j!
                 * j=0
                 * &lt;/pre&gt;
                 * The terms are not summed directly; instead the incomplete
                 * gamma integral is employed, according to the relation
                 * &lt;p&gt;
                 * &lt;tt&gt;y = poisson( k, m ) = Gamma.incompleteGammaComplement( k+1, m )&lt;/tt&gt;.
                 * The arguments must both be positive.                
                <@param>
                    m k number of terms.                    
                </@param>
                <@param>
                    m mean the mean of the poisson distribution.                    
                </@param>
            </javadoc>
            <method name="poisson" type="double" line="629"/>
            <javadoc line="634">
                Returns the sum of the terms &lt;tt&gt;k+1&lt;/tt&gt; to &lt;tt&gt;Infinity&lt;/tt&gt; of the Poisson distribution.
                 * &lt;pre&gt;
                 * inf.       j
                 * --   -m  m
                 * &gt;   e    --
                 * --       j!
                 * j=k+1
                 * &lt;/pre&gt;
                 * The terms are not summed directly; instead the incomplete
                 * gamma integral is employed, according to the formula
                 * &lt;p&gt;
                 * &lt;tt&gt;y = poissonComplemented( k, m ) = Gamma.incompleteGamma( k+1, m )&lt;/tt&gt;.
                 * The arguments must both be positive.                
                <@param>
                    m k start term.                    
                </@param>
                <@param>
                    m mean the mean of the poisson distribution.                    
                </@param>
            </javadoc>
            <method name="poissonComplemented" type="double" line="653"/>
            <javadoc line="658">
                Returns the integral from minus infinity to &lt;tt&gt;t&lt;/tt&gt; of the Student-t 
                 * distribution with &lt;tt&gt;k &amp;gt; 0&lt;/tt&gt; degrees of freedom.
                 * &lt;pre&gt;
                 * t
                 * -
                 * | |
                 * -                      |         2   -(k+1)/2
                 * | ( (k+1)/2 )           |  (     x   )
                 * ----------------------        |  ( 1 + --- )        dx
                 * -               |  (      k  )
                 * sqrt( k pi ) | ( k/2 )        |
                 * | |
                 * -
                 * -inf.
                 * &lt;/pre&gt;
                 * Relation to incomplete beta integral:
                 * &lt;p&gt;
                 * &lt;tt&gt;1 - studentT(k,t) = 0.5 * Gamma.incompleteBeta( k/2, 1/2, z )&lt;/tt&gt;
                 * where &lt;tt&gt;z = k/(k + t**2)&lt;/tt&gt;.
                 * &lt;p&gt;
                 * Since the function is symmetric about &lt;tt&gt;t=0&lt;/tt&gt;, the area under the
                 * right tail of the density is found by calling the function
                 * with &lt;tt&gt;-t&lt;/tt&gt; instead of &lt;tt&gt;t&lt;/tt&gt;.                
                <@param>
                    m k degrees of freedom.                    
                </@param>
                <@param>
                    m t integration end point.                    
                </@param>
            </javadoc>
            <method name="studentT" type="double" line="686">
                <comment line="687">
                    (t &gt;= 0) cdf = 1.0 - cdf; // fixes bug reported by stefan.bentink@molgen.mpg.de                    
                </comment>
                <declaration name="cdf" type="double" line="690"/>
            </method>
            <javadoc line="696">
                Returns the value, &lt;tt&gt;t&lt;/tt&gt;, for which the area under the
                 * Student-t probability density function (integrated from
                 * minus infinity to &lt;tt&gt;t&lt;/tt&gt;) is equal to &lt;tt&gt;1-alpha/2&lt;/tt&gt;.
                 * The value returned corresponds to usual Student t-distribution lookup
                 * table for &lt;tt&gt;t&lt;sub&gt;alpha[size]&lt;/sub&gt;&lt;/tt&gt;.
                 * &lt;p&gt;
                 * The function uses the studentT function to determine the return
                 * value iteratively.                
                <@param>
                    m alpha probability                    
                </@param>
                <@param>
                    m size size of data set                    
                </@param>
            </javadoc>
            <method name="studentTInverse" type="double" line="709">
                <comment line="710">
                    uble cumProb = 1-alpha/2; // Cumulative probability                    
                </comment>
                <comment line="710">
                    mProb = 1-alpha/2; // Cumulative probability                    
                </comment>
                <comment line="710">
                    Return inverse of normal for large size                    
                </comment>
                <comment line="710">
                    Find a pair of x1,x2 that braket zero                    
                </comment>
                <comment line="710">
                    Find better approximation                    
                </comment>
                <comment line="710">
                    Pegasus-method                    
                </comment>
                <declaration name="cumProb" type="double" line="710"/>
                <declaration name="f1" type="double" line="711"/>
                <declaration name="x1" type="double" line="712"/>
                <declaration name="g" type="double" line="713"/>
                <scope line="719"/>
                <scope line="726">
                    <scope line="727"/>
                    <scope line="729"/>
                </scope>
                <scope line="737">
                    <scope line="744"/>
                    <scope line="749"/>
                    <scope line="752"/>
                </scope>
                <scope line="759"/>
                <scope line="761"/>
            </method>
        </class>
    </source>