<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.math.Arithmetic"/>
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="HyperGeometric" extends="AbstractDiscreteDistribution" line="13">
            <comment line="14">
                cached vars shared by hmdu(...) and hprs(...)                
            </comment>
            <comment line="14">
                cached vars for hmdu(...)                
            </comment>
            <comment line="14">
                cached vars for hprs(...)                
            </comment>
            <comment line="14">
                The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
            </comment>
            <javadoc line="13">
                HyperGeometric distribution; See the &lt;A HREF=&quot;http://library.advanced.org/10030/6atpdvah.htm&quot;&gt; math definition&lt;/A&gt;
                 * The hypergeometric distribution with parameters &lt;tt&gt;N&lt;/tt&gt;, &lt;tt&gt;n&lt;/tt&gt; and &lt;tt&gt;s&lt;/tt&gt; is the probability distribution of the random variable X, 
                 * whose value is the number of successes in a sample of &lt;tt&gt;n&lt;/tt&gt; items from a population of size &lt;tt&gt;N&lt;/tt&gt; that has &lt;tt&gt;s&lt;/tt&gt; &apos;success&apos; items and &lt;tt&gt;N - s&lt;/tt&gt; &apos;failure&apos; items.
                 * &lt;p&gt;            
                 * &lt;tt&gt;p(k) = C(s,k) * C(N-s,n-k) / C(N,n)&lt;/tt&gt; where &lt;tt&gt;C(a,b) = a! / (b! * (a-b)!)&lt;/tt&gt;.
                 * &lt;p&gt;
                 * valid for N &gt;= 2, s,n &lt;= N. 
                 * &lt;p&gt;
                 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                 * &lt;dt&gt;
                 * Static methods operate on a default uniform random number generator; they are synchronized.
                 * &lt;p&gt;
                 * &lt;b&gt;Implementation:&lt;/b&gt; High performance implementation.
                 * Patchwork Rejection/Inversion method.
                 * &lt;dt&gt;This is a port of &lt;tt&gt;hprsc.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                 * C-RAND&apos;s implementation, in turn, is based upon
                 * &lt;p&gt;
                 * H. Zechner (1994): Efficient sampling from continuous and discrete unimodal distributions,
                 * Doctoral Dissertation, 156 pp., Technical University Graz, Austria.                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="my_N" type="int" line="39"/>
            <declaration name="my_s" type="int" line="40"/>
            <declaration name="my_n" type="int" line="41"/>
            <declaration name="N_last" type="int" line="44"/>
            <declaration name="N_Mn" type="int" line="45"/>
            <declaration name="mp" type="int" line="48"/>
            <declaration name="Mp" type="double" line="49"/>
            <declaration name="k2" type="int" line="52"/>
            <declaration name="dl" type="double" line="53"/>
            <declaration name="shared" type="HyperGeometric" line="58"/>
            <javadoc line="59">
                Constructs a HyperGeometric distribution.                
            </javadoc>
            <method name="HyperGeometric" type="constructor" line="62"/>
            <method name="fc_lnpk" type="double" line="66"/>
            <javadoc line="69">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="hmdu" type="int" line="72">
                <declaration name="I" type="int" line="74"/>
                <declaration name="p" type="double" line="75"/>
                <scope line="77">
                    <scope line="87"/>
                    <scope line="90"/>
                </scope>
                <scope line="105">
                    <scope line="110"/>
                    <scope line="121"/>
                </scope>
            </method>
            <javadoc line="127">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="hprs" type="int" line="130">
                <comment line="131">
                    double Mp, np, p, nu, U, Y, W;        (X, Y) &lt;-&gt; (V, W)                    
                </comment>
                <declaration name="Dk" type="int" line="131"/>
                <declaration name="Mp" type="double" line="132"/>
                <scope line="134"/>
                <scope line="191">
                    <scope line="194">
                        <scope line="204"/>
                        <scope line="207">
                            <scope line="209"/>
                            <scope line="212"/>
                        </scope>
                    </scope>
                    <scope line="218">
                        <scope line="228"/>
                        <scope line="231">
                            <scope line="233"/>
                            <scope line="236"/>
                        </scope>
                    </scope>
                    <scope line="242">
                        <scope line="244">
                            <scope line="248"/>
                        </scope>
                        <scope line="252">
                            <scope line="256"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="270">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextInt" type="int" line="273"/>
            <javadoc line="276">
                Returns a random number from the distribution; bypasses the internal state.                
            </javadoc>
            <method name="nextInt" type="int" line="279"/>
            <javadoc line="282">
                Returns a random number from the distribution; bypasses the internal state.                
            </javadoc>
            <method name="nextInt" type="int" line="285">
                <comment line="286">
                    Hypergeometric Distribution - Patchwork RejectionInversion    
                                                                                    
                    
                                                                                    
                     The basic algorithms work for parameters 1 &lt;= n &lt;= M &lt;= N2.   
                     Otherwise parameters are re-defined in the set-up step and the 
                     random number K is adapted before delivering.                  
                     For l = m-max(0,n-N+M) &lt; 10  Inversion method hmdu is applied: 
                     The random numbers are generated via modal down-up search,     
                     starting at the mode m. The cumulative probabilities           
                     are avoided by using the technique of chop-down.               
                     For l &gt;= 10  the Patchwork Rejection method  hprs is employed: 
                     The area below the histogram function f(x) in its              
                     body is rearranged by certain point reflections. Within a      
                     large center interval variates are sampled efficiently by      
                     rejection from uniform hats. Rectangular immediate acceptance  
                     regions speed up the generation. The remaining tails are       
                     covered by exponential functions.                              
                                                                                    
                    
                                                                                    
                     FUNCTION :   - hprsc samples a random number from the          
                                    Hypergeometric distribution with parameters     
                                    N (number of red and black balls), M (number    
                                    of red balls) and n (number of trials)          
                                    valid for N &gt;= 2, M,n &lt;= N.                     
                     REFERENCE :  - H. Zechner (1994): Efficient sampling from      
                                    continuous and discrete unimodal distributions, 
                                    Doctoral Dissertation, 156 pp., Technical       
                                    University Graz, Austria.                       
                     SUBPROGRAMS: - flogfak(k)  ... log(k!) with long integer k     
                                  - drand(seed) ... (0,1)-Uniform generator with    
                                    unsigned long integer seed.                    
                                  - hmdu(seed,N,M,n) ... Hypergeometric generator   
                                    for l&lt;10                                        
                                  - hprs(seed,N,M,n) ... Hypergeometric generator   
                                    for l&gt;=10 with unsigned long integer seed,     
                                    long integer  N , M , n.                        
                                                                                    
                    
                    int Nhalf, n_le_Nhalf, M_le_Nhalf, K;
                    
                    Nhalf =  N  2;
                    n_le_Nhalf = (n &lt;= Nhalf)  ?  n  :  N - n;
                    M_le_Nhalf = (M &lt;= Nhalf)  ?  M  :  N - M;
                    
                    if ((nMN) &lt; 10) {
                    K = (n_le_Nhalf &lt;= M_le_Nhalf)
                    ?  hmdu(N, M_le_Nhalf, n_le_Nhalf, randomGenerator)
                    :  hmdu(N, n_le_Nhalf, M_le_Nhalf, randomGenerator);
                    }
                    else {
                    K = (n_le_Nhalf &lt;= M_le_Nhalf)
                    ?  hprs(N, M_le_Nhalf, n_le_Nhalf, randomGenerator)
                    :  hprs(N, n_le_Nhalf, M_le_Nhalf, randomGenerator);
                    }
                    
                    if (n &lt;= Nhalf) {
                    return (M &lt;= Nhalf)  ?      K  :  n - K;
                    }                    
                </comment>
                <declaration name="Nhalf" type="int" line="328"/>
                <scope line="334"/>
                <scope line="339"/>
                <scope line="345"/>
                <scope line="348"/>
            </method>
            <javadoc line="352">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="355"/>
            <javadoc line="359">
                Sets the parameters.                
            </javadoc>
            <method name="setState" type="void" line="362"/>
            <javadoc line="367">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="staticNextInt" type="double" line="370">
                <scope line="371"/>
            </method>
            <javadoc line="375">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="378"/>
            <javadoc line="381">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <@param>
                    m randomGenerator the new uniform random number generator to be shared.                    
                </@param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="385">
                <scope line="386"/>
            </method>
        </class>
    </source>