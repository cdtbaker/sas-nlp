<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="VonMises" extends="AbstractContinousDistribution" line="12">
            <comment line="13">
                cached vars for method nextDouble(a) (for performance only)                
            </comment>
            <comment line="13">
                The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
            </comment>
            <javadoc line="12">
                Von Mises distribution.
                 * &lt;p&gt;
                 * Valid parameter ranges: &lt;tt&gt;k &amp;gt; 0&lt;/tt&gt;.
                 * &lt;p&gt;
                 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                 * &lt;dt&gt;
                 * Static methods operate on a default uniform random number generator; they are synchronized.
                 * &lt;p&gt;
                 * &lt;b&gt;Implementation:&lt;/b&gt; 
                 * &lt;dt&gt;
                 * Method: Acceptance Rejection.
                 * &lt;dt&gt;
                 * This is a port of &lt;tt&gt;mwc.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                 * C-RAND&apos;s implementation, in turn, is based upon
                 * &lt;p&gt;
                 * D.J. Best, N.I. Fisher (1979): Efficient simulation of the von Mises distribution, Appl. Statist. 28, 152-157.                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="my_k" type="double" line="34"/>
            <declaration name="k_set" type="double" line="37"/>
            <declaration name="tau" type="double" line="38"/>
            <declaration name="shared" type="VonMises" line="41"/>
            <javadoc line="42">
                Constructs a Von Mises distribution.
                 * Example: k=1.0.                
                <@throws>
                    s IllegalArgumentException if <tt>k &lt;= 0.0</tt>.                    
                </@throws>
            </javadoc>
            <method name="VonMises" type="constructor" line="47"/>
            <javadoc line="51">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextDouble" type="double" line="54"/>
            <javadoc line="57">
                Returns a random number from the distribution; bypasses the internal state.                
                <@throws>
                    s IllegalArgumentException if <tt>k &lt;= 0.0</tt>.                    
                </@throws>
            </javadoc>
            <method name="nextDouble" type="double" line="61">
                <comment line="62">
                    Von Mises Distribution - Acceptance Rejection          
                                                                                    
                    
                                                                                    
                     FUNCTION :  - mwc samples a random number from the von Mises   
                                   distribution ( -Pi &lt;= x &lt;= Pi) with parameter    
                                   k &gt; 0  via  rejection from the wrapped Cauchy    
                                   distibution.                                     
                     REFERENCE:  - D.J. Best, N.I. Fisher (1979): Efficient         
                                   simulation of the von Mises distribution,        
                                   Appl. Statist. 28, 152-157.                      
                     SUBPROGRAM: - drand(seed) ... (0,1)-Uniform generator with     
                                   unsigned long integer seed.                     
                                                                                    
                     Implemented by F. Niederl, August 1992                         
                    
                    double u,v,w,c,z;
                    
                    if (k&lt;=0.0) throw new IllegalArgumentException();
                    
                    if (k_set!=k) {                                                SET-UP
                    tau = 1.0 + Math.sqrt(1.0 + 4.0kk);
                    rho = (tau-Math.sqrt(2.0tau))  (2.0k);
                    r = (1.0+rhorho)  (2.0rho);
                    k_set = k;                    
                </comment>
                <comment line="62">
                    GENERATOR                    
                </comment>
                <comment line="62">
                    while ((c*(2.0-c) &lt; v) &amp;&amp; (Math.log(c/v)+1.0 &lt; c));         // Acceptance/Rejection                    
                </comment>
                <comment line="62">
                    turn (randomGenerator.raw() &gt; 0.5)? Math.acos(w): -Math.acos(w);        // Random sign //                    
                </comment>
                <comment line="62">
                    0 &lt;= x &lt;= Pi : -Pi &lt;= x &lt;= 0 //                    
                </comment>
                <declaration name="u" type="double" line="80"/>
                <scope line="84"/>
                <scope line="92"/>
            </method>
            <javadoc line="103">
                Sets the distribution parameter.                
                <@throws>
                    s IllegalArgumentException if <tt>k &lt;= 0.0</tt>.                    
                </@throws>
            </javadoc>
            <method name="setState" type="void" line="107"/>
            <javadoc line="111">
                Returns a random number from the distribution.                
                <@throws>
                    s IllegalArgumentException if <tt>k &lt;= 0.0</tt>.                    
                </@throws>
            </javadoc>
            <method name="staticNextDouble" type="double" line="115">
                <scope line="116"/>
            </method>
            <javadoc line="120">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="123"/>
            <javadoc line="126">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <@param>
                    m randomGenerator the new uniform random number generator to be shared.                    
                </@param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="130">
                <scope line="131"/>
            </method>
        </class>
    </source>