<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random.engine">
        <import package="java.util.Date"/>
        <class name="DRand" extends="RandomEngine" line="12">
            <javadoc line="12">
                Quick medium quality uniform pseudo-random number generator.
                 * Produces uniformly distributed &lt;tt&gt;int&lt;/tt&gt;&apos;s and &lt;tt&gt;long&lt;/tt&gt;&apos;s in the closed intervals &lt;tt&gt;[Integer.MIN_VALUE,Integer.MAX_VALUE]&lt;/tt&gt; and &lt;tt&gt;[Long.MIN_VALUE,Long.MAX_VALUE]&lt;/tt&gt;, respectively, 
                 * as well as &lt;tt&gt;float&lt;/tt&gt;&apos;s and &lt;tt&gt;double&lt;/tt&gt;&apos;s in the open unit intervals &lt;tt&gt;(0.0f,1.0f)&lt;/tt&gt; and &lt;tt&gt;(0.0,1.0)&lt;/tt&gt;, respectively.
                 * &lt;p&gt;
                 * The seed can be any integer satisfying &lt;tt&gt;0 &amp;lt; 4*seed+1 &amp;lt; 2&lt;sup&gt;32&lt;/sup&gt;&lt;/tt&gt;.
                 * In other words, there must hold &lt;tt&gt;seed &amp;gt;= 0 &amp;&amp; seed &amp;lt; 1073741823&lt;/tt&gt;.
                 * &lt;p&gt;
                 * &lt;b&gt;Quality:&lt;/b&gt; This generator follows the multiplicative congruential method of the form                    
                 * &lt;dt&gt;
                 * &lt;tt&gt;z(i+1) = a * z(i) (mod m)&lt;/tt&gt; with
                 * &lt;tt&gt;a=663608941 (=0X278DDE6DL), m=2&lt;sup&gt;32&lt;/sup&gt;&lt;/tt&gt;.
                 * &lt;dt&gt;
                 * &lt;tt&gt;z(i)&lt;/tt&gt; assumes all different values &lt;tt&gt;0 &amp;lt; 4*seed+1 &amp;lt; m&lt;/tt&gt; during a full period of 2&lt;sup&gt;30&lt;/sup&gt;.
                 * &lt;p&gt;
                 * &lt;b&gt;Performance:&lt;/b&gt; TO_DO
                 * &lt;p&gt;
                 * &lt;b&gt;Implementation:&lt;/b&gt; TO_DO
                 * &lt;p&gt;
                 * Note that this implementation is &lt;b&gt;not synchronized&lt;/b&gt;.                                  
                 * &lt;p&gt;                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
                <@see>
                    e MersenneTwister                    
                </@see>
                <@see>
                    e java.util.Random                    
                </@see>
            </javadoc>
            <declaration name="current" type="int" line="42"/>
            <declaration name="DEFAULT_SEED" type="int" line="43"/>
            <javadoc line="44">
                Constructs and returns a random number generator with a default seed, which is a &lt;b&gt;constant&lt;/b&gt;.                
            </javadoc>
            <method name="DRand" type="constructor" line="47"/>
            <javadoc line="50">
                Constructs and returns a random number generator with the given seed.                
                <@param>
                    m seed should not be 0, in such a case <tt>DRand.DEFAULT_SEED</tt> is substituted.                    
                </@param>
            </javadoc>
            <method name="DRand" type="constructor" line="54"/>
            <javadoc line="57">
                Constructs and returns a random number generator seeded with the given date.                
                <@param>
                    m d typically <tt>new java.util.Date()</tt>                    
                </@param>
            </javadoc>
            <method name="DRand" type="constructor" line="62"/>
            <javadoc line="65">
                Returns a 32 bit uniformly distributed random number in the closed interval &lt;tt&gt;[Integer.MIN_VALUE,Integer.MAX_VALUE]&lt;/tt&gt; (including &lt;tt&gt;Integer.MIN_VALUE&lt;/tt&gt; and &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;).                
            </javadoc>
            <method name="nextInt" type="int" line="68">
                <comment line="69">
                    current = 0x278DDE6D;      z(i+1)=az(i) (mod 232)                    
                </comment>
                <comment line="69">
                    a == 0x278DDE6D == 663608941                    
                </comment>
            </method>
            <javadoc line="74">
                Sets the receiver&apos;s seed. 
                 * This method resets the receiver&apos;s entire internal state.
                 * The following condition must hold: &lt;tt&gt;seed &amp;gt;= 0 &amp;&amp; seed &amp;lt; (2&lt;sup&gt;32&lt;/sup&gt;-1) / 4&lt;/tt&gt;.                
                <@param>
                    m seed if the above condition does not hold, a modified seed that meets the condition is silently substituted.                    
                </@param>
            </javadoc>
            <method name="setSeed" type="void" line="80">
                <comment line="81">
                    t limit = (int)((Math.pow(2,32)-1) /4); // --&gt; 536870911                    
                </comment>
                <declaration name="limit" type="int" line="82"/>
            </method>
        </class>
    </source>