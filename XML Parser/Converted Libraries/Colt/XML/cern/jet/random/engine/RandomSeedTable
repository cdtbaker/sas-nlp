<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random.engine">
        <class name="RandomSeedTable" line="11">
            <comment line="12">
                a m*n matrix, just stored as one-dim array                
            </comment>
            <comment line="12">
                215 * 2 entries                
            </comment>
            <javadoc line="11">
                (Seemingly gigantic) table of good seeds for pseudo-random number generators.
                 * &lt;p&gt;
                 * &lt;b&gt;Implementation:&lt;/b&gt;
                 * &lt;dt&gt;This is a port of &lt;tt&gt;SeedTable.h&lt;/tt&gt; used in &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep&quot;&gt;CLHEP 1.4.0&lt;/A&gt; (C++).
                 * CLHEP&apos;s implementation, in turn, is part of &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/geant/geant4.html&quot;&gt;GEANT 4&lt;/A&gt;, a C++ simulation toolkit for High Energy Physics.
                 * Geant4, in turn,  took the table from the original FORTRAN77 implementation of the HEP CERN Library routine RECUSQ.
                 * Each sequence has a period of 10**9 numbers.                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="COLUMNS" type="int" line="24"/>
            <javadoc line="24">
                The number of columns of the matrix (currently COLUMNS = 2).                
            </javadoc>
            <declaration name="seeds" type="int[]" line="31"/>
            <javadoc line="247">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="RandomSeedTable" type="constructor" line="250"/>
            <javadoc line="253">
                Returns a deterministic seed from a (seemingly gigantic) matrix of predefined seeds.                
                <@param>
                    m row should (but need not) be in [0,Integer.MAX_VALUE].                    
                </@param>
                <@param>
                    m column shoould (but need not) be in [0,SeedTable.COLUMNS-1].                    
                </@param>
                <@return>
                    n the seed at the indicated matrix position.                    
                </@return>
            </javadoc>
            <method name="getSeedAtRowColumn" type="int" line="259">
                <comment line="260">
                    the table is limited; let&apos;s snap the unbounded input parameters to the table&apos;s actual size.                    
                </comment>
                <comment line="260">
                    &quot;randomize&quot; the seed (in some ways comparable to hash functions)                    
                </comment>
                <comment line="260">
                    t mask = (( cycle &amp; 0x000007ff ) &lt;&lt; 20 ); // cycle==0 --&gt; mask = 0                    
                </comment>
                <comment line="260">
                    ed = seed ^ mask;  // cycle==0 --&gt; seed stays unaffected                    
                </comment>
                <comment line="260">
                    now, each sequence has a period of 10**9 numbers.                    
                </comment>
                <declaration name="rows" type="int" line="261"/>
                <declaration name="theRow" type="int" line="263"/>
                <declaration name="theColumn" type="int" line="264"/>
                <declaration name="seed" type="int" line="266"/>
                <declaration name="cycle" type="int" line="269"/>
                <declaration name="mask" type="int" line="270"/>
            </method>
            <javadoc line="276">
                Not yet commented.                
                <@return>
                    n int                    
                </@return>
            </javadoc>
            <method name="rows" type="int" line="280"/>
        </class>
    </source>