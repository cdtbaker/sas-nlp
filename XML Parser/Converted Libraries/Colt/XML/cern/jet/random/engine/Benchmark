<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random.engine">
        <class name="Benchmark" line="11">
            <javadoc line="11">
                Benchmarks the performance of the currently provided uniform pseudo-random number generation engines.
                 * &lt;p&gt;
                 * All distributions are obtained by using a &lt;b&gt;uniform&lt;/b&gt; pseudo-random number generation engine.
                 * followed by a transformation to the desired distribution.
                 * Therefore, the performance of the uniform engines is crucial.
                 * &lt;p&gt;
                 * &lt;h2 align=center&gt;Comparison of uniform generation engines&lt;/h2&gt;
                 * &lt;center&gt;
                 * &lt;table border&gt;
                 * &lt;tr&gt; 
                 * &lt;td align=&quot;center&quot; width=&quot;40%&quot;&gt;Name&lt;/td&gt;
                 * &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;Period&lt;/td&gt;
                 * &lt;td align=&quot;center&quot; width=&quot;40%&quot;&gt;
                 * &lt;p&gt;Speed&lt;br&gt;
                 * [# million uniform random numbers generated/sec]&lt;br&gt;
                 * Pentium Pro 200 Mhz, JDK 1.2, NT&lt;/p&gt;
                 * &lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr&gt; 
                 * &lt;td align=&quot;center&quot; width=&quot;40%&quot;&gt; &lt;tt&gt;MersenneTwister&lt;/tt&gt;&lt;/td&gt;
                 * &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;2&lt;sup&gt;19937&lt;/sup&gt;-1 (=10&lt;sup&gt;6001&lt;/sup&gt;)&lt;/td&gt;
                 * &lt;td align=&quot;center&quot; width=&quot;40&quot;&gt;2.5&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr&gt; 
                 * &lt;td align=&quot;center&quot; width=&quot;40%&quot;&gt; &lt;tt&gt;Ranlux&lt;/tt&gt; (default luxury level 3) &lt;/td&gt;
                 * &lt;td align=&quot;center&quot; width=&quot;20%&quot;&gt;10&lt;sup&gt;171&lt;/sup&gt;&lt;/td&gt;
                 * &lt;td align=&quot;center&quot; width=&quot;40&quot;&gt;0.4&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr&gt; 
                 * &lt;td align=&quot;center&quot; width=&quot;40&quot;&gt; &lt;tt&gt;Ranmar&lt;/tt&gt;&lt;/td&gt;
                 * &lt;td align=&quot;center&quot; width=&quot;20&quot;&gt;10&lt;sup&gt;43&lt;/sup&gt;&lt;/td&gt;
                 * &lt;td align=&quot;center&quot; width=&quot;40%&quot;&gt;1.6&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr&gt; 
                 * &lt;td align=&quot;center&quot; width=&quot;40%&quot;&gt; &lt;tt&gt;Ranecu&lt;/tt&gt; &lt;/td&gt;
                 * &lt;td align=&quot;center&quot; width=&quot;20&quot;&gt;10&lt;sup&gt;18&lt;/sup&gt;&lt;/td&gt;
                 * &lt;td align=&quot;center&quot; width=&quot;40%&quot;&gt;1.5&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;tr&gt; 
                 * &lt;td align=&quot;center&quot;&gt; &lt;tt&gt;java.util.Random.nextFloat() &lt;/tt&gt;&lt;tt&gt; 
                 * &lt;/tt&gt;&lt;/td&gt;
                 * &lt;td align=&quot;center&quot;&gt;&lt;font size=+3&gt;?&lt;/font&gt;&lt;/td&gt;
                 * &lt;td align=&quot;center&quot;&gt;2.4&lt;/td&gt;
                 * &lt;/tr&gt;
                 * &lt;/table&gt;
                 * &lt;/center&gt;
                 * &lt;p&gt;
                 * &lt;b&gt;Note:&lt;/b&gt; Methods working on the default uniform random generator are &lt;b&gt;synchronized&lt;/b&gt; and therefore in current VM&apos;s &lt;b&gt;slow&lt;/b&gt; (as of June &apos;99).
                 * Methods taking as argument a uniform random generator are &lt;b&gt;not synchronized&lt;/b&gt; and therefore much &lt;b&gt;quicker&lt;/b&gt;.
                 * Thus, if you need a lot of random numbers, you should use the unsynchronized approach:
                 * &lt;p&gt;
                 * &lt;b&gt;Example usage:&lt;/b&gt;&lt;pre&gt;
                 * edu.cornell.lassp.houle.RngPack.RandomElement generator;
                 * generator = new cern.jet.random.engine.MersenneTwister(new java.util.Date());
                 * //generator = new edu.cornell.lassp.houle.RngPack.Ranecu(new java.util.Date());
                 * //generator = new edu.cornell.lassp.houle.RngPack.Ranmar(new java.util.Date());
                 * //generator = new edu.cornell.lassp.houle.RngPack.Ranlux(new java.util.Date());
                 * //generator = makeDefaultGenerator();
                 * for (int i=1000000; --i &gt;=0; ) {
                 * double uniform = generator.raw();
                 * ...
                 * }
                 * &lt;/pre&gt;                
                <@see>
                    e cern.jet.random                    
                </@see>
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <javadoc line="82">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="Benchmark" type="constructor" line="85"/>
            <javadoc line="88">
                Benchmarks &lt;tt&gt;raw()&lt;/tt&gt; for various uniform generation engines.                
            </javadoc>
            <method name="benchmark" type="void" line="91">
                <comment line="92">
                    r (int i=times; --i&gt;=0; ) ; // no operation                    
                </comment>
                <comment line="92">
                    gen = new edu.stanford.mt.MersenneTwister();
                    System.out.println(&quot;\n edu.stanford.mt.MersenneTwister:&quot;);
                    timer.reset().start();                    
                </comment>
                <comment line="92">
                    r (int i=times; --i&gt;=0; ) javaGen.nextFloat(); // nextDouble() is slower                    
                </comment>
                <comment line="92">
                    gen = new edu.cornell.lassp.houle.RngPack.Ranecu();
                    System.out.println(&quot;\nRanecu:&quot;);
                    timer.reset().start();
                    for (int i=times; --i&gt;=0; ) gen.raw();
                    timer.stop().display();
                    System.out.println(times(timer.elapsedTime()-emptyLoop)+ &quot; numbers per second.&quot;);
                    
                    gen = new edu.cornell.lassp.houle.RngPack.Ranmar();
                    System.out.println(&quot;\nRanmar:&quot;);
                    timer.reset().start();
                    for (int i=times; --i&gt;=0; ) gen.raw();
                    timer.stop().display();
                    System.out.println(times(timer.elapsedTime()-emptyLoop)+ &quot; numbers per second.&quot;);                    
                </comment>
                <declaration name="timer" type="cern.colt.Timer" line="92"/>
                <declaration name="gen" type="RandomEngine" line="93"/>
                <declaration name="emptyLoop" type="float" line="98"/>
                <declaration name="javaGen" type="java.util.Random" line="134"/>
            </method>
            <javadoc line="167">
                Tests various methods of this class.                
            </javadoc>
            <method name="main" type="void" line="170">
                <comment line="171">
                    testRandomFromTo(from,to,times);                    
                </comment>
                <comment line="171">
                    benchmark(1000000);                    
                </comment>
                <comment line="171">
                    benchmark(1000000);                    
                </comment>
                <declaration name="from" type="long" line="171"/>
                <declaration name="to" type="long" line="172"/>
                <declaration name="times" type="int" line="173"/>
                <declaration name="runs" type="int" line="174"/>
                <scope line="178"/>
            </method>
            <javadoc line="183">
                Prints the first &lt;tt&gt;size&lt;/tt&gt; random numbers generated by the given engine.                
            </javadoc>
            <method name="test" type="void" line="186">
                <comment line="187">
                    System.out.println(&quot;raw():&quot;);
                    random = (RandomEngine) randomEngine.clone();
                    cern.colt.Timer timer = new cern.colt.Timer().start();
                    for (int j=0, i=size; --i&gt;=0; j++) {
                    System.out.print(&quot; &quot;+random.raw());
                    if (j%8==7) System.out.println();
                    }
                    
                    System.out.println(&quot;\n\nfloat():&quot;);
                    random = (RandomEngine) randomEngine.clone();
                    for (int j=0, i=size; --i&gt;=0; j++) {
                    System.out.print(&quot; &quot;+random.nextFloat());                    
                </comment>
                <comment line="187">
                    timer.stop().display();                    
                </comment>
                <declaration name="random" type="RandomEngine" line="187"/>
                <scope line="214"/>
            </method>
            <javadoc line="222">
                Tests various methods of this class.                
            </javadoc>
            <method name="xtestRandomFromTo" type="void" line="225">
                <comment line="226">
                    cern.colt.set.OpenMultiFloatHashSet multiset = new cern.colt.set.OpenMultiFloatHashSet();                    
                </comment>
                <comment line="226">
                    edu.cornell.lassp.houle.RngPack.RandomElement random = new edu.cornell.lassp.houle.RngPack.Ranecu();                    
                </comment>
                <comment line="226">
                    edu.cornell.lassp.houle.RngPack.RandomElement random = new edu.cornell.lassp.houle.RngPack.MT19937B();                    
                </comment>
                <comment line="226">
                    edu.cornell.lassp.houle.RngPack.RandomElement random = new edu.stanford.mt.MersenneTwister();                    
                </comment>
                <comment line="226">
                    System.out.println(multiset); //check the distribution                    
                </comment>
                <declaration name="randomJava" type="java.util.Random" line="230"/>
                <declaration name="random" type="RandomEngine" line="234"/>
                <declaration name="_from" type="int" line="235"/>
                <declaration name="timer" type="cern.colt.Timer" line="236"/>
                <scope line="237"/>
            </method>
        </class>
    </source>