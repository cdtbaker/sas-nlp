<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random.engine">
        <class name="RandomSeedGenerator" line="11">
            <extends class="cern.colt.PersistentObject"/>
            <javadoc line="11">
                Deterministic seed generator for pseudo-random number generators.
                  The sole purpose of this class is to decorrelate seeds and uniform random number generators.
                  (If a generator would be used to generate seeds for itself, the result could be correlations.)
                  &lt;p&gt;
                  This class has entirelly deterministic behaviour:
                  Constructing two instances with the same parameters at any two distinct points in time will produce identical seed sequences.
                  However, it does not (at all) generate uniformly distributed numbers. Do not use it as a uniformly distributed random number generator! 
                  &lt;p&gt;
                  Each generated sequence of seeds has a period of 10&lt;sup&gt;9&lt;/sup&gt; numbers.
                  Internally uses {@link RandomSeedTable}.                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="row" type="int" line="27"/>
            <declaration name="column" type="int" line="28"/>
            <javadoc line="29">
                Constructs and returns a new seed generator.                
            </javadoc>
            <method name="RandomSeedGenerator" type="constructor" line="32"/>
            <javadoc line="35">
                Constructs and returns a new seed generator; you normally won&apos;t need to use this method.
                  &lt;p&gt;
                  The position &lt;tt&gt;[row,column]&lt;/tt&gt; indicates the iteration starting point within a (virtual) seed matrix.
                  The seed matrix is a nm matrix with &lt;tt&gt;1 + Integer.MAX_VALUE&lt;/tt&gt; (virtual) rows and &lt;tt&gt;RandomSeedTable.COLUMNS&lt;/tt&gt; columns.
                  Successive calls to method &lt;tt&gt;nextSeed()&lt;/tt&gt; will cycle over the given column, in ascending order:
                  &lt;tt&gt;nextSeed()&lt;/tt&gt; returns the seed &lt;tt&gt;s[row,column], s[row+1,column], ... s[Integer.MAX_VALUE,column], s[0,column], s[1,column], ...&lt;/tt&gt;                
                <@param>
                    m row should be in <tt>[0,Integer.MAX_VALUE]</tt>.                    
                </@param>
                <@param>
                    m column should be in <tt>[0,RandomSeedTable.COLUMNS - 1]</tt>.                    
                </@param>
            </javadoc>
            <method name="RandomSeedGenerator" type="constructor" line="46">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="50">
                Prints the generated seeds for the given input parameters.                
            </javadoc>
            <method name="main" type="void" line="53">
                <params>
                    <param name="args" type="String"/>
                </params>
                <declaration name="row" type="int" line="54"/>
                <declaration name="column" type="int" line="55"/>
                <declaration name="size" type="int" line="56"/>
            </method>
            <javadoc line="59">
                Returns the next seed.                
            </javadoc>
            <method name="nextSeed" type="int" line="62"/>
            <javadoc line="65">
                Prints the next &lt;tt&gt;size&lt;/tt&gt; generated seeds.                
            </javadoc>
            <method name="print" type="void" line="68">
                <params>
                    <param name="size" type="int"/>
                </params>
                <declaration name="copy" type="RandomSeedGenerator" line="70"/>
                <scope line="71">
                    <declaration name="seed" type="int" line="72"/>
                </scope>
            </method>
        </class>
    </source>