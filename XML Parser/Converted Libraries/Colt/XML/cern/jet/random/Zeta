<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="Zeta" line="12">
            <extends class="AbstractDiscreteDistribution"/>
            <comment line="13">
                cached values (for performance)                
            </comment>
            <comment line="13">
                The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
            </comment>
            <javadoc line="12">
                Zeta distribution.
                  &lt;p&gt;
                  Valid parameter ranges: &lt;tt&gt;ro &amp;gt; 0&lt;/tt&gt; and &lt;tt&gt;pk &amp;gt;= 0&lt;/tt&gt;.
                  &lt;dt&gt;
                  If either &lt;tt&gt;ro &amp;gt; 100&lt;/tt&gt;  or  &lt;tt&gt;k &amp;gt; 10000&lt;/tt&gt; numerical problems in
                  computing the theoretical moments arise, therefore &lt;tt&gt;ro &amp;lt;= 100&lt;/tt&gt; and 
                  &lt;tt&gt;k &amp;lt;= 10000&lt;/tt&gt; are recommended.                                      
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; 
                  &lt;dt&gt;Method: Acceptance/Rejection.
                  High performance implementation.
                  &lt;dt&gt;This is a port and adaption of &lt;tt&gt;Zeta.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  C-RAND&apos;s implementation, in turn, is based upon
                  &lt;p&gt;
                  J. Dagpunar (1988): Principles of Random Variate  Generation, Clarendon Press, Oxford.                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="ro" type="double" line="37"/>
            <declaration name="pk" type="double" line="38"/>
            <declaration name="c" type="double" line="41"/>
            <declaration name="maxlongint" type="double" line="42"/>
            <declaration name="shared" type="Zeta" line="45"/>
            <javadoc line="46">
                Constructs a Zeta distribution.                
            </javadoc>
            <method name="Zeta" type="constructor" line="49">
                <params>
                    <param name="ro" type="double"/>
                    <param name="pk" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="53">
                Returns a zeta distributed random number.                
            </javadoc>
            <method name="generateZeta" type="long" line="56">
                <params>
                    <param name="ro" type="double"/>
                    <param name="pk" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <comment line="57">
                    Zeta Distribution - Acceptance Rejection            
                                                                                    
                    
                                                                                    
                     To sample from the Zeta distribution with parameters ro and pk 
                     it suffices to sample variates x from the distribution with    
                     density function  f(x)=B{[x+0.5]+pk}^(-(1+ro)) ( x &gt; .5 )     
                     and then deliver k=[x+0.5].                                    
                     1B=Sum[(j+pk)^-(ro+1)]  (j=1,2,...) converges for ro &gt;= .5 .  
                     It is not necessary to compute B, because variates x are       
                     generated by acceptance rejection using density function       
                     g(x)=ro(c+0.5)^ro(c+x)^-(ro+1).                              
                                                                                                                                                    
                     Integer overflow is possible, when ro is small (ro &lt;= .5) and  
                     pk large. In this case a new sample is generated. If ro and pk 
                     satisfy the inequality   ro &gt; .14 + pk1.85e-8 + .02ln(pk)    
                     the percentage of overflow is less than 1%, so that the        
                     result is reliable.                                            
                     NOTE: The comment above is likely to be nomore valid since     
                     the C-version operated on 32-bit integers, while this Java     
                     version operates on 64-bit integers. However, the following is 
                     still valid:                                                                                                                   
                                                                                                                                                    
                     If either ro &gt; 100  or  k &gt; 10000 numerical problems in        
                     computing the theoretical moments arise, therefore ro&lt;=100 and 
                     k&lt;=10000 are recommended.                                      
                                                                                    
                    
                                                                                    
                     FUNCTION:    - zeta  samples a random number from the          
                                    Zeta distribution with parameters  ro &gt; 0  and  
                                    pk &gt;= 0.                                        
                     REFERENCE:   - J. Dagpunar (1988): Principles of Random        
                                    Variate  Generation, Clarendon Press, Oxford.   
                                                                                    
                    
                    double u,v,e,x;
                    long k;
                    
                    if (ro != ro_prev || pk != pk_prev) {                    Set-up
                    ro_prev = ro;
                    pk_prev = pk;
                    if (ro&lt;pk) {
                    c = pk-0.5;
                    d = 0;
                    }
                    else {
                    c = ro-0.5;
                    d = (1.0+ro)Math.log((1.0+pk)(1.0+ro));
                    }
                    }
                    do {
                    do {
                    u=randomGenerator.raw();
                    v=randomGenerator.raw();
                    x = (c+0.5)Math.exp(-Math.log(u)ro) - c;
                    } while (x&lt;=0.5 || x&gt;=maxlongint);
                    
                    k = (int) (x+0.5);                    
                </comment>
                <declaration name="u" type="double" line="95"/>
                <declaration name="k" type="long" line="96"/>
                <scope line="98">
                    <scope line="101"/>
                    <scope line="105"/>
                </scope>
                <scope line="110">
                    <scope line="111"/>
                </scope>
            </method>
            <javadoc line="123">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextInt" type="int" line="126"/>
            <javadoc line="129">
                Sets the parameters.                
            </javadoc>
            <method name="setState" type="void" line="132">
                <params>
                    <param name="ro" type="double"/>
                    <param name="pk" type="double"/>
                </params>
            </method>
            <javadoc line="136">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="staticNextInt" type="int" line="139">
                <params>
                    <param name="ro" type="double"/>
                    <param name="pk" type="double"/>
                </params>
                <scope line="140"/>
            </method>
            <javadoc line="145">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="148"/>
            <javadoc line="151">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <@param>
                    m randomGenerator the new uniform random number generator to be shared.                    
                </@param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="155">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <scope line="156"/>
            </method>
        </class>
    </source>