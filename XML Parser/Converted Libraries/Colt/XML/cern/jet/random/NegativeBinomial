<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <import package="cern.jet.stat.Probability"/>
        <class name="NegativeBinomial" line="13">
            <extends class="AbstractDiscreteDistribution"/>
            <comment line="14">
                The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
            </comment>
            <javadoc line="13">
                Negative Binomial distribution; See the &lt;A HREF=&quot;http://www.statlets.com/usermanual/glossary2.htm&quot;&gt; math definition&lt;/A&gt;.
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; High performance implementation. Compound method. 
                  &lt;dt&gt;
                  This is a port of &lt;tt&gt;nbp.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                  C-RAND&apos;s implementation, in turn, is based upon
                  &lt;p&gt;
                  J.H. Ahrens, U. Dieter (1974): Computer methods for sampling from gamma, beta, Poisson and binomial distributions, Computing 12, 223--246.                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="n" type="int" line="31"/>
            <declaration name="p" type="double" line="32"/>
            <declaration name="gamma" type="Gamma" line="34"/>
            <declaration name="poisson" type="Poisson" line="35"/>
            <declaration name="shared" type="NegativeBinomial" line="38"/>
            <javadoc line="39">
                Constructs a Negative Binomial distribution.
                  Example: n=1, p=0.5.                
                <@param>
                    m n the number of trials.                    
                </@param>
                <@param>
                    m p the probability of success.                    
                </@param>
                <@param>
                    m randomGenerator a uniform random number generator.                    
                </@param>
            </javadoc>
            <method name="NegativeBinomial" type="constructor" line="46">
                <params>
                    <param name="n" type="int"/>
                    <param name="p" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="52">
                Returns the cumulative distribution function.                
            </javadoc>
            <method name="cdf" type="double" line="55">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="58">
                Returns a deep copy of the receiver; the copy will produce identical sequences.
                  After this call has returned, the copy and the receiver have equal but separate state.                
                <@return>
                    n a copy of the receiver.                    
                </@return>
            </javadoc>
            <method name="clone" type="Object" line="64">
                <declaration name="copy" type="NegativeBinomial" line="65"/>
            </method>
            <javadoc line="72">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextInt" type="int" line="75"/>
            <javadoc line="78">
                Returns a random number from the distribution; bypasses the internal state.                
            </javadoc>
            <method name="nextInt" type="int" line="81">
                <params>
                    <param name="n" type="int"/>
                    <param name="p" type="double"/>
                </params>
                <comment line="82">
                    Negative Binomial Distribution - Compound method        
                                                                                    
                    
                                                                                    
                     FUNCTION:    - nbp  samples a random number from the Negative  
                                    Binomial distribution with parameters r (no. of 
                                    failures given) and p (probability of success)  
                                    valid for  r &gt; 0, 0 &lt; p &lt; 1.                    
                                    If G from Gamma(r) then K  from Poiss(pG(1-p)) 
                                    is NB(r,p)--distributed.                        
                     REFERENCE:   - J.H. Ahrens, U. Dieter (1974): Computer methods 
                                    for sampling from gamma, beta, Poisson and      
                                    binomial distributions, Computing 12, 223--246. 
                     SUBPROGRAMS: - drand(seed) ... (0,1)-Uniform generator with    
                                    unsigned long integer seed                     
                                  - Gamma(seed,a) ... Gamma generator for a &gt; 0     
                                    unsigned long seed, double a                   
                                  - Poisson(seed,a) ...Poisson generator for a &gt; 0  
                                    unsigned long seed, double a.                  
                                                                                    
                    
                    
                    double x = p (1.0 - p);
                    double p1 = p;
                    double y = x  this.gamma.nextDouble(n,1.0);
                    return this.poisson.nextInt(y);
                    }                    
                </comment>
                <declaration name="x" type="double" line="106"/>
                <declaration name="p1" type="double" line="107"/>
                <declaration name="y" type="double" line="108"/>
            </method>
            <javadoc line="111">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="114">
                <params>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="118">
                Sets the parameters number of trials and the probability of success.                
                <@param>
                    m n the number of trials                    
                </@param>
                <@param>
                    m p the probability of success.                    
                </@param>
            </javadoc>
            <method name="setNandP" type="void" line="123">
                <params>
                    <param name="n" type="int"/>
                    <param name="p" type="double"/>
                </params>
            </method>
            <javadoc line="127">
                Returns a random number from the distribution with the given parameters n and p.                
                <@param>
                    m n the number of trials                    
                </@param>
                <@param>
                    m p the probability of success.                    
                </@param>
            </javadoc>
            <method name="staticNextInt" type="int" line="132">
                <params>
                    <param name="n" type="int"/>
                    <param name="p" type="double"/>
                </params>
                <scope line="133"/>
            </method>
            <javadoc line="137">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="140"/>
            <javadoc line="143">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <@param>
                    m randomGenerator the new uniform random number generator to be shared.                    
                </@param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="147">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <scope line="148"/>
            </method>
        </class>
    </source>