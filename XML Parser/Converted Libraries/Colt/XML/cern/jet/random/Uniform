<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="Uniform" extends="AbstractContinousDistribution" line="12">
            <comment line="13">
                The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
            </comment>
            <javadoc line="12">
                Uniform distribution; &lt;A HREF=&quot;http://www.cern.ch/RD11/rkb/AN16pp/node292.html#SECTION0002920000000000000000&quot;&gt; Math definition&lt;/A&gt;
                 * and &lt;A HREF=&quot;http://www.statsoft.com/textbook/glosu.html#Uniform Distribution&quot;&gt; animated definition&lt;/A&gt;.
                 * &lt;p&gt;
                 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                 * &lt;dt&gt;
                 * Static methods operate on a default uniform random number generator; they are synchronized.
                 * &lt;p&gt;                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="min" type="double" line="24"/>
            <declaration name="max" type="double" line="25"/>
            <declaration name="shared" type="Uniform" line="28"/>
            <javadoc line="29">
                Constructs a uniform distribution with the given minimum and maximum, using a {@link cern.jet.random.engine.MersenneTwister} seeded with the given seed.                
            </javadoc>
            <method name="Uniform" type="constructor" line="32"/>
            <javadoc line="35">
                Constructs a uniform distribution with the given minimum and maximum.                
            </javadoc>
            <method name="Uniform" type="constructor" line="38"/>
            <javadoc line="42">
                Constructs a uniform distribution with &lt;tt&gt;min=0.0&lt;/tt&gt; and &lt;tt&gt;max=1.0&lt;/tt&gt;.                
            </javadoc>
            <method name="Uniform" type="constructor" line="45"/>
            <javadoc line="48">
                Returns the cumulative distribution function (assuming a continous uniform distribution).                
            </javadoc>
            <method name="cdf" type="double" line="51"/>
            <javadoc line="56">
                Returns a uniformly distributed random &lt;tt&gt;boolean&lt;/tt&gt;.                
            </javadoc>
            <method name="nextBoolean" type="boolean" line="59"/>
            <javadoc line="62">
                Returns a uniformly distributed random number in the open interval &lt;tt&gt;(min,max)&lt;/tt&gt; (excluding &lt;tt&gt;min&lt;/tt&gt; and &lt;tt&gt;max&lt;/tt&gt;).                
            </javadoc>
            <method name="nextDouble" type="double" line="65"/>
            <javadoc line="68">
                Returns a uniformly distributed random number in the open interval &lt;tt&gt;(from,to)&lt;/tt&gt; (excluding &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
                 * Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.                
            </javadoc>
            <method name="nextDoubleFromTo" type="double" line="72"/>
            <javadoc line="75">
                Returns a uniformly distributed random number in the open interval &lt;tt&gt;(from,to)&lt;/tt&gt; (excluding &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
                 * Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.                
            </javadoc>
            <method name="nextFloatFromTo" type="float" line="79"/>
            <javadoc line="82">
                Returns a uniformly distributed random number in the closed interval &lt;tt&gt;[min,max]&lt;/tt&gt; (including &lt;tt&gt;min&lt;/tt&gt; and &lt;tt&gt;max&lt;/tt&gt;).                
            </javadoc>
            <method name="nextInt" type="int" line="85"/>
            <javadoc line="88">
                Returns a uniformly distributed random number in the closed interval &lt;tt&gt;[from,to]&lt;/tt&gt; (including &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
                 * Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.                
            </javadoc>
            <method name="nextIntFromTo" type="int" line="92"/>
            <javadoc line="95">
                Returns a uniformly distributed random number in the closed interval &lt;tt&gt;[from,to]&lt;/tt&gt; (including &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
                 * Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.                
            </javadoc>
            <method name="nextLongFromTo" type="long" line="99">
                <comment line="100">
                    Doing the thing turns out to be more tricky than expected.
                    avoids overflows and underflows.
                    treats cases like from=-1, to=1 and the like right.
                    the following code would NOT solve the problem: return (long) (Doubles.randomFromTo(from,to));                    
                </comment>
                <comment line="100">
                    first the most likely and also the fastest case.                    
                </comment>
                <comment line="100">
                    would we get a numeric overflow?                    
                </comment>
                <comment line="100">
                    if not, we can still handle the case rather efficient.                    
                </comment>
                <comment line="100">
                    now the pathologic boundary cases.                    
                </comment>
                <comment line="100">
                    they are handled rather slow.                    
                </comment>
                <scope line="110"/>
                <declaration name="diff" type="double" line="116"/>
                <scope line="117"/>
                <declaration name="random" type="long" line="123"/>
                <scope line="124">
                    <scope line="125">
                        <declaration name="i1" type="int" line="127"/>
                        <declaration name="i2" type="int" line="128"/>
                    </scope>
                </scope>
                <scope line="134"/>
            </method>
            <javadoc line="140">
                Returns the probability distribution function (assuming a continous uniform distribution).                
            </javadoc>
            <method name="pdf" type="double" line="143"/>
            <javadoc line="147">
                Sets the internal state.                
            </javadoc>
            <method name="setState" type="void" line="150">
                <scope line="151"/>
            </method>
            <javadoc line="155">
                Returns a uniformly distributed random &lt;tt&gt;boolean&lt;/tt&gt;.                
            </javadoc>
            <method name="staticNextBoolean" type="boolean" line="158">
                <scope line="159"/>
            </method>
            <javadoc line="163">
                Returns a uniformly distributed random number in the open interval &lt;tt&gt;(0,1)&lt;/tt&gt; (excluding &lt;tt&gt;0&lt;/tt&gt; and &lt;tt&gt;1&lt;/tt&gt;).                
            </javadoc>
            <method name="staticNextDouble" type="double" line="166">
                <scope line="167"/>
            </method>
            <javadoc line="171">
                Returns a uniformly distributed random number in the open interval &lt;tt&gt;(from,to)&lt;/tt&gt; (excluding &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
                 * Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.                
            </javadoc>
            <method name="staticNextDoubleFromTo" type="double" line="175">
                <scope line="176"/>
            </method>
            <javadoc line="180">
                Returns a uniformly distributed random number in the open interval &lt;tt&gt;(from,to)&lt;/tt&gt; (excluding &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
                 * Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.                
            </javadoc>
            <method name="staticNextFloatFromTo" type="float" line="184">
                <scope line="185"/>
            </method>
            <javadoc line="189">
                Returns a uniformly distributed random number in the closed interval &lt;tt&gt;[from,to]&lt;/tt&gt; (including &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
                 * Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.                
            </javadoc>
            <method name="staticNextIntFromTo" type="int" line="193">
                <scope line="194"/>
            </method>
            <javadoc line="198">
                Returns a uniformly distributed random number in the closed interval &lt;tt&gt;[from,to]&lt;/tt&gt; (including &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
                 * Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.                
            </javadoc>
            <method name="staticNextLongFromTo" type="long" line="202">
                <scope line="203"/>
            </method>
            <javadoc line="207">
                Sets the uniform random number generation engine shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <@param>
                    m randomGenerator the new uniform random number generation engine to be shared.                    
                </@param>
            </javadoc>
            <method name="staticSetRandomEngine" type="void" line="211">
                <scope line="212"/>
            </method>
            <javadoc line="216">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="219"/>
        </class>
    </source>