<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random.sampling">
        <import package="cern.colt.list.BooleanArrayList"/>
        <import package="cern.jet.random.Uniform"/>
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="WeightedRandomSampler" extends="cern.colt.PersistentObject" line="14">
            <comment line="15">
                public class BlockedRandomSampler extends Object implements java.io.Serializable {                
            </comment>
            <javadoc line="14">
                Conveniently computes a stable subsequence of elements from a given input sequence;
                 * Picks (samples) exactly one random element from successive blocks of &lt;tt&gt;weight&lt;/tt&gt; input elements each.
                 * For example, if weight==2 (a block is 2 elements), and the input is 5*2=10 elements long, then picks 5 random elements from the 10 elements such that
                 * one element is randomly picked from the first block, one element from the second block, ..., one element from the last block.
                 * weight == 1.0 --&gt; all elements are picked (sampled). weight == 10.0 --&gt; Picks one random element from successive blocks of 10 elements each. Etc.
                 * The subsequence is guaranteed to be &lt;i&gt;stable&lt;/i&gt;, i.e. elements never change position relative to each other.                
                <@author>
                    r  wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 02/05/99                    
                </@version>
            </javadoc>
            <declaration name="skip" type="int" line="27"/>
            <declaration name="nextTriggerPos" type="int" line="28"/>
            <declaration name="nextSkip" type="int" line="29"/>
            <declaration name="weight" type="int" line="30"/>
            <declaration name="generator" type="Uniform" line="31"/>
            <declaration name="UNDEFINED" type="int" line="33"/>
            <javadoc line="34">
                Calls &lt;tt&gt;BlockedRandomSampler(1,null)&lt;/tt&gt;.                
            </javadoc>
            <method name="WeightedRandomSampler" type="constructor" line="37"/>
            <javadoc line="40">
                Chooses exactly one random element from successive blocks of &lt;tt&gt;weight&lt;/tt&gt; input elements each.
                 * For example, if weight==2, and the input is 5*2=10 elements long, then chooses 5 random elements from the 10 elements such that
                 * one is chosen from the first block, one from the second, ..., one from the last block.
                 * weight == 1.0 --&gt; all elements are consumed (sampled). 10.0 --&gt; Consumes one random element from successive blocks of 10 elements each. Etc.                
                <@param>
                    m weight the weight.                    
                </@param>
                <@param>
                    m randomGenerator a random number generator. Set this parameter to <tt>null</tt> to use the default random number generator.                    
                </@param>
            </javadoc>
            <method name="WeightedRandomSampler" type="constructor" line="48"/>
            <javadoc line="53">
                Returns a deep copy of the receiver.                
            </javadoc>
            <method name="clone" type="Object" line="56">
                <declaration name="copy" type="WeightedRandomSampler" line="57"/>
            </method>
            <javadoc line="61">
                Not yet commented.                
                <@param>
                    m weight int                    
                </@param>
            </javadoc>
            <method name="getWeight" type="int" line="65"/>
            <javadoc line="68">
                Chooses exactly one random element from successive blocks of &lt;tt&gt;weight&lt;/tt&gt; input elements each.
                 * For example, if weight==2, and the input is 5*2=10 elements long, then chooses 5 random elements from the 10 elements such that
                 * one is chosen from the first block, one from the second, ..., one from the last block.                
                <@return>
                    n <tt>true</tt> if the next element shall be sampled (picked), <tt>false</tt> otherwise.                    
                </@return>
            </javadoc>
            <method name="sampleNextElement" type="boolean" line="74">
                <comment line="75">
                    accept                    
                </comment>
                <scope line="75"/>
                <scope line="80"/>
                <scope line="87"/>
            </method>
            <javadoc line="98">
                Not yet commented.                
                <@param>
                    m weight int                    
                </@param>
            </javadoc>
            <method name="setWeight" type="void" line="102"/>
            <javadoc line="109">
                Not yet commented.                
            </javadoc>
            <method name="test" type="void" line="112">
                <declaration name="sampler" type="WeightedRandomSampler" line="113"/>
                <declaration name="sample" type="cern.colt.list.IntArrayList" line="116"/>
                <scope line="117"/>
            </method>
            <javadoc line="123">
                Chooses exactly one random element from successive blocks of &lt;tt&gt;weight&lt;/tt&gt; input elements each.
                 * For example, if weight==2, and the input is 5*2=10 elements long, then chooses 5 random elements from the 10 elements such that
                 * one is chosen from the first block, one from the second, ..., one from the last block.                
                <@param>
                    m acceptList a bitvector which will be filled with <tt>true</tt> where sampling shall occur and <tt>false</tt> where it shall not occur.                    
                </@param>
            </javadoc>
            <method name="xsampleNextElements" type="void" line="129">
                <comment line="130">
                    manually inlined                    
                </comment>
                <declaration name="length" type="int" line="131"/>
                <declaration name="accept" type="boolean[]" line="132"/>
                <scope line="133">
                    <scope line="134"/>
                    <scope line="140"/>
                    <scope line="147"/>
                </scope>
            </method>
        </class>
    </source>