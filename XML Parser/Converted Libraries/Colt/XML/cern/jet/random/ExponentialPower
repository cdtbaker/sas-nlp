<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="ExponentialPower" extends="AbstractContinousDistribution" line="12">
            <comment line="13">
                cached vars for method nextDouble(tau) (for performance only)                
            </comment>
            <comment line="13">
                The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
            </comment>
            <javadoc line="12">
                Exponential Power distribution.
                 * &lt;p&gt;
                 * Valid parameter ranges: &lt;tt&gt;tau &amp;gt;= 1&lt;/tt&gt;.
                 * &lt;p&gt;
                 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                 * &lt;dt&gt;
                 * Static methods operate on a default uniform random number generator; they are synchronized.
                 * &lt;p&gt;
                 * &lt;b&gt;Implementation:&lt;/b&gt;
                 * &lt;dt&gt;Method: Non-universal rejection method for logconcave densities.
                 * &lt;dt&gt;This is a port of &lt;tt&gt;epd.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                 * C-RAND&apos;s implementation, in turn, is based upon
                 * &lt;p&gt;
                 * L. Devroye (1986): Non-Uniform Random Variate Generation , Springer Verlag, New York.
                 * &lt;p&gt;                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="tau" type="double" line="33"/>
            <declaration name="s" type="double" line="36"/>
            <declaration name="shared" type="ExponentialPower" line="39"/>
            <javadoc line="40">
                Constructs an Exponential Power distribution.
                 * Example: tau=1.0.                
                <@throws>
                    s IllegalArgumentException if <tt>tau &lt; 1.0</tt>.                    
                </@throws>
            </javadoc>
            <method name="ExponentialPower" type="constructor" line="45"/>
            <javadoc line="49">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextDouble" type="double" line="52"/>
            <javadoc line="55">
                Returns a random number from the distribution; bypasses the internal state.                
                <@throws>
                    s IllegalArgumentException if <tt>tau &lt; 1.0</tt>.                    
                </@throws>
            </javadoc>
            <method name="nextDouble" type="double" line="59">
                <comment line="60">
                    GENERATOR                    
                </comment>
                <comment line="60">
                    Random sign                    
                </comment>
                <declaration name="u" type="double" line="60"/>
                <scope line="62"/>
                <scope line="70">
                    <scope line="76"/>
                    <scope line="79"/>
                </scope>
            </method>
            <javadoc line="95">
                Sets the distribution parameter.                
                <@throws>
                    s IllegalArgumentException if <tt>tau &lt; 1.0</tt>.                    
                </@throws>
            </javadoc>
            <method name="setState" type="void" line="99"/>
            <javadoc line="103">
                Returns a random number from the distribution.                
                <@throws>
                    s IllegalArgumentException if <tt>tau &lt; 1.0</tt>.                    
                </@throws>
            </javadoc>
            <method name="staticNextDouble" type="double" line="107">
                <scope line="108"/>
            </method>
            <javadoc line="112">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="115"/>
            <javadoc line="118">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <@param>
                    m randomGenerator the new uniform random number generator to be shared.                    
                </@param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="122">
                <scope line="123"/>
            </method>
        </class>
    </source>