<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="Logarithmic" extends="AbstractContinousDistribution" line="12">
            <comment line="13">
                cached vars for method nextDouble(a) (for performance only)                
            </comment>
            <comment line="13">
                The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
            </comment>
            <javadoc line="12">
                Logarithmic distribution.
                 * &lt;p&gt;
                 * Valid parameter ranges: &lt;tt&gt;0 &amp;lt; p &amp;lt; 1&lt;/tt&gt;.
                 * &lt;p&gt;
                 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                 * &lt;dt&gt;
                 * Static methods operate on a default uniform random number generator; they are synchronized.
                 * &lt;p&gt;
                 * &lt;b&gt;Implementation:&lt;/b&gt; 
                 * &lt;dt&gt;
                 * Method: Inversion/Transformation.
                 * &lt;dt&gt;
                 * This is a port of &lt;tt&gt;lsk.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                 * C-RAND&apos;s implementation, in turn, is based upon
                 * &lt;p&gt;
                 * A.W. Kemp (1981): Efficient generation of logarithmically distributed pseudo-random variables, Appl. Statist. 30, 249-253.                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="my_p" type="double" line="34"/>
            <declaration name="t" type="double" line="37"/>
            <declaration name="shared" type="Logarithmic" line="40"/>
            <javadoc line="41">
                Constructs a Logarithmic distribution.                
            </javadoc>
            <method name="Logarithmic" type="constructor" line="44"/>
            <javadoc line="48">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextDouble" type="double" line="51"/>
            <javadoc line="54">
                Returns a random number from the distribution; bypasses the internal state.                
            </javadoc>
            <method name="nextDouble" type="double" line="57">
                <comment line="58">
                    Logarithmic Distribution - InversionTransformation       
                                                                                    
                    
                                                                                    
                     The algorithm combines Inversion and Transformation.           
                     It is based on the following fact: A random variable X from    
                     the Logarithmic distribution has the property that X for fixed 
                     Y=y is Geometric distributed with P(X=x|Y=y)=(1-y)y^(x-1) () 
                     where Y has distribution function F(y)=ln(1-y)ln(1-p).        
                     So first random numbers y are generated by simple Inversion,   
                     then k=(long int) (1+ln(u)ln(y)) is a Geometric random number 
                     and because of () a Logarithmic one.                          
                     To speed up the algorithm squeezes are used as well as the     
                     fact, that many of the random numbers are 1 or 2 (depending on 
                     special circumstances).                                        
                     On an IBMPC 486 optimal performance is achieved, if for p&lt;.97 
                     simple inversion is used and otherwise the transformation.     
                     On an IBMPC 286 inversion should be restricted to p&lt;.90.      
                                                                                    
                    
                                                                                    
                     FUNCTION:    - lsk  samples a random number from the           
                                    Logarithmic distribution with                   
                                    parameter  0 &lt; p &lt; 1 .                          
                     REFERENCE:   - A.W. Kemp (1981): Efficient generation of       
                                    logarithmically distributed pseudo-random       
                                    variables, Appl. Statist. 30, 249-253.          
                     SUBPROGRAMS: - drand(seed) ... (0,1)-Uniform generator with    
                                    unsigned long integer seed.                    
                                                                                    
                    
                    double u,v,p,q;
                    int k;
                    
                    if (a != a_prev) {                    Set-up
                    a_prev = a;
                    if (a&lt;0.97) t = -a  Math.log(1.0 - a);
                    else h=Math.log(1.0 - a);
                    }
                    
                    u=randomGenerator.raw();
                    if (a&lt;0.97) {                         InversionChop-down
                    k = 1;
                    p = t;
                    while (u &gt; p) {
                    System.out.println(&quot;u=&quot;+u+&quot;, p=&quot;+p);
                    u -= p;
                    k++;
                    p = a  (k-1.0)(double)k;
                    }
                    return k;
                    }
                    
                    if (u &gt; a) return 1;                  Transformation
                    u=randomGenerator.raw();
                    v = u;                    
                </comment>
                <comment line="58">
                    (u &gt; a) return 1;                 // Transformation                    
                </comment>
                <declaration name="u" type="double" line="91"/>
                <declaration name="k" type="int" line="92"/>
                <scope line="94"/>
                <scope line="101">
                    <scope line="104"/>
                </scope>
                <scope line="117"/>
            </method>
            <javadoc line="124">
                Sets the distribution parameter.                
            </javadoc>
            <method name="setState" type="void" line="127"/>
            <javadoc line="130">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="staticNextDouble" type="double" line="133">
                <scope line="134"/>
            </method>
            <javadoc line="138">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="141"/>
            <javadoc line="144">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <@param>
                    m randomGenerator the new uniform random number generator to be shared.                    
                </@param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="148">
                <scope line="149"/>
            </method>
        </class>
    </source>