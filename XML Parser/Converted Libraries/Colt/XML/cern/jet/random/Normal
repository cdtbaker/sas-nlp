<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <import package="cern.jet.stat.Probability"/>
        <class name="Normal" extends="AbstractContinousDistribution" line="13">
            <comment line="14">
                otected double cache; // cache for Box-Mueller algorithm                
            </comment>
            <comment line="14">
                otected boolean cacheFilled; // Box-Mueller                
            </comment>
            <comment line="14">
                otected double SQRT_INV; // performance cache                
            </comment>
            <comment line="14">
                The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
            </comment>
            <javadoc line="13">
                Normal (aka Gaussian) distribution; See the &lt;A HREF=&quot;http://www.cern.ch/RD11/rkb/AN16pp/node188.html#SECTION0001880000000000000000&quot;&gt; math definition&lt;/A&gt;
                 * and &lt;A HREF=&quot;http://www.statsoft.com/textbook/glosn.html#Normal Distribution&quot;&gt; animated definition&lt;/A&gt;.
                 * &lt;pre&gt;                       
                 * 1                       2
                 * pdf(x) = ---------    exp( - (x-mean) / 2v ) 
                 * sqrt(2pi*v)
                 * x
                 * -
                 * 1        | |                 2
                 * cdf(x) = ---------    |    exp( - (t-mean) / 2v ) dt
                 * sqrt(2pi*v)| |
                 * -
                 * -inf.
                 * &lt;/pre&gt;
                 * where &lt;tt&gt;v = variance = standardDeviation^2&lt;/tt&gt;.
                 * &lt;p&gt;
                 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                 * &lt;dt&gt;
                 * Static methods operate on a default uniform random number generator; they are synchronized.
                 * &lt;p&gt;
                 * &lt;b&gt;Implementation:&lt;/b&gt; Polar Box-Muller transformation. See 
                 * G.E.P. Box, M.E. Muller (1958): A note on the generation of random normal deviates, Annals Math. Statist. 29, 610-611.
                 * &lt;p&gt;                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="mean" type="double" line="42"/>
            <declaration name="variance" type="double" line="43"/>
            <declaration name="standardDeviation" type="double" line="44"/>
            <declaration name="cache" type="double" line="46"/>
            <declaration name="cacheFilled" type="boolean" line="47"/>
            <declaration name="SQRT_INV" type="double" line="49"/>
            <declaration name="shared" type="Normal" line="52"/>
            <javadoc line="53">
                Constructs a normal (gauss) distribution.
                 * Example: mean=0.0, standardDeviation=1.0.                
            </javadoc>
            <method name="Normal" type="constructor" line="57"/>
            <javadoc line="61">
                Returns the cumulative distribution function.                
            </javadoc>
            <method name="cdf" type="double" line="64"/>
            <javadoc line="67">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextDouble" type="double" line="70"/>
            <javadoc line="73">
                Returns a random number from the distribution; bypasses the internal state.                
            </javadoc>
            <method name="nextDouble" type="double" line="76">
                <comment line="77">
                    Uses polar Box-Muller transformation.                    
                </comment>
                <scope line="78"/>
                <declaration name="x" type="double" line="83"/>
                <scope line="84"/>
            </method>
            <javadoc line="95">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="98">
                <declaration name="diff" type="double" line="99"/>
            </method>
            <javadoc line="102">
                Sets the uniform random generator internally used.                
            </javadoc>
            <method name="setRandomGenerator" type="void" line="105"/>
            <javadoc line="109">
                Sets the mean and variance.                
            </javadoc>
            <method name="setState" type="void" line="112">
                <scope line="113"/>
            </method>
            <javadoc line="122">
                Returns a random number from the distribution with the given mean and standard deviation.                
            </javadoc>
            <method name="staticNextDouble" type="double" line="125">
                <scope line="126"/>
            </method>
            <javadoc line="130">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="133"/>
            <javadoc line="136">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <@param>
                    m randomGenerator the new uniform random number generator to be shared.                    
                </@param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="140">
                <scope line="141"/>
            </method>
        </class>
    </source>