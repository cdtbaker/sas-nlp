<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="Empirical" extends="AbstractContinousDistribution" line="12">
            <comment line="13">
                otected double[] cdf; // cumulative distribution function                
            </comment>
            <javadoc line="12">
                Empirical distribution.
                 * &lt;p&gt;
                 * The probability distribution function (pdf) must be provided by the user as an array of positive real numbers. 
                 * The pdf does not need to be provided in the form of relative probabilities, absolute probabilities are also accepted.
                 * &lt;p&gt;
                 * If &lt;tt&gt;interpolationType == LINEAR_INTERPOLATION&lt;/tt&gt; a linear interpolation within the bin is computed, resulting in a constant density within each bin.
                 * &lt;dt&gt;
                 * If &lt;tt&gt;interpolationType == NO_INTERPOLATION&lt;/tt&gt; no interpolation is performed and the result is a discrete distribution.  
                 * &lt;p&gt;
                 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                 * &lt;dt&gt;
                 * Static methods operate on a default uniform random number generator; they are synchronized.
                 * &lt;p&gt;
                 * &lt;b&gt;Implementation:&lt;/b&gt;
                 * A uniform random number is generated using a user supplied generator.
                 * The uniform number is then transformed to the user&apos;s distribution using the cumulative probability distribution constructed from the pdf.
                 * The cumulative distribution is inverted using a binary search for the nearest bin boundary. 
                 * &lt;p&gt;
                 * This is a port of &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandGeneral.html&quot;&gt;RandGeneral&lt;/A&gt; used in &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep&quot;&gt;CLHEP 1.4.0&lt;/A&gt; (C++).                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="cdf" type="double[]" line="37"/>
            <declaration name="interpolationType" type="int" line="38"/>
            <declaration name="LINEAR_INTERPOLATION" type="int" line="40"/>
            <declaration name="NO_INTERPOLATION" type="int" line="41"/>
            <javadoc line="42">
                Constructs an Empirical distribution.
                 * The probability distribution function (pdf) is an array of positive real numbers. 
                 * It need not be provided in the form of relative probabilities, absolute probabilities are also accepted.
                 * The &lt;tt&gt;pdf&lt;/tt&gt; must satisfy both of the following conditions
                 * &lt;ul&gt;
                 * &lt;li&gt;&lt;tt&gt;0.0 &amp;lt;= pdf[i] : 0&amp;lt;=i&amp;lt;=pdf.length-1&lt;/tt&gt;
                 * &lt;li&gt;&lt;tt&gt;0.0 &amp;lt; Sum(pdf[i]) : 0&amp;lt;=i&amp;lt;=pdf.length-1&lt;/tt&gt;
                 * &lt;/ul&gt;                
                <@param>
                    m pdf the probability distribution function.                    
                </@param>
                <@param>
                    m interpolationType can be either <tt>Empirical.NO_INTERPOLATION</tt> or <tt>Empirical.LINEAR_INTERPOLATION</tt>.                    
                </@param>
                <@param>
                    m randomGenerator a uniform random number generator.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if at least one of the three conditions above is violated.                    
                </@throws>
            </javadoc>
            <method name="Empirical" type="constructor" line="56"/>
            <javadoc line="60">
                Returns the cumulative distribution function.                
            </javadoc>
            <method name="cdf" type="double" line="63"/>
            <javadoc line="68">
                Returns a deep copy of the receiver; the copy will produce identical sequences.
                 * After this call has returned, the copy and the receiver have equal but separate state.                
                <@return>
                    n a copy of the receiver.                    
                </@return>
            </javadoc>
            <method name="clone" type="Object" line="74">
                <declaration name="copy" type="Empirical" line="75"/>
            </method>
            <javadoc line="79">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextDouble" type="double" line="82">
                <comment line="83">
                    (this.cdf==null) return rand; // Non-existing pdf                    
                </comment>
                <comment line="83">
                    binary search in cumulative distribution function:                    
                </comment>
                <comment line="83">
                    t nbelow = 0;     // largest k such that I[k] is known to be &lt;= rand                    
                </comment>
                <comment line="83">
                    t nabove = nBins; // largest k such that I[k] is known to be &gt;  rand                    
                </comment>
                <comment line="83">
                    after this binary search, nabove is always nbelow+1 and they straddle rand:                    
                </comment>
                <comment line="83">
                    se throw new InternalError(); // illegal interpolation type                    
                </comment>
                <declaration name="rand" type="double" line="83"/>
                <declaration name="nBins" type="int" line="87"/>
                <declaration name="nbelow" type="int" line="88"/>
                <declaration name="nabove" type="int" line="89"/>
                <scope line="91">
                    <declaration name="middle" type="int" line="92"/>
                </scope>
                <scope line="98"/>
                <scope line="101">
                    <declaration name="binMeasure" type="double" line="102"/>
                    <scope line="106"/>
                    <declaration name="binFraction" type="double" line="113"/>
                </scope>
            </method>
            <javadoc line="118">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="121">
                <comment line="122">
                    if (x &lt; 0 || x &gt; cdf.length-2) return 0.0;                    
                </comment>
                <comment line="122">
                    int k = (int) x;                    
                </comment>
                <comment line="122">
                    return cdf[k-1] - cdf[k];                    
                </comment>
            </method>
            <javadoc line="127">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="130"/>
            <javadoc line="134">
                Sets the distribution parameters.
                 * The &lt;tt&gt;pdf&lt;/tt&gt; must satisfy both of the following conditions
                 * &lt;ul&gt;
                 * &lt;li&gt;&lt;tt&gt;0.0 &amp;lt;= pdf[i] : 0 &amp;lt; =i &amp;lt;= pdf.length-1&lt;/tt&gt;
                 * &lt;li&gt;&lt;tt&gt;0.0 &amp;lt; Sum(pdf[i]) : 0 &amp;lt;=i &amp;lt;= pdf.length-1&lt;/tt&gt;
                 * &lt;/ul&gt;                
                <@param>
                    m pdf probability distribution function.                    
                </@param>
                <@param>
                    m interpolationType can be either <tt>Empirical.NO_INTERPOLATION</tt> or <tt>Empirical.LINEAR_INTERPOLATION</tt>.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if at least one of the three conditions above is violated.                    
                </@throws>
            </javadoc>
            <method name="setState" type="void" line="145">
                <comment line="146">
                    compute cumulative distribution function (cdf) from probability distribution function (pdf)                    
                </comment>
                <comment line="146">
                    cdf is now cached...                    
                </comment>
                <scope line="147"/>
                <scope line="152"/>
                <declaration name="nBins" type="int" line="159"/>
                <scope line="163">
                    <declaration name="prob" type="double" line="164"/>
                </scope>
                <scope line="169"/>
            </method>
            <javadoc line="174">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="177">
                <declaration name="interpolation" type="String" line="178"/>
            </method>
            <javadoc line="183">
                Not yet commented.                
                <@return>
                    n int                    
                </@return>
            </javadoc>
            <method name="xnBins" type="int" line="187"/>
        </class>
    </source>