<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.math.Arithmetic"/>
        <import package="cern.jet.random.engine.RandomEngine"/>
        <import package="cern.jet.stat.Probability"/>
        <class name="Poisson" extends="AbstractDiscreteDistribution" line="14">
            <comment line="15">
                precomputed and cached values (for performance only)                
            </comment>
            <comment line="15">
                cache for &lt; SWITCH_MEAN                
            </comment>
            <comment line="15">
                cache for &gt;= SWITCH_MEAN                
            </comment>
            <comment line="15">
                cache for both;                
            </comment>
            <comment line="15">
                otected static final double MEAN_MAX = Integer.MAX_VALUE; // for all means larger than that, we don&apos;t try to compute a poisson deviation, but return the mean.                
            </comment>
            <comment line="15">
                otected static final double SWITCH_MEAN = 10.0; // switch from method A to method B                
            </comment>
            <comment line="15">
                The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
            </comment>
            <javadoc line="14">
                Poisson distribution (quick); See the &lt;A HREF=&quot;http://www.cern.ch/RD11/rkb/AN16pp/node208.html#SECTION0002080000000000000000&quot;&gt; math definition&lt;/A&gt;
                 * and &lt;A HREF=&quot;http://www.statsoft.com/textbook/glosp.html#Poisson Distribution&quot;&gt; animated definition&lt;/A&gt;.
                 * &lt;p&gt;
                 * &lt;tt&gt;p(k) = (mean^k / k!) * exp(-mean)&lt;/tt&gt; for &lt;tt&gt;k &amp;gt;= 0&lt;/tt&gt;.
                 * &lt;p&gt;
                 * Valid parameter ranges: &lt;tt&gt;mean &amp;gt; 0&lt;/tt&gt;.
                 * Note: if &lt;tt&gt;mean &amp;lt;= 0.0&lt;/tt&gt; then always returns zero.
                 * &lt;p&gt;
                 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                 * &lt;dt&gt;
                 * Static methods operate on a default uniform random number generator; they are synchronized.
                 * &lt;p&gt;
                 * &lt;b&gt;Implementation:&lt;/b&gt; High performance implementation.
                 * Patchwork Rejection/Inversion method.
                 * &lt;dt&gt;This is a port of &lt;tt&gt;pprsc.c&lt;/tt&gt; from the &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
                 * C-RAND&apos;s implementation, in turn, is based upon
                 * &lt;p&gt;
                 * H. Zechner (1994): Efficient sampling from continuous and discrete unimodal distributions,
                 * Doctoral Dissertation, 156 pp., Technical University Graz, Austria.
                 * &lt;p&gt;
                 * Also see
                 * &lt;p&gt;
                 * Stadlober E., H. Zechner (1999), &lt;A HREF=&quot;http://www.cis.tu-graz.ac.at/stat/stadl/random.html&quot;&gt;The patchwork rejection method for sampling from unimodal distributions&lt;/A&gt;,
                 * to appear in ACM Transactions on Modelling and Simulation.                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="mean" type="double" line="44"/>
            <declaration name="my_old" type="double" line="48"/>
            <declaration name="p" type="double" line="49"/>
            <declaration name="pp" type="double[]" line="50"/>
            <declaration name="llll" type="int" line="51"/>
            <declaration name="my_last" type="double" line="54"/>
            <declaration name="ll" type="double" line="55"/>
            <declaration name="k2" type="int" line="56"/>
            <declaration name="dl" type="double" line="57"/>
            <declaration name="f1" type="double" line="58"/>
            <declaration name="m" type="int" line="61"/>
            <declaration name="MEAN_MAX" type="double" line="64"/>
            <declaration name="SWITCH_MEAN" type="double" line="65"/>
            <declaration name="shared" type="Poisson" line="69"/>
            <javadoc line="70">
                Constructs a poisson distribution.
                 * Example: mean=1.0.                
            </javadoc>
            <method name="Poisson" type="constructor" line="74"/>
            <javadoc line="78">
                Returns the cumulative distribution function.                
            </javadoc>
            <method name="cdf" type="double" line="81"/>
            <javadoc line="84">
                Returns a deep copy of the receiver; the copy will produce identical sequences.
                 * After this call has returned, the copy and the receiver have equal but separate state.                
                <@return>
                    n a copy of the receiver.                    
                </@return>
            </javadoc>
            <method name="clone" type="Object" line="90">
                <declaration name="copy" type="Poisson" line="91"/>
            </method>
            <method name="f" type="double" line="95"/>
            <javadoc line="98">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextInt" type="int" line="101"/>
            <javadoc line="104">
                Returns a random number from the distribution; bypasses the internal state.                
            </javadoc>
            <method name="nextInt" type="int" line="107">
                <comment line="108">
                    Poisson Distribution - Patchwork RejectionInversion           
                                                                                    
                    
                                                                                    
                     For parameter  my &lt; 10  Tabulated Inversion is applied.        
                     For my &gt;= 10  Patchwork Rejection is employed:                 
                     The area below the histogram function f(x) is rearranged in    
                     its body by certain point reflections. Within a large center   
                     interval variates are sampled efficiently by rejection from    
                     uniform hats. Rectangular immediate acceptance regions speed   
                     up the generation. The remaining tails are covered by          
                     exponential functions.                                         
                                                                                    
                    
                    RandomEngine gen = this.randomGenerator;
                    double my = theMean;
                    
                    double t,g,my_k;                    
                </comment>
                <comment line="108">
                    static double p,q,p0,pp[36];                    
                </comment>
                <comment line="108">
                    static long ll,m;                    
                </comment>
                <declaration name="gen" type="RandomEngine" line="124"/>
                <declaration name="my" type="double" line="125"/>
                <declaration name="t" type="double" line="127"/>
                <declaration name="gx" type="double" line="129"/>
                <declaration name="sign" type="int" line="130"/>
                <declaration name="u" type="double" line="134"/>
                <declaration name="k" type="int" line="135"/>
                <scope line="137">
                    <scope line="138"/>
                    <scope line="147">
                        <scope line="151"/>
                        <scope line="156">
                            <scope line="160"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="168">
                    <declaration name="Dk" type="int" line="173"/>
                    <declaration name="Ds" type="double" line="174"/>
                    <scope line="177"/>
                    <scope line="224">
                        <scope line="227">
                            <scope line="237"/>
                            <scope line="240">
                                <scope line="242"/>
                            </scope>
                        </scope>
                        <scope line="249">
                            <scope line="258"/>
                            <scope line="261">
                                <scope line="263"/>
                            </scope>
                        </scope>
                        <scope line="270">
                            <scope line="272"/>
                            <scope line="278"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="292"/>
            </method>
            <javadoc line="296">
                Returns the probability distribution function.                
            </javadoc>
            <method name="pdf" type="double" line="299">
                <comment line="300">
                    Overflow sensitive:                    
                </comment>
                <comment line="300">
                    return (Math.pow(mean,k) / cephes.Arithmetic.factorial(k)) * Math.exp(-this.mean);                    
                </comment>
            </method>
            <javadoc line="305">
                Sets the mean.                
            </javadoc>
            <method name="setMean" type="void" line="308"/>
            <javadoc line="311">
                Returns a random number from the distribution with the given mean.                
            </javadoc>
            <method name="staticNextInt" type="int" line="314">
                <scope line="315"/>
            </method>
            <javadoc line="320">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="323"/>
            <javadoc line="326">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <@param>
                    m randomGenerator the new uniform random number generator to be shared.                    
                </@param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="330">
                <scope line="331"/>
            </method>
        </class>
    </source>