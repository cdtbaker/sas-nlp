<?xml version="1.0" encoding="UTF-8"?>
    <source package="cern.jet.random">
        <import package="cern.jet.random.engine.RandomEngine"/>
        <class name="PoissonSlow" line="12">
            <extends class="AbstractDiscreteDistribution"/>
            <comment line="13">
                precomputed and cached values (for performance only)                
            </comment>
            <comment line="13">
                otected static final double MEAN_MAX = Integer.MAX_VALUE; // for all means larger than that, we don&apos;t try to compute a poisson deviation, but return the mean.                
            </comment>
            <comment line="13">
                otected static final double SWITCH_MEAN = 12.0; // switch from method A to method B                
            </comment>
            <comment line="13">
                The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
            </comment>
            <javadoc line="12">
                Poisson distribution; See the &lt;A HREF=&quot;http://www.cern.ch/RD11/rkb/AN16pp/node208.html#SECTION0002080000000000000000&quot;&gt; math definition&lt;/A&gt;
                  and &lt;A HREF=&quot;http://www.statsoft.com/textbook/glosp.html#Poisson Distribution&quot;&gt; animated definition&lt;/A&gt;.
                  &lt;p&gt;
                  &lt;tt&gt;p(k) = (mean^k / k!)  exp(-mean)&lt;/tt&gt; for &lt;tt&gt;k &amp;gt;= 0&lt;/tt&gt;.
                  &lt;p&gt;
                  Valid parameter ranges: &lt;tt&gt;mean &amp;gt; 0&lt;/tt&gt;.
                  Note: if &lt;tt&gt;mean &amp;lt;= 0.0&lt;/tt&gt; then always returns zero.
                  &lt;p&gt;
                  Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
                  &lt;dt&gt;
                  Static methods operate on a default uniform random number generator; they are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Implementation:&lt;/b&gt; 
                  This is a port of &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandPoisson.html&quot;&gt;RandPoisson&lt;/A&gt; used in &lt;A HREF=&quot;http://wwwinfo.cern.ch/asd/lhc++/clhep&quot;&gt;CLHEP 1.4.0&lt;/A&gt; (C++).
                  CLHEP&apos;s implementation, in turn, is based upon &quot;W.H.Press et al., Numerical Recipes in C, Second Edition&quot;.                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 1.0, 09/24/99                    
                </@version>
            </javadoc>
            <declaration name="mean" type="double" line="33"/>
            <declaration name="cached_sq" type="double" line="36"/>
            <declaration name="cached_alxm" type="double" line="37"/>
            <declaration name="cached_g" type="double" line="38"/>
            <declaration name="MEAN_MAX" type="double" line="40"/>
            <declaration name="SWITCH_MEAN" type="double" line="41"/>
            <declaration name="cof" type="double[]" line="43"/>
            <declaration name="shared" type="PoissonSlow" line="49"/>
            <javadoc line="50">
                Constructs a poisson distribution.
                  Example: mean=1.0.                
            </javadoc>
            <method name="PoissonSlow" type="constructor" line="54">
                <params>
                    <param name="mean" type="double"/>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
            </method>
            <javadoc line="58">
                Returns the value ln(Gamma(xx) for xx &gt; 0.  Full accuracy is obtained for 
                  xx &gt; 1. For 0 &lt; xx &lt; 1. the reflection formula (6.1.4) can be used first.
                  (Adapted from Numerical Recipes in C)                
            </javadoc>
            <method name="logGamma" type="double" line="63">
                <params>
                    <param name="xx" type="double"/>
                </params>
                <declaration name="x" type="double" line="64"/>
                <declaration name="tmp" type="double" line="65"/>
                <declaration name="ser" type="double" line="67"/>
                <declaration name="coeff" type="double[]" line="69"/>
                <scope line="70"/>
            </method>
            <javadoc line="76">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextInt" type="int" line="79"/>
            <javadoc line="82">
                Returns a random number from the distribution; bypasses the internal state.                
            </javadoc>
            <method name="nextInt" type="int" line="85">
                <params>
                    <param name="theMean" type="double"/>
                </params>
                <comment line="86">
                                        
                </comment>
                <comment line="86">
                    (xm == -1.0 ) return 0; // not defined                    
                </comment>
                <declaration name="xm" type="double" line="89"/>
                <declaration name="g" type="double" line="90"/>
                <scope line="93">
                    <declaration name="poisson" type="int" line="94"/>
                    <declaration name="product" type="double" line="95"/>
                    <scope line="96"/>
                </scope>
                <scope line="103">
                    <declaration name="t" type="double" line="104"/>
                    <declaration name="em" type="double" line="105"/>
                    <declaration name="sq" type="double" line="106"/>
                    <declaration name="alxm" type="double" line="107"/>
                    <declaration name="rand" type="RandomEngine" line="109"/>
                    <scope line="110">
                        <declaration name="y" type="double" line="111"/>
                        <scope line="112"/>
                    </scope>
                </scope>
                <scope line="121"/>
            </method>
            <javadoc line="125">
                Returns a random number from the distribution.                
            </javadoc>
            <method name="nextIntSlow" type="int" line="128">
                <comment line="129">
                    (product&lt;=0.0 &amp;&amp; bound&gt;0.0) return (int) Math.round(mean); // detected endless loop due to rounding errors                    
                </comment>
                <declaration name="bound" type="double" line="129"/>
                <declaration name="count" type="int" line="130"/>
                <declaration name="product" type="double" line="131"/>
                <scope line="132"/>
            </method>
            <javadoc line="138">
                Sets the mean.                
            </javadoc>
            <method name="setMean" type="void" line="141">
                <params>
                    <param name="mean" type="double"/>
                </params>
                <scope line="142">
                    <scope line="145"/>
                    <scope line="148"/>
                </scope>
            </method>
            <javadoc line="155">
                Returns a random number from the distribution with the given mean.                
            </javadoc>
            <method name="staticNextInt" type="int" line="158">
                <params>
                    <param name="mean" type="double"/>
                </params>
                <scope line="159"/>
            </method>
            <javadoc line="164">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="167"/>
            <javadoc line="170">
                Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.                
                <@param>
                    m randomGenerator the new uniform random number generator to be shared.                    
                </@param>
            </javadoc>
            <method name="xstaticSetRandomGenerator" type="void" line="174">
                <params>
                    <param name="randomGenerator" type="RandomEngine"/>
                </params>
                <scope line="175"/>
            </method>
        </class>
    </source>