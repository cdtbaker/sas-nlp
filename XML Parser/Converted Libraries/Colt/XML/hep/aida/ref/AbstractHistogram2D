<?xml version="1.0" encoding="UTF-8"?>
    <source package="hep.aida.ref">
        <import package="hep.aida.IAxis"/>
        <import package="hep.aida.IHistogram"/>
        <import package="hep.aida.IHistogram1D"/>
        <import package="hep.aida.IHistogram2D"/>
        <class name="AbstractHistogram2D" extends="Histogram" line="7">
            <implements interface="IHistogram2D"/>
            <javadoc line="7">
                Abstract base class extracting and implementing most of the redundancy of the interface.                
                <@author>
                    r Wolfgang Hoschek, Tony Johnson, and others.                    
                </@author>
                <@version>
                    n 1.0, 23/03/2000                    
                </@version>
            </javadoc>
            <declaration name="xAxis" type="IAxis" line="15"/>
            <method name="AbstractHistogram2D" type="constructor" line="17"/>
            <method name="allEntries" type="int" line="21">
                <declaration name="n" type="int" line="22"/>
                <scope line="25"/>
            </method>
            <method name="binEntriesX" type="int" line="31"/>
            <method name="binEntriesY" type="int" line="35"/>
            <method name="binHeightX" type="double" line="39"/>
            <method name="binHeightY" type="double" line="43"/>
            <method name="dimensions" type="int" line="47"/>
            <method name="entries" type="int" line="51">
                <declaration name="n" type="int" line="52"/>
                <scope line="55"/>
            </method>
            <method name="extraEntries" type="int" line="61"/>
            <method name="fill" type="void" line="65"/>
            <method name="internalSliceX" type="IHistogram1D" line="68"/>
            <javadoc line="68">
                The precise meaning of the arguments to the public slice
                 * methods is somewhat ambiguous, so we define this internal
                 * slice method and clearly specify its arguments.
                 * &lt;p&gt;
                 * &lt;b&gt;Note 0&lt;/b&gt;indexY1 and indexY2 use our INTERNAL bin numbering scheme
                 * &lt;b&gt;Note 1&lt;/b&gt;The slice is done between indexY1 and indexY2 INCLUSIVE
                 * &lt;b&gt;Note 2&lt;/b&gt;indexY1 and indexY2 may include the use of under and over flow bins
                 * &lt;b&gt;Note 3&lt;/b&gt;There is no note 3 (yet)                
            </javadoc>
            <method name="internalSliceY" type="IHistogram1D" line="79"/>
            <javadoc line="79">
                The precise meaning of the arguments to the public slice
                 * methods is somewhat ambiguous, so we define this internal
                 * slice method and clearly specify its arguments.
                 * &lt;p&gt;
                 * &lt;b&gt;Note 0&lt;/b&gt;indexX1 and indexX2 use our INTERNAL bin numbering scheme
                 * &lt;b&gt;Note 1&lt;/b&gt;The slice is done between indexX1 and indexX2 INCLUSIVE
                 * &lt;b&gt;Note 2&lt;/b&gt;indexX1 and indexX2 may include the use of under and over flow bins
                 * &lt;b&gt;Note 3&lt;/b&gt;There is no note 3 (yet)                
            </javadoc>
            <javadoc line="90">
                Package private method to map from the external representation of bin
                 * number to our internal representation of bin number                
            </javadoc>
            <method name="mapX" type="int" line="95">
                <declaration name="bins" type="int" line="96"/>
            </method>
            <javadoc line="103">
                Package private method to map from the external representation of bin
                 * number to our internal representation of bin number                
            </javadoc>
            <method name="mapY" type="int" line="108">
                <declaration name="bins" type="int" line="109"/>
            </method>
            <method name="minMaxBins" type="int[]" line="117">
                <declaration name="minValue" type="double" line="118"/>
                <declaration name="maxValue" type="double" line="119"/>
                <declaration name="minBinX" type="int" line="120"/>
                <declaration name="minBinY" type="int" line="121"/>
                <declaration name="maxBinX" type="int" line="122"/>
                <declaration name="maxBinY" type="int" line="123"/>
                <scope line="124">
                    <scope line="125">
                        <declaration name="value" type="double" line="126"/>
                        <scope line="127"/>
                        <scope line="132"/>
                    </scope>
                </scope>
                <declaration name="result" type="int[]" line="139"/>
            </method>
            <method name="projectionX" type="IHistogram1D" line="143">
                <comment line="144">
                    return internalSliceX(newTitle,yAxis.under,yAxis.over);                    
                </comment>
                <declaration name="newTitle" type="String" line="144"/>
            </method>
            <method name="projectionY" type="IHistogram1D" line="149">
                <comment line="150">
                    return internalSliceY(newTitle,xAxis.under,xAxis.over);                    
                </comment>
                <declaration name="newTitle" type="String" line="150"/>
            </method>
            <method name="sliceX" type="IHistogram1D" line="155">
                <comment line="156">
                    int start = yAxis.map(indexY);                    
                </comment>
                <declaration name="start" type="int" line="157"/>
                <declaration name="newTitle" type="String" line="158"/>
            </method>
            <method name="sliceX" type="IHistogram1D" line="162">
                <comment line="163">
                    int start = yAxis.map(indexY1);                    
                </comment>
                <comment line="163">
                    int stop = yAxis.map(indexY2);                    
                </comment>
                <declaration name="start" type="int" line="165"/>
                <declaration name="stop" type="int" line="166"/>
                <declaration name="newTitle" type="String" line="167"/>
            </method>
            <method name="sliceY" type="IHistogram1D" line="171">
                <comment line="172">
                    int start = xAxis.map(indexX);                    
                </comment>
                <declaration name="start" type="int" line="173"/>
                <declaration name="newTitle" type="String" line="174"/>
            </method>
            <method name="sliceY" type="IHistogram1D" line="178">
                <comment line="179">
                    int start = xAxis.map(indexX1);                    
                </comment>
                <comment line="179">
                    int stop = xAxis.map(indexX2);                    
                </comment>
                <declaration name="start" type="int" line="181"/>
                <declaration name="stop" type="int" line="182"/>
                <declaration name="newTitle" type="String" line="183"/>
            </method>
            <method name="sumAllBinHeights" type="double" line="187">
                <declaration name="n" type="double" line="188"/>
                <scope line="191"/>
            </method>
            <method name="sumBinHeights" type="double" line="197">
                <declaration name="n" type="double" line="198"/>
                <scope line="201"/>
            </method>
            <method name="sumExtraBinHeights" type="double" line="207"/>
            <method name="xAxis" type="IAxis" line="211"/>
            <method name="yAxis" type="IAxis" line="215"/>
        </class>
    </source>