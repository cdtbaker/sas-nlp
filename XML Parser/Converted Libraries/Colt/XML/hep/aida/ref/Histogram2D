<?xml version="1.0" encoding="UTF-8"?>
    <source package="hep.aida.ref">
        <import package="hep.aida.IAxis"/>
        <import package="hep.aida.IHistogram1D"/>
        <import package="hep.aida.IHistogram2D"/>
        <class name="Histogram2D" extends="AbstractHistogram2D" line="6">
            <comment line="7">
                ivate int nEntry; // total number of times fill called                
            </comment>
            <comment line="7">
                ivate double sumWeight; // Sum of all weights                
            </comment>
            <comment line="7">
                ivate double sumWeightSquared; // Sum of the squares of the weights                
            </comment>
            <implements interface="IHistogram2D"/>
            <javadoc line="6">
                A reference implementation of hep.aida.IHistogram2D.
                 * The goal is to provide a clear implementation rather than the most efficient implementation.
                 * However, performance seems fine - filling 6 * 10^5 points/sec, both using FixedAxis or VariableAxis.                
                <@author>
                    r Wolfgang Hoschek, Tony Johnson, and others.                    
                </@author>
                <@version>
                    n 1.0, 23/03/2000                    
                </@version>
            </javadoc>
            <declaration name="heights" type="double[][]" line="16"/>
            <declaration name="errors" type="double[][]" line="17"/>
            <declaration name="entries" type="int[][]" line="18"/>
            <declaration name="nEntry" type="int" line="19"/>
            <declaration name="sumWeight" type="double" line="20"/>
            <declaration name="sumWeightSquared" type="double" line="21"/>
            <declaration name="meanX" type="double" line="22"/>
            <declaration name="meanY" type="double" line="23"/>
            <javadoc line="24">
                Creates a variable-width histogram.
                 * Example: &lt;tt&gt;xEdges = (0.2, 1.0, 5.0, 6.0), yEdges = (-5, 0, 7)&lt;/tt&gt; yields 3*2 in-range bins.                
                <@param>
                    m title The histogram title.                    
                </@param>
                <@param>
                    m xEdges the bin boundaries the x-axis shall have;
                     * must be sorted ascending and must not contain multiple identical elements.                    
                </@param>
                <@param>
                    m yEdges the bin boundaries the y-axis shall have;
                     * must be sorted ascending and must not contain multiple identical elements.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if <tt>xEdges.length < 1 || yEdges.length < 1</tt>.                    
                </@throws>
            </javadoc>
            <method name="Histogram2D" type="constructor" line="35"/>
            <javadoc line="38">
                Creates a fixed-width histogram.                
                <@param>
                    m title The histogram title.                    
                </@param>
                <@param>
                    m xBins The number of bins on the X axis.                    
                </@param>
                <@param>
                    m xMin The minimum value on the X axis.                    
                </@param>
                <@param>
                    m xMax The maximum value on the X axis.                    
                </@param>
                <@param>
                    m yBins The number of bins on the Y axis.                    
                </@param>
                <@param>
                    m yMin The minimum value on the Y axis.                    
                </@param>
                <@param>
                    m yMax The maximum value on the Y axis.                    
                </@param>
            </javadoc>
            <method name="Histogram2D" type="constructor" line="51"/>
            <javadoc line="54">
                Creates a histogram with the given axis binning.                
                <@param>
                    m title The histogram title.                    
                </@param>
                <@param>
                    m xAxis The x-axis description to be used for binning.                    
                </@param>
                <@param>
                    m yAxis The y-axis description to be used for binning.                    
                </@param>
            </javadoc>
            <method name="Histogram2D" type="constructor" line="62">
                <declaration name="xBins" type="int" line="66"/>
                <declaration name="yBins" type="int" line="67"/>
            </method>
            <method name="allEntries" type="int" line="75"/>
            <method name="binEntries" type="int" line="79">
                <comment line="80">
                    return entries[xAxis.map(indexX)][yAxis.map(indexY)];                    
                </comment>
            </method>
            <method name="binError" type="double" line="84">
                <comment line="85">
                    return Math.sqrt(errors[xAxis.map(indexX)][yAxis.map(indexY)]);                    
                </comment>
            </method>
            <method name="binHeight" type="double" line="89">
                <comment line="90">
                    return heights[xAxis.map(indexX)][yAxis.map(indexY)];                    
                </comment>
            </method>
            <method name="equivalentBinEntries" type="double" line="94"/>
            <method name="fill" type="void" line="98">
                <comment line="99">
                    int xBin = xAxis.getBin(x);                    
                </comment>
                <comment line="99">
                    int yBin = xAxis.getBin(y);                    
                </comment>
                <declaration name="xBin" type="int" line="101"/>
                <declaration name="yBin" type="int" line="102"/>
            </method>
            <method name="fill" type="void" line="115">
                <comment line="116">
                    int xBin = xAxis.getBin(x);                    
                </comment>
                <comment line="116">
                    int yBin = xAxis.getBin(y);                    
                </comment>
                <declaration name="xBin" type="int" line="118"/>
                <declaration name="yBin" type="int" line="119"/>
            </method>
            <javadoc line="131">
                The precise meaning of the arguments to the public slice
                 * methods is somewhat ambiguous, so we define this internal
                 * slice method and clearly specify its arguments.
                 * &lt;p&gt;
                 * &lt;b&gt;Note 0&lt;/b&gt;indexY1 and indexY2 use our INTERNAL bin numbering scheme
                 * &lt;b&gt;Note 1&lt;/b&gt;The slice is done between indexY1 and indexY2 INCLUSIVE
                 * &lt;b&gt;Note 2&lt;/b&gt;indexY1 and indexY2 may include the use of under and over flow bins
                 * &lt;b&gt;Note 3&lt;/b&gt;There is no note 3 (yet)                
            </javadoc>
            <method name="internalSliceX" type="IHistogram1D" line="142">
                <comment line="143">
                    Attention: our internal definition of bins has been choosen                    
                </comment>
                <comment line="143">
                    so that this works properly even if the indeces passed in include                    
                </comment>
                <comment line="143">
                    the underflow or overflow bins                    
                </comment>
                <comment line="143">
                    for (int i=xAxis.under; i&lt;=xAxis.over; i++)                    
                </comment>
                <declaration name="sliceBins" type="int" line="148"/>
                <declaration name="sliceEntries" type="int[]" line="149"/>
                <declaration name="sliceHeights" type="double[]" line="150"/>
                <declaration name="sliceErrors" type="double[]" line="151"/>
                <scope line="155">
                    <scope line="157"/>
                </scope>
                <declaration name="result" type="Histogram1D" line="163"/>
            </method>
            <javadoc line="167">
                The precise meaning of the arguments to the public slice
                 * methods is somewhat ambiguous, so we define this internal
                 * slice method and clearly specify its arguments.
                 * &lt;p&gt;
                 * &lt;b&gt;Note 0&lt;/b&gt;indexX1 and indexX2 use our INTERNAL bin numbering scheme
                 * &lt;b&gt;Note 1&lt;/b&gt;The slice is done between indexX1 and indexX2 INCLUSIVE
                 * &lt;b&gt;Note 2&lt;/b&gt;indexX1 and indexX2 may include the use of under and over flow bins
                 * &lt;b&gt;Note 3&lt;/b&gt;There is no note 3 (yet)                
            </javadoc>
            <method name="internalSliceY" type="IHistogram1D" line="178">
                <comment line="179">
                    Attention: our internal definition of bins has been choosen                    
                </comment>
                <comment line="179">
                    so that this works properly even if the indeces passed in include                    
                </comment>
                <comment line="179">
                    the underflow or overflow bins                    
                </comment>
                <declaration name="sliceBins" type="int" line="184"/>
                <declaration name="sliceEntries" type="int[]" line="185"/>
                <declaration name="sliceHeights" type="double[]" line="186"/>
                <declaration name="sliceErrors" type="double[]" line="187"/>
                <scope line="190">
                    <scope line="193"/>
                </scope>
                <declaration name="result" type="Histogram1D" line="199"/>
            </method>
            <method name="meanX" type="double" line="204"/>
            <method name="meanY" type="double" line="208"/>
            <method name="reset" type="void" line="212">
                <scope line="215"/>
            </method>
            <method name="rmsX" type="double" line="229"/>
            <method name="rmsY" type="double" line="233"/>
            <javadoc line="236">
                Used internally for creating slices and projections                
            </javadoc>
            <method name="setContents" type="void" line="240">
                <comment line="241">
                    TODO: Can we do anything sensible/useful with the other statistics?                    
                </comment>
                <scope line="247"/>
            </method>
            <method name="sumAllBinHeights" type="double" line="259"/>
        </class>
    </source>