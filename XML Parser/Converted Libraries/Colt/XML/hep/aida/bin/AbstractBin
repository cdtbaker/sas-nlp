<?xml version="1.0" encoding="UTF-8"?>
    <source package="hep.aida.bin">
        <class name="AbstractBin" line="3">
            <extends class="cern.colt.PersistentObject"/>
            <javadoc line="3">
                Abstract base class for all arbitrary-dimensional bins consumes &lt;tt&gt;double&lt;/tt&gt; elements.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  This class is fully thread safe (all public methods are synchronized).
                  Thus, you can have one or more threads adding to the bin as well as one or more threads reading and viewing the statistics of the bin &lt;i&gt;while it is filled&lt;/i&gt;.
                  For high performance, add data in large chunks (buffers) via method &lt;tt&gt;addAllOf&lt;/tt&gt; rather than piecewise via method &lt;tt&gt;add&lt;/tt&gt;.                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 0.9, 03-Jul-99                    
                </@version>
            </javadoc>
            <javadoc line="15">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="AbstractBin" type="constructor" line="18"/>
            <javadoc line="20">
                Returns &lt;tt&gt;center(0)&lt;/tt&gt;.                
            </javadoc>
            <method name="center" type="double" line="23"/>
            <javadoc line="26">
                Returns a custom definable &quot;center&quot; measure; override this method if necessary.
                  Returns the absolute or relative center of this bin.
                  For example, the center of gravity.
                  The &lt;i&gt;real&lt;/i&gt; absolute center can be obtained as follow:
                  &lt;tt&gt;partition(i).min(j)  bin(j).offset() + bin(j).center(i)&lt;/tt&gt;,
                  where &lt;tt&gt;i&lt;/tt&gt; is the dimension.
                  and &lt;tt&gt;j&lt;/tt&gt; is the index of this bin.
                  &lt;p&gt;This default implementation always returns 0.5.                
                <@param>
                    m dimension the dimension to be considered (zero based).                    
                </@param>
            </javadoc>
            <method name="center" type="double" line="40">
                <params>
                    <param name="dimension" type="int"/>
                </params>
            </method>
            <method name="clear" type="void" line="43"/>
            <javadoc line="43">
                Removes all elements from the receiver.
                  The receiver will be empty after this call returns.                
            </javadoc>
            <javadoc line="48">
                Returns whether two objects are equal;
                  This default implementation returns true if the other object is a bin 
                  and has the same size, value, error and center.                
            </javadoc>
            <method name="equals" type="boolean" line="53">
                <params>
                    <param name="otherObj" type="Object"/>
                </params>
                <declaration name="other" type="AbstractBin" line="55"/>
            </method>
            <javadoc line="58">
                Returns &lt;tt&gt;error(0)&lt;/tt&gt;.                
            </javadoc>
            <method name="error" type="double" line="61"/>
            <javadoc line="64">
                Returns a custom definable error measure; override this method if necessary.
                  This default implementation always returns &lt;tt&gt;0&lt;/tt&gt;.                
                <@param>
                    m dimension the dimension to be considered.                    
                </@param>
            </javadoc>
            <method name="error" type="double" line="70">
                <params>
                    <param name="dimension" type="int"/>
                </params>
            </method>
            <method name="isRebinnable" type="boolean" line="73"/>
            <javadoc line="73">
                Returns whether a client can obtain all elements added to the receiver.
                  In other words, tells whether the receiver internally preserves all added elements.
                  If the receiver is rebinnable, the elements can be obtained via &lt;tt&gt;elements()&lt;/tt&gt; methods.                
            </javadoc>
            <javadoc line="79">
                Returns &lt;tt&gt;offset(0)&lt;/tt&gt;.                
            </javadoc>
            <method name="offset" type="double" line="82"/>
            <javadoc line="85">
                Returns the relative or absolute position for the center of the bin; override this method if necessary.
                  Returns 1.0 if a relative center is stored in the bin.
                  Returns 0.0 if an absolute center is stored in the bin.
                  &lt;p&gt;This default implementation always returns 1.0 (relative).                
                <@param>
                    m dimension the index of the considered dimension (zero based);                    
                </@param>
            </javadoc>
            <method name="offset" type="double" line="94">
                <params>
                    <param name="dimension" type="int"/>
                </params>
            </method>
            <method name="size" type="int" line="97"/>
            <javadoc line="97">
                Returns the number of elements contained.                
                <@returns>
                    s the number of elements contained.                    
                </@returns>
            </javadoc>
            <javadoc line="103">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="106">
                <comment line="107">
                    buf.append(&quot;\nValue: &quot;+value());
                    buf.append(&quot;\nError: &quot;+error());                    
                </comment>
                <declaration name="buf" type="StringBuffer" line="107"/>
            </method>
            <javadoc line="118">
                Trims the capacity of the receiver to be the receiver&apos;s current size.
                  Releases any superfluos internal memory.
                  An application can use this operation to minimize the storage of the receiver.
                  This default implementation does nothing.                
            </javadoc>
            <method name="trimToSize" type="void" line="125"/>
            <javadoc line="126">
                Returns &lt;tt&gt;value(0)&lt;/tt&gt;.                
            </javadoc>
            <method name="value" type="double" line="129"/>
            <javadoc line="132">
                Returns a custom definable &quot;value&quot; measure; override this method if necessary.
                  &lt;p&gt;This default implementation always returns 0.0.                
                <@param>
                    m dimension the dimension to be considered.                    
                </@param>
            </javadoc>
            <method name="value" type="double" line="138">
                <params>
                    <param name="dimension" type="int"/>
                </params>
            </method>
        </class>
    </source>