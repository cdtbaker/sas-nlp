<?xml version="1.0" encoding="UTF-8"?>
    <source package="hep.aida.bin">
        <import package="cern.colt.list.DoubleArrayList"/>
        <import package="cern.jet.stat.Descriptive"/>
        <class name="AbstractBin1D" line="5">
            <extends class="AbstractBin"/>
            <implements interface="cern.colt.buffer.DoubleBufferConsumer"/>
            <javadoc line="5">
                Abstract base class for all 1-dimensional bins consumes &lt;tt&gt;double&lt;/tt&gt; elements.
                  First see the &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; and javadoc &lt;a href=&quot;package-tree.html&quot;&gt;tree view&lt;/a&gt; to get the broad picture.
                  &lt;p&gt;
                  This class is fully thread safe (all public methods are synchronized).
                  Thus, you can have one or more threads adding to the bin as well as one or more threads reading and viewing the statistics of the bin &lt;i&gt;while it is filled&lt;/i&gt;.
                  For high performance, add data in large chunks (buffers) via method &lt;tt&gt;addAllOf&lt;/tt&gt; rather than piecewise via method &lt;tt&gt;add&lt;/tt&gt;.                
                <@author>
                    r wolfgang.hoschek@cern.ch                    
                </@author>
                <@version>
                    n 0.9, 03-Jul-99                    
                </@version>
            </javadoc>
            <javadoc line="17">
                Makes this class non instantiable, but still let&apos;s others inherit from it.                
            </javadoc>
            <method name="AbstractBin1D" type="constructor" line="20"/>
            <method name="add" type="void" line="22"/>
            <javadoc line="22">
                Adds the specified element to the receiver.                
                <@param>
                    m element element to be appended.                    
                </@param>
            </javadoc>
            <javadoc line="28">
                Adds all values of the specified list to the receiver.                
                <@param>
                    m list the list of which all values shall be added.                    
                </@param>
            </javadoc>
            <method name="addAllOf" type="void" line="32">
                <params>
                    <param name="list" type="DoubleArrayList"/>
                </params>
            </method>
            <javadoc line="35">
                Adds the part of the specified list between indexes &lt;tt&gt;from&lt;/tt&gt; (inclusive) and &lt;tt&gt;to&lt;/tt&gt; (inclusive) to the receiver.
                  You may want to override this method for performance reasons.                
                <@param>
                    m list the list of which elements shall be added.                    
                </@param>
                <@param>
                    m from the index of the first element to be added (inclusive).                    
                </@param>
                <@param>
                    m to the index of the last element to be added (inclusive).                    
                </@param>
                <@throws>
                    s IndexOutOfBoundsException if <tt>list.size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=list.size())</tt>.                    
                </@throws>
            </javadoc>
            <method name="addAllOfFromTo" type="void" line="44">
                <params>
                    <param name="list" type="DoubleArrayList"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
            </method>
            <javadoc line="47">
                Constructs and returns a streaming buffer connected to the receiver.
                  Whenever the buffer is full it&apos;s contents are automatically flushed to &lt;tt&gt;this&lt;/tt&gt;. 
                  (Addding elements via a buffer to a bin is significantly faster than adding them directly.)                
                <@param>
                    m capacity the number of elements the buffer shall be capable of holding before overflowing and flushing to the receiver.                    
                </@param>
                <@return>
                    n a streaming buffer having the receiver as target.                    
                </@return>
            </javadoc>
            <method name="buffered" type="cern.colt.buffer.DoubleBuffer" line="54">
                <params>
                    <param name="capacity" type="int"/>
                </params>
            </method>
            <javadoc line="57">
                Computes the deviations from the receiver&apos;s measures to another bin&apos;s measures.                
                <@param>
                    m other the other bin to compare with                    
                </@param>
                <@return>
                    n a summary of the deviations.                    
                </@return>
            </javadoc>
            <method name="compareWith" type="String" line="62">
                <params>
                    <param name="other" type="AbstractBin1D"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="63"/>
            </method>
            <javadoc line="78">
                Returns whether two bins are equal; 
                  They are equal if the other object is of the same class or a subclass of this class and both have the same size, minimum, maximum, sum and sumOfSquares.                
            </javadoc>
            <method name="equals" type="boolean" line="82">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <declaration name="other" type="AbstractBin1D" line="84"/>
            </method>
            <method name="max" type="double" line="88"/>
            <javadoc line="88">
                Returns the maximum.                
            </javadoc>
            <javadoc line="92">
                Returns the arithmetic mean, which is &lt;tt&gt;Sum( x[i] ) / size()&lt;/tt&gt;.                
            </javadoc>
            <method name="mean" type="double" line="95"/>
            <method name="min" type="double" line="98"/>
            <javadoc line="98">
                Returns the minimum.                
            </javadoc>
            <javadoc line="102">
                Computes the relative error (in percent) from one measure to another.                
            </javadoc>
            <method name="relError" type="double" line="105">
                <params>
                    <param name="measure1" type="double"/>
                    <param name="measure2" type="double"/>
                </params>
            </method>
            <javadoc line="108">
                Returns the rms (Root Mean Square), which is &lt;tt&gt;Math.sqrt( Sum( x[i]x[i] ) / size() )&lt;/tt&gt;.                
            </javadoc>
            <method name="rms" type="double" line="111"/>
            <javadoc line="114">
                Returns the sample standard deviation, which is &lt;tt&gt;Math.sqrt(variance())&lt;/tt&gt;.                
            </javadoc>
            <method name="standardDeviation" type="double" line="117"/>
            <javadoc line="120">
                Returns the sample standard error, which is &lt;tt&gt;Math.sqrt(variance() / size())&lt;/tt&gt;                
            </javadoc>
            <method name="standardError" type="double" line="123"/>
            <method name="sum" type="double" line="126"/>
            <javadoc line="126">
                Returns the sum of all elements, which is &lt;tt&gt;Sum( x[i] )&lt;/tt&gt;.                
            </javadoc>
            <method name="sumOfSquares" type="double" line="130"/>
            <javadoc line="130">
                Returns the sum of squares, which is &lt;tt&gt;Sum( x[i]  x[i] )&lt;/tt&gt;.                
            </javadoc>
            <javadoc line="134">
                Returns a String representation of the receiver.                
            </javadoc>
            <method name="toString" type="String" line="137">
                <comment line="138">
                    buf.append(&quot;\nValue: &quot;+value());
                    buf.append(&quot;\nError(0): &quot;+error(0));                    
                </comment>
                <declaration name="buf" type="StringBuffer" line="138"/>
            </method>
            <javadoc line="158">
                Trims the capacity of the receiver to be the receiver&apos;s current size.
                  Releases any superfluos internal memory.
                  An application can use this operation to minimize the storage of the receiver.
                  This default implementation does nothing.                
            </javadoc>
            <method name="trimToSize" type="void" line="164"/>
            <javadoc line="165">
                Returns the sample variance, which is &lt;tt&gt;Sum( (x[i]-mean())&lt;sup&gt;2&lt;/sup&gt; )  /  (size()-1)&lt;/tt&gt;.                
            </javadoc>
            <method name="variance" type="double" line="168"/>
        </class>
    </source>