<?xml version="1.0" encoding="UTF-8"?>
<source package="hep.aida.ref">
  <import name="hep.aida.IAxis" />
  <import name="hep.aida.IHistogram" />
  <import name="hep.aida.IHistogram2D" />
  <import name="hep.aida.IHistogram3D" />
  <class name="AbstractHistogram3D" extends="Histogram" startLine="7">
    <implements name="IHistogram3D" />
    <javadoc>
      <text>* Abstract base class extracting and implementing most of the redundancy of the interface.</text>
      <author>Wolfgang Hoschek, Tony Johnson, and others.</author>
      <version>1.0, 23/03/2000</version>
    </javadoc>
    <declaration type="IAxis" name="xAxis" />
    <method type="constructor" name="AbstractHistogram3D" startLine="17" endLine="19" />
    <method type="int" name="allEntries" startLine="21" endLine="30">
      <declaration type="int" name="n" />
      <scope startLine="26" endLine="28" />
    </method>
    <method type="int" name="dimensions" startLine="32" endLine="34" />
    <method type="int" name="entries" startLine="36" endLine="45">
      <declaration type="int" name="n" />
      <scope startLine="41" endLine="43" />
    </method>
    <method type="int" name="extraEntries" startLine="47" endLine="49" />
    <method type="void" name="fill" startLine="51" endLine="53" />
    <method name="internalSliceXY" type="IHistogram2D" startLine="54" endLine="64" />
    <javadoc>
      <text>* The precise meaning of the arguments to the public slice
 * methods is somewhat ambiguous, so we define this internal
 * slice method and clearly specify its arguments.
 * <p>
 * <b>Note 0</b>indexX1 and indexX2 use our INTERNAL bin numbering scheme
 * <b>Note 1</b>The slice is done between indexX1 and indexX2 INCLUSIVE
 * <b>Note 2</b>indexX1 and indexX2 may include the use of under and over flow bins
 * <b>Note 3</b>There is no note 3 (yet)</text>
    </javadoc>
    <method name="internalSliceXZ" type="IHistogram2D" startLine="65" endLine="75" />
    <javadoc>
      <text>* The precise meaning of the arguments to the public slice
 * methods is somewhat ambiguous, so we define this internal
 * slice method and clearly specify its arguments.
 * <p>
 * <b>Note 0</b>indexY1 and indexY2 use our INTERNAL bin numbering scheme
 * <b>Note 1</b>The slice is done between indexY1 and indexY2 INCLUSIVE
 * <b>Note 2</b>indexY1 and indexY2 may include the use of under and over flow bins
 * <b>Note 3</b>There is no note 3 (yet)</text>
    </javadoc>
    <method name="internalSliceYZ" type="IHistogram2D" startLine="76" endLine="86" />
    <javadoc>
      <text>* The precise meaning of the arguments to the public slice
 * methods is somewhat ambiguous, so we define this internal
 * slice method and clearly specify its arguments.
 * <p>
 * <b>Note 0</b>indexX1 and indexX2 use our INTERNAL bin numbering scheme
 * <b>Note 1</b>The slice is done between indexX1 and indexX2 INCLUSIVE
 * <b>Note 2</b>indexX1 and indexX2 may include the use of under and over flow bins
 * <b>Note 3</b>There is no note 3 (yet)</text>
    </javadoc>
    <javadoc>
      <text>* Package private method to map from the external representation of bin
 * number to our internal representation of bin number</text>
    </javadoc>
    <method type="int" name="mapX" startLine="92" endLine="99">
      <declaration type="int" name="bins" />
    </method>
    <javadoc>
      <text>* Package private method to map from the external representation of bin
 * number to our internal representation of bin number</text>
    </javadoc>
    <method type="int" name="mapY" startLine="105" endLine="112">
      <declaration type="int" name="bins" />
    </method>
    <javadoc>
      <text>* Package private method to map from the external representation of bin
 * number to our internal representation of bin number</text>
    </javadoc>
    <method type="int" name="mapZ" startLine="118" endLine="125">
      <declaration type="int" name="bins" />
    </method>
    <method type="int[]" name="minMaxBins" startLine="127" endLine="157">
      <declaration type="double" name="minValue" />
      <declaration type="double" name="maxValue" />
      <declaration type="int" name="minBinX" />
      <declaration type="int" name="minBinY" />
      <declaration type="int" name="minBinZ" />
      <declaration type="int" name="maxBinX" />
      <declaration type="int" name="maxBinY" />
      <declaration type="int" name="maxBinZ" />
      <scope startLine="136" endLine="154">
        <scope startLine="137" endLine="153">
          <scope startLine="138" endLine="152">
            <declaration type="double" name="value" />
            <scope startLine="140" endLine="145" />
            <scope startLine="146" endLine="151" />
          </scope>
        </scope>
      </scope>
      <declaration type="int[]" name="result" />
    </method>
    <method type="IHistogram2D" name="projectionXY" startLine="159" endLine="162">
      <declaration type="String" name="newTitle" />
    </method>
    <method type="IHistogram2D" name="projectionXZ" startLine="164" endLine="167">
      <declaration type="String" name="newTitle" />
    </method>
    <method type="IHistogram2D" name="projectionYZ" startLine="169" endLine="172">
      <declaration type="String" name="newTitle" />
    </method>
    <method type="IHistogram2D" name="sliceXY" startLine="174" endLine="176" />
    <method type="IHistogram2D" name="sliceXY" startLine="178" endLine="183">
      <declaration type="int" name="start" />
      <declaration type="int" name="stop" />
      <declaration type="String" name="newTitle" />
    </method>
    <method type="IHistogram2D" name="sliceXZ" startLine="185" endLine="187" />
    <method type="IHistogram2D" name="sliceXZ" startLine="189" endLine="194">
      <declaration type="int" name="start" />
      <declaration type="int" name="stop" />
      <declaration type="String" name="newTitle" />
    </method>
    <method type="IHistogram2D" name="sliceYZ" startLine="196" endLine="198" />
    <method type="IHistogram2D" name="sliceYZ" startLine="200" endLine="205">
      <declaration type="int" name="start" />
      <declaration type="int" name="stop" />
      <declaration type="String" name="newTitle" />
    </method>
    <method type="double" name="sumAllBinHeights" startLine="207" endLine="216">
      <declaration type="double" name="n" />
      <scope startLine="212" endLine="214" />
    </method>
    <method type="double" name="sumBinHeights" startLine="218" endLine="227">
      <declaration type="double" name="n" />
      <scope startLine="223" endLine="225" />
    </method>
    <method type="double" name="sumExtraBinHeights" startLine="229" endLine="231" />
    <method type="IAxis" name="xAxis" startLine="233" endLine="235" />
    <method type="IAxis" name="yAxis" startLine="237" endLine="239" />
    <method type="IAxis" name="zAxis" startLine="241" endLine="243" />
  </class>
</source>
