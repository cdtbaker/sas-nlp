<?xml version="1.0" encoding="UTF-8"?>
<source package="hep.aida.ref">
  <import name="hep.aida.IAxis" />
  <import name="hep.aida.IHistogram2D" />
  <import name="hep.aida.IHistogram3D" />
  <class name="Histogram3D" extends="AbstractHistogram3D" startLine="6">
    <implements name="IHistogram3D" />
    <javadoc>
      <text>* A reference implementation of hep.aida.IHistogram3D.
 * The goal is to provide a clear implementation rather than the most efficient implementation.
 * However, performance seems fine - filling 3 * 10^5 points/sec, both using FixedAxis or VariableAxis.</text>
      <author>Wolfgang Hoschek, Tony Johnson, and others.</author>
      <version>1.0, 23/03/2000</version>
    </javadoc>
    <declaration type="double[][][]" name="heights" />
    <declaration type="double[][][]" name="errors" />
    <declaration type="int[][][]" name="entries" />
    <declaration type="int" name="nEntry" />
    <declaration type="double" name="sumWeight" />
    <declaration type="double" name="sumWeightSquared" />
    <declaration type="double" name="meanX" />
    <declaration type="double" name="meanY" />
    <declaration type="double" name="meanZ" />
    <javadoc>
      <text>* Creates a variable-width histogram.
 * Example: <tt>xEdges = (0.2, 1.0, 5.0, 6.0), yEdges = (-5, 0, 7), zEdges = (-5, 0, 7)</tt> yields 3*2*2 in-range bins.</text>
      <param>title The histogram title.</param>
      <param>xEdges the bin boundaries the x-axis shall have;
 * must be sorted ascending and must not contain multiple identical elements.</param>
      <param>yEdges the bin boundaries the y-axis shall have;
 * must be sorted ascending and must not contain multiple identical elements.</param>
      <param>zEdges the bin boundaries the z-axis shall have;
 * must be sorted ascending and must not contain multiple identical elements.</param>
      <throws>IllegalArgumentException if <tt>xEdges.length < 1 || yEdges.length < 1|| zEdges.length < 1</tt>.</throws>
    </javadoc>
    <method type="constructor" name="Histogram3D" startLine="38" endLine="40" />
    <javadoc>
      <text>* Creates a fixed-width histogram.</text>
      <param>title The histogram title.</param>
      <param>xBins The number of bins on the X axis.</param>
      <param>xMin The minimum value on the X axis.</param>
      <param>xMax The maximum value on the X axis.</param>
      <param>yBins The number of bins on the Y axis.</param>
      <param>yMin The minimum value on the Y axis.</param>
      <param>yMax The maximum value on the Y axis.</param>
      <param>zBins The number of bins on the Z axis.</param>
      <param>zMin The minimum value on the Z axis.</param>
      <param>zMax The maximum value on the Z axis.</param>
    </javadoc>
    <method type="constructor" name="Histogram3D" startLine="58" endLine="60" />
    <javadoc>
      <text>* Creates a histogram with the given axis binning.</text>
      <param>title The histogram title.</param>
      <param>xAxis The x-axis description to be used for binning.</param>
      <param>yAxis The y-axis description to be used for binning.</param>
      <param>zAxis The z-axis description to be used for binning.</param>
    </javadoc>
    <method type="constructor" name="Histogram3D" startLine="70" endLine="83">
      <declaration type="int" name="xBins" />
      <declaration type="int" name="yBins" />
      <declaration type="int" name="zBins" />
    </method>
    <method type="int" name="allEntries" startLine="85" endLine="87" />
    <method type="int" name="binEntries" startLine="89" endLine="91" />
    <method type="double" name="binError" startLine="93" endLine="95" />
    <method type="double" name="binHeight" startLine="97" endLine="99" />
    <method type="double" name="equivalentBinEntries" startLine="101" endLine="103" />
    <method type="void" name="fill" startLine="105" endLine="121">
      <declaration type="int" name="xBin" />
      <declaration type="int" name="yBin" />
      <declaration type="int" name="zBin" />
    </method>
    <method type="void" name="fill" startLine="123" endLine="139">
      <declaration type="int" name="xBin" />
      <declaration type="int" name="yBin" />
      <declaration type="int" name="zBin" />
    </method>
    <javadoc>
      <text>* The precise meaning of the arguments to the public slice
 * methods is somewhat ambiguous, so we define this internal
 * slice method and clearly specify its arguments.
 * <p>
 * <b>Note 0</b>indexX1 and indexX2 use our INTERNAL bin numbering scheme
 * <b>Note 1</b>The slice is done between indexX1 and indexX2 INCLUSIVE
 * <b>Note 2</b>indexX1 and indexX2 may include the use of under and over flow bins
 * <b>Note 3</b>There is no note 3 (yet)</text>
    </javadoc>
    <method type="IHistogram2D" name="internalSliceXY" startLine="151" endLine="178">
      <declaration type="int" name="xBins" />
      <declaration type="int" name="yBins" />
      <declaration type="int[][]" name="sliceEntries" />
      <declaration type="double[][]" name="sliceHeights" />
      <declaration type="double[][]" name="sliceErrors" />
      <scope startLine="164" endLine="174">
        <scope startLine="166" endLine="173">
          <scope startLine="168" endLine="172" />
        </scope>
      </scope>
      <declaration type="Histogram2D" name="result" />
      <comment>Attention: our internal definition of bins has been choosen</comment>
      <comment>so that this works properly even if the indeces passed in include</comment>
      <comment>the underflow or overflow bins</comment>
    </method>
    <javadoc>
      <text>* The precise meaning of the arguments to the public slice
 * methods is somewhat ambiguous, so we define this internal
 * slice method and clearly specify its arguments.
 * <p>
 * <b>Note 0</b>indexY1 and indexY2 use our INTERNAL bin numbering scheme
 * <b>Note 1</b>The slice is done between indexY1 and indexY2 INCLUSIVE
 * <b>Note 2</b>indexY1 and indexY2 may include the use of under and over flow bins
 * <b>Note 3</b>There is no note 3 (yet)</text>
    </javadoc>
    <method type="IHistogram2D" name="internalSliceXZ" startLine="190" endLine="217">
      <declaration type="int" name="xBins" />
      <declaration type="int" name="zBins" />
      <declaration type="int[][]" name="sliceEntries" />
      <declaration type="double[][]" name="sliceHeights" />
      <declaration type="double[][]" name="sliceErrors" />
      <scope startLine="203" endLine="213">
        <scope startLine="205" endLine="212">
          <scope startLine="207" endLine="211" />
        </scope>
      </scope>
      <declaration type="Histogram2D" name="result" />
      <comment>Attention: our internal definition of bins has been choosen</comment>
      <comment>so that this works properly even if the indeces passed in include</comment>
      <comment>the underflow or overflow bins</comment>
    </method>
    <javadoc>
      <text>* The precise meaning of the arguments to the public slice
 * methods is somewhat ambiguous, so we define this internal
 * slice method and clearly specify its arguments.
 * <p>
 * <b>Note 0</b>indexX1 and indexX2 use our INTERNAL bin numbering scheme
 * <b>Note 1</b>The slice is done between indexX1 and indexX2 INCLUSIVE
 * <b>Note 2</b>indexX1 and indexX2 may include the use of under and over flow bins
 * <b>Note 3</b>There is no note 3 (yet)</text>
    </javadoc>
    <method type="IHistogram2D" name="internalSliceYZ" startLine="229" endLine="256">
      <declaration type="int" name="yBins" />
      <declaration type="int" name="zBins" />
      <declaration type="int[][]" name="sliceEntries" />
      <declaration type="double[][]" name="sliceHeights" />
      <declaration type="double[][]" name="sliceErrors" />
      <scope startLine="242" endLine="252">
        <scope startLine="244" endLine="251">
          <scope startLine="246" endLine="250" />
        </scope>
      </scope>
      <declaration type="Histogram2D" name="result" />
      <comment>Attention: our internal definition of bins has been choosen</comment>
      <comment>so that this works properly even if the indeces passed in include</comment>
      <comment>the underflow or overflow bins</comment>
    </method>
    <method type="double" name="meanX" startLine="258" endLine="260" />
    <method type="double" name="meanY" startLine="262" endLine="264" />
    <method type="double" name="meanZ" startLine="266" endLine="268" />
    <method type="void" name="reset" startLine="270" endLine="288">
      <scope startLine="274" endLine="278" />
    </method>
    <method type="double" name="rmsX" startLine="290" endLine="292" />
    <method type="double" name="rmsY" startLine="294" endLine="296" />
    <method type="double" name="rmsZ" startLine="298" endLine="300" />
    <method type="double" name="sumAllBinHeights" startLine="302" endLine="304" />
    <comment>total number of times fill called</comment>
    <comment>Sum of all weights</comment>
    <comment>Sum of the squares of the weights</comment>
  </class>
</source>
