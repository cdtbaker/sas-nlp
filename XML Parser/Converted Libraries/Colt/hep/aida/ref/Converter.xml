<?xml version="1.0" encoding="UTF-8"?>
<source package="hep.aida.ref">
  <import name="hep.aida.IAxis" />
  <import name="hep.aida.IHistogram1D" />
  <import name="hep.aida.IHistogram2D" />
  <import name="hep.aida.IHistogram3D" />
  <class name="Converter" startLine="8">
    <javadoc>
      <text>* Histogram conversions, for example to String and XML format; 
 * This class requires the Colt distribution, whereas the rest of the package is entirelly stand-alone.</text>
    </javadoc>
    <javadoc>
      <text>* Creates a new histogram converter.</text>
    </javadoc>
    <method type="constructor" name="Converter" startLine="17" endLine="17" />
    <javadoc>
      <text>* Returns all edges of the given axis.</text>
    </javadoc>
    <method type="double[]" name="edges" startLine="22" endLine="28">
      <declaration type="int" name="b" />
      <declaration type="double[]" name="bounds" />
    </method>
    <method type="String" name="form" startLine="30" endLine="32" />
    <javadoc>
      <text>* Returns an array[h.xAxis().bins()]; ignoring extra bins.</text>
    </javadoc>
    <method type="double[]" name="toArrayErrors" startLine="37" endLine="44">
      <declaration type="int" name="xBins" />
      <declaration type="double[]" name="array" />
      <scope startLine="40" endLine="42" />
    </method>
    <javadoc>
      <text>* Returns an array[h.xAxis().bins()][h.yAxis().bins()]; ignoring extra bins.</text>
    </javadoc>
    <method type="double[][]" name="toArrayErrors" startLine="49" endLine="59">
      <declaration type="int" name="xBins" />
      <declaration type="int" name="yBins" />
      <declaration type="double[][]" name="array" />
      <scope startLine="53" endLine="57">
        <scope startLine="54" endLine="56" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns an array[h.xAxis().bins()]; ignoring extra bins.</text>
    </javadoc>
    <method type="double[]" name="toArrayHeights" startLine="64" endLine="71">
      <declaration type="int" name="xBins" />
      <declaration type="double[]" name="array" />
      <scope startLine="67" endLine="69" />
    </method>
    <javadoc>
      <text>* Returns an array[h.xAxis().bins()][h.yAxis().bins()]; ignoring extra bins.</text>
    </javadoc>
    <method type="double[][]" name="toArrayHeights" startLine="76" endLine="86">
      <declaration type="int" name="xBins" />
      <declaration type="int" name="yBins" />
      <declaration type="double[][]" name="array" />
      <scope startLine="80" endLine="84">
        <scope startLine="81" endLine="83" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns an array[h.xAxis().bins()][h.yAxis().bins()][h.zAxis().bins()]; ignoring extra bins.</text>
    </javadoc>
    <method type="double[][][]" name="toArrayHeights" startLine="91" endLine="104">
      <declaration type="int" name="xBins" />
      <declaration type="int" name="yBins" />
      <declaration type="int" name="zBins" />
      <declaration type="double[][][]" name="array" />
      <scope startLine="96" endLine="102">
        <scope startLine="97" endLine="101">
          <scope startLine="98" endLine="100" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (<tt>"[]"</tt>).  Adjacent elements are separated by the characters
 * <tt>", "</tt> (comma and space).</text>
      <return>a string representation of the specified array.</return>
    </javadoc>
    <method type="String" name="toString" startLine="112" endLine="123">
      <declaration type="StringBuffer" name="buf" />
      <declaration type="int" name="maxIndex" />
      <scope startLine="116" endLine="120" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the given argument.</text>
    </javadoc>
    <method type="String" name="toString" startLine="128" endLine="134">
      <declaration type="StringBuffer" name="buf" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the given argument.</text>
    </javadoc>
    <method type="String" name="toString" startLine="139" endLine="178">
      <declaration type="String" name="columnAxisName" />
      <declaration type="String" name="rowAxisName" />
      <declaration type="hep.aida.bin.BinFunction1D[]" name="aggr" />
      <declaration type="String" name="format" />
      <declaration type="cern.colt.matrix.impl.Former" name="f" />
      <declaration type="String" name="sep" />
      <declaration type="int[]" name="minMaxBins" />
      <declaration type="String" name="title" />
      <declaration type="String[]" name="xEdges" />
      <declaration type="String[]" name="yEdges" />
      <declaration type="cern.colt.matrix.DoubleMatrix2D" name="heights" />
      <comment>"X";</comment>
      <comment>{hep.aida.bin.BinFunctions1D.sum};</comment>
      <comment>String format = "%1.2G";</comment>
      <comment>cern.colt.matrix.DoubleMatrix2D errors = new cern.colt.matrix.impl.DenseDoubleMatrix2D(1,h.xAxis().bins());</comment>
      <comment>errors.viewRow(0).assign(toArrayErrors(h));</comment>
      <comment>+ sep +
"Errors:" + sep +
new cern.colt.matrix.doublealgo.Formatter().toTitleString(
errors,yEdges,xEdges,rowAxisName,columnAxisName,null,aggr);</comment>
    </method>
    <javadoc>
      <text>* Returns a string representation of the given argument.</text>
    </javadoc>
    <method type="String" name="toString" startLine="183" endLine="234">
      <declaration type="String" name="columnAxisName" />
      <declaration type="String" name="rowAxisName" />
      <declaration type="hep.aida.bin.BinFunction1D[]" name="aggr" />
      <declaration type="String" name="format" />
      <declaration type="cern.colt.matrix.impl.Former" name="f" />
      <declaration type="String" name="sep" />
      <declaration type="int[]" name="minMaxBins" />
      <declaration type="String" name="title" />
      <declaration type="String[]" name="xEdges" />
      <declaration type="String[]" name="yEdges" />
      <declaration type="cern.colt.matrix.DoubleMatrix2D" name="heights" />
      <comment>String format = "%1.2G";</comment>
      <comment>keep coord. system</comment>
      <comment>keep the histo coord. system</comment>
      <comment>heights = heights.viewPart(1,1,heights.rows()-2,heights.columns()-2);  ignore under&overflows</comment>
      <comment>cern.colt.matrix.DoubleMatrix2D errors = new cern.colt.matrix.impl.DenseDoubleMatrix2D(toArrayErrors(h));</comment>
      <comment>errors = errors.viewDice().viewRowFlip();  keep the histo coord system</comment>
      <comment>errors = errors.viewPart(1,1,errors.rows()-2,errors.columns()-2);  ignore under&overflows</comment>
      <comment>+ sep +
"Errors:" + sep +
new cern.colt.matrix.doublealgo.Formatter().toTitleString(
errors,yEdges,xEdges,rowAxisName,columnAxisName,null,aggr);</comment>
    </method>
    <javadoc>
      <text>* Returns a string representation of the given argument.</text>
    </javadoc>
    <method type="String" name="toString" startLine="239" endLine="301">
      <declaration type="String" name="columnAxisName" />
      <declaration type="String" name="rowAxisName" />
      <declaration type="String" name="sliceAxisName" />
      <declaration type="hep.aida.bin.BinFunction1D[]" name="aggr" />
      <declaration type="String" name="format" />
      <declaration type="cern.colt.matrix.impl.Former" name="f" />
      <declaration type="String" name="sep" />
      <declaration type="int[]" name="minMaxBins" />
      <declaration type="String" name="title" />
      <declaration type="String[]" name="xEdges" />
      <declaration type="String[]" name="yEdges" />
      <declaration type="String[]" name="zEdges" />
      <declaration type="cern.colt.matrix.DoubleMatrix3D" name="heights" />
      <comment>String format = "%1.2G";</comment>
      <comment>keep coord. system</comment>
      <comment>keep coord. system</comment>
      <comment>keep the histo coord. system</comment>
      <comment>heights = heights.viewPart(1,1,heights.rows()-2,heights.columns()-2);  ignore under&overflows</comment>
      <comment>cern.colt.matrix.DoubleMatrix2D errors = new cern.colt.matrix.impl.DenseDoubleMatrix2D(toArrayErrors(h));</comment>
      <comment>errors = errors.viewDice().viewRowFlip();  keep the histo coord system</comment>
      <comment>errors = errors.viewPart(1,1,errors.rows()-2,errors.columns()-2);  ignore under&overflows</comment>
      <comment>+ sep +
"Errors:" + sep +
new cern.colt.matrix.doublealgo.Formatter().toTitleString(
errors,yEdges,xEdges,rowAxisName,columnAxisName,null,aggr);</comment>
    </method>
    <javadoc>
      <text>* Returns a XML representation of the given argument.</text>
    </javadoc>
    <method type="String" name="toXML" startLine="306" endLine="342">
      <declaration type="StringBuffer" name="buf" />
      <declaration type="String" name="sep" />
      <scope startLine="317" endLine="319" />
      <scope startLine="330" endLine="332" />
      <scope startLine="333" endLine="335" />
    </method>
    <javadoc>
      <text>* Returns a XML representation of the given argument.</text>
    </javadoc>
    <method type="String" name="toXML" startLine="347" endLine="385">
      <declaration type="StringBuffer" name="out" />
      <declaration type="String" name="sep" />
      <scope startLine="359" endLine="361" />
      <comment>out.append("<statistics>"); out.append(sep);</comment>
      <comment>out.append("<statistic name=\"Entries\" value=\""+h.entries()+"\"/>"); out.append(sep);</comment>
      <comment>out.append("<statistic name=\"MeanX\" value=\""+h.meanX()+"\"/>"); out.append(sep);</comment>
      <comment>out.append("<statistic name=\"RmsX\" value=\""+h.rmsX()+"\"/>"); out.append(sep);</comment>
      <comment>out.append("<statistic name=\"MeanY\" value=\""+h.meanY()+"\"/>"); out.append(sep);</comment>
      <comment>out.append("<statistic name=\"RmsY\" value=\""+h.rmsY()+"\"/>"); out.append(sep);</comment>
      <comment>out.append("</statistics>"); out.append(sep);</comment>
    </method>
  </class>
</source>
