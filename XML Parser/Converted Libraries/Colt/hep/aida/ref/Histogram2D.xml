<?xml version="1.0" encoding="UTF-8"?>
<source package="hep.aida.ref">
  <import name="hep.aida.IAxis" />
  <import name="hep.aida.IHistogram1D" />
  <import name="hep.aida.IHistogram2D" />
  <class name="Histogram2D" extends="AbstractHistogram2D" startLine="6">
    <implements name="IHistogram2D" />
    <javadoc>
      <text>* A reference implementation of hep.aida.IHistogram2D.
 * The goal is to provide a clear implementation rather than the most efficient implementation.
 * However, performance seems fine - filling 6 * 10^5 points/sec, both using FixedAxis or VariableAxis.</text>
      <author>Wolfgang Hoschek, Tony Johnson, and others.</author>
      <version>1.0, 23/03/2000</version>
    </javadoc>
    <declaration type="double[][]" name="heights" />
    <declaration type="double[][]" name="errors" />
    <declaration type="int[][]" name="entries" />
    <declaration type="int" name="nEntry" />
    <declaration type="double" name="sumWeight" />
    <declaration type="double" name="sumWeightSquared" />
    <declaration type="double" name="meanX" />
    <declaration type="double" name="meanY" />
    <javadoc>
      <text>* Creates a variable-width histogram.
 * Example: <tt>xEdges = (0.2, 1.0, 5.0, 6.0), yEdges = (-5, 0, 7)</tt> yields 3*2 in-range bins.</text>
      <param>title The histogram title.</param>
      <param>xEdges the bin boundaries the x-axis shall have;
 * must be sorted ascending and must not contain multiple identical elements.</param>
      <param>yEdges the bin boundaries the y-axis shall have;
 * must be sorted ascending and must not contain multiple identical elements.</param>
      <throws>IllegalArgumentException if <tt>xEdges.length < 1 || yEdges.length < 1</tt>.</throws>
    </javadoc>
    <method type="constructor" name="Histogram2D" startLine="35" endLine="37" />
    <javadoc>
      <text>* Creates a fixed-width histogram.</text>
      <param>title The histogram title.</param>
      <param>xBins The number of bins on the X axis.</param>
      <param>xMin The minimum value on the X axis.</param>
      <param>xMax The maximum value on the X axis.</param>
      <param>yBins The number of bins on the Y axis.</param>
      <param>yMin The minimum value on the Y axis.</param>
      <param>yMax The maximum value on the Y axis.</param>
    </javadoc>
    <method type="constructor" name="Histogram2D" startLine="51" endLine="53" />
    <javadoc>
      <text>* Creates a histogram with the given axis binning.</text>
      <param>title The histogram title.</param>
      <param>xAxis The x-axis description to be used for binning.</param>
      <param>yAxis The y-axis description to be used for binning.</param>
    </javadoc>
    <method type="constructor" name="Histogram2D" startLine="62" endLine="73">
      <declaration type="int" name="xBins" />
      <declaration type="int" name="yBins" />
    </method>
    <method type="int" name="allEntries" startLine="75" endLine="77" />
    <method type="int" name="binEntries" startLine="79" endLine="82">
      <comment>return entries[xAxis.map(indexX)][yAxis.map(indexY)];</comment>
    </method>
    <method type="double" name="binError" startLine="84" endLine="87">
      <comment>return Math.sqrt(errors[xAxis.map(indexX)][yAxis.map(indexY)]);</comment>
    </method>
    <method type="double" name="binHeight" startLine="89" endLine="92">
      <comment>return heights[xAxis.map(indexX)][yAxis.map(indexY)];</comment>
    </method>
    <method type="double" name="equivalentBinEntries" startLine="94" endLine="96" />
    <method type="void" name="fill" startLine="98" endLine="113">
      <declaration type="int" name="xBin" />
      <declaration type="int" name="yBin" />
      <comment>int xBin = xAxis.getBin(x);</comment>
      <comment>int yBin = xAxis.getBin(y);</comment>
    </method>
    <method type="void" name="fill" startLine="115" endLine="130">
      <declaration type="int" name="xBin" />
      <declaration type="int" name="yBin" />
      <comment>int xBin = xAxis.getBin(x);</comment>
      <comment>int yBin = xAxis.getBin(y);</comment>
    </method>
    <javadoc>
      <text>* The precise meaning of the arguments to the public slice
 * methods is somewhat ambiguous, so we define this internal
 * slice method and clearly specify its arguments.
 * <p>
 * <b>Note 0</b>indexY1 and indexY2 use our INTERNAL bin numbering scheme
 * <b>Note 1</b>The slice is done between indexY1 and indexY2 INCLUSIVE
 * <b>Note 2</b>indexY1 and indexY2 may include the use of under and over flow bins
 * <b>Note 3</b>There is no note 3 (yet)</text>
    </javadoc>
    <method type="IHistogram1D" name="internalSliceX" startLine="142" endLine="166">
      <declaration type="int" name="sliceBins" />
      <declaration type="int[]" name="sliceEntries" />
      <declaration type="double[]" name="sliceHeights" />
      <declaration type="double[]" name="sliceErrors" />
      <scope startLine="155" endLine="162">
        <scope startLine="157" endLine="161" />
      </scope>
      <declaration type="Histogram1D" name="result" />
      <comment>Attention: our internal definition of bins has been choosen</comment>
      <comment>so that this works properly even if the indeces passed in include</comment>
      <comment>the underflow or overflow bins</comment>
      <comment>for (int i=xAxis.under; i<=xAxis.over; i++)</comment>
    </method>
    <javadoc>
      <text>* The precise meaning of the arguments to the public slice
 * methods is somewhat ambiguous, so we define this internal
 * slice method and clearly specify its arguments.
 * <p>
 * <b>Note 0</b>indexX1 and indexX2 use our INTERNAL bin numbering scheme
 * <b>Note 1</b>The slice is done between indexX1 and indexX2 INCLUSIVE
 * <b>Note 2</b>indexX1 and indexX2 may include the use of under and over flow bins
 * <b>Note 3</b>There is no note 3 (yet)</text>
    </javadoc>
    <method type="IHistogram1D" name="internalSliceY" startLine="178" endLine="202">
      <declaration type="int" name="sliceBins" />
      <declaration type="int[]" name="sliceEntries" />
      <declaration type="double[]" name="sliceHeights" />
      <declaration type="double[]" name="sliceErrors" />
      <scope startLine="190" endLine="198">
        <scope startLine="193" endLine="197" />
        <comment>for (int j=yAxis.under; j<=yAxis.over; j++)</comment>
      </scope>
      <declaration type="Histogram1D" name="result" />
      <comment>Attention: our internal definition of bins has been choosen</comment>
      <comment>so that this works properly even if the indeces passed in include</comment>
      <comment>the underflow or overflow bins</comment>
    </method>
    <method type="double" name="meanX" startLine="204" endLine="206" />
    <method type="double" name="meanY" startLine="208" endLine="210" />
    <method type="void" name="reset" startLine="212" endLine="227">
      <scope startLine="215" endLine="219" />
    </method>
    <method type="double" name="rmsX" startLine="229" endLine="231" />
    <method type="double" name="rmsY" startLine="233" endLine="235" />
    <javadoc>
      <text>* Used internally for creating slices and projections</text>
    </javadoc>
    <method type="void" name="setContents" startLine="240" endLine="257">
      <scope startLine="247" endLine="250" />
      <comment>TODO: Can we do anything sensible/useful with the other statistics?</comment>
    </method>
    <method type="double" name="sumAllBinHeights" startLine="259" endLine="261" />
    <comment>total number of times fill called</comment>
    <comment>Sum of all weights</comment>
    <comment>Sum of the squares of the weights</comment>
  </class>
</source>
