<?xml version="1.0" encoding="UTF-8"?>
<source package="hep.aida.bin">
  <class name="AbstractBin" extends="cern.colt.PersistentObject" startLine="3">
    <javadoc>
      <text>* Abstract base class for all arbitrary-dimensional bins consumes <tt>double</tt> elements.
 * First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
 * <p>
 * This class is fully thread safe (all public methods are synchronized).
 * Thus, you can have one or more threads adding to the bin as well as one or more threads reading and viewing the statistics of the bin <i>while it is filled</i>.
 * For high performance, add data in large chunks (buffers) via method <tt>addAllOf</tt> rather than piecewise via method <tt>add</tt>.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>0.9, 03-Jul-99</version>
    </javadoc>
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="AbstractBin" startLine="18" endLine="19" />
    <javadoc>
      <text>* Returns <tt>center(0)</tt>.</text>
    </javadoc>
    <method type="double" name="center" startLine="23" endLine="25" />
    <javadoc>
      <text>* Returns a custom definable "center" measure; override this method if necessary.
 * Returns the absolute or relative center of this bin.
 * For example, the center of gravity.
 * The <i>real</i> absolute center can be obtained as follow:
 * <tt>partition(i).min(j) * bin(j).offset() + bin(j).center(i)</tt>,
 * where <tt>i</tt> is the dimension.
 * and <tt>j</tt> is the index of this bin.
 * <p>This default implementation always returns 0.5.</text>
      <param>dimension the dimension to be considered (zero based).</param>
    </javadoc>
    <method type="double" name="center" startLine="40" endLine="42" />
    <method name="clear" type="void" startLine="43" endLine="47" />
    <javadoc>
      <text>* Removes all elements from the receiver.
 * The receiver will be empty after this call returns.</text>
    </javadoc>
    <javadoc>
      <text>* Returns whether two objects are equal;
 * This default implementation returns true if the other object is a bin 
 * and has the same size, value, error and center.</text>
    </javadoc>
    <method type="boolean" name="equals" startLine="53" endLine="57">
      <declaration type="AbstractBin" name="other" />
    </method>
    <javadoc>
      <text>* Returns <tt>error(0)</tt>.</text>
    </javadoc>
    <method type="double" name="error" startLine="61" endLine="63" />
    <javadoc>
      <text>* Returns a custom definable error measure; override this method if necessary.
 * This default implementation always returns <tt>0</tt>.</text>
      <param>dimension the dimension to be considered.</param>
    </javadoc>
    <method type="double" name="error" startLine="70" endLine="72" />
    <method name="isRebinnable" type="boolean" startLine="73" endLine="78" />
    <javadoc>
      <text>* Returns whether a client can obtain all elements added to the receiver.
 * In other words, tells whether the receiver internally preserves all added elements.
 * If the receiver is rebinnable, the elements can be obtained via <tt>elements()</tt> methods.</text>
    </javadoc>
    <javadoc>
      <text>* Returns <tt>offset(0)</tt>.</text>
    </javadoc>
    <method type="double" name="offset" startLine="82" endLine="84" />
    <javadoc>
      <text>* Returns the relative or absolute position for the center of the bin; override this method if necessary.
 * Returns 1.0 if a relative center is stored in the bin.
 * Returns 0.0 if an absolute center is stored in the bin.
 * <p>This default implementation always returns 1.0 (relative).</text>
      <param>dimension the index of the considered dimension (zero based);</param>
    </javadoc>
    <method type="double" name="offset" startLine="94" endLine="96" />
    <method name="size" type="int" startLine="97" endLine="102" />
    <javadoc>
      <text>* Returns the number of elements contained.</text>
      <returns>the number of elements contained.</returns>
    </javadoc>
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="106" endLine="117">
      <declaration type="StringBuffer" name="buf" />
      <comment>buf.append("\nValue: "+value());
buf.append("\nError: "+error());
buf.append("\nRMS: "+rms()+"\n");</comment>
    </method>
    <javadoc>
      <text>* Trims the capacity of the receiver to be the receiver's current size.
 * Releases any superfluos internal memory.
 * An application can use this operation to minimize the storage of the receiver.
 * This default implementation does nothing.</text>
    </javadoc>
    <method type="void" name="trimToSize" startLine="125" endLine="125" />
    <javadoc>
      <text>* Returns <tt>value(0)</tt>.</text>
    </javadoc>
    <method type="double" name="value" startLine="129" endLine="131" />
    <javadoc>
      <text>* Returns a custom definable "value" measure; override this method if necessary.
 * <p>This default implementation always returns 0.0.</text>
      <param>dimension the dimension to be considered.</param>
    </javadoc>
    <method type="double" name="value" startLine="138" endLine="140" />
  </class>
</source>
