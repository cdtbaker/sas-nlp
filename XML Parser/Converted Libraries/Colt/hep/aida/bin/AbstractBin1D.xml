<?xml version="1.0" encoding="UTF-8"?>
<source package="hep.aida.bin">
  <import name="cern.colt.list.DoubleArrayList" />
  <import name="cern.jet.stat.Descriptive" />
  <class name="AbstractBin1D" extends="AbstractBin" startLine="5">
    <implements name="cern.colt.buffer.DoubleBufferConsumer" />
    <javadoc>
      <text>* Abstract base class for all 1-dimensional bins consumes <tt>double</tt> elements.
 * First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
 * <p>
 * This class is fully thread safe (all public methods are synchronized).
 * Thus, you can have one or more threads adding to the bin as well as one or more threads reading and viewing the statistics of the bin <i>while it is filled</i>.
 * For high performance, add data in large chunks (buffers) via method <tt>addAllOf</tt> rather than piecewise via method <tt>add</tt>.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>0.9, 03-Jul-99</version>
    </javadoc>
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="AbstractBin1D" startLine="20" endLine="21" />
    <method name="add" type="void" startLine="22" endLine="27" />
    <javadoc>
      <text>* Adds the specified element to the receiver.</text>
      <param>element element to be appended.</param>
    </javadoc>
    <javadoc>
      <text>* Adds all values of the specified list to the receiver.</text>
      <param>list the list of which all values shall be added.</param>
    </javadoc>
    <method type="void" name="addAllOf" startLine="32" endLine="34" />
    <javadoc>
      <text>* Adds the part of the specified list between indexes <tt>from</tt> (inclusive) and <tt>to</tt> (inclusive) to the receiver.
 * You may want to override this method for performance reasons.</text>
      <param>list the list of which elements shall be added.</param>
      <param>from the index of the first element to be added (inclusive).</param>
      <param>to the index of the last element to be added (inclusive).</param>
      <throws>IndexOutOfBoundsException if <tt>list.size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=list.size())</tt>.</throws>
    </javadoc>
    <method type="void" name="addAllOfFromTo" startLine="44" endLine="46" />
    <javadoc>
      <text>* Constructs and returns a streaming buffer connected to the receiver.
 * Whenever the buffer is full it's contents are automatically flushed to <tt>this</tt>. 
 * (Addding elements via a buffer to a bin is significantly faster than adding them directly.)</text>
      <param>capacity the number of elements the buffer shall be capable of holding before overflowing and flushing to the receiver.</param>
      <return>a streaming buffer having the receiver as target.</return>
    </javadoc>
    <method type="cern.colt.buffer.DoubleBuffer" name="buffered" startLine="54" endLine="56" />
    <javadoc>
      <text>* Computes the deviations from the receiver's measures to another bin's measures.</text>
      <param>other the other bin to compare with</param>
      <return>a summary of the deviations.</return>
    </javadoc>
    <method type="String" name="compareWith" startLine="62" endLine="77">
      <declaration type="StringBuffer" name="buf" />
    </method>
    <javadoc>
      <text>* Returns whether two bins are equal; 
 * They are equal if the other object is of the same class or a subclass of this class and both have the same size, minimum, maximum, sum and sumOfSquares.</text>
    </javadoc>
    <method type="boolean" name="equals" startLine="82" endLine="87">
      <declaration type="AbstractBin1D" name="other" />
    </method>
    <method name="max" type="double" startLine="88" endLine="91" />
    <javadoc>
      <text>* Returns the maximum.</text>
    </javadoc>
    <javadoc>
      <text>* Returns the arithmetic mean, which is <tt>Sum( x[i] ) / size()</tt>.</text>
    </javadoc>
    <method type="double" name="mean" startLine="95" endLine="97" />
    <method name="min" type="double" startLine="98" endLine="101" />
    <javadoc>
      <text>* Returns the minimum.</text>
    </javadoc>
    <javadoc>
      <text>* Computes the relative error (in percent) from one measure to another.</text>
    </javadoc>
    <method type="double" name="relError" startLine="105" endLine="107" />
    <javadoc>
      <text>* Returns the rms (Root Mean Square), which is <tt>Math.sqrt( Sum( x[i]*x[i] ) / size() )</tt>.</text>
    </javadoc>
    <method type="double" name="rms" startLine="111" endLine="113" />
    <javadoc>
      <text>* Returns the sample standard deviation, which is <tt>Math.sqrt(variance())</tt>.</text>
    </javadoc>
    <method type="double" name="standardDeviation" startLine="117" endLine="119" />
    <javadoc>
      <text>* Returns the sample standard error, which is <tt>Math.sqrt(variance() / size())</tt></text>
    </javadoc>
    <method type="double" name="standardError" startLine="123" endLine="125" />
    <method name="sum" type="double" startLine="126" endLine="129" />
    <javadoc>
      <text>* Returns the sum of all elements, which is <tt>Sum( x[i] )</tt>.</text>
    </javadoc>
    <method name="sumOfSquares" type="double" startLine="130" endLine="133" />
    <javadoc>
      <text>* Returns the sum of squares, which is <tt>Sum( x[i] * x[i] )</tt>.</text>
    </javadoc>
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="137" endLine="157">
      <declaration type="StringBuffer" name="buf" />
      <comment>buf.append("\nValue: "+value());
buf.append("\nError(0): "+error(0));</comment>
    </method>
    <javadoc>
      <text>* Trims the capacity of the receiver to be the receiver's current size.
 * Releases any superfluos internal memory.
 * An application can use this operation to minimize the storage of the receiver.
 * This default implementation does nothing.</text>
    </javadoc>
    <method type="void" name="trimToSize" startLine="164" endLine="164" />
    <javadoc>
      <text>* Returns the sample variance, which is <tt>Sum( (x[i]-mean())<sup>2</sup> )  /  (size()-1)</tt>.</text>
    </javadoc>
    <method type="double" name="variance" startLine="168" endLine="170" />
  </class>
</source>
