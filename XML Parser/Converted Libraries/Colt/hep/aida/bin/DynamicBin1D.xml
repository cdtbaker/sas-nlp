<?xml version="1.0" encoding="UTF-8"?>
<source package="hep.aida.bin">
  <import name="cern.colt.list.DoubleArrayList" />
  <import name="cern.colt.list.IntArrayList" />
  <import name="cern.jet.random.engine.RandomEngine" />
  <import name="cern.jet.stat.Descriptive" />
  <class name="DynamicBin1D" extends="QuantileBin1D" startLine="7">
    <javadoc>
      <text>* 1-dimensional rebinnable bin holding <tt>double</tt> elements;
 * Efficiently computes advanced statistics of data sequences.
 * Technically speaking, a multiset (or bag) with efficient statistics operations defined upon.
 * First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
 * <p>
 * The data filled into a <tt>DynamicBin1D</tt> is internally preserved in the bin. 
 * As a consequence this bin can compute more than only basic statistics.
 * On the other hand side, if you add huge amounts of elements, you may run out of memory (each element takes 8 bytes).
 * If this drawbacks matter, consider to use {@link StaticBin1D}, 
 * which overcomes them at the expense of limited functionality.
 * <p>
 * This class is fully thread safe (all public methods are synchronized).
 * Thus, you can have one or more threads adding to the bin as well as one or more threads reading and viewing the statistics of the bin <i>while it is filled</i>.
 * For high performance, add data in large chunks (buffers) via method <tt>addAllOf</tt> rather than piecewise via method <tt>add</tt>.
 * <p>
 * If your favourite statistics measure is not directly provided by this class, 
 * check out {@link cern.jet.stat.Descriptive} in combination with methods {@link #elements()} and {@link #sortedElements()}. 
 * <p>
 * <b>Implementation</b>:
 * Lazy evaluation, caching, incremental maintainance.</text>
      <see>cern.jet.stat.Descriptive</see>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>0.9, 03-Jul-99</version>
    </javadoc>
    <javadoc>
      <text>* The elements contained in this bin.</text>
    </javadoc>
    <declaration type="DoubleArrayList" name="elements" />
    <javadoc>
      <text>* The elements contained in this bin, sorted ascending.</text>
    </javadoc>
    <declaration type="DoubleArrayList" name="sortedElements" />
    <javadoc>
      <text>* Preserve element order under all circumstances?</text>
    </javadoc>
    <declaration type="boolean" name="fixedOrder" />
    <declaration type="boolean" name="isSorted" />
    <declaration type="boolean" name="isIncrementalStatValid" />
    <declaration type="boolean" name="isSumOfInversionsValid" />
    <declaration type="boolean" name="isSumOfLogarithmsValid" />
    <javadoc>
      <text>* Constructs and returns an empty bin; implicitly calls {@link #setFixedOrder(boolean) setFixedOrder(false)}.</text>
    </javadoc>
    <method type="constructor" name="DynamicBin1D" startLine="71" endLine="79" />
    <javadoc>
      <text>* Adds the specified element to the receiver.</text>
      <param>element element to be appended.</param>
    </javadoc>
    <method type="void" name="add" startLine="85" endLine="88" />
    <javadoc>
      <text>* Adds the part of the specified list between indexes <tt>from</tt> (inclusive) and <tt>to</tt> (inclusive) to the receiver.</text>
      <param>list the list of which elements shall be added.</param>
      <param>from the index of the first element to be added (inclusive).</param>
      <param>to the index of the last element to be added (inclusive).</param>
      <throws>IndexOutOfBoundsException if <tt>list.size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=list.size())</tt>.</throws>
    </javadoc>
    <method type="void" name="addAllOfFromTo" startLine="97" endLine="100" />
    <javadoc>
      <text>* Applies a function to each element and aggregates the results.
 * Returns a value <tt>v</tt> such that <tt>v==a(size())</tt> where <tt>a(i) == aggr( a(i-1), f(x(i)) )</tt> and terminators are <tt>a(1) == f(x(0)), a(0)==Double.NaN</tt>.
 * <p>
 * <b>Example:</b>
 * <pre>
 * cern.jet.math.Functions F = cern.jet.math.Functions.functions;
 * bin = 0 1 2 3 
 * // Sum( x[i]*x[i] ) 
 * bin.aggregate(F.plus,F.square);
 * --> 14
 * </pre>
 * For further examples, see the <a href="package-summary.html#FunctionObjects">package doc</a>.</text>
      <param>aggr an aggregation function taking as first argument the current aggregation and as second argument the transformed current element.</param>
      <param>f a function transforming the current element.</param>
      <return>the aggregated measure.</return>
      <see>cern.jet.math.Functions</see>
    </javadoc>
    <method type="double" name="aggregate" startLine="121" endLine="129">
      <declaration type="int" name="s" />
      <declaration type="double" name="a" />
      <scope startLine="125" endLine="127" />
    </method>
    <javadoc>
      <text>* Removes all elements from the receiver.
 * The receiver will be empty after this call returns.</text>
    </javadoc>
    <method type="void" name="clear" startLine="134" endLine="141" />
    <javadoc>
      <text>* Resets the values of all measures.</text>
    </javadoc>
    <method type="void" name="clearAllMeasures" startLine="145" endLine="150">
      <comment>this.skew = 0.0;</comment>
      <comment>this.kurtosis = 0.0;</comment>
    </method>
    <javadoc>
      <text>* Returns a deep copy of the receiver.</text>
      <return>a deep copy of the receiver.</return>
    </javadoc>
    <method type="Object" name="clone" startLine="156" endLine="161">
      <declaration type="DynamicBin1D" name="clone" />
    </method>
    <javadoc>
      <text>* Returns the correlation of two bins, which is <tt>corr(x,y) = covariance(x,y) / (stdDev(x)*stdDev(y))</tt> (Pearson's correlation coefficient).
 * A correlation coefficient varies between -1 (for a perfect negative relationship) to +1 (for a perfect positive relationship). 
 * See the <A HREF="http://www.cquest.utoronto.ca/geog/ggr270y/notes/not05efg.html"> math definition</A>
 * and <A HREF="http://www.stat.berkeley.edu/users/stark/SticiGui/Text/gloss.htm#correlation_coef"> another def</A>.</text>
      <param>other the bin to compare with.</param>
      <return>the correlation.</return>
      <throws>IllegalArgumentException if <tt>size() != other.size()</tt>.</throws>
    </javadoc>
    <method type="double" name="correlation" startLine="171" endLine="175">
      <scope startLine="172" endLine="174" />
    </method>
    <javadoc>
      <text>* Returns the covariance of two bins, which is <tt>cov(x,y) = (1/size()) * Sum((x[i]-mean(x)) * (y[i]-mean(y)))</tt>.
 * See the <A HREF="http://www.cquest.utoronto.ca/geog/ggr270y/notes/not05efg.html"> math definition</A>.</text>
      <param>other the bin to compare with.</param>
      <return>the covariance.</return>
      <throws>IllegalArgumentException if <tt>size() != other.size()</tt>.</throws>
    </javadoc>
    <method type="double" name="covariance" startLine="183" endLine="194">
      <scope startLine="184" endLine="193">
        <declaration type="double" name="s" />
        <scope startLine="187" endLine="189" />
        <declaration type="double" name="cov" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns a copy of the currently stored elements.
 * Concerning the order in which elements are returned, see {@link #setFixedOrder(boolean)}.</text>
      <return>a copy of the currently stored elements.</return>
    </javadoc>
    <method type="DoubleArrayList" name="elements" startLine="200" endLine="203">
      <comment>safe since we are already synchronized.</comment>
    </method>
    <javadoc>
      <text>* Returns the currently stored elements; <b>WARNING:</b> not a copy of them.
 * Thus, improper usage of the returned list may not only corrupt the receiver's internal state, but also break thread safety!
 * Only provided for performance and memory sensitive applications.
 * Do not modify the returned list unless you know exactly what you're doing.
 * This method can be used in a thread safe, clean <i>and</i> performant way by
 * explicitly synchronizing on the bin, as follows:
 * <pre>
 * ...
 * double sinSum = 0;
 * synchronized (dynamicBin) { // lock out anybody else
 * DoubleArrayList elements = dynamicBin.elements_unsafe();
 * // read each element and do something with it, for example
 * double[] values = elements.elements(); // zero-copy
 * for (int i=dynamicBin.size(); --i >=0; ) {
 * sinSum += Math.sin(values[i]);
 * }
 * }
 * System.out.println(sinSum);
 * ...
 * </pre>
 * Concerning the order in which elements are returned, see {@link #setFixedOrder(boolean)}.</text>
      <return>the currently stored elements.</return>
    </javadoc>
    <method type="DoubleArrayList" name="elements_unsafe" startLine="229" endLine="231" />
    <javadoc>
      <text>* Returns whether two bins are equal. 
 * They are equal if the other object is of the same class or a subclass of this class and both
 * have the same size, minimum, maximum, sum and sumOfSquares
 * and have the same elements, order being irrelevant (multiset equality).
 * <p>
 * Definition of <i>Equality</i> for multisets:
 * A,B are equal <=> A is a superset of B and B is a superset of A.
 * (Elements must occur the same number of times, order is irrelevant.)</text>
    </javadoc>
    <method type="boolean" name="equals" startLine="242" endLine="254">
      <declaration type="DynamicBin1D" name="other" />
      <declaration type="double[]" name="s1" />
      <scope startLine="248" endLine="253">
        <declaration type="double[]" name="s2" />
        <declaration type="int" name="n" />
      </scope>
    </method>
    <method type="boolean" name="includes" startLine="255" endLine="268">
      <scope startLine="256" endLine="265">
        <scope startLine="261" endLine="264" />
      </scope>
    </method>
    <javadoc>
      <text>* Computes the frequency (number of occurances, count) of each distinct element.
 * After this call returns both <tt>distinctElements</tt> and <tt>frequencies</tt> have a new size (which is equal for both), which is the number of distinct elements currently contained.
 * <p>
 * Distinct elements are filled into <tt>distinctElements</tt>, starting at index 0.
 * The frequency of each distinct element is filled into <tt>frequencies</tt>, starting at index 0.
 * Further, both <tt>distinctElements</tt> and <tt>frequencies</tt> are sorted ascending by "element" (in sync, of course).
 * As a result, the smallest distinct element (and its frequency) can be found at index 0, the second smallest distinct element (and its frequency) at index 1, ..., the largest distinct element (and its frequency) at index <tt>distinctElements.size()-1</tt>.
 * <p>
 * <b>Example:</b>
 * <br>
 * <tt>elements = (8,7,6,6,7) --> distinctElements = (6,7,8), frequencies = (2,2,1)</tt></text>
      <param>distinctElements a list to be filled with the distinct elements; can have any size.</param>
      <param>frequencies      a list to be filled with the frequencies; can have any size; set this parameter to <tt>null</tt> to ignore it.</param>
    </javadoc>
    <method type="void" name="frequencies" startLine="286" endLine="288" />
    <javadoc>
      <text>* Returns a map holding the frequency distribution, that is, (distintElement,frequency) pairs.
 * The frequency (count) of an element is its number of occurances.
 * <p>
 * <b>Example:</b>
 * <br>
 * <tt>elements = (8,7,6,6,7) --> map.keys = (8,6,7), map.values = (1,2,2)</tt></text>
      <return>a map holding the frequency distribution.</return>
    </javadoc>
    <method type="cern.colt.map.AbstractDoubleIntMap" name="frequencyMap" startLine="299" endLine="315">
      <declaration type="cern.colt.map.AbstractDoubleIntMap" name="map" />
      <scope startLine="304" endLine="309">
        <declaration type="double" name="element" />
        <comment>double element = i;  benchmark only TODO</comment>
        <comment>double element = i%1000;  benchmark only TODO</comment>
      </scope>
      <comment>cern.colt.map.OpenDoubleIntHashMap.hashCollisions = 0;</comment>
      <comment>fill a map that collects frequencies</comment>
      <comment>cern.colt.Timer timer = new cern.colt.Timer().start();</comment>
      <comment>timer.stop();</comment>
      <comment>System.out.println("filling map took = "+timer);</comment>
      <comment>System.out.println("collisions="+cern.colt.map.OpenDoubleIntHashMap.hashCollisions);</comment>
    </method>
    <javadoc>
      <text>* Returns <tt>Integer.MAX_VALUE</tt>, the maximum order <tt>k</tt> for which sums of powers are retrievable.</text>
      <see>#hasSumOfPowers(int)</see>
      <see>#sumOfPowers(int)</see>
    </javadoc>
    <method type="int" name="getMaxOrderForSumOfPowers" startLine="321" endLine="323" />
    <javadoc>
      <text>* Returns <tt>Integer.MIN_VALUE</tt>, the minimum order <tt>k</tt> for which sums of powers are retrievable.</text>
      <see>#hasSumOfPowers(int)</see>
      <see>#sumOfPowers(int)</see>
    </javadoc>
    <method type="int" name="getMinOrderForSumOfPowers" startLine="329" endLine="331" />
    <javadoc>
      <param>element element to be appended.</param>
    </javadoc>
    <method type="void" name="invalidateAll" startLine="337" endLine="346">
      <comment>this.isSkewValid = false;</comment>
      <comment>this.isKurtosisValid = false;</comment>
    </method>
    <javadoc>
      <text>* Returns <tt>true</tt>.
 * Returns whether a client can obtain all elements added to the receiver.
 * In other words, tells whether the receiver internally preserves all added elements.
 * If the receiver is rebinnable, the elements can be obtained via <tt>elements()</tt> methods.</text>
    </javadoc>
    <method type="boolean" name="isRebinnable" startLine="354" endLine="356" />
    <javadoc>
      <text>* Returns the maximum.</text>
    </javadoc>
    <method type="double" name="max" startLine="360" endLine="363" />
    <javadoc>
      <text>* Returns the minimum.</text>
    </javadoc>
    <method type="double" name="min" startLine="367" endLine="370" />
    <javadoc>
      <text>* Returns the moment of <tt>k</tt>-th order with value <tt>c</tt>,
 * which is <tt>Sum( (x[i]-c)<sup>k</sup> ) / size()</tt>.</text>
      <param>k the order; any number - can be less than zero, zero or greater than zero.</param>
      <param>c any number.</param>
    </javadoc>
    <method type="double" name="moment" startLine="377" endLine="380">
      <comment>currently no caching for this parameter</comment>
    </method>
    <javadoc>
      <text>* Returns the exact <tt>phi-</tt>quantile; that is, the smallest contained element <tt>elem</tt> for which holds that <tt>phi</tt> percent of elements are less than <tt>elem</tt>.</text>
      <param>phi must satisfy <tt>0 &lt; phi &lt; 1</tt>.</param>
    </javadoc>
    <method type="double" name="quantile" startLine="385" endLine="387" />
    <javadoc>
      <text>* Returns exactly how many percent of the elements contained in the receiver are <tt>&lt;= element</tt>.
 * Does linear interpolation if the element is not contained but lies in between two contained elements.</text>
      <param>element the element to search for.</param>
      <return>the exact percentage <tt>phi</tt> of elements <tt>&lt;= element</tt> (<tt>0.0 &lt;= phi &lt;= 1.0)</tt>.</return>
    </javadoc>
    <method type="double" name="quantileInverse" startLine="395" endLine="397" />
    <javadoc>
      <text>* Returns the exact quantiles of the specified percentages.</text>
      <param>percentages the percentages for which quantiles are to be computed.
 * Each percentage must be in the interval <tt>(0.0,1.0]</tt>. <tt>percentages</tt> must be sorted ascending.</param>
      <return>the exact quantiles.</return>
    </javadoc>
    <method type="DoubleArrayList" name="quantiles" startLine="404" endLine="406" />
    <javadoc>
      <text>* Removes from the receiver all elements that are contained in the specified list.</text>
      <param>list the elements to be removed.</param>
      <return><code>true</code> if the receiver changed as a result of the call.</return>
    </javadoc>
    <method type="boolean" name="removeAllOf" startLine="413" endLine="425">
      <declaration type="boolean" name="changed" />
      <scope startLine="415" endLine="423">
        <scope startLine="419" endLine="422" />
      </scope>
    </method>
    <javadoc>
      <text>* Uniformly samples (chooses) <tt>n</tt> random elements <i>with or without replacement</i> from the contained elements and adds them to the given buffer.
 * If the buffer is connected to a bin, the effect is that the chosen elements are added to the bin connected to the buffer.
 * Also see {@link #buffered(int) buffered}.</text>
      <param>n the number of elements to choose.</param>
      <param>withReplacement <tt>true</tt> samples with replacement, otherwise samples without replacement.</param>
      <param>randomGenerator a random number generator. Set this parameter to <tt>null</tt> to use a default random number generator seeded with the current time.</param>
      <param>buffer the buffer to which chosen elements will be added.</param>
      <throws>IllegalArgumentException if <tt>!withReplacement && n > size()</tt>.</throws>
      <see>cern.jet.random.sampling</see>
    </javadoc>
    <method type="void" name="sample" startLine="438" endLine="457">
      <scope startLine="442" endLine="448">
        <declaration type="cern.jet.random.sampling.RandomSamplingAssistant" name="sampler" />
        <scope startLine="445" endLine="447" />
        <comment>without</comment>
      </scope>
      <scope startLine="449" endLine="456">
        <declaration type="cern.jet.random.Uniform" name="uniform" />
        <declaration type="int" name="s" />
        <scope startLine="452" endLine="454" />
        <comment>with</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Generic bootstrap resampling. 
 * Quite optimized - Don't be afraid to try it. 
 * Executes <tt>resamples</tt> resampling steps. In each resampling step does the following: 
 * <ul>
 * <li>Uniformly samples (chooses) <tt>size()</tt> random elements <i>with replacement</i> 
 * from <tt>this</tt> and fills them into an auxiliary bin <tt>b1</tt>. 
 * <li>Uniformly samples (chooses) <tt>other.size()</tt> random elements <i>with replacement</i> 
 * from <tt>other</tt> and fills them into another auxiliary bin <tt>b2</tt>. 
 * <li>Executes the comparison function <tt>function</tt> on both auxiliary bins 
 * (<tt>function.apply(b1,b2)</tt>) and adds the result of the function to an auxiliary bootstrap bin <tt>b3</tt>. 
 * </ul>
 * <p>Finally returns the auxiliary bootstrap bin <tt>b3</tt> from which the measure of interest 
 * can be read off. </p>
 * <p><b>Background:</b></p>
 * <p>Also see a more <A HREF="http://garnet.acns.fsu.edu/~pkelly/bootstrap.html"> in-depth discussion</A> on bootstrapping and related randomization methods.
 * The classical statistical test for comparing the means of two samples is the 
 * <i>t-test</i>. Unfortunately, this test assumes that the two samples each come 
 * from a normal distribution and that these distributions have the same standard 
 * deviation. Quite often, however, data has a distribution that is non-normal 
 * in many ways. In particular, distributions are often unsymmetric. For such data, 
 * the t-test may produce misleading results and should thus not be used. Sometimes 
 * asymmetric data can be transformed into normally distributed data by taking 
 * e.g. the logarithm and the t-test will then produce valid results, but this 
 * still requires postulation of a certain distribution underlying the data, which 
 * is often not warranted, because too little is known about the data composition.</p>
 * <p><i>Bootstrap resampling of means differences</i> (and other differences) is 
 * a robust replacement for the t-test and does not require assumptions about the actual 
 * distribution of the data. The idea of bootstrapping is quite simple: simulation. 
 * The only assumption required is that the two samples <tt>a</tt> and <tt>b</tt> 
 * are representative for the underlying distribution with respect to the statistic 
 * that is being tested - this assumption is of course implicit in all statistical 
 * tests. We can now generate lots of further samples that correspond to the two 
 * given ones, by sampling <i>with replacement</i>. This process is called <i>resampling</i>. 
 * A resample can (and usually will) have a different mean than the original one 
 * and by drawing hundreds or thousands of such resamples <tt>a<sub>r</sub></tt> 
 * from <tt>a</tt> and <tt>b<sub>r</sub></tt> from <tt>b</tt> we can compute the 
 * so-called bootstrap distribution of all the differences &quot;mean of <tt>a<sub>r</sub></tt> 
 * minus mean of <tt>b<sub>r</sub></tt>&quot;. That is, a bootstrap bin filled with the differences. Now we 
 * can compute, what fraction of these differences is, say, greater than zero. 
 * Let's assume we have computed 1000 resamples of both <tt>a</tt> and <tt>b</tt> 
 * and found that only <tt>8</tt> of the differences were greater than zero. Then <tt>8/1000</tt> 
 * or <tt>0.008</tt> is the p-value (probability) for the hypothesis that the mean 
 * of the distribution underlying <tt>a</tt> is actually larger than the mean of 
 * the distribution underlying <tt>b</tt>. From this bootstrap test, we can clearly 
 * reject the hypothesis.</p>
 * <p>Instead of using means differences, we can also use other differences, for 
 * example, the median differences.</p>
 * <p>Instead of p-values we can also read arbitrary confidence intervals from the 
 * bootstrap bin. For example, <tt>90%</tt> of all bootstrap differences 
 * are left of the value <tt>-3.5</tt>, hence a left <tt>90%</tt> confidence interval 
 * for the difference would be <tt>(3.5,infinity)</tt>; in other words: the difference 
 * is <tt>3.5</tt> or larger with probability <tt>0.9</tt>.</p>
 * <p>Sometimes we would like to compare not only means and medians, but also the 
 * variability (spread) of two samples. The conventional method of doing this is 
 * the <i>F-test</i>, which compares the standard deviations. It is related to 
 * the t-test and, like the latter, assumes the two samples to come from a normal 
 * distribution. The F-test is very sensitive to data with deviations from normality. 
 * Instead we can again resort to more robust bootstrap resampling and compare a measure of 
 * spread, for example the inter-quartile range. This way we compute a <i>bootstrap 
 * resampling of inter-quartile range differences</i> in order to arrive at a test 
 * for inequality or variability.
 * </p>
 * <p> 
 * <b>Example:</b> 
 * <table>
 * <td class="PRE"> 
 * <pre>
 * // v1,v2 - the two samples to compare against each other
 * double[] v1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9,10,  21,  22,23,24,25,26,27,28,29,30,31};
 * double[] v2 = {10,11,12,13,14,15,16,17,18,19,  20,  30,31,32,33,34,35,36,37,38,39};
 * hep.aida.bin.DynamicBin1D X = new hep.aida.bin.DynamicBin1D();
 * hep.aida.bin.DynamicBin1D Y = new hep.aida.bin.DynamicBin1D();
 * X.addAllOf(new cern.colt.list.DoubleArrayList(v1));
 * Y.addAllOf(new cern.colt.list.DoubleArrayList(v2));
 * cern.jet.random.engine.RandomEngine random = new cern.jet.random.engine.MersenneTwister();
 * // bootstrap resampling of differences of means:
 * BinBinFunction1D diff = new BinBinFunction1D() {
 * &nbsp;&nbsp;&nbsp;public double apply(DynamicBin1D x, DynamicBin1D y) {return x.mean() - y.mean();}
 * };
 * // bootstrap resampling of differences of medians:
 * BinBinFunction1D diff = new BinBinFunction1D() {
 * &nbsp;&nbsp;&nbsp;public double apply(DynamicBin1D x, DynamicBin1D y) {return x.median() - y.median();}
 * };
 * // bootstrap resampling of differences of inter-quartile ranges:
 * BinBinFunction1D diff = new BinBinFunction1D() {
 * &nbsp;&nbsp;&nbsp;public double apply(DynamicBin1D x, DynamicBin1D y) {return (x.quantile(0.75)-x.quantile(0.25)) - (y.quantile(0.75)-y.quantile(0.25)); }
 * };
 * DynamicBin1D boot = X.sampleBootstrap(Y,1000,random,diff);
 * cern.jet.math.Functions F = cern.jet.math.Functions.functions;
 * System.out.println("p-value="+ (boot.aggregate(F.plus, F.greater(0)) / boot.size()));
 * System.out.println("left 90% confidence interval = ("+boot.quantile(0.9) + ",infinity)");
 * -->
 * // bootstrap resampling of differences of means:
 * p-value=0.0080
 * left 90% confidence interval = (-3.571428571428573,infinity)
 * // bootstrap resampling of differences of medians:
 * p-value=0.36
 * left 90% confidence interval = (5.0,infinity)
 * // bootstrap resampling of differences of inter-quartile ranges:
 * p-value=0.5699
 * left 90% confidence interval = (5.0,infinity)
 * </pre>
 * </td>
 * </table></text>
      <param>other the other bin to compare the receiver against.</param>
      <param>resamples the number of times resampling shall be done.</param>
      <param>randomGenerator a random number generator. Set this parameter to <tt>null</tt> to use a default random number 
 * generator seeded with the current time.</param>
      <param>function a difference function comparing two samples; takes as first argument a sample of <tt>this</tt> and as second argument 
 * a sample of <tt>other</tt>.</param>
      <return>a bootstrap bin holding the results of <tt>function</tt> of each resampling step.</return>
      <see>cern.colt.GenericPermuting#permutation(long,int)</see>
    </javadoc>
    <method type="DynamicBin1D" name="sampleBootstrap" startLine="581" endLine="611">
      <declaration type="int" name="maxCapacity" />
      <declaration type="int" name="s1" />
      <declaration type="int" name="s2" />
      <declaration type="DynamicBin1D" name="sample1" />
      <declaration type="cern.colt.buffer.DoubleBuffer" name="buffer1" />
      <declaration type="DynamicBin1D" name="sample2" />
      <declaration type="cern.colt.buffer.DoubleBuffer" name="buffer2" />
      <declaration type="DynamicBin1D" name="bootstrap" />
      <declaration type="cern.colt.buffer.DoubleBuffer" name="bootBuffer" />
      <scope startLine="600" endLine="608" />
      <comment>since "resamples" can be quite large, we care about performance and memory</comment>
      <comment>prepare auxiliary bins and buffers</comment>
      <comment>resampling steps</comment>
    </method>
    <javadoc>
      <text>* Determines whether the receivers internally preserved elements may be reordered or not.
 * <ul>
 * <li><tt>fixedOrder==false</tt> allows the order in which elements are returned by method <tt>elements()</tt> to be different from the order in which elements are added.
 * <li><tt>fixedOrder==true</tt> guarantees that under all circumstances the order in which elements are returned by method <tt>elements()</tt> is identical to the order in which elements are added.
 * However, the latter consumes twice as much memory if operations involving sorting are requested.
 * This option is usually only required if a 2-dimensional bin, formed by two 1-dimensional bins, needs to be rebinnable.
 * </ul>
 * <p>
 * Naturally, if <tt>fixedOrder</tt> is set to <tt>true</tt> you should not already have added elements to the receiver; it should be empty.</text>
    </javadoc>
    <method type="void" name="setFixedOrder" startLine="623" endLine="626">
      <comment>if (size() > 0) throw new RuntimeException("must be called before starting to add elements.");</comment>
    </method>
    <javadoc>
      <text>* Returns the number of elements contained in the receiver.</text>
      <returns>the number of elements contained in the receiver.</returns>
    </javadoc>
    <method type="int" name="size" startLine="632" endLine="637">
      <comment>Never ever use "this.size" as it would be intuitive!</comment>
      <comment>This class abuses "this.size". "this.size" DOES NOT REFLECT the number of elements contained in the receiver!</comment>
      <comment>Instead, "this.size" reflects the number of elements incremental stats computation has already processed.</comment>
    </method>
    <javadoc>
      <text>* Sorts elements if not already sorted.</text>
    </javadoc>
    <method type="void" name="sort" startLine="641" endLine="662">
      <scope startLine="642" endLine="661">
        <scope startLine="643" endLine="647" />
        <scope startLine="648" endLine="659" />
        <comment>Call updateIncrementalStats() because after sorting we no more know
what elements are still to be done by updateIncrementalStats()
and would therefore later need to rebuild incremental stats from scratch.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns a copy of the currently stored elements, sorted ascending.
 * Concerning the memory required for operations involving sorting, see {@link #setFixedOrder(boolean)}.</text>
      <return>a copy of the currently stored elements, sorted ascending.</return>
    </javadoc>
    <method type="DoubleArrayList" name="sortedElements" startLine="669" endLine="672">
      <comment>safe since we are already synchronized.</comment>
    </method>
    <javadoc>
      <text>* Returns the currently stored elements, sorted ascending; <b>WARNING:</b> not a copy of them;
 * Thus, improper usage of the returned list may not only corrupt the receiver's internal state, but also break thread safety!
 * Only provided for performance and memory sensitive applications.
 * Do not modify the returned elements unless you know exactly what you're doing.
 * This method can be used in a thread safe, clean <i>and</i> performant way by
 * explicitly synchronizing on the bin, as follows:
 * <pre>
 * ...
 * synchronized (dynamicBin) { // lock out anybody else
 * DoubleArrayList elements = dynamicBin.sortedElements_unsafe();
 * // read each element and do something with it, e.g.
 * double[] values = elements.elements(); // zero-copy
 * for (int i=dynamicBin.size(); --i >=0; ) {
 * foo(values[i]);
 * }			
 * }
 * ...
 * </pre>
 * Concerning the memory required for operations involving sorting, see {@link #setFixedOrder(boolean)}.</text>
      <return>the currently stored elements, sorted ascending.</return>
    </javadoc>
    <method type="DoubleArrayList" name="sortedElements_unsafe" startLine="696" endLine="700" />
    <javadoc>
      <text>* Modifies the receiver to be standardized.
 * Changes each element <tt>x[i]</tt> as follows: <tt>x[i] = (x[i]-mean)/standardDeviation</tt>.</text>
    </javadoc>
    <method type="void" name="standardize" startLine="705" endLine="710" />
    <javadoc>
      <text>* Returns the sum of all elements, which is <tt>Sum( x[i] )</tt>.</text>
    </javadoc>
    <method type="double" name="sum" startLine="714" endLine="717" />
    <javadoc>
      <text>* Returns the sum of inversions, which is <tt>Sum( 1 / x[i] )</tt>.</text>
    </javadoc>
    <method type="double" name="sumOfInversions" startLine="721" endLine="724" />
    <javadoc>
      <text>* Returns the sum of logarithms, which is <tt>Sum( Log(x[i]) )</tt>.</text>
    </javadoc>
    <method type="double" name="sumOfLogarithms" startLine="728" endLine="731" />
    <javadoc>
      <text>* Returns the <tt>k-th</tt> order sum of powers, which is <tt>Sum( x[i]<sup>k</sup> )</tt>.</text>
      <param>k the order of the powers.</param>
      <return>the sum of powers.</return>
    </javadoc>
    <method type="double" name="sumOfPowers" startLine="737" endLine="742">
      <comment>no chaching for this measure</comment>
    </method>
    <javadoc>
      <text>* Returns the sum of squares, which is <tt>Sum( x[i] * x[i] )</tt>.</text>
    </javadoc>
    <method type="double" name="sumOfSquares" startLine="746" endLine="749" />
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="753" endLine="766">
      <declaration type="StringBuffer" name="buf" />
      <declaration type="DoubleArrayList" name="distinctElements" />
      <declaration type="IntArrayList" name="frequencies" />
      <scope startLine="758" endLine="761">
        <comment>don't cause unintended floods</comment>
      </scope>
      <scope startLine="762" endLine="764" />
    </method>
    <javadoc>
      <text>* Removes the <tt>s</tt> smallest and <tt>l</tt> largest elements from the receiver.
 * The receivers size will be reduced by <tt>s + l</tt> elements.</text>
      <param>s the number of smallest elements to trim away (<tt>s >= 0</tt>).</param>
      <param>l the number of largest elements to trim away (<tt>l >= 0</tt>).</param>
    </javadoc>
    <method type="void" name="trim" startLine="774" endLine="778">
      <declaration type="DoubleArrayList" name="elems" />
    </method>
    <javadoc>
      <text>* Returns the trimmed mean.
 * That is the mean of the data <i>if</i> the <tt>s</tt> smallest and <tt>l</tt> largest elements <i>would</i> be removed from the receiver (they are not removed).</text>
      <param>s the number of smallest elements to trim away (<tt>s >= 0</tt>).</param>
      <param>l the number of largest elements to trim away (<tt>l >= 0</tt>).</param>
      <return>the trimmed mean.</return>
    </javadoc>
    <method type="double" name="trimmedMean" startLine="787" endLine="790">
      <comment>no caching for this parameter.</comment>
    </method>
    <javadoc>
      <text>* Trims the capacity of the receiver to be the receiver's current size.
 * (This has nothing to do with trimming away smallest and largest elements. The method name is used to be consistent with JDK practice.)
 * <p>
 * Releases any superfluos internal memory.
 * An application can use this operation to minimize the storage of the receiver.
 * Does not affect functionality.</text>
    </javadoc>
    <method type="void" name="trimToSize" startLine="799" endLine="805" />
    <javadoc>
      <text>* assertion: isBasicParametersValid == false</text>
    </javadoc>
    <method type="void" name="updateIncrementalStats" startLine="810" endLine="828">
      <declaration type="double[]" name="arguments" />
      <comment>prepare arguments</comment>
      <comment>store the new parameters back</comment>
      <comment>next time we don't need to redo the stuff we have just done...</comment>
    </method>
    <javadoc>
      <text>* assertion: isBasicParametersValid == false</text>
    </javadoc>
    <method type="void" name="updateSumOfInversions" startLine="833" endLine="836" />
    <javadoc />
    <method type="void" name="updateSumOfLogarithms" startLine="840" endLine="843" />
    <javadoc>
      <param>element element to be appended.</param>
    </javadoc>
    <method type="void" name="validateAll" startLine="849" endLine="858">
      <comment>this.isSkewValid = true;</comment>
      <comment>this.isKurtosisValid = true;</comment>
    </method>
    <comment>Never ever use "this.size" as it would be intuitive!</comment>
    <comment>This class abuses "this.size". "this.size" DOES NOT REFLECT the number of elements contained in the receiver!</comment>
    <comment>Instead, "this.size" reflects the number of elements incremental stats computation has already processed.</comment>
    <comment>cached parameters</comment>
    <comment>protected double skew = 0.0;</comment>
    <comment>protected double kurtosis = 0.0;</comment>
    <comment>cache states</comment>
    <comment>protected boolean isSkewValid = true;</comment>
    <comment>protected boolean isKurtosisValid = true;</comment>
    <comment>protected boolean isSumOfPowersValid = true;</comment>
  </class>
</source>
