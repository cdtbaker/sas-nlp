<?xml version="1.0" encoding="UTF-8"?>
<source package="hep.aida.bin">
  <import name="cern.colt.list.DoubleArrayList" />
  <import name="cern.jet.stat.Descriptive" />
  <class name="StaticBin1D" extends="AbstractBin1D" startLine="5">
    <javadoc>
      <text>* 1-dimensional non-rebinnable bin consuming <tt>double</tt> elements;
 * Efficiently computes basic statistics of data sequences.
 * First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
 * <p>
 * The data streamed into a <tt>SimpleBin1D</tt> is not preserved!
 * As a consequence infinitely many elements can be added to this bin.
 * As a further consequence this bin cannot compute more than basic statistics.
 * It is also not rebinnable.
 * If these drawbacks matter, consider to use a {@link DynamicBin1D}, 
 * which overcomes them at the expense of increased memory requirements.
 * <p>
 * This class is fully thread safe (all public methods are synchronized).
 * Thus, you can have one or more threads adding to the bin as well as one or more threads reading and viewing the statistics of the bin <i>while it is filled</i>.
 * For high performance, add data in large chunks (buffers) via method <tt>addAllOf</tt> rather than piecewise via method <tt>add</tt>.
 * <p>
 * <b>Implementation</b>:
 * Incremental maintainance. Performance linear in the number of elements added.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>0.9, 03-Jul-99</version>
    </javadoc>
    <javadoc>
      <text>* The number of elements consumed by incremental parameter maintainance.</text>
    </javadoc>
    <declaration type="int" name="size" />
    <declaration type="double" name="min" />
    <declaration type="double" name="max" />
    <declaration type="double" name="sum" />
    <declaration type="double" name="sum_xx" />
    <javadoc>
      <text>* Function arguments used by method addAllOf(...)
 * For memory tuning only. Avoids allocating a new array of arguments each time addAllOf(...) is called.
 * Each bin does not need its own set of argument vars since they are declared as "static".
 * addAllOf(...) of this class uses only 4 entries.
 * Subclasses computing additional incremental statistics may need more arguments.
 * So, to be on the safe side we allocate space for 20 args.
 * Be sure you access this arguments only in synchronized blocks like
 * synchronized (arguments) { do it }
 * By the way, the whole fuss would be unnecessary if Java would know INOUT parameters (call by reference).</text>
    </javadoc>
    <declaration type="double[]" name="arguments" />
    <javadoc>
      <text>* Constructs and returns an empty bin.</text>
    </javadoc>
    <method type="constructor" name="StaticBin1D" startLine="56" endLine="58" />
    <javadoc>
      <text>* Adds the specified element to the receiver.</text>
      <param>element element to be appended.</param>
    </javadoc>
    <method type="void" name="add" startLine="64" endLine="83">
      <comment>prototyping implementation; inefficient; TODO</comment>
      <comment>sumSquares += element  element;
if (this.done == 0) {  initial setup
this.min = element;
this.max = element;
}
else {
if (element < this.min) this.min = element;
if (element > this.max) this.max = element;

double oldMean = this.mean;
this.mean += (element - this.mean)(done+1);
this.sumsq += (element-this.mean)(element-oldMean);  cool, huh?
}
this.done++;</comment>
    </method>
    <javadoc>
      <text>* Adds the part of the specified list between indexes <tt>from</tt> (inclusive) and <tt>to</tt> (inclusive) to the receiver.</text>
      <param>list the list of which elements shall be added.</param>
      <param>from the index of the first element to be added (inclusive).</param>
      <param>to the index of the last element to be added (inclusive).</param>
      <throws>IndexOutOfBoundsException if <tt>list.size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=list.size())</tt>.</throws>
    </javadoc>
    <method type="void" name="addAllOfFromTo" startLine="92" endLine="111">
      <scope startLine="94" endLine="110">
        <comment>prepare arguments</comment>
        <comment>store the new parameters back</comment>
      </scope>
      <comment>if (this.arguments == null) setUpCache();</comment>
    </method>
    <javadoc>
      <text>* Removes all elements from the receiver.
 * The receiver will be empty after this call returns.</text>
    </javadoc>
    <method type="void" name="clear" startLine="116" endLine="119" />
    <javadoc>
      <text>* Resets the values of all measures.</text>
    </javadoc>
    <method type="void" name="clearAllMeasures" startLine="123" endLine="128" />
    <javadoc>
      <text>* Returns <tt>false</tt>.
 * Returns whether a client can obtain all elements added to the receiver.
 * In other words, tells whether the receiver internally preserves all added elements.
 * If the receiver is rebinnable, the elements can be obtained via <tt>elements()</tt> methods.</text>
    </javadoc>
    <method type="boolean" name="isRebinnable" startLine="136" endLine="138" />
    <javadoc>
      <text>* Returns the maximum.</text>
    </javadoc>
    <method type="double" name="max" startLine="142" endLine="144" />
    <javadoc>
      <text>* Returns the minimum.</text>
    </javadoc>
    <method type="double" name="min" startLine="148" endLine="150" />
    <javadoc>
      <text>* Returns the number of elements contained in the receiver.</text>
      <returns>the number of elements contained in the receiver.</returns>
    </javadoc>
    <method type="int" name="size" startLine="156" endLine="158" />
    <javadoc>
      <text>* Returns the sum of all elements, which is <tt>Sum( x[i] )</tt>.</text>
    </javadoc>
    <method type="double" name="sum" startLine="162" endLine="164" />
    <javadoc>
      <text>* Returns the sum of squares, which is <tt>Sum( x[i] * x[i] )</tt>.</text>
    </javadoc>
    <method type="double" name="sumOfSquares" startLine="168" endLine="170" />
    <comment>cached parameters</comment>
    <comment>Min( x[i] )</comment>
    <comment>Max( x[i] )</comment>
    <comment>Sum( x[i] )</comment>
    <comment>Sum( x[i]*x[i] )</comment>
  </class>
</source>
