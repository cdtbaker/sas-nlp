<?xml version="1.0" encoding="UTF-8"?>
<source package="corejava">
  <import name="java.io.*" />
  <class name="Format" startLine="24">
    <javadoc>
      <text>* A class for formatting numbers that follows <tt>printf</tt> conventions.
 * Also implements C-like <tt>atoi</tt> and <tt>atof</tt> functions</text>
      <version>1.22 2002-11-16</version>
      <author>Cay Horstmann
 * 1998-09-14: Fixed a number of bugs.
 * 1.Formatting the most extreme negative number (-9223372036854775808L) printed with 2 leading minus signs.
 * 2.Printing 0 with a %e or %g format did not work.
 * 3.Printing numbers that were closer to 1 than the number of requested decimal places rounded down rather than up, e.g. formatting 1.999 with %.2f printed 1.00. (This one is pretty serious, of course.)
 * 4.Printing with precision 0 (e.g %10.0f) didn't work.
 * 5.Printing a string with a precision that exceeded the string length (e.g. print "Hello" with %20.10s) caused a StringIndexOutOfBounds error.
 * 1998-10-21: Changed method names from print to printf
 * 2000-06-09: Moved to package com.horstmann; no longer part of
 * Core Java
 * 2000-06-09: Fixed a number of bugs.
 * 1.Printing 100.0 with %e printed 10.0e1, not 1.0e2
 * 2.Printing Inf and NaN didn't work.
 * 2000-06-09: Coding guideline cleanup
 * 2002-11-16: Move to package com.horstmann.format; licensed under LGPL</author>
    </javadoc>
    <javadoc>
      <text>* Formats the number following <tt>printf</tt> conventions.
 * Main limitation: Can only handle one format parameter at a time
 * Use multiple Format objects to format more than one number</text>
      <param>s the format string following printf conventions
 * The string has a prefix, a format code and a suffix. The prefix and suffix
 * become part of the formatted output. The format code directs the
 * formatting of the (single) parameter to be formatted. The code has the
 * following structure
 * <ul>
 * <li> a % (required)
 * <li> a modifier (optional)
 * <dl>
 * <dt> + <dd> forces display of + for positive numbers
 * <dt> 0 <dd> show leading zeroes
 * <dt> - <dd> align left in the field
 * <dt> space <dd> prepend a space in front of positive numbers
 * <dt> # <dd> use "alternate" format. Add 0 or 0x for octal or hexadecimal numbers. Don't suppress trailing zeroes in general floating point format.
 * </dl>
 * <li> an integer denoting field width (optional)
 * <li> a period followed by an integer denoting precision (optional)
 * <li> a format descriptor (required)
 * <dl>
 * <dt>f <dd> floating point number in fixed format
 * <dt>e, E <dd> floating point number in exponential notation (scientific format). The E format results in an uppercase E for the exponent (1.14130E+003), the e format in a lowercase e.
 * <dt>g, G <dd> floating point number in general format (fixed format for small numbers, exponential format for large numbers). Trailing zeroes are suppressed. The G format results in an uppercase E for the exponent (if any), the g format in a lowercase e.
 * <dt>d, i <dd> integer in decimal
 * <dt>x <dd> integer in hexadecimal
 * <dt>o <dd> integer in octal
 * <dt>s <dd> string
 * <dt>c <dd> character
 * </dl>
 * </ul></param>
      <exception>IllegalArgumentException if bad format</exception>
    </javadoc>
    <method type="constructor" name="Format" startLine="85" endLine="172">
      <declaration type="int" name="state" />
      <declaration type="int" name="length" />
      <declaration type="int" name="parseState" />
      <declaration type="int" name="i" />
      <scope startLine="105" endLine="124">
        <scope startLine="108" endLine="120">
          <scope startLine="110" endLine="118">
            <scope startLine="112" endLine="115" />
          </scope>
        </scope>
      </scope>
      <scope startLine="126" endLine="135">
        <scope startLine="133" endLine="133" />
      </scope>
      <scope startLine="137" endLine="152">
        <scope startLine="140" endLine="143" />
        <scope startLine="145" endLine="149" />
      </scope>
      <scope startLine="154" endLine="163">
        <scope startLine="157" endLine="160" />
      </scope>
      <scope startLine="165" endLine="169" />
      <comment>0 = prefix, 1 = flags, 2 = width, 3 = precision,</comment>
      <comment>4 = format, 5 = end</comment>
    </method>
    <javadoc>
      <text>* prints a formatted number following printf conventions</text>
      <param>fmt the format string</param>
      <param>x the double to print</param>
    </javadoc>
    <method type="void" name="printf" startLine="180" endLine="182" />
    <javadoc>
      <text>* prints a formatted number following printf conventions</text>
      <param>fmt the format string</param>
      <param>x the int to print</param>
    </javadoc>
    <method type="void" name="printf" startLine="190" endLine="192" />
    <javadoc>
      <text>* prints a formatted number following printf conventions</text>
      <param>fmt the format string</param>
      <param>x the long to print</param>
    </javadoc>
    <method type="void" name="printf" startLine="200" endLine="202" />
    <javadoc>
      <text>* prints a formatted number following printf conventions</text>
      <param>fmt the format string</param>
      <param>x the character to print</param>
    </javadoc>
    <method type="void" name="printf" startLine="210" endLine="212" />
    <javadoc>
      <text>* prints a formatted number following printf conventions</text>
      <param>fmt the format string</param>
      <param>x a string to print</param>
    </javadoc>
    <method type="void" name="printf" startLine="220" endLine="222" />
    <javadoc>
      <text>* Converts a string of digits (decimal, octal or hex) to an integer</text>
      <param>s a string</param>
      <return>the numeric value of the prefix of s representing a base 10 integer</return>
    </javadoc>
    <method type="int" name="atoi" startLine="230" endLine="232" />
    <javadoc>
      <text>* Converts a string of digits (decimal, octal or hex) to a long integer</text>
      <param>s a string</param>
      <return>the numeric value of the prefix of s representing a base 10 integer</return>
    </javadoc>
    <method type="long" name="atol" startLine="240" endLine="251">
      <declaration type="int" name="i" />
      <scope startLine="245" endLine="249" />
    </method>
    <method type="long" name="parseLong" startLine="254" endLine="276">
      <declaration type="int" name="i" />
      <declaration type="int" name="sign" />
      <declaration type="long" name="r" />
      <scope startLine="260" endLine="260" />
      <scope startLine="261" endLine="261" />
      <scope startLine="263" endLine="274">
        <declaration type="char" name="ch" />
      </scope>
    </method>
    <javadoc>
      <text>* Converts a string of digits to a <tt>double</tt></text>
      <param>s a string</param>
    </javadoc>
    <method type="double" name="atof" startLine="283" endLine="321">
      <declaration type="int" name="i" />
      <declaration type="int" name="sign" />
      <declaration type="double" name="r" />
      <declaration type="double" name="f" />
      <declaration type="double" name="p" />
      <declaration type="int" name="state" />
      <scope startLine="292" endLine="292" />
      <scope startLine="293" endLine="293" />
      <scope startLine="295" endLine="319">
        <declaration type="char" name="ch" />
        <scope startLine="298" endLine="306">
          <scope startLine="302" endLine="305" />
        </scope>
        <scope startLine="308" endLine="311" />
        <scope startLine="313" endLine="316">
          <declaration type="long" name="e" />
        </scope>
      </scope>
      <comment>integer part</comment>
      <comment>fractional part</comment>
      <comment>exponent of fractional part</comment>
      <comment>0 = int part, 1 = frac part</comment>
    </method>
    <javadoc>
      <text>* Formats a <tt>double</tt> into a string (like sprintf in C)</text>
      <param>x the number to format</param>
      <return>the formatted string</return>
      <exception>IllegalArgumentException if bad argument</exception>
    </javadoc>
    <method type="String" name="format" startLine="330" endLine="344">
      <declaration type="String" name="r" />
      <declaration type="int" name="s" />
      <scope startLine="334" endLine="334" />
    </method>
    <javadoc>
      <text>* Formats an integer into a string (like sprintf in C)</text>
      <param>x the number to format</param>
      <return>the formatted string</return>
    </javadoc>
    <method type="String" name="format" startLine="352" endLine="357">
      <declaration type="long" name="lx" />
    </method>
    <javadoc>
      <text>* Formats a long integer into a string (like sprintf in C)</text>
      <param>x the number to format</param>
      <return>the formatted string</return>
    </javadoc>
    <method type="String" name="format" startLine="365" endLine="390">
      <declaration type="String" name="r" />
      <declaration type="int" name="s" />
      <scope startLine="369" endLine="380">
        <scope startLine="371" endLine="374" />
        <scope startLine="376" endLine="379" />
      </scope>
    </method>
    <javadoc>
      <text>* Formats a character into a string (like sprintf in C)</text>
      <param>x the value to format</param>
      <return>the formatted string</return>
    </javadoc>
    <method type="String" name="format" startLine="398" endLine="404">
      <declaration type="String" name="r" />
    </method>
    <javadoc>
      <text>* Formats a string into a larger string (like sprintf in C)</text>
      <param>x the value to format</param>
      <return>the formatted string</return>
    </javadoc>
    <method type="String" name="format" startLine="412" endLine="418" />
    <javadoc>
      <text>* a test stub for the format class</text>
    </javadoc>
    <method type="void" name="main" startLine="425" endLine="505">
      <declaration type="double" name="x" />
      <declaration type="double" name="y" />
      <declaration type="double" name="z" />
      <declaration type="double" name="w" />
      <declaration type="double" name="u" />
      <declaration type="double" name="v" />
      <declaration type="int" name="d" />
      <comment>regression test to confirm fix of reported bugs</comment>
      <comment>2000-06-09</comment>
    </method>
    <method type="String" name="repeat" startLine="508" endLine="513">
      <declaration type="StringBuffer" name="s" />
    </method>
    <method type="String" name="convert" startLine="516" endLine="525">
      <declaration type="String" name="r" />
      <scope startLine="520" endLine="523" />
    </method>
    <method type="String" name="pad" startLine="528" endLine="532">
      <declaration type="String" name="p" />
    </method>
    <method type="String" name="sign" startLine="535" endLine="556">
      <declaration type="String" name="p" />
      <scope startLine="539" endLine="542" />
      <scope startLine="544" endLine="548" />
      <declaration type="int" name="w" />
    </method>
    <method type="String" name="fixedFormat" startLine="559" endLine="594">
      <declaration type="boolean" name="removeTrailing" />
      <declaration type="long" name="whole" />
      <declaration type="double" name="fr" />
      <declaration type="double" name="factor" />
      <declaration type="String" name="leadingZeroes" />
      <scope startLine="575" endLine="578" />
      <declaration type="long" name="l" />
      <scope startLine="580" endLine="580">
        <comment>CSH 10-25-97</comment>
      </scope>
      <declaration type="String" name="z" />
      <scope startLine="586" endLine="591">
        <declaration type="int" name="t" />
      </scope>
      <comment>remove trailing zeroes and decimal point</comment>
      <comment>fractional part</comment>
    </method>
    <method type="String" name="expFormat" startLine="597" endLine="631">
      <declaration type="String" name="f" />
      <declaration type="int" name="e" />
      <declaration type="double" name="dd" />
      <declaration type="double" name="factor" />
      <scope startLine="603" endLine="606">
        <scope startLine="604" endLine="604" />
        <scope startLine="605" endLine="605" />
        <comment>2000-06-09</comment>
      </scope>
      <declaration type="String" name="p" />
      <scope startLine="620" endLine="623" />
      <scope startLine="625" endLine="628" />
    </method>
    <declaration type="int" name="width" />
    <declaration type="int" name="precision" />
    <declaration type="String" name="pre" />
    <declaration type="String" name="post" />
    <declaration type="boolean" name="leadingZeroes" />
    <declaration type="boolean" name="showPlus" />
    <declaration type="boolean" name="alternate" />
    <declaration type="boolean" name="showSpace" />
    <declaration type="boolean" name="leftAlign" />
    <declaration type="char" name="fmt" />
    <comment>one of cdeEfgGiosxXos</comment>
  </class>
</source>
