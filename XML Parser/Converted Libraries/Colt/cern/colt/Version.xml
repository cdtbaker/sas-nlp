<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt">
  <class name="Version" startLine="11">
    <javadoc>
      <text>* Information about the current release.
 * Use this class to distinguish releases and base runtime decisions upon.
 * Versions are of the form <tt>Major.Minor.Micro.Build</tt>, e.g. <tt>1.0.0.52</tt>
 * <p>
 * You can most easily display version info by running <tt>java cern.colt.Version</tt>.</text>
    </javadoc>
    <javadoc>
      <text>* Not yet commented.</text>
    </javadoc>
    <method type="constructor" name="Version" startLine="22" endLine="23" />
    <javadoc>
      <text>* Returns all version information as string.</text>
    </javadoc>
    <method type="String" name="asString" startLine="27" endLine="39">
      <declaration type="String" name="vendor" />
    </method>
    <javadoc>
      <text>* Returns the time this release was build; for example "Tue Apr 11 11:50:39 CEST 2000".</text>
    </javadoc>
    <method type="String" name="getBuildTime" startLine="43" endLine="50">
      <declaration type="String" name="s" />
      <declaration type="int" name="k" />
      <comment>String s = "1.2.3.56 (Tue Apr 11 11:50:39 CEST 2000)";</comment>
    </method>
    <javadoc>
      <text>* Returns the build version of this release.</text>
    </javadoc>
    <method type="int" name="getBuildVersion" startLine="54" endLine="56" />
    <javadoc>
      <text>* Returns the major version of this release.</text>
    </javadoc>
    <method type="int" name="getMajorVersion" startLine="60" endLine="62" />
    <javadoc>
      <text>* Returns the micro version of this release.</text>
    </javadoc>
    <method type="int" name="getMicroVersion" startLine="66" endLine="68" />
    <javadoc>
      <text>* Returns the minor version of this release.</text>
    </javadoc>
    <method type="int" name="getMinorVersion" startLine="72" endLine="74" />
    <javadoc />
    <method type="Package" name="getPackage" startLine="78" endLine="80" />
    <javadoc>
      <text>* Prints <tt>asString</tt> on <tt>System.out</tt>.</text>
      <param>args ignored.</param>
    </javadoc>
    <method type="void" name="main" startLine="85" endLine="87" />
    <javadoc>
      <text>* Returns the major version of this release; for example version 1.2.3 returns 1.</text>
    </javadoc>
    <method type="int[]" name="numbers" startLine="91" endLine="114">
      <declaration type="int" name="w" />
      <declaration type="int[][]" name="numbers" />
      <comment>int[] numbers = new int[w];</comment>
      <comment>if (getPackage()==null) return numbers;
String s = getPackage().getImplementationVersion();
if (s==null) return numbers;
int k = s.indexOf('(');
s = s.substring(0,k);
s = s.trim();
s = s.replace('.', ' ');
s = ViolinStrings.Strings.stripBlanks(s);
s = ViolinStrings.Strings.translate(s, ".", " ");
String[] words = s.split(".");  requires jdk 1.4.x
for (int i=0; i<w; i++) {
numbers[i] = Integer.parseInt(words[i]);
numbers[i] = Integer.parseInt(ViolinStrings.Strings.word(s, i));
System.out.println(numbers[i]);
}
return numbers;</comment>
    </method>
  </class>
</source>
