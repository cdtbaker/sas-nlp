<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt">
  <class name="Arrays" extends="Object" startLine="11">
    <javadoc>
      <text>* Array manipulations; complements <tt>java.util.Arrays</tt>.</text>
      <see>java.util.Arrays</see>
      <see>cern.colt.Sorting</see>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 03-Jul-99</version>
    </javadoc>
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="Arrays" startLine="24" endLine="24" />
    <javadoc>
      <text>* Ensures that a given array can hold up to <tt>minCapacity</tt> elements.
 * Returns the identical array if it can hold at least the number of elements specified.
 * Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
 * that it can hold at least the number of elements specified by 
 * the minimum capacity argument.</text>
      <param>minCapacity   the desired minimum capacity.</param>
    </javadoc>
    <method type="byte[]" name="ensureCapacity" startLine="35" endLine="51">
      <declaration type="int" name="oldCapacity" />
      <declaration type="byte[]" name="newArray" />
      <scope startLine="38" endLine="46">
        <declaration type="int" name="newCapacity" />
        <scope startLine="40" endLine="42" />
      </scope>
      <scope startLine="47" endLine="49" />
    </method>
    <javadoc>
      <text>* Ensures that a given array can hold up to <tt>minCapacity</tt> elements.
 * Returns the identical array if it can hold at least the number of elements specified.
 * Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
 * that it can hold at least the number of elements specified by 
 * the minimum capacity argument.</text>
      <param>minCapacity   the desired minimum capacity.</param>
    </javadoc>
    <method type="char[]" name="ensureCapacity" startLine="62" endLine="78">
      <declaration type="int" name="oldCapacity" />
      <declaration type="char[]" name="newArray" />
      <scope startLine="65" endLine="73">
        <declaration type="int" name="newCapacity" />
        <scope startLine="67" endLine="69" />
      </scope>
      <scope startLine="74" endLine="76" />
    </method>
    <javadoc>
      <text>* Ensures that a given array can hold up to <tt>minCapacity</tt> elements.
 * Returns the identical array if it can hold at least the number of elements specified.
 * Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
 * that it can hold at least the number of elements specified by 
 * the minimum capacity argument.</text>
      <param>minCapacity   the desired minimum capacity.</param>
    </javadoc>
    <method type="double[]" name="ensureCapacity" startLine="89" endLine="106">
      <declaration type="int" name="oldCapacity" />
      <declaration type="double[]" name="newArray" />
      <scope startLine="92" endLine="101">
        <declaration type="int" name="newCapacity" />
        <scope startLine="94" endLine="96" />
        <comment>for (int i = oldCapacity; --i >= 0; ) newArray[i] = array[i];</comment>
      </scope>
      <scope startLine="102" endLine="104" />
    </method>
    <javadoc>
      <text>* Ensures that a given array can hold up to <tt>minCapacity</tt> elements.
 * Returns the identical array if it can hold at least the number of elements specified.
 * Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
 * that it can hold at least the number of elements specified by 
 * the minimum capacity argument.</text>
      <param>minCapacity   the desired minimum capacity.</param>
    </javadoc>
    <method type="float[]" name="ensureCapacity" startLine="117" endLine="133">
      <declaration type="int" name="oldCapacity" />
      <declaration type="float[]" name="newArray" />
      <scope startLine="120" endLine="128">
        <declaration type="int" name="newCapacity" />
        <scope startLine="122" endLine="124" />
      </scope>
      <scope startLine="129" endLine="131" />
    </method>
    <javadoc>
      <text>* Ensures that a given array can hold up to <tt>minCapacity</tt> elements.
 * Returns the identical array if it can hold at least the number of elements specified.
 * Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
 * that it can hold at least the number of elements specified by 
 * the minimum capacity argument.</text>
      <param>minCapacity   the desired minimum capacity.</param>
    </javadoc>
    <method type="int[]" name="ensureCapacity" startLine="144" endLine="160">
      <declaration type="int" name="oldCapacity" />
      <declaration type="int[]" name="newArray" />
      <scope startLine="147" endLine="155">
        <declaration type="int" name="newCapacity" />
        <scope startLine="149" endLine="151" />
      </scope>
      <scope startLine="156" endLine="158" />
    </method>
    <javadoc>
      <text>* Ensures that a given array can hold up to <tt>minCapacity</tt> elements.
 * Returns the identical array if it can hold at least the number of elements specified.
 * Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
 * that it can hold at least the number of elements specified by 
 * the minimum capacity argument.</text>
      <param>minCapacity   the desired minimum capacity.</param>
    </javadoc>
    <method type="long[]" name="ensureCapacity" startLine="171" endLine="187">
      <declaration type="int" name="oldCapacity" />
      <declaration type="long[]" name="newArray" />
      <scope startLine="174" endLine="182">
        <declaration type="int" name="newCapacity" />
        <scope startLine="176" endLine="178" />
      </scope>
      <scope startLine="183" endLine="185" />
    </method>
    <javadoc>
      <text>* Ensures that a given array can hold up to <tt>minCapacity</tt> elements.
 * Returns the identical array if it can hold at least the number of elements specified.
 * Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
 * that it can hold at least the number of elements specified by 
 * the minimum capacity argument.</text>
      <param>minCapacity   the desired minimum capacity.</param>
    </javadoc>
    <method type="Object[]" name="ensureCapacity" startLine="198" endLine="214">
      <declaration type="int" name="oldCapacity" />
      <declaration type="Object[]" name="newArray" />
      <scope startLine="201" endLine="209">
        <declaration type="int" name="newCapacity" />
        <scope startLine="203" endLine="205" />
      </scope>
      <scope startLine="210" endLine="212" />
    </method>
    <javadoc>
      <text>* Ensures that a given array can hold up to <tt>minCapacity</tt> elements.
 * Returns the identical array if it can hold at least the number of elements specified.
 * Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
 * that it can hold at least the number of elements specified by 
 * the minimum capacity argument.</text>
      <param>minCapacity   the desired minimum capacity.</param>
    </javadoc>
    <method type="short[]" name="ensureCapacity" startLine="225" endLine="241">
      <declaration type="int" name="oldCapacity" />
      <declaration type="short[]" name="newArray" />
      <scope startLine="228" endLine="236">
        <declaration type="int" name="newCapacity" />
        <scope startLine="230" endLine="232" />
      </scope>
      <scope startLine="237" endLine="239" />
    </method>
    <javadoc>
      <text>* Ensures that a given array can hold up to <tt>minCapacity</tt> elements.
 * Returns the identical array if it can hold at least the number of elements specified.
 * Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
 * that it can hold at least the number of elements specified by 
 * the minimum capacity argument.</text>
      <param>minCapacity   the desired minimum capacity.</param>
    </javadoc>
    <method type="boolean[]" name="ensureCapacity" startLine="252" endLine="268">
      <declaration type="int" name="oldCapacity" />
      <declaration type="boolean[]" name="newArray" />
      <scope startLine="255" endLine="263">
        <declaration type="int" name="newCapacity" />
        <scope startLine="257" endLine="259" />
      </scope>
      <scope startLine="264" endLine="266" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (<tt>"[]"</tt>).  Adjacent elements are separated by the characters
 * <tt>", "</tt> (comma and space).</text>
      <return>a string representation of the specified array.</return>
    </javadoc>
    <method type="String" name="toString" startLine="276" endLine="287">
      <declaration type="StringBuffer" name="buf" />
      <declaration type="int" name="maxIndex" />
      <scope startLine="280" endLine="284" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (<tt>"[]"</tt>).  Adjacent elements are separated by the characters
 * <tt>", "</tt> (comma and space).</text>
      <return>a string representation of the specified array.</return>
    </javadoc>
    <method type="String" name="toString" startLine="295" endLine="306">
      <declaration type="StringBuffer" name="buf" />
      <declaration type="int" name="maxIndex" />
      <scope startLine="299" endLine="303" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (<tt>"[]"</tt>).  Adjacent elements are separated by the characters
 * <tt>", "</tt> (comma and space).</text>
      <return>a string representation of the specified array.</return>
    </javadoc>
    <method type="String" name="toString" startLine="314" endLine="325">
      <declaration type="StringBuffer" name="buf" />
      <declaration type="int" name="maxIndex" />
      <scope startLine="318" endLine="322" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (<tt>"[]"</tt>).  Adjacent elements are separated by the characters
 * <tt>", "</tt> (comma and space).</text>
      <return>a string representation of the specified array.</return>
    </javadoc>
    <method type="String" name="toString" startLine="333" endLine="344">
      <declaration type="StringBuffer" name="buf" />
      <declaration type="int" name="maxIndex" />
      <scope startLine="337" endLine="341" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (<tt>"[]"</tt>).  Adjacent elements are separated by the characters
 * <tt>", "</tt> (comma and space).</text>
      <return>a string representation of the specified array.</return>
    </javadoc>
    <method type="String" name="toString" startLine="352" endLine="363">
      <declaration type="StringBuffer" name="buf" />
      <declaration type="int" name="maxIndex" />
      <scope startLine="356" endLine="360" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (<tt>"[]"</tt>).  Adjacent elements are separated by the characters
 * <tt>", "</tt> (comma and space).</text>
      <return>a string representation of the specified array.</return>
    </javadoc>
    <method type="String" name="toString" startLine="371" endLine="382">
      <declaration type="StringBuffer" name="buf" />
      <declaration type="int" name="maxIndex" />
      <scope startLine="375" endLine="379" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (<tt>"[]"</tt>).  Adjacent elements are separated by the characters
 * <tt>", "</tt> (comma and space).</text>
      <return>a string representation of the specified array.</return>
    </javadoc>
    <method type="String" name="toString" startLine="390" endLine="401">
      <declaration type="StringBuffer" name="buf" />
      <declaration type="int" name="maxIndex" />
      <scope startLine="394" endLine="398" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (<tt>"[]"</tt>).  Adjacent elements are separated by the characters
 * <tt>", "</tt> (comma and space).</text>
      <return>a string representation of the specified array.</return>
    </javadoc>
    <method type="String" name="toString" startLine="409" endLine="420">
      <declaration type="StringBuffer" name="buf" />
      <declaration type="int" name="maxIndex" />
      <scope startLine="413" endLine="417" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (<tt>"[]"</tt>).  Adjacent elements are separated by the characters
 * <tt>", "</tt> (comma and space).</text>
      <return>a string representation of the specified array.</return>
    </javadoc>
    <method type="String" name="toString" startLine="428" endLine="439">
      <declaration type="StringBuffer" name="buf" />
      <declaration type="int" name="maxIndex" />
      <scope startLine="432" endLine="436" />
    </method>
    <javadoc>
      <text>* Ensures that the specified array cannot hold more than <tt>maxCapacity</tt> elements.
 * An application can use this operation to minimize array storage.
 * <p>
 * Returns the identical array if <tt>array.length &lt;= maxCapacity</tt>.
 * Otherwise, returns a new array with a length of <tt>maxCapacity</tt>
 * containing the first <tt>maxCapacity</tt> elements of <tt>array</tt>.</text>
      <param>maxCapacity   the desired maximum capacity.</param>
    </javadoc>
    <method type="byte[]" name="trimToCapacity" startLine="450" endLine="457">
      <scope startLine="451" endLine="455">
        <declaration type="byte[]" name="oldArray" />
      </scope>
    </method>
    <javadoc>
      <text>* Ensures that the specified array cannot hold more than <tt>maxCapacity</tt> elements.
 * An application can use this operation to minimize array storage.
 * <p>
 * Returns the identical array if <tt>array.length &lt;= maxCapacity</tt>.
 * Otherwise, returns a new array with a length of <tt>maxCapacity</tt>
 * containing the first <tt>maxCapacity</tt> elements of <tt>array</tt>.</text>
      <param>maxCapacity   the desired maximum capacity.</param>
    </javadoc>
    <method type="char[]" name="trimToCapacity" startLine="468" endLine="475">
      <scope startLine="469" endLine="473">
        <declaration type="char[]" name="oldArray" />
      </scope>
    </method>
    <javadoc>
      <text>* Ensures that the specified array cannot hold more than <tt>maxCapacity</tt> elements.
 * An application can use this operation to minimize array storage.
 * <p>
 * Returns the identical array if <tt>array.length &lt;= maxCapacity</tt>.
 * Otherwise, returns a new array with a length of <tt>maxCapacity</tt>
 * containing the first <tt>maxCapacity</tt> elements of <tt>array</tt>.</text>
      <param>maxCapacity   the desired maximum capacity.</param>
    </javadoc>
    <method type="double[]" name="trimToCapacity" startLine="486" endLine="493">
      <scope startLine="487" endLine="491">
        <declaration type="double[]" name="oldArray" />
      </scope>
    </method>
    <javadoc>
      <text>* Ensures that the specified array cannot hold more than <tt>maxCapacity</tt> elements.
 * An application can use this operation to minimize array storage.
 * <p>
 * Returns the identical array if <tt>array.length &lt;= maxCapacity</tt>.
 * Otherwise, returns a new array with a length of <tt>maxCapacity</tt>
 * containing the first <tt>maxCapacity</tt> elements of <tt>array</tt>.</text>
      <param>maxCapacity   the desired maximum capacity.</param>
    </javadoc>
    <method type="float[]" name="trimToCapacity" startLine="504" endLine="511">
      <scope startLine="505" endLine="509">
        <declaration type="float[]" name="oldArray" />
      </scope>
    </method>
    <javadoc>
      <text>* Ensures that the specified array cannot hold more than <tt>maxCapacity</tt> elements.
 * An application can use this operation to minimize array storage.
 * <p>
 * Returns the identical array if <tt>array.length &lt;= maxCapacity</tt>.
 * Otherwise, returns a new array with a length of <tt>maxCapacity</tt>
 * containing the first <tt>maxCapacity</tt> elements of <tt>array</tt>.</text>
      <param>maxCapacity   the desired maximum capacity.</param>
    </javadoc>
    <method type="int[]" name="trimToCapacity" startLine="522" endLine="529">
      <scope startLine="523" endLine="527">
        <declaration type="int[]" name="oldArray" />
      </scope>
    </method>
    <javadoc>
      <text>* Ensures that the specified array cannot hold more than <tt>maxCapacity</tt> elements.
 * An application can use this operation to minimize array storage.
 * <p>
 * Returns the identical array if <tt>array.length &lt;= maxCapacity</tt>.
 * Otherwise, returns a new array with a length of <tt>maxCapacity</tt>
 * containing the first <tt>maxCapacity</tt> elements of <tt>array</tt>.</text>
      <param>maxCapacity   the desired maximum capacity.</param>
    </javadoc>
    <method type="long[]" name="trimToCapacity" startLine="540" endLine="547">
      <scope startLine="541" endLine="545">
        <declaration type="long[]" name="oldArray" />
      </scope>
    </method>
    <javadoc>
      <text>* Ensures that the specified array cannot hold more than <tt>maxCapacity</tt> elements.
 * An application can use this operation to minimize array storage.
 * <p>
 * Returns the identical array if <tt>array.length &lt;= maxCapacity</tt>.
 * Otherwise, returns a new array with a length of <tt>maxCapacity</tt>
 * containing the first <tt>maxCapacity</tt> elements of <tt>array</tt>.</text>
      <param>maxCapacity   the desired maximum capacity.</param>
    </javadoc>
    <method type="Object[]" name="trimToCapacity" startLine="558" endLine="565">
      <scope startLine="559" endLine="563">
        <declaration type="Object[]" name="oldArray" />
      </scope>
    </method>
    <javadoc>
      <text>* Ensures that the specified array cannot hold more than <tt>maxCapacity</tt> elements.
 * An application can use this operation to minimize array storage.
 * <p>
 * Returns the identical array if <tt>array.length &lt;= maxCapacity</tt>.
 * Otherwise, returns a new array with a length of <tt>maxCapacity</tt>
 * containing the first <tt>maxCapacity</tt> elements of <tt>array</tt>.</text>
      <param>maxCapacity   the desired maximum capacity.</param>
    </javadoc>
    <method type="short[]" name="trimToCapacity" startLine="576" endLine="583">
      <scope startLine="577" endLine="581">
        <declaration type="short[]" name="oldArray" />
      </scope>
    </method>
    <javadoc>
      <text>* Ensures that the specified array cannot hold more than <tt>maxCapacity</tt> elements.
 * An application can use this operation to minimize array storage.
 * <p>
 * Returns the identical array if <tt>array.length &lt;= maxCapacity</tt>.
 * Otherwise, returns a new array with a length of <tt>maxCapacity</tt>
 * containing the first <tt>maxCapacity</tt> elements of <tt>array</tt>.</text>
      <param>maxCapacity   the desired maximum capacity.</param>
    </javadoc>
    <method type="boolean[]" name="trimToCapacity" startLine="594" endLine="601">
      <scope startLine="595" endLine="599">
        <declaration type="boolean[]" name="oldArray" />
      </scope>
    </method>
  </class>
</source>
