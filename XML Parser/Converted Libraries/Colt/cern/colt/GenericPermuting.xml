<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt">
  <class name="GenericPermuting" extends="Object" startLine="11">
    <javadoc>
      <text>* Generically reorders (permutes) arbitrary shaped data (for example, an array, three arrays, a 2-d matrix, two linked lists) using an <i>in-place</i> swapping algorithm.
 * Imagine having a couple of apples. For some reason you decide to reorder them. The green one before the red one. The pale one after the shiny one, etc. This class helps to do the job.
 * <p>
 * This class swaps elements around, in a way that avoids stumbling over its own feet:
 * Let <tt>before</tt> be the generic data before calling the reordering method.
 * Let <tt>after</tt> be the generic data after calling the reordering method.
 * Then there holds <tt>after[i] == before[indexes[i]]</tt>.
 * <p>
 * Similar to {@link GenericSorting}, this class has no idea what kind of data it is reordering.
 * It can decide to swap the data at index <tt>a</tt> with the data at index <tt>b</tt>. 
 * It calls a user provided {@link cern.colt.Swapper} object that knows how to swap the data of these indexes. 
 * <p>
 * For convenience, some non-generic variants are also provided.
 * Further a method to generate the p-th lexicographical permutation indexes.
 * <p>
 * <b>Example:</b>
 * <table>
 * <td class="PRE"> 
 * <pre>
 * Reordering
 * [A,B,C,D,E] with indexes [0,4,2,3,1] yields 
 * [A,E,C,D,B]
 * In other words, in the reordered list, we first have the element at old index 0, then the one at old index 4, then the ones at old indexes 2,3,1.
 * g[0]<--g[0], g[1]<--g[4], g[2]<--g[2], g[3]<--g[3], g[4]<--g[1].
 * Reordering
 * [A,B,C,D,E] with indexes [0,4,1,2,3] yields 
 * [A,E,B,C,D]
 * In other words g[0]<--g[0], g[1]<--g[4], g[2]<--g[1], g[3]<--g[2], g[4]<--g[3].
 * </pre>
 * </td>
 * </table>
 * <p>
 * Here are some example swappers:
 * <table>
 * <td class="PRE"> 
 * <pre>
 * // a swapper knows how to swap two indexes (a,b)
 * // reordering an array
 * Swapper swapper = new Swapper() {
 * &nbsp;&nbsp;&nbsp;public void swap(int a, int b) {
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String tmp; // reordering String[]
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// int tmp; // reordering int[]
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp = array[a]; array[a] = array[b]; array[b] = tmp;
 * &nbsp;&nbsp;&nbsp;}
 * };
 * // reordering a list
 * Swapper swapper = new Swapper() {
 * &nbsp;&nbsp;&nbsp;public void swap(int a, int b) {
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object tmp;
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp = list.get(a); 
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list.set(a, list.get(b)); 
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list.set(b, tmp);
 * &nbsp;&nbsp;&nbsp;}
 * };
 * // reordering the rows of a 2-d matrix (see {@link cern.colt.matrix})
 * Swapper swapper = new Swapper() {
 * &nbsp;&nbsp;&nbsp;public void swap(int a, int b) {
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;matrix.viewRow(a).swap(matrix.viewRow(b));
 * &nbsp;&nbsp;&nbsp;}
 * };
 * // reordering the columns of a 2-d matrix
 * Swapper swapper = new Swapper() {
 * &nbsp;&nbsp;&nbsp;public void swap(int a, int b) {
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;matrix.viewColumn(a).swap(matrix.viewColumn(b));
 * &nbsp;&nbsp;&nbsp;}
 * };
 * </pre>
 * </td>
 * </table></text>
      <see>cern.colt.Swapper</see>
      <see>cern.colt.GenericSorting</see>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 10-Oct-99</version>
    </javadoc>
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="GenericPermuting" startLine="97" endLine="97" />
    <javadoc>
      <text>* Returns the <tt>p</tt>-th permutation of the sequence <tt>[0,1,...,N-1]</tt>.
 * A small but smart and efficient routine, ported from <A HREF="http://www.hep.net/wwwmirrors/cernlib/CNASDOC/shortwrups_html3/node255.html"> Cernlib</A>. 
 * The <A HREF="ftp://asisftp.cern.ch/cernlib/share/pro/src/mathlib/gen/v/permu.F"> Fortran source</A>.
 * A sequence of <tt>N</tt> distinct elements has <tt>N!</tt> permutations, which are enumerated in lexicographical order <tt>1 .. N!</tt>.
 * <p>
 * This is, for example, useful for Monte-Carlo-tests where one might want to compute <tt>k</tt> distinct and random permutations of a sequence, obtaining <tt>p</tt> from {@link cern.jet.random.sampling} without replacement or a random engine like {@link cern.jet.random.engine.MersenneTwister}.
 * <br>
 * Note: When <tt>N!</tt> exceeds the 64-bit range (i.e. for <tt>N > 20</tt>), this method has <i>different</i> behaviour: it makes a sequence <tt>[0,1,...,N-1]</tt> and randomizes it, seeded with parameter <tt>p</tt>. 
 * <p>
 * <b>Examples:</b> 
 * <pre>
 * http://www.hep.net/wwwmirrors/cernlib/CNASDOC/shortwrups_html3/node255.html
 * // exactly lexicographically enumerated (ascending)
 * permutation(1,3) --> [ 0,1,2 ]
 * permutation(2,3) --> [ 0,2,1 ]
 * permutation(3,3) --> [ 1,0,2 ]
 * permutation(4,3) --> [ 1,2,0 ]
 * permutation(5,3) --> [ 2,0,1 ]
 * permutation(6,3) --> [ 2,1,0 ]
 * permutation(1      ,20) --> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
 * permutation(2      ,20) --> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18]
 * permutation(1000000,20) --> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 17, 18, 13, 19, 11, 15, 14, 16, 10]
 * permutation(20! -2 ,20) --> [19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 2, 0]
 * permutation(20! -1 ,20) --> [19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 0, 1]
 * permutation(20!    ,20) --> [19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
 * <br>
 * // not exactly enumerated, rather randomly shuffled
 * permutation(1,21) --> [18, 20, 11, 0, 15, 1, 19, 13, 3, 6, 16, 17, 9, 5, 12, 4, 7, 14, 8, 10, 2]
 * permutation(2,21) --> [1, 9, 4, 16, 14, 13, 11, 20, 10, 8, 18, 0, 15, 3, 17, 5, 12, 2, 6, 7, 19]
 * permutation(3,21) --> [12, 0, 19, 1, 20, 5, 8, 16, 6, 14, 2, 4, 3, 17, 11, 13, 9, 10, 15, 18, 7]
 * </pre></text>
      <param>p the lexicographical ordinal number of the permutation to be computed.</param>
      <param>N the length of the sequence to be generated.</param>
      <return>the <tt>p</tt>-th permutation.</return>
      <throws>IllegalArgumentException if <tt>p < 1 || N < 0 || p > N!</tt>.</throws>
    </javadoc>
    <method type="int[]" name="permutation" startLine="136" endLine="178">
      <declaration type="int[]" name="permutation" />
      <scope startLine="142" endLine="157">
        <declaration type="cern.jet.random.Uniform" name="gen" />
        <scope startLine="147" endLine="154">
          <declaration type="int" name="random" />
          <declaration type="int" name="tmp" />
        </scope>
        <comment>factorial(21) would overflow 64-bit long)</comment>
        <comment>Simply make a list (0,1,..N-1) and randomize it, seeded with "p".</comment>
        <comment>Note that this is perhaps not what you want...</comment>
        <comment>swap(i, random)</comment>
      </scope>
      <declaration type="int[]" name="tmp" />
      <declaration type="long" name="io" />
      <scope startLine="166" endLine="173">
        <declaration type="long" name="fac" />
        <declaration type="int" name="in" />
      </scope>
      <comment>the normal case - exact enumeration</comment>
    </method>
    <javadoc>
      <text>* A non-generic variant of reordering, specialized for <tt>int[]</tt>, same semantics.
 * Quicker than generic reordering. Also for convenience (forget about the Swapper object).</text>
    </javadoc>
    <method type="void" name="permute" startLine="183" endLine="186">
      <declaration type="int[][]" name="copy" />
    </method>
    <javadoc>
      <text>* Deprecated. Generically reorders arbitrary shaped generic data <tt>g</tt> such that <tt>g[i] == g[indexes[i]]</tt>.
 * (The generic data may be one array, a 2-d matrix, two linked lists or whatever). 
 * This class swaps elements around, in a way that avoids stumbling over its own feet.
 * <p>
 * <b>Example:</b>
 * <pre>
 * Reordering
 * [A,B,C,D,E] with indexes [0,4,2,3,1] yields 
 * [A,E,C,D,B]
 * In other words g[0]<--g[0], g[1]<--g[4], g[2]<--g[2], g[3]<--g[3], g[4]<--g[1].
 * Reordering
 * [A,B,C,D,E] with indexes [0,4,1,2,3] yields 
 * [A,E,B,C,D]
 * In other words g[0]<--g[0], g[1]<--g[4], g[2]<--g[1], g[3]<--g[2], g[4]<--g[3].
 * </pre>
 * <p></text>
      <deprecated />
      <param>indexes the permutation indexes.</param>
      <param>swapper an object that knows how to swap two indexes a,b.</param>
      <param>work the working storage, must satisfy <tt>work.length >= indexes.length</tt>; set <tt>work==null</tt> if you don't care about performance.</param>
    </javadoc>
    <method type="void" name="permute" startLine="210" endLine="212" />
    <javadoc>
      <text>* Generically reorders arbitrary shaped generic data <tt>g</tt> such that <tt>g[i] == g[indexes[i]]</tt>.
 * (The generic data may be one array, a 2-d matrix, two linked lists or whatever). 
 * This class swaps elements around, in a way that avoids stumbling over its own feet.
 * <p>
 * <b>Example:</b>
 * <pre>
 * Reordering
 * [A,B,C,D,E] with indexes [0,4,2,3,1] yields 
 * [A,E,C,D,B]
 * In other words g[0]<--g[0], g[1]<--g[4], g[2]<--g[2], g[3]<--g[3], g[4]<--g[1].
 * Reordering
 * [A,B,C,D,E] with indexes [0,4,1,2,3] yields 
 * [A,E,B,C,D]
 * In other words g[0]<--g[0], g[1]<--g[4], g[2]<--g[1], g[3]<--g[2], g[4]<--g[3].
 * </pre>
 * <p></text>
      <param>indexes the permutation indexes.</param>
      <param>swapper an object that knows how to swap two indexes a,b.</param>
      <param>work1 some working storage, must satisfy <tt>work1.length >= indexes.length</tt>; set <tt>work1==null</tt> if you don't care about performance.</param>
      <param>work2 some working storage, must satisfy <tt>work2.length >= indexes.length</tt>; set <tt>work2==null</tt> if you don't care about performance.</param>
    </javadoc>
    <method type="void" name="permute" startLine="236" endLine="263">
      <declaration type="int" name="s" />
      <declaration type="int[]" name="tracks" />
      <declaration type="int[]" name="pos" />
      <scope startLine="248" endLine="251" />
      <scope startLine="253" endLine="262">
        <declaration type="int" name="index" />
        <declaration type="int" name="track" />
        <scope startLine="257" endLine="261">
          <declaration type="int" name="tmp" />
        </scope>
      </scope>
      <comment>"tracks" and "pos" keeps track of the current indexes of the elements</comment>
      <comment>Example: We have a list==[A,B,C,D,E], indexes==[0,4,1,2,3] and swap B and E we need to know that the element formlerly at index 1 is now at index 4, and the one formerly at index 4 is now at index 1.</comment>
      <comment>Otherwise we stumble over our own feet and produce nonsense.</comment>
      <comment>Initially index i really is at index i, but this will change due to swapping.</comment>
      <comment>work1, work2 to avoid high frequency memalloc's</comment>
    </method>
    <javadoc>
      <text>* A non-generic variant of reordering, specialized for <tt>Object[]</tt>, same semantics.
 * Quicker than generic reordering. Also for convenience (forget about the Swapper object).</text>
    </javadoc>
    <method type="void" name="permute" startLine="268" endLine="271">
      <declaration type="Object[][]" name="copy" />
    </method>
  </class>
</source>
