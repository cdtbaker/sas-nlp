<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix">
  <import name="cern.colt.list.IntArrayList" />
  <import name="cern.colt.list.ObjectArrayList" />
  <import name="cern.colt.matrix.impl.AbstractMatrix2D" />
  <class name="ObjectMatrix2D" extends="AbstractMatrix2D" startLine="14">
    <javadoc>
      <text>* Abstract base class for 2-d matrices holding <tt>Object</tt> elements.
 * First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
 * <p>
 * A matrix has a number of rows and columns, which are assigned upon instance construction - The matrix's size is then <tt>rows()*columns()</tt>.
 * Elements are accessed via <tt>[row,column]</tt> coordinates.
 * Legal coordinates range from <tt>[0,0]</tt> to <tt>[rows()-1,columns()-1]</tt>.
 * Any attempt to access an element at a coordinate <tt>column&lt;0 || column&gt;=columns() || row&lt;0 || row&gt;=rows()</tt> will throw an <tt>IndexOutOfBoundsException</tt>.
 * <p>
 * <b>Note</b> that this implementation is not synchronized.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="ObjectMatrix2D" startLine="32" endLine="32" />
    <javadoc>
      <text>* Applies a function to each cell and aggregates the results.
 * Returns a value <tt>v</tt> such that <tt>v==a(size())</tt> where <tt>a(i) == aggr( a(i-1), f(get(row,column)) )</tt> and terminators are <tt>a(1) == f(get(0,0)), a(0)==null</tt>.
 * <p>
 * <b>Example:</b>
 * <pre>
 * cern.jet.math.Functions F = cern.jet.math.Functions.functions;
 * 2 x 2 matrix
 * 0 1
 * 2 3
 * // Sum( x[row,col]*x[row,col] ) 
 * matrix.aggregate(F.plus,F.square);
 * --> 14
 * </pre>
 * For further examples, see the <a href="package-summary.html#FunctionObjects">package doc</a>.</text>
      <param>aggr an aggregation function taking as first argument the current aggregation and as second argument the transformed current cell value.</param>
      <param>f a function transforming the current cell value.</param>
      <return>the aggregated measure.</return>
      <see>cern.jet.math.Functions</see>
    </javadoc>
    <method type="Object" name="aggregate" startLine="55" endLine="66">
      <declaration type="Object" name="a" />
      <declaration type="int" name="d" />
      <scope startLine="59" endLine="64">
        <scope startLine="60" endLine="62" />
      </scope>
      <comment>last cell already done</comment>
    </method>
    <javadoc>
      <text>* Applies a function to each corresponding cell of two matrices and aggregates the results.
 * Returns a value <tt>v</tt> such that <tt>v==a(size())</tt> where <tt>a(i) == aggr( a(i-1), f(get(row,column),other.get(row,column)) )</tt> and terminators are <tt>a(1) == f(get(0,0),other.get(0,0)), a(0)==null</tt>.
 * <p>
 * <b>Example:</b>
 * <pre>
 * cern.jet.math.Functions F = cern.jet.math.Functions.functions;
 * x == 2 x 2 matrix
 * 0 1
 * 2 3
 * y == 2 x 2 matrix
 * 0 1
 * 2 3
 * // Sum( x[row,col] * y[row,col] ) 
 * x.aggregate(y, F.plus, F.mult);
 * --> 14
 * // Sum( (x[row,col] + y[row,col])^2 )
 * x.aggregate(y, F.plus, F.chain(F.square,F.plus));
 * --> 56
 * </pre>
 * For further examples, see the <a href="package-summary.html#FunctionObjects">package doc</a>.</text>
      <param>aggr an aggregation function taking as first argument the current aggregation and as second argument the transformed current cell values.</param>
      <param>f a function transforming the current cell values.</param>
      <return>the aggregated measure.</return>
      <throws>IllegalArgumentException if <tt>columns() != other.columns() || rows() != other.rows()</tt></throws>
      <see>cern.jet.math.Functions</see>
    </javadoc>
    <method type="Object" name="aggregate" startLine="98" endLine="110">
      <declaration type="Object" name="a" />
      <declaration type="int" name="d" />
      <scope startLine="103" endLine="108">
        <scope startLine="104" endLine="106" />
      </scope>
      <comment>last cell already done</comment>
    </method>
    <javadoc>
      <text>* Sets all cells to the state specified by <tt>values</tt>.
 * <tt>values</tt> is required to have the form <tt>values[row][column]</tt>
 * and have exactly the same number of rows and columns as the receiver.
 * <p>
 * The values are copied. So subsequent changes in <tt>values</tt> are not reflected in the matrix, and vice-versa.</text>
      <param>values the values to be filled into the cells.</param>
      <return><tt>this</tt> (for convenience only).</return>
      <throws>IllegalArgumentException if <tt>values.length != rows() || for any 0 &lt;= row &lt; rows(): values[row].length != columns()</tt>.</throws>
    </javadoc>
    <method type="ObjectMatrix2D" name="assign" startLine="122" endLine="132">
      <scope startLine="124" endLine="130">
        <declaration type="Object[]" name="currentRow" />
        <scope startLine="127" endLine="129" />
      </scope>
    </method>
    <javadoc>
      <text>* Assigns the result of a function to each cell; <tt>x[row,col] = function(x[row,col])</tt>.
 * <p>
 * <b>Example:</b>
 * <pre>
 * matrix = 2 x 2 matrix 
 * 0.5 1.5      
 * 2.5 3.5
 * // change each cell to its sine
 * matrix.assign(cern.jet.math.Functions.sin);
 * -->
 * 2 x 2 matrix
 * 0.479426  0.997495 
 * 0.598472 -0.350783
 * </pre>
 * For further examples, see the <a href="package-summary.html#FunctionObjects">package doc</a>.</text>
      <param>function a function object taking as argument the current cell's value.</param>
      <return><tt>this</tt> (for convenience only).</return>
      <see>cern.jet.math.Functions</see>
    </javadoc>
    <method type="ObjectMatrix2D" name="assign" startLine="155" endLine="162">
      <scope startLine="156" endLine="160">
        <scope startLine="157" endLine="159" />
      </scope>
    </method>
    <javadoc>
      <text>* Replaces all cell values of the receiver with the values of another matrix.
 * Both matrices must have the same number of rows and columns.
 * If both matrices share the same cells (as is the case if they are views derived from the same matrix) and intersect in an ambiguous way, then replaces <i>as if</i> using an intermediate auxiliary deep copy of <tt>other</tt>.</text>
      <param>other   the source matrix to copy from (may be identical to the receiver).</param>
      <return><tt>this</tt> (for convenience only).</return>
      <throws>IllegalArgumentException if <tt>columns() != other.columns() || rows() != other.rows()</tt></throws>
    </javadoc>
    <method type="ObjectMatrix2D" name="assign" startLine="172" endLine="183">
      <scope startLine="177" endLine="181">
        <scope startLine="178" endLine="180" />
      </scope>
    </method>
    <javadoc>
      <text>* Assigns the result of a function to each cell; <tt>x[row,col] = function(x[row,col],y[row,col])</tt>.
 * <p>
 * <b>Example:</b>
 * <pre>
 * // assign x[row,col] = x[row,col]<sup>y[row,col]</sup>
 * m1 = 2 x 2 matrix 
 * 0 1 
 * 2 3
 * m2 = 2 x 2 matrix 
 * 0 2 
 * 4 6
 * m1.assign(m2, cern.jet.math.Functions.pow);
 * -->
 * m1 == 2 x 2 matrix
 * 1   1 
 * 16 729
 * </pre>
 * For further examples, see the <a href="package-summary.html#FunctionObjects">package doc</a>.</text>
      <param>y the secondary matrix to operate on.</param>
      <param>function a function object taking as first argument the current cell's value of <tt>this</tt>,
 * and as second argument the current cell's value of <tt>y</tt>,</param>
      <return><tt>this</tt> (for convenience only).</return>
      <throws>IllegalArgumentException if <tt>columns() != other.columns() || rows() != other.rows()</tt></throws>
      <see>cern.jet.math.Functions</see>
    </javadoc>
    <method type="ObjectMatrix2D" name="assign" startLine="213" endLine="221">
      <scope startLine="215" endLine="219">
        <scope startLine="216" endLine="218" />
      </scope>
    </method>
    <javadoc>
      <text>* Sets all cells to the state specified by <tt>value</tt>.</text>
      <param>value the value to be filled into the cells.</param>
      <return><tt>this</tt> (for convenience only).</return>
    </javadoc>
    <method type="ObjectMatrix2D" name="assign" startLine="227" endLine="234">
      <scope startLine="228" endLine="232">
        <scope startLine="229" endLine="231" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the number of cells having non-zero values; ignores tolerance.</text>
    </javadoc>
    <method type="int" name="cardinality" startLine="238" endLine="246">
      <declaration type="int" name="cardinality" />
      <scope startLine="240" endLine="244">
        <scope startLine="241" endLine="243" />
      </scope>
    </method>
    <javadoc>
      <text>* Constructs and returns a deep copy of the receiver.
 * <p>
 * <b>Note that the returned matrix is an independent deep copy.</b>
 * The returned matrix is not backed by this matrix, so changes in the returned matrix are not reflected in this matrix, and vice-versa.</text>
      <return>a deep copy of the receiver.</return>
    </javadoc>
    <method type="ObjectMatrix2D" name="copy" startLine="255" endLine="257" />
    <javadoc>
      <text>* Compares the specified Object with the receiver for equality.
 * Equivalent to <tt>equals(otherObj,true)</tt>.</text>
      <param>otherObj the Object to be compared for equality with the receiver.</param>
      <return>true if the specified Object is equal to the receiver.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="265" endLine="267">
      <comment>delta</comment>
    </method>
    <javadoc>
      <text>* Compares the specified Object with the receiver for equality.
 * Returns true if and only if the specified Object is also at least an ObjectMatrix2D, both matrices have the
 * same size, and all corresponding pairs of cells in the two matrices are the same.
 * In other words, two matrices are defined to be equal if they contain the
 * same cell values in the same order.
 * Tests elements for equality or identity as specified by <tt>testForEquality</tt>.
 * When testing for equality, two elements <tt>e1</tt> and
 * <tt>e2</tt> are <i>equal</i> if <tt>(e1==null ? e2==null :
 * e1.equals(e2))</tt>.)</text>
      <param>otherObj the Object to be compared for equality with the receiver.</param>
      <param>testForEquality if true -> tests for equality, otherwise for identity.</param>
      <return>true if the specified Object is equal to the receiver.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="283" endLine="308">
      <scope startLine="284" endLine="284" />
      <declaration type="ObjectMatrix2D" name="other" />
      <scope startLine="291" endLine="297">
        <scope startLine="292" endLine="296">
          <scope startLine="293" endLine="295" />
        </scope>
      </scope>
      <scope startLine="298" endLine="304">
        <scope startLine="299" endLine="303">
          <scope startLine="300" endLine="302" />
        </scope>
      </scope>
      <comment>delta</comment>
    </method>
    <javadoc>
      <text>* Returns the matrix cell value at coordinate <tt>[row,column]</tt>.</text>
      <param>row   the index of the row-coordinate.</param>
      <param>column   the index of the column-coordinate.</param>
      <return>the value of the specified cell.</return>
      <throws>IndexOutOfBoundsException if <tt>column&lt;0 || column&gt;=columns() || row&lt;0 || row&gt;=rows()</tt></throws>
    </javadoc>
    <method type="Object" name="get" startLine="317" endLine="320" />
    <javadoc>
      <text>* Returns the content of this matrix if it is a wrapper; or <tt>this</tt> otherwise.
 * Override this method in wrappers.</text>
    </javadoc>
    <method type="ObjectMatrix2D" name="getContent" startLine="325" endLine="327" />
    <javadoc>
      <text>* Fills the coordinates and values of cells having non-zero values into the specified lists.
 * Fills into the lists, starting at index 0.
 * After this call returns the specified lists all have a new size, the number of non-zero values.
 * <p>
 * In general, fill order is <i>unspecified</i>.
 * This implementation fills like <tt>for (row = 0..rows-1) for (column = 0..columns-1) do ... </tt>.
 * However, subclasses are free to us any other order, even an order that may change over time as cell values are changed.
 * (Of course, result lists indexes are guaranteed to correspond to the same cell).
 * <p>
 * <b>Example:</b>
 * <br>
 * <pre>
 * 2 x 3 matrix:
 * 0, 0, 8
 * 0, 7, 0
 * -->
 * rowList    = (0,1)
 * columnList = (2,1)
 * valueList  = (8,7)
 * </pre>
 * In other words, <tt>get(0,2)==8, get(1,1)==7</tt>.</text>
      <param>rowList the list to be filled with row indexes, can have any size.</param>
      <param>columnList the list to be filled with column indexes, can have any size.</param>
      <param>valueList the list to be filled with values, can have any size.</param>
    </javadoc>
    <method type="void" name="getNonZeros" startLine="355" endLine="371">
      <declaration type="int" name="r" />
      <declaration type="int" name="c" />
      <scope startLine="361" endLine="370">
        <scope startLine="362" endLine="369">
          <declaration type="Object" name="value" />
          <scope startLine="364" endLine="368" />
        </scope>
      </scope>
    </method>
    <method name="getQuick" type="Object" startLine="372" endLine="383" />
    <javadoc>
      <text>* Returns the matrix cell value at coordinate <tt>[row,column]</tt>.
 * <p>Provided with invalid parameters this method may return invalid objects without throwing any exception.
 * <b>You should only use this method when you are absolutely sure that the coordinate is within bounds.</b>
 * Precondition (unchecked): <tt>0 &lt;= column &lt; columns() && 0 &lt;= row &lt; rows()</tt>.</text>
      <param>row   the index of the row-coordinate.</param>
      <param>column   the index of the column-coordinate.</param>
      <return>the value at the specified coordinate.</return>
    </javadoc>
    <javadoc>
      <text>* Returns <tt>true</tt> if both matrices share at least one identical cell.</text>
    </javadoc>
    <method type="boolean" name="haveSharedCells" startLine="387" endLine="391" />
    <javadoc>
      <text>* Returns <tt>true</tt> if both matrices share at least one identical cell.</text>
    </javadoc>
    <method type="boolean" name="haveSharedCellsRaw" startLine="395" endLine="397" />
    <javadoc>
      <text>* Construct and returns a new empty matrix <i>of the same dynamic type</i> as the receiver, having the same number of rows and columns.
 * For example, if the receiver is an instance of type <tt>DenseObjectMatrix2D</tt> the new matrix must also be of type <tt>DenseObjectMatrix2D</tt>,
 * if the receiver is an instance of type <tt>SparseObjectMatrix2D</tt> the new matrix must also be of type <tt>SparseObjectMatrix2D</tt>, etc.
 * In general, the new matrix should have internal parametrization as similar as possible.</text>
      <return>a new empty matrix of the same dynamic type.</return>
    </javadoc>
    <method type="ObjectMatrix2D" name="like" startLine="406" endLine="408" />
    <method name="like" type="ObjectMatrix2D" startLine="409" endLine="419" />
    <javadoc>
      <text>* Construct and returns a new empty matrix <i>of the same dynamic type</i> as the receiver, having the specified number of rows and columns.
 * For example, if the receiver is an instance of type <tt>DenseObjectMatrix2D</tt> the new matrix must also be of type <tt>DenseObjectMatrix2D</tt>,
 * if the receiver is an instance of type <tt>SparseObjectMatrix2D</tt> the new matrix must also be of type <tt>SparseObjectMatrix2D</tt>, etc.
 * In general, the new matrix should have internal parametrization as similar as possible.</text>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <return>a new empty matrix of the same dynamic type.</return>
    </javadoc>
    <method name="like1D" type="ObjectMatrix1D" startLine="420" endLine="428" />
    <javadoc>
      <text>* Construct and returns a new 1-d matrix <i>of the corresponding dynamic type</i>, entirelly independent of the receiver.
 * For example, if the receiver is an instance of type <tt>DenseObjectMatrix2D</tt> the new matrix must be of type <tt>DenseObjectMatrix1D</tt>,
 * if the receiver is an instance of type <tt>SparseObjectMatrix2D</tt> the new matrix must be of type <tt>SparseObjectMatrix1D</tt>, etc.</text>
      <param>size the number of cells the matrix shall have.</param>
      <return>a new matrix of the corresponding dynamic type.</return>
    </javadoc>
    <method name="like1D" type="ObjectMatrix1D" startLine="429" endLine="439" />
    <javadoc>
      <text>* Construct and returns a new 1-d matrix <i>of the corresponding dynamic type</i>, sharing the same cells.
 * For example, if the receiver is an instance of type <tt>DenseObjectMatrix2D</tt> the new matrix must be of type <tt>DenseObjectMatrix1D</tt>,
 * if the receiver is an instance of type <tt>SparseObjectMatrix2D</tt> the new matrix must be of type <tt>SparseObjectMatrix1D</tt>, etc.</text>
      <param>size the number of cells the matrix shall have.</param>
      <param>zero the index of the first element.</param>
      <param>stride the number of indexes between any two elements, i.e. <tt>index(i+1)-index(i)</tt>.</param>
      <return>a new matrix of the corresponding dynamic type.</return>
    </javadoc>
    <javadoc>
      <text>* Sets the matrix cell at coordinate <tt>[row,column]</tt> to the specified value.</text>
      <param>row   the index of the row-coordinate.</param>
      <param>column   the index of the column-coordinate.</param>
      <param>value the value to be filled into the specified cell.</param>
      <throws>IndexOutOfBoundsException if <tt>column&lt;0 || column&gt;=columns() || row&lt;0 || row&gt;=rows()</tt></throws>
    </javadoc>
    <method type="void" name="set" startLine="448" endLine="451" />
    <method name="setQuick" type="void" startLine="452" endLine="463" />
    <javadoc>
      <text>* Sets the matrix cell at coordinate <tt>[row,column]</tt> to the specified value.
 * <p>Provided with invalid parameters this method may access illegal indexes without throwing any exception.
 * <b>You should only use this method when you are absolutely sure that the coordinate is within bounds.</b>
 * Precondition (unchecked): <tt>0 &lt;= column &lt; columns() && 0 &lt;= row &lt; rows()</tt>.</text>
      <param>row   the index of the row-coordinate.</param>
      <param>column   the index of the column-coordinate.</param>
      <param>value the value to be filled into the specified cell.</param>
    </javadoc>
    <javadoc>
      <text>* Constructs and returns a 2-dimensional array containing the cell values.
 * The returned array <tt>values</tt> has the form <tt>values[row][column]</tt>
 * and has the same number of rows and columns as the receiver.
 * <p>
 * The values are copied. So subsequent changes in <tt>values</tt> are not reflected in the matrix, and vice-versa.</text>
      <return>an array filled with the values of the cells.</return>
    </javadoc>
    <method type="Object[][]" name="toArray" startLine="473" endLine="482">
      <declaration type="Object[][]" name="values" />
      <scope startLine="475" endLine="480">
        <declaration type="Object[]" name="currentRow" />
        <scope startLine="477" endLine="479" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns a string representation using default formatting.</text>
      <see>cern.colt.matrix.objectalgo.Formatter</see>
    </javadoc>
    <method type="String" name="toString" startLine="487" endLine="489" />
    <javadoc>
      <text>* Constructs and returns a new view equal to the receiver.
 * The view is a shallow clone. Calls <code>clone()</code> and casts the result.
 * <p>
 * <b>Note that the view is not a deep copy.</b>
 * The returned matrix is backed by this matrix, so changes in the returned matrix are reflected in this matrix, and vice-versa. 
 * <p>
 * Use {@link #copy()} to construct an independent deep copy rather than a new view.</text>
      <return>a new view of the receiver.</return>
    </javadoc>
    <method type="ObjectMatrix2D" name="view" startLine="501" endLine="503" />
    <javadoc>
      <text>* Constructs and returns a new <i>slice view</i> representing the rows of the given column.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
 * To obtain a slice view on subranges, construct a sub-ranging view (<tt>viewPart(...)</tt>), then apply this method to the sub-range view.
 * <p> 
 * <b>Example:</b> 
 * <table border="0">
 * <tr nowrap> 
 * <td valign="top">2 x 3 matrix: <br>
 * 1, 2, 3<br>
 * 4, 5, 6 </td>
 * <td>viewColumn(0) ==></td>
 * <td valign="top">Matrix1D of size 2:<br>
 * 1, 4</td>
 * </tr>
 * </table></text>
      <param>column the column to fix.</param>
      <return>a new slice view.</return>
      <throws>IndexOutOfBoundsException if <tt>column < 0 || column >= columns()</tt>.</throws>
      <see>#viewRow(int)</see>
    </javadoc>
    <method type="ObjectMatrix1D" name="viewColumn" startLine="526" endLine="532">
      <declaration type="int" name="viewSize" />
      <declaration type="int" name="viewZero" />
      <declaration type="int" name="viewStride" />
    </method>
    <javadoc>
      <text>* Constructs and returns a new <i>flip view</i> along the column axis.
 * What used to be column <tt>0</tt> is now column <tt>columns()-1</tt>, ..., what used to be column <tt>columns()-1</tt> is now column <tt>0</tt>.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
 * <p> 
 * <b>Example:</b> 
 * <table border="0">
 * <tr nowrap> 
 * <td valign="top">2 x 3 matrix: <br>
 * 1, 2, 3<br>
 * 4, 5, 6 </td>
 * <td>columnFlip ==></td>
 * <td valign="top">2 x 3 matrix:<br>
 * 3, 2, 1 <br>
 * 6, 5, 4</td>
 * <td>columnFlip ==></td>
 * <td valign="top">2 x 3 matrix: <br>
 * 1, 2, 3<br>
 * 4, 5, 6 </td>
 * </tr>
 * </table></text>
      <return>a new flip view.</return>
      <see>#viewRowFlip()</see>
    </javadoc>
    <method type="ObjectMatrix2D" name="viewColumnFlip" startLine="558" endLine="560" />
    <javadoc>
      <text>* Constructs and returns a new <i>dice (transposition) view</i>; Swaps axes; example: 3 x 4 matrix --> 4 x 3 matrix.
 * The view has both dimensions exchanged; what used to be columns become rows, what used to be rows become columns.
 * In other words: <tt>view.get(row,column)==this.get(column,row)</tt>.
 * This is a zero-copy transposition, taking O(1), i.e. constant time.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa. 
 * Use idioms like <tt>result = viewDice(A).copy()</tt> to generate an independent transposed matrix.
 * <p> 
 * <b>Example:</b> 
 * <table border="0">
 * <tr nowrap> 
 * <td valign="top">2 x 3 matrix: <br>
 * 1, 2, 3<br>
 * 4, 5, 6 </td>
 * <td>transpose ==></td>
 * <td valign="top">3 x 2 matrix:<br>
 * 1, 4 <br>
 * 2, 5 <br>
 * 3, 6</td>
 * <td>transpose ==></td>
 * <td valign="top">2 x 3 matrix: <br>
 * 1, 2, 3<br>
 * 4, 5, 6 </td>
 * </tr>
 * </table></text>
      <return>a new dice view.</return>
    </javadoc>
    <method type="ObjectMatrix2D" name="viewDice" startLine="589" endLine="591" />
    <javadoc>
      <text>* Constructs and returns a new <i>sub-range view</i> that is a <tt>height x width</tt> sub matrix starting at <tt>[row,column]</tt>.
 * Operations on the returned view can only be applied to the restricted range.
 * Any attempt to access coordinates not contained in the view will throw an <tt>IndexOutOfBoundsException</tt>.
 * <p>
 * <b>Note that the view is really just a range restriction:</b> 
 * The returned matrix is backed by this matrix, so changes in the returned matrix are reflected in this matrix, and vice-versa. 
 * <p>
 * The view contains the cells from <tt>[row,column]</tt> to <tt>[row+height-1,column+width-1]</tt>, all inclusive.
 * and has <tt>view.rows() == height; view.columns() == width;</tt>.
 * A view's legal coordinates are again zero based, as usual.
 * In other words, legal coordinates of the view range from <tt>[0,0]</tt> to <tt>[view.rows()-1==height-1,view.columns()-1==width-1]</tt>.
 * As usual, any attempt to access a cell at a coordinate <tt>column&lt;0 || column&gt;=view.columns() || row&lt;0 || row&gt;=view.rows()</tt> will throw an <tt>IndexOutOfBoundsException</tt>.</text>
      <param>row   The index of the row-coordinate.</param>
      <param>column   The index of the column-coordinate.</param>
      <param>height   The height of the box.</param>
      <param>width   The width of the box.</param>
      <throws>IndexOutOfBoundsException if <tt>column<0 || width<0 || column+width>columns() || row<0 || height<0 || row+height>rows()</tt></throws>
      <return>the new view.</return>
    </javadoc>
    <method type="ObjectMatrix2D" name="viewPart" startLine="615" endLine="617" />
    <javadoc>
      <text>* Constructs and returns a new <i>slice view</i> representing the columns of the given row.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
 * To obtain a slice view on subranges, construct a sub-ranging view (<tt>viewPart(...)</tt>), then apply this method to the sub-range view.
 * <p> 
 * <b>Example:</b> 
 * <table border="0">
 * <tr nowrap> 
 * <td valign="top">2 x 3 matrix: <br>
 * 1, 2, 3<br>
 * 4, 5, 6 </td>
 * <td>viewRow(0) ==></td>
 * <td valign="top">Matrix1D of size 3:<br>
 * 1, 2, 3</td>
 * </tr>
 * </table></text>
      <param>row the row to fix.</param>
      <return>a new slice view.</return>
      <throws>IndexOutOfBoundsException if <tt>row < 0 || row >= rows()</tt>.</throws>
      <see>#viewColumn(int)</see>
    </javadoc>
    <method type="ObjectMatrix1D" name="viewRow" startLine="640" endLine="646">
      <declaration type="int" name="viewSize" />
      <declaration type="int" name="viewZero" />
      <declaration type="int" name="viewStride" />
    </method>
    <javadoc>
      <text>* Constructs and returns a new <i>flip view</i> along the row axis.
 * What used to be row <tt>0</tt> is now row <tt>rows()-1</tt>, ..., what used to be row <tt>rows()-1</tt> is now row <tt>0</tt>.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
 * <p> 
 * <b>Example:</b> 
 * <table border="0">
 * <tr nowrap> 
 * <td valign="top">2 x 3 matrix: <br>
 * 1, 2, 3<br>
 * 4, 5, 6 </td>
 * <td>rowFlip ==></td>
 * <td valign="top">2 x 3 matrix:<br>
 * 4, 5, 6 <br>
 * 1, 2, 3</td>
 * <td>rowFlip ==></td>
 * <td valign="top">2 x 3 matrix: <br>
 * 1, 2, 3<br>
 * 4, 5, 6 </td>
 * </tr>
 * </table></text>
      <return>a new flip view.</return>
      <see>#viewColumnFlip()</see>
    </javadoc>
    <method type="ObjectMatrix2D" name="viewRowFlip" startLine="672" endLine="674" />
    <javadoc>
      <text>* Constructs and returns a new <i>selection view</i> that is a matrix holding the indicated cells.
 * There holds <tt>view.rows() == rowIndexes.length, view.columns() == columnIndexes.length</tt> and <tt>view.get(i,j) == this.get(rowIndexes[i],columnIndexes[j])</tt>.
 * Indexes can occur multiple times and can be in arbitrary order.
 * <p>
 * <b>Example:</b>
 * <pre>
 * this = 2 x 3 matrix:
 * 1, 2, 3
 * 4, 5, 6
 * rowIndexes     = (0,1)
 * columnIndexes  = (1,0,1,0)
 * -->
 * view = 2 x 4 matrix:
 * 2, 1, 2, 1
 * 5, 4, 5, 4
 * </pre>
 * Note that modifying the index arguments after this call has returned has no effect on the view.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa. 
 * <p>
 * To indicate "all" rows or "all columns", simply set the respective parameter</text>
      <param>rowIndexes   The rows of the cells that shall be visible in the new view. To indicate that <i>all</i> rows shall be visible, simply set this parameter to <tt>null</tt>.</param>
      <param>columnIndexes   The columns of the cells that shall be visible in the new view. To indicate that <i>all</i> columns shall be visible, simply set this parameter to <tt>null</tt>.</param>
      <return>the new view.</return>
      <throws>IndexOutOfBoundsException if <tt>!(0 <= rowIndexes[i] < rows())</tt> for any <tt>i=0..rowIndexes.length()-1</tt>.</throws>
      <throws>IndexOutOfBoundsException if <tt>!(0 <= columnIndexes[i] < columns())</tt> for any <tt>i=0..columnIndexes.length()-1</tt>.</throws>
    </javadoc>
    <method type="ObjectMatrix2D" name="viewSelection" startLine="702" endLine="724">
      <scope startLine="704" endLine="707" />
      <scope startLine="708" endLine="711" />
      <declaration type="int[]" name="rowOffsets" />
      <declaration type="int[]" name="columnOffsets" />
      <scope startLine="717" endLine="719" />
      <scope startLine="720" endLine="722" />
      <comment>check for "all"</comment>
    </method>
    <javadoc>
      <text>* Constructs and returns a new <i>selection view</i> that is a matrix holding all <b>rows</b> matching the given condition.
 * Applies the condition to each row and takes only those row where <tt>condition.apply(viewRow(i))</tt> yields <tt>true</tt>.
 * To match columns, use a dice view.
 * <p>
 * <b>Example:</b>
 * <br>
 * <pre>
 * // extract and view all rows which have a value < threshold in the first column (representing "age")
 * final Object threshold = 16;
 * matrix.viewSelection( 
 * &nbsp;&nbsp;&nbsp;new ObjectMatrix1DProcedure() {
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final boolean apply(ObjectMatrix1D m) { return m.get(0) < threshold; }
 * &nbsp;&nbsp;&nbsp;}
 * );
 * // extract and view all rows with RMS < threshold
 * // The RMS (Root-Mean-Square) is a measure of the average "size" of the elements of a data sequence.
 * matrix = 0 1 2 3
 * final Object threshold = 0.5;
 * matrix.viewSelection( 
 * &nbsp;&nbsp;&nbsp;new ObjectMatrix1DProcedure() {
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public final boolean apply(ObjectMatrix1D m) { return Math.sqrt(m.aggregate(F.plus,F.square) / m.size()) < threshold; }
 * &nbsp;&nbsp;&nbsp;}
 * );
 * </pre>
 * For further examples, see the <a href="package-summary.html#FunctionObjects">package doc</a>.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.</text>
      <param>condition The condition to be matched.</param>
      <return>the new view.</return>
    </javadoc>
    <method type="ObjectMatrix2D" name="viewSelection" startLine="757" endLine="765">
      <declaration type="IntArrayList" name="matches" />
      <scope startLine="759" endLine="761" />
      <comment>take all columns</comment>
    </method>
    <method name="viewSelectionLike" type="ObjectMatrix2D" startLine="766" endLine="773" />
    <javadoc>
      <text>* Construct and returns a new selection view.</text>
      <param>rowOffsets the offsets of the visible elements.</param>
      <param>columnOffsets the offsets of the visible elements.</param>
      <return>a new view.</return>
    </javadoc>
    <javadoc>
      <text>* Sorts the matrix rows into ascending order, according to the <i>natural ordering</i> of the matrix values in the given column.
 * This sort is guaranteed to be <i>stable</i>.
 * For further information, see {@link cern.colt.matrix.objectalgo.Sorting#sort(ObjectMatrix2D,int)}.
 * For more advanced sorting functionality, see {@link cern.colt.matrix.objectalgo.Sorting}.</text>
      <return>a new sorted vector (matrix) view.</return>
      <throws>IndexOutOfBoundsException if <tt>column < 0 || column >= columns()</tt>.</throws>
    </javadoc>
    <method type="ObjectMatrix2D" name="viewSorted" startLine="782" endLine="784" />
    <javadoc>
      <text>* Constructs and returns a new <i>stride view</i> which is a sub matrix consisting of every i-th cell.
 * More specifically, the view has <tt>this.rows()/rowStride</tt> rows and <tt>this.columns()/columnStride</tt> columns holding cells <tt>this.get(i*rowStride,j*columnStride)</tt> for all <tt>i = 0..rows()/rowStride - 1, j = 0..columns()/columnStride - 1</tt>.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.</text>
      <param>rowStride the row step factor.</param>
      <param>columnStride the column step factor.</param>
      <return>a new view.</return>
      <throws>IndexOutOfBoundsException if <tt>rowStride<=0 || columnStride<=0</tt>.</throws>
    </javadoc>
    <method type="ObjectMatrix2D" name="viewStrides" startLine="795" endLine="797" />
    <javadoc>
      <text>* Applies a procedure to each cell's value.
 * Iterates downwards from <tt>[rows()-1,columns()-1]</tt> to <tt>[0,0]</tt>,
 * as demonstrated by this snippet:
 * <pre>
 * for (int row=rows; --row >=0;) {
 * for (int column=columns; --column >= 0;) {
 * if (!procedure.apply(getQuick(row,column))) return false;
 * }
 * }
 * return true;
 * </pre>
 * Note that an implementation may use more efficient techniques, but must not use any other order.</text>
      <param>procedure a procedure object taking as argument the current cell's value. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.</param>
      <return><tt>false</tt> if the procedure stopped before all elements where iterated over, <tt>true</tt> otherwise.</return>
    </javadoc>
    <method type="boolean" name="xforEach" startLine="815" endLine="822">
      <scope startLine="816" endLine="820">
        <scope startLine="817" endLine="819" />
      </scope>
    </method>
  </class>
</source>
