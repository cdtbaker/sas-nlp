<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix">
  <import name="cern.colt.matrix.impl.DenseDoubleMatrix1D" />
  <import name="cern.colt.matrix.impl.SparseDoubleMatrix1D" />
  <class name="DoubleFactory1D" extends="cern.colt.PersistentObject" startLine="13">
    <javadoc>
      <text>* Factory for convenient construction of 1-d matrices holding <tt>double</tt> cells.
 * Use idioms like <tt>DoubleFactory1D.dense.make(1000)</tt> to construct dense matrices, 
 * <tt>DoubleFactory1D.sparse.make(1000)</tt> to construct sparse matrices.
 * If the factory is used frequently it might be useful to streamline the notation. 
 * For example by aliasing:
 * <table>
 * <td class="PRE"> 
 * <pre>
 * DoubleFactory1D F = DoubleFactory1D.dense;
 * F.make(1000);
 * F.descending(10);
 * F.random(3);
 * ...
 * </pre>
 * </td>
 * </table></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <javadoc>
      <text>* A factory producing dense matrices.</text>
    </javadoc>
    <declaration type="DoubleFactory1D" name="dense" />
    <javadoc>
      <text>* A factory producing sparse matrices.</text>
    </javadoc>
    <declaration type="DoubleFactory1D" name="sparse" />
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="DoubleFactory1D" startLine="48" endLine="48" />
    <javadoc>
      <text>* C = A||B; Constructs a new matrix which is the concatenation of two other matrices.
 * Example: <tt>0 1</tt> append <tt>3 4</tt> --> <tt>0 1 3 4</tt>.</text>
    </javadoc>
    <method type="DoubleMatrix1D" name="append" startLine="53" endLine="59">
      <declaration type="DoubleMatrix1D" name="matrix" />
      <comment>concatenate</comment>
    </method>
    <javadoc>
      <text>* Constructs a matrix with cells having ascending values.
 * For debugging purposes.
 * Example: <tt>0 1 2</tt></text>
    </javadoc>
    <method type="DoubleMatrix1D" name="ascending" startLine="65" endLine="68">
      <declaration type="cern.jet.math.Functions" name="F" />
    </method>
    <javadoc>
      <text>* Constructs a matrix with cells having descending values.
 * For debugging purposes.
 * Example: <tt>2 1 0</tt></text>
    </javadoc>
    <method type="DoubleMatrix1D" name="descending" startLine="74" endLine="81">
      <declaration type="DoubleMatrix1D" name="matrix" />
      <declaration type="int" name="v" />
      <scope startLine="77" endLine="79" />
    </method>
    <javadoc>
      <text>* Constructs a matrix with the given cell values.
 * The values are copied. So subsequent changes in <tt>values</tt> are not reflected in the matrix, and vice-versa.</text>
      <param>values The values to be filled into the new matrix.</param>
    </javadoc>
    <method type="DoubleMatrix1D" name="make" startLine="88" endLine="91" />
    <javadoc>
      <text>* Constructs a matrix which is the concatenation of all given parts.
 * Cells are copied.</text>
    </javadoc>
    <method type="DoubleMatrix1D" name="make" startLine="96" endLine="110">
      <declaration type="int" name="size" />
      <declaration type="DoubleMatrix1D" name="vector" />
      <scope startLine="104" endLine="107" />
    </method>
    <javadoc>
      <text>* Constructs a matrix with the given shape, each cell initialized with zero.</text>
    </javadoc>
    <method type="DoubleMatrix1D" name="make" startLine="114" endLine="117" />
    <javadoc>
      <text>* Constructs a matrix with the given shape, each cell initialized with the given value.</text>
    </javadoc>
    <method type="DoubleMatrix1D" name="make" startLine="121" endLine="123" />
    <javadoc>
      <text>* Constructs a matrix from the values of the given list.
 * The values are copied. So subsequent changes in <tt>values</tt> are not reflected in the matrix, and vice-versa.</text>
      <param>values The values to be filled into the new matrix.</param>
      <return>a new matrix.</return>
    </javadoc>
    <method type="DoubleMatrix1D" name="make" startLine="131" endLine="136">
      <declaration type="int" name="size" />
      <declaration type="DoubleMatrix1D" name="vector" />
    </method>
    <javadoc>
      <text>* Constructs a matrix with uniformly distributed values in <tt>(0,1)</tt> (exclusive).</text>
    </javadoc>
    <method type="DoubleMatrix1D" name="random" startLine="140" endLine="142" />
    <javadoc>
      <text>* C = A||A||..||A; Constructs a new matrix which is concatenated <tt>repeat</tt> times.
 * Example:
 * <pre>
 * 0 1
 * repeat(3) -->
 * 0 1 0 1 0 1
 * </pre></text>
    </javadoc>
    <method type="DoubleMatrix1D" name="repeat" startLine="152" endLine="159">
      <declaration type="int" name="size" />
      <declaration type="DoubleMatrix1D" name="matrix" />
      <scope startLine="155" endLine="157" />
    </method>
    <javadoc>
      <text>* Constructs a randomly sampled matrix with the given shape.
 * Randomly picks exactly <tt>Math.round(size*nonZeroFraction)</tt> cells and initializes them to <tt>value</tt>, all the rest will be initialized to zero.
 * Note that this is not the same as setting each cell with probability <tt>nonZeroFraction</tt> to <tt>value</tt>.</text>
      <throws>IllegalArgumentException if <tt>nonZeroFraction < 0 || nonZeroFraction > 1</tt>.</throws>
      <see>cern.jet.random.sampling.RandomSampler</see>
    </javadoc>
    <method type="DoubleMatrix1D" name="sample" startLine="167" endLine="186">
      <declaration type="double" name="epsilon" />
      <declaration type="DoubleMatrix1D" name="matrix" />
      <declaration type="int" name="n" />
      <declaration type="cern.jet.random.sampling.RandomSamplingAssistant" name="sampler" />
      <scope startLine="179" endLine="183">
        <scope startLine="180" endLine="182" />
      </scope>
    </method>
    <javadoc>
      <text>* Constructs a list from the given matrix.
 * The values are copied. So subsequent changes in <tt>values</tt> are not reflected in the list, and vice-versa.</text>
      <param>values The values to be filled into the new list.</param>
      <return>a new list.</return>
    </javadoc>
    <method type="cern.colt.list.DoubleArrayList" name="toList" startLine="194" endLine="200">
      <declaration type="int" name="size" />
      <declaration type="cern.colt.list.DoubleArrayList" name="list" />
    </method>
  </class>
</source>
