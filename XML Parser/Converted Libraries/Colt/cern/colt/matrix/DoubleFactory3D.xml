<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix">
  <import name="cern.colt.matrix.impl.DenseDoubleMatrix3D" />
  <import name="cern.colt.matrix.impl.SparseDoubleMatrix3D" />
  <class name="DoubleFactory3D" extends="cern.colt.PersistentObject" startLine="13">
    <javadoc>
      <text>* Factory for convenient construction of 3-d matrices holding <tt>double</tt> cells. 
 * Use idioms like <tt>DoubleFactory3D.dense.make(4,4,4)</tt> to construct dense matrices, 
 * <tt>DoubleFactory3D.sparse.make(4,4,4)</tt> to construct sparse matrices.
 * If the factory is used frequently it might be useful to streamline the notation. 
 * For example by aliasing:
 * <table>
 * <td class="PRE"> 
 * <pre>
 * DoubleFactory3D F = DoubleFactory3D.dense;
 * F.make(4,4,4);
 * F.descending(10,20,5);
 * F.random(4,4,5);
 * ...
 * </pre>
 * </td>
 * </table></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <javadoc>
      <text>* A factory producing dense matrices.</text>
    </javadoc>
    <declaration type="DoubleFactory3D" name="dense" />
    <javadoc>
      <text>* A factory producing sparse matrices.</text>
    </javadoc>
    <declaration type="DoubleFactory3D" name="sparse" />
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="DoubleFactory3D" startLine="48" endLine="48" />
    <javadoc>
      <text>* Constructs a matrix with cells having ascending values.
 * For debugging purposes.</text>
    </javadoc>
    <method type="DoubleMatrix3D" name="ascending" startLine="53" endLine="56">
      <declaration type="cern.jet.math.Functions" name="F" />
    </method>
    <javadoc>
      <text>* Constructs a matrix with cells having descending values.
 * For debugging purposes.</text>
    </javadoc>
    <method type="DoubleMatrix3D" name="descending" startLine="61" endLine="72">
      <declaration type="DoubleMatrix3D" name="matrix" />
      <declaration type="int" name="v" />
      <scope startLine="64" endLine="70">
        <scope startLine="65" endLine="69">
          <scope startLine="66" endLine="68" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Constructs a matrix with the given cell values.
 * <tt>values</tt> is required to have the form <tt>values[slice][row][column]</tt>
 * and have exactly the same number of slices, rows and columns as the receiver.
 * <p>
 * The values are copied. So subsequent changes in <tt>values</tt> are not reflected in the matrix, and vice-versa.</text>
      <param>values the values to be filled into the cells.</param>
      <return><tt>this</tt> (for convenience only).</return>
      <throws>IllegalArgumentException if <tt>values.length != slices() || for any 0 &lt;= slice &lt; slices(): values[slice].length != rows()</tt>.</throws>
      <throws>IllegalArgumentException if <tt>for any 0 &lt;= column &lt; columns(): values[slice][row].length != columns()</tt>.</throws>
    </javadoc>
    <method type="DoubleMatrix3D" name="make" startLine="85" endLine="88" />
    <javadoc>
      <text>* Constructs a matrix with the given shape, each cell initialized with zero.</text>
    </javadoc>
    <method type="DoubleMatrix3D" name="make" startLine="92" endLine="95" />
    <javadoc>
      <text>* Constructs a matrix with the given shape, each cell initialized with the given value.</text>
    </javadoc>
    <method type="DoubleMatrix3D" name="make" startLine="99" endLine="101" />
    <javadoc>
      <text>* Constructs a matrix with uniformly distributed values in <tt>(0,1)</tt> (exclusive).</text>
    </javadoc>
    <method type="DoubleMatrix3D" name="random" startLine="105" endLine="107" />
  </class>
</source>
