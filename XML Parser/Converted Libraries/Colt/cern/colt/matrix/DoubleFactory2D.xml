<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix">
  <import name="cern.colt.matrix.impl.DenseDoubleMatrix2D" />
  <import name="cern.colt.matrix.impl.RCDoubleMatrix2D" />
  <import name="cern.colt.matrix.impl.SparseDoubleMatrix2D" />
  <class name="DoubleFactory2D" extends="cern.colt.PersistentObject" startLine="14">
    <javadoc>
      <text>* Factory for convenient construction of 2-d matrices holding <tt>double</tt> 
 * cells. Also provides convenient methods to compose (concatenate) and decompose 
 * (split) matrices from/to constituent blocks. </p>
 * <p>&nbsp; </p>
 * <table border="0" cellspacing="0">
 * <tr align="left" valign="top"> 
 * <td><i>Construction</i></td>
 * <td>Use idioms like <tt>DoubleFactory2D.dense.make(4,4)</tt> to construct 
 * dense matrices, <tt>DoubleFactory2D.sparse.make(4,4)</tt> to construct sparse 
 * matrices.</td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td><i> Construction with initial values </i></td>
 * <td>Use other <tt>make</tt> methods to construct matrices with given initial 
 * values. </td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td><i> Appending rows and columns </i></td>
 * <td>Use methods {@link #appendColumns(DoubleMatrix2D,DoubleMatrix2D) appendColumns}, {@link #appendColumns(DoubleMatrix2D,DoubleMatrix2D) appendRows} and {@link #repeat(DoubleMatrix2D,int,int) repeat} to append rows and columns. </td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td><i> General block matrices </i></td>
 * <td>Use methods {@link #compose(DoubleMatrix2D[][]) compose} and {@link #decompose(DoubleMatrix2D[][],DoubleMatrix2D) 
 * decompose} to work with general block matrices. </td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td><i> Diagonal matrices </i></td>
 * <td>Use methods {@link #diagonal(DoubleMatrix1D) diagonal(vector)}, {@link #diagonal(DoubleMatrix2D) diagonal(matrix)} and {@link #identity(int) identity} 
 * to work with diagonal matrices. </td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td><i> Diagonal block matrices </i></td>
 * <td>Use method {@link #composeDiagonal(DoubleMatrix2D,DoubleMatrix2D,DoubleMatrix2D) 
 * composeDiagonal} to work with diagonal block matrices. </td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td><i>Random</i></td>
 * <td>Use methods {@link #random(int,int) random} and {@link #sample(int,int,double,double) 
 * sample} to construct random matrices. </td>
 * </tr>
 * </table>
 * <p>&nbsp;</p>
 * <p>If the factory is used frequently it might be useful to streamline the notation. 
 * For example by aliasing: </p>
 * <table>
 * <td class="PRE"> 
 * <pre>
 * DoubleFactory2D F = DoubleFactory2D.dense;
 * F.make(4,4);
 * F.descending(10,20);
 * F.random(4,4);
 * ...
 * </pre>
 * </td>
 * </table></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <javadoc>
      <text>* A factory producing dense matrices.</text>
    </javadoc>
    <declaration type="DoubleFactory2D" name="dense" />
    <javadoc>
      <text>* A factory producing sparse hash matrices.</text>
    </javadoc>
    <declaration type="DoubleFactory2D" name="sparse" />
    <javadoc>
      <text>* A factory producing sparse row compressed matrices.</text>
    </javadoc>
    <declaration type="DoubleFactory2D" name="rowCompressed" />
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="DoubleFactory2D" startLine="100" endLine="100" />
    <javadoc>
      <text>* C = A||B; Constructs a new matrix which is the column-wise concatenation of two other matrices.
 * <pre>
 * 0 1 2
 * 3 4 5
 * appendColumns
 * 6 7
 * 8 9
 * -->
 * 0 1 2 6 7 
 * 3 4 5 8 9
 * </pre></text>
    </javadoc>
    <method type="DoubleMatrix2D" name="appendColumns" startLine="114" endLine="127">
      <declaration type="int" name="ac" />
      <declaration type="int" name="bc" />
      <declaration type="int" name="r" />
      <declaration type="DoubleMatrix2D" name="matrix" />
      <comment>force both to have maximal shared number of rows.</comment>
      <comment>concatenate</comment>
    </method>
    <javadoc>
      <text>* C = A||B; Constructs a new matrix which is the row-wise concatenation of two other matrices.
 * <pre>
 * 0 1 
 * 2 3 
 * 4 5
 * appendRows
 * 6 7
 * 8 9
 * -->
 * 0 1 
 * 2 3 
 * 4 5
 * 6 7
 * 8 9
 * </pre></text>
    </javadoc>
    <method type="DoubleMatrix2D" name="appendRows" startLine="145" endLine="158">
      <declaration type="int" name="ar" />
      <declaration type="int" name="br" />
      <declaration type="int" name="c" />
      <declaration type="DoubleMatrix2D" name="matrix" />
      <comment>force both to have maximal shared number of columns.</comment>
      <comment>concatenate</comment>
    </method>
    <javadoc>
      <text>* Constructs a matrix with cells having ascending values.
 * For debugging purposes.
 * Example:
 * <pre>
 * 0 1 2 
 * 3 4 5
 * </pre></text>
    </javadoc>
    <method type="DoubleMatrix2D" name="ascending" startLine="168" endLine="171">
      <declaration type="cern.jet.math.Functions" name="F" />
    </method>
    <javadoc>
      <text>* Checks whether the given array is rectangular, that is, whether all rows have the same number of columns.</text>
      <throws>IllegalArgumentException if the array is not rectangular.</throws>
    </javadoc>
    <method type="void" name="checkRectangularShape" startLine="176" endLine="184">
      <declaration type="int" name="columns" />
      <scope startLine="178" endLine="183">
        <scope startLine="179" endLine="182" />
      </scope>
    </method>
    <javadoc>
      <text>* Checks whether the given array is rectangular, that is, whether all rows have the same number of columns.</text>
      <throws>IllegalArgumentException if the array is not rectangular.</throws>
    </javadoc>
    <method type="void" name="checkRectangularShape" startLine="189" endLine="197">
      <declaration type="int" name="columns" />
      <scope startLine="191" endLine="196">
        <scope startLine="192" endLine="195" />
      </scope>
    </method>
    <javadoc>
      <text>* Constructs a block matrix made from the given parts.
 * The inverse to method {@link #decompose(DoubleMatrix2D[][],DoubleMatrix2D)}.
 * <p>
 * All matrices of a given column within <tt>parts</tt> must have the same number of columns.
 * All matrices of a given row within <tt>parts</tt> must have the same number of rows.
 * Otherwise an <tt>IllegalArgumentException</tt> is thrown. 
 * Note that <tt>null</tt>s within <tt>parts[row,col]</tt> are an exception to this rule: they are ignored.
 * Cells are copied.
 * Example:
 * <table border="1" cellspacing="0">
 * <tr align="left" valign="top"> 
 * <td><tt>Code</tt></td>
 * <td><tt>Result</tt></td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td> 
 * <pre>
 * DoubleMatrix2D[][] parts1 = 
 * {
 * &nbsp;&nbsp;&nbsp;{ null,        make(2,2,1), null        },
 * &nbsp;&nbsp;&nbsp;{ make(4,4,2), null,        make(4,3,3) },
 * &nbsp;&nbsp;&nbsp;{ null,        make(2,2,4), null        }
 * };
 * System.out.println(compose(parts1));
 * </pre>
 * </td>
 * <td><tt>8&nbsp;x&nbsp;9&nbsp;matrix<br>
 * 0&nbsp;0&nbsp;0&nbsp;0&nbsp;1&nbsp;1&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;0&nbsp;1&nbsp;1&nbsp;0&nbsp;0&nbsp;0<br>
 * 2&nbsp;2&nbsp;2&nbsp;2&nbsp;0&nbsp;0&nbsp;3&nbsp;3&nbsp;3<br>
 * 2&nbsp;2&nbsp;2&nbsp;2&nbsp;0&nbsp;0&nbsp;3&nbsp;3&nbsp;3<br>
 * 2&nbsp;2&nbsp;2&nbsp;2&nbsp;0&nbsp;0&nbsp;3&nbsp;3&nbsp;3<br>
 * 2&nbsp;2&nbsp;2&nbsp;2&nbsp;0&nbsp;0&nbsp;3&nbsp;3&nbsp;3<br>
 * 0&nbsp;0&nbsp;0&nbsp;0&nbsp;4&nbsp;4&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;0&nbsp;4&nbsp;4&nbsp;0&nbsp;0&nbsp;0</tt></td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td> 
 * <pre>
 * DoubleMatrix2D[][] parts3 = 
 * {
 * &nbsp;&nbsp;&nbsp;{ identity(3),               null,                        },
 * &nbsp;&nbsp;&nbsp;{ null,                      identity(3).viewColumnFlip() },
 * &nbsp;&nbsp;&nbsp;{ identity(3).viewRowFlip(), null                         }
 * };
 * System.out.println("\n"+make(parts3));
 * </pre>
 * </td>
 * <td><tt>9&nbsp;x&nbsp;6&nbsp;matrix<br>
 * 1&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;1&nbsp;0&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;1&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;1<br>
 * 0&nbsp;0&nbsp;0&nbsp;0&nbsp;1&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;1&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;1&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;1&nbsp;0&nbsp;0&nbsp;0&nbsp;0<br>
 * 1&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0 </tt></td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td> 
 * <pre>
 * DoubleMatrix2D A = ascending(2,2);
 * DoubleMatrix2D B = descending(2,2);
 * DoubleMatrix2D _ = null;
 * DoubleMatrix2D[][] parts4 = 
 * {
 * &nbsp;&nbsp;&nbsp;{ A, _, A, _ },
 * &nbsp;&nbsp;&nbsp;{ _, A, _, B }
 * };
 * System.out.println("\n"+make(parts4));
 * </pre>
 * </td>
 * <td><tt>4&nbsp;x&nbsp;8&nbsp;matrix<br>
 * 1&nbsp;2&nbsp;0&nbsp;0&nbsp;1&nbsp;2&nbsp;0&nbsp;0<br>
 * 3&nbsp;4&nbsp;0&nbsp;0&nbsp;3&nbsp;4&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;1&nbsp;2&nbsp;0&nbsp;0&nbsp;3&nbsp;2<br>
 * 0&nbsp;0&nbsp;3&nbsp;4&nbsp;0&nbsp;0&nbsp;1&nbsp;0 </tt></td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td> 
 * <pre>
 * DoubleMatrix2D[][] parts2 = 
 * {
 * &nbsp;&nbsp;&nbsp;{ null,        make(2,2,1), null        },
 * &nbsp;&nbsp;&nbsp;{ make(4,4,2), null,        make(4,3,3) },
 * &nbsp;&nbsp;&nbsp;{ null,        make(2,3,4), null        }
 * };
 * System.out.println("\n"+Factory2D.make(parts2));
 * </pre>
 * </td>
 * <td><tt>IllegalArgumentException<br>
 * A[0,1].cols != A[2,1].cols<br>
 * (2 != 3)</tt></td>
 * </tr>
 * </table></text>
      <throws>IllegalArgumentException subject to the conditions outlined above.</throws>
    </javadoc>
    <method type="DoubleMatrix2D" name="compose" startLine="298" endLine="361">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <declaration type="DoubleMatrix2D" name="empty" />
      <declaration type="int[]" name="maxWidths" />
      <scope startLine="309" endLine="320">
        <declaration type="int" name="maxWidth" />
        <scope startLine="311" endLine="318">
          <declaration type="DoubleMatrix2D" name="part" />
          <scope startLine="313" endLine="317">
            <declaration type="int" name="width" />
          </scope>
        </scope>
      </scope>
      <declaration type="int[]" name="maxHeights" />
      <scope startLine="324" endLine="335">
        <declaration type="int" name="maxHeight" />
        <scope startLine="326" endLine="333">
          <declaration type="DoubleMatrix2D" name="part" />
          <scope startLine="328" endLine="332">
            <declaration type="int" name="height" />
          </scope>
        </scope>
      </scope>
      <declaration type="int" name="resultRows" />
      <declaration type="int" name="resultCols" />
      <declaration type="DoubleMatrix2D" name="matrix" />
      <declaration type="int" name="r" />
      <scope startLine="348" endLine="358">
        <declaration type="int" name="c" />
        <scope startLine="350" endLine="356">
          <declaration type="DoubleMatrix2D" name="part" />
          <scope startLine="352" endLine="354" />
        </scope>
      </scope>
      <comment>determine maximum column width of each column</comment>
      <comment>determine row height of each row</comment>
      <comment>shape of result</comment>
      <comment>copy</comment>
    </method>
    <javadoc>
      <text>* Constructs a diagonal block matrix from the given parts (the <i>direct sum</i> of two matrices).
 * That is the concatenation
 * <pre>
 * A 0
 * 0 B
 * </pre>
 * (The direct sum has <tt>A.rows()+B.rows()</tt> rows and <tt>A.columns()+B.columns()</tt> columns).
 * Cells are copied.</text>
      <return>a new matrix which is the direct sum.</return>
    </javadoc>
    <method type="DoubleMatrix2D" name="composeDiagonal" startLine="373" endLine="380">
      <declaration type="int" name="ar" />
      <declaration type="int" name="ac" />
      <declaration type="int" name="br" />
      <declaration type="int" name="bc" />
      <declaration type="DoubleMatrix2D" name="sum" />
    </method>
    <javadoc>
      <text>* Constructs a diagonal block matrix from the given parts.
 * The concatenation has the form
 * <pre>
 * A 0 0
 * 0 B 0
 * 0 0 C
 * </pre>
 * from the given parts.
 * Cells are copied.</text>
    </javadoc>
    <method type="DoubleMatrix2D" name="composeDiagonal" startLine="392" endLine="398">
      <declaration type="DoubleMatrix2D" name="diag" />
    </method>
    <javadoc>
      <text>* Splits a block matrix into its constituent blocks; Copies blocks of a matrix into the given parts.
 * The inverse to method {@link #compose(DoubleMatrix2D[][])}.
 * <p>
 * All matrices of a given column within <tt>parts</tt> must have the same number of columns.
 * All matrices of a given row within <tt>parts</tt> must have the same number of rows.
 * Otherwise an <tt>IllegalArgumentException</tt> is thrown. 
 * Note that <tt>null</tt>s within <tt>parts[row,col]</tt> are an exception to this rule: they are ignored.
 * Cells are copied.
 * Example:
 * <table border="1" cellspacing="0">
 * <tr align="left" valign="top"> 
 * <td><tt>Code</tt></td>
 * <td><tt>matrix</tt></td>
 * <td><tt>--&gt; parts </tt></td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td> 
 * <pre>
 * DoubleMatrix2D matrix = ... ;
 * DoubleMatrix2D _ = null;
 * DoubleMatrix2D A,B,C,D;
 * A = make(2,2); B = make (4,4);
 * C = make(4,3); D = make (2,2);
 * DoubleMatrix2D[][] parts = 
 * {
 * &nbsp;&nbsp;&nbsp;{ _, A, _ },
 * &nbsp;&nbsp;&nbsp;{ B, _, C },
 * &nbsp;&nbsp;&nbsp;{ _, D, _ }
 * };
 * decompose(parts,matrix);
 * System.out.println(&quot;\nA = &quot;+A);
 * System.out.println(&quot;\nB = &quot;+B);
 * System.out.println(&quot;\nC = &quot;+C);
 * System.out.println(&quot;\nD = &quot;+D);
 * </pre>
 * </td>
 * <td><tt>8&nbsp;x&nbsp;9&nbsp;matrix<br>
 * 9&nbsp;9&nbsp;9&nbsp;9&nbsp;1&nbsp;1&nbsp;9&nbsp;9&nbsp;9<br>
 * 9&nbsp;9&nbsp;9&nbsp;9&nbsp;1&nbsp;1&nbsp;9&nbsp;9&nbsp;9<br>
 * 2&nbsp;2&nbsp;2&nbsp;2&nbsp;9&nbsp;9&nbsp;3&nbsp;3&nbsp;3<br>
 * 2&nbsp;2&nbsp;2&nbsp;2&nbsp;9&nbsp;9&nbsp;3&nbsp;3&nbsp;3<br>
 * 2&nbsp;2&nbsp;2&nbsp;2&nbsp;9&nbsp;9&nbsp;3&nbsp;3&nbsp;3<br>
 * 2&nbsp;2&nbsp;2&nbsp;2&nbsp;9&nbsp;9&nbsp;3&nbsp;3&nbsp;3<br>
 * 9&nbsp;9&nbsp;9&nbsp;9&nbsp;4&nbsp;4&nbsp;9&nbsp;9&nbsp;9<br>
 * 9&nbsp;9&nbsp;9&nbsp;9&nbsp;4&nbsp;4&nbsp;9&nbsp;9&nbsp;9</tt></td>
 * <td> 
 * <p><tt>A = 2&nbsp;x&nbsp;2&nbsp;matrix<br>
 * 1&nbsp;1<br>
 * 1&nbsp;1</tt></p>
 * <p><tt>B = 4&nbsp;x&nbsp;4&nbsp;matrix<br>
 * 2&nbsp;2&nbsp;2&nbsp;2<br>
 * 2&nbsp;2&nbsp;2&nbsp;2<br>
 * 2&nbsp;2&nbsp;2&nbsp;2<br>
 * 2&nbsp;2&nbsp;2&nbsp;2</tt></p>
 * <p><tt>C = 4&nbsp;x&nbsp;3&nbsp;matrix<br>
 * 3&nbsp;3&nbsp;3<br>
 * 3&nbsp;3&nbsp;3<br>
 * </tt><tt>3&nbsp;3&nbsp;3<br>
 * </tt><tt>3&nbsp;3&nbsp;3</tt></p>
 * <p><tt>D = 2&nbsp;x&nbsp;2&nbsp;matrix<br>
 * 4&nbsp;4<br>
 * 4&nbsp;4</tt></p>
 * </td>
 * </tr>
 * </table></text>
      <throws>IllegalArgumentException subject to the conditions outlined above.</throws>
    </javadoc>
    <method type="void" name="decompose" startLine="467" endLine="527">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <declaration type="int[]" name="maxWidths" />
      <scope startLine="476" endLine="487">
        <declaration type="int" name="maxWidth" />
        <scope startLine="478" endLine="485">
          <declaration type="DoubleMatrix2D" name="part" />
          <scope startLine="480" endLine="484">
            <declaration type="int" name="width" />
          </scope>
        </scope>
      </scope>
      <declaration type="int[]" name="maxHeights" />
      <scope startLine="491" endLine="502">
        <declaration type="int" name="maxHeight" />
        <scope startLine="493" endLine="500">
          <declaration type="DoubleMatrix2D" name="part" />
          <scope startLine="495" endLine="499">
            <declaration type="int" name="height" />
          </scope>
        </scope>
      </scope>
      <declaration type="int" name="resultRows" />
      <declaration type="int" name="resultCols" />
      <declaration type="int" name="r" />
      <scope startLine="515" endLine="525">
        <declaration type="int" name="c" />
        <scope startLine="517" endLine="523">
          <declaration type="DoubleMatrix2D" name="part" />
          <scope startLine="519" endLine="521" />
        </scope>
      </scope>
      <comment>determine maximum column width of each column</comment>
      <comment>determine row height of each row</comment>
      <comment>shape of result parts</comment>
      <comment>copy</comment>
    </method>
    <javadoc>
      <text>* Demonstrates usage of this class.</text>
    </javadoc>
    <method type="void" name="demo1" startLine="531" endLine="575">
      <declaration type="DoubleMatrix2D[][]" name="parts1" />
      <declaration type="DoubleMatrix2D[][]" name="parts3" />
      <declaration type="DoubleMatrix2D" name="A" />
      <declaration type="DoubleMatrix2D" name="B" />
      <declaration type="DoubleMatrix2D" name="_" />
      <declaration type="DoubleMatrix2D[][]" name="parts4" />
      <comment>System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(make(parts1).toString()));</comment>
      <comment>illegal 2 != 3
DoubleMatrix2D[][] parts2 =
{
{ null,        make(2,2,1), null        },
{ make(4,4,2), null,        make(4,3,3) },
{ null,        make(2,3,4), null        }
};
System.out.println("\n"+make(parts2));</comment>
      <comment>System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(make(parts3).toString()));</comment>
      <comment>System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(make(parts4).toString()));</comment>
    </method>
    <javadoc>
      <text>* Demonstrates usage of this class.</text>
    </javadoc>
    <method type="void" name="demo2" startLine="579" endLine="636">
      <declaration type="DoubleMatrix2D" name="matrix" />
      <declaration type="DoubleMatrix2D" name="A" />
      <declaration type="DoubleMatrix2D" name="_" />
      <declaration type="DoubleMatrix2D[][]" name="parts1" />
      <comment>System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(make(parts1).toString()));</comment>
      <comment>illegal 2 != 3
DoubleMatrix2D[][] parts2 =
{
{ null,        make(2,2,1), null        },
{ make(4,4,2), null,        make(4,3,3) },
{ null,        make(2,3,4), null        }
};
System.out.println("\n"+Factory2D.make(parts2));</comment>
      <comment>DoubleMatrix2D[][] parts3 =
{
{ identity(3),               null,                        },
{ null,                      identity(3).viewColumnFlip() },
{ identity(3).viewRowFlip(), null                         }
};
System.out.println("\n"+make(parts3));
System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(make(parts3).toString()));

DoubleMatrix2D A = ascending(2,2);
DoubleMatrix2D B = descending(2,2);
DoubleMatrix2D _ = null;

DoubleMatrix2D[][] parts4 =
{
{ A, _, A, _ },
{ _, A, _, B }
};
System.out.println("\n"+make(parts4));
System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(make(parts4).toString()));</comment>
    </method>
    <javadoc>
      <text>* Constructs a matrix with cells having descending values.
 * For debugging purposes.
 * Example:
 * <pre>
 * 5 4 3 
 * 2 1 0
 * </pre></text>
    </javadoc>
    <method type="DoubleMatrix2D" name="descending" startLine="646" endLine="655">
      <declaration type="DoubleMatrix2D" name="matrix" />
      <declaration type="int" name="v" />
      <scope startLine="649" endLine="653">
        <scope startLine="650" endLine="652" />
      </scope>
    </method>
    <javadoc>
      <text>* Constructs a new diagonal matrix whose diagonal elements are the elements of <tt>vector</tt>.
 * Cells values are copied. The new matrix is not a view.
 * Example:
 * <pre>
 * 5 4 3 -->
 * 5 0 0
 * 0 4 0
 * 0 0 3
 * </pre></text>
      <return>a new matrix.</return>
    </javadoc>
    <method type="DoubleMatrix2D" name="diagonal" startLine="668" endLine="675">
      <declaration type="int" name="size" />
      <declaration type="DoubleMatrix2D" name="diag" />
      <scope startLine="671" endLine="673" />
    </method>
    <javadoc>
      <text>* Constructs a new vector consisting of the diagonal elements of <tt>A</tt>.
 * Cells values are copied. The new vector is not a view.
 * Example:
 * <pre>
 * 5 0 0 9
 * 0 4 0 9
 * 0 0 3 9
 * --> 5 4 3
 * </pre></text>
      <param>A the matrix, need not be square.</param>
      <return>a new vector.</return>
    </javadoc>
    <method type="DoubleMatrix1D" name="diagonal" startLine="689" endLine="696">
      <declaration type="int" name="min" />
      <declaration type="DoubleMatrix1D" name="diag" />
      <scope startLine="692" endLine="694" />
    </method>
    <javadoc>
      <text>* Constructs an identity matrix (having ones on the diagonal and zeros elsewhere).</text>
    </javadoc>
    <method type="DoubleMatrix2D" name="identity" startLine="700" endLine="706">
      <declaration type="DoubleMatrix2D" name="matrix" />
      <scope startLine="702" endLine="704" />
    </method>
    <javadoc>
      <text>* Constructs a matrix with the given cell values.
 * <tt>values</tt> is required to have the form <tt>values[row][column]</tt>
 * and have exactly the same number of columns in every row.
 * <p>
 * The values are copied. So subsequent changes in <tt>values</tt> are not reflected in the matrix, and vice-versa.</text>
      <param>values The values to be filled into the new matrix.</param>
      <throws>IllegalArgumentException if <tt>for any 1 &lt;= row &lt; values.length: values[row].length != values[row-1].length</tt>.</throws>
    </javadoc>
    <method type="DoubleMatrix2D" name="make" startLine="717" endLine="720" />
    <javadoc>
      <text>* Construct a matrix from a one-dimensional column-major packed array, ala Fortran.
 * Has the form <tt>matrix.get(row,column) == values[row + column*rows]</tt>.
 * The values are copied.</text>
      <param>values One-dimensional array of doubles, packed by columns (ala Fortran).</param>
      <param>rows  the number of rows.</param>
      <exception>IllegalArgumentException <tt>values.length</tt> must be a multiple of <tt>rows</tt>.</exception>
    </javadoc>
    <method type="DoubleMatrix2D" name="make" startLine="730" endLine="742">
      <declaration type="int" name="columns" />
      <declaration type="DoubleMatrix2D" name="matrix" />
      <scope startLine="736" endLine="740">
        <scope startLine="737" endLine="739" />
      </scope>
    </method>
    <javadoc>
      <text>* Constructs a matrix with the given shape, each cell initialized with zero.</text>
    </javadoc>
    <method type="DoubleMatrix2D" name="make" startLine="746" endLine="751">
      <comment>if (this==rowCompressedModified) return new RCMDoubleMatrix2D(rows,columns);</comment>
    </method>
    <javadoc>
      <text>* Constructs a matrix with the given shape, each cell initialized with the given value.</text>
    </javadoc>
    <method type="DoubleMatrix2D" name="make" startLine="755" endLine="758" />
    <javadoc>
      <text>* Constructs a 1d matrix of the right dynamic type.</text>
    </javadoc>
    <method type="DoubleMatrix1D" name="make1D" startLine="762" endLine="764" />
    <javadoc>
      <text>* Constructs a matrix with uniformly distributed values in <tt>(0,1)</tt> (exclusive).</text>
    </javadoc>
    <method type="DoubleMatrix2D" name="random" startLine="768" endLine="770" />
    <javadoc>
      <text>* C = A||A||..||A; Constructs a new matrix which is duplicated both along the row and column dimension.
 * Example:
 * <pre>
 * 0 1
 * 2 3
 * repeat(2,3) -->
 * 0 1 0 1 0 1
 * 2 3 2 3 2 3
 * 0 1 0 1 0 1
 * 2 3 2 3 2 3
 * </pre></text>
    </javadoc>
    <method type="DoubleMatrix2D" name="repeat" startLine="784" endLine="794">
      <declaration type="int" name="r" />
      <declaration type="int" name="c" />
      <declaration type="DoubleMatrix2D" name="matrix" />
      <scope startLine="788" endLine="792">
        <scope startLine="789" endLine="791" />
      </scope>
    </method>
    <javadoc>
      <text>* Constructs a randomly sampled matrix with the given shape.
 * Randomly picks exactly <tt>Math.round(rows*columns*nonZeroFraction)</tt> cells and initializes them to <tt>value</tt>, all the rest will be initialized to zero.
 * Note that this is not the same as setting each cell with probability <tt>nonZeroFraction</tt> to <tt>value</tt>.
 * Note: The random seed is a constant.</text>
      <throws>IllegalArgumentException if <tt>nonZeroFraction < 0 || nonZeroFraction > 1</tt>.</throws>
      <see>cern.jet.random.sampling.RandomSampler</see>
    </javadoc>
    <method type="DoubleMatrix2D" name="sample" startLine="803" endLine="807">
      <declaration type="DoubleMatrix2D" name="matrix" />
    </method>
    <javadoc>
      <text>* Modifies the given matrix to be a randomly sampled matrix.
 * Randomly picks exactly <tt>Math.round(rows*columns*nonZeroFraction)</tt> cells and initializes them to <tt>value</tt>, all the rest will be initialized to zero.
 * Note that this is not the same as setting each cell with probability <tt>nonZeroFraction</tt> to <tt>value</tt>.
 * Note: The random seed is a constant.</text>
      <throws>IllegalArgumentException if <tt>nonZeroFraction < 0 || nonZeroFraction > 1</tt>.</throws>
      <see>cern.jet.random.sampling.RandomSampler</see>
    </javadoc>
    <method type="DoubleMatrix2D" name="sample" startLine="816" endLine="840">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <declaration type="double" name="epsilon" />
      <declaration type="int" name="size" />
      <declaration type="int" name="n" />
      <declaration type="cern.jet.random.sampling.RandomSamplingAssistant" name="sampler" />
      <scope startLine="831" endLine="837">
        <scope startLine="832" endLine="836">
          <declaration type="int" name="row" />
          <declaration type="int" name="column" />
        </scope>
      </scope>
    </method>
    <comment>A factory producing sparse row compressed modified matrices.</comment>
    <comment>public static final DoubleFactory2D rowCompressedModified = new DoubleFactory2D();</comment>
  </class>
</source>
