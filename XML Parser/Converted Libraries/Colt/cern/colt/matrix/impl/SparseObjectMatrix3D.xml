<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.impl">
  <import name="cern.colt.map.AbstractIntObjectMap" />
  <import name="cern.colt.map.OpenIntObjectHashMap" />
  <import name="cern.colt.matrix.ObjectMatrix2D" />
  <import name="cern.colt.matrix.ObjectMatrix3D" />
  <class name="SparseObjectMatrix3D" extends="ObjectMatrix3D" startLine="15">
    <javadoc>
      <text>* Sparse hashed 3-d matrix holding <tt>Object</tt> elements.
 * First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
 * <p>
 * <b>Implementation:</b>
 * <p>
 * Note that this implementation is not synchronized.
 * Uses a {@link cern.colt.map.OpenIntObjectHashMap}, which is a compact and performant hashing technique.
 * <p>
 * <b>Memory requirements:</b>
 * <p>
 * Cells that
 * <ul>
 * <li>are never set to non-zero values do not use any memory.
 * <li>switch from zero to non-zero state do use memory.
 * <li>switch back from non-zero to zero state also do use memory. However, their memory is automatically reclaimed from time to time. It can also manually be reclaimed by calling {@link #trimToSize()}.
 * </ul>
 * <p>
 * worst case: <tt>memory [bytes] = (1/minLoadFactor) * nonZeros * 13</tt>.
 * <br>best  case: <tt>memory [bytes] = (1/maxLoadFactor) * nonZeros * 13</tt>.
 * <br>Where <tt>nonZeros = cardinality()</tt> is the number of non-zero cells.
 * Thus, a 100 x 100 x 100 matrix with minLoadFactor=0.25 and maxLoadFactor=0.5 and 1000000 non-zero cells consumes between 25 MB and 50 MB.
 * The same 100 x 100 x 100 matrix with 1000 non-zero cells consumes between 25 and 50 KB.
 * <p>
 * <b>Time complexity:</b>
 * <p>
 * This class offers <i>expected</i> time complexity <tt>O(1)</tt> (i.e. constant time) for the basic operations
 * <tt>get</tt>, <tt>getQuick</tt>, <tt>set</tt>, <tt>setQuick</tt> and <tt>size</tt>
 * assuming the hash function disperses the elements properly among the buckets.
 * Otherwise, pathological cases, although highly improbable, can occur, degrading performance to <tt>O(N)</tt> in the worst case.
 * As such this sparse class is expected to have no worse time complexity than its dense counterpart {@link DenseObjectMatrix2D}.
 * However, constant factors are considerably larger.
 * <p>
 * Cells are internally addressed in (in decreasing order of significance): slice major, row major, column major.
 * Applications demanding utmost speed can exploit this fact.
 * Setting/getting values in a loop slice-by-slice, row-by-row, column-by-column is quicker than, for example, column-by-column, row-by-row, slice-by-slice.
 * Thus
 * <pre>
 * for (int slice=0; slice < slices; slice++) {
 * for (int row=0; row < rows; row++) {
 * for (int column=0; column < columns; column++) {
 * matrix.setQuick(slice,row,column,someValue);
 * }		    
 * }
 * }
 * </pre>
 * is quicker than
 * <pre>
 * for (int column=0; column < columns; column++) {
 * for (int row=0; row < rows; row++) {
 * for (int slice=0; slice < slices; slice++) {
 * matrix.setQuick(slice,row,column,someValue);
 * }
 * }
 * }
 * </pre></text>
      <see>cern.colt.map</see>
      <see>cern.colt.map.OpenIntObjectHashMap</see>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="AbstractIntObjectMap" name="elements" />
    <javadoc>
      <text>* Constructs a matrix with a copy of the given values.
 * <tt>values</tt> is required to have the form <tt>values[slice][row][column]</tt>
 * and have exactly the same number of rows in in every slice and exactly the same number of columns in in every row.
 * <p>
 * The values are copied. So subsequent changes in <tt>values</tt> are not reflected in the matrix, and vice-versa.</text>
      <param>values The values to be filled into the new matrix.</param>
      <throws>IllegalArgumentException if <tt>for any 1 &lt;= slice &lt; values.length: values[slice].length != values[slice-1].length</tt>.</throws>
      <throws>IllegalArgumentException if <tt>for any 1 &lt;= row &lt; values[0].length: values[slice][row].length != values[slice][row-1].length</tt>.</throws>
    </javadoc>
    <method type="constructor" name="SparseObjectMatrix3D" startLine="93" endLine="96" />
    <javadoc>
      <text>* Constructs a matrix with a given number of slices, rows and columns and default memory usage.
 * All entries are initially <tt>null</tt>.</text>
      <param>slices the number of slices the matrix shall have.</param>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <throws>IllegalArgumentException if <tt>(double)slices*columns*rows > Integer.MAX_VALUE</tt>.</throws>
      <throws>IllegalArgumentException if <tt>slices<0 || rows<0 || columns<0</tt>.</throws>
    </javadoc>
    <method type="constructor" name="SparseObjectMatrix3D" startLine="106" endLine="108" />
    <javadoc>
      <text>* Constructs a matrix with a given number of slices, rows and columns using memory as specified.
 * All entries are initially <tt>null</tt>.
 * For details related to memory usage see {@link cern.colt.map.OpenIntObjectHashMap}.</text>
      <param>slices the number of slices the matrix shall have.</param>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <param>initialCapacity   the initial capacity of the hash map.
 * If not known, set <tt>initialCapacity=0</tt> or small.</param>
      <param>minLoadFactor        the minimum load factor of the hash map.</param>
      <param>maxLoadFactor        the maximum load factor of the hash map.</param>
      <throws>IllegalArgumentException if <tt>initialCapacity < 0 || (minLoadFactor < 0.0 || minLoadFactor >= 1.0) || (maxLoadFactor <= 0.0 || maxLoadFactor >= 1.0) || (minLoadFactor >= maxLoadFactor)</tt>.</throws>
      <throws>IllegalArgumentException if <tt>(double)slices*columns*rows > Integer.MAX_VALUE</tt>.</throws>
      <throws>IllegalArgumentException if <tt>slices<0 || rows<0 || columns<0</tt>.</throws>
    </javadoc>
    <method type="constructor" name="SparseObjectMatrix3D" startLine="125" endLine="128" />
    <javadoc>
      <text>* Constructs a view with the given parameters.</text>
      <param>slices the number of slices the matrix shall have.</param>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <param>elements the cells.</param>
      <param>sliceZero the position of the first element.</param>
      <param>rowZero the position of the first element.</param>
      <param>columnZero the position of the first element.</param>
      <param>sliceStride the number of elements between two slices, i.e. <tt>index(k+1,i,j)-index(k,i,j)</tt>.</param>
      <param>rowStride the number of elements between two rows, i.e. <tt>index(k,i+1,j)-index(k,i,j)</tt>.</param>
      <param>columnnStride the number of elements between two columns, i.e. <tt>index(k,i,j+1)-index(k,i,j)</tt>.</param>
      <throws>IllegalArgumentException if <tt>(Object)slices*columns*rows > Integer.MAX_VALUE</tt>.</throws>
      <throws>IllegalArgumentException if <tt>slices<0 || rows<0 || columns<0</tt>.</throws>
    </javadoc>
    <method type="constructor" name="SparseObjectMatrix3D" startLine="144" endLine="148" />
    <javadoc>
      <text>* Returns the number of cells having non-zero values.</text>
    </javadoc>
    <method type="int" name="cardinality" startLine="152" endLine="155" />
    <javadoc>
      <text>* Ensures that the receiver can hold at least the specified number of non-zero cells without needing to allocate new internal memory.
 * If necessary, allocates new internal memory and increases the capacity of the receiver.
 * <p>
 * This method never need be called; it is for performance tuning only.
 * Calling this method before tt>set()</tt>ing a large number of non-zero values boosts performance,
 * because the receiver will grow only once instead of potentially many times and hash collisions get less probable.</text>
      <param>minNonZeros   the desired minimum number of non-zero cells.</param>
    </javadoc>
    <method type="void" name="ensureCapacity" startLine="166" endLine="168" />
    <javadoc>
      <text>* Returns the matrix cell value at coordinate <tt>[slice,row,column]</tt>.
 * <p>Provided with invalid parameters this method may return invalid objects without throwing any exception.
 * <b>You should only use this method when you are absolutely sure that the coordinate is within bounds.</b>
 * Precondition (unchecked): <tt>slice&lt;0 || slice&gt;=slices() || row&lt;0 || row&gt;=rows() || column&lt;0 || column&gt;=column()</tt>.</text>
      <param>slice   the index of the slice-coordinate.</param>
      <param>row   the index of the row-coordinate.</param>
      <param>column   the index of the column-coordinate.</param>
      <return>the value at the specified coordinate.</return>
    </javadoc>
    <method type="Object" name="getQuick" startLine="181" endLine="186">
      <comment>if (debug) if (slice<0 || slice>=slices || row<0 || row>=rows || column<0 || column>=columns) throw new IndexOutOfBoundsException("slice:"+slice+", row:"+row+", column:"+column);</comment>
      <comment>return elements.get(index(slice,row,column));</comment>
      <comment>manually inlined:</comment>
    </method>
    <javadoc>
      <text>* Returns <tt>true</tt> if both matrices share at least one identical cell.</text>
    </javadoc>
    <method type="boolean" name="haveSharedCellsRaw" startLine="190" endLine="200">
      <scope startLine="191" endLine="194">
        <declaration type="SelectedSparseObjectMatrix3D" name="otherMatrix" />
      </scope>
      <scope startLine="195" endLine="198">
        <declaration type="SparseObjectMatrix3D" name="otherMatrix" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the position of the given coordinate within the (virtual or non-virtual) internal 1-dimensional array.</text>
      <param>slice   the index of the slice-coordinate.</param>
      <param>row   the index of the row-coordinate.</param>
      <param>column   the index of the third-coordinate.</param>
    </javadoc>
    <method type="int" name="index" startLine="208" endLine="212">
      <comment>return _sliceOffset(_sliceRank(slice)) + _rowOffset(_rowRank(row)) + _columnOffset(_columnRank(column));</comment>
      <comment>manually inlined:</comment>
    </method>
    <javadoc>
      <text>* Construct and returns a new empty matrix <i>of the same dynamic type</i> as the receiver, having the specified number of slices, rows and columns.
 * For example, if the receiver is an instance of type <tt>DenseObjectMatrix3D</tt> the new matrix must also be of type <tt>DenseObjectMatrix3D</tt>,
 * if the receiver is an instance of type <tt>SparseObjectMatrix3D</tt> the new matrix must also be of type <tt>SparseObjectMatrix3D</tt>, etc.
 * In general, the new matrix should have internal parametrization as similar as possible.</text>
      <param>slices the number of slices the matrix shall have.</param>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <return>a new empty matrix of the same dynamic type.</return>
    </javadoc>
    <method type="ObjectMatrix3D" name="like" startLine="224" endLine="226" />
    <javadoc>
      <text>* Construct and returns a new 2-d matrix <i>of the corresponding dynamic type</i>, sharing the same cells.
 * For example, if the receiver is an instance of type <tt>DenseObjectMatrix3D</tt> the new matrix must also be of type <tt>DenseObjectMatrix2D</tt>,
 * if the receiver is an instance of type <tt>SparseObjectMatrix3D</tt> the new matrix must also be of type <tt>SparseObjectMatrix2D</tt>, etc.</text>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <param>rowZero the position of the first element.</param>
      <param>columnZero the position of the first element.</param>
      <param>rowStride the number of elements between two rows, i.e. <tt>index(i+1,j)-index(i,j)</tt>.</param>
      <param>columnStride the number of elements between two columns, i.e. <tt>index(i,j+1)-index(i,j)</tt>.</param>
      <return>a new matrix of the corresponding dynamic type.</return>
    </javadoc>
    <method type="ObjectMatrix2D" name="like2D" startLine="240" endLine="242" />
    <javadoc>
      <text>* Sets the matrix cell at coordinate <tt>[slice,row,column]</tt> to the specified value.
 * <p>Provided with invalid parameters this method may access illegal indexes without throwing any exception.
 * <b>You should only use this method when you are absolutely sure that the coordinate is within bounds.</b>
 * Precondition (unchecked): <tt>slice&lt;0 || slice&gt;=slices() || row&lt;0 || row&gt;=rows() || column&lt;0 || column&gt;=column()</tt>.</text>
      <param>slice   the index of the slice-coordinate.</param>
      <param>row   the index of the row-coordinate.</param>
      <param>column   the index of the column-coordinate.</param>
      <param>value the value to be filled into the specified cell.</param>
    </javadoc>
    <method type="void" name="setQuick" startLine="255" endLine="264">
      <declaration type="int" name="index" />
      <comment>if (debug) if (slice<0 || slice>=slices || row<0 || row>=rows || column<0 || column>=columns) throw new IndexOutOfBoundsException("slice:"+slice+", row:"+row+", column:"+column);</comment>
      <comment>int index =	index(slice,row,column);</comment>
      <comment>manually inlined:</comment>
    </method>
    <javadoc>
      <text>* Releases any superfluous memory created by explicitly putting zero values into cells formerly having non-zero values; 
 * An application can use this operation to minimize the
 * storage of the receiver.
 * <p>
 * <b>Background:</b>
 * <p>
 * Cells that <ul>
 * <li>are never set to non-zero values do not use any memory.
 * <li>switch from zero to non-zero state do use memory.
 * <li>switch back from non-zero to zero state also do use memory. However, their memory can be reclaimed by calling <tt>trimToSize()</tt>.
 * </ul>
 * A sequence like <tt>set(s,r,c,5); set(s,r,c,0);</tt>
 * sets a cell to non-zero state and later back to zero state.
 * Such as sequence generates obsolete memory that is automatically reclaimed from time to time or can manually be reclaimed by calling <tt>trimToSize()</tt>.
 * Putting zeros into cells already containing zeros does not generate obsolete memory since no memory was allocated to them in the first place.</text>
    </javadoc>
    <method type="void" name="trimToSize" startLine="282" endLine="284" />
    <javadoc>
      <text>* Construct and returns a new selection view.</text>
      <param>sliceOffsets the offsets of the visible elements.</param>
      <param>rowOffsets the offsets of the visible elements.</param>
      <param>columnOffsets the offsets of the visible elements.</param>
      <return>a new view.</return>
    </javadoc>
    <method type="ObjectMatrix3D" name="viewSelectionLike" startLine="293" endLine="295" />
    <comment>The elements of the matrix.</comment>
  </class>
</source>
