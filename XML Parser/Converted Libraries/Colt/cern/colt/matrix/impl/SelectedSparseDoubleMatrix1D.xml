<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.impl">
  <import name="cern.colt.map.AbstractIntDoubleMap" />
  <import name="cern.colt.matrix.DoubleMatrix1D" />
  <import name="cern.colt.matrix.DoubleMatrix2D" />
  <class name="SelectedSparseDoubleMatrix1D" extends="DoubleMatrix1D" startLine="14">
    <javadoc>
      <text>* Selection view on sparse 1-d matrices holding <tt>double</tt> elements.
 * First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
 * <p>
 * <b>Implementation:</b>
 * <p>
 * Objects of this class are typically constructed via <tt>viewIndexes</tt> methods on some source matrix.
 * The interface introduced in abstract super classes defines everything a user can do.
 * From a user point of view there is nothing special about this class; it presents the same functionality with the same signatures and semantics as its abstract superclass(es) while introducing no additional functionality.
 * Thus, this class need not be visible to users.
 * By the way, the same principle applies to concrete DenseXXX, SparseXXX classes: they presents the same functionality with the same signatures and semantics as abstract superclass(es) while introducing no additional functionality.
 * Thus, they need not be visible to users, either. 
 * Factory methods could hide all these concrete types.
 * <p>
 * This class uses no delegation. 
 * Its instances point directly to the data. 
 * Cell addressing overhead is 1 additional array index access per get/set.
 * <p>
 * Note that this implementation is not synchronized.
 * <p>
 * <b>Memory requirements:</b>
 * <p>
 * <tt>memory [bytes] = 4*indexes.length</tt>.
 * Thus, an index view with 1000 indexes additionally uses 4 KB.
 * <p>
 * <b>Time complexity:</b>
 * <p>
 * Depends on the parent view holding cells.
 * <p></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="AbstractIntDoubleMap" name="elements" />
    <javadoc>
      <text>* The offsets of visible indexes of this matrix.</text>
    </javadoc>
    <declaration type="int[]" name="offsets" />
    <javadoc>
      <text>* The offset.</text>
    </javadoc>
    <declaration type="int" name="offset" />
    <javadoc>
      <text>* Constructs a matrix view with the given parameters.</text>
      <param>size the number of cells the matrix shall have.</param>
      <param>elements the cells.</param>
      <param>zero the index of the first element.</param>
      <param>stride the number of indexes between any two elements, i.e. <tt>index(i+1)-index(i)</tt>.</param>
      <param>offsets   the offsets of the cells that shall be visible.</param>
      <param>offset</param>
    </javadoc>
    <method type="constructor" name="SelectedSparseDoubleMatrix1D" startLine="70" endLine="77" />
    <javadoc>
      <text>* Constructs a matrix view with the given parameters.</text>
      <param>elements the cells.</param>
      <param>indexes   The indexes of the cells that shall be visible.</param>
    </javadoc>
    <method type="constructor" name="SelectedSparseDoubleMatrix1D" startLine="83" endLine="85" />
    <javadoc>
      <text>* Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
 * Default implementation. Override, if necessary.</text>
      <param>rank   the absolute rank of the element.</param>
      <return>the position.</return>
    </javadoc>
    <method type="int" name="_offset" startLine="93" endLine="95" />
    <javadoc>
      <text>* Returns the matrix cell value at coordinate <tt>index</tt>.
 * <p>Provided with invalid parameters this method may return invalid objects without throwing any exception.
 * <b>You should only use this method when you are absolutely sure that the coordinate is within bounds.</b>
 * Precondition (unchecked): <tt>index&lt;0 || index&gt;=size()</tt>.</text>
      <param>index   the index of the cell.</param>
      <return>the value of the specified cell.</return>
    </javadoc>
    <method type="double" name="getQuick" startLine="106" endLine="111">
      <comment>if (debug) if (index<0 || index>=size) checkIndex(index);</comment>
      <comment>return elements.get(index(index));</comment>
      <comment>manually inlined:</comment>
    </method>
    <javadoc>
      <text>* Returns <tt>true</tt> if both matrices share at least one identical cell.</text>
    </javadoc>
    <method type="boolean" name="haveSharedCellsRaw" startLine="115" endLine="125">
      <scope startLine="116" endLine="119">
        <declaration type="SelectedSparseDoubleMatrix1D" name="otherMatrix" />
      </scope>
      <scope startLine="120" endLine="123">
        <declaration type="SparseDoubleMatrix1D" name="otherMatrix" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the position of the element with the given relative rank within the (virtual or non-virtual) internal 1-dimensional array.
 * You may want to override this method for performance.</text>
      <param>rank   the rank of the element.</param>
    </javadoc>
    <method type="int" name="index" startLine="132" endLine="136">
      <comment>return this.offset + super.index(rank);</comment>
      <comment>manually inlined:</comment>
    </method>
    <javadoc>
      <text>* Construct and returns a new empty matrix <i>of the same dynamic type</i> as the receiver, having the specified size.
 * For example, if the receiver is an instance of type <tt>DenseDoubleMatrix1D</tt> the new matrix must also be of type <tt>DenseDoubleMatrix1D</tt>,
 * if the receiver is an instance of type <tt>SparseDoubleMatrix1D</tt> the new matrix must also be of type <tt>SparseDoubleMatrix1D</tt>, etc.
 * In general, the new matrix should have internal parametrization as similar as possible.</text>
      <param>size the number of cell the matrix shall have.</param>
      <return>a new empty matrix of the same dynamic type.</return>
    </javadoc>
    <method type="DoubleMatrix1D" name="like" startLine="146" endLine="148" />
    <javadoc>
      <text>* Construct and returns a new 2-d matrix <i>of the corresponding dynamic type</i>, entirelly independent of the receiver.
 * For example, if the receiver is an instance of type <tt>DenseDoubleMatrix1D</tt> the new matrix must be of type <tt>DenseDoubleMatrix2D</tt>,
 * if the receiver is an instance of type <tt>SparseDoubleMatrix1D</tt> the new matrix must be of type <tt>SparseDoubleMatrix2D</tt>, etc.</text>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <return>a new matrix of the corresponding dynamic type.</return>
    </javadoc>
    <method type="DoubleMatrix2D" name="like2D" startLine="158" endLine="160" />
    <javadoc>
      <text>* Sets the matrix cell at coordinate <tt>index</tt> to the specified value.
 * <p>Provided with invalid parameters this method may access illegal indexes without throwing any exception.
 * <b>You should only use this method when you are absolutely sure that the coordinate is within bounds.</b>
 * Precondition (unchecked): <tt>index&lt;0 || index&gt;=size()</tt>.</text>
      <param>index   the index of the cell.</param>
      <param>value the value to be filled into the specified cell.</param>
    </javadoc>
    <method type="void" name="setQuick" startLine="171" endLine="180">
      <declaration type="int" name="i" />
      <comment>if (debug) if (index<0 || index>=size) checkIndex(index);</comment>
      <comment>int i =	index(index);</comment>
      <comment>manually inlined:</comment>
    </method>
    <javadoc>
      <text>* Sets up a matrix with a given number of cells.</text>
      <param>size the number of cells the matrix shall have.</param>
    </javadoc>
    <method type="void" name="setUp" startLine="185" endLine="189" />
    <javadoc>
      <text>* Construct and returns a new selection view.</text>
      <param>offsets the offsets of the visible elements.</param>
      <return>a new view.</return>
    </javadoc>
    <method type="DoubleMatrix1D" name="viewSelectionLike" startLine="196" endLine="198" />
    <comment>The elements of the matrix.</comment>
  </class>
</source>
