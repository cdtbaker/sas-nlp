<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.impl">
  <class name="AbstractMatrix2D" extends="AbstractMatrix" startLine="11">
    <javadoc>
      <text>* Abstract base class for 2-d matrices holding objects or primitive data types such as <code>int</code>, <code>double</code>, etc.
 * First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
 * <p>
 * <b>Note that this implementation is not synchronized.</b></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <javadoc>
      <text>* the number of colums and rows this matrix (view) has</text>
    </javadoc>
    <declaration type="int" name="columns" />
    <javadoc>
      <text>* the number of elements between two rows, i.e. <tt>index(i+1,j,k) - index(i,j,k)</tt>.</text>
    </javadoc>
    <declaration type="int" name="rowStride" />
    <javadoc>
      <text>* the number of elements between two columns, i.e. <tt>index(i,j+1,k) - index(i,j,k)</tt>.</text>
    </javadoc>
    <declaration type="int" name="columnStride" />
    <javadoc>
      <text>* the index of the first element</text>
    </javadoc>
    <declaration type="int" name="rowZero" />
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="AbstractMatrix2D" startLine="49" endLine="49" />
    <javadoc>
      <text>* Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
 * Default implementation. Override, if necessary.</text>
      <param>rank   the absolute rank of the element.</param>
      <return>the position.</return>
    </javadoc>
    <method type="int" name="_columnOffset" startLine="57" endLine="59" />
    <javadoc>
      <text>* Returns the absolute rank of the given relative rank.</text>
      <param>rank   the relative rank of the element.</param>
      <return>the absolute rank of the element.</return>
    </javadoc>
    <method type="int" name="_columnRank" startLine="66" endLine="70">
      <comment>return columnZero + ((rank+columnFlipMask)^columnFlipMask);</comment>
      <comment>return columnZero + rank*columnFlip;  slower</comment>
    </method>
    <javadoc>
      <text>* Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
 * Default implementation. Override, if necessary.</text>
      <param>rank   the absolute rank of the element.</param>
      <return>the position.</return>
    </javadoc>
    <method type="int" name="_rowOffset" startLine="78" endLine="80" />
    <javadoc>
      <text>* Returns the absolute rank of the given relative rank.</text>
      <param>rank   the relative rank of the element.</param>
      <return>the absolute rank of the element.</return>
    </javadoc>
    <method type="int" name="_rowRank" startLine="87" endLine="91">
      <comment>return rowZero + ((rank+rowFlipMask)^rowFlipMask);</comment>
      <comment>return rowZero + rank*rowFlip;  slower</comment>
    </method>
    <javadoc>
      <text>* Checks whether the receiver contains the given box and throws an exception, if necessary.</text>
      <throws>IndexOutOfBoundsException if <tt>column<0 || width<0 || column+width>columns() || row<0 || height<0 || row+height>rows()</tt></throws>
    </javadoc>
    <method type="void" name="checkBox" startLine="96" endLine="98" />
    <javadoc>
      <text>* Sanity check for operations requiring a column index to be within bounds.</text>
      <throws>IndexOutOfBoundsException if <tt>column < 0 || column >= columns()</tt>.</throws>
    </javadoc>
    <method type="void" name="checkColumn" startLine="103" endLine="105" />
    <javadoc>
      <text>* Checks whether indexes are legal and throws an exception, if necessary.</text>
      <throws>IndexOutOfBoundsException if <tt>! (0 <= indexes[i] < columns())</tt> for any i=0..indexes.length()-1.</throws>
    </javadoc>
    <method type="void" name="checkColumnIndexes" startLine="110" endLine="115">
      <scope startLine="111" endLine="114">
        <declaration type="int" name="index" />
      </scope>
    </method>
    <javadoc>
      <text>* Sanity check for operations requiring a row index to be within bounds.</text>
      <throws>IndexOutOfBoundsException if <tt>row < 0 || row >= rows()</tt>.</throws>
    </javadoc>
    <method type="void" name="checkRow" startLine="120" endLine="122" />
    <javadoc>
      <text>* Checks whether indexes are legal and throws an exception, if necessary.</text>
      <throws>IndexOutOfBoundsException if <tt>! (0 <= indexes[i] < rows())</tt> for any i=0..indexes.length()-1.</throws>
    </javadoc>
    <method type="void" name="checkRowIndexes" startLine="127" endLine="132">
      <scope startLine="128" endLine="131">
        <declaration type="int" name="index" />
      </scope>
    </method>
    <javadoc>
      <text>* Sanity check for operations requiring two matrices with the same number of columns and rows.</text>
      <throws>IllegalArgumentException if <tt>columns() != B.columns() || rows() != B.rows()</tt>.</throws>
    </javadoc>
    <method type="void" name="checkShape" startLine="137" endLine="139" />
    <javadoc>
      <text>* Sanity check for operations requiring matrices with the same number of columns and rows.</text>
      <throws>IllegalArgumentException if <tt>columns() != B.columns() || rows() != B.rows() || columns() != C.columns() || rows() != C.rows()</tt>.</throws>
    </javadoc>
    <method type="void" name="checkShape" startLine="144" endLine="146" />
    <javadoc>
      <text>* Returns the number of columns.</text>
    </javadoc>
    <method type="int" name="columns" startLine="150" endLine="152" />
    <javadoc>
      <text>* Returns the position of the given coordinate within the (virtual or non-virtual) internal 1-dimensional array.</text>
      <param>row   the index of the row-coordinate.</param>
      <param>column   the index of the column-coordinate.</param>
    </javadoc>
    <method type="int" name="index" startLine="159" endLine="161" />
    <javadoc>
      <text>* Returns the number of rows.</text>
    </javadoc>
    <method type="int" name="rows" startLine="165" endLine="167" />
    <javadoc>
      <text>* Sets up a matrix with a given number of rows and columns.</text>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <throws>IllegalArgumentException if <tt>rows<0 || columns<0 || (double)columns*rows > Integer.MAX_VALUE</tt>.</throws>
    </javadoc>
    <method type="void" name="setUp" startLine="174" endLine="176" />
    <javadoc>
      <text>* Sets up a matrix with a given number of rows and columns and the given strides.</text>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <param>rowZero the position of the first element.</param>
      <param>columnZero the position of the first element.</param>
      <param>rowStride the number of elements between two rows, i.e. <tt>index(i+1,j)-index(i,j)</tt>.</param>
      <param>columnStride the number of elements between two columns, i.e. <tt>index(i,j+1)-index(i,j)</tt>.</param>
      <throws>IllegalArgumentException if <tt>rows<0 || columns<0 || (double)columns*rows > Integer.MAX_VALUE</tt> or flip's are illegal.</throws>
    </javadoc>
    <method type="void" name="setUp" startLine="187" endLine="200" />
    <javadoc>
      <text>* Returns the number of cells which is <tt>rows()*columns()</tt>.</text>
    </javadoc>
    <method type="int" name="size" startLine="204" endLine="206" />
    <javadoc>
      <text>* Returns a string representation of the receiver's shape.</text>
    </javadoc>
    <method type="String" name="toStringShort" startLine="210" endLine="212" />
    <javadoc>
      <text>* Self modifying version of viewColumnFlip().</text>
    </javadoc>
    <method type="AbstractMatrix2D" name="vColumnFlip" startLine="216" endLine="223">
      <scope startLine="217" endLine="221" />
    </method>
    <javadoc>
      <text>* Self modifying version of viewDice().</text>
    </javadoc>
    <method type="AbstractMatrix2D" name="vDice" startLine="227" endLine="238">
      <declaration type="int" name="tmp" />
      <comment>swap;</comment>
      <comment>flips stay unaffected</comment>
    </method>
    <javadoc>
      <text>* Self modifying version of viewPart().</text>
      <throws>IndexOutOfBoundsException if <tt>column<0 || width<0 || column+width>columns() || row<0 || height<0 || row+height>rows()</tt></throws>
    </javadoc>
    <method type="AbstractMatrix2D" name="vPart" startLine="243" endLine="251" />
    <javadoc>
      <text>* Self modifying version of viewRowFlip().</text>
    </javadoc>
    <method type="AbstractMatrix2D" name="vRowFlip" startLine="255" endLine="262">
      <scope startLine="256" endLine="260" />
    </method>
    <javadoc>
      <text>* Self modifying version of viewStrides().</text>
      <throws>IndexOutOfBoundsException if <tt>rowStride<=0 || columnStride<=0</tt>.</throws>
    </javadoc>
    <method type="AbstractMatrix2D" name="vStrides" startLine="267" endLine="275" />
    <javadoc>
      <text>* Indicates non-flipped state (flip==1) or flipped state (flip==-1).
 * see _setFlip() for further info.</text>
    </javadoc>
    <comment>protected int rowFlip, columnFlip;</comment>
    <javadoc>
      <text>* Indicates non-flipped state or flipped state.
 * see _setFlip() for further info.</text>
    </javadoc>
    <comment>protected int rowFlipMask, columnFlipMask;</comment>
  </class>
</source>
