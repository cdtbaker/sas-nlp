<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.impl">
  <import name="cern.colt.matrix.ObjectMatrix1D" />
  <import name="cern.colt.matrix.ObjectMatrix2D" />
  <class name="DenseObjectMatrix2D" extends="ObjectMatrix2D" startLine="13">
    <javadoc>
      <text>* Dense 2-d matrix holding <tt>Object</tt> elements.
 * First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
 * <p>
 * <b>Implementation:</b>
 * <p>
 * Internally holds one single contigous one-dimensional array, addressed in row major. 
 * Note that this implementation is not synchronized.
 * <p>
 * <b>Memory requirements:</b>
 * <p>
 * <tt>memory [bytes] = 8*rows()*columns()</tt>.
 * Thus, a 1000*1000 matrix uses 8 MB.
 * <p>
 * <b>Time complexity:</b>
 * <p>
 * <tt>O(1)</tt> (i.e. constant time) for the basic operations
 * <tt>get</tt>, <tt>getQuick</tt>, <tt>set</tt>, <tt>setQuick</tt> and <tt>size</tt>,
 * <p>
 * Cells are internally addressed in row-major.
 * Applications demanding utmost speed can exploit this fact.
 * Setting/getting values in a loop row-by-row is quicker than column-by-column.
 * Thus
 * <pre>
 * for (int row=0; row < rows; row++) {
 * for (int column=0; column < columns; column++) {
 * matrix.setQuick(row,column,someValue);
 * }
 * }
 * </pre>
 * is quicker than
 * <pre>
 * for (int column=0; column < columns; column++) {
 * for (int row=0; row < rows; row++) {
 * matrix.setQuick(row,column,someValue);
 * }
 * }
 * </pre></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <javadoc>
      <text>* The elements of this matrix.
 * elements are stored in row major, i.e.
 * index==row*columns + column
 * columnOf(index)==index%columns
 * rowOf(index)==index/columns
 * i.e. {row0 column0..m}, {row1 column0..m}, ..., {rown column0..m}</text>
    </javadoc>
    <declaration type="Object[]" name="elements" />
    <javadoc>
      <text>* Constructs a matrix with a copy of the given values.
 * <tt>values</tt> is required to have the form <tt>values[row][column]</tt>
 * and have exactly the same number of columns in every row.
 * <p>
 * The values are copied. So subsequent changes in <tt>values</tt> are not reflected in the matrix, and vice-versa.</text>
      <param>values The values to be filled into the new matrix.</param>
      <throws>IllegalArgumentException if <tt>for any 1 &lt;= row &lt; values.length: values[row].length != values[row-1].length</tt>.</throws>
    </javadoc>
    <method type="constructor" name="DenseObjectMatrix2D" startLine="74" endLine="77" />
    <javadoc>
      <text>* Constructs a matrix with a given number of rows and columns.
 * All entries are initially <tt>0</tt>.</text>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <throws>IllegalArgumentException if <tt>rows<0 || columns<0 || (Object)columns*rows > Integer.MAX_VALUE</tt>.</throws>
    </javadoc>
    <method type="constructor" name="DenseObjectMatrix2D" startLine="85" endLine="88" />
    <javadoc>
      <text>* Constructs a view with the given parameters.</text>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <param>elements the cells.</param>
      <param>rowZero the position of the first element.</param>
      <param>columnZero the position of the first element.</param>
      <param>rowStride the number of elements between two rows, i.e. <tt>index(i+1,j)-index(i,j)</tt>.</param>
      <param>columnStride the number of elements between two columns, i.e. <tt>index(i,j+1)-index(i,j)</tt>.</param>
      <throws>IllegalArgumentException if <tt>rows<0 || columns<0 || (Object)columns*rows > Integer.MAX_VALUE</tt> or flip's are illegal.</throws>
    </javadoc>
    <method type="constructor" name="DenseObjectMatrix2D" startLine="100" endLine="104" />
    <javadoc>
      <text>* Sets all cells to the state specified by <tt>values</tt>.
 * <tt>values</tt> is required to have the form <tt>values[row][column]</tt>
 * and have exactly the same number of rows and columns as the receiver.
 * <p>
 * The values are copied. So subsequent changes in <tt>values</tt> are not reflected in the matrix, and vice-versa.</text>
      <param>values the values to be filled into the cells.</param>
      <return><tt>this</tt> (for convenience only).</return>
      <throws>IllegalArgumentException if <tt>values.length != rows() || for any 0 &lt;= row &lt; rows(): values[row].length != columns()</tt>.</throws>
    </javadoc>
    <method type="ObjectMatrix2D" name="assign" startLine="116" endLine="131">
      <scope startLine="117" endLine="126">
        <declaration type="int" name="i" />
        <scope startLine="120" endLine="125">
          <declaration type="Object[]" name="currentRow" />
        </scope>
      </scope>
      <scope startLine="127" endLine="129" />
    </method>
    <javadoc>
      <text>* Assigns the result of a function to each cell; <tt>x[row,col] = function(x[row,col])</tt>.
 * <p>
 * <b>Example:</b>
 * <pre>
 * matrix = 2 x 2 matrix
 * 0.5 1.5      
 * 2.5 3.5
 * // change each cell to its sine
 * matrix.assign(cern.jet.math.Functions.sin);
 * -->
 * 2 x 2 matrix
 * 0.479426  0.997495 
 * 0.598472 -0.350783
 * </pre>
 * For further examples, see the <a href="package-summary.html#FunctionObjects">package doc</a>.</text>
      <param>function a function object taking as argument the current cell's value.</param>
      <return><tt>this</tt> (for convenience only).</return>
      <see>cern.jet.math.Functions</see>
    </javadoc>
    <method type="ObjectMatrix2D" name="assign" startLine="154" endLine="170">
      <declaration type="Object[]" name="elems" />
      <declaration type="int" name="index" />
      <declaration type="int" name="cs" />
      <declaration type="int" name="rs" />
      <scope startLine="162" endLine="168">
        <scope startLine="163" endLine="166" />
      </scope>
      <comment>the general case x[i] = f(x[i])</comment>
    </method>
    <javadoc>
      <text>* Replaces all cell values of the receiver with the values of another matrix.
 * Both matrices must have the same number of rows and columns.
 * If both matrices share the same cells (as is the case if they are views derived from the same matrix) and intersect in an ambiguous way, then replaces <i>as if</i> using an intermediate auxiliary deep copy of <tt>other</tt>.</text>
      <param>source   the source matrix to copy from (may be identical to the receiver).</param>
      <return><tt>this</tt> (for convenience only).</return>
      <throws>IllegalArgumentException if <tt>columns() != source.columns() || rows() != source.rows()</tt></throws>
    </javadoc>
    <method type="ObjectMatrix2D" name="assign" startLine="180" endLine="222">
      <scope startLine="182" endLine="184" />
      <declaration type="DenseObjectMatrix2D" name="other" />
      <scope startLine="189" endLine="192">
        <comment>quickest</comment>
      </scope>
      <scope startLine="194" endLine="200">
        <declaration type="ObjectMatrix2D" name="c" />
        <scope startLine="196" endLine="198" />
        <comment>should not happen</comment>
      </scope>
      <declaration type="Object[]" name="elems" />
      <declaration type="Object[]" name="otherElems" />
      <declaration type="int" name="cs" />
      <declaration type="int" name="ocs" />
      <declaration type="int" name="rs" />
      <declaration type="int" name="ors" />
      <declaration type="int" name="otherIndex" />
      <declaration type="int" name="index" />
      <scope startLine="212" endLine="220">
        <scope startLine="213" endLine="217" />
      </scope>
      <comment>overriden for performance only</comment>
      <comment>nothing to do</comment>
    </method>
    <javadoc>
      <text>* Assigns the result of a function to each cell; <tt>x[row,col] = function(x[row,col],y[row,col])</tt>.
 * <p>
 * <b>Example:</b>
 * <pre>
 * // assign x[row,col] = x[row,col]<sup>y[row,col]</sup>
 * m1 = 2 x 2 matrix 
 * 0 1 
 * 2 3
 * m2 = 2 x 2 matrix 
 * 0 2 
 * 4 6
 * m1.assign(m2, cern.jet.math.Functions.pow);
 * -->
 * m1 == 2 x 2 matrix
 * 1   1 
 * 16 729
 * </pre>
 * For further examples, see the <a href="package-summary.html#FunctionObjects">package doc</a>.</text>
      <param>y the secondary matrix to operate on.</param>
      <param>function a function object taking as first argument the current cell's value of <tt>this</tt>,
 * and as second argument the current cell's value of <tt>y</tt>,</param>
      <return><tt>this</tt> (for convenience only).</return>
      <throws>IllegalArgumentException if <tt>columns() != other.columns() || rows() != other.rows()</tt></throws>
      <see>cern.jet.math.Functions</see>
    </javadoc>
    <method type="ObjectMatrix2D" name="assign" startLine="252" endLine="282">
      <scope startLine="254" endLine="256" />
      <declaration type="DenseObjectMatrix2D" name="other" />
      <declaration type="Object[]" name="elems" />
      <declaration type="Object[]" name="otherElems" />
      <declaration type="int" name="cs" />
      <declaration type="int" name="ocs" />
      <declaration type="int" name="rs" />
      <declaration type="int" name="ors" />
      <declaration type="int" name="otherIndex" />
      <declaration type="int" name="index" />
      <scope startLine="272" endLine="280">
        <scope startLine="273" endLine="277" />
      </scope>
      <comment>overriden for performance only</comment>
      <comment>the general case x[i] = f(x[i],y[i])</comment>
    </method>
    <javadoc>
      <text>* Returns the matrix cell value at coordinate <tt>[row,column]</tt>.
 * <p>Provided with invalid parameters this method may return invalid objects without throwing any exception.
 * <b>You should only use this method when you are absolutely sure that the coordinate is within bounds.</b>
 * Precondition (unchecked): <tt>0 &lt;= column &lt; columns() && 0 &lt;= row &lt; rows()</tt>.</text>
      <param>row   the index of the row-coordinate.</param>
      <param>column   the index of the column-coordinate.</param>
      <return>the value at the specified coordinate.</return>
    </javadoc>
    <method type="Object" name="getQuick" startLine="294" endLine="299">
      <comment>if (debug) if (column<0 || column>=columns || row<0 || row>=rows) throw new IndexOutOfBoundsException("row:"+row+", column:"+column);</comment>
      <comment>return elements[index(row,column)];</comment>
      <comment>manually inlined:</comment>
    </method>
    <javadoc>
      <text>* Returns <tt>true</tt> if both matrices share common cells.
 * More formally, returns <tt>true</tt> if <tt>other != null</tt> and at least one of the following conditions is met
 * <ul>
 * <li>the receiver is a view of the other matrix
 * <li>the other matrix is a view of the receiver
 * <li><tt>this == other</tt>
 * </ul></text>
    </javadoc>
    <method type="boolean" name="haveSharedCellsRaw" startLine="309" endLine="319">
      <scope startLine="310" endLine="313">
        <declaration type="SelectedDenseObjectMatrix2D" name="otherMatrix" />
      </scope>
      <scope startLine="314" endLine="317">
        <declaration type="DenseObjectMatrix2D" name="otherMatrix" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the position of the given coordinate within the (virtual or non-virtual) internal 1-dimensional array.</text>
      <param>row   the index of the row-coordinate.</param>
      <param>column   the index of the column-coordinate.</param>
    </javadoc>
    <method type="int" name="index" startLine="326" endLine="330">
      <comment>return super.index(row,column);</comment>
      <comment>manually inlined for speed:</comment>
    </method>
    <javadoc>
      <text>* Construct and returns a new empty matrix <i>of the same dynamic type</i> as the receiver, having the specified number of rows and columns.
 * For example, if the receiver is an instance of type <tt>DenseObjectMatrix2D</tt> the new matrix must also be of type <tt>DenseObjectMatrix2D</tt>,
 * if the receiver is an instance of type <tt>SparseObjectMatrix2D</tt> the new matrix must also be of type <tt>SparseObjectMatrix2D</tt>, etc.
 * In general, the new matrix should have internal parametrization as similar as possible.</text>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <return>a new empty matrix of the same dynamic type.</return>
    </javadoc>
    <method type="ObjectMatrix2D" name="like" startLine="341" endLine="343" />
    <javadoc>
      <text>* Construct and returns a new 1-d matrix <i>of the corresponding dynamic type</i>, entirelly independent of the receiver.
 * For example, if the receiver is an instance of type <tt>DenseObjectMatrix2D</tt> the new matrix must be of type <tt>DenseObjectMatrix1D</tt>,
 * if the receiver is an instance of type <tt>SparseObjectMatrix2D</tt> the new matrix must be of type <tt>SparseObjectMatrix1D</tt>, etc.</text>
      <param>size the number of cells the matrix shall have.</param>
      <return>a new matrix of the corresponding dynamic type.</return>
    </javadoc>
    <method type="ObjectMatrix1D" name="like1D" startLine="352" endLine="354" />
    <javadoc>
      <text>* Construct and returns a new 1-d matrix <i>of the corresponding dynamic type</i>, sharing the same cells.
 * For example, if the receiver is an instance of type <tt>DenseObjectMatrix2D</tt> the new matrix must be of type <tt>DenseObjectMatrix1D</tt>,
 * if the receiver is an instance of type <tt>SparseObjectMatrix2D</tt> the new matrix must be of type <tt>SparseObjectMatrix1D</tt>, etc.</text>
      <param>size the number of cells the matrix shall have.</param>
      <param>zero the index of the first element.</param>
      <param>stride the number of indexes between any two elements, i.e. <tt>index(i+1)-index(i)</tt>.</param>
      <return>a new matrix of the corresponding dynamic type.</return>
    </javadoc>
    <method type="ObjectMatrix1D" name="like1D" startLine="365" endLine="367" />
    <javadoc>
      <text>* Sets the matrix cell at coordinate <tt>[row,column]</tt> to the specified value.
 * <p>Provided with invalid parameters this method may access illegal indexes without throwing any exception.
 * <b>You should only use this method when you are absolutely sure that the coordinate is within bounds.</b>
 * Precondition (unchecked): <tt>0 &lt;= column &lt; columns() && 0 &lt;= row &lt; rows()</tt>.</text>
      <param>row   the index of the row-coordinate.</param>
      <param>column   the index of the column-coordinate.</param>
      <param>value the value to be filled into the specified cell.</param>
    </javadoc>
    <method type="void" name="setQuick" startLine="379" endLine="384">
      <comment>if (debug) if (column<0 || column>=columns || row<0 || row>=rows) throw new IndexOutOfBoundsException("row:"+row+", column:"+column);</comment>
      <comment>elements[index(row,column)] = value;</comment>
      <comment>manually inlined:</comment>
    </method>
    <javadoc>
      <text>* Construct and returns a new selection view.</text>
      <param>rowOffsets the offsets of the visible elements.</param>
      <param>columnOffsets the offsets of the visible elements.</param>
      <return>a new view.</return>
    </javadoc>
    <method type="ObjectMatrix2D" name="viewSelectionLike" startLine="392" endLine="394" />
  </class>
</source>
