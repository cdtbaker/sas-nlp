<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.impl">
  <import name="cern.colt.list.DoubleArrayList" />
  <import name="cern.colt.list.IntArrayList" />
  <import name="cern.colt.matrix.DoubleMatrix1D" />
  <import name="cern.colt.matrix.DoubleMatrix2D" />
  <class name="RCMDoubleMatrix2D" extends="WrapperDoubleMatrix2D" startLine="15">
    <javadoc>
      <text>* Sparse row-compressed-modified 2-d matrix holding <tt>double</tt> elements.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>0.9, 04/14/2000</version>
    </javadoc>
    <declaration type="IntArrayList[]" name="indexes" />
    <declaration type="DoubleArrayList[]" name="values" />
    <javadoc>
      <text>* Constructs a matrix with a copy of the given values.
 * <tt>values</tt> is required to have the form <tt>values[row][column]</tt>
 * and have exactly the same number of columns in every row.
 * <p>
 * The values are copied. So subsequent changes in <tt>values</tt> are not reflected in the matrix, and vice-versa.</text>
      <param>values The values to be filled into the new matrix.</param>
      <throws>IllegalArgumentException if <tt>for any 1 &lt;= row &lt; values.length: values[row].length != values[row-1].length</tt>.</throws>
    </javadoc>
    <method type="constructor" name="RCMDoubleMatrix2D" startLine="36" endLine="39" />
    <javadoc>
      <text>* Constructs a matrix with a given number of rows and columns.
 * All entries are initially <tt>0</tt>.</text>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <throws>IllegalArgumentException if <tt>rows<0 || columns<0 || (double)columns*rows > Integer.MAX_VALUE</tt>.</throws>
    </javadoc>
    <method type="constructor" name="RCMDoubleMatrix2D" startLine="47" endLine="52" />
    <javadoc>
      <text>* Sets all cells to the state specified by <tt>value</tt>.</text>
      <param>value the value to be filled into the cells.</param>
      <return><tt>this</tt> (for convenience only).</return>
    </javadoc>
    <method type="DoubleMatrix2D" name="assign" startLine="58" endLine="68">
      <scope startLine="60" endLine="65">
        <scope startLine="61" endLine="64" />
      </scope>
      <comment>overriden for performance only</comment>
    </method>
    <javadoc>
      <text>* Returns the content of this matrix if it is a wrapper; or <tt>this</tt> otherwise.
 * Override this method in wrappers.</text>
    </javadoc>
    <method type="DoubleMatrix2D" name="getContent" startLine="73" endLine="75" />
    <javadoc>
      <text>* Returns the matrix cell value at coordinate <tt>[row,column]</tt>.
 * <p>Provided with invalid parameters this method may return invalid objects without throwing any exception.
 * <b>You should only use this method when you are absolutely sure that the coordinate is within bounds.</b>
 * Precondition (unchecked): <tt>0 &lt;= column &lt; columns() && 0 &lt;= row &lt; rows()</tt>.</text>
      <param>row   the index of the row-coordinate.</param>
      <param>column   the index of the column-coordinate.</param>
      <return>the value at the specified coordinate.</return>
    </javadoc>
    <method type="double" name="getQuick" startLine="87" endLine="92">
      <declaration type="int" name="k" />
    </method>
    <javadoc>
      <text>* Construct and returns a new empty matrix <i>of the same dynamic type</i> as the receiver, having the specified number of rows and columns.
 * For example, if the receiver is an instance of type <tt>DenseDoubleMatrix2D</tt> the new matrix must also be of type <tt>DenseDoubleMatrix2D</tt>,
 * if the receiver is an instance of type <tt>SparseDoubleMatrix2D</tt> the new matrix must also be of type <tt>SparseDoubleMatrix2D</tt>, etc.
 * In general, the new matrix should have internal parametrization as similar as possible.</text>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <return>a new empty matrix of the same dynamic type.</return>
    </javadoc>
    <method type="DoubleMatrix2D" name="like" startLine="103" endLine="105" />
    <javadoc>
      <text>* Construct and returns a new 1-d matrix <i>of the corresponding dynamic type</i>, entirelly independent of the receiver.
 * For example, if the receiver is an instance of type <tt>DenseDoubleMatrix2D</tt> the new matrix must be of type <tt>DenseDoubleMatrix1D</tt>,
 * if the receiver is an instance of type <tt>SparseDoubleMatrix2D</tt> the new matrix must be of type <tt>SparseDoubleMatrix1D</tt>, etc.</text>
      <param>size the number of cells the matrix shall have.</param>
      <return>a new matrix of the corresponding dynamic type.</return>
    </javadoc>
    <method type="DoubleMatrix1D" name="like1D" startLine="114" endLine="116" />
    <javadoc>
      <text>* Sets the matrix cell at coordinate <tt>[row,column]</tt> to the specified value.
 * <p>Provided with invalid parameters this method may access illegal indexes without throwing any exception.
 * <b>You should only use this method when you are absolutely sure that the coordinate is within bounds.</b>
 * Precondition (unchecked): <tt>0 &lt;= column &lt; columns() && 0 &lt;= row &lt; rows()</tt>.</text>
      <param>row   the index of the row-coordinate.</param>
      <param>column   the index of the column-coordinate.</param>
      <param>value the value to be filled into the specified cell.</param>
    </javadoc>
    <method type="void" name="setQuick" startLine="128" endLine="168">
      <declaration type="int" name="i" />
      <declaration type="int" name="j" />
      <declaration type="int" name="k" />
      <declaration type="IntArrayList" name="indexList" />
      <scope startLine="136" endLine="155">
        <scope startLine="137" endLine="151">
          <declaration type="DoubleArrayList" name="valueList" />
          <declaration type="int" name="s" />
          <scope startLine="142" endLine="150" />
        </scope>
        <scope startLine="152" endLine="154" />
        <comment>found</comment>
      </scope>
      <scope startLine="156" endLine="167">
        <scope startLine="161" endLine="164" />
        <comment>not found</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Linear algebraic matrix-vector multiplication; <tt>z = A * y</tt>.
 * <tt>z[i] = alpha*Sum(A[i,j] * y[j]) + beta*z[i], i=0..A.rows()-1, j=0..y.size()-1</tt>.
 * Where <tt>A == this</tt>.</text>
      <param>y the source vector.</param>
      <param>z the vector where results are to be stored.</param>
      <throws>IllegalArgumentException if <tt>A.columns() != y.size() || A.rows() > z.size())</tt>.</throws>
    </javadoc>
    <method type="void" name="zMult" startLine="178" endLine="194">
      <scope startLine="183" endLine="191">
        <scope startLine="184" endLine="190">
          <scope startLine="185" endLine="189">
            <declaration type="int" name="j" />
            <declaration type="double" name="value" />
          </scope>
        </scope>
      </scope>
    </method>
    <comment>The elements of the matrix.</comment>
  </class>
</source>
