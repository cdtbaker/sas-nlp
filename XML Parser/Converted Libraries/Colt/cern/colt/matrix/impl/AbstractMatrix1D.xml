<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.impl">
  <class name="AbstractMatrix1D" extends="AbstractMatrix" startLine="11">
    <javadoc>
      <text>* Abstract base class for 1-d matrices (aka <i>vectors</i>) holding objects or primitive data types such as <code>int</code>, <code>double</code>, etc.
 * First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
 * <p>
 * <b>Note that this implementation is not synchronized.</b></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <javadoc>
      <text>* the number of cells this matrix (view) has</text>
    </javadoc>
    <declaration type="int" name="size" />
    <javadoc>
      <text>* the index of the first element</text>
    </javadoc>
    <declaration type="int" name="zero" />
    <javadoc>
      <text>* the number of indexes between any two elements, i.e. <tt>index(i+1) - index(i)</tt>.</text>
    </javadoc>
    <declaration type="int" name="stride" />
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="AbstractMatrix1D" startLine="47" endLine="47" />
    <javadoc>
      <text>* Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
 * Default implementation. Override, if necessary.</text>
      <param>rank   the absolute rank of the element.</param>
      <return>the position.</return>
    </javadoc>
    <method type="int" name="_offset" startLine="55" endLine="57" />
    <javadoc>
      <text>* Returns the absolute rank of the given relative rank.</text>
      <param>rank   the relative rank of the element.</param>
      <return>the absolute rank of the element.</return>
    </javadoc>
    <method type="int" name="_rank" startLine="64" endLine="68">
      <comment>return zero + ((rank+flipMask)^flipMask);</comment>
      <comment>return zero + rank*flip;  slower</comment>
    </method>
    <javadoc>
      <text>* Sanity check for operations requiring an index to be within bounds.</text>
      <throws>IndexOutOfBoundsException if <tt>index < 0 || index >= size()</tt>.</throws>
    </javadoc>
    <method type="void" name="checkIndex" startLine="73" endLine="75" />
    <javadoc>
      <text>* Checks whether indexes are legal and throws an exception, if necessary.</text>
      <throws>IndexOutOfBoundsException if <tt>! (0 <= indexes[i] < size())</tt> for any i=0..indexes.length()-1.</throws>
    </javadoc>
    <method type="void" name="checkIndexes" startLine="80" endLine="85">
      <scope startLine="81" endLine="84">
        <declaration type="int" name="index" />
      </scope>
    </method>
    <javadoc>
      <text>* Checks whether the receiver contains the given range and throws an exception, if necessary.</text>
      <throws>IndexOutOfBoundsException if <tt>index<0 || index+width>size()</tt>.</throws>
    </javadoc>
    <method type="void" name="checkRange" startLine="90" endLine="93" />
    <javadoc>
      <text>* Sanity check for operations requiring two matrices with the same size.</text>
      <throws>IllegalArgumentException if <tt>size() != B.size()</tt>.</throws>
    </javadoc>
    <method type="void" name="checkSize" startLine="98" endLine="100" />
    <javadoc>
      <text>* Sanity check for operations requiring two matrices with the same size.</text>
      <throws>IllegalArgumentException if <tt>size() != B.size()</tt>.</throws>
    </javadoc>
    <method type="void" name="checkSize" startLine="105" endLine="107" />
    <javadoc>
      <text>* Returns the position of the element with the given relative rank within the (virtual or non-virtual) internal 1-dimensional array.
 * You may want to override this method for performance.</text>
      <param>rank   the rank of the element.</param>
    </javadoc>
    <method type="int" name="index" startLine="114" endLine="116" />
    <javadoc>
      <text>* Sets up a matrix with a given number of cells.</text>
      <param>size the number of cells the matrix shall have.</param>
      <throws>IllegalArgumentException if <tt>size<0</tt>.</throws>
    </javadoc>
    <method type="void" name="setUp" startLine="122" endLine="124" />
    <javadoc>
      <text>* Sets up a matrix with the given parameters.</text>
      <param>size the number of elements the matrix shall have.</param>
      <param>zero the index of the first element.</param>
      <param>stride the number of indexes between any two elements, i.e. <tt>index(i+1)-index(i)</tt>.</param>
      <throws>IllegalArgumentException if <tt>size<0</tt>.</throws>
    </javadoc>
    <method type="void" name="setUp" startLine="132" endLine="139" />
    <javadoc>
      <text>* Returns the number of cells.</text>
    </javadoc>
    <method type="int" name="size" startLine="143" endLine="145" />
    <javadoc>
      <text>* Returns the stride of the given dimension (axis, rank).</text>
      <dimension>the index of the dimension.</dimension>
      <return>the stride in the given dimension.</return>
      <throws>IllegalArgumentException if <tt>dimension != 0</tt>.</throws>
    </javadoc>
    <method type="int" name="stride" startLine="153" endLine="156" />
    <javadoc>
      <text>* Returns a string representation of the receiver's shape.</text>
    </javadoc>
    <method type="String" name="toStringShort" startLine="160" endLine="162" />
    <javadoc>
      <text>* Self modifying version of viewFlip().
 * What used to be index <tt>0</tt> is now index <tt>size()-1</tt>, ..., what used to be index <tt>size()-1</tt> is now index <tt>0</tt>.</text>
    </javadoc>
    <method type="AbstractMatrix1D" name="vFlip" startLine="167" endLine="174">
      <scope startLine="168" endLine="172" />
    </method>
    <javadoc>
      <text>* Self modifying version of viewPart().</text>
      <throws>IndexOutOfBoundsException if <tt>index<0 || index+width>size()</tt>.</throws>
    </javadoc>
    <method type="AbstractMatrix1D" name="vPart" startLine="179" endLine="185" />
    <javadoc>
      <text>* Self modifying version of viewStrides().</text>
      <throws>IndexOutOfBoundsException if <tt>stride <= 0</tt>.</throws>
    </javadoc>
    <method type="AbstractMatrix1D" name="vStrides" startLine="190" endLine="196" />
    <javadoc>
      <text>* Indicates non-flipped state (flip==1) or flipped state (flip==-1).
 * see _setFlip() for further info.</text>
    </javadoc>
    <comment>protected int flip;</comment>
    <javadoc>
      <text>* Indicates non-flipped state or flipped state.
 * see _setFlip() for further info.</text>
    </javadoc>
    <comment>protected int flipMask;</comment>
    <comment>this.isNoView implies: offset==0, stride==1</comment>
  </class>
</source>
