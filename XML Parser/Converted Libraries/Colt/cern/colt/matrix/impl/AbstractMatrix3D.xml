<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.impl">
  <class name="AbstractMatrix3D" extends="AbstractMatrix" startLine="11">
    <javadoc>
      <text>* Abstract base class for 3-d matrices holding objects or primitive data types such as <code>int</code>, <code>double</code>, etc.
 * First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
 * <p>
 * <b>Note that this implementation is not synchronized.</b></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <javadoc>
      <text>* the number of slices this matrix (view) has</text>
    </javadoc>
    <declaration type="int" name="slices" />
    <javadoc>
      <text>* the number of rows this matrix (view) has</text>
    </javadoc>
    <declaration type="int" name="rows" />
    <javadoc>
      <text>* the number of columns this matrix (view) has</text>
    </javadoc>
    <declaration type="int" name="columns" />
    <javadoc>
      <text>* the number of elements between two slices, i.e. <tt>index(k+1,i,j) - index(k,i,j)</tt>.</text>
    </javadoc>
    <declaration type="int" name="sliceStride" />
    <javadoc>
      <text>* the number of elements between two rows, i.e. <tt>index(k,i+1,j) - index(k,i,j)</tt>.</text>
    </javadoc>
    <declaration type="int" name="rowStride" />
    <javadoc>
      <text>* the number of elements between two columns, i.e. <tt>index(k,i,j+1) - index(k,i,j)</tt>.</text>
    </javadoc>
    <declaration type="int" name="columnStride" />
    <javadoc>
      <text>* the index of the first element</text>
    </javadoc>
    <declaration type="int" name="sliceZero" />
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="AbstractMatrix3D" startLine="46" endLine="46" />
    <javadoc>
      <text>* Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
 * Default implementation. Override, if necessary.</text>
      <param>rank   the absolute rank of the element.</param>
      <return>the position.</return>
    </javadoc>
    <method type="int" name="_columnOffset" startLine="54" endLine="56" />
    <javadoc>
      <text>* Returns the absolute rank of the given relative rank.</text>
      <param>rank   the relative rank of the element.</param>
      <return>the absolute rank of the element.</return>
    </javadoc>
    <method type="int" name="_columnRank" startLine="63" endLine="65" />
    <javadoc>
      <text>* Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
 * Default implementation. Override, if necessary.</text>
      <param>rank   the absolute rank of the element.</param>
      <return>the position.</return>
    </javadoc>
    <method type="int" name="_rowOffset" startLine="73" endLine="75" />
    <javadoc>
      <text>* Returns the absolute rank of the given relative rank.</text>
      <param>rank   the relative rank of the element.</param>
      <return>the absolute rank of the element.</return>
    </javadoc>
    <method type="int" name="_rowRank" startLine="82" endLine="84" />
    <javadoc>
      <text>* Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
 * Default implementation. Override, if necessary.</text>
      <param>rank   the absolute rank of the element.</param>
      <return>the position.</return>
    </javadoc>
    <method type="int" name="_sliceOffset" startLine="92" endLine="94" />
    <javadoc>
      <text>* Returns the absolute rank of the given relative rank.</text>
      <param>rank   the relative rank of the element.</param>
      <return>the absolute rank of the element.</return>
    </javadoc>
    <method type="int" name="_sliceRank" startLine="101" endLine="103" />
    <javadoc>
      <text>* Checks whether the receiver contains the given box and throws an exception, if necessary.</text>
      <throws>IndexOutOfBoundsException if <tt>row<0 || height<0 || row+height>rows || slice<0 || depth<0 || slice+depth>slices  || column<0 || width<0 || column+width>columns</tt></throws>
    </javadoc>
    <method type="void" name="checkBox" startLine="108" endLine="110" />
    <javadoc>
      <text>* Sanity check for operations requiring a column index to be within bounds.</text>
      <throws>IndexOutOfBoundsException if <tt>column < 0 || column >= columns()</tt>.</throws>
    </javadoc>
    <method type="void" name="checkColumn" startLine="115" endLine="117" />
    <javadoc>
      <text>* Checks whether indexes are legal and throws an exception, if necessary.</text>
      <throws>IndexOutOfBoundsException if <tt>! (0 <= indexes[i] < columns())</tt> for any i=0..indexes.length()-1.</throws>
    </javadoc>
    <method type="void" name="checkColumnIndexes" startLine="122" endLine="127">
      <scope startLine="123" endLine="126">
        <declaration type="int" name="index" />
      </scope>
    </method>
    <javadoc>
      <text>* Sanity check for operations requiring a row index to be within bounds.</text>
      <throws>IndexOutOfBoundsException if <tt>row < 0 || row >= rows()</tt>.</throws>
    </javadoc>
    <method type="void" name="checkRow" startLine="132" endLine="134" />
    <javadoc>
      <text>* Checks whether indexes are legal and throws an exception, if necessary.</text>
      <throws>IndexOutOfBoundsException if <tt>! (0 <= indexes[i] < rows())</tt> for any i=0..indexes.length()-1.</throws>
    </javadoc>
    <method type="void" name="checkRowIndexes" startLine="139" endLine="144">
      <scope startLine="140" endLine="143">
        <declaration type="int" name="index" />
      </scope>
    </method>
    <javadoc>
      <text>* Sanity check for operations requiring two matrices with the same number of slices, rows and columns.</text>
      <throws>IllegalArgumentException if <tt>slices() != B.slices() || rows() != B.rows() || columns() != B.columns()</tt>.</throws>
    </javadoc>
    <method type="void" name="checkShape" startLine="149" endLine="151" />
    <javadoc>
      <text>* Sanity check for operations requiring matrices with the same number of slices, rows and columns.</text>
      <throws>IllegalArgumentException if <tt>slices() != B.slices() || rows() != B.rows() || columns() != B.columns() || slices() != C.slices() || rows() != C.rows() || columns() != C.columns()</tt>.</throws>
    </javadoc>
    <method type="void" name="checkShape" startLine="156" endLine="158" />
    <javadoc>
      <text>* Sanity check for operations requiring a slice index to be within bounds.</text>
      <throws>IndexOutOfBoundsException if <tt>slice < 0 || slice >= slices()</tt>.</throws>
    </javadoc>
    <method type="void" name="checkSlice" startLine="163" endLine="165" />
    <javadoc>
      <text>* Checks whether indexes are legal and throws an exception, if necessary.</text>
      <throws>IndexOutOfBoundsException if <tt>! (0 <= indexes[i] < slices())</tt> for any i=0..indexes.length()-1.</throws>
    </javadoc>
    <method type="void" name="checkSliceIndexes" startLine="170" endLine="175">
      <scope startLine="171" endLine="174">
        <declaration type="int" name="index" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the number of columns.</text>
    </javadoc>
    <method type="int" name="columns" startLine="179" endLine="181" />
    <javadoc>
      <text>* Returns the position of the given coordinate within the (virtual or non-virtual) internal 1-dimensional array.</text>
      <param>slice   the index of the slice-coordinate.</param>
      <param>row   the index of the row-coordinate.</param>
      <param>column   the index of the third-coordinate.</param>
    </javadoc>
    <method type="int" name="index" startLine="189" endLine="191" />
    <javadoc>
      <text>* Returns the number of rows.</text>
    </javadoc>
    <method type="int" name="rows" startLine="195" endLine="197" />
    <javadoc>
      <text>* Sets up a matrix with a given number of slices and rows.</text>
      <param>slices the number of slices the matrix shall have.</param>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <throws>IllegalArgumentException if <tt>(double)rows*slices > Integer.MAX_VALUE</tt>.</throws>
      <throws>IllegalArgumentException if <tt>slices<0 || rows<0 || columns<0</tt>.</throws>
    </javadoc>
    <method type="void" name="setUp" startLine="206" endLine="208" />
    <javadoc>
      <text>* Sets up a matrix with a given number of slices and rows and the given strides.</text>
      <param>slices the number of slices the matrix shall have.</param>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <param>sliceZero the position of the first element.</param>
      <param>rowZero the position of the first element.</param>
      <param>columnZero the position of the first element.</param>
      <param>sliceStride the number of elements between two slices, i.e. <tt>index(k+1,i,j)-index(k,i,j)</tt>.</param>
      <param>rowStride the number of elements between two rows, i.e. <tt>index(k,i+1,j)-index(k,i,j)</tt>.</param>
      <param>columnnStride the number of elements between two columns, i.e. <tt>index(k,i,j+1)-index(k,i,j)</tt>.</param>
      <throws>IllegalArgumentException if <tt>(double)slices*rows*columnss > Integer.MAX_VALUE</tt>.</throws>
      <throws>IllegalArgumentException if <tt>slices<0 || rows<0 || columns<0</tt>.</throws>
    </javadoc>
    <method type="void" name="setUp" startLine="223" endLine="240" />
    <method type="int[]" name="shape" startLine="241" endLine="247">
      <declaration type="int[]" name="shape" />
    </method>
    <javadoc>
      <text>* Returns the number of cells which is <tt>slices()*rows()*columns()</tt>.</text>
    </javadoc>
    <method type="int" name="size" startLine="251" endLine="253" />
    <javadoc>
      <text>* Returns the number of slices.</text>
    </javadoc>
    <method type="int" name="slices" startLine="257" endLine="259" />
    <javadoc>
      <text>* Returns a string representation of the receiver's shape.</text>
    </javadoc>
    <method type="String" name="toStringShort" startLine="263" endLine="265" />
    <javadoc>
      <text>* Self modifying version of viewColumnFlip().</text>
    </javadoc>
    <method type="AbstractMatrix3D" name="vColumnFlip" startLine="269" endLine="276">
      <scope startLine="270" endLine="274" />
    </method>
    <javadoc>
      <text>* Self modifying version of viewDice().</text>
      <throws>IllegalArgumentException if some of the parameters are equal or not in range 0..2.</throws>
    </javadoc>
    <method type="AbstractMatrix3D" name="vDice" startLine="281" endLine="307">
      <declaration type="int" name="d" />
      <scope startLine="284" endLine="286" />
      <declaration type="int[]" name="shape" />
      <declaration type="int[]" name="strides" />
      <comment>swap shape</comment>
      <comment>swap strides</comment>
    </method>
    <javadoc>
      <text>* Self modifying version of viewPart().</text>
      <throws>IndexOutOfBoundsException if <tt>slice<0 || depth<0 || slice+depth>slices() || row<0 || height<0 || row+height>rows() || column<0 || width<0 || column+width>columns()</tt></throws>
    </javadoc>
    <method type="AbstractMatrix3D" name="vPart" startLine="312" endLine="325" />
    <javadoc>
      <text>* Self modifying version of viewRowFlip().</text>
    </javadoc>
    <method type="AbstractMatrix3D" name="vRowFlip" startLine="329" endLine="336">
      <scope startLine="330" endLine="334" />
    </method>
    <javadoc>
      <text>* Self modifying version of viewSliceFlip().</text>
    </javadoc>
    <method type="AbstractMatrix3D" name="vSliceFlip" startLine="340" endLine="347">
      <scope startLine="341" endLine="345" />
    </method>
    <javadoc>
      <text>* Self modifying version of viewStrides().</text>
      <throws>IndexOutOfBoundsException if <tt>sliceStride<=0 || rowStride<=0 || columnStride<=0</tt>.</throws>
    </javadoc>
    <method type="AbstractMatrix3D" name="vStrides" startLine="352" endLine="365" />
    <comment>this.isNoView implies: offset==0, sliceStride==rows*slices, rowStride==columns, columnStride==1</comment>
  </class>
</source>
