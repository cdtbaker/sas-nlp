<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.impl">
  <import name="cern.colt.matrix.DoubleMatrix1D" />
  <import name="cern.colt.matrix.DoubleMatrix2D" />
  <class name="SelectedDenseDoubleMatrix2D" extends="DoubleMatrix2D" startLine="13">
    <javadoc>
      <text>* Selection view on dense 2-d matrices holding <tt>double</tt> elements.
 * First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.
 * <p>
 * <b>Implementation:</b>
 * <p>
 * Objects of this class are typically constructed via <tt>viewIndexes</tt> methods on some source matrix.
 * The interface introduced in abstract super classes defines everything a user can do.
 * From a user point of view there is nothing special about this class; it presents the same functionality with the same signatures and semantics as its abstract superclass(es) while introducing no additional functionality.
 * Thus, this class need not be visible to users.
 * By the way, the same principle applies to concrete DenseXXX and SparseXXX classes: they presents the same functionality with the same signatures and semantics as abstract superclass(es) while introducing no additional functionality.
 * Thus, they need not be visible to users, either. 
 * Factory methods could hide all these concrete types.
 * <p>
 * This class uses no delegation. 
 * Its instances point directly to the data. 
 * Cell addressing overhead is 1 additional int addition and 2 additional array index accesses per get/set.
 * <p>
 * Note that this implementation is not synchronized.
 * <p>
 * <b>Memory requirements:</b>
 * <p>
 * <tt>memory [bytes] = 4*(rowIndexes.length+columnIndexes.length)</tt>.
 * Thus, an index view with 1000 x 1000 indexes additionally uses 8 KB.
 * <p>
 * <b>Time complexity:</b>
 * <p>
 * Depends on the parent view holding cells.
 * <p></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <javadoc>
      <text>* The elements of this matrix.</text>
    </javadoc>
    <declaration type="double[]" name="elements" />
    <javadoc>
      <text>* The offsets of the visible cells of this matrix.</text>
    </javadoc>
    <declaration type="int[]" name="rowOffsets" />
    <declaration type="int[]" name="columnOffsets" />
    <javadoc>
      <text>* The offset.</text>
    </javadoc>
    <declaration type="int" name="offset" />
    <javadoc>
      <text>* Constructs a matrix view with the given parameters.</text>
      <param>elements the cells.</param>
      <param>rowOffsets   The row offsets of the cells that shall be visible.</param>
      <param>columnOffsets   The column offsets of the cells that shall be visible.</param>
      <param>offset</param>
    </javadoc>
    <method type="constructor" name="SelectedDenseDoubleMatrix2D" startLine="68" endLine="70" />
    <javadoc>
      <text>* Constructs a matrix view with the given parameters.</text>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <param>elements the cells.</param>
      <param>rowZero the position of the first element.</param>
      <param>columnZero the position of the first element.</param>
      <param>rowStride the number of elements between two rows, i.e. <tt>index(i+1,j)-index(i,j)</tt>.</param>
      <param>columnStride the number of elements between two columns, i.e. <tt>index(i,j+1)-index(i,j)</tt>.</param>
      <param>rowOffsets   The row offsets of the cells that shall be visible.</param>
      <param>columnOffsets   The column offsets of the cells that shall be visible.</param>
      <param>offset</param>
    </javadoc>
    <method type="constructor" name="SelectedDenseDoubleMatrix2D" startLine="84" endLine="94">
      <comment>be sure parameters are valid, we do not check...</comment>
    </method>
    <javadoc>
      <text>* Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
 * Default implementation. Override, if necessary.</text>
      <param>rank   the absolute rank of the element.</param>
      <return>the position.</return>
    </javadoc>
    <method type="int" name="_columnOffset" startLine="102" endLine="104" />
    <javadoc>
      <text>* Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
 * Default implementation. Override, if necessary.</text>
      <param>rank   the absolute rank of the element.</param>
      <return>the position.</return>
    </javadoc>
    <method type="int" name="_rowOffset" startLine="112" endLine="114" />
    <javadoc>
      <text>* Returns the matrix cell value at coordinate <tt>[row,column]</tt>.
 * <p>Provided with invalid parameters this method may return invalid objects without throwing any exception.
 * <b>You should only use this method when you are absolutely sure that the coordinate is within bounds.</b>
 * Precondition (unchecked): <tt>0 &lt;= column &lt; columns() && 0 &lt;= row &lt; rows()</tt>.</text>
      <param>row   the index of the row-coordinate.</param>
      <param>column   the index of the column-coordinate.</param>
      <return>the value at the specified coordinate.</return>
    </javadoc>
    <method type="double" name="getQuick" startLine="126" endLine="131">
      <comment>if (debug) if (column<0 || column>=columns || row<0 || row>=rows) throw new IndexOutOfBoundsException("row:"+row+", column:"+column);</comment>
      <comment>return elements[index(row,column)];</comment>
      <comment>manually inlined:</comment>
    </method>
    <javadoc>
      <text>* Returns <tt>true</tt> if both matrices share common cells.
 * More formally, returns <tt>true</tt> if <tt>other != null</tt> and at least one of the following conditions is met
 * <ul>
 * <li>the receiver is a view of the other matrix
 * <li>the other matrix is a view of the receiver
 * <li><tt>this == other</tt>
 * </ul></text>
    </javadoc>
    <method type="boolean" name="haveSharedCellsRaw" startLine="141" endLine="151">
      <scope startLine="142" endLine="145">
        <declaration type="SelectedDenseDoubleMatrix2D" name="otherMatrix" />
      </scope>
      <scope startLine="146" endLine="149">
        <declaration type="DenseDoubleMatrix2D" name="otherMatrix" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the position of the given coordinate within the (virtual or non-virtual) internal 1-dimensional array.</text>
      <param>row   the index of the row-coordinate.</param>
      <param>column   the index of the column-coordinate.</param>
    </javadoc>
    <method type="int" name="index" startLine="158" endLine="162">
      <comment>return this.offset + super.index(row,column);</comment>
      <comment>manually inlined:</comment>
    </method>
    <javadoc>
      <text>* Construct and returns a new empty matrix <i>of the same dynamic type</i> as the receiver, having the specified number of rows and columns.
 * For example, if the receiver is an instance of type <tt>DenseDoubleMatrix2D</tt> the new matrix must also be of type <tt>DenseDoubleMatrix2D</tt>,
 * if the receiver is an instance of type <tt>SparseDoubleMatrix2D</tt> the new matrix must also be of type <tt>SparseDoubleMatrix2D</tt>, etc.
 * In general, the new matrix should have internal parametrization as similar as possible.</text>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <return>a new empty matrix of the same dynamic type.</return>
    </javadoc>
    <method type="DoubleMatrix2D" name="like" startLine="173" endLine="175" />
    <javadoc>
      <text>* Construct and returns a new 1-d matrix <i>of the corresponding dynamic type</i>, entirelly independent of the receiver.
 * For example, if the receiver is an instance of type <tt>DenseDoubleMatrix2D</tt> the new matrix must be of type <tt>DenseDoubleMatrix1D</tt>,
 * if the receiver is an instance of type <tt>SparseDoubleMatrix2D</tt> the new matrix must be of type <tt>SparseDoubleMatrix1D</tt>, etc.</text>
      <param>size the number of cells the matrix shall have.</param>
      <return>a new matrix of the corresponding dynamic type.</return>
    </javadoc>
    <method type="DoubleMatrix1D" name="like1D" startLine="184" endLine="186" />
    <javadoc>
      <text>* Construct and returns a new 1-d matrix <i>of the corresponding dynamic type</i>, sharing the same cells.
 * For example, if the receiver is an instance of type <tt>DenseDoubleMatrix2D</tt> the new matrix must be of type <tt>DenseDoubleMatrix1D</tt>,
 * if the receiver is an instance of type <tt>SparseDoubleMatrix2D</tt> the new matrix must be of type <tt>SparseDoubleMatrix1D</tt>, etc.</text>
      <param>size the number of cells the matrix shall have.</param>
      <param>zero the index of the first element.</param>
      <param>stride the number of indexes between any two elements, i.e. <tt>index(i+1)-index(i)</tt>.</param>
      <return>a new matrix of the corresponding dynamic type.</return>
    </javadoc>
    <method type="DoubleMatrix1D" name="like1D" startLine="197" endLine="199">
      <comment>this method is never called since viewRow() and viewColumn are overridden properly.</comment>
    </method>
    <javadoc>
      <text>* Sets the matrix cell at coordinate <tt>[row,column]</tt> to the specified value.
 * <p>Provided with invalid parameters this method may access illegal indexes without throwing any exception.
 * <b>You should only use this method when you are absolutely sure that the coordinate is within bounds.</b>
 * Precondition (unchecked): <tt>0 &lt;= column &lt; columns() && 0 &lt;= row &lt; rows()</tt>.</text>
      <param>row   the index of the row-coordinate.</param>
      <param>column   the index of the column-coordinate.</param>
      <param>value the value to be filled into the specified cell.</param>
    </javadoc>
    <method type="void" name="setQuick" startLine="211" endLine="216">
      <comment>if (debug) if (column<0 || column>=columns || row<0 || row>=rows) throw new IndexOutOfBoundsException("row:"+row+", column:"+column);</comment>
      <comment>elements[index(row,column)] = value;</comment>
      <comment>manually inlined:</comment>
    </method>
    <javadoc>
      <text>* Sets up a matrix with a given number of rows and columns.</text>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <throws>IllegalArgumentException if <tt>(double)columns*rows > Integer.MAX_VALUE</tt>.</throws>
    </javadoc>
    <method type="void" name="setUp" startLine="223" endLine="228" />
    <javadoc>
      <text>* Self modifying version of viewDice().</text>
    </javadoc>
    <method type="AbstractMatrix2D" name="vDice" startLine="232" endLine="241">
      <declaration type="int[]" name="tmp" />
      <comment>swap</comment>
      <comment>flips stay unaffected</comment>
    </method>
    <javadoc>
      <text>* Constructs and returns a new <i>slice view</i> representing the rows of the given column.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
 * To obtain a slice view on subranges, construct a sub-ranging view (<tt>viewPart(...)</tt>), then apply this method to the sub-range view.
 * <p> 
 * <b>Example:</b> 
 * <table border="0">
 * <tr nowrap> 
 * <td valign="top">2 x 3 matrix: <br>
 * 1, 2, 3<br>
 * 4, 5, 6 </td>
 * <td>viewColumn(0) ==></td>
 * <td valign="top">Matrix1D of size 2:<br>
 * 1, 4</td>
 * </tr>
 * </table></text>
      <param>the column to fix.</param>
      <return>a new slice view.</return>
      <throws>IllegalArgumentException if <tt>column < 0 || column >= columns()</tt>.</throws>
      <see>#viewRow(int)</see>
    </javadoc>
    <method type="DoubleMatrix1D" name="viewColumn" startLine="264" endLine="272">
      <declaration type="int" name="viewSize" />
      <declaration type="int" name="viewZero" />
      <declaration type="int" name="viewStride" />
      <declaration type="int[]" name="viewOffsets" />
      <declaration type="int" name="viewOffset" />
    </method>
    <javadoc>
      <text>* Constructs and returns a new <i>slice view</i> representing the columns of the given row.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
 * To obtain a slice view on subranges, construct a sub-ranging view (<tt>viewPart(...)</tt>), then apply this method to the sub-range view.
 * <p> 
 * <b>Example:</b> 
 * <table border="0">
 * <tr nowrap> 
 * <td valign="top">2 x 3 matrix: <br>
 * 1, 2, 3<br>
 * 4, 5, 6 </td>
 * <td>viewRow(0) ==></td>
 * <td valign="top">Matrix1D of size 3:<br>
 * 1, 2, 3</td>
 * </tr>
 * </table></text>
      <param>the row to fix.</param>
      <return>a new slice view.</return>
      <throws>IndexOutOfBoundsException if <tt>row < 0 || row >= rows()</tt>.</throws>
      <see>#viewColumn(int)</see>
    </javadoc>
    <method type="DoubleMatrix1D" name="viewRow" startLine="295" endLine="303">
      <declaration type="int" name="viewSize" />
      <declaration type="int" name="viewZero" />
      <declaration type="int" name="viewStride" />
      <declaration type="int[]" name="viewOffsets" />
      <declaration type="int" name="viewOffset" />
    </method>
    <javadoc>
      <text>* Construct and returns a new selection view.</text>
      <param>rowOffsets the offsets of the visible elements.</param>
      <param>columnOffsets the offsets of the visible elements.</param>
      <return>a new view.</return>
    </javadoc>
    <method type="DoubleMatrix2D" name="viewSelectionLike" startLine="311" endLine="313" />
  </class>
</source>
