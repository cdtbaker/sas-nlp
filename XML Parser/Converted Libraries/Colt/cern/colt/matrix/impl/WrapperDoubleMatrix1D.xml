<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.impl">
  <import name="cern.colt.matrix.DoubleMatrix1D" />
  <import name="cern.colt.matrix.DoubleMatrix2D" />
  <class name="WrapperDoubleMatrix1D" extends="DoubleMatrix1D" startLine="13">
    <javadoc>
      <text>* 1-d matrix holding <tt>double</tt> elements; either a view wrapping another matrix or a matrix whose views are wrappers.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="DoubleMatrix1D" name="content" />
    <method type="constructor" name="WrapperDoubleMatrix1D" startLine="24" endLine="27" />
    <javadoc>
      <text>* Returns the content of this matrix if it is a wrapper; or <tt>this</tt> otherwise.
 * Override this method in wrappers.</text>
    </javadoc>
    <method type="DoubleMatrix1D" name="getContent" startLine="32" endLine="34" />
    <javadoc>
      <text>* Returns the matrix cell value at coordinate <tt>index</tt>.
 * <p>Provided with invalid parameters this method may return invalid objects without throwing any exception.
 * <b>You should only use this method when you are absolutely sure that the coordinate is within bounds.</b>
 * Precondition (unchecked): <tt>index&lt;0 || index&gt;=size()</tt>.</text>
      <param>index   the index of the cell.</param>
      <return>the value of the specified cell.</return>
    </javadoc>
    <method type="double" name="getQuick" startLine="45" endLine="47" />
    <javadoc>
      <text>* Construct and returns a new empty matrix <i>of the same dynamic type</i> as the receiver, having the specified size.
 * For example, if the receiver is an instance of type <tt>DenseDoubleMatrix1D</tt> the new matrix must also be of type <tt>DenseDoubleMatrix1D</tt>,
 * if the receiver is an instance of type <tt>SparseDoubleMatrix1D</tt> the new matrix must also be of type <tt>SparseDoubleMatrix1D</tt>, etc.
 * In general, the new matrix should have internal parametrization as similar as possible.</text>
      <param>size the number of cell the matrix shall have.</param>
      <return>a new empty matrix of the same dynamic type.</return>
    </javadoc>
    <method type="DoubleMatrix1D" name="like" startLine="57" endLine="59" />
    <javadoc>
      <text>* Construct and returns a new 2-d matrix <i>of the corresponding dynamic type</i>, entirelly independent of the receiver.
 * For example, if the receiver is an instance of type <tt>DenseDoubleMatrix1D</tt> the new matrix must be of type <tt>DenseDoubleMatrix2D</tt>,
 * if the receiver is an instance of type <tt>SparseDoubleMatrix1D</tt> the new matrix must be of type <tt>SparseDoubleMatrix2D</tt>, etc.</text>
      <param>rows the number of rows the matrix shall have.</param>
      <param>columns the number of columns the matrix shall have.</param>
      <return>a new matrix of the corresponding dynamic type.</return>
    </javadoc>
    <method type="DoubleMatrix2D" name="like2D" startLine="69" endLine="71" />
    <javadoc>
      <text>* Sets the matrix cell at coordinate <tt>index</tt> to the specified value.
 * <p>Provided with invalid parameters this method may access illegal indexes without throwing any exception.
 * <b>You should only use this method when you are absolutely sure that the coordinate is within bounds.</b>
 * Precondition (unchecked): <tt>index&lt;0 || index&gt;=size()</tt>.</text>
      <param>index   the index of the cell.</param>
      <param>value the value to be filled into the specified cell.</param>
    </javadoc>
    <method type="void" name="setQuick" startLine="82" endLine="84" />
    <javadoc>
      <text>* Constructs and returns a new <i>flip view</i>.
 * What used to be index <tt>0</tt> is now index <tt>size()-1</tt>, ..., what used to be index <tt>size()-1</tt> is now index <tt>0</tt>.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.</text>
      <return>a new flip view.</return>
    </javadoc>
    <method type="DoubleMatrix1D" name="viewFlip" startLine="92" endLine="102">
      <declaration type="DoubleMatrix1D" name="view" />
      <method type="double" name="getQuick" startLine="94" endLine="96" />
      <method type="void" name="setQuick" startLine="97" endLine="99" />
    </method>
    <javadoc>
      <text>* Constructs and returns a new <i>sub-range view</i> that is a <tt>width</tt> sub matrix starting at <tt>index</tt>.
 * Operations on the returned view can only be applied to the restricted range.
 * Any attempt to access coordinates not contained in the view will throw an <tt>IndexOutOfBoundsException</tt>.
 * <p>
 * <b>Note that the view is really just a range restriction:</b> 
 * The returned matrix is backed by this matrix, so changes in the returned matrix are reflected in this matrix, and vice-versa. 
 * <p>
 * The view contains the cells from <tt>index..index+width-1</tt>.
 * and has <tt>view.size() == width</tt>.
 * A view's legal coordinates are again zero based, as usual.
 * In other words, legal coordinates of the view are <tt>0 .. view.size()-1==width-1</tt>.
 * As usual, any attempt to access a cell at other coordinates will throw an <tt>IndexOutOfBoundsException</tt>.</text>
      <param>index   The index of the first cell.</param>
      <param>width   The width of the range.</param>
      <throws>IndexOutOfBoundsException if <tt>index<0 || width<0 || index+width>size()</tt>.</throws>
      <return>the new view.</return>
    </javadoc>
    <method type="DoubleMatrix1D" name="viewPart" startLine="124" endLine="136">
      <declaration type="DoubleMatrix1D" name="view" />
      <method type="double" name="getQuick" startLine="127" endLine="129" />
      <method type="void" name="setQuick" startLine="130" endLine="132" />
    </method>
    <javadoc>
      <text>* Constructs and returns a new <i>selection view</i> that is a matrix holding the indicated cells.
 * There holds <tt>view.size() == indexes.length</tt> and <tt>view.get(i) == this.get(indexes[i])</tt>.
 * Indexes can occur multiple times and can be in arbitrary order.
 * <p>
 * <b>Example:</b>
 * <br>
 * <pre>
 * this     = (0,0,8,0,7)
 * indexes  = (0,2,4,2)
 * -->
 * view     = (0,8,7,8)
 * </pre>
 * Note that modifying <tt>indexes</tt> after this call has returned has no effect on the view.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.</text>
      <param>indexes   The indexes of the cells that shall be visible in the new view. To indicate that <i>all</i> cells shall be visible, simply set this parameter to <tt>null</tt>.</param>
      <return>the new view.</return>
      <throws>IndexOutOfBoundsException if <tt>!(0 <= indexes[i] < size())</tt> for any <tt>i=0..indexes.length()-1</tt>.</throws>
    </javadoc>
    <method type="DoubleMatrix1D" name="viewSelection" startLine="157" endLine="177">
      <scope startLine="159" endLine="162" />
      <declaration type="int[]" name="idx" />
      <declaration type="DoubleMatrix1D" name="view" />
      <method type="double" name="getQuick" startLine="168" endLine="170" />
      <method type="void" name="setQuick" startLine="171" endLine="173" />
      <comment>check for "all"</comment>
    </method>
    <javadoc>
      <text>* Construct and returns a new selection view.</text>
      <param>offsets the offsets of the visible elements.</param>
      <return>a new view.</return>
    </javadoc>
    <method type="DoubleMatrix1D" name="viewSelectionLike" startLine="184" endLine="186">
      <comment>should never get called</comment>
    </method>
    <javadoc>
      <text>* Constructs and returns a new <i>stride view</i> which is a sub matrix consisting of every i-th cell.
 * More specifically, the view has size <tt>this.size()/stride</tt> holding cells <tt>this.get(i*stride)</tt> for all <tt>i = 0..size()/stride - 1</tt>.</text>
      <param>stride  the step factor.</param>
      <throws>IndexOutOfBoundsException if <tt>stride <= 0</tt>.</throws>
      <return>the new view.</return>
    </javadoc>
    <method type="DoubleMatrix1D" name="viewStrides" startLine="196" endLine="209">
      <declaration type="DoubleMatrix1D" name="view" />
      <method type="double" name="getQuick" startLine="199" endLine="201" />
      <method type="void" name="setQuick" startLine="202" endLine="204" />
    </method>
    <comment>The elements of the matrix.</comment>
  </class>
</source>
