<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.doublealgo">
  <import name="cern.colt.matrix.DoubleMatrix1D" />
  <import name="cern.colt.matrix.DoubleMatrix2D" />
  <import name="cern.colt.matrix.DoubleMatrix3D" />
  <import name="cern.colt.matrix.impl.AbstractFormatter" />
  <import name="cern.colt.matrix.impl.AbstractMatrix1D" />
  <import name="cern.colt.matrix.impl.AbstractMatrix2D" />
  <import name="cern.colt.matrix.impl.DenseDoubleMatrix1D" />
  <import name="cern.colt.matrix.impl.Former" />
  <class name="Formatter" extends="AbstractFormatter" startLine="19">
    <javadoc>
      <text>* Flexible, well human readable matrix print formatting; By default decimal point aligned. Build on top of the C-like <i>sprintf</i> functionality 
 * provided by the {@link corejava.Format} class written by Cay Horstmann.
 * Currenly works on 1-d, 2-d and 3-d matrices.
 * Note that in most cases you will not need to get familiar with this class; just call <tt>matrix.toString()</tt> and be happy with the default formatting.
 * This class is for advanced requirements.
 * <p> Can't exactly remember the syntax of printf format strings? See {@link corejava.Format} 
 * or <a href="http://www.braju.com/docs/index.html">Henrik 
 * Nordberg's documentation</a>, or the <a href="http://www.dinkumware.com/htm_cl/lib_prin.html#Print%20Functions">Dinkumware's 
 * C Library Reference</a>.
 * <p><b>Examples:</b>
 * <p>
 * Examples demonstrate usage on 2-d matrices. 1-d and 3-d matrices formatting works very similar.
 * <table border="1" cellspacing="0">
 * <tr align="center"> 
 * <td>Original matrix</td>
 * </tr>
 * <tr> 
 * <td> 
 * <p><tt>double[][] values = {<br>
 * {3, 0, -3.4, 0},<br>
 * {5.1 ,0, +3.0123456789, 0}, <br>
 * {16.37, 0.0, 2.5, 0}, <br>
 * {-16.3, 0, -3.012345678E-4, -1},<br>
 * {1236.3456789, 0, 7, -1.2}<br>
 * };<br>
 * matrix = new DenseDoubleMatrix2D(values);</tt></p>
 * </td>
 * </tr>
 * </table>
 * <p>&nbsp;</p>
 * <table border="1" cellspacing="0">
 * <tr align="center"> 
 * <td><tt>format</tt></td>
 * <td valign="top"><tt>Formatter.toString(matrix);</tt></td>
 * <td valign="top"><tt>Formatter.toSourceCode(matrix);</tt></td>
 * </tr>
 * <tr> 
 * <td><tt>%G </tt><br>
 * (default)</td>
 * <td align="left" valign="top"><tt>5&nbsp;x&nbsp;4&nbsp;matrix<br>
 * &nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;-3.4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;<br>
 * &nbsp;&nbsp;&nbsp;5.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;3.012346&nbsp;&nbsp;0&nbsp;&nbsp;<br>
 * &nbsp;&nbsp;16.37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;2.5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;<br>
 * &nbsp;-16.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;-0.000301&nbsp;-1&nbsp;&nbsp;<br>
 * 1236.345679&nbsp;0&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.2 
 * </tt></td>
 * <td align="left" valign="top"><tt>{<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;0,&nbsp;-3.4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;&nbsp;0&nbsp;&nbsp;},<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;5.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;0,&nbsp;&nbsp;3.012346,&nbsp;&nbsp;0&nbsp;&nbsp;},<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;16.37&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;0,&nbsp;&nbsp;2.5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;&nbsp;0&nbsp;&nbsp;},<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;-16.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;0,&nbsp;-0.000301,&nbsp;-1&nbsp;&nbsp;},<br>
 * &nbsp;&nbsp;&nbsp;{1236.345679,&nbsp;0,&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;-1.2}<br>
 * }; </tt></td>
 * </tr>
 * <tr> 
 * <td><tt>%1.10G</tt></td>
 * <td align="left" valign="top"><tt>5&nbsp;x&nbsp;4&nbsp;matrix<br>
 * &nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;-3.4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;<br>
 * &nbsp;&nbsp;&nbsp;5.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;3.0123456789&nbsp;&nbsp;0&nbsp;&nbsp;<br>
 * &nbsp;&nbsp;16.37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;2.5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;<br>
 * &nbsp;-16.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;-0.0003012346&nbsp;-1&nbsp;&nbsp;<br>
 * 1236.3456789&nbsp;0&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.2 
 * </tt></td>
 * <td align="left" valign="top"><tt>{<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;0,&nbsp;-3.4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;&nbsp;0&nbsp;&nbsp;},<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;5.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;0,&nbsp;&nbsp;3.0123456789,&nbsp;&nbsp;0&nbsp;&nbsp;},<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;16.37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;0,&nbsp;&nbsp;2.5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;&nbsp;0&nbsp;&nbsp;},<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;-16.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;0,&nbsp;-0.0003012346,&nbsp;-1&nbsp;&nbsp;},<br>
 * &nbsp;&nbsp;&nbsp;{1236.3456789,&nbsp;0,&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;-1.2}<br>
 * }; </tt></td>
 * </tr>
 * <tr> 
 * <td><tt>%f</tt></td>
 * <td align="left" valign="top"> <tt> 5&nbsp;x&nbsp;4&nbsp;matrix<br>
 * &nbsp;&nbsp;&nbsp;3.000000&nbsp;0.000000&nbsp;-3.400000&nbsp;&nbsp;0.000000<br>
 * &nbsp;&nbsp;&nbsp;5.100000&nbsp;0.000000&nbsp;&nbsp;3.012346&nbsp;&nbsp;0.000000<br>
 * &nbsp;&nbsp;16.370000&nbsp;0.000000&nbsp;&nbsp;2.500000&nbsp;&nbsp;0.000000<br>
 * &nbsp;-16.300000&nbsp;0.000000&nbsp;-0.000301&nbsp;-1.000000<br>
 * 1236.345679&nbsp;0.000000&nbsp;&nbsp;7.000000&nbsp;-1.200000 </tt> </td>
 * <td align="left" valign="top"><tt> {<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;3.000000,&nbsp;0.000000,&nbsp;-3.400000,&nbsp;&nbsp;0.000000},<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;5.100000,&nbsp;0.000000,&nbsp;&nbsp;3.012346,&nbsp;&nbsp;0.000000},<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;16.370000,&nbsp;0.000000,&nbsp;&nbsp;2.500000,&nbsp;&nbsp;0.000000},<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;-16.300000,&nbsp;0.000000,&nbsp;-0.000301,&nbsp;-1.000000},<br>
 * &nbsp;&nbsp;&nbsp;{1236.345679,&nbsp;0.000000,&nbsp;&nbsp;7.000000,&nbsp;-1.200000}<br>
 * }; </tt> </td>
 * </tr>
 * <tr> 
 * <td><tt>%1.2f</tt></td>
 * <td align="left" valign="top"><tt>5&nbsp;x&nbsp;4&nbsp;matrix<br>
 * &nbsp;&nbsp;&nbsp;3.00&nbsp;0.00&nbsp;-3.40&nbsp;&nbsp;0.00<br>
 * &nbsp;&nbsp;&nbsp;5.10&nbsp;0.00&nbsp;&nbsp;3.01&nbsp;&nbsp;0.00<br>
 * &nbsp;&nbsp;16.37&nbsp;0.00&nbsp;&nbsp;2.50&nbsp;&nbsp;0.00<br>
 * &nbsp;-16.30&nbsp;0.00&nbsp;-0.00&nbsp;-1.00<br>
 * 1236.35&nbsp;0.00&nbsp;&nbsp;7.00&nbsp;-1.20 </tt></td>
 * <td align="left" valign="top"><tt>{<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;3.00,&nbsp;0.00,&nbsp;-3.40,&nbsp;&nbsp;0.00},<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;5.10,&nbsp;0.00,&nbsp;&nbsp;3.01,&nbsp;&nbsp;0.00},<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;16.37,&nbsp;0.00,&nbsp;&nbsp;2.50,&nbsp;&nbsp;0.00},<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;-16.30,&nbsp;0.00,&nbsp;-0.00,&nbsp;-1.00},<br>
 * &nbsp;&nbsp;&nbsp;{1236.35,&nbsp;0.00,&nbsp;&nbsp;7.00,&nbsp;-1.20}<br>
 * }; </tt></td>
 * </tr>
 * <tr> 
 * <td><tt>%0.2e</tt></td>
 * <td align="left" valign="top"><tt>5&nbsp;x&nbsp;4&nbsp;matrix<br>
 * &nbsp;3.00e+000&nbsp;0.00e+000&nbsp;-3.40e+000&nbsp;&nbsp;0.00e+000<br>
 * &nbsp;5.10e+000&nbsp;0.00e+000&nbsp;&nbsp;3.01e+000&nbsp;&nbsp;0.00e+000<br>
 * &nbsp;1.64e+001&nbsp;0.00e+000&nbsp;&nbsp;2.50e+000&nbsp;&nbsp;0.00e+000<br>
 * -1.63e+001&nbsp;0.00e+000&nbsp;-3.01e-004&nbsp;-1.00e+000<br>
 * &nbsp;1.24e+003&nbsp;0.00e+000&nbsp;&nbsp;7.00e+000&nbsp;-1.20e+000 </tt></td>
 * <td align="left" valign="top"><tt>{<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;3.00e+000,&nbsp;0.00e+000,&nbsp;-3.40e+000,&nbsp;&nbsp;0.00e+000},<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;5.10e+000,&nbsp;0.00e+000,&nbsp;&nbsp;3.01e+000,&nbsp;&nbsp;0.00e+000},<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;1.64e+001,&nbsp;0.00e+000,&nbsp;&nbsp;2.50e+000,&nbsp;&nbsp;0.00e+000},<br>
 * &nbsp;&nbsp;&nbsp;{-1.63e+001,&nbsp;0.00e+000,&nbsp;-3.01e-004,&nbsp;-1.00e+000},<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;1.24e+003,&nbsp;0.00e+000,&nbsp;&nbsp;7.00e+000,&nbsp;-1.20e+000}<br>
 * }; </tt></td>
 * </tr>
 * <tr> 
 * <td><tt>null</tt></td>
 * <td align="left" valign="top"><tt>5&nbsp;x&nbsp;4&nbsp;matrix <br>
 * &nbsp;&nbsp;&nbsp;3.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0&nbsp;-3.4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0<br>
 * &nbsp;&nbsp;&nbsp;5.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0&nbsp;&nbsp;3.0123456789&nbsp;&nbsp;&nbsp;&nbsp;0.0<br>
 * &nbsp;&nbsp;16.37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0&nbsp;&nbsp;2.5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0<br>
 * &nbsp;-16.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0&nbsp;-3.012345678E-4&nbsp;-1.0<br>
 * 1236.3456789&nbsp;0.0&nbsp;&nbsp;7.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.2 
 * </tt> <tt> </tt></td>
 * <td align="left" valign="top"><tt> {<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;3.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;0.0,&nbsp;-3.4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;&nbsp;0.0},<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;5.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;0.0,&nbsp;&nbsp;3.0123456789&nbsp;&nbsp;,&nbsp;&nbsp;0.0},<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;16.37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;0.0,&nbsp;&nbsp;2.5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;&nbsp;0.0},<br>
 * &nbsp;&nbsp;&nbsp;{&nbsp;-16.3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;0.0,&nbsp;-3.012345678E-4,&nbsp;-1.0},<br>
 * &nbsp;&nbsp;&nbsp;{1236.3456789,&nbsp;0.0,&nbsp;&nbsp;7.0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;-1.2}<br>
 * }; </tt> </td>
 * </tr>
 * </table>
 * <p>Here are some more elaborate examples, adding labels for axes, rows, columns, 
 * title and some statistical aggregations.</p>
 * <table border="1" cellspacing="0">
 * <tr> 
 * <td nowrap> 
 * <p><tt> double[][] values = {<br>
 * {5 ,10, 20, 40 },<br>
 * { 7, 8 , 6 , 7 },<br>
 * {12 ,10, 20, 19 },<br>
 * { 3, 1 , 5 , 6 }<br>
 * }; <br>
 * </tt><tt>String title = "CPU performance over time [nops/sec]";<br>
 * String columnAxisName = "Year";<br>
 * String rowAxisName = "CPU"; <br>
 * String[] columnNames = {"1996", "1997", "1998", "1999"};<br>
 * String[] rowNames = { "PowerBar", "Benzol", "Mercedes", "Sparcling"};<br>
 * hep.aida.bin.BinFunctions1D F = hep.aida.bin.BinFunctions1D.functions; // alias<br>
 * hep.aida.bin.BinFunction1D[] aggr = {F.mean, F.rms, F.quantile(0.25), F.median, F.quantile(0.75), F.stdDev, F.min, F.max};<br>
 * String format = "%1.2G";<br>
 * DoubleMatrix2D matrix = new DenseDoubleMatrix2D(values); <br>
 * new Formatter(format).toTitleString(<br>
 * &nbsp;&nbsp;&nbsp;matrix,rowNames,columnNames,rowAxisName,columnAxisName,title,aggr); </tt> 
 * </p>
 * </td>
 * </tr>
 * <tr> 
 * <td><tt>
 * CPU&nbsp;performance&nbsp;over&nbsp;time&nbsp;[nops/sec]<br>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Year<br>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;1996&nbsp;&nbsp;1997&nbsp;&nbsp;1998&nbsp;&nbsp;1999&nbsp;&nbsp;|&nbsp;Mean&nbsp;&nbsp;RMS&nbsp;&nbsp;&nbsp;25%&nbsp;Q.&nbsp;Median&nbsp;75%&nbsp;Q.&nbsp;StdDev&nbsp;Min&nbsp;Max<br>
 * ---------------------------------------------------------------------------------------<br>
 * C&nbsp;PowerBar&nbsp;&nbsp;|&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;40&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;18.75&nbsp;23.05&nbsp;&nbsp;8.75&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;15.48&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;40&nbsp;<br>
 * P&nbsp;Benzol&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7.04&nbsp;&nbsp;6.75&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7.25&nbsp;&nbsp;&nbsp;0.82&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;8&nbsp;<br>
 * U&nbsp;Mercedes&nbsp;&nbsp;|&nbsp;12&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;19&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;15.25&nbsp;15.85&nbsp;11.5&nbsp;&nbsp;&nbsp;15.5&nbsp;&nbsp;&nbsp;19.25&nbsp;&nbsp;&nbsp;4.99&nbsp;&nbsp;10&nbsp;&nbsp;20&nbsp;<br>
 * &nbsp;&nbsp;Sparcling&nbsp;|&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;3.75&nbsp;&nbsp;4.21&nbsp;&nbsp;2.5&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.25&nbsp;&nbsp;&nbsp;2.22&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;6&nbsp;<br>
 * ---------------------------------------------------------------------------------------<br>
 * &nbsp;&nbsp;Mean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;6.75&nbsp;&nbsp;7.25&nbsp;12.75&nbsp;18&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
 * &nbsp;&nbsp;RMS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;7.53&nbsp;&nbsp;8.14&nbsp;14.67&nbsp;22.62&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
 * &nbsp;&nbsp;25%&nbsp;Q.&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;4.5&nbsp;&nbsp;&nbsp;6.25&nbsp;&nbsp;5.75&nbsp;&nbsp;6.75&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
 * &nbsp;&nbsp;Median&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp;13&nbsp;&nbsp;&nbsp;&nbsp;13&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
 * &nbsp;&nbsp;75%&nbsp;Q.&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;8.25&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;24.25&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
 * &nbsp;&nbsp;StdDev&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;3.86&nbsp;&nbsp;4.27&nbsp;&nbsp;8.38&nbsp;15.81&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
 * &nbsp;&nbsp;Min&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
 * &nbsp;&nbsp;Max&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;12&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;19&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 * </tt>
 * </td>
 * </tr>
 * <tr> 
 * <td nowrap><tt> same as above, but now without aggregations<br>
 * aggr=null; </tt> </td>
 * </tr>
 * <tr> 
 * <td><tt> CPU&nbsp;performance&nbsp;over&nbsp;time&nbsp;[nops/sec]<br>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Year<br>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;1996&nbsp;1997&nbsp;1998&nbsp;1999<br>
 * ---------------------------------<br>
 * C&nbsp;PowerBar&nbsp;&nbsp;|&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;40&nbsp;&nbsp;<br>
 * P&nbsp;Benzol&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;<br>
 * U&nbsp;Mercedes&nbsp;&nbsp;|&nbsp;12&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;19&nbsp;&nbsp;<br>
 * &nbsp;&nbsp;Sparcling&nbsp;|&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp; 
 * </tt> </td>
 * </tr>
 * <tr> 
 * <td nowrap>
 * <p><tt> same as above, but now without rows labeled<br>
 * aggr=null;<br>
 * rowNames=null;<br>
 * rowAxisName=null; </tt> </p>
 * </td>
 * </tr>
 * <tr> 
 * <td><tt>
 * CPU&nbsp;performance&nbsp;over&nbsp;time&nbsp;[nops/sec]<br>
 * Year<br>
 * 1996&nbsp;1997&nbsp;1998&nbsp;1999<br>
 * -------------------<br>
 * &nbsp;5&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;40&nbsp;&nbsp;<br>
 * &nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;<br>
 * 12&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;19&nbsp;&nbsp;<br>
 * &nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;
 * </tt>
 * </td>
 * </tr>
 * </table>
 * <p>A column can be broader than specified by the parameter <tt>minColumnWidth</tt> 
 * (because a cell may not fit into that width) but a column is never smaller than 
 * <tt>minColumnWidth</tt>. Normally one does not need to specify <tt>minColumnWidth</tt> 
 * (default is <tt>1</tt>). This parameter is only interesting when wanting to 
 * print two distinct matrices such that both matrices have the same column width, 
 * for example, to make it easier to see which column of matrix A corresponds to 
 * which column of matrix B.</p>
 * <p><b>Implementation:</b></p>
 * <p>Note that this class is by no means ment to be used for high performance I/O (serialization is much quicker).
 * It is ment to produce well human readable output.</p>
 * <p>Analyzes the entire matrix before producing output. Each cell is converted 
 * to a String as indicated by the given C-like format string. If <tt>null</tt> 
 * is passed as format string, {@link java.lang.Double#toString(double)} is used 
 * instead, yielding full precision.</p>
 * <p>Next, leading and trailing whitespaces are removed. For each column the maximum number of characters before 
 * and after the decimal point is determined. (No problem if decimal points are 
 * missing). Each cell is then padded with leading and trailing blanks, as necessary 
 * to achieve decimal point aligned, left justified formatting.</p></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.2, 11/30/99</version>
    </javadoc>
    <javadoc>
      <text>* Constructs and returns a matrix formatter with format <tt>"%G"</tt>.</text>
    </javadoc>
    <method type="constructor" name="Formatter" startLine="273" endLine="275" />
    <javadoc>
      <text>* Constructs and returns a matrix formatter.</text>
      <param>format the given format used to convert a single cell value.</param>
    </javadoc>
    <method type="constructor" name="Formatter" startLine="280" endLine="283" />
    <javadoc>
      <text>* Demonstrates how to use this class.</text>
    </javadoc>
    <method type="void" name="demo1" startLine="287" endLine="330">
      <declaration type="double[][]" name="values" />
      <declaration type="String[]" name="formats" />
      <declaration type="int" name="size" />
      <declaration type="DoubleMatrix2D" name="matrix" />
      <declaration type="String[]" name="strings" />
      <declaration type="String[]" name="sourceCodes" />
      <declaration type="String[]" name="htmlStrings" />
      <declaration type="String[]" name="htmlSourceCodes" />
      <scope startLine="307" endLine="315">
        <declaration type="String" name="format" />
        <comment>may not compile because of packages not included in the distribution</comment>
        <comment>htmlStrings[i] = cern.colt.matrixpattern.Converting.toHTML(strings[i]);</comment>
        <comment>htmlSourceCodes[i] = cern.colt.matrixpattern.Converting.toHTML(sourceCodes[i]);</comment>
      </scope>
      <scope startLine="320" endLine="323">
        <comment>System.out.println("\nhtmlString("+formats[i]+"):\n"+htmlStrings[i]);</comment>
        <comment>System.out.println("\nhtmlSourceCode("+formats[i]+"):\n"+htmlSourceCodes[i]);</comment>
      </scope>
      <scope startLine="325" endLine="328" />
      <comment>parameters</comment>
      <comment>now the processing</comment>
      <comment>may not compile because of packages not included in the distribution</comment>
    </method>
    <javadoc>
      <text>* Demonstrates how to use this class.</text>
    </javadoc>
    <method type="void" name="demo2" startLine="334" endLine="366">
      <declaration type="double[]" name="values" />
      <declaration type="String[]" name="formats" />
      <declaration type="int" name="size" />
      <declaration type="DoubleMatrix1D" name="matrix" />
      <declaration type="String[]" name="strings" />
      <scope startLine="352" endLine="358">
        <declaration type="String" name="format" />
        <scope startLine="355" endLine="357" />
      </scope>
      <scope startLine="362" endLine="364" />
      <comment>parameters</comment>
      <comment>5, 0.0, -0.0, -Double.NaN, Double.NaN, 0.0/0.0, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.MIN_VALUE, Double.MAX_VALUE</comment>
      <comment>Double.MIN_VALUE, Double.MAX_VALUE , Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY</comment>
      <comment>String[] formats =         {"%G", "%1.10G", "%f", "%1.2f", "%0.2e"};</comment>
      <comment>now the processing</comment>
      <comment>String[] javaStrings = new String[size];</comment>
    </method>
    <javadoc>
      <text>* Demonstrates how to use this class.</text>
    </javadoc>
    <method type="void" name="demo3" startLine="370" endLine="408">
      <declaration type="cern.colt.Timer" name="timer" />
      <declaration type="String" name="s" />
      <declaration type="StringBuffer" name="buf" />
      <declaration type="DoubleMatrix2D" name="matrix" />
      <scope startLine="378" endLine="382">
        <scope startLine="379" endLine="381" />
      </scope>
      <declaration type="cern.colt.matrix.impl.Former" name="format" />
      <scope startLine="389" endLine="393">
        <scope startLine="390" endLine="392" />
      </scope>
      <comment>System.out.println(s);</comment>
      <comment>System.out.println(s);</comment>
    </method>
    <javadoc>
      <text>* Demonstrates how to use this class.</text>
    </javadoc>
    <method type="void" name="demo4" startLine="412" endLine="436">
      <declaration type="double[][]" name="values" />
      <declaration type="String[]" name="columnNames" />
      <declaration type="String[]" name="rowNames" />
      <declaration type="DoubleMatrix2D" name="matrix" />
      <comment>parameters</comment>
      <comment>double[][] values = {
{3,     1,      },
{5.1   ,16.37,  }
};</comment>
      <comment>String[] columnNames = { "he",   "",  "he", "four" };</comment>
      <comment>String[] rowNames = { "hello", "du", null, "abcdef", "five" };</comment>
      <comment>String[] columnNames = { "0.1", "0.3" };</comment>
      <comment>String[] rowNames = { "SunJDK1.2.2 classic", "IBMJDK1.1.8"};</comment>
    </method>
    <javadoc>
      <text>* Demonstrates how to use this class.</text>
    </javadoc>
    <method type="void" name="demo5" startLine="440" endLine="464">
      <declaration type="double[][]" name="values" />
      <declaration type="String[]" name="columnNames" />
      <declaration type="String[]" name="rowNames" />
      <comment>parameters</comment>
      <comment>double[][] values = {
{3,     1,      },
{5.1   ,16.37,  }
};</comment>
      <comment>String[] columnNames = { "he",   "",  "he", "four" };</comment>
      <comment>String[] rowNames = { "hello", "du", null, "abcdef", "five" };</comment>
      <comment>String[] columnNames = { "0.1", "0.3" };</comment>
      <comment>String[] rowNames = { "SunJDK1.2.2 classic", "IBMJDK1.1.8"};</comment>
    </method>
    <javadoc>
      <text>* Demonstrates how to use this class.</text>
    </javadoc>
    <method type="void" name="demo6" startLine="468" endLine="495">
      <declaration type="double[][]" name="values" />
      <declaration type="String[]" name="columnNames" />
      <declaration type="String[]" name="rowNames" />
      <comment>parameters</comment>
      <comment>double[][] values = {
{3,     1,      },
{5.1   ,16.37,  }
};</comment>
      <comment>String[] columnNames = { "he",   "",  "he", "four" };</comment>
      <comment>String[] rowNames = { "hello", "du", null, "abcdef", "five" };</comment>
      <comment>String[] columnNames = { "0.1", "0.3", "0.5", "0.7" };</comment>
      <comment>String[] columnNames = { "0.1", "0.3" };</comment>
      <comment>String[] rowNames = { "SunJDK1.2.2 classic", "IBMJDK1.1.8"};</comment>
      <comment>System.out.println(cern.colt.matrix.DoubleFactory2D.dense.make(values));</comment>
      <comment>System.out.println(new Formatter().toSourceCode(cern.colt.matrix.DoubleFactory2D.dense.make(values)));</comment>
    </method>
    <javadoc>
      <text>* Demonstrates how to use this class.</text>
    </javadoc>
    <method type="void" name="demo7" startLine="499" endLine="535">
      <declaration type="double[][]" name="values" />
      <declaration type="String[]" name="columnNames" />
      <declaration type="String[]" name="rowNames" />
      <declaration type="String" name="rowAxisName" />
      <declaration type="String" name="columnAxisName" />
      <declaration type="String" name="title" />
      <declaration type="hep.aida.bin.BinFunctions1D" name="F" />
      <declaration type="hep.aida.bin.BinFunction1D[]" name="aggr" />
      <declaration type="String" name="format" />
      <comment>parameters</comment>
      <comment>double[][] values = {
{3,     0,        -3.4, 0},
{5.1   ,0,        +3.0123456789, 0},
{16.37, 0.0,       2.5, 0},
{-16.3, 0,        -3.012345678E-4, -1},
{1236.3456789, 0,  7, -1.2}
};</comment>
      <comment>String[] columnNames = { "W", "X", "Y", "Z", "mean", "median", "sum"};</comment>
      <comment>String[] rowNames = { "SunJDK1.2.2 classic", "IBMJDK1.1.8", "SunJDK1.3 Hotspot", "other1", "other2", "mean", "median", "sum" };</comment>
      <comment>hep.aida.bin.BinFunction1D[] aggr = {F.mean, F.median, F.sum};</comment>
      <comment>System.out.println(cern.colt.matrix.DoubleFactory2D.dense.make(values));</comment>
      <comment>System.out.println(new Formatter().toSourceCode(cern.colt.matrix.DoubleFactory2D.dense.make(values)));</comment>
      <comment>System.out.println(new Formatter().toString(cern.colt.matrix.DoubleFactory2D.dense.make(values)));</comment>
      <comment>System.out.println(new Formatter().toTitleString(cern.colt.matrix.DoubleFactory2D.dense.make(values),rowNames,columnNames,rowAxisName,columnAxisName,title));</comment>
      <comment>System.out.println(cern.colt.matrixpattern.Converting.toHTML(new Formatter(format).toTitleString(cern.colt.matrix.DoubleFactory2D.dense.make(values),rowNames,columnNames,rowAxisName,columnAxisName,title, aggr)));</comment>
    </method>
    <javadoc>
      <text>* Converts a given cell to a String; no alignment considered.</text>
    </javadoc>
    <method type="String" name="form" startLine="539" endLine="541" />
    <javadoc>
      <text>* Converts a given cell to a String; no alignment considered.</text>
    </javadoc>
    <method type="String" name="form" startLine="545" endLine="547" />
    <javadoc>
      <text>* Returns a string representations of all cells; no alignment considered.</text>
    </javadoc>
    <method type="String[][]" name="format" startLine="551" endLine="555">
      <declaration type="String[][]" name="strings" />
    </method>
    <javadoc>
      <text>* Returns a string representations of all cells; no alignment considered.</text>
    </javadoc>
    <method type="String[][]" name="format" startLine="559" endLine="561" />
    <javadoc>
      <text>* Returns the index of the decimal point.</text>
    </javadoc>
    <method type="int" name="indexOfDecimalPoint" startLine="565" endLine="571">
      <declaration type="int" name="i" />
    </method>
    <javadoc>
      <text>* Returns the number of characters before the decimal point.</text>
    </javadoc>
    <method type="int" name="lead" startLine="575" endLine="578" />
    <javadoc>
      <text>* Returns a string <tt>s</tt> such that <tt>Object[] m = s</tt> is a legal Java statement.</text>
      <param>matrix the matrix to format.</param>
    </javadoc>
    <method type="String" name="toSourceCode" startLine="583" endLine="590">
      <declaration type="Formatter" name="copy" />
      <declaration type="String" name="lead" />
      <declaration type="String" name="trail" />
    </method>
    <javadoc>
      <text>* Returns a string <tt>s</tt> such that <tt>Object[] m = s</tt> is a legal Java statement.</text>
      <param>matrix the matrix to format.</param>
    </javadoc>
    <method type="String" name="toSourceCode" startLine="595" endLine="604">
      <declaration type="Formatter" name="copy" />
      <declaration type="String" name="b3" />
      <declaration type="String" name="lead" />
      <declaration type="String" name="trail" />
    </method>
    <javadoc>
      <text>* Returns a string <tt>s</tt> such that <tt>Object[] m = s</tt> is a legal Java statement.</text>
      <param>matrix the matrix to format.</param>
    </javadoc>
    <method type="String" name="toSourceCode" startLine="609" endLine="620">
      <declaration type="Formatter" name="copy" />
      <declaration type="String" name="b3" />
      <declaration type="String" name="b6" />
      <declaration type="String" name="lead" />
      <declaration type="String" name="trail" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the given matrix.</text>
      <param>matrix the matrix to convert.</param>
    </javadoc>
    <method type="String" name="toString" startLine="625" endLine="629">
      <declaration type="DoubleMatrix2D" name="easy" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the given matrix.</text>
      <param>matrix the matrix to convert.</param>
    </javadoc>
    <method type="String" name="toString" startLine="634" endLine="636" />
    <javadoc>
      <text>* Returns a string representation of the given matrix.</text>
      <param>matrix the matrix to convert.</param>
    </javadoc>
    <method type="String" name="toString" startLine="641" endLine="652">
      <declaration type="StringBuffer" name="buf" />
      <declaration type="boolean" name="oldPrintShape" />
      <scope startLine="645" endLine="648" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the given matrix.</text>
      <param>matrix the matrix to convert.</param>
    </javadoc>
    <method type="String" name="toString" startLine="657" endLine="659" />
    <javadoc>
      <text>* Returns a string representation of the given matrix with axis as well as rows and columns labeled.
 * Pass <tt>null</tt> to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.</text>
      <param>matrix The matrix to format.</param>
      <param>rowNames The headers of all rows (to be put to the left of the matrix).</param>
      <param>columnNames The headers of all columns (to be put to above the matrix).</param>
      <param>rowAxisName The label of the y-axis.</param>
      <param>columnAxisName The label of the x-axis.</param>
      <param>title The overall title of the matrix to be formatted.</param>
      <return>the matrix converted to a string.</return>
    </javadoc>
    <method type="String" name="toTitleString" startLine="672" endLine="680">
      <declaration type="String[][]" name="s" />
      <comment>String oldAlignment = this.alignment;</comment>
      <comment>this.alignment = DECIMAL;</comment>
      <comment>this.alignment = oldAlignment;</comment>
    </method>
    <javadoc>
      <text>* Same as <tt>toTitleString</tt> except that additionally statistical aggregates (mean, median, sum, etc.) of rows and columns are printed.
 * Pass <tt>null</tt> to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.</text>
      <param>matrix The matrix to format.</param>
      <param>rowNames The headers of all rows (to be put to the left of the matrix).</param>
      <param>columnNames The headers of all columns (to be put to above the matrix).</param>
      <param>rowAxisName The label of the y-axis.</param>
      <param>columnAxisName The label of the x-axis.</param>
      <param>title The overall title of the matrix to be formatted.</param>
      <param>aggr the aggregation functions to be applied to columns and rows.</param>
      <return>the matrix converted to a string.</return>
      <see>hep.aida.bin.BinFunction1D</see>
      <see>hep.aida.bin.BinFunctions1D</see>
    </javadoc>
    <method type="String" name="toTitleString" startLine="696" endLine="756">
      <declaration type="DoubleMatrix2D" name="rowStats" />
      <declaration type="DoubleMatrix2D" name="colStats" />
      <declaration type="DoubleMatrix2D" name="tmp" />
      <declaration type="String[][]" name="s1" />
      <declaration type="String[][]" name="s2" />
      <declaration type="cern.colt.matrix.ObjectMatrix2D" name="allStats" />
      <scope startLine="724" endLine="730">
        <declaration type="cern.colt.list.ObjectArrayList" name="list" />
        <comment>add names of aggregation functions</comment>
      </scope>
      <scope startLine="733" endLine="738">
        <declaration type="cern.colt.list.ObjectArrayList" name="list" />
        <comment>add names of aggregation functions</comment>
      </scope>
      <declaration type="String" name="s" />
      <declaration type="int" name="last" />
      <declaration type="int" name="secondLast" />
      <declaration type="int" name="v" />
      <scope startLine="748" endLine="751">
        <comment>scan "aggr.length+1+v" lines backwards</comment>
      </scope>
      <declaration type="StringBuffer" name="buf" />
      <comment>hold row aggregations</comment>
      <comment>hold column aggregations</comment>
      <comment>aggregate an entire column at a time</comment>
      <comment>aggregate an entire row at a time</comment>
      <comment>turn into strings</comment>
      <comment>tmp holds "matrix" plus "colStats" below (needed so that numbers in a columns can be decimal point aligned)</comment>
      <comment>copy strings into a large matrix holding the source matrix and all aggregations</comment>
      <comment>append a vertical "|" separator plus names of aggregation functions to line holding columnNames</comment>
      <comment>append names of aggregation functions to line holding rowNames</comment>
      <comment>turn large matrix into string</comment>
      <comment>insert a horizontal "----------------------" separation line above the column stats</comment>
      <comment>determine insertion position and line width</comment>
    </method>
    <javadoc>
      <text>* Returns a string representation of the given matrix with axis as well as rows and columns labeled.
 * Pass <tt>null</tt> to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.</text>
      <param>matrix The matrix to format.</param>
      <param>sliceNames The headers of all slices (to be put above each slice).</param>
      <param>rowNames The headers of all rows (to be put to the left of the matrix).</param>
      <param>columnNames The headers of all columns (to be put to above the matrix).</param>
      <param>sliceAxisName The label of the z-axis (to be put above each slice).</param>
      <param>rowAxisName The label of the y-axis.</param>
      <param>columnAxisName The label of the x-axis.</param>
      <param>title The overall title of the matrix to be formatted.</param>
      <param>aggr the aggregation functions to be applied to columns, rows.</param>
      <return>the matrix converted to a string.</return>
      <see>hep.aida.bin.BinFunction1D</see>
      <see>hep.aida.bin.BinFunctions1D</see>
    </javadoc>
    <method type="String" name="toTitleString" startLine="774" endLine="782">
      <declaration type="StringBuffer" name="buf" />
      <scope startLine="777" endLine="780" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the given matrix with axis as well as rows and columns labeled.
 * Pass <tt>null</tt> to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.</text>
      <param>matrix The matrix to format.</param>
      <param>sliceNames The headers of all slices (to be put above each slice).</param>
      <param>rowNames The headers of all rows (to be put to the left of the matrix).</param>
      <param>columnNames The headers of all columns (to be put to above the matrix).</param>
      <param>sliceAxisName The label of the z-axis (to be put above each slice).</param>
      <param>rowAxisName The label of the y-axis.</param>
      <param>columnAxisName The label of the x-axis.</param>
      <param>title The overall title of the matrix to be formatted.</param>
      <return>the matrix converted to a string.</return>
    </javadoc>
    <method type="String" name="xtoTitleString" startLine="797" endLine="805">
      <declaration type="StringBuffer" name="buf" />
      <scope startLine="800" endLine="803" />
    </method>
  </class>
</source>
