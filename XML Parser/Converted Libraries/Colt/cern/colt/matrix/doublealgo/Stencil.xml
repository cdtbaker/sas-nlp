<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.doublealgo">
  <import name="cern.colt.matrix.DoubleMatrix2D" />
  <import name="cern.colt.matrix.DoubleMatrix2DProcedure" />
  <import name="cern.colt.matrix.DoubleMatrix3D" />
  <import name="cern.colt.matrix.DoubleMatrix3DProcedure" />
  <class name="Stencil" extends="Object" startLine="15">
    <javadoc>
      <text>* Stencil operations. For efficient finite difference operations.
 * Applies a function to a moving <tt>3 x 3</tt> or <tt>3 x 3 x 3</tt> window.
 * Build on top of <tt>matrix.zAssignXXXNeighbors(...)</tt>.
 * You can specify how many iterations shall at most be done, a convergence condition when iteration shall be terminated, and how many iterations shall pass between convergence checks.
 * Always does two iterations at a time for efficiency.
 * These class is for convencience and efficiency.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 01/02/2000</version>
    </javadoc>
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="Stencil" startLine="30" endLine="30" />
    <javadoc>
      <text>* 27 point stencil operation.
 * Applies a function to a moving <tt>3 x 3 x 3</tt> window.</text>
      <param>A the matrix to operate on.</param>
      <param>function the function to be applied to each window.</param>
      <param>maxIterations the maximum number of times the stencil shall be applied to the matrix. 
 * Should be a multiple of 2 because two iterations are always done in one atomic step.</param>
      <param>hasConverged Convergence condition; will return before maxIterations are done when <tt>hasConverged.apply(A)==true</tt>.
 * Set this parameter to <tt>null</tt> to indicate that no convergence checks shall be made.</param>
      <param>convergenceIterations the number of iterations to pass between each convergence check.
 * (Since a convergence may be expensive, you may want to do it only every 2,4 or 8 iterations.)</param>
      <return>the number of iterations actually executed.</return>
    </javadoc>
    <method type="int" name="stencil27" startLine="44" endLine="59">
      <declaration type="DoubleMatrix3D" name="B" />
      <declaration type="int" name="i" />
      <scope startLine="50" endLine="57">
        <scope startLine="54" endLine="56" />
        <comment>do two steps at a time for efficiency</comment>
      </scope>
      <comment>odd -> make it even</comment>
    </method>
    <javadoc>
      <text>* 9 point stencil operation.
 * Applies a function to a moving <tt>3 x 3</tt> window.</text>
      <param>A the matrix to operate on.</param>
      <param>function the function to be applied to each window.</param>
      <param>maxIterations the maximum number of times the stencil shall be applied to the matrix. 
 * Should be a multiple of 2 because two iterations are always done in one atomic step.</param>
      <param>hasConverged Convergence condition; will return before maxIterations are done when <tt>hasConverged.apply(A)==true</tt>.
 * Set this parameter to <tt>null</tt> to indicate that no convergence checks shall be made.</param>
      <param>convergenceIterations the number of iterations to pass between each convergence check.
 * (Since a convergence may be expensive, you may want to do it only every 2,4 or 8 iterations.)</param>
      <return>the number of iterations actually executed.</return>
    </javadoc>
    <method type="int" name="stencil9" startLine="73" endLine="88">
      <declaration type="DoubleMatrix2D" name="B" />
      <declaration type="int" name="i" />
      <scope startLine="79" endLine="86">
        <scope startLine="83" endLine="85" />
        <comment>do two steps at a time for efficiency</comment>
      </scope>
      <comment>odd -> make it even</comment>
    </method>
  </class>
</source>
