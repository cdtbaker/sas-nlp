<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix">
  <import name="cern.colt.matrix.impl.DenseObjectMatrix2D" />
  <import name="cern.colt.matrix.impl.SparseObjectMatrix2D" />
  <class name="ObjectFactory2D" extends="cern.colt.PersistentObject" startLine="13">
    <javadoc>
      <text>* Factory for convenient construction of 2-d matrices holding <tt>Object</tt> 
 * cells. Also provides convenient methods to compose (concatenate) and decompose 
 * (split) matrices from/to constituent blocks. </p>
 * <p>&nbsp; </p>
 * <table border="0" cellspacing="0">
 * <tr align="left" valign="top"> 
 * <td><i>Construction</i></td>
 * <td>Use idioms like <tt>ObjectFactory2D.dense.make(4,4)</tt> to construct 
 * dense matrices, <tt>ObjectFactory2D.sparse.make(4,4)</tt> to construct sparse 
 * matrices.</td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td><i> Construction with initial values </i></td>
 * <td>Use other <tt>make</tt> methods to construct matrices with given initial 
 * values. </td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td><i> Appending rows and columns </i></td>
 * <td>Use methods {@link #appendColumns(ObjectMatrix2D,ObjectMatrix2D) appendColumns}, {@link #appendColumns(ObjectMatrix2D,ObjectMatrix2D) appendRows} and {@link #repeat(ObjectMatrix2D,int,int) repeat} to append rows and columns. </td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td><i> General block matrices </i></td>
 * <td>Use methods {@link #compose(ObjectMatrix2D[][]) compose} and {@link #decompose(ObjectMatrix2D[][],ObjectMatrix2D) 
 * decompose} to work with general block matrices. </td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td><i> Diagonal block matrices </i></td>
 * <td>Use method {@link #composeDiagonal(ObjectMatrix2D,ObjectMatrix2D,ObjectMatrix2D) 
 * composeDiagonal} to work with diagonal block matrices. </td>
 * </tr>
 * </table>
 * <p>&nbsp;</p>
 * <p>If the factory is used frequently it might be useful to streamline the notation. 
 * For example by aliasing: </p>
 * <table>
 * <td class="PRE"> 
 * <pre>
 * ObjectFactory2D F = ObjectFactory2D.dense;
 * F.make(4,4);
 * ...
 * </pre>
 * </td>
 * </table></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <javadoc>
      <text>* A factory producing dense matrices.</text>
    </javadoc>
    <declaration type="ObjectFactory2D" name="dense" />
    <javadoc>
      <text>* A factory producing sparse matrices.</text>
    </javadoc>
    <declaration type="ObjectFactory2D" name="sparse" />
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="ObjectFactory2D" startLine="76" endLine="76" />
    <javadoc>
      <text>* C = A||B; Constructs a new matrix which is the column-wise concatenation of two other matrices.
 * <pre>
 * 0 1 2
 * 3 4 5
 * appendColumns
 * 6 7
 * 8 9
 * -->
 * 0 1 2 6 7 
 * 3 4 5 8 9
 * </pre></text>
    </javadoc>
    <method type="ObjectMatrix2D" name="appendColumns" startLine="90" endLine="103">
      <declaration type="int" name="ac" />
      <declaration type="int" name="bc" />
      <declaration type="int" name="r" />
      <declaration type="ObjectMatrix2D" name="matrix" />
      <comment>force both to have maximal shared number of rows.</comment>
      <comment>concatenate</comment>
    </method>
    <javadoc>
      <text>* C = A||B; Constructs a new matrix which is the row-wise concatenation of two other matrices.
 * <pre>
 * 0 1 
 * 2 3 
 * 4 5
 * appendRows
 * 6 7
 * 8 9
 * -->
 * 0 1 
 * 2 3 
 * 4 5
 * 6 7
 * 8 9
 * </pre></text>
    </javadoc>
    <method type="ObjectMatrix2D" name="appendRows" startLine="121" endLine="134">
      <declaration type="int" name="ar" />
      <declaration type="int" name="br" />
      <declaration type="int" name="c" />
      <declaration type="ObjectMatrix2D" name="matrix" />
      <comment>force both to have maximal shared number of columns.</comment>
      <comment>concatenate</comment>
    </method>
    <javadoc>
      <text>* Checks whether the given array is rectangular, that is, whether all rows have the same number of columns.</text>
      <throws>IllegalArgumentException if the array is not rectangular.</throws>
    </javadoc>
    <method type="void" name="checkRectangularShape" startLine="139" endLine="147">
      <declaration type="int" name="columns" />
      <scope startLine="141" endLine="146">
        <scope startLine="142" endLine="145" />
      </scope>
    </method>
    <javadoc>
      <text>* Checks whether the given array is rectangular, that is, whether all rows have the same number of columns.</text>
      <throws>IllegalArgumentException if the array is not rectangular.</throws>
    </javadoc>
    <method type="void" name="checkRectangularShape" startLine="152" endLine="160">
      <declaration type="int" name="columns" />
      <scope startLine="154" endLine="159">
        <scope startLine="155" endLine="158" />
      </scope>
    </method>
    <javadoc>
      <text>* Constructs a block matrix made from the given parts.
 * The inverse to method {@link #decompose(ObjectMatrix2D[][],ObjectMatrix2D)}.
 * <p>
 * All matrices of a given column within <tt>parts</tt> must have the same number of columns.
 * All matrices of a given row within <tt>parts</tt> must have the same number of rows.
 * Otherwise an <tt>IllegalArgumentException</tt> is thrown. 
 * Note that <tt>null</tt>s within <tt>parts[row,col]</tt> are an exception to this rule: they are ignored.
 * Cells are copied.
 * Example:
 * <table border="1" cellspacing="0">
 * <tr align="left" valign="top"> 
 * <td><tt>Code</tt></td>
 * <td><tt>Result</tt></td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td> 
 * <pre>
 * ObjectMatrix2D[][] parts1 = 
 * {
 * &nbsp;&nbsp;&nbsp;{ null,        make(2,2,1), null        },
 * &nbsp;&nbsp;&nbsp;{ make(4,4,2), null,        make(4,3,3) },
 * &nbsp;&nbsp;&nbsp;{ null,        make(2,2,4), null        }
 * };
 * System.out.println(compose(parts1));
 * </pre>
 * </td>
 * <td><tt>8&nbsp;x&nbsp;9&nbsp;matrix<br>
 * 0&nbsp;0&nbsp;0&nbsp;0&nbsp;1&nbsp;1&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;0&nbsp;1&nbsp;1&nbsp;0&nbsp;0&nbsp;0<br>
 * 2&nbsp;2&nbsp;2&nbsp;2&nbsp;0&nbsp;0&nbsp;3&nbsp;3&nbsp;3<br>
 * 2&nbsp;2&nbsp;2&nbsp;2&nbsp;0&nbsp;0&nbsp;3&nbsp;3&nbsp;3<br>
 * 2&nbsp;2&nbsp;2&nbsp;2&nbsp;0&nbsp;0&nbsp;3&nbsp;3&nbsp;3<br>
 * 2&nbsp;2&nbsp;2&nbsp;2&nbsp;0&nbsp;0&nbsp;3&nbsp;3&nbsp;3<br>
 * 0&nbsp;0&nbsp;0&nbsp;0&nbsp;4&nbsp;4&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;0&nbsp;4&nbsp;4&nbsp;0&nbsp;0&nbsp;0</tt></td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td> 
 * <pre>
 * ObjectMatrix2D[][] parts3 = 
 * {
 * &nbsp;&nbsp;&nbsp;{ identity(3),               null,                        },
 * &nbsp;&nbsp;&nbsp;{ null,                      identity(3).viewColumnFlip() },
 * &nbsp;&nbsp;&nbsp;{ identity(3).viewRowFlip(), null                         }
 * };
 * System.out.println("\n"+make(parts3));
 * </pre>
 * </td>
 * <td><tt>9&nbsp;x&nbsp;6&nbsp;matrix<br>
 * 1&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;1&nbsp;0&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;1&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;1<br>
 * 0&nbsp;0&nbsp;0&nbsp;0&nbsp;1&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;1&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;1&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;1&nbsp;0&nbsp;0&nbsp;0&nbsp;0<br>
 * 1&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0 </tt></td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td> 
 * <pre>
 * ObjectMatrix2D A = ascending(2,2);
 * ObjectMatrix2D B = descending(2,2);
 * ObjectMatrix2D _ = null;
 * ObjectMatrix2D[][] parts4 = 
 * {
 * &nbsp;&nbsp;&nbsp;{ A, _, A, _ },
 * &nbsp;&nbsp;&nbsp;{ _, A, _, B }
 * };
 * System.out.println("\n"+make(parts4));
 * </pre>
 * </td>
 * <td><tt>4&nbsp;x&nbsp;8&nbsp;matrix<br>
 * 1&nbsp;2&nbsp;0&nbsp;0&nbsp;1&nbsp;2&nbsp;0&nbsp;0<br>
 * 3&nbsp;4&nbsp;0&nbsp;0&nbsp;3&nbsp;4&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;1&nbsp;2&nbsp;0&nbsp;0&nbsp;3&nbsp;2<br>
 * 0&nbsp;0&nbsp;3&nbsp;4&nbsp;0&nbsp;0&nbsp;1&nbsp;0 </tt></td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td> 
 * <pre>
 * ObjectMatrix2D[][] parts2 = 
 * {
 * &nbsp;&nbsp;&nbsp;{ null,        make(2,2,1), null        },
 * &nbsp;&nbsp;&nbsp;{ make(4,4,2), null,        make(4,3,3) },
 * &nbsp;&nbsp;&nbsp;{ null,        make(2,3,4), null        }
 * };
 * System.out.println("\n"+Factory2D.make(parts2));
 * </pre>
 * </td>
 * <td><tt>IllegalArgumentException<br>
 * A[0,1].cols != A[2,1].cols<br>
 * (2 != 3)</tt></td>
 * </tr>
 * </table></text>
      <throws>IllegalArgumentException subject to the conditions outlined above.</throws>
    </javadoc>
    <method type="ObjectMatrix2D" name="compose" startLine="261" endLine="324">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <declaration type="ObjectMatrix2D" name="empty" />
      <declaration type="int[]" name="maxWidths" />
      <scope startLine="272" endLine="283">
        <declaration type="int" name="maxWidth" />
        <scope startLine="274" endLine="281">
          <declaration type="ObjectMatrix2D" name="part" />
          <scope startLine="276" endLine="280">
            <declaration type="int" name="width" />
          </scope>
        </scope>
      </scope>
      <declaration type="int[]" name="maxHeights" />
      <scope startLine="287" endLine="298">
        <declaration type="int" name="maxHeight" />
        <scope startLine="289" endLine="296">
          <declaration type="ObjectMatrix2D" name="part" />
          <scope startLine="291" endLine="295">
            <declaration type="int" name="height" />
          </scope>
        </scope>
      </scope>
      <declaration type="int" name="resultRows" />
      <declaration type="int" name="resultCols" />
      <declaration type="ObjectMatrix2D" name="matrix" />
      <declaration type="int" name="r" />
      <scope startLine="311" endLine="321">
        <declaration type="int" name="c" />
        <scope startLine="313" endLine="319">
          <declaration type="ObjectMatrix2D" name="part" />
          <scope startLine="315" endLine="317" />
        </scope>
      </scope>
      <comment>determine maximum column width of each column</comment>
      <comment>determine row height of each row</comment>
      <comment>shape of result</comment>
      <comment>copy</comment>
    </method>
    <javadoc>
      <text>* Constructs a diagonal block matrix from the given parts (the <i>direct sum</i> of two matrices).
 * That is the concatenation
 * <pre>
 * A 0
 * 0 B
 * </pre>
 * (The direct sum has <tt>A.rows()+B.rows()</tt> rows and <tt>A.columns()+B.columns()</tt> columns).
 * Cells are copied.</text>
      <return>a new matrix which is the direct sum.</return>
    </javadoc>
    <method type="ObjectMatrix2D" name="composeDiagonal" startLine="336" endLine="343">
      <declaration type="int" name="ar" />
      <declaration type="int" name="ac" />
      <declaration type="int" name="br" />
      <declaration type="int" name="bc" />
      <declaration type="ObjectMatrix2D" name="sum" />
    </method>
    <javadoc>
      <text>* Constructs a diagonal block matrix from the given parts.
 * The concatenation has the form
 * <pre>
 * A 0 0
 * 0 B 0
 * 0 0 C
 * </pre>
 * from the given parts.
 * Cells are copied.</text>
    </javadoc>
    <method type="ObjectMatrix2D" name="composeDiagonal" startLine="355" endLine="361">
      <declaration type="ObjectMatrix2D" name="diag" />
    </method>
    <javadoc>
      <text>* Splits a block matrix into its constituent blocks; Copies blocks of a matrix into the given parts.
 * The inverse to method {@link #compose(ObjectMatrix2D[][])}.
 * <p>
 * All matrices of a given column within <tt>parts</tt> must have the same number of columns.
 * All matrices of a given row within <tt>parts</tt> must have the same number of rows.
 * Otherwise an <tt>IllegalArgumentException</tt> is thrown. 
 * Note that <tt>null</tt>s within <tt>parts[row,col]</tt> are an exception to this rule: they are ignored.
 * Cells are copied.
 * Example:
 * <table border="1" cellspacing="0">
 * <tr align="left" valign="top"> 
 * <td><tt>Code</tt></td>
 * <td><tt>matrix</tt></td>
 * <td><tt>--&gt; parts </tt></td>
 * </tr>
 * <tr align="left" valign="top"> 
 * <td> 
 * <pre>
 * ObjectMatrix2D matrix = ... ;
 * ObjectMatrix2D _ = null;
 * ObjectMatrix2D A,B,C,D;
 * A = make(2,2); B = make (4,4);
 * C = make(4,3); D = make (2,2);
 * ObjectMatrix2D[][] parts = 
 * {
 * &nbsp;&nbsp;&nbsp;{ _, A, _ },
 * &nbsp;&nbsp;&nbsp;{ B, _, C },
 * &nbsp;&nbsp;&nbsp;{ _, D, _ }
 * };
 * decompose(parts,matrix);
 * System.out.println(&quot;\nA = &quot;+A);
 * System.out.println(&quot;\nB = &quot;+B);
 * System.out.println(&quot;\nC = &quot;+C);
 * System.out.println(&quot;\nD = &quot;+D);
 * </pre>
 * </td>
 * <td><tt>8&nbsp;x&nbsp;9&nbsp;matrix<br>
 * 9&nbsp;9&nbsp;9&nbsp;9&nbsp;1&nbsp;1&nbsp;9&nbsp;9&nbsp;9<br>
 * 9&nbsp;9&nbsp;9&nbsp;9&nbsp;1&nbsp;1&nbsp;9&nbsp;9&nbsp;9<br>
 * 2&nbsp;2&nbsp;2&nbsp;2&nbsp;9&nbsp;9&nbsp;3&nbsp;3&nbsp;3<br>
 * 2&nbsp;2&nbsp;2&nbsp;2&nbsp;9&nbsp;9&nbsp;3&nbsp;3&nbsp;3<br>
 * 2&nbsp;2&nbsp;2&nbsp;2&nbsp;9&nbsp;9&nbsp;3&nbsp;3&nbsp;3<br>
 * 2&nbsp;2&nbsp;2&nbsp;2&nbsp;9&nbsp;9&nbsp;3&nbsp;3&nbsp;3<br>
 * 9&nbsp;9&nbsp;9&nbsp;9&nbsp;4&nbsp;4&nbsp;9&nbsp;9&nbsp;9<br>
 * 9&nbsp;9&nbsp;9&nbsp;9&nbsp;4&nbsp;4&nbsp;9&nbsp;9&nbsp;9</tt></td>
 * <td> 
 * <p><tt>A = 2&nbsp;x&nbsp;2&nbsp;matrix<br>
 * 1&nbsp;1<br>
 * 1&nbsp;1</tt></p>
 * <p><tt>B = 4&nbsp;x&nbsp;4&nbsp;matrix<br>
 * 2&nbsp;2&nbsp;2&nbsp;2<br>
 * 2&nbsp;2&nbsp;2&nbsp;2<br>
 * 2&nbsp;2&nbsp;2&nbsp;2<br>
 * 2&nbsp;2&nbsp;2&nbsp;2</tt></p>
 * <p><tt>C = 4&nbsp;x&nbsp;3&nbsp;matrix<br>
 * 3&nbsp;3&nbsp;3<br>
 * 3&nbsp;3&nbsp;3<br>
 * </tt><tt>3&nbsp;3&nbsp;3<br>
 * </tt><tt>3&nbsp;3&nbsp;3</tt></p>
 * <p><tt>D = 2&nbsp;x&nbsp;2&nbsp;matrix<br>
 * 4&nbsp;4<br>
 * 4&nbsp;4</tt></p>
 * </td>
 * </tr>
 * </table></text>
      <throws>IllegalArgumentException subject to the conditions outlined above.</throws>
    </javadoc>
    <method type="void" name="decompose" startLine="430" endLine="490">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <declaration type="int[]" name="maxWidths" />
      <scope startLine="439" endLine="450">
        <declaration type="int" name="maxWidth" />
        <scope startLine="441" endLine="448">
          <declaration type="ObjectMatrix2D" name="part" />
          <scope startLine="443" endLine="447">
            <declaration type="int" name="width" />
          </scope>
        </scope>
      </scope>
      <declaration type="int[]" name="maxHeights" />
      <scope startLine="454" endLine="465">
        <declaration type="int" name="maxHeight" />
        <scope startLine="456" endLine="463">
          <declaration type="ObjectMatrix2D" name="part" />
          <scope startLine="458" endLine="462">
            <declaration type="int" name="height" />
          </scope>
        </scope>
      </scope>
      <declaration type="int" name="resultRows" />
      <declaration type="int" name="resultCols" />
      <declaration type="int" name="r" />
      <scope startLine="478" endLine="488">
        <declaration type="int" name="c" />
        <scope startLine="480" endLine="486">
          <declaration type="ObjectMatrix2D" name="part" />
          <scope startLine="482" endLine="484" />
        </scope>
      </scope>
      <comment>determine maximum column width of each column</comment>
      <comment>determine row height of each row</comment>
      <comment>shape of result parts</comment>
      <comment>copy</comment>
    </method>
    <javadoc>
      <text>* Constructs a new diagonal matrix whose diagonal elements are the elements of <tt>vector</tt>.
 * Cells values are copied. The new matrix is not a view.
 * Example:
 * <pre>
 * 5 4 3 -->
 * 5 0 0
 * 0 4 0
 * 0 0 3
 * </pre></text>
      <return>a new matrix.</return>
    </javadoc>
    <method type="ObjectMatrix2D" name="diagonal" startLine="503" endLine="510">
      <declaration type="int" name="size" />
      <declaration type="ObjectMatrix2D" name="diag" />
      <scope startLine="506" endLine="508" />
    </method>
    <javadoc>
      <text>* Constructs a new vector consisting of the diagonal elements of <tt>A</tt>.
 * Cells values are copied. The new vector is not a view.
 * Example:
 * <pre>
 * 5 0 0 9
 * 0 4 0 9
 * 0 0 3 9
 * --> 5 4 3
 * </pre></text>
      <param>A the matrix, need not be square.</param>
      <return>a new vector.</return>
    </javadoc>
    <method type="ObjectMatrix1D" name="diagonal" startLine="524" endLine="531">
      <declaration type="int" name="min" />
      <declaration type="ObjectMatrix1D" name="diag" />
      <scope startLine="527" endLine="529" />
    </method>
    <javadoc>
      <text>* Constructs a matrix with the given cell values.
 * <tt>values</tt> is required to have the form <tt>values[row][column]</tt>
 * and have exactly the same number of columns in every row.
 * <p>
 * The values are copied. So subsequent changes in <tt>values</tt> are not reflected in the matrix, and vice-versa.</text>
      <param>values The values to be filled into the new matrix.</param>
      <throws>IllegalArgumentException if <tt>for any 1 &lt;= row &lt; values.length: values[row].length != values[row-1].length</tt>.</throws>
    </javadoc>
    <method type="ObjectMatrix2D" name="make" startLine="542" endLine="545" />
    <javadoc>
      <text>* Construct a matrix from a one-dimensional column-major packed array, ala Fortran.
 * Has the form <tt>matrix.get(row,column) == values[row + column*rows]</tt>.
 * The values are copied.</text>
      <param>values One-dimensional array of Objects, packed by columns (ala Fortran).</param>
      <param>rows  the number of rows.</param>
      <exception>IllegalArgumentException <tt>values.length</tt> must be a multiple of <tt>rows</tt>.</exception>
    </javadoc>
    <method type="ObjectMatrix2D" name="make" startLine="555" endLine="567">
      <declaration type="int" name="columns" />
      <declaration type="ObjectMatrix2D" name="matrix" />
      <scope startLine="561" endLine="565">
        <scope startLine="562" endLine="564" />
      </scope>
    </method>
    <javadoc>
      <text>* Constructs a matrix with the given shape, each cell initialized with zero.</text>
    </javadoc>
    <method type="ObjectMatrix2D" name="make" startLine="571" endLine="574" />
    <javadoc>
      <text>* Constructs a matrix with the given shape, each cell initialized with the given value.</text>
    </javadoc>
    <method type="ObjectMatrix2D" name="make" startLine="578" endLine="581" />
    <javadoc>
      <text>* Constructs a 1d matrix of the right dynamic type.</text>
    </javadoc>
    <method type="ObjectMatrix1D" name="make1D" startLine="585" endLine="587" />
    <javadoc>
      <text>* C = A||A||..||A; Constructs a new matrix which is duplicated both along the row and column dimension.
 * Example:
 * <pre>
 * 0 1
 * 2 3
 * repeat(2,3) -->
 * 0 1 0 1 0 1
 * 2 3 2 3 2 3
 * 0 1 0 1 0 1
 * 2 3 2 3 2 3
 * </pre></text>
    </javadoc>
    <method type="ObjectMatrix2D" name="repeat" startLine="601" endLine="611">
      <declaration type="int" name="r" />
      <declaration type="int" name="c" />
      <declaration type="ObjectMatrix2D" name="matrix" />
      <scope startLine="605" endLine="609">
        <scope startLine="606" endLine="608" />
      </scope>
    </method>
  </class>
</source>
