<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix">
  <import name="cern.colt.matrix.impl.DenseObjectMatrix3D" />
  <import name="cern.colt.matrix.impl.SparseObjectMatrix3D" />
  <class name="ObjectFactory3D" extends="cern.colt.PersistentObject" startLine="13">
    <javadoc>
      <text>* Factory for convenient construction of 3-d matrices holding <tt>Object</tt> cells. 
 * Use idioms like <tt>ObjectFactory3D.dense.make(4,4,4)</tt> to construct dense matrices, 
 * <tt>ObjectFactory3D.sparse.make(4,4,4)</tt> to construct sparse matrices.
 * If the factory is used frequently it might be useful to streamline the notation. 
 * For example by aliasing:
 * <table>
 * <td class="PRE"> 
 * <pre>
 * ObjectFactory3D F = ObjectFactory3D.dense;
 * F.make(4,4,4);
 * ...
 * </pre>
 * </td>
 * </table></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <javadoc>
      <text>* A factory producing dense matrices.</text>
    </javadoc>
    <declaration type="ObjectFactory3D" name="dense" />
    <javadoc>
      <text>* A factory producing sparse matrices.</text>
    </javadoc>
    <declaration type="ObjectFactory3D" name="sparse" />
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="ObjectFactory3D" startLine="46" endLine="46" />
    <javadoc>
      <text>* Constructs a matrix with the given cell values.
 * <tt>values</tt> is required to have the form <tt>values[slice][row][column]</tt>
 * and have exactly the same number of slices, rows and columns as the receiver.
 * <p>
 * The values are copied. So subsequent changes in <tt>values</tt> are not reflected in the matrix, and vice-versa.</text>
      <param>values the values to be filled into the cells.</param>
      <return><tt>this</tt> (for convenience only).</return>
      <throws>IllegalArgumentException if <tt>values.length != slices() || for any 0 &lt;= slice &lt; slices(): values[slice].length != rows()</tt>.</throws>
      <throws>IllegalArgumentException if <tt>for any 0 &lt;= column &lt; columns(): values[slice][row].length != columns()</tt>.</throws>
    </javadoc>
    <method type="ObjectMatrix3D" name="make" startLine="59" endLine="62" />
    <javadoc>
      <text>* Constructs a matrix with the given shape, each cell initialized with zero.</text>
    </javadoc>
    <method type="ObjectMatrix3D" name="make" startLine="66" endLine="69" />
    <javadoc>
      <text>* Constructs a matrix with the given shape, each cell initialized with the given value.</text>
    </javadoc>
    <method type="ObjectMatrix3D" name="make" startLine="73" endLine="75" />
  </class>
</source>
