<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.linalg">
  <import name="cern.colt.matrix.DoubleMatrix1D" />
  <import name="cern.colt.matrix.DoubleMatrix2D" />
  <class name="QRDecomposition" startLine="14">
    <implements name="java.io.Serializable" />
    <javadoc>
      <text>* For an <tt>m x n</tt> matrix <tt>A</tt> with <tt>m >= n</tt>, the QR decomposition is an <tt>m x n</tt>
 * orthogonal matrix <tt>Q</tt> and an <tt>n x n</tt> upper triangular matrix <tt>R</tt> so that
 * <tt>A = Q*R</tt>.
 * <P>
 * The QR decompostion always exists, even if the matrix does not have
 * full rank, so the constructor will never fail.  The primary use of the
 * QR decomposition is in the least squares solution of nonsquare systems
 * of simultaneous linear equations.  This will fail if <tt>isFullRank()</tt>
 * returns <tt>false</tt>.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Array for internal storage of decomposition.</text>
      <serial>internal array storage.</serial>
    </javadoc>
    <declaration type="DoubleMatrix2D" name="QR" />
    <javadoc>
      <text>* Row and column dimensions.</text>
      <serial>column dimension.</serial>
      <serial>row dimension.</serial>
    </javadoc>
    <declaration type="int" name="m" />
    <javadoc>
      <text>* Array for internal storage of diagonal of R.</text>
      <serial>diagonal of R.</serial>
    </javadoc>
    <declaration type="DoubleMatrix1D" name="Rdiag" />
    <javadoc>
      <text>* Constructs and returns a new QR decomposition object;  computed by Householder reflections;
 * The decomposed matrices can be retrieved via instance methods of the returned decomposition object.</text>
      <param>A    A rectangular matrix.</param>
      <return>a decomposition object to access <tt>R</tt> and the Householder vectors <tt>H</tt>, and to compute <tt>Q</tt>.</return>
      <throws>IllegalArgumentException if <tt>A.rows() < A.columns()</tt>.</throws>
    </javadoc>
    <method type="constructor" name="QRDecomposition" startLine="51" endLine="119">
      <declaration type="cern.jet.math.Functions" name="F" />
      <declaration type="cern.colt.function.DoubleDoubleFunction" name="hypot" />
      <declaration type="DoubleMatrix1D[]" name="QRcolumns" />
      <declaration type="DoubleMatrix1D[]" name="QRcolumnsPart" />
      <scope startLine="66" endLine="69" />
      <scope startLine="72" endLine="118">
        <declaration type="double" name="nrm" />
        <scope startLine="78" endLine="80" />
        <scope startLine="83" endLine="116">
          <scope startLine="96" endLine="115">
            <declaration type="DoubleMatrix1D" name="QRcolj" />
            <declaration type="double" name="s" />
            <scope startLine="111" endLine="113" />
          </scope>
        </scope>
        <comment>DoubleMatrix1D QRcolk = QR.viewColumn(k).viewPart(k,m-k);</comment>
        <comment>Compute 2-norm of k-th column without under/overflow.</comment>
        <comment>if (k<m) nrm = QRcolumnsPart[k].aggregate(hypot,F.identity);</comment>
        <comment>fixes bug reported by hong.44@osu.edu</comment>
        <comment>Form k-th Householder vector.</comment>
        <comment>for (int i = k; i < m; i++) {
QR[i][k] = nrm;
}</comment>
        <comment>Apply transformation to remaining columns.</comment>
        <comment>fixes bug reported by John Chambers
DoubleMatrix1D QRcolj = QR.viewColumn(j).viewPart(k,m-k);
double s = QRcolumnsPart[k].zDotProduct(QRcolumns[j]);
double s = 0.0;
for (int i = k; i < m; i++) {
s += QR[i][k]QR[i][j];
}</comment>
        <comment>QRcolumnsPart[j].assign(QRcolumns[k], F.plusMult(s));</comment>
      </scope>
      <comment>Initialize.</comment>
      <comment>Rdiag = new double[n];</comment>
      <comment>precompute and cache some views to avoid regenerating them time and again</comment>
      <comment>Main loop.</comment>
    </method>
    <javadoc>
      <text>* Returns the Householder vectors <tt>H</tt>.</text>
      <return>A lower trapezoidal matrix whose columns define the householder reflections.</return>
    </javadoc>
    <method type="DoubleMatrix2D" name="getH" startLine="124" endLine="126" />
    <javadoc>
      <text>* Generates and returns the (economy-sized) orthogonal factor <tt>Q</tt>.</text>
      <return><tt>Q</tt></return>
    </javadoc>
    <method type="DoubleMatrix2D" name="getQ" startLine="131" endLine="148">
      <declaration type="cern.jet.math.Functions" name="F" />
      <declaration type="DoubleMatrix2D" name="Q" />
      <scope startLine="135" endLine="146">
        <declaration type="DoubleMatrix1D" name="QRcolk" />
        <scope startLine="138" endLine="145">
          <scope startLine="139" endLine="144">
            <declaration type="DoubleMatrix1D" name="Qcolj" />
            <declaration type="double" name="s" />
          </scope>
        </scope>
      </scope>
      <comment>double[][] Q = X.getArray();</comment>
    </method>
    <javadoc>
      <text>* Returns the upper triangular factor, <tt>R</tt>.</text>
      <return><tt>R</tt></return>
    </javadoc>
    <method type="DoubleMatrix2D" name="getR" startLine="153" endLine="166">
      <declaration type="DoubleMatrix2D" name="R" />
      <scope startLine="155" endLine="164">
        <scope startLine="156" endLine="163" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns whether the matrix <tt>A</tt> has full rank.</text>
      <return>true if <tt>R</tt>, and hence <tt>A</tt>, has full rank.</return>
    </javadoc>
    <method type="boolean" name="hasFullRank" startLine="171" endLine="176">
      <scope startLine="172" endLine="174" />
    </method>
    <javadoc>
      <text>* Least squares solution of <tt>A*X = B</tt>; <tt>returns X</tt>.</text>
      <param>B    A matrix with as many rows as <tt>A</tt> and any number of columns.</param>
      <return><tt>X</tt> that minimizes the two norm of <tt>Q*R*X - B</tt>.</return>
      <exception>IllegalArgumentException  if <tt>B.rows() != A.rows()</tt>.</exception>
      <exception>IllegalArgumentException  if <tt>!this.hasFullRank()</tt> (<tt>A</tt> is rank deficient).</exception>
    </javadoc>
    <method type="DoubleMatrix2D" name="solve" startLine="184" endLine="222">
      <declaration type="cern.jet.math.Functions" name="F" />
      <scope startLine="186" endLine="188" />
      <scope startLine="189" endLine="191" />
      <declaration type="int" name="nx" />
      <declaration type="DoubleMatrix2D" name="X" />
      <scope startLine="198" endLine="209">
        <scope startLine="199" endLine="208">
          <declaration type="double" name="s" />
          <scope startLine="201" endLine="203" />
          <scope startLine="205" endLine="207" />
        </scope>
      </scope>
      <scope startLine="211" endLine="220">
        <scope startLine="212" endLine="214" />
        <scope startLine="215" endLine="219">
          <scope startLine="216" endLine="218" />
        </scope>
      </scope>
      <comment>Copy right hand side</comment>
      <comment>Compute Y = transpose(Q)*B</comment>
      <comment>Solve R*X = Y;</comment>
    </method>
    <javadoc>
      <text>* Returns a String with (propertyName, propertyValue) pairs.
 * Useful for debugging or to quickly get the rough picture.
 * For example,
 * <pre>
 * rank          : 3
 * trace         : 0
 * </pre></text>
    </javadoc>
    <method type="String" name="toString" startLine="232" endLine="261">
      <declaration type="StringBuffer" name="buf" />
      <declaration type="String" name="unknown" />
      <scope startLine="241" endLine="241" />
      <scope startLine="242" endLine="242" />
      <scope startLine="245" endLine="245" />
      <scope startLine="246" endLine="246" />
      <scope startLine="249" endLine="249" />
      <scope startLine="250" endLine="250" />
      <scope startLine="253" endLine="253" />
      <scope startLine="254" endLine="254" />
      <scope startLine="257" endLine="257" />
      <scope startLine="258" endLine="258" />
    </method>
    <comment>private double[][] QR;</comment>
  </class>
</source>
