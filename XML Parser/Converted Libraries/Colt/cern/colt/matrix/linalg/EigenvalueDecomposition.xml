<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.linalg">
  <import name="cern.colt.matrix.DoubleFactory1D" />
  <import name="cern.colt.matrix.DoubleFactory2D" />
  <import name="cern.colt.matrix.DoubleMatrix1D" />
  <import name="cern.colt.matrix.DoubleMatrix2D" />
  <class name="EigenvalueDecomposition" startLine="15">
    <implements name="java.io.Serializable" />
    <javadoc>
      <text>* Eigenvalues and eigenvectors of a real matrix <tt>A</tt>. 
 * <P>
 * If <tt>A</tt> is symmetric, then <tt>A = V*D*V'</tt> where the eigenvalue matrix <tt>D</tt> is
 * diagonal and the eigenvector matrix <tt>V</tt> is orthogonal.
 * I.e. <tt>A = V.mult(D.mult(transpose(V)))</tt> and 
 * <tt>V.mult(transpose(V))</tt> equals the identity matrix.
 * <P>
 * If <tt>A</tt> is not symmetric, then the eigenvalue matrix <tt>D</tt> is block diagonal
 * with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
 * <tt>lambda + i*mu</tt>, in 2-by-2 blocks, <tt>[lambda, mu; -mu, lambda]</tt>. 
 * The columns of <tt>V</tt> represent the eigenvectors in the sense that <tt>A*V = V*D</tt>,
 * i.e. <tt>A.mult(V) equals V.mult(D)</tt>.  The matrix <tt>V</tt> may be badly
 * conditioned, or even singular, so the validity of the equation
 * <tt>A = V*D*inverse(V)</tt> depends upon <tt>Algebra.cond(V)</tt>.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Row and column dimension (square matrix).</text>
      <serial>matrix dimension.</serial>
    </javadoc>
    <declaration type="int" name="n" />
    <javadoc>
      <text>* Symmetry flag.</text>
      <serial>internal symmetry flag.</serial>
    </javadoc>
    <declaration type="boolean" name="issymmetric" />
    <javadoc>
      <text>* Arrays for internal storage of eigenvalues.</text>
      <serial>internal storage of eigenvalues.</serial>
    </javadoc>
    <declaration type="double[]" name="d" />
    <javadoc>
      <text>* Array for internal storage of eigenvectors.</text>
      <serial>internal storage of eigenvectors.</serial>
    </javadoc>
    <declaration type="double[][]" name="V" />
    <javadoc>
      <text>* Array for internal storage of nonsymmetric Hessenberg form.</text>
      <serial>internal storage of nonsymmetric Hessenberg form.</serial>
    </javadoc>
    <declaration type="double[][]" name="H" />
    <javadoc>
      <text>* Working storage for nonsymmetric algorithm.</text>
      <serial>working storage for nonsymmetric algorithm.</serial>
    </javadoc>
    <declaration type="double[]" name="ort" />
    <declaration type="double" name="cdivr" />
    <javadoc>
      <text>* Constructs and returns a new eigenvalue decomposition object; 
 * The decomposed matrices can be retrieved via instance methods of the returned decomposition object.
 * Checks for symmetry, then constructs the eigenvalue decomposition.</text>
      <param>A    A square matrix.</param>
      <return>A decomposition object to access <tt>D</tt> and <tt>V</tt>.</return>
      <throws>IllegalArgumentException if <tt>A</tt> is not square.</throws>
    </javadoc>
    <method type="constructor" name="EigenvalueDecomposition" startLine="75" endLine="115">
      <scope startLine="85" endLine="98">
        <scope startLine="86" endLine="90">
          <scope startLine="87" endLine="89" />
        </scope>
        <comment>Tridiagonalize.</comment>
        <comment>Diagonalize.</comment>
      </scope>
      <scope startLine="99" endLine="114">
        <scope startLine="103" endLine="107">
          <scope startLine="104" endLine="106" />
        </scope>
        <comment>Reduce to Hessenberg form.</comment>
        <comment>Reduce Hessenberg to real Schur form.</comment>
      </scope>
    </method>
    <method type="void" name="cdiv" startLine="116" endLine="130">
      <declaration type="double" name="r" />
      <scope startLine="118" endLine="123" />
      <scope startLine="124" endLine="129" />
    </method>
    <javadoc>
      <text>* Returns the block diagonal eigenvalue matrix, <tt>D</tt>.</text>
      <return><tt>D</tt></return>
    </javadoc>
    <method type="DoubleMatrix2D" name="getD" startLine="135" endLine="150">
      <declaration type="double[][]" name="D" />
      <scope startLine="137" endLine="148">
        <scope startLine="138" endLine="140" />
        <scope startLine="142" endLine="144" />
        <scope startLine="145" endLine="147" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the imaginary parts of the eigenvalues.</text>
      <return>imag(diag(D))</return>
    </javadoc>
    <method type="DoubleMatrix1D" name="getImagEigenvalues" startLine="155" endLine="157" />
    <javadoc>
      <text>* Returns the real parts of the eigenvalues.</text>
      <return>real(diag(D))</return>
    </javadoc>
    <method type="DoubleMatrix1D" name="getRealEigenvalues" startLine="162" endLine="164" />
    <javadoc>
      <text>* Returns the eigenvector matrix, <tt>V</tt></text>
      <return><tt>V</tt></return>
    </javadoc>
    <method type="DoubleMatrix2D" name="getV" startLine="169" endLine="171" />
    <javadoc>
      <text>* Nonsymmetric reduction from Hessenberg to real Schur form.</text>
    </javadoc>
    <method type="void" name="hqr2" startLine="175" endLine="612">
      <declaration type="int" name="nn" />
      <declaration type="int" name="n" />
      <declaration type="int" name="low" />
      <declaration type="int" name="high" />
      <declaration type="double" name="eps" />
      <declaration type="double" name="exshift" />
      <declaration type="double" name="p" />
      <declaration type="double" name="norm" />
      <scope startLine="194" endLine="202">
        <scope startLine="195" endLine="198" />
        <scope startLine="199" endLine="201" />
      </scope>
      <declaration type="int" name="iter" />
      <scope startLine="207" endLine="454">
        <declaration type="int" name="l" />
        <scope startLine="212" endLine="221">
          <scope startLine="214" endLine="216" />
          <scope startLine="217" endLine="219" />
        </scope>
        <scope startLine="226" endLine="235" />
        <scope startLine="235" endLine="304">
          <scope startLine="246" endLine="293">
            <scope startLine="247" endLine="249" />
            <scope startLine="249" endLine="251" />
            <scope startLine="254" endLine="256" />
            <scope startLine="269" endLine="273" />
            <scope startLine="277" endLine="281" />
            <scope startLine="285" endLine="289" />
          </scope>
          <scope startLine="293" endLine="298" />
        </scope>
        <scope startLine="304" endLine="453">
          <scope startLine="311" endLine="314" />
          <scope startLine="318" endLine="326">
            <scope startLine="320" endLine="322" />
          </scope>
          <scope startLine="330" endLine="345">
            <scope startLine="333" endLine="344">
              <scope startLine="335" endLine="337" />
              <scope startLine="339" endLine="341" />
            </scope>
          </scope>
          <declaration type="int" name="m" />
          <scope startLine="352" endLine="372">
            <scope startLine="363" endLine="365" />
            <scope startLine="368" endLine="370" />
          </scope>
          <scope startLine="374" endLine="379">
            <scope startLine="376" endLine="378" />
          </scope>
          <scope startLine="383" endLine="452">
            <declaration type="boolean" name="notlast" />
            <scope startLine="385" endLine="395">
              <scope startLine="390" endLine="394" />
            </scope>
            <scope startLine="396" endLine="398" />
            <scope startLine="400" endLine="402" />
            <scope startLine="403" endLine="451">
              <scope startLine="404" endLine="406" />
              <scope startLine="406" endLine="408" />
              <scope startLine="418" endLine="426">
                <scope startLine="420" endLine="423" />
              </scope>
              <scope startLine="430" endLine="438">
                <scope startLine="432" endLine="435" />
              </scope>
              <scope startLine="442" endLine="450">
                <scope startLine="444" endLine="447" />
              </scope>
            </scope>
          </scope>
        </scope>
        <comment>Look for single small sub-diagonal element</comment>
        <comment>Check for convergence</comment>
        <comment>One root found</comment>
        <comment>Two roots found</comment>
        <comment>Real pair</comment>
        <comment>Row modification</comment>
        <comment>Column modification</comment>
        <comment>Accumulate transformations</comment>
        <comment>Complex pair</comment>
        <comment>No convergence yet</comment>
        <comment>Form shift</comment>
        <comment>Wilkinson's original ad hoc shift</comment>
        <comment>MATLAB's new ad hoc shift</comment>
        <comment>(Could check iteration count here.)</comment>
        <comment>Look for two consecutive small sub-diagonal elements</comment>
        <comment>Double QR step involving rows l:n and columns m:n</comment>
        <comment>Row modification</comment>
        <comment>Column modification</comment>
        <comment>Accumulate transformations</comment>
        <comment>(s != 0)</comment>
        <comment>k loop</comment>
        <comment>check convergence</comment>
        <comment>while (n >= low)</comment>
      </scope>
      <scope startLine="458" endLine="460" />
      <scope startLine="462" endLine="589">
        <scope startLine="468" endLine="517">
          <declaration type="int" name="l" />
          <scope startLine="471" endLine="513">
            <scope startLine="474" endLine="476" />
            <scope startLine="477" endLine="480" />
            <scope startLine="480" endLine="512">
              <scope startLine="482" endLine="491">
                <scope startLine="483" endLine="485" />
                <scope startLine="485" endLine="487" />
              </scope>
              <scope startLine="491" endLine="502">
                <scope startLine="497" endLine="499" />
                <scope startLine="499" endLine="501" />
              </scope>
              <scope startLine="507" endLine="511">
                <scope startLine="508" endLine="510" />
              </scope>
            </scope>
          </scope>
        </scope>
        <scope startLine="517" endLine="588">
          <declaration type="int" name="l" />
          <scope startLine="522" endLine="525" />
          <scope startLine="525" endLine="529" />
          <scope startLine="532" endLine="587">
            <declaration type="double" name="ra" />
            <scope startLine="536" endLine="539" />
            <scope startLine="542" endLine="546" />
            <scope startLine="546" endLine="586">
              <scope startLine="548" endLine="552" />
              <scope startLine="552" endLine="575">
                <scope startLine="560" endLine="563" />
                <scope startLine="567" endLine="570" />
                <scope startLine="570" endLine="574" />
              </scope>
              <scope startLine="580" endLine="585">
                <scope startLine="581" endLine="584" />
              </scope>
            </scope>
          </scope>
        </scope>
        <comment>Real vector</comment>
        <comment>Solve real equations</comment>
        <comment>Overflow control</comment>
        <comment>Complex vector</comment>
        <comment>Last vector component imaginary so matrix is triangular</comment>
        <comment>Solve complex equations</comment>
        <comment>Overflow control</comment>
      </scope>
      <scope startLine="593" endLine="599">
        <scope startLine="594" endLine="598">
          <scope startLine="595" endLine="597" />
        </scope>
      </scope>
      <scope startLine="603" endLine="611">
        <scope startLine="604" endLine="610">
          <scope startLine="606" endLine="608" />
        </scope>
      </scope>
      <comment>This is derived from the Algol procedure hqr2,</comment>
      <comment>by Martin and Wilkinson, Handbook for Auto. Comp.,</comment>
      <comment>Vol.ii-Linear Algebra, and the corresponding</comment>
      <comment>Fortran subroutine in EISPACK.</comment>
      <comment>Initialize</comment>
      <comment>Store roots isolated by balanc and compute matrix norm</comment>
      <comment>Outer loop over eigenvalue index</comment>
      <comment>Backsubstitute to find vectors of upper triangular form</comment>
      <comment>Vectors of isolated roots</comment>
      <comment>Back transformation to get eigenvectors of original matrix</comment>
    </method>
    <javadoc>
      <text>* Nonsymmetric reduction to Hessenberg form.</text>
    </javadoc>
    <method type="void" name="orthes" startLine="616" endLine="704">
      <declaration type="int" name="low" />
      <declaration type="int" name="high" />
      <scope startLine="625" endLine="676">
        <declaration type="double" name="scale" />
        <scope startLine="630" endLine="632" />
        <scope startLine="633" endLine="675">
          <declaration type="double" name="h" />
          <scope startLine="638" endLine="641" />
          <declaration type="double" name="g" />
          <scope startLine="643" endLine="645" />
          <scope startLine="652" endLine="661">
            <declaration type="double" name="f" />
            <scope startLine="654" endLine="656" />
            <scope startLine="658" endLine="660" />
          </scope>
          <scope startLine="663" endLine="672">
            <declaration type="double" name="f" />
            <scope startLine="665" endLine="667" />
            <scope startLine="669" endLine="671" />
          </scope>
        </scope>
        <comment>Scale column.</comment>
        <comment>Compute Householder transformation.</comment>
        <comment>Apply Householder similarity transformation</comment>
        <comment>H = (I-u*u'/h)*H*(I-u*u')/h)</comment>
      </scope>
      <scope startLine="680" endLine="684">
        <scope startLine="681" endLine="683" />
      </scope>
      <scope startLine="686" endLine="703">
        <scope startLine="687" endLine="702">
          <scope startLine="688" endLine="690" />
          <scope startLine="691" endLine="701">
            <declaration type="double" name="g" />
            <scope startLine="693" endLine="695" />
            <scope startLine="698" endLine="700" />
          </scope>
        </scope>
        <comment>Double division avoids possible underflow</comment>
      </scope>
      <comment>This is derived from the Algol procedures orthes and ortran,</comment>
      <comment>by Martin and Wilkinson, Handbook for Auto. Comp.,</comment>
      <comment>Vol.ii-Linear Algebra, and the corresponding</comment>
      <comment>Fortran subroutines in EISPACK.</comment>
      <comment>Accumulate transformations (Algol's ortran).</comment>
    </method>
    <javadoc>
      <text>* Returns a String with (propertyName, propertyValue) pairs.
 * Useful for debugging or to quickly get the rough picture.
 * For example,
 * <pre>
 * rank          : 3
 * trace         : 0
 * </pre></text>
    </javadoc>
    <method type="String" name="toString" startLine="714" endLine="739">
      <declaration type="StringBuffer" name="buf" />
      <declaration type="String" name="unknown" />
      <scope startLine="723" endLine="723" />
      <scope startLine="724" endLine="724" />
      <scope startLine="727" endLine="727" />
      <scope startLine="728" endLine="728" />
      <scope startLine="731" endLine="731" />
      <scope startLine="732" endLine="732" />
      <scope startLine="735" endLine="735" />
      <scope startLine="736" endLine="736" />
    </method>
    <javadoc>
      <text>* Symmetric tridiagonal QL algorithm.</text>
    </javadoc>
    <method type="void" name="tql2" startLine="743" endLine="859">
      <scope startLine="750" endLine="752" />
      <declaration type="double" name="f" />
      <declaration type="double" name="tst1" />
      <declaration type="double" name="eps" />
      <scope startLine="758" endLine="836">
        <declaration type="int" name="m" />
        <scope startLine="764" endLine="769">
          <scope startLine="765" endLine="767" />
        </scope>
        <scope startLine="774" endLine="833">
          <declaration type="int" name="iter" />
          <scope startLine="776" endLine="832">
            <declaration type="double" name="g" />
            <declaration type="double" name="p" />
            <declaration type="double" name="r" />
            <scope startLine="784" endLine="786" />
            <declaration type="double" name="dl1" />
            <declaration type="double" name="h" />
            <scope startLine="791" endLine="793" />
            <declaration type="double" name="c" />
            <declaration type="double" name="c2" />
            <declaration type="double" name="c3" />
            <declaration type="double" name="el1" />
            <declaration type="double" name="s" />
            <declaration type="double" name="s2" />
            <scope startLine="805" endLine="825">
              <scope startLine="820" endLine="824" />
            </scope>
          </scope>
        </scope>
        <comment>Find small subdiagonal element</comment>
        <comment>If m == l, d[l] is an eigenvalue,</comment>
        <comment>otherwise, iterate.</comment>
        <comment>(Could check iteration count here.)</comment>
        <comment>Compute implicit shift</comment>
        <comment>Implicit QL transformation.</comment>
        <comment>Accumulate transformation.</comment>
        <comment>Check for convergence.</comment>
      </scope>
      <scope startLine="840" endLine="858">
        <declaration type="int" name="k" />
        <declaration type="double" name="p" />
        <scope startLine="843" endLine="848">
          <scope startLine="844" endLine="847" />
        </scope>
        <scope startLine="849" endLine="857">
          <scope startLine="852" endLine="856" />
        </scope>
      </scope>
      <comment>This is derived from the Algol procedures tql2, by</comment>
      <comment>Bowdler, Martin, Reinsch, and Wilkinson, Handbook for</comment>
      <comment>Auto. Comp., Vol.ii-Linear Algebra, and the corresponding</comment>
      <comment>Fortran subroutine in EISPACK.</comment>
      <comment>Sort eigenvalues and corresponding vectors.</comment>
    </method>
    <javadoc>
      <text>* Symmetric Householder reduction to tridiagonal form.</text>
    </javadoc>
    <method type="void" name="tred2" startLine="863" endLine="977">
      <scope startLine="870" endLine="872" />
      <scope startLine="877" endLine="945">
        <declaration type="double" name="scale" />
        <declaration type="double" name="h" />
        <scope startLine="883" endLine="885" />
        <scope startLine="886" endLine="893">
          <scope startLine="888" endLine="892" />
        </scope>
        <scope startLine="893" endLine="943">
          <scope startLine="897" endLine="900" />
          <declaration type="double" name="f" />
          <declaration type="double" name="g" />
          <scope startLine="903" endLine="905" />
          <scope startLine="909" endLine="911" />
          <scope startLine="915" endLine="924">
            <scope startLine="919" endLine="922" />
          </scope>
          <scope startLine="926" endLine="929" />
          <declaration type="double" name="hh" />
          <scope startLine="931" endLine="933" />
          <scope startLine="934" endLine="942">
            <scope startLine="937" endLine="939" />
          </scope>
        </scope>
        <comment>Scale to avoid under/overflow.</comment>
        <comment>Generate Householder vector.</comment>
        <comment>Apply similarity transformation to remaining columns.</comment>
      </scope>
      <scope startLine="949" endLine="970">
        <declaration type="double" name="h" />
        <scope startLine="953" endLine="966">
          <scope startLine="954" endLine="956" />
          <scope startLine="957" endLine="965">
            <declaration type="double" name="g" />
            <scope startLine="959" endLine="961" />
            <scope startLine="962" endLine="964" />
          </scope>
        </scope>
        <scope startLine="967" endLine="969" />
      </scope>
      <scope startLine="971" endLine="974" />
      <comment>This is derived from the Algol procedures tred2 by</comment>
      <comment>Bowdler, Martin, Reinsch, and Wilkinson, Handbook for</comment>
      <comment>Auto. Comp., Vol.ii-Linear Algebra, and the corresponding</comment>
      <comment>Fortran subroutine in EISPACK.</comment>
      <comment>Householder reduction to tridiagonal form.</comment>
      <comment>Accumulate transformations.</comment>
    </method>
    <comment>Complex scalar division.</comment>
  </class>
</source>
