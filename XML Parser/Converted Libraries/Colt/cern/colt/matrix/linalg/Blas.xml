<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.linalg">
  <import name="cern.colt.matrix.DoubleMatrix1D" />
  <import name="cern.colt.matrix.DoubleMatrix2D" />
  <interface name="Blas" startLine="13">
    <javadoc>
      <text>* <p>
 * Subset of the <A HREF="http://netlib2.cs.utk.edu/blas/faq.html">BLAS</A> (Basic Linear Algebra System); 
 * High quality "building block" routines for performing basic vector and matrix operations. 
 * Because the BLAS are efficient, portable, and widely available, they're commonly used in the development
 * of high quality linear algebra software.
 * <p>
 * Mostly for compatibility with legacy notations. Most operations actually just delegate to the appropriate 
 * methods directly defined on matrices and vectors. </p>
 * <p>
 * This class implements the BLAS functions for operations on matrices from the 
 * matrix package. It follows the spirit of the <A HREF="http://math.nist.gov/javanumerics/blas.html">Draft Proposal for Java BLAS Interface</A>, 
 * by Roldan Pozo of the National Institute of Standards and Technology. Interface 
 * definitions are also identical to the Ninja interface. Because the matrix package 
 * supports sections, the interface is actually simpler. </p>
 * <p>Currently, the following operations are supported: </p>
 * <ol>
 * <li>BLAS Level 1: Vector-Vector operations </li>
 * <ul>
 * <li>ddot  : dot product of two vectors </li>
 * <li>daxpy : scalar times a vector plus a vector </li>
 * <li>drotg : construct a Givens plane rotation </li>
 * <li>drot  : apply a plane rotation </li>
 * <li>dcopy : copy vector X into vector Y </li>
 * <li>dswap : interchange vectors X and Y </li>
 * <li>dnrm2 : Euclidean norm of a vector </li>
 * <li>dasum : sum of absolute values of vector components </li>
 * <li>dscal : scale a vector by a scalar </li>
 * <li>idamax: index of element with maximum absolute value </li>
 * </ul>
 * <li>2.BLAS Level 2: Matrix-Vector operations </li>
 * <ul>
 * <li>dgemv : matrix-vector multiply with general matrix </li>
 * <li>dger  : rank-1 update on general matrix </li>
 * <li>dsymv : matrix-vector multiply with symmetric matrix </li>
 * <li>dtrmv : matrix-vector multiply with triangular matrix </li>
 * </ul>
 * <li>3.BLAS Level 3: Matrix-Matrix operations 
 * <ul>
 * <li>dgemm : matrix-matrix multiply with general matrices </li>
 * </ul>
 * </li>
 * </ol></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>0.9, 16/04/2000</version>
    </javadoc>
    <method name="assign" type="void" startLine="61" endLine="68" />
    <javadoc>
      <text>* Assigns the result of a function to each cell; <tt>x[row,col] = function(x[row,col])</tt>.</text>
      <param>A the matrix to modify.</param>
      <param>function a function object taking as argument the current cell's value.</param>
      <see>cern.jet.math.Functions</see>
    </javadoc>
    <method name="assign" type="void" startLine="69" endLine="80" />
    <javadoc>
      <text>* Assigns the result of a function to each cell; <tt>x[row,col] = function(x[row,col],y[row,col])</tt>.</text>
      <param>x the matrix to modify.</param>
      <param>y the secondary matrix to operate on.</param>
      <param>function a function object taking as first argument the current cell's value of <tt>this</tt>,
 * and as second argument the current cell's value of <tt>y</tt>,</param>
      <return><tt>this</tt> (for convenience only).</return>
      <throws>IllegalArgumentException if <tt>x.columns() != y.columns() || x.rows() != y.rows()</tt></throws>
      <see>cern.jet.math.Functions</see>
    </javadoc>
    <method name="dasum" type="double" startLine="81" endLine="86" />
    <javadoc>
      <text>* Returns the sum of absolute values; <tt>|x[0]| + |x[1]| + ... </tt>.
 * In fact equivalent to <tt>x.aggregate(cern.jet.math.Functions.plus, cern.jet.math.Functions.abs)</tt>.</text>
      <param>x the first vector.</param>
    </javadoc>
    <method name="daxpy" type="void" startLine="87" endLine="97" />
    <javadoc>
      <text>* Combined vector scaling; <tt>y = y + alpha*x</tt>.
 * In fact equivalent to <tt>y.assign(x,cern.jet.math.Functions.plusMult(alpha))</tt>.</text>
      <param>alpha a scale factor.</param>
      <param>x the first source vector.</param>
      <param>y the second source vector, this is also the vector where results are stored.</param>
      <throws>IllegalArgumentException <tt>x.size() != y.size()</tt>..</throws>
    </javadoc>
    <method name="daxpy" type="void" startLine="98" endLine="108" />
    <javadoc>
      <text>* Combined matrix scaling; <tt>B = B + alpha*A</tt>.
 * In fact equivalent to <tt>B.assign(A,cern.jet.math.Functions.plusMult(alpha))</tt>.</text>
      <param>alpha a scale factor.</param>
      <param>A the first source matrix.</param>
      <param>B the second source matrix, this is also the matrix where results are stored.</param>
      <throws>IllegalArgumentException if <tt>A.columns() != B.columns() || A.rows() != B.rows()</tt>.</throws>
    </javadoc>
    <method name="dcopy" type="void" startLine="109" endLine="118" />
    <javadoc>
      <text>* Vector assignment (copying); <tt>y = x</tt>.
 * In fact equivalent to <tt>y.assign(x)</tt>.</text>
      <param>x the source vector.</param>
      <param>y the destination vector.</param>
      <throws>IllegalArgumentException <tt>x.size() != y.size()</tt>.</throws>
    </javadoc>
    <method name="dcopy" type="void" startLine="119" endLine="128" />
    <javadoc>
      <text>* Matrix assignment (copying); <tt>B = A</tt>.
 * In fact equivalent to <tt>B.assign(A)</tt>.</text>
      <param>A the source matrix.</param>
      <param>B the destination matrix.</param>
      <throws>IllegalArgumentException if <tt>A.columns() != B.columns() || A.rows() != B.rows()</tt>.</throws>
    </javadoc>
    <method name="ddot" type="double" startLine="129" endLine="138" />
    <javadoc>
      <text>* Returns the dot product of two vectors x and y, which is <tt>Sum(x[i]*y[i])</tt>.
 * In fact equivalent to <tt>x.zDotProduct(y)</tt>.</text>
      <param>x the first vector.</param>
      <param>y the second vector.</param>
      <return>the sum of products.</return>
      <throws>IllegalArgumentException if <tt>x.size() != y.size()</tt>.</throws>
    </javadoc>
    <method name="dgemm" type="void" startLine="139" endLine="156" />
    <javadoc>
      <text>* Generalized linear algebraic matrix-matrix multiply; <tt>C = alpha*A*B + beta*C</tt>.
 * In fact equivalent to <tt>A.zMult(B,C,alpha,beta,transposeA,transposeB)</tt>.
 * Note: Matrix shape conformance is checked <i>after</i> potential transpositions.</text>
      <param>transposeA set this flag to indicate that the multiplication shall be performed on A'.</param>
      <param>transposeB set this flag to indicate that the multiplication shall be performed on B'.</param>
      <param>alpha a scale factor.</param>
      <param>A the first source matrix.</param>
      <param>B the second source matrix.</param>
      <param>beta a scale factor.</param>
      <param>C the third source matrix, this is also the matrix where results are stored.</param>
      <throws>IllegalArgumentException if <tt>B.rows() != A.columns()</tt>.</throws>
      <throws>IllegalArgumentException if <tt>C.rows() != A.rows() || C.columns() != B.columns()</tt>.</throws>
      <throws>IllegalArgumentException if <tt>A == C || B == C</tt>.</throws>
    </javadoc>
    <method name="dgemv" type="void" startLine="157" endLine="171" />
    <javadoc>
      <text>* Generalized linear algebraic matrix-vector multiply; <tt>y = alpha*A*x + beta*y</tt>.
 * In fact equivalent to <tt>A.zMult(x,y,alpha,beta,transposeA)</tt>.
 * Note: Matrix shape conformance is checked <i>after</i> potential transpositions.</text>
      <param>transposeA set this flag to indicate that the multiplication shall be performed on A'.</param>
      <param>alpha a scale factor.</param>
      <param>A the source matrix.</param>
      <param>x the first source vector.</param>
      <param>beta a scale factor.</param>
      <param>y the second source vector, this is also the vector where results are stored.</param>
      <throws>IllegalArgumentException <tt>A.columns() != x.size() || A.rows() != y.size())</tt>..</throws>
    </javadoc>
    <method name="dger" type="void" startLine="172" endLine="185" />
    <javadoc>
      <text>* Performs a rank 1 update; <tt>A = A + alpha*x*y'</tt>.
 * Example:
 * <pre>
 * A = { {6,5}, {7,6} }, x = {1,2}, y = {3,4}, alpha = 1 -->
 * A = { {9,9}, {13,14} }
 * </pre></text>
      <param>alpha a scalar.</param>
      <param>x an m element vector.</param>
      <param>y an n element vector.</param>
      <param>A an m by n matrix.</param>
    </javadoc>
    <method name="dnrm2" type="double" startLine="186" endLine="192" />
    <javadoc>
      <text>* Return the 2-norm; <tt>sqrt(x[0]^2 + x[1]^2 + ...)</tt>.
 * In fact equivalent to <tt>Math.sqrt(Algebra.DEFAULT.norm2(x))</tt>.</text>
      <param>x the vector.</param>
    </javadoc>
    <method name="drot" type="void" startLine="193" endLine="200" />
    <javadoc>
      <text>* Applies a givens plane rotation to (x,y); <tt>x = c*x + s*y; y = c*y - s*x</tt>.</text>
      <param>x the first vector.</param>
      <param>y the second vector.</param>
      <param>c the cosine of the angle of rotation.</param>
      <param>s the sine of the angle of rotation.</param>
    </javadoc>
    <method name="drotg" type="void" startLine="201" endLine="210" />
    <javadoc>
      <text>* Constructs a Givens plane rotation for <tt>(a,b)</tt>.
 * Taken from the LINPACK translation from FORTRAN to Java, interface slightly modified.
 * In the LINPACK listing DROTG is attributed to Jack Dongarra</text>
      <param>a  rotational elimination parameter a.</param>
      <param>b  rotational elimination parameter b.</param>
      <param>rotvec[]  Must be at least of length 4. On output contains the values <tt>{a,b,c,s}</tt>.</param>
    </javadoc>
    <method name="dscal" type="void" startLine="211" endLine="218" />
    <javadoc>
      <text>* Vector scaling; <tt>x = alpha*x</tt>.
 * In fact equivalent to <tt>x.assign(cern.jet.math.Functions.mult(alpha))</tt>.</text>
      <param>alpha a scale factor.</param>
      <param>x the first vector.</param>
    </javadoc>
    <method name="dscal" type="void" startLine="219" endLine="226" />
    <javadoc>
      <text>* Matrix scaling; <tt>A = alpha*A</tt>.
 * In fact equivalent to <tt>A.assign(cern.jet.math.Functions.mult(alpha))</tt>.</text>
      <param>alpha a scale factor.</param>
      <param>A the matrix.</param>
    </javadoc>
    <method name="dswap" type="void" startLine="227" endLine="236" />
    <javadoc>
      <text>* Swaps the elements of two vectors; <tt>y <==> x</tt>.
 * In fact equivalent to <tt>y.swap(x)</tt>.</text>
      <param>x the first vector.</param>
      <param>y the second vector.</param>
      <throws>IllegalArgumentException <tt>x.size() != y.size()</tt>.</throws>
    </javadoc>
    <method name="dswap" type="void" startLine="237" endLine="245" />
    <javadoc>
      <text>* Swaps the elements of two matrices; <tt>B <==> A</tt>.</text>
      <param>A the first matrix.</param>
      <param>B the second matrix.</param>
      <throws>IllegalArgumentException if <tt>A.columns() != B.columns() || A.rows() != B.rows()</tt>.</throws>
    </javadoc>
    <method name="dsymv" type="void" startLine="246" endLine="258" />
    <javadoc>
      <text>* Symmetric matrix-vector multiplication; <tt>y = alpha*A*x + beta*y</tt>.
 * Where alpha and beta are scalars, x and y are n element vectors and
 * A is an n by n symmetric matrix.
 * A can be in upper or lower triangular format.</text>
      <param>isUpperTriangular is A upper triangular or lower triangular part to be used?</param>
      <param>alpha scaling factor.</param>
      <param>A the source matrix.</param>
      <param>x the first source vector.</param>
      <param>beta scaling factor.</param>
      <param>y the second vector holding source and destination.</param>
    </javadoc>
    <method name="dtrmv" type="void" startLine="259" endLine="269" />
    <javadoc>
      <text>* Triangular matrix-vector multiplication; <tt>x = A*x</tt> or <tt>x = A'*x</tt>.
 * Where x is an n element vector and A is an n by n unit, or non-unit,
 * upper or lower triangular matrix.</text>
      <param>isUpperTriangular is A upper triangular or lower triangular?</param>
      <param>transposeA set this flag to indicate that the multiplication shall be performed on A'.</param>
      <param>isUnitTriangular true --> A is assumed to be unit triangular; false --> A is not assumed to be unit triangular</param>
      <param>A the source matrix.</param>
      <param>x the vector holding source and destination.</param>
    </javadoc>
    <method name="idamax" type="int" startLine="270" endLine="276" />
    <javadoc>
      <text>* Returns the index of largest absolute value; <tt>i such that |x[i]| == max(|x[0]|,|x[1]|,...).</tt>.</text>
      <param>x the vector to search through.</param>
      <return>the index of largest absolute value (-1 if x is empty).</return>
    </javadoc>
  </interface>
</source>
