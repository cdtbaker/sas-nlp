<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.linalg">
  <import name="cern.colt.matrix.DoubleFactory2D" />
  <import name="cern.colt.matrix.DoubleMatrix2D" />
  <class name="SingularValueDecomposition" startLine="13">
    <implements name="java.io.Serializable" />
    <javadoc>
      <text>* For an <tt>m x n</tt> matrix <tt>A</tt> with <tt>m >= n</tt>, the singular value decomposition is
 * an <tt>m x n</tt> orthogonal matrix <tt>U</tt>, an <tt>n x n</tt> diagonal matrix <tt>S</tt>, and
 * an <tt>n x n</tt> orthogonal matrix <tt>V</tt> so that <tt>A = U*S*V'</tt>.
 * <P>
 * The singular values, <tt>sigma[k] = S[k][k]</tt>, are ordered so that
 * <tt>sigma[0] >= sigma[1] >= ... >= sigma[n-1]</tt>.
 * <P>
 * The singular value decomposition always exists, so the constructor will
 * never fail.  The matrix condition number and the effective numerical
 * rank can be computed from this decomposition.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Arrays for internal storage of U and V.</text>
      <serial>internal storage of U.</serial>
      <serial>internal storage of V.</serial>
    </javadoc>
    <declaration type="double[][]" name="U" />
    <javadoc>
      <text>* Array for internal storage of singular values.</text>
      <serial>internal storage of singular values.</serial>
    </javadoc>
    <declaration type="double[]" name="s" />
    <javadoc>
      <text>* Row and column dimensions.</text>
      <serial>row dimension.</serial>
      <serial>column dimension.</serial>
    </javadoc>
    <declaration type="int" name="m" />
    <javadoc>
      <text>* Constructs and returns a new singular value decomposition object; 
 * The decomposed matrices can be retrieved via instance methods of the returned decomposition object.</text>
      <param>A    A rectangular matrix.</param>
      <return>A decomposition object to access <tt>U</tt>, <tt>S</tt> and <tt>V</tt>.</return>
      <throws>IllegalArgumentException if <tt>A.rows() < A.columns()</tt>.</throws>
    </javadoc>
    <method type="constructor" name="SingularValueDecomposition" startLine="50" endLine="463">
      <declaration type="double[][]" name="A" />
      <declaration type="int" name="nu" />
      <declaration type="double[]" name="e" />
      <declaration type="double[]" name="work" />
      <declaration type="boolean" name="wantu" />
      <declaration type="boolean" name="wantv" />
      <declaration type="int" name="nct" />
      <declaration type="int" name="nrt" />
      <scope startLine="72" endLine="170">
        <scope startLine="73" endLine="92">
          <scope startLine="79" endLine="81" />
          <scope startLine="82" endLine="90">
            <scope startLine="83" endLine="85" />
            <scope startLine="86" endLine="88" />
          </scope>
        </scope>
        <scope startLine="93" endLine="112">
          <scope startLine="94" endLine="106">
            <declaration type="double" name="t" />
            <scope startLine="99" endLine="101" />
            <scope startLine="103" endLine="105" />
          </scope>
        </scope>
        <scope startLine="113" endLine="121">
          <scope startLine="118" endLine="120" />
        </scope>
        <scope startLine="122" endLine="169">
          <scope startLine="128" endLine="130" />
          <scope startLine="131" endLine="139">
            <scope startLine="132" endLine="134" />
            <scope startLine="135" endLine="137" />
          </scope>
          <scope startLine="141" endLine="159">
            <scope startLine="145" endLine="147" />
            <scope startLine="148" endLine="152">
              <scope startLine="149" endLine="151" />
            </scope>
            <scope startLine="153" endLine="158">
              <declaration type="double" name="t" />
              <scope startLine="155" endLine="157" />
            </scope>
          </scope>
          <scope startLine="160" endLine="168">
            <scope startLine="165" endLine="167" />
          </scope>
        </scope>
        <comment>Compute the transformation for the k-th column and</comment>
        <comment>place the k-th diagonal in s[k].</comment>
        <comment>Compute 2-norm of k-th column without under/overflow.</comment>
        <comment>Apply the transformation.</comment>
        <comment>Place the k-th row of A into e for the</comment>
        <comment>subsequent calculation of the row transformation.</comment>
        <comment>Place the transformation in U for subsequent back</comment>
        <comment>multiplication.</comment>
        <comment>Compute the k-th row transformation and place the</comment>
        <comment>k-th super-diagonal in e[k].</comment>
        <comment>Compute 2-norm without under/overflow.</comment>
        <comment>Apply the transformation.</comment>
        <comment>Place the transformation in V for subsequent</comment>
        <comment>back multiplication.</comment>
      </scope>
      <declaration type="int" name="p" />
      <scope startLine="175" endLine="177" />
      <scope startLine="178" endLine="180" />
      <scope startLine="181" endLine="183" />
      <scope startLine="188" endLine="221">
        <scope startLine="189" endLine="194">
          <scope startLine="190" endLine="192" />
        </scope>
        <scope startLine="195" endLine="220">
          <scope startLine="196" endLine="214">
            <scope startLine="197" endLine="206">
              <declaration type="double" name="t" />
              <scope startLine="199" endLine="201" />
              <scope startLine="203" endLine="205" />
            </scope>
            <scope startLine="207" endLine="209" />
            <scope startLine="211" endLine="213" />
          </scope>
          <scope startLine="214" endLine="219">
            <scope startLine="215" endLine="217" />
          </scope>
        </scope>
      </scope>
      <scope startLine="225" endLine="244">
        <scope startLine="226" endLine="243">
          <scope startLine="227" endLine="238">
            <scope startLine="228" endLine="237">
              <declaration type="double" name="t" />
              <scope startLine="230" endLine="232" />
              <scope startLine="234" endLine="236" />
            </scope>
          </scope>
          <scope startLine="239" endLine="241" />
        </scope>
      </scope>
      <declaration type="int" name="pp" />
      <declaration type="int" name="iter" />
      <declaration type="double" name="eps" />
      <scope startLine="251" endLine="462">
        <declaration type="int" name="k" />
        <scope startLine="266" endLine="274">
          <scope startLine="267" endLine="269" />
          <scope startLine="270" endLine="273" />
        </scope>
        <scope startLine="275" endLine="277" />
        <scope startLine="277" endLine="298">
          <declaration type="int" name="ks" />
          <scope startLine="279" endLine="289">
            <scope startLine="280" endLine="282" />
            <declaration type="double" name="t" />
            <scope startLine="285" endLine="288" />
          </scope>
          <scope startLine="290" endLine="292" />
          <scope startLine="292" endLine="294" />
          <scope startLine="294" endLine="297" />
        </scope>
        <scope startLine="307" endLine="327">
          <declaration type="double" name="f" />
          <scope startLine="310" endLine="326">
            <declaration type="double" name="t" />
            <declaration type="double" name="cs" />
            <declaration type="double" name="sn" />
            <scope startLine="315" endLine="318" />
            <scope startLine="319" endLine="325">
              <scope startLine="320" endLine="324" />
            </scope>
          </scope>
        </scope>
        <scope startLine="332" endLine="350">
          <declaration type="double" name="f" />
          <scope startLine="335" endLine="349">
            <declaration type="double" name="t" />
            <declaration type="double" name="cs" />
            <declaration type="double" name="sn" />
            <scope startLine="342" endLine="348">
              <scope startLine="343" endLine="347" />
            </scope>
          </scope>
        </scope>
        <scope startLine="355" endLine="418">
          <declaration type="double" name="scale" />
          <declaration type="double" name="sp" />
          <declaration type="double" name="spm1" />
          <declaration type="double" name="epm1" />
          <declaration type="double" name="sk" />
          <declaration type="double" name="ek" />
          <declaration type="double" name="b" />
          <declaration type="double" name="c" />
          <declaration type="double" name="shift" />
          <scope startLine="370" endLine="376">
            <scope startLine="372" endLine="374" />
          </scope>
          <declaration type="double" name="f" />
          <declaration type="double" name="g" />
          <scope startLine="382" endLine="415">
            <declaration type="double" name="t" />
            <declaration type="double" name="cs" />
            <declaration type="double" name="sn" />
            <scope startLine="386" endLine="388" />
            <scope startLine="393" endLine="399">
              <scope startLine="394" endLine="398" />
            </scope>
            <scope startLine="408" endLine="414">
              <scope startLine="409" endLine="413" />
            </scope>
          </scope>
        </scope>
        <scope startLine="423" endLine="459">
          <scope startLine="427" endLine="434">
            <scope startLine="429" endLine="433">
              <scope startLine="430" endLine="432" />
            </scope>
          </scope>
          <scope startLine="438" endLine="456">
            <scope startLine="439" endLine="441" />
            <declaration type="double" name="t" />
            <scope startLine="445" endLine="449">
              <scope startLine="446" endLine="448" />
            </scope>
            <scope startLine="450" endLine="454">
              <scope startLine="451" endLine="453" />
            </scope>
          </scope>
        </scope>
        <comment>Here is where a test for too many iterations would go.</comment>
        <comment>This section of the program inspects for</comment>
        <comment>negligible elements in the s and e arrays.  On</comment>
        <comment>completion the variables kase and k are set as follows.</comment>
        <comment>kase = 1     if s(p) and e[k-1] are negligible and k<p</comment>
        <comment>kase = 2     if s(k) is negligible and k<p</comment>
        <comment>kase = 3     if e[k-1] is negligible, k<p, and</comment>
        <comment>s(k), ..., s(p) are not negligible (qr step).</comment>
        <comment>kase = 4     if e(p-1) is negligible (convergence).</comment>
        <comment>Perform the task indicated by kase.</comment>
        <comment>Deflate negligible s(p).</comment>
        <comment>Split at negligible s(k).</comment>
        <comment>Perform one qr step.</comment>
        <comment>Calculate the shift.</comment>
        <comment>Chase zeros.</comment>
        <comment>Convergence.</comment>
        <comment>Make the singular values positive.</comment>
        <comment>Order the singular values.</comment>
      </scope>
      <comment>Derived from LINPACK code.</comment>
      <comment>Initialize.</comment>
      <comment>Reduce A to bidiagonal form, storing the diagonal elements</comment>
      <comment>in s and the super-diagonal elements in e.</comment>
      <comment>Set up the final bidiagonal matrix or order p.</comment>
      <comment>If required, generate U.</comment>
      <comment>If required, generate V.</comment>
      <comment>Main iteration loop for the singular values.</comment>
    </method>
    <javadoc>
      <text>* Returns the two norm condition number, which is <tt>max(S) / min(S)</tt>.</text>
    </javadoc>
    <method type="double" name="cond" startLine="467" endLine="469" />
    <javadoc>
      <text>* Returns the diagonal matrix of singular values.</text>
      <return>S</return>
    </javadoc>
    <method type="DoubleMatrix2D" name="getS" startLine="474" endLine="483">
      <declaration type="double[][]" name="S" />
      <scope startLine="476" endLine="481">
        <scope startLine="477" endLine="479" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the diagonal of <tt>S</tt>, which is a one-dimensional array of singular values</text>
      <return>diagonal of <tt>S</tt>.</return>
    </javadoc>
    <method type="double[]" name="getSingularValues" startLine="488" endLine="490" />
    <javadoc>
      <text>* Returns the left singular vectors <tt>U</tt>.</text>
      <return><tt>U</tt></return>
    </javadoc>
    <method type="DoubleMatrix2D" name="getU" startLine="495" endLine="498">
      <comment>return new DoubleMatrix2D(U,m,Math.min(m+1,n));</comment>
    </method>
    <javadoc>
      <text>* Returns the right singular vectors <tt>V</tt>.</text>
      <return><tt>V</tt></return>
    </javadoc>
    <method type="DoubleMatrix2D" name="getV" startLine="503" endLine="505" />
    <javadoc>
      <text>* Returns the two norm, which is <tt>max(S)</tt>.</text>
    </javadoc>
    <method type="double" name="norm2" startLine="509" endLine="511" />
    <javadoc>
      <text>* Returns the effective numerical matrix rank, which is the number of nonnegligible singular values.</text>
    </javadoc>
    <method type="int" name="rank" startLine="515" endLine="525">
      <declaration type="double" name="eps" />
      <declaration type="double" name="tol" />
      <declaration type="int" name="r" />
      <scope startLine="519" endLine="523">
        <scope startLine="520" endLine="522" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns a String with (propertyName, propertyValue) pairs.
 * Useful for debugging or to quickly get the rough picture.
 * For example,
 * <pre>
 * rank          : 3
 * trace         : 0
 * </pre></text>
    </javadoc>
    <method type="String" name="toString" startLine="535" endLine="568">
      <declaration type="StringBuffer" name="buf" />
      <declaration type="String" name="unknown" />
      <scope startLine="544" endLine="544" />
      <scope startLine="545" endLine="545" />
      <scope startLine="548" endLine="548" />
      <scope startLine="549" endLine="549" />
      <scope startLine="552" endLine="552" />
      <scope startLine="553" endLine="553" />
      <scope startLine="556" endLine="556" />
      <scope startLine="557" endLine="557" />
      <scope startLine="560" endLine="560" />
      <scope startLine="561" endLine="561" />
      <scope startLine="564" endLine="564" />
      <scope startLine="565" endLine="565" />
    </method>
  </class>
</source>
