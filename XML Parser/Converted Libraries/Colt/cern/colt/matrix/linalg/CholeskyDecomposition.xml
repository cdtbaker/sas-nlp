<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.linalg">
  <import name="cern.colt.matrix.DoubleMatrix1D" />
  <import name="cern.colt.matrix.DoubleMatrix2D" />
  <class name="CholeskyDecomposition" startLine="13">
    <implements name="java.io.Serializable" />
    <javadoc>
      <text>* For a symmetric, positive definite matrix <tt>A</tt>, the Cholesky decomposition
 * is a lower triangular matrix <tt>L</tt> so that <tt>A = L*L'</tt>;
 * If the matrix is not symmetric or positive definite, the constructor
 * returns a partial decomposition and sets an internal flag that may
 * be queried by the <tt>isSymmetricPositiveDefinite()</tt> method.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Array for internal storage of decomposition.</text>
      <serial>internal array storage.</serial>
    </javadoc>
    <declaration type="DoubleMatrix2D" name="L" />
    <javadoc>
      <text>* Row and column dimension (square matrix).</text>
      <serial>matrix dimension.</serial>
    </javadoc>
    <declaration type="int" name="n" />
    <javadoc>
      <text>* Symmetric and positive definite flag.</text>
      <serial>is symmetric and positive definite flag.</serial>
    </javadoc>
    <declaration type="boolean" name="isSymmetricPositiveDefinite" />
    <javadoc>
      <text>* Constructs and returns a new Cholesky decomposition object for a symmetric and positive definite matrix; 
 * The decomposed matrices can be retrieved via instance methods of the returned decomposition object.</text>
      <param>A   Square, symmetric matrix.</param>
      <return>Structure to access <tt>L</tt> and <tt>isSymmetricPositiveDefinite</tt> flag.</return>
      <throws>IllegalArgumentException if <tt>A</tt> is not square.</throws>
    </javadoc>
    <method type="constructor" name="CholeskyDecomposition" startLine="45" endLine="87">
      <declaration type="DoubleMatrix1D[]" name="Lrows" />
      <scope startLine="60" endLine="86">
        <declaration type="double" name="d" />
        <scope startLine="64" endLine="78">
          <declaration type="double" name="s" />
        </scope>
        <scope startLine="83" endLine="85" />
        <comment>double[] Lrowj = L[j];</comment>
        <comment>DoubleMatrix1D Lrowj = L.viewRow(j);</comment>
        <comment>double[] Lrowk = L[k];</comment>
        <comment>DoubleMatrix1D Lrowk = L.viewRow(k);
double s = 0.0;
for (int i = 0; i < k; i++) {
s += Lrowk.getQuick(i)Lrowj.getQuick(i);
}</comment>
      </scope>
      <comment>Initialize.</comment>
      <comment>double[][] A = Arg.getArray();</comment>
      <comment>L = new double[n][n];</comment>
      <comment>precompute and cache some views to avoid regenerating them time and again</comment>
      <comment>Main loop.</comment>
    </method>
    <javadoc>
      <text>* Returns the triangular factor, <tt>L</tt>.</text>
      <return><tt>L</tt></return>
    </javadoc>
    <method type="DoubleMatrix2D" name="getL" startLine="92" endLine="94" />
    <javadoc>
      <text>* Returns whether the matrix <tt>A</tt> is symmetric and positive definite.</text>
      <return>true if <tt>A</tt> is symmetric and positive definite; false otherwise</return>
    </javadoc>
    <method type="boolean" name="isSymmetricPositiveDefinite" startLine="99" endLine="101" />
    <javadoc>
      <text>* Solves <tt>A*X = B</tt>; returns <tt>X</tt>.</text>
      <param>B   A Matrix with as many rows as <tt>A</tt> and any number of columns.</param>
      <return><tt>X</tt> so that <tt>L*L'*X = B</tt>.</return>
      <exception>IllegalArgumentException  if <tt>B.rows() != A.rows()</tt>.</exception>
      <exception>IllegalArgumentException  if <tt>!isSymmetricPositiveDefinite()</tt>.</exception>
    </javadoc>
    <method type="DoubleMatrix2D" name="solve" startLine="109" endLine="137">
      <declaration type="DoubleMatrix2D" name="X" />
      <declaration type="int" name="nx" />
      <scope startLine="116" endLine="134">
        <scope startLine="118" endLine="124">
          <declaration type="double" name="sum" />
          <scope startLine="120" endLine="122" />
        </scope>
        <scope startLine="127" endLine="133">
          <declaration type="double" name="sum" />
          <scope startLine="129" endLine="131" />
        </scope>
        <comment>Solve L*Y = B;</comment>
        <comment>Solve L'*X = Y;</comment>
      </scope>
      <comment>Copy right hand side.</comment>
      <comment>fix by MG Ferreira <mgf@webmail.co.za></comment>
      <comment>old code is in method xxxSolveBuggy()</comment>
    </method>
    <javadoc>
      <text>* Solves <tt>A*X = B</tt>; returns <tt>X</tt>.</text>
      <param>B   A Matrix with as many rows as <tt>A</tt> and any number of columns.</param>
      <return><tt>X</tt> so that <tt>L*L'*X = B</tt>.</return>
      <exception>IllegalArgumentException  if <tt>B.rows() != A.rows()</tt>.</exception>
      <exception>IllegalArgumentException  if <tt>!isSymmetricPositiveDefinite()</tt>.</exception>
    </javadoc>
    <method type="DoubleMatrix2D" name="XXXsolveBuggy" startLine="145" endLine="180">
      <declaration type="cern.jet.math.Functions" name="F" />
      <scope startLine="147" endLine="149" />
      <scope startLine="150" endLine="152" />
      <declaration type="DoubleMatrix2D" name="X" />
      <declaration type="int" name="nx" />
      <declaration type="DoubleMatrix1D[]" name="Xrows" />
      <scope startLine="163" endLine="169">
        <scope startLine="164" endLine="167" />
        <comment>X[i,j] -= X[k,j]*L[i,k]</comment>
      </scope>
      <scope startLine="172" endLine="178">
        <scope startLine="174" endLine="177" />
        <comment>X[i,j] -= X[k,j]*L[k,i]</comment>
      </scope>
      <comment>Copy right hand side.</comment>
      <comment>precompute and cache some views to avoid regenerating them time and again</comment>
      <comment>Solve L*Y = B;</comment>
      <comment>Solve L'*X = Y;</comment>
    </method>
    <javadoc>
      <text>* Returns a String with (propertyName, propertyValue) pairs.
 * Useful for debugging or to quickly get the rough picture.
 * For example,
 * <pre>
 * rank          : 3
 * trace         : 0
 * </pre></text>
    </javadoc>
    <method type="String" name="toString" startLine="191" endLine="212">
      <declaration type="StringBuffer" name="buf" />
      <declaration type="String" name="unknown" />
      <scope startLine="200" endLine="200" />
      <scope startLine="201" endLine="201" />
      <scope startLine="204" endLine="204" />
      <scope startLine="205" endLine="205" />
      <scope startLine="208" endLine="208" />
      <scope startLine="209" endLine="209" />
    </method>
    <comment>private double[][] L;</comment>
  </class>
</source>
