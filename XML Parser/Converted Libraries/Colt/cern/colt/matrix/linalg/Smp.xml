<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.linalg">
  <import name="cern.colt.matrix.DoubleMatrix2D" />
  <import name="EDU.oswego.cs.dl.util.concurrent.FJTask" />
  <import name="EDU.oswego.cs.dl.util.concurrent.FJTaskRunnerGroup" />
  <class name="Smp" startLine="16">
    <declaration type="FJTaskRunnerGroup" name="taskGroup" />
    <declaration type="int" name="maxThreads" />
    <javadoc>
      <text>* Constructs a new Smp using a maximum of <tt>maxThreads<tt> threads.</text>
    </javadoc>
    <method type="constructor" name="Smp" startLine="23" endLine="32">
      <scope startLine="26" endLine="28" />
      <scope startLine="29" endLine="31">
        <comment>avoid parallel overhead</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Clean up deamon threads, if necessary.</text>
    </javadoc>
    <method type="void" name="finalize" startLine="36" endLine="38" />
    <method type="void" name="run" startLine="39" endLine="62">
      <declaration type="FJTask[]" name="subTasks" />
      <scope startLine="41" endLine="50">
        <declaration type="int" name="k" />
        <method type="void" name="run" startLine="44" endLine="48">
          <declaration type="double" name="result" />
        </method>
        <comment>System.out.print(".");</comment>
      </scope>
      <scope startLine="53" endLine="61">
        <method type="void" name="run" startLine="56" endLine="58" />
      </scope>
      <scope startLine="61" endLine="61" />
      <comment>run tasks and wait for completion</comment>
    </method>
    <method type="DoubleMatrix2D[]" name="splitBlockedNN" startLine="63" endLine="120">
      <declaration type="int" name="noOfTasks" />
      <declaration type="boolean" name="splitHoriz" />
      <declaration type="int" name="p" />
      <scope startLine="100" endLine="102">
        <comment>parallelization doesn't pay off (too much start up overhead)</comment>
      </scope>
      <declaration type="int" name="span" />
      <declaration type="DoubleMatrix2D[]" name="blocks" />
      <scope startLine="107" endLine="118">
        <declaration type="int" name="offset" />
        <declaration type="DoubleMatrix2D" name="AA" />
        <scope startLine="112" endLine="114" />
        <scope startLine="115" endLine="117" />
        <comment>last span may be a bit larger</comment>
        <comment>split B along columns into blocks</comment>
        <comment>split A along rows into blocks</comment>
      </scope>
      <comment>determine how to split and parallelize best into blocks
if more B.columns than tasks --> split B.columns, as follows:

xx|xx|xxx B
xx|xx|xxx
xx|xx|xxx
A
xxx     xx|xx|xxx C
xxx		xx|xx|xxx
xxx		xx|xx|xxx
xxx		xx|xx|xxx
xxx		xx|xx|xxx

if less B.columns than tasks --> split A.rows, as follows:

xxxxxxx B
xxxxxxx
xxxxxxx
A
xxx     xxxxxxx C
xxx     xxxxxxx
---     -------
xxx     xxxxxxx
xxx     xxxxxxx
---     -------
xxx     xxxxxxx</comment>
      <comment>long flops = 2L*A.rows()*A.columns()*A.columns();</comment>
      <comment>each thread should process at least 30000 flops</comment>
      <comment>boolean splitHoriz = (A.columns() >= noOfTasks);</comment>
      <comment>set up concurrent tasks</comment>
    </method>
    <method type="DoubleMatrix2D[][]" name="splitBlockedNN" startLine="121" endLine="128">
      <declaration type="DoubleMatrix2D[]" name="blocksA" />
      <declaration type="DoubleMatrix2D[]" name="blocksB" />
      <declaration type="DoubleMatrix2D[][]" name="blocks" />
    </method>
    <method type="DoubleMatrix2D[]" name="splitStridedNN" startLine="129" endLine="188">
      <declaration type="int" name="noOfTasks" />
      <declaration type="boolean" name="splitHoriz" />
      <declaration type="int" name="p" />
      <scope startLine="166" endLine="168">
        <comment>parallelization doesn't pay off (too much start up overhead)</comment>
      </scope>
      <declaration type="int" name="span" />
      <declaration type="DoubleMatrix2D[]" name="blocks" />
      <scope startLine="173" endLine="186">
        <declaration type="int" name="offset" />
        <declaration type="DoubleMatrix2D" name="AA" />
        <scope startLine="178" endLine="181" />
        <scope startLine="182" endLine="185" />
        <comment>last span may be a bit larger</comment>
        <comment>split B along columns into blocks</comment>
        <comment>split A along rows into blocks</comment>
      </scope>
      <comment>determine how to split and parallelize best into blocks
if more B.columns than tasks --> split B.columns, as follows:

xx|xx|xxx B
xx|xx|xxx
xx|xx|xxx
A
xxx     xx|xx|xxx C
xxx		xx|xx|xxx
xxx		xx|xx|xxx
xxx		xx|xx|xxx
xxx		xx|xx|xxx

if less B.columns than tasks --> split A.rows, as follows:

xxxxxxx B
xxxxxxx
xxxxxxx
A
xxx     xxxxxxx C
xxx     xxxxxxx
---     -------
xxx     xxxxxxx
xxx     xxxxxxx
---     -------
xxx     xxxxxxx</comment>
      <comment>long flops = 2L*A.rows()*A.columns()*A.columns();</comment>
      <comment>each thread should process at least 30000 flops</comment>
      <comment>boolean splitHoriz = (A.columns() >= noOfTasks);</comment>
      <comment>set up concurrent tasks</comment>
    </method>
    <javadoc>
      <text>* Prints various snapshot statistics to System.out; Simply delegates to {@link EDU.oswego.cs.dl.util.concurrent.FJTaskRunnerGroup#stats}.</text>
    </javadoc>
    <method type="void" name="stats" startLine="192" endLine="194" />
    <comment>a very efficient and light weight thread pool</comment>
  </class>
</source>
