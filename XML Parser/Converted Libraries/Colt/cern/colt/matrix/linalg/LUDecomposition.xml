<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.linalg">
  <import name="cern.colt.matrix.DoubleMatrix2D" />
  <class name="LUDecomposition" startLine="13">
    <implements name="java.io.Serializable" />
    <javadoc>
      <text>* For an <tt>m x n</tt> matrix <tt>A</tt> with <tt>m >= n</tt>, the LU decomposition is an <tt>m x n</tt>
 * unit lower triangular matrix <tt>L</tt>, an <tt>n x n</tt> upper triangular matrix <tt>U</tt>,
 * and a permutation vector <tt>piv</tt> of length <tt>m</tt> so that <tt>A(piv,:) = L*U</tt>;
 * If <tt>m < n</tt>, then <tt>L</tt> is <tt>m x m</tt> and <tt>U</tt> is <tt>m x n</tt>.
 * <P>
 * The LU decomposition with pivoting always exists, even if the matrix is
 * singular, so the constructor will never fail.  The primary use of the
 * LU decomposition is in the solution of square systems of simultaneous
 * linear equations.  This will fail if <tt>isNonsingular()</tt> returns false.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <declaration type="LUDecompositionQuick" name="quick" />
    <javadoc>
      <text>* Constructs and returns a new LU Decomposition object; 
 * The decomposed matrices can be retrieved via instance methods of the returned decomposition object.</text>
      <param>A   Rectangular matrix</param>
      <return>Structure to access L, U and piv.</return>
    </javadoc>
    <method type="constructor" name="LUDecomposition" startLine="33" endLine="36">
      <comment>zero tolerance for compatibility with Jama</comment>
    </method>
    <javadoc>
      <text>* Returns the determinant, <tt>det(A)</tt>.</text>
      <exception>IllegalArgumentException  Matrix must be square</exception>
    </javadoc>
    <method type="double" name="det" startLine="41" endLine="43" />
    <javadoc>
      <text>* Returns pivot permutation vector as a one-dimensional double array</text>
      <return>(double) piv</return>
    </javadoc>
    <method type="double[]" name="getDoublePivot" startLine="48" endLine="50" />
    <javadoc>
      <text>* Returns the lower triangular factor, <tt>L</tt>.</text>
      <return><tt>L</tt></return>
    </javadoc>
    <method type="DoubleMatrix2D" name="getL" startLine="55" endLine="57" />
    <javadoc>
      <text>* Returns a copy of the pivot permutation vector.</text>
      <return>piv</return>
    </javadoc>
    <method type="int[]" name="getPivot" startLine="62" endLine="64" />
    <javadoc>
      <text>* Returns the upper triangular factor, <tt>U</tt>.</text>
      <return><tt>U</tt></return>
    </javadoc>
    <method type="DoubleMatrix2D" name="getU" startLine="69" endLine="71" />
    <javadoc>
      <text>* Returns whether the matrix is nonsingular (has an inverse).</text>
      <return>true if <tt>U</tt>, and hence <tt>A</tt>, is nonsingular; false otherwise.</return>
    </javadoc>
    <method type="boolean" name="isNonsingular" startLine="76" endLine="78" />
    <javadoc>
      <text>* Solves <tt>A*X = B</tt>.</text>
      <param>B   A matrix with as many rows as <tt>A</tt> and any number of columns.</param>
      <return><tt>X</tt> so that <tt>L*U*X = B(piv,:)</tt>.</return>
      <exception>IllegalArgumentException if </tt>B.rows() != A.rows()</tt>.</exception>
      <exception>IllegalArgumentException  if A is singular, that is, if <tt>!this.isNonsingular()</tt>.</exception>
      <exception>IllegalArgumentException  if <tt>A.rows() < A.columns()</tt>.</exception>
    </javadoc>
    <method type="DoubleMatrix2D" name="solve" startLine="88" endLine="92">
      <declaration type="DoubleMatrix2D" name="X" />
    </method>
    <javadoc>
      <text>* Returns a String with (propertyName, propertyValue) pairs.
 * Useful for debugging or to quickly get the rough picture.
 * For example,
 * <pre>
 * rank          : 3
 * trace         : 0
 * </pre></text>
    </javadoc>
    <method type="String" name="toString" startLine="102" endLine="104" />
  </class>
</source>
