<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.linalg">
  <import name="cern.colt.matrix.DoubleMatrix1D" />
  <import name="cern.colt.matrix.DoubleMatrix2D" />
  <import name="cern.colt.matrix.DoubleMatrix3D" />
  <class name="Property" extends="cern.colt.PersistentObject" startLine="14">
    <javadoc>
      <text>* Tests matrices for linear algebraic properties (equality, tridiagonality, symmetry, singularity, etc).
 * <p>
 * Except where explicitly indicated, all methods involving equality tests (<tt>==</tt>) allow for numerical instability, to a degree specified upon instance construction and returned by method {@link #tolerance()}.
 * The public static final variable <tt>DEFAULT</tt> represents a default Property object with a tolerance of <tt>1.0E-9</tt>.
 * The public static final variable <tt>ZERO</tt> represents a Property object with a tolerance of <tt>0.0</tt>.
 * The public static final variable <tt>TWELVE</tt> represents a Property object with a tolerance of <tt>1.0E-12</tt>.
 * As long as you are happy with these tolerances, there is no need to construct Property objects.
 * Simply use idioms like <tt>Property.DEFAULT.equals(A,B)</tt>, <tt>Property.ZERO.equals(A,B)</tt>, <tt>Property.TWELVE.equals(A,B)</tt>.
 * <p>
 * To work with a different tolerance (e.g. <tt>1.0E-15</tt> or <tt>1.0E-5</tt>) use the constructor and/or method {@link #setTolerance(double)}.
 * Note that the public static final Property objects are immutable: Is is not possible to alter their tolerance. 
 * Any attempt to do so will throw an Exception.
 * <p>
 * Note that this implementation is not synchronized.
 * <p>
 * Example: <tt>equals(DoubleMatrix2D A, DoubleMatrix2D B)</tt> is defined as follows
 * <table>
 * <td class="PRE"> 
 * <pre>
 * { some other tests not related to tolerance go here }
 * double epsilon = tolerance();
 * for (int row=rows; --row >= 0;) {
 * &nbsp;&nbsp;&nbsp;for (int column=columns; --column >= 0;) {
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//if (!(A.getQuick(row,column) == B.getQuick(row,column))) return false;
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Math.abs(A.getQuick(row,column) - B.getQuick(row,column)) > epsilon) return false;
 * &nbsp;&nbsp;&nbsp;}
 * }
 * return true;
 * </pre>
 * </td>
 * </table>
 * Here are some example properties
 * <table border="1" cellspacing="0">
 * <tr align="left" valign="top"> 
 * <td valign="middle" align="left"><tt>matrix</tt></td>
 * <td> <tt>4&nbsp;x&nbsp;4&nbsp;<br>
 * 0&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;0 </tt></td>
 * <td><tt>4&nbsp;x&nbsp;4<br>
 * 1&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;1 </tt></td>
 * <td><tt>4&nbsp;x&nbsp;4<br>
 * 1&nbsp;1&nbsp;0&nbsp;0<br>
 * 1&nbsp;1&nbsp;1&nbsp;0<br>
 * 0&nbsp;1&nbsp;1&nbsp;1<br>
 * 0&nbsp;0&nbsp;1&nbsp;1 </tt></td>
 * <td><tt> 4&nbsp;x&nbsp;4<br>
 * 0&nbsp;1&nbsp;1&nbsp;1<br>
 * 0&nbsp;1&nbsp;1&nbsp;1<br>
 * 0&nbsp;0&nbsp;0&nbsp;1<br>
 * 0&nbsp;0&nbsp;0&nbsp;1 </tt></td>
 * <td><tt> 4&nbsp;x&nbsp;4<br>
 * 0&nbsp;0&nbsp;0&nbsp;0<br>
 * 1&nbsp;1&nbsp;0&nbsp;0<br>
 * 1&nbsp;1&nbsp;0&nbsp;0<br>
 * 1&nbsp;1&nbsp;1&nbsp;1 </tt></td>
 * <td><tt>4&nbsp;x&nbsp;4<br>
 * 1&nbsp;1&nbsp;0&nbsp;0<br>
 * 0&nbsp;1&nbsp;1&nbsp;0<br>
 * 0&nbsp;1&nbsp;0&nbsp;1<br>
 * 1&nbsp;0&nbsp;1&nbsp;1 </tt><tt> </tt> </td>
 * <td><tt>4&nbsp;x&nbsp;4<br>
 * 1&nbsp;1&nbsp;1&nbsp;0<br>
 * 0&nbsp;1&nbsp;0&nbsp;0<br>
 * 1&nbsp;1&nbsp;0&nbsp;1<br>
 * 0&nbsp;0&nbsp;1&nbsp;1 </tt> </td>
 * </tr>
 * <tr align="center" valign="middle"> 
 * <td><tt>upperBandwidth</tt></td>
 * <td> 
 * <div align="center"><tt>0</tt></div>
 * </td>
 * <td> 
 * <div align="center"><tt>0</tt></div>
 * </td>
 * <td> 
 * <div align="center"><tt>1</tt></div>
 * </td>
 * <td><tt>3</tt></td>
 * <td align="center" valign="middle"><tt>0</tt></td>
 * <td align="center" valign="middle"> 
 * <div align="center"><tt>1</tt></div>
 * </td>
 * <td align="center" valign="middle"> 
 * <div align="center"><tt>2</tt></div>
 * </td>
 * </tr>
 * <tr align="center" valign="middle"> 
 * <td><tt>lowerBandwidth</tt></td>
 * <td> 
 * <div align="center"><tt>0</tt></div>
 * </td>
 * <td> 
 * <div align="center"><tt>0</tt></div>
 * </td>
 * <td> 
 * <div align="center"><tt>1</tt></div>
 * </td>
 * <td><tt>0</tt></td>
 * <td align="center" valign="middle"><tt>3</tt></td>
 * <td align="center" valign="middle"> 
 * <div align="center"><tt>3</tt></div>
 * </td>
 * <td align="center" valign="middle"> 
 * <div align="center"><tt>2</tt></div>
 * </td>
 * </tr>
 * <tr align="center" valign="middle"> 
 * <td><tt>semiBandwidth</tt></td>
 * <td> 
 * <div align="center"><tt>1</tt></div>
 * </td>
 * <td> 
 * <div align="center"><tt>1</tt></div>
 * </td>
 * <td> 
 * <div align="center"><tt>2</tt></div>
 * </td>
 * <td><tt>4</tt></td>
 * <td align="center" valign="middle"><tt>4</tt></td>
 * <td align="center" valign="middle"> 
 * <div align="center"><tt>4</tt></div>
 * </td>
 * <td align="center" valign="middle"> 
 * <div align="center"><tt>3</tt></div>
 * </td>
 * </tr>
 * <tr align="center" valign="middle"> 
 * <td><tt>description</tt></td>
 * <td> 
 * <div align="center"><tt>zero</tt></div>
 * </td>
 * <td> 
 * <div align="center"><tt>diagonal</tt></div>
 * </td>
 * <td> 
 * <div align="center"><tt>tridiagonal</tt></div>
 * </td>
 * <td><tt>upper triangular</tt></td>
 * <td align="center" valign="middle"><tt>lower triangular</tt></td>
 * <td align="center" valign="middle"> 
 * <div align="center"><tt>unstructured</tt></div>
 * </td>
 * <td align="center" valign="middle"> 
 * <div align="center"><tt>unstructured</tt></div>
 * </td>
 * </tr>
 * </table></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.1, 28/May/2000 (fixed strange bugs involving NaN, -inf, inf)</version>
    </javadoc>
    <javadoc>
      <text>* The default Property object; currently has <tt>tolerance()==1.0E-9</tt>.</text>
    </javadoc>
    <declaration type="Property" name="DEFAULT" />
    <javadoc>
      <text>* A Property object with <tt>tolerance()==0.0</tt>.</text>
    </javadoc>
    <declaration type="Property" name="ZERO" />
    <javadoc>
      <text>* A Property object with <tt>tolerance()==1.0E-12</tt>.</text>
    </javadoc>
    <declaration type="Property" name="TWELVE" />
    <declaration type="double" name="tolerance" />
    <javadoc>
      <text>* Not instantiable by no-arg constructor.</text>
    </javadoc>
    <method type="constructor" name="Property" startLine="191" endLine="193">
      <comment>just to be on the safe side</comment>
    </method>
    <javadoc>
      <text>* Constructs an instance with a tolerance of <tt>Math.abs(newTolerance)</tt>.</text>
    </javadoc>
    <method type="constructor" name="Property" startLine="197" endLine="199" />
    <javadoc>
      <text>* Returns a String with <tt>length</tt> blanks.</text>
    </javadoc>
    <method type="String" name="blanks" startLine="203" endLine="210">
      <declaration type="StringBuffer" name="buf" />
      <scope startLine="206" endLine="208" />
    </method>
    <javadoc>
      <text>* Checks whether the given matrix <tt>A</tt> is <i>rectangular</i>.</text>
      <throws>IllegalArgumentException if <tt>A.rows() < A.columns()</tt>.</throws>
    </javadoc>
    <method type="void" name="checkRectangular" startLine="215" endLine="219">
      <scope startLine="216" endLine="218" />
    </method>
    <javadoc>
      <text>* Checks whether the given matrix <tt>A</tt> is <i>square</i>.</text>
      <throws>IllegalArgumentException if <tt>A.rows() != A.columns()</tt>.</throws>
    </javadoc>
    <method type="void" name="checkSquare" startLine="224" endLine="226" />
    <javadoc>
      <text>* Returns the matrix's fraction of non-zero cells; <tt>A.cardinality() / A.size()</tt>.</text>
    </javadoc>
    <method type="double" name="density" startLine="230" endLine="232" />
    <javadoc>
      <text>* Returns whether all cells of the given matrix <tt>A</tt> are equal to the given value.
 * The result is <tt>true</tt> if and only if <tt>A != null</tt> and
 * <tt>! (Math.abs(value - A[i]) > tolerance())</tt> holds for all coordinates.</text>
      <param>A   the first matrix to compare.</param>
      <param>value   the value to compare against.</param>
      <return><tt>true</tt> if the matrix is equal to the value;
 * <tt>false</tt> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="242" endLine="254">
      <declaration type="double" name="epsilon" />
      <scope startLine="245" endLine="252">
        <declaration type="double" name="x" />
        <declaration type="double" name="diff" />
        <comment>if (!(A.getQuick(i) == value)) return false;</comment>
        <comment>if (Math.abs(value - A.getQuick(i)) > epsilon) return false;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns whether both given matrices <tt>A</tt> and <tt>B</tt> are equal.
 * The result is <tt>true</tt> if <tt>A==B</tt>. 
 * Otherwise, the result is <tt>true</tt> if and only if both arguments are <tt>!= null</tt>, 
 * have the same size and 
 * <tt>! (Math.abs(A[i] - B[i]) > tolerance())</tt> holds for all indexes.</text>
      <param>A   the first matrix to compare.</param>
      <param>B   the second matrix to compare.</param>
      <return><tt>true</tt> if both matrices are equal;
 * <tt>false</tt> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="266" endLine="283">
      <declaration type="int" name="size" />
      <declaration type="double" name="epsilon" />
      <scope startLine="273" endLine="281">
        <declaration type="double" name="x" />
        <declaration type="double" name="value" />
        <declaration type="double" name="diff" />
        <comment>if (!(getQuick(i) == B.getQuick(i))) return false;</comment>
        <comment>if (Math.abs(A.getQuick(i) - B.getQuick(i)) > epsilon) return false;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns whether all cells of the given matrix <tt>A</tt> are equal to the given value.
 * The result is <tt>true</tt> if and only if <tt>A != null</tt> and
 * <tt>! (Math.abs(value - A[row,col]) > tolerance())</tt> holds for all coordinates.</text>
      <param>A   the first matrix to compare.</param>
      <param>value   the value to compare against.</param>
      <return><tt>true</tt> if the matrix is equal to the value;
 * <tt>false</tt> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="293" endLine="310">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <declaration type="double" name="epsilon" />
      <scope startLine="299" endLine="308">
        <scope startLine="300" endLine="307">
          <declaration type="double" name="x" />
          <declaration type="double" name="diff" />
        </scope>
        <comment>if (!(A.getQuick(row,column) == value)) return false;</comment>
        <comment>if (Math.abs(value - A.getQuick(row,column)) > epsilon) return false;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns whether both given matrices <tt>A</tt> and <tt>B</tt> are equal.
 * The result is <tt>true</tt> if <tt>A==B</tt>. 
 * Otherwise, the result is <tt>true</tt> if and only if both arguments are <tt>!= null</tt>, 
 * have the same number of columns and rows and 
 * <tt>! (Math.abs(A[row,col] - B[row,col]) > tolerance())</tt> holds for all coordinates.</text>
      <param>A   the first matrix to compare.</param>
      <param>B   the second matrix to compare.</param>
      <return><tt>true</tt> if both matrices are equal;
 * <tt>false</tt> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="322" endLine="342">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <declaration type="double" name="epsilon" />
      <scope startLine="330" endLine="340">
        <scope startLine="331" endLine="339">
          <declaration type="double" name="x" />
          <declaration type="double" name="value" />
          <declaration type="double" name="diff" />
        </scope>
        <comment>if (!(A.getQuick(row,column) == B.getQuick(row,column))) return false;</comment>
        <comment>if (Math.abs((A.getQuick(row,column) - B.getQuick(row,column)) > epsilon) return false;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns whether all cells of the given matrix <tt>A</tt> are equal to the given value.
 * The result is <tt>true</tt> if and only if <tt>A != null</tt> and
 * <tt>! (Math.abs(value - A[slice,row,col]) > tolerance())</tt> holds for all coordinates.</text>
      <param>A   the first matrix to compare.</param>
      <param>value   the value to compare against.</param>
      <return><tt>true</tt> if the matrix is equal to the value;
 * <tt>false</tt> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="352" endLine="371">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <declaration type="double" name="epsilon" />
      <scope startLine="358" endLine="369">
        <scope startLine="359" endLine="368">
          <scope startLine="360" endLine="367">
            <declaration type="double" name="x" />
            <declaration type="double" name="diff" />
          </scope>
        </scope>
        <comment>if (!(A.getQuick(slice,row,column) == value)) return false;</comment>
        <comment>if (Math.abs(value - A.getQuick(slice,row,column)) > epsilon) return false;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns whether both given matrices <tt>A</tt> and <tt>B</tt> are equal.
 * The result is <tt>true</tt> if <tt>A==B</tt>. 
 * Otherwise, the result is <tt>true</tt> if and only if both arguments are <tt>!= null</tt>, 
 * have the same number of columns, rows and slices, and
 * <tt>! (Math.abs(A[slice,row,col] - B[slice,row,col]) > tolerance())</tt> holds for all coordinates.</text>
      <param>A   the first matrix to compare.</param>
      <param>B   the second matrix to compare.</param>
      <return><tt>true</tt> if both matrices are equal;
 * <tt>false</tt> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="383" endLine="406">
      <declaration type="int" name="slices" />
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <declaration type="double" name="epsilon" />
      <scope startLine="392" endLine="404">
        <scope startLine="393" endLine="403">
          <scope startLine="394" endLine="402">
            <declaration type="double" name="x" />
            <declaration type="double" name="value" />
            <declaration type="double" name="diff" />
          </scope>
        </scope>
        <comment>if (!(A.getQuick(slice,row,column) == B.getQuick(slice,row,column))) return false;</comment>
        <comment>if (Math.abs(A.getQuick(slice,row,column) - B.getQuick(slice,row,column)) > epsilon) return false;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Modifies the given matrix square matrix <tt>A</tt> such that it is diagonally dominant by row and column, hence non-singular, hence invertible.
 * For testing purposes only.</text>
      <param>A the square matrix to modify.</param>
      <throws>IllegalArgumentException if <tt>!isSquare(A)</tt>.</throws>
    </javadoc>
    <method type="void" name="generateNonSingular" startLine="413" endLine="425">
      <declaration type="cern.jet.math.Functions" name="F" />
      <declaration type="int" name="min" />
      <scope startLine="417" endLine="419" />
      <scope startLine="420" endLine="424">
        <declaration type="double" name="rowSum" />
        <declaration type="double" name="colSum" />
      </scope>
    </method>
    <javadoc />
    <method type="String" name="get" startLine="428" endLine="430" />
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>diagonal</i> if <tt>A[i,j] == 0</tt> whenever <tt>i != j</tt>.
 * Matrix may but need not be square.</text>
    </javadoc>
    <method type="boolean" name="isDiagonal" startLine="435" endLine="446">
      <declaration type="double" name="epsilon" />
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="439" endLine="444">
        <scope startLine="440" endLine="443" />
        <comment>if (row!=column && A.getQuick(row,column) != 0) return false;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>diagonally dominant by column</i> if the absolute value of each diagonal element is larger than the sum of the absolute values of the off-diagonal elements in the corresponding column.
 * <tt>returns true if for all i: abs(A[i,i]) &gt; Sum(abs(A[j,i])); j != i.</tt>
 * Matrix may but need not be square.
 * <p>
 * Note: Ignores tolerance.</text>
    </javadoc>
    <method type="boolean" name="isDiagonallyDominantByColumn" startLine="454" endLine="464">
      <declaration type="cern.jet.math.Functions" name="F" />
      <declaration type="double" name="epsilon" />
      <declaration type="int" name="min" />
      <scope startLine="458" endLine="462">
        <declaration type="double" name="diag" />
      </scope>
    </method>
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>diagonally dominant by row</i> if the absolute value of each diagonal element is larger than the sum of the absolute values of the off-diagonal elements in the corresponding row.
 * <tt>returns true if for all i: abs(A[i,i]) &gt; Sum(abs(A[i,j])); j != i.</tt> 
 * Matrix may but need not be square.
 * <p>
 * Note: Ignores tolerance.</text>
    </javadoc>
    <method type="boolean" name="isDiagonallyDominantByRow" startLine="472" endLine="482">
      <declaration type="cern.jet.math.Functions" name="F" />
      <declaration type="double" name="epsilon" />
      <declaration type="int" name="min" />
      <scope startLine="476" endLine="480">
        <declaration type="double" name="diag" />
      </scope>
    </method>
    <javadoc>
      <text>* A matrix <tt>A</tt> is an <i>identity</i> matrix if <tt>A[i,i] == 1</tt> and all other cells are zero.
 * Matrix may but need not be square.</text>
    </javadoc>
    <method type="boolean" name="isIdentity" startLine="487" endLine="501">
      <declaration type="double" name="epsilon" />
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="491" endLine="499">
        <scope startLine="492" endLine="498">
          <declaration type="double" name="v" />
          <scope startLine="494" endLine="496" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>lower bidiagonal</i> if <tt>A[i,j]==0</tt> unless <tt>i==j || i==j+1</tt>.
 * Matrix may but need not be square.</text>
    </javadoc>
    <method type="boolean" name="isLowerBidiagonal" startLine="506" endLine="519">
      <declaration type="double" name="epsilon" />
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="510" endLine="517">
        <scope startLine="511" endLine="516">
          <scope startLine="512" endLine="515" />
        </scope>
        <comment>if (A.getQuick(row,column) != 0) return false;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>lower triangular</i> if <tt>A[i,j]==0</tt> whenever <tt>i &lt; j</tt>.
 * Matrix may but need not be square.</text>
    </javadoc>
    <method type="boolean" name="isLowerTriangular" startLine="524" endLine="535">
      <declaration type="double" name="epsilon" />
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="528" endLine="533">
        <scope startLine="529" endLine="532" />
        <comment>if (A.getQuick(row,column) != 0) return false;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>non-negative</i> if <tt>A[i,j] &gt;= 0</tt> holds for all cells.
 * <p>
 * Note: Ignores tolerance.</text>
    </javadoc>
    <method type="boolean" name="isNonNegative" startLine="541" endLine="550">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="544" endLine="548">
        <scope startLine="545" endLine="547" />
      </scope>
    </method>
    <javadoc>
      <text>* A square matrix <tt>A</tt> is <i>orthogonal</i> if <tt>A*transpose(A) = I</tt>.</text>
      <throws>IllegalArgumentException if <tt>!isSquare(A)</tt>.</throws>
    </javadoc>
    <method type="boolean" name="isOrthogonal" startLine="555" endLine="558" />
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>positive</i> if <tt>A[i,j] &gt; 0</tt> holds for all cells.
 * <p>
 * Note: Ignores tolerance.</text>
    </javadoc>
    <method type="boolean" name="isPositive" startLine="564" endLine="573">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="567" endLine="571">
        <scope startLine="568" endLine="570" />
      </scope>
    </method>
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>singular</i> if it has no inverse, that is, iff <tt>det(A)==0</tt>.</text>
    </javadoc>
    <method type="boolean" name="isSingular" startLine="577" endLine="579" />
    <javadoc>
      <text>* A square matrix <tt>A</tt> is <i>skew-symmetric</i> if <tt>A = -transpose(A)</tt>, that is <tt>A[i,j] == -A[j,i]</tt>.</text>
      <throws>IllegalArgumentException if <tt>!isSquare(A)</tt>.</throws>
    </javadoc>
    <method type="boolean" name="isSkewSymmetric" startLine="584" endLine="596">
      <declaration type="double" name="epsilon" />
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="589" endLine="594">
        <scope startLine="590" endLine="593" />
        <comment>if (A.getQuick(row,column) != -A.getQuick(column,row)) return false;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>square</i> if it has the same number of rows and columns.</text>
    </javadoc>
    <method type="boolean" name="isSquare" startLine="600" endLine="602" />
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>strictly lower triangular</i> if <tt>A[i,j]==0</tt> whenever <tt>i &lt;= j</tt>.
 * Matrix may but need not be square.</text>
    </javadoc>
    <method type="boolean" name="isStrictlyLowerTriangular" startLine="607" endLine="618">
      <declaration type="double" name="epsilon" />
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="611" endLine="616">
        <scope startLine="612" endLine="615" />
        <comment>if (A.getQuick(row,column) != 0) return false;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>strictly triangular</i> if it is triangular and its diagonal elements all equal 0.
 * Matrix may but need not be square.</text>
    </javadoc>
    <method type="boolean" name="isStrictlyTriangular" startLine="623" endLine="632">
      <declaration type="double" name="epsilon" />
      <scope startLine="627" endLine="630">
        <comment>if (A.getQuick(i,i) != 0) return false;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>strictly upper triangular</i> if <tt>A[i,j]==0</tt> whenever <tt>i &gt;= j</tt>.
 * Matrix may but need not be square.</text>
    </javadoc>
    <method type="boolean" name="isStrictlyUpperTriangular" startLine="637" endLine="648">
      <declaration type="double" name="epsilon" />
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="641" endLine="646">
        <scope startLine="642" endLine="645" />
        <comment>if (A.getQuick(row,column) != 0) return false;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>symmetric</i> if <tt>A = tranpose(A)</tt>, that is <tt>A[i,j] == A[j,i]</tt>.</text>
      <throws>IllegalArgumentException if <tt>!isSquare(A)</tt>.</throws>
    </javadoc>
    <method type="boolean" name="isSymmetric" startLine="653" endLine="656" />
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>triangular</i> iff it is either upper or lower triangular.
 * Matrix may but need not be square.</text>
    </javadoc>
    <method type="boolean" name="isTriangular" startLine="661" endLine="663" />
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>tridiagonal</i> if <tt>A[i,j]==0</tt> whenever <tt>Math.abs(i-j) > 1</tt>.
 * Matrix may but need not be square.</text>
    </javadoc>
    <method type="boolean" name="isTridiagonal" startLine="668" endLine="681">
      <declaration type="double" name="epsilon" />
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="672" endLine="679">
        <scope startLine="673" endLine="678">
          <scope startLine="674" endLine="677" />
        </scope>
        <comment>if (A.getQuick(row,column) != 0) return false;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>unit triangular</i> if it is triangular and its diagonal elements all equal 1.
 * Matrix may but need not be square.</text>
    </javadoc>
    <method type="boolean" name="isUnitTriangular" startLine="686" endLine="695">
      <declaration type="double" name="epsilon" />
      <scope startLine="690" endLine="693">
        <comment>if (A.getQuick(i,i) != 1) return false;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>upper bidiagonal</i> if <tt>A[i,j]==0</tt> unless <tt>i==j || i==j-1</tt>.
 * Matrix may but need not be square.</text>
    </javadoc>
    <method type="boolean" name="isUpperBidiagonal" startLine="700" endLine="713">
      <declaration type="double" name="epsilon" />
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="704" endLine="711">
        <scope startLine="705" endLine="710">
          <scope startLine="706" endLine="709" />
        </scope>
        <comment>if (A.getQuick(row,column) != 0) return false;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>upper triangular</i> if <tt>A[i,j]==0</tt> whenever <tt>i &gt; j</tt>.
 * Matrix may but need not be square.</text>
    </javadoc>
    <method type="boolean" name="isUpperTriangular" startLine="718" endLine="729">
      <declaration type="double" name="epsilon" />
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="722" endLine="727">
        <scope startLine="723" endLine="726" />
        <comment>if (A.getQuick(row,column) != 0) return false;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* A matrix <tt>A</tt> is <i>zero</i> if all its cells are zero.</text>
    </javadoc>
    <method type="boolean" name="isZero" startLine="733" endLine="735" />
    <javadoc>
      <text>* The <i>lower bandwidth</i> of a square matrix <tt>A</tt> is the maximum <tt>i-j</tt> for which <tt>A[i,j]</tt> is nonzero and <tt>i &gt; j</tt>.
 * A <i>banded</i> matrix has a "band" about the diagonal.
 * Diagonal, tridiagonal and triangular matrices are special cases.</text>
      <param>A the square matrix to analyze.</param>
      <return>the lower bandwith.</return>
      <throws>IllegalArgumentException if <tt>!isSquare(A)</tt>.</throws>
      <see>#semiBandwidth(DoubleMatrix2D)</see>
      <see>#upperBandwidth(DoubleMatrix2D)</see>
    </javadoc>
    <method type="int" name="lowerBandwidth" startLine="747" endLine="760">
      <declaration type="double" name="epsilon" />
      <declaration type="int" name="rows" />
      <scope startLine="752" endLine="758">
        <scope startLine="753" endLine="757">
          <declaration type="int" name="j" />
        </scope>
        <comment>if (A.getQuick(j,i) != 0) return k;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the <i>semi-bandwidth</i> of the given square matrix <tt>A</tt>.
 * A <i>banded</i> matrix has a "band" about the diagonal.
 * It is a matrix with all cells equal to zero, 
 * with the possible exception of the cells along the diagonal line,
 * the <tt>k</tt> diagonal lines above the diagonal, and the <tt>k</tt> diagonal lines below the diagonal.
 * The <i>semi-bandwith l</i> is the number <tt>k+1</tt>.
 * The <i>bandwidth p</i> is the number <tt>2*k + 1</tt>.
 * For example, a tridiagonal matrix corresponds to <tt>k=1, l=2, p=3</tt>, 
 * a diagonal or zero matrix corresponds to <tt>k=0, l=1, p=1</tt>, 
 * <p>
 * The <i>upper bandwidth</i> is the maximum <tt>j-i</tt> for which <tt>A[i,j]</tt> is nonzero and <tt>j &gt; i</tt>.
 * The <i>lower bandwidth</i> is the maximum <tt>i-j</tt> for which <tt>A[i,j]</tt> is nonzero and <tt>i &gt; j</tt>. 
 * Diagonal, tridiagonal and triangular matrices are special cases.
 * <p>
 * Examples:
 * <table border="1" cellspacing="0">
 * <tr align="left" valign="top"> 
 * <td valign="middle" align="left"><tt>matrix</tt></td>
 * <td> <tt>4&nbsp;x&nbsp;4&nbsp;<br>
 * 0&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;0 </tt></td>
 * <td><tt>4&nbsp;x&nbsp;4<br>
 * 1&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;0<br>
 * 0&nbsp;0&nbsp;0&nbsp;1 </tt></td>
 * <td><tt>4&nbsp;x&nbsp;4<br>
 * 1&nbsp;1&nbsp;0&nbsp;0<br>
 * 1&nbsp;1&nbsp;1&nbsp;0<br>
 * 0&nbsp;1&nbsp;1&nbsp;1<br>
 * 0&nbsp;0&nbsp;1&nbsp;1 </tt></td>
 * <td><tt> 4&nbsp;x&nbsp;4<br>
 * 0&nbsp;1&nbsp;1&nbsp;1<br>
 * 0&nbsp;1&nbsp;1&nbsp;1<br>
 * 0&nbsp;0&nbsp;0&nbsp;1<br>
 * 0&nbsp;0&nbsp;0&nbsp;1 </tt></td>
 * <td><tt> 4&nbsp;x&nbsp;4<br>
 * 0&nbsp;0&nbsp;0&nbsp;0<br>
 * 1&nbsp;1&nbsp;0&nbsp;0<br>
 * 1&nbsp;1&nbsp;0&nbsp;0<br>
 * 1&nbsp;1&nbsp;1&nbsp;1 </tt></td>
 * <td><tt>4&nbsp;x&nbsp;4<br>
 * 1&nbsp;1&nbsp;0&nbsp;0<br>
 * 0&nbsp;1&nbsp;1&nbsp;0<br>
 * 0&nbsp;1&nbsp;0&nbsp;1<br>
 * 1&nbsp;0&nbsp;1&nbsp;1 </tt><tt> </tt> </td>
 * <td><tt>4&nbsp;x&nbsp;4<br>
 * 1&nbsp;1&nbsp;1&nbsp;0<br>
 * 0&nbsp;1&nbsp;0&nbsp;0<br>
 * 1&nbsp;1&nbsp;0&nbsp;1<br>
 * 0&nbsp;0&nbsp;1&nbsp;1 </tt> </td>
 * </tr>
 * <tr align="center" valign="middle"> 
 * <td><tt>upperBandwidth</tt></td>
 * <td> 
 * <div align="center"><tt>0</tt></div>
 * </td>
 * <td> 
 * <div align="center"><tt>0</tt></div>
 * </td>
 * <td> 
 * <div align="center"><tt>1</tt></div>
 * </td>
 * <td><tt>3</tt></td>
 * <td align="center" valign="middle"><tt>0</tt></td>
 * <td align="center" valign="middle"> 
 * <div align="center"><tt>1</tt></div>
 * </td>
 * <td align="center" valign="middle"> 
 * <div align="center"><tt>2</tt></div>
 * </td>
 * </tr>
 * <tr align="center" valign="middle"> 
 * <td><tt>lowerBandwidth</tt></td>
 * <td> 
 * <div align="center"><tt>0</tt></div>
 * </td>
 * <td> 
 * <div align="center"><tt>0</tt></div>
 * </td>
 * <td> 
 * <div align="center"><tt>1</tt></div>
 * </td>
 * <td><tt>0</tt></td>
 * <td align="center" valign="middle"><tt>3</tt></td>
 * <td align="center" valign="middle"> 
 * <div align="center"><tt>3</tt></div>
 * </td>
 * <td align="center" valign="middle"> 
 * <div align="center"><tt>2</tt></div>
 * </td>
 * </tr>
 * <tr align="center" valign="middle"> 
 * <td><tt>semiBandwidth</tt></td>
 * <td> 
 * <div align="center"><tt>1</tt></div>
 * </td>
 * <td> 
 * <div align="center"><tt>1</tt></div>
 * </td>
 * <td> 
 * <div align="center"><tt>2</tt></div>
 * </td>
 * <td><tt>4</tt></td>
 * <td align="center" valign="middle"><tt>4</tt></td>
 * <td align="center" valign="middle"> 
 * <div align="center"><tt>4</tt></div>
 * </td>
 * <td align="center" valign="middle"> 
 * <div align="center"><tt>3</tt></div>
 * </td>
 * </tr>
 * <tr align="center" valign="middle"> 
 * <td><tt>description</tt></td>
 * <td> 
 * <div align="center"><tt>zero</tt></div>
 * </td>
 * <td> 
 * <div align="center"><tt>diagonal</tt></div>
 * </td>
 * <td> 
 * <div align="center"><tt>tridiagonal</tt></div>
 * </td>
 * <td><tt>upper triangular</tt></td>
 * <td align="center" valign="middle"><tt>lower triangular</tt></td>
 * <td align="center" valign="middle"> 
 * <div align="center"><tt>unstructured</tt></div>
 * </td>
 * <td align="center" valign="middle"> 
 * <div align="center"><tt>unstructured</tt></div>
 * </td>
 * </tr>
 * </table></text>
      <param>A the square matrix to analyze.</param>
      <return>the semi-bandwith <tt>l</tt>.</return>
      <throws>IllegalArgumentException if <tt>!isSquare(A)</tt>.</throws>
      <see>#lowerBandwidth(DoubleMatrix2D)</see>
      <see>#upperBandwidth(DoubleMatrix2D)</see>
    </javadoc>
    <method type="int" name="semiBandwidth" startLine="904" endLine="919">
      <declaration type="double" name="epsilon" />
      <declaration type="int" name="rows" />
      <scope startLine="909" endLine="917">
        <scope startLine="910" endLine="916">
          <declaration type="int" name="j" />
        </scope>
        <comment>if (A.getQuick(j,i) != 0) return k+1;</comment>
        <comment>if (A.getQuick(i,j) != 0) return k+1;</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Sets the tolerance to <tt>Math.abs(newTolerance)</tt>.</text>
      <throws>UnsupportedOperationException if <tt>this==DEFAULT || this==ZERO || this==TWELVE</tt>.</throws>
    </javadoc>
    <method type="void" name="setTolerance" startLine="924" endLine="930">
      <scope startLine="925" endLine="928">
        <comment>throw new UnsupportedOperationException("Attempted to modify object.");  since JDK1.2</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the current tolerance.</text>
    </javadoc>
    <method type="double" name="tolerance" startLine="934" endLine="936" />
    <javadoc>
      <text>* Returns summary information about the given matrix <tt>A</tt>.
 * That is a String with (propertyName, propertyValue) pairs.
 * Useful for debugging or to quickly get the rough picture of a matrix.
 * For example,
 * <pre>
 * density                      : 0.9
 * isDiagonal                   : false
 * isDiagonallyDominantByRow    : false
 * isDiagonallyDominantByColumn : false
 * isIdentity                   : false
 * isLowerBidiagonal            : false
 * isLowerTriangular            : false
 * isNonNegative                : true
 * isOrthogonal                 : Illegal operation or error: Matrix must be square.
 * isPositive                   : true
 * isSingular                   : Illegal operation or error: Matrix must be square.
 * isSkewSymmetric              : Illegal operation or error: Matrix must be square.
 * isSquare                     : false
 * isStrictlyLowerTriangular    : false
 * isStrictlyTriangular         : false
 * isStrictlyUpperTriangular    : false
 * isSymmetric                  : Illegal operation or error: Matrix must be square.
 * isTriangular                 : false
 * isTridiagonal                : false
 * isUnitTriangular             : false
 * isUpperBidiagonal            : false
 * isUpperTriangular            : false
 * isZero                       : false
 * lowerBandwidth               : Illegal operation or error: Matrix must be square.
 * semiBandwidth                : Illegal operation or error: Matrix must be square.
 * upperBandwidth               : Illegal operation or error: Matrix must be square.
 * </pre></text>
    </javadoc>
    <method type="String" name="toString" startLine="971" endLine="1120">
      <declaration type="cern.colt.list.ObjectArrayList" name="names" />
      <declaration type="cern.colt.list.ObjectArrayList" name="values" />
      <declaration type="String" name="unknown" />
      <scope startLine="978" endLine="978" />
      <scope startLine="979" endLine="979" />
      <scope startLine="983" endLine="983" />
      <scope startLine="984" endLine="984" />
      <scope startLine="988" endLine="988" />
      <scope startLine="989" endLine="989" />
      <scope startLine="993" endLine="993" />
      <scope startLine="994" endLine="994" />
      <scope startLine="997" endLine="997" />
      <scope startLine="998" endLine="998" />
      <scope startLine="1001" endLine="1001" />
      <scope startLine="1002" endLine="1002" />
      <scope startLine="1005" endLine="1005" />
      <scope startLine="1006" endLine="1006" />
      <scope startLine="1009" endLine="1009" />
      <scope startLine="1010" endLine="1010" />
      <scope startLine="1013" endLine="1013" />
      <scope startLine="1014" endLine="1014" />
      <scope startLine="1017" endLine="1017" />
      <scope startLine="1018" endLine="1018" />
      <scope startLine="1021" endLine="1021" />
      <scope startLine="1022" endLine="1022" />
      <scope startLine="1025" endLine="1025" />
      <scope startLine="1026" endLine="1026" />
      <scope startLine="1029" endLine="1029" />
      <scope startLine="1030" endLine="1030" />
      <scope startLine="1033" endLine="1033" />
      <scope startLine="1034" endLine="1034" />
      <scope startLine="1037" endLine="1037" />
      <scope startLine="1038" endLine="1038" />
      <scope startLine="1041" endLine="1041" />
      <scope startLine="1042" endLine="1042" />
      <scope startLine="1045" endLine="1045" />
      <scope startLine="1046" endLine="1046" />
      <scope startLine="1049" endLine="1049" />
      <scope startLine="1050" endLine="1050" />
      <scope startLine="1053" endLine="1053" />
      <scope startLine="1054" endLine="1054" />
      <scope startLine="1057" endLine="1057" />
      <scope startLine="1058" endLine="1058" />
      <scope startLine="1061" endLine="1061" />
      <scope startLine="1062" endLine="1062" />
      <scope startLine="1065" endLine="1065" />
      <scope startLine="1066" endLine="1066" />
      <scope startLine="1069" endLine="1069" />
      <scope startLine="1070" endLine="1070" />
      <scope startLine="1073" endLine="1073" />
      <scope startLine="1074" endLine="1074" />
      <scope startLine="1077" endLine="1077" />
      <scope startLine="1078" endLine="1078" />
      <scope startLine="1081" endLine="1081" />
      <scope startLine="1082" endLine="1082" />
      <declaration type="cern.colt.function.IntComparator" name="comp" />
      <method type="int" name="compare" startLine="1087" endLine="1089" />
      <declaration type="cern.colt.Swapper" name="swapper" />
      <method type="void" name="swap" startLine="1092" endLine="1096">
        <declaration type="Object" name="tmp" />
      </method>
      <declaration type="int" name="maxLength" />
      <scope startLine="1102" endLine="1105">
        <declaration type="int" name="length" />
      </scope>
      <declaration type="StringBuffer" name="buf" />
      <scope startLine="1109" endLine="1117">
        <declaration type="String" name="name" />
      </scope>
      <comment>determine properties</comment>
      <comment>determine properties</comment>
      <comment>determine properties</comment>
      <comment>determine properties</comment>
      <comment>sort ascending by property name</comment>
      <comment>determine padding for nice formatting</comment>
      <comment>finally, format properties</comment>
    </method>
    <javadoc>
      <text>* The <i>upper bandwidth</i> of a square matrix <tt>A</tt> is the 
 * maximum <tt>j-i</tt> for which <tt>A[i,j]</tt> is nonzero and <tt>j &gt; i</tt>.
 * A <i>banded</i> matrix has a "band" about the diagonal. 
 * Diagonal, tridiagonal and triangular matrices are special cases.</text>
      <param>A the square matrix to analyze.</param>
      <return>the upper bandwith.</return>
      <throws>IllegalArgumentException if <tt>!isSquare(A)</tt>.</throws>
      <see>#semiBandwidth(DoubleMatrix2D)</see>
      <see>#lowerBandwidth(DoubleMatrix2D)</see>
    </javadoc>
    <method type="int" name="upperBandwidth" startLine="1133" endLine="1146">
      <declaration type="double" name="epsilon" />
      <declaration type="int" name="rows" />
      <scope startLine="1138" endLine="1144">
        <scope startLine="1139" endLine="1143">
          <declaration type="int" name="j" />
        </scope>
        <comment>if (A.getQuick(i,j) != 0) return k;</comment>
      </scope>
    </method>
  </class>
</source>
