<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.bench">
  <import name="cern.colt.matrix.DoubleFactory2D" />
  <import name="cern.colt.matrix.DoubleFactory3D" />
  <import name="cern.colt.matrix.DoubleMatrix2D" />
  <import name="cern.colt.matrix.DoubleMatrix3D" />
  <class name="BenchmarkMatrix" startLine="15">
    <javadoc>
      <text>* Configurable matrix benchmark.
 * Runs the operations defined in main(args) or in the file specified by args.
 * To get <a href="doc-files/usage.txt">this overall help</a> on usage type <tt>java cern.colt.matrix.bench.BenchmarkMatrix -help</tt>.
 * To get help on usage of a given command, type <tt>java cern.colt.matrix.bench.BenchmarkMatrix -help &lt;command&gt;</tt>.
 * Here is the <a href="doc-files/usage_dgemm.txt">help ouput for the dgemm</a> command.
 * <a href="../doc-files/dgemmColt1.0.1ibm1.3LxPIII_2.txt">Here</a> is a sample result.
 * For more results see the <a href="../doc-files/performanceLog.html">performance log</a>.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>0.5, 10-May-2000</version>
    </javadoc>
    <javadoc>
      <text>* Benchmark constructor comment.</text>
    </javadoc>
    <method type="constructor" name="BenchmarkMatrix" startLine="31" endLine="31" />
    <javadoc>
      <text>* Not yet documented.</text>
    </javadoc>
    <method type="void" name="bench_dgemm" startLine="35" endLine="68">
      <declaration type="String[]" name="types" />
      <declaration type="int" name="cpus" />
      <declaration type="double" name="minSecs" />
      <declaration type="boolean" name="transposeA" />
      <declaration type="boolean" name="transposeB" />
      <declaration type="double[]" name="densities" />
      <declaration type="int[]" name="sizes" />
      <scope startLine="44" endLine="55">
        <declaration type="int" name="k" />
        <comment>parse</comment>
      </scope>
      <scope startLine="56" endLine="60" />
      <declaration type="Double2DProcedure" name="fun" />
      <declaration type="String" name="title" />
      <declaration type="String" name="params" />
    </method>
    <javadoc>
      <text>* Not yet documented.</text>
    </javadoc>
    <method type="void" name="bench_dgemv" startLine="72" endLine="103">
      <declaration type="String[]" name="types" />
      <declaration type="int" name="cpus" />
      <declaration type="double" name="minSecs" />
      <declaration type="boolean" name="transposeA" />
      <declaration type="double[]" name="densities" />
      <declaration type="int[]" name="sizes" />
      <scope startLine="80" endLine="90">
        <declaration type="int" name="k" />
        <comment>parse</comment>
      </scope>
      <scope startLine="91" endLine="95" />
      <declaration type="Double2DProcedure" name="fun" />
      <declaration type="String" name="title" />
      <declaration type="String" name="params" />
    </method>
    <javadoc>
      <text>* Not yet documented.</text>
    </javadoc>
    <method type="void" name="bench_pow" startLine="107" endLine="138">
      <declaration type="String[]" name="types" />
      <declaration type="int" name="cpus" />
      <declaration type="double" name="minSecs" />
      <declaration type="double[]" name="densities" />
      <declaration type="int" name="exponent" />
      <declaration type="int[]" name="sizes" />
      <scope startLine="115" endLine="125">
        <declaration type="int" name="k" />
        <comment>parse</comment>
      </scope>
      <scope startLine="126" endLine="130" />
      <declaration type="Double2DProcedure" name="fun" />
      <declaration type="String" name="title" />
      <declaration type="String" name="params" />
    </method>
    <javadoc>
      <text>* Not yet documented.</text>
    </javadoc>
    <method type="void" name="benchGeneric" startLine="142" endLine="168">
      <declaration type="String[]" name="types" />
      <declaration type="int" name="cpus" />
      <declaration type="double" name="minSecs" />
      <declaration type="double[]" name="densities" />
      <declaration type="int[]" name="sizes" />
      <scope startLine="149" endLine="158">
        <declaration type="int" name="k" />
        <comment>parse</comment>
      </scope>
      <scope startLine="159" endLine="163" />
      <declaration type="String" name="title" />
    </method>
    <javadoc />
    <method type="String" name="commands" startLine="172" endLine="174" />
    <javadoc>
      <text>* Linear algebrax matrix-matrix multiply.</text>
    </javadoc>
    <method type="Double2DProcedure" name="fun_dgemm" startLine="178" endLine="198">
      <method type="String" name="toString" startLine="180" endLine="180" />
      <method type="void" name="setParameters" startLine="181" endLine="186" />
      <method type="void" name="init" startLine="187" endLine="187" />
      <method type="void" name="apply" startLine="188" endLine="190" />
      <method type="double" name="operations" startLine="191" endLine="196">
        <declaration type="double" name="m" />
        <declaration type="double" name="n" />
        <declaration type="double" name="p" />
      </method>
      <comment>Mflops</comment>
    </method>
    <javadoc>
      <text>* Linear algebrax matrix-matrix multiply.</text>
    </javadoc>
    <method type="Double2DProcedure" name="fun_dgemv" startLine="202" endLine="222">
      <method type="String" name="toString" startLine="204" endLine="204" />
      <method type="void" name="setParameters" startLine="205" endLine="210" />
      <method type="void" name="init" startLine="211" endLine="211" />
      <method type="void" name="apply" startLine="212" endLine="214" />
      <method type="double" name="operations" startLine="215" endLine="220">
        <declaration type="double" name="m" />
        <declaration type="double" name="n" />
      </method>
      <comment>Mflops</comment>
      <comment>double p = B.columns();</comment>
    </method>
    <javadoc>
      <text>* 2D assign with get,set</text>
    </javadoc>
    <method type="Double2DProcedure" name="fun_pow" startLine="226" endLine="263">
      <declaration type="double" name="dummy" />
      <method type="String" name="toString" startLine="229" endLine="229" />
      <method type="void" name="setParameters" startLine="230" endLine="238">
        <scope startLine="231" endLine="237">
          <scope startLine="233" endLine="235" />
          <comment>must be nonsingular for inversion</comment>
        </scope>
      </method>
      <method type="void" name="init" startLine="240" endLine="240" />
      <method type="void" name="apply" startLine="241" endLine="243" />
      <method type="double" name="operations" startLine="244" endLine="261">
        <declaration type="double" name="m" />
        <declaration type="double" name="mflops" />
        <scope startLine="248" endLine="257">
          <declaration type="double" name="N" />
          <declaration type="double" name="n" />
          <declaration type="double" name="nx" />
          <comment>LU.decompose</comment>
          <comment>LU.solve</comment>
        </scope>
      </method>
      <comment>Mflops</comment>
      <comment>identity</comment>
      <comment>mult</comment>
    </method>
    <javadoc>
      <text>* 2D assign with A.assign(B)</text>
    </javadoc>
    <method type="Double2DProcedure" name="funAssign" startLine="267" endLine="275">
      <method type="String" name="toString" startLine="269" endLine="269" />
      <method type="void" name="init" startLine="270" endLine="270" />
      <method type="void" name="apply" startLine="271" endLine="273" />
    </method>
    <javadoc>
      <text>* 2D assign with get,set</text>
    </javadoc>
    <method type="Double2DProcedure" name="funAssignGetSet" startLine="279" endLine="300">
      <method type="String" name="toString" startLine="281" endLine="281" />
      <method type="void" name="init" startLine="282" endLine="282" />
      <method type="void" name="apply" startLine="283" endLine="298">
        <declaration type="int" name="rows" />
        <declaration type="int" name="columns" />
        <scope startLine="293" endLine="297">
          <scope startLine="294" endLine="296" />
        </scope>
      </method>
      <comment>for (int row=rows; --row >= 0; ) {
for (int column=columns; --column >= 0; ) {
A.set(row,column, B.get(row,column));
}
}</comment>
    </method>
    <javadoc>
      <text>* 2D assign with getQuick,setQuick</text>
    </javadoc>
    <method type="Double2DProcedure" name="funAssignGetSetQuick" startLine="304" endLine="320">
      <method type="String" name="toString" startLine="306" endLine="306" />
      <method type="void" name="init" startLine="307" endLine="307" />
      <method type="void" name="apply" startLine="308" endLine="318">
        <declaration type="int" name="rows" />
        <declaration type="int" name="columns" />
        <scope startLine="313" endLine="317">
          <scope startLine="314" endLine="316" />
        </scope>
      </method>
      <comment>for (int row=rows; --row >= 0; ) {</comment>
      <comment>for (int column=columns; --column >= 0; ) {</comment>
    </method>
    <javadoc>
      <text>* 2D assign with A.assign(B)</text>
    </javadoc>
    <method type="Double2DProcedure" name="funAssignLog" startLine="324" endLine="332">
      <method type="String" name="toString" startLine="326" endLine="326" />
      <method type="void" name="init" startLine="327" endLine="327" />
      <method type="void" name="apply" startLine="328" endLine="330" />
    </method>
    <javadoc>
      <text>* 2D assign with A.assign(B)</text>
    </javadoc>
    <method type="Double2DProcedure" name="funAssignPlusMult" startLine="336" endLine="349">
      <method type="String" name="toString" startLine="338" endLine="338" />
      <method type="void" name="init" startLine="339" endLine="339" />
      <method type="void" name="apply" startLine="340" endLine="342" />
      <method type="double" name="operations" startLine="343" endLine="347">
        <declaration type="double" name="m" />
        <declaration type="double" name="n" />
      </method>
      <comment>Mflops</comment>
    </method>
    <javadoc>
      <text>* Linear algebrax matrix-matrix multiply.</text>
    </javadoc>
    <method type="Double2DProcedure" name="funCorrelation" startLine="353" endLine="370">
      <method type="String" name="toString" startLine="355" endLine="355" />
      <method type="void" name="init" startLine="356" endLine="356" />
      <method type="void" name="setParameters" startLine="357" endLine="359" />
      <method type="void" name="apply" startLine="360" endLine="363" />
      <method type="double" name="operations" startLine="364" endLine="368">
        <declaration type="double" name="m" />
        <declaration type="double" name="n" />
      </method>
      <comment>transposed --> faster (memory aware) iteration in correlation algo</comment>
      <comment>Mflops</comment>
    </method>
    <javadoc>
      <text>* Element-by-element matrix-matrix multiply.</text>
    </javadoc>
    <method type="Double2DProcedure" name="funElementwiseMult" startLine="374" endLine="382">
      <method type="String" name="toString" startLine="376" endLine="376" />
      <method type="void" name="init" startLine="377" endLine="377" />
      <method type="void" name="apply" startLine="378" endLine="380" />
    </method>
    <javadoc>
      <text>* Element-by-element matrix-matrix multiply.</text>
    </javadoc>
    <method type="Double2DProcedure" name="funElementwiseMultB" startLine="386" endLine="394">
      <method type="String" name="toString" startLine="388" endLine="388" />
      <method type="void" name="init" startLine="389" endLine="389" />
      <method type="void" name="apply" startLine="390" endLine="392" />
    </method>
    <javadoc>
      <text>* 2D assign with get,set</text>
    </javadoc>
    <method type="Double2DProcedure" name="funGetQuick" startLine="398" endLine="417">
      <declaration type="double" name="dummy" />
      <method type="String" name="toString" startLine="401" endLine="401" />
      <method type="void" name="init" startLine="402" endLine="402" />
      <method type="void" name="apply" startLine="403" endLine="415">
        <declaration type="int" name="rows" />
        <declaration type="int" name="columns" />
        <declaration type="double" name="sum" />
        <scope startLine="409" endLine="413">
          <scope startLine="410" endLine="412" />
        </scope>
      </method>
      <comment>for (int row=rows; --row >= 0; ) {</comment>
      <comment>for (int column=columns; --column >= 0; ) {</comment>
    </method>
    <javadoc>
      <text>* 2D assign with getQuick,setQuick</text>
    </javadoc>
    <method type="Double2DProcedure" name="funLUDecompose" startLine="421" endLine="434">
      <declaration type="cern.colt.matrix.linalg.LUDecompositionQuick" name="lu" />
      <method type="String" name="toString" startLine="424" endLine="424" />
      <method type="void" name="init" startLine="425" endLine="425" />
      <method type="void" name="apply" startLine="426" endLine="428" />
      <method type="double" name="operations" startLine="429" endLine="432">
        <declaration type="double" name="N" />
      </method>
      <comment>Mflops</comment>
    </method>
    <javadoc>
      <text>* 2D assign with getQuick,setQuick</text>
    </javadoc>
    <method type="Double2DProcedure" name="funLUSolve" startLine="438" endLine="462">
      <declaration type="cern.colt.matrix.linalg.LUDecompositionQuick" name="lu" />
      <method type="String" name="toString" startLine="441" endLine="441" />
      <method type="void" name="setParameters" startLine="442" endLine="451">
        <scope startLine="445" endLine="447" />
      </method>
      <method type="void" name="init" startLine="452" endLine="452" />
      <method type="void" name="apply" startLine="453" endLine="455" />
      <method type="double" name="operations" startLine="456" endLine="460">
        <declaration type="double" name="n" />
        <declaration type="double" name="nx" />
      </method>
      <comment>Mflops</comment>
    </method>
    <javadoc>
      <text>* Linear algebrax matrix-matrix multiply.</text>
    </javadoc>
    <method type="Double2DProcedure" name="funMatMultLarge" startLine="466" endLine="484">
      <method type="String" name="toString" startLine="468" endLine="468" />
      <method type="void" name="setParameters" startLine="469" endLine="474" />
      <method type="void" name="init" startLine="475" endLine="475" />
      <method type="void" name="apply" startLine="476" endLine="476" />
      <method type="double" name="operations" startLine="477" endLine="482">
        <declaration type="double" name="m" />
        <declaration type="double" name="n" />
        <declaration type="double" name="p" />
      </method>
      <comment>do not allocate mem for "D" --> safe some mem</comment>
      <comment>Mflops</comment>
    </method>
    <javadoc>
      <text>* Linear algebrax matrix-vector multiply.</text>
    </javadoc>
    <method type="Double2DProcedure" name="funMatVectorMult" startLine="488" endLine="506">
      <method type="String" name="toString" startLine="490" endLine="490" />
      <method type="void" name="setParameters" startLine="491" endLine="496" />
      <method type="void" name="init" startLine="497" endLine="497" />
      <method type="void" name="apply" startLine="498" endLine="498" />
      <method type="double" name="operations" startLine="499" endLine="504">
        <declaration type="double" name="m" />
        <declaration type="double" name="n" />
      </method>
      <comment>Mflops</comment>
      <comment>double p = B.columns();</comment>
    </method>
    <javadoc>
      <text>* 2D assign with get,set</text>
    </javadoc>
    <method type="Double2DProcedure" name="funSetQuick" startLine="510" endLine="540">
      <declaration type="int" name="current" />
      <declaration type="double" name="density" />
      <method type="String" name="toString" startLine="514" endLine="514" />
      <method type="void" name="init" startLine="515" endLine="520">
        <declaration type="int" name="seed" />
      </method>
      <method type="void" name="apply" startLine="521" endLine="538">
        <declaration type="int" name="rows" />
        <declaration type="int" name="columns" />
        <scope startLine="526" endLine="537">
          <scope startLine="527" endLine="536">
            <declaration type="double" name="random" />
          </scope>
          <comment>a very fast random number generator (this is an inline version of class cern.jet.random.engine.DRand)</comment>
          <comment>random uniform in (0.0,1.0)</comment>
        </scope>
      </method>
      <comment>for (int row=rows; --row >= 0; ) {</comment>
      <comment>for (int column=columns; --column >= 0; ) {</comment>
    </method>
    <javadoc />
    <method type="Double2DProcedure" name="funSOR5" startLine="544" endLine="567">
      <declaration type="double" name="value" />
      <declaration type="double" name="omega" />
      <declaration type="double" name="alpha" />
      <declaration type="double" name="beta" />
      <method type="double" name="apply" startLine="554" endLine="556" />
      <declaration type="cern.colt.function.Double9Function" name="function" />
      <method type="String" name="toString" startLine="558" endLine="558" />
      <method type="void" name="init" startLine="559" endLine="559" />
      <method type="void" name="apply" startLine="560" endLine="560" />
      <method type="double" name="operations" startLine="561" endLine="565">
        <declaration type="double" name="n" />
        <declaration type="double" name="m" />
      </method>
      <comment>Mflops</comment>
    </method>
    <javadoc />
    <method type="Double2DProcedure" name="funSOR8" startLine="571" endLine="594">
      <declaration type="double" name="value" />
      <declaration type="double" name="omega" />
      <declaration type="double" name="alpha" />
      <declaration type="double" name="beta" />
      <method type="double" name="apply" startLine="581" endLine="583" />
      <declaration type="cern.colt.function.Double9Function" name="function" />
      <method type="String" name="toString" startLine="585" endLine="585" />
      <method type="void" name="init" startLine="586" endLine="586" />
      <method type="void" name="apply" startLine="587" endLine="587" />
      <method type="double" name="operations" startLine="588" endLine="592">
        <declaration type="double" name="n" />
        <declaration type="double" name="m" />
      </method>
      <comment>Mflops</comment>
    </method>
    <javadoc />
    <method type="Double2DProcedure" name="funSort" startLine="598" endLine="604">
      <method type="String" name="toString" startLine="600" endLine="600" />
      <method type="void" name="init" startLine="601" endLine="601" />
      <method type="void" name="apply" startLine="602" endLine="602" />
    </method>
    <javadoc>
      <text>* Not yet documented.</text>
    </javadoc>
    <method type="DoubleFactory2D" name="getFactory" startLine="608" endLine="615">
      <declaration type="DoubleFactory2D" name="factory" />
      <declaration type="String" name="s" />
    </method>
    <javadoc>
      <text>* Not yet documented.</text>
    </javadoc>
    <method type="Double2DProcedure" name="getGenericFunction" startLine="619" endLine="639">
      <comment>else if (cmd.equals("xxxxxxxxxxxxxxxxx")) return xxxxx();
}</comment>
    </method>
    <javadoc>
      <text>* Executes a command</text>
    </javadoc>
    <method type="boolean" name="handle" startLine="643" endLine="661">
      <declaration type="boolean" name="success" />
      <declaration type="String" name="cmd" />
      <scope startLine="649" endLine="659">
        <declaration type="Double2DProcedure" name="fun" />
        <scope startLine="651" endLine="653" />
        <scope startLine="654" endLine="658">
          <declaration type="String" name="s" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Runs the matrix benchmark operations defined in args or in the file specified by args0.
 * To get detailed help on usage type java cern.colt.matrix.bench.BenchmarkMatrix -help</text>
    </javadoc>
    <method type="void" name="main" startLine="666" endLine="759">
      <declaration type="int" name="n" />
      <scope startLine="668" endLine="671">
        <comment>overall help</comment>
      </scope>
      <scope startLine="672" endLine="680">
        <scope startLine="673" endLine="675" />
        <scope startLine="676" endLine="678" />
        <comment>help on specific command</comment>
      </scope>
      <declaration type="cern.colt.Timer" name="timer" />
      <scope startLine="688" endLine="691">
        <comment>interactive mode, commands supplied via java class args</comment>
      </scope>
      <scope startLine="692" endLine="755">
        <declaration type="java.io.BufferedReader" name="reader" />
        <scope startLine="702" endLine="704" />
        <scope startLine="704" endLine="704" />
        <declaration type="java.io.StreamTokenizer" name="stream" />
        <scope startLine="710" endLine="754">
          <declaration type="cern.colt.list.ObjectArrayList" name="words" />
          <declaration type="int" name="token" />
          <scope startLine="713" endLine="736">
            <scope startLine="714" endLine="725">
              <scope startLine="716" endLine="723">
                <declaration type="String[]" name="params" />
              </scope>
            </scope>
            <scope startLine="726" endLine="735">
              <declaration type="String" name="word" />
              <declaration type="cern.colt.matrix.impl.Former" name="formatter" />
            </scope>
          </scope>
          <scope startLine="740" endLine="742" />
          <scope startLine="742" endLine="742" />
          <declaration type="String" name="line" />
          <scope startLine="749" endLine="751" />
        </scope>
        <scope startLine="754" endLine="754" />
        <comment>batch mode, read commands from file</comment>
        <comment>parse command file in args[0]
one command per line (including parameters)
for example:
 dgemm dense 2 2.0 false true 0.999 10 30 50 100 250 500 1000
dgemm dense 2 2.5 false true 0.999 10 50
dgemm sparse 2 2.5 false true 0.001 500 1000</comment>
        <comment>allow  comments</comment>
        <comment>allow /* comments */</comment>
        <comment>while not end of file</comment>
        <comment>execute a command line at a time</comment>
        <comment>System.out.println(words);</comment>
        <comment>ignore emty lines</comment>
        <comment>execute command</comment>
        <comment>ok: 2.0 -> 2   wrong: 2.0 -> 2.0 (kills Integer.parseInt())</comment>
        <comment>java.io.InputStream input = new java.io.DataInputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(args[1])));
BufferedReader d
= new BufferedReader(new InputStreamReader(in));</comment>
        <comment>while not end of file</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Executes procedure repeatadly until more than minSeconds have elapsed.</text>
    </javadoc>
    <method type="void" name="run" startLine="763" endLine="840">
      <declaration type="DoubleMatrix3D" name="timings" />
      <declaration type="cern.colt.Timer" name="runTime" />
      <scope startLine="775" endLine="813">
        <declaration type="DoubleFactory2D" name="factory" />
        <scope startLine="781" endLine="812">
          <declaration type="int" name="size" />
          <scope startLine="786" endLine="811">
            <declaration type="double" name="density" />
            <declaration type="float" name="opsPerSec" />
            <scope startLine="794" endLine="804">
              <declaration type="double" name="val" />
              <declaration type="DoubleMatrix2D" name="A" />
              <declaration type="DoubleMatrix2D" name="B" />
              <declaration type="double" name="ops" />
              <declaration type="double" name="secs" />
            </scope>
            <scope startLine="805" endLine="807" />
          </scope>
        </scope>
        <comment>DoubleFactory2D factory = (k==0 ? DoubleFactory2D.dense : k==1 ? DoubleFactory2D.sparse : DoubleFactory2D.rowCompressed);</comment>
        <comment>DoubleFactory2D factory = (k==0 ? DoubleFactory2D.dense : k==1 ? DoubleFactory2D.sparse : k==2 ? DoubleFactory2D.rowCompressed : DoubleFactory2D.rowCompressedModified);</comment>
        <comment>System.out.println("doing size="+size+"...");</comment>
        <comment>System.out.println("   doing density="+density+"...");</comment>
        <comment>if (true) {</comment>
        <comment>if (!((k==1 && density >= 0.1 && size >=100) || (size>5000 && (k==0 || density>1.0E-4) ))) {</comment>
        <comment>--> help gc before allocating new mem</comment>
        <comment>help gc</comment>
        <comment>skip this parameter combination (not used in practice & would take a lot of memory and time)</comment>
        <comment>System.out.println(secs);</comment>
        <comment>System.out.println(opsPerSec+" Mops/sec\n");</comment>
      </scope>
      <declaration type="String" name="sliceAxisName" />
      <declaration type="String" name="rowAxisName" />
      <declaration type="String" name="colAxisName" />
      <declaration type="String[]" name="sliceNames" />
      <declaration type="hep.aida.bin.BinFunctions1D" name="F" />
      <declaration type="hep.aida.bin.BinFunction1D[]" name="aggr" />
      <declaration type="String[]" name="rowNames" />
      <declaration type="String[]" name="colNames" />
      <declaration type="String" name="tmp" />
      <declaration type="String[]" name="tmp2" />
      <comment>int[] sizes = {33,500,1000};</comment>
      <comment>double[] densities = {0.001,0.01,0.99};</comment>
      <comment>int[] sizes = {3,5,7,9,30,45,60,61,100,200,300,500,800,1000};</comment>
      <comment>double[] densities = {0.001,0.01,0.1,0.999};</comment>
      <comment>int[] sizes = {3};</comment>
      <comment>double[] densities = {0.1};</comment>
      <comment>"density";</comment>
      <comment>String[] sliceNames = {"dense", "sparse"};</comment>
      <comment>String[] sliceNames = {"dense", "sparse", "rowCompressed"};</comment>
      <comment>{F.mean, F.median, F.sum};</comment>
      <comment>show transposed</comment>
      <comment>title = "Speedup of dense over sparse";
DoubleMatrix2D speedup = cern.colt.matrix.doublealgo.Transform.div(timings.viewSlice(0).copy(),timings.viewSlice(1));
System.out.println("\n"+new cern.colt.matrix.doublealgo.Formatter("%1.3G").toTitleString(speedup,rowNames,colNames,rowAxisName,colAxisName,title,aggr));</comment>
    </method>
    <javadoc>
      <text>* Executes procedure repeatadly until more than minSeconds have elapsed.</text>
    </javadoc>
    <method type="void" name="runSpecial" startLine="844" endLine="887">
      <declaration type="int[]" name="sizes" />
      <declaration type="double[]" name="densities" />
      <declaration type="boolean[]" name="sparses" />
      <declaration type="DoubleMatrix2D" name="timings" />
      <declaration type="cern.colt.Timer" name="runTime" />
      <scope startLine="851" endLine="874">
        <declaration type="int" name="size" />
        <declaration type="double" name="density" />
        <declaration type="boolean" name="sparse" />
        <declaration type="DoubleFactory2D" name="factory" />
        <declaration type="double" name="val" />
        <declaration type="DoubleMatrix2D" name="A" />
        <declaration type="DoubleMatrix2D" name="B" />
        <declaration type="float" name="secs" />
        <declaration type="double" name="ops" />
        <declaration type="float" name="opsPerSec" />
        <comment>--> help gc before allocating new mem</comment>
        <comment>help gc</comment>
        <comment>System.out.println(secs);</comment>
        <comment>System.out.println(opsPerSec+" Mops/sec\n");</comment>
      </scope>
      <declaration type="hep.aida.bin.BinFunctions1D" name="F" />
      <declaration type="hep.aida.bin.BinFunction1D[]" name="aggr" />
      <declaration type="String[]" name="rowNames" />
      <declaration type="String[]" name="colNames" />
      <declaration type="String" name="rowAxisName" />
      <declaration type="String" name="colAxisName" />
      <comment>{F.mean, F.median, F.sum};</comment>
    </method>
    <javadoc>
      <text>* Overall usage.</text>
    </javadoc>
    <method type="String" name="usage" startLine="891" endLine="912">
      <declaration type="String" name="usage" />
    </method>
    <javadoc>
      <text>* Usage of a specific command.</text>
    </javadoc>
    <method type="String" name="usage" startLine="916" endLine="940">
      <declaration type="String" name="usage" />
      <comment>String usage = "Illegal arguments! Arguments to be supplied:\n" +</comment>
      <comment>"\te.g. "+cmd+" dense 2 2.0 false 0.999 10 30 50 100 250 500 1000\n"+</comment>
    </method>
  </class>
</source>
