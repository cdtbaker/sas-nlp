<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix">
  <import name="cern.colt.matrix.impl.DenseObjectMatrix1D" />
  <import name="cern.colt.matrix.impl.SparseObjectMatrix1D" />
  <class name="ObjectFactory1D" extends="cern.colt.PersistentObject" startLine="13">
    <javadoc>
      <text>* Factory for convenient construction of 1-d matrices holding <tt>Object</tt> cells.
 * Use idioms like <tt>ObjectFactory1D.dense.make(1000)</tt> to construct dense matrices, 
 * <tt>ObjectFactory1D.sparse.make(1000)</tt> to construct sparse matrices.
 * If the factory is used frequently it might be useful to streamline the notation. 
 * For example by aliasing:
 * <table>
 * <td class="PRE"> 
 * <pre>
 * ObjectFactory1D F = ObjectFactory1D.dense;
 * F.make(1000);
 * ...
 * </pre>
 * </td>
 * </table></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <javadoc>
      <text>* A factory producing dense matrices.</text>
    </javadoc>
    <declaration type="ObjectFactory1D" name="dense" />
    <javadoc>
      <text>* A factory producing sparse matrices.</text>
    </javadoc>
    <declaration type="ObjectFactory1D" name="sparse" />
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="ObjectFactory1D" startLine="46" endLine="46" />
    <javadoc>
      <text>* C = A||B; Constructs a new matrix which is the concatenation of two other matrices.
 * Example: <tt>0 1</tt> append <tt>3 4</tt> --> <tt>0 1 3 4</tt>.</text>
    </javadoc>
    <method type="ObjectMatrix1D" name="append" startLine="51" endLine="57">
      <declaration type="ObjectMatrix1D" name="matrix" />
      <comment>concatenate</comment>
    </method>
    <javadoc>
      <text>* Constructs a matrix which is the concatenation of all given parts.
 * Cells are copied.</text>
    </javadoc>
    <method type="ObjectMatrix1D" name="make" startLine="62" endLine="76">
      <declaration type="int" name="size" />
      <declaration type="ObjectMatrix1D" name="vector" />
      <scope startLine="70" endLine="73" />
    </method>
    <javadoc>
      <text>* Constructs a matrix with the given cell values.
 * The values are copied. So subsequent changes in <tt>values</tt> are not reflected in the matrix, and vice-versa.</text>
      <param>values The values to be filled into the new matrix.</param>
    </javadoc>
    <method type="ObjectMatrix1D" name="make" startLine="83" endLine="86" />
    <javadoc>
      <text>* Constructs a matrix with the given shape, each cell initialized with zero.</text>
    </javadoc>
    <method type="ObjectMatrix1D" name="make" startLine="90" endLine="93" />
    <javadoc>
      <text>* Constructs a matrix with the given shape, each cell initialized with the given value.</text>
    </javadoc>
    <method type="ObjectMatrix1D" name="make" startLine="97" endLine="99" />
    <javadoc>
      <text>* Constructs a matrix from the values of the given list.
 * The values are copied. So subsequent changes in <tt>values</tt> are not reflected in the matrix, and vice-versa.</text>
      <param>values The values to be filled into the new matrix.</param>
      <return>a new matrix.</return>
    </javadoc>
    <method type="ObjectMatrix1D" name="make" startLine="107" endLine="112">
      <declaration type="int" name="size" />
      <declaration type="ObjectMatrix1D" name="vector" />
    </method>
    <javadoc>
      <text>* C = A||A||..||A; Constructs a new matrix which is concatenated <tt>repeat</tt> times.
 * Example:
 * <pre>
 * 0 1
 * repeat(3) -->
 * 0 1 0 1 0 1
 * </pre></text>
    </javadoc>
    <method type="ObjectMatrix1D" name="repeat" startLine="122" endLine="129">
      <declaration type="int" name="size" />
      <declaration type="ObjectMatrix1D" name="matrix" />
      <scope startLine="125" endLine="127" />
    </method>
    <javadoc>
      <text>* Constructs a list from the given matrix.
 * The values are copied. So subsequent changes in <tt>values</tt> are not reflected in the list, and vice-versa.</text>
      <param>values The values to be filled into the new list.</param>
      <return>a new list.</return>
    </javadoc>
    <method type="cern.colt.list.ObjectArrayList" name="toList" startLine="137" endLine="143">
      <declaration type="int" name="size" />
      <declaration type="cern.colt.list.ObjectArrayList" name="list" />
    </method>
  </class>
</source>
