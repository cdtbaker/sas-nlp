<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.matrix.objectalgo">
  <import name="cern.colt.matrix.ObjectMatrix1D" />
  <import name="cern.colt.matrix.ObjectMatrix2D" />
  <import name="cern.colt.matrix.ObjectMatrix3D" />
  <import name="cern.colt.matrix.impl.AbstractFormatter" />
  <import name="cern.colt.matrix.impl.AbstractMatrix1D" />
  <import name="cern.colt.matrix.impl.AbstractMatrix2D" />
  <import name="cern.colt.matrix.impl.Former" />
  <class name="Formatter" extends="AbstractFormatter" startLine="18">
    <javadoc>
      <text>* Flexible, well human readable matrix print formatting.
 * Each cell is converted using {@link Object#toString()}.
 * For examples see {@link cern.colt.matrix.doublealgo.Formatter doublealgo.Formatter} which is just the same except that it operates on doubles.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.1, 11/22/99</version>
    </javadoc>
    <javadoc>
      <text>* Constructs and returns a matrix formatter with alignment <tt>LEFT</tt>.</text>
    </javadoc>
    <method type="constructor" name="Formatter" startLine="30" endLine="32" />
    <javadoc>
      <text>* Constructs and returns a matrix formatter.</text>
      <param>alignment the given alignment used to align a column.</param>
    </javadoc>
    <method type="constructor" name="Formatter" startLine="37" endLine="39" />
    <javadoc>
      <text>* Converts a given cell to a String; no alignment considered.</text>
    </javadoc>
    <method type="String" name="form" startLine="43" endLine="45" />
    <javadoc>
      <text>* Converts a given cell to a String; no alignment considered.</text>
    </javadoc>
    <method type="String" name="form" startLine="49" endLine="53">
      <declaration type="Object" name="value" />
    </method>
    <javadoc>
      <text>* Returns a string representations of all cells; no alignment considered.</text>
    </javadoc>
    <method type="String[][]" name="format" startLine="57" endLine="59" />
    <javadoc>
      <text>* Returns a string representations of all cells; no alignment considered.</text>
    </javadoc>
    <method type="String[][]" name="format" startLine="63" endLine="67">
      <declaration type="String[][]" name="strings" />
    </method>
    <javadoc>
      <text>* Returns a string <tt>s</tt> such that <tt>Object[] m = s</tt> is a legal Java statement.</text>
      <param>matrix the matrix to format.</param>
    </javadoc>
    <method type="String" name="toSourceCode" startLine="72" endLine="79">
      <declaration type="Formatter" name="copy" />
      <declaration type="String" name="lead" />
      <declaration type="String" name="trail" />
    </method>
    <javadoc>
      <text>* Returns a string <tt>s</tt> such that <tt>Object[] m = s</tt> is a legal Java statement.</text>
      <param>matrix the matrix to format.</param>
    </javadoc>
    <method type="String" name="toSourceCode" startLine="84" endLine="93">
      <declaration type="Formatter" name="copy" />
      <declaration type="String" name="b3" />
      <declaration type="String" name="lead" />
      <declaration type="String" name="trail" />
    </method>
    <javadoc>
      <text>* Returns a string <tt>s</tt> such that <tt>Object[] m = s</tt> is a legal Java statement.</text>
      <param>matrix the matrix to format.</param>
    </javadoc>
    <method type="String" name="toSourceCode" startLine="98" endLine="109">
      <declaration type="Formatter" name="copy" />
      <declaration type="String" name="b3" />
      <declaration type="String" name="b6" />
      <declaration type="String" name="lead" />
      <declaration type="String" name="trail" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the given matrix.</text>
      <param>matrix the matrix to convert.</param>
    </javadoc>
    <method type="String" name="toString" startLine="114" endLine="116" />
    <javadoc>
      <text>* Returns a string representation of the given matrix.</text>
      <param>matrix the matrix to convert.</param>
    </javadoc>
    <method type="String" name="toString" startLine="121" endLine="125">
      <declaration type="ObjectMatrix2D" name="easy" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the given matrix.</text>
      <param>matrix the matrix to convert.</param>
    </javadoc>
    <method type="String" name="toString" startLine="130" endLine="132" />
    <javadoc>
      <text>* Returns a string representation of the given matrix.</text>
      <param>matrix the matrix to convert.</param>
    </javadoc>
    <method type="String" name="toString" startLine="137" endLine="148">
      <declaration type="StringBuffer" name="buf" />
      <declaration type="boolean" name="oldPrintShape" />
      <scope startLine="141" endLine="144" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the given matrix with axis as well as rows and columns labeled.
 * Pass <tt>null</tt> to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.</text>
      <param>matrix The matrix to format.</param>
      <param>rowNames The headers of all rows (to be put to the left of the matrix).</param>
      <param>columnNames The headers of all columns (to be put to above the matrix).</param>
      <param>rowAxisName The label of the y-axis.</param>
      <param>columnAxisName The label of the x-axis.</param>
      <param>title The overall title of the matrix to be formatted.</param>
      <return>the matrix converted to a string.</return>
    </javadoc>
    <method type="String" name="toTitleString" startLine="161" endLine="234">
      <declaration type="String" name="oldFormat" />
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <declaration type="int" name="r" />
      <declaration type="int" name="c" />
      <declaration type="int" name="height" />
      <declaration type="int" name="width" />
      <declaration type="cern.colt.matrix.ObjectMatrix2D" name="titleMatrix" />
      <scope startLine="190" endLine="194">
        <declaration type="String[]" name="rowAxisStrings" />
      </scope>
      <declaration type="boolean" name="oldPrintShape" />
      <declaration type="String" name="str" />
      <declaration type="StringBuffer" name="total" />
      <scope startLine="209" endLine="212">
        <declaration type="int" name="i" />
      </scope>
      <scope startLine="213" endLine="216">
        <declaration type="int" name="i" />
      </scope>
      <scope startLine="219" endLine="226">
        <declaration type="int" name="j" />
        <declaration type="String" name="s" />
      </scope>
      <comment>determine how many rows and columns are needed</comment>
      <comment>make larger matrix holding original matrix and naming strings</comment>
      <comment>insert original matrix into larger matrix</comment>
      <comment>insert column axis name in leading row</comment>
      <comment>insert row axis name in leading column</comment>
      <comment>insert row names in next leading columns</comment>
      <comment>insert vertical "---------" separator line in next leading column</comment>
      <comment>convert the large matrix to a string</comment>
      <comment>insert horizontal "--------------" separator line</comment>
      <comment>insert line for column axis name</comment>
      <comment>insert title</comment>
    </method>
    <javadoc>
      <text>* Returns a string representation of the given matrix with axis as well as rows and columns labeled.
 * Pass <tt>null</tt> to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.</text>
      <param>matrix The matrix to format.</param>
      <param>sliceNames The headers of all slices (to be put above each slice).</param>
      <param>rowNames The headers of all rows (to be put to the left of the matrix).</param>
      <param>columnNames The headers of all columns (to be put to above the matrix).</param>
      <param>sliceAxisName The label of the z-axis (to be put above each slice).</param>
      <param>rowAxisName The label of the y-axis.</param>
      <param>columnAxisName The label of the x-axis.</param>
      <param>title The overall title of the matrix to be formatted.</param>
      <return>the matrix converted to a string.</return>
    </javadoc>
    <method type="String" name="toTitleString" startLine="249" endLine="257">
      <declaration type="StringBuffer" name="buf" />
      <scope startLine="252" endLine="255" />
    </method>
  </class>
</source>
