<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt">
  <class name="Timer" extends="PersistentObject" startLine="11">
    <javadoc>
      <text>* A handy stopwatch for benchmarking.
 * Like a real stop watch used on ancient running tracks you can start the watch, stop it,
 * start it again, stop it again, display the elapsed time and reset the watch.</text>
    </javadoc>
    <declaration type="long" name="baseTime" />
    <declaration type="long" name="elapsedTime" />
    <declaration type="long" name="UNIT" />
    <javadoc>
      <text>* Constructs a new timer, initially not started. Use start() to start the timer.</text>
    </javadoc>
    <method type="constructor" name="Timer" startLine="24" endLine="26" />
    <javadoc>
      <text>* Prints the elapsed time on System.out</text>
      <return><tt>this</tt> (for convenience only).</return>
    </javadoc>
    <method type="Timer" name="display" startLine="31" endLine="34" />
    <javadoc>
      <text>* Same as <tt>seconds()</tt>.</text>
    </javadoc>
    <method type="float" name="elapsedTime" startLine="38" endLine="40" />
    <javadoc>
      <text>* Returns the elapsed time in milli seconds; does not stop the timer, if started.</text>
    </javadoc>
    <method type="long" name="millis" startLine="44" endLine="50">
      <declaration type="long" name="elapsed" />
      <scope startLine="46" endLine="48">
        <comment>we are started</comment>
      </scope>
    </method>
    <javadoc>
      <text>* <tt>T = this - other</tt>; Constructs and returns a new timer which is the difference of the receiver and the other timer.
 * The new timer is not started.</text>
      <param>other the timer to subtract.</param>
      <return>a new timer.</return>
    </javadoc>
    <method type="Timer" name="minus" startLine="57" endLine="61">
      <declaration type="Timer" name="copy" />
    </method>
    <javadoc>
      <text>* Returns the elapsed time in minutes; does not stop the timer, if started.</text>
    </javadoc>
    <method type="float" name="minutes" startLine="65" endLine="67" />
    <javadoc>
      <text>* <tt>T = this + other</tt>; Constructs and returns a new timer which is the sum of the receiver and the other timer.
 * The new timer is not started.</text>
      <param>other the timer to add.</param>
      <return>a new timer.</return>
    </javadoc>
    <method type="Timer" name="plus" startLine="74" endLine="78">
      <declaration type="Timer" name="copy" />
    </method>
    <javadoc>
      <text>* Resets the timer.</text>
      <return><tt>this</tt> (for convenience only).</return>
    </javadoc>
    <method type="Timer" name="reset" startLine="83" endLine="87" />
    <javadoc>
      <text>* Returns the elapsed time in seconds; does not stop the timer, if started.</text>
    </javadoc>
    <method type="float" name="seconds" startLine="91" endLine="93" />
    <javadoc>
      <text>* Starts the timer.</text>
      <return><tt>this</tt> (for convenience only).</return>
    </javadoc>
    <method type="Timer" name="start" startLine="98" endLine="101" />
    <javadoc>
      <text>* Stops the timer. You can start it again later, if necessary.</text>
      <return><tt>this</tt> (for convenience only).</return>
    </javadoc>
    <method type="Timer" name="stop" startLine="106" endLine="112">
      <scope startLine="107" endLine="109" />
    </method>
    <javadoc>
      <text>* Shows how to use a timer in convenient ways.</text>
    </javadoc>
    <method type="void" name="test" startLine="116" endLine="155">
      <declaration type="Timer" name="t" />
      <declaration type="int" name="j" />
      <scope startLine="120" endLine="122" />
      <scope startLine="131" endLine="133" />
      <scope startLine="140" endLine="142" />
      <scope startLine="151" endLine="153" />
      <comment>benchmark this piece</comment>
      <comment>do something we do not want to benchmark</comment>
      <comment>benchmark another piece and add to last benchmark</comment>
      <comment>benchmark yet another piece independently</comment>
      <comment>set timer to zero</comment>
    </method>
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="159" endLine="161" />
  </class>
</source>
