<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.list">
  <class name="SimpleLongArrayList" extends="AbstractLongList" startLine="11">
    <javadoc>
      <text>* Resizable list holding <code>long</code> elements; implemented with arrays; not efficient; just to demonstrate which methods you must override to implement a fully functional list.
 * First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.</text>
    </javadoc>
    <javadoc>
      <text>* The array buffer into which the elements of the list are stored.
 * The capacity of the list is the length of this array buffer.</text>
      <serial />
    </javadoc>
    <declaration type="long[]" name="elements" />
    <javadoc>
      <text>* The size of the list.</text>
      <serial />
    </javadoc>
    <declaration type="int" name="size" />
    <javadoc>
      <text>* Constructs an empty list.</text>
    </javadoc>
    <method type="constructor" name="SimpleLongArrayList" startLine="31" endLine="33" />
    <javadoc>
      <text>* Constructs a list containing the specified elements. 
 * The initial size and capacity of the list is the length of the array.
 * <b>WARNING:</b> For efficiency reasons and to keep memory usage low, <b>the array is not copied</b>.
 * So if subsequently you modify the specified array directly via the [] operator, be sure you know what you're doing.</text>
      <param>elements the array to be backed by the the constructed list</param>
    </javadoc>
    <method type="constructor" name="SimpleLongArrayList" startLine="43" endLine="45" />
    <javadoc>
      <text>* Constructs an empty list with the specified initial capacity.</text>
      <param>initialCapacity   the number of elements the receiver can hold without auto-expanding itself by allocating new internal memory.</param>
    </javadoc>
    <method type="constructor" name="SimpleLongArrayList" startLine="51" endLine="58" />
    <javadoc>
      <text>* Ensures that the receiver can hold at least the specified number of elements without needing to allocate new internal memory.
 * If necessary, allocates new internal memory and increases the capacity of the receiver.</text>
      <param>minCapacity   the desired minimum capacity.</param>
    </javadoc>
    <method type="void" name="ensureCapacity" startLine="65" endLine="67" />
    <javadoc>
      <text>* Returns the element at the specified position in the receiver; <b>WARNING:</b> Does not check preconditions. 
 * Provided with invalid parameters this method may return invalid elements without throwing any exception!
 * <b>You should only use this method when you are absolutely sure that the index is within bounds.</b>
 * Precondition (unchecked): <tt>index &gt;= 0 && index &lt; size()</tt>.</text>
      <param>index index of element to return.</param>
    </javadoc>
    <method type="long" name="getQuick" startLine="76" endLine="78" />
    <javadoc>
      <text>* Replaces the element at the specified position in the receiver with the specified element; <b>WARNING:</b> Does not check preconditions. 
 * Provided with invalid parameters this method may access invalid indexes without throwing any exception!
 * <b>You should only use this method when you are absolutely sure that the index is within bounds.</b>
 * Precondition (unchecked): <tt>index &gt;= 0 && index &lt; size()</tt>.</text>
      <param>index index of element to replace.</param>
      <param>element element to be stored at the specified position.</param>
    </javadoc>
    <method type="void" name="setQuick" startLine="88" endLine="90" />
    <javadoc>
      <text>* Trims the capacity of the receiver to be the receiver's current 
 * size. An application can use this operation to minimize the 
 * storage of the receiver.</text>
    </javadoc>
    <method type="void" name="trimToSize" startLine="96" endLine="98" />
  </class>
</source>
