<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.list.adapter">
  <import name="cern.colt.list.ObjectArrayList" />
  <class name="ObjectListAdapter" extends="java.util.AbstractList" startLine="12">
    <implements name="java.util.List" />
    <javadoc>
      <text>* Adapter that permits an {@link cern.colt.list.ObjectArrayList} to be viewed and treated as a JDK 1.2 {@link java.util.AbstractList}.
 * Makes the contained list compatible with the JDK 1.2 Collections Framework.</text>
    </javadoc>
    <declaration type="ObjectArrayList" name="content" />
    <javadoc>
      <text>* Constructs a list backed by the specified content list.</text>
    </javadoc>
    <method type="constructor" name="ObjectListAdapter" startLine="21" endLine="23" />
    <javadoc>
      <text>* Inserts the specified element at the specified position in this list
 * (optional operation).  Shifts the element currently at that position
 * (if any) and any subsequent elements to the right (adds one to their
 * indices).<p></text>
      <param>index index at which the specified element is to be inserted.</param>
      <param>element element to be inserted.</param>
      <throws>ClassCastException if the class of the specified element
 * prevents it from being added to this list.</throws>
      <throws>IllegalArgumentException if some aspect of the specified
 * element prevents it from being added to this list.</throws>
      <throws>IndexOutOfBoundsException index is out of range (<tt>index &lt;
 * 0 || index &gt; size()</tt>).</throws>
    </javadoc>
    <method type="void" name="add" startLine="40" endLine="43" />
    <javadoc>
      <text>* Returns the element at the specified position in this list.</text>
      <param>index index of element to return.</param>
      <return>the element at the specified position in this list.</return>
      <throws>IndexOutOfBoundsException if the given index is out of range
 * (<tt>index &lt; 0 || index &gt;= size()</tt>).</throws>
    </javadoc>
    <method type="Object" name="get" startLine="53" endLine="55" />
    <javadoc>
      <text>* Removes the element at the specified position in this list (optional
 * operation).  Shifts any subsequent elements to the left (subtracts one
 * from their indices).  Returns the element that was removed from the
 * list.<p></text>
      <param>index the index of the element to remove.</param>
      <return>the element previously at the specified position.</return>
      <throws>IndexOutOfBoundsException if the specified index is out of
 * range (<tt>index &lt; 0 || index &gt;= size()</tt>).</throws>
    </javadoc>
    <method type="Object" name="remove" startLine="68" endLine="73">
      <declaration type="Object" name="old" />
    </method>
    <javadoc>
      <text>* Replaces the element at the specified position in this list with the
 * specified element (optional operation). <p></text>
      <param>index index of element to replace.</param>
      <param>element element to be stored at the specified position.</param>
      <return>the element previously at the specified position.</return>
      <throws>ClassCastException if the class of the specified element
 * prevents it from being added to this list.</throws>
      <throws>IllegalArgumentException if some aspect of the specified
 * element prevents it from being added to this list.</throws>
      <throws>IndexOutOfBoundsException if the specified index is out of
 * range (<tt>index &lt; 0 || index &gt;= size()</tt>).</throws>
    </javadoc>
    <method type="Object" name="set" startLine="91" endLine="95">
      <declaration type="Object" name="old" />
    </method>
    <javadoc>
      <text>* Returns the number of elements in this list.</text>
      <return>the number of elements in this list.</return>
    </javadoc>
    <method type="int" name="size" startLine="101" endLine="103" />
  </class>
</source>
