<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.colt.list">
  <import name="cern.colt.function.BooleanProcedure" />
  <class name="AbstractBooleanList" extends="AbstractList" startLine="12">
    <javadoc>
      <text>* Abstract base class for resizable lists holding <code>boolean</code> elements; abstract.
 * First see the <a href="package-summary.html">package summary</a> and javadoc <a href="package-tree.html">tree view</a> to get the broad picture.</text>
    </javadoc>
    <javadoc>
      <text>* The size of the list.
 * This is a READ_ONLY variable for all methods but setSizeRaw(int newSize) !!!
 * If you violate this principle in subclasses, you should exactly know what you are doing.</text>
      <serial />
    </javadoc>
    <declaration type="int" name="size" />
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="AbstractBooleanList" startLine="27" endLine="27" />
    <javadoc>
      <text>* Appends the specified element to the end of this list.</text>
      <param>element element to be appended to this list.</param>
    </javadoc>
    <method type="void" name="add" startLine="33" endLine="35" />
    <javadoc>
      <text>* Appends the part of the specified list between <code>from</code> (inclusive) and <code>to</code> (inclusive) to the receiver.</text>
      <param>other the list to be added to the receiver.</param>
      <param>from the index of the first element to be appended (inclusive).</param>
      <param>to the index of the last element to be appended (inclusive).</param>
      <exception>IndexOutOfBoundsException index is out of range (<tt>other.size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=other.size())</tt>).</exception>
    </javadoc>
    <method type="void" name="addAllOfFromTo" startLine="44" endLine="46" />
    <javadoc>
      <text>* Inserts the specified element before the specified position into the receiver. 
 * Shifts the element currently at that position (if any) and
 * any subsequent elements to the right.</text>
      <param>index index before which the specified element is to be inserted (must be in [0,size]).</param>
      <param>element element to be inserted.</param>
      <exception>IndexOutOfBoundsException index is out of range (<tt>index &lt; 0 || index &gt; size()</tt>).</exception>
    </javadoc>
    <method type="void" name="beforeInsert" startLine="56" endLine="59" />
    <javadoc>
      <text>* Inserts the part of the specified list between <code>otherFrom</code> (inclusive) and <code>otherTo</code> (inclusive) before the specified position into the receiver. 
 * Shifts the element currently at that position (if any) and
 * any subsequent elements to the right.</text>
      <param>index index before which to insert first element from the specified list (must be in [0,size])..</param>
      <param>other list of which a part is to be inserted into the receiver.</param>
      <param>from the index of the first element to be inserted (inclusive).</param>
      <param>to the index of the last element to be inserted (inclusive).</param>
      <exception>IndexOutOfBoundsException index is out of range (<tt>other.size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=other.size())</tt>).</exception>
      <exception>IndexOutOfBoundsException index is out of range (<tt>index &lt; 0 || index &gt; size()</tt>).</exception>
    </javadoc>
    <method type="void" name="beforeInsertAllOfFromTo" startLine="72" endLine="76">
      <declaration type="int" name="length" />
    </method>
    <javadoc>
      <text>* Inserts <tt>length</tt> dummy elements before the specified position into the receiver. 
 * Shifts the element currently at that position (if any) and
 * any subsequent elements to the right.
 * <b>This method must set the new size to be <tt>size()+length</tt>.</text>
      <param>index index before which to insert dummy elements (must be in [0,size])..</param>
      <param>length number of dummy elements to be inserted.</param>
      <throws>IndexOutOfBoundsException if <tt>index &lt; 0 || index &gt; size()</tt>.</throws>
    </javadoc>
    <method type="void" name="beforeInsertDummies" startLine="87" endLine="95">
      <scope startLine="90" endLine="94" />
    </method>
    <javadoc>
      <text>* Searches the receiver for the specified value using
 * the binary search algorithm.  The receiver must <strong>must</strong> be
 * sorted (as by the sort method) prior to making this call.  If
 * it is not sorted, the results are undefined: in particular, the call
 * may enter an infinite loop.  If the receiver contains multiple elements
 * equal to the specified object, there is no guarantee which instance
 * will be found.</text>
      <param>key the value to be searched for.</param>
      <return>index of the search key, if it is contained in the receiver;
 * otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The <i>insertion
 * point</i> is defined as the the point at which the value would
 * be inserted into the receiver: the index of the first
 * element greater than the key, or <tt>receiver.size()</tt>, if all
 * elements in the receiver are less than the specified key.  Note
 * that this guarantees that the return value will be &gt;= 0 if
 * and only if the key is found.</return>
      <see>java.util.Arrays</see>
    </javadoc>
    <method type="int" name="binarySearch" startLine="116" endLine="118" />
    <javadoc>
      <text>* Searches the receiver for the specified value using
 * the binary search algorithm.  The receiver must <strong>must</strong> be
 * sorted (as by the sort method) prior to making this call.  If
 * it is not sorted, the results are undefined: in particular, the call
 * may enter an infinite loop.  If the receiver contains multiple elements
 * equal to the specified object, there is no guarantee which instance
 * will be found.</text>
      <param>key the value to be searched for.</param>
      <param>from the leftmost search position, inclusive.</param>
      <param>to the rightmost search position, inclusive.</param>
      <return>index of the search key, if it is contained in the receiver;
 * otherwise, <tt>(-(<i>insertion point</i>) - 1)</tt>.  The <i>insertion
 * point</i> is defined as the the point at which the value would
 * be inserted into the receiver: the index of the first
 * element greater than the key, or <tt>receiver.size()</tt>, if all
 * elements in the receiver are less than the specified key.  Note
 * that this guarantees that the return value will be &gt;= 0 if
 * and only if the key is found.</return>
      <see>java.util.Arrays</see>
    </javadoc>
    <method type="int" name="binarySearchFromTo" startLine="141" endLine="154">
      <declaration type="int" name="low" />
      <declaration type="int" name="high" />
      <declaration type="int" name="intKey" />
      <scope startLine="145" endLine="152">
        <declaration type="int" name="mid" />
        <declaration type="boolean" name="midVal" />
        <comment>key found</comment>
      </scope>
      <comment>key not found.</comment>
    </method>
    <javadoc>
      <text>* Returns a deep copy of the receiver.</text>
      <return>a deep copy of the receiver.</return>
    </javadoc>
    <method type="Object" name="clone" startLine="160" endLine="162" />
    <javadoc>
      <text>* Returns true if the receiver contains the specified element.</text>
      <param>element element whose presence in the receiver is to be tested.</param>
    </javadoc>
    <method type="boolean" name="contains" startLine="168" endLine="170" />
    <javadoc>
      <text>* Deletes the first element from the receiver that is identical to the specified element.
 * Does nothing, if no such matching element is contained.</text>
      <param>element the element to be deleted.</param>
    </javadoc>
    <method type="void" name="delete" startLine="177" endLine="180">
      <declaration type="int" name="index" />
    </method>
    <javadoc>
      <text>* Returns the elements currently stored, possibly including invalid elements between size and capacity.
 * <b>WARNING:</b> For efficiency reasons and to keep memory usage low, this method may decide <b>not to copy the array</b>.
 * So if subsequently you modify the returned array directly via the [] operator, be sure you know what you're doing.</text>
      <return>the elements currently stored.</return>
    </javadoc>
    <method type="boolean[]" name="elements" startLine="189" endLine="193">
      <declaration type="boolean[]" name="myElements" />
    </method>
    <javadoc>
      <text>* Sets the receiver's elements to be the specified array.
 * The size and capacity of the list is the length of the array.
 * <b>WARNING:</b> For efficiency reasons and to keep memory usage low, this method may decide <b>not to copy the array</b>.
 * So if subsequently you modify the returned array directly via the [] operator, be sure you know what you're doing.</text>
      <param>elements the new elements to be stored.</param>
      <return>the receiver itself.</return>
    </javadoc>
    <method type="AbstractBooleanList" name="elements" startLine="203" endLine="207" />
    <method name="ensureCapacity" type="void" startLine="208" endLine="214" />
    <javadoc>
      <text>* Ensures that the receiver can hold at least the specified number of elements without needing to allocate new internal memory.
 * If necessary, allocates new internal memory and increases the capacity of the receiver.</text>
      <param>minCapacity   the desired minimum capacity.</param>
    </javadoc>
    <javadoc>
      <text>* Compares the specified Object with the receiver.  
 * Returns true if and only if the specified Object is also an ArrayList of the same type, both Lists have the
 * same size, and all corresponding pairs of elements in the two Lists are identical.
 * In other words, two Lists are defined to be equal if they contain the
 * same elements in the same order.</text>
      <param>otherObj the Object to be compared for equality with the receiver.</param>
      <return>true if the specified Object is equal to the receiver.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="225" endLine="236">
      <scope startLine="226" endLine="226" />
      <declaration type="AbstractBooleanList" name="other" />
      <scope startLine="232" endLine="234" />
      <comment>delta</comment>
    </method>
    <javadoc>
      <text>* Sets the specified range of elements in the specified array to the specified value.</text>
      <param>from the index of the first element (inclusive) to be filled with the specified value.</param>
      <param>to the index of the last element (inclusive) to be filled with the specified value.</param>
      <param>val the value to be stored in the specified elements of the receiver.</param>
    </javadoc>
    <method type="void" name="fillFromToWith" startLine="244" endLine="247" />
    <javadoc>
      <text>* Applies a procedure to each element of the receiver, if any.
 * Starts at index 0, moving rightwards.</text>
      <param>procedure    the procedure to be applied. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.</param>
      <return><tt>false</tt> if the procedure stopped before all elements where iterated over, <tt>true</tt> otherwise.</return>
    </javadoc>
    <method type="boolean" name="forEach" startLine="254" endLine="257" />
    <javadoc>
      <text>* Returns the element at the specified position in the receiver.</text>
      <param>index index of element to return.</param>
      <exception>IndexOutOfBoundsException index is out of range (index
 * &lt; 0 || index &gt;= size()).</exception>
    </javadoc>
    <method type="boolean" name="get" startLine="265" endLine="269" />
    <method name="getQuick" type="boolean" startLine="270" endLine="281" />
    <javadoc>
      <text>* Returns the element at the specified position in the receiver; <b>WARNING:</b> Does not check preconditions. 
 * Provided with invalid parameters this method may return invalid elements without throwing any exception!
 * <b>You should only use this method when you are absolutely sure that the index is within bounds.</b>
 * Precondition (unchecked): <tt>index &gt;= 0 && index &lt; size()</tt>.
 * This method is normally only used internally in large loops where bounds are explicitly checked before the loop and need no be rechecked within the loop.
 * However, when desperately, you can give this method <tt>public</tt> visibility in subclasses.</text>
      <param>index index of element to return.</param>
    </javadoc>
    <javadoc>
      <text>* Returns the index of the first occurrence of the specified
 * element. Returns <code>-1</code> if the receiver does not contain this element.</text>
      <param>element   the element to be searched for.</param>
      <return>the index of the first occurrence of the element in the receiver; returns <code>-1</code> if the element is not found.</return>
    </javadoc>
    <method type="int" name="indexOf" startLine="289" endLine="291">
      <comment>delta</comment>
    </method>
    <javadoc>
      <text>* Returns the index of the first occurrence of the specified
 * element. Returns <code>-1</code> if the receiver does not contain this element.
 * Searches between <code>from</code>, inclusive and <code>to</code>, inclusive.
 * Tests for identity.</text>
      <param>element element to search for.</param>
      <param>from the leftmost search position, inclusive.</param>
      <param>to the rightmost search position, inclusive.</param>
      <return>the index of the first occurrence of the element in the receiver; returns <code>-1</code> if the element is not found.</return>
      <exception>IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).</exception>
    </javadoc>
    <method type="int" name="indexOfFromTo" startLine="304" endLine="311">
      <scope startLine="307" endLine="309">
        <comment>found</comment>
      </scope>
      <comment>not found</comment>
    </method>
    <javadoc>
      <text>* Returns the index of the last occurrence of the specified
 * element. Returns <code>-1</code> if the receiver does not contain this element.</text>
      <param>element   the element to be searched for.</param>
      <return>the index of the last occurrence of the element in the receiver; returns <code>-1</code> if the element is not found.</return>
    </javadoc>
    <method type="int" name="lastIndexOf" startLine="319" endLine="321" />
    <javadoc>
      <text>* Returns the index of the last occurrence of the specified
 * element. Returns <code>-1</code> if the receiver does not contain this element.
 * Searches beginning at <code>to</code>, inclusive until <code>from</code>, inclusive.
 * Tests for identity.</text>
      <param>element element to search for.</param>
      <param>from the leftmost search position, inclusive.</param>
      <param>to the rightmost search position, inclusive.</param>
      <return>the index of the last occurrence of the element in the receiver; returns <code>-1</code> if the element is not found.</return>
      <exception>IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).</exception>
    </javadoc>
    <method type="int" name="lastIndexOfFromTo" startLine="334" endLine="341">
      <scope startLine="337" endLine="339">
        <comment>found</comment>
      </scope>
      <comment>not found</comment>
    </method>
    <javadoc>
      <text>* Returns a new list of the part of the receiver between <code>from</code>, inclusive, and <code>to</code>, inclusive.</text>
      <param>from the index of the first element (inclusive).</param>
      <param>to the index of the last element (inclusive).</param>
      <return>a new list</return>
      <exception>IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).</exception>
    </javadoc>
    <method type="AbstractBooleanList" name="partFromTo" startLine="349" endLine="356">
      <declaration type="int" name="length" />
      <declaration type="BooleanArrayList" name="part" />
    </method>
    <javadoc>
      <text>* Removes from the receiver all elements that are contained in the specified list.
 * Tests for identity.</text>
      <param>other the other list.</param>
      <return><code>true</code> if the receiver changed as a result of the call.</return>
    </javadoc>
    <method type="boolean" name="removeAll" startLine="364" endLine="376">
      <declaration type="int" name="limit" />
      <declaration type="int" name="j" />
      <scope startLine="369" endLine="371" />
      <declaration type="boolean" name="modified" />
      <comment>nothing to do</comment>
    </method>
    <javadoc>
      <text>* Removes from the receiver all elements whose index is between
 * <code>from</code>, inclusive and <code>to</code>, inclusive.  Shifts any succeeding
 * elements to the left (reduces their index).
 * This call booleanens the list by <tt>(to - from + 1)</tt> elements.</text>
      <param>from index of first element to be removed.</param>
      <param>to index of last element to be removed.</param>
      <exception>IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).</exception>
    </javadoc>
    <method type="void" name="removeFromTo" startLine="387" endLine="396">
      <declaration type="int" name="numMoved" />
      <scope startLine="390" endLine="393">
        <comment>fillFromToWith(from+numMoved, size-1, 0.0f); delta</comment>
      </scope>
      <declaration type="int" name="width" />
    </method>
    <javadoc>
      <text>* Replaces a number of elements in the receiver with the same number of elements of another list.
 * Replaces elements in the receiver, between <code>from</code> (inclusive) and <code>to</code> (inclusive),
 * with elements of <code>other</code>, starting from <code>otherFrom</code> (inclusive).</text>
      <param>from the position of the first element to be replaced in the receiver</param>
      <param>to the position of the last element to be replaced in the receiver</param>
      <param>other list holding elements to be copied into the receiver.</param>
      <param>otherFrom position of first element within other list to be copied.</param>
    </javadoc>
    <method type="void" name="replaceFromToWithFrom" startLine="407" endLine="424">
      <declaration type="int" name="length" />
      <scope startLine="409" endLine="423">
        <scope startLine="414" endLine="416" />
        <scope startLine="417" endLine="420">
          <declaration type="int" name="otherTo" />
        </scope>
        <comment>unambiguous copy (it may hold other==this)</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Replaces the part between <code>from</code> (inclusive) and <code>to</code> (inclusive) with the other list's
 * part between <code>otherFrom</code> and <code>otherTo</code>. 
 * Powerful (and tricky) method!
 * Both parts need not be of the same size (part A can both be smaller or larger than part B).
 * Parts may overlap.
 * Receiver and other list may (but most not) be identical.
 * If <code>from &gt; to</code>, then inserts other part before <code>from</code>.</text>
      <param>from the first element of the receiver (inclusive)</param>
      <param>to the last element of the receiver (inclusive)</param>
      <param>other the other list (may be identical with receiver)</param>
      <param>otherFrom the first element of the other list (inclusive)</param>
      <param>otherTo the last element of the other list (inclusive)
 * <p><b>Examples:</b><pre>
 * a=[0, 1, 2, 3, 4, 5, 6, 7]
 * b=[50, 60, 70, 80, 90]
 * a.R(...)=a.replaceFromToWithFromTo(...)
 * a.R(3,5,b,0,4)-->[0, 1, 2, 50, 60, 70, 80, 90, 6, 7]
 * a.R(1,6,b,0,4)-->[0, 50, 60, 70, 80, 90, 7]
 * a.R(0,6,b,0,4)-->[50, 60, 70, 80, 90, 7]
 * a.R(3,5,b,1,2)-->[0, 1, 2, 60, 70, 6, 7]
 * a.R(1,6,b,1,2)-->[0, 60, 70, 7]
 * a.R(0,6,b,1,2)-->[60, 70, 7]
 * a.R(5,3,b,0,4)-->[0, 1, 2, 3, 4, 50, 60, 70, 80, 90, 5, 6, 7]
 * a.R(5,0,b,0,4)-->[0, 1, 2, 3, 4, 50, 60, 70, 80, 90, 5, 6, 7]
 * a.R(5,3,b,1,2)-->[0, 1, 2, 3, 4, 60, 70, 5, 6, 7]
 * a.R(5,0,b,1,2)-->[0, 1, 2, 3, 4, 60, 70, 5, 6, 7]
 * Extreme cases:
 * a.R(5,3,b,0,0)-->[0, 1, 2, 3, 4, 50, 5, 6, 7]
 * a.R(5,3,b,4,4)-->[0, 1, 2, 3, 4, 90, 5, 6, 7]
 * a.R(3,5,a,0,1)-->[0, 1, 2, 0, 1, 6, 7]
 * a.R(3,5,a,3,5)-->[0, 1, 2, 3, 4, 5, 6, 7]
 * a.R(3,5,a,4,4)-->[0, 1, 2, 4, 6, 7]
 * a.R(5,3,a,0,4)-->[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 6, 7]
 * a.R(0,-1,b,0,4)-->[50, 60, 70, 80, 90, 0, 1, 2, 3, 4, 5, 6, 7]
 * a.R(0,-1,a,0,4)-->[0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 6, 7]
 * a.R(8,0,a,0,4)-->[0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4]
 * </pre></param>
    </javadoc>
    <method type="void" name="replaceFromToWithFromTo" startLine="468" endLine="499">
      <scope startLine="469" endLine="471" />
      <scope startLine="473" endLine="476">
        <comment>avoid stumbling over my own feet</comment>
      </scope>
      <declaration type="int" name="length" />
      <declaration type="int" name="diff" />
      <declaration type="int" name="theLast" />
      <scope startLine="482" endLine="485" />
      <scope startLine="487" endLine="489" />
      <scope startLine="490" endLine="494">
        <scope startLine="491" endLine="493" />
      </scope>
      <scope startLine="496" endLine="498" />
    </method>
    <javadoc>
      <text>* Replaces the part of the receiver starting at <code>from</code> (inclusive) with all the elements of the specified collection.
 * Does not alter the size of the receiver.
 * Replaces exactly <tt>Math.max(0,Math.min(size()-from, other.size()))</tt> elements.</text>
      <param>from the index at which to copy the first element from the specified collection.</param>
      <param>other Collection to replace part of the receiver</param>
      <exception>IndexOutOfBoundsException index is out of range (index &lt; 0 || index &gt;= size()).</exception>
    </javadoc>
    <method type="void" name="replaceFromWith" startLine="509" endLine="516">
      <declaration type="java.util.Iterator" name="e" />
      <declaration type="int" name="index" />
      <declaration type="int" name="limit" />
      <comment>delta</comment>
    </method>
    <javadoc>
      <text>* Retains (keeps) only the elements in the receiver that are contained in the specified other list.
 * In other words, removes from the receiver all of its elements that are not contained in the
 * specified other list.</text>
      <param>other the other list to test against.</param>
      <return><code>true</code> if the receiver changed as a result of the call.</return>
    </javadoc>
    <method type="boolean" name="retainAll" startLine="524" endLine="540">
      <scope startLine="525" endLine="529" />
      <declaration type="int" name="limit" />
      <declaration type="int" name="j" />
      <scope startLine="533" endLine="535" />
      <declaration type="boolean" name="modified" />
    </method>
    <javadoc>
      <text>* Reverses the elements of the receiver.
 * Last becomes first, second last becomes second first, and so on.</text>
    </javadoc>
    <method type="void" name="reverse" startLine="545" endLine="555">
      <declaration type="boolean" name="tmp" />
      <declaration type="int" name="limit" />
      <declaration type="int" name="j" />
      <scope startLine="550" endLine="554">
        <comment>swap</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Replaces the element at the specified position in the receiver with the specified element.</text>
      <param>index index of element to replace.</param>
      <param>element element to be stored at the specified position.</param>
      <throws>IndexOutOfBoundsException if <tt>index &lt; 0 || index &gt;= size()</tt>.</throws>
    </javadoc>
    <method type="void" name="set" startLine="563" endLine="567" />
    <method name="setQuick" type="void" startLine="568" endLine="580" />
    <javadoc>
      <text>* Replaces the element at the specified position in the receiver with the specified element; <b>WARNING:</b> Does not check preconditions.
 * Provided with invalid parameters this method may access invalid indexes without throwing any exception!
 * <b>You should only use this method when you are absolutely sure that the index is within bounds.</b>
 * Precondition (unchecked): <tt>index &gt;= 0 && index &lt; size()</tt>.
 * This method is normally only used internally in large loops where bounds are explicitly checked before the loop and need no be rechecked within the loop.
 * However, when desperately, you can give this method <tt>public</tt> visibility in subclasses.</text>
      <param>index index of element to replace.</param>
      <param>element element to be stored at the specified position.</param>
    </javadoc>
    <javadoc>
      <text>* Sets the size of the receiver without modifying it otherwise.
 * This method should not release or allocate new memory but simply set some instance variable like <tt>size</tt>.
 * If your subclass overrides and delegates size changing methods to some other object,
 * you must make sure that those overriding methods not only update the size of the delegate but also of this class.
 * For example:
 * public DatabaseList extends AbstractBooleanList {
 * ...
 * public void removeFromTo(int from,int to) {
 * myDatabase.removeFromTo(from,to);
 * this.setSizeRaw(size-(to-from+1));
 * }
 * }</text>
    </javadoc>
    <method type="void" name="setSizeRaw" startLine="596" endLine="598" />
    <javadoc>
      <text>* Randomly permutes the part of the receiver between <code>from</code> (inclusive) and <code>to</code> (inclusive).</text>
      <param>from the index of the first element (inclusive) to be permuted.</param>
      <param>to the index of the last element (inclusive) to be permuted.</param>
      <exception>IndexOutOfBoundsException index is out of range (<tt>size()&gt;0 && (from&lt;0 || from&gt;to || to&gt;=size())</tt>).</exception>
    </javadoc>
    <method type="void" name="shuffleFromTo" startLine="605" endLine="617">
      <declaration type="cern.jet.random.Uniform" name="gen" />
      <scope startLine="609" endLine="616">
        <declaration type="int" name="random" />
        <declaration type="boolean" name="tmpElement" />
        <comment>swap(i, random)</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the number of elements contained in the receiver.</text>
      <returns>the number of elements contained in the receiver.</returns>
    </javadoc>
    <method type="int" name="size" startLine="623" endLine="625" />
    <javadoc>
      <text>* Returns a list which is a concatenation of <code>times</code> times the receiver.</text>
      <param>times the number of times the receiver shall be copied.</param>
    </javadoc>
    <method type="AbstractBooleanList" name="times" startLine="630" endLine="636">
      <declaration type="AbstractBooleanList" name="newList" />
      <scope startLine="632" endLine="634" />
    </method>
    <javadoc>
      <text>* Transforms a boolean value to an integer (false --> 0, true --> 1)</text>
    </javadoc>
    <method type="int" name="toInt" startLine="640" endLine="642" />
    <javadoc>
      <text>* Returns a <code>java.util.ArrayList</code> containing all the elements in the receiver.</text>
    </javadoc>
    <method type="java.util.ArrayList" name="toList" startLine="646" endLine="651">
      <declaration type="int" name="mySize" />
      <declaration type="java.util.ArrayList" name="list" />
    </method>
    <javadoc>
      <text>* Returns a string representation of the receiver, containing
 * the String representation of each element.</text>
    </javadoc>
    <method type="String" name="toString" startLine="656" endLine="658" />
  </class>
</source>
