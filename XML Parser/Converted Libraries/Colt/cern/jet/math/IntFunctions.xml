<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.math">
  <import name="cern.colt.function.IntFunction" />
  <import name="cern.colt.function.IntIntFunction" />
  <import name="cern.colt.function.IntIntProcedure" />
  <import name="cern.colt.function.IntProcedure" />
  <class name="IntFunctions" extends="Object" startLine="15">
    <javadoc>
      <text>* Integer Function objects to be passed to generic methods.
 * Same as {@link Functions} except operating on integers.
 * <p>
 * For aliasing see {@link #intFunctions}.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <javadoc>
      <text>* Little trick to allow for "aliasing", that is, renaming this class.
 * Writing code like
 * <p>
 * <tt>IntFunctions.chain(IntFunctions.plus,IntFunctions.mult(3),IntFunctions.chain(IntFunctions.square,IntFunctions.div(2)));</tt>
 * <p>
 * is a bit awkward, to say the least.
 * Using the aliasing you can instead write
 * <p>
 * <tt>IntFunctions F = IntFunctions.intFunctions; <br>
 * F.chain(F.plus,F.mult(3),F.chain(F.square,F.div(2)));</tt>
 * <p></text>
    </javadoc>
    <declaration type="IntFunctions" name="intFunctions" />
    <javadoc>
      <text>* Function that returns <tt>Math.abs(a) == (a < 0) ? -a : a</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="47" endLine="47" />
    <declaration type="IntFunction" name="abs" />
    <javadoc>
      <text>* Function that returns <tt>a--</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="54" endLine="54" />
    <declaration type="IntFunction" name="dec" />
    <javadoc>
      <text>* Function that returns <tt>(int) Arithmetic.factorial(a)</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="61" endLine="61" />
    <declaration type="IntFunction" name="factorial" />
    <javadoc>
      <text>* Function that returns its argument.</text>
    </javadoc>
    <method type="int" name="apply" startLine="68" endLine="68" />
    <declaration type="IntFunction" name="identity" />
    <javadoc>
      <text>* Function that returns <tt>a++</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="75" endLine="75" />
    <declaration type="IntFunction" name="inc" />
    <javadoc>
      <text>* Function that returns <tt>-a</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="82" endLine="82" />
    <declaration type="IntFunction" name="neg" />
    <javadoc>
      <text>* Function that returns <tt>~a</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="89" endLine="89" />
    <declaration type="IntFunction" name="not" />
    <javadoc>
      <text>* Function that returns <tt>a < 0 ? -1 : a > 0 ? 1 : 0</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="96" endLine="96" />
    <declaration type="IntFunction" name="sign" />
    <javadoc>
      <text>* Function that returns <tt>a * a</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="103" endLine="103" />
    <declaration type="IntFunction" name="square" />
    <javadoc>
      <text>* Function that returns <tt>a & b</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="119" endLine="119" />
    <declaration type="IntIntFunction" name="and" />
    <javadoc>
      <text>* Function that returns <tt>a < b ? -1 : a > b ? 1 : 0</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="126" endLine="126" />
    <declaration type="IntIntFunction" name="compare" />
    <javadoc>
      <text>* Function that returns <tt>a / b</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="133" endLine="133" />
    <declaration type="IntIntFunction" name="div" />
    <javadoc>
      <text>* Function that returns <tt>a == b ? 1 : 0</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="140" endLine="140" />
    <declaration type="IntIntFunction" name="equals" />
    <javadoc>
      <text>* Function that returns <tt>a == b</tt>.</text>
    </javadoc>
    <method type="boolean" name="apply" startLine="147" endLine="147" />
    <declaration type="IntIntProcedure" name="isEqual" />
    <javadoc>
      <text>* Function that returns <tt>a < b</tt>.</text>
    </javadoc>
    <method type="boolean" name="apply" startLine="154" endLine="154" />
    <declaration type="IntIntProcedure" name="isLess" />
    <javadoc>
      <text>* Function that returns <tt>a > b</tt>.</text>
    </javadoc>
    <method type="boolean" name="apply" startLine="161" endLine="161" />
    <declaration type="IntIntProcedure" name="isGreater" />
    <javadoc>
      <text>* Function that returns <tt>Math.max(a,b)</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="168" endLine="168" />
    <declaration type="IntIntFunction" name="max" />
    <javadoc>
      <text>* Function that returns <tt>Math.min(a,b)</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="175" endLine="175" />
    <declaration type="IntIntFunction" name="min" />
    <javadoc>
      <text>* Function that returns <tt>a - b</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="182" endLine="182" />
    <declaration type="IntIntFunction" name="minus" />
    <javadoc>
      <text>* Function that returns <tt>a % b</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="189" endLine="189" />
    <declaration type="IntIntFunction" name="mod" />
    <javadoc>
      <text>* Function that returns <tt>a * b</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="196" endLine="196" />
    <declaration type="IntIntFunction" name="mult" />
    <javadoc>
      <text>* Function that returns <tt>a | b</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="203" endLine="203" />
    <declaration type="IntIntFunction" name="or" />
    <javadoc>
      <text>* Function that returns <tt>a + b</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="210" endLine="210" />
    <declaration type="IntIntFunction" name="plus" />
    <javadoc>
      <text>* Function that returns <tt>(int) Math.pow(a,b)</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="217" endLine="217" />
    <declaration type="IntIntFunction" name="pow" />
    <javadoc>
      <text>* Function that returns <tt>a << b</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="224" endLine="224" />
    <declaration type="IntIntFunction" name="shiftLeft" />
    <javadoc>
      <text>* Function that returns <tt>a >> b</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="232" endLine="232" />
    <declaration type="IntIntFunction" name="shiftRightSigned" />
    <javadoc>
      <text>* Function that returns <tt>a >>> b</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="239" endLine="239" />
    <declaration type="IntIntFunction" name="shiftRightUnsigned" />
    <javadoc>
      <text>* Function that returns <tt>a ^ b</tt>.</text>
    </javadoc>
    <method type="int" name="apply" startLine="246" endLine="246" />
    <declaration type="IntIntFunction" name="xor" />
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="IntFunctions" startLine="252" endLine="252" />
    <javadoc>
      <text>* Constructs a function that returns <tt>a & b</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntFunction" name="and" startLine="257" endLine="261">
      <method type="int" name="apply" startLine="259" endLine="259" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>(from<=a && a<=to) ? 1 : 0</tt>.
 * <tt>a</tt> is a variable, <tt>from</tt> and <tt>to</tt> are fixed.</text>
    </javadoc>
    <method type="IntFunction" name="between" startLine="266" endLine="270">
      <method type="int" name="apply" startLine="268" endLine="268" />
    </method>
    <javadoc>
      <text>* Constructs a unary function from a binary function with the first operand (argument) fixed to the given constant <tt>c</tt>.
 * The second operand is variable (free).</text>
      <param>function a binary function taking operands in the form <tt>function.apply(c,var)</tt>.</param>
      <return>the unary function <tt>function(c,var)</tt>.</return>
    </javadoc>
    <method type="IntFunction" name="bindArg1" startLine="278" endLine="282">
      <method type="int" name="apply" startLine="280" endLine="280" />
    </method>
    <javadoc>
      <text>* Constructs a unary function from a binary function with the second operand (argument) fixed to the given constant <tt>c</tt>.
 * The first operand is variable (free).</text>
      <param>function a binary function taking operands in the form <tt>function.apply(var,c)</tt>.</param>
      <return>the unary function <tt>function(var,c)</tt>.</return>
    </javadoc>
    <method type="IntFunction" name="bindArg2" startLine="290" endLine="294">
      <method type="int" name="apply" startLine="292" endLine="292" />
    </method>
    <javadoc>
      <text>* Constructs the function <tt>g( h(a) )</tt>.</text>
      <param>g a unary function.</param>
      <param>h a unary function.</param>
      <return>the unary function <tt>g( h(a) )</tt>.</return>
    </javadoc>
    <method type="IntFunction" name="chain" startLine="302" endLine="306">
      <method type="int" name="apply" startLine="304" endLine="304" />
    </method>
    <javadoc>
      <text>* Constructs the function <tt>g( h(a,b) )</tt>.</text>
      <param>g a unary function.</param>
      <param>h a binary function.</param>
      <return>the unary function <tt>g( h(a,b) )</tt>.</return>
    </javadoc>
    <method type="IntIntFunction" name="chain" startLine="314" endLine="318">
      <method type="int" name="apply" startLine="316" endLine="316" />
    </method>
    <javadoc>
      <text>* Constructs the function <tt>f( g(a), h(b) )</tt>.</text>
      <param>f a binary function.</param>
      <param>g a unary function.</param>
      <param>h a unary function.</param>
      <return>the binary function <tt>f( g(a), h(b) )</tt>.</return>
    </javadoc>
    <method type="IntIntFunction" name="chain" startLine="327" endLine="331">
      <method type="int" name="apply" startLine="329" endLine="329" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>a < b ? -1 : a > b ? 1 : 0</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntFunction" name="compare" startLine="336" endLine="340">
      <method type="int" name="apply" startLine="338" endLine="338" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns the constant <tt>c</tt>.</text>
    </javadoc>
    <method type="IntFunction" name="constant" startLine="344" endLine="348">
      <method type="int" name="apply" startLine="346" endLine="346" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>a / b</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntFunction" name="div" startLine="353" endLine="357">
      <method type="int" name="apply" startLine="355" endLine="355" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>a == b ? 1 : 0</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntFunction" name="equals" startLine="362" endLine="366">
      <method type="int" name="apply" startLine="364" endLine="364" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>from<=a && a<=to</tt>.
 * <tt>a</tt> is a variable, <tt>from</tt> and <tt>to</tt> are fixed.</text>
    </javadoc>
    <method type="IntProcedure" name="isBetween" startLine="371" endLine="375">
      <method type="boolean" name="apply" startLine="373" endLine="373" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>a == b</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntProcedure" name="isEqual" startLine="380" endLine="384">
      <method type="boolean" name="apply" startLine="382" endLine="382" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>a > b</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntProcedure" name="isGreater" startLine="389" endLine="393">
      <method type="boolean" name="apply" startLine="391" endLine="391" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>a < b</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntProcedure" name="isLess" startLine="398" endLine="402">
      <method type="boolean" name="apply" startLine="400" endLine="400" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>Math.max(a,b)</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntFunction" name="max" startLine="407" endLine="411">
      <method type="int" name="apply" startLine="409" endLine="409" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>Math.min(a,b)</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntFunction" name="min" startLine="416" endLine="420">
      <method type="int" name="apply" startLine="418" endLine="418" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>a - b</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntFunction" name="minus" startLine="425" endLine="429">
      <method type="int" name="apply" startLine="427" endLine="427" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>a % b</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntFunction" name="mod" startLine="434" endLine="438">
      <method type="int" name="apply" startLine="436" endLine="436" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>a * b</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntFunction" name="mult" startLine="443" endLine="447">
      <method type="int" name="apply" startLine="445" endLine="445" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>a | b</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntFunction" name="or" startLine="452" endLine="456">
      <method type="int" name="apply" startLine="454" endLine="454" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>a + b</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntFunction" name="plus" startLine="461" endLine="465">
      <method type="int" name="apply" startLine="463" endLine="463" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>(int) Math.pow(a,b)</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntFunction" name="pow" startLine="470" endLine="474">
      <method type="int" name="apply" startLine="472" endLine="472" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns a 32 bit uniformly distributed random number in the closed interval <tt>[Integer.MIN_VALUE,Integer.MAX_VALUE]</tt> (including <tt>Integer.MIN_VALUE</tt> and <tt>Integer.MAX_VALUE</tt>).
 * Currently the engine is {@link cern.jet.random.engine.MersenneTwister}and is seeded with the current time.
 * <p>
 * Note that any random engine derived from {@link cern.jet.random.engine.RandomEngine} and any random distribution derived from {@link cern.jet.random.AbstractDistribution} are function objects, because they implement the proper interfaces.
 * Thus, if you are not happy with the default, just pass your favourite random generator to function evaluating methods.</text>
    </javadoc>
    <method type="IntFunction" name="random" startLine="483" endLine="485" />
    <javadoc>
      <text>* Constructs a function that returns <tt>a << b</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntFunction" name="shiftLeft" startLine="490" endLine="494">
      <method type="int" name="apply" startLine="492" endLine="492" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>a >> b</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntFunction" name="shiftRightSigned" startLine="499" endLine="503">
      <method type="int" name="apply" startLine="501" endLine="501" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>a >>> b</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntFunction" name="shiftRightUnsigned" startLine="508" endLine="512">
      <method type="int" name="apply" startLine="510" endLine="510" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>function.apply(b,a)</tt>, i.e. applies the function with the first operand as second operand and the second operand as first operand.</text>
      <param>function a function taking operands in the form <tt>function.apply(a,b)</tt>.</param>
      <return>the binary function <tt>function(b,a)</tt>.</return>
    </javadoc>
    <method type="IntIntFunction" name="swapArgs" startLine="519" endLine="523">
      <method type="int" name="apply" startLine="521" endLine="521" />
    </method>
    <javadoc>
      <text>* Constructs a function that returns <tt>a | b</tt>.
 * <tt>a</tt> is a variable, <tt>b</tt> is fixed.</text>
    </javadoc>
    <method type="IntFunction" name="xor" startLine="528" endLine="532">
      <method type="int" name="apply" startLine="530" endLine="530" />
    </method>
    <javadoc>
      <text>* <H3>Unary functions</H3></text>
    </javadoc>
    <javadoc>
      <text>* <H3>Binary functions</H3></text>
    </javadoc>
  </class>
</source>
