<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random">
  <import name="cern.jet.random.engine.RandomEngine" />
  <class name="Uniform" extends="AbstractContinousDistribution" startLine="12">
    <javadoc>
      <text>* Uniform distribution; <A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node292.html#SECTION0002920000000000000000"> Math definition</A>
 * and <A HREF="http://www.statsoft.com/textbook/glosu.html#Uniform Distribution"> animated definition</A>.
 * <p>
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * <dt>
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * <p></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="double" name="min" />
    <declaration type="double" name="max" />
    <declaration type="Uniform" name="shared" />
    <javadoc>
      <text>* Constructs a uniform distribution with the given minimum and maximum, using a {@link cern.jet.random.engine.MersenneTwister} seeded with the given seed.</text>
    </javadoc>
    <method type="constructor" name="Uniform" startLine="32" endLine="34" />
    <javadoc>
      <text>* Constructs a uniform distribution with the given minimum and maximum.</text>
    </javadoc>
    <method type="constructor" name="Uniform" startLine="38" endLine="41" />
    <javadoc>
      <text>* Constructs a uniform distribution with <tt>min=0.0</tt> and <tt>max=1.0</tt>.</text>
    </javadoc>
    <method type="constructor" name="Uniform" startLine="45" endLine="47" />
    <javadoc>
      <text>* Returns the cumulative distribution function (assuming a continous uniform distribution).</text>
    </javadoc>
    <method type="double" name="cdf" startLine="51" endLine="55" />
    <javadoc>
      <text>* Returns a uniformly distributed random <tt>boolean</tt>.</text>
    </javadoc>
    <method type="boolean" name="nextBoolean" startLine="59" endLine="61" />
    <javadoc>
      <text>* Returns a uniformly distributed random number in the open interval <tt>(min,max)</tt> (excluding <tt>min</tt> and <tt>max</tt>).</text>
    </javadoc>
    <method type="double" name="nextDouble" startLine="65" endLine="67" />
    <javadoc>
      <text>* Returns a uniformly distributed random number in the open interval <tt>(from,to)</tt> (excluding <tt>from</tt> and <tt>to</tt>).
 * Pre conditions: <tt>from &lt;= to</tt>.</text>
    </javadoc>
    <method type="double" name="nextDoubleFromTo" startLine="72" endLine="74" />
    <javadoc>
      <text>* Returns a uniformly distributed random number in the open interval <tt>(from,to)</tt> (excluding <tt>from</tt> and <tt>to</tt>).
 * Pre conditions: <tt>from &lt;= to</tt>.</text>
    </javadoc>
    <method type="float" name="nextFloatFromTo" startLine="79" endLine="81" />
    <javadoc>
      <text>* Returns a uniformly distributed random number in the closed interval <tt>[min,max]</tt> (including <tt>min</tt> and <tt>max</tt>).</text>
    </javadoc>
    <method type="int" name="nextInt" startLine="85" endLine="87" />
    <javadoc>
      <text>* Returns a uniformly distributed random number in the closed interval <tt>[from,to]</tt> (including <tt>from</tt> and <tt>to</tt>).
 * Pre conditions: <tt>from &lt;= to</tt>.</text>
    </javadoc>
    <method type="int" name="nextIntFromTo" startLine="92" endLine="94" />
    <javadoc>
      <text>* Returns a uniformly distributed random number in the closed interval <tt>[from,to]</tt> (including <tt>from</tt> and <tt>to</tt>).
 * Pre conditions: <tt>from &lt;= to</tt>.</text>
    </javadoc>
    <method type="long" name="nextLongFromTo" startLine="99" endLine="139">
      <scope startLine="110" endLine="112" />
      <declaration type="double" name="diff" />
      <scope startLine="117" endLine="119" />
      <declaration type="long" name="random" />
      <scope startLine="124" endLine="133">
        <scope startLine="125" endLine="130">
          <declaration type="int" name="i1" />
          <declaration type="int" name="i2" />
        </scope>
        <comment>return Math.round(nextDoubleFromTo(from,to));</comment>
      </scope>
      <scope startLine="134" endLine="137" />
      <comment>Doing the thing turns out to be more tricky than expected.
avoids overflows and underflows.
treats cases like from=-1, to=1 and the like right.
the following code would NOT solve the problem: return (long) (Doubles.randomFromTo(from,to));

rounding avoids the unsymmetric behaviour of casts from double to long: (long) -0.7 = 0, (long) 0.7 = 0.
checking for overflows and underflows is also necessary.</comment>
      <comment>first the most likely and also the fastest case.</comment>
      <comment>would we get a numeric overflow?</comment>
      <comment>if not, we can still handle the case rather efficient.</comment>
      <comment>now the pathologic boundary cases.</comment>
      <comment>they are handled rather slow.</comment>
    </method>
    <javadoc>
      <text>* Returns the probability distribution function (assuming a continous uniform distribution).</text>
    </javadoc>
    <method type="double" name="pdf" startLine="143" endLine="146" />
    <javadoc>
      <text>* Sets the internal state.</text>
    </javadoc>
    <method type="void" name="setState" startLine="150" endLine="154">
      <scope startLine="151" endLine="151" />
    </method>
    <javadoc>
      <text>* Returns a uniformly distributed random <tt>boolean</tt>.</text>
    </javadoc>
    <method type="boolean" name="staticNextBoolean" startLine="158" endLine="162">
      <scope startLine="159" endLine="161" />
    </method>
    <javadoc>
      <text>* Returns a uniformly distributed random number in the open interval <tt>(0,1)</tt> (excluding <tt>0</tt> and <tt>1</tt>).</text>
    </javadoc>
    <method type="double" name="staticNextDouble" startLine="166" endLine="170">
      <scope startLine="167" endLine="169" />
    </method>
    <javadoc>
      <text>* Returns a uniformly distributed random number in the open interval <tt>(from,to)</tt> (excluding <tt>from</tt> and <tt>to</tt>).
 * Pre conditions: <tt>from &lt;= to</tt>.</text>
    </javadoc>
    <method type="double" name="staticNextDoubleFromTo" startLine="175" endLine="179">
      <scope startLine="176" endLine="178" />
    </method>
    <javadoc>
      <text>* Returns a uniformly distributed random number in the open interval <tt>(from,to)</tt> (excluding <tt>from</tt> and <tt>to</tt>).
 * Pre conditions: <tt>from &lt;= to</tt>.</text>
    </javadoc>
    <method type="float" name="staticNextFloatFromTo" startLine="184" endLine="188">
      <scope startLine="185" endLine="187" />
    </method>
    <javadoc>
      <text>* Returns a uniformly distributed random number in the closed interval <tt>[from,to]</tt> (including <tt>from</tt> and <tt>to</tt>).
 * Pre conditions: <tt>from &lt;= to</tt>.</text>
    </javadoc>
    <method type="int" name="staticNextIntFromTo" startLine="193" endLine="197">
      <scope startLine="194" endLine="196" />
    </method>
    <javadoc>
      <text>* Returns a uniformly distributed random number in the closed interval <tt>[from,to]</tt> (including <tt>from</tt> and <tt>to</tt>).
 * Pre conditions: <tt>from &lt;= to</tt>.</text>
    </javadoc>
    <method type="long" name="staticNextLongFromTo" startLine="202" endLine="206">
      <scope startLine="203" endLine="205" />
    </method>
    <javadoc>
      <text>* Sets the uniform random number generation engine shared by all <b>static</b> methods.</text>
      <param>randomGenerator the new uniform random number generation engine to be shared.</param>
    </javadoc>
    <method type="void" name="staticSetRandomEngine" startLine="211" endLine="215">
      <scope startLine="212" endLine="214" />
    </method>
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="219" endLine="221" />
    <comment>The uniform random number generated shared by all <b>static</b> methods.</comment>
  </class>
</source>
