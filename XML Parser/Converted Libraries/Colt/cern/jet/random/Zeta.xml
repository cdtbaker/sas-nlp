<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random">
  <import name="cern.jet.random.engine.RandomEngine" />
  <class name="Zeta" extends="AbstractDiscreteDistribution" startLine="12">
    <javadoc>
      <text>* Zeta distribution.
 * <p>
 * Valid parameter ranges: <tt>ro &gt; 0</tt> and <tt>pk &gt;= 0</tt>.
 * <dt>
 * If either <tt>ro &gt; 100</tt>  or  <tt>k &gt; 10000</tt> numerical problems in
 * computing the theoretical moments arise, therefore <tt>ro &lt;= 100</tt> and 
 * <tt>k &lt;= 10000</tt> are recommended.                                      
 * <p>
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * <dt>
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * <p>
 * <b>Implementation:</b> 
 * <dt>Method: Acceptance/Rejection.
 * High performance implementation.
 * <dt>This is a port and adaption of <tt>Zeta.c</tt> from the <A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html">C-RAND / WIN-RAND</A> library.
 * C-RAND's implementation, in turn, is based upon
 * <p>
 * J. Dagpunar (1988): Principles of Random Variate  Generation, Clarendon Press, Oxford.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="double" name="ro" />
    <declaration type="double" name="pk" />
    <declaration type="double" name="c" />
    <declaration type="double" name="maxlongint" />
    <declaration type="Zeta" name="shared" />
    <javadoc>
      <text>* Constructs a Zeta distribution.</text>
    </javadoc>
    <method type="constructor" name="Zeta" startLine="49" endLine="52" />
    <javadoc>
      <text>* Returns a zeta distributed random number.</text>
    </javadoc>
    <method type="long" name="generateZeta" startLine="56" endLine="122">
      <declaration type="double" name="u" />
      <declaration type="long" name="k" />
      <scope startLine="98" endLine="109">
        <scope startLine="101" endLine="104" />
        <scope startLine="105" endLine="108" />
        <comment>Set-up</comment>
      </scope>
      <scope startLine="110" endLine="119">
        <scope startLine="111" endLine="115" />
      </scope>
      <javadoc>
        <text>* *
 * Zeta Distribution - Acceptance Rejection            
 * *
 * *
 * To sample from the Zeta distribution with parameters ro and pk 
 * it suffices to sample variates x from the distribution with    
 * density function  f(x)=B*{[x+0.5]+pk}^(-(1+ro)) ( x > .5 )     
 * and then deliver k=[x+0.5].                                    
 * 1/B=Sum[(j+pk)^-(ro+1)]  (j=1,2,...) converges for ro >= .5 .  
 * It is not necessary to compute B, because variates x are       
 * generated by acceptance rejection using density function       
 * g(x)=ro*(c+0.5)^ro*(c+x)^-(ro+1).                              
 * *                                                                
 * Integer overflow is possible, when ro is small (ro <= .5) and  
 * pk large. In this case a new sample is generated. If ro and pk 
 * satisfy the inequality   ro > .14 + pk*1.85e-8 + .02*ln(pk)    
 * the percentage of overflow is less than 1%, so that the        
 * result is reliable.                                            
 * NOTE: The comment above is likely to be nomore valid since     
 * the C-version operated on 32-bit integers, while this Java     
 * version operates on 64-bit integers. However, the following is 
 * still valid:                                                   *                                                                
 * *                                                                
 * If either ro > 100  or  k > 10000 numerical problems in        
 * computing the theoretical moments arise, therefore ro<=100 and 
 * k<=10000 are recommended.                                      
 * *
 * *
 * FUNCTION:    - zeta  samples a random number from the          
 * Zeta distribution with parameters  ro > 0  and  
 * pk >= 0.                                        
 * REFERENCE:   - J. Dagpunar (1988): Principles of Random        
 * Variate  Generation, Clarendon Press, Oxford.   
 * *</text>
      </javadoc>
    </method>
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="int" name="nextInt" startLine="126" endLine="128" />
    <javadoc>
      <text>* Sets the parameters.</text>
    </javadoc>
    <method type="void" name="setState" startLine="132" endLine="135" />
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="int" name="staticNextInt" startLine="139" endLine="144">
      <scope startLine="140" endLine="143" />
    </method>
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="148" endLine="150" />
    <javadoc>
      <text>* Sets the uniform random number generated shared by all <b>static</b> methods.</text>
      <param>randomGenerator the new uniform random number generator to be shared.</param>
    </javadoc>
    <method type="void" name="xstaticSetRandomGenerator" startLine="155" endLine="159">
      <scope startLine="156" endLine="158" />
    </method>
    <comment>cached values (for performance)</comment>
    <comment>The uniform random number generated shared by all <b>static</b> methods.</comment>
  </class>
</source>
