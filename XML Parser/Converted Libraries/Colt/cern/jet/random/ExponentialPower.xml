<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random">
  <import name="cern.jet.random.engine.RandomEngine" />
  <class name="ExponentialPower" extends="AbstractContinousDistribution" startLine="12">
    <javadoc>
      <text>* Exponential Power distribution.
 * <p>
 * Valid parameter ranges: <tt>tau &gt;= 1</tt>.
 * <p>
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * <dt>
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * <p>
 * <b>Implementation:</b>
 * <dt>Method: Non-universal rejection method for logconcave densities.
 * <dt>This is a port of <tt>epd.c</tt> from the <A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html">C-RAND / WIN-RAND</A> library.
 * C-RAND's implementation, in turn, is based upon
 * <p>
 * L. Devroye (1986): Non-Uniform Random Variate Generation , Springer Verlag, New York.
 * <p></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="double" name="tau" />
    <declaration type="double" name="s" />
    <declaration type="ExponentialPower" name="shared" />
    <javadoc>
      <text>* Constructs an Exponential Power distribution.
 * Example: tau=1.0.</text>
      <throws>IllegalArgumentException if <tt>tau &lt; 1.0</tt>.</throws>
    </javadoc>
    <method type="constructor" name="ExponentialPower" startLine="45" endLine="48" />
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="double" name="nextDouble" startLine="52" endLine="54" />
    <javadoc>
      <text>* Returns a random number from the distribution; bypasses the internal state.</text>
      <throws>IllegalArgumentException if <tt>tau &lt; 1.0</tt>.</throws>
    </javadoc>
    <method type="double" name="nextDouble" startLine="59" endLine="94">
      <declaration type="double" name="u" />
      <scope startLine="62" endLine="67">
        <comment>SET-UP</comment>
      </scope>
      <scope startLine="70" endLine="84">
        <scope startLine="76" endLine="78" />
        <scope startLine="79" endLine="83" />
        <comment>U(0/1)</comment>
        <comment>U(-1.0/1.0)</comment>
        <comment>u1=|u|</comment>
        <comment>U(0/1)</comment>
        <comment>Uniform hat-function for x <= (1-1/tau)</comment>
        <comment>Exponential hat-function for x > (1-1/tau)</comment>
        <comment>U(0/1)</comment>
      </scope>
      <comment>GENERATOR</comment>
      <comment>Acceptance/Rejection</comment>
      <comment>Random sign</comment>
    </method>
    <javadoc>
      <text>* Sets the distribution parameter.</text>
      <throws>IllegalArgumentException if <tt>tau &lt; 1.0</tt>.</throws>
    </javadoc>
    <method type="void" name="setState" startLine="99" endLine="102" />
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
      <throws>IllegalArgumentException if <tt>tau &lt; 1.0</tt>.</throws>
    </javadoc>
    <method type="double" name="staticNextDouble" startLine="107" endLine="111">
      <scope startLine="108" endLine="110" />
    </method>
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="115" endLine="117" />
    <javadoc>
      <text>* Sets the uniform random number generated shared by all <b>static</b> methods.</text>
      <param>randomGenerator the new uniform random number generator to be shared.</param>
    </javadoc>
    <method type="void" name="xstaticSetRandomGenerator" startLine="122" endLine="126">
      <scope startLine="123" endLine="125" />
    </method>
    <comment>cached vars for method nextDouble(tau) (for performance only)</comment>
    <comment>The uniform random number generated shared by all <b>static</b> methods.</comment>
  </class>
</source>
