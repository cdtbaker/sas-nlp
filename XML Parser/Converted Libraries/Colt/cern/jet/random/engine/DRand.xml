<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random.engine">
  <import name="java.util.Date" />
  <class name="DRand" extends="RandomEngine" startLine="12">
    <javadoc>
      <text>* Quick medium quality uniform pseudo-random number generator.
 * Produces uniformly distributed <tt>int</tt>'s and <tt>long</tt>'s in the closed intervals <tt>[Integer.MIN_VALUE,Integer.MAX_VALUE]</tt> and <tt>[Long.MIN_VALUE,Long.MAX_VALUE]</tt>, respectively, 
 * as well as <tt>float</tt>'s and <tt>double</tt>'s in the open unit intervals <tt>(0.0f,1.0f)</tt> and <tt>(0.0,1.0)</tt>, respectively.
 * <p>
 * The seed can be any integer satisfying <tt>0 &lt; 4*seed+1 &lt; 2<sup>32</sup></tt>.
 * In other words, there must hold <tt>seed &gt;= 0 && seed &lt; 1073741823</tt>.
 * <p>
 * <b>Quality:</b> This generator follows the multiplicative congruential method of the form                    
 * <dt>
 * <tt>z(i+1) = a * z(i) (mod m)</tt> with
 * <tt>a=663608941 (=0X278DDE6DL), m=2<sup>32</sup></tt>.
 * <dt>
 * <tt>z(i)</tt> assumes all different values <tt>0 &lt; 4*seed+1 &lt; m</tt> during a full period of 2<sup>30</sup>.
 * <p>
 * <b>Performance:</b> TO_DO
 * <p>
 * <b>Implementation:</b> TO_DO
 * <p>
 * Note that this implementation is <b>not synchronized</b>.                                  
 * <p></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
      <see>MersenneTwister</see>
      <see>java.util.Random</see>
    </javadoc>
    <declaration type="int" name="current" />
    <declaration type="int" name="DEFAULT_SEED" />
    <javadoc>
      <text>* Constructs and returns a random number generator with a default seed, which is a <b>constant</b>.</text>
    </javadoc>
    <method type="constructor" name="DRand" startLine="47" endLine="49" />
    <javadoc>
      <text>* Constructs and returns a random number generator with the given seed.</text>
      <param>seed should not be 0, in such a case <tt>DRand.DEFAULT_SEED</tt> is substituted.</param>
    </javadoc>
    <method type="constructor" name="DRand" startLine="54" endLine="56" />
    <javadoc>
      <text>* Constructs and returns a random number generator seeded with the given date.</text>
      <param>d typically <tt>new java.util.Date()</tt></param>
    </javadoc>
    <method type="constructor" name="DRand" startLine="62" endLine="64" />
    <javadoc>
      <text>* Returns a 32 bit uniformly distributed random number in the closed interval <tt>[Integer.MIN_VALUE,Integer.MAX_VALUE]</tt> (including <tt>Integer.MIN_VALUE</tt> and <tt>Integer.MAX_VALUE</tt>).</text>
    </javadoc>
    <method type="int" name="nextInt" startLine="68" endLine="73">
      <comment>current = 0x278DDE6D;      z(i+1)=az(i) (mod 232)</comment>
      <comment>a == 0x278DDE6D == 663608941</comment>
    </method>
    <javadoc>
      <text>* Sets the receiver's seed. 
 * This method resets the receiver's entire internal state.
 * The following condition must hold: <tt>seed &gt;= 0 && seed &lt; (2<sup>32</sup>-1) / 4</tt>.</text>
      <param>seed if the above condition does not hold, a modified seed that meets the condition is silently substituted.</param>
    </javadoc>
    <method type="void" name="setSeed" startLine="80" endLine="86">
      <declaration type="int" name="limit" />
      <comment>--> 536870911</comment>
    </method>
  </class>
</source>
