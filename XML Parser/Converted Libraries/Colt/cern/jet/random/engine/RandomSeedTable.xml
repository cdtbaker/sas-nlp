<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random.engine">
  <class name="RandomSeedTable" startLine="11">
    <javadoc>
      <text>* (Seemingly gigantic) table of good seeds for pseudo-random number generators.
 * <p>
 * <b>Implementation:</b>
 * <dt>This is a port of <tt>SeedTable.h</tt> used in <A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep">CLHEP 1.4.0</A> (C++).
 * CLHEP's implementation, in turn, is part of <A HREF="http://wwwinfo.cern.ch/asd/geant/geant4.html">GEANT 4</A>, a C++ simulation toolkit for High Energy Physics.
 * Geant4, in turn,  took the table from the original FORTRAN77 implementation of the HEP CERN Library routine RECUSQ.
 * Each sequence has a period of 10**9 numbers.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <javadoc>
      <text>* The number of columns of the matrix (currently COLUMNS = 2).</text>
    </javadoc>
    <declaration type="int" name="COLUMNS" />
    <declaration type="int[]" name="seeds" />
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="RandomSeedTable" startLine="250" endLine="252" />
    <javadoc>
      <text>* Returns a deterministic seed from a (seemingly gigantic) matrix of predefined seeds.</text>
      <param>row should (but need not) be in [0,Integer.MAX_VALUE].</param>
      <param>column shoould (but need not) be in [0,SeedTable.COLUMNS-1].</param>
      <return>the seed at the indicated matrix position.</return>
    </javadoc>
    <method type="int" name="getSeedAtRowColumn" startLine="259" endLine="275">
      <declaration type="int" name="rows" />
      <declaration type="int" name="theRow" />
      <declaration type="int" name="theColumn" />
      <declaration type="int" name="seed" />
      <declaration type="int" name="cycle" />
      <declaration type="int" name="mask" />
      <comment>the table is limited; let's snap the unbounded input parameters to the table's actual size.</comment>
      <comment>"randomize" the seed (in some ways comparable to hash functions)</comment>
      <comment>cycle==0 --> mask = 0</comment>
      <comment>cycle==0 --> seed stays unaffected</comment>
      <comment>now, each sequence has a period of 10**9 numbers.</comment>
    </method>
    <javadoc>
      <text>* Not yet commented.</text>
      <return>int</return>
    </javadoc>
    <method type="int" name="rows" startLine="280" endLine="282" />
    <comment>a m*n matrix, just stored as one-dim array</comment>
    <comment>215 * 2 entries</comment>
  </class>
</source>
