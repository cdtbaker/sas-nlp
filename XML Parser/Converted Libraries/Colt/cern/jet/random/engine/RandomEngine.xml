<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random.engine">
  <class name="RandomEngine" extends="cern.colt.PersistentObject" startLine="11">
    <implements name="cern.colt.function.DoubleFunction" />
    <implements name="cern.colt.function.IntFunction" />
    <javadoc>
      <text>* Abstract base class for uniform pseudo-random number generating engines.
 * <p>
 * Most probability distributions are obtained by using a <b>uniform</b> pseudo-random number generation engine 
 * followed by a transformation to the desired distribution.
 * Thus, subclasses of this class are at the core of computational statistics, simulations, Monte Carlo methods, etc.
 * <p>
 * Subclasses produce uniformly distributed <tt>int</tt>'s and <tt>long</tt>'s in the closed intervals <tt>[Integer.MIN_VALUE,Integer.MAX_VALUE]</tt> and <tt>[Long.MIN_VALUE,Long.MAX_VALUE]</tt>, respectively, 
 * as well as <tt>float</tt>'s and <tt>double</tt>'s in the open unit intervals <tt>(0.0f,1.0f)</tt> and <tt>(0.0,1.0)</tt>, respectively.
 * <p>
 * Subclasses need to override one single method only: <tt>nextInt()</tt>.
 * All other methods generating different data types or ranges are usually layered upon <tt>nextInt()</tt>.
 * <tt>long</tt>'s are formed by concatenating two 32 bit <tt>int</tt>'s.
 * <tt>float</tt>'s are formed by dividing the interval <tt>[0.0f,1.0f]</tt> into 2<sup>32</sup> sub intervals, then randomly choosing one subinterval.
 * <tt>double</tt>'s are formed by dividing the interval <tt>[0.0,1.0]</tt> into 2<sup>64</sup> sub intervals, then randomly choosing one subinterval.
 * <p>
 * Note that this implementation is <b>not synchronized</b>.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
      <see>MersenneTwister</see>
      <see>MersenneTwister64</see>
      <see>java.util.Random</see>
    </javadoc>
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="RandomEngine" startLine="40" endLine="40" />
    <javadoc>
      <text>* Equivalent to <tt>raw()</tt>.
 * This has the effect that random engines can now be used as function objects, returning a random number upon function evaluation.</text>
    </javadoc>
    <method type="double" name="apply" startLine="45" endLine="47" />
    <javadoc>
      <text>* Equivalent to <tt>nextInt()</tt>.
 * This has the effect that random engines can now be used as function objects, returning a random number upon function evaluation.</text>
    </javadoc>
    <method type="int" name="apply" startLine="52" endLine="54" />
    <javadoc>
      <text>* Constructs and returns a new uniform random number engine seeded with the current time.
 * Currently this is {@link cern.jet.random.engine.MersenneTwister}.</text>
    </javadoc>
    <method type="RandomEngine" name="makeDefault" startLine="59" endLine="61" />
    <javadoc>
      <text>* Returns a 64 bit uniformly distributed random number in the open unit interval <code>(0.0,1.0)</code> (excluding 0.0 and 1.0).</text>
    </javadoc>
    <method type="double" name="nextDouble" startLine="65" endLine="93">
      <declaration type="double" name="nextDouble" />
      <scope startLine="68" endLine="72">
        <comment>-9.223372036854776E18 == (double) Long.MIN_VALUE</comment>
        <comment>5.421010862427522E-20 == 1 / Math.pow(2,64) == 1 / ((double) Long.MAX_VALUE - (double) Long.MIN_VALUE);</comment>
      </scope>
      <comment>catch loss of precision of long --> double conversion</comment>
      <comment>--> in (0.0,1.0)</comment>
      <comment>nextLong == Long.MAX_VALUE         --> 1.0
nextLong == Long.MIN_VALUE         --> 0.0
nextLong == Long.MAX_VALUE-1       --> 1.0
nextLong == Long.MAX_VALUE-100000L --> 0.9999999999999946
nextLong == Long.MIN_VALUE+1       --> 0.0
nextLong == Long.MIN_VALUE-100000L --> 0.9999999999999946
nextLong == 1L                     --> 0.5
nextLong == -1L                    --> 0.5
nextLong == 2L                     --> 0.5
nextLong == -2L                    --> 0.5
nextLong == 2L+100000L             --> 0.5000000000000054
nextLong == -2L-100000L            --> 0.49999999999999456</comment>
    </method>
    <javadoc>
      <text>* Returns a 32 bit uniformly distributed random number in the open unit interval <code>(0.0f,1.0f)</code> (excluding 0.0f and 1.0f).</text>
    </javadoc>
    <method type="float" name="nextFloat" startLine="97" endLine="105">
      <declaration type="float" name="nextFloat" />
      <scope startLine="100" endLine="100" />
      <comment>catch loss of precision of double --> float conversion</comment>
      <comment>--> in (0.0f,1.0f)</comment>
    </method>
    <method name="nextInt" type="int" startLine="106" endLine="109" />
    <javadoc>
      <text>* Returns a 32 bit uniformly distributed random number in the closed interval <tt>[Integer.MIN_VALUE,Integer.MAX_VALUE]</tt> (including <tt>Integer.MIN_VALUE</tt> and <tt>Integer.MAX_VALUE</tt>);</text>
    </javadoc>
    <javadoc>
      <text>* Returns a 64 bit uniformly distributed random number in the closed interval <tt>[Long.MIN_VALUE,Long.MAX_VALUE]</tt> (including <tt>Long.MIN_VALUE</tt> and <tt>Long.MAX_VALUE</tt>).</text>
    </javadoc>
    <method type="long" name="nextLong" startLine="113" endLine="117">
      <comment>concatenate two 32-bit strings into one 64-bit string</comment>
    </method>
    <javadoc>
      <text>* Returns a 32 bit uniformly distributed random number in the open unit interval <code>(0.0,1.0)</code> (excluding 0.0 and 1.0).</text>
    </javadoc>
    <method type="double" name="raw" startLine="121" endLine="141">
      <declaration type="int" name="nextInt" />
      <scope startLine="123" endLine="125">
        <comment>accept anything but zero</comment>
        <comment>in [Integer.MIN_VALUE,Integer.MAX_VALUE]-interval</comment>
      </scope>
      <comment>transform to (0.0,1.0)-interval</comment>
      <comment>2.3283064365386963E-10 == 1.0 / Math.pow(2,32)</comment>
      <comment>nextInt == Integer.MAX_VALUE   --> 0.49999999976716936
nextInt == Integer.MIN_VALUE   --> 0.5
nextInt == Integer.MAX_VALUE-1 --> 0.4999999995343387
nextInt == Integer.MIN_VALUE+1 --> 0.5000000002328306
nextInt == 1                   --> 2.3283064365386963E-10
nextInt == -1                  --> 0.9999999997671694
nextInt == 2                   --> 4.6566128730773926E-10
nextInt == -2                  --> 0.9999999995343387</comment>
    </method>
    <comment>public abstract class RandomEngine extends edu.cornell.lassp.houle.RngPack.RandomSeedable implements cern.colt.function.DoubleFunction, cern.colt.function.IntFunction {</comment>
  </class>
</source>
