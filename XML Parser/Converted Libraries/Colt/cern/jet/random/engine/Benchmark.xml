<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random.engine">
  <class name="Benchmark" startLine="11">
    <javadoc>
      <text>* Benchmarks the performance of the currently provided uniform pseudo-random number generation engines.
 * <p>
 * All distributions are obtained by using a <b>uniform</b> pseudo-random number generation engine.
 * followed by a transformation to the desired distribution.
 * Therefore, the performance of the uniform engines is crucial.
 * <p>
 * <h2 align=center>Comparison of uniform generation engines</h2>
 * <center>
 * <table border>
 * <tr> 
 * <td align="center" width="40%">Name</td>
 * <td align="center" width="20%">Period</td>
 * <td align="center" width="40%">
 * <p>Speed<br>
 * [# million uniform random numbers generated/sec]<br>
 * Pentium Pro 200 Mhz, JDK 1.2, NT</p>
 * </td>
 * </tr>
 * <tr> 
 * <td align="center" width="40%"> <tt>MersenneTwister</tt></td>
 * <td align="center" width="20%">2<sup>19937</sup>-1 (=10<sup>6001</sup>)</td>
 * <td align="center" width="40">2.5</td>
 * </tr>
 * <tr> 
 * <td align="center" width="40%"> <tt>Ranlux</tt> (default luxury level 3) </td>
 * <td align="center" width="20%">10<sup>171</sup></td>
 * <td align="center" width="40">0.4</td>
 * </tr>
 * <tr> 
 * <td align="center" width="40"> <tt>Ranmar</tt></td>
 * <td align="center" width="20">10<sup>43</sup></td>
 * <td align="center" width="40%">1.6</td>
 * </tr>
 * <tr> 
 * <td align="center" width="40%"> <tt>Ranecu</tt> </td>
 * <td align="center" width="20">10<sup>18</sup></td>
 * <td align="center" width="40%">1.5</td>
 * </tr>
 * <tr> 
 * <td align="center"> <tt>java.util.Random.nextFloat() </tt><tt> 
 * </tt></td>
 * <td align="center"><font size=+3>?</font></td>
 * <td align="center">2.4</td>
 * </tr>
 * </table>
 * </center>
 * <p>
 * <b>Note:</b> Methods working on the default uniform random generator are <b>synchronized</b> and therefore in current VM's <b>slow</b> (as of June '99).
 * Methods taking as argument a uniform random generator are <b>not synchronized</b> and therefore much <b>quicker</b>.
 * Thus, if you need a lot of random numbers, you should use the unsynchronized approach:
 * <p>
 * <b>Example usage:</b><pre>
 * edu.cornell.lassp.houle.RngPack.RandomElement generator;
 * generator = new cern.jet.random.engine.MersenneTwister(new java.util.Date());
 * //generator = new edu.cornell.lassp.houle.RngPack.Ranecu(new java.util.Date());
 * //generator = new edu.cornell.lassp.houle.RngPack.Ranmar(new java.util.Date());
 * //generator = new edu.cornell.lassp.houle.RngPack.Ranlux(new java.util.Date());
 * //generator = makeDefaultGenerator();
 * for (int i=1000000; --i >=0; ) {
 * double uniform = generator.raw();
 * ...
 * }
 * </pre></text>
      <see>cern.jet.random</see>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="Benchmark" startLine="85" endLine="87" />
    <javadoc>
      <text>* Benchmarks <tt>raw()</tt> for various uniform generation engines.</text>
    </javadoc>
    <method type="void" name="benchmark" startLine="91" endLine="166">
      <declaration type="cern.colt.Timer" name="timer" />
      <declaration type="RandomEngine" name="gen" />
      <declaration type="float" name="emptyLoop" />
      <declaration type="java.util.Random" name="javaGen" />
      <comment>no operation</comment>
      <comment>gen = new edu.stanford.mt.MersenneTwister();
System.out.println("\n edu.stanford.mt.MersenneTwister:");
timer.reset().start();
for (int i=times; --i>=0; ) gen.raw();
timer.stop().display();
System.out.println(times(timer.elapsedTime()-emptyLoop)+ " numbers per second.");</comment>
      <comment>nextDouble() is slower</comment>
      <comment>gen = new edu.cornell.lassp.houle.RngPack.Ranecu();
System.out.println("\nRanecu:");
timer.reset().start();
for (int i=times; --i>=0; ) gen.raw();
timer.stop().display();
System.out.println(times(timer.elapsedTime()-emptyLoop)+ " numbers per second.");

gen = new edu.cornell.lassp.houle.RngPack.Ranmar();
System.out.println("\nRanmar:");
timer.reset().start();
for (int i=times; --i>=0; ) gen.raw();
timer.stop().display();
System.out.println(times(timer.elapsedTime()-emptyLoop)+ " numbers per second.");

gen = new edu.cornell.lassp.houle.RngPack.Ranlux();
System.out.println("\nRanlux:");
timer.reset().start();
for (int i=times; --i>=0; ) gen.raw();
timer.stop().display();
System.out.println(times(timer.elapsedTime()-emptyLoop)+ " numbers per second.");</comment>
    </method>
    <javadoc>
      <text>* Tests various methods of this class.</text>
    </javadoc>
    <method type="void" name="main" startLine="170" endLine="182">
      <declaration type="long" name="from" />
      <declaration type="long" name="to" />
      <declaration type="int" name="times" />
      <declaration type="int" name="runs" />
      <scope startLine="178" endLine="181">
        <comment>benchmarkSync(times);</comment>
      </scope>
      <comment>testRandomFromTo(from,to,times);</comment>
      <comment>benchmark(1000000);</comment>
      <comment>benchmark(1000000);</comment>
    </method>
    <javadoc>
      <text>* Prints the first <tt>size</tt> random numbers generated by the given engine.</text>
    </javadoc>
    <method type="void" name="test" startLine="186" endLine="221">
      <declaration type="RandomEngine" name="random" />
      <scope startLine="214" endLine="217" />
      <comment>System.out.println("raw():");
random = (RandomEngine) randomEngine.clone();
cern.colt.Timer timer = new cern.colt.Timer().start();
for (int j=0, i=size; --i>=0; j++) {
System.out.print(" "+random.raw());
if (j%8==7) System.out.println();
}

System.out.println("\n\nfloat():");
random = (RandomEngine) randomEngine.clone();
for (int j=0, i=size; --i>=0; j++) {
System.out.print(" "+random.nextFloat());
if (j%8==7) System.out.println();
}

System.out.println("\n\ndouble():");
random = (RandomEngine) randomEngine.clone();
for (int j=0, i=size; --i>=0; j++) {
System.out.print(" "+random.nextDouble());
if (j%8==7) System.out.println();
}</comment>
      <comment>timer.stop().display();</comment>
    </method>
    <javadoc>
      <text>* Tests various methods of this class.</text>
    </javadoc>
    <method type="void" name="xtestRandomFromTo" startLine="225" endLine="248">
      <declaration type="java.util.Random" name="randomJava" />
      <declaration type="RandomEngine" name="random" />
      <declaration type="int" name="_from" />
      <declaration type="cern.colt.Timer" name="timer" />
      <scope startLine="237" endLine="243">
        <comment>randomJava.nextInt(10000);</comment>
        <comment>Integers.randomFromTo(_from,_to);</comment>
        <comment>multiset.add(nextIntFromTo(_from,_to));</comment>
      </scope>
      <comment>cern.colt.set.OpenMultiFloatHashSet multiset = new cern.colt.set.OpenMultiFloatHashSet();</comment>
      <comment>edu.cornell.lassp.houle.RngPack.RandomElement random = new edu.cornell.lassp.houle.RngPack.Ranecu();</comment>
      <comment>edu.cornell.lassp.houle.RngPack.RandomElement random = new edu.cornell.lassp.houle.RngPack.MT19937B();</comment>
      <comment>edu.cornell.lassp.houle.RngPack.RandomElement random = new edu.stanford.mt.MersenneTwister();</comment>
      <comment>System.out.println(multiset); check the distribution</comment>
    </method>
  </class>
</source>
