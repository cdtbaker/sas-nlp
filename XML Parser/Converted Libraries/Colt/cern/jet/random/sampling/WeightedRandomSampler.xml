<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random.sampling">
  <import name="cern.colt.list.BooleanArrayList" />
  <import name="cern.jet.random.Uniform" />
  <import name="cern.jet.random.engine.RandomEngine" />
  <class name="WeightedRandomSampler" extends="cern.colt.PersistentObject" startLine="14">
    <javadoc>
      <text>* Conveniently computes a stable subsequence of elements from a given input sequence;
 * Picks (samples) exactly one random element from successive blocks of <tt>weight</tt> input elements each.
 * For example, if weight==2 (a block is 2 elements), and the input is 5*2=10 elements long, then picks 5 random elements from the 10 elements such that
 * one element is randomly picked from the first block, one element from the second block, ..., one element from the last block.
 * weight == 1.0 --> all elements are picked (sampled). weight == 10.0 --> Picks one random element from successive blocks of 10 elements each. Etc.
 * The subsequence is guaranteed to be <i>stable</i>, i.e. elements never change position relative to each other.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 02/05/99</version>
    </javadoc>
    <declaration type="int" name="skip" />
    <declaration type="int" name="nextTriggerPos" />
    <declaration type="int" name="nextSkip" />
    <declaration type="int" name="weight" />
    <declaration type="Uniform" name="generator" />
    <declaration type="int" name="UNDEFINED" />
    <javadoc>
      <text>* Calls <tt>BlockedRandomSampler(1,null)</tt>.</text>
    </javadoc>
    <method type="constructor" name="WeightedRandomSampler" startLine="37" endLine="39" />
    <javadoc>
      <text>* Chooses exactly one random element from successive blocks of <tt>weight</tt> input elements each.
 * For example, if weight==2, and the input is 5*2=10 elements long, then chooses 5 random elements from the 10 elements such that
 * one is chosen from the first block, one from the second, ..., one from the last block.
 * weight == 1.0 --> all elements are consumed (sampled). 10.0 --> Consumes one random element from successive blocks of 10 elements each. Etc.</text>
      <param>weight the weight.</param>
      <param>randomGenerator a random number generator. Set this parameter to <tt>null</tt> to use the default random number generator.</param>
    </javadoc>
    <method type="constructor" name="WeightedRandomSampler" startLine="48" endLine="52" />
    <javadoc>
      <text>* Returns a deep copy of the receiver.</text>
    </javadoc>
    <method type="Object" name="clone" startLine="56" endLine="60">
      <declaration type="WeightedRandomSampler" name="copy" />
    </method>
    <javadoc>
      <text>* Not yet commented.</text>
      <param>weight int</param>
    </javadoc>
    <method type="int" name="getWeight" startLine="65" endLine="67" />
    <javadoc>
      <text>* Chooses exactly one random element from successive blocks of <tt>weight</tt> input elements each.
 * For example, if weight==2, and the input is 5*2=10 elements long, then chooses 5 random elements from the 10 elements such that
 * one is chosen from the first block, one from the second, ..., one from the last block.</text>
      <return><tt>true</tt> if the next element shall be sampled (picked), <tt>false</tt> otherwise.</return>
    </javadoc>
    <method type="boolean" name="sampleNextElement" startLine="74" endLine="97">
      <scope startLine="75" endLine="78">
        <comment>reject</comment>
      </scope>
      <scope startLine="80" endLine="85">
        <comment>tuned for speed</comment>
      </scope>
      <scope startLine="87" endLine="90">
        <comment>reject</comment>
      </scope>
      <comment>accept</comment>
    </method>
    <javadoc>
      <text>* Not yet commented.</text>
      <param>weight int</param>
    </javadoc>
    <method type="void" name="setWeight" startLine="102" endLine="108" />
    <javadoc>
      <text>* Not yet commented.</text>
    </javadoc>
    <method type="void" name="test" startLine="112" endLine="122">
      <declaration type="WeightedRandomSampler" name="sampler" />
      <declaration type="cern.colt.list.IntArrayList" name="sample" />
      <scope startLine="117" endLine="119" />
    </method>
    <javadoc>
      <text>* Chooses exactly one random element from successive blocks of <tt>weight</tt> input elements each.
 * For example, if weight==2, and the input is 5*2=10 elements long, then chooses 5 random elements from the 10 elements such that
 * one is chosen from the first block, one from the second, ..., one from the last block.</text>
      <param>acceptList a bitvector which will be filled with <tt>true</tt> where sampling shall occur and <tt>false</tt> where it shall not occur.</param>
    </javadoc>
    <method type="void" name="xsampleNextElements" startLine="129" endLine="158">
      <declaration type="int" name="length" />
      <declaration type="boolean[]" name="accept" />
      <scope startLine="133" endLine="157">
        <scope startLine="134" endLine="138" />
        <scope startLine="140" endLine="145" />
        <scope startLine="147" endLine="151" />
        <comment>reject</comment>
        <comment>tuned for speed</comment>
        <comment>reject</comment>
        <comment>accept</comment>
      </scope>
      <comment>manually inlined</comment>
    </method>
    <comment>public class BlockedRandomSampler extends Object implements java.io.Serializable {</comment>
  </class>
</source>
