<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random.sampling">
  <import name="cern.colt.list.BooleanArrayList" />
  <import name="cern.jet.random.engine.RandomEngine" />
  <class name="RandomSamplingAssistant" extends="cern.colt.PersistentObject" startLine="13">
    <javadoc>
      <text>* Conveniently computes a stable <i>Simple Random Sample Without Replacement (SRSWOR)</i> subsequence of <tt>n</tt> elements from a given input sequence of <tt>N</tt> elements;
 * Example: Computing a sublist of <tt>n=3</tt> random elements from a list <tt>(1,...,50)</tt> may yield the sublist <tt>(7,13,47)</tt>.
 * The subsequence is guaranteed to be <i>stable</i>, i.e. elements never change position relative to each other.
 * Each element from the <tt>N</tt> elements has the same probability to be included in the <tt>n</tt> chosen elements.
 * This class is a convenience adapter for <tt>RandomSampler</tt> using blocks.</text>
      <see>RandomSampler</see>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 02/05/99</version>
    </javadoc>
    <declaration type="RandomSampler" name="sampler" />
    <declaration type="long[]" name="buffer" />
    <declaration type="int" name="bufferPosition" />
    <declaration type="long" name="skip" />
    <declaration type="long" name="n" />
    <declaration type="int" name="MAX_BUFFER_SIZE" />
    <javadoc>
      <text>* Constructs a random sampler that samples <tt>n</tt> random elements from an input sequence of <tt>N</tt> elements.</text>
      <param>n the total number of elements to choose (must be &gt;= 0).</param>
      <param>N number of elements to choose from (must be &gt;= n).</param>
      <param>randomGenerator a random number generator. Set this parameter to <tt>null</tt> to use the default random number generator.</param>
    </javadoc>
    <method type="constructor" name="RandomSamplingAssistant" startLine="41" endLine="48">
      <comment>start with the right offset</comment>
    </method>
    <javadoc>
      <text>* Returns a deep copy of the receiver.</text>
    </javadoc>
    <method type="Object" name="clone" startLine="52" endLine="56">
      <declaration type="RandomSamplingAssistant" name="copy" />
    </method>
    <javadoc>
      <text>* Not yet commented.</text>
    </javadoc>
    <method type="void" name="fetchNextBlock" startLine="60" endLine="67">
      <scope startLine="61" endLine="66">
        <declaration type="long" name="last" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the used random generator.</text>
    </javadoc>
    <method type="RandomEngine" name="getRandomGenerator" startLine="71" endLine="73" />
    <javadoc>
      <text>* Tests random sampling.</text>
    </javadoc>
    <method type="void" name="main" startLine="77" endLine="82">
      <declaration type="long" name="n" />
      <declaration type="long" name="N" />
      <comment>test(n,N);</comment>
    </method>
    <javadoc>
      <text>* Just shows how this class can be used; samples n elements from and int[] array.</text>
    </javadoc>
    <method type="int[]" name="sampleArray" startLine="86" endLine="95">
      <declaration type="RandomSamplingAssistant" name="assistant" />
      <declaration type="int[]" name="sample" />
      <declaration type="int" name="j" />
      <declaration type="int" name="length" />
      <scope startLine="91" endLine="93" />
    </method>
    <javadoc>
      <text>* Returns whether the next element of the input sequence shall be sampled (picked) or not.</text>
      <return><tt>true</tt> if the next element shall be sampled (picked), <tt>false</tt> otherwise.</return>
    </javadoc>
    <method type="boolean" name="sampleNextElement" startLine="100" endLine="115">
      <scope startLine="106" endLine="109" />
      <scope startLine="110" endLine="112" />
      <comment>reject</comment>
      <comment>reject</comment>
      <comment>accept</comment>
    </method>
    <javadoc>
      <text>* Tests the methods of this class.
 * To do benchmarking, comment the lines printing stuff to the console.</text>
    </javadoc>
    <method type="void" name="test" startLine="120" endLine="136">
      <declaration type="RandomSamplingAssistant" name="assistant" />
      <declaration type="cern.colt.list.LongArrayList" name="sample" />
      <declaration type="cern.colt.Timer" name="timer" />
      <scope startLine="126" endLine="131">
        <scope startLine="127" endLine="129" />
      </scope>
    </method>
    <javadoc>
      <text>* Tests the methods of this class.
 * To do benchmarking, comment the lines printing stuff to the console.</text>
    </javadoc>
    <method type="void" name="testArraySampling" startLine="141" endLine="165">
      <declaration type="int[]" name="elements" />
      <declaration type="cern.colt.Timer" name="timer" />
      <declaration type="int[]" name="sample" />
      <comment>System.out.print("\nElements = [");
for (int i=0; i<N-1; i++) System.out.print(elements[i]+", ");
System.out.print(elements[N-1]);
System.out.println("]");


System.out.print("\nSample = [");
for (int i=0; i<n-1; i++) System.out.print(sample[i]+", ");
System.out.print(sample[n-1]);
System.out.println("]");</comment>
    </method>
    <javadoc>
      <text>* Returns whether the next elements of the input sequence shall be sampled (picked) or not.
 * one is chosen from the first block, one from the second, ..., one from the last block.</text>
      <param>acceptList a bitvector which will be filled with <tt>true</tt> where sampling shall occur and <tt>false</tt> where it shall not occur.</param>
    </javadoc>
    <method type="void" name="xsampleNextElements" startLine="171" endLine="197">
      <declaration type="int" name="length" />
      <declaration type="boolean[]" name="accept" />
      <scope startLine="175" endLine="196">
        <scope startLine="176" endLine="179" />
        <scope startLine="180" endLine="183" />
        <scope startLine="187" endLine="190" />
        <scope startLine="191" endLine="193" />
        <comment>reject</comment>
        <comment>reject</comment>
        <comment>accept</comment>
      </scope>
      <comment>manually inlined</comment>
    </method>
    <comment>public class RandomSamplingAssistant extends Object implements java.io.Serializable {</comment>
  </class>
</source>
