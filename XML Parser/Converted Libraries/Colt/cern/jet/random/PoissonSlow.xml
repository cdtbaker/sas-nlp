<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random">
  <import name="cern.jet.random.engine.RandomEngine" />
  <class name="PoissonSlow" extends="AbstractDiscreteDistribution" startLine="12">
    <javadoc>
      <text>* Poisson distribution; See the <A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node208.html#SECTION0002080000000000000000"> math definition</A>
 * and <A HREF="http://www.statsoft.com/textbook/glosp.html#Poisson Distribution"> animated definition</A>.
 * <p>
 * <tt>p(k) = (mean^k / k!) * exp(-mean)</tt> for <tt>k &gt;= 0</tt>.
 * <p>
 * Valid parameter ranges: <tt>mean &gt; 0</tt>.
 * Note: if <tt>mean &lt;= 0.0</tt> then always returns zero.
 * <p>
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * <dt>
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * <p>
 * <b>Implementation:</b> 
 * This is a port of <A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandPoisson.html">RandPoisson</A> used in <A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep">CLHEP 1.4.0</A> (C++).
 * CLHEP's implementation, in turn, is based upon "W.H.Press et al., Numerical Recipes in C, Second Edition".</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="double" name="mean" />
    <declaration type="double" name="cached_sq" />
    <declaration type="double" name="cached_alxm" />
    <declaration type="double" name="cached_g" />
    <declaration type="double" name="MEAN_MAX" />
    <declaration type="double" name="SWITCH_MEAN" />
    <declaration type="double[]" name="cof" />
    <declaration type="PoissonSlow" name="shared" />
    <javadoc>
      <text>* Constructs a poisson distribution.
 * Example: mean=1.0.</text>
    </javadoc>
    <method type="constructor" name="PoissonSlow" startLine="54" endLine="57" />
    <javadoc>
      <text>* Returns the value ln(Gamma(xx) for xx > 0.  Full accuracy is obtained for 
 * xx > 1. For 0 < xx < 1. the reflection formula (6.1.4) can be used first.
 * (Adapted from Numerical Recipes in C)</text>
    </javadoc>
    <method type="double" name="logGamma" startLine="63" endLine="75">
      <declaration type="double" name="x" />
      <declaration type="double" name="tmp" />
      <declaration type="double" name="ser" />
      <declaration type="double[]" name="coeff" />
      <scope startLine="70" endLine="73" />
    </method>
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="int" name="nextInt" startLine="79" endLine="81" />
    <javadoc>
      <text>* Returns a random number from the distribution; bypasses the internal state.</text>
    </javadoc>
    <method type="int" name="nextInt" startLine="85" endLine="124">
      <declaration type="double" name="xm" />
      <declaration type="double" name="g" />
      <scope startLine="93" endLine="102">
        <declaration type="int" name="poisson" />
        <declaration type="double" name="product" />
        <scope startLine="96" endLine="99" />
        <comment>bug in CLHEP 1.4.0: was "} while ( product > g );"</comment>
      </scope>
      <scope startLine="103" endLine="120">
        <declaration type="double" name="t" />
        <declaration type="double" name="em" />
        <declaration type="double" name="sq" />
        <declaration type="double" name="alxm" />
        <declaration type="RandomEngine" name="rand" />
        <scope startLine="110" endLine="118">
          <declaration type="double" name="y" />
          <scope startLine="112" endLine="115" />
        </scope>
        <comment>faster than em = Math.floor(em); (em>=0.0)</comment>
      </scope>
      <scope startLine="121" endLine="123">
        <comment>mean is too large</comment>
      </scope>
      <comment>Adapted from "Numerical Recipes in C".</comment>
      <comment>not defined</comment>
    </method>
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="int" name="nextIntSlow" startLine="128" endLine="137">
      <declaration type="double" name="bound" />
      <declaration type="int" name="count" />
      <declaration type="double" name="product" />
      <scope startLine="132" endLine="134" />
      <comment>detected endless loop due to rounding errors</comment>
    </method>
    <javadoc>
      <text>* Sets the mean.</text>
    </javadoc>
    <method type="void" name="setMean" startLine="141" endLine="154">
      <scope startLine="142" endLine="153">
        <scope startLine="145" endLine="147" />
        <scope startLine="148" endLine="152" />
        <comment>not defined</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns a random number from the distribution with the given mean.</text>
    </javadoc>
    <method type="int" name="staticNextInt" startLine="158" endLine="163">
      <scope startLine="159" endLine="162" />
    </method>
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="167" endLine="169" />
    <javadoc>
      <text>* Sets the uniform random number generated shared by all <b>static</b> methods.</text>
      <param>randomGenerator the new uniform random number generator to be shared.</param>
    </javadoc>
    <method type="void" name="xstaticSetRandomGenerator" startLine="174" endLine="178">
      <scope startLine="175" endLine="177" />
    </method>
    <comment>precomputed and cached values (for performance only)</comment>
    <comment>for all means larger than that, we don't try to compute a poisson deviation, but return the mean.</comment>
    <comment>switch from method A to method B</comment>
    <comment>for method logGamma()</comment>
    <comment>The uniform random number generated shared by all <b>static</b> methods.</comment>
  </class>
</source>
