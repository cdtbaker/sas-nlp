<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random">
  <import name="cern.jet.random.engine.RandomEngine" />
  <class name="Logarithmic" extends="AbstractContinousDistribution" startLine="12">
    <javadoc>
      <text>* Logarithmic distribution.
 * <p>
 * Valid parameter ranges: <tt>0 &lt; p &lt; 1</tt>.
 * <p>
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * <dt>
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * <p>
 * <b>Implementation:</b> 
 * <dt>
 * Method: Inversion/Transformation.
 * <dt>
 * This is a port of <tt>lsk.c</tt> from the <A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html">C-RAND / WIN-RAND</A> library.
 * C-RAND's implementation, in turn, is based upon
 * <p>
 * A.W. Kemp (1981): Efficient generation of logarithmically distributed pseudo-random variables, Appl. Statist. 30, 249-253.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="double" name="my_p" />
    <declaration type="double" name="t" />
    <declaration type="Logarithmic" name="shared" />
    <javadoc>
      <text>* Constructs a Logarithmic distribution.</text>
    </javadoc>
    <method type="constructor" name="Logarithmic" startLine="44" endLine="47" />
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="double" name="nextDouble" startLine="51" endLine="53" />
    <javadoc>
      <text>* Returns a random number from the distribution; bypasses the internal state.</text>
    </javadoc>
    <method type="double" name="nextDouble" startLine="57" endLine="123">
      <declaration type="double" name="u" />
      <declaration type="int" name="k" />
      <scope startLine="94" endLine="98">
        <comment>Set-up</comment>
      </scope>
      <scope startLine="101" endLine="111">
        <scope startLine="104" endLine="109" />
        <comment>Inversion/Chop-down</comment>
        <comment>System.out.println("u="+u+", p="+p);</comment>
      </scope>
      <scope startLine="117" endLine="120" />
      <javadoc>
        <text>* *
 * Logarithmic Distribution - Inversion/Transformation       
 * *
 * *
 * The algorithm combines Inversion and Transformation.           
 * It is based on the following fact: A random variable X from    
 * the Logarithmic distribution has the property that X for fixed 
 * Y=y is Geometric distributed with P(X=x|Y=y)=(1-y)*y^(x-1) (*) 
 * where Y has distribution function F(y)=ln(1-y)/ln(1-p).        
 * So first random numbers y are generated by simple Inversion,   
 * then k=(long int) (1+ln(u)/ln(y)) is a Geometric random number 
 * and because of (*) a Logarithmic one.                          
 * To speed up the algorithm squeezes are used as well as the     
 * fact, that many of the random numbers are 1 or 2 (depending on 
 * special circumstances).                                        
 * On an IBM/PC 486 optimal performance is achieved, if for p<.97 
 * simple inversion is used and otherwise the transformation.     
 * On an IBM/PC 286 inversion should be restricted to p<.90.      
 * *
 * *
 * FUNCTION:    - lsk  samples a random number from the           
 * Logarithmic distribution with                   
 * parameter  0 < p < 1 .                          
 * REFERENCE:   - A.W. Kemp (1981): Efficient generation of       
 * logarithmically distributed pseudo-random       
 * variables, Appl. Statist. 30, 249-253.          
 * SUBPROGRAMS: - drand(seed) ... (0,1)-Uniform generator with    
 * unsigned long integer *seed.                    
 * *</text>
      </javadoc>
      <comment>Transformation</comment>
    </method>
    <javadoc>
      <text>* Sets the distribution parameter.</text>
    </javadoc>
    <method type="void" name="setState" startLine="127" endLine="129" />
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="double" name="staticNextDouble" startLine="133" endLine="137">
      <scope startLine="134" endLine="136" />
    </method>
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="141" endLine="143" />
    <javadoc>
      <text>* Sets the uniform random number generated shared by all <b>static</b> methods.</text>
      <param>randomGenerator the new uniform random number generator to be shared.</param>
    </javadoc>
    <method type="void" name="xstaticSetRandomGenerator" startLine="148" endLine="152">
      <scope startLine="149" endLine="151" />
    </method>
    <comment>cached vars for method nextDouble(a) (for performance only)</comment>
    <comment>The uniform random number generated shared by all <b>static</b> methods.</comment>
  </class>
</source>
