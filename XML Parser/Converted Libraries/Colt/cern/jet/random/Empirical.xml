<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random">
  <import name="cern.jet.random.engine.RandomEngine" />
  <class name="Empirical" extends="AbstractContinousDistribution" startLine="12">
    <javadoc>
      <text>* Empirical distribution.
 * <p>
 * The probability distribution function (pdf) must be provided by the user as an array of positive real numbers. 
 * The pdf does not need to be provided in the form of relative probabilities, absolute probabilities are also accepted.
 * <p>
 * If <tt>interpolationType == LINEAR_INTERPOLATION</tt> a linear interpolation within the bin is computed, resulting in a constant density within each bin.
 * <dt>
 * If <tt>interpolationType == NO_INTERPOLATION</tt> no interpolation is performed and the result is a discrete distribution.  
 * <p>
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * <dt>
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * <p>
 * <b>Implementation:</b>
 * A uniform random number is generated using a user supplied generator.
 * The uniform number is then transformed to the user's distribution using the cumulative probability distribution constructed from the pdf.
 * The cumulative distribution is inverted using a binary search for the nearest bin boundary. 
 * <p>
 * This is a port of <A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandGeneral.html">RandGeneral</A> used in <A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep">CLHEP 1.4.0</A> (C++).</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="double[]" name="cdf" />
    <declaration type="int" name="interpolationType" />
    <declaration type="int" name="LINEAR_INTERPOLATION" />
    <declaration type="int" name="NO_INTERPOLATION" />
    <javadoc>
      <text>* Constructs an Empirical distribution.
 * The probability distribution function (pdf) is an array of positive real numbers. 
 * It need not be provided in the form of relative probabilities, absolute probabilities are also accepted.
 * The <tt>pdf</tt> must satisfy both of the following conditions
 * <ul>
 * <li><tt>0.0 &lt;= pdf[i] : 0&lt;=i&lt;=pdf.length-1</tt>
 * <li><tt>0.0 &lt; Sum(pdf[i]) : 0&lt;=i&lt;=pdf.length-1</tt>
 * </ul></text>
      <param>pdf the probability distribution function.</param>
      <param>interpolationType can be either <tt>Empirical.NO_INTERPOLATION</tt> or <tt>Empirical.LINEAR_INTERPOLATION</tt>.</param>
      <param>randomGenerator a uniform random number generator.</param>
      <throws>IllegalArgumentException if at least one of the three conditions above is violated.</throws>
    </javadoc>
    <method type="constructor" name="Empirical" startLine="56" endLine="59" />
    <javadoc>
      <text>* Returns the cumulative distribution function.</text>
    </javadoc>
    <method type="double" name="cdf" startLine="63" endLine="67" />
    <javadoc>
      <text>* Returns a deep copy of the receiver; the copy will produce identical sequences.
 * After this call has returned, the copy and the receiver have equal but separate state.</text>
      <return>a copy of the receiver.</return>
    </javadoc>
    <method type="Object" name="clone" startLine="74" endLine="78">
      <declaration type="Empirical" name="copy" />
    </method>
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="double" name="nextDouble" startLine="82" endLine="117">
      <declaration type="double" name="rand" />
      <declaration type="int" name="nBins" />
      <declaration type="int" name="nbelow" />
      <declaration type="int" name="nabove" />
      <scope startLine="91" endLine="95">
        <declaration type="int" name="middle" />
        <comment>div 2</comment>
      </scope>
      <scope startLine="98" endLine="100" />
      <scope startLine="101" endLine="115">
        <declaration type="double" name="binMeasure" />
        <scope startLine="106" endLine="111" />
        <declaration type="double" name="binFraction" />
        <comment>binMeasure is always aProbFunc[nbelow],</comment>
        <comment>but we don't have aProbFunc any more so we subtract.</comment>
        <comment>rand lies right in a bin of measure 0.  Simply return the center</comment>
        <comment>of the range of that bin.  (Any value between k/N and (k+1)/N is</comment>
        <comment>equally good, in this rare case.)</comment>
      </scope>
      <comment>Non-existing pdf</comment>
      <comment>binary search in cumulative distribution function:</comment>
      <comment>largest k such that I[k] is known to be <= rand</comment>
      <comment>largest k such that I[k] is known to be >  rand</comment>
      <comment>after this binary search, nabove is always nbelow+1 and they straddle rand:</comment>
      <comment>illegal interpolation type</comment>
    </method>
    <javadoc>
      <text>* Returns the probability distribution function.</text>
    </javadoc>
    <method type="double" name="pdf" startLine="121" endLine="126">
      <comment>if (x < 0 || x > cdf.length-2) return 0.0;</comment>
      <comment>int k = (int) x;</comment>
      <comment>return cdf[k-1] - cdf[k];</comment>
    </method>
    <javadoc>
      <text>* Returns the probability distribution function.</text>
    </javadoc>
    <method type="double" name="pdf" startLine="130" endLine="133" />
    <javadoc>
      <text>* Sets the distribution parameters.
 * The <tt>pdf</tt> must satisfy both of the following conditions
 * <ul>
 * <li><tt>0.0 &lt;= pdf[i] : 0 &lt; =i &lt;= pdf.length-1</tt>
 * <li><tt>0.0 &lt; Sum(pdf[i]) : 0 &lt;=i &lt;= pdf.length-1</tt>
 * </ul></text>
      <param>pdf probability distribution function.</param>
      <param>interpolationType can be either <tt>Empirical.NO_INTERPOLATION</tt> or <tt>Empirical.LINEAR_INTERPOLATION</tt>.</param>
      <throws>IllegalArgumentException if at least one of the three conditions above is violated.</throws>
    </javadoc>
    <method type="void" name="setState" startLine="145" endLine="173">
      <scope startLine="147" endLine="149" />
      <scope startLine="152" endLine="156">
        <comment>throw new IllegalArgumentException("Non-existing pdf");</comment>
      </scope>
      <declaration type="int" name="nBins" />
      <scope startLine="163" endLine="167">
        <declaration type="double" name="prob" />
      </scope>
      <scope startLine="169" endLine="171" />
      <comment>compute cumulative distribution function (cdf) from probability distribution function (pdf)</comment>
      <comment>cdf is now cached...</comment>
    </method>
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="177" endLine="182">
      <declaration type="String" name="interpolation" />
    </method>
    <javadoc>
      <text>* Not yet commented.</text>
      <return>int</return>
    </javadoc>
    <method type="int" name="xnBins" startLine="187" endLine="189" />
    <comment>cumulative distribution function</comment>
  </class>
</source>
