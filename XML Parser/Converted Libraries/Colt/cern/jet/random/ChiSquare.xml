<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random">
  <import name="cern.jet.random.engine.RandomEngine" />
  <import name="cern.jet.stat.Probability" />
  <class name="ChiSquare" extends="AbstractContinousDistribution" startLine="13">
    <javadoc>
      <text>* ChiSquare distribution; See the <A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node31.html#SECTION000310000000000000000"> math definition</A>
 * and <A HREF="http://www.statsoft.com/textbook/glosc.html#Chi-square Distribution"> animated definition</A>.
 * <dt>A special case of the Gamma distribution.
 * <p>
 * <tt>p(x) = (1/g(f/2)) * (x/2)^(f/2-1) * exp(-x/2)</tt> with <tt>g(a)</tt> being the gamma function and <tt>f</tt> being the degrees of freedom.
 * <p>
 * Valid parameter ranges: <tt>freedom &gt; 0</tt>.
 * <p> 
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * <dt>
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * <p>
 * <b>Implementation:</b> 
 * <dt>
 * Method: Ratio of Uniforms with shift.
 * <dt>
 * High performance implementation. This is a port of <A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandChiSquare.html">RandChiSquare</A> used in <A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep">CLHEP 1.4.0</A> (C++).
 * CLHEP's implementation, in turn, is based on <tt>chru.c</tt> from the <A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html">C-RAND / WIN-RAND</A> library.
 * C-RAND's implementation, in turn, is based upon
 * <p>J.F. Monahan (1987): An algorithm for generating chi random variables, ACM Trans. Math. Software 13, 168-172.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="double" name="freedom" />
    <declaration type="double" name="freedom_in" />
    <declaration type="ChiSquare" name="shared" />
    <javadoc>
      <text>* Constructs a ChiSquare distribution.
 * Example: freedom=1.0.</text>
      <param>freedom degrees of freedom.</param>
      <throws>IllegalArgumentException if <tt>freedom &lt; 1.0</tt>.</throws>
    </javadoc>
    <method type="constructor" name="ChiSquare" startLine="52" endLine="55" />
    <javadoc>
      <text>* Returns the cumulative distribution function.</text>
    </javadoc>
    <method type="double" name="cdf" startLine="59" endLine="61" />
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="double" name="nextDouble" startLine="65" endLine="67" />
    <javadoc>
      <text>* Returns a random number from the distribution; bypasses the internal state.</text>
      <param>freedom degrees of freedom.
 * It should hold <tt>freedom &lt; 1.0</tt>.</param>
    </javadoc>
    <method type="double" name="nextDouble" startLine="73" endLine="131">
      <declaration type="double" name="u" />
      <scope startLine="95" endLine="108">
        <scope startLine="96" endLine="107" />
      </scope>
      <scope startLine="109" endLine="130">
        <scope startLine="110" endLine="117" />
        <scope startLine="118" endLine="129" />
      </scope>
      <javadoc>
        <text>* *
 * Chi Distribution - Ratio of Uniforms  with shift        
 * *
 * *
 * FUNCTION :   - chru samples a random number from the Chi       
 * distribution with parameter  a > 1.             
 * REFERENCE :  - J.F. Monahan (1987): An algorithm for           
 * generating chi random variables, ACM Trans.     
 * Math. Software 13, 168-172.                     
 * SUBPROGRAM : - anEngine  ... pointer to a (0,1)-Uniform        
 * engine                                          
 * *
 * Implemented by R. Kremer, 1990</text>
      </javadoc>
      <comment>if( a < 1 )  return (-1.0);  Check for invalid input value</comment>
    </method>
    <javadoc>
      <text>* Returns the probability distribution function.</text>
    </javadoc>
    <method type="double" name="pdf" startLine="135" endLine="139">
      <declaration type="double" name="logGamma" />
    </method>
    <javadoc>
      <text>* Sets the distribution parameter.</text>
      <param>freedom degrees of freedom.</param>
      <throws>IllegalArgumentException if <tt>freedom &lt; 1.0</tt>.</throws>
    </javadoc>
    <method type="void" name="setState" startLine="145" endLine="148" />
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
      <param>freedom degrees of freedom.</param>
      <throws>IllegalArgumentException if <tt>freedom &lt; 1.0</tt>.</throws>
    </javadoc>
    <method type="double" name="staticNextDouble" startLine="154" endLine="158">
      <scope startLine="155" endLine="157" />
    </method>
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="162" endLine="164" />
    <javadoc>
      <text>* Sets the uniform random number generated shared by all <b>static</b> methods.</text>
      <param>randomGenerator the new uniform random number generator to be shared.</param>
    </javadoc>
    <method type="void" name="xstaticSetRandomGenerator" startLine="169" endLine="173">
      <scope startLine="170" endLine="172" />
    </method>
    <comment>cached vars for method nextDouble(a) (for performance only)</comment>
    <comment>The uniform random number generated shared by all <b>static</b> methods.</comment>
  </class>
</source>
