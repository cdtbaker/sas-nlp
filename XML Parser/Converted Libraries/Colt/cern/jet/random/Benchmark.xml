<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random">
  <import name="cern.colt.list.DoubleArrayList" />
  <import name="cern.colt.list.IntArrayList" />
  <import name="cern.jet.random.engine.RandomEngine" />
  <class name="Benchmark" extends="cern.colt.PersistentObject" startLine="14">
    <javadoc>
      <text>* Benchmarks random number generation from various distributions as well as PDF and CDF lookups.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="RandomEngine" name="randomGenerator" />
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="Benchmark" startLine="25" endLine="27" />
    <javadoc>
      <text>* Prints the first <tt>size</tt> random numbers generated by the distribution.</text>
    </javadoc>
    <method type="void" name="demo1" startLine="31" endLine="54">
      <declaration type="double" name="mean" />
      <declaration type="double" name="variance" />
      <declaration type="double" name="alpha" />
      <declaration type="double" name="lambda" />
      <declaration type="cern.jet.random.engine.RandomEngine" name="engine" />
      <declaration type="cern.jet.random.AbstractDistribution" name="dist" />
      <declaration type="int" name="size" />
      <declaration type="cern.colt.list.DoubleArrayList" name="numbers" />
      <declaration type="hep.aida.bin.DynamicBin1D" name="bin" />
      <comment>Gamma distribution</comment>
      <comment>define distribution parameters</comment>
      <comment>for tests and debugging use a random engine with CONSTANT seed --> deterministic and reproducible results</comment>
      <comment>your favourite distribution goes here</comment>
      <comment>collect random numbers and print statistics</comment>
    </method>
    <javadoc>
      <text>* Benchmarks all subclasses</text>
      <param>args[0] the number of random numbers to be generated per subclass.</param>
      <param>args[1] <tt>true</tt> prints each generated number, <tt>false</tt> does not print generated numbers (use this setting for benchmarking).</param>
    </javadoc>
    <method type="void" name="main" startLine="60" endLine="66">
      <declaration type="int" name="size" />
      <declaration type="boolean" name="print" />
      <declaration type="double" name="mean" />
      <declaration type="String" name="generatorName" />
    </method>
    <javadoc>
      <text>* Benchmarks all subclasses</text>
      <param>size the number of random numbers to be generated per subclass.</param>
      <param>print <tt>true</tt> prints each generated number, <tt>false</tt> does not print generated numbers (use this setting for benchmarking).</param>
      <param>mean the mean for distributions that require a mean.</param>
    </javadoc>
    <method type="void" name="random" startLine="73" endLine="150">
      <declaration type="int" name="largeVariance" />
      <declaration type="RandomEngine" name="gen" />
      <scope startLine="79" endLine="81" />
      <scope startLine="81" endLine="83" />
      <comment>int large = 100000000;</comment>
      <comment>= new MersenneTwister();</comment>
      <comment>randomInstance(size,print,new Zeta(10.0, 10.0,(RandomEngine)gen.clone()));
randomInstance(size,print,new Zeta(1.0, 1.0, (RandomEngine)gen.clone()));
randomInstance(size,print,new Zeta(mean, mean, (RandomEngine)gen.clone()));
randomInstance(size,print,new Zeta(mean, 1mean, (RandomEngine)gen.clone()));
randomInstance(size,print,new Zeta(1mean, mean, (RandomEngine)gen.clone()));</comment>
      <comment>randomInstance(size,print,new Beta(10.0, 10.0,(RandomEngine)gen.clone()));
randomInstance(size,print,new Beta(1.0, 1.0, (RandomEngine)gen.clone()));
randomInstance(size,print,new Beta(mean, mean, (RandomEngine)gen.clone()));
randomInstance(size,print,new Beta(mean, 1mean, (RandomEngine)gen.clone()));
randomInstance(size,print,new Beta(1mean, mean, (RandomEngine)gen.clone()));

randomInstance(size,print,new Uniform((RandomEngine)gen.clone()));</comment>
      <comment>randomInstance(size,print,new PoissonSlow(mean,(RandomEngine)gen.clone()));

randomInstance(size,print,new Poisson(3.0,(RandomEngine)gen.clone()));
randomInstance(size,print,new PoissonSlow(3.0,(RandomEngine)gen.clone()));

randomInstance(size,print,new Binomial(1,0.5,(RandomEngine)gen.clone()));
randomInstance(size,print,new Binomial(5,0.3,(RandomEngine)gen.clone()));
randomInstance(size,print,new Binomial((int)mean,0.999999999,(RandomEngine)gen.clone()));
randomInstance(size,print,new Binomial((int)mean,1.0mean,(RandomEngine)gen.clone()));

randomInstance(size,print,new Exponential(1.0,(RandomEngine)gen.clone()));
randomInstance(size,print,new Exponential(3.0,(RandomEngine)gen.clone()));

randomInstance(size,print,new Normal(0.0,1.0,(RandomEngine)gen.clone()));
randomInstance(size,print,new Normal(3.0,1.0,(RandomEngine)gen.clone()));
randomInstance(size,print,new Normal(mean,largeVariance,(RandomEngine)gen.clone()));

randomInstance(size,print,new BreitWigner(1.0, 0.2, Double.NEGATIVE_INFINITY, (RandomEngine)gen.clone()));
randomInstance(size,print,new BreitWigner(1.0, 0.2, 1.0, (RandomEngine)gen.clone()));

randomInstance(size,print,new BreitWignerMeanSquare(1.0, 0.2, Double.NEGATIVE_INFINITY, (RandomEngine)gen.clone()));
randomInstance(size,print,new BreitWignerMeanSquare(1.0, 0.2, 1.0, (RandomEngine)gen.clone()));

randomInstance(size,print,new ChiSquare(1.0,(RandomEngine)gen.clone()));
randomInstance(size,print,new ChiSquare(5.0,(RandomEngine)gen.clone()));
randomInstance(size,print,new ChiSquare(mean,(RandomEngine)gen.clone()));

randomInstance(size,print,new Gamma(0.2,1.0,(RandomEngine)gen.clone()));
randomInstance(size,print,new Gamma(1.0,1.0,(RandomEngine)gen.clone()));
randomInstance(size,print,new Gamma(3.0,0.5,(RandomEngine)gen.clone()));
randomInstance(size,print,new Gamma(mean,0.5,(RandomEngine)gen.clone()));
randomInstance(size,print,new Gamma(mean,1.0mean,(RandomEngine)gen.clone()));
randomInstance(size,print,new Gamma(mean,mean,(RandomEngine)gen.clone()));

randomInstance(size,print,new StudentT(1.0,(RandomEngine)gen.clone()));
randomInstance(size,print,new StudentT(2.5,(RandomEngine)gen.clone()));
randomInstance(size,print,new StudentT(mean,(RandomEngine)gen.clone()));
randomInstance(size,print,new StudentT(1.0mean,(RandomEngine)gen.clone()));

int probs = 10000;
double[] pdf = new double[probs];
for (int i=0; i<probs; i++) pdf[i]=ii;  prepare f(x)=x^2 distrib.
randomInstance(size,print,new Empirical(pdf,Empirical.NO_INTERPOLATION, (RandomEngine)gen.clone()));
randomInstance(size,print,new Empirical(pdf,Empirical.LINEAR_INTERPOLATION, (RandomEngine)gen.clone()));</comment>
    </method>
    <javadoc>
      <text>* generates <size> random numbers from <dist></text>
    </javadoc>
    <method type="void" name="randomInstance" startLine="154" endLine="168">
      <declaration type="cern.colt.Timer" name="timer" />
      <scope startLine="158" endLine="164">
        <declaration type="double" name="rand" />
        <scope startLine="160" endLine="163" />
      </scope>
    </method>
    <javadoc>
      <text>* Prints the first <tt>size</tt> random numbers generated by the distribution.</text>
    </javadoc>
    <method type="void" name="test" startLine="172" endLine="178">
      <scope startLine="173" endLine="176" />
    </method>
    <javadoc>
      <text>* Prints the first <tt>size</tt> random numbers generated by the distribution.</text>
    </javadoc>
    <method type="void" name="test2" startLine="182" endLine="189">
      <declaration type="hep.aida.bin.DynamicBin1D" name="bin" />
      <scope startLine="184" endLine="186" />
    </method>
    <javadoc>
      <text>* Prints the first <tt>size</tt> random numbers generated by the distribution.</text>
    </javadoc>
    <method type="void" name="test2" startLine="193" endLine="240">
      <declaration type="hep.aida.bin.DynamicBin1D" name="binA" />
      <declaration type="hep.aida.bin.DynamicBin1D" name="binB" />
      <scope startLine="196" endLine="199" />
      <declaration type="IntArrayList" name="freq" />
      <declaration type="DoubleArrayList" name="distinct" />
      <declaration type="cern.colt.Timer" name="timer" />
      <comment>System.out.println(binA);</comment>
      <comment>System.out.println(binB);</comment>
      <comment>System.out.println(binA.compareWith(binB));</comment>
      <comment>System.out.println(distinct);</comment>
      <comment>System.out.println(freq);</comment>
      <comment>timer.reset();
timer.start();
binA.xfrequencies2(distinct,freq);
timer.stop().display();
System.out.println(distinct);
System.out.println(freq);</comment>
      <comment>distinct.shuffle();
timer.reset().start();
distinct.sort();
timer.stop().display();

timer.reset().start();
binA.frequencies(distinct,freq);
timer.stop().display();
System.out.println(distinct);
System.out.println(freq);</comment>
    </method>
  </class>
</source>
