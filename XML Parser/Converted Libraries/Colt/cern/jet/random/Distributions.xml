<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random">
  <import name="cern.jet.random.engine.RandomEngine" />
  <class name="Distributions" startLine="12">
    <javadoc>
      <text>* Contains methods for conveniently generating pseudo-random numbers from special distributions such as the Burr, Cauchy, Erlang, Geometric, Lambda, Laplace, Logistic, Weibull, etc.
 * <p>
 * <b>About this class:</b>
 * <dt>All distributions are obtained by using a <b>uniform</b> pseudo-random number generator.
 * followed by a transformation to the desired distribution.
 * <p>
 * <b>Example usage:</b><pre>
 * cern.jet.random.engine.RandomEngine generator;
 * generator = new cern.jet.random.engine.MersenneTwister(new java.util.Date());
 * //generator = new edu.cornell.lassp.houle.RngPack.Ranecu(new java.util.Date());
 * //generator = new edu.cornell.lassp.houle.RngPack.Ranmar(new java.util.Date());
 * //generator = new edu.cornell.lassp.houle.RngPack.Ranlux(new java.util.Date());
 * //generator = AbstractDistribution.makeDefaultGenerator();
 * for (int i=1000000; --i >=0; ) {
 * int cauchy = Distributions.nextCauchy(generator);
 * ...
 * }
 * </pre></text>
      <see>cern.jet.random.engine.MersenneTwister</see>
      <see>java.util.Random</see>
      <see>java.lang.Math</see>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="Distributions" startLine="42" endLine="44" />
    <javadoc>
      <text>* Returns the probability distribution function of the discrete geometric distribution.
 * <p>
 * <tt>p(k) = p * (1-p)^k</tt> for <tt> k &gt;= 0</tt>.
 * <p></text>
      <param>k the argument to the probability distribution function.</param>
      <param>p the parameter of the probability distribution function.</param>
    </javadoc>
    <method type="double" name="geometricPdf" startLine="53" endLine="56" />
    <javadoc>
      <text>* Returns a random number from the Burr II, VII, VIII, X Distributions.
 * <p>
 * <b>Implementation:</b> Inversion method.
 * This is a port of <tt>burr1.c</tt> from the <A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html">C-RAND / WIN-RAND</A> library.
 * C-RAND's implementation, in turn, is based upon
 * <p>
 * L. Devroye (1986): Non-Uniform Random Variate Generation, Springer Verlag, New York.                                      
 * <p></text>
      <param>r must be &gt; 0.</param>
      <param>nr the number of the burr distribution (e.g. 2,7,8,10).</param>
    </javadoc>
    <method type="double" name="nextBurr1" startLine="69" endLine="104">
      <declaration type="double" name="y" />
      <javadoc>
        <text>* *
 * Burr II, VII, VIII, X Distributions - Inversion         
 * *
 * *
 * FUNCTION :   - burr1 samples a random number from one of the   
 * Burr II, VII, VIII, X distributions with        
 * parameter  r > 0 , where the no. of the         
 * distribution is indicated by a pointer          
 * variable.                                       
 * REFERENCE :  - L. Devroye (1986): Non-Uniform Random Variate   
 * Generation, Springer Verlag, New York.          
 * SUBPROGRAM : - drand(seed) ... (0,1)-uniform generator with    
 * unsigned long integer *seed.                    
 * *</text>
      </javadoc>
      <comment>y=Math.exp(Math.log(randomGenerator.raw())r);                                 y=u^(1r)</comment>
      <comment>BURR II</comment>
      <comment>BURR VII</comment>
      <comment>BURR VIII</comment>
      <comment>BURR X</comment>
    </method>
    <javadoc>
      <text>* Returns a random number from the Burr III, IV, V, VI, IX, XII distributions.
 * <p>
 * <b>Implementation:</b> Inversion method.
 * This is a port of <tt>burr2.c</tt> from the <A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html">C-RAND / WIN-RAND</A> library.
 * C-RAND's implementation, in turn, is based upon
 * <p>
 * L. Devroye (1986): Non-Uniform Random Variate Generation, Springer Verlag, New York.                                      
 * <p></text>
      <param>r must be &gt; 0.</param>
      <param>k must be &gt; 0.</param>
      <param>nr the number of the burr distribution (e.g. 3,4,5,6,9,12).</param>
    </javadoc>
    <method type="double" name="nextBurr2" startLine="118" endLine="166">
      <declaration type="double" name="y" />
      <javadoc>
        <text>* *
 * Burr III, IV, V, VI, IX, XII Distribution - Inversion     
 * *
 * *
 * FUNCTION :   - burr2 samples a random number from one of the   
 * Burr III, IV, V, VI, IX, XII distributions with 
 * parameters r > 0 and k > 0, where the no. of    
 * the distribution is indicated by a pointer      
 * variable.                                       
 * REFERENCE :  - L. Devroye (1986): Non-Uniform Random Variate   
 * Generation, Springer Verlag, New York.          
 * SUBPROGRAM : - drand(seed) ... (0,1)-Uniform generator with    
 * unsigned long integer *seed.                    
 * *</text>
      </javadoc>
      <comment>U(0/1)</comment>
      <comment>u^(-1/r) - 1</comment>
      <comment>BURR III</comment>
      <comment>y^(-1/k)</comment>
      <comment>BURR IV</comment>
      <comment>y^k + 1</comment>
      <comment>BURR V</comment>
      <comment>arctan[log(y/k)]</comment>
      <comment>BURR VI</comment>
      <comment>BURR IX</comment>
      <comment>y^(1/r) -1</comment>
      <comment>BURR XII</comment>
      <comment>y^(1/k)</comment>
    </method>
    <javadoc>
      <text>* Returns a cauchy distributed random number from the standard Cauchy distribution C(0,1).  
 * <A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node25.html#SECTION000250000000000000000"> math definition</A>
 * and <A HREF="http://www.statsoft.com/textbook/glosc.html#Cauchy Distribution"> animated definition</A>. 
 * <p>
 * <tt>p(x) = 1/ (mean*pi * (1+(x/mean)^2))</tt>.
 * <p>
 * <b>Implementation:</b>
 * This is a port of <tt>cin.c</tt> from the <A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html">C-RAND / WIN-RAND</A> library.
 * <p></text>
      <returns>a number in the open unit interval <code>(0.0,1.0)</code> (excluding 0.0 and 1.0).</returns>
    </javadoc>
    <method type="double" name="nextCauchy" startLine="179" endLine="181" />
    <javadoc>
      <text>* Returns an erlang distributed random number with the given variance and mean.</text>
    </javadoc>
    <method type="double" name="nextErlang" startLine="185" endLine="193">
      <declaration type="int" name="k" />
      <declaration type="double" name="a" />
      <declaration type="double" name="prod" />
    </method>
    <javadoc>
      <text>* Returns a discrete geometric distributed random number; <A HREF="http://www.statsoft.com/textbook/glosf.html#Geometric Distribution">Definition</A>.
 * <p>
 * <tt>p(k) = p * (1-p)^k</tt> for <tt> k &gt;= 0</tt>.
 * <p>
 * <b>Implementation:</b> Inversion method.
 * This is a port of <tt>geo.c</tt> from the <A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html">C-RAND / WIN-RAND</A> library.</text>
      <param>p must satisfy <tt>0 &lt; p &lt; 1</tt>.
 * <p></param>
    </javadoc>
    <method type="int" name="nextGeometric" startLine="204" endLine="233">
      <declaration type="double" name="u" />
      <javadoc>
        <text>* *
 * Geometric Distribution - Inversion                
 * *
 * *
 * On generating random numbers of a discrete distribution by     
 * Inversion normally sequential search is necessary, but in the  
 * case of the Geometric distribution a direct transformation is  
 * possible because of the special parallel to the continuous     
 * Exponential distribution Exp(t):                               
 * X - Exp(t): G(x)=1-exp(-tx)                                 
 * Geo(p): pk=G(k+1)-G(k)=exp(-tk)*(1-exp(-t))             
 * p=1-exp(-t)                                     
 * A random number of the Geometric distribution Geo(p) is        
 * obtained by k=(long int)x, where x is from Exp(t) with         
 * parameter t=-log(1-p).                                         
 * *
 * *
 * FUNCTION:    - geo samples a random number from the Geometric  
 * distribution with parameter 0<p<1.              
 * SUBPROGRAMS: - drand(seed) ... (0,1)-Uniform generator with    
 * unsigned long integer *seed.                    
 * *</text>
      </javadoc>
    </method>
    <javadoc>
      <text>* Returns a lambda distributed random number with parameters l3 and l4.
 * <p>
 * <b>Implementation:</b> Inversion method.
 * This is a port of <tt>lamin.c</tt> from the <A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html">C-RAND / WIN-RAND</A> library.
 * C-RAND's implementation, in turn, is based upon
 * <p>
 * J.S. Ramberg, B:W. Schmeiser (1974): An approximate method for generating asymmetric variables, Communications ACM 17, 78-82.
 * <p></text>
    </javadoc>
    <method type="double" name="nextLambda" startLine="244" endLine="252">
      <declaration type="double" name="l_sign" />
      <declaration type="double" name="u" />
      <declaration type="double" name="x" />
      <comment>sign(l)</comment>
      <comment>U(0/1)</comment>
    </method>
    <javadoc>
      <text>* Returns a Laplace (Double Exponential) distributed random number from the standard Laplace distribution L(0,1).  
 * <p>
 * <b>Implementation:</b> Inversion method.
 * This is a port of <tt>lapin.c</tt> from the <A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html">C-RAND / WIN-RAND</A> library.
 * <p></text>
      <returns>a number in the open unit interval <code>(0.0,1.0)</code> (excluding 0.0 and 1.0).</returns>
    </javadoc>
    <method type="double" name="nextLaplace" startLine="261" endLine="266">
      <declaration type="double" name="u" />
    </method>
    <javadoc>
      <text>* Returns a random number from the standard Logistic distribution Log(0,1).
 * <p>
 * <b>Implementation:</b> Inversion method.
 * This is a port of <tt>login.c</tt> from the <A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html">C-RAND / WIN-RAND</A> library.</text>
    </javadoc>
    <method type="double" name="nextLogistic" startLine="273" endLine="276">
      <declaration type="double" name="u" />
    </method>
    <javadoc>
      <text>* Returns a power-law distributed random number with the given exponent and lower cutoff.</text>
      <param>alpha the exponent</param>
      <param>cut the lower cutoff</param>
    </javadoc>
    <method type="double" name="nextPowLaw" startLine="282" endLine="284" />
    <javadoc>
      <text>* Returns a random number from the standard Triangular distribution in (-1,1).
 * <p>
 * <b>Implementation:</b> Inversion method.
 * This is a port of <tt>tra.c</tt> from the <A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html">C-RAND / WIN-RAND</A> library.
 * <p></text>
    </javadoc>
    <method type="double" name="nextTriangular" startLine="292" endLine="310">
      <declaration type="double" name="u" />
      <javadoc>
        <text>* *
 * Triangular Distribution - Inversion: x = +-(1-sqrt(u))     
 * *
 * *
 * FUNCTION :   - tra samples a random number from the            
 * standard Triangular distribution in (-1,1)      
 * SUBPROGRAM : - drand(seed) ... (0,1)-Uniform generator with    
 * unsigned long integer *seed.                    
 * *</text>
      </javadoc>
      <comment>if (u<=0.5) return(Math.sqrt(2.0u)-1.0);                       -1 <= x <= 0</comment>
      <comment>else return(1.0-Math.sqrt(2.0(1.0-u)));                   0 <= x <= 1</comment>
    </method>
    <javadoc>
      <text>* Returns a weibull distributed random number. 
 * Polar method.
 * See Simulation, Modelling & Analysis by Law & Kelton, pp259</text>
    </javadoc>
    <method type="double" name="nextWeibull" startLine="316" endLine="320">
      <comment>Polar method.</comment>
      <comment>See Simulation, Modelling & Analysis by Law & Kelton, pp259</comment>
    </method>
    <javadoc>
      <text>* Returns a zipfian distributed random number with the given skew.
 * <p>
 * Algorithm from page 551 of:
 * Devroye, Luc (1986) `Non-uniform random variate generation',
 * Springer-Verlag: Berlin.   ISBN 3-540-96305-7 (also 0-387-96305-7)</text>
      <param>z the skew of the distribution (must be &gt;1.0).</param>
      <returns>a zipfian distributed number in the closed interval <tt>[1,Integer.MAX_VALUE]</tt>.</returns>
    </javadoc>
    <method type="int" name="nextZipfInt" startLine="331" endLine="348">
      <declaration type="double" name="b" />
      <declaration type="double" name="constant" />
      <declaration type="int" name="result" />
      <scope startLine="340" endLine="346">
        <declaration type="double" name="u" />
        <declaration type="double" name="v" />
        <declaration type="double" name="t" />
      </scope>
      <comment>Algorithm from page 551 of:
 Devroye, Luc (1986) `Non-uniform random variate generation',
 Springer-Verlag: Berlin.   ISBN 3-540-96305-7 (also 0-387-96305-7)</comment>
    </method>
  </class>
</source>
