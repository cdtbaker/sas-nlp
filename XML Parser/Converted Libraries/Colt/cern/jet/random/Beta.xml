<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random">
  <import name="cern.jet.random.engine.RandomEngine" />
  <import name="cern.jet.stat.Probability" />
  <class name="Beta" extends="AbstractContinousDistribution" startLine="13">
    <javadoc>
      <text>* Beta distribution; <A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node15.html#SECTION000150000000000000000"> math definition</A>
 * and <A HREF="http://www.statsoft.com/textbook/glosb.html#Beta Distribution"> animated definition</A>.
 * <p>
 * <tt>p(x) = k * x^(alpha-1) * (1-x)^(beta-1)</tt> with <tt>k = g(alpha+beta)/(g(alpha)*g(beta))</tt> and <tt>g(a)</tt> being the gamma function.
 * <p>
 * Valid parameter ranges: <tt>alpha &gt; 0</tt> and <tt>beta &gt; 0</tt>.            
 * <p>
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * <dt>
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * <p>
 * <b>Implementation:</b>
 * <dt>Method: Stratified Rejection/Patchwork Rejection.
 * High performance implementation.
 * <dt>This is a port of <tt>bsprc.c</tt> from the <A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html">C-RAND / WIN-RAND</A> library.
 * C-RAND's implementation, in turn, is based upon
 * <p>
 * H. Sakasegawa (1983): Stratified rejection and squeeze method for generating beta random numbers, 
 * Ann. Inst. Statist. Math. 35 B, 291-302.                                        
 * <p>
 * and
 * <p>
 * Stadlober E., H. Zechner (1993), <A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"> Generating beta variates via patchwork rejection,</A>,
 * Computing 50, 1-18.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="double" name="alpha" />
    <declaration type="double" name="beta" />
    <declaration type="double" name="PDF_CONST" />
    <declaration type="double" name="a_last" />
    <declaration type="double" name="a_" />
    <declaration type="double" name="c" />
    <declaration type="double" name="ml" />
    <declaration type="double" name="p_last" />
    <declaration type="double" name="a" />
    <declaration type="double" name="ll" />
    <declaration type="Beta" name="shared" />
    <javadoc>
      <text>* Constructs a Beta distribution.</text>
    </javadoc>
    <method type="constructor" name="Beta" startLine="69" endLine="72" />
    <javadoc />
    <method type="double" name="b00" startLine="76" endLine="117">
      <declaration type="double" name="U" />
      <scope startLine="79" endLine="92">
        <comment>b(1-b) / a(1-a)</comment>
        <comment>t = t_opt</comment>
        <comment>f(t) = fa * fb</comment>
        <comment>0 < X < t</comment>
        <comment>t < X < 1</comment>
      </scope>
      <scope startLine="94" endLine="115">
        <scope startLine="95" endLine="104">
          <scope startLine="100" endLine="103" />
        </scope>
        <scope startLine="105" endLine="114">
          <scope startLine="110" endLine="113" />
        </scope>
        <comment>X < t</comment>
        <comment>squeeze accept:   L(x) = 1 + (1 - b)x</comment>
        <comment>squeeze reject:   U(x) = 1 + ((1 - t)^(b-1) - 1)/t * x</comment>
        <comment>quotient accept:  q(x) = (1 - x)^(b-1) / fb</comment>
        <comment>X > t</comment>
        <comment>squeeze accept:   L(x) = 1 + (1 - a)(1 - x)</comment>
        <comment>squeeze reject:   U(x) = 1 + (t^(a-1) - 1)/(1 - t) * (1 - x)</comment>
        <comment>quotient accept:  q(x) = x^(a-1) / fa</comment>
      </scope>
    </method>
    <javadoc />
    <method type="double" name="b01" startLine="121" endLine="170">
      <declaration type="double" name="U" />
      <scope startLine="124" endLine="145">
        <scope startLine="135" endLine="138" />
        <scope startLine="139" endLine="142" />
        <comment>one step Newton * start value t</comment>
        <comment>f(t) = fa * fb</comment>
        <comment>ml = -m1</comment>
        <comment>mu = -m2 * t</comment>
        <comment>0 < X < t</comment>
        <comment>t < X < 1</comment>
      </scope>
      <scope startLine="147" endLine="168">
        <scope startLine="148" endLine="157">
          <scope startLine="153" endLine="156" />
        </scope>
        <scope startLine="158" endLine="167">
          <scope startLine="163" endLine="166" />
        </scope>
        <comment>X < t</comment>
        <comment>squeeze accept:   L(x) = 1 + m1*x,  ml = -m1</comment>
        <comment>squeeze reject:   U(x) = 1 + m2*x,  mu = -m2 * t</comment>
        <comment>quotient accept:  q(x) = (1 - x)^(b-1)</comment>
        <comment>X > t</comment>
        <comment>squeeze accept:   L(x) = 1 + (1 - a)(1 - x)</comment>
        <comment>squeeze reject:   U(x) = 1 + (t^(a-1) - 1)/(1 - t) * (1 - x)</comment>
        <comment>quotient accept:  q(x) = (x)^(a-1) / fa</comment>
      </scope>
    </method>
    <javadoc />
    <method type="double" name="b1prs" startLine="174" endLine="282">
      <declaration type="double" name="U" />
      <scope startLine="177" endLine="223">
        <scope startLine="186" endLine="188" />
        <scope startLine="189" endLine="201">
          <scope startLine="192" endLine="195" />
          <scope startLine="196" endLine="198" />
        </scope>
        <scope startLine="204" endLine="206" />
        <scope startLine="207" endLine="216">
          <scope startLine="210" endLine="213" />
        </scope>
        <comment>z1 = x1 - ll</comment>
        <comment>z5 = x5 + lr</comment>
        <comment>x1 < X < m</comment>
        <comment>m  < X < x5</comment>
        <comment>X < x1</comment>
        <comment>x5 < X</comment>
      </scope>
      <scope startLine="225" endLine="281">
        <scope startLine="226" endLine="242">
          <scope startLine="236" endLine="241" />
        </scope>
        <scope startLine="243" endLine="260">
          <scope startLine="254" endLine="259" />
        </scope>
        <scope startLine="261" endLine="269" />
        <scope startLine="270" endLine="278" />
        <comment>immediate accept:  x2 < X < m, - f(x2) < W < 0</comment>
        <comment>immediate accept:  x1 < X < x2, 0 < W < f(x1)</comment>
        <comment>candidates for acceptance-rejection-test</comment>
        <comment>squeeze accept:    L(x) = f(x2) (x - z2) / (x2 - z2)</comment>
        <comment>squeeze accept:    L(x) = f(x2) + (1 - f(x2))(x - x2)/(m - x2)</comment>
        <comment>quotient accept:   x2 < Y < m,   W >= 2f2 - f(Y)</comment>
        <comment>immediate accept:  m < X < x4, - f(x4) < W < 0</comment>
        <comment>immediate accept:  x4 < X < x5, 0 < W < f(x5)</comment>
        <comment>candidates for acceptance-rejection-test</comment>
        <comment>squeeze accept:    L(x) = f(x4) (z4 - x) / (z4 - x4)</comment>
        <comment>squeeze accept:    L(x) = f(x4) + (1 - f(x4))(x4 - x)/(x4 - m)</comment>
        <comment>quotient accept:   m < Y < x4,   W >= 2f4 - f(Y)</comment>
        <comment>X < x1</comment>
        <comment>X > 0!!</comment>
        <comment>squeeze accept:    L(x) = f(x1) (x - z1) / (x1 - z1)</comment>
        <comment>z1 = x1 - ll,   W <= 1 + (X - x1)/ll</comment>
        <comment>x5 < X</comment>
        <comment>X < 1!!</comment>
        <comment>squeeze accept:    L(x) = f(x5) (z5 - x) / (z5 - x5)</comment>
        <comment>z5 = x5 + lr,   W <= 1 + (x5 - X)/lr</comment>
        <comment>density accept:  f(x) = (x/m)^a ((1 - x)/(1 - m))^b</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the cumulative distribution function.</text>
    </javadoc>
    <method type="double" name="cdf" startLine="286" endLine="288" />
    <method type="double" name="f" startLine="289" endLine="291" />
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="double" name="nextDouble" startLine="295" endLine="297" />
    <javadoc>
      <text>* Returns a beta distributed random number; bypasses the internal state.</text>
    </javadoc>
    <method type="double" name="nextDouble" startLine="301" endLine="368">
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
      <scope startLine="346" endLine="352">
        <scope startLine="349" endLine="351" />
      </scope>
      <scope startLine="354" endLine="360">
        <scope startLine="357" endLine="359" />
      </scope>
      <scope startLine="362" endLine="365" />
      <javadoc>
        <text>* *
 * Beta Distribution - Stratified Rejection/Patchwork Rejection   
 * *
 * For parameters a < 1 , b < 1  and  a < 1 < b   or  b < 1 < a   
 * the stratified rejection methods b00 and b01 of Sakasegawa are 
 * used. Both procedures employ suitable two-part power functions 
 * from which samples can be obtained by inversion.               
 * If a > 1 , b > 1 (unimodal case) the patchwork rejection       
 * method b1prs of Zechner/Stadlober is utilized:                 
 * The area below the density function f(x) in its body is        
 * rearranged by certain point reflections. Within a large center 
 * interval variates are sampled efficiently by rejection from    
 * uniform hats. Rectangular immediate acceptance regions speed   
 * up the generation. The remaining tails are covered by          
 * exponential functions.                                         
 * If (a-1)(b-1) = 0  sampling is done by inversion if either a   
 * or b are not equal to one. If  a = b = 1  a uniform random     
 * variate is delivered.                                          
 * *
 * *
 * FUNCTION :   - bsprc samples a random variate from the beta    
 * distribution with parameters  a > 0, b > 0.     
 * REFERENCES : - H. Sakasegawa (1983): Stratified rejection and  
 * squeeze method for generating beta random       
 * numbers, Ann. Inst. Statist. Math. 35 B,        
 * 291-302.                                        
 * - H. Zechner, E. Stadlober (1993): Generating     
 * beta variates via patchwork rejection,          
 * Computing 50, 1-18.                             
 * *
 * SUBPROGRAMS: - drand(seed) ... (0,1)-Uniform generator with    
 * unsigned long integer *seed.                    
 * - b00(seed,a,b) ... Beta generator for a<1, b<1   
 * - b01(seed,a,b) ... Beta generator for a<1<b or   
 * b<1<a                         
 * - b1prs(seed,a,b) ... Beta generator for a>1, b>1 
 * with unsigned long integer *seed, double a, b.  
 * *</text>
      </javadoc>
    </method>
    <javadoc>
      <text>* Returns the cumulative distribution function.</text>
    </javadoc>
    <method type="double" name="pdf" startLine="372" endLine="375" />
    <javadoc>
      <text>* Sets the parameters.</text>
    </javadoc>
    <method type="void" name="setState" startLine="379" endLine="383" />
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="double" name="staticNextDouble" startLine="387" endLine="391">
      <scope startLine="388" endLine="390" />
    </method>
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="395" endLine="397" />
    <javadoc>
      <text>* Sets the uniform random number generated shared by all <b>static</b> methods.</text>
      <param>randomGenerator the new uniform random number generator to be shared.</param>
    </javadoc>
    <method type="void" name="xstaticSetRandomGenerator" startLine="402" endLine="406">
      <scope startLine="403" endLine="405" />
    </method>
    <comment>cache to speed up pdf()</comment>
    <comment>cached values shared by bXX</comment>
    <comment>cached values for b00</comment>
    <comment>chached values for b01</comment>
    <comment>chached values for b1prs</comment>
    <comment>The uniform random number generated shared by all <b>static</b> methods.</comment>
  </class>
</source>
