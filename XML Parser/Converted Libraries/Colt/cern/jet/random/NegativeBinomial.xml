<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random">
  <import name="cern.jet.random.engine.RandomEngine" />
  <import name="cern.jet.stat.Probability" />
  <class name="NegativeBinomial" extends="AbstractDiscreteDistribution" startLine="13">
    <javadoc>
      <text>* Negative Binomial distribution; See the <A HREF="http://www.statlets.com/usermanual/glossary2.htm"> math definition</A>.
 * <p>
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * <dt>
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * <p>
 * <b>Implementation:</b> High performance implementation. Compound method. 
 * <dt>
 * This is a port of <tt>nbp.c</tt> from the <A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html">C-RAND / WIN-RAND</A> library.
 * C-RAND's implementation, in turn, is based upon
 * <p>
 * J.H. Ahrens, U. Dieter (1974): Computer methods for sampling from gamma, beta, Poisson and binomial distributions, Computing 12, 223--246.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="int" name="n" />
    <declaration type="double" name="p" />
    <declaration type="Gamma" name="gamma" />
    <declaration type="Poisson" name="poisson" />
    <declaration type="NegativeBinomial" name="shared" />
    <javadoc>
      <text>* Constructs a Negative Binomial distribution.
 * Example: n=1, p=0.5.</text>
      <param>n the number of trials.</param>
      <param>p the probability of success.</param>
      <param>randomGenerator a uniform random number generator.</param>
    </javadoc>
    <method type="constructor" name="NegativeBinomial" startLine="46" endLine="51" />
    <javadoc>
      <text>* Returns the cumulative distribution function.</text>
    </javadoc>
    <method type="double" name="cdf" startLine="55" endLine="57" />
    <javadoc>
      <text>* Returns a deep copy of the receiver; the copy will produce identical sequences.
 * After this call has returned, the copy and the receiver have equal but separate state.</text>
      <return>a copy of the receiver.</return>
    </javadoc>
    <method type="Object" name="clone" startLine="64" endLine="71">
      <declaration type="NegativeBinomial" name="copy" />
    </method>
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="int" name="nextInt" startLine="75" endLine="77" />
    <javadoc>
      <text>* Returns a random number from the distribution; bypasses the internal state.</text>
    </javadoc>
    <method type="int" name="nextInt" startLine="81" endLine="110">
      <declaration type="double" name="x" />
      <declaration type="double" name="p1" />
      <declaration type="double" name="y" />
      <javadoc>
        <text>* *
 * Negative Binomial Distribution - Compound method        
 * *
 * *
 * FUNCTION:    - nbp  samples a random number from the Negative  
 * Binomial distribution with parameters r (no. of 
 * failures given) and p (probability of success)  
 * valid for  r > 0, 0 < p < 1.                    
 * If G from Gamma(r) then K  from Poiss(pG/(1-p)) 
 * is NB(r,p)--distributed.                        
 * REFERENCE:   - J.H. Ahrens, U. Dieter (1974): Computer methods 
 * for sampling from gamma, beta, Poisson and      
 * binomial distributions, Computing 12, 223--246. 
 * SUBPROGRAMS: - drand(seed) ... (0,1)-Uniform generator with    
 * unsigned long integer *seed                     
 * - Gamma(seed,a) ... Gamma generator for a > 0     
 * unsigned long *seed, double a                   
 * - Poisson(seed,a) ...Poisson generator for a > 0  
 * unsigned long *seed, double a.                  
 * *</text>
      </javadoc>
    </method>
    <javadoc>
      <text>* Returns the probability distribution function.</text>
    </javadoc>
    <method type="double" name="pdf" startLine="114" endLine="117" />
    <javadoc>
      <text>* Sets the parameters number of trials and the probability of success.</text>
      <param>n the number of trials</param>
      <param>p the probability of success.</param>
    </javadoc>
    <method type="void" name="setNandP" startLine="123" endLine="126" />
    <javadoc>
      <text>* Returns a random number from the distribution with the given parameters n and p.</text>
      <param>n the number of trials</param>
      <param>p the probability of success.</param>
    </javadoc>
    <method type="int" name="staticNextInt" startLine="132" endLine="136">
      <scope startLine="133" endLine="135" />
    </method>
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="140" endLine="142" />
    <javadoc>
      <text>* Sets the uniform random number generated shared by all <b>static</b> methods.</text>
      <param>randomGenerator the new uniform random number generator to be shared.</param>
    </javadoc>
    <method type="void" name="xstaticSetRandomGenerator" startLine="147" endLine="151">
      <scope startLine="148" endLine="150" />
    </method>
    <comment>The uniform random number generated shared by all <b>static</b> methods.</comment>
  </class>
</source>
