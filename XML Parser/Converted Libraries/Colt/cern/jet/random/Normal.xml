<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random">
  <import name="cern.jet.random.engine.RandomEngine" />
  <import name="cern.jet.stat.Probability" />
  <class name="Normal" extends="AbstractContinousDistribution" startLine="13">
    <javadoc>
      <text>* Normal (aka Gaussian) distribution; See the <A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node188.html#SECTION0001880000000000000000"> math definition</A>
 * and <A HREF="http://www.statsoft.com/textbook/glosn.html#Normal Distribution"> animated definition</A>.
 * <pre>                       
 * 1                       2
 * pdf(x) = ---------    exp( - (x-mean) / 2v ) 
 * sqrt(2pi*v)
 * x
 * -
 * 1        | |                 2
 * cdf(x) = ---------    |    exp( - (t-mean) / 2v ) dt
 * sqrt(2pi*v)| |
 * -
 * -inf.
 * </pre>
 * where <tt>v = variance = standardDeviation^2</tt>.
 * <p>
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * <dt>
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * <p>
 * <b>Implementation:</b> Polar Box-Muller transformation. See 
 * G.E.P. Box, M.E. Muller (1958): A note on the generation of random normal deviates, Annals Math. Statist. 29, 610-611.
 * <p></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="double" name="mean" />
    <declaration type="double" name="variance" />
    <declaration type="double" name="standardDeviation" />
    <declaration type="double" name="cache" />
    <declaration type="boolean" name="cacheFilled" />
    <declaration type="double" name="SQRT_INV" />
    <declaration type="Normal" name="shared" />
    <javadoc>
      <text>* Constructs a normal (gauss) distribution.
 * Example: mean=0.0, standardDeviation=1.0.</text>
    </javadoc>
    <method type="constructor" name="Normal" startLine="57" endLine="60" />
    <javadoc>
      <text>* Returns the cumulative distribution function.</text>
    </javadoc>
    <method type="double" name="cdf" startLine="64" endLine="66" />
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="double" name="nextDouble" startLine="70" endLine="72" />
    <javadoc>
      <text>* Returns a random number from the distribution; bypasses the internal state.</text>
    </javadoc>
    <method type="double" name="nextDouble" startLine="76" endLine="94">
      <scope startLine="78" endLine="81" />
      <declaration type="double" name="x" />
      <scope startLine="84" endLine="88" />
      <comment>Uses polar Box-Muller transformation.</comment>
    </method>
    <javadoc>
      <text>* Returns the probability distribution function.</text>
    </javadoc>
    <method type="double" name="pdf" startLine="98" endLine="101">
      <declaration type="double" name="diff" />
    </method>
    <javadoc>
      <text>* Sets the uniform random generator internally used.</text>
    </javadoc>
    <method type="void" name="setRandomGenerator" startLine="105" endLine="108" />
    <javadoc>
      <text>* Sets the mean and variance.</text>
    </javadoc>
    <method type="void" name="setState" startLine="112" endLine="121">
      <scope startLine="113" endLine="120" />
    </method>
    <javadoc>
      <text>* Returns a random number from the distribution with the given mean and standard deviation.</text>
    </javadoc>
    <method type="double" name="staticNextDouble" startLine="125" endLine="129">
      <scope startLine="126" endLine="128" />
    </method>
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="133" endLine="135" />
    <javadoc>
      <text>* Sets the uniform random number generated shared by all <b>static</b> methods.</text>
      <param>randomGenerator the new uniform random number generator to be shared.</param>
    </javadoc>
    <method type="void" name="xstaticSetRandomGenerator" startLine="140" endLine="144">
      <scope startLine="141" endLine="143" />
    </method>
    <comment>cache for Box-Mueller algorithm</comment>
    <comment>Box-Mueller</comment>
    <comment>performance cache</comment>
    <comment>The uniform random number generated shared by all <b>static</b> methods.</comment>
  </class>
</source>
