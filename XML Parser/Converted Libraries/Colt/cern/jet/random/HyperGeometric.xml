<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random">
  <import name="cern.jet.math.Arithmetic" />
  <import name="cern.jet.random.engine.RandomEngine" />
  <class name="HyperGeometric" extends="AbstractDiscreteDistribution" startLine="13">
    <javadoc>
      <text>* HyperGeometric distribution; See the <A HREF="http://library.advanced.org/10030/6atpdvah.htm"> math definition</A>
 * The hypergeometric distribution with parameters <tt>N</tt>, <tt>n</tt> and <tt>s</tt> is the probability distribution of the random variable X, 
 * whose value is the number of successes in a sample of <tt>n</tt> items from a population of size <tt>N</tt> that has <tt>s</tt> 'success' items and <tt>N - s</tt> 'failure' items.
 * <p>            
 * <tt>p(k) = C(s,k) * C(N-s,n-k) / C(N,n)</tt> where <tt>C(a,b) = a! / (b! * (a-b)!)</tt>.
 * <p>
 * valid for N >= 2, s,n <= N. 
 * <p>
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * <dt>
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * <p>
 * <b>Implementation:</b> High performance implementation.
 * Patchwork Rejection/Inversion method.
 * <dt>This is a port of <tt>hprsc.c</tt> from the <A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html">C-RAND / WIN-RAND</A> library.
 * C-RAND's implementation, in turn, is based upon
 * <p>
 * H. Zechner (1994): Efficient sampling from continuous and discrete unimodal distributions,
 * Doctoral Dissertation, 156 pp., Technical University Graz, Austria.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="int" name="my_N" />
    <declaration type="int" name="my_s" />
    <declaration type="int" name="my_n" />
    <declaration type="int" name="N_last" />
    <declaration type="int" name="N_Mn" />
    <declaration type="int" name="mp" />
    <declaration type="double" name="Mp" />
    <declaration type="int" name="k2" />
    <declaration type="double" name="dl" />
    <declaration type="HyperGeometric" name="shared" />
    <javadoc>
      <text>* Constructs a HyperGeometric distribution.</text>
    </javadoc>
    <method type="constructor" name="HyperGeometric" startLine="62" endLine="65" />
    <method type="double" name="fc_lnpk" startLine="66" endLine="68" />
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="int" name="hmdu" startLine="72" endLine="126">
      <declaration type="int" name="I" />
      <declaration type="double" name="p" />
      <scope startLine="77" endLine="103">
        <scope startLine="87" endLine="89" />
        <scope startLine="90" endLine="92" />
        <comment>set-up           */</comment>
        <comment>nu = np  p;                              mode, real</comment>
        <comment>if ((m = (int) nu) == nu && p == 0.5) {      mode, integer</comment>
        <comment>mp = m + 1;                            mp = m + 1</comment>
        <comment>mode probability, using the external function flogfak(k) = ln(k!)</comment>
        <comment>safety bound  -  guarantees at least 17 significant decimal digits</comment>
        <comment>b = min(n, (long int)(nu + kc'))</comment>
      </scope>
      <scope startLine="105" endLine="125">
        <scope startLine="110" endLine="118" />
        <scope startLine="121" endLine="124" />
        <comment>down- and upward search from the mode</comment>
        <comment>K  = mp - I;                                    downward search</comment>
        <comment>K  = m + I;                                     upward search</comment>
        <comment>upward search from K = 2m + 1 to K = b</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="int" name="hprs" startLine="130" endLine="269">
      <declaration type="int" name="Dk" />
      <declaration type="double" name="Mp" />
      <scope startLine="134" endLine="189">
        <comment>if (N != N_last || M != M_last || n != n_last) {   set-up</comment>
        <comment>main parameters</comment>
        <comment>approximate deviation of reflection points k2, k4 from nu - 1/2</comment>
        <comment>mode m, reflection points k2 and k4, and points k1 and k5, which</comment>
        <comment>delimit the centre region of h(x)</comment>
        <comment>k2 = ceil (nu - 1/2 - U),    k1 = 2*k2 - (m - 1 + delta_ml)</comment>
        <comment>k4 = floor(nu - 1/2 + U),    k5 = 2*k4 - (m + 1 - delta_mr)</comment>
        <comment>delta_ml = 0</comment>
        <comment>delta_mr = 1</comment>
        <comment>range width of the critical left and right centre region</comment>
        <comment>recurrence constants r(k) = p(k)/p(k-1) at k = k1, k2, k4+1, k5+1</comment>
        <comment>reciprocal values of the scale parameters of expon. tail envelopes</comment>
        <comment>expon. tail left</comment>
        <comment>expon. tail right</comment>
        <comment>hypergeom. constant, necessary for computing function values f(k)</comment>
        <comment>function values f(k) = p(k)/p(m)  at  k = k2, k4, k1, k5</comment>
        <comment>area of the two centre and the two exponential tail regions</comment>
        <comment>area of the two immediate acceptance regions between k2, k4</comment>
        <comment>immed. left</comment>
        <comment>centre left</comment>
        <comment>immed. right</comment>
        <comment>centre right</comment>
        <comment>expon. tail left</comment>
        <comment>expon. tail right</comment>
      </scope>
      <scope startLine="191" endLine="268">
        <scope startLine="194" endLine="217">
          <scope startLine="204" endLine="206" />
          <scope startLine="207" endLine="215">
            <scope startLine="209" endLine="211" />
            <scope startLine="212" endLine="214" />
          </scope>
        </scope>
        <scope startLine="218" endLine="241">
          <scope startLine="228" endLine="230" />
          <scope startLine="231" endLine="239">
            <scope startLine="233" endLine="235" />
            <scope startLine="236" endLine="238" />
          </scope>
        </scope>
        <scope startLine="242" endLine="260">
          <scope startLine="244" endLine="251">
            <scope startLine="248" endLine="250" />
          </scope>
          <scope startLine="252" endLine="259">
            <scope startLine="256" endLine="258" />
          </scope>
        </scope>
        <comment>generate uniform number U -- U(0, p6)</comment>
        <comment>case distinction corresponding to U</comment>
        <comment>centre left</comment>
        <comment>immediate acceptance region R2 = [k2, m) *[0, f2),  X = k2, ... m -1</comment>
        <comment>immediate acceptance region R1 = [k1, k2)*[0, f1),  X = k1, ... k2-1</comment>
        <comment>computation of candidate X < k2, and its counterpart V > k2</comment>
        <comment>either squeeze-acceptance of X or acceptance-rejection of V</comment>
        <comment>quick accept of</comment>
        <comment>X = k2 - Dk</comment>
        <comment>quick reject of V</comment>
        <comment>quick accept of</comment>
        <comment>V = k2 + Dk</comment>
        <comment>final accept of V</comment>
        <comment>centre right</comment>
        <comment>immediate acceptance region R3 = [m, k4+1)*[0, f4), X = m, ... k4</comment>
        <comment>immediate acceptance region R4 = [k4+1, k5+1)*[0, f5)</comment>
        <comment>computation of candidate X > k4, and its counterpart V < k4</comment>
        <comment>either squeeze-acceptance of X or acceptance-rejection of V</comment>
        <comment>quick accept of</comment>
        <comment>X = k4 + Dk</comment>
        <comment>quick reject of V</comment>
        <comment>quick accept of</comment>
        <comment>V = k4 - Dk</comment>
        <comment>final accept of V</comment>
        <comment>expon. tail left</comment>
        <comment>0 <= X <= k1 - 1</comment>
        <comment>Y -- U(0, h(x))</comment>
        <comment>quick accept of X</comment>
        <comment>expon. tail right</comment>
        <comment>k5 + 1 <= X <= n</comment>
        <comment>Y -- U(0, h(x))   /</comment>
        <comment>quick accept of X</comment>
        <comment>acceptance-rejection test of candidate X from the original area</comment>
        <comment>test, whether  Y <= f(X),    with  Y = U*h(x)  and  U -- U(0, 1)</comment>
        <comment>log f(X) = log( m! (M - m)! (n - m)! (N - M - n + m)! )</comment>
        <comment>- log( X! (M - X)! (n - X)! (N - M - n + X)! )</comment>
        <comment>by using an external function for log k!</comment>
      </scope>
      <comment>double Mp, np, p, nu, U, Y, W;        (X, Y) <-> (V, W)</comment>
    </method>
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="int" name="nextInt" startLine="273" endLine="275" />
    <javadoc>
      <text>* Returns a random number from the distribution; bypasses the internal state.</text>
    </javadoc>
    <method type="int" name="nextInt" startLine="279" endLine="281" />
    <javadoc>
      <text>* Returns a random number from the distribution; bypasses the internal state.</text>
    </javadoc>
    <method type="int" name="nextInt" startLine="285" endLine="351">
      <declaration type="int" name="Nhalf" />
      <scope startLine="334" endLine="338" />
      <scope startLine="339" endLine="343" />
      <scope startLine="345" endLine="347" />
      <scope startLine="348" endLine="350" />
      <javadoc>
        <text>* *
 * Hypergeometric Distribution - Patchwork Rejection/Inversion    
 * *
 * *
 * The basic algorithms work for parameters 1 <= n <= M <= N/2.   
 * Otherwise parameters are re-defined in the set-up step and the 
 * random number K is adapted before delivering.                  
 * For l = m-max(0,n-N+M) < 10  Inversion method hmdu is applied: 
 * The random numbers are generated via modal down-up search,     
 * starting at the mode m. The cumulative probabilities           
 * are avoided by using the technique of chop-down.               
 * For l >= 10  the Patchwork Rejection method  hprs is employed: 
 * The area below the histogram function f(x) in its              
 * body is rearranged by certain point reflections. Within a      
 * large center interval variates are sampled efficiently by      
 * rejection from uniform hats. Rectangular immediate acceptance  
 * regions speed up the generation. The remaining tails are       
 * covered by exponential functions.                              
 * *
 * *
 * FUNCTION :   - hprsc samples a random number from the          
 * Hypergeometric distribution with parameters     
 * N (number of red and black balls), M (number    
 * of red balls) and n (number of trials)          
 * valid for N >= 2, M,n <= N.                     
 * REFERENCE :  - H. Zechner (1994): Efficient sampling from      
 * continuous and discrete unimodal distributions, 
 * Doctoral Dissertation, 156 pp., Technical       
 * University Graz, Austria.                       
 * SUBPROGRAMS: - flogfak(k)  ... log(k!) with long integer k     
 * - drand(seed) ... (0,1)-Uniform generator with    
 * unsigned long integer *seed.                    
 * - hmdu(seed,N,M,n) ... Hypergeometric generator   
 * for l<10                                        
 * - hprs(seed,N,M,n) ... Hypergeometric generator   
 * for l>=10 with unsigned long integer *seed,     
 * long integer  N , M , n.                        
 * *</text>
      </javadoc>
    </method>
    <javadoc>
      <text>* Returns the probability distribution function.</text>
    </javadoc>
    <method type="double" name="pdf" startLine="355" endLine="358" />
    <javadoc>
      <text>* Sets the parameters.</text>
    </javadoc>
    <method type="void" name="setState" startLine="362" endLine="366" />
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="double" name="staticNextInt" startLine="370" endLine="374">
      <scope startLine="371" endLine="373" />
    </method>
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="378" endLine="380" />
    <javadoc>
      <text>* Sets the uniform random number generated shared by all <b>static</b> methods.</text>
      <param>randomGenerator the new uniform random number generator to be shared.</param>
    </javadoc>
    <method type="void" name="xstaticSetRandomGenerator" startLine="385" endLine="389">
      <scope startLine="386" endLine="388" />
    </method>
    <comment>cached vars shared by hmdu(...) and hprs(...)</comment>
    <comment>cached vars for hmdu(...)</comment>
    <comment>cached vars for hprs(...)</comment>
    <comment>The uniform random number generated shared by all <b>static</b> methods.</comment>
  </class>
</source>
