<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random">
  <import name="cern.jet.random.engine.RandomEngine" />
  <class name="AbstractDistribution" extends="cern.colt.PersistentObject" startLine="12">
    <implements name="cern.colt.function.DoubleFunction" />
    <implements name="cern.colt.function.IntFunction" />
    <javadoc>
      <text>* Abstract base class for all random distributions.
 * A subclass of this class need to override method <tt>nextDouble()</tt> and, in rare cases, also <tt>nextInt()</tt>.
 * <p>
 * Currently all subclasses use a uniform pseudo-random number generation engine and transform its results to the target distribution.
 * Thus, they expect such a uniform engine upon instance construction.
 * <p>{@link cern.jet.random.engine.MersenneTwister} is recommended as uniform pseudo-random number generation engine, since it is very strong and at the same time quick.{@link #makeDefaultGenerator()} will conveniently construct and return such a magic thing.
 * You can also, for example, use {@link cern.jet.random.engine.DRand}, a quicker (but much weaker) uniform random number generation engine.
 * Of course, you can also use other strong uniform random number generation engines. 
 * <p>
 * <b>Ressources on the Web:</b>
 * <dt>Check the Web version of the <A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node1.html"> CERN Data Analysis Briefbook </A>. This will clarify the definitions of most distributions.
 * <dt>Also consult the <A HREF="http://www.statsoftinc.com/textbook/stathome.html"> StatSoft Electronic Textbook</A> - the definite web book.
 * <p>
 * <b>Other useful ressources:</b>
 * <dt><A HREF="http://www.stats.gla.ac.uk/steps/glossary/probability_distributions.html"> Another site </A> and <A HREF="http://www.statlets.com/usermanual/glossary.htm"> yet another site </A>describing the definitions of several distributions.
 * <dt>You may want to check out a <A HREF="http://www.stat.berkeley.edu/users/stark/SticiGui/Text/gloss.htm"> Glossary of Statistical Terms</A>.
 * <dt>The GNU Scientific Library contains an extensive (but hardly readable) <A HREF="http://sourceware.cygnus.com/gsl/html/gsl-ref_toc.html#TOC26"> list of definition of distributions</A>.
 * <dt>Use this Web interface to <A HREF="http://www.stat.ucla.edu/calculators/cdf"> plot all sort of distributions</A>.
 * <dt>Even more ressources: <A HREF="http://www.animatedsoftware.com/statglos/statglos.htm"> Internet glossary of Statistical Terms</A>,
 * <A HREF="http://www.ruf.rice.edu/~lane/hyperstat/index.html"> a text book</A>,
 * <A HREF="http://www.stat.umn.edu/~jkuhn/courses/stat3091f/stat3091f.html"> another text book</A>.
 * <dt>Finally, a good link list <A HREF="http://www.execpc.com/~helberg/statistics.html"> Statistics on the Web</A>.
 * <p></text>
      <see>cern.jet.random.engine</see>
      <see>cern.jet.random.engine.Benchmark</see>
      <see>cern.jet.random.Benchmark</see>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="RandomEngine" name="randomGenerator" />
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="AbstractDistribution" startLine="51" endLine="51" />
    <javadoc>
      <text>* Equivalent to <tt>nextDouble()</tt>.
 * This has the effect that distributions can now be used as function objects, returning a random number upon function evaluation.</text>
    </javadoc>
    <method type="double" name="apply" startLine="56" endLine="58" />
    <javadoc>
      <text>* Equivalent to <tt>nextInt()</tt>.
 * This has the effect that distributions can now be used as function objects, returning a random number upon function evaluation.</text>
    </javadoc>
    <method type="int" name="apply" startLine="63" endLine="65" />
    <javadoc>
      <text>* Returns a deep copy of the receiver; the copy will produce identical sequences.
 * After this call has returned, the copy and the receiver have equal but separate state.</text>
      <return>a copy of the receiver.</return>
    </javadoc>
    <method type="Object" name="clone" startLine="72" endLine="76">
      <declaration type="AbstractDistribution" name="copy" />
    </method>
    <javadoc>
      <text>* Returns the used uniform random number generator;</text>
    </javadoc>
    <method type="RandomEngine" name="getRandomGenerator" startLine="80" endLine="82" />
    <javadoc>
      <text>* Constructs and returns a new uniform random number generation engine seeded with the current time.
 * Currently this is {@link cern.jet.random.engine.MersenneTwister}.</text>
    </javadoc>
    <method type="RandomEngine" name="makeDefaultGenerator" startLine="87" endLine="89" />
    <method name="nextDouble" type="double" startLine="90" endLine="93" />
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <javadoc>
      <text>* Returns a random number from the distribution; returns <tt>(int) Math.round(nextDouble())</tt>.
 * Override this method if necessary.</text>
    </javadoc>
    <method type="int" name="nextInt" startLine="98" endLine="100" />
    <javadoc>
      <text>* Sets the uniform random generator internally used.</text>
    </javadoc>
    <method type="void" name="setRandomGenerator" startLine="104" endLine="106" />
  </class>
</source>
