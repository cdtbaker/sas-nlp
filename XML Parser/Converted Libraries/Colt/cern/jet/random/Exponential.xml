<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random">
  <import name="cern.jet.random.engine.RandomEngine" />
  <class name="Exponential" extends="AbstractContinousDistribution" startLine="12">
    <javadoc>
      <text>* Exponential Distribution (aka Negative Exponential Distribution); See the <A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node78.html#SECTION000780000000000000000"> math definition</A>
 * <A HREF="http://www.statsoft.com/textbook/glose.html#Exponential Distribution"> animated definition</A>.
 * <p>
 * <tt>p(x) = lambda*exp(-x*lambda)</tt> for <tt>x &gt;= 0</tt>, <tt>lambda &gt; 0</tt>.
 * <p>
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * <dt>
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * <p></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="double" name="lambda" />
    <declaration type="Exponential" name="shared" />
    <javadoc>
      <text>* Constructs a Negative Exponential distribution.</text>
    </javadoc>
    <method type="constructor" name="Exponential" startLine="34" endLine="37" />
    <javadoc>
      <text>* Returns the cumulative distribution function.</text>
    </javadoc>
    <method type="double" name="cdf" startLine="41" endLine="44" />
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="double" name="nextDouble" startLine="48" endLine="50" />
    <javadoc>
      <text>* Returns a random number from the distribution; bypasses the internal state.</text>
    </javadoc>
    <method type="double" name="nextDouble" startLine="54" endLine="56" />
    <javadoc>
      <text>* Returns the probability distribution function.</text>
    </javadoc>
    <method type="double" name="pdf" startLine="60" endLine="63" />
    <javadoc>
      <text>* Sets the mean.</text>
    </javadoc>
    <method type="void" name="setState" startLine="67" endLine="69" />
    <javadoc>
      <text>* Returns a random number from the distribution with the given lambda.</text>
    </javadoc>
    <method type="double" name="staticNextDouble" startLine="73" endLine="77">
      <scope startLine="74" endLine="76" />
    </method>
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="81" endLine="83" />
    <javadoc>
      <text>* Sets the uniform random number generated shared by all <b>static</b> methods.</text>
      <param>randomGenerator the new uniform random number generator to be shared.</param>
    </javadoc>
    <method type="void" name="xstaticSetRandomGenerator" startLine="88" endLine="92">
      <scope startLine="89" endLine="91" />
    </method>
    <comment>The uniform random number generated shared by all <b>static</b> methods.</comment>
  </class>
</source>
