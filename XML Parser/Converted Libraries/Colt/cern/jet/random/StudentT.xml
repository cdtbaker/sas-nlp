<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random">
  <import name="cern.jet.random.engine.RandomEngine" />
  <import name="cern.jet.stat.Probability" />
  <class name="StudentT" extends="AbstractContinousDistribution" startLine="13">
    <javadoc>
      <text>* StudentT distribution (aka T-distribution); See the <A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node279.html#SECTION0002790000000000000000"> math definition</A>
 * and <A HREF="http://www.statsoft.com/textbook/gloss.html#Student's t Distribution"> animated definition</A>.
 * <p>
 * <tt>p(x) = k  *  (1+x^2/f) ^ -(f+1)/2</tt> where <tt>k = g((f+1)/2) / (sqrt(pi*f) * g(f/2))</tt> and <tt>g(a)</tt> being the gamma function and <tt>f</tt> being the degrees of freedom.
 * <p>
 * Valid parameter ranges: <tt>freedom &gt; 0</tt>.
 * <p>
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * <dt>
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * <p>
 * <b>Implementation:</b>
 * <dt>
 * Method: Adapted Polar Box-Muller transformation.
 * <dt>
 * This is a port of <A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandStudentT.html">RandStudentT</A> used in <A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep">CLHEP 1.4.0</A> (C++).
 * CLHEP's implementation, in turn, is based on <tt>tpol.c</tt> from the <A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html">C-RAND / WIN-RAND</A> library.
 * C-RAND's implementation, in turn, is based upon
 * <p>R.W. Bailey (1994): Polar generation of random variates with the t-distribution, Mathematics of Computation 62, 779-781.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="double" name="freedom" />
    <declaration type="double" name="TERM" />
    <declaration type="StudentT" name="shared" />
    <javadoc>
      <text>* Constructs a StudentT distribution.
 * Example: freedom=1.0.</text>
      <param>freedom degrees of freedom.</param>
      <throws>IllegalArgumentException if <tt>freedom &lt;= 0.0</tt>.</throws>
    </javadoc>
    <method type="constructor" name="StudentT" startLine="49" endLine="52" />
    <javadoc>
      <text>* Returns the cumulative distribution function.</text>
    </javadoc>
    <method type="double" name="cdf" startLine="56" endLine="58" />
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="double" name="nextDouble" startLine="62" endLine="64" />
    <javadoc>
      <text>* Returns a random number from the distribution; bypasses the internal state.</text>
      <param>a degrees of freedom.</param>
      <throws>IllegalArgumentException if <tt>a &lt;= 0.0</tt>.</throws>
    </javadoc>
    <method type="double" name="nextDouble" startLine="70" endLine="91">
      <declaration type="double" name="u" />
      <scope startLine="84" endLine="87" />
      <comment>The polar method of BoxMuller for generating Normal variates
 is adapted to the Student-t distribution. The two generated
 variates are not independent and the expected no. of uniforms
 per variate is 2.5464.

 REFERENCE :  - R.W. Bailey (1994): Polar generation of random
                variates with the t-distribution, Mathematics
                of Computation 62, 779-781.</comment>
    </method>
    <javadoc>
      <text>* Returns the probability distribution function.</text>
    </javadoc>
    <method type="double" name="pdf" startLine="95" endLine="97" />
    <javadoc>
      <text>* Sets the distribution parameter.</text>
      <param>freedom degrees of freedom.</param>
      <throws>IllegalArgumentException if <tt>freedom &lt;= 0.0</tt>.</throws>
    </javadoc>
    <method type="void" name="setState" startLine="103" endLine="109">
      <declaration type="double" name="val" />
    </method>
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
      <param>freedom degrees of freedom.</param>
      <throws>IllegalArgumentException if <tt>freedom &lt;= 0.0</tt>.</throws>
    </javadoc>
    <method type="double" name="staticNextDouble" startLine="115" endLine="119">
      <scope startLine="116" endLine="118" />
    </method>
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="123" endLine="125" />
    <javadoc>
      <text>* Sets the uniform random number generated shared by all <b>static</b> methods.</text>
      <param>randomGenerator the new uniform random number generator to be shared.</param>
    </javadoc>
    <method type="void" name="xstaticSetRandomGenerator" startLine="130" endLine="134">
      <scope startLine="131" endLine="133" />
    </method>
    <comment>performance cache for pdf()</comment>
    <comment>The uniform random number generated shared by all <b>static</b> methods.</comment>
  </class>
</source>
