<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random">
  <class name="Stack" startLine="11">
    <javadoc>
      <text>* Not yet commented.</text>
    </javadoc>
    <declaration type="int" name="N" />
    <declaration type="int[]" name="v" />
    <declaration type="int" name="i" />
    <javadoc>
      <text>* Constructs a new stack with the given capacity.</text>
    </javadoc>
    <method type="constructor" name="Stack" startLine="21" endLine="64">
      <comment>indicates stack is empty</comment>
      <comment>static stack_t 
new_stack(int N) {
stack_t s;
s = (stack_t )malloc(sizeof(stack_t));
s->N = N;
s->i = -1;                   indicates stack is empty
s->v = (int )malloc(sizeof(int)N);
return s;
}
static void
push_stack(stack_t s, int v)
{
s->i += 1;
if ((s->i) >= (s->N)) {
fprintf(stderr,"Cannot push stack!\n");
exit(0);                 fatal!!
}
(s->v)[s->i] = v;
}
static int pop_stack(stack_t s)
{
if ((s->i) < 0) {
fprintf(stderr,"Cannot pop stack!\n");
exit(0);
}
s->i -= 1;
return ((s->v)[s->i + 1]);
}
static inline int size_stack(const stack_t s)
{
return s->i + 1;
}
static void free_stack(stack_t s)
{
free((char )(s->v));
free((char )s);
}</comment>
    </method>
    <javadoc>
      <text>* Returns the topmost element.</text>
    </javadoc>
    <method type="int" name="pop" startLine="68" endLine="72" />
    <javadoc>
      <text>* Places the given value on top of the stack.</text>
    </javadoc>
    <method type="void" name="push" startLine="76" endLine="80" />
    <javadoc>
      <text>* Returns the number of elements contained.</text>
    </javadoc>
    <method type="int" name="size" startLine="84" endLine="86" />
    <comment>int N;                       max number of elts on stack</comment>
    <comment>int[]v;                      array of values on the stack</comment>
    <comment>int i;                       index of top of stack</comment>
  </class>
</source>
