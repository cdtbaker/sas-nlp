<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.random">
  <import name="cern.jet.math.Arithmetic" />
  <import name="cern.jet.random.engine.RandomEngine" />
  <import name="cern.jet.stat.Probability" />
  <class name="Binomial" extends="AbstractDiscreteDistribution" startLine="14">
    <javadoc>
      <text>* Binomial distribution; See the <A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node19.html#SECTION000190000000000000000"> math definition</A>
 * and <A HREF="http://www.statsoft.com/textbook/glosb.html#Binomial Distribution"> animated definition</A>.
 * <p>
 * <tt>p(x) = k * p^k * (1-p)^(n-k)</tt> with <tt>k = n! / (k! * (n-k)!)</tt>.
 * <p>
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * <dt>
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * <p>
 * <b>Implementation:</b> High performance implementation. Acceptance Rejection/Inversion method. 
 * This is a port of <A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandBinomial.html">RandBinomial</A> used in <A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep">CLHEP 1.4.0</A> (C++).
 * CLHEP's implementation is, in turn, based on 
 * <p>V. Kachitvichyanukul, B.W. Schmeiser (1988): Binomial random variate generation, Communications of the ACM 31, 216-222.</text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="int" name="n" />
    <declaration type="double" name="p" />
    <declaration type="int" name="n_last" />
    <declaration type="double" name="par" />
    <declaration type="int" name="b" />
    <declaration type="double" name="pq" />
    <declaration type="double" name="log_p" />
    <declaration type="Binomial" name="shared" />
    <javadoc>
      <text>* Constructs a binomial distribution.
 * Example: n=1, p=0.5.</text>
      <param>n the number of trials (also known as <i>sample size</i>).</param>
      <param>p the probability of success.</param>
      <param>randomGenerator a uniform random number generator.</param>
      <throws>IllegalArgumentException if <tt>n*Math.min(p,1-p) &lt;= 0.0</tt></throws>
    </javadoc>
    <method type="constructor" name="Binomial" startLine="55" endLine="58" />
    <javadoc>
      <text>* Returns the cumulative distribution function.</text>
    </javadoc>
    <method type="double" name="cdf" startLine="62" endLine="64" />
    <javadoc>
      <text>* Returns the cumulative distribution function.</text>
    </javadoc>
    <method type="double" name="cdfSlow" startLine="68" endLine="75">
      <declaration type="double" name="sum" />
    </method>
    <javadoc>
      <text>* *
 * Binomial-Distribution - Acceptance Rejection/Inversion     
 * *
 * *
 * Acceptance Rejection method combined with Inversion for        
 * generating Binomial random numbers with parameters             
 * n (number of trials) and p (probability of success).           
 * For  min(n*p,n*(1-p)) < 10  the Inversion method is applied:   
 * The random numbers are generated via sequential search,        
 * starting at the lowest index k=0. The cumulative probabilities 
 * are avoided by using the technique of chop-down.               
 * For  min(n*p,n*(1-p)) >= 10  Acceptance Rejection is used:     
 * The algorithm is based on a hat-function which is uniform in   
 * the centre region and exponential in the tails.                
 * A triangular immediate acceptance region in the centre speeds  
 * up the generation of binomial variates.                        
 * If candidate k is near the mode, f(k) is computed recursively  
 * starting at the mode m.                                        
 * The acceptance test by Stirling's formula is modified          
 * according to W. Hoermann (1992): The generation of binomial    
 * random variates, to appear in J. Statist. Comput. Simul.       
 * If  p < .5  the algorithm is applied to parameters n, p.       
 * Otherwise p is replaced by 1-p, and k is replaced by n - k.    
 * *
 * *
 * FUNCTION:    - samples a random number from the binomial       
 * distribution with parameters n and p  and is    
 * valid for  n*min(p,1-p)  >  0.                  
 * REFERENCE:   - V. Kachitvichyanukul, B.W. Schmeiser (1988):    
 * Binomial random variate generation,             
 * Communications of the ACM 31, 216-222.          
 * SUBPROGRAMS: - StirlingCorrection()                            
 * ... Correction term of the Stirling 
 * approximation for log(k!)       
 * (series in 1/k or table values  
 * for small k) with long int k    
 * - randomGenerator    ... (0,1)-Uniform engine     * 
 * *</text>
    </javadoc>
    <method type="int" name="generateBinomial" startLine="118" endLine="250">
      <declaration type="double" name="C1_3" />
      <declaration type="double" name="C5_8" />
      <declaration type="double" name="C1_6" />
      <declaration type="int" name="DMAX_KM" />
      <declaration type="int" name="bh" />
      <declaration type="double" name="f" />
      <scope startLine="128" endLine="162">
        <scope startLine="141" endLine="145" />
        <scope startLine="146" endLine="161" />
        <comment>set-up</comment>
        <comment>Check for invalid input values</comment>
        <comment>mode, integer</comment>
        <comment>Chop-down</comment>
        <comment>recurr. relat.</comment>
        <comment>variance</comment>
        <comment>i = p1 - 0.5</comment>
        <comment>limit left</comment>
        <comment>limit right</comment>
        <comment>parallelogram</comment>
        <comment>height</comment>
        <comment>probabilities</comment>
        <comment>of regions 1-4</comment>
      </scope>
      <scope startLine="164" endLine="183">
        <declaration type="double" name="pk" />
        <scope startLine="170" endLine="181">
          <scope startLine="172" endLine="176" />
          <scope startLine="177" endLine="180" />
        </scope>
        <comment>Inversion Chop-down</comment>
      </scope>
      <scope startLine="185" endLine="248">
        <scope startLine="187" endLine="190" />
        <scope startLine="191" endLine="195" />
        <scope startLine="196" endLine="200" />
        <scope startLine="201" endLine="204" />
        <scope startLine="207" endLine="222">
          <scope startLine="211" endLine="215">
            <scope startLine="212" endLine="214" />
          </scope>
          <scope startLine="216" endLine="220">
            <scope startLine="217" endLine="219" />
          </scope>
        </scope>
        <scope startLine="223" endLine="247">
          <scope startLine="230" endLine="246">
            <scope startLine="231" endLine="238" />
          </scope>
        </scope>
        <comment>triangular region</comment>
        <comment>immediate accept</comment>
        <comment>parallelogram</comment>
        <comment>left tail</comment>
        <comment>right tail</comment>
        <comment>acceptance test :  two cases, depending on |K - m|</comment>
        <comment>computation of p(K) via recurrence relationship from the mode</comment>
        <comment>f(m)</comment>
        <comment>multiply  f</comment>
        <comment>multiply  V</comment>
        <comment>acceptance test</comment>
        <comment>lower and upper squeeze tests, based on lower bounds for log p(K)</comment>
        <comment>computation of log f(K) via Stirling's formula</comment>
        <comment>final acceptance-rejection test</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns a random number from the distribution.</text>
    </javadoc>
    <method type="int" name="nextInt" startLine="254" endLine="256" />
    <javadoc>
      <text>* Returns a random number from the distribution with the given parameters n and p; bypasses the internal state.</text>
      <param>n the number of trials</param>
      <param>p the probability of success.</param>
      <throws>IllegalArgumentException if <tt>n*Math.min(p,1-p) &lt;= 0.0</tt></throws>
    </javadoc>
    <method type="int" name="nextInt" startLine="263" endLine="266" />
    <javadoc>
      <text>* Returns the probability distribution function.</text>
    </javadoc>
    <method type="double" name="pdf" startLine="270" endLine="274">
      <declaration type="int" name="r" />
    </method>
    <javadoc>
      <text>* Sets the parameters number of trials and the probability of success.</text>
      <param>n the number of trials</param>
      <param>p the probability of success.</param>
      <throws>IllegalArgumentException if <tt>n*Math.min(p,1-p) &lt;= 0.0</tt></throws>
    </javadoc>
    <method type="void" name="setNandP" startLine="281" endLine="289" />
    <javadoc>
      <text>* Returns a random number from the distribution with the given parameters n and p.</text>
      <param>n the number of trials</param>
      <param>p the probability of success.</param>
      <throws>IllegalArgumentException if <tt>n*Math.min(p,1-p) &lt;= 0.0</tt></throws>
    </javadoc>
    <method type="int" name="staticNextInt" startLine="296" endLine="300">
      <scope startLine="297" endLine="299" />
    </method>
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="304" endLine="306" />
    <javadoc>
      <text>* Sets the uniform random number generated shared by all <b>static</b> methods.</text>
      <param>randomGenerator the new uniform random number generator to be shared.</param>
    </javadoc>
    <method type="void" name="xstaticSetRandomGenerator" startLine="311" endLine="315">
      <scope startLine="312" endLine="314" />
    </method>
    <comment>cache vars for method generateBinomial(...)</comment>
    <comment>cache vars for method pdf(...)</comment>
    <comment>The uniform random number generated shared by all <b>static</b> methods.</comment>
  </class>
</source>
