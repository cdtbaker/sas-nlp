<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.stat.quantile">
  <class name="DoubleBufferSet" extends="BufferSet" startLine="11">
    <javadoc>
      <text>* A set of buffers holding <tt>double</tt> elements; internally used for computing approximate quantiles.</text>
    </javadoc>
    <declaration type="DoubleBuffer[]" name="buffers" />
    <declaration type="boolean" name="nextTriggerCalculationState" />
    <javadoc>
      <text>* Constructs a buffer set with b buffers, each having k elements</text>
      <param>b the number of buffers</param>
      <param>k the number of elements per buffer</param>
    </javadoc>
    <method type="constructor" name="DoubleBufferSet" startLine="22" endLine="25" />
    <javadoc>
      <text>* Returns an empty buffer if at least one exists.
 * Preferably returns a buffer which has already been used,
 * i.e. a buffer which has already been allocated.</text>
    </javadoc>
    <method type="DoubleBuffer" name="_getFirstEmptyBuffer" startLine="31" endLine="41">
      <declaration type="DoubleBuffer" name="emptyBuffer" />
      <scope startLine="33" endLine="38">
        <scope startLine="34" endLine="37" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns all full or partial buffers.</text>
    </javadoc>
    <method type="DoubleBuffer[]" name="_getFullOrPartialBuffers" startLine="45" endLine="62">
      <declaration type="int" name="count" />
      <scope startLine="48" endLine="50" />
      <declaration type="DoubleBuffer[]" name="collectedBuffers" />
      <declaration type="int" name="j" />
      <scope startLine="55" endLine="59">
        <scope startLine="56" endLine="58" />
      </scope>
      <comment>count buffers</comment>
      <comment>collect buffers</comment>
    </method>
    <javadoc>
      <text>* Determines all full buffers having the specified level.</text>
      <return>all full buffers having the specified level</return>
    </javadoc>
    <method type="DoubleBuffer[]" name="_getFullOrPartialBuffersWithLevel" startLine="67" endLine="84">
      <declaration type="int" name="count" />
      <scope startLine="70" endLine="72" />
      <declaration type="DoubleBuffer[]" name="collectedBuffers" />
      <declaration type="int" name="j" />
      <scope startLine="77" endLine="81">
        <scope startLine="78" endLine="80" />
      </scope>
      <comment>count buffers</comment>
      <comment>collect buffers</comment>
    </method>
    <javadoc>
      <return>The minimum level of all buffers which are full.</return>
    </javadoc>
    <method type="int" name="_getMinLevelOfFullOrPartialBuffers" startLine="88" endLine="100">
      <declaration type="int" name="b" />
      <declaration type="int" name="minLevel" />
      <declaration type="DoubleBuffer" name="buffer" />
      <scope startLine="93" endLine="98">
        <scope startLine="95" endLine="97" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the number of empty buffers.</text>
    </javadoc>
    <method type="int" name="_getNumberOfEmptyBuffers" startLine="104" endLine="111">
      <declaration type="int" name="count" />
      <scope startLine="106" endLine="108" />
    </method>
    <javadoc>
      <text>* Returns all empty buffers.</text>
    </javadoc>
    <method type="DoubleBuffer" name="_getPartialBuffer" startLine="115" endLine="120">
      <scope startLine="116" endLine="118" />
    </method>
    <javadoc>
      <return>the number of buffers</return>
    </javadoc>
    <method type="int" name="b" startLine="124" endLine="126" />
    <javadoc>
      <text>* Removes all elements from the receiver.  The receiver will
 * be empty after this call returns, and its memory requirements will be close to zero.</text>
    </javadoc>
    <method type="void" name="clear" startLine="131" endLine="133" />
    <javadoc>
      <text>* Removes all elements from the receiver.  The receiver will
 * be empty after this call returns, and its memory requirements will be close to zero.</text>
    </javadoc>
    <method type="void" name="clear" startLine="138" endLine="141" />
    <javadoc>
      <text>* Returns a deep copy of the receiver.</text>
      <return>a deep copy of the receiver.</return>
    </javadoc>
    <method type="Object" name="clone" startLine="147" endLine="155">
      <declaration type="DoubleBufferSet" name="copy" />
      <scope startLine="151" endLine="153" />
    </method>
    <javadoc>
      <text>* Collapses the specified full buffers (must not include partial buffer).</text>
      <return>a full buffer containing the collapsed values. The buffer has accumulated weight.</return>
      <param>buffers the buffers to be collapsed (all of them must be full or partially full)</param>
    </javadoc>
    <method type="DoubleBuffer" name="collapse" startLine="161" endLine="182">
      <declaration type="int" name="W" />
      <scope startLine="164" endLine="164" />
      <declaration type="int" name="k" />
      <declaration type="long[]" name="triggerPositions" />
      <scope startLine="169" endLine="169" />
      <declaration type="double[]" name="outputValues" />
      <declaration type="DoubleBuffer" name="outputBuffer" />
      <comment>determine W</comment>
      <comment>sum of all weights</comment>
      <comment>determine outputTriggerPositions</comment>
      <comment>do the main work: determine values at given positions in sorted sequence</comment>
      <comment>mark all full buffers as empty, except the first, which will contain the output</comment>
    </method>
    <javadoc>
      <text>* Returns whether the specified element is contained in the receiver.</text>
    </javadoc>
    <method type="boolean" name="contains" startLine="186" endLine="194">
      <scope startLine="187" endLine="191">
        <scope startLine="188" endLine="190" />
      </scope>
    </method>
    <javadoc>
      <text>* Applies a procedure to each element of the receiver, if any.
 * Iterates over the receiver in no particular order.</text>
      <param>procedure    the procedure to be applied. Stops iteration if the procedure returns <tt>false</tt>, otherwise continues.</param>
    </javadoc>
    <method type="boolean" name="forEach" startLine="200" endLine="207">
      <scope startLine="201" endLine="205">
        <scope startLine="202" endLine="204" />
      </scope>
    </method>
    <javadoc>
      <text>* Determines all values of the specified buffers positioned at the specified triggerPositions within the sorted sequence and fills them into outputValues.</text>
      <param>buffers the buffers to be searched (all must be full or partial)</param>
      <param>triggerPositions the positions of elements within the sorted sequence to be retrieved</param>
      <return>outputValues a list filled with the values at triggerPositions</return>
    </javadoc>
    <method type="double[]" name="getValuesAtPositions" startLine="214" endLine="308">
      <scope startLine="229" endLine="231" />
      <declaration type="int[]" name="bufferSizes" />
      <declaration type="double[][][]" name="bufferValues" />
      <declaration type="int" name="totalBuffersSize" />
      <scope startLine="237" endLine="242">
        <comment>cern.it.util.Log.println("buffer["+i+"]="+buffers[i].values);</comment>
      </scope>
      <declaration type="int" name="buffersSize" />
      <declaration type="int" name="triggerPositionsLength" />
      <declaration type="int" name="j" />
      <declaration type="int[]" name="cursors" />
      <declaration type="long" name="counter" />
      <declaration type="long" name="nextHit" />
      <declaration type="double[]" name="outputValues" />
      <scope startLine="257" endLine="264">
        <scope startLine="260" endLine="262" />
        <comment>nothing to output, because no elements have been filled (we are empty).</comment>
        <comment>return meaningless values</comment>
      </scope>
      <scope startLine="267" endLine="304">
        <declaration type="double" name="minValue" />
        <declaration type="int" name="minBufferIndex" />
        <scope startLine="276" endLine="287">
          <scope startLine="279" endLine="286">
            <declaration type="double" name="value" />
            <scope startLine="282" endLine="285" />
          </scope>
        </scope>
        <declaration type="DoubleBuffer" name="minBuffer" />
        <scope startLine="293" endLine="297" />
        <comment>System.out.println("\nj="+j);</comment>
        <comment>System.out.println("counter="+counter);</comment>
        <comment>System.out.println("nextHit="+nextHit);</comment>
        <comment>determine buffer with smallest value at cursor position.</comment>
        <comment>DoubleBuffer buffer = buffers[b];</comment>
        <comment>if (cursors[b] < buffer.length) {</comment>
        <comment>/double value = buffer.values[cursors[b]];</comment>
        <comment>trigger copies into output sequence, if necessary.</comment>
        <comment>System.out.println("adding to output="+minValue);</comment>
        <comment>that element has now been treated, move further.</comment>
        <comment>System.out.println("cursors="+cern.it.util.Arrays.toString(cursors));</comment>
        <comment>end while (j<k)</comment>
      </scope>
      <comment>if (buffers.length==0)</comment>
      <comment>{</comment>
      <comment>throw new IllegalArgumentException("Oops! buffer.length==0.");</comment>
      <comment>}</comment>
      <comment>System.out.println("triggers="+cern.it.util.Arrays.toString(positions));</comment>
      <comment>new DoubleArrayList(outputValues).fillFromToWith(0, outputValues.length-1, 0.0f);</comment>
      <comment>delte the above line, it is only for testing</comment>
      <comment>cern.it.util.Log.println("\nEntering getValuesAtPositions...");</comment>
      <comment>cern.it.util.Log.println("hitPositions="+cern.it.util.Arrays.toString(positions));</comment>
      <comment>sort buffers.</comment>
      <comment>collect some infos into fast cache; for tuning purposes only.</comment>
      <comment>prepare merge of equi-distant elements within buffers into output values</comment>
      <comment>first collect some infos into fast cache; for tuning purposes only.</comment>
      <comment>now prepare the important things.</comment>
      <comment>current position in collapsed values</comment>
      <comment>current position in each buffer; init with zeroes</comment>
      <comment>current position in sorted sequence</comment>
      <comment>next position in sorted sequence to trigger output population</comment>
      <comment>fill all output values with equi-distant elements.</comment>
      <comment>cern.it.util.Log.println("returning output="+cern.it.util.Arrays.toString(outputValues));</comment>
    </method>
    <javadoc>
      <return>the number of elements within a buffer.</return>
    </javadoc>
    <method type="int" name="k" startLine="312" endLine="314" />
    <javadoc>
      <text>* Returns the number of elements currently needed to store all contained elements.</text>
    </javadoc>
    <method type="long" name="memory" startLine="318" endLine="324">
      <declaration type="long" name="memory" />
      <scope startLine="320" endLine="322" />
    </method>
    <javadoc>
      <text>* Computes the next triggerPosition for collapse</text>
      <return>the next triggerPosition for collapse</return>
      <param>j specifies that the j-th trigger position is to be computed</param>
      <param>W the accumulated weights</param>
    </javadoc>
    <method type="long" name="nextTriggerPosition" startLine="331" endLine="349">
      <declaration type="long" name="nextTriggerPosition" />
      <scope startLine="334" endLine="336">
        <comment>is W odd?</comment>
      </scope>
      <scope startLine="338" endLine="346">
        <scope startLine="340" endLine="342" />
        <scope startLine="343" endLine="345" />
        <comment>W is even</comment>
        <comment>alternate between both possible next hit positions upon successive invocations</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns how many percent of the elements contained in the receiver are <tt>&lt;= element</tt>.
 * Does linear interpolation if the element is not contained but lies in between two contained elements.</text>
      <param>the element to search for.</param>
      <return>the percentage <tt>p</tt> of elements <tt>&lt;= element</tt> (<tt>0.0 &lt;= p &lt;=1.0)</tt>.</return>
    </javadoc>
    <method type="double" name="phi" startLine="357" endLine="366">
      <declaration type="double" name="elementsLessThanOrEqualToElement" />
      <scope startLine="359" endLine="363">
        <scope startLine="360" endLine="362" />
      </scope>
    </method>
    <javadoc>
      <return>a String representation of the receiver</return>
    </javadoc>
    <method type="String" name="toString" startLine="370" endLine="379">
      <declaration type="StringBuffer" name="buf" />
      <scope startLine="372" endLine="377">
        <scope startLine="373" endLine="376" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the number of elements in all buffers.</text>
    </javadoc>
    <method type="long" name="totalSize" startLine="383" endLine="391">
      <declaration type="DoubleBuffer[]" name="fullBuffers" />
      <declaration type="long" name="totalSize" />
      <scope startLine="386" endLine="388" />
    </method>
    <comment>tmp var only</comment>
  </class>
</source>
