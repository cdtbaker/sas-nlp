<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.stat.quantile">
  <import name="cern.colt.Timer" />
  <import name="cern.colt.list.DoubleArrayList" />
  <import name="cern.colt.list.IntArrayList" />
  <class name="QuantileFinderTest" startLine="14">
    <javadoc>
      <text>* A class holding test cases for exact and approximate quantile finders.</text>
    </javadoc>
    <javadoc>
      <text>* Finds the first and last indexes of a specific element within a sorted list.</text>
      <return>int[]</return>
      <param>list cern.colt.list.DoubleArrayList</param>
      <param>element the element to search for</param>
    </javadoc>
    <method type="IntArrayList" name="binaryMultiSearch" startLine="24" endLine="37">
      <declaration type="int" name="index" />
      <declaration type="int" name="from" />
      <declaration type="int" name="to" />
      <comment>not found</comment>
    </method>
    <javadoc>
      <text>* Observed epsilon</text>
    </javadoc>
    <method type="double" name="epsilon" startLine="41" endLine="47">
      <declaration type="double" name="s" />
      <comment>System.out.println("\n");</comment>
      <comment>System.out.println("s="+size+", rank="+rank+", phi="+phi+", eps="+Math.abs((rank)/s - phi));</comment>
      <comment>System.out.println("\n");</comment>
    </method>
    <javadoc>
      <text>* Observed epsilon</text>
    </javadoc>
    <method type="double" name="epsilon" startLine="51" endLine="54">
      <declaration type="double" name="rank" />
    </method>
    <javadoc>
      <text>* Observed epsilon</text>
    </javadoc>
    <method type="double" name="epsilon" startLine="58" endLine="61">
      <declaration type="double[]" name="element" />
    </method>
    <method type="void" name="main" startLine="62" endLine="66">
      <comment>testQuantileCalculation(args);</comment>
      <comment>testCollapse();</comment>
    </method>
    <javadoc>
      <text>* This method was created in VisualAge.</text>
      <return>double[]</return>
      <param>values cern.it.hepodbms.primitivearray.DoubleArrayList</param>
      <param>phis double[]</param>
    </javadoc>
    <method type="double" name="observedEpsilonAtPhi" startLine="73" endLine="94">
      <declaration type="int" name="N" />
      <declaration type="int" name="exactRank" />
      <declaration type="double[]" name="approxElement" />
      <declaration type="IntArrayList" name="approxRanks" />
      <declaration type="int" name="from" />
      <declaration type="int" name="to" />
      <declaration type="int" name="distance" />
      <scope startLine="87" endLine="90" />
      <declaration type="double" name="epsilon" />
      <comment>System.out.println("exactRank="+exactRank);</comment>
      <comment>just to ensure exactFinder is sorted</comment>
      <comment>System.out.println("approxElem="+approxElement);</comment>
    </method>
    <javadoc>
      <text>* This method was created in VisualAge.</text>
      <return>double[]</return>
      <param>values cern.it.hepodbms.primitivearray.DoubleArrayList</param>
      <param>phis double[]</param>
    </javadoc>
    <method type="DoubleArrayList" name="observedEpsilonsAtPhis" startLine="101" endLine="110">
      <declaration type="DoubleArrayList" name="epsilons" />
      <scope startLine="104" endLine="108">
        <declaration type="double" name="epsilon" />
      </scope>
    </method>
    <javadoc>
      <text>* Not yet commented.</text>
    </javadoc>
    <method type="void" name="test" startLine="114" endLine="154">
      <declaration type="String[]" name="args" />
      <declaration type="String" name="size" />
      <declaration type="String" name="b" />
      <declaration type="String" name="k" />
      <declaration type="String" name="enableLogging" />
      <declaration type="String" name="chunks" />
      <declaration type="String" name="computeExactQuantilesAlso" />
      <declaration type="String" name="doShuffle" />
      <declaration type="String" name="epsilon" />
      <declaration type="String" name="delta" />
      <declaration type="String" name="quantiles" />
      <declaration type="String" name="max_N" />
      <comment>String b="5";</comment>
      <comment>String delta = "0.0001";</comment>
    </method>
    <javadoc>
      <text>* This method was created in VisualAge.</text>
    </javadoc>
    <method type="void" name="testBestBandKCalculation" startLine="158" endLine="255">
      <declaration type="int[]" name="quantiles" />
      <declaration type="long[]" name="sizes" />
      <declaration type="double[]" name="deltas" />
      <declaration type="double[]" name="epsilons" />
      <declaration type="Timer" name="timer" />
      <scope startLine="186" endLine="252">
        <declaration type="int" name="p" />
        <scope startLine="190" endLine="251">
          <declaration type="long" name="N" />
          <scope startLine="194" endLine="250">
            <declaration type="double" name="epsilon" />
            <scope startLine="198" endLine="249">
              <declaration type="double" name="delta" />
              <scope startLine="200" endLine="248">
                <declaration type="boolean" name="known_N" />
                <declaration type="DoubleQuantileFinder" name="finder" />
                <declaration type="String" name="knownStr" />
                <declaration type="long" name="mem" />
              </scope>
            </scope>
          </scope>
        </scope>
        <comment>System.out.println(finder.getClass().getName());</comment>
        <comment>double[] returnSamplingRate = new double[1];
long[] result;
if (known_N) {
result = QuantileFinderFactory.known_N_compute_B_and_K(N, epsilon, delta, p, returnSamplingRate);
}
else {
result = QuantileFinderFactory.unknown_N_compute_B_and_K(epsilon, delta, p);
long b1 = result[0];
long k1 = result[1];

if (N>=0) {
long[] resultKnown = QuantileFinderFactory.known_N_compute_B_and_K(N, epsilon, delta, p, returnSamplingRate);
long b2 = resultKnown[0];
long k2 = resultKnown[1];

if (b2  k2 < b1  k1) {  the KnownFinder is smaller
result = resultKnown;
}
}
}


long b = result[0];
long k = result[1];</comment>
        <comment>else if (mem==0 && !known_N && N<0) mem = Long.MAX_VALUE;  actually infinity</comment>
        <comment>else if (mem==0 && !known_N && N>=0) mem = N;</comment>
        <comment>System.out.print("         (e,d,N,p)=("+epsilon+","+delta+","+N+","+p+") --> ");</comment>
        <comment>System.out.print("(mem,b,k,memF");</comment>
        <comment>if (known_N) System.out.print(",sampling");</comment>
        <comment>System.out.print(")=("+(Math.round(b*k/1000.0))+","+b+","+k+", "+Math.round(b*k*8/1024.0/1024.0));</comment>
        <comment>System.out.print(")=("+b*k/1000.0+","+b+","+k+", "+b*k*8/1024.0/1024.0+", "+Math.round(b*k*8/1024.0/1024.0));</comment>
        <comment>if (known_N) System.out.print(","+returnSamplingRate[0]);</comment>
      </scope>
      <comment>boolean known_N;</comment>
      <comment>if (args==null) known_N = false;</comment>
      <comment>else known_N = new Boolean(args[0]).booleanValue();</comment>
      <comment>int[] quantiles = {1,100,10000};</comment>
      <comment>double[] deltas = {0.0, 0.001, 0.00001, 0.000001};</comment>
      <comment>double[] epsilons = {0.0, 0.01, 0.001, 0.0001, 0.00001};</comment>
      <comment>if (! known_N) sizes = new long[] {0};</comment>
      <comment>if (known_N)</comment>
      <comment>System.out.println("Computing b's and k's for KNOWN N");</comment>
      <comment>else</comment>
      <comment>System.out.println("Computing b's and k's for UNKNOWN N");</comment>
    </method>
    <javadoc>
      <text>* This method was created in VisualAge.</text>
    </javadoc>
    <method type="void" name="testLocalVarDeclarationSpeed" startLine="259" endLine="291">
      <declaration type="Timer" name="timer" />
      <declaration type="DoubleBuffer" name="buffer" />
      <declaration type="int" name="val" />
      <declaration type="double" name="f" />
      <declaration type="int" name="j" />
      <scope startLine="280" endLine="286">
        <scope startLine="281" endLine="285" />
      </scope>
      <comment>Timer timer = new Timer().start();
for (int i=0; i<size; i++) {
for (int j=0; j<size; j++) {
DoubleBuffer buffer=null;
int val=10;
double f=1.0f;
}
}
System.out.println(timer.stop());</comment>
    </method>
    <javadoc />
    <method type="void" name="testQuantileCalculation" startLine="294" endLine="431">
      <declaration type="int" name="size" />
      <declaration type="int" name="b" />
      <declaration type="int" name="k" />
      <declaration type="int" name="chunks" />
      <declaration type="boolean" name="computeExactQuantilesAlso" />
      <declaration type="boolean" name="doShuffle" />
      <declaration type="double" name="epsilon" />
      <declaration type="double" name="delta" />
      <declaration type="int" name="quantiles" />
      <declaration type="long" name="max_N" />
      <declaration type="double[]" name="phis" />
      <declaration type="Timer" name="timer" />
      <declaration type="Timer" name="timer2" />
      <declaration type="DoubleQuantileFinder" name="approxFinder" />
      <declaration type="DoubleQuantileFinder" name="exactFinder" />
      <declaration type="DoubleArrayList" name="list" />
      <scope startLine="338" endLine="368">
        <declaration type="int" name="d" />
        <scope startLine="342" endLine="344" />
        <scope startLine="350" endLine="355">
          <declaration type="Timer" name="timer3" />
        </scope>
        <scope startLine="364" endLine="366" />
        <comment>System.out.println("unshuffled="+list);</comment>
        <comment>System.out.println("shuffled="+list);</comment>
        <comment>list.sort();</comment>
        <comment>System.out.println("sorted="+list);</comment>
      </scope>
      <declaration type="DoubleArrayList" name="approxQuantiles" />
      <scope startLine="392" endLine="430">
        <declaration type="DoubleArrayList" name="exactQuantiles" />
        <declaration type="DoubleArrayList" name="observedEpsilons" />
        <declaration type="double" name="element" />
        <comment>exactFinder.close();</comment>
        <comment>double[] errors1 = errors1(exactQuantiles.elements(), approxQuantiles.elements());</comment>
        <comment>System.out.println("Error1="+new DoubleArrayList(errors1));</comment>
        <comment>final DoubleArrayList buffer = new DoubleArrayList((int)exactFinder.size());
exactFinder.forEach(
new cern.colt.function.DoubleFunction() {
public void apply(double element) {
buffer.add(element);
}
}
);</comment>
      </scope>
      <comment>cern.it.util.Log.enableLogging(args[3].equals("log"));</comment>
      <comment>int quantiles = phis.length;</comment>
      <comment>new UnknownApproximateDoubleQuantileFinder(b,k);</comment>
      <comment>approxFinder = new ApproximateDoubleQuantileFinder(b,k);</comment>
      <comment>double[] returnSamplingRate = new double[1];
long[] result = ApproximateQuantileFinder.computeBestBandK(sizechunks, epsilon, delta, quantiles, returnSamplingRate);
approxFinder = new ApproximateQuantileFinder((int) result[0], (int) result[1]);
System.out.println("epsilon="+epsilon);
System.out.println("delta="+delta);
System.out.println("samplingRate="+returnSamplingRate[0]);</comment>
      <comment>System.out.println("free="+Runtime.getRuntime().freeMemory());</comment>
      <comment>System.out.println("total="+Runtime.getRuntime().totalMemory());</comment>
      <comment>approxFinder.close();</comment>
      <comment>System.out.println("MaxLevel of full buffers="+maxLevelOfFullBuffers(approxFinder.bufferSet));</comment>
      <comment>System.out.println("total buffers filled="+ approxFinder.totalBuffersFilled);</comment>
      <comment>System.out.println("free="+Runtime.getRuntime().freeMemory());</comment>
      <comment>System.out.println("total="+Runtime.getRuntime().totalMemory());</comment>
    </method>
    <javadoc>
      <text>* Not yet commented.</text>
    </javadoc>
    <method type="void" name="testRank" startLine="435" endLine="438">
      <declaration type="DoubleArrayList[]" name="list" />
      <comment>System.out.println(rankOfWithin(5.0f, list));</comment>
    </method>
  </class>
</source>
