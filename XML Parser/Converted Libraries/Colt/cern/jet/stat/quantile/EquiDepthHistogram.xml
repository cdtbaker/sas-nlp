<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.stat.quantile">
  <class name="EquiDepthHistogram" extends="cern.colt.PersistentObject" startLine="11">
    <javadoc>
      <text>* Read-only equi-depth histogram for selectivity estimation.
 * Assume you have collected statistics over a data set, among them a one-dimensional equi-depth histogram (quantiles).
 * Then an applications or DBMS might want to estimate the <i>selectivity</i> of some range query <tt>[from,to]</tt>, i.e. the percentage of data set elements contained in the query range.
 * This class does not collect equi-depth histograms but only space efficiently stores already produced histograms and provides operations for selectivity estimation.
 * Uses linear interpolation.
 * <p>
 * This class stores a list <tt>l</tt> of <tt>float</tt> values for which holds:
 * <li>Let <tt>v</tt> be a list of values (sorted ascending) an equi-depth histogram has been computed over.</li>
 * <li>Let <tt>s=l.length</tt>.</li>
 * <li>Let <tt>p=(0, 1/s-1), 2/s-1,..., s-1/s-1=1.0)</tt> be a list of the <tt>s</tt> percentages.</li>
 * <li>Then for each <tt>i=0..s-1: l[i] = e : v.contains(e) && v[0],..., v[p[i]*v.length] &lt;= e</tt>.</li>
 * <li>(In particular: <tt>l[0]=min(v)=v[0]</tt> and <tt>l[s-1]=max(v)=v[s-1]</tt>.)</li></text>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>1.0, 09/24/99</version>
    </javadoc>
    <declaration type="float[]" name="binBoundaries" />
    <javadoc>
      <text>* Constructs an equi-depth histogram with the given quantile elements.
 * Quantile elements must be sorted ascending and have the form specified in the class documentation.</text>
    </javadoc>
    <method type="constructor" name="EquiDepthHistogram" startLine="34" endLine="36" />
    <javadoc>
      <text>* Returns the bin index of the given element.
 * In other words, returns a handle to the range the element falls into.</text>
      <param>element the element to search for.</param>
      <throws>java.lang.IllegalArgumentException if the element is not contained in any bin.</throws>
    </javadoc>
    <method type="int" name="binOfElement" startLine="44" endLine="59">
      <declaration type="int" name="index" />
      <scope startLine="46" endLine="49">
        <comment>element found.</comment>
        <comment>last bin is a closed interval.</comment>
      </scope>
      <scope startLine="50" endLine="57">
        <scope startLine="53" endLine="55" />
        <comment>element not found.</comment>
        <comment>index = -index-1; now index is the insertion point.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the number of bins. In other words, returns the number of subdomains partitioning the entire value domain.</text>
    </javadoc>
    <method type="int" name="bins" startLine="63" endLine="65" />
    <javadoc>
      <text>* Returns the end of the range associated with the given bin.</text>
      <throws>ArrayIndexOutOfBoundsException if <tt>binIndex &lt; 0 || binIndex &gt;= bins()</tt>.</throws>
    </javadoc>
    <method type="float" name="endOfBin" startLine="70" endLine="72" />
    <javadoc>
      <text>* Returns the percentage of elements in the range (from,to]. Does linear interpolation.</text>
      <param>from the start point (exclusive).</param>
      <param>to the end point (inclusive).</param>
      <returns>a number in the closed interval <tt>[0.0,1.0]</tt>.</returns>
    </javadoc>
    <method type="double" name="percentFromTo" startLine="79" endLine="81" />
    <javadoc>
      <text>* Returns how many percent of the elements contained in the receiver are <tt>&lt;= element</tt>.
 * Does linear interpolation.</text>
      <param>the element to search for.</param>
      <returns>a number in the closed interval <tt>[0.0,1.0]</tt>.</returns>
    </javadoc>
    <method type="double" name="phi" startLine="89" endLine="107">
      <declaration type="int" name="size" />
      <declaration type="double" name="binWidth" />
      <declaration type="int" name="index" />
      <scope startLine="97" endLine="99">
        <comment>found</comment>
      </scope>
      <declaration type="int" name="insertionPoint" />
      <declaration type="double" name="from" />
      <declaration type="double" name="to" />
      <declaration type="double" name="p" />
      <comment>int index = new FloatArrayList(binBoundaries).binarySearch(element);</comment>
      <comment>do linear interpolation</comment>
    </method>
    <javadoc>
      <deprecated>Deprecated.
 * Returns the number of bin boundaries.</deprecated>
    </javadoc>
    <method type="int" name="size" startLine="113" endLine="115" />
    <javadoc>
      <text>* Returns the start of the range associated with the given bin.</text>
      <throws>ArrayIndexOutOfBoundsException if <tt>binIndex &lt; 0 || binIndex &gt;= bins()</tt>.</throws>
    </javadoc>
    <method type="float" name="startOfBin" startLine="120" endLine="122" />
    <javadoc>
      <text>* Not yet commented.</text>
    </javadoc>
    <method type="void" name="test" startLine="126" endLine="131">
      <declaration type="float[]" name="quantileElements" />
      <declaration type="EquiDepthHistogram" name="histo" />
    </method>
  </class>
</source>
