<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.stat.quantile">
  <import name="cern.colt.list.DoubleArrayList" />
  <class name="DoubleBuffer" extends="Buffer" startLine="12">
    <javadoc>
      <text>* A buffer holding <tt>double</tt> elements; internally used for computing approximate quantiles.</text>
    </javadoc>
    <declaration type="DoubleArrayList" name="values" />
    <declaration type="boolean" name="isSorted" />
    <javadoc>
      <text>* This method was created in VisualAge.</text>
      <param>k int</param>
    </javadoc>
    <method type="constructor" name="DoubleBuffer" startLine="22" endLine="26" />
    <javadoc>
      <text>* Adds a value to the receiver.</text>
    </javadoc>
    <method type="void" name="add" startLine="30" endLine="34">
      <comment>lazy buffer allocation can safe memory.</comment>
    </method>
    <javadoc>
      <text>* Adds a value to the receiver.</text>
    </javadoc>
    <method type="void" name="addAllOfFromTo" startLine="38" endLine="42">
      <comment>lazy buffer allocation can safe memory.</comment>
    </method>
    <javadoc>
      <text>* Allocates the receiver.</text>
    </javadoc>
    <method type="void" name="allocate" startLine="46" endLine="49" />
    <javadoc>
      <text>* Clears the receiver.</text>
    </javadoc>
    <method type="void" name="clear" startLine="53" endLine="55" />
    <javadoc>
      <text>* Returns a deep copy of the receiver.</text>
      <return>a deep copy of the receiver.</return>
    </javadoc>
    <method type="Object" name="clone" startLine="61" endLine="65">
      <declaration type="DoubleBuffer" name="copy" />
    </method>
    <javadoc>
      <text>* Returns whether the specified element is contained in the receiver.</text>
    </javadoc>
    <method type="boolean" name="contains" startLine="69" endLine="72" />
    <javadoc>
      <text>* Returns whether the receiver is empty.</text>
    </javadoc>
    <method type="boolean" name="isEmpty" startLine="76" endLine="78" />
    <javadoc>
      <text>* Returns whether the receiver is empty.</text>
    </javadoc>
    <method type="boolean" name="isFull" startLine="82" endLine="84" />
    <javadoc>
      <text>* Returns the number of elements currently needed to store all contained elements.
 * This number usually differs from the results of method <tt>size()</tt>, according to the underlying algorithm.</text>
    </javadoc>
    <method type="int" name="memory" startLine="89" endLine="91" />
    <javadoc>
      <text>* Returns the rank of a given element within the sorted sequence of the receiver.
 * A rank is the number of elements <= element.
 * Ranks are of the form {1,2,...size()}.
 * If no element is <= element, then the rank is zero.
 * If the element lies in between two contained elements, then uses linear interpolation.</text>
      <return>the rank of the element.</return>
      <param>list cern.colt.list.DoubleArrayList</param>
      <param>element the element to search for</param>
    </javadoc>
    <method type="double" name="rank" startLine="102" endLine="105" />
    <javadoc>
      <text>* Returns the number of elements contained in the receiver.</text>
    </javadoc>
    <method type="int" name="size" startLine="109" endLine="111" />
    <javadoc>
      <text>* Sorts the receiver.</text>
    </javadoc>
    <method type="void" name="sort" startLine="115" endLine="123">
      <scope startLine="116" endLine="122">
        <comment>IMPORTANT: TO DO : replace mergeSort with quickSort!</comment>
        <comment>currently it is mergeSort only for debugging purposes (JDK 1.2 can't be imported into VisualAge).</comment>
        <comment>values.mergeSort();</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns a String representation of the receiver.</text>
    </javadoc>
    <method type="String" name="toString" startLine="127" endLine="133">
      <comment>", v=" + values.toString();</comment>
    </method>
  </class>
</source>
