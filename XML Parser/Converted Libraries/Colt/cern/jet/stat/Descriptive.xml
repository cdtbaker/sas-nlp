<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.stat">
  <import name="cern.colt.list.DoubleArrayList" />
  <import name="cern.colt.list.IntArrayList" />
  <class name="Descriptive" extends="Object" startLine="13">
    <javadoc>
      <text>* Basic descriptive statistics.</text>
      <author>peter.gedeck@pharma.Novartis.com</author>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>0.91, 08-Dec-99</version>
    </javadoc>
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="Descriptive" startLine="24" endLine="24" />
    <javadoc>
      <text>* Returns the auto-correlation of a data sequence.</text>
    </javadoc>
    <method type="double" name="autoCorrelation" startLine="28" endLine="38">
      <declaration type="int" name="N" />
      <declaration type="double[]" name="elements" />
      <declaration type="double" name="run" />
    </method>
    <javadoc>
      <text>* Checks if the given range is within the contained array's bounds.</text>
      <throws>IndexOutOfBoundsException if <tt>to!=from-1 || from&lt;0 || from&gt;to || to&gt;=size()</tt>.</throws>
    </javadoc>
    <method type="void" name="checkRangeFromTo" startLine="43" endLine="47" />
    <javadoc>
      <text>* Returns the correlation of two data sequences.
 * That is <tt>covariance(data1,data2)/(standardDev1*standardDev2)</tt>.</text>
    </javadoc>
    <method type="double" name="correlation" startLine="52" endLine="54" />
    <javadoc>
      <text>* Returns the covariance of two data sequences, which is 
 * <tt>cov(x,y) = (1/(size()-1)) * Sum((x[i]-mean(x)) * (y[i]-mean(y)))</tt>.
 * See the <A HREF="http://www.cquest.utoronto.ca/geog/ggr270y/notes/not05efg.html"> math definition</A>.</text>
    </javadoc>
    <method type="double" name="covariance" startLine="60" endLine="76">
      <declaration type="int" name="size" />
      <declaration type="double[]" name="elements1" />
      <declaration type="double[]" name="elements2" />
      <declaration type="double" name="sumx" />
      <scope startLine="67" endLine="74">
        <declaration type="double" name="x" />
        <declaration type="double" name="y" />
        <comment>Exercise for the reader: Why does this give us the right answer?</comment>
      </scope>
    </method>
    <method type="double" name="covariance2" startLine="81" endLine="94">
      <declaration type="int" name="size" />
      <declaration type="double" name="mean1" />
      <declaration type="double" name="mean2" />
      <declaration type="double" name="covariance" />
      <scope startLine="86" endLine="91">
        <declaration type="double" name="x" />
        <declaration type="double" name="y" />
      </scope>
    </method>
    <javadoc>
      <text>* Durbin-Watson computation.</text>
    </javadoc>
    <method type="double" name="durbinWatson" startLine="100" endLine="115">
      <declaration type="int" name="size" />
      <declaration type="double[]" name="elements" />
      <declaration type="double" name="run" />
      <declaration type="double" name="run_sq" />
      <scope startLine="108" endLine="112">
        <declaration type="double" name="x" />
      </scope>
    </method>
    <javadoc>
      <text>* Computes the frequency (number of occurances, count) of each distinct value in the given sorted data.
 * After this call returns both <tt>distinctValues</tt> and <tt>frequencies</tt> have a new size (which is equal for both), which is the number of distinct values in the sorted data.
 * <p>
 * Distinct values are filled into <tt>distinctValues</tt>, starting at index 0.
 * The frequency of each distinct value is filled into <tt>frequencies</tt>, starting at index 0.
 * As a result, the smallest distinct value (and its frequency) can be found at index 0, the second smallest distinct value (and its frequency) at index 1, ..., the largest distinct value (and its frequency) at index <tt>distinctValues.size()-1</tt>.
 * <b>Example:</b>
 * <br>
 * <tt>elements = (5,6,6,7,8,8) --> distinctValues = (5,6,7,8), frequencies = (1,2,1,2)</tt></text>
      <param>sortedData the data; must be sorted ascending.</param>
      <param>distinctValues a list to be filled with the distinct values; can have any size.</param>
      <param>frequencies      a list to be filled with the frequencies; can have any size; set this parameter to <tt>null</tt> to ignore it.</param>
    </javadoc>
    <method type="void" name="frequencies" startLine="132" endLine="151">
      <declaration type="double[]" name="sortedElements" />
      <declaration type="int" name="size" />
      <declaration type="int" name="i" />
      <scope startLine="140" endLine="150">
        <declaration type="double" name="element" />
        <declaration type="int" name="cursor" />
        <declaration type="int" name="runLength" />
        <comment>determine run length (number of equal elements)</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the geometric mean of a data sequence.
 * Note that for a geometric mean to be meaningful, the minimum of the data sequence must not be less or equal to zero.
 * <br>
 * The geometric mean is given by <tt>pow( Product( data[i] ), 1/size)</tt>
 * which is equivalent to <tt>Math.exp( Sum( Log(data[i]) ) / size)</tt>.</text>
    </javadoc>
    <method type="double" name="geometricMean" startLine="159" endLine="164">
      <comment>this version would easily results in overflows</comment>
      <comment>return Math.pow(product, 1/size);</comment>
    </method>
    <javadoc>
      <text>* Returns the geometric mean of a data sequence.
 * Note that for a geometric mean to be meaningful, the minimum of the data sequence must not be less or equal to zero.
 * <br>
 * The geometric mean is given by <tt>pow( Product( data[i] ), 1/data.size())</tt>.
 * This method tries to avoid overflows at the expense of an equivalent but somewhat slow definition:
 * <tt>geo = Math.exp( Sum( Log(data[i]) ) / data.size())</tt>.</text>
    </javadoc>
    <method type="double" name="geometricMean" startLine="173" endLine="175" />
    <javadoc>
      <text>* Returns the harmonic mean of a data sequence.</text>
      <param>size the number of elements in the data sequence.</param>
      <param>sumOfInversions <tt>Sum( 1.0 / data[i])</tt>.</param>
    </javadoc>
    <method type="double" name="harmonicMean" startLine="182" endLine="184" />
    <javadoc>
      <text>* Incrementally maintains and updates minimum, maximum, sum and sum of squares of a data sequence.
 * Assume we have already recorded some data sequence elements 
 * and know their minimum, maximum, sum and sum of squares.
 * Assume further, we are to record some more elements 
 * and to derive updated values of minimum, maximum, sum and sum of squares.
 * <p>
 * This method computes those updated values without needing to know the already recorded elements.
 * This is interesting for interactive online monitoring and/or applications that cannot keep the entire huge data sequence in memory.
 * <p>
 * <br>Definition of sumOfSquares: <tt>sumOfSquares(n) = Sum ( data[i] * data[i] )</tt>.</text>
      <param>data the additional elements to be incorporated into min, max, etc.</param>
      <param>from the index of the first element within <tt>data</tt> to consider.</param>
      <param>to the index of the last element within <tt>data</tt> to consider.
 * The method incorporates elements <tt>data[from], ..., data[to]</tt>.</param>
      <param>inOut the old values in the following format:
 * <ul>
 * <li><tt>inOut[0]</tt> is the old minimum.
 * <li><tt>inOut[1]</tt> is the old maximum.
 * <li><tt>inOut[2]</tt> is the old sum.
 * <li><tt>inOut[3]</tt> is the old sum of squares.
 * </ul>
 * If no data sequence elements have so far been recorded set the values as follows 
 * <ul>
 * <li><tt>inOut[0] = Double.POSITIVE_INFINITY</tt> as the old minimum.
 * <li><tt>inOut[1] = Double.NEGATIVE_INFINITY</tt> as the old maximum.
 * <li><tt>inOut[2] = 0.0</tt> as the old sum.
 * <li><tt>inOut[3] = 0.0</tt> as the old sum of squares.
 * </ul></param>
      <return>the updated values filled into the <tt>inOut</tt> array.</return>
    </javadoc>
    <method type="void" name="incrementalUpdate" startLine="220" endLine="262">
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
      <declaration type="double" name="sum" />
      <declaration type="double" name="sumSquares" />
      <declaration type="double[]" name="elements" />
      <scope startLine="231" endLine="252">
        <declaration type="double" name="element" />
        <comment>double oldDeviation = element - mean;
mean += oldDeviation  (N+1);
sumSquaredDeviations += (element-mean)oldDeviation;  cool, huh?</comment>
        <comment>double oldMean = mean;
mean += (element - mean)(N+1);
if (N > 0) {
sumSquaredDeviations += (element-mean)(element-oldMean);  cool, huh?
}</comment>
      </scope>
      <comment>read current values</comment>
      <comment>store new values</comment>
      <comment>At this point of return the following postcondition holds:</comment>
      <comment>data.size()-from elements have been consumed by this call.</comment>
    </method>
    <javadoc>
      <text>* Incrementally maintains and updates various sums of powers of the form <tt>Sum(data[i]<sup>k</sup>)</tt>.
 * Assume we have already recorded some data sequence elements <tt>data[i]</tt>
 * and know the values of <tt>Sum(data[i]<sup>from</sup>), Sum(data[i]<sup>from+1</sup>), ..., Sum(data[i]<sup>to</sup>)</tt>.
 * Assume further, we are to record some more elements 
 * and to derive updated values of these sums.
 * <p>
 * This method computes those updated values without needing to know the already recorded elements.
 * This is interesting for interactive online monitoring and/or applications that cannot keep the entire huge data sequence in memory.
 * For example, the incremental computation of moments is based upon such sums of powers:
 * <p>
 * The moment of <tt>k</tt>-th order with constant <tt>c</tt> of a data sequence,
 * is given by <tt>Sum( (data[i]-c)<sup>k</sup> ) / data.size()</tt>.
 * It can incrementally be computed by using the equivalent formula
 * <p>
 * <tt>moment(k,c) = m(k,c) / data.size()</tt> where
 * <br><tt>m(k,c) = Sum( -1<sup>i</sup> * b(k,i) * c<sup>i</sup> * sumOfPowers(k-i))</tt> for <tt>i = 0 .. k</tt> and
 * <br><tt>b(k,i) = </tt>{@link cern.jet.math.Arithmetic#binomial(long,long) binomial(k,i)} and
 * <br><tt>sumOfPowers(k) = Sum( data[i]<sup>k</sup> )</tt>.
 * <p></text>
      <param>data the additional elements to be incorporated into min, max, etc.</param>
      <param>from the index of the first element within <tt>data</tt> to consider.</param>
      <param>to the index of the last element within <tt>data</tt> to consider.
 * The method incorporates elements <tt>data[from], ..., data[to]</tt>.</param>
      <param>inOut the old values of the sums in the following format:
 * <ul>
 * <li><tt>sumOfPowers[0]</tt> is the old <tt>Sum(data[i]<sup>fromSumIndex</sup>)</tt>.
 * <li><tt>sumOfPowers[1]</tt> is the old <tt>Sum(data[i]<sup>fromSumIndex+1</sup>)</tt>.
 * <li>...
 * <li><tt>sumOfPowers[toSumIndex-fromSumIndex]</tt> is the old <tt>Sum(data[i]<sup>toSumIndex</sup>)</tt>.
 * </ul>
 * If no data sequence elements have so far been recorded set all old values of the sums to <tt>0.0</tt>.</param>
      <return>the updated values filled into the <tt>sumOfPowers</tt> array.</return>
    </javadoc>
    <method type="void" name="incrementalUpdateSumsOfPowers" startLine="300" endLine="389">
      <declaration type="int" name="size" />
      <declaration type="int" name="lastIndex" />
      <scope startLine="306" endLine="361">
        <scope startLine="307" endLine="321">
          <declaration type="double[]" name="elements" />
          <declaration type="double" name="sum" />
          <declaration type="double" name="sumSquares" />
          <scope startLine="311" endLine="317">
            <declaration type="double" name="element" />
          </scope>
        </scope>
        <scope startLine="322" endLine="339">
          <declaration type="double[]" name="elements" />
          <declaration type="double" name="sum" />
          <declaration type="double" name="sumSquares" />
          <declaration type="double" name="sum_xxx" />
          <scope startLine="327" endLine="334">
            <declaration type="double" name="element" />
          </scope>
        </scope>
        <scope startLine="340" endLine="360">
          <declaration type="double[]" name="elements" />
          <declaration type="double" name="sum" />
          <declaration type="double" name="sumSquares" />
          <declaration type="double" name="sum_xxx" />
          <declaration type="double" name="sum_xxxx" />
          <scope startLine="346" endLine="354">
            <declaration type="double" name="element" />
          </scope>
        </scope>
        <comment>handle quicker</comment>
        <comment>if (element < min) min = element;</comment>
        <comment>else if (element > max) max = element;</comment>
        <comment>if (element < min) min = element;</comment>
        <comment>else if (element > max) max = element;</comment>
        <comment>handle quicker</comment>
        <comment>if (element < min) min = element;</comment>
        <comment>else if (element > max) max = element;</comment>
      </scope>
      <scope startLine="363" endLine="368">
        <scope startLine="364" endLine="366" />
        <comment>handle quicker</comment>
      </scope>
      <declaration type="double[]" name="elements" />
      <scope startLine="375" endLine="385">
        <declaration type="double" name="element" />
        <declaration type="double" name="pow" />
        <declaration type="int" name="j" />
        <scope startLine="380" endLine="383" />
      </scope>
      <comment>optimized for common parameters</comment>
      <comment>now the most general case:</comment>
      <comment>optimized for maximum speed, but still not quite quick</comment>
      <comment>At this point of return the following postcondition holds:</comment>
      <comment>data.size()-fromIndex elements have been consumed by this call.</comment>
    </method>
    <javadoc>
      <text>* Incrementally maintains and updates sum and sum of squares of a <i>weighted</i> data sequence.
 * Assume we have already recorded some data sequence elements 
 * and know their sum and sum of squares.
 * Assume further, we are to record some more elements 
 * and to derive updated values of sum and sum of squares.
 * <p>
 * This method computes those updated values without needing to know the already recorded elements.
 * This is interesting for interactive online monitoring and/or applications that cannot keep the entire huge data sequence in memory.
 * <p>
 * <br>Definition of sum: <tt>sum = Sum ( data[i] * weights[i] )</tt>.
 * <br>Definition of sumOfSquares: <tt>sumOfSquares = Sum ( data[i] * data[i] * weights[i])</tt>.</text>
      <param>data the additional elements to be incorporated into min, max, etc.</param>
      <param>weights the weight of each element within <tt>data</tt>.</param>
      <param>from the index of the first element within <tt>data</tt> (and <tt>weights</tt>) to consider.</param>
      <param>to the index of the last element within <tt>data</tt> (and <tt>weights</tt>) to consider.
 * The method incorporates elements <tt>data[from], ..., data[to]</tt>.</param>
      <param>inOut the old values in the following format:
 * <ul>
 * <li><tt>inOut[0]</tt> is the old sum.
 * <li><tt>inOut[1]</tt> is the old sum of squares.
 * </ul>
 * If no data sequence elements have so far been recorded set the values as follows 
 * <ul>
 * <li><tt>inOut[0] = 0.0</tt> as the old sum.
 * <li><tt>inOut[1] = 0.0</tt> as the old sum of squares.
 * </ul></param>
      <return>the updated values filled into the <tt>inOut</tt> array.</return>
    </javadoc>
    <method type="void" name="incrementalWeightedUpdate" startLine="423" endLine="450">
      <declaration type="int" name="dataSize" />
      <declaration type="double" name="sum" />
      <declaration type="double" name="sumOfSquares" />
      <declaration type="double[]" name="elements" />
      <declaration type="double[]" name="w" />
      <scope startLine="435" endLine="442">
        <declaration type="double" name="element" />
        <declaration type="double" name="weight" />
        <declaration type="double" name="prod" />
      </scope>
      <comment>read current values</comment>
      <comment>store new values</comment>
      <comment>At this point of return the following postcondition holds:</comment>
      <comment>data.size()-from elements have been consumed by this call.</comment>
    </method>
    <javadoc>
      <text>* Returns the kurtosis (aka excess) of a data sequence.</text>
      <param>moment4 the fourth central moment, which is <tt>moment(data,4,mean)</tt>.</param>
      <param>standardDeviation the standardDeviation.</param>
    </javadoc>
    <method type="double" name="kurtosis" startLine="456" endLine="458" />
    <javadoc>
      <text>* Returns the kurtosis (aka excess) of a data sequence, which is <tt>-3 + moment(data,4,mean) / standardDeviation<sup>4</sup></tt>.</text>
    </javadoc>
    <method type="double" name="kurtosis" startLine="462" endLine="464" />
    <javadoc>
      <text>* Returns the lag-1 autocorrelation of a dataset; 
 * Note that this method has semantics different from <tt>autoCorrelation(..., 1)</tt>;</text>
    </javadoc>
    <method type="double" name="lag1" startLine="469" endLine="485">
      <declaration type="int" name="size" />
      <declaration type="double[]" name="elements" />
      <declaration type="double" name="r1" />
      <declaration type="double" name="q" />
      <declaration type="double" name="v" />
      <scope startLine="476" endLine="481">
        <declaration type="double" name="delta0" />
        <declaration type="double" name="delta1" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the largest member of a data sequence.</text>
    </javadoc>
    <method type="double" name="max" startLine="489" endLine="500">
      <declaration type="int" name="size" />
      <declaration type="double[]" name="elements" />
      <declaration type="double" name="max" />
      <scope startLine="495" endLine="497" />
    </method>
    <javadoc>
      <text>* Returns the arithmetic mean of a data sequence; 
 * That is <tt>Sum( data[i] ) / data.size()</tt>.</text>
    </javadoc>
    <method type="double" name="mean" startLine="505" endLine="507" />
    <javadoc>
      <text>* Returns the mean deviation of a dataset.
 * That is <tt>Sum (Math.abs(data[i]-mean)) / data.size())</tt>.</text>
    </javadoc>
    <method type="double" name="meanDeviation" startLine="512" endLine="518">
      <declaration type="double[]" name="elements" />
      <declaration type="int" name="size" />
      <declaration type="double" name="sum" />
    </method>
    <javadoc>
      <text>* Returns the median of a sorted data sequence.</text>
      <param>sortedData the data sequence; <b>must be sorted ascending</b>.</param>
    </javadoc>
    <method type="double" name="median" startLine="524" endLine="540">
      <comment>double[] sortedElements = sortedData.elements();
int n = sortedData.size();
int lhs = (n - 1)  2 ;
int rhs = n  2 ;

if (n == 0) return 0.0 ;

double median;
if (lhs == rhs) median = sortedElements[lhs] ;
else median = (sortedElements[lhs] + sortedElements[rhs])2.0 ;

return median;</comment>
    </method>
    <javadoc>
      <text>* Returns the smallest member of a data sequence.</text>
    </javadoc>
    <method type="double" name="min" startLine="544" endLine="555">
      <declaration type="int" name="size" />
      <declaration type="double[]" name="elements" />
      <declaration type="double" name="min" />
      <scope startLine="550" endLine="552" />
    </method>
    <javadoc>
      <text>* Returns the moment of <tt>k</tt>-th order with constant <tt>c</tt> of a data sequence,
 * which is <tt>Sum( (data[i]-c)<sup>k</sup> ) / data.size()</tt>.</text>
      <param>sumOfPowers <tt>sumOfPowers[m] == Sum( data[i]<sup>m</sup>) )</tt> for <tt>m = 0,1,..,k</tt> as returned by method {@link #incrementalUpdateSumsOfPowers(DoubleArrayList,int,int,int,int,double[])}.
 * In particular there must hold <tt>sumOfPowers.length == k+1</tt>.</param>
      <param>size the number of elements of the data sequence.</param>
    </javadoc>
    <method type="double" name="moment" startLine="564" endLine="585">
      <declaration type="double" name="sum" />
      <declaration type="int" name="sign" />
      <scope startLine="567" endLine="577">
        <declaration type="double" name="y" />
        <comment>sum += sign *</comment>
      </scope>
      <comment>for (int i=0; i<=k; i++) {
sum += sign  cern.jet.math.Arithmetic.binomial(k,i)  Math.pow(c, i)  sumOfPowers[k-i];
sign = -sign;
}</comment>
    </method>
    <javadoc>
      <text>* Returns the moment of <tt>k</tt>-th order with constant <tt>c</tt> of a data sequence,
 * which is <tt>Sum( (data[i]-c)<sup>k</sup> ) / data.size()</tt>.</text>
    </javadoc>
    <method type="double" name="moment" startLine="590" endLine="592" />
    <javadoc>
      <text>* Returns the pooled mean of two data sequences.
 * That is <tt>(size1 * mean1 + size2 * mean2) / (size1 + size2)</tt>.</text>
      <param>size1 the number of elements in data sequence 1.</param>
      <param>mean1 the mean of data sequence 1.</param>
      <param>size2 the number of elements in data sequence 2.</param>
      <param>mean2 the mean of data sequence 2.</param>
    </javadoc>
    <method type="double" name="pooledMean" startLine="602" endLine="604" />
    <javadoc>
      <text>* Returns the pooled variance of two data sequences.
 * That is <tt>(size1 * variance1 + size2 * variance2) / (size1 + size2)</tt>;</text>
      <param>size1 the number of elements in data sequence 1.</param>
      <param>variance1 the variance of data sequence 1.</param>
      <param>size2 the number of elements in data sequence 2.</param>
      <param>variance2 the variance of data sequence 2.</param>
    </javadoc>
    <method type="double" name="pooledVariance" startLine="614" endLine="616" />
    <javadoc>
      <text>* Returns the product, which is <tt>Prod( data[i] )</tt>.
 * In other words: <tt>data[0]*data[1]*...*data[data.size()-1]</tt>.
 * This method uses the equivalent definition:
 * <tt>prod = pow( exp( Sum( Log(x[i]) ) / size(), size())</tt>.</text>
    </javadoc>
    <method type="double" name="product" startLine="623" endLine="625" />
    <javadoc>
      <text>* Returns the product of a data sequence, which is <tt>Prod( data[i] )</tt>.
 * In other words: <tt>data[0]*data[1]*...*data[data.size()-1]</tt>.
 * Note that you may easily get numeric overflows.</text>
    </javadoc>
    <method type="double" name="product" startLine="631" endLine="639">
      <declaration type="int" name="size" />
      <declaration type="double[]" name="elements" />
      <declaration type="double" name="product" />
    </method>
    <javadoc>
      <text>* Returns the <tt>phi-</tt>quantile; that is, an element <tt>elem</tt> for which holds that <tt>phi</tt> percent of data elements are less than <tt>elem</tt>.
 * The quantile need not necessarily be contained in the data sequence, it can be a linear interpolation.</text>
      <param>sortedData the data sequence; <b>must be sorted ascending</b>.</param>
      <param>phi the percentage; must satisfy <tt>0 &lt;= phi &lt;= 1</tt>.</param>
    </javadoc>
    <method type="double" name="quantile" startLine="646" endLine="665">
      <declaration type="double[]" name="sortedElements" />
      <declaration type="int" name="n" />
      <declaration type="double" name="index" />
      <declaration type="int" name="lhs" />
      <declaration type="double" name="delta" />
      <declaration type="double" name="result" />
      <scope startLine="657" endLine="659" />
      <scope startLine="660" endLine="662" />
    </method>
    <javadoc>
      <text>* Returns how many percent of the elements contained in the receiver are <tt>&lt;= element</tt>.
 * Does linear interpolation if the element is not contained but lies in between two contained elements.</text>
      <param>sortedList the list to be searched (must be sorted ascending).</param>
      <param>element the element to search for.</param>
      <return>the percentage <tt>phi</tt> of elements <tt>&lt;= element</tt> (<tt>0.0 &lt;= phi &lt;= 1.0)</tt>.</return>
    </javadoc>
    <method type="double" name="quantileInverse" startLine="674" endLine="676" />
    <javadoc>
      <text>* Returns the quantiles of the specified percentages.
 * The quantiles need not necessarily be contained in the data sequence, it can be a linear interpolation.</text>
      <param>sortedData the data sequence; <b>must be sorted ascending</b>.</param>
      <param>percentages the percentages for which quantiles are to be computed.
 * Each percentage must be in the interval <tt>[0.0,1.0]</tt>.</param>
      <return>the quantiles.</return>
    </javadoc>
    <method type="DoubleArrayList" name="quantiles" startLine="685" endLine="694">
      <declaration type="int" name="s" />
      <declaration type="DoubleArrayList" name="quantiles" />
      <scope startLine="689" endLine="691" />
    </method>
    <javadoc>
      <text>* Returns the linearly interpolated number of elements in a list less or equal to a given element.
 * The rank is the number of elements <= element.
 * Ranks are of the form <tt>{0, 1, 2,..., sortedList.size()}</tt>.
 * If no element is <= element, then the rank is zero.
 * If the element lies in between two contained elements, then linear interpolation is used and a non integer value is returned.</text>
      <param>sortedList the list to be searched (must be sorted ascending).</param>
      <param>element the element to search for.</param>
      <return>the rank of the element.</return>
    </javadoc>
    <method type="double" name="rankInterpolated" startLine="706" endLine="724">
      <declaration type="int" name="index" />
      <scope startLine="708" endLine="714">
        <declaration type="int" name="to" />
        <declaration type="int" name="s" />
        <comment>element found</comment>
        <comment>skip to the right over multiple occurances of element.</comment>
      </scope>
      <declaration type="int" name="insertionPoint" />
      <declaration type="double" name="from" />
      <declaration type="double" name="to" />
      <declaration type="double" name="delta" />
      <comment>element not found</comment>
      <comment>linear interpolation</comment>
    </method>
    <javadoc>
      <text>* Returns the RMS (Root-Mean-Square) of a data sequence.
 * That is <tt>Math.sqrt(Sum( data[i]*data[i] ) / data.size())</tt>.
 * The RMS of data sequence is the square-root of the mean of the squares of the elements in the data sequence.
 * It is a measure of the average "size" of the elements of a data sequence.</text>
      <param>sumOfSquares <tt>sumOfSquares(data) == Sum( data[i]*data[i] )</tt> of the data sequence.</param>
      <param>size the number of elements in the data sequence.</param>
    </javadoc>
    <method type="double" name="rms" startLine="734" endLine="736" />
    <javadoc>
      <text>* Returns the sample kurtosis (aka excess) of a data sequence.
 * Ref: R.R. Sokal, F.J. Rohlf, Biometry: the principles and practice of statistics
 * in biological research (W.H. Freeman and Company, New York, 1998, 3rd edition)
 * p. 114-115.</text>
      <param>size the number of elements of the data sequence.</param>
      <param>moment4 the fourth central moment, which is <tt>moment(data,4,mean)</tt>.</param>
      <param>sampleVariance the <b>sample variance</b>.</param>
    </javadoc>
    <method type="double" name="sampleKurtosis" startLine="748" endLine="754">
      <declaration type="int" name="n" />
      <declaration type="double" name="s2" />
      <declaration type="double" name="m4" />
      <comment>(y-ymean)^2/(n-1)</comment>
      <comment>(y-ymean)^4</comment>
    </method>
    <javadoc>
      <text>* Returns the sample kurtosis (aka excess) of a data sequence.</text>
    </javadoc>
    <method type="double" name="sampleKurtosis" startLine="758" endLine="760" />
    <javadoc>
      <text>* Return the standard error of the sample kurtosis.
 * Ref: R.R. Sokal, F.J. Rohlf, Biometry: the principles and practice of statistics
 * in biological research (W.H. Freeman and Company, New York, 1998, 3rd edition)
 * p. 138.</text>
      <param>size the number of elements of the data sequence.</param>
    </javadoc>
    <method type="double" name="sampleKurtosisStandardError" startLine="770" endLine="773">
      <declaration type="int" name="n" />
    </method>
    <javadoc>
      <text>* Returns the sample skew of a data sequence.
 * Ref: R.R. Sokal, F.J. Rohlf, Biometry: the principles and practice of statistics
 * in biological research (W.H. Freeman and Company, New York, 1998, 3rd edition)
 * p. 114-115.</text>
      <param>size the number of elements of the data sequence.</param>
      <param>moment3 the third central moment, which is <tt>moment(data,3,mean)</tt>.</param>
      <param>sampleVariance the <b>sample variance</b>.</param>
    </javadoc>
    <method type="double" name="sampleSkew" startLine="785" endLine="790">
      <declaration type="int" name="n" />
      <declaration type="double" name="s" />
      <declaration type="double" name="m3" />
      <comment>sqrt( (y-ymean)^2/(n-1) )</comment>
      <comment>(y-ymean)^3</comment>
    </method>
    <javadoc>
      <text>* Returns the sample skew of a data sequence.</text>
    </javadoc>
    <method type="double" name="sampleSkew" startLine="794" endLine="796" />
    <javadoc>
      <text>* Return the standard error of the sample skew.
 * Ref: R.R. Sokal, F.J. Rohlf, Biometry: the principles and practice of statistics
 * in biological research (W.H. Freeman and Company, New York, 1998, 3rd edition)
 * p. 138.</text>
      <param>size the number of elements of the data sequence.</param>
    </javadoc>
    <method type="double" name="sampleSkewStandardError" startLine="806" endLine="809">
      <declaration type="int" name="n" />
    </method>
    <javadoc>
      <text>* Returns the sample standard deviation.
 * Ref: R.R. Sokal, F.J. Rohlf, Biometry: the principles and practice of statistics
 * in biological research (W.H. Freeman and Company, New York, 1998, 3rd edition)
 * p. 53.</text>
      <param>size the number of elements of the data sequence.</param>
      <param>sampleVariance the <b>sample variance</b>.</param>
    </javadoc>
    <method type="double" name="sampleStandardDeviation" startLine="820" endLine="834">
      <declaration type="double" name="s" />
      <declaration type="int" name="n" />
      <scope startLine="828" endLine="830">
        <comment>Cn = 1+1/(4*(n-1));</comment>
      </scope>
      <scope startLine="830" endLine="832" />
      <comment>The standard deviation calculated as the sqrt of the variance underestimates</comment>
      <comment>the unbiased standard deviation.</comment>
      <comment>It needs to be multiplied by this correction factor.</comment>
    </method>
    <javadoc>
      <text>* Returns the sample variance of a data sequence.
 * That is <tt>(sumOfSquares - mean*sum) / (size - 1)</tt> with <tt>mean = sum/size</tt>.</text>
      <param>size the number of elements of the data sequence.</param>
      <param>sum <tt>== Sum( data[i] )</tt>.</param>
      <param>sumOfSquares <tt>== Sum( data[i]*data[i] )</tt>.</param>
    </javadoc>
    <method type="double" name="sampleVariance" startLine="843" endLine="846">
      <declaration type="double" name="mean" />
    </method>
    <javadoc>
      <text>* Returns the sample variance of a data sequence.
 * That is <tt>Sum ( (data[i]-mean)^2 ) / (data.size()-1)</tt>.</text>
    </javadoc>
    <method type="double" name="sampleVariance" startLine="851" endLine="862">
      <declaration type="double[]" name="elements" />
      <declaration type="int" name="size" />
      <declaration type="double" name="sum" />
      <scope startLine="856" endLine="859">
        <declaration type="double" name="delta" />
      </scope>
      <comment>find the sum of the squares</comment>
    </method>
    <javadoc>
      <text>* Returns the sample weighted variance of a data sequence.
 * That is <tt>(sumOfSquaredProducts  -  sumOfProducts * sumOfProducts / sumOfWeights) / (sumOfWeights - 1)</tt>.</text>
      <param>sumOfWeights <tt>== Sum( weights[i] )</tt>.</param>
      <param>sumOfProducts <tt>== Sum( data[i] * weights[i] )</tt>.</param>
      <param>sumOfSquaredProducts <tt>== Sum( data[i] * data[i] * weights[i] )</tt>.</param>
    </javadoc>
    <method type="double" name="sampleWeightedVariance" startLine="871" endLine="873" />
    <javadoc>
      <text>* Returns the skew of a data sequence.</text>
      <param>moment3 the third central moment, which is <tt>moment(data,3,mean)</tt>.</param>
      <param>standardDeviation the standardDeviation.</param>
    </javadoc>
    <method type="double" name="skew" startLine="879" endLine="881" />
    <javadoc>
      <text>* Returns the skew of a data sequence, which is <tt>moment(data,3,mean) / standardDeviation<sup>3</sup></tt>.</text>
    </javadoc>
    <method type="double" name="skew" startLine="885" endLine="887" />
    <javadoc>
      <text>* Splits (partitions) a list into sublists such that each sublist contains the elements with a given range.
 * <tt>splitters=(a,b,c,...,y,z)</tt> defines the ranges <tt>[-inf,a), [a,b), [b,c), ..., [y,z), [z,inf]</tt>.
 * <p><b>Examples:</b><br>
 * <ul>
 * <tt>data = (1,2,3,4,5,8,8,8,10,11)</tt>.
 * <br><tt>splitters=(2,8)</tt> yields 3 bins: <tt>(1), (2,3,4,5) (8,8,8,10,11)</tt>.
 * <br><tt>splitters=()</tt> yields 1 bin: <tt>(1,2,3,4,5,8,8,8,10,11)</tt>.
 * <br><tt>splitters=(-5)</tt> yields 2 bins: <tt>(), (1,2,3,4,5,8,8,8,10,11)</tt>.
 * <br><tt>splitters=(100)</tt> yields 2 bins: <tt>(1,2,3,4,5,8,8,8,10,11), ()</tt>.
 * </ul></text>
      <param>sortedList the list to be partitioned (must be sorted ascending).</param>
      <param>splitters the points at which the list shall be partitioned (must be sorted ascending).</param>
      <return>the sublists (an array with <tt>length == splitters.size() + 1</tt>.
 * Each sublist is returned sorted ascending.</return>
    </javadoc>
    <method type="DoubleArrayList[]" name="split" startLine="904" endLine="940">
      <declaration type="int" name="noOfBins" />
      <declaration type="DoubleArrayList[]" name="bins" />
      <declaration type="int" name="listSize" />
      <declaration type="int" name="nextStart" />
      <declaration type="int" name="i" />
      <scope startLine="915" endLine="934">
        <declaration type="double" name="splitValue" />
        <declaration type="int" name="index" />
        <scope startLine="918" endLine="922">
          <declaration type="int" name="insertionPosition" />
        </scope>
        <scope startLine="923" endLine="932">
          <scope startLine="926" endLine="928" />
        </scope>
        <comment>splitValue not found</comment>
        <comment>splitValue found</comment>
        <comment>For multiple identical elements ("runs"), binarySearch does not define which of all valid indexes is returned.</comment>
        <comment>Thus, skip over to the first element of a run.</comment>
      </scope>
      <comment>assertion: data is sorted ascending.</comment>
      <comment>assertion: splitValues is sorted ascending.</comment>
      <comment>now fill the remainder</comment>
    </method>
    <javadoc>
      <text>* Returns the standard deviation from a variance.</text>
    </javadoc>
    <method type="double" name="standardDeviation" startLine="944" endLine="946" />
    <javadoc>
      <text>* Returns the standard error of a data sequence.
 * That is <tt>Math.sqrt(variance/size)</tt>.</text>
      <param>size the number of elements in the data sequence.</param>
      <param>variance the variance of the data sequence.</param>
    </javadoc>
    <method type="double" name="standardError" startLine="954" endLine="956" />
    <javadoc>
      <text>* Modifies a data sequence to be standardized.
 * Changes each element <tt>data[i]</tt> as follows: <tt>data[i] = (data[i]-mean)/standardDeviation</tt>.</text>
    </javadoc>
    <method type="void" name="standardize" startLine="961" endLine="964">
      <declaration type="double[]" name="elements" />
    </method>
    <javadoc>
      <text>* Returns the sum of a data sequence.
 * That is <tt>Sum( data[i] )</tt>.</text>
    </javadoc>
    <method type="double" name="sum" startLine="969" endLine="971" />
    <javadoc>
      <text>* Returns the sum of inversions of a data sequence,
 * which is <tt>Sum( 1.0 / data[i])</tt>.</text>
      <param>data the data sequence.</param>
      <param>from the index of the first data element (inclusive).</param>
      <param>to the index of the last data element (inclusive).</param>
    </javadoc>
    <method type="double" name="sumOfInversions" startLine="979" endLine="981" />
    <javadoc>
      <text>* Returns the sum of logarithms of a data sequence, which is <tt>Sum( Log(data[i])</tt>.</text>
      <param>data the data sequence.</param>
      <param>from the index of the first data element (inclusive).</param>
      <param>to the index of the last data element (inclusive).</param>
    </javadoc>
    <method type="double" name="sumOfLogarithms" startLine="988" endLine="993">
      <declaration type="double[]" name="elements" />
      <declaration type="double" name="logsum" />
    </method>
    <javadoc>
      <text>* Returns <tt>Sum( (data[i]-c)<sup>k</sup> )</tt>; optimized for common parameters like <tt>c == 0.0</tt> and/or <tt>k == -2 .. 4</tt>.</text>
    </javadoc>
    <method type="double" name="sumOfPowerDeviations" startLine="997" endLine="999" />
    <javadoc>
      <text>* Returns <tt>Sum( (data[i]-c)<sup>k</sup> )</tt> for all <tt>i = from .. to</tt>; optimized for common parameters like <tt>c == 0.0</tt> and/or <tt>k == -2 .. 5</tt>.</text>
    </javadoc>
    <method type="double" name="sumOfPowerDeviations" startLine="1003" endLine="1045">
      <declaration type="double[]" name="elements" />
      <declaration type="double" name="sum" />
      <declaration type="double" name="v" />
      <declaration type="int" name="i" />
      <scope startLine="1010" endLine="1010" />
      <scope startLine="1011" endLine="1011" />
      <scope startLine="1025" endLine="1025" />
      <scope startLine="1026" endLine="1026" />
      <scope startLine="1029" endLine="1029" />
      <scope startLine="1030" endLine="1030" />
      <scope startLine="1033" endLine="1033" />
      <scope startLine="1034" endLine="1034" />
      <scope startLine="1037" endLine="1037" />
      <scope startLine="1038" endLine="1038" />
      <comment>optimized for speed</comment>
    </method>
    <javadoc>
      <text>* Returns the sum of powers of a data sequence, which is <tt>Sum ( data[i]<sup>k</sup> )</tt>.</text>
    </javadoc>
    <method type="double" name="sumOfPowers" startLine="1049" endLine="1051" />
    <javadoc>
      <text>* Returns the sum of squared mean deviation of of a data sequence.
 * That is <tt>variance * (size-1) == Sum( (data[i] - mean)^2 )</tt>.</text>
      <param>size the number of elements of the data sequence.</param>
      <param>variance the variance of the data sequence.</param>
    </javadoc>
    <method type="double" name="sumOfSquaredDeviations" startLine="1059" endLine="1061" />
    <javadoc>
      <text>* Returns the sum of squares of a data sequence.
 * That is <tt>Sum ( data[i]*data[i] )</tt>.</text>
    </javadoc>
    <method type="double" name="sumOfSquares" startLine="1066" endLine="1068" />
    <javadoc>
      <text>* Returns the trimmed mean of a sorted data sequence.</text>
      <param>sortedData the data sequence; <b>must be sorted ascending</b>.</param>
      <param>mean the mean of the (full) sorted data sequence.</param>
      <left>the number of leading elements to trim.</left>
      <right>the number of trailing elements to trim.</right>
    </javadoc>
    <method type="double" name="trimmedMean" startLine="1077" endLine="1089">
      <declaration type="int" name="N" />
      <declaration type="double[]" name="sortedElements" />
      <declaration type="int" name="N0" />
    </method>
    <javadoc>
      <text>* Returns the variance from a standard deviation.</text>
    </javadoc>
    <method type="double" name="variance" startLine="1093" endLine="1095" />
    <javadoc>
      <text>* Returns the variance of a data sequence.
 * That is <tt>(sumOfSquares - mean*sum) / size</tt> with <tt>mean = sum/size</tt>.</text>
      <param>size the number of elements of the data sequence.</param>
      <param>sum <tt>== Sum( data[i] )</tt>.</param>
      <param>sumOfSquares <tt>== Sum( data[i]*data[i] )</tt>.</param>
    </javadoc>
    <method type="double" name="variance" startLine="1104" endLine="1107">
      <declaration type="double" name="mean" />
    </method>
    <javadoc>
      <text>* Returns the weighted mean of a data sequence.
 * That is <tt> Sum (data[i] * weights[i]) / Sum ( weights[i] )</tt>.</text>
    </javadoc>
    <method type="double" name="weightedMean" startLine="1112" endLine="1127">
      <declaration type="int" name="size" />
      <declaration type="double[]" name="elements" />
      <declaration type="double[]" name="theWeights" />
      <declaration type="double" name="sum" />
      <declaration type="double" name="weightsSum" />
      <scope startLine="1120" endLine="1124">
        <declaration type="double" name="w" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the weighted RMS (Root-Mean-Square) of a data sequence.
 * That is <tt>Sum( data[i] * data[i] * weights[i]) / Sum( data[i] * weights[i] )</tt>,
 * or in other words <tt>sumOfProducts / sumOfSquaredProducts</tt>.</text>
      <param>sumOfProducts <tt>== Sum( data[i] * weights[i] )</tt>.</param>
      <param>sumOfSquaredProducts <tt>== Sum( data[i] * data[i] * weights[i] )</tt>.</param>
    </javadoc>
    <method type="double" name="weightedRMS" startLine="1136" endLine="1138" />
    <javadoc>
      <text>* Returns the winsorized mean of a sorted data sequence.</text>
      <param>sortedData the data sequence; <b>must be sorted ascending</b>.</param>
      <param>mean the mean of the (full) sorted data sequence.</param>
      <left>the number of leading elements to trim.</left>
      <right>the number of trailing elements to trim.</right>
    </javadoc>
    <method type="double" name="winsorizedMean" startLine="1147" endLine="1163">
      <declaration type="int" name="N" />
      <declaration type="double[]" name="sortedElements" />
      <declaration type="double" name="leftElement" />
      <declaration type="double" name="rightElement" />
    </method>
    <comment>Both covariance versions yield the same results but the one above is faster</comment>
  </class>
</source>
