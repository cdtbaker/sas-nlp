<?xml version="1.0" encoding="UTF-8"?>
<source package="cern.jet.stat">
  <import name="cern.jet.math.Polynomial" />
  <class name="Probability" extends="cern.jet.math.Constants" startLine="12">
    <javadoc>
      <text>* Custom tailored numerical integration of certain probability distributions.
 * <p>
 * <b>Implementation:</b>
 * <dt>
 * Some code taken and adapted from the <A HREF="http://www.sci.usq.edu.au/staff/leighb/graph/Top.html">Java 2D Graph Package 2.4</A>,
 * which in turn is a port from the <A HREF="http://people.ne.mediaone.net/moshier/index.html#Cephes">Cephes 2.2</A> Math Library (C).
 * Most Cephes code (missing from the 2D Graph Package) directly ported.</text>
      <author>peter.gedeck@pharma.Novartis.com</author>
      <author>wolfgang.hoschek@cern.ch</author>
      <version>0.91, 08-Dec-99</version>
    </javadoc>
    <javadoc>
      <text>* COEFFICIENTS FOR METHOD  normalInverse()</text>
    </javadoc>
    <declaration type="double" name="P0" />
    <declaration type="double" name="Q0" />
    <declaration type="double" name="P1" />
    <declaration type="double" name="Q1" />
    <declaration type="double" name="P2" />
    <declaration type="double" name="Q2" />
    <javadoc>
      <text>* Makes this class non instantiable, but still let's others inherit from it.</text>
    </javadoc>
    <method type="constructor" name="Probability" startLine="105" endLine="105" />
    <javadoc>
      <text>* Returns the area from zero to <tt>x</tt> under the beta density
 * function.
 * <pre>
 * x
 * -             -
 * | (a+b)       | |  a-1      b-1
 * P(x)  =  ----------     |   t    (1-t)    dt
 * -     -     | |
 * | (a) | (b)   -
 * 0
 * </pre>
 * This function is identical to the incomplete beta
 * integral function <tt>Gamma.incompleteBeta(a, b, x)</tt>.
 * The complemented function is
 * <tt>1 - P(1-x)  =  Gamma.incompleteBeta( b, a, x )</tt>;</text>
    </javadoc>
    <method type="double" name="beta" startLine="126" endLine="128" />
    <javadoc>
      <text>* Returns the area under the right hand tail (from <tt>x</tt> to
 * infinity) of the beta density function.
 * This function is identical to the incomplete beta
 * integral function <tt>Gamma.incompleteBeta(b, a, x)</tt>.</text>
    </javadoc>
    <method type="double" name="betaComplemented" startLine="136" endLine="138" />
    <javadoc>
      <text>* Returns the sum of the terms <tt>0</tt> through <tt>k</tt> of the Binomial
 * probability density.
 * <pre>
 * k
 * --  ( n )   j      n-j
 * >   (   )  p  (1-p)
 * --  ( j )
 * j=0
 * </pre>
 * The terms are not summed directly; instead the incomplete
 * beta integral is employed, according to the formula
 * <p>
 * <tt>y = binomial( k, n, p ) = Gamma.incompleteBeta( n-k, k+1, 1-p )</tt>.
 * <p>
 * All arguments must be positive,</text>
      <param>k end term.</param>
      <param>n the number of trials.</param>
      <param>p the probability of success (must be in <tt>(0.0,1.0)</tt>).</param>
    </javadoc>
    <method type="double" name="binomial" startLine="159" endLine="167" />
    <javadoc>
      <text>* Returns the sum of the terms <tt>k+1</tt> through <tt>n</tt> of the Binomial
 * probability density.
 * <pre>
 * n
 * --  ( n )   j      n-j
 * >   (   )  p  (1-p)
 * --  ( j )
 * j=k+1
 * </pre>
 * The terms are not summed directly; instead the incomplete
 * beta integral is employed, according to the formula
 * <p>
 * <tt>y = binomialComplemented( k, n, p ) = Gamma.incompleteBeta( k+1, n-k, p )</tt>.
 * <p>
 * All arguments must be positive,</text>
      <param>k end term.</param>
      <param>n the number of trials.</param>
      <param>p the probability of success (must be in <tt>(0.0,1.0)</tt>).</param>
    </javadoc>
    <method type="double" name="binomialComplemented" startLine="188" endLine="196" />
    <javadoc>
      <text>* Returns the area under the left hand tail (from 0 to <tt>x</tt>)
 * of the Chi square probability density function with
 * <tt>v</tt> degrees of freedom.
 * <pre>
 * inf.
 * -
 * 1          | |  v/2-1  -t/2
 * P( x | v )   =   -----------     |   t      e     dt
 * v/2  -       | |
 * 2    | (v/2)   -
 * x
 * </pre>
 * where <tt>x</tt> is the Chi-square variable.
 * <p>
 * The incomplete gamma integral is used, according to the
 * formula
 * <p>
 * <tt>y = chiSquare( v, x ) = incompleteGamma( v/2.0, x/2.0 )</tt>.
 * <p>
 * The arguments must both be positive.</text>
      <param>v degrees of freedom.</param>
      <param>x integration end point.</param>
    </javadoc>
    <method type="double" name="chiSquare" startLine="222" endLine="225" />
    <javadoc>
      <text>* Returns the area under the right hand tail (from <tt>x</tt> to
 * infinity) of the Chi square probability density function
 * with <tt>v</tt> degrees of freedom.
 * <pre>
 * inf.
 * -
 * 1          | |  v/2-1  -t/2
 * P( x | v )   =   -----------     |   t      e     dt
 * v/2  -       | |
 * 2    | (v/2)   -
 * x
 * </pre>
 * where <tt>x</tt> is the Chi-square variable.
 * The incomplete gamma integral is used, according to the
 * formula
 * <tt>y = chiSquareComplemented( v, x ) = incompleteGammaComplement( v/2.0, x/2.0 )</tt>.
 * The arguments must both be positive.</text>
      <param>v degrees of freedom.</param>
    </javadoc>
    <method type="double" name="chiSquareComplemented" startLine="251" endLine="254" />
    <javadoc>
      <text>* Returns the error function of the normal distribution; formerly named <tt>erf</tt>.
 * The integral is
 * <pre>
 * x 
 * -
 * 2         | |          2
 * erf(x)  =  --------     |    exp( - t  ) dt.
 * sqrt(pi)   | |
 * -
 * 0
 * </pre>
 * <b>Implementation:</b>
 * For <tt>0 <= |x| < 1, erf(x) = x * P4(x**2)/Q5(x**2)</tt>; otherwise
 * <tt>erf(x) = 1 - erfc(x)</tt>.
 * <p>
 * Code adapted from the <A HREF="http://www.sci.usq.edu.au/staff/leighb/graph/Top.html">Java 2D Graph Package 2.4</A>,
 * which in turn is a port from the <A HREF="http://people.ne.mediaone.net/moshier/index.html#Cephes">Cephes 2.2</A> Math Library (C).</text>
      <param>a the argument to the function.</param>
    </javadoc>
    <method type="double" name="errorFunction" startLine="276" endLine="298">
      <declaration type="double" name="y" />
      <declaration type="double[]" name="T" />
      <declaration type="double[]" name="U" />
      <comment>1.00000000000000000000E0,</comment>
    </method>
    <javadoc>
      <text>* Returns the complementary Error function of the normal distribution; formerly named <tt>erfc</tt>.
 * <pre>
 * 1 - erf(x) =
 * inf. 
 * -
 * 2         | |          2
 * erfc(x)  =  --------     |    exp( - t  ) dt
 * sqrt(pi)   | |
 * -
 * x
 * </pre>
 * <b>Implementation:</b>
 * For small x, <tt>erfc(x) = 1 - erf(x)</tt>; otherwise rational
 * approximations are computed.
 * <p>
 * Code adapted from the <A HREF="http://www.sci.usq.edu.au/staff/leighb/graph/Top.html">Java 2D Graph Package 2.4</A>,
 * which in turn is a port from the <A HREF="http://people.ne.mediaone.net/moshier/index.html#Cephes">Cephes 2.2</A> Math Library (C).</text>
      <param>a the argument to the function.</param>
    </javadoc>
    <method type="double" name="errorFunctionComplemented" startLine="321" endLine="397">
      <declaration type="double" name="x" />
      <declaration type="double[]" name="P" />
      <declaration type="double[]" name="Q" />
      <declaration type="double[]" name="R" />
      <declaration type="double[]" name="S" />
      <scope startLine="372" endLine="375" />
      <scope startLine="379" endLine="382" />
      <scope startLine="382" endLine="385" />
      <scope startLine="391" endLine="394" />
      <comment>1.0</comment>
      <comment>1.00000000000000000000E0,</comment>
    </method>
    <javadoc>
      <text>* Returns the integral from zero to <tt>x</tt> of the gamma probability
 * density function.
 * <pre>
 * x
 * b       -
 * a       | |   b-1  -at
 * y =  -----    |    t    e    dt
 * -     | |
 * | (b)   -
 * 0
 * </pre>
 * The incomplete gamma integral is used, according to the
 * relation
 * <tt>y = Gamma.incompleteGamma( b, a*x )</tt>.</text>
      <param>a the paramater a (alpha) of the gamma distribution.</param>
      <param>b the paramater b (beta, lambda) of the gamma distribution.</param>
      <param>x integration end point.</param>
    </javadoc>
    <method type="double" name="gamma" startLine="419" endLine="422" />
    <javadoc>
      <text>* Returns the integral from <tt>x</tt> to infinity of the gamma
 * probability density function:
 * <pre>
 * inf.
 * b       -
 * a       | |   b-1  -at
 * y =  -----    |    t    e    dt
 * -     | |
 * | (b)   -
 * x
 * </pre>
 * The incomplete gamma integral is used, according to the
 * relation
 * <p>
 * y = Gamma.incompleteGammaComplement( b, a*x ).</text>
      <param>a the paramater a (alpha) of the gamma distribution.</param>
      <param>b the paramater b (beta, lambda) of the gamma distribution.</param>
      <param>x integration end point.</param>
    </javadoc>
    <method type="double" name="gammaComplemented" startLine="444" endLine="447" />
    <javadoc>
      <text>* Returns the sum of the terms <tt>0</tt> through <tt>k</tt> of the Negative Binomial Distribution.
 * <pre>
 * k
 * --  ( n+j-1 )   n      j
 * >   (       )  p  (1-p)
 * --  (   j   )
 * j=0
 * </pre>
 * In a sequence of Bernoulli trials, this is the probability
 * that <tt>k</tt> or fewer failures precede the <tt>n</tt>-th success.
 * <p>
 * The terms are not computed individually; instead the incomplete
 * beta integral is employed, according to the formula
 * <p>
 * <tt>y = negativeBinomial( k, n, p ) = Gamma.incompleteBeta( n, k+1, p )</tt>.
 * All arguments must be positive,</text>
      <param>k end term.</param>
      <param>n the number of trials.</param>
      <param>p the probability of success (must be in <tt>(0.0,1.0)</tt>).</param>
    </javadoc>
    <method type="double" name="negativeBinomial" startLine="470" endLine="475" />
    <javadoc>
      <text>* Returns the sum of the terms <tt>k+1</tt> to infinity of the Negative
 * Binomial distribution.
 * <pre>
 * inf
 * --  ( n+j-1 )   n      j
 * >   (       )  p  (1-p)
 * --  (   j   )
 * j=k+1
 * </pre>
 * The terms are not computed individually; instead the incomplete
 * beta integral is employed, according to the formula
 * <p>
 * y = negativeBinomialComplemented( k, n, p ) = Gamma.incompleteBeta( k+1, n, 1-p ).
 * All arguments must be positive,</text>
      <param>k end term.</param>
      <param>n the number of trials.</param>
      <param>p the probability of success (must be in <tt>(0.0,1.0)</tt>).</param>
    </javadoc>
    <method type="double" name="negativeBinomialComplemented" startLine="496" endLine="501" />
    <javadoc>
      <text>* Returns the area under the Normal (Gaussian) probability density
 * function, integrated from minus infinity to <tt>x</tt> (assumes mean is zero, variance is one).
 * <pre>
 * x
 * -
 * 1        | |          2
 * normal(x)  = ---------    |    exp( - t /2 ) dt
 * sqrt(2pi)  | |
 * -
 * -inf.
 * =  ( 1 + erf(z) ) / 2
 * =  erfc(z) / 2
 * </pre>
 * where <tt>z = x/sqrt(2)</tt>.
 * Computation is via the functions <tt>errorFunction</tt> and <tt>errorFunctionComplement</tt>.</text>
    </javadoc>
    <method type="double" name="normal" startLine="520" endLine="533">
      <declaration type="double" name="x" />
      <scope startLine="527" endLine="530" />
    </method>
    <javadoc>
      <text>* Returns the area under the Normal (Gaussian) probability density
 * function, integrated from minus infinity to <tt>x</tt>.
 * <pre>
 * x
 * -
 * 1        | |                 2
 * normal(x)  = ---------    |    exp( - (t-mean) / 2v ) dt
 * sqrt(2pi*v)| |
 * -
 * -inf.
 * </pre>
 * where <tt>v = variance</tt>.
 * Computation is via the functions <tt>errorFunction</tt>.</text>
      <param>mean the mean of the normal distribution.</param>
      <param>variance the variance of the normal distribution.</param>
      <param>x the integration limit.</param>
    </javadoc>
    <method type="double" name="normal" startLine="554" endLine="559" />
    <javadoc>
      <text>* Returns the value, <tt>x</tt>, for which the area under the
 * Normal (Gaussian) probability density function (integrated from
 * minus infinity to <tt>x</tt>) is equal to the argument <tt>y</tt> (assumes mean is zero, variance is one); formerly named <tt>ndtri</tt>.
 * <p>
 * For small arguments <tt>0 < y < exp(-2)</tt>, the program computes
 * <tt>z = sqrt( -2.0 * log(y) )</tt>;  then the approximation is
 * <tt>x = z - log(z)/z  - (1/z) P(1/z) / Q(1/z)</tt>.
 * There are two rational functions P/Q, one for <tt>0 < y < exp(-32)</tt>
 * and the other for <tt>y</tt> up to <tt>exp(-2)</tt>. 
 * For larger arguments,
 * <tt>w = y - 0.5</tt>, and  <tt>x/sqrt(2pi) = w + w**3 R(w**2)/S(w**2))</tt>.</text>
    </javadoc>
    <method type="double" name="normalInverse" startLine="574" endLine="609">
      <declaration type="double" name="x" />
      <declaration type="int" name="code" />
      <declaration type="double" name="s2pi" />
      <scope startLine="584" endLine="587">
        <comment>if( y > (1.0 - 0.13533528323661269189) ) {  0.135... = exp(-2)</comment>
      </scope>
      <scope startLine="589" endLine="595" />
      <comment>if( x < 8.0 )  y > exp(-32) = 1.2664165549e-14</comment>
    </method>
    <javadoc>
      <text>* Returns the sum of the first <tt>k</tt> terms of the Poisson distribution.
 * <pre>
 * k         j
 * --   -m  m
 * >   e    --
 * --       j!
 * j=0
 * </pre>
 * The terms are not summed directly; instead the incomplete
 * gamma integral is employed, according to the relation
 * <p>
 * <tt>y = poisson( k, m ) = Gamma.incompleteGammaComplement( k+1, m )</tt>.
 * The arguments must both be positive.</text>
      <param>k number of terms.</param>
      <param>mean the mean of the poisson distribution.</param>
    </javadoc>
    <method type="double" name="poisson" startLine="629" endLine="633" />
    <javadoc>
      <text>* Returns the sum of the terms <tt>k+1</tt> to <tt>Infinity</tt> of the Poisson distribution.
 * <pre>
 * inf.       j
 * --   -m  m
 * >   e    --
 * --       j!
 * j=k+1
 * </pre>
 * The terms are not summed directly; instead the incomplete
 * gamma integral is employed, according to the formula
 * <p>
 * <tt>y = poissonComplemented( k, m ) = Gamma.incompleteGamma( k+1, m )</tt>.
 * The arguments must both be positive.</text>
      <param>k start term.</param>
      <param>mean the mean of the poisson distribution.</param>
    </javadoc>
    <method type="double" name="poissonComplemented" startLine="653" endLine="657" />
    <javadoc>
      <text>* Returns the integral from minus infinity to <tt>t</tt> of the Student-t 
 * distribution with <tt>k &gt; 0</tt> degrees of freedom.
 * <pre>
 * t
 * -
 * | |
 * -                      |         2   -(k+1)/2
 * | ( (k+1)/2 )           |  (     x   )
 * ----------------------        |  ( 1 + --- )        dx
 * -               |  (      k  )
 * sqrt( k pi ) | ( k/2 )        |
 * | |
 * -
 * -inf.
 * </pre>
 * Relation to incomplete beta integral:
 * <p>
 * <tt>1 - studentT(k,t) = 0.5 * Gamma.incompleteBeta( k/2, 1/2, z )</tt>
 * where <tt>z = k/(k + t**2)</tt>.
 * <p>
 * Since the function is symmetric about <tt>t=0</tt>, the area under the
 * right tail of the density is found by calling the function
 * with <tt>-t</tt> instead of <tt>t</tt>.</text>
      <param>k degrees of freedom.</param>
      <param>t integration end point.</param>
    </javadoc>
    <method type="double" name="studentT" startLine="686" endLine="695">
      <declaration type="double" name="cdf" />
      <comment>fixes bug reported by stefan.bentink@molgen.mpg.de</comment>
    </method>
    <javadoc>
      <text>* Returns the value, <tt>t</tt>, for which the area under the
 * Student-t probability density function (integrated from
 * minus infinity to <tt>t</tt>) is equal to <tt>1-alpha/2</tt>.
 * The value returned corresponds to usual Student t-distribution lookup
 * table for <tt>t<sub>alpha[size]</sub></tt>.
 * <p>
 * The function uses the studentT function to determine the return
 * value iteratively.</text>
      <param>alpha probability</param>
      <param>size size of data set</param>
    </javadoc>
    <method type="double" name="studentTInverse" startLine="709" endLine="764">
      <declaration type="double" name="cumProb" />
      <declaration type="double" name="f1" />
      <declaration type="double" name="x1" />
      <declaration type="double" name="g" />
      <scope startLine="719" endLine="721" />
      <scope startLine="726" endLine="733">
        <scope startLine="727" endLine="729" />
        <scope startLine="729" endLine="731" />
      </scope>
      <scope startLine="737" endLine="757">
        <scope startLine="744" endLine="747" />
        <scope startLine="749" endLine="752" />
        <scope startLine="752" endLine="756" />
        <comment>Calculate slope of secant and t value for which it is 0.</comment>
        <comment>Calculate function value at x3</comment>
        <comment>This criteria needs to be very tight!</comment>
        <comment>We found a perfect value -> return</comment>
      </scope>
      <scope startLine="759" endLine="761" />
      <scope startLine="761" endLine="763" />
      <comment>Cumulative probability</comment>
      <comment>Cumulative probability</comment>
      <comment>Return inverse of normal for large size</comment>
      <comment>Find a pair of x1,x2 that braket zero</comment>
      <comment>Find better approximation</comment>
      <comment>Pegasus-method</comment>
    </method>
    <comment>approximation for 0 <= |y - 0.5| <= 38</comment>
    <comment>1.00000000000000000000E0,</comment>
    <comment>Approximation for interval z = sqrt(-2 log y ) between 2 and 8
 i.e., y between exp(-2) = .135 and exp(-32) = 1.27e-14.</comment>
    <comment>1.00000000000000000000E0,</comment>
    <comment>Approximation for interval z = sqrt(-2 log y ) between 8 and 64
 i.e., y between exp(-32) = 1.27e-14 and exp(-2048) = 3.67e-890.</comment>
    <comment>1.00000000000000000000E0,</comment>
  </class>
</source>
