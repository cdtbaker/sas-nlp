<?xml version="1.0" encoding="UTF-8"?>
<source package="javax.measure.converter">
  <import name="java.io.Serializable" />
  <class name="UnitConverter" startLine="13">
    <implements name="Serializable" />
    <javadoc>
      <text>* <p> This class represents a converter of numeric values.</p>
 * <p> It is not required for sub-classes to be immutable
 * (e.g. currency converter).</p>
 * <p> Sub-classes must ensure unicity of the {@link #IDENTITY identity} 
 * converter. In other words, if the result of an operation is equivalent
 * to the identity converter, then the unique {@link #IDENTITY} instance 
 * should be returned.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.1, April 22, 2006</version>
    </javadoc>
    <javadoc>
      <text>* Holds the identity converter (unique). This converter does nothing
 * (<code>ONE.convert(x) == x</code>).</text>
    </javadoc>
    <declaration type="UnitConverter" name="IDENTITY" />
    <javadoc>
      <text>* Default constructor.</text>
    </javadoc>
    <method type="constructor" name="UnitConverter" startLine="38" endLine="39" />
    <method name="inverse" type="UnitConverter" startLine="41" endLine="48" />
    <javadoc>
      <text>* Returns the inverse of this converter. If <code>x</code> is a valid
 * value, then <code>x == inverse().convert(convert(x))</code> to within
 * the accuracy of computer arithmetic.</text>
      <return>the inverse of this converter.</return>
    </javadoc>
    <method name="convert" type="double" startLine="50" endLine="57" />
    <javadoc>
      <text>* Converts a double value.</text>
      <param>x the numeric value to convert.</param>
      <return>the converted numeric value.</return>
      <throws>ConversionException if an error occurs during conversion.</throws>
    </javadoc>
    <method name="isLinear" type="boolean" startLine="59" endLine="71" />
    <javadoc>
      <text>* Indicates if this converter is linear. A converter is linear if
 * <code>convert(u + v) == convert(u) + convert(v)</code> and
 * <code>convert(r * u) == r * convert(u)</code>.
 * For linear converters the following property always hold:[code]
 * y1 = c1.convert(x1);
 * y2 = c2.convert(x2); 
 * then y1*y2 = c1.concatenate(c2).convert(x1*x2)[/code]</text>
      <return><code>true</code> if this converter is linear;
 * <code>false</code> otherwise.</return>
    </javadoc>
    <javadoc>
      <text>* Indicates whether this converter is considered the same as the  
 * converter specified. To be considered equal this converter 
 * concatenated with the one specified must returns the {@link #IDENTITY}.</text>
      <param>cvtr the converter with which to compare.</param>
      <return><code>true</code> if the specified object is a converter 
 * considered equals to this converter;<code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="82" endLine="85" />
    <javadoc>
      <text>* Returns a hash code value for this converter. Equals object have equal
 * hash codes.</text>
      <return>this converter hash code value.</return>
      <see>#equals</see>
    </javadoc>
    <method type="int" name="hashCode" startLine="94" endLine="96" />
    <javadoc>
      <text>* Concatenates this converter with another converter. The resulting
 * converter is equivalent to first converting by the specified converter,
 * and then converting by this converter.
 * <p>Note: Implementations must ensure that the {@link #IDENTITY} instance
 * is returned if the resulting converter is an identity 
 * converter.</p></text>
      <param>converter the other converter.</param>
      <return>the concatenation of this converter with the other converter.</return>
    </javadoc>
    <method type="UnitConverter" name="concatenate" startLine="110" endLine="112" />
    <class name="Identity" extends="UnitConverter" startLine="114">
      <javadoc>
        <text>* This inner class represents the identity converter (singleton).</text>
      </javadoc>
      <method type="UnitConverter" name="inverse" startLine="120" endLine="122" />
      <method type="double" name="convert" startLine="125" endLine="127" />
      <method type="boolean" name="isLinear" startLine="130" endLine="132" />
      <method type="UnitConverter" name="concatenate" startLine="135" endLine="137" />
      <declaration type="long" name="serialVersionUID" />
      <class name="Compound" extends="UnitConverter" startLine="143">
        <javadoc>
          <text>* This inner class represents a compound converter.</text>
        </javadoc>
        <javadoc>
          <text>* Holds the first converter.</text>
        </javadoc>
        <declaration type="UnitConverter" name="_first" />
        <javadoc>
          <text>* Holds the second converter.</text>
        </javadoc>
        <declaration type="UnitConverter" name="_second" />
        <javadoc>
          <text>* Creates a compound converter resulting from the combined
 * transformation of the specified converters.</text>
          <param>first the first converter.</param>
          <param>second the second converter.</param>
        </javadoc>
        <method type="constructor" name="Compound" startLine="165" endLine="168" />
        <method type="UnitConverter" name="inverse" startLine="171" endLine="173" />
        <method type="double" name="convert" startLine="176" endLine="178" />
        <method type="boolean" name="isLinear" startLine="181" endLine="183" />
        <declaration type="long" name="serialVersionUID" />
      </class>
    </class>
  </class>
</source>
