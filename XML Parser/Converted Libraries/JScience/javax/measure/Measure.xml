<?xml version="1.0" encoding="UTF-8"?>
<source package="javax.measure">
  <import name="java.io.Serializable" />
  <import name="java.math.BigDecimal" />
  <import name="java.math.MathContext" />
  <import name="javax.measure.quantity.Quantity" />
  <import name="javax.measure.unit.CompoundUnit" />
  <import name="javax.measure.unit.Unit" />
  <class name="Measure" startLine="19">
    <implements name="Measurable<Q>" />
    <implements name="Serializable" />
    <javadoc>
      <text>* <p> This class represents the result of a measurement stated in a 
 * known unit.</p>
 * <p> There is no constraint upon the measurement value itself: scalars, 
 * vectors, or even data sets are valid values as long as 
 * an aggregate magnitude can be determined (see {@link Measurable}).</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>4.2, August 26, 2007</version>
    </javadoc>
    <javadoc>
      <text>* Default constructor.</text>
    </javadoc>
    <method type="constructor" name="Measure" startLine="36" endLine="37" />
    <javadoc>
      <text>* Returns the scalar measure for the specified <code>double</code>
 * stated in the specified unit.</text>
      <param>doubleValue the measurement value.</param>
      <param>unit the measurement unit.</param>
    </javadoc>
    <method type="Measure<java.lang.Double,Q>" name="valueOf" startLine="47" endLine="49" />
    <javadoc>
      <text>* Returns the scalar measure for the specified <code>double</code>
 * stated in the specified unit.</text>
      <param>longValue the measurement value.</param>
      <param>unit the measurement unit.</param>
    </javadoc>
    <method type="Measure<java.lang.Long,Q>" name="valueOf" startLine="59" endLine="61" />
    <javadoc>
      <text>* Returns the scalar measure for the specified <code>float</code>
 * stated in the specified unit.</text>
      <param>floatValue the measurement value.</param>
      <param>unit the measurement unit.</param>
    </javadoc>
    <method type="Measure<java.lang.Float,Q>" name="valueOf" startLine="71" endLine="73" />
    <javadoc>
      <text>* Returns the scalar measure for the specified <code>int</code>
 * stated in the specified unit.</text>
      <param>intValue the measurement value.</param>
      <param>unit the measurement unit.</param>
    </javadoc>
    <method type="Measure<java.lang.Integer,Q>" name="valueOf" startLine="83" endLine="85" />
    <method name="getValue" type="V" startLine="87" endLine="92" />
    <javadoc>
      <text>* Returns the measurement value of this measure.</text>
      <return>the measurement value.</return>
    </javadoc>
    <method name="getUnit" type="Unit<Q>" startLine="94" endLine="99" />
    <javadoc>
      <text>* Returns the measurement unit of this measure.</text>
      <return>the measurement unit.</return>
    </javadoc>
    <method name="to" type="Measure<V,Q>" startLine="101" endLine="109" />
    <javadoc>
      <text>* Returns the measure equivalent to this measure but stated in the 
 * specified unit. This method may result in lost of precision 
 * (e.g. measure of integral value).</text>
      <param>unit the new measurement unit.</param>
      <return>the measure stated in the specified unit.</return>
    </javadoc>
    <method name="doubleValue" type="double" startLine="111" endLine="121" />
    <javadoc>
      <text>* Returns the value of this measure stated in the specified unit as 
 * a <code>double</code>. If the measure has too great a magnitude to 
 * be represented as a <code>double</code>, it will be converted to 
 * <code>Double.NEGATIVE_INFINITY</code> or
 * <code>Double.POSITIVE_INFINITY</code> as appropriate.</text>
      <param>unit the unit in which this measure is stated.</param>
      <return>the numeric value after conversion to type <code>double</code>.</return>
    </javadoc>
    <javadoc>
      <text>* Returns the estimated integral value of this measure stated in 
 * the specified unit as a <code>long</code>. 
 * <p> Note: This method differs from the <code>Number.longValue()</code>
 * in the sense that the closest integer value is returned 
 * and an ArithmeticException is raised instead
 * of a bit truncation in case of overflow (safety critical).</p></text>
      <param>unit the unit in which the measurable value is stated.</param>
      <return>the numeric value after conversion to type <code>long</code>.</return>
      <throws>ArithmeticException if this quantity cannot be represented 
 * as a <code>long</code> number in the specified unit.</throws>
    </javadoc>
    <method type="long" name="longValue" startLine="137" endLine="145">
      <declaration type="double" name="doubleValue" />
    </method>
    <javadoc>
      <text>* Returns the value of this measure stated in the specified unit as a 
 * <code>float</code>. If the measure has too great a magnitude to be 
 * represented as a <code>float</code>, it will be converted to 
 * <code>Float.NEGATIVE_INFINITY</code> or
 * <code>Float.POSITIVE_INFINITY</code> as appropriate.</text>
      <param>unit the unit in which the measure is stated.</param>
      <return>the numeric value after conversion to type <code>float</code>.</return>
    </javadoc>
    <method type="float" name="floatValue" startLine="157" endLine="159" />
    <javadoc>
      <text>* Returns the estimated integral value of this measure stated in 
 * the specified unit as a <code>int</code>. 
 * <p> Note: This method differs from the <code>Number.intValue()</code>
 * in the sense that the closest integer value is returned 
 * and an ArithmeticException is raised instead
 * of a bit truncation in case of overflow (safety critical).</p></text>
      <param>unit the unit in which the measurable value is stated.</param>
      <return>the numeric value after conversion to type <code>int</code>.</return>
      <throws>ArithmeticException if this quantity cannot be represented 
 * as a <code>int</code> number in the specified unit.</throws>
    </javadoc>
    <method type="int" name="intValue" startLine="175" endLine="181">
      <declaration type="long" name="longValue" />
    </method>
    <javadoc>
      <text>* Compares this measure against the specified object for 
 * strict equality (same unit and amount).
 * To compare measures stated using different units the  {@link #compareTo} method should be used.</text>
      <param>obj the object to compare with.</param>
      <return><code>true</code> if both objects are identical (same 
 * unit and same amount); <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="194" endLine="200">
      <declaration type="Measure" name="that" />
    </method>
    <javadoc>
      <text>* Returns the hash code for this scalar.</text>
      <return>the hash code value.</return>
    </javadoc>
    <method type="int" name="hashCode" startLine="207" endLine="209" />
    <javadoc>
      <text>* Returns the <code>String</code> representation of this measure
 * The string produced for a given measure is always the same;
 * it is not affected by locale.  This means that it can be used
 * as a canonical string representation for exchanging data, 
 * or as a key for a Hashtable, etc.  Locale-sensitive
 * measure formatting and parsing is handled by the {@link MeasureFormat} class and its subclasses.</text>
      <return>the string representation of this measure.</return>
    </javadoc>
    <method type="String" name="toString" startLine="222" endLine="227" />
    <javadoc>
      <text>* Compares this measure to the specified measurable quantity.
 * This method compares the {@link Measurable#doubleValue(Unit)} of 
 * both this measure and the specified measurable stated in the 
 * same unit (this measure's {@link #getUnit() unit}).</text>
      <return>a negative integer, zero, or a positive integer as this measure
 * is less than, equal to, or greater than the specified measurable
 * quantity.</return>
      <return><code>Double.compare(this.doubleValue(getUnit()), 
 * that.doubleValue(getUnit()))</code></return>
    </javadoc>
    <method type="int" name="compareTo" startLine="241" endLine="244" />
    <class name="Double" extends="Measure<java.lang.Double,Q>" startLine="246">
      <javadoc>
        <text>* Holds scalar implementation for <code>double</code> values.</text>
      </javadoc>
      <declaration type="double" name="_value" />
      <declaration type="Unit<Q>" name="_unit" />
      <method type="constructor" name="Double" startLine="256" endLine="259" />
      <method type="Unit<Q>" name="getUnit" startLine="262" endLine="264" />
      <method type="java.lang.Double" name="getValue" startLine="267" endLine="269" />
      <method type="Measure<java.lang.Double,Q>" name="to" startLine="272" endLine="276" />
      <method type="double" name="doubleValue" startLine="278" endLine="282" />
      <declaration type="long" name="serialVersionUID" />
      <class name="Long" extends="Measure<java.lang.Long,Q>" startLine="287">
        <javadoc>
          <text>* Holds scalar implementation for <code>long</code> values.</text>
        </javadoc>
        <declaration type="long" name="_value" />
        <declaration type="Unit<Q>" name="_unit" />
        <method type="constructor" name="Long" startLine="297" endLine="300" />
        <method type="Unit<Q>" name="getUnit" startLine="303" endLine="305" />
        <method type="java.lang.Long" name="getValue" startLine="308" endLine="310" />
        <method type="Measure<java.lang.Long,Q>" name="to" startLine="313" endLine="317" />
        <method type="double" name="doubleValue" startLine="319" endLine="323" />
        <method type="long" name="longValue" startLine="325" endLine="329">
          <comment>No conversion, returns value directly.</comment>
        </method>
        <declaration type="long" name="serialVersionUID" />
        <class name="Float" extends="Measure<java.lang.Float,Q>" startLine="335">
          <javadoc>
            <text>* Holds scalar implementation for <code>float</code> values.</text>
          </javadoc>
          <declaration type="float" name="_value" />
          <declaration type="Unit<Q>" name="_unit" />
          <method type="constructor" name="Float" startLine="345" endLine="348" />
          <method type="Unit<Q>" name="getUnit" startLine="351" endLine="353" />
          <method type="java.lang.Float" name="getValue" startLine="356" endLine="358" />
          <method type="Measure<java.lang.Float,Q>" name="to" startLine="361" endLine="365" />
          <method type="double" name="doubleValue" startLine="367" endLine="371" />
          <declaration type="long" name="serialVersionUID" />
          <class name="Integer" extends="Measure<java.lang.Integer,Q>" startLine="376">
            <javadoc>
              <text>* Holds scalar implementation for <code>long</code> values.</text>
            </javadoc>
            <declaration type="int" name="_value" />
            <declaration type="Unit<Q>" name="_unit" />
            <method type="constructor" name="Integer" startLine="386" endLine="389" />
            <method type="Unit<Q>" name="getUnit" startLine="392" endLine="394" />
            <method type="java.lang.Integer" name="getValue" startLine="397" endLine="399" />
            <method type="Measure<java.lang.Integer,Q>" name="to" startLine="402" endLine="406" />
            <method type="double" name="doubleValue" startLine="408" endLine="412" />
            <method type="long" name="longValue" startLine="414" endLine="418">
              <comment>No conversion, returns value directly.</comment>
            </method>
            <declaration type="long" name="serialVersionUID" />
            <javadoc>
              <deprecated>{@link DecimalMeasure} should be used directly.</deprecated>
            </javadoc>
            <method type="Measure<BigDecimal,Q>" name="valueOf" startLine="428" endLine="430" />
            <javadoc>
              <deprecated>{@link DecimalMeasure} should be used directly and 
 * <code>MathContext</code> specified explicitly when {@link DecimalMeasure#to(Unit,MathContext) converting}.</deprecated>
            </javadoc>
            <method type="Measure<BigDecimal,Q>" name="valueOf" startLine="438" endLine="440" />
            <javadoc>
              <deprecated>{@link VectorMeasure} should be used directly.</deprecated>
            </javadoc>
            <method type="Measure<double[],Q>" name="valueOf" startLine="446" endLine="448" />
          </class>
        </class>
      </class>
    </class>
  </class>
</source>
