<?xml version="1.0" encoding="UTF-8"?>
<source package="javax.measure.unit">
  <import name="java.util.Collections" />
  <import name="java.util.HashSet" />
  <import name="java.util.Set" />
  <import name="javax.measure.converter.MultiplyConverter" />
  <import name="javax.measure.converter.RationalConverter" />
  <import name="javax.measure.quantity.*" />
  <class name="SI" extends="SystemOfUnits" startLine="19">
    <javadoc>
      <text>* <p> This class contains SI (Système International d'Unités) base units,
 * and derived units.</p>
 * <p> It also defines the 20 SI prefixes used to form decimal multiples and
 * submultiples of SI units. For example:[code]
 * import static org.jscience.physics.units.SI.*; // Static import.
 * ...
 * Unit<Pressure> HECTO_PASCAL = HECTO(PASCAL);
 * Unit<Length> KILO_METER = KILO(METER);
 * [/code]</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>4.2, August 26, 2006</version>
      <see><a href="http://en.wikipedia.org/wiki/SI">Wikipedia: SI</a></see>
      <see><a href="http://en.wikipedia.org/wiki/SI_prefix">Wikipedia: SI prefix</a></see>
    </javadoc>
    <javadoc>
      <text>* Holds collection of SI units.</text>
    </javadoc>
    <declaration type="HashSet<Unit<?>>" name="UNITS" />
    <javadoc>
      <text>* Default constructor (prevents this class from being instantiated).</text>
    </javadoc>
    <method type="constructor" name="SI" startLine="46" endLine="47" />
    <javadoc>
      <text>* Returns the unique instance of this class.</text>
      <return>the SI instance.</return>
    </javadoc>
    <method type="SI" name="getInstance" startLine="55" endLine="57" />
    <declaration type="SI" name="INSTANCE" />
    <javadoc>
      <text>* The base unit for electric current quantities (<code>A</code>).
 * The Ampere is that constant current which, if maintained in two straight
 * parallel conductors of infinite length, of negligible circular
 * cross-section, and placed 1 metre apart in vacuum, would produce between
 * these conductors a force equal to 2 × 10-7 newton per metre of length.
 * It is named after the French physicist Andre Ampere (1775-1836).</text>
    </javadoc>
    <declaration type="BaseUnit<ElectricCurrent>" name="AMPERE" />
    <javadoc>
      <text>* The base unit for luminous intensity quantities (<code>cd</code>).
 * The candela is the luminous intensity, in a given direction,
 * of a source that emits monochromatic radiation of frequency
 * 540 × 1012 hertz and that has a radiant intensity in that
 * direction of 1/683 watt per steradian</text>
      <see><a href="http://en.wikipedia.org/wiki/Candela"> 
     *      Wikipedia: Candela</a></see>
    </javadoc>
    <declaration type="BaseUnit<LuminousIntensity>" name="CANDELA" />
    <javadoc>
      <text>* The base unit for thermodynamic temperature quantities (<code>K</code>).
 * The kelvin is the 1/273.16th of the thermodynamic temperature of the
 * triple point of water. It is named after the Scottish mathematician and
 * physicist William Thomson 1st Lord Kelvin (1824-1907)</text>
    </javadoc>
    <declaration type="BaseUnit<Temperature>" name="KELVIN" />
    <javadoc>
      <text>* The base unit for mass quantities (<code>kg</code>).
 * It is the only SI unit with a prefix as part of its name and symbol.
 * The kilogram is equal to the mass of an international prototype in the
 * form of a platinum-iridium cylinder kept at Sevres in France.</text>
      <see>#GRAM</see>
    </javadoc>
    <declaration type="BaseUnit<Mass>" name="KILOGRAM" />
    <javadoc>
      <text>* The base unit for length quantities (<code>m</code>).
 * One meter was redefined in 1983 as the distance traveled by light in
 * a vacuum in 1/299,792,458 of a second.</text>
    </javadoc>
    <declaration type="BaseUnit<Length>" name="METRE" />
    <javadoc>
      <text>* Equivalent to {@link #METRE} (American spelling).</text>
    </javadoc>
    <declaration type="Unit<Length>" name="METER" />
    <javadoc>
      <text>* The base unit for amount of substance quantities (<code>mol</code>).
 * The mole is the amount of substance of a system which contains as many
 * elementary entities as there are atoms in 0.012 kilogram of carbon 12.</text>
    </javadoc>
    <declaration type="BaseUnit<AmountOfSubstance>" name="MOLE" />
    <javadoc>
      <text>* The base unit for duration quantities (<code>s</code>).
 * It is defined as the duration of 9,192,631,770 cycles of radiation
 * corresponding to the transition between two hyperfine levels of
 * the ground state of cesium (1967 Standard).</text>
    </javadoc>
    <declaration type="BaseUnit<Duration>" name="SECOND" />
    <javadoc>
      <text>* The derived unit for mass quantities (<code>g</code>).
 * The base unit for mass quantity is {@link #KILOGRAM}.</text>
    </javadoc>
    <declaration type="Unit<Mass>" name="GRAM" />
    <javadoc>
      <text>* The unit for plane angle quantities (<code>rad</code>).
 * One radian is the angle between two radii of a circle such that the
 * length of the arc between them is equal to the radius.</text>
    </javadoc>
    <declaration type="AlternateUnit<Angle>" name="RADIAN" />
    <javadoc>
      <text>* The unit for solid angle quantities (<code>sr</code>).
 * One steradian is the solid angle subtended at the center of a sphere by
 * an area on the surface of the sphere that is equal to the radius squared.
 * The total solid angle of a sphere is 4*Pi steradians.</text>
    </javadoc>
    <declaration type="AlternateUnit<SolidAngle>" name="STERADIAN" />
    <javadoc>
      <text>* The unit for binary information (<code>bit</code>).</text>
    </javadoc>
    <declaration type="AlternateUnit<DataAmount>" name="BIT" />
    <javadoc>
      <text>* The derived unit for frequency (<code>Hz</code>).
 * A unit of frequency equal to one cycle per second.
 * After Heinrich Rudolf Hertz (1857-1894), German physicist who was the
 * first to produce radio waves artificially.</text>
    </javadoc>
    <declaration type="AlternateUnit<Frequency>" name="HERTZ" />
    <javadoc>
      <text>* The derived unit for force (<code>N</code>).
 * One newton is the force required to give a mass of 1 kilogram an Force
 * of 1 metre per second per second. It is named after the English
 * mathematician and physicist Sir Isaac Newton (1642-1727).</text>
    </javadoc>
    <declaration type="AlternateUnit<Force>" name="NEWTON" />
    <javadoc>
      <text>* The derived unit for pressure, stress (<code>Pa</code>).
 * One pascal is equal to one newton per square meter. It is named after
 * the French philosopher and mathematician Blaise Pascal (1623-1662).</text>
    </javadoc>
    <declaration type="AlternateUnit<Pressure>" name="PASCAL" />
    <javadoc>
      <text>* The derived unit for energy, work, quantity of heat (<code>J</code>).
 * One joule is the amount of work done when an applied force of 1 newton
 * moves through a distance of 1 metre in the direction of the force.
 * It is named after the English physicist James Prescott Joule (1818-1889).</text>
    </javadoc>
    <declaration type="AlternateUnit<Energy>" name="JOULE" />
    <javadoc>
      <text>* The derived unit for power, radiant, flux (<code>W</code>).
 * One watt is equal to one joule per second. It is named after the British
 * scientist James Watt (1736-1819).</text>
    </javadoc>
    <declaration type="AlternateUnit<Power>" name="WATT" />
    <javadoc>
      <text>* The derived unit for electric charge, quantity of electricity
 * (<code>C</code>).
 * One Coulomb is equal to the quantity of charge transferred in one second
 * by a steady current of one ampere. It is named after the French physicist
 * Charles Augustin de Coulomb (1736-1806).</text>
    </javadoc>
    <declaration type="AlternateUnit<ElectricCharge>" name="COULOMB" />
    <javadoc>
      <text>* The derived unit for electric potential difference, electromotive force
 * (<code>V</code>).
 * One Volt is equal to the difference of electric potential between two
 * points on a conducting wire carrying a constant current of one ampere
 * when the power dissipated between the points is one watt. It is named
 * after the Italian physicist Count Alessandro Volta (1745-1827).</text>
    </javadoc>
    <declaration type="AlternateUnit<ElectricPotential>" name="VOLT" />
    <javadoc>
      <text>* The derived unit for capacitance (<code>F</code>).
 * One Farad is equal to the capacitance of a capacitor having an equal
 * and opposite charge of 1 coulomb on each plate and a potential difference
 * of 1 volt between the plates. It is named after the British physicist
 * and chemist Michael Faraday (1791-1867).</text>
    </javadoc>
    <declaration type="AlternateUnit<ElectricCapacitance>" name="FARAD" />
    <javadoc>
      <text>* The derived unit for electric resistance (<code>Ω</code> or 
 * <code>Ohm</code>).
 * One Ohm is equal to the resistance of a conductor in which a current of
 * one ampere is produced by a potential of one volt across its terminals.
 * It is named after the German physicist Georg Simon Ohm (1789-1854).</text>
    </javadoc>
    <declaration type="AlternateUnit<ElectricResistance>" name="OHM" />
    <javadoc>
      <text>* The derived unit for electric conductance (<code>S</code>).
 * One Siemens is equal to one ampere per volt. It is named after
 * the German engineer Ernst Werner von Siemens (1816-1892).</text>
    </javadoc>
    <declaration type="AlternateUnit<ElectricConductance>" name="SIEMENS" />
    <javadoc>
      <text>* The derived unit for magnetic flux (<code>Wb</code>).
 * One Weber is equal to the magnetic flux that in linking a circuit of one
 * turn produces in it an electromotive force of one volt as it is uniformly
 * reduced to zero within one second. It is named after the German physicist
 * Wilhelm Eduard Weber (1804-1891).</text>
    </javadoc>
    <declaration type="AlternateUnit<MagneticFlux>" name="WEBER" />
    <javadoc>
      <text>* The derived unit for magnetic flux density (<code>T</code>).
 * One Tesla is equal equal to one weber per square meter. It is named
 * after the Serbian-born American electrical engineer and physicist
 * Nikola Tesla (1856-1943).</text>
    </javadoc>
    <declaration type="AlternateUnit<MagneticFluxDensity>" name="TESLA" />
    <javadoc>
      <text>* The derived unit for inductance (<code>H</code>).
 * One Henry is equal to the inductance for which an induced electromotive
 * force of one volt is produced when the current is varied at the rate of
 * one ampere per second. It is named after the American physicist
 * Joseph Henry (1791-1878).</text>
    </javadoc>
    <declaration type="AlternateUnit<ElectricInductance>" name="HENRY" />
    <javadoc>
      <text>* The derived unit for Celsius temperature (<code>℃</code>).
 * This is a unit of temperature such as the freezing point of water
 * (at one atmosphere of pressure) is 0 ℃, while the boiling point is
 * 100 ℃.</text>
    </javadoc>
    <declaration type="Unit<Temperature>" name="CELSIUS" />
    <javadoc>
      <text>* The derived unit for luminous flux (<code>lm</code>).
 * One Lumen is equal to the amount of light given out through a solid angle
 * by a source of one candela intensity radiating equally in all directions.</text>
    </javadoc>
    <declaration type="AlternateUnit<LuminousFlux>" name="LUMEN" />
    <javadoc>
      <text>* The derived unit for illuminance (<code>lx</code>).
 * One Lux is equal to one lumen per square meter.</text>
    </javadoc>
    <declaration type="AlternateUnit<Illuminance>" name="LUX" />
    <javadoc>
      <text>* The derived unit for activity of a radionuclide (<code>Bq</code>).
 * One becquerel is the radiation caused by one disintegration per second.
 * It is named after the French physicist, Antoine-Henri Becquerel
 * (1852-1908).</text>
    </javadoc>
    <declaration type="AlternateUnit<RadioactiveActivity>" name="BECQUEREL" />
    <javadoc>
      <text>* The derived unit for absorbed dose, specific energy (imparted), kerma
 * (<code>Gy</code>).
 * One gray is equal to the dose of one joule of energy absorbed per one
 * kilogram of matter. It is named after the British physician
 * L. H. Gray (1905-1965).</text>
    </javadoc>
    <declaration type="AlternateUnit<RadiationDoseAbsorbed>" name="GRAY" />
    <javadoc>
      <text>* The derived unit for dose equivalent (<code>Sv</code>).
 * One Sievert is equal  is equal to the actual dose, in grays, multiplied
 * by a "quality factor" which is larger for more dangerous forms of
 * radiation. It is named after the Swedish physicist Rolf Sievert
 * (1898-1966).</text>
    </javadoc>
    <declaration type="AlternateUnit<RadiationDoseEffective>" name="SIEVERT" />
    <javadoc>
      <text>* The derived unit for catalytic activity (<code>kat</code>).</text>
    </javadoc>
    <declaration type="AlternateUnit<CatalyticActivity>" name="KATAL" />
    <javadoc>
      <text>* The metric unit for velocity quantities (<code>m/s</code>).</text>
    </javadoc>
    <declaration type="Unit<Velocity>" name="METRES_PER_SECOND" />
    <javadoc>
      <text>* Equivalent to {@link #METRES_PER_SECOND}.</text>
    </javadoc>
    <declaration type="Unit<Velocity>" name="METERS_PER_SECOND" />
    <javadoc>
      <text>* The metric unit for acceleration quantities (<code>m/s²</code>).</text>
    </javadoc>
    <declaration type="Unit<Acceleration>" name="METRES_PER_SQUARE_SECOND" />
    <javadoc>
      <text>* Equivalent to {@link #METRES_PER_SQUARE_SECOND}.</text>
    </javadoc>
    <declaration type="Unit<Acceleration>" name="METERS_PER_SQUARE_SECOND" />
    <javadoc>
      <text>* The metric unit for area quantities (<code>m²</code>).</text>
    </javadoc>
    <declaration type="Unit<Area>" name="SQUARE_METRE" />
    <javadoc>
      <text>* The metric unit for volume quantities (<code>m³</code>).</text>
    </javadoc>
    <declaration type="Unit<Volume>" name="CUBIC_METRE" />
    <javadoc>
      <text>* Equivalent to <code>KILO(METRE)</code>.</text>
    </javadoc>
    <declaration type="Unit<Length>" name="KILOMETRE" />
    <javadoc>
      <text>* Equivalent to {@link #KILOMETRE}.</text>
    </javadoc>
    <declaration type="Unit<Length>" name="KILOMETER" />
    <javadoc>
      <text>* Equivalent to <code>CENTI(METRE)</code>.</text>
    </javadoc>
    <declaration type="Unit<Length>" name="CENTIMETRE" />
    <javadoc>
      <text>* Equivalent to {@link #CENTIMETRE}.</text>
    </javadoc>
    <declaration type="Unit<Length>" name="CENTIMETER" />
    <javadoc>
      <text>* Equivalent to <code>MILLI(METRE)</code>.</text>
    </javadoc>
    <declaration type="Unit<Length>" name="MILLIMETRE" />
    <javadoc>
      <text>* Equivalent to {@link #MILLIMETRE}.</text>
    </javadoc>
    <declaration type="Unit<Length>" name="MILLIMETER" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>24</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e24)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="YOTTA" startLine="425" endLine="427" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>21</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e21)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="ZETTA" startLine="436" endLine="438" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>18</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e18)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="EXA" startLine="447" endLine="449" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>15</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e15)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="PETA" startLine="458" endLine="460" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>12</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e12)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="TERA" startLine="469" endLine="471" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>9</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e9)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="GIGA" startLine="480" endLine="482" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>6</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e6)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="MEGA" startLine="491" endLine="493" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>3</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e3)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="KILO" startLine="502" endLine="504" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>2</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e2)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="HECTO" startLine="513" endLine="515" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>1</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e1)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="DEKA" startLine="524" endLine="526" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>-1</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e-1)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="DECI" startLine="535" endLine="537" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>-2</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e-2)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="CENTI" startLine="546" endLine="548" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>-3</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e-3)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="MILLI" startLine="557" endLine="559" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>-6</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e-6)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="MICRO" startLine="568" endLine="570" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>-9</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e-9)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="NANO" startLine="579" endLine="581" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>-12</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e-12)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="PICO" startLine="590" endLine="592" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>-15</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e-15)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="FEMTO" startLine="601" endLine="603" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>-18</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e-18)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="ATTO" startLine="612" endLine="614" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>-21</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e-21)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="ZEPTO" startLine="623" endLine="625" />
    <javadoc>
      <text>* Returns the specified unit multiplied by the factor
 * <code>10<sup>-24</sup></code></text>
      <param>unit any unit.</param>
      <return><code>unit.multiply(1e-24)</code>.</return>
    </javadoc>
    <method type="Unit<Q>" name="YOCTO" startLine="634" endLine="636" />
    <javadoc>
      <text>* Returns a read only view over theunits defined in this class.</text>
      <return>the collection of SI units.</return>
    </javadoc>
    <method type="Set<Unit<?>>" name="getUnits" startLine="647" endLine="649" />
    <javadoc>
      <text>* Adds a new unit to the collection.</text>
      <param>unit the unit being added.</param>
      <return><code>unit</code>.</return>
    </javadoc>
    <method type="U" name="si" startLine="657" endLine="660" />
    <declaration type="MultiplyConverter" name="E24" />
    <declaration type="MultiplyConverter" name="E21" />
    <declaration type="RationalConverter" name="E18" />
    <declaration type="RationalConverter" name="E15" />
    <declaration type="RationalConverter" name="E12" />
    <declaration type="RationalConverter" name="E9" />
    <declaration type="RationalConverter" name="E6" />
    <declaration type="RationalConverter" name="E3" />
    <declaration type="RationalConverter" name="E2" />
    <declaration type="RationalConverter" name="E1" />
    <declaration type="RationalConverter" name="Em1" />
    <declaration type="RationalConverter" name="Em2" />
    <declaration type="RationalConverter" name="Em3" />
    <declaration type="RationalConverter" name="Em6" />
    <declaration type="RationalConverter" name="Em9" />
    <declaration type="RationalConverter" name="Em12" />
    <declaration type="RationalConverter" name="Em15" />
    <declaration type="RationalConverter" name="Em18" />
    <declaration type="MultiplyConverter" name="Em21" />
    <declaration type="MultiplyConverter" name="Em24" />
    <javadoc>
      <deprecated>replaced by  {@link #METRES_PER_SECOND}.</deprecated>
    </javadoc>
    <declaration type="Unit<Velocity>" name="METRE_PER_SECOND" />
    <javadoc>
      <deprecated>replaced by  {@link #METRES_PER_SQUARE_SECOND}.</deprecated>
    </javadoc>
    <declaration type="Unit<Acceleration>" name="METRE_PER_SQUARE_SECOND" />
    <comment />
    <comment>BASE UNITS</comment>
    <comment />
    <comment />
    <comment>SI DERIVED ALTERNATE UNITS</comment>
    <comment />
    <comment />
    <comment>SI DERIVED PRODUCT UNITS</comment>
    <comment />
    <comment>/</comment>
    <comment>SI PREFIXES</comment>
    <comment>/</comment>
    <comment>/</comment>
    <comment>Collection View</comment>
    <comment>/</comment>
    <comment>Holds prefix converters (optimization).</comment>
  </class>
</source>
