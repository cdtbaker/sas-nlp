<?xml version="1.0" encoding="UTF-8"?>
<source package="javax.measure.unit">
  <import name="javax.measure.converter.UnitConverter" />
  <import name="javax.measure.quantity.Quantity" />
  <class name="TransformedUnit" extends="DerivedUnit<Q>" startLine="14">
    <javadoc>
      <text>* <p> This class represents the units derived from other units using{@link UnitConverter converters}.</p>
 * <p> Examples of transformed units:[code]
 * CELSIUS = KELVIN.add(273.15);
 * FOOT = METER.multiply(0.3048);
 * MILLISECOND = MILLI(SECOND); 
 * [/code]</p>
 * <p> Transformed units have no label. But like any other units,
 * they may have labels attached to them:[code]
 * UnitFormat.getStandardInstance().label(FOOT, "ft");
 * [/code]
 * or aliases: [code]
 * UnitFormat.getStandardInstance().alias(CENTI(METER)), "centimeter");
 * UnitFormat.getStandardInstance().alias(CENTI(METER)), "centimetre");
 * [/code]</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.1, April 22, 2006</version>
      <see>Unit#plus(double)</see>
      <see>Unit#times(double)</see>
      <see>Unit#transform(UnitConverter)</see>
      <see>UnitFormat</see>
    </javadoc>
    <javadoc>
      <text>* Holds the parent unit (not a transformed unit).</text>
    </javadoc>
    <declaration type="Unit<Q>" name="_parentUnit" />
    <javadoc>
      <text>* Holds the converter to the parent unit.</text>
    </javadoc>
    <declaration type="UnitConverter" name="_toParentUnit" />
    <javadoc>
      <text>* Creates a transformed unit from the specified parent unit.</text>
      <param>parentUnit the untransformed unit from which this unit is 
 * derived.</param>
      <param>toParentUnit the converter to the parent units.</param>
      <throws>IllegalArgumentException if <code>toParentUnit == {@link UnitConverter#IDENTITY UnitConverter.IDENTITY}</code></throws>
    </javadoc>
    <method type="constructor" name="TransformedUnit" startLine="61" endLine="66" />
    <javadoc>
      <text>* Returns the parent unit for this unit. The parent unit is the 
 * untransformed unit from which this unit is derived.</text>
      <return>the untransformed unit from which this unit is derived.</return>
    </javadoc>
    <method type="Unit<Q>" name="getParentUnit" startLine="74" endLine="76" />
    <javadoc>
      <text>* Returns the converter to the parent unit.</text>
      <return>the converter to the parent unit.</return>
    </javadoc>
    <method type="UnitConverter" name="toParentUnit" startLine="83" endLine="85" />
    <javadoc>
      <text>* Indicates if this transformed unit is considered equals to the specified 
 * object (both are transformed units with equal parent unit and equal
 * converter to parent unit).</text>
      <param>that the object to compare for equality.</param>
      <return><code>true</code> if <code>this</code> and <code>that</code>
 * are considered equals; <code>false</code>otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="96" endLine="102">
      <declaration type="TransformedUnit<?>" name="thatUnit" />
    </method>
    <method type="int" name="hashCode" startLine="105" endLine="107" />
    <method type="Unit<? super Q>" name="getStandardUnit" startLine="110" endLine="112" />
    <method type="UnitConverter" name="toStandardUnit" startLine="115" endLine="117" />
    <declaration type="long" name="serialVersionUID" />
    <comment>Implements abstract method.</comment>
    <comment>Implements abstract method.</comment>
    <comment>Implements abstract method.</comment>
  </class>
</source>
