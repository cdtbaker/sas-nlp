<?xml version="1.0" encoding="UTF-8"?>
<source package="javax.measure.unit">
  <import name="java.util.Collections" />
  <import name="java.util.HashSet" />
  <import name="java.util.Set" />
  <import name="javax.measure.converter.LogConverter" />
  <import name="javax.measure.converter.RationalConverter" />
  <import name="javax.measure.quantity.*" />
  <import name="static javax.measure.unit.SI.*" />
  <class name="NonSI" extends="SystemOfUnits" startLine="21">
    <javadoc>
      <text>* <p> This class contains units that are not part of the International
 * System of Units, that is, they are outside the SI, but are important
 * and widely used.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>4.2, August 26, 2007</version>
    </javadoc>
    <javadoc>
      <text>* Holds collection of NonSI units.</text>
    </javadoc>
    <declaration type="HashSet<Unit<?>>" name="UNITS" />
    <javadoc>
      <text>* Holds the standard gravity constant: 9.80665 m/s² exact.</text>
    </javadoc>
    <declaration type="int" name="STANDARD_GRAVITY_DIVIDEND" />
    <declaration type="int" name="STANDARD_GRAVITY_DIVISOR" />
    <javadoc>
      <text>* Holds the international foot: 0.3048 m exact.</text>
    </javadoc>
    <declaration type="int" name="INTERNATIONAL_FOOT_DIVIDEND" />
    <declaration type="int" name="INTERNATIONAL_FOOT_DIViSOR" />
    <javadoc>
      <text>* Holds the avoirdupois pound: 0.45359237 kg exact</text>
    </javadoc>
    <declaration type="int" name="AVOIRDUPOIS_POUND_DIVIDEND" />
    <declaration type="int" name="AVOIRDUPOIS_POUND_DIVISOR" />
    <javadoc>
      <text>* Holds the Avogadro constant.</text>
    </javadoc>
    <declaration type="double" name="AVOGADRO_CONSTANT" />
    <javadoc>
      <text>* Holds the electric charge of one electron.</text>
    </javadoc>
    <declaration type="double" name="ELEMENTARY_CHARGE" />
    <javadoc>
      <text>* Default constructor (prevents this class from being instantiated).</text>
    </javadoc>
    <method type="constructor" name="NonSI" startLine="67" endLine="68" />
    <javadoc>
      <text>* Returns the unique instance of this class.</text>
      <return>the NonSI instance.</return>
    </javadoc>
    <method type="NonSI" name="getInstance" startLine="75" endLine="77" />
    <declaration type="NonSI" name="INSTANCE" />
    <javadoc>
      <text>* A dimensionless unit equals to <code>0.01</code> 
 * (standard name <code>%</code>).</text>
    </javadoc>
    <declaration type="Unit<Dimensionless>" name="PERCENT" />
    <javadoc>
      <text>* A logarithmic unit used to describe a ratio
 * (standard name <code>dB</code>).</text>
    </javadoc>
    <declaration type="Unit<Dimensionless>" name="DECIBEL" />
    <javadoc>
      <text>* A unit of amount of substance equals to one atom
 * (standard name <code>atom</code>).</text>
    </javadoc>
    <declaration type="Unit<AmountOfSubstance>" name="ATOM" />
    <javadoc>
      <text>* A unit of length equal to <code>0.3048 m</code> 
 * (standard name <code>ft</code>).</text>
    </javadoc>
    <declaration type="Unit<Length>" name="FOOT" />
    <javadoc>
      <text>* A unit of length equal to <code>1200/3937 m</code> 
 * (standard name <code>foot_survey_us</code>).
 * See also: <a href="http://www.sizes.com/units/foot.htm">foot</a></text>
    </javadoc>
    <declaration type="Unit<Length>" name="FOOT_SURVEY_US" />
    <javadoc>
      <text>* A unit of length equal to <code>0.9144 m</code>
 * (standard name <code>yd</code>).</text>
    </javadoc>
    <declaration type="Unit<Length>" name="YARD" />
    <javadoc>
      <text>* A unit of length equal to <code>0.0254 m</code> 
 * (standard name <code>in</code>).</text>
    </javadoc>
    <declaration type="Unit<Length>" name="INCH" />
    <javadoc>
      <text>* A unit of length equal to <code>1609.344 m</code>
 * (standard name <code>mi</code>).</text>
    </javadoc>
    <declaration type="Unit<Length>" name="MILE" />
    <javadoc>
      <text>* A unit of length equal to <code>1852.0 m</code>
 * (standard name <code>nmi</code>).</text>
    </javadoc>
    <declaration type="Unit<Length>" name="NAUTICAL_MILE" />
    <javadoc>
      <text>* A unit of length equal to <code>1E-10 m</code>
 * (standard name <code>Å</code>).</text>
    </javadoc>
    <declaration type="Unit<Length>" name="ANGSTROM" />
    <javadoc>
      <text>* A unit of length equal to the average distance from the center of the
 * Earth to the center of the Sun (standard name <code>ua</code>).</text>
    </javadoc>
    <declaration type="Unit<Length>" name="ASTRONOMICAL_UNIT" />
    <javadoc>
      <text>* A unit of length equal to the distance that light travels in one year
 * through a vacuum (standard name <code>ly</code>).</text>
    </javadoc>
    <declaration type="Unit<Length>" name="LIGHT_YEAR" />
    <javadoc>
      <text>* A unit of length equal to the distance at which a star would appear to
 * shift its position by one arcsecond over the course the time
 * (about 3 months) in which the Earth moves a distance of{@link #ASTRONOMICAL_UNIT} in the direction perpendicular to the
 * direction to the star (standard name <code>pc</code>).</text>
    </javadoc>
    <declaration type="Unit<Length>" name="PARSEC" />
    <javadoc>
      <text>* A unit of length equal to <code>0.013837 {@link #INCH}</code> exactly
 * (standard name <code>pt</code>).</text>
      <see>#PIXEL</see>
    </javadoc>
    <declaration type="Unit<Length>" name="POINT" />
    <javadoc>
      <text>* A unit of length equal to <code>1/72 {@link #INCH}</code>
 * (standard name <code>pixel</code>).
 * It is the American point rounded to an even 1/72 inch.</text>
      <see>#POINT</see>
    </javadoc>
    <declaration type="Unit<Length>" name="PIXEL" />
    <javadoc>
      <text>* Equivalent {@link #PIXEL}</text>
    </javadoc>
    <declaration type="Unit<Length>" name="COMPUTER_POINT" />
    <javadoc>
      <text>* A unit of duration equal to <code>60 s</code>
 * (standard name <code>min</code>).</text>
    </javadoc>
    <declaration type="Unit<Duration>" name="MINUTE" />
    <javadoc>
      <text>* A unit of duration equal to <code>60 {@link #MINUTE}</code>
 * (standard name <code>h</code>).</text>
    </javadoc>
    <declaration type="Unit<Duration>" name="HOUR" />
    <javadoc>
      <text>* A unit of duration equal to <code>24 {@link #HOUR}</code>
 * (standard name <code>d</code>).</text>
    </javadoc>
    <declaration type="Unit<Duration>" name="DAY" />
    <javadoc>
      <text>* A unit of duration equal to <code>7 {@link #DAY}</code>
 * (standard name <code>week</code>).</text>
    </javadoc>
    <declaration type="Unit<Duration>" name="WEEK" />
    <javadoc>
      <text>* A unit of duration equal to 365 days, 5 hours, 49 minutes,
 * and 12 seconds (standard name <code>year</code>).</text>
    </javadoc>
    <declaration type="Unit<Duration>" name="YEAR" />
    <javadoc>
      <text>* A unit of duration equal to one twelfth of a year
 * (standard name <code>month</code>).</text>
    </javadoc>
    <declaration type="Unit<Duration>" name="MONTH" />
    <javadoc>
      <text>* A unit of duration equal to the time required for a complete rotation of
 * the earth in reference to any star or to the vernal equinox at the
 * meridian, equal to 23 hours, 56 minutes, 4.09 seconds
 * (standard name <code>day_sidereal</code>).</text>
    </javadoc>
    <declaration type="Unit<Duration>" name="DAY_SIDEREAL" />
    <javadoc>
      <text>* A unit of duration equal to one complete revolution of the
 * earth about the sun, relative to the fixed stars, or 365 days, 6 hours,
 * 9 minutes, 9.54 seconds (standard name <code>year_sidereal</code>).</text>
    </javadoc>
    <declaration type="Unit<Duration>" name="YEAR_SIDEREAL" />
    <javadoc>
      <text>* A unit of duration equal to <code>365 {@link #DAY}</code>
 * (standard name <code>year_calendar</code>).</text>
    </javadoc>
    <declaration type="Unit<Duration>" name="YEAR_CALENDAR" />
    <javadoc>
      <text>* A unit of mass equal to 1/12 the mass of the carbon-12 atom
 * (standard name <code>u</code>).</text>
    </javadoc>
    <declaration type="Unit<Mass>" name="ATOMIC_MASS" />
    <javadoc>
      <text>* A unit of mass equal to the mass of the electron
 * (standard name <code>me</code>).</text>
    </javadoc>
    <declaration type="Unit<Mass>" name="ELECTRON_MASS" />
    <javadoc>
      <text>* A unit of mass equal to <code>453.59237 grams</code> (avoirdupois pound,
 * standard name <code>lb</code>).</text>
    </javadoc>
    <declaration type="Unit<Mass>" name="POUND" />
    <javadoc>
      <text>* A unit of mass equal to <code>1 / 16 {@link #POUND}</code>
 * (standard name <code>oz</code>).</text>
    </javadoc>
    <declaration type="Unit<Mass>" name="OUNCE" />
    <javadoc>
      <text>* A unit of mass equal to <code>2000 {@link #POUND}</code> (short ton, 
 * standard name <code>ton_us</code>).</text>
    </javadoc>
    <declaration type="Unit<Mass>" name="TON_US" />
    <javadoc>
      <text>* A unit of mass equal to <code>2240 {@link #POUND}</code> (long ton,
 * standard name <code>ton_uk</code>).</text>
    </javadoc>
    <declaration type="Unit<Mass>" name="TON_UK" />
    <javadoc>
      <text>* A unit of mass equal to <code>1000 kg</code> (metric ton,
 * standard name <code>t</code>).</text>
    </javadoc>
    <declaration type="Unit<Mass>" name="METRIC_TON" />
    <javadoc>
      <text>* A unit of electric charge equal to the charge on one electron
 * (standard name <code>e</code>).</text>
    </javadoc>
    <declaration type="Unit<ElectricCharge>" name="E" />
    <javadoc>
      <text>* A unit of electric charge equal to equal to the product of Avogadro's
 * number (see {@link SI#MOLE}) and the charge (1 e) on a single electron
 * (standard name <code>Fd</code>).</text>
    </javadoc>
    <declaration type="Unit<ElectricCharge>" name="FARADAY" />
    <javadoc>
      <text>* A unit of electric charge which exerts a force of one dyne on an equal
 * charge at a distance of one centimeter
 * (standard name <code>Fr</code>).</text>
    </javadoc>
    <declaration type="Unit<ElectricCharge>" name="FRANKLIN" />
    <javadoc>
      <text>* A unit of temperature equal to <code>5/9 °K</code>
 * (standard name <code>°R</code>).</text>
    </javadoc>
    <declaration type="Unit<Temperature>" name="RANKINE" />
    <javadoc>
      <text>* A unit of temperature equal to degree Rankine minus 
 * <code>459.67 °R</code> (standard name <code>°F</code>).</text>
      <see>#RANKINE</see>
    </javadoc>
    <declaration type="Unit<Temperature>" name="FAHRENHEIT" />
    <javadoc>
      <text>* A unit of angle equal to a full circle or <code>2<i>&pi;</i> {@link SI#RADIAN}</code> (standard name <code>rev</code>).</text>
    </javadoc>
    <declaration type="Unit<Angle>" name="REVOLUTION" />
    <javadoc>
      <text>* A unit of angle equal to <code>1/360 {@link #REVOLUTION}</code>
 * (standard name <code>°</code>).</text>
    </javadoc>
    <declaration type="Unit<Angle>" name="DEGREE_ANGLE" />
    <javadoc>
      <text>* A unit of angle equal to <code>1/60 {@link #DEGREE_ANGLE}</code>
 * (standard name <code>′</code>).</text>
    </javadoc>
    <declaration type="Unit<Angle>" name="MINUTE_ANGLE" />
    <javadoc>
      <text>* A unit of angle equal to <code>1/60 {@link #MINUTE_ANGLE}</code>
 * (standard name <code>"</code>).</text>
    </javadoc>
    <declaration type="Unit<Angle>" name="SECOND_ANGLE" />
    <javadoc>
      <text>* A unit of angle equal to <code>0.01 {@link SI#RADIAN}</code>
 * (standard name <code>centiradian</code>).</text>
    </javadoc>
    <declaration type="Unit<Angle>" name="CENTIRADIAN" />
    <javadoc>
      <text>* A unit of angle measure equal to <code>1/400 {@link #REVOLUTION}</code>
 * (standard name <code>grade</code>).</text>
    </javadoc>
    <declaration type="Unit<Angle>" name="GRADE" />
    <javadoc>
      <text>* A unit of velocity expressing the number of international {@link #MILE miles} per {@link #HOUR hour} (abbreviation <code>mph</code>).</text>
    </javadoc>
    <declaration type="Unit<Velocity>" name="MILES_PER_HOUR" />
    <javadoc>
      <text>* A unit of velocity expressing the number of {@link SI#KILOMETRE} per {@link #HOUR hour}.</text>
    </javadoc>
    <declaration type="Unit<Velocity>" name="KILOMETRES_PER_HOUR" />
    <javadoc>
      <text>* Equivalent to {@link #KILOMETRES_PER_HOUR}.</text>
    </javadoc>
    <declaration type="Unit<Velocity>" name="KILOMETERS_PER_HOUR" />
    <javadoc>
      <text>* A unit of velocity expressing the number of  {@link #NAUTICAL_MILEnautical miles} per {@link #HOUR hour} (abbreviation <code>kn</code>).</text>
    </javadoc>
    <declaration type="Unit<Velocity>" name="KNOT" />
    <javadoc>
      <text>* A unit of velocity to express the speed of an aircraft relative to
 * the speed of sound (standard name <code>Mach</code>).</text>
    </javadoc>
    <declaration type="Unit<Velocity>" name="MACH" />
    <javadoc>
      <text>* A unit of velocity relative to the speed of light
 * (standard name <code>c</code>).</text>
    </javadoc>
    <declaration type="Unit<Velocity>" name="C" />
    <javadoc>
      <text>* A unit of acceleration equal to the gravity at the earth's surface
 * (standard name <code>grav</code>).</text>
    </javadoc>
    <declaration type="Unit<Acceleration>" name="G" />
    <javadoc>
      <text>* A unit of area equal to <code>100 m²</code>
 * (standard name <code>a</code>).</text>
    </javadoc>
    <declaration type="Unit<Area>" name="ARE" />
    <javadoc>
      <text>* A unit of area equal to <code>100 {@link #ARE}</code>
 * (standard name <code>ha</code>).</text>
    </javadoc>
    <declaration type="Unit<Area>" name="HECTARE" />
    <javadoc>
      <text>* A unit of data amount equal to <code>8 {@link SI#BIT}</code>
 * (BinarY TErm, standard name <code>byte</code>).</text>
    </javadoc>
    <declaration type="Unit<DataAmount>" name="BYTE" />
    <javadoc>
      <text>* Equivalent {@link #BYTE}</text>
    </javadoc>
    <declaration type="Unit<DataAmount>" name="OCTET" />
    <javadoc>
      <text>* A unit of electric charge equal to the centimeter-gram-second
 * electromagnetic unit of magnetomotive force, equal to <code>10/4
 * &pi;ampere-turn</code> (standard name <code>Gi</code>).</text>
    </javadoc>
    <declaration type="Unit<ElectricCurrent>" name="GILBERT" />
    <javadoc>
      <text>* A unit of energy equal to <code>1E-7 J</code>
 * (standard name <code>erg</code>).</text>
    </javadoc>
    <declaration type="Unit<Energy>" name="ERG" />
    <javadoc>
      <text>* A unit of energy equal to one electron-volt (standard name 
 * <code>eV</code>, also recognized <code>keV, MeV, GeV</code>).</text>
    </javadoc>
    <declaration type="Unit<Energy>" name="ELECTRON_VOLT" />
    <javadoc>
      <text>* A unit of illuminance equal to <code>1E4 Lx</code>
 * (standard name <code>La</code>).</text>
    </javadoc>
    <declaration type="Unit<Illuminance>" name="LAMBERT" />
    <javadoc>
      <text>* A unit of magnetic flux equal <code>1E-8 Wb</code>
 * (standard name <code>Mx</code>).</text>
    </javadoc>
    <declaration type="Unit<MagneticFlux>" name="MAXWELL" />
    <javadoc>
      <text>* A unit of magnetic flux density equal <code>1000 A/m</code>
 * (standard name <code>G</code>).</text>
    </javadoc>
    <declaration type="Unit<MagneticFluxDensity>" name="GAUSS" />
    <javadoc>
      <text>* A unit of force equal to <code>1E-5 N</code>
 * (standard name <code>dyn</code>).</text>
    </javadoc>
    <declaration type="Unit<Force>" name="DYNE" />
    <javadoc>
      <text>* A unit of force equal to <code>9.80665 N</code>
 * (standard name <code>kgf</code>).</text>
    </javadoc>
    <declaration type="Unit<Force>" name="KILOGRAM_FORCE" />
    <javadoc>
      <text>* A unit of force equal to <code>{@link #POUND}·{@link #G}</code>
 * (standard name <code>lbf</code>).</text>
    </javadoc>
    <declaration type="Unit<Force>" name="POUND_FORCE" />
    <javadoc>
      <text>* A unit of power equal to the power required to raise a mass of 75
 * kilograms at a velocity of 1 meter per second (metric,
 * standard name <code>hp</code>).</text>
    </javadoc>
    <declaration type="Unit<Power>" name="HORSEPOWER" />
    <javadoc>
      <text>* A unit of pressure equal to the average pressure of the Earth's
 * atmosphere at sea level (standard name <code>atm</code>).</text>
    </javadoc>
    <declaration type="Unit<Pressure>" name="ATMOSPHERE" />
    <javadoc>
      <text>* A unit of pressure equal to <code>100 kPa</code>
 * (standard name <code>bar</code>).</text>
    </javadoc>
    <declaration type="Unit<Pressure>" name="BAR" />
    <javadoc>
      <text>* A unit of pressure equal to the pressure exerted at the Earth's
 * surface by a column of mercury 1 millimeter high
 * (standard name <code>mmHg</code>).</text>
    </javadoc>
    <declaration type="Unit<Pressure>" name="MILLIMETER_OF_MERCURY" />
    <javadoc>
      <text>* A unit of pressure equal to the pressure exerted at the Earth's
 * surface by a column of mercury 1 inch high
 * (standard name <code>inHg</code>).</text>
    </javadoc>
    <declaration type="Unit<Pressure>" name="INCH_OF_MERCURY" />
    <javadoc>
      <text>* A unit of radiation dose absorbed equal to a dose of 0.01 joule of
 * energy per kilogram of mass (J/kg) (standard name <code>rd</code>).</text>
    </javadoc>
    <declaration type="Unit<RadiationDoseAbsorbed>" name="RAD" />
    <javadoc>
      <text>* A unit of radiation dose effective equal to <code>0.01 Sv</code>
 * (standard name <code>rem</code>).</text>
    </javadoc>
    <declaration type="Unit<RadiationDoseEffective>" name="REM" />
    <javadoc>
      <text>* A unit of radioctive activity equal to the activity of a gram of radium
 * (standard name <code>Ci</code>).</text>
    </javadoc>
    <declaration type="Unit<RadioactiveActivity>" name="CURIE" />
    <javadoc>
      <text>* A unit of radioctive activity equal to 1 million radioactive
 * disintegrations per second (standard name <code>Rd</code>).</text>
    </javadoc>
    <declaration type="Unit<RadioactiveActivity>" name="RUTHERFORD" />
    <javadoc>
      <text>* A unit of solid angle equal to <code>4 <i>&pi;</i> steradians</code>
 * (standard name <code>sphere</code>).</text>
    </javadoc>
    <declaration type="Unit<SolidAngle>" name="SPHERE" />
    <javadoc>
      <text>* A unit of volume equal to one cubic decimeter (default label
 * <code>L</code>, also recognized <code>µL, mL, cL, dL</code>).</text>
    </javadoc>
    <declaration type="Unit<Volume>" name="LITRE" />
    <javadoc>
      <text>* Equivalent to {@link #LITRE} (American spelling).</text>
    </javadoc>
    <declaration type="Unit<Volume>" name="LITER" />
    <javadoc>
      <text>* A unit of volume equal to one cubic inch (<code>in³</code>).</text>
    </javadoc>
    <declaration type="Unit<Volume>" name="CUBIC_INCH" />
    <javadoc>
      <text>* A unit of volume equal to one US gallon, Liquid Unit. The U.S. liquid
 * gallon is based on the Queen Anne or Wine gallon occupying 231 cubic
 * inches (standard name <code>gal</code>).</text>
    </javadoc>
    <declaration type="Unit<Volume>" name="GALLON_LIQUID_US" />
    <javadoc>
      <text>* A unit of volume equal to <code>1 / 128 {@link #GALLON_LIQUID_US}</code>
 * (standard name <code>oz_fl</code>).</text>
    </javadoc>
    <declaration type="Unit<Volume>" name="OUNCE_LIQUID_US" />
    <javadoc>
      <text>* A unit of volume equal to one US dry gallon.
 * (standard name <code>gallon_dry_us</code>).</text>
    </javadoc>
    <declaration type="Unit<Volume>" name="GALLON_DRY_US" />
    <javadoc>
      <text>* A unit of volume equal to <code>4.546 09 {@link #LITRE}</code>
 * (standard name <code>gal_uk</code>).</text>
    </javadoc>
    <declaration type="Unit<Volume>" name="GALLON_UK" />
    <javadoc>
      <text>* A unit of volume equal to <code>1 / 160 {@link #GALLON_UK}</code>
 * (standard name <code>oz_fl_uk</code>).</text>
    </javadoc>
    <declaration type="Unit<Volume>" name="OUNCE_LIQUID_UK" />
    <javadoc>
      <text>* A unit of dynamic viscosity equal to <code>1 g/(cm·s)</code>
 * (cgs unit).</text>
    </javadoc>
    <declaration type="Unit<DynamicViscosity>" name="POISE" />
    <javadoc>
      <text>* A unit of kinematic viscosity equal to <code>1 cm²/s</code>
 * (cgs unit).</text>
    </javadoc>
    <declaration type="Unit<KinematicViscosity>" name="STOKE" />
    <javadoc>
      <text>* A unit used to measure the ionizing ability of radiation
 * (standard name <code>Roentgen</code>).</text>
    </javadoc>
    <declaration type="Unit<?>" name="ROENTGEN" />
    <javadoc>
      <text>* Returns a read only view over the units defined in this class.</text>
      <return>the collection of NonSI units.</return>
    </javadoc>
    <method type="Set<Unit<?>>" name="getUnits" startLine="743" endLine="745" />
    <javadoc>
      <text>* Adds a new unit to the collection.</text>
      <param>unit the unit being added.</param>
      <return><code>unit</code>.</return>
    </javadoc>
    <method type="U" name="nonSI" startLine="753" endLine="756" />
    <comment>(1/mol).</comment>
    <comment>(C).</comment>
    <comment>/</comment>
    <comment>Dimensionless</comment>
    <comment>/</comment>
    <comment>/</comment>
    <comment>Amount of substance</comment>
    <comment>/</comment>
    <comment />
    <comment>Length</comment>
    <comment />
    <comment />
    <comment>Duration</comment>
    <comment />
    <comment />
    <comment>Mass</comment>
    <comment />
    <comment>/</comment>
    <comment>Electric charge</comment>
    <comment>/</comment>
    <comment>e/mol</comment>
    <comment>/</comment>
    <comment>Temperature</comment>
    <comment>/</comment>
    <comment>/</comment>
    <comment>Angle</comment>
    <comment>/</comment>
    <comment />
    <comment>Velocity</comment>
    <comment />
    <comment />
    <comment>Acceleration</comment>
    <comment />
    <comment />
    <comment>Area</comment>
    <comment />
    <comment>Exact.</comment>
    <comment>/</comment>
    <comment>Data Amount</comment>
    <comment>/</comment>
    <comment />
    <comment>Electric current</comment>
    <comment />
    <comment />
    <comment>Energy</comment>
    <comment />
    <comment>/</comment>
    <comment>Illuminance</comment>
    <comment>/</comment>
    <comment>/</comment>
    <comment>Magnetic Flux</comment>
    <comment>/</comment>
    <comment>/</comment>
    <comment>Magnetic Flux Density</comment>
    <comment>/</comment>
    <comment>/</comment>
    <comment>Force</comment>
    <comment>/</comment>
    <comment>/</comment>
    <comment>Power</comment>
    <comment>/</comment>
    <comment />
    <comment>Pressure</comment>
    <comment />
    <comment>/</comment>
    <comment>Radiation dose absorbed</comment>
    <comment>/</comment>
    <comment />
    <comment>Radioactive activity</comment>
    <comment />
    <comment>/</comment>
    <comment>Solid angle</comment>
    <comment>/</comment>
    <comment />
    <comment>Volume</comment>
    <comment />
    <comment>/</comment>
    <comment>Viscosity</comment>
    <comment>/</comment>
    <comment />
    <comment>Others</comment>
    <comment />
    <comment>/</comment>
    <comment>Collection View</comment>
    <comment>/</comment>
  </class>
</source>
