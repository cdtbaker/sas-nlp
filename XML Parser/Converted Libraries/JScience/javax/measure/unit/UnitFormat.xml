<?xml version="1.0" encoding="UTF-8"?>
<source package="javax.measure.unit">
  <import name="java.io.IOException" />
  <import name="java.lang.CharSequence" />
  <import name="java.text.FieldPosition" />
  <import name="java.text.Format" />
  <import name="java.text.ParseException" />
  <import name="java.text.ParsePosition" />
  <import name="java.util.HashMap" />
  <import name="java.util.Locale" />
  <import name="javax.measure.converter.AddConverter" />
  <import name="javax.measure.converter.MultiplyConverter" />
  <import name="javax.measure.converter.RationalConverter" />
  <import name="javax.measure.converter.UnitConverter" />
  <import name="javax.measure.quantity.Quantity" />
  <import name="static javax.measure.unit.SI.*" />
  <class name="UnitFormat" extends="Format" startLine="28">
    <javadoc>
      <text>* <p> This class provides the interface for formatting and parsing {@link Unit units}.</p>
 * <p> For all {@link SI} units, the 20 SI prefixes used to form decimal
 * multiples and sub-multiples of SI units are recognized.{@link NonSI} units are directly recognized. For example:[code]
 * Unit.valueOf("mÂ°C").equals(SI.MILLI(SI.CELSIUS))
 * Unit.valueOf("kW").equals(SI.KILO(SI.WATT))
 * Unit.valueOf("ft").equals(SI.METER.multiply(0.3048))[/code]</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <author>Eric Russell</author>
      <version>1.3, August 29, 2006</version>
    </javadoc>
    <javadoc>
      <text>* Holds the standard unit format.</text>
    </javadoc>
    <declaration type="DefaultFormat" name="DEFAULT" />
    <javadoc>
      <text>* Holds the ASCIIFormat unit format.</text>
    </javadoc>
    <declaration type="ASCIIFormat" name="ASCII" />
    <javadoc>
      <text>* Returns the unit format for the default locale (format used by {@link Unit#valueOf(CharSequence) Unit.valueOf(CharSequence)} and {@link Unit#toString() Unit.toString()}).</text>
      <return>the default unit format (locale sensitive).</return>
    </javadoc>
    <method type="UnitFormat" name="getInstance" startLine="62" endLine="64" />
    <javadoc>
      <text>* Returns the unit format for the specified locale.</text>
      <return>the unit format for the specified locale.</return>
    </javadoc>
    <method type="UnitFormat" name="getInstance" startLine="71" endLine="73">
      <comment>TBD: Implement Locale Format.</comment>
    </method>
    <javadoc>
      <text>* Returns the <a href="http://aurora.regenstrief.org/UCUM/ucum.html">UCUM
 * </a> international unit format; this format uses characters range
 * <code>0000-007F</code> exclusively and <b>is not</b> locale-sensitive.
 * For example: <code>kg.m/s2</code></text>
      <return>the UCUM international format.</return>
    </javadoc>
    <method type="UnitFormat" name="getUCUMInstance" startLine="83" endLine="85">
      <comment>TBD - Provide UCUM implementation.</comment>
    </method>
    <javadoc>
      <text>* Base constructor.</text>
    </javadoc>
    <method type="constructor" name="UnitFormat" startLine="90" endLine="91" />
    <method name="format" type="Appendable" startLine="93" endLine="101" />
    <javadoc>
      <text>* Formats the specified unit.</text>
      <param>unit the unit to format.</param>
      <param>appendable the appendable destination.</param>
      <throws>IOException if an error occurs.</throws>
    </javadoc>
    <method name="parseProductUnit" type="Unit<? extends Quantity>" startLine="103" endLine="114" />
    <javadoc>
      <text>* Parses a sequence of character to produce a unit or a rational product
 * of unit.</text>
      <param>csq the <code>CharSequence</code> to parse.</param>
      <param>pos an object holding the parsing index and error position.</param>
      <return>an {@link Unit} parsed from the character sequence.</return>
      <throws>IllegalArgumentException if the character sequence contains
 * an illegal syntax.</throws>
    </javadoc>
    <method name="parseSingleUnit" type="Unit<? extends Quantity>" startLine="116" endLine="126" />
    <javadoc>
      <text>* Parses a sequence of character to produce a single unit.</text>
      <param>csq the <code>CharSequence</code> to parse.</param>
      <param>pos an object holding the parsing index and error position.</param>
      <return>an {@link Unit} parsed from the character sequence.</return>
      <throws>IllegalArgumentException if the character sequence does not contain 
 * a valid unit identifier.</throws>
    </javadoc>
    <method name="label" type="void" startLine="128" endLine="142" />
    <javadoc>
      <text>* Attaches a system-wide label to the specified unit. For example:
 * [code]
 * UnitFormat.getInstance().label(DAY.multiply(365), "year");
 * UnitFormat.getInstance().label(METER.multiply(0.3048), "ft");
 * [/code]
 * If the specified label is already associated to an unit the previous 
 * association is discarded or ignored.</text>
      <param>unit the unit being labelled.</param>
      <param>label the new label for this unit.</param>
      <throws>IllegalArgumentException if the label is not a {@link UnitFormat#isValidIdentifier(String)} valid identifier.</throws>
    </javadoc>
    <method name="alias" type="void" startLine="144" endLine="162" />
    <javadoc>
      <text>* Attaches a system-wide alias to this unit. Multiple aliases may
 * be attached to the same unit. Aliases are used during parsing to
 * recognize different variants of the same unit. For example:
 * [code]
 * UnitFormat.getLocaleInstance().alias(METER.multiply(0.3048), "foot");
 * UnitFormat.getLocaleInstance().alias(METER.multiply(0.3048), "feet");
 * UnitFormat.getLocaleInstance().alias(METER, "meter");
 * UnitFormat.getLocaleInstance().alias(METER, "metre");
 * [/code]
 * If the specified label is already associated to an unit the previous 
 * association is discarded or ignored.</text>
      <param>unit the unit being aliased.</param>
      <param>alias the alias attached to this unit.</param>
      <throws>IllegalArgumentException if the label is not a {@link UnitFormat#isValidIdentifier(String)} valid identifier.</throws>
    </javadoc>
    <method name="isValidIdentifier" type="boolean" startLine="164" endLine="171" />
    <javadoc>
      <text>* Indicates if the specified name can be used as unit identifier.</text>
      <param>name the identifier to be tested.</param>
      <return><code>true</code> if the name specified can be used as 
 * label or alias for this format;<code>false</code> otherwise.</return>
    </javadoc>
    <javadoc>
      <text>* Formats an unit and appends the resulting text to a given string
 * buffer (implements <code>java.text.Format</code>).</text>
      <param>unit the unit to format.</param>
      <param>toAppendTo where the text is to be appended</param>
      <param>pos the field position (not used).</param>
      <return><code>toAppendTo</code></return>
    </javadoc>
    <method type="StringBuffer" name="format" startLine="183" endLine="210">
      <scope startLine="184" endLine="207">
        <declaration type="Object" name="dest" />
        <scope startLine="186" endLine="188" />
        <scope startLine="188" endLine="205">
          <method type="Appendable" name="append" startLine="191" endLine="194" />
          <method type="Appendable" name="append" startLine="196" endLine="199" />
          <method type="Appendable" name="append" startLine="201" endLine="204" />
        </scope>
        <comment>When retroweaver is used to produce 1.4 binaries.</comment>
      </scope>
      <scope startLine="207" endLine="209">
        <comment>Should never happen.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Parses the text from a string to produce an object
 * (implements <code>java.text.Format</code>).</text>
      <param>source the string source, part of which should be parsed.</param>
      <param>pos the cursor position.</param>
      <return>the corresponding unit or <code>null</code> if the string 
 * cannot be parsed.</return>
    </javadoc>
    <method type="Unit<?>" name="parseObject" startLine="221" endLine="230">
      <declaration type="int" name="start" />
      <scope startLine="223" endLine="225" />
      <scope startLine="225" endLine="229" />
    </method>
    <class name="Exponent" startLine="233">
      <javadoc>
        <text>* This class represents an exponent with both a power (numerator)
 * and a root (denominator).</text>
      </javadoc>
      <declaration type="int" name="pow" />
      <declaration type="int" name="root" />
      <method type="constructor" name="Exponent" startLine="240" endLine="243" />
      <class name="DefaultFormat" extends="UnitFormat" startLine="246">
        <javadoc>
          <text>* This class represents the standard format.</text>
        </javadoc>
        <javadoc>
          <text>* Holds the name to unit mapping.</text>
        </javadoc>
        <declaration type="HashMap<String,Unit<?>>" name="_nameToUnit" />
        <javadoc>
          <text>* Holds the unit to name mapping.</text>
        </javadoc>
        <declaration type="HashMap<Unit<?>,String>" name="_unitToName" />
        <method type="void" name="label" startLine="262" endLine="270">
          <scope startLine="266" endLine="269" />
        </method>
        <method type="void" name="alias" startLine="273" endLine="280">
          <scope startLine="277" endLine="279" />
        </method>
        <method type="boolean" name="isValidIdentifier" startLine="283" endLine="291">
          <scope startLine="286" endLine="289" />
        </method>
        <method type="boolean" name="isUnitIdentifierPart" startLine="293" endLine="300" />
        <method type="String" name="nameFor" startLine="303" endLine="359">
          <declaration type="String" name="label" />
          <scope startLine="312" endLine="351">
            <declaration type="TransformedUnit<?>" name="tfmUnit" />
            <declaration type="Unit<?>" name="baseUnits" />
            <declaration type="UnitConverter" name="cvtr" />
            <declaration type="StringBuffer" name="result" />
            <declaration type="String" name="baseUnitName" />
            <scope startLine="320" endLine="327" />
            <scope startLine="327" endLine="329" />
            <scope startLine="330" endLine="333" />
            <scope startLine="333" endLine="344">
              <declaration type="long" name="dividend" />
              <scope startLine="335" endLine="338" />
              <declaration type="long" name="divisor" />
              <scope startLine="340" endLine="343" />
            </scope>
            <scope startLine="344" endLine="347" />
            <scope startLine="347" endLine="349" />
            <comment>We could use parentheses whenever baseUnits is an</comment>
            <comment>instanceof ProductUnit, but most ProductUnits have aliases,</comment>
            <comment>so we'd end up with a lot of unnecessary parentheses.</comment>
            <comment>Other converters.</comment>
          </scope>
          <scope startLine="353" endLine="357">
            <declaration type="CompoundUnit<?>" name="cpdUnit" />
          </scope>
          <comment>Searches label database.</comment>
          <comment>Compound unit.</comment>
          <comment>Product unit.</comment>
        </method>
        <method type="Unit<?>" name="unitFor" startLine="362" endLine="368">
          <declaration type="Unit<?>" name="unit" />
        </method>
        <method type="Unit<? extends Quantity>" name="parseSingleUnit" startLine="375" endLine="381">
          <declaration type="int" name="startIndex" />
          <declaration type="String" name="name" />
          <declaration type="Unit" name="unit" />
        </method>
        <method type="Unit<? extends Quantity>" name="parseProductUnit" startLine="386" endLine="472">
          <declaration type="Unit" name="result" />
          <declaration type="int" name="token" />
          <scope startLine="402" endLine="471">
            <declaration type="Exponent" name="e" />
            <scope startLine="406" endLine="408" />
            <scope startLine="409" endLine="411" />
            <scope startLine="416" endLine="421">
              <declaration type="long" name="n" />
              <scope startLine="418" endLine="420" />
            </scope>
            <scope startLine="421" endLine="426">
              <declaration type="double" name="d" />
              <scope startLine="423" endLine="425" />
            </scope>
            <scope startLine="426" endLine="428" />
            <scope startLine="433" endLine="438">
              <declaration type="long" name="n" />
              <scope startLine="435" endLine="437" />
            </scope>
            <scope startLine="438" endLine="443">
              <declaration type="double" name="d" />
              <scope startLine="440" endLine="442" />
            </scope>
            <scope startLine="443" endLine="445" />
            <scope startLine="450" endLine="455">
              <declaration type="long" name="n" />
              <scope startLine="452" endLine="454" />
            </scope>
            <scope startLine="455" endLine="460">
              <declaration type="double" name="d" />
              <scope startLine="457" endLine="459" />
            </scope>
            <scope startLine="460" endLine="462" />
          </scope>
        </method>
        <declaration type="int" name="EOF" />
        <declaration type="int" name="IDENTIFIER" />
        <declaration type="int" name="OPEN_PAREN" />
        <declaration type="int" name="CLOSE_PAREN" />
        <declaration type="int" name="EXPONENT" />
        <declaration type="int" name="MULTIPLY" />
        <declaration type="int" name="DIVIDE" />
        <declaration type="int" name="PLUS" />
        <declaration type="int" name="INTEGER" />
        <declaration type="int" name="FLOAT" />
        <method type="int" name="nextToken" startLine="485" endLine="524">
          <declaration type="int" name="length" />
          <scope startLine="487" endLine="522">
            <declaration type="char" name="c" />
            <scope startLine="489" endLine="491" />
            <scope startLine="491" endLine="493" />
            <scope startLine="493" endLine="495" />
            <scope startLine="495" endLine="497" />
            <scope startLine="497" endLine="504">
              <declaration type="char" name="c2" />
              <scope startLine="499" endLine="501" />
              <scope startLine="501" endLine="503" />
            </scope>
            <scope startLine="504" endLine="506" />
            <scope startLine="506" endLine="508" />
            <scope startLine="508" endLine="510" />
            <scope startLine="510" endLine="520">
              <declaration type="int" name="index" />
              <scope startLine="513" endLine="518">
                <scope startLine="515" endLine="517" />
              </scope>
            </scope>
          </scope>
        </method>
        <method type="void" name="check" startLine="527" endLine="532">
          <scope startLine="528" endLine="531" />
        </method>
        <method type="Exponent" name="readExponent" startLine="534" endLine="590">
          <declaration type="char" name="c" />
          <scope startLine="536" endLine="538" />
          <scope startLine="538" endLine="540" />
          <declaration type="int" name="length" />
          <declaration type="int" name="pow" />
          <declaration type="boolean" name="isPowNegative" />
          <declaration type="int" name="root" />
          <declaration type="boolean" name="isRootNegative" />
          <declaration type="boolean" name="isRoot" />
          <scope startLine="547" endLine="585">
            <scope startLine="549" endLine="555">
              <scope startLine="550" endLine="552" />
              <scope startLine="552" endLine="554" />
            </scope>
            <scope startLine="555" endLine="561">
              <scope startLine="556" endLine="558" />
              <scope startLine="558" endLine="560" />
            </scope>
            <scope startLine="561" endLine="567">
              <scope startLine="562" endLine="564" />
              <scope startLine="564" endLine="566" />
            </scope>
            <scope startLine="567" endLine="573">
              <scope startLine="568" endLine="570" />
              <scope startLine="570" endLine="572" />
            </scope>
            <scope startLine="573" endLine="579">
              <scope startLine="574" endLine="576" />
              <scope startLine="576" endLine="578" />
            </scope>
            <scope startLine="579" endLine="581" />
            <scope startLine="581" endLine="583" />
          </scope>
        </method>
        <method type="long" name="readLong" startLine="592" endLine="608">
          <declaration type="int" name="length" />
          <declaration type="int" name="result" />
          <declaration type="boolean" name="isNegative" />
          <scope startLine="596" endLine="606">
            <declaration type="char" name="c" />
            <scope startLine="598" endLine="600" />
            <scope startLine="600" endLine="602" />
            <scope startLine="602" endLine="604" />
          </scope>
        </method>
        <method type="double" name="readDouble" startLine="610" endLine="622">
          <declaration type="int" name="length" />
          <declaration type="int" name="start" />
          <declaration type="int" name="end" />
          <scope startLine="614" endLine="619">
            <scope startLine="615" endLine="617" />
          </scope>
        </method>
        <method type="String" name="readIdentifier" startLine="624" endLine="631">
          <declaration type="int" name="length" />
          <declaration type="int" name="start" />
          <declaration type="int" name="i" />
          <scope startLine="628" endLine="628" />
        </method>
        <method type="Appendable" name="format" startLine="638" endLine="693">
          <declaration type="String" name="name" />
          <declaration type="ProductUnit<?>" name="productUnit" />
          <declaration type="int" name="invNbr" />
          <declaration type="boolean" name="start" />
          <scope startLine="651" endLine="664">
            <declaration type="int" name="pow" />
            <scope startLine="653" endLine="661">
              <scope startLine="654" endLine="656" />
              <declaration type="int" name="root" />
            </scope>
            <scope startLine="661" endLine="663" />
            <comment>Separator.</comment>
          </scope>
          <scope startLine="667" endLine="691">
            <scope startLine="668" endLine="670" />
            <scope startLine="672" endLine="674" />
            <scope startLine="676" endLine="687">
              <declaration type="int" name="pow" />
              <scope startLine="678" endLine="686">
                <declaration type="int" name="root" />
                <scope startLine="681" endLine="683" />
              </scope>
            </scope>
            <scope startLine="688" endLine="690" />
            <comment>e.g. 1/s</comment>
            <comment>Separator.</comment>
          </scope>
          <comment>Product unit.</comment>
          <comment>Write positive exponents first.</comment>
          <comment>Write negative exponents.</comment>
        </method>
        <method type="void" name="append" startLine="696" endLine="714">
          <scope startLine="698" endLine="713">
            <scope startLine="700" endLine="702" />
            <scope startLine="702" endLine="704" />
            <scope startLine="704" endLine="712">
              <scope startLine="708" endLine="711" />
            </scope>
            <comment>Write exponent.</comment>
            <comment>Square</comment>
            <comment>Cubic</comment>
            <comment>Use general exponent form.</comment>
          </scope>
        </method>
        <declaration type="long" name="serialVersionUID" />
        <class name="ASCIIFormat" extends="DefaultFormat" startLine="719">
          <javadoc>
            <text>* This class represents the ASCIIFormat format.</text>
          </javadoc>
          <method type="String" name="nameFor" startLine="725" endLine="732">
            <declaration type="String" name="name" />
            <comment>First search if specific ASCII name should be used.</comment>
            <comment>Else returns default name.</comment>
          </method>
          <method type="Unit<?>" name="unitFor" startLine="735" endLine="742">
            <declaration type="Unit<?>" name="unit" />
            <comment>First search if specific ASCII name.</comment>
            <comment>Else returns default mapping.</comment>
          </method>
          <method type="Appendable" name="format" startLine="746" endLine="774">
            <declaration type="String" name="name" />
            <declaration type="ProductUnit<?>" name="productUnit" />
            <scope startLine="755" endLine="772">
              <scope startLine="756" endLine="758" />
              <declaration type="int" name="pow" />
              <declaration type="int" name="root" />
              <scope startLine="763" endLine="771">
                <scope startLine="767" endLine="770" />
              </scope>
              <comment>Separator.</comment>
              <comment>Use general exponent form.</comment>
            </scope>
          </method>
          <declaration type="long" name="serialVersionUID" />
          <declaration type="Unit<?>[]" name="SI_UNITS" />
          <declaration type="String[]" name="PREFIXES" />
          <declaration type="UnitConverter[]" name="CONVERTERS" />
          <method type="String" name="asciiPrefix" startLine="797" endLine="799" />
          <scope startLine="801" endLine="842">
            <scope startLine="802" endLine="813">
              <scope startLine="803" endLine="812">
                <declaration type="Unit<?>" name="si" />
                <declaration type="Unit<?>" name="u" />
                <declaration type="String" name="symbol" />
                <scope startLine="809" endLine="811" />
              </scope>
            </scope>
            <scope startLine="816" endLine="823">
              <scope startLine="820" endLine="822" />
            </scope>
            <scope startLine="828" endLine="831" />
            <scope startLine="837" endLine="841" />
            <comment>Special case for KILOGRAM.</comment>
            <comment>kg is already defined.</comment>
            <comment>Alias and ASCIIFormat for Ohm</comment>
            <comment>Special case for DEGREE_CElSIUS.</comment>
          </scope>
          <scope startLine="846" endLine="939">
            <scope startLine="935" endLine="938" />
          </scope>
        </class>
      </class>
    </class>
    <comment>Returns the name for the specified unit or null if product unit.</comment>
    <comment>Returns the unit for the specified name.</comment>
    <comment />
    <comment>Parsing.</comment>
    <comment />
    <comment>Formatting.</comment>
    <comment />
    <comment>Initializes the standard unit database for SI units.</comment>
    <comment />
    <comment>To be moved in resource bundle in future release (locale dependent).</comment>
  </class>
</source>
