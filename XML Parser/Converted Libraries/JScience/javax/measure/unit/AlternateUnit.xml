<?xml version="1.0" encoding="UTF-8"?>
<source package="javax.measure.unit">
  <import name="javax.measure.converter.UnitConverter" />
  <import name="javax.measure.quantity.Quantity" />
  <class name="AlternateUnit" extends="DerivedUnit<Q>" startLine="14">
    <javadoc>
      <text>* <p> This class represents the units used in expressions to distinguish
 * between quantities of a different nature but of the same dimensions.</p>
 * <p> Instances of this class are created through the {@link Unit#alternate(String)} method.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>4.2, August 26, 2007</version>
    </javadoc>
    <javadoc>
      <text>* Holds the symbol.</text>
    </javadoc>
    <declaration type="String" name="_symbol" />
    <javadoc>
      <text>* Holds the parent unit (a system unit).</text>
    </javadoc>
    <declaration type="Unit<?>" name="_parent" />
    <javadoc>
      <text>* Creates an alternate unit for the specified unit identified by the 
 * specified symbol.</text>
      <param>symbol the symbol for this alternate unit.</param>
      <param>parent the system unit from which this alternate unit is
 * derived.</param>
      <throws>UnsupportedOperationException if the source is not 
 * a standard unit.</throws>
      <throws>IllegalArgumentException if the specified symbol is 
 * associated to a different unit.</throws>
    </javadoc>
    <method type="constructor" name="AlternateUnit" startLine="48" endLine="70">
      <scope startLine="55" endLine="69">
        <declaration type="Unit<?>" name="unit" />
        <scope startLine="57" endLine="60" />
        <scope startLine="61" endLine="66">
          <declaration type="AlternateUnit<?>" name="existingUnit" />
        </scope>
        <comment>OK, same unit.</comment>
      </scope>
      <comment>Checks if the symbol is associated to a different unit.</comment>
    </method>
    <javadoc>
      <text>* Returns the symbol for this alternate unit.</text>
      <return>this alternate unit symbol.</return>
    </javadoc>
    <method type="String" name="getSymbol" startLine="77" endLine="79" />
    <javadoc>
      <text>* Returns the parent unit from which this alternate unit is derived 
 * (a system unit itself).</text>
      <return>the parent of the alternate unit.</return>
    </javadoc>
    <method type="Unit<? super Q>" name="getParent" startLine="88" endLine="90" />
    <method type="Unit<? super Q>" name="getStandardUnit" startLine="93" endLine="95" />
    <method type="UnitConverter" name="toStandardUnit" startLine="98" endLine="100" />
    <javadoc>
      <text>* Indicates if this alternate unit is considered equals to the specified 
 * object (both are alternate units with equal symbol, equal base units
 * and equal converter to base units).</text>
      <param>that the object to compare for equality.</param>
      <return><code>true</code> if <code>this</code> and <code>that</code>
 * are considered equals; <code>false</code>otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="111" endLine="118">
      <declaration type="AlternateUnit<?>" name="thatUnit" />
      <comment>Symbols are unique.</comment>
    </method>
    <method type="int" name="hashCode" startLine="121" endLine="123" />
    <declaration type="long" name="serialVersionUID" />
    <comment>Implements abstract method.</comment>
  </class>
</source>
