<?xml version="1.0" encoding="UTF-8"?>
<source package="javax.measure.unit">
  <import name="java.io.Serializable" />
  <import name="javax.measure.converter.RationalConverter" />
  <import name="javax.measure.converter.UnitConverter" />
  <import name="javax.measure.quantity.Dimensionless" />
  <class name="Dimension" startLine="17">
    <implements name="Serializable" />
    <javadoc>
      <text>* <p> This class represents the dimension of an unit. Two units <code>u1</code>
 * and <code>u2</code> are {@link Unit#isCompatible compatible} if and
 * only if <code>(u1.getDimension().equals(u2.getDimension())))</code>
 * </p>
 * <p> Instances of this class are immutable.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.1, April 22, 2006</version>
      <see><a href="http://en.wikipedia.org/wiki/Dimensional_analysis">
 *      Wikipedia: Dimensional Analysis</a></see>
    </javadoc>
    <javadoc>
      <text>* Holds the current physical model.</text>
    </javadoc>
    <declaration type="Model" name="CurrentModel" />
    <javadoc>
      <text>* Holds dimensionless.</text>
    </javadoc>
    <declaration type="Dimension" name="NONE" />
    <javadoc>
      <text>* Holds length dimension (L).</text>
    </javadoc>
    <declaration type="Dimension" name="LENGTH" />
    <javadoc>
      <text>* Holds mass dimension (M).</text>
    </javadoc>
    <declaration type="Dimension" name="MASS" />
    <javadoc>
      <text>* Holds time dimension (T).</text>
    </javadoc>
    <declaration type="Dimension" name="TIME" />
    <javadoc>
      <text>* Holds electric current dimension (I).</text>
    </javadoc>
    <declaration type="Dimension" name="ELECTRIC_CURRENT" />
    <javadoc>
      <text>* Holds temperature dimension (Î¸).</text>
    </javadoc>
    <declaration type="Dimension" name="TEMPERATURE" />
    <javadoc>
      <text>* Holds amount of substance dimension (N).</text>
    </javadoc>
    <declaration type="Dimension" name="AMOUNT_OF_SUBSTANCE" />
    <javadoc>
      <text>* Holds the pseudo unit associated to this dimension.</text>
    </javadoc>
    <declaration type="Unit<?>" name="_pseudoUnit" />
    <javadoc>
      <text>* Creates a new dimension associated to the specified symbol.</text>
      <param>symbol the associated symbol.</param>
    </javadoc>
    <method type="constructor" name="Dimension" startLine="82" endLine="84" />
    <javadoc>
      <text>* Creates a dimension having the specified pseudo-unit 
 * (base unit or product of base unit).</text>
      <param>pseudoUnit the pseudo-unit identifying this dimension.</param>
    </javadoc>
    <method type="constructor" name="Dimension" startLine="92" endLine="94" />
    <javadoc>
      <text>* Returns the product of this dimension with the one specified.</text>
      <param>that the dimension multiplicand.</param>
      <return><code>this * that</code></return>
    </javadoc>
    <method type="Dimension" name="times" startLine="102" endLine="104" />
    <javadoc>
      <text>* Returns the quotient of this dimension with the one specified.</text>
      <param>that the dimension divisor.</param>
      <return><code>this / that</code></return>
    </javadoc>
    <method type="Dimension" name="divide" startLine="112" endLine="114" />
    <javadoc>
      <text>* Returns this dimension raised to an exponent.</text>
      <param>n the exponent.</param>
      <return>the result of raising this dimension to the exponent.</return>
    </javadoc>
    <method type="Dimension" name="pow" startLine="122" endLine="124" />
    <javadoc>
      <text>* Returns the given root of this dimension.</text>
      <param>n the root's order.</param>
      <return>the result of taking the given root of this dimension.</return>
      <throws>ArithmeticException if <code>n == 0</code>.</throws>
    </javadoc>
    <method type="Dimension" name="root" startLine="133" endLine="135" />
    <javadoc>
      <text>* Returns the representation of this dimension.</text>
      <return>the representation of this dimension.</return>
    </javadoc>
    <method type="String" name="toString" startLine="142" endLine="144" />
    <javadoc>
      <text>* Indicates if the specified dimension is equals to the one specified.</text>
      <param>that the object to compare to.</param>
      <return><code>true</code> if this dimension is equals to that dimension;
 * <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="153" endLine="158" />
    <javadoc>
      <text>* Returns the hash code for this dimension.</text>
      <return>this dimension hashcode value.</return>
    </javadoc>
    <method type="int" name="hashCode" startLine="165" endLine="167" />
    <javadoc>
      <text>* Sets the model used to determinate the units dimensions.</text>
      <param>model the new model to be used when calculating unit dimensions.</param>
    </javadoc>
    <method type="void" name="setModel" startLine="174" endLine="176" />
    <javadoc>
      <text>* Returns the model used to determinate the units dimensions
 * (default {@link Model#STANDARD STANDARD}).</text>
      <return>the model used when calculating unit dimensions.</return>
    </javadoc>
    <method type="Model" name="getModel" startLine="184" endLine="186" />
    <interface name="Model" startLine="188">
      <javadoc>
        <text>* This interface represents the mapping between {@link BaseUnit base units}and {@link Dimension dimensions}. Custom models may allow
 * conversions not possible using the {@link #STANDARD standard} model.
 * For example:[code]
 * public static void main(String[] args) {
 * Dimension.Model relativistic = new Dimension.Model() {
 * RationalConverter meterToSecond = new RationalConverter(1, 299792458); // 1/c
 * public Dimension getDimension(BaseUnit unit) {
 * if (unit.equals(SI.METER)) return Dimension.TIME;
 * return Dimension.Model.STANDARD.getDimension(unit);
 * }
 * public UnitConverter getTransform(BaseUnit unit) {
 * if (unit.equals(SI.METER)) return meterToSecond;
 * return Dimension.Model.STANDARD.getTransform(unit);
 * }};
 * Dimension.setModel(relativistic);
 * // Converts 1.0 GeV (energy) to kg (mass).
 * System.out.println(Unit.valueOf("GeV").getConverterTo(KILOGRAM).convert(1.0));
 * }
 * > 1.7826617302520883E-27[/code]</text>
      </javadoc>
      <javadoc>
        <text>* Holds the standard model (default).</text>
      </javadoc>
      <method type="Dimension" name="getDimension" startLine="221" endLine="230" />
      <method type="UnitConverter" name="getTransform" startLine="232" endLine="235" />
      <declaration type="Model" name="STANDARD" />
      <method name="getDimension" type="Dimension" startLine="238" endLine="245" />
      <javadoc>
        <text>* Returns the dimension of the specified base unit (a dimension 
 * particular to the base unit if the base unit is not recognized).</text>
        <param>unit the base unit for which the dimension is returned.</param>
        <return>the dimension of the specified unit.</return>
      </javadoc>
      <method name="getTransform" type="UnitConverter" startLine="247" endLine="255" />
      <javadoc>
        <text>* Returns the normalization transform of the specified base unit
 * ({@link UnitConverter#IDENTITY IDENTITY} if the base unit is 
 * not recognized).</text>
        <param>unit the base unit for which the transform is returned.</param>
        <return>the normalization transform.</return>
      </javadoc>
      <declaration type="long" name="serialVersionUID" />
    </interface>
  </class>
</source>
