<?xml version="1.0" encoding="UTF-8"?>
<source package="javax.measure.unit">
  <import name="java.io.Serializable" />
  <import name="javax.measure.converter.ConversionException" />
  <import name="javax.measure.converter.UnitConverter" />
  <import name="javax.measure.quantity.Quantity" />
  <class name="ProductUnit" extends="DerivedUnit<Q>" startLine="17">
    <javadoc>
      <text>* <p> This class represents units formed by the product of rational powers of
 * existing units.</p>
 * <p> This class maintains the canonical form of this product (simplest
 * form after factorization). For example:
 * <code>METER.pow(2).divide(METER)</code> returns
 * <code>METER</code>.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.1, April 22, 2006</version>
      <see>Unit#times(Unit)</see>
      <see>Unit#divide(Unit)</see>
      <see>Unit#pow(int)</see>
      <see>Unit#root(int)</see>
    </javadoc>
    <javadoc>
      <text>* Holds the units composing this product unit.</text>
    </javadoc>
    <declaration type="Element[]" name="_elements" />
    <javadoc>
      <text>* Holds the hashcode (optimization).</text>
    </javadoc>
    <declaration type="int" name="_hashCode" />
    <javadoc>
      <text>* Default constructor (used solely to create <code>ONE</code> instance).</text>
    </javadoc>
    <method type="constructor" name="ProductUnit" startLine="48" endLine="50" />
    <javadoc>
      <text>* Copy constructor (allows for parameterization of product units).</text>
      <param>productUnit the product unit source.</param>
      <throws>ClassCastException if the specified unit is not 
 * a product unit.</throws>
    </javadoc>
    <method type="constructor" name="ProductUnit" startLine="59" endLine="61" />
    <javadoc>
      <text>* Product unit constructor.</text>
      <param>elements the product elements.</param>
    </javadoc>
    <method type="constructor" name="ProductUnit" startLine="68" endLine="70" />
    <javadoc>
      <text>* Returns the unit defined from the product of the specifed elements.</text>
      <param>leftElems left multiplicand elements.</param>
      <param>rightElems right multiplicand elements.</param>
      <return>the corresponding unit.</return>
    </javadoc>
    <method type="Unit<? extends Quantity>" name="getInstance" startLine="81" endLine="134">
      <declaration type="Element[]" name="result" />
      <declaration type="int" name="resultIndex" />
      <scope startLine="86" endLine="105">
        <declaration type="Unit" name="unit" />
        <declaration type="int" name="p1" />
        <declaration type="int" name="r1" />
        <declaration type="int" name="p2" />
        <declaration type="int" name="r2" />
        <scope startLine="92" endLine="98">
          <scope startLine="93" endLine="97" />
        </scope>
        <declaration type="int" name="pow" />
        <declaration type="int" name="root" />
        <scope startLine="101" endLine="104">
          <declaration type="int" name="gcd" />
        </scope>
        <comment>No duplicate.</comment>
      </scope>
      <scope startLine="108" endLine="120">
        <declaration type="Unit" name="unit" />
        <declaration type="boolean" name="hasBeenMerged" />
        <scope startLine="111" endLine="116">
          <scope startLine="112" endLine="115" />
        </scope>
        <scope startLine="117" endLine="119" />
      </scope>
      <scope startLine="123" endLine="125" />
      <scope startLine="125" endLine="127" />
      <scope startLine="127" endLine="133">
        <declaration type="Element[]" name="elems" />
        <scope startLine="129" endLine="131" />
      </scope>
      <comment>Merges left elements with right elements.</comment>
      <comment>Appends remaining right elements not merged.</comment>
      <comment>Returns or creates instance.</comment>
    </method>
    <javadoc>
      <text>* Returns the product of the specified units.</text>
      <param>left the left unit operand.</param>
      <param>right the right unit operand.</param>
      <return><code>left * right</code></return>
    </javadoc>
    <method type="Unit<? extends Quantity>" name="getProductInstance" startLine="143" endLine="157">
      <declaration type="Element[]" name="leftElems" />
      <scope startLine="145" endLine="147" />
      <scope startLine="147" endLine="149" />
      <declaration type="Element[]" name="rightElems" />
      <scope startLine="151" endLine="153" />
      <scope startLine="153" endLine="155" />
    </method>
    <javadoc>
      <text>* Returns the quotient of the specified units.</text>
      <param>left the dividend unit operand.</param>
      <param>right the divisor unit operand.</param>
      <return><code>dividend / divisor</code></return>
    </javadoc>
    <method type="Unit<? extends Quantity>" name="getQuotientInstance" startLine="166" endLine="185">
      <declaration type="Element[]" name="leftElems" />
      <scope startLine="168" endLine="170" />
      <scope startLine="170" endLine="172" />
      <declaration type="Element[]" name="rightElems" />
      <scope startLine="174" endLine="181">
        <declaration type="Element[]" name="elems" />
        <scope startLine="177" endLine="180" />
      </scope>
      <scope startLine="181" endLine="183" />
    </method>
    <javadoc>
      <text>* Returns the product unit corresponding to the specified root of
 * the specified unit.</text>
      <param>unit the unit.</param>
      <param>n the root's order (n &gt; 0).</param>
      <return><code>unit^(1/nn)</code></return>
      <throws>ArithmeticException if <code>n == 0</code>.</throws>
    </javadoc>
    <method type="Unit<? extends Quantity>" name="getRootInstance" startLine="196" endLine="210">
      <declaration type="Element[]" name="unitElems" />
      <scope startLine="198" endLine="206">
        <declaration type="Element[]" name="elems" />
        <scope startLine="201" endLine="205">
          <declaration type="int" name="gcd" />
        </scope>
      </scope>
      <scope startLine="206" endLine="208" />
    </method>
    <javadoc>
      <text>* Returns the product unit corresponding to this unit raised to
 * the specified exponent.</text>
      <param>unit the unit.</param>
      <param>nn the exponent (nn &gt; 0).</param>
      <return><code>unit^n</code></return>
    </javadoc>
    <method type="Unit<? extends Quantity>" name="getPowInstance" startLine="220" endLine="234">
      <declaration type="Element[]" name="unitElems" />
      <scope startLine="222" endLine="230">
        <declaration type="Element[]" name="elems" />
        <scope startLine="225" endLine="229">
          <declaration type="int" name="gcd" />
        </scope>
      </scope>
      <scope startLine="230" endLine="232" />
    </method>
    <javadoc>
      <text>* Returns the number of units in this product.</text>
      <return>the number of units being multiplied.</return>
    </javadoc>
    <method type="int" name="getUnitCount" startLine="241" endLine="243" />
    <javadoc>
      <text>* Returns the unit at the specified position.</text>
      <param>index the index of the unit to return.</param>
      <return>the unit at the specified position.</return>
      <throws>IndexOutOfBoundsException if index is out of range
 * <code>(index &lt; 0 || index &gt;= size())</code>.</throws>
    </javadoc>
    <method type="Unit<? extends Quantity>" name="getUnit" startLine="254" endLine="256" />
    <javadoc>
      <text>* Returns the power exponent of the unit at the specified position.</text>
      <param>index the index of the unit to return.</param>
      <return>the unit power exponent at the specified position.</return>
      <throws>IndexOutOfBoundsException if index is out of range
 * <code>(index &lt; 0 || index &gt;= size())</code>.</throws>
    </javadoc>
    <method type="int" name="getUnitPow" startLine="266" endLine="268" />
    <javadoc>
      <text>* Returns the root exponent of the unit at the specified position.</text>
      <param>index the index of the unit to return.</param>
      <return>the unit root exponent at the specified position.</return>
      <throws>IndexOutOfBoundsException if index is out of range
 * <code>(index &lt; 0 || index &gt;= size())</code>.</throws>
    </javadoc>
    <method type="int" name="getUnitRoot" startLine="278" endLine="280" />
    <javadoc>
      <text>* Indicates if this product unit is considered equals to the specified 
 * object.</text>
      <param>that the object to compare for equality.</param>
      <return><code>true</code> if <code>this</code> and <code>that</code>
 * are considered equals; <code>false</code>otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="290" endLine="319">
      <scope startLine="293" endLine="317">
        <declaration type="Element[]" name="elems" />
        <scope startLine="297" endLine="316">
          <scope startLine="298" endLine="314">
            <declaration type="boolean" name="unitFound" />
            <scope startLine="300" endLine="310">
              <scope startLine="301" endLine="309">
                <scope startLine="303" endLine="305" />
                <scope startLine="305" endLine="308" />
              </scope>
            </scope>
            <scope startLine="311" endLine="313" />
          </scope>
        </scope>
        <comment>Two products are equals if they have the same elements</comment>
        <comment>regardless of the elements' order.</comment>
      </scope>
    </method>
    <method type="int" name="hashCode" startLine="323" endLine="333">
      <declaration type="int" name="code" />
      <scope startLine="327" endLine="330" />
    </method>
    <method type="Unit<? super Q>" name="getStandardUnit" startLine="337" endLine="348">
      <declaration type="Unit" name="systemUnit" />
      <scope startLine="341" endLine="346">
        <declaration type="Unit" name="unit" />
      </scope>
    </method>
    <method type="UnitConverter" name="toStandardUnit" startLine="351" endLine="373">
      <declaration type="UnitConverter" name="converter" />
      <scope startLine="355" endLine="371">
        <declaration type="UnitConverter" name="cvtr" />
        <declaration type="int" name="pow" />
        <scope startLine="364" endLine="367" />
        <scope startLine="368" endLine="370" />
        <comment>Negative power.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Indicates if this product unit is a standard unit.</text>
      <return><code>true</code> if all elements are standard units;
 * <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="hasOnlyStandardUnit" startLine="381" endLine="388">
      <scope startLine="382" endLine="386">
        <declaration type="Unit<?>" name="u" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the greatest common divisor (Euclid's algorithm).</text>
      <param>m the first number.</param>
      <param>nn the second number.</param>
      <return>the greatest common divisor.</return>
    </javadoc>
    <method type="int" name="gcd" startLine="397" endLine="403">
      <scope startLine="398" endLine="400" />
      <scope startLine="400" endLine="402" />
    </method>
    <class name="Element" startLine="405">
      <implements name="Serializable" />
      <javadoc>
        <text>* Inner product element represents a rational power of a single unit.</text>
      </javadoc>
      <javadoc>
        <text>* Holds the single unit.</text>
      </javadoc>
      <declaration type="Unit<?>" name="_unit" />
      <javadoc>
        <text>* Holds the power exponent.</text>
      </javadoc>
      <declaration type="int" name="_pow" />
      <javadoc>
        <text>* Holds the root exponent.</text>
      </javadoc>
      <declaration type="int" name="_root" />
      <javadoc>
        <text>* Structural constructor.</text>
        <param>unit the unit.</param>
        <param>pow the power exponent.</param>
        <param>root the root exponent.</param>
      </javadoc>
      <method type="constructor" name="Element" startLine="432" endLine="436" />
      <javadoc>
        <text>* Returns this element's unit.</text>
        <return>the single unit.</return>
      </javadoc>
      <method type="Unit<?>" name="getUnit" startLine="443" endLine="445" />
      <javadoc>
        <text>* Returns the power exponent. The power exponent can be negative
 * but is always different from zero.</text>
        <return>the power exponent of the single unit.</return>
      </javadoc>
      <method type="int" name="getPow" startLine="453" endLine="455" />
      <javadoc>
        <text>* Returns the root exponent. The root exponent is always greater
 * than zero.</text>
        <return>the root exponent of the single unit.</return>
      </javadoc>
      <method type="int" name="getRoot" startLine="463" endLine="465" />
      <declaration type="long" name="serialVersionUID" />
      <declaration type="long" name="serialVersionUID" />
    </class>
    <comment>Implements abstract method.</comment>
  </class>
</source>
