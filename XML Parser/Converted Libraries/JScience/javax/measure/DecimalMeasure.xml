<?xml version="1.0" encoding="UTF-8"?>
<source package="javax.measure">
  <import name="java.math.BigDecimal" />
  <import name="java.math.MathContext" />
  <import name="javax.measure.converter.AddConverter" />
  <import name="javax.measure.converter.RationalConverter" />
  <import name="javax.measure.converter.UnitConverter" />
  <import name="javax.measure.quantity.Quantity" />
  <import name="javax.measure.unit.Unit" />
  <class name="DecimalMeasure" extends="Measure<BigDecimal,Q>" startLine="20">
    <javadoc>
      <text>* <p> This class represents a measure whose value is an arbitrary-precision 
 * decimal number.</p>
 * <p> When converting, applications may supply the 
 * <code>java.math.Context</code>:[code]
 * DecimalMeasure<Velocity> c = DecimalMeasure.valueOf("299792458 m/s");
 * DecimalMeasure<Velocity> milesPerHour = c.to(MILES_PER_HOUR, MathContext.DECIMAL128);
 * System.out.println(milesPerHour);
 * > 670616629.3843951324266284896206156 mph
 * [/code]</text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>4.3, October 3, 2007</version>
    </javadoc>
    <javadoc>
      <text>* Holds the BigDecimal value.</text>
    </javadoc>
    <declaration type="BigDecimal" name="_value" />
    <javadoc>
      <text>* Holds the unit.</text>
    </javadoc>
    <declaration type="Unit<Q>" name="_unit" />
    <javadoc>
      <text>* Creates a decimal measure for the specified number stated in the 
 * specified unit.</text>
    </javadoc>
    <method type="constructor" name="DecimalMeasure" startLine="52" endLine="55" />
    <javadoc>
      <text>* Returns the decimal measure for the specified number stated in the 
 * specified unit.</text>
      <param>decimal the measurement value.</param>
      <param>unit the measurement unit.</param>
    </javadoc>
    <method type="DecimalMeasure<Q>" name="valueOf" startLine="65" endLine="67" />
    <javadoc>
      <text>* Returns the decimal measure for the specified textual representation.
 * This method first reads the <code>BigDecimal</code> value, then 
 * the unit if any (value and unit should be separated by white spaces).</text>
      <param>csq the decimal measure representation (including unit if any).</param>
      <throws>NumberFormatException if the specified character sequence is 
 * not a valid representation of decimal measure.</throws>
    </javadoc>
    <method type="DecimalMeasure<Q>" name="valueOf" startLine="79" endLine="101">
      <declaration type="String" name="str" />
      <declaration type="int" name="numberLength" />
      <declaration type="int" name="unitStartIndex" />
      <scope startLine="83" endLine="94">
        <scope startLine="84" endLine="93">
          <scope startLine="85" endLine="90">
            <scope startLine="86" endLine="89" />
          </scope>
        </scope>
      </scope>
      <declaration type="BigDecimal" name="decimal" />
      <declaration type="Unit" name="unit" />
      <scope startLine="97" endLine="99" />
    </method>
    <method type="Unit<Q>" name="getUnit" startLine="104" endLine="106" />
    <method type="BigDecimal" name="getValue" startLine="109" endLine="111" />
    <javadoc>
      <text>* Returns the decimal measure equivalent to this measure but stated in the 
 * specified unit. This method will raise an ArithmeticException if the 
 * resulting measure does not have a terminating decimal expansion.</text>
      <param>unit the new measurement unit.</param>
      <return>the measure stated in the specified unit.</return>
      <throws>ArithmeticException if the converted measure value does not have
 * a terminating decimal expansion</throws>
      <see>#to(Unit,MathContext)</see>
    </javadoc>
    <method type="DecimalMeasure<Q>" name="to" startLine="125" endLine="127" />
    <javadoc>
      <text>* Returns the decimal measure equivalent to this measure but stated in the 
 * specified unit, the conversion is performed using the specified math
 * context.</text>
      <param>unit the new measurement unit.</param>
      <param>mathContext the mathContext used to convert 
 * <code>BigDecimal</code> values or <code>null</code> if none.</param>
      <return>the measure stated in the specified unit.</return>
      <throws>ArithmeticException if the result is inexact but the
 * rounding mode is <code>MathContext.UNNECESSARY</code> or 
 * <code>mathContext.precision == 0</tt> and the quotient has a 
 * non-terminating decimal expansion.</throws>
    </javadoc>
    <method type="DecimalMeasure<Q>" name="to" startLine="143" endLine="169">
      <declaration type="UnitConverter" name="cvtr" />
      <scope startLine="147" endLine="155">
        <declaration type="RationalConverter" name="factor" />
        <declaration type="BigDecimal" name="dividend" />
        <declaration type="BigDecimal" name="divisor" />
        <declaration type="BigDecimal" name="result" />
      </scope>
      <scope startLine="155" endLine="160">
        <declaration type="BigDecimal" name="factor" />
        <declaration type="BigDecimal" name="result" />
      </scope>
      <scope startLine="160" endLine="165">
        <declaration type="BigDecimal" name="offset" />
        <declaration type="BigDecimal" name="result" />
        <comment>Non-linear and not an offset, convert the double value.</comment>
      </scope>
      <scope startLine="165" endLine="168">
        <declaration type="BigDecimal" name="result" />
      </scope>
    </method>
    <method type="double" name="doubleValue" startLine="171" endLine="175" />
    <declaration type="long" name="serialVersionUID" />
  </class>
</source>
