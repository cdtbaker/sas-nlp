<?xml version="1.0" encoding="UTF-8"?>
<source package="javax.measure">
  <import name="javax.measure.converter.UnitConverter" />
  <import name="javax.measure.quantity.Quantity" />
  <import name="javax.measure.unit.CompoundUnit" />
  <import name="javax.measure.unit.Unit" />
  <class name="VectorMeasure" extends="Measure<double[],Q>" startLine="16">
    <javadoc>
      <text>* <p> This class represents a measurement vector of two or more dimensions.
 * For example:[code]
 * VectorMeasure<Length> dimension = VectorMeasure.valueOf(12.0, 30.0, 40.0, MILLIMETER);
 * VectorMeasure<Velocity> v2d = VectorMeasure.valueOf(-2.2, -3.0, KNOTS);
 * VectorMeasure<ElectricCurrent> c2d = VectorMeasure.valueOf(-7.3, 3.5, NANOAMPERE);
 * [/code]
 * </p>
 * <p> Subclasses may provide fixed dimensions specializations:[code]
 * class Velocity2D extends VectorMeasure<Velocity> {
 * public Velocity2D(double x, double y, Unit<Velocity> unit) {
 * ...
 * }
 * }
 * [/code]</p>
 * <p> Measurement vectors may use {@link CompoundUnit compound units}:[code]
 * VectorMeasure<Angle> latLong = VectorMeasure.valueOf(12.345, 22.23, DEGREE_ANGLE);
 * Unit<Angle> HOUR_MINUTE_SECOND_ANGLE = DEGREE_ANGLE.compound(MINUTE_ANGLE).compound(SECOND_ANGLE);
 * System.out.println(latLong.to(HOUR_MINUTE_SECOND_ANGLE));
 * > [12°19'42", 22°12'48"] [/code]</p>
 * <p> Instances of this class (and sub-classes) are immutable.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>4.3, October 3, 2007</version>
    </javadoc>
    <javadoc>
      <text>* Default constructor (for sub-classes).</text>
    </javadoc>
    <method type="constructor" name="VectorMeasure" startLine="50" endLine="51" />
    <javadoc>
      <text>* Returns a 2-dimensional measurement vector.</text>
      <param>x the first vector component value.</param>
      <param>y the second vector component value.</param>
      <param>unit the measurement unit.</param>
    </javadoc>
    <method type="VectorMeasure<Q>" name="valueOf" startLine="61" endLine="63" />
    <javadoc>
      <text>* Returns a 3-dimensional measurement vector.</text>
      <param>x the first vector component value.</param>
      <param>y the second vector component value.</param>
      <param>z the third vector component value.</param>
      <param>unit the measurement unit.</param>
    </javadoc>
    <method type="VectorMeasure<Q>" name="valueOf" startLine="74" endLine="76" />
    <javadoc>
      <text>* Returns a multi-dimensional measurement vector.</text>
      <param>components the vector component values.</param>
      <param>unit the measurement unit.</param>
    </javadoc>
    <method type="VectorMeasure<Q>" name="valueOf" startLine="85" endLine="87" />
    <method name="to" type="VectorMeasure<Q>" startLine="89" endLine="96" />
    <javadoc>
      <text>* Returns the measurement vector equivalent to this one but stated in the 
 * specified unit.</text>
      <param>unit the new measurement unit.</param>
      <return>the vector measure stated in the specified unit.</return>
    </javadoc>
    <method name="doubleValue" type="double" startLine="98" endLine="105" />
    <javadoc>
      <text>* Returns the norm of this measurement vector stated in the specified
 * unit.</text>
      <param>unit the unit in which the norm is stated.</param>
      <return><code>|this|</code></return>
    </javadoc>
    <javadoc>
      <text>* Returns the <code>String</code> representation of this measurement
 * vector (for example <code>[2.3 m/s, 5.6 m/s]</code>).</text>
      <return>the textual representation of the measurement vector.</return>
    </javadoc>
    <method type="String" name="toString" startLine="113" endLine="130">
      <declaration type="double[]" name="values" />
      <declaration type="Unit<Q>" name="unit" />
      <declaration type="StringBuffer" name="tmp" />
      <scope startLine="118" endLine="127">
        <scope startLine="119" endLine="121" />
        <scope startLine="122" endLine="124" />
        <scope startLine="124" endLine="126" />
      </scope>
    </method>
    <class name="TwoDimensional" extends="VectorMeasure<Q>" startLine="133">
      <declaration type="double" name="_x" />
      <declaration type="double" name="_y" />
      <declaration type="Unit<Q>" name="_unit" />
      <method type="constructor" name="TwoDimensional" startLine="141" endLine="146" />
      <method type="double" name="doubleValue" startLine="148" endLine="153">
        <declaration type="double" name="norm" />
      </method>
      <method type="Unit<Q>" name="getUnit" startLine="156" endLine="158" />
      <method type="double[]" name="getValue" startLine="161" endLine="163" />
      <method type="TwoDimensional<Q>" name="to" startLine="166" endLine="171">
        <declaration type="UnitConverter" name="cvtr" />
      </method>
      <declaration type="long" name="serialVersionUID" />
      <class name="ThreeDimensional" extends="VectorMeasure<Q>" startLine="178">
        <declaration type="double" name="_x" />
        <declaration type="double" name="_y" />
        <declaration type="double" name="_z" />
        <declaration type="Unit<Q>" name="_unit" />
        <method type="constructor" name="ThreeDimensional" startLine="188" endLine="194" />
        <method type="double" name="doubleValue" startLine="196" endLine="201">
          <declaration type="double" name="norm" />
        </method>
        <method type="Unit<Q>" name="getUnit" startLine="204" endLine="206" />
        <method type="double[]" name="getValue" startLine="209" endLine="211" />
        <method type="ThreeDimensional<Q>" name="to" startLine="214" endLine="219">
          <declaration type="UnitConverter" name="cvtr" />
        </method>
        <declaration type="long" name="serialVersionUID" />
        <class name="MultiDimensional" extends="VectorMeasure<Q>" startLine="225">
          <declaration type="double[]" name="_components" />
          <declaration type="Unit<Q>" name="_unit" />
          <method type="constructor" name="MultiDimensional" startLine="231" endLine="234" />
          <method type="double" name="doubleValue" startLine="237" endLine="246">
            <declaration type="double" name="normSquare" />
            <scope startLine="239" endLine="242">
              <declaration type="double" name="d" />
            </scope>
          </method>
          <method type="Unit<Q>" name="getUnit" startLine="249" endLine="251" />
          <method type="double[]" name="getValue" startLine="254" endLine="256" />
          <method type="MultiDimensional<Q>" name="to" startLine="259" endLine="268">
            <declaration type="UnitConverter" name="cvtr" />
            <declaration type="double[]" name="newValues" />
            <scope startLine="264" endLine="266" />
          </method>
          <declaration type="long" name="serialVersionUID" />
        </class>
      </class>
    </class>
    <comment>Holds 2-dimensional implementation.</comment>
    <comment>Holds 3-dimensional implementation.</comment>
    <comment>Holds multi-dimensional implementation.</comment>
  </class>
</source>
