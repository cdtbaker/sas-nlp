<?xml version="1.0" encoding="UTF-8"?>
<source package="javax.measure">
  <import name="javax.measure.quantity.Quantity" />
  <import name="javax.measure.unit.Unit" />
  <interface name="Measurable" startLine="14">
    <implements name="Comparable<Measurable<Q>>" />
    <javadoc>
      <text>* <p> This interface represents the measurable, countable, or comparable 
 * property or aspect of a thing.</p>
 * <p> Implementing instances are typically the result of a measurement:[code]
 * Measurable<Mass> weight = Measure.valueOf(180.0, POUND);
 * [/code]
 * They can also be created from custom classes:[code]
 * class Delay implements Measurable<Duration> {
 * private long nanoSeconds; // Implicit internal unit.
 * public double doubleValue(Unit<Velocity> unit) { ... }
 * public long longValue(Unit<Velocity> unit) { ... }
 * }
 * Thread.wait(new Delay(24, HOUR)); // Assuming Thread.wait(Measurable<Duration>) method.
 * [/code]</p>
 * <p> Although measurable instances are for the most part scalar quantities; 
 * more complex implementations (e.g. vectors, data set) are allowed as 
 * long as an aggregate magnitude can be determined. For example:[code]
 * class Velocity3D implements Measurable<Velocity> {
 * private double x, y, z; // Meter per seconds.
 * public double doubleValue(Unit<Velocity> unit) { ... } // Returns vector norm.
 * ... 
 * }
 * class Sensors<Q extends Quantity> extends Measure<double[], Q> {
 * public doubleValue(Unit<Q> unit) { ... } // Returns median value. 
 * ...
 * } [/code]</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>4.1, June 8, 2007</version>
    </javadoc>
    <method name="doubleValue" type="double" startLine="48" endLine="58" />
    <javadoc>
      <text>* Returns the value of this measurable stated in the specified unit as 
 * a <code>double</code>. If the measurable has too great a magnitude to 
 * be represented as a <code>double</code>, it will be converted to 
 * <code>Double.NEGATIVE_INFINITY</code> or
 * <code>Double.POSITIVE_INFINITY</code> as appropriate.</text>
      <param>unit the unit in which this measurable value is stated.</param>
      <return>the numeric value after conversion to type <code>double</code>.</return>
    </javadoc>
    <method name="longValue" type="long" startLine="60" endLine="74" />
    <javadoc>
      <text>* Returns the estimated integral value of this measurable stated in 
 * the specified unit as a <code>long</code>. 
 * <p> Note: This method differs from the <code>Number.longValue()</code>
 * in the sense that the closest integer value is returned 
 * and an ArithmeticException is raised instead
 * of a bit truncation in case of overflow (safety critical).</p></text>
      <param>unit the unit in which the measurable value is stated.</param>
      <return>the numeric value after conversion to type <code>long</code>.</return>
      <throws>ArithmeticException if this quantity cannot be represented 
 * as a <code>long</code> number in the specified unit.</throws>
    </javadoc>
  </interface>
</source>
