<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.geography.coordinates">
  <import name="static org.jscience.geography.coordinates.crs.ReferenceEllipsoid.WGS84" />
  <import name="javax.measure.Measure" />
  <import name="javax.measure.converter.UnitConverter" />
  <import name="javax.measure.quantity.*" />
  <import name="javax.measure.unit.*" />
  <import name="static javax.measure.unit.SI.*" />
  <import name="static javax.measure.unit.NonSI.*" />
  <import name="javolution.context.ObjectFactory" />
  <import name="javolution.xml.XMLFormat" />
  <import name="javolution.xml.stream.XMLStreamException" />
  <import name="org.jscience.geography.coordinates.crs.*" />
  <import name="org.opengis.referencing.cs.CoordinateSystem" />
  <class name="UTM" extends="Coordinates<ProjectedCRS<?>>" startLine="27">
    <javadoc>
      <text>* This class represents the {@link ProjectedCRS projected}Universal Transverse Mercator (UTM) coordinates onto the WGS84 ellipsoid.
 * <p>The UTM system is limited to values between -80 and +84 degrees latitude.
 * Values beyond these limits (i.e., the polar regions) are projected
 * using the Universal Polar Stereographic (UPS) projection. Although
 * mathematically distinct, the two projections are represented identically.
 * This class returns correct results for both UTM and UPS projections.
 * The conversion routines for this class were derived from formulas described
 * in the
 * <a href="http://earth-info.nga.mil/GandG/publications/tm8358.2/TM8358_2.pdf">
 * Defense Mapping Agency Technical Manual 8358.2.</a></text>
      <author>Paul D. Anderson</author>
      <version>3.0, February 25, 2006</version>
      <see><a href="http://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system">
 *      Wikipedia: Universal Transverse Mercator Coordinate System</a></see>
    </javadoc>
    <javadoc>
      <text>* The UTM scale factor. This the exact scale factor only on a pair of
 * lines lying either side of the central meridian, but the effect is to
 * reduce overall distortion within the UTM zone to less than one part per
 * thousand.</text>
    </javadoc>
    <declaration type="double" name="UTM_SCALE_FACTOR" />
    <javadoc>
      <text>* The UTM "false easting" value. This quantity is added to the true
 * easting to avoid using negative numbers in the coordinates.</text>
    </javadoc>
    <declaration type="Measure<Integer,Length>" name="UTM_FALSE_EASTING" />
    <javadoc>
      <text>* The UTM "false northing" value. This quantity is added to the true
 * northing for coordinates <b>in the southern hemisphere only</b>
 * to avoid using negative numbers in the coordinates.</text>
    </javadoc>
    <declaration type="Measure<Integer,Length>" name="UTM_FALSE_NORTHING" />
    <javadoc>
      <text>* The northern limit of the UTM grid. Beyond this limit the distortion
 * introduced by the transverse Mercator projection is impractically
 * large, and the UPS grid is used instead.</text>
    </javadoc>
    <declaration type="Measure<Integer,Angle>" name="UTM_NORTHERN_LIMIT" />
    <javadoc>
      <text>* The southern limit of the UTM grid. Beyond this limit the distortion
 * introduced by the transverse Mercator projection is impractically
 * large, and the UPS grid is used instead.</text>
    </javadoc>
    <declaration type="Measure<Integer,Angle>" name="UTM_SOUTHERN_LIMIT" />
    <javadoc>
      <text>* The UPS scale factor.</text>
    </javadoc>
    <declaration type="double" name="UPS_SCALE_FACTOR" />
    <javadoc>
      <text>* The UPS "false easting" value. This quantity is added to the true
 * easting to avoid using negative numbers in the coordinates.</text>
    </javadoc>
    <declaration type="Measure<Integer,Length>" name="UPS_FALSE_EASTING" />
    <javadoc>
      <text>* The UPS "false northing" value. This quantity is added to the true
 * northing to avoid using negative numbers in the coordinates.
 * The UPS system, unlike the UTM system, always includes the false northing.</text>
    </javadoc>
    <declaration type="Measure<Integer,Length>" name="UPS_FALSE_NORTHING" />
    <declaration type="double" name="K0" />
    <declaration type="double" name="K02" />
    <declaration type="double" name="K03" />
    <declaration type="double" name="K04" />
    <declaration type="double" name="K05" />
    <declaration type="double" name="K06" />
    <declaration type="double" name="K07" />
    <declaration type="double" name="K08" />
    <javadoc>
      <text>* Holds the coordinate reference system for all instances of this class.</text>
    </javadoc>
    <declaration type="double" name="NORTHERN_LIMIT_IN_DEGREES" />
    <declaration type="double" name="SOUTHERN_LIMIT_IN_DEGREES" />
    <method type="UTM" name="coordinatesOf" startLine="142" endLine="155">
      <declaration type="LatLong" name="latLong" />
      <declaration type="double" name="latitude" />
      <scope startLine="150" endLine="152" />
      <scope startLine="152" endLine="154" />
      <comment>UTM or UPS?</comment>
    </method>
    <method type="AbsolutePosition" name="positionOf" startLine="159" endLine="172">
      <declaration type="LatLong" name="latLong" />
      <scope startLine="162" endLine="164" />
      <scope startLine="164" endLine="166" />
    </method>
    <method type="CoordinateSystem" name="getCoordinateSystem" startLine="175" endLine="177" />
    <declaration type="ProjectedCRS<UTM>" name="CRS" />
    <javadoc>
      <text>* Holds the longitude zone identifier.</text>
    </javadoc>
    <declaration type="int" name="_longitudeZone" />
    <javadoc>
      <text>* Holds the latitude zone identifier.</text>
    </javadoc>
    <declaration type="char" name="_latitudeZone" />
    <javadoc>
      <text>* Holds the easting in meters.</text>
    </javadoc>
    <declaration type="double" name="_easting" />
    <javadoc>
      <text>* Holds the northing in meters.</text>
    </javadoc>
    <declaration type="double" name="_northing" />
    <javadoc>
      <text>* Returns the projected UTM position corresponding to the specified
 * coordinates.</text>
      <param>longitudeZone the longitude zone number.</param>
      <param>latitudeZone  the longitude zone character.</param>
      <param>easting       the easting value stated in the specified unit.</param>
      <param>northing      the northing value stated in the specified unit.</param>
      <param>unit          the easting/northing length unit.</param>
      <return>the corresponding surface position.</return>
    </javadoc>
    <method type="UTM" name="valueOf" startLine="212" endLine="225">
      <declaration type="UTM" name="utm" />
      <scope startLine="216" endLine="219" />
      <scope startLine="219" endLine="223">
        <declaration type="UnitConverter" name="toMeter" />
      </scope>
    </method>
    <method type="UTM" name="create" startLine="230" endLine="232" />
    <declaration type="ObjectFactory<UTM>" name="FACTORY" />
    <method type="constructor" name="UTM" startLine="235" endLine="236" />
    <javadoc>
      <text>* Returns the longitude zone identifier.</text>
      <return>the longitude zone number.</return>
    </javadoc>
    <method type="int" name="longitudeZone" startLine="243" endLine="245" />
    <javadoc>
      <text>* Returns the latitude zone identifier.</text>
      <return>the latitude zone character.</return>
    </javadoc>
    <method type="char" name="latitudeZone" startLine="252" endLine="254" />
    <javadoc>
      <text>* Returns the projected distance of the position from the central meridian.</text>
      <param>unit the length unit of the easting to return.</param>
      <return>the easting stated in the specified unit.</return>
    </javadoc>
    <method type="double" name="eastingValue" startLine="262" endLine="265" />
    <javadoc>
      <text>* Returns the projected distance of the point from the equator.</text>
      <param>unit the length unit of the northing to return.</param>
      <return>the northing stated in the specified unit.</return>
    </javadoc>
    <method type="double" name="northingValue" startLine="273" endLine="276" />
    <method type="ProjectedCRS<UTM>" name="getCoordinateReferenceSystem" startLine="279" endLine="281" />
    <method type="int" name="getDimension" startLine="284" endLine="286" />
    <method type="double" name="getOrdinate" startLine="289" endLine="299">
      <scope startLine="290" endLine="293">
        <declaration type="Unit<?>" name="u" />
      </scope>
      <scope startLine="293" endLine="296">
        <declaration type="Unit<?>" name="u" />
      </scope>
      <scope startLine="296" endLine="298" />
    </method>
    <javadoc>
      <text>* Returns true if the position indicated by the coordinates is
 * north of the northern limit of the UTM grid (84 degrees).</text>
      <param>latLong The coordinates.</param>
      <return>True if the latitude is greater than 84 degrees.</return>
    </javadoc>
    <method type="boolean" name="isNorthPolar" startLine="308" endLine="310" />
    <javadoc>
      <text>* Returns true if the position indicated by the coordinates is
 * south of the southern limit of the UTM grid (-80 degrees).</text>
      <param>latLong The coordinates.</param>
      <return>True if the latitude is less than -80 degrees.</return>
    </javadoc>
    <method type="boolean" name="isSouthPolar" startLine="319" endLine="321" />
    <javadoc>
      <text>* Returns the UTM/UPS latitude zone identifier for the specified coordinates.</text>
      <param>latLong The coordinates.</param>
      <return>the latitude zone character.</return>
    </javadoc>
    <method type="char" name="getLatitudeZone" startLine="329" endLine="356">
      <scope startLine="330" endLine="336">
        <scope startLine="331" endLine="333" />
        <scope startLine="333" endLine="335" />
      </scope>
      <scope startLine="337" endLine="343">
        <scope startLine="338" endLine="340" />
        <scope startLine="340" endLine="342" />
      </scope>
      <declaration type="int" name="degreesLatitude" />
      <declaration type="char" name="zone" />
      <scope startLine="346" endLine="348" />
      <scope startLine="349" endLine="351" />
      <scope startLine="352" endLine="354" />
    </method>
    <javadoc>
      <text>* Returns the UTM/UPS longitude zone number for the specified
 * coordinates.</text>
      <param>latLong  The coordinates.</param>
      <return>the longitude zone number.</return>
    </javadoc>
    <method type="int" name="getLongitudeZone" startLine="365" endLine="405">
      <declaration type="double" name="degreesLongitude" />
      <scope startLine="370" endLine="376">
        <scope startLine="371" endLine="373" />
        <scope startLine="373" endLine="375" />
      </scope>
      <declaration type="char" name="latitudeZone" />
      <scope startLine="381" endLine="393">
        <scope startLine="382" endLine="384" />
        <scope startLine="385" endLine="387" />
        <scope startLine="388" endLine="390" />
        <scope startLine="390" endLine="392" />
      </scope>
      <scope startLine="396" endLine="402">
        <scope startLine="397" endLine="399" />
        <scope startLine="399" endLine="401" />
      </scope>
      <comment>UPS longitude zones</comment>
      <comment>X latitude exceptions</comment>
      <comment>V latitude exceptions</comment>
    </method>
    <javadoc>
      <text>* Returns the central meridian (in radians) for the specified
 * UTM/UPS zone.</text>
      <param>longitudeZone The UTM/UPS longitude zone number.</param>
      <param>latitudeZone  The UTM/UPS latitude zone character.</param>
      <return>The central meridian for the specified zone.</return>
    </javadoc>
    <method type="double" name="getCentralMeridian" startLine="414" endLine="432">
      <scope startLine="416" endLine="418" />
      <scope startLine="420" endLine="422" />
      <scope startLine="424" endLine="430">
        <scope startLine="425" endLine="427" />
        <scope startLine="427" endLine="429" />
      </scope>
      <comment>polar zones</comment>
      <comment>X latitude zone exceptions</comment>
      <comment>V latitude zone exceptions</comment>
    </method>
    <javadoc>
      <text>* Converts latitude/longitude coordinates to UTM coordinates based on
 * the specified reference ellipsoid.</text>
      <param>latLong   The latitude/longitude coordinates.</param>
      <param>ellipsoid The reference ellipsoid.</param>
      <return>The UTM coordinates.</return>
    </javadoc>
    <method type="UTM" name="latLongToUtm" startLine="442" endLine="526">
      <declaration type="char" name="latitudeZone" />
      <declaration type="int" name="longitudeZone" />
      <declaration type="double" name="phi" />
      <declaration type="double" name="cosPhi" />
      <declaration type="double" name="cos2Phi" />
      <declaration type="double" name="cos3Phi" />
      <declaration type="double" name="cos4Phi" />
      <declaration type="double" name="cos5Phi" />
      <declaration type="double" name="cos6Phi" />
      <declaration type="double" name="cos7Phi" />
      <declaration type="double" name="cos8Phi" />
      <declaration type="double" name="tanPhi" />
      <declaration type="double" name="tan2Phi" />
      <declaration type="double" name="tan4Phi" />
      <declaration type="double" name="tan6Phi" />
      <declaration type="double" name="eb2" />
      <declaration type="double" name="eb4" />
      <declaration type="double" name="eb6" />
      <declaration type="double" name="eb8" />
      <declaration type="double" name="e2c2" />
      <declaration type="double" name="e4c4" />
      <declaration type="double" name="e6c6" />
      <declaration type="double" name="e8c8" />
      <declaration type="double" name="t2e2c2" />
      <declaration type="double" name="t2e4c4" />
      <declaration type="double" name="t2e6c6" />
      <declaration type="double" name="t2e8c8" />
      <declaration type="double" name="nu" />
      <declaration type="double" name="kn1" />
      <declaration type="double" name="t1" />
      <declaration type="double" name="t2" />
      <declaration type="double" name="t3" />
      <declaration type="double" name="t4" />
      <declaration type="double" name="t5" />
      <declaration type="double" name="kn2" />
      <declaration type="double" name="t6" />
      <declaration type="double" name="t7" />
      <declaration type="double" name="t8" />
      <declaration type="double" name="t9" />
      <declaration type="double" name="lambda" />
      <declaration type="double" name="lambda0" />
      <declaration type="double" name="dL" />
      <declaration type="double" name="dL2" />
      <declaration type="double" name="dL3" />
      <declaration type="double" name="dL4" />
      <declaration type="double" name="dL5" />
      <declaration type="double" name="dL6" />
      <declaration type="double" name="dL7" />
      <declaration type="double" name="dL8" />
      <declaration type="double" name="falseNorthing" />
      <scope startLine="511" endLine="514">
        <comment>southern hemisphere -- add false northing</comment>
      </scope>
      <scope startLine="514" endLine="517">
        <comment>northern hemisphere -- no false northing</comment>
      </scope>
      <declaration type="double" name="falseEasting" />
      <declaration type="double" name="northing" />
      <declaration type="double" name="easting" />
    </method>
    <javadoc>
      <text>* Converts latitude/longitude coordinates to UPS coordinates based on
 * the specified reference ellipsoid.</text>
      <param>latLong   The latitude/longitude coordinates.</param>
      <param>ellipsoid The reference ellipsoid.</param>
      <return>The UPS coordinates.</return>
    </javadoc>
    <method type="UTM" name="latLongToUps" startLine="536" endLine="568">
      <declaration type="char" name="latitudeZone" />
      <declaration type="int" name="longitudeZone" />
      <declaration type="double" name="latitude" />
      <declaration type="double" name="sign" />
      <declaration type="double" name="phi" />
      <declaration type="double" name="lambda" />
      <declaration type="double" name="a" />
      <declaration type="double" name="e" />
      <declaration type="double" name="e2" />
      <declaration type="double" name="c0" />
      <declaration type="double" name="eSinPhi" />
      <declaration type="double" name="tz" />
      <declaration type="double" name="radius" />
      <declaration type="double" name="falseNorthing" />
      <declaration type="double" name="northing" />
      <scope startLine="558" endLine="560" />
      <scope startLine="560" endLine="562" />
      <declaration type="double" name="falseEasting" />
      <declaration type="double" name="easting" />
    </method>
    <javadoc>
      <text>* Converts the UTM coordinates to latitude/longitude coordinates,
 * based on the specified reference ellipsoid.</text>
      <param>utm   The UTM coordinates.</param>
      <param>ellipsoid The reference ellipsoid.</param>
      <return>The latitude/longitude coordinates.</return>
    </javadoc>
    <method type="LatLong" name="utmToLatLong" startLine="578" endLine="676">
      <declaration type="double" name="northing" />
      <scope startLine="580" endLine="583">
        <comment>southern hemisphere</comment>
      </scope>
      <scope startLine="583" endLine="586">
        <comment>northern hemisphere</comment>
      </scope>
      <declaration type="double" name="arc0" />
      <declaration type="double" name="rho" />
      <declaration type="double" name="phi" />
      <scope startLine="592" endLine="600">
        <declaration type="double" name="arc" />
        <declaration type="double" name="diff" />
        <scope startLine="596" endLine="598" />
      </scope>
      <declaration type="double" name="cosPhi" />
      <declaration type="double" name="cos2Phi" />
      <declaration type="double" name="cos3Phi" />
      <declaration type="double" name="cos4Phi" />
      <declaration type="double" name="cos5Phi" />
      <declaration type="double" name="cos6Phi" />
      <declaration type="double" name="cos7Phi" />
      <declaration type="double" name="cos8Phi" />
      <declaration type="double" name="tanPhi" />
      <declaration type="double" name="tan2Phi" />
      <declaration type="double" name="tan4Phi" />
      <declaration type="double" name="tan6Phi" />
      <declaration type="double" name="eb2" />
      <declaration type="double" name="eb4" />
      <declaration type="double" name="eb6" />
      <declaration type="double" name="eb8" />
      <declaration type="double" name="e2c2" />
      <declaration type="double" name="e4c4" />
      <declaration type="double" name="e6c6" />
      <declaration type="double" name="e8c8" />
      <declaration type="double" name="t2e2c2" />
      <declaration type="double" name="t2e4c4" />
      <declaration type="double" name="t2e6c6" />
      <declaration type="double" name="t2e8c8" />
      <declaration type="double" name="t4e2c2" />
      <declaration type="double" name="t4e4c4" />
      <declaration type="double" name="nu" />
      <declaration type="double" name="nu2" />
      <declaration type="double" name="nu3" />
      <declaration type="double" name="nu5" />
      <declaration type="double" name="nu7" />
      <declaration type="double" name="lambda0" />
      <declaration type="double" name="dE" />
      <declaration type="double" name="dE2" />
      <declaration type="double" name="dE3" />
      <declaration type="double" name="dE4" />
      <declaration type="double" name="dE5" />
      <declaration type="double" name="dE6" />
      <declaration type="double" name="dE7" />
      <declaration type="double" name="dE8" />
      <declaration type="double" name="t10" />
      <declaration type="double" name="t11" />
      <declaration type="double" name="t12" />
      <declaration type="double" name="t13" />
      <declaration type="double" name="t14" />
      <declaration type="double" name="t15" />
      <declaration type="double" name="t16" />
      <declaration type="double" name="t17" />
      <declaration type="double" name="latitude" />
      <declaration type="double" name="longitude" />
      <comment>footpoint latitude</comment>
    </method>
    <javadoc>
      <text>* Converts the UPS coordinates to latitude/longitude coordinates,
 * based on the specified reference ellipsoid.</text>
      <param>ups   The UPS coordinates.</param>
      <param>ellipsoid The reference ellipsoid.</param>
      <return>The latitude/longitude coordinates.</return>
    </javadoc>
    <method type="LatLong" name="upsToLatLong" startLine="686" endLine="747">
      <declaration type="boolean" name="northernHemisphere" />
      <declaration type="double" name="dN" />
      <declaration type="double" name="dE" />
      <scope startLine="693" endLine="699">
        <scope startLine="694" endLine="696" />
        <scope startLine="696" endLine="698" />
      </scope>
      <declaration type="double" name="longitude" />
      <scope startLine="702" endLine="704" />
      <scope startLine="704" endLine="706" />
      <declaration type="double" name="a" />
      <declaration type="double" name="e" />
      <declaration type="double" name="e2" />
      <declaration type="double" name="e4" />
      <declaration type="double" name="e6" />
      <declaration type="double" name="e8" />
      <declaration type="double" name="aBar" />
      <declaration type="double" name="bBar" />
      <declaration type="double" name="cBar" />
      <declaration type="double" name="dBar" />
      <declaration type="double" name="c0" />
      <declaration type="double" name="r" />
      <scope startLine="724" endLine="726" />
      <scope startLine="726" endLine="728" />
      <scope startLine="728" endLine="730" />
      <scope startLine="730" endLine="732" />
      <declaration type="double" name="radius" />
      <declaration type="double" name="chi" />
      <declaration type="double" name="phi" />
      <declaration type="double" name="latitude" />
      <scope startLine="741" endLine="743" />
      <scope startLine="743" endLine="745" />
      <comment>check for zeroes (the poles)</comment>
      <comment>compute longitude</comment>
      <comment>compute latitude</comment>
    </method>
    <method type="UTM" name="copy" startLine="750" endLine="753" />
    <method type="UTM" name="newInstance" startLine="762" endLine="764" />
    <method type="void" name="write" startLine="766" endLine="771" />
    <method type="void" name="read" startLine="773" endLine="778" />
    <declaration type="XMLFormat<UTM>" name="XML" />
    <declaration type="long" name="serialVersionUID" />
    <comment>NOTE: The calculations in this class use power series expansions.
 The naming convention is to include the power in the name
 of the term, so that the square of K0 is 'K02', the cube
 is 'K03', etc.</comment>
    <comment>OpenGIS Interface.</comment>
    <comment>OpenGIS Interface.</comment>
    <comment>Default serialization.</comment>
    <comment />
  </class>
</source>
