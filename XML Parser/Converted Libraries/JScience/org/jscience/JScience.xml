<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience">
  <import name="java.math.BigInteger" />
  <import name="java.util.Date" />
  <import name="java.util.Random" />
  <import name="javax.measure.quantity.*" />
  <import name="javax.measure.unit.*" />
  <import name="org.jscience.economics.money.Currency" />
  <import name="org.jscience.economics.money.Money" />
  <import name="org.jscience.geography.coordinates.Altitude" />
  <import name="org.jscience.geography.coordinates.CompoundCoordinates" />
  <import name="org.jscience.geography.coordinates.LatLong" />
  <import name="org.jscience.geography.coordinates.Time" />
  <import name="org.jscience.geography.coordinates.UTM" />
  <import name="org.jscience.geography.coordinates.XYZ" />
  <import name="org.jscience.geography.coordinates.crs.CoordinatesConverter" />
  <import name="org.jscience.mathematics.function.Polynomial" />
  <import name="org.jscience.mathematics.function.Variable" />
  <import name="org.jscience.mathematics.number.Complex" />
  <import name="org.jscience.mathematics.number.Float64" />
  <import name="org.jscience.mathematics.number.LargeInteger" />
  <import name="org.jscience.mathematics.number.ModuloInteger" />
  <import name="org.jscience.mathematics.number.Rational" />
  <import name="org.jscience.mathematics.number.Real" />
  <import name="org.jscience.mathematics.vector.ComplexMatrix" />
  <import name="org.jscience.mathematics.vector.DenseMatrix" />
  <import name="org.jscience.mathematics.vector.DenseVector" />
  <import name="org.jscience.mathematics.vector.Float64Matrix" />
  <import name="org.jscience.mathematics.vector.Matrix" />
  <import name="org.jscience.mathematics.vector.Vector" />
  <import name="org.jscience.physics.amount.Amount" />
  <import name="org.jscience.physics.amount.AmountFormat" />
  <import name="org.jscience.physics.model.RelativisticModel" />
  <import name="javolution.lang.Configurable" />
  <import name="javolution.lang.MathLib" />
  <import name="javolution.text.TextBuilder" />
  <import name="javolution.context.ConcurrentContext" />
  <import name="javolution.context.LocalContext" />
  <import name="javolution.context.StackContext" />
  <import name="static javax.measure.unit.NonSI.*" />
  <import name="static javax.measure.unit.SI.*" />
  <import name="static org.jscience.economics.money.Currency.*" />
  <class name="JScience" startLine="55">
    <javadoc>
      <text>* <p> This class represents the <b>J</b>Science library; it contains the{@link #main} method for versionning, self-tests, and performance 
 * analysis.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.0, February 13, 2006</version>
    </javadoc>
    <javadoc>
      <text>* Holds the version information.</text>
    </javadoc>
    <declaration type="String" name="VERSION" />
    <declaration type="Configurable<Character>" name="MODULO" />
    <javadoc>
      <text>* Default constructor.</text>
    </javadoc>
    <method type="constructor" name="JScience" startLine="76" endLine="77">
      <comment>Forbids derivation.</comment>
    </method>
    <javadoc>
      <text>* The library {@link #main} method. The archive <codejscience.jar</code>
 * is auto-executable.
 * <ul>
 * <li><code>java [-cp javolution.jar] -jar jscience.jar version</code>
 * to output version information.</li>
 * <li><code>java [-cp javolution.jar] -jar jscience.jar test</code> to
 * perform self-tests.</li>
 * <li><code>java [-cp javolution.jar] -jar jscience.jar perf</code> for
 * performance analysis.</li>
 * </ul></text>
      <param>args the option arguments.</param>
      <throws>Exception if a problem occurs.</throws>
    </javadoc>
    <method type="void" name="main" startLine="94" endLine="115">
      <scope startLine="97" endLine="108">
        <scope startLine="98" endLine="101" />
        <scope startLine="101" endLine="104" />
        <scope startLine="104" endLine="107" />
      </scope>
    </method>
    <javadoc>
      <text>* Performs simple tests.</text>
      <throws>Exception if a problem occurs.</throws>
    </javadoc>
    <method type="void" name="testing" startLine="122" endLine="378">
      <scope startLine="128" endLine="222">
        <declaration type="Amount<Mass>" name="m0" />
        <declaration type="Amount<Mass>" name="m1" />
        <declaration type="Amount<ElectricCurrent>" name="m2" />
        <declaration type="Amount<Mass>" name="m3" />
        <declaration type="Amount<Mass>" name="m4" />
        <declaration type="Amount<ElectricCurrent>" name="m5" />
        <declaration type="Amount<Temperature>" name="t0" />
        <declaration type="Amount<Volume>" name="m6" />
        <declaration type="Amount<Frequency>" name="m7" />
        <declaration type="Amount<Frequency>" name="m8" />
        <declaration type="Amount<Frequency>" name="m10" />
        <declaration type="Amount<Frequency>" name="m11" />
        <scope startLine="195" endLine="210">
          <declaration type="Amount<Length>" name="x" />
          <declaration type="Amount<Velocity>" name="v" />
          <declaration type="Amount<Duration>" name="t" />
          <declaration type="long" name="ns" />
          <scope startLine="200" endLine="202" />
        </scope>
        <scope startLine="211" endLine="219">
          <declaration type="double" name="x" />
          <declaration type="double" name="v" />
          <declaration type="double" name="t" />
          <scope startLine="215" endLine="217" />
        </scope>
        <comment>Still exact.</comment>
        <comment>No more exact.</comment>
        <comment>m</comment>
        <comment>m/s</comment>
        <comment>s</comment>
        <comment>Note: Most likely the compiler get v * t out of the loop.</comment>
      </scope>
      <scope startLine="223" endLine="237">
        <declaration type="Amount<Length>" name="x" />
        <declaration type="Amount<Mass>" name="m" />
        <comment>Selects a relativistic model for dimension checking (typically at start-up).</comment>
        <comment>Length and Duration can be added.</comment>
        <comment>Energy is compatible with mass (E=mc2)</comment>
      </scope>
      <scope startLine="239" endLine="264">
        <declaration type="Amount<?>" name="carMileage" />
        <declaration type="Amount<?>" name="gazPrice" />
        <declaration type="Amount<Length>" name="tripDistance" />
        <declaration type="Amount<Money>" name="tripCost" />
        <comment>/</comment>
        <comment>Calculates the cost of a car trip in Europe for an American tourist.</comment>
        <comment>/</comment>
        <comment>Use currency symbols instead of ISO-4217 codes.</comment>
        <comment>Use "$" symbol instead of currency code ("USD")</comment>
        <comment>Use "€" symbol instead of currency code ("EUR")</comment>
        <comment>Sets exchange rates.</comment>
        <comment>1.0 € = 1.17 $</comment>
        <comment>Calculates trip cost.</comment>
        <comment>20 mi/gal.</comment>
        <comment>1.2 €/L</comment>
        <comment>400 km</comment>
        <comment>Displays cost.</comment>
      </scope>
      <scope startLine="265" endLine="288">
        <declaration type="Amount<ElectricResistance>" name="R1" />
        <declaration type="Amount<ElectricResistance>" name="R2" />
        <declaration type="Amount<ElectricPotential>" name="U0" />
        <declaration type="DenseMatrix<Amount<?>>[]" name="A" />
        <declaration type="DenseVector<Amount<?>>[]" name="B" />
        <declaration type="Vector<Amount<?>>" name="X" />
        <comment>1% precision.</comment>
        <comment>1% precision.</comment>
        <comment>±0.01 V fluctuation.</comment>
        <comment>Equations:  U0 = U1 + U2       |1  1  0 |   |U1|   |U0|</comment>
        <comment>U1 = R1 * I    =>  |-1 0  R1| * |U2| = |0 |</comment>
        <comment>U2 = R2 * I        |0 -1  R2|   |I |   |0 |</comment>
        <comment />
        <comment>A      *  X   =  B</comment>
        <comment />
      </scope>
      <scope startLine="289" endLine="310">
        <declaration type="Variable<Complex>" name="varX" />
        <declaration type="Variable<Complex>" name="varY" />
        <declaration type="Polynomial<Complex>" name="x" />
        <declaration type="Polynomial<Complex>" name="fx" />
        <comment>Defines two local variables (x, y).</comment>
        <comment>f(x) = 1 + 2x + ix²</comment>
        <comment>Calculates expression.</comment>
      </scope>
      <scope startLine="312" endLine="342">
        <declaration type="CoordinatesConverter<LatLong,UTM>" name="latLongToUTM" />
        <declaration type="LatLong" name="latLong" />
        <declaration type="UTM" name="utm" />
        <declaration type="CoordinatesConverter<LatLong,XYZ>" name="latLongToXYZ" />
        <declaration type="XYZ" name="xyz" />
        <declaration type="Altitude" name="alt" />
        <declaration type="CompoundCoordinates<LatLong,Altitude>" name="latLongAlt" />
        <declaration type="Time" name="time" />
        <declaration type="CompoundCoordinates<CompoundCoordinates<LatLong,Altitude>,Time>" name="latLongAltTime" />
        <comment>Simple Lat/Long to UTM conversion.</comment>
        <comment>Lat/Long to XYZ conversion (assume height of zero).</comment>
        <comment>Compound coordinates - Lat/Long/Alt to XYZ conversion.</comment>
        <comment>Even more compounding...</comment>
      </scope>
      <scope startLine="344" endLine="377">
        <declaration type="Real" name="two" />
        <declaration type="Real" name="three" />
        <declaration type="Real" name="sqrt2" />
        <declaration type="LargeInteger" name="dividend" />
        <declaration type="LargeInteger" name="divisor" />
        <declaration type="Rational" name="rational" />
        <declaration type="ModuloInteger" name="m" />
        <scope startLine="365" endLine="373">
          <declaration type="ModuloInteger" name="inv" />
          <declaration type="ModuloInteger" name="one" />
        </scope>
        <scope startLine="373" endLine="375" />
        <comment>2.0000..00</comment>
        <comment>Assumes 100 exact digits for exact numbers.</comment>
        <comment>Avoids impacting others threads.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Measures performance.</text>
    </javadoc>
    <method type="void" name="benchmark" startLine="383" endLine="538">
      <declaration type="Object[]" name="results" />
      <scope startLine="397" endLine="404">
        <declaration type="Float64" name="x" />
        <scope startLine="400" endLine="402" />
      </scope>
      <scope startLine="409" endLine="416">
        <declaration type="Float64" name="x" />
        <scope startLine="412" endLine="414" />
      </scope>
      <scope startLine="421" endLine="428">
        <declaration type="Complex" name="x" />
        <scope startLine="424" endLine="426" />
      </scope>
      <scope startLine="433" endLine="440">
        <declaration type="Complex" name="x" />
        <scope startLine="436" endLine="438" />
      </scope>
      <scope startLine="445" endLine="452">
        <declaration type="Amount<Mass>" name="x" />
        <scope startLine="448" endLine="450" />
      </scope>
      <scope startLine="457" endLine="464">
        <declaration type="Amount<Mass>" name="x" />
        <scope startLine="460" endLine="462" />
      </scope>
      <declaration type="BigInteger" name="big" />
      <declaration type="byte[]" name="bytes" />
      <declaration type="LargeInteger" name="large" />
      <scope startLine="475" endLine="481">
        <scope startLine="477" endLine="479" />
      </scope>
      <scope startLine="486" endLine="492">
        <scope startLine="488" endLine="490" />
      </scope>
      <scope startLine="497" endLine="501">
        <scope startLine="498" endLine="500" />
      </scope>
      <scope startLine="506" endLine="510">
        <scope startLine="507" endLine="509" />
      </scope>
      <declaration type="int" name="size" />
      <declaration type="double[][]" name="values" />
      <scope startLine="518" endLine="522">
        <scope startLine="519" endLine="521" />
      </scope>
      <scope startLine="526" endLine="529" />
      <scope startLine="529" endLine="531" />
      <comment>Local setting.</comment>
    </method>
    <method type="void" name="multiplyMatrices" startLine="540" endLine="595">
      <declaration type="int" name="size" />
      <scope startLine="546" endLine="550">
        <scope startLine="547" endLine="549" />
      </scope>
      <declaration type="MatrixDouble" name="PM" />
      <declaration type="MatrixDouble" name="R1" />
      <declaration type="Matrix<Float64>" name="FM" />
      <declaration type="Matrix<Float64>" name="R2" />
      <declaration type="Complex[][]" name="complexes" />
      <scope startLine="570" endLine="575">
        <scope startLine="571" endLine="574" />
      </scope>
      <declaration type="Matrix<Complex>" name="CM" />
      <declaration type="Amount<?>[][]" name="measures" />
      <scope startLine="584" endLine="589">
        <scope startLine="585" endLine="588" />
      </scope>
      <declaration type="DenseMatrix<Amount<?>>" name="MM" />
      <comment>Warming up.</comment>
      <comment>Warming up.</comment>
      <comment>Checks results.</comment>
      <comment>Warming up.</comment>
    </method>
    <class name="MatrixDouble" startLine="597">
      <declaration type="double[][]" name="o" />
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <method type="constructor" name="MatrixDouble" startLine="604" endLine="608" />
      <method type="MatrixDouble" name="times" startLine="610" endLine="629">
        <declaration type="MatrixDouble" name="M" />
        <declaration type="double[]" name="thatColj" />
        <scope startLine="615" endLine="627">
          <scope startLine="616" endLine="618" />
          <scope startLine="619" endLine="626">
            <declaration type="double[]" name="thisRowi" />
            <declaration type="double" name="s" />
            <scope startLine="622" endLine="624" />
          </scope>
        </scope>
      </method>
      <method type="void" name="startTime" startLine="632" endLine="634" />
      <javadoc>
        <text>* Ends measuring time and display the execution time per iteration.</text>
        <param>iterationsthe number iterations performed since {@link #startTime}.</param>
      </javadoc>
      <method type="void" name="endTime" startLine="642" endLine="668">
        <declaration type="long" name="nanoSeconds" />
        <declaration type="long" name="picoDuration" />
        <declaration type="long" name="divisor" />
        <declaration type="String" name="unit" />
        <scope startLine="647" endLine="650">
          <comment>1 s</comment>
        </scope>
        <scope startLine="650" endLine="653" />
        <scope startLine="653" endLine="656" />
        <scope startLine="656" endLine="659" />
        <declaration type="TextBuilder" name="tb" />
        <declaration type="int" name="fracDigits" />
        <scope startLine="664" endLine="666" />
        <comment>4 digits precision.</comment>
      </method>
      <declaration type="long" name="_time" />
    </class>
    <comment>Nbr of rows.</comment>
    <comment>Nbr of columns.</comment>
  </class>
</source>
