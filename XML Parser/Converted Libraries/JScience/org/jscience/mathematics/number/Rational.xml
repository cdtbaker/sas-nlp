<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.number">
  <import name="org.jscience.mathematics.structure.Field" />
  <import name="javolution.context.ObjectFactory" />
  <import name="javolution.text.Text" />
  <import name="javolution.xml.XMLFormat" />
  <import name="javolution.xml.stream.XMLStreamException" />
  <class name="Rational" extends="Number<Rational>" startLine="18">
    <implements name="Field<Rational>" />
    <javadoc>
      <text>* <p> This class represents the ratio of two {@link LargeInteger} numbers.</p>
 * <p> Instances of this class are immutable and can be used to find exact 
 * solutions to linear equations with the {@link org.jscience.mathematics.vector.Matrix Matrix} class.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.0, February 13, 2006</version>
      <see><a href="http://en.wikipedia.org/wiki/Rational_numbers">
 *      Wikipedia: Rational Numbers</a></see>
    </javadoc>
    <javadoc>
      <text>* Holds the default XML representation for rational numbers.
 * This representation consists of a simple <code>value</code> attribute
 * holding the {@link #toText() textual} representation.</text>
    </javadoc>
    <method type="Rational" name="newInstance" startLine="40" endLine="42" />
    <method type="void" name="write" startLine="44" endLine="46" />
    <method type="void" name="read" startLine="48" endLine="50">
      <comment>Nothing to do, immutable.</comment>
    </method>
    <declaration type="XMLFormat<Rational>" name="XML" />
    <javadoc>
      <text>* Holds the factory constructing rational instances.</text>
    </javadoc>
    <method type="Rational" name="create" startLine="58" endLine="60" />
    <declaration type="ObjectFactory<Rational>" name="FACTORY" />
    <javadoc>
      <text>* The {@link Rational} representing the additive identity.</text>
    </javadoc>
    <declaration type="Rational" name="ZERO" />
    <javadoc>
      <text>* The {@link Rational} representing the multiplicative identity.</text>
    </javadoc>
    <declaration type="Rational" name="ONE" />
    <javadoc>
      <text>* Holds the dividend.</text>
    </javadoc>
    <declaration type="LargeInteger" name="_dividend" />
    <javadoc>
      <text>* Holds the divisor.</text>
    </javadoc>
    <declaration type="LargeInteger" name="_divisor" />
    <javadoc>
      <text>* Default constructor.</text>
    </javadoc>
    <method type="constructor" name="Rational" startLine="88" endLine="89" />
    <javadoc>
      <text>* Creates a rational number for the specified integer dividend and 
 * divisor.</text>
      <param>dividend the dividend value.</param>
      <param>divisor the divisor value.</param>
      <throws>ArithmeticException if <code>divisor == 0</code></throws>
    </javadoc>
    <method type="constructor" name="Rational" startLine="99" endLine="102" />
    <javadoc>
      <text>* Returns the rational number for the specified integer dividend and 
 * divisor.</text>
      <param>dividend the dividend value.</param>
      <param>divisor the divisor value.</param>
      <return><code>dividend / divisor</code></return>
      <throws>ArithmeticException if <code>divisor == 0</code></throws>
    </javadoc>
    <method type="Rational" name="valueOf" startLine="113" endLine="118">
      <declaration type="Rational" name="r" />
    </method>
    <javadoc>
      <text>* Returns the rational number for the specified large integer 
 * dividend and divisor.</text>
      <param>dividend the dividend value.</param>
      <param>divisor the divisor value.</param>
      <return><code>dividend / divisor</code></return>
      <throws>ArithmeticException if <code>divisor.isZero()</code></throws>
    </javadoc>
    <method type="Rational" name="valueOf" startLine="129" endLine="134">
      <declaration type="Rational" name="r" />
    </method>
    <javadoc>
      <text>* Returns the rational number for the specified character sequence.</text>
      <param>chars the character sequence.</param>
      <return>the corresponding rational number.</return>
    </javadoc>
    <method type="Rational" name="valueOf" startLine="142" endLine="154">
      <declaration type="Text" name="txt" />
      <declaration type="int" name="sep" />
      <scope startLine="145" endLine="150">
        <declaration type="LargeInteger" name="dividend" />
        <declaration type="LargeInteger" name="divisor" />
        <comment>No divisor.</comment>
      </scope>
      <scope startLine="150" endLine="153" />
      <comment>TODO Use TextFormat...</comment>
    </method>
    <javadoc>
      <text>* Returns the smallest dividend of the fraction representing this
 * rational number.</text>
      <return>this rational dividend.</return>
    </javadoc>
    <method type="LargeInteger" name="getDividend" startLine="162" endLine="164" />
    <javadoc>
      <text>* Returns the smallest divisor of the fraction representing this 
 * rational (always positive).</text>
      <return>this rational divisor.</return>
    </javadoc>
    <method type="LargeInteger" name="getDivisor" startLine="172" endLine="174" />
    <javadoc>
      <text>* Returns the closest integer value to this rational number.</text>
      <return>this rational rounded to the nearest integer.</return>
    </javadoc>
    <method type="LargeInteger" name="round" startLine="181" endLine="185">
      <declaration type="LargeInteger" name="halfDivisor" />
    </method>
    <javadoc>
      <text>* Returns the opposite of this rational number.</text>
      <return><code>-this</code>.</return>
    </javadoc>
    <method type="Rational" name="opposite" startLine="192" endLine="194" />
    <javadoc>
      <text>* Returns the sum of this rational number with the one specified.</text>
      <param>that the rational number to be added.</param>
      <return><code>this + that</code>.</return>
    </javadoc>
    <method type="Rational" name="plus" startLine="202" endLine="207" />
    <javadoc>
      <text>* Returns the difference between this rational number and the one
 * specified.</text>
      <param>that the rational number to be subtracted.</param>
      <return><code>this - that</code>.</return>
    </javadoc>
    <method type="Rational" name="minus" startLine="216" endLine="221" />
    <javadoc>
      <text>* Returns the product of this rational number with the specified 
 * <code>long</code> multiplier.</text>
      <param>multiplier the <code>long</code> multiplier.</param>
      <return><code>this · multiplier</code>.</return>
    </javadoc>
    <method type="Rational" name="times" startLine="230" endLine="232" />
    <javadoc>
      <text>* Returns the product of this rational number with the one specified.</text>
      <param>that the rational number multiplier.</param>
      <return><code>this · that</code>.</return>
    </javadoc>
    <method type="Rational" name="times" startLine="240" endLine="246">
      <declaration type="Rational" name="r" />
    </method>
    <javadoc>
      <text>* Returns the inverse of this rational number.</text>
      <return><code>1 / this</code>.</return>
      <throws>ArithmeticException if <code>dividend.isZero()</code></throws>
    </javadoc>
    <method type="Rational" name="inverse" startLine="254" endLine="259" />
    <javadoc>
      <text>* Returns this rational number divided by the one specified.</text>
      <param>that the rational number divisor.</param>
      <return><code>this / that</code>.</return>
      <throws>ArithmeticException if <code>that.equals(ZERO)</code></throws>
    </javadoc>
    <method type="Rational" name="divide" startLine="268" endLine="271" />
    <javadoc>
      <text>* Returns the absolute value of this rational number.</text>
      <return><code>|this|</code>.</return>
    </javadoc>
    <method type="Rational" name="abs" startLine="278" endLine="280" />
    <javadoc>
      <text>* Indicates if this rational number is equal to zero.</text>
      <return><code>this == 0</code></return>
    </javadoc>
    <method type="boolean" name="isZero" startLine="287" endLine="289" />
    <javadoc>
      <text>* Indicates if this rational number is greater than zero.</text>
      <return><code>this > 0</code></return>
    </javadoc>
    <method type="boolean" name="isPositive" startLine="297" endLine="299" />
    <javadoc>
      <text>* Indicates if this rational number is less than zero.</text>
      <return><code>this < 0</code></return>
    </javadoc>
    <method type="boolean" name="isNegative" startLine="306" endLine="308" />
    <javadoc>
      <text>* Compares the absolute value of two rational numbers.</text>
      <param>that the rational number to be compared with.</param>
      <return><code>|this| > |that|</code></return>
    </javadoc>
    <method type="boolean" name="isLargerThan" startLine="316" endLine="319" />
    <javadoc>
      <text>* Returns the decimal text representation of this number.</text>
      <return>the text representation of this number.</return>
    </javadoc>
    <method type="Text" name="toText" startLine="326" endLine="329" />
    <javadoc>
      <text>* Compares this rational number against the specified object.</text>
      <param>that the object to compare with.</param>
      <return><code>true</code> if the objects are the same;
 * <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="338" endLine="345">
      <scope startLine="339" endLine="342" />
      <scope startLine="342" endLine="344" />
    </method>
    <javadoc>
      <text>* Returns the hash code for this rational number.</text>
      <return>the hash code value.</return>
    </javadoc>
    <method type="int" name="hashCode" startLine="352" endLine="354" />
    <javadoc>
      <text>* Returns the value of this rational number as a <code>long</code>.</text>
      <return>the numeric value represented by this rational after conversion
 * to type <code>long</code>.</return>
    </javadoc>
    <method type="long" name="longValue" startLine="362" endLine="364" />
    <javadoc>
      <text>* Returns the value of this rational number as a <code>double</code>.</text>
      <return>the numeric value represented by this rational after conversion
 * to type <code>double</code>.</return>
    </javadoc>
    <method type="double" name="doubleValue" startLine="372" endLine="392">
      <declaration type="int" name="dividendBitLength" />
      <declaration type="int" name="divisorBitLength" />
      <scope startLine="379" endLine="385">
        <declaration type="int" name="shift" />
        <declaration type="long" name="divisor" />
        <declaration type="LargeInteger" name="dividend" />
        <comment>Normalizes the divisor to 63 bits.</comment>
      </scope>
      <scope startLine="385" endLine="391">
        <declaration type="int" name="shift" />
        <declaration type="long" name="dividend" />
        <declaration type="LargeInteger" name="divisor" />
        <comment>Normalizes the dividend to 63 bits.</comment>
      </scope>
      <comment>Avoid negative numbers (ref. bitLength)</comment>
      <comment>Normalize to 63 bits (minimum).</comment>
    </method>
    <javadoc>
      <text>* Compares two rational number numerically.</text>
      <param>that the rational number to compare with.</param>
      <return>-1, 0 or 1 as this rational number is numerically less than, 
 * equal to, or greater than <code>that</code>.</return>
    </javadoc>
    <method type="int" name="compareTo" startLine="401" endLine="404" />
    <javadoc>
      <text>* Returns the normalized form of this rational.</text>
      <return>this rational after normalization.</return>
      <throws>ArithmeticException if <code>divisor.isZero()</code></throws>
    </javadoc>
    <method type="Rational" name="normalize" startLine="412" endLine="429">
      <scope startLine="413" endLine="426">
        <scope startLine="414" endLine="421">
          <declaration type="LargeInteger" name="gcd" />
          <scope startLine="416" endLine="419" />
        </scope>
        <scope startLine="421" endLine="425" />
      </scope>
      <scope startLine="426" endLine="428" />
    </method>
    <method type="Rational" name="copy" startLine="432" endLine="437">
      <declaration type="Rational" name="r" />
    </method>
    <declaration type="long" name="serialVersionUID" />
  </class>
</source>
