<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.number">
  <import name="org.jscience.mathematics.structure.Ring" />
  <import name="javolution.lang.Realtime" />
  <import name="javolution.text.Text" />
  <import name="javolution.xml.XMLSerializable" />
  <class name="Number" extends="java.lang.Number" startLine="16">
    <implements name="Ring<T>" />
    <implements name="Comparable<T>" />
    <implements name="Realtime" />
    <implements name="XMLSerializable" />
    <javadoc>
      <text>* <p> This class represents a {@link javolution.lang.ValueType value-type}number.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.0, February 13, 2006</version>
      <see><a href="http://en.wikipedia.org/wiki/Number">
 *      Wikipedia: Number</a></see>
    </javadoc>
    <method name="isLargerThan" type="boolean" startLine="28" endLine="33" />
    <javadoc>
      <text>* Compares the magnitude of this number with that number.</text>
      <return><code>|this| > |that|</code></return>
    </javadoc>
    <method name="longValue" type="long" startLine="35" endLine="41" />
    <javadoc>
      <text>* Returns the value of this number as a <code>long</code>.</text>
      <return>the numeric value represented by this object after conversion
 * to type <code>long</code>.</return>
    </javadoc>
    <method name="doubleValue" type="double" startLine="43" endLine="49" />
    <javadoc>
      <text>* Returns the value of this number as a <code>double</code>.</text>
      <return>the numeric value represented by this object after conversion
 * to type <code>double</code>.</return>
    </javadoc>
    <method name="compareTo" type="int" startLine="51" endLine="62" />
    <javadoc>
      <text>* Compares this number with the specified number for order.  Returns a
 * negative integer, zero, or a positive integer as this number is less
 * than, equal to, or greater than the specified number. 
 * Implementation must ensure that this method is consistent with equals 
 * <code>(x.compareTo(y)==0) == (x.equals(y))</code>,</text>
      <param>that the number to be compared.</param>
      <return>a negative integer, zero, or a positive integer as this number
 * is less than, equal to, or greater than the specified number.</return>
    </javadoc>
    <javadoc>
      <text>* Indicates if this number is ordered before that number
 * (convenience method).</text>
      <param>that the number to compare with.</param>
      <return><code>this.compareTo(that) < 0</code>.</return>
    </javadoc>
    <method type="boolean" name="isLessThan" startLine="71" endLine="73" />
    <javadoc>
      <text>* Indicates if this number is ordered after that number
 * (convenience method).</text>
      <param>that the number to compare with.</param>
      <return><code>this.compareTo(that) > 0</code>.</return>
    </javadoc>
    <method type="boolean" name="isGreaterThan" startLine="82" endLine="84" />
    <javadoc>
      <text>* Returns the difference between this number and the one specified.</text>
      <param>that the number to be subtracted.</param>
      <return><code>this - that</code>.</return>
    </javadoc>
    <method type="T" name="minus" startLine="92" endLine="94" />
    <javadoc>
      <text>* Returns this number raised at the specified positive exponent.</text>
      <param>exp the positive exponent.</param>
      <return><code>this<sup>exp</sup></code></return>
      <throws>IllegalArgumentException if <code>exp &lt;= 0</code></throws>
    </javadoc>
    <method type="T" name="pow" startLine="104" endLine="114">
      <declaration type="T" name="t" />
      <declaration type="int" name="halfExp" />
    </method>
    <javadoc>
      <text>* Returns the value of this number as a <code>byte</code>.
 * This may involve rounding or truncation.</text>
      <return>the numeric value represented by this object after conversion
 * to type <code>byte</code>.</return>
    </javadoc>
    <method type="byte" name="byteValue" startLine="123" endLine="125" />
    <javadoc>
      <text>* Returns the value of this number as a <code>short</code>.
 * This may involve rounding or truncation.</text>
      <return>the numeric value represented by this object after conversion
 * to type <code>short</code>.</return>
    </javadoc>
    <method type="short" name="shortValue" startLine="134" endLine="136" />
    <javadoc>
      <text>* Returns the value of this number as an <code>int</code>.
 * This may involve rounding or truncation.</text>
      <return>the numeric value represented by this object after conversion
 * to type <code>int</code>.</return>
    </javadoc>
    <method type="int" name="intValue" startLine="145" endLine="147" />
    <javadoc>
      <text>* Returns the value of this number as a <code>float</code>.
 * This may involve rounding.</text>
      <return>the numeric value represented by this object after conversion
 * to type <code>float</code>.</return>
    </javadoc>
    <method type="float" name="floatValue" startLine="156" endLine="158" />
    <method name="equals" type="boolean" startLine="159" endLine="166" />
    <javadoc>
      <text>* Indicates if this number is equals to the specified object.</text>
      <param>obj the object to be compared with.</param>
      <return><code>true</code> if this number and the specified argument
 * represent the same number; <code>false</code> otherwise.</return>
    </javadoc>
    <method name="hashCode" type="int" startLine="168" endLine="174" />
    <javadoc>
      <text>* Returns the hash code for this number (consistent with {@link #equals(Object)}.</text>
      <return>this number hash code.</return>
    </javadoc>
    <method name="toText" type="Text" startLine="176" endLine="183" />
    <javadoc>
      <text>* Returns the textual representation of this real-time object
 * (equivalent to <code>toString</code> except that the returned value
 * can be allocated from the local context space).</text>
      <return>this object's textual representation.</return>
    </javadoc>
    <method name="copy" type="Number<T>" startLine="185" endLine="192" />
    <javadoc>
      <text>* Returns a copy of this number {@link javolution.context.AllocatorContext allocated} 
 * by the calling thread (possibly on the stack).</text>
      <return>an identical and independant copy of this number.</return>
    </javadoc>
    <javadoc>
      <text>* Returns the text representation of this number as a 
 * <code>java.lang.String</code>.</text>
      <return><code>toText().toString()</code></return>
    </javadoc>
    <method type="String" name="toString" startLine="200" endLine="202" />
  </class>
</source>
