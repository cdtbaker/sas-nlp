<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.number">
  <import name="org.jscience.mathematics.structure.Field" />
  <import name="javolution.context.LocalContext" />
  <import name="javolution.context.ObjectFactory" />
  <import name="javolution.lang.MathLib" />
  <import name="javolution.text.Text" />
  <import name="javolution.text.TextBuilder" />
  <import name="javolution.xml.XMLFormat" />
  <import name="javolution.xml.stream.XMLStreamException" />
  <class name="FloatingPoint" extends="Number<FloatingPoint>" startLine="21">
    <implements name="Field<FloatingPoint>" />
    <javadoc>
      <text>* <p> This class represents a floating point number of arbitrary precision.
 * A floating point number consists of a {@link #getSignificand significand}and a decimal {@link #getExponent exponent}: 
 * (<code>significand · 10<sup>exponent</sup></code>).</p>
 * <p> Unlike {@link Real} numbers, no calculation error is performed on 
 * floating point instances but the number of digits used during 
 * calculations can be specified (see {@link #setDigits(int)}). The 
 * largest the number of digits, the smallest the numeric error.
 * For example:[code]
 * FloatingPoint two = FloatingPoint.valueOf(2); 
 * FloatingPoint.setDigits(30); // 30 digits calculations.
 * System.out.println(two.sqrt());
 * >   0.141421356237309504880168872420E1
 * [/code]</p>
 * <p> Instances of this class are immutable and can be used to find  
 * accurate solutions to linear equations with the {@link org.jscience.mathematics.vector.Matrix Matrix} class.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>4.1, June 8, 2007</version>
      <see><a href="http://en.wikipedia.org/wiki/Floating_point">
 *      Wikipedia: Floating point</a></see>
    </javadoc>
    <javadoc>
      <text>* Holds the default XML representation for floating point numbers.
 * This representation consists of a simple <code>value</code> attribute
 * holding the {@link #toText() textual} representation.</text>
    </javadoc>
    <method type="FloatingPoint" name="newInstance" startLine="60" endLine="62" />
    <method type="void" name="write" startLine="65" endLine="67" />
    <method type="void" name="read" startLine="69" endLine="71">
      <comment>Nothing to do, immutable.</comment>
    </method>
    <declaration type="XMLFormat<FloatingPoint>" name="XML" />
    <javadoc>
      <text>* Holds the factory constructing floating point instances.</text>
    </javadoc>
    <method type="FloatingPoint" name="create" startLine="79" endLine="81" />
    <declaration type="ObjectFactory<FloatingPoint>" name="FACTORY" />
    <javadoc>
      <text>* The floating point instance representing the additive identity.</text>
    </javadoc>
    <declaration type="FloatingPoint" name="ZERO" />
    <javadoc>
      <text>* The floating point instance representing the multiplicative identity.</text>
    </javadoc>
    <declaration type="FloatingPoint" name="ONE" />
    <javadoc>
      <text>* The Not-a-Number instance (unique).</text>
    </javadoc>
    <declaration type="FloatingPoint" name="NaN" />
    <javadoc>
      <text>* Holds the number of digits to be used (default 20 digits).</text>
    </javadoc>
    <declaration type="LocalContext.Reference<Integer>" name="DIGITS" />
    <javadoc>
      <text>* Holds the significand value.</text>
    </javadoc>
    <declaration type="LargeInteger" name="_significand" />
    <javadoc>
      <text>* Holds the power of 10 exponent.</text>
    </javadoc>
    <declaration type="int" name="_exponent" />
    <javadoc>
      <text>* Default constructor.</text>
    </javadoc>
    <method type="constructor" name="FloatingPoint" startLine="121" endLine="122" />
    <javadoc>
      <text>* Creates a floating point number for the specified significand and 
 * exponent.</text>
      <param>significand the significand.</param>
      <param>exponent the power of two exponent.</param>
    </javadoc>
    <method type="constructor" name="FloatingPoint" startLine="131" endLine="134" />
    <javadoc>
      <text>* Returns the floating point number for the specified {@link LargeInteger} significand and power of two exponent.</text>
      <param>significand the significand value.</param>
      <param>exponent the power of two exponent.</param>
      <return><code>(significand · 2<sup>exponent</sup></code></return>
    </javadoc>
    <method type="FloatingPoint" name="valueOf" startLine="144" endLine="149">
      <declaration type="FloatingPoint" name="fp" />
    </method>
    <javadoc>
      <text>* Returns the floating point number for the specified <code>long</code>
 * significand and power of two exponent (convenience method).</text>
      <param>significand the significand value.</param>
      <param>exponent the power of two exponent.</param>
      <return><code>(significand · 2<sup>exponent</sup></code></return>
    </javadoc>
    <method type="FloatingPoint" name="valueOf" startLine="159" endLine="164">
      <declaration type="FloatingPoint" name="fp" />
    </method>
    <javadoc>
      <text>* Returns the floating point number for the specified <code>long</code>
 * value (convenience method).</text>
      <param>longValue the <code>long</code> value.</param>
      <return><code>FloatingPoint.valueOf(longValue, 0)</code></return>
    </javadoc>
    <method type="FloatingPoint" name="valueOf" startLine="173" endLine="175" />
    <javadoc>
      <text>* Returns the floating point number for the specified <code>double</code>
 * value (convenience method).</text>
      <param>doubleValue the <code>double</code> value.</param>
      <return><code>FloatingPoint.valueOf(longValue, 0)</code></return>
    </javadoc>
    <method type="FloatingPoint" name="valueOf" startLine="184" endLine="196">
      <declaration type="int" name="e" />
      <declaration type="long" name="significand" />
      <comment>Find the exponent e such as: value == x.xxx * 10^e</comment>
      <comment>18 digits significand.</comment>
    </method>
    <javadoc>
      <text>* Returns the floating point number for the specified character sequence.
 * The number of digits</text>
      <param>chars the character sequence.</param>
      <return>the corresponding FloatingPoint number.</return>
    </javadoc>
    <method type="FloatingPoint" name="valueOf" startLine="205" endLine="211">
      <declaration type="Real" name="real" />
      <comment>Use same format as Real.</comment>
    </method>
    <javadoc>
      <text>* Returns the {@link javolution.context.LocalContext local} number of 
 * digits used during calculations (default 20 digits).</text>
      <return>the number of digits.</return>
    </javadoc>
    <method type="int" name="getDigits" startLine="219" endLine="221" />
    <javadoc>
      <text>* Sets the {@link javolution.context.LocalContext local} number of digits
 * to be used during calculations.</text>
      <param>digits the number of digits.</param>
      <throws>IllegalArgumentException if <code>digits &lt;= 0</code></throws>
    </javadoc>
    <method type="void" name="setDigits" startLine="230" endLine="235" />
    <javadoc>
      <text>* Returns the significand value.</text>
      <return>this floating point significand.</return>
    </javadoc>
    <method type="LargeInteger" name="getSignificand" startLine="242" endLine="244" />
    <javadoc>
      <text>* Returns the decimal exponent.</text>
      <return>this floating point decimal exponent.</return>
    </javadoc>
    <method type="int" name="getExponent" startLine="251" endLine="253" />
    <javadoc>
      <text>* Returns the closest integer to this floating point number.</text>
      <return>this floating point rounded to the nearest integer.</return>
    </javadoc>
    <method type="LargeInteger" name="round" startLine="260" endLine="266">
      <declaration type="LargeInteger" name="half" />
    </method>
    <javadoc>
      <text>* Returns the opposite of this floating point number.</text>
      <return><code>-this</code>.</return>
    </javadoc>
    <method type="FloatingPoint" name="opposite" startLine="273" endLine="275" />
    <javadoc>
      <text>* Returns the sum of this floating point number with the one specified.</text>
      <param>that the floating point number to be added.</param>
      <return><code>this + that</code>.</return>
    </javadoc>
    <method type="FloatingPoint" name="plus" startLine="283" endLine="290">
      <declaration type="int" name="pow10Scaling" />
      <declaration type="LargeInteger" name="thatScaled" />
    </method>
    <javadoc>
      <text>* Returns the difference between this FloatingPoint number and the one
 * specified.</text>
      <param>that the floating point number to be subtracted.</param>
      <return><code>this - that</code>.</return>
    </javadoc>
    <method type="FloatingPoint" name="minus" startLine="299" endLine="306">
      <declaration type="int" name="pow10Scaling" />
      <declaration type="LargeInteger" name="thatScaled" />
    </method>
    <javadoc>
      <text>* Returns the product of this floating point number with the specified 
 * <code>long</code> multiplier.</text>
      <param>multiplier the <code>long</code> multiplier.</param>
      <return><code>this · multiplier</code>.</return>
    </javadoc>
    <method type="FloatingPoint" name="times" startLine="315" endLine="317" />
    <javadoc>
      <text>* Returns the product of this floating point number with the one specified.</text>
      <param>that the floating point number multiplier.</param>
      <return><code>this · that</code>.</return>
    </javadoc>
    <method type="FloatingPoint" name="times" startLine="325" endLine="329" />
    <javadoc>
      <text>* Returns the inverse of this floating point number.</text>
      <return><code>1 / this</code>.</return>
      <throws>ArithmeticException if <code>dividend.isZero()</code></throws>
    </javadoc>
    <method type="FloatingPoint" name="inverse" startLine="337" endLine="344">
      <declaration type="int" name="pow10" />
      <declaration type="LargeInteger" name="dividend" />
    </method>
    <javadoc>
      <text>* Returns this floating point number divided by the one specified.</text>
      <param>that the FloatingPoint number divisor.</param>
      <return><code>this / that</code>.</return>
      <throws>ArithmeticException if <code>that.equals(ZERO)</code></throws>
    </javadoc>
    <method type="FloatingPoint" name="divide" startLine="353" endLine="360">
      <declaration type="int" name="pow10" />
      <declaration type="LargeInteger" name="dividend" />
    </method>
    <javadoc>
      <text>* Returns the absolute value of this floating point  number.</text>
      <return><code>|this|</code>.</return>
    </javadoc>
    <method type="FloatingPoint" name="abs" startLine="367" endLine="369" />
    <javadoc>
      <text>* Returns the square root of this floating point number.</text>
      <return>the positive square root of this floating point number.</return>
    </javadoc>
    <method type="FloatingPoint" name="sqrt" startLine="376" endLine="389">
      <declaration type="int" name="pow10" />
      <declaration type="int" name="exp" />
      <scope startLine="382" endLine="385">
        <comment>Ensures that exp is even.</comment>
      </scope>
      <declaration type="LargeInteger" name="scaledValue" />
    </method>
    <javadoc>
      <text>* Indicates if this floating point number is equal to zero.</text>
      <return><code>this == 0</code></return>
    </javadoc>
    <method type="boolean" name="isZero" startLine="396" endLine="398" />
    <javadoc>
      <text>* Indicates if this floating point number is greater than zero.</text>
      <return><code>this > 0</code></return>
    </javadoc>
    <method type="boolean" name="isPositive" startLine="405" endLine="407" />
    <javadoc>
      <text>* Indicates if this rational number is less than zero.</text>
      <return><code>this < 0</code></return>
    </javadoc>
    <method type="boolean" name="isNegative" startLine="414" endLine="416" />
    <javadoc>
      <text>* Indicates if this floating point is Not-a-Number.</text>
      <return><code>true</code> if this number has unbounded value;
 * <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="isNaN" startLine="424" endLine="426" />
    <javadoc>
      <text>* Compares the absolute value of two FloatingPoint numbers.</text>
      <param>that the FloatingPoint number to be compared with.</param>
      <return><code>|this| > |that|</code></return>
    </javadoc>
    <method type="boolean" name="isLargerThan" startLine="434" endLine="436" />
    <javadoc>
      <text>* Returns the decimal text representation of this number.</text>
      <return>the text representation of this number.</return>
    </javadoc>
    <method type="Text" name="toText" startLine="443" endLine="464">
      <declaration type="TextBuilder" name="tb" />
      <declaration type="LargeInteger" name="m" />
      <scope startLine="450" endLine="453" />
      <declaration type="int" name="exp" />
      <scope startLine="457" endLine="460" />
      <declaration type="Text" name="txt" />
    </method>
    <javadoc>
      <text>* Compares this floating point number against the specified object.</text>
      <param>that the object to compare with.</param>
      <return><code>true</code> if the objects are the same;
 * <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="473" endLine="479">
      <scope startLine="474" endLine="476" />
      <scope startLine="476" endLine="478" />
    </method>
    <javadoc>
      <text>* Returns the hash code for this floating point number.</text>
      <return>the hash code value.</return>
    </javadoc>
    <method type="int" name="hashCode" startLine="486" endLine="509">
      <declaration type="long" name="p" />
      <declaration type="long" name="code" />
      <declaration type="int" name="exp" />
      <declaration type="long" name="mult" />
      <scope startLine="495" endLine="498">
        <comment>modInverse of 10 mod p</comment>
      </scope>
      <scope startLine="498" endLine="500" />
      <scope startLine="501" endLine="507">
        <scope startLine="502" endLine="504" />
      </scope>
      <comment>some random number</comment>
      <comment>This is a random prime - the same as in LargeInteger.hashCode()</comment>
      <comment>We return _significand.mod(p).times(10.pow(-exp) mod p)</comment>
    </method>
    <javadoc>
      <text>* Returns the value of this floating point number as a <code>long</code>.</text>
      <return>the numeric value represented by this floating point 
 * after conversion to type <code>long</code>.</return>
    </javadoc>
    <method type="long" name="longValue" startLine="517" endLine="520">
      <declaration type="Real" name="real" />
    </method>
    <javadoc>
      <text>* Returns the value of this floating point number as a <code>double</code>.</text>
      <return>the numeric value represented by this FloatingPoint after conversion
 * to type <code>double</code>.</return>
    </javadoc>
    <method type="double" name="doubleValue" startLine="528" endLine="531">
      <declaration type="Real" name="real" />
    </method>
    <javadoc>
      <text>* Compares two floating point number numerically.</text>
      <param>that the floating point number to compare with.</param>
      <return>-1, 0 or 1 as this FloatingPoint number is numerically less than, 
 * equal to, or greater than <code>that</code>.</return>
    </javadoc>
    <method type="int" name="compareTo" startLine="540" endLine="549">
      <declaration type="FloatingPoint" name="diff" />
      <scope startLine="542" endLine="544" />
      <scope startLine="544" endLine="546" />
      <scope startLine="546" endLine="548" />
    </method>
    <javadoc>
      <text>* Returns this floating point number after normalization based upon 
 * the number of digits.</text>
      <return><code>this</code></return>
    </javadoc>
    <method type="FloatingPoint" name="normalize" startLine="557" endLine="571">
      <declaration type="int" name="digits" />
      <declaration type="int" name="thisDigits" />
      <scope startLine="560" endLine="569">
        <declaration type="int" name="pow10" />
        <declaration type="long" name="exponent" />
        <comment>Scale down.</comment>
        <comment>Negative.</comment>
      </scope>
    </method>
    <method type="FloatingPoint" name="copy" startLine="574" endLine="581">
      <declaration type="FloatingPoint" name="r" />
      <comment>Maintains unicity.</comment>
    </method>
    <declaration type="long" name="serialVersionUID" />
  </class>
</source>
