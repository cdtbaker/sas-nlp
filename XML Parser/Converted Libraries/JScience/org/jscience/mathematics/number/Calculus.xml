<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.number">
  <import name="javolution.context.ObjectFactory" />
  <class name="Calculus" startLine="13">
    <javadoc>
      <text>* <p> This class holds utilities upon arrays of positive <code>long</code>.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.3, January 14, 2006</version>
    </javadoc>
    <javadoc>
      <text>* Default constructor (private for utilities).</text>
    </javadoc>
    <method type="constructor" name="Calculus" startLine="24" endLine="25" />
    <declaration type="long" name="MASK_63" />
    <declaration type="long" name="MASK_32" />
    <declaration type="long" name="MASK_31" />
    <declaration type="long" name="MASK_8" />
    <javadoc>
      <text>* x += y</text>
      <return>x size</return>
    </javadoc>
    <method type="int" name="add" startLine="39" endLine="54">
      <declaration type="long" name="sum" />
      <declaration type="int" name="i" />
      <scope startLine="44" endLine="52">
        <scope startLine="45" endLine="48" />
      </scope>
    </method>
    <javadoc>
      <text>* z = x + y
 * Preconditions: xSize >= ySize</text>
      <return>z size</return>
    </javadoc>
    <method type="int" name="add" startLine="61" endLine="84">
      <declaration type="long" name="sum" />
      <declaration type="int" name="i" />
      <scope startLine="64" endLine="68" />
      <scope startLine="69" endLine="83">
        <scope startLine="70" endLine="75">
          <scope startLine="71" endLine="73" />
        </scope>
        <scope startLine="76" endLine="79" />
      </scope>
    </method>
    <javadoc>
      <text>* z = x - y
 * Preconditions: x >= y</text>
      <return>z size</return>
    </javadoc>
    <method type="int" name="subtract" startLine="91" endLine="114">
      <declaration type="long" name="diff" />
      <declaration type="int" name="i" />
      <scope startLine="94" endLine="98">
        <comment>Equals to -1 if borrow.</comment>
      </scope>
      <scope startLine="99" endLine="103">
        <comment>Equals to -1 if borrow.</comment>
      </scope>
      <scope startLine="105" endLine="107" />
      <scope startLine="109" endLine="112" />
      <comment>Copies rest of x to z.</comment>
      <comment>Calculates size.</comment>
    </method>
    <javadoc>
      <text>* x.compare(y)
 * Preconditions: xSize = ySize = size</text>
      <return>1, -1, 0</return>
    </javadoc>
    <method type="int" name="compare" startLine="121" endLine="129">
      <scope startLine="122" endLine="127" />
    </method>
    <javadoc>
      <text>* x << n
 * Preconditions: xSize != 0</text>
      <return>z size</return>
    </javadoc>
    <method type="int" name="shiftLeft" startLine="137" endLine="155">
      <declaration type="int" name="shiftRight" />
      <declaration type="int" name="i" />
      <declaration type="int" name="j" />
      <declaration type="long" name="tmp" />
      <declaration type="long" name="high" />
      <scope startLine="143" endLine="145" />
      <scope startLine="146" endLine="149" />
      <scope startLine="151" endLine="153" />
    </method>
    <javadoc>
      <text>* x >> n
 * Preconditions: xSize > wordShift</text>
      <return>z size</return>
    </javadoc>
    <method type="int" name="shiftRight" startLine="163" endLine="175">
      <declaration type="int" name="shiftLeft" />
      <declaration type="int" name="i" />
      <declaration type="int" name="j" />
      <declaration type="long" name="tmp" />
      <scope startLine="168" endLine="171" />
    </method>
    <javadoc>
      <text>* z = x * y
 * Preconditions: y != 0, x != 0</text>
      <return>z size</return>
    </javadoc>
    <method type="int" name="multiply" startLine="182" endLine="184" />
    <javadoc>
      <text>* z = x * y
 * Preconditions: y != 0, xSize >= ySize</text>
      <return>z size</return>
    </javadoc>
    <method type="int" name="multiply" startLine="191" endLine="197">
      <declaration type="int" name="zSize" />
      <scope startLine="193" endLine="195" />
    </method>
    <method type="int" name="multiply" startLine="200" endLine="241">
      <declaration type="long" name="kl" />
      <declaration type="long" name="kh" />
      <declaration type="long" name="carry" />
      <scope startLine="206" endLine="235">
        <declaration type="long" name="zz" />
        <declaration type="long" name="w" />
        <declaration type="long" name="wl" />
        <declaration type="long" name="wh" />
        <declaration type="long" name="tmp" />
        <comment>Adds carry.</comment>
        <comment>63 bits.</comment>
        <comment>63 bits.</comment>
        <comment>Splits words in [31 bits][32 bits]</comment>
        <comment>32 bits</comment>
        <comment>31 bits</comment>
        <comment>Adds low.</comment>
        <comment>64 bits</comment>
        <comment>64 bits.</comment>
        <comment>Adds middle.</comment>
        <comment>64 bits.</comment>
        <comment>64 bits.</comment>
        <comment>Adds high to carry.</comment>
      </scope>
      <declaration type="int" name="size" />
      <comment>32 bits.</comment>
      <comment>31 bits</comment>
      <comment>63 bits</comment>
    </method>
    <javadoc>
      <text>* z = x / y
 * Preconditions: y is positive (31 bits).</text>
      <return>remainder</return>
    </javadoc>
    <method type="long" name="divide" startLine="248" endLine="264">
      <declaration type="long" name="r" />
      <scope startLine="250" endLine="262">
        <declaration type="long" name="w" />
        <declaration type="long" name="wh" />
        <declaration type="long" name="qh" />
        <declaration type="long" name="wl" />
        <declaration type="long" name="ql" />
      </scope>
    </method>
    <class name="MultiplyLogic" startLine="266">
      <implements name="Runnable" />
      <javadoc>
        <text>* Multiplication logic (for concurrent context)</text>
      </javadoc>
      <method type="MultiplyLogic" name="create" startLine="273" endLine="275" />
      <declaration type="ObjectFactory<MultiplyLogic>" name="FACTORY" />
      <declaration type="LargeInteger" name="_left" />
      <method type="MultiplyLogic" name="newInstance" startLine="280" endLine="285">
        <declaration type="MultiplyLogic" name="logic" />
      </method>
      <method type="void" name="run" startLine="286" endLine="288">
        <comment>Recursive.</comment>
      </method>
      <method type="LargeInteger" name="value" startLine="289" endLine="291" />
    </class>
    <comment>Multiplies by k, add to z if shift != 0</comment>
  </class>
</source>
