<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.number">
  <import name="org.jscience.mathematics.structure.Field" />
  <import name="javolution.context.ObjectFactory" />
  <import name="javolution.lang.MathLib" />
  <import name="javolution.text.Text" />
  <import name="javolution.text.TypeFormat" />
  <import name="javolution.xml.XMLFormat" />
  <import name="javolution.xml.stream.XMLStreamException" />
  <class name="Float64" extends="Number<Float64>" startLine="20">
    <implements name="Field<Float64>" />
    <javadoc>
      <text>* <p> This class represents a 64 bits floating point number.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.0, February 13, 2006</version>
    </javadoc>
    <javadoc>
      <text>* Holds the default XML representation for 64 bits floating point numbers.
 * This representation consists of a simple <code>value</code> attribute
 * holding the {@link #toText() textual} representation.</text>
    </javadoc>
    <method type="Float64" name="newInstance" startLine="37" endLine="39" />
    <method type="void" name="write" startLine="42" endLine="44" />
    <method type="void" name="read" startLine="46" endLine="48">
      <comment>Nothing to do, immutable.</comment>
    </method>
    <declaration type="XMLFormat<Float64>" name="XML" />
    <javadoc>
      <text>* Holds the factory used to produce 64 bits float instances.</text>
    </javadoc>
    <method type="Float64" name="create" startLine="56" endLine="58" />
    <declaration type="ObjectFactory<Float64>" name="FACTORY" />
    <javadoc>
      <text>* The 64 bits floating point representing zero.</text>
    </javadoc>
    <declaration type="Float64" name="ZERO" />
    <javadoc>
      <text>* The 64 bits floating point representing one.</text>
    </javadoc>
    <declaration type="Float64" name="ONE" />
    <javadoc>
      <text>* The associated double value.</text>
    </javadoc>
    <declaration type="double" name="_value" />
    <javadoc>
      <text>* Default constructor.</text>
    </javadoc>
    <method type="constructor" name="Float64" startLine="79" endLine="80" />
    <javadoc>
      <text>* Creates a 64 bits float having the specified <code>double</code> value.</text>
      <param>doubleValue the <code>double</code> value for this number.</param>
    </javadoc>
    <method type="constructor" name="Float64" startLine="87" endLine="89" />
    <javadoc>
      <text>* Returns the 64 bits float from the specified <code>double</code> value.</text>
      <param>doubleValue the <code>double</code> value for this number.</param>
      <return>the corresponding number.</return>
      <see>#doubleValue()</see>
    </javadoc>
    <method type="Float64" name="valueOf" startLine="98" endLine="102">
      <declaration type="Float64" name="r" />
    </method>
    <javadoc>
      <text>* Returns the number for the specified character sequence.</text>
      <param>chars the character sequence.</param>
      <return>the corresponding number.</return>
    </javadoc>
    <method type="Float64" name="valueOf" startLine="110" endLine="114">
      <declaration type="Float64" name="r" />
    </method>
    <javadoc>
      <text>* Indicates if this number is infinite.</text>
      <return><code>true</code> if this number is infinite;
 * <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="isInfinite" startLine="122" endLine="124" />
    <javadoc>
      <text>* Indicates if this number is not a number.</text>
      <return><code>true</code> if this number is NaN;
 * <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="isNaN" startLine="132" endLine="134" />
    <javadoc>
      <text>* Returns the closest integer value to this 64 bits floating point number.</text>
      <return>this number rounded to the nearest integer.</return>
    </javadoc>
    <method type="long" name="round" startLine="141" endLine="143" />
    <javadoc>
      <text>* Returns the opposite of this number.</text>
      <return><code>-this</code>.</return>
    </javadoc>
    <method type="Float64" name="opposite" startLine="150" endLine="154">
      <declaration type="Float64" name="r" />
    </method>
    <javadoc>
      <text>* Returns the sum of this number with the one specified.</text>
      <param>that the number to be added.</param>
      <return><code>this + that</code>.</return>
    </javadoc>
    <method type="Float64" name="plus" startLine="162" endLine="166">
      <declaration type="Float64" name="r" />
    </method>
    <javadoc>
      <text>* Returns the sum of this number with the specified value.</text>
      <param>value the value to be added.</param>
      <return><code>this + value</code>.</return>
    </javadoc>
    <method type="Float64" name="plus" startLine="174" endLine="178">
      <declaration type="Float64" name="r" />
    </method>
    <javadoc>
      <text>* Returns the difference between this number and the one specified.</text>
      <param>that the number to be subtracted.</param>
      <return><code>this - that</code>.</return>
    </javadoc>
    <method type="Float64" name="minus" startLine="186" endLine="190">
      <declaration type="Float64" name="r" />
    </method>
    <javadoc>
      <text>* Returns the difference between this number and the specified value.</text>
      <param>value the value to be subtracted.</param>
      <return><code>this - value</code>.</return>
    </javadoc>
    <method type="Float64" name="minus" startLine="198" endLine="202">
      <declaration type="Float64" name="r" />
    </method>
    <javadoc>
      <text>* Returns the product of this number with the one specified.</text>
      <param>that the number multiplier.</param>
      <return><code>this · that</code>.</return>
    </javadoc>
    <method type="Float64" name="times" startLine="210" endLine="214">
      <declaration type="Float64" name="r" />
    </method>
    <javadoc>
      <text>* Returns the product of this number with the specified value.</text>
      <param>value the value multiplier.</param>
      <return><code>this · value</code>.</return>
    </javadoc>
    <method type="Float64" name="times" startLine="222" endLine="226">
      <declaration type="Float64" name="r" />
    </method>
    <javadoc>
      <text>* Returns the reciprocal of this number.</text>
      <return><code>1 / this</code>.</return>
    </javadoc>
    <method type="Float64" name="inverse" startLine="233" endLine="237">
      <declaration type="Float64" name="r" />
    </method>
    <javadoc>
      <text>* Returns this number divided by the one specified.</text>
      <param>that the number divisor.</param>
      <return><code>this / that</code>.</return>
    </javadoc>
    <method type="Float64" name="divide" startLine="245" endLine="249">
      <declaration type="Float64" name="r" />
    </method>
    <javadoc>
      <text>* Returns this number divided by the specified value.</text>
      <param>value the value divisor.</param>
      <return><code>this / value</code>.</return>
    </javadoc>
    <method type="Float64" name="divide" startLine="257" endLine="261">
      <declaration type="Float64" name="r" />
    </method>
    <javadoc>
      <text>* Compares the absolute value of this number with that number.</text>
      <param>that the number to compare with.</param>
      <return><code>|this| > |that|</code></return>
    </javadoc>
    <method type="boolean" name="isLargerThan" startLine="269" endLine="271" />
    <javadoc>
      <text>* Returns the absolute value of this number.</text>
      <return><code>|this|</code>.</return>
    </javadoc>
    <method type="Float64" name="abs" startLine="278" endLine="282">
      <declaration type="Float64" name="r" />
    </method>
    <javadoc>
      <text>* Returns the positive square root of this number.</text>
      <return><code>sqrt(this)</code>.</return>
    </javadoc>
    <method type="Float64" name="sqrt" startLine="289" endLine="293">
      <declaration type="Float64" name="r" />
    </method>
    <javadoc>
      <text>* Returns the exponential number <i>e</i> raised to the power of this
 * number.</text>
      <return><code>exp(this)</code>.</return>
    </javadoc>
    <method type="Float64" name="exp" startLine="301" endLine="305">
      <declaration type="Float64" name="r" />
    </method>
    <javadoc>
      <text>* Returns the natural logarithm (base e) of this number.</text>
      <return><code>log(this)</code>.</return>
    </javadoc>
    <method type="Float64" name="log" startLine="312" endLine="316">
      <declaration type="Float64" name="r" />
    </method>
    <javadoc>
      <text>* Returns this number raised to the power of the specified exponent.</text>
      <param>that the exponent.</param>
      <return><code>this**that</code>.</return>
    </javadoc>
    <method type="Float64" name="pow" startLine="324" endLine="328">
      <declaration type="Float64" name="r" />
    </method>
    <javadoc>
      <text>* Returns this number raised to the specified power.</text>
      <param>e the exponent.</param>
      <return><code>this**e</code>.</return>
    </javadoc>
    <method type="Float64" name="pow" startLine="336" endLine="340">
      <declaration type="Float64" name="r" />
    </method>
    <javadoc>
      <text>* Returns the decimal text representation of this number.</text>
      <return>the text representation of this number.</return>
    </javadoc>
    <method type="Text" name="toText" startLine="347" endLine="349" />
    <javadoc>
      <text>* Compares this number against the specified object.</text>
      <param>that the object to compare with.</param>
      <return><code>true</code> if the objects are the same;
 * <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="358" endLine="361" />
    <javadoc>
      <text>* Indicates if this number is equal to the specified value.</text>
      <param>value the value to compare with.</param>
      <return><code>this.doubleValue() == value</code>.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="369" endLine="371" />
    <javadoc>
      <text>* Compares this number with the specified value for order.</text>
      <param>value the value to be compared with.</param>
      <return>a negative integer, zero, or a positive integer as this number
 * is less than, equal to, or greater than the specified value.</return>
    </javadoc>
    <method type="int" name="compareTo" startLine="380" endLine="390">
      <scope startLine="381" endLine="383" />
      <scope startLine="383" endLine="385" />
      <scope startLine="385" endLine="389">
        <declaration type="long" name="l1" />
        <declaration type="long" name="l2" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the hash code for this number.</text>
      <return>the hash code value.</return>
    </javadoc>
    <method type="int" name="hashCode" startLine="397" endLine="403">
      <declaration type="int" name="h" />
    </method>
    <method type="long" name="longValue" startLine="406" endLine="408" />
    <method type="double" name="doubleValue" startLine="411" endLine="413" />
    <method type="int" name="compareTo" startLine="416" endLine="418" />
    <method type="Float64" name="copy" startLine="421" endLine="423" />
    <declaration type="long" name="serialVersionUID" />
  </class>
</source>
