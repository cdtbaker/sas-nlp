<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.number">
  <import name="org.jscience.mathematics.structure.Field" />
  <import name="javolution.lang.MathLib" />
  <import name="javolution.context.HeapContext" />
  <import name="javolution.context.LocalContext" />
  <import name="javolution.context.ObjectFactory" />
  <import name="javolution.text.Text" />
  <import name="javolution.text.TypeFormat" />
  <import name="javolution.xml.XMLFormat" />
  <import name="javolution.xml.stream.XMLStreamException" />
  <class name="Real" extends="Number<Real>" startLine="22">
    <implements name="Field<Real>" />
    <javadoc>
      <text>* <p> This class represents a real number of arbitrary precision with 
 * known/guaranteed uncertainty. A real number consists of a {@link #getSignificand significand}, a maximum {@link #getError error} 
 * (on the significand value) and a decimal {@link #getExponent exponent}: 
 * (<code>(significand ± error) · 10<sup>exponent</sup></code>).</p>
 * <p> Reals number can be {@link #isExact exact} (e.g. integer values 
 * scaled by a power of ten). Exactness is maintained for{@link org.jscience.mathematics.structure.Ring Ring} operations
 * (e.g. addition, multiplication), but typically lost when a 
 * multiplicative {@link #inverse() inverse} is calculated. The minimum 
 * precision used for exact numbers is set by {@link #setExactPrecision(int)} ({@link javolution.context.LocalContext context local} setting, default
 * <code>19</code> digits).<p>
 * <p> The actual {@link #getPrecision precision} and {@link #getAccuracy 
 * accuracy} of any real number is available and <b>guaranteed</b> 
 * (the true/exact value is always within the precision/accuracy range).</p>
 * <p> Operations on instances of this class are quite fast   
 * as information substantially below the precision level (aka noise)
 * is not processed/stored. There is no limit on a real precision
 * but precision degenerates (due to numeric errors) and calculations 
 * accelerate as more and more operations are performed.</p>
 * <p> Instances of this class can be utilized to find approximate 
 * solutions to linear equations using the {@link org.jscience.mathematics.vector.Matrix Matrix} class for which
 * high-precision reals is often required, the primitive type
 * <code>double</code> being not accurate enough to resolve equations 
 * when the matrix's size exceeds 100x100. Furthermore, even for small 
 * matrices the "qualified" result is indicative of possible system 
 * singularities.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.3, January 8, 2006</version>
      <see><a href="http://en.wikipedia.org/wiki/Real_number">
 *      Wikipedia: Real number</a></see>
    </javadoc>
    <javadoc>
      <text>* Holds the default XML representation for real numbers.
 * This representation consists of a simple <code>value</code> attribute
 * holding the {@link #toText() textual} representation.</text>
    </javadoc>
    <method type="Real" name="newInstance" startLine="74" endLine="76" />
    <method type="void" name="write" startLine="79" endLine="81" />
    <method type="void" name="read" startLine="83" endLine="85">
      <comment>Nothing to do, immutable.</comment>
    </method>
    <declaration type="XMLFormat<Real>" name="XML" />
    <javadoc>
      <text>* Holds a Not-a-Number instance (infinite error).</text>
    </javadoc>
    <declaration type="Real" name="NaN" />
    <scope startLine="92" endLine="96" />
    <javadoc>
      <text>* Holds the exact ZERO instance.</text>
    </javadoc>
    <declaration type="Real" name="ZERO" />
    <javadoc>
      <text>* Holds the exact ONE instance.</text>
    </javadoc>
    <declaration type="Real" name="ONE" />
    <javadoc>
      <text>* Holds local precision for exact number.</text>
    </javadoc>
    <declaration type="LocalContext.Reference<Integer>" name="EXACT_PRECISION" />
    <javadoc>
      <text>* The significand value.</text>
    </javadoc>
    <declaration type="LargeInteger" name="_significand" />
    <javadoc>
      <text>* The significand error (0 for exact number).</text>
    </javadoc>
    <declaration type="LargeInteger" name="_error" />
    <javadoc>
      <text>* The decimal exponent.</text>
    </javadoc>
    <declaration type="int" name="_exponent" />
    <javadoc>
      <text>* Default constructor.</text>
    </javadoc>
    <method type="constructor" name="Real" startLine="132" endLine="133" />
    <javadoc>
      <text>* Returns the {@link javolution.context.LocalContext local} minimum 
 * precision (number of exact digits) when exact numbers have to be
 * approximated.</text>
      <return>the minimum number of digits assumed exact for {@link #isExact 
 * exact} real numbers.</return>
    </javadoc>
    <method type="int" name="getExactPrecision" startLine="143" endLine="145" />
    <javadoc>
      <text>* Sets the {@link javolution.context.LocalContext local} minimum precision
 * (number of exact digits) when exact numbers have to be approximated.</text>
      <param>precision the minimum number of digits assumed exact for {@link #isExact exact} numbers.</param>
    </javadoc>
    <method type="void" name="setExactPrecision" startLine="154" endLine="156" />
    <javadoc>
      <text>* Returns a real having the specified significand, error and exponent values.
 * If the error is <code>0</code>, the real is assumed exact. 
 * For example:[code]
 * // x = 0.0 ± 0.01 
 * Real x = Real.valueOf(LargeInteger.ZERO, 1, -2);
 * // y = -12.3 exact 
 * Real y = Real.valueOf(LargeInteger.valueOf(-123), 0, -1);
 * [/code]</text>
      <param>significand this real significand.</param>
      <param>error the maximum error on the significand.</param>
      <param>exponent the decimal exponent.</param>
      <return><code>(significand ± error)·10<sup>exponent</sup>)</code></return>
      <throws>IllegalArgumentException if <code>error < 0</code></throws>
    </javadoc>
    <method type="Real" name="valueOf" startLine="178" endLine="186">
      <declaration type="Real" name="real" />
    </method>
    <javadoc>
      <text>* Returns the real number (inexact except for <code>0.0</code>) 
 * corresponding to the specified <code>double</code> value. 
 * The error is derived from the inexact representation of 
 * <code>double</code> values intrinsic to the 64 bits IEEE 754 format.</text>
      <param>doubleValue the <code>double</code> value to convert.</param>
      <return>the corresponding real number.</return>
    </javadoc>
    <method type="Real" name="valueOf" startLine="197" endLine="207">
      <declaration type="int" name="e" />
      <declaration type="long" name="significand" />
      <declaration type="int" name="error" />
      <comment>Find the exponent e such as: value == x.xxx * 10^e</comment>
      <comment>18 digits significand.</comment>
    </method>
    <javadoc>
      <text>* Returns the exact real number corresponding to the specified 
 * <code>long</code> value (convenience method).</text>
      <param>longValue the exact long value.</param>
      <return><code>Real.valueOf(LargeInteger.valueOf(longValue), 0, 0)</code></return>
    </javadoc>
    <method type="Real" name="valueOf" startLine="216" endLine="218" />
    <javadoc>
      <text>* Returns the real for the specified character sequence.
 * If the precision is not specified (using the <code>±</code> symbol), 
 * the real is supposed exact. Example of valid character sequences:
 * <li>"1.2E3" (1200 exact)</li>
 * <li>"1.2E3±1E-2" (1200 ± 0.01)</li></ul></text>
      <param>chars the character sequence.</param>
      <return>the corresponding real number.</return>
      <throws>NumberFormatException if the character sequence does not contain
 * a parsable real.</throws>
    </javadoc>
    <method type="Real" name="valueOf" startLine="232" endLine="282">
      <scope startLine="233" endLine="235" />
      <declaration type="Text" name="txt" />
      <declaration type="int" name="exponentIndex" />
      <scope startLine="242" endLine="250">
        <declaration type="int" name="exponent" />
        <declaration type="Real" name="r" />
      </scope>
      <declaration type="Real" name="real" />
      <declaration type="int" name="errorIndex" />
      <scope startLine="253" endLine="262" />
      <declaration type="int" name="decimalPointIndex" />
      <scope startLine="264" endLine="276">
        <declaration type="LargeInteger" name="integer" />
        <declaration type="LargeInteger" name="fraction" />
        <declaration type="int" name="fractionDigits" />
      </scope>
      <scope startLine="276" endLine="281" />
      <comment>TODO Use TextFormat...</comment>
    </method>
    <javadoc>
      <text>* Returns this real <a href="http://en.wikipedia.org/wiki/Significand">
 * significand</a> value.</text>
      <return>the significand.</return>
    </javadoc>
    <method type="LargeInteger" name="getSignificand" startLine="290" endLine="292" />
    <javadoc>
      <text>* Returns the maximum error (positive) on this real significand.</text>
      <return>the maximum error on the significand.</return>
    </javadoc>
    <method type="int" name="getError" startLine="299" endLine="301" />
    <javadoc>
      <text>* Returns the exponent of the power of 10 multiplier.</text>
      <return>the decimal exponent.</return>
    </javadoc>
    <method type="int" name="getExponent" startLine="308" endLine="310" />
    <javadoc>
      <text>* Indicates if this real number is exact (<code>{@link #getError() error} 
 * == 0</code>).</text>
      <return><code>getError() == 0</code></return>
    </javadoc>
    <method type="boolean" name="isExact" startLine="318" endLine="320" />
    <javadoc>
      <text>* Returns the number of decimal digits guaranteed exact which appear to
 * the right of the decimal point (absolute error).</text>
      <return>a measure of the absolute error of this real number.</return>
    </javadoc>
    <method type="int" name="getAccuracy" startLine="328" endLine="334" />
    <javadoc>
      <text>* Returns the total number of decimal digits guaranteed exact
 * (relative error).</text>
      <return>a measure of the relative error of this real number.</return>
    </javadoc>
    <method type="int" name="getPrecision" startLine="342" endLine="348" />
    <javadoc>
      <text>* Indicates if this real is greater than zero.</text>
      <return><code>this > 0</code></return>
    </javadoc>
    <method type="boolean" name="isPositive" startLine="355" endLine="357" />
    <javadoc>
      <text>* Indicates if this real is less than zero.</text>
      <return><code>this < 0</code></return>
    </javadoc>
    <method type="boolean" name="isNegative" startLine="364" endLine="366" />
    <javadoc>
      <text>* Indicates if this real is Not-a-Number (unbounded value interval).</text>
      <return><code>true</code> if this number has unbounded value interval;
 * <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="isNaN" startLine="374" endLine="376" />
    <javadoc>
      <text>* Indicates if this real approximates the one specified. 
 * This method takes into account possible errors (e.g. numeric
 * errors) to make this determination.
 * <p>Note: This method returns <code>true</code> if <code>this</code> or 
 * <code>that</code> {@link #isNaN} (basically Not-A-Number 
 * approximates anything).</p></text>
      <param>that the real to compare with.</param>
      <return><code>this &asymp; that</code></return>
    </javadoc>
    <method type="boolean" name="approximates" startLine="390" endLine="395">
      <declaration type="Real" name="diff" />
    </method>
    <javadoc>
      <text>* Returns the closest integer value to this rational number.</text>
      <return>this real rounded to the nearest integer.</return>
      <throws>ArithmeticException if <code>this.isNaN()</code></throws>
    </javadoc>
    <method type="LargeInteger" name="round" startLine="403" endLine="409">
      <declaration type="LargeInteger" name="half" />
    </method>
    <javadoc>
      <text>* Returns the negation of this real number.</text>
      <return><code>-this</code>.</return>
    </javadoc>
    <method type="Real" name="opposite" startLine="416" endLine="424">
      <declaration type="Real" name="real" />
    </method>
    <javadoc>
      <text>* Returns the sum of this real number with the one specified.</text>
      <param>that the real to be added.</param>
      <return><code>this + that</code>.</return>
    </javadoc>
    <method type="Real" name="plus" startLine="432" endLine="443">
      <declaration type="int" name="scale" />
      <declaration type="Real" name="real" />
      <comment>Adds to the real with smallest exponent.</comment>
      <comment>>= 0</comment>
    </method>
    <javadoc>
      <text>* Returns the difference between this real number and the one
 * specified.</text>
      <param>that the real to be subtracted.</param>
      <return><code>this - that</code>.</return>
    </javadoc>
    <method type="Real" name="minus" startLine="452" endLine="454" />
    <javadoc>
      <text>* Returns the product of this real number with the specified 
 * <code>long</code> multiplier.</text>
      <param>multiplier the <code>long</code> multiplier.</param>
      <return><code>this · multiplier</code>.</return>
    </javadoc>
    <method type="Real" name="times" startLine="463" endLine="471">
      <declaration type="Real" name="real" />
    </method>
    <javadoc>
      <text>* Returns the product of this real number with the one specified.</text>
      <param>that the real multiplier.</param>
      <return><code>this · that</code>.</return>
    </javadoc>
    <method type="Real" name="times" startLine="479" endLine="512">
      <declaration type="long" name="exp" />
      <declaration type="LargeInteger" name="thisMin" />
      <declaration type="LargeInteger" name="thisMax" />
      <declaration type="LargeInteger" name="thatMin" />
      <declaration type="LargeInteger" name="thatMax" />
      <declaration type="LargeInteger" name="min" />
      <scope startLine="490" endLine="498">
        <scope startLine="491" endLine="494" />
        <scope startLine="494" endLine="497" />
      </scope>
      <scope startLine="498" endLine="506">
        <scope startLine="499" endLine="502" />
        <scope startLine="502" endLine="505" />
      </scope>
      <declaration type="Real" name="real" />
      <comment>Exponent overflow.</comment>
    </method>
    <javadoc>
      <text>* Returns this real number divided by the specified <code>int</code>
 * divisor.</text>
      <param>divisor the <code>int</code> divisor.</param>
      <return><code>this / divisor</code></return>
    </javadoc>
    <method type="Real" name="divide" startLine="521" endLine="523" />
    <javadoc>
      <text>* Returns this real number divided by the one specified.</text>
      <param>that the real divisor.</param>
      <return><code>this / that</code>.</return>
      <throws>ArithmeticException if <code>that.equals(ZERO)</code></throws>
    </javadoc>
    <method type="Real" name="divide" startLine="532" endLine="534" />
    <javadoc>
      <text>* Returns the reciprocal (or inverse) of this real number.</text>
      <return><code>1 / this</code>.</return>
    </javadoc>
    <method type="Real" name="inverse" startLine="541" endLine="561">
      <declaration type="LargeInteger" name="thisMin" />
      <declaration type="LargeInteger" name="thisMax" />
      <declaration type="int" name="digits" />
      <declaration type="long" name="exp" />
      <declaration type="LargeInteger" name="min" />
      <declaration type="LargeInteger" name="max" />
      <declaration type="Real" name="real" />
      <comment>Encompasses 0</comment>
      <comment>Exponent overflow.</comment>
    </method>
    <method type="LargeInteger" name="div" startLine="563" endLine="569">
      <declaration type="int" name="expBitLength" />
      <declaration type="int" name="precision" />
      <declaration type="LargeInteger" name="reciprocal" />
      <declaration type="LargeInteger" name="result" />
    </method>
    <declaration type="double" name="DIGITS_TO_BITS" />
    <method type="Real" name="toInexact" startLine="573" endLine="581">
      <declaration type="int" name="digits" />
      <declaration type="int" name="scale" />
      <declaration type="Real" name="z" />
    </method>
    <javadoc>
      <text>* Returns the absolute value of this real number.</text>
      <return><code>|this|</code>.</return>
    </javadoc>
    <method type="Real" name="abs" startLine="588" endLine="590" />
    <javadoc>
      <text>* Compares the absolute value of two real numbers.</text>
      <param>that the real number to be compared with.</param>
      <return><code>|this| > |that|</code></return>
    </javadoc>
    <method type="boolean" name="isLargerThan" startLine="598" endLine="600" />
    <javadoc>
      <text>* Returns the square root of this real number, the more accurate is this 
 * real number, the more accurate the square root.</text>
      <return>the positive square root of this real number.</return>
    </javadoc>
    <method type="Real" name="sqrt" startLine="608" endLine="631">
      <declaration type="LargeInteger" name="thisMin" />
      <declaration type="LargeInteger" name="thisMax" />
      <declaration type="int" name="exponent" />
      <scope startLine="619" endLine="622">
        <comment>Odd exponent.</comment>
      </scope>
      <declaration type="LargeInteger" name="minSqrt" />
      <declaration type="LargeInteger" name="maxSqrt" />
      <declaration type="LargeInteger" name="sqrt" />
      <declaration type="Real" name="z" />
    </method>
    <javadoc>
      <text>* Returns the decimal text representation of this number.</text>
      <return>the text representation of this number.</return>
    </javadoc>
    <method type="Text" name="toText" startLine="638" endLine="665">
      <scope startLine="641" endLine="644" />
      <declaration type="int" name="errorDigits" />
      <declaration type="LargeInteger" name="m" />
      <declaration type="int" name="exp" />
      <declaration type="Text" name="txt" />
      <declaration type="int" name="digits" />
      <scope startLine="653" endLine="661">
        <scope startLine="654" endLine="656" />
        <scope startLine="656" endLine="660" />
        <comment>Scientific notation.</comment>
      </scope>
      <scope startLine="661" endLine="663" />
    </method>
    <javadoc>
      <text>* Compares this real number against the specified object.
 * <p>Note: This method returns <code>true</code> if <code>this</code> or 
 * <code>that</code> {@link #isNaN is Not-A-Number}, even though
 * <code>Double.NaN == Double.NaN</code> has the value
 * <code>false</code>.</p></text>
      <param>that the object to compare with.</param>
      <return><code>true</code> if the objects are two reals with same 
 * significand, error and exponent;<code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="679" endLine="688">
      <declaration type="Real" name="thatReal" />
    </method>
    <javadoc>
      <text>* Returns the hash code for this real number.</text>
      <return>the hash code value.</return>
    </javadoc>
    <method type="int" name="hashCode" startLine="695" endLine="697" />
    <javadoc>
      <text>* Returns the value of this real number as a <code>long</code>.</text>
      <return>the numeric value represented by this real after conversion
 * to type <code>long</code>.</return>
    </javadoc>
    <method type="long" name="longValue" startLine="705" endLine="707" />
    <javadoc>
      <text>* Returns the value of this real number as a <code>double</code>.</text>
      <return>the numeric value represented by this real after conversion
 * to type <code>double</code>.</return>
    </javadoc>
    <method type="double" name="doubleValue" startLine="715" endLine="726">
      <declaration type="int" name="nbrDigits" />
      <declaration type="int" name="digitShift" />
      <declaration type="long" name="reducedSignificand" />
      <declaration type="int" name="exponent" />
      <comment>Shift the significand to a >18 digits integer (long compatible).</comment>
    </method>
    <javadoc>
      <text>* Compares two real numbers numerically.</text>
      <param>that the real to compare with.</param>
      <return>-1, 0 or 1 as this real is numerically less than, equal to,
 * or greater than <code>that</code>.</return>
      <throws>ClassCastException <code>that</code> is not a {@link Real}.</throws>
    </javadoc>
    <method type="int" name="compareTo" startLine="736" endLine="745">
      <declaration type="Real" name="diff" />
      <scope startLine="738" endLine="740" />
      <scope startLine="740" endLine="742" />
      <scope startLine="742" endLine="744" />
    </method>
    <javadoc>
      <text>* Normalizes this real (maintains error less than 31 bits).</text>
      <return>the normalized real.</return>
    </javadoc>
    <method type="Real" name="normalize" startLine="752" endLine="761">
      <declaration type="int" name="digitError" />
      <declaration type="int" name="scale" />
      <declaration type="Real" name="z" />
      <comment>Small error.</comment>
    </method>
    <method type="Real" name="copy" startLine="764" endLine="767">
      <comment>Maintains unicity.</comment>
    </method>
    <javadoc>
      <text>* Holds the factory constructing real instances.</text>
    </javadoc>
    <method type="Real" name="create" startLine="774" endLine="776" />
    <declaration type="ObjectFactory<Real>" name="FACTORY" />
    <declaration type="LargeInteger" name="FIVE" />
    <declaration type="LargeInteger" name="MINUS_FIVE" />
    <scope startLine="783" endLine="793">
      <scope startLine="785" endLine="790" />
      <scope startLine="790" endLine="792" />
      <comment>Immortal memory allocation.</comment>
    </scope>
    <declaration type="long" name="serialVersionUID" />
    <comment>Unique (0 ± 1E2147483647)</comment>
  </class>
</source>
