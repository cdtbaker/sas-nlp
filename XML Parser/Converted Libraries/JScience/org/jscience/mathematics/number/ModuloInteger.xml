<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.number">
  <import name="org.jscience.mathematics.structure.Field" />
  <import name="javolution.context.LocalContext" />
  <import name="javolution.context.ObjectFactory" />
  <import name="javolution.text.Text" />
  <import name="javolution.xml.XMLFormat" />
  <import name="javolution.xml.stream.XMLStreamException" />
  <class name="ModuloInteger" extends="Number<ModuloInteger>" startLine="19">
    <implements name="Field<ModuloInteger>" />
    <javadoc>
      <text>* <p> This class represents a modulo integer. It can be used in conjonction 
 * with the {@link org.jscience.mathematics.vector.Matrix Matrix}class to resolve modulo equations (ref. number theory).</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.0, February 13, 2006</version>
      <see><a href="http://en.wikipedia.org/wiki/Modular_arithmetic">
 *      Wikipedia: Modular Arithmetic</a></see>
    </javadoc>
    <javadoc>
      <text>* The modulo integer representing the additive identity.</text>
    </javadoc>
    <declaration type="ModuloInteger" name="ZERO" />
    <scope startLine="35" endLine="37" />
    <javadoc>
      <text>* The modulo integer representing the multiplicative identity.</text>
    </javadoc>
    <declaration type="ModuloInteger" name="ONE" />
    <scope startLine="43" endLine="45" />
    <javadoc>
      <text>* Holds the default XML representation for modulo integers.
 * This representation consists of a simple <code>value</code> attribute
 * holding the {@link #toText() textual} representation.</text>
    </javadoc>
    <method type="ModuloInteger" name="newInstance" startLine="55" endLine="57" />
    <method type="void" name="write" startLine="59" endLine="61" />
    <method type="void" name="read" startLine="63" endLine="65">
      <comment>Nothing to do, immutable.</comment>
    </method>
    <declaration type="XMLFormat<ModuloInteger>" name="XML" />
    <javadoc>
      <text>* Holds the local modulus (for modular arithmetic).</text>
    </javadoc>
    <declaration type="LocalContext.Reference<LargeInteger>" name="MODULUS" />
    <javadoc>
      <text>* Holds the large integer value.</text>
    </javadoc>
    <declaration type="LargeInteger" name="_value" />
    <javadoc>
      <text>* Returns the modulo integer having the specified value (independently of
 * the current modulo).</text>
      <param>value the modulo integer intrinsic value.</param>
      <return>the corresponding modulo number.</return>
    </javadoc>
    <method type="ModuloInteger" name="valueOf" startLine="86" endLine="88" />
    <javadoc>
      <text>* Returns the modulo integer for the specified character sequence in
 * decimal number.</text>
      <param>chars the character sequence.</param>
      <return>the corresponding modulo number.</return>
    </javadoc>
    <method type="ModuloInteger" name="valueOf" startLine="96" endLine="98" />
    <javadoc>
      <text>* Returns the {@link javolution.context.LocalContext local} modulus 
 * for modular arithmetic or <code>null</code> if the arithmetic operations
 * are non-modular (default).</text>
      <return>the local modulus or <code>null</code> if none.</return>
      <see>#setModulus</see>
    </javadoc>
    <method type="LargeInteger" name="getModulus" startLine="108" endLine="110" />
    <javadoc>
      <text>* Sets the {@link javolution.context.LocalContext local} modulus 
 * for modular arithmetic.</text>
      <param>modulus the new modulus or <code>null</code> to unset the modulus.</param>
      <throws>IllegalArgumentException if <code>modulus &lt;= 0</code></throws>
    </javadoc>
    <method type="void" name="setModulus" startLine="119" endLine="124" />
    <javadoc>
      <text>* Returns the current modulo value of this number. If the modulus 
 * is {@link #setModulus set} to <code>null</code> the intrinsic value
 * (the creation value) is returned.</text>
      <return>the positive number equals to this number modulo modulus or
 * this modulo creation value.</return>
    </javadoc>
    <method type="LargeInteger" name="moduloValue" startLine="134" endLine="137">
      <declaration type="LargeInteger" name="modulus" />
    </method>
    <javadoc>
      <text>* Returns the text representation of the current modulo value of 
 * this number.</text>
      <return>the representation of its modulo value.</return>
    </javadoc>
    <method type="Text" name="toText" startLine="145" endLine="147" />
    <javadoc>
      <text>* Compares this modulo integer against the specified object
 * independently of the current modulus.</text>
      <param>that the object to compare with.</param>
      <return><code>true</code> if that is a modulo number with the same 
 * intrinsic value; <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="157" endLine="161" />
    <javadoc>
      <text>* Returns the hash code for this large integer number.</text>
      <return>the hash code value.</return>
    </javadoc>
    <method type="int" name="hashCode" startLine="168" endLine="170" />
    <method type="boolean" name="isLargerThan" startLine="173" endLine="175" />
    <method type="long" name="longValue" startLine="178" endLine="180" />
    <method type="double" name="doubleValue" startLine="183" endLine="185" />
    <method type="int" name="compareTo" startLine="188" endLine="190" />
    <method type="ModuloInteger" name="times" startLine="192" endLine="197">
      <declaration type="LargeInteger" name="value" />
      <declaration type="LargeInteger" name="modulus" />
    </method>
    <method type="ModuloInteger" name="plus" startLine="199" endLine="204">
      <declaration type="LargeInteger" name="value" />
      <declaration type="LargeInteger" name="modulus" />
    </method>
    <method type="ModuloInteger" name="opposite" startLine="206" endLine="211">
      <declaration type="LargeInteger" name="value" />
      <declaration type="LargeInteger" name="modulus" />
    </method>
    <method type="ModuloInteger" name="inverse" startLine="213" endLine="218">
      <declaration type="LargeInteger" name="modulus" />
    </method>
    <method type="ModuloInteger" name="newInstance" startLine="224" endLine="228">
      <declaration type="ModuloInteger" name="m" />
    </method>
    <method type="ModuloInteger" name="create" startLine="231" endLine="233" />
    <declaration type="ObjectFactory<ModuloInteger>" name="FACTORY" />
    <method type="constructor" name="ModuloInteger" startLine="236" endLine="237" />
    <method type="ModuloInteger" name="copy" startLine="240" endLine="242" />
    <declaration type="long" name="serialVersionUID" />
    <comment>/</comment>
    <comment>Factory creation.</comment>
    <comment>/</comment>
  </class>
</source>
