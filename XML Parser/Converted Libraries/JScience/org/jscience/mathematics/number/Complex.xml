<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.number">
  <import name="java.io.IOException" />
  <import name="org.jscience.mathematics.structure.Field" />
  <import name="javolution.lang.MathLib" />
  <import name="javolution.text.Text" />
  <import name="javolution.text.TextFormat" />
  <import name="javolution.text.TypeFormat" />
  <import name="javolution.context.ObjectFactory" />
  <import name="javolution.xml.XMLFormat" />
  <import name="javolution.xml.stream.XMLStreamException" />
  <class name="Complex" extends="Number<Complex>" startLine="25">
    <implements name="Field<Complex>" />
    <javadoc>
      <text>* <p> This class represents an immutable complex number.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.0, February 13, 2006</version>
      <see><a href="http://en.wikipedia.org/wiki/Complex_number">
 *      Wikipedia: Complex number</a></see>
    </javadoc>
    <javadoc>
      <text>* Holds the local text format for complex numbers (cartesian form 
 * by default, e.g.<code> "2.34 - 0.4i"</code>).</text>
    </javadoc>
    <method type="Appendable" name="format" startLine="41" endLine="51">
      <scope startLine="43" endLine="46" />
      <scope startLine="46" endLine="49" />
    </method>
    <method type="Complex" name="parse" startLine="53" endLine="70">
      <declaration type="double" name="real" />
      <declaration type="char" name="op" />
      <declaration type="double" name="imaginary" />
      <declaration type="char" name="i" />
      <comment>Reads real part.</comment>
      <comment>Reads separator.</comment>
      <comment>Reads imaginary part.</comment>
    </method>
    <declaration type="TextFormat<Complex>" name="CARTESIAN_FORMAT" />
    <scope startLine="72" endLine="74">
      <comment>Sets default format to cartesian, users can always change it to polar.</comment>
    </scope>
    <javadoc>
      <text>* The complex number zero.</text>
    </javadoc>
    <declaration type="Complex" name="ZERO" />
    <javadoc>
      <text>* The complex number one.</text>
    </javadoc>
    <declaration type="Complex" name="ONE" />
    <javadoc>
      <text>* The imaginary unit <i><b>i</b></i>.</text>
    </javadoc>
    <declaration type="Complex" name="I" />
    <javadoc>
      <text>* Holds the default XML representation for complex numbers.
 * This representation consists of <code>real</code> and  
 * <code>imaginary</code> attributes (e.g. 
 * <code>&lt;Complex real="2.34" imaginary="-0.4"/&gt;</code>).</text>
    </javadoc>
    <method type="Complex" name="newInstance" startLine="101" endLine="104" />
    <method type="void" name="write" startLine="107" endLine="110" />
    <method type="void" name="read" startLine="112" endLine="114">
      <comment>Nothing to do, immutable.</comment>
    </method>
    <declaration type="XMLFormat<Complex>" name="XML" />
    <javadoc>
      <text>* Holds the factory constructing complex instances.</text>
    </javadoc>
    <method type="Complex" name="create" startLine="121" endLine="123" />
    <declaration type="ObjectFactory<Complex>" name="FACTORY" />
    <javadoc>
      <text>* Holds the real component.</text>
    </javadoc>
    <declaration type="double" name="_real" />
    <javadoc>
      <text>* Holds the imaginary component.</text>
    </javadoc>
    <declaration type="double" name="_imaginary" />
    <javadoc>
      <text>* Default constructor.</text>
    </javadoc>
    <method type="constructor" name="Complex" startLine="139" endLine="140" />
    <javadoc>
      <text>* Creates a complex number having the specified real and imaginary
 * components.</text>
      <param>real the real component of this complex number.</param>
      <param>imaginary the imaginary component of this complex number.</param>
    </javadoc>
    <method type="constructor" name="Complex" startLine="149" endLine="152" />
    <javadoc>
      <text>* Returns the complex number having the specified real and imaginary
 * components.</text>
      <param>real the real component of this complex number.</param>
      <param>imaginary the imaginary component of this complex number.</param>
      <return>the corresponding complex number.</return>
      <see>#getReal</see>
      <see>#getImaginary</see>
    </javadoc>
    <method type="Complex" name="valueOf" startLine="164" endLine="169">
      <declaration type="Complex" name="c" />
    </method>
    <javadoc>
      <text>* Returns the complex number for the specified character sequence.</text>
      <param>csq the character sequence.</param>
      <return><code>TextFormat.getInstance(Complex.class).parse(csq)</code></return>
      <throws>IllegalArgumentException if the character sequence does not 
 * contain a parsable complex number.</throws>
      <see>TextFormat#getInstance(Class)</see>
    </javadoc>
    <method type="Complex" name="valueOf" startLine="180" endLine="182" />
    <javadoc>
      <text>* Indicates if either the real or imaginary component of this complex
 * is infinite.</text>
      <return><code>true</code> if this complex is infinite;
 * <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="isInfinite" startLine="191" endLine="193" />
    <javadoc>
      <text>* Indicates if either the real or imaginary component of this complex
 * is not a number.</text>
      <return><code>true</code> if this complex is NaN;
 * <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="isNaN" startLine="202" endLine="204" />
    <javadoc>
      <text>* Returns the real component of this complex number.</text>
      <return>the real component.</return>
    </javadoc>
    <method type="double" name="getReal" startLine="211" endLine="213" />
    <javadoc>
      <text>* Returns the imaginary component of this complex number.</text>
      <return>the imaginary component.</return>
    </javadoc>
    <method type="double" name="getImaginary" startLine="220" endLine="222" />
    <javadoc>
      <text>* Returns the negation of this complex.</text>
      <return><code>-this</code>.</return>
    </javadoc>
    <method type="Complex" name="opposite" startLine="229" endLine="234">
      <declaration type="Complex" name="c" />
    </method>
    <javadoc>
      <text>* Returns the sum of this complex with the one specified.</text>
      <param>that the complex to be added.</param>
      <return><code>this + that</code>.</return>
    </javadoc>
    <method type="Complex" name="plus" startLine="242" endLine="247">
      <declaration type="Complex" name="c" />
    </method>
    <javadoc>
      <text>* Returns the difference between this complex and the one specified.</text>
      <param>that the complex to be subtracted.</param>
      <return><code>this - that</code>.</return>
    </javadoc>
    <method type="Complex" name="minus" startLine="255" endLine="260">
      <declaration type="Complex" name="c" />
    </method>
    <javadoc>
      <text>* Returns this complex multiplied by the specified factor.</text>
      <param>k the factor multiplier.</param>
      <return><code>this * k</code>.</return>
    </javadoc>
    <method type="Complex" name="times" startLine="268" endLine="273">
      <declaration type="Complex" name="c" />
    </method>
    <javadoc>
      <text>* Returns the product of this complex with the one specified.</text>
      <param>that the complex multiplier.</param>
      <return><code>this * that</code>.</return>
    </javadoc>
    <method type="Complex" name="times" startLine="281" endLine="287">
      <declaration type="Complex" name="c" />
    </method>
    <javadoc>
      <text>* Returns the inverse of this complex.</text>
      <return><code>1 / this</code>.</return>
    </javadoc>
    <method type="Complex" name="inverse" startLine="294" endLine="301">
      <declaration type="Complex" name="c" />
      <declaration type="double" name="tmp" />
    </method>
    <javadoc>
      <text>* Returns this complex divided by the specified factor.</text>
      <param>k the factor divisor.</param>
      <return><code>this / k</code>.</return>
    </javadoc>
    <method type="Complex" name="divide" startLine="309" endLine="314">
      <declaration type="Complex" name="c" />
    </method>
    <javadoc>
      <text>* Returns this complex divided by the specified complex.</text>
      <param>that the complex divisor.</param>
      <return><code>this / that</code>.</return>
    </javadoc>
    <method type="Complex" name="divide" startLine="322" endLine="332">
      <declaration type="double" name="tmp" />
      <declaration type="double" name="thatInvReal" />
      <declaration type="double" name="thatInvImaginary" />
      <declaration type="Complex" name="c" />
    </method>
    <javadoc>
      <text>* Returns the conjugate of this complex number.</text>
      <return><code>(this.real(), - this.imaginary())</code>.</return>
    </javadoc>
    <method type="Complex" name="conjugate" startLine="339" endLine="344">
      <declaration type="Complex" name="c" />
    </method>
    <javadoc>
      <text>* Returns the magnitude of this complex number, also referred to
 * as the "modulus" or "length".</text>
      <return>the magnitude of this complex number.</return>
    </javadoc>
    <method type="double" name="magnitude" startLine="352" endLine="354" />
    <javadoc>
      <text>* Returns the argument of this complex number. It is the angle
 * in radians, measured counter-clockwise from the real axis.</text>
      <return>argument of this complex number.</return>
    </javadoc>
    <method type="double" name="argument" startLine="362" endLine="364" />
    <javadoc>
      <text>* Returns one of the two square root of this complex number.</text>
      <return><code>sqrt(this)</code>.</return>
    </javadoc>
    <method type="Complex" name="sqrt" startLine="371" endLine="378">
      <declaration type="Complex" name="c" />
      <declaration type="double" name="m" />
      <declaration type="double" name="a" />
    </method>
    <javadoc>
      <text>* Returns the exponential number <i>e</i> raised to the power of
 * this complex.
 * Note: <code><i><b>e</b></i><sup><font size=+0><b>PI</b>*<i><b>i
 * </b></i></font></sup> = -1</code></text>
      <return><code>exp(this)</code>.</return>
    </javadoc>
    <method type="Complex" name="exp" startLine="388" endLine="394">
      <declaration type="Complex" name="c" />
      <declaration type="double" name="m" />
    </method>
    <javadoc>
      <text>* Returns the principal natural logarithm (base e) of this complex.
 * Note: There are an infinity of solutions.</text>
      <return><code>log(this)</code>.</return>
    </javadoc>
    <method type="Complex" name="log" startLine="402" endLine="407">
      <declaration type="Complex" name="c" />
    </method>
    <javadoc>
      <text>* Returns this complex raised to the specified power.</text>
      <param>e the exponent.</param>
      <return><code>this**e</code>.</return>
    </javadoc>
    <method type="Complex" name="pow" startLine="415" endLine="422">
      <declaration type="Complex" name="c" />
      <declaration type="double" name="m" />
      <declaration type="double" name="a" />
    </method>
    <javadoc>
      <text>* Returns this complex raised to the power of the specified complex
 * exponent.</text>
      <param>that the exponent.</param>
      <return><code>this**that</code>.</return>
    </javadoc>
    <method type="Complex" name="pow" startLine="431" endLine="441">
      <declaration type="Complex" name="c" />
      <declaration type="double" name="r1" />
      <declaration type="double" name="i1" />
      <declaration type="double" name="r2" />
      <declaration type="double" name="i2" />
      <declaration type="double" name="m" />
    </method>
    <javadoc>
      <text>* Indicates if two complexes are "sufficiently" alike to be considered
 * equal.</text>
      <param>that the complex to compare with.</param>
      <param>tolerance the maximum magnitude of the difference between
 * them before they are considered <i>not</i> equal.</param>
      <return><code>true</code> if they are considered equal;
 * <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="453" endLine="455" />
    <javadoc>
      <text>* Compares this complex against the specified Object.</text>
      <param>that the object to compare with.</param>
      <return><code>true</code> if the objects are the same;
 * <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="464" endLine="468" />
    <javadoc>
      <text>* Returns the hash code for this complex number.</text>
      <return>the hash code value.</return>
    </javadoc>
    <method type="int" name="hashCode" startLine="475" endLine="482">
      <declaration type="int" name="h" />
    </method>
    <javadoc>
      <text>* Returns the text representation of this complex number.</text>
      <return><code>TextFormat.getInstance(Complex.class).format(this)</code></return>
      <see>TextFormat#getInstance(Class)</see>
    </javadoc>
    <method type="Text" name="toText" startLine="490" endLine="492" />
    <javadoc>
      <text>* Returns the {@link #getReal real} component of this {@link Complex}number as a <code>long</code>.</text>
      <return><code>(long) this.getReal()</code></return>
    </javadoc>
    <method type="long" name="longValue" startLine="500" endLine="502" />
    <javadoc>
      <text>* Returns the {@link #getReal real} component of this {@link Complex}number as a <code>double</code>.</text>
      <return><code>(double) this.getReal()</code></return>
    </javadoc>
    <method type="double" name="doubleValue" startLine="510" endLine="512" />
    <javadoc>
      <text>* Compares two complex numbers, the real components are compared first,
 * then if equal, the imaginary components.</text>
      <param>that the complex number to be compared with.</param>
      <return>-1, 0, 1 based upon the ordering.</return>
    </javadoc>
    <method type="int" name="compareTo" startLine="521" endLine="543">
      <declaration type="long" name="l1" />
      <declaration type="long" name="l2" />
    </method>
    <javadoc>
      <text>* Compares the {@link #magnitude() magnitude} of this complex number
 * with the magnitude of the complex number specified.</text>
      <param>that the complex number to be compared with.</param>
      <return><code>|this| > |that|</code></return>
    </javadoc>
    <method type="boolean" name="isLargerThan" startLine="552" endLine="554" />
    <method type="Complex" name="copy" startLine="557" endLine="559" />
    <declaration type="long" name="serialVersionUID" />
  </class>
</source>
