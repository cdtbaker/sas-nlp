<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.vector">
  <import name="java.util.Comparator" />
  <import name="javolution.lang.Realtime" />
  <import name="javolution.lang.ValueType" />
  <import name="javolution.text.Text" />
  <import name="javolution.text.TextBuilder" />
  <import name="javolution.util.FastTable" />
  <import name="org.jscience.mathematics.structure.Field" />
  <import name="org.jscience.mathematics.structure.VectorSpace" />
  <class name="Vector" startLine="21">
    <implements name="VectorSpace<Vector<F>,F>" />
    <implements name="ValueType" />
    <implements name="Realtime" />
    <javadoc>
      <text>* <p> This class represents an immutable element of a vector space.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.3, January 2, 2007</version>
      <see><a href="http://en.wikipedia.org/wiki/Vector_space">
 *      Wikipedia: Vector Space</a></see>
    </javadoc>
    <javadoc>
      <text>* Default constructor (for sub-classes).</text>
    </javadoc>
    <method type="constructor" name="Vector" startLine="35" endLine="36" />
    <method name="getDimension" type="int" startLine="38" endLine="43" />
    <javadoc>
      <text>* Returns the number of elements  held by this vector.</text>
      <return>this vector dimension.</return>
    </javadoc>
    <method name="get" type="F" startLine="45" endLine="52" />
    <javadoc>
      <text>* Returns a single element from this vector.</text>
      <param>i the element index (range [0..n[).</param>
      <return>the element at <code>i</code>.</return>
      <throws>IndexOutOfBoundsException <code>(i < 0) || (i >= size())</code></throws>
    </javadoc>
    <method name="opposite" type="Vector<F>" startLine="54" endLine="59" />
    <javadoc>
      <text>* Returns the negation of this vector.</text>
      <return><code>-this</code>.</return>
    </javadoc>
    <method name="plus" type="Vector<F>" startLine="61" endLine="68" />
    <javadoc>
      <text>* Returns the sum of this vector with the one specified.</text>
      <param>that the vector to be added.</param>
      <return><code>this + that</code>.</return>
      <throws>DimensionException is vectors dimensions are different.</throws>
    </javadoc>
    <javadoc>
      <text>* Returns the difference between this vector and the one specified.</text>
      <param>that the vector to be subtracted.</param>
      <return><code>this - that</code>.</return>
    </javadoc>
    <method type="Vector<F>" name="minus" startLine="76" endLine="78" />
    <method name="times" type="Vector<F>" startLine="80" endLine="86" />
    <javadoc>
      <text>* Returns the product of this vector with the specified coefficient.</text>
      <param>k the coefficient multiplier.</param>
      <return><code>this · k</code></return>
    </javadoc>
    <method name="times" type="F" startLine="88" endLine="97" />
    <javadoc>
      <text>* Returns the dot product of this vector with the one specified.</text>
      <param>that the vector multiplier.</param>
      <return><code>this · that</code></return>
      <throws>DimensionException if <code>this.dimension() != that.dimension()</code></throws>
      <see><a href="http://en.wikipedia.org/wiki/Dot_product">
     *      Wikipedia: Dot Product</a></see>
    </javadoc>
    <javadoc>
      <text>* Returns the cross product of two 3-dimensional vectors.</text>
      <param>that the vector multiplier.</param>
      <return><code>this x that</code></return>
      <throws>DimensionException if 
 * <code>(this.getDimension() != 3) && (that.getDimension() != 3)</code></throws>
    </javadoc>
    <method type="Vector<F>" name="cross" startLine="107" endLine="122">
      <declaration type="FastTable<F>" name="elements" />
      <declaration type="DenseVector<F>" name="V" />
    </method>
    <javadoc>
      <text>* Returns the text representation of this vector.</text>
      <return>the text representation of this vector.</return>
    </javadoc>
    <method type="Text" name="toText" startLine="129" endLine="143">
      <declaration type="int" name="dimension" />
      <declaration type="TextBuilder" name="tmp" />
      <scope startLine="133" endLine="138">
        <scope startLine="135" endLine="137" />
      </scope>
      <declaration type="Text" name="txt" />
    </method>
    <javadoc>
      <text>* Returns the text representation of this vector as a 
 * <code>java.lang.String</code>.</text>
      <return><code>toText().toString()</code></return>
    </javadoc>
    <method type="String" name="toString" startLine="151" endLine="153" />
    <javadoc>
      <text>* Indicates if this vector can be considered equals to the one 
 * specified using the specified comparator when testing for 
 * element equality. The specified comparator may allow for some 
 * tolerance in the difference between the vector elements.</text>
      <param>that the vector to compare for equality.</param>
      <param>cmp the comparator to use when testing for element equality.</param>
      <return><code>true</code> if this vector and the specified matrix are
 * both vector with equal elements according to the specified
 * comparator; <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="167" endLine="178">
      <declaration type="int" name="dimension" />
      <scope startLine="173" endLine="176" />
    </method>
    <javadoc>
      <text>* Indicates if this vector is equal to the object specified.</text>
      <param>that the object to compare for equality.</param>
      <return><code>true</code> if this vector and the specified object are
 * both vectors with equal elements; <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="187" endLine="201">
      <declaration type="int" name="dimension" />
      <declaration type="Vector" name="v" />
      <scope startLine="196" endLine="199" />
    </method>
    <javadoc>
      <text>* Returns a hash code value for this vector.
 * Equals objects have equal hash codes.</text>
      <return>this vector hash code value.</return>
      <see>#equals</see>
    </javadoc>
    <method type="int" name="hashCode" startLine="210" endLine="217">
      <declaration type="int" name="dimension" />
      <declaration type="int" name="code" />
      <scope startLine="213" endLine="215" />
    </method>
    <method name="copy" type="Vector<F>" startLine="219" endLine="226" />
    <javadoc>
      <text>* Returns a copy of this vector {@link javolution.context.AllocatorContext allocated} 
 * by the calling thread (possibly on the stack).</text>
      <return>an identical and independant copy of this matrix.</return>
    </javadoc>
  </class>
</source>
