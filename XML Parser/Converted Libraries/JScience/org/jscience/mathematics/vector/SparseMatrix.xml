<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.vector">
  <import name="java.util.Iterator" />
  <import name="java.util.List" />
  <import name="javolution.context.ObjectFactory" />
  <import name="javolution.lang.MathLib" />
  <import name="javolution.util.FastComparator" />
  <import name="javolution.util.FastMap" />
  <import name="javolution.util.FastTable" />
  <import name="javolution.util.Index" />
  <import name="org.jscience.mathematics.structure.Field" />
  <class name="SparseMatrix" extends="Matrix<F>" startLine="23">
    <javadoc>
      <text>* <p> This class represents a matrix made of {@link SparseVector sparse
 * vectors} (as rows). To create a sparse matrix made of column vectors the {@link #transpose} method can be used. 
 * For example:[code]
 * SparseVector<Rational> column0 = SparseVector.valueOf(...);
 * SparseVector<Rational> column1 = SparseVector.valueOf(...);
 * SparseMatrix<Rational> M = SparseMatrix.valueOf(column0, column1).transpose();
 * [/code]</p>
 * <p> As for any concrete {@link org.jscience.mathematics.structure.Structurestructure}, this class is declared <code>final</code> (otherwise most
 * operations would have to be overridden to return the appropriate type).
 * Specialized dense matrix should sub-class {@link Matrix} directly.
 * For example:[code]
 * // Extension through composition.
 * final class BandMatrix <F extends Field<F>> extends Matrix<F> {
 * private SparseMatrix<F> _value;
 * ...
 * public BandMatrix opposite() { // Returns the right type.
 * return BandMatrix.valueOf(_value.opposite());
 * }
 * ...
 * }[/code]
 * </p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.3, January 2, 2007</version>
    </javadoc>
    <javadoc>
      <text>* Holds the number of columns n or the number of rows m if transposed.</text>
    </javadoc>
    <declaration type="int" name="_n" />
    <javadoc>
      <text>* Holds the zero.</text>
    </javadoc>
    <declaration type="F" name="_zero" />
    <javadoc>
      <text>* Indicates if this matrix is transposed (the rows are then the columns).</text>
    </javadoc>
    <declaration type="boolean" name="_transposed" />
    <javadoc>
      <text>* Holds this matrix rows (or columns when transposed).</text>
    </javadoc>
    <declaration type="FastTable<SparseVector<F>>" name="_rows" />
    <javadoc>
      <text>* Returns the sparse square matrix having the specified diagonal
 * vector. This method is typically used to create an identity matrix.
 * For example:[code]
 * SparseMatrix<Real> IDENTITY = Matrix.valueOf(
 * DenseVector.valueOf({Real.ONE, Real.ONE, Real.ONE}), Real.ZERO);
 * [/code]</text>
      <param>diagonal the diagonal vector.</param>
      <param>zero value of non-diagonal elements.</param>
      <return>a square matrix with <code>diagonal</code> on the diagonal and
 * <code>zero</code> elsewhere.</return>
    </javadoc>
    <method type="SparseMatrix<F>" name="valueOf" startLine="86" endLine="95">
      <declaration type="int" name="n" />
      <declaration type="SparseMatrix<F>" name="M" />
      <scope startLine="89" endLine="93">
        <declaration type="SparseVector<F>" name="row" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns a sparse matrix holding the specified row vectors 
 * (column vectors if {@link #transpose transposed}).</text>
      <param>rows the row vectors.</param>
      <return>the matrix having the specified rows.</return>
      <throws>DimensionException if the rows do not have the same dimension.</throws>
    </javadoc>
    <method type="SparseMatrix<F>" name="valueOf" startLine="106" endLine="121">
      <declaration type="int" name="n" />
      <declaration type="F" name="zero" />
      <declaration type="SparseMatrix<F>" name="M" />
      <scope startLine="110" endLine="119">
        <declaration type="SparseVector<F>" name="rowi" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns a sparse matrix holding the row vectors from the specified 
 * collection (column vectors if {@link #transpose transposed}).</text>
      <param>rows the list of row vectors.</param>
      <return>the matrix having the specified rows.</return>
      <throws>DimensionException if the rows do not have the same dimension.</throws>
    </javadoc>
    <method type="SparseMatrix<F>" name="valueOf" startLine="132" endLine="148">
      <declaration type="int" name="n" />
      <declaration type="F" name="zero" />
      <declaration type="SparseMatrix<F>" name="M" />
      <declaration type="Iterator<SparseVector<F>>" name="iterator" />
      <scope startLine="137" endLine="146">
        <declaration type="SparseVector<F>" name="rowi" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns a sparse matrix equivalent to the specified matrix but with 
 * the zero elements removed using the default object equality comparator.</text>
      <param>that the matrix to convert.</param>
      <param>zero the zero element for the sparse vector to return.</param>
      <return><code>SparseMatrix.valueOf(that, zero, FastComparator.DEFAULT)</code> or a dense matrix holding the same elements</return>
    </javadoc>
    <method type="SparseMatrix<F>" name="valueOf" startLine="158" endLine="160" />
    <javadoc>
      <text>* Returns a sparse matrix equivalent to the specified matrix but with 
 * the zero elements removed using the specified object equality comparator.</text>
      <param>that the matrix to convert.</param>
      <param>zero the zero element for the sparse vector to return.</param>
      <param>comparator the comparator used to determinate zero equality.</param>
      <return><code>that</code> or a dense matrix holding the same elements
 * as the specified matrix.</return>
    </javadoc>
    <method type="SparseMatrix<F>" name="valueOf" startLine="173" endLine="185">
      <declaration type="int" name="n" />
      <declaration type="int" name="m" />
      <declaration type="SparseMatrix<F>" name="M" />
      <scope startLine="179" endLine="183">
        <declaration type="SparseVector<F>" name="rowi" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the value of the non-set elements for this sparse matrix.</text>
      <return>the element corresponding to zero.</return>
    </javadoc>
    <method type="F" name="getZero" startLine="192" endLine="194" />
    <method type="int" name="getNumberOfRows" startLine="197" endLine="199" />
    <method type="int" name="getNumberOfColumns" startLine="202" endLine="204" />
    <method type="F" name="get" startLine="207" endLine="209" />
    <method type="SparseVector<F>" name="getRow" startLine="212" endLine="229">
      <declaration type="int" name="n" />
      <declaration type="int" name="m" />
      <declaration type="SparseVector<F>" name="V" />
      <scope startLine="221" endLine="227">
        <declaration type="SparseVector<F>" name="row" />
        <declaration type="F" name="e" />
        <scope startLine="224" endLine="226" />
      </scope>
      <comment>Else transposed.</comment>
    </method>
    <method type="SparseVector<F>" name="getColumn" startLine="232" endLine="247">
      <declaration type="int" name="m" />
      <declaration type="SparseVector<F>" name="V" />
      <scope startLine="239" endLine="245">
        <declaration type="SparseVector<F>" name="row" />
        <declaration type="F" name="e" />
        <scope startLine="242" endLine="244" />
      </scope>
    </method>
    <method type="SparseVector<F>" name="getDiagonal" startLine="250" endLine="263">
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="int" name="dimension" />
      <declaration type="SparseVector<F>" name="V" />
      <scope startLine="255" endLine="261">
        <declaration type="SparseVector<F>" name="row" />
        <declaration type="F" name="e" />
        <scope startLine="258" endLine="260" />
      </scope>
    </method>
    <method type="SparseMatrix<F>" name="opposite" startLine="266" endLine="272">
      <declaration type="SparseMatrix<F>" name="M" />
      <scope startLine="268" endLine="270" />
    </method>
    <method type="SparseMatrix<F>" name="plus" startLine="275" endLine="284">
      <declaration type="SparseMatrix<F>" name="M" />
      <scope startLine="279" endLine="282" />
    </method>
    <method type="SparseMatrix<F>" name="minus" startLine="287" endLine="289">
      <comment>Returns more specialized type.</comment>
    </method>
    <method type="SparseMatrix<F>" name="times" startLine="292" endLine="298">
      <declaration type="SparseMatrix<F>" name="M" />
      <scope startLine="294" endLine="296" />
    </method>
    <method type="SparseVector<F>" name="times" startLine="301" endLine="313">
      <declaration type="int" name="m" />
      <declaration type="SparseVector<F>" name="V" />
      <scope startLine="306" endLine="311">
        <declaration type="F" name="e" />
        <scope startLine="308" endLine="310" />
      </scope>
    </method>
    <method type="SparseMatrix<F>" name="times" startLine="316" endLine="337">
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="int" name="p" />
      <declaration type="FastTable<SparseVector<F>>" name="rows" />
      <declaration type="SparseMatrix<F>" name="M" />
      <scope startLine="325" endLine="335">
        <declaration type="Vector<F>" name="thatColj" />
        <declaration type="SparseVector<F>" name="column" />
        <scope startLine="329" endLine="334">
          <declaration type="F" name="e" />
          <scope startLine="331" endLine="333" />
        </scope>
        <comment>M is transposed.</comment>
      </scope>
      <comment>Creates a mxp matrix in transposed form (p columns vectors of size m)</comment>
    </method>
    <method type="FastTable<SparseVector<F>>" name="getRows" startLine="338" endLine="346">
      <declaration type="FastTable<SparseVector<F>>" name="rows" />
      <scope startLine="342" endLine="344" />
    </method>
    <method type="SparseMatrix<F>" name="inverse" startLine="349" endLine="364">
      <declaration type="F" name="detInv" />
      <declaration type="SparseMatrix<F>" name="A" />
      <scope startLine="355" endLine="362">
        <declaration type="SparseVector<F>" name="row" />
        <scope startLine="358" endLine="361">
          <declaration type="F" name="element" />
        </scope>
      </scope>
      <comment>Multiply adjoint elements with 1 / determinant.</comment>
    </method>
    <method type="F" name="determinant" startLine="367" endLine="386">
      <declaration type="SparseVector<F>" name="row0" />
      <declaration type="F" name="det" />
      <scope startLine="377" endLine="384">
        <declaration type="int" name="i" />
        <declaration type="F" name="d" />
        <scope startLine="380" endLine="382" />
      </scope>
      <comment>Expansion by minors (also known as Laplacian)</comment>
      <comment>This algorithm is division free but too slow for dense matrix.</comment>
    </method>
    <method type="Matrix<F>" name="solve" startLine="389" endLine="391" />
    <method type="SparseMatrix<F>" name="transpose" startLine="394" endLine="398">
      <declaration type="SparseMatrix<F>" name="M" />
    </method>
    <method type="F" name="cofactor" startLine="401" endLine="426">
      <scope startLine="402" endLine="406">
        <declaration type="int" name="k" />
        <comment>Swaps i,j</comment>
      </scope>
      <declaration type="int" name="m" />
      <declaration type="SparseMatrix<F>" name="M" />
      <scope startLine="409" endLine="424">
        <declaration type="SparseVector<F>" name="row" />
        <declaration type="SparseVector<F>" name="V" />
        <scope startLine="416" endLine="423">
          <declaration type="int" name="index" />
          <scope startLine="418" endLine="420" />
          <scope startLine="420" endLine="422" />
        </scope>
        <comment>Position shifted (index minus one).</comment>
        <comment>Else don't copy element at j.</comment>
      </scope>
    </method>
    <method type="SparseMatrix<F>" name="adjoint" startLine="429" endLine="446">
      <declaration type="SparseMatrix<F>" name="M" />
      <declaration type="int" name="m" />
      <scope startLine="432" endLine="444">
        <declaration type="SparseVector<F>" name="row" />
        <scope startLine="435" endLine="443">
          <declaration type="F" name="cofactor" />
          <scope startLine="437" endLine="442" />
        </scope>
      </scope>
    </method>
    <method type="SparseMatrix<F>" name="tensor" startLine="449" endLine="476">
      <declaration type="int" name="thism" />
      <declaration type="int" name="thisn" />
      <declaration type="int" name="thatm" />
      <declaration type="int" name="thatn" />
      <declaration type="int" name="n" />
      <declaration type="int" name="m" />
      <declaration type="SparseMatrix<F>" name="M" />
      <scope startLine="457" endLine="474">
        <declaration type="int" name="i_rem_thatm" />
        <declaration type="int" name="i_div_thatm" />
        <declaration type="SparseVector<F>" name="row" />
        <declaration type="SparseVector<F>" name="thisRow" />
        <scope startLine="464" endLine="473">
          <declaration type="F" name="a" />
          <declaration type="int" name="j" />
          <scope startLine="467" endLine="472">
            <declaration type="F" name="b" />
            <scope startLine="469" endLine="471" />
          </scope>
        </scope>
        <comment>Row index.</comment>
      </scope>
      <comment>Number of columns,</comment>
      <comment>Number of rows.</comment>
    </method>
    <method type="SparseVector<F>" name="vectorization" startLine="479" endLine="493">
      <declaration type="SparseVector<F>" name="V" />
      <declaration type="int" name="offset" />
      <scope startLine="483" endLine="491">
        <declaration type="SparseVector<F>" name="column" />
        <scope startLine="486" endLine="489" />
      </scope>
    </method>
    <method type="SparseMatrix<F>" name="copy" startLine="497" endLine="503">
      <declaration type="SparseMatrix<F>" name="M" />
      <scope startLine="499" endLine="501" />
    </method>
    <method type="SparseMatrix<F>" name="newInstance" startLine="511" endLine="517">
      <declaration type="SparseMatrix<F>" name="M" />
    </method>
    <method type="SparseMatrix" name="create" startLine="521" endLine="523" />
    <method type="void" name="cleanup" startLine="526" endLine="528" />
    <declaration type="ObjectFactory<SparseMatrix>" name="FACTORY" />
    <method type="constructor" name="SparseMatrix" startLine="531" endLine="532" />
    <declaration type="long" name="serialVersionUID" />
    <comment>/</comment>
    <comment>Factory creation.</comment>
    <comment>/</comment>
  </class>
</source>
