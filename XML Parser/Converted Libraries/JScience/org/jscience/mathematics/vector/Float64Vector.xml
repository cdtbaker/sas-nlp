<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.vector">
  <import name="java.util.Iterator" />
  <import name="java.util.List" />
  <import name="javolution.context.ArrayFactory" />
  <import name="javolution.lang.MathLib" />
  <import name="javolution.xml.XMLFormat" />
  <import name="javolution.xml.stream.XMLStreamException" />
  <import name="org.jscience.mathematics.number.Float64" />
  <import name="org.jscience.mathematics.structure.VectorSpaceNormed" />
  <class name="Float64Vector" extends="Vector<Float64>" startLine="21">
    <implements name="VectorSpaceNormed<Vector<Float64>,Float64>" />
    <javadoc>
      <text>* <p> This class represents an optimized {@link Vector vector} implementation
 * for 64 bits floating point elements.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.3, January 2, 2007</version>
    </javadoc>
    <javadoc>
      <text>* Holds the default XML representation. For example:
 * [code]
 * <Float64Vector dimension="2">
 * <Float64 value="1.0" />
 * <Float64 value="0.0" />
 * </Float64Vector>[/code]</text>
    </javadoc>
    <method type="Float64Vector" name="newInstance" startLine="44" endLine="49">
      <declaration type="int" name="dimension" />
      <declaration type="Float64Vector" name="V" />
    </method>
    <method type="void" name="read" startLine="54" endLine="60">
      <scope startLine="55" endLine="57" />
    </method>
    <method type="void" name="write" startLine="64" endLine="69">
      <scope startLine="66" endLine="68" />
    </method>
    <declaration type="XMLFormat<Float64Vector>" name="XML" />
    <javadoc>
      <text>* Holds factory for vectors with variable size arrays.</text>
    </javadoc>
    <method type="Float64Vector" name="create" startLine="79" endLine="81" />
    <declaration type="ArrayFactory<Float64Vector>" name="FACTORY" />
    <javadoc>
      <text>* Holds the dimension.</text>
    </javadoc>
    <declaration type="int" name="_dimension" />
    <javadoc>
      <text>* Holds the values.</text>
    </javadoc>
    <declaration type="double[]" name="_values" />
    <javadoc>
      <text>* Creates a vector of specified capacity.</text>
    </javadoc>
    <method type="constructor" name="Float64Vector" startLine="98" endLine="100" />
    <javadoc>
      <text>* Returns a new vector holding the specified <code>double</code> values.</text>
      <param>values the vector values.</param>
      <return>the vector having the specified values.</return>
    </javadoc>
    <method type="Float64Vector" name="valueOf" startLine="108" endLine="114">
      <declaration type="int" name="n" />
      <declaration type="Float64Vector" name="V" />
    </method>
    <javadoc>
      <text>* Returns a new vector holding the elements from the specified 
 * collection.</text>
      <param>elements the collection of floating-points numbers.</param>
      <return>the vector having the specified elements.</return>
    </javadoc>
    <method type="Float64Vector" name="valueOf" startLine="123" endLine="132">
      <declaration type="int" name="n" />
      <declaration type="Float64Vector" name="V" />
      <declaration type="Iterator<Float64>" name="iterator" />
      <scope startLine="128" endLine="130" />
    </method>
    <javadoc>
      <text>* Returns a {@link Float64Vector} instance equivalent to the 
 * specified vector.</text>
      <param>that the vector to convert.</param>
      <return><code>that</code> or new equivalent Float64Vector.</return>
    </javadoc>
    <method type="Float64Vector" name="valueOf" startLine="141" endLine="151">
      <declaration type="int" name="n" />
      <declaration type="Float64Vector" name="V" />
      <scope startLine="147" endLine="149" />
    </method>
    <javadoc>
      <text>* Returns the value of a floating point number from this vector (fast).</text>
      <param>i the floating point number index.</param>
      <return>the value of the floating point number at <code>i</code>.</return>
      <throws>IndexOutOfBoundsException <code>(i < 0) || (i >= dimension())</code></throws>
    </javadoc>
    <method type="double" name="getValue" startLine="160" endLine="164" />
    <javadoc>
      <text>* Returns the Euclidian norm of this vector (square root of the 
 * dot product of this vector and itself).</text>
      <return><code>sqrt(this Â· this)</code>.</return>
    </javadoc>
    <method type="Float64" name="norm" startLine="172" endLine="174" />
    <javadoc>
      <text>* Returns the {@link #norm()} value of this vector.</text>
      <return><code>this.norm().doubleValue()</code>.</return>
    </javadoc>
    <method type="double" name="normValue" startLine="181" endLine="188">
      <declaration type="double" name="normSquared" />
      <scope startLine="183" endLine="186">
        <declaration type="double" name="values" />
      </scope>
    </method>
    <method type="int" name="getDimension" startLine="191" endLine="193" />
    <method type="Float64" name="get" startLine="196" endLine="200" />
    <method type="Float64Vector" name="opposite" startLine="203" endLine="210">
      <declaration type="Float64Vector" name="V" />
      <scope startLine="206" endLine="208" />
    </method>
    <method type="Float64Vector" name="plus" startLine="213" endLine="222">
      <declaration type="Float64Vector" name="T" />
      <declaration type="Float64Vector" name="V" />
      <scope startLine="218" endLine="220" />
    </method>
    <method type="Float64Vector" name="minus" startLine="225" endLine="234">
      <declaration type="Float64Vector" name="T" />
      <declaration type="Float64Vector" name="V" />
      <scope startLine="230" endLine="232" />
    </method>
    <method type="Float64Vector" name="times" startLine="237" endLine="245">
      <declaration type="Float64Vector" name="V" />
      <declaration type="double" name="d" />
      <scope startLine="241" endLine="243" />
    </method>
    <javadoc>
      <text>* Equivalent to <code>this.times(Float64.valueOf(k))</code></text>
      <param>k the coefficient.</param>
      <return><code>this * k</code></return>
    </javadoc>
    <method type="Float64Vector" name="times" startLine="253" endLine="260">
      <declaration type="Float64Vector" name="V" />
      <scope startLine="256" endLine="258" />
    </method>
    <method type="Float64" name="times" startLine="263" endLine="273">
      <declaration type="Float64Vector" name="T" />
      <declaration type="double[]" name="T_values" />
      <declaration type="double" name="sum" />
      <scope startLine="269" endLine="271" />
    </method>
    <method type="Float64Vector" name="cross" startLine="277" endLine="287">
      <declaration type="Float64Vector" name="T" />
      <declaration type="double" name="x" />
      <declaration type="double" name="y" />
      <declaration type="double" name="z" />
    </method>
    <method type="Float64Vector" name="copy" startLine="290" endLine="297">
      <declaration type="Float64Vector" name="V" />
      <scope startLine="293" endLine="295" />
    </method>
    <method type="Float64Vector" name="newInstance" startLine="303" endLine="307">
      <declaration type="Float64Vector" name="V" />
    </method>
    <method type="void" name="set" startLine="309" endLine="311" />
    <declaration type="long" name="serialVersionUID" />
    <comment>/</comment>
    <comment>Package Private Utilities</comment>
    <comment>/</comment>
  </class>
</source>
