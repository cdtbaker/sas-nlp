<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.vector">
  <import name="java.util.Iterator" />
  <import name="java.util.List" />
  <import name="javolution.context.ConcurrentContext" />
  <import name="javolution.context.ObjectFactory" />
  <import name="javolution.lang.MathLib" />
  <import name="javolution.util.FastTable" />
  <import name="org.jscience.mathematics.number.Float64" />
  <class name="Float64Matrix" extends="Matrix<Float64>" startLine="21">
    <javadoc>
      <text>* <p> This class represents an optimized {@link Matrix matrix} implementation
 * for {@link Float64 64 bits floating-point} numbers.</p>
 * <p> Instances of this class can be created from {@link Float64Vector}, 
 * either as rows or columns if the matrix is transposed. For example:[code]
 * Float64Vector<Rational> column0 = Float64Vector.valueOf(...);
 * Float64Vector<Rational> column1 = Float64Vector.valueOf(...);
 * Float64Matrix<Rational> M = Float64Matrix.valueOf(column0, column1).transpose();
 * [/code]</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.3, January 2, 2007</version>
    </javadoc>
    <javadoc>
      <text>* Holds the number of columns n.</text>
    </javadoc>
    <declaration type="int" name="_n" />
    <javadoc>
      <text>* Indicates if this matrix is transposed (the rows are then the columns).</text>
    </javadoc>
    <declaration type="boolean" name="_transposed" />
    <javadoc>
      <text>* Holds this matrix rows (or columns when transposed).</text>
    </javadoc>
    <declaration type="FastTable<Float64Vector>" name="_rows" />
    <javadoc>
      <text>* Returns a dense matrix from a 2-dimensional array of <code>double</code>
 * values. The first dimension being the row and the second being the 
 * column.</text>
      <param>values the array of <code>double</code> values.</param>
      <return>the matrix having the specified elements.</return>
      <throws>DimensionException if rows have different length.</throws>
      <see>Float64Vector</see>
    </javadoc>
    <method type="Float64Matrix" name="valueOf" startLine="62" endLine="73">
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="Float64Matrix" name="M" />
      <scope startLine="66" endLine="71">
        <declaration type="Float64Vector" name="row" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns a complex matrix holding the specified row vectors 
 * (column vectors if {@link #transpose transposed}).</text>
      <param>rows the row vectors.</param>
      <return>the matrix having the specified rows.</return>
      <throws>DimensionException if the rows do not have the same dimension.</throws>
    </javadoc>
    <method type="Float64Matrix" name="valueOf" startLine="83" endLine="94">
      <declaration type="int" name="n" />
      <declaration type="Float64Matrix" name="M" />
      <scope startLine="86" endLine="92">
        <declaration type="Float64Vector" name="rowi" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns a complex matrix holding the row vectors from the specified 
 * collection (column vectors if {@link #transpose transposed}).</text>
      <param>rows the list of row vectors.</param>
      <return>the matrix having the specified rows.</return>
      <throws>DimensionException if the rows do not have the same dimension.</throws>
    </javadoc>
    <method type="Float64Matrix" name="valueOf" startLine="104" endLine="116">
      <declaration type="int" name="n" />
      <declaration type="Float64Matrix" name="M" />
      <declaration type="Iterator<Float64Vector>" name="iterator" />
      <scope startLine="108" endLine="114">
        <declaration type="Float64Vector" name="rowi" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns a complex matrix equivalent to the specified matrix.</text>
      <param>that the matrix to convert.</param>
      <return><code>that</code> or a complex matrix holding the same elements
 * as the specified matrix.</return>
    </javadoc>
    <method type="Float64Matrix" name="valueOf" startLine="125" endLine="136">
      <declaration type="int" name="n" />
      <declaration type="int" name="m" />
      <declaration type="Float64Matrix" name="M" />
      <scope startLine="131" endLine="134">
        <declaration type="Float64Vector" name="rowi" />
      </scope>
    </method>
    <method type="int" name="getNumberOfRows" startLine="139" endLine="141" />
    <method type="int" name="getNumberOfColumns" startLine="144" endLine="146" />
    <method type="Float64" name="get" startLine="149" endLine="151" />
    <method type="Float64Vector" name="getRow" startLine="154" endLine="167">
      <declaration type="int" name="n" />
      <declaration type="int" name="m" />
      <declaration type="Float64Vector" name="V" />
      <scope startLine="163" endLine="165" />
      <comment>Else transposed.</comment>
    </method>
    <method type="Float64Vector" name="getColumn" startLine="170" endLine="181">
      <declaration type="int" name="m" />
      <declaration type="Float64Vector" name="V" />
      <scope startLine="177" endLine="179" />
    </method>
    <method type="Float64Vector" name="getDiagonal" startLine="184" endLine="193">
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="int" name="dimension" />
      <declaration type="Float64Vector" name="V" />
      <scope startLine="189" endLine="191" />
    </method>
    <method type="Float64Matrix" name="opposite" startLine="196" endLine="202">
      <declaration type="Float64Matrix" name="M" />
      <scope startLine="198" endLine="200" />
    </method>
    <method type="Float64Matrix" name="plus" startLine="205" endLine="214">
      <declaration type="Float64Matrix" name="M" />
      <scope startLine="209" endLine="212" />
    </method>
    <method type="Float64Matrix" name="minus" startLine="217" endLine="219">
      <comment>Returns more specialized type.</comment>
    </method>
    <method type="Float64Matrix" name="times" startLine="222" endLine="228">
      <declaration type="Float64Matrix" name="M" />
      <scope startLine="224" endLine="226" />
    </method>
    <method type="Float64Vector" name="times" startLine="231" endLine="240">
      <declaration type="int" name="m" />
      <declaration type="Float64Vector" name="V" />
      <scope startLine="236" endLine="238" />
    </method>
    <method type="Float64Matrix" name="times" startLine="243" endLine="256">
      <declaration type="int" name="n" />
      <declaration type="int" name="m" />
      <declaration type="int" name="p" />
      <declaration type="Float64Matrix" name="M" />
      <declaration type="Multiply" name="multiply" />
      <comment>Creates a mxp matrix in transposed form (p columns vectors of size m)</comment>
      <comment>Transposed.</comment>
    </method>
    <class name="Multiply" startLine="259">
      <implements name="Runnable" />
      <method type="Multiply" name="create" startLine="263" endLine="265" />
      <declaration type="ObjectFactory<Multiply>" name="FACTORY" />
      <declaration type="Float64Matrix" name="_left" />
      <declaration type="Matrix<Float64>" name="_right" />
      <declaration type="int" name="_rightColumnStart" />
      <declaration type="int" name="_rightColumnEnd" />
      <declaration type="FastTable<Float64Vector>" name="_columnsResult" />
      <method type="Multiply" name="valueOf" startLine="280" endLine="288">
        <declaration type="Multiply" name="multiply" />
      </method>
      <method type="void" name="recycle" startLine="290" endLine="295" />
      <method type="void" name="run" startLine="297" endLine="326">
        <scope startLine="298" endLine="310">
          <declaration type="FastTable<Float64Vector>" name="rows" />
          <declaration type="int" name="m" />
          <scope startLine="301" endLine="309">
            <declaration type="Vector<Float64>" name="thatColj" />
            <declaration type="Float64Vector" name="column" />
            <scope startLine="305" endLine="308" />
          </scope>
          <comment>Direct calculation.</comment>
          <comment>Concurrent/Recursive calculation.</comment>
        </scope>
        <scope startLine="310" endLine="325">
          <declaration type="int" name="halfIndex" />
          <declaration type="Multiply" name="firstHalf" />
          <declaration type="Multiply" name="secondHalf" />
          <scope startLine="317" endLine="320" />
          <scope startLine="320" endLine="322" />
        </scope>
      </method>
      <method type="FastTable<Float64Vector>" name="getRows" startLine="329" endLine="337">
        <declaration type="FastTable<Float64Vector>" name="rows" />
        <scope startLine="333" endLine="335" />
      </method>
      <method type="Float64Matrix" name="inverse" startLine="340" endLine="344" />
      <method type="Float64" name="determinant" startLine="347" endLine="349" />
      <method type="Float64Matrix" name="transpose" startLine="352" endLine="356">
        <declaration type="Float64Matrix" name="M" />
      </method>
      <method type="Float64" name="cofactor" startLine="359" endLine="380">
        <scope startLine="360" endLine="364">
          <declaration type="int" name="k" />
          <comment>Swaps i,j</comment>
        </scope>
        <declaration type="int" name="m" />
        <declaration type="Float64Matrix" name="M" />
        <scope startLine="367" endLine="378">
          <declaration type="Float64Vector" name="row" />
          <declaration type="Float64Vector" name="V" />
          <scope startLine="373" endLine="377" />
        </scope>
      </method>
      <method type="Float64Matrix" name="adjoint" startLine="383" endLine="397">
        <declaration type="Float64Matrix" name="M" />
        <declaration type="int" name="m" />
        <scope startLine="386" endLine="395">
          <declaration type="Float64Vector" name="row" />
          <scope startLine="389" endLine="394">
            <declaration type="Float64" name="cofactor" />
          </scope>
        </scope>
      </method>
      <method type="Float64Matrix" name="tensor" startLine="400" endLine="402" />
      <method type="Float64Vector" name="vectorization" startLine="405" endLine="407" />
      <method type="Float64Matrix" name="copy" startLine="410" endLine="416">
        <declaration type="Float64Matrix" name="M" />
        <scope startLine="412" endLine="414" />
      </method>
      <method type="Float64Matrix" name="newInstance" startLine="422" endLine="427">
        <declaration type="Float64Matrix" name="M" />
      </method>
      <method type="Float64Matrix" name="create" startLine="431" endLine="433" />
      <method type="void" name="cleanup" startLine="436" endLine="438" />
      <declaration type="ObjectFactory<Float64Matrix>" name="FACTORY" />
      <method type="constructor" name="Float64Matrix" startLine="441" endLine="442" />
      <declaration type="long" name="serialVersionUID" />
    </class>
    <comment>Logic to multiply two matrices.</comment>
    <comment>/</comment>
    <comment>Factory creation.</comment>
    <comment>/</comment>
  </class>
</source>
