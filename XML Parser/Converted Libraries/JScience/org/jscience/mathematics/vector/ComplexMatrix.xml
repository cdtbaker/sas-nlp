<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.vector">
  <import name="java.util.Iterator" />
  <import name="java.util.List" />
  <import name="javolution.context.ConcurrentContext" />
  <import name="javolution.context.ObjectFactory" />
  <import name="javolution.lang.MathLib" />
  <import name="javolution.util.FastTable" />
  <import name="org.jscience.mathematics.number.Complex" />
  <class name="ComplexMatrix" extends="Matrix<Complex>" startLine="21">
    <javadoc>
      <text>* <p> This class represents an optimized {@link Matrix matrix} implementation
 * for {@link Complex complex} numbers.</p>
 * <p> Instances of this class can be created from {@link ComplexVector}, 
 * either as rows or columns if the matrix is transposed. For example:[code]
 * ComplexVector<Rational> column0 = ComplexVector.valueOf(...);
 * ComplexVector<Rational> column1 = ComplexVector.valueOf(...);
 * ComplexMatrix<Rational> M = ComplexMatrix.valueOf(column0, column1).transpose();
 * [/code]</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.3, January 2, 2007</version>
    </javadoc>
    <javadoc>
      <text>* Holds the number of columns n.</text>
    </javadoc>
    <declaration type="int" name="_n" />
    <javadoc>
      <text>* Indicates if this matrix is transposed (the rows are then the columns).</text>
    </javadoc>
    <declaration type="boolean" name="_transposed" />
    <javadoc>
      <text>* Holds this matrix rows (or columns when transposed).</text>
    </javadoc>
    <declaration type="FastTable<ComplexVector>" name="_rows" />
    <javadoc>
      <text>* Returns a complex matrix from the specified 2-dimensional array.
 * The first dimension being the row and the second being the column.</text>
      <param>elements this matrix elements.</param>
      <return>the matrix having the specified elements.</return>
      <throws>DimensionException if rows have different length.</throws>
      <see>ComplexVector</see>
    </javadoc>
    <method type="ComplexMatrix" name="valueOf" startLine="61" endLine="72">
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="ComplexMatrix" name="M" />
      <scope startLine="65" endLine="70">
        <declaration type="ComplexVector" name="row" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns a complex matrix holding the specified row vectors 
 * (column vectors if {@link #transpose transposed}).</text>
      <param>rows the row vectors.</param>
      <return>the matrix having the specified rows.</return>
      <throws>DimensionException if the rows do not have the same dimension.</throws>
    </javadoc>
    <method type="ComplexMatrix" name="valueOf" startLine="82" endLine="93">
      <declaration type="int" name="n" />
      <declaration type="ComplexMatrix" name="M" />
      <scope startLine="85" endLine="91">
        <declaration type="ComplexVector" name="rowi" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns a complex matrix holding the row vectors from the specified 
 * collection (column vectors if {@link #transpose transposed}).</text>
      <param>rows the list of row vectors.</param>
      <return>the matrix having the specified rows.</return>
      <throws>DimensionException if the rows do not have the same dimension.</throws>
    </javadoc>
    <method type="ComplexMatrix" name="valueOf" startLine="103" endLine="115">
      <declaration type="int" name="n" />
      <declaration type="ComplexMatrix" name="M" />
      <declaration type="Iterator<ComplexVector>" name="iterator" />
      <scope startLine="107" endLine="113">
        <declaration type="ComplexVector" name="rowi" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns a complex matrix equivalent to the specified matrix.</text>
      <param>that the matrix to convert.</param>
      <return><code>that</code> or a complex matrix holding the same elements
 * as the specified matrix.</return>
    </javadoc>
    <method type="ComplexMatrix" name="valueOf" startLine="124" endLine="135">
      <declaration type="int" name="n" />
      <declaration type="int" name="m" />
      <declaration type="ComplexMatrix" name="M" />
      <scope startLine="130" endLine="133">
        <declaration type="ComplexVector" name="rowi" />
      </scope>
    </method>
    <method type="int" name="getNumberOfRows" startLine="138" endLine="140" />
    <method type="int" name="getNumberOfColumns" startLine="143" endLine="145" />
    <method type="Complex" name="get" startLine="148" endLine="150" />
    <method type="ComplexVector" name="getRow" startLine="153" endLine="166">
      <declaration type="int" name="n" />
      <declaration type="int" name="m" />
      <declaration type="ComplexVector" name="V" />
      <scope startLine="162" endLine="164" />
      <comment>Else transposed.</comment>
    </method>
    <method type="ComplexVector" name="getColumn" startLine="169" endLine="180">
      <declaration type="int" name="m" />
      <declaration type="ComplexVector" name="V" />
      <scope startLine="176" endLine="178" />
    </method>
    <method type="ComplexVector" name="getDiagonal" startLine="183" endLine="192">
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="int" name="dimension" />
      <declaration type="ComplexVector" name="V" />
      <scope startLine="188" endLine="190" />
    </method>
    <method type="ComplexMatrix" name="opposite" startLine="195" endLine="201">
      <declaration type="ComplexMatrix" name="M" />
      <scope startLine="197" endLine="199" />
    </method>
    <method type="ComplexMatrix" name="plus" startLine="204" endLine="213">
      <declaration type="ComplexMatrix" name="M" />
      <scope startLine="208" endLine="211" />
    </method>
    <method type="ComplexMatrix" name="minus" startLine="216" endLine="218">
      <comment>Returns more specialized type.</comment>
    </method>
    <method type="ComplexMatrix" name="times" startLine="221" endLine="227">
      <declaration type="ComplexMatrix" name="M" />
      <scope startLine="223" endLine="225" />
    </method>
    <method type="ComplexVector" name="times" startLine="230" endLine="239">
      <declaration type="int" name="m" />
      <declaration type="ComplexVector" name="V" />
      <scope startLine="235" endLine="237" />
    </method>
    <method type="ComplexMatrix" name="times" startLine="242" endLine="255">
      <declaration type="int" name="n" />
      <declaration type="int" name="m" />
      <declaration type="int" name="p" />
      <declaration type="ComplexMatrix" name="M" />
      <declaration type="Multiply" name="multiply" />
      <comment>Creates a mxp matrix in transposed form (p columns vectors of size m)</comment>
      <comment>Transposed.</comment>
    </method>
    <class name="Multiply" startLine="258">
      <implements name="Runnable" />
      <method type="Multiply" name="create" startLine="262" endLine="264" />
      <declaration type="ObjectFactory<Multiply>" name="FACTORY" />
      <declaration type="ComplexMatrix" name="_left" />
      <declaration type="Matrix<Complex>" name="_right" />
      <declaration type="int" name="_rightColumnStart" />
      <declaration type="int" name="_rightColumnEnd" />
      <declaration type="FastTable<ComplexVector>" name="_columnsResult" />
      <method type="Multiply" name="valueOf" startLine="279" endLine="287">
        <declaration type="Multiply" name="multiply" />
      </method>
      <method type="void" name="recycle" startLine="289" endLine="294" />
      <method type="void" name="run" startLine="296" endLine="324">
        <scope startLine="297" endLine="308">
          <declaration type="FastTable<ComplexVector>" name="rows" />
          <declaration type="int" name="m" />
          <scope startLine="300" endLine="307">
            <declaration type="Vector<Complex>" name="thatColj" />
            <declaration type="ComplexVector" name="column" />
            <scope startLine="304" endLine="306" />
          </scope>
          <comment>Direct calculation.</comment>
          <comment>Concurrent/Recursive calculation.</comment>
        </scope>
        <scope startLine="308" endLine="323">
          <declaration type="int" name="halfIndex" />
          <declaration type="Multiply" name="firstHalf" />
          <declaration type="Multiply" name="secondHalf" />
          <scope startLine="315" endLine="318" />
          <scope startLine="318" endLine="320" />
        </scope>
      </method>
      <method type="FastTable<ComplexVector>" name="getRows" startLine="327" endLine="335">
        <declaration type="FastTable<ComplexVector>" name="rows" />
        <scope startLine="331" endLine="333" />
      </method>
      <method type="ComplexMatrix" name="inverse" startLine="338" endLine="342" />
      <method type="Complex" name="determinant" startLine="345" endLine="347" />
      <method type="ComplexMatrix" name="transpose" startLine="350" endLine="354">
        <declaration type="ComplexMatrix" name="M" />
      </method>
      <method type="Complex" name="cofactor" startLine="357" endLine="378">
        <scope startLine="358" endLine="362">
          <declaration type="int" name="k" />
          <comment>Swaps i,j</comment>
        </scope>
        <declaration type="int" name="m" />
        <declaration type="ComplexMatrix" name="M" />
        <scope startLine="365" endLine="376">
          <declaration type="ComplexVector" name="row" />
          <declaration type="ComplexVector" name="V" />
          <scope startLine="371" endLine="375" />
        </scope>
      </method>
      <method type="ComplexMatrix" name="adjoint" startLine="381" endLine="394">
        <declaration type="ComplexMatrix" name="M" />
        <declaration type="int" name="m" />
        <scope startLine="384" endLine="392">
          <declaration type="ComplexVector" name="row" />
          <scope startLine="387" endLine="391">
            <declaration type="Complex" name="cofactor" />
          </scope>
        </scope>
      </method>
      <method type="ComplexMatrix" name="tensor" startLine="397" endLine="399" />
      <method type="ComplexVector" name="vectorization" startLine="402" endLine="404" />
      <method type="ComplexMatrix" name="copy" startLine="407" endLine="413">
        <declaration type="ComplexMatrix" name="M" />
        <scope startLine="409" endLine="411" />
      </method>
      <method type="ComplexMatrix" name="newInstance" startLine="419" endLine="425">
        <declaration type="ComplexMatrix" name="M" />
      </method>
      <method type="ComplexMatrix" name="create" startLine="429" endLine="431" />
      <declaration type="ObjectFactory<ComplexMatrix>" name="FACTORY" />
      <method type="constructor" name="ComplexMatrix" startLine="434" endLine="435" />
      <declaration type="long" name="serialVersionUID" />
    </class>
    <comment>Logic to multiply two matrices.</comment>
    <comment>/</comment>
    <comment>Factory creation.</comment>
    <comment>/</comment>
  </class>
</source>
