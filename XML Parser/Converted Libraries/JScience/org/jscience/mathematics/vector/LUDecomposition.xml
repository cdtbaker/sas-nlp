<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.vector">
  <import name="java.util.Comparator" />
  <import name="org.jscience.mathematics.structure.Field" />
  <import name="org.jscience.mathematics.number.Number" />
  <import name="javolution.context.LocalContext" />
  <import name="javolution.context.ObjectFactory" />
  <import name="javolution.util.FastTable" />
  <import name="javolution.util.Index" />
  <class name="LUDecomposition" startLine="21">
    <javadoc>
      <text>* <p> This class represents the decomposition of a {@link Matrix matrix} 
 * <code>A</code> into a product of a {@link #getLower lower} 
 * and {@link #getUpper upper} triangular matrices, <code>L</code>
 * and <code>U</code> respectively, such as <code>A = P·L·U<code> with 
 * <code>P<code> a {@link #getPermutation permutation} matrix.</p>
 * <p> This decomposition</a> is typically used to resolve linear systems
 * of equations (Gaussian elimination) or to calculate the determinant
 * of a square {@link Matrix} (<code>O(m³)</code>).</p>
 * <p> Numerical stability is guaranteed through pivoting if the{@link Field} elements are {@link Number numbers}For others elements types, numerical stability can be ensured by setting
 * the {@link javolution.context.LocalContext context-local} pivot 
 * comparator (see {@link #setPivotComparator}).</p>
 * <p> Pivoting can be disabled by setting the {@link #setPivotComparator 
 * pivot comparator} to <code>null</code> ({@link #getPermutation P} 
 * is then the matrix identity).</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.3, January 2, 2007</version>
      <see><a href="http://en.wikipedia.org/wiki/LU_decomposition">
 *      Wikipedia: LU decomposition</a></see>
    </javadoc>
    <javadoc>
      <text>* Holds the default comparator for pivoting.</text>
    </javadoc>
    <method type="int" name="compare" startLine="55" endLine="63">
      <comment>Zero</comment>
      <comment>Zero</comment>
    </method>
    <declaration type="Comparator<Field>" name="NUMERIC_COMPARATOR" />
    <javadoc>
      <text>* Holds the local comparator.</text>
    </javadoc>
    <declaration type="LocalContext.Reference<Comparator<Field>>" name="PIVOT_COMPARATOR" />
    <javadoc>
      <text>* Holds the dimension of the square matrix source.</text>
    </javadoc>
    <declaration type="int" name="_n" />
    <javadoc>
      <text>* Holds the pivots indexes.</text>
    </javadoc>
    <declaration type="FastTable<Index>" name="_pivots" />
    <javadoc>
      <text>* Holds the LU elements.</text>
    </javadoc>
    <declaration type="DenseMatrix<F>" name="_LU" />
    <javadoc>
      <text>* Holds the number of permutation performed.</text>
    </javadoc>
    <declaration type="int" name="_permutationCount" />
    <javadoc>
      <text>* Returns the lower/upper decomposition of the specified matrix.</text>
      <param>source the matrix for which the decomposition is calculated.</param>
      <return>the lower/upper decomposition of the specified matrix.</return>
      <throws>DimensionException if the specified matrix is not square.</throws>
    </javadoc>
    <method type="LUDecomposition<F>" name="valueOf" startLine="101" endLine="110">
      <declaration type="int" name="dimension" />
      <declaration type="LUDecomposition" name="lu" />
    </method>
    <javadoc>
      <text>* Constructs the LU decomposition of the specified matrix.
 * We make the choise of Lii = ONE (diagonal elements of the
 * lower triangular matrix are multiplicative identities).</text>
      <param>source the matrix to decompose.</param>
      <throws>MatrixException if the matrix source is not square.</throws>
    </javadoc>
    <method type="void" name="construct" startLine="120" endLine="168">
      <scope startLine="124" endLine="126" />
      <declaration type="Comparator<Field>" name="cmp" />
      <declaration type="int" name="n" />
      <scope startLine="131" endLine="167">
        <scope startLine="133" endLine="154">
          <declaration type="int" name="pivot" />
          <scope startLine="138" endLine="142">
            <scope startLine="139" endLine="141" />
          </scope>
          <scope startLine="143" endLine="153">
            <scope startLine="144" endLine="148">
              <declaration type="F" name="tmp" />
            </scope>
            <declaration type="int" name="j" />
          </scope>
        </scope>
        <declaration type="F" name="lukkInv" />
        <scope startLine="158" endLine="166">
          <scope startLine="162" endLine="165" />
        </scope>
        <comment>Pivoting enabled.</comment>
        <comment>Rearranges the rows so that the absolutely largest</comment>
        <comment>elements of the matrix source in each column lies</comment>
        <comment>in the diagonal.</comment>
        <comment>Exchanges.</comment>
        <comment>Computes multipliers and eliminate k-th column.</comment>
        <comment>Multiplicative order is important</comment>
        <comment>for non-commutative elements.</comment>
      </scope>
      <comment>Main loop.</comment>
    </method>
    <javadoc>
      <text>* Sets the {@link javolution.context.LocalContext local} comparator used 
 * for pivoting or <code>null</code> to disable pivoting.</text>
      <param>cmp the comparator for pivoting or <code>null</code>.</param>
    </javadoc>
    <method type="void" name="setPivotComparator" startLine="176" endLine="178" />
    <javadoc>
      <text>* Returns the {@link javolution.context.LocalContext local} 
 * comparator used for pivoting or <code>null</code> if pivoting 
 * is not performed (default {@link #NUMERIC_COMPARATOR}).</text>
      <return>the comparator for pivoting or <code>null</code>.</return>
    </javadoc>
    <method type="Comparator<Field>" name="getPivotComparator" startLine="187" endLine="189" />
    <javadoc>
      <text>* Returns the solution X of the equation: A * X = B  with
 * <code>this = A.lu()</code> using back and forward substitutions.</text>
      <param>B the input matrix.</param>
      <return>the solution X = (1 / A) * B.</return>
      <throws>DimensionException if the dimensions do not match.</throws>
    </javadoc>
    <method type="DenseMatrix<F>" name="solve" startLine="199" endLine="238">
      <declaration type="int" name="n" />
      <declaration type="DenseMatrix<F>" name="X" />
      <scope startLine="207" endLine="211">
        <scope startLine="208" endLine="210" />
      </scope>
      <scope startLine="214" endLine="222">
        <scope startLine="215" endLine="221">
          <declaration type="F" name="luik" />
          <scope startLine="217" endLine="220" />
        </scope>
      </scope>
      <scope startLine="225" endLine="236">
        <scope startLine="226" endLine="228" />
        <scope startLine="229" endLine="235">
          <declaration type="F" name="luik" />
          <scope startLine="231" endLine="234" />
        </scope>
      </scope>
      <comment>Copies B with pivoting.</comment>
      <comment>Solves L * Y = pivot(B)</comment>
      <comment>Solves U * X = Y;</comment>
    </method>
    <method type="DenseMatrix<F>" name="createNullDenseMatrix" startLine="240" endLine="250">
      <declaration type="DenseMatrix<F>" name="M" />
      <scope startLine="242" endLine="248">
        <declaration type="DenseVector<F>" name="V" />
        <scope startLine="245" endLine="247" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the solution X of the equation: A * X = Identity  with
 * <code>this = A.lu()</code> using back and forward substitutions.</text>
      <return><code>this.solve(Identity)</code></return>
    </javadoc>
    <method type="DenseMatrix<F>" name="inverse" startLine="258" endLine="304">
      <declaration type="int" name="n" />
      <declaration type="DenseMatrix<F>" name="R" />
      <scope startLine="262" endLine="266">
        <scope startLine="263" endLine="265" />
      </scope>
      <scope startLine="267" endLine="276">
        <scope startLine="269" endLine="275">
          <declaration type="F" name="sum" />
          <scope startLine="271" endLine="273" />
        </scope>
      </scope>
      <scope startLine="278" endLine="290">
        <scope startLine="279" endLine="289">
          <scope startLine="280" endLine="288">
            <declaration type="F" name="lukj" />
            <scope startLine="282" endLine="285" />
            <scope startLine="285" endLine="287" />
          </scope>
        </scope>
      </scope>
      <declaration type="FastTable<F>" name="tmp" />
      <scope startLine="293" endLine="301">
        <scope startLine="295" endLine="297" />
        <scope startLine="298" endLine="300" />
      </scope>
      <comment>Calculates inv(U).</comment>
      <comment>Solves inv(A) * L = inv(U)</comment>
      <comment>Swaps columns (reverses pivots permutations).</comment>
    </method>
    <javadoc>
      <text>* Returns the determinant of the {@link Matrix} having this
 * decomposition.</text>
      <return>the determinant of the matrix source.</return>
    </javadoc>
    <method type="F" name="determinant" startLine="312" endLine="318">
      <declaration type="F" name="product" />
      <scope startLine="314" endLine="316" />
    </method>
    <javadoc>
      <text>* Returns the lower matrix decomposition (<code>L</code>) with diagonal
 * elements equal to the multiplicative identity for F.</text>
      <param>zero the additive identity for F.</param>
      <param>one the multiplicative identity for F.</param>
      <return>the lower matrix.</return>
    </javadoc>
    <method type="DenseMatrix<F>" name="getLower" startLine="328" endLine="337">
      <declaration type="DenseMatrix<F>" name="L" />
      <scope startLine="330" endLine="335">
        <scope startLine="331" endLine="333" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the upper matrix decomposition (<code>U</code>).</text>
      <param>zero the additive identity for F.</param>
      <return>the upper matrix.</return>
    </javadoc>
    <method type="DenseMatrix<F>" name="getUpper" startLine="345" endLine="353">
      <declaration type="DenseMatrix<F>" name="U" />
      <scope startLine="347" endLine="351">
        <scope startLine="348" endLine="350" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the permutation matrix (<code>P</code>).</text>
      <param>zero the additive identity for F.</param>
      <param>one the multiplicative identity for F.</param>
      <return>the permutation matrix.</return>
    </javadoc>
    <method type="SparseMatrix<F>" name="getPermutation" startLine="362" endLine="369">
      <declaration type="SparseMatrix<F>" name="P" />
      <scope startLine="364" endLine="367" />
    </method>
    <javadoc>
      <text>* Returns the lower/upper decomposition in one single matrix.</text>
      <return>the lower/upper matrix merged in a single matrix.</return>
    </javadoc>
    <method type="DenseMatrix<F>" name="getLU" startLine="376" endLine="378" />
    <javadoc>
      <text>* Returns the pivots elements of this decomposition.</text>
      <return>the row indices after permutation.</return>
    </javadoc>
    <method type="FastTable<Index>" name="getPivots" startLine="385" endLine="387" />
    <method type="LUDecomposition" name="create" startLine="395" endLine="397" />
    <method type="void" name="cleanup" startLine="400" endLine="402" />
    <declaration type="ObjectFactory<LUDecomposition>" name="FACTORY" />
    <method type="constructor" name="LUDecomposition" startLine="405" endLine="406" />
    <comment>/</comment>
    <comment>Factory creation.</comment>
    <comment>/</comment>
  </class>
</source>
