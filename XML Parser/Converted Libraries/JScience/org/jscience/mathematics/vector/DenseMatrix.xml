<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.vector">
  <import name="java.util.Iterator" />
  <import name="java.util.List" />
  <import name="javolution.context.ConcurrentContext" />
  <import name="javolution.context.ObjectFactory" />
  <import name="javolution.lang.MathLib" />
  <import name="javolution.util.FastTable" />
  <import name="org.jscience.mathematics.structure.Field" />
  <class name="DenseMatrix" extends="Matrix<F>" startLine="20">
    <javadoc>
      <text>* <p> This class represents a matrix made of {@link DenseVector dense
 * vectors} (as rows). To create a dense matrix made of column vectors the {@link #transpose} method can be used. 
 * For example:[code]
 * DenseVector<Rational> column0 = DenseVector.valueOf(...);
 * DenseVector<Rational> column1 = DenseVector.valueOf(...);
 * DenseMatrix<Rational> M = DenseMatrix.valueOf(column0, column1).transpose();
 * [/code]</p>
 * <p> As for any concrete {@link org.jscience.mathematics.structure.Structurestructure}, this class is declared <code>final</code> (otherwise most
 * operations would have to be overridden to return the appropriate type).
 * Specialized dense matrix should sub-class {@link Matrix} directly.
 * For example:[code]
 * // Extension through composition.
 * final class TriangularMatrix <F extends Field<F>> extends Matrix<F> {
 * private DenseMatrix<F> _value; // Possible implementation.
 * ...
 * public TriangularMatrix opposite() { // Returns the right type.
 * return TriangularMatrix.valueOf(_value.opposite());
 * }
 * ...
 * }[/code]
 * </p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.3, January 2, 2007</version>
    </javadoc>
    <javadoc>
      <text>* Holds the number of columns n.</text>
    </javadoc>
    <declaration type="int" name="_n" />
    <javadoc>
      <text>* Indicates if this matrix is transposed (the rows are then the columns).</text>
    </javadoc>
    <declaration type="boolean" name="_transposed" />
    <javadoc>
      <text>* Holds this matrix rows (or columns when transposed).</text>
    </javadoc>
    <declaration type="FastTable<DenseVector<F>>" name="_rows" />
    <javadoc>
      <text>* Returns a dense matrix from the specified 2-dimensional array.
 * The first dimension being the row and the second being the column.</text>
      <param>elements this matrix elements.</param>
      <return>the matrix having the specified elements.</return>
      <throws>DimensionException if rows have different length.</throws>
      <see>DenseMatrix</see>
    </javadoc>
    <method type="DenseMatrix<F>" name="valueOf" startLine="73" endLine="84">
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="DenseMatrix<F>" name="M" />
      <scope startLine="77" endLine="82">
        <declaration type="DenseVector<F>" name="row" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns a dense matrix holding the specified row vectors 
 * (column vectors if {@link #transpose transposed}).</text>
      <param>rows the row vectors.</param>
      <return>the matrix having the specified rows.</return>
      <throws>DimensionException if the rows do not have the same dimension.</throws>
    </javadoc>
    <method type="DenseMatrix<F>" name="valueOf" startLine="95" endLine="106">
      <declaration type="int" name="n" />
      <declaration type="DenseMatrix<F>" name="M" />
      <scope startLine="98" endLine="104">
        <declaration type="DenseVector<F>" name="rowi" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns a dense matrix holding the row vectors from the specified 
 * collection (column vectors if {@link #transpose transposed}).</text>
      <param>rows the list of row vectors.</param>
      <return>the matrix having the specified rows.</return>
      <throws>DimensionException if the rows do not have the same dimension.</throws>
    </javadoc>
    <method type="DenseMatrix<F>" name="valueOf" startLine="117" endLine="129">
      <declaration type="int" name="n" />
      <declaration type="DenseMatrix<F>" name="M" />
      <declaration type="Iterator<DenseVector<F>>" name="iterator" />
      <scope startLine="121" endLine="127">
        <declaration type="DenseVector<F>" name="rowi" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns a dense matrix equivalent to the specified matrix.</text>
      <param>that the matrix to convert.</param>
      <return><code>that</code> or a dense matrix holding the same elements
 * as the specified matrix.</return>
    </javadoc>
    <method type="DenseMatrix<F>" name="valueOf" startLine="138" endLine="149">
      <declaration type="int" name="n" />
      <declaration type="int" name="m" />
      <declaration type="DenseMatrix<F>" name="M" />
      <scope startLine="144" endLine="147">
        <declaration type="DenseVector<F>" name="rowi" />
      </scope>
    </method>
    <method type="int" name="getNumberOfRows" startLine="152" endLine="154" />
    <method type="int" name="getNumberOfColumns" startLine="157" endLine="159" />
    <method type="F" name="get" startLine="162" endLine="164" />
    <method type="DenseVector<F>" name="getRow" startLine="167" endLine="180">
      <declaration type="int" name="n" />
      <declaration type="int" name="m" />
      <declaration type="DenseVector<F>" name="V" />
      <scope startLine="176" endLine="178" />
      <comment>Else transposed.</comment>
    </method>
    <method type="DenseVector<F>" name="getColumn" startLine="183" endLine="194">
      <declaration type="int" name="m" />
      <declaration type="DenseVector<F>" name="V" />
      <scope startLine="190" endLine="192" />
    </method>
    <method type="DenseVector<F>" name="getDiagonal" startLine="197" endLine="206">
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="int" name="dimension" />
      <declaration type="DenseVector<F>" name="V" />
      <scope startLine="202" endLine="204" />
    </method>
    <method type="DenseMatrix<F>" name="opposite" startLine="209" endLine="215">
      <declaration type="DenseMatrix<F>" name="M" />
      <scope startLine="211" endLine="213" />
    </method>
    <method type="DenseMatrix<F>" name="plus" startLine="218" endLine="227">
      <declaration type="DenseMatrix<F>" name="M" />
      <scope startLine="222" endLine="225" />
    </method>
    <method type="DenseMatrix<F>" name="minus" startLine="230" endLine="232">
      <comment>Returns more specialized type.</comment>
    </method>
    <method type="DenseMatrix<F>" name="times" startLine="235" endLine="241">
      <declaration type="DenseMatrix<F>" name="M" />
      <scope startLine="237" endLine="239" />
    </method>
    <method type="DenseVector<F>" name="times" startLine="244" endLine="253">
      <declaration type="int" name="m" />
      <declaration type="DenseVector<F>" name="V" />
      <scope startLine="249" endLine="251" />
    </method>
    <method type="DenseMatrix<F>" name="times" startLine="256" endLine="269">
      <declaration type="int" name="n" />
      <declaration type="int" name="m" />
      <declaration type="int" name="p" />
      <declaration type="DenseMatrix<F>" name="M" />
      <declaration type="Multiply<F>" name="multiply" />
      <comment>Creates a mxp matrix in transposed form (p columns vectors of size m)</comment>
      <comment>Transposed.</comment>
    </method>
    <class name="Multiply" startLine="272">
      <implements name="Runnable" />
      <method type="Multiply" name="create" startLine="276" endLine="278" />
      <declaration type="ObjectFactory<Multiply>" name="FACTORY" />
      <declaration type="DenseMatrix<F>" name="_left" />
      <declaration type="Matrix<F>" name="_right" />
      <declaration type="int" name="_rightColumnStart" />
      <declaration type="int" name="_rightColumnEnd" />
      <declaration type="FastTable<DenseVector<F>>" name="_columnsResult" />
      <method type="Multiply<F>" name="valueOf" startLine="294" endLine="302">
        <declaration type="Multiply<F>" name="multiply" />
      </method>
      <method type="void" name="recycle" startLine="304" endLine="309" />
      <method type="void" name="run" startLine="311" endLine="339">
        <scope startLine="312" endLine="323">
          <declaration type="FastTable<DenseVector<F>>" name="rows" />
          <declaration type="int" name="m" />
          <scope startLine="315" endLine="322">
            <declaration type="Vector<F>" name="thatColj" />
            <declaration type="DenseVector<F>" name="column" />
            <scope startLine="319" endLine="321" />
          </scope>
          <comment>Direct calculation.</comment>
          <comment>Concurrent/Recursive calculation.</comment>
        </scope>
        <scope startLine="323" endLine="338">
          <declaration type="int" name="halfIndex" />
          <declaration type="Multiply<F>" name="firstHalf" />
          <declaration type="Multiply<F>" name="secondHalf" />
          <scope startLine="330" endLine="333" />
          <scope startLine="333" endLine="335" />
        </scope>
      </method>
      <method type="FastTable<DenseVector<F>>" name="getRows" startLine="342" endLine="350">
        <declaration type="FastTable<DenseVector<F>>" name="rows" />
        <scope startLine="346" endLine="348" />
      </method>
      <method type="DenseMatrix<F>" name="inverse" startLine="353" endLine="357" />
      <method type="F" name="determinant" startLine="360" endLine="362" />
      <method type="DenseMatrix<F>" name="transpose" startLine="365" endLine="369">
        <declaration type="DenseMatrix<F>" name="M" />
      </method>
      <method type="F" name="cofactor" startLine="372" endLine="393">
        <scope startLine="373" endLine="377">
          <declaration type="int" name="k" />
          <comment>Swaps i,j</comment>
        </scope>
        <declaration type="int" name="m" />
        <declaration type="DenseMatrix<F>" name="M" />
        <scope startLine="380" endLine="391">
          <declaration type="DenseVector<F>" name="row" />
          <declaration type="DenseVector<F>" name="V" />
          <scope startLine="386" endLine="390" />
        </scope>
      </method>
      <method type="DenseMatrix<F>" name="adjoint" startLine="396" endLine="409">
        <declaration type="DenseMatrix<F>" name="M" />
        <declaration type="int" name="m" />
        <scope startLine="399" endLine="407">
          <declaration type="DenseVector<F>" name="row" />
          <scope startLine="402" endLine="406">
            <declaration type="F" name="cofactor" />
          </scope>
        </scope>
      </method>
      <method type="Matrix<F>" name="tensor" startLine="412" endLine="433">
        <declaration type="int" name="thism" />
        <declaration type="int" name="thisn" />
        <declaration type="int" name="thatm" />
        <declaration type="int" name="thatn" />
        <declaration type="int" name="n" />
        <declaration type="int" name="m" />
        <declaration type="DenseMatrix<F>" name="M" />
        <scope startLine="420" endLine="431">
          <declaration type="int" name="i_rem_thatm" />
          <declaration type="int" name="i_div_thatm" />
          <declaration type="DenseVector<F>" name="row" />
          <scope startLine="425" endLine="430">
            <declaration type="F" name="a" />
            <scope startLine="427" endLine="429" />
          </scope>
          <comment>Row index.</comment>
        </scope>
        <comment>Number of columns,</comment>
        <comment>Number of rows.</comment>
      </method>
      <method type="Vector<F>" name="vectorization" startLine="436" endLine="445">
        <declaration type="DenseVector<F>" name="V" />
        <scope startLine="438" endLine="443">
          <declaration type="Vector<F>" name="column" />
          <scope startLine="440" endLine="442" />
        </scope>
      </method>
      <method type="DenseMatrix<F>" name="copy" startLine="448" endLine="454">
        <declaration type="DenseMatrix<F>" name="M" />
        <scope startLine="450" endLine="452" />
      </method>
      <method type="void" name="set" startLine="460" endLine="466">
        <scope startLine="461" endLine="463" />
        <scope startLine="463" endLine="465" />
      </method>
      <method type="DenseMatrix<F>" name="newInstance" startLine="474" endLine="479">
        <declaration type="DenseMatrix<F>" name="M" />
      </method>
      <method type="DenseMatrix" name="create" startLine="483" endLine="485" />
      <method type="void" name="cleanup" startLine="488" endLine="490" />
      <declaration type="ObjectFactory<DenseMatrix>" name="FACTORY" />
      <method type="constructor" name="DenseMatrix" startLine="493" endLine="494" />
      <declaration type="long" name="serialVersionUID" />
    </class>
    <comment>Logic to multiply two matrices.</comment>
    <comment>/</comment>
    <comment>Package Private Utilities</comment>
    <comment>/</comment>
    <comment>/</comment>
    <comment>Factory creation.</comment>
    <comment>/</comment>
  </class>
</source>
