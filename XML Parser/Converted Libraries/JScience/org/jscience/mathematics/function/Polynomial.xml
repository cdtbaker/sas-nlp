<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.function">
  <import name="java.util.List" />
  <import name="java.util.Map" />
  <import name="java.util.Set" />
  <import name="org.jscience.mathematics.structure.GroupAdditive" />
  <import name="org.jscience.mathematics.structure.GroupMultiplicative" />
  <import name="org.jscience.mathematics.structure.Ring" />
  <import name="javolution.util.FastMap" />
  <import name="javolution.util.FastTable" />
  <import name="javolution.context.ObjectFactory" />
  <import name="javolution.text.Text" />
  <import name="javolution.text.TextBuilder" />
  <class name="Polynomial" extends="Function<R,R>" startLine="25">
    <implements name="Ring<Polynomial<R>>" />
    <javadoc>
      <text>* <p> This class represents a mathematical expression involving a sum of powers
 * in one or more {@link Variable variables} multiplied by 
 * coefficients (such as <code>x² + x·y + 3y²</code>).</p>
 * <p> Polynomials are characterized by the type of variable they operate 
 * upon. For example:[code]
 * Variable<Amount<?>> varX = new Variable.Local<Amount<?>>("x");
 * Polynomial<Amount<?>> x = Polynomial.valueOf(Amount.valueOf(1, SI.METER), varX);
 * and
 * Variable<Complex> varX = new Variable.Local<Complex>("x");
 * Polynomial<Complex> x = Polynomial.valueOf(Complex.ONE, varX);[/code]
 * are two different polynomials, the first one operates on physical {@link org.jscience.physics.amount.Amount measures},
 * whereas the second operates on {@link org.jscience.mathematics.number.Complex complex} numbers.</p>
 * <p> Terms (others than {@link Term#ONE ONE}) having zero (additive identity) 
 * for coefficient are automatically removed.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.1, April 1, 2006</version>
    </javadoc>
    <javadoc>
      <text>* Holds the terms to coefficients mapping 
 * (never empty, holds Term.ONE when constant)</text>
    </javadoc>
    <declaration type="FastMap<Term,R>" name="_termToCoef" />
    <javadoc>
      <text>* Default constructor.</text>
    </javadoc>
    <method type="constructor" name="Polynomial" startLine="60" endLine="61" />
    <javadoc>
      <text>* Returns an univariate polynomial of degree one with the specified 
 * coefficient multiplier.</text>
      <param>coefficient the coefficient for the variable of degree 1.</param>
      <param>variable the variable for this polynomial.</param>
      <return><code>valueOf(coefficient, Term.valueOf(variable, 1))</code></return>
    </javadoc>
    <method type="Polynomial<R>" name="valueOf" startLine="72" endLine="74" />
    <javadoc>
      <text>* Returns a polynomial corresponding to the specified {@link Term term}with the specified coefficient multiplier.</text>
      <param>coefficient the coefficient multiplier.</param>
      <param>term the term multiplicand.</param>
      <return><code>coefficient * term</code></return>
    </javadoc>
    <method type="Polynomial<R>" name="valueOf" startLine="85" endLine="91">
      <declaration type="Polynomial<R>" name="p" />
    </method>
    <method type="boolean" name="isZero" startLine="93" endLine="95" />
    <javadoc>
      <text>* Returns the terms of this polynomial.</text>
      <return>this polynomial's terms.</return>
    </javadoc>
    <method type="Set<Term>" name="getTerms" startLine="102" endLine="104" />
    <javadoc>
      <text>* Returns the coefficient for the specified term.</text>
      <param>term the term for which the coefficient is returned.</param>
      <return>the coefficient for the specified term or <code>null</code>
 * if this polynomial does not contain the specified term.</return>
    </javadoc>
    <method type="R" name="getCoefficient" startLine="113" endLine="115" />
    <javadoc>
      <text>* Returns the order of this polynomial for the specified variable.</text>
      <return>the polynomial order relative to the specified variable.</return>
    </javadoc>
    <method type="int" name="getOrder" startLine="122" endLine="131">
      <declaration type="int" name="order" />
      <scope startLine="124" endLine="129">
        <declaration type="int" name="power" />
        <scope startLine="126" endLine="128" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the sum of this polynomial with a constant polynomial 
 * having the specified value (convenience method).</text>
      <param>constantValue the value of the constant polynomial to add.</param>
      <return><code>this + Constant.valueOf(constantValue)</code></return>
    </javadoc>
    <method type="Polynomial<R>" name="plus" startLine="140" endLine="142" />
    <javadoc>
      <text>* Returns the product of this polynomial with a constant polynomial 
 * having the specified value (convenience method).</text>
      <param>constantValue the value of the constant polynomial to multiply.</param>
      <return><code>this · Constant.valueOf(constantValue)</code></return>
    </javadoc>
    <method type="Polynomial<R>" name="times" startLine="151" endLine="153" />
    <javadoc>
      <text>* Returns the sum of two polynomials.</text>
      <param>that the polynomial being added.</param>
      <return><code>this + that</code></return>
    </javadoc>
    <method type="Polynomial<R>" name="plus" startLine="161" endLine="185">
      <declaration type="Polynomial<R>" name="result" />
      <declaration type="R" name="zero" />
      <scope startLine="167" endLine="182">
        <declaration type="Term" name="term" />
        <declaration type="R" name="thisCoef" />
        <declaration type="R" name="thatCoef" />
        <scope startLine="171" endLine="181">
          <declaration type="R" name="sum" />
          <scope startLine="173" endLine="178">
            <declaration type="FastMap.Entry<Term,R>" name="prev" />
          </scope>
          <scope startLine="178" endLine="180" />
        </scope>
        <comment>Remove entry (be careful iterating)</comment>
        <comment>Move back to previous entry.</comment>
        <comment>To be used if constant polynomial.</comment>
        <comment>Else the current coefficient is correct.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the opposite of this polynomial.</text>
      <return><code> - this</code></return>
    </javadoc>
    <method type="Polynomial<R>" name="opposite" startLine="192" endLine="199">
      <declaration type="Polynomial<R>" name="result" />
      <scope startLine="195" endLine="197" />
    </method>
    <javadoc>
      <text>* Returns the difference of two polynomials.</text>
      <param>that the polynomial being subtracted.</param>
      <return><code>this - that</code></return>
    </javadoc>
    <method type="Polynomial<R>" name="minus" startLine="207" endLine="209" />
    <javadoc>
      <text>* Returns the product of two polynomials.</text>
      <param>that the polynomial multiplier.</param>
      <return><code>this · that</code></return>
    </javadoc>
    <method type="Polynomial<R>" name="times" startLine="217" endLine="239">
      <declaration type="Polynomial<R>" name="result" />
      <declaration type="R" name="zero" />
      <scope startLine="220" endLine="236">
        <declaration type="Term" name="t1" />
        <declaration type="R" name="c1" />
        <scope startLine="223" endLine="235">
          <declaration type="Term" name="t2" />
          <declaration type="R" name="c2" />
          <declaration type="Term" name="t" />
          <declaration type="R" name="c" />
          <declaration type="R" name="prev" />
          <declaration type="R" name="coef" />
          <scope startLine="230" endLine="232" />
          <scope startLine="232" endLine="234" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the composition of this polynomial with the one specified.</text>
      <param>that the polynomial for which the return value is passed as
 * argument to this function.</param>
      <return>the polynomial <code>(this o that)</code></return>
      <throws>FunctionException if this function is not univariate.</throws>
    </javadoc>
    <method type="Polynomial<R>" name="compose" startLine="249" endLine="268">
      <declaration type="List<Variable<R>>" name="variables" />
      <declaration type="Variable<R>" name="v" />
      <declaration type="Polynomial<R>" name="result" />
      <scope startLine="255" endLine="266">
        <declaration type="Term" name="term" />
        <declaration type="Constant<R>" name="cst" />
        <declaration type="int" name="power" />
        <scope startLine="259" endLine="263">
          <declaration type="Polynomial<R>" name="fn" />
        </scope>
        <scope startLine="263" endLine="265" />
        <comment>power = 0</comment>
      </scope>
    </method>
    <method type="Function<Z,R>" name="compose" startLine="276" endLine="279" />
    <method type="Polynomial<R>" name="differentiate" startLine="282" endLine="301">
      <scope startLine="283" endLine="297">
        <declaration type="Polynomial<R>" name="result" />
        <scope startLine="285" endLine="295">
          <declaration type="Term" name="term" />
          <declaration type="R" name="coef" />
          <declaration type="int" name="power" />
          <scope startLine="289" endLine="294">
            <declaration type="R" name="newCoef" />
            <declaration type="Term" name="newTerm" />
            <declaration type="Polynomial<R>" name="p" />
          </scope>
        </scope>
        <comment>Returns zero.</comment>
      </scope>
      <scope startLine="297" endLine="300">
        <declaration type="R" name="coef" />
      </scope>
    </method>
    <method type="R" name="multiply" startLine="303" endLine="317">
      <declaration type="R" name="shift2" />
      <declaration type="R" name="result" />
      <scope startLine="309" endLine="315">
        <scope startLine="310" endLine="312" />
        <comment>Iteration.</comment>
      </scope>
    </method>
    <method type="Polynomial<R>" name="integrate" startLine="321" endLine="333">
      <declaration type="Polynomial<R>" name="result" />
      <scope startLine="323" endLine="331">
        <declaration type="Term" name="term" />
        <declaration type="R" name="coef" />
        <declaration type="int" name="power" />
        <declaration type="R" name="newCoef" />
        <declaration type="Term" name="newTerm" />
        <declaration type="Polynomial<R>" name="p" />
      </scope>
    </method>
    <method type="Function<R,R>" name="plus" startLine="337" endLine="340" />
    <method type="Function<R,R>" name="minus" startLine="344" endLine="347" />
    <method type="Function<R,R>" name="times" startLine="351" endLine="354" />
    <method type="Polynomial<R>" name="pow" startLine="358" endLine="360" />
    <method type="List<Variable<R>>" name="getVariables" startLine="364" endLine="377">
      <declaration type="Term" name="product" />
      <scope startLine="369" endLine="371" />
      <declaration type="FastTable" name="vars" />
      <scope startLine="373" endLine="375" />
      <comment>We multiply all terms togethers, the resulting product</comment>
      <comment>will hold all variabgles (powers are always positive).</comment>
    </method>
    <method type="R" name="evaluate" startLine="381" endLine="391">
      <declaration type="R" name="sum" />
      <scope startLine="383" endLine="389">
        <declaration type="Term" name="term" />
        <declaration type="R" name="coef" />
        <declaration type="R" name="termValue" />
        <declaration type="R" name="value" />
      </scope>
    </method>
    <method type="boolean" name="equals" startLine="394" endLine="399">
      <declaration type="Polynomial<?>" name="that" />
    </method>
    <method type="int" name="hashCode" startLine="402" endLine="404" />
    <method type="Text" name="toText" startLine="407" endLine="420">
      <declaration type="FastTable<Term>" name="terms" />
      <declaration type="TextBuilder" name="tb" />
      <scope startLine="412" endLine="418">
        <scope startLine="413" endLine="415" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns a copy of this polynomial {@link javolution.context.AllocatorContext allocated} 
 * by the calling thread (possibly on the stack).</text>
      <return>an identical and independant copy of this polynomial.</return>
    </javadoc>
    <method type="Polynomial<R>" name="copy" startLine="430" endLine="436">
      <declaration type="Polynomial<R>" name="p" />
      <scope startLine="432" endLine="434" />
    </method>
    <method type="Polynomial<R>" name="newInstance" startLine="439" endLine="443">
      <declaration type="Polynomial" name="p" />
    </method>
    <method type="Polynomial" name="create" startLine="447" endLine="449" />
    <declaration type="ObjectFactory<Polynomial>" name="FACTORY" />
    <declaration type="long" name="serialVersionUID" />
    <comment />
    <comment>Overrides parent method potentially returning polynomials</comment>
    <comment />
  </class>
</source>
