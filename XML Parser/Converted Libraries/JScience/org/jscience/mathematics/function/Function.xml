<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.function">
  <import name="java.io.Serializable" />
  <import name="java.util.Iterator" />
  <import name="java.util.List" />
  <import name="org.jscience.mathematics.structure.GroupAdditive" />
  <import name="org.jscience.mathematics.structure.GroupMultiplicative" />
  <import name="javolution.context.LocalContext" />
  <import name="javolution.context.ObjectFactory" />
  <import name="javolution.util.FastList" />
  <import name="javolution.lang.Realtime" />
  <import name="javolution.text.Text" />
  <import name="javolution.text.TextBuilder" />
  <class name="Function" startLine="25">
    <implements name="Serializable" />
    <implements name="Realtime" />
    <javadoc>
      <text>* <p> This abstract class represents a mapping between two sets such that
 * there is a unique element in the second set assigned to each element
 * in the first set.</p>
 * <p> Functions can be discrete or continuous and multivariate functions 
 * (functions with multiple variables) are also supported as illustrated 
 * below:[code]
 * // Defines local variables.
 * Variable.Local<Rational> varX = new Variable.Local<Rational>("x");
 * Variable.Local<Rational> varY = new Variable.Local<Rational>("y");
 * // f(x, y) =  x² + x·y + 1;
 * Polynomial<Rational> x = Polynomial.valueOf(Rational.ONE, varX);
 * Polynomial<Rational> y = Polynomial.valueOf(Rational.ONE, varY);
 * Polynomial<Rational> fx_y = x.pow(2).plus(x.times(y)).plus(Rational.ONE);
 * System.out.println("f(x,y) = " + fx_y);
 * // Evaluates f(1,0) 
 * System.out.println("f(1,0) = " + fx_y.evaluate(Rational.ONE, Rational.ZERO));
 * // Calculates df(x,y)/dx
 * System.out.println("df(x,y)/dx = " + fx_y.differentiate(varX));
 * > f(x,y) = [1/1]x^2 + [1/1]xy + [1/1]
 * > f(1,0) = 2/1
 * > df(x,y)/dx = [2/1]x + [1/1]y
 * [/code]</p>
 * <p> Functions are often given by formula (e.g. <code>f(x) = x²-x+1,
 * f(x,y)= x·y</code>) but the general function instance might tabulate
 * the values, solve an equation, etc.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.1, April 1, 2006</version>
      <see><a href="http://en.wikipedia.org/wiki/Function_%28mathematics%29">
 *      Wikipedia: Functions (mathematics)</a></see>
    </javadoc>
    <javadoc>
      <text>* Default constructor.</text>
    </javadoc>
    <method type="constructor" name="Function" startLine="70" endLine="71" />
    <method name="getVariables" type="List<Variable<X>>" startLine="73" endLine="79" />
    <javadoc>
      <text>* Returns a lexically ordered list of the variables (or arguments)
 * for this function (empty list for constant functions).</text>
      <return>this function current unset variables (sorted).</return>
    </javadoc>
    <method name="evaluate" type="Y" startLine="81" endLine="88" />
    <javadoc>
      <text>* Evaluates this function using its {@link Variable variables} current
 * values.</text>
      <return>the evaluation of this function.</return>
      <throws>FunctionException if any of this function's variable is not set.</throws>
    </javadoc>
    <javadoc>
      <text>* Indicates if this function is equals to the specified object.</text>
      <param>obj the object to be compared with.</param>
      <return><code>true</code> if this function and the specified argument
 * represent the same function; <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="97" endLine="99" />
    <javadoc>
      <text>* Returns the hash code for this function (consistent with {@link #equals(Object)}.</text>
      <return>this function hash code.</return>
    </javadoc>
    <method type="int" name="hashCode" startLine="107" endLine="109" />
    <javadoc>
      <text>* Retrieves the variable from this function having the specified 
 * symbol (convenience method).</text>
      <return>the variable having the specified symbol or <code>null</code>
 * if none.</return>
    </javadoc>
    <method type="Variable<X>" name="getVariable" startLine="118" endLine="124">
      <scope startLine="119" endLine="122" />
    </method>
    <javadoc>
      <text>* Evaluates this function for the specified argument value
 * (convenience method). The evaluation is performed 
 * in a {@link javolution.context.LocalContext LocalContext} and 
 * can safely be called upon functions with {@link Variable.Global global
 * variables}.</text>
      <param>arg the single variable value used for the evaluation.</param>
      <return>the evaluation of this function.</return>
      <throws>FunctionException if <code>getVariables().size() != 1</code></throws>
    </javadoc>
    <method type="Y" name="evaluate" startLine="137" endLine="151">
      <declaration type="List<Variable<X>>" name="vars" />
      <declaration type="Variable<X>" name="x" />
      <declaration type="X" name="prev" />
      <scope startLine="144" endLine="147" />
      <scope startLine="147" endLine="150" />
    </method>
    <javadoc>
      <text>* Evaluates this function for the specified arguments values
 * (convenience method). The evaluation is performed 
 * in a {@link javolution.context.LocalContext LocalContext} and 
 * can safely be called upon functions with {@link Variable.Global global
 * variables}.</text>
      <param>args the variables values used for the evaluation.</param>
      <return>the evaluation of this function.</return>
      <throws>IllegalArgumentException 
 * if <code>args.length != getVariables().size())</code></throws>
    </javadoc>
    <method type="Y" name="evaluate" startLine="165" endLine="176">
      <declaration type="List<Variable<X>>" name="vars" />
      <scope startLine="171" endLine="173" />
      <scope startLine="173" endLine="175" />
    </method>
    <method type="Y" name="evaluate" startLine="178" endLine="191">
      <scope startLine="179" endLine="188">
        <declaration type="Variable<X>" name="var" />
        <declaration type="X" name="prev" />
        <scope startLine="183" endLine="185" />
        <scope startLine="185" endLine="187" />
        <comment>Restores previous variable value.</comment>
      </scope>
      <scope startLine="188" endLine="190" />
    </method>
    <javadoc>
      <text>* Returns the composition of this function with the one specified.</text>
      <param>that the function for which the return value is passed as
 * argument to this function.</param>
      <return>the function <code>(this o that)</code></return>
      <throws>FunctionException if this function is not monovariate.</throws>
    </javadoc>
    <method type="Function<Z,Y>" name="compose" startLine="201" endLine="205" />
    <javadoc>
      <text>* Returns the first derivative of this function with respect to 
 * the specified variable.</text>
      <param>v the variable for which the derivative is calculated.</param>
      <return><code>d[this]/dv</code></return>
      <see><a href="http://mathworld.wolfram.com/Derivative.html">
     *      Derivative -- from MathWorld</a></see>
      <throws>FunctionException if the derivative is undefined.</throws>
    </javadoc>
    <method type="Function<X,Y>" name="differentiate" startLine="217" endLine="219" />
    <javadoc>
      <text>* Returns an integral of this function with respect to 
 * the specified variable.</text>
      <param>v the variable for which the integral is calculated.</param>
      <return><code>S[this·dv]</code></return>
      <see><a href="http://mathworld.wolfram.com/Integral.html">
     *      Integral -- from MathWorld</a></see>
    </javadoc>
    <method type="Function<X,Y>" name="integrate" startLine="230" endLine="232" />
    <javadoc>
      <text>* Returns the sum of this function with the one specified.</text>
      <param>that the function to be added.</param>
      <return><code>this + that</code>.</return>
    </javadoc>
    <method type="Function<X,Y>" name="plus" startLine="240" endLine="242" />
    <javadoc>
      <text>* Returns the difference of this function with the one specified.</text>
      <param>that the function to be subtracted.</param>
      <return><code>this - that</code>.</return>
    </javadoc>
    <method type="Function<X,Y>" name="minus" startLine="251" endLine="258">
      <scope startLine="252" endLine="256">
        <declaration type="Function" name="thatOpposite" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the product of this function with the one specified.</text>
      <param>that the function multiplier.</param>
      <return><code>this · that</code>.</return>
    </javadoc>
    <method type="Function<X,Y>" name="times" startLine="266" endLine="268" />
    <javadoc>
      <text>* Returns the quotient of this function with the one specified.
 * Evaluation of this function may raise an exception if the 
 * function result is not a {</text>
      <param>that the function divisor.</param>
      <return><code>this / that</code>.</return>
    </javadoc>
    <method type="Function<X,Y>" name="divide" startLine="279" endLine="286">
      <scope startLine="280" endLine="284">
        <declaration type="Function" name="thatInverse" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns this function raised at the specified exponent.</text>
      <param>n the exponent.</param>
      <return><code>this<sup>n</sup></code></return>
      <throws>IllegalArgumentException if <code>n &lt;= 0</code></throws>
    </javadoc>
    <method type="Function<X,Y>" name="pow" startLine="295" endLine="309">
      <declaration type="Function<X,Y>" name="pow2" />
      <declaration type="Function<X,Y>" name="result" />
      <scope startLine="301" endLine="307">
        <scope startLine="302" endLine="304" />
        <comment>Iteration.</comment>
      </scope>
    </method>
    <method name="toText" type="Text" startLine="310" endLine="317" />
    <javadoc>
      <text>* Returns the textual representation of this real-time object
 * (equivalent to <code>toString</code> except that the returned value
 * can be allocated from the local context space).</text>
      <return>this object's textual representation.</return>
    </javadoc>
    <javadoc>
      <text>* Returns the text representation of this function as a 
 * <code>java.lang.String</code>.</text>
      <return><code>toText().toString()</code></return>
    </javadoc>
    <method type="String" name="toString" startLine="325" endLine="327" />
    <method type="List" name="merge" startLine="331" endLine="375">
      <declaration type="FastList" name="result" />
      <declaration type="Iterator" name="iLeft" />
      <declaration type="Iterator" name="iRight" />
      <declaration type="Variable" name="l" />
      <declaration type="Variable" name="r" />
      <scope startLine="341" endLine="374">
        <scope startLine="342" endLine="347">
          <scope startLine="343" endLine="345" />
        </scope>
        <scope startLine="348" endLine="353">
          <scope startLine="349" endLine="351" />
        </scope>
        <scope startLine="356" endLine="361" />
        <declaration type="int" name="comp" />
        <scope startLine="363" endLine="367" />
        <scope startLine="368" endLine="372" />
      </scope>
    </method>
    <class name="Compose" extends="Function" startLine="378">
      <method type="Compose" name="create" startLine="382" endLine="384" />
      <method type="void" name="cleanup" startLine="386" endLine="389" />
      <declaration type="ObjectFactory<Compose>" name="FACTORY" />
      <declaration type="Function" name="_f" />
      <declaration type="Function" name="_g" />
      <method type="Function<X,Y>" name="newInstance" startLine="397" endLine="402">
        <declaration type="Compose" name="compose" />
      </method>
      <method type="List" name="getVariables" startLine="405" endLine="407" />
      <method type="Object" name="evaluate" startLine="411" endLine="413" />
      <method type="Function" name="differentiate" startLine="416" endLine="421">
        <declaration type="Function" name="fd" />
        <declaration type="Function" name="gd" />
        <comment>Chain rule: http:en.wikipedia.org/wiki/Chain_rule</comment>
      </method>
      <method type="Text" name="toText" startLine="423" endLine="426" />
      <method type="boolean" name="equals" startLine="429" endLine="434">
        <declaration type="Compose" name="that" />
      </method>
      <method type="int" name="hashCode" startLine="437" endLine="439" />
      <declaration type="long" name="serialVersionUID" />
      <class name="Derivative" extends="Function" startLine="446">
        <method type="Derivative" name="create" startLine="450" endLine="452" />
        <method type="void" name="cleanup" startLine="454" endLine="457" />
        <declaration type="ObjectFactory<Derivative>" name="FACTORY" />
        <declaration type="Function" name="_f" />
        <declaration type="Variable" name="_v" />
        <method type="Function<X,Y>" name="newInstance" startLine="465" endLine="470">
          <declaration type="Derivative" name="derivative" />
        </method>
        <method type="List" name="getVariables" startLine="473" endLine="475" />
        <method type="Object" name="evaluate" startLine="478" endLine="480" />
        <method type="Text" name="toText" startLine="482" endLine="485" />
        <method type="boolean" name="equals" startLine="488" endLine="493">
          <declaration type="Derivative" name="that" />
        </method>
        <method type="int" name="hashCode" startLine="496" endLine="498" />
        <declaration type="long" name="serialVersionUID" />
        <class name="Integral" extends="Function" startLine="504">
          <method type="Integral" name="create" startLine="508" endLine="510" />
          <method type="void" name="cleanup" startLine="512" endLine="515" />
          <declaration type="ObjectFactory<Integral>" name="FACTORY" />
          <declaration type="Function" name="_f" />
          <declaration type="Variable" name="_v" />
          <method type="Function<X,Y>" name="newInstance" startLine="523" endLine="528">
            <declaration type="Integral" name="integral" />
          </method>
          <method type="List" name="getVariables" startLine="531" endLine="533" />
          <method type="Object" name="evaluate" startLine="536" endLine="538" />
          <method type="Text" name="toText" startLine="540" endLine="543" />
          <method type="boolean" name="equals" startLine="546" endLine="551">
            <declaration type="Integral" name="that" />
          </method>
          <method type="int" name="hashCode" startLine="554" endLine="556" />
          <declaration type="long" name="serialVersionUID" />
          <class name="Plus" extends="Function" startLine="562">
            <method type="Plus" name="create" startLine="566" endLine="568" />
            <method type="void" name="cleanup" startLine="570" endLine="573" />
            <declaration type="ObjectFactory<Plus>" name="FACTORY" />
            <declaration type="Function" name="_f" />
            <method type="Function<X,Y>" name="newInstance" startLine="579" endLine="584">
              <declaration type="Plus" name="plus" />
            </method>
            <method type="List" name="getVariables" startLine="587" endLine="589" />
            <method type="Object" name="evaluate" startLine="593" endLine="601">
              <declaration type="Object" name="y2" />
              <declaration type="Object" name="y1" />
            </method>
            <method type="Function" name="differentiate" startLine="605" endLine="607" />
            <method type="Function" name="integrate" startLine="611" endLine="613" />
            <method type="Text" name="toText" startLine="615" endLine="618" />
            <method type="boolean" name="equals" startLine="621" endLine="626">
              <declaration type="Plus" name="that" />
            </method>
            <method type="int" name="hashCode" startLine="629" endLine="631" />
            <declaration type="long" name="serialVersionUID" />
            <class name="Minus" extends="Function" startLine="637">
              <method type="Minus" name="create" startLine="641" endLine="643" />
              <method type="void" name="cleanup" startLine="645" endLine="648" />
              <declaration type="ObjectFactory<Minus>" name="FACTORY" />
              <declaration type="Function" name="_f" />
              <method type="Function<X,Y>" name="newInstance" startLine="654" endLine="659">
                <declaration type="Minus" name="minus" />
              </method>
              <method type="List" name="getVariables" startLine="662" endLine="664" />
              <method type="Object" name="evaluate" startLine="668" endLine="681">
                <declaration type="Object" name="y2" />
                <declaration type="Object" name="y1" />
              </method>
              <method type="Function" name="differentiate" startLine="685" endLine="687" />
              <method type="Function" name="integrate" startLine="691" endLine="693" />
              <method type="Text" name="toText" startLine="695" endLine="698" />
              <method type="boolean" name="equals" startLine="701" endLine="706">
                <declaration type="Minus" name="that" />
              </method>
              <method type="int" name="hashCode" startLine="709" endLine="711" />
              <declaration type="long" name="serialVersionUID" />
              <class name="Times" extends="Function" startLine="717">
                <method type="Times" name="create" startLine="721" endLine="723" />
                <method type="void" name="cleanup" startLine="725" endLine="728" />
                <declaration type="ObjectFactory<Times>" name="FACTORY" />
                <declaration type="Function" name="_f" />
                <method type="Function<X,Y>" name="newInstance" startLine="734" endLine="739">
                  <declaration type="Times" name="times" />
                </method>
                <method type="List" name="getVariables" startLine="742" endLine="744" />
                <method type="Object" name="evaluate" startLine="748" endLine="756">
                  <declaration type="Object" name="y2" />
                  <declaration type="Object" name="y1" />
                </method>
                <method type="Function" name="differentiate" startLine="760" endLine="767">
                  <declaration type="Function" name="fd" />
                  <declaration type="Function" name="gd" />
                  <comment>Product rule: http:en.wikipedia.org/wiki/Product_rule</comment>
                  <comment>(support for non-commutative multiplications).</comment>
                  <comment>r' = d(f·g) = f'g + fg'</comment>
                </method>
                <method type="Text" name="toText" startLine="769" endLine="772" />
                <method type="boolean" name="equals" startLine="775" endLine="780">
                  <declaration type="Times" name="that" />
                </method>
                <method type="int" name="hashCode" startLine="783" endLine="785" />
                <declaration type="long" name="serialVersionUID" />
                <class name="Divide" extends="Function" startLine="791">
                  <method type="Divide" name="create" startLine="795" endLine="797" />
                  <method type="void" name="cleanup" startLine="799" endLine="802" />
                  <declaration type="ObjectFactory<Divide>" name="FACTORY" />
                  <declaration type="Function" name="_f" />
                  <method type="Function<X,Y>" name="newInstance" startLine="808" endLine="813">
                    <declaration type="Divide" name="divide" />
                  </method>
                  <method type="List" name="getVariables" startLine="816" endLine="818" />
                  <method type="Object" name="evaluate" startLine="822" endLine="834">
                    <declaration type="Object" name="y2" />
                    <declaration type="Object" name="y1" />
                  </method>
                  <method type="Function" name="differentiate" startLine="838" endLine="846">
                    <declaration type="Function" name="fd" />
                    <declaration type="Function" name="gd" />
                    <comment>Quotient rule: http:en.wikipedia.org/wiki/Quotient_rule</comment>
                    <comment>with support for non-commutative multiplications.</comment>
                    <comment>r = f/g,  rg = f, r'g + rg' = f' (produt rule)</comment>
                    <comment>r' = (f' - rg')/g, r' = (f' - (f/g)g')/g</comment>
                  </method>
                  <method type="Text" name="toText" startLine="848" endLine="851" />
                  <method type="boolean" name="equals" startLine="854" endLine="859">
                    <declaration type="Divide" name="that" />
                  </method>
                  <method type="int" name="hashCode" startLine="862" endLine="864" />
                  <declaration type="long" name="serialVersionUID" />
                </class>
              </class>
            </class>
          </class>
        </class>
      </class>
    </class>
    <comment>TODO: Implements XMLSerializable.</comment>
    <comment>Merges the variable from the specified function into a single table.</comment>
    <comment>Function composition (default implementation).</comment>
    <comment>Function derivative (default implementation).</comment>
    <comment>Function integral (default implementation).</comment>
    <comment>Function addition (default implementation).</comment>
    <comment>Function addition (default implementation).</comment>
    <comment>Function multiplication (default implementation).</comment>
    <comment>Function multiplication (default implementation).</comment>
  </class>
</source>
