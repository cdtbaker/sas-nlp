<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.function">
  <import name="java.io.Serializable" />
  <import name="org.jscience.mathematics.structure.Ring" />
  <import name="javolution.context.ArrayFactory" />
  <import name="javolution.lang.MathLib" />
  <import name="javolution.lang.Realtime" />
  <import name="javolution.lang.ValueType" />
  <import name="javolution.text.Text" />
  <import name="javolution.text.TextBuilder" />
  <class name="Term" startLine="21">
    <implements name="Serializable" />
    <implements name="Comparable<Term>" />
    <implements name="ValueType" />
    <implements name="Realtime" />
    <javadoc>
      <text>* This class represents the term of a {@link Polynomial polynomial} 
 * such as <code>x·y²</code>.</text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.0, February 13, 2006</version>
    </javadoc>
    <javadoc>
      <text>* Holds the multiplicative identity.</text>
    </javadoc>
    <declaration type="Term" name="ONE" />
    <javadoc>
      <text>* Holds the term's factory.</text>
    </javadoc>
    <method type="Term" name="create" startLine="42" endLine="44" />
    <declaration type="ArrayFactory<Term>" name="FACTORY" />
    <javadoc>
      <text>* Holds the variables (ordered).</text>
    </javadoc>
    <declaration type="Variable<?>[]" name="_variables" />
    <javadoc>
      <text>* Holds the corresponding powers (positive and different from zero).</text>
    </javadoc>
    <declaration type="int[]" name="_powers" />
    <javadoc>
      <text>* Holds the number of variables.</text>
    </javadoc>
    <declaration type="int" name="_size" />
    <javadoc>
      <text>* Creates a new term of specified capacity.</text>
      <param>capacity the maxium number of variables.</param>
    </javadoc>
    <method type="constructor" name="Term" startLine="67" endLine="70" />
    <javadoc>
      <text>* Return the term corresponding to the specified variable raised to
 * the specified power.</text>
      <param>v the variable.</param>
      <param>n the power.</param>
      <return>the term for <code>v<sup>n</sup></code></return>
      <throws>IllegalArgumentException if <code>n &lt; 0</code></throws>
    </javadoc>
    <method type="Term" name="valueOf" startLine="81" endLine="92">
      <declaration type="Term" name="term" />
    </method>
    <javadoc>
      <text>* Returns the number of variables for this term.</text>
      <return>the number of variables.</return>
    </javadoc>
    <method type="int" name="size" startLine="99" endLine="101" />
    <javadoc>
      <text>* Returns the variable at the specified index (variables are 
 * lexically ordered).</text>
      <param>index the variable index.</param>
      <return>this term variables at specified position.</return>
      <throws>IndexOutOfBoundsException if  
 * <code>(index < 0) || (index >= size())</code></throws>
    </javadoc>
    <method type="Variable<?>" name="getVariable" startLine="112" endLine="116" />
    <javadoc>
      <text>* Returns the power of the variable at the specified position.</text>
      <param>index the variable index.</param>
      <return>the power of the variable at the specified index.</return>
      <throws>IndexOutOfBoundsException if  
 * <code>(index < 0) || (index >= size())</code></throws>
    </javadoc>
    <method type="int" name="getPower" startLine="126" endLine="130" />
    <javadoc>
      <text>* Returns the power of the specified variable.</text>
      <param>v the variable for which the power is returned.</param>
      <return>the power of the corresponding variable or <code>0</code> if 
 * this term does not hold the specified variable.</return>
    </javadoc>
    <method type="int" name="getPower" startLine="139" endLine="145">
      <scope startLine="140" endLine="143" />
    </method>
    <javadoc>
      <text>* Return the product of this term with the one specified.</text>
      <param>that the term multiplier.</param>
      <return><code>this · that</code></return>
      <throws>IllegalArgumentException if the specified term holds a 
 * variable having the same symbol as one of the variable of
 * this term; but both variables are distinct.</throws>
    </javadoc>
    <method type="Term" name="times" startLine="156" endLine="195">
      <declaration type="int" name="thisSize" />
      <declaration type="int" name="thatSize" />
      <declaration type="Term" name="result" />
      <scope startLine="161" endLine="194">
        <declaration type="Variable<?>" name="left" />
        <declaration type="Variable<?>" name="right" />
        <scope startLine="164" endLine="170" />
        <scope startLine="171" endLine="175" />
        <scope startLine="176" endLine="181" />
        <declaration type="int" name="cmp" />
        <scope startLine="183" endLine="186" />
        <scope startLine="186" endLine="189" />
        <scope startLine="189" endLine="193" />
      </scope>
    </method>
    <javadoc>
      <text>* Return the division of this term with the one specified.</text>
      <param>that the term divisor.</param>
      <return><code>this / that</code></return>
      <throws>UnsupportedOperationException if this division would 
 * result in negative power.</throws>
      <throws>IllegalArgumentException if the specified term holds a 
 * variable having the same symbol as one of the variable of
 * this term; but both variables are distinct.</throws>
    </javadoc>
    <method type="Term" name="divide" startLine="208" endLine="251">
      <declaration type="int" name="thisSize" />
      <declaration type="int" name="thatSize" />
      <declaration type="Term" name="result" />
      <scope startLine="213" endLine="250">
        <declaration type="Variable<?>" name="left" />
        <declaration type="Variable<?>" name="right" />
        <scope startLine="216" endLine="221" />
        <scope startLine="222" endLine="226" />
        <scope startLine="227" endLine="237">
          <declaration type="int" name="power" />
          <scope startLine="232" endLine="235" />
        </scope>
        <declaration type="int" name="cmp" />
        <scope startLine="239" endLine="242" />
        <scope startLine="242" endLine="245" />
        <scope startLine="245" endLine="249" />
      </scope>
    </method>
    <javadoc>
      <text>* Indicates if this term is equal to the object specified.</text>
      <param>obj the object to compare for equality.</param>
      <return><code>true</code> if this term and the specified object are
 * considered equal; <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="260" endLine="274">
      <declaration type="Term" name="that" />
      <scope startLine="268" endLine="272" />
    </method>
    <javadoc>
      <text>* Returns a hash code for this term.</text>
      <return>a hash code value for this object.</return>
    </javadoc>
    <method type="int" name="hashCode" startLine="281" endLine="287">
      <declaration type="int" name="h" />
      <scope startLine="283" endLine="285" />
    </method>
    <javadoc>
      <text>* Returns the text representation of this term as a 
 * <code>java.lang.String</code>.</text>
      <return><code>toText().toString()</code></return>
    </javadoc>
    <method type="String" name="toString" startLine="295" endLine="297" />
    <javadoc>
      <text>* Returns the text representation of this term.</text>
    </javadoc>
    <method type="Text" name="toText" startLine="302" endLine="321">
      <declaration type="TextBuilder" name="tb" />
      <scope startLine="304" endLine="319">
        <declaration type="int" name="power" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns an entierely new copy of this term {@link javolution.context.AllocatorContext allocated} 
 * by the calling thread (possibly on the stack).</text>
      <return>an identical and independant copy of this term.</return>
    </javadoc>
    <method type="Term" name="copy" startLine="330" endLine="338">
      <declaration type="Term" name="term" />
      <scope startLine="333" endLine="336" />
    </method>
    <javadoc>
      <text>* Compares this term with the one specified for order.</text>
      <param>that the term to be compared to.</param>
      <return>a negative integer, zero, or a positive integer as this term
 * is less than, equal to, or greater than the specified term.</return>
    </javadoc>
    <method type="int" name="compareTo" startLine="347" endLine="359">
      <declaration type="int" name="n" />
      <scope startLine="349" endLine="357">
        <declaration type="int" name="cmp" />
      </scope>
    </method>
    <javadoc>
      <text>* Evaluates this term by replacing its {@link Variablevariables} by their current (context-local) values.</text>
      <return>the evaluation of this term or <code>null</code> if ONE.</return>
      <throws>FunctionException if any of this term's variable is not set.</throws>
    </javadoc>
    <method type="Ring" name="evaluate" startLine="369" endLine="387">
      <declaration type="Ring" name="result" />
      <scope startLine="371" endLine="385">
        <declaration type="Ring" name="pow2" />
        <declaration type="int" name="n" />
        <scope startLine="377" endLine="384">
          <scope startLine="378" endLine="381" />
        </scope>
        <comment>Iteration.</comment>
      </scope>
    </method>
    <declaration type="long" name="serialVersionUID" />
  </class>
</source>
