<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.function">
  <import name="javolution.lang.Reference" />
  <import name="javolution.context.LocalContext" />
  <interface name="Variable" startLine="14">
    <implements name="Reference<X>" />
    <javadoc>
      <text>* <p> This interface represents a symbol on whose value a {@link Function}depends. If the functions is not shared between multiple-threads the 
 * simple {@link Variable.Local} implementation can be used. 
 * For global functions (functions used concurrently by multiple threads)
 * the {@link Variable.Global} implementation with {@link javolution.context.LocalContext context-local} settings is 
 * recommended.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.0, February 13, 2006</version>
      <see>Function#evaluate</see>
    </javadoc>
    <method name="getSymbol" type="String" startLine="29" endLine="34" />
    <javadoc>
      <text>* Returns the symbol for this variable.</text>
      <return>this variable's symbol.</return>
    </javadoc>
    <class name="Local" startLine="36">
      <implements name="Variable<X>" />
      <javadoc>
        <text>* This class represents a simple {@link Variable} implementation for 
 * functions not shared between threads (non static).
 * Functions shared between multiple-threads should use a different 
 * type of variable such as {@link Variable.Global}.</text>
      </javadoc>
      <javadoc>
        <text>* Holds the reference value.</text>
      </javadoc>
      <declaration type="X" name="_value" />
      <javadoc>
        <text>* Holds the variable symbol.</text>
      </javadoc>
      <declaration type="String" name="_symbol" />
      <javadoc>
        <text>* Creates a new local variable with a unique symbol.</text>
        <param>symbol the variable symbol.</param>
      </javadoc>
      <method type="constructor" name="Local" startLine="59" endLine="61" />
      <method type="String" name="getSymbol" startLine="63" endLine="65" />
      <method type="X" name="get" startLine="67" endLine="69" />
      <method type="void" name="set" startLine="71" endLine="73" />
      <class name="Global" startLine="76">
        <implements name="Variable<X>" />
        <javadoc>
          <text>* This class represents a simple {@link Variable} implementation with {@link javolution.context.LocalContext context-local} values.
 * Instances of this class can be set independently by multiple-threads 
 * as long as each concurrent thread executes within a {@link javolution.context.LocalContext LocalContext}. For example:[code]
 * public abstract class Engine  {
 * public static final Variable.Global<Amount<AngularVelocity>> RPM
 * = new Variable.Global<Amount<AngularVelocity>>("rpm");
 * public abstract Function<Amount<AngularVelocity>, Amount<Torque>> getTorque();    
 * }
 * ...
 * LocalContext.enter(); 
 * try {
 * RPM.set(rpm);
 * Amount<Torque> torque = myEngine.getTorque().evaluate();
 * } finally {
 * LocalContext.exit();
 * }[/code]
 * It should be noted that parameterized evaluations are performed within
 * a local context. Therefore, the example
 * above could also be rewritten:[code]
 * Amount<Torque> torque = myEngine.getTorque().evaluate(rpm);
 * [/code]</text>
        </javadoc>
        <javadoc>
          <text>* Holds the reference value.</text>
        </javadoc>
        <declaration type="LocalContext.Reference<X>" name="_value" />
        <javadoc>
          <text>* Holds the variable symbol.</text>
        </javadoc>
        <declaration type="String" name="_symbol" />
        <javadoc>
          <text>* Creates a new global variable with a unique symbol.</text>
          <param>symbol the variable symbol.</param>
        </javadoc>
        <method type="constructor" name="Global" startLine="118" endLine="120" />
        <method type="String" name="getSymbol" startLine="122" endLine="124" />
        <method type="X" name="get" startLine="126" endLine="128" />
        <method type="void" name="set" startLine="130" endLine="132" />
      </class>
    </class>
  </interface>
</source>
