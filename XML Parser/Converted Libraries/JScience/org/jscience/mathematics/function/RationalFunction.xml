<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.mathematics.function">
  <import name="java.util.List" />
  <import name="org.jscience.mathematics.structure.Field" />
  <import name="javolution.context.ObjectFactory" />
  <import name="javolution.text.Text" />
  <import name="javolution.text.TextBuilder" />
  <class name="RationalFunction" extends="Function<F,F>" startLine="18">
    <implements name="Field<RationalFunction<F>>" />
    <javadoc>
      <text>* This class represents the quotient of two {@link Polynomial}, 
 * it is also a {@link Field field} (invertible).</text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.1, April 1, 2006</version>
    </javadoc>
    <javadoc>
      <text>* Holds the dividend.</text>
    </javadoc>
    <declaration type="Polynomial<F>" name="_dividend" />
    <javadoc>
      <text>* Holds the divisor.</text>
    </javadoc>
    <declaration type="Polynomial<F>" name="_divisor" />
    <javadoc>
      <text>* Default constructor.</text>
    </javadoc>
    <method type="constructor" name="RationalFunction" startLine="44" endLine="45" />
    <javadoc>
      <text>* Returns the dividend of this rational function.</text>
      <return>this rational function dividend.</return>
    </javadoc>
    <method type="Polynomial<F>" name="getDividend" startLine="52" endLine="54" />
    <javadoc>
      <text>* Returns the divisor of this rational function.</text>
      <return>this rational function divisor.</return>
    </javadoc>
    <method type="Polynomial<F>" name="getDivisor" startLine="61" endLine="63" />
    <javadoc>
      <text>* Returns the rational function from the specified dividend and divisor.</text>
      <param>dividend the dividend value.</param>
      <param>divisor the divisor value.</param>
      <return><code>dividend / divisor</code></return>
    </javadoc>
    <method type="RationalFunction<F>" name="valueOf" startLine="74" endLine="79">
      <declaration type="RationalFunction<F>" name="rf" />
    </method>
    <method type="RationalFunction" name="create" startLine="84" endLine="86" />
    <method type="void" name="cleanup" startLine="89" endLine="92" />
    <declaration type="ObjectFactory<RationalFunction>" name="FACTORY" />
    <javadoc>
      <text>* Returns the sum of two rational functions.</text>
      <param>that the rational function being added.</param>
      <return><code>this + that</code></return>
    </javadoc>
    <method type="RationalFunction<F>" name="plus" startLine="101" endLine="105" />
    <javadoc>
      <text>* Returns the opposite of this rational function.</text>
      <return><code>- this</code></return>
    </javadoc>
    <method type="RationalFunction<F>" name="opposite" startLine="112" endLine="114" />
    <javadoc>
      <text>* Returns the difference of two rational functions.</text>
      <param>that the rational function being subtracted.</param>
      <return><code>this - that</code></return>
    </javadoc>
    <method type="RationalFunction<F>" name="minus" startLine="122" endLine="124" />
    <javadoc>
      <text>* Returns the product of two rational functions.</text>
      <param>that the rational function multiplier.</param>
      <return><code>this Â· that</code></return>
    </javadoc>
    <method type="RationalFunction<F>" name="times" startLine="132" endLine="135" />
    <javadoc>
      <text>* Returns the inverse of this rational function.</text>
      <return><code>1 / this</code></return>
    </javadoc>
    <method type="RationalFunction<F>" name="inverse" startLine="142" endLine="144" />
    <javadoc>
      <text>* Returns the quotient of two rational functions.</text>
      <param>that the rational function divisor.</param>
      <return><code>this / that</code></return>
    </javadoc>
    <method type="RationalFunction<F>" name="divide" startLine="152" endLine="154" />
    <method type="List<Variable<F>>" name="getVariables" startLine="158" endLine="160" />
    <method type="F" name="evaluate" startLine="164" endLine="166" />
    <method type="Text" name="toText" startLine="169" endLine="177">
      <declaration type="TextBuilder" name="tb" />
    </method>
    <method type="boolean" name="equals" startLine="180" endLine="188">
      <scope startLine="181" endLine="185">
        <declaration type="RationalFunction<?>" name="that" />
      </scope>
      <scope startLine="185" endLine="187" />
    </method>
    <method type="int" name="hashCode" startLine="191" endLine="193" />
    <method type="RationalFunction<F>" name="differentiate" startLine="200" endLine="204" />
    <method type="Function<F,F>" name="plus" startLine="208" endLine="211" />
    <method type="Function<F,F>" name="minus" startLine="215" endLine="218" />
    <method type="Function<F,F>" name="times" startLine="222" endLine="225" />
    <method type="Function<F,F>" name="divide" startLine="229" endLine="232" />
    <method type="RationalFunction<F>" name="pow" startLine="236" endLine="238" />
    <javadoc>
      <text>* Returns a copy of this rational function. {@link javolution.context.AllocatorContext allocated} 
 * by the calling thread (possibly on the stack).</text>
      <return>an identical and independant copy of this rational function.</return>
    </javadoc>
    <method type="RationalFunction<F>" name="copy" startLine="248" endLine="250" />
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Holds the factory for rational functions.</text>
    </javadoc>
    <comment />
    <comment>Overrides parent method potentially returning rational functions</comment>
    <comment />
  </class>
</source>
