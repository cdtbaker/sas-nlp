<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.physics.model">
  <import name="javax.measure.converter.RationalConverter" />
  <import name="javax.measure.converter.UnitConverter" />
  <import name="javax.measure.unit.BaseUnit" />
  <import name="javax.measure.unit.Dimension" />
  <import name="javax.measure.unit.SI" />
  <class name="NaturalModel" extends="PhysicalModel" startLine="17">
    <javadoc>
      <text>* This class represents the natural model.</text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.0, February 13, 2006</version>
      <see><a href="http://en.wikipedia.org/wiki/Planck_units">
 *      Wikipedia: Planck units</a></see>
    </javadoc>
    <javadoc>
      <text>* Holds the single instance of this class.</text>
    </javadoc>
    <declaration type="NaturalModel" name="INSTANCE" />
    <javadoc>
      <text>* Holds the meter to time transform.</text>
    </javadoc>
    <declaration type="RationalConverter" name="METRE_TO_TIME" />
    <javadoc>
      <text>* Selects the relativistic model as the current model.</text>
    </javadoc>
    <method type="void" name="select" startLine="41" endLine="43" />
    <method type="Dimension" name="getDimension" startLine="46" endLine="49" />
    <method type="UnitConverter" name="getTransform" startLine="52" endLine="55" />
    <comment>Implements Dimension.Model</comment>
    <comment>Implements Dimension.Model</comment>
    <comment>H_BAR (SECOND * JOULE = SECOND * (KILOGRAM / C^2 )) = 1</comment>
    <comment>SPEED_OF_LIGHT (METRE / SECOND) = 1</comment>
    <comment>BOLTZMANN (JOULE / KELVIN = (KILOGRAM / C^2 ) / KELVIN) = 1</comment>
    <comment>MAGNETIC CONSTANT (NEWTON / AMPERE^2) = 1</comment>
    <comment>GRAVITATIONAL CONSTANT (METRE^3 / KILOGRAM / SECOND^2) = 1</comment>
    <comment>SI.SECOND.setDimension(NONE, new MultiplyConverter((c * c)</comment>
    <comment>* MathLib.sqrt(c / (hBar * G))));</comment>
    <comment>SI.METRE.setDimension(NONE, new MultiplyConverter(c</comment>
    <comment>* MathLib.sqrt(c / (hBar * G))));</comment>
    <comment>SI.KILOGRAM.setDimension(NONE, new MultiplyConverter(MathLib.sqrt(G</comment>
    <comment>/ (hBar * c))));</comment>
    <comment>SI.KELVIN.setDimension(NONE, new MultiplyConverter(k</comment>
    <comment>* MathLib.sqrt(G / (hBar * c)) / (c * c)));</comment>
    <comment>SI.AMPERE.setDimension(NONE, new MultiplyConverter(MathLib.sqrt(Âµ0 * G)</comment>
    <comment>/ (c * c)));</comment>
    <comment>SI.MOLE.setDimension(AMOUNT_OF_SUBSTANCE, Converter.IDENTITY);</comment>
    <comment>SI.CANDELA.setDimension(LUMINOUS_INTENSITY, Converter.IDENTITY);</comment>
  </class>
</source>
