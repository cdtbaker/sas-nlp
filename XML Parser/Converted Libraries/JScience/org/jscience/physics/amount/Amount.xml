<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.physics.amount">
  <import name="java.io.Serializable" />
  <import name="javolution.context.ObjectFactory" />
  <import name="javolution.lang.Immutable" />
  <import name="javolution.lang.MathLib" />
  <import name="javolution.text.Text" />
  <import name="javolution.util.FastComparator" />
  <import name="javolution.util.FastMap" />
  <import name="javolution.xml.XMLFormat" />
  <import name="javolution.xml.stream.XMLStreamException" />
  <import name="org.jscience.mathematics.structure.Field" />
  <import name="javax.measure.converter.ConversionException" />
  <import name="javax.measure.converter.RationalConverter" />
  <import name="javax.measure.converter.UnitConverter" />
  <import name="javax.measure.quantity.Dimensionless" />
  <import name="javax.measure.quantity.Quantity" />
  <import name="javax.measure.unit.Unit" />
  <import name="javax.measure.Measurable" />
  <import name="javax.realtime.MemoryArea" />
  <class name="Amount" startLine="33">
    <implements name="Measurable<Q>" />
    <implements name="Field<Amount<?>>" />
    <implements name="Serializable" />
    <implements name="Immutable" />
    <javadoc>
      <text>* <p> This class represents a determinate or estimated amount for which 
 * operations such as addition, subtraction, multiplication and division
 * can be performed (it implements the {@link Field} interface).</p>
 * <p> The nature of an amount can be deduced from its parameterization 
 * (compile time) or its {@link #getUnit() unit} (run time).
 * Its precision is given by its {@link #getAbsoluteError() error}.</p>
 * <p> Amounts can be {@link #isExact() exact}, in which case they can be
 * expressed as an exact <code>long</code> integer in the amount unit.
 * The framework tries to keep amount exact as much as possible.
 * For example:[code]
 * Amount<Length> m = Amount.valueOf(33, FOOT).divide(11).times(2);
 * System.out.println(m);
 * System.out.println(m.isExact() ? "exact" : "inexact");
 * System.out.println(m.getExactValue());
 * > 6 ft
 * > exact
 * > 6[/code] 
 * </p>
 * <p> Errors (including numeric errors) are calculated using numeric intervals.
 * It is possible to resolve systems of linear equations involving {@link org.jscience.mathematics.vector.Matrix matrices}, even if the 
 * system is close to singularity; in which case the error associated with
 * some (or all) components of the solution may be large.</p>
 * <p> By default, non-exact amounts are shown using the plus/minus  
 * character ('±') (see {@link AmountFormat}). For example, 
 * <code>"(2.0 ± 0.001) km/s"</code> represents a velocity of 
 * 2 km/s with an absolute error of ± 1 m/s. Exact amount use an
 * integer notation (no decimal point, e.g. <code>"2000 m"</code>).</p>
 * <p> Operations between different amounts may or may not be authorized 
 * based upon the current {@link org.jscience.physics.model.PhysicalModelPhysicalModel}. For example, adding <code>Amount&lt;Length&gt; and 
 * <code>Amount&lt;Duration&gt; is not allowed by the {@link org.jscience.physics.model.StandardModel StandardModel}, 
 * but is authorized with the {@link org.jscience.physics.model.RelativisticModel RelativisticModel}.</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>4.0, June 4, 2007</version>
      <see><a href="http://en.wikipedia.org/wiki/Measuring">
 *       Wikipedia: Measuring</a></see>
    </javadoc>
    <javadoc>
      <text>* Holds a dimensionless measure of zero (exact).</text>
    </javadoc>
    <declaration type="Amount<Dimensionless>" name="ZERO" />
    <scope startLine="92" endLine="98" />
    <javadoc>
      <text>* Holds a dimensionless measure of one (exact).</text>
    </javadoc>
    <declaration type="Amount<Dimensionless>" name="ONE" />
    <scope startLine="104" endLine="110" />
    <javadoc>
      <text>* Holds the default XML representation for measures.
 * This representation consists of a <code>value</code>, 
 * an <code>unit</code> and an optional <code>error</code> attribute 
 * when the measure is not exact.
 * The unit attribute determinates the measurement type. For example:<pre>
 * &lt;Amount value="12" unit="µA"/&gt;</pre>
 * represents an electric current measurement.</text>
    </javadoc>
    <method type="Amount" name="newInstance" startLine="126" endLine="137">
      <declaration type="Unit" name="unit" />
      <declaration type="Amount<?>" name="m" />
      <declaration type="double" name="estimatedValue" />
      <declaration type="double" name="error" />
      <comment>Exact.</comment>
    </method>
    <method type="void" name="read" startLine="140" endLine="142">
      <comment>Nothing to do.</comment>
    </method>
    <method type="void" name="write" startLine="145" endLine="153">
      <scope startLine="146" endLine="148" />
      <scope startLine="148" endLine="151" />
    </method>
    <declaration type="XMLFormat<Amount>" name="XML" />
    <javadoc>
      <text>* Returns the exact measure corresponding to the value stated in the 
 * specified unit.</text>
      <param>value the exact value stated in the specified unit.</param>
      <param>unit the unit in which the value is stated.</param>
      <return>the corresponding measure object.</return>
    </javadoc>
    <method type="Amount<Q>" name="valueOf" startLine="165" endLine="168">
      <declaration type="Amount<Q>" name="m" />
    </method>
    <javadoc>
      <text>* Returns the measure corresponding to an approximate value 
 * (<code>double</code>) stated in the specified unit; 
 * the precision of the measure is assumed to be the 
 * <code>double</code> precision (64 bits IEEE 754 format).</text>
      <param>value the estimated value (± LSB) stated in the specified unit.</param>
      <param>unit the unit in which the value is stated.</param>
      <return>the corresponding measure object.</return>
    </javadoc>
    <method type="Amount<Q>" name="valueOf" startLine="181" endLine="189">
      <declaration type="Amount<Q>" name="m" />
      <declaration type="double" name="valInc" />
      <declaration type="double" name="valDec" />
    </method>
    <javadoc>
      <text>* Returns the measure corresponding to the specified approximate value 
 * and measurement error, both stated in the specified unit.</text>
      <param>value the estimated amount (± error) stated in the specified unit.</param>
      <param>error the measurement error (absolute).</param>
      <param>unit the unit in which the amount and the error are stated.</param>
      <return>the corresponding measure object.</return>
      <throws>IllegalArgumentException if <code>error &lt; 0.0</code></throws>
    </javadoc>
    <method type="Amount<Q>" name="valueOf" startLine="202" endLine="213">
      <declaration type="Amount<Q>" name="m" />
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
    </method>
    <javadoc>
      <text>* Returns the measure corresponding to the specified interval stated 
 * in the specified unit.</text>
      <param>minimum the lower bound for the measure value.</param>
      <param>maximum the upper bound for the measure value.</param>
      <param>unit the unit for both the minimum and maximum values.</param>
      <return>the corresponding measure object.</return>
      <throws>IllegalArgumentException if <code>minimum &gt; maximum</code></throws>
    </javadoc>
    <method type="Amount<Q>" name="rangeOf" startLine="226" endLine="235">
      <declaration type="Amount<Q>" name="m" />
    </method>
    <javadoc>
      <text>* Returns the measure represented by the specified character sequence.</text>
      <param>csq the character sequence.</param>
      <return><code>AmountFormat.getInstance().parse(csq)</code></return>
    </javadoc>
    <method type="Amount<?>" name="valueOf" startLine="243" endLine="245" />
    <javadoc>
      <text>* Indicates if this measure is exact.</text>
    </javadoc>
    <declaration type="boolean" name="_isExact" />
    <javadoc>
      <text>* Holds the exact value (when exact) stated in this measure unit.</text>
    </javadoc>
    <declaration type="long" name="_exactValue" />
    <javadoc>
      <text>* Holds the minimum value stated in this measure unit.
 * For inexact measures: _minimum < _maximum</text>
    </javadoc>
    <declaration type="double" name="_minimum" />
    <javadoc>
      <text>* Holds the maximum value stated in this measure unit.
 * For inexact measures: _maximum > _minimum</text>
    </javadoc>
    <declaration type="double" name="_maximum" />
    <javadoc>
      <text>* Holds this measure unit.</text>
    </javadoc>
    <declaration type="Unit<Q>" name="_unit" />
    <javadoc>
      <text>* Indicates if this measure amount is exact. An exact amount is 
 * guarantee exact only when stated in this measure unit
 * (e.g. <code>this.longValue()</code>); stating the amount
 * in any other unit may introduce conversion errors.</text>
      <return><code>true</code> if this measure is exact;
 * <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="isExact" startLine="283" endLine="285" />
    <javadoc>
      <text>* Returns the unit in which the {@link #getEstimatedValue()estimated value} and {@link #getAbsoluteError() absolute error}are stated.</text>
      <return>the measure unit.</return>
    </javadoc>
    <method type="Unit<Q>" name="getUnit" startLine="294" endLine="296" />
    <javadoc>
      <text>* Returns the exact value for this measure stated in this measure{@link #getUnit unit}.</text>
      <return>the exact measure value (<code>long</code>) stated 
 * in this measure's {@link #getUnit unit}</return>
      <throws>AmountException if this measure is not {@link #isExact()}</throws>
    </javadoc>
    <method type="long" name="getExactValue" startLine="306" endLine="311" />
    <javadoc>
      <text>* Returns the estimated value for this measure stated in this measure{@link #getUnit unit}.</text>
      <return>the median value of the measure interval.</return>
    </javadoc>
    <method type="double" name="getEstimatedValue" startLine="319" endLine="321" />
    <javadoc>
      <text>* Returns the lower bound interval value for this measure stated in 
 * this measure unit.</text>
      <return>the minimum value.</return>
    </javadoc>
    <method type="double" name="getMinimumValue" startLine="329" endLine="331" />
    <javadoc>
      <text>* Returns the upper bound interval value for this measure stated in 
 * this measure unit.</text>
      <return>the maximum value.</return>
    </javadoc>
    <method type="double" name="getMaximumValue" startLine="339" endLine="341" />
    <javadoc>
      <text>* Returns the value by which the{@link #getEstimatedValue() estimated 
 * value} may differ from the true value (all stated in base units).</text>
      <return>the absolute error stated in base units.</return>
    </javadoc>
    <method type="double" name="getAbsoluteError" startLine="349" endLine="351" />
    <javadoc>
      <text>* Returns the percentage by which the estimated amount may differ
 * from the true amount.</text>
      <return>the relative error.</return>
    </javadoc>
    <method type="double" name="getRelativeError" startLine="359" endLine="361" />
    <javadoc>
      <text>* Returns the measure equivalent to this measure but stated in the 
 * specified unit. The returned measure may not be exact even if this 
 * measure is exact due to conversion errors.</text>
      <param>unit the unit of the measure to be returned.</param>
      <return>a measure equivalent to this measure but stated in the 
 * specified unit.</return>
      <throws>ConversionException if the current model does not allows for
 * conversion to the specified unit.</throws>
    </javadoc>
    <method type="Amount<R>" name="to" startLine="375" endLine="397">
      <declaration type="UnitConverter" name="cvtr" />
      <scope startLine="379" endLine="383">
        <declaration type="Amount" name="result" />
        <comment>No conversion necessary.</comment>
      </scope>
      <scope startLine="384" endLine="389">
        <declaration type="RationalConverter" name="rc" />
        <declaration type="Amount" name="result" />
        <comment>Exact conversion.</comment>
      </scope>
      <declaration type="Amount<R>" name="result" />
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
    </method>
    <javadoc>
      <text>* Returns the opposite of this measure.</text>
      <return><code>-this</code>.</return>
    </javadoc>
    <method type="Amount<Q>" name="opposite" startLine="404" endLine="412">
      <declaration type="Amount<Q>" name="m" />
    </method>
    <javadoc>
      <text>* Returns the sum of this measure with the one specified.</text>
      <param>that the measure to be added.</param>
      <return><code>this + that</code>.</return>
      <throws>ConversionException if the current model does not allows for
 * these quantities to be added.</throws>
    </javadoc>
    <method type="Amount<Q>" name="plus" startLine="423" endLine="439">
      <declaration type="Amount" name="thatToUnit" />
      <declaration type="Amount<Q>" name="m" />
      <scope startLine="426" endLine="432">
        <declaration type="long" name="sumLong" />
        <declaration type="double" name="sumDouble" />
      </scope>
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
    </method>
    <javadoc>
      <text>* Returns the difference of this measure with the one specified.</text>
      <param>that the measure to be subtracted.</param>
      <return><code>this - that</code>.</return>
      <throws>ConversionException if the current model does not allows for
 * these quantities to be subtracted.</throws>
    </javadoc>
    <method type="Amount<Q>" name="minus" startLine="450" endLine="466">
      <declaration type="Amount" name="thatToUnit" />
      <declaration type="Amount<Q>" name="m" />
      <scope startLine="453" endLine="459">
        <declaration type="long" name="diffLong" />
        <declaration type="double" name="diffDouble" />
      </scope>
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
    </method>
    <javadoc>
      <text>* Returns this measure scaled by the specified exact factor 
 * (dimensionless).</text>
      <param>factor the scaling factor.</param>
      <return><code>this · factor</code>.</return>
    </javadoc>
    <method type="Amount<Q>" name="times" startLine="475" endLine="487">
      <declaration type="Amount<Q>" name="m" />
      <scope startLine="477" endLine="482">
        <declaration type="long" name="productLong" />
        <declaration type="double" name="productDouble" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns this measure scaled by the specified approximate factor
 * (dimensionless).</text>
      <param>factor the scaling factor.</param>
      <return><code>this · factor</code>.</return>
    </javadoc>
    <method type="Amount<Q>" name="times" startLine="496" endLine="504">
      <declaration type="Amount<Q>" name="m" />
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
    </method>
    <javadoc>
      <text>* Returns the product of this measure with the one specified.</text>
      <param>that the measure multiplier.</param>
      <return><code>this · that</code>.</return>
    </javadoc>
    <method type="Amount<? extends Quantity>" name="times" startLine="513" endLine="562">
      <declaration type="Unit<?>" name="unit" />
      <scope startLine="515" endLine="519">
        <declaration type="Amount" name="m" />
      </scope>
      <declaration type="Amount<Q>" name="m" />
      <declaration type="double" name="min" />
      <scope startLine="522" endLine="533">
        <scope startLine="523" endLine="526" />
        <scope startLine="526" endLine="529" />
        <scope startLine="529" endLine="532" />
      </scope>
      <scope startLine="533" endLine="544">
        <scope startLine="534" endLine="537" />
        <scope startLine="537" endLine="540" />
        <scope startLine="540" endLine="543" />
      </scope>
      <scope startLine="544" endLine="557">
        <scope startLine="545" endLine="548" />
        <scope startLine="548" endLine="551" />
        <scope startLine="551" endLine="556" />
        <comment>Both around zero.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the multiplicative inverse of this measure.
 * If this measure is possibly zero, then the result is unbounded
 * (]-infinity, +infinity[).</text>
      <return><code>1 / this</code>.</return>
    </javadoc>
    <method type="Amount<? extends Quantity>" name="inverse" startLine="571" endLine="588">
      <declaration type="Amount<? extends Quantity>" name="m" />
      <scope startLine="573" endLine="576">
        <comment>Only one exact inverse: one</comment>
      </scope>
      <scope startLine="578" endLine="582">
        <comment>Encompass zero.</comment>
      </scope>
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
    </method>
    <javadoc>
      <text>* Returns this measure divided by the specified exact divisor
 * (dimensionless).</text>
      <param>divisor the exact divisor.</param>
      <return><code>this / divisor</code>.</return>
      <throws>ArithmeticException if this measure is exact and the 
 * specified divisor is zero.</throws>
    </javadoc>
    <method type="Amount<Q>" name="divide" startLine="599" endLine="613">
      <declaration type="Amount<Q>" name="m" />
      <scope startLine="601" endLine="606">
        <declaration type="long" name="quotientLong" />
        <declaration type="double" name="quotientDouble" />
      </scope>
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
    </method>
    <javadoc>
      <text>* Returns this measure divided by the specified approximate divisor
 * (dimensionless).</text>
      <param>divisor the approximated divisor.</param>
      <return><code>this / divisor</code>.</return>
    </javadoc>
    <method type="Amount<Q>" name="divide" startLine="622" endLine="630">
      <declaration type="Amount<Q>" name="m" />
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
    </method>
    <javadoc>
      <text>* Returns this measure divided by the one specified.</text>
      <param>that the measure divisor.</param>
      <return><code>this / that</code>.</return>
    </javadoc>
    <method type="Amount<? extends Quantity>" name="divide" startLine="639" endLine="647">
      <scope startLine="640" endLine="645">
        <declaration type="Amount" name="m" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the absolute value of this measure.</text>
      <return><code>|this|</code>.</return>
    </javadoc>
    <method type="Amount<Q>" name="abs" startLine="654" endLine="657" />
    <javadoc>
      <text>* Returns the square root of this measure.</text>
      <return><code>sqrt(this)</code></return>
    </javadoc>
    <method type="Amount<? extends Quantity>" name="sqrt" startLine="665" endLine="679">
      <declaration type="Amount<Q>" name="m" />
      <scope startLine="667" endLine="672">
        <declaration type="double" name="sqrtDouble" />
        <declaration type="long" name="sqrtLong" />
      </scope>
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
    </method>
    <javadoc>
      <text>* Returns the given root of this measure.</text>
      <param>n the root's order (n != 0).</param>
      <return>the result of taking the given root of this quantity.</return>
      <throws>ArithmeticException if <code>n == 0</code>.</throws>
    </javadoc>
    <method type="Amount<? extends Quantity>" name="root" startLine="688" endLine="712">
      <declaration type="Amount<Q>" name="m" />
      <scope startLine="696" endLine="705">
        <declaration type="double" name="rootDouble" />
        <declaration type="long" name="rootLong" />
        <declaration type="long" name="thisLong" />
        <scope startLine="700" endLine="702" />
      </scope>
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
    </method>
    <javadoc>
      <text>* Returns this measure raised at the specified exponent.</text>
      <param>exp the exponent.</param>
      <return><code>this<sup>exp</sup></code></return>
    </javadoc>
    <method type="Amount<? extends Quantity>" name="pow" startLine="720" endLine="735">
      <declaration type="Amount<?>" name="pow2" />
      <declaration type="Amount<?>" name="result" />
      <scope startLine="727" endLine="733">
        <scope startLine="728" endLine="730" />
        <comment>Iteration.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Compares this measure with the specified measurable object.</text>
      <param>that the measure to compare with.</param>
      <return>a negative integer, zero, or a positive integer as this measure
 * is less than, equal to, or greater than that measurable.</return>
      <throws>ConversionException if the current model does not allows for
 * these measure to be compared.</throws>
    </javadoc>
    <method type="int" name="compareTo" startLine="747" endLine="750">
      <declaration type="double" name="thatValue" />
    </method>
    <javadoc>
      <text>* Compares this measure against the specified object for strict 
 * equality (same value interval and same units).</text>
      <param>that the object to compare with.</param>
      <return><code>true</code> if this measure is identical to that
 * measure; <code>false</code> otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="760" endLine="777">
      <declaration type="Amount<?>" name="m" />
    </method>
    <javadoc>
      <text>* Returns the hash code for this measure.</text>
      <return>the hash code value.</return>
    </javadoc>
    <method type="int" name="hashCode" startLine="784" endLine="790">
      <declaration type="int" name="h" />
    </method>
    <javadoc>
      <text>* Indicates if this measure approximates that measure.
 * Measures are considered approximately equals if their value intervals
 * overlaps. It should be noted that less accurate measurements are 
 * more likely to be approximately equals. It is therefore recommended
 * to ensure that the measurement error is not too large before testing
 * for approximate equality.</text>
      <return><code>this ≅ that</code></return>
    </javadoc>
    <method type="boolean" name="approximates" startLine="803" endLine="807">
      <declaration type="Amount" name="thatToUnit" />
    </method>
    <javadoc>
      <text>* Indicates if this measure is ordered before that measure
 * (independently of the measure unit).</text>
      <return><code>this.compareTo(that) < 0</code>.</return>
    </javadoc>
    <method type="boolean" name="isLessThan" startLine="815" endLine="817" />
    <javadoc>
      <text>* Indicates if this measure is ordered after that measure
 * (independently of the measure unit).</text>
      <return><code>this.compareTo(that) > 0</code>.</return>
    </javadoc>
    <method type="boolean" name="isGreaterThan" startLine="825" endLine="827" />
    <javadoc>
      <text>* Compares this measure with that measure ignoring the sign.</text>
      <return><code>|this| > |that|</code></return>
    </javadoc>
    <method type="boolean" name="isLargerThan" startLine="834" endLine="836" />
    <javadoc>
      <text>* Returns the text representation of this measure.</text>
      <return><code>AmountFormat.getInstance().format(this)</code></return>
    </javadoc>
    <method type="Text" name="toText" startLine="843" endLine="845" />
    <javadoc>
      <text>* Returns the text representation of this amount as a 
 * <code>java.lang.String</code>.</text>
      <return><code>toText().toString()</code></return>
    </javadoc>
    <method type="String" name="toString" startLine="853" endLine="855" />
    <method type="double" name="doubleValue" startLine="858" endLine="861" />
    <method type="long" name="longValue" startLine="864" endLine="874">
      <declaration type="double" name="doubleValue" />
    </method>
    <declaration type="FastMap<Unit<?>,FastMap<Unit<?>,Unit<?>>>" name="MULT_LOOKUP" />
    <declaration type="FastMap<Unit<?>,Unit<?>>" name="INV_LOOKUP" />
    <declaration type="FastMap<Unit<?>,FastMap<Unit<?>,UnitConverter>>" name="CVTR_LOOKUP" />
    <method type="Unit<?>" name="productOf" startLine="889" endLine="897">
      <declaration type="FastMap<Unit<?>,Unit<?>>" name="leftTable" />
      <declaration type="Unit<?>" name="result" />
    </method>
    <method type="Unit<?>" name="calculateProductOf" startLine="899" endLine="917">
      <declaration type="MemoryArea" name="memoryArea" />
      <method type="void" name="run" startLine="902" endLine="914">
        <declaration type="FastMap<Unit<?>,Unit<?>>" name="leftTable" />
        <scope startLine="904" endLine="908" />
        <declaration type="Unit<?>" name="result" />
        <scope startLine="910" endLine="913" />
      </method>
    </method>
    <method type="Unit<?>" name="inverseOf" startLine="919" endLine="924">
      <declaration type="Unit<?>" name="inverse" />
    </method>
    <method type="Unit<?>" name="calculateInverseOf" startLine="926" endLine="938">
      <declaration type="MemoryArea" name="memoryArea" />
      <method type="void" name="run" startLine="929" endLine="935">
        <declaration type="Unit<?>" name="inverse" />
        <scope startLine="931" endLine="934" />
      </method>
    </method>
    <method type="UnitConverter" name="converterOf" startLine="940" endLine="948">
      <declaration type="FastMap<Unit<?>,UnitConverter>" name="leftTable" />
      <declaration type="UnitConverter" name="result" />
    </method>
    <method type="UnitConverter" name="calculateConverterOf" startLine="951" endLine="973">
      <declaration type="MemoryArea" name="memoryArea" />
      <method type="void" name="run" startLine="954" endLine="970">
        <declaration type="FastMap<Unit<?>,UnitConverter>" name="leftTable" />
        <scope startLine="956" endLine="962">
          <scope startLine="959" endLine="961" />
        </scope>
        <declaration type="UnitConverter" name="result" />
        <scope startLine="964" endLine="969">
          <scope startLine="966" endLine="968" />
        </scope>
      </method>
    </method>
    <method type="Amount<Q>" name="copy" startLine="975" endLine="982">
      <declaration type="Amount<Q>" name="estimate" />
    </method>
    <method type="Amount<Q>" name="newInstance" startLine="989" endLine="993">
      <declaration type="Amount<Q>" name="measure" />
    </method>
    <method type="Amount<Q>" name="copyOf" startLine="996" endLine="1004">
      <declaration type="Amount<Q>" name="measure" />
    </method>
    <method type="Amount" name="create" startLine="1010" endLine="1012" />
    <declaration type="ObjectFactory<Amount>" name="FACTORY" />
    <method type="constructor" name="Amount" startLine="1015" endLine="1016" />
    <method type="Amount<Q>" name="setExact" startLine="1018" endLine="1032">
      <declaration type="double" name="doubleValue" />
      <scope startLine="1022" endLine="1025" />
      <scope startLine="1025" endLine="1030">
        <declaration type="double" name="valInc" />
        <declaration type="double" name="valDec" />
      </scope>
    </method>
    <declaration type="double" name="DOUBLE_RELATIVE_ERROR" />
    <declaration type="double" name="DECREMENT" />
    <declaration type="double" name="INCREMENT" />
    <declaration type="long" name="serialVersionUID" />
    <comment />
    <comment>Note: In the future, Amount might be abstract (with more measure types)</comment>
    <comment>We don't provide public constructors, factory methods should be used.</comment>
    <comment />
    <comment>Implements Quantity.</comment>
    <comment>Implements Quantity.</comment>
    <comment>/</comment>
    <comment>Lookup tables</comment>
    <comment>/</comment>
    <comment />
    <comment>Factory Creation</comment>
    <comment />
  </class>
</source>
