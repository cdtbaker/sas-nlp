<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.physics.amount">
  <import name="javolution.lang.MathLib" />
  <import name="javax.measure.quantity.*" />
  <import name="javax.measure.unit.SI" />
  <import name="javax.measure.unit.Unit" />
  <class name="Constants" startLine="16">
    <javadoc>
      <text>* <p> This class provides most accurate physical constants measurement;
 * the more accurate the constants, the higher the precision 
 * of the calculations making use of these constants.</p>
 * <p> Constant names use the full range of Unicode characters and
 * are mixed uppercase/lowercase to resemble symbolic names as much
 * as possible </p>
 * <p> Reference: <a href="http://physics.nist.gov/cuu/Constants/index.html">
 * CODATA Internationally recommended values of the Fundamental Physical
 * Constants (2002)</a></p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.1, April 7, 2006</version>
    </javadoc>
    <javadoc>
      <text>* Holds the standard acceleration due to gravity (approximately equal 
 * to the acceleration due to gravity on the Earth's surface).</text>
      <see><a href="http://en.wikipedia.org/wiki/Acceleration_due_to_gravity">
     *      Wikipedia: Acceleration due to gravity</a></see>
    </javadoc>
    <declaration type="Amount<Acceleration>" name="g" />
    <javadoc>
      <text>* Holds the electron rest mass.</text>
    </javadoc>
    <declaration type="Amount<Mass>" name="me" />
    <javadoc>
      <text>* Holds the proton rest mass.</text>
    </javadoc>
    <declaration type="Amount<Mass>" name="mp" />
    <javadoc>
      <text>* Holds the neutron rest mass.</text>
    </javadoc>
    <declaration type="Amount<Mass>" name="mn" />
    <javadoc>
      <text>* Holds the deuteron rest mass.</text>
    </javadoc>
    <declaration type="Amount<Mass>" name="md" />
    <javadoc>
      <text>* Holds the muon rest mass.</text>
    </javadoc>
    <declaration type="Amount<Mass>" name="mμ" />
    <javadoc>
      <text>* Holds the ratio of the circumference of a circle to its diameter.</text>
    </javadoc>
    <declaration type="Amount<Dimensionless>" name="π" />
    <javadoc>
      <text>* Holds {@link #π}/2.</text>
    </javadoc>
    <declaration type="Amount<Dimensionless>" name="half_π" />
    <javadoc>
      <text>* Holds 2·{@link #π}.</text>
    </javadoc>
    <declaration type="Amount<Dimensionless>" name="two_π" />
    <javadoc>
      <text>* Holds 4·{@link #π}.</text>
    </javadoc>
    <declaration type="Amount<Dimensionless>" name="four_π" />
    <javadoc>
      <text>* Holds {@link #π}².</text>
    </javadoc>
    <declaration type="Amount<Dimensionless>" name="π_square" />
    <javadoc>
      <text>* Holds the speed of light in vacuum (exact).</text>
    </javadoc>
    <declaration type="Amount<Velocity>" name="c" />
    <javadoc>
      <text>* Holds {@link #c}².</text>
    </javadoc>
    <declaration type="Amount<?>" name="c_square" />
    <javadoc>
      <text>* Holds the Boltzmann constant.</text>
      <see><a href="http://en.wikipedia.org/wiki/Boltzmanns_constant">
     *      Wikipedia: Boltzmann constant</a></see>
    </javadoc>
    <declaration type="Amount<?>" name="k" />
    <javadoc>
      <text>* Holds the Planck constant.</text>
      <see><a href="http://en.wikipedia.org/wiki/Plank%27s_constant">
     *      Wikipedia: Plank's constant</a></see>
    </javadoc>
    <declaration type="Amount<?>" name="ℎ" />
    <javadoc>
      <text>* Holds the Planck constant over 2π.</text>
    </javadoc>
    <declaration type="Amount<?>" name="ℏ" />
    <javadoc>
      <text>* Holds the elementary charge (positron charge).</text>
      <see><a href="http://en.wikipedia.org/wiki/Elementary_charge">
     *      Wikipedia: Elementary Charge</a></see>
    </javadoc>
    <declaration type="Amount<ElectricCharge>" name="e" />
    <javadoc>
      <text>* Holds the permeability of vacuum or magnetic constant.</text>
      <see><a href="http://en.wikipedia.org/wiki/Permeability_%28electromagnetism%29">
     *      Wikipedia: Permeability (electromagnetism)</a></see>
    </javadoc>
    <declaration type="Amount<?>" name="µ0" />
    <javadoc>
      <text>* Holds the permittivity of vacuum or electric constant (1/(µ0·c²))</text>
      <see><a href="http://en.wikipedia.org/wiki/Permittivity">
     *      Wikipedia: Permittivity</a></see>
    </javadoc>
    <declaration type="Amount<?>" name="ε0" />
    <javadoc>
      <text>* Holds the characteristic impedance of vacuum (µ0·c).</text>
    </javadoc>
    <declaration type="Amount<ElectricResistance>" name="Z0" />
    <javadoc>
      <text>* Holds the fine structure constant (e²/(2·ε0·c·h))</text>
      <see><a href="http://en.wikipedia.org/wiki/Fine_structure_constant">
     *      Wikipedia: Fine Structure Constant</a></see>
    </javadoc>
    <declaration type="Amount<Dimensionless>" name="α" />
    <javadoc>
      <text>* Holds the Newtonian constant of gravitation.</text>
      <see><a href="http://en.wikipedia.org/wiki/Gravitational_constant">
     *      Wikipedia: Gravitational Constant</a></see>
    </javadoc>
    <declaration type="Amount<?>" name="G" />
    <javadoc>
      <text>* Holds the Avogadro constant.</text>
      <see><a href="http://en.wikipedia.org/wiki/Avogadro%27s_number">
     *      Wikipedia: Avogadro's number</a></see>
    </javadoc>
    <declaration type="Amount<?>" name="N" />
    <javadoc>
      <text>* Holds the molar gas constant (N·k)</text>
      <see><a href="http://en.wikipedia.org/wiki/Gas_constant">
     *      Wikipedia: Gas constant</a></see>
    </javadoc>
    <declaration type="Amount<?>" name="R" />
    <javadoc>
      <text>* Holds the Faraday constant (N·e)</text>
      <see><a href="http://en.wikipedia.org/wiki/Faraday_constant">
     *      Wikipedia: Faraday constant</a></see>
    </javadoc>
    <declaration type="Amount<?>" name="F" />
    <javadoc>
      <text>* Holds the Stefan-Boltzmann constant ((π²/60)·k<sup>4</sup>/(ℏ³·c²))</text>
    </javadoc>
    <declaration type="Amount<?>" name="σ" />
    <javadoc>
      <text>* Holds the unified atomic mass unit (0.001 kg/mol)/N</text>
    </javadoc>
    <declaration type="Amount<Mass>" name="amu" />
    <javadoc>
      <text>* Holds the Rydberg constant (α²·me·c/2h).</text>
      <see><a href="http://en.wikipedia.org/wiki/Rydberg_constant">
     *      Wikipedia: Rydberg constant</a></see>
    </javadoc>
    <declaration type="Amount<?>" name="Rinf" />
    <javadoc>
      <text>* Holds the Bohr radius (α/(4π·Rinf))</text>
    </javadoc>
    <declaration type="Amount<Length>" name="a0" />
    <javadoc>
      <text>* Holds the Hartree energy (2Rinf·h·c)</text>
    </javadoc>
    <declaration type="Amount<?>" name="Eh" />
    <javadoc>
      <text>* Holds the magnetic flux quantum (h/2e)</text>
    </javadoc>
    <declaration type="Amount<MagneticFlux>" name="Φ0" />
    <javadoc>
      <text>* Holds the conductance quantum (2e²/h)</text>
    </javadoc>
    <declaration type="Amount<ElectricConductance>" name="G0" />
    <javadoc>
      <text>* Holds the Bohr magneton (ℏ·e/2me)</text>
    </javadoc>
    <declaration type="Amount<?>" name="µB" />
    <javadoc>
      <text>* Holds the nuclear magneton (ℏ·e/2mp)</text>
    </javadoc>
    <declaration type="Amount<?>" name="µN" />
    <javadoc>
      <text>* Holds the Planck mass (ℏ·c/G)<sup>1/2</sup></text>
    </javadoc>
    <declaration type="Amount<Mass>" name="mP" />
    <javadoc>
      <text>* Holds the Planck length (ℏ/(mP·c))</text>
    </javadoc>
    <declaration type="Amount<Length>" name="lP" />
    <javadoc>
      <text>* Holds the Planck time (lP/c)</text>
    </javadoc>
    <declaration type="Amount<Duration>" name="tP" />
    <javadoc>
      <text>* Default constructor (no derivation allows).</text>
    </javadoc>
    <method type="constructor" name="Constants" startLine="275" endLine="275" />
    <comment>4π×10−7 N/A²</comment>
    <comment>Do not use formala as experimental incertainty is very low.</comment>
  </class>
</source>
