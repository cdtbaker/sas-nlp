<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.physics.amount">
  <import name="java.io.IOException" />
  <import name="java.text.ParseException" />
  <import name="org.jscience.economics.money.Currency" />
  <import name="org.jscience.economics.money.Money" />
  <import name="javax.measure.unit.Unit" />
  <import name="javax.measure.unit.UnitFormat" />
  <import name="javolution.lang.MathLib" />
  <import name="javolution.text.Text" />
  <import name="javolution.text.TextBuilder" />
  <import name="javolution.text.TextFormat" />
  <import name="javolution.text.TypeFormat" />
  <import name="javolution.context.LocalContext" />
  <class name="AmountFormat" extends="TextFormat<Amount<?>>" startLine="29">
    <javadoc>
      <text>* <p> This class provides the interface for formatting and parsing {@link Amount measures} instances. For example:[code]
 * // Display measurements using unscaled units (e.g. base units or alternate units).
 * AmountFormat.setInstance(new AmountFormat() { // Context local.
 * public Appendable format(Amount m, Appendable a) throws IOException {
 * Unit u = m.getUnit();
 * if (u instanceof TransformedUnit)
 * u = ((TransformedUnit)u).getParentUnit();
 * return AmountFormat.getPlusMinusErrorInstance(2).format(m.to(u), a);
 * }
 * public Amount parse(CharSequence csq, Cursor c) {
 * return AmountFormat.getPlusMinusErrorInstance(2).parse(csq, c);
 * }
 * });[/code]
 * </p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.0, February 21, 2006</version>
    </javadoc>
    <javadoc>
      <text>* Holds current format.</text>
    </javadoc>
    <declaration type="LocalContext.Reference<AmountFormat>" name="CURRENT" />
    <javadoc>
      <text>* Default constructor.</text>
    </javadoc>
    <method type="constructor" name="AmountFormat" startLine="60" endLine="61" />
    <javadoc>
      <text>* Returns the current {@link javolution.context.LocalContext local}  
 * format (default <code>AmountFormat.getPlusMinusErrorInstance(2)</code>).</text>
      <return>the context local format.</return>
      <see>#getPlusMinusErrorInstance(int)</see>
    </javadoc>
    <method type="AmountFormat" name="getInstance" startLine="70" endLine="72" />
    <javadoc>
      <text>* Sets the current {@link javolution.context.LocalContext local} format.</text>
      <param>format the new format.</param>
    </javadoc>
    <method type="void" name="setInstance" startLine="79" endLine="81" />
    <javadoc>
      <text>* Returns a format for which the error (if present) is stated using 
 * the '±' character; for example <code>"(1.34 ± 0.01) m"</code>.
 * This format can be used for formatting as well as for parsing.</text>
      <param>digitsInError the maximum number of digits in error.</param>
    </javadoc>
    <method type="AmountFormat" name="getPlusMinusErrorInstance" startLine="90" endLine="92" />
    <javadoc>
      <text>* Returns a format for which the error is represented by an integer 
 * value in brackets; for example <code>"1.3456[20] m"</code> 
 * is equivalent to <code>"1.3456 ± 0.0020 m"</code>. 
 * This format can be used for formatting as well as for parsing.</text>
      <param>digitsInError the maximum number of digits in error.</param>
    </javadoc>
    <method type="AmountFormat" name="getBracketErrorInstance" startLine="102" endLine="104" />
    <javadoc>
      <text>* Returns a format for which only digits guaranteed to be exact are 
 * written out. In other words, the error is always on the
 * last digit and less than the last digit weight. For example,
 * <code>"1.34 m"</code> means a length between <code>1.32 m</code> and
 * <code>1.35 m</code>. This format can be used for formatting only.</text>
    </javadoc>
    <method type="AmountFormat" name="getExactDigitsInstance" startLine="113" endLine="115" />
    <class name="PlusMinusError" extends="AmountFormat" startLine="117">
      <javadoc>
        <text>* This class represents the plus minus error format.</text>
      </javadoc>
      <javadoc>
        <text>* Holds the number of digits in error.</text>
      </javadoc>
      <declaration type="int" name="_errorDigits" />
      <javadoc>
        <text>* Creates a plus-minus error format having the specified 
 * number of digits in error.</text>
        <param>errorDigits the number of digits in error.</param>
      </javadoc>
      <method type="constructor" name="PlusMinusError" startLine="133" endLine="135" />
      <method type="Appendable" name="format" startLine="140" endLine="168">
        <scope startLine="143" endLine="147" />
        <declaration type="double" name="value" />
        <declaration type="double" name="error" />
        <declaration type="int" name="log10Value" />
        <declaration type="int" name="log10Error" />
        <declaration type="int" name="digits" />
        <declaration type="boolean" name="scientific" />
        <declaration type="boolean" name="showZeros" />
        <comment>Exact digits.</comment>
      </method>
      <method type="Amount<?>" name="parse" startLine="171" endLine="201">
        <declaration type="int" name="start" />
        <scope startLine="173" endLine="196">
          <declaration type="long" name="value" />
          <scope startLine="176" endLine="181">
            <declaration type="Unit<?>" name="unit" />
          </scope>
          <declaration type="double" name="amount" />
          <declaration type="double" name="error" />
          <scope startLine="186" endLine="190" />
          <declaration type="Unit<?>" name="unit" />
          <comment>Exact!</comment>
          <comment>Error specified.</comment>
        </scope>
        <scope startLine="196" endLine="200" />
      </method>
      <class name="BracketError" extends="AmountFormat" startLine="204">
        <javadoc>
          <text>* This class represents the bracket error format.</text>
        </javadoc>
        <javadoc>
          <text>* Holds the number of digits in error.</text>
        </javadoc>
        <declaration type="int" name="_errorDigits" />
        <javadoc>
          <text>* Creates a bracket error format having the specified 
 * number of digits in error.</text>
          <param>bracket the number of digits in error.</param>
        </javadoc>
        <method type="constructor" name="BracketError" startLine="220" endLine="222" />
        <method type="Appendable" name="format" startLine="227" endLine="260">
          <scope startLine="230" endLine="234" />
          <declaration type="double" name="value" />
          <declaration type="double" name="error" />
          <declaration type="int" name="log10Value" />
          <declaration type="int" name="log10Error" />
          <declaration type="int" name="digits" />
          <declaration type="boolean" name="scientific" />
          <declaration type="boolean" name="showZeros" />
          <declaration type="TextBuilder" name="tb" />
          <declaration type="int" name="endMantissa" />
          <scope startLine="249" endLine="252" />
          <declaration type="int" name="bracketError" />
          <comment>Exact digits.</comment>
        </method>
        <method type="Amount<?>" name="parse" startLine="263" endLine="266">
          <comment>TBD</comment>
        </method>
        <class name="ExactDigitsOnly" extends="AmountFormat" startLine="269">
          <javadoc>
            <text>* This class represents the exact digits only format.</text>
          </javadoc>
          <javadoc>
            <text>* Default constructor.</text>
          </javadoc>
          <method type="constructor" name="ExactDigitsOnly" startLine="277" endLine="278" />
          <method type="Appendable" name="format" startLine="283" endLine="304">
            <scope startLine="286" endLine="290" />
            <declaration type="double" name="value" />
            <declaration type="double" name="error" />
            <declaration type="int" name="log10Value" />
            <declaration type="int" name="log10Error" />
            <declaration type="int" name="digits" />
            <declaration type="boolean" name="scientific" />
            <declaration type="boolean" name="showZeros" />
            <comment>Exact digits.</comment>
          </method>
          <method type="Amount<?>" name="parse" startLine="307" endLine="311" />
          <javadoc>
            <text>* Provides custom formatting for money measurements.</text>
          </javadoc>
          <method type="Appendable" name="formatMoney" startLine="318" endLine="335">
            <declaration type="Currency" name="currency" />
            <declaration type="int" name="fraction" />
            <scope startLine="321" endLine="324">
              <declaration type="long" name="amount" />
            </scope>
            <scope startLine="324" endLine="330">
              <declaration type="long" name="amount" />
            </scope>
            <scope startLine="330" endLine="332" />
          </method>
        </class>
      </class>
    </class>
  </class>
</source>
