<?xml version="1.0" encoding="UTF-8"?>
<source package="org.jscience.economics.money">
  <import name="javolution.context.LocalContext" />
  <import name="javolution.util.LocalMap" />
  <import name="javax.measure.converter.ConversionException" />
  <import name="javax.measure.converter.UnitConverter" />
  <import name="javax.measure.unit.DerivedUnit" />
  <import name="javax.measure.unit.Unit" />
  <import name="javax.measure.unit.UnitFormat" />
  <class name="Currency" extends="DerivedUnit<Money>" startLine="20">
    <javadoc>
      <text>* <p> This class represents a currency {@link javax.measure.unit.Unit Unit}.
 * Currencies are a special form of {@link DerivedUnit}, conversions
 * between currencies is possible if their respective exchange rates 
 * have been set and the conversion factor can be changed dynamically.</p>
 * <p> Quantities stated in {@link Currency} are usually instances of {@link Money}.</p>
 * <p> By default, the label associated to a currency is its ISO-4217 code
 * (see the <a href="http://www.bsi-global.com/iso4217currency"> ISO 4217
 * maintenance agency</a> for a table of currency codes). An application may
 * change this default using the {@link javax.measure.unit.UnitFormat#labelUnitFormat.label(String)} method.
 * For example:[code]
 * UnitFormat.getStandardInstance().label(Currency.EUR, "€");
 * UnitFormat.getStandardInstance().label(Currency.GBP, "£");
 * UnitFormat.getStandardInstance().label(Currency.JPY, "¥");
 * UnitFormat.getStandardInstance().label(Currency.USD, "$");
 * [/code]</p></text>
      <author><a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a></author>
      <version>3.0, February 13, 2006</version>
      <see>#setExchangeRate</see>
    </javadoc>
    <javadoc>
      <text>* The Australian Dollar currency unit.</text>
    </javadoc>
    <declaration type="Currency" name="AUD" />
    <javadoc>
      <text>* The Canadian Dollar currency unit.</text>
    </javadoc>
    <declaration type="Currency" name="CAD" />
    <javadoc>
      <text>* The China Yan currency.</text>
    </javadoc>
    <declaration type="Currency" name="CNY" />
    <javadoc>
      <text>* The Euro currency.</text>
    </javadoc>
    <declaration type="Currency" name="EUR" />
    <javadoc>
      <text>* The British Pound currency.</text>
    </javadoc>
    <declaration type="Currency" name="GBP" />
    <javadoc>
      <text>* The Japanese Yen currency.</text>
    </javadoc>
    <declaration type="Currency" name="JPY" />
    <javadoc>
      <text>* The Korean Republic Won currency.</text>
    </javadoc>
    <declaration type="Currency" name="KRW" />
    <javadoc>
      <text>* The Taiwanese dollar currency.</text>
    </javadoc>
    <declaration type="Currency" name="TWD" />
    <javadoc>
      <text>* The United State dollar currency.</text>
    </javadoc>
    <declaration type="Currency" name="USD" />
    <javadoc>
      <text>* Holds the reference currency.</text>
    </javadoc>
    <declaration type="LocalContext.Reference<Currency>" name="REFERENCE" />
    <javadoc>
      <text>* Holds the exchanges rate to the reference currency.</text>
    </javadoc>
    <declaration type="LocalMap<String,Double>" name="TO_REFERENCE" />
    <javadoc>
      <text>* Holds the converter to the {@link Money#BASE_UNIT money base unit}.</text>
    </javadoc>
    <declaration type="Converter" name="_toBaseUnit" />
    <javadoc>
      <text>* Creates the currency unit for the given currency code.
 * See the <a href="http://www.bsi-global.com/iso4217currency"> ISO 4217
 * maintenance agency</a> for more information, including a table of
 * currency codes.</text>
      <param>code the ISO-4217 code of the currency (e.g.
 * <code>"EUR", "USD", "JPY"</code>).</param>
      <throws>IllegalArgumentException if the specified code is not an ISO-4217
 * code.</throws>
    </javadoc>
    <method type="constructor" name="Currency" startLine="120" endLine="123" />
    <javadoc>
      <text>* Returns the currency code for this currency.</text>
      <return>the ISO-4217 code of the currency 
 * (e.g. <code>"EUR", "USD", "JPY"</code>).</return>
    </javadoc>
    <method type="String" name="getCode" startLine="131" endLine="133" />
    <javadoc>
      <text>* Returns the default number of fraction digits used with this currency 
 * unit. For example, the default number of fraction digits for
 * the {@link Currency#EUR} is 2, while for the {@link Currency#JPY} (Yen)
 * it's 0. This method can be overriden for custom currencies returning 
 * values different from <code>2</code>.</text>
      <return>the default number of fraction digits for this currency.</return>
    </javadoc>
    <method type="int" name="getDefaultFractionDigits" startLine="144" endLine="147" />
    <javadoc>
      <text>* Sets the reference currency (context-local). Changing the
 * reference currency clears all the exchange rates previously set.</text>
      <param>currency the new reference currency.</param>
      <see>javolution.context.LocalContext</see>
    </javadoc>
    <method type="void" name="setReferenceCurrency" startLine="156" endLine="160" />
    <javadoc>
      <text>* Returns the currency used as reference when setting the exchange rate.
 * By default, the reference currency is the currency for the default
 * country locale.</text>
      <return>the reference currency.</return>
      <see>#setExchangeRate</see>
    </javadoc>
    <method type="Currency" name="getReferenceCurrency" startLine="170" endLine="172" />
    <javadoc>
      <text>* Sets the exchange rate of this {@link Currency} relatively to
 * the reference currency. Setting the exchange rate allows
 * for conversion between {@link Money} stated in different currencies.
 * For example:<pre>
 * Currency.setReferenceCurrency(Currency.USD);
 * Currency.EUR.setExchangeRate(1.17); // 1.0 € = 1.17 $
 * </pre></text>
      <param>refAmount the amount stated in the {@link #getReferenceCurrency}equals to one unit of this {@link Currency}.</param>
      <see>#getReferenceCurrency</see>
    </javadoc>
    <method type="void" name="setExchangeRate" startLine="187" endLine="189" />
    <javadoc>
      <text>* Returns the exchange rate for this {@link Currency}.</text>
      <return>the amount stated in the {@link #getReferenceCurrency}equals to one unit of this {@link Currency}.</return>
      <throws>ConversionException if the exchange rate has not be set for
 * this {@link Currency}.</throws>
    </javadoc>
    <method type="double" name="getExchangeRate" startLine="199" endLine="204">
      <declaration type="Double" name="refAmount" />
    </method>
    <method type="boolean" name="equals" startLine="208" endLine="214">
      <declaration type="Currency" name="that" />
    </method>
    <method type="int" name="hashCode" startLine="217" endLine="219" />
    <method type="Unit<? super Money>" name="getStandardUnit" startLine="222" endLine="224" />
    <method type="UnitConverter" name="toStandardUnit" startLine="227" endLine="229" />
    <class name="Converter" extends="UnitConverter" startLine="231">
      <javadoc>
        <text>* This class represents the currency converters.</text>
      </javadoc>
      <declaration type="String" name="_code" />
      <declaration type="boolean" name="_invert" />
      <method type="constructor" name="Converter" startLine="240" endLine="243" />
      <method type="UnitConverter" name="inverse" startLine="246" endLine="248" />
      <method type="double" name="convert" startLine="251" endLine="256">
        <declaration type="Double" name="refAmount" />
      </method>
      <method type="boolean" name="isLinear" startLine="259" endLine="261" />
      <method type="boolean" name="equals" startLine="264" endLine="270">
        <declaration type="Converter" name="that" />
      </method>
      <method type="int" name="hashCode" startLine="273" endLine="275" />
      <declaration type="long" name="serialVersionUID" />
      <declaration type="long" name="serialVersionUID" />
    </class>
  </class>
</source>
