<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.number">
        <import package="java.io.IOException"/>
        <import package="javolution.context.ArrayFactory"/>
        <import package="javolution.context.ConcurrentContext"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.context.StackContext"/>
        <import package="javolution.lang.Configurable"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TextBuilder"/>
        <import package="javolution.text.TextFormat"/>
        <import package="javolution.text.TypeFormat"/>
        <import package="javolution.text.TextFormat.Cursor"/>
        <import package="javolution.xml.XMLFormat"/>
        <import package="javolution.xml.stream.XMLStreamException"/>
        <import package="org.jscience.mathematics.number.Calculus"/>
        <class name="LargeInteger" line="28">
            <extends class="Number">
                <type_params>
                    <type_param name="LargeInteger"/>
                </type_params>
            </extends>
            <comment line="29">
                Indicates if bits lost when shifting right the two&apos;s-complement                
            </comment>
            <comment line="29">
                representation (affects only negative numbers).                
            </comment>
            <comment line="29">
                //////////////////////                
            </comment>
            <comment line="29">
                Parsing/Formatting //                
            </comment>
            <comment line="29">
                //////////////////////                
            </comment>
            <javadoc line="28">
                &lt;p&gt; This class represents an immutable integer number of arbitrary size.&lt;/p&gt;
                  &lt;p&gt; It has the following advantages over the 
                  &lt;code&gt;java.math.BigInteger&lt;/code&gt; class:
                  &lt;ul&gt;
                  &lt;li&gt; Optimized for 64 bits architectures. But still runs significantly 
                  faster on 32 bits processors.&lt;/li&gt;
                  &lt;li&gt; Real-time compliant for improved performance and predictability
                  (no garbage generated when executing in {@link javolution.context.StackContext StackContext}).&lt;/li&gt;
                  &lt;li&gt; Improved algorithms (e.g. Concurrent Karabutsa multiplication in 
                  O(n&lt;sup&gt;Log3&lt;/sup&gt;) instead of O(n&lt;sup&gt;2&lt;/sup&gt;).&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt; &lt;b&gt;Note:&lt;/b&gt; This class uses {@link ConcurrentContext ConcurrentContext}to accelerate calculations on multi-cores systems.&lt;/p&gt;                
                <@author>
                    r <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </@author>
                <@version>
                    n 3.3, January 14, 2007                    
                </@version>
                <@see>
                    e <a href="http://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic">
                           Wikipedia: Arbitrary-precision Arithmetic</a>                    
                </@see>
            </javadoc>
            <declaration name="PRIME_CERTAINTY" type="Configurable&lt;Integer&gt;" line="53"/>
            <javadoc line="53">
                Holds the certainty required when testing for primality
                  (default &lt;code&gt;100&lt;/code&gt;, the probability for a composite to
                  pass the primality test is less than &lt;code&gt;2&lt;sup&gt;-100&lt;/sup&gt;&lt;/code&gt;).                
            </javadoc>
            <declaration name="DECIMAL_FORMAT" type="TextFormat&lt;LargeInteger&gt;" line="61"/>
            <javadoc line="61">
                Holds the format for large integers (decimal representation by default).                
                <@see>
                    e #parse(CharSequence,int,TextFormat.Cursor)                    
                </@see>
                <@see>
                    e #format(LargeInteger,int,Appendable)                    
                </@see>
            </javadoc>
            <anonymous_class line="68">
                <method name="format" type="Appendable" line="72">
                    <params>
                        <param name="li" type="LargeInteger"/>
                        <param name="out" type="Appendable"/>
                    </params>
                </method>
                <method name="parse" type="LargeInteger" line="77">
                    <params>
                        <param name="csq" type="CharSequence"/>
                        <param name="cursor" type="Cursor"/>
                    </params>
                </method>
            </anonymous_class>
            <scope line="81"/>
            <declaration name="ARRAY_FACTORY" type="ArrayFactory&lt;LargeInteger&gt;" line="85"/>
            <javadoc line="85">
                Holds factory for LargeInteger with variable size arrays.                
            </javadoc>
            <anonymous_class line="88">
                <method name="create" type="LargeInteger" line="91">
                    <params>
                        <param name="capacity" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="NO_ARRAY_FACTORY" type="ObjectFactory&lt;LargeInteger&gt;" line="97"/>
            <javadoc line="97">
                Holds the factory for LargeInteger with no intrinsic array (wrapper instances).                
            </javadoc>
            <anonymous_class line="100">
                <method name="create" type="LargeInteger" line="103"/>
            </anonymous_class>
            <declaration name="XML" type="XMLFormat&lt;LargeInteger&gt;" line="109"/>
            <javadoc line="109">
                Holds the default XML representation for large integers.
                  This representation consists of a simple &lt;code&gt;value&lt;/code&gt; attribute
                  holding the {@link #toText() textual} representation.                
            </javadoc>
            <anonymous_class line="115">
                <method name="newInstance" type="LargeInteger" line="119">
                    <params>
                        <param name="cls" type="Class<LargeInteger>"/>
                        <param name="xml" type="InputElement"/>
                    </params>
                </method>
                <method name="write" type="void" line="124">
                    <params>
                        <param name="li" type="LargeInteger"/>
                        <param name="xml" type="OutputElement"/>
                    </params>
                </method>
                <method name="read" type="void" line="128">
                    <params>
                        <param name="xml" type="InputElement"/>
                        <param name="li" type="LargeInteger"/>
                    </params>
                    <comment line="129">
                        Nothing to do, immutable.                        
                    </comment>
                </method>
            </anonymous_class>
            <declaration name="ZERO" type="LargeInteger" line="133"/>
            <javadoc line="133">
                The large integer representing the additive identity.                
            </javadoc>
            <declaration name="ONE" type="LargeInteger" line="138"/>
            <javadoc line="138">
                The large integer representing the multiplicative identity.                
            </javadoc>
            <scope line="142"/>
            <declaration name="LONG_MIN_VALUE" type="LargeInteger" line="147"/>
            <javadoc line="147">
                Holds Long.MIN_VALUE                
            </javadoc>
            <scope line="151"/>
            <declaration name="FIVE" type="LargeInteger" line="157"/>
            <javadoc line="157">
                Holds five.                
            </javadoc>
            <scope line="161"/>
            <declaration name="_remainder" type="LargeInteger" line="166"/>
            <javadoc line="166">
                Holds the remainder after a {@link #divide} operation.                
            </javadoc>
            <declaration name="_isNegative" type="boolean" line="171"/>
            <javadoc line="171">
                Indicates if this large integer is negative.                
            </javadoc>
            <declaration name="_size" type="int" line="176"/>
            <javadoc line="176">
                The size of this large integer in words. 
                  The most significand word different from 0 is at index: _size-1                
            </javadoc>
            <declaration name="_words" type="long[]" line="182"/>
            <javadoc line="182">
                This large integer positive words (63 bits). 
                  Least significant word first (index 0).                
            </javadoc>
            <javadoc line="188">
                Default constructor (no words array).                
            </javadoc>
            <method name="LargeInteger" type="constructor" line="191"/>
            <javadoc line="194">
                Creates a large integer with the specified 63 bits word capacity.                
                <@link>
                    k wordLength the internal positive <code>long</code> array length.                    
                </@link>
            </javadoc>
            <method name="LargeInteger" type="constructor" line="199">
                <params>
                    <param name="wordLength" type="int"/>
                </params>
            </method>
            <javadoc line="203">
                Returns the large integer of specified &lt;code&gt;long&lt;/code&gt; value.                
                <@param>
                    m value the <code>long</code> value.                    
                </@param>
                <@return>
                    n the corresponding large integer number.                    
                </@return>
            </javadoc>
            <method name="valueOf" type="LargeInteger" line="209">
                <params>
                    <param name="value" type="long"/>
                </params>
                <declaration name="li" type="LargeInteger" line="214"/>
                <declaration name="negative" type="boolean" line="215"/>
            </method>
            <javadoc line="221">
                Returns the large integer of specified two&apos;s-complement binary
                  representation. The input array is assumed to be in &lt;i&gt;big-endian&lt;/i&gt;
                  byte-order: the most significant byte is at the offset position.                
                <@param>
                    m bytes the binary representation (two's-complement).                    
                </@param>
                <@param>
                    m offset the offset at which to start reading the bytes.                    
                </@param>
                <@param>
                    m length the maximum number of bytes to read.                    
                </@param>
                <@return>
                    n the corresponding large integer number.                    
                </@return>
                <@throws>
                    s IndexOutOfBoundsException 
                      if <code>offset + length > bytes.length</code>                    
                </@throws>
                <@see>
                    e #toByteArray                    
                </@see>
            </javadoc>
            <method name="valueOf" type="LargeInteger" line="234">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="235">
                    Ensures result is large enough (takes into account potential                    
                </comment>
                <comment line="235">
                    extra bits during negative to positive conversion).                    
                </comment>
                <comment line="235">
                    Calculates size.                    
                </comment>
                <comment line="235">
                    (isNegative &amp;&amp; wordIndex &lt; 0) wordIndex = 0; // special case for -1                    
                </comment>
                <comment line="235">
                    Converts one&apos;s-complement to two&apos;s-complement if negative.                    
                </comment>
                <declaration name="li" type="LargeInteger" line="237"/>
                <declaration name="isNegative" type="boolean" line="238"/>
                <declaration name="wordIndex" type="int" line="239"/>
                <declaration name="bitIndex" type="int" line="240"/>
                <scope line="242">
                    <declaration name="bits" type="long" line="243"/>
                    <scope line="244"/>
                    <scope line="246"/>
                </scope>
                <scope line="253"/>
                <scope line="262"/>
            </method>
            <javadoc line="269">
                Returns the two&apos;s-complement binary representation of this 
                  large integer. The output array is in &lt;i&gt;big-endian&lt;/i&gt;
                  byte-order: the most significant byte is at the offset position.                
                <@param>
                    m bytes the bytes to hold the binary representation 
                      (two's-complement) of this large integer.                    
                </@param>
                <@param>
                    m offset the offset at which to start writing the bytes.                    
                </@param>
                <@return>
                    n the number of bytes written.                    
                </@return>
                <@throws>
                    s IndexOutOfBoundsException 
                      if <code>bytes.length < (bitLength() >> 3) + 1</code>                    
                </@throws>
                <@see>
                    e #valueOf(byte[],int,int)                    
                </@see>
                <@see>
                    e #bitLength                    
                </@see>
            </javadoc>
            <method name="toByteArray" type="int" line="283">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="bytesLength" type="int" line="284"/>
                <declaration name="wordIndex" type="int" line="285"/>
                <declaration name="bitIndex" type="int" line="286"/>
                <scope line="287">
                    <declaration name="word" type="long" line="288"/>
                    <declaration name="borrow" type="long" line="289"/>
                    <scope line="291">
                        <scope line="292"/>
                        <scope line="295">
                            <declaration name="bits" type="byte" line="296"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="306">
                    <scope line="307">
                        <declaration name="word" type="long" line="308"/>
                        <scope line="309">
                            <scope line="310"/>
                            <scope line="313">
                                <declaration name="bits" type="byte" line="314"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="321"/>
                </scope>
            </method>
            <javadoc line="328">
                Returns the large integer for the specified character sequence 
                  using the current {@link TextFormat#getInstance(Class) format}.                
                <@param>
                    m csq the character sequence to parse.                    
                </@param>
                <@return>
                    n <code>TextFormat.getInstance(LargeInteger.class).parse(csq)</code>                    
                </@return>
                <@throws>
                    s NumberFormatException if error when parsing.                    
                </@throws>
            </javadoc>
            <method name="valueOf" type="LargeInteger" line="336">
                <params>
                    <param name="csq" type="CharSequence"/>
                </params>
            </method>
            <javadoc line="340">
                Returns the large integer for the specified character sequence in
                  the specified radix.                
                <@param>
                    m csq the character sequence to parse.                    
                </@param>
                <@param>
                    m radix the radix of the representation.                    
                </@param>
                <@return>
                    n <code>LargeInteger.parse(csq, radix, cursor)</code>                    
                </@return>
                <@throws>
                    s NumberFormatException if error when parsing.                    
                </@throws>
            </javadoc>
            <method name="valueOf" type="LargeInteger" line="349">
                <params>
                    <param name="csq" type="CharSequence"/>
                    <param name="radix" type="int"/>
                </params>
                <declaration name="cursor" type="Cursor" line="350"/>
                <scope line="351"/>
                <scope line="353"/>
            </method>
            <javadoc line="361">
                Returns the large integer corresponding to the specified 
                  &lt;code&gt;java.math.BigInteger&lt;/code&gt; instance.                
                <@param>
                    m bigInteger the big integer instance.                    
                </@param>
                <@return>
                    n the large integer having the same value.                    
                </@return>
            </javadoc>
            <method name="valueOf" type="LargeInteger" line="368">
                <params>
                    <param name="bigInteger" type="java.math.BigInteger"/>
                </params>
                <declaration name="bytes" type="byte[]" line="369"/>
            </method>
            <javadoc line="373">
                Indicates if this large integer is greater than {@link #ZERO}({@link #ZERO}is not included).                
                <@return>
                    n <code>this > ZERO</code>                    
                </@return>
            </javadoc>
            <method name="isPositive" type="boolean" line="379"/>
            <javadoc line="383">
                Indicates if this large integer is less than {@link #ZERO}.                
                <@return>
                    n <code>this < ZERO</code>                    
                </@return>
            </javadoc>
            <method name="isNegative" type="boolean" line="388"/>
            <javadoc line="392">
                Indicates if this large integer is equal to {@link #ZERO}.                
                <@return>
                    n <code>this == ZERO</code>                    
                </@return>
            </javadoc>
            <method name="isZero" type="boolean" line="397"/>
            <javadoc line="401">
                Indicates if this large integer is an even number.                
                <@return>
                    n <code>(this & 1) == ZERO</code>                    
                </@return>
            </javadoc>
            <method name="isEven" type="boolean" line="406"/>
            <javadoc line="410">
                Indicates if this large integer is an odd number.                
                <@return>
                    n <code>(this & 1) != ZERO</code>                    
                </@return>
            </javadoc>
            <method name="isOdd" type="boolean" line="415"/>
            <javadoc line="419">
                Indicates if this large integer is probably prime.                
                <@return>
                    n <code>true</code> if this large integer is probable prime;
                      <code>false</code> otherwise.                    
                </@return>
            </javadoc>
            <method name="isProbablyPrime" type="boolean" line="425"/>
            <javadoc line="429">
                Returns the minimal number of bits to represent this large integer
                  in the minimal two&apos;s-complement (sign excluded).                
                <@return>
                    n the length of this integer in bits (sign excluded).                    
                </@return>
            </javadoc>
            <method name="bitLength" type="int" line="435">
                <declaration name="n" type="int" line="438"/>
                <declaration name="bitLength" type="int" line="439"/>
            </method>
            <javadoc line="444">
                Returns the minimal number of decimal digits necessary to represent 
                  this large integer (sign excluded).                
                <@return>
                    n the maximum number of digits.                    
                </@return>
            </javadoc>
            <method name="digitLength" type="int" line="450">
                <declaration name="bitLength" type="int" line="451"/>
                <declaration name="min" type="int" line="452"/>
                <declaration name="max" type="int" line="453"/>
            </method>
            <declaration name="BITS_TO_DIGITS" type="double" line="460"/>
            <javadoc line="462">
                Indicates if this number is a power of two (equals to 2&lt;sup&gt;
                  ({@link #bitLength bitLength()} - 1)&lt;/sup&gt;).                
                <@return>
                    n <code>true</code> if this number is a power of two; 
                      <code>false</code> otherwise.                    
                </@return>
            </javadoc>
            <method name="isPowerOfTwo" type="boolean" line="469">
                <declaration name="n" type="int" line="472"/>
                <scope line="473"/>
                <declaration name="bitLength" type="int" line="477"/>
            </method>
            <javadoc line="481">
                Returns the index of the lowest-order one bit in this large integer
                  or &lt;code&gt;-1&lt;/code&gt; if &lt;code&gt;this.equals(ZERO)&lt;/code&gt;.                
                <@return>
                    n the index of the rightmost bit set or <code>-1</code>                    
                </@return>
            </javadoc>
            <method name="getLowestSetBit" type="int" line="487">
                <scope line="490">
                    <declaration name="w" type="long" line="491"/>
                    <scope line="494"/>
                </scope>
            </method>
            <javadoc line="501">
                Returns the final undivided part after division that is less or of 
                  lower degree than the divisor. This value is only set by the {@link #divide} operation and is not considered as part of 
                  this large integer (ignored by all methods).                
                <@return>
                    n the remainder of the division for which this large integer
                      is the quotient.                    
                </@return>
            </javadoc>
            <method name="getRemainder" type="LargeInteger" line="510"/>
            <javadoc line="514">
                Indicates if this large integer is larger than the one
                  specified in absolute value.                
                <@param>
                    m that the integer to be compared with.                    
                </@param>
                <@return>
                    n <code>this.abs().compareTo(that.abs()) > 0</code>.                    
                </@return>
            </javadoc>
            <method name="isLargerThan" type="boolean" line="521">
                <params>
                    <param name="that" type="LargeInteger"/>
                </params>
            </method>
            <javadoc line="527">
                Returns the absolute value of this large integer.                
                <@return>
                    n <code>|this|</code>.                    
                </@return>
            </javadoc>
            <method name="abs" type="LargeInteger" line="532"/>
            <javadoc line="538">
                Returns the opposite of this large integer.                
                <@return>
                    n <code>-this</code>.                    
                </@return>
            </javadoc>
            <method name="opposite" type="LargeInteger" line="543">
                <declaration name="li" type="LargeInteger" line="544"/>
            </method>
            <javadoc line="551">
                Returns the sum of this large integer with the specified 
                  &lt;code&gt;long&lt;/code&gt; integer (convenience method)                
                <@param>
                    m value the <code>long</code> integer being added.                    
                </@param>
                <@return>
                    n <code>this + value</code>.                    
                </@return>
            </javadoc>
            <method name="plus" type="LargeInteger" line="558">
                <params>
                    <param name="value" type="long"/>
                </params>
            </method>
            <javadoc line="562">
                Returns the sum of this large integer with the one specified.                
                <@param>
                    m that the integer to be added.                    
                </@param>
                <@return>
                    n <code>this + that</code>.                    
                </@return>
            </javadoc>
            <method name="plus" type="LargeInteger" line="568">
                <params>
                    <param name="that" type="LargeInteger"/>
                </params>
                <comment line="569">
                    turn this.minus(that.opposite()); // Switches that sign.                    
                </comment>
                <declaration name="li" type="LargeInteger" line="573"/>
            </method>
            <javadoc line="580">
                Returns the difference between this large integer and the one
                  specified.                
                <@param>
                    m that the integer to be subtracted.                    
                </@param>
                <@return>
                    n <code>this - that</code>.                    
                </@return>
            </javadoc>
            <method name="minus" type="LargeInteger" line="587">
                <params>
                    <param name="that" type="LargeInteger"/>
                </params>
                <comment line="588">
                    turn this.plus(that.opposite()); // Switches that sign.                    
                </comment>
                <declaration name="li" type="LargeInteger" line="592"/>
            </method>
            <javadoc line="599">
                Returns the difference between this large integer and the specified
                  value                
                <@param>
                    m value the value to be subtracted.                    
                </@param>
                <@return>
                    n <code>this - value</code>.                    
                </@return>
            </javadoc>
            <method name="minus" type="LargeInteger" line="606">
                <params>
                    <param name="value" type="long"/>
                </params>
            </method>
            <javadoc line="610">
                Returns the product of this large integer with the one specified.                
                <@param>
                    m that the large integer multiplier.                    
                </@param>
                <@return>
                    n <code>this · that</code>.                    
                </@return>
            </javadoc>
            <method name="times" type="LargeInteger" line="616">
                <params>
                    <param name="that" type="LargeInteger"/>
                </params>
                <scope line="621">
                    <declaration name="li" type="LargeInteger" line="622"/>
                </scope>
                <scope line="627">
                    <declaration name="n" type="int" line="628"/>
                    <declaration name="b" type="LargeInteger" line="630"/>
                    <declaration name="a" type="LargeInteger" line="631"/>
                    <declaration name="d" type="LargeInteger" line="633"/>
                    <declaration name="c" type="LargeInteger" line="634"/>
                    <declaration name="ab" type="LargeInteger" line="635"/>
                    <declaration name="cd" type="LargeInteger" line="636"/>
                    <declaration name="abcd" type="LargeInteger" line="637"/>
                    <declaration name="ac" type="LargeInteger" line="638"/>
                    <declaration name="bd" type="LargeInteger" line="639"/>
                </scope>
                <scope line="643">
                    <declaration name="n" type="int" line="644"/>
                    <declaration name="b" type="LargeInteger" line="646"/>
                    <declaration name="a" type="LargeInteger" line="647"/>
                    <declaration name="d" type="LargeInteger" line="649"/>
                    <declaration name="c" type="LargeInteger" line="650"/>
                    <declaration name="ab" type="LargeInteger" line="651"/>
                    <declaration name="cd" type="LargeInteger" line="652"/>
                    <declaration name="abcd" type="MultiplyLogic" line="653"/>
                    <declaration name="ac" type="MultiplyLogic" line="654"/>
                    <declaration name="bd" type="MultiplyLogic" line="655"/>
                    <scope line="657"/>
                    <scope line="661"/>
                    <declaration name="result" type="LargeInteger" line="665"/>
                </scope>
            </method>
            <method name="high" type="LargeInteger" line="673">
                <params>
                    <param name="w" type="int"/>
                </params>
                <comment line="674">
                    ivate LargeInteger high(int w) { // this.shiftRight(w * 63)                    
                </comment>
                <declaration name="li" type="LargeInteger" line="674"/>
            </method>
            <method name="low" type="LargeInteger" line="681">
                <params>
                    <param name="w" type="int"/>
                </params>
                <comment line="682">
                    ivate LargeInteger low(int w) { // this.minus(high(w).shiftLeft(w * 63));                    
                </comment>
                <comment line="682">
                    // Else zero.                    
                </comment>
                <declaration name="li" type="LargeInteger" line="682"/>
                <scope line="685">
                    <scope line="686"/>
                </scope>
            </method>
            <method name="shiftWordLeft" type="LargeInteger" line="694">
                <params>
                    <param name="w" type="int"/>
                </params>
                <comment line="695">
                    ivate LargeInteger shiftWordLeft(int w) { // this.minus(high(w).shiftLeft(w * 63));                    
                </comment>
                <declaration name="li" type="LargeInteger" line="697"/>
                <scope line="700"/>
            </method>
            <javadoc line="707">
                Returns the product of this large integer with the specified 
                  &lt;code&gt;long&lt;/code&gt; multiplier.                
                <@param>
                    m multiplier the <code>long</code> multiplier.                    
                </@param>
                <@return>
                    n <code>this · multiplier</code>.                    
                </@return>
            </javadoc>
            <method name="times" type="LargeInteger" line="714">
                <params>
                    <param name="multiplier" type="long"/>
                </params>
                <comment line="715">
                    turn times(LONG_MIN_VALUE); // Size 2.                    
                </comment>
                <declaration name="isNegative" type="boolean" line="719"/>
                <declaration name="li" type="LargeInteger" line="721"/>
            </method>
            <javadoc line="727">
                Returns this large integer divided by the one specified (integer
                  division). The remainder of this division is accessible using {@link #getRemainder}.                
                <@param>
                    m that the integer divisor.                    
                </@param>
                <@return>
                    n <code>this / that</code> and <code>this % that</code> 
                      ({@link #getRemainder})                    
                </@return>
                <@throws>
                    s ArithmeticException if <code>that.equals(ZERO)</code>                    
                </@throws>
            </javadoc>
            <method name="divide" type="LargeInteger" line="737">
                <params>
                    <param name="that" type="LargeInteger"/>
                </params>
                <comment line="738">
                    Setups result and remainder.                    
                </comment>
                <declaration name="result" type="LargeInteger" line="740"/>
                <declaration name="remainder" type="LargeInteger" line="741"/>
                <declaration name="thisAbs" type="LargeInteger" line="742"/>
                <declaration name="thatAbs" type="LargeInteger" line="743"/>
                <declaration name="precision" type="int" line="744"/>
                <scope line="745"/>
                <scope line="748">
                    <declaration name="thatReciprocal" type="LargeInteger" line="749"/>
                    <scope line="755"/>
                    <scope line="761"/>
                </scope>
                <declaration name="li" type="LargeInteger" line="770"/>
            </method>
            <javadoc line="779">
                Returns this large integer divided by the specified &lt;code&gt;int&lt;/code&gt;
                  divisor. The remainder of this division is accessible using {@link #getRemainder}.                
                <@param>
                    m divisor the <code>int</code> divisor.                    
                </@param>
                <@return>
                    n <code>this / divisor</code> and <code>this % divisor</code>
                      ({@link #getRemainder})                    
                </@return>
                <@throws>
                    s ArithmeticException if <code>divisor == 0</code>                    
                </@throws>
            </javadoc>
            <method name="divide" type="LargeInteger" line="789">
                <params>
                    <param name="divisor" type="int"/>
                </params>
                <scope line="792">
                    <declaration name="li" type="LargeInteger" line="793"/>
                </scope>
                <declaration name="li" type="LargeInteger" line="800"/>
                <declaration name="rem" type="long" line="801"/>
            </method>
            <javadoc line="810">
                Returns the remainder of the division of this large integer with 
                  the one specified (convenience method equivalent to 
                  &lt;code&gt;this.divide(that).getRemainder()&lt;/code&gt;).                
                <@param>
                    m that the value by which this integer is to be divided, and the
                      remainder returned.                    
                </@param>
                <@return>
                    n <code>this % that</code>                    
                </@return>
                <@throws>
                    s ArithmeticException if <code>that.equals(ZERO)</code>                    
                </@throws>
                <@see>
                    e #divide(LargeInteger)                    
                </@see>
            </javadoc>
            <method name="remainder" type="LargeInteger" line="821">
                <params>
                    <param name="that" type="LargeInteger"/>
                </params>
            </method>
            <javadoc line="825">
                Returns a scaled approximation of &lt;code&gt;1 / this&lt;/code&gt;.                
                <@param>
                    m precision the requested precision (reciprocal error being ± 1).                    
                </@param>
                <@return>
                    n <code>2<sup>(precision + this.bitLength())</sup> / this</code>                    
                </@return>
                <@throws>
                    s ArithmeticException if <code>this.isZero()</code>                    
                </@throws>
            </javadoc>
            <method name="inverseScaled" type="LargeInteger" line="832">
                <params>
                    <param name="precision" type="int"/>
                </params>
                <scope line="833">
                    <declaration name="divisor" type="long" line="834"/>
                    <declaration name="dividend" type="long" line="835"/>
                </scope>
                <scope line="838">
                    <declaration name="x" type="LargeInteger" line="839"/>
                    <declaration name="thisTrunc" type="LargeInteger" line="840"/>
                    <declaration name="prod" type="LargeInteger" line="841"/>
                    <declaration name="diff" type="int" line="842"/>
                    <declaration name="prodTrunc" type="LargeInteger" line="843"/>
                    <declaration name="xPad" type="LargeInteger" line="844"/>
                    <declaration name="tmp" type="LargeInteger" line="845"/>
                </scope>
            </method>
            <javadoc line="850">
                Returns the integer square root of this integer.                
                <@return>
                    n <code>k<code> such as <code>k^2 <= this < (k + 1)^2</code>                    
                </@return>
                <@throws>
                    s ArithmeticException if this integer is negative.                    
                </@throws>
            </javadoc>
            <method name="sqrt" type="LargeInteger" line="856">
                <declaration name="bitLength" type="int" line="860"/>
                <scope line="862">
                    <declaration name="k" type="LargeInteger" line="864"/>
                    <scope line="865">
                        <declaration name="newK" type="LargeInteger" line="866"/>
                        <scope line="867">
                            <scope line="868"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="875"/>
            </method>
            <javadoc line="880">
                Returns this large integer modulo the specified large integer. 
                  &lt;p&gt; Note: The result as the same sign as the divisor unlike the Java 
                  remainder (%) operator (which as the same sign as the dividend).&lt;/p&gt;                
                <@param>
                    m m the modulus.                    
                </@param>
                <@return>
                    n <code>this mod m</code>                    
                </@return>
                <@see>
                    e #getRemainder()                    
                </@see>
            </javadoc>
            <method name="mod" type="LargeInteger" line="890">
                <params>
                    <param name="m" type="LargeInteger"/>
                </params>
                <declaration name="li" type="LargeInteger" line="891"/>
            </method>
            <javadoc line="896">
                Returns the large integer whose value is &lt;code&gt;(this&lt;sup&gt;-1&lt;/sup&gt; mod m)
                  &lt;/code&gt;.                
                <@param>
                    m m the modulus.                    
                </@param>
                <@return>
                    n <code>this<sup>-1</sup> mod m</code>.                    
                </@return>
                <@throws>
                    s ArithmeticException <code> m &lt;= 0</code>, or this integer
                      has no multiplicative inverse mod m (that is, this integer
                      is not <i>relatively prime</i> to m).                    
                </@throws>
            </javadoc>
            <method name="modInverse" type="LargeInteger" line="906">
                <params>
                    <param name="m" type="LargeInteger"/>
                </params>
                <scope line="910">
                    <declaration name="a" type="LargeInteger" line="912"/>
                    <declaration name="b" type="LargeInteger" line="913"/>
                    <declaration name="p" type="LargeInteger" line="914"/>
                    <declaration name="q" type="LargeInteger" line="915"/>
                    <declaration name="r" type="LargeInteger" line="916"/>
                    <declaration name="s" type="LargeInteger" line="917"/>
                    <scope line="918">
                        <declaration name="quot" type="LargeInteger" line="919"/>
                        <declaration name="c" type="LargeInteger" line="920"/>
                        <declaration name="new_r" type="LargeInteger" line="924"/>
                        <declaration name="new_s" type="LargeInteger" line="925"/>
                    </scope>
                </scope>
                <scope line="935"/>
            </method>
            <javadoc line="940">
                Returns this large integer raised at the specified exponent modulo 
                  the specified modulus.                
                <@param>
                    m exp the exponent.                    
                </@param>
                <@param>
                    m m the modulus.                    
                </@param>
                <@return>
                    n <code>this<sup>exp</sup> mod m</code>                    
                </@return>
                <@throws>
                    s ArithmeticException <code>m &lt;= 0</code>                    
                </@throws>
                <@see>
                    e #modInverse                    
                </@see>
            </javadoc>
            <method name="modPow" type="LargeInteger" line="950">
                <params>
                    <param name="exp" type="LargeInteger"/>
                    <param name="m" type="LargeInteger"/>
                </params>
                <scope line="953">
                    <scope line="955">
                        <declaration name="result" type="LargeInteger" line="956"/>
                        <declaration name="pow2" type="LargeInteger" line="957"/>
                        <scope line="958">
                            <scope line="959"/>
                        </scope>
                    </scope>
                    <scope line="967"/>
                </scope>
                <scope line="970"/>
                <scope line="972"/>
            </method>
            <javadoc line="977">
                Returns the greatest common divisor of this large integer and 
                  the one specified.                
                <@param>
                    m that the other number to compute the GCD with.                    
                </@param>
                <@return>
                    n a positive number or {@link #ZERO} if
                      <code>(this.isZero() && that.isZero())</code>.                    
                </@return>
            </javadoc>
            <method name="gcd" type="LargeInteger" line="985">
                <params>
                    <param name="that" type="LargeInteger"/>
                </params>
                <comment line="986">
                    Works with local (modifiable) copies of the inputs.                    
                </comment>
                <comment line="986">
                    _isNegative = false; // abs()                    
                </comment>
                <comment line="986">
                    _isNegative = false; // abs()                    
                </comment>
                <comment line="986">
                    Euclidian algorithm until u, v about the same size.                    
                </comment>
                <comment line="986">
                    Binary GCD Implementation adapted from                    
                </comment>
                <comment line="986">
                    http://en.wikipedia.org/wiki/Binary_GCD_algorithm                    
                </comment>
                <comment line="986">
                    From here on, u is always odd.                    
                </comment>
                <declaration name="u" type="LargeInteger" line="991"/>
                <declaration name="v" type="LargeInteger" line="993"/>
                <scope line="997">
                    <declaration name="tmp" type="LargeInteger" line="998"/>
                    <declaration name="rem" type="LargeInteger" line="999"/>
                </scope>
                <declaration name="uShift" type="int" line="1008"/>
                <declaration name="vShift" type="int" line="1010"/>
                <scope line="1014">
                    <scope line="1017"/>
                    <scope line="1019">
                        <declaration name="tmp" type="LargeInteger" line="1021"/>
                    </scope>
                </scope>
            </method>
            <method name="shiftRightSelf" type="void" line="1033"/>
            <method name="shiftRightSelf" type="void" line="1039">
                <params>
                    <param name="n" type="int"/>
                </params>
                <comment line="1040">
                    t bitShift = n - ((wordShift &lt;&lt; 6) - wordShift); // n - wordShift * 63                    
                </comment>
                <declaration name="wordShift" type="int" line="1042"/>
                <declaration name="bitShift" type="int" line="1043"/>
            </method>
            <method name="subtract" type="void" line="1047">
                <params>
                    <param name="that" type="LargeInteger"/>
                </params>
                <comment line="1048">
                    ivate void subtract(LargeInteger that) { // this &gt;= that                    
                </comment>
            </method>
            <javadoc line="1052">
                Returns the value of this large integer after performing a binary
                  shift to left. The shift distance, &lt;code&gt;n&lt;/code&gt;, may be negative,
                  in which case this method performs a right shift.                
                <@param>
                    m n the shift distance, in bits.                    
                </@param>
                <@return>
                    n <code>this &lt;&lt; n</code>.                    
                </@return>
                <@see>
                    e #shiftRight                    
                </@see>
            </javadoc>
            <method name="shiftLeft" type="LargeInteger" line="1061">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="wordShift" type="int" line="1066"/>
                <declaration name="bitShift" type="int" line="1067"/>
                <declaration name="li" type="LargeInteger" line="1068"/>
            </method>
            <javadoc line="1075">
                Returns the value of this large integer after performing a binary
                  shift to right with sign extension &lt;code&gt;(-1 &gt;&gt; 1 == -1)&lt;/code&gt;.
                  The shift distance, &lt;code&gt;n&lt;/code&gt;, may be negative, in which case 
                  this method performs a {@link #shiftLeft(int)}.                
                <@param>
                    m n the shift distance, in bits.                    
                </@param>
                <@return>
                    n <code>this &gt;&gt; n</code>.                    
                </@return>
            </javadoc>
            <method name="shiftRight" type="LargeInteger" line="1084">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="li" type="LargeInteger" line="1085"/>
            </method>
            <method name="isShiftRightCorrection" type="boolean" line="1092">
                <params>
                    <param name="n" type="int"/>
                </params>
                <comment line="1093">
                    t bitShift = n - ((wordShift &lt;&lt; 6) - wordShift); // n - wordShift * 63                    
                </comment>
                <declaration name="wordShift" type="int" line="1093"/>
                <declaration name="bitShift" type="int" line="1094"/>
                <declaration name="i" type="int" line="1095"/>
                <declaration name="bitsLost" type="boolean" line="1096"/>
                <scope line="1098"/>
            </method>
            <javadoc line="1104">
                Returns the value of this large integer after multiplication by 
                  a power of two. This method is equivalent to {@link #shiftLeft(int)}for positive &lt;code&gt;n&lt;/code&gt;; but is different from {@link #shiftRight(int)} for negative &lt;code&gt;n&lt;/code&gt; as no sign 
                  extension is performed (&lt;code&gt;-1 &gt;&gt;&gt; 1 == 0&lt;/code&gt;).                
                <@param>
                    m n the power of 2 exponent.                    
                </@param>
                <@return>
                    n <code>this · 2<sup>n</sup></code>.                    
                </@return>
            </javadoc>
            <method name="times2pow" type="LargeInteger" line="1114">
                <params>
                    <param name="n" type="int"/>
                </params>
                <comment line="1115">
                    = -n; // Works with positive n.                    
                </comment>
                <comment line="1115">
                    t bitShift = n - ((wordShift &lt;&lt; 6) - wordShift); // n - wordShift * 63                    
                </comment>
                <declaration name="wordShift" type="int" line="1118"/>
                <declaration name="bitShift" type="int" line="1119"/>
                <declaration name="li" type="LargeInteger" line="1122"/>
            </method>
            <javadoc line="1129">
                Returns the value of this large integer after multiplication by 
                  a power of ten. For example:[code]
                  LargeInteger billion = LargeInteger.ONE.times10pow(9); // 1E9
                  LargeInteger million = billion.times10pow(-3);[/code]                
                <@param>
                    m n the decimal exponent.                    
                </@param>
                <@return>
                    n <code>this · 10<sup>n</sup></code>                    
                </@return>
            </javadoc>
            <method name="times10pow" type="LargeInteger" line="1138">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="1141">
                    <declaration name="bitLength" type="int" line="1142"/>
                    <declaration name="li" type="LargeInteger" line="1143"/>
                    <declaration name="i" type="int" line="1145"/>
                    <scope line="1148"/>
                    <declaration name="wordShift" type="int" line="1154"/>
                    <declaration name="bitShift" type="int" line="1155"/>
                </scope>
                <scope line="1159">
                    <declaration name="wordShift" type="int" line="1162"/>
                    <declaration name="bitShift" type="int" line="1163"/>
                    <declaration name="li" type="LargeInteger" line="1166"/>
                    <scope line="1169">
                        <declaration name="i" type="int" line="1170"/>
                        <scope line="1172"/>
                    </scope>
                </scope>
            </method>
            <declaration name="DIGITS_TO_BITS" type="double" line="1182"/>
            <declaration name="INT_POW_5" type="int[]" line="1184"/>
            <declaration name="LONG_POW_5" type="long[]" line="1188"/>
            <javadoc line="1196">
                Compares this large integer against the specified object.                
                <@param>
                    m that the object to compare with.                    
                </@param>
                <@return>
                    n <code>true</code> if the objects are the same; <code>false</code>
                      otherwise.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="1203">
                <params>
                    <param name="that" type="Object"/>
                </params>
                <declaration name="li" type="LargeInteger" line="1206"/>
            </method>
            <javadoc line="1211">
                Compares this large integer against the specified &lt;code&gt;long&lt;/code&gt;
                  value.                
                <@param>
                    m value <code>long</code> value to compare with.                    
                </@param>
                <@return>
                    n <code>true</code> if this large integer has the specified value;
                      <code>false</code> otherwise.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="1219">
                <params>
                    <param name="value" type="long"/>
                </params>
            </method>
            <javadoc line="1227">
                Returns the hash code for this large integer number.                
                <@return>
                    n the hash code value.                    
                </@return>
            </javadoc>
            <method name="hashCode" type="int" line="1232">
                <comment line="1233">
                    1327144033 is just an appropriately large prime;                    
                </comment>
                <comment line="1233">
                    1050537101 is 263 mod 1327144033 . The result is this.mod(1327144033) .                    
                </comment>
                <declaration name="code" type="long" line="1233"/>
                <scope line="1236"/>
            </method>
            <javadoc line="1242">
                Returns the low order bits of this large integer as a &lt;code&gt;long&lt;/code&gt;.
                  &lt;p&gt;Note: This conversion can lose information about the overall magnitude
                  of the integer value and may return a result with the opposite 
                  sign.&lt;/p&gt;                
                <@return>
                    n the numeric value represented by this integer after conversion
                      to type <code>long</code>.                    
                </@return>
            </javadoc>
            <method name="longValue" type="long" line="1252">
                <comment line="1253">
                    (_words[1] &lt;&lt; 63) | _words[0]); // bitLength &gt; 63 bits.                    
                </comment>
            </method>
            <javadoc line="1259">
                Returns the value of this large integer as a &lt;code&gt;double&lt;/code&gt;.                
                <@return>
                    n the numeric value represented by this integer after conversion
                      to type <code>double</code>.                    
                </@return>
            </javadoc>
            <method name="doubleValue" type="double" line="1265">
                <comment line="1266">
                    Calculates bits length (ignores sign).                    
                </comment>
                <comment line="1266">
                    Keep 63 most significant bits.                    
                </comment>
                <declaration name="n" type="int" line="1271"/>
                <declaration name="bitLength" type="int" line="1272"/>
                <declaration name="shift" type="int" line="1275"/>
                <declaration name="int63" type="LargeInteger" line="1276"/>
                <declaration name="d" type="double" line="1277"/>
            </method>
            <javadoc line="1281">
                Compares two large integers numerically.                
                <@param>
                    m that the integer to compare with.                    
                </@param>
                <@return>
                    n -1, 0 or 1 as this integer is numerically less than, equal to,
                      or greater than <code>that</code>.                    
                </@return>
                <@throws>
                    s ClassCastException <code>that</code> is not a 
                      large integer.                    
                </@throws>
            </javadoc>
            <method name="compareTo" type="int" line="1290">
                <params>
                    <param name="that" type="LargeInteger"/>
                </params>
                <comment line="1291">
                    Compares sign.                    
                </comment>
                <comment line="1291">
                    Same sign, compares size.                    
                </comment>
                <comment line="1291">
                    Same size.                    
                </comment>
            </method>
            <javadoc line="1306">
                Compares this large integer to the specified &lt;code&gt;long&lt;/code&gt; value.                
                <@param>
                    m value the <code>long</code> value to compare with.                    
                </@param>
                <@return>
                    n -1, 0 or 1 as this integer is numerically less than, equal to,
                      or greater than the specified value.                    
                </@return>
            </javadoc>
            <method name="compareTo" type="int" line="1313">
                <params>
                    <param name="value" type="long"/>
                </params>
                <comment line="1314">
                    size &lt;= 1                    
                </comment>
                <declaration name="thisValue" type="long" line="1318"/>
            </method>
            <method name="copy" type="LargeInteger" line="1323">
                <declaration name="li" type="LargeInteger" line="1324"/>
                <scope line="1327"/>
            </method>
            <javadoc line="1339">
                Returns the text representation of this number using the current  {@link TextFormat#getInstance(Class) format}.                
                <@return>
                    n <code>TextFormat.getInstance(LargeInteger.class).format(this)</code>                    
                </@return>
            </javadoc>
            <method name="toText" type="Text" line="1345"/>
            <javadoc line="1349">
                Returns the text representation of this number in the specified radix.                
                <@param>
                    m radix the radix of the representation.                    
                </@param>
                <@return>
                    n the text representation of this number in the specified radix.                    
                </@return>
            </javadoc>
            <method name="toText" type="Text" line="1355">
                <params>
                    <param name="radix" type="int"/>
                </params>
                <declaration name="tmp" type="TextBuilder" line="1356"/>
                <scope line="1357"/>
                <scope line="1360"/>
                <scope line="1362"/>
            </method>
            <javadoc line="1367">
                Parses the specified character sequence from the specified position 
                  as a large integer in the specified radix.                
                <@param>
                    m csq the character sequence to parse.                    
                </@param>
                <@param>
                    m radix the radix to be used while parsing.                    
                </@param>
                <@param>
                    m cursor the current cursor position (being maintained).                    
                </@param>
                <@return>
                    n the corresponding large integer.                    
                </@return>
                <@throws>
                    s NumberFormatException if error when parsing.                    
                </@throws>
            </javadoc>
            <method name="parse" type="LargeInteger" line="1377">
                <params>
                    <param name="csq" type="CharSequence"/>
                    <param name="radix" type="int"/>
                    <param name="cursor" type="Cursor"/>
                </params>
                <comment line="1378">
                    rsor.setEndIndex(end); // Restore end index.                    
                </comment>
                <declaration name="end" type="int" line="1378"/>
                <declaration name="isNegative" type="boolean" line="1379"/>
                <declaration name="li" type="LargeInteger" line="1381"/>
                <declaration name="maxDigits" type="int" line="1382"/>
                <scope line="1383">
                    <declaration name="start" type="int" line="1384"/>
                    <declaration name="l" type="long" line="1386"/>
                    <declaration name="readCount" type="int" line="1387"/>
                    <scope line="1388"/>
                    <scope line="1390">
                        <scope line="1391">
                            <declaration name="tmp" type="LargeInteger" line="1392"/>
                        </scope>
                        <declaration name="factor" type="long" line="1398"/>
                    </scope>
                    <declaration name="c" type="char" line="1405"/>
                    <declaration name="digit" type="int" line="1406"/>
                </scope>
            </method>
            <method name="pow" type="long" line="1416">
                <params>
                    <param name="radix" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <declaration name="l" type="long" line="1421"/>
                <scope line="1422"/>
            </method>
            <declaration name="LONG_POW_10" type="long[]" line="1428"/>
            <declaration name="LONG_POW_16" type="long[]" line="1434"/>
            <javadoc line="1439">
                Formats the specified large integer in the specified radix and into
                  the specified &lt;code&gt;Appendable&lt;/code&gt; argument.                
                <@param>
                    m li the large integer to format.                    
                </@param>
                <@param>
                    m radix the radix.                    
                </@param>
                <@param>
                    m out the <code>Appendable</code> to append.                    
                </@param>
                <@return>
                    n the specified <code>Appendable</code> object.                    
                </@return>
                <@throws>
                    s IllegalArgumentException if radix is not in [2 .. 36] range.                    
                </@throws>
                <@throws>
                    s IOException if an I/O exception occurs.                    
                </@throws>
            </javadoc>
            <method name="format" type="Appendable" line="1451">
                <params>
                    <param name="li" type="LargeInteger"/>
                    <param name="radix" type="int"/>
                    <param name="out" type="Appendable"/>
                </params>
                <scope line="1452"/>
                <declaration name="maxDigits" type="int" line="1455"/>
            </method>
            <method name="write" type="Appendable" line="1460">
                <params>
                    <param name="li" type="LargeInteger"/>
                    <param name="radix" type="int"/>
                    <param name="divisor" type="int"/>
                    <param name="out" type="Appendable"/>
                </params>
                <comment line="1461">
                    ite(li, radix, divisor, out); // Writes high.                    
                </comment>
                <declaration name="rem" type="int" line="1463"/>
                <scope line="1465"/>
                <scope line="1470"/>
                <scope line="1474"/>
                <scope line="1476"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="1481"/>
        </class>
    </source>