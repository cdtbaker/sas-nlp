<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.number">
        <import package="org.jscience.mathematics.structure.Field"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.context.HeapContext"/>
        <import package="javolution.context.LocalContext"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TypeFormat"/>
        <import package="javolution.xml.XMLFormat"/>
        <import package="javolution.xml.stream.XMLStreamException"/>
        <class name="Real" extends="Number<Real>" line="22">
            <comment line="23">
                blic static final Real NaN = new Real(); // Unique (0 ± 1E2147483647)                
            </comment>
            <implements interface="Field&lt;Real&gt;"/>
            <javadoc line="22">
                &lt;p&gt; This class represents a real number of arbitrary precision with 
                 * known/guaranteed uncertainty. A real number consists of a {@link #getSignificand significand}, a maximum {@link #getError error} 
                 * (on the significand value) and a decimal {@link #getExponent exponent}: 
                 * (&lt;code&gt;(significand ± error) · 10&lt;sup&gt;exponent&lt;/sup&gt;&lt;/code&gt;).&lt;/p&gt;
                 * &lt;p&gt; Reals number can be {@link #isExact exact} (e.g. integer values 
                 * scaled by a power of ten). Exactness is maintained for{@link org.jscience.mathematics.structure.Ring Ring} operations
                 * (e.g. addition, multiplication), but typically lost when a 
                 * multiplicative {@link #inverse() inverse} is calculated. The minimum 
                 * precision used for exact numbers is set by {@link #setExactPrecision(int)} ({@link javolution.context.LocalContext context local} setting, default
                 * &lt;code&gt;19&lt;/code&gt; digits).&lt;p&gt;
                 * &lt;p&gt; The actual {@link #getPrecision precision} and {@link #getAccuracy 
                 * accuracy} of any real number is available and &lt;b&gt;guaranteed&lt;/b&gt; 
                 * (the true/exact value is always within the precision/accuracy range).&lt;/p&gt;
                 * &lt;p&gt; Operations on instances of this class are quite fast   
                 * as information substantially below the precision level (aka noise)
                 * is not processed/stored. There is no limit on a real precision
                 * but precision degenerates (due to numeric errors) and calculations 
                 * accelerate as more and more operations are performed.&lt;/p&gt;
                 * &lt;p&gt; Instances of this class can be utilized to find approximate 
                 * solutions to linear equations using the {@link org.jscience.mathematics.vector.Matrix Matrix} class for which
                 * high-precision reals is often required, the primitive type
                 * &lt;code&gt;double&lt;/code&gt; being not accurate enough to resolve equations 
                 * when the matrix&apos;s size exceeds 100x100. Furthermore, even for small 
                 * matrices the &quot;qualified&quot; result is indicative of possible system 
                 * singularities.&lt;/p&gt;                
                <@author>
                    r <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </@author>
                <@version>
                    n 3.3, January 8, 2006                    
                </@version>
                <@see>
                    e <a href="http://en.wikipedia.org/wiki/Real_number">
                     *      Wikipedia: Real number</a>                    
                </@see>
            </javadoc>
            <declaration name="XML" type="XMLFormat&lt;Real&gt;" line="65"/>
            <javadoc line="65">
                Holds the default XML representation for real numbers.
                 * This representation consists of a simple &lt;code&gt;value&lt;/code&gt; attribute
                 * holding the {@link #toText() textual} representation.                
            </javadoc>
            <anonymous_class line="70">
                <method name="newInstance" type="Real" line="74"/>
                <method name="write" type="void" line="79"/>
                <method name="read" type="void" line="83">
                    <comment line="84">
                        Nothing to do, immutable.                        
                    </comment>
                </method>
            </anonymous_class>
            <declaration name="NaN" type="Real" line="88"/>
            <javadoc line="88">
                Holds a Not-a-Number instance (infinite error).                
            </javadoc>
            <scope line="92"/>
            <declaration name="ZERO" type="Real" line="98"/>
            <javadoc line="98">
                Holds the exact ZERO instance.                
            </javadoc>
            <declaration name="ONE" type="Real" line="103"/>
            <javadoc line="103">
                Holds the exact ONE instance.                
            </javadoc>
            <declaration name="EXACT_PRECISION" type="LocalContext.Reference&lt;Integer&gt;" line="108"/>
            <javadoc line="108">
                Holds local precision for exact number.                
            </javadoc>
            <declaration name="_significand" type="LargeInteger" line="114"/>
            <javadoc line="114">
                The significand value.                
            </javadoc>
            <declaration name="_error" type="LargeInteger" line="119"/>
            <javadoc line="119">
                The significand error (0 for exact number).                
            </javadoc>
            <declaration name="_exponent" type="int" line="124"/>
            <javadoc line="124">
                The decimal exponent.                
            </javadoc>
            <javadoc line="129">
                Default constructor.                
            </javadoc>
            <method name="Real" type="constructor" line="132"/>
            <javadoc line="135">
                Returns the {@link javolution.context.LocalContext local} minimum 
                 * precision (number of exact digits) when exact numbers have to be
                 * approximated.                
                <@return>
                    n the minimum number of digits assumed exact for {@link #isExact 
                     * exact} real numbers.                    
                </@return>
            </javadoc>
            <method name="getExactPrecision" type="int" line="143"/>
            <javadoc line="147">
                Sets the {@link javolution.context.LocalContext local} minimum precision
                 * (number of exact digits) when exact numbers have to be approximated.                
                <@param>
                    m precision the minimum number of digits assumed exact for {@link #isExact exact} numbers.                    
                </@param>
            </javadoc>
            <method name="setExactPrecision" type="void" line="154"/>
            <javadoc line="158">
                Returns a real having the specified significand, error and exponent values.
                 * If the error is &lt;code&gt;0&lt;/code&gt;, the real is assumed exact. 
                 * For example:[code]
                 * // x = 0.0 ± 0.01 
                 * Real x = Real.valueOf(LargeInteger.ZERO, 1, -2);
                 * // y = -12.3 exact 
                 * Real y = Real.valueOf(LargeInteger.valueOf(-123), 0, -1);
                 * [/code]                
                <@param>
                    m significand this real significand.                    
                </@param>
                <@param>
                    m error the maximum error on the significand.                    
                </@param>
                <@param>
                    m exponent the decimal exponent.                    
                </@param>
                <@return>
                    n <code>(significand ± error)·10<sup>exponent</sup>)</code>                    
                </@return>
                <@throws>
                    s IllegalArgumentException if <code>error < 0</code>                    
                </@throws>
            </javadoc>
            <method name="valueOf" type="Real" line="178">
                <declaration name="real" type="Real" line="181"/>
            </method>
            <javadoc line="188">
                Returns the real number (inexact except for &lt;code&gt;0.0&lt;/code&gt;) 
                 * corresponding to the specified &lt;code&gt;double&lt;/code&gt; value. 
                 * The error is derived from the inexact representation of 
                 * &lt;code&gt;double&lt;/code&gt; values intrinsic to the 64 bits IEEE 754 format.                
                <@param>
                    m doubleValue the <code>double</code> value to convert.                    
                </@param>
                <@return>
                    n the corresponding real number.                    
                </@return>
            </javadoc>
            <method name="valueOf" type="Real" line="197">
                <comment line="198">
                    Find the exponent e such as: value == x.xxx * 10^e                    
                </comment>
                <comment line="198">
                    t e = MathLib.floorLog10(MathLib.abs(doubleValue)) - 18 + 1; // 18 digits significand.                    
                </comment>
                <declaration name="e" type="int" line="203"/>
                <declaration name="significand" type="long" line="204"/>
                <declaration name="error" type="int" line="205"/>
            </method>
            <javadoc line="209">
                Returns the exact real number corresponding to the specified 
                 * &lt;code&gt;long&lt;/code&gt; value (convenience method).                
                <@param>
                    m longValue the exact long value.                    
                </@param>
                <@return>
                    n <code>Real.valueOf(LargeInteger.valueOf(longValue), 0, 0)</code>                    
                </@return>
            </javadoc>
            <method name="valueOf" type="Real" line="216"/>
            <javadoc line="220">
                Returns the real for the specified character sequence.
                 * If the precision is not specified (using the &lt;code&gt;±&lt;/code&gt; symbol), 
                 * the real is supposed exact. Example of valid character sequences:
                 * &lt;li&gt;&quot;1.2E3&quot; (1200 exact)&lt;/li&gt;
                 * &lt;li&gt;&quot;1.2E3±1E-2&quot; (1200 ± 0.01)&lt;/li&gt;&lt;/ul&gt;                
                <@param>
                    m chars the character sequence.                    
                </@param>
                <@return>
                    n the corresponding real number.                    
                </@return>
                <@throws>
                    s NumberFormatException if the character sequence does not contain
                     * a parsable real.                    
                </@throws>
            </javadoc>
            <method name="valueOf" type="Real" line="232">
                <comment line="233">
                    xt txt = Text.valueOf(chars); // TODO Use TextFormat...                    
                </comment>
                <scope line="233"/>
                <declaration name="txt" type="Text" line="236"/>
                <declaration name="exponentIndex" type="int" line="241"/>
                <scope line="242">
                    <declaration name="exponent" type="int" line="243"/>
                    <declaration name="r" type="Real" line="245"/>
                </scope>
                <declaration name="real" type="Real" line="251"/>
                <declaration name="errorIndex" type="int" line="252"/>
                <scope line="253"/>
                <declaration name="decimalPointIndex" type="int" line="263"/>
                <scope line="264">
                    <declaration name="integer" type="LargeInteger" line="265"/>
                    <declaration name="fraction" type="LargeInteger" line="267"/>
                    <declaration name="fractionDigits" type="int" line="269"/>
                </scope>
                <scope line="276"/>
            </method>
            <javadoc line="284">
                Returns this real &lt;a href=&quot;http://en.wikipedia.org/wiki/Significand&quot;&gt;
                 * significand&lt;/a&gt; value.                
                <@return>
                    n the significand.                    
                </@return>
            </javadoc>
            <method name="getSignificand" type="LargeInteger" line="290"/>
            <javadoc line="294">
                Returns the maximum error (positive) on this real significand.                
                <@return>
                    n the maximum error on the significand.                    
                </@return>
            </javadoc>
            <method name="getError" type="int" line="299"/>
            <javadoc line="303">
                Returns the exponent of the power of 10 multiplier.                
                <@return>
                    n the decimal exponent.                    
                </@return>
            </javadoc>
            <method name="getExponent" type="int" line="308"/>
            <javadoc line="312">
                Indicates if this real number is exact (&lt;code&gt;{@link #getError() error} 
                 * == 0&lt;/code&gt;).                
                <@return>
                    n <code>getError() == 0</code>                    
                </@return>
            </javadoc>
            <method name="isExact" type="boolean" line="318"/>
            <javadoc line="322">
                Returns the number of decimal digits guaranteed exact which appear to
                 * the right of the decimal point (absolute error).                
                <@return>
                    n a measure of the absolute error of this real number.                    
                </@return>
            </javadoc>
            <method name="getAccuracy" type="int" line="328"/>
            <javadoc line="336">
                Returns the total number of decimal digits guaranteed exact
                 * (relative error).                
                <@return>
                    n a measure of the relative error of this real number.                    
                </@return>
            </javadoc>
            <method name="getPrecision" type="int" line="342"/>
            <javadoc line="350">
                Indicates if this real is greater than zero.                
                <@return>
                    n <code>this > 0</code>                    
                </@return>
            </javadoc>
            <method name="isPositive" type="boolean" line="355"/>
            <javadoc line="359">
                Indicates if this real is less than zero.                
                <@return>
                    n <code>this < 0</code>                    
                </@return>
            </javadoc>
            <method name="isNegative" type="boolean" line="364"/>
            <javadoc line="368">
                Indicates if this real is Not-a-Number (unbounded value interval).                
                <@return>
                    n <code>true</code> if this number has unbounded value interval;
                     * <code>false</code> otherwise.                    
                </@return>
            </javadoc>
            <method name="isNaN" type="boolean" line="374"/>
            <javadoc line="378">
                Indicates if this real approximates the one specified. 
                 * This method takes into account possible errors (e.g. numeric
                 * errors) to make this determination.
                 * &lt;p&gt;Note: This method returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;this&lt;/code&gt; or 
                 * &lt;code&gt;that&lt;/code&gt; {@link #isNaN} (basically Not-A-Number 
                 * approximates anything).&lt;/p&gt;                
                <@param>
                    m that the real to compare with.                    
                </@param>
                <@return>
                    n <code>this &asymp; that</code>                    
                </@return>
            </javadoc>
            <method name="approximates" type="boolean" line="390">
                <declaration name="diff" type="Real" line="391"/>
            </method>
            <javadoc line="397">
                Returns the closest integer value to this rational number.                
                <@return>
                    n this real rounded to the nearest integer.                    
                </@return>
                <@throws>
                    s ArithmeticException if <code>this.isNaN()</code>                    
                </@throws>
            </javadoc>
            <method name="round" type="LargeInteger" line="403">
                <declaration name="half" type="LargeInteger" line="406"/>
            </method>
            <javadoc line="411">
                Returns the negation of this real number.                
                <@return>
                    n <code>-this</code>.                    
                </@return>
            </javadoc>
            <method name="opposite" type="Real" line="416">
                <declaration name="real" type="Real" line="419"/>
            </method>
            <javadoc line="426">
                Returns the sum of this real number with the one specified.                
                <@param>
                    m that the real to be added.                    
                </@param>
                <@return>
                    n <code>this + that</code>.                    
                </@return>
            </javadoc>
            <method name="plus" type="Real" line="432">
                <comment line="433">
                    turn that.plus(this); // Adds to the real with smallest exponent.                    
                </comment>
                <comment line="433">
                    t scale = that._exponent - this._exponent; // &gt;= 0                    
                </comment>
                <declaration name="scale" type="int" line="437"/>
                <declaration name="real" type="Real" line="438"/>
            </method>
            <javadoc line="445">
                Returns the difference between this real number and the one
                 * specified.                
                <@param>
                    m that the real to be subtracted.                    
                </@param>
                <@return>
                    n <code>this - that</code>.                    
                </@return>
            </javadoc>
            <method name="minus" type="Real" line="452"/>
            <javadoc line="456">
                Returns the product of this real number with the specified 
                 * &lt;code&gt;long&lt;/code&gt; multiplier.                
                <@param>
                    m multiplier the <code>long</code> multiplier.                    
                </@param>
                <@return>
                    n <code>this · multiplier</code>.                    
                </@return>
            </javadoc>
            <method name="times" type="Real" line="463">
                <declaration name="real" type="Real" line="466"/>
            </method>
            <javadoc line="473">
                Returns the product of this real number with the one specified.                
                <@param>
                    m that the real multiplier.                    
                </@param>
                <@return>
                    n <code>this · that</code>.                    
                </@return>
            </javadoc>
            <method name="times" type="Real" line="479">
                <comment line="480">
                    turn NaN; // Exponent overflow.                    
                </comment>
                <declaration name="exp" type="long" line="482"/>
                <declaration name="thisMin" type="LargeInteger" line="485"/>
                <declaration name="thisMax" type="LargeInteger" line="486"/>
                <declaration name="thatMin" type="LargeInteger" line="487"/>
                <declaration name="thatMax" type="LargeInteger" line="488"/>
                <declaration name="min" type="LargeInteger" line="489"/>
                <scope line="490">
                    <scope line="491"/>
                    <scope line="494"/>
                </scope>
                <scope line="498">
                    <scope line="499"/>
                    <scope line="502"/>
                </scope>
                <declaration name="real" type="Real" line="507"/>
            </method>
            <javadoc line="514">
                Returns this real number divided by the specified &lt;code&gt;int&lt;/code&gt;
                 * divisor.                
                <@param>
                    m divisor the <code>int</code> divisor.                    
                </@param>
                <@return>
                    n <code>this / divisor</code>                    
                </@return>
            </javadoc>
            <method name="divide" type="Real" line="521"/>
            <javadoc line="525">
                Returns this real number divided by the one specified.                
                <@param>
                    m that the real divisor.                    
                </@param>
                <@return>
                    n <code>this / that</code>.                    
                </@return>
                <@throws>
                    s ArithmeticException if <code>that.equals(ZERO)</code>                    
                </@throws>
            </javadoc>
            <method name="divide" type="Real" line="532"/>
            <javadoc line="536">
                Returns the reciprocal (or inverse) of this real number.                
                <@return>
                    n <code>1 / this</code>.                    
                </@return>
            </javadoc>
            <method name="inverse" type="Real" line="541">
                <comment line="542">
                    turn NaN; // Exponent overflow.                    
                </comment>
                <declaration name="thisMin" type="LargeInteger" line="546"/>
                <declaration name="thisMax" type="LargeInteger" line="547"/>
                <declaration name="digits" type="int" line="550"/>
                <declaration name="exp" type="long" line="551"/>
                <declaration name="min" type="LargeInteger" line="554"/>
                <declaration name="max" type="LargeInteger" line="555"/>
                <declaration name="real" type="Real" line="556"/>
            </method>
            <method name="div" type="LargeInteger" line="563">
                <declaration name="expBitLength" type="int" line="564"/>
                <declaration name="precision" type="int" line="565"/>
                <declaration name="reciprocal" type="LargeInteger" line="566"/>
                <declaration name="result" type="LargeInteger" line="567"/>
            </method>
            <declaration name="DIGITS_TO_BITS" type="double" line="571"/>
            <method name="toInexact" type="Real" line="573">
                <declaration name="digits" type="int" line="574"/>
                <declaration name="scale" type="int" line="575"/>
                <declaration name="z" type="Real" line="576"/>
            </method>
            <javadoc line="583">
                Returns the absolute value of this real number.                
                <@return>
                    n <code>|this|</code>.                    
                </@return>
            </javadoc>
            <method name="abs" type="Real" line="588"/>
            <javadoc line="592">
                Compares the absolute value of two real numbers.                
                <@param>
                    m that the real number to be compared with.                    
                </@param>
                <@return>
                    n <code>|this| > |that|</code>                    
                </@return>
            </javadoc>
            <method name="isLargerThan" type="boolean" line="598"/>
            <javadoc line="602">
                Returns the square root of this real number, the more accurate is this 
                 * real number, the more accurate the square root.                
                <@return>
                    n the positive square root of this real number.                    
                </@return>
            </javadoc>
            <method name="sqrt" type="Real" line="608">
                <declaration name="thisMin" type="LargeInteger" line="614"/>
                <declaration name="thisMax" type="LargeInteger" line="615"/>
                <declaration name="exponent" type="int" line="618"/>
                <scope line="619"/>
                <declaration name="minSqrt" type="LargeInteger" line="623"/>
                <declaration name="maxSqrt" type="LargeInteger" line="624"/>
                <declaration name="sqrt" type="LargeInteger" line="625"/>
                <declaration name="z" type="Real" line="626"/>
            </method>
            <javadoc line="633">
                Returns the decimal text representation of this number.                
                <@return>
                    n the text representation of this number.                    
                </@return>
            </javadoc>
            <method name="toText" type="Text" line="638">
                <scope line="641"/>
                <declaration name="errorDigits" type="int" line="645"/>
                <declaration name="m" type="LargeInteger" line="646"/>
                <declaration name="exp" type="int" line="650"/>
                <declaration name="txt" type="Text" line="651"/>
                <declaration name="digits" type="int" line="652"/>
                <scope line="653">
                    <scope line="654"/>
                    <scope line="656"/>
                </scope>
                <scope line="661"/>
            </method>
            <javadoc line="667">
                Compares this real number against the specified object.
                 * &lt;p&gt;Note: This method returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;this&lt;/code&gt; or 
                 * &lt;code&gt;that&lt;/code&gt; {@link #isNaN is Not-A-Number}, even though
                 * &lt;code&gt;Double.NaN == Double.NaN&lt;/code&gt; has the value
                 * &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;                
                <@param>
                    m that the object to compare with.                    
                </@param>
                <@return>
                    n <code>true</code> if the objects are two reals with same 
                     * significand, error and exponent;<code>false</code> otherwise.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="679">
                <declaration name="thatReal" type="Real" line="684"/>
            </method>
            <javadoc line="690">
                Returns the hash code for this real number.                
                <@return>
                    n the hash code value.                    
                </@return>
            </javadoc>
            <method name="hashCode" type="int" line="695"/>
            <javadoc line="699">
                Returns the value of this real number as a &lt;code&gt;long&lt;/code&gt;.                
                <@return>
                    n the numeric value represented by this real after conversion
                     * to type <code>long</code>.                    
                </@return>
            </javadoc>
            <method name="longValue" type="long" line="705"/>
            <javadoc line="709">
                Returns the value of this real number as a &lt;code&gt;double&lt;/code&gt;.                
                <@return>
                    n the numeric value represented by this real after conversion
                     * to type <code>double</code>.                    
                </@return>
            </javadoc>
            <method name="doubleValue" type="double" line="715">
                <comment line="716">
                    Shift the significand to a &gt;18 digits integer (long compatible).                    
                </comment>
                <declaration name="nbrDigits" type="int" line="721"/>
                <declaration name="digitShift" type="int" line="722"/>
                <declaration name="reducedSignificand" type="long" line="723"/>
                <declaration name="exponent" type="int" line="724"/>
            </method>
            <javadoc line="728">
                Compares two real numbers numerically.                
                <@param>
                    m that the real to compare with.                    
                </@param>
                <@return>
                    n -1, 0 or 1 as this real is numerically less than, equal to,
                     * or greater than <code>that</code>.                    
                </@return>
                <@throws>
                    s ClassCastException <code>that</code> is not a {@link Real}.                    
                </@throws>
            </javadoc>
            <method name="compareTo" type="int" line="736">
                <declaration name="diff" type="Real" line="737"/>
                <scope line="738"/>
                <scope line="740"/>
                <scope line="742"/>
            </method>
            <javadoc line="747">
                Normalizes this real (maintains error less than 31 bits).                
                <@return>
                    n the normalized real.                    
                </@return>
            </javadoc>
            <method name="normalize" type="Real" line="752">
                <comment line="753">
                    (scale &gt;= 0) return this; // Small error.                    
                </comment>
                <declaration name="digitError" type="int" line="753"/>
                <declaration name="scale" type="int" line="754"/>
                <declaration name="z" type="Real" line="756"/>
            </method>
            <method name="copy" type="Real" line="764">
                <comment line="765">
                    (this == NaN) return NaN; // Maintains unicity.                    
                </comment>
            </method>
            <declaration name="FACTORY" type="ObjectFactory&lt;Real&gt;" line="769"/>
            <javadoc line="769">
                Holds the factory constructing real instances.                
            </javadoc>
            <anonymous_class line="772">
                <method name="create" type="Real" line="774"/>
            </anonymous_class>
            <declaration name="FIVE" type="LargeInteger" line="779"/>
            <declaration name="MINUS_FIVE" type="LargeInteger" line="781"/>
            <scope line="783">
                <scope line="785"/>
                <scope line="790"/>
            </scope>
            <declaration name="serialVersionUID" type="long" line="795"/>
        </class>
    </source>