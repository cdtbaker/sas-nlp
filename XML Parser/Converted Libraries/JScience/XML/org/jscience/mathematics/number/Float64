<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.number">
        <import package="org.jscience.mathematics.structure.Field"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TypeFormat"/>
        <import package="javolution.xml.XMLFormat"/>
        <import package="javolution.xml.stream.XMLStreamException"/>
        <class name="Float64" extends="Number<Float64>" line="20">
            <implements interface="Field&lt;Float64&gt;"/>
            <javadoc line="20">
                &lt;p&gt; This class represents a 64 bits floating point number.&lt;/p&gt;                
                <@author>
                    r <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </@author>
                <@version>
                    n 3.0, February 13, 2006                    
                </@version>
            </javadoc>
            <declaration name="XML" type="XMLFormat&lt;Float64&gt;" line="28"/>
            <javadoc line="28">
                Holds the default XML representation for 64 bits floating point numbers.
                 * This representation consists of a simple &lt;code&gt;value&lt;/code&gt; attribute
                 * holding the {@link #toText() textual} representation.                
            </javadoc>
            <anonymous_class line="33">
                <method name="newInstance" type="Float64" line="37"/>
                <method name="write" type="void" line="42"/>
                <method name="read" type="void" line="46">
                    <comment line="47">
                        Nothing to do, immutable.                        
                    </comment>
                </method>
            </anonymous_class>
            <declaration name="FACTORY" type="ObjectFactory&lt;Float64&gt;" line="51"/>
            <javadoc line="51">
                Holds the factory used to produce 64 bits float instances.                
            </javadoc>
            <anonymous_class line="54">
                <method name="create" type="Float64" line="56"/>
            </anonymous_class>
            <declaration name="ZERO" type="Float64" line="61"/>
            <javadoc line="61">
                The 64 bits floating point representing zero.                
            </javadoc>
            <declaration name="ONE" type="Float64" line="66"/>
            <javadoc line="66">
                The 64 bits floating point representing one.                
            </javadoc>
            <declaration name="_value" type="double" line="71"/>
            <javadoc line="71">
                The associated double value.                
            </javadoc>
            <javadoc line="76">
                Default constructor.                
            </javadoc>
            <method name="Float64" type="constructor" line="79"/>
            <javadoc line="82">
                Creates a 64 bits float having the specified &lt;code&gt;double&lt;/code&gt; value.                
                <@param>
                    m doubleValue the <code>double</code> value for this number.                    
                </@param>
            </javadoc>
            <method name="Float64" type="constructor" line="87"/>
            <javadoc line="91">
                Returns the 64 bits float from the specified &lt;code&gt;double&lt;/code&gt; value.                
                <@param>
                    m doubleValue the <code>double</code> value for this number.                    
                </@param>
                <@return>
                    n the corresponding number.                    
                </@return>
                <@see>
                    e #doubleValue()                    
                </@see>
            </javadoc>
            <method name="valueOf" type="Float64" line="98">
                <declaration name="r" type="Float64" line="99"/>
            </method>
            <javadoc line="104">
                Returns the number for the specified character sequence.                
                <@param>
                    m chars the character sequence.                    
                </@param>
                <@return>
                    n the corresponding number.                    
                </@return>
            </javadoc>
            <method name="valueOf" type="Float64" line="110">
                <declaration name="r" type="Float64" line="111"/>
            </method>
            <javadoc line="116">
                Indicates if this number is infinite.                
                <@return>
                    n <code>true</code> if this number is infinite;
                     * <code>false</code> otherwise.                    
                </@return>
            </javadoc>
            <method name="isInfinite" type="boolean" line="122"/>
            <javadoc line="126">
                Indicates if this number is not a number.                
                <@return>
                    n <code>true</code> if this number is NaN;
                     * <code>false</code> otherwise.                    
                </@return>
            </javadoc>
            <method name="isNaN" type="boolean" line="132"/>
            <javadoc line="136">
                Returns the closest integer value to this 64 bits floating point number.                
                <@return>
                    n this number rounded to the nearest integer.                    
                </@return>
            </javadoc>
            <method name="round" type="long" line="141"/>
            <javadoc line="145">
                Returns the opposite of this number.                
                <@return>
                    n <code>-this</code>.                    
                </@return>
            </javadoc>
            <method name="opposite" type="Float64" line="150">
                <declaration name="r" type="Float64" line="151"/>
            </method>
            <javadoc line="156">
                Returns the sum of this number with the one specified.                
                <@param>
                    m that the number to be added.                    
                </@param>
                <@return>
                    n <code>this + that</code>.                    
                </@return>
            </javadoc>
            <method name="plus" type="Float64" line="162">
                <declaration name="r" type="Float64" line="163"/>
            </method>
            <javadoc line="168">
                Returns the sum of this number with the specified value.                
                <@param>
                    m value the value to be added.                    
                </@param>
                <@return>
                    n <code>this + value</code>.                    
                </@return>
            </javadoc>
            <method name="plus" type="Float64" line="174">
                <declaration name="r" type="Float64" line="175"/>
            </method>
            <javadoc line="180">
                Returns the difference between this number and the one specified.                
                <@param>
                    m that the number to be subtracted.                    
                </@param>
                <@return>
                    n <code>this - that</code>.                    
                </@return>
            </javadoc>
            <method name="minus" type="Float64" line="186">
                <declaration name="r" type="Float64" line="187"/>
            </method>
            <javadoc line="192">
                Returns the difference between this number and the specified value.                
                <@param>
                    m value the value to be subtracted.                    
                </@param>
                <@return>
                    n <code>this - value</code>.                    
                </@return>
            </javadoc>
            <method name="minus" type="Float64" line="198">
                <declaration name="r" type="Float64" line="199"/>
            </method>
            <javadoc line="204">
                Returns the product of this number with the one specified.                
                <@param>
                    m that the number multiplier.                    
                </@param>
                <@return>
                    n <code>this · that</code>.                    
                </@return>
            </javadoc>
            <method name="times" type="Float64" line="210">
                <declaration name="r" type="Float64" line="211"/>
            </method>
            <javadoc line="216">
                Returns the product of this number with the specified value.                
                <@param>
                    m value the value multiplier.                    
                </@param>
                <@return>
                    n <code>this · value</code>.                    
                </@return>
            </javadoc>
            <method name="times" type="Float64" line="222">
                <declaration name="r" type="Float64" line="223"/>
            </method>
            <javadoc line="228">
                Returns the reciprocal of this number.                
                <@return>
                    n <code>1 / this</code>.                    
                </@return>
            </javadoc>
            <method name="inverse" type="Float64" line="233">
                <declaration name="r" type="Float64" line="234"/>
            </method>
            <javadoc line="239">
                Returns this number divided by the one specified.                
                <@param>
                    m that the number divisor.                    
                </@param>
                <@return>
                    n <code>this / that</code>.                    
                </@return>
            </javadoc>
            <method name="divide" type="Float64" line="245">
                <declaration name="r" type="Float64" line="246"/>
            </method>
            <javadoc line="251">
                Returns this number divided by the specified value.                
                <@param>
                    m value the value divisor.                    
                </@param>
                <@return>
                    n <code>this / value</code>.                    
                </@return>
            </javadoc>
            <method name="divide" type="Float64" line="257">
                <declaration name="r" type="Float64" line="258"/>
            </method>
            <javadoc line="263">
                Compares the absolute value of this number with that number.                
                <@param>
                    m that the number to compare with.                    
                </@param>
                <@return>
                    n <code>|this| > |that|</code>                    
                </@return>
            </javadoc>
            <method name="isLargerThan" type="boolean" line="269"/>
            <javadoc line="273">
                Returns the absolute value of this number.                
                <@return>
                    n <code>|this|</code>.                    
                </@return>
            </javadoc>
            <method name="abs" type="Float64" line="278">
                <declaration name="r" type="Float64" line="279"/>
            </method>
            <javadoc line="284">
                Returns the positive square root of this number.                
                <@return>
                    n <code>sqrt(this)</code>.                    
                </@return>
            </javadoc>
            <method name="sqrt" type="Float64" line="289">
                <declaration name="r" type="Float64" line="290"/>
            </method>
            <javadoc line="295">
                Returns the exponential number &lt;i&gt;e&lt;/i&gt; raised to the power of this
                 * number.                
                <@return>
                    n <code>exp(this)</code>.                    
                </@return>
            </javadoc>
            <method name="exp" type="Float64" line="301">
                <declaration name="r" type="Float64" line="302"/>
            </method>
            <javadoc line="307">
                Returns the natural logarithm (base e) of this number.                
                <@return>
                    n <code>log(this)</code>.                    
                </@return>
            </javadoc>
            <method name="log" type="Float64" line="312">
                <declaration name="r" type="Float64" line="313"/>
            </method>
            <javadoc line="318">
                Returns this number raised to the power of the specified exponent.                
                <@param>
                    m that the exponent.                    
                </@param>
                <@return>
                    n <code>this**that</code>.                    
                </@return>
            </javadoc>
            <method name="pow" type="Float64" line="324">
                <declaration name="r" type="Float64" line="325"/>
            </method>
            <javadoc line="330">
                Returns this number raised to the specified power.                
                <@param>
                    m e the exponent.                    
                </@param>
                <@return>
                    n <code>this**e</code>.                    
                </@return>
            </javadoc>
            <method name="pow" type="Float64" line="336">
                <declaration name="r" type="Float64" line="337"/>
            </method>
            <javadoc line="342">
                Returns the decimal text representation of this number.                
                <@return>
                    n the text representation of this number.                    
                </@return>
            </javadoc>
            <method name="toText" type="Text" line="347"/>
            <javadoc line="351">
                Compares this number against the specified object.                
                <@param>
                    m that the object to compare with.                    
                </@param>
                <@return>
                    n <code>true</code> if the objects are the same;
                     * <code>false</code> otherwise.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="358"/>
            <javadoc line="363">
                Indicates if this number is equal to the specified value.                
                <@param>
                    m value the value to compare with.                    
                </@param>
                <@return>
                    n <code>this.doubleValue() == value</code>.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="369"/>
            <javadoc line="373">
                Compares this number with the specified value for order.                
                <@param>
                    m value the value to be compared with.                    
                </@param>
                <@return>
                    n a negative integer, zero, or a positive integer as this number
                     * is less than, equal to, or greater than the specified value.                    
                </@return>
            </javadoc>
            <method name="compareTo" type="int" line="380">
                <scope line="381"/>
                <scope line="383"/>
                <scope line="385">
                    <declaration name="l1" type="long" line="386"/>
                    <declaration name="l2" type="long" line="387"/>
                </scope>
            </method>
            <javadoc line="392">
                Returns the hash code for this number.                
                <@return>
                    n the hash code value.                    
                </@return>
            </javadoc>
            <method name="hashCode" type="int" line="397">
                <declaration name="h" type="int" line="398"/>
            </method>
            <method name="longValue" type="long" line="406"/>
            <method name="doubleValue" type="double" line="411"/>
            <method name="compareTo" type="int" line="416"/>
            <method name="copy" type="Float64" line="421"/>
            <declaration name="serialVersionUID" type="long" line="425"/>
        </class>
    </source>