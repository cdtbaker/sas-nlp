<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.vector">
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="javolution.context.ArrayFactory"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.xml.XMLFormat"/>
        <import package="javolution.xml.stream.XMLStreamException"/>
        <import package="org.jscience.mathematics.number.Float64"/>
        <import package="org.jscience.mathematics.structure.VectorSpaceNormed"/>
        <class name="Float64Vector" line="21">
            <extends class="Vector">
                <type_params>
                    <type_param name="Float64"/>
                </type_params>
            </extends>
            <comment line="22">
                /////////////////////////////                
            </comment>
            <comment line="22">
                Package Private Utilities //                
            </comment>
            <comment line="22">
                /////////////////////////////                
            </comment>
            <implements interface="VectorSpaceNormed">
                <type_params>
                    <type_param name="Vector<Float64>"/>
                    <type_param name="Float64"/>
                </type_params>
            </implements>
            <javadoc line="21">
                &lt;p&gt; This class represents an optimized {@link Vector vector} implementation
                  for 64 bits floating point elements.&lt;/p&gt;                
                <@author>
                    r <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </@author>
                <@version>
                    n 3.3, January 2, 2007                    
                </@version>
            </javadoc>
            <declaration name="XML" type="XMLFormat&lt;Float64Vector&gt;" line="31"/>
            <javadoc line="31">
                Holds the default XML representation. For example:
                  [code]
                  &lt;Float64Vector dimension=&quot;2&quot;&gt;
                  &lt;Float64 value=&quot;1.0&quot; /&gt;
                  &lt;Float64 value=&quot;0.0&quot; /&gt;
                  &lt;/Float64Vector&gt;[/code]                
            </javadoc>
            <anonymous_class line="40">
                <method name="newInstance" type="Float64Vector" line="44">
                    <params>
                        <param name="cls" type="Class<Float64Vector>"/>
                        <param name="xml" type="InputElement"/>
                    </params>
                    <declaration name="dimension" type="int" line="45"/>
                    <declaration name="V" type="Float64Vector" line="46"/>
                </method>
                <method name="read" type="void" line="54">
                    <params>
                        <param name="xml" type="InputElement"/>
                        <param name="V" type="Float64Vector"/>
                    </params>
                    <scope line="55"/>
                </method>
                <method name="write" type="void" line="64">
                    <params>
                        <param name="V" type="Float64Vector"/>
                        <param name="xml" type="OutputElement"/>
                    </params>
                    <scope line="66"/>
                </method>
            </anonymous_class>
            <declaration name="FACTORY" type="ArrayFactory&lt;Float64Vector&gt;" line="72"/>
            <javadoc line="72">
                Holds factory for vectors with variable size arrays.                
            </javadoc>
            <anonymous_class line="76">
                <method name="create" type="Float64Vector" line="79">
                    <params>
                        <param name="capacity" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="_dimension" type="int" line="85"/>
            <javadoc line="85">
                Holds the dimension.                
            </javadoc>
            <declaration name="_values" type="double[]" line="90"/>
            <javadoc line="90">
                Holds the values.                
            </javadoc>
            <javadoc line="95">
                Creates a vector of specified capacity.                
            </javadoc>
            <method name="Float64Vector" type="constructor" line="98">
                <params>
                    <param name="capacity" type="int"/>
                </params>
            </method>
            <javadoc line="102">
                Returns a new vector holding the specified &lt;code&gt;double&lt;/code&gt; values.                
                <@param>
                    m values the vector values.                    
                </@param>
                <@return>
                    n the vector having the specified values.                    
                </@return>
            </javadoc>
            <method name="valueOf" type="Float64Vector" line="108">
                <params>
                    <param name="values" type="double"/>
                </params>
                <declaration name="n" type="int" line="109"/>
                <declaration name="V" type="Float64Vector" line="110"/>
            </method>
            <javadoc line="116">
                Returns a new vector holding the elements from the specified 
                  collection.                
                <@param>
                    m elements the collection of floating-points numbers.                    
                </@param>
                <@return>
                    n the vector having the specified elements.                    
                </@return>
            </javadoc>
            <method name="valueOf" type="Float64Vector" line="123">
                <params>
                    <param name="elements" type="List<Float64>"/>
                </params>
                <declaration name="n" type="int" line="124"/>
                <declaration name="V" type="Float64Vector" line="125"/>
                <declaration name="iterator" type="Iterator&lt;Float64&gt;" line="127"/>
                <scope line="128"/>
            </method>
            <javadoc line="134">
                Returns a {@link Float64Vector} instance equivalent to the 
                  specified vector.                
                <@param>
                    m that the vector to convert.                    
                </@param>
                <@return>
                    n <code>that</code> or new equivalent Float64Vector.                    
                </@return>
            </javadoc>
            <method name="valueOf" type="Float64Vector" line="141">
                <params>
                    <param name="that" type="Vector<Float64>"/>
                </params>
                <declaration name="n" type="int" line="144"/>
                <declaration name="V" type="Float64Vector" line="145"/>
                <scope line="147"/>
            </method>
            <javadoc line="153">
                Returns the value of a floating point number from this vector (fast).                
                <@param>
                    m i the floating point number index.                    
                </@param>
                <@return>
                    n the value of the floating point number at <code>i</code>.                    
                </@return>
                <@throws>
                    s IndexOutOfBoundsException <code>(i < 0) || (i >= dimension())</code>                    
                </@throws>
            </javadoc>
            <method name="getValue" type="double" line="160">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="166">
                Returns the Euclidian norm of this vector (square root of the 
                  dot product of this vector and itself).                
                <@return>
                    n <code>sqrt(this Â· this)</code>.                    
                </@return>
            </javadoc>
            <method name="norm" type="Float64" line="172"/>
            <javadoc line="176">
                Returns the {@link #norm()} value of this vector.                
                <@return>
                    n <code>this.norm().doubleValue()</code>.                    
                </@return>
            </javadoc>
            <method name="normValue" type="double" line="181">
                <declaration name="normSquared" type="double" line="182"/>
                <scope line="183">
                    <declaration name="values" type="double" line="184"/>
                </scope>
            </method>
            <method name="getDimension" type="int" line="191"/>
            <method name="get" type="Float64" line="196">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="opposite" type="Float64Vector" line="203">
                <declaration name="V" type="Float64Vector" line="204"/>
                <scope line="206"/>
            </method>
            <method name="plus" type="Float64Vector" line="213">
                <params>
                    <param name="that" type="Vector<Float64>"/>
                </params>
                <declaration name="T" type="Float64Vector" line="214"/>
                <declaration name="V" type="Float64Vector" line="216"/>
                <scope line="218"/>
            </method>
            <method name="minus" type="Float64Vector" line="225">
                <params>
                    <param name="that" type="Vector<Float64>"/>
                </params>
                <declaration name="T" type="Float64Vector" line="226"/>
                <declaration name="V" type="Float64Vector" line="228"/>
                <scope line="230"/>
            </method>
            <method name="times" type="Float64Vector" line="237">
                <params>
                    <param name="k" type="Float64"/>
                </params>
                <declaration name="V" type="Float64Vector" line="238"/>
                <declaration name="d" type="double" line="240"/>
                <scope line="241"/>
            </method>
            <javadoc line="247">
                Equivalent to &lt;code&gt;this.times(Float64.valueOf(k))&lt;/code&gt;                
                <@param>
                    m k the coefficient.                    
                </@param>
                <@return>
                    n <code>this  k</code>                    
                </@return>
            </javadoc>
            <method name="times" type="Float64Vector" line="253">
                <params>
                    <param name="k" type="double"/>
                </params>
                <declaration name="V" type="Float64Vector" line="254"/>
                <scope line="256"/>
            </method>
            <method name="times" type="Float64" line="263">
                <params>
                    <param name="that" type="Vector<Float64>"/>
                </params>
                <declaration name="T" type="Float64Vector" line="264"/>
                <declaration name="T_values" type="double[]" line="267"/>
                <declaration name="sum" type="double" line="268"/>
                <scope line="269"/>
            </method>
            <method name="cross" type="Float64Vector" line="277">
                <params>
                    <param name="that" type="Vector<Float64>"/>
                </params>
                <declaration name="T" type="Float64Vector" line="278"/>
                <declaration name="x" type="double" line="283"/>
                <declaration name="y" type="double" line="284"/>
                <declaration name="z" type="double" line="285"/>
            </method>
            <method name="copy" type="Float64Vector" line="290">
                <declaration name="V" type="Float64Vector" line="291"/>
                <scope line="293"/>
            </method>
            <method name="newInstance" type="Float64Vector" line="303">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="V" type="Float64Vector" line="304"/>
            </method>
            <method name="set" type="void" line="309">
                <params>
                    <param name="i" type="int"/>
                    <param name="v" type="double"/>
                </params>
            </method>
            <declaration name="serialVersionUID" type="long" line="313"/>
        </class>
    </source>