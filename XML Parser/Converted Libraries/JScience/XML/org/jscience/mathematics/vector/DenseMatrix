<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.vector">
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="javolution.context.ConcurrentContext"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.util.FastTable"/>
        <import package="org.jscience.mathematics.structure.Field"/>
        <class name="DenseMatrix" extends="Matrix<F>" line="20">
            <comment line="21">
                Logic to multiply two matrices.                
            </comment>
            <comment line="21">
                /////////////////////////////                
            </comment>
            <comment line="21">
                Package Private Utilities //                
            </comment>
            <comment line="21">
                /////////////////////////////                
            </comment>
            <comment line="21">
                /////////////////////                
            </comment>
            <comment line="21">
                Factory creation. //                
            </comment>
            <comment line="21">
                /////////////////////                
            </comment>
            <javadoc line="20">
                &lt;p&gt; This class represents a matrix made of {@link DenseVector dense
                 * vectors} (as rows). To create a dense matrix made of column vectors the {@link #transpose} method can be used. 
                 * For example:[code]
                 * DenseVector&lt;Rational&gt; column0 = DenseVector.valueOf(...);
                 * DenseVector&lt;Rational&gt; column1 = DenseVector.valueOf(...);
                 * DenseMatrix&lt;Rational&gt; M = DenseMatrix.valueOf(column0, column1).transpose();
                 * [/code]&lt;/p&gt;
                 * &lt;p&gt; As for any concrete {@link org.jscience.mathematics.structure.Structurestructure}, this class is declared &lt;code&gt;final&lt;/code&gt; (otherwise most
                 * operations would have to be overridden to return the appropriate type).
                 * Specialized dense matrix should sub-class {@link Matrix} directly.
                 * For example:[code]
                 * // Extension through composition.
                 * final class TriangularMatrix &lt;F extends Field&lt;F&gt;&gt; extends Matrix&lt;F&gt; {
                 * private DenseMatrix&lt;F&gt; _value; // Possible implementation.
                 * ...
                 * public TriangularMatrix opposite() { // Returns the right type.
                 * return TriangularMatrix.valueOf(_value.opposite());
                 * }
                 * ...
                 * }[/code]
                 * &lt;/p&gt;                
                <@author>
                    r <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </@author>
                <@version>
                    n 3.3, January 2, 2007                    
                </@version>
            </javadoc>
            <declaration name="_n" type="int" line="49"/>
            <javadoc line="49">
                Holds the number of columns n.                
            </javadoc>
            <declaration name="_transposed" type="boolean" line="54"/>
            <javadoc line="54">
                Indicates if this matrix is transposed (the rows are then the columns).                
            </javadoc>
            <declaration name="_rows" type="FastTable&lt;DenseVector&lt;F&gt;&gt;" line="59"/>
            <javadoc line="59">
                Holds this matrix rows (or columns when transposed).                
            </javadoc>
            <javadoc line="64">
                Returns a dense matrix from the specified 2-dimensional array.
                 * The first dimension being the row and the second being the column.                
                <@param>
                    m elements this matrix elements.                    
                </@param>
                <@return>
                    n the matrix having the specified elements.                    
                </@return>
                <@throws>
                    s DimensionException if rows have different length.                    
                </@throws>
                <@see>
                    e DenseMatrix                    
                </@see>
            </javadoc>
            <method name="valueOf" type="DenseMatrix<F>" line="73">
                <declaration name="m" type="int" line="74"/>
                <declaration name="n" type="int" line="75"/>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="76"/>
                <scope line="77">
                    <declaration name="row" type="DenseVector&lt;F&gt;" line="78"/>
                </scope>
            </method>
            <javadoc line="86">
                Returns a dense matrix holding the specified row vectors 
                 * (column vectors if {@link #transpose transposed}).                
                <@param>
                    m rows the row vectors.                    
                </@param>
                <@return>
                    n the matrix having the specified rows.                    
                </@return>
                <@throws>
                    s DimensionException if the rows do not have the same dimension.                    
                </@throws>
            </javadoc>
            <method name="valueOf" type="DenseMatrix<F>" line="95">
                <declaration name="n" type="int" line="96"/>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="97"/>
                <scope line="98">
                    <declaration name="rowi" type="DenseVector&lt;F&gt;" line="99"/>
                </scope>
            </method>
            <javadoc line="108">
                Returns a dense matrix holding the row vectors from the specified 
                 * collection (column vectors if {@link #transpose transposed}).                
                <@param>
                    m rows the list of row vectors.                    
                </@param>
                <@return>
                    n the matrix having the specified rows.                    
                </@return>
                <@throws>
                    s DimensionException if the rows do not have the same dimension.                    
                </@throws>
            </javadoc>
            <method name="valueOf" type="DenseMatrix<F>" line="117">
                <declaration name="n" type="int" line="118"/>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="119"/>
                <declaration name="iterator" type="Iterator&lt;DenseVector&lt;F&gt;&gt;" line="120"/>
                <scope line="121">
                    <declaration name="rowi" type="DenseVector&lt;F&gt;" line="122"/>
                </scope>
            </method>
            <javadoc line="131">
                Returns a dense matrix equivalent to the specified matrix.                
                <@param>
                    m that the matrix to convert.                    
                </@param>
                <@return>
                    n <code>that</code> or a dense matrix holding the same elements
                     * as the specified matrix.                    
                </@return>
            </javadoc>
            <method name="valueOf" type="DenseMatrix<F>" line="138">
                <declaration name="n" type="int" line="141"/>
                <declaration name="m" type="int" line="142"/>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="143"/>
                <scope line="144">
                    <declaration name="rowi" type="DenseVector&lt;F&gt;" line="145"/>
                </scope>
            </method>
            <method name="getNumberOfRows" type="int" line="152"/>
            <method name="getNumberOfColumns" type="int" line="157"/>
            <method name="get" type="F" line="162"/>
            <method name="getRow" type="DenseVector<F>" line="167">
                <comment line="168">
                    Else transposed.                    
                </comment>
                <declaration name="n" type="int" line="171"/>
                <declaration name="m" type="int" line="172"/>
                <declaration name="V" type="DenseVector&lt;F&gt;" line="175"/>
                <scope line="176"/>
            </method>
            <method name="getColumn" type="DenseVector<F>" line="183">
                <declaration name="m" type="int" line="186"/>
                <declaration name="V" type="DenseVector&lt;F&gt;" line="189"/>
                <scope line="190"/>
            </method>
            <method name="getDiagonal" type="DenseVector<F>" line="197">
                <declaration name="m" type="int" line="198"/>
                <declaration name="n" type="int" line="199"/>
                <declaration name="dimension" type="int" line="200"/>
                <declaration name="V" type="DenseVector&lt;F&gt;" line="201"/>
                <scope line="202"/>
            </method>
            <method name="opposite" type="DenseMatrix<F>" line="209">
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="210"/>
                <scope line="211"/>
            </method>
            <method name="plus" type="DenseMatrix<F>" line="218">
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="221"/>
                <scope line="222"/>
            </method>
            <method name="minus" type="DenseMatrix<F>" line="230">
                <comment line="231">
                    blic DenseMatrix&lt;F&gt; minus(Matrix&lt;F&gt; that) { // Returns more specialized type.                    
                </comment>
            </method>
            <method name="times" type="DenseMatrix<F>" line="235">
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="236"/>
                <scope line="237"/>
            </method>
            <method name="times" type="DenseVector<F>" line="244">
                <declaration name="m" type="int" line="247"/>
                <declaration name="V" type="DenseVector&lt;F&gt;" line="248"/>
                <scope line="249"/>
            </method>
            <method name="times" type="DenseMatrix<F>" line="256">
                <comment line="257">
                    Creates a mxp matrix in transposed form (p columns vectors of size m)                    
                </comment>
                <comment line="257">
                    nseMatrix&lt;F&gt; M = DenseMatrix.newInstance(m, true); // Transposed.                    
                </comment>
                <declaration name="n" type="int" line="257"/>
                <declaration name="m" type="int" line="258"/>
                <declaration name="p" type="int" line="259"/>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="263"/>
                <declaration name="multiply" type="Multiply&lt;F&gt;" line="265"/>
            </method>
            <class name="Multiply" line="272">
                <implements interface="Runnable"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Multiply&gt;" line="273"/>
                <anonymous_class line="273">
                    <method name="create" type="Multiply" line="276"/>
                </anonymous_class>
                <declaration name="_left" type="DenseMatrix&lt;F&gt;" line="281"/>
                <declaration name="_right" type="Matrix&lt;F&gt;" line="283"/>
                <declaration name="_rightColumnStart" type="int" line="285"/>
                <declaration name="_rightColumnEnd" type="int" line="287"/>
                <declaration name="_columnsResult" type="FastTable&lt;DenseVector&lt;F&gt;&gt;" line="289"/>
                <method name="valueOf" type="Multiply<F>" line="294">
                    <declaration name="multiply" type="Multiply&lt;F&gt;" line="295"/>
                </method>
                <method name="recycle" type="void" line="304"/>
                <method name="run" type="void" line="311">
                    <scope line="312">
                        <declaration name="rows" type="FastTable&lt;DenseVector&lt;F&gt;&gt;" line="313"/>
                        <declaration name="m" type="int" line="314"/>
                        <scope line="315">
                            <declaration name="thatColj" type="Vector&lt;F&gt;" line="316"/>
                            <declaration name="column" type="DenseVector&lt;F&gt;" line="317"/>
                            <scope line="319"/>
                        </scope>
                    </scope>
                    <scope line="323">
                        <declaration name="halfIndex" type="int" line="324"/>
                        <declaration name="firstHalf" type="Multiply&lt;F&gt;" line="325"/>
                        <declaration name="secondHalf" type="Multiply&lt;F&gt;" line="327"/>
                        <scope line="330"/>
                        <scope line="333"/>
                    </scope>
                </method>
            </class>
            <method name="getRows" type="FastTable<DenseVector<F>>" line="342">
                <declaration name="rows" type="FastTable&lt;DenseVector&lt;F&gt;&gt;" line="345"/>
                <scope line="346"/>
            </method>
            <method name="inverse" type="DenseMatrix<F>" line="353"/>
            <method name="determinant" type="F" line="360"/>
            <method name="transpose" type="DenseMatrix<F>" line="365">
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="366"/>
            </method>
            <method name="cofactor" type="F" line="372">
                <scope line="373">
                    <declaration name="k" type="int" line="374"/>
                </scope>
                <declaration name="m" type="int" line="378"/>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="379"/>
                <scope line="380">
                    <declaration name="row" type="DenseVector&lt;F&gt;" line="383"/>
                    <declaration name="V" type="DenseVector&lt;F&gt;" line="384"/>
                    <scope line="386"/>
                </scope>
            </method>
            <method name="adjoint" type="DenseMatrix<F>" line="396">
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="397"/>
                <declaration name="m" type="int" line="398"/>
                <scope line="399">
                    <declaration name="row" type="DenseVector&lt;F&gt;" line="400"/>
                    <scope line="402">
                        <declaration name="cofactor" type="F" line="403"/>
                    </scope>
                </scope>
            </method>
            <method name="tensor" type="Matrix<F>" line="412">
                <comment line="413">
                    t n = thisn * thatn; // Number of columns,                    
                </comment>
                <comment line="413">
                    t m = thism * thatm; // Number of rows.                    
                </comment>
                <declaration name="thism" type="int" line="413"/>
                <declaration name="thisn" type="int" line="414"/>
                <declaration name="thatm" type="int" line="415"/>
                <declaration name="thatn" type="int" line="416"/>
                <declaration name="n" type="int" line="417"/>
                <declaration name="m" type="int" line="418"/>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="419"/>
                <scope line="420">
                    <declaration name="i_rem_thatm" type="int" line="421"/>
                    <declaration name="i_div_thatm" type="int" line="422"/>
                    <declaration name="row" type="DenseVector&lt;F&gt;" line="423"/>
                    <scope line="425">
                        <declaration name="a" type="F" line="426"/>
                        <scope line="427"/>
                    </scope>
                </scope>
            </method>
            <method name="vectorization" type="Vector<F>" line="436">
                <declaration name="V" type="DenseVector&lt;F&gt;" line="437"/>
                <scope line="438">
                    <declaration name="column" type="Vector&lt;F&gt;" line="439"/>
                    <scope line="440"/>
                </scope>
            </method>
            <method name="copy" type="DenseMatrix<F>" line="448">
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="449"/>
                <scope line="450"/>
            </method>
            <method name="set" type="void" line="460">
                <scope line="461"/>
                <scope line="463"/>
            </method>
            <method name="newInstance" type="DenseMatrix<F>" line="474">
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="475"/>
            </method>
            <declaration name="FACTORY" type="ObjectFactory&lt;DenseMatrix&gt;" line="481"/>
            <anonymous_class line="481">
                <method name="create" type="DenseMatrix" line="483"/>
                <method name="cleanup" type="void" line="488"/>
            </anonymous_class>
            <method name="DenseMatrix" type="constructor" line="493"/>
            <declaration name="serialVersionUID" type="long" line="496"/>
        </class>
    </source>