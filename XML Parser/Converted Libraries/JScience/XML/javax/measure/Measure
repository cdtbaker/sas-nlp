<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.measure">
        <import package="java.io.Serializable"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.math.MathContext"/>
        <import package="javax.measure.quantity.Quantity"/>
        <import package="javax.measure.unit.CompoundUnit"/>
        <import package="javax.measure.unit.Unit"/>
        <class name="Measure" line="19">
            <implements interface="Measurable&lt;Q&gt;"/>
            <implements interface="Serializable"/>
            <javadoc line="19">
                &lt;p&gt; This class represents the result of a measurement stated in a 
                 * known unit.&lt;/p&gt;
                 * &lt;p&gt; There is no constraint upon the measurement value itself: scalars, 
                 * vectors, or even data sets are valid values as long as 
                 * an aggregate magnitude can be determined (see {@link Measurable}).&lt;/p&gt;                
                <@author>
                    r  <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </@author>
                <@version>
                    n 4.2, August 26, 2007                    
                </@version>
            </javadoc>
            <javadoc line="33">
                Default constructor.                
            </javadoc>
            <method name="Measure" type="constructor" line="36"/>
            <javadoc line="39">
                Returns the scalar measure for the specified &lt;code&gt;double&lt;/code&gt;
                 * stated in the specified unit.                
                <@param>
                    m doubleValue the measurement value.                    
                </@param>
                <@param>
                    m unit the measurement unit.                    
                </@param>
            </javadoc>
            <method name="valueOf" type="Measure<java.lang.Double,Q>" line="47"/>
            <javadoc line="51">
                Returns the scalar measure for the specified &lt;code&gt;double&lt;/code&gt;
                 * stated in the specified unit.                
                <@param>
                    m longValue the measurement value.                    
                </@param>
                <@param>
                    m unit the measurement unit.                    
                </@param>
            </javadoc>
            <method name="valueOf" type="Measure<java.lang.Long,Q>" line="59"/>
            <javadoc line="63">
                Returns the scalar measure for the specified &lt;code&gt;float&lt;/code&gt;
                 * stated in the specified unit.                
                <@param>
                    m floatValue the measurement value.                    
                </@param>
                <@param>
                    m unit the measurement unit.                    
                </@param>
            </javadoc>
            <method name="valueOf" type="Measure<java.lang.Float,Q>" line="71"/>
            <javadoc line="75">
                Returns the scalar measure for the specified &lt;code&gt;int&lt;/code&gt;
                 * stated in the specified unit.                
                <@param>
                    m intValue the measurement value.                    
                </@param>
                <@param>
                    m unit the measurement unit.                    
                </@param>
            </javadoc>
            <method name="valueOf" type="Measure<java.lang.Integer,Q>" line="83"/>
            <method name="getValue" type="V" line="87"/>
            <javadoc line="87">
                Returns the measurement value of this measure.                
                <@return>
                    n the measurement value.                    
                </@return>
            </javadoc>
            <method name="getUnit" type="Unit<Q>" line="94"/>
            <javadoc line="94">
                Returns the measurement unit of this measure.                
                <@return>
                    n the measurement unit.                    
                </@return>
            </javadoc>
            <method name="to" type="Measure<V,Q>" line="101"/>
            <javadoc line="101">
                Returns the measure equivalent to this measure but stated in the 
                 * specified unit. This method may result in lost of precision 
                 * (e.g. measure of integral value).                
                <@param>
                    m unit the new measurement unit.                    
                </@param>
                <@return>
                    n the measure stated in the specified unit.                    
                </@return>
            </javadoc>
            <method name="doubleValue" type="double" line="111"/>
            <javadoc line="111">
                Returns the value of this measure stated in the specified unit as 
                 * a &lt;code&gt;double&lt;/code&gt;. If the measure has too great a magnitude to 
                 * be represented as a &lt;code&gt;double&lt;/code&gt;, it will be converted to 
                 * &lt;code&gt;Double.NEGATIVE_INFINITY&lt;/code&gt; or
                 * &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt; as appropriate.                
                <@param>
                    m unit the unit in which this measure is stated.                    
                </@param>
                <@return>
                    n the numeric value after conversion to type <code>double</code>.                    
                </@return>
            </javadoc>
            <javadoc line="123">
                Returns the estimated integral value of this measure stated in 
                 * the specified unit as a &lt;code&gt;long&lt;/code&gt;. 
                 * &lt;p&gt; Note: This method differs from the &lt;code&gt;Number.longValue()&lt;/code&gt;
                 * in the sense that the closest integer value is returned 
                 * and an ArithmeticException is raised instead
                 * of a bit truncation in case of overflow (safety critical).&lt;/p&gt;                
                <@param>
                    m unit the unit in which the measurable value is stated.                    
                </@param>
                <@return>
                    n the numeric value after conversion to type <code>long</code>.                    
                </@return>
                <@throws>
                    s ArithmeticException if this quantity cannot be represented 
                     * as a <code>long</code> number in the specified unit.                    
                </@throws>
            </javadoc>
            <method name="longValue" type="long" line="137">
                <declaration name="doubleValue" type="double" line="138"/>
            </method>
            <javadoc line="147">
                Returns the value of this measure stated in the specified unit as a 
                 * &lt;code&gt;float&lt;/code&gt;. If the measure has too great a magnitude to be 
                 * represented as a &lt;code&gt;float&lt;/code&gt;, it will be converted to 
                 * &lt;code&gt;Float.NEGATIVE_INFINITY&lt;/code&gt; or
                 * &lt;code&gt;Float.POSITIVE_INFINITY&lt;/code&gt; as appropriate.                
                <@param>
                    m unit the unit in which the measure is stated.                    
                </@param>
                <@return>
                    n the numeric value after conversion to type <code>float</code>.                    
                </@return>
            </javadoc>
            <method name="floatValue" type="float" line="157"/>
            <javadoc line="161">
                Returns the estimated integral value of this measure stated in 
                 * the specified unit as a &lt;code&gt;int&lt;/code&gt;. 
                 * &lt;p&gt; Note: This method differs from the &lt;code&gt;Number.intValue()&lt;/code&gt;
                 * in the sense that the closest integer value is returned 
                 * and an ArithmeticException is raised instead
                 * of a bit truncation in case of overflow (safety critical).&lt;/p&gt;                
                <@param>
                    m unit the unit in which the measurable value is stated.                    
                </@param>
                <@return>
                    n the numeric value after conversion to type <code>int</code>.                    
                </@return>
                <@throws>
                    s ArithmeticException if this quantity cannot be represented 
                     * as a <code>int</code> number in the specified unit.                    
                </@throws>
            </javadoc>
            <method name="intValue" type="int" line="175">
                <declaration name="longValue" type="long" line="176"/>
            </method>
            <javadoc line="183">
                Compares this measure against the specified object for 
                 * strict equality (same unit and amount).
                 * To compare measures stated using different units the  {@link #compareTo} method should be used.                
                <@param>
                    m obj the object to compare with.                    
                </@param>
                <@return>
                    n <code>true</code> if both objects are identical (same 
                     * unit and same amount); <code>false</code> otherwise.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="194">
                <declaration name="that" type="Measure" line="197"/>
            </method>
            <javadoc line="202">
                Returns the hash code for this scalar.                
                <@return>
                    n the hash code value.                    
                </@return>
            </javadoc>
            <method name="hashCode" type="int" line="207"/>
            <javadoc line="211">
                Returns the &lt;code&gt;String&lt;/code&gt; representation of this measure
                 * The string produced for a given measure is always the same;
                 * it is not affected by locale.  This means that it can be used
                 * as a canonical string representation for exchanging data, 
                 * or as a key for a Hashtable, etc.  Locale-sensitive
                 * measure formatting and parsing is handled by the {@link MeasureFormat} class and its subclasses.                
                <@return>
                    n the string representation of this measure.                    
                </@return>
            </javadoc>
            <method name="toString" type="String" line="222"/>
            <javadoc line="229">
                Compares this measure to the specified measurable quantity.
                 * This method compares the {@link Measurable#doubleValue(Unit)} of 
                 * both this measure and the specified measurable stated in the 
                 * same unit (this measure&apos;s {@link #getUnit() unit}).                
                <@return>
                    n  a negative integer, zero, or a positive integer as this measure
                     * is less than, equal to, or greater than the specified measurable
                     * quantity.                    
                </@return>
                <@return>
                    n <code>Double.compare(this.doubleValue(getUnit()), 
                     * that.doubleValue(getUnit()))</code>                    
                </@return>
            </javadoc>
            <method name="compareTo" type="int" line="241"/>
            <class name="Double" extends="Measure<java.lang.Double,Q>" line="246">
                <javadoc line="246">
                    Holds scalar implementation for &lt;code&gt;double&lt;/code&gt; values.                    
                </javadoc>
                <declaration name="_value" type="double" line="252"/>
                <declaration name="_unit" type="Unit&lt;Q&gt;" line="254"/>
                <method name="Double" type="constructor" line="256"/>
                <method name="getUnit" type="Unit<Q>" line="262"/>
                <method name="getValue" type="java.lang.Double" line="267"/>
                <method name="to" type="Measure<java.lang.Double,Q>" line="272"/>
                <method name="doubleValue" type="double" line="278"/>
                <declaration name="serialVersionUID" type="long" line="284"/>
            </class>
            <class name="Long" extends="Measure<java.lang.Long,Q>" line="287">
                <javadoc line="287">
                    Holds scalar implementation for &lt;code&gt;long&lt;/code&gt; values.                    
                </javadoc>
                <declaration name="_value" type="long" line="293"/>
                <declaration name="_unit" type="Unit&lt;Q&gt;" line="295"/>
                <method name="Long" type="constructor" line="297"/>
                <method name="getUnit" type="Unit<Q>" line="303"/>
                <method name="getValue" type="java.lang.Long" line="308"/>
                <method name="to" type="Measure<java.lang.Long,Q>" line="313"/>
                <method name="doubleValue" type="double" line="319"/>
                <method name="longValue" type="long" line="325">
                    <comment line="326">
                        turn _value; // No conversion, returns value directly.                        
                    </comment>
                    <comment line="415">
                        turn _value; // No conversion, returns value directly.                        
                    </comment>
                </method>
                <declaration name="serialVersionUID" type="long" line="331"/>
            </class>
            <class name="Float" extends="Measure<java.lang.Float,Q>" line="335">
                <javadoc line="335">
                    Holds scalar implementation for &lt;code&gt;float&lt;/code&gt; values.                    
                </javadoc>
                <declaration name="_value" type="float" line="341"/>
                <declaration name="_unit" type="Unit&lt;Q&gt;" line="343"/>
                <method name="Float" type="constructor" line="345"/>
                <method name="getUnit" type="Unit<Q>" line="351"/>
                <method name="getValue" type="java.lang.Float" line="356"/>
                <method name="to" type="Measure<java.lang.Float,Q>" line="361"/>
                <method name="doubleValue" type="double" line="367"/>
                <declaration name="serialVersionUID" type="long" line="373"/>
            </class>
            <class name="Integer" extends="Measure<java.lang.Integer,Q>" line="376">
                <javadoc line="376">
                    Holds scalar implementation for &lt;code&gt;long&lt;/code&gt; values.                    
                </javadoc>
                <declaration name="_value" type="int" line="382"/>
                <declaration name="_unit" type="Unit&lt;Q&gt;" line="384"/>
                <method name="Integer" type="constructor" line="386"/>
                <method name="getUnit" type="Unit<Q>" line="392"/>
                <method name="getValue" type="java.lang.Integer" line="397"/>
                <method name="to" type="Measure<java.lang.Integer,Q>" line="402"/>
                <method name="doubleValue" type="double" line="408"/>
                <method name="longValue" type="long" line="414">
                    <comment line="326">
                        turn _value; // No conversion, returns value directly.                        
                    </comment>
                    <comment line="415">
                        turn _value; // No conversion, returns value directly.                        
                    </comment>
                </method>
                <declaration name="serialVersionUID" type="long" line="420"/>
            </class>
            <javadoc line="424">
                @deprecated {@link DecimalMeasure} should be used directly.                
            </javadoc>
            <method name="valueOf" type="Measure<BigDecimal,Q>" line="428"/>
            <javadoc line="432">
                @deprecated {@link DecimalMeasure} should be used directly and 
                 * &lt;code&gt;MathContext&lt;/code&gt; specified explicitly when {@link DecimalMeasure#to(Unit,MathContext) converting}.                
            </javadoc>
            <method name="valueOf" type="Measure<BigDecimal,Q>" line="438"/>
            <javadoc line="442">
                @deprecated {@link VectorMeasure} should be used directly.                
            </javadoc>
            <method name="valueOf" type="Measure<double[],Q>" line="446"/>
        </class>
    </source>