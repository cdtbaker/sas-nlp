<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.measure">
        <import package="javax.measure.converter.UnitConverter"/>
        <import package="javax.measure.quantity.Quantity"/>
        <import package="javax.measure.unit.CompoundUnit"/>
        <import package="javax.measure.unit.Unit"/>
        <class name="VectorMeasure" extends="Measure<double[],Q>" line="16">
            <comment line="17">
                Holds 2-dimensional implementation.                
            </comment>
            <comment line="17">
                Holds 3-dimensional implementation.                
            </comment>
            <comment line="17">
                Holds multi-dimensional implementation.                
            </comment>
            <javadoc line="16">
                &lt;p&gt; This class represents a measurement vector of two or more dimensions.
                 * For example:[code]
                 * VectorMeasure&lt;Length&gt; dimension = VectorMeasure.valueOf(12.0, 30.0, 40.0, MILLIMETER);
                 * VectorMeasure&lt;Velocity&gt; v2d = VectorMeasure.valueOf(-2.2, -3.0, KNOTS);
                 * VectorMeasure&lt;ElectricCurrent&gt; c2d = VectorMeasure.valueOf(-7.3, 3.5, NANOAMPERE);
                 * [/code]
                 * &lt;/p&gt;
                 * &lt;p&gt; Subclasses may provide fixed dimensions specializations:[code]
                 * class Velocity2D extends VectorMeasure&lt;Velocity&gt; {
                 * public Velocity2D(double x, double y, Unit&lt;Velocity&gt; unit) {
                 * ...
                 * }
                 * }
                 * [/code]&lt;/p&gt;
                 * &lt;p&gt; Measurement vectors may use {@link CompoundUnit compound units}:[code]
                 * VectorMeasure&lt;Angle&gt; latLong = VectorMeasure.valueOf(12.345, 22.23, DEGREE_ANGLE);
                 * Unit&lt;Angle&gt; HOUR_MINUTE_SECOND_ANGLE = DEGREE_ANGLE.compound(MINUTE_ANGLE).compound(SECOND_ANGLE);
                 * System.out.println(latLong.to(HOUR_MINUTE_SECOND_ANGLE));
                 * &gt; [12°19&apos;42&quot;, 22°12&apos;48&quot;] [/code]&lt;/p&gt;
                 * &lt;p&gt; Instances of this class (and sub-classes) are immutable.&lt;/p&gt;                
                <@author>
                    r  <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </@author>
                <@version>
                    n 4.3, October 3, 2007                    
                </@version>
            </javadoc>
            <javadoc line="47">
                Default constructor (for sub-classes).                
            </javadoc>
            <method name="VectorMeasure" type="constructor" line="50"/>
            <javadoc line="53">
                Returns a 2-dimensional measurement vector.                
                <@param>
                    m x the first vector component value.                    
                </@param>
                <@param>
                    m y the second vector component value.                    
                </@param>
                <@param>
                    m unit the measurement unit.                    
                </@param>
            </javadoc>
            <method name="valueOf" type="VectorMeasure<Q>" line="61"/>
            <javadoc line="65">
                Returns a 3-dimensional measurement vector.                
                <@param>
                    m x the first vector component value.                    
                </@param>
                <@param>
                    m y the second vector component value.                    
                </@param>
                <@param>
                    m z the third vector component value.                    
                </@param>
                <@param>
                    m unit the measurement unit.                    
                </@param>
            </javadoc>
            <method name="valueOf" type="VectorMeasure<Q>" line="74"/>
            <javadoc line="78">
                Returns a multi-dimensional measurement vector.                
                <@param>
                    m components the vector component values.                    
                </@param>
                <@param>
                    m unit the measurement unit.                    
                </@param>
            </javadoc>
            <method name="valueOf" type="VectorMeasure<Q>" line="85"/>
            <method name="to" type="VectorMeasure<Q>" line="89"/>
            <javadoc line="89">
                Returns the measurement vector equivalent to this one but stated in the 
                 * specified unit.                
                <@param>
                    m unit the new measurement unit.                    
                </@param>
                <@return>
                    n the vector measure stated in the specified unit.                    
                </@return>
            </javadoc>
            <method name="doubleValue" type="double" line="98"/>
            <javadoc line="98">
                Returns the norm of this measurement vector stated in the specified
                 * unit.                
                <@param>
                    m unit the unit in which the norm is stated.                    
                </@param>
                <@return>
                    n <code>|this|</code>                    
                </@return>
            </javadoc>
            <javadoc line="107">
                Returns the &lt;code&gt;String&lt;/code&gt; representation of this measurement
                 * vector (for example &lt;code&gt;[2.3 m/s, 5.6 m/s]&lt;/code&gt;).                
                <@return>
                    n the textual representation of the measurement vector.                    
                </@return>
            </javadoc>
            <method name="toString" type="String" line="113">
                <declaration name="values" type="double[]" line="114"/>
                <declaration name="unit" type="Unit&lt;Q&gt;" line="115"/>
                <declaration name="tmp" type="StringBuffer" line="116"/>
                <scope line="118">
                    <scope line="119"/>
                    <scope line="122"/>
                    <scope line="124"/>
                </scope>
            </method>
            <class name="TwoDimensional" extends="VectorMeasure<Q>" line="133">
                <declaration name="_x" type="double" line="135"/>
                <declaration name="_y" type="double" line="137"/>
                <declaration name="_unit" type="Unit&lt;Q&gt;" line="139"/>
                <method name="TwoDimensional" type="constructor" line="141"/>
                <method name="doubleValue" type="double" line="148">
                    <declaration name="norm" type="double" line="149"/>
                </method>
                <method name="getUnit" type="Unit<Q>" line="156"/>
                <method name="getValue" type="double[]" line="161"/>
                <method name="to" type="TwoDimensional<Q>" line="166">
                    <declaration name="cvtr" type="UnitConverter" line="169"/>
                </method>
                <declaration name="serialVersionUID" type="long" line="173"/>
            </class>
            <class name="ThreeDimensional" extends="VectorMeasure<Q>" line="178">
                <declaration name="_x" type="double" line="180"/>
                <declaration name="_y" type="double" line="182"/>
                <declaration name="_z" type="double" line="184"/>
                <declaration name="_unit" type="Unit&lt;Q&gt;" line="186"/>
                <method name="ThreeDimensional" type="constructor" line="188"/>
                <method name="doubleValue" type="double" line="196">
                    <declaration name="norm" type="double" line="197"/>
                </method>
                <method name="getUnit" type="Unit<Q>" line="204"/>
                <method name="getValue" type="double[]" line="209"/>
                <method name="to" type="ThreeDimensional<Q>" line="214">
                    <declaration name="cvtr" type="UnitConverter" line="217"/>
                </method>
                <declaration name="serialVersionUID" type="long" line="221"/>
            </class>
            <class name="MultiDimensional" extends="VectorMeasure<Q>" line="225">
                <declaration name="_components" type="double[]" line="227"/>
                <declaration name="_unit" type="Unit&lt;Q&gt;" line="229"/>
                <method name="MultiDimensional" type="constructor" line="231"/>
                <method name="doubleValue" type="double" line="237">
                    <declaration name="normSquare" type="double" line="238"/>
                    <scope line="239">
                        <declaration name="d" type="double" line="240"/>
                    </scope>
                </method>
                <method name="getUnit" type="Unit<Q>" line="249"/>
                <method name="getValue" type="double[]" line="254"/>
                <method name="to" type="MultiDimensional<Q>" line="259">
                    <declaration name="cvtr" type="UnitConverter" line="262"/>
                    <declaration name="newValues" type="double[]" line="263"/>
                    <scope line="264"/>
                </method>
                <declaration name="serialVersionUID" type="long" line="270"/>
            </class>
        </class>
    </source>