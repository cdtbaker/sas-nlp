<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.measure.unit">
        <import package="javax.measure.converter.UnitConverter"/>
        <import package="javax.measure.quantity.Quantity"/>
        <class name="CompoundUnit" extends="DerivedUnit<Q>" line="14">
            <javadoc line="14">
                &lt;p&gt; This class represents the multi-radix units (such as &quot;hour:min:sec&quot;). 
                 * Instances of this class are created using the {@link Unit#compoundUnit.compound} method.&lt;/p&gt;
                 * &lt;p&gt; Examples of compound units:[code]
                 * Unit&lt;Duration&gt; HOUR_MINUTE_SECOND = HOUR.compound(MINUTE).compound(SECOND);
                 * Unit&lt;Angle&gt; DEGREE_MINUTE_ANGLE = DEGREE_ANGLE.compound(MINUTE_ANGLE);
                 * [/code]&lt;/p&gt;                
                <@author>
                    r  <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </@author>
                <@version>
                    n 3.1, April 22, 2006                    
                </@version>
            </javadoc>
            <declaration name="_high" type="Unit&lt;Q&gt;" line="29"/>
            <javadoc line="29">
                Holds the higher unit.                
            </javadoc>
            <declaration name="_low" type="Unit&lt;Q&gt;" line="34"/>
            <javadoc line="34">
                Holds the lower unit.                
            </javadoc>
            <javadoc line="39">
                Creates a compound unit from the specified units.                
                <@param>
                    m high the high unit.                    
                </@param>
                <@param>
                    m low the lower unit(s)                    
                </@param>
                <@throws>
                    s IllegalArgumentException if both units do not the same system
                     * unit.                    
                </@throws>
            </javadoc>
            <method name="CompoundUnit" type="constructor" line="47"/>
            <javadoc line="56">
                Returns the lower unit of this compound unit.                
                <@return>
                    n the lower unit.                    
                </@return>
            </javadoc>
            <method name="getLower" type="Unit<Q>" line="61"/>
            <javadoc line="65">
                Returns the higher unit of this compound unit.                
                <@return>
                    n the higher unit.                    
                </@return>
            </javadoc>
            <method name="getHigher" type="Unit<Q>" line="70"/>
            <javadoc line="74">
                Indicates if this compound unit is considered equals to the specified 
                 * object (both are compound units with same composing units in the 
                 * same order).                
                <@param>
                    m that the object to compare for equality.                    
                </@param>
                <@return>
                    n <code>true</code> if <code>this</code> and <code>that</code>
                     * are considered equals; <code>false</code>otherwise.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="83">
                <declaration name="thatUnit" type="CompoundUnit&lt;?&gt;" line="88"/>
            </method>
            <method name="hashCode" type="int" line="94"/>
            <method name="getStandardUnit" type="Unit<? super Q>" line="99"/>
            <method name="toStandardUnit" type="UnitConverter" line="104"/>
            <declaration name="serialVersionUID" type="long" line="108"/>
        </class>
    </source>