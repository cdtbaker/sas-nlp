<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.measure.unit">
        <import package="javax.measure.converter.UnitConverter"/>
        <import package="javax.measure.quantity.Quantity"/>
        <class name="TransformedUnit" extends="DerivedUnit<Q>" line="14">
            <comment line="15">
                Implements abstract method.                
            </comment>
            <comment line="15">
                Implements abstract method.                
            </comment>
            <comment line="15">
                Implements abstract method.                
            </comment>
            <javadoc line="14">
                &lt;p&gt; This class represents the units derived from other units using{@link UnitConverter converters}.&lt;/p&gt;
                 * &lt;p&gt; Examples of transformed units:[code]
                 * CELSIUS = KELVIN.add(273.15);
                 * FOOT = METER.multiply(0.3048);
                 * MILLISECOND = MILLI(SECOND); 
                 * [/code]&lt;/p&gt;
                 * &lt;p&gt; Transformed units have no label. But like any other units,
                 * they may have labels attached to them:[code]
                 * UnitFormat.getStandardInstance().label(FOOT, &quot;ft&quot;);
                 * [/code]
                 * or aliases: [code]
                 * UnitFormat.getStandardInstance().alias(CENTI(METER)), &quot;centimeter&quot;);
                 * UnitFormat.getStandardInstance().alias(CENTI(METER)), &quot;centimetre&quot;);
                 * [/code]&lt;/p&gt;                
                <@author>
                    r  <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </@author>
                <@version>
                    n 3.1, April 22, 2006                    
                </@version>
                <@see>
                    e Unit#plus(double)                    
                </@see>
                <@see>
                    e Unit#times(double)                    
                </@see>
                <@see>
                    e Unit#transform(UnitConverter)                    
                </@see>
                <@see>
                    e UnitFormat                    
                </@see>
            </javadoc>
            <declaration name="_parentUnit" type="Unit&lt;Q&gt;" line="42"/>
            <javadoc line="42">
                Holds the parent unit (not a transformed unit).                
            </javadoc>
            <declaration name="_toParentUnit" type="UnitConverter" line="47"/>
            <javadoc line="47">
                Holds the converter to the parent unit.                
            </javadoc>
            <javadoc line="52">
                Creates a transformed unit from the specified parent unit.                
                <@param>
                    m parentUnit the untransformed unit from which this unit is 
                     * derived.                    
                </@param>
                <@param>
                    m toParentUnit the converter to the parent units.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if <code>toParentUnit == {@link UnitConverter#IDENTITY UnitConverter.IDENTITY}</code>                    
                </@throws>
            </javadoc>
            <method name="TransformedUnit" type="constructor" line="61"/>
            <javadoc line="68">
                Returns the parent unit for this unit. The parent unit is the 
                 * untransformed unit from which this unit is derived.                
                <@return>
                    n the untransformed unit from which this unit is derived.                    
                </@return>
            </javadoc>
            <method name="getParentUnit" type="Unit<Q>" line="74"/>
            <javadoc line="78">
                Returns the converter to the parent unit.                
                <@return>
                    n the converter to the parent unit.                    
                </@return>
            </javadoc>
            <method name="toParentUnit" type="UnitConverter" line="83"/>
            <javadoc line="87">
                Indicates if this transformed unit is considered equals to the specified 
                 * object (both are transformed units with equal parent unit and equal
                 * converter to parent unit).                
                <@param>
                    m that the object to compare for equality.                    
                </@param>
                <@return>
                    n <code>true</code> if <code>this</code> and <code>that</code>
                     * are considered equals; <code>false</code>otherwise.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="96">
                <declaration name="thatUnit" type="TransformedUnit&lt;?&gt;" line="99"/>
            </method>
            <method name="hashCode" type="int" line="105"/>
            <method name="getStandardUnit" type="Unit<? super Q>" line="110"/>
            <method name="toStandardUnit" type="UnitConverter" line="115"/>
            <declaration name="serialVersionUID" type="long" line="119"/>
        </class>
    </source>