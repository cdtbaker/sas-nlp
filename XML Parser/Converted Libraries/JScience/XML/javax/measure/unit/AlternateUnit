<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.measure.unit">
        <import package="javax.measure.converter.UnitConverter"/>
        <import package="javax.measure.quantity.Quantity"/>
        <class name="AlternateUnit" extends="DerivedUnit<Q>" line="14">
            <comment line="15">
                Implements abstract method.                
            </comment>
            <javadoc line="14">
                &lt;p&gt; This class represents the units used in expressions to distinguish
                 * between quantities of a different nature but of the same dimensions.&lt;/p&gt;
                 * &lt;p&gt; Instances of this class are created through the {@link Unit#alternate(String)} method.&lt;/p&gt;                
                <@author>
                    r  <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </@author>
                <@version>
                    n 4.2, August 26, 2007                    
                </@version>
            </javadoc>
            <declaration name="_symbol" type="String" line="26"/>
            <javadoc line="26">
                Holds the symbol.                
            </javadoc>
            <declaration name="_parent" type="Unit&lt;?&gt;" line="31"/>
            <javadoc line="31">
                Holds the parent unit (a system unit).                
            </javadoc>
            <javadoc line="36">
                Creates an alternate unit for the specified unit identified by the 
                 * specified symbol.                
                <@param>
                    m symbol the symbol for this alternate unit.                    
                </@param>
                <@param>
                    m parent the system unit from which this alternate unit is
                     * derived.                    
                </@param>
                <@throws>
                    s UnsupportedOperationException if the source is not 
                     * a standard unit.                    
                </@throws>
                <@throws>
                    s IllegalArgumentException if the specified symbol is 
                     * associated to a different unit.                    
                </@throws>
            </javadoc>
            <method name="AlternateUnit" type="constructor" line="48">
                <comment line="49">
                    Checks if the symbol is associated to a different unit.                    
                </comment>
                <scope line="55">
                    <declaration name="unit" type="Unit&lt;?&gt;" line="56"/>
                    <scope line="57"/>
                    <scope line="61">
                        <declaration name="existingUnit" type="AlternateUnit&lt;?&gt;" line="62"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="72">
                Returns the symbol for this alternate unit.                
                <@return>
                    n this alternate unit symbol.                    
                </@return>
            </javadoc>
            <method name="getSymbol" type="String" line="77"/>
            <javadoc line="81">
                Returns the parent unit from which this alternate unit is derived 
                 * (a system unit itself).                
                <@return>
                    n the parent of the alternate unit.                    
                </@return>
            </javadoc>
            <method name="getParent" type="Unit<? super Q>" line="88"/>
            <method name="getStandardUnit" type="Unit<? super Q>" line="93"/>
            <method name="toStandardUnit" type="UnitConverter" line="98"/>
            <javadoc line="102">
                Indicates if this alternate unit is considered equals to the specified 
                 * object (both are alternate units with equal symbol, equal base units
                 * and equal converter to base units).                
                <@param>
                    m that the object to compare for equality.                    
                </@param>
                <@return>
                    n <code>true</code> if <code>this</code> and <code>that</code>
                     * are considered equals; <code>false</code>otherwise.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="111">
                <comment line="112">
                    turn this._symbol.equals(thatUnit._symbol); // Symbols are unique.                    
                </comment>
                <declaration name="thatUnit" type="AlternateUnit&lt;?&gt;" line="116"/>
            </method>
            <method name="hashCode" type="int" line="121"/>
            <declaration name="serialVersionUID" type="long" line="125"/>
        </class>
    </source>