<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.measure.unit">
        <import package="java.io.Serializable"/>
        <import package="javax.measure.converter.RationalConverter"/>
        <import package="javax.measure.converter.UnitConverter"/>
        <import package="javax.measure.quantity.Dimensionless"/>
        <class name="Dimension" line="17">
            <implements interface="Serializable"/>
            <javadoc line="17">
                &lt;p&gt; This class represents the dimension of an unit. Two units &lt;code&gt;u1&lt;/code&gt;
                  and &lt;code&gt;u2&lt;/code&gt; are {@link Unit#isCompatible compatible} if and
                  only if &lt;code&gt;(u1.getDimension().equals(u2.getDimension())))&lt;/code&gt;
                  &lt;/p&gt;
                  &lt;p&gt; Instances of this class are immutable.&lt;/p&gt;                
                <@author>
                    r  <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </@author>
                <@version>
                    n 3.1, April 22, 2006                    
                </@version>
                <@see>
                    e <a href="http://en.wikipedia.org/wiki/Dimensional_analysis">
                           Wikipedia: Dimensional Analysis</a>                    
                </@see>
            </javadoc>
            <declaration name="CurrentModel" type="Model" line="32"/>
            <javadoc line="32">
                Holds the current physical model.                
            </javadoc>
            <declaration name="NONE" type="Dimension" line="37"/>
            <javadoc line="37">
                Holds dimensionless.                
            </javadoc>
            <declaration name="LENGTH" type="Dimension" line="42"/>
            <javadoc line="42">
                Holds length dimension (L).                
            </javadoc>
            <declaration name="MASS" type="Dimension" line="47"/>
            <javadoc line="47">
                Holds mass dimension (M).                
            </javadoc>
            <declaration name="TIME" type="Dimension" line="52"/>
            <javadoc line="52">
                Holds time dimension (T).                
            </javadoc>
            <declaration name="ELECTRIC_CURRENT" type="Dimension" line="57"/>
            <javadoc line="57">
                Holds electric current dimension (I).                
            </javadoc>
            <declaration name="TEMPERATURE" type="Dimension" line="62"/>
            <javadoc line="62">
                Holds temperature dimension (Î¸).                
            </javadoc>
            <declaration name="AMOUNT_OF_SUBSTANCE" type="Dimension" line="67"/>
            <javadoc line="67">
                Holds amount of substance dimension (N).                
            </javadoc>
            <declaration name="_pseudoUnit" type="Unit&lt;?&gt;" line="72"/>
            <javadoc line="72">
                Holds the pseudo unit associated to this dimension.                
            </javadoc>
            <javadoc line="77">
                Creates a new dimension associated to the specified symbol.                
                <@param>
                    m symbol the associated symbol.                    
                </@param>
            </javadoc>
            <method name="Dimension" type="constructor" line="82">
                <params>
                    <param name="symbol" type="char"/>
                </params>
            </method>
            <javadoc line="86">
                Creates a dimension having the specified pseudo-unit 
                  (base unit or product of base unit).                
                <@param>
                    m pseudoUnit the pseudo-unit identifying this dimension.                    
                </@param>
            </javadoc>
            <method name="Dimension" type="constructor" line="92">
                <params>
                    <param name="pseudoUnit" type="Unit<?>"/>
                </params>
            </method>
            <javadoc line="96">
                Returns the product of this dimension with the one specified.                
                <@param>
                    m that the dimension multiplicand.                    
                </@param>
                <@return>
                    n <code>this  that</code>                    
                </@return>
            </javadoc>
            <method name="times" type="Dimension" line="102">
                <params>
                    <param name="that" type="Dimension"/>
                </params>
            </method>
            <javadoc line="106">
                Returns the quotient of this dimension with the one specified.                
                <@param>
                    m that the dimension divisor.                    
                </@param>
                <@return>
                    n <code>this / that</code>                    
                </@return>
            </javadoc>
            <method name="divide" type="Dimension" line="112">
                <params>
                    <param name="that" type="Dimension"/>
                </params>
            </method>
            <javadoc line="116">
                Returns this dimension raised to an exponent.                
                <@param>
                    m n the exponent.                    
                </@param>
                <@return>
                    n the result of raising this dimension to the exponent.                    
                </@return>
            </javadoc>
            <method name="pow" type="Dimension" line="122">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="126">
                Returns the given root of this dimension.                
                <@param>
                    m n the root's order.                    
                </@param>
                <@return>
                    n the result of taking the given root of this dimension.                    
                </@return>
                <@throws>
                    s ArithmeticException if <code>n == 0</code>.                    
                </@throws>
            </javadoc>
            <method name="root" type="Dimension" line="133">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="137">
                Returns the representation of this dimension.                
                <@return>
                    n the representation of this dimension.                    
                </@return>
            </javadoc>
            <method name="toString" type="String" line="142"/>
            <javadoc line="146">
                Indicates if the specified dimension is equals to the one specified.                
                <@param>
                    m that the object to compare to.                    
                </@param>
                <@return>
                    n <code>true</code> if this dimension is equals to that dimension;
                      <code>false</code> otherwise.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="153">
                <params>
                    <param name="that" type="Object"/>
                </params>
            </method>
            <javadoc line="160">
                Returns the hash code for this dimension.                
                <@return>
                    n this dimension hashcode value.                    
                </@return>
            </javadoc>
            <method name="hashCode" type="int" line="165"/>
            <javadoc line="169">
                Sets the model used to determinate the units dimensions.                
                <@param>
                    m model the new model to be used when calculating unit dimensions.                    
                </@param>
            </javadoc>
            <method name="setModel" type="void" line="174">
                <params>
                    <param name="model" type="Model"/>
                </params>
            </method>
            <javadoc line="178">
                Returns the model used to determinate the units dimensions
                  (default {@link Model#STANDARD STANDARD}).                
                <@return>
                    n the model used when calculating unit dimensions.                    
                </@return>
            </javadoc>
            <method name="getModel" type="Model" line="184"/>
            <interface name="Model">
                <javadoc line="188">
                    This interface represents the mapping between {@link BaseUnit base units}and {@link Dimension dimensions}. Custom models may allow
                      conversions not possible using the {@link #STANDARD standard} model.
                      For example:[code]
                      public static void main(String[] args) {
                      Dimension.Model relativistic = new Dimension.Model() {
                      RationalConverter meterToSecond = new RationalConverter(1, 299792458); // 1/c
                      public Dimension getDimension(BaseUnit unit) {
                      if (unit.equals(SI.METER)) return Dimension.TIME;
                      return Dimension.Model.STANDARD.getDimension(unit);
                      }
                      public UnitConverter getTransform(BaseUnit unit) {
                      if (unit.equals(SI.METER)) return meterToSecond;
                      return Dimension.Model.STANDARD.getTransform(unit);
                      }};
                      Dimension.setModel(relativistic);
                      // Converts 1.0 GeV (energy) to kg (mass).
                      System.out.println(Unit.valueOf(&quot;GeV&quot;).getConverterTo(KILOGRAM).convert(1.0));
                      }
                      &gt; 1.7826617302520883E-27[/code]                    
                </javadoc>
                <declaration name="STANDARD" type="Model" line="216"/>
                <javadoc line="216">
                    Holds the standard model (default).                    
                </javadoc>
                <anonymous_class line="219">
                    <method name="getDimension" type="Dimension" line="221">
                        <params>
                            <param name="unit" type="BaseUnit<?>"/>
                        </params>
                    </method>
                    <method name="getTransform" type="UnitConverter" line="232">
                        <params>
                            <param name="unit" type="BaseUnit<?>"/>
                        </params>
                    </method>
                </anonymous_class>
                <method name="getDimension" type="Dimension" line="238"/>
                <javadoc line="238">
                    Returns the dimension of the specified base unit (a dimension 
                      particular to the base unit if the base unit is not recognized).                    
                    <@param>
                        m unit the base unit for which the dimension is returned.                        
                    </@param>
                    <@return>
                        n the dimension of the specified unit.                        
                    </@return>
                </javadoc>
                <method name="getTransform" type="UnitConverter" line="247"/>
                <javadoc line="247">
                    Returns the normalization transform of the specified base unit
                      ({@link UnitConverter#IDENTITY IDENTITY} if the base unit is 
                      not recognized).                    
                    <@param>
                        m unit the base unit for which the transform is returned.                        
                    </@param>
                    <@return>
                        n the normalization transform.                        
                    </@return>
                </javadoc>
            </interface>
            <declaration name="serialVersionUID" type="long" line="258"/>
        </class>
    </source>