<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.measure.unit">
        <import package="java.io.IOException"/>
        <import package="java.lang.CharSequence"/>
        <import package="java.text.FieldPosition"/>
        <import package="java.text.Format"/>
        <import package="java.text.ParseException"/>
        <import package="java.text.ParsePosition"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Locale"/>
        <import package="javax.measure.converter.AddConverter"/>
        <import package="javax.measure.converter.MultiplyConverter"/>
        <import package="javax.measure.converter.RationalConverter"/>
        <import package="javax.measure.converter.UnitConverter"/>
        <import package="javax.measure.quantity.Quantity"/>
        <import package="javax.measure.unit.SI"/>
        <class name="UnitFormat" extends="Format" line="28">
            <comment line="29">
                //////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="29">
                Initializes the standard unit database for SI units.                
            </comment>
            <comment line="29">
                //////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="29">
                To be moved in resource bundle in future release (locale dependent).                
            </comment>
            <javadoc line="28">
                &lt;p&gt; This class provides the interface for formatting and parsing {@link Unit units}.&lt;/p&gt;
                 * &lt;p&gt; For all {@link SI} units, the 20 SI prefixes used to form decimal
                 * multiples and sub-multiples of SI units are recognized.{@link NonSI} units are directly recognized. For example:[code]
                 * Unit.valueOf(&quot;mÂ°C&quot;).equals(SI.MILLI(SI.CELSIUS))
                 * Unit.valueOf(&quot;kW&quot;).equals(SI.KILO(SI.WATT))
                 * Unit.valueOf(&quot;ft&quot;).equals(SI.METER.multiply(0.3048))[/code]&lt;/p&gt;                
                <@author>
                    r <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </@author>
                <@author>
                    r Eric Russell                    
                </@author>
                <@version>
                    n 1.3, August 29, 2006                    
                </@version>
            </javadoc>
            <declaration name="DEFAULT" type="DefaultFormat" line="45"/>
            <javadoc line="45">
                Holds the standard unit format.                
            </javadoc>
            <declaration name="ASCII" type="ASCIIFormat" line="50"/>
            <javadoc line="50">
                Holds the ASCIIFormat unit format.                
            </javadoc>
            <javadoc line="55">
                Returns the unit format for the default locale (format used by {@link Unit#valueOf(CharSequence) Unit.valueOf(CharSequence)} and {@link Unit#toString() Unit.toString()}).                
                <@return>
                    n the default unit format (locale sensitive).                    
                </@return>
            </javadoc>
            <method name="getInstance" type="UnitFormat" line="62"/>
            <javadoc line="66">
                Returns the unit format for the specified locale.                
                <@return>
                    n the unit format for the specified locale.                    
                </@return>
            </javadoc>
            <method name="getInstance" type="UnitFormat" line="71">
                <comment line="72">
                    turn DEFAULT; // TBD: Implement Locale Format.                    
                </comment>
            </method>
            <javadoc line="75">
                Returns the &lt;a href=&quot;http://aurora.regenstrief.org/UCUM/ucum.html&quot;&gt;UCUM
                 * &lt;/a&gt; international unit format; this format uses characters range
                 * &lt;code&gt;0000-007F&lt;/code&gt; exclusively and &lt;b&gt;is not&lt;/b&gt; locale-sensitive.
                 * For example: &lt;code&gt;kg.m/s2&lt;/code&gt;                
                <@return>
                    n the UCUM international format.                    
                </@return>
            </javadoc>
            <method name="getUCUMInstance" type="UnitFormat" line="83">
                <comment line="84">
                    turn UnitFormat.ASCII; // TBD - Provide UCUM implementation.                    
                </comment>
            </method>
            <javadoc line="87">
                Base constructor.                
            </javadoc>
            <method name="UnitFormat" type="constructor" line="90"/>
            <method name="format" type="Appendable" line="93"/>
            <javadoc line="93">
                Formats the specified unit.                
                <@param>
                    m unit the unit to format.                    
                </@param>
                <@param>
                    m appendable the appendable destination.                    
                </@param>
                <@throws>
                    s IOException if an error occurs.                    
                </@throws>
            </javadoc>
            <method name="parseProductUnit" type="Unit<? extends Quantity>" line="103"/>
            <javadoc line="103">
                Parses a sequence of character to produce a unit or a rational product
                 * of unit.                
                <@param>
                    m csq the <code>CharSequence</code> to parse.                    
                </@param>
                <@param>
                    m pos an object holding the parsing index and error position.                    
                </@param>
                <@return>
                    n an {@link Unit} parsed from the character sequence.                    
                </@return>
                <@throws>
                    s IllegalArgumentException if the character sequence contains
                     * an illegal syntax.                    
                </@throws>
            </javadoc>
            <method name="parseSingleUnit" type="Unit<? extends Quantity>" line="116"/>
            <javadoc line="116">
                Parses a sequence of character to produce a single unit.                
                <@param>
                    m csq the <code>CharSequence</code> to parse.                    
                </@param>
                <@param>
                    m pos an object holding the parsing index and error position.                    
                </@param>
                <@return>
                    n an {@link Unit} parsed from the character sequence.                    
                </@return>
                <@throws>
                    s IllegalArgumentException if the character sequence does not contain 
                     * a valid unit identifier.                    
                </@throws>
            </javadoc>
            <method name="label" type="void" line="128"/>
            <javadoc line="128">
                Attaches a system-wide label to the specified unit. For example:
                 * [code]
                 * UnitFormat.getInstance().label(DAY.multiply(365), &quot;year&quot;);
                 * UnitFormat.getInstance().label(METER.multiply(0.3048), &quot;ft&quot;);
                 * [/code]
                 * If the specified label is already associated to an unit the previous 
                 * association is discarded or ignored.                
                <@param>
                    m unit the unit being labelled.                    
                </@param>
                <@param>
                    m label the new label for this unit.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if the label is not a {@link UnitFormat#isValidIdentifier(String)} valid identifier.                    
                </@throws>
            </javadoc>
            <method name="alias" type="void" line="144"/>
            <javadoc line="144">
                Attaches a system-wide alias to this unit. Multiple aliases may
                 * be attached to the same unit. Aliases are used during parsing to
                 * recognize different variants of the same unit. For example:
                 * [code]
                 * UnitFormat.getLocaleInstance().alias(METER.multiply(0.3048), &quot;foot&quot;);
                 * UnitFormat.getLocaleInstance().alias(METER.multiply(0.3048), &quot;feet&quot;);
                 * UnitFormat.getLocaleInstance().alias(METER, &quot;meter&quot;);
                 * UnitFormat.getLocaleInstance().alias(METER, &quot;metre&quot;);
                 * [/code]
                 * If the specified label is already associated to an unit the previous 
                 * association is discarded or ignored.                
                <@param>
                    m unit the unit being aliased.                    
                </@param>
                <@param>
                    m alias the alias attached to this unit.                    
                </@param>
                <@throws>
                    s IllegalArgumentException if the label is not a {@link UnitFormat#isValidIdentifier(String)} valid identifier.                    
                </@throws>
            </javadoc>
            <method name="isValidIdentifier" type="boolean" line="164"/>
            <javadoc line="164">
                Indicates if the specified name can be used as unit identifier.                
                <@param>
                    m name the identifier to be tested.                    
                </@param>
                <@return>
                    n <code>true</code> if the name specified can be used as 
                     * label or alias for this format;<code>false</code> otherwise.                    
                </@return>
            </javadoc>
            <javadoc line="173">
                Formats an unit and appends the resulting text to a given string
                 * buffer (implements &lt;code&gt;java.text.Format&lt;/code&gt;).                
                <@param>
                    m unit the unit to format.                    
                </@param>
                <@param>
                    m toAppendTo where the text is to be appended                    
                </@param>
                <@param>
                    m pos the field position (not used).                    
                </@param>
                <@return>
                    n <code>toAppendTo</code>                    
                </@return>
            </javadoc>
            <method name="format" type="StringBuffer" line="183">
                <scope line="184">
                    <declaration name="dest" type="Object" line="185"/>
                    <scope line="186"/>
                    <scope line="188">
                        <anonymous_class line="189">
                            <method name="append" type="Appendable" line="191"/>
                            <method name="append" type="Appendable" line="196"/>
                            <method name="append" type="Appendable" line="201"/>
                        </anonymous_class>
                    </scope>
                </scope>
                <scope line="207"/>
            </method>
            <javadoc line="212">
                Parses the text from a string to produce an object
                 * (implements &lt;code&gt;java.text.Format&lt;/code&gt;).                
                <@param>
                    m source the string source, part of which should be parsed.                    
                </@param>
                <@param>
                    m pos the cursor position.                    
                </@param>
                <@return>
                    n the corresponding unit or <code>null</code> if the string 
                     * cannot be parsed.                    
                </@return>
            </javadoc>
            <method name="parseObject" type="Unit<?>" line="221">
                <declaration name="start" type="int" line="222"/>
                <scope line="223"/>
                <scope line="225"/>
            </method>
            <class name="Exponent" line="233">
                <comment line="247">
                    Returns the name for the specified unit or null if product unit.                    
                </comment>
                <comment line="247">
                    Returns the unit for the specified name.                    
                </comment>
                <comment line="247">
                    //////////////////////////                    
                </comment>
                <comment line="247">
                    Parsing.                    
                </comment>
                <comment line="247">
                    //////////////////////////                    
                </comment>
                <comment line="247">
                    Formatting.                    
                </comment>
                <javadoc line="233">
                    This class represents an exponent with both a power (numerator)
                     * and a root (denominator).                    
                </javadoc>
                <declaration name="pow" type="int" line="238"/>
                <declaration name="root" type="int" line="239"/>
                <method name="Exponent" type="constructor" line="240"/>
            </class>
            <class name="DefaultFormat" extends="UnitFormat" line="246">
                <comment line="247">
                    Returns the name for the specified unit or null if product unit.                    
                </comment>
                <comment line="247">
                    Returns the unit for the specified name.                    
                </comment>
                <comment line="247">
                    //////////////////////////                    
                </comment>
                <comment line="247">
                    Parsing.                    
                </comment>
                <comment line="247">
                    //////////////////////////                    
                </comment>
                <comment line="247">
                    Formatting.                    
                </comment>
                <javadoc line="246">
                    This class represents the standard format.                    
                </javadoc>
                <declaration name="_nameToUnit" type="HashMap&lt;String,Unit&lt;?&gt;&gt;" line="251"/>
                <javadoc line="251">
                    Holds the name to unit mapping.                    
                </javadoc>
                <declaration name="_unitToName" type="HashMap&lt;Unit&lt;?&gt;,String&gt;" line="256"/>
                <javadoc line="256">
                    Holds the unit to name mapping.                    
                </javadoc>
                <method name="label" type="void" line="262">
                    <scope line="266"/>
                </method>
                <method name="alias" type="void" line="273">
                    <scope line="277"/>
                </method>
                <method name="isValidIdentifier" type="boolean" line="283">
                    <scope line="286"/>
                </method>
                <method name="isUnitIdentifierPart" type="boolean" line="293"/>
                <method name="nameFor" type="String" line="303">
                    <comment line="304">
                        Searches label database.                        
                    </comment>
                    <comment line="304">
                        Compound unit.                        
                    </comment>
                    <comment line="304">
                        turn null; // Product unit.                        
                    </comment>
                    <declaration name="label" type="String" line="305"/>
                    <scope line="312">
                        <declaration name="tfmUnit" type="TransformedUnit&lt;?&gt;" line="313"/>
                        <declaration name="baseUnits" type="Unit&lt;?&gt;" line="314"/>
                        <declaration name="cvtr" type="UnitConverter" line="315"/>
                        <declaration name="result" type="StringBuffer" line="316"/>
                        <declaration name="baseUnitName" type="String" line="317"/>
                        <scope line="320"/>
                        <scope line="327"/>
                        <scope line="330"/>
                        <scope line="333">
                            <declaration name="dividend" type="long" line="334"/>
                            <scope line="335"/>
                            <declaration name="divisor" type="long" line="339"/>
                            <scope line="340"/>
                        </scope>
                        <scope line="344"/>
                        <scope line="347"/>
                    </scope>
                    <scope line="353">
                        <declaration name="cpdUnit" type="CompoundUnit&lt;?&gt;" line="354"/>
                    </scope>
                </method>
                <method name="unitFor" type="Unit<?>" line="362">
                    <declaration name="unit" type="Unit&lt;?&gt;" line="363"/>
                </method>
                <method name="parseSingleUnit" type="Unit<? extends Quantity>" line="375">
                    <declaration name="startIndex" type="int" line="376"/>
                    <declaration name="name" type="String" line="377"/>
                    <declaration name="unit" type="Unit" line="378"/>
                </method>
                <method name="parseProductUnit" type="Unit<? extends Quantity>" line="386">
                    <declaration name="result" type="Unit" line="387"/>
                    <declaration name="token" type="int" line="388"/>
                    <scope line="402">
                        <declaration name="e" type="Exponent" line="405"/>
                        <scope line="406"/>
                        <scope line="409"/>
                        <scope line="416">
                            <declaration name="n" type="long" line="417"/>
                            <scope line="418"/>
                        </scope>
                        <scope line="421">
                            <declaration name="d" type="double" line="422"/>
                            <scope line="423"/>
                        </scope>
                        <scope line="426"/>
                        <scope line="433">
                            <declaration name="n" type="long" line="434"/>
                            <scope line="435"/>
                        </scope>
                        <scope line="438">
                            <declaration name="d" type="double" line="439"/>
                            <scope line="440"/>
                        </scope>
                        <scope line="443"/>
                        <scope line="450">
                            <declaration name="n" type="long" line="451"/>
                            <scope line="452"/>
                        </scope>
                        <scope line="455">
                            <declaration name="d" type="double" line="456"/>
                            <scope line="457"/>
                        </scope>
                        <scope line="460"/>
                    </scope>
                </method>
                <declaration name="EOF" type="int" line="474"/>
                <declaration name="IDENTIFIER" type="int" line="475"/>
                <declaration name="OPEN_PAREN" type="int" line="476"/>
                <declaration name="CLOSE_PAREN" type="int" line="477"/>
                <declaration name="EXPONENT" type="int" line="478"/>
                <declaration name="MULTIPLY" type="int" line="479"/>
                <declaration name="DIVIDE" type="int" line="480"/>
                <declaration name="PLUS" type="int" line="481"/>
                <declaration name="INTEGER" type="int" line="482"/>
                <declaration name="FLOAT" type="int" line="483"/>
                <method name="nextToken" type="int" line="485">
                    <declaration name="length" type="int" line="486"/>
                    <scope line="487">
                        <declaration name="c" type="char" line="488"/>
                        <scope line="489"/>
                        <scope line="491"/>
                        <scope line="493"/>
                        <scope line="495"/>
                        <scope line="497">
                            <declaration name="c2" type="char" line="498"/>
                            <scope line="499"/>
                            <scope line="501"/>
                        </scope>
                        <scope line="504"/>
                        <scope line="506"/>
                        <scope line="508"/>
                        <scope line="510">
                            <declaration name="index" type="int" line="511"/>
                            <scope line="513">
                                <scope line="515"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="check" type="void" line="527">
                    <scope line="528"/>
                </method>
                <method name="readExponent" type="Exponent" line="534">
                    <declaration name="c" type="char" line="535"/>
                    <scope line="536"/>
                    <scope line="538"/>
                    <declaration name="length" type="int" line="541"/>
                    <declaration name="pow" type="int" line="542"/>
                    <declaration name="isPowNegative" type="boolean" line="543"/>
                    <declaration name="root" type="int" line="544"/>
                    <declaration name="isRootNegative" type="boolean" line="545"/>
                    <declaration name="isRoot" type="boolean" line="546"/>
                    <scope line="547">
                        <scope line="549">
                            <scope line="550"/>
                            <scope line="552"/>
                        </scope>
                        <scope line="555">
                            <scope line="556"/>
                            <scope line="558"/>
                        </scope>
                        <scope line="561">
                            <scope line="562"/>
                            <scope line="564"/>
                        </scope>
                        <scope line="567">
                            <scope line="568"/>
                            <scope line="570"/>
                        </scope>
                        <scope line="573">
                            <scope line="574"/>
                            <scope line="576"/>
                        </scope>
                        <scope line="579"/>
                        <scope line="581"/>
                    </scope>
                </method>
                <method name="readLong" type="long" line="592">
                    <declaration name="length" type="int" line="593"/>
                    <declaration name="result" type="int" line="594"/>
                    <declaration name="isNegative" type="boolean" line="595"/>
                    <scope line="596">
                        <declaration name="c" type="char" line="597"/>
                        <scope line="598"/>
                        <scope line="600"/>
                        <scope line="602"/>
                    </scope>
                </method>
                <method name="readDouble" type="double" line="610">
                    <declaration name="length" type="int" line="611"/>
                    <declaration name="start" type="int" line="612"/>
                    <declaration name="end" type="int" line="613"/>
                    <scope line="614">
                        <scope line="615"/>
                    </scope>
                </method>
                <method name="readIdentifier" type="String" line="624">
                    <declaration name="length" type="int" line="625"/>
                    <declaration name="start" type="int" line="626"/>
                    <declaration name="i" type="int" line="627"/>
                    <scope line="628"/>
                </method>
                <method name="format" type="Appendable" line="638">
                    <comment line="639">
                        Product unit.                        
                    </comment>
                    <comment line="639">
                        Write positive exponents first.                        
                    </comment>
                    <comment line="639">
                        Write negative exponents.                        
                    </comment>
                    <declaration name="name" type="String" line="639"/>
                    <declaration name="productUnit" type="ProductUnit&lt;?&gt;" line="646"/>
                    <declaration name="invNbr" type="int" line="647"/>
                    <declaration name="start" type="boolean" line="650"/>
                    <scope line="651">
                        <declaration name="pow" type="int" line="652"/>
                        <scope line="653">
                            <scope line="654"/>
                            <declaration name="root" type="int" line="658"/>
                        </scope>
                        <scope line="661"/>
                    </scope>
                    <scope line="667">
                        <scope line="668"/>
                        <scope line="672"/>
                        <scope line="676">
                            <declaration name="pow" type="int" line="677"/>
                            <scope line="678">
                                <declaration name="root" type="int" line="680"/>
                                <scope line="681"/>
                            </scope>
                        </scope>
                        <scope line="688"/>
                    </scope>
                </method>
                <method name="append" type="void" line="696">
                    <scope line="698">
                        <scope line="700"/>
                        <scope line="702"/>
                        <scope line="704">
                            <scope line="708"/>
                        </scope>
                    </scope>
                </method>
                <declaration name="serialVersionUID" type="long" line="716"/>
            </class>
            <class name="ASCIIFormat" extends="DefaultFormat" line="719">
                <comment line="247">
                    Returns the name for the specified unit or null if product unit.                    
                </comment>
                <comment line="247">
                    Returns the unit for the specified name.                    
                </comment>
                <comment line="247">
                    //////////////////////////                    
                </comment>
                <comment line="247">
                    Parsing.                    
                </comment>
                <comment line="247">
                    //////////////////////////                    
                </comment>
                <comment line="247">
                    Formatting.                    
                </comment>
                <javadoc line="719">
                    This class represents the ASCIIFormat format.                    
                </javadoc>
                <method name="nameFor" type="String" line="725">
                    <comment line="726">
                        First search if specific ASCII name should be used.                        
                    </comment>
                    <comment line="726">
                        Else returns default name.                        
                    </comment>
                    <declaration name="name" type="String" line="727"/>
                </method>
                <method name="unitFor" type="Unit<?>" line="735">
                    <comment line="736">
                        First search if specific ASCII name.                        
                    </comment>
                    <comment line="736">
                        Else returns default mapping.                        
                    </comment>
                    <declaration name="unit" type="Unit&lt;?&gt;" line="737"/>
                </method>
                <method name="format" type="Appendable" line="746">
                    <declaration name="name" type="String" line="747"/>
                    <declaration name="productUnit" type="ProductUnit&lt;?&gt;" line="754"/>
                    <scope line="755">
                        <scope line="756"/>
                        <declaration name="pow" type="int" line="760"/>
                        <declaration name="root" type="int" line="761"/>
                        <scope line="763">
                            <scope line="767"/>
                        </scope>
                    </scope>
                </method>
                <declaration name="serialVersionUID" type="long" line="776"/>
            </class>
            <declaration name="SI_UNITS" type="Unit&lt;?&gt;[]" line="783"/>
            <declaration name="PREFIXES" type="String[]" line="789"/>
            <declaration name="CONVERTERS" type="UnitConverter[]" line="793"/>
            <method name="asciiPrefix" type="String" line="797"/>
            <scope line="801">
                <scope line="802">
                    <scope line="803">
                        <declaration name="si" type="Unit&lt;?&gt;" line="804"/>
                        <declaration name="u" type="Unit&lt;?&gt;" line="805"/>
                        <declaration name="symbol" type="String" line="806"/>
                        <scope line="809"/>
                    </scope>
                </scope>
                <scope line="816">
                    <scope line="820"/>
                </scope>
                <scope line="828"/>
                <scope line="837"/>
            </scope>
            <scope line="846">
                <scope line="935"/>
            </scope>
        </class>
    </source>