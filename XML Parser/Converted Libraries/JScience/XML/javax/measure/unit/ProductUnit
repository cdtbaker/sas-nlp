<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.measure.unit">
        <import package="java.io.Serializable"/>
        <import package="javax.measure.converter.ConversionException"/>
        <import package="javax.measure.converter.UnitConverter"/>
        <import package="javax.measure.quantity.Quantity"/>
        <class name="ProductUnit" line="17">
            <type_params>
                <type_param name="Q"/>
            </type_params>
            <extends class="DerivedUnit">
                <type_params>
                    <type_param name="Q"/>
                </type_params>
            </extends>
            <javadoc line="17">
                &lt;p&gt; This class represents units formed by the product of rational powers of
                  existing units.&lt;/p&gt;
                  &lt;p&gt; This class maintains the canonical form of this product (simplest
                  form after factorization). For example:
                  &lt;code&gt;METER.pow(2).divide(METER)&lt;/code&gt; returns
                  &lt;code&gt;METER&lt;/code&gt;.&lt;/p&gt;                
                <@author>
                    r  <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </@author>
                <@version>
                    n 3.1, April 22, 2006                    
                </@version>
                <@see>
                    e Unit#times(Unit)                    
                </@see>
                <@see>
                    e Unit#divide(Unit)                    
                </@see>
                <@see>
                    e Unit#pow(int)                    
                </@see>
                <@see>
                    e Unit#root(int)                    
                </@see>
            </javadoc>
            <declaration name="_elements" type="Element[]" line="35"/>
            <javadoc line="35">
                Holds the units composing this product unit.                
            </javadoc>
            <declaration name="_hashCode" type="int" line="40"/>
            <javadoc line="40">
                Holds the hashcode (optimization).                
            </javadoc>
            <javadoc line="45">
                Default constructor (used solely to create &lt;code&gt;ONE&lt;/code&gt; instance).                
            </javadoc>
            <method name="ProductUnit" type="constructor" line="48"/>
            <javadoc line="52">
                Copy constructor (allows for parameterization of product units).                
                <@param>
                    m productUnit the product unit source.                    
                </@param>
                <@throws>
                    s ClassCastException if the specified unit is not 
                      a product unit.                    
                </@throws>
            </javadoc>
            <method name="ProductUnit" type="constructor" line="59">
                <params>
                    <param name="productUnit" type="Unit<?>"/>
                </params>
            </method>
            <javadoc line="63">
                Product unit constructor.                
                <@param>
                    m elements the product elements.                    
                </@param>
            </javadoc>
            <method name="ProductUnit" type="constructor" line="68">
                <params>
                    <param name="elements" type="Element[]"/>
                </params>
            </method>
            <javadoc line="72">
                Returns the unit defined from the product of the specifed elements.                
                <@param>
                    m leftElems left multiplicand elements.                    
                </@param>
                <@param>
                    m rightElems right multiplicand elements.                    
                </@param>
                <@return>
                    n the corresponding unit.                    
                </@return>
            </javadoc>
            <method name="getInstance" type="Unit<? extends Quantity>" line="81">
                <params>
                    <param name="leftElems" type="Element[]"/>
                    <param name="rightElems" type="Element[]"/>
                </params>
                <comment line="82">
                    Merges left elements with right elements.                    
                </comment>
                <comment line="82">
                    Appends remaining right elements not merged.                    
                </comment>
                <comment line="82">
                    Returns or creates instance.                    
                </comment>
                <declaration name="result" type="Element[]" line="84"/>
                <declaration name="resultIndex" type="int" line="85"/>
                <scope line="86">
                    <declaration name="unit" type="Unit" line="87"/>
                    <declaration name="p1" type="int" line="88"/>
                    <declaration name="r1" type="int" line="89"/>
                    <declaration name="p2" type="int" line="90"/>
                    <declaration name="r2" type="int" line="91"/>
                    <scope line="92">
                        <scope line="93"/>
                    </scope>
                    <declaration name="pow" type="int" line="99"/>
                    <declaration name="root" type="int" line="100"/>
                    <scope line="101">
                        <declaration name="gcd" type="int" line="102"/>
                    </scope>
                </scope>
                <scope line="108">
                    <declaration name="unit" type="Unit" line="109"/>
                    <declaration name="hasBeenMerged" type="boolean" line="110"/>
                    <scope line="111">
                        <scope line="112"/>
                    </scope>
                    <scope line="117"/>
                </scope>
                <scope line="123"/>
                <scope line="125"/>
                <scope line="127">
                    <declaration name="elems" type="Element[]" line="128"/>
                    <scope line="129"/>
                </scope>
            </method>
            <javadoc line="136">
                Returns the product of the specified units.                
                <@param>
                    m left the left unit operand.                    
                </@param>
                <@param>
                    m right the right unit operand.                    
                </@param>
                <@return>
                    n <code>left  right</code>                    
                </@return>
            </javadoc>
            <method name="getProductInstance" type="Unit<? extends Quantity>" line="143">
                <params>
                    <param name="left" type="Unit<?>"/>
                    <param name="right" type="Unit<?>"/>
                </params>
                <declaration name="leftElems" type="Element[]" line="144"/>
                <scope line="145"/>
                <scope line="147"/>
                <declaration name="rightElems" type="Element[]" line="150"/>
                <scope line="151"/>
                <scope line="153"/>
            </method>
            <javadoc line="159">
                Returns the quotient of the specified units.                
                <@param>
                    m left the dividend unit operand.                    
                </@param>
                <@param>
                    m right the divisor unit operand.                    
                </@param>
                <@return>
                    n <code>dividend / divisor</code>                    
                </@return>
            </javadoc>
            <method name="getQuotientInstance" type="Unit<? extends Quantity>" line="166">
                <params>
                    <param name="left" type="Unit<?>"/>
                    <param name="right" type="Unit<?>"/>
                </params>
                <declaration name="leftElems" type="Element[]" line="167"/>
                <scope line="168"/>
                <scope line="170"/>
                <declaration name="rightElems" type="Element[]" line="173"/>
                <scope line="174">
                    <declaration name="elems" type="Element[]" line="175"/>
                    <scope line="177"/>
                </scope>
                <scope line="181"/>
            </method>
            <javadoc line="187">
                Returns the product unit corresponding to the specified root of
                  the specified unit.                
                <@param>
                    m unit the unit.                    
                </@param>
                <@param>
                    m n the root's order (n &gt; 0).                    
                </@param>
                <@return>
                    n <code>unit^(1/nn)</code>                    
                </@return>
                <@throws>
                    s ArithmeticException if <code>n == 0</code>.                    
                </@throws>
            </javadoc>
            <method name="getRootInstance" type="Unit<? extends Quantity>" line="196">
                <params>
                    <param name="unit" type="Unit<?>"/>
                    <param name="n" type="int"/>
                </params>
                <declaration name="unitElems" type="Element[]" line="197"/>
                <scope line="198">
                    <declaration name="elems" type="Element[]" line="199"/>
                    <scope line="201">
                        <declaration name="gcd" type="int" line="202"/>
                    </scope>
                </scope>
                <scope line="206"/>
            </method>
            <javadoc line="212">
                Returns the product unit corresponding to this unit raised to
                  the specified exponent.                
                <@param>
                    m unit the unit.                    
                </@param>
                <@param>
                    m nn the exponent (nn &gt; 0).                    
                </@param>
                <@return>
                    n <code>unit^n</code>                    
                </@return>
            </javadoc>
            <method name="getPowInstance" type="Unit<? extends Quantity>" line="220">
                <params>
                    <param name="unit" type="Unit<?>"/>
                    <param name="n" type="int"/>
                </params>
                <declaration name="unitElems" type="Element[]" line="221"/>
                <scope line="222">
                    <declaration name="elems" type="Element[]" line="223"/>
                    <scope line="225">
                        <declaration name="gcd" type="int" line="226"/>
                    </scope>
                </scope>
                <scope line="230"/>
            </method>
            <javadoc line="236">
                Returns the number of units in this product.                
                <@return>
                    n  the number of units being multiplied.                    
                </@return>
            </javadoc>
            <method name="getUnitCount" type="int" line="241"/>
            <javadoc line="245">
                Returns the unit at the specified position.                
                <@param>
                    m index the index of the unit to return.                    
                </@param>
                <@return>
                    n the unit at the specified position.                    
                </@return>
                <@throws>
                    s IndexOutOfBoundsException if index is out of range
                      <code>(index &lt; 0 || index &gt;= size())</code>.                    
                </@throws>
            </javadoc>
            <method name="getUnit" type="Unit<? extends Quantity>" line="254">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="258">
                Returns the power exponent of the unit at the specified position.                
                <@param>
                    m index the index of the unit to return.                    
                </@param>
                <@return>
                    n the unit power exponent at the specified position.                    
                </@return>
                <@throws>
                    s IndexOutOfBoundsException if index is out of range
                      <code>(index &lt; 0 || index &gt;= size())</code>.                    
                </@throws>
            </javadoc>
            <method name="getUnitPow" type="int" line="266">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="270">
                Returns the root exponent of the unit at the specified position.                
                <@param>
                    m index the index of the unit to return.                    
                </@param>
                <@return>
                    n the unit root exponent at the specified position.                    
                </@return>
                <@throws>
                    s IndexOutOfBoundsException if index is out of range
                      <code>(index &lt; 0 || index &gt;= size())</code>.                    
                </@throws>
            </javadoc>
            <method name="getUnitRoot" type="int" line="278">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="282">
                Indicates if this product unit is considered equals to the specified 
                  object.                
                <@param>
                    m that the object to compare for equality.                    
                </@param>
                <@return>
                    n <code>true</code> if <code>this</code> and <code>that</code>
                      are considered equals; <code>false</code>otherwise.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="290">
                <params>
                    <param name="that" type="Object"/>
                </params>
                <scope line="293">
                    <declaration name="elems" type="Element[]" line="296"/>
                    <scope line="297">
                        <scope line="298">
                            <declaration name="unitFound" type="boolean" line="299"/>
                            <scope line="300">
                                <scope line="301">
                                    <scope line="303"/>
                                    <scope line="305"/>
                                </scope>
                            </scope>
                            <scope line="311"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="hashCode" type="int" line="323">
                <declaration name="code" type="int" line="326"/>
                <scope line="327"/>
            </method>
            <method name="getStandardUnit" type="Unit<? super Q>" line="337">
                <declaration name="systemUnit" type="Unit" line="340"/>
                <scope line="341">
                    <declaration name="unit" type="Unit" line="342"/>
                </scope>
            </method>
            <method name="toStandardUnit" type="UnitConverter" line="351">
                <declaration name="converter" type="UnitConverter" line="354"/>
                <scope line="355">
                    <declaration name="cvtr" type="UnitConverter" line="356"/>
                    <declaration name="pow" type="int" line="363"/>
                    <scope line="364"/>
                    <scope line="368"/>
                </scope>
            </method>
            <javadoc line="375">
                Indicates if this product unit is a standard unit.                
                <@return>
                    n <code>true</code> if all elements are standard units;
                      <code>false</code> otherwise.                    
                </@return>
            </javadoc>
            <method name="hasOnlyStandardUnit" type="boolean" line="381">
                <scope line="382">
                    <declaration name="u" type="Unit&lt;?&gt;" line="383"/>
                </scope>
            </method>
            <javadoc line="390">
                Returns the greatest common divisor (Euclid&apos;s algorithm).                
                <@param>
                    m m the first number.                    
                </@param>
                <@param>
                    m nn the second number.                    
                </@param>
                <@return>
                    n the greatest common divisor.                    
                </@return>
            </javadoc>
            <method name="gcd" type="int" line="397">
                <params>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <scope line="398"/>
                <scope line="400"/>
            </method>
            <class name="Element" line="405">
                <comment line="322">
                    Implements abstract method.                    
                </comment>
                <implements interface="Serializable"/>
                <javadoc line="405">
                    Inner product element represents a rational power of a single unit.                    
                </javadoc>
                <declaration name="_unit" type="Unit&lt;?&gt;" line="410"/>
                <javadoc line="410">
                    Holds the single unit.                    
                </javadoc>
                <declaration name="_pow" type="int" line="415"/>
                <javadoc line="415">
                    Holds the power exponent.                    
                </javadoc>
                <declaration name="_root" type="int" line="420"/>
                <javadoc line="420">
                    Holds the root exponent.                    
                </javadoc>
                <javadoc line="425">
                    Structural constructor.                    
                    <@param>
                        m unit the unit.                        
                    </@param>
                    <@param>
                        m pow the power exponent.                        
                    </@param>
                    <@param>
                        m root the root exponent.                        
                    </@param>
                </javadoc>
                <method name="Element" type="constructor" line="432">
                    <params>
                        <param name="unit" type="Unit<?>"/>
                        <param name="pow" type="int"/>
                        <param name="root" type="int"/>
                    </params>
                </method>
                <javadoc line="438">
                    Returns this element&apos;s unit.                    
                    <@return>
                        n the single unit.                        
                    </@return>
                </javadoc>
                <method name="getUnit" type="Unit<?>" line="443"/>
                <javadoc line="447">
                    Returns the power exponent. The power exponent can be negative
                      but is always different from zero.                    
                    <@return>
                        n the power exponent of the single unit.                        
                    </@return>
                </javadoc>
                <method name="getPow" type="int" line="453"/>
                <javadoc line="457">
                    Returns the root exponent. The root exponent is always greater
                      than zero.                    
                    <@return>
                        n the root exponent of the single unit.                        
                    </@return>
                </javadoc>
                <method name="getRoot" type="int" line="463"/>
                <declaration name="serialVersionUID" type="long" line="467"/>
            </class>
            <declaration name="serialVersionUID" type="long" line="470"/>
        </class>
    </source>