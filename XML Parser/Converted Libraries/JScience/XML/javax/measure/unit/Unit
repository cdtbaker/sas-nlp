<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.measure.unit">
        <import package="java.io.Serializable"/>
        <import package="java.text.ParseException"/>
        <import package="java.text.ParsePosition"/>
        <import package="java.util.HashMap"/>
        <import package="javax.measure.MeasureFormat"/>
        <import package="javax.measure.converter.AddConverter"/>
        <import package="javax.measure.converter.ConversionException"/>
        <import package="javax.measure.converter.MultiplyConverter"/>
        <import package="javax.measure.converter.RationalConverter"/>
        <import package="javax.measure.converter.UnitConverter"/>
        <import package="javax.measure.quantity.Dimensionless"/>
        <import package="javax.measure.quantity.Quantity"/>
        <class name="Unit" line="25">
            <type_params>
                <type_param name="Q"/>
            </type_params>
            <comment line="26">
                ////////////////////////////////////////////////////                
            </comment>
            <comment line="26">
                Contract methods (for sub-classes to implement). //                
            </comment>
            <comment line="26">
                ////////////////////////////////////////////////////                
            </comment>
            <comment line="26">
                ////////////////////                
            </comment>
            <comment line="26">
                GENERAL CONTRACT //                
            </comment>
            <comment line="26">
                ////////////////////                
            </comment>
            <implements interface="Serializable"/>
            <javadoc line="25">
                &lt;p&gt; This class represents a determinate {@link javax.measure.quantity.Quantityquantity} (as of length, time, heat, or value) adopted as a standard
                  of measurement.&lt;/p&gt;
                  &lt;p&gt; It is helpful to think of instances of this class as recording the
                  history by which they are created. Thus, for example, the string
                  &quot;g/kg&quot; (which is a dimensionless unit) would result from invoking
                  the method toString() on a unit that was created by dividing a
                  gram unit by a kilogram unit. Yet, &quot;kg&quot; divided by &quot;kg&quot; returns{@link #ONE} and not &quot;kg/kg&quot; due to automatic unit factorization.&lt;/p&gt;
                  &lt;p&gt; This class supports the multiplication of offsets units. The result is
                  usually a unit not convertible to its {@link #getStandardUnit standard unit}.
                  Such units may appear in derivative quantities. For example °C/m is an 
                  unit of gradient, which is common in atmospheric and oceanographic
                  research.&lt;/p&gt;
                  &lt;p&gt; Units raised at rational powers are also supported. For example
                  the cubic root of &quot;liter&quot; is a unit compatible with meter.&lt;/p&gt;
                  &lt;p&gt; Instances of this class are immutable.&lt;/p&gt;                
                <@author>
                    r  <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </@author>
                <@author>
                    r  <a href="mailto:steve@unidata.ucar.edu">Steve Emmerson</a>                    
                </@author>
                <@author>
                    r  Martin Desruisseaux                    
                </@author>
                <@version>
                    n 3.2, August 28, 2006                    
                </@version>
                <@see>
                    e <a href="http://en.wikipedia.org/wiki/Units_of_measurement">
                            Wikipedia: Units of measurement</a>                    
                </@see>
            </javadoc>
            <declaration name="ONE" type="Unit&lt;Dimensionless&gt;" line="57"/>
            <javadoc line="57">
                Holds the dimensionless unit &lt;code&gt;ONE&lt;/code&gt;.                
            </javadoc>
            <declaration name="SYMBOL_TO_UNIT" type="HashMap&lt;String,Unit&lt;?&gt;&gt;" line="62"/>
            <javadoc line="62">
                Holds the unique symbols collection (base unit or alternate units).                
            </javadoc>
            <javadoc line="67">
                Default constructor.                
            </javadoc>
            <method name="Unit" type="constructor" line="70"/>
            <method name="getStandardUnit" type="Unit<? super Q>" line="77"/>
            <javadoc line="77">
                Returns the {@link BaseUnit base unit}, {@link AlternateUnit alternate
                  unit} or product of base units and alternate units this unit is derived
                  from. The standard unit identifies the &quot;type&quot; of {@link javax.measure.quantity.Quantity quantity} for which this unit is employed.
                  For example:[code]
                  boolean isAngularVelocity(Unit&lt;?&gt; u) {
                  return u.getStandardUnit().equals(RADIAN.divide(SECOND));
                  }
                  assert(REVOLUTION.divide(MINUTE).isAngularVelocity());  
                  [/code]
                  &lt;p&gt;&lt;i&gt; Note: Having the same system unit is not sufficient to ensure
                  that a converter exists between the two units
                  (e.g. °C/m and K/m).&lt;/i&gt;&lt;/p&gt;                
                <@return>
                    n the system unit this unit is derived from.                    
                </@return>
            </javadoc>
            <method name="toStandardUnit" type="UnitConverter" line="97"/>
            <javadoc line="97">
                Returns the converter from this unit to its system unit.                
                <@return>
                    n <code>this.getConverterTo(this.getSystemUnit())</code>                    
                </@return>
            </javadoc>
            <method name="hashCode" type="int" line="104"/>
            <javadoc line="104">
                Returns the hash code for this unit.                
                <@return>
                    n this unit hashcode value.                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="111"/>
            <javadoc line="111">
                Indicates if the specified unit can be considered equals to 
                  the one specified.                
                <@param>
                    m that the object to compare to.                    
                </@param>
                <@return>
                    n <code>true</code> if this unit is considered equal to 
                      that unit; <code>false</code> otherwise.                    
                </@return>
            </javadoc>
            <javadoc line="121">
                Indicates if this unit is a standard unit (base units and 
                  alternate units are standard units). The standard unit identifies 
                  the &quot;type&quot; of {@link javax.measure.quantity.Quantity quantity} for 
                  which the unit is employed.                
                <@return>
                    n <code>getStandardUnit().equals(this)</code>                    
                </@return>
            </javadoc>
            <method name="isStandardUnit" type="boolean" line="129"/>
            <javadoc line="133">
                Indicates if this unit is compatible with the unit specified.
                  Units don&apos;t need to be equals to be compatible. For example:[code]
                  RADIAN.equals(ONE) == false
                  RADIAN.isCompatible(ONE) == true
                  [/code]                
                <@param>
                    m that the other unit.                    
                </@param>
                <@return>
                    n <code>this.getDimension().equals(that.getDimension())</code>                    
                </@return>
                <@see>
                    e #getDimension()                    
                </@see>
            </javadoc>
            <method name="isCompatible" type="boolean" line="143">
                <params>
                    <param name="that" type="Unit<?>"/>
                </params>
            </method>
            <javadoc line="149">
                Casts this unit to a parameterized unit of specified nature or 
                  throw a &lt;code&gt;ClassCastException&lt;/code&gt; if the dimension of the 
                  specified quantity and this unit&apos;s dimension do not match.
                  For example:[code]
                  Unit&lt;Length&gt; LIGHT_YEAR = NonSI.C.times(NonSI.YEAR).asType(Length.class);
                  [/code]                
                <@param>
                    m type the quantity class identifying the nature of the unit.                    
                </@param>
                <@return>
                    n this unit parameterized with the specified type.                    
                </@return>
                <@throws>
                    s ClassCastException if the dimension of this unit is different 
                      from the specified quantity dimension.                    
                </@throws>
                <@throws>
                    s UnsupportedOperationException if the specified quantity class
                      does not have a public static field named "UNIT" holding the 
                      standard unit for the quantity.                    
                </@throws>
            </javadoc>
            <method name="asType" type="Unit<T>" line="166">
                <params>
                    <param name="type" type="Class<T>"/>
                </params>
                <declaration name="dim1" type="Dimension" line="167"/>
                <declaration name="u" type="Unit&lt;T&gt;" line="168"/>
                <scope line="169"/>
                <scope line="171"/>
                <declaration name="dim2" type="Dimension" line="174"/>
            </method>
            <javadoc line="180">
                Returns the dimension of this unit (depends upon the current 
                  dimensional {@link Dimension.Model model}).                
                <@return>
                    n the dimension of this unit for the current model.                    
                </@return>
            </javadoc>
            <method name="getDimension" type="Dimension" line="186">
                <comment line="187">
                    Product of units.                    
                </comment>
                <declaration name="systemUnit" type="Unit&lt;?&gt;" line="187"/>
                <declaration name="productUnit" type="ProductUnit&lt;?&gt;" line="193"/>
                <declaration name="dimension" type="Dimension" line="194"/>
                <scope line="195">
                    <declaration name="unit" type="Unit&lt;?&gt;" line="196"/>
                    <declaration name="d" type="Dimension" line="197"/>
                </scope>
            </method>
            <javadoc line="204">
                Returns a converter of numeric values from this unit to another unit.                
                <@param>
                    m that the unit to which to convert the numeric values.                    
                </@param>
                <@return>
                    n the converter from this unit to <code>that</code> unit.                    
                </@return>
                <@throws>
                    s ConversionException if the conveter cannot be constructed
                      (e.g. <code>!this.isCompatible(that)</code>).                    
                </@throws>
            </javadoc>
            <method name="getConverterTo" type="UnitConverter" line="213">
                <params>
                    <param name="that" type="Unit<?>"/>
                </params>
                <comment line="214">
                    Use dimensional transforms.                    
                </comment>
                <comment line="214">
                    Transform between SystemUnit and BaseUnits is Identity.                    
                </comment>
                <declaration name="thisSystemUnit" type="Unit&lt;?&gt;" line="216"/>
                <declaration name="thatSystemUnit" type="Unit&lt;?&gt;" line="217"/>
                <declaration name="thisTransform" type="UnitConverter" line="227"/>
                <declaration name="thatTransform" type="UnitConverter" line="229"/>
            </method>
            <method name="getBaseUnits" type="Unit<?>" line="234">
                <declaration name="systemUnit" type="Unit&lt;?&gt;" line="235"/>
                <scope line="239">
                    <declaration name="productUnit" type="ProductUnit&lt;?&gt;" line="240"/>
                    <declaration name="baseUnits" type="Unit&lt;?&gt;" line="241"/>
                    <scope line="242">
                        <declaration name="unit" type="Unit&lt;?&gt;" line="243"/>
                    </scope>
                </scope>
                <scope line="249"/>
            </method>
            <method name="transformOf" type="UnitConverter" line="254">
                <params>
                    <param name="baseUnits" type="Unit<?>"/>
                </params>
                <comment line="255">
                    Product of units.                    
                </comment>
                <declaration name="productUnit" type="ProductUnit&lt;?&gt;" line="258"/>
                <declaration name="converter" type="UnitConverter" line="259"/>
                <scope line="260">
                    <declaration name="unit" type="Unit&lt;?&gt;" line="261"/>
                    <declaration name="cvtr" type="UnitConverter" line="262"/>
                    <declaration name="pow" type="int" line="269"/>
                    <scope line="270"/>
                    <scope line="274"/>
                </scope>
            </method>
            <javadoc line="281">
                Returns a unit equivalent to this unit but used in expressions to 
                  distinguish between quantities of a different nature but of the same
                  dimensions.
                  &lt;p&gt; Examples of alternate units:[code]
                  Unit&lt;Angle&gt; RADIAN = ONE.alternate(&quot;rad&quot;);
                  Unit&lt;Force&gt; NEWTON = METER.times(KILOGRAM).divide(SECOND.pow(2)).alternate(&quot;N&quot;);
                  Unit&lt;Pressure&gt; PASCAL = NEWTON.divide(METER.pow(2)).alternate(&quot;Pa&quot;);
                  [/code]&lt;/p&gt;                
                <@param>
                    m symbol the new symbol for the alternate unit.                    
                </@param>
                <@return>
                    n the alternate unit.                    
                </@return>
                <@throws>
                    s UnsupportedOperationException if this unit is not a standard unit.                    
                </@throws>
                <@throws>
                    s IllegalArgumentException if the specified symbol is already 
                      associated to a different unit.                    
                </@throws>
            </javadoc>
            <method name="alternate" type="AlternateUnit<A>" line="298">
                <params>
                    <param name="symbol" type="String"/>
                </params>
            </method>
            <javadoc line="302">
                Returns the combination of this unit with the specified sub-unit.
                  Compound units are typically used for formatting purpose. 
                  Examples of compound units:[code]
                  HOUR_MINUTE = NonSI.HOUR.compound(NonSI.MINUTE);
                  DEGREE_MINUTE_SECOND_ANGLE = NonSI.DEGREE_ANGLE.compound(
                  NonSI.DEGREE_MINUTE).compound(NonSI.SECOND_ANGLE);
                  [/code]                
                <@param>
                    m subunit the sub-unit to combine with this unit.                    
                </@param>
                <@return>
                    n the corresponding compound unit.                    
                </@return>
            </javadoc>
            <method name="compound" type="CompoundUnit<Q>" line="314">
                <params>
                    <param name="subunit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="318">
                Returns the unit derived from this unit using the specified converter.
                  The converter does not need to be linear. For example:[code]
                  Unit&lt;Dimensionless&gt; DECIBEL = Unit.ONE.transform(
                  new LogConverter(10).inverse().concatenate(
                  new RationalConverter(1, 10)));[/code]                
                <@param>
                    m operation the converter from the transformed unit to this unit.                    
                </@param>
                <@return>
                    n the unit after the specified transformation.                    
                </@return>
            </javadoc>
            <method name="transform" type="Unit<Q>" line="328">
                <params>
                    <param name="operation" type="UnitConverter"/>
                </params>
                <scope line="329">
                    <declaration name="tf" type="TransformedUnit&lt;Q&gt;" line="330"/>
                    <declaration name="parent" type="Unit&lt;Q&gt;" line="331"/>
                    <declaration name="toParent" type="UnitConverter" line="332"/>
                </scope>
            </method>
            <javadoc line="342">
                Returns the result of adding an offset to this unit. The returned unit
                  is convertible with all units that are convertible with this unit.                
                <@param>
                    m offset the offset added (expressed in this unit,
                      e.g. <code>CELSIUS = KELVIN.plus(273.15)</code>).                    
                </@param>
                <@return>
                    n <code>this.transform(new AddConverter(offset))</code>                    
                </@return>
            </javadoc>
            <method name="plus" type="Unit<Q>" line="350">
                <params>
                    <param name="offset" type="double"/>
                </params>
            </method>
            <javadoc line="354">
                Returns the result of multiplying this unit by an exact factor.                
                <@param>
                    m factor the exact scale factor
                      (e.g. <code>KILOMETER = METER.times(1000)</code>).                    
                </@param>
                <@return>
                    n <code>this.transform(new RationalConverter(factor, 1))</code>                    
                </@return>
            </javadoc>
            <method name="times" type="Unit<Q>" line="361">
                <params>
                    <param name="factor" type="long"/>
                </params>
            </method>
            <javadoc line="365">
                Returns the result of multiplying this unit by a an approximate factor                
                <@param>
                    m factor the approximate factor (e.g. 
                      <code>ELECTRON_MASS = KILOGRAM.times(9.10938188e-31)</code>).                    
                </@param>
                <@return>
                    n <code>this.transform(new MultiplyConverter(factor))</code>                    
                </@return>
            </javadoc>
            <method name="times" type="Unit<Q>" line="372">
                <params>
                    <param name="factor" type="double"/>
                </params>
            </method>
            <javadoc line="376">
                Returns the product of this unit with the one specified.                
                <@param>
                    m that the unit multiplicand.                    
                </@param>
                <@return>
                    n <code>this  that</code>                    
                </@return>
            </javadoc>
            <method name="times" type="Unit<? extends Quantity>" line="382">
                <params>
                    <param name="that" type="Unit<?>"/>
                </params>
            </method>
            <javadoc line="386">
                Returns the inverse of this unit.                
                <@return>
                    n <code>1 / this</code>                    
                </@return>
            </javadoc>
            <method name="inverse" type="Unit<? extends Quantity>" line="391"/>
            <javadoc line="395">
                Returns the result of dividing this unit by an exact divisor.                
                <@param>
                    m divisor the exact divisor.
                      (e.g. <code>QUART = GALLON_LIQUID_US.divide(4)</code>).                    
                </@param>
                <@return>
                    n <code>this.transform(new RationalConverter(1 , divisor))</code>                    
                </@return>
            </javadoc>
            <method name="divide" type="Unit<Q>" line="402">
                <params>
                    <param name="divisor" type="long"/>
                </params>
            </method>
            <javadoc line="406">
                Returns the result of dividing this unit by an approximate divisor.                
                <@param>
                    m divisor the approximate divisor.                    
                </@param>
                <@return>
                    n <code>this.transform(new MultiplyConverter(1.0 / divisor))</code>                    
                </@return>
            </javadoc>
            <method name="divide" type="Unit<Q>" line="412">
                <params>
                    <param name="divisor" type="double"/>
                </params>
            </method>
            <javadoc line="416">
                Returns the quotient of this unit with the one specified.                
                <@param>
                    m that the unit divisor.                    
                </@param>
                <@return>
                    n <code>this / that</code>                    
                </@return>
            </javadoc>
            <method name="divide" type="Unit<? extends Quantity>" line="422">
                <params>
                    <param name="that" type="Unit<?>"/>
                </params>
            </method>
            <javadoc line="426">
                Returns a unit equals to the given root of this unit.                
                <@param>
                    m n the root's order.                    
                </@param>
                <@return>
                    n the result of taking the given root of this unit.                    
                </@return>
                <@throws>
                    s ArithmeticException if <code>n == 0</code>.                    
                </@throws>
            </javadoc>
            <method name="root" type="Unit<? extends Quantity>" line="433">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="434"/>
                <scope line="436"/>
                <scope line="438"/>
            </method>
            <javadoc line="443">
                Returns a unit equals to this unit raised to an exponent.                
                <@param>
                    m n the exponent.                    
                </@param>
                <@return>
                    n the result of raising this unit to the exponent.                    
                </@return>
            </javadoc>
            <method name="pow" type="Unit<? extends Quantity>" line="449">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="450"/>
                <scope line="452"/>
                <scope line="454"/>
            </method>
            <javadoc line="459">
                Returns a unit instance that is defined from the specified
                  character sequence using the {@link UnitFormat#getInstance()standard unit format}.
                  &lt;p&gt; Examples of valid entries (all for meters per second squared) are:
                  &lt;code&gt;&lt;ul&gt;
                  &lt;li&gt;ms-2&lt;/li&gt;
                  &lt;li&gt;m/s²&lt;/li&gt;
                  &lt;li&gt;m·s-²&lt;/li&gt;
                  &lt;li&gt;ms-2&lt;/li&gt;
                  &lt;li&gt;m^+1 s^-2&lt;/li&gt;
                  &lt;/ul&gt;&lt;/code&gt;&lt;/p&gt;                
                <@param>
                    m csq the character sequence to parse.                    
                </@param>
                <@return>
                    n <code>UnitFormat.getStandardInstance().parse(csq, new ParsePosition(0))</code>                    
                </@return>
                <@throws>
                    s IllegalArgumentException if the specified character sequence
                      cannot be correctly parsed (e.g. symbol unknown).                    
                </@throws>
            </javadoc>
            <method name="valueOf" type="Unit<? extends Quantity>" line="477">
                <params>
                    <param name="csq" type="CharSequence"/>
                </params>
                <scope line="478"/>
                <scope line="481"/>
            </method>
            <javadoc line="490">
                Returns the standard &lt;code&gt;String&lt;/code&gt; representation of this unit.
                  This representation is not affected by locale. Locale-sensitive
                  unit formatting and parsing is handled by the {@link MeasureFormat} 
                  class and its subclasses.                
                <@return>
                    n <code>UnitFormat.getStandardInstance().format(this)</code>                    
                </@return>
            </javadoc>
            <method name="toString" type="String" line="498"/>
        </class>
    </source>