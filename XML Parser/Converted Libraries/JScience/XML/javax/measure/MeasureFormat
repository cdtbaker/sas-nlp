<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.measure">
        <import package="java.math.BigDecimal"/>
        <import package="java.text.FieldPosition"/>
        <import package="java.text.Format"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.text.ParseException"/>
        <import package="java.text.ParsePosition"/>
        <import package="javax.measure.unit.CompoundUnit"/>
        <import package="javax.measure.unit.Unit"/>
        <import package="javax.measure.unit.UnitFormat"/>
        <class name="MeasureFormat" extends="Format" line="22">
            <comment line="23">
                Holds default implementation.                
            </comment>
            <javadoc line="22">
                &lt;p&gt; This class provides the interface for formatting and parsing {@link Measure measures}.&lt;/p&gt;
                 * &lt;p&gt; As a minimum, instances of this class should be able to parse/format
                 * measure using {@link CompoundUnit}. &lt;/p&gt;                
                <@author>
                    r  <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </@author>
                <@version>
                    n 4.2, August 26, 2007                    
                </@version>
            </javadoc>
            <javadoc line="34">
                Returns the measure format for the default locale.                
                <@return>
                    n <code>getInstance(Number.getInstance(), Unit.getInstance())</code>                    
                </@return>
            </javadoc>
            <method name="getInstance" type="MeasureFormat" line="39"/>
            <declaration name="DEFAULT" type="NumberUnit" line="43"/>
            <javadoc line="46">
                Returns the measure format using the specified number format and 
                 * unit format (the number and unit are separated by a space).                
                <@param>
                    m numberFormat the number format.                    
                </@param>
                <@param>
                    m unitFormat the unit format.                    
                </@param>
                <@return>
                    n the corresponding format.                    
                </@return>
            </javadoc>
            <method name="getInstance" type="MeasureFormat" line="55"/>
            <class name="NumberUnit" extends="MeasureFormat" line="60">
                <comment line="61">
                    Measure using Compound unit have no separators in their representation.                    
                </comment>
                <declaration name="_numberFormat" type="NumberFormat" line="61"/>
                <declaration name="_unitFormat" type="UnitFormat" line="63"/>
                <method name="NumberUnit" type="constructor" line="65"/>
                <method name="format" type="StringBuffer" line="72">
                    <declaration name="measure" type="Measure&lt;?,?&gt;" line="73"/>
                    <declaration name="value" type="Object" line="74"/>
                    <declaration name="unit" type="Unit&lt;?&gt;" line="75"/>
                    <scope line="76"/>
                    <scope line="81"/>
                    <scope line="84"/>
                </method>
                <method name="formatCompound" type="StringBuffer" line="93">
                    <comment line="94">
                        it&lt;?&gt; low = ((CompoundUnit&lt;?&gt;) unit).getLower(); // The unit in which the value is stated.                        
                    </comment>
                    <scope line="94"/>
                    <declaration name="high" type="Unit&lt;?&gt;" line="98"/>
                    <declaration name="low" type="Unit&lt;?&gt;" line="99"/>
                    <declaration name="highValue" type="long" line="100"/>
                    <declaration name="lowValue" type="double" line="101"/>
                </method>
                <method name="parseObject" type="Object" line="109">
                    <declaration name="start" type="int" line="110"/>
                    <scope line="111">
                        <declaration name="i" type="int" line="112"/>
                        <declaration name="value" type="Number" line="113"/>
                        <declaration name="isCompound" type="boolean" line="119"/>
                        <declaration name="unit" type="Unit&lt;?&gt;" line="125"/>
                    </scope>
                    <scope line="127"/>
                </method>
                <method name="parseCompound" type="Object" line="136">
                    <declaration name="high" type="Unit" line="137"/>
                    <declaration name="i" type="int" line="138"/>
                    <declaration name="lowMeasure" type="Measure" line="142"/>
                    <declaration name="unit" type="Unit" line="143"/>
                    <declaration name="l" type="long" line="144"/>
                </method>
                <method name="measureOf" type="Measure" line="151">
                    <scope line="152"/>
                    <scope line="154"/>
                    <scope line="156"/>
                    <scope line="158"/>
                    <scope line="160"/>
                    <scope line="162"/>
                </method>
                <declaration name="serialVersionUID" type="long" line="167"/>
            </class>
        </class>
    </source>