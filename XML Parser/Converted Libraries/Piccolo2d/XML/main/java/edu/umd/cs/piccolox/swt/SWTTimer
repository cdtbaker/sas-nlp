<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.swt">
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.ActionListener"/>
        <import package="javax.swing.Timer"/>
        <import package="org.eclipse.swt.widgets.Display"/>
        <class name="SWTTimer" line="38">
            <extends class="Timer"/>
            <comment line="39">
                These fields are maintained by TimerQueue.                
            </comment>
            <comment line="39">
                eventQueued can also be reset by the TimerQueue, but will only ever                
            </comment>
            <comment line="39">
                happen in applet case when TimerQueues thread is destroyed.                
            </comment>
            <javadoc line="38">
                SWT timer.                
                <@author>
                    r Lance Good                    
                </@author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="44"/>
            <declaration name="notify" type="boolean" line="46"/>
            <declaration name="initialDelay" type="int" line="48"/>
            <declaration name="delay" type="int" line="49"/>
            <declaration name="repeats" type="boolean" line="50"/>
            <declaration name="coalesce" type="boolean" line="51"/>
            <declaration name="doPostEvent" type="Runnable" line="52"/>
            <declaration name="display" type="Display" line="53"/>
            <declaration name="expirationTime" type="long" line="58"/>
            <declaration name="nextTimer" type="SWTTimer" line="59"/>
            <declaration name="running" type="boolean" line="60"/>
            <class name="SWTDoPostEvent" line="62">
                <implements interface="Runnable"/>
                <javadoc line="62">
                    DoPostEvent is a runnable class that fires actionEvents to the listeners
                      on the EventDispatchThread, via invokeLater.                    
                    <@see>
                        e #post                        
                    </@see>
                </javadoc>
                <method name="run" type="void" line="69">
                    <scope line="70">
                        <scope line="72"/>
                    </scope>
                </method>
                <method name="getTimer" type="SWTTimer" line="78"/>
            </class>
            <javadoc line="83">
                Constructor for SWTTimer.                
                <@param>
                    m display display associated with this timer                    
                </@param>
                <@param>
                    m delay time in milliseconds between firings of this timer                    
                </@param>
                <@param>
                    m listener action listener to fire when the timer fires                    
                </@param>
            </javadoc>
            <method name="SWTTimer" type="constructor" line="90">
                <params>
                    <param name="display" type="Display"/>
                    <param name="delay" type="int"/>
                    <param name="listener" type="ActionListener"/>
                </params>
            </method>
            <javadoc line="99">
                Notifies all listeners that have registered interest for notification on
                  this event type.                
                <@param>
                    m e the action event to fire                    
                </@param>
            </javadoc>
            <method name="fireActionPerformed" type="void" line="105">
                <params>
                    <param name="e" type="ActionEvent"/>
                </params>
                <comment line="106">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="106">
                    Process the listeners last to first, notifying                    
                </comment>
                <comment line="106">
                    those that are interested in this event                    
                </comment>
                <declaration name="listeners" type="Object[]" line="107"/>
                <scope line="111">
                    <scope line="112"/>
                </scope>
            </method>
            <javadoc line="118">
                Returns the timer queue.                
            </javadoc>
            <method name="timerQueue" type="SWTTimerQueue" line="121"/>
            <javadoc line="125">
                Sets the &lt;code&gt;Timer&lt;/code&gt;&apos;s delay, the number of milliseconds between
                  successive action events.                
                <@param>
                    m delay the delay in milliseconds                    
                </@param>
                <@see>
                    e #setInitialDelay                    
                </@see>
            </javadoc>
            <method name="setDelay" type="void" line="132">
                <params>
                    <param name="delay" type="int"/>
                </params>
                <scope line="133"/>
                <scope line="136"/>
            </method>
            <javadoc line="141">
                Returns the delay, in milliseconds, between firings of action events.                
                <@see>
                    e #setDelay                    
                </@see>
                <@see>
                    e #getInitialDelay                    
                </@see>
                <@return>
                    n delay in milliseconds between firings of this timer                    
                </@return>
            </javadoc>
            <method name="getDelay" type="int" line="148"/>
            <javadoc line="152">
                Sets the &lt;code&gt;Timer&lt;/code&gt;&apos;s initial delay, which by default is the same
                  as the between-event delay. This is used only for the first action event.
                  Subsequent action events are spaced using the delay property.                
                <@param>
                    m initialDelay the delay, in milliseconds, between the invocation of
                      the <code>start</code> method and the first action event fired
                      by this timer                    
                </@param>
                <@see>
                    e #setDelay                    
                </@see>
            </javadoc>
            <method name="setInitialDelay" type="void" line="163">
                <params>
                    <param name="initialDelay" type="int"/>
                </params>
                <scope line="164"/>
                <scope line="167"/>
            </method>
            <javadoc line="172">
                Returns the &lt;code&gt;Timer&lt;/code&gt;&apos;s initial delay. By default this is the
                  same as the value returned by getDelay.                
                <@see>
                    e #setInitialDelay                    
                </@see>
                <@see>
                    e #setDelay                    
                </@see>
                <@return>
                    n the initial delay of this timer                    
                </@return>
            </javadoc>
            <method name="getInitialDelay" type="int" line="180"/>
            <javadoc line="184">
                If &lt;code&gt;flag&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, instructs the
                  &lt;code&gt;Timer&lt;/code&gt; to send only one action event to its listeners.                
                <@param>
                    m flag specify <code>false</code> to make the timer stop after
                      sending its first action event                    
                </@param>
            </javadoc>
            <method name="setRepeats" type="void" line="191">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <javadoc line="195">
                Returns &lt;code&gt;true&lt;/code&gt; (the default) if the &lt;code&gt;Timer&lt;/code&gt; will
                  send an action event to its listeners multiple times.                
                <@see>
                    e #setRepeats                    
                </@see>
                <@return>
                    n true if this timer should repeat when completed                    
                </@return>
            </javadoc>
            <method name="isRepeats" type="boolean" line="202"/>
            <javadoc line="206">
                Sets whether the &lt;code&gt;Timer&lt;/code&gt; coalesces multiple pending
                  &lt;code&gt;ActionEvent&lt;/code&gt; firings. A busy application may not be able to
                  keep up with a &lt;code&gt;Timer&lt;/code&gt;&apos;s event generation, causing multiple
                  action events to be queued. When processed, the application sends these
                  events one after the other, causing the &lt;code&gt;Timer&lt;/code&gt;&apos;s listeners to
                  receive a sequence of events with no delay between them. Coalescing
                  avoids this situation by reducing multiple pending events to a single
                  event. &lt;code&gt;Timer&lt;/code&gt;s coalesce events by default.                
                <@param>
                    m flag specify <code>false</code> to turn off coalescing                    
                </@param>
            </javadoc>
            <method name="setCoalesce" type="void" line="218">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
                <declaration name="old" type="boolean" line="219"/>
                <scope line="221"/>
            </method>
            <javadoc line="229">
                Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Timer&lt;/code&gt; coalesces multiple
                  pending action events.                
                <@see>
                    e #setCoalesce                    
                </@see>
                <@return>
                    n true if this timer coalesces multiple pending action events                    
                </@return>
            </javadoc>
            <method name="isCoalesce" type="boolean" line="236"/>
            <javadoc line="240">
                Starts the &lt;code&gt;Timer&lt;/code&gt;, causing it to start sending action events
                  to its listeners.                
                <@see>
                    e #stop                    
                </@see>
            </javadoc>
            <method name="start" type="void" line="246"/>
            <javadoc line="250">
                Returns &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Timer&lt;/code&gt; is running.                
                <@see>
                    e #start                    
                </@see>
                <@return>
                    n true if this timer is scheduled to run                    
                </@return>
            </javadoc>
            <method name="isRunning" type="boolean" line="256"/>
            <javadoc line="260">
                Stops the &lt;code&gt;Timer&lt;/code&gt;, causing it to stop sending action events to
                  its listeners.                
                <@see>
                    e #start                    
                </@see>
            </javadoc>
            <method name="stop" type="void" line="266"/>
            <javadoc line="271">
                Restarts the &lt;code&gt;Timer&lt;/code&gt;, canceling any pending firings and
                  causing it to fire with its initial delay.                
            </javadoc>
            <method name="restart" type="void" line="275"/>
            <javadoc line="280">
                Resets the internal state to indicate this Timer shouldn&apos;t notify any of
                  its listeners. This does not stop a repeatable Timer from firing again,
                  use &lt;code&gt;stop&lt;/code&gt; for that.                
            </javadoc>
            <method name="cancelEventOverride" type="void" line="285"/>
            <method name="postOverride" type="void" line="289">
                <scope line="290"/>
            </method>
            <javadoc line="296">
                @param expirationTime the expirationTime to set                
            </javadoc>
            <method name="setExpirationTime" type="void" line="299">
                <params>
                    <param name="expirationTime" type="long"/>
                </params>
            </method>
            <javadoc line="303">
                @return the expirationTime                
            </javadoc>
            <method name="getExpirationTime" type="long" line="306"/>
            <javadoc line="310">
                @param nextTimer the nextTimer to set                
            </javadoc>
            <method name="setNextTimer" type="void" line="313">
                <params>
                    <param name="nextTimer" type="SWTTimer"/>
                </params>
            </method>
            <javadoc line="317">
                @return the nextTimer                
            </javadoc>
            <method name="getNextTimer" type="SWTTimer" line="320"/>
            <javadoc line="324">
                @param running the running to set                
            </javadoc>
            <method name="setRunning" type="void" line="327">
                <params>
                    <param name="running" type="boolean"/>
                </params>
            </method>
        </class>
    </source>