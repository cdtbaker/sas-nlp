<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.event">
        <import package="java.lang.ref.ReferenceQueue"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <class name="PNotificationCenter" line="50">
            <comment line="51">
                ****************************************************************                
            </comment>
            <comment line="51">
                Remove Listener Methods                
            </comment>
            <comment line="51">
                ****************************************************************                
            </comment>
            <comment line="51">
                ****************************************************************                
            </comment>
            <comment line="51">
                Post PNotification Methods                
            </comment>
            <comment line="51">
                ****************************************************************                
            </comment>
            <javadoc line="50">
                &lt;b&gt;PNotificationCenter&lt;/b&gt; provides a way for objects that don&apos;t know about
                 * each other to communicate. It receives PNotification objects and broadcasts
                 * them to all interested listeners. Unlike standard Java events, the event
                 * listeners don&apos;t need to know about the event source, and the event source
                 * doesn&apos;t need to maintain the list of listeners.
                 * &lt;p&gt;
                 * Listeners of the notifications center are held by weak references. So the
                 * notification center will not create garbage collection problems as standard
                 * java event listeners do.
                 * &lt;/p&gt;                
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="NULL_MARKER" type="Object" line="65"/>
            <javadoc line="65">
                Used as a place holder for null names or objects.                
            </javadoc>
            <declaration name="DEFAULT_CENTER" type="PNotificationCenter" line="68"/>
            <javadoc line="68">
                Singleton instance of the notification center.                
            </javadoc>
            <declaration name="listenersMap" type="HashMap" line="71"/>
            <javadoc line="71">
                A map of listeners keyed by NotificationKey objects.                
            </javadoc>
            <declaration name="keyQueue" type="ReferenceQueue" line="74"/>
            <javadoc line="74">
                A queue of NotificationKeys that are available to be garbage collected.                
            </javadoc>
            <javadoc line="77">
                Singleton accessor for the PNotificationCenter.                
                <@return>
                    n singleton instance of PNotificationCenter                    
                </@return>
            </javadoc>
            <method name="defaultCenter" type="PNotificationCenter" line="82">
                <scope line="83"/>
            </method>
            <method name="PNotificationCenter" type="constructor" line="89"/>
            <javadoc line="94">
                Registers the &apos;listener&apos; to receive notifications with the name
                 * &apos;notificationName&apos; and/or containing &apos;object&apos;. When a matching
                 * notification is posted the callBackMethodName message will be sent to the
                 * listener with a single PNotification argument. If notificationName is
                 * null then the listener will receive all notifications with an object
                 * matching &apos;object&apos;. If &apos;object&apos; is null the listener will receive all
                 * notifications with the name &apos;notificationName&apos;.                
                <@param>
                    m listener object to be notified of notifications                    
                </@param>
                <@param>
                    m callbackMethodName method to be invoked on the listener                    
                </@param>
                <@param>
                    m notificationName name of notifications to filter on                    
                </@param>
                <@param>
                    m object source of notification messages that this listener is
                     * interested in                    
                </@param>
                <@return>
                    n true if listener has been added                    
                </@return>
            </javadoc>
            <method name="addListener" type="boolean" line="111">
                <declaration name="name" type="Object" line="114"/>
                <declaration name="sanitizedObject" type="Object" line="115"/>
                <declaration name="method" type="Method" line="117"/>
                <scope line="118"/>
                <declaration name="key" type="NotificationKey" line="122"/>
                <declaration name="notificationTarget" type="NotificationTarget" line="123"/>
                <declaration name="list" type="List" line="125"/>
                <scope line="126"/>
                <scope line="131"/>
            </method>
            <method name="extractCallbackMethod" type="Method" line="138">
                <declaration name="method" type="Method" line="139"/>
                <scope line="140">
                    <declaration name="classes" type="Class[]" line="141"/>
                </scope>
                <scope line="145"/>
                <declaration name="modifiers" type="int" line="149"/>
                <scope line="150"/>
            </method>
            <javadoc line="157">
                Sanitizes the object reference by returning NULL_MARKER if the object is
                 * null.                
                <@param>
                    m object object to sanitize                    
                </@param>
                <@return>
                    n NULL_MARKER is object is null, otherwise object                    
                </@return>
            </javadoc>
            <method name="nullify" type="Object" line="165">
                <scope line="166"/>
            </method>
            <javadoc line="177">
                Removes the listener so that it no longer receives notfications from this
                 * notification center.                
                <@param>
                    m listener listener to be removed from this notification center                    
                </@param>
            </javadoc>
            <method name="removeListener" type="void" line="183">
                <declaration name="i" type="Iterator" line="186"/>
                <scope line="187"/>
            </method>
            <javadoc line="192">
                Unregisters the listener as a listener for the specified kind of
                 * notification.
                 * If listener is null all listeners matching notificationName and object
                 * are removed.
                 * If notificationName is null the listener will be removed from all
                 * notifications containing the object.
                 * If the object is null then the listener will be removed from all
                 * notifications matching notficationName.                
                <@param>
                    m listener listener to be removed                    
                </@param>
                <@param>
                    m notificationName name of notifications or null for all                    
                </@param>
                <@param>
                    m object notification source or null for all                    
                </@param>
            </javadoc>
            <method name="removeListener" type="void" line="209">
                <declaration name="keys" type="List" line="212"/>
                <declaration name="it" type="Iterator" line="213"/>
                <scope line="214"/>
            </method>
            <javadoc line="223">
                Post a new notification with notificationName and object. The object is
                 * typically the object posting the notification. The object may be null.                
                <@param>
                    m notificationName name of notification to post                    
                </@param>
                <@param>
                    m object source of the notification, null signifies unknown                    
                </@param>
            </javadoc>
            <method name="postNotification" type="void" line="230"/>
            <javadoc line="234">
                Creates a notification with the name notificationName, associates it with
                 * the object, and posts it to this notification center. The object is
                 * typically the object posting the notification. It may be null.                
                <@param>
                    m notificationName name of notification being posted                    
                </@param>
                <@param>
                    m object source of the notification, may be null                    
                </@param>
                <@param>
                    m properties properties associated with the notification                    
                </@param>
            </javadoc>
            <method name="postNotification" type="void" line="243"/>
            <javadoc line="247">
                Post the notification to this notification center. Most often clients
                 * will instead use one of this classes convenience postNotifcations
                 * methods.                
                <@param>
                    m notification notification to be dispatched to appropriate
                     * listeners                    
                </@param>
            </javadoc>
            <method name="postNotification" type="void" line="255">
                <declaration name="mergedListeners" type="List" line="256"/>
                <declaration name="name" type="Object" line="258"/>
                <declaration name="object" type="Object" line="259"/>
                <scope line="261"/>
                <scope line="266"/>
                <scope line="269"/>
            </method>
            <javadoc line="278">
                Adds all listeners that are registered to receive notifications to the
                 * end of the list provided.                
                <@param>
                    m notificationName name of the notification being emitted                    
                </@param>
                <@param>
                    m object source of the notification                    
                </@param>
                <@param>
                    m listeners list to append listeners to                    
                </@param>
            </javadoc>
            <method name="fillWithMatchingListeners" type="void" line="286">
                <declaration name="key" type="Object" line="287"/>
                <declaration name="globalListeners" type="List" line="288"/>
                <scope line="289"/>
            </method>
            <method name="dispatchNotifications" type="void" line="294">
                <declaration name="listener" type="NotificationTarget" line="295"/>
                <declaration name="listenerIterator" type="Iterator" line="296"/>
                <scope line="298">
                    <scope line="300"/>
                    <scope line="303"/>
                </scope>
            </method>
            <method name="notifyListener" type="void" line="309">
                <scope line="310">
                    <declaration name="objects" type="Object[]" line="311"/>
                </scope>
                <scope line="315"/>
                <scope line="318"/>
            </method>
            <javadoc line="323">
                Returns a list of keys with the given name and object.                
                <@param>
                    m name name of key                    
                </@param>
                <@param>
                    m object key associated with the object                    
                </@param>
                <@return>
                    n list of matching keys                    
                </@return>
            </javadoc>
            <method name="matchingKeys" type="List" line="331">
                <declaration name="result" type="List" line="332"/>
                <declaration name="searchKey" type="NotificationKey" line="334"/>
                <declaration name="it" type="Iterator" line="335"/>
                <scope line="336">
                    <declaration name="key" type="NotificationKey" line="337"/>
                    <scope line="338"/>
                </scope>
            </method>
            <javadoc line="346">
                Removes the given listener from receiving notifications with the given
                 * key.                
                <@param>
                    m listener the listener being unregistered                    
                </@param>
                <@param>
                    m key the key that identifies the listener                    
                </@param>
            </javadoc>
            <method name="removeListener" type="void" line="353">
                <scope line="354"/>
                <declaration name="list" type="List" line="359"/>
                <scope line="360"/>
                <declaration name="it" type="Iterator" line="364"/>
                <scope line="365">
                    <declaration name="observer" type="Object" line="366"/>
                    <scope line="367"/>
                </scope>
                <scope line="372"/>
            </method>
            <javadoc line="377">
                Iterates over available keys in the key queue and removes the queue from
                 * the listener map.                
            </javadoc>
            <method name="processKeyQueue" type="void" line="381">
                <declaration name="key" type="NotificationKey" line="382"/>
                <scope line="383"/>
            </method>
            <class name="NotificationKey" extends="WeakReference" line="388">
                <javadoc line="388">
                    Represents a notification type from a particular object.                    
                </javadoc>
                <declaration name="name" type="Object" line="392"/>
                <declaration name="hashCode" type="int" line="393"/>
                <javadoc line="395">
                    Creates a notification key with the provided name associated to the
                     * object given.                    
                    <@param>
                        m name name of notification                        
                    </@param>
                    <@param>
                        m object associated object                        
                    </@param>
                </javadoc>
                <method name="NotificationKey" type="constructor" line="402"/>
                <javadoc line="408">
                    Creates a notification key with the provided name associated with the
                     * provided object.                    
                    <@param>
                        m name name of notification                        
                    </@param>
                    <@param>
                        m object associated object                        
                    </@param>
                    <@param>
                        m queue ReferenceQueue in which this NotificationKey will be
                         * appended once it has been cleared to be garbage collected                        
                    </@param>
                </javadoc>
                <method name="NotificationKey" type="constructor" line="417"/>
                <javadoc line="423">
                    Returns name of notification this key represents.                    
                    <@return>
                        n name of notification                        
                    </@return>
                </javadoc>
                <method name="name" type="Object" line="428"/>
                <javadoc line="432">
                    {@inheritDoc}                    
                </javadoc>
                <method name="hashCode" type="int" line="433"/>
                <javadoc line="437">
                    Two keys are equal if they have the same name and are associated with
                     * the same object and conform to all other equals rules.                    
                    <@param>
                        m anObject object being tested for equivalence to this
                         * NotificationKey                        
                    </@param>
                    <@return>
                        n true if this object is logically equivalent to the one passed
                         * in                        
                    </@return>
                </javadoc>
                <method name="equals" type="boolean" line="447">
                    <scope line="448"/>
                    <scope line="452"/>
                    <declaration name="key" type="NotificationKey" line="456"/>
                    <scope line="458"/>
                    <declaration name="object" type="Object" line="462"/>
                </method>
                <javadoc line="467">
                    Returns a nice string representation of this notification key.                    
                    <@return>
                        n string representation of this notification key                        
                    </@return>
                </javadoc>
                <method name="toString" type="String" line="472"/>
            </class>
            <class name="NotificationTarget" extends="WeakReference" line="477">
                <javadoc line="477">
                    A NotificationTarget is a method on a particular object that can be
                     * invoked.                    
                </javadoc>
                <declaration name="hashCode" type="int" line="482"/>
                <javadoc line="482">
                    Cached hashcode value computed at construction time.                    
                </javadoc>
                <declaration name="method" type="Method" line="485"/>
                <javadoc line="485">
                    Method to be invoked on the object.                    
                </javadoc>
                <javadoc line="488">
                    Creates a notification target representing the method on the
                     * particular object provided.                    
                    <@param>
                        m object object on which method can be invoked                        
                    </@param>
                    <@param>
                        m method method to be invoked                        
                    </@param>
                </javadoc>
                <method name="NotificationTarget" type="constructor" line="495"/>
                <javadoc line="501">
                    Returns the method that will be invoked on the listener object.                    
                    <@return>
                        n method to be invoked with notification is to be dispatched                        
                    </@return>
                </javadoc>
                <method name="getMethod" type="Method" line="506"/>
                <javadoc line="510">
                    Returns hash code for this notification target.                    
                    <@return>
                        n hash code                        
                    </@return>
                </javadoc>
                <method name="hashCode" type="int" line="515"/>
                <javadoc line="519">
                    Returns true if this object is logically equivalent to the one passed
                     * in. For this to happen they must have the same method and object.                    
                    <@param>
                        m object object being tested for logical equivalency to this one                        
                    </@param>
                    <@return>
                        n true if logically equivalent                        
                    </@return>
                </javadoc>
                <method name="equals" type="boolean" line="527">
                    <scope line="528"/>
                    <scope line="532"/>
                    <declaration name="target" type="NotificationTarget" line="536"/>
                    <scope line="537"/>
                    <declaration name="o" type="Object" line="541"/>
                </method>
                <javadoc line="546">
                    Returns a string representation of this NotificationTarget for
                     * debugging purposes.                    
                    <@return>
                        n string representation                        
                    </@return>
                </javadoc>
                <method name="toString" type="String" line="552"/>
            </class>
        </class>
    </source>