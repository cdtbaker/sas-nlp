<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.swing">
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="javax.swing.ScrollPaneConstants"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PCanvas"/>
        <import package="edu.umd.cs.piccolo.PLayer"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.PRoot"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransform"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <class name="PDefaultScrollDirector" line="50">
            <implements interface="PScrollDirector"/>
            <implements interface="PropertyChangeListener"/>
            <javadoc line="50">
                The default scroll director implementation. This default implementation
                  follows the widely accepted model of scrolling - namely the scrollbars
                  control the movement of the window over the document rather than the movement
                  of the document under the window.                
                <@author>
                    r Lance Good                    
                </@author>
            </javadoc>
            <declaration name="viewPort" type="PViewport" line="60"/>
            <javadoc line="60">
                The viewport that signals this scroll director.                
            </javadoc>
            <declaration name="scrollPane" type="PScrollPane" line="63"/>
            <javadoc line="63">
                The scrollpane that contains the viewport.                
            </javadoc>
            <declaration name="view" type="PCanvas" line="66"/>
            <javadoc line="66">
                The canvas that this class directs.                
            </javadoc>
            <declaration name="camera" type="PCamera" line="69"/>
            <javadoc line="69">
                The canvas&apos; camera.                
            </javadoc>
            <declaration name="root" type="PRoot" line="72"/>
            <javadoc line="72">
                The canvas&apos; root.                
            </javadoc>
            <declaration name="scrollInProgress" type="boolean" line="75"/>
            <javadoc line="75">
                Flag to indicate when scrolling is currently in progress.                
            </javadoc>
            <javadoc line="78">
                The default constructor.                
            </javadoc>
            <method name="PDefaultScrollDirector" type="constructor" line="81"/>
            <javadoc line="84">
                Installs the scroll director and adds the appropriate listeners.                
                <@param>
                    m targetViewPort viewport on which this director directs                    
                </@param>
                <@param>
                    m targetView PCanvas that the viewport looks at                    
                </@param>
            </javadoc>
            <method name="install" type="void" line="90">
                <params>
                    <param name="targetViewPort" type="PViewport"/>
                    <param name="targetView" type="PCanvas"/>
                </params>
                <scope line="95"/>
                <scope line="100"/>
                <scope line="103"/>
                <scope line="107"/>
            </method>
            <javadoc line="112">
                Uninstall the scroll director from the viewport.                
            </javadoc>
            <method name="unInstall" type="void" line="115">
                <scope line="119"/>
                <scope line="122"/>
            </method>
            <javadoc line="130">
                Get the View position given the specified camera bounds.                
                <@param>
                    m viewBounds The bounds for which the view position will be computed                    
                </@param>
                <@return>
                    n The view position                    
                </@return>
            </javadoc>
            <method name="getViewPosition" type="Point" line="136">
                <params>
                    <param name="viewBounds" type="Rectangle2D"/>
                </params>
                <declaration name="pos" type="Point" line="137"/>
                <scope line="138">
                    <declaration name="layerBounds" type="PBounds" line="140"/>
                    <declaration name="layers" type="List" line="141"/>
                    <scope line="142">
                        <declaration name="layer" type="PLayer" line="143"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="159">
                Get the size of the view based on the specified camera bounds.                
                <@param>
                    m viewBounds The view bounds for which the view size will be
                      computed                    
                </@param>
                <@return>
                    n The view size                    
                </@return>
            </javadoc>
            <method name="getViewSize" type="Dimension" line="166">
                <params>
                    <param name="viewBounds" type="Rectangle2D"/>
                </params>
                <declaration name="size" type="Dimension" line="167"/>
                <scope line="168">
                    <declaration name="bounds" type="PBounds" line="170"/>
                    <declaration name="layers" type="List" line="171"/>
                    <scope line="172">
                        <declaration name="layer" type="PLayer" line="173"/>
                    </scope>
                    <scope line="179"/>
                </scope>
            </method>
            <javadoc line="190">
                Set the view position in a manner consistent with standardized scrolling.                
                <@param>
                    m x The new x position                    
                </@param>
                <@param>
                    m y The new y position                    
                </@param>
            </javadoc>
            <method name="setViewPosition" type="void" line="196">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <comment line="197">
                    Bail out if scrollInProgress because we can end up with an infinite                    
                </comment>
                <comment line="197">
                    loop since the scrollbars depend on the camera location                    
                </comment>
                <comment line="197">
                    Get the union of all the layers&apos; bounds                    
                </comment>
                <comment line="197">
                    Union the camera bounds                    
                </comment>
                <comment line="197">
                    Now find the new view position in view coordinates                    
                </comment>
                <comment line="197">
                    Now transform the new view position into global coords                    
                </comment>
                <comment line="197">
                    Compute the new matrix values to put the camera at the                    
                </comment>
                <comment line="197">
                    correct location                    
                </comment>
                <comment line="197">
                    Now actually set the camera&apos;s transform                    
                </comment>
                <scope line="199"/>
                <declaration name="layerBounds" type="PBounds" line="206"/>
                <declaration name="layers" type="List" line="207"/>
                <scope line="208">
                    <declaration name="layer" type="PLayer" line="209"/>
                </scope>
                <declaration name="at" type="PAffineTransform" line="213"/>
                <declaration name="viewBounds" type="PBounds" line="217"/>
                <declaration name="newPoint" type="Point2D" line="221"/>
                <declaration name="newX" type="double" line="228"/>
                <declaration name="newY" type="double" line="229"/>
            </method>
            <javadoc line="238">
                Invoked when the camera&apos;s view changes, or the bounds of the root or
                  camera changes.                
                <@param>
                    m pce property change event to examine                    
                </@param>
            </javadoc>
            <method name="propertyChange" type="void" line="244">
                <params>
                    <param name="pce" type="PropertyChangeEvent"/>
                </params>
                <declaration name="isRelevantViewEvent" type="boolean" line="245"/>
                <declaration name="isRelevantBoundsEvent" type="boolean" line="246"/>
                <scope line="249">
                    <scope line="250"/>
                    <scope line="253"/>
                </scope>
            </method>
            <method name="isBoundsChangedEvent" type="boolean" line="259">
                <params>
                    <param name="pce" type="PropertyChangeEvent"/>
                </params>
            </method>
            <javadoc line="263">
                Should the ScrollPane be revalidated. This occurs when either the scroll
                  bars are showing and should be remove or are not showing and should be
                  added.                
                <@return>
                    n Whether the scroll pane should be revalidated                    
                </@return>
            </javadoc>
            <method name="shouldRevalidateScrollPane" type="boolean" line="270">
                <scope line="271">
                    <scope line="273"/>
                    <declaration name="layerBounds" type="PBounds" line="278"/>
                    <declaration name="layers" type="List" line="279"/>
                    <scope line="280">
                        <declaration name="layer" type="PLayer" line="281"/>
                    </scope>
                    <declaration name="cameraBounds" type="PBounds" line="289"/>
                    <declaration name="layerWidth" type="int" line="294"/>
                    <declaration name="layerHeight" type="int" line="295"/>
                    <declaration name="cameraWidth" type="int" line="296"/>
                    <declaration name="cameraHeight" type="int" line="297"/>
                    <scope line="302"/>
                </scope>
            </method>
        </class>
    </source>