<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.event">
        <import package="java.awt.event.FocusEvent"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.event.MouseWheelEvent"/>
        <class name="PInputEventFilter" line="37">
            <javadoc line="37">
                &lt;b&gt;PInputEventFilter&lt;/b&gt; is a class that filters input events based on the
                 * events modifiers and type. Any PBasicInputEventHandler that is associated
                 * with an event filter will only receive events that pass through the filter.
                 * &lt;P&gt;
                 * To be accepted events must contain all the modifiers listed in the andMask,
                 * at least one of the modifiers listed in the orMask, and none of the modifiers
                 * listed in the notMask. The event filter also lets you specify specific event
                 * types (mousePressed, released, ...) to accept or reject.
                 * &lt;P&gt;
                 * If the event filter is set to consume, then it will call consume on any event
                 * that it successfully accepts.
                 * &lt;P&gt;                
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="ALL_MODIFIERS_MASK" type="int" line="55"/>
            <javadoc line="55">
                Mask representing all possible modifiers.                
            </javadoc>
            <declaration name="andMask" type="int" line="60"/>
            <javadoc line="60">
                If event modifiers don&apos;t match this exactly, event it filtered.                
            </javadoc>
            <declaration name="orMask" type="int" line="63"/>
            <javadoc line="63">
                If event modifiers have no bits from orMask enabled, event is filtered.                
            </javadoc>
            <declaration name="notMask" type="int" line="66"/>
            <javadoc line="66">
                If event modifier has any of the notMask bits on, it is not accepted.                
            </javadoc>
            <declaration name="clickCount" type="short" line="69"/>
            <javadoc line="69">
                Number of clicks that an incoming event must have to be accepted.                
            </javadoc>
            <declaration name="marksAcceptedEventsAsHandled" type="boolean" line="72"/>
            <javadoc line="72">
                Whether accepted events should be marked as handled.                
            </javadoc>
            <declaration name="acceptsAlreadyHandledEvents" type="boolean" line="75"/>
            <javadoc line="75">
                Whether handled events should be immediately filtered.                
            </javadoc>
            <declaration name="acceptsKeyPressed" type="boolean" line="78"/>
            <javadoc line="78">
                Whether key pressed events are accepted.                
            </javadoc>
            <declaration name="acceptsKeyReleased" type="boolean" line="81"/>
            <javadoc line="81">
                Whether key released events are accepted.                
            </javadoc>
            <declaration name="acceptsKeyTyped" type="boolean" line="84"/>
            <javadoc line="84">
                Whether key typed events are accepted.                
            </javadoc>
            <declaration name="acceptsMouseClicked" type="boolean" line="87"/>
            <javadoc line="87">
                Whether mouse clicked events are accepted.                
            </javadoc>
            <declaration name="acceptsMouseDragged" type="boolean" line="90"/>
            <javadoc line="90">
                Whether mouse dragged events are accepted.                
            </javadoc>
            <declaration name="acceptsMouseEntered" type="boolean" line="93"/>
            <javadoc line="93">
                Whether mouse entered events are accepted.                
            </javadoc>
            <declaration name="acceptsMouseExited" type="boolean" line="96"/>
            <javadoc line="96">
                Whether mouse exited events are accepted.                
            </javadoc>
            <declaration name="acceptsMouseMoved" type="boolean" line="99"/>
            <javadoc line="99">
                Whether mouse moved events are accepted.                
            </javadoc>
            <declaration name="acceptsMousePressed" type="boolean" line="102"/>
            <javadoc line="102">
                Whether mouse pressed events are accepted.                
            </javadoc>
            <declaration name="acceptsMouseReleased" type="boolean" line="105"/>
            <javadoc line="105">
                Whether mouse released events are accepted.                
            </javadoc>
            <declaration name="acceptsMouseWheelRotated" type="boolean" line="108"/>
            <javadoc line="108">
                Whether mouse wheel rotated events are accepted.                
            </javadoc>
            <declaration name="acceptsFocusEvents" type="boolean" line="111"/>
            <javadoc line="111">
                Whether focus events are accepted.                
            </javadoc>
            <javadoc line="114">
                Creates a PInputEventFilter that accepts everything.                
            </javadoc>
            <method name="PInputEventFilter" type="constructor" line="117"/>
            <javadoc line="121">
                Creates a PInputEventFilter that will accept events if they have the
                 * given andMask.                
                <@param>
                    m andMask exact pattern event modifiers must be to get accepted                    
                </@param>
            </javadoc>
            <method name="PInputEventFilter" type="constructor" line="127"/>
            <javadoc line="132">
                Creates a PInputEventFilter that will accept events if they have the
                 * given andMask and do not contain any of the bits in the notMask.                
                <@param>
                    m andMask exact pattern event modifiers must be to get accepted                    
                </@param>
                <@param>
                    m notMask if any or these bits are on event is not accepted                    
                </@param>
            </javadoc>
            <method name="PInputEventFilter" type="constructor" line="139"/>
            <javadoc line="144">
                Returns true if the passed event is one that is accepted.                
                <@param>
                    m event Event under consideration                    
                </@param>
                <@param>
                    m type The type of event encoded as the PInputEvent                    
                </@param>
                <@return>
                    n true if event is accepted                    
                </@return>
            </javadoc>
            <method name="acceptsEvent" type="boolean" line="151">
                <declaration name="aResult" type="boolean" line="152"/>
                <declaration name="modifiers" type="int" line="153"/>
                <scope line="155"/>
                <scope line="159"/>
                <scope line="163">
                    <scope line="164"/>
                    <scope line="168"/>
                </scope>
                <scope line="173"/>
                <scope line="232"/>
            </method>
            <javadoc line="239">
                Makes this filter accept all mouse click combinations.                
            </javadoc>
            <method name="acceptAllClickCounts" type="void" line="242"/>
            <javadoc line="246">
                Makes the filter accept all event types.                
            </javadoc>
            <method name="acceptAllEventTypes" type="void" line="249"/>
            <javadoc line="264">
                Makes this filter accept absolutely everything.                
            </javadoc>
            <method name="acceptEverything" type="void" line="267"/>
            <javadoc line="275">
                Returns whether this filter accepts key pressed events.                
                <@return>
                    n true if filter accepts key pressed events                    
                </@return>
            </javadoc>
            <method name="getAcceptsKeyPressed" type="boolean" line="280"/>
            <javadoc line="284">
                Returns whether this filter accepts key released events.                
                <@return>
                    n true if filter accepts key released events                    
                </@return>
            </javadoc>
            <method name="getAcceptsKeyReleased" type="boolean" line="289"/>
            <javadoc line="293">
                Returns whether this filter accepts key typed events.                
                <@return>
                    n true if filter accepts key typed events                    
                </@return>
            </javadoc>
            <method name="getAcceptsKeyTyped" type="boolean" line="298"/>
            <javadoc line="302">
                Returns whether this filter accepts mouse clicked events.                
                <@return>
                    n true if filter accepts mouse clicked events                    
                </@return>
            </javadoc>
            <method name="getAcceptsMouseClicked" type="boolean" line="307"/>
            <javadoc line="311">
                Returns whether this filter accepts mouse dragged events.                
                <@return>
                    n true if filter accepts mouse dragged events                    
                </@return>
            </javadoc>
            <method name="getAcceptsMouseDragged" type="boolean" line="316"/>
            <javadoc line="320">
                Returns whether this filter accepts mouse entered events.                
                <@return>
                    n true if filter accepts mouse entered events                    
                </@return>
            </javadoc>
            <method name="getAcceptsMouseEntered" type="boolean" line="325"/>
            <javadoc line="329">
                Returns whether this filter accepts mouse exited events.                
                <@return>
                    n true if filter accepts mouse exited events                    
                </@return>
            </javadoc>
            <method name="getAcceptsMouseExited" type="boolean" line="334"/>
            <javadoc line="338">
                Returns whether this filter accepts mouse moved events.                
                <@return>
                    n true if filter accepts mouse moved events                    
                </@return>
            </javadoc>
            <method name="getAcceptsMouseMoved" type="boolean" line="343"/>
            <javadoc line="347">
                Returns whether this filter accepts mouse pressed events.                
                <@return>
                    n true if filter accepts mouse pressed events                    
                </@return>
            </javadoc>
            <method name="getAcceptsMousePressed" type="boolean" line="352"/>
            <javadoc line="356">
                Returns whether this filter accepts mouse released events.                
                <@return>
                    n true if filter accepts mouse released events                    
                </@return>
            </javadoc>
            <method name="getAcceptsMouseReleased" type="boolean" line="361"/>
            <javadoc line="365">
                Returns whether this filter accepts mouse wheel rotated events.                
                <@return>
                    n true if filter accepts mouse wheel rotated events                    
                </@return>
            </javadoc>
            <method name="getAcceptsMouseWheelRotated" type="boolean" line="370"/>
            <javadoc line="374">
                Returns whether this filter accepts focus events.                
                <@return>
                    n true if filter accepts focus events                    
                </@return>
            </javadoc>
            <method name="getAcceptsFocusEvents" type="boolean" line="379"/>
            <javadoc line="383">
                Returns whether this filter accepts events that have already been flagged
                 * as handled.                
                <@return>
                    n true if filter accepts events that have already been flagged as
                     * handled                    
                </@return>
            </javadoc>
            <method name="getAcceptsAlreadyHandledEvents" type="boolean" line="390"/>
            <javadoc line="394">
                Returns whether this filter marks events as handled if they are accepted.                
                <@return>
                    n true if filter will mark events as filtered if they are accepted                    
                </@return>
            </javadoc>
            <method name="getMarksAcceptedEventsAsHandled" type="boolean" line="399"/>
            <javadoc line="403">
                Flags all mouse click events as disallowed, regardless of button
                 * configuration.                
            </javadoc>
            <method name="rejectAllClickCounts" type="void" line="407"/>
            <javadoc line="411">
                Configures filter so that no events will ever get accepted. By itself not
                 * terribly useful, but it&apos;s a more restrictive starting point than
                 * acceptAllEvents();                
            </javadoc>
            <method name="rejectAllEventTypes" type="void" line="416"/>
            <javadoc line="431">
                Sets the number of clicks that an incoming event must have to be accepted.                
                <@param>
                    m aClickCount number clicks that an incoming event must have to be accepted                    
                </@param>
            </javadoc>
            <method name="setAcceptClickCount" type="void" line="436"/>
            <javadoc line="440">
                Sets whether this filter accepts key pressed events.                
                <@param>
                    m aBoolean whether filter should accept key pressed events                    
                </@param>
            </javadoc>
            <method name="setAcceptsKeyPressed" type="void" line="445"/>
            <javadoc line="449">
                Sets whether this filter accepts key released events.                
                <@param>
                    m aBoolean whether filter should accept key released events                    
                </@param>
            </javadoc>
            <method name="setAcceptsKeyReleased" type="void" line="454"/>
            <javadoc line="458">
                Sets whether this filter accepts key typed events.                
                <@param>
                    m aBoolean whether filter should accept key typed events                    
                </@param>
            </javadoc>
            <method name="setAcceptsKeyTyped" type="void" line="464"/>
            <javadoc line="468">
                Sets whether this filter accepts mouse clicked events.                
                <@param>
                    m aBoolean whether filter should accept mouse clicked events                    
                </@param>
            </javadoc>
            <method name="setAcceptsMouseClicked" type="void" line="473"/>
            <javadoc line="477">
                Sets whether this filter accepts mouse dragged events.                
                <@param>
                    m aBoolean whether filter should accept mouse dragged events                    
                </@param>
            </javadoc>
            <method name="setAcceptsMouseDragged" type="void" line="482"/>
            <javadoc line="486">
                Sets whether this filter accepts mouse entered events.                
                <@param>
                    m aBoolean whether filter should accept mouse entered events                    
                </@param>
            </javadoc>
            <method name="setAcceptsMouseEntered" type="void" line="491"/>
            <javadoc line="495">
                Sets whether this filter accepts mouse exited events.                
                <@param>
                    m aBoolean whether filter should accept mouse exited events                    
                </@param>
            </javadoc>
            <method name="setAcceptsMouseExited" type="void" line="500"/>
            <javadoc line="504">
                Sets whether this filter accepts mouse moved events.                
                <@param>
                    m aBoolean whether filter should accept mouse moved events                    
                </@param>
            </javadoc>
            <method name="setAcceptsMouseMoved" type="void" line="509"/>
            <javadoc line="513">
                Sets whether this filter accepts mouse pressed events.                
                <@param>
                    m aBoolean whether filter should accept mouse pressed events                    
                </@param>
            </javadoc>
            <method name="setAcceptsMousePressed" type="void" line="518"/>
            <javadoc line="522">
                Sets whether this filter accepts mouse released events.                
                <@param>
                    m aBoolean whether filter should accept mouse released events                    
                </@param>
            </javadoc>
            <method name="setAcceptsMouseReleased" type="void" line="527"/>
            <javadoc line="531">
                Sets whether this filter accepts mouse wheel rotation events.                
                <@param>
                    m aBoolean whether filter should accept mouse wheel rotated events                    
                </@param>
            </javadoc>
            <method name="setAcceptsMouseWheelRotated" type="void" line="536"/>
            <javadoc line="540">
                Sets whether this filter accepts focus events.                
                <@param>
                    m aBoolean whether filter should accept focus events                    
                </@param>
            </javadoc>
            <method name="setAcceptsFocusEvents" type="void" line="545"/>
            <javadoc line="549">
                Sets and mask used to filter events. All bits of the andMask must be 1s
                 * for the event to be accepted.                
                <@param>
                    m aAndMask the and mask to use for filtering events                    
                </@param>
            </javadoc>
            <method name="setAndMask" type="void" line="555"/>
            <javadoc line="559">
                Sets whether already handled events should be accepted.                
                <@param>
                    m aBoolean whether already handled events should be accepted                    
                </@param>
            </javadoc>
            <method name="setAcceptsAlreadyHandledEvents" type="void" line="564"/>
            <javadoc line="568">
                Sets whether events will be marked as dirty once accepted.                
                <@param>
                    m aBoolean whether events will be marked as dirty once accepted                    
                </@param>
            </javadoc>
            <method name="setMarksAcceptedEventsAsHandled" type="void" line="573"/>
            <javadoc line="577">
                Sets not mask used to filter events. If any of the not bits are enabled,
                 * then the event is not accepted.                
                <@param>
                    m aNotMask the not mask to use for filtering events                    
                </@param>
            </javadoc>
            <method name="setNotMask" type="void" line="583"/>
            <javadoc line="587">
                Sets or mask used to filter events. If any of the or bits are enabled,
                 * then the event is accepted.                
                <@param>
                    m aOrMask the or mask to use for filtering events                    
                </@param>
            </javadoc>
            <method name="setOrMask" type="void" line="593"/>
        </class>
    </source>