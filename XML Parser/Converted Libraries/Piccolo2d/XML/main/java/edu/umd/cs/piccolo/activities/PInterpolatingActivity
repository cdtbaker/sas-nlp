<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.activities">
        <import package="edu.umd.cs.piccolo.util.PUtil"/>
        <class name="PInterpolatingActivity" line="33">
            <extends class="PActivity"/>
            <comment line="34">
                ****************************************************************                
            </comment>
            <comment line="34">
                Basics.                
            </comment>
            <comment line="34">
                ****************************************************************                
            </comment>
            <comment line="34">
                ****************************************************************                
            </comment>
            <comment line="34">
                Stepping - Instead of overriding the step methods subclasses                
            </comment>
            <comment line="34">
                of this activity will normally override setRelativeTargetValue().                
            </comment>
            <comment line="34">
                This method will be called for every step of the activity with                
            </comment>
            <comment line="34">
                a value ranging from 0,0 (for the first step) to 1.0 (for the                
            </comment>
            <comment line="34">
                final step). See PTransformActivity for an example.                
            </comment>
            <comment line="34">
                ****************************************************************                
            </comment>
            <javadoc line="33">
                &lt;b&gt;PInterpolatingActivity&lt;/b&gt; interpolates between two states (source and
                  destination) over the duration of the activity. The interpolation can be
                  either linear or slow- in, slow-out.
                  &lt;P&gt;
                  The mode determines how the activity interpolates between the two states. The
                  default mode interpolates from source to destination, but you can also go
                  from destination to source, and from source to destination to source.
                  &lt;P&gt;
                  A loopCount of greater then one will make the activity reschedule itself when
                  it has finished. This makes the activity loop between the two states.
                  &lt;P&gt;                
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="SOURCE_TO_DESTINATION" type="int" line="51"/>
            <javadoc line="51">
                Specifies that interpolation will be from the source value to the
                  destination value.                
            </javadoc>
            <declaration name="DESTINATION_TO_SOURCE" type="int" line="57"/>
            <javadoc line="57">
                Specifies that interpolation will be from the destination value to the
                  source value.                
            </javadoc>
            <declaration name="SOURCE_TO_DESTINATION_TO_SOURCE" type="int" line="63"/>
            <javadoc line="63">
                Specifies that interpolation proceed from the source to the destination
                  then back to the source. Can be used to perform flashes. source value.                
            </javadoc>
            <declaration name="mode" type="int" line="69"/>
            <declaration name="slowInSlowOut" type="boolean" line="70"/>
            <declaration name="loopCount" type="int" line="71"/>
            <declaration name="firstLoop" type="boolean" line="72"/>
            <javadoc line="74">
                Constructs an interpolating activity that will last the duration given.                
                <@since>
                    e 1.3                    
                </@since>
                <@param>
                    m duration duration in milliseconds of the entire activity                    
                </@param>
            </javadoc>
            <method name="PInterpolatingActivity" type="constructor" line="80">
                <params>
                    <param name="duration" type="long"/>
                </params>
            </method>
            <javadoc line="84">
                Constructs an interpolating activity that will last the duration given
                  and will update its target at the given rate.                
                <@param>
                    m duration duration in milliseconds of the entire activity                    
                </@param>
                <@param>
                    m stepRate interval in milliseconds between updates to target                    
                </@param>
            </javadoc>
            <method name="PInterpolatingActivity" type="constructor" line="91">
                <params>
                    <param name="duration" type="long"/>
                    <param name="stepRate" type="long"/>
                </params>
            </method>
            <javadoc line="95">
                Constructs an interpolating activity that will last the duration given
                  and will update its target at the given rate. Once done, it will repeat
                  the loopCount times.                
                <@param>
                    m duration duration in milliseconds of the entire activity                    
                </@param>
                <@param>
                    m stepRate interval in milliseconds between updates to target                    
                </@param>
                <@param>
                    m loopCount # of times to repeat this activity.                    
                </@param>
                <@param>
                    m mode controls the direction of the interpolation (source to
                      destination, destination to source, or source to destination
                      back to source)                    
                </@param>
            </javadoc>
            <method name="PInterpolatingActivity" type="constructor" line="107">
                <params>
                    <param name="duration" type="long"/>
                    <param name="stepRate" type="long"/>
                    <param name="loopCount" type="int"/>
                    <param name="mode" type="int"/>
                </params>
            </method>
            <javadoc line="111">
                Create a new PInterpolatingActivity.
                  &lt;P&gt;                
                <@param>
                    m duration the length of one loop of the activity                    
                </@param>
                <@param>
                    m stepRate the amount of time between steps of the activity                    
                </@param>
                <@param>
                    m startTime the time (relative to System.currentTimeMillis()) that
                      this activity should start. This value can be in the future.                    
                </@param>
                <@param>
                    m loopCount number of times the activity should reschedule itself                    
                </@param>
                <@param>
                    m mode defines how the activity interpolates between states                    
                </@param>
            </javadoc>
            <method name="PInterpolatingActivity" type="constructor" line="123">
                <params>
                    <param name="duration" type="long"/>
                    <param name="stepRate" type="long"/>
                    <param name="startTime" type="long"/>
                    <param name="loopCount" type="int"/>
                    <param name="mode" type="int"/>
                </params>
            </method>
            <javadoc line="131">
                Set the amount of time that this activity should take to complete, after
                  the startStepping method is called. The duration must be greater then
                  zero so that the interpolation value can be computed.                
                <@param>
                    m duration new duration of this activity                    
                </@param>
            </javadoc>
            <method name="setDuration" type="void" line="138">
                <params>
                    <param name="duration" type="long"/>
                </params>
                <scope line="139"/>
            </method>
            <javadoc line="150">
                Return the mode used for interpolation.
                  Acceptable values are: SOURCE_TO_DESTINATION, DESTINATION_TO_SOURCE and
                  SOURCE_TO_DESTINATION_TO_SOURCE                
                <@return>
                    n current mode of this activity                    
                </@return>
            </javadoc>
            <method name="getMode" type="int" line="158"/>
            <javadoc line="162">
                Set the direction in which interpolation is going to occur.
                  Acceptable values are: SOURCE_TO_DESTINATION, DESTINATION_TO_SOURCE and
                  SOURCE_TO_DESTINATION_TO_SOURCE                
                <@param>
                    m mode the new mode to use when interpolating                    
                </@param>
            </javadoc>
            <method name="setMode" type="void" line="170">
                <params>
                    <param name="mode" type="int"/>
                </params>
            </method>
            <javadoc line="174">
                Return the number of times the activity should automatically reschedule
                  itself after it has finished.                
                <@return>
                    n number of times to repeat this activity                    
                </@return>
            </javadoc>
            <method name="getLoopCount" type="int" line="180"/>
            <javadoc line="184">
                Set the number of times the activity should automatically reschedule
                  itself after it has finished.                
                <@param>
                    m loopCount number of times to repeat this activity                    
                </@param>
            </javadoc>
            <method name="setLoopCount" type="void" line="190">
                <params>
                    <param name="loopCount" type="int"/>
                </params>
            </method>
            <javadoc line="194">
                Return true if the activity is executing its first loop. Subclasses
                  normally initialize their source state on the first loop.                
                <@return>
                    n true if executing first loop                    
                </@return>
            </javadoc>
            <method name="getFirstLoop" type="boolean" line="200"/>
            <javadoc line="204">
                Set if the activity is executing its first loop. Subclasses normally
                  initialize their source state on the first loop. This method will rarely
                  need to be called, unless your are reusing activities.                
                <@param>
                    m firstLoop true if executing first loop                    
                </@param>
            </javadoc>
            <method name="setFirstLoop" type="void" line="211">
                <params>
                    <param name="firstLoop" type="boolean"/>
                </params>
            </method>
            <javadoc line="215">
                Returns whether this interpolation accelerates and then decelerates as it
                  interpolates.                
                <@return>
                    n true if accelerations are being applied apply                    
                </@return>
            </javadoc>
            <method name="getSlowInSlowOut" type="boolean" line="221"/>
            <javadoc line="225">
                Sets whether this interpolation accelerates and then decelerates as it
                  interpolates.                
                <@param>
                    m isSlowInSlowOut true if this interpolation inovolves some
                      accelerations                    
                </@param>
            </javadoc>
            <method name="setSlowInSlowOut" type="void" line="232">
                <params>
                    <param name="isSlowInSlowOut" type="boolean"/>
                </params>
            </method>
            <javadoc line="244">
                Called when activity is started. Makes sure target value is set properly
                  for start of activity.                
            </javadoc>
            <method name="activityStarted" type="void" line="248"/>
            <javadoc line="253">
                Called at each step of the activity. Sets the current position taking
                  mode into account.                
                <@param>
                    m elapsedTime number of milliseconds since the activity began                    
                </@param>
            </javadoc>
            <method name="activityStep" type="void" line="260">
                <params>
                    <param name="elapsedTime" type="long"/>
                </params>
                <declaration name="t" type="float" line="263"/>
                <scope line="268"/>
            </method>
            <javadoc line="275">
                Called whenever the activity finishes. Reschedules it if the value of
                  loopCount is &gt; 0.                
            </javadoc>
            <method name="activityFinished" type="void" line="279">
                <declaration name="scheduler" type="PActivityScheduler" line="283"/>
                <scope line="284">
                    <scope line="285"/>
                </scope>
            </method>
            <javadoc line="294">
                Stop this activity immediately, and remove it from the activity
                  scheduler. If this activity is currently running then stoppedStepping
                  will be called after it has been removed from the activity scheduler.                
            </javadoc>
            <method name="terminate" type="void" line="299">
                <comment line="300">
                    opCount = 0; // set to zero so that we don&apos;t reschedule self.                    
                </comment>
            </method>
            <javadoc line="304">
                Subclasses should override this method and set the value on their target
                  (the object that they are modifying) accordingly.                
                <@param>
                    m zeroToOne relative completion of task.                    
                </@param>
            </javadoc>
            <method name="setRelativeTargetValue" type="void" line="310">
                <params>
                    <param name="zeroToOne" type="float"/>
                </params>
            </method>
            <javadoc line="313">
                Computes percent or linear interpolation to apply when taking
                  acceleration into account.                
                <@param>
                    m zeroToOne Percentage of activity completed                    
                </@param>
                <@return>
                    n strength of acceleration                    
                </@return>
            </javadoc>
            <method name="computeSlowInSlowOut" type="float" line="320">
                <params>
                    <param name="zeroToOne" type="float"/>
                </params>
                <scope line="321"/>
                <scope line="324">
                    <declaration name="complement" type="float" line="325"/>
                </scope>
            </method>
            <javadoc line="330">
                Assigns relative target value taking the mode into account.                
                <@param>
                    m zeroToOne Percentage of activity completed                    
                </@param>
            </javadoc>
            <method name="setRelativeTargetValueAdjustingForMode" type="void" line="335">
                <params>
                    <param name="zeroToOne" type="float"/>
                </params>
                <declaration name="adjustedZeroToOne" type="float" line="336"/>
                <scope line="343"/>
                <scope line="346"/>
            </method>
        </class>
    </source>