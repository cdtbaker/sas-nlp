<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.swt">
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="org.eclipse.swt.SWT"/>
        <import package="org.eclipse.swt.events.DisposeEvent"/>
        <import package="org.eclipse.swt.events.DisposeListener"/>
        <import package="org.eclipse.swt.events.KeyEvent"/>
        <import package="org.eclipse.swt.events.KeyListener"/>
        <import package="org.eclipse.swt.events.MouseEvent"/>
        <import package="org.eclipse.swt.events.MouseListener"/>
        <import package="org.eclipse.swt.events.MouseMoveListener"/>
        <import package="org.eclipse.swt.events.PaintEvent"/>
        <import package="org.eclipse.swt.events.PaintListener"/>
        <import package="org.eclipse.swt.graphics.Cursor"/>
        <import package="org.eclipse.swt.graphics.GC"/>
        <import package="org.eclipse.swt.graphics.Image"/>
        <import package="org.eclipse.swt.graphics.Rectangle"/>
        <import package="org.eclipse.swt.widgets.Composite"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PComponent"/>
        <import package="edu.umd.cs.piccolo.PLayer"/>
        <import package="edu.umd.cs.piccolo.PRoot"/>
        <import package="edu.umd.cs.piccolo.event.PInputEventListener"/>
        <import package="edu.umd.cs.piccolo.event.PPanEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PZoomEventHandler"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PDebug"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolo.util.PStack"/>
        <class name="PSWTCanvas" line="64">
            <extends class="Composite"/>
            <comment line="65">
                ****************************************************************                
            </comment>
            <comment line="65">
                Basic - Methods for accessing common Piccolo2D nodes.                
            </comment>
            <comment line="65">
                ****************************************************************                
            </comment>
            <comment line="65">
                ****************************************************************                
            </comment>
            <comment line="65">
                Painting                
            </comment>
            <comment line="65">
                ****************************************************************                
            </comment>
            <comment line="65">
                ****************************************************************                
            </comment>
            <comment line="65">
                Code to manage connection to Swing. There appears to be a bug in                
            </comment>
            <comment line="65">
                swing where it will occasionally send to many mouse pressed or mouse                
            </comment>
            <comment line="65">
                released events. Below we attempt to filter out those cases before                
            </comment>
            <comment line="65">
                they get delivered to the Piccolo2D framework.                
            </comment>
            <comment line="65">
                ****************************************************************                
            </comment>
            <implements interface="PComponent"/>
            <javadoc line="64">
                &lt;b&gt;PSWTCanvas&lt;/b&gt; is an SWT Composite that can be used to embed
                  Piccolo into a SWT application. Canvases view the Piccolo scene graph
                  through a camera. The canvas manages screen updates coming from this camera,
                  and forwards swing mouse and keyboard events to the camera.                
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="SWT_BUTTON1" type="int" line="74"/>
            <declaration name="SWT_BUTTON2" type="int" line="75"/>
            <declaration name="SWT_BUTTON3" type="int" line="76"/>
            <declaration name="CURRENT_CANVAS" type="PSWTCanvas" line="78"/>
            <javadoc line="78">
                Terrible Singleton instance of the PSWTCanvas. Falsely assumes you will
                  only have one of these per application.                
            </javadoc>
            <declaration name="backBuffer" type="Image" line="84"/>
            <declaration name="doubleBuffered" type="boolean" line="85"/>
            <declaration name="camera" type="PCamera" line="86"/>
            <declaration name="cursorStack" type="PStack" line="87"/>
            <declaration name="curCursor" type="Cursor" line="88"/>
            <declaration name="interacting" type="int" line="89"/>
            <declaration name="defaultRenderQuality" type="int" line="90"/>
            <declaration name="animatingRenderQuality" type="int" line="91"/>
            <declaration name="interactingRenderQuality" type="int" line="92"/>
            <declaration name="panEventHandler" type="PPanEventHandler" line="93"/>
            <declaration name="zoomEventHandler" type="PZoomEventHandler" line="94"/>
            <declaration name="paintingImmediately" type="boolean" line="95"/>
            <declaration name="animatingOnLastPaint" type="boolean" line="96"/>
            <declaration name="isButton1Pressed" type="boolean" line="98"/>
            <declaration name="isButton2Pressed" type="boolean" line="99"/>
            <declaration name="isButton3Pressed" type="boolean" line="100"/>
            <javadoc line="102">
                Construct a canvas with the basic scene graph consisting of a root,
                  camera, and layer. Event handlers for zooming and panning are
                  automatically installed.                
                <@param>
                    m parent component onto which the canvas is installed                    
                </@param>
                <@param>
                    m style component style for the PSWTCanvas                    
                </@param>
            </javadoc>
            <method name="PSWTCanvas" type="constructor" line="110">
                <params>
                    <param name="parent" type="Composite"/>
                    <param name="style" type="int"/>
                </params>
            </method>
            <method name="installPaintListener" type="void" line="129">
                <anonymous_class line="130">
                    <method name="paintControl" type="void" line="131">
                        <params>
                            <param name="pe" type="PaintEvent"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="installDisposeListener" type="void" line="137">
                <anonymous_class line="139">
                    <method name="widgetDisposed" type="void" line="140">
                        <params>
                            <param name="de" type="DisposeEvent"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="151">
                Get the pan event handler associated with this canvas. This event handler
                  is set up to get events from the camera associated with this canvas by
                  default.                
                <@return>
                    n the current pan event handler, which may be null                    
                </@return>
            </javadoc>
            <method name="getPanEventHandler" type="PPanEventHandler" line="158"/>
            <javadoc line="162">
                Get the zoom event handler associated with this canvas. This event
                  handler is set up to get events from the camera associated with this
                  canvas by default.                
                <@return>
                    n the event handler installed to handle zooming                    
                </@return>
            </javadoc>
            <method name="getZoomEventHandler" type="PZoomEventHandler" line="169"/>
            <javadoc line="173">
                Return the camera associated with this canvas. All input events from this
                  canvas go through this camera. And this is the camera that paints this
                  canvas.                
                <@return>
                    n the camera associated with this canvas                    
                </@return>
            </javadoc>
            <method name="getCamera" type="PCamera" line="180"/>
            <javadoc line="184">
                Set the camera associated with this canvas. All input events from this
                  canvas go through this camera. And this is the camera that paints this
                  canvas.                
                <@param>
                    m newCamera camera to attach to this canvas                    
                </@param>
            </javadoc>
            <method name="setCamera" type="void" line="191">
                <params>
                    <param name="newCamera" type="PCamera"/>
                </params>
                <scope line="192"/>
                <scope line="198">
                    <declaration name="swtRect" type="Rectangle" line="201"/>
                </scope>
            </method>
            <javadoc line="207">
                Return root for this canvas.                
                <@return>
                    n root of the scene this canvas is viewing through its camera                    
                </@return>
            </javadoc>
            <method name="getRoot" type="PRoot" line="212"/>
            <javadoc line="216">
                Helper method to return the first layer attached to the camera of this
                  canvas.
                  Short form of &lt;code&gt;canvas.getCamera.getLayer(0)&lt;/code&gt;                
                <@return>
                    n the first layer attached to the camera of this canvas                    
                </@return>
            </javadoc>
            <method name="getLayer" type="PLayer" line="224"/>
            <javadoc line="228">
                Add an input listener to the camera associated with this canvas.                
                <@param>
                    m listener listener to add to to the camera                    
                </@param>
            </javadoc>
            <method name="addInputEventListener" type="void" line="233">
                <params>
                    <param name="listener" type="PInputEventListener"/>
                </params>
            </method>
            <javadoc line="237">
                Remove an input listener to the camera associated with this canvas. Does
                  nothign is the listener is not found.                
                <@param>
                    m listener listener to remove from the set of event listeners
                      attached to this canvas.                    
                </@param>
            </javadoc>
            <method name="removeInputEventListener" type="void" line="244">
                <params>
                    <param name="listener" type="PInputEventListener"/>
                </params>
            </method>
            <javadoc line="248">
                Builds the basic scene graph associated with this canvas. Developers may
                  override this method to install their own layers, and cameras.                
                <@return>
                    n PCamera viewing the freshly created scene                    
                </@return>
            </javadoc>
            <method name="createBasicSceneGraph" type="PCamera" line="254">
                <declaration name="r" type="PRoot" line="255"/>
                <declaration name="l" type="PLayer" line="256"/>
                <declaration name="c" type="PCamera" line="257"/>
            </method>
            <javadoc line="270">
                Return true if this canvas has been marked as interacting. If so the
                  canvas will normally render at a lower quality that is faster.                
                <@return>
                    n true if canvas is flagged as interacting                    
                </@return>
            </javadoc>
            <method name="getInteracting" type="boolean" line="276"/>
            <javadoc line="280">
                Return true if any activities that respond with true to the method
                  isAnimating were run in the last PRoot.processInputs() loop. This values
                  is used by this canvas to determine the render quality to use for the
                  next paint.                
                <@return>
                    n true if there is an animating activity that is currently active                    
                </@return>
            </javadoc>
            <method name="getAnimating" type="boolean" line="288"/>
            <javadoc line="292">
                Changes the number of callers that are interacting with the canvas. Will
                  allow the scene to be rendered in a lower quality if the number is not 0.                
                <@param>
                    m isInteracting state the client considers the PSWTCanvas to be in
                      with regard to interacting                    
                </@param>
            </javadoc>
            <method name="setInteracting" type="void" line="299">
                <params>
                    <param name="isInteracting" type="boolean"/>
                </params>
                <scope line="300"/>
                <scope line="303"/>
                <scope line="307"/>
            </method>
            <javadoc line="312">
                Get whether this canvas should use double buffering - the default is to
                  double buffer.                
                <@return>
                    n true if double buffering is enabled                    
                </@return>
            </javadoc>
            <method name="getDoubleBuffered" type="boolean" line="318"/>
            <javadoc line="322">
                Set whether this canvas should use double buffering - the default is yes.                
                <@param>
                    m doubleBuffered value of double buffering flas                    
                </@param>
            </javadoc>
            <method name="setDoubleBuffered" type="void" line="327">
                <params>
                    <param name="doubleBuffered" type="boolean"/>
                </params>
                <scope line="329"/>
            </method>
            <javadoc line="335">
                Set the render quality that should be used when rendering this canvas.
                  The default value is PPaintContext.HIGH_QUALITY_RENDERING.                
                <@param>
                    m requestedQuality supports PPaintContext.HIGH_QUALITY_RENDERING or
                      PPaintContext.LOW_QUALITY_RENDERING                    
                </@param>
            </javadoc>
            <method name="setDefaultRenderQuality" type="void" line="342">
                <params>
                    <param name="requestedQuality" type="int"/>
                </params>
            </method>
            <javadoc line="347">
                Set the render quality that should be used when rendering this canvas
                  when it is animating. The default value is
                  PPaintContext.LOW_QUALITY_RENDERING.                
                <@param>
                    m requestedQuality supports PPaintContext.HIGH_QUALITY_RENDERING or
                      PPaintContext.LOW_QUALITY_RENDERING                    
                </@param>
            </javadoc>
            <method name="setAnimatingRenderQuality" type="void" line="355">
                <params>
                    <param name="requestedQuality" type="int"/>
                </params>
            </method>
            <javadoc line="360">
                Set the render quality that should be used when rendering this canvas
                  when it is interacting. The default value is
                  PPaintContext.LOW_QUALITY_RENDERING.                
                <@param>
                    m requestedQuality supports PPaintContext.HIGH_QUALITY_RENDERING or
                      PPaintContext.LOW_QUALITY_RENDERING                    
                </@param>
            </javadoc>
            <method name="setInteractingRenderQuality" type="void" line="368">
                <params>
                    <param name="requestedQuality" type="int"/>
                </params>
            </method>
            <javadoc line="373">
                Set the canvas cursor, and remember the previous cursor on the cursor
                  stack. Under the hood it is mapping the java.awt.Cursor to
                  org.eclipse.swt.graphics.Cursor objects.                
                <@param>
                    m newCursor new cursor to push onto the cursor stack                    
                </@param>
            </javadoc>
            <method name="pushCursor" type="void" line="380">
                <params>
                    <param name="newCursor" type="java.awt.Cursor"/>
                </params>
                <declaration name="swtCursor" type="Cursor" line="381"/>
                <scope line="382"/>
                <scope line="385"/>
                <scope line="388"/>
                <scope line="391"/>
                <scope line="394"/>
                <scope line="397"/>
                <scope line="400"/>
                <scope line="403"/>
                <scope line="406"/>
                <scope line="409"/>
                <scope line="412"/>
                <scope line="415"/>
                <scope line="418"/>
                <scope line="422">
                    <scope line="423"/>
                </scope>
            </method>
            <javadoc line="431">
                Pop the cursor on top of the cursorStack and set it as the canvas cursor.                
            </javadoc>
            <method name="popCursor" type="void" line="434">
                <comment line="435">
                    This sets the cursor back to default                    
                </comment>
                <scope line="435"/>
                <scope line="440"/>
                <scope line="443"/>
            </method>
            <javadoc line="458">
                This method installs mouse and key listeners on the canvas that forward
                  those events to Piccolo2D.                
            </javadoc>
            <method name="installInputSources" type="void" line="462">
                <declaration name="mouseInputSource" type="MouseInputSource" line="463"/>
            </method>
            <javadoc line="470">
                Dispatches the given event to the default input manager for the root of
                  this canvas.                
                <@param>
                    m awtEvent awt event needing dispatching                    
                </@param>
                <@param>
                    m type type of the event                    
                </@param>
            </javadoc>
            <method name="sendInputEventToInputManager" type="void" line="477">
                <params>
                    <param name="awtEvent" type="InputEvent"/>
                    <param name="type" type="int"/>
                </params>
            </method>
            <javadoc line="481">
                Changes the bounds of this PSWTCanvas. Updating the camera and the double
                  buffered image appropriately.                
                <@param>
                    m x left of the new bounds                    
                </@param>
                <@param>
                    m y top of the new bounds                    
                </@param>
                <@param>
                    m newWidth new width of the bounds                    
                </@param>
                <@param>
                    m newHeight new height of the bounds                    
                </@param>
            </javadoc>
            <method name="setBounds" type="void" line="490">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="newWidth" type="int"/>
                    <param name="newHeight" type="int"/>
                </params>
                <scope line="493"/>
            </method>
            <method name="resizeBackBuffer" type="void" line="500">
                <params>
                    <param name="newWidth" type="int"/>
                    <param name="newHeight" type="int"/>
                </params>
                <scope line="501"/>
            </method>
            <method name="backBufferNeedsResizing" type="boolean" line="507">
                <params>
                    <param name="newWidth" type="int"/>
                    <param name="newHeight" type="int"/>
                </params>
                <scope line="508"/>
                <scope line="512"/>
            </method>
            <javadoc line="519">
                Exists to dispatch from the Swing&apos;s repaint method to SWT&apos;s redraw
                  method.                
            </javadoc>
            <method name="repaint" type="void" line="523"/>
            <javadoc line="527">
                Flags the bounds provided as needing to be redrawn.                
                <@param>
                    m bounds the bounds that should be repainted                    
                </@param>
            </javadoc>
            <method name="repaint" type="void" line="532">
                <params>
                    <param name="bounds" type="PBounds"/>
                </params>
            </method>
            <javadoc line="539">
                Paints the region specified of the canvas onto the given Graphics
                  Context.                
                <@param>
                    m gc graphics onto within painting should occur                    
                </@param>
                <@param>
                    m x left of the dirty region                    
                </@param>
                <@param>
                    m y top of the dirty region                    
                </@param>
                <@param>
                    m w width of the dirty region                    
                </@param>
                <@param>
                    m h height of the dirty region                    
                </@param>
            </javadoc>
            <method name="paintComponent" type="void" line="549">
                <params>
                    <param name="gc" type="GC"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="550">
                    This fixes a problem with standard debugging of region management in                    
                </comment>
                <comment line="550">
                    SWT                    
                </comment>
                <comment line="550">
                    create new paint context and set render quality                    
                </comment>
                <comment line="550">
                    paint Piccolo2D                    
                </comment>
                <comment line="550">
                    if switched state from animating to not animating invalidate                    
                </comment>
                <comment line="550">
                    the entire screen so that it will be drawn with the default instead                    
                </comment>
                <comment line="550">
                    of animating render quality.                    
                </comment>
                <declaration name="imageGC" type="GC" line="552"/>
                <declaration name="g2" type="Graphics2D" line="553"/>
                <scope line="554"/>
                <scope line="558"/>
                <declaration name="rect" type="Rectangle" line="565"/>
                <scope line="570">
                    <declaration name="r" type="Rectangle" line="571"/>
                    <declaration name="r2" type="Rectangle2D" line="572"/>
                </scope>
                <declaration name="paintContext" type="PPaintContext" line="578"/>
                <scope line="579">
                    <scope line="580"/>
                    <scope line="583"/>
                </scope>
                <scope line="587"/>
                <scope line="597"/>
                <declaration name="region" type="boolean" line="602"/>
                <scope line="607"/>
            </method>
            <javadoc line="615">
                Performs an immediate repaint if no other client is currently performing
                  one.                
            </javadoc>
            <method name="paintImmediately" type="void" line="619">
                <scope line="620"/>
            </method>
            <class name="KeyboardInputSource" line="630">
                <implements interface="KeyListener"/>
                <method name="keyPressed" type="void" line="631">
                    <params>
                        <param name="ke" type="KeyEvent"/>
                    </params>
                    <declaration name="inputEvent" type="java.awt.event.KeyEvent" line="632"/>
                </method>
                <method name="keyReleased" type="void" line="636">
                    <params>
                        <param name="ke" type="KeyEvent"/>
                    </params>
                    <declaration name="inputEvent" type="java.awt.event.KeyEvent" line="637"/>
                </method>
            </class>
            <class name="MouseInputSource" line="642">
                <implements interface="MouseListener"/>
                <implements interface="MouseMoveListener"/>
                <method name="mouseMove" type="void" line="643">
                    <params>
                        <param name="me" type="MouseEvent"/>
                    </params>
                    <scope line="644">
                        <declaration name="inputEvent" type="java.awt.event.MouseEvent" line="645"/>
                    </scope>
                    <scope line="649">
                        <declaration name="inputEvent" type="java.awt.event.MouseEvent" line="650"/>
                    </scope>
                </method>
                <method name="mouseDown" type="void" line="656">
                    <params>
                        <param name="mouseEvent" type="MouseEvent"/>
                    </params>
                    <declaration name="shouldBalanceEvent" type="boolean" line="657"/>
                    <scope line="661"/>
                    <scope line="667"/>
                    <scope line="673"/>
                    <scope line="681">
                        <declaration name="balanceEvent" type="java.awt.event.MouseEvent" line="682"/>
                    </scope>
                    <declaration name="balanceEvent" type="java.awt.event.MouseEvent" line="687"/>
                </method>
                <method name="mouseUp" type="void" line="692">
                    <params>
                        <param name="me" type="MouseEvent"/>
                    </params>
                    <declaration name="shouldBalanceEvent" type="boolean" line="693"/>
                    <scope line="697"/>
                    <scope line="703"/>
                    <scope line="709"/>
                    <scope line="717">
                        <declaration name="balanceEvent" type="java.awt.event.MouseEvent" line="718"/>
                    </scope>
                    <declaration name="balanceEvent" type="java.awt.event.MouseEvent" line="723"/>
                </method>
                <method name="mouseDoubleClick" type="void" line="728">
                    <params>
                        <param name="me" type="MouseEvent"/>
                    </params>
                    <comment line="729">
                        This doesn&apos;t work with click event types for some reason - it                        
                    </comment>
                    <comment line="729">
                        has to do with how the click and release events are ordered,                        
                    </comment>
                    <comment line="729">
                        I think                        
                    </comment>
                    <declaration name="inputEvent" type="java.awt.event.MouseEvent" line="732"/>
                </method>
            </class>
        </class>
    </source>