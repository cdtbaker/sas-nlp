<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.nodes">
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Paint"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.nodes.PPath"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolo.util.PPickPath"/>
        <class name="PClip" extends="PPath" line="41">
            <javadoc line="41">
                &lt;b&gt;PClip&lt;/b&gt; is a simple node that applies a clip before rendering or picking
                 * its children. PClip is a subclass of PPath, the clip applies is the
                 * GeneralPath wrapped by its super class. See piccolo2d/examples ClipExample.                
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="50"/>
            <javadoc line="52">
                Computes the full bounds and stores them in dstBounds, if dstBounds is
                 * null, create a new Bounds and returns it.                
                <@param>
                    m dstBounds output parameter where computed bounds will be stored                    
                </@param>
                <@return>
                    n the computed full bounds                    
                </@return>
            </javadoc>
            <method name="computeFullBounds" type="PBounds" line="59">
                <declaration name="result" type="PBounds" line="60"/>
                <scope line="61"/>
                <scope line="64"/>
            </method>
            <javadoc line="74">
                Callback that receives notification of repaint requests from nodes in
                 * this node&apos;s tree.                
                <@param>
                    m localBounds region in local coordinations the needs repainting                    
                </@param>
                <@param>
                    m childOrThis the node that emitted the repaint notification                    
                </@param>
            </javadoc>
            <method name="repaintFrom" type="void" line="81">
                <scope line="82"/>
                <scope line="86"/>
            </method>
            <javadoc line="91">
                Paint&apos;s this node as a solid rectangle if paint is provided, clipping
                 * appropriately.                
                <@param>
                    m paintContext context into which this node will be painted                    
                </@param>
            </javadoc>
            <method name="paint" type="void" line="97">
                <declaration name="p" type="Paint" line="98"/>
                <scope line="99">
                    <declaration name="g2" type="Graphics2D" line="100"/>
                </scope>
            </method>
            <javadoc line="107">
                Paints a border around this node if it has a stroke and stroke paint
                 * provided.                
                <@param>
                    m paintContext context into which the border will be drawn                    
                </@param>
            </javadoc>
            <method name="paintAfterChildren" type="void" line="113">
                <scope line="115">
                    <declaration name="g2" type="Graphics2D" line="116"/>
                </scope>
            </method>
            <javadoc line="123">
                Try to pick this node and all of its descendants if they are visible in
                 * the clipping region.                
                <@param>
                    m pickPath the pick path to add the node to if its picked                    
                </@param>
                <@return>
                    n true if this node or one of its descendants was picked.                    
                </@return>
            </javadoc>
            <method name="fullPick" type="boolean" line="130">
                <scope line="131">
                    <scope line="135"/>
                    <scope line="139">
                        <declaration name="count" type="int" line="140"/>
                        <scope line="141">
                            <declaration name="each" type="PNode" line="142"/>
                            <scope line="143"/>
                        </scope>
                    </scope>
                    <scope line="149"/>
                </scope>
            </method>
        </class>
    </source>