<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.nodes">
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Paint"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.Stroke"/>
        <import package="java.awt.geom.Ellipse2D"/>
        <import package="java.awt.geom.GeneralPath"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.RoundRectangle2D"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransform"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolo.util.PUtil"/>
        <class name="PPath" extends="PNode" line="51">
            <javadoc line="51">
                &lt;b&gt;PPath&lt;/b&gt; is a wrapper around a java.awt.geom.GeneralPath. The setBounds
                 * method works by scaling the path to fit into the specified bounds. This
                 * normally works well, but if the specified base bounds get too small then it
                 * is impossible to expand the path shape again since all its numbers have
                 * tended to zero, so application code may need to take this into consideration.
                 * &lt;P&gt;
                 * One option that applications have is to call &lt;code&gt;startResizeBounds&lt;/code&gt;
                 * before starting an interaction that may make the bounds very small, and
                 * calling &lt;code&gt;endResizeBounds&lt;/code&gt; when this interaction is finished. When
                 * this is done PPath will use a copy of the original path to do the resizing so
                 * the numbers in the path wont loose resolution.
                 * &lt;P&gt;
                 * This class also provides methods for constructing common shapes using a
                 * general path.
                 * &lt;P&gt;                
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="73"/>
            <javadoc line="73">
                Allows for future serialization code to understand versioned binary
                 * formats.                
            </javadoc>
            <declaration name="PROPERTY_STROKE_PAINT" type="String" line="79"/>
            <javadoc line="79">
                The property name that identifies a change of this node&apos;s stroke paint
                 * (see {@link #getStrokePaint getStrokePaint}). Both old and new value will
                 * be set correctly to Paint objects in any property change event.                
            </javadoc>
            <declaration name="PROPERTY_CODE_STROKE_PAINT" type="int" line="86"/>
            <javadoc line="86">
                The property code that identifies a change of this node&apos;s stroke paint
                 * (see {@link #getStrokePaint getStrokePaint}). Both old and new value will
                 * be set correctly to Paint objects in any property change event.                
            </javadoc>
            <declaration name="PROPERTY_STROKE" type="String" line="93"/>
            <javadoc line="93">
                The property name that identifies a change of this node&apos;s stroke (see{@link #getStroke getStroke}). Both old and new value will be set
                 * correctly to Stroke objects in any property change event.                
            </javadoc>
            <declaration name="PROPERTY_CODE_STROKE" type="int" line="100"/>
            <javadoc line="100">
                The property code that identifies a change of this node&apos;s stroke (see{@link #getStroke getStroke}). Both old and new value will be set
                 * correctly to Stroke objects in any property change event.                
            </javadoc>
            <declaration name="PROPERTY_PATH" type="String" line="107"/>
            <javadoc line="107">
                The property name that identifies a change of this node&apos;s path (see{@link #getPathReference getPathReference}). In any property change event
                 * the new value will be a reference to this node&apos;s path, but old value will
                 * always be null.                
            </javadoc>
            <declaration name="PROPERTY_CODE_PATH" type="int" line="115"/>
            <javadoc line="115">
                The property code that identifies a change of this node&apos;s path (see{@link #getPathReference getPathReference}). In any property change event
                 * the new value will be a reference to this node&apos;s path, but old value will
                 * always be null.                
            </javadoc>
            <declaration name="TEMP_RECTANGLE" type="Rectangle2D.Float" line="123"/>
            <declaration name="TEMP_ROUNDRECTANGLE" type="RoundRectangle2D.Float" line="124"/>
            <declaration name="TEMP_ELLIPSE" type="Ellipse2D.Float" line="125"/>
            <declaration name="TEMP_TRANSFORM" type="PAffineTransform" line="126"/>
            <declaration name="DEFAULT_STROKE" type="BasicStroke" line="127"/>
            <declaration name="DEFAULT_STROKE_PAINT" type="Color" line="128"/>
            <declaration name="path" type="GeneralPath" line="130"/>
            <declaration name="resizePath" type="GeneralPath" line="131"/>
            <declaration name="stroke" type="Stroke" line="132"/>
            <declaration name="updatingBoundsFromPath" type="boolean" line="133"/>
            <declaration name="strokePaint" type="Paint" line="134"/>
            <javadoc line="136">
                Creates a PPath object in the shape of a rectangle.                
                <@param>
                    m x left of the rectangle                    
                </@param>
                <@param>
                    m y top of the rectangle                    
                </@param>
                <@param>
                    m width width of the rectangle                    
                </@param>
                <@param>
                    m height height of the rectangle                    
                </@param>
                <@return>
                    n created rectangle                    
                </@return>
            </javadoc>
            <method name="createRectangle" type="PPath" line="146">
                <declaration name="result" type="PPath" line="148"/>
            </method>
            <javadoc line="153">
                Creates a PPath object in the shape of a rounded rectangle.                
                <@param>
                    m x left of the rectangle                    
                </@param>
                <@param>
                    m y top of the rectangle                    
                </@param>
                <@param>
                    m width width of the rectangle                    
                </@param>
                <@param>
                    m height height of the rectangle                    
                </@param>
                <@param>
                    m arcWidth the arc width at the corners of the rectangle                    
                </@param>
                <@param>
                    m arcHeight the arc height at the corners of the rectangle                    
                </@param>
                <@return>
                    n created rounded rectangle                    
                </@return>
            </javadoc>
            <method name="createRoundRectangle" type="PPath" line="166">
                <declaration name="result" type="PPath" line="168"/>
            </method>
            <javadoc line="173">
                Creates a PPath object in the shape of an ellipse.                
                <@param>
                    m x left of the ellipse                    
                </@param>
                <@param>
                    m y top of the ellipse                    
                </@param>
                <@param>
                    m width width of the ellipse                    
                </@param>
                <@param>
                    m height height of the ellipse                    
                </@param>
                <@return>
                    n created ellipse                    
                </@return>
            </javadoc>
            <method name="createEllipse" type="PPath" line="183">
                <declaration name="result" type="PPath" line="185"/>
            </method>
            <javadoc line="190">
                Creates a PPath in the shape of a line.                
                <@param>
                    m x1 x component of the first point                    
                </@param>
                <@param>
                    m y1 y component of the first point                    
                </@param>
                <@param>
                    m x2 x component of the second point                    
                </@param>
                <@param>
                    m y2 y component of the second point                    
                </@param>
                <@return>
                    n created line                    
                </@return>
            </javadoc>
            <method name="createLine" type="PPath" line="200">
                <declaration name="result" type="PPath" line="201"/>
            </method>
            <javadoc line="208">
                Creates a PPath for the poly-line for the given points.                
                <@param>
                    m points array of points for the point lines                    
                </@param>
                <@return>
                    n created poly-line for the given points                    
                </@return>
            </javadoc>
            <method name="createPolyline" type="PPath" line="215">
                <declaration name="result" type="PPath" line="216"/>
            </method>
            <javadoc line="222">
                Creates a PPath for the poly-line for the given points.                
                <@param>
                    m xp array of x components of the points of the poly-lines                    
                </@param>
                <@param>
                    m yp array of y components of the points of the poly-lines                    
                </@param>
                <@return>
                    n created poly-line for the given points                    
                </@return>
            </javadoc>
            <method name="createPolyline" type="PPath" line="230">
                <declaration name="result" type="PPath" line="231"/>
            </method>
            <javadoc line="237">
                Creates an empty PPath with the default paint and stroke.                
            </javadoc>
            <method name="PPath" type="constructor" line="240"/>
            <javadoc line="246">
                Creates an PPath in the given shape with the default paint and stroke.                
                <@param>
                    m aShape the desired shape                    
                </@param>
            </javadoc>
            <method name="PPath" type="constructor" line="251"/>
            <javadoc line="255">
                Construct this path with the given shape and stroke. This method may be
                 * used to optimize the creation of a large number of PPaths. Normally
                 * PPaths have a default stroke of width one, but when a path has a non null
                 * stroke it takes significantly longer to compute its bounds. This method
                 * allows you to override that default stroke before the bounds are ever
                 * calculated, so if you pass in a null stroke here you won&apos;t ever have to
                 * pay that bounds calculation price if you don&apos;t need to.                
                <@param>
                    m aShape desired shape or null if you desire an empty path                    
                </@param>
                <@param>
                    m aStroke desired stroke                    
                </@param>
            </javadoc>
            <method name="PPath" type="constructor" line="267">
                <scope line="270"/>
            </method>
            <javadoc line="275">
                Returns the stroke paint of the PPath.                
                <@return>
                    n stroke paint of the PPath                    
                </@return>
            </javadoc>
            <method name="getStrokePaint" type="Paint" line="280"/>
            <javadoc line="284">
                Sets the stroke paint of the path.                
                <@param>
                    m newStrokePaint the paint to use as this path's stroke paint                    
                </@param>
            </javadoc>
            <method name="setStrokePaint" type="void" line="289">
                <declaration name="oldStrokePaint" type="Paint" line="290"/>
            </method>
            <javadoc line="296">
                Returns the stroke to use when drawing the path.                
                <@return>
                    n current stroke of path                    
                </@return>
            </javadoc>
            <method name="getStroke" type="Stroke" line="301"/>
            <javadoc line="305">
                Sets the stroke to use when drawing the path.                
                <@param>
                    m aStroke stroke to use when drawing the path                    
                </@param>
            </javadoc>
            <method name="setStroke" type="void" line="310">
                <declaration name="old" type="Stroke" line="311"/>
            </method>
            <javadoc line="318">
                Stores the original size of the path before resizing started.                
            </javadoc>
            <method name="startResizeBounds" type="void" line="319"/>
            <javadoc line="323">
                Clears the size of the path before resizing.                
            </javadoc>
            <method name="endResizeBounds" type="void" line="324"/>
            <javadoc line="328">
                Set the bounds of this path. This method works by scaling the path to fit
                 * into the specified bounds. This normally works well, but if the specified
                 * base bounds get too small then it is impossible to expand the path shape
                 * again since all its numbers have tended to zero, so application code may
                 * need to take this into consideration.                
                <@param>
                    m x new left position of bounds                    
                </@param>
                <@param>
                    m y new top position of bounds                    
                </@param>
                <@param>
                    m width the new width of the bounds                    
                </@param>
                <@param>
                    m height the new height of the bounds                    
                </@param>
            </javadoc>
            <method name="internalUpdateBounds" type="void" line="340">
                <scope line="341"/>
                <scope line="345"/>
                <declaration name="pathBounds" type="Rectangle2D" line="350"/>
                <declaration name="pathStrokeBounds" type="Rectangle2D" line="351"/>
                <declaration name="strokeOutset" type="double" line="352"/>
                <declaration name="adjustedX" type="double" line="356"/>
                <declaration name="adjustedY" type="double" line="357"/>
                <declaration name="adjustedWidth" type="double" line="358"/>
                <declaration name="adjustedHeight" type="double" line="359"/>
                <declaration name="scaleX" type="double" line="361"/>
                <scope line="362"/>
                <scope line="365"/>
                <declaration name="scaleY" type="double" line="369"/>
                <scope line="370"/>
                <scope line="373"/>
            </method>
            <javadoc line="385">
                Returns true if path crosses the provided bounds. Takes visibility of
                 * path into account.                
                <@param>
                    m aBounds bounds being tested for intersection                    
                </@param>
                <@return>
                    n true if path visibly crosses bounds                    
                </@return>
            </javadoc>
            <method name="intersects" type="boolean" line="392">
                <scope line="393">
                    <scope line="394"/>
                    <scope line="397"/>
                </scope>
            </method>
            <javadoc line="404">
                Calculates the path&apos;s bounds taking stroke into account.                
                <@return>
                    n bounds of the path taking stroke width into account                    
                </@return>
            </javadoc>
            <method name="getPathBoundsWithStroke" type="Rectangle2D" line="409">
                <scope line="410"/>
                <scope line="413"/>
            </method>
            <javadoc line="418">
                Recomputes the bounds taking stroke into account.                
            </javadoc>
            <method name="updateBoundsFromPath" type="void" line="421">
                <scope line="423"/>
                <scope line="426">
                    <declaration name="b" type="Rectangle2D" line="427"/>
                </scope>
            </method>
            <javadoc line="433">
                Paints the path in the provided paintContext. Can perform very
                 * differently depending on whether the path is being drawn using its stroke
                 * or its paint.
                 * It both are provided to the path, fun ensues.                
                <@param>
                    m paintContext context in which painting is occurring                    
                </@param>
            </javadoc>
            <method name="paint" type="void" line="442">
                <declaration name="p" type="Paint" line="443"/>
                <declaration name="g2" type="Graphics2D" line="444"/>
                <scope line="446"/>
                <scope line="451"/>
            </method>
            <javadoc line="458">
                Provides direct access to the underlying GeneralPath object.                
                <@return>
                    n underlying GeneralPath                    
                </@return>
            </javadoc>
            <method name="getPathReference" type="GeneralPath" line="463"/>
            <javadoc line="467">
                Appends a &quot;move&quot; operation to the end of the path.                
                <@param>
                    m x the x component of the point to move to                    
                </@param>
                <@param>
                    m y the y component of the point to move to                    
                </@param>
            </javadoc>
            <method name="moveTo" type="void" line="473"/>
            <javadoc line="480">
                Draws a line from the last point in the path to point provided.                
                <@param>
                    m x the x component of the point                    
                </@param>
                <@param>
                    m y the y component of the point                    
                </@param>
            </javadoc>
            <method name="lineTo" type="void" line="486"/>
            <javadoc line="493">
                Adds a curved segment, defined by two new points, to the path by drawing
                 * a Quadratic curve that intersects both the current coordinates and the
                 * coordinates (x2, y2), using the specified point (x1, y1) as a quadratic
                 * parametric control point.                
                <@param>
                    m x1 x component of quadratic parametric control point                    
                </@param>
                <@param>
                    m y1 y component of quadratic parametric control point                    
                </@param>
                <@param>
                    m x2 x component of point through which quad curve will pass                    
                </@param>
                <@param>
                    m y2 y component of point through which quad curve will pass                    
                </@param>
            </javadoc>
            <method name="quadTo" type="void" line="504"/>
            <javadoc line="511">
                Adds a curved segment, defined by three new points, to the path by
                 * drawing a B&amp;#233;zier curve that intersects both the current coordinates and
                 * the coordinates (x3, y3), using the specified points (x1, y1) and (x2,
                 * y2) as B&amp;#233;zier control points.                
                <@param>
                    m x1 x component of first B&#233;zier control point                    
                </@param>
                <@param>
                    m y1 y component of first B&#233;zier control point                    
                </@param>
                <@param>
                    m x2 x component of second B&#233;zier control point                    
                </@param>
                <@param>
                    m y2 y component of second B&#233;zier control point                    
                </@param>
                <@param>
                    m x3 x component of point through which curve must pass                    
                </@param>
                <@param>
                    m y3 y component of point through which curve must pass                    
                </@param>
            </javadoc>
            <method name="curveTo" type="void" line="525"/>
            <javadoc line="532">
                Appends the provided shape to the end of this path, it may conditionally
                 * connect them together if they are disjoint.                
                <@param>
                    m aShape shape to append                    
                </@param>
                <@param>
                    m connect whether to perform a lineTo operation to the beginning of
                     * the shape before appending                    
                </@param>
            </javadoc>
            <method name="append" type="void" line="540"/>
            <javadoc line="547">
                Replaces this PPath&apos;s path with the one provided.                
                <@param>
                    m aShape shape to replace the current one with                    
                </@param>
            </javadoc>
            <method name="setPathTo" type="void" line="552"/>
            <javadoc line="557">
                Resets the path to a rectangle with the dimensions and position provided.                
                <@param>
                    m x left of the rectangle                    
                </@param>
                <@param>
                    m y top of te rectangle                    
                </@param>
                <@param>
                    m width width of the rectangle                    
                </@param>
                <@param>
                    m height height of the rectangle                    
                </@param>
            </javadoc>
            <method name="setPathToRectangle" type="void" line="565"/>
            <javadoc line="570">
                Resets the path to an ellipse positioned at the coordinate provided with
                 * the dimensions provided.                
                <@param>
                    m x left of the ellipse                    
                </@param>
                <@param>
                    m y top of the ellipse                    
                </@param>
                <@param>
                    m width width of the ellipse                    
                </@param>
                <@param>
                    m height height of the ellipse                    
                </@param>
            </javadoc>
            <method name="setPathToEllipse" type="void" line="579"/>
            <javadoc line="584">
                Sets the path to a sequence of segments described by the points.                
                <@param>
                    m points points to that lie along the generated path                    
                </@param>
            </javadoc>
            <method name="setPathToPolyline" type="void" line="589">
                <scope line="592"/>
            </method>
            <javadoc line="600">
                Sets the path to a sequence of segments described by the point components
                 * provided.                
                <@param>
                    m xp the x components of the points along the path                    
                </@param>
                <@param>
                    m yp the y components of the points along the path                    
                </@param>
            </javadoc>
            <method name="setPathToPolyline" type="void" line="607">
                <scope line="610"/>
            </method>
            <javadoc line="618">
                Marks the path as closed. Making changes to it impossible.                
            </javadoc>
            <method name="closePath" type="void" line="621"/>
            <javadoc line="628">
                Empties the path.                
            </javadoc>
            <method name="reset" type="void" line="631"/>
            <javadoc line="638">
                Writes this PPath object to the output stream provided. Necessary since
                 * stroke and path are not serializable by default.                
                <@param>
                    m out output stream into which objects are to be serialized                    
                </@param>
                <@throws>
                    s IOException if serialiazing to output stream fails                    
                </@throws>
            </javadoc>
            <method name="writeObject" type="void" line="645"/>
            <javadoc line="651">
                Deserializes a PPath object from the provided input stream. This method
                 * is required since Strokes and GeneralPaths are not serializable by
                 * default.                
                <@param>
                    m in stream from which to read this PPath's state                    
                </@param>
                <@throws>
                    s IOException when exception occurs reading from input stream                    
                </@throws>
                <@throws>
                    s ClassNotFoundException                    
                </@throws>
            </javadoc>
            <method name="readObject" type="void" line="660"/>
        </class>
    </source>