<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.event">
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.activities.PActivity"/>
        <import package="edu.umd.cs.piccolo.activities.PTransformActivity"/>
        <import package="edu.umd.cs.piccolo.event.PBasicInputEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.event.PInputEventFilter"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PDimension"/>
        <class name="PNavigationEventHandler" extends="PBasicInputEventHandler" line="52">
            <comment line="53">
                ****************************************************************                
            </comment>
            <comment line="53">
                Focus Change Events.                
            </comment>
            <comment line="53">
                ****************************************************************                
            </comment>
            <comment line="53">
                ****************************************************************                
            </comment>
            <comment line="53">
                Focus Movement - Moves the focus the specified direction. Left,                
            </comment>
            <comment line="53">
                right, up, down mean move the focus to the closest sibling of the                
            </comment>
            <comment line="53">
                current focus node that exists in that direction. Move in means                
            </comment>
            <comment line="53">
                move the focus to a child of the current focus, move out means                
            </comment>
            <comment line="53">
                move the focus to the parent of the current focus.                
            </comment>
            <comment line="53">
                ****************************************************************                
            </comment>
            <comment line="53">
                ****************************************************************                
            </comment>
            <comment line="53">
                Canvas Movement - The canvas view is updated so that the current                
            </comment>
            <comment line="53">
                focus remains visible on the screen at 100 percent scale.                
            </comment>
            <comment line="53">
                ****************************************************************                
            </comment>
            <javadoc line="52">
                &lt;b&gt;PNavigationEventHandler&lt;/b&gt; implements simple focus based navigation. Uses
                 * mouse button one or the arrow keys to set a new focus. Animates the canvas
                 * view to keep the focus node on the screen and at 100 percent scale with
                 * minimal view movement.                
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="SCALING_THRESHOLD" type="double" line="62"/>
            <javadoc line="62">
                Minum size under which two scales are considered the same.                
            </javadoc>
            <declaration name="NAVIGATION_DURATION" type="int" line="64"/>
            <javadoc line="64">
                Amount of time it takes to animation view from one location to another.                
            </javadoc>
            <declaration name="NORTH" type="int" line="66"/>
            <javadoc line="66">
                The UP direction on the screen.                
            </javadoc>
            <declaration name="SOUTH" type="int" line="68"/>
            <javadoc line="68">
                The DOWN direction on the screen.                
            </javadoc>
            <declaration name="EAST" type="int" line="70"/>
            <javadoc line="70">
                The RIGHT direction on the screen.                
            </javadoc>
            <declaration name="WEST" type="int" line="72"/>
            <javadoc line="72">
                The LEFT direction on the screen.                
            </javadoc>
            <declaration name="IN" type="int" line="74"/>
            <javadoc line="74">
                The IN direction on the scene.                
            </javadoc>
            <declaration name="OUT" type="int" line="76"/>
            <javadoc line="76">
                The OUT direction on the scene.                
            </javadoc>
            <declaration name="NODE_TO_GLOBAL_NODE_CENTER_MAPPING" type="Hashtable" line="79"/>
            <declaration name="focusNode" type="PNode" line="81"/>
            <declaration name="navigationActivity" type="PTransformActivity" line="82"/>
            <javadoc line="84">
                Constructs a Navigation Event Handler that will only accepts left mouse
                 * clicks.                
            </javadoc>
            <method name="PNavigationEventHandler" type="constructor" line="88"/>
            <javadoc line="97">
                Processes key pressed events.                
                <@param>
                    m event event representing the key press                    
                </@param>
            </javadoc>
            <method name="keyPressed" type="void" line="102">
                <declaration name="oldLocation" type="PNode" line="103"/>
                <scope line="116"/>
                <scope line="119"/>
                <scope line="126"/>
                <scope line="129"/>
                <scope line="137"/>
            </method>
            <javadoc line="142">
                Animates the camera to the node that has been pressed.                
                <@param>
                    m event event representing the mouse press                    
                </@param>
            </javadoc>
            <method name="mousePressed" type="void" line="147">
                <scope line="150"/>
            </method>
            <javadoc line="164">
                Moves the focus in the downward direction. Animating the camera
                 * accordingly.                
                <@param>
                    m event ignored                    
                </@param>
            </javadoc>
            <method name="moveFocusDown" type="void" line="170"/>
            <javadoc line="174">
                Moves the focus &quot;into&quot; the scene. So smaller nodes appear larger on
                 * screen. Animates the camera accordingly.                
                <@param>
                    m event ignored                    
                </@param>
            </javadoc>
            <method name="moveFocusIn" type="void" line="180"/>
            <javadoc line="184">
                Moves the focus in the left direction. Animating the camera accordingly.                
                <@param>
                    m event ignored                    
                </@param>
            </javadoc>
            <method name="moveFocusLeft" type="void" line="189"/>
            <javadoc line="193">
                Moves the focus &quot;out&quot; of scene. So larger nodes appear smaller on screen.
                 * Animates the camera accordingly.                
                <@param>
                    m event ignored                    
                </@param>
            </javadoc>
            <method name="moveFocusOut" type="void" line="199"/>
            <javadoc line="203">
                Moves the focus in the right direction. Animating the camera accordingly.                
                <@param>
                    m event ignored                    
                </@param>
            </javadoc>
            <method name="moveFocusRight" type="void" line="208"/>
            <javadoc line="212">
                Moves the focus in the up direction. Animating the camera accordingly.                
                <@param>
                    m event ignored                    
                </@param>
            </javadoc>
            <method name="moveFocusUp" type="void" line="217"/>
            <javadoc line="221">
                Moves the focus to the nearest node in the direction specified. Animating
                 * the camera appropriately.                
                <@param>
                    m direction one of NORTH, SOUTH, EAST, WEST, IN, OUT                    
                </@param>
            </javadoc>
            <method name="moveFocusInDirection" type="void" line="227">
                <declaration name="n" type="PNode" line="228"/>
                <scope line="230"/>
            </method>
            <javadoc line="235">
                Moves the focus to the mouse under the mouse. Animating the camera
                 * appropriately.                
                <@param>
                    m event mouse event                    
                </@param>
            </javadoc>
            <method name="moveFocusToMouseOver" type="void" line="241">
                <declaration name="focus" type="PNode" line="242"/>
                <scope line="243"/>
            </method>
            <javadoc line="248">
                Returns the nearest node in the given direction.                
                <@param>
                    m direction direction in which to look the nearest node                    
                </@param>
                <@return>
                    n nearest node in the given direction                    
                </@return>
            </javadoc>
            <method name="getNeighborInDirection" type="PNode" line="255">
                <scope line="256"/>
                <declaration name="highlightCenter" type="Point2D" line="262"/>
                <declaration name="l" type="List" line="265"/>
                <declaration name="i" type="Iterator" line="268"/>
                <scope line="269">
                    <declaration name="each" type="PNode" line="270"/>
                    <scope line="271"/>
                </scope>
            </method>
            <javadoc line="279">
                Returns all pickable nodes that are 1 hop away from the currently focused
                 * node. This includes, parent, children, and siblings.                
                <@return>
                    n list of nodes that are 1 hop away from the current focusNode                    
                </@return>
            </javadoc>
            <method name="getNeighbors" type="List" line="285">
                <declaration name="result" type="ArrayList" line="286"/>
                <scope line="287"/>
                <declaration name="focusParent" type="PNode" line="291"/>
                <declaration name="i" type="Iterator" line="293"/>
                <scope line="295">
                    <declaration name="each" type="PNode" line="296"/>
                    <scope line="297"/>
                </scope>
            </method>
            <javadoc line="307">
                Returns true if the given node is a neighbor in the given direction
                 * relative to the current focus.                
                <@param>
                    m node the node being tested                    
                </@param>
                <@param>
                    m direction the direction in which we're testing                    
                </@param>
                <@return>
                    n true if node is a neighbor in the direction provided                    
                </@return>
            </javadoc>
            <method name="nodeIsNeighborInDirection" type="boolean" line="316">
                <scope line="325"/>
                <declaration name="highlightCenter" type="Point2D" line="330"/>
                <declaration name="nodeCenter" type="Point2D" line="331"/>
                <declaration name="ytest1" type="double" line="333"/>
                <declaration name="ytest2" type="double" line="334"/>
            </method>
            <javadoc line="358">
                Modifies the array so that it&apos;s sorted in ascending order based on the
                 * distance from the given point.                
                <@param>
                    m nodes list of nodes to be sorted                    
                </@param>
                <@param>
                    m point point from which distance is being computed                    
                </@param>
            </javadoc>
            <method name="sortNodesByDistanceFromPoint" type="void" line="365">
                <anonymous_class line="366">
                    <method name="compare" type="int" line="367"/>
                    <method name="compare" type="int" line="371">
                        <declaration name="center1" type="Point2D" line="372"/>
                        <declaration name="center2" type="Point2D" line="373"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="388">
                Animates the camera&apos;s view transform into the provided one over the
                 * duration provided.                
                <@param>
                    m camera camera being animated                    
                </@param>
                <@param>
                    m targetTransform the transform to which the camera's transform will
                     * be animated                    
                </@param>
                <@param>
                    m duration the number of milliseconds the animation should last                    
                </@param>
                <@return>
                    n an activity object that represents the animation                    
                </@return>
            </javadoc>
            <method name="animateCameraViewTransformTo" type="PActivity" line="400">
                <comment line="401">
                    first stop any old animations.                    
                </comment>
                <declaration name="wasOldAnimation" type="boolean" line="401"/>
                <scope line="404"/>
                <scope line="409"/>
                <declaration name="source" type="AffineTransform" line="414"/>
                <scope line="416"/>
            </method>
            <javadoc line="425">
                Animates the Camera&apos;s view so that it contains the new focus node.                
                <@param>
                    m camera The camera to be animated                    
                </@param>
                <@param>
                    m newFocus the node that will gain focus                    
                </@param>
                <@param>
                    m duration number of milliseconds that animation should last for                    
                </@param>
                <@return>
                    n an activity object representing the scheduled animation                    
                </@return>
            </javadoc>
            <method name="directCameraViewToFocus" type="PActivity" line="434">
                <comment line="435">
                    Pan the canvas to include the view bounds with minimal canvas                    
                </comment>
                <comment line="435">
                    movement.                    
                </comment>
                <comment line="435">
                    Get rid of any white space. The canvas may be panned and                    
                </comment>
                <comment line="435">
                    zoomed in to do this. But make sure not stay constrained by max                    
                </comment>
                <comment line="435">
                    magnification.                    
                </comment>
                <comment line="435">
                    fillViewWhiteSpace(aCamera);                    
                </comment>
                <comment line="435">
                    Animate the canvas so that it ends up with the given                    
                </comment>
                <comment line="435">
                    view transform.                    
                </comment>
                <declaration name="originalViewTransform" type="AffineTransform" line="436"/>
                <declaration name="d" type="PDimension" line="438"/>
                <declaration name="scaleFactor" type="double" line="441"/>
                <declaration name="scalePoint" type="Point2D" line="442"/>
                <scope line="443"/>
                <declaration name="resultingTransform" type="AffineTransform" line="456"/>
            </method>
            <javadoc line="464">
                Instantaneously transforms the provided camera so that it does not
                 * contain any extra white space.                
                <@param>
                    m camera the camera to be transformed                    
                </@param>
            </javadoc>
            <method name="fillViewWhiteSpace" type="void" line="470">
                <comment line="471">
                    center content.                    
                </comment>
                <declaration name="rootBounds" type="PBounds" line="471"/>
                <scope line="473"/>
                <declaration name="dx" type="double" line="481"/>
                <declaration name="dy" type="double" line="482"/>
                <declaration name="viewBounds" type="PBounds" line="484"/>
                <scope line="486"/>
                <scope line="491"/>
            </method>
        </class>
    </source>