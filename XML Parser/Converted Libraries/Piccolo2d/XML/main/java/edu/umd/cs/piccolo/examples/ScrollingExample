<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.examples">
        <import package="java.awt.BorderLayout"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.ActionListener"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.util.Iterator"/>
        <import package="javax.swing.ButtonGroup"/>
        <import package="javax.swing.JPanel"/>
        <import package="javax.swing.JToggleButton"/>
        <import package="javax.swing.JToolBar"/>
        <import package="edu.umd.cs.piccolo.PCanvas"/>
        <import package="edu.umd.cs.piccolo.PLayer"/>
        <import package="edu.umd.cs.piccolo.nodes.PPath"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransform"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolox.PFrame"/>
        <import package="edu.umd.cs.piccolox.swing.PDefaultScrollDirector"/>
        <import package="edu.umd.cs.piccolox.swing.PScrollDirector"/>
        <import package="edu.umd.cs.piccolox.swing.PScrollPane"/>
        <import package="edu.umd.cs.piccolox.swing.PViewport"/>
        <class name="ScrollingExample" extends="PFrame" line="56">
            <javadoc line="56">
                This creates a simple scene and allows switching between traditional
                 * scrolling where the scrollbars control the view and alternate scrolling where
                 * the scrollbars control the document. In laymans terms - in traditional window
                 * scrolling the stuff in the window moves in the opposite direction of the
                 * scroll bars and in document scrolling the stuff moves in the same direction
                 * as the scrollbars.
                 * Toggle buttons are provided to toggle between these two types of scrolling.                
                <@author>
                    r Lance Good                    
                </@author>
                <@author>
                    r Ben Bederson                    
                </@author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="71"/>
            <javadoc line="71">
                                
            </javadoc>
            <method name="ScrollingExample" type="constructor" line="76"/>
            <method name="ScrollingExample" type="constructor" line="80"/>
            <method name="initialize" type="void" line="84">
                <comment line="85">
                    Now, create the toolbar                    
                </comment>
                <declaration name="canvas" type="PCanvas" line="85"/>
                <declaration name="scrollPane" type="PScrollPane" line="86"/>
                <declaration name="viewport" type="PViewport" line="87"/>
                <declaration name="windowSD" type="PScrollDirector" line="88"/>
                <declaration name="documentSD" type="PScrollDirector" line="89"/>
                <declaration name="toolBar" type="JToolBar" line="94"/>
                <declaration name="window" type="JToggleButton" line="95"/>
                <declaration name="document" type="JToggleButton" line="96"/>
                <declaration name="bg" type="ButtonGroup" line="97"/>
                <anonymous_class line="104">
                    <method name="actionPerformed" type="void" line="105"/>
                </anonymous_class>
                <anonymous_class line="112">
                    <method name="actionPerformed" type="void" line="113"/>
                </anonymous_class>
                <declaration name="contentPane" type="JPanel" line="121"/>
            </method>
            <class name="DocumentScrollDirector" extends="PDefaultScrollDirector" line="129">
                <javadoc line="129">
                    A modified scroll director that performs document based scroling rather
                     * than window based scrolling (ie. the scrollbars act in the inverse
                     * direction as normal)                    
                </javadoc>
                <javadoc line="136">
                    Get the View position given the specified camera bounds - modified
                     * such that:
                     * Rather than finding the distance from the upper left corner of the
                     * window to the upper left corner of the document - we instead find the
                     * distance from the lower right corner of the window to the upper left
                     * corner of the document THEN we subtract that value from total
                     * document width so that the position is inverted                    
                    <@param>
                        m viewBounds The bounds for which the view position will be
                         * computed                        
                    </@param>
                    <@return>
                        n The view position                        
                    </@return>
                </javadoc>
                <method name="getViewPosition" type="Point" line="150">
                    <comment line="151">
                        First we compute the union of all the layers                        
                    </comment>
                    <comment line="151">
                        Then we put the bounds into camera coordinates and                        
                    </comment>
                    <comment line="151">
                        union the camera bounds                        
                    </comment>
                    <comment line="151">
                        Rather than finding the distance from the upper left corner                        
                    </comment>
                    <comment line="151">
                        of the window to the upper left corner of the document -                        
                    </comment>
                    <comment line="151">
                        we instead find the distance from the lower right corner                        
                    </comment>
                    <comment line="151">
                        of the window to the upper left corner of the document                        
                    </comment>
                    <comment line="151">
                        THEN we measure the offset from the lower right corner                        
                    </comment>
                    <comment line="151">
                        of the document                        
                    </comment>
                    <declaration name="pos" type="Point" line="151"/>
                    <declaration name="layerBounds" type="PBounds" line="156"/>
                    <declaration name="layers" type="java.util.List" line="157"/>
                    <scope line="158">
                        <declaration name="layer" type="PLayer" line="159"/>
                    </scope>
                </method>
                <javadoc line="183">
                    We do the same thing we did in getViewPosition above to flip the
                     * document-window position relationship                    
                    <@param>
                        m x The new x position                        
                    </@param>
                    <@param>
                        m y The new y position                        
                    </@param>
                </javadoc>
                <method name="setViewPosition" type="void" line="190">
                    <comment line="191">
                        If a scroll is in progress - we ignore new scrolls - if we                        
                    </comment>
                    <comment line="191">
                        didn&apos;t, since the scrollbars depend on the camera                        
                    </comment>
                    <comment line="191">
                        location we can end up with an infinite loop                        
                    </comment>
                    <comment line="191">
                        Get the union of all the layers&apos; bounds                        
                    </comment>
                    <comment line="191">
                        Union the camera view bounds                        
                    </comment>
                    <comment line="191">
                        Now find the new view position in view coordinates -                        
                    </comment>
                    <comment line="191">
                        This is basically the distance from the lower right                        
                    </comment>
                    <comment line="191">
                        corner of the window to the upper left corner of the                        
                    </comment>
                    <comment line="191">
                        document. We then measure the offset from the lower right corner                        
                    </comment>
                    <comment line="191">
                        of the document                        
                    </comment>
                    <comment line="191">
                        Now transform the new view position into global coords                        
                    </comment>
                    <comment line="191">
                        Compute the new matrix values to put the camera at the                        
                    </comment>
                    <comment line="191">
                        correct location                        
                    </comment>
                    <comment line="191">
                        Now actually set the camera&apos;s transform                        
                    </comment>
                    <declaration name="layerBounds" type="PBounds" line="203"/>
                    <declaration name="layers" type="java.util.List" line="204"/>
                    <scope line="205">
                        <declaration name="layer" type="PLayer" line="206"/>
                    </scope>
                    <declaration name="at" type="PAffineTransform" line="210"/>
                    <declaration name="viewBounds" type="PBounds" line="214"/>
                    <declaration name="newPoint" type="Point2D" line="222"/>
                    <declaration name="newX" type="double" line="231"/>
                    <declaration name="newY" type="double" line="232"/>
                </method>
            </class>
            <method name="addBackgroundShapes" type="void" line="242">
                <scope line="243">
                    <declaration name="x" type="int" line="244"/>
                    <declaration name="y" type="int" line="245"/>
                    <scope line="247">
                        <declaration name="path" type="PPath" line="248"/>
                    </scope>
                    <scope line="253">
                        <declaration name="path" type="PPath" line="254"/>
                    </scope>
                </scope>
            </method>
            <method name="main" type="void" line="263"/>
        </class>
    </source>