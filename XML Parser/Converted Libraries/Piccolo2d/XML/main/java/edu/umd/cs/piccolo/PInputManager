<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo">
        <import package="java.awt.event.FocusEvent"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.event.MouseWheelEvent"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="edu.umd.cs.piccolo.event.PBasicInputEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.event.PInputEventListener"/>
        <import package="edu.umd.cs.piccolo.util.PPickPath"/>
        <class name="PInputManager" extends="PBasicInputEventHandler" line="43">
            <comment line="44">
                ****************************************************************                
            </comment>
            <comment line="44">
                Event Handling - Methods for handling events                
            </comment>
            <comment line="44">
                                
            </comment>
            <comment line="44">
                The dispatch manager updates the focus nodes based on the                
            </comment>
            <comment line="44">
                incoming events, and dispatches those events to the appropriate                
            </comment>
            <comment line="44">
                focus nodes.                
            </comment>
            <comment line="44">
                ****************************************************************                
            </comment>
            <comment line="44">
                ****************************************************************                
            </comment>
            <comment line="44">
                Event Dispatch.                
            </comment>
            <comment line="44">
                ****************************************************************                
            </comment>
            <implements interface="PRoot.InputSource"/>
            <javadoc line="43">
                &lt;b&gt;PInputManager&lt;/b&gt; is responsible for dispatching PInputEvents to node&apos;s
                 * event listeners. Events are dispatched from PRoot&apos;s processInputs method.
                 * &lt;P&gt;                
                <@see>
                    e edu.umd.cs.piccolo.event.PInputEvent                    
                </@see>
                <@see>
                    e PRoot                    
                </@see>
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="lastCanvasPosition" type="Point2D" line="55"/>
            <javadoc line="55">
                Records the last known mouse position on the canvas.                
            </javadoc>
            <declaration name="currentCanvasPosition" type="Point2D" line="58"/>
            <javadoc line="58">
                Records the current known mouse position on the canvas.                
            </javadoc>
            <declaration name="nextInput" type="InputEvent" line="61"/>
            <javadoc line="61">
                The next InputEvent that needs to be processed.                
            </javadoc>
            <declaration name="nextType" type="int" line="64"/>
            <javadoc line="64">
                The type of the next InputEvent that needs to be processed.                
            </javadoc>
            <declaration name="nextInputSource" type="PCamera" line="67"/>
            <javadoc line="67">
                The Input Source the next event to process came from.                
            </javadoc>
            <declaration name="mouseFocus" type="PPickPath" line="70"/>
            <javadoc line="70">
                The current mouse focus.                
            </javadoc>
            <declaration name="previousMouseFocus" type="PPickPath" line="73"/>
            <javadoc line="73">
                The previous mouse focus.                
            </javadoc>
            <declaration name="mouseOver" type="PPickPath" line="76"/>
            <javadoc line="76">
                Tracks where the mouse is right now on the canvas.                
            </javadoc>
            <declaration name="previousMouseOver" type="PPickPath" line="79"/>
            <javadoc line="79">
                Tracks the previous location of the mouse on the canvas.                
            </javadoc>
            <declaration name="keyboardFocus" type="PInputEventListener" line="82"/>
            <javadoc line="82">
                Tracks the input event listener that should receive keyboard events.                
            </javadoc>
            <declaration name="buttonsPressed" type="int" line="85"/>
            <javadoc line="85">
                Tracks the number mouse buttons currently pressed.                
            </javadoc>
            <javadoc line="88">
                Creates a PInputManager and sets positions (last, current) to the origin
                 * (0,0).                
            </javadoc>
            <method name="PInputManager" type="constructor" line="92"/>
            <javadoc line="97">
                Return the node that currently has the keyboard focus. This node receives
                 * the key events.                
                <@return>
                    n the current keyboard focus                    
                </@return>
            </javadoc>
            <method name="getKeyboardFocus" type="PInputEventListener" line="103"/>
            <javadoc line="107">
                Set the node that should receive key events.                
                <@param>
                    m eventHandler sets the keyboard event focus, may be null                    
                </@param>
            </javadoc>
            <method name="setKeyboardFocus" type="void" line="112">
                <declaration name="focusEvent" type="PInputEvent" line="113"/>
                <scope line="115"/>
                <scope line="121"/>
            </method>
            <javadoc line="126">
                Return the current Pick Path under the mouse focus. This will return the
                 * path that received the current mouse pressed event, or null if the mouse
                 * is not pressed. The mouse focus gets mouse dragged events even what the
                 * mouse is not over the mouse focus.                
                <@return>
                    n the current Pick Path under the mouse focus                    
                </@return>
            </javadoc>
            <method name="getMouseFocus" type="PPickPath" line="134"/>
            <javadoc line="138">
                Sets the current Pick Path under the mouse focus. The mouse focus gets
                 * mouse dragged events even when the mouse is not over the mouse focus.                
                <@param>
                    m path the new mouse focus                    
                </@param>
            </javadoc>
            <method name="setMouseFocus" type="void" line="144"/>
            <javadoc line="149">
                Return the node the the mouse is currently over.                
                <@return>
                    n the path over which the mouse currently is                    
                </@return>
            </javadoc>
            <method name="getMouseOver" type="PPickPath" line="154"/>
            <javadoc line="158">
                Records the path which is directly below the mouse.                
                <@param>
                    m path path over which the mouse has been moved                    
                </@param>
            </javadoc>
            <method name="setMouseOver" type="void" line="163"/>
            <javadoc line="167">
                Returns the position on the Canvas of the last event.                
                <@return>
                    n position of last canvas event                    
                </@return>
            </javadoc>
            <method name="getLastCanvasPosition" type="Point2D" line="172"/>
            <javadoc line="176">
                Returns the position of the current canvas event.                
                <@return>
                    n position of current canvas event                    
                </@return>
            </javadoc>
            <method name="getCurrentCanvasPosition" type="Point2D" line="181"/>
            <javadoc line="193">
                {@inheritDoc}                
            </javadoc>
            <method name="keyPressed" type="void" line="194"/>
            <javadoc line="198">
                {@inheritDoc}                
            </javadoc>
            <method name="keyReleased" type="void" line="199"/>
            <javadoc line="203">
                {@inheritDoc}                
            </javadoc>
            <method name="keyTyped" type="void" line="204"/>
            <javadoc line="208">
                {@inheritDoc}                
            </javadoc>
            <method name="mouseClicked" type="void" line="209"/>
            <javadoc line="213">
                {@inheritDoc}                
            </javadoc>
            <method name="mouseWheelRotated" type="void" line="214"/>
            <javadoc line="219">
                {@inheritDoc}                
            </javadoc>
            <method name="mouseWheelRotatedByBlock" type="void" line="220"/>
            <javadoc line="225">
                {@inheritDoc}                
            </javadoc>
            <method name="mouseDragged" type="void" line="226"/>
            <javadoc line="231">
                {@inheritDoc}                
            </javadoc>
            <method name="mouseEntered" type="void" line="232"/>
            <javadoc line="236">
                {@inheritDoc}                
            </javadoc>
            <method name="mouseExited" type="void" line="237"/>
            <javadoc line="241">
                {@inheritDoc}                
            </javadoc>
            <method name="mouseMoved" type="void" line="242"/>
            <javadoc line="247">
                {@inheritDoc}                
            </javadoc>
            <method name="mousePressed" type="void" line="248">
                <scope line="249"/>
                <scope line="254"/>
            </method>
            <javadoc line="259">
                {@inheritDoc}                
            </javadoc>
            <method name="mouseReleased" type="void" line="260">
                <scope line="264"/>
                <scope line="267"/>
            </method>
            <javadoc line="272">
                Fires events whenever the mouse moves from PNode to PNode.                
                <@param>
                    m event to check to see if the top node has changed.                    
                </@param>
            </javadoc>
            <method name="checkForMouseEnteredAndExited" type="void" line="277">
                <declaration name="currentNode" type="PNode" line="278"/>
                <declaration name="previousNode" type="PNode" line="279"/>
                <scope line="281"/>
            </method>
            <javadoc line="288">
                Returns picked node on pickPath if pickPath is not null, or null.                
                <@param>
                    m pickPath from which to extract picked node                    
                </@param>
                <@return>
                    n the picked node or null if pickPath is null                    
                </@return>
            </javadoc>
            <method name="getPickedNode" type="PNode" line="295">
                <scope line="296"/>
                <scope line="299"/>
            </method>
            <javadoc line="307">
                {@inheritDoc}                
            </javadoc>
            <method name="processInput" type="void" line="308">
                <scope line="309"/>
                <declaration name="e" type="PInputEvent" line="313"/>
                <declaration name="newCurrentCanvasPosition" type="Point2D" line="315"/>
                <declaration name="newLastCanvasPosition" type="Point2D" line="316"/>
                <scope line="318">
                    <scope line="319">
                        <declaration name="aPickPath" type="PPickPath" line="320"/>
                    </scope>
                    <scope line="327">
                        <declaration name="aPickPath" type="PPickPath" line="330"/>
                    </scope>
                </scope>
                <scope line="341"/>
            </method>
            <javadoc line="347">
                Flags the given event as needing to be processed.                
                <@param>
                    m event the event to be processed                    
                </@param>
                <@param>
                    m type type of event to be processed                    
                </@param>
                <@param>
                    m camera camera from which the event was dispatched                    
                </@param>
            </javadoc>
            <method name="processEventFromCamera" type="void" line="354">
                <comment line="355">
                    queue input                    
                </comment>
                <comment line="355">
                    tell root to process queued inputs                    
                </comment>
            </method>
            <javadoc line="364">
                Dispatches the given event to the listener, or does nothing if listener
                 * is null.                
                <@param>
                    m event event to be dispatched                    
                </@param>
                <@param>
                    m type type of event to dispatch                    
                </@param>
                <@param>
                    m listener target of dispatch                    
                </@param>
            </javadoc>
            <method name="dispatchEventToListener" type="void" line="372">
                <scope line="373"/>
            </method>
        </class>
    </source>