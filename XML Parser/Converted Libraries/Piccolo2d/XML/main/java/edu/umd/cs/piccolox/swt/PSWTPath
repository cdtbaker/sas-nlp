<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.swt">
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Paint"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Arc2D"/>
        <import package="java.awt.geom.Ellipse2D"/>
        <import package="java.awt.geom.GeneralPath"/>
        <import package="java.awt.geom.Line2D"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.geom.RoundRectangle2D"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.nodes.PPath"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransform"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransformException"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <class name="PSWTPath" extends="PNode" line="51">
            <comment line="52">
                ****************************************************************                
            </comment>
            <comment line="52">
                Stroke                
            </comment>
            <comment line="52">
                ****************************************************************                
            </comment>
            <comment line="52">
                ****************************************************************                
            </comment>
            <comment line="52">
                Painting                
            </comment>
            <comment line="52">
                ****************************************************************                
            </comment>
            <javadoc line="51">
                &lt;b&gt;PSWTPath&lt;/b&gt; is a wrapper around a java.awt.geom.GeneralPath, with
                 * workarounds for drawing shapes in SWT where necessary.                
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="59"/>
            <declaration name="PROPERTY_SHAPE" type="String" line="61"/>
            <javadoc line="61">
                The property name that identifies a change of this node&apos;s path. In any
                 * property change event the new value will be a reference to this node&apos;s
                 * path, but old value will always be null.                
            </javadoc>
            <declaration name="BOUNDS_TOLERANCE" type="double" line="68"/>
            <declaration name="TEMP_RECTANGLE" type="Rectangle2D.Float" line="69"/>
            <declaration name="TEMP_ROUNDRECTANGLE" type="RoundRectangle2D.Float" line="70"/>
            <declaration name="TEMP_ELLIPSE" type="Ellipse2D.Float" line="71"/>
            <declaration name="DEFAULT_STROKE_PAINT" type="Color" line="72"/>
            <declaration name="BASIC_STROKE" type="BasicStroke" line="73"/>
            <declaration name="PEN_WIDTH" type="float" line="74"/>
            <declaration name="strokePaint" type="Paint" line="76"/>
            <declaration name="updatingBoundsFromPath" type="boolean" line="78"/>
            <declaration name="origShape" type="Shape" line="79"/>
            <declaration name="shape" type="Shape" line="80"/>
            <declaration name="internalXForm" type="PAffineTransform" line="82"/>
            <declaration name="inverseXForm" type="AffineTransform" line="83"/>
            <declaration name="shapePts" type="double[]" line="85"/>
            <javadoc line="87">
                Creates a path representing the rectangle provided.                
                <@param>
                    m x left of rectangle                    
                </@param>
                <@param>
                    m y top of rectangle                    
                </@param>
                <@param>
                    m width width of rectangle                    
                </@param>
                <@param>
                    m height height of rectangle                    
                </@param>
                <@return>
                    n created rectangle                    
                </@return>
            </javadoc>
            <method name="createRectangle" type="PSWTPath" line="96">
                <declaration name="result" type="PSWTPath" line="98"/>
            </method>
            <javadoc line="103">
                Creates a path representing the rounded rectangle provided.                
                <@param>
                    m x left of rectangle                    
                </@param>
                <@param>
                    m y top of rectangle                    
                </@param>
                <@param>
                    m width width of rectangle                    
                </@param>
                <@param>
                    m height height of rectangle                    
                </@param>
                <@param>
                    m arcWidth width of the arc at the corners                    
                </@param>
                <@param>
                    m arcHeight height of arc at the corners                    
                </@param>
                <@return>
                    n created rounded rectangle                    
                </@return>
            </javadoc>
            <method name="createRoundRectangle" type="PSWTPath" line="115">
                <declaration name="result" type="PSWTPath" line="117"/>
            </method>
            <javadoc line="122">
                Creates a path representing an ellipse that covers the rectangle
                 * provided.                
                <@param>
                    m x left of rectangle                    
                </@param>
                <@param>
                    m y top of rectangle                    
                </@param>
                <@param>
                    m width width of rectangle                    
                </@param>
                <@param>
                    m height height of rectangle                    
                </@param>
                <@return>
                    n created ellipse                    
                </@return>
            </javadoc>
            <method name="createEllipse" type="PSWTPath" line="132">
                <declaration name="result" type="PSWTPath" line="134"/>
            </method>
            <javadoc line="139">
                Creates a PPath for the poly-line for the given points.                
                <@param>
                    m points array of points for the point lines                    
                </@param>
                <@return>
                    n created poly-line for the given points                    
                </@return>
            </javadoc>
            <method name="createPolyline" type="PSWTPath" line="146">
                <declaration name="result" type="PSWTPath" line="147"/>
            </method>
            <javadoc line="153">
                Creates a PPath for the poly-line for the given points.                
                <@param>
                    m xp array of x components of the points of the poly-lines                    
                </@param>
                <@param>
                    m yp array of y components of the points of the poly-lines                    
                </@param>
                <@return>
                    n created poly-line for the given points                    
                </@return>
            </javadoc>
            <method name="createPolyline" type="PSWTPath" line="161">
                <declaration name="result" type="PSWTPath" line="162"/>
            </method>
            <javadoc line="168">
                Creates an empty PSWTPath.                
            </javadoc>
            <method name="PSWTPath" type="constructor" line="171"/>
            <javadoc line="175">
                Creates an SWTPath in the given shape with the default paint and stroke.                
                <@param>
                    m aShape the desired shape                    
                </@param>
            </javadoc>
            <method name="PSWTPath" type="constructor" line="180"/>
            <javadoc line="188">
                Returns the paint to use when drawing the stroke of the shape.                
                <@return>
                    n path's stroke paint                    
                </@return>
            </javadoc>
            <method name="getStrokePaint" type="Paint" line="193"/>
            <javadoc line="197">
                Sets the paint to use when drawing the stroke of the shape.                
                <@param>
                    m strokeColor new stroke color                    
                </@param>
            </javadoc>
            <method name="setStrokeColor" type="void" line="202">
                <declaration name="old" type="Paint" line="203"/>
            </method>
            <javadoc line="209">
                Set the bounds of this path. This method works by scaling the path to fit
                 * into the specified bounds. This normally works well, but if the specified
                 * base bounds get too small then it is impossible to expand the path shape
                 * again since all its numbers have tended to zero, so application code may
                 * need to take this into consideration.                
                <@param>
                    m x new left position of bounds                    
                </@param>
                <@param>
                    m y new top position of bounds                    
                </@param>
                <@param>
                    m width the new width of the bounds                    
                </@param>
                <@param>
                    m height the new height of the bounds                    
                </@param>
            </javadoc>
            <method name="internalUpdateBounds" type="void" line="221">
                <scope line="222"/>
                <scope line="225"/>
                <declaration name="pathBounds" type="Rectangle2D" line="229"/>
                <scope line="234"/>
                <scope line="238"/>
                <scope line="246"/>
                <scope line="249"/>
            </method>
            <javadoc line="254">
                Returns true if path crosses the provided bounds. Takes visibility of
                 * path into account.                
                <@param>
                    m aBounds bounds being tested for intersection                    
                </@param>
                <@return>
                    n true if path visibly crosses bounds                    
                </@return>
            </javadoc>
            <method name="intersects" type="boolean" line="261">
                <scope line="262">
                    <declaration name="srcBounds" type="Rectangle2D" line="263"/>
                    <scope line="264"/>
                    <scope line="267"/>
                    <scope line="272"/>
                    <scope line="275"/>
                </scope>
            </method>
            <javadoc line="282">
                Recalculates the path&apos;s bounds by examining it&apos;s associated shape.                
            </javadoc>
            <method name="updateBoundsFromPath" type="void" line="285">
                <scope line="288"/>
                <scope line="291">
                    <declaration name="b" type="Rectangle2D" line="292"/>
                </scope>
            </method>
            <javadoc line="309">
                Paints the path on the context provided.                
                <@param>
                    m paintContext the context onto which the path will be painted                    
                </@param>
            </javadoc>
            <method name="paint" type="void" line="314">
                <declaration name="p" type="Paint" line="315"/>
                <declaration name="g2" type="SWTGraphics2D" line="316"/>
                <scope line="318"/>
                <scope line="322"/>
                <scope line="327"/>
                <scope line="332"/>
            </method>
            <method name="drawShape" type="void" line="337">
                <declaration name="lineWidth" type="double" line="338"/>
                <scope line="339"/>
                <scope line="343"/>
                <scope line="347"/>
                <scope line="351"/>
                <scope line="355"/>
            </method>
            <method name="fillShape" type="void" line="360">
                <declaration name="lineWidth" type="double" line="361"/>
                <scope line="362"/>
                <scope line="366"/>
                <scope line="370"/>
                <scope line="374"/>
                <scope line="378"/>
            </method>
            <javadoc line="383">
                Changes the underlying shape of this PSWTPath.                
                <@param>
                    m newShape new associated shape of this PSWTPath                    
                </@param>
            </javadoc>
            <method name="setShape" type="void" line="388"/>
            <javadoc line="398">
                Updates the internal points used to draw the shape.                
                <@param>
                    m aShape shape to read points from                    
                </@param>
            </javadoc>
            <method name="updateShapePoints" type="void" line="403">
                <scope line="404">
                    <scope line="405"/>
                </scope>
                <scope line="414">
                    <scope line="415"/>
                </scope>
                <scope line="424">
                    <scope line="425"/>
                </scope>
                <scope line="436">
                    <scope line="437"/>
                </scope>
                <scope line="448"/>
            </method>
            <javadoc line="453">
                Clone&apos;s the shape provided.                
                <@param>
                    m aShape shape to be cloned                    
                </@param>
                <@return>
                    n a cloned version of the provided shape                    
                </@return>
            </javadoc>
            <method name="cloneShape" type="Shape" line="460">
                <scope line="461"/>
                <scope line="464">
                    <declaration name="e2" type="Ellipse2D" line="465"/>
                </scope>
                <scope line="468">
                    <declaration name="a2" type="Arc2D" line="469"/>
                </scope>
                <scope line="473">
                    <declaration name="r2" type="RoundRectangle2D" line="474"/>
                </scope>
                <scope line="478">
                    <declaration name="l2" type="Line2D" line="479"/>
                </scope>
                <scope line="482">
                    <declaration name="aPath" type="GeneralPath" line="483"/>
                </scope>
            </method>
            <javadoc line="489">
                Resets the path to a rectangle with the dimensions and position provided.                
                <@param>
                    m x left of the rectangle                    
                </@param>
                <@param>
                    m y top of te rectangle                    
                </@param>
                <@param>
                    m width width of the rectangle                    
                </@param>
                <@param>
                    m height height of the rectangle                    
                </@param>
            </javadoc>
            <method name="setPathToRectangle" type="void" line="497"/>
            <javadoc line="502">
                Resets the path to a rectangle with the dimensions and position provided.                
                <@param>
                    m x left of the rectangle                    
                </@param>
                <@param>
                    m y top of te rectangle                    
                </@param>
                <@param>
                    m width width of the rectangle                    
                </@param>
                <@param>
                    m height height of the rectangle                    
                </@param>
                <@param>
                    m arcWidth width of arc in the corners of the rectangle                    
                </@param>
                <@param>
                    m arcHeight height of arc in the corners of the rectangle                    
                </@param>
            </javadoc>
            <method name="setPathToRoundRectangle" type="void" line="513"/>
            <javadoc line="518">
                Resets the path to an ellipse positioned at the coordinate provided with
                 * the dimensions provided.                
                <@param>
                    m x left of the ellipse                    
                </@param>
                <@param>
                    m y top of the ellipse                    
                </@param>
                <@param>
                    m width width of the ellipse                    
                </@param>
                <@param>
                    m height height of the ellipse                    
                </@param>
            </javadoc>
            <method name="setPathToEllipse" type="void" line="527"/>
            <javadoc line="532">
                Sets the path to a sequence of segments described by the points.                
                <@param>
                    m points points to that lie along the generated path                    
                </@param>
            </javadoc>
            <method name="setPathToPolyline" type="void" line="537">
                <declaration name="path" type="GeneralPath" line="538"/>
                <scope line="541"/>
            </method>
            <javadoc line="547">
                Sets the path to a sequence of segments described by the point components
                 * provided.                
                <@param>
                    m xp the x components of the points along the path                    
                </@param>
                <@param>
                    m yp the y components of the points along the path                    
                </@param>
            </javadoc>
            <method name="setPathToPolyline" type="void" line="554">
                <declaration name="path" type="GeneralPath" line="555"/>
                <scope line="558"/>
            </method>
            <javadoc line="564">
                Return the center of this SWT path node, based on its bounds.                
                <@return>
                    n the center of this SWT path node, based on its bounds                    
                </@return>
            </javadoc>
            <method name="getCenter" type="Point2D" line="569">
                <declaration name="bounds" type="PBounds" line="570"/>
            </method>
        </class>
    </source>