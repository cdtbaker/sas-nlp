<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.pswing">
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PLayer"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="javax.swing.JComponent"/>
        <import package="javax.swing.RepaintManager"/>
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.Stroke"/>
        <import package="java.awt.event.ContainerAdapter"/>
        <import package="java.awt.event.ContainerEvent"/>
        <import package="java.awt.event.ContainerListener"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <class name="PSwing" extends="PNode" line="145">
            <implements interface="Serializable"/>
            <implements interface="PropertyChangeListener"/>
            <javadoc line="145">
                &lt;b&gt;PSwing&lt;/b&gt; is used to add Swing Components to a Piccolo2D canvas.
                 * &lt;p&gt;
                 * Example: adding a swing JButton to a PCanvas:
                 * &lt;pre&gt;
                 * PSwingCanvas canvas = new PSwingCanvas();
                 * JButton button = new JButton(&amp;quot;Button&amp;quot;);
                 * swing = new PSwing(canvas, button);
                 * canvas.getLayer().addChild(swing);
                 * &lt;/pre&gt;
                 * &lt;p&gt;
                 * NOTE: PSwing has the current limitation that it does not listen for Container
                 * events. This is only an issue if you create a PSwing and later add Swing
                 * components to the PSwing&apos;s component hierarchy that do not have double
                 * buffering turned off or have a smaller font size than the minimum font size
                 * of the original PSwing&apos;s component hierarchy.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * For instance, the following bit of code will give unexpected results:
                 * &lt;pre&gt;
                 * JPanel panel = new JPanel();
                 * PSwing swing = new PSwing(panel);
                 * JPanel newChild = new JPanel();
                 * newChild.setDoubleBuffered(true);
                 * panel.add(newChild);
                 * &lt;/pre&gt;
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * NOTE: PSwing cannot be correctly interacted with through multiple cameras.
                 * There is no support for it yet.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * NOTE: PSwing is java.io.Serializable.
                 * &lt;/p&gt;
                 * &lt;p&gt;
                 * &lt;b&gt;Warning:&lt;/b&gt; Serialized objects of this class will not be compatible with
                 * future Piccolo releases. The current serialization support is appropriate for
                 * short term storage or RMI between applications running the same version of
                 * Piccolo. A future release of Piccolo will provide support for long term
                 * persistence.
                 * &lt;/p&gt;                
                <@author>
                    r Sam R. Reid                    
                </@author>
                <@author>
                    r Chris Malley (cmalley@pixelzoom.com)                    
                </@author>
                <@author>
                    r Benjamin B. Bederson                    
                </@author>
                <@author>
                    r Lance E. Good                    
                </@author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="198"/>
            <javadoc line="198">
                Default serial version UID.                
            </javadoc>
            <declaration name="PSWING_PROPERTY" type="String" line="201"/>
            <javadoc line="201">
                Key for this object in the Swing component&apos;s client properties.                
            </javadoc>
            <declaration name="TEMP_REPAINT_BOUNDS2" type="PBounds" line="204"/>
            <javadoc line="204">
                Temporary repaint bounds.                
            </javadoc>
            <declaration name="BUFFER_BACKGROUND_COLOR" type="Color" line="207"/>
            <javadoc line="207">
                For use when buffered painting is enabled.                
            </javadoc>
            <declaration name="IDENTITY_TRANSFORM" type="AffineTransform" line="210"/>
            <declaration name="DEFAULT_GREEK_THRESHOLD" type="double" line="212"/>
            <javadoc line="212">
                Default Greek threshold, &lt;code&gt;0.3d&lt;/code&gt;.                
            </javadoc>
            <declaration name="greekThreshold" type="double" line="215"/>
            <javadoc line="215">
                The cutoff at which the Swing component is rendered greek.                
            </javadoc>
            <declaration name="component" type="JComponent" line="218"/>
            <javadoc line="218">
                Swing component for this Swing node.                
            </javadoc>
            <declaration name="useBufferedPainting" type="boolean" line="221"/>
            <javadoc line="221">
                Whether or not to use buffered painting.                
                <@see>
                    e #paint(java.awt.Graphics2D)                    
                </@see>
            </javadoc>
            <declaration name="buffer" type="BufferedImage" line="227"/>
            <javadoc line="227">
                Used when buffered painting is enabled.                
            </javadoc>
            <declaration name="minFontSize" type="double" line="230"/>
            <javadoc line="230">
                Minimum font size.                
            </javadoc>
            <declaration name="defaultStroke" type="Stroke" line="233"/>
            <javadoc line="233">
                Default stroke, &lt;code&gt;new BasicStroke()&lt;/code&gt;. Cannot be made static
                 * because BasicStroke is not serializable.  Should not be null.                
            </javadoc>
            <declaration name="DEFAULT_FONT" type="Font" line="239"/>
            <javadoc line="239">
                Default font, 12 point &lt;code&gt;&quot;SansSerif&quot;&lt;/code&gt;. Will be made final in
                 * version 2.0.                
            </javadoc>
            <declaration name="canvas" type="PSwingCanvas" line="247"/>
            <javadoc line="247">
                Swing canvas for this swing node.                
            </javadoc>
            <declaration name="listeningTo" type="ArrayList" line="250"/>
            <javadoc line="250">
                Used to keep track of which nodes we&apos;ve attached listeners to since no
                 * built in support in PNode.                
            </javadoc>
            <declaration name="parentListener" type="PropertyChangeListener" line="256"/>
            <javadoc line="256">
                The parent listener for camera/canvas changes.                
            </javadoc>
            <anonymous_class line="257">
                <javadoc line="258">
                    {@inheritDoc}                    
                </javadoc>
                <method name="propertyChange" type="void" line="259">
                    <declaration name="parent" type="PNode" line="260"/>
                    <scope line="262"/>
                    <scope line="265"/>
                </method>
                <javadoc line="270">
                    Clear out all the listeners registered to make sure there are no
                     * stray references.                    
                    <@param>
                        m fromParent Parent to start with for clearing listeners                        
                    </@param>
                </javadoc>
                <method name="clearListeners" type="void" line="276">
                    <scope line="277"/>
                </method>
            </anonymous_class>
            <declaration name="doubleBufferRemover" type="ContainerListener" line="286"/>
            <javadoc line="286">
                Listens to container nodes for changes to its contents. Any additions
                 * will automatically have double buffering turned off.                
            </javadoc>
            <anonymous_class line="290">
                <method name="componentAdded" type="void" line="291">
                    <declaration name="childComponent" type="Component" line="292"/>
                    <scope line="293"/>
                </method>
                <javadoc line="298">
                    Disables double buffering on every component in the hierarchy of the
                     * targetComponent.
                     * I&apos;m assuming that the intent of the is method is that it should be
                     * called explicitly by anyone making changes to the hierarchy of the
                     * Swing component graph.                    
                </javadoc>
                <method name="disableDoubleBuffering" type="void" line="306">
                    <scope line="308">
                        <declaration name="c" type="Component" line="309"/>
                        <scope line="310"/>
                    </scope>
                </method>
            </anonymous_class>
            <javadoc line="317">
                Create a new visual component wrapper for the specified Swing component.                
                <@param>
                    m component Swing component to be wrapped                    
                </@param>
            </javadoc>
            <method name="PSwing" type="constructor" line="322"/>
            <javadoc line="332">
                @deprecated by {@link #PSwing(JComponent)}                
                <@param>
                    m swingCanvas canvas on which the PSwing node will be embedded                    
                </@param>
                <@param>
                    m component not used                    
                </@param>
            </javadoc>
            <method name="PSwing" type="constructor" line="338"/>
            <javadoc line="342">
                If true {@link PSwing} will paint the {@link JComponent} to a buffer with no graphics
                 * transformations applied and then paint the buffer to the target transformed
                 * graphics context. On some platforms (such as Mac OS X) rendering {@link JComponent}s to
                 * a transformed context is slow. Enabling buffered painting gives a significant performance
                 * boost on these platforms; however, at the expense of a lower-quality drawing result at larger
                 * scales.                
                <@since>
                    e 1.3.1                    
                </@since>
                <@param>
                    m useBufferedPainting true if this {@link PSwing} should use buffered painting                    
                </@param>
            </javadoc>
            <method name="setUseBufferedPainting" type="void" line="352"/>
            <method name="isUseBufferedPainting" type="boolean" line="356"/>
            <javadoc line="360">
                Ensures the bounds of the underlying component are accurate, and sets the
                 * bounds of this PNode.                
            </javadoc>
            <method name="updateBounds" type="void" line="364">
                <comment line="365">
                    Need to explicitly set the component&apos;s bounds because
                     the component&apos;s parent (PSwingCanvas.ChildWrapper) has no layout manager.
                    
                    if (componentNeedsResizing()) {                    
                </comment>
                <scope line="369"/>
            </method>
            <javadoc line="375">
                Since the parent ChildWrapper has no layout manager, it is the responsibility of this PSwing
                 * to make sure the component has its bounds set properly, otherwise it will not be drawn properly.
                 * This method sets the bounds of the component to be equal to its preferred size.                
            </javadoc>
            <method name="updateComponentSize" type="void" line="380"/>
            <javadoc line="384">
                Determines whether the component should be resized, based on whether its actual width and height
                 * differ from its preferred width and height.                
                <@return>
                    n true if the component should be resized.                    
                </@return>
            </javadoc>
            <method name="componentNeedsResizing" type="boolean" line="389"/>
            <javadoc line="393">
                Paints the PSwing on the specified renderContext.  Also determines if
                 * the Swing component should be rendered normally or as a filled rectangle (greeking).
                 * &lt;p/&gt;
                 * The transform, clip, and composite will be set appropriately when this
                 * object is rendered. It is up to this object to restore the transform,
                 * clip, and composite of the Graphics2D if this node changes any of them.
                 * However, the color, font, and stroke are unspecified by Piccolo. This
                 * object should set those things if they are used, but they do not need to
                 * be restored.                
                <@param>
                    m renderContext Contains information about current render.                    
                </@param>
            </javadoc>
            <method name="paint" type="void" line="406">
                <comment line="407">
                    Save Stroke and Font for restoring.                    
                </comment>
                <comment line="407">
                    Restore the stroke and font on the Graphics2D                    
                </comment>
                <scope line="407"/>
                <declaration name="g2" type="Graphics2D" line="411"/>
                <declaration name="originalStroke" type="Stroke" line="414"/>
                <declaration name="originalFont" type="Font" line="415"/>
                <scope line="420"/>
                <scope line="423"/>
            </method>
            <javadoc line="432">
                Return true if this Swing node should render as greek given the specified
                 * paint context.                
                <@param>
                    m paintContext paint context                    
                </@param>
                <@return>
                    n true if this Swing node should render as greek given the
                     * specified paint context                    
                </@return>
            </javadoc>
            <method name="shouldRenderGreek" type="boolean" line="440"/>
            <javadoc line="444">
                Paints the Swing component as greek.  This method assumes that the stroke has been set beforehand.                
                <@param>
                    m g2 The graphics used to render the filled rectangle                    
                </@param>
            </javadoc>
            <method name="paintAsGreek" type="void" line="449">
                <comment line="450">
                    Save original color for restoring painting as greek.                    
                </comment>
                <comment line="450">
                    Restore original color on the Graphics2D                    
                </comment>
                <declaration name="originalColor" type="Color" line="451"/>
                <scope line="453"/>
                <scope line="458"/>
            </method>
            <javadoc line="467">
                {@inheritDoc}                
            </javadoc>
            <method name="setVisible" type="void" line="468">
                <scope line="471"/>
            </method>
            <javadoc line="476">
                Remove from the SwingWrapper; throws an exception if no canvas is
                 * associated with this PSwing.                
            </javadoc>
            <method name="removeFromSwingWrapper" type="void" line="480">
                <scope line="481"/>
            </method>
            <method name="isComponentSwingWrapped" type="boolean" line="486"/>
            <javadoc line="490">
                Renders the wrapped component to the graphics context provided.                
                <@param>
                    m g2 graphics context for rendering the JComponent                    
                </@param>
            </javadoc>
            <method name="paint" type="void" line="495">
                <scope line="496"/>
                <declaration name="manager" type="PSwingRepaintManager" line="501"/>
                <declaration name="oldHints" type="RenderingHints" line="504"/>
                <scope line="506">
                    <declaration name="bufferedGraphics" type="Graphics2D" line="507"/>
                </scope>
                <scope line="510"/>
            </method>
            <method name="getBufferedGraphics" type="Graphics2D" line="520">
                <declaration name="bufferedGraphics" type="Graphics2D" line="521"/>
                <scope line="522"/>
                <scope line="528"/>
            </method>
            <javadoc line="539">
                Tells whether the buffer for the image of the Swing components
                 * is currently valid.                
                <@return>
                    n true if the buffer is currently valid                    
                </@return>
            </javadoc>
            <method name="isBufferValid" type="boolean" line="545"/>
            <javadoc line="549">
                Repaints the specified portion of this visual component. Note that the
                 * input parameter may be modified as a result of this call.                
                <@param>
                    m repaintBounds bounds that need repainting                    
                </@param>
            </javadoc>
            <method name="repaint" type="void" line="555">
                <declaration name="sh" type="Shape" line="556"/>
            </method>
            <javadoc line="561">
                Returns the Swing component that this visual component wraps.                
                <@return>
                    n The Swing component wrapped by this PSwing node                    
                </@return>
            </javadoc>
            <method name="getComponent" type="JComponent" line="566"/>
            <javadoc line="570">
                We need to turn off double buffering of Swing components within Piccolo
                 * since all components contained within a native container use the same
                 * buffer for double buffering. With normal Swing widgets this is fine, but
                 * for Swing components within Piccolo this causes problems. This function
                 * recurses the component tree rooted at c, and turns off any double
                 * buffering in use. It also updates the minimum font size based on the font
                 * size of c and adds a property change listener to listen for changes to
                 * the font.                
                <@param>
                    m c The Component to be recursively unDoubleBuffered                    
                </@param>
            </javadoc>
            <method name="initializeComponent" type="void" line="582">
                <scope line="584"/>
                <scope line="589"/>
                <scope line="594"/>
            </method>
            <method name="initializeChildren" type="void" line="599">
                <declaration name="children" type="Component[]" line="600"/>
                <scope line="601">
                    <scope line="602"/>
                </scope>
            </method>
            <javadoc line="608">
                Listens for changes in font on components rooted at this PSwing.                
                <@param>
                    m evt property change event representing the change in font                    
                </@param>
            </javadoc>
            <method name="propertyChange" type="void" line="613">
                <declaration name="source" type="Component" line="614"/>
                <scope line="615"/>
            </method>
            <method name="readObject" type="void" line="620"/>
            <javadoc line="625">
                Attaches a listener to the specified node and all its parents to listen
                 * for a change in the PSwingCanvas. Only PROPERTY_PARENT listeners are
                 * added so this code wouldn&apos;t handle if a PLayer were viewed by a different
                 * PCamera since that constitutes a child change.                
                <@param>
                    m node The child node at which to begin a parent-based traversal for
                     * adding listeners.                    
                </@param>
            </javadoc>
            <method name="listenForCanvas" type="void" line="634">
                <comment line="635">
                    need to get the full tree for this node                    
                </comment>
                <declaration name="p" type="PNode" line="636"/>
                <scope line="637">
                    <declaration name="parent" type="PNode" line="640"/>
                    <scope line="642">
                        <declaration name="player" type="PLayer" line="643"/>
                        <scope line="646">
                            <declaration name="cam" type="PCamera" line="647"/>
                            <scope line="648"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="658">
                Attach a property change listener to the specified node, if one has not
                 * already been attached.                
                <@param>
                    m node the node to listen to for parent/pcamera/pcanvas changes                    
                </@param>
            </javadoc>
            <method name="listenToNode" type="void" line="664">
                <scope line="665"/>
            </method>
            <javadoc line="671">
                Determine whether this PSwing is already listening to the specified node
                 * for camera/canvas changes.                
                <@param>
                    m node the node to check                    
                </@param>
                <@return>
                    n true if this PSwing is already listening to the specified node
                     * for camera/canvas changes                    
                </@return>
            </javadoc>
            <method name="isListeningTo" type="boolean" line="679">
                <scope line="680">
                    <declaration name="pNode" type="PNode" line="681"/>
                    <scope line="682"/>
                </scope>
            </method>
            <javadoc line="689">
                Removes this PSwing from previous PSwingCanvas (if any), and ensure that
                 * this PSwing is attached to the new PSwingCanvas.                
                <@param>
                    m newCanvas the new PSwingCanvas (may be null)                    
                </@param>
            </javadoc>
            <method name="updateCanvas" type="void" line="695">
                <scope line="696"/>
                <scope line="700"/>
                <scope line="704"/>
                <scope line="707"/>
            </method>
            <javadoc line="719">
                Return the Greek threshold scale. When the scale will be below this
                 * threshold the Swing component is rendered as &apos;Greek&apos; instead of painting
                 * the Swing component. Defaults to {@link #DEFAULT_GREEK_THRESHOLD}.                
                <@see>
                    e PSwing#paintAsGreek(Graphics2D)                    
                </@see>
                <@return>
                    n the current Greek threshold scale                    
                </@return>
            </javadoc>
            <method name="getGreekThreshold" type="double" line="727"/>
            <javadoc line="731">
                Set the Greek threshold in scale to &lt;code&gt;greekThreshold&lt;/code&gt;. When the
                 * scale will be below this threshold the Swing component is rendered as
                 * &apos;Greek&apos; instead of painting the Swing component..                
                <@see>
                    e PSwing#paintAsGreek(Graphics2D)                    
                </@see>
                <@param>
                    m greekThreshold Greek threshold in scale                    
                </@param>
            </javadoc>
            <method name="setGreekThreshold" type="void" line="739"/>
        </class>
    </source>