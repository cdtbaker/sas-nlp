<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.nodes">
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.MediaTracker"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="javax.imageio.ImageIO"/>
        <import package="javax.swing.ImageIcon"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <class name="PImage" line="49">
            <extends class="PNode"/>
            <javadoc line="49">
                &lt;b&gt;PImage&lt;/b&gt; is a wrapper around a java.awt.Image. If this node is copied or
                  serialized that image will be converted into a BufferedImage if it is not
                  already one.
                  &lt;P&gt;                
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="60"/>
            <javadoc line="60">
                Allows for future serialization code to understand versioned binary
                  formats.                
            </javadoc>
            <declaration name="PROPERTY_IMAGE" type="String" line="66"/>
            <javadoc line="66">
                The property name that identifies a change of this node&apos;s image (see{@link #getImage getImage}). Both old and new value will be set correctly
                  to Image objects in any property change event.                
            </javadoc>
            <declaration name="PROPERTY_CODE_IMAGE" type="int" line="72"/>
            <javadoc line="72">
                The property code that identifies a change of this node&apos;s image (see{@link #getImage getImage}). Both old and new value will be set correctly
                  to Image objects in any property change event.                
            </javadoc>
            <declaration name="image" type="Image" line="80"/>
            <javadoc line="82">
                Constructs a PImage without a java.awt.Image attached.                
            </javadoc>
            <method name="PImage" type="constructor" line="83"/>
            <javadoc line="86">
                Construct a new PImage by loading the given fileName and wrapping the
                  resulting java.awt.Image.                
                <@param>
                    m fileName of the image to wrap                    
                </@param>
            </javadoc>
            <method name="PImage" type="constructor" line="92">
                <params>
                    <param name="fileName" type="String"/>
                </params>
            </method>
            <javadoc line="96">
                Construct a new PImage wrapping the given java.awt.Image.                
                <@param>
                    m image image that this PImage will wrap                    
                </@param>
            </javadoc>
            <method name="PImage" type="constructor" line="101">
                <params>
                    <param name="image" type="Image"/>
                </params>
            </method>
            <javadoc line="105">
                Construct a new PImage by loading the given url and wrapping the
                  resulting java.awt.Image. If the url is &lt;code&gt;null&lt;/code&gt;, create an
                  empty PImage; this behaviour is useful when fetching resources that may
                  be missing.                
                <@param>
                    m url URL of image resource to load                    
                </@param>
            </javadoc>
            <method name="PImage" type="constructor" line="113">
                <params>
                    <param name="url" type="java.net.URL"/>
                </params>
                <scope line="114"/>
            </method>
            <javadoc line="119">
                Returns the image that is shown by this node, or null if none.                
                <@return>
                    n java.awt.Image being wrapped by this node                    
                </@return>
            </javadoc>
            <method name="getImage" type="Image" line="124"/>
            <javadoc line="128">
                Set the image that is wrapped by this PImage node. This method will also
                  load the image using a MediaTracker before returning.                
                <@param>
                    m fileName file to be wrapped by this PImage                    
                </@param>
            </javadoc>
            <method name="setImage" type="void" line="134">
                <params>
                    <param name="fileName" type="String"/>
                </params>
            </method>
            <javadoc line="138">
                Set the image that is wrapped by this PImage node. This method will also
                  load the image using a MediaTracker before returning.                
                <@param>
                    m newImage image to be displayed by this PImage                    
                </@param>
            </javadoc>
            <method name="setImage" type="void" line="144">
                <params>
                    <param name="newImage" type="Image"/>
                </params>
                <declaration name="oldImage" type="Image" line="145"/>
                <scope line="147"/>
                <scope line="150"/>
                <scope line="154"/>
            </method>
            <javadoc line="162">
                Ensures the image is loaded enough (loading is fine).                
                <@param>
                    m newImage to check                    
                </@param>
                <@return>
                    n image or null if not loaded enough.                    
                </@return>
            </javadoc>
            <method name="getLoadedImage" type="Image" line="168">
                <params>
                    <param name="newImage" type="Image"/>
                </params>
                <declaration name="imageLoader" type="ImageIcon" line="169"/>
            </method>
            <javadoc line="179">
                Renders the wrapped Image, stretching it appropriately if the bounds of
                  this PImage doesn&apos;t match the bounds of the image.                
                <@param>
                    m paintContext context into which the rendering will occur                    
                </@param>
            </javadoc>
            <method name="paint" type="void" line="185">
                <params>
                    <param name="paintContext" type="PPaintContext"/>
                </params>
                <scope line="186"/>
                <declaration name="iw" type="double" line="190"/>
                <declaration name="ih" type="double" line="191"/>
                <declaration name="b" type="PBounds" line="193"/>
                <declaration name="g2" type="Graphics2D" line="194"/>
                <scope line="196"/>
                <scope line="203"/>
            </method>
            <javadoc line="209">
                Serializes this PImage to the stream provided. The java.awt.Image wrapped
                  by this PImage is converted into a BufferedImage when serialized.                
                <@param>
                    m out stream into which serialized object will be serialized                    
                </@param>
                <@throws>
                    s IOException if error occurs while writing to the output stream                    
                </@throws>
            </javadoc>
            <method name="writeObject" type="void" line="216">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <declaration name="bufferedImage" type="BufferedImage" line="218"/>
                <scope line="219"/>
            </method>
            <javadoc line="224">
                Deserializes a PImage from the input stream provided.                
                <@param>
                    m in stream from which the PImage should be read                    
                </@param>
                <@throws>
                    s IOException if problem occurs while reading from input stream                    
                </@throws>
                <@throws>
                    s ClassNotFoundException occurs is no mapping from the bytes in the
                      stream can be found to classes available                    
                </@throws>
            </javadoc>
            <method name="readObject" type="void" line="232">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="237">
                Converts the provided image into a BufferedImage. If alwaysCreateCopy is
                  false then if the image is already a buffered image it will not be copied
                  and instead the original image will just be returned.                
                <@param>
                    m image the image to be converted                    
                </@param>
                <@param>
                    m alwaysCreateCopy if true, will create a copy even if image is
                      already a BufferedImage                    
                </@param>
                <@return>
                    n a BufferedImage equivalent to the Image provided                    
                </@return>
            </javadoc>
            <method name="toBufferedImage" type="BufferedImage" line="247">
                <params>
                    <param name="image" type="Image"/>
                    <param name="alwaysCreateCopy" type="boolean"/>
                </params>
                <scope line="248"/>
                <scope line="252"/>
                <declaration name="result" type="BufferedImage" line="256"/>
                <scope line="258"/>
                <scope line="261">
                    <declaration name="graphicsConfiguration" type="GraphicsConfiguration" line="262"/>
                </scope>
                <declaration name="g2" type="Graphics2D" line="267"/>
            </method>
        </class>
    </source>