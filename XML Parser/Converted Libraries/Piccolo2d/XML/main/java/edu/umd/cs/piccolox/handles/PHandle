<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.handles">
        <import package="java.awt.Color"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.awt.geom.Ellipse2D"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.event.PDragSequenceEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.event.PInputEventFilter"/>
        <import package="edu.umd.cs.piccolo.nodes.PPath"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PDimension"/>
        <import package="edu.umd.cs.piccolox.util.PLocator"/>
        <import package="edu.umd.cs.piccolox.util.PNodeLocator"/>
        <class name="PHandle" line="52">
            <extends class="PPath"/>
            <javadoc line="52">
                &lt;b&gt;PHandle&lt;/b&gt; is used to modify some aspect of Piccolo when it is dragged.
                  Each handle has a PLocator that it uses to automatically position itself. See
                  PBoundsHandle for an example of a handle that resizes the bounds of another
                  node.                
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <class name="HandleDragHandler" line="62">
                <extends class="PDragSequenceEventHandler"/>
                <method name="startDrag" type="void" line="63">
                    <params>
                        <param name="event" type="PInputEvent"/>
                    </params>
                </method>
                <method name="drag" type="void" line="68">
                    <params>
                        <param name="event" type="PInputEvent"/>
                    </params>
                    <declaration name="aDelta" type="PDimension" line="70"/>
                    <scope line="71"/>
                </method>
                <method name="endDrag" type="void" line="76">
                    <params>
                        <param name="event" type="PInputEvent"/>
                    </params>
                </method>
            </class>
            <declaration name="serialVersionUID" type="long" line="82"/>
            <declaration name="DEFAULT_HANDLE_SIZE" type="float" line="84"/>
            <javadoc line="84">
                The default size for a handle.                
            </javadoc>
            <declaration name="DEFAULT_HANDLE_SHAPE" type="Shape" line="86"/>
            <javadoc line="86">
                Default shape to use when drawing handles.                
            </javadoc>
            <declaration name="DEFAULT_COLOR" type="Color" line="89"/>
            <javadoc line="89">
                Default color to paint handles.                
            </javadoc>
            <declaration name="locator" type="PLocator" line="92"/>
            <declaration name="handleDragger" type="PDragSequenceEventHandler" line="93"/>
            <javadoc line="95">
                Construct a new handle that will use the given locator to locate itself
                  on its parent node.                
                <@param>
                    m aLocator locator to use when laying out the handle                    
                </@param>
            </javadoc>
            <method name="PHandle" type="constructor" line="101">
                <params>
                    <param name="aLocator" type="PLocator"/>
                </params>
            </method>
            <javadoc line="108">
                Installs the handler that notify its subclasses of handle interaction.                
            </javadoc>
            <method name="installHandleEventHandlers" type="void" line="111">
                <comment line="112">
                    no need for moved events for handle interaction,                    
                </comment>
                <comment line="112">
                    so reject them so we don&apos;t consume them                    
                </comment>
                <anonymous_class line="114">
                    <method name="propertyChange" type="void" line="115">
                        <params>
                            <param name="evt" type="PropertyChangeEvent"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="130">
                Return the event handler that is responsible for the drag handle
                  interaction.                
                <@return>
                    n current handler for HandleDrag events                    
                </@return>
            </javadoc>
            <method name="getHandleDraggerHandler" type="PDragSequenceEventHandler" line="136"/>
            <javadoc line="140">
                Get the locator that this handle uses to position itself on its parent
                  node.                
                <@return>
                    n the locator associated with this handle                    
                </@return>
            </javadoc>
            <method name="getLocator" type="PLocator" line="146"/>
            <javadoc line="150">
                Set the locator that this handle uses to position itself on its parent
                  node.                
                <@param>
                    m locator the locator to assign to this handle                    
                </@param>
            </javadoc>
            <method name="setLocator" type="void" line="156">
                <params>
                    <param name="locator" type="PLocator"/>
                </params>
            </method>
            <javadoc line="162">
                Override this method to get notified when the handle starts to get
                  dragged.                
                <@param>
                    m aLocalPoint point on the handle at which the event occurred                    
                </@param>
                <@param>
                    m aEvent the event responsible for starting the dragging                    
                </@param>
            </javadoc>
            <method name="startHandleDrag" type="void" line="169">
                <params>
                    <param name="aLocalPoint" type="Point2D"/>
                    <param name="aEvent" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="172">
                Override this method to get notified as the handle is dragged.                
                <@param>
                    m aLocalDimension size of the drag in handle coordinates                    
                </@param>
                <@param>
                    m aEvent event representing the drag                    
                </@param>
            </javadoc>
            <method name="dragHandle" type="void" line="178">
                <params>
                    <param name="aLocalDimension" type="PDimension"/>
                    <param name="aEvent" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="181">
                Override this method to get notified when the handle stops getting
                  dragged.                
                <@param>
                    m aLocalPoint point in handle coordinate system of the end of the
                      drag                    
                </@param>
                <@param>
                    m aEvent event responsible for ending the drag                    
                </@param>
            </javadoc>
            <method name="endHandleDrag" type="void" line="189">
                <params>
                    <param name="aLocalPoint" type="Point2D"/>
                    <param name="aEvent" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="192">
                Set&apos;s this handle&apos;s parent. Handles respond to changes in their parent&apos;s
                  bounds by invalidating themselves.                
                <@param>
                    m newParent the new parent to assign to this handle                    
                </@param>
            </javadoc>
            <method name="setParent" type="void" line="198">
                <params>
                    <param name="newParent" type="PNode"/>
                </params>
            </method>
            <javadoc line="203">
                Forces the handles to reposition themselves using their associated
                  locator.                
            </javadoc>
            <method name="parentBoundsChanged" type="void" line="207"/>
            <javadoc line="211">
                Force this handle to relocate itself using its locator.                
            </javadoc>
            <method name="relocateHandle" type="void" line="214">
                <scope line="215"/>
                <declaration name="b" type="PBounds" line="219"/>
                <declaration name="aPoint" type="Point2D" line="220"/>
                <scope line="222">
                    <declaration name="located" type="PNode" line="223"/>
                    <declaration name="parent" type="PNode" line="224"/>
                    <scope line="229"/>
                </scope>
                <declaration name="newCenterX" type="double" line="234"/>
                <declaration name="newCenterY" type="double" line="235"/>
                <scope line="237"/>
            </method>
            <javadoc line="244">
                Deserializes a PHandle from the input stream provided. Ensures tha all
                  event handles are correctly installed.                
                <@param>
                    m in stream from which to read the handle                    
                </@param>
                <@throws>
                    s IOException is thrown if the underlying input stream fails                    
                </@throws>
                <@throws>
                    s ClassNotFoundException should never happen but can happen if the
                      classpath gets messed up                    
                </@throws>
            </javadoc>
            <method name="readObject" type="void" line="253">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>