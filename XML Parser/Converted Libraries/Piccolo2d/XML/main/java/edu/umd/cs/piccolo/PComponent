<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo">
        <import package="java.awt.Cursor"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <interface name="PComponent">
            <javadoc line="35">
                Interface that a component needs to implement if it wants to act as a Piccolo
                 * canvas.                
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Lance Good                    
                </@author>
            </javadoc>
            <method name="repaint" type="void" line="44"/>
            <javadoc line="44">
                Called to notify PComponent that given bounds need repainting.                
                <@param>
                    m bounds bounds needing repaint                    
                </@param>
            </javadoc>
            <method name="paintImmediately" type="void" line="51"/>
            <javadoc line="51">
                Sends a repaint notification the repaint manager if PComponent is not
                 * already painting immediately.                
            </javadoc>
            <method name="pushCursor" type="void" line="57"/>
            <javadoc line="57">
                Pushes the given cursor onto the cursor stack and sets the current cursor
                 * to the one provided.                
                <@param>
                    m cursor The cursor to set as the current one and push                    
                </@param>
            </javadoc>
            <method name="popCursor" type="void" line="65"/>
            <javadoc line="65">
                Pops the topmost cursor from the stack and sets it as the current one.                
            </javadoc>
            <method name="setInteracting" type="void" line="70"/>
            <javadoc line="70">
                Sets whether the component is currently being interacted with.                
                <@param>
                    m interacting whether the component is currently being interacted
                     * with                    
                </@param>
            </javadoc>
        </interface>
    </source>