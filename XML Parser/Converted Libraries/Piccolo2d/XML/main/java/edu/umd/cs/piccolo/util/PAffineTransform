<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.util">
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Dimension2D"/>
        <import package="java.awt.geom.NoninvertibleTransformException"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <class name="PAffineTransform" line="37">
            <extends class="AffineTransform"/>
            <javadoc line="37">
                &lt;b&gt;PAffineTransform&lt;/b&gt; is a subclass of AffineTransform that has been
                  extended with convenience methods.
                  &lt;P&gt;                
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="46"/>
            <javadoc line="46">
                Allows for future serialization code to understand versioned binary
                  formats.                
            </javadoc>
            <declaration name="PTS1" type="double[]" line="52"/>
            <javadoc line="52">
                Used internally to speed up computation.                
            </javadoc>
            <declaration name="PTS2" type="double[]" line="55"/>
            <javadoc line="55">
                Used internally to speed up computation.                
            </javadoc>
            <javadoc line="58">
                Constructs a new AffineTransform representing the Identity
                  transformation.                
            </javadoc>
            <method name="PAffineTransform" type="constructor" line="62"/>
            <javadoc line="66">
                Constructs a new AffineTransform from an array of double precision values
                  representing either the 4 non-translation entries or the 6 specifiable
                  entries of the 3x3 transformation matrix. The values are retrieved from
                  the array as { m00 m10 m01 m11 [m02 m12]}.                
                <@param>
                    m flatmatrix the double array containing the values to be set in the
                      new AffineTransform object. The length of the array is assumed
                      to be at least 4. If the length of the array is less than 6,
                      only the first 4 values are taken. If the length of the array
                      is greater than 6, the first 6 values are taken.                    
                </@param>
            </javadoc>
            <method name="PAffineTransform" type="constructor" line="78">
                <params>
                    <param name="flatmatrix" type="double[]"/>
                </params>
            </method>
            <javadoc line="82">
                Constructs a new AffineTransform from an array of floating point values
                  representing either the 4 non-translation entries or the 6 specifiable
                  entries of the 3x3 transformation matrix. The values are retrieved from
                  the array as { m00 m10 m01 m11 [m02 m12]}.                
                <@param>
                    m flatmatrix the float array containing the values to be set in the
                      new AffineTransform object. The length of the array is assumed
                      to be at least 4. If the length of the array is less than 6,
                      only the first 4 values are taken. If the length of the array
                      is greater than 6, the first 6 values are taken.                    
                </@param>
            </javadoc>
            <method name="PAffineTransform" type="constructor" line="94">
                <params>
                    <param name="flatmatrix" type="float[]"/>
                </params>
            </method>
            <javadoc line="98">
                Constructs a new AffineTransform from 6 double precision values
                  representing the 6 specifiable entries of the 3x3 transformation matrix.                
                <@param>
                    m m00 the X coordinate scaling element of the 3x3 matrix                    
                </@param>
                <@param>
                    m m10 the Y coordinate shearing element of the 3x3 matrix                    
                </@param>
                <@param>
                    m m01 the X coordinate shearing element of the 3x3 matrix                    
                </@param>
                <@param>
                    m m11 the Y coordinate scaling element of the 3x3 matrix                    
                </@param>
                <@param>
                    m m02 the X coordinate translation element of the 3x3 matrix                    
                </@param>
                <@param>
                    m m12 the Y coordinate translation element of the 3x3 matrix                    
                </@param>
            </javadoc>
            <method name="PAffineTransform" type="constructor" line="110">
                <params>
                    <param name="m00" type="double"/>
                    <param name="m10" type="double"/>
                    <param name="m01" type="double"/>
                    <param name="m11" type="double"/>
                    <param name="m02" type="double"/>
                    <param name="m12" type="double"/>
                </params>
            </method>
            <javadoc line="114">
                Constructs a new AffineTransform from 6 floating point values
                  representing the 6 specifiable entries of the 3x3 transformation matrix.                
                <@param>
                    m m00 the X coordinate scaling element of the 3x3 matrix                    
                </@param>
                <@param>
                    m m10 the Y coordinate shearing element of the 3x3 matrix                    
                </@param>
                <@param>
                    m m01 the X coordinate shearing element of the 3x3 matrix                    
                </@param>
                <@param>
                    m m11 the Y coordinate scaling element of the 3x3 matrix                    
                </@param>
                <@param>
                    m m02 the X coordinate translation element of the 3x3 matrix                    
                </@param>
                <@param>
                    m m12 the Y coordinate translation element of the 3x3 matrix                    
                </@param>
            </javadoc>
            <method name="PAffineTransform" type="constructor" line="126">
                <params>
                    <param name="m00" type="float"/>
                    <param name="m10" type="float"/>
                    <param name="m01" type="float"/>
                    <param name="m11" type="float"/>
                    <param name="m02" type="float"/>
                    <param name="m12" type="float"/>
                </params>
            </method>
            <javadoc line="130">
                Constructs a new AffineTransform that is a copy of the specified
                  AffineTransform object.                
                <@param>
                    m tx transform to copy                    
                </@param>
            </javadoc>
            <method name="PAffineTransform" type="constructor" line="136">
                <params>
                    <param name="tx" type="AffineTransform"/>
                </params>
            </method>
            <javadoc line="140">
                Scales the transform about the given point by the given scale.                
                <@param>
                    m scale to transform the transform by                    
                </@param>
                <@param>
                    m x x coordinate around which the scale should take place                    
                </@param>
                <@param>
                    m y y coordinate around which the scale should take place                    
                </@param>
            </javadoc>
            <method name="scaleAboutPoint" type="void" line="147">
                <params>
                    <param name="scale" type="double"/>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
            </method>
            <javadoc line="153">
                Returns the scale applied to this transform. Note that it does so by
                  computing the change in length of a unit segment after being passed
                  through the transform. This means that a transform that a transform that
                  doesn&apos;t scale the in the x but doubles the y will be reported as 2.                
                <@return>
                    n the different in length of a unit segment after being
                      transformed.                    
                </@return>
            </javadoc>
            <method name="getScale" type="double" line="162">
                <comment line="163">
                    S1[0] = 0; // x1                    
                </comment>
                <comment line="163">
                    S1[1] = 0; // y1                    
                </comment>
                <comment line="163">
                    S1[2] = 1; // x2                    
                </comment>
                <comment line="163">
                    S1[3] = 0; // y2                    
                </comment>
            </method>
            <javadoc line="171">
                Sets the scale about to the origin of this transform to the scale
                  provided.                
                <@param>
                    m scale The desired resulting scale                    
                </@param>
            </javadoc>
            <method name="setScale" type="void" line="177">
                <params>
                    <param name="scale" type="double"/>
                </params>
                <scope line="178"/>
            </method>
            <javadoc line="185">
                Applies modifies the transform so that it translates by the given offset.                
                <@param>
                    m tx x translation of resulting transform                    
                </@param>
                <@param>
                    m ty y translation of resulting transform                    
                </@param>
            </javadoc>
            <method name="setOffset" type="void" line="191">
                <params>
                    <param name="tx" type="double"/>
                    <param name="ty" type="double"/>
                </params>
            </method>
            <javadoc line="195">
                Returns the rotation applied to this affine transform in radians. The
                  value returned will be between 0 and 2pi.                
                <@return>
                    n rotation in radians                    
                </@return>
            </javadoc>
            <method name="getRotation" type="double" line="201">
                <comment line="202">
                    S1[0] = 0; // x1                    
                </comment>
                <comment line="202">
                    S1[1] = 0; // y1                    
                </comment>
                <comment line="202">
                    S1[2] = 1; // x2                    
                </comment>
                <comment line="202">
                    S1[3] = 0; // y2                    
                </comment>
                <comment line="202">
                    correct for quadrant                    
                </comment>
                <declaration name="dy" type="double" line="209"/>
                <declaration name="l" type="double" line="210"/>
                <declaration name="rotation" type="double" line="211"/>
                <scope line="214">
                    <scope line="215"/>
                </scope>
                <scope line="219"/>
                <scope line="222"/>
            </method>
            <javadoc line="229">
                Set rotation in radians. This is not cumulative.                
                <@param>
                    m theta desired rotation in radians.                    
                </@param>
            </javadoc>
            <method name="setRotation" type="void" line="234">
                <params>
                    <param name="theta" type="double"/>
                </params>
            </method>
            <javadoc line="238">
                Applies the transform to the provided dimension.                
                <@param>
                    m dimSrc source dimension                    
                </@param>
                <@param>
                    m dimDst will be changed to be the transformed dimension, may be
                      null                    
                </@param>
                <@return>
                    n the transformed dimension                    
                </@return>
            </javadoc>
            <method name="transform" type="Dimension2D" line="246">
                <params>
                    <param name="dimSrc" type="Dimension2D"/>
                    <param name="dimDst" type="Dimension2D"/>
                </params>
                <declaration name="result" type="Dimension2D" line="247"/>
                <scope line="248"/>
                <scope line="251"/>
            </method>
            <javadoc line="262">
                Applies the inverse of this transform to the source point if possible.                
                <@since>
                    e 1.3                    
                </@since>
                <@param>
                    m ptSrc point to be transformed                    
                </@param>
                <@param>
                    m ptDst result of transform will be placed in this point                    
                </@param>
                <@return>
                    n the transformed point                    
                </@return>
            </javadoc>
            <method name="inverseTransform" type="Point2D" line="271">
                <params>
                    <param name="ptSrc" type="Point2D"/>
                    <param name="ptDst" type="Point2D"/>
                </params>
                <scope line="272"/>
                <scope line="275"/>
            </method>
            <javadoc line="280">
                Applies the inverse of this transform to the source dimension if
                  possible.                
                <@param>
                    m dimSrc dimension to be transformed                    
                </@param>
                <@param>
                    m dimDst result of transform will be placed in this dimension                    
                </@param>
                <@return>
                    n the transformed dimension                    
                </@return>
            </javadoc>
            <method name="inverseTransform" type="Dimension2D" line="289">
                <params>
                    <param name="dimSrc" type="Dimension2D"/>
                    <param name="dimDst" type="Dimension2D"/>
                </params>
                <declaration name="result" type="Dimension2D" line="290"/>
                <scope line="291"/>
                <scope line="294"/>
                <declaration name="width" type="double" line="298"/>
                <declaration name="height" type="double" line="299"/>
                <declaration name="m00" type="double" line="300"/>
                <declaration name="m11" type="double" line="301"/>
                <declaration name="m01" type="double" line="302"/>
                <declaration name="m10" type="double" line="303"/>
                <declaration name="det" type="double" line="304"/>
                <scope line="306"/>
                <scope line="309"/>
            </method>
            <javadoc line="316">
                Applies this transform to the source rectangle and stores the result in
                  rectDst.                
                <@param>
                    m rectSrc rectangle to be transformed                    
                </@param>
                <@param>
                    m rectDst result of transform will be placed in this rectangle                    
                </@param>
                <@return>
                    n the transformed rectangle                    
                </@return>
            </javadoc>
            <method name="transform" type="Rectangle2D" line="325">
                <params>
                    <param name="rectSrc" type="Rectangle2D"/>
                    <param name="rectDst" type="Rectangle2D"/>
                </params>
                <declaration name="result" type="Rectangle2D" line="326"/>
                <scope line="327"/>
                <scope line="330"/>
                <scope line="334">
                    <scope line="336"/>
                </scope>
                <declaration name="scale" type="double" line="342"/>
                <scope line="346"/>
                <declaration name="pts" type="double[]" line="370"/>
            </method>
            <javadoc line="379">
                Applies the inverse of this transform to the source rectangle and stores
                  the result in rectDst.                
                <@param>
                    m rectSrc rectangle to be transformed                    
                </@param>
                <@param>
                    m rectDst result of transform will be placed in this rectangle                    
                </@param>
                <@return>
                    n the transformed rectangle                    
                </@return>
            </javadoc>
            <method name="inverseTransform" type="Rectangle2D" line="388">
                <params>
                    <param name="rectSrc" type="Rectangle2D"/>
                    <param name="rectDst" type="Rectangle2D"/>
                </params>
                <declaration name="result" type="Rectangle2D" line="389"/>
                <scope line="390"/>
                <scope line="393"/>
                <scope line="397">
                    <scope line="399"/>
                </scope>
                <declaration name="scale" type="double" line="405"/>
                <scope line="409"/>
                <scope line="421"/>
                <scope line="432"/>
                <declaration name="pts" type="double[]" line="440"/>
                <scope line="441"/>
                <scope line="444"/>
            </method>
            <javadoc line="454">
                Builds an array of coordinates from an source rectangle.                
                <@param>
                    m aRectangle rectangle from which points coordinates will be
                      extracted                    
                </@param>
                <@return>
                    n coordinate array                    
                </@return>
            </javadoc>
            <method name="rectToArray" type="double[]" line="462">
                <params>
                    <param name="aRectangle" type="Rectangle2D"/>
                </params>
            </method>
            <javadoc line="474">
                Creates a rectangle from an array of coordinates.                
                <@param>
                    m aRectangle rectangle into which coordinates will be stored                    
                </@param>
                <@param>
                    m pts coordinate source                    
                </@param>
            </javadoc>
            <method name="rectFromArray" type="void" line="480">
                <params>
                    <param name="aRectangle" type="Rectangle2D"/>
                    <param name="pts" type="double[]"/>
                </params>
                <declaration name="minX" type="double" line="481"/>
                <declaration name="minY" type="double" line="482"/>
                <declaration name="maxX" type="double" line="483"/>
                <declaration name="maxY" type="double" line="484"/>
                <declaration name="x" type="double" line="486"/>
                <declaration name="y" type="double" line="487"/>
                <scope line="489">
                    <scope line="493"/>
                    <scope line="496"/>
                    <scope line="499"/>
                    <scope line="502"/>
                </scope>
            </method>
        </class>
    </source>