<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.util">
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Stroke"/>
        <import package="java.awt.geom.GeneralPath"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Iterator"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PLayer"/>
        <import package="edu.umd.cs.piccolo.PRoot"/>
        <class name="PUtil" line="48">
            <javadoc line="48">
                &lt;b&gt;PUtil&lt;/b&gt; util methods for the Piccolo framework.
                  &lt;P&gt;                
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="DEFAULT_ACTIVITY_STEP_RATE" type="long" line="56"/>
            <javadoc line="56">
                PActivities are broken into steps, this is how many milliseconds should
                  pass between steps.                
            </javadoc>
            <declaration name="ACTIVITY_SCHEDULER_FRAME_DELAY" type="int" line="62"/>
            <javadoc line="62">
                Rate in milliseconds at which the activity timer will get invoked.                
            </javadoc>
            <declaration name="NULL_ITERATOR" type="Iterator" line="65"/>
            <javadoc line="65">
                An iterator that iterates over an empty collection.                
            </javadoc>
            <declaration name="PATH_TERMINATOR" type="int" line="68"/>
            <javadoc line="68">
                Used when persisting paths to an object stream. Used to mark the end of
                  the path.                
            </javadoc>
            <declaration name="NULL_ENUMERATION" type="Enumeration" line="74"/>
            <javadoc line="74">
                A utility enumeration with no elements.                
            </javadoc>
            <anonymous_class line="75">
                <method name="hasMoreElements" type="boolean" line="76"/>
                <method name="nextElement" type="Object" line="80"/>
            </anonymous_class>
            <declaration name="NULL_OUTPUT_STREAM" type="OutputStream" line="85"/>
            <javadoc line="85">
                @deprecated This has been moved into a private static class of
                  PObjectOutputStream                
            </javadoc>
            <anonymous_class line="89">
                <method name="close" type="void" line="90"/>
                <method name="flush" type="void" line="93"/>
                <method name="write" type="void" line="96">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                </method>
                <method name="write" type="void" line="99">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="write" type="void" line="102">
                    <params>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <javadoc line="106">
                Creates the simplest possible scene graph. 1 Camera, 1 Layer, 1 Root                
                <@return>
                    n a basic scene with 1 camera, layer and root                    
                </@return>
            </javadoc>
            <method name="createBasicScenegraph" type="PCamera" line="111">
                <declaration name="root" type="PRoot" line="112"/>
                <declaration name="layer" type="PLayer" line="113"/>
                <declaration name="camera" type="PCamera" line="114"/>
            </method>
            <javadoc line="123">
                Serializes the given stroke object to the object output stream provided.
                  By default strokes are not serializable. This method solves that problem.                
                <@param>
                    m stroke stroke to be serialize                    
                </@param>
                <@param>
                    m out stream to which the stroke is to be serialized                    
                </@param>
                <@throws>
                    s IOException can occur if exception occurs with underlying output
                      stream                    
                </@throws>
            </javadoc>
            <method name="writeStroke" type="void" line="132">
                <params>
                    <param name="stroke" type="Stroke"/>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <scope line="133"/>
                <scope line="138"/>
                <scope line="143"/>
            </method>
            <method name="writeBasicStroke" type="void" line="149">
                <params>
                    <param name="basicStroke" type="BasicStroke"/>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <declaration name="dash" type="float[]" line="150"/>
                <scope line="152"/>
                <scope line="155">
                    <scope line="157"/>
                </scope>
            </method>
            <javadoc line="169">
                Reconstitutes a stroke from the provided Object Input Stream. According
                  to the scheme found in writeStroke. By default strokes are not
                  serializable.                
                <@param>
                    m in stream from which Stroke is to be read                    
                </@param>
                <@return>
                    n a stroke object                    
                </@return>
                <@throws>
                    s IOException occurs if an exception occurs reading from in stream                    
                </@throws>
                <@throws>
                    s ClassNotFoundException should never happen, but can if somehow
                      the stroke class is not on the classpath                    
                </@throws>
            </javadoc>
            <method name="readStroke" type="Stroke" line="180">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <declaration name="wroteStroke" type="boolean" line="181"/>
                <scope line="182"/>
                <declaration name="serializedStroke" type="boolean" line="186"/>
                <scope line="187"/>
            </method>
            <method name="readBasicStroke" type="Stroke" line="194">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <declaration name="dash" type="float[]" line="195"/>
                <declaration name="dashLength" type="int" line="196"/>
                <scope line="198">
                    <scope line="200"/>
                </scope>
                <declaration name="lineWidth" type="float" line="205"/>
                <declaration name="endCap" type="int" line="206"/>
                <declaration name="lineJoin" type="int" line="207"/>
                <declaration name="miterLimit" type="float" line="208"/>
                <declaration name="dashPhase" type="float" line="209"/>
            </method>
            <javadoc line="214">
                Reads a path from the provided inputStream in accordance with the
                  serialization policy defined in writePath.                
                <@param>
                    m in stream from which to read the path.                    
                </@param>
                <@return>
                    n reconstituted path                    
                </@return>
                <@throws>
                    s IOException if an unknown path type is read from the stream                    
                </@throws>
                <@throws>
                    s ClassNotFoundException should never happen, but can if somehow
                      the classpath is seriously messed up                    
                </@throws>
            </javadoc>
            <method name="readPath" type="GeneralPath" line="224">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <declaration name="path" type="GeneralPath" line="225"/>
                <scope line="227">
                    <declaration name="segType" type="int" line="228"/>
                </scope>
            </method>
            <javadoc line="261">
                Serializes the given path to the provided Object Output Stream.                
                <@param>
                    m path path to be serialized                    
                </@param>
                <@param>
                    m out stream to which the path should be serialized                    
                </@param>
                <@throws>
                    s IOException if unknown path segment type is encountered, or an
                      exception occurs writing to the output stream                    
                </@throws>
            </javadoc>
            <method name="writePath" type="void" line="269">
                <params>
                    <param name="path" type="GeneralPath"/>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <declaration name="i" type="PathIterator" line="270"/>
                <declaration name="data" type="float[]" line="271"/>
                <scope line="273"/>
            </method>
        </class>
    </source>