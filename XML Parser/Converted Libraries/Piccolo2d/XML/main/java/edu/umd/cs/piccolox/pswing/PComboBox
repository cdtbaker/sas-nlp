<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.pswing">
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.Vector"/>
        <import package="javax.swing.ComboBoxModel"/>
        <import package="javax.swing.JComboBox"/>
        <import package="javax.swing.plaf.basic.BasicComboBoxUI"/>
        <import package="javax.swing.plaf.basic.BasicComboPopup"/>
        <import package="javax.swing.plaf.basic.ComboPopup"/>
        <class name="PComboBox" line="42">
            <extends class="JComboBox"/>
            <implements interface="Serializable"/>
            <javadoc line="42">
                The &lt;b&gt;PComboBox&lt;/b&gt; is used instead of a JComboBox in a Piccolo scene graph.
                  This PComboBox won&apos;t work properly if it is located in an abnormal hierarchy
                  of Cameras. Support is provided for only one (or zero) view transforms.
                  &lt;p&gt;
                  A ComboBox for use in Piccolo. This still has an associated JPopupMenu (which
                  is always potentially heavyweight depending on component location relative to
                  containing window borders.) However, this ComboBox places the PopupMenu
                  component of the ComboBox in the appropriate position relative to the
                  permanent part of the ComboBox. The PopupMenu is never transformed.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This class was not designed for subclassing. If different behavior is
                  required, it seems more appropriate to subclass JComboBox directly using this
                  class as a model.
                  &lt;/p&gt;
                  &lt;p&gt;
                  NOTE: There is currently a known bug, namely, if the ComboBox receives focus
                  through &apos;tab&apos; focus traversal and the keyboard is used to interact with the
                  ComboBox, there may be unexpected results.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;b&gt;Warning:&lt;/b&gt; Serialized objects of this class will not be compatible with
                  future Piccolo releases. The current serialization support is appropriate for
                  short term storage or RMI between applications running the same version of
                  Piccolo. A future release of Piccolo will provide support for long term
                  persistence.
                  &lt;/p&gt;                
                <@author>
                    r Lance Good                    
                </@author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="75"/>
            <javadoc line="75">
                                
            </javadoc>
            <declaration name="pSwing" type="PSwing" line="79"/>
            <declaration name="canvas" type="PSwingCanvas" line="80"/>
            <javadoc line="82">
                Creates a PComboBox that takes its items from an existing ComboBoxModel.                
                <@param>
                    m model The ComboBoxModel from which the list will be created                    
                </@param>
            </javadoc>
            <method name="PComboBox" type="constructor" line="87">
                <params>
                    <param name="model" type="ComboBoxModel"/>
                </params>
            </method>
            <javadoc line="92">
                Creates a PComboBox that contains the elements in the specified array.                
                <@param>
                    m items The items to populate the PComboBox list                    
                </@param>
            </javadoc>
            <method name="PComboBox" type="constructor" line="97">
                <params>
                    <param name="items" type="Object[]"/>
                </params>
            </method>
            <javadoc line="102">
                Creates a PComboBox that contains the elements in the specified Vector.                
                <@param>
                    m items The items to populate the PComboBox list                    
                </@param>
            </javadoc>
            <method name="PComboBox" type="constructor" line="107">
                <params>
                    <param name="items" type="Vector"/>
                </params>
            </method>
            <javadoc line="112">
                Create an empty PComboBox.                
            </javadoc>
            <method name="PComboBox" type="constructor" line="115"/>
            <javadoc line="120">
                Substitute our UI for the default.                
            </javadoc>
            <method name="init" type="void" line="123"/>
            <javadoc line="127">
                Clients must set the PSwing and PSwingCanvas environment for this
                  PComboBox to work properly.                
                <@param>
                    m pSwingNode node that this PComboBox is attached to                    
                </@param>
                <@param>
                    m canvasEnvirnoment canvas on which the pSwing node is embedded                    
                </@param>
            </javadoc>
            <method name="setEnvironment" type="void" line="134">
                <params>
                    <param name="pSwingNode" type="PSwing"/>
                    <param name="canvasEnvirnoment" type="PSwingCanvas"/>
                </params>
            </method>
            <class name="PBasicComboBoxUI" line="139">
                <extends class="BasicComboBoxUI"/>
                <javadoc line="139">
                    The substitute look and feel - used to capture the mouse events on the
                      arrowButton and the component itself and to create our PopupMenu rather
                      than the default.                    
                </javadoc>
                <javadoc line="146">
                    Create our Popup instead of swing&apos;s default.                    
                    <@return>
                        n a new ComboPopup                        
                    </@return>
                </javadoc>
                <method name="createPopup" type="ComboPopup" line="151">
                    <declaration name="popup" type="PBasicComboPopup" line="152"/>
                </method>
            </class>
            <class name="PBasicComboPopup" line="158">
                <extends class="BasicComboPopup"/>
                <javadoc line="158">
                    The substitute ComboPopupMenu that places itself correctly in Piccolo2d.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="162"/>
                <javadoc line="164">
                    Creates a PBasicComboPopup that will position itself correctly in
                      relation to the provided JComboBox.                    
                    <@param>
                        m combo The associated ComboBox                        
                    </@param>
                </javadoc>
                <method name="PBasicComboPopup" type="constructor" line="170">
                    <params>
                        <param name="combo" type="JComboBox"/>
                    </params>
                </method>
                <javadoc line="174">
                    Computes the bounds for the Popup in Piccolo2D if a PMouseEvent has
                      been received. Otherwise, it uses the default algorithm for placing
                      the popup.                    
                    <@param>
                        m px corresponds to the x coordinate of the popup                        
                    </@param>
                    <@param>
                        m py corresponds to the y coordinate of the popup                        
                    </@param>
                    <@param>
                        m pw corresponds to the width of the popup                        
                    </@param>
                    <@param>
                        m ph corresponds to the height of the popup                        
                    </@param>
                    <@return>
                        n The bounds for the PopupMenu                        
                    </@return>
                </javadoc>
                <method name="computePopupBounds" type="Rectangle" line="185">
                    <params>
                        <param name="px" type="int"/>
                        <param name="py" type="int"/>
                        <param name="pw" type="int"/>
                        <param name="ph" type="int"/>
                    </params>
                    <declaration name="r" type="Rectangle2D" line="186"/>
                    <declaration name="sup" type="Rectangle" line="187"/>
                </method>
            </class>
            <method name="getNodeBoundsInCanvas" type="Rectangle2D" line="192">
                <scope line="193"/>
                <declaration name="r1c" type="Rectangle2D" line="197"/>
            </method>
            <javadoc line="204">
                Returns the associated PSwing node.                
                <@return>
                    n associated PSwing node                    
                </@return>
            </javadoc>
            <method name="getPSwing" type="PSwing" line="209"/>
            <javadoc line="213">
                Returns the canvas on which the PSwing node is embedded.                
                <@return>
                    n canvas on which the PSwing node is embedded                    
                </@return>
            </javadoc>
            <method name="getCanvas" type="PSwingCanvas" line="218"/>
        </class>
    </source>