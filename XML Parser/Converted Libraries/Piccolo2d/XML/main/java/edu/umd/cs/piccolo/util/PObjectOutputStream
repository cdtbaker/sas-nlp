<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.util">
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.HashMap"/>
        <class name="PObjectOutputStream" extends="ObjectOutputStream" line="37">
            <javadoc line="37">
                &lt;b&gt;PObjectOutputStream&lt;/b&gt; is an extension of ObjectOutputStream to handle
                 * optional elements. This is similar to the concept of Java&apos;s
                 * &quot;weak references&quot;, but applied to object serialization rather than garbage
                 * collection. Here, PObjectOutputStream provides a method,
                 * &lt;code&gt;writeConditionalObject&lt;/code&gt;, which only serializes the specified
                 * object to the stream if there is a strong reference (if it has been written
                 * somewhere else using writeObject()) to that object elsewhere in the stream.
                 * &lt;p&gt;
                 * To discover strong references to objects, PObjectOutputStream uses a
                 * two-phase writing process. First, a &quot;discovery&quot; phase is used to find out
                 * what objects are about to be serialized. This works by effectively
                 * serializing the object graph to /dev/null, recording which objects are
                 * unconditionally written using the standard writeObject method. Then, in the
                 * second &quot;write&quot; phase, ObjectOutputStream actually serializes the data to the
                 * output stream. During this phase, calls to writeConditionalObject() will only
                 * write the specified object if the object was found to be serialized during
                 * the discovery stage. If the object was not recorded during the discovery
                 * stage, a an optional null (the default) is unconditionally written in place
                 * of the object. To skip writting out the null use
                 * &lt;code&gt;writeConditionalObject(object, false)&lt;/code&gt;
                 * &lt;p&gt;
                 * By careful implementation of readObject and writeObject methods, streams
                 * serialized using PObjectOutputStream can be deserialized using the standard
                 * ObjectInputStream.
                 * &lt;p&gt;                
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Jon Meyer                    
                </@author>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="writingRoot" type="boolean" line="70"/>
            <declaration name="unconditionallyWritten" type="HashMap" line="71"/>
            <javadoc line="73">
                Transform the given object into an array of bytes.                
                <@param>
                    m object the object to be transformed                    
                </@param>
                <@return>
                    n array of bytes representing the given object                    
                </@return>
                <@throws>
                    s IOException when serialization system throws one                    
                </@throws>
            </javadoc>
            <method name="toByteArray" type="byte[]" line="80">
                <declaration name="out" type="ByteArrayOutputStream" line="81"/>
                <declaration name="zout" type="PObjectOutputStream" line="82"/>
            </method>
            <javadoc line="87">
                Constructs a PObjectOutputStream that wraps the provided OutputStream.                
                <@param>
                    m out underlying outputstream that will receive the serialized
                     * objects                    
                </@param>
                <@throws>
                    s IOException when underlying subsystem throws one                    
                </@throws>
            </javadoc>
            <method name="PObjectOutputStream" type="constructor" line="95"/>
            <javadoc line="100">
                Writes the provided object to the underlying stream like an ordination
                 * ObjectOutputStream except that it does not record duplicates at all.                
                <@param>
                    m object object to be serialized                    
                </@param>
                <@throws>
                    s IOException when underlying subsystem throws one                    
                </@throws>
            </javadoc>
            <method name="writeObjectTree" type="void" line="108">
                <comment line="109">
                    cordUnconditionallyWritten(object); // record pass                    
                </comment>
                <comment line="109">
                    iteObject(object); // write pass                    
                </comment>
            </method>
            <javadoc line="115">
                Writes the given object, but only if it was not in the object tree
                 * multiple times.                
                <@param>
                    m object object to write to the stream.                    
                </@param>
                <@throws>
                    s IOException when underlying subsystem throws one                    
                </@throws>
            </javadoc>
            <method name="writeConditionalObject" type="void" line="122">
                <scope line="123"/>
                <scope line="128"/>
                <scope line="131"/>
            </method>
            <javadoc line="136">
                Resets the ObjectOutputStream clearing any memory about objects already
                 * being written while it&apos;s at it.                
                <@throws>
                    s IOException when underlying subsystem throws one                    
                </@throws>
            </javadoc>
            <method name="reset" type="void" line="142"/>
            <javadoc line="147">
                Performs a scan of objects that can be serialized once.                
                <@param>
                    m aRoot Object from which to start the scan                    
                </@param>
                <@throws>
                    s IOException when serialization fails                    
                </@throws>
            </javadoc>
            <method name="recordUnconditionallyWritten" type="void" line="153">
                <class name="ZMarkObjectOutputStream" extends="PObjectOutputStream" line="154">
                    <method name="ZMarkObjectOutputStream" type="constructor" line="155"/>
                    <method name="replaceObject" type="Object" line="160"/>
                    <method name="writeConditionalObject" type="void" line="165"/>
                </class>
            </method>
            <declaration name="NULL_OUTPUT_STREAM" type="OutputStream" line="171"/>
            <anonymous_class line="171">
                <method name="close" type="void" line="172"/>
                <method name="flush" type="void" line="175"/>
                <method name="write" type="void" line="178"/>
                <method name="write" type="void" line="181"/>
                <method name="write" type="void" line="184"/>
            </anonymous_class>
        </class>
    </source>