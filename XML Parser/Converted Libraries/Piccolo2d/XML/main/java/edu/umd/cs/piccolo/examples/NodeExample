<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.examples">
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.geom.Ellipse2D"/>
        <import package="java.awt.geom.Line2D"/>
        <import package="edu.umd.cs.piccolo.PCanvas"/>
        <import package="edu.umd.cs.piccolo.PLayer"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.event.PBasicInputEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PDragEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.nodes.PImage"/>
        <import package="edu.umd.cs.piccolo.nodes.PPath"/>
        <import package="edu.umd.cs.piccolo.nodes.PText"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolox.PFrame"/>
        <class name="NodeExample" line="50">
            <extends class="PFrame"/>
            <comment line="51">
                This method demonstrates the kinds of things that can be done with any                
            </comment>
            <comment line="51">
                node.                
            </comment>
            <comment line="51">
                So far we have just been using PNode, but of course PNode has many                
            </comment>
            <comment line="51">
                subclasses that you can try out to.                
            </comment>
            <comment line="51">
                Another way to create nodes is to customize other nodes that already                
            </comment>
            <comment line="51">
                exist. Here we create an ellipse, except when you press the mouse on                
            </comment>
            <comment line="51">
                this ellipse it turns into a square, when you release the mouse it                
            </comment>
            <comment line="51">
                goes back to being an ellipse.                
            </comment>
            <comment line="51">
                Here a new &quot;face&quot; node is created. But instead of drawing the face                
            </comment>
            <comment line="51">
                directly                
            </comment>
            <comment line="51">
                using Graphics2D we compose the face from other nodes.                
            </comment>
            <comment line="51">
                Here a completely new kind of node, a grid node&quot; is created. We do                
            </comment>
            <comment line="51">
                all the drawing ourselves here instead of passing the work off to                
            </comment>
            <comment line="51">
                other parts of the framework.                
            </comment>
            <javadoc line="50">
                This example shows how to create and manipulate nodes.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="55"/>
            <javadoc line="55">
                                
            </javadoc>
            <declaration name="fIsPressed" type="boolean" line="59"/>
            <method name="NodeExample" type="constructor" line="61"/>
            <method name="NodeExample" type="constructor" line="65">
                <params>
                    <param name="aCanvas" type="PCanvas"/>
                </params>
            </method>
            <method name="initialize" type="void" line="69">
                <comment line="70">
                    Last of all lets remove the default pan event handler, and add a                    
                </comment>
                <comment line="70">
                    drag event handler instead. This way you will be able to drag the                    
                </comment>
                <comment line="70">
                    nodes around with the mouse.                    
                </comment>
            </method>
            <method name="nodeDemo" type="void" line="85">
                <comment line="86">
                    A node needs to be a descendent of the root to be displayed on the                    
                </comment>
                <comment line="86">
                    screen.                    
                </comment>
                <comment line="86">
                    The default color for a node is blue, but you can change that with                    
                </comment>
                <comment line="86">
                    the setPaint method.                    
                </comment>
                <comment line="86">
                    A node can have children nodes added to it.                    
                </comment>
                <comment line="86">
                    The base bounds of a node is easy to change. Note that changing the                    
                </comment>
                <comment line="86">
                    base                    
                </comment>
                <comment line="86">
                    bounds of a node will not change it&apos;s children.                    
                </comment>
                <comment line="86">
                    Each node has a transform that can be used to transform the node, and                    
                </comment>
                <comment line="86">
                    all its children on the screen.                    
                </comment>
                <comment line="86">
                    The transparency of any node can be set, this transparency will be                    
                </comment>
                <comment line="86">
                    applied to any of the nodes children as well.                    
                </comment>
                <comment line="86">
                    Its easy to copy nodes.                    
                </comment>
                <comment line="86">
                    Make is so that the copies children are not pickable. For this                    
                </comment>
                <comment line="86">
                    example                    
                </comment>
                <comment line="86">
                    that means you will not be able to grab the child and remove it from                    
                </comment>
                <comment line="86">
                    its parent.                    
                </comment>
                <comment line="86">
                    Change the look of the copy                    
                </comment>
                <comment line="86">
                    Let&apos;s add the copy to the root, and translate it so that it does not                    
                </comment>
                <comment line="86">
                    cover the original node.                    
                </comment>
                <declaration name="layer" type="PLayer" line="86"/>
                <declaration name="aNode" type="PNode" line="87"/>
                <declaration name="aCopy" type="PNode" line="116"/>
            </method>
            <method name="createNodeUsingExistingClasses" type="void" line="137">
                <comment line="138">
                    Here we create an image node that displays a thumbnail                    
                </comment>
                <comment line="138">
                    image of the root node. Note that you can easily get a thumbnail                    
                </comment>
                <comment line="138">
                    of any node by using PNode.toImage().                    
                </comment>
                <declaration name="layer" type="PLayer" line="138"/>
                <declaration name="image" type="PImage" line="146"/>
            </method>
            <method name="subclassExistingClasses" type="void" line="154">
                <anonymous_class line="155">
                    <declaration name="serialVersionUID" type="long" line="157"/>
                    <javadoc line="157">
                                                
                    </javadoc>
                    <method name="paint" type="void" line="162">
                        <params>
                            <param name="aPaintContext" type="PPaintContext"/>
                        </params>
                        <scope line="163">
                            <declaration name="g2" type="Graphics2D" line="165"/>
                        </scope>
                        <scope line="169"/>
                    </method>
                </anonymous_class>
                <declaration name="n" type="PNode" line="155"/>
                <anonymous_class line="176">
                    <method name="mousePressed" type="void" line="177">
                        <params>
                            <param name="aEvent" type="PInputEvent"/>
                        </params>
                        <comment line="178">
                            invalidatePaint(); // this tells the framework that the node                            
                        </comment>
                        <comment line="178">
                            needs to be redisplayed.                            
                        </comment>
                    </method>
                    <method name="mouseReleased" type="void" line="184">
                        <params>
                            <param name="aEvent" type="PInputEvent"/>
                        </params>
                        <comment line="185">
                            invalidatePaint(); // this tells the framework that the node                            
                        </comment>
                        <comment line="185">
                            needs to be redisplayed.                            
                        </comment>
                    </method>
                </anonymous_class>
            </method>
            <method name="composeOtherNodes" type="void" line="199">
                <comment line="200">
                    create parts for the face.                    
                </comment>
                <comment line="200">
                    add the face parts                    
                </comment>
                <comment line="200">
                    don&apos;t want anyone grabbing out our eye&apos;s.                    
                </comment>
                <comment line="200">
                    position the face parts.                    
                </comment>
                <comment line="200">
                    set the face bounds so that it neatly contains the face parts.                    
                </comment>
                <comment line="200">
                    opps it to small, so scale it up.                    
                </comment>
                <declaration name="myCompositeFace" type="PNode" line="200"/>
                <declaration name="eye1" type="PNode" line="203"/>
                <declaration name="eye2" type="PNode" line="205"/>
                <declaration name="mouth" type="PNode" line="206"/>
                <declaration name="b" type="PBounds" line="222"/>
            </method>
            <method name="createCustomNode" type="void" line="234">
                <anonymous_class line="235">
                    <declaration name="serialVersionUID" type="long" line="236"/>
                    <javadoc line="236">
                                                
                    </javadoc>
                    <method name="paint" type="void" line="241">
                        <params>
                            <param name="aPaintContext" type="PPaintContext"/>
                        </params>
                        <comment line="242">
                            draw vertical lines                            
                        </comment>
                        <declaration name="bx" type="double" line="242"/>
                        <declaration name="by" type="double" line="243"/>
                        <declaration name="rightBorder" type="double" line="244"/>
                        <declaration name="bottomBorder" type="double" line="245"/>
                        <declaration name="line" type="Line2D" line="247"/>
                        <declaration name="g2" type="Graphics2D" line="248"/>
                        <scope line="254"/>
                        <scope line="259"/>
                    </method>
                </anonymous_class>
                <declaration name="n" type="PNode" line="235"/>
            </method>
            <method name="main" type="void" line="270">
                <params>
                    <param name="args" type="String[]"/>
                </params>
            </method>
        </class>
    </source>