<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.util">
        <import package="java.awt.Shape"/>
        <import package="java.awt.Stroke"/>
        <import package="edu.umd.cs.piccolo.util.PDebug"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolo.util.PPickPath"/>
        <class name="PSemanticStroke" line="37">
            <implements interface="Stroke"/>
            <javadoc line="37">
                @see edu.umd.cs.piccolo.nodes.PPath                
                <@see>
                    e Stroke                    
                </@see>
                <@version>
                    n 1.3                    
                </@version>
                <@author>
                    r Marcus Rohrmoser                    
                </@author>
            </javadoc>
            <declaration name="THRESHOLD" type="double" line="45"/>
            <declaration name="recentScale" type="float" line="47"/>
            <declaration name="recentStroke" type="Stroke" line="48"/>
            <declaration name="stroke" type="Stroke" line="49"/>
            <method name="PSemanticStroke" type="constructor" line="51"/>
            <javadoc line="57">
                Ask {@link #getActiveScale()}, call {@link #newStroke(float)} if
                 * necessary and delegate to {@link Stroke#createStrokedShape(Shape)}.                
                <@param>
                    m s                    
                </@param>
            </javadoc>
            <method name="createStrokedShape" type="Shape" line="63">
                <declaration name="currentScale" type="float" line="64"/>
                <scope line="65"/>
            </method>
            <javadoc line="72">
                Returns true if this stroke is equivalent to the object provided.                
                <@param>
                    m obj Object being tested                    
                </@param>
                <@return>
                    n true if object is equivalent                    
                </@return>
            </javadoc>
            <method name="equals" type="boolean" line="78">
                <scope line="79"/>
                <scope line="82"/>
                <scope line="85"/>
                <declaration name="other" type="PSemanticStroke" line="88"/>
                <scope line="89">
                    <scope line="90"/>
                </scope>
                <scope line="94"/>
            </method>
            <javadoc line="100">
                Detect the current scale. Made protected to enable custom
                 * re-implementations.                
            </javadoc>
            <method name="getActiveScale" type="float" line="104">
                <comment line="105">
                    FIXME Honestly I don&apos;t understand this distinction - shouldn&apos;t it                    
                </comment>
                <comment line="105">
                    always be PPaintContext.CURRENT_PAINT_CONTEXT regardless of the                    
                </comment>
                <comment line="105">
                    debugging flag?                    
                </comment>
                <scope line="108">
                    <scope line="109"/>
                </scope>
                <scope line="113">
                    <scope line="114"/>
                </scope>
            </method>
            <method name="hashCode" type="int" line="121">
                <declaration name="prime" type="int" line="122"/>
                <declaration name="result" type="int" line="123"/>
                <scope line="125"/>
            </method>
            <method name="newStroke" type="Stroke" line="132"/>
            <javadoc line="132">
                Factory to create a new internal stroke delegate. Made protected to
                 * enable custom re-implementations.                
            </javadoc>
            <method name="toString" type="String" line="138"/>
        </class>
    </source>