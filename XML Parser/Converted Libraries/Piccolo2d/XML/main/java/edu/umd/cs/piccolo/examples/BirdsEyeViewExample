<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.examples">
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.geom.Ellipse2D"/>
        <import package="java.awt.geom.Line2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="javax.swing.JDialog"/>
        <import package="edu.umd.cs.piccolo.PCanvas"/>
        <import package="edu.umd.cs.piccolo.PLayer"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.event.PBasicInputEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PDragEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PDragSequenceEventHandler"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.nodes.PImage"/>
        <import package="edu.umd.cs.piccolo.nodes.PPath"/>
        <import package="edu.umd.cs.piccolo.nodes.PText"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PDimension"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolox.PFrame"/>
        <import package="edu.umd.cs.piccolox.nodes.P3DRect"/>
        <class name="BirdsEyeViewExample" extends="PFrame" line="58">
            <comment line="59">
                This method demonstrates the kinds of things that can be done with any                
            </comment>
            <comment line="59">
                node.                
            </comment>
            <comment line="59">
                So far we have just been using PNode, but of course PNode has many                
            </comment>
            <comment line="59">
                subclasses that you can try out to.                
            </comment>
            <comment line="59">
                Another way to create nodes is to customize other nodes that already                
            </comment>
            <comment line="59">
                exist. Here we create an ellipse, except when you press the mouse on                
            </comment>
            <comment line="59">
                this ellipse it turns into a square, when you release the mouse it                
            </comment>
            <comment line="59">
                goes back to being an ellipse.                
            </comment>
            <comment line="59">
                Here a new &quot;face&quot; node is created. But instead of drawing the face                
            </comment>
            <comment line="59">
                directly using Graphics2D we compose the face from other nodes.                
            </comment>
            <comment line="59">
                Here a completely new kind of node, a grid node&quot; is created. We do                
            </comment>
            <comment line="59">
                all the drawing ourselves here instead of passing the work off to                
            </comment>
            <comment line="59">
                other parts of the framework.                
            </comment>
            <comment line="59">
                // class BirdsEyeView                
            </comment>
            <javadoc line="58">
                This example, contributed by Rowan Christmas, shows how to create a birds-eye
                 * view window.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="64"/>
            <javadoc line="64">
                                
            </javadoc>
            <declaration name="fIsPressed" type="boolean" line="68"/>
            <method name="BirdsEyeViewExample" type="constructor" line="70"/>
            <method name="BirdsEyeViewExample" type="constructor" line="74"/>
            <method name="initialize" type="void" line="78">
                <comment line="79">
                    Last of all lets remove the default pan event handler, and add a                    
                </comment>
                <comment line="79">
                    drag event handler instead. This way you will be able to drag the                    
                </comment>
                <comment line="79">
                    nodes around with the mouse.                    
                </comment>
                <comment line="79">
                    this will create the actual BirdsEyeView and put it in a JDialog                    
                </comment>
                <declaration name="bev" type="BirdsEyeView" line="93"/>
                <declaration name="bird" type="JDialog" line="95"/>
            </method>
            <method name="nodeDemo" type="void" line="105">
                <comment line="106">
                    A node needs to be a descendent of the root to be displayed on the                    
                </comment>
                <comment line="106">
                    screen.                    
                </comment>
                <comment line="106">
                    The default color for a node is blue, but you can change that with                    
                </comment>
                <comment line="106">
                    the setPaint method.                    
                </comment>
                <comment line="106">
                    A node can have children nodes added to it.                    
                </comment>
                <comment line="106">
                    The base bounds of a node is easy to change. Note that changing the                    
                </comment>
                <comment line="106">
                    base bounds of a node will not change it&apos;s children.                    
                </comment>
                <comment line="106">
                    Each node has a transform that can be used to transform the node, and                    
                </comment>
                <comment line="106">
                    all its children on the screen.                    
                </comment>
                <comment line="106">
                    The transparency of any node can be set, this transparency will be                    
                </comment>
                <comment line="106">
                    applied to any of the nodes children as well.                    
                </comment>
                <comment line="106">
                    Its easy to copy nodes.                    
                </comment>
                <comment line="106">
                    Make is so that the copies children are not pickable. For this                    
                </comment>
                <comment line="106">
                    example that means you will not be able to grab the child and remove                    
                </comment>
                <comment line="106">
                    it from its parent.                    
                </comment>
                <comment line="106">
                    Change the look of the copy                    
                </comment>
                <comment line="106">
                    Let&apos;s add the copy to the root, and translate it so that it does not                    
                </comment>
                <comment line="106">
                    cover the original node.                    
                </comment>
                <declaration name="layer" type="PLayer" line="106"/>
                <declaration name="aNode" type="PNode" line="107"/>
                <declaration name="aCopy" type="PNode" line="135"/>
            </method>
            <method name="createNodeUsingExistingClasses" type="void" line="155">
                <comment line="156">
                    Here we create an image node that displays a thumbnail                    
                </comment>
                <comment line="156">
                    image of the root node. Note that you can easily get a thumbnail                    
                </comment>
                <comment line="156">
                    of any node by using PNode.toImage().                    
                </comment>
                <declaration name="layer" type="PLayer" line="156"/>
            </method>
            <method name="subclassExistingClasses" type="void" line="171">
                <anonymous_class line="172">
                    <declaration name="serialVersionUID" type="long" line="174"/>
                    <javadoc line="174">
                                                
                    </javadoc>
                    <method name="paint" type="void" line="179">
                        <scope line="180">
                            <declaration name="g2" type="Graphics2D" line="182"/>
                        </scope>
                        <scope line="186"/>
                    </method>
                </anonymous_class>
                <declaration name="n" type="PNode" line="172"/>
                <anonymous_class line="193">
                    <method name="mousePressed" type="void" line="194">
                        <comment line="195">
                            invalidatePaint(); // this tells the framework that the node                            
                        </comment>
                        <comment line="195">
                            needs to be redisplayed.                            
                        </comment>
                    </method>
                    <method name="mouseReleased" type="void" line="201">
                        <comment line="202">
                            invalidatePaint(); // this tells the framework that the node                            
                        </comment>
                        <comment line="202">
                            needs to be redisplayed.                            
                        </comment>
                    </method>
                </anonymous_class>
            </method>
            <method name="composeOtherNodes" type="void" line="215">
                <comment line="216">
                    create parts for the face.                    
                </comment>
                <comment line="216">
                    add the face parts                    
                </comment>
                <comment line="216">
                    don&apos;t want anyone grabbing out our eye&apos;s.                    
                </comment>
                <comment line="216">
                    position the face parts.                    
                </comment>
                <comment line="216">
                    set the face bounds so that it neatly contains the face parts.                    
                </comment>
                <comment line="216">
                    opps it to small, so scale it up.                    
                </comment>
                <declaration name="myCompositeFace" type="PNode" line="216"/>
                <declaration name="eye1" type="PNode" line="219"/>
                <declaration name="eye2" type="PNode" line="221"/>
                <declaration name="mouth" type="PNode" line="222"/>
                <declaration name="b" type="PBounds" line="238"/>
            </method>
            <method name="createCustomNode" type="void" line="250">
                <anonymous_class line="251">
                    <declaration name="serialVersionUID" type="long" line="252"/>
                    <javadoc line="252">
                                                
                    </javadoc>
                    <method name="paint" type="void" line="257">
                        <comment line="258">
                            draw vertical lines                            
                        </comment>
                        <declaration name="bx" type="double" line="258"/>
                        <declaration name="by" type="double" line="259"/>
                        <declaration name="rightBorder" type="double" line="260"/>
                        <declaration name="bottomBorder" type="double" line="261"/>
                        <declaration name="line" type="Line2D" line="263"/>
                        <declaration name="g2" type="Graphics2D" line="264"/>
                        <scope line="270"/>
                        <scope line="275"/>
                    </method>
                </anonymous_class>
                <declaration name="n" type="PNode" line="251"/>
            </method>
            <method name="main" type="void" line="286"/>
            <class name="BirdsEyeView" extends="PCanvas" line="290">
                <implements interface="PropertyChangeListener"/>
                <javadoc line="290">
                    The Birds Eye View Class                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="295"/>
                <javadoc line="295">
                                        
                </javadoc>
                <declaration name="areaVisiblePNode" type="PNode" line="300"/>
                <javadoc line="300">
                    This is the node that shows the viewed area.                    
                </javadoc>
                <declaration name="viewedCanvas" type="PCanvas" line="305"/>
                <javadoc line="305">
                    This is the canvas that is being viewed                    
                </javadoc>
                <declaration name="changeListener" type="PropertyChangeListener" line="310"/>
                <javadoc line="310">
                    The change listener to know when to update the birds eye view.                    
                </javadoc>
                <declaration name="layerCount" type="int" line="315"/>
                <javadoc line="317">
                    Creates a new instance of a BirdsEyeView                    
                </javadoc>
                <method name="BirdsEyeView" type="constructor" line="320">
                    <comment line="321">
                        create the PropertyChangeListener for listening to the viewed                        
                    </comment>
                    <comment line="321">
                        canvas                        
                    </comment>
                    <comment line="321">
                        create the coverage node                        
                    </comment>
                    <comment line="321">
                        add the drag event handler                        
                    </comment>
                    <comment line="321">
                        remove Pan and Zoom                        
                    </comment>
                    <anonymous_class line="324">
                        <method name="propertyChange" type="void" line="325"/>
                    </anonymous_class>
                    <anonymous_class line="338">
                        <method name="startDrag" type="void" line="339">
                            <scope line="340"/>
                        </method>
                        <method name="drag" type="void" line="345">
                            <declaration name="dim" type="PDimension" line="346"/>
                        </method>
                    </anonymous_class>
                </method>
                <method name="connect" type="void" line="360">
                    <scope line="367"/>
                </method>
                <javadoc line="373">
                    Add a layer to list of viewed layers                    
                </javadoc>
                <method name="addLayer" type="void" line="376"/>
                <javadoc line="381">
                    Remove the layer from the viewed layers                    
                </javadoc>
                <method name="removeLayer" type="void" line="384"/>
                <javadoc line="389">
                    Stop the birds eye view from receiving events from the viewed canvas
                     * and remove all layers                    
                </javadoc>
                <method name="disconnect" type="void" line="393">
                    <scope line="396"/>
                </method>
                <javadoc line="402">
                    This method will get called when the viewed canvas changes                    
                </javadoc>
                <method name="propertyChange" type="void" line="405"/>
                <javadoc line="409">
                    This method gets the state of the viewed canvas and updates the
                     * BirdsEyeViewer This can be called from outside code                    
                </javadoc>
                <method name="updateFromViewed" type="void" line="413">
                    <comment line="414">
                        find the upper left corner                        
                    </comment>
                    <comment line="414">
                        set to the lesser value                        
                    </comment>
                    <comment line="414">
                        same for y                        
                    </comment>
                    <comment line="414">
                        find the lower right corner                        
                    </comment>
                    <comment line="414">
                        set to the greater value                        
                    </comment>
                    <comment line="414">
                        same for height                        
                    </comment>
                    <comment line="414">
                        keep the birds eye view centered                        
                    </comment>
                    <declaration name="viewedX" type="double" line="415"/>
                    <declaration name="viewedY" type="double" line="416"/>
                    <declaration name="viewedHeight" type="double" line="417"/>
                    <declaration name="viewedWidth" type="double" line="418"/>
                    <declaration name="ul_camera_x" type="double" line="420"/>
                    <declaration name="ul_camera_y" type="double" line="421"/>
                    <declaration name="lr_camera_x" type="double" line="422"/>
                    <declaration name="lr_camera_y" type="double" line="423"/>
                    <declaration name="drag_bounds" type="Rectangle2D" line="425"/>
                    <declaration name="ul_layer_x" type="double" line="427"/>
                    <declaration name="ul_layer_y" type="double" line="428"/>
                    <declaration name="lr_layer_x" type="double" line="429"/>
                    <declaration name="lr_layer_y" type="double" line="430"/>
                    <scope line="435"/>
                    <scope line="438"/>
                    <scope line="443"/>
                    <scope line="446"/>
                    <scope line="453"/>
                    <scope line="456"/>
                    <scope line="461"/>
                    <scope line="464"/>
                    <declaration name="bounds" type="Rectangle2D" line="468"/>
                </method>
            </class>
        </class>
    </source>