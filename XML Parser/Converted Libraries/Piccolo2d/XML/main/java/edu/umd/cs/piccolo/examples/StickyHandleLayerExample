<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.examples">
        <import package="java.awt.Color"/>
        <import package="java.util.Iterator"/>
        <import package="edu.umd.cs.piccolo.PCanvas"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.PRoot"/>
        <import package="edu.umd.cs.piccolo.activities.PActivity"/>
        <import package="edu.umd.cs.piccolo.nodes.PPath"/>
        <import package="edu.umd.cs.piccolox.PFrame"/>
        <import package="edu.umd.cs.piccolox.handles.PBoundsHandle"/>
        <import package="edu.umd.cs.piccolox.handles.PHandle"/>
        <import package="edu.umd.cs.piccolox.util.PBoundsLocator"/>
        <class name="StickyHandleLayerExample" line="44">
            <extends class="PFrame"/>
            <javadoc line="44">
                This example shows another way to create sticky handles. These handles are
                  not added as children to the object that they manipulate. Instead they are
                  added to the camera the views that objects. This means that they will not be
                  affected by the cameras view transform, and so will stay the same size when
                  the view is zoomed. They will also be drawn on top of all other objects, even
                  if those objects overlap the object that they manipulate. For this setup we
                  need to add and updateHandles activity that makes sure to relocate the handle
                  after any change. Another way to do this would be to add change listeners to
                  the camera and the node that they manipulate and only update them then. But
                  this method is easier and should be plenty efficient for normal use.                
                <@author>
                    r jesse                    
                </@author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="60"/>
            <javadoc line="60">
                                
            </javadoc>
            <method name="StickyHandleLayerExample" type="constructor" line="65"/>
            <method name="StickyHandleLayerExample" type="constructor" line="69">
                <params>
                    <param name="aCanvas" type="PCanvas"/>
                </params>
            </method>
            <method name="initialize" type="void" line="73">
                <declaration name="c" type="PCanvas" line="74"/>
                <anonymous_class line="76">
                    <method name="activityStep" type="void" line="77">
                        <params>
                            <param name="elapsedTime" type="long"/>
                        </params>
                        <declaration name="root" type="PRoot" line="80"/>
                        <scope line="82">
                            <declaration name="i" type="Iterator" line="83"/>
                            <scope line="84">
                                <declaration name="each" type="PNode" line="85"/>
                                <scope line="86">
                                    <declaration name="handle" type="PHandle" line="87"/>
                                </scope>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
                <declaration name="updateHandles" type="PActivity" line="76"/>
                <declaration name="rect" type="PPath" line="95"/>
            </method>
            <method name="main" type="void" line="107">
                <params>
                    <param name="args" type="String[]"/>
                </params>
            </method>
        </class>
    </source>