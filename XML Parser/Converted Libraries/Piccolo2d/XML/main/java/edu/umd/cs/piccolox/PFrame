<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox">
        <import package="java.awt.Dimension"/>
        <import package="java.awt.DisplayMode"/>
        <import package="java.awt.GraphicsDevice"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.event.KeyAdapter"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.KeyListener"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.EventListener"/>
        <import package="java.util.Iterator"/>
        <import package="javax.swing.JFrame"/>
        <import package="javax.swing.SwingUtilities"/>
        <import package="edu.umd.cs.piccolo.PCanvas"/>
        <class name="PFrame" line="50">
            <extends class="JFrame"/>
            <comment line="51">
                ****************************************************************                
            </comment>
            <comment line="51">
                Initialize                
            </comment>
            <comment line="51">
                ****************************************************************                
            </comment>
            <javadoc line="50">
                &lt;b&gt;PFrame&lt;/b&gt; is meant to be subclassed by applications that just need a
                  PCanvas in a JFrame. It also includes full screen mode functionality when run
                  in JDK 1.4. These subclasses should override the initialize method and start
                  adding their own code there. Look in the examples package to see lots of uses
                  of PFrame.                
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="DEFAULT_FRAME_DIMENSION" type="Dimension" line="61"/>
            <declaration name="DEFAULT_FRAME_POSITION" type="Point" line="63"/>
            <declaration name="serialVersionUID" type="long" line="65"/>
            <javadoc line="65">
                Used to allow versioned binary streams for serializations.                
            </javadoc>
            <declaration name="canvas" type="PCanvas" line="68"/>
            <javadoc line="68">
                Canvas being displayed on this PFrame.                
            </javadoc>
            <declaration name="graphicsDevice" type="GraphicsDevice" line="71"/>
            <javadoc line="71">
                The graphics device onto which the PFrame is being displayed.                
            </javadoc>
            <declaration name="escapeFullScreenModeListener" type="EventListener" line="74"/>
            <javadoc line="74">
                Listener that listens for escape key.                
            </javadoc>
            <javadoc line="77">
                Creates a PFrame with no title, not full screen, and with the default
                  canvas.                
            </javadoc>
            <method name="PFrame" type="constructor" line="81"/>
            <javadoc line="85">
                Creates a PFrame with the given title and with the default canvas.                
                <@param>
                    m title title to display at the top of the frame                    
                </@param>
                <@param>
                    m fullScreenMode whether to display a full screen frame or not                    
                </@param>
                <@param>
                    m canvas to embed in the frame                    
                </@param>
            </javadoc>
            <method name="PFrame" type="constructor" line="92">
                <params>
                    <param name="title" type="String"/>
                    <param name="fullScreenMode" type="boolean"/>
                    <param name="canvas" type="PCanvas"/>
                </params>
            </method>
            <javadoc line="96">
                Creates a PFrame with the given title and with the default canvas being
                  displayed on the provided device.                
                <@param>
                    m title title to display at the top of the frame                    
                </@param>
                <@param>
                    m device device onto which PFrame is to be displayed                    
                </@param>
                <@param>
                    m fullScreen whether to display a full screen frame or not                    
                </@param>
                <@param>
                    m canvas to embed in the frame, may be null. If so, it'll create a
                      default PCanvas                    
                </@param>
            </javadoc>
            <method name="PFrame" type="constructor" line="106">
                <params>
                    <param name="title" type="String"/>
                    <param name="device" type="GraphicsDevice"/>
                    <param name="fullScreen" type="boolean"/>
                    <param name="canvas" type="PCanvas"/>
                </params>
                <comment line="107">
                    Manipulation of Piccolo&apos;s scene graph should be done from Swings                    
                </comment>
                <comment line="107">
                    event dispatch thread since Piccolo2D is not thread safe. This code                    
                </comment>
                <comment line="107">
                    calls initialize() from that thread once the PFrame is initialized,                    
                </comment>
                <comment line="107">
                    so you are safe to start working with Piccolo2D in the initialize()                    
                </comment>
                <comment line="107">
                    method.                    
                </comment>
                <scope line="114"/>
                <scope line="117"/>
                <scope line="122"/>
                <scope line="125"/>
                <anonymous_class line="140">
                    <method name="run" type="void" line="141"/>
                </anonymous_class>
            </method>
            <javadoc line="148">
                Returns the canvas being displayed on this frame.                
                <@return>
                    n canvas being displayed on this frame                    
                </@return>
            </javadoc>
            <method name="getCanvas" type="PCanvas" line="153"/>
            <javadoc line="157">
                Returns the default frame bounds.                
                <@return>
                    n default frame bounds                    
                </@return>
            </javadoc>
            <method name="getDefaultFrameBounds" type="Rectangle" line="162"/>
            <javadoc line="166">
                Returns whether the frame is currently in full screen mode.                
                <@return>
                    n whether the frame is currently in full screen mode                    
                </@return>
            </javadoc>
            <method name="isFullScreenMode" type="boolean" line="171"/>
            <javadoc line="175">
                Switches full screen state.                
                <@param>
                    m fullScreenMode whether to place the frame in full screen mode or
                      not.                    
                </@param>
            </javadoc>
            <method name="setFullScreenMode" type="void" line="181">
                <params>
                    <param name="fullScreenMode" type="boolean"/>
                </params>
                <scope line="182">
                    <scope line="183"/>
                    <scope line="186"/>
                </scope>
            </method>
            <method name="switchToFullScreenMode" type="void" line="192">
                <scope line="195"/>
                <scope line="203"/>
            </method>
            <method name="switchToWindowedMode" type="void" line="209">
                <scope line="212"/>
            </method>
            <javadoc line="223">
                Sets the display mode to the best device mode that can be determined.
                  Used in full screen mode.                
                <@param>
                    m device The graphics device being controlled.                    
                </@param>
            </javadoc>
            <method name="chooseBestDisplayMode" type="void" line="230">
                <params>
                    <param name="device" type="GraphicsDevice"/>
                </params>
                <declaration name="best" type="DisplayMode" line="231"/>
                <scope line="232"/>
            </method>
            <javadoc line="237">
                Finds the best display mode the graphics device supports. Based on the
                  preferred modes.                
                <@param>
                    m device the device being inspected                    
                </@param>
                <@return>
                    n best display mode the given device supports                    
                </@return>
            </javadoc>
            <method name="getBestDisplayMode" type="DisplayMode" line="245">
                <params>
                    <param name="device" type="GraphicsDevice"/>
                </params>
                <declaration name="itr" type="Iterator" line="246"/>
                <scope line="247">
                    <declaration name="each" type="DisplayMode" line="248"/>
                    <declaration name="modes" type="DisplayMode[]" line="249"/>
                    <scope line="250">
                        <scope line="252"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="261">
                By default return the current display mode. Subclasses may override this
                  method to return other modes in the collection.                
                <@param>
                    m device the device being inspected                    
                </@param>
                <@return>
                    n preferred display mode                    
                </@return>
            </javadoc>
            <method name="getPreferredDisplayModes" type="Collection" line="268">
                <params>
                    <param name="device" type="GraphicsDevice"/>
                </params>
                <comment line="269">
                    result.add(new DisplayMode(640, 480, 32, 0)); result.add(new
                     DisplayMode(640, 480, 16, 0)); result.add(new DisplayMode(640, 480,
                     8, 0));                    
                </comment>
                <declaration name="result" type="ArrayList" line="269"/>
            </method>
            <javadoc line="281">
                This method adds a key listener that will take this PFrame out of full
                  screen mode when the escape key is pressed. This is called for you
                  automatically when the frame enters full screen mode.                
            </javadoc>
            <method name="addEscapeFullScreenModeListener" type="void" line="286">
                <anonymous_class line="288">
                    <method name="keyPressed" type="void" line="289">
                        <params>
                            <param name="aEvent" type="KeyEvent"/>
                        </params>
                        <scope line="290"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="298">
                This method removes the escape full screen mode key listener. It will be
                  called for you automatically when full screen mode exits, but the method
                  has been made public for applications that wish to use other methods for
                  exiting full screen mode.                
            </javadoc>
            <method name="removeEscapeFullScreenModeListener" type="void" line="304">
                <scope line="305"/>
            </method>
            <javadoc line="315">
                This method will be called before the initialize() method and will be
                  called on the thread that is constructing this object.                
            </javadoc>
            <method name="beforeInitialize" type="void" line="319"/>
            <javadoc line="322">
                Subclasses should override this method and add their Piccolo2D
                  initialization code there. This method will be called on the swing event
                  dispatch thread. Note that the constructors of PFrame subclasses may not
                  be complete when this method is called. If you need to initialize some
                  things in your class before this method is called place that code in
                  beforeInitialize();                
            </javadoc>
            <method name="initialize" type="void" line="330"/>
            <javadoc line="333">
                Method for testing the creating of PFrame.                
                <@deprecated>
                    d since it's not terribly useful                    
                </@deprecated>
                <@param>
                    m argv command line arguments                    
                </@param>
            </javadoc>
            <method name="main" type="void" line="340">
                <params>
                    <param name="argv" type="String[]"/>
                </params>
            </method>
        </class>
    </source>