<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo">
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.Dimension2D"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="edu.umd.cs.piccolo.activities.PTransformActivity"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransform"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PDebug"/>
        <import package="edu.umd.cs.piccolo.util.PDimension"/>
        <import package="edu.umd.cs.piccolo.util.PObjectOutputStream"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolo.util.PPickPath"/>
        <import package="edu.umd.cs.piccolo.util.PUtil"/>
        <class name="PCamera" extends="PNode" line="55">
            <comment line="56">
                ****************************************************************                
            </comment>
            <comment line="56">
                View Transform - Methods for accessing the view transform. The                
            </comment>
            <comment line="56">
                view transform is applied before painting and picking the cameras                
            </comment>
            <comment line="56">
                layers. But not before painting or picking its direct children.                
            </comment>
            <comment line="56">
                                
            </comment>
            <comment line="56">
                Changing the view transform is how zooming and panning are                
            </comment>
            <comment line="56">
                accomplished.                
            </comment>
            <comment line="56">
                ****************************************************************                
            </comment>
            <comment line="56">
                Offset the view transform applied to the list of layers viewed by this camera by &lt;code&gt;[dx, dy]&lt;code&gt;. This is
                 NOT effected by the view transform&apos;s current scale or rotation. This is implemented by directly adding dx to the
                 m02 position and dy to the m12 position in the affine transform.
                
                 @param dx offset delta x
                 @param dy offset delta y                
            </comment>
            <comment line="56">
                public void offsetView(final double dx, final double dy) {
                setViewOffset(viewTransform.getTranslateX() + dx, viewTransform.getTranslateY() + dy);
                }                
            </comment>
            <comment line="56">
                ****************************************************************                
            </comment>
            <comment line="56">
                View Transform Constraints - Methods for setting and applying                
            </comment>
            <comment line="56">
                constraints to the view transform.                
            </comment>
            <comment line="56">
                ****************************************************************                
            </comment>
            <comment line="56">
                ****************************************************************                
            </comment>
            <comment line="56">
                Camera View Coord System Conversions - Methods to translate from                
            </comment>
            <comment line="56">
                the camera&apos;s local coord system (above the camera&apos;s view transform) to                
            </comment>
            <comment line="56">
                the                
            </comment>
            <comment line="56">
                camera view coord system (below the camera&apos;s view transform). When                
            </comment>
            <comment line="56">
                converting geometry from one of the canvas&apos;s layers you must go                
            </comment>
            <comment line="56">
                through the view transform.                
            </comment>
            <comment line="56">
                ****************************************************************                
            </comment>
            <comment line="56">
                ****************************************************************                
            </comment>
            <comment line="56">
                Serialization - Cameras conditionally serialize their layers.                
            </comment>
            <comment line="56">
                This means that only the layer references that were unconditionally                
            </comment>
            <comment line="56">
                (using writeObject) serialized by someone else will be restored                
            </comment>
            <comment line="56">
                when the camera is unserialized.                
            </comment>
            <comment line="56">
                ****************************************************************/                
            </comment>
            <javadoc line="55">
                &lt;b&gt;PCamera&lt;/b&gt; represents a viewport onto a list of layer nodes. Each camera
                 * maintains a view transform through which it views these layers. Translating
                 * and scaling this view transform is how zooming and panning are implemented.
                 * &lt;p&gt;
                 * Cameras are also the point through which all PInputEvents enter Piccolo. The
                 * canvas coordinate system and the local coordinate system of the topmost
                 * camera should always be the same.
                 * &lt;/p&gt;                
                <@see>
                    e PLayer                    
                </@see>
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="71"/>
            <javadoc line="71">
                Default serial version UID.                
            </javadoc>
            <declaration name="PROPERTY_LAYERS" type="String" line="74"/>
            <javadoc line="74">
                The property name that identifies a change in the set of this camera&apos;s
                 * layers (see {@link #getLayer getLayer}, {@link #getLayerCountgetLayerCount}, {@link #getLayersReference getLayersReference}). A
                 * property change event&apos;s new value will be a reference to the list of this
                 * nodes layers, but old value will always be null.                
            </javadoc>
            <declaration name="PROPERTY_CODE_LAYERS" type="int" line="83"/>
            <javadoc line="83">
                The property code that identifies a change in the set of this camera&apos;s
                 * layers (see {@link #getLayer getLayer}, {@link #getLayerCountgetLayerCount}, {@link #getLayersReference getLayersReference}). A
                 * property change event&apos;s new value will be a reference to the list of this
                 * nodes layers, but old value will always be null.                
            </javadoc>
            <declaration name="PROPERTY_VIEW_TRANSFORM" type="String" line="92"/>
            <javadoc line="92">
                The property name that identifies a change in this camera&apos;s view
                 * transform (see {@link #getViewTransform getViewTransform},{@link #getViewTransformReference getViewTransformReference}). A property
                 * change event&apos;s new value will be a reference to the view transform, but
                 * old value will always be null.                
            </javadoc>
            <declaration name="PROPERTY_CODE_VIEW_TRANSFORM" type="int" line="101"/>
            <javadoc line="101">
                The property code that identifies a change in this camera&apos;s view
                 * transform (see {@link #getViewTransform getViewTransform},{@link #getViewTransformReference getViewTransformReference}). A property
                 * change event&apos;s new value will be a reference to the view transform, but
                 * old value will always be null.                
            </javadoc>
            <declaration name="VIEW_CONSTRAINT_NONE" type="int" line="110"/>
            <javadoc line="110">
                Denotes that the view has no constraints.                
            </javadoc>
            <declaration name="VIEW_CONSTRAINT_ALL" type="int" line="113"/>
            <javadoc line="113">
                Enforces that the view be able to see all nodes in the scene.                
            </javadoc>
            <declaration name="VIEW_CONSTRAINT_CENTER" type="int" line="116"/>
            <javadoc line="116">
                Constrains the the view to be centered on the scene&apos;s full bounds.                
            </javadoc>
            <declaration name="component" type="PComponent" line="119"/>
            <javadoc line="119">
                Component which receives repaint notification from this camera.                
            </javadoc>
            <declaration name="layers" type="List" line="122"/>
            <javadoc line="122">
                List of layers viewed by this camera.                
            </javadoc>
            <declaration name="viewTransform" type="PAffineTransform" line="125"/>
            <javadoc line="125">
                Transform applied to layers before they are rendered. This transform
                 * differs from the transform applied to the children of this PCamera
                 * (sticky objects).                
            </javadoc>
            <declaration name="viewConstraint" type="int" line="132"/>
            <javadoc line="132">
                Constraints to apply to the viewing area.                
            </javadoc>
            <declaration name="TEMP_REPAINT_RECT" type="PBounds" line="135"/>
            <javadoc line="135">
                Temporary bounds used as an optimization during repaint.                
            </javadoc>
            <javadoc line="139">
                Create a new camera with an empy list of layers.                
            </javadoc>
            <method name="PCamera" type="constructor" line="142"/>
            <javadoc line="150">
                Return the component for this camera, or &lt;code&gt;null&lt;/code&gt; if no
                 * component has been associated with this camera, as may be the case for
                 * internal cameras.                
                <@return>
                    n the component for this camera, or <code>null</code> if no such
                     * component exists                    
                </@return>
            </javadoc>
            <method name="getComponent" type="PComponent" line="158"/>
            <javadoc line="162">
                Set the component for this camera to &lt;code&gt;component&lt;/code&gt;. The
                 * component, if non-null, receives repaint notification from this camera.                
                <@param>
                    m component component for this camera                    
                </@param>
            </javadoc>
            <method name="setComponent" type="void" line="168"/>
            <javadoc line="173">
                Repaint this camera and forward the repaint request to the component
                 * for this camera, if it is non-null.                
                <@param>
                    m localBounds bounds that require repainting, in local coordinates                    
                </@param>
                <@param>
                    m sourceNode node from which the repaint message originates, may
                     * be the camera itself                    
                </@param>
            </javadoc>
            <method name="repaintFrom" type="void" line="181">
                <scope line="182">
                    <scope line="183"/>
                    <scope line="186"/>
                </scope>
            </method>
            <javadoc line="193">
                Repaint from one of the camera&apos;s layers. The repaint region needs to be
                 * transformed from view to local in this case. Unlike most repaint methods
                 * in Piccolo2D this one must not modify the &lt;code&gt;viewBounds&lt;/code&gt;
                 * parameter.                
                <@since>
                    e 1.3                    
                </@since>
                <@param>
                    m viewBounds bounds that require repainting, in view coordinates                    
                </@param>
                <@param>
                    m repaintedLayer layer dispatching the repaint notification                    
                </@param>
            </javadoc>
            <method name="repaintFromLayer" type="void" line="203">
                <scope line="206"/>
            </method>
            <javadoc line="212">
                @deprecated by {@link #repaintFromLayer(PBounds,PLayer)}. Will be removed
                 * in version 2.0.                
                <@param>
                    m viewBounds bounds that require repainting, in view coordinates                    
                </@param>
                <@param>
                    m repaintedLayer layer dispatching the repaint notification                    
                </@param>
            </javadoc>
            <method name="repaintFromLayer" type="void" line="218"/>
            <javadoc line="222">
                Return a reference to the list of layers viewed by this camera.                
                <@return>
                    n the list of layers viewed by this camera                    
                </@return>
            </javadoc>
            <method name="getLayersReference" type="List" line="227"/>
            <javadoc line="231">
                Return the number of layers in the list of layers viewed by this camera.                
                <@return>
                    n the number of layers in the list of layers viewed by this camera                    
                </@return>
            </javadoc>
            <method name="getLayerCount" type="int" line="236"/>
            <javadoc line="240">
                Return the layer at the specified position in the list of layers viewed by this camera.                
                <@param>
                    m index index of the layer to return                    
                </@param>
                <@return>
                    n the layer at the specified position in the list of layers viewed by this camera                    
                </@return>
                <@throws>
                    s IndexOutOfBoundsException if the specified index is out of range
                     * (<code>index &lt; 0 || index &gt;= getLayerCount()</code>)                    
                </@throws>
            </javadoc>
            <method name="getLayer" type="PLayer" line="248"/>
            <javadoc line="252">
                Return the index of the first occurrence of the specified layer in the
                 * list of layers viewed by this camera, or &lt;code&gt;-1&lt;/code&gt; if the list of layers
                 * viewed by this camera does not contain the specified layer.                
                <@param>
                    m layer layer to search for                    
                </@param>
                <@return>
                    n the index of the first occurrence of the specified layer in the
                     * list of layers viewed by this camera, or <code>-1</code> if the list of
                     * layers viewed by this camera does not contain the specified layer                    
                </@return>
            </javadoc>
            <method name="indexOfLayer" type="int" line="262"/>
            <javadoc line="266">
                Inserts the specified layer at the end of the list of layers viewed by this camera.
                 * Layers may be viewed by multiple cameras at once.                
                <@param>
                    m layer layer to add                    
                </@param>
            </javadoc>
            <method name="addLayer" type="void" line="272"/>
            <javadoc line="276">
                Inserts the specified layer at the specified position in the list of layers viewed by this camera.
                 * Layers may be viewed by multiple cameras at once.                
                <@param>
                    m index index at which the specified layer is to be inserted                    
                </@param>
                <@param>
                    m layer layer to add                    
                </@param>
                <@throws>
                    s IndexOutOfBoundsException if the specified index is out of range
                     * (<code>index &lt; 0 || index &gt;= getLayerCount()</code>)                    
                </@throws>
            </javadoc>
            <method name="addLayer" type="void" line="285"/>
            <javadoc line="292">
                Removes the first occurrence of the specified layer from the list of
                 * layers viewed by this camera, if it is present.                
                <@param>
                    m layer layer to be removed                    
                </@param>
                <@return>
                    n the specified layer                    
                </@return>
            </javadoc>
            <method name="removeLayer" type="PLayer" line="299">
                <scope line="301"/>
            </method>
            <javadoc line="308">
                Removes the element at the specified position from the list of layers
                 * viewed by this camera.                
                <@param>
                    m index index of the layer to remove                    
                </@param>
                <@return>
                    n the layer previously at the specified position                    
                </@return>
                <@throws>
                    s IndexOutOfBoundsException if the specified index is out of range
                     * (<code>index &lt; 0 || index &gt;= getLayerCount()</code>)                    
                </@throws>
            </javadoc>
            <method name="removeLayer" type="PLayer" line="317">
                <declaration name="layer" type="PLayer" line="318"/>
            </method>
            <javadoc line="325">
                Return the union of the full bounds of each layer in the list of layers
                 * viewed by this camera, or empty bounds if the list of layers viewed by
                 * this camera is empty.                
                <@return>
                    n the union of the full bounds of each layer in the list of layers
                     * viewed by this camera, or empty bounds if the list of layers viewed
                     * by this camera is empty                    
                </@return>
            </javadoc>
            <method name="getUnionOfLayerFullBounds" type="PBounds" line="334">
                <declaration name="result" type="PBounds" line="335"/>
                <declaration name="size" type="int" line="336"/>
                <scope line="337">
                    <declaration name="each" type="PLayer" line="338"/>
                </scope>
            </method>
            <javadoc line="344">
                Paint this camera and then paint this camera&apos;s view through its view
                 * transform.                
                <@param>
                    m paintContext context in which painting occurs                    
                </@param>
            </javadoc>
            <method name="paint" type="void" line="350"/>
            <javadoc line="363">
                Paint all the layers in the list of layers viewed by this camera. This method
                 * is called after the view transform and clip have been applied to the
                 * specified paint context.                
                <@param>
                    m paintContext context in which painting occurs                    
                </@param>
            </javadoc>
            <method name="paintCameraView" type="void" line="370">
                <declaration name="size" type="int" line="371"/>
                <scope line="372">
                    <declaration name="each" type="PLayer" line="373"/>
                </scope>
            </method>
            <javadoc line="378">
                Renders debug info onto the newly painted scene. Things like full bounds
                 * and bounds are painted as filled and outlines.                
                <@param>
                    m paintContext context in which painting occurs                    
                </@param>
            </javadoc>
            <method name="paintDebugInfo" type="void" line="384">
                <scope line="385">
                    <declaration name="g2" type="Graphics2D" line="386"/>
                    <declaration name="nodes" type="ArrayList" line="389"/>
                    <declaration name="nodeBounds" type="PBounds" line="390"/>
                    <declaration name="boundsColor" type="Color" line="392"/>
                    <declaration name="fullBoundsColor" type="Color" line="393"/>
                    <declaration name="size" type="int" line="395"/>
                    <scope line="396"/>
                    <declaration name="i" type="Iterator" line="400"/>
                    <scope line="402">
                        <declaration name="each" type="PNode" line="403"/>
                        <scope line="405">
                            <scope line="409">
                                <scope line="412"/>
                            </scope>
                        </scope>
                        <scope line="419">
                            <scope line="423">
                                <scope line="424"/>
                                <scope line="428"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="438">
                {@inheritDoc}&lt;p&gt;
                 * Pushes this camera onto the specified paint context so that it
                 * can be accessed later by {@link PPaintContext#getCamera}.
                 * &lt;/p&gt;                
            </javadoc>
            <method name="fullPaint" type="void" line="446"/>
            <javadoc line="452">
                Generate and return a PPickPath for the point x,y specified in the local
                 * coord system of this camera. Picking is done with a rectangle, halo
                 * specifies how large that rectangle will be.                
                <@param>
                    m x the x coordinate of the pick path given in local coordinates                    
                </@param>
                <@param>
                    m y the y coordinate of the pick path given in local coordinates                    
                </@param>
                <@param>
                    m halo the distance from the x,y coordinate that is considered for
                     * inclusion in the pick path                    
                </@param>
                <@return>
                    n the picked path                    
                </@return>
            </javadoc>
            <method name="pick" type="PPickPath" line="464">
                <comment line="465">
                    make sure this camera is pushed.                    
                </comment>
                <declaration name="b" type="PBounds" line="465"/>
                <declaration name="result" type="PPickPath" line="466"/>
                <scope line="471"/>
            </method>
            <javadoc line="479">
                {@inheritDoc}&lt;p&gt;
                 * After the direct children of this camera have been given a chance to be
                 * picked all of the layers in the list of layers viewed by this camera are
                 * given a chance to be picked.
                 * &lt;/p&gt;                
                <@return>
                    n true if any of the layers in the list of layers viewed by this
                     * camera were picked                    
                </@return>
            </javadoc>
            <method name="pickAfterChildren" type="boolean" line="491">
                <scope line="492">
                    <scope line="495"/>
                </scope>
            </method>
            <javadoc line="505">
                Try to pick all of the layers in the list of layers viewed by this
                 * camera. This method is called after the view transform has been applied
                 * to the specified pick path.                
                <@param>
                    m pickPath pick path                    
                </@param>
                <@return>
                    n true if any of the layers in the list of layers viewed by this
                     * camera were picked                    
                </@return>
            </javadoc>
            <method name="pickCameraView" type="boolean" line="514">
                <declaration name="size" type="int" line="515"/>
                <scope line="516">
                    <declaration name="each" type="PLayer" line="517"/>
                    <scope line="518"/>
                </scope>
            </method>
            <javadoc line="534">
                Return the bounds of this camera in the view coordinate system.                
                <@return>
                    n the bounds of this camera in the view coordinate system                    
                </@return>
            </javadoc>
            <method name="getViewBounds" type="PBounds" line="539"/>
            <javadoc line="543">
                Animates the camera&apos;s view so that the given bounds (in camera layer&apos;s
                 * coordinate system) are centered within the cameras view bounds. Use this
                 * method to point the camera at a given location.                
                <@param>
                    m centerBounds the targetBounds                    
                </@param>
            </javadoc>
            <method name="setViewBounds" type="void" line="550"/>
            <javadoc line="554">
                Return the scale applied by the view transform to the list of layers
                 * viewed by this camera.                
                <@return>
                    n the scale applied by the view transform to the list of layers
                     * viewed by this camera                    
                </@return>
            </javadoc>
            <method name="getViewScale" type="double" line="561"/>
            <javadoc line="565">
                Scale the view transform applied to the list of layers viewed by this
                 * camera by &lt;code&gt;scale&lt;/code&gt; about the point &lt;code&gt;[0, 0]&lt;/code&gt;.                
                <@param>
                    m scale view transform scale                    
                </@param>
            </javadoc>
            <method name="scaleView" type="void" line="571"/>
            <javadoc line="575">
                Scale the view transform applied to the list of layers viewed by this
                 * camera by &lt;code&gt;scale&lt;/code&gt; about the specified point
                 * &lt;code&gt;[x, y]&lt;/code&gt;.                
                <@param>
                    m scale view transform scale                    
                </@param>
                <@param>
                    m x scale about point, x coordinate                    
                </@param>
                <@param>
                    m y scale about point, y coordinate                    
                </@param>
            </javadoc>
            <method name="scaleViewAboutPoint" type="void" line="584"/>
            <javadoc line="591">
                Set the scale applied by the view transform to the list of layers
                 * viewed by this camera to &lt;code&gt;scale&lt;/code&gt;.                
                <@param>
                    m scale view transform scale                    
                </@param>
            </javadoc>
            <method name="setViewScale" type="void" line="597"/>
            <javadoc line="601">
                Translate the view transform applied to the list of layers viewed by this
                 * camera by &lt;code&gt;[dx, dy]&lt;/code&gt;.                
                <@param>
                    m dx translate delta x                    
                </@param>
                <@param>
                    m dy translate delta y                    
                </@param>
            </javadoc>
            <method name="translateView" type="void" line="608"/>
            <javadoc line="629">
                Set the offset for the view transform applied to the list of layers
                 * viewed by this camera to &lt;code&gt;[x, y]&lt;/code&gt;.                
                <@param>
                    m x offset x                    
                </@param>
                <@param>
                    m y offset y                    
                </@param>
            </javadoc>
            <method name="setViewOffset" type="void" line="636"/>
            <javadoc line="643">
                Return a copy of the view transform applied to the list of layers
                 * viewed by this camera.                
                <@return>
                    n a copy of the view transform applied to the list of layers
                     * viewed by this camera                    
                </@return>
            </javadoc>
            <method name="getViewTransform" type="PAffineTransform" line="650"/>
            <javadoc line="654">
                Return a reference to the view transform applied to the list of layers
                 * viewed by this camera.                
                <@return>
                    n the view transform applied to the list of layers
                     * viewed by this camera                    
                </@return>
            </javadoc>
            <method name="getViewTransformReference" type="PAffineTransform" line="661"/>
            <javadoc line="665">
                Set the view transform applied to the list of layers
                 * viewed by this camera to &lt;code&gt;viewTransform&lt;/code&gt;.                
                <@param>
                    m viewTransform  view transform applied to the list of layers
                     * viewed by this camera                    
                </@param>
            </javadoc>
            <method name="setViewTransform" type="void" line="672"/>
            <javadoc line="679">
                Animate the camera&apos;s view from its current transform when the activity
                 * starts to a new transform that centers the given bounds in the camera
                 * layer&apos;s coordinate system into the cameras view bounds. If the duration is
                 * 0 then the view will be transformed immediately, and null will be
                 * returned. Else a new PTransformActivity will get returned that is set to
                 * animate the camera&apos;s view transform to the new bounds. If shouldScale is
                 * true, then the camera will also scale its view so that the given bounds
                 * fit fully within the cameras view bounds, else the camera will maintain
                 * its original scale.                
                <@param>
                    m centerBounds the bounds which the animation will pace at the
                     * center of the view                    
                </@param>
                <@param>
                    m shouldScaleToFit whether the camera should scale the view while
                     * animating to it                    
                </@param>
                <@param>
                    m duration how many milliseconds the animations should take                    
                </@param>
                <@return>
                    n the scheduled PTransformActivity                    
                </@return>
            </javadoc>
            <method name="animateViewToCenterBounds" type="PTransformActivity" line="699">
                <declaration name="viewBounds" type="PBounds" line="700"/>
                <declaration name="delta" type="PDimension" line="701"/>
                <declaration name="newTransform" type="PAffineTransform" line="702"/>
                <scope line="705">
                    <declaration name="s" type="double" line="706"/>
                    <scope line="708"/>
                </scope>
            </method>
            <javadoc line="716">
                Pan the camera&apos;s view from its current transform when the activity starts
                 * to a new transform so that the view bounds will contain (if possible,
                 * intersect if not possible) the new bounds in the camera layers coordinate
                 * system. If the duration is 0 then the view will be transformed
                 * immediately, and null will be returned. Else a new PTransformActivity
                 * will get returned that is set to animate the camera&apos;s view transform to
                 * the new bounds.                
                <@param>
                    m panToBounds the bounds to which the view will animate to                    
                </@param>
                <@param>
                    m duration the duration of the animation given in milliseconds                    
                </@param>
                <@return>
                    n the scheduled PTransformActivity                    
                </@return>
            </javadoc>
            <method name="animateViewToPanToBounds" type="PTransformActivity" line="730">
                <declaration name="viewBounds" type="PBounds" line="731"/>
                <declaration name="delta" type="PDimension" line="732"/>
                <scope line="734">
                    <scope line="735"/>
                    <scope line="738">
                        <declaration name="at" type="AffineTransform" line="739"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="748">
                Pan the camera&apos;s view from its current transform when the activity starts
                 * to a new transform so that the view bounds will contain (if possible,
                 * intersect if not possible) the new bounds in the camera layers coordinate
                 * system. If the duration is 0 then the view will be transformed
                 * immediately, and null will be returned. Else a new PTransformActivity
                 * will get returned that is set to animate the camera&apos;s view transform to
                 * the new bounds.                
                <@deprecated>
                    d Renamed to animateViewToPanToBounds                    
                </@deprecated>
                <@param>
                    m includeBounds the bounds to which the view will animate to                    
                </@param>
                <@param>
                    m duration the duration of the animation given in milliseconds                    
                </@param>
                <@return>
                    n the scheduled PTransformActivity                    
                </@return>
            </javadoc>
            <method name="animateViewToIncludeBounds" type="PTransformActivity" line="764"/>
            <javadoc line="768">
                Animate the cameras view transform from its current value when the
                 * activity starts to the new destination transform value.                
                <@param>
                    m destination the transform to which the view should be transformed
                     * into                    
                </@param>
                <@param>
                    m duration the duraiton in milliseconds the animation should take                    
                </@param>
                <@return>
                    n the scheduled PTransformActivity                    
                </@return>
            </javadoc>
            <method name="animateViewToTransform" type="PTransformActivity" line="778">
                <scope line="779"/>
                <anonymous_class line="784">
                    <javadoc line="785">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="setTransform" type="void" line="786"/>
                    <javadoc line="790">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="getSourceMatrix" type="void" line="791"/>
                </anonymous_class>
                <declaration name="t" type="PTransformActivity.Target" line="784"/>
                <declaration name="transformActivity" type="PTransformActivity" line="796"/>
                <declaration name="r" type="PRoot" line="799"/>
                <scope line="800"/>
            </method>
            <javadoc line="812">
                Return the constraint applied to the view. The view constraint will be one of {@link #VIEW_CONSTRAINT_NONE},{@link #VIEW_CONSTRAINT_CENTER}, or {@link #VIEW_CONSTRAINT_CENTER}. Defaults to {@link #VIEW_CONSTRAINT_NONE}.                
                <@return>
                    n the view constraint being applied to the view                    
                </@return>
            </javadoc>
            <method name="getViewConstraint" type="int" line="818"/>
            <javadoc line="822">
                Set the view constraint to apply to the view to &lt;code&gt;viewConstraint&lt;/code&gt;. The view constraint must be one of{@link #VIEW_CONSTRAINT_NONE}, {@link #VIEW_CONSTRAINT_CENTER}, or {@link #VIEW_CONSTRAINT_CENTER}.                
                <@param>
                    m viewConstraint constraint to apply to the view                    
                </@param>
                <@throws>
                    s IllegalArgumentException if <code>viewConstraint</code> is not one of {@link #VIEW_CONSTRAINT_NONE},{@link #VIEW_CONSTRAINT_CENTER}, or {@link #VIEW_CONSTRAINT_CENTER}                    
                </@throws>
            </javadoc>
            <method name="setViewConstraint" type="void" line="830">
                <scope line="832"/>
            </method>
            <javadoc line="840">
                Transforms the view so that it conforms to the given constraint.                
            </javadoc>
            <method name="applyViewConstraints" type="void" line="843">
                <scope line="844"/>
                <declaration name="viewBounds" type="PBounds" line="847"/>
                <declaration name="layerBounds" type="PBounds" line="848"/>
                <scope line="850"/>
                <declaration name="constraintDelta" type="PDimension" line="853"/>
            </method>
            <javadoc line="866">
                Convert the point from the camera&apos;s view coordinate system to the
                 * camera&apos;s local coordinate system. The given point is modified by this.                
                <@param>
                    m viewPoint the point to transform to the local coordinate system
                     * from the view's coordinate system                    
                </@param>
                <@return>
                    n the transformed point                    
                </@return>
            </javadoc>
            <method name="viewToLocal" type="Point2D" line="874"/>
            <javadoc line="878">
                Convert the dimension from the camera&apos;s view coordinate system to the
                 * camera&apos;s local coordinate system. The given dimension is modified by
                 * this.                
                <@param>
                    m viewDimension the dimension to transform from the view system to
                     * the local coordinate system                    
                </@param>
                <@return>
                    n returns the transformed dimension                    
                </@return>
            </javadoc>
            <method name="viewToLocal" type="Dimension2D" line="888"/>
            <javadoc line="892">
                Convert the rectangle from the camera&apos;s view coordinate system to the
                 * camera&apos;s local coordinate system. The given rectangle is modified by this
                 * method.                
                <@param>
                    m viewRectangle the rectangle to transform from view to local
                     * coordinate System                    
                </@param>
                <@return>
                    n the transformed rectangle                    
                </@return>
            </javadoc>
            <method name="viewToLocal" type="Rectangle2D" line="901"/>
            <javadoc line="905">
                Convert the point from the camera&apos;s local coordinate system to the
                 * camera&apos;s view coordinate system. The given point is modified by this
                 * method.                
                <@param>
                    m localPoint point to transform from local to view coordinate system                    
                </@param>
                <@return>
                    n the transformed point                    
                </@return>
            </javadoc>
            <method name="localToView" type="Point2D" line="913"/>
            <javadoc line="917">
                Convert the dimension from the camera&apos;s local coordinate system to the
                 * camera&apos;s view coordinate system. The given dimension is modified by this
                 * method.                
                <@param>
                    m localDimension the dimension to transform from local to view
                     * coordinate systems                    
                </@param>
                <@return>
                    n the transformed dimension                    
                </@return>
            </javadoc>
            <method name="localToView" type="Dimension2D" line="926"/>
            <javadoc line="930">
                Convert the rectangle from the camera&apos;s local coordinate system to the
                 * camera&apos;s view coordinate system. The given rectangle is modified by this
                 * method.                
                <@param>
                    m localRectangle the rectangle to transform from local to view
                     * coordinate system                    
                </@param>
                <@return>
                    n the transformed rectangle                    
                </@return>
            </javadoc>
            <method name="localToView" type="Rectangle2D" line="939"/>
            <javadoc line="950">
                Write this camera and all its children out to the given stream. Note that
                 * the cameras layers are written conditionally, so they will only get
                 * written out if someone else writes them unconditionally.                
                <@param>
                    m out the PObjectOutputStream to which this camera should be
                     * serialized                    
                </@param>
                <@throws>
                    s IOException if an error occured writing to the output stream                    
                </@throws>
            </javadoc>
            <method name="writeObject" type="void" line="959">
                <scope line="960"/>
                <declaration name="count" type="int" line="965"/>
                <scope line="966"/>
            </method>
            <javadoc line="974">
                Deserializes this PCamera from the ObjectInputStream.                
                <@param>
                    m in the source ObjectInputStream                    
                </@param>
                <@throws>
                    s IOException when error occurs during read                    
                </@throws>
                <@throws>
                    s ClassNotFoundException if the stream attempts to deserialize a
                     * missing class                    
                </@throws>
            </javadoc>
            <method name="readObject" type="void" line="982">
                <scope line="987">
                    <declaration name="each" type="Object" line="988"/>
                    <scope line="989">
                        <scope line="990"/>
                        <scope line="993"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>