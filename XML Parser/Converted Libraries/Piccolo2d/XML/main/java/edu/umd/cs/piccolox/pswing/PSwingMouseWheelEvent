<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.pswing">
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.event.PInputEvent"/>
        <import package="edu.umd.cs.piccolo.util.PPickPath"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.event.MouseWheelEvent"/>
        <import package="java.awt.event.MouseWheelListener"/>
        <import package="java.awt.geom.Point2D"/>
        <class name="PSwingMouseWheelEvent" line="41">
            <extends class="MouseWheelEvent"/>
            <implements interface="PSwingEvent"/>
            <javadoc line="41">
                &lt;b&gt;PMouseMotionEvent&lt;/b&gt; is an event which indicates that a mouse motion
                  action occurred in a node.
                  &lt;p/&gt;
                  This low-level event is generated by a node object for:
                  &lt;ul&gt;
                  &lt;li&gt;Mouse Motion Events
                  &lt;ul&gt;
                  &lt;li&gt;the mouse is moved
                  &lt;li&gt;the mouse is dragged
                  &lt;/ul&gt;
                  &lt;/ul&gt;
                  &lt;p/&gt;
                  A PMouseEvent object is passed to every &lt;code&gt;PMouseMotionListener&lt;/code&gt; or
                  &lt;code&gt;PMouseMotionAdapter&lt;/code&gt; object which registered to receive mouse
                  motion events using the component&apos;s &lt;code&gt;addMouseMotionListener&lt;/code&gt;
                  method. (&lt;code&gt;PMouseMotionAdapter&lt;/code&gt; objects implement the
                  &lt;code&gt;PMouseMotionListener&lt;/code&gt; interface.) Each such listener object gets
                  a &lt;code&gt;PMouseEvent&lt;/code&gt; containing the mouse motion event.
                  &lt;p/&gt;
                  &lt;p/&gt;
                  &lt;b&gt;Warning:&lt;/b&gt; Serialized objects of this class will not be compatible with
                  future Piccolo releases. The current serialization support is appropriate for
                  short term storage or RMI between applications running the same version of
                  Piccolo. A future release of Piccolo will provide support for long term
                  persistence.                
                <@author>
                    r Benjamin B. Bederson                    
                </@author>
                <@author>
                    r Sam R. Reid                    
                </@author>
                <@author>
                    r Lance E. Good                    
                </@author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="73"/>
            <javadoc line="73">
                                
            </javadoc>
            <declaration name="id" type="int" line="77"/>
            <declaration name="event" type="PInputEvent" line="78"/>
            <javadoc line="80">
                Constructs a new PMouseWheel event from a Java MouseWheelEvent.                
                <@param>
                    m id The event type (MOUSE_WHEEL)                    
                </@param>
                <@param>
                    m swingEvent The original swing mouse wheel event.                    
                </@param>
                <@param>
                    m piccoloEvent Piccolo2D event for use when querying about the
                      event's piccolo2d context                    
                </@param>
            </javadoc>
            <method name="PSwingMouseWheelEvent" type="constructor" line="88">
                <params>
                    <param name="id" type="int"/>
                    <param name="swingEvent" type="MouseWheelEvent"/>
                    <param name="piccoloEvent" type="PInputEvent"/>
                </params>
            </method>
            <javadoc line="96">
                Returns the x,y position of the event in the local coordinate system of
                  the node the event occurred on.                
                <@return>
                    n a Point2D object containing the x and y coordinates local to the
                      node.                    
                </@return>
            </javadoc>
            <method name="getLocalPoint" type="Point2D" line="103"/>
            <javadoc line="107">
                Returns the horizontal x position of the event in the local coordinate
                  system of the node the event occurred on.                
                <@return>
                    n x a double indicating horizontal position local to the node.                    
                </@return>
            </javadoc>
            <method name="getLocalX" type="double" line="113"/>
            <javadoc line="117">
                Returns the vertical y position of the event in the local coordinate
                  system of the node the event occurred on.                
                <@return>
                    n y a double indicating vertical position local to the node.                    
                </@return>
            </javadoc>
            <method name="getLocalY" type="double" line="123"/>
            <javadoc line="127">
                Determine the event type.                
                <@return>
                    n the id                    
                </@return>
            </javadoc>
            <method name="getID" type="int" line="132"/>
            <javadoc line="136">
                Determine the node the event originated at. If an event percolates up the
                  tree and is handled by an event listener higher up in the tree than the
                  original node that generated the event, this returns the original node.
                  For mouse drag and release events, this is the node that the original
                  matching press event went to - in other words, the event is &apos;grabbed&apos; by
                  the originating node.                
                <@return>
                    n the node                    
                </@return>
            </javadoc>
            <method name="getNode" type="PNode" line="146"/>
            <javadoc line="150">
                Determine the path the event took from the PCanvas down to the visual
                  component.                
                <@return>
                    n the path                    
                </@return>
            </javadoc>
            <method name="getPath" type="PPickPath" line="156"/>
            <javadoc line="160">
                Determine the node the event originated at. If an event percolates up the
                  tree and is handled by an event listener higher up in the tree than the
                  original node that generated the event, this returns the original node.
                  For mouse drag and release events, this is the node that the original
                  matching press event went to - in other words, the event is &apos;grabbed&apos; by
                  the originating node.                
                <@return>
                    n the node                    
                </@return>
            </javadoc>
            <method name="getGrabNode" type="PNode" line="170"/>
            <javadoc line="174">
                Return the path from the PCanvas down to the currently grabbed object.                
                <@return>
                    n the path                    
                </@return>
            </javadoc>
            <method name="getGrabPath" type="PPickPath" line="179"/>
            <javadoc line="183">
                Get the current node that is under the cursor. This may return a
                  different result then getGrabNode() when in a MOUSE_RELEASED or
                  MOUSE_DRAGGED event.                
                <@return>
                    n the current node.                    
                </@return>
            </javadoc>
            <method name="getCurrentNode" type="PNode" line="190"/>
            <javadoc line="194">
                Get the path from the PCanvas down to the visual component currently
                  under the mouse.This may give a different result then getGrabPath()
                  durring a MOUSE_DRAGGED or MOUSE_RELEASED operation.                
                <@return>
                    n the current path.                    
                </@return>
            </javadoc>
            <method name="getCurrentPath" type="PPickPath" line="201"/>
            <javadoc line="205">
                Calls appropriate method on the listener based on this events ID.                
                <@param>
                    m listener the target for dispatch.                    
                </@param>
            </javadoc>
            <method name="dispatchTo" type="void" line="210">
                <params>
                    <param name="listener" type="Object"/>
                </params>
                <declaration name="mouseWheelListener" type="MouseWheelListener" line="211"/>
            </method>
            <javadoc line="221">
                Set the souce of this event. As the event is fired up the tree the source
                  of the event will keep changing to reflect the scenegraph object that is
                  firing the event.                
                <@param>
                    m newSource the current source of the event to report                    
                </@param>
            </javadoc>
            <method name="setSource" type="void" line="228">
                <params>
                    <param name="newSource" type="Object"/>
                </params>
            </method>
            <javadoc line="232">
                Returns this event as a mouse event. This reduces the need to cast
                  instances of this interface when they are known to all extend MouseEvent.                
                <@return>
                    n this object casted to a MouseEvent                    
                </@return>
            </javadoc>
            <method name="asMouseEvent" type="MouseEvent" line="238"/>
        </class>
    </source>