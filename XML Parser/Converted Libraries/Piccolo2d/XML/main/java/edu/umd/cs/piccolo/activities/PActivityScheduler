<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.activities">
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.ActionListener"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="javax.swing.Timer"/>
        <import package="edu.umd.cs.piccolo.PRoot"/>
        <import package="edu.umd.cs.piccolo.util.PUtil"/>
        <class name="PActivityScheduler" line="42">
            <implements interface="Serializable"/>
            <javadoc line="42">
                &lt;b&gt;PActivityScheduler&lt;/b&gt; is responsible for maintaining a list of
                 * activities. It is given a chance to process these activities from the PRoot&apos;s
                 * processInputs() method. Most users will not need to use the
                 * PActivityScheduler directly, instead you should look at:
                 * &lt;ul&gt;
                 * &lt;li&gt;PNode.addActivity - to schedule a new activity
                 * &lt;li&gt;PActivity.terminate - to terminate a running activity
                 * &lt;li&gt;PRoot.processInputs - already calls processActivities for you.
                 * &lt;/ul&gt;                
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="57"/>
            <declaration name="activityTimer" type="Timer" line="58"/>
            <declaration name="root" type="PRoot" line="59"/>
            <declaration name="activities" type="List" line="60"/>
            <declaration name="activitiesChanged" type="boolean" line="61"/>
            <declaration name="animating" type="boolean" line="62"/>
            <declaration name="processingActivities" type="ArrayList" line="63"/>
            <javadoc line="65">
                Constructs an instance of PActivityScheduler. All activities it will
                 * schedule will take place on children of the rootNode provided.                
                <@param>
                    m rootNode root node of all activities to be performed. All nodes
                     * being animated should have this node as an ancestor.                    
                </@param>
            </javadoc>
            <method name="PActivityScheduler" type="constructor" line="72"/>
            <javadoc line="78">
                Returns the node from which all activities will be attached.                
                <@return>
                    n this scheduler's associated root node                    
                </@return>
            </javadoc>
            <method name="getRoot" type="PRoot" line="83"/>
            <javadoc line="87">
                Adds the given activity to the scheduler if not already found.                
                <@param>
                    m activity activity to be scheduled                    
                </@param>
            </javadoc>
            <method name="addActivity" type="void" line="92"/>
            <javadoc line="96">
                Add this activity to the scheduler. Sometimes it&apos;s useful to make sure
                 * that an activity is run after all other activities have been run. To do
                 * this set processLast to true when adding the activity.                
                <@param>
                    m activity activity to be scheduled                    
                </@param>
                <@param>
                    m processLast whether or not this activity should be performed after
                     * all other scheduled activities                    
                </@param>
            </javadoc>
            <method name="addActivity" type="void" line="105">
                <scope line="106"/>
                <scope line="112"/>
                <scope line="115"/>
                <scope line="121"/>
            </method>
            <javadoc line="126">
                Removes the given activity from the scheduled activities. Does nothing if
                 * it&apos;s not found.                
                <@param>
                    m activity the activity to be removed                    
                </@param>
            </javadoc>
            <method name="removeActivity" type="void" line="132">
                <scope line="133"/>
                <scope line="140"/>
            </method>
            <javadoc line="145">
                Removes all activities from the list of scheduled activities.                
            </javadoc>
            <method name="removeAllActivities" type="void" line="148"/>
            <javadoc line="154">
                Returns a reference to the current activities list. Handle with care.                
                <@return>
                    n reference to the current activities list.                    
                </@return>
            </javadoc>
            <method name="getActivitiesReference" type="List" line="159"/>
            <javadoc line="163">
                Process all scheduled activities for the given time. Each activity is
                 * given one &quot;step&quot;, equivalent to one frame of animation.                
                <@param>
                    m currentTime the current unix time in milliseconds.                    
                </@param>
            </javadoc>
            <method name="processActivities" type="void" line="169">
                <declaration name="size" type="int" line="170"/>
                <scope line="171">
                    <scope line="173">
                        <declaration name="each" type="PActivity" line="174"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="181">
                Return true if any of the scheduled activities are animations.                
                <@return>
                    n true if any of the scheduled activities are animations.                    
                </@return>
            </javadoc>
            <method name="getAnimating" type="boolean" line="186">
                <scope line="187">
                    <scope line="189">
                        <declaration name="each" type="PActivity" line="190"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="198">
                Starts the current activity timer. Multiple calls to this method are
                 * ignored.                
            </javadoc>
            <method name="startActivityTimer" type="void" line="202"/>
            <javadoc line="206">
                Stops the current activity timer.                
            </javadoc>
            <method name="stopActivityTimer" type="void" line="209"/>
            <javadoc line="213">
                Returns the activity timer. Creating it if necessary.                
                <@return>
                    n a Timer instance.                    
                </@return>
            </javadoc>
            <method name="getActivityTimer" type="Timer" line="218">
                <scope line="219">
                    <anonymous_class line="220">
                        <method name="actionPerformed" type="void" line="221"/>
                    </anonymous_class>
                </scope>
            </method>
        </class>
    </source>