<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.activities">
        <import package="java.awt.geom.AffineTransform"/>
        <import package="edu.umd.cs.piccolo.util.PAffineTransform"/>
        <class name="PTransformActivity" extends="PInterpolatingActivity" line="35">
            <javadoc line="35">
                &lt;b&gt;PTransformActivity&lt;/b&gt; interpolates between two transforms setting its
                 * target&apos;s transform as it goes. See PNode. animate*() for an example of this
                 * activity in used. The source transform is retrieved from the target just
                 * before the animation is scheduled to start.
                 * &lt;P&gt;                
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="STATIC_TRANSFORM" type="PAffineTransform" line="46"/>
            <declaration name="source" type="double[]" line="48"/>
            <declaration name="destination" type="double[]" line="49"/>
            <declaration name="target" type="Target" line="50"/>
            <interface name="Target">
                <javadoc line="52">
                    &lt;b&gt;Target&lt;/b&gt; Objects that want to get transformed by the transform
                     * activity must implement this interface. See PNode.animateToTransform()
                     * for one way to do this.                    
                </javadoc>
                <method name="setTransform" type="void" line="59"/>
                <javadoc line="59">
                    This will be called by the transform activity for each new transform
                     * that it computes while it is stepping.                    
                    <@param>
                        m aTransform the transform to be applied to the target.                        
                    </@param>
                </javadoc>
                <method name="getSourceMatrix" type="void" line="67"/>
                <javadoc line="67">
                    This method is called right before the transform activity starts.
                     * That way an object is always animated from its current position.                    
                    <@param>
                        m aSource array to be populated with the target's gurrent matrix                        
                    </@param>
                </javadoc>
            </interface>
            <javadoc line="76">
                Constructs a transform activity that will last for the specified
                 * duration, will update at the given step rate and will be applied to the
                 * target.
                 * Requires that the developer follow up with a setDestinationTransform
                 * call, otherwise the transition is undefined.                
                <@param>
                    m duration duration in milliseconds of the entire activity                    
                </@param>
                <@param>
                    m stepRate interval in milliseconds between successive animation
                     * steps                    
                </@param>
                <@param>
                    m target the target of the activity                    
                </@param>
            </javadoc>
            <method name="PTransformActivity" type="constructor" line="89"/>
            <javadoc line="93">
                Constructs a activity that will change the target&apos;s transform in the
                 * destination transform. It will last for the specified duration, will
                 * update at the given step rate.                
                <@param>
                    m duration duration in milliseconds of the entire activity                    
                </@param>
                <@param>
                    m stepRate interval in milliseconds between successive animation
                     * steps                    
                </@param>
                <@param>
                    m target the target of the activity                    
                </@param>
                <@param>
                    m destination transform that the target will be after the ativity is
                     * finished                    
                </@param>
            </javadoc>
            <method name="PTransformActivity" type="constructor" line="107"/>
            <javadoc line="111">
                Create a new PTransformActivity.
                 * &lt;P&gt;                
                <@param>
                    m duration the length of one loop of the activity                    
                </@param>
                <@param>
                    m stepRate the amount of time between steps of the activity                    
                </@param>
                <@param>
                    m loopCount number of times the activity should reschedule itself                    
                </@param>
                <@param>
                    m mode defines how the activity interpolates between states                    
                </@param>
                <@param>
                    m target the object that the activity will be applied to and where
                     * the source state will be taken from.                    
                </@param>
                <@param>
                    m destination the destination color state                    
                </@param>
            </javadoc>
            <method name="PTransformActivity" type="constructor" line="124">
                <scope line="129"/>
            </method>
            <javadoc line="134">
                Whether each step invalidates paint.                
                <@return>
                    n true since a node transform affects it's node's display                    
                </@return>
            </javadoc>
            <method name="isAnimation" type="boolean" line="139"/>
            <javadoc line="143">
                Return the final transform that will be set on the transform activities
                 * target when the transform activity stops stepping.                
                <@return>
                    n returns the final transform as an array of doubles                    
                </@return>
            </javadoc>
            <method name="getDestinationTransform" type="double[]" line="149">
                <scope line="150"/>
                <scope line="153"/>
            </method>
            <javadoc line="158">
                Set the final transform that will be set on the transform activities
                 * target when the transform activity stops stepping.                
                <@param>
                    m newDestination an array of doubles representing the destination
                     * transform                    
                </@param>
            </javadoc>
            <method name="setDestinationTransform" type="void" line="165">
                <scope line="166"/>
                <scope line="169"/>
            </method>
            <javadoc line="174">
                Is invoked when the activity is started. Ensures that setTransform is
                 * called on the target even before the first step.                
            </javadoc>
            <method name="activityStarted" type="void" line="178">
                <scope line="179"/>
            </method>
            <javadoc line="185">
                Set&apos;s the target value to be the interpolation between the source and
                 * destination transforms.
                 * A value of 0 for zeroToOne means that the target should have the source
                 * transform. A value of 1 for zeroToOne means that the target should have
                 * the destination transform.                
                <@param>
                    m zeroToOne how far along the activity has progressed. 0 = not at
                     * all, 1 = completed                    
                </@param>
            </javadoc>
            <method name="setRelativeTargetValue" type="void" line="196"/>
        </class>
    </source>