<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.examples">
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Paint"/>
        <import package="java.util.ArrayList"/>
        <import package="edu.umd.cs.piccolo.PCamera"/>
        <import package="edu.umd.cs.piccolo.PCanvas"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.nodes.PPath"/>
        <import package="edu.umd.cs.piccolo.util.PBounds"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <import package="edu.umd.cs.piccolox.PFrame"/>
        <import package="edu.umd.cs.piccolox.event.PSelectionEventHandler"/>
        <class name="GroupExample" extends="PFrame" line="45">
            <javadoc line="45">
                An example of how to implement decorator groups. Decorator groups are nodes
                 * that base their bounds and rendering on their children. This seems to be a
                 * common type of visual node that requires some potentially non-obvious
                 * subclassing to get right.
                 * Both a volatile and a non-volatile implementation are shown. The volatile
                 * implementation might be used in cases where you want to keep a
                 * scale-independent pen width border around a group of objects. The
                 * non-volatile implementation can be used in more standard cases where the
                 * decorator&apos;s bounds are stable during zooming.                
                <@author>
                    r Lance Good                    
                </@author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="61"/>
            <javadoc line="61">
                                
            </javadoc>
            <method name="GroupExample" type="constructor" line="66"/>
            <method name="GroupExample" type="constructor" line="70"/>
            <method name="initialize" type="void" line="74">
                <comment line="75">
                    Create a decorator group that is NOT volatile                    
                </comment>
                <comment line="75">
                    Put some nodes under the group for it to decorate                    
                </comment>
                <comment line="75">
                    Add everything to the Piccolo hierarchy                    
                </comment>
                <comment line="75">
                    Create a decorator group that IS volatile                    
                </comment>
                <comment line="75">
                    Put some nodes under the group for it to decorate                    
                </comment>
                <comment line="75">
                    Add everything to the Piccolo hierarchy                    
                </comment>
                <comment line="75">
                    Create a selection handler so we can see that the decorator actually                    
                </comment>
                <comment line="75">
                    works                    
                </comment>
                <declaration name="dg" type="DecoratorGroup" line="80"/>
                <declaration name="p1" type="PPath" line="84"/>
                <declaration name="p2" type="PPath" line="86"/>
                <declaration name="vdg" type="VolatileDecoratorGroup" line="95"/>
                <declaration name="p3" type="PPath" line="99"/>
                <declaration name="p4" type="PPath" line="101"/>
                <declaration name="selectableParents" type="ArrayList" line="111"/>
                <declaration name="ps" type="PSelectionEventHandler" line="115"/>
            </method>
            <method name="main" type="void" line="119"/>
        </class>
        <class name="DecoratorGroup" extends="PNode" line="124">
            <javadoc line="124">
                This is the non-volatile implementation of a decorator group that paints a
                 * background rectangle based on the bounds of its children.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="129"/>
            <javadoc line="129">
                                
            </javadoc>
            <declaration name="INDENT" type="int" line="134"/>
            <declaration name="cachedChildBounds" type="PBounds" line="136"/>
            <declaration name="comparisonBounds" type="PBounds" line="137"/>
            <method name="DecoratorGroup" type="constructor" line="139"/>
            <javadoc line="143">
                Change the default paint to fill an expanded bounding box based on its
                 * children&apos;s bounds                
            </javadoc>
            <method name="paint" type="void" line="147">
                <declaration name="paint" type="Paint" line="148"/>
                <scope line="149">
                    <declaration name="g2" type="Graphics2D" line="150"/>
                    <declaration name="bounds" type="PBounds" line="153"/>
                </scope>
            </method>
            <javadoc line="161">
                Change the full bounds computation to take into account that we are
                 * expanding the children&apos;s bounds Do this instead of overriding
                 * getBoundsReference() since the node is not volatile                
            </javadoc>
            <method name="computeFullBounds" type="PBounds" line="166">
                <declaration name="result" type="PBounds" line="167"/>
            </method>
            <javadoc line="177">
                This is a crucial step. We have to override this method to invalidate the
                 * paint each time the bounds are changed so we repaint the correct region                
            </javadoc>
            <method name="validateFullBounds" type="boolean" line="181">
                <scope line="184"/>
            </method>
        </class>
        <class name="VolatileDecoratorGroup" extends="PNode" line="191">
            <javadoc line="191">
                This is the volatile implementation of a decorator group that paints a
                 * background rectangle based on the bounds of its children.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="196"/>
            <javadoc line="196">
                                
            </javadoc>
            <declaration name="INDENT" type="int" line="201"/>
            <declaration name="cachedChildBounds" type="PBounds" line="203"/>
            <declaration name="comparisonBounds" type="PBounds" line="204"/>
            <declaration name="renderCamera" type="PCamera" line="205"/>
            <method name="VolatileDecoratorGroup" type="constructor" line="207"/>
            <javadoc line="212">
                Indicate that the bounds are volatile for this group                
            </javadoc>
            <method name="getBoundsVolatile" type="boolean" line="215"/>
            <javadoc line="219">
                Since our bounds are volatile, we can override this method to indicate
                 * that we are expanding our bounds beyond our children                
            </javadoc>
            <method name="getBoundsReference" type="PBounds" line="223">
                <declaration name="bds" type="PBounds" line="224"/>
                <declaration name="scaledIndent" type="double" line="228"/>
            </method>
            <javadoc line="236">
                This is a crucial step. We have to override this method to invalidate the
                 * paint each time the bounds are changed so we repaint the correct region                
            </javadoc>
            <method name="validateFullBounds" type="boolean" line="240">
                <scope line="243"/>
            </method>
        </class>
    </source>