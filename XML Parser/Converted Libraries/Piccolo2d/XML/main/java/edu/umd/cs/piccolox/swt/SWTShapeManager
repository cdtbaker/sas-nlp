<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.swt">
        <import package="java.awt.Shape"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.PathIterator"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.util.ArrayList"/>
        <import package="org.eclipse.swt.graphics.Rectangle"/>
        <class name="SWTShapeManager" line="40">
            <javadoc line="40">
                SWT shape manager.                
                <@author>
                    r Lance Good                    
                </@author>
            </javadoc>
            <declaration name="IDENTITY_XFORM" type="AffineTransform" line="46"/>
            <declaration name="aPoint" type="Point2D" line="47"/>
            <declaration name="segList" type="ArrayList" line="48"/>
            <declaration name="pts" type="double[]" line="49"/>
            <javadoc line="51">
                Apply the specified transform to the specified rectangle, modifying the
                  rect.                
                <@param>
                    m rect The rectangle to be transformed                    
                </@param>
                <@param>
                    m at The transform to use to transform the rectangle                    
                </@param>
            </javadoc>
            <method name="transform" type="void" line="58">
                <params>
                    <param name="rect" type="Rectangle2D"/>
                    <param name="at" type="AffineTransform"/>
                </params>
                <comment line="59">
                    First, transform all 4 corners of the rectangle                    
                </comment>
                <comment line="59">
                    s[0] = rect.getX(); // top left corner                    
                </comment>
                <comment line="59">
                    s[2] = rect.getX() + rect.getWidth(); // top right corner                    
                </comment>
                <comment line="59">
                    s[4] = rect.getX() + rect.getWidth(); // bottom right corner                    
                </comment>
                <comment line="59">
                    s[6] = rect.getX(); // bottom left corner                    
                </comment>
                <comment line="59">
                    Then, find the bounds of those 4 transformed points.                    
                </comment>
                <declaration name="minX" type="double" line="71"/>
                <declaration name="minY" type="double" line="72"/>
                <declaration name="maxX" type="double" line="73"/>
                <declaration name="maxY" type="double" line="74"/>
                <declaration name="i" type="int" line="75"/>
                <scope line="76">
                    <scope line="77"/>
                    <scope line="80"/>
                    <scope line="83"/>
                    <scope line="86"/>
                </scope>
            </method>
            <javadoc line="93">
                Populates the SWT rectangle with the provided Swing Rectangle2D&apos;s
                  coordinates. Rounding up to the nearest integer.                
                <@param>
                    m aRect awt rectangle to extract coordinates from                    
                </@param>
                <@param>
                    m sRect swt rectangle to populate                    
                </@param>
            </javadoc>
            <method name="awtToSWT" type="void" line="100">
                <params>
                    <param name="aRect" type="Rectangle2D"/>
                    <param name="sRect" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="107">
                Converts the provided shape into an array of point coordinates given as
                  one dimensional array with this format: x1,y1,x2,y3,....                
                <@param>
                    m shape shape to convert                    
                </@param>
                <@return>
                    n point coordinates given as one dimensional array with this
                      format: x1,y1,x2,y3,...                    
                </@return>
            </javadoc>
            <method name="shapeToPolyline" type="double[]" line="115">
                <params>
                    <param name="shape" type="Shape"/>
                </params>
                <declaration name="pi" type="PathIterator" line="119"/>
                <scope line="120">
                    <declaration name="segType" type="int" line="121"/>
                </scope>
                <declaration name="polyObj" type="double[]" line="138"/>
                <scope line="139">
                    <declaration name="p2" type="Point2D" line="140"/>
                </scope>
            </method>
            <javadoc line="148">
                Transforms the given points by the transform provided, leaving the
                  original points untouched.                
                <@param>
                    m points points to transform                    
                </@param>
                <@param>
                    m at transform to apply                    
                </@param>
                <@return>
                    n transformed coordinates given in format x1,y2,x2,y2,...                    
                </@return>
            </javadoc>
            <method name="transform" type="int[]" line="156">
                <params>
                    <param name="points" type="double[]"/>
                    <param name="at" type="AffineTransform"/>
                </params>
                <declaration name="intPts" type="int[]" line="157"/>
                <scope line="158"/>
            </method>
        </class>
    </source>