<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.swt">
        <import package="java.awt.event.ActionListener"/>
        <import package="javax.swing.Timer"/>
        <import package="org.eclipse.swt.widgets.Composite"/>
        <import package="edu.umd.cs.piccolo.PRoot"/>
        <class name="PSWTRoot" line="39">
            <extends class="PRoot"/>
            <javadoc line="39">
                &lt;b&gt;PSWTRoot&lt;/b&gt; is a subclass of PRoot that is designed to work in the SWT
                  environment. In particular it uses SWTTimers and the SWT event dispatch
                  thread. With the current setup only a single PSWTCanvas is expected to be
                  connected to a root.                
                <@version>
                    n 1.1                    
                </@version>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="49"/>
            <declaration name="composite" type="Composite" line="50"/>
            <javadoc line="52">
                Constructs a PSWTRoot attached to the provided composite.                
                <@param>
                    m composite composite PSWTRoot is responsible for                    
                </@param>
            </javadoc>
            <method name="PSWTRoot" type="constructor" line="57">
                <params>
                    <param name="composite" type="Composite"/>
                </params>
            </method>
            <javadoc line="61">
                Creates a timer that will fire the listener every delay milliseconds.                
                <@param>
                    m delay time in milliseconds between firings of listener                    
                </@param>
                <@param>
                    m listener listener to be fired                    
                </@param>
                <@return>
                    n the created timer                    
                </@return>
            </javadoc>
            <method name="createTimer" type="Timer" line="69">
                <params>
                    <param name="delay" type="int"/>
                    <param name="listener" type="ActionListener"/>
                </params>
            </method>
            <javadoc line="73">
                Processes Inputs if any kind of IO needs to be done.                
            </javadoc>
            <method name="scheduleProcessInputsIfNeeded" type="void" line="76">
                <scope line="77"/>
                <scope line="82">
                    <anonymous_class line="85">
                        <method name="run" type="void" line="86"/>
                    </anonymous_class>
                </scope>
            </method>
        </class>
    </source>