<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolo.util">
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="javax.swing.SwingUtilities"/>
        <class name="PDebug" line="37">
            <javadoc line="37">
                &lt;b&gt;PDebug&lt;/b&gt; is used to set framework wide debugging flags.
                 * &lt;P&gt;                
                <@version>
                    n 1.0                    
                </@version>
                <@author>
                    r Jesse Grosjean                    
                </@author>
            </javadoc>
            <declaration name="debugRegionManagement" type="boolean" line="45"/>
            <javadoc line="45">
                Set to true to display clip bounds boxes.                
            </javadoc>
            <declaration name="debugPaintCalls" type="boolean" line="48"/>
            <javadoc line="48">
                Set to true if you want to display common errors with painting and
                 * threading.                
            </javadoc>
            <declaration name="debugPrintFrameRate" type="boolean" line="54"/>
            <javadoc line="54">
                Set to true to display frame rate in the console.                
            </javadoc>
            <declaration name="debugPrintUsedMemory" type="boolean" line="57"/>
            <javadoc line="57">
                Set to true to display used memory in console.                
            </javadoc>
            <declaration name="debugBounds" type="boolean" line="60"/>
            <javadoc line="60">
                Displays bounding boxes around nodes. Used in PCamera.                
            </javadoc>
            <declaration name="debugFullBounds" type="boolean" line="63"/>
            <javadoc line="63">
                Displays a tint to all shapes within a bounding box.                
            </javadoc>
            <declaration name="debugThreads" type="boolean" line="66"/>
            <javadoc line="66">
                Whether to complain whenever common threading issues occur.                
            </javadoc>
            <declaration name="printResultsFrameRate" type="int" line="69"/>
            <javadoc line="69">
                How often in frames result info should be printed to the console.                
            </javadoc>
            <declaration name="debugPaintColor" type="int" line="72"/>
            <declaration name="framesProcessed" type="long" line="73"/>
            <declaration name="startProcessingOutputTime" type="long" line="74"/>
            <declaration name="startProcessingInputTime" type="long" line="75"/>
            <declaration name="processOutputTime" type="long" line="76"/>
            <declaration name="processInputTime" type="long" line="77"/>
            <declaration name="processingOutput" type="boolean" line="78"/>
            <method name="PDebug" type="constructor" line="80"/>
            <javadoc line="84">
                Generates a color for use while debugging.                
                <@return>
                    n a color for use while debugging.                    
                </@return>
            </javadoc>
            <method name="getDebugPaintColor" type="Color" line="89">
                <declaration name="color" type="int" line="90"/>
            </method>
            <javadoc line="94">
                Checks that process inputs is being doing from the Swing Dispatch Thread.                
            </javadoc>
            <method name="scheduleProcessInputs" type="void" line="97">
                <scope line="98"/>
            </method>
            <javadoc line="103">
                Ensures that painting is not invalidating paint regions and that it&apos;s
                 * being called from the dispatch thread.                
            </javadoc>
            <method name="processRepaint" type="void" line="107">
                <scope line="108"/>
                <scope line="113"/>
            </method>
            <javadoc line="118">
                Returns whether output is being processed.                
                <@return>
                    n whether output is being processed                    
                </@return>
            </javadoc>
            <method name="getProcessingOutput" type="boolean" line="123"/>
            <javadoc line="127">
                Records that processing of ouptut has begun.                
            </javadoc>
            <method name="startProcessingOutput" type="void" line="130"/>
            <javadoc line="135">
                Flags processing of output as finished. Updates all stats in the process.                
                <@param>
                    m g graphics context in which processing has finished                    
                </@param>
            </javadoc>
            <method name="endProcessingOutput" type="void" line="140">
                <scope line="144">
                    <scope line="145"/>
                    <scope line="153"/>
                </scope>
                <scope line="158">
                    <declaration name="g2" type="Graphics2D" line="159"/>
                </scope>
            </method>
            <javadoc line="167">
                Records that processing of input has started.                
            </javadoc>
            <method name="startProcessingInput" type="void" line="170"/>
            <javadoc line="174">
                Records that processing of input has finished.                
            </javadoc>
            <method name="endProcessingInput" type="void" line="177"/>
            <javadoc line="181">
                Return how many frames are processed and painted per second. Note that
                 * since piccolo doesn&apos;t paint continuously this rate will be slow unless
                 * you are interacting with the system or have activities scheduled.                
                <@return>
                    n frame rate achieved                    
                </@return>
            </javadoc>
            <method name="getTotalFPS" type="double" line="188">
                <scope line="189"/>
                <scope line="192"/>
            </method>
            <javadoc line="197">
                Return the frames per second used to process input events and activities.                
                <@return>
                    n # of frames per second that were allocated to processing input                    
                </@return>
            </javadoc>
            <method name="getInputFPS" type="double" line="202">
                <scope line="203"/>
                <scope line="206"/>
            </method>
            <javadoc line="211">
                Return the frames per seconds used to paint graphics to the screen.                
                <@return>
                    n # of frames per second that were used up to processing output                    
                </@return>
            </javadoc>
            <method name="getOutputFPS" type="double" line="216">
                <scope line="217"/>
                <scope line="220"/>
            </method>
            <javadoc line="225">
                Return the number of frames that have been processed since the last time
                 * resetFPSTiming was called.                
                <@return>
                    n total number of frames processed                    
                </@return>
            </javadoc>
            <method name="getFramesProcessed" type="long" line="231"/>
            <javadoc line="235">
                Reset the variables used to track FPS. If you reset seldom they you will
                 * get good average FPS values, if you reset more often only the frames
                 * recorded after the last reset will be taken into consideration.                
            </javadoc>
            <method name="resetFPSTiming" type="void" line="240"/>
            <javadoc line="246">
                Returns an approximation of the amount of memory that is being used.
                 * Not that this call might affecting timings.                
                <@return>
                    n approximate # of bytes of memory used                    
                </@return>
            </javadoc>
            <method name="getApproximateUsedMemory" type="long" line="253">
                <declaration name="totalMemory" type="long" line="256"/>
                <declaration name="free" type="long" line="257"/>
            </method>
        </class>
    </source>