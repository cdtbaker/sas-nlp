<?xml version="1.0" encoding="UTF-8"?>
    <source package="edu.umd.cs.piccolox.nodes">
        <import package="java.awt.Color"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.FontMetrics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.LineBreakMeasurer"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.awt.font.TextLayout"/>
        <import package="java.awt.geom.Line2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.text.AttributedString"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.StringTokenizer"/>
        <import package="javax.swing.text.AttributeSet"/>
        <import package="javax.swing.text.BadLocationException"/>
        <import package="javax.swing.text.DefaultStyledDocument"/>
        <import package="javax.swing.text.Document"/>
        <import package="javax.swing.text.Element"/>
        <import package="javax.swing.text.StyleConstants"/>
        <import package="javax.swing.text.StyleContext"/>
        <import package="edu.umd.cs.piccolo.PNode"/>
        <import package="edu.umd.cs.piccolo.util.PPaintContext"/>
        <class name="PStyledText" extends="PNode" line="60">
            <comment line="61">
                Because swing doesn&apos;t use fractional font metrics by default, we use                
            </comment>
            <comment line="61">
                LineBreakMeasurer to find out where Swing is going to break them                
            </comment>
            <javadoc line="60">
                @author Lance Good                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="65"/>
            <declaration name="SWING_FRC" type="FontRenderContext" line="67"/>
            <javadoc line="67">
                Font rendering context used for all PStyledText instances.                
            </javadoc>
            <declaration name="paintLine" type="Line2D" line="70"/>
            <javadoc line="70">
                Used while painting underlines.                
            </javadoc>
            <declaration name="document" type="Document" line="73"/>
            <javadoc line="73">
                Underlying document used to handle the complexities involved with
                 * arbitrary text and formatting.                
            </javadoc>
            <declaration name="stringContents" type="ArrayList" line="79"/>
            <javadoc line="79">
                String contents of the document.                
            </javadoc>
            <declaration name="lines" type="LineInfo[]" line="82"/>
            <javadoc line="82">
                Tracks the information about line metrics within the document.                
            </javadoc>
            <declaration name="editing" type="boolean" line="85"/>
            <javadoc line="85">
                Whether this node is currently being edited.                
            </javadoc>
            <declaration name="insets" type="Insets" line="88"/>
            <javadoc line="88">
                Insets represent how far away from the bounding box text will be drawn.                
            </javadoc>
            <declaration name="constrainHeightToTextHeight" type="boolean" line="91"/>
            <javadoc line="91">
                Whether width will be forced to match containing text&apos;s height.                
            </javadoc>
            <declaration name="constrainWidthToTextWidth" type="boolean" line="94"/>
            <javadoc line="94">
                Whether width will be forced to match containing text&apos;s width.                
            </javadoc>
            <javadoc line="97">
                Constructs an empty PStyledText element.                
            </javadoc>
            <method name="PStyledText" type="constructor" line="100"/>
            <javadoc line="103">
                Controls whether this node changes its width to fit the width of its
                 * text. If flag is true it does; if flag is false it doesn&apos;t                
                <@param>
                    m constrainWidthToTextWidth whether node's width should be
                     * constrained to the width of its text                    
                </@param>
            </javadoc>
            <method name="setConstrainWidthToTextWidth" type="void" line="110"/>
            <javadoc line="115">
                Controls whether this node changes its height to fit the height of its
                 * text. If flag is true it does; if flag is false it doesn&apos;t                
                <@param>
                    m constrainHeightToTextHeight whether node's height should be
                     * constrained to the height of its text                    
                </@param>
            </javadoc>
            <method name="setConstrainHeightToTextHeight" type="void" line="122"/>
            <javadoc line="127">
                Controls whether this node changes its width to fit the width of its
                 * text. If flag is true it does; if flag is false it doesn&apos;t                
                <@return>
                    n true if node is constrained to the width of its text                    
                </@return>
            </javadoc>
            <method name="getConstrainWidthToTextWidth" type="boolean" line="133"/>
            <javadoc line="137">
                Controls whether this node changes its height to fit the height of its
                 * text. If flag is true it does; if flag is false it doesn&apos;t                
                <@return>
                    n true if node is constrained to the height of its text                    
                </@return>
            </javadoc>
            <method name="getConstrainHeightToTextHeight" type="boolean" line="143"/>
            <javadoc line="147">
                Get the document for this PStyledText. Document is used as the node&apos;s
                 * model.                
                <@return>
                    n internal document used as a model of this PStyledText                    
                </@return>
            </javadoc>
            <method name="getDocument" type="Document" line="153"/>
            <javadoc line="157">
                Set the document on this PStyledText. Document is used as the node&apos;s
                 * model.                
                <@param>
                    m document to be used as the model for this PStyledText                    
                </@param>
            </javadoc>
            <method name="setDocument" type="void" line="163">
                <comment line="164">
                    Save the document                    
                </comment>
            </method>
            <javadoc line="170">
                Enforce that the current display matches the styling of the underlying
                 * document as closely as possible.                
            </javadoc>
            <method name="syncWithDocument" type="void" line="174">
                <comment line="175">
                    First get the actual text and stick it in an Attributed String                    
                </comment>
                <comment line="175">
                    The paragraph start and end indices                    
                </comment>
                <comment line="175">
                    The default style context - which will be reused                    
                </comment>
                <declaration name="documentString" type="String" line="178"/>
                <scope line="179"/>
                <scope line="182"/>
                <declaration name="pEnds" type="ArrayList" line="190"/>
                <declaration name="styleContext" type="StyleContext" line="193"/>
                <declaration name="pos" type="int" line="195"/>
                <declaration name="paragraphRange" type="RunInfo" line="196"/>
                <declaration name="attributedString" type="AttributedString" line="198"/>
                <declaration name="contentIterator" type="Iterator" line="200"/>
                <declaration name="paragraphIterator" type="Iterator" line="201"/>
                <scope line="202">
                    <declaration name="curElement" type="Element" line="209"/>
                    <declaration name="rootElement" type="Element" line="213"/>
                    <scope line="217">
                        <declaration name="attributes" type="AttributeSet" line="221"/>
                        <declaration name="foreground" type="Color" line="222"/>
                        <declaration name="font" type="Font" line="229"/>
                    </scope>
                    <scope line="235">
                        <scope line="238">
                            <declaration name="attributes" type="AttributeSet" line="242"/>
                            <declaration name="foreground" type="Color" line="243"/>
                            <declaration name="font" type="Font" line="250"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="265">
                Returns the first leaf encountered by drilling into the document for the
                 * given position.                
                <@param>
                    m pos position under which we're trying to find a leaf                    
                </@param>
                <@param>
                    m rootElement top most element in the document tree                    
                </@param>
                <@return>
                    n Leaf element that corresponds to the position provided in the
                     * document                    
                </@return>
            </javadoc>
            <method name="drillDownFromRoot" type="Element" line="275">
                <comment line="276">
                    Before each pass, start at the root                    
                </comment>
                <comment line="276">
                    Now we descend the hierarchy until we get to a leaf                    
                </comment>
                <declaration name="curElement" type="Element" line="277"/>
                <scope line="280"/>
            </method>
            <method name="applyFontAttribute" type="void" line="288">
                <scope line="289"/>
            </method>
            <method name="applyStrikeThroughAttribute" type="void" line="297">
                <declaration name="strikethrough" type="boolean" line="298"/>
                <scope line="299"/>
            </method>
            <method name="applyUnderlineAttribute" type="void" line="308">
                <declaration name="underline" type="boolean" line="309"/>
                <scope line="310"/>
            </method>
            <method name="applyBackgroundAttribute" type="void" line="319">
                <scope line="320">
                    <declaration name="background" type="Color" line="321"/>
                </scope>
            </method>
            <method name="extractFont" type="Font" line="329">
                <declaration name="font" type="Font" line="330"/>
                <scope line="331"/>
                <scope line="335">
                    <scope line="336"/>
                    <scope line="339"/>
                </scope>
            </method>
            <method name="extractFontFromDefaultStyledDocument" type="Font" line="347">
                <declaration name="font" type="Font" line="348"/>
                <scope line="349">
                    <scope line="351"/>
                </scope>
            </method>
            <method name="extractParagraphRanges" type="ArrayList" line="358">
                <comment line="359">
                    The paragraph start and end indices                    
                </comment>
                <comment line="359">
                    The current position in the specified range                    
                </comment>
                <comment line="359">
                    lastNewLine is used to detect the case when two newlines follow                    
                </comment>
                <comment line="359">
                    in direct succession                    
                </comment>
                <comment line="359">
                    &amp; lastNewLine should be true to start in case the first character                    
                </comment>
                <comment line="359">
                    is a newline                    
                </comment>
                <comment line="359">
                    Add one more newline if the last character was a newline                    
                </comment>
                <declaration name="paragraphRanges" type="ArrayList" line="360"/>
                <declaration name="pos" type="int" line="363"/>
                <declaration name="tokenizer" type="StringTokenizer" line="365"/>
                <declaration name="lastNewLine" type="boolean" line="371"/>
                <scope line="373">
                    <declaration name="token" type="String" line="374"/>
                    <scope line="377">
                        <scope line="378"/>
                    </scope>
                    <scope line="391"/>
                    <scope line="398"/>
                </scope>
                <scope line="410"/>
            </method>
            <javadoc line="418">
                Compute the bounds of the text wrapped by this node. The text layout is
                 * wrapped based on the bounds of this node. If the shrinkBoundsToFit
                 * parameter is true then after the text has been laid out the bounds of
                 * this node are shrunk to fit around those text bounds.                
            </javadoc>
            <method name="recomputeLayout" type="void" line="424">
                <scope line="425"/>
                <declaration name="linesList" type="ArrayList" line="429"/>
                <declaration name="textWidth" type="double" line="431"/>
                <declaration name="textHeight" type="double" line="432"/>
                <declaration name="contentIterator" type="Iterator" line="434"/>
                <scope line="436">
                    <declaration name="ats" type="AttributedString" line="437"/>
                    <declaration name="itr" type="AttributedCharacterIterator" line="438"/>
                    <declaration name="measurer" type="LineBreakMeasurer" line="440"/>
                    <declaration name="breakList" type="ArrayList" line="441"/>
                    <declaration name="lineInfo" type="LineInfo" line="451"/>
                    <declaration name="newLine" type="boolean" line="452"/>
                    <declaration name="lineWidth" type="double" line="453"/>
                    <scope line="454">
                        <declaration name="aTextLayout" type="TextLayout" line="455"/>
                        <scope line="457">
                            <declaration name="lineHeight" type="double" line="460"/>
                        </scope>
                        <declaration name="lineEnd" type="int" line="470"/>
                        <scope line="471"/>
                        <declaration name="sInfo" type="SegmentInfo" line="478"/>
                        <declaration name="metrics" type="FontMetrics" line="485"/>
                    </scope>
                    <declaration name="lineHeight" type="double" line="497"/>
                </scope>
            </method>
            <javadoc line="507">
                @param lineInfo                
                <@return>
                    n                    
                </@return>
            </javadoc>
            <method name="calculateLineHeightFromLineInfo" type="double" line="511">
                <declaration name="lineHeight" type="double" line="512"/>
                <scope line="513"/>
                <scope line="516"/>
            </method>
            <method name="constrainDimensionsIfNeeded" type="void" line="522">
                <scope line="523"/>
                <declaration name="newWidth" type="double" line="527"/>
                <declaration name="newHeight" type="double" line="528"/>
                <scope line="530"/>
                <scope line="534"/>
            </method>
            <method name="extractLineBreaks" type="ArrayList" line="543">
                <declaration name="breakList" type="ArrayList" line="544"/>
                <scope line="546">
                    <scope line="547"/>
                    <scope line="550"/>
                </scope>
            </method>
            <javadoc line="559">
                Get the height of the font at the beginning of the document.                
                <@return>
                    n height of font at the start of the document.                    
                </@return>
            </javadoc>
            <method name="getInitialFontHeight" type="double" line="564">
                <comment line="565">
                    Small assumption here that there is one root element - can fix                    
                </comment>
                <comment line="565">
                    for more general support later                    
                </comment>
                <declaration name="rootElement" type="Element" line="568"/>
                <declaration name="curElement" type="Element" line="569"/>
                <declaration name="context" type="StyleContext" line="570"/>
                <declaration name="font" type="Font" line="571"/>
                <declaration name="curFM" type="FontMetrics" line="573"/>
            </method>
            <javadoc line="578">
                {@inheritDoc}                
            </javadoc>
            <method name="paint" type="void" line="579">
                <scope line="580"/>
                <declaration name="x" type="float" line="584"/>
                <declaration name="y" type="float" line="585"/>
                <declaration name="bottomY" type="float" line="586"/>
                <declaration name="g2" type="Graphics2D" line="588"/>
                <scope line="590"/>
                <declaration name="curX" type="float" line="595"/>
                <declaration name="lineInfo" type="LineInfo" line="596"/>
                <scope line="597">
                    <scope line="602"/>
                    <scope line="606">
                        <declaration name="sInfo" type="SegmentInfo" line="607"/>
                        <declaration name="width" type="float" line="608"/>
                        <scope line="610"/>
                        <scope line="627"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="639">
                {@inheritDoc}                
            </javadoc>
            <method name="fullPaint" type="void" line="642">
                <scope line="643"/>
            </method>
            <javadoc line="648">
                Set whether this node is current in editing mode.                
                <@param>
                    m editing value to set editing flag                    
                </@param>
            </javadoc>
            <method name="setEditing" type="void" line="653"/>
            <javadoc line="657">
                Whether node is currently in editing state.                
                <@return>
                    n true if node is currently editing                    
                </@return>
            </javadoc>
            <method name="isEditing" type="boolean" line="662"/>
            <javadoc line="666">
                Set the insets of the text.                
                <@param>
                    m insets desired insets                    
                </@param>
            </javadoc>
            <method name="setInsets" type="void" line="671">
                <scope line="672"/>
            </method>
            <javadoc line="682">
                Get the insets of the text.                
                <@return>
                    n current text insets                    
                </@return>
            </javadoc>
            <method name="getInsets" type="Insets" line="687"/>
            <javadoc line="691">
                {@inheritDoc}                
            </javadoc>
            <method name="setBounds" type="boolean" line="692">
                <scope line="693"/>
            </method>
            <class name="RunInfo" line="701">
                <javadoc line="701">
                    Simple class to represent an range within the document.                    
                </javadoc>
                <declaration name="startIndex" type="int" line="705"/>
                <declaration name="endIndex" type="int" line="706"/>
                <javadoc line="708">
                    Constructs a RunInfo representing the range within the document from
                     * runStart to runLimit.                    
                    <@param>
                        m runStart starting index of the range                        
                    </@param>
                    <@param>
                        m runLimit ending index of the range                        
                    </@param>
                </javadoc>
                <method name="RunInfo" type="constructor" line="715"/>
                <javadoc line="720">
                    Returns whether the run is empty.                    
                    <@return>
                        n true is run is empty                        
                    </@return>
                </javadoc>
                <method name="isEmpty" type="boolean" line="725"/>
                <javadoc line="729">
                    Returns the length of the run.                    
                    <@return>
                        n length of run                        
                    </@return>
                </javadoc>
                <method name="length" type="int" line="734"/>
            </class>
            <class name="LineInfo" line="739">
                <javadoc line="739">
                    The info for rendering and computing the bounds of a line.                    
                </javadoc>
                <declaration name="segments" type="List" line="743"/>
                <javadoc line="743">
                    Segments which make up this line&apos;s formatting segments.                    
                </javadoc>
                <declaration name="maxAscent" type="double" line="746"/>
                <javadoc line="746">
                    Maximum of the line segments&apos; ascents.                    
                </javadoc>
                <declaration name="maxDescent" type="double" line="749"/>
                <javadoc line="749">
                    Maximum of the line segments&apos; descents.                    
                </javadoc>
                <declaration name="leading" type="double" line="752"/>
                <javadoc line="752">
                    Leading space at front of line segment.                    
                </javadoc>
                <javadoc line="755">
                    Creates a LineInfo that contains no segments.                    
                </javadoc>
                <method name="LineInfo" type="constructor" line="758"/>
            </class>
            <class name="SegmentInfo" line="763">
                <javadoc line="763">
                    Encapsulates information about a particular LineSegment.                    
                </javadoc>
                <declaration name="layout" type="TextLayout" line="767"/>
                <javadoc line="767">
                    Text Layout applied to the segment.                    
                </javadoc>
                <declaration name="font" type="Font" line="770"/>
                <javadoc line="770">
                    Font being used to render the segment.                    
                </javadoc>
                <declaration name="foreground" type="Color" line="773"/>
                <javadoc line="773">
                    Foreground (text) color of the segment.                    
                </javadoc>
                <declaration name="background" type="Color" line="776"/>
                <javadoc line="776">
                    Background color of the segment.                    
                </javadoc>
                <declaration name="underline" type="Boolean" line="779"/>
                <javadoc line="779">
                    Whether the segment is underlined.                    
                </javadoc>
                <javadoc line="782">
                    Construct a segment with null properties.                    
                </javadoc>
                <method name="SegmentInfo" type="constructor" line="783"/>
                <javadoc line="786">
                    Applies this particular SegmentInfo&apos;s font to the graphics object
                     * passed in.                    
                    <@param>
                        m g2 will have the font of this segment applied                        
                    </@param>
                </javadoc>
                <method name="applyFont" type="void" line="792">
                    <scope line="793"/>
                </method>
            </class>
        </class>
    </source>