<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.examples">
  <import name="java.awt.Color" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.util.ArrayList" />
  <import name="java.util.Random" />
  <import name="edu.umd.cs.piccolo.PCanvas" />
  <import name="edu.umd.cs.piccolo.PLayer" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.event.PDragSequenceEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PInputEvent" />
  <import name="edu.umd.cs.piccolo.nodes.PPath" />
  <import name="edu.umd.cs.piccolox.PFrame" />
  <class name="GraphEditorExample" extends="PFrame" startLine="44">
    <javadoc>
      <text>* Create a simple graph with some random nodes and connected edges. An event
 * handler allows users to drag nodes around, keeping the edges connected.
 * ported from .NET GraphEditorExample by Sun Hongmei.</text>
    </javadoc>
    <javadoc />
    <declaration type="long" name="serialVersionUID" />
    <method type="constructor" name="GraphEditorExample" startLine="57" endLine="59" />
    <method type="constructor" name="GraphEditorExample" startLine="61" endLine="63" />
    <method type="void" name="initialize" startLine="65" endLine="115">
      <declaration type="int" name="numNodes" />
      <declaration type="int" name="numEdges" />
      <declaration type="PLayer" name="nodeLayer" />
      <declaration type="PLayer" name="edgeLayer" />
      <declaration type="Random" name="rnd" />
      <declaration type="ArrayList" name="tmp" />
      <scope startLine="76" endLine="83">
        <declaration type="float" name="x" />
        <declaration type="float" name="y" />
        <declaration type="PPath" name="path" />
      </scope>
      <scope startLine="87" endLine="111">
        <declaration type="int" name="n1" />
        <declaration type="int" name="n2" />
        <declaration type="PNode" name="node1" />
        <declaration type="PNode" name="node2" />
        <declaration type="Point2D.Double" name="bound1" />
        <declaration type="Point2D.Double" name="bound2" />
        <declaration type="PPath" name="edge" />
      </scope>
      <comment>Initialize, and create a layer for the edges (always underneath the</comment>
      <comment>nodes)</comment>
      <comment>Create some random edges</comment>
      <comment>Each edge's Tag has an ArrayList used to store associated nodes</comment>
      <comment>Create event handler to move nodes and update edges</comment>
    </method>
    <method type="void" name="main" startLine="117" endLine="119" />
    <class name="NodeDragHandler" extends="PDragSequenceEventHandler" startLine="134">
      <method type="constructor" name="NodeDragHandler" startLine="135" endLine="137" />
      <method type="void" name="mouseEntered" startLine="139" endLine="143">
        <scope startLine="140" endLine="142" />
      </method>
      <method type="void" name="mouseExited" startLine="145" endLine="149">
        <scope startLine="146" endLine="148" />
      </method>
      <method type="void" name="drag" startLine="151" endLine="175">
        <declaration type="PNode" name="node" />
        <declaration type="ArrayList" name="edges" />
        <declaration type="int" name="i" />
        <scope startLine="158" endLine="174">
          <declaration type="PPath" name="edge" />
          <declaration type="ArrayList" name="nodes" />
          <declaration type="PNode" name="node1" />
          <declaration type="PNode" name="node2" />
          <declaration type="Point2D.Double" name="bound1" />
          <declaration type="Point2D.Double" name="bound2" />
          <comment>Note that the node's "FullBounds" must be used (instead of</comment>
          <comment>just the "Bound") because the nodes have non-identity</comment>
          <comment>transforms which must be included when determining their</comment>
          <comment>position.</comment>
        </scope>
      </method>
    </class>
    <comment>TODO eclipse formatter made this ugly</comment>
    <comment>/ <summary></comment>
    <comment>/ Simple event handler which applies the following actions to every node</comment>
    <comment>it is called on:</comment>
    <comment>/ * Turn node red when the mouse goes over the node</comment>
    <comment>/ * Turn node white when the mouse exits the node</comment>
    <comment>/ * Drag the node, and associated edges on mousedrag</comment>
    <comment>/ It assumes that the node's Tag references an ArrayList with a list of</comment>
    <comment>associated</comment>
    <comment>/ edges where each edge is a PPath which each have a Tag that references</comment>
    <comment>an ArrayList</comment>
    <comment>/ with a list of associated nodes.</comment>
    <comment>/ </summary></comment>
  </class>
</source>
