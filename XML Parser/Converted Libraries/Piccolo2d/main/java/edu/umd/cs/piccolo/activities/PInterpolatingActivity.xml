<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.activities">
  <import name="edu.umd.cs.piccolo.util.PUtil" />
  <class name="PInterpolatingActivity" extends="PActivity" startLine="33">
    <javadoc>
      <text>* <b>PInterpolatingActivity</b> interpolates between two states (source and
 * destination) over the duration of the activity. The interpolation can be
 * either linear or slow- in, slow-out.
 * <P>
 * The mode determines how the activity interpolates between the two states. The
 * default mode interpolates from source to destination, but you can also go
 * from destination to source, and from source to destination to source.
 * <P>
 * A loopCount of greater then one will make the activity reschedule itself when
 * it has finished. This makes the activity loop between the two states.
 * <P></text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc>
      <text>* Specifies that interpolation will be from the source value to the
 * destination value.</text>
    </javadoc>
    <declaration type="int" name="SOURCE_TO_DESTINATION" />
    <javadoc>
      <text>* Specifies that interpolation will be from the destination value to the
 * source value.</text>
    </javadoc>
    <declaration type="int" name="DESTINATION_TO_SOURCE" />
    <javadoc>
      <text>* Specifies that interpolation proceed from the source to the destination
 * then back to the source. Can be used to perform flashes. source value.</text>
    </javadoc>
    <declaration type="int" name="SOURCE_TO_DESTINATION_TO_SOURCE" />
    <declaration type="int" name="mode" />
    <declaration type="boolean" name="slowInSlowOut" />
    <declaration type="int" name="loopCount" />
    <declaration type="boolean" name="firstLoop" />
    <javadoc>
      <text>* Constructs an interpolating activity that will last the duration given.</text>
      <since>1.3</since>
      <param>duration duration in milliseconds of the entire activity</param>
    </javadoc>
    <method type="constructor" name="PInterpolatingActivity" startLine="80" endLine="82" />
    <javadoc>
      <text>* Constructs an interpolating activity that will last the duration given
 * and will update its target at the given rate.</text>
      <param>duration duration in milliseconds of the entire activity</param>
      <param>stepRate interval in milliseconds between updates to target</param>
    </javadoc>
    <method type="constructor" name="PInterpolatingActivity" startLine="91" endLine="93" />
    <javadoc>
      <text>* Constructs an interpolating activity that will last the duration given
 * and will update its target at the given rate. Once done, it will repeat
 * the loopCount times.</text>
      <param>duration duration in milliseconds of the entire activity</param>
      <param>stepRate interval in milliseconds between updates to target</param>
      <param>loopCount # of times to repeat this activity.</param>
      <param>mode controls the direction of the interpolation (source to
 * destination, destination to source, or source to destination
 * back to source)</param>
    </javadoc>
    <method type="constructor" name="PInterpolatingActivity" startLine="107" endLine="109" />
    <javadoc>
      <text>* Create a new PInterpolatingActivity.
 * <P></text>
      <param>duration the length of one loop of the activity</param>
      <param>stepRate the amount of time between steps of the activity</param>
      <param>startTime the time (relative to System.currentTimeMillis()) that
 * this activity should start. This value can be in the future.</param>
      <param>loopCount number of times the activity should reschedule itself</param>
      <param>mode defines how the activity interpolates between states</param>
    </javadoc>
    <method type="constructor" name="PInterpolatingActivity" startLine="123" endLine="129" />
    <javadoc>
      <text>* Set the amount of time that this activity should take to complete, after
 * the startStepping method is called. The duration must be greater then
 * zero so that the interpolation value can be computed.</text>
      <param>duration new duration of this activity</param>
    </javadoc>
    <method type="void" name="setDuration" startLine="138" endLine="144">
      <scope startLine="139" endLine="141" />
    </method>
    <javadoc>
      <text>* Return the mode used for interpolation.
 * Acceptable values are: SOURCE_TO_DESTINATION, DESTINATION_TO_SOURCE and
 * SOURCE_TO_DESTINATION_TO_SOURCE</text>
      <return>current mode of this activity</return>
    </javadoc>
    <method type="int" name="getMode" startLine="158" endLine="160" />
    <javadoc>
      <text>* Set the direction in which interpolation is going to occur.
 * Acceptable values are: SOURCE_TO_DESTINATION, DESTINATION_TO_SOURCE and
 * SOURCE_TO_DESTINATION_TO_SOURCE</text>
      <param>mode the new mode to use when interpolating</param>
    </javadoc>
    <method type="void" name="setMode" startLine="170" endLine="172" />
    <javadoc>
      <text>* Return the number of times the activity should automatically reschedule
 * itself after it has finished.</text>
      <return>number of times to repeat this activity</return>
    </javadoc>
    <method type="int" name="getLoopCount" startLine="180" endLine="182" />
    <javadoc>
      <text>* Set the number of times the activity should automatically reschedule
 * itself after it has finished.</text>
      <param>loopCount number of times to repeat this activity</param>
    </javadoc>
    <method type="void" name="setLoopCount" startLine="190" endLine="192" />
    <javadoc>
      <text>* Return true if the activity is executing its first loop. Subclasses
 * normally initialize their source state on the first loop.</text>
      <return>true if executing first loop</return>
    </javadoc>
    <method type="boolean" name="getFirstLoop" startLine="200" endLine="202" />
    <javadoc>
      <text>* Set if the activity is executing its first loop. Subclasses normally
 * initialize their source state on the first loop. This method will rarely
 * need to be called, unless your are reusing activities.</text>
      <param>firstLoop true if executing first loop</param>
    </javadoc>
    <method type="void" name="setFirstLoop" startLine="211" endLine="213" />
    <javadoc>
      <text>* Returns whether this interpolation accelerates and then decelerates as it
 * interpolates.</text>
      <return>true if accelerations are being applied apply</return>
    </javadoc>
    <method type="boolean" name="getSlowInSlowOut" startLine="221" endLine="223" />
    <javadoc>
      <text>* Sets whether this interpolation accelerates and then decelerates as it
 * interpolates.</text>
      <param>isSlowInSlowOut true if this interpolation inovolves some
 * accelerations</param>
    </javadoc>
    <method type="void" name="setSlowInSlowOut" startLine="232" endLine="234" />
    <javadoc>
      <text>* Called when activity is started. Makes sure target value is set properly
 * for start of activity.</text>
    </javadoc>
    <method type="void" name="activityStarted" startLine="248" endLine="251" />
    <javadoc>
      <text>* Called at each step of the activity. Sets the current position taking
 * mode into account.</text>
      <param>elapsedTime number of milliseconds since the activity began</param>
    </javadoc>
    <method type="void" name="activityStep" startLine="260" endLine="273">
      <declaration type="float" name="t" />
      <scope startLine="268" endLine="270" />
    </method>
    <javadoc>
      <text>* Called whenever the activity finishes. Reschedules it if the value of
 * loopCount is > 0.</text>
    </javadoc>
    <method type="void" name="activityFinished" startLine="279" endLine="292">
      <declaration type="PActivityScheduler" name="scheduler" />
      <scope startLine="284" endLine="291">
        <scope startLine="285" endLine="287" />
      </scope>
    </method>
    <javadoc>
      <text>* Stop this activity immediately, and remove it from the activity
 * scheduler. If this activity is currently running then stoppedStepping
 * will be called after it has been removed from the activity scheduler.</text>
    </javadoc>
    <method type="void" name="terminate" startLine="299" endLine="302">
      <comment>set to zero so that we don't reschedule self.</comment>
    </method>
    <javadoc>
      <text>* Subclasses should override this method and set the value on their target
 * (the object that they are modifying) accordingly.</text>
      <param>zeroToOne relative completion of task.</param>
    </javadoc>
    <method type="void" name="setRelativeTargetValue" startLine="310" endLine="311" />
    <javadoc>
      <text>* Computes percent or linear interpolation to apply when taking
 * acceleration into account.</text>
      <param>zeroToOne Percentage of activity completed</param>
      <return>strength of acceleration</return>
    </javadoc>
    <method type="float" name="computeSlowInSlowOut" startLine="320" endLine="328">
      <scope startLine="321" endLine="323" />
      <scope startLine="324" endLine="327">
        <declaration type="float" name="complement" />
      </scope>
    </method>
    <javadoc>
      <text>* Assigns relative target value taking the mode into account.</text>
      <param>zeroToOne Percentage of activity completed</param>
    </javadoc>
    <method type="void" name="setRelativeTargetValueAdjustingForMode" startLine="335" endLine="358">
      <declaration type="float" name="adjustedZeroToOne" />
      <scope startLine="343" endLine="345" />
      <scope startLine="346" endLine="348" />
      <comment>Just treat the zeroToOne as how far along the interpolation</comment>
      <comment>we are.</comment>
    </method>
    <comment>****************************************************************</comment>
    <comment>Basics.</comment>
    <comment>****************************************************************</comment>
    <comment>****************************************************************</comment>
    <comment>Stepping - Instead of overriding the step methods subclasses</comment>
    <comment>of this activity will normally override setRelativeTargetValue().</comment>
    <comment>This method will be called for every step of the activity with</comment>
    <comment>a value ranging from 0,0 (for the first step) to 1.0 (for the</comment>
    <comment>final step). See PTransformActivity for an example.</comment>
    <comment>****************************************************************</comment>
  </class>
</source>
