<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.event">
  <import name="java.awt.BasicStroke" />
  <import name="java.awt.Color" />
  <import name="java.awt.Paint" />
  <import name="java.awt.Stroke" />
  <import name="java.awt.event.KeyEvent" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.util.ArrayList" />
  <import name="java.util.Collection" />
  <import name="java.util.Collections" />
  <import name="java.util.HashMap" />
  <import name="java.util.Iterator" />
  <import name="java.util.List" />
  <import name="java.util.Map" />
  <import name="edu.umd.cs.piccolo.PCamera" />
  <import name="edu.umd.cs.piccolo.PLayer" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.event.PDragSequenceEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PInputEvent" />
  <import name="edu.umd.cs.piccolo.nodes.PPath" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <import name="edu.umd.cs.piccolo.util.PDimension" />
  <import name="edu.umd.cs.piccolo.util.PNodeFilter" />
  <import name="edu.umd.cs.piccolox.handles.PBoundsHandle" />
  <class name="PSelectionEventHandler" extends="PDragSequenceEventHandler" startLine="56">
    <javadoc>
      <text>* <code>PSelectionEventHandler</code> provides standard interaction for
 * selection. Clicking selects the object under the cursor. Shift-clicking
 * allows multiple objects to be selected. Dragging offers marquee selection.
 * Pressing the delete key deletes the selection by default.</text>
      <version>1.0</version>
      <author>Ben Bederson</author>
    </javadoc>
    <javadoc>
      <text>* Notification name that identifies a change in the selection. Used with
 * PNotificationCenter.</text>
    </javadoc>
    <declaration type="String" name="SELECTION_CHANGED_NOTIFICATION" />
    <javadoc>
      <text>* The default dash width when displaying selection rectangle.</text>
    </javadoc>
    <declaration type="int" name="DASH_WIDTH" />
    <declaration type="int" name="NUM_STROKES" />
    <javadoc>
      <text>* The current selection.</text>
    </javadoc>
    <declaration type="HashMap" name="selection" />
    <javadoc>
      <text>* List of nodes whose children can be selected.</text>
    </javadoc>
    <declaration type="List" name="selectableParents" />
    <declaration type="PPath" name="marquee" />
    <javadoc>
      <text>* Node that marquee is added to as a child.</text>
    </javadoc>
    <declaration type="PNode" name="marqueeParent" />
    <declaration type="Point2D" name="presspt" />
    <declaration type="Point2D" name="canvasPressPt" />
    <declaration type="float" name="strokeNum" />
    <declaration type="Stroke[]" name="strokes" />
    <javadoc>
      <text>* Used within drag handler temporarily.</text>
    </javadoc>
    <declaration type="HashMap" name="allItems" />
    <javadoc>
      <text>* Used within drag handler temporarily.</text>
    </javadoc>
    <declaration type="ArrayList" name="unselectList" />
    <declaration type="HashMap" name="marqueeMap" />
    <javadoc>
      <text>* Node pressed on (or null if none).</text>
    </javadoc>
    <declaration type="PNode" name="pressNode" />
    <javadoc>
      <text>* True if DELETE key should delete selection.</text>
    </javadoc>
    <declaration type="boolean" name="deleteKeyActive" />
    <javadoc>
      <text>* Paint applied when drawing the marquee.</text>
    </javadoc>
    <declaration type="Paint" name="marqueePaint" />
    <javadoc>
      <text>* How transparent the marquee should be.</text>
    </javadoc>
    <declaration type="float" name="marqueePaintTransparency" />
    <javadoc>
      <text>* Creates a selection event handler.</text>
      <param>marqueeParent The node to which the event handler dynamically adds
 * a marquee (temporarily) to represent the area being selected.</param>
      <param>selectableParent The node whose children will be selected by this
 * event handler.</param>
    </javadoc>
    <method type="constructor" name="PSelectionEventHandler" startLine="118" endLine="123" />
    <javadoc>
      <text>* Creates a selection event handler.</text>
      <param>marqueeParent The node to which the event handler dynamically adds
 * a marquee (temporarily) to represent the area being selected.</param>
      <param>selectableParents A list of nodes whose children will be selected
 * by this event handler.</param>
    </javadoc>
    <method type="constructor" name="PSelectionEventHandler" startLine="133" endLine="137" />
    <javadoc>
      <text>* Initializes the PSelectionEventHandler with a marquee stroke.</text>
    </javadoc>
    <method type="void" name="init" startLine="142" endLine="156">
      <declaration type="float[]" name="dash" />
      <scope startLine="148" endLine="150" />
    </method>
    <javadoc>
      <text>* Marks all items as selected.</text>
      <param>items collection of items to be selected</param>
    </javadoc>
    <method type="void" name="select" startLine="163" endLine="173">
      <declaration type="boolean" name="changes" />
      <declaration type="Iterator" name="itemIt" />
      <scope startLine="166" endLine="169">
        <declaration type="PNode" name="node" />
      </scope>
      <scope startLine="170" endLine="172" />
    </method>
    <javadoc>
      <text>* Marks all keys as selected.</text>
      <param>items map where keys are to be selected</param>
    </javadoc>
    <method type="void" name="select" startLine="180" endLine="182" />
    <javadoc>
      <text>* Select the passed node if not already selected.</text>
      <param>node node to be selected</param>
      <return>true if node was not already selected</return>
    </javadoc>
    <method type="boolean" name="internalSelect" startLine="190" endLine="198">
      <scope startLine="191" endLine="193" />
    </method>
    <javadoc>
      <text>* Dispatches a selection changed notification to the PNodificationCenter.</text>
    </javadoc>
    <method type="void" name="postSelectionChanged" startLine="203" endLine="205" />
    <javadoc>
      <text>* Selected the provided node if not already selected.</text>
      <param>node node to be selected</param>
    </javadoc>
    <method type="void" name="select" startLine="212" endLine="216">
      <scope startLine="213" endLine="215" />
    </method>
    <javadoc>
      <text>* Adds bound handles to the provided node.</text>
      <param>node node to be decorated</param>
    </javadoc>
    <method type="void" name="decorateSelectedNode" startLine="223" endLine="225" />
    <javadoc>
      <text>* Removes all nodes provided from the selection.</text>
      <param>items items to remove form the selection</param>
    </javadoc>
    <method type="void" name="unselect" startLine="232" endLine="242">
      <declaration type="boolean" name="changes" />
      <declaration type="Iterator" name="itemIt" />
      <scope startLine="235" endLine="238">
        <declaration type="PNode" name="node" />
      </scope>
      <scope startLine="239" endLine="241" />
    </method>
    <javadoc>
      <text>* Removes provided selection node if not already selected.</text>
      <param>node node to remove from selection</param>
      <return>true on success</return>
    </javadoc>
    <method type="boolean" name="internalUnselect" startLine="251" endLine="259">
      <scope startLine="252" endLine="254" />
    </method>
    <javadoc>
      <text>* Removes node from selection.</text>
      <param>node node to be removed from selection</param>
    </javadoc>
    <method type="void" name="unselect" startLine="266" endLine="270">
      <scope startLine="267" endLine="269" />
    </method>
    <javadoc>
      <text>* Removes bounds handles from node.</text>
      <param>node to have handles removed from</param>
    </javadoc>
    <method type="void" name="undecorateSelectedNode" startLine="277" endLine="279" />
    <javadoc>
      <text>* Empties the selection.</text>
    </javadoc>
    <method type="void" name="unselectAll" startLine="284" endLine="289">
      <declaration type="ArrayList" name="sel" />
      <comment>Because unselect() removes from selection, we need to</comment>
      <comment>take a copy of it first so it isn't changed while we're iterating</comment>
    </method>
    <javadoc>
      <text>* Returns true is provided node is selected.</text>
      <param>node - node to be tested</param>
      <return>true if succeeded</return>
    </javadoc>
    <method type="boolean" name="isSelected" startLine="297" endLine="299" />
    <javadoc>
      <text>* Returns a copy of the currently selected nodes.</text>
      <return>copy of selection</return>
    </javadoc>
    <method type="Collection" name="getSelection" startLine="306" endLine="308" />
    <javadoc>
      <text>* Gets a reference to the currently selected nodes. You should not modify
 * or store this collection.</text>
      <return>direct reference to selection</return>
    </javadoc>
    <method type="Collection" name="getSelectionReference" startLine="316" endLine="318" />
    <javadoc>
      <text>* Determine if the specified node can be selected (i.e., if it is a child
 * of the one the list of nodes that can be selected).</text>
      <param>node node being tested</param>
      <return>true if node can be selected</return>
    </javadoc>
    <method type="boolean" name="isSelectable" startLine="327" endLine="349">
      <declaration type="boolean" name="selectable" />
      <declaration type="Iterator" name="parentsIt" />
      <scope startLine="331" endLine="346">
        <declaration type="PNode" name="parent" />
        <scope startLine="333" endLine="336" />
        <scope startLine="337" endLine="345">
          <scope startLine="338" endLine="344">
            <declaration type="PLayer" name="layer" />
            <scope startLine="340" endLine="343" />
          </scope>
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Flags the node provided as a selectable parent. This makes it possible to
 * select its children.</text>
      <param>node to flag as selectable</param>
    </javadoc>
    <method type="void" name="addSelectableParent" startLine="357" endLine="359" />
    <javadoc>
      <text>* Removes the node provided from the set of selectable parents. This makes
 * its impossible to select its children.</text>
      <param>node to remove from selectable parents</param>
    </javadoc>
    <method type="void" name="removeSelectableParent" startLine="367" endLine="369" />
    <javadoc>
      <text>* Sets the node provided as the *only* selectable parent.</text>
      <param>node node to become the 1 and only selectable parent</param>
    </javadoc>
    <method type="void" name="setSelectableParent" startLine="376" endLine="379" />
    <javadoc>
      <text>* Sets the collection of selectable parents as the only parents that are
 * selectable.</text>
      <param>c nodes to become selectable parents.</param>
    </javadoc>
    <method type="void" name="setSelectableParents" startLine="387" endLine="390" />
    <javadoc>
      <text>* Returns all selectable parents.</text>
      <return>selectable parents</return>
    </javadoc>
    <method type="Collection" name="getSelectableParents" startLine="397" endLine="399" />
    <javadoc>
      <text>* Overrides method in PDragSequenceEventHandler so that, selections have
 * marquees.</text>
      <param>e the event that started the drag</param>
    </javadoc>
    <method type="void" name="startDrag" startLine="411" endLine="434">
      <scope startLine="416" endLine="425">
        <scope startLine="419" endLine="421" />
        <scope startLine="422" endLine="424" />
      </scope>
      <scope startLine="426" endLine="433">
        <scope startLine="427" endLine="429" />
        <scope startLine="430" endLine="432" />
      </scope>
    </method>
    <javadoc>
      <text>* Updates the marquee to the new bounds caused by the drag.</text>
      <param>event drag event</param>
    </javadoc>
    <method type="void" name="drag" startLine="441" endLine="457">
      <scope startLine="444" endLine="453">
        <scope startLine="447" endLine="449" />
        <scope startLine="450" endLine="452" />
      </scope>
      <scope startLine="454" endLine="456" />
    </method>
    <javadoc>
      <text>* Ends the selection marquee when the drag is ended.</text>
      <param>event the event responsible for ending the drag</param>
    </javadoc>
    <method type="void" name="endDrag" startLine="464" endLine="473">
      <scope startLine="467" endLine="469" />
      <scope startLine="470" endLine="472" />
    </method>
    <javadoc>
      <text>* Used to test whether the event is one that changes the selection.</text>
      <param>pie The event under test</param>
      <return>true if event changes the selection</return>
    </javadoc>
    <method type="boolean" name="isOptionSelection" startLine="485" endLine="487" />
    <javadoc>
      <text>* Tests the input event to see if it is selecting a new node.</text>
      <param>pie event under test</param>
      <return>true if there is no current selection</return>
    </javadoc>
    <method type="boolean" name="isMarqueeSelection" startLine="495" endLine="497" />
    <javadoc>
      <text>* Starts a selection based on the provided event.</text>
      <param>pie event used to populate the selection</param>
    </javadoc>
    <method type="void" name="initializeSelection" startLine="504" endLine="511">
      <scope startLine="508" endLine="510" />
    </method>
    <javadoc>
      <text>* Creates an empty marquee child for use in displaying the marquee around
 * the selection.</text>
      <param>event event responsible for the initialization</param>
    </javadoc>
    <method type="void" name="initializeMarquee" startLine="519" endLine="528" />
    <javadoc>
      <text>* Invoked when the marquee is being used to extend the selection.</text>
      <param>event event causing the option selection</param>
    </javadoc>
    <method type="void" name="startOptionMarqueeSelection" startLine="535" endLine="536" />
    <javadoc>
      <text>* Invoked at the start of the selection. Removes any selections.</text>
      <param>event event causing a new marquee selection</param>
    </javadoc>
    <method type="void" name="startMarqueeSelection" startLine="543" endLine="545" />
    <javadoc>
      <text>* If the pressed node is not selected unselect all nodes and select the
 * pressed node if it allows it.</text>
      <param>pie event that started the selection</param>
    </javadoc>
    <method type="void" name="startStandardSelection" startLine="553" endLine="564">
      <scope startLine="555" endLine="557" />
      <scope startLine="561" endLine="563" />
      <comment>Option indicator not down - clear selection, and start fresh</comment>
    </method>
    <javadoc>
      <text>* Toggle the current selection on the node that was just pressed, but leave
 * the rest of the selected nodes unchanged.</text>
      <param>pie event responsible for the change in selection</param>
    </javadoc>
    <method type="void" name="startStandardOptionSelection" startLine="572" endLine="581">
      <scope startLine="573" endLine="580">
        <scope startLine="574" endLine="576" />
        <scope startLine="577" endLine="579" />
      </scope>
    </method>
    <javadoc>
      <text>* Updates the marquee rectangle as the result of a drag.</text>
      <param>pie event responsible for the change in the marquee</param>
    </javadoc>
    <method type="void" name="updateMarquee" startLine="588" endLine="628">
      <declaration type="PBounds" name="b" />
      <scope startLine="591" endLine="594" />
      <scope startLine="595" endLine="598" />
      <declaration type="PNodeFilter" name="filter" />
      <declaration type="Iterator" name="parentsIt" />
      <scope startLine="609" endLine="627">
        <declaration type="PNode" name="parent" />
        <declaration type="Collection" name="items" />
        <scope startLine="613" endLine="618">
          <scope startLine="615" endLine="617" />
        </scope>
        <scope startLine="619" endLine="621" />
        <declaration type="Iterator" name="itemsIt" />
        <scope startLine="624" endLine="626" />
      </scope>
    </method>
    <javadoc>
      <text>* Sets the selection to be all nodes under the marquee.</text>
      <param>pie event responsible for the new selection</param>
    </javadoc>
    <method type="void" name="computeMarqueeSelection" startLine="635" endLine="661">
      <declaration type="Iterator" name="selectionEn" />
      <scope startLine="640" endLine="645">
        <declaration type="PNode" name="node" />
        <scope startLine="642" endLine="644" />
      </scope>
      <scope startLine="650" endLine="658">
        <declaration type="PNode" name="node" />
        <scope startLine="652" endLine="654" />
        <scope startLine="655" endLine="657" />
      </scope>
      <comment>Make just the items in the list selected</comment>
      <comment>Do this efficiently by first unselecting things not in the list</comment>
      <comment>Then select the rest</comment>
    </method>
    <javadoc>
      <text>* Extends the selection to include all nodes under the marquee.</text>
      <param>pie event responsible for the change in selection</param>
    </javadoc>
    <method type="void" name="computeOptionMarqueeSelection" startLine="668" endLine="693">
      <declaration type="Iterator" name="selectionEn" />
      <scope startLine="671" endLine="677">
        <declaration type="PNode" name="node" />
        <scope startLine="673" endLine="676" />
      </scope>
      <scope startLine="682" endLine="690">
        <declaration type="PNode" name="node" />
        <scope startLine="684" endLine="686" />
        <scope startLine="687" endLine="689" />
      </scope>
      <comment>Then select the rest</comment>
    </method>
    <javadoc>
      <text>* Creates a node filter that will filter all nodes not touching the bounds
 * provided.</text>
      <param>bounds will be used to filter matches</param>
      <return>newly created filter</return>
    </javadoc>
    <method type="PNodeFilter" name="createNodeFilter" startLine="703" endLine="705" />
    <javadoc>
      <text>* Returns the bounds of the current selection marquee.</text>
      <return>bounds of current selection marquee</return>
    </javadoc>
    <method type="PBounds" name="getMarqueeBounds" startLine="712" endLine="717">
      <scope startLine="713" endLine="715" />
    </method>
    <javadoc>
      <text>* Drag selected nodes.</text>
      <param>e event responsible for the drag</param>
    </javadoc>
    <method type="void" name="dragStandardSelection" startLine="724" endLine="738">
      <declaration type="PDimension" name="d" />
      <declaration type="PDimension" name="gDist" />
      <declaration type="Iterator" name="selectionEn" />
      <scope startLine="731" endLine="737">
        <declaration type="PNode" name="node" />
      </scope>
      <comment>There was a press node, so drag selection</comment>
    </method>
    <javadoc>
      <text>* Removes marquee and clears selection.</text>
      <param>e event responsible for the end of the selection</param>
    </javadoc>
    <method type="void" name="endMarqueeSelection" startLine="745" endLine="751">
      <comment>Remove marquee</comment>
    </method>
    <javadoc>
      <text>* Ends the "pressed" state of the previously pressed node (if any).</text>
      <param>e event responsible for the end in the selection</param>
    </javadoc>
    <method type="void" name="endStandardSelection" startLine="758" endLine="760" />
    <javadoc>
      <text>* This gets called continuously during the drag, and is used to animate the
 * marquee.</text>
      <param>aEvent event responsible for this step in the drag sequence</param>
    </javadoc>
    <method type="void" name="dragActivityStep" startLine="768" endLine="778">
      <scope startLine="769" endLine="777">
        <declaration type="float" name="origStrokeNum" />
        <scope startLine="774" endLine="776" />
        <comment>Increment by</comment>
        <comment>partial steps to</comment>
        <comment>slow down animation</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Delete selection when delete key is pressed (if enabled).</text>
      <param>e the key press event</param>
    </javadoc>
    <method type="void" name="keyPressed" startLine="785" endLine="794">
      <scope startLine="786" endLine="793">
        <declaration type="Iterator" name="selectionEn" />
        <scope startLine="788" endLine="791">
          <declaration type="PNode" name="node" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Returns whether the delete key is a supported action.</text>
      <return>true if delete is allowed</return>
    </javadoc>
    <method type="boolean" name="getSupportDeleteKey" startLine="801" endLine="803" />
    <javadoc>
      <text>* Returns whether the delete key is a supported action.</text>
      <return>true if delete is allowed</return>
    </javadoc>
    <method type="boolean" name="isDeleteKeyActive" startLine="810" endLine="812" />
    <javadoc>
      <text>* Specifies if the DELETE key should delete the selection.</text>
      <param>deleteKeyActive state to set for the delete action true = enabled</param>
    </javadoc>
    <method type="void" name="setDeleteKeyActive" startLine="819" endLine="821" />
    <class name="BoundsFilter" startLine="823">
      <implements name="PNodeFilter" />
      <javadoc>
        <text>* Class used to filter nodes that intersect with the marquee's bounds.</text>
      </javadoc>
      <declaration type="PBounds" name="localBounds" />
      <declaration type="PBounds" name="bounds" />
      <javadoc>
        <text>* Constructs a BoundsFilter for the given bounds.</text>
        <param>bounds bounds to be used when testing nodes for intersection</param>
      </javadoc>
      <method type="constructor" name="BoundsFilter" startLine="835" endLine="837" />
      <javadoc>
        <text>* Returns true if the node is an acceptable selection.</text>
        <param>node node being tested</param>
        <return>true if node is an acceptable selection</return>
      </javadoc>
      <method type="boolean" name="accept" startLine="845" endLine="853">
        <declaration type="boolean" name="boundsIntersects" />
        <declaration type="boolean" name="isMarquee" />
      </method>
      <javadoc>
        <text>* Returns whether this filter should accept all children of a node.</text>
        <param>node node being tested</param>
        <return>true if selection should accept children children of the node</return>
      </javadoc>
      <method type="boolean" name="acceptChildrenOf" startLine="861" endLine="863" />
      <javadoc>
        <text>* Tests a node to see if it's a layer that has an attached camera.</text>
        <param>node node being tested</param>
        <return>true if node is a layer with a camera attached</return>
      </javadoc>
      <method type="boolean" name="isCameraLayer" startLine="871" endLine="881">
        <scope startLine="872" endLine="879">
          <scope startLine="873" endLine="878">
            <declaration type="PNode" name="parent" />
            <scope startLine="875" endLine="877" />
          </scope>
        </scope>
      </method>
      <javadoc>
        <text>* Indicates the color used to paint the marquee.</text>
        <return>the paint for interior of the marquee</return>
      </javadoc>
      <method type="Paint" name="getMarqueePaint" startLine="889" endLine="891" />
      <javadoc>
        <text>* Sets the color used to paint the marquee.</text>
        <param>paint the paint color</param>
      </javadoc>
      <method type="void" name="setMarqueePaint" startLine="898" endLine="900" />
      <javadoc>
        <text>* Indicates the transparency level for the interior of the marquee.</text>
        <return>Returns the marquee paint transparency, zero to one</return>
      </javadoc>
      <method type="float" name="getMarqueePaintTransparency" startLine="907" endLine="909" />
      <javadoc>
        <text>* Sets the transparency level for the interior of the marquee.</text>
        <param>marqueePaintTransparency The marquee paint transparency to set.</param>
      </javadoc>
      <method type="void" name="setMarqueePaintTransparency" startLine="916" endLine="918" />
    </class>
    <comment />
    <comment>The overridden methods from PDragSequenceEventHandler</comment>
    <comment />
    <comment />
    <comment>Additional methods</comment>
    <comment />
  </class>
</source>
