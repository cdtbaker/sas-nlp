<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.examples">
  <import name="java.awt.Color" />
  <import name="java.awt.geom.Dimension2D" />
  <import name="edu.umd.cs.piccolo.PCanvas" />
  <import name="edu.umd.cs.piccolo.PLayer" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.event.PBasicInputEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PInputEvent" />
  <import name="edu.umd.cs.piccolo.nodes.PPath" />
  <import name="edu.umd.cs.piccolox.PFrame" />
  <class name="NodeEventExample" extends="PFrame" startLine="42">
    <javadoc>
      <text>* This example shows how to make a node handle events.</text>
    </javadoc>
    <javadoc />
    <declaration type="long" name="serialVersionUID" />
    <method type="constructor" name="NodeEventExample" startLine="52" endLine="54" />
    <method type="constructor" name="NodeEventExample" startLine="56" endLine="58" />
    <method type="void" name="initialize" startLine="60" endLine="132">
      <declaration type="PLayer" name="layer" />
      <declaration type="PNode" name="aNode" />
      <method type="void" name="mousePressed" startLine="78" endLine="82" />
      <method type="void" name="mouseDragged" startLine="84" endLine="89">
        <declaration type="Dimension2D" name="delta" />
      </method>
      <method type="void" name="mouseReleased" startLine="91" endLine="95" />
      <method type="void" name="printEventCoords" startLine="107" endLine="116" />
      <comment>create a new node and override some of the event handling</comment>
      <comment>methods so that the node changes to orange when the mouse (Button 1)</comment>
      <comment>is pressed on the node, and changes back to green when the mouse</comment>
      <comment>is released. Also when the mouse is dragged the node updates its</comment>
      <comment>position so that the node is "dragged". Note that this only serves</comment>
      <comment>as a simple example, most of the time dragging nodes is best done</comment>
      <comment>with the PDragEventHandler, but this shows another way to do it.</comment>
      <comment />
      <comment>Note that each of these methods marks the event as handled. This is</comment>
      <comment>so that when the node is being dragged the zoom and pan event handles</comment>
      <comment>(that are installed by default) do not also operate, but they will</comment>
      <comment>still respond to events that are not handled by the node. (try to</comment>
      <comment>uncomment the aEvent.setHandled() calls and see what happens.</comment>
      <comment>Note this slows things down a lot, comment it out to see how the</comment>
      <comment>normal speed of things is.</comment>
      <comment />
      <comment>For fun the coords of each event that the node handles are</comment>
      <comment>printed out. This can help to understand how coordinate systems</comment>
      <comment>work. Notice that when the example first starts all the values</comment>
      <comment>for (canvas, global, and local) are equal. But once you drag the</comment>
      <comment>node then the local coordinates become different then the screen</comment>
      <comment>and global coordinates. When you pan or zoom then the screen</comment>
      <comment>coordinates become different from the global coordinates.</comment>
      <comment>System.out.println("Global Location: " +</comment>
      <comment>aEvent.getGlobalLocation());</comment>
      <comment>System.out.println("Global Delta: " +</comment>
      <comment>aEvent.getGlobalDelta());</comment>
      <comment>By default the filter accepts all events, but here we constrain the</comment>
      <comment>kinds of events that aNode receives to button 1 events. Comment this</comment>
      <comment>line out and then you will be able to drag the node with any mouse</comment>
      <comment>button.</comment>
      <comment>aNode.setEventFilter(new PInputEventFilter(InputEvent.BUTTON1_MASK));</comment>
      <comment>add another node to the canvas that does not handle events as a</comment>
      <comment>reference point, so that we can make sure that our green node is</comment>
      <comment>getting dragged.</comment>
    </method>
    <method type="void" name="main" startLine="134" endLine="136" />
  </class>
</source>
