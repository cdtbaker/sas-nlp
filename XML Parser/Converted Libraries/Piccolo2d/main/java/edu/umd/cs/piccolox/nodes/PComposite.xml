<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.nodes">
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.util.PPickPath" />
  <class name="PComposite" extends="PNode" startLine="34">
    <javadoc>
      <text>* <b>PComposite</b> is a simple node that makes a group of nodes appear to be a
 * single node when picking and interacting. There is also partial (commented
 * out) support for resizing the child node to fit when this nodes bounds are
 * set.</text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc />
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Return true if this node or any pickable descendants are picked. If a
 * pick occurs the pickPath is modified so that this node is always returned
 * as the picked node, event if it was a descendant node that initially
 * reported the pick.</text>
      <param>pickPath the pick path to add the nodes to if they are picked</param>
      <return>true if this node or one of its descendants was picked</return>
    </javadoc>
    <method type="boolean" name="fullPick" startLine="77" endLine="92">
      <scope startLine="78" endLine="90">
        <declaration type="PNode" name="picked" />
        <scope startLine="83" endLine="87" />
        <comment>this code won't work with internal cameras, because it doesn't</comment>
        <comment>pop the cameras view transform.</comment>
      </scope>
    </method>
    <comment>public boolean setBounds(double x, double y, double width, double height)
 { PBounds childBounds = getUnionOfChildrenBounds(null);

 double dx = x - childBounds.x; double dy = y - childBounds.y; double sx =
 width  childBounds.width; double sy = height  childBounds.height;
 double scale = sx > sy ? sx : sy;

 Iterator i = getChildrenIterator(); while (i.hasNext()) { PNode each =
 (PNode) i.next(); each.offset(dx, dy); each.scaleAboutPoint(scale,
 each.getBoundsReference().x, each.getBoundsReference().y); }

 return super.setBounds(x, y, width, height); }

 protected void layoutChildren() {
 getBoundsReference().setRect(getUnionOfChildrenBounds(null)); }</comment>
  </class>
</source>
