<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.nodes">
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.Paint" />
  <import name="java.awt.geom.Rectangle2D" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.nodes.PPath" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <import name="edu.umd.cs.piccolo.util.PPickPath" />
  <class name="PClip" extends="PPath" startLine="41">
    <javadoc>
      <text>* <b>PClip</b> is a simple node that applies a clip before rendering or picking
 * its children. PClip is a subclass of PPath, the clip applies is the
 * GeneralPath wrapped by its super class. See piccolo2d/examples ClipExample.</text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Computes the full bounds and stores them in dstBounds, if dstBounds is
 * null, create a new Bounds and returns it.</text>
      <param>dstBounds output parameter where computed bounds will be stored</param>
      <return>the computed full bounds</return>
    </javadoc>
    <method type="PBounds" name="computeFullBounds" startLine="59" endLine="72">
      <declaration type="PBounds" name="result" />
      <scope startLine="61" endLine="63" />
      <scope startLine="64" endLine="67" />
    </method>
    <javadoc>
      <text>* Callback that receives notification of repaint requests from nodes in
 * this node's tree.</text>
      <param>localBounds region in local coordinations the needs repainting</param>
      <param>childOrThis the node that emitted the repaint notification</param>
    </javadoc>
    <method type="void" name="repaintFrom" startLine="81" endLine="89">
      <scope startLine="82" endLine="85" />
      <scope startLine="86" endLine="88" />
    </method>
    <javadoc>
      <text>* Paint's this node as a solid rectangle if paint is provided, clipping
 * appropriately.</text>
      <param>paintContext context into which this node will be painted</param>
    </javadoc>
    <method type="void" name="paint" startLine="97" endLine="105">
      <declaration type="Paint" name="p" />
      <scope startLine="99" endLine="103">
        <declaration type="Graphics2D" name="g2" />
      </scope>
    </method>
    <javadoc>
      <text>* Paints a border around this node if it has a stroke and stroke paint
 * provided.</text>
      <param>paintContext context into which the border will be drawn</param>
    </javadoc>
    <method type="void" name="paintAfterChildren" startLine="113" endLine="121">
      <scope startLine="115" endLine="120">
        <declaration type="Graphics2D" name="g2" />
      </scope>
    </method>
    <javadoc>
      <text>* Try to pick this node and all of its descendants if they are visible in
 * the clipping region.</text>
      <param>pickPath the pick path to add the node to if its picked</param>
      <return>true if this node or one of its descendants was picked.</return>
    </javadoc>
    <method type="boolean" name="fullPick" startLine="130" endLine="158">
      <scope startLine="131" endLine="155">
        <scope startLine="135" endLine="137" />
        <scope startLine="139" endLine="147">
          <declaration type="int" name="count" />
          <scope startLine="141" endLine="146">
            <declaration type="PNode" name="each" />
            <scope startLine="143" endLine="145" />
          </scope>
        </scope>
        <scope startLine="149" endLine="151" />
      </scope>
    </method>
  </class>
</source>
