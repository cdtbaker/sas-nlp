<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.util">
  <import name="java.awt.Rectangle" />
  <import name="java.awt.Shape" />
  <import name="java.awt.geom.AffineTransform" />
  <import name="java.awt.geom.GeneralPath" />
  <import name="java.awt.geom.PathIterator" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.awt.geom.Rectangle2D" />
  <class name="LineShape" startLine="39">
    <implements name="Shape" />
    <implements name="MutablePoints" />
    <javadoc>
      <text>* A shape that can be used to represent hand drawn lines.</text>
    </javadoc>
    <declaration type="MutablePoints" name="points" />
    <declaration type="Rectangle2D" name="bounds" />
    <javadoc>
      <text>* Constructs a LineShape from a list of mutable points.</text>
      <param>points points to use when constructing LineShape</param>
    </javadoc>
    <method type="constructor" name="LineShape" startLine="51" endLine="53" />
    <javadoc>
      <text>* Changes the LineShape so that it's composed of the given points.</text>
      <param>points new Points to use as this shape's path</param>
    </javadoc>
    <method type="void" name="setPoints" startLine="60" endLine="67">
      <scope startLine="61" endLine="63" />
      <scope startLine="64" endLine="66" />
    </method>
    <javadoc>
      <text>* Returns the number points in this LineShape.</text>
      <return># of points in this line shape</return>
    </javadoc>
    <method type="int" name="getPointCount" startLine="74" endLine="76" />
    <javadoc>
      <text>* Returns the x component of the point at the given index.</text>
      <param>pointIndex index of desired point</param>
      <return>x component of indexed point</return>
    </javadoc>
    <method type="double" name="getX" startLine="85" endLine="87" />
    <javadoc>
      <text>* Returns the y component of the point at the given index.</text>
      <param>pointIndex index of desired point</param>
      <return>y component of indexed point</return>
    </javadoc>
    <method type="double" name="getY" startLine="96" endLine="98" />
    <javadoc>
      <text>* Copies the point at the given index into the destination point.</text>
      <param>pointIndex the index of the desired point</param>
      <param>destinationPoint the point into which to load the values, or null
 * if a new point is desired</param>
      <return>destinationPoint or new one if null was provided</return>
    </javadoc>
    <method type="Point2D" name="getPoint" startLine="109" endLine="111" />
    <javadoc>
      <text>* Computes the bounds of this LineShape and stores them in the provided
 * rectangle.</text>
      <param>dst rectangle to populate with this LineShape's bounds</param>
      <return>the bounds</return>
    </javadoc>
    <method type="Rectangle2D" name="getBounds" startLine="120" endLine="123" />
    <javadoc>
      <text>* Recalculates the bounds of this LineShape.</text>
    </javadoc>
    <method type="void" name="updateBounds" startLine="128" endLine="131" />
    <javadoc>
      <text>* Sets the coordinate of the point at the given index.</text>
      <param>pointIndex index of the point to change</param>
      <param>x x component to assign to the point</param>
      <param>y y component to assign to the point</param>
    </javadoc>
    <method type="void" name="setPoint" startLine="140" endLine="143" />
    <javadoc>
      <text>* Adds a point with the given coordinates at the desired index.</text>
      <param>pointIndex Index at which to add the point</param>
      <param>x x component of the new point</param>
      <param>y y component of the new point</param>
    </javadoc>
    <method type="void" name="addPoint" startLine="152" endLine="155" />
    <javadoc>
      <text>* Removes n points from the LineShape starting at the provided index.</text>
      <param>pointIndex Starting index from which points are being removed</param>
      <param>num The number of sequential points to remove</param>
    </javadoc>
    <method type="void" name="removePoints" startLine="163" endLine="166" />
    <javadoc>
      <text>* Applies the given transform to all points in this LineShape.</text>
      <param>transform Transform to apply</param>
    </javadoc>
    <method type="void" name="transformPoints" startLine="173" endLine="178">
      <declaration type="XYArray" name="newPoints" />
    </method>
    <javadoc>
      <text>* Returns the current points of this LineShape as a simple Rectangle.</text>
      <return>bounds of this LineShape</return>
    </javadoc>
    <method type="Rectangle" name="getBounds" startLine="185" endLine="188" />
    <javadoc>
      <text>* Returns the current bounds in Rectangle2D format.</text>
      <return>bounds of LineShape as a Rectangle2D</return>
    </javadoc>
    <method type="Rectangle2D" name="getBounds2D" startLine="195" endLine="197" />
    <javadoc>
      <text>* Returns whether the given coordinates are on the line defined by (x1,y1)
 * and (x2,y2) within the given distance.</text>
      <param>x x component of point being tested</param>
      <param>y y component of point being tested</param>
      <param>x1 x component of start point of line segment</param>
      <param>y1 y component of start point of line segment</param>
      <param>x2 x component of end point of line segment</param>
      <param>y2 y component of end point of line segment</param>
      <param>min whether the point should be constrained to "after" the start
 * of the segment</param>
      <param>max whether the point should be constrained to "before" the end of
 * the segment</param>
      <param>distance distance from line acceptable as "touching"</param>
      <return>whether the point (x,y) is near enough to the given line</return>
    </javadoc>
    <method type="boolean" name="contains" startLine="217" endLine="248">
      <declaration type="double" name="dx" />
      <declaration type="double" name="dy" />
      <scope startLine="222" endLine="224" />
      <declaration type="double" name="dx2" />
      <declaration type="double" name="dy2" />
      <declaration type="double" name="p" />
      <scope startLine="231" endLine="233" />
      <scope startLine="234" endLine="236" />
      <scope startLine="239" endLine="241" />
      <declaration type="double" name="len" />
      <comment>If line is a point then bail out</comment>
      <comment>distance along segment as a ratio or the (x1,y1)->(x2,y2) vector</comment>
      <comment>Point is not "beside" the segment and it's been disallowed, bail.</comment>
    </method>
    <javadoc>
      <text>* Returns true if the given coordinates are within d units from any segment
 * of the LineShape.</text>
      <param>x x component of point being tested</param>
      <param>y y component of point being tested</param>
      <param>d acceptable distance</param>
      <return>true if point is close enough to the LineShape</return>
    </javadoc>
    <method type="boolean" name="contains" startLine="259" endLine="276">
      <declaration type="double" name="x1" />
      <scope startLine="261" endLine="263" />
      <scope startLine="266" endLine="274">
        <scope startLine="271" endLine="273" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns true if point is within 2 pixels of any line segment of this
 * LineShape.</text>
      <param>x x component of point being tested</param>
      <param>y y component of point being tested</param>
      <return>true if point is within 2 pixels of any of this LineShape's
 * segments</return>
    </javadoc>
    <method type="boolean" name="contains" startLine="287" endLine="289" />
    <javadoc>
      <text>* Returns true if point is within 2 pixels of any line segment of this
 * LineShape.</text>
      <param>p point being tested</param>
      <return>true if point is within 2 pixels of any of this LineShape's
 * segments</return>
    </javadoc>
    <method type="boolean" name="contains" startLine="299" endLine="301" />
    <javadoc>
      <text>* Returns true if the two segments defined by (x1,y1)->(x2,y2) and
 * (x3,y3)->(x4,y4) intersect. Optional fields allow for consideration of
 * extending the segments to infinity at either end.</text>
      <param>x1 segment 1's start x component</param>
      <param>y1 segment 1's start y component</param>
      <param>x2 segment 1's end x component</param>
      <param>y2 segment 1's end y component</param>
      <param>x3 segment 2's start x component</param>
      <param>y3 segment 2's start y component</param>
      <param>x4 segment 2's end x component</param>
      <param>y4 segment 2's end y component</param>
      <param>min1 whether the second segment is acceptable if it passes
 * "before the start of the first segment"</param>
      <param>max1 whether the second segment is acceptable if it passes
 * "after the end of the first segment"</param>
      <param>min2 whether the first segment is acceptable if it passes
 * "before the start of the second segment"</param>
      <param>max2 whether the first segment is acceptable if it passes
 * "after the start of the second segment"</param>
      <return>true if line segments intersect</return>
    </javadoc>
    <method type="boolean" name="intersects" startLine="328" endLine="356">
      <declaration type="double" name="dx1" />
      <declaration type="double" name="d" />
      <scope startLine="332" endLine="336" />
      <scope startLine="337" endLine="341" />
      <scope startLine="342" endLine="346" />
      <scope startLine="347" endLine="351" />
      <scope startLine="352" endLine="354" />
    </method>
    <javadoc>
      <text>* Returns true if any segment crosses an edge of the rectangle.</text>
      <param>x left of rectangle to be tested</param>
      <param>y top of rectangle to be tested</param>
      <param>w width of rectangle to be tested</param>
      <param>h height of rectangle to be tested</param>
      <return>true if rectangle intersects</return>
    </javadoc>
    <method type="boolean" name="intersects" startLine="368" endLine="388">
      <declaration type="double" name="x1" />
      <scope startLine="370" endLine="372" />
      <scope startLine="375" endLine="386">
        <scope startLine="383" endLine="385" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns true if any segment crosses an edge of the rectangle.</text>
      <param>r rectangle to be tested</param>
      <return>true if rectangle intersects</return>
    </javadoc>
    <method type="boolean" name="intersects" startLine="396" endLine="398" />
    <javadoc>
      <text>* Whether the LineShape contains the rectangle defined.</text>
      <param>x left of defined rectangle</param>
      <param>y top of defined rectangle</param>
      <param>width width of defined rectangle</param>
      <param>height height of defined rectangle</param>
      <return>true if rectangle is contained</return>
    </javadoc>
    <method type="boolean" name="contains" startLine="409" endLine="411" />
    <javadoc>
      <text>* Whether the LineShape contains the rectangle.</text>
      <param>r rectangle being tested</param>
      <return>true if rectangle is contained</return>
    </javadoc>
    <method type="boolean" name="contains" startLine="419" endLine="421" />
    <javadoc>
      <text>* Returns an iterator that can be used to iterate of the segments of this
 * LineShape. Optionally applying the given transform before returning it.</text>
      <param>at optional transform to apply to segment before returning it. May
 * be null</param>
      <return>iterator for iterating segments of this LineShape</return>
    </javadoc>
    <method type="PathIterator" name="getPathIterator" startLine="431" endLine="433" />
    <javadoc>
      <text>* Returns an iterator that can be used to iterate of the segments of this
 * LineShape. Optionally applying the given transform before returning it.</text>
      <param>at optional transform to apply to segment before returning it. May
 * be null</param>
      <param>flatness ignored completely</param>
      <return>iterator for iterating segments of this LineShape</return>
    </javadoc>
    <method type="PathIterator" name="getPathIterator" startLine="444" endLine="446" />
    <class name="LinePathIterator" startLine="448">
      <implements name="PathIterator" />
      <declaration type="Points" name="points" />
      <declaration type="AffineTransform" name="trans" />
      <declaration type="int" name="i" />
      <javadoc>
        <text>* Constructs a LinePathIterator for the given points and with an
 * optional transform.</text>
        <param>points points to be iterated</param>
        <param>trans optional iterator to apply to paths before returning
 * them</param>
      </javadoc>
      <method type="constructor" name="LinePathIterator" startLine="462" endLine="465" />
      <javadoc>
        <text>* Returns the winding rule being applied when selecting next paths.</text>
        <return>GeneralPath.WIND_EVEN_ODD since that's the only policy
 * supported</return>
      </javadoc>
      <method type="int" name="getWindingRule" startLine="473" endLine="475" />
      <javadoc>
        <text>* Returns true if there are no more paths to iterate over.</text>
        <return>true if iteration is done</return>
      </javadoc>
      <method type="boolean" name="isDone" startLine="482" endLine="484" />
      <javadoc>
        <text>* Moves to the next path.</text>
      </javadoc>
      <method type="void" name="next" startLine="489" endLine="491" />
      <declaration type="Point2D" name="tempPoint" />
      <method type="void" name="currentSegment" startLine="495" endLine="500">
        <scope startLine="497" endLine="499" />
      </method>
      <javadoc>
        <text>* Populates the given array with the current segment and returns the
 * type of segment.</text>
        <param>coords array to be populated</param>
        <return>type of segment SEG_MOVETO or SEG_LINETO</return>
      </javadoc>
      <method type="int" name="currentSegment" startLine="510" endLine="520">
        <scope startLine="514" endLine="516" />
        <scope startLine="517" endLine="519" />
      </method>
      <javadoc>
        <text>* Populates the given array with the current segment and returns the
 * type of segment.</text>
        <param>coords array to be populated</param>
        <return>type of segment SEG_MOVETO or SEG_LINETO</return>
      </javadoc>
      <method type="int" name="currentSegment" startLine="530" endLine="540">
        <scope startLine="534" endLine="536" />
        <scope startLine="537" endLine="539" />
      </method>
    </class>
  </class>
</source>
