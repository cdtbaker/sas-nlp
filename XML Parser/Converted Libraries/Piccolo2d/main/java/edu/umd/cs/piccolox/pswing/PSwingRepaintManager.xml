<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.pswing">
  <import name="java.awt.Component" />
  <import name="java.util.Vector" />
  <import name="javax.swing.JComponent" />
  <import name="javax.swing.RepaintManager" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <class name="PSwingRepaintManager" extends="RepaintManager" startLine="39">
    <javadoc>
      <text>* This RepaintManager replaces the default Swing implementation, and is used to
 * repaint dirty regions of PSwing components and make sure the PSwings have
 * the appropriate size.
 * <p>
 * This is an internal class used by Piccolo to support Swing components in
 * Piccolo. This should not be instantiated, though all the public methods of
 * javax.swing.RepaintManager may still be called and perform in the expected
 * manner.
 * </p>
 * <p>
 * PBasicRepaint Manager is an extension of RepaintManager that traps those
 * repaints called by the Swing components that have been added to the PCanvas
 * and passes these repaints to the PSwing rather than up the
 * component hierarchy as usually happens.
 * </p>
 * <p>
 * Also traps invalidate calls made by the Swing components added to the PCanvas
 * to reshape the corresponding PSwing.
 * </p>
 * <p>
 * Also keeps a list of PSwings that are painting. This disables repaint until
 * the component has finished painting. This is to address a problem introduced
 * by Swing's CellRendererPane which is itself a work-around. The problem is
 * that JTable's, JTree's, and JList's cell renderers need to be validated
 * before repaint. Since we have to repaint the entire Swing component hierarchy
 * (in the case of a PSwing), this causes an infinite loop. So we introduce the
 * restriction that no repaints can be triggered by a call to paint.
 * </p></text>
      <author>Benjamin B. Bederson</author>
      <author>Lance E. Good</author>
      <author>Sam R. Reid</author>
      <author>Chris Malley (cmalley@pixelzoom.com)</author>
    </javadoc>
    <declaration type="Vector" name="paintingComponents" />
    <javadoc>
      <text>* Locks repaint for a particular (Swing) component displayed by PCanvas.</text>
      <param>c The component for which the repaint is to be locked</param>
    </javadoc>
    <method type="void" name="lockRepaint" startLine="85" endLine="87" />
    <javadoc>
      <text>* Unlocks repaint for a particular (Swing) component displayed by PCanvas.</text>
      <param>c The component for which the repaint is to be unlocked</param>
    </javadoc>
    <method type="void" name="unlockRepaint" startLine="94" endLine="96" />
    <javadoc>
      <text>* Returns true if repaint is currently locked for a component and false
 * otherwise.</text>
      <param>c The component for which the repaint status is desired</param>
      <return>Whether the component is currently painting</return>
    </javadoc>
    <method type="boolean" name="isPainting" startLine="105" endLine="107" />
    <javadoc>
      <text>* This is the method "repaint" now calls in the Swing components.
 * Overridden to capture repaint calls from those Swing components which are
 * being used as Piccolo visual components and to call the Piccolo repaint
 * mechanism rather than the traditional Component hierarchy repaint
 * mechanism. Otherwise, behaves like the superclass.</text>
      <param>component Component to be repainted</param>
      <param>x X coordinate of the dirty region in the component</param>
      <param>y Y coordinate of the dirty region in the component</param>
      <param>width Width of the dirty region in the component</param>
      <param>height Height of the dirty region in the component</param>
    </javadoc>
    <method type="void" name="addDirtyRegion" startLine="122" endLine="157">
      <declaration type="boolean" name="captureRepaint" />
      <declaration type="JComponent" name="childComponent" />
      <declaration type="int" name="captureX" />
      <declaration type="int" name="captureY" />
      <scope startLine="131" endLine="142">
        <scope startLine="132" endLine="136" />
        <scope startLine="137" endLine="141" />
        <comment>Adds to the offset since the component is nested</comment>
      </scope>
      <scope startLine="145" endLine="153">
        <scope startLine="146" endLine="152">
          <declaration type="double" name="repaintW" />
          <declaration type="double" name="repaintH" />
        </scope>
        <comment>Schedule a repaint for the dirty part of the PSwing</comment>
      </scope>
      <scope startLine="154" endLine="156" />
      <comment>We have to check to see if the PCanvas (ie. the SwingWrapper) is in the components ancestry. If so, we will</comment>
      <comment>want to capture that repaint. However, we also will need to translate the repaint request since the component</comment>
      <comment>may be offset inside another component.</comment>
      <comment>Now we check to see if we should capture the repaint and act accordingly</comment>
    </method>
    <javadoc>
      <text>* This is the method "invalidate" calls in the Swing components. Overridden
 * to capture invalidation calls from those Swing components being used as
 * Piccolo visual components and to update Piccolo's visual component
 * wrapper bounds (these are stored separately from the Swing component).
 * Otherwise, behaves like the superclass.</text>
      <param>invalidComponent The Swing component that needs validation</param>
    </javadoc>
    <method type="void" name="addInvalidComponent" startLine="168" endLine="176">
      <scope startLine="169" endLine="171" />
      <scope startLine="172" endLine="175" />
    </method>
    <javadoc>
      <text>* Obtains the PSwing associated with the specified component.</text>
      <param>component the component for which to return the associated PSwing</param>
      <return>the associated PSwing</return>
    </javadoc>
    <method type="PSwing" name="getPSwing" startLine="183" endLine="185" />
    <comment>The components that are currently painting</comment>
    <comment>This needs to be a vector for thread safety</comment>
  </class>
</source>
