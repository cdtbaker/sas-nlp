<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.examples">
  <import name="java.awt.Color" />
  <import name="edu.umd.cs.piccolo.PCanvas" />
  <import name="edu.umd.cs.piccolo.PLayer" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.activities.PActivity" />
  <import name="edu.umd.cs.piccolo.nodes.PPath" />
  <import name="edu.umd.cs.piccolox.PFrame" />
  <class name="ActivityExample" extends="PFrame" startLine="40">
    <javadoc>
      <text>* This example shows how create and schedule activities.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <method type="constructor" name="ActivityExample" startLine="46" endLine="48" />
    <method type="constructor" name="ActivityExample" startLine="50" endLine="52" />
    <method type="void" name="initialize" startLine="54" endLine="113">
      <declaration type="long" name="currentTime" />
      <declaration type="PNode" name="aNode" />
      <declaration type="PLayer" name="layer" />
      <declaration type="PActivity" name="flash" />
      <declaration type="boolean" name="fRed" />
      <method type="void" name="activityStep" startLine="70" endLine="81">
        <scope startLine="73" endLine="75" />
        <scope startLine="76" endLine="78" />
      </method>
      <declaration type="PActivity" name="a1" />
      <declaration type="PActivity" name="a2" />
      <declaration type="PActivity" name="a3" />
      <declaration type="PActivity" name="a4" />
      <comment>Create a new node that we will apply different activities to, and</comment>
      <comment>place that node at location 200, 200.</comment>
      <comment>Create a new custom "flash" activity. This activity will start</comment>
      <comment>running in five seconds, and while it runs it will flash aNode's</comment>
      <comment>paint between red and green every half second.</comment>
      <comment>An activity will not run unless it is scheduled with the root. Once</comment>
      <comment>it has been scheduled it will be given a chance to run during the</comment>
      <comment>next PRoot.processInputs() call.</comment>
      <comment>Use the PNode animate methods to create three activities that animate</comment>
      <comment>the node's position. Since our node already descends from the root</comment>
      <comment>node the animate methods will automatically schedule these activities</comment>
      <comment>for us.</comment>
      <comment>the animate activities will start immediately (in the next call to</comment>
      <comment>PRoot.processInputs) by default. Here we set their start times (in</comment>
      <comment>PRoot global time) so that they start when the previous one has</comment>
      <comment>finished.</comment>
      <comment>or the previous three lines could be replaced with these lines for</comment>
      <comment>the same effect.</comment>
      <comment>a2.setStartTime(currentTime + 5000);</comment>
      <comment>a3.setStartTime(currentTime + 10000);</comment>
      <comment>a4.setStartTime(currentTime + 15000);</comment>
    </method>
    <method type="void" name="main" startLine="115" endLine="117" />
  </class>
</source>
