<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.pswing">
  <import name="java.awt.Component" />
  <import name="java.awt.event.MouseEvent" />
  <import name="java.awt.event.MouseListener" />
  <import name="java.awt.event.MouseWheelEvent" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.io.Serializable" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.event.PInputEvent" />
  <import name="edu.umd.cs.piccolo.util.PPickPath" />
  <class name="PSwingMouseEvent" extends="MouseEvent" startLine="42">
    <implements name="Serializable" />
    <implements name="PSwingEvent" />
    <javadoc>
      <text>* <b>PMouseEvent</b> is an event which indicates that a mouse action occurred
 * in a node.
 * <p>
 * This low-level event is generated by a node object for:
 * <ul>
 * <li>Mouse Events
 * <ul>
 * <li>a mouse button is pressed</li>
 * <li>a mouse button is released</li>
 * <li>a mouse button is clicked (pressed and released)</li>
 * <li>the mouse cursor enters a node</li>
 * <li>the mouse cursor exits a node</li>
 * </ul>
 * </li>
 * </ul>
 * </p>
 * <p>
 * A PMouseEvent object is passed to every <code>PMouseListener</code> or
 * <code>PMouseAdapter</code> object which registered to receive the
 * "interesting" mouse events using the component's
 * <code>addMouseListener</code> method. (<code>PMouseAdapter</code> objects
 * implement the <code>PMouseListener</code> interface.) Each such listener
 * object gets a <code>PMouseEvent</code> containing the mouse event.
 * </p>
 * <p>
 * <b>Warning:</b> Serialized objects of this class will not be compatible with
 * future Piccolo2d releases. The current serialization support is appropriate
 * for short term storage or RMI between applications running the same version
 * of Piccolo2d. A future release of Piccolo2d will provide support for long
 * term persistence.
 * </p></text>
      <author>Benjamin B. Bederson</author>
      <author>Sam R. Reid</author>
      <author>Lance E. Good</author>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <declaration type="int" name="id" />
    <declaration type="PInputEvent" name="event" />
    <javadoc>
      <text>* Constructs a new PMouse event from a Java MouseEvent.</text>
      <param>id The event type (MOUSE_PRESSED, MOUSE_RELEASED, MOUSE_CLICKED,
 * MOUSE_ENTERED, MOUSE_EXITED)</param>
      <param>swingEvent The original swing mouse event when in MOUSE_RELEASED
 * events.</param>
      <param>piccoloEvent used to query about the event's Piccolo context</param>
    </javadoc>
    <method type="constructor" name="PSwingMouseEvent" startLine="93" endLine="98" />
    <javadoc>
      <text>* Creates and returns a new PMouse event from a Java MouseEvent.</text>
      <param>id The event type (MOUSE_PRESSED, MOUSE_RELEASED, MOUSE_CLICKED,
 * MOUSE_ENTERED, MOUSE_EXITED, MOUSE_MOVED, MOUSE_DRAGGED)</param>
      <param>swingEvent The original swing mouse event when in
 * MOUSE_DRAGGED and MOUSE_RELEASED events.</param>
      <param>pEvent used to query about the event's Piccolo2d context</param>
      <return>the constructed PSwingEvent</return>
    </javadoc>
    <method type="PSwingEvent" name="createMouseEvent" startLine="111" endLine="125">
      <scope startLine="112" endLine="114" />
      <scope startLine="116" endLine="118" />
      <scope startLine="119" endLine="121" />
      <scope startLine="122" endLine="124" />
    </method>
    <javadoc>
      <text>* Returns the x,y position of the event in the local coordinate system of
 * the node the event occurred on.</text>
      <return>a Point2D object containing the x and y coordinates local to the
 * node.</return>
    </javadoc>
    <method type="Point2D" name="getLocalPoint" startLine="134" endLine="136" />
    <javadoc>
      <text>* Returns the horizontal x position of the event in the local coordinate
 * system of the node the event occurred on.</text>
      <return>x a double indicating horizontal position local to the node.</return>
    </javadoc>
    <method type="double" name="getLocalX" startLine="144" endLine="146" />
    <javadoc>
      <text>* Returns the vertical y position of the event in the local coordinate
 * system of the node the event occurred on.</text>
      <return>y a double indicating vertical position local to the node.</return>
    </javadoc>
    <method type="double" name="getLocalY" startLine="154" endLine="156" />
    <javadoc>
      <text>* Determine the event type.</text>
      <return>the id</return>
    </javadoc>
    <method type="int" name="getID" startLine="163" endLine="165" />
    <javadoc>
      <text>* Determine the node the event originated at. If an event percolates up the
 * tree and is handled by an event listener higher up in the tree than the
 * original node that generated the event, this returns the original node.
 * For mouse drag and release events, this is the node that the original
 * matching press event went to - in other words, the event is 'grabbed' by
 * the originating node.</text>
      <return>the node</return>
    </javadoc>
    <method type="PNode" name="getNode" startLine="177" endLine="179" />
    <javadoc>
      <text>* Determine the path the event took from the PCanvas down to the visual
 * component.</text>
      <return>the path</return>
    </javadoc>
    <method type="PPickPath" name="getPath" startLine="187" endLine="189" />
    <javadoc>
      <text>* Determine the node the event originated at. If an event percolates up the
 * tree and is handled by an event listener higher up in the tree than the
 * original node that generated the event, this returns the original node.
 * For mouse drag and release events, this is the node that the original
 * matching press event went to - in other words, the event is 'grabbed' by
 * the originating node.</text>
      <return>the node</return>
    </javadoc>
    <method type="PNode" name="getGrabNode" startLine="201" endLine="203" />
    <javadoc>
      <text>* Return the path from the PCanvas down to the currently grabbed object.</text>
      <return>the path</return>
    </javadoc>
    <method type="PPickPath" name="getGrabPath" startLine="210" endLine="212" />
    <javadoc>
      <text>* Get the current node that is under the cursor. This may return a
 * different result then getGrabNode() when in a MOUSE_RELEASED or
 * MOUSE_DRAGGED event.</text>
      <return>the current node.</return>
    </javadoc>
    <method type="PNode" name="getCurrentNode" startLine="221" endLine="223" />
    <javadoc>
      <text>* Get the path from the PCanvas down to the visual component currently
 * under the mouse.This may give a different result then getGrabPath()
 * durring a MOUSE_DRAGGED or MOUSE_RELEASED operation.</text>
      <return>the current path.</return>
    </javadoc>
    <method type="PPickPath" name="getCurrentPath" startLine="232" endLine="234" />
    <javadoc>
      <text>* Calls appropriate method on the listener based on this events ID.</text>
      <param>listener the MouseListener or MouseMotionListener to dispatch to.</param>
    </javadoc>
    <method type="void" name="dispatchTo" startLine="241" endLine="262">
      <declaration type="MouseListener" name="mouseListener" />
    </method>
    <javadoc>
      <text>* Set the souce of this event. As the event is fired up the tree the source
 * of the event will keep changing to reflect the scenegraph object that is
 * firing the event.</text>
      <param>newSource the currently reported source of the event (will change
 * as event is bubbled up)</param>
    </javadoc>
    <method type="void" name="setSource" startLine="272" endLine="274" />
    <javadoc>
      <text>* Returns this PSwingMouseEvent's MouseEvent.</text>
      <return>underlying mouse event of this PSwingMouseEvent</return>
    </javadoc>
    <method type="MouseEvent" name="asMouseEvent" startLine="281" endLine="283" />
  </class>
</source>
