<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.pswing">
  <import name="java.awt.Rectangle" />
  <import name="java.awt.geom.Rectangle2D" />
  <import name="java.io.Serializable" />
  <import name="java.util.Vector" />
  <import name="javax.swing.ComboBoxModel" />
  <import name="javax.swing.JComboBox" />
  <import name="javax.swing.plaf.basic.BasicComboBoxUI" />
  <import name="javax.swing.plaf.basic.BasicComboPopup" />
  <import name="javax.swing.plaf.basic.ComboPopup" />
  <class name="PComboBox" extends="JComboBox" startLine="42">
    <implements name="Serializable" />
    <javadoc>
      <text>* The <b>PComboBox</b> is used instead of a JComboBox in a Piccolo scene graph.
 * This PComboBox won't work properly if it is located in an abnormal hierarchy
 * of Cameras. Support is provided for only one (or zero) view transforms.
 * <p>
 * A ComboBox for use in Piccolo. This still has an associated JPopupMenu (which
 * is always potentially heavyweight depending on component location relative to
 * containing window borders.) However, this ComboBox places the PopupMenu
 * component of the ComboBox in the appropriate position relative to the
 * permanent part of the ComboBox. The PopupMenu is never transformed.
 * </p>
 * <p>
 * This class was not designed for subclassing. If different behavior is
 * required, it seems more appropriate to subclass JComboBox directly using this
 * class as a model.
 * </p>
 * <p>
 * NOTE: There is currently a known bug, namely, if the ComboBox receives focus
 * through 'tab' focus traversal and the keyboard is used to interact with the
 * ComboBox, there may be unexpected results.
 * </p>
 * <p>
 * <b>Warning:</b> Serialized objects of this class will not be compatible with
 * future Piccolo releases. The current serialization support is appropriate for
 * short term storage or RMI between applications running the same version of
 * Piccolo. A future release of Piccolo will provide support for long term
 * persistence.
 * </p></text>
      <author>Lance Good</author>
    </javadoc>
    <javadoc />
    <declaration type="long" name="serialVersionUID" />
    <declaration type="PSwing" name="pSwing" />
    <declaration type="PSwingCanvas" name="canvas" />
    <javadoc>
      <text>* Creates a PComboBox that takes its items from an existing ComboBoxModel.</text>
      <param>model The ComboBoxModel from which the list will be created</param>
    </javadoc>
    <method type="constructor" name="PComboBox" startLine="87" endLine="90" />
    <javadoc>
      <text>* Creates a PComboBox that contains the elements in the specified array.</text>
      <param>items The items to populate the PComboBox list</param>
    </javadoc>
    <method type="constructor" name="PComboBox" startLine="97" endLine="100" />
    <javadoc>
      <text>* Creates a PComboBox that contains the elements in the specified Vector.</text>
      <param>items The items to populate the PComboBox list</param>
    </javadoc>
    <method type="constructor" name="PComboBox" startLine="107" endLine="110" />
    <javadoc>
      <text>* Create an empty PComboBox.</text>
    </javadoc>
    <method type="constructor" name="PComboBox" startLine="115" endLine="118" />
    <javadoc>
      <text>* Substitute our UI for the default.</text>
    </javadoc>
    <method type="void" name="init" startLine="123" endLine="125" />
    <javadoc>
      <text>* Clients must set the PSwing and PSwingCanvas environment for this
 * PComboBox to work properly.</text>
      <param>pSwingNode node that this PComboBox is attached to</param>
      <param>canvasEnvirnoment canvas on which the pSwing node is embedded</param>
    </javadoc>
    <method type="void" name="setEnvironment" startLine="134" endLine="137" />
    <class name="PBasicComboBoxUI" extends="BasicComboBoxUI" startLine="139">
      <javadoc>
        <text>* The substitute look and feel - used to capture the mouse events on the
 * arrowButton and the component itself and to create our PopupMenu rather
 * than the default.</text>
      </javadoc>
      <javadoc>
        <text>* Create our Popup instead of swing's default.</text>
        <return>a new ComboPopup</return>
      </javadoc>
      <method type="ComboPopup" name="createPopup" startLine="151" endLine="155">
        <declaration type="PBasicComboPopup" name="popup" />
      </method>
      <class name="PBasicComboPopup" extends="BasicComboPopup" startLine="158">
        <javadoc>
          <text>* The substitute ComboPopupMenu that places itself correctly in Piccolo2d.</text>
        </javadoc>
        <declaration type="long" name="serialVersionUID" />
        <javadoc>
          <text>* Creates a PBasicComboPopup that will position itself correctly in
 * relation to the provided JComboBox.</text>
          <param>combo The associated ComboBox</param>
        </javadoc>
        <method type="constructor" name="PBasicComboPopup" startLine="170" endLine="172" />
        <javadoc>
          <text>* Computes the bounds for the Popup in Piccolo2D if a PMouseEvent has
 * been received. Otherwise, it uses the default algorithm for placing
 * the popup.</text>
          <param>px corresponds to the x coordinate of the popup</param>
          <param>py corresponds to the y coordinate of the popup</param>
          <param>pw corresponds to the width of the popup</param>
          <param>ph corresponds to the height of the popup</param>
          <return>The bounds for the PopupMenu</return>
        </javadoc>
        <method type="Rectangle" name="computePopupBounds" startLine="185" endLine="189">
          <declaration type="Rectangle2D" name="r" />
          <declaration type="Rectangle" name="sup" />
        </method>
        <method type="Rectangle2D" name="getNodeBoundsInCanvas" startLine="192" endLine="202">
          <scope startLine="193" endLine="196" />
          <declaration type="Rectangle2D" name="r1c" />
        </method>
        <javadoc>
          <text>* Returns the associated PSwing node.</text>
          <return>associated PSwing node</return>
        </javadoc>
        <method type="PSwing" name="getPSwing" startLine="209" endLine="211" />
        <javadoc>
          <text>* Returns the canvas on which the PSwing node is embedded.</text>
          <return>canvas on which the PSwing node is embedded</return>
        </javadoc>
        <method type="PSwingCanvas" name="getCanvas" startLine="218" endLine="220" />
      </class>
    </class>
  </class>
</source>
