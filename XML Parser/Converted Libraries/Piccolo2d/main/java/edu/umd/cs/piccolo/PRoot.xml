<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo">
  <import name="java.awt.event.ActionListener" />
  <import name="java.util.ArrayList" />
  <import name="java.util.Iterator" />
  <import name="java.util.List" />
  <import name="javax.swing.SwingUtilities" />
  <import name="javax.swing.Timer" />
  <import name="edu.umd.cs.piccolo.activities.PActivity" />
  <import name="edu.umd.cs.piccolo.activities.PActivityScheduler" />
  <import name="edu.umd.cs.piccolo.util.PDebug" />
  <import name="edu.umd.cs.piccolo.util.PNodeFilter" />
  <class name="PRoot" extends="PNode" startLine="44">
    <javadoc>
      <text>* <b>PRoot</b> serves as the top node in Piccolo2D's runtime structure. The
 * PRoot responsible for running the main UI loop that processes input from
 * activities and external events.
 * <P></text>
      <version>1.1</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc>
      <text>* Allows for future serialization code to understand versioned binary
 * formats.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* The property name that identifies a change in the set of this root's
 * input sources (see {@link InputSource InputSource}). In any property
 * change event the new value will be a reference to the list of this root's
 * input sources, but old value will always be null.</text>
    </javadoc>
    <declaration type="String" name="PROPERTY_INPUT_SOURCES" />
    <javadoc>
      <text>* The property code that identifies a change in the set of this root's
 * input sources (see {@link InputSource InputSource}). In any property
 * change event the new value will be a reference to the list of this root's
 * input sources, but old value will always be null.</text>
    </javadoc>
    <declaration type="int" name="PROPERTY_CODE_INPUT_SOURCES" />
    <javadoc>
      <text>* The property name that identifies a change in this node's interacting
 * state.</text>
      <since>1.3</since>
    </javadoc>
    <declaration type="String" name="PROPERTY_INTERACTING_CHANGED" />
    <javadoc>
      <text>* The property code that identifies a change in this node's interacting
 * state.</text>
      <since>1.3</since>
    </javadoc>
    <declaration type="int" name="PROPERTY_CODE_INTERACTING_CHANGED" />
    <javadoc>
      <text>* Whether this not is currently processing inputs.</text>
    </javadoc>
    <declaration type="boolean" name="processingInputs" />
    <javadoc>
      <text>* Whether this node needs to have its inputs processed.</text>
    </javadoc>
    <declaration type="boolean" name="processInputsScheduled" />
    <javadoc>
      <text>* The number of interactions this node is currently participating in.</text>
    </javadoc>
    <declaration type="int" name="interacting" />
    <javadoc>
      <text>* The singleton instance of the default input manager.</text>
    </javadoc>
    <declaration type="PInputManager" name="defaultInputManager" />
    <javadoc>
      <text>* The Input Sources that are registered to this node.</text>
    </javadoc>
    <declaration type="List" name="inputSources" />
    <javadoc>
      <text>* Used to provide a consistent clock time to activities as they are being
 * processed.
 * Should it happen that an activity step take longer than a millisecond,
 * the next step will be unaffected by the change in clock had it used
 * System.currentMillis().</text>
    </javadoc>
    <declaration type="long" name="globalTime" />
    <javadoc>
      <text>* Object responsible for scheduling activities, regardless of where in the
 * scene they take place.</text>
    </javadoc>
    <declaration type="PActivityScheduler" name="activityScheduler" />
    <javadoc>
      <text>* Construct a new PRoot(). Note the PCanvas already creates a basic scene
 * graph for you so often you will not need to construct your own roots.</text>
    </javadoc>
    <method type="constructor" name="PRoot" startLine="130" endLine="135" />
    <javadoc>
      <text>* Add an activity to the activity scheduler associated with this root.
 * Activities are given a chance to run during each call to the roots
 * <code>processInputs</code> method. When the activity has finished running
 * it will automatically get removed.</text>
      <param>activity Activity that should be scheduled</param>
      <return>whether it has been scheduled (always true)</return>
    </javadoc>
    <method type="boolean" name="addActivity" startLine="150" endLine="153" />
    <javadoc>
      <text>* Get the activity scheduler associated with this root.</text>
      <return>associated scheduler</return>
    </javadoc>
    <method type="PActivityScheduler" name="getActivityScheduler" startLine="160" endLine="162" />
    <javadoc>
      <text>* Wait for all scheduled activities to finish before returning from this
 * method. This will freeze out user input, and so it is generally
 * recommended that you use PActivities.setTriggerTime() to offset
 * activities instead of using this method.</text>
    </javadoc>
    <method type="void" name="waitForActivities" startLine="170" endLine="181">
      <declaration type="PNodeFilter" name="cameraWithCanvas" />
      <scope startLine="173" endLine="180">
        <declaration type="Iterator" name="i" />
        <scope startLine="176" endLine="179">
          <declaration type="PCamera" name="each" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Since getRoot is handled recursively, and root is the lowest point in the
 * hierarchy, simply returns itself.</text>
      <return>itself</return>
    </javadoc>
    <method type="PRoot" name="getRoot" startLine="189" endLine="191" />
    <javadoc>
      <text>* Get the default input manager to be used when processing input events.
 * PCanvas's use this method when they forward new swing input events to the
 * PInputManager.</text>
      <return>a singleton instance of PInputManager</return>
    </javadoc>
    <method type="PInputManager" name="getDefaultInputManager" startLine="200" endLine="206">
      <scope startLine="201" endLine="204" />
    </method>
    <javadoc>
      <text>* Return true if this root has been marked as interacting. If so the root
 * will normally render at a lower quality that is faster.</text>
      <since>1.3</since>
      <return>true if this root has user interaction taking place</return>
    </javadoc>
    <method type="boolean" name="getInteracting" startLine="215" endLine="217" />
    <javadoc>
      <text>* Set if this root is interacting. If so the root will normally render at a
 * lower quality that is faster. Also repaints the root if the the
 * interaction has ended.
 * <p/>
 * This has similar functionality to the setInteracting method on Canvas,
 * but this is the appropriate place to mark interactions that may occur in
 * multiple canvases if this Root is shared.</text>
      <since>1.3</since>
      <param>isInteracting True if this root has user interaction taking place</param>
      <see>PCanvas#setInteracting(boolean)</see>
    </javadoc>
    <method type="void" name="setInteracting" startLine="232" endLine="256">
      <declaration type="boolean" name="wasInteracting" />
      <scope startLine="235" endLine="237" />
      <scope startLine="238" endLine="240" />
      <scope startLine="242" endLine="251">
        <scope startLine="244" endLine="249">
          <declaration type="PNode" name="child" />
          <scope startLine="246" endLine="248" />
        </scope>
        <comment>force all the child cameras to repaint</comment>
      </scope>
      <scope startLine="252" endLine="255" />
    </method>
    <javadoc>
      <text>* Advanced. If you want to add additional input sources to the roots UI
 * process you can do that here. You will seldom do this unless you are
 * making additions to the Piccolo2D framework.</text>
      <param>inputSource An input source that should be added</param>
    </javadoc>
    <method type="void" name="addInputSource" startLine="265" endLine="268" />
    <javadoc>
      <text>* Advanced. If you want to remove the default input source from the roots
 * UI process you can do that here. You will seldom do this unless you are
 * making additions to the Piccolo2D framework.</text>
      <param>inputSource input source that should no longer be asked about
 * input events</param>
    </javadoc>
    <method type="void" name="removeInputSource" startLine="278" endLine="282">
      <scope startLine="279" endLine="281" />
    </method>
    <javadoc>
      <text>* Returns a new timer. This method allows subclasses, such as PSWTRoot to
 * create custom timers that will be used transparently by the Piccolo2D
 * framework.</text>
      <param>delay # of milliseconds before action listener is invoked</param>
      <param>listener listener to be invoked after delay</param>
      <return>A new Timer</return>
    </javadoc>
    <method type="Timer" name="createTimer" startLine="294" endLine="296" />
    <javadoc>
      <text>* Get the global Piccolo2D time. This is set to System.currentTimeMillis()
 * at the beginning of the roots <code>processInputs</code> method.
 * Activities should usually use this global time instead of System.
 * currentTimeMillis() so that multiple activities will be synchronized.</text>
      <return>time as recorded at the beginning of activity scheduling</return>
    </javadoc>
    <method type="long" name="getGlobalTime" startLine="310" endLine="312" />
    <javadoc>
      <text>* This is the heartbeat of the Piccolo2D framework. Pending input events
 * are processed. Activities are given a chance to run, and the bounds
 * caches and any paint damage is validated.</text>
    </javadoc>
    <method type="void" name="processInputs" startLine="319" endLine="338">
      <scope startLine="324" endLine="330">
        <declaration type="Iterator" name="inputSourceIterator" />
        <scope startLine="326" endLine="329">
          <declaration type="InputSource" name="each" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setFullBoundsInvalid" startLine="341" endLine="344" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setChildBoundsInvalid" startLine="347" endLine="350" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setPaintInvalid" startLine="353" endLine="356" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setChildPaintInvalid" startLine="359" endLine="362" />
    <javadoc>
      <text>* Schedule process inputs if needed.</text>
    </javadoc>
    <method type="void" name="scheduleProcessInputsIfNeeded" startLine="367" endLine="396">
      <scope startLine="374" endLine="381">
        <comment>Piccolo2D is not thread safe and should almost always be called
 from the Swing event dispatch thread. It should only reach this
 point when a new canvas is being created.</comment>
      </scope>
      <scope startLine="386" endLine="395">
        <method type="void" name="run" startLine="390" endLine="393" />
      </scope>
      <comment>The reason for the special case here (when not in the event dispatch
 thread) is that the SwingUtilitiles.invokeLater code below only
 invokes later with respect to the event dispatch thread, it will
 invoke concurrently with other threads.</comment>
    </method>
    <class name="CameraWithCanvasFilter" startLine="398">
      <implements name="PNodeFilter" />
      <method type="boolean" name="accept" startLine="399" endLine="401" />
      <method type="boolean" name="acceptChildrenOf" startLine="403" endLine="405" />
      <interface name="InputSource" startLine="408">
        <javadoc>
          <text>* This interfaces is for advanced use only. If you want to implement a
 * different kind of input framework then Piccolo2D provides you can hook it
 * in here.</text>
        </javadoc>
        <method name="processInput" type="void" startLine="414" endLine="415" />
        <javadoc>
          <text>* Causes the system to process any pending Input Events.</text>
        </javadoc>
      </interface>
    </class>
    <comment>****************************************************************</comment>
    <comment>Activities</comment>
    <comment>****************************************************************</comment>
    <comment>****************************************************************</comment>
    <comment>UI Loop - Methods for running the main UI loop of Piccolo2D.</comment>
    <comment>****************************************************************</comment>
  </class>
</source>
