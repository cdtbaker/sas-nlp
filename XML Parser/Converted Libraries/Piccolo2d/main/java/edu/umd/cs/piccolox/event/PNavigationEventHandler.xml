<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.event">
  <import name="java.awt.event.InputEvent" />
  <import name="java.awt.event.KeyEvent" />
  <import name="java.awt.geom.AffineTransform" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.util.ArrayList" />
  <import name="java.util.Collections" />
  <import name="java.util.Comparator" />
  <import name="java.util.Hashtable" />
  <import name="java.util.Iterator" />
  <import name="java.util.List" />
  <import name="edu.umd.cs.piccolo.PCamera" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.activities.PActivity" />
  <import name="edu.umd.cs.piccolo.activities.PTransformActivity" />
  <import name="edu.umd.cs.piccolo.event.PBasicInputEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PInputEvent" />
  <import name="edu.umd.cs.piccolo.event.PInputEventFilter" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <import name="edu.umd.cs.piccolo.util.PDimension" />
  <class name="PNavigationEventHandler" extends="PBasicInputEventHandler" startLine="52">
    <javadoc>
      <text>* <b>PNavigationEventHandler</b> implements simple focus based navigation. Uses
 * mouse button one or the arrow keys to set a new focus. Animates the canvas
 * view to keep the focus node on the screen and at 100 percent scale with
 * minimal view movement.</text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc>
      <text>* Minum size under which two scales are considered the same.</text>
    </javadoc>
    <declaration type="double" name="SCALING_THRESHOLD" />
    <javadoc>
      <text>* Amount of time it takes to animation view from one location to another.</text>
    </javadoc>
    <declaration type="int" name="NAVIGATION_DURATION" />
    <javadoc>
      <text>* The UP direction on the screen.</text>
    </javadoc>
    <declaration type="int" name="NORTH" />
    <javadoc>
      <text>* The DOWN direction on the screen.</text>
    </javadoc>
    <declaration type="int" name="SOUTH" />
    <javadoc>
      <text>* The RIGHT direction on the screen.</text>
    </javadoc>
    <declaration type="int" name="EAST" />
    <javadoc>
      <text>* The LEFT direction on the screen.</text>
    </javadoc>
    <declaration type="int" name="WEST" />
    <javadoc>
      <text>* The IN direction on the scene.</text>
    </javadoc>
    <declaration type="int" name="IN" />
    <javadoc>
      <text>* The OUT direction on the scene.</text>
    </javadoc>
    <declaration type="int" name="OUT" />
    <declaration type="Hashtable" name="NODE_TO_GLOBAL_NODE_CENTER_MAPPING" />
    <declaration type="PNode" name="focusNode" />
    <declaration type="PTransformActivity" name="navigationActivity" />
    <javadoc>
      <text>* Constructs a Navigation Event Handler that will only accepts left mouse
 * clicks.</text>
    </javadoc>
    <method type="constructor" name="PNavigationEventHandler" startLine="88" endLine="91" />
    <javadoc>
      <text>* Processes key pressed events.</text>
      <param>event event representing the key press</param>
    </javadoc>
    <method type="void" name="keyPressed" startLine="102" endLine="140">
      <declaration type="PNode" name="oldLocation" />
      <scope startLine="116" endLine="118" />
      <scope startLine="119" endLine="121" />
      <scope startLine="126" endLine="128" />
      <scope startLine="129" endLine="131" />
      <scope startLine="137" endLine="139" />
      <comment>Pressed key is not a navigation key.</comment>
    </method>
    <javadoc>
      <text>* Animates the camera to the node that has been pressed.</text>
      <param>event event representing the mouse press</param>
    </javadoc>
    <method type="void" name="mousePressed" startLine="147" endLine="154">
      <scope startLine="150" endLine="153" />
    </method>
    <javadoc>
      <text>* Moves the focus in the downward direction. Animating the camera
 * accordingly.</text>
      <param>event ignored</param>
    </javadoc>
    <method type="void" name="moveFocusDown" startLine="170" endLine="172" />
    <javadoc>
      <text>* Moves the focus "into" the scene. So smaller nodes appear larger on
 * screen. Animates the camera accordingly.</text>
      <param>event ignored</param>
    </javadoc>
    <method type="void" name="moveFocusIn" startLine="180" endLine="182" />
    <javadoc>
      <text>* Moves the focus in the left direction. Animating the camera accordingly.</text>
      <param>event ignored</param>
    </javadoc>
    <method type="void" name="moveFocusLeft" startLine="189" endLine="191" />
    <javadoc>
      <text>* Moves the focus "out" of scene. So larger nodes appear smaller on screen.
 * Animates the camera accordingly.</text>
      <param>event ignored</param>
    </javadoc>
    <method type="void" name="moveFocusOut" startLine="199" endLine="201" />
    <javadoc>
      <text>* Moves the focus in the right direction. Animating the camera accordingly.</text>
      <param>event ignored</param>
    </javadoc>
    <method type="void" name="moveFocusRight" startLine="208" endLine="210" />
    <javadoc>
      <text>* Moves the focus in the up direction. Animating the camera accordingly.</text>
      <param>event ignored</param>
    </javadoc>
    <method type="void" name="moveFocusUp" startLine="217" endLine="219" />
    <javadoc>
      <text>* Moves the focus to the nearest node in the direction specified. Animating
 * the camera appropriately.</text>
      <param>direction one of NORTH, SOUTH, EAST, WEST, IN, OUT</param>
    </javadoc>
    <method type="void" name="moveFocusInDirection" startLine="227" endLine="233">
      <declaration type="PNode" name="n" />
      <scope startLine="230" endLine="232" />
    </method>
    <javadoc>
      <text>* Moves the focus to the mouse under the mouse. Animating the camera
 * appropriately.</text>
      <param>event mouse event</param>
    </javadoc>
    <method type="void" name="moveFocusToMouseOver" startLine="241" endLine="246">
      <declaration type="PNode" name="focus" />
      <scope startLine="243" endLine="245" />
    </method>
    <javadoc>
      <text>* Returns the nearest node in the given direction.</text>
      <param>direction direction in which to look the nearest node</param>
      <return>nearest node in the given direction</return>
    </javadoc>
    <method type="PNode" name="getNeighborInDirection" startLine="255" endLine="277">
      <scope startLine="256" endLine="258" />
      <declaration type="Point2D" name="highlightCenter" />
      <declaration type="List" name="l" />
      <declaration type="Iterator" name="i" />
      <scope startLine="269" endLine="274">
        <declaration type="PNode" name="each" />
        <scope startLine="271" endLine="273" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns all pickable nodes that are 1 hop away from the currently focused
 * node. This includes, parent, children, and siblings.</text>
      <return>list of nodes that are 1 hop away from the current focusNode</return>
    </javadoc>
    <method type="List" name="getNeighbors" startLine="285" endLine="305">
      <declaration type="ArrayList" name="result" />
      <scope startLine="287" endLine="289" />
      <declaration type="PNode" name="focusParent" />
      <declaration type="Iterator" name="i" />
      <scope startLine="295" endLine="300">
        <declaration type="PNode" name="each" />
        <scope startLine="297" endLine="299" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns true if the given node is a neighbor in the given direction
 * relative to the current focus.</text>
      <param>node the node being tested</param>
      <param>direction the direction in which we're testing</param>
      <return>true if node is a neighbor in the direction provided</return>
    </javadoc>
    <method type="boolean" name="nodeIsNeighborInDirection" startLine="316" endLine="356">
      <scope startLine="325" endLine="327" />
      <declaration type="Point2D" name="highlightCenter" />
      <declaration type="Point2D" name="nodeCenter" />
      <declaration type="double" name="ytest1" />
      <declaration type="double" name="ytest2" />
    </method>
    <javadoc>
      <text>* Modifies the array so that it's sorted in ascending order based on the
 * distance from the given point.</text>
      <param>nodes list of nodes to be sorted</param>
      <param>point point from which distance is being computed</param>
    </javadoc>
    <method type="void" name="sortNodesByDistanceFromPoint" startLine="365" endLine="381">
      <method type="int" name="compare" startLine="367" endLine="369" />
      <method type="int" name="compare" startLine="371" endLine="379">
        <declaration type="Point2D" name="center1" />
        <declaration type="Point2D" name="center2" />
      </method>
    </method>
    <javadoc>
      <text>* Animates the camera's view transform into the provided one over the
 * duration provided.</text>
      <param>camera camera being animated</param>
      <param>targetTransform the transform to which the camera's transform will
 * be animated</param>
      <param>duration the number of milliseconds the animation should last</param>
      <return>an activity object that represents the animation</return>
    </javadoc>
    <method type="PActivity" name="animateCameraViewTransformTo" startLine="400" endLine="423">
      <declaration type="boolean" name="wasOldAnimation" />
      <scope startLine="404" endLine="407" />
      <scope startLine="409" endLine="412" />
      <declaration type="AffineTransform" name="source" />
      <scope startLine="416" endLine="418" />
      <comment>first stop any old animations.</comment>
    </method>
    <javadoc>
      <text>* Animates the Camera's view so that it contains the new focus node.</text>
      <param>camera The camera to be animated</param>
      <param>newFocus the node that will gain focus</param>
      <param>duration number of milliseconds that animation should last for</param>
      <return>an activity object representing the scheduled animation</return>
    </javadoc>
    <method type="PActivity" name="directCameraViewToFocus" startLine="434" endLine="462">
      <declaration type="AffineTransform" name="originalViewTransform" />
      <declaration type="PDimension" name="d" />
      <declaration type="double" name="scaleFactor" />
      <declaration type="Point2D" name="scalePoint" />
      <scope startLine="443" endLine="445" />
      <declaration type="AffineTransform" name="resultingTransform" />
      <comment>Pan the canvas to include the view bounds with minimal canvas</comment>
      <comment>movement.</comment>
      <comment>Get rid of any white space. The canvas may be panned and</comment>
      <comment>zoomed in to do this. But make sure not stay constrained by max</comment>
      <comment>magnification.</comment>
      <comment>fillViewWhiteSpace(aCamera);</comment>
      <comment>Animate the canvas so that it ends up with the given</comment>
      <comment>view transform.</comment>
    </method>
    <javadoc>
      <text>* Instantaneously transforms the provided camera so that it does not
 * contain any extra white space.</text>
      <param>camera the camera to be transformed</param>
    </javadoc>
    <method type="void" name="fillViewWhiteSpace" startLine="470" endLine="497">
      <declaration type="PBounds" name="rootBounds" />
      <scope startLine="473" endLine="475" />
      <declaration type="double" name="dx" />
      <declaration type="double" name="dy" />
      <declaration type="PBounds" name="viewBounds" />
      <scope startLine="486" endLine="489">
        <comment>then center along x axis.</comment>
      </scope>
      <scope startLine="491" endLine="494">
        <comment>then center along y axis.</comment>
      </scope>
      <comment>center content.</comment>
    </method>
    <comment>****************************************************************</comment>
    <comment>Focus Change Events.</comment>
    <comment>****************************************************************</comment>
    <comment>****************************************************************</comment>
    <comment>Focus Movement - Moves the focus the specified direction. Left,</comment>
    <comment>right, up, down mean move the focus to the closest sibling of the</comment>
    <comment>current focus node that exists in that direction. Move in means</comment>
    <comment>move the focus to a child of the current focus, move out means</comment>
    <comment>move the focus to the parent of the current focus.</comment>
    <comment>****************************************************************</comment>
    <comment>****************************************************************</comment>
    <comment>Canvas Movement - The canvas view is updated so that the current</comment>
    <comment>focus remains visible on the screen at 100 percent scale.</comment>
    <comment>****************************************************************</comment>
  </class>
</source>
