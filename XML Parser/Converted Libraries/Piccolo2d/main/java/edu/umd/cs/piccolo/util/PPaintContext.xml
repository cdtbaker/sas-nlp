<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.util">
  <import name="java.awt.AlphaComposite" />
  <import name="java.awt.Composite" />
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.RenderingHints" />
  <import name="java.awt.Shape" />
  <import name="java.awt.font.FontRenderContext" />
  <import name="java.awt.geom.AffineTransform" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.awt.geom.Rectangle2D" />
  <import name="edu.umd.cs.piccolo.PCamera" />
  <class name="PPaintContext" startLine="43">
    <javadoc>
      <text>* <b>PPaintContext</b> is used by piccolo nodes to paint themselves on the
 * screen. PPaintContext wraps a Graphics2D to implement painting.
 * <P></text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc>
      <text>* Used for lowering quality of rendering when requested.</text>
    </javadoc>
    <declaration type="int" name="LOW_QUALITY_RENDERING" />
    <javadoc>
      <text>* Used for improving quality of rendering when requested.</text>
    </javadoc>
    <declaration type="int" name="HIGH_QUALITY_RENDERING" />
    <javadoc>
      <text>* Font context to use while in low quality rendering.</text>
    </javadoc>
    <declaration type="FontRenderContext" name="RENDER_QUALITY_LOW_FRC" />
    <javadoc>
      <text>* Font context to use while in high quality rendering.</text>
    </javadoc>
    <declaration type="FontRenderContext" name="RENDER_QUALITY_HIGH_FRC" />
    <javadoc>
      <deprecated>will disappear as soon as possible Global for accessing the
 * current paint context while painting.</deprecated>
    </javadoc>
    <declaration type="PPaintContext" name="CURRENT_PAINT_CONTEXT" />
    <javadoc>
      <text>* Used while calculating scale at which rendering is occurring.</text>
    </javadoc>
    <declaration type="double[]" name="PTS" />
    <javadoc>
      <text>* PaintContext is associated with this graphics context.</text>
    </javadoc>
    <declaration type="Graphics2D" name="graphics" />
    <javadoc>
      <text>* Used while computing transparency.</text>
    </javadoc>
    <declaration type="PStack" name="compositeStack" />
    <javadoc>
      <text>* Used to optimize clipping region.</text>
    </javadoc>
    <declaration type="PStack" name="clipStack" />
    <javadoc>
      <text>* Tracks clipping region in local coordinate system.</text>
    </javadoc>
    <declaration type="PStack" name="localClipStack" />
    <javadoc>
      <text>* Stack of cameras through which the node being painted is being viewed.</text>
    </javadoc>
    <declaration type="PStack" name="cameraStack" />
    <javadoc>
      <text>* Stack of transforms being applied to the drawing context.</text>
    </javadoc>
    <declaration type="PStack" name="transformStack" />
    <javadoc>
      <text>* The current render quality that all rendering should be done in.</text>
    </javadoc>
    <declaration type="int" name="renderQuality" />
    <javadoc>
      <text>* Creates a PPaintContext associated with the given graphics context.</text>
      <param>graphics graphics context to associate with this paint context</param>
    </javadoc>
    <method type="constructor" name="PPaintContext" startLine="99" endLine="117">
      <declaration type="Shape" name="clip" />
      <scope startLine="109" endLine="112" />
    </method>
    <javadoc>
      <text>* Returns the graphics context associated with this paint context.</text>
      <return>graphics context associated with this paint context</return>
    </javadoc>
    <method type="Graphics2D" name="getGraphics" startLine="124" endLine="126" />
    <javadoc>
      <text>* Returns the clipping region in the local coordinate system applied by
 * graphics.</text>
      <return>clipping region in the local coordinate system applied by
 * graphics</return>
    </javadoc>
    <method type="Rectangle2D" name="getLocalClip" startLine="135" endLine="137" />
    <javadoc>
      <text>* Returns scale of the current graphics context. By calculating how a unit
 * segment gets transformed after transforming it by the graphics context's
 * transform.</text>
      <return>scale of the current graphics context's transformation</return>
    </javadoc>
    <method type="double" name="getScale" startLine="146" endLine="154">
      <comment>x1, y1, x2, y2</comment>
    </method>
    <javadoc>
      <text>* Pushes the camera onto the camera stack.</text>
      <param>aCamera camera to push onto the stack</param>
    </javadoc>
    <method type="void" name="pushCamera" startLine="161" endLine="163" />
    <javadoc>
      <deprecated>in favor of popCamera()</deprecated>
      <param>aCamera absolute not used in any way</param>
    </javadoc>
    <method type="void" name="popCamera" startLine="170" endLine="172" />
    <javadoc>
      <text>* Removes the camera at the top of the camera stack.</text>
      <since>1.3</since>
    </javadoc>
    <method type="void" name="popCamera" startLine="179" endLine="181" />
    <javadoc>
      <text>* Returns the camera at the top of the camera stack, or null if stack is
 * empty.</text>
      <return>topmost camera on camera stack or null if stack is empty</return>
    </javadoc>
    <method type="PCamera" name="getCamera" startLine="189" endLine="191" />
    <javadoc>
      <text>* Pushes the given clip to the pain context.</text>
      <param>clip clip to be pushed</param>
    </javadoc>
    <method type="void" name="pushClip" startLine="198" endLine="205">
      <declaration type="Shape" name="currentClip" />
      <declaration type="Rectangle2D" name="newLocalClip" />
    </method>
    <javadoc>
      <text>* Removes the topmost clipping region from the clipping stack.</text>
      <param>clip not used in this method</param>
    </javadoc>
    <method type="void" name="popClip" startLine="212" endLine="216">
      <declaration type="Shape" name="newClip" />
    </method>
    <javadoc>
      <text>* Pushes the provided transparency onto the transparency stack if
 * necessary. If the transparency is fully opaque, then it does nothing.</text>
      <param>transparency transparency to be pushed onto the transparency stack</param>
    </javadoc>
    <method type="void" name="pushTransparency" startLine="224" endLine="238">
      <scope startLine="225" endLine="227" />
      <declaration type="Composite" name="current" />
      <declaration type="float" name="currentAlaph" />
      <scope startLine="232" endLine="234" />
      <declaration type="AlphaComposite" name="newComposite" />
    </method>
    <javadoc>
      <text>* Removes the topmost transparency if the given transparency is not opaque
 * (1f).</text>
      <param>transparency transparency to be popped</param>
    </javadoc>
    <method type="void" name="popTransparency" startLine="246" endLine="252">
      <scope startLine="247" endLine="249" />
      <declaration type="Composite" name="c" />
    </method>
    <javadoc>
      <text>* Pushed the provided transform onto the transform stack if it is not null.</text>
      <param>transform will be pushed onto the transform stack if not null</param>
    </javadoc>
    <method type="void" name="pushTransform" startLine="259" endLine="267">
      <scope startLine="260" endLine="266">
        <declaration type="Rectangle2D" name="newLocalClip" />
      </scope>
    </method>
    <javadoc>
      <text>* Pops the topmost Transform from the top of the transform if the passed in
 * transform is not null.</text>
      <param>transform transform that should be at the top of the stack</param>
    </javadoc>
    <method type="void" name="popTransform" startLine="275" endLine="280">
      <scope startLine="276" endLine="279" />
    </method>
    <javadoc>
      <text>* Return the render quality used by this paint context.</text>
      <return>the current render quality</return>
    </javadoc>
    <method type="int" name="getRenderQuality" startLine="287" endLine="289" />
    <javadoc>
      <text>* Set the rendering hints for this paint context. The render quality is
 * most often set by the rendering PCanvas. Use PCanvas.setRenderQuality()
 * and PCanvas.setInteractingRenderQuality() to set these values.</text>
      <param>requestedQuality supports PPaintContext.HIGH_QUALITY_RENDERING or
 * PPaintContext.LOW_QUALITY_RENDERING</param>
    </javadoc>
    <method type="void" name="setRenderQuality" startLine="299" endLine="314" />
    <method type="void" name="setRenderQualityToLow" startLine="316" endLine="321" />
    <method type="void" name="setRenderQualityToHigh" startLine="323" endLine="328" />
  </class>
</source>
