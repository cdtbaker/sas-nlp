<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.activities">
  <import name="edu.umd.cs.piccolo.util.PUtil" />
  <class name="PActivity" startLine="33">
    <javadoc>
      <text>* <b>PActivity</b> controls some time dependent aspect of Piccolo, such as
 * animation. Once created activities must be scheduled with the
 * PActivityScheduler managed by the PRoot to run. They are automatically
 * removed from the scheduler when the animation has finished.
 * <P>
 * See the PNode.animate*() methods for an example of how to set up and run
 * different activities.
 * <P></text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc>
      <text>* Parameter for terminate that signifies that activity should bail out
 * immediately without flagging activity as finished.</text>
    </javadoc>
    <declaration type="int" name="TERMINATE_WITHOUT_FINISHING" />
    <javadoc>
      <text>* Parameter for terminate that signifies that activity should bail out
 * immediately, but flag activity as finished.</text>
    </javadoc>
    <declaration type="int" name="TERMINATE_AND_FINISH" />
    <javadoc>
      <text>* Parameter for terminate that signifies that activity should bail out
 * immediately, if currently active.</text>
    </javadoc>
    <declaration type="int" name="TERMINATE_AND_FINISH_IF_STEPPING" />
    <javadoc>
      <text>* Activity scheduler that this activity is bound to.</text>
    </javadoc>
    <declaration type="PActivityScheduler" name="scheduler" />
    <javadoc>
      <text>* Time at which this activity should start in PRoot global time.</text>
    </javadoc>
    <declaration type="long" name="startTime" />
    <javadoc>
      <text>* Duration in milliseconds that this activity should last.</text>
    </javadoc>
    <declaration type="long" name="duration" />
    <javadoc>
      <text>* How many milliseconds should pass between steps.</text>
    </javadoc>
    <declaration type="long" name="stepRate" />
    <declaration type="PActivityDelegate" name="delegate" />
    <javadoc>
      <text>* Whether this activity is currently active.</text>
    </javadoc>
    <declaration type="boolean" name="stepping" />
    <javadoc>
      <text>* Next time at which step should occur.</text>
    </javadoc>
    <declaration type="long" name="nextStepTime" />
    <javadoc>
      <text>* Constructs a new PActivity.</text>
      <param>aDuration the amount of time that this activity should take to
 * complete, -1 for infinite.</param>
    </javadoc>
    <method type="constructor" name="PActivity" startLine="91" endLine="93" />
    <javadoc>
      <text>* Constructs a new PActivity.</text>
      <param>aDuration the amount of time that this activity should take to
 * complete, -1 for infinite.</param>
      <param>aStepRate the maximum rate that this activity should receive step
 * events.</param>
    </javadoc>
    <method type="constructor" name="PActivity" startLine="103" endLine="105" />
    <javadoc>
      <text>* Constructs a new PActivity.</text>
      <param>aDuration the amount of time that this activity should take to
 * complete, -1 for infinite.</param>
      <param>aStepRate the maximum rate that this activity should receive step
 * events.</param>
      <param>aStartTime the time (relative to System.currentTimeMillis()) that
 * this activity should start.</param>
    </javadoc>
    <method type="constructor" name="PActivity" startLine="117" endLine="123" />
    <javadoc>
      <text>* Return the time that this activity should start running in PRoot global
 * time. When this time is reached (or soon after) this activity will have
 * its startStepping() method called.</text>
      <return>time at which this activity should start in PRoot global time.</return>
    </javadoc>
    <method type="long" name="getStartTime" startLine="136" endLine="138" />
    <javadoc>
      <text>* Set the time that this activity should start running in PRoot global
 * time. When this time is reached (or soon after) this activity will have
 * its startStepping() method called.</text>
      <param>aTriggerTime time at which you want this activity to begin in
 * PRoot global time</param>
    </javadoc>
    <method type="void" name="setStartTime" startLine="148" endLine="150" />
    <javadoc>
      <text>* Return the amount of time that this activity should delay between steps.</text>
      <return>the desired milliseconds between steps</return>
    </javadoc>
    <method type="long" name="getStepRate" startLine="157" endLine="159" />
    <javadoc>
      <text>* Set the amount of time that this activity should delay between steps.</text>
      <param>aStepRate desired step rate in milliseconds between steps</param>
    </javadoc>
    <method type="void" name="setStepRate" startLine="166" endLine="168" />
    <javadoc>
      <text>* Gets the next step time desired for this activity. Exists since some
 * steps might eat into the step rate otherwise.</text>
      <return>next calculated step time</return>
    </javadoc>
    <method type="long" name="getNextStepTime" startLine="176" endLine="178" />
    <javadoc>
      <text>* Return the amount of time that this activity should take to complete,
 * after the startStepping method is called.</text>
      <return>time that this activity should take to complete</return>
    </javadoc>
    <method type="long" name="getDuration" startLine="186" endLine="188" />
    <javadoc>
      <text>* Set the amount of time that this activity should take to complete, after
 * the startStepping method is called.</text>
      <param>aDuration desired duration this activity should take (-1 for
 * infinite) once it begins stepping</param>
    </javadoc>
    <method type="void" name="setDuration" startLine="197" endLine="199" />
    <javadoc>
      <text>* Returns the activity scheduler associated with this activity.</text>
      <return>associated scheduler</return>
    </javadoc>
    <method type="PActivityScheduler" name="getActivityScheduler" startLine="206" endLine="208" />
    <javadoc>
      <text>* Informs the activity of the scheduler that will be responsible for
 * scheduling it.</text>
      <param>aScheduler scheduler to associate with this activity</param>
    </javadoc>
    <method type="void" name="setActivityScheduler" startLine="216" endLine="218" />
    <javadoc>
      <text>* Return true if this activity is stepping.</text>
      <return>whether this activity is stepping</return>
    </javadoc>
    <method type="boolean" name="isStepping" startLine="229" endLine="231" />
    <javadoc>
      <text>* Return true if this activity is performing an animation. This is used by
 * the PCanvas to determine if it should set the render quality to
 * PCanvas.animatingRenderQuality or not for each frame it renders.</text>
      <return>whether this activity is an animation, subclasses can override
 * this.</return>
    </javadoc>
    <method type="boolean" name="isAnimation" startLine="241" endLine="243" />
    <javadoc>
      <text>* This method is called right before an activity is scheduled to start
 * running. After this method is called step() will be called until the
 * activity finishes.</text>
    </javadoc>
    <method type="void" name="activityStarted" startLine="250" endLine="254">
      <scope startLine="251" endLine="253" />
    </method>
    <javadoc>
      <text>* This is the method that most activities override to perform their
 * behavior. It will be called repeatedly when the activity is running.</text>
      <param>elapsedTime the amount of time that has passed relative to the
 * activities startTime.</param>
    </javadoc>
    <method type="void" name="activityStep" startLine="263" endLine="267">
      <scope startLine="264" endLine="266" />
    </method>
    <javadoc>
      <text>* This method is called after an activity is has finished running and the
 * activity has been removed from the PActivityScheduler queue.</text>
    </javadoc>
    <method type="void" name="activityFinished" startLine="273" endLine="277">
      <scope startLine="274" endLine="276" />
    </method>
    <javadoc>
      <text>* Get the delegate for this activity. The delegate is notified when the
 * activity starts and stops stepping.</text>
      <return>delegate of this activity, may be null</return>
    </javadoc>
    <method type="PActivityDelegate" name="getDelegate" startLine="285" endLine="287" />
    <javadoc>
      <text>* Set the delegate for this activity. The delegate is notified when the
 * activity starts and stops stepping.</text>
      <param>delegate delegate that should be informed of activity events</param>
    </javadoc>
    <method type="void" name="setDelegate" startLine="295" endLine="297" />
    <javadoc>
      <text>* Schedules this activity to start after the first activity has finished.
 * Note that no link is created between these activities, if the startTime
 * or duration of the first activity is later changed this activities start
 * time will not be updated to reflect that change.</text>
      <param>first activity after which this activity should be scheduled</param>
    </javadoc>
    <method type="void" name="startAfter" startLine="311" endLine="313" />
    <javadoc>
      <text>* Stop this activity immediately, and remove it from the activity
 * scheduler. The default termination behavior is call activityFinished if
 * the activity is currently stepping. Use terminate(terminationBehavior)
 * use a different termination behavior.</text>
    </javadoc>
    <method type="void" name="terminate" startLine="321" endLine="323" />
    <javadoc>
      <text>* Stop this activity immediately, and remove it from the activity
 * scheduler. The termination behavior determines when and if
 * activityStarted and activityFinished get called. The possible termination
 * behaviors are as follow:
 * TERMINATE_WITHOUT_FINISHING - The method activityFinished will never get
 * called and so the activity will be terminated midway.
 * TERMINATE_AND_FINISH - The method activityFinished will always get
 * called. And so the activity will always end in it's completed state. If
 * the activity has not yet started the method activityStarted will also be
 * called. TERMINATE_AND_FINISH_IF_STEPPING - The method activityFinished
 * will only be called if the activity has previously started.</text>
      <param>terminationBehavior behavior to use regarding delegate
 * notification and event firing</param>
    </javadoc>
    <method type="void" name="terminate" startLine="342" endLine="373">
      <scope startLine="343" endLine="345" />
      <scope startLine="353" endLine="356" />
      <scope startLine="357" endLine="360" />
      <scope startLine="365" endLine="368" />
    </method>
    <javadoc>
      <text>* The activity scheduler calls this method and it is here that the activity
 * decides if it should do a step or not for the given time.</text>
      <param>currentTime in global root time</param>
      <return>number of milliseconds in global root time before processStep
 * should be called again, -1 if never</return>
    </javadoc>
    <method type="long" name="processStep" startLine="383" endLine="416">
      <scope startLine="385" endLine="387" />
      <scope startLine="390" endLine="402">
        <scope startLine="391" endLine="395" />
        <scope startLine="396" endLine="400" />
      </scope>
      <scope startLine="405" endLine="408" />
      <scope startLine="410" endLine="413" />
      <comment>if before start time</comment>
      <comment>if past stop time</comment>
      <comment>else should be stepping</comment>
    </method>
    <javadoc>
      <text>* Return the time when this activity should finish running. At this time
 * (or soon after) the stoppedStepping method will be called</text>
      <return>time at which this activity should be stopped</return>
    </javadoc>
    <method type="long" name="getStopTime" startLine="424" endLine="429">
      <scope startLine="425" endLine="427" />
    </method>
    <javadoc>
      <deprecated>see http://code.google.com/p/piccolo2d/issues/detail?id=99</deprecated>
      <return>string representation of this activity</return>
    </javadoc>
    <method type="String" name="paramString" startLine="436" endLine="438" />
    <interface name="PActivityDelegate" startLine="440">
      <javadoc>
        <text>* <b>PActivityDelegate</b> is used by classes to learn about and act on the
 * different states that a PActivity goes through, such as when the activity
 * starts and stops stepping.</text>
      </javadoc>
      <method name="activityStarted" type="void" startLine="446" endLine="451" />
      <javadoc>
        <text>* Gets called when the activity starts.</text>
        <param>activity activity that started</param>
      </javadoc>
      <method name="activityStepped" type="void" startLine="453" endLine="458" />
      <javadoc>
        <text>* Gets called for each step of the activity.</text>
        <param>activity activity that is stepping</param>
      </javadoc>
      <method name="activityFinished" type="void" startLine="460" endLine="465" />
      <javadoc>
        <text>* Gets called when the activity finishes.</text>
        <param>activity activity that finished</param>
      </javadoc>
    </interface>
    <comment>****************************************************************</comment>
    <comment>Basics</comment>
    <comment>****************************************************************</comment>
    <comment>****************************************************************</comment>
    <comment>Stepping</comment>
    <comment>****************************************************************</comment>
    <comment>****************************************************************</comment>
    <comment>Controlling</comment>
    <comment>****************************************************************</comment>
  </class>
</source>
