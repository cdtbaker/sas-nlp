<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.swing">
  <import name="java.awt.Component" />
  <import name="java.awt.Dimension" />
  <import name="java.awt.Point" />
  <import name="java.awt.Rectangle" />
  <import name="java.awt.event.ActionEvent" />
  <import name="java.awt.event.AdjustmentEvent" />
  <import name="java.awt.event.AdjustmentListener" />
  <import name="javax.swing.AbstractAction" />
  <import name="javax.swing.ActionMap" />
  <import name="javax.swing.JScrollBar" />
  <import name="javax.swing.JScrollPane" />
  <import name="javax.swing.JViewport" />
  <import name="javax.swing.Scrollable" />
  <import name="javax.swing.SwingConstants" />
  <import name="javax.swing.plaf.ScrollPaneUI" />
  <import name="edu.umd.cs.piccolo.PCanvas" />
  <class name="PScrollPane" extends="JScrollPane" startLine="50">
    <javadoc>
      <text>* A simple extension to a standard scroll pane that uses the jazz version of
 * the viewport by default. Also uses the jazz version of ScrollPaneLayout</text>
      <author>Lance Good</author>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* A reusable null action.</text>
    </javadoc>
    <declaration type="PNullAction" name="nullAction" />
    <javadoc>
      <text>* Controls whether key actions are disabled on this component.</text>
    </javadoc>
    <declaration type="boolean" name="disableKeyActions" />
    <declaration type="boolean" name="lastAdjustingState" />
    <method type="void" name="adjustmentValueChanged" startLine="69" endLine="75">
      <scope startLine="70" endLine="74">
        <declaration type="JScrollBar" name="scrollBar" />
      </scope>
    </method>
    <javadoc>
      <text>* Updates the underlying PCanvas' interacting flag depending on whether
 * scroll bar adjustments are still taking place.</text>
      <param>isAdjusting true if the scroll bar is still being interacted
 * with</param>
    </javadoc>
    <method type="void" name="setAdjusting" startLine="84" endLine="92">
      <scope startLine="85" endLine="91">
        <declaration type="Component" name="c" />
        <scope startLine="87" endLine="89" />
      </scope>
    </method>
    <declaration type="AdjustmentListener" name="scrollAdjustmentListener" />
    <javadoc>
      <text>* Constructs a scollpane for the provided component with the specified
 * scrollbar policies.</text>
      <param>view component being viewed through the scrollpane</param>
      <param>vsbPolicy vertical scroll bar policy</param>
      <param>hsbPolicy horizontal scroll bar policy</param>
    </javadoc>
    <method type="constructor" name="PScrollPane" startLine="103" endLine="113">
      <declaration type="PScrollPaneLayout" name="layout" />
      <comment>Set the layout and sync it with the scroll pane</comment>
    </method>
    <javadoc>
      <text>* Intercepts the vertical scroll bar setter to ensure that the adjustment
 * listener is installed appropriately.</text>
      <param>newVerticalScrollBar the new vertical scroll bar to use with this PScrollPane</param>
    </javadoc>
    <method type="void" name="setVerticalScrollBar" startLine="121" endLine="128">
      <scope startLine="122" endLine="124" />
    </method>
    <javadoc>
      <text>* Intercepts the horizontal scroll bar setter to ensure that the adjustment
 * listener is installed appropriately.</text>
      <param>newHorizontalScrollBar the new horizontal scroll bar to use with this PScrollPane</param>
    </javadoc>
    <method type="void" name="setHorizontalScrollBar" startLine="136" endLine="143">
      <scope startLine="137" endLine="139" />
    </method>
    <javadoc>
      <text>* Constructs a scroll pane for the provided component.</text>
      <param>view component being viewed through the scroll pane</param>
    </javadoc>
    <method type="constructor" name="PScrollPane" startLine="150" endLine="152" />
    <javadoc>
      <text>* Constructs a scroll pane not attached to any component with the specified
 * scroll bar policies.</text>
      <param>vsbPolicy vertical scroll bar policy</param>
      <param>hsbPolicy horizontal scroll bar policy</param>
    </javadoc>
    <method type="constructor" name="PScrollPane" startLine="161" endLine="163" />
    <javadoc>
      <text>* Constructs a scroll pane not attached to any component.</text>
    </javadoc>
    <method type="constructor" name="PScrollPane" startLine="168" endLine="170" />
    <javadoc>
      <text>* Disable or enable key actions on this PScrollPane.</text>
      <param>disable true disables key actions, false enables key actions</param>
    </javadoc>
    <method type="void" name="setKeyActionsDisabled" startLine="177" endLine="186">
      <scope startLine="178" endLine="181" />
      <scope startLine="182" endLine="185" />
    </method>
    <javadoc>
      <text>* Sets the UI.</text>
      <param>ui the scroll pane UI to associate with this PScollPane</param>
    </javadoc>
    <method type="void" name="setUI" startLine="193" endLine="202">
      <scope startLine="196" endLine="198" />
      <scope startLine="199" endLine="201" />
    </method>
    <javadoc>
      <text>* Install custom key actions (in place of the Swing defaults) to correctly
 * scroll the view.</text>
    </javadoc>
    <method type="void" name="installCustomKeyActions" startLine="208" endLine="223">
      <declaration type="ActionMap" name="map" />
    </method>
    <javadoc>
      <text>* Disables key actions on this PScrollPane.</text>
    </javadoc>
    <method type="void" name="disableKeyActions" startLine="228" endLine="245">
      <declaration type="ActionMap" name="map" />
      <scope startLine="231" endLine="233" />
    </method>
    <javadoc>
      <text>* Overridden to create the Piccolo2D viewport.</text>
      <return>the Piccolo2D version of the viewport</return>
    </javadoc>
    <method type="JViewport" name="createViewport" startLine="252" endLine="254" />
    <class name="PScrollAction" extends="AbstractAction" startLine="256">
      <javadoc>
        <text>* Action to scroll left/right/up/down. Modified from
 * javax.swing.plaf.basic.BasicScrollPaneUI.ScrollAction.
 * Gets the view parameters (position and size) from the Viewport rather
 * than directly from the view - also only performs its actions when the
 * relevant scrollbar is visible.</text>
      </javadoc>
      <declaration type="int" name="MINIMUM_SCROLL_SIZE" />
      <declaration type="long" name="serialVersionUID" />
      <javadoc>
        <text>* Direction to scroll.</text>
      </javadoc>
      <declaration type="int" name="orientation" />
      <javadoc>
        <text>* 1 indicates scroll down, -1 up.</text>
      </javadoc>
      <declaration type="int" name="direction" />
      <javadoc>
        <text>* True indicates a block scroll, otherwise a unit scroll.</text>
      </javadoc>
      <declaration type="boolean" name="block" />
      <javadoc>
        <text>* Constructs a scroll action with the given name in the given
 * orientiation stated and in the direction provided.</text>
        <param>name arbitrary name of action</param>
        <param>orientation horizontal or vertical</param>
        <param>direction 1 indicates scroll down, -1 up</param>
        <param>block true if block scroll as opposed to unit</param>
      </javadoc>
      <method type="constructor" name="PScrollAction" startLine="283" endLine="288" />
      <javadoc>
        <text>* Performs the scroll action if the action was performed on visible
 * scrollbars and if the viewport is valid.</text>
        <param>event the event responsible for this action being performed</param>
      </javadoc>
      <method type="void" name="actionPerformed" startLine="296" endLine="359">
        <declaration type="JScrollPane" name="scrollpane" />
        <scope startLine="298" endLine="300" />
        <declaration type="JViewport" name="vp" />
        <scope startLine="303" endLine="305" />
        <declaration type="Component" name="view" />
        <scope startLine="308" endLine="310" />
        <declaration type="Rectangle" name="visRect" />
        <declaration type="Dimension" name="vSize" />
        <declaration type="int" name="amount" />
        <scope startLine="318" endLine="325">
          <scope startLine="319" endLine="321" />
          <scope startLine="322" endLine="324" />
        </scope>
        <scope startLine="326" endLine="338">
          <scope startLine="327" endLine="334">
            <scope startLine="328" endLine="330" />
            <scope startLine="331" endLine="333" />
          </scope>
          <scope startLine="335" endLine="337" />
        </scope>
        <scope startLine="340" endLine="348">
          <scope startLine="342" endLine="344" />
          <scope startLine="345" endLine="347" />
        </scope>
        <scope startLine="349" endLine="357">
          <scope startLine="351" endLine="353" />
          <scope startLine="354" endLine="356" />
        </scope>
        <comment>LEG: Modification to query the viewport for the</comment>
        <comment>view size rather than going directly to the view</comment>
      </method>
      <method type="boolean" name="isScrollEventOnVisibleScrollbars" startLine="361" endLine="364" />
      <class name="PScrollHomeAction" extends="AbstractAction" startLine="367">
        <javadoc>
          <text>* Action to scroll to x,y location of 0,0. Modified from
 * javax.swing.plaf.basic.BasicScrollPaneUI.ScrollEndAction.
 * Only performs the event if a scrollbar is visible.</text>
        </javadoc>
        <declaration type="long" name="serialVersionUID" />
        <method type="constructor" name="PScrollHomeAction" startLine="376" endLine="378" />
        <method type="void" name="actionPerformed" startLine="380" endLine="390">
          <declaration type="JScrollPane" name="scrollpane" />
          <scope startLine="384" endLine="389">
            <declaration type="JViewport" name="vp" />
            <scope startLine="386" endLine="388" />
          </scope>
          <comment>LEG: Modification to only perform these actions if one of the</comment>
          <comment>scrollbars is actually showing</comment>
        </method>
        <class name="PScrollEndAction" extends="AbstractAction" startLine="393">
          <javadoc>
            <text>* Action to scroll to last visible location. Modified from
 * javax.swing.plaf.basic.BasicScrollPaneUI.ScrollEndAction.
 * Gets the view size from the viewport rather than directly from the view -
 * also only performs the event if a scrollbar is visible.</text>
          </javadoc>
          <declaration type="long" name="serialVersionUID" />
          <javadoc>
            <text>* Constructs a scroll to end action with the given name.</text>
            <param>name name to assign to this action</param>
          </javadoc>
          <method type="constructor" name="PScrollEndAction" startLine="408" endLine="410" />
          <javadoc>
            <text>* Scrolls to the end of the viewport if there are visible scrollbars.</text>
            <param>event event responsible for the scroll event</param>
          </javadoc>
          <method type="void" name="actionPerformed" startLine="417" endLine="433">
            <declaration type="JScrollPane" name="scrollpane" />
            <scope startLine="421" endLine="432">
              <declaration type="JViewport" name="vp" />
              <scope startLine="424" endLine="431">
                <declaration type="Rectangle" name="visRect" />
                <declaration type="Dimension" name="size" />
              </scope>
              <comment>LEG: Modification to query the viewport for the</comment>
              <comment>view size rather than going directly to the view</comment>
            </scope>
            <comment>LEG: Modification to only perform these actions if one of the</comment>
            <comment>scrollbars is actually showing</comment>
          </method>
          <class name="PNullAction" extends="AbstractAction" startLine="436">
            <javadoc>
              <text>* An action to do nothing - put into an action map to keep it from looking
 * to its parent.</text>
            </javadoc>
            <declaration type="long" name="serialVersionUID" />
            <javadoc>
              <text>* Does nothing.</text>
              <param>e Event responsible for this action</param>
            </javadoc>
            <method type="void" name="actionPerformed" startLine="448" endLine="449" />
          </class>
        </class>
      </class>
    </class>
  </class>
</source>
