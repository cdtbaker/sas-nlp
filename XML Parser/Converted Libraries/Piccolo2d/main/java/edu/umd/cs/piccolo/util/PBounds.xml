<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.util">
  <import name="java.awt.geom.Dimension2D" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.awt.geom.Rectangle2D" />
  <import name="java.io.IOException" />
  <import name="java.io.ObjectInputStream" />
  <import name="java.io.ObjectOutputStream" />
  <import name="java.io.Serializable" />
  <class name="PBounds" extends="Rectangle2D.Double" startLine="39">
    <implements name="Serializable" />
    <javadoc>
      <text>* <b>PBounds</b> is simply a Rectangle2D.Double with extra methods that more
 * properly deal with the case when the rectangle is "empty". A PBounds has an
 * extra bit to store emptiness. In this state, adding new geometry replaces the
 * current geometry. A PBounds is emptied with the reset() method. A useful side
 * effect of the reset method is that it only modifies the fIsEmpty variable,
 * the other x, y, with, height variables are left alone. This is used by
 * Piccolo's layout management system to see if a the full bounds of a node has
 * really changed when it is recomputed. See PNode.validateLayout.
 * <P></text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc>
      <text>* Allows for future serialization code to understand versioned binary
 * formats.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <declaration type="boolean" name="isEmpty" />
    <javadoc>
      <text>* Creates an empty bounds.</text>
    </javadoc>
    <method type="constructor" name="PBounds" startLine="65" endLine="67" />
    <javadoc>
      <text>* Creates a bounds identical to the one provided.</text>
      <param>aBounds bounds to be copied</param>
    </javadoc>
    <method type="constructor" name="PBounds" startLine="74" endLine="77" />
    <javadoc>
      <text>* Creates a bounds with the same shape as the rectangle provided.</text>
      <param>aBounds rectangle to be copied</param>
    </javadoc>
    <method type="constructor" name="PBounds" startLine="84" endLine="87" />
    <javadoc>
      <text>* Constructs a PBounds object with the given center point and the specified
 * insets.</text>
      <param>aCenterPoint resulting center point of the PBounds object</param>
      <param>insetX distance from left and right the center should be</param>
      <param>insetY distance from top and bottom the center should be</param>
    </javadoc>
    <method type="constructor" name="PBounds" startLine="97" endLine="100" />
    <javadoc>
      <text>* Constructs a PBounds object at the given coordinates with the given
 * dimensions.</text>
      <param>x left of bounds</param>
      <param>y top of bounds</param>
      <param>width width of bounds</param>
      <param>height height of bounds</param>
    </javadoc>
    <method type="constructor" name="PBounds" startLine="111" endLine="114" />
    <javadoc>
      <text>* Returns a clone of this node.</text>
      <return>cloned copy of this bounds</return>
    </javadoc>
    <method type="Object" name="clone" startLine="121" endLine="123" />
    <javadoc>
      <text>* Returns true if this bounds has been flagged as empty. Not necessarily if
 * it is empty.</text>
      <return>true if bounds marked as empty</return>
    </javadoc>
    <method type="boolean" name="isEmpty" startLine="131" endLine="133" />
    <javadoc>
      <text>* Flags this bounds as empty.</text>
      <return>itself for chaining</return>
    </javadoc>
    <method type="PBounds" name="reset" startLine="140" endLine="143" />
    <javadoc>
      <text>* Resets the bounds to (0,0,0,0) and flags it as empty.</text>
      <return>itself for chaining</return>
    </javadoc>
    <method type="PBounds" name="resetToZero" startLine="150" endLine="157" />
    <javadoc>
      <text>* Sets the bounds to the same shape as the rectangle. And flags the bounds
 * as not empty.</text>
      <param>r rectangle to copy</param>
    </javadoc>
    <method type="void" name="setRect" startLine="165" endLine="168" />
    <javadoc>
      <text>* Sets the bounds to the same shape as the bounds provided. And flags the
 * bounds as not empty.</text>
      <param>b bounds to copy</param>
    </javadoc>
    <method type="void" name="setRect" startLine="176" endLine="182" />
    <javadoc>
      <text>* Sets the shape of the bounds to the position and dimension provided.</text>
      <param>x new left of bounds</param>
      <param>y new top of bounds</param>
      <param>width new width of bounds</param>
      <param>height new height of bounds</param>
    </javadoc>
    <method type="void" name="setRect" startLine="192" endLine="198" />
    <javadoc>
      <text>* Grows the bounds to contain the coordinate provided.</text>
      <param>newx x component of point</param>
      <param>newy y component of point</param>
    </javadoc>
    <method type="void" name="add" startLine="206" endLine="214">
      <scope startLine="207" endLine="210" />
      <scope startLine="211" endLine="213" />
    </method>
    <javadoc>
      <text>* Grows bounds to contain the rectangle if needed.</text>
      <param>r rectangle being added</param>
    </javadoc>
    <method type="void" name="add" startLine="221" endLine="228">
      <scope startLine="222" endLine="224" />
      <scope startLine="225" endLine="227" />
    </method>
    <javadoc>
      <text>* Changes this bounds to contain the provided bounds.</text>
      <param>bounds bounds being added</param>
    </javadoc>
    <method type="void" name="add" startLine="235" endLine="258">
      <scope startLine="236" endLine="238" />
      <scope startLine="239" endLine="245" />
      <scope startLine="246" endLine="257">
        <declaration type="double" name="x1" />
        <declaration type="double" name="y1" />
        <declaration type="double" name="x2" />
        <declaration type="double" name="y2" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the x,y coordinate of the bounds.</text>
      <return>coordinate of the bounds</return>
    </javadoc>
    <method type="Point2D" name="getOrigin" startLine="265" endLine="267" />
    <javadoc>
      <text>* Changes the origin of these bounds. And flags it as non-empty.</text>
      <param>x new x component of bounds</param>
      <param>y new y component of the bounds</param>
      <return>the modified PBounds with its new origin</return>
    </javadoc>
    <method type="PBounds" name="setOrigin" startLine="276" endLine="281" />
    <javadoc>
      <text>* Returns the size of the bounds.</text>
      <return>size of the bounds</return>
    </javadoc>
    <method type="Dimension2D" name="getSize" startLine="288" endLine="290" />
    <javadoc>
      <text>* Changes the size of the bounds, but retains the origin.</text>
      <param>width new width of the bounds</param>
      <param>height new height of the bounds</param>
    </javadoc>
    <method type="void" name="setSize" startLine="298" endLine="300" />
    <javadoc>
      <text>* Returns the midpoint of the bounds.</text>
      <return>midpoint of the bounds</return>
    </javadoc>
    <method type="Point2D" name="getCenter2D" startLine="307" endLine="309" />
    <javadoc>
      <text>* Translates the bounds by the given deltas.</text>
      <param>dx amount to move x</param>
      <param>dy amount to move y</param>
      <return>itself for chaining</return>
    </javadoc>
    <method type="PBounds" name="moveBy" startLine="318" endLine="321" />
    <javadoc>
      <text>* Rounds the rectangle to the next largest bounds who's measurements are
 * integers. Note: this is not the same as rounding its measurements.</text>
    </javadoc>
    <method type="void" name="expandNearestIntegerDimensions" startLine="327" endLine="332" />
    <javadoc>
      <text>* Adjust the measurements of this bounds so that they are the amounts given
 * "in" from their previous border.</text>
      <param>dx amount to move in from border along horizontal axis</param>
      <param>dy amount to move in from border along vertical axis</param>
      <return>itself for chaining</return>
    </javadoc>
    <method type="PBounds" name="inset" startLine="342" endLine="345" />
    <javadoc>
      <text>* Returns the required translation in order for this bounds origin to sit
 * on the center of the provided rectangle.</text>
      <param>targetBounds rectangle to measure the center of</param>
      <return>the delta required to move to center of the targetBounds</return>
    </javadoc>
    <method type="PDimension" name="deltaRequiredToCenter" startLine="354" endLine="360">
      <declaration type="PDimension" name="result" />
      <declaration type="double" name="xDelta" />
      <declaration type="double" name="yDelta" />
    </method>
    <javadoc>
      <text>* Returns the required translation in order for these to contain the bounds
 * provided.</text>
      <param>targetBounds rectangle to measure the center of</param>
      <return>the delta required in order for the bounds to overlap completely
 * the targetBounds</return>
    </javadoc>
    <method type="PDimension" name="deltaRequiredToContain" startLine="370" endLine="409">
      <declaration type="PDimension" name="result" />
      <scope startLine="373" endLine="375" />
      <declaration type="double" name="targetMaxX" />
      <declaration type="double" name="targetMinX" />
      <declaration type="double" name="targetMaxY" />
      <declaration type="double" name="targetMinY" />
      <declaration type="double" name="maxX" />
      <declaration type="double" name="minX" />
      <declaration type="double" name="maxY" />
      <declaration type="double" name="minY" />
      <scope startLine="386" endLine="395">
        <declaration type="double" name="difMaxX" />
        <declaration type="double" name="difMinX" />
        <scope startLine="389" endLine="391" />
        <scope startLine="392" endLine="394" />
      </scope>
      <scope startLine="397" endLine="406">
        <declaration type="double" name="difMaxY" />
        <declaration type="double" name="difMinY" />
        <scope startLine="400" endLine="402" />
        <scope startLine="403" endLine="405" />
      </scope>
    </method>
    <method type="void" name="writeObject" startLine="411" endLine="417" />
    <method type="void" name="readObject" startLine="419" endLine="425" />
    <javadoc>
      <text>* Returns a string representation of this PBounds for debugging purposes.</text>
      <return>string representation of this PBounds</return>
    </javadoc>
    <method type="String" name="toString" startLine="432" endLine="455">
      <declaration type="StringBuffer" name="result" />
      <scope startLine="438" endLine="440" />
      <scope startLine="441" endLine="450" />
    </method>
  </class>
</source>
