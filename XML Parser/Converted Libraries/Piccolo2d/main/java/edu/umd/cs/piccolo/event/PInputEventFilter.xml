<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.event">
  <import name="java.awt.event.FocusEvent" />
  <import name="java.awt.event.InputEvent" />
  <import name="java.awt.event.KeyEvent" />
  <import name="java.awt.event.MouseEvent" />
  <import name="java.awt.event.MouseWheelEvent" />
  <class name="PInputEventFilter" startLine="37">
    <javadoc>
      <text>* <b>PInputEventFilter</b> is a class that filters input events based on the
 * events modifiers and type. Any PBasicInputEventHandler that is associated
 * with an event filter will only receive events that pass through the filter.
 * <P>
 * To be accepted events must contain all the modifiers listed in the andMask,
 * at least one of the modifiers listed in the orMask, and none of the modifiers
 * listed in the notMask. The event filter also lets you specify specific event
 * types (mousePressed, released, ...) to accept or reject.
 * <P>
 * If the event filter is set to consume, then it will call consume on any event
 * that it successfully accepts.
 * <P></text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc>
      <text>* Mask representing all possible modifiers.</text>
    </javadoc>
    <declaration type="int" name="ALL_MODIFIERS_MASK" />
    <javadoc>
      <text>* If event modifiers don't match this exactly, event it filtered.</text>
    </javadoc>
    <declaration type="int" name="andMask" />
    <javadoc>
      <text>* If event modifiers have no bits from orMask enabled, event is filtered.</text>
    </javadoc>
    <declaration type="int" name="orMask" />
    <javadoc>
      <text>* If event modifier has any of the notMask bits on, it is not accepted.</text>
    </javadoc>
    <declaration type="int" name="notMask" />
    <javadoc>
      <text>* Number of clicks that an incoming event must have to be accepted.</text>
    </javadoc>
    <declaration type="short" name="clickCount" />
    <javadoc>
      <text>* Whether accepted events should be marked as handled.</text>
    </javadoc>
    <declaration type="boolean" name="marksAcceptedEventsAsHandled" />
    <javadoc>
      <text>* Whether handled events should be immediately filtered.</text>
    </javadoc>
    <declaration type="boolean" name="acceptsAlreadyHandledEvents" />
    <javadoc>
      <text>* Whether key pressed events are accepted.</text>
    </javadoc>
    <declaration type="boolean" name="acceptsKeyPressed" />
    <javadoc>
      <text>* Whether key released events are accepted.</text>
    </javadoc>
    <declaration type="boolean" name="acceptsKeyReleased" />
    <javadoc>
      <text>* Whether key typed events are accepted.</text>
    </javadoc>
    <declaration type="boolean" name="acceptsKeyTyped" />
    <javadoc>
      <text>* Whether mouse clicked events are accepted.</text>
    </javadoc>
    <declaration type="boolean" name="acceptsMouseClicked" />
    <javadoc>
      <text>* Whether mouse dragged events are accepted.</text>
    </javadoc>
    <declaration type="boolean" name="acceptsMouseDragged" />
    <javadoc>
      <text>* Whether mouse entered events are accepted.</text>
    </javadoc>
    <declaration type="boolean" name="acceptsMouseEntered" />
    <javadoc>
      <text>* Whether mouse exited events are accepted.</text>
    </javadoc>
    <declaration type="boolean" name="acceptsMouseExited" />
    <javadoc>
      <text>* Whether mouse moved events are accepted.</text>
    </javadoc>
    <declaration type="boolean" name="acceptsMouseMoved" />
    <javadoc>
      <text>* Whether mouse pressed events are accepted.</text>
    </javadoc>
    <declaration type="boolean" name="acceptsMousePressed" />
    <javadoc>
      <text>* Whether mouse released events are accepted.</text>
    </javadoc>
    <declaration type="boolean" name="acceptsMouseReleased" />
    <javadoc>
      <text>* Whether mouse wheel rotated events are accepted.</text>
    </javadoc>
    <declaration type="boolean" name="acceptsMouseWheelRotated" />
    <javadoc>
      <text>* Whether focus events are accepted.</text>
    </javadoc>
    <declaration type="boolean" name="acceptsFocusEvents" />
    <javadoc>
      <text>* Creates a PInputEventFilter that accepts everything.</text>
    </javadoc>
    <method type="constructor" name="PInputEventFilter" startLine="117" endLine="119" />
    <javadoc>
      <text>* Creates a PInputEventFilter that will accept events if they have the
 * given andMask.</text>
      <param>andMask exact pattern event modifiers must be to get accepted</param>
    </javadoc>
    <method type="constructor" name="PInputEventFilter" startLine="127" endLine="130" />
    <javadoc>
      <text>* Creates a PInputEventFilter that will accept events if they have the
 * given andMask and do not contain any of the bits in the notMask.</text>
      <param>andMask exact pattern event modifiers must be to get accepted</param>
      <param>notMask if any or these bits are on event is not accepted</param>
    </javadoc>
    <method type="constructor" name="PInputEventFilter" startLine="139" endLine="142" />
    <javadoc>
      <text>* Returns true if the passed event is one that is accepted.</text>
      <param>event Event under consideration</param>
      <param>type The type of event encoded as the PInputEvent</param>
      <return>true if event is accepted</return>
    </javadoc>
    <method type="boolean" name="acceptsEvent" startLine="151" endLine="237">
      <declaration type="boolean" name="aResult" />
      <declaration type="int" name="modifiers" />
      <scope startLine="155" endLine="157" />
      <scope startLine="159" endLine="161" />
      <scope startLine="163" endLine="171">
        <scope startLine="164" endLine="166" />
        <scope startLine="168" endLine="170" />
      </scope>
      <scope startLine="173" endLine="175" />
      <scope startLine="232" endLine="234" />
    </method>
    <javadoc>
      <text>* Makes this filter accept all mouse click combinations.</text>
    </javadoc>
    <method type="void" name="acceptAllClickCounts" startLine="242" endLine="244" />
    <javadoc>
      <text>* Makes the filter accept all event types.</text>
    </javadoc>
    <method type="void" name="acceptAllEventTypes" startLine="249" endLine="262" />
    <javadoc>
      <text>* Makes this filter accept absolutely everything.</text>
    </javadoc>
    <method type="void" name="acceptEverything" startLine="267" endLine="273" />
    <javadoc>
      <text>* Returns whether this filter accepts key pressed events.</text>
      <return>true if filter accepts key pressed events</return>
    </javadoc>
    <method type="boolean" name="getAcceptsKeyPressed" startLine="280" endLine="282" />
    <javadoc>
      <text>* Returns whether this filter accepts key released events.</text>
      <return>true if filter accepts key released events</return>
    </javadoc>
    <method type="boolean" name="getAcceptsKeyReleased" startLine="289" endLine="291" />
    <javadoc>
      <text>* Returns whether this filter accepts key typed events.</text>
      <return>true if filter accepts key typed events</return>
    </javadoc>
    <method type="boolean" name="getAcceptsKeyTyped" startLine="298" endLine="300" />
    <javadoc>
      <text>* Returns whether this filter accepts mouse clicked events.</text>
      <return>true if filter accepts mouse clicked events</return>
    </javadoc>
    <method type="boolean" name="getAcceptsMouseClicked" startLine="307" endLine="309" />
    <javadoc>
      <text>* Returns whether this filter accepts mouse dragged events.</text>
      <return>true if filter accepts mouse dragged events</return>
    </javadoc>
    <method type="boolean" name="getAcceptsMouseDragged" startLine="316" endLine="318" />
    <javadoc>
      <text>* Returns whether this filter accepts mouse entered events.</text>
      <return>true if filter accepts mouse entered events</return>
    </javadoc>
    <method type="boolean" name="getAcceptsMouseEntered" startLine="325" endLine="327" />
    <javadoc>
      <text>* Returns whether this filter accepts mouse exited events.</text>
      <return>true if filter accepts mouse exited events</return>
    </javadoc>
    <method type="boolean" name="getAcceptsMouseExited" startLine="334" endLine="336" />
    <javadoc>
      <text>* Returns whether this filter accepts mouse moved events.</text>
      <return>true if filter accepts mouse moved events</return>
    </javadoc>
    <method type="boolean" name="getAcceptsMouseMoved" startLine="343" endLine="345" />
    <javadoc>
      <text>* Returns whether this filter accepts mouse pressed events.</text>
      <return>true if filter accepts mouse pressed events</return>
    </javadoc>
    <method type="boolean" name="getAcceptsMousePressed" startLine="352" endLine="354" />
    <javadoc>
      <text>* Returns whether this filter accepts mouse released events.</text>
      <return>true if filter accepts mouse released events</return>
    </javadoc>
    <method type="boolean" name="getAcceptsMouseReleased" startLine="361" endLine="363" />
    <javadoc>
      <text>* Returns whether this filter accepts mouse wheel rotated events.</text>
      <return>true if filter accepts mouse wheel rotated events</return>
    </javadoc>
    <method type="boolean" name="getAcceptsMouseWheelRotated" startLine="370" endLine="372" />
    <javadoc>
      <text>* Returns whether this filter accepts focus events.</text>
      <return>true if filter accepts focus events</return>
    </javadoc>
    <method type="boolean" name="getAcceptsFocusEvents" startLine="379" endLine="381" />
    <javadoc>
      <text>* Returns whether this filter accepts events that have already been flagged
 * as handled.</text>
      <return>true if filter accepts events that have already been flagged as
 * handled</return>
    </javadoc>
    <method type="boolean" name="getAcceptsAlreadyHandledEvents" startLine="390" endLine="392" />
    <javadoc>
      <text>* Returns whether this filter marks events as handled if they are accepted.</text>
      <return>true if filter will mark events as filtered if they are accepted</return>
    </javadoc>
    <method type="boolean" name="getMarksAcceptedEventsAsHandled" startLine="399" endLine="401" />
    <javadoc>
      <text>* Flags all mouse click events as disallowed, regardless of button
 * configuration.</text>
    </javadoc>
    <method type="void" name="rejectAllClickCounts" startLine="407" endLine="409" />
    <javadoc>
      <text>* Configures filter so that no events will ever get accepted. By itself not
 * terribly useful, but it's a more restrictive starting point than
 * acceptAllEvents();</text>
    </javadoc>
    <method type="void" name="rejectAllEventTypes" startLine="416" endLine="429" />
    <javadoc>
      <text>* Sets the number of clicks that an incoming event must have to be accepted.</text>
      <param>aClickCount number clicks that an incoming event must have to be accepted</param>
    </javadoc>
    <method type="void" name="setAcceptClickCount" startLine="436" endLine="438" />
    <javadoc>
      <text>* Sets whether this filter accepts key pressed events.</text>
      <param>aBoolean whether filter should accept key pressed events</param>
    </javadoc>
    <method type="void" name="setAcceptsKeyPressed" startLine="445" endLine="447" />
    <javadoc>
      <text>* Sets whether this filter accepts key released events.</text>
      <param>aBoolean whether filter should accept key released events</param>
    </javadoc>
    <method type="void" name="setAcceptsKeyReleased" startLine="454" endLine="456" />
    <javadoc>
      <text>* Sets whether this filter accepts key typed events.</text>
      <param>aBoolean whether filter should accept key typed events</param>
    </javadoc>
    <method type="void" name="setAcceptsKeyTyped" startLine="464" endLine="466" />
    <javadoc>
      <text>* Sets whether this filter accepts mouse clicked events.</text>
      <param>aBoolean whether filter should accept mouse clicked events</param>
    </javadoc>
    <method type="void" name="setAcceptsMouseClicked" startLine="473" endLine="475" />
    <javadoc>
      <text>* Sets whether this filter accepts mouse dragged events.</text>
      <param>aBoolean whether filter should accept mouse dragged events</param>
    </javadoc>
    <method type="void" name="setAcceptsMouseDragged" startLine="482" endLine="484" />
    <javadoc>
      <text>* Sets whether this filter accepts mouse entered events.</text>
      <param>aBoolean whether filter should accept mouse entered events</param>
    </javadoc>
    <method type="void" name="setAcceptsMouseEntered" startLine="491" endLine="493" />
    <javadoc>
      <text>* Sets whether this filter accepts mouse exited events.</text>
      <param>aBoolean whether filter should accept mouse exited events</param>
    </javadoc>
    <method type="void" name="setAcceptsMouseExited" startLine="500" endLine="502" />
    <javadoc>
      <text>* Sets whether this filter accepts mouse moved events.</text>
      <param>aBoolean whether filter should accept mouse moved events</param>
    </javadoc>
    <method type="void" name="setAcceptsMouseMoved" startLine="509" endLine="511" />
    <javadoc>
      <text>* Sets whether this filter accepts mouse pressed events.</text>
      <param>aBoolean whether filter should accept mouse pressed events</param>
    </javadoc>
    <method type="void" name="setAcceptsMousePressed" startLine="518" endLine="520" />
    <javadoc>
      <text>* Sets whether this filter accepts mouse released events.</text>
      <param>aBoolean whether filter should accept mouse released events</param>
    </javadoc>
    <method type="void" name="setAcceptsMouseReleased" startLine="527" endLine="529" />
    <javadoc>
      <text>* Sets whether this filter accepts mouse wheel rotation events.</text>
      <param>aBoolean whether filter should accept mouse wheel rotated events</param>
    </javadoc>
    <method type="void" name="setAcceptsMouseWheelRotated" startLine="536" endLine="538" />
    <javadoc>
      <text>* Sets whether this filter accepts focus events.</text>
      <param>aBoolean whether filter should accept focus events</param>
    </javadoc>
    <method type="void" name="setAcceptsFocusEvents" startLine="545" endLine="547" />
    <javadoc>
      <text>* Sets and mask used to filter events. All bits of the andMask must be 1s
 * for the event to be accepted.</text>
      <param>aAndMask the and mask to use for filtering events</param>
    </javadoc>
    <method type="void" name="setAndMask" startLine="555" endLine="557" />
    <javadoc>
      <text>* Sets whether already handled events should be accepted.</text>
      <param>aBoolean whether already handled events should be accepted</param>
    </javadoc>
    <method type="void" name="setAcceptsAlreadyHandledEvents" startLine="564" endLine="566" />
    <javadoc>
      <text>* Sets whether events will be marked as dirty once accepted.</text>
      <param>aBoolean whether events will be marked as dirty once accepted</param>
    </javadoc>
    <method type="void" name="setMarksAcceptedEventsAsHandled" startLine="573" endLine="575" />
    <javadoc>
      <text>* Sets not mask used to filter events. If any of the not bits are enabled,
 * then the event is not accepted.</text>
      <param>aNotMask the not mask to use for filtering events</param>
    </javadoc>
    <method type="void" name="setNotMask" startLine="583" endLine="585" />
    <javadoc>
      <text>* Sets or mask used to filter events. If any of the or bits are enabled,
 * then the event is accepted.</text>
      <param>aOrMask the or mask to use for filtering events</param>
    </javadoc>
    <method type="void" name="setOrMask" startLine="593" endLine="595" />
  </class>
</source>
