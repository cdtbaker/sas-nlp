<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.examples">
  <import name="java.awt.BasicStroke" />
  <import name="java.awt.Color" />
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.geom.Ellipse2D" />
  <import name="java.awt.geom.Line2D" />
  <import name="java.awt.geom.Rectangle2D" />
  <import name="java.beans.PropertyChangeEvent" />
  <import name="java.beans.PropertyChangeListener" />
  <import name="javax.swing.JDialog" />
  <import name="edu.umd.cs.piccolo.PCanvas" />
  <import name="edu.umd.cs.piccolo.PLayer" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.event.PBasicInputEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PDragEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PDragSequenceEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PInputEvent" />
  <import name="edu.umd.cs.piccolo.nodes.PImage" />
  <import name="edu.umd.cs.piccolo.nodes.PPath" />
  <import name="edu.umd.cs.piccolo.nodes.PText" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <import name="edu.umd.cs.piccolo.util.PDimension" />
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <import name="edu.umd.cs.piccolox.PFrame" />
  <import name="edu.umd.cs.piccolox.nodes.P3DRect" />
  <class name="BirdsEyeViewExample" extends="PFrame" startLine="58">
    <javadoc>
      <text>* This example, contributed by Rowan Christmas, shows how to create a birds-eye
 * view window.</text>
    </javadoc>
    <javadoc />
    <declaration type="long" name="serialVersionUID" />
    <declaration type="boolean" name="fIsPressed" />
    <method type="constructor" name="BirdsEyeViewExample" startLine="70" endLine="72" />
    <method type="constructor" name="BirdsEyeViewExample" startLine="74" endLine="76" />
    <method type="void" name="initialize" startLine="78" endLine="101">
      <declaration type="BirdsEyeView" name="bev" />
      <declaration type="JDialog" name="bird" />
      <comment>Last of all lets remove the default pan event handler, and add a</comment>
      <comment>drag event handler instead. This way you will be able to drag the</comment>
      <comment>nodes around with the mouse.</comment>
      <comment>this will create the actual BirdsEyeView and put it in a JDialog</comment>
    </method>
    <method type="void" name="nodeDemo" startLine="105" endLine="151">
      <declaration type="PLayer" name="layer" />
      <declaration type="PNode" name="aNode" />
      <declaration type="PNode" name="aCopy" />
      <comment>A node needs to be a descendent of the root to be displayed on the</comment>
      <comment>screen.</comment>
      <comment>The default color for a node is blue, but you can change that with</comment>
      <comment>the setPaint method.</comment>
      <comment>A node can have children nodes added to it.</comment>
      <comment>The base bounds of a node is easy to change. Note that changing the</comment>
      <comment>base bounds of a node will not change it's children.</comment>
      <comment>Each node has a transform that can be used to transform the node, and</comment>
      <comment>all its children on the screen.</comment>
      <comment>The transparency of any node can be set, this transparency will be</comment>
      <comment>applied to any of the nodes children as well.</comment>
      <comment>Its easy to copy nodes.</comment>
      <comment>Make is so that the copies children are not pickable. For this</comment>
      <comment>example that means you will not be able to grab the child and remove</comment>
      <comment>it from its parent.</comment>
      <comment>Change the look of the copy</comment>
      <comment>Let's add the copy to the root, and translate it so that it does not</comment>
      <comment>cover the original node.</comment>
    </method>
    <method type="void" name="createNodeUsingExistingClasses" startLine="155" endLine="165">
      <declaration type="PLayer" name="layer" />
      <comment>Here we create an image node that displays a thumbnail</comment>
      <comment>image of the root node. Note that you can easily get a thumbnail</comment>
      <comment>of any node by using PNode.toImage().</comment>
    </method>
    <method type="void" name="subclassExistingClasses" startLine="171" endLine="211">
      <declaration type="PNode" name="n" />
      <javadoc />
      <declaration type="long" name="serialVersionUID" />
      <method type="void" name="paint" startLine="179" endLine="190">
        <scope startLine="180" endLine="185">
          <declaration type="Graphics2D" name="g2" />
          <comment>if mouse is pressed draw self as a square.</comment>
        </scope>
        <scope startLine="186" endLine="189">
          <comment>if mouse is not pressed draw self normally.</comment>
        </scope>
      </method>
      <method type="void" name="mousePressed" startLine="194" endLine="199" />
      <method type="void" name="mouseReleased" startLine="201" endLine="206" />
      <comment>this tells the framework that the node</comment>
      <comment>needs to be redisplayed.</comment>
      <comment>this tells the framework that the node</comment>
      <comment>needs to be redisplayed.</comment>
    </method>
    <method type="void" name="composeOtherNodes" startLine="215" endLine="245">
      <declaration type="PNode" name="myCompositeFace" />
      <declaration type="PNode" name="eye1" />
      <declaration type="PNode" name="eye2" />
      <declaration type="PNode" name="mouth" />
      <declaration type="PBounds" name="b" />
      <comment>create parts for the face.</comment>
      <comment>add the face parts</comment>
      <comment>don't want anyone grabbing out our eye's.</comment>
      <comment>position the face parts.</comment>
      <comment>set the face bounds so that it neatly contains the face parts.</comment>
      <comment>opps it to small, so scale it up.</comment>
    </method>
    <method type="void" name="createCustomNode" startLine="250" endLine="284">
      <declaration type="PNode" name="n" />
      <javadoc />
      <declaration type="long" name="serialVersionUID" />
      <method type="void" name="paint" startLine="257" endLine="279">
        <declaration type="double" name="bx" />
        <declaration type="double" name="by" />
        <declaration type="double" name="rightBorder" />
        <declaration type="double" name="bottomBorder" />
        <declaration type="Line2D" name="line" />
        <declaration type="Graphics2D" name="g2" />
        <scope startLine="270" endLine="273" />
        <scope startLine="275" endLine="278" />
      </method>
      <comment>draw vertical lines</comment>
    </method>
    <method type="void" name="main" startLine="286" endLine="288" />
    <class name="BirdsEyeView" extends="PCanvas" startLine="290">
      <implements name="PropertyChangeListener" />
      <javadoc>
        <text>* The Birds Eye View Class</text>
      </javadoc>
      <javadoc />
      <declaration type="long" name="serialVersionUID" />
      <javadoc>
        <text>* This is the node that shows the viewed area.</text>
      </javadoc>
      <declaration type="PNode" name="areaVisiblePNode" />
      <javadoc>
        <text>* This is the canvas that is being viewed</text>
      </javadoc>
      <declaration type="PCanvas" name="viewedCanvas" />
      <javadoc>
        <text>* The change listener to know when to update the birds eye view.</text>
      </javadoc>
      <declaration type="PropertyChangeListener" name="changeListener" />
      <declaration type="int" name="layerCount" />
      <javadoc>
        <text>* Creates a new instance of a BirdsEyeView</text>
      </javadoc>
      <method type="constructor" name="BirdsEyeView" startLine="320" endLine="358">
        <method type="void" name="propertyChange" startLine="325" endLine="327" />
        <method type="void" name="startDrag" startLine="339" endLine="343">
          <scope startLine="340" endLine="342" />
        </method>
        <method type="void" name="drag" startLine="345" endLine="348">
          <declaration type="PDimension" name="dim" />
        </method>
        <comment>create the PropertyChangeListener for listening to the viewed</comment>
        <comment>canvas</comment>
        <comment>create the coverage node</comment>
        <comment>add the drag event handler</comment>
        <comment>remove Pan and Zoom</comment>
      </method>
      <method type="void" name="connect" startLine="360" endLine="371">
        <scope startLine="367" endLine="369" />
      </method>
      <javadoc>
        <text>* Add a layer to list of viewed layers</text>
      </javadoc>
      <method type="void" name="addLayer" startLine="376" endLine="379" />
      <javadoc>
        <text>* Remove the layer from the viewed layers</text>
      </javadoc>
      <method type="void" name="removeLayer" startLine="384" endLine="387" />
      <javadoc>
        <text>* Stop the birds eye view from receiving events from the viewed canvas
 * and remove all layers</text>
      </javadoc>
      <method type="void" name="disconnect" startLine="393" endLine="400">
        <scope startLine="396" endLine="398" />
      </method>
      <javadoc>
        <text>* This method will get called when the viewed canvas changes</text>
      </javadoc>
      <method type="void" name="propertyChange" startLine="405" endLine="407" />
      <javadoc>
        <text>* This method gets the state of the viewed canvas and updates the
 * BirdsEyeViewer This can be called from outside code</text>
      </javadoc>
      <method type="void" name="updateFromViewed" startLine="413" endLine="475">
        <declaration type="double" name="viewedX" />
        <declaration type="double" name="viewedY" />
        <declaration type="double" name="viewedHeight" />
        <declaration type="double" name="viewedWidth" />
        <declaration type="double" name="ul_camera_x" />
        <declaration type="double" name="ul_camera_y" />
        <declaration type="double" name="lr_camera_x" />
        <declaration type="double" name="lr_camera_y" />
        <declaration type="Rectangle2D" name="drag_bounds" />
        <declaration type="double" name="ul_layer_x" />
        <declaration type="double" name="ul_layer_y" />
        <declaration type="double" name="lr_layer_x" />
        <declaration type="double" name="lr_layer_y" />
        <scope startLine="435" endLine="437" />
        <scope startLine="438" endLine="440" />
        <scope startLine="443" endLine="445" />
        <scope startLine="446" endLine="448" />
        <scope startLine="453" endLine="455" />
        <scope startLine="456" endLine="458" />
        <scope startLine="461" endLine="463" />
        <scope startLine="464" endLine="466" />
        <declaration type="Rectangle2D" name="bounds" />
        <comment>find the upper left corner</comment>
        <comment>set to the lesser value</comment>
        <comment>same for y</comment>
        <comment>find the lower right corner</comment>
        <comment>set to the greater value</comment>
        <comment>same for height</comment>
        <comment>keep the birds eye view centered</comment>
      </method>
    </class>
    <comment>This method demonstrates the kinds of things that can be done with any</comment>
    <comment>node.</comment>
    <comment>So far we have just been using PNode, but of course PNode has many</comment>
    <comment>subclasses that you can try out to.</comment>
    <comment>Another way to create nodes is to customize other nodes that already</comment>
    <comment>exist. Here we create an ellipse, except when you press the mouse on</comment>
    <comment>this ellipse it turns into a square, when you release the mouse it</comment>
    <comment>goes back to being an ellipse.</comment>
    <comment>Here a new "face" node is created. But instead of drawing the face</comment>
    <comment>directly using Graphics2D we compose the face from other nodes.</comment>
    <comment>Here a completely new kind of node, a grid node" is created. We do</comment>
    <comment>all the drawing ourselves here instead of passing the work off to</comment>
    <comment>other parts of the framework.</comment>
    <comment>class BirdsEyeView</comment>
  </class>
</source>
