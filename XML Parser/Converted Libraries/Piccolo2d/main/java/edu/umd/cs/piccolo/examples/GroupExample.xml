<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.examples">
  <import name="java.awt.Color" />
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.Paint" />
  <import name="java.util.ArrayList" />
  <import name="edu.umd.cs.piccolo.PCamera" />
  <import name="edu.umd.cs.piccolo.PCanvas" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.nodes.PPath" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <import name="edu.umd.cs.piccolox.PFrame" />
  <import name="edu.umd.cs.piccolox.event.PSelectionEventHandler" />
  <class name="GroupExample" extends="PFrame" startLine="45">
    <javadoc>
      <text>* An example of how to implement decorator groups. Decorator groups are nodes
 * that base their bounds and rendering on their children. This seems to be a
 * common type of visual node that requires some potentially non-obvious
 * subclassing to get right.
 * Both a volatile and a non-volatile implementation are shown. The volatile
 * implementation might be used in cases where you want to keep a
 * scale-independent pen width border around a group of objects. The
 * non-volatile implementation can be used in more standard cases where the
 * decorator's bounds are stable during zooming.</text>
      <author>Lance Good</author>
    </javadoc>
    <javadoc />
    <declaration type="long" name="serialVersionUID" />
    <method type="constructor" name="GroupExample" startLine="66" endLine="68" />
    <method type="constructor" name="GroupExample" startLine="70" endLine="72" />
    <method type="void" name="initialize" startLine="74" endLine="117">
      <declaration type="DecoratorGroup" name="dg" />
      <declaration type="PPath" name="p1" />
      <declaration type="PPath" name="p2" />
      <declaration type="VolatileDecoratorGroup" name="vdg" />
      <declaration type="PPath" name="p3" />
      <declaration type="PPath" name="p4" />
      <declaration type="ArrayList" name="selectableParents" />
      <declaration type="PSelectionEventHandler" name="ps" />
      <comment>Create a decorator group that is NOT volatile</comment>
      <comment>Put some nodes under the group for it to decorate</comment>
      <comment>Add everything to the Piccolo hierarchy</comment>
      <comment>Create a decorator group that IS volatile</comment>
      <comment>Put some nodes under the group for it to decorate</comment>
      <comment>Add everything to the Piccolo hierarchy</comment>
      <comment>Create a selection handler so we can see that the decorator actually</comment>
      <comment>works</comment>
    </method>
    <method type="void" name="main" startLine="119" endLine="121" />
    <class name="DecoratorGroup" extends="PNode" startLine="124">
      <javadoc>
        <text>* This is the non-volatile implementation of a decorator group that paints a
 * background rectangle based on the bounds of its children.</text>
      </javadoc>
      <javadoc />
      <declaration type="long" name="serialVersionUID" />
      <declaration type="int" name="INDENT" />
      <declaration type="PBounds" name="cachedChildBounds" />
      <declaration type="PBounds" name="comparisonBounds" />
      <method type="constructor" name="DecoratorGroup" startLine="139" endLine="141" />
      <javadoc>
        <text>* Change the default paint to fill an expanded bounding box based on its
 * children's bounds</text>
      </javadoc>
      <method type="void" name="paint" startLine="147" endLine="159">
        <declaration type="Paint" name="paint" />
        <scope startLine="149" endLine="158">
          <declaration type="Graphics2D" name="g2" />
          <declaration type="PBounds" name="bounds" />
        </scope>
      </method>
      <javadoc>
        <text>* Change the full bounds computation to take into account that we are
 * expanding the children's bounds Do this instead of overriding
 * getBoundsReference() since the node is not volatile</text>
      </javadoc>
      <method type="PBounds" name="computeFullBounds" startLine="166" endLine="175">
        <declaration type="PBounds" name="result" />
      </method>
      <javadoc>
        <text>* This is a crucial step. We have to override this method to invalidate the
 * paint each time the bounds are changed so we repaint the correct region</text>
      </javadoc>
      <method type="boolean" name="validateFullBounds" startLine="181" endLine="188">
        <scope startLine="184" endLine="186" />
      </method>
      <class name="VolatileDecoratorGroup" extends="PNode" startLine="191">
        <javadoc>
          <text>* This is the volatile implementation of a decorator group that paints a
 * background rectangle based on the bounds of its children.</text>
        </javadoc>
        <javadoc />
        <declaration type="long" name="serialVersionUID" />
        <declaration type="int" name="INDENT" />
        <declaration type="PBounds" name="cachedChildBounds" />
        <declaration type="PBounds" name="comparisonBounds" />
        <declaration type="PCamera" name="renderCamera" />
        <method type="constructor" name="VolatileDecoratorGroup" startLine="207" endLine="210" />
        <javadoc>
          <text>* Indicate that the bounds are volatile for this group</text>
        </javadoc>
        <method type="boolean" name="getBoundsVolatile" startLine="215" endLine="217" />
        <javadoc>
          <text>* Since our bounds are volatile, we can override this method to indicate
 * that we are expanding our bounds beyond our children</text>
        </javadoc>
        <method type="PBounds" name="getBoundsReference" startLine="223" endLine="234">
          <declaration type="PBounds" name="bds" />
          <declaration type="double" name="scaledIndent" />
        </method>
        <javadoc>
          <text>* This is a crucial step. We have to override this method to invalidate the
 * paint each time the bounds are changed so we repaint the correct region</text>
        </javadoc>
        <method type="boolean" name="validateFullBounds" startLine="240" endLine="247">
          <scope startLine="243" endLine="245" />
        </method>
      </class>
    </class>
  </class>
</source>
