<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.swing">
  <import name="java.awt.Component" />
  <import name="java.awt.Container" />
  <import name="java.awt.Dimension" />
  <import name="java.awt.LayoutManager" />
  <import name="java.awt.Point" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.awt.geom.Rectangle2D" />
  <import name="javax.swing.JViewport" />
  <import name="javax.swing.ViewportLayout" />
  <import name="edu.umd.cs.piccolo.PCanvas" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <class name="PViewport" extends="JViewport" startLine="45">
    <javadoc>
      <text>* A subclass of JViewport that talks to the scroll director to negotiate the
 * view positions and sizes.</text>
      <author>Lance Good</author>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Controls what happens when scrolling occurs.</text>
    </javadoc>
    <declaration type="PScrollDirector" name="scrollDirector" />
    <javadoc>
      <text>* Pass constructor info to super.</text>
    </javadoc>
    <method type="constructor" name="PViewport" startLine="57" endLine="61" />
    <javadoc>
      <text>* Subclasses can override this to install a different layout manager (or
 * <code>null</code>) in the constructor. Returns a new
 * <code>ViewportLayout</code> object.</text>
      <return>a <code>LayoutManager</code></return>
    </javadoc>
    <method type="LayoutManager" name="createLayoutManager" startLine="70" endLine="72" />
    <javadoc>
      <text>* Subclasses can override this to install a different scroll director in
 * the constructor. Returns a new <code>PScrollDirector</code> object.</text>
      <return>a PScrollDirector</return>
    </javadoc>
    <method type="PScrollDirector" name="createScrollDirector" startLine="80" endLine="82" />
    <javadoc>
      <text>* Set the scroll director on this viewport.</text>
      <param>scrollDirector The new scroll director</param>
    </javadoc>
    <method type="void" name="setScrollDirector" startLine="89" endLine="97">
      <scope startLine="90" endLine="92" />
      <scope startLine="94" endLine="96" />
    </method>
    <javadoc>
      <text>* Returns the scroll director on this viewport.</text>
      <return>The scroll director on this viewport</return>
    </javadoc>
    <method type="PScrollDirector" name="getScrollDirector" startLine="104" endLine="106" />
    <javadoc>
      <text>* Overridden to throw an exception if the view is not a PCanvas.</text>
      <param>view The new view - it better be a ZCanvas!</param>
    </javadoc>
    <method type="void" name="setView" startLine="113" endLine="123">
      <scope startLine="114" endLine="116" />
      <scope startLine="120" endLine="122" />
    </method>
    <javadoc>
      <text>* Notifies all <code>ChangeListeners</code> when the views size, position,
 * or the viewports extent size has changed.
 * PDefaultScrollDirector calls this so it needs to be public.</text>
    </javadoc>
    <method type="void" name="fireStateChanged" startLine="131" endLine="133" />
    <javadoc>
      <text>* Sets the view coordinates that appear in the upper left hand corner of
 * the viewport, does nothing if there's no view.</text>
      <param>p a Point object giving the upper left coordinates</param>
    </javadoc>
    <method type="void" name="setViewPosition" startLine="141" endLine="167">
      <scope startLine="142" endLine="144" />
      <declaration type="double" name="oldX" />
      <declaration type="double" name="x" />
      <declaration type="Point2D" name="vp" />
      <scope startLine="150" endLine="153" />
      <declaration type="double" name="newX" />
      <declaration type="double" name="newY" />
      <scope startLine="160" endLine="166" />
      <comment>Send the scroll director the exact view position and let it interpret</comment>
      <comment>it as needed</comment>
    </method>
    <javadoc>
      <text>* Gets the view position from the scroll director based on the current
 * extent size.</text>
      <return>The new view's position</return>
    </javadoc>
    <method type="Point" name="getViewPosition" startLine="175" endLine="182">
      <scope startLine="176" endLine="178" />
      <declaration type="Dimension" name="extent" />
    </method>
    <javadoc>
      <text>* Gets the view size from the scroll director based on the current extent
 * size.</text>
      <return>The new view size</return>
    </javadoc>
    <method type="Dimension" name="getViewSize" startLine="190" endLine="193">
      <declaration type="Dimension" name="extent" />
    </method>
    <javadoc>
      <text>* Gets the view size from the scroll director based on the specified extent
 * size.</text>
      <param>r The extent size from which the view is computed</param>
      <return>The new view size</return>
    </javadoc>
    <method type="Dimension" name="getViewSize" startLine="202" endLine="204" />
    <class name="PViewportLayout" extends="ViewportLayout" startLine="206">
      <javadoc>
        <text>* A simple layout manager to give the ZCanvas the same size as the Viewport.</text>
      </javadoc>
      <declaration type="long" name="serialVersionUID" />
      <javadoc>
        <text>* Called when the specified container needs to be laid out.</text>
        <param>parent the container to lay out</param>
      </javadoc>
      <method type="void" name="layoutContainer" startLine="217" endLine="231">
        <scope startLine="218" endLine="220" />
        <declaration type="JViewport" name="vp" />
        <declaration type="Component" name="view" />
        <scope startLine="224" endLine="226" />
        <declaration type="Dimension" name="extentSize" />
      </method>
    </class>
  </class>
</source>
