<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.swt">
  <import name="java.awt.Shape" />
  <import name="java.awt.geom.AffineTransform" />
  <import name="java.awt.geom.PathIterator" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.awt.geom.Rectangle2D" />
  <import name="java.util.ArrayList" />
  <import name="org.eclipse.swt.graphics.Rectangle" />
  <class name="SWTShapeManager" startLine="40">
    <javadoc>
      <text>* SWT shape manager.</text>
      <author>Lance Good</author>
    </javadoc>
    <declaration type="AffineTransform" name="IDENTITY_XFORM" />
    <declaration type="Point2D" name="aPoint" />
    <declaration type="ArrayList" name="segList" />
    <declaration type="double[]" name="pts" />
    <javadoc>
      <text>* Apply the specified transform to the specified rectangle, modifying the
 * rect.</text>
      <param>rect The rectangle to be transformed</param>
      <param>at The transform to use to transform the rectangle</param>
    </javadoc>
    <method type="void" name="transform" startLine="58" endLine="91">
      <declaration type="double" name="minX" />
      <declaration type="double" name="minY" />
      <declaration type="double" name="maxX" />
      <declaration type="double" name="maxY" />
      <declaration type="int" name="i" />
      <scope startLine="76" endLine="89">
        <scope startLine="77" endLine="79" />
        <scope startLine="80" endLine="82" />
        <scope startLine="83" endLine="85" />
        <scope startLine="86" endLine="88" />
      </scope>
      <comment>First, transform all 4 corners of the rectangle</comment>
      <comment>top left corner</comment>
      <comment>top right corner</comment>
      <comment>bottom right corner</comment>
      <comment>bottom left corner</comment>
      <comment>Then, find the bounds of those 4 transformed points.</comment>
    </method>
    <javadoc>
      <text>* Populates the SWT rectangle with the provided Swing Rectangle2D's
 * coordinates. Rounding up to the nearest integer.</text>
      <param>aRect awt rectangle to extract coordinates from</param>
      <param>sRect swt rectangle to populate</param>
    </javadoc>
    <method type="void" name="awtToSWT" startLine="100" endLine="105" />
    <javadoc>
      <text>* Converts the provided shape into an array of point coordinates given as
 * one dimensional array with this format: x1,y1,x2,y3,....</text>
      <param>shape shape to convert</param>
      <return>point coordinates given as one dimensional array with this
 * format: x1,y1,x2,y3,...</return>
    </javadoc>
    <method type="double[]" name="shapeToPolyline" startLine="115" endLine="146">
      <declaration type="PathIterator" name="pi" />
      <scope startLine="120" endLine="136">
        <declaration type="int" name="segType" />
      </scope>
      <declaration type="double[]" name="polyObj" />
      <scope startLine="139" endLine="143">
        <declaration type="Point2D" name="p2" />
      </scope>
    </method>
    <javadoc>
      <text>* Transforms the given points by the transform provided, leaving the
 * original points untouched.</text>
      <param>points points to transform</param>
      <param>at transform to apply</param>
      <return>transformed coordinates given in format x1,y2,x2,y2,...</return>
    </javadoc>
    <method type="int[]" name="transform" startLine="156" endLine="165">
      <declaration type="int[]" name="intPts" />
      <scope startLine="158" endLine="163" />
    </method>
  </class>
</source>
