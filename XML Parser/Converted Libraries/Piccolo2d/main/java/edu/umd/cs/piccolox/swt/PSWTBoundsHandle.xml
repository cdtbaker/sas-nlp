<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.swt">
  <import name="java.awt.Cursor" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.util.ArrayList" />
  <import name="java.util.Iterator" />
  <import name="javax.swing.SwingConstants" />
  <import name="edu.umd.cs.piccolo.PCamera" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.event.PBasicInputEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PInputEvent" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <import name="edu.umd.cs.piccolo.util.PDimension" />
  <import name="edu.umd.cs.piccolo.util.PPickPath" />
  <import name="edu.umd.cs.piccolox.util.PBoundsLocator" />
  <class name="PSWTBoundsHandle" extends="PSWTHandle" startLine="47">
    <javadoc>
      <text>* <b>PSWTBoundsHandle</b> a handle for resizing the bounds of another node. If a
 * bounds handle is dragged such that the other node's width or height becomes
 * negative then the each drag handle's locator assciated with that other node
 * is "flipped" so that they are attached to and dragging a different corner of
 * the nodes bounds.</text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <class name="HandleCursorEventHandler" extends="PBasicInputEventHandler" startLine="58">
      <declaration type="boolean" name="cursorPushed" />
      <method type="void" name="mouseEntered" startLine="61" endLine="66">
        <scope startLine="62" endLine="65" />
      </method>
      <method type="void" name="mouseExited" startLine="68" endLine="75">
        <declaration type="PPickPath" name="focus" />
        <scope startLine="71" endLine="74" />
      </method>
      <method type="boolean" name="isNewFocus" startLine="77" endLine="79" />
      <method type="void" name="mouseReleased" startLine="81" endLine="86">
        <scope startLine="82" endLine="85" />
      </method>
      <declaration type="long" name="serialVersionUID" />
      <declaration type="PBasicInputEventHandler" name="handleCursorHandler" />
      <javadoc>
        <text>* Adds bounds handles to all corners and edges of the provided node.</text>
        <param>node to decorate with bounds handles.</param>
      </javadoc>
      <method type="void" name="addBoundsHandlesTo" startLine="97" endLine="106" />
      <javadoc>
        <text>* Adds sticky bounds handles to all corners and edges of the provided node
 * and for display on the provided camera.</text>
        <param>node to decorate with bounds handles.</param>
        <param>camera camera onto which the handles should be stuck</param>
      </javadoc>
      <method type="void" name="addStickyBoundsHandlesTo" startLine="115" endLine="124" />
      <javadoc>
        <text>* Removes all bounds handles from the specified node.</text>
        <param>node node from which to remove bounds handles</param>
      </javadoc>
      <method type="void" name="removeBoundsHandlesFrom" startLine="131" endLine="142">
        <declaration type="ArrayList" name="handles" />
        <declaration type="Iterator" name="i" />
        <scope startLine="135" endLine="140">
          <declaration type="PNode" name="each" />
          <scope startLine="137" endLine="139" />
        </scope>
      </method>
      <javadoc>
        <text>* Creates a bounds handle that will use the provided bounds locator to
 * position itself.</text>
        <param>locator locator to use when positioning this handle</param>
      </javadoc>
      <method type="constructor" name="PSWTBoundsHandle" startLine="150" endLine="152" />
      <javadoc>
        <text>* Installs handlers responsible for updating the attached node's bounds and
 * for updating the cursor when the mous enters a handle.</text>
      </javadoc>
      <method type="void" name="installHandleEventHandlers" startLine="158" endLine="162" />
      <javadoc>
        <text>* Return the event handler that is responsible for setting the mouse cursor
 * when it enters/exits this handle.</text>
        <return>handler responsible for keeping the mouse cursor up to date</return>
      </javadoc>
      <method type="PBasicInputEventHandler" name="getHandleCursorEventHandler" startLine="170" endLine="172" />
      <javadoc>
        <text>* Callback invoked when the user has started to drag a handle.</text>
        <param>aLocalPoint point in the handle's coordinate system at which the
 * drag was started</param>
        <param>aEvent Piccolo2d Event representing the start of the drag</param>
      </javadoc>
      <method type="void" name="startHandleDrag" startLine="181" endLine="184">
        <declaration type="PBoundsLocator" name="l" />
      </method>
      <javadoc>
        <text>* Callback invoked when the user is dragging the handle. Updates the
 * associated node appropriately.</text>
        <param>aLocalDimension magnitude of drag in the handle's coordinate
 * system</param>
        <param>aEvent Piccolo2d Event representing the start of the drag</param>
      </javadoc>
      <method type="void" name="dragHandle" startLine="194" endLine="267">
        <declaration type="PBoundsLocator" name="l" />
        <declaration type="PNode" name="n" />
        <declaration type="PBounds" name="b" />
        <declaration type="PNode" name="parent" />
        <scope startLine="201" endLine="203" />
        <declaration type="double" name="dx" />
        <declaration type="double" name="dy" />
        <declaration type="boolean" name="flipX" />
        <declaration type="boolean" name="flipY" />
        <scope startLine="250" endLine="254" />
        <scope startLine="256" endLine="260" />
        <scope startLine="262" endLine="264" />
        <comment>Leave bounds untouched</comment>
      </method>
      <javadoc>
        <text>* Callback invoked when the handle stops being dragged.</text>
        <param>aLocalPoint point in the handle's coordinate system at which the
 * drag was stopped</param>
        <param>aEvent Piccolo2d Event representing the stop of the drag</param>
      </javadoc>
      <method type="void" name="endHandleDrag" startLine="276" endLine="279">
        <declaration type="PBoundsLocator" name="l" />
      </method>
      <javadoc>
        <text>* Iterates over all of this node's handles flipping them if necessary. This
 * is needed since a node can become inverted when it's width or height
 * becomes negative.</text>
        <param>flipX whether to allow flipping in the horizontal direction</param>
        <param>flipY whether to allow flipping in the vertical direction</param>
      </javadoc>
      <method type="void" name="flipSiblingBoundsHandles" startLine="289" endLine="297">
        <declaration type="Iterator" name="i" />
        <scope startLine="291" endLine="296">
          <declaration type="Object" name="each" />
          <scope startLine="293" endLine="295" />
        </scope>
      </method>
      <javadoc>
        <text>* Flips this particular handle around if needed. This is necessary since a
 * node can become inverted when it's width or height becomes negative.</text>
        <param>flipX whether to allow flipping in the horizontal direction</param>
        <param>flipY whether to allow flipping in the vertical direction</param>
      </javadoc>
      <method type="void" name="flipHandleIfNeeded" startLine="306" endLine="390">
        <scope startLine="307" endLine="309" />
        <declaration type="PBoundsLocator" name="l" />
        <scope startLine="314" endLine="316" />
        <scope startLine="320" endLine="322" />
        <scope startLine="326" endLine="328" />
        <scope startLine="332" endLine="334" />
        <scope startLine="338" endLine="340" />
        <scope startLine="341" endLine="343" />
        <scope startLine="344" endLine="346" />
        <scope startLine="350" endLine="352" />
        <scope startLine="353" endLine="355" />
        <scope startLine="356" endLine="358" />
        <scope startLine="362" endLine="364" />
        <scope startLine="365" endLine="367" />
        <scope startLine="368" endLine="370" />
        <scope startLine="374" endLine="376" />
        <scope startLine="377" endLine="379" />
        <scope startLine="380" endLine="382" />
        <comment>Do nothing</comment>
        <comment>reset locator to update layout</comment>
      </method>
      <javadoc>
        <text>* Returns an appropriate cursor to display when the mouse is over a handle
 * on the side provided.</text>
        <param>side value from SwingConstants</param>
        <return>Appropriate cursor, or null if no appropriate cursor can be found</return>
      </javadoc>
      <method type="Cursor" name="getCursorFor" startLine="400" endLine="428" />
    </class>
  </class>
</source>
