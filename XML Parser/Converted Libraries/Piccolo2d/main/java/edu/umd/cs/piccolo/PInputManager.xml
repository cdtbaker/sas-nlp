<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo">
  <import name="java.awt.event.FocusEvent" />
  <import name="java.awt.event.InputEvent" />
  <import name="java.awt.event.KeyEvent" />
  <import name="java.awt.event.MouseEvent" />
  <import name="java.awt.event.MouseWheelEvent" />
  <import name="java.awt.geom.Point2D" />
  <import name="edu.umd.cs.piccolo.event.PBasicInputEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PInputEvent" />
  <import name="edu.umd.cs.piccolo.event.PInputEventListener" />
  <import name="edu.umd.cs.piccolo.util.PPickPath" />
  <class name="PInputManager" extends="PBasicInputEventHandler" startLine="43">
    <implements name="PRoot.InputSource" />
    <javadoc>
      <text>* <b>PInputManager</b> is responsible for dispatching PInputEvents to node's
 * event listeners. Events are dispatched from PRoot's processInputs method.
 * <P></text>
      <see>edu.umd.cs.piccolo.event.PInputEvent</see>
      <see>PRoot</see>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc>
      <text>* Records the last known mouse position on the canvas.</text>
    </javadoc>
    <declaration type="Point2D" name="lastCanvasPosition" />
    <javadoc>
      <text>* Records the current known mouse position on the canvas.</text>
    </javadoc>
    <declaration type="Point2D" name="currentCanvasPosition" />
    <javadoc>
      <text>* The next InputEvent that needs to be processed.</text>
    </javadoc>
    <declaration type="InputEvent" name="nextInput" />
    <javadoc>
      <text>* The type of the next InputEvent that needs to be processed.</text>
    </javadoc>
    <declaration type="int" name="nextType" />
    <javadoc>
      <text>* The Input Source the next event to process came from.</text>
    </javadoc>
    <declaration type="PCamera" name="nextInputSource" />
    <javadoc>
      <text>* The current mouse focus.</text>
    </javadoc>
    <declaration type="PPickPath" name="mouseFocus" />
    <javadoc>
      <text>* The previous mouse focus.</text>
    </javadoc>
    <declaration type="PPickPath" name="previousMouseFocus" />
    <javadoc>
      <text>* Tracks where the mouse is right now on the canvas.</text>
    </javadoc>
    <declaration type="PPickPath" name="mouseOver" />
    <javadoc>
      <text>* Tracks the previous location of the mouse on the canvas.</text>
    </javadoc>
    <declaration type="PPickPath" name="previousMouseOver" />
    <javadoc>
      <text>* Tracks the input event listener that should receive keyboard events.</text>
    </javadoc>
    <declaration type="PInputEventListener" name="keyboardFocus" />
    <javadoc>
      <text>* Tracks the number mouse buttons currently pressed.</text>
    </javadoc>
    <declaration type="int" name="buttonsPressed" />
    <javadoc>
      <text>* Creates a PInputManager and sets positions (last, current) to the origin
 * (0,0).</text>
    </javadoc>
    <method type="constructor" name="PInputManager" startLine="92" endLine="95" />
    <javadoc>
      <text>* Return the node that currently has the keyboard focus. This node receives
 * the key events.</text>
      <return>the current keyboard focus</return>
    </javadoc>
    <method type="PInputEventListener" name="getKeyboardFocus" startLine="103" endLine="105" />
    <javadoc>
      <text>* Set the node that should receive key events.</text>
      <param>eventHandler sets the keyboard event focus, may be null</param>
    </javadoc>
    <method type="void" name="setKeyboardFocus" startLine="112" endLine="124">
      <declaration type="PInputEvent" name="focusEvent" />
      <scope startLine="115" endLine="117" />
      <scope startLine="121" endLine="123" />
    </method>
    <javadoc>
      <text>* Return the current Pick Path under the mouse focus. This will return the
 * path that received the current mouse pressed event, or null if the mouse
 * is not pressed. The mouse focus gets mouse dragged events even what the
 * mouse is not over the mouse focus.</text>
      <return>the current Pick Path under the mouse focus</return>
    </javadoc>
    <method type="PPickPath" name="getMouseFocus" startLine="134" endLine="136" />
    <javadoc>
      <text>* Sets the current Pick Path under the mouse focus. The mouse focus gets
 * mouse dragged events even when the mouse is not over the mouse focus.</text>
      <param>path the new mouse focus</param>
    </javadoc>
    <method type="void" name="setMouseFocus" startLine="144" endLine="147" />
    <javadoc>
      <text>* Return the node the the mouse is currently over.</text>
      <return>the path over which the mouse currently is</return>
    </javadoc>
    <method type="PPickPath" name="getMouseOver" startLine="154" endLine="156" />
    <javadoc>
      <text>* Records the path which is directly below the mouse.</text>
      <param>path path over which the mouse has been moved</param>
    </javadoc>
    <method type="void" name="setMouseOver" startLine="163" endLine="165" />
    <javadoc>
      <text>* Returns the position on the Canvas of the last event.</text>
      <return>position of last canvas event</return>
    </javadoc>
    <method type="Point2D" name="getLastCanvasPosition" startLine="172" endLine="174" />
    <javadoc>
      <text>* Returns the position of the current canvas event.</text>
      <return>position of current canvas event</return>
    </javadoc>
    <method type="Point2D" name="getCurrentCanvasPosition" startLine="181" endLine="183" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="keyPressed" startLine="194" endLine="196" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="keyReleased" startLine="199" endLine="201" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="keyTyped" startLine="204" endLine="206" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="mouseClicked" startLine="209" endLine="211" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="mouseWheelRotated" startLine="214" endLine="217" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="mouseWheelRotatedByBlock" startLine="220" endLine="223" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="mouseDragged" startLine="226" endLine="229" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="mouseEntered" startLine="232" endLine="234" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="mouseExited" startLine="237" endLine="239" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="mouseMoved" startLine="242" endLine="245" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="mousePressed" startLine="248" endLine="257">
      <scope startLine="249" endLine="251" />
      <scope startLine="254" endLine="256" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="mouseReleased" startLine="260" endLine="270">
      <scope startLine="264" endLine="266" />
      <scope startLine="267" endLine="269" />
    </method>
    <javadoc>
      <text>* Fires events whenever the mouse moves from PNode to PNode.</text>
      <param>event to check to see if the top node has changed.</param>
    </javadoc>
    <method type="void" name="checkForMouseEnteredAndExited" startLine="277" endLine="286">
      <declaration type="PNode" name="currentNode" />
      <declaration type="PNode" name="previousNode" />
      <scope startLine="281" endLine="285" />
    </method>
    <javadoc>
      <text>* Returns picked node on pickPath if pickPath is not null, or null.</text>
      <param>pickPath from which to extract picked node</param>
      <return>the picked node or null if pickPath is null</return>
    </javadoc>
    <method type="PNode" name="getPickedNode" startLine="295" endLine="302">
      <scope startLine="296" endLine="298" />
      <scope startLine="299" endLine="301" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="processInput" startLine="308" endLine="345">
      <scope startLine="309" endLine="311" />
      <declaration type="PInputEvent" name="e" />
      <declaration type="Point2D" name="newCurrentCanvasPosition" />
      <declaration type="Point2D" name="newLastCanvasPosition" />
      <scope startLine="318" endLine="334">
        <scope startLine="319" endLine="326">
          <declaration type="PPickPath" name="aPickPath" />
        </scope>
        <scope startLine="327" endLine="333">
          <declaration type="PPickPath" name="aPickPath" />
        </scope>
      </scope>
      <scope startLine="341" endLine="344" />
    </method>
    <javadoc>
      <text>* Flags the given event as needing to be processed.</text>
      <param>event the event to be processed</param>
      <param>type type of event to be processed</param>
      <param>camera camera from which the event was dispatched</param>
    </javadoc>
    <method type="void" name="processEventFromCamera" startLine="354" endLine="362">
      <comment>queue input</comment>
      <comment>tell root to process queued inputs</comment>
    </method>
    <javadoc>
      <text>* Dispatches the given event to the listener, or does nothing if listener
 * is null.</text>
      <param>event event to be dispatched</param>
      <param>type type of event to dispatch</param>
      <param>listener target of dispatch</param>
    </javadoc>
    <method type="void" name="dispatchEventToListener" startLine="372" endLine="379">
      <scope startLine="373" endLine="378">
        <comment>clear the handled bit since the same event object is used to send</comment>
        <comment>multiple events such as mouseEntered/mouseExited and mouseMove.</comment>
      </scope>
    </method>
    <comment>****************************************************************</comment>
    <comment>Event Handling - Methods for handling events</comment>
    <comment />
    <comment>The dispatch manager updates the focus nodes based on the</comment>
    <comment>incoming events, and dispatches those events to the appropriate</comment>
    <comment>focus nodes.</comment>
    <comment>****************************************************************</comment>
    <comment>****************************************************************</comment>
    <comment>Event Dispatch.</comment>
    <comment>****************************************************************</comment>
  </class>
</source>
