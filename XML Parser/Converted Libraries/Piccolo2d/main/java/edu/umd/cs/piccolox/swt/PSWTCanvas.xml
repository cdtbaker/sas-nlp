<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.swt">
  <import name="java.awt.Color" />
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.event.InputEvent" />
  <import name="java.awt.geom.Rectangle2D" />
  <import name="org.eclipse.swt.SWT" />
  <import name="org.eclipse.swt.events.DisposeEvent" />
  <import name="org.eclipse.swt.events.DisposeListener" />
  <import name="org.eclipse.swt.events.KeyEvent" />
  <import name="org.eclipse.swt.events.KeyListener" />
  <import name="org.eclipse.swt.events.MouseEvent" />
  <import name="org.eclipse.swt.events.MouseListener" />
  <import name="org.eclipse.swt.events.MouseMoveListener" />
  <import name="org.eclipse.swt.events.PaintEvent" />
  <import name="org.eclipse.swt.events.PaintListener" />
  <import name="org.eclipse.swt.graphics.Cursor" />
  <import name="org.eclipse.swt.graphics.GC" />
  <import name="org.eclipse.swt.graphics.Image" />
  <import name="org.eclipse.swt.graphics.Rectangle" />
  <import name="org.eclipse.swt.widgets.Composite" />
  <import name="edu.umd.cs.piccolo.PCamera" />
  <import name="edu.umd.cs.piccolo.PComponent" />
  <import name="edu.umd.cs.piccolo.PLayer" />
  <import name="edu.umd.cs.piccolo.PRoot" />
  <import name="edu.umd.cs.piccolo.event.PInputEventListener" />
  <import name="edu.umd.cs.piccolo.event.PPanEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PZoomEventHandler" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <import name="edu.umd.cs.piccolo.util.PDebug" />
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <import name="edu.umd.cs.piccolo.util.PStack" />
  <class name="PSWTCanvas" extends="Composite" startLine="64">
    <implements name="PComponent" />
    <javadoc>
      <text>* <b>PSWTCanvas</b> is an SWT Composite that can be used to embed
 * Piccolo into a SWT application. Canvases view the Piccolo scene graph
 * through a camera. The canvas manages screen updates coming from this camera,
 * and forwards swing mouse and keyboard events to the camera.</text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <declaration type="int" name="SWT_BUTTON1" />
    <declaration type="int" name="SWT_BUTTON2" />
    <declaration type="int" name="SWT_BUTTON3" />
    <javadoc>
      <text>* Terrible Singleton instance of the PSWTCanvas. Falsely assumes you will
 * only have one of these per application.</text>
    </javadoc>
    <declaration type="PSWTCanvas" name="CURRENT_CANVAS" />
    <declaration type="Image" name="backBuffer" />
    <declaration type="boolean" name="doubleBuffered" />
    <declaration type="PCamera" name="camera" />
    <declaration type="PStack" name="cursorStack" />
    <declaration type="Cursor" name="curCursor" />
    <declaration type="int" name="interacting" />
    <declaration type="int" name="defaultRenderQuality" />
    <declaration type="int" name="animatingRenderQuality" />
    <declaration type="int" name="interactingRenderQuality" />
    <declaration type="PPanEventHandler" name="panEventHandler" />
    <declaration type="PZoomEventHandler" name="zoomEventHandler" />
    <declaration type="boolean" name="paintingImmediately" />
    <declaration type="boolean" name="animatingOnLastPaint" />
    <declaration type="boolean" name="isButton1Pressed" />
    <declaration type="boolean" name="isButton2Pressed" />
    <declaration type="boolean" name="isButton3Pressed" />
    <javadoc>
      <text>* Construct a canvas with the basic scene graph consisting of a root,
 * camera, and layer. Event handlers for zooming and panning are
 * automatically installed.</text>
      <param>parent component onto which the canvas is installed</param>
      <param>style component style for the PSWTCanvas</param>
    </javadoc>
    <method type="constructor" name="PSWTCanvas" startLine="110" endLine="127" />
    <method type="void" name="installPaintListener" startLine="129" endLine="135">
      <method type="void" name="paintControl" startLine="131" endLine="133" />
    </method>
    <method type="void" name="installDisposeListener" startLine="137" endLine="145">
      <method type="void" name="widgetDisposed" startLine="140" endLine="143" />
    </method>
    <javadoc>
      <text>* Get the pan event handler associated with this canvas. This event handler
 * is set up to get events from the camera associated with this canvas by
 * default.</text>
      <return>the current pan event handler, which may be null</return>
    </javadoc>
    <method type="PPanEventHandler" name="getPanEventHandler" startLine="158" endLine="160" />
    <javadoc>
      <text>* Get the zoom event handler associated with this canvas. This event
 * handler is set up to get events from the camera associated with this
 * canvas by default.</text>
      <return>the event handler installed to handle zooming</return>
    </javadoc>
    <method type="PZoomEventHandler" name="getZoomEventHandler" startLine="169" endLine="171" />
    <javadoc>
      <text>* Return the camera associated with this canvas. All input events from this
 * canvas go through this camera. And this is the camera that paints this
 * canvas.</text>
      <return>the camera associated with this canvas</return>
    </javadoc>
    <method type="PCamera" name="getCamera" startLine="180" endLine="182" />
    <javadoc>
      <text>* Set the camera associated with this canvas. All input events from this
 * canvas go through this camera. And this is the camera that paints this
 * canvas.</text>
      <param>newCamera camera to attach to this canvas</param>
    </javadoc>
    <method type="void" name="setCamera" startLine="191" endLine="205">
      <scope startLine="192" endLine="194" />
      <scope startLine="198" endLine="204">
        <declaration type="Rectangle" name="swtRect" />
      </scope>
    </method>
    <javadoc>
      <text>* Return root for this canvas.</text>
      <return>root of the scene this canvas is viewing through its camera</return>
    </javadoc>
    <method type="PRoot" name="getRoot" startLine="212" endLine="214" />
    <javadoc>
      <text>* Helper method to return the first layer attached to the camera of this
 * canvas.
 * Short form of <code>canvas.getCamera.getLayer(0)</code></text>
      <return>the first layer attached to the camera of this canvas</return>
    </javadoc>
    <method type="PLayer" name="getLayer" startLine="224" endLine="226" />
    <javadoc>
      <text>* Add an input listener to the camera associated with this canvas.</text>
      <param>listener listener to add to to the camera</param>
    </javadoc>
    <method type="void" name="addInputEventListener" startLine="233" endLine="235" />
    <javadoc>
      <text>* Remove an input listener to the camera associated with this canvas. Does
 * nothign is the listener is not found.</text>
      <param>listener listener to remove from the set of event listeners
 * attached to this canvas.</param>
    </javadoc>
    <method type="void" name="removeInputEventListener" startLine="244" endLine="246" />
    <javadoc>
      <text>* Builds the basic scene graph associated with this canvas. Developers may
 * override this method to install their own layers, and cameras.</text>
      <return>PCamera viewing the freshly created scene</return>
    </javadoc>
    <method type="PCamera" name="createBasicSceneGraph" startLine="254" endLine="264">
      <declaration type="PRoot" name="r" />
      <declaration type="PLayer" name="l" />
      <declaration type="PCamera" name="c" />
    </method>
    <javadoc>
      <text>* Return true if this canvas has been marked as interacting. If so the
 * canvas will normally render at a lower quality that is faster.</text>
      <return>true if canvas is flagged as interacting</return>
    </javadoc>
    <method type="boolean" name="getInteracting" startLine="276" endLine="278" />
    <javadoc>
      <text>* Return true if any activities that respond with true to the method
 * isAnimating were run in the last PRoot.processInputs() loop. This values
 * is used by this canvas to determine the render quality to use for the
 * next paint.</text>
      <return>true if there is an animating activity that is currently active</return>
    </javadoc>
    <method type="boolean" name="getAnimating" startLine="288" endLine="290" />
    <javadoc>
      <text>* Changes the number of callers that are interacting with the canvas. Will
 * allow the scene to be rendered in a lower quality if the number is not 0.</text>
      <param>isInteracting state the client considers the PSWTCanvas to be in
 * with regard to interacting</param>
    </javadoc>
    <method type="void" name="setInteracting" startLine="299" endLine="310">
      <scope startLine="300" endLine="302" />
      <scope startLine="303" endLine="305" />
      <scope startLine="307" endLine="309" />
    </method>
    <javadoc>
      <text>* Get whether this canvas should use double buffering - the default is to
 * double buffer.</text>
      <return>true if double buffering is enabled</return>
    </javadoc>
    <method type="boolean" name="getDoubleBuffered" startLine="318" endLine="320" />
    <javadoc>
      <text>* Set whether this canvas should use double buffering - the default is yes.</text>
      <param>doubleBuffered value of double buffering flas</param>
    </javadoc>
    <method type="void" name="setDoubleBuffered" startLine="327" endLine="333">
      <scope startLine="329" endLine="332" />
    </method>
    <javadoc>
      <text>* Set the render quality that should be used when rendering this canvas.
 * The default value is PPaintContext.HIGH_QUALITY_RENDERING.</text>
      <param>requestedQuality supports PPaintContext.HIGH_QUALITY_RENDERING or
 * PPaintContext.LOW_QUALITY_RENDERING</param>
    </javadoc>
    <method type="void" name="setDefaultRenderQuality" startLine="342" endLine="345" />
    <javadoc>
      <text>* Set the render quality that should be used when rendering this canvas
 * when it is animating. The default value is
 * PPaintContext.LOW_QUALITY_RENDERING.</text>
      <param>requestedQuality supports PPaintContext.HIGH_QUALITY_RENDERING or
 * PPaintContext.LOW_QUALITY_RENDERING</param>
    </javadoc>
    <method type="void" name="setAnimatingRenderQuality" startLine="355" endLine="358" />
    <javadoc>
      <text>* Set the render quality that should be used when rendering this canvas
 * when it is interacting. The default value is
 * PPaintContext.LOW_QUALITY_RENDERING.</text>
      <param>requestedQuality supports PPaintContext.HIGH_QUALITY_RENDERING or
 * PPaintContext.LOW_QUALITY_RENDERING</param>
    </javadoc>
    <method type="void" name="setInteractingRenderQuality" startLine="368" endLine="371" />
    <javadoc>
      <text>* Set the canvas cursor, and remember the previous cursor on the cursor
 * stack. Under the hood it is mapping the java.awt.Cursor to
 * org.eclipse.swt.graphics.Cursor objects.</text>
      <param>newCursor new cursor to push onto the cursor stack</param>
    </javadoc>
    <method type="void" name="pushCursor" startLine="380" endLine="429">
      <declaration type="Cursor" name="swtCursor" />
      <scope startLine="382" endLine="384" />
      <scope startLine="385" endLine="387" />
      <scope startLine="388" endLine="390" />
      <scope startLine="391" endLine="393" />
      <scope startLine="394" endLine="396" />
      <scope startLine="397" endLine="399" />
      <scope startLine="400" endLine="402" />
      <scope startLine="403" endLine="405" />
      <scope startLine="406" endLine="408" />
      <scope startLine="409" endLine="411" />
      <scope startLine="412" endLine="414" />
      <scope startLine="415" endLine="417" />
      <scope startLine="418" endLine="420" />
      <scope startLine="422" endLine="428">
        <scope startLine="423" endLine="425" />
      </scope>
    </method>
    <javadoc>
      <text>* Pop the cursor on top of the cursorStack and set it as the canvas cursor.</text>
    </javadoc>
    <method type="void" name="popCursor" startLine="434" endLine="449">
      <scope startLine="435" endLine="438">
        <comment>We must manually dispose of cursors under SWT</comment>
      </scope>
      <scope startLine="440" endLine="442" />
      <scope startLine="443" endLine="445" />
      <comment>This sets the cursor back to default</comment>
    </method>
    <javadoc>
      <text>* This method installs mouse and key listeners on the canvas that forward
 * those events to Piccolo2D.</text>
    </javadoc>
    <method type="void" name="installInputSources" startLine="462" endLine="468">
      <declaration type="MouseInputSource" name="mouseInputSource" />
    </method>
    <javadoc>
      <text>* Dispatches the given event to the default input manager for the root of
 * this canvas.</text>
      <param>awtEvent awt event needing dispatching</param>
      <param>type type of the event</param>
    </javadoc>
    <method type="void" name="sendInputEventToInputManager" startLine="477" endLine="479" />
    <javadoc>
      <text>* Changes the bounds of this PSWTCanvas. Updating the camera and the double
 * buffered image appropriately.</text>
      <param>x left of the new bounds</param>
      <param>y top of the new bounds</param>
      <param>newWidth new width of the bounds</param>
      <param>newHeight new height of the bounds</param>
    </javadoc>
    <method type="void" name="setBounds" startLine="490" endLine="498">
      <scope startLine="493" endLine="495" />
    </method>
    <method type="void" name="resizeBackBuffer" startLine="500" endLine="505">
      <scope startLine="501" endLine="503" />
    </method>
    <method type="boolean" name="backBufferNeedsResizing" startLine="507" endLine="517">
      <scope startLine="508" endLine="510" />
      <scope startLine="512" endLine="514" />
    </method>
    <javadoc>
      <text>* Exists to dispatch from the Swing's repaint method to SWT's redraw
 * method.</text>
    </javadoc>
    <method type="void" name="repaint" startLine="523" endLine="525" />
    <javadoc>
      <text>* Flags the bounds provided as needing to be redrawn.</text>
      <param>bounds the bounds that should be repainted</param>
    </javadoc>
    <method type="void" name="repaint" startLine="532" endLine="537" />
    <javadoc>
      <text>* Paints the region specified of the canvas onto the given Graphics
 * Context.</text>
      <param>gc graphics onto within painting should occur</param>
      <param>x left of the dirty region</param>
      <param>y top of the dirty region</param>
      <param>w width of the dirty region</param>
      <param>h height of the dirty region</param>
    </javadoc>
    <method type="void" name="paintComponent" startLine="549" endLine="613">
      <declaration type="GC" name="imageGC" />
      <declaration type="Graphics2D" name="g2" />
      <scope startLine="554" endLine="557" />
      <scope startLine="558" endLine="560" />
      <declaration type="Rectangle" name="rect" />
      <scope startLine="570" endLine="575">
        <declaration type="Rectangle" name="r" />
        <declaration type="Rectangle2D" name="r2" />
      </scope>
      <declaration type="PPaintContext" name="paintContext" />
      <scope startLine="579" endLine="586">
        <scope startLine="580" endLine="582" />
        <scope startLine="583" endLine="585" />
      </scope>
      <scope startLine="587" endLine="589" />
      <scope startLine="597" endLine="599" />
      <declaration type="boolean" name="region" />
      <scope startLine="607" endLine="612">
        <comment>Dispose of the allocated image gc</comment>
      </scope>
      <comment>This fixes a problem with standard debugging of region management in</comment>
      <comment>SWT</comment>
      <comment>create new paint context and set render quality</comment>
      <comment>paint Piccolo2D</comment>
      <comment>if switched state from animating to not animating invalidate</comment>
      <comment>the entire screen so that it will be drawn with the default instead</comment>
      <comment>of animating render quality.</comment>
    </method>
    <javadoc>
      <text>* Performs an immediate repaint if no other client is currently performing
 * one.</text>
    </javadoc>
    <method type="void" name="paintImmediately" startLine="619" endLine="628">
      <scope startLine="620" endLine="622" />
    </method>
    <class name="KeyboardInputSource" startLine="630">
      <implements name="KeyListener" />
      <method type="void" name="keyPressed" startLine="631" endLine="634">
        <declaration type="java.awt.event.KeyEvent" name="inputEvent" />
      </method>
      <method type="void" name="keyReleased" startLine="636" endLine="639">
        <declaration type="java.awt.event.KeyEvent" name="inputEvent" />
      </method>
      <class name="MouseInputSource" startLine="642">
        <implements name="MouseListener" />
        <implements name="MouseMoveListener" />
        <method type="void" name="mouseMove" startLine="643" endLine="654">
          <scope startLine="644" endLine="648">
            <declaration type="java.awt.event.MouseEvent" name="inputEvent" />
          </scope>
          <scope startLine="649" endLine="653">
            <declaration type="java.awt.event.MouseEvent" name="inputEvent" />
          </scope>
        </method>
        <method type="void" name="mouseDown" startLine="656" endLine="690">
          <declaration type="boolean" name="shouldBalanceEvent" />
          <scope startLine="661" endLine="663" />
          <scope startLine="667" endLine="669" />
          <scope startLine="673" endLine="675" />
          <scope startLine="681" endLine="685">
            <declaration type="java.awt.event.MouseEvent" name="balanceEvent" />
          </scope>
          <declaration type="java.awt.event.MouseEvent" name="balanceEvent" />
        </method>
        <method type="void" name="mouseUp" startLine="692" endLine="726">
          <declaration type="boolean" name="shouldBalanceEvent" />
          <scope startLine="697" endLine="699" />
          <scope startLine="703" endLine="705" />
          <scope startLine="709" endLine="711" />
          <scope startLine="717" endLine="721">
            <declaration type="java.awt.event.MouseEvent" name="balanceEvent" />
          </scope>
          <declaration type="java.awt.event.MouseEvent" name="balanceEvent" />
        </method>
        <method type="void" name="mouseDoubleClick" startLine="728" endLine="736">
          <declaration type="java.awt.event.MouseEvent" name="inputEvent" />
          <comment>This doesn't work with click event types for some reason - it</comment>
          <comment>has to do with how the click and release events are ordered,</comment>
          <comment>I think</comment>
        </method>
      </class>
    </class>
    <comment>****************************************************************</comment>
    <comment>Basic - Methods for accessing common Piccolo2D nodes.</comment>
    <comment>****************************************************************</comment>
    <comment>****************************************************************</comment>
    <comment>Painting</comment>
    <comment>****************************************************************</comment>
    <comment>****************************************************************</comment>
    <comment>Code to manage connection to Swing. There appears to be a bug in</comment>
    <comment>swing where it will occasionally send to many mouse pressed or mouse</comment>
    <comment>released events. Below we attempt to filter out those cases before</comment>
    <comment>they get delivered to the Piccolo2D framework.</comment>
    <comment>****************************************************************</comment>
  </class>
</source>
