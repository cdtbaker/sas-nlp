<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.event">
  <import name="java.awt.Color" />
  <import name="java.awt.Dimension" />
  <import name="java.awt.Font" />
  <import name="java.awt.Graphics" />
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.Insets" />
  <import name="java.awt.RenderingHints" />
  <import name="java.awt.event.InputEvent" />
  <import name="java.awt.event.MouseEvent" />
  <import name="java.awt.geom.Point2D" />
  <import name="javax.swing.JTextPane" />
  <import name="javax.swing.SwingUtilities" />
  <import name="javax.swing.border.CompoundBorder" />
  <import name="javax.swing.border.EmptyBorder" />
  <import name="javax.swing.border.LineBorder" />
  <import name="javax.swing.event.DocumentEvent" />
  <import name="javax.swing.event.DocumentListener" />
  <import name="javax.swing.text.Document" />
  <import name="javax.swing.text.JTextComponent" />
  <import name="javax.swing.text.SimpleAttributeSet" />
  <import name="javax.swing.text.StyleConstants" />
  <import name="javax.swing.text.StyledDocument" />
  <import name="edu.umd.cs.piccolo.PCamera" />
  <import name="edu.umd.cs.piccolo.PCanvas" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.event.PBasicInputEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PInputEvent" />
  <import name="edu.umd.cs.piccolo.event.PInputEventFilter" />
  <import name="edu.umd.cs.piccolox.nodes.PStyledText" />
  <class name="PStyledTextEventHandler" extends="PBasicInputEventHandler" startLine="63">
    <javadoc>
      <author>Lance Good</author>
    </javadoc>
    <declaration type="int" name="TEXT_EDIT_PADDING" />
    <javadoc>
      <text>* Canvas onto which this event handler is attached.</text>
    </javadoc>
    <declaration type="PCanvas" name="canvas" />
    <javadoc>
      <text>* Editor used to edit a PStyledText's content when it is in edit mode.</text>
    </javadoc>
    <declaration type="JTextComponent" name="editor" />
    <javadoc>
      <text>* A listener that will handle programatic changes to the underlying
 * document and update the view accordingly.</text>
    </javadoc>
    <declaration type="DocumentListener" name="docListener" />
    <javadoc>
      <text>* The Styled text being edited.</text>
    </javadoc>
    <declaration type="PStyledText" name="editedText" />
    <javadoc>
      <text>* Basic constructor for PStyledTextEventHandler.</text>
      <param>canvas canvas to which this handler will be attached</param>
    </javadoc>
    <method type="constructor" name="PStyledTextEventHandler" startLine="89" endLine="95">
      <declaration type="PInputEventFilter" name="filter" />
    </method>
    <javadoc>
      <text>* Constructor for PStyledTextEventHandler that allows an editor to be
 * specified.</text>
      <param>canvas canvas to which this handler will be attached</param>
      <param>editor component to display when editing a PStyledText node</param>
    </javadoc>
    <method type="constructor" name="PStyledTextEventHandler" startLine="104" endLine="109" />
    <javadoc>
      <text>* Installs the editor onto the canvas. Making it the editor that will be
 * used whenever a PStyledText node needs editing.</text>
      <param>newEditor component responsible for a PStyledText node while it is
 * being edited.</param>
    </javadoc>
    <method type="void" name="initEditor" startLine="118" endLine="126" />
    <javadoc>
      <text>* Creates a default editor component to be used when editing a PStyledText
 * node.</text>
      <return>a freshly created JTextComponent subclass that can be used to
 * edit PStyledText nodes</return>
    </javadoc>
    <method type="JTextComponent" name="createDefaultEditor" startLine="135" endLine="137" />
    <javadoc>
      <text>* Returns a document listener that will reshape the editor whenever a
 * change occurs to its attached document.</text>
      <return>a DocumentListener</return>
    </javadoc>
    <method type="DocumentListener" name="createDocumentListener" startLine="145" endLine="159">
      <method type="void" name="removeUpdate" startLine="147" endLine="149" />
      <method type="void" name="insertUpdate" startLine="151" endLine="153" />
      <method type="void" name="changedUpdate" startLine="155" endLine="157" />
    </method>
    <javadoc>
      <text>* Creates a PStyledText instance and attaches a simple document to it. If
 * possible, it configures its font information too.</text>
      <return>a new PStyledText instance</return>
    </javadoc>
    <method type="PStyledText" name="createText" startLine="167" endLine="182">
      <declaration type="PStyledText" name="newText" />
      <declaration type="Document" name="doc" />
      <scope startLine="171" endLine="178">
        <declaration type="Font" name="eFont" />
        <declaration type="SimpleAttributeSet" name="sas" />
      </scope>
    </method>
    <method type="boolean" name="missingFontFamilyOrSize" startLine="184" endLine="187" />
    <javadoc>
      <text>* A callback that is invoked any time the mouse is pressed on the canvas.
 * If the press occurs directly on the canvas, it create a new PStyledText
 * instance and puts it in editing mode. If the click is on a node, it marks
 * changes it to editing mode.</text>
      <param>event mouse click event that can be queried</param>
    </javadoc>
    <method type="void" name="mousePressed" startLine="197" endLine="215">
      <declaration type="PNode" name="pickedNode" />
      <scope startLine="202" endLine="204" />
      <scope startLine="206" endLine="208" />
      <scope startLine="209" endLine="214">
        <declaration type="PStyledText" name="newText" />
        <declaration type="Insets" name="pInsets" />
      </scope>
    </method>
    <javadoc>
      <text>* Begins editing the provided text node as a result of the provided event.
 * Will swap out the text node for an editor.</text>
      <param>event the event responsible for starting the editing</param>
      <param>text text node being edited</param>
    </javadoc>
    <method type="void" name="startEditing" startLine="224" endLine="245">
      <declaration type="Insets" name="pInsets" />
      <declaration type="Point2D" name="nodePt" />
      <declaration type="Insets" name="bInsets" />
      <comment>Get the node's top right hand corner</comment>
      <comment>Update the editor to edit the specified node</comment>
    </method>
    <javadoc>
      <text>* Stops editing the current text node.</text>
      <param>event the event responsible for stopping the editing</param>
    </javadoc>
    <method type="void" name="stopEditing" startLine="252" endLine="275">
      <scope startLine="253" endLine="255" />
      <scope startLine="260" endLine="262" />
      <scope startLine="263" endLine="265" />
      <scope startLine="267" endLine="270" />
    </method>
    <javadoc>
      <text>* Intercepts Piccolo2D events and dispatches the underlying swing one to
 * the current editor.</text>
      <param>event the swing event being intercepted</param>
    </javadoc>
    <method type="void" name="dispatchEventToEditor" startLine="283" endLine="300">
      <method type="void" name="run" startLine="288" endLine="298">
        <method type="void" name="run" startLine="290" endLine="296">
          <declaration type="MouseEvent" name="me" />
        </method>
      </method>
      <comment>We have to nest the mouse press in two invoke laters so that it is</comment>
      <comment>fired so that the component has been completely validated at the new</comment>
      <comment>size and the mouse event has the correct offset</comment>
    </method>
    <javadoc>
      <text>* Adjusts the shape of the editor to fit the current document.</text>
    </javadoc>
    <method type="void" name="reshapeEditor" startLine="305" endLine="335">
      <scope startLine="306" endLine="334">
        <declaration type="Dimension" name="prefSize" />
        <declaration type="Insets" name="textInsets" />
        <declaration type="Insets" name="editorInsets" />
        <declaration type="int" name="width" />
        <scope startLine="313" endLine="315" />
        <scope startLine="316" endLine="319" />
        <declaration type="int" name="height" />
        <scope startLine="325" endLine="327" />
        <scope startLine="328" endLine="331" />
      </scope>
    </method>
    <javadoc>
      <text>* Sometimes we need to invoke this later because the document events seem
 * to get fired before the text is actually incorporated into the document.</text>
    </javadoc>
    <method type="void" name="reshapeEditorLater" startLine="341" endLine="347">
      <method type="void" name="run" startLine="343" endLine="345" />
    </method>
    <class name="DefaultTextEditor" extends="JTextPane" startLine="349">
      <declaration type="long" name="serialVersionUID" />
      <method type="constructor" name="DefaultTextEditor" startLine="352" endLine="356">
        <declaration type="EmptyBorder" name="padding" />
      </method>
      <javadoc>
        <text>* Set some rendering hints - if we don't then the rendering can be
 * inconsistent. Also, Swing doesn't work correctly with fractional
 * metrics.</text>
      </javadoc>
      <method type="void" name="paint" startLine="363" endLine="376">
        <scope startLine="364" endLine="366" />
        <declaration type="Graphics2D" name="g2" />
      </method>
    </class>
  </class>
</source>
