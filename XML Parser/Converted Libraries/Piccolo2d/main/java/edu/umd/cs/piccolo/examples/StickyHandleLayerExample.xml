<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.examples">
  <import name="java.awt.Color" />
  <import name="java.util.Iterator" />
  <import name="edu.umd.cs.piccolo.PCanvas" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.PRoot" />
  <import name="edu.umd.cs.piccolo.activities.PActivity" />
  <import name="edu.umd.cs.piccolo.nodes.PPath" />
  <import name="edu.umd.cs.piccolox.PFrame" />
  <import name="edu.umd.cs.piccolox.handles.PBoundsHandle" />
  <import name="edu.umd.cs.piccolox.handles.PHandle" />
  <import name="edu.umd.cs.piccolox.util.PBoundsLocator" />
  <class name="StickyHandleLayerExample" extends="PFrame" startLine="44">
    <javadoc>
      <text>* This example shows another way to create sticky handles. These handles are
 * not added as children to the object that they manipulate. Instead they are
 * added to the camera the views that objects. This means that they will not be
 * affected by the cameras view transform, and so will stay the same size when
 * the view is zoomed. They will also be drawn on top of all other objects, even
 * if those objects overlap the object that they manipulate. For this setup we
 * need to add and updateHandles activity that makes sure to relocate the handle
 * after any change. Another way to do this would be to add change listeners to
 * the camera and the node that they manipulate and only update them then. But
 * this method is easier and should be plenty efficient for normal use.</text>
      <author>jesse</author>
    </javadoc>
    <javadoc />
    <declaration type="long" name="serialVersionUID" />
    <method type="constructor" name="StickyHandleLayerExample" startLine="65" endLine="67" />
    <method type="constructor" name="StickyHandleLayerExample" startLine="69" endLine="71" />
    <method type="void" name="initialize" startLine="73" endLine="105">
      <declaration type="PCanvas" name="c" />
      <declaration type="PActivity" name="updateHandles" />
      <method type="void" name="activityStep" startLine="77" endLine="92">
        <declaration type="PRoot" name="root" />
        <scope startLine="82" endLine="91">
          <declaration type="Iterator" name="i" />
          <scope startLine="84" endLine="90">
            <declaration type="PNode" name="each" />
            <scope startLine="86" endLine="89">
              <declaration type="PHandle" name="handle" />
            </scope>
          </scope>
        </scope>
      </method>
      <declaration type="PPath" name="rect" />
    </method>
    <method type="void" name="main" startLine="107" endLine="109" />
  </class>
</source>
