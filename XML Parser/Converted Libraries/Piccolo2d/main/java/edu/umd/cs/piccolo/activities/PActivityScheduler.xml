<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.activities">
  <import name="java.awt.event.ActionEvent" />
  <import name="java.awt.event.ActionListener" />
  <import name="java.io.Serializable" />
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="javax.swing.Timer" />
  <import name="edu.umd.cs.piccolo.PRoot" />
  <import name="edu.umd.cs.piccolo.util.PUtil" />
  <class name="PActivityScheduler" startLine="42">
    <implements name="Serializable" />
    <javadoc>
      <text>* <b>PActivityScheduler</b> is responsible for maintaining a list of
 * activities. It is given a chance to process these activities from the PRoot's
 * processInputs() method. Most users will not need to use the
 * PActivityScheduler directly, instead you should look at:
 * <ul>
 * <li>PNode.addActivity - to schedule a new activity
 * <li>PActivity.terminate - to terminate a running activity
 * <li>PRoot.processInputs - already calls processActivities for you.
 * </ul></text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <declaration type="Timer" name="activityTimer" />
    <declaration type="PRoot" name="root" />
    <declaration type="List" name="activities" />
    <declaration type="boolean" name="activitiesChanged" />
    <declaration type="boolean" name="animating" />
    <declaration type="ArrayList" name="processingActivities" />
    <javadoc>
      <text>* Constructs an instance of PActivityScheduler. All activities it will
 * schedule will take place on children of the rootNode provided.</text>
      <param>rootNode root node of all activities to be performed. All nodes
 * being animated should have this node as an ancestor.</param>
    </javadoc>
    <method type="constructor" name="PActivityScheduler" startLine="72" endLine="76" />
    <javadoc>
      <text>* Returns the node from which all activities will be attached.</text>
      <return>this scheduler's associated root node</return>
    </javadoc>
    <method type="PRoot" name="getRoot" startLine="83" endLine="85" />
    <javadoc>
      <text>* Adds the given activity to the scheduler if not already found.</text>
      <param>activity activity to be scheduled</param>
    </javadoc>
    <method type="void" name="addActivity" startLine="92" endLine="94" />
    <javadoc>
      <text>* Add this activity to the scheduler. Sometimes it's useful to make sure
 * that an activity is run after all other activities have been run. To do
 * this set processLast to true when adding the activity.</text>
      <param>activity activity to be scheduled</param>
      <param>processLast whether or not this activity should be performed after
 * all other scheduled activities</param>
    </javadoc>
    <method type="void" name="addActivity" startLine="105" endLine="124">
      <scope startLine="106" endLine="108" />
      <scope startLine="112" endLine="114" />
      <scope startLine="115" endLine="117" />
      <scope startLine="121" endLine="123" />
    </method>
    <javadoc>
      <text>* Removes the given activity from the scheduled activities. Does nothing if
 * it's not found.</text>
      <param>activity the activity to be removed</param>
    </javadoc>
    <method type="void" name="removeActivity" startLine="132" endLine="143">
      <scope startLine="133" endLine="135" />
      <scope startLine="140" endLine="142" />
    </method>
    <javadoc>
      <text>* Removes all activities from the list of scheduled activities.</text>
    </javadoc>
    <method type="void" name="removeAllActivities" startLine="148" endLine="152" />
    <javadoc>
      <text>* Returns a reference to the current activities list. Handle with care.</text>
      <return>reference to the current activities list.</return>
    </javadoc>
    <method type="List" name="getActivitiesReference" startLine="159" endLine="161" />
    <javadoc>
      <text>* Process all scheduled activities for the given time. Each activity is
 * given one "step", equivalent to one frame of animation.</text>
      <param>currentTime the current unix time in milliseconds.</param>
    </javadoc>
    <method type="void" name="processActivities" startLine="169" endLine="179">
      <declaration type="int" name="size" />
      <scope startLine="171" endLine="178">
        <scope startLine="173" endLine="176">
          <declaration type="PActivity" name="each" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Return true if any of the scheduled activities are animations.</text>
      <return>true if any of the scheduled activities are animations.</return>
    </javadoc>
    <method type="boolean" name="getAnimating" startLine="186" endLine="196">
      <scope startLine="187" endLine="194">
        <scope startLine="189" endLine="192">
          <declaration type="PActivity" name="each" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Starts the current activity timer. Multiple calls to this method are
 * ignored.</text>
    </javadoc>
    <method type="void" name="startActivityTimer" startLine="202" endLine="204" />
    <javadoc>
      <text>* Stops the current activity timer.</text>
    </javadoc>
    <method type="void" name="stopActivityTimer" startLine="209" endLine="211" />
    <javadoc>
      <text>* Returns the activity timer. Creating it if necessary.</text>
      <return>a Timer instance.</return>
    </javadoc>
    <method type="Timer" name="getActivityTimer" startLine="218" endLine="227">
      <scope startLine="219" endLine="225">
        <method type="void" name="actionPerformed" startLine="221" endLine="223" />
      </scope>
    </method>
  </class>
</source>
