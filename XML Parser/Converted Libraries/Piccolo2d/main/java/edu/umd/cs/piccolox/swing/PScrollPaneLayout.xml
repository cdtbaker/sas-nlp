<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.swing">
  <import name="java.awt.Container" />
  <import name="java.awt.Dimension" />
  <import name="java.awt.Insets" />
  <import name="java.awt.Rectangle" />
  <import name="javax.swing.JScrollPane" />
  <import name="javax.swing.ScrollPaneLayout" />
  <import name="javax.swing.border.Border" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <class name="PScrollPaneLayout" extends="ScrollPaneLayout" startLine="42">
    <javadoc>
      <text>* A subclass of ScrollPaneLayout that looks at the Viewport for sizing
 * information rather than View. Also queries the Viewport for sizing
 * information after each decision about scrollbar visiblity.</text>
      <author>Lance Good</author>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* MODIFIED FROM javax.swing.ScrollPaneLayout.layoutContainer.
 * This is largely the same as ScrollPaneLayout.layoutContainer but obtains
 * the preferred view size from the viewport rather than directly from the
 * view so the viewport can get the preferred size from the PScrollDirector</text>
      <param>parent the Container to lay out</param>
    </javadoc>
    <method type="void" name="layoutContainer" startLine="61" endLine="317">
      <scope startLine="63" endLine="65" />
      <declaration type="JScrollPane" name="scrollPane" />
      <declaration type="Rectangle" name="availR" />
      <declaration type="Insets" name="insets" />
      <declaration type="boolean" name="leftToRight" />
      <declaration type="Rectangle" name="colHeadR" />
      <scope startLine="89" endLine="94">
        <declaration type="int" name="colHeadHeight" />
      </scope>
      <declaration type="Rectangle" name="rowHeadR" />
      <scope startLine="103" endLine="114">
        <declaration type="int" name="rowHeadWidth" />
        <scope startLine="107" endLine="110" />
        <scope startLine="111" endLine="113" />
      </scope>
      <declaration type="Border" name="viewportBorder" />
      <declaration type="Insets" name="vpbInsets" />
      <scope startLine="122" endLine="128" />
      <scope startLine="129" endLine="131" />
      <declaration type="Dimension" name="extentSize" />
      <declaration type="PBounds" name="cameraBounds" />
      <declaration type="Dimension" name="viewPrefSize" />
      <declaration type="Rectangle" name="vsbR" />
      <declaration type="boolean" name="vsbNeeded" />
      <scope startLine="164" endLine="166" />
      <scope startLine="167" endLine="169" />
      <scope startLine="170" endLine="173">
        <comment>vsbPolicy == VERTICAL_SCROLLBAR_AS_NEEDED</comment>
      </scope>
      <scope startLine="175" endLine="183">
        <comment>LEG: Modification because the view's preferred size needs to</comment>
        <comment>be recomputed because the extent may have changed</comment>
      </scope>
      <declaration type="Rectangle" name="hsbR" />
      <declaration type="boolean" name="hsbNeeded" />
      <scope startLine="192" endLine="194" />
      <scope startLine="195" endLine="197" />
      <scope startLine="198" endLine="200">
        <comment>hsbPolicy == HORIZONTAL_SCROLLBAR_AS_NEEDED</comment>
      </scope>
      <scope startLine="202" endLine="227">
        <scope startLine="212" endLine="226">
          <scope startLine="223" endLine="225" />
        </scope>
        <comment>If we added the horizontal scrollbar then we've implicitly
 reduced the vertical space available to the viewport. As a
 consequence we may have to add the vertical scrollbar, if that
 hasn't been done so already. Ofcourse we don't bother with any of
 this if the vsbPolicy is NEVER.</comment>
        <comment>LEG: Modification because the view's preferred size needs to</comment>
        <comment>be recomputed because the extent may have changed</comment>
      </scope>
      <scope startLine="235" endLine="237" />
      <scope startLine="254" endLine="256" />
      <scope startLine="258" endLine="260" />
      <scope startLine="262" endLine="270">
        <scope startLine="263" endLine="266" />
        <scope startLine="267" endLine="269" />
      </scope>
      <scope startLine="272" endLine="280">
        <scope startLine="273" endLine="276" />
        <scope startLine="277" endLine="279" />
      </scope>
      <scope startLine="282" endLine="289">
        <scope startLine="283" endLine="285" />
        <scope startLine="286" endLine="288" />
      </scope>
      <scope startLine="291" endLine="298">
        <scope startLine="292" endLine="294" />
        <scope startLine="295" endLine="297" />
      </scope>
      <scope startLine="300" endLine="307">
        <scope startLine="301" endLine="303" />
        <scope startLine="304" endLine="306" />
      </scope>
      <scope startLine="309" endLine="316">
        <scope startLine="310" endLine="312" />
        <scope startLine="313" endLine="315" />
      </scope>
      <comment>Sync the (now obsolete) policy fields with the JScrollPane.</comment>
      <comment>Get the scrollPane's orientation.</comment>
      <comment>If there's a visible column header remove the space it needs from the
 top of availR. The column header is treated as if it were fixed
 height, arbitrary width.</comment>
      <comment>If there's a visible row header remove the space it needs from the
 left or right of availR. The row header is treated as if it were
 fixed width, arbitrary height.</comment>
      <comment>If there's a JScrollPane.viewportBorder, remove the space it occupies
 for availR.</comment>
      <comment>At this point availR is the space available for the viewport and
 scrollbars. rowHeadR is correct except for its height and y and
 colHeadR is correct except for its width and x. Once we're through
 computing the dimensions of these three parts we can go back and set
 the dimensions of rowHeadR.height, rowHeadR.y, colHeadR.width,
 colHeadR.x and the bounds for the corners.

 We'll decide about putting up scrollbars by comparing the viewport
 views preferred size with the viewports extent size (generally just
 its size). Using the preferredSize is reasonable because layout
 proceeds top down - so we expect the viewport to be layed out next.
 And we assume that the viewports layout manager will give the view
 it's preferred size.</comment>
      <comment>LEG: Modification to ask the viewport for the view size rather</comment>
      <comment>than asking the view directly</comment>
      <comment>If there's a vertical scrollbar and we need one, allocate space for
 it (we'll make it visible later). A vertical scrollbar is considered
 to be fixed width, arbitrary height.</comment>
      <comment>If there's a horizontal scrollbar and we need one, allocate space for
 it (we'll make it visible later). A horizontal scrollbar is
 considered to be fixed height, arbitrary width.</comment>
      <comment>Set the size of the viewport first, and then recheck the Scrollable
 methods. Some components base their return values for the Scrollable
 methods on the size of the Viewport, so that if we don't ask after
 resetting the bounds we may have gotten the wrong answer.</comment>
      <comment>We now have the final size of the viewport: availR. Now fixup the
 header and scrollbar widthsheights.</comment>
      <comment>Set the bounds of the remaining components. The scrollbars are made
 invisible if they're not needed.</comment>
    </method>
    <javadoc>
      <param>cameraBounds</param>
      <return />
    </javadoc>
    <method type="Dimension" name="getViewSize" startLine="323" endLine="332">
      <declaration type="Dimension" name="viewPrefSize" />
      <scope startLine="325" endLine="327" />
      <scope startLine="328" endLine="330" />
    </method>
    <javadoc>
      <param>availR</param>
      <return />
    </javadoc>
    <method type="Dimension" name="getExtentSize" startLine="338" endLine="347">
      <declaration type="Dimension" name="extentSize" />
      <scope startLine="340" endLine="342" />
      <scope startLine="343" endLine="345" />
    </method>
    <javadoc>
      <text>* Copied FROM javax.swing.ScrollPaneLayout.adjustForVSB.
 * This method is called from ScrollPaneLayout.layoutContainer and is
 * private in ScrollPaneLayout so it was copied here</text>
      <param>wantsVSB whether to account for vertical scrollbar</param>
      <param>available region to adjust</param>
      <param>vsbR vertical scroll bar region</param>
      <param>vpbInsets margin of vertical scroll bars</param>
      <param>leftToRight orientation of the text LTR or RTL</param>
    </javadoc>
    <method type="void" name="adjustForVSB" startLine="362" endLine="379">
      <declaration type="int" name="vsbWidth" />
      <scope startLine="364" endLine="375">
        <scope startLine="368" endLine="370" />
        <scope startLine="371" endLine="374" />
      </scope>
      <scope startLine="376" endLine="378" />
    </method>
    <javadoc>
      <text>* Copied FROM javax.swing.ScrollPaneLayout.adjustForHSB.
 * This method is called from ScrollPaneLayout.layoutContainer and is
 * private in ScrollPaneLayout so it was copied here</text>
      <param>wantsHSB whether to account for horizontal scrollbar</param>
      <param>available region to adjust</param>
      <param>hsbR vertical scroll bar region</param>
      <param>vpbInsets margin of the scroll bars</param>
    </javadoc>
    <method type="void" name="adjustForHSB" startLine="393" endLine="403">
      <declaration type="int" name="hsbHeight" />
      <scope startLine="395" endLine="399" />
      <scope startLine="400" endLine="402" />
    </method>
    <class name="UIResource" extends="PScrollPaneLayout" startLine="405">
      <implements name="javax.swing.plaf.UIResource" />
      <javadoc>
        <text>* The UI resource version of PScrollPaneLayout. It isn't clear why Swing
 * does this in ScrollPaneLayout but we'll do it here too just to be safe.</text>
      </javadoc>
      <javadoc />
      <declaration type="long" name="serialVersionUID" />
    </class>
  </class>
</source>
