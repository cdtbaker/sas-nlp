<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.util">
  <import name="java.awt.Color" />
  <import name="java.awt.Graphics" />
  <import name="java.awt.Graphics2D" />
  <import name="javax.swing.SwingUtilities" />
  <class name="PDebug" startLine="37">
    <javadoc>
      <text>* <b>PDebug</b> is used to set framework wide debugging flags.
 * <P></text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc>
      <text>* Set to true to display clip bounds boxes.</text>
    </javadoc>
    <declaration type="boolean" name="debugRegionManagement" />
    <javadoc>
      <text>* Set to true if you want to display common errors with painting and
 * threading.</text>
    </javadoc>
    <declaration type="boolean" name="debugPaintCalls" />
    <javadoc>
      <text>* Set to true to display frame rate in the console.</text>
    </javadoc>
    <declaration type="boolean" name="debugPrintFrameRate" />
    <javadoc>
      <text>* Set to true to display used memory in console.</text>
    </javadoc>
    <declaration type="boolean" name="debugPrintUsedMemory" />
    <javadoc>
      <text>* Displays bounding boxes around nodes. Used in PCamera.</text>
    </javadoc>
    <declaration type="boolean" name="debugBounds" />
    <javadoc>
      <text>* Displays a tint to all shapes within a bounding box.</text>
    </javadoc>
    <declaration type="boolean" name="debugFullBounds" />
    <javadoc>
      <text>* Whether to complain whenever common threading issues occur.</text>
    </javadoc>
    <declaration type="boolean" name="debugThreads" />
    <javadoc>
      <text>* How often in frames result info should be printed to the console.</text>
    </javadoc>
    <declaration type="int" name="printResultsFrameRate" />
    <declaration type="int" name="debugPaintColor" />
    <declaration type="long" name="framesProcessed" />
    <declaration type="long" name="startProcessingOutputTime" />
    <declaration type="long" name="startProcessingInputTime" />
    <declaration type="long" name="processOutputTime" />
    <declaration type="long" name="processInputTime" />
    <declaration type="boolean" name="processingOutput" />
    <method type="constructor" name="PDebug" startLine="80" endLine="82" />
    <javadoc>
      <text>* Generates a color for use while debugging.</text>
      <return>a color for use while debugging.</return>
    </javadoc>
    <method type="Color" name="getDebugPaintColor" startLine="89" endLine="92">
      <declaration type="int" name="color" />
    </method>
    <javadoc>
      <text>* Checks that process inputs is being doing from the Swing Dispatch Thread.</text>
    </javadoc>
    <method type="void" name="scheduleProcessInputs" startLine="97" endLine="101">
      <scope startLine="98" endLine="100" />
    </method>
    <javadoc>
      <text>* Ensures that painting is not invalidating paint regions and that it's
 * being called from the dispatch thread.</text>
    </javadoc>
    <method type="void" name="processRepaint" startLine="107" endLine="116">
      <scope startLine="108" endLine="111" />
      <scope startLine="113" endLine="115" />
    </method>
    <javadoc>
      <text>* Returns whether output is being processed.</text>
      <return>whether output is being processed</return>
    </javadoc>
    <method type="boolean" name="getProcessingOutput" startLine="123" endLine="125" />
    <javadoc>
      <text>* Records that processing of ouptut has begun.</text>
    </javadoc>
    <method type="void" name="startProcessingOutput" startLine="130" endLine="133" />
    <javadoc>
      <text>* Flags processing of output as finished. Updates all stats in the process.</text>
      <param>g graphics context in which processing has finished</param>
    </javadoc>
    <method type="void" name="endProcessingOutput" startLine="140" endLine="165">
      <scope startLine="144" endLine="156">
        <scope startLine="145" endLine="151" />
        <scope startLine="153" endLine="155" />
      </scope>
      <scope startLine="158" endLine="162">
        <declaration type="Graphics2D" name="g2" />
      </scope>
    </method>
    <javadoc>
      <text>* Records that processing of input has started.</text>
    </javadoc>
    <method type="void" name="startProcessingInput" startLine="170" endLine="172" />
    <javadoc>
      <text>* Records that processing of input has finished.</text>
    </javadoc>
    <method type="void" name="endProcessingInput" startLine="177" endLine="179" />
    <javadoc>
      <text>* Return how many frames are processed and painted per second. Note that
 * since piccolo doesn't paint continuously this rate will be slow unless
 * you are interacting with the system or have activities scheduled.</text>
      <return>frame rate achieved</return>
    </javadoc>
    <method type="double" name="getTotalFPS" startLine="188" endLine="195">
      <scope startLine="189" endLine="191" />
      <scope startLine="192" endLine="194" />
    </method>
    <javadoc>
      <text>* Return the frames per second used to process input events and activities.</text>
      <return># of frames per second that were allocated to processing input</return>
    </javadoc>
    <method type="double" name="getInputFPS" startLine="202" endLine="209">
      <scope startLine="203" endLine="205" />
      <scope startLine="206" endLine="208" />
    </method>
    <javadoc>
      <text>* Return the frames per seconds used to paint graphics to the screen.</text>
      <return># of frames per second that were used up to processing output</return>
    </javadoc>
    <method type="double" name="getOutputFPS" startLine="216" endLine="223">
      <scope startLine="217" endLine="219" />
      <scope startLine="220" endLine="222" />
    </method>
    <javadoc>
      <text>* Return the number of frames that have been processed since the last time
 * resetFPSTiming was called.</text>
      <return>total number of frames processed</return>
    </javadoc>
    <method type="long" name="getFramesProcessed" startLine="231" endLine="233" />
    <javadoc>
      <text>* Reset the variables used to track FPS. If you reset seldom they you will
 * get good average FPS values, if you reset more often only the frames
 * recorded after the last reset will be taken into consideration.</text>
    </javadoc>
    <method type="void" name="resetFPSTiming" startLine="240" endLine="244" />
    <javadoc>
      <text>* Returns an approximation of the amount of memory that is being used.
 * Not that this call might affecting timings.</text>
      <return>approximate # of bytes of memory used</return>
    </javadoc>
    <method type="long" name="getApproximateUsedMemory" startLine="253" endLine="259">
      <declaration type="long" name="totalMemory" />
      <declaration type="long" name="free" />
    </method>
  </class>
</source>
