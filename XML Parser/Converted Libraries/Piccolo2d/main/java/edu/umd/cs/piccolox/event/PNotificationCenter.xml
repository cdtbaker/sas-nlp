<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.event">
  <import name="java.lang.ref.ReferenceQueue" />
  <import name="java.lang.ref.WeakReference" />
  <import name="java.lang.reflect.InvocationTargetException" />
  <import name="java.lang.reflect.Method" />
  <import name="java.lang.reflect.Modifier" />
  <import name="java.util.ArrayList" />
  <import name="java.util.HashMap" />
  <import name="java.util.Iterator" />
  <import name="java.util.LinkedList" />
  <import name="java.util.List" />
  <import name="java.util.Map" />
  <class name="PNotificationCenter" startLine="50">
    <javadoc>
      <text>* <b>PNotificationCenter</b> provides a way for objects that don't know about
 * each other to communicate. It receives PNotification objects and broadcasts
 * them to all interested listeners. Unlike standard Java events, the event
 * listeners don't need to know about the event source, and the event source
 * doesn't need to maintain the list of listeners.
 * <p>
 * Listeners of the notifications center are held by weak references. So the
 * notification center will not create garbage collection problems as standard
 * java event listeners do.
 * </p></text>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc>
      <text>* Used as a place holder for null names or objects.</text>
    </javadoc>
    <declaration type="Object" name="NULL_MARKER" />
    <javadoc>
      <text>* Singleton instance of the notification center.</text>
    </javadoc>
    <declaration type="PNotificationCenter" name="DEFAULT_CENTER" />
    <javadoc>
      <text>* A map of listeners keyed by NotificationKey objects.</text>
    </javadoc>
    <declaration type="HashMap" name="listenersMap" />
    <javadoc>
      <text>* A queue of NotificationKeys that are available to be garbage collected.</text>
    </javadoc>
    <declaration type="ReferenceQueue" name="keyQueue" />
    <javadoc>
      <text>* Singleton accessor for the PNotificationCenter.</text>
      <return>singleton instance of PNotificationCenter</return>
    </javadoc>
    <method type="PNotificationCenter" name="defaultCenter" startLine="82" endLine="87">
      <scope startLine="83" endLine="85" />
    </method>
    <method type="constructor" name="PNotificationCenter" startLine="89" endLine="92" />
    <javadoc>
      <text>* Registers the 'listener' to receive notifications with the name
 * 'notificationName' and/or containing 'object'. When a matching
 * notification is posted the callBackMethodName message will be sent to the
 * listener with a single PNotification argument. If notificationName is
 * null then the listener will receive all notifications with an object
 * matching 'object'. If 'object' is null the listener will receive all
 * notifications with the name 'notificationName'.</text>
      <param>listener object to be notified of notifications</param>
      <param>callbackMethodName method to be invoked on the listener</param>
      <param>notificationName name of notifications to filter on</param>
      <param>object source of notification messages that this listener is
 * interested in</param>
      <return>true if listener has been added</return>
    </javadoc>
    <method type="boolean" name="addListener" startLine="111" endLine="136">
      <declaration type="Object" name="name" />
      <declaration type="Object" name="sanitizedObject" />
      <declaration type="Method" name="method" />
      <scope startLine="118" endLine="120" />
      <declaration type="NotificationKey" name="key" />
      <declaration type="NotificationTarget" name="notificationTarget" />
      <declaration type="List" name="list" />
      <scope startLine="126" endLine="129" />
      <scope startLine="131" endLine="133" />
    </method>
    <method type="Method" name="extractCallbackMethod" startLine="138" endLine="155">
      <declaration type="Method" name="method" />
      <scope startLine="140" endLine="144">
        <declaration type="Class[]" name="classes" />
      </scope>
      <scope startLine="145" endLine="147" />
      <declaration type="int" name="modifiers" />
      <scope startLine="150" endLine="152" />
    </method>
    <javadoc>
      <text>* Sanitizes the object reference by returning NULL_MARKER if the object is
 * null.</text>
      <param>object object to sanitize</param>
      <return>NULL_MARKER is object is null, otherwise object</return>
    </javadoc>
    <method type="Object" name="nullify" startLine="165" endLine="171">
      <scope startLine="166" endLine="168" />
    </method>
    <javadoc>
      <text>* Removes the listener so that it no longer receives notfications from this
 * notification center.</text>
      <param>listener listener to be removed from this notification center</param>
    </javadoc>
    <method type="void" name="removeListener" startLine="183" endLine="190">
      <declaration type="Iterator" name="i" />
      <scope startLine="187" endLine="189" />
    </method>
    <javadoc>
      <text>* Unregisters the listener as a listener for the specified kind of
 * notification.
 * If listener is null all listeners matching notificationName and object
 * are removed.
 * If notificationName is null the listener will be removed from all
 * notifications containing the object.
 * If the object is null then the listener will be removed from all
 * notifications matching notficationName.</text>
      <param>listener listener to be removed</param>
      <param>notificationName name of notifications or null for all</param>
      <param>object notification source or null for all</param>
    </javadoc>
    <method type="void" name="removeListener" startLine="209" endLine="217">
      <declaration type="List" name="keys" />
      <declaration type="Iterator" name="it" />
      <scope startLine="214" endLine="216" />
    </method>
    <javadoc>
      <text>* Post a new notification with notificationName and object. The object is
 * typically the object posting the notification. The object may be null.</text>
      <param>notificationName name of notification to post</param>
      <param>object source of the notification, null signifies unknown</param>
    </javadoc>
    <method type="void" name="postNotification" startLine="230" endLine="232" />
    <javadoc>
      <text>* Creates a notification with the name notificationName, associates it with
 * the object, and posts it to this notification center. The object is
 * typically the object posting the notification. It may be null.</text>
      <param>notificationName name of notification being posted</param>
      <param>object source of the notification, may be null</param>
      <param>properties properties associated with the notification</param>
    </javadoc>
    <method type="void" name="postNotification" startLine="243" endLine="245" />
    <javadoc>
      <text>* Post the notification to this notification center. Most often clients
 * will instead use one of this classes convenience postNotifcations
 * methods.</text>
      <param>notification notification to be dispatched to appropriate
 * listeners</param>
    </javadoc>
    <method type="void" name="postNotification" startLine="255" endLine="276">
      <declaration type="List" name="mergedListeners" />
      <declaration type="Object" name="name" />
      <declaration type="Object" name="object" />
      <scope startLine="261" endLine="265" />
      <scope startLine="266" endLine="268" />
      <scope startLine="269" endLine="271" />
    </method>
    <javadoc>
      <text>* Adds all listeners that are registered to receive notifications to the
 * end of the list provided.</text>
      <param>notificationName name of the notification being emitted</param>
      <param>object source of the notification</param>
      <param>listeners list to append listeners to</param>
    </javadoc>
    <method type="void" name="fillWithMatchingListeners" startLine="286" endLine="292">
      <declaration type="Object" name="key" />
      <declaration type="List" name="globalListeners" />
      <scope startLine="289" endLine="291" />
    </method>
    <method type="void" name="dispatchNotifications" startLine="294" endLine="307">
      <declaration type="NotificationTarget" name="listener" />
      <declaration type="Iterator" name="listenerIterator" />
      <scope startLine="298" endLine="306">
        <scope startLine="300" endLine="302" />
        <scope startLine="303" endLine="305" />
      </scope>
    </method>
    <method type="void" name="notifyListener" startLine="309" endLine="321">
      <scope startLine="310" endLine="314">
        <declaration type="Object[]" name="objects" />
      </scope>
      <scope startLine="315" endLine="317" />
      <scope startLine="318" endLine="320" />
    </method>
    <javadoc>
      <text>* Returns a list of keys with the given name and object.</text>
      <param>name name of key</param>
      <param>object key associated with the object</param>
      <return>list of matching keys</return>
    </javadoc>
    <method type="List" name="matchingKeys" startLine="331" endLine="344">
      <declaration type="List" name="result" />
      <declaration type="NotificationKey" name="searchKey" />
      <declaration type="Iterator" name="it" />
      <scope startLine="336" endLine="341">
        <declaration type="NotificationKey" name="key" />
        <scope startLine="338" endLine="340" />
      </scope>
    </method>
    <javadoc>
      <text>* Removes the given listener from receiving notifications with the given
 * key.</text>
      <param>listener the listener being unregistered</param>
      <param>key the key that identifies the listener</param>
    </javadoc>
    <method type="void" name="removeListener" startLine="353" endLine="375">
      <scope startLine="354" endLine="357" />
      <declaration type="List" name="list" />
      <scope startLine="360" endLine="362" />
      <declaration type="Iterator" name="it" />
      <scope startLine="365" endLine="370">
        <declaration type="Object" name="observer" />
        <scope startLine="367" endLine="369" />
      </scope>
      <scope startLine="372" endLine="374" />
    </method>
    <javadoc>
      <text>* Iterates over available keys in the key queue and removes the queue from
 * the listener map.</text>
    </javadoc>
    <method type="void" name="processKeyQueue" startLine="381" endLine="386">
      <declaration type="NotificationKey" name="key" />
      <scope startLine="383" endLine="385" />
    </method>
    <class name="NotificationKey" extends="WeakReference" startLine="388">
      <javadoc>
        <text>* Represents a notification type from a particular object.</text>
      </javadoc>
      <declaration type="Object" name="name" />
      <declaration type="int" name="hashCode" />
      <javadoc>
        <text>* Creates a notification key with the provided name associated to the
 * object given.</text>
        <param>name name of notification</param>
        <param>object associated object</param>
      </javadoc>
      <method type="constructor" name="NotificationKey" startLine="402" endLine="406" />
      <javadoc>
        <text>* Creates a notification key with the provided name associated with the
 * provided object.</text>
        <param>name name of notification</param>
        <param>object associated object</param>
        <param>queue ReferenceQueue in which this NotificationKey will be
 * appended once it has been cleared to be garbage collected</param>
      </javadoc>
      <method type="constructor" name="NotificationKey" startLine="417" endLine="421" />
      <javadoc>
        <text>* Returns name of notification this key represents.</text>
        <return>name of notification</return>
      </javadoc>
      <method type="Object" name="name" startLine="428" endLine="430" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="int" name="hashCode" startLine="433" endLine="435" />
      <javadoc>
        <text>* Two keys are equal if they have the same name and are associated with
 * the same object and conform to all other equals rules.</text>
        <param>anObject object being tested for equivalence to this
 * NotificationKey</param>
        <return>true if this object is logically equivalent to the one passed
 * in</return>
      </javadoc>
      <method type="boolean" name="equals" startLine="447" endLine="465">
        <scope startLine="448" endLine="450" />
        <scope startLine="452" endLine="454" />
        <declaration type="NotificationKey" name="key" />
        <scope startLine="458" endLine="460" />
        <declaration type="Object" name="object" />
      </method>
      <javadoc>
        <text>* Returns a nice string representation of this notification key.</text>
        <return>string representation of this notification key</return>
      </javadoc>
      <method type="String" name="toString" startLine="472" endLine="474" />
      <class name="NotificationTarget" extends="WeakReference" startLine="477">
        <javadoc>
          <text>* A NotificationTarget is a method on a particular object that can be
 * invoked.</text>
        </javadoc>
        <javadoc>
          <text>* Cached hashcode value computed at construction time.</text>
        </javadoc>
        <declaration type="int" name="hashCode" />
        <javadoc>
          <text>* Method to be invoked on the object.</text>
        </javadoc>
        <declaration type="Method" name="method" />
        <javadoc>
          <text>* Creates a notification target representing the method on the
 * particular object provided.</text>
          <param>object object on which method can be invoked</param>
          <param>method method to be invoked</param>
        </javadoc>
        <method type="constructor" name="NotificationTarget" startLine="495" endLine="499" />
        <javadoc>
          <text>* Returns the method that will be invoked on the listener object.</text>
          <return>method to be invoked with notification is to be dispatched</return>
        </javadoc>
        <method type="Method" name="getMethod" startLine="506" endLine="508" />
        <javadoc>
          <text>* Returns hash code for this notification target.</text>
          <return>hash code</return>
        </javadoc>
        <method type="int" name="hashCode" startLine="515" endLine="517" />
        <javadoc>
          <text>* Returns true if this object is logically equivalent to the one passed
 * in. For this to happen they must have the same method and object.</text>
          <param>object object being tested for logical equivalency to this one</param>
          <return>true if logically equivalent</return>
        </javadoc>
        <method type="boolean" name="equals" startLine="527" endLine="544">
          <scope startLine="528" endLine="530" />
          <scope startLine="532" endLine="534" />
          <declaration type="NotificationTarget" name="target" />
          <scope startLine="537" endLine="539" />
          <declaration type="Object" name="o" />
        </method>
        <javadoc>
          <text>* Returns a string representation of this NotificationTarget for
 * debugging purposes.</text>
          <return>string representation</return>
        </javadoc>
        <method type="String" name="toString" startLine="552" endLine="554" />
      </class>
    </class>
    <comment>****************************************************************</comment>
    <comment>Remove Listener Methods</comment>
    <comment>****************************************************************</comment>
    <comment>****************************************************************</comment>
    <comment>Post PNotification Methods</comment>
    <comment>****************************************************************</comment>
  </class>
</source>
