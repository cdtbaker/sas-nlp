<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.nodes">
  <import name="java.awt.Color" />
  <import name="java.awt.Dimension" />
  <import name="java.awt.Font" />
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.awt.geom.Rectangle2D" />
  <import name="javax.swing.JLabel" />
  <import name="javax.swing.plaf.basic.BasicHTML" />
  <import name="javax.swing.text.Position" />
  <import name="javax.swing.text.View" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <class name="PHtmlView" extends="PNode" startLine="46">
    <javadoc>
      <text>* PHtmlView is a Piccolo node for rendering HTML text. It uses a JLabel under
 * the hood so you have the same restrictions regarding HTML as you have when
 * using standard Swing components (HTML 3.2 + subset of CSS 1.0).</text>
      <since>1.3</since>
      <author>Chris Malley (cmal...@pixelzoom.com)</author>
      <author>Sam Reid</author>
      <author>Allain Lalonde</author>
    </javadoc>
    <javadoc>
      <text>* Default serial version UID.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Default font if not otherwise specified in the HTML text, 12 point
 * <code>"SansSerif"</code>.</text>
    </javadoc>
    <declaration type="Font" name="DEFAULT_FONT" />
    <javadoc>
      <text>* Default text color if not otherwise specified in the HTML text,
 * <code>Color.BLACK</code>.</text>
    </javadoc>
    <declaration type="Color" name="DEFAULT_TEXT_COLOR" />
    <javadoc>
      <text>* The property name that identifies a change of this node's font (see{@link #getFont getFont}). Both old and new value will be set in any
 * property change event.</text>
    </javadoc>
    <declaration type="String" name="PROPERTY_FONT" />
    <javadoc>
      <text>* The property code that identifies a change of this node's font (see{@link #getFont getFont}). Both old and new value will be set in any
 * property change event.</text>
    </javadoc>
    <declaration type="int" name="PROPERTY_CODE_FONT" />
    <javadoc>
      <text>* The property name that identifies a change of this node's HTML text (see{@link #getText getText}). Both old and new value will be set in any
 * property change event.</text>
    </javadoc>
    <declaration type="String" name="PROPERTY_TEXT" />
    <javadoc>
      <text>* The property code that identifies a change of this node's HTML text (see{@link #getText getText}). Both old and new value will be set in any
 * property change event.</text>
    </javadoc>
    <declaration type="int" name="PROPERTY_CODE_TEXT" />
    <javadoc>
      <text>* The property name that identifies a change of this node's HTML text color
 * (see {@link #getTextColor getTextColor}). Both old and new value will be set
 * in any property change event.</text>
    </javadoc>
    <declaration type="String" name="PROPERTY_TEXT_COLOR" />
    <javadoc>
      <text>* The property code that identifies a change of this node's HTML text color
 * (see {@link #getTextColor getTextColor}). Both old and new value will be set
 * in any property change event.</text>
    </javadoc>
    <declaration type="int" name="PROPERTY_CODE_TEXT_COLOR" />
    <javadoc>
      <text>* Underlying JLabel used to handle the rendering logic.</text>
    </javadoc>
    <declaration type="JLabel" name="label" />
    <javadoc>
      <text>* Object that encapsulates the HTML rendering logic.</text>
    </javadoc>
    <declaration type="View" name="htmlView" />
    <javadoc>
      <text>* Create an empty HTML text node with the default font and text color.</text>
    </javadoc>
    <method type="constructor" name="PHtmlView" startLine="126" endLine="128" />
    <javadoc>
      <text>* Create a HTML text node with the specified HTML text and the default font
 * and text color.</text>
      <param>text HTML text for this HTML text node</param>
    </javadoc>
    <method type="constructor" name="PHtmlView" startLine="136" endLine="138" />
    <javadoc>
      <text>* Create a HTML text node with the specified HTML text, font, and text
 * color. The font and text color are used to render the HTML text if not
 * otherwise specified via CSS.</text>
      <param>text HTML text for this HTML text node</param>
      <param>font font for this HTML text node</param>
      <param>textColor text color for this HTML text node</param>
    </javadoc>
    <method type="constructor" name="PHtmlView" startLine="149" endLine="155" />
    <javadoc>
      <text>* Return the HTML text for this HTML text node.</text>
      <return>the HTML text for this HTML text node</return>
    </javadoc>
    <method type="String" name="getText" startLine="162" endLine="164" />
    <javadoc>
      <text>* Set the HTML text for this HTML text node to <code>text</code>.
 * <p>
 * This is a <b>bound</b> property.
 * </p></text>
      <param>text HTML text for this HTML text node</param>
    </javadoc>
    <method type="void" name="setText" startLine="175" endLine="188">
      <declaration type="String" name="oldText" />
      <scope startLine="178" endLine="180" />
      <scope startLine="182" endLine="187" />
    </method>
    <javadoc>
      <text>* Return the font for this HTML text node. This font is used to render the
 * HTML text if not otherwise specified via CSS. Defaults to{@link #DEFAULT_FONT}.</text>
      <return>the font for this HTML text node</return>
    </javadoc>
    <method type="Font" name="getFont" startLine="197" endLine="199" />
    <javadoc>
      <text>* Set the font for this HTML text node to <code>font</code>. This font is
 * used to render the HTML text if not otherwise specified via CSS.
 * <p>
 * This is a <b>bound</b> property.
 * </p></text>
      <param>font font for this HTML text node</param>
    </javadoc>
    <method type="void" name="setFont" startLine="211" endLine="216">
      <declaration type="Font" name="oldFont" />
    </method>
    <javadoc>
      <text>* Return the text color for this HTML text node. This text color is used to
 * render the HTML text if not otherwise specified via CSS. Defaults to{@link #DEFAULT_TEXT_COLOR}.</text>
      <return>the text color for this HTML text node</return>
    </javadoc>
    <method type="Color" name="getTextColor" startLine="225" endLine="227" />
    <javadoc>
      <text>* Set the text color for this HTML text node to <code>textColor</code>.
 * This text color is used to render the HTML text if not otherwise
 * specified via CSS.
 * This is a <b>bound</b> property.</text>
      <param>textColor text color for this HTML text node</param>
    </javadoc>
    <method type="void" name="setTextColor" startLine="238" endLine="243">
      <declaration type="Color" name="oldColor" />
    </method>
    <javadoc>
      <text>* Applies all properties to the underlying JLabel, creates an htmlView and
 * updates bounds.</text>
    </javadoc>
    <method type="void" name="update" startLine="249" endLine="259">
      <declaration type="String" name="htmlContent" />
      <scope startLine="251" endLine="253" />
    </method>
    <javadoc>
      <text>* Resizes the height to be as tall as its rendered html. Takes wrapping
 * into account.</text>
    </javadoc>
    <method type="void" name="fitHeightToHtmlContent" startLine="265" endLine="278">
      <scope startLine="266" endLine="277">
        <declaration type="float" name="wrapHeight" />
        <scope startLine="272" endLine="276" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="setBounds" startLine="281" endLine="285">
      <declaration type="boolean" name="boundsChanged" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="setBounds" startLine="288" endLine="292">
      <declaration type="boolean" name="boundsChanged" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}<p>
 * The HTML text is painted last, so it will appear on top of any child
 * nodes.
 * </p></text>
    </javadoc>
    <method type="void" name="paint" startLine="302" endLine="308">
      <declaration type="Graphics2D" name="g2" />
    </method>
    <javadoc>
      <text>* Return the address specified in the HTML link at the specified point in
 * this node's local coordinate system, if any.</text>
      <param>point point in this node's local coordinate system</param>
      <return>the address specified in the HTML link at the specified point in
 * this node's local coordinate system, or <code>null</code> if no
 * such HTML link exists</return>
    </javadoc>
    <method type="String" name="getLinkAddressAt" startLine="319" endLine="321" />
    <javadoc>
      <text>* Return the address specified in the HTML link at the specified x and y
 * coordinates in this node's local coordinate system, if any.</text>
      <param>x x coordinate in this node's local coordinate system</param>
      <param>y y coordinate in this node's local coordinate system</param>
      <return>the address specified in the HTML link at the specified x and y
 * coordinates in this node's local coordinate system, or
 * <code>null</code> if no such HTML link exists</return>
    </javadoc>
    <method type="String" name="getLinkAddressAt" startLine="333" endLine="369">
      <declaration type="int" name="position" />
      <declaration type="String" name="text" />
      <declaration type="String" name="address" />
      <declaration type="int" name="currentPos" />
      <scope startLine="341" endLine="366">
        <scope startLine="343" endLine="345" />
        <declaration type="int" name="tagStart" />
        <declaration type="int" name="tagEnd" />
        <scope startLine="350" endLine="352" />
        <declaration type="String" name="tag" />
        <scope startLine="360" endLine="362" />
        <scope startLine="363" endLine="365" />
      </scope>
    </method>
    <javadoc>
      <text>* Return the index into the raw text at the specified x and y coordinates
 * in this node's local coordinate system.</text>
      <param>x x coordinate in this node's local coordinate system</param>
      <param>y y coordinate in this node's local coordinate system</param>
      <return>the index into the raw text at the specified x and y coordinates
 * in this node's local coordinate system</return>
    </javadoc>
    <method type="int" name="pointToModelIndex" startLine="380" endLine="383">
      <declaration type="Position.Bias[]" name="biasReturn" />
    </method>
    <javadoc>
      <text>* Starting from the startPos, find the position at which the given tag
 * ends. Returns <code>-1</code> if the end of the string was encountered
 * before the end of the tag was encountered.</text>
      <param>text HTML text being searched</param>
      <param>startPos where in the string to start searching for ">"</param>
      <return>index after the ">" character</return>
    </javadoc>
    <method type="int" name="findTagEnd" startLine="394" endLine="414">
      <declaration type="int" name="currentPos" />
      <scope startLine="399" endLine="407">
        <scope startLine="400" endLine="402" />
        <scope startLine="403" endLine="405" />
      </scope>
      <scope startLine="409" endLine="411" />
    </method>
    <javadoc>
      <text>* Given a tag, extracts the value of the href attribute or returns null if
 * none was found.</text>
      <param>tag from which to extract the href value</param>
      <return>href value without quotes or <code>null</code> if not found</return>
    </javadoc>
    <method type="String" name="extractHref" startLine="423" endLine="435">
      <declaration type="int" name="currentPos" />
      <declaration type="String" name="href" />
      <scope startLine="428" endLine="433">
        <scope startLine="430" endLine="432" />
      </scope>
    </method>
    <javadoc>
      <text>* Starting at the character after the equal sign of an href=..., it extract
 * the value. Handles single, double, and no quotes.</text>
      <param>tag tag</param>
      <param>startPos start position</param>
      <return>value of href or null if not found.</return>
    </javadoc>
    <method type="String" name="extractHrefValue" startLine="445" endLine="474">
      <declaration type="int" name="currentPos" />
      <scope startLine="448" endLine="455">
        <declaration type="int" name="startHref" />
        <scope startLine="451" endLine="453" />
      </scope>
      <scope startLine="456" endLine="463">
        <declaration type="int" name="startHref" />
        <scope startLine="459" endLine="461" />
      </scope>
      <scope startLine="464" endLine="473">
        <declaration type="int" name="startHref" />
        <scope startLine="467" endLine="471">
          <scope startLine="468" endLine="470" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Given the position in a string returns whether it points to the equal
 * sign of an href attribute.</text>
      <param>tag html code of the tag</param>
      <param>equalPos the index of the assignment</param>
      <return>true if to left of assignment is href</return>
    </javadoc>
    <method type="boolean" name="isHrefAttributeAssignment" startLine="484" endLine="486" />
    <comment>public static final Font DEFAULT_FONT = new Font(Font.SANS_SERIF,</comment>
    <comment>Font.PLAIN, 12); jdk 1.6+</comment>
  </class>
</source>
