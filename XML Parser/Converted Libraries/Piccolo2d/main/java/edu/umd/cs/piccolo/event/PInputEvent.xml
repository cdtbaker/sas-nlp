<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.event">
  <import name="java.awt.Cursor" />
  <import name="java.awt.event.InputEvent" />
  <import name="java.awt.event.KeyEvent" />
  <import name="java.awt.event.MouseEvent" />
  <import name="java.awt.event.MouseWheelEvent" />
  <import name="java.awt.geom.Point2D" />
  <import name="javax.swing.SwingUtilities" />
  <import name="edu.umd.cs.piccolo.PCamera" />
  <import name="edu.umd.cs.piccolo.PComponent" />
  <import name="edu.umd.cs.piccolo.PInputManager" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.util.PDimension" />
  <import name="edu.umd.cs.piccolo.util.PPickPath" />
  <class name="PInputEvent" startLine="47">
    <javadoc>
      <text>* <b>PInputEvent</b> is used to notify PInputEventListeners of keyboard and
 * mouse input. It has methods for normal event properties such as event
 * modifier keys and event canvas location.
 * <P>
 * In addition is has methods to get the mouse position and delta in a variety
 * of coordinate systems.
 * <P>
 * Last of all it provides access to the dispatch manager that can be queried to
 * find the current mouse over, mouse focus, and keyboard focus.
 * <P></text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc>
      <text>* The underlying Swing Event.</text>
    </javadoc>
    <declaration type="InputEvent" name="inputEvent" />
    <javadoc>
      <text>* Path relating to the current mouse event.</text>
    </javadoc>
    <declaration type="PPickPath" name="pickPath" />
    <javadoc>
      <text>* Input manager responsible for the creation of this event.</text>
    </javadoc>
    <declaration type="PInputManager" name="inputManager" />
    <javadoc>
      <text>* Flag used to identify this event as handled.</text>
    </javadoc>
    <declaration type="boolean" name="handled" />
    <javadoc>
      <text>* Create an event with the given inputManager and based on the given swing
 * event.</text>
      <param>inputManager source of PInputEvent</param>
      <param>event underlying swing event</param>
    </javadoc>
    <method type="constructor" name="PInputEvent" startLine="82" endLine="85" />
    <javadoc>
      <text>* Changes the cursor to the one provided and stores it on the cursor stack
 * for later retrieval.</text>
      <param>cursor cursor to push on cursor stack</param>
    </javadoc>
    <method type="void" name="pushCursor" startLine="93" endLine="96">
      <declaration type="PComponent" name="component" />
    </method>
    <javadoc>
      <text>* Removes the top most cursor from the cursor stack and sets it as the
 * current cursor.</text>
    </javadoc>
    <method type="void" name="popCursor" startLine="102" endLine="105">
      <declaration type="PComponent" name="component" />
    </method>
    <javadoc>
      <text>* Return the bottom most camera that is currently painting. If you are
 * using internal cameras this may be different then what is returned by
 * getTopCamera.</text>
      <return>the current PickPath's bottom camera.</return>
    </javadoc>
    <method type="PCamera" name="getCamera" startLine="126" endLine="128" />
    <javadoc>
      <text>* Return the topmost camera this is painting. This is the camera associated
 * with the PCanvas that requested the current repaint.</text>
      <return>topmost camera on the pick path</return>
    </javadoc>
    <method type="PCamera" name="getTopCamera" startLine="136" endLine="138" />
    <javadoc>
      <text>* Get the canvas associated with the top camera. This is the canvas where
 * the originating swing event came from.</text>
      <return>component attached to the top camera of the current pick path</return>
    </javadoc>
    <method type="PComponent" name="getComponent" startLine="146" endLine="148" />
    <javadoc>
      <text>* Return the input manager that dispatched this event. You can use this
 * input manager to find the current mouse focus, mouse over, and key focus
 * nodes. You can also set a new key focus node.</text>
      <return>input manager that dispatched this event</return>
    </javadoc>
    <method type="PInputManager" name="getInputManager" startLine="157" endLine="159" />
    <javadoc>
      <text>* Return the PPickPath associated with this input event.</text>
      <return>pick path associated with this event (may be null)</return>
    </javadoc>
    <method type="PPickPath" name="getPath" startLine="166" endLine="168" />
    <javadoc>
      <text>* Sets the PIckPath associated with this mouse event.</text>
      <param>path path to associate with this mouse event</param>
    </javadoc>
    <method type="void" name="setPath" startLine="175" endLine="177" />
    <javadoc>
      <text>* Return the bottom node on the current pickpath, that is the picked node
 * furthest from the root node.</text>
      <return>the currently picked node of this mouse event</return>
    </javadoc>
    <method type="PNode" name="getPickedNode" startLine="185" endLine="190">
      <scope startLine="186" endLine="188" />
    </method>
    <javadoc>
      <text>* Returns the key code associated with a key event.</text>
      <return>key code associated with a key event</return>
    </javadoc>
    <method type="int" name="getKeyCode" startLine="201" endLine="207">
      <scope startLine="202" endLine="205">
        <declaration type="KeyEvent" name="e" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the character associated with a key event.</text>
      <return>char associated with a key event</return>
    </javadoc>
    <method type="char" name="getKeyChar" startLine="214" endLine="220">
      <scope startLine="215" endLine="218">
        <declaration type="KeyEvent" name="e" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the location on the keyboard from which the key stroke
 * originated.</text>
      <return>location on keyboard from which stroke originated.</return>
    </javadoc>
    <method type="int" name="getKeyLocation" startLine="228" endLine="234">
      <scope startLine="229" endLine="232">
        <declaration type="KeyEvent" name="e" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns whether the key event involves the action key.</text>
      <return>true if key involved is the action key</return>
    </javadoc>
    <method type="boolean" name="isActionKey" startLine="241" endLine="247">
      <scope startLine="242" endLine="245">
        <declaration type="KeyEvent" name="e" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the modifiers provided for the input event by swing.</text>
      <return>modifier flags for the input event</return>
    </javadoc>
    <method type="int" name="getModifiers" startLine="254" endLine="259">
      <scope startLine="255" endLine="257" />
    </method>
    <javadoc>
      <text>* Returns the extended modifiers provided for the input event by swing.</text>
      <return>extended modifies of input event</return>
    </javadoc>
    <method type="int" name="getModifiersEx" startLine="266" endLine="271">
      <scope startLine="267" endLine="269" />
    </method>
    <javadoc>
      <text>* Returns the click count of the mouse event.</text>
      <return>click count of mouse event</return>
    </javadoc>
    <method type="int" name="getClickCount" startLine="278" endLine="283">
      <scope startLine="279" endLine="281" />
    </method>
    <javadoc>
      <text>* Returns the time at which the event was emitted.</text>
      <return>time at which the vent was emitted</return>
    </javadoc>
    <method type="long" name="getWhen" startLine="290" endLine="295">
      <scope startLine="291" endLine="293" />
    </method>
    <javadoc>
      <text>* Returns whether the alt key is currently down.</text>
      <return>true if alt key is down</return>
    </javadoc>
    <method type="boolean" name="isAltDown" startLine="302" endLine="307">
      <scope startLine="303" endLine="305" />
    </method>
    <javadoc>
      <text>* Returns whether the control key is currently down.</text>
      <return>true if control key is down</return>
    </javadoc>
    <method type="boolean" name="isControlDown" startLine="314" endLine="319">
      <scope startLine="315" endLine="317" />
    </method>
    <javadoc>
      <text>* Returns whether the meta key is currently down.</text>
      <return>true if meta key is down</return>
    </javadoc>
    <method type="boolean" name="isMetaDown" startLine="326" endLine="331">
      <scope startLine="327" endLine="329" />
    </method>
    <javadoc>
      <text>* Returns whether the shift key is currently down.</text>
      <return>true if shift key is down</return>
    </javadoc>
    <method type="boolean" name="isShiftDown" startLine="338" endLine="343">
      <scope startLine="339" endLine="341" />
    </method>
    <javadoc>
      <text>* Returns whether the mouse event involves the left mouse button.</text>
      <return>true if left mouse button is involved the mouse event</return>
    </javadoc>
    <method type="boolean" name="isLeftMouseButton" startLine="350" endLine="355">
      <scope startLine="351" endLine="353" />
    </method>
    <javadoc>
      <text>* Returns whether the mouse event involves the middle mouse button.</text>
      <return>true if middle mouse button is involved the mouse event</return>
    </javadoc>
    <method type="boolean" name="isMiddleMouseButton" startLine="362" endLine="367">
      <scope startLine="363" endLine="365" />
    </method>
    <javadoc>
      <text>* Returns whether the mouse event involves the right mouse button.</text>
      <return>true if right mouse button is involved the mouse event</return>
    </javadoc>
    <method type="boolean" name="isRightMouseButton" startLine="374" endLine="379">
      <scope startLine="375" endLine="377" />
    </method>
    <javadoc>
      <text>* Return true if another event handler has already handled this event.
 * Event handlers should use this as a hint before handling the event
 * themselves and possibly reject events that have already been handled.</text>
      <return>true if event has been marked as handled</return>
    </javadoc>
    <method type="boolean" name="isHandled" startLine="388" endLine="390" />
    <javadoc>
      <text>* Set that this event has been handled by an event handler. This is a
 * relaxed for of consuming events. The event will continue to get
 * dispatched to event handlers even after it is marked as handled, but
 * other event handlers that might conflict are expected to ignore events
 * that have already been handled.</text>
      <param>handled whether the event is marked</param>
    </javadoc>
    <method type="void" name="setHandled" startLine="401" endLine="403" />
    <javadoc>
      <text>* Returns the mouse button value of the underlying mouse event.</text>
      <return>button value of underlying mouse event</return>
    </javadoc>
    <method type="int" name="getButton" startLine="410" endLine="415">
      <scope startLine="411" endLine="413" />
    </method>
    <javadoc>
      <text>* Returns the current value of the wheel rotation on Mouse Wheel Rotation
 * events.</text>
      <return>wheel rotation value</return>
    </javadoc>
    <method type="int" name="getWheelRotation" startLine="423" endLine="428">
      <scope startLine="424" endLine="426" />
    </method>
    <javadoc>
      <text>* Returns the underlying swing event that this PInputEvent is wrapping.</text>
      <return>underlying swing event</return>
    </javadoc>
    <method type="InputEvent" name="getSourceSwingEvent" startLine="435" endLine="437" />
    <javadoc>
      <text>* Returns whether the underlying event is a KeyEvent.</text>
      <return>true if is key event</return>
    </javadoc>
    <method type="boolean" name="isKeyEvent" startLine="449" endLine="451" />
    <javadoc>
      <text>* Returns whether the underlying event is a MouseEvent.</text>
      <return>true if is mouse event</return>
    </javadoc>
    <method type="boolean" name="isMouseEvent" startLine="458" endLine="460" />
    <javadoc>
      <text>* Returns whether the underlying event is a Mouse Wheel Event.</text>
      <return>true if is a mouse wheel event</return>
    </javadoc>
    <method type="boolean" name="isMouseWheelEvent" startLine="468" endLine="470" />
    <javadoc>
      <text>* Returns whether the underlying event is a Focus Event.</text>
      <return>true if is focus event</return>
    </javadoc>
    <method type="boolean" name="isFocusEvent" startLine="477" endLine="479" />
    <javadoc>
      <text>* Returns whether the underlying event is a mouse entered or exited event.</text>
      <return>true if is a mouse entered or exited event</return>
    </javadoc>
    <method type="boolean" name="isMouseEnteredOrMouseExited" startLine="486" endLine="491">
      <scope startLine="487" endLine="489" />
    </method>
    <javadoc>
      <text>* Returns whether or not this event is a popup menu trigger event for the
 * platform. Must not be called if this event isn't a mouse event.
 * <p>
 * <b>Note</b>: Popup menus are triggered differently on different systems.
 * Therefore, <code>isPopupTrigger</code> should be checked in both
 * <code>mousePressed</code> and <code>mouseReleased</code> for proper
 * cross-platform functionality.</text>
      <return>boolean, true if this event triggers a popup menu for this
 * platform</return>
    </javadoc>
    <method type="boolean" name="isPopupTrigger" startLine="505" endLine="510">
      <scope startLine="506" endLine="508" />
    </method>
    <javadoc>
      <text>* Return the mouse position in PCanvas coordinates.</text>
      <return>mouse position in PCanvas coordinates</return>
    </javadoc>
    <method type="Point2D" name="getCanvasPosition" startLine="523" endLine="525" />
    <javadoc>
      <text>* Return the delta between the last and current mouse position in PCanvas
 * coordinates.</text>
      <return>delta between last and current mouse position as measured by the
 * PCanvas</return>
    </javadoc>
    <method type="PDimension" name="getCanvasDelta" startLine="534" endLine="538">
      <declaration type="Point2D" name="last" />
      <declaration type="Point2D" name="current" />
    </method>
    <javadoc>
      <text>* Return the mouse position relative to a given node on the pick path.</text>
      <param>nodeOnPath node on the current PPickPath</param>
      <return>mouse position relative to the provided node on pick path</return>
    </javadoc>
    <method type="Point2D" name="getPositionRelativeTo" startLine="547" endLine="553">
      <scope startLine="548" endLine="550" />
      <declaration type="Point2D" name="r" />
    </method>
    <javadoc>
      <text>* Return the delta between the last and current mouse positions relative to
 * a given node on the pick path.</text>
      <param>nodeOnPath node from which to measure</param>
      <return>delta between current mouse position and a given node on the pick
 * path</return>
    </javadoc>
    <method type="PDimension" name="getDeltaRelativeTo" startLine="563" endLine="569">
      <scope startLine="564" endLine="566" />
      <declaration type="PDimension" name="r" />
    </method>
    <javadoc>
      <text>* Return the mouse position transformed through the view transform of the
 * bottom camera.</text>
      <return>mouse position as measured by the bottom camera</return>
    </javadoc>
    <method type="Point2D" name="getPosition" startLine="577" endLine="584">
      <scope startLine="578" endLine="580" />
      <declaration type="Point2D" name="r" />
    </method>
    <javadoc>
      <text>* Return the delta between the last and current mouse positions transformed
 * through the view transform of the bottom camera.</text>
      <return>delta between last and current mouse position as measured by the
 * bottom camera</return>
    </javadoc>
    <method type="PDimension" name="getDelta" startLine="593" endLine="600">
      <scope startLine="594" endLine="596" />
      <declaration type="PDimension" name="r" />
    </method>
    <javadoc>
      <text>* Returns a string representation of this object for debugging purposes.</text>
      <return>string representation of this object</return>
    </javadoc>
    <method type="String" name="toString" startLine="607" endLine="618">
      <declaration type="StringBuffer" name="result" />
      <scope startLine="612" endLine="614" />
    </method>
    <comment>****************************************************************</comment>
    <comment>Accessing Picked Objects - Methods to access the objects associated</comment>
    <comment>with this event.</comment>
    <comment><p></comment>
    <comment>Cameras can view layers that have</comment>
    <comment>other cameras on them, so events may be arriving through a stack</comment>
    <comment>of many cameras. The getCamera() method returns the bottommost</comment>
    <comment>camera on that stack. The getTopCamera method returns the topmost</comment>
    <comment>camera on that stack, this is also the camera through which the</comment>
    <comment>event originated.</comment>
    <comment>****************************************************************</comment>
    <comment>****************************************************************</comment>
    <comment>Basics</comment>
    <comment>****************************************************************</comment>
    <comment>****************************************************************</comment>
    <comment>Classification - Methods to distinguish between mouse and key</comment>
    <comment>events.</comment>
    <comment>****************************************************************</comment>
    <comment>****************************************************************</comment>
    <comment>Coordinate Systems - Methods for getting mouse location data</comment>
    <comment>These methods are only designed for use with PInputEvents that</comment>
    <comment>return true to the isMouseEvent method.</comment>
    <comment>****************************************************************</comment>
  </class>
</source>
