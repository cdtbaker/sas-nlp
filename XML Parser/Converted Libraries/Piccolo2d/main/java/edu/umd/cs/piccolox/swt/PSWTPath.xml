<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.swt">
  <import name="java.awt.BasicStroke" />
  <import name="java.awt.Color" />
  <import name="java.awt.Paint" />
  <import name="java.awt.Shape" />
  <import name="java.awt.geom.AffineTransform" />
  <import name="java.awt.geom.Arc2D" />
  <import name="java.awt.geom.Ellipse2D" />
  <import name="java.awt.geom.GeneralPath" />
  <import name="java.awt.geom.Line2D" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.awt.geom.Rectangle2D" />
  <import name="java.awt.geom.RoundRectangle2D" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.nodes.PPath" />
  <import name="edu.umd.cs.piccolo.util.PAffineTransform" />
  <import name="edu.umd.cs.piccolo.util.PAffineTransformException" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <class name="PSWTPath" extends="PNode" startLine="51">
    <javadoc>
      <text>* <b>PSWTPath</b> is a wrapper around a java.awt.geom.GeneralPath, with
 * workarounds for drawing shapes in SWT where necessary.</text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* The property name that identifies a change of this node's path. In any
 * property change event the new value will be a reference to this node's
 * path, but old value will always be null.</text>
    </javadoc>
    <declaration type="String" name="PROPERTY_SHAPE" />
    <declaration type="double" name="BOUNDS_TOLERANCE" />
    <declaration type="Rectangle2D.Float" name="TEMP_RECTANGLE" />
    <declaration type="RoundRectangle2D.Float" name="TEMP_ROUNDRECTANGLE" />
    <declaration type="Ellipse2D.Float" name="TEMP_ELLIPSE" />
    <declaration type="Color" name="DEFAULT_STROKE_PAINT" />
    <declaration type="BasicStroke" name="BASIC_STROKE" />
    <declaration type="float" name="PEN_WIDTH" />
    <declaration type="Paint" name="strokePaint" />
    <declaration type="boolean" name="updatingBoundsFromPath" />
    <declaration type="Shape" name="origShape" />
    <declaration type="Shape" name="shape" />
    <declaration type="PAffineTransform" name="internalXForm" />
    <declaration type="AffineTransform" name="inverseXForm" />
    <declaration type="double[]" name="shapePts" />
    <javadoc>
      <text>* Creates a path representing the rectangle provided.</text>
      <param>x left of rectangle</param>
      <param>y top of rectangle</param>
      <param>width width of rectangle</param>
      <param>height height of rectangle</param>
      <return>created rectangle</return>
    </javadoc>
    <method type="PSWTPath" name="createRectangle" startLine="96" endLine="101">
      <declaration type="PSWTPath" name="result" />
    </method>
    <javadoc>
      <text>* Creates a path representing the rounded rectangle provided.</text>
      <param>x left of rectangle</param>
      <param>y top of rectangle</param>
      <param>width width of rectangle</param>
      <param>height height of rectangle</param>
      <param>arcWidth width of the arc at the corners</param>
      <param>arcHeight height of arc at the corners</param>
      <return>created rounded rectangle</return>
    </javadoc>
    <method type="PSWTPath" name="createRoundRectangle" startLine="115" endLine="120">
      <declaration type="PSWTPath" name="result" />
    </method>
    <javadoc>
      <text>* Creates a path representing an ellipse that covers the rectangle
 * provided.</text>
      <param>x left of rectangle</param>
      <param>y top of rectangle</param>
      <param>width width of rectangle</param>
      <param>height height of rectangle</param>
      <return>created ellipse</return>
    </javadoc>
    <method type="PSWTPath" name="createEllipse" startLine="132" endLine="137">
      <declaration type="PSWTPath" name="result" />
    </method>
    <javadoc>
      <text>* Creates a PPath for the poly-line for the given points.</text>
      <param>points array of points for the point lines</param>
      <return>created poly-line for the given points</return>
    </javadoc>
    <method type="PSWTPath" name="createPolyline" startLine="146" endLine="151">
      <declaration type="PSWTPath" name="result" />
    </method>
    <javadoc>
      <text>* Creates a PPath for the poly-line for the given points.</text>
      <param>xp array of x components of the points of the poly-lines</param>
      <param>yp array of y components of the points of the poly-lines</param>
      <return>created poly-line for the given points</return>
    </javadoc>
    <method type="PSWTPath" name="createPolyline" startLine="161" endLine="166">
      <declaration type="PSWTPath" name="result" />
    </method>
    <javadoc>
      <text>* Creates an empty PSWTPath.</text>
    </javadoc>
    <method type="constructor" name="PSWTPath" startLine="171" endLine="173" />
    <javadoc>
      <text>* Creates an SWTPath in the given shape with the default paint and stroke.</text>
      <param>aShape the desired shape</param>
    </javadoc>
    <method type="constructor" name="PSWTPath" startLine="180" endLine="183" />
    <javadoc>
      <text>* Returns the paint to use when drawing the stroke of the shape.</text>
      <return>path's stroke paint</return>
    </javadoc>
    <method type="Paint" name="getStrokePaint" startLine="193" endLine="195" />
    <javadoc>
      <text>* Sets the paint to use when drawing the stroke of the shape.</text>
      <param>strokeColor new stroke color</param>
    </javadoc>
    <method type="void" name="setStrokeColor" startLine="202" endLine="207">
      <declaration type="Paint" name="old" />
    </method>
    <javadoc>
      <text>* Set the bounds of this path. This method works by scaling the path to fit
 * into the specified bounds. This normally works well, but if the specified
 * base bounds get too small then it is impossible to expand the path shape
 * again since all its numbers have tended to zero, so application code may
 * need to take this into consideration.</text>
      <param>x new left position of bounds</param>
      <param>y new top position of bounds</param>
      <param>width the new width of the bounds</param>
      <param>height the new height of the bounds</param>
    </javadoc>
    <method type="void" name="internalUpdateBounds" startLine="221" endLine="252">
      <scope startLine="222" endLine="224" />
      <scope startLine="225" endLine="227" />
      <declaration type="Rectangle2D" name="pathBounds" />
      <scope startLine="234" endLine="236" />
      <scope startLine="238" endLine="240" />
      <scope startLine="246" endLine="248" />
      <scope startLine="249" endLine="251" />
    </method>
    <javadoc>
      <text>* Returns true if path crosses the provided bounds. Takes visibility of
 * path into account.</text>
      <param>aBounds bounds being tested for intersection</param>
      <return>true if path visibly crosses bounds</return>
    </javadoc>
    <method type="boolean" name="intersects" startLine="261" endLine="280">
      <scope startLine="262" endLine="278">
        <declaration type="Rectangle2D" name="srcBounds" />
        <scope startLine="264" endLine="266" />
        <scope startLine="267" endLine="270" />
        <scope startLine="272" endLine="274" />
        <scope startLine="275" endLine="277" />
      </scope>
    </method>
    <javadoc>
      <text>* Recalculates the path's bounds by examining it's associated shape.</text>
    </javadoc>
    <method type="void" name="updateBoundsFromPath" startLine="285" endLine="304">
      <scope startLine="288" endLine="290" />
      <scope startLine="291" endLine="302">
        <declaration type="Rectangle2D" name="b" />
        <comment>Note that this pen width code does not really work for SWT since</comment>
        <comment>it assumes</comment>
        <comment>that the pen width scales - in actuality it does not. However,</comment>
        <comment>the fix would</comment>
        <comment>be to have volatile bounds for all shapes which isn't a nice</comment>
        <comment>alternative</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Paints the path on the context provided.</text>
      <param>paintContext the context onto which the path will be painted</param>
    </javadoc>
    <method type="void" name="paint" startLine="314" endLine="335">
      <declaration type="Paint" name="p" />
      <declaration type="SWTGraphics2D" name="g2" />
      <scope startLine="318" endLine="320" />
      <scope startLine="322" endLine="325" />
      <scope startLine="327" endLine="330" />
      <scope startLine="332" endLine="334" />
    </method>
    <method type="void" name="drawShape" startLine="337" endLine="358">
      <declaration type="double" name="lineWidth" />
      <scope startLine="339" endLine="342" />
      <scope startLine="343" endLine="346" />
      <scope startLine="347" endLine="350" />
      <scope startLine="351" endLine="354" />
      <scope startLine="355" endLine="357" />
    </method>
    <method type="void" name="fillShape" startLine="360" endLine="381">
      <declaration type="double" name="lineWidth" />
      <scope startLine="362" endLine="365" />
      <scope startLine="366" endLine="369" />
      <scope startLine="370" endLine="373" />
      <scope startLine="374" endLine="377" />
      <scope startLine="378" endLine="380" />
    </method>
    <javadoc>
      <text>* Changes the underlying shape of this PSWTPath.</text>
      <param>newShape new associated shape of this PSWTPath</param>
    </javadoc>
    <method type="void" name="setShape" startLine="388" endLine="396" />
    <javadoc>
      <text>* Updates the internal points used to draw the shape.</text>
      <param>aShape shape to read points from</param>
    </javadoc>
    <method type="void" name="updateShapePoints" startLine="403" endLine="451">
      <scope startLine="404" endLine="413">
        <scope startLine="405" endLine="407" />
      </scope>
      <scope startLine="414" endLine="423">
        <scope startLine="415" endLine="417" />
      </scope>
      <scope startLine="424" endLine="435">
        <scope startLine="425" endLine="427" />
      </scope>
      <scope startLine="436" endLine="447">
        <scope startLine="437" endLine="439" />
      </scope>
      <scope startLine="448" endLine="450" />
    </method>
    <javadoc>
      <text>* Clone's the shape provided.</text>
      <param>aShape shape to be cloned</param>
      <return>a cloned version of the provided shape</return>
    </javadoc>
    <method type="Shape" name="cloneShape" startLine="460" endLine="487">
      <scope startLine="461" endLine="463" />
      <scope startLine="464" endLine="467">
        <declaration type="Ellipse2D" name="e2" />
      </scope>
      <scope startLine="468" endLine="472">
        <declaration type="Arc2D" name="a2" />
      </scope>
      <scope startLine="473" endLine="477">
        <declaration type="RoundRectangle2D" name="r2" />
      </scope>
      <scope startLine="478" endLine="481">
        <declaration type="Line2D" name="l2" />
      </scope>
      <scope startLine="482" endLine="486">
        <declaration type="GeneralPath" name="aPath" />
      </scope>
    </method>
    <javadoc>
      <text>* Resets the path to a rectangle with the dimensions and position provided.</text>
      <param>x left of the rectangle</param>
      <param>y top of te rectangle</param>
      <param>width width of the rectangle</param>
      <param>height height of the rectangle</param>
    </javadoc>
    <method type="void" name="setPathToRectangle" startLine="497" endLine="500" />
    <javadoc>
      <text>* Resets the path to a rectangle with the dimensions and position provided.</text>
      <param>x left of the rectangle</param>
      <param>y top of te rectangle</param>
      <param>width width of the rectangle</param>
      <param>height height of the rectangle</param>
      <param>arcWidth width of arc in the corners of the rectangle</param>
      <param>arcHeight height of arc in the corners of the rectangle</param>
    </javadoc>
    <method type="void" name="setPathToRoundRectangle" startLine="513" endLine="516" />
    <javadoc>
      <text>* Resets the path to an ellipse positioned at the coordinate provided with
 * the dimensions provided.</text>
      <param>x left of the ellipse</param>
      <param>y top of the ellipse</param>
      <param>width width of the ellipse</param>
      <param>height height of the ellipse</param>
    </javadoc>
    <method type="void" name="setPathToEllipse" startLine="527" endLine="530" />
    <javadoc>
      <text>* Sets the path to a sequence of segments described by the points.</text>
      <param>points points to that lie along the generated path</param>
    </javadoc>
    <method type="void" name="setPathToPolyline" startLine="537" endLine="545">
      <declaration type="GeneralPath" name="path" />
      <scope startLine="541" endLine="543" />
    </method>
    <javadoc>
      <text>* Sets the path to a sequence of segments described by the point components
 * provided.</text>
      <param>xp the x components of the points along the path</param>
      <param>yp the y components of the points along the path</param>
    </javadoc>
    <method type="void" name="setPathToPolyline" startLine="554" endLine="562">
      <declaration type="GeneralPath" name="path" />
      <scope startLine="558" endLine="560" />
    </method>
    <javadoc>
      <text>* Return the center of this SWT path node, based on its bounds.</text>
      <return>the center of this SWT path node, based on its bounds</return>
    </javadoc>
    <method type="Point2D" name="getCenter" startLine="569" endLine="572">
      <declaration type="PBounds" name="bounds" />
    </method>
    <comment>****************************************************************</comment>
    <comment>Stroke</comment>
    <comment>****************************************************************</comment>
    <comment>****************************************************************</comment>
    <comment>Painting</comment>
    <comment>****************************************************************</comment>
  </class>
</source>
