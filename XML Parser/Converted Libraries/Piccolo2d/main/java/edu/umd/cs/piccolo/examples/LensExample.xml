<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.examples">
  <import name="java.awt.Color" />
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.geom.Point2D" />
  <import name="edu.umd.cs.piccolo.PCamera" />
  <import name="edu.umd.cs.piccolo.PCanvas" />
  <import name="edu.umd.cs.piccolo.PLayer" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.PRoot" />
  <import name="edu.umd.cs.piccolo.event.PDragSequenceEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PInputEvent" />
  <import name="edu.umd.cs.piccolo.nodes.PPath" />
  <import name="edu.umd.cs.piccolo.nodes.PText" />
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <import name="edu.umd.cs.piccolox.PFrame" />
  <import name="edu.umd.cs.piccolox.handles.PBoundsHandle" />
  <import name="edu.umd.cs.piccolox.nodes.PLens" />
  <class name="LensExample" extends="PFrame" startLine="49">
    <javadoc>
      <text>* This example shows one way to create and use lens's in Piccolo.</text>
    </javadoc>
    <javadoc />
    <declaration type="long" name="serialVersionUID" />
    <method type="constructor" name="LensExample" startLine="59" endLine="61" />
    <method type="constructor" name="LensExample" startLine="63" endLine="65" />
    <method type="void" name="initialize" startLine="67" endLine="173">
      <declaration type="PRoot" name="root" />
      <declaration type="PCamera" name="camera" />
      <declaration type="PLayer" name="mainLayer" />
      <declaration type="PLayer" name="sharedLayer" />
      <declaration type="PLayer" name="lensOnlyLayer" />
      <declaration type="PLens" name="lens" />
      <declaration type="PDragSequenceEventHandler" name="squiggleEventHandler" />
      <declaration type="PPath" name="squiggle" />
      <method type="void" name="startDrag" startLine="93" endLine="106">
        <declaration type="Point2D" name="p" />
      </method>
      <method type="void" name="drag" startLine="108" endLine="111" />
      <method type="void" name="endDrag" startLine="113" endLine="117" />
      <method type="void" name="updateSquiggle" startLine="119" endLine="122">
        <declaration type="Point2D" name="p" />
      </method>
      <declaration type="PNode" name="sharedNode" />
      <javadoc />
      <declaration type="long" name="serialVersionUID" />
      <method type="void" name="paint" startLine="150" endLine="159">
        <scope startLine="151" endLine="155">
          <declaration type="Graphics2D" name="g2" />
        </scope>
        <scope startLine="156" endLine="158" />
      </method>
      <declaration type="PText" name="label" />
      <comment>viewed by the PCanvas camera, the lens is added to this layer.</comment>
      <comment>viewed by both the lens camera and the PCanvas camera</comment>
      <comment>viewed by only the lens camera</comment>
      <comment>Create an event handler that draws squiggles on the first layer of</comment>
      <comment>the bottom most camera.</comment>
      <comment>add squiggles to the first layer of the bottom camera. In the</comment>
      <comment>case of the lens these squiggles will be added to the layer</comment>
      <comment>that is only visible by the lens,</comment>
      <comment>In the case of the canvas camera the squiggles will be added</comment>
      <comment>to the shared layer viewed by both the canvas camera and the</comment>
      <comment>lens.</comment>
      <comment>add the squiggle event handler to both the lens and the</comment>
      <comment>canvas camera.</comment>
      <comment>make sure that the event handler consumes events so that it doesn't</comment>
      <comment>conflic with other event handlers or with itself (since its added to</comment>
      <comment>two event sources).</comment>
      <comment>remove default event handlers, not really nessessary since the</comment>
      <comment>squiggleEventHandler consumes everything anyway, but still good to</comment>
      <comment>do.</comment>
      <comment>create a node that is viewed both by the main camera and by the</comment>
      <comment>lens. Note that in its paint method it checks to see which camera</comment>
      <comment>is painting it, and if its the lens uses a different color.</comment>
    </method>
    <method type="void" name="main" startLine="175" endLine="177" />
  </class>
</source>
