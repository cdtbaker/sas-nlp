<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.pswing">
  <import name="edu.umd.cs.piccolo.PCamera" />
  <import name="edu.umd.cs.piccolo.PLayer" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <import name="javax.swing.JComponent" />
  <import name="javax.swing.RepaintManager" />
  <import name="java.awt.BasicStroke" />
  <import name="java.awt.Color" />
  <import name="java.awt.Component" />
  <import name="java.awt.Container" />
  <import name="java.awt.Font" />
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.RenderingHints" />
  <import name="java.awt.Shape" />
  <import name="java.awt.Stroke" />
  <import name="java.awt.event.ContainerAdapter" />
  <import name="java.awt.event.ContainerEvent" />
  <import name="java.awt.event.ContainerListener" />
  <import name="java.awt.geom.AffineTransform" />
  <import name="java.awt.image.BufferedImage" />
  <import name="java.beans.PropertyChangeEvent" />
  <import name="java.beans.PropertyChangeListener" />
  <import name="java.io.IOException" />
  <import name="java.io.ObjectInputStream" />
  <import name="java.io.Serializable" />
  <import name="java.util.ArrayList" />
  <import name="java.util.Arrays" />
  <class name="PSwing" extends="PNode" startLine="145">
    <implements name="Serializable" />
    <implements name="PropertyChangeListener" />
    <javadoc>
      <text>* <b>PSwing</b> is used to add Swing Components to a Piccolo2D canvas.
 * <p>
 * Example: adding a swing JButton to a PCanvas:
 * <pre>
 * PSwingCanvas canvas = new PSwingCanvas();
 * JButton button = new JButton(&quot;Button&quot;);
 * swing = new PSwing(canvas, button);
 * canvas.getLayer().addChild(swing);
 * </pre>
 * <p>
 * NOTE: PSwing has the current limitation that it does not listen for Container
 * events. This is only an issue if you create a PSwing and later add Swing
 * components to the PSwing's component hierarchy that do not have double
 * buffering turned off or have a smaller font size than the minimum font size
 * of the original PSwing's component hierarchy.
 * </p>
 * <p>
 * For instance, the following bit of code will give unexpected results:
 * <pre>
 * JPanel panel = new JPanel();
 * PSwing swing = new PSwing(panel);
 * JPanel newChild = new JPanel();
 * newChild.setDoubleBuffered(true);
 * panel.add(newChild);
 * </pre>
 * </p>
 * <p>
 * NOTE: PSwing cannot be correctly interacted with through multiple cameras.
 * There is no support for it yet.
 * </p>
 * <p>
 * NOTE: PSwing is java.io.Serializable.
 * </p>
 * <p>
 * <b>Warning:</b> Serialized objects of this class will not be compatible with
 * future Piccolo releases. The current serialization support is appropriate for
 * short term storage or RMI between applications running the same version of
 * Piccolo. A future release of Piccolo will provide support for long term
 * persistence.
 * </p></text>
      <author>Sam R. Reid</author>
      <author>Chris Malley (cmalley@pixelzoom.com)</author>
      <author>Benjamin B. Bederson</author>
      <author>Lance E. Good</author>
    </javadoc>
    <javadoc>
      <text>* Default serial version UID.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Key for this object in the Swing component's client properties.</text>
    </javadoc>
    <declaration type="String" name="PSWING_PROPERTY" />
    <javadoc>
      <text>* Temporary repaint bounds.</text>
    </javadoc>
    <declaration type="PBounds" name="TEMP_REPAINT_BOUNDS2" />
    <javadoc>
      <text>* For use when buffered painting is enabled.</text>
    </javadoc>
    <declaration type="Color" name="BUFFER_BACKGROUND_COLOR" />
    <declaration type="AffineTransform" name="IDENTITY_TRANSFORM" />
    <javadoc>
      <text>* Default Greek threshold, <code>0.3d</code>.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_GREEK_THRESHOLD" />
    <javadoc>
      <text>* The cutoff at which the Swing component is rendered greek.</text>
    </javadoc>
    <declaration type="double" name="greekThreshold" />
    <javadoc>
      <text>* Swing component for this Swing node.</text>
    </javadoc>
    <declaration type="JComponent" name="component" />
    <javadoc>
      <text>* Whether or not to use buffered painting.</text>
      <see>#paint(java.awt.Graphics2D)</see>
    </javadoc>
    <declaration type="boolean" name="useBufferedPainting" />
    <javadoc>
      <text>* Used when buffered painting is enabled.</text>
    </javadoc>
    <declaration type="BufferedImage" name="buffer" />
    <javadoc>
      <text>* Minimum font size.</text>
    </javadoc>
    <declaration type="double" name="minFontSize" />
    <javadoc>
      <text>* Default stroke, <code>new BasicStroke()</code>. Cannot be made static
 * because BasicStroke is not serializable.  Should not be null.</text>
    </javadoc>
    <declaration type="Stroke" name="defaultStroke" />
    <javadoc>
      <text>* Default font, 12 point <code>"SansSerif"</code>. Will be made final in
 * version 2.0.</text>
    </javadoc>
    <declaration type="Font" name="DEFAULT_FONT" />
    <javadoc>
      <text>* Swing canvas for this swing node.</text>
    </javadoc>
    <declaration type="PSwingCanvas" name="canvas" />
    <javadoc>
      <text>* Used to keep track of which nodes we've attached listeners to since no
 * built in support in PNode.</text>
    </javadoc>
    <declaration type="ArrayList" name="listeningTo" />
    <javadoc>
      <text>* The parent listener for camera/canvas changes.</text>
    </javadoc>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="propertyChange" startLine="259" endLine="268">
      <declaration type="PNode" name="parent" />
      <scope startLine="262" endLine="264" />
      <scope startLine="265" endLine="267" />
    </method>
    <javadoc>
      <text>* Clear out all the listeners registered to make sure there are no
 * stray references.</text>
      <param>fromParent Parent to start with for clearing listeners</param>
    </javadoc>
    <method type="void" name="clearListeners" startLine="276" endLine="282">
      <scope startLine="277" endLine="281" />
    </method>
    <declaration type="PropertyChangeListener" name="parentListener" />
    <javadoc>
      <text>* Listens to container nodes for changes to its contents. Any additions
 * will automatically have double buffering turned off.</text>
    </javadoc>
    <method type="void" name="componentAdded" startLine="291" endLine="296">
      <declaration type="Component" name="childComponent" />
      <scope startLine="293" endLine="295" />
    </method>
    <javadoc>
      <text>* Disables double buffering on every component in the hierarchy of the
 * targetComponent.
 * I'm assuming that the intent of the is method is that it should be
 * called explicitly by anyone making changes to the hierarchy of the
 * Swing component graph.</text>
    </javadoc>
    <method type="void" name="disableDoubleBuffering" startLine="306" endLine="314">
      <scope startLine="308" endLine="313">
        <declaration type="Component" name="c" />
        <scope startLine="310" endLine="312" />
      </scope>
    </method>
    <declaration type="ContainerListener" name="doubleBufferRemover" />
    <javadoc>
      <text>* Create a new visual component wrapper for the specified Swing component.</text>
      <param>component Swing component to be wrapped</param>
    </javadoc>
    <method type="constructor" name="PSwing" startLine="322" endLine="330" />
    <javadoc>
      <deprecated>by {@link #PSwing(JComponent)}</deprecated>
      <param>swingCanvas canvas on which the PSwing node will be embedded</param>
      <param>component not used</param>
    </javadoc>
    <method type="constructor" name="PSwing" startLine="338" endLine="340" />
    <javadoc>
      <text>* If true {@link PSwing} will paint the {@link JComponent} to a buffer with no graphics
 * transformations applied and then paint the buffer to the target transformed
 * graphics context. On some platforms (such as Mac OS X) rendering {@link JComponent}s to
 * a transformed context is slow. Enabling buffered painting gives a significant performance
 * boost on these platforms; however, at the expense of a lower-quality drawing result at larger
 * scales.</text>
      <since>1.3.1</since>
      <param>useBufferedPainting true if this {@link PSwing} should use buffered painting</param>
    </javadoc>
    <method type="void" name="setUseBufferedPainting" startLine="352" endLine="354" />
    <method type="boolean" name="isUseBufferedPainting" startLine="356" endLine="358" />
    <javadoc>
      <text>* Ensures the bounds of the underlying component are accurate, and sets the
 * bounds of this PNode.</text>
    </javadoc>
    <method type="void" name="updateBounds" startLine="364" endLine="373">
      <scope startLine="369" endLine="371" />
      <comment>Need to explicitly set the component's bounds because
 the component's parent (PSwingCanvas.ChildWrapper) has no layout manager.</comment>
    </method>
    <javadoc>
      <text>* Since the parent ChildWrapper has no layout manager, it is the responsibility of this PSwing
 * to make sure the component has its bounds set properly, otherwise it will not be drawn properly.
 * This method sets the bounds of the component to be equal to its preferred size.</text>
    </javadoc>
    <method type="void" name="updateComponentSize" startLine="380" endLine="382" />
    <javadoc>
      <text>* Determines whether the component should be resized, based on whether its actual width and height
 * differ from its preferred width and height.</text>
      <return>true if the component should be resized.</return>
    </javadoc>
    <method type="boolean" name="componentNeedsResizing" startLine="389" endLine="391" />
    <javadoc>
      <text>* Paints the PSwing on the specified renderContext.  Also determines if
 * the Swing component should be rendered normally or as a filled rectangle (greeking).
 * <p/>
 * The transform, clip, and composite will be set appropriately when this
 * object is rendered. It is up to this object to restore the transform,
 * clip, and composite of the Graphics2D if this node changes any of them.
 * However, the color, font, and stroke are unspecified by Piccolo. This
 * object should set those things if they are used, but they do not need to
 * be restored.</text>
      <param>renderContext Contains information about current render.</param>
    </javadoc>
    <method type="void" name="paint" startLine="406" endLine="430">
      <scope startLine="407" endLine="410" />
      <declaration type="Graphics2D" name="g2" />
      <declaration type="Stroke" name="originalStroke" />
      <declaration type="Font" name="originalFont" />
      <scope startLine="420" endLine="422" />
      <scope startLine="423" endLine="425" />
      <comment>Save Stroke and Font for restoring.</comment>
      <comment>Restore the stroke and font on the Graphics2D</comment>
    </method>
    <javadoc>
      <text>* Return true if this Swing node should render as greek given the specified
 * paint context.</text>
      <param>paintContext paint context</param>
      <return>true if this Swing node should render as greek given the
 * specified paint context</return>
    </javadoc>
    <method type="boolean" name="shouldRenderGreek" startLine="440" endLine="442" />
    <javadoc>
      <text>* Paints the Swing component as greek.  This method assumes that the stroke has been set beforehand.</text>
      <param>g2 The graphics used to render the filled rectangle</param>
    </javadoc>
    <method type="void" name="paintAsGreek" startLine="449" endLine="465">
      <declaration type="Color" name="originalColor" />
      <scope startLine="453" endLine="455" />
      <scope startLine="458" endLine="460" />
      <comment>Save original color for restoring painting as greek.</comment>
      <comment>Restore original color on the Graphics2D</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setVisible" startLine="468" endLine="474">
      <scope startLine="471" endLine="473" />
    </method>
    <javadoc>
      <text>* Remove from the SwingWrapper; throws an exception if no canvas is
 * associated with this PSwing.</text>
    </javadoc>
    <method type="void" name="removeFromSwingWrapper" startLine="480" endLine="484">
      <scope startLine="481" endLine="483" />
    </method>
    <method type="boolean" name="isComponentSwingWrapped" startLine="486" endLine="488" />
    <javadoc>
      <text>* Renders the wrapped component to the graphics context provided.</text>
      <param>g2 graphics context for rendering the JComponent</param>
    </javadoc>
    <method type="void" name="paint" startLine="495" endLine="518">
      <scope startLine="496" endLine="499">
        <comment>The component has not been initialized yet.</comment>
      </scope>
      <declaration type="PSwingRepaintManager" name="manager" />
      <declaration type="RenderingHints" name="oldHints" />
      <scope startLine="506" endLine="510">
        <declaration type="Graphics2D" name="bufferedGraphics" />
      </scope>
      <scope startLine="510" endLine="513" />
    </method>
    <method type="Graphics2D" name="getBufferedGraphics" startLine="520" endLine="537">
      <declaration type="Graphics2D" name="bufferedGraphics" />
      <scope startLine="522" endLine="527">
        <comment>Get the graphics context associated with a new buffered image.</comment>
        <comment>Use TYPE_INT_ARGB_PRE so that transparent components look good on Windows.</comment>
      </scope>
      <scope startLine="528" endLine="534">
        <comment>Use the graphics context associated with the existing buffered image</comment>
        <comment>Clear the buffered image to prevent artifacts on Macintosh</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Tells whether the buffer for the image of the Swing components
 * is currently valid.</text>
      <return>true if the buffer is currently valid</return>
    </javadoc>
    <method type="boolean" name="isBufferValid" startLine="545" endLine="547" />
    <javadoc>
      <text>* Repaints the specified portion of this visual component. Note that the
 * input parameter may be modified as a result of this call.</text>
      <param>repaintBounds bounds that need repainting</param>
    </javadoc>
    <method type="void" name="repaint" startLine="555" endLine="559">
      <declaration type="Shape" name="sh" />
    </method>
    <javadoc>
      <text>* Returns the Swing component that this visual component wraps.</text>
      <return>The Swing component wrapped by this PSwing node</return>
    </javadoc>
    <method type="JComponent" name="getComponent" startLine="566" endLine="568" />
    <javadoc>
      <text>* We need to turn off double buffering of Swing components within Piccolo
 * since all components contained within a native container use the same
 * buffer for double buffering. With normal Swing widgets this is fine, but
 * for Swing components within Piccolo this causes problems. This function
 * recurses the component tree rooted at c, and turns off any double
 * buffering in use. It also updates the minimum font size based on the font
 * size of c and adds a property change listener to listen for changes to
 * the font.</text>
      <param>c The Component to be recursively unDoubleBuffered</param>
    </javadoc>
    <method type="void" name="initializeComponent" startLine="582" endLine="597">
      <scope startLine="584" endLine="586" />
      <scope startLine="589" endLine="592" />
      <scope startLine="594" endLine="596" />
    </method>
    <method type="void" name="initializeChildren" startLine="599" endLine="606">
      <declaration type="Component[]" name="children" />
      <scope startLine="601" endLine="605">
        <scope startLine="602" endLine="604" />
      </scope>
    </method>
    <javadoc>
      <text>* Listens for changes in font on components rooted at this PSwing.</text>
      <param>evt property change event representing the change in font</param>
    </javadoc>
    <method type="void" name="propertyChange" startLine="613" endLine="618">
      <declaration type="Component" name="source" />
      <scope startLine="615" endLine="617" />
    </method>
    <method type="void" name="readObject" startLine="620" endLine="623" />
    <javadoc>
      <text>* Attaches a listener to the specified node and all its parents to listen
 * for a change in the PSwingCanvas. Only PROPERTY_PARENT listeners are
 * added so this code wouldn't handle if a PLayer were viewed by a different
 * PCamera since that constitutes a child change.</text>
      <param>node The child node at which to begin a parent-based traversal for
 * adding listeners.</param>
    </javadoc>
    <method type="void" name="listenForCanvas" startLine="634" endLine="656">
      <declaration type="PNode" name="p" />
      <scope startLine="637" endLine="655">
        <declaration type="PNode" name="parent" />
        <scope startLine="642" endLine="653">
          <declaration type="PLayer" name="player" />
          <scope startLine="646" endLine="652">
            <declaration type="PCamera" name="cam" />
            <scope startLine="648" endLine="651" />
          </scope>
        </scope>
        <comment>System.out.println( "parent = " + parent.getClass() );</comment>
        <comment>System.out.println( "Found player: with " +</comment>
        <comment>player.getCameraCount() + " cameras" );</comment>
      </scope>
      <comment>need to get the full tree for this node</comment>
    </method>
    <javadoc>
      <text>* Attach a property change listener to the specified node, if one has not
 * already been attached.</text>
      <param>node the node to listen to for parent/pcamera/pcanvas changes</param>
    </javadoc>
    <method type="void" name="listenToNode" startLine="664" endLine="669">
      <scope startLine="665" endLine="668" />
    </method>
    <javadoc>
      <text>* Determine whether this PSwing is already listening to the specified node
 * for camera/canvas changes.</text>
      <param>node the node to check</param>
      <return>true if this PSwing is already listening to the specified node
 * for camera/canvas changes</return>
    </javadoc>
    <method type="boolean" name="isListeningTo" startLine="679" endLine="687">
      <scope startLine="680" endLine="685">
        <declaration type="PNode" name="pNode" />
        <scope startLine="682" endLine="684" />
      </scope>
    </method>
    <javadoc>
      <text>* Removes this PSwing from previous PSwingCanvas (if any), and ensure that
 * this PSwing is attached to the new PSwingCanvas.</text>
      <param>newCanvas the new PSwingCanvas (may be null)</param>
    </javadoc>
    <method type="void" name="updateCanvas" startLine="695" endLine="717">
      <scope startLine="696" endLine="698" />
      <scope startLine="700" endLine="702" />
      <scope startLine="704" endLine="706" />
      <scope startLine="707" endLine="715" />
    </method>
    <javadoc>
      <text>* Return the Greek threshold scale. When the scale will be below this
 * threshold the Swing component is rendered as 'Greek' instead of painting
 * the Swing component. Defaults to {@link #DEFAULT_GREEK_THRESHOLD}.</text>
      <see>PSwing#paintAsGreek(Graphics2D)</see>
      <return>the current Greek threshold scale</return>
    </javadoc>
    <method type="double" name="getGreekThreshold" startLine="727" endLine="729" />
    <javadoc>
      <text>* Set the Greek threshold in scale to <code>greekThreshold</code>. When the
 * scale will be below this threshold the Swing component is rendered as
 * 'Greek' instead of painting the Swing component..</text>
      <see>PSwing#paintAsGreek(Graphics2D)</see>
      <param>greekThreshold Greek threshold in scale</param>
    </javadoc>
    <method type="void" name="setGreekThreshold" startLine="739" endLine="742" />
    <comment>public static final Font DEFAULT_FONT = new Font(Font.SANS_SERIF,</comment>
    <comment>Font.PLAIN, 12); jdk 1.6+</comment>
  </class>
</source>
