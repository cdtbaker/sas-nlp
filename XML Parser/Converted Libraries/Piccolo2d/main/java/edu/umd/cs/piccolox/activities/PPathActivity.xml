<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.activities">
  <import name="edu.umd.cs.piccolo.activities.PInterpolatingActivity" />
  <class name="PPathActivity" extends="PInterpolatingActivity" startLine="33">
    <javadoc>
      <text>* <b>PPathActivity</b> is the abstract base class for all path activity
 * interpolators. Path activities interpolate between multiple states over the
 * duration of the activity.
 * <p>
 * Knots are used to determine when in time the activity should move from state
 * to state. Knot values should be increasing in value from 0 to 1 inclusive.
 * This class is based on the Java 3D PathInterpolator object, see that class
 * documentation for more information on the basic concepts used in this classes
 * design.
 * </p>
 * <p>
 * See PPositionPathActivity for a concrete path activity that will animate
 * through a list of points.
 * </p></text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc>
      <text>* The "knots" that define this path's activity timing through its activity
 * and should be an monotonously increasing array starting where each value
 * is >=0 and ending at 1f.</text>
    </javadoc>
    <declaration type="float[]" name="knots" />
    <javadoc>
      <text>* Constructs a PPathActivity that will last the specified duration, will
 * animate every stepRate and will progress according to the knots provided.</text>
      <param>duration duration in milliseconds that this activity should last</param>
      <param>stepRate interval in milliseconds between animation steps</param>
      <param>knots array defining the speed of the animation alongs it's
 * animation</param>
    </javadoc>
    <method type="constructor" name="PPathActivity" startLine="70" endLine="72" />
    <javadoc>
      <text>* Constructs a PPathActivity that will repeat the specified number of
 * times, last the specified duration, will animate every stepRate and will
 * progress according to the knots provided.</text>
      <param>duration duration in milliseconds that this activity should last</param>
      <param>stepRate interval in milliseconds between animation steps</param>
      <param>knots array defining the speed of the animation alongs it's
 * animation</param>
      <param>loopCount # of times activity should repeat</param>
      <param>mode controls easing of the activity</param>
    </javadoc>
    <method type="constructor" name="PPathActivity" startLine="87" endLine="90" />
    <javadoc>
      <text>* Returns the number of knots that define the timing of this activity.</text>
      <return># of knots</return>
    </javadoc>
    <method type="int" name="getKnotsLength" startLine="97" endLine="99" />
    <javadoc>
      <text>* Changes the knots that define the timing of this activity.</text>
      <param>newKnots the new knots to assign to this activity</param>
    </javadoc>
    <method type="void" name="setKnots" startLine="106" endLine="113">
      <scope startLine="107" endLine="109" />
      <scope startLine="110" endLine="112" />
    </method>
    <javadoc>
      <text>* Return the knots that define the timing of this activity.</text>
      <return>new knots</return>
    </javadoc>
    <method type="float[]" name="getKnots" startLine="120" endLine="125">
      <scope startLine="121" endLine="123" />
    </method>
    <javadoc>
      <text>* Changes the knot at the given index.</text>
      <param>index index of knot to change</param>
      <param>knot new value to assign to the knot</param>
    </javadoc>
    <method type="void" name="setKnot" startLine="133" endLine="135" />
    <javadoc>
      <text>* Returns the value of the knot at the given index.</text>
      <param>index index of desired knot</param>
      <return>value of knot at given index</return>
    </javadoc>
    <method type="float" name="getKnot" startLine="143" endLine="145" />
    <javadoc>
      <text>* Sets the target's value taking knot timing into account.</text>
      <param>zeroToOne how much of this activity has elapsed 0=none,
 * 1=completed</param>
    </javadoc>
    <method type="void" name="setRelativeTargetValue" startLine="153" endLine="179">
      <declaration type="int" name="currentKnotIndex" />
      <scope startLine="156" endLine="158" />
      <declaration type="int" name="startKnot" />
      <declaration type="int" name="endKnot" />
      <scope startLine="163" endLine="165" />
      <scope startLine="166" endLine="168" />
      <declaration type="float" name="currentRange" />
      <declaration type="float" name="currentPointOnRange" />
      <declaration type="float" name="normalizedPointOnRange" />
      <scope startLine="174" endLine="176" />
    </method>
    <method name="setRelativeTargetValue" type="void" startLine="181" endLine="189" />
    <javadoc>
      <text>* An abstract method that allows subclasses to define what target value
 * matches the given progress and knots.</text>
      <param>zeroToOne how far between the knots the activity is</param>
      <param>startKnot knot that defines the start of this particular interpolation</param>
      <param>endKnot knot that defines the end of this particular interpolation</param>
    </javadoc>
  </class>
</source>
