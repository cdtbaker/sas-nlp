<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.examples">
  <import name="java.awt.BasicStroke" />
  <import name="java.awt.Color" />
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.Stroke" />
  <import name="java.awt.geom.Line2D" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.awt.geom.Rectangle2D" />
  <import name="java.beans.PropertyChangeEvent" />
  <import name="java.beans.PropertyChangeListener" />
  <import name="edu.umd.cs.piccolo.PCamera" />
  <import name="edu.umd.cs.piccolo.PCanvas" />
  <import name="edu.umd.cs.piccolo.PLayer" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.PRoot" />
  <import name="edu.umd.cs.piccolo.event.PDragSequenceEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PInputEvent" />
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <import name="edu.umd.cs.piccolox.PFrame" />
  <class name="GridExample" extends="PFrame" startLine="51">
    <javadoc>
      <text>* Example of drawing an infinite grid, and providing support for snap to grid.</text>
    </javadoc>
    <javadoc />
    <declaration type="long" name="serialVersionUID" />
    <declaration type="Line2D" name="gridLine" />
    <declaration type="Stroke" name="gridStroke" />
    <declaration type="Color" name="gridPaint" />
    <declaration type="double" name="gridSpacing" />
    <method type="constructor" name="GridExample" startLine="65" endLine="67" />
    <method type="constructor" name="GridExample" startLine="69" endLine="71" />
    <method type="void" name="initialize" startLine="73" endLine="177">
      <declaration type="PRoot" name="root" />
      <declaration type="PCamera" name="camera" />
      <declaration type="PLayer" name="gridLayer" />
      <javadoc />
      <declaration type="long" name="serialVersionUID" />
      <method type="void" name="paint" startLine="82" endLine="109">
        <declaration type="double" name="bx" />
        <declaration type="double" name="by" />
        <declaration type="double" name="rightBorder" />
        <declaration type="double" name="bottomBorder" />
        <declaration type="Graphics2D" name="g2" />
        <declaration type="Rectangle2D" name="clip" />
        <scope startLine="96" endLine="101">
          <scope startLine="98" endLine="100" />
        </scope>
        <scope startLine="103" endLine="108">
          <scope startLine="105" endLine="107" />
        </scope>
      </method>
      <method type="void" name="propertyChange" startLine="121" endLine="123" />
      <method type="void" name="propertyChange" startLine="127" endLine="129" />
      <declaration type="PNode" name="n" />
      <declaration type="PNode" name="draggedNode" />
      <declaration type="Point2D" name="nodeStartPosition" />
      <method type="boolean" name="shouldStartDragInteraction" startLine="147" endLine="152">
        <scope startLine="148" endLine="150" />
      </method>
      <method type="void" name="startDrag" startLine="154" endLine="159" />
      <method type="void" name="drag" startLine="161" endLine="175">
        <declaration type="Point2D" name="start" />
        <declaration type="Point2D" name="current" />
        <declaration type="Point2D" name="dest" />
      </method>
      <comment>make sure grid gets drawn on snap to grid boundaries. And</comment>
      <comment>expand a little to make sure that entire view is filled.</comment>
      <comment>replace standar layer with grid layer.</comment>
      <comment>add constrains so that grid layers bounds always match cameras view</comment>
      <comment>bounds. This makes it look like an infinite grid.</comment>
      <comment>add a drag event handler that supports snap to grid.</comment>
    </method>
    <method type="void" name="main" startLine="179" endLine="181" />
  </class>
</source>
