<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.event">
  <import name="java.awt.event.MouseEvent" />
  <import name="java.awt.geom.Point2D" />
  <import name="edu.umd.cs.piccolo.activities.PActivity" />
  <import name="edu.umd.cs.piccolo.util.PUtil" />
  <class name="PDragSequenceEventHandler" extends="PBasicInputEventHandler" startLine="37">
    <javadoc>
      <text>* <b>PDragSequenceEventHandler</b> is designed to support mouse pressed,
 * dragged, and released interaction sequences. Support is also provided for
 * running a continuous activity during the drag sequence.
 * <P>
 * PDragSequenceEventHandler should be subclassed by a concrete event handler
 * that implements a particular interaction. See PPanEventHandler,
 * PZoomEventHandler, and PDragEventHandler for examples.
 * <P></text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <declaration type="double" name="minDragStartDistance" />
    <declaration type="boolean" name="isDragging" />
    <declaration type="Point2D" name="mousePressedCanvasPoint" />
    <declaration type="PActivity" name="dragActivity" />
    <declaration type="PInputEvent" name="dragEvent" />
    <declaration type="int" name="sequenceInitiatedButton" />
    <javadoc>
      <text>* Constructs a drag sequence event handler instance.</text>
    </javadoc>
    <method type="constructor" name="PDragSequenceEventHandler" startLine="60" endLine="61" />
    <javadoc>
      <text>* Returns true if this event handler is in the process of handling a drag.</text>
      <return>true if handling a drag</return>
    </javadoc>
    <method type="boolean" name="isDragging" startLine="68" endLine="70" />
    <javadoc>
      <text>* Used to inform this handler that it is in the process of handling a drag.</text>
      <param>isDragging true if handler is processing a drag</param>
    </javadoc>
    <method type="void" name="setIsDragging" startLine="77" endLine="79" />
    <javadoc>
      <text>* Returns the minimum distance (in screen coordinates) before a pressed
 * mouse movement is registered as a drag event. The smaller this value the
 * more clicks will be incorrectly recognized as drag events.</text>
      <return>minimum distance a pressed mouse must move before it is
 * registered as a drag</return>
    </javadoc>
    <method type="double" name="getMinDragStartDistance" startLine="89" endLine="91" />
    <javadoc>
      <text>* Set the minimum distance that the mouse should be dragged (in screen
 * coordinates) before a new drag sequence is initiate.</text>
      <param>minDistance in screen coordinates</param>
    </javadoc>
    <method type="void" name="setMinDragStartDistance" startLine="99" endLine="101" />
    <javadoc>
      <text>* Return the point in canvas coordinates where the mouse was last pressed.</text>
      <return>point in canvas coordinates of last mouse press</return>
    </javadoc>
    <method type="Point2D" name="getMousePressedCanvasPoint" startLine="108" endLine="113">
      <scope startLine="109" endLine="111" />
    </method>
    <javadoc>
      <text>* Subclasses should override this method to get notified of the start of a
 * new drag sequence. Note that that overriding methods must still call
 * super.startDrag() for correct behavior.</text>
      <param>event event that started the drag sequence</param>
    </javadoc>
    <method type="void" name="startDrag" startLine="126" endLine="131" />
    <javadoc>
      <text>* Subclasses should override this method to get notified of the drag events
 * in a drag sequence. Note that that overriding methods must still call
 * super.startDrag() for correct behavior.</text>
      <param>event event that caused the drag</param>
    </javadoc>
    <method type="void" name="drag" startLine="140" endLine="142" />
    <javadoc>
      <text>* Subclasses should override this method to get notified of the end event
 * in a drag sequence. Note that that overriding methods must still call
 * super.startDrag() for correct behavior.</text>
      <param>event event that ended the drag sequence</param>
    </javadoc>
    <method type="void" name="endDrag" startLine="151" endLine="156" />
    <javadoc>
      <text>* Returns true if the provided event represents a valid start for a drag
 * sequence.
 * Subclasses should override this method to add criteria for the start of a
 * drag sequence. Subclasses are still responsible for calling
 * super.shouldStartDragInteraction()</text>
      <param>event event being tested</param>
      <return>true if provided event is a good start to a drag sequence</return>
    </javadoc>
    <method type="boolean" name="shouldStartDragInteraction" startLine="169" endLine="171" />
    <javadoc>
      <text>* Returns the scheduled activity that's updating the scene as a result to
 * the current drag activity (if any).</text>
      <return>scheduled activity that's updating the scene as a result to the
 * drag activity</return>
    </javadoc>
    <method type="PActivity" name="getDragActivity" startLine="186" endLine="188" />
    <javadoc>
      <text>* Schedules the "infinite" drag activity so that auto-panning and zooming
 * will continue to update the scene even if there are no further drag
 * events fired. For example, if the mouse is dragged to the right while
 * pressing the right mouse button and then paused for a while, the scene
 * should continue to zoom in.</text>
      <param>event the event that's responsible for the start of the activity</param>
    </javadoc>
    <method type="void" name="startDragActivity" startLine="199" endLine="216">
      <method type="void" name="activityStarted" startLine="202" endLine="204" />
      <method type="void" name="activityStepped" startLine="206" endLine="208" />
      <method type="void" name="activityFinished" startLine="210" endLine="212" />
    </method>
    <javadoc>
      <text>* Stops the activity responsible for updating the scene.</text>
      <param>event The event responsible for stopping the drag activity</param>
    </javadoc>
    <method type="void" name="stopDragActivity" startLine="223" endLine="226" />
    <javadoc>
      <text>* Subclasses override this method to get notified when the drag activity
 * starts stepping.</text>
      <param>event the event responsible for the first step in the drag
 * activity</param>
    </javadoc>
    <method type="void" name="dragActivityFirstStep" startLine="235" endLine="236" />
    <javadoc>
      <text>* During a drag sequence an activity is scheduled that runs continuously
 * while the drag sequence is active. This can be used to support some
 * additional behavior that is not driven directly by mouse events. For
 * example PZoomEventHandler uses it for zooming and PPanEventHandler uses
 * it for auto panning.</text>
      <param>event the event encapsulating the callback context for the
 * activity step</param>
    </javadoc>
    <method type="void" name="dragActivityStep" startLine="248" endLine="249" />
    <javadoc>
      <text>* Subclasses should override this method to get notified when the drag
 * activity stops stepping.</text>
      <param>aEvent the event responsible for ending the activity</param>
    </javadoc>
    <method type="void" name="dragActivityFinalStep" startLine="257" endLine="258" />
    <javadoc>
      <text>* Subclasses should not override this method, instead they should
 * override the appropriate drag callbacks.</text>
      <param>event The event to be queried about the details of the mouse press</param>
    </javadoc>
    <method type="void" name="mousePressed" startLine="266" endLine="277">
      <scope startLine="269" endLine="276">
        <scope startLine="273" endLine="275" />
      </scope>
    </method>
    <javadoc>
      <text>* Subclasses should not override this method, instead they should
 * override the appropriate drag method.</text>
      <param>event The event to be queried about the details of the mouse press</param>
    </javadoc>
    <method type="void" name="mouseDragged" startLine="285" endLine="297">
      <scope startLine="288" endLine="296">
        <scope startLine="289" endLine="294">
          <scope startLine="290" endLine="292" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Subclasses should not override this method, instead they should
 * override the appropriate drag method.</text>
      <param>event The event to be queried about the details of the mouse release</param>
    </javadoc>
    <method type="void" name="mouseReleased" startLine="305" endLine="313">
      <scope startLine="307" endLine="312">
        <scope startLine="308" endLine="310" />
      </scope>
    </method>
    <comment>****************************************************************</comment>
    <comment>Dragging - Methods to indicate the stages of the drag sequence.</comment>
    <comment>****************************************************************</comment>
    <comment>****************************************************************</comment>
    <comment>Drag Activity - Used for scheduling an activity during a drag</comment>
    <comment>sequence. For example zooming and auto panning are implemented</comment>
    <comment>using this.</comment>
    <comment>****************************************************************</comment>
  </class>
</source>
