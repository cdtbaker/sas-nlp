<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.examples">
  <import name="java.awt.BasicStroke" />
  <import name="java.awt.event.InputEvent" />
  <import name="java.awt.geom.Point2D" />
  <import name="edu.umd.cs.piccolo.PCanvas" />
  <import name="edu.umd.cs.piccolo.PLayer" />
  <import name="edu.umd.cs.piccolo.event.PBasicInputEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PInputEvent" />
  <import name="edu.umd.cs.piccolo.event.PInputEventFilter" />
  <import name="edu.umd.cs.piccolo.nodes.PPath" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <import name="edu.umd.cs.piccolox.PFrame" />
  <class name="EventHandlerExample" extends="PFrame" startLine="44">
    <javadoc>
      <text>* This example shows how to create and install a custom event listener that
 * draws rectangles.</text>
    </javadoc>
    <javadoc />
    <declaration type="long" name="serialVersionUID" />
    <method type="constructor" name="EventHandlerExample" startLine="55" endLine="57" />
    <method type="constructor" name="EventHandlerExample" startLine="59" endLine="61" />
    <method type="void" name="initialize" startLine="63" endLine="81">
      <declaration type="PBasicInputEventHandler" name="rectEventHandler" />
      <comment>Create a new event handler the creates new rectangles on</comment>
      <comment>mouse pressed, dragged, release.</comment>
      <comment>Make the event handler only work with BUTTON1 events, so that it does</comment>
      <comment>not conflict with the zoom event handler that is installed by</comment>
      <comment>default.</comment>
      <comment>Remove the pan event handler that is installed by default so that it</comment>
      <comment>does not conflict with our new rectangle creation event handler.</comment>
      <comment>Register our new event handler.</comment>
    </method>
    <method type="PBasicInputEventHandler" name="createRectangleEventHandler" startLine="83" endLine="147">
      <declaration type="PPath" name="rectangle" />
      <declaration type="Point2D" name="pressPoint" />
      <declaration type="Point2D" name="dragPoint" />
      <method type="void" name="mousePressed" startLine="101" endLine="118">
        <declaration type="PLayer" name="layer" />
      </method>
      <method type="void" name="mouseDragged" startLine="120" endLine="127" />
      <method type="void" name="mouseReleased" startLine="129" endLine="134" />
      <method type="void" name="updateRectangle" startLine="136" endLine="145">
        <declaration type="PBounds" name="b" />
      </method>
      <comment>Create a new subclass of PBasicEventHandler that creates new PPath</comment>
      <comment>nodes on mouse pressed, dragged, and released sequences. Not that</comment>
      <comment>subclassing PDragSequenceEventHandler would make this class easier to</comment>
      <comment>implement, but here you can see how to do it from scratch.</comment>
      <comment>The rectangle that is currently getting created.</comment>
      <comment>The mouse press location for the current pressed, drag, release</comment>
      <comment>sequence.</comment>
      <comment>The current drag location.</comment>
      <comment>Initialize the locations.</comment>
      <comment>create a new rectangle and add it to the canvas layer so that</comment>
      <comment>we can see it.</comment>
      <comment>update the rectangle shape.</comment>
      <comment>update the drag point location.</comment>
      <comment>update the rectangle shape.</comment>
      <comment>update the rectangle shape.</comment>
      <comment>create a new bounds that contains both the press and current</comment>
      <comment>drag point.</comment>
      <comment>Set the rectangles bounds.</comment>
    </method>
    <method type="void" name="main" startLine="149" endLine="151" />
  </class>
</source>
