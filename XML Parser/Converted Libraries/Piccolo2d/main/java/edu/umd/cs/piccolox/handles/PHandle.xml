<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.handles">
  <import name="java.awt.Color" />
  <import name="java.awt.Shape" />
  <import name="java.awt.event.InputEvent" />
  <import name="java.awt.geom.Ellipse2D" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.beans.PropertyChangeEvent" />
  <import name="java.beans.PropertyChangeListener" />
  <import name="java.io.IOException" />
  <import name="java.io.ObjectInputStream" />
  <import name="edu.umd.cs.piccolo.PCamera" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.event.PDragSequenceEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PInputEvent" />
  <import name="edu.umd.cs.piccolo.event.PInputEventFilter" />
  <import name="edu.umd.cs.piccolo.nodes.PPath" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <import name="edu.umd.cs.piccolo.util.PDimension" />
  <import name="edu.umd.cs.piccolox.util.PLocator" />
  <import name="edu.umd.cs.piccolox.util.PNodeLocator" />
  <class name="PHandle" extends="PPath" startLine="52">
    <javadoc>
      <text>* <b>PHandle</b> is used to modify some aspect of Piccolo when it is dragged.
 * Each handle has a PLocator that it uses to automatically position itself. See
 * PBoundsHandle for an example of a handle that resizes the bounds of another
 * node.</text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <class name="HandleDragHandler" extends="PDragSequenceEventHandler" startLine="62">
      <method type="void" name="startDrag" startLine="63" endLine="66" />
      <method type="void" name="drag" startLine="68" endLine="74">
        <declaration type="PDimension" name="aDelta" />
        <scope startLine="71" endLine="73" />
      </method>
      <method type="void" name="endDrag" startLine="76" endLine="79" />
      <declaration type="long" name="serialVersionUID" />
      <javadoc>
        <text>* The default size for a handle.</text>
      </javadoc>
      <declaration type="float" name="DEFAULT_HANDLE_SIZE" />
      <javadoc>
        <text>* Default shape to use when drawing handles.</text>
      </javadoc>
      <declaration type="Shape" name="DEFAULT_HANDLE_SHAPE" />
      <javadoc>
        <text>* Default color to paint handles.</text>
      </javadoc>
      <declaration type="Color" name="DEFAULT_COLOR" />
      <declaration type="PLocator" name="locator" />
      <declaration type="PDragSequenceEventHandler" name="handleDragger" />
      <javadoc>
        <text>* Construct a new handle that will use the given locator to locate itself
 * on its parent node.</text>
        <param>aLocator locator to use when laying out the handle</param>
      </javadoc>
      <method type="constructor" name="PHandle" startLine="101" endLine="106" />
      <javadoc>
        <text>* Installs the handler that notify its subclasses of handle interaction.</text>
      </javadoc>
      <method type="void" name="installHandleEventHandlers" startLine="111" endLine="128">
        <method type="void" name="propertyChange" startLine="115" endLine="117" />
        <comment>no need for moved events for handle interaction,</comment>
        <comment>so reject them so we don't consume them</comment>
      </method>
      <javadoc>
        <text>* Return the event handler that is responsible for the drag handle
 * interaction.</text>
        <return>current handler for HandleDrag events</return>
      </javadoc>
      <method type="PDragSequenceEventHandler" name="getHandleDraggerHandler" startLine="136" endLine="138" />
      <javadoc>
        <text>* Get the locator that this handle uses to position itself on its parent
 * node.</text>
        <return>the locator associated with this handle</return>
      </javadoc>
      <method type="PLocator" name="getLocator" startLine="146" endLine="148" />
      <javadoc>
        <text>* Set the locator that this handle uses to position itself on its parent
 * node.</text>
        <param>locator the locator to assign to this handle</param>
      </javadoc>
      <method type="void" name="setLocator" startLine="156" endLine="160" />
      <javadoc>
        <text>* Override this method to get notified when the handle starts to get
 * dragged.</text>
        <param>aLocalPoint point on the handle at which the event occurred</param>
        <param>aEvent the event responsible for starting the dragging</param>
      </javadoc>
      <method type="void" name="startHandleDrag" startLine="169" endLine="170" />
      <javadoc>
        <text>* Override this method to get notified as the handle is dragged.</text>
        <param>aLocalDimension size of the drag in handle coordinates</param>
        <param>aEvent event representing the drag</param>
      </javadoc>
      <method type="void" name="dragHandle" startLine="178" endLine="179" />
      <javadoc>
        <text>* Override this method to get notified when the handle stops getting
 * dragged.</text>
        <param>aLocalPoint point in handle coordinate system of the end of the
 * drag</param>
        <param>aEvent event responsible for ending the drag</param>
      </javadoc>
      <method type="void" name="endHandleDrag" startLine="189" endLine="190" />
      <javadoc>
        <text>* Set's this handle's parent. Handles respond to changes in their parent's
 * bounds by invalidating themselves.</text>
        <param>newParent the new parent to assign to this handle</param>
      </javadoc>
      <method type="void" name="setParent" startLine="198" endLine="201" />
      <javadoc>
        <text>* Forces the handles to reposition themselves using their associated
 * locator.</text>
      </javadoc>
      <method type="void" name="parentBoundsChanged" startLine="207" endLine="209" />
      <javadoc>
        <text>* Force this handle to relocate itself using its locator.</text>
      </javadoc>
      <method type="void" name="relocateHandle" startLine="214" endLine="242">
        <scope startLine="215" endLine="217" />
        <declaration type="PBounds" name="b" />
        <declaration type="Point2D" name="aPoint" />
        <scope startLine="222" endLine="232">
          <declaration type="PNode" name="located" />
          <declaration type="PNode" name="parent" />
          <scope startLine="229" endLine="231" />
        </scope>
        <declaration type="double" name="newCenterX" />
        <declaration type="double" name="newCenterY" />
        <scope startLine="237" endLine="240" />
      </method>
      <javadoc>
        <text>* Deserializes a PHandle from the input stream provided. Ensures tha all
 * event handles are correctly installed.</text>
        <param>in stream from which to read the handle</param>
        <throws>IOException is thrown if the underlying input stream fails</throws>
        <throws>ClassNotFoundException should never happen but can happen if the
 * classpath gets messed up</throws>
      </javadoc>
      <method type="void" name="readObject" startLine="253" endLine="256" />
    </class>
  </class>
</source>
