<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.pswing">
  <import name="java.awt.Component" />
  <import name="java.awt.Container" />
  <import name="java.awt.Point" />
  <import name="java.awt.event.InputEvent" />
  <import name="java.awt.event.MouseEvent" />
  <import name="java.awt.event.MouseWheelEvent" />
  <import name="java.awt.geom.AffineTransform" />
  <import name="java.awt.geom.NoninvertibleTransformException" />
  <import name="java.awt.geom.Point2D" />
  <import name="javax.swing.SwingUtilities" />
  <import name="edu.umd.cs.piccolo.PCamera" />
  <import name="edu.umd.cs.piccolo.PLayer" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.event.PInputEvent" />
  <import name="edu.umd.cs.piccolo.event.PInputEventListener" />
  <import name="edu.umd.cs.piccolo.util.PAffineTransform" />
  <import name="edu.umd.cs.piccolo.util.PAffineTransformException" />
  <class name="PSwingEventHandler" startLine="51">
    <implements name="PInputEventListener" />
    <javadoc>
      <text>* Event handler to send MousePressed, MouseReleased, MouseMoved, MouseClicked,
 * and MouseDragged events on Swing components within a PCanvas.</text>
      <author>Ben Bederson</author>
      <author>Lance Good</author>
      <author>Sam Reid</author>
    </javadoc>
    <javadoc>
      <text>* Used to listen for events.</text>
    </javadoc>
    <declaration type="PNode" name="listenNode" />
    <javadoc>
      <text>* Tracks whether this event handler is active.</text>
    </javadoc>
    <declaration type="boolean" name="active" />
    <javadoc>
      <text>* The previous component - used to generate mouseEntered and mouseExited
 * events.</text>
    </javadoc>
    <declaration type="Component" name="previousComponent" />
    <javadoc>
      <text>* Previous point used for mouseEntered and exited events.</text>
    </javadoc>
    <declaration type="Point2D" name="prevPoint" />
    <javadoc>
      <text>* Previous offset used for mouseEntered and exited events.</text>
    </javadoc>
    <declaration type="Point2D" name="previousOffset" />
    <javadoc>
      <text>* Used to avoid accidental recursive handling.</text>
    </javadoc>
    <declaration type="boolean" name="recursing" />
    <javadoc>
      <text>* Used for tracking the left button's state.</text>
    </javadoc>
    <declaration type="ButtonData" name="leftButtonData" />
    <javadoc>
      <text>* Used for tracking the middle button's state.</text>
    </javadoc>
    <declaration type="ButtonData" name="middleButtonData" />
    <javadoc>
      <text>* Used for tracking the right button's state.</text>
    </javadoc>
    <declaration type="ButtonData" name="rightButtonData" />
    <javadoc>
      <text>* The Canvas in which all this pswing activity is taking place.</text>
    </javadoc>
    <declaration type="PSwingCanvas" name="canvas" />
    <javadoc>
      <text>* Constructs a new PSwingEventHandler for the given canvas, and a node that
 * will receive the mouse events.</text>
      <param>canvas the canvas associated with this PSwingEventHandler.</param>
      <param>listenNode the node the mouse listeners will be attached to.</param>
    </javadoc>
    <method type="constructor" name="PSwingEventHandler" startLine="100" endLine="103" />
    <javadoc>
      <text>* Constructs a new PSwingEventHandler for the given canvas.</text>
      <param>canvas to associate this event handler to</param>
    </javadoc>
    <method type="constructor" name="PSwingEventHandler" startLine="110" endLine="112" />
    <javadoc>
      <text>* Sets whether this event handler can fire events.</text>
      <param>active true if this event handler can fire events</param>
    </javadoc>
    <method type="void" name="setActive" startLine="119" endLine="130">
      <scope startLine="120" endLine="125">
        <scope startLine="121" endLine="124" />
      </scope>
      <scope startLine="126" endLine="129" />
    </method>
    <javadoc>
      <text>* Returns if this event handler is active.</text>
      <return>true if can fire events</return>
    </javadoc>
    <method type="boolean" name="isActive" startLine="137" endLine="139" />
    <javadoc>
      <text>* Finds the best visible component or subcomponent at the specified
 * location.</text>
      <param>component component to test children or self for</param>
      <param>x x component of location</param>
      <param>y y component of location</param>
      <return>the component or subcomponent at the specified location.</return>
    </javadoc>
    <method type="Component" name="findShowingComponentAt" startLine="150" endLine="163">
      <scope startLine="151" endLine="153" />
      <scope startLine="155" endLine="161">
        <declaration type="Container" name="contain" />
        <declaration type="Component" name="child" />
        <scope startLine="158" endLine="160" />
      </scope>
    </method>
    <method type="Component" name="findShowingChildAt" startLine="165" endLine="185">
      <declaration type="Component[]" name="children" />
      <scope startLine="168" endLine="182">
        <declaration type="Component" name="child" />
        <scope startLine="170" endLine="181">
          <declaration type="Point" name="p" />
          <scope startLine="172" endLine="174" />
          <scope startLine="175" endLine="177" />
          <scope startLine="178" endLine="180" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Determines if any Swing components in Piccolo2D should receive the given
 * MouseEvent and forwards the event to that component. However,
 * mouseEntered and mouseExited are independent of the buttons. Also, notice
 * the notes on mouseEntered and mouseExited.</text>
      <param>pSwingMouseEvent event being dispatched</param>
      <param>aEvent Piccolo2D event translation of the pSwingMouseEvent</param>
    </javadoc>
    <method type="void" name="dispatchEvent" startLine="196" endLine="317">
      <declaration type="MouseEvent" name="mEvent" />
      <declaration type="PNode" name="pickedNode" />
      <declaration type="PNode" name="currentNode" />
      <declaration type="Component" name="comp" />
      <declaration type="Point" name="point" />
      <declaration type="Point" name="offset" />
      <scope startLine="206" endLine="241">
        <declaration type="PSwing" name="swing" />
        <declaration type="PNode" name="grabNode" />
        <scope startLine="224" endLine="226" />
        <scope startLine="230" endLine="240">
          <scope startLine="231" endLine="233" />
          <scope startLine="234" endLine="236" />
          <scope startLine="237" endLine="239" />
        </scope>
        <comment>This is only partially fixed to find the deepest</comment>
        <comment>component at pt. It needs to do something like</comment>
        <comment>package private method:</comment>
        <comment>Container.getMouseEventTarget(int,int,boolean)</comment>
        <comment>We found the right component - but we need to</comment>
        <comment>get the offset to put the event in the component's</comment>
        <comment>coordinates</comment>
        <comment>Mouse Pressed gives focus - effects Mouse Drags and</comment>
        <comment>Mouse Releases</comment>
      </scope>
      <scope startLine="246" endLine="258">
        <scope startLine="247" endLine="249" />
        <scope startLine="251" endLine="253" />
        <scope startLine="255" endLine="257" />
      </scope>
      <scope startLine="259" endLine="266">
        <declaration type="MouseEvent" name="tempEvent" />
        <declaration type="PSwingEvent" name="e2" />
      </scope>
      <scope startLine="267" endLine="277">
        <declaration type="MouseWheelEvent" name="mWEvent" />
        <declaration type="MouseWheelEvent" name="tempEvent" />
        <declaration type="PSwingMouseWheelEvent" name="e2" />
      </scope>
      <scope startLine="282" endLine="305">
        <scope startLine="286" endLine="293">
          <declaration type="MouseEvent" name="tempEvent" />
          <declaration type="PSwingEvent" name="e2" />
        </scope>
        <scope startLine="296" endLine="304">
          <declaration type="MouseEvent" name="tempEvent" />
          <declaration type="PSwingEvent" name="e2" />
        </scope>
        <comment>This means mouseExited</comment>
        <comment>This shouldn't happen - since we're only getting node events</comment>
        <comment>This means mouseExited prevComponent and mouseEntered comp</comment>
      </scope>
      <scope startLine="306" endLine="310">
        <declaration type="MouseEvent" name="tempEvent" />
        <declaration type="PSwingEvent" name="e2" />
        <comment>This means mouseEntered</comment>
      </scope>
      <scope startLine="314" endLine="316" />
      <comment>This first case we don't want to give events to just</comment>
      <comment>any Swing component - but to the one that got the</comment>
      <comment>original mousePressed</comment>
      <comment>Now we need to check if an exit or enter event needs to</comment>
      <comment>be dispatched - this code is independent of the mouseButtons.</comment>
      <comment>I tested in normal Swing to see the correct behavior.</comment>
    </method>
    <method type="Point" name="extractSwingOffset" startLine="319" endLine="329">
      <declaration type="int" name="offsetX" />
      <declaration type="int" name="offsetY" />
      <scope startLine="323" endLine="326" />
    </method>
    <method type="boolean" name="isRightMouseButtonOnComponent" startLine="331" endLine="333" />
    <method type="boolean" name="isMiddleMouseButtonOnComponent" startLine="335" endLine="337" />
    <method type="boolean" name="isLeftMouseButtonOnComponent" startLine="339" endLine="341" />
    <method type="boolean" name="isMousePress" startLine="343" endLine="345" />
    <method type="boolean" name="isWheelEvent" startLine="347" endLine="349" />
    <method type="boolean" name="isPressOrClickOrMove" startLine="351" endLine="354" />
    <method type="boolean" name="isDragOrRelease" startLine="356" endLine="359" />
    <method type="MouseEvent" name="createEnterEvent" startLine="361" endLine="364" />
    <method type="MouseEvent" name="createExitEvent" startLine="366" endLine="370" />
    <method type="void" name="handleButton" startLine="372" endLine="397">
      <declaration type="MouseEvent" name="m1" />
      <scope startLine="374" endLine="386">
        <declaration type="Point2D" name="pt" />
        <declaration type="MouseEvent" name="tempEvent" />
        <declaration type="PSwingEvent" name="e2" />
        <comment>TODO: this probably won't handle viewing through multiple</comment>
        <comment>cameras.</comment>
      </scope>
      <scope startLine="387" endLine="389" />
      <scope startLine="394" endLine="396" />
      <comment>buttonData.getPSwing().repaint(); Experiment with SliderExample</comment>
      <comment>(from Martin) suggests this line is unnecessary, and a serious</comment>
      <comment>problem in performance.</comment>
    </method>
    <method type="boolean" name="involvesSceneNode" startLine="399" endLine="401" />
    <method type="void" name="dispatchEvent" startLine="403" endLine="409">
      <method type="void" name="run" startLine="405" endLine="407" />
    </method>
    <javadoc>
      <text>* Transforms the given point from camera coordinates to the node's local
 * system.</text>
      <param>camera camera from which coordinates are measured</param>
      <param>pt point to transform (will be modified)</param>
      <param>node node from which local coordinates are measured</param>
    </javadoc>
    <method type="void" name="cameraToLocal" startLine="419" endLine="428">
      <scope startLine="420" endLine="427">
        <scope startLine="421" endLine="424">
          <declaration type="AffineTransform" name="inverse" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Returns true if the provided layer has a PLayer ancestor.</text>
      <param>node node being tested</param>
      <return>true if node is a descendant of a PLayer</return>
    </javadoc>
    <method type="boolean" name="descendsFromLayer" startLine="437" endLine="446">
      <declaration type="PNode" name="searchNode" />
      <scope startLine="439" endLine="444">
        <scope startLine="441" endLine="443" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the inverse transform for the provided transform. Throws
 * exception if transform is non invertible.</text>
      <param>transform transform to invert</param>
      <return>inverted transform</return>
    </javadoc>
    <method type="AffineTransform" name="invertTransform" startLine="455" endLine="462">
      <scope startLine="456" endLine="458" />
      <scope startLine="459" endLine="461" />
    </method>
    <javadoc>
      <text>* Process a Piccolo2D event and (if active) dispatch the corresponding
 * Swing event.</text>
      <param>aEvent Piccolo2D event being tested for dispatch to swing</param>
      <param>type is not used in this method</param>
    </javadoc>
    <method type="void" name="processEvent" startLine="471" endLine="483">
      <scope startLine="472" endLine="474" />
      <declaration type="InputEvent" name="sourceSwingEvent" />
      <scope startLine="477" endLine="480" />
    </method>
    <method type="void" name="processMouseEvent" startLine="485" endLine="497">
      <scope startLine="486" endLine="496">
        <declaration type="PSwingEvent" name="pSwingMouseEvent" />
        <scope startLine="492" endLine="494" />
      </scope>
    </method>
    <class name="ButtonData" startLine="499">
      <javadoc>
        <text>* Internal Utility class for handling button interactivity.</text>
      </javadoc>
      <declaration type="PNode" name="focusNode" />
      <declaration type="Component" name="focusComponent" />
      <declaration type="int" name="focusOffX" />
      <declaration type="int" name="focusOffY" />
      <method type="void" name="setState" startLine="508" endLine="513" />
      <method type="Component" name="getFocusedComponent" startLine="515" endLine="517" />
      <method type="PNode" name="getPNode" startLine="519" endLine="521" />
      <method type="int" name="getOffsetX" startLine="523" endLine="525" />
      <method type="int" name="getOffsetY" startLine="527" endLine="529" />
      <method type="void" name="mouseReleased" startLine="531" endLine="534" />
    </class>
  </class>
</source>
