<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.swing">
  <import name="java.awt.Dimension" />
  <import name="java.awt.Point" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.awt.geom.Rectangle2D" />
  <import name="java.beans.PropertyChangeEvent" />
  <import name="java.beans.PropertyChangeListener" />
  <import name="java.util.Iterator" />
  <import name="java.util.List" />
  <import name="javax.swing.ScrollPaneConstants" />
  <import name="edu.umd.cs.piccolo.PCamera" />
  <import name="edu.umd.cs.piccolo.PCanvas" />
  <import name="edu.umd.cs.piccolo.PLayer" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.PRoot" />
  <import name="edu.umd.cs.piccolo.util.PAffineTransform" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <class name="PDefaultScrollDirector" startLine="50">
    <implements name="PScrollDirector" />
    <implements name="PropertyChangeListener" />
    <javadoc>
      <text>* The default scroll director implementation. This default implementation
 * follows the widely accepted model of scrolling - namely the scrollbars
 * control the movement of the window over the document rather than the movement
 * of the document under the window.</text>
      <author>Lance Good</author>
    </javadoc>
    <javadoc>
      <text>* The viewport that signals this scroll director.</text>
    </javadoc>
    <declaration type="PViewport" name="viewPort" />
    <javadoc>
      <text>* The scrollpane that contains the viewport.</text>
    </javadoc>
    <declaration type="PScrollPane" name="scrollPane" />
    <javadoc>
      <text>* The canvas that this class directs.</text>
    </javadoc>
    <declaration type="PCanvas" name="view" />
    <javadoc>
      <text>* The canvas' camera.</text>
    </javadoc>
    <declaration type="PCamera" name="camera" />
    <javadoc>
      <text>* The canvas' root.</text>
    </javadoc>
    <declaration type="PRoot" name="root" />
    <javadoc>
      <text>* Flag to indicate when scrolling is currently in progress.</text>
    </javadoc>
    <declaration type="boolean" name="scrollInProgress" />
    <javadoc>
      <text>* The default constructor.</text>
    </javadoc>
    <method type="constructor" name="PDefaultScrollDirector" startLine="81" endLine="82" />
    <javadoc>
      <text>* Installs the scroll director and adds the appropriate listeners.</text>
      <param>targetViewPort viewport on which this director directs</param>
      <param>targetView PCanvas that the viewport looks at</param>
    </javadoc>
    <method type="void" name="install" startLine="90" endLine="110">
      <scope startLine="95" endLine="98" />
      <scope startLine="100" endLine="102" />
      <scope startLine="103" endLine="105" />
      <scope startLine="107" endLine="109" />
    </method>
    <javadoc>
      <text>* Uninstall the scroll director from the viewport.</text>
    </javadoc>
    <method type="void" name="unInstall" startLine="115" endLine="128">
      <scope startLine="119" endLine="121" />
      <scope startLine="122" endLine="124" />
    </method>
    <javadoc>
      <text>* Get the View position given the specified camera bounds.</text>
      <param>viewBounds The bounds for which the view position will be computed</param>
      <return>The view position</return>
    </javadoc>
    <method type="Point" name="getViewPosition" startLine="136" endLine="157">
      <declaration type="Point" name="pos" />
      <scope startLine="138" endLine="154">
        <declaration type="PBounds" name="layerBounds" />
        <declaration type="List" name="layers" />
        <scope startLine="142" endLine="145">
          <declaration type="PLayer" name="layer" />
        </scope>
        <comment>First we compute the union of all the layers</comment>
        <comment>Then we put the bounds into camera coordinates and</comment>
        <comment>union the camera bounds</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Get the size of the view based on the specified camera bounds.</text>
      <param>viewBounds The view bounds for which the view size will be
 * computed</param>
      <return>The view size</return>
    </javadoc>
    <method type="Dimension" name="getViewSize" startLine="166" endLine="188">
      <declaration type="Dimension" name="size" />
      <scope startLine="168" endLine="185">
        <declaration type="PBounds" name="bounds" />
        <declaration type="List" name="layers" />
        <scope startLine="172" endLine="175">
          <declaration type="PLayer" name="layer" />
        </scope>
        <scope startLine="179" endLine="181" />
        <comment>First we compute the union of all the layers</comment>
        <comment>Then we put the bounds into camera coordinates and</comment>
        <comment>union the camera bounds</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Set the view position in a manner consistent with standardized scrolling.</text>
      <param>x The new x position</param>
      <param>y The new y position</param>
    </javadoc>
    <method type="void" name="setViewPosition" startLine="196" endLine="236">
      <scope startLine="199" endLine="201" />
      <declaration type="PBounds" name="layerBounds" />
      <declaration type="List" name="layers" />
      <scope startLine="208" endLine="211">
        <declaration type="PLayer" name="layer" />
      </scope>
      <declaration type="PAffineTransform" name="at" />
      <declaration type="PBounds" name="viewBounds" />
      <declaration type="Point2D" name="newPoint" />
      <declaration type="double" name="newX" />
      <declaration type="double" name="newY" />
      <comment>Bail out if scrollInProgress because we can end up with an infinite</comment>
      <comment>loop since the scrollbars depend on the camera location</comment>
      <comment>Get the union of all the layers' bounds</comment>
      <comment>Union the camera bounds</comment>
      <comment>Now find the new view position in view coordinates</comment>
      <comment>Now transform the new view position into global coords</comment>
      <comment>Compute the new matrix values to put the camera at the</comment>
      <comment>correct location</comment>
      <comment>Now actually set the camera's transform</comment>
    </method>
    <javadoc>
      <text>* Invoked when the camera's view changes, or the bounds of the root or
 * camera changes.</text>
      <param>pce property change event to examine</param>
    </javadoc>
    <method type="void" name="propertyChange" startLine="244" endLine="257">
      <declaration type="boolean" name="isRelevantViewEvent" />
      <declaration type="boolean" name="isRelevantBoundsEvent" />
      <scope startLine="249" endLine="256">
        <scope startLine="250" endLine="252" />
        <scope startLine="253" endLine="255" />
      </scope>
    </method>
    <method type="boolean" name="isBoundsChangedEvent" startLine="259" endLine="261" />
    <javadoc>
      <text>* Should the ScrollPane be revalidated. This occurs when either the scroll
 * bars are showing and should be remove or are not showing and should be
 * added.</text>
      <return>Whether the scroll pane should be revalidated</return>
    </javadoc>
    <method type="boolean" name="shouldRevalidateScrollPane" startLine="270" endLine="307">
      <scope startLine="271" endLine="305">
        <scope startLine="273" endLine="275" />
        <declaration type="PBounds" name="layerBounds" />
        <declaration type="List" name="layers" />
        <scope startLine="280" endLine="283">
          <declaration type="PLayer" name="layer" />
        </scope>
        <declaration type="PBounds" name="cameraBounds" />
        <declaration type="int" name="layerWidth" />
        <declaration type="int" name="layerHeight" />
        <declaration type="int" name="cameraWidth" />
        <declaration type="int" name="cameraHeight" />
        <scope startLine="302" endLine="304" />
        <comment>Get the union of all the layers' bounds</comment>
        <comment>Put into camera coordinates</comment>
        <comment>And union with the camera bounds</comment>
        <comment>Truncate these to ints before comparing since</comment>
        <comment>that's what the ScrollPane uses</comment>
      </scope>
    </method>
  </class>
</source>
