<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.activities">
  <import name="java.awt.Color" />
  <class name="PColorActivity" extends="PInterpolatingActivity" startLine="33">
    <javadoc>
      <text>* <b>PColorActivity</b> interpolates between two colors for its target over the
 * duration of the animation. The source color is retrieved from the target just
 * before the activity is scheduled to start.
 * <P></text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <declaration type="Color" name="source" />
    <declaration type="Color" name="destination" />
    <declaration type="Target" name="target" />
    <interface name="Target" startLine="48">
      <javadoc>
        <text>* <b>Target</b> Objects that want their color to be set by the color
 * activity must implement this interface.</text>
      </javadoc>
      <method name="setColor" type="void" startLine="54" endLine="60" />
      <javadoc>
        <text>* This will be called by the color activity for each new interpolated
 * color that it computes while it is stepping.</text>
        <param>color the color to assign to the target</param>
      </javadoc>
      <method name="getColor" type="Color" startLine="62" endLine="68" />
      <javadoc>
        <text>* This method is called right before the color activity starts. That
 * way an object's color is always animated from its current color.</text>
        <return>the target's current color.</return>
      </javadoc>
      <javadoc>
        <text>* Constructs a color activity for the given target that will animate for
 * the duration provided at an interval of stepRate.
 * Destination color must be assigned later.</text>
        <param>duration duration in milliseconds that the animation should last</param>
        <param>stepRate the time between interpolations</param>
        <param>aTarget the target onto which the animation is being performed</param>
      </javadoc>
      <method type="constructor" name="PColorActivity" startLine="81" endLine="83" />
      <javadoc>
        <text>* Constructs a color activity for the given target that will animate for
 * the duration provided at an interval of stepRate from the target's
 * starting color to the destination color.</text>
        <param>duration duration in milliseconds that the animation should last</param>
        <param>stepRate the time between interpolations</param>
        <param>aTarget the target onto which the animation is being performed</param>
        <param>aDestination the color to which the animation is aiming at</param>
      </javadoc>
      <method type="constructor" name="PColorActivity" startLine="95" endLine="97" />
      <javadoc>
        <text>* Create a new PColorActivity.</text>
        <param>duration the length of one loop of the activity</param>
        <param>stepRate the amount of time between steps of the activity</param>
        <param>loopCount number of times the activity should reschedule itself</param>
        <param>mode defines how the activity interpolates between states</param>
        <param>aTarget the object that the activity will be applied to and where
 * the source state will be taken from.</param>
        <param>aDestination the destination color state</param>
      </javadoc>
      <method type="constructor" name="PColorActivity" startLine="111" endLine="115" />
      <javadoc>
        <text>* Returns true since all PColorActivities animate the scene.</text>
        <return>always returns true</return>
      </javadoc>
      <method type="boolean" name="isAnimation" startLine="122" endLine="124" />
      <javadoc>
        <text>* Return the final color that will be set on the color activities target
 * when the activity stops stepping.</text>
        <return>the final color for this color activity</return>
      </javadoc>
      <method type="Color" name="getDestinationColor" startLine="132" endLine="134" />
      <javadoc>
        <text>* Set the final color that will be set on the color activities target when
 * the activity stops stepping.</text>
        <param>newDestination to animate towards</param>
      </javadoc>
      <method type="void" name="setDestinationColor" startLine="142" endLine="144" />
      <javadoc>
        <text>* Overrides it's parent to ensure that the source color is the color of the
 * node being animated.</text>
      </javadoc>
      <method type="void" name="activityStarted" startLine="150" endLine="155">
        <scope startLine="151" endLine="153" />
      </method>
      <javadoc>
        <text>* Interpolates the target node's color by mixing the source color and the
 * destination color.</text>
        <param>zeroToOne 0 = all source color, 1 = all destination color</param>
      </javadoc>
      <method type="void" name="setRelativeTargetValue" startLine="163" endLine="170">
        <declaration type="float" name="red" />
        <declaration type="float" name="green" />
        <declaration type="float" name="blue" />
        <declaration type="float" name="alpha" />
      </method>
    </interface>
  </class>
</source>
