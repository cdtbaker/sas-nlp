<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.util">
  <import name="java.awt.BasicStroke" />
  <import name="java.awt.Stroke" />
  <import name="java.io.ObjectStreamException" />
  <import name="java.io.Serializable" />
  <class name="PFixedWidthStroke" extends="PSemanticStroke" startLine="36">
    <implements name="Serializable" />
    <javadoc>
      <text>* <b>PFixedWidthStroke</b> is the same as {@link BasicStroke} except that
 * PFixedWidthStroke has a fixed width on the screen so that even when the
 * canvas view is zooming its width stays the same in canvas coordinates.
 * <p>{@link #createStrokedShape(Shape)} checks if the scale has changed since the
 * last usage and if that's the case calls {@link #newStroke(float)} to get a
 * new {@link Stroke} instance to delegate to.
 * <p>
 * <b>CAUTION!</b> this implementation falls short for large scaling factors -
 * the effective miterlimit might drop below 1.0 which isn't permitted by{@link BasicStroke} and therefore limited to a minimal 1.0 by this
 * implementation. A more sophisticated implementation might use the approach
 * mentioned at http://code.google.com/p/piccolo2d/issues/detail?id=49
 * <p>
 * <b>CAUTION!</b> after extreme scaling this implementation seems to change to
 * internal state of the base stroke. Try PathExample with extreme zoom in and
 * zoom back to the original scale. The pickable circles disappear. Strange!</text>
      <see>edu.umd.cs.piccolo.nodes.PPath</see>
      <see>BasicStroke</see>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <declaration type="float" name="DEFAULT_MITER_LIMIT" />
    <declaration type="BasicStroke" name="DEFAULT_STROKE" />
    <declaration type="long" name="serialVersionUID" />
    <declaration type="float[]" name="dash" />
    <declaration type="float[]" name="tmpDash" />
    <javadoc>
      <text>* Constructs a simple PFixedWidthStroke with the default stroke.</text>
    </javadoc>
    <method type="constructor" name="PFixedWidthStroke" startLine="78" endLine="80" />
    <javadoc>
      <text>* Making this constructor public would break encapsulation. Users don't
 * need to know that they are dealing with an adapter to an underlying
 * stroke.</text>
      <param>stroke stroke being used by this PFixedWithStroke</param>
    </javadoc>
    <method type="constructor" name="PFixedWidthStroke" startLine="89" endLine="98">
      <scope startLine="92" endLine="94" />
      <scope startLine="95" endLine="97" />
    </method>
    <javadoc>
      <text>* Constructs a simple PFixedWidthStroke with the width provided.</text>
      <param>width desired width of the stroke</param>
    </javadoc>
    <method type="constructor" name="PFixedWidthStroke" startLine="105" endLine="107" />
    <javadoc>
      <text>* Constructs a PFixedWidthStroke with the stroke properties provided.</text>
      <param>width width of stroke</param>
      <param>cap cap to use in stroke</param>
      <param>join join to use in stroke</param>
    </javadoc>
    <method type="constructor" name="PFixedWidthStroke" startLine="116" endLine="118" />
    <javadoc>
      <text>* Constructs a PFixedWidthStroke with the stroke properties provided.</text>
      <param>width width of stroke</param>
      <param>cap cap to use in stroke</param>
      <param>join join to use in stroke</param>
      <param>miterlimit miter limit of stroke</param>
    </javadoc>
    <method type="constructor" name="PFixedWidthStroke" startLine="128" endLine="130" />
    <javadoc>
      <text>* Constructs a PFixedWidthStroke with the stroke properties provided.</text>
      <param>width width of stroke</param>
      <param>cap cap to use in stroke</param>
      <param>join join to use in stroke</param>
      <param>miterlimit miter limit of stroke</param>
      <param>dash array of dash lengths</param>
      <param>dashPhase phase to use when rendering dashes</param>
    </javadoc>
    <method type="constructor" name="PFixedWidthStroke" startLine="143" endLine="145" />
    <javadoc>
      <text>* Throws an exception since PFixedWidthStrokes are not serializable.</text>
      <return>never returns anything</return>
    </javadoc>
    <method type="Object" name="clone" startLine="152" endLine="154" />
    <javadoc>
      <text>* Returns the array representing the lengths of the dash segments.
 * Alternate entries in the array represent the user space lengths of the
 * opaque and transparent segments of the dashes. As the pen moves along the
 * outline of the Shape to be stroked, the user space distance that the pen
 * travels is accumulated. The distance value is used to index into the dash
 * array. The pen is opaque when its current cumulative distance maps to an
 * even element of the dash array and transparent otherwise.</text>
      <return>the dash array</return>
    </javadoc>
    <method type="float[]" name="getDashArray" startLine="167" endLine="169" />
    <javadoc>
      <text>* Returns the current dash phase. The dash phase is a distance specified in
 * user coordinates that represents an offset into the dashing pattern. In
 * other words, the dash phase defines the point in the dashing pattern that
 * will correspond to the beginning of the stroke.</text>
      <return>the dash phase as a float value.</return>
    </javadoc>
    <method type="float" name="getDashPhase" startLine="179" endLine="181" />
    <javadoc>
      <text>* Returns the end cap style.</text>
      <return>the end cap style of this BasicStroke as one of the static int values that define possible end cap styles.</return>
    </javadoc>
    <method type="int" name="getEndCap" startLine="188" endLine="190" />
    <javadoc>
      <text>* Returns the line join style.</text>
      <return>the line join style of the <code>PFixedWidthStroke</code> as one
 * of the static <code>int</code> values that define possible line
 * join styles.</return>
    </javadoc>
    <method type="int" name="getLineJoin" startLine="199" endLine="201" />
    <javadoc>
      <text>* Returns the line width. Line width is represented in user space, which is
 * the default-coordinate space used by Java 2D. See the Graphics2D class
 * comments for more information on the user space coordinate system.</text>
      <return>the line width of this BasicStroke.</return>
    </javadoc>
    <method type="float" name="getLineWidth" startLine="210" endLine="212" />
    <javadoc>
      <text>* Returns the miter limit of this node.</text>
      <return>the limit of miter joins of the PFixedWidthStroke</return>
    </javadoc>
    <method type="float" name="getMiterLimit" startLine="219" endLine="221" />
    <javadoc>
      <text>* Returns a stroke equivalent to this one, but scaled by the scale
 * provided.</text>
      <param>activeScale scale to apply to the new stoke</param>
      <return>scaled stroke</return>
    </javadoc>
    <method type="Stroke" name="newStroke" startLine="230" endLine="247">
      <scope startLine="231" endLine="235">
        <scope startLine="232" endLine="234" />
      </scope>
      <declaration type="float" name="ml" />
      <declaration type="float" name="sanitizedMiterLimit" />
      <scope startLine="238" endLine="240" />
      <scope startLine="241" endLine="243" />
    </method>
    <javadoc>
      <text>* Is it really necessary to implement {@link Serializable}?</text>
      <throws>ObjectStreamException doesn't actually throw this at all, why's
 * this here?</throws>
      <return>the resolved stroke</return>
    </javadoc>
    <method type="Object" name="readResolve" startLine="256" endLine="258" />
    <comment>avoid repeated cloning:</comment>
    <comment>avoid repeated instantiations:</comment>
  </class>
</source>
