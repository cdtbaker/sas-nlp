<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.swt">
  <import name="java.awt.Color" />
  <import name="java.awt.Composite" />
  <import name="java.awt.Font" />
  <import name="java.awt.FontMetrics" />
  <import name="java.awt.Graphics" />
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.GraphicsConfiguration" />
  <import name="java.awt.Image" />
  <import name="java.awt.Paint" />
  <import name="java.awt.Point" />
  <import name="java.awt.Rectangle" />
  <import name="java.awt.RenderingHints" />
  <import name="java.awt.Shape" />
  <import name="java.awt.Stroke" />
  <import name="java.awt.RenderingHints.Key" />
  <import name="java.awt.font.FontRenderContext" />
  <import name="java.awt.font.GlyphVector" />
  <import name="java.awt.geom.AffineTransform" />
  <import name="java.awt.geom.Arc2D" />
  <import name="java.awt.geom.Ellipse2D" />
  <import name="java.awt.geom.NoninvertibleTransformException" />
  <import name="java.awt.geom.PathIterator" />
  <import name="java.awt.geom.Rectangle2D" />
  <import name="java.awt.geom.RoundRectangle2D" />
  <import name="java.awt.image.BufferedImage" />
  <import name="java.awt.image.BufferedImageOp" />
  <import name="java.awt.image.ImageObserver" />
  <import name="java.awt.image.RenderedImage" />
  <import name="java.awt.image.renderable.RenderableImage" />
  <import name="java.text.AttributedCharacterIterator" />
  <import name="java.util.HashMap" />
  <import name="java.util.Iterator" />
  <import name="java.util.Map" />
  <import name="org.eclipse.swt.SWT" />
  <import name="org.eclipse.swt.graphics.Device" />
  <import name="org.eclipse.swt.graphics.FontData" />
  <import name="org.eclipse.swt.graphics.GC" />
  <import name="org.eclipse.swt.graphics.Path" />
  <import name="org.eclipse.swt.graphics.Transform" />
  <class name="SWTGraphics2D" extends="Graphics2D" startLine="72">
    <javadoc>
      <text>* An extension to Graphics2D to support an SWT Piccolo Canvas with little
 * modification to the current Piccolo architecture
 * There is an outstanding SWT bug request #33319 for more efficient
 * polyline/polygon rendering methods. It also appears that most of the code
 * below could be made obselete by bug fix #6490
 * A lot of this may also be duplicated in GEF - the eclipse Graphical Editor
 * Framework</text>
      <author>Lance Good</author>
    </javadoc>
    <declaration type="int" name="DEFAULT_FONT_SIZE" />
    <declaration type="boolean" name="DEFAULT_STRING_TRANSPARENCY" />
    <javadoc>
      <text>* The number of Graphics Contexts active as determined by called to
 * incrementGCCount and decrementGCCount.</text>
    </javadoc>
    <declaration type="int" name="CACHE_COUNT" />
    <javadoc>
      <text>* Map from font names to Fonts.</text>
    </javadoc>
    <declaration type="HashMap" name="FONT_CACHE" />
    <javadoc>
      <text>* Map from awt colors to swt colors.</text>
    </javadoc>
    <declaration type="HashMap" name="COLOR_CACHE" />
    <javadoc>
      <text>* Map from awt shapess to swt Paths.</text>
    </javadoc>
    <declaration type="HashMap" name="SHAPE_CACHE" />
    <javadoc>
      <text>* Buffer used to extract the graphics device.</text>
    </javadoc>
    <declaration type="BufferedImage" name="BUFFER" />
    <declaration type="Point" name="TEMP_POINT" />
    <declaration type="Rectangle2D" name="TEMP_RECT" />
    <declaration type="Rectangle2D" name="TEMP_LINE_RECT" />
    <declaration type="org.eclipse.swt.graphics.Rectangle" name="SWT_RECT" />
    <javadoc>
      <text>* The Underlying GraphicsContext provided by swt.</text>
    </javadoc>
    <declaration type="GC" name="gc" />
    <javadoc>
      <text>* Device onto which all graphics operations will ultimately take place.</text>
    </javadoc>
    <declaration type="Device" name="device" />
    <javadoc>
      <text>* The current transform to apply to drawing operations.</text>
    </javadoc>
    <declaration type="AffineTransform" name="transform" />
    <declaration type="Transform" name="swtTransform" />
    <javadoc>
      <text>* The current font to use when drawing text.</text>
    </javadoc>
    <declaration type="org.eclipse.swt.graphics.Font" name="curFont" />
    <javadoc>
      <text>* The current stroke width to use when drawing lines.</text>
    </javadoc>
    <declaration type="double" name="lineWidth" />
    <javadoc>
      <text>* Constructor for SWTGraphics2D.</text>
      <param>gc The Eclipse Graphics Context onto which all Graphics2D
 * operations are delegating</param>
      <param>device Device onto which ultimately all gc operations are drawn
 * onto</param>
    </javadoc>
    <method type="constructor" name="SWTGraphics2D" startLine="129" endLine="135" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Rectangle" name="getClipBounds" startLine="142" endLine="152">
      <declaration type="org.eclipse.swt.graphics.Rectangle" name="rect" />
      <declaration type="Rectangle" name="aRect" />
      <scope startLine="145" endLine="147" />
      <scope startLine="148" endLine="150" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="clipRect" startLine="155" endLine="164">
      <declaration type="org.eclipse.swt.graphics.Rectangle" name="clip" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setClip" startLine="167" endLine="173" />
    <javadoc>
      <text>* This method isn't really supported by SWT - so will use the shape bounds.</text>
      <param>s shape of the clipping region to apply to graphics operations</param>
    </javadoc>
    <method type="void" name="clip" startLine="180" endLine="189">
      <declaration type="Rectangle2D" name="clipBds" />
      <declaration type="org.eclipse.swt.graphics.Rectangle" name="clip" />
    </method>
    <javadoc>
      <text>* This method isn't really supported by SWT - so will use the shape bounds.</text>
      <param>clip the desired clipping region's shape, will be simplified to
 * its bounds</param>
    </javadoc>
    <method type="void" name="setClip" startLine="197" endLine="208">
      <scope startLine="198" endLine="200" />
      <scope startLine="201" endLine="207">
        <declaration type="Rectangle2D" name="clipBds" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Shape" name="getClip" startLine="211" endLine="221">
      <declaration type="org.eclipse.swt.graphics.Rectangle" name="rect" />
      <declaration type="Rectangle2D" name="aRect" />
      <scope startLine="214" endLine="216" />
      <scope startLine="217" endLine="219" />
    </method>
    <javadoc>
      <text>* Returns a dummy device configuration.</text>
      <return>a dummy device configuration</return>
    </javadoc>
    <method type="GraphicsConfiguration" name="getDeviceConfiguration" startLine="228" endLine="230" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Paint" name="getPaint" startLine="237" endLine="239" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setPaint" startLine="242" endLine="246">
      <scope startLine="243" endLine="245" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Color" name="getColor" startLine="249" endLine="253">
      <declaration type="org.eclipse.swt.graphics.Color" name="color" />
      <declaration type="Color" name="awtColor" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setColor" startLine="256" endLine="263">
      <declaration type="org.eclipse.swt.graphics.Color" name="cachedColor" />
      <scope startLine="258" endLine="261" />
    </method>
    <javadoc>
      <text>* Sets the foreground color to the provided swt color.</text>
      <param>foregroundColor new foreground color</param>
    </javadoc>
    <method type="void" name="setColor" startLine="270" endLine="272" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setBackground" startLine="275" endLine="282">
      <declaration type="org.eclipse.swt.graphics.Color" name="cachedColor" />
      <scope startLine="277" endLine="280" />
    </method>
    <javadoc>
      <text>* Sets the background color to the provided swt color.</text>
      <param>backgroundColor new background color</param>
    </javadoc>
    <method type="void" name="setBackground" startLine="289" endLine="291" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Color" name="getBackground" startLine="294" endLine="298">
      <declaration type="org.eclipse.swt.graphics.Color" name="color" />
      <declaration type="Color" name="awtColor" />
    </method>
    <javadoc>
      <text>* Returns the current swt font to use when drawing.</text>
      <return>current swt font</return>
    </javadoc>
    <method type="org.eclipse.swt.graphics.Font" name="getSWTFont" startLine="309" endLine="311" />
    <javadoc>
      <text>* Returns the font metrics of the current SWT font.</text>
      <return>font metrics of the current SWT font</return>
    </javadoc>
    <method type="org.eclipse.swt.graphics.FontMetrics" name="getSWTFontMetrics" startLine="318" endLine="321" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Font" name="getFont" startLine="324" endLine="344">
      <scope startLine="325" endLine="340">
        <declaration type="int" name="style" />
        <declaration type="FontData[]" name="fd" />
        <scope startLine="329" endLine="338">
          <scope startLine="330" endLine="332" />
          <scope startLine="333" endLine="335" />
        </scope>
      </scope>
      <scope startLine="341" endLine="343" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setFont" startLine="347" endLine="353">
      <declaration type="String" name="fontString" />
      <comment>TODO:  prevent NPE</comment>
    </method>
    <javadoc>
      <text>* Set the font for this SWTGraphics2D to <code>font</code>.</text>
      <param>font font for this SWTGraphics2D</param>
    </javadoc>
    <method type="void" name="setFont" startLine="360" endLine="362" />
    <javadoc>
      <text>* Returns the SWT font matching the given font string.</text>
      <param>fontString description of the font desired</param>
      <return>matching font, or null if not found</return>
    </javadoc>
    <method type="org.eclipse.swt.graphics.Font" name="getFont" startLine="370" endLine="396">
      <declaration type="org.eclipse.swt.graphics.Font" name="cachedFont" />
      <scope startLine="372" endLine="394">
        <declaration type="int" name="style" />
        <scope startLine="374" endLine="376" />
        <scope startLine="377" endLine="379" />
        <declaration type="String" name="name" />
        <declaration type="String" name="size" />
        <declaration type="int" name="sizeInt" />
        <scope startLine="384" endLine="386" />
        <scope startLine="387" endLine="389" />
      </scope>
    </method>
    <javadoc>
      <text>* Deprecated since SWT now handles this.</text>
      <deprecated />
      <return>font that's been transformed by the current transform</return>
    </javadoc>
    <method type="org.eclipse.swt.graphics.Font" name="getTransformedFont" startLine="404" endLine="417">
      <scope startLine="405" endLine="415">
        <declaration type="FontData" name="fontData" />
        <declaration type="int" name="height" />
        <declaration type="String" name="fontString" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="translate" startLine="424" endLine="427" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="translate" startLine="430" endLine="433" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="rotate" startLine="436" endLine="439" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="rotate" startLine="442" endLine="445" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="scale" startLine="448" endLine="451" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="shear" startLine="454" endLine="457" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="transform" startLine="460" endLine="463" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setTransform" startLine="466" endLine="469" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="AffineTransform" name="getTransform" startLine="472" endLine="474" />
    <javadoc>
      <text>* Updates the SWT transform instance such that it matches AWTs counterpart.</text>
    </javadoc>
    <method type="void" name="updateSWTTransform" startLine="482" endLine="486">
      <declaration type="double[]" name="m" />
    </method>
    <javadoc>
      <text>* Converts a java 2d path iterator to a SWT path.</text>
      <param>iter specifies the iterator to be converted.</param>
      <return>the corresponding path object. Must be disposed() when no longer
 * used.</return>
    </javadoc>
    <method type="Path" name="pathIterator2Path" startLine="495" endLine="530">
      <declaration type="float[]" name="coords" />
      <declaration type="Path" name="path" />
      <scope startLine="500" endLine="528">
        <declaration type="int" name="type" />
        <comment>log this?</comment>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="clearRect" startLine="533" endLine="535" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="draw" startLine="538" endLine="563">
      <scope startLine="539" endLine="542">
        <declaration type="Rectangle2D" name="r2" />
      </scope>
      <scope startLine="543" endLine="546">
        <declaration type="Ellipse2D" name="e2" />
      </scope>
      <scope startLine="547" endLine="550">
        <declaration type="RoundRectangle2D" name="r2" />
      </scope>
      <scope startLine="551" endLine="554">
        <declaration type="Arc2D" name="a2" />
      </scope>
      <scope startLine="555" endLine="562">
        <declaration type="Path" name="p" />
        <scope startLine="557" endLine="560" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="fill" startLine="566" endLine="591">
      <scope startLine="567" endLine="570">
        <declaration type="Rectangle2D" name="r2" />
      </scope>
      <scope startLine="571" endLine="574">
        <declaration type="Ellipse2D" name="e2" />
      </scope>
      <scope startLine="575" endLine="578">
        <declaration type="RoundRectangle2D" name="r2" />
      </scope>
      <scope startLine="579" endLine="582">
        <declaration type="Arc2D" name="a2" />
      </scope>
      <scope startLine="583" endLine="590">
        <declaration type="Path" name="p" />
        <scope startLine="585" endLine="588" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="drawPolyline" startLine="594" endLine="605">
      <declaration type="int[]" name="ptArray" />
      <scope startLine="596" endLine="601" />
    </method>
    <javadoc>
      <text>* Draw a polyline from the specified double array of points.</text>
      <param>pts double array of points</param>
    </javadoc>
    <method type="void" name="drawPolyline" startLine="612" endLine="615">
      <declaration type="int[]" name="intPts" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="drawPolygon" startLine="618" endLine="628">
      <declaration type="int[]" name="ptArray" />
      <scope startLine="620" endLine="625" />
    </method>
    <javadoc>
      <text>* Fill a polyline from the specified double array of points.</text>
      <param>pts double array of points</param>
    </javadoc>
    <method type="void" name="fillPolygon" startLine="635" endLine="638">
      <declaration type="int[]" name="intPts" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="fillPolygon" startLine="641" endLine="651">
      <declaration type="int[]" name="ptArray" />
      <scope startLine="643" endLine="648" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="drawLine" startLine="654" endLine="656" />
    <javadoc>
      <text>* Draws a line, using the current color, between the points (x1, y1) and
 * (x2, y2) in this graphics context's coordinate system.</text>
      <param>x1 the first point's x coordinate.</param>
      <param>y1 the first point's y coordinate.</param>
      <param>x2 the second point's x coordinate.</param>
      <param>y2 the second point's y coordinate.</param>
    </javadoc>
    <method type="void" name="drawLine" startLine="667" endLine="680">
      <declaration type="double" name="transformedX1" />
      <declaration type="double" name="transformedY1" />
      <declaration type="double" name="transformedX2" />
      <declaration type="double" name="transformedY2" />
    </method>
    <javadoc>
      <text>* Copies the image to the specified position.</text>
      <param>img swt image to be copied</param>
      <param>x x component of position</param>
      <param>y y component of position</param>
    </javadoc>
    <method type="void" name="copyArea" startLine="695" endLine="700" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="copyArea" startLine="703" endLine="711" />
    <javadoc>
      <text>* Renders the text of the specified String, using the current text
 * attribute state in the Graphics2D context. The baseline of the first
 * character is at position (x, y) in the User Space. The rendering
 * attributes applied include the Clip, Transform, Paint, Font and Composite
 * attributes. For characters in script systems such as Hebrew and Arabic,
 * the glyphs can be rendered from right to left, in which case the
 * coordinate supplied is the location of the leftmost character on the
 * baseline.</text>
      <param>str the string to be rendered</param>
      <param>x the x coordinate of the location where the String should be
 * rendered</param>
      <param>y the y coordinate of the location where the String should be
 * rendered</param>
      <param>isTransparent whether a background should be painted behind the
 * text</param>
    </javadoc>
    <method type="void" name="drawString" startLine="731" endLine="735" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="drawString" startLine="738" endLine="740" />
    <javadoc>
      <text>* Renders the text of the specified String, using the current text
 * attribute state in the Graphics2D context. The baseline of the first
 * character is at position (x, y) in the User Space. The rendering
 * attributes applied include the Clip, Transform, Paint, Font and Composite
 * attributes. For characters in script systems such as Hebrew and Arabic,
 * the glyphs can be rendered from right to left, in which case the
 * coordinate supplied is the location of the leftmost character on the
 * baseline.</text>
      <param>str the string to be rendered</param>
      <param>x the x coordinate of the location where the String should be
 * rendered</param>
      <param>y the y coordinate of the location where the String should be
 * rendered</param>
    </javadoc>
    <method type="void" name="drawString" startLine="758" endLine="760" />
    <javadoc>
      <text>* Renders the text of the specified String, using the current text
 * attribute state in the Graphics2D context. The baseline of the first
 * character is at position (x, y) in the User Space. The rendering
 * attributes applied include the Clip, Transform, Paint, Font and Composite
 * attributes. For characters in script systems such as Hebrew and Arabic,
 * the glyphs can be rendered from right to left, in which case the
 * coordinate supplied is the location of the leftmost character on the
 * baseline.</text>
      <param>str the string to be rendered</param>
      <param>x the x coordinate of the location where the String should be
 * rendered</param>
      <param>y the y coordinate of the location where the String should be
 * rendered</param>
      <param>isTransparent whether a background should be painted behind the
 * text</param>
    </javadoc>
    <method type="void" name="drawString" startLine="780" endLine="782" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="drawString" startLine="785" endLine="787" />
    <javadoc>
      <text>* Renders the text of the specified String, using the current text
 * attribute state in the Graphics2D context. The baseline of the first
 * character is at position (x, y) in the User Space. The rendering
 * attributes applied include the Clip, Transform, Paint, Font and Composite
 * attributes. For characters in script systems such as Hebrew and Arabic,
 * the glyphs can be rendered from right to left, in which case the
 * coordinate supplied is the location of the leftmost character on the
 * baseline.</text>
      <param>str the string to be rendered</param>
      <param>x the x coordinate of the location where the String should be
 * rendered</param>
      <param>y the y coordinate of the location where the String should be
 * rendered</param>
    </javadoc>
    <method type="void" name="drawText" startLine="805" endLine="807" />
    <javadoc>
      <text>* Renders the text of the specified String, using the current text
 * attribute state in the Graphics2D context. The baseline of the first
 * character is at position (x, y) in the User Space. The rendering
 * attributes applied include the Clip, Transform, Paint, Font and Composite
 * attributes. For characters in script systems such as Hebrew and Arabic,
 * the glyphs can be rendered from right to left, in which case the
 * coordinate supplied is the location of the leftmost character on the
 * baseline.</text>
      <param>str the string to be rendered</param>
      <param>x the x coordinate of the location where the String should be
 * rendered</param>
      <param>y the y coordinate of the location where the String should be
 * rendered</param>
      <param>flags flags to apply to the string as defined by SWT</param>
    </javadoc>
    <method type="void" name="drawText" startLine="826" endLine="828" />
    <javadoc>
      <text>* Renders the text of the specified String, using the current text
 * attribute state in the Graphics2D context. The baseline of the first
 * character is at position (x, y) in the User Space. The rendering
 * attributes applied include the Clip, Transform, Paint, Font and Composite
 * attributes. For characters in script systems such as Hebrew and Arabic,
 * the glyphs can be rendered from right to left, in which case the
 * coordinate supplied is the location of the leftmost character on the
 * baseline.</text>
      <param>str the string to be rendered</param>
      <param>x the x coordinate of the location where the String should be
 * rendered</param>
      <param>y the y coordinate of the location where the String should be
 * rendered</param>
      <param>flags flags to apply to the string as defined by SWT</param>
    </javadoc>
    <method type="void" name="drawText" startLine="847" endLine="851" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="drawRect" startLine="854" endLine="856" />
    <javadoc>
      <text>* Draws the outline of the specified rectangle. The left and right edges of
 * the rectangle are at x and x + width. The top and bottom edges are at y
 * and y + height. The rectangle is drawn using the graphics context's
 * current color.</text>
      <param>x the x coordinate of the rectangle to be drawn.</param>
      <param>y the y coordinate of the rectangle to be drawn.</param>
      <param>width the width of the rectangle to be drawn.</param>
      <param>height the height of the rectangle to be drawn.</param>
    </javadoc>
    <method type="void" name="drawRect" startLine="869" endLine="876" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="fillRect" startLine="879" endLine="881" />
    <javadoc>
      <text>* Fills the specified rectangle. The left and right edges of the rectangle
 * are at x and x + width - 1. The top and bottom edges are at y and y +
 * height - 1. The resulting rectangle covers an area width pixels wide by
 * height pixels tall. The rectangle is filled using the graphics context's
 * current color.</text>
      <param>x the x coordinate of the rectangle to be filled.</param>
      <param>y the y coordinate of the rectangle to be filled.</param>
      <param>width the width of the rectangle to be filled.</param>
      <param>height the height of the rectangle to be filled.</param>
    </javadoc>
    <method type="void" name="fillRect" startLine="895" endLine="901" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="drawRoundRect" startLine="905" endLine="907" />
    <javadoc>
      <text>* Draws an outlined round-cornered rectangle using this graphics context's
 * current color. The left and right edges of the rectangle are at x and x +
 * width, respectively. The top and bottom edges of the rectangle are at y
 * and y + height.</text>
      <param>x the x coordinate of the rectangle to be drawn.</param>
      <param>y the y coordinate of the rectangle to be drawn.</param>
      <param>width the width of the rectangle to be drawn.</param>
      <param>height the height of the rectangle to be drawn.</param>
      <param>arcWidth the horizontal diameter of the arc at the four corners.</param>
      <param>arcHeight the vertical diameter of the arc at the four corners.</param>
    </javadoc>
    <method type="void" name="drawRoundRect" startLine="923" endLine="939">
      <declaration type="double" name="tx" />
      <declaration type="double" name="ty" />
      <declaration type="double" name="twidth" />
      <declaration type="double" name="theight" />
      <declaration type="double" name="tarcWidth" />
      <declaration type="double" name="tarcHeight" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="fillRoundRect" startLine="943" endLine="945" />
    <javadoc>
      <text>* Fills the specified rounded corner rectangle with the current color. The
 * left and right edges of the rectangle are at x and x + width - 1,
 * respectively. The top and bottom edges of the rectangle are at y and y +
 * height - 1.</text>
      <param>x the x coordinate of the rectangle to be filled.</param>
      <param>y the y coordinate of the rectangle to be filled.</param>
      <param>width the width of the rectangle to be filled.</param>
      <param>height the height of the rectangle to be filled.</param>
      <param>arcWidth the horizontal diameter of the arc at the four corners.</param>
      <param>arcHeight the vertical diameter of the arc at the four corners.</param>
    </javadoc>
    <method type="void" name="fillRoundRect" startLine="961" endLine="977">
      <declaration type="double" name="tx" />
      <declaration type="double" name="ty" />
      <declaration type="double" name="twidth" />
      <declaration type="double" name="theight" />
      <declaration type="double" name="tarcWidth" />
      <declaration type="double" name="tarcHeight" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="drawOval" startLine="980" endLine="982" />
    <javadoc>
      <text>* Draws the outline of an oval. The result is a circle or ellipse that fits
 * within the rectangle specified by the x, y, width, and height arguments.
 * The oval covers an area that is width + 1 pixels wide and height + 1
 * pixels tall.</text>
      <param>x the x coordinate of the upper left corner of the oval to be
 * drawn.</param>
      <param>y the y coordinate of the upper left corner of the oval to be
 * drawn.</param>
      <param>width the width of the oval to be drawn.</param>
      <param>height the height of the oval to be drawn.</param>
    </javadoc>
    <method type="void" name="drawOval" startLine="997" endLine="1004" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="fillOval" startLine="1007" endLine="1009" />
    <javadoc>
      <text>* Fills an oval bounded by the specified rectangle with the current color.</text>
      <param>x the x coordinate of the upper left corner of the oval to be
 * filled.</param>
      <param>y the y coordinate of the upper left corner of the oval to be
 * filled.</param>
      <param>width the width of the oval to be filled.</param>
      <param>height the height of the oval to be filled.</param>
    </javadoc>
    <method type="void" name="fillOval" startLine="1021" endLine="1027" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="drawArc" startLine="1031" endLine="1033" />
    <javadoc>
      <text>* Draws the outline of a circular or elliptical arc covering the specified
 * rectangle.
 * The resulting arc begins at startAngle and extends for arcAngle degrees,
 * using the current color. Angles are interpreted such that 0 degrees is at
 * the 3 o'clock position. A positive value indicates a counter-clockwise
 * rotation while a negative value indicates a clockwise rotation.
 * The center of the arc is the center of the rectangle whose origin is (x,
 * y) and whose size is specified by the width and height arguments.
 * The resulting arc covers an area width + 1 pixels wide by height + 1
 * pixels tall.
 * The angles are specified relative to the non-square extents of the
 * bounding rectangle such that 45 degrees always falls on the line from the
 * center of the ellipse to the upper right corner of the bounding
 * rectangle. As a result, if the bounding rectangle is noticeably longer in
 * one axis than the other, the angles to the start and end of the arc
 * segment will be skewed farther along the longer axis of the bounds.</text>
      <param>x the x coordinate of the upper-left corner of the arc to be
 * drawn.</param>
      <param>y the y coordinate of the upper-left corner of the arc to be
 * drawn.</param>
      <param>width the width of the arc to be drawn.</param>
      <param>height the height of the arc to be drawn.</param>
      <param>startAngle the beginning angle.</param>
      <param>extent the angular extent of the arc, relative to the start angle.</param>
    </javadoc>
    <method type="void" name="drawArc" startLine="1067" endLine="1074" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="fillArc" startLine="1078" endLine="1080" />
    <javadoc>
      <text>* Draws a filledArc with the options provided.</text>
      <param>x the x coordinate of the upper-left corner of the arc to be
 * filled.</param>
      <param>y the y coordinate of the upper-left corner of the arc to be
 * filled.</param>
      <param>width the width of the arc to be filled.</param>
      <param>height the height of the arc to be filled.</param>
      <param>startAngle the beginning angle.</param>
      <param>extent the angular extent of the arc, relative to the start angle.</param>
    </javadoc>
    <method type="void" name="fillArc" startLine="1095" endLine="1101" />
    <javadoc>
      <text>* Draws the provided path.</text>
      <param>p path to draw</param>
    </javadoc>
    <method type="void" name="drawPath" startLine="1108" endLine="1113" />
    <javadoc>
      <text>* Draws a filled version of the provided path.</text>
      <param>p path to draw filled</param>
    </javadoc>
    <method type="void" name="fillPath" startLine="1120" endLine="1124" />
    <javadoc>
      <text>* Draws the provided image at the position specified.</text>
      <param>image image to draw</param>
      <param>x x component of the position</param>
      <param>y y component of the position</param>
    </javadoc>
    <method type="void" name="drawImage" startLine="1133" endLine="1140">
      <declaration type="org.eclipse.swt.graphics.Rectangle" name="bounds" />
    </method>
    <javadoc>
      <text>* Draws the source region from the image onto the destination region of the
 * graphics context. Stretching if necessary.</text>
      <param>image image from which to copy</param>
      <param>srcX the left of the source region</param>
      <param>srcY the top of the source region</param>
      <param>srcW the width of the source region</param>
      <param>srcH the height of the source region</param>
      <param>destX the left of the destination region</param>
      <param>destY the top of the destination region</param>
      <param>destW the width of the destination region</param>
      <param>destH the height of the destination region</param>
    </javadoc>
    <method type="void" name="drawImage" startLine="1157" endLine="1163" />
    <javadoc>
      <text>* Sets the line width to use when drawing shapes.</text>
      <param>lineWidth width of line when drawing shapes</param>
    </javadoc>
    <method type="void" name="setLineWidth" startLine="1170" endLine="1172" />
    <javadoc>
      <text>* Computes the width of the line after it passes through the current
 * transform.</text>
      <return>resulting width of line after being transform</return>
    </javadoc>
    <method type="int" name="getTransformedLineWidth" startLine="1180" endLine="1185" />
    <javadoc>
      <text>* Fills a gradient rectangle of in the direction specified.</text>
      <param>x left of resulting rectangle</param>
      <param>y top of resulting rectangle</param>
      <param>width width of resulting rectangle</param>
      <param>height height of resulting rectangle</param>
      <param>vertical whether the gradient should be drawn vertically or
 * horizontally</param>
    </javadoc>
    <method type="void" name="fillGradientRectangle" startLine="1198" endLine="1204" />
    <javadoc>
      <deprecated>since underlying method has been deprecated</deprecated>
      <param>xOr whether to be in xOr mode</param>
    </javadoc>
    <method type="void" name="setXORMode" startLine="1210" endLine="1212" />
    <javadoc>
      <text>* Returns the advance width of the character provided in the current font.</text>
      <param>ch character to calculate the advance width of.</param>
      <return>advance width of the character in the current font</return>
    </javadoc>
    <method type="int" name="getAdvanceWidth" startLine="1221" endLine="1227">
      <declaration type="org.eclipse.swt.graphics.Font" name="scaledFont" />
      <declaration type="int" name="width" />
    </method>
    <javadoc>
      <text>* Returns the width of the character provided in the current font.</text>
      <param>ch character to calculate the width of.</param>
      <return>width of the character in the current font</return>
    </javadoc>
    <method type="int" name="getCharWidth" startLine="1236" endLine="1242">
      <declaration type="org.eclipse.swt.graphics.Font" name="scaledFont" />
      <declaration type="int" name="width" />
    </method>
    <javadoc>
      <text>* Returns the extent of the provided string in the current font.</text>
      <param>str string to calculate the extent of.</param>
      <return>extent of the string in the current font</return>
    </javadoc>
    <method type="org.eclipse.swt.graphics.Point" name="stringExtent" startLine="1251" endLine="1257">
      <declaration type="org.eclipse.swt.graphics.Font" name="scaledFont" />
      <declaration type="org.eclipse.swt.graphics.Point" name="extent" />
    </method>
    <javadoc>
      <text>* Returns the extent of the provided text in the current font.</text>
      <param>str string to calculate the extent of.</param>
      <return>extent of the string in the current font</return>
    </javadoc>
    <method type="org.eclipse.swt.graphics.Point" name="textExtent" startLine="1266" endLine="1272">
      <declaration type="org.eclipse.swt.graphics.Font" name="scaledFont" />
      <declaration type="org.eclipse.swt.graphics.Point" name="extent" />
    </method>
    <javadoc>
      <text>* Returns the extent of the provided text in the current font assuming the
 * flags given.</text>
      <param>str string to calculate the extent of</param>
      <param>flags flags to apply to the rendered font before calculation of
 * extent takes place</param>
      <return>extent of the string in the current font assuming flags provided</return>
    </javadoc>
    <method type="org.eclipse.swt.graphics.Point" name="textExtent" startLine="1283" endLine="1289">
      <declaration type="org.eclipse.swt.graphics.Font" name="scaledFont" />
      <declaration type="org.eclipse.swt.graphics.Point" name="extent" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="drawString" startLine="1296" endLine="1297" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="drawString" startLine="1300" endLine="1301" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="drawGlyphVector" startLine="1304" endLine="1305" />
    <javadoc>
      <text>* Returns whether the given rect and shape touch. If onStroke = true then
 * it'll include the width of the stroke when calculating.</text>
      <param>rect rect to test</param>
      <param>s shape to test</param>
      <param>onStroke whether to consider the width of the stroke</param>
      <return>true if they touch</return>
    </javadoc>
    <method type="boolean" name="hit" startLine="1316" endLine="1318" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setComposite" startLine="1321" endLine="1322" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setStroke" startLine="1325" endLine="1326" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setRenderingHint" startLine="1329" endLine="1330" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Object" name="getRenderingHint" startLine="1333" endLine="1335" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics2D#setRenderingHints(Map)</see>
    </javadoc>
    <method type="void" name="setRenderingHints" startLine="1342" endLine="1343" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics2D#addRenderingHints(Map)</see>
    </javadoc>
    <method type="void" name="addRenderingHints" startLine="1350" endLine="1351" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics2D#getRenderingHints()</see>
    </javadoc>
    <method type="RenderingHints" name="getRenderingHints" startLine="1358" endLine="1360" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics2D#getComposite()</see>
    </javadoc>
    <method type="Composite" name="getComposite" startLine="1367" endLine="1369" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics2D#getStroke()</see>
    </javadoc>
    <method type="Stroke" name="getStroke" startLine="1376" endLine="1378" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics2D#getFontRenderContext()</see>
    </javadoc>
    <method type="FontRenderContext" name="getFontRenderContext" startLine="1385" endLine="1387" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics#create()</see>
    </javadoc>
    <method type="Graphics" name="create" startLine="1394" endLine="1396" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics#setPaintMode()</see>
    </javadoc>
    <method type="void" name="setPaintMode" startLine="1403" endLine="1404" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics#setXORMode(Color)</see>
    </javadoc>
    <method type="void" name="setXORMode" startLine="1411" endLine="1412" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics#getFontMetrics(Font)</see>
    </javadoc>
    <method type="FontMetrics" name="getFontMetrics" startLine="1419" endLine="1421" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics2D#drawImage(Image,AffineTransform,ImageObserver)</see>
    </javadoc>
    <method type="boolean" name="drawImage" startLine="1428" endLine="1430" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics2D#drawImage(BufferedImage,BufferedImageOp,int,int)</see>
    </javadoc>
    <method type="void" name="drawImage" startLine="1438" endLine="1439" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics2D#drawRenderedImage(RenderedImage,AffineTransform)</see>
    </javadoc>
    <method type="void" name="drawRenderedImage" startLine="1447" endLine="1448" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics2D#drawRenderableImage(RenderableImage,AffineTransform)</see>
    </javadoc>
    <method type="void" name="drawRenderableImage" startLine="1456" endLine="1457" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics#drawImage(Image,int,int,ImageObserver)</see>
    </javadoc>
    <method type="boolean" name="drawImage" startLine="1464" endLine="1466" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics#drawImage(Image,int,int,int,int,ImageObserver)</see>
    </javadoc>
    <method type="boolean" name="drawImage" startLine="1475" endLine="1477" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics#drawImage(Image,int,int,Color,ImageObserver)</see>
    </javadoc>
    <method type="boolean" name="drawImage" startLine="1485" endLine="1487" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics#drawImage(Image,int,int,int,int,Color,ImageObserver)</see>
    </javadoc>
    <method type="boolean" name="drawImage" startLine="1496" endLine="1498" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics#drawImage(Image,int,int,int,int,int,int,int,int,ImageObserver)</see>
    </javadoc>
    <method type="boolean" name="drawImage" startLine="1507" endLine="1509" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>java.awt.Graphics#drawImage(Image,int,int,int,int,int,int,int,int,Color,ImageObserver)</see>
    </javadoc>
    <method type="boolean" name="drawImage" startLine="1519" endLine="1521" />
    <javadoc>
      <text>* DO NOTHING - DISPOSED IN RENDERING CLASS.</text>
    </javadoc>
    <method type="void" name="dispose" startLine="1526" endLine="1527" />
    <javadoc>
      <text>* Increases the number of uses of this graphics 2d object.</text>
    </javadoc>
    <method type="void" name="incrementGCCount" startLine="1536" endLine="1538" />
    <javadoc>
      <text>* Decreases the number of uses of this graphics 2d object.</text>
    </javadoc>
    <method type="void" name="decrementGCCount" startLine="1543" endLine="1563">
      <scope startLine="1546" endLine="1562">
        <scope startLine="1547" endLine="1550">
          <declaration type="org.eclipse.swt.graphics.Font" name="font" />
        </scope>
        <scope startLine="1552" endLine="1555">
          <declaration type="org.eclipse.swt.graphics.Color" name="color" />
        </scope>
        <scope startLine="1557" endLine="1560">
          <declaration type="Path" name="path" />
        </scope>
      </scope>
    </method>
    <comment />
    <comment>GET CLIP</comment>
    <comment />
    <comment />
    <comment>COLOR METHODS</comment>
    <comment />
    <comment />
    <comment>FONT METHODS</comment>
    <comment />
    <comment>/</comment>
    <comment>AFFINE TRANSFORM METHODS</comment>
    <comment>/</comment>
    <comment>SUPPORT METHODS</comment>
    <comment>/</comment>
    <comment>**************************************************************************</comment>
    <comment>*</comment>
    <comment>FOR NOW - ASSUME NO ROTATION ON THE TRANSFORM FOR THE FOLLOWING CALLS!</comment>
    <comment>**************************************************************************</comment>
    <comment>*</comment>
    <comment>/</comment>
    <comment>CURRENTLY UNSUPPORTED METHODS</comment>
    <comment>/</comment>
    <comment>/</comment>
    <comment>CLEAN-UP METHODS</comment>
    <comment>/</comment>
  </class>
</source>
