<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.nodes">
  <import name="java.awt.Color" />
  <import name="java.awt.Paint" />
  <import name="java.beans.PropertyChangeEvent" />
  <import name="java.beans.PropertyChangeListener" />
  <import name="edu.umd.cs.piccolo.PCamera" />
  <import name="edu.umd.cs.piccolo.PLayer" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.event.PDragEventHandler" />
  <import name="edu.umd.cs.piccolo.nodes.PPath" />
  <class name="PLens" extends="PNode" startLine="42">
    <javadoc>
      <text>* <b>PLens</b> is a simple default lens implementation for Piccolo2D. See
 * piccolo2d/examples LensExample for one possible use of this lens. Lens's are
 * often application specific, it may be easiest to study this code, and then
 * implement your own custom lens using the general principles illustrated here.
 * <p>
 * The basic design here is to add a PCamera as the child of a PNode (the lens
 * node). The camera is the viewing part of the lens, and the node is the title
 * bar that can be used to move the lens around. Users of this lens will
 * probably want to set up some lens specific event handler and attach it to the
 * camera.
 * </p>
 * <p>
 * A lens also needs a layer that it will look at (it should not be the same as
 * the layer that it's added to because then it will draw itself in a recursive
 * loop. Last of all the PLens will need to be added to the PCanvas layer (so
 * that it can be seen by the main camera).
 * </p></text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <declaration type="PPath" name="dragBar" />
    <declaration type="PCamera" name="camera" />
    <declaration type="PDragEventHandler" name="lensDragger" />
    <javadoc>
      <text>* The height of the drag bar.</text>
    </javadoc>
    <declaration type="double" name="LENS_DRAGBAR_HEIGHT" />
    <javadoc>
      <text>* Default paint to use for the drag bar.</text>
    </javadoc>
    <declaration type="Paint" name="DEFAULT_DRAGBAR_PAINT" />
    <javadoc>
      <text>* Default paint to use when drawing the background of the lens.</text>
    </javadoc>
    <declaration type="Paint" name="DEFAULT_LENS_PAINT" />
    <javadoc>
      <text>* Constructs the default PLens.</text>
    </javadoc>
    <method type="constructor" name="PLens" startLine="83" endLine="109">
      <method type="void" name="propertyChange" startLine="105" endLine="107" />
      <comment>Drag bar gets resized to fit the available space, so any rectangle</comment>
      <comment>will do here</comment>
      <comment>This forces drag events to percolate up to PLens object</comment>
      <comment>create an event handler to drag the lens around. Note that this event</comment>
      <comment>handler consumes events in case another conflicting event handler has</comment>
      <comment>been installed higher up in the heirarchy.</comment>
      <comment>When this PLens is dragged around adjust the cameras view transform.</comment>
    </method>
    <javadoc>
      <text>* Creates the default PLens and attaches the given layer to it.</text>
      <param>layer layer to attach to this PLens</param>
    </javadoc>
    <method type="constructor" name="PLens" startLine="116" endLine="119" />
    <javadoc>
      <text>* Returns the camera on which this lens is appearing.</text>
      <return>camera on which lens is appearing</return>
    </javadoc>
    <method type="PCamera" name="getCamera" startLine="126" endLine="128" />
    <javadoc>
      <text>* Returns the drag bar for this lens.</text>
      <return>this lens' drag bar</return>
    </javadoc>
    <method type="PPath" name="getDragBar" startLine="135" endLine="137" />
    <javadoc>
      <text>* Returns the event handler that this lens uses for its drag bar.</text>
      <return>drag bar's drag event handler</return>
    </javadoc>
    <method type="PDragEventHandler" name="getLensDraggerHandler" startLine="144" endLine="146" />
    <javadoc>
      <text>* Adds the layer to the camera.</text>
      <param>index index at which to add the layer to the camera</param>
      <param>layer layer to add to the camera</param>
    </javadoc>
    <method type="void" name="addLayer" startLine="154" endLine="156" />
    <javadoc>
      <text>* Removes the provided layer from the camera.</text>
      <param>layer layer to be removed</param>
    </javadoc>
    <method type="void" name="removeLayer" startLine="163" endLine="165" />
    <javadoc>
      <text>* When the lens is resized this method gives us a chance to layout the
 * lenses camera child appropriately.</text>
    </javadoc>
    <method type="void" name="layoutChildren" startLine="171" endLine="174" />
  </class>
</source>
