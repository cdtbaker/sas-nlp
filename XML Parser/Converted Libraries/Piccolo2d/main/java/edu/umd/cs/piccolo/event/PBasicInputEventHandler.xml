<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.event">
  <import name="java.awt.event.FocusEvent" />
  <import name="java.awt.event.KeyEvent" />
  <import name="java.awt.event.MouseEvent" />
  <import name="java.awt.event.MouseWheelEvent" />
  <class name="PBasicInputEventHandler" startLine="36">
    <implements name="PInputEventListener" />
    <javadoc>
      <text>* <b>PBasicInputEventHandler</b> is the standard class in Piccolo that is used
 * to register for mouse and keyboard events on a PNode. Note the events that
 * you get depends on the node that you have registered with. For example you
 * will only get mouse moved events when the mouse is over the node that you
 * have registered with, not when the mouse is over some other node.
 * <P></text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <declaration type="PInputEventFilter" name="eventFilter" />
    <javadoc>
      <text>* Constructs a PBasicInputEventHandler with a wide open event filter.</text>
    </javadoc>
    <method type="constructor" name="PBasicInputEventHandler" startLine="54" endLine="57" />
    <javadoc>
      <text>* Dispatches a generic event to a more specific method. Sparing subclasses
 * from the dispatch logic.</text>
      <param>event the event to be dispatched</param>
      <param>type Swing event type of the underlying Swing event</param>
    </javadoc>
    <method type="void" name="processEvent" startLine="66" endLine="131">
      <scope startLine="67" endLine="69" />
    </method>
    <javadoc>
      <text>* Returns true if the event would be dispatched if passed to processEvent.</text>
      <param>event event being tested for acceptance</param>
      <param>type Swing event type of underlying swing event</param>
      <return>true if the event would be dispatched</return>
    </javadoc>
    <method type="boolean" name="acceptsEvent" startLine="148" endLine="150" />
    <javadoc>
      <text>* Returns the event filter responsible for filtering incoming events.</text>
      <return>this handler's InputEventFilter</return>
    </javadoc>
    <method type="PInputEventFilter" name="getEventFilter" startLine="157" endLine="159" />
    <javadoc>
      <text>* Changes this event handler's filter to the one provided.</text>
      <param>newEventFilter filter to use for this input event handler</param>
    </javadoc>
    <method type="void" name="setEventFilter" startLine="166" endLine="168" />
    <javadoc>
      <text>* Will get called whenever a key has been pressed down. Subclasses should
 * override this method to implement their own behavior.</text>
      <param>event the event representing the keystroke</param>
    </javadoc>
    <method type="void" name="keyPressed" startLine="176" endLine="177" />
    <javadoc>
      <text>* Will get called whenever a key has been released. Subclasses should
 * override this method to implement their own behavior.</text>
      <param>event the event representing the keystroke</param>
    </javadoc>
    <method type="void" name="keyReleased" startLine="185" endLine="186" />
    <javadoc>
      <text>* Will be called at the end of a full keystroke (down then up). Subclasses
 * should override this method to implement their own behavior.</text>
      <param>event object which can be queried for the event's details</param>
    </javadoc>
    <method type="void" name="keyTyped" startLine="194" endLine="195" />
    <javadoc>
      <text>* Will be called at the end of a full click (mouse pressed followed by
 * mouse released). Subclasses should override this method to implement
 * their own behavior.</text>
      <param>event object which can be queried for the event's details</param>
    </javadoc>
    <method type="void" name="mouseClicked" startLine="204" endLine="205" />
    <javadoc>
      <text>* Will be called when a mouse button is pressed down. Should two buttons be
 * pressed simultaneously, it will dispatch two of these in an unspecified
 * order. Subclasses should override this method to implement their own
 * behavior.</text>
      <param>event object which can be queried for the event's details</param>
    </javadoc>
    <method type="void" name="mousePressed" startLine="215" endLine="216" />
    <javadoc>
      <text>* Will be called when a drag is occurring. This is system dependent.
 * Subclasses should override this method to implement their own behavior.</text>
      <param>event object which can be queried for the event's details</param>
    </javadoc>
    <method type="void" name="mouseDragged" startLine="224" endLine="225" />
    <javadoc>
      <text>* Will be invoked when the mouse enters a specified region. Subclasses
 * should override this method to implement their own behavior.</text>
      <param>event object which can be queried for the event's details</param>
    </javadoc>
    <method type="void" name="mouseEntered" startLine="233" endLine="234" />
    <javadoc>
      <text>* Will be invoked when the mouse leaves a specified region. Subclasses
 * should override this method to implement their own behavior.</text>
      <param>event object which can be queried for the event's details</param>
    </javadoc>
    <method type="void" name="mouseExited" startLine="242" endLine="243" />
    <javadoc>
      <text>* Will be called when the mouse is moved. Subclasses should override this
 * method to implement their own behavior.</text>
      <param>event object which can be queried for event details</param>
    </javadoc>
    <method type="void" name="mouseMoved" startLine="251" endLine="252" />
    <javadoc>
      <text>* Will be called when any mouse button is released. Should two or more
 * buttons be released simultaneously, this method will be called multiple
 * times. Subclasses should override this method to implement their own
 * behavior.</text>
      <param>event object which can be queried for event details</param>
    </javadoc>
    <method type="void" name="mouseReleased" startLine="262" endLine="263" />
    <javadoc>
      <text>* This method is invoked when the mouse wheel is rotated. Subclasses should
 * override this method to implement their own behavior.</text>
      <param>event an object that can be queries to discover the event's
 * details</param>
    </javadoc>
    <method type="void" name="mouseWheelRotated" startLine="272" endLine="273" />
    <javadoc>
      <text>* This method is invoked when the mouse wheel is rotated by a block.
 * Subclasses should override this method to implement their own behavior.</text>
      <param>event an object that can be queries to discover the event's
 * details</param>
    </javadoc>
    <method type="void" name="mouseWheelRotatedByBlock" startLine="282" endLine="283" />
    <javadoc>
      <text>* This method is invoked when a node gains the keyboard focus. Subclasses
 * should override this method to implement their own behavior.</text>
      <param>event an object that can be queries to discover the event's
 * details</param>
    </javadoc>
    <method type="void" name="keyboardFocusGained" startLine="292" endLine="293" />
    <javadoc>
      <text>* This method is invoked when a node loses the keyboard focus. Subclasses
 * should override this method to implement their own behavior.</text>
      <param>event an object that can be queries to discover the event's
 * details</param>
    </javadoc>
    <method type="void" name="keyboardFocusLost" startLine="302" endLine="303" />
    <javadoc>
      <deprecated>see http://code.google.com/p/piccolo2d/issues/detail?id=99</deprecated>
      <return>empty string since this method is deprecated</return>
    </javadoc>
    <method type="String" name="paramString" startLine="310" endLine="312" />
    <comment>****************************************************************</comment>
    <comment>Event Filter - All this event listener can be associated with a event</comment>
    <comment>filter. The filter accepts and rejects events based on their modifier</comment>
    <comment>flags and type. If the filter is null (the</comment>
    <comment>default case) then it accepts all events.</comment>
    <comment>****************************************************************</comment>
  </class>
</source>
