<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.examples">
  <import name="java.awt.BasicStroke" />
  <import name="java.awt.Color" />
  <import name="edu.umd.cs.piccolo.PCanvas" />
  <import name="edu.umd.cs.piccolo.event.PBasicInputEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PInputEvent" />
  <import name="edu.umd.cs.piccolo.nodes.PPath" />
  <import name="edu.umd.cs.piccolo.util.PDimension" />
  <import name="edu.umd.cs.piccolox.PFrame" />
  <import name="edu.umd.cs.piccolox.handles.PBoundsHandle" />
  <import name="edu.umd.cs.piccolox.handles.PHandle" />
  <import name="edu.umd.cs.piccolox.util.PNodeLocator" />
  <class name="HandleExample" extends="PFrame" startLine="44">
    <javadoc>
      <text>* This example show how to add the default handles to a node, and also how to
 * create your own custom handles.</text>
    </javadoc>
    <javadoc />
    <declaration type="long" name="serialVersionUID" />
    <method type="constructor" name="HandleExample" startLine="55" endLine="57" />
    <method type="constructor" name="HandleExample" startLine="59" endLine="61" />
    <method type="void" name="initialize" startLine="63" endLine="122">
      <declaration type="PPath" name="n" />
      <declaration type="PHandle" name="h" />
      <javadoc />
      <declaration type="long" name="serialVersionUID" />
      <method type="void" name="dragHandle" startLine="99" endLine="102" />
      <method type="void" name="mousePressed" startLine="106" endLine="108" />
      <method type="void" name="mouseReleased" startLine="110" endLine="112" />
      <comment>add another node the the root as a reference point so that we can</comment>
      <comment>tell that our node is getting dragged, as opposed the the canvas</comment>
      <comment>view being panned.</comment>
      <comment>tell the node to show its default handles.</comment>
      <comment>The default PBoundsHandle implementation doesn't work well with</comment>
      <comment>PPaths that have strokes. The reason for this is that the default</comment>
      <comment>PBoundsHandle modifies the bounds of an PNode, but when adding</comment>
      <comment>handles to a PPath we really want it to be modifying the underlying</comment>
      <comment>geometry of the PPath, the shape without the stroke. The solution is</comment>
      <comment>that we need to create handles specific to PPaths that locate</comment>
      <comment>themselves on the paths internal geometry, not the external bounds</comment>
      <comment>geometry...</comment>
      <comment>Here we create our own custom handle. This handle is located in the</comment>
      <comment>center of its parent node and you can use it to drag the parent</comment>
      <comment>around. This handle also updates its color when the is</comment>
      <comment>pressed/released in it.</comment>
      <comment>the default locator locates the center of a node.</comment>
      <comment>make this handle appear a bit different then the default handle</comment>
      <comment>appearance.</comment>
      <comment>also add our new custom handle to the node.</comment>
    </method>
    <method type="void" name="main" startLine="124" endLine="126" />
  </class>
</source>
