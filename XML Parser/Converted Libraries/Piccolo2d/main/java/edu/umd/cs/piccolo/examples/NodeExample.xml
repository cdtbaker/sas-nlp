<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.examples">
  <import name="java.awt.BasicStroke" />
  <import name="java.awt.Color" />
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.geom.Ellipse2D" />
  <import name="java.awt.geom.Line2D" />
  <import name="edu.umd.cs.piccolo.PCanvas" />
  <import name="edu.umd.cs.piccolo.PLayer" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.event.PBasicInputEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PDragEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PInputEvent" />
  <import name="edu.umd.cs.piccolo.nodes.PImage" />
  <import name="edu.umd.cs.piccolo.nodes.PPath" />
  <import name="edu.umd.cs.piccolo.nodes.PText" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <import name="edu.umd.cs.piccolox.PFrame" />
  <class name="NodeExample" extends="PFrame" startLine="50">
    <javadoc>
      <text>* This example shows how to create and manipulate nodes.</text>
    </javadoc>
    <javadoc />
    <declaration type="long" name="serialVersionUID" />
    <declaration type="boolean" name="fIsPressed" />
    <method type="constructor" name="NodeExample" startLine="61" endLine="63" />
    <method type="constructor" name="NodeExample" startLine="65" endLine="67" />
    <method type="void" name="initialize" startLine="69" endLine="81">
      <comment>Last of all lets remove the default pan event handler, and add a</comment>
      <comment>drag event handler instead. This way you will be able to drag the</comment>
      <comment>nodes around with the mouse.</comment>
    </method>
    <method type="void" name="nodeDemo" startLine="85" endLine="133">
      <declaration type="PLayer" name="layer" />
      <declaration type="PNode" name="aNode" />
      <declaration type="PNode" name="aCopy" />
      <comment>A node needs to be a descendent of the root to be displayed on the</comment>
      <comment>screen.</comment>
      <comment>The default color for a node is blue, but you can change that with</comment>
      <comment>the setPaint method.</comment>
      <comment>A node can have children nodes added to it.</comment>
      <comment>The base bounds of a node is easy to change. Note that changing the</comment>
      <comment>base</comment>
      <comment>bounds of a node will not change it's children.</comment>
      <comment>Each node has a transform that can be used to transform the node, and</comment>
      <comment>all its children on the screen.</comment>
      <comment>The transparency of any node can be set, this transparency will be</comment>
      <comment>applied to any of the nodes children as well.</comment>
      <comment>Its easy to copy nodes.</comment>
      <comment>Make is so that the copies children are not pickable. For this</comment>
      <comment>example</comment>
      <comment>that means you will not be able to grab the child and remove it from</comment>
      <comment>its parent.</comment>
      <comment>Change the look of the copy</comment>
      <comment>Let's add the copy to the root, and translate it so that it does not</comment>
      <comment>cover the original node.</comment>
    </method>
    <method type="void" name="createNodeUsingExistingClasses" startLine="137" endLine="148">
      <declaration type="PLayer" name="layer" />
      <declaration type="PImage" name="image" />
      <comment>Here we create an image node that displays a thumbnail</comment>
      <comment>image of the root node. Note that you can easily get a thumbnail</comment>
      <comment>of any node by using PNode.toImage().</comment>
    </method>
    <method type="void" name="subclassExistingClasses" startLine="154" endLine="194">
      <declaration type="PNode" name="n" />
      <javadoc />
      <declaration type="long" name="serialVersionUID" />
      <method type="void" name="paint" startLine="162" endLine="173">
        <scope startLine="163" endLine="168">
          <declaration type="Graphics2D" name="g2" />
          <comment>if mouse is pressed draw self as a square.</comment>
        </scope>
        <scope startLine="169" endLine="172">
          <comment>if mouse is not pressed draw self normally.</comment>
        </scope>
      </method>
      <method type="void" name="mousePressed" startLine="177" endLine="182" />
      <method type="void" name="mouseReleased" startLine="184" endLine="189" />
      <comment>this tells the framework that the node</comment>
      <comment>needs to be redisplayed.</comment>
      <comment>this tells the framework that the node</comment>
      <comment>needs to be redisplayed.</comment>
    </method>
    <method type="void" name="composeOtherNodes" startLine="199" endLine="229">
      <declaration type="PNode" name="myCompositeFace" />
      <declaration type="PNode" name="eye1" />
      <declaration type="PNode" name="eye2" />
      <declaration type="PNode" name="mouth" />
      <declaration type="PBounds" name="b" />
      <comment>create parts for the face.</comment>
      <comment>add the face parts</comment>
      <comment>don't want anyone grabbing out our eye's.</comment>
      <comment>position the face parts.</comment>
      <comment>set the face bounds so that it neatly contains the face parts.</comment>
      <comment>opps it to small, so scale it up.</comment>
    </method>
    <method type="void" name="createCustomNode" startLine="234" endLine="268">
      <declaration type="PNode" name="n" />
      <javadoc />
      <declaration type="long" name="serialVersionUID" />
      <method type="void" name="paint" startLine="241" endLine="263">
        <declaration type="double" name="bx" />
        <declaration type="double" name="by" />
        <declaration type="double" name="rightBorder" />
        <declaration type="double" name="bottomBorder" />
        <declaration type="Line2D" name="line" />
        <declaration type="Graphics2D" name="g2" />
        <scope startLine="254" endLine="257" />
        <scope startLine="259" endLine="262" />
      </method>
      <comment>draw vertical lines</comment>
    </method>
    <method type="void" name="main" startLine="270" endLine="272" />
    <comment>This method demonstrates the kinds of things that can be done with any</comment>
    <comment>node.</comment>
    <comment>So far we have just been using PNode, but of course PNode has many</comment>
    <comment>subclasses that you can try out to.</comment>
    <comment>Another way to create nodes is to customize other nodes that already</comment>
    <comment>exist. Here we create an ellipse, except when you press the mouse on</comment>
    <comment>this ellipse it turns into a square, when you release the mouse it</comment>
    <comment>goes back to being an ellipse.</comment>
    <comment>Here a new "face" node is created. But instead of drawing the face</comment>
    <comment>directly</comment>
    <comment>using Graphics2D we compose the face from other nodes.</comment>
    <comment>Here a completely new kind of node, a grid node" is created. We do</comment>
    <comment>all the drawing ourselves here instead of passing the work off to</comment>
    <comment>other parts of the framework.</comment>
  </class>
</source>
