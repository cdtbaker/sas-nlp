<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.pswing">
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.util.PPickPath" />
  <import name="java.awt.event.MouseEvent" />
  <import name="java.awt.geom.Point2D" />
  <interface name="PSwingEvent" startLine="37">
    <javadoc>
      <text>* Interface allowing PSwing events that originated from swing and are destined
 * for PSwing nodes must conform to.</text>
    </javadoc>
    <method name="getLocalPoint" type="Point2D" startLine="42" endLine="49" />
    <javadoc>
      <text>* Returns the x,y position of the event in the local coordinate system of
 * the node the event occurred on.</text>
      <return>a Point2D object containing the x and y coordinates local to the
 * node.</return>
    </javadoc>
    <method name="getLocalX" type="double" startLine="51" endLine="57" />
    <javadoc>
      <text>* Returns the horizontal x position of the event in the local coordinate
 * system of the node the event occurred on.</text>
      <return>x a double indicating horizontal position local to the node.</return>
    </javadoc>
    <method name="getLocalY" type="double" startLine="59" endLine="65" />
    <javadoc>
      <text>* Returns the vertical y position of the event in the local coordinate
 * system of the node the event occurred on.</text>
      <return>y a double indicating vertical position local to the node.</return>
    </javadoc>
    <method name="getID" type="int" startLine="67" endLine="72" />
    <javadoc>
      <text>* Determine the event type.</text>
      <return>the id</return>
    </javadoc>
    <method name="getNode" type="PNode" startLine="74" endLine="84" />
    <javadoc>
      <text>* Determine the node the event originated at. If an event percolates up the
 * tree and is handled by an event listener higher up in the tree than the
 * original node that generated the event, this returns the original node.
 * For mouse drag and release events, this is the node that the original
 * matching press event went to - in other words, the event is 'grabbed' by
 * the originating node.</text>
      <return>the node</return>
    </javadoc>
    <method name="getPath" type="PPickPath" startLine="86" endLine="92" />
    <javadoc>
      <text>* Determine the path the event took from the PCanvas down to the visual
 * component.</text>
      <return>the path</return>
    </javadoc>
    <method name="getGrabNode" type="PNode" startLine="94" endLine="104" />
    <javadoc>
      <text>* Determine the node the event originated at. If an event percolates up the
 * tree and is handled by an event listener higher up in the tree than the
 * original node that generated the event, this returns the original node.
 * For mouse drag and release events, this is the node that the original
 * matching press event went to - in other words, the event is 'grabbed' by
 * the originating node.</text>
      <return>the node</return>
    </javadoc>
    <method name="getGrabPath" type="PPickPath" startLine="106" endLine="111" />
    <javadoc>
      <text>* Return the path from the PCanvas down to the currently grabbed object.</text>
      <return>the path</return>
    </javadoc>
    <method name="getCurrentNode" type="PNode" startLine="113" endLine="120" />
    <javadoc>
      <text>* Get the current node that is under the cursor. This may return a
 * different result then getGrabNode() when in a MOUSE_RELEASED or
 * MOUSE_DRAGGED event.</text>
      <return>the current node.</return>
    </javadoc>
    <method name="getCurrentPath" type="PPickPath" startLine="122" endLine="129" />
    <javadoc>
      <text>* Get the path from the PCanvas down to the visual component currently
 * under the mouse.This may give a different result then getGrabPath()
 * during a MOUSE_DRAGGED or MOUSE_RELEASED operation.</text>
      <return>the current path.</return>
    </javadoc>
    <method name="dispatchTo" type="void" startLine="131" endLine="136" />
    <javadoc>
      <text>* Calls appropriate method on the listener based on this events ID.</text>
      <param>listener the MouseListener or MouseMotionListener to dispatch to.</param>
    </javadoc>
    <method name="setSource" type="void" startLine="138" endLine="145" />
    <javadoc>
      <text>* Set the source of this event. As the event is fired up the tree the
 * source of the event will keep changing to reflect the scenegraph object
 * that is firing the event.</text>
      <param>aSource the source of the event</param>
    </javadoc>
    <method name="asMouseEvent" type="MouseEvent" startLine="147" endLine="153" />
    <javadoc>
      <text>* Returns this event as a mouse event. This reduces the need to cast
 * instances of this interface when they are known to all extend MouseEvent.</text>
      <return>this object casted to a MouseEvent</return>
    </javadoc>
  </interface>
</source>
