<?xml version="1.0" encoding="UTF-8"?>
<source package="Copyright (C) 1998-1999 by University of Maryland, College Park, MD 20742, USA
 * All rights reserved.
 */
package edu.umd.cs.piccolox.swt">
  <import name="java.awt.Color" />
  <import name="java.awt.Font" />
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.Paint" />
  <import name="java.awt.geom.AffineTransform" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.util.ArrayList" />
  <import name="java.util.Iterator" />
  <import name="org.eclipse.swt.graphics.FontMetrics" />
  <import name="org.eclipse.swt.graphics.GC" />
  <import name="org.eclipse.swt.graphics.Point" />
  <import name="org.eclipse.swt.widgets.Display" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <javadoc>
    <text>* Copyright (C) 1998-1999 by University of Maryland, College Park, MD 20742, USA
 * All rights reserved.</text>
  </javadoc>
  <class name="PSWTText" extends="PNode" startLine="24">
    <javadoc>
      <text>* <b>PSWTText</b> creates a visual component to support text. Multiple lines
 * can be entered, and basic editing is supported. A caret is drawn, and can be
 * repositioned with mouse clicks. The text object is positioned so that its
 * upper-left corner is at the origin, though this can be changed with the
 * translate methods.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Below this magnification render text as 'greek'.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_GREEK_THRESHOLD" />
    <javadoc>
      <text>* Default color of text rendered as 'greek'.</text>
    </javadoc>
    <declaration type="Color" name="DEFAULT_GREEK_COLOR" />
    <javadoc>
      <text>* Default font name of text.</text>
    </javadoc>
    <declaration type="String" name="DEFAULT_FONT_NAME" />
    <javadoc>
      <text>* Default font style for text.</text>
    </javadoc>
    <declaration type="int" name="DEFAULT_FONT_STYLE" />
    <javadoc>
      <text>* Default font size for text.</text>
    </javadoc>
    <declaration type="int" name="DEFAULT_FONT_SIZE" />
    <javadoc>
      <text>* Default font for text.</text>
    </javadoc>
    <declaration type="Font" name="DEFAULT_FONT" />
    <javadoc>
      <text>* Default color for text.</text>
    </javadoc>
    <declaration type="Color" name="DEFAULT_PEN_COLOR" />
    <javadoc>
      <text>* Default text when new text area is created.</text>
    </javadoc>
    <declaration type="String" name="DEFAULT_TEXT" />
    <javadoc>
      <text>* Default background transparency state.</text>
    </javadoc>
    <declaration type="boolean" name="DEFAULT_IS_TRANSPARENT" />
    <javadoc>
      <text>* Default padding.</text>
    </javadoc>
    <declaration type="int" name="DEFAULT_PADDING" />
    <javadoc>
      <text>* Whether the text be drawn with a transparent background.</text>
    </javadoc>
    <declaration type="boolean" name="transparent" />
    <javadoc>
      <text>* Below this magnification text is rendered as greek.</text>
    </javadoc>
    <declaration type="double" name="greekThreshold" />
    <javadoc>
      <text>* Color for greek text.</text>
    </javadoc>
    <declaration type="Color" name="greekColor" />
    <javadoc>
      <text>* Current pen color.</text>
    </javadoc>
    <declaration type="Color" name="penColor" />
    <javadoc>
      <text>* Current text font.</text>
    </javadoc>
    <declaration type="Font" name="font" />
    <javadoc>
      <text>* The amount of padding on each side of the text.</text>
    </javadoc>
    <declaration type="int" name="padding" />
    <javadoc>
      <text>* Each element is one line of text.</text>
    </javadoc>
    <declaration type="ArrayList" name="lines" />
    <javadoc>
      <text>* Translation offset X.</text>
    </javadoc>
    <declaration type="double" name="translateX" />
    <javadoc>
      <text>* Translation offset Y.</text>
    </javadoc>
    <declaration type="double" name="translateY" />
    <javadoc>
      <text>* Default constructor for PSWTTest.</text>
    </javadoc>
    <method type="constructor" name="PSWTText" startLine="92" endLine="94" />
    <javadoc>
      <text>* PSWTTest constructor with initial text.</text>
      <param>str The initial text.</param>
    </javadoc>
    <method type="constructor" name="PSWTText" startLine="101" endLine="103" />
    <javadoc>
      <text>* PSWTTest constructor with initial text and font.</text>
      <param>str The initial text.</param>
      <param>font The font for this PSWTText component.</param>
    </javadoc>
    <method type="constructor" name="PSWTText" startLine="111" endLine="116" />
    <javadoc>
      <text>* Returns the current pen color.</text>
      <return>current pen color</return>
    </javadoc>
    <method type="Color" name="getPenColor" startLine="123" endLine="125" />
    <javadoc>
      <text>* Sets the current pen color.</text>
      <param>color use this color.</param>
    </javadoc>
    <method type="void" name="setPenColor" startLine="132" endLine="135" />
    <javadoc>
      <text>* Returns the current pen paint.</text>
      <return>the current pen paint</return>
    </javadoc>
    <method type="Paint" name="getPenPaint" startLine="142" endLine="144" />
    <javadoc>
      <text>* Sets the current pen paint.</text>
      <param>aPaint use this paint.</param>
    </javadoc>
    <method type="void" name="setPenPaint" startLine="151" endLine="153" />
    <javadoc>
      <text>* Returns the current background color.</text>
      <return>the current background color</return>
    </javadoc>
    <method type="Color" name="getBackgroundColor" startLine="160" endLine="162" />
    <javadoc>
      <text>* Sets the current background color.</text>
      <param>color use this color.</param>
    </javadoc>
    <method type="void" name="setBackgroundColor" startLine="169" endLine="171" />
    <javadoc>
      <text>* Sets whether the text should be drawn in transparent mode, i.e., whether
 * the background should be drawn or not.</text>
      <param>transparent the new transparency of the background</param>
    </javadoc>
    <method type="void" name="setTransparent" startLine="179" endLine="181" />
    <javadoc>
      <text>* Returns whether the text should be drawn using the transparent mode,
 * i.e., whether the background should be drawn or not.</text>
      <return>true if background will not be drawn</return>
    </javadoc>
    <method type="boolean" name="isTransparent" startLine="189" endLine="191" />
    <javadoc>
      <text>* Returns the current greek threshold. Below this magnification text is
 * rendered as 'greek'.</text>
      <return>magnification at which the text will not be drawn and a blank
 * rectangle will appear instead</return>
    </javadoc>
    <method type="double" name="getGreekThreshold" startLine="200" endLine="202" />
    <javadoc>
      <text>* Sets the current greek threshold. Below this magnification text is
 * rendered as 'greek'.</text>
      <param>threshold compared to renderContext magnification.</param>
    </javadoc>
    <method type="void" name="setGreekThreshold" startLine="210" endLine="213" />
    <javadoc>
      <text>* Returns the current font.</text>
      <return>current font in node</return>
    </javadoc>
    <method type="Font" name="getFont" startLine="220" endLine="222" />
    <javadoc>
      <text>* Return the text within this text component. Multiline text is returned as
 * a single string where each line is separated by a newline character.
 * Single line text does not have any newline characters.</text>
      <return>string containing this node's text</return>
    </javadoc>
    <method type="String" name="getText" startLine="231" endLine="245">
      <declaration type="StringBuffer" name="result" />
      <declaration type="Iterator" name="lineIterator" />
      <scope startLine="235" endLine="238" />
      <scope startLine="240" endLine="242" />
    </method>
    <javadoc>
      <text>* Sets the font for the text.
 * <p>
 * <b>Warning:</b> Java has a serious bug in that it does not support very
 * small fonts. In particular, fonts that are less than about a pixel high
 * just don't work. Since in Jazz, it is common to create objects of
 * arbitrary sizes, and then scale them, an application can easily create a
 * text object with a very small font by accident. The workaround for this
 * bug is to create a larger font for the text object, and then scale the
 * node down correspondingly.</text>
      <param>aFont use this font.</param>
    </javadoc>
    <method type="void" name="setFont" startLine="260" endLine="264" />
    <javadoc>
      <text>* Sets the text of this visual component to str. Multiple lines of text are
 * separated by a newline character.</text>
      <param>str use this string.</param>
    </javadoc>
    <method type="void" name="setText" startLine="272" endLine="290">
      <declaration type="int" name="pos" />
      <declaration type="int" name="index" />
      <declaration type="boolean" name="done" />
      <scope startLine="277" endLine="287">
        <scope startLine="279" endLine="282" />
        <scope startLine="283" endLine="286" />
      </scope>
    </method>
    <javadoc>
      <text>* Set text translation offset X.</text>
      <param>x the X translation.</param>
    </javadoc>
    <method type="void" name="setTranslateX" startLine="297" endLine="299" />
    <javadoc>
      <text>* Get the X offset translation.</text>
      <return>the X translation.</return>
    </javadoc>
    <method type="double" name="getTranslateX" startLine="306" endLine="308" />
    <javadoc>
      <text>* Set text translation offset Y.</text>
      <param>y the Y translation.</param>
    </javadoc>
    <method type="void" name="setTranslateY" startLine="315" endLine="317" />
    <javadoc>
      <text>* Get the Y offset translation.</text>
      <return>the Y translation.</return>
    </javadoc>
    <method type="double" name="getTranslateY" startLine="324" endLine="326" />
    <javadoc>
      <text>* Set the text translation offset to the specified position.</text>
      <param>x the X component of translation</param>
      <param>y the Y component of translation</param>
    </javadoc>
    <method type="void" name="setTranslation" startLine="334" endLine="339" />
    <javadoc>
      <text>* Set the text translation offset to point p.</text>
      <param>p The translation offset.</param>
    </javadoc>
    <method type="void" name="setTranslation" startLine="346" endLine="348" />
    <javadoc>
      <text>* Get the text translation offset.</text>
      <return>The translation offset.</return>
    </javadoc>
    <method type="Point2D" name="getTranslation" startLine="355" endLine="358">
      <declaration type="Point2D" name="p" />
    </method>
    <javadoc>
      <text>* Renders the text object.
 * <p>
 * The transform, clip, and composite will be set appropriately when this
 * object is rendered. It is up to this object to restore the transform,
 * clip, and composite of the Graphics2D if this node changes any of them.
 * However, the color, font, and stroke are unspecified by Jazz. This object
 * should set those things if they are used, but they do not need to be
 * restored.</text>
      <param>ppc Contains information about current render.</param>
    </javadoc>
    <method type="void" name="paint" startLine="372" endLine="400">
      <scope startLine="373" endLine="375" />
      <declaration type="Graphics2D" name="g2" />
      <declaration type="AffineTransform" name="at" />
      <declaration type="boolean" name="translated" />
      <scope startLine="381" endLine="385" />
      <declaration type="double" name="renderedFontSize" />
      <scope startLine="390" endLine="392" />
      <scope startLine="393" endLine="395" />
      <scope startLine="397" endLine="399" />
      <comment>If font is too small then render it as "greek"</comment>
    </method>
    <javadoc>
      <text>* Paints this object as greek.</text>
      <param>ppc The graphics context to paint into.</param>
    </javadoc>
    <method type="void" name="paintAsGreek" startLine="407" endLine="414">
      <declaration type="Graphics2D" name="g2" />
      <scope startLine="410" endLine="413" />
    </method>
    <javadoc>
      <text>* Paints this object normally (show it's text). Note that the entire text
 * gets rendered so that it's upper left corner appears at the origin of
 * this local object.</text>
      <param>ppc The graphics context to paint into.</param>
    </javadoc>
    <method type="void" name="paintAsText" startLine="423" endLine="458">
      <declaration type="SWTGraphics2D" name="sg2" />
      <scope startLine="426" endLine="435">
        <scope startLine="427" endLine="429" />
        <scope startLine="430" endLine="432" />
      </scope>
      <declaration type="String" name="line" />
      <declaration type="double" name="y" />
      <declaration type="FontMetrics" name="fontMetrics" />
      <declaration type="Iterator" name="lineIterator" />
      <scope startLine="448" endLine="455">
        <scope startLine="450" endLine="452" />
      </scope>
    </method>
    <javadoc>
      <text>* Recalculates this node's bounding box by examining it's text content.</text>
    </javadoc>
    <method type="void" name="recomputeBounds" startLine="463" endLine="479">
      <declaration type="GC" name="gc" />
      <declaration type="Point" name="newBounds" />
      <scope startLine="467" endLine="471">
        <comment>If no text, then we want to have the bounds of a space character,</comment>
        <comment>so get those bounds here</comment>
      </scope>
      <scope startLine="472" endLine="474" />
    </method>
    <javadoc>
      <text>* Determines if this node's text is essentially empty.</text>
      <return>true if the text is the empty string</return>
    </javadoc>
    <method type="boolean" name="isTextEmpty" startLine="486" endLine="488" />
    <javadoc>
      <text>* Calculates the bounds of the text in the box as measured by the given
 * graphics context and font metrics.</text>
      <param>gc graphics context from which the measurements are done</param>
      <return>point representing the dimensions of the text's bounds</return>
    </javadoc>
    <method type="Point" name="calculateTextBounds" startLine="497" endLine="521">
      <declaration type="SWTGraphics2D" name="g2" />
      <declaration type="FontMetrics" name="fm" />
      <declaration type="Point" name="textBounds" />
      <declaration type="boolean" name="firstLine" />
      <declaration type="Iterator" name="lineIterator" />
      <scope startLine="506" endLine="518">
        <declaration type="String" name="line" />
        <declaration type="Point" name="lineBounds" />
        <scope startLine="509" endLine="513" />
        <scope startLine="514" endLine="517" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="internalUpdateBounds" startLine="524" endLine="526" />
  </class>
</source>
