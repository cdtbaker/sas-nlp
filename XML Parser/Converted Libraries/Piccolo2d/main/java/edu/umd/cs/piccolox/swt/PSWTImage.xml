<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.swt">
  <import name="org.eclipse.swt.events.DisposeEvent" />
  <import name="org.eclipse.swt.events.DisposeListener" />
  <import name="org.eclipse.swt.graphics.Image" />
  <import name="org.eclipse.swt.graphics.Rectangle" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.nodes.PImage" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <class name="PSWTImage" extends="PNode" startLine="41">
    <javadoc>
      <text>* <b>PSWTImage</b> is a wrapper around a org.eclipse.swt.graphics.Image.</text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <declaration type="PSWTCanvas" name="canvas" />
    <declaration type="Image" name="image" />
    <javadoc>
      <text>* Constructs a PSWTImage attached to the provided canvas and with a null
 * image.
 * The developer will need to call setImage for this node to be useful.
 * TODO: determine if canvas is actually necessary</text>
      <param>canvas canvas to associate with the image node</param>
    </javadoc>
    <method type="constructor" name="PSWTImage" startLine="64" endLine="71">
      <method type="void" name="widgetDisposed" startLine="67" endLine="69" />
    </method>
    <javadoc>
      <text>* Constructs a PSWTImage wrapping the provided image.</text>
      <param>canvas canvas to associate with the image node</param>
      <param>image image to be wrapped by this PSWTImage</param>
    </javadoc>
    <method type="constructor" name="PSWTImage" startLine="79" endLine="82" />
    <javadoc>
      <text>* Constructs a PSWTImage wrapping the provided image after loading it from
 * the file.</text>
      <param>canvas canvas to associate with the image node</param>
      <param>fileName path to the image, will be loaded and converted to an
 * Image internally</param>
    </javadoc>
    <method type="constructor" name="PSWTImage" startLine="92" endLine="95" />
    <javadoc>
      <text>* Returns the image that is shown by this node, may be null.</text>
      <return>the image that is shown by this node</return>
    </javadoc>
    <method type="Image" name="getImage" startLine="102" endLine="104" />
    <javadoc>
      <text>* Set the image that is wrapped by this PImage node. This method will also
 * load the image using a MediaTracker before returning. And if the this
 * PImage is accelerated that image will be copied into an accelerated image
 * if needed. Note that this may cause undesired results with images that
 * have transparent regions, for those cases you may want to set the PImage
 * to be not accelerated.</text>
      <param>filePath path to the file to load as an image</param>
    </javadoc>
    <method type="void" name="setImage" startLine="116" endLine="118" />
    <javadoc>
      <text>* Set the image that is wrapped by this PImage node. This method will also
 * load the image using a MediaTracker before returning. And if the this
 * PImage is accelerated that I'm will be copied into an accelerated image
 * if needed. Note that this may cause undesired results with images that
 * have transparent regions, for those cases you may want to set the PImage
 * to be not accelerated.</text>
      <param>newImage the image that should replace the current one</param>
    </javadoc>
    <method type="void" name="setImage" startLine="130" endLine="141">
      <declaration type="Image" name="old" />
      <scope startLine="134" endLine="138">
        <declaration type="Rectangle" name="bounds" />
      </scope>
    </method>
    <javadoc>
      <text>* Subclasses may override this method to provide different image dispose
 * behavior.</text>
    </javadoc>
    <method type="void" name="disposeImage" startLine="147" endLine="151">
      <scope startLine="148" endLine="150" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="paint" startLine="154" endLine="171">
      <scope startLine="155" endLine="170">
        <declaration type="Rectangle" name="r" />
        <declaration type="PBounds" name="b" />
        <declaration type="SWTGraphics2D" name="g2" />
        <scope startLine="160" endLine="162" />
        <scope startLine="163" endLine="169" />
      </scope>
    </method>
  </class>
</source>
