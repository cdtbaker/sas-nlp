<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.nodes">
  <import name="java.awt.BasicStroke" />
  <import name="java.awt.Color" />
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.Paint" />
  <import name="java.awt.Shape" />
  <import name="java.awt.Stroke" />
  <import name="java.awt.geom.Ellipse2D" />
  <import name="java.awt.geom.GeneralPath" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.awt.geom.Rectangle2D" />
  <import name="java.awt.geom.RoundRectangle2D" />
  <import name="java.io.IOException" />
  <import name="java.io.ObjectInputStream" />
  <import name="java.io.ObjectOutputStream" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.util.PAffineTransform" />
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <import name="edu.umd.cs.piccolo.util.PUtil" />
  <class name="PPath" extends="PNode" startLine="51">
    <javadoc>
      <text>* <b>PPath</b> is a wrapper around a java.awt.geom.GeneralPath. The setBounds
 * method works by scaling the path to fit into the specified bounds. This
 * normally works well, but if the specified base bounds get too small then it
 * is impossible to expand the path shape again since all its numbers have
 * tended to zero, so application code may need to take this into consideration.
 * <P>
 * One option that applications have is to call <code>startResizeBounds</code>
 * before starting an interaction that may make the bounds very small, and
 * calling <code>endResizeBounds</code> when this interaction is finished. When
 * this is done PPath will use a copy of the original path to do the resizing so
 * the numbers in the path wont loose resolution.
 * <P>
 * This class also provides methods for constructing common shapes using a
 * general path.
 * <P></text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc>
      <text>* Allows for future serialization code to understand versioned binary
 * formats.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* The property name that identifies a change of this node's stroke paint
 * (see {@link #getStrokePaint getStrokePaint}). Both old and new value will
 * be set correctly to Paint objects in any property change event.</text>
    </javadoc>
    <declaration type="String" name="PROPERTY_STROKE_PAINT" />
    <javadoc>
      <text>* The property code that identifies a change of this node's stroke paint
 * (see {@link #getStrokePaint getStrokePaint}). Both old and new value will
 * be set correctly to Paint objects in any property change event.</text>
    </javadoc>
    <declaration type="int" name="PROPERTY_CODE_STROKE_PAINT" />
    <javadoc>
      <text>* The property name that identifies a change of this node's stroke (see{@link #getStroke getStroke}). Both old and new value will be set
 * correctly to Stroke objects in any property change event.</text>
    </javadoc>
    <declaration type="String" name="PROPERTY_STROKE" />
    <javadoc>
      <text>* The property code that identifies a change of this node's stroke (see{@link #getStroke getStroke}). Both old and new value will be set
 * correctly to Stroke objects in any property change event.</text>
    </javadoc>
    <declaration type="int" name="PROPERTY_CODE_STROKE" />
    <javadoc>
      <text>* The property name that identifies a change of this node's path (see{@link #getPathReference getPathReference}). In any property change event
 * the new value will be a reference to this node's path, but old value will
 * always be null.</text>
    </javadoc>
    <declaration type="String" name="PROPERTY_PATH" />
    <javadoc>
      <text>* The property code that identifies a change of this node's path (see{@link #getPathReference getPathReference}). In any property change event
 * the new value will be a reference to this node's path, but old value will
 * always be null.</text>
    </javadoc>
    <declaration type="int" name="PROPERTY_CODE_PATH" />
    <declaration type="Rectangle2D.Float" name="TEMP_RECTANGLE" />
    <declaration type="RoundRectangle2D.Float" name="TEMP_ROUNDRECTANGLE" />
    <declaration type="Ellipse2D.Float" name="TEMP_ELLIPSE" />
    <declaration type="PAffineTransform" name="TEMP_TRANSFORM" />
    <declaration type="BasicStroke" name="DEFAULT_STROKE" />
    <declaration type="Color" name="DEFAULT_STROKE_PAINT" />
    <declaration type="GeneralPath" name="path" />
    <declaration type="GeneralPath" name="resizePath" />
    <declaration type="Stroke" name="stroke" />
    <declaration type="boolean" name="updatingBoundsFromPath" />
    <declaration type="Paint" name="strokePaint" />
    <javadoc>
      <text>* Creates a PPath object in the shape of a rectangle.</text>
      <param>x left of the rectangle</param>
      <param>y top of the rectangle</param>
      <param>width width of the rectangle</param>
      <param>height height of the rectangle</param>
      <return>created rectangle</return>
    </javadoc>
    <method type="PPath" name="createRectangle" startLine="146" endLine="151">
      <declaration type="PPath" name="result" />
    </method>
    <javadoc>
      <text>* Creates a PPath object in the shape of a rounded rectangle.</text>
      <param>x left of the rectangle</param>
      <param>y top of the rectangle</param>
      <param>width width of the rectangle</param>
      <param>height height of the rectangle</param>
      <param>arcWidth the arc width at the corners of the rectangle</param>
      <param>arcHeight the arc height at the corners of the rectangle</param>
      <return>created rounded rectangle</return>
    </javadoc>
    <method type="PPath" name="createRoundRectangle" startLine="166" endLine="171">
      <declaration type="PPath" name="result" />
    </method>
    <javadoc>
      <text>* Creates a PPath object in the shape of an ellipse.</text>
      <param>x left of the ellipse</param>
      <param>y top of the ellipse</param>
      <param>width width of the ellipse</param>
      <param>height height of the ellipse</param>
      <return>created ellipse</return>
    </javadoc>
    <method type="PPath" name="createEllipse" startLine="183" endLine="188">
      <declaration type="PPath" name="result" />
    </method>
    <javadoc>
      <text>* Creates a PPath in the shape of a line.</text>
      <param>x1 x component of the first point</param>
      <param>y1 y component of the first point</param>
      <param>x2 x component of the second point</param>
      <param>y2 y component of the second point</param>
      <return>created line</return>
    </javadoc>
    <method type="PPath" name="createLine" startLine="200" endLine="206">
      <declaration type="PPath" name="result" />
    </method>
    <javadoc>
      <text>* Creates a PPath for the poly-line for the given points.</text>
      <param>points array of points for the point lines</param>
      <return>created poly-line for the given points</return>
    </javadoc>
    <method type="PPath" name="createPolyline" startLine="215" endLine="220">
      <declaration type="PPath" name="result" />
    </method>
    <javadoc>
      <text>* Creates a PPath for the poly-line for the given points.</text>
      <param>xp array of x components of the points of the poly-lines</param>
      <param>yp array of y components of the points of the poly-lines</param>
      <return>created poly-line for the given points</return>
    </javadoc>
    <method type="PPath" name="createPolyline" startLine="230" endLine="235">
      <declaration type="PPath" name="result" />
    </method>
    <javadoc>
      <text>* Creates an empty PPath with the default paint and stroke.</text>
    </javadoc>
    <method type="constructor" name="PPath" startLine="240" endLine="244" />
    <javadoc>
      <text>* Creates an PPath in the given shape with the default paint and stroke.</text>
      <param>aShape the desired shape</param>
    </javadoc>
    <method type="constructor" name="PPath" startLine="251" endLine="253" />
    <javadoc>
      <text>* Construct this path with the given shape and stroke. This method may be
 * used to optimize the creation of a large number of PPaths. Normally
 * PPaths have a default stroke of width one, but when a path has a non null
 * stroke it takes significantly longer to compute its bounds. This method
 * allows you to override that default stroke before the bounds are ever
 * calculated, so if you pass in a null stroke here you won't ever have to
 * pay that bounds calculation price if you don't need to.</text>
      <param>aShape desired shape or null if you desire an empty path</param>
      <param>aStroke desired stroke</param>
    </javadoc>
    <method type="constructor" name="PPath" startLine="267" endLine="273">
      <scope startLine="270" endLine="272" />
    </method>
    <javadoc>
      <text>* Returns the stroke paint of the PPath.</text>
      <return>stroke paint of the PPath</return>
    </javadoc>
    <method type="Paint" name="getStrokePaint" startLine="280" endLine="282" />
    <javadoc>
      <text>* Sets the stroke paint of the path.</text>
      <param>newStrokePaint the paint to use as this path's stroke paint</param>
    </javadoc>
    <method type="void" name="setStrokePaint" startLine="289" endLine="294">
      <declaration type="Paint" name="oldStrokePaint" />
    </method>
    <javadoc>
      <text>* Returns the stroke to use when drawing the path.</text>
      <return>current stroke of path</return>
    </javadoc>
    <method type="Stroke" name="getStroke" startLine="301" endLine="303" />
    <javadoc>
      <text>* Sets the stroke to use when drawing the path.</text>
      <param>aStroke stroke to use when drawing the path</param>
    </javadoc>
    <method type="void" name="setStroke" startLine="310" endLine="316">
      <declaration type="Stroke" name="old" />
    </method>
    <javadoc>
      <text>* Stores the original size of the path before resizing started.</text>
    </javadoc>
    <method type="void" name="startResizeBounds" startLine="319" endLine="321" />
    <javadoc>
      <text>* Clears the size of the path before resizing.</text>
    </javadoc>
    <method type="void" name="endResizeBounds" startLine="324" endLine="326" />
    <javadoc>
      <text>* Set the bounds of this path. This method works by scaling the path to fit
 * into the specified bounds. This normally works well, but if the specified
 * base bounds get too small then it is impossible to expand the path shape
 * again since all its numbers have tended to zero, so application code may
 * need to take this into consideration.</text>
      <param>x new left position of bounds</param>
      <param>y new top position of bounds</param>
      <param>width the new width of the bounds</param>
      <param>height the new height of the bounds</param>
    </javadoc>
    <method type="void" name="internalUpdateBounds" startLine="340" endLine="383">
      <scope startLine="341" endLine="343" />
      <scope startLine="345" endLine="348" />
      <declaration type="Rectangle2D" name="pathBounds" />
      <declaration type="Rectangle2D" name="pathStrokeBounds" />
      <declaration type="double" name="strokeOutset" />
      <declaration type="double" name="adjustedX" />
      <declaration type="double" name="adjustedY" />
      <declaration type="double" name="adjustedWidth" />
      <declaration type="double" name="adjustedHeight" />
      <declaration type="double" name="scaleX" />
      <scope startLine="362" endLine="364" />
      <scope startLine="365" endLine="367" />
      <declaration type="double" name="scaleY" />
      <scope startLine="370" endLine="372" />
      <scope startLine="373" endLine="375" />
    </method>
    <javadoc>
      <text>* Returns true if path crosses the provided bounds. Takes visibility of
 * path into account.</text>
      <param>aBounds bounds being tested for intersection</param>
      <return>true if path visibly crosses bounds</return>
    </javadoc>
    <method type="boolean" name="intersects" startLine="392" endLine="402">
      <scope startLine="393" endLine="400">
        <scope startLine="394" endLine="396" />
        <scope startLine="397" endLine="399" />
      </scope>
    </method>
    <javadoc>
      <text>* Calculates the path's bounds taking stroke into account.</text>
      <return>bounds of the path taking stroke width into account</return>
    </javadoc>
    <method type="Rectangle2D" name="getPathBoundsWithStroke" startLine="409" endLine="416">
      <scope startLine="410" endLine="412" />
      <scope startLine="413" endLine="415" />
    </method>
    <javadoc>
      <text>* Recomputes the bounds taking stroke into account.</text>
    </javadoc>
    <method type="void" name="updateBoundsFromPath" startLine="421" endLine="431">
      <scope startLine="423" endLine="425" />
      <scope startLine="426" endLine="429">
        <declaration type="Rectangle2D" name="b" />
      </scope>
    </method>
    <javadoc>
      <text>* Paints the path in the provided paintContext. Can perform very
 * differently depending on whether the path is being drawn using its stroke
 * or its paint.
 * It both are provided to the path, fun ensues.</text>
      <param>paintContext context in which painting is occurring</param>
    </javadoc>
    <method type="void" name="paint" startLine="442" endLine="456">
      <declaration type="Paint" name="p" />
      <declaration type="Graphics2D" name="g2" />
      <scope startLine="446" endLine="449" />
      <scope startLine="451" endLine="455" />
    </method>
    <javadoc>
      <text>* Provides direct access to the underlying GeneralPath object.</text>
      <return>underlying GeneralPath</return>
    </javadoc>
    <method type="GeneralPath" name="getPathReference" startLine="463" endLine="465" />
    <javadoc>
      <text>* Appends a "move" operation to the end of the path.</text>
      <param>x the x component of the point to move to</param>
      <param>y the y component of the point to move to</param>
    </javadoc>
    <method type="void" name="moveTo" startLine="473" endLine="478" />
    <javadoc>
      <text>* Draws a line from the last point in the path to point provided.</text>
      <param>x the x component of the point</param>
      <param>y the y component of the point</param>
    </javadoc>
    <method type="void" name="lineTo" startLine="486" endLine="491" />
    <javadoc>
      <text>* Adds a curved segment, defined by two new points, to the path by drawing
 * a Quadratic curve that intersects both the current coordinates and the
 * coordinates (x2, y2), using the specified point (x1, y1) as a quadratic
 * parametric control point.</text>
      <param>x1 x component of quadratic parametric control point</param>
      <param>y1 y component of quadratic parametric control point</param>
      <param>x2 x component of point through which quad curve will pass</param>
      <param>y2 y component of point through which quad curve will pass</param>
    </javadoc>
    <method type="void" name="quadTo" startLine="504" endLine="509" />
    <javadoc>
      <text>* Adds a curved segment, defined by three new points, to the path by
 * drawing a B&#233;zier curve that intersects both the current coordinates and
 * the coordinates (x3, y3), using the specified points (x1, y1) and (x2,
 * y2) as B&#233;zier control points.</text>
      <param>x1 x component of first B&#233;zier control point</param>
      <param>y1 y component of first B&#233;zier control point</param>
      <param>x2 x component of second B&#233;zier control point</param>
      <param>y2 y component of second B&#233;zier control point</param>
      <param>x3 x component of point through which curve must pass</param>
      <param>y3 y component of point through which curve must pass</param>
    </javadoc>
    <method type="void" name="curveTo" startLine="525" endLine="530" />
    <javadoc>
      <text>* Appends the provided shape to the end of this path, it may conditionally
 * connect them together if they are disjoint.</text>
      <param>aShape shape to append</param>
      <param>connect whether to perform a lineTo operation to the beginning of
 * the shape before appending</param>
    </javadoc>
    <method type="void" name="append" startLine="540" endLine="545" />
    <javadoc>
      <text>* Replaces this PPath's path with the one provided.</text>
      <param>aShape shape to replace the current one with</param>
    </javadoc>
    <method type="void" name="setPathTo" startLine="552" endLine="555" />
    <javadoc>
      <text>* Resets the path to a rectangle with the dimensions and position provided.</text>
      <param>x left of the rectangle</param>
      <param>y top of te rectangle</param>
      <param>width width of the rectangle</param>
      <param>height height of the rectangle</param>
    </javadoc>
    <method type="void" name="setPathToRectangle" startLine="565" endLine="568" />
    <javadoc>
      <text>* Resets the path to an ellipse positioned at the coordinate provided with
 * the dimensions provided.</text>
      <param>x left of the ellipse</param>
      <param>y top of the ellipse</param>
      <param>width width of the ellipse</param>
      <param>height height of the ellipse</param>
    </javadoc>
    <method type="void" name="setPathToEllipse" startLine="579" endLine="582" />
    <javadoc>
      <text>* Sets the path to a sequence of segments described by the points.</text>
      <param>points points to that lie along the generated path</param>
    </javadoc>
    <method type="void" name="setPathToPolyline" startLine="589" endLine="598">
      <scope startLine="592" endLine="594" />
    </method>
    <javadoc>
      <text>* Sets the path to a sequence of segments described by the point components
 * provided.</text>
      <param>xp the x components of the points along the path</param>
      <param>yp the y components of the points along the path</param>
    </javadoc>
    <method type="void" name="setPathToPolyline" startLine="607" endLine="616">
      <scope startLine="610" endLine="612" />
    </method>
    <javadoc>
      <text>* Marks the path as closed. Making changes to it impossible.</text>
    </javadoc>
    <method type="void" name="closePath" startLine="621" endLine="626" />
    <javadoc>
      <text>* Empties the path.</text>
    </javadoc>
    <method type="void" name="reset" startLine="631" endLine="636" />
    <javadoc>
      <text>* Writes this PPath object to the output stream provided. Necessary since
 * stroke and path are not serializable by default.</text>
      <param>out output stream into which objects are to be serialized</param>
      <throws>IOException if serialiazing to output stream fails</throws>
    </javadoc>
    <method type="void" name="writeObject" startLine="645" endLine="649" />
    <javadoc>
      <text>* Deserializes a PPath object from the provided input stream. This method
 * is required since Strokes and GeneralPaths are not serializable by
 * default.</text>
      <param>in stream from which to read this PPath's state</param>
      <throws>IOException when exception occurs reading from input stream</throws>
      <throws>ClassNotFoundException</throws>
    </javadoc>
    <method type="void" name="readObject" startLine="660" endLine="664" />
  </class>
</source>
