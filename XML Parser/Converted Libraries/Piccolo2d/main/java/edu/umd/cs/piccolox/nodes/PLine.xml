<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.nodes">
  <import name="java.awt.BasicStroke" />
  <import name="java.awt.Color" />
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.Paint" />
  <import name="java.awt.Stroke" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.awt.geom.Rectangle2D" />
  <import name="java.io.IOException" />
  <import name="java.io.ObjectInputStream" />
  <import name="java.io.ObjectOutputStream" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.nodes.PPath" />
  <import name="edu.umd.cs.piccolo.util.PAffineTransform" />
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <import name="edu.umd.cs.piccolo.util.PUtil" />
  <import name="edu.umd.cs.piccolox.util.LineShape" />
  <class name="PLine" extends="PNode" startLine="49">
    <javadoc>
      <text>* <b>PLine</b> a class for drawing multisegment lines.</text>
      <author>Hallvard Traetteberg.</author>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <declaration type="PAffineTransform" name="TEMP_TRANSFORM" />
    <declaration type="BasicStroke" name="DEFAULT_STROKE" />
    <declaration type="Color" name="DEFAULT_STROKE_PAINT" />
    <declaration type="LineShape" name="lineShape" />
    <declaration type="Stroke" name="stroke" />
    <declaration type="Paint" name="strokePaint" />
    <javadoc>
      <text>* Constructs a new PLine with an empty LineShape.</text>
    </javadoc>
    <method type="constructor" name="PLine" startLine="68" endLine="70" />
    <javadoc>
      <text>* Constructs a PLine object for displaying the provided line.</text>
      <param>lineShape will be displayed by this PLine</param>
    </javadoc>
    <method type="constructor" name="PLine" startLine="77" endLine="87">
      <scope startLine="81" endLine="83" />
      <scope startLine="84" endLine="86" />
    </method>
    <javadoc>
      <text>* Constructs a PLine for the given lineShape and the given stroke.</text>
      <param>line line to be wrapped by this PLine</param>
      <param>aStroke stroke to use when drawling the line</param>
    </javadoc>
    <method type="constructor" name="PLine" startLine="95" endLine="98" />
    <javadoc>
      <text>* Returns the paint to be used while drawing the line.</text>
      <return>paint used when drawing the line</return>
    </javadoc>
    <method type="Paint" name="getStrokePaint" startLine="105" endLine="107" />
    <javadoc>
      <text>* Changes the paint to be used while drawing the line.</text>
      <param>newStrokePaint paint to use when drawing the line</param>
    </javadoc>
    <method type="void" name="setStrokePaint" startLine="114" endLine="119">
      <declaration type="Paint" name="oldPaint" />
    </method>
    <javadoc>
      <text>* Returns the stroke that will be used when drawing the line.</text>
      <return>stroke used to draw the line</return>
    </javadoc>
    <method type="Stroke" name="getStroke" startLine="126" endLine="128" />
    <javadoc>
      <text>* Sets stroke to use when drawing the line.</text>
      <param>newStroke stroke to use when drawing the line</param>
    </javadoc>
    <method type="void" name="setStroke" startLine="135" endLine="141">
      <declaration type="Stroke" name="oldStroke" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="setBounds" startLine="144" endLine="167">
      <scope startLine="145" endLine="147" />
      <declaration type="Rectangle2D" name="lineBounds" />
      <declaration type="Rectangle2D" name="lineStrokeBounds" />
      <declaration type="double" name="strokeOutset" />
      <declaration type="double" name="adjustedX" />
      <declaration type="double" name="adjustedY" />
      <declaration type="double" name="adjustedWidth" />
      <declaration type="double" name="adjustedHeight" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="intersects" startLine="170" endLine="180">
      <scope startLine="171" endLine="178">
        <scope startLine="172" endLine="174" />
        <scope startLine="175" endLine="177" />
      </scope>
    </method>
    <javadoc>
      <text>* Calculates the bounds of the line taking stroke width into account.</text>
      <return>rectangle representing the bounds of the line taking stroke width
 * into account</return>
    </javadoc>
    <method type="Rectangle2D" name="getLineBoundsWithStroke" startLine="188" endLine="195">
      <scope startLine="189" endLine="191" />
      <scope startLine="192" endLine="194" />
    </method>
    <javadoc>
      <text>* Recalculates the bounds when a change to the underlying line occurs.</text>
    </javadoc>
    <method type="void" name="updateBoundsFromLine" startLine="200" endLine="208">
      <scope startLine="201" endLine="203" />
      <scope startLine="204" endLine="207">
        <declaration type="Rectangle2D" name="b" />
      </scope>
    </method>
    <javadoc>
      <text>* Paints the PLine in the provided context if it has both a stroke and a
 * stroke paint assigned.</text>
      <param>paintContext the context into which the line should be drawn</param>
    </javadoc>
    <method type="void" name="paint" startLine="216" endLine="224">
      <declaration type="Graphics2D" name="g2" />
      <scope startLine="219" endLine="223" />
    </method>
    <javadoc>
      <text>* Returns a reference to the underlying line shape. Be careful!</text>
      <return>direct reference to the underlying line shape</return>
    </javadoc>
    <method type="LineShape" name="getLineReference" startLine="231" endLine="233" />
    <javadoc>
      <text>* Returns the number of points in the line.</text>
      <return>number of points in the line</return>
    </javadoc>
    <method type="int" name="getPointCount" startLine="240" endLine="242" />
    <javadoc>
      <text>* Returns the point at the provided index. If dst is not null, it will
 * populate it with the point's coordinates rather than create a new point.</text>
      <param>pointIndex index of desired point in line</param>
      <param>dst point to populate, may be null</param>
      <return>the desired point, or dst populate with its coordinates</return>
    </javadoc>
    <method type="Point2D" name="getPoint" startLine="252" endLine="261">
      <declaration type="Point2D" name="result" />
      <scope startLine="254" endLine="256" />
      <scope startLine="257" endLine="259" />
    </method>
    <javadoc>
      <text>* Fires appropriate change events, updates line bounds and flags the PLine
 * as requiring a repaint.</text>
    </javadoc>
    <method type="void" name="lineChanged" startLine="267" endLine="271" />
    <javadoc>
      <text>* Changes the point at the provided index.</text>
      <param>pointIndex index of point to change</param>
      <param>x x component to assign to the point</param>
      <param>y y component to assign to the point</param>
    </javadoc>
    <method type="void" name="setPoint" startLine="280" endLine="283" />
    <javadoc>
      <text>* Inserts a point at the provided index.</text>
      <param>pointIndex index at which to add the point</param>
      <param>x x component of new point</param>
      <param>y y component of new point</param>
    </javadoc>
    <method type="void" name="addPoint" startLine="292" endLine="295" />
    <javadoc>
      <text>* Removes points from the line.</text>
      <param>startIndex index from which to remove the points</param>
      <param>numberOfPoints number of points to remove</param>
    </javadoc>
    <method type="void" name="removePoints" startLine="303" endLine="306" />
    <javadoc>
      <text>* Removes all points from the underlying line.</text>
    </javadoc>
    <method type="void" name="removeAllPoints" startLine="311" endLine="314" />
    <method type="void" name="writeObject" startLine="316" endLine="319" />
    <method type="void" name="readObject" startLine="321" endLine="324" />
  </class>
</source>
