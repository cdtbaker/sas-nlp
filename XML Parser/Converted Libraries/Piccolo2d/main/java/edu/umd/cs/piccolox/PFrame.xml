<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox">
  <import name="java.awt.Dimension" />
  <import name="java.awt.DisplayMode" />
  <import name="java.awt.GraphicsDevice" />
  <import name="java.awt.GraphicsEnvironment" />
  <import name="java.awt.Point" />
  <import name="java.awt.Rectangle" />
  <import name="java.awt.event.KeyAdapter" />
  <import name="java.awt.event.KeyEvent" />
  <import name="java.awt.event.KeyListener" />
  <import name="java.util.ArrayList" />
  <import name="java.util.Collection" />
  <import name="java.util.EventListener" />
  <import name="java.util.Iterator" />
  <import name="javax.swing.JFrame" />
  <import name="javax.swing.SwingUtilities" />
  <import name="edu.umd.cs.piccolo.PCanvas" />
  <class name="PFrame" extends="JFrame" startLine="50">
    <javadoc>
      <text>* <b>PFrame</b> is meant to be subclassed by applications that just need a
 * PCanvas in a JFrame. It also includes full screen mode functionality when run
 * in JDK 1.4. These subclasses should override the initialize method and start
 * adding their own code there. Look in the examples package to see lots of uses
 * of PFrame.</text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <declaration type="Dimension" name="DEFAULT_FRAME_DIMENSION" />
    <declaration type="Point" name="DEFAULT_FRAME_POSITION" />
    <javadoc>
      <text>* Used to allow versioned binary streams for serializations.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Canvas being displayed on this PFrame.</text>
    </javadoc>
    <declaration type="PCanvas" name="canvas" />
    <javadoc>
      <text>* The graphics device onto which the PFrame is being displayed.</text>
    </javadoc>
    <declaration type="GraphicsDevice" name="graphicsDevice" />
    <javadoc>
      <text>* Listener that listens for escape key.</text>
    </javadoc>
    <declaration type="EventListener" name="escapeFullScreenModeListener" />
    <javadoc>
      <text>* Creates a PFrame with no title, not full screen, and with the default
 * canvas.</text>
    </javadoc>
    <method type="constructor" name="PFrame" startLine="81" endLine="83" />
    <javadoc>
      <text>* Creates a PFrame with the given title and with the default canvas.</text>
      <param>title title to display at the top of the frame</param>
      <param>fullScreenMode whether to display a full screen frame or not</param>
      <param>canvas to embed in the frame</param>
    </javadoc>
    <method type="constructor" name="PFrame" startLine="92" endLine="94" />
    <javadoc>
      <text>* Creates a PFrame with the given title and with the default canvas being
 * displayed on the provided device.</text>
      <param>title title to display at the top of the frame</param>
      <param>device device onto which PFrame is to be displayed</param>
      <param>fullScreen whether to display a full screen frame or not</param>
      <param>canvas to embed in the frame, may be null. If so, it'll create a
 * default PCanvas</param>
    </javadoc>
    <method type="constructor" name="PFrame" startLine="106" endLine="146">
      <scope startLine="114" endLine="116" />
      <scope startLine="117" endLine="120">
        <comment>expected from Applets</comment>
      </scope>
      <scope startLine="122" endLine="124" />
      <scope startLine="125" endLine="127" />
      <method type="void" name="run" startLine="141" endLine="144" />
      <comment>Manipulation of Piccolo's scene graph should be done from Swings</comment>
      <comment>event dispatch thread since Piccolo2D is not thread safe. This code</comment>
      <comment>calls initialize() from that thread once the PFrame is initialized,</comment>
      <comment>so you are safe to start working with Piccolo2D in the initialize()</comment>
      <comment>method.</comment>
    </method>
    <javadoc>
      <text>* Returns the canvas being displayed on this frame.</text>
      <return>canvas being displayed on this frame</return>
    </javadoc>
    <method type="PCanvas" name="getCanvas" startLine="153" endLine="155" />
    <javadoc>
      <text>* Returns the default frame bounds.</text>
      <return>default frame bounds</return>
    </javadoc>
    <method type="Rectangle" name="getDefaultFrameBounds" startLine="162" endLine="164" />
    <javadoc>
      <text>* Returns whether the frame is currently in full screen mode.</text>
      <return>whether the frame is currently in full screen mode</return>
    </javadoc>
    <method type="boolean" name="isFullScreenMode" startLine="171" endLine="173" />
    <javadoc>
      <text>* Switches full screen state.</text>
      <param>fullScreenMode whether to place the frame in full screen mode or
 * not.</param>
    </javadoc>
    <method type="void" name="setFullScreenMode" startLine="181" endLine="190">
      <scope startLine="182" endLine="189">
        <scope startLine="183" endLine="185" />
        <scope startLine="186" endLine="188" />
      </scope>
    </method>
    <method type="void" name="switchToFullScreenMode" startLine="192" endLine="207">
      <scope startLine="195" endLine="197" />
      <scope startLine="203" endLine="205" />
    </method>
    <method type="void" name="switchToWindowedMode" startLine="209" endLine="221">
      <scope startLine="212" endLine="214" />
    </method>
    <javadoc>
      <text>* Sets the display mode to the best device mode that can be determined.
 * Used in full screen mode.</text>
      <param>device The graphics device being controlled.</param>
    </javadoc>
    <method type="void" name="chooseBestDisplayMode" startLine="230" endLine="235">
      <declaration type="DisplayMode" name="best" />
      <scope startLine="232" endLine="234" />
    </method>
    <javadoc>
      <text>* Finds the best display mode the graphics device supports. Based on the
 * preferred modes.</text>
      <param>device the device being inspected</param>
      <return>best display mode the given device supports</return>
    </javadoc>
    <method type="DisplayMode" name="getBestDisplayMode" startLine="245" endLine="259">
      <declaration type="Iterator" name="itr" />
      <scope startLine="247" endLine="256">
        <declaration type="DisplayMode" name="each" />
        <declaration type="DisplayMode[]" name="modes" />
        <scope startLine="250" endLine="255">
          <scope startLine="252" endLine="254" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* By default return the current display mode. Subclasses may override this
 * method to return other modes in the collection.</text>
      <param>device the device being inspected</param>
      <return>preferred display mode</return>
    </javadoc>
    <method type="Collection" name="getPreferredDisplayModes" startLine="268" endLine="279">
      <declaration type="ArrayList" name="result" />
      <comment>result.add(new DisplayMode(640, 480, 32, 0)); result.add(new
 DisplayMode(640, 480, 16, 0)); result.add(new DisplayMode(640, 480,
 8, 0));</comment>
    </method>
    <javadoc>
      <text>* This method adds a key listener that will take this PFrame out of full
 * screen mode when the escape key is pressed. This is called for you
 * automatically when the frame enters full screen mode.</text>
    </javadoc>
    <method type="void" name="addEscapeFullScreenModeListener" startLine="286" endLine="296">
      <method type="void" name="keyPressed" startLine="289" endLine="293">
        <scope startLine="290" endLine="292" />
      </method>
    </method>
    <javadoc>
      <text>* This method removes the escape full screen mode key listener. It will be
 * called for you automatically when full screen mode exits, but the method
 * has been made public for applications that wish to use other methods for
 * exiting full screen mode.</text>
    </javadoc>
    <method type="void" name="removeEscapeFullScreenModeListener" startLine="304" endLine="309">
      <scope startLine="305" endLine="308" />
    </method>
    <javadoc>
      <text>* This method will be called before the initialize() method and will be
 * called on the thread that is constructing this object.</text>
    </javadoc>
    <method type="void" name="beforeInitialize" startLine="319" endLine="320" />
    <javadoc>
      <text>* Subclasses should override this method and add their Piccolo2D
 * initialization code there. This method will be called on the swing event
 * dispatch thread. Note that the constructors of PFrame subclasses may not
 * be complete when this method is called. If you need to initialize some
 * things in your class before this method is called place that code in
 * beforeInitialize();</text>
    </javadoc>
    <method type="void" name="initialize" startLine="330" endLine="331" />
    <javadoc>
      <text>* Method for testing the creating of PFrame.</text>
      <deprecated>since it's not terribly useful</deprecated>
      <param>argv command line arguments</param>
    </javadoc>
    <method type="void" name="main" startLine="340" endLine="342" />
    <comment>****************************************************************</comment>
    <comment>Initialize</comment>
    <comment>****************************************************************</comment>
  </class>
</source>
