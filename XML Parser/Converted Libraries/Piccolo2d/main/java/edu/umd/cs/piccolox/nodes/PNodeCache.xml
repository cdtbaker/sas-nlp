<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.nodes">
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.Image" />
  <import name="java.awt.geom.Dimension2D" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <import name="edu.umd.cs.piccolo.util.PDimension" />
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <import name="edu.umd.cs.piccolo.util.PPickPath" />
  <class name="PNodeCache" extends="PNode" startLine="41">
    <javadoc>
      <text>* <b>PNodeCache</b> caches a visual representation of it's children into an
 * image and uses this cached image for painting instead of painting it's
 * children directly. This is intended to be used in two ways.
 * <p>
 * First it can be used as a simple optimization technique. If a node has many
 * descendents it may be faster to paint the cached image representation instead
 * of painting each node.
 * </p>
 * <p>
 * Second PNodeCache provides a place where "image" effects such as blurring and
 * drop shadows can be added to the Piccolo scene graph. This can be done by
 * overriding the method createImageCache and returing an image with the desired
 * effect applied.
 * </p></text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <declaration type="Image" name="imageCache" />
    <declaration type="boolean" name="validatingCache" />
    <javadoc>
      <text>* Override this method to customize the image cache creation process. For
 * example if you want to create a shadow effect you would do that here.
 * Fill in the cacheOffsetRef if needed to make your image cache line up
 * with the nodes children.</text>
      <param>cacheOffsetRef output parameter that can be changed to make the
 * cached offset line up with the node's children</param>
      <return>an image representing this node</return>
    </javadoc>
    <method type="Image" name="createImageCache" startLine="75" endLine="77" />
    <javadoc>
      <text>* Returns an image that is a cached representation of its children.</text>
      <return>image representation of its children</return>
    </javadoc>
    <method type="Image" name="getImageCache" startLine="84" endLine="96">
      <scope startLine="85" endLine="94">
        <declaration type="PDimension" name="cacheOffsetRef" />
        <declaration type="PBounds" name="b" />
      </scope>
    </method>
    <javadoc>
      <text>* Clears the cache, forcing it to be recalculated on the next call to
 * getImageCache.</text>
    </javadoc>
    <method type="void" name="invalidateCache" startLine="102" endLine="104" />
    <javadoc>
      <text>* Intercepts the normal invalidatePaint mechanism so that the node will not
 * be repainted unless it's cache has been invalidated.</text>
    </javadoc>
    <method type="void" name="invalidatePaint" startLine="110" endLine="114">
      <scope startLine="111" endLine="113" />
    </method>
    <javadoc>
      <text>* Handles a repaint event issued from a node in this node's tree.</text>
      <param>localBounds local bounds of this node that need repainting</param>
      <param>childOrThis the node that emitted the repaint notification</param>
    </javadoc>
    <method type="void" name="repaintFrom" startLine="122" endLine="127">
      <scope startLine="123" endLine="126" />
    </method>
    <javadoc>
      <text>* Repaints this node, using the cached result if possible.</text>
      <param>paintContext context in which painting should occur</param>
    </javadoc>
    <method type="void" name="fullPaint" startLine="134" endLine="142">
      <scope startLine="135" endLine="137" />
      <scope startLine="138" endLine="141">
        <declaration type="Graphics2D" name="g2" />
      </scope>
    </method>
    <javadoc>
      <text>* By always returning false, makes the PNodeCache instance NOT pickable.</text>
      <param>pickPath path which this node is being tested for inclusion</param>
      <return>always returns false</return>
    </javadoc>
    <method type="boolean" name="pickAfterChildren" startLine="150" endLine="152" />
  </class>
</source>
