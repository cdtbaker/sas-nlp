<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.handles">
  <import name="java.awt.Cursor" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.util.ArrayList" />
  <import name="java.util.Iterator" />
  <import name="javax.swing.SwingConstants" />
  <import name="edu.umd.cs.piccolo.PCamera" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.event.PBasicInputEventHandler" />
  <import name="edu.umd.cs.piccolo.event.PInputEvent" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <import name="edu.umd.cs.piccolo.util.PDimension" />
  <import name="edu.umd.cs.piccolo.util.PPickPath" />
  <import name="edu.umd.cs.piccolox.util.PBoundsLocator" />
  <class name="PBoundsHandle" extends="PHandle" startLine="47">
    <javadoc>
      <text>* <b>PBoundsHandle</b> a handle for resizing the bounds of another node. If a
 * bounds handle is dragged such that the other node's width or height becomes
 * negative then the each drag handle's locator assciated with that other node
 * is "flipped" so that they are attached to and dragging a different corner of
 * the nodes bounds.</text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Event handler responsible for changing the mouse when it enters the
 * handle.</text>
    </javadoc>
    <declaration type="PBasicInputEventHandler" name="handleCursorHandler" />
    <javadoc>
      <text>* Adds bounds handles to the corners and edges of the provided node.</text>
      <param>node node to be extended with bounds handles</param>
    </javadoc>
    <method type="void" name="addBoundsHandlesTo" startLine="71" endLine="80" />
    <javadoc>
      <text>* Adds stick handles (always visible regardless of scale since they are
 * attached to the camera) to the node provided.</text>
      <param>node node being extended with bounds handles</param>
      <param>camera camera onto which handles will appear</param>
    </javadoc>
    <method type="void" name="addStickyBoundsHandlesTo" startLine="89" endLine="98" />
    <javadoc>
      <text>* Removes all bounds from the node provided.</text>
      <param>node node having its handles removed from</param>
    </javadoc>
    <method type="void" name="removeBoundsHandlesFrom" startLine="105" endLine="116">
      <declaration type="ArrayList" name="handles" />
      <declaration type="Iterator" name="i" />
      <scope startLine="109" endLine="114">
        <declaration type="PNode" name="each" />
        <scope startLine="111" endLine="113" />
      </scope>
    </method>
    <javadoc>
      <text>* Creates a bounds handle that will be attached to the provided locator.</text>
      <param>locator locator used to position the node</param>
    </javadoc>
    <method type="constructor" name="PBoundsHandle" startLine="123" endLine="125" />
    <javadoc>
      <text>* Installs the handlers to this particular bounds handle.</text>
    </javadoc>
    <method type="void" name="installHandleEventHandlers" startLine="130" endLine="134" />
    <javadoc>
      <text>* Return the event handler that is responsible for setting the mouse cursor
 * when it enters/exits this handle.</text>
      <return>current handler responsible for changing the mouse cursor</return>
    </javadoc>
    <method type="PBasicInputEventHandler" name="getHandleCursorEventHandler" startLine="142" endLine="144" />
    <javadoc>
      <text>* Is invoked when the a drag starts on this handle.</text>
      <param>aLocalPoint point in the handle's coordinate system that is
 * pressed</param>
      <param>aEvent event representing the start of the drag</param>
    </javadoc>
    <method type="void" name="startHandleDrag" startLine="153" endLine="156">
      <declaration type="PBoundsLocator" name="l" />
    </method>
    <javadoc>
      <text>* Is invoked when the handle is being dragged.</text>
      <param>aLocalDimension dimension representing the magnitude of the handle
 * drag</param>
      <param>aEvent event responsible for the call</param>
    </javadoc>
    <method type="void" name="dragHandle" startLine="165" endLine="238">
      <declaration type="PBoundsLocator" name="l" />
      <declaration type="PNode" name="n" />
      <declaration type="PBounds" name="b" />
      <declaration type="PNode" name="parent" />
      <scope startLine="172" endLine="174" />
      <declaration type="double" name="dx" />
      <declaration type="double" name="dy" />
      <declaration type="boolean" name="flipX" />
      <declaration type="boolean" name="flipY" />
      <scope startLine="221" endLine="225" />
      <scope startLine="227" endLine="231" />
      <scope startLine="233" endLine="235" />
    </method>
    <javadoc>
      <text>* Call back invoked when the drag is finished.</text>
      <param>aLocalPoint point on the handle where the drag was ended</param>
      <param>aEvent event responsible for the end of the drag</param>
    </javadoc>
    <method type="void" name="endHandleDrag" startLine="246" endLine="249">
      <declaration type="PBoundsLocator" name="l" />
    </method>
    <javadoc>
      <text>* Moves locators around so that they are still logically positioned.
 * This is needed when a node is resized until its width or height is
 * negative.</text>
      <param>flipX whether to allow flipping along the x direction</param>
      <param>flipY whether to allow flipping along the y direction</param>
    </javadoc>
    <method type="void" name="flipSiblingBoundsHandles" startLine="260" endLine="268">
      <declaration type="Iterator" name="i" />
      <scope startLine="262" endLine="267">
        <declaration type="Object" name="each" />
        <scope startLine="264" endLine="266" />
      </scope>
    </method>
    <javadoc>
      <text>* Flips this bounds around if it needs to be. This is required when a node
 * is resized until either its height or width is negative.</text>
      <param>flipX whether to allow flipping along the x direction</param>
      <param>flipY whether to allow flipping along the y direction</param>
    </javadoc>
    <method type="void" name="flipHandleIfNeeded" startLine="277" endLine="363">
      <declaration type="PBoundsLocator" name="l" />
      <scope startLine="280" endLine="282" />
      <scope startLine="286" endLine="288" />
      <scope startLine="292" endLine="294" />
      <scope startLine="298" endLine="300" />
      <scope startLine="304" endLine="306" />
      <scope startLine="310" endLine="312" />
      <scope startLine="313" endLine="315" />
      <scope startLine="316" endLine="318" />
      <scope startLine="322" endLine="324" />
      <scope startLine="325" endLine="327" />
      <scope startLine="328" endLine="330" />
      <scope startLine="334" endLine="336" />
      <scope startLine="337" endLine="339" />
      <scope startLine="340" endLine="342" />
      <scope startLine="346" endLine="348" />
      <scope startLine="349" endLine="351" />
      <scope startLine="352" endLine="354" />
      <comment>reset locator to update layout</comment>
    </method>
    <javadoc>
      <text>* Returns an appropriate handle for the given side of a node.</text>
      <param>side side given as SwingConstants values.</param>
      <return>Appropriate cursor, or null if none can be identified.</return>
    </javadoc>
    <method type="Cursor" name="getCursorFor" startLine="372" endLine="400" />
    <class name="MouseCursorUpdateHandler" extends="PBasicInputEventHandler" startLine="402">
      <declaration type="boolean" name="cursorPushed" />
      <method type="constructor" name="MouseCursorUpdateHandler" startLine="405" endLine="407" />
      <javadoc>
        <text>* When mouse is entered, push appropriate mouse cursor on cursor stack.</text>
        <param>aEvent the mouse entered event</param>
      </javadoc>
      <method type="void" name="mouseEntered" startLine="414" endLine="419">
        <scope startLine="415" endLine="418" />
      </method>
      <javadoc>
        <text>* When mouse leaves, pop cursor from stack.</text>
        <param>aEvent the mouse exited event</param>
      </javadoc>
      <method type="void" name="mouseExited" startLine="426" endLine="435">
        <scope startLine="427" endLine="434">
          <declaration type="PPickPath" name="focus" />
          <scope startLine="430" endLine="433" />
        </scope>
      </method>
      <javadoc>
        <text>* If mouse is released, cursor should pop as well.</text>
        <param>event the mouse released event</param>
      </javadoc>
      <method type="void" name="mouseReleased" startLine="442" endLine="447">
        <scope startLine="443" endLine="446" />
      </method>
    </class>
  </class>
</source>
