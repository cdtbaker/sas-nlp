<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo">
  <import name="java.io.IOException" />
  <import name="java.io.ObjectInputStream" />
  <import name="java.io.ObjectOutputStream" />
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <import name="edu.umd.cs.piccolo.util.PObjectOutputStream" />
  <class name="PLayer" extends="PNode" startLine="40">
    <javadoc>
      <text>* <b>PLayer</b> is a node that can be viewed directly by multiple camera nodes.
 * Generally child nodes are added to a layer to give the viewing cameras
 * something to look at.
 * <P>
 * A single layer node may be viewed through multiple cameras with each camera
 * using its own view transform. This means that any node (since layers can have
 * children) may be visible through multiple cameras at the same time.
 * <p></text>
      <see>PCamera</see>
      <see>edu.umd.cs.piccolo.event.PInputEvent</see>
      <see>edu.umd.cs.piccolo.util.PPickPath</see>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc>
      <text>* Allows for future serialization code to understand versioned binary
 * formats.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* The property name that identifies a change in the set of this layer's
 * cameras (see {@link #getCamera getCamera}, {@link #getCameraCountgetCameraCount}, {@link #getCamerasReference getCamerasReference}). In
 * any property change event the new value will be a reference to the list
 * of cameras, but old value will always be null.</text>
    </javadoc>
    <declaration type="String" name="PROPERTY_CAMERAS" />
    <javadoc>
      <text>* The property code that identifies a change in the set of this layer's
 * cameras (see {@link #getCamera getCamera}, {@link #getCameraCountgetCameraCount}, {@link #getCamerasReference getCamerasReference}). In
 * any property change event the new value will be a reference to the list
 * of cameras, but old value will always be null.</text>
    </javadoc>
    <declaration type="int" name="PROPERTY_CODE_CAMERAS" />
    <javadoc>
      <text>* Cameras which are registered as viewers of this PLayer.</text>
    </javadoc>
    <declaration type="List" name="cameras" />
    <javadoc>
      <text>* Creates a PLayer without any cameras attached to it.</text>
    </javadoc>
    <method type="constructor" name="PLayer" startLine="89" endLine="92" />
    <javadoc>
      <text>* Get the list of cameras viewing this layer.</text>
      <return>direct reference to registered cameras</return>
    </javadoc>
    <method type="List" name="getCamerasReference" startLine="104" endLine="106" />
    <javadoc>
      <text>* Get the number of cameras viewing this layer.</text>
      <return>the number of cameras attached to this layer</return>
    </javadoc>
    <method type="int" name="getCameraCount" startLine="113" endLine="118">
      <scope startLine="114" endLine="116" />
    </method>
    <javadoc>
      <text>* Get the camera in this layer's camera list at the specified index.</text>
      <param>index index of camera to fetch</param>
      <return>camera at the given index</return>
    </javadoc>
    <method type="PCamera" name="getCamera" startLine="126" endLine="128" />
    <javadoc>
      <text>* Add a camera to this layer's camera list. This method it called
 * automatically when a layer is added to a camera.</text>
      <param>camera the camera to add to this layer</param>
    </javadoc>
    <method type="void" name="addCamera" startLine="136" endLine="138" />
    <javadoc>
      <text>* Add a camera to this layer's camera list at the specified index. This
 * method it called automatically when a layer is added to a camera.</text>
      <param>index index at which the camera should be inserted</param>
      <param>camera Camera to add to layer</param>
    </javadoc>
    <method type="void" name="addCamera" startLine="147" endLine="151" />
    <javadoc>
      <text>* Remove the camera from this layer's camera list.</text>
      <param>camera the camera to remove from the layer, does nothing if not
 * found</param>
      <return>camera that was passed in</return>
    </javadoc>
    <method type="PCamera" name="removeCamera" startLine="160" endLine="166">
      <scope startLine="161" endLine="164" />
    </method>
    <javadoc>
      <text>* Remove the camera at the given index from this layer's camera list.</text>
      <param>index the index of the camera we wish to remove</param>
      <return>camera that was removed</return>
    </javadoc>
    <method type="PCamera" name="removeCamera" startLine="175" endLine="180">
      <declaration type="PCamera" name="result" />
    </method>
    <javadoc>
      <text>* Override repaints and forward them to the cameras that are viewing this
 * layer.</text>
      <param>localBounds bounds flagged as needing repainting</param>
      <param>repaintSource the source of the repaint notification</param>
    </javadoc>
    <method type="void" name="repaintFrom" startLine="195" endLine="205">
      <scope startLine="196" endLine="198" />
      <scope startLine="202" endLine="204" />
    </method>
    <javadoc>
      <text>* Dispatches repaint notification to all registered cameras.</text>
      <param>parentBounds bounds needing repainting in parent coordinate system</param>
    </javadoc>
    <method type="void" name="notifyCameras" startLine="212" endLine="218">
      <declaration type="int" name="count" />
      <scope startLine="214" endLine="217">
        <declaration type="PCamera" name="each" />
      </scope>
    </method>
    <javadoc>
      <text>* Write this layer and all its children out to the given stream. Note that
 * the layer writes out any cameras that are viewing it conditionally, so
 * they will only get written out if someone else writes them
 * unconditionally.</text>
      <param>out object to which the layer should be streamed</param>
      <throws>IOException may occur while serializing to stream</throws>
    </javadoc>
    <method type="void" name="writeObject" startLine="236" endLine="248">
      <scope startLine="237" endLine="239" />
      <declaration type="int" name="count" />
      <scope startLine="243" endLine="245" />
    </method>
    <javadoc>
      <text>* Deserializes PLayer from the provided ObjectInputStream.</text>
      <param>in stream from which PLayer should be read</param>
      <throws>IOException since it involves quite a bit of IO</throws>
      <throws>ClassNotFoundException may occur is serialized stream has been
 * renamed after serialization</throws>
    </javadoc>
    <method type="void" name="readObject" startLine="259" endLine="275">
      <scope startLine="264" endLine="274">
        <declaration type="Object" name="each" />
        <scope startLine="266" endLine="273">
          <scope startLine="267" endLine="269" />
          <scope startLine="270" endLine="272" />
        </scope>
      </scope>
    </method>
    <comment>****************************************************************</comment>
    <comment>Cameras - Maintain the list of cameras that are viewing this</comment>
    <comment>layer.</comment>
    <comment>****************************************************************</comment>
    <comment>****************************************************************</comment>
    <comment>Camera Repaint Notifications - Layer nodes must forward their</comment>
    <comment>repaints to each camera that is viewing them so that the camera</comment>
    <comment>views will also get repainted.</comment>
    <comment>****************************************************************</comment>
    <comment>****************************************************************</comment>
    <comment>Serialization - Layers conditionally serialize their cameras.</comment>
    <comment>This means that only the camera references that were unconditionally</comment>
    <comment>(using writeObject) serialized by someone else will be restored</comment>
    <comment>when the layer is unserialized.</comment>
    <comment>****************************************************************</comment>
  </class>
</source>
