<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.nodes">
  <import name="java.awt.Color" />
  <import name="java.awt.Component" />
  <import name="java.awt.Font" />
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.Paint" />
  <import name="java.awt.font.LineBreakMeasurer" />
  <import name="java.awt.font.TextAttribute" />
  <import name="java.awt.font.TextLayout" />
  <import name="java.text.AttributedCharacterIterator" />
  <import name="java.text.AttributedString" />
  <import name="java.util.ArrayList" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <class name="PText" extends="PNode" startLine="46">
    <javadoc>
      <text>* <b>PText</b> is a multi-line text node. The text will flow to base on the
 * width of the node's bounds.</text>
      <version>1.1</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc>
      <text>* Allows for future serialization code to understand versioned binary
 * formats.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* The property name that identifies a change of this node's text (see{@link #getText getText}). Both old and new value will be set in any
 * property change event.</text>
    </javadoc>
    <declaration type="String" name="PROPERTY_TEXT" />
    <javadoc>
      <text>* The property code that identifies a change of this node's text (see{@link #getText getText}). Both old and new value will be set in any
 * property change event.</text>
    </javadoc>
    <declaration type="int" name="PROPERTY_CODE_TEXT" />
    <javadoc>
      <text>* The property name that identifies a change of this node's font (see{@link #getFont getFont}). Both old and new value will be set in any
 * property change event.</text>
    </javadoc>
    <declaration type="String" name="PROPERTY_FONT" />
    <javadoc>
      <text>* The property code that identifies a change of this node's font (see{@link #getFont getFont}). Both old and new value will be set in any
 * property change event.</text>
    </javadoc>
    <declaration type="int" name="PROPERTY_CODE_FONT" />
    <javadoc>
      <text>* The property name that identifies a change of this node's text paint (see{@link #getTextPaint getTextPaint}). Both old and new value will be set
 * in any property change event.</text>
      <since>1.3</since>
    </javadoc>
    <declaration type="String" name="PROPERTY_TEXT_PAINT" />
    <javadoc>
      <text>* The property code that identifies a change of this node's text paint (see{@link #getTextPaint getTextPaint}). Both old and new value will be set
 * in any property change event.</text>
      <since>1.3</since>
    </javadoc>
    <declaration type="int" name="PROPERTY_CODE_TEXT_PAINT" />
    <javadoc>
      <text>* Default font, 12 point <code>"SansSerif"</code>. Will be made final in
 * version 2.0.</text>
    </javadoc>
    <declaration type="Font" name="DEFAULT_FONT" />
    <javadoc>
      <text>* Default greek threshold, <code>5.5d</code>. Will be made final in version
 * 2.0.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_GREEK_THRESHOLD" />
    <javadoc>
      <text>* Default horizontal alignment, <code>Component.LEFT_ALIGNMENT</code>.</text>
      <since>1.3</since>
    </javadoc>
    <declaration type="float" name="DEFAULT_HORIZONTAL_ALIGNMENT" />
    <javadoc>
      <text>* Default text, <code>""</code>.</text>
      <since>1.3</since>
    </javadoc>
    <declaration type="String" name="DEFAULT_TEXT" />
    <javadoc>
      <text>* Default text paint, <code>Color.BLACK</code>.</text>
      <since>1.3</since>
    </javadoc>
    <declaration type="Paint" name="DEFAULT_TEXT_PAINT" />
    <javadoc>
      <text>* Empty text layout array.</text>
    </javadoc>
    <declaration type="TextLayout[]" name="EMPTY_TEXT_LAYOUT_ARRAY" />
    <javadoc>
      <text>* Text for this text node.</text>
    </javadoc>
    <declaration type="String" name="text" />
    <javadoc>
      <text>* Text paint for this text node.</text>
    </javadoc>
    <declaration type="Paint" name="textPaint" />
    <javadoc>
      <text>* Font for this text node.</text>
    </javadoc>
    <declaration type="Font" name="font" />
    <javadoc>
      <text>* Greek threshold in screen font size for this text node. Will be made
 * private in version 2.0.</text>
    </javadoc>
    <declaration type="double" name="greekThreshold" />
    <javadoc>
      <text>* Horizontal alignment for this text node.</text>
    </javadoc>
    <declaration type="float" name="horizontalAlignment" />
    <javadoc>
      <text>* True if this text node should constrain its height to the height of its
 * text.</text>
    </javadoc>
    <declaration type="boolean" name="constrainHeightToTextHeight" />
    <javadoc>
      <text>* True if this text node should constrain its height to the height of its
 * text.</text>
    </javadoc>
    <declaration type="boolean" name="constrainWidthToTextWidth" />
    <javadoc>
      <text>* One or more lines of text layout.</text>
    </javadoc>
    <declaration type="TextLayout[]" name="lines" />
    <javadoc>
      <text>* Create a new text node with no text (<code>""</code>).</text>
    </javadoc>
    <method type="constructor" name="PText" startLine="181" endLine="184" />
    <javadoc>
      <text>* Create a new text node with the specified text.</text>
      <param>text text for this text node</param>
    </javadoc>
    <method type="constructor" name="PText" startLine="191" endLine="194" />
    <javadoc>
      <deprecated>by {@link #getHorizontalAlignment()}</deprecated>
      <return>the horizontal alignment value of this node</return>
    </javadoc>
    <method type="float" name="getJustification" startLine="201" endLine="203" />
    <javadoc>
      <deprecated>by {@link #setHorizontalAlignment(float)}</deprecated>
      <param>justification horizontal alignment value to assign to this node</param>
    </javadoc>
    <method type="void" name="setJustification" startLine="210" endLine="212" />
    <javadoc>
      <text>* Return the horizontal alignment for this text node. The horizontal
 * alignment will be one of <code>Component.LEFT_ALIGNMENT</code>,
 * <code>Component.CENTER_ALIGNMENT</code>, or
 * <code>Component.RIGHT_ALIGNMENT</code>. Defaults to{@link #DEFAULT_HORIZONTAL_ALIGNMENT}.</text>
      <since>1.3</since>
      <return>the horizontal alignment for this text node</return>
    </javadoc>
    <method type="float" name="getHorizontalAlignment" startLine="224" endLine="226" />
    <javadoc>
      <text>* Set the horizontal alignment for this text node to
 * <code>horizontalAlignment</code>.</text>
      <since>1.3</since>
      <param>horizontalAlignment horizontal alignment, must be one of
 * <code>Component.LEFT_ALIGNMENT</code>,
 * <code>Component.CENTER_ALIGNMENT</code>, or
 * <code>Component.RIGHT_ALIGNMENT</code></param>
    </javadoc>
    <method type="void" name="setHorizontalAlignment" startLine="238" endLine="244">
      <scope startLine="239" endLine="242" />
    </method>
    <javadoc>
      <text>* Return true if the specified horizontal alignment is one of
 * <code>Component.LEFT_ALIGNMENT</code>,
 * <code>Component.CENTER_ALIGNMENT</code>, or
 * <code>Component.RIGHT_ALIGNMENT</code>.</text>
      <param>horizontalAlignment horizontal alignment</param>
      <return>true if the specified horizontal alignment is one of
 * <code>Component.LEFT_ALIGNMENT</code>,
 * <code>Component.CENTER_ALIGNMENT</code>, or
 * <code>Component.RIGHT_ALIGNMENT</code></return>
    </javadoc>
    <method type="boolean" name="validHorizontalAlignment" startLine="258" endLine="261" />
    <javadoc>
      <text>* Return the paint used to paint this node's text.</text>
      <return>the paint used to paint this node's text</return>
    </javadoc>
    <method type="Paint" name="getTextPaint" startLine="268" endLine="270" />
    <javadoc>
      <text>* Set the paint used to paint this node's text to <code>textPaint</code>.
 * <p>
 * This is a <b>bound</b> property.
 * </p></text>
      <param>textPaint text paint</param>
    </javadoc>
    <method type="void" name="setTextPaint" startLine="281" endLine="289">
      <scope startLine="282" endLine="284" />
      <declaration type="Paint" name="oldTextPaint" />
    </method>
    <javadoc>
      <text>* Return true if this text node should constrain its width to the width of
 * its text. Defaults to <code>true</code>.</text>
      <return>true if this text node should constrain its width to the width of
 * its text</return>
    </javadoc>
    <method type="boolean" name="isConstrainWidthToTextWidth" startLine="298" endLine="300" />
    <javadoc>
      <text>* Set to <code>true</code> if this text node should constrain its width to
 * the width of its text.</text>
      <param>constrainWidthToTextWidth true if this text node should constrain
 * its width to the width of its text</param>
    </javadoc>
    <method type="void" name="setConstrainWidthToTextWidth" startLine="309" endLine="312" />
    <javadoc>
      <text>* Return true if this text node should constrain its height to the height
 * of its text. Defaults to <code>true</code>.</text>
      <return>true if this text node should constrain its height to the height
 * of its text</return>
    </javadoc>
    <method type="boolean" name="isConstrainHeightToTextHeight" startLine="321" endLine="323" />
    <javadoc>
      <text>* Set to <code>true</code> if this text node should constrain its height to
 * the height of its text.</text>
      <param>constrainHeightToTextHeight true if this text node should
 * constrain its height to the width of its text</param>
    </javadoc>
    <method type="void" name="setConstrainHeightToTextHeight" startLine="332" endLine="335" />
    <javadoc>
      <text>* Return the greek threshold in screen font size. When the screen font size
 * will be below this threshold the text is rendered as 'greek' instead of
 * drawing the text glyphs. Defaults to {@link #DEFAULT_GREEK_THRESHOLD}.</text>
      <see>PText#paintGreek(PPaintContext)</see>
      <return>the current greek threshold in screen font size</return>
    </javadoc>
    <method type="double" name="getGreekThreshold" startLine="345" endLine="347" />
    <javadoc>
      <text>* Set the greek threshold in screen font size to
 * <code>greekThreshold</code>. When the screen font size will be below this
 * threshold the text is rendered as 'greek' instead of drawing the text
 * glyphs.</text>
      <see>PText#paintGreek(PPaintContext)</see>
      <param>greekThreshold greek threshold in screen font size</param>
    </javadoc>
    <method type="void" name="setGreekThreshold" startLine="358" endLine="361" />
    <javadoc>
      <text>* Return the text for this text node. Defaults to {@link #DEFAULT_TEXT}.</text>
      <return>the text for this text node</return>
    </javadoc>
    <method type="String" name="getText" startLine="368" endLine="370" />
    <javadoc>
      <text>* Set the text for this node to <code>text</code>. The text will be broken
 * up into multiple lines based on the size of the text and the bounds width
 * of this node.
 * <p>
 * This is a <b>bound</b> property.
 * </p></text>
      <param>newText text for this text node</param>
    </javadoc>
    <method type="void" name="setText" startLine="383" endLine="399">
      <scope startLine="384" endLine="386" />
      <declaration type="String" name="oldText" />
      <scope startLine="389" endLine="391" />
      <scope startLine="392" endLine="394" />
    </method>
    <javadoc>
      <text>* Return the font for this text node. Defaults to {@link #DEFAULT_FONT}.</text>
      <return>the font for this text node</return>
    </javadoc>
    <method type="Font" name="getFont" startLine="406" endLine="408" />
    <javadoc>
      <text>* Set the font for this text node to <code>font</code>. Note that in
 * Piccolo if you want to change the size of a text object it's often a
 * better idea to scale the PText node instead of changing the font size to
 * get that same effect. Using very large font sizes can slow performance.
 * <p>
 * This is a <b>bound</b> property.
 * </p></text>
      <param>font font for this text node</param>
    </javadoc>
    <method type="void" name="setFont" startLine="422" endLine="438">
      <scope startLine="423" endLine="425" />
      <declaration type="Font" name="oldFont" />
      <scope startLine="427" endLine="429" />
      <scope startLine="430" endLine="432" />
    </method>
    <javadoc>
      <text>* Compute the bounds of the text wrapped by this node. The text layout is
 * wrapped based on the bounds of this node.</text>
    </javadoc>
    <method type="void" name="recomputeLayout" startLine="444" endLine="506">
      <declaration type="ArrayList" name="linesList" />
      <declaration type="double" name="textWidth" />
      <declaration type="double" name="textHeight" />
      <scope startLine="449" endLine="488">
        <declaration type="AttributedString" name="atString" />
        <declaration type="AttributedCharacterIterator" name="itr" />
        <declaration type="LineBreakMeasurer" name="measurer" />
        <declaration type="float" name="availableWidth" />
        <scope startLine="455" endLine="457" />
        <scope startLine="458" endLine="460" />
        <declaration type="int" name="nextLineBreakOffset" />
        <scope startLine="463" endLine="465" />
        <scope startLine="466" endLine="468" />
        <scope startLine="470" endLine="487">
          <declaration type="TextLayout" name="aTextLayout" />
          <scope startLine="473" endLine="481">
            <scope startLine="475" endLine="477" />
            <scope startLine="478" endLine="480" />
          </scope>
        </scope>
      </scope>
      <scope startLine="492" endLine="505">
        <declaration type="double" name="newWidth" />
        <declaration type="double" name="newHeight" />
        <scope startLine="496" endLine="498" />
        <scope startLine="500" endLine="502" />
      </scope>
    </method>
    <javadoc>
      <text>* Compute the next layout using the specified line break measurer,
 * available width, and next line break offset.</text>
      <param>lineBreakMeasurer line break measurer</param>
      <param>availableWidth available width</param>
      <param>nextLineBreakOffset next line break offset</param>
      <return>the next layout computed using the specified line break measurer,
 * available width, and next line break offset</return>
    </javadoc>
    <method type="TextLayout" name="computeNextLayout" startLine="519" endLine="521" />
    <javadoc>
      <text>* Paint greek with the specified paint context.</text>
      <since>1.3</since>
      <param>paintContext paint context</param>
    </javadoc>
    <method type="void" name="paintGreek" startLine="529" endLine="531">
      <comment>empty</comment>
    </method>
    <javadoc>
      <text>* Paint text with the specified paint context.</text>
      <since>1.3</since>
      <param>paintContext paint context</param>
    </javadoc>
    <method type="void" name="paintText" startLine="539" endLine="568">
      <declaration type="float" name="x" />
      <declaration type="float" name="y" />
      <declaration type="float" name="bottomY" />
      <declaration type="Graphics2D" name="g2" />
      <scope startLine="546" endLine="550" />
      <scope startLine="554" endLine="567">
        <declaration type="TextLayout" name="tl" />
        <scope startLine="558" endLine="560" />
        <declaration type="float" name="offset" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="paint" startLine="571" endLine="581">
      <scope startLine="573" endLine="575" />
      <declaration type="float" name="screenFontSize" />
      <scope startLine="577" endLine="579" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="internalUpdateBounds" startLine="584" endLine="586" />
    <comment>public static final Font DEFAULT_FONT = new Font(Font.SANS_SERIF,</comment>
    <comment>Font.PLAIN, 12); jdk 1.6+</comment>
  </class>
</source>
