<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.nodes">
  <import name="java.awt.Color" />
  <import name="java.awt.GraphicsEnvironment" />
  <import name="java.awt.Paint" />
  <import name="java.awt.geom.AffineTransform" />
  <import name="java.awt.geom.Rectangle2D" />
  <import name="java.awt.image.BufferedImage" />
  <import name="edu.umd.cs.piccolo.PCamera" />
  <import name="edu.umd.cs.piccolo.PRoot" />
  <import name="edu.umd.cs.piccolo.activities.PTransformActivity" />
  <import name="edu.umd.cs.piccolo.util.PAffineTransform" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <import name="edu.umd.cs.piccolo.util.PDimension" />
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <import name="edu.umd.cs.piccolo.util.PUtil" />
  <class name="PCacheCamera" extends="PCamera" startLine="47">
    <javadoc>
      <text>* An extension to PCamera that provides a fast image based
 * animationToCenterBounds method.</text>
      <author>Lance Good</author>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <declaration type="BufferedImage" name="paintBuffer" />
    <declaration type="boolean" name="imageAnimate" />
    <declaration type="PBounds" name="imageAnimateBounds" />
    <javadoc>
      <text>* Get the buffer used to provide fast image based animation.</text>
      <return>buffered image used to provide fast image based animation</return>
    </javadoc>
    <method type="BufferedImage" name="getPaintBuffer" startLine="65" endLine="71">
      <declaration type="PBounds" name="fRef" />
      <scope startLine="67" endLine="69" />
    </method>
    <method type="boolean" name="isBufferSmallerThanBounds" startLine="73" endLine="75" />
    <method type="BufferedImage" name="buildPaintBuffer" startLine="77" endLine="88">
      <declaration type="int" name="newBufferWidth" />
      <declaration type="int" name="newBufferHeight" />
      <scope startLine="81" endLine="83" />
      <scope startLine="84" endLine="87" />
    </method>
    <javadoc>
      <text>* Caches the information necessary to animate from the current view bounds
 * to the specified centerBounds.</text>
    </javadoc>
    <method type="AffineTransform" name="cacheViewBounds" startLine="94" endLine="135">
      <declaration type="PBounds" name="viewBounds" />
      <declaration type="PBounds" name="imageBounds" />
      <declaration type="BufferedImage" name="buffer" />
      <declaration type="Paint" name="fPaint" />
      <scope startLine="110" endLine="112" />
      <declaration type="PDimension" name="delta" />
      <declaration type="PAffineTransform" name="newTransform" />
      <scope startLine="128" endLine="132">
        <declaration type="double" name="s" />
      </scope>
      <comment>Initialize the image to the union of the current and destination</comment>
      <comment>bounds</comment>
      <comment>Now create the actual cache image that we will use to animate fast</comment>
      <comment>Do this after the painting above!</comment>
      <comment>Return the bounds to the previous viewbounds</comment>
      <comment>The code below is just copied from animateViewToCenterBounds to</comment>
      <comment>create the correct transform to center the specified bounds</comment>
    </method>
    <javadoc>
      <text>* Turns off the fast image animation and does any other applicable cleanup.</text>
    </javadoc>
    <method type="void" name="clearViewCache" startLine="140" endLine="143" />
    <javadoc>
      <text>* Mimics the standard animateViewToCenterBounds but uses a cached image for
 * performance rather than re-rendering the scene at each step.</text>
      <param>centerBounds bounds to which the view should be centered</param>
      <param>shouldScaleToFit whether the camera should scale to fit the bounds
 * so the cover as large a portion of the canvas without changing
 * the aspect ratio</param>
      <param>duration milliseconds the animation should last</param>
      <return>the scheduled activity, null if duration was 0</return>
    </javadoc>
    <method type="PTransformActivity" name="animateStaticViewToCenterBoundsFast" startLine="157" endLine="165">
      <scope startLine="158" endLine="160" />
      <declaration type="AffineTransform" name="newViewTransform" />
    </method>
    <javadoc>
      <text>* This copies the behavior of the standard animateViewToTransform but
 * clears the cache when it is done.</text>
      <param>dest the resulting transform that the view should be
 * applying when the animation is complete</param>
      <param>duration length in milliseconds that the animation should last</param>
      <return>the scheduled PTransformActivity, null if duration was 0</return>
    </javadoc>
    <method type="PTransformActivity" name="animateStaticViewToTransformFast" startLine="176" endLine="206">
      <scope startLine="177" endLine="180" />
      <declaration type="PTransformActivity.Target[]" name="t" />
      <method type="void" name="setTransform" startLine="183" endLine="185" />
      <method type="void" name="getSourceMatrix" startLine="187" endLine="189" />
      <declaration type="PTransformActivity" name="ta" />
      <method type="void" name="activityFinished" startLine="193" endLine="197" />
      <declaration type="PRoot" name="r" />
      <scope startLine="201" endLine="203" />
    </method>
    <javadoc>
      <text>* Overrides the camera's full paint method to do the fast rendering when
 * possible.</text>
      <param>paintContext Paint Contex in which the painting is done</param>
    </javadoc>
    <method type="void" name="fullPaint" startLine="214" endLine="230">
      <scope startLine="215" endLine="226">
        <declaration type="PBounds" name="fRef" />
        <declaration type="PBounds" name="viewBounds" />
        <declaration type="double" name="scale" />
        <declaration type="double" name="xOffset" />
        <declaration type="double" name="yOffset" />
        <declaration type="double" name="scaleW" />
        <declaration type="double" name="scaleH" />
      </scope>
      <scope startLine="227" endLine="229" />
    </method>
  </class>
</source>
