<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.nodes">
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.GraphicsConfiguration" />
  <import name="java.awt.GraphicsEnvironment" />
  <import name="java.awt.Image" />
  <import name="java.awt.MediaTracker" />
  <import name="java.awt.Toolkit" />
  <import name="java.awt.image.BufferedImage" />
  <import name="java.io.IOException" />
  <import name="java.io.ObjectInputStream" />
  <import name="java.io.ObjectOutputStream" />
  <import name="javax.imageio.ImageIO" />
  <import name="javax.swing.ImageIcon" />
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.util.PBounds" />
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <class name="PImage" extends="PNode" startLine="49">
    <javadoc>
      <text>* <b>PImage</b> is a wrapper around a java.awt.Image. If this node is copied or
 * serialized that image will be converted into a BufferedImage if it is not
 * already one.
 * <P></text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc>
      <text>* Allows for future serialization code to understand versioned binary
 * formats.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* The property name that identifies a change of this node's image (see{@link #getImage getImage}). Both old and new value will be set correctly
 * to Image objects in any property change event.</text>
    </javadoc>
    <declaration type="String" name="PROPERTY_IMAGE" />
    <javadoc>
      <text>* The property code that identifies a change of this node's image (see{@link #getImage getImage}). Both old and new value will be set correctly
 * to Image objects in any property change event.</text>
    </javadoc>
    <declaration type="int" name="PROPERTY_CODE_IMAGE" />
    <declaration type="Image" name="image" />
    <javadoc>
      <text>* Constructs a PImage without a java.awt.Image attached.</text>
    </javadoc>
    <method type="constructor" name="PImage" startLine="83" endLine="84" />
    <javadoc>
      <text>* Construct a new PImage by loading the given fileName and wrapping the
 * resulting java.awt.Image.</text>
      <param>fileName of the image to wrap</param>
    </javadoc>
    <method type="constructor" name="PImage" startLine="92" endLine="94" />
    <javadoc>
      <text>* Construct a new PImage wrapping the given java.awt.Image.</text>
      <param>image image that this PImage will wrap</param>
    </javadoc>
    <method type="constructor" name="PImage" startLine="101" endLine="103" />
    <javadoc>
      <text>* Construct a new PImage by loading the given url and wrapping the
 * resulting java.awt.Image. If the url is <code>null</code>, create an
 * empty PImage; this behaviour is useful when fetching resources that may
 * be missing.</text>
      <param>url URL of image resource to load</param>
    </javadoc>
    <method type="constructor" name="PImage" startLine="113" endLine="117">
      <scope startLine="114" endLine="116" />
    </method>
    <javadoc>
      <text>* Returns the image that is shown by this node, or null if none.</text>
      <return>java.awt.Image being wrapped by this node</return>
    </javadoc>
    <method type="Image" name="getImage" startLine="124" endLine="126" />
    <javadoc>
      <text>* Set the image that is wrapped by this PImage node. This method will also
 * load the image using a MediaTracker before returning.</text>
      <param>fileName file to be wrapped by this PImage</param>
    </javadoc>
    <method type="void" name="setImage" startLine="134" endLine="136" />
    <javadoc>
      <text>* Set the image that is wrapped by this PImage node. This method will also
 * load the image using a MediaTracker before returning.</text>
      <param>newImage image to be displayed by this PImage</param>
    </javadoc>
    <method type="void" name="setImage" startLine="144" endLine="160">
      <declaration type="Image" name="oldImage" />
      <scope startLine="147" endLine="149" />
      <scope startLine="150" endLine="152" />
      <scope startLine="154" endLine="157" />
    </method>
    <javadoc>
      <text>* Ensures the image is loaded enough (loading is fine).</text>
      <param>newImage to check</param>
      <return>image or null if not loaded enough.</return>
    </javadoc>
    <method type="Image" name="getLoadedImage" startLine="168" endLine="177">
      <declaration type="ImageIcon" name="imageLoader" />
    </method>
    <javadoc>
      <text>* Renders the wrapped Image, stretching it appropriately if the bounds of
 * this PImage doesn't match the bounds of the image.</text>
      <param>paintContext context into which the rendering will occur</param>
    </javadoc>
    <method type="void" name="paint" startLine="185" endLine="207">
      <scope startLine="186" endLine="188" />
      <declaration type="double" name="iw" />
      <declaration type="double" name="ih" />
      <declaration type="PBounds" name="b" />
      <declaration type="Graphics2D" name="g2" />
      <scope startLine="196" endLine="202" />
      <scope startLine="203" endLine="205" />
    </method>
    <javadoc>
      <text>* Serializes this PImage to the stream provided. The java.awt.Image wrapped
 * by this PImage is converted into a BufferedImage when serialized.</text>
      <param>out stream into which serialized object will be serialized</param>
      <throws>IOException if error occurs while writing to the output stream</throws>
    </javadoc>
    <method type="void" name="writeObject" startLine="216" endLine="222">
      <declaration type="BufferedImage" name="bufferedImage" />
      <scope startLine="219" endLine="221" />
    </method>
    <javadoc>
      <text>* Deserializes a PImage from the input stream provided.</text>
      <param>in stream from which the PImage should be read</param>
      <throws>IOException if problem occurs while reading from input stream</throws>
      <throws>ClassNotFoundException occurs is no mapping from the bytes in the
 * stream can be found to classes available</throws>
    </javadoc>
    <method type="void" name="readObject" startLine="232" endLine="235" />
    <javadoc>
      <text>* Converts the provided image into a BufferedImage. If alwaysCreateCopy is
 * false then if the image is already a buffered image it will not be copied
 * and instead the original image will just be returned.</text>
      <param>image the image to be converted</param>
      <param>alwaysCreateCopy if true, will create a copy even if image is
 * already a BufferedImage</param>
      <return>a BufferedImage equivalent to the Image provided</return>
    </javadoc>
    <method type="BufferedImage" name="toBufferedImage" startLine="247" endLine="271">
      <scope startLine="248" endLine="250" />
      <scope startLine="252" endLine="254" />
      <declaration type="BufferedImage" name="result" />
      <scope startLine="258" endLine="260" />
      <scope startLine="261" endLine="265">
        <declaration type="GraphicsConfiguration" name="graphicsConfiguration" />
      </scope>
      <declaration type="Graphics2D" name="g2" />
    </method>
  </class>
</source>
