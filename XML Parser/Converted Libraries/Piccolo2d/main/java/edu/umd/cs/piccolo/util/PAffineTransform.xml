<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.util">
  <import name="java.awt.geom.AffineTransform" />
  <import name="java.awt.geom.Dimension2D" />
  <import name="java.awt.geom.NoninvertibleTransformException" />
  <import name="java.awt.geom.Point2D" />
  <import name="java.awt.geom.Rectangle2D" />
  <class name="PAffineTransform" extends="AffineTransform" startLine="37">
    <javadoc>
      <text>* <b>PAffineTransform</b> is a subclass of AffineTransform that has been
 * extended with convenience methods.
 * <P></text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc>
      <text>* Allows for future serialization code to understand versioned binary
 * formats.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Used internally to speed up computation.</text>
    </javadoc>
    <declaration type="double[]" name="PTS1" />
    <javadoc>
      <text>* Used internally to speed up computation.</text>
    </javadoc>
    <declaration type="double[]" name="PTS2" />
    <javadoc>
      <text>* Constructs a new AffineTransform representing the Identity
 * transformation.</text>
    </javadoc>
    <method type="constructor" name="PAffineTransform" startLine="62" endLine="64" />
    <javadoc>
      <text>* Constructs a new AffineTransform from an array of double precision values
 * representing either the 4 non-translation entries or the 6 specifiable
 * entries of the 3x3 transformation matrix. The values are retrieved from
 * the array as { m00 m10 m01 m11 [m02 m12]}.</text>
      <param>flatmatrix the double array containing the values to be set in the
 * new AffineTransform object. The length of the array is assumed
 * to be at least 4. If the length of the array is less than 6,
 * only the first 4 values are taken. If the length of the array
 * is greater than 6, the first 6 values are taken.</param>
    </javadoc>
    <method type="constructor" name="PAffineTransform" startLine="78" endLine="80" />
    <javadoc>
      <text>* Constructs a new AffineTransform from an array of floating point values
 * representing either the 4 non-translation entries or the 6 specifiable
 * entries of the 3x3 transformation matrix. The values are retrieved from
 * the array as { m00 m10 m01 m11 [m02 m12]}.</text>
      <param>flatmatrix the float array containing the values to be set in the
 * new AffineTransform object. The length of the array is assumed
 * to be at least 4. If the length of the array is less than 6,
 * only the first 4 values are taken. If the length of the array
 * is greater than 6, the first 6 values are taken.</param>
    </javadoc>
    <method type="constructor" name="PAffineTransform" startLine="94" endLine="96" />
    <javadoc>
      <text>* Constructs a new AffineTransform from 6 double precision values
 * representing the 6 specifiable entries of the 3x3 transformation matrix.</text>
      <param>m00 the X coordinate scaling element of the 3x3 matrix</param>
      <param>m10 the Y coordinate shearing element of the 3x3 matrix</param>
      <param>m01 the X coordinate shearing element of the 3x3 matrix</param>
      <param>m11 the Y coordinate scaling element of the 3x3 matrix</param>
      <param>m02 the X coordinate translation element of the 3x3 matrix</param>
      <param>m12 the Y coordinate translation element of the 3x3 matrix</param>
    </javadoc>
    <method type="constructor" name="PAffineTransform" startLine="110" endLine="112" />
    <javadoc>
      <text>* Constructs a new AffineTransform from 6 floating point values
 * representing the 6 specifiable entries of the 3x3 transformation matrix.</text>
      <param>m00 the X coordinate scaling element of the 3x3 matrix</param>
      <param>m10 the Y coordinate shearing element of the 3x3 matrix</param>
      <param>m01 the X coordinate shearing element of the 3x3 matrix</param>
      <param>m11 the Y coordinate scaling element of the 3x3 matrix</param>
      <param>m02 the X coordinate translation element of the 3x3 matrix</param>
      <param>m12 the Y coordinate translation element of the 3x3 matrix</param>
    </javadoc>
    <method type="constructor" name="PAffineTransform" startLine="126" endLine="128" />
    <javadoc>
      <text>* Constructs a new AffineTransform that is a copy of the specified
 * AffineTransform object.</text>
      <param>tx transform to copy</param>
    </javadoc>
    <method type="constructor" name="PAffineTransform" startLine="136" endLine="138" />
    <javadoc>
      <text>* Scales the transform about the given point by the given scale.</text>
      <param>scale to transform the transform by</param>
      <param>x x coordinate around which the scale should take place</param>
      <param>y y coordinate around which the scale should take place</param>
    </javadoc>
    <method type="void" name="scaleAboutPoint" startLine="147" endLine="151" />
    <javadoc>
      <text>* Returns the scale applied to this transform. Note that it does so by
 * computing the change in length of a unit segment after being passed
 * through the transform. This means that a transform that a transform that
 * doesn't scale the in the x but doubles the y will be reported as 2.</text>
      <return>the different in length of a unit segment after being
 * transformed.</return>
    </javadoc>
    <method type="double" name="getScale" startLine="162" endLine="169">
      <comment>x1</comment>
      <comment>y1</comment>
      <comment>x2</comment>
      <comment>y2</comment>
    </method>
    <javadoc>
      <text>* Sets the scale about to the origin of this transform to the scale
 * provided.</text>
      <param>scale The desired resulting scale</param>
    </javadoc>
    <method type="void" name="setScale" startLine="177" endLine="183">
      <scope startLine="178" endLine="180" />
    </method>
    <javadoc>
      <text>* Applies modifies the transform so that it translates by the given offset.</text>
      <param>tx x translation of resulting transform</param>
      <param>ty y translation of resulting transform</param>
    </javadoc>
    <method type="void" name="setOffset" startLine="191" endLine="193" />
    <javadoc>
      <text>* Returns the rotation applied to this affine transform in radians. The
 * value returned will be between 0 and 2pi.</text>
      <return>rotation in radians</return>
    </javadoc>
    <method type="double" name="getRotation" startLine="201" endLine="227">
      <declaration type="double" name="dy" />
      <declaration type="double" name="l" />
      <declaration type="double" name="rotation" />
      <scope startLine="214" endLine="218">
        <scope startLine="215" endLine="217" />
      </scope>
      <scope startLine="219" endLine="221" />
      <scope startLine="222" endLine="224" />
      <comment>x1</comment>
      <comment>y1</comment>
      <comment>x2</comment>
      <comment>y2</comment>
      <comment>correct for quadrant</comment>
    </method>
    <javadoc>
      <text>* Set rotation in radians. This is not cumulative.</text>
      <param>theta desired rotation in radians.</param>
    </javadoc>
    <method type="void" name="setRotation" startLine="234" endLine="236" />
    <javadoc>
      <text>* Applies the transform to the provided dimension.</text>
      <param>dimSrc source dimension</param>
      <param>dimDst will be changed to be the transformed dimension, may be
 * null</param>
      <return>the transformed dimension</return>
    </javadoc>
    <method type="Dimension2D" name="transform" startLine="246" endLine="260">
      <declaration type="Dimension2D" name="result" />
      <scope startLine="248" endLine="250" />
      <scope startLine="251" endLine="253" />
    </method>
    <javadoc>
      <text>* Applies the inverse of this transform to the source point if possible.</text>
      <since>1.3</since>
      <param>ptSrc point to be transformed</param>
      <param>ptDst result of transform will be placed in this point</param>
      <return>the transformed point</return>
    </javadoc>
    <method type="Point2D" name="inverseTransform" startLine="271" endLine="278">
      <scope startLine="272" endLine="274" />
      <scope startLine="275" endLine="277" />
    </method>
    <javadoc>
      <text>* Applies the inverse of this transform to the source dimension if
 * possible.</text>
      <param>dimSrc dimension to be transformed</param>
      <param>dimDst result of transform will be placed in this dimension</param>
      <return>the transformed dimension</return>
    </javadoc>
    <method type="Dimension2D" name="inverseTransform" startLine="289" endLine="314">
      <declaration type="Dimension2D" name="result" />
      <scope startLine="291" endLine="293" />
      <scope startLine="294" endLine="296" />
      <declaration type="double" name="width" />
      <declaration type="double" name="height" />
      <declaration type="double" name="m00" />
      <declaration type="double" name="m11" />
      <declaration type="double" name="m01" />
      <declaration type="double" name="m10" />
      <declaration type="double" name="det" />
      <scope startLine="306" endLine="308" />
      <scope startLine="309" endLine="311" />
    </method>
    <javadoc>
      <text>* Applies this transform to the source rectangle and stores the result in
 * rectDst.</text>
      <param>rectSrc rectangle to be transformed</param>
      <param>rectDst result of transform will be placed in this rectangle</param>
      <return>the transformed rectangle</return>
    </javadoc>
    <method type="Rectangle2D" name="transform" startLine="325" endLine="377">
      <declaration type="Rectangle2D" name="result" />
      <scope startLine="327" endLine="329" />
      <scope startLine="330" endLine="332" />
      <scope startLine="334" endLine="340">
        <scope startLine="336" endLine="338" />
      </scope>
      <declaration type="double" name="scale" />
      <scope startLine="346" endLine="348" />
      <declaration type="double[]" name="pts" />
    </method>
    <javadoc>
      <text>* Applies the inverse of this transform to the source rectangle and stores
 * the result in rectDst.</text>
      <param>rectSrc rectangle to be transformed</param>
      <param>rectDst result of transform will be placed in this rectangle</param>
      <return>the transformed rectangle</return>
    </javadoc>
    <method type="Rectangle2D" name="inverseTransform" startLine="388" endLine="452">
      <declaration type="Rectangle2D" name="result" />
      <scope startLine="390" endLine="392" />
      <scope startLine="393" endLine="395" />
      <scope startLine="397" endLine="403">
        <scope startLine="399" endLine="401" />
      </scope>
      <declaration type="double" name="scale" />
      <scope startLine="409" endLine="411" />
      <scope startLine="421" endLine="423" />
      <scope startLine="432" endLine="434" />
      <declaration type="double[]" name="pts" />
      <scope startLine="441" endLine="443" />
      <scope startLine="444" endLine="446" />
    </method>
    <javadoc>
      <text>* Builds an array of coordinates from an source rectangle.</text>
      <param>aRectangle rectangle from which points coordinates will be
 * extracted</param>
      <return>coordinate array</return>
    </javadoc>
    <method type="double[]" name="rectToArray" startLine="462" endLine="472" />
    <javadoc>
      <text>* Creates a rectangle from an array of coordinates.</text>
      <param>aRectangle rectangle into which coordinates will be stored</param>
      <param>pts coordinate source</param>
    </javadoc>
    <method type="void" name="rectFromArray" startLine="480" endLine="507">
      <declaration type="double" name="minX" />
      <declaration type="double" name="minY" />
      <declaration type="double" name="maxX" />
      <declaration type="double" name="maxY" />
      <declaration type="double" name="x" />
      <declaration type="double" name="y" />
      <scope startLine="489" endLine="505">
        <scope startLine="493" endLine="495" />
        <scope startLine="496" endLine="498" />
        <scope startLine="499" endLine="501" />
        <scope startLine="502" endLine="504" />
      </scope>
    </method>
  </class>
</source>
