<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.util">
  <import name="java.io.ByteArrayOutputStream" />
  <import name="java.io.IOException" />
  <import name="java.io.ObjectOutputStream" />
  <import name="java.io.OutputStream" />
  <import name="java.util.HashMap" />
  <class name="PObjectOutputStream" extends="ObjectOutputStream" startLine="37">
    <javadoc>
      <text>* <b>PObjectOutputStream</b> is an extension of ObjectOutputStream to handle
 * optional elements. This is similar to the concept of Java's
 * "weak references", but applied to object serialization rather than garbage
 * collection. Here, PObjectOutputStream provides a method,
 * <code>writeConditionalObject</code>, which only serializes the specified
 * object to the stream if there is a strong reference (if it has been written
 * somewhere else using writeObject()) to that object elsewhere in the stream.
 * <p>
 * To discover strong references to objects, PObjectOutputStream uses a
 * two-phase writing process. First, a "discovery" phase is used to find out
 * what objects are about to be serialized. This works by effectively
 * serializing the object graph to /dev/null, recording which objects are
 * unconditionally written using the standard writeObject method. Then, in the
 * second "write" phase, ObjectOutputStream actually serializes the data to the
 * output stream. During this phase, calls to writeConditionalObject() will only
 * write the specified object if the object was found to be serialized during
 * the discovery stage. If the object was not recorded during the discovery
 * stage, a an optional null (the default) is unconditionally written in place
 * of the object. To skip writting out the null use
 * <code>writeConditionalObject(object, false)</code>
 * <p>
 * By careful implementation of readObject and writeObject methods, streams
 * serialized using PObjectOutputStream can be deserialized using the standard
 * ObjectInputStream.
 * <p></text>
      <version>1.0</version>
      <author>Jon Meyer</author>
      <author>Jesse Grosjean</author>
    </javadoc>
    <declaration type="boolean" name="writingRoot" />
    <declaration type="HashMap" name="unconditionallyWritten" />
    <javadoc>
      <text>* Transform the given object into an array of bytes.</text>
      <param>object the object to be transformed</param>
      <return>array of bytes representing the given object</return>
      <throws>IOException when serialization system throws one</throws>
    </javadoc>
    <method type="byte[]" name="toByteArray" startLine="80" endLine="85">
      <declaration type="ByteArrayOutputStream" name="out" />
      <declaration type="PObjectOutputStream" name="zout" />
    </method>
    <javadoc>
      <text>* Constructs a PObjectOutputStream that wraps the provided OutputStream.</text>
      <param>out underlying outputstream that will receive the serialized
 * objects</param>
      <throws>IOException when underlying subsystem throws one</throws>
    </javadoc>
    <method type="constructor" name="PObjectOutputStream" startLine="95" endLine="98" />
    <javadoc>
      <text>* Writes the provided object to the underlying stream like an ordination
 * ObjectOutputStream except that it does not record duplicates at all.</text>
      <param>object object to be serialized</param>
      <throws>IOException when underlying subsystem throws one</throws>
    </javadoc>
    <method type="void" name="writeObjectTree" startLine="108" endLine="113">
      <comment>record pass</comment>
      <comment>write pass</comment>
    </method>
    <javadoc>
      <text>* Writes the given object, but only if it was not in the object tree
 * multiple times.</text>
      <param>object object to write to the stream.</param>
      <throws>IOException when underlying subsystem throws one</throws>
    </javadoc>
    <method type="void" name="writeConditionalObject" startLine="122" endLine="134">
      <scope startLine="123" endLine="126" />
      <scope startLine="128" endLine="130" />
      <scope startLine="131" endLine="133" />
    </method>
    <javadoc>
      <text>* Resets the ObjectOutputStream clearing any memory about objects already
 * being written while it's at it.</text>
      <throws>IOException when underlying subsystem throws one</throws>
    </javadoc>
    <method type="void" name="reset" startLine="142" endLine="145" />
    <javadoc>
      <text>* Performs a scan of objects that can be serialized once.</text>
      <param>aRoot Object from which to start the scan</param>
      <throws>IOException when serialization fails</throws>
    </javadoc>
    <method type="void" name="recordUnconditionallyWritten" startLine="153" endLine="169">
      <class name="ZMarkObjectOutputStream" extends="PObjectOutputStream" startLine="154">
        <method type="constructor" name="ZMarkObjectOutputStream" startLine="155" endLine="158" />
        <method type="Object" name="replaceObject" startLine="160" endLine="163" />
        <method type="void" name="writeConditionalObject" startLine="165" endLine="166" />
      </class>
      <method type="void" name="close" startLine="172" endLine="173" />
      <method type="void" name="flush" startLine="175" endLine="176" />
      <method type="void" name="write" startLine="178" endLine="179" />
      <method type="void" name="write" startLine="181" endLine="182" />
      <method type="void" name="write" startLine="184" endLine="185" />
      <declaration type="OutputStream" name="NULL_OUTPUT_STREAM" />
    </method>
  </class>
</source>
