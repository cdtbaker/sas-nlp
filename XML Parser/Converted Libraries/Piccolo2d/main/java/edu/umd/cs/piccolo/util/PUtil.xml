<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolo.util">
  <import name="java.awt.BasicStroke" />
  <import name="java.awt.Stroke" />
  <import name="java.awt.geom.GeneralPath" />
  <import name="java.awt.geom.PathIterator" />
  <import name="java.io.IOException" />
  <import name="java.io.ObjectInputStream" />
  <import name="java.io.ObjectOutputStream" />
  <import name="java.io.OutputStream" />
  <import name="java.io.Serializable" />
  <import name="java.util.Collections" />
  <import name="java.util.Enumeration" />
  <import name="java.util.Iterator" />
  <import name="edu.umd.cs.piccolo.PCamera" />
  <import name="edu.umd.cs.piccolo.PLayer" />
  <import name="edu.umd.cs.piccolo.PRoot" />
  <class name="PUtil" startLine="48">
    <javadoc>
      <text>* <b>PUtil</b> util methods for the Piccolo framework.
 * <P></text>
      <version>1.0</version>
      <author>Jesse Grosjean</author>
    </javadoc>
    <javadoc>
      <text>* PActivities are broken into steps, this is how many milliseconds should
 * pass between steps.</text>
    </javadoc>
    <declaration type="long" name="DEFAULT_ACTIVITY_STEP_RATE" />
    <javadoc>
      <text>* Rate in milliseconds at which the activity timer will get invoked.</text>
    </javadoc>
    <declaration type="int" name="ACTIVITY_SCHEDULER_FRAME_DELAY" />
    <javadoc>
      <text>* An iterator that iterates over an empty collection.</text>
    </javadoc>
    <declaration type="Iterator" name="NULL_ITERATOR" />
    <javadoc>
      <text>* Used when persisting paths to an object stream. Used to mark the end of
 * the path.</text>
    </javadoc>
    <declaration type="int" name="PATH_TERMINATOR" />
    <javadoc>
      <text>* A utility enumeration with no elements.</text>
    </javadoc>
    <method type="boolean" name="hasMoreElements" startLine="76" endLine="78" />
    <method type="Object" name="nextElement" startLine="80" endLine="82" />
    <declaration type="Enumeration" name="NULL_ENUMERATION" />
    <javadoc>
      <deprecated>This has been moved into a private static class of
 * PObjectOutputStream</deprecated>
    </javadoc>
    <method type="void" name="close" startLine="90" endLine="91" />
    <method type="void" name="flush" startLine="93" endLine="94" />
    <method type="void" name="write" startLine="96" endLine="97" />
    <method type="void" name="write" startLine="99" endLine="100" />
    <method type="void" name="write" startLine="102" endLine="103" />
    <declaration type="OutputStream" name="NULL_OUTPUT_STREAM" />
    <javadoc>
      <text>* Creates the simplest possible scene graph. 1 Camera, 1 Layer, 1 Root</text>
      <return>a basic scene with 1 camera, layer and root</return>
    </javadoc>
    <method type="PCamera" name="createBasicScenegraph" startLine="111" endLine="121">
      <declaration type="PRoot" name="root" />
      <declaration type="PLayer" name="layer" />
      <declaration type="PCamera" name="camera" />
    </method>
    <javadoc>
      <text>* Serializes the given stroke object to the object output stream provided.
 * By default strokes are not serializable. This method solves that problem.</text>
      <param>stroke stroke to be serialize</param>
      <param>out stream to which the stroke is to be serialized</param>
      <throws>IOException can occur if exception occurs with underlying output
 * stream</throws>
    </javadoc>
    <method type="void" name="writeStroke" startLine="132" endLine="146">
      <scope startLine="133" endLine="137" />
      <scope startLine="138" endLine="142" />
      <scope startLine="143" endLine="145" />
    </method>
    <method type="void" name="writeBasicStroke" startLine="149" endLine="167">
      <declaration type="float[]" name="dash" />
      <scope startLine="152" endLine="154" />
      <scope startLine="155" endLine="160">
        <scope startLine="157" endLine="159" />
      </scope>
    </method>
    <javadoc>
      <text>* Reconstitutes a stroke from the provided Object Input Stream. According
 * to the scheme found in writeStroke. By default strokes are not
 * serializable.</text>
      <param>in stream from which Stroke is to be read</param>
      <return>a stroke object</return>
      <throws>IOException occurs if an exception occurs reading from in stream</throws>
      <throws>ClassNotFoundException should never happen, but can if somehow
 * the stroke class is not on the classpath</throws>
    </javadoc>
    <method type="Stroke" name="readStroke" startLine="180" endLine="192">
      <declaration type="boolean" name="wroteStroke" />
      <scope startLine="182" endLine="184" />
      <declaration type="boolean" name="serializedStroke" />
      <scope startLine="187" endLine="189" />
    </method>
    <method type="Stroke" name="readBasicStroke" startLine="194" endLine="212">
      <declaration type="float[]" name="dash" />
      <declaration type="int" name="dashLength" />
      <scope startLine="198" endLine="203">
        <scope startLine="200" endLine="202" />
      </scope>
      <declaration type="float" name="lineWidth" />
      <declaration type="int" name="endCap" />
      <declaration type="int" name="lineJoin" />
      <declaration type="float" name="miterLimit" />
      <declaration type="float" name="dashPhase" />
    </method>
    <javadoc>
      <text>* Reads a path from the provided inputStream in accordance with the
 * serialization policy defined in writePath.</text>
      <param>in stream from which to read the path.</param>
      <return>reconstituted path</return>
      <throws>IOException if an unknown path type is read from the stream</throws>
      <throws>ClassNotFoundException should never happen, but can if somehow
 * the classpath is seriously messed up</throws>
    </javadoc>
    <method type="GeneralPath" name="readPath" startLine="224" endLine="259">
      <declaration type="GeneralPath" name="path" />
      <scope startLine="227" endLine="258">
        <declaration type="int" name="segType" />
      </scope>
    </method>
    <javadoc>
      <text>* Serializes the given path to the provided Object Output Stream.</text>
      <param>path path to be serialized</param>
      <param>out stream to which the path should be serialized</param>
      <throws>IOException if unknown path segment type is encountered, or an
 * exception occurs writing to the output stream</throws>
    </javadoc>
    <method type="void" name="writePath" startLine="269" endLine="317">
      <declaration type="PathIterator" name="i" />
      <declaration type="float[]" name="data" />
      <scope startLine="273" endLine="314" />
    </method>
  </class>
</source>
