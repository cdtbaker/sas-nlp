<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.pswing">
  <import name="edu.umd.cs.piccolo.PNode" />
  <import name="edu.umd.cs.piccolo.event.PInputEvent" />
  <import name="edu.umd.cs.piccolo.util.PPickPath" />
  <import name="java.awt.Component" />
  <import name="java.awt.event.MouseEvent" />
  <import name="java.awt.event.MouseWheelEvent" />
  <import name="java.awt.event.MouseWheelListener" />
  <import name="java.awt.geom.Point2D" />
  <class name="PSwingMouseWheelEvent" extends="MouseWheelEvent" startLine="41">
    <implements name="PSwingEvent" />
    <javadoc>
      <text>* <b>PMouseMotionEvent</b> is an event which indicates that a mouse motion
 * action occurred in a node.
 * <p/>
 * This low-level event is generated by a node object for:
 * <ul>
 * <li>Mouse Motion Events
 * <ul>
 * <li>the mouse is moved
 * <li>the mouse is dragged
 * </ul>
 * </ul>
 * <p/>
 * A PMouseEvent object is passed to every <code>PMouseMotionListener</code> or
 * <code>PMouseMotionAdapter</code> object which registered to receive mouse
 * motion events using the component's <code>addMouseMotionListener</code>
 * method. (<code>PMouseMotionAdapter</code> objects implement the
 * <code>PMouseMotionListener</code> interface.) Each such listener object gets
 * a <code>PMouseEvent</code> containing the mouse motion event.
 * <p/>
 * <p/>
 * <b>Warning:</b> Serialized objects of this class will not be compatible with
 * future Piccolo releases. The current serialization support is appropriate for
 * short term storage or RMI between applications running the same version of
 * Piccolo. A future release of Piccolo will provide support for long term
 * persistence.</text>
      <author>Benjamin B. Bederson</author>
      <author>Sam R. Reid</author>
      <author>Lance E. Good</author>
    </javadoc>
    <javadoc />
    <declaration type="long" name="serialVersionUID" />
    <declaration type="int" name="id" />
    <declaration type="PInputEvent" name="event" />
    <javadoc>
      <text>* Constructs a new PMouseWheel event from a Java MouseWheelEvent.</text>
      <param>id The event type (MOUSE_WHEEL)</param>
      <param>swingEvent The original swing mouse wheel event.</param>
      <param>piccoloEvent Piccolo2D event for use when querying about the
 * event's piccolo2d context</param>
    </javadoc>
    <method type="constructor" name="PSwingMouseWheelEvent" startLine="88" endLine="94" />
    <javadoc>
      <text>* Returns the x,y position of the event in the local coordinate system of
 * the node the event occurred on.</text>
      <return>a Point2D object containing the x and y coordinates local to the
 * node.</return>
    </javadoc>
    <method type="Point2D" name="getLocalPoint" startLine="103" endLine="105" />
    <javadoc>
      <text>* Returns the horizontal x position of the event in the local coordinate
 * system of the node the event occurred on.</text>
      <return>x a double indicating horizontal position local to the node.</return>
    </javadoc>
    <method type="double" name="getLocalX" startLine="113" endLine="115" />
    <javadoc>
      <text>* Returns the vertical y position of the event in the local coordinate
 * system of the node the event occurred on.</text>
      <return>y a double indicating vertical position local to the node.</return>
    </javadoc>
    <method type="double" name="getLocalY" startLine="123" endLine="125" />
    <javadoc>
      <text>* Determine the event type.</text>
      <return>the id</return>
    </javadoc>
    <method type="int" name="getID" startLine="132" endLine="134" />
    <javadoc>
      <text>* Determine the node the event originated at. If an event percolates up the
 * tree and is handled by an event listener higher up in the tree than the
 * original node that generated the event, this returns the original node.
 * For mouse drag and release events, this is the node that the original
 * matching press event went to - in other words, the event is 'grabbed' by
 * the originating node.</text>
      <return>the node</return>
    </javadoc>
    <method type="PNode" name="getNode" startLine="146" endLine="148" />
    <javadoc>
      <text>* Determine the path the event took from the PCanvas down to the visual
 * component.</text>
      <return>the path</return>
    </javadoc>
    <method type="PPickPath" name="getPath" startLine="156" endLine="158" />
    <javadoc>
      <text>* Determine the node the event originated at. If an event percolates up the
 * tree and is handled by an event listener higher up in the tree than the
 * original node that generated the event, this returns the original node.
 * For mouse drag and release events, this is the node that the original
 * matching press event went to - in other words, the event is 'grabbed' by
 * the originating node.</text>
      <return>the node</return>
    </javadoc>
    <method type="PNode" name="getGrabNode" startLine="170" endLine="172" />
    <javadoc>
      <text>* Return the path from the PCanvas down to the currently grabbed object.</text>
      <return>the path</return>
    </javadoc>
    <method type="PPickPath" name="getGrabPath" startLine="179" endLine="181" />
    <javadoc>
      <text>* Get the current node that is under the cursor. This may return a
 * different result then getGrabNode() when in a MOUSE_RELEASED or
 * MOUSE_DRAGGED event.</text>
      <return>the current node.</return>
    </javadoc>
    <method type="PNode" name="getCurrentNode" startLine="190" endLine="192" />
    <javadoc>
      <text>* Get the path from the PCanvas down to the visual component currently
 * under the mouse.This may give a different result then getGrabPath()
 * durring a MOUSE_DRAGGED or MOUSE_RELEASED operation.</text>
      <return>the current path.</return>
    </javadoc>
    <method type="PPickPath" name="getCurrentPath" startLine="201" endLine="203" />
    <javadoc>
      <text>* Calls appropriate method on the listener based on this events ID.</text>
      <param>listener the target for dispatch.</param>
    </javadoc>
    <method type="void" name="dispatchTo" startLine="210" endLine="219">
      <declaration type="MouseWheelListener" name="mouseWheelListener" />
    </method>
    <javadoc>
      <text>* Set the souce of this event. As the event is fired up the tree the source
 * of the event will keep changing to reflect the scenegraph object that is
 * firing the event.</text>
      <param>newSource the current source of the event to report</param>
    </javadoc>
    <method type="void" name="setSource" startLine="228" endLine="230" />
    <javadoc>
      <text>* Returns this event as a mouse event. This reduces the need to cast
 * instances of this interface when they are known to all extend MouseEvent.</text>
      <return>this object casted to a MouseEvent</return>
    </javadoc>
    <method type="MouseEvent" name="asMouseEvent" startLine="238" endLine="240" />
  </class>
</source>
