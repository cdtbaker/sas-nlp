<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.pswing">
  <import name="java.awt.Canvas" />
  <import name="java.awt.Component" />
  <import name="javax.swing.JComponent" />
  <import name="javax.swing.JPanel" />
  <import name="javax.swing.RepaintManager" />
  <import name="junit.framework.TestCase" />
  <class name="PSwingRepaintManagerTest" extends="TestCase" startLine="40">
    <javadoc>
      <text>* Unit test for PSwingRepaintManager.</text>
    </javadoc>
    <method type="void" name="testConstructor" startLine="45" endLine="48">
      <declaration type="PSwingRepaintManager" name="repaintManager" />
    </method>
    <method type="void" name="testCurrentManager" startLine="50" endLine="84">
      <declaration type="RepaintManager" name="currentManager" />
      <declaration type="Component" name="awtComponent" />
      <declaration type="JComponent" name="swingComponent" />
      <declaration type="PSwingCanvas" name="pswingCanvas" />
      <comment>TODO: this assertion is true when running this test case in isolation</comment>
      <comment>but since PSwingCanvas may have been instantiated elsewhere in the</comment>
      <comment>test suite</comment>
      <comment>may not be true when running this test case as part of a test suite</comment>
      <comment>assertFalse(currentManager instanceof PSwingRepaintManager);</comment>
      <comment>assertFalse(currentManager instanceof PSwingRepaintManager);</comment>
      <comment>assertFalse(currentManager instanceof PSwingRepaintManager);</comment>
      <comment>once a PSwingCanvas has been instantiated,</comment>
      <comment>PSwingRepaintManager replaces RepaintManager everwhere</comment>
    </method>
    <method type="void" name="testLockRepaint" startLine="86" endLine="96">
      <declaration type="PSwingCanvas" name="canvas" />
      <declaration type="RepaintManager" name="currentManager" />
      <declaration type="PSwingRepaintManager" name="repaintManager" />
      <comment>TODO: should lockRepaint allow null?</comment>
    </method>
    <method type="void" name="testUnlockRepaint" startLine="98" endLine="119">
      <declaration type="PSwingCanvas" name="canvas" />
      <declaration type="RepaintManager" name="currentManager" />
      <declaration type="PSwingRepaintManager" name="repaintManager" />
      <declaration type="JComponent" name="notLocked" />
      <scope startLine="113" endLine="115" />
      <scope startLine="116" endLine="118">
        <comment>expected</comment>
      </scope>
      <comment>TODO: catch this array index out of bounds exception?</comment>
    </method>
    <method type="void" name="testIsPainting" startLine="121" endLine="135">
      <declaration type="PSwingCanvas" name="canvas" />
      <declaration type="RepaintManager" name="currentManager" />
      <declaration type="PSwingRepaintManager" name="repaintManager" />
      <declaration type="JComponent" name="notLocked" />
    </method>
    <method type="void" name="testAddDirtyRegion" startLine="137" endLine="151">
      <declaration type="PSwingCanvas" name="canvas" />
      <declaration type="RepaintManager" name="currentManager" />
      <declaration type="PSwingRepaintManager" name="repaintManager" />
      <declaration type="JComponent" name="child" />
      <comment>TODO: will need some additional work here for full test coverage</comment>
    </method>
    <method type="void" name="testAddInvalidComponent" startLine="153" endLine="177">
      <declaration type="PSwingCanvas" name="canvas" />
      <declaration type="RepaintManager" name="currentManager" />
      <declaration type="PSwingRepaintManager" name="repaintManager" />
      <scope startLine="161" endLine="163" />
      <scope startLine="164" endLine="166">
        <comment>expected</comment>
      </scope>
      <declaration type="JComponent" name="component" />
      <declaration type="JComponent" name="child" />
      <comment>TODO: should check for null and throw IAE, or keep NPE?</comment>
      <comment>TODO: will need some additional work here for full test coverage</comment>
    </method>
  </class>
</source>
