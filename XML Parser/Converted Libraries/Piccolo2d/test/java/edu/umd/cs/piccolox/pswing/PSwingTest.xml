<?xml version="1.0" encoding="UTF-8"?>
<source package="edu.umd.cs.piccolox.pswing">
  <import name="edu.umd.cs.piccolo.util.PPaintContext" />
  <import name="junit.framework.TestCase" />
  <import name="javax.swing.JButton" />
  <import name="javax.swing.JComponent" />
  <import name="javax.swing.JLabel" />
  <import name="javax.swing.JPanel" />
  <import name="javax.swing.RepaintManager" />
  <import name="java.awt.Color" />
  <import name="java.awt.Dimension" />
  <import name="java.awt.Graphics2D" />
  <import name="java.awt.geom.AffineTransform" />
  <import name="java.awt.image.BufferedImage" />
  <import name="java.io.IOException" />
  <class name="PSwingTest" extends="TestCase" startLine="46">
    <method type="void" name="setUp" startLine="47" endLine="49" />
    <method type="void" name="testConstructorFailsOnNullComponent" startLine="51" endLine="57">
      <scope startLine="52" endLine="54" />
      <scope startLine="54" endLine="56">
        <comment>expected</comment>
      </scope>
    </method>
    <method type="void" name="testPSwingRegistersItselfWithComponent" startLine="59" endLine="64">
      <declaration type="JPanel" name="panel" />
      <declaration type="PSwing" name="pSwing" />
    </method>
    <method type="void" name="testGetComponentReturnsValidComponent" startLine="66" endLine="70">
      <declaration type="JPanel" name="panel" />
      <declaration type="PSwing" name="pSwing" />
    </method>
    <method type="void" name="testPSwingResizesItselfWhenComponentIsResized" startLine="72" endLine="85">
      <declaration type="boolean[]" name="reshaped" />
      <declaration type="JPanel" name="panel" />
      <method type="void" name="updateBounds" startLine="77" endLine="81" />
    </method>
    <method type="void" name="testPSwingDelegatesPaintingToItsComponent" startLine="87" endLine="99">
      <declaration type="JPanel" name="panel" />
      <declaration type="MockPaintingPSwing" name="pSwing" />
      <declaration type="BufferedImage" name="image" />
      <declaration type="Graphics2D" name="graphics" />
      <declaration type="PPaintContext" name="paintContext" />
    </method>
    <method type="void" name="testPSwingWithBufferedPaintingDelegatesPaintingToItsComponent" startLine="101" endLine="114">
      <declaration type="JPanel" name="panel" />
      <declaration type="MockPaintingPSwing" name="pSwing" />
      <declaration type="BufferedImage" name="image" />
      <declaration type="Graphics2D" name="graphics" />
      <declaration type="PPaintContext" name="paintContext" />
    </method>
    <method type="void" name="testHidingPNodeHidesComponent" startLine="116" endLine="121">
      <declaration type="JPanel" name="panel" />
      <declaration type="PSwing" name="pSwing" />
    </method>
    <method type="void" name="testAddingSwingComponentToWrappedHierarchyMakesItNotDoubleBuffer" startLine="123" endLine="130">
      <declaration type="JPanel" name="panel" />
      <declaration type="PSwing" name="pSwing" />
      <declaration type="JComponent" name="child" />
    </method>
    <method type="void" name="assertDelayedSuccess" startLine="132" endLine="146">
      <declaration type="int" name="remainingTries" />
      <scope startLine="134" endLine="144">
        <scope startLine="135" endLine="137" />
        <scope startLine="139" endLine="141" />
        <scope startLine="141" endLine="143" />
        <comment>do nothing</comment>
      </scope>
    </method>
    <method type="void" name="assertDelayedSuccess" startLine="148" endLine="150" />
    <interface name="Predicate" startLine="152">
      <method name="isTrue" type="boolean" startLine="153" endLine="153" />
      <method type="void" name="testPaintTooSmallPaintsGreek" startLine="156" endLine="171">
        <declaration type="JPanel" name="panel" />
        <declaration type="MockPaintingPSwing" name="pSwing" />
        <declaration type="BufferedImage" name="image" />
        <declaration type="Graphics2D" name="graphics" />
        <declaration type="PPaintContext" name="paintContext" />
      </method>
      <method type="void" name="testPaintBigPaintsComponent" startLine="173" endLine="187">
        <declaration type="JPanel" name="panel" />
        <declaration type="MockPaintingPSwing" name="pSwing" />
        <declaration type="BufferedImage" name="image" />
        <declaration type="Graphics2D" name="graphics" />
        <declaration type="PPaintContext" name="paintContext" />
      </method>
      <method type="void" name="testGreekThresholdIsHonoured" startLine="189" endLine="202">
        <declaration type="JPanel" name="panel" />
        <declaration type="MockPaintingPSwing" name="pSwing" />
        <declaration type="BufferedImage" name="image" />
        <declaration type="Graphics2D" name="graphics" />
        <declaration type="PPaintContext" name="paintContext" />
      </method>
      <method type="void" name="testGreekThresholdIsPersisted" startLine="204" endLine="211">
        <declaration type="JPanel" name="panel" />
        <declaration type="MockPaintingPSwing" name="pSwing" />
      </method>
      <method type="void" name="testAssertSettingJLabelWidthTooSmallGrowsIt" startLine="213" endLine="236">
        <declaration type="JLabel" name="label" />
        <declaration type="PSwingCanvas" name="canvas" />
        <declaration type="MockPaintingPSwing" name="swing" />
        <method type="boolean" name="isTrue" startLine="220" endLine="222" />
        <declaration type="BufferedImage" name="image" />
        <declaration type="Graphics2D" name="graphics" />
        <declaration type="PPaintContext" name="paintContext" />
        <comment>While paint, it uses the graphics element to determine the font's</comment>
        <comment>display size and hence determine minimum size of JLabel.</comment>
      </method>
      <method type="void" name="testAssertSettingJButtonWidthTooSmallGrowsIt" startLine="238" endLine="255">
        <declaration type="JButton" name="label" />
        <declaration type="PSwingCanvas" name="canvas" />
        <declaration type="MockPaintingPSwing" name="swing" />
        <declaration type="BufferedImage" name="image" />
        <declaration type="Graphics2D" name="graphics" />
        <declaration type="PPaintContext" name="paintContext" />
        <comment>While paint, it uses the graphics element to determine the font's</comment>
        <comment>display size and hence determine minimum size of JLabel.</comment>
      </method>
      <method type="void" name="testPSwingAttachesItselfToItsCanvasWhenAddedToItsSceneGraph" startLine="257" endLine="263">
        <declaration type="PSwingCanvas" name="canvas1" />
        <declaration type="PSwing" name="label" />
      </method>
      <method type="void" name="testPSwingRemovesItselfFromItsCanvasWhenRemovedFromScene" startLine="265" endLine="272">
        <declaration type="PSwingCanvas" name="canvas1" />
        <declaration type="PSwing" name="label" />
      </method>
      <method type="void" name="testPSwingReattachesItselfWhenMovedFromCanvasToCanvas" startLine="274" endLine="282">
        <declaration type="PSwingCanvas" name="canvas1" />
        <declaration type="PSwingCanvas" name="canvas2" />
        <declaration type="PSwing" name="label" />
      </method>
      <method type="void" name="testPSwingRegistersWithCanvasThroughoutItsLifeCycle" startLine="284" endLine="296">
        <declaration type="PSwingCanvas" name="canvas" />
        <declaration type="PSwing" name="label" />
      </method>
      <class name="MockPaintingPSwing" extends="PSwing" startLine="298">
        <declaration type="boolean" name="paintedGreek" />
        <declaration type="boolean" name="paintedComponent" />
        <method type="constructor" name="MockPaintingPSwing" startLine="302" endLine="304" />
        <method type="void" name="paint" startLine="306" endLine="309" />
        <method type="void" name="paintAsGreek" startLine="311" endLine="314" />
        <method type="boolean" name="isPaintedGreek" startLine="316" endLine="318" />
        <method type="boolean" name="isPaintedComponent" startLine="320" endLine="322" />
      </class>
    </interface>
  </class>
</source>
