<?xml version="1.0" encoding="UTF-8"?>
<source package="Jama">
  <import name="Jama.util.*" />
  <class name="SingularValueDecomposition" startLine="4">
    <implements name="java.io.Serializable" />
    <javadoc>
      <text>* Singular Value Decomposition.
 * <P>
 * For an m-by-n matrix A with m >= n, the singular value decomposition is
 * an m-by-n orthogonal matrix U, an n-by-n diagonal matrix S, and
 * an n-by-n orthogonal matrix V so that A = U*S*V'.
 * <P>
 * The singular values, sigma[k] = S[k][k], are ordered so that
 * sigma[0] >= sigma[1] >= ... >= sigma[n-1].
 * <P>
 * The singular value decompostion always exists, so the constructor will
 * never fail.  The matrix condition number and the effective numerical
 * rank can be computed from this decomposition.</text>
    </javadoc>
    <javadoc>
      <text>* Arrays for internal storage of U and V.</text>
      <serial>internal storage of U.</serial>
      <serial>internal storage of V.</serial>
    </javadoc>
    <declaration type="double[][]" name="U" />
    <javadoc>
      <text>* Array for internal storage of singular values.</text>
      <serial>internal storage of singular values.</serial>
    </javadoc>
    <declaration type="double[]" name="s" />
    <javadoc>
      <text>* Row and column dimensions.</text>
      <serial>row dimension.</serial>
      <serial>column dimension.</serial>
    </javadoc>
    <declaration type="int" name="m" />
    <javadoc>
      <text>* Construct the singular value decomposition
 * Structure to access U, S and V.</text>
      <param>Arg    Rectangular matrix</param>
    </javadoc>
    <method type="constructor" name="SingularValueDecomposition" startLine="50" endLine="470">
      <declaration type="double[][]" name="A" />
      <declaration type="int" name="nu" />
      <declaration type="double[]" name="e" />
      <declaration type="double[]" name="work" />
      <declaration type="boolean" name="wantu" />
      <declaration type="boolean" name="wantv" />
      <declaration type="int" name="nct" />
      <declaration type="int" name="nrt" />
      <scope startLine="77" endLine="175">
        <scope startLine="78" endLine="97">
          <scope startLine="84" endLine="86" />
          <scope startLine="87" endLine="95">
            <scope startLine="88" endLine="90" />
            <scope startLine="91" endLine="93" />
          </scope>
        </scope>
        <scope startLine="98" endLine="117">
          <scope startLine="99" endLine="111">
            <declaration type="double" name="t" />
            <scope startLine="104" endLine="106" />
            <scope startLine="108" endLine="110" />
          </scope>
        </scope>
        <scope startLine="118" endLine="126">
          <scope startLine="123" endLine="125" />
        </scope>
        <scope startLine="127" endLine="174">
          <scope startLine="133" endLine="135" />
          <scope startLine="136" endLine="144">
            <scope startLine="137" endLine="139" />
            <scope startLine="140" endLine="142" />
          </scope>
          <scope startLine="146" endLine="164">
            <scope startLine="150" endLine="152" />
            <scope startLine="153" endLine="157">
              <scope startLine="154" endLine="156" />
            </scope>
            <scope startLine="158" endLine="163">
              <declaration type="double" name="t" />
              <scope startLine="160" endLine="162" />
            </scope>
          </scope>
          <scope startLine="165" endLine="173">
            <scope startLine="170" endLine="172" />
          </scope>
        </scope>
        <comment>Compute the transformation for the k-th column and</comment>
        <comment>place the k-th diagonal in s[k].</comment>
        <comment>Compute 2-norm of k-th column without under/overflow.</comment>
        <comment>Apply the transformation.</comment>
        <comment>Place the k-th row of A into e for the</comment>
        <comment>subsequent calculation of the row transformation.</comment>
        <comment>Place the transformation in U for subsequent back</comment>
        <comment>multiplication.</comment>
        <comment>Compute the k-th row transformation and place the</comment>
        <comment>k-th super-diagonal in e[k].</comment>
        <comment>Compute 2-norm without under/overflow.</comment>
        <comment>Apply the transformation.</comment>
        <comment>Place the transformation in V for subsequent</comment>
        <comment>back multiplication.</comment>
      </scope>
      <declaration type="int" name="p" />
      <scope startLine="180" endLine="182" />
      <scope startLine="183" endLine="185" />
      <scope startLine="186" endLine="188" />
      <scope startLine="193" endLine="226">
        <scope startLine="194" endLine="199">
          <scope startLine="195" endLine="197" />
        </scope>
        <scope startLine="200" endLine="225">
          <scope startLine="201" endLine="219">
            <scope startLine="202" endLine="211">
              <declaration type="double" name="t" />
              <scope startLine="204" endLine="206" />
              <scope startLine="208" endLine="210" />
            </scope>
            <scope startLine="212" endLine="214" />
            <scope startLine="216" endLine="218" />
          </scope>
          <scope startLine="219" endLine="224">
            <scope startLine="220" endLine="222" />
          </scope>
        </scope>
      </scope>
      <scope startLine="230" endLine="249">
        <scope startLine="231" endLine="248">
          <scope startLine="232" endLine="243">
            <scope startLine="233" endLine="242">
              <declaration type="double" name="t" />
              <scope startLine="235" endLine="237" />
              <scope startLine="239" endLine="241" />
            </scope>
          </scope>
          <scope startLine="244" endLine="246" />
        </scope>
      </scope>
      <declaration type="int" name="pp" />
      <declaration type="int" name="iter" />
      <declaration type="double" name="eps" />
      <declaration type="double" name="tiny" />
      <scope startLine="257" endLine="469">
        <declaration type="int" name="k" />
        <scope startLine="272" endLine="281">
          <scope startLine="273" endLine="275" />
          <scope startLine="277" endLine="280" />
        </scope>
        <scope startLine="282" endLine="284" />
        <scope startLine="284" endLine="305">
          <declaration type="int" name="ks" />
          <scope startLine="286" endLine="296">
            <scope startLine="287" endLine="289" />
            <declaration type="double" name="t" />
            <scope startLine="292" endLine="295" />
          </scope>
          <scope startLine="297" endLine="299" />
          <scope startLine="299" endLine="301" />
          <scope startLine="301" endLine="304" />
        </scope>
        <scope startLine="314" endLine="334">
          <declaration type="double" name="f" />
          <scope startLine="317" endLine="333">
            <declaration type="double" name="t" />
            <declaration type="double" name="cs" />
            <declaration type="double" name="sn" />
            <scope startLine="322" endLine="325" />
            <scope startLine="326" endLine="332">
              <scope startLine="327" endLine="331" />
            </scope>
          </scope>
        </scope>
        <scope startLine="339" endLine="357">
          <declaration type="double" name="f" />
          <scope startLine="342" endLine="356">
            <declaration type="double" name="t" />
            <declaration type="double" name="cs" />
            <declaration type="double" name="sn" />
            <scope startLine="349" endLine="355">
              <scope startLine="350" endLine="354" />
            </scope>
          </scope>
        </scope>
        <scope startLine="362" endLine="425">
          <declaration type="double" name="scale" />
          <declaration type="double" name="sp" />
          <declaration type="double" name="spm1" />
          <declaration type="double" name="epm1" />
          <declaration type="double" name="sk" />
          <declaration type="double" name="ek" />
          <declaration type="double" name="b" />
          <declaration type="double" name="c" />
          <declaration type="double" name="shift" />
          <scope startLine="377" endLine="383">
            <scope startLine="379" endLine="381" />
          </scope>
          <declaration type="double" name="f" />
          <declaration type="double" name="g" />
          <scope startLine="389" endLine="422">
            <declaration type="double" name="t" />
            <declaration type="double" name="cs" />
            <declaration type="double" name="sn" />
            <scope startLine="393" endLine="395" />
            <scope startLine="400" endLine="406">
              <scope startLine="401" endLine="405" />
            </scope>
            <scope startLine="415" endLine="421">
              <scope startLine="416" endLine="420" />
            </scope>
          </scope>
        </scope>
        <scope startLine="430" endLine="466">
          <scope startLine="434" endLine="441">
            <scope startLine="436" endLine="440">
              <scope startLine="437" endLine="439" />
            </scope>
          </scope>
          <scope startLine="445" endLine="463">
            <scope startLine="446" endLine="448" />
            <declaration type="double" name="t" />
            <scope startLine="452" endLine="456">
              <scope startLine="453" endLine="455" />
            </scope>
            <scope startLine="457" endLine="461">
              <scope startLine="458" endLine="460" />
            </scope>
          </scope>
        </scope>
        <comment>Here is where a test for too many iterations would go.</comment>
        <comment>This section of the program inspects for</comment>
        <comment>negligible elements in the s and e arrays.  On</comment>
        <comment>completion the variables kase and k are set as follows.</comment>
        <comment>kase = 1     if s(p) and e[k-1] are negligible and k<p</comment>
        <comment>kase = 2     if s(k) is negligible and k<p</comment>
        <comment>kase = 3     if e[k-1] is negligible, k<p, and</comment>
        <comment>s(k), ..., s(p) are not negligible (qr step).</comment>
        <comment>kase = 4     if e(p-1) is negligible (convergence).</comment>
        <comment>Perform the task indicated by kase.</comment>
        <comment>Deflate negligible s(p).</comment>
        <comment>Split at negligible s(k).</comment>
        <comment>Perform one qr step.</comment>
        <comment>Calculate the shift.</comment>
        <comment>Chase zeros.</comment>
        <comment>Convergence.</comment>
        <comment>Make the singular values positive.</comment>
        <comment>Order the singular values.</comment>
      </scope>
      <comment>Derived from LINPACK code.</comment>
      <comment>Initialize.</comment>
      <comment>Apparently the failing cases are only a proper subset of (m<n),
so let's not throw error.  Correct fix to come later?
if (m<n) {
throw new IllegalArgumentException("Jama SVD only works for m >= n"); }</comment>
      <comment>Reduce A to bidiagonal form, storing the diagonal elements</comment>
      <comment>in s and the super-diagonal elements in e.</comment>
      <comment>Set up the final bidiagonal matrix or order p.</comment>
      <comment>If required, generate U.</comment>
      <comment>If required, generate V.</comment>
      <comment>Main iteration loop for the singular values.</comment>
    </method>
    <javadoc>
      <text>* Return the left singular vectors</text>
      <return>U</return>
    </javadoc>
    <method type="Matrix" name="getU" startLine="480" endLine="482" />
    <javadoc>
      <text>* Return the right singular vectors</text>
      <return>V</return>
    </javadoc>
    <method type="Matrix" name="getV" startLine="488" endLine="490" />
    <javadoc>
      <text>* Return the one-dimensional array of singular values</text>
      <return>diagonal of S.</return>
    </javadoc>
    <method type="double[]" name="getSingularValues" startLine="496" endLine="498" />
    <javadoc>
      <text>* Return the diagonal matrix of singular values</text>
      <return>S</return>
    </javadoc>
    <method type="Matrix" name="getS" startLine="504" endLine="514">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="S" />
      <scope startLine="507" endLine="512">
        <scope startLine="508" endLine="510" />
      </scope>
    </method>
    <javadoc>
      <text>* Two norm</text>
      <return>max(S)</return>
    </javadoc>
    <method type="double" name="norm2" startLine="520" endLine="522" />
    <javadoc>
      <text>* Two norm condition number</text>
      <return>max(S)/min(S)</return>
    </javadoc>
    <method type="double" name="cond" startLine="528" endLine="530" />
    <javadoc>
      <text>* Effective numerical matrix rank</text>
      <return>Number of nonnegligible singular values.</return>
    </javadoc>
    <method type="int" name="rank" startLine="536" endLine="546">
      <declaration type="double" name="eps" />
      <declaration type="double" name="tol" />
      <declaration type="int" name="r" />
      <scope startLine="540" endLine="544">
        <scope startLine="541" endLine="543" />
      </scope>
    </method>
    <declaration type="long" name="serialVersionUID" />
    <comment>------------------------
Class variables
 ------------------------</comment>
    <comment>------------------------
Constructor
 ------------------------</comment>
    <comment>------------------------
Public Methods
 ------------------------</comment>
  </class>
</source>
