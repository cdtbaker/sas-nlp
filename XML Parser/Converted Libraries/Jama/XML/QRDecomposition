<?xml version="1.0" encoding="UTF-8"?>
    <source package="Jama">
        <import package="Jama.util"/>
        <class name="QRDecomposition" line="4">
            <comment line="5">
                ------------------------
                Class variables
                 ------------------------ 
                
                 Array for internal storage of decomposition.                
            </comment>
            <comment line="5">
                ------------------------
                Constructor
                 ------------------------ 
                
                 QR Decomposition, computed by Householder reflections.                
            </comment>
            <comment line="5">
                ------------------------
                Public Methods
                 ------------------------ 
                
                 Is the matrix full rank?                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="4">
                QR Decomposition.
                 * &lt;P&gt;
                 * For an m-by-n matrix A with m &gt;= n, the QR decomposition is an m-by-n
                 * orthogonal matrix Q and an n-by-n upper triangular matrix R so that
                 * A = Q*R.
                 * &lt;P&gt;
                 * The QR decompostion always exists, even if the matrix does not have
                 * full rank, so the constructor will never fail.  The primary use of the
                 * QR decomposition is in the least squares solution of nonsquare systems
                 * of simultaneous linear equations.  This will fail if isFullRank()
                 * returns false.                
            </javadoc>
            <declaration name="QR" type="double[][]" line="23"/>
            <javadoc line="23">
                Array for internal storage of decomposition.                
                <@serial>
                    l internal array storage.                    
                </@serial>
            </javadoc>
            <declaration name="m" type="int" line="28"/>
            <javadoc line="28">
                Row and column dimensions.                
                <@serial>
                    l column dimension.                    
                </@serial>
                <@serial>
                    l row dimension.                    
                </@serial>
            </javadoc>
            <declaration name="Rdiag" type="double[]" line="34"/>
            <javadoc line="34">
                Array for internal storage of diagonal of R.                
                <@serial>
                    l diagonal of R.                    
                </@serial>
            </javadoc>
            <javadoc line="43">
                QR Decomposition, computed by Householder reflections.
                 * Structure to access R and the Householder vectors and compute Q.                
                <@param>
                    m A    Rectangular matrix                    
                </@param>
            </javadoc>
            <method name="QRDecomposition" type="constructor" line="48">
                <comment line="49">
                    Initialize.                    
                </comment>
                <comment line="49">
                    Main loop.                    
                </comment>
                <scope line="56">
                    <declaration name="nrm" type="double" line="58"/>
                    <scope line="59"/>
                    <scope line="63">
                        <scope line="65"/>
                        <scope line="68"/>
                        <scope line="74">
                            <declaration name="s" type="double" line="75"/>
                            <scope line="76"/>
                            <scope line="80"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="93">
                Is the matrix full rank?                
                <@return>
                    n     true if R, and hence A, has full rank.                    
                </@return>
            </javadoc>
            <method name="isFullRank" type="boolean" line="97">
                <scope line="98"/>
            </method>
            <javadoc line="105">
                Return the Householder vectors                
                <@return>
                    n     Lower trapezoidal matrix whose columns define the reflections                    
                </@return>
            </javadoc>
            <method name="getH" type="Matrix" line="109">
                <declaration name="X" type="Matrix" line="110"/>
                <declaration name="H" type="double[][]" line="111"/>
                <scope line="112">
                    <scope line="113">
                        <scope line="114"/>
                        <scope line="116"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="124">
                Return the upper triangular factor                
                <@return>
                    n     R                    
                </@return>
            </javadoc>
            <method name="getR" type="Matrix" line="128">
                <declaration name="X" type="Matrix" line="129"/>
                <declaration name="R" type="double[][]" line="130"/>
                <scope line="131">
                    <scope line="132">
                        <scope line="133"/>
                        <scope line="135"/>
                        <scope line="137"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="145">
                Generate and return the (economy-sized) orthogonal factor                
                <@return>
                    n     Q                    
                </@return>
            </javadoc>
            <method name="getQ" type="Matrix" line="149">
                <declaration name="X" type="Matrix" line="150"/>
                <declaration name="Q" type="double[][]" line="151"/>
                <scope line="152">
                    <scope line="153"/>
                    <scope line="157">
                        <scope line="158">
                            <declaration name="s" type="double" line="159"/>
                            <scope line="160"/>
                            <scope line="164"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="173">
                Least squares solution of A*X = B                
                <@param>
                    m B    A Matrix with as many rows as A and any number of columns.                    
                </@param>
                <@return>
                    n     X that minimizes the two norm of Q*R*X-B.                    
                </@return>
                <@exception>
                    n IllegalArgumentException  Matrix row dimensions must agree.                    
                </@exception>
                <@exception>
                    n RuntimeException  Matrix is rank deficient.                    
                </@exception>
            </javadoc>
            <method name="solve" type="Matrix" line="180">
                <comment line="181">
                    Copy right hand side                    
                </comment>
                <comment line="181">
                    Compute Y = transpose(Q)*B                    
                </comment>
                <comment line="181">
                    Solve R*X = Y;                    
                </comment>
                <scope line="181"/>
                <scope line="184"/>
                <declaration name="nx" type="int" line="189"/>
                <declaration name="X" type="double[][]" line="190"/>
                <scope line="193">
                    <scope line="194">
                        <declaration name="s" type="double" line="195"/>
                        <scope line="196"/>
                        <scope line="200"/>
                    </scope>
                </scope>
                <scope line="206">
                    <scope line="207"/>
                    <scope line="210">
                        <scope line="211"/>
                    </scope>
                </scope>
            </method>
            <declaration name="serialVersionUID" type="long" line="218"/>
        </class>
    </source>