<?xml version="1.0" encoding="UTF-8"?>
    <source package="Jama">
        <class name="LUDecomposition" line="3">
            <comment line="4">
                ------------------------
                Class variables
                 ------------------------                
            </comment>
            <comment line="4">
                ------------------------
                Constructor
                 ------------------------                
            </comment>
            <comment line="4">
                ------------------------
                Temporary, experimental code.
                ------------------------ \
                
                \ LU Decomposition, computed by Gaussian elimination.
                &lt;P&gt;
                This constructor computes L and U with the &quot;daxpy&quot;-based elimination
                algorithm used in LINPACK and MATLAB.  In Java, we suspect the dot-product,
                Crout algorithm will be faster.  We have temporarily included this
                constructor until timing experiments confirm this suspicion.
                &lt;P&gt;
                @param  A             Rectangular matrix
                @param  linpackflag   Use Gaussian elimination.  Actual value ignored.
                @return               Structure to access L, U and piv.
                \
                
                public LUDecomposition (Matrix A, int linpackflag) {
                 Initialize.
                LU = A.getArrayCopy();
                m = A.getRowDimension();
                n = A.getColumnDimension();
                piv = new int[m];
                for (int i = 0; i &lt; m; i++) {
                piv[i] = i;
                }
                pivsign = 1;
                 Main loop.
                for (int k = 0; k &lt; n; k++) {
                 Find pivot.
                int p = k;
                for (int i = k+1; i &lt; m; i++) {
                if (Math.abs(LU[i][k]) &gt; Math.abs(LU[p][k])) {
                p = i;
                }
                }
                 Exchange if necessary.
                if (p != k) {
                for (int j = 0; j &lt; n; j++) {
                double t = LU[p][j]; LU[p][j] = LU[k][j]; LU[k][j] = t;
                }
                int t = piv[p]; piv[p] = piv[k]; piv[k] = t;
                pivsign = -pivsign;
                }
                 Compute multipliers and eliminate k-th column.
                if (LU[k][k] != 0.0) {
                for (int i = k+1; i &lt; m; i++) {
                LU[i][k] = LU[k][k];
                for (int j = k+1; j &lt; n; j++) {
                LU[i][j] -= LU[i][k]LU[k][j];
                }
                }
                }
                }
                }
                
                \ ------------------------
                End of temporary code.
                 ------------------------ 
                
                 ------------------------
                Public Methods
                 ------------------------ 
                
                 Is the matrix nonsingular?
                @return     true if U, and hence A, is nonsingular.
                
                
                public boolean isNonsingular () {                
            </comment>
            <comment line="4">
                ------------------------
                Public Methods
                 ------------------------                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="3">
                LU Decomposition.
                 * &lt;P&gt;
                 * For an m-by-n matrix A with m &gt;= n, the LU decomposition is an m-by-n
                 * unit lower triangular matrix L, an n-by-n upper triangular matrix U,
                 * and a permutation vector piv of length m so that A(piv,:) = L*U.
                 * If m &lt; n, then L is m-by-m and U is m-by-n.
                 * &lt;P&gt;
                 * The LU decompostion with pivoting always exists, even if the matrix is
                 * singular, so the constructor will never fail.  The primary use of the
                 * LU decomposition is in the solution of square systems of simultaneous
                 * linear equations.  This will fail if isNonsingular() returns false.                
            </javadoc>
            <declaration name="LU" type="double[][]" line="22"/>
            <javadoc line="22">
                Array for internal storage of decomposition.                
                <@serial>
                    l internal array storage.                    
                </@serial>
            </javadoc>
            <declaration name="m" type="int" line="27"/>
            <javadoc line="27">
                Row and column dimensions, and pivot sign.                
                <@serial>
                    l column dimension.                    
                </@serial>
                <@serial>
                    l row dimension.                    
                </@serial>
                <@serial>
                    l pivot sign.                    
                </@serial>
            </javadoc>
            <declaration name="piv" type="int[]" line="34"/>
            <javadoc line="34">
                Internal storage of pivot vector.                
                <@serial>
                    l pivot vector.                    
                </@serial>
            </javadoc>
            <javadoc line="43">
                LU Decomposition
                 * Structure to access L, U and piv.                
                <@param>
                    m A Rectangular matrix                    
                </@param>
            </javadoc>
            <method name="LUDecomposition" type="constructor" line="48">
                <comment line="49">
                    Use a &quot;left-looking&quot;, dot-product, Crout/Doolittle algorithm.                    
                </comment>
                <comment line="49">
                    Outer loop.                    
                </comment>
                <scope line="56"/>
                <declaration name="LUrowi" type="double[]" line="60"/>
                <declaration name="LUcolj" type="double[]" line="61"/>
                <scope line="65">
                    <scope line="69"/>
                    <scope line="75">
                        <declaration name="kmax" type="int" line="80"/>
                        <declaration name="s" type="double" line="81"/>
                        <scope line="82"/>
                    </scope>
                    <declaration name="p" type="int" line="91"/>
                    <scope line="92">
                        <scope line="93"/>
                    </scope>
                    <scope line="97">
                        <scope line="98">
                            <declaration name="t" type="double" line="99"/>
                        </scope>
                        <declaration name="k" type="int" line="101"/>
                    </scope>
                    <scope line="107">
                        <scope line="108"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="178">
                Is the matrix nonsingular?                
                <@return>
                    n     true if U, and hence A, is nonsingular.                    
                </@return>
            </javadoc>
            <method name="isNonsingular" type="boolean" line="182">
                <scope line="183"/>
            </method>
            <javadoc line="190">
                Return lower triangular factor                
                <@return>
                    n     L                    
                </@return>
            </javadoc>
            <method name="getL" type="Matrix" line="194">
                <declaration name="X" type="Matrix" line="195"/>
                <declaration name="L" type="double[][]" line="196"/>
                <scope line="197">
                    <scope line="198">
                        <scope line="199"/>
                        <scope line="201"/>
                        <scope line="203"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="211">
                Return upper triangular factor                
                <@return>
                    n     U                    
                </@return>
            </javadoc>
            <method name="getU" type="Matrix" line="215">
                <declaration name="X" type="Matrix" line="216"/>
                <declaration name="U" type="double[][]" line="217"/>
                <scope line="218">
                    <scope line="219">
                        <scope line="220"/>
                        <scope line="222"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="230">
                Return pivot permutation vector                
                <@return>
                    n     piv                    
                </@return>
            </javadoc>
            <method name="getPivot" type="int[]" line="234">
                <declaration name="p" type="int[]" line="235"/>
                <scope line="236"/>
            </method>
            <javadoc line="242">
                Return pivot permutation vector as a one-dimensional double array                
                <@return>
                    n     (double) piv                    
                </@return>
            </javadoc>
            <method name="getDoublePivot" type="double[]" line="246">
                <declaration name="vals" type="double[]" line="247"/>
                <scope line="248"/>
            </method>
            <javadoc line="254">
                Determinant                
                <@return>
                    n     det(A)                    
                </@return>
                <@exception>
                    n IllegalArgumentException  Matrix must be square                    
                </@exception>
            </javadoc>
            <method name="det" type="double" line="259">
                <scope line="260"/>
                <declaration name="d" type="double" line="263"/>
                <scope line="264"/>
            </method>
            <javadoc line="270">
                Solve A*X = B                
                <@param>
                    m B   A Matrix with as many rows as A and any number of columns.                    
                </@param>
                <@return>
                    n     X so that L*U*X = B(piv,:)                    
                </@return>
                <@exception>
                    n IllegalArgumentException Matrix row dimensions must agree.                    
                </@exception>
                <@exception>
                    n RuntimeException  Matrix is singular.                    
                </@exception>
            </javadoc>
            <method name="solve" type="Matrix" line="277">
                <comment line="278">
                    Copy right hand side with pivoting                    
                </comment>
                <comment line="278">
                    Solve L*Y = B(piv,:)                    
                </comment>
                <comment line="278">
                    Solve U*X = Y;                    
                </comment>
                <scope line="278"/>
                <scope line="281"/>
                <declaration name="nx" type="int" line="286"/>
                <declaration name="Xmat" type="Matrix" line="287"/>
                <declaration name="X" type="double[][]" line="288"/>
                <scope line="291">
                    <scope line="292">
                        <scope line="293"/>
                    </scope>
                </scope>
                <scope line="299">
                    <scope line="300"/>
                    <scope line="303">
                        <scope line="304"/>
                    </scope>
                </scope>
            </method>
            <declaration name="serialVersionUID" type="long" line="311"/>
        </class>
    </source>