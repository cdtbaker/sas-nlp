<?xml version="1.0" encoding="UTF-8"?>
    <source package="Jama">
        <import package="java.text.NumberFormat"/>
        <import package="java.text.DecimalFormat"/>
        <import package="java.text.DecimalFormatSymbols"/>
        <import package="java.util.Locale"/>
        <import package="java.text.FieldPosition"/>
        <import package="java.io.PrintWriter"/>
        <import package="java.io.BufferedReader"/>
        <import package="java.io.StreamTokenizer"/>
        <import package="Jama.util"/>
        <class name="Matrix" line="13">
            <comment line="14">
                ------------------------
                Class variables
                 ------------------------                
            </comment>
            <comment line="14">
                ------------------------
                Constructors
                 ------------------------                
            </comment>
            <comment line="14">
                ------------------------
                Public Methods
                 ------------------------                
            </comment>
            <comment line="14">
                DecimalFormat is a little disappointing coming from Fortran or C&apos;s printf.                
            </comment>
            <comment line="14">
                Since it doesn&apos;t pad on the left, the elements will come out different                
            </comment>
            <comment line="14">
                widths.  Consequently, we&apos;ll pass the desired column width in as an                
            </comment>
            <comment line="14">
                argument and do the extra padding ourselves.                
            </comment>
            <comment line="14">
                ------------------------
                Private Methods
                 ------------------------                
            </comment>
            <implements interface="Cloneable"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="13">
                Jama = Java Matrix class.
                 * &lt;P&gt;
                 * The Java Matrix Class provides the fundamental operations of numerical
                 * linear algebra.  Various constructors create Matrices from two dimensional
                 * arrays of double precision floating point numbers.  Various &quot;gets&quot; and
                 * &quot;sets&quot; provide access to submatrices and matrix elements.  Several methods 
                 * implement basic matrix arithmetic, including matrix addition and
                 * multiplication, matrix norms, and element-by-element array operations.
                 * Methods for reading and printing matrices are also included.  All the
                 * operations in this version of the Matrix Class involve real matrices.
                 * Complex matrices may be handled in a future version.
                 * &lt;P&gt;
                 * Five fundamental matrix decompositions, which consist of pairs or triples
                 * of matrices, permutation vectors, and the like, produce results in five
                 * decomposition classes.  These decompositions are accessed by the Matrix
                 * class to compute solutions of simultaneous linear equations, determinants,
                 * inverses and other matrix functions.  The five decompositions are:
                 * &lt;P&gt;&lt;UL&gt;
                 * &lt;LI&gt;Cholesky Decomposition of symmetric, positive definite matrices.
                 * &lt;LI&gt;LU Decomposition of rectangular matrices.
                 * &lt;LI&gt;QR Decomposition of rectangular matrices.
                 * &lt;LI&gt;Singular Value Decomposition of rectangular matrices.
                 * &lt;LI&gt;Eigenvalue Decomposition of both symmetric and nonsymmetric square matrices.
                 * &lt;/UL&gt;
                 * &lt;DL&gt;
                 * &lt;DT&gt;&lt;B&gt;Example of use:&lt;/B&gt;&lt;/DT&gt;
                 * &lt;P&gt;
                 * &lt;DD&gt;Solve a linear system A x = b and compute the residual norm, ||b - A x||.
                 * &lt;P&gt;&lt;PRE&gt;
                 * double[][] vals = {{1.,2.,3},{4.,5.,6.},{7.,8.,10.}};
                 * Matrix A = new Matrix(vals);
                 * Matrix b = Matrix.random(3,1);
                 * Matrix x = A.solve(b);
                 * Matrix r = A.times(x).minus(b);
                 * double rnorm = r.normInf();
                 * &lt;/PRE&gt;&lt;/DD&gt;
                 * &lt;/DL&gt;                
                <@author>
                    r The MathWorks, Inc. and the National Institute of Standards and Technology.                    
                </@author>
                <@version>
                    n 5 August 1998                    
                </@version>
            </javadoc>
            <declaration name="A" type="double[][]" line="62"/>
            <javadoc line="62">
                Array for internal storage of elements.                
                <@serial>
                    l internal array storage.                    
                </@serial>
            </javadoc>
            <declaration name="m" type="int" line="67"/>
            <javadoc line="67">
                Row and column dimensions.                
                <@serial>
                    l row dimension.                    
                </@serial>
                <@serial>
                    l column dimension.                    
                </@serial>
            </javadoc>
            <javadoc line="77">
                Construct an m-by-n matrix of zeros.                
                <@param>
                    m m    Number of rows.                    
                </@param>
                <@param>
                    m n    Number of colums.                    
                </@param>
            </javadoc>
            <method name="Matrix" type="constructor" line="82"/>
            <javadoc line="88">
                Construct an m-by-n constant matrix.                
                <@param>
                    m m    Number of rows.                    
                </@param>
                <@param>
                    m n    Number of colums.                    
                </@param>
                <@param>
                    m s    Fill the matrix with this scalar value.                    
                </@param>
            </javadoc>
            <method name="Matrix" type="constructor" line="94">
                <scope line="98">
                    <scope line="99"/>
                </scope>
            </method>
            <javadoc line="105">
                Construct a matrix from a 2-D array.                
                <@param>
                    m A    Two-dimensional array of doubles.                    
                </@param>
                <@exception>
                    n IllegalArgumentException All rows must have the same length                    
                </@exception>
                <@see>
                    e #constructWithCopy                    
                </@see>
            </javadoc>
            <method name="Matrix" type="constructor" line="111">
                <scope line="114">
                    <scope line="115"/>
                </scope>
            </method>
            <javadoc line="122">
                Construct a matrix quickly without checking arguments.                
                <@param>
                    m A    Two-dimensional array of doubles.                    
                </@param>
                <@param>
                    m m    Number of rows.                    
                </@param>
                <@param>
                    m n    Number of colums.                    
                </@param>
            </javadoc>
            <method name="Matrix" type="constructor" line="128"/>
            <javadoc line="134">
                Construct a matrix from a one-dimensional packed array                
                <@param>
                    m vals One-dimensional array of doubles, packed by columns (ala Fortran).                    
                </@param>
                <@param>
                    m m    Number of rows.                    
                </@param>
                <@exception>
                    n IllegalArgumentException Array length must be a multiple of m.                    
                </@exception>
            </javadoc>
            <method name="Matrix" type="constructor" line="140">
                <scope line="143"/>
                <scope line="147">
                    <scope line="148"/>
                </scope>
            </method>
            <javadoc line="158">
                Construct a matrix from a copy of a 2-D array.                
                <@param>
                    m A    Two-dimensional array of doubles.                    
                </@param>
                <@exception>
                    n IllegalArgumentException All rows must have the same length                    
                </@exception>
            </javadoc>
            <method name="constructWithCopy" type="Matrix" line="163">
                <declaration name="m" type="int" line="164"/>
                <declaration name="n" type="int" line="165"/>
                <declaration name="X" type="Matrix" line="166"/>
                <declaration name="C" type="double[][]" line="167"/>
                <scope line="168">
                    <scope line="169"/>
                    <scope line="173"/>
                </scope>
            </method>
            <javadoc line="180">
                Make a deep copy of a matrix                
            </javadoc>
            <method name="copy" type="Matrix" line="183">
                <declaration name="X" type="Matrix" line="184"/>
                <declaration name="C" type="double[][]" line="185"/>
                <scope line="186">
                    <scope line="187"/>
                </scope>
            </method>
            <javadoc line="194">
                Clone the Matrix object.                
            </javadoc>
            <method name="clone" type="Object" line="197"/>
            <javadoc line="201">
                Access the internal two-dimensional array.                
                <@return>
                    n     Pointer to the two-dimensional array of matrix elements.                    
                </@return>
            </javadoc>
            <method name="getArray" type="double[][]" line="205"/>
            <javadoc line="209">
                Copy the internal two-dimensional array.                
                <@return>
                    n     Two-dimensional array copy of matrix elements.                    
                </@return>
            </javadoc>
            <method name="getArrayCopy" type="double[][]" line="213">
                <declaration name="C" type="double[][]" line="214"/>
                <scope line="215">
                    <scope line="216"/>
                </scope>
            </method>
            <javadoc line="223">
                Make a one-dimensional column packed copy of the internal array.                
                <@return>
                    n     Matrix elements packed in a one-dimensional array by columns.                    
                </@return>
            </javadoc>
            <method name="getColumnPackedCopy" type="double[]" line="227">
                <declaration name="vals" type="double[]" line="228"/>
                <scope line="229">
                    <scope line="230"/>
                </scope>
            </method>
            <javadoc line="237">
                Make a one-dimensional row packed copy of the internal array.                
                <@return>
                    n     Matrix elements packed in a one-dimensional array by rows.                    
                </@return>
            </javadoc>
            <method name="getRowPackedCopy" type="double[]" line="241">
                <declaration name="vals" type="double[]" line="242"/>
                <scope line="243">
                    <scope line="244"/>
                </scope>
            </method>
            <javadoc line="251">
                Get row dimension.                
                <@return>
                    n     m, the number of rows.                    
                </@return>
            </javadoc>
            <method name="getRowDimension" type="int" line="255"/>
            <javadoc line="259">
                Get column dimension.                
                <@return>
                    n     n, the number of columns.                    
                </@return>
            </javadoc>
            <method name="getColumnDimension" type="int" line="263"/>
            <javadoc line="267">
                Get a single element.                
                <@param>
                    m i    Row index.                    
                </@param>
                <@param>
                    m j    Column index.                    
                </@param>
                <@return>
                    n     A(i,j)                    
                </@return>
                <@exception>
                    n ArrayIndexOutOfBoundsException                    
                </@exception>
            </javadoc>
            <method name="get" type="double" line="274"/>
            <javadoc line="278">
                Get a submatrix.                
                <@param>
                    m i0   Initial row index                    
                </@param>
                <@param>
                    m i1   Final row index                    
                </@param>
                <@param>
                    m j0   Initial column index                    
                </@param>
                <@param>
                    m j1   Final column index                    
                </@param>
                <@return>
                    n     A(i0:i1,j0:j1)                    
                </@return>
                <@exception>
                    n ArrayIndexOutOfBoundsException Submatrix indices                    
                </@exception>
            </javadoc>
            <method name="getMatrix" type="Matrix" line="287">
                <declaration name="X" type="Matrix" line="288"/>
                <declaration name="B" type="double[][]" line="289"/>
                <scope line="290">
                    <scope line="291">
                        <scope line="292"/>
                    </scope>
                </scope>
                <scope line="296"/>
            </method>
            <javadoc line="302">
                Get a submatrix.                
                <@param>
                    m r    Array of row indices.                    
                </@param>
                <@param>
                    m c    Array of column indices.                    
                </@param>
                <@return>
                    n     A(r(:),c(:))                    
                </@return>
                <@exception>
                    n ArrayIndexOutOfBoundsException Submatrix indices                    
                </@exception>
            </javadoc>
            <method name="getMatrix" type="Matrix" line="309">
                <declaration name="X" type="Matrix" line="310"/>
                <declaration name="B" type="double[][]" line="311"/>
                <scope line="312">
                    <scope line="313">
                        <scope line="314"/>
                    </scope>
                </scope>
                <scope line="318"/>
            </method>
            <javadoc line="324">
                Get a submatrix.                
                <@param>
                    m i0   Initial row index                    
                </@param>
                <@param>
                    m i1   Final row index                    
                </@param>
                <@param>
                    m c    Array of column indices.                    
                </@param>
                <@return>
                    n     A(i0:i1,c(:))                    
                </@return>
                <@exception>
                    n ArrayIndexOutOfBoundsException Submatrix indices                    
                </@exception>
            </javadoc>
            <method name="getMatrix" type="Matrix" line="332">
                <declaration name="X" type="Matrix" line="333"/>
                <declaration name="B" type="double[][]" line="334"/>
                <scope line="335">
                    <scope line="336">
                        <scope line="337"/>
                    </scope>
                </scope>
                <scope line="341"/>
            </method>
            <javadoc line="347">
                Get a submatrix.                
                <@param>
                    m r    Array of row indices.                    
                </@param>
                <@param>
                    m j0   Initial column index                    
                </@param>
                <@param>
                    m j1   Final column index                    
                </@param>
                <@return>
                    n     A(r(:),j0:j1)                    
                </@return>
                <@exception>
                    n ArrayIndexOutOfBoundsException Submatrix indices                    
                </@exception>
            </javadoc>
            <method name="getMatrix" type="Matrix" line="355">
                <declaration name="X" type="Matrix" line="356"/>
                <declaration name="B" type="double[][]" line="357"/>
                <scope line="358">
                    <scope line="359">
                        <scope line="360"/>
                    </scope>
                </scope>
                <scope line="364"/>
            </method>
            <javadoc line="370">
                Set a single element.                
                <@param>
                    m i    Row index.                    
                </@param>
                <@param>
                    m j    Column index.                    
                </@param>
                <@param>
                    m s    A(i,j).                    
                </@param>
                <@exception>
                    n ArrayIndexOutOfBoundsException                    
                </@exception>
            </javadoc>
            <method name="set" type="void" line="377"/>
            <javadoc line="381">
                Set a submatrix.                
                <@param>
                    m i0   Initial row index                    
                </@param>
                <@param>
                    m i1   Final row index                    
                </@param>
                <@param>
                    m j0   Initial column index                    
                </@param>
                <@param>
                    m j1   Final column index                    
                </@param>
                <@param>
                    m X    A(i0:i1,j0:j1)                    
                </@param>
                <@exception>
                    n ArrayIndexOutOfBoundsException Submatrix indices                    
                </@exception>
            </javadoc>
            <method name="setMatrix" type="void" line="390">
                <scope line="391">
                    <scope line="392">
                        <scope line="393"/>
                    </scope>
                </scope>
                <scope line="397"/>
            </method>
            <javadoc line="402">
                Set a submatrix.                
                <@param>
                    m r    Array of row indices.                    
                </@param>
                <@param>
                    m c    Array of column indices.                    
                </@param>
                <@param>
                    m X    A(r(:),c(:))                    
                </@param>
                <@exception>
                    n ArrayIndexOutOfBoundsException Submatrix indices                    
                </@exception>
            </javadoc>
            <method name="setMatrix" type="void" line="409">
                <scope line="410">
                    <scope line="411">
                        <scope line="412"/>
                    </scope>
                </scope>
                <scope line="416"/>
            </method>
            <javadoc line="421">
                Set a submatrix.                
                <@param>
                    m r    Array of row indices.                    
                </@param>
                <@param>
                    m j0   Initial column index                    
                </@param>
                <@param>
                    m j1   Final column index                    
                </@param>
                <@param>
                    m X    A(r(:),j0:j1)                    
                </@param>
                <@exception>
                    n ArrayIndexOutOfBoundsException Submatrix indices                    
                </@exception>
            </javadoc>
            <method name="setMatrix" type="void" line="429">
                <scope line="430">
                    <scope line="431">
                        <scope line="432"/>
                    </scope>
                </scope>
                <scope line="436"/>
            </method>
            <javadoc line="441">
                Set a submatrix.                
                <@param>
                    m i0   Initial row index                    
                </@param>
                <@param>
                    m i1   Final row index                    
                </@param>
                <@param>
                    m c    Array of column indices.                    
                </@param>
                <@param>
                    m X    A(i0:i1,c(:))                    
                </@param>
                <@exception>
                    n ArrayIndexOutOfBoundsException Submatrix indices                    
                </@exception>
            </javadoc>
            <method name="setMatrix" type="void" line="449">
                <scope line="450">
                    <scope line="451">
                        <scope line="452"/>
                    </scope>
                </scope>
                <scope line="456"/>
            </method>
            <javadoc line="461">
                Matrix transpose.                
                <@return>
                    n    A'                    
                </@return>
            </javadoc>
            <method name="transpose" type="Matrix" line="465">
                <declaration name="X" type="Matrix" line="466"/>
                <declaration name="C" type="double[][]" line="467"/>
                <scope line="468">
                    <scope line="469"/>
                </scope>
            </method>
            <javadoc line="476">
                One norm                
                <@return>
                    n    maximum column sum.                    
                </@return>
            </javadoc>
            <method name="norm1" type="double" line="480">
                <declaration name="f" type="double" line="481"/>
                <scope line="482">
                    <declaration name="s" type="double" line="483"/>
                    <scope line="484"/>
                </scope>
            </method>
            <javadoc line="492">
                Two norm                
                <@return>
                    n    maximum singular value.                    
                </@return>
            </javadoc>
            <method name="norm2" type="double" line="496"/>
            <javadoc line="500">
                Infinity norm                
                <@return>
                    n    maximum row sum.                    
                </@return>
            </javadoc>
            <method name="normInf" type="double" line="504">
                <declaration name="f" type="double" line="505"/>
                <scope line="506">
                    <declaration name="s" type="double" line="507"/>
                    <scope line="508"/>
                </scope>
            </method>
            <javadoc line="516">
                Frobenius norm                
                <@return>
                    n    sqrt of sum of squares of all elements.                    
                </@return>
            </javadoc>
            <method name="normF" type="double" line="520">
                <declaration name="f" type="double" line="521"/>
                <scope line="522">
                    <scope line="523"/>
                </scope>
            </method>
            <javadoc line="530">
                Unary minus                
                <@return>
                    n    -A                    
                </@return>
            </javadoc>
            <method name="uminus" type="Matrix" line="534">
                <declaration name="X" type="Matrix" line="535"/>
                <declaration name="C" type="double[][]" line="536"/>
                <scope line="537">
                    <scope line="538"/>
                </scope>
            </method>
            <javadoc line="545">
                C = A + B                
                <@param>
                    m B    another matrix                    
                </@param>
                <@return>
                    n     A + B                    
                </@return>
            </javadoc>
            <method name="plus" type="Matrix" line="550">
                <declaration name="X" type="Matrix" line="552"/>
                <declaration name="C" type="double[][]" line="553"/>
                <scope line="554">
                    <scope line="555"/>
                </scope>
            </method>
            <javadoc line="562">
                A = A + B                
                <@param>
                    m B    another matrix                    
                </@param>
                <@return>
                    n     A + B                    
                </@return>
            </javadoc>
            <method name="plusEquals" type="Matrix" line="567">
                <scope line="569">
                    <scope line="570"/>
                </scope>
            </method>
            <javadoc line="577">
                C = A - B                
                <@param>
                    m B    another matrix                    
                </@param>
                <@return>
                    n     A - B                    
                </@return>
            </javadoc>
            <method name="minus" type="Matrix" line="582">
                <declaration name="X" type="Matrix" line="584"/>
                <declaration name="C" type="double[][]" line="585"/>
                <scope line="586">
                    <scope line="587"/>
                </scope>
            </method>
            <javadoc line="594">
                A = A - B                
                <@param>
                    m B    another matrix                    
                </@param>
                <@return>
                    n     A - B                    
                </@return>
            </javadoc>
            <method name="minusEquals" type="Matrix" line="599">
                <scope line="601">
                    <scope line="602"/>
                </scope>
            </method>
            <javadoc line="609">
                Element-by-element multiplication, C = A.*B                
                <@param>
                    m B    another matrix                    
                </@param>
                <@return>
                    n     A.*B                    
                </@return>
            </javadoc>
            <method name="arrayTimes" type="Matrix" line="614">
                <declaration name="X" type="Matrix" line="616"/>
                <declaration name="C" type="double[][]" line="617"/>
                <scope line="618">
                    <scope line="619"/>
                </scope>
            </method>
            <javadoc line="626">
                Element-by-element multiplication in place, A = A.*B                
                <@param>
                    m B    another matrix                    
                </@param>
                <@return>
                    n     A.*B                    
                </@return>
            </javadoc>
            <method name="arrayTimesEquals" type="Matrix" line="631">
                <scope line="633">
                    <scope line="634"/>
                </scope>
            </method>
            <javadoc line="641">
                Element-by-element right division, C = A./B                
                <@param>
                    m B    another matrix                    
                </@param>
                <@return>
                    n     A./B                    
                </@return>
            </javadoc>
            <method name="arrayRightDivide" type="Matrix" line="646">
                <declaration name="X" type="Matrix" line="648"/>
                <declaration name="C" type="double[][]" line="649"/>
                <scope line="650">
                    <scope line="651"/>
                </scope>
            </method>
            <javadoc line="658">
                Element-by-element right division in place, A = A./B                
                <@param>
                    m B    another matrix                    
                </@param>
                <@return>
                    n     A./B                    
                </@return>
            </javadoc>
            <method name="arrayRightDivideEquals" type="Matrix" line="663">
                <scope line="665">
                    <scope line="666"/>
                </scope>
            </method>
            <javadoc line="673">
                Element-by-element left division, C = A.\B                
                <@param>
                    m B    another matrix                    
                </@param>
                <@return>
                    n     A.\B                    
                </@return>
            </javadoc>
            <method name="arrayLeftDivide" type="Matrix" line="678">
                <declaration name="X" type="Matrix" line="680"/>
                <declaration name="C" type="double[][]" line="681"/>
                <scope line="682">
                    <scope line="683"/>
                </scope>
            </method>
            <javadoc line="690">
                Element-by-element left division in place, A = A.\B                
                <@param>
                    m B    another matrix                    
                </@param>
                <@return>
                    n     A.\B                    
                </@return>
            </javadoc>
            <method name="arrayLeftDivideEquals" type="Matrix" line="695">
                <scope line="697">
                    <scope line="698"/>
                </scope>
            </method>
            <javadoc line="705">
                Multiply a matrix by a scalar, C = s*A                
                <@param>
                    m s    scalar                    
                </@param>
                <@return>
                    n     s*A                    
                </@return>
            </javadoc>
            <method name="times" type="Matrix" line="710">
                <declaration name="X" type="Matrix" line="711"/>
                <declaration name="C" type="double[][]" line="712"/>
                <scope line="713">
                    <scope line="714"/>
                </scope>
            </method>
            <javadoc line="721">
                Multiply a matrix by a scalar in place, A = s*A                
                <@param>
                    m s    scalar                    
                </@param>
                <@return>
                    n     replace A by s*A                    
                </@return>
            </javadoc>
            <method name="timesEquals" type="Matrix" line="726">
                <scope line="727">
                    <scope line="728"/>
                </scope>
            </method>
            <javadoc line="735">
                Linear algebraic matrix multiplication, A * B                
                <@param>
                    m B    another matrix                    
                </@param>
                <@return>
                    n     Matrix product, A * B                    
                </@return>
                <@exception>
                    n IllegalArgumentException Matrix inner dimensions must agree.                    
                </@exception>
            </javadoc>
            <method name="times" type="Matrix" line="741">
                <scope line="742"/>
                <declaration name="X" type="Matrix" line="745"/>
                <declaration name="C" type="double[][]" line="746"/>
                <declaration name="Bcolj" type="double[]" line="747"/>
                <scope line="748">
                    <scope line="749"/>
                    <scope line="752">
                        <declaration name="Arowi" type="double[]" line="753"/>
                        <declaration name="s" type="double" line="754"/>
                        <scope line="755"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="764">
                LU Decomposition                
                <@return>
                    n     LUDecomposition                    
                </@return>
                <@see>
                    e LUDecomposition                    
                </@see>
            </javadoc>
            <method name="lu" type="LUDecomposition" line="769"/>
            <javadoc line="773">
                QR Decomposition                
                <@return>
                    n     QRDecomposition                    
                </@return>
                <@see>
                    e QRDecomposition                    
                </@see>
            </javadoc>
            <method name="qr" type="QRDecomposition" line="778"/>
            <javadoc line="782">
                Cholesky Decomposition                
                <@return>
                    n     CholeskyDecomposition                    
                </@return>
                <@see>
                    e CholeskyDecomposition                    
                </@see>
            </javadoc>
            <method name="chol" type="CholeskyDecomposition" line="787"/>
            <javadoc line="791">
                Singular Value Decomposition                
                <@return>
                    n     SingularValueDecomposition                    
                </@return>
                <@see>
                    e SingularValueDecomposition                    
                </@see>
            </javadoc>
            <method name="svd" type="SingularValueDecomposition" line="796"/>
            <javadoc line="800">
                Eigenvalue Decomposition                
                <@return>
                    n     EigenvalueDecomposition                    
                </@return>
                <@see>
                    e EigenvalueDecomposition                    
                </@see>
            </javadoc>
            <method name="eig" type="EigenvalueDecomposition" line="805"/>
            <javadoc line="809">
                Solve A*X = B                
                <@param>
                    m B    right hand side                    
                </@param>
                <@return>
                    n     solution if A is square, least squares solution otherwise                    
                </@return>
            </javadoc>
            <method name="solve" type="Matrix" line="814"/>
            <javadoc line="819">
                Solve X*A = B, which is also A&apos;*X&apos; = B&apos;                
                <@param>
                    m B    right hand side                    
                </@param>
                <@return>
                    n     solution if A is square, least squares solution otherwise.                    
                </@return>
            </javadoc>
            <method name="solveTranspose" type="Matrix" line="824"/>
            <javadoc line="828">
                Matrix inverse or pseudoinverse                
                <@return>
                    n     inverse(A) if A is square, pseudoinverse otherwise.                    
                </@return>
            </javadoc>
            <method name="inverse" type="Matrix" line="832"/>
            <javadoc line="836">
                Matrix determinant                
                <@return>
                    n     determinant                    
                </@return>
            </javadoc>
            <method name="det" type="double" line="840"/>
            <javadoc line="844">
                Matrix rank                
                <@return>
                    n     effective numerical rank, obtained from SVD.                    
                </@return>
            </javadoc>
            <method name="rank" type="int" line="848"/>
            <javadoc line="852">
                Matrix condition (2 norm)                
                <@return>
                    n     ratio of largest to smallest singular value.                    
                </@return>
            </javadoc>
            <method name="cond" type="double" line="856"/>
            <javadoc line="860">
                Matrix trace.                
                <@return>
                    n     sum of the diagonal elements.                    
                </@return>
            </javadoc>
            <method name="trace" type="double" line="864">
                <declaration name="t" type="double" line="865"/>
                <scope line="866"/>
            </method>
            <javadoc line="872">
                Generate matrix with random elements                
                <@param>
                    m m    Number of rows.                    
                </@param>
                <@param>
                    m n    Number of colums.                    
                </@param>
                <@return>
                    n     An m-by-n matrix with uniformly distributed random elements.                    
                </@return>
            </javadoc>
            <method name="random" type="Matrix" line="878">
                <declaration name="A" type="Matrix" line="879"/>
                <declaration name="X" type="double[][]" line="880"/>
                <scope line="881">
                    <scope line="882"/>
                </scope>
            </method>
            <javadoc line="889">
                Generate identity matrix                
                <@param>
                    m m    Number of rows.                    
                </@param>
                <@param>
                    m n    Number of colums.                    
                </@param>
                <@return>
                    n     An m-by-n matrix with ones on the diagonal and zeros elsewhere.                    
                </@return>
            </javadoc>
            <method name="identity" type="Matrix" line="895">
                <declaration name="A" type="Matrix" line="896"/>
                <declaration name="X" type="double[][]" line="897"/>
                <scope line="898">
                    <scope line="899"/>
                </scope>
            </method>
            <javadoc line="907">
                Print the matrix to stdout.   Line the elements up in columns
                 * with a Fortran-like &apos;Fw.d&apos; style format.                
                <@param>
                    m w    Column width.                    
                </@param>
                <@param>
                    m d    Number of digits after the decimal.                    
                </@param>
            </javadoc>
            <method name="print" type="void" line="913"/>
            <javadoc line="916">
                Print the matrix to the output stream.   Line the elements up in
                 * columns with a Fortran-like &apos;Fw.d&apos; style format.                
                <@param>
                    m output Output stream.                    
                </@param>
                <@param>
                    m w      Column width.                    
                </@param>
                <@param>
                    m d      Number of digits after the decimal.                    
                </@param>
            </javadoc>
            <method name="print" type="void" line="923">
                <declaration name="format" type="DecimalFormat" line="924"/>
            </method>
            <javadoc line="933">
                Print the matrix to stdout.  Line the elements up in columns.
                 * Use the format object, and right justify within columns of width
                 * characters.
                 * Note that is the matrix is to be read back in, you probably will want
                 * to use a NumberFormat that is set to US Locale.                
                <@param>
                    m format A  Formatting object for individual elements.                    
                </@param>
                <@param>
                    m width     Field width for each column.                    
                </@param>
                <@see>
                    e java.text.DecimalFormat#setDecimalFormatSymbols                    
                </@see>
            </javadoc>
            <method name="print" type="void" line="943"/>
            <javadoc line="951">
                Print the matrix to the output stream.  Line the elements up in columns.
                 * Use the format object, and right justify within columns of width
                 * characters.
                 * Note that is the matrix is to be read back in, you probably will want
                 * to use a NumberFormat that is set to US Locale.                
                <@param>
                    m output the output stream.                    
                </@param>
                <@param>
                    m format A formatting object to format the matrix elements                    
                </@param>
                <@param>
                    m width  Column width.                    
                </@param>
                <@see>
                    e java.text.DecimalFormat#setDecimalFormatSymbols                    
                </@see>
            </javadoc>
            <method name="print" type="void" line="962">
                <comment line="963">
                    tput.println();  // start on new line.                    
                </comment>
                <comment line="963">
                    tput.println();   // end with blank line.                    
                </comment>
                <scope line="964">
                    <scope line="965">
                        <declaration name="s" type="String" line="966"/>
                        <declaration name="padding" type="int" line="967"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="977">
                Read a matrix from a stream.  The format is the same the print method,
                 * so printed matrices can be read back in (provided they were printed using
                 * US Locale).  Elements are separated by
                 * whitespace, all the elements for each row appear on a single line,
                 * the last row is followed by a blank line.                
                <@param>
                    m input the input stream.                    
                </@param>
            </javadoc>
            <method name="read" type="Matrix" line="985">
                <comment line="986">
                    Although StreamTokenizer will parse numbers, it doesn&apos;t recognize                    
                </comment>
                <comment line="986">
                    scientific notation (E or D); however, Double.valueOf does.                    
                </comment>
                <comment line="986">
                    The strategy here is to disable StreamTokenizer&apos;s number parsing.                    
                </comment>
                <comment line="986">
                    We&apos;ll only get whitespace delimited words, EOL&apos;s and EOF&apos;s.                    
                </comment>
                <comment line="986">
                    These words should all be numbers, for Double.valueOf to parse.                    
                </comment>
                <comment line="986">
                    Ignore initial empty lines                    
                </comment>
                <comment line="986">
                    t n = vD.size();  // Now we&apos;ve got the number of columns!                    
                </comment>
                <comment line="986">
                    addElement(row);  // Start storing rows instead of columns.                    
                </comment>
                <comment line="986">
                    t m = v.size();  // Now we&apos;ve got the number of rows.                    
                </comment>
                <comment line="986">
                    copyInto(A);  // copy the rows out of the vector                    
                </comment>
                <declaration name="tokenizer" type="StreamTokenizer" line="986"/>
                <declaration name="vD" type="java.util.Vector&lt;Double&gt;" line="998"/>
                <scope line="1004"/>
                <declaration name="n" type="int" line="1008"/>
                <declaration name="row" type="double" line="1009"/>
                <declaration name="v" type="java.util.Vector&lt;double[]&gt;" line="1012"/>
                <scope line="1014">
                    <declaration name="j" type="int" line="1017"/>
                    <scope line="1018"/>
                </scope>
                <declaration name="m" type="int" line="1026"/>
                <declaration name="A" type="double[][]" line="1027"/>
            </method>
            <javadoc line="1037">
                Check if size(A) == size(B)                
            </javadoc>
            <method name="checkMatrixDimensions" type="void" line="1039">
                <scope line="1040"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="1045"/>
        </class>
    </source>