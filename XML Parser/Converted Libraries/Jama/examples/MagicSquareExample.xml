<?xml version="1.0" encoding="UTF-8"?>
<source package="Jama.examples">
  <import name="Jama.*" />
  <import name="java.util.Date" />
  <class name="MagicSquareExample" startLine="5">
    <javadoc>
      <text>* Example of use of Matrix Class, featuring magic squares.</text>
    </javadoc>
    <javadoc>
      <text>* Generate magic square test matrix.</text>
    </javadoc>
    <method type="Matrix" name="magic" startLine="11" endLine="66">
      <declaration type="double[][]" name="M" />
      <scope startLine="17" endLine="28">
        <declaration type="int" name="a" />
        <declaration type="int" name="b" />
        <scope startLine="20" endLine="24">
          <scope startLine="21" endLine="23" />
        </scope>
        <comment>Doubly Even Order</comment>
      </scope>
      <scope startLine="28" endLine="41">
        <scope startLine="29" endLine="37">
          <scope startLine="30" endLine="36">
            <scope startLine="31" endLine="33" />
            <scope startLine="33" endLine="35" />
          </scope>
        </scope>
        <comment>Singly Even Order</comment>
      </scope>
      <scope startLine="41" endLine="64">
        <declaration type="int" name="p" />
        <declaration type="int" name="k" />
        <declaration type="Matrix" name="A" />
        <scope startLine="45" endLine="53">
          <scope startLine="46" endLine="52">
            <declaration type="double" name="aij" />
          </scope>
        </scope>
        <scope startLine="54" endLine="61">
          <scope startLine="55" endLine="57">
            <declaration type="double" name="t" />
          </scope>
          <scope startLine="58" endLine="60">
            <declaration type="double" name="t" />
          </scope>
        </scope>
        <declaration type="double" name="t" />
      </scope>
      <comment>Odd order</comment>
    </method>
    <javadoc>
      <text>* Shorten spelling of print.</text>
    </javadoc>
    <method type="void" name="print" startLine="70" endLine="72" />
    <javadoc>
      <text>* Format double with Fw.d.</text>
    </javadoc>
    <method type="String" name="fixedWidthDoubletoString" startLine="76" endLine="86">
      <declaration type="java.text.DecimalFormat" name="fmt" />
      <declaration type="String" name="s" />
      <scope startLine="82" endLine="84" />
    </method>
    <javadoc>
      <text>* Format integer with Iw.</text>
    </javadoc>
    <method type="String" name="fixedWidthIntegertoString" startLine="90" endLine="96">
      <declaration type="String" name="s" />
      <scope startLine="92" endLine="94" />
    </method>
    <method type="void" name="main" startLine="99" endLine="162">
      <declaration type="Date" name="start_time" />
      <declaration type="double" name="eps" />
      <scope startLine="120" endLine="156">
        <declaration type="Matrix" name="M" />
        <declaration type="int" name="t" />
        <declaration type="EigenvalueDecomposition" name="E" />
        <declaration type="double[]" name="d" />
        <declaration type="int" name="r" />
        <declaration type="double" name="c" />
        <declaration type="LUDecomposition" name="LU" />
        <declaration type="Matrix" name="L" />
        <declaration type="Matrix" name="U" />
        <declaration type="int[]" name="p" />
        <declaration type="Matrix" name="R" />
        <declaration type="double" name="res" />
        <declaration type="QRDecomposition" name="QR" />
        <declaration type="Matrix" name="Q" />
      </scope>
      <declaration type="Date" name="stop_time" />
      <declaration type="double" name="etime" />
      <comment>| Tests LU, QR, SVD and symmetric Eig decompositions.
|
|   n       = order of magic square.
|   trace   = diagonal sum, should be the magic sum, (n^3 + n)2.
|   max_eig = maximum eigenvalue of (A + A')2, should equal trace.
|   rank    = linear algebraic rank,
|             should equal n if n is odd, be less than n if n is even.
|   cond    = L_2 condition number, ratio of singular values.
|   lu_res  = test of LU factorization, norm1(LU-A(p,:))(neps).
|   qr_res  = test of QR factorization, norm1(QR-A)(neps).</comment>
    </method>
  </class>
</source>
