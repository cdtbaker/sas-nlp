<?xml version="1.0" encoding="UTF-8"?>
<source package="Jama">
  <import name="java.text.NumberFormat" />
  <import name="java.text.DecimalFormat" />
  <import name="java.text.DecimalFormatSymbols" />
  <import name="java.util.Locale" />
  <import name="java.text.FieldPosition" />
  <import name="java.io.PrintWriter" />
  <import name="java.io.BufferedReader" />
  <import name="java.io.StreamTokenizer" />
  <import name="Jama.util.*" />
  <class name="Matrix" startLine="13">
    <implements name="Cloneable" />
    <implements name="java.io.Serializable" />
    <javadoc>
      <text>* Jama = Java Matrix class.
 * <P>
 * The Java Matrix Class provides the fundamental operations of numerical
 * linear algebra.  Various constructors create Matrices from two dimensional
 * arrays of double precision floating point numbers.  Various "gets" and
 * "sets" provide access to submatrices and matrix elements.  Several methods 
 * implement basic matrix arithmetic, including matrix addition and
 * multiplication, matrix norms, and element-by-element array operations.
 * Methods for reading and printing matrices are also included.  All the
 * operations in this version of the Matrix Class involve real matrices.
 * Complex matrices may be handled in a future version.
 * <P>
 * Five fundamental matrix decompositions, which consist of pairs or triples
 * of matrices, permutation vectors, and the like, produce results in five
 * decomposition classes.  These decompositions are accessed by the Matrix
 * class to compute solutions of simultaneous linear equations, determinants,
 * inverses and other matrix functions.  The five decompositions are:
 * <P><UL>
 * <LI>Cholesky Decomposition of symmetric, positive definite matrices.
 * <LI>LU Decomposition of rectangular matrices.
 * <LI>QR Decomposition of rectangular matrices.
 * <LI>Singular Value Decomposition of rectangular matrices.
 * <LI>Eigenvalue Decomposition of both symmetric and nonsymmetric square matrices.
 * </UL>
 * <DL>
 * <DT><B>Example of use:</B></DT>
 * <P>
 * <DD>Solve a linear system A x = b and compute the residual norm, ||b - A x||.
 * <P><PRE>
 * double[][] vals = {{1.,2.,3},{4.,5.,6.},{7.,8.,10.}};
 * Matrix A = new Matrix(vals);
 * Matrix b = Matrix.random(3,1);
 * Matrix x = A.solve(b);
 * Matrix r = A.times(x).minus(b);
 * double rnorm = r.normInf();
 * </PRE></DD>
 * </DL></text>
      <author>The MathWorks, Inc. and the National Institute of Standards and Technology.</author>
      <version>5 August 1998</version>
    </javadoc>
    <javadoc>
      <text>* Array for internal storage of elements.</text>
      <serial>internal array storage.</serial>
    </javadoc>
    <declaration type="double[][]" name="A" />
    <javadoc>
      <text>* Row and column dimensions.</text>
      <serial>row dimension.</serial>
      <serial>column dimension.</serial>
    </javadoc>
    <declaration type="int" name="m" />
    <javadoc>
      <text>* Construct an m-by-n matrix of zeros.</text>
      <param>m    Number of rows.</param>
      <param>n    Number of colums.</param>
    </javadoc>
    <method type="constructor" name="Matrix" startLine="82" endLine="86" />
    <javadoc>
      <text>* Construct an m-by-n constant matrix.</text>
      <param>m    Number of rows.</param>
      <param>n    Number of colums.</param>
      <param>s    Fill the matrix with this scalar value.</param>
    </javadoc>
    <method type="constructor" name="Matrix" startLine="94" endLine="103">
      <scope startLine="98" endLine="102">
        <scope startLine="99" endLine="101" />
      </scope>
    </method>
    <javadoc>
      <text>* Construct a matrix from a 2-D array.</text>
      <param>A    Two-dimensional array of doubles.</param>
      <exception>IllegalArgumentException All rows must have the same length</exception>
      <see>#constructWithCopy</see>
    </javadoc>
    <method type="constructor" name="Matrix" startLine="111" endLine="120">
      <scope startLine="114" endLine="118">
        <scope startLine="115" endLine="117" />
      </scope>
    </method>
    <javadoc>
      <text>* Construct a matrix quickly without checking arguments.</text>
      <param>A    Two-dimensional array of doubles.</param>
      <param>m    Number of rows.</param>
      <param>n    Number of colums.</param>
    </javadoc>
    <method type="constructor" name="Matrix" startLine="128" endLine="132" />
    <javadoc>
      <text>* Construct a matrix from a one-dimensional packed array</text>
      <param>vals One-dimensional array of doubles, packed by columns (ala Fortran).</param>
      <param>m    Number of rows.</param>
      <exception>IllegalArgumentException Array length must be a multiple of m.</exception>
    </javadoc>
    <method type="constructor" name="Matrix" startLine="140" endLine="152">
      <scope startLine="143" endLine="145" />
      <scope startLine="147" endLine="151">
        <scope startLine="148" endLine="150" />
      </scope>
    </method>
    <javadoc>
      <text>* Construct a matrix from a copy of a 2-D array.</text>
      <param>A    Two-dimensional array of doubles.</param>
      <exception>IllegalArgumentException All rows must have the same length</exception>
    </javadoc>
    <method type="Matrix" name="constructWithCopy" startLine="163" endLine="178">
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="168" endLine="176">
        <scope startLine="169" endLine="172" />
        <scope startLine="173" endLine="175" />
      </scope>
    </method>
    <javadoc>
      <text>* Make a deep copy of a matrix</text>
    </javadoc>
    <method type="Matrix" name="copy" startLine="183" endLine="192">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="186" endLine="190">
        <scope startLine="187" endLine="189" />
      </scope>
    </method>
    <javadoc>
      <text>* Clone the Matrix object.</text>
    </javadoc>
    <method type="Object" name="clone" startLine="197" endLine="199" />
    <javadoc>
      <text>* Access the internal two-dimensional array.</text>
      <return>Pointer to the two-dimensional array of matrix elements.</return>
    </javadoc>
    <method type="double[][]" name="getArray" startLine="205" endLine="207" />
    <javadoc>
      <text>* Copy the internal two-dimensional array.</text>
      <return>Two-dimensional array copy of matrix elements.</return>
    </javadoc>
    <method type="double[][]" name="getArrayCopy" startLine="213" endLine="221">
      <declaration type="double[][]" name="C" />
      <scope startLine="215" endLine="219">
        <scope startLine="216" endLine="218" />
      </scope>
    </method>
    <javadoc>
      <text>* Make a one-dimensional column packed copy of the internal array.</text>
      <return>Matrix elements packed in a one-dimensional array by columns.</return>
    </javadoc>
    <method type="double[]" name="getColumnPackedCopy" startLine="227" endLine="235">
      <declaration type="double[]" name="vals" />
      <scope startLine="229" endLine="233">
        <scope startLine="230" endLine="232" />
      </scope>
    </method>
    <javadoc>
      <text>* Make a one-dimensional row packed copy of the internal array.</text>
      <return>Matrix elements packed in a one-dimensional array by rows.</return>
    </javadoc>
    <method type="double[]" name="getRowPackedCopy" startLine="241" endLine="249">
      <declaration type="double[]" name="vals" />
      <scope startLine="243" endLine="247">
        <scope startLine="244" endLine="246" />
      </scope>
    </method>
    <javadoc>
      <text>* Get row dimension.</text>
      <return>m, the number of rows.</return>
    </javadoc>
    <method type="int" name="getRowDimension" startLine="255" endLine="257" />
    <javadoc>
      <text>* Get column dimension.</text>
      <return>n, the number of columns.</return>
    </javadoc>
    <method type="int" name="getColumnDimension" startLine="263" endLine="265" />
    <javadoc>
      <text>* Get a single element.</text>
      <param>i    Row index.</param>
      <param>j    Column index.</param>
      <return>A(i,j)</return>
      <exception>ArrayIndexOutOfBoundsException</exception>
    </javadoc>
    <method type="double" name="get" startLine="274" endLine="276" />
    <javadoc>
      <text>* Get a submatrix.</text>
      <param>i0   Initial row index</param>
      <param>i1   Final row index</param>
      <param>j0   Initial column index</param>
      <param>j1   Final column index</param>
      <return>A(i0:i1,j0:j1)</return>
      <exception>ArrayIndexOutOfBoundsException Submatrix indices</exception>
    </javadoc>
    <method type="Matrix" name="getMatrix" startLine="287" endLine="300">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="B" />
      <scope startLine="290" endLine="296">
        <scope startLine="291" endLine="295">
          <scope startLine="292" endLine="294" />
        </scope>
      </scope>
      <scope startLine="296" endLine="298" />
    </method>
    <javadoc>
      <text>* Get a submatrix.</text>
      <param>r    Array of row indices.</param>
      <param>c    Array of column indices.</param>
      <return>A(r(:),c(:))</return>
      <exception>ArrayIndexOutOfBoundsException Submatrix indices</exception>
    </javadoc>
    <method type="Matrix" name="getMatrix" startLine="309" endLine="322">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="B" />
      <scope startLine="312" endLine="318">
        <scope startLine="313" endLine="317">
          <scope startLine="314" endLine="316" />
        </scope>
      </scope>
      <scope startLine="318" endLine="320" />
    </method>
    <javadoc>
      <text>* Get a submatrix.</text>
      <param>i0   Initial row index</param>
      <param>i1   Final row index</param>
      <param>c    Array of column indices.</param>
      <return>A(i0:i1,c(:))</return>
      <exception>ArrayIndexOutOfBoundsException Submatrix indices</exception>
    </javadoc>
    <method type="Matrix" name="getMatrix" startLine="332" endLine="345">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="B" />
      <scope startLine="335" endLine="341">
        <scope startLine="336" endLine="340">
          <scope startLine="337" endLine="339" />
        </scope>
      </scope>
      <scope startLine="341" endLine="343" />
    </method>
    <javadoc>
      <text>* Get a submatrix.</text>
      <param>r    Array of row indices.</param>
      <param>j0   Initial column index</param>
      <param>j1   Final column index</param>
      <return>A(r(:),j0:j1)</return>
      <exception>ArrayIndexOutOfBoundsException Submatrix indices</exception>
    </javadoc>
    <method type="Matrix" name="getMatrix" startLine="355" endLine="368">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="B" />
      <scope startLine="358" endLine="364">
        <scope startLine="359" endLine="363">
          <scope startLine="360" endLine="362" />
        </scope>
      </scope>
      <scope startLine="364" endLine="366" />
    </method>
    <javadoc>
      <text>* Set a single element.</text>
      <param>i    Row index.</param>
      <param>j    Column index.</param>
      <param>s    A(i,j).</param>
      <exception>ArrayIndexOutOfBoundsException</exception>
    </javadoc>
    <method type="void" name="set" startLine="377" endLine="379" />
    <javadoc>
      <text>* Set a submatrix.</text>
      <param>i0   Initial row index</param>
      <param>i1   Final row index</param>
      <param>j0   Initial column index</param>
      <param>j1   Final column index</param>
      <param>X    A(i0:i1,j0:j1)</param>
      <exception>ArrayIndexOutOfBoundsException Submatrix indices</exception>
    </javadoc>
    <method type="void" name="setMatrix" startLine="390" endLine="400">
      <scope startLine="391" endLine="397">
        <scope startLine="392" endLine="396">
          <scope startLine="393" endLine="395" />
        </scope>
      </scope>
      <scope startLine="397" endLine="399" />
    </method>
    <javadoc>
      <text>* Set a submatrix.</text>
      <param>r    Array of row indices.</param>
      <param>c    Array of column indices.</param>
      <param>X    A(r(:),c(:))</param>
      <exception>ArrayIndexOutOfBoundsException Submatrix indices</exception>
    </javadoc>
    <method type="void" name="setMatrix" startLine="409" endLine="419">
      <scope startLine="410" endLine="416">
        <scope startLine="411" endLine="415">
          <scope startLine="412" endLine="414" />
        </scope>
      </scope>
      <scope startLine="416" endLine="418" />
    </method>
    <javadoc>
      <text>* Set a submatrix.</text>
      <param>r    Array of row indices.</param>
      <param>j0   Initial column index</param>
      <param>j1   Final column index</param>
      <param>X    A(r(:),j0:j1)</param>
      <exception>ArrayIndexOutOfBoundsException Submatrix indices</exception>
    </javadoc>
    <method type="void" name="setMatrix" startLine="429" endLine="439">
      <scope startLine="430" endLine="436">
        <scope startLine="431" endLine="435">
          <scope startLine="432" endLine="434" />
        </scope>
      </scope>
      <scope startLine="436" endLine="438" />
    </method>
    <javadoc>
      <text>* Set a submatrix.</text>
      <param>i0   Initial row index</param>
      <param>i1   Final row index</param>
      <param>c    Array of column indices.</param>
      <param>X    A(i0:i1,c(:))</param>
      <exception>ArrayIndexOutOfBoundsException Submatrix indices</exception>
    </javadoc>
    <method type="void" name="setMatrix" startLine="449" endLine="459">
      <scope startLine="450" endLine="456">
        <scope startLine="451" endLine="455">
          <scope startLine="452" endLine="454" />
        </scope>
      </scope>
      <scope startLine="456" endLine="458" />
    </method>
    <javadoc>
      <text>* Matrix transpose.</text>
      <return>A'</return>
    </javadoc>
    <method type="Matrix" name="transpose" startLine="465" endLine="474">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="468" endLine="472">
        <scope startLine="469" endLine="471" />
      </scope>
    </method>
    <javadoc>
      <text>* One norm</text>
      <return>maximum column sum.</return>
    </javadoc>
    <method type="double" name="norm1" startLine="480" endLine="490">
      <declaration type="double" name="f" />
      <scope startLine="482" endLine="488">
        <declaration type="double" name="s" />
        <scope startLine="484" endLine="486" />
      </scope>
    </method>
    <javadoc>
      <text>* Two norm</text>
      <return>maximum singular value.</return>
    </javadoc>
    <method type="double" name="norm2" startLine="496" endLine="498" />
    <javadoc>
      <text>* Infinity norm</text>
      <return>maximum row sum.</return>
    </javadoc>
    <method type="double" name="normInf" startLine="504" endLine="514">
      <declaration type="double" name="f" />
      <scope startLine="506" endLine="512">
        <declaration type="double" name="s" />
        <scope startLine="508" endLine="510" />
      </scope>
    </method>
    <javadoc>
      <text>* Frobenius norm</text>
      <return>sqrt of sum of squares of all elements.</return>
    </javadoc>
    <method type="double" name="normF" startLine="520" endLine="528">
      <declaration type="double" name="f" />
      <scope startLine="522" endLine="526">
        <scope startLine="523" endLine="525" />
      </scope>
    </method>
    <javadoc>
      <text>* Unary minus</text>
      <return>-A</return>
    </javadoc>
    <method type="Matrix" name="uminus" startLine="534" endLine="543">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="537" endLine="541">
        <scope startLine="538" endLine="540" />
      </scope>
    </method>
    <javadoc>
      <text>* C = A + B</text>
      <param>B    another matrix</param>
      <return>A + B</return>
    </javadoc>
    <method type="Matrix" name="plus" startLine="550" endLine="560">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="554" endLine="558">
        <scope startLine="555" endLine="557" />
      </scope>
    </method>
    <javadoc>
      <text>* A = A + B</text>
      <param>B    another matrix</param>
      <return>A + B</return>
    </javadoc>
    <method type="Matrix" name="plusEquals" startLine="567" endLine="575">
      <scope startLine="569" endLine="573">
        <scope startLine="570" endLine="572" />
      </scope>
    </method>
    <javadoc>
      <text>* C = A - B</text>
      <param>B    another matrix</param>
      <return>A - B</return>
    </javadoc>
    <method type="Matrix" name="minus" startLine="582" endLine="592">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="586" endLine="590">
        <scope startLine="587" endLine="589" />
      </scope>
    </method>
    <javadoc>
      <text>* A = A - B</text>
      <param>B    another matrix</param>
      <return>A - B</return>
    </javadoc>
    <method type="Matrix" name="minusEquals" startLine="599" endLine="607">
      <scope startLine="601" endLine="605">
        <scope startLine="602" endLine="604" />
      </scope>
    </method>
    <javadoc>
      <text>* Element-by-element multiplication, C = A.*B</text>
      <param>B    another matrix</param>
      <return>A.*B</return>
    </javadoc>
    <method type="Matrix" name="arrayTimes" startLine="614" endLine="624">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="618" endLine="622">
        <scope startLine="619" endLine="621" />
      </scope>
    </method>
    <javadoc>
      <text>* Element-by-element multiplication in place, A = A.*B</text>
      <param>B    another matrix</param>
      <return>A.*B</return>
    </javadoc>
    <method type="Matrix" name="arrayTimesEquals" startLine="631" endLine="639">
      <scope startLine="633" endLine="637">
        <scope startLine="634" endLine="636" />
      </scope>
    </method>
    <javadoc>
      <text>* Element-by-element right division, C = A./B</text>
      <param>B    another matrix</param>
      <return>A./B</return>
    </javadoc>
    <method type="Matrix" name="arrayRightDivide" startLine="646" endLine="656">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="650" endLine="654">
        <scope startLine="651" endLine="653" />
      </scope>
    </method>
    <javadoc>
      <text>* Element-by-element right division in place, A = A./B</text>
      <param>B    another matrix</param>
      <return>A./B</return>
    </javadoc>
    <method type="Matrix" name="arrayRightDivideEquals" startLine="663" endLine="671">
      <scope startLine="665" endLine="669">
        <scope startLine="666" endLine="668" />
      </scope>
    </method>
    <javadoc>
      <text>* Element-by-element left division, C = A.\B</text>
      <param>B    another matrix</param>
      <return>A.\B</return>
    </javadoc>
    <method type="Matrix" name="arrayLeftDivide" startLine="678" endLine="688">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="682" endLine="686">
        <scope startLine="683" endLine="685" />
      </scope>
    </method>
    <javadoc>
      <text>* Element-by-element left division in place, A = A.\B</text>
      <param>B    another matrix</param>
      <return>A.\B</return>
    </javadoc>
    <method type="Matrix" name="arrayLeftDivideEquals" startLine="695" endLine="703">
      <scope startLine="697" endLine="701">
        <scope startLine="698" endLine="700" />
      </scope>
    </method>
    <javadoc>
      <text>* Multiply a matrix by a scalar, C = s*A</text>
      <param>s    scalar</param>
      <return>s*A</return>
    </javadoc>
    <method type="Matrix" name="times" startLine="710" endLine="719">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <scope startLine="713" endLine="717">
        <scope startLine="714" endLine="716" />
      </scope>
    </method>
    <javadoc>
      <text>* Multiply a matrix by a scalar in place, A = s*A</text>
      <param>s    scalar</param>
      <return>replace A by s*A</return>
    </javadoc>
    <method type="Matrix" name="timesEquals" startLine="726" endLine="733">
      <scope startLine="727" endLine="731">
        <scope startLine="728" endLine="730" />
      </scope>
    </method>
    <javadoc>
      <text>* Linear algebraic matrix multiplication, A * B</text>
      <param>B    another matrix</param>
      <return>Matrix product, A * B</return>
      <exception>IllegalArgumentException Matrix inner dimensions must agree.</exception>
    </javadoc>
    <method type="Matrix" name="times" startLine="741" endLine="762">
      <scope startLine="742" endLine="744" />
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="C" />
      <declaration type="double[]" name="Bcolj" />
      <scope startLine="748" endLine="760">
        <scope startLine="749" endLine="751" />
        <scope startLine="752" endLine="759">
          <declaration type="double[]" name="Arowi" />
          <declaration type="double" name="s" />
          <scope startLine="755" endLine="757" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* LU Decomposition</text>
      <return>LUDecomposition</return>
      <see>LUDecomposition</see>
    </javadoc>
    <method type="LUDecomposition" name="lu" startLine="769" endLine="771" />
    <javadoc>
      <text>* QR Decomposition</text>
      <return>QRDecomposition</return>
      <see>QRDecomposition</see>
    </javadoc>
    <method type="QRDecomposition" name="qr" startLine="778" endLine="780" />
    <javadoc>
      <text>* Cholesky Decomposition</text>
      <return>CholeskyDecomposition</return>
      <see>CholeskyDecomposition</see>
    </javadoc>
    <method type="CholeskyDecomposition" name="chol" startLine="787" endLine="789" />
    <javadoc>
      <text>* Singular Value Decomposition</text>
      <return>SingularValueDecomposition</return>
      <see>SingularValueDecomposition</see>
    </javadoc>
    <method type="SingularValueDecomposition" name="svd" startLine="796" endLine="798" />
    <javadoc>
      <text>* Eigenvalue Decomposition</text>
      <return>EigenvalueDecomposition</return>
      <see>EigenvalueDecomposition</see>
    </javadoc>
    <method type="EigenvalueDecomposition" name="eig" startLine="805" endLine="807" />
    <javadoc>
      <text>* Solve A*X = B</text>
      <param>B    right hand side</param>
      <return>solution if A is square, least squares solution otherwise</return>
    </javadoc>
    <method type="Matrix" name="solve" startLine="814" endLine="817" />
    <javadoc>
      <text>* Solve X*A = B, which is also A'*X' = B'</text>
      <param>B    right hand side</param>
      <return>solution if A is square, least squares solution otherwise.</return>
    </javadoc>
    <method type="Matrix" name="solveTranspose" startLine="824" endLine="826" />
    <javadoc>
      <text>* Matrix inverse or pseudoinverse</text>
      <return>inverse(A) if A is square, pseudoinverse otherwise.</return>
    </javadoc>
    <method type="Matrix" name="inverse" startLine="832" endLine="834" />
    <javadoc>
      <text>* Matrix determinant</text>
      <return>determinant</return>
    </javadoc>
    <method type="double" name="det" startLine="840" endLine="842" />
    <javadoc>
      <text>* Matrix rank</text>
      <return>effective numerical rank, obtained from SVD.</return>
    </javadoc>
    <method type="int" name="rank" startLine="848" endLine="850" />
    <javadoc>
      <text>* Matrix condition (2 norm)</text>
      <return>ratio of largest to smallest singular value.</return>
    </javadoc>
    <method type="double" name="cond" startLine="856" endLine="858" />
    <javadoc>
      <text>* Matrix trace.</text>
      <return>sum of the diagonal elements.</return>
    </javadoc>
    <method type="double" name="trace" startLine="864" endLine="870">
      <declaration type="double" name="t" />
      <scope startLine="866" endLine="868" />
    </method>
    <javadoc>
      <text>* Generate matrix with random elements</text>
      <param>m    Number of rows.</param>
      <param>n    Number of colums.</param>
      <return>An m-by-n matrix with uniformly distributed random elements.</return>
    </javadoc>
    <method type="Matrix" name="random" startLine="878" endLine="887">
      <declaration type="Matrix" name="A" />
      <declaration type="double[][]" name="X" />
      <scope startLine="881" endLine="885">
        <scope startLine="882" endLine="884" />
      </scope>
    </method>
    <javadoc>
      <text>* Generate identity matrix</text>
      <param>m    Number of rows.</param>
      <param>n    Number of colums.</param>
      <return>An m-by-n matrix with ones on the diagonal and zeros elsewhere.</return>
    </javadoc>
    <method type="Matrix" name="identity" startLine="895" endLine="904">
      <declaration type="Matrix" name="A" />
      <declaration type="double[][]" name="X" />
      <scope startLine="898" endLine="902">
        <scope startLine="899" endLine="901" />
      </scope>
    </method>
    <javadoc>
      <text>* Print the matrix to stdout.   Line the elements up in columns
 * with a Fortran-like 'Fw.d' style format.</text>
      <param>w    Column width.</param>
      <param>d    Number of digits after the decimal.</param>
    </javadoc>
    <method type="void" name="print" startLine="913" endLine="914" />
    <javadoc>
      <text>* Print the matrix to the output stream.   Line the elements up in
 * columns with a Fortran-like 'Fw.d' style format.</text>
      <param>output Output stream.</param>
      <param>w      Column width.</param>
      <param>d      Number of digits after the decimal.</param>
    </javadoc>
    <method type="void" name="print" startLine="923" endLine="931">
      <declaration type="DecimalFormat" name="format" />
    </method>
    <javadoc>
      <text>* Print the matrix to stdout.  Line the elements up in columns.
 * Use the format object, and right justify within columns of width
 * characters.
 * Note that is the matrix is to be read back in, you probably will want
 * to use a NumberFormat that is set to US Locale.</text>
      <param>format A  Formatting object for individual elements.</param>
      <param>width     Field width for each column.</param>
      <see>java.text.DecimalFormat#setDecimalFormatSymbols</see>
    </javadoc>
    <method type="void" name="print" startLine="943" endLine="944" />
    <javadoc>
      <text>* Print the matrix to the output stream.  Line the elements up in columns.
 * Use the format object, and right justify within columns of width
 * characters.
 * Note that is the matrix is to be read back in, you probably will want
 * to use a NumberFormat that is set to US Locale.</text>
      <param>output the output stream.</param>
      <param>format A formatting object to format the matrix elements</param>
      <param>width  Column width.</param>
      <see>java.text.DecimalFormat#setDecimalFormatSymbols</see>
    </javadoc>
    <method type="void" name="print" startLine="962" endLine="975">
      <scope startLine="964" endLine="973">
        <scope startLine="965" endLine="971">
          <declaration type="String" name="s" />
          <declaration type="int" name="padding" />
        </scope>
        <comment>format the number</comment>
        <comment>At _least_ 1 space</comment>
      </scope>
      <comment>start on new line.</comment>
      <comment>end with blank line.</comment>
    </method>
    <javadoc>
      <text>* Read a matrix from a stream.  The format is the same the print method,
 * so printed matrices can be read back in (provided they were printed using
 * US Locale).  Elements are separated by
 * whitespace, all the elements for each row appear on a single line,
 * the last row is followed by a blank line.</text>
      <param>input the input stream.</param>
    </javadoc>
    <method type="Matrix" name="read" startLine="985" endLine="1030">
      <declaration type="StreamTokenizer" name="tokenizer" />
      <declaration type="java.util.Vector<Double>" name="vD" />
      <scope startLine="1004" endLine="1006">
        <comment>Read & store 1st row.</comment>
      </scope>
      <declaration type="int" name="n" />
      <declaration type="double[]" name="row" />
      <declaration type="java.util.Vector<double[]>[]" name="v" />
      <scope startLine="1014" endLine="1025">
        <declaration type="int" name="j" />
        <scope startLine="1018" endLine="1022" />
        <comment>While non-empty lines</comment>
      </scope>
      <declaration type="int" name="m" />
      <declaration type="double[][][]" name="A" />
      <comment>Although StreamTokenizer will parse numbers, it doesn't recognize</comment>
      <comment>scientific notation (E or D); however, Double.valueOf does.</comment>
      <comment>The strategy here is to disable StreamTokenizer's number parsing.</comment>
      <comment>We'll only get whitespace delimited words, EOL's and EOF's.</comment>
      <comment>These words should all be numbers, for Double.valueOf to parse.</comment>
      <comment>Ignore initial empty lines</comment>
      <comment>Now we've got the number of columns!</comment>
      <comment>extract the elements of the 1st row.</comment>
      <comment>Start storing rows instead of columns.</comment>
      <comment>Now we've got the number of rows.</comment>
      <comment>copy the rows out of the vector</comment>
    </method>
    <javadoc>
      <text>* Check if size(A) == size(B)</text>
    </javadoc>
    <method type="void" name="checkMatrixDimensions" startLine="1039" endLine="1043">
      <scope startLine="1040" endLine="1042" />
    </method>
    <declaration type="long" name="serialVersionUID" />
    <comment>------------------------
Class variables
 ------------------------</comment>
    <comment>------------------------
Constructors
 ------------------------</comment>
    <comment>------------------------
Public Methods
 ------------------------</comment>
    <comment>DecimalFormat is a little disappointing coming from Fortran or C's printf.</comment>
    <comment>Since it doesn't pad on the left, the elements will come out different</comment>
    <comment>widths.  Consequently, we'll pass the desired column width in as an</comment>
    <comment>argument and do the extra padding ourselves.</comment>
    <comment>------------------------
Private Methods
 ------------------------</comment>
  </class>
</source>
