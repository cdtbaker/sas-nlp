<?xml version="1.0" encoding="UTF-8"?>
<source package="Jama">
  <import name="Jama.util.*" />
  <class name="EigenvalueDecomposition" startLine="4">
    <implements name="java.io.Serializable" />
    <javadoc>
      <text>* Eigenvalues and eigenvectors of a real matrix. 
 * <P>
 * If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
 * diagonal and the eigenvector matrix V is orthogonal.
 * I.e. A = V.times(D.times(V.transpose())) and 
 * V.times(V.transpose()) equals the identity matrix.
 * <P>
 * If A is not symmetric, then the eigenvalue matrix D is block diagonal
 * with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
 * lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
 * columns of V represent the eigenvectors in the sense that A*V = V*D,
 * i.e. A.times(V) equals V.times(D).  The matrix V may be badly
 * conditioned, or even singular, so the validity of the equation
 * A = V*D*inverse(V) depends upon V.cond().</text>
    </javadoc>
    <javadoc>
      <text>* Row and column dimension (square matrix).</text>
      <serial>matrix dimension.</serial>
    </javadoc>
    <declaration type="int" name="n" />
    <javadoc>
      <text>* Symmetry flag.</text>
      <serial>internal symmetry flag.</serial>
    </javadoc>
    <declaration type="boolean" name="issymmetric" />
    <javadoc>
      <text>* Arrays for internal storage of eigenvalues.</text>
      <serial>internal storage of eigenvalues.</serial>
    </javadoc>
    <declaration type="double[]" name="d" />
    <javadoc>
      <text>* Array for internal storage of eigenvectors.</text>
      <serial>internal storage of eigenvectors.</serial>
    </javadoc>
    <declaration type="double[][]" name="V" />
    <javadoc>
      <text>* Array for internal storage of nonsymmetric Hessenberg form.</text>
      <serial>internal storage of nonsymmetric Hessenberg form.</serial>
    </javadoc>
    <declaration type="double[][]" name="H" />
    <javadoc>
      <text>* Working storage for nonsymmetric algorithm.</text>
      <serial>working storage for nonsymmetric algorithm.</serial>
    </javadoc>
    <declaration type="double[]" name="ort" />
    <method type="void" name="tred2" startLine="62" endLine="175">
      <scope startLine="69" endLine="71" />
      <scope startLine="75" endLine="143">
        <declaration type="double" name="scale" />
        <declaration type="double" name="h" />
        <scope startLine="81" endLine="83" />
        <scope startLine="84" endLine="91">
          <scope startLine="86" endLine="90" />
        </scope>
        <scope startLine="91" endLine="141">
          <scope startLine="95" endLine="98" />
          <declaration type="double" name="f" />
          <declaration type="double" name="g" />
          <scope startLine="101" endLine="103" />
          <scope startLine="107" endLine="109" />
          <scope startLine="113" endLine="122">
            <scope startLine="117" endLine="120" />
          </scope>
          <scope startLine="124" endLine="127" />
          <declaration type="double" name="hh" />
          <scope startLine="129" endLine="131" />
          <scope startLine="132" endLine="140">
            <scope startLine="135" endLine="137" />
          </scope>
        </scope>
        <comment>Scale to avoid under/overflow.</comment>
        <comment>Generate Householder vector.</comment>
        <comment>Apply similarity transformation to remaining columns.</comment>
      </scope>
      <scope startLine="147" endLine="168">
        <declaration type="double" name="h" />
        <scope startLine="151" endLine="164">
          <scope startLine="152" endLine="154" />
          <scope startLine="155" endLine="163">
            <declaration type="double" name="g" />
            <scope startLine="157" endLine="159" />
            <scope startLine="160" endLine="162" />
          </scope>
        </scope>
        <scope startLine="165" endLine="167" />
      </scope>
      <scope startLine="169" endLine="172" />
      <comment>This is derived from the Algol procedures tred2 by</comment>
      <comment>Bowdler, Martin, Reinsch, and Wilkinson, Handbook for</comment>
      <comment>Auto. Comp., Vol.ii-Linear Algebra, and the corresponding</comment>
      <comment>Fortran subroutine in EISPACK.</comment>
      <comment>Householder reduction to tridiagonal form.</comment>
      <comment>Accumulate transformations.</comment>
    </method>
    <method type="void" name="tql2" startLine="179" endLine="295">
      <scope startLine="186" endLine="188" />
      <declaration type="double" name="f" />
      <declaration type="double" name="tst1" />
      <declaration type="double" name="eps" />
      <scope startLine="194" endLine="272">
        <declaration type="int" name="m" />
        <scope startLine="200" endLine="205">
          <scope startLine="201" endLine="203" />
        </scope>
        <scope startLine="210" endLine="269">
          <declaration type="int" name="iter" />
          <scope startLine="212" endLine="268">
            <declaration type="double" name="g" />
            <declaration type="double" name="p" />
            <declaration type="double" name="r" />
            <scope startLine="220" endLine="222" />
            <declaration type="double" name="dl1" />
            <declaration type="double" name="h" />
            <scope startLine="227" endLine="229" />
            <declaration type="double" name="c" />
            <declaration type="double" name="c2" />
            <declaration type="double" name="c3" />
            <declaration type="double" name="el1" />
            <declaration type="double" name="s" />
            <declaration type="double" name="s2" />
            <scope startLine="241" endLine="261">
              <scope startLine="256" endLine="260" />
            </scope>
          </scope>
        </scope>
        <comment>Find small subdiagonal element</comment>
        <comment>If m == l, d[l] is an eigenvalue,</comment>
        <comment>otherwise, iterate.</comment>
        <comment>(Could check iteration count here.)</comment>
        <comment>Compute implicit shift</comment>
        <comment>Implicit QL transformation.</comment>
        <comment>Accumulate transformation.</comment>
        <comment>Check for convergence.</comment>
      </scope>
      <scope startLine="276" endLine="294">
        <declaration type="int" name="k" />
        <declaration type="double" name="p" />
        <scope startLine="279" endLine="284">
          <scope startLine="280" endLine="283" />
        </scope>
        <scope startLine="285" endLine="293">
          <scope startLine="288" endLine="292" />
        </scope>
      </scope>
      <comment>This is derived from the Algol procedures tql2, by</comment>
      <comment>Bowdler, Martin, Reinsch, and Wilkinson, Handbook for</comment>
      <comment>Auto. Comp., Vol.ii-Linear Algebra, and the corresponding</comment>
      <comment>Fortran subroutine in EISPACK.</comment>
      <comment>Sort eigenvalues and corresponding vectors.</comment>
    </method>
    <method type="void" name="orthes" startLine="299" endLine="388">
      <declaration type="int" name="low" />
      <declaration type="int" name="high" />
      <scope startLine="309" endLine="360">
        <declaration type="double" name="scale" />
        <scope startLine="314" endLine="316" />
        <scope startLine="317" endLine="359">
          <declaration type="double" name="h" />
          <scope startLine="322" endLine="325" />
          <declaration type="double" name="g" />
          <scope startLine="327" endLine="329" />
          <scope startLine="336" endLine="345">
            <declaration type="double" name="f" />
            <scope startLine="338" endLine="340" />
            <scope startLine="342" endLine="344" />
          </scope>
          <scope startLine="347" endLine="356">
            <declaration type="double" name="f" />
            <scope startLine="349" endLine="351" />
            <scope startLine="353" endLine="355" />
          </scope>
        </scope>
        <comment>Scale column.</comment>
        <comment>Compute Householder transformation.</comment>
        <comment>Apply Householder similarity transformation</comment>
        <comment>H = (I-u*u'/h)*H*(I-u*u')/h)</comment>
      </scope>
      <scope startLine="364" endLine="368">
        <scope startLine="365" endLine="367" />
      </scope>
      <scope startLine="370" endLine="387">
        <scope startLine="371" endLine="386">
          <scope startLine="372" endLine="374" />
          <scope startLine="375" endLine="385">
            <declaration type="double" name="g" />
            <scope startLine="377" endLine="379" />
            <scope startLine="382" endLine="384" />
          </scope>
        </scope>
        <comment>Double division avoids possible underflow</comment>
      </scope>
      <comment>This is derived from the Algol procedures orthes and ortran,</comment>
      <comment>by Martin and Wilkinson, Handbook for Auto. Comp.,</comment>
      <comment>Vol.ii-Linear Algebra, and the corresponding</comment>
      <comment>Fortran subroutines in EISPACK.</comment>
      <comment>Accumulate transformations (Algol's ortran).</comment>
    </method>
    <declaration type="double" name="cdivr" />
    <method type="void" name="cdiv" startLine="394" endLine="407">
      <declaration type="double" name="r" />
      <scope startLine="396" endLine="401" />
      <scope startLine="401" endLine="406" />
    </method>
    <method type="void" name="hqr2" startLine="412" endLine="850">
      <declaration type="int" name="nn" />
      <declaration type="int" name="n" />
      <declaration type="int" name="low" />
      <declaration type="int" name="high" />
      <declaration type="double" name="eps" />
      <declaration type="double" name="exshift" />
      <declaration type="double" name="p" />
      <declaration type="double" name="norm" />
      <scope startLine="432" endLine="440">
        <scope startLine="433" endLine="436" />
        <scope startLine="437" endLine="439" />
      </scope>
      <declaration type="int" name="iter" />
      <scope startLine="445" endLine="692">
        <declaration type="int" name="l" />
        <scope startLine="450" endLine="459">
          <scope startLine="452" endLine="454" />
          <scope startLine="455" endLine="457" />
        </scope>
        <scope startLine="464" endLine="473" />
        <scope startLine="473" endLine="542">
          <scope startLine="484" endLine="531">
            <scope startLine="485" endLine="487" />
            <scope startLine="487" endLine="489" />
            <scope startLine="492" endLine="494" />
            <scope startLine="507" endLine="511" />
            <scope startLine="515" endLine="519" />
            <scope startLine="523" endLine="527" />
          </scope>
          <scope startLine="531" endLine="536" />
        </scope>
        <scope startLine="542" endLine="691">
          <scope startLine="549" endLine="552" />
          <scope startLine="556" endLine="564">
            <scope startLine="558" endLine="560" />
          </scope>
          <scope startLine="568" endLine="583">
            <scope startLine="571" endLine="582">
              <scope startLine="573" endLine="575" />
              <scope startLine="577" endLine="579" />
            </scope>
          </scope>
          <declaration type="int" name="m" />
          <scope startLine="590" endLine="610">
            <scope startLine="601" endLine="603" />
            <scope startLine="606" endLine="608" />
          </scope>
          <scope startLine="612" endLine="617">
            <scope startLine="614" endLine="616" />
          </scope>
          <scope startLine="622" endLine="690">
            <declaration type="boolean" name="notlast" />
            <scope startLine="624" endLine="635">
              <scope startLine="629" endLine="631" />
            </scope>
            <scope startLine="638" endLine="640" />
            <scope startLine="641" endLine="689">
              <scope startLine="642" endLine="644" />
              <scope startLine="644" endLine="646" />
              <scope startLine="656" endLine="664">
                <scope startLine="658" endLine="661" />
              </scope>
              <scope startLine="668" endLine="676">
                <scope startLine="670" endLine="673" />
              </scope>
              <scope startLine="680" endLine="688">
                <scope startLine="682" endLine="685" />
              </scope>
            </scope>
          </scope>
        </scope>
        <comment>Look for single small sub-diagonal element</comment>
        <comment>Check for convergence</comment>
        <comment>One root found</comment>
        <comment>Two roots found</comment>
        <comment>Real pair</comment>
        <comment>Row modification</comment>
        <comment>Column modification</comment>
        <comment>Accumulate transformations</comment>
        <comment>Complex pair</comment>
        <comment>No convergence yet</comment>
        <comment>Form shift</comment>
        <comment>Wilkinson's original ad hoc shift</comment>
        <comment>MATLAB's new ad hoc shift</comment>
        <comment>(Could check iteration count here.)</comment>
        <comment>Look for two consecutive small sub-diagonal elements</comment>
        <comment>Double QR step involving rows l:n and columns m:n</comment>
        <comment>Row modification</comment>
        <comment>Column modification</comment>
        <comment>Accumulate transformations</comment>
        <comment>(s != 0)</comment>
        <comment>k loop</comment>
        <comment>check convergence</comment>
        <comment>while (n >= low)</comment>
      </scope>
      <scope startLine="696" endLine="698" />
      <scope startLine="700" endLine="827">
        <scope startLine="706" endLine="755">
          <declaration type="int" name="l" />
          <scope startLine="709" endLine="751">
            <scope startLine="712" endLine="714" />
            <scope startLine="715" endLine="718" />
            <scope startLine="718" endLine="750">
              <scope startLine="720" endLine="729">
                <scope startLine="721" endLine="723" />
                <scope startLine="723" endLine="725" />
              </scope>
              <scope startLine="729" endLine="740">
                <scope startLine="735" endLine="737" />
                <scope startLine="737" endLine="739" />
              </scope>
              <scope startLine="745" endLine="749">
                <scope startLine="746" endLine="748" />
              </scope>
            </scope>
          </scope>
        </scope>
        <scope startLine="755" endLine="826">
          <declaration type="int" name="l" />
          <scope startLine="760" endLine="763" />
          <scope startLine="763" endLine="767" />
          <scope startLine="770" endLine="825">
            <declaration type="double" name="ra" />
            <scope startLine="774" endLine="777" />
            <scope startLine="780" endLine="784" />
            <scope startLine="784" endLine="824">
              <scope startLine="786" endLine="790" />
              <scope startLine="790" endLine="813">
                <scope startLine="798" endLine="801" />
                <scope startLine="805" endLine="808" />
                <scope startLine="808" endLine="812" />
              </scope>
              <scope startLine="818" endLine="823">
                <scope startLine="819" endLine="822" />
              </scope>
            </scope>
          </scope>
        </scope>
        <comment>Real vector</comment>
        <comment>Solve real equations</comment>
        <comment>Overflow control</comment>
        <comment>Complex vector</comment>
        <comment>Last vector component imaginary so matrix is triangular</comment>
        <comment>Solve complex equations</comment>
        <comment>Overflow control</comment>
      </scope>
      <scope startLine="831" endLine="837">
        <scope startLine="832" endLine="836">
          <scope startLine="833" endLine="835" />
        </scope>
      </scope>
      <scope startLine="841" endLine="849">
        <scope startLine="842" endLine="848">
          <scope startLine="844" endLine="846" />
        </scope>
      </scope>
      <comment>This is derived from the Algol procedure hqr2,</comment>
      <comment>by Martin and Wilkinson, Handbook for Auto. Comp.,</comment>
      <comment>Vol.ii-Linear Algebra, and the corresponding</comment>
      <comment>Fortran subroutine in EISPACK.</comment>
      <comment>Initialize</comment>
      <comment>Store roots isolated by balanc and compute matrix norm</comment>
      <comment>Outer loop over eigenvalue index</comment>
      <comment>Backsubstitute to find vectors of upper triangular form</comment>
      <comment>Vectors of isolated roots</comment>
      <comment>Back transformation to get eigenvectors of original matrix</comment>
    </method>
    <javadoc>
      <text>* Check for symmetry, then construct the eigenvalue decomposition
 * Structure to access D and V.</text>
      <param>Arg    Square matrix</param>
    </javadoc>
    <method type="constructor" name="EigenvalueDecomposition" startLine="862" endLine="905">
      <declaration type="double[][]" name="A" />
      <scope startLine="870" endLine="874">
        <scope startLine="871" endLine="873" />
      </scope>
      <scope startLine="876" endLine="889">
        <scope startLine="877" endLine="881">
          <scope startLine="878" endLine="880" />
        </scope>
        <comment>Tridiagonalize.</comment>
        <comment>Diagonalize.</comment>
      </scope>
      <scope startLine="889" endLine="904">
        <scope startLine="893" endLine="897">
          <scope startLine="894" endLine="896" />
        </scope>
        <comment>Reduce to Hessenberg form.</comment>
        <comment>Reduce Hessenberg to real Schur form.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Return the eigenvector matrix</text>
      <return>V</return>
    </javadoc>
    <method type="Matrix" name="getV" startLine="915" endLine="917" />
    <javadoc>
      <text>* Return the real parts of the eigenvalues</text>
      <return>real(diag(D))</return>
    </javadoc>
    <method type="double[]" name="getRealEigenvalues" startLine="923" endLine="925" />
    <javadoc>
      <text>* Return the imaginary parts of the eigenvalues</text>
      <return>imag(diag(D))</return>
    </javadoc>
    <method type="double[]" name="getImagEigenvalues" startLine="931" endLine="933" />
    <javadoc>
      <text>* Return the block diagonal eigenvalue matrix</text>
      <return>D</return>
    </javadoc>
    <method type="Matrix" name="getD" startLine="939" endLine="954">
      <declaration type="Matrix" name="X" />
      <declaration type="double[][]" name="D" />
      <scope startLine="942" endLine="952">
        <scope startLine="943" endLine="945" />
        <scope startLine="947" endLine="949" />
        <scope startLine="949" endLine="951" />
      </scope>
    </method>
    <declaration type="long" name="serialVersionUID" />
    <comment>------------------------
Class variables
 ------------------------</comment>
    <comment>------------------------
Private Methods
 ------------------------</comment>
    <comment>Symmetric Householder reduction to tridiagonal form.</comment>
    <comment>Symmetric tridiagonal QL algorithm.</comment>
    <comment>Nonsymmetric reduction to Hessenberg form.</comment>
    <comment>Complex scalar division.</comment>
    <comment>Nonsymmetric reduction from Hessenberg to real Schur form.</comment>
    <comment>------------------------
Constructor
 ------------------------</comment>
    <comment>------------------------
Public Methods
 ------------------------</comment>
  </class>
</source>
