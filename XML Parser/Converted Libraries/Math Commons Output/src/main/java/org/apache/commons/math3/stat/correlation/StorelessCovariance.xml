<?xml version="1.0" encoding="UTF-8"?>
<class name="StorelessCovariance">
  <javadoc>
    <text>Covariance implementation that does not require input data to be
 * stored in memory. The size of the covariance matrix is specified in the
 * constructor. Specific elements of the matrix are incrementally updated with
 * calls to incrementRow() or increment Covariance().
 * &lt;p&gt;This class is based on a paper written by Philippe P&amp;eacute;bay:
 * &lt;a href="http://prod.sandia.gov/techlib/access-control.cgi/2008/086212.pdf"&gt;
 * Formulas for Robust, One-Pass Parallel Computation of Covariances and
 * Arbitrary-Order Statistical Moments&lt;/a&gt;, 2008, Technical Report SAND2008-6212,
 * Sandia National Laboratories.&lt;/p&gt;
 * &lt;p&gt;Note: the underlying covariance matrix is symmetric, thus only the
 * upper triangular part of the matrix is stored and updated each increment.&lt;/p&gt;</text>
    <version>$Id: StorelessCovariance.java 1410238 2012-11-16 07:58:49Z luc $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>the square covariance matrix (upper triangular part)</text>
  </javadoc>
  <declaration type="StorelessBivariateCovariance[]" name="covMatrix" />
  <javadoc>
    <text>dimension of the square covariance matrix</text>
  </javadoc>
  <declaration type="int" name="dimension" />
  <javadoc>
    <text>Create a bias corrected covariance matrix with a given dimension.</text>
    <param>dim the dimension of the square covariance matrix</param>
  </javadoc>
  <method type="constructor" name="StorelessCovariance" />
  <javadoc>
    <text>Create a covariance matrix with a given number of rows and columns and the
 * indicated bias correction.</text>
    <param>dim the dimension of the covariance matrix</param>
    <param>biasCorrected if &lt;code&gt;true&lt;/code&gt; the covariance estimate is corrected
 * for bias, i.e. n-1 in the denominator, otherwise there is no bias correction,
 * i.e. n in the denominator.</param>
  </javadoc>
  <method type="constructor" name="StorelessCovariance" />
  <javadoc>
    <text>Initialize the internal two-dimensional array of{@link StorelessBivariateCovariance} instances.</text>
    <param>biasCorrected if the covariance estimate shall be corrected for bias</param>
  </javadoc>
  <method type="void" name="initializeMatrix">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns the index (i, j) translated into the one-dimensional
 * array used to store the upper triangular part of the symmetric
 * covariance matrix.</text>
    <param>i the row index</param>
    <param>j the column index</param>
    <return>the corresponding index in the matrix array</return>
  </javadoc>
  <method type="int" name="indexOf" />
  <javadoc>
    <text>Gets the element at index (i, j) from the covariance matrix</text>
    <param>i the row index</param>
    <param>j the column index</param>
    <return>the {@link StorelessBivariateCovariance} element at the given index</return>
  </javadoc>
  <method type="StorelessBivariateCovariance" name="getElement" />
  <javadoc>
    <text>Sets the covariance element at index (i, j) in the covariance matrix</text>
    <param>i the row index</param>
    <param>j the column index</param>
    <param>cov the {@link StorelessBivariateCovariance} element to be set</param>
  </javadoc>
  <method type="void" name="setElement" />
  <javadoc>
    <text>Get the covariance for an individual element of the covariance matrix.</text>
    <param>xIndex row index in the covariance matrix</param>
    <param>yIndex column index in the covariance matrix</param>
    <return>the covariance of the given element</return>
    <throws>NumberIsTooSmallException if the number of observations
 * in the cell is &amp;lt; 2</throws>
  </javadoc>
  <method type="double" name="getCovariance" />
  <javadoc>
    <text>Increment the covariance matrix with one row of data.</text>
    <param>data array representing one row of data.</param>
    <throws>DimensionMismatchException if the length of &lt;code&gt;rowData&lt;/code&gt;
 * does not match with the covariance matrix</throws>
  </javadoc>
  <method type="void" name="increment">
    <declaration type="int" name="length" />
    <scope />
    <scope>
      <scope />
    </scope>
    <comment>only update the upper triangular part of the covariance matrix</comment>
    <comment>as only these parts are actually stored</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <throws>NumberIsTooSmallException if the number of observations
 * in a cell is &amp;lt; 2</throws>
  </javadoc>
  <method type="RealMatrix" name="getCovarianceMatrix" />
  <javadoc>
    <text>Return the covariance matrix as two-dimensional array.</text>
    <return>a two-dimensional double array of covariance values</return>
    <throws>NumberIsTooSmallException if the number of observations
 * for a cell is &amp;lt; 2</throws>
  </javadoc>
  <method type="double[][]" name="getData">
    <declaration type="double[][]" name="data" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>This {@link Covariance} method is not supported by a {@link StorelessCovariance},
 * since the number of bivariate observations does not have to be the same for different
 * pairs of covariates - i.e., N as defined in {@link Covariance#getN()} is undefined.</text>
    <return>nothing as this implementation always throws a{@link MathUnsupportedOperationException}</return>
    <throws>MathUnsupportedOperationException in all cases</throws>
  </javadoc>
  <method type="int" name="getN" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
