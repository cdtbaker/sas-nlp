<?xml version="1.0" encoding="UTF-8"?>
<class name="PolynomialSplineFunction">
  <javadoc>
    <text>Represents a polynomial spline function.
 * &lt;p&gt;
 * A &lt;strong&gt;polynomial spline function&lt;/strong&gt; consists of a set of
 * &lt;i&gt;interpolating polynomials&lt;/i&gt; and an ascending array of domain
 * &lt;i&gt;knot points&lt;/i&gt;, determining the intervals over which the spline function
 * is defined by the constituent polynomials.  The polynomials are assumed to
 * have been computed to match the values of another function at the knot
 * points.  The value consistency constraints are not currently enforced by
 * &lt;code&gt;PolynomialSplineFunction&lt;/code&gt; itself, but are assumed to hold among
 * the polynomials and knot points passed to the constructor.&lt;/p&gt;
 * &lt;p&gt;
 * N.B.:  The polynomials in the &lt;code&gt;polynomials&lt;/code&gt; property must be
 * centered on the knot points to compute the spline function values.
 * See below.&lt;/p&gt;
 * &lt;p&gt;
 * The domain of the polynomial spline function is
 * &lt;code&gt;[smallest knot, largest knot]&lt;/code&gt;.  Attempts to evaluate the
 * function at values outside of this range generate IllegalArgumentExceptions.
 * &lt;/p&gt;
 * &lt;p&gt;
 * The value of the polynomial spline function for an argument &lt;code&gt;x&lt;/code&gt;
 * is computed as follows:
 * &lt;ol&gt;
 * &lt;li&gt;The knot array is searched to find the segment to which &lt;code&gt;x&lt;/code&gt;
 * belongs.  If &lt;code&gt;x&lt;/code&gt; is less than the smallest knot point or greater
 * than the largest one, an &lt;code&gt;IllegalArgumentException&lt;/code&gt;
 * is thrown.&lt;/li&gt;
 * &lt;li&gt; Let &lt;code&gt;j&lt;/code&gt; be the index of the largest knot point that is less
 * than or equal to &lt;code&gt;x&lt;/code&gt;.  The value returned is &lt;br&gt;
 * &lt;code&gt;polynomials[j](x - knot[j])&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;</text>
    <version>$Id: PolynomialSplineFunction.java 1455194 2013-03-11 15:45:54Z luc $</version>
  </javadoc>
  <javadoc>
    <text>Spline segment interval delimiters (knots).
 * Size is n + 1 for n segments.</text>
  </javadoc>
  <declaration type="double" name="knots" />
  <javadoc>
    <text>The polynomial functions that make up the spline.  The first element
 * determines the value of the spline over the first subinterval, the
 * second over the second, etc.   Spline function values are determined by
 * evaluating these functions at {@code (x - knot[i])} where i is the
 * knot segment to which x belongs.</text>
  </javadoc>
  <declaration type="PolynomialFunction" name="polynomials" />
  <javadoc>
    <text>Number of spline segments. It is equal to the number of polynomials and
 * to the number of partition points - 1.</text>
  </javadoc>
  <declaration type="int" name="n" />
  <javadoc>
    <text>Construct a polynomial spline function with the given segment delimiters
 * and interpolating polynomials.
 * The constructor copies both arrays and assigns the copies to the knots
 * and polynomials properties, respectively.</text>
    <param>knots Spline segment interval delimiters.</param>
    <param>polynomials Polynomial functions that make up the spline.</param>
    <throws>NullArgumentException if either of the input arrays is {@code null}.</throws>
    <throws>NumberIsTooSmallException if knots has length less than 2.</throws>
    <throws>DimensionMismatchException if {@code polynomials.length != knots.length - 1}.</throws>
    <throws>NonMonotonicSequenceException if the {@code knots} array is not strictly increasing.</throws>
  </javadoc>
  <method type="constructor" name="PolynomialSplineFunction">
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Compute the value for the function.
 * See {@link PolynomialSplineFunction} for details on the algorithm for
 * computing the value of the function.</text>
    <param>v Point for which the function value should be computed.</param>
    <return>the value.</return>
    <throws>OutOfRangeException if {@code v} is outside of the domain of the
 * spline function (smaller than the smallest knot point or larger than the
 * largest knot point).</throws>
  </javadoc>
  <method type="double" name="value">
    <scope />
    <declaration type="int" name="i" />
    <scope />
    <scope />
    <comment>This will handle the case where v is the last knot value</comment>
    <comment>There are only n-1 polynomials, so if v is the last knot</comment>
    <comment>then we will use the last polynomial to calculate the value.</comment>
  </method>
  <javadoc>
    <text>Get the derivative of the polynomial spline function.</text>
    <return>the derivative function.</return>
  </javadoc>
  <method type="UnivariateFunction" name="derivative" />
  <javadoc>
    <text>Get the derivative of the polynomial spline function.</text>
    <return>the derivative function.</return>
  </javadoc>
  <method type="PolynomialSplineFunction" name="polynomialSplineDerivative">
    <declaration type="PolynomialFunction[]" name="derivativePolynomials" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.1</since>
  </javadoc>
  <method type="DerivativeStructure" name="value">
    <declaration type="double" name="t0" />
    <scope />
    <declaration type="int" name="i" />
    <scope />
    <scope />
    <comment>This will handle the case where t is the last knot value</comment>
    <comment>There are only n-1 polynomials, so if t is the last knot</comment>
    <comment>then we will use the last polynomial to calculate the value.</comment>
  </method>
  <javadoc>
    <text>Get the number of spline segments.
 * It is also the number of polynomials and the number of knot points - 1.</text>
    <return>the number of spline segments.</return>
  </javadoc>
  <method type="int" name="getN" />
  <javadoc>
    <text>Get a copy of the interpolating polynomials array.
 * It returns a fresh copy of the array. Changes made to the copy will
 * not affect the polynomials property.</text>
    <return>the interpolating polynomials.</return>
  </javadoc>
  <method type="PolynomialFunction[]" name="getPolynomials">
    <declaration type="PolynomialFunction[]" name="p" />
  </method>
  <javadoc>
    <text>Get an array copy of the knot points.
 * It returns a fresh copy of the array. Changes made to the copy
 * will not affect the knots property.</text>
    <return>the knot points.</return>
  </javadoc>
  <method type="double[]" name="getKnots">
    <declaration type="double[]" name="out" />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
