<?xml version="1.0" encoding="UTF-8"?>
<class name="TricubicSplineInterpolator">
  <javadoc>
    <text>Generates a tricubic interpolating function.</text>
    <since>2.2</since>
    <version>$Id: TricubicSplineInterpolator.java 1455194 2013-03-11 15:45:54Z luc $</version>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="TricubicSplineInterpolatingFunction" name="interpolate">
    <scope />
    <scope />
    <declaration type="int" name="xLen" />
    <declaration type="int" name="yLen" />
    <declaration type="int" name="zLen" />
    <declaration type="double[][][]" name="fvalXY" />
    <declaration type="double[][][]" name="fvalZX" />
    <scope>
      <scope />
      <scope>
        <scope />
        <scope>
          <declaration type="double" name="v" />
        </scope>
      </scope>
    </scope>
    <declaration type="BicubicSplineInterpolator" name="bsi" />
    <declaration type="BicubicSplineInterpolatingFunction[]" name="xSplineYZ" />
    <scope />
    <declaration type="BicubicSplineInterpolatingFunction[]" name="ySplineZX" />
    <scope />
    <declaration type="BicubicSplineInterpolatingFunction[]" name="zSplineXY" />
    <scope />
    <declaration type="double[][][]" name="dFdX" />
    <declaration type="double[][][]" name="dFdY" />
    <declaration type="double[][][]" name="d2FdXdY" />
    <scope>
      <declaration type="BicubicSplineInterpolatingFunction" name="f" />
      <scope>
        <declaration type="double" name="x" />
        <scope>
          <declaration type="double" name="y" />
        </scope>
      </scope>
    </scope>
    <declaration type="double[][][]" name="dFdZ" />
    <declaration type="double[][][]" name="d2FdYdZ" />
    <scope>
      <declaration type="BicubicSplineInterpolatingFunction" name="f" />
      <scope>
        <declaration type="double" name="y" />
        <scope>
          <declaration type="double" name="z" />
        </scope>
      </scope>
    </scope>
    <declaration type="double[][][]" name="d2FdZdX" />
    <scope>
      <declaration type="BicubicSplineInterpolatingFunction" name="f" />
      <scope>
        <declaration type="double" name="z" />
        <scope>
          <declaration type="double" name="x" />
        </scope>
      </scope>
    </scope>
    <declaration type="double[][][]" name="d3FdXdYdZ" />
    <scope>
      <declaration type="int" name="nI" />
      <declaration type="int" name="pI" />
      <scope>
        <declaration type="int" name="nJ" />
        <declaration type="int" name="pJ" />
        <scope>
          <declaration type="int" name="nK" />
          <declaration type="int" name="pK" />
        </scope>
      </scope>
    </scope>
    <comment>Samples, re-ordered as (z, x, y) and (y, z, x) tuplets</comment>
    <comment>fvalXY[k][i][j] = f(xval[i], yval[j], zval[k])</comment>
    <comment>fvalZX[j][k][i] = f(xval[i], yval[j], zval[k])</comment>
    <comment>For each line x[i] (0 &lt;= i &lt; xLen), construct a 2D spline in y and z</comment>
    <comment>For each line y[j] (0 &lt;= j &lt; yLen), construct a 2D spline in z and x</comment>
    <comment>For each line z[k] (0 &lt;= k &lt; zLen), construct a 2D spline in x and y</comment>
    <comment>Partial derivatives wrt x and wrt y</comment>
    <comment>Partial derivatives wrt y and wrt z</comment>
    <comment>Partial derivatives wrt x and wrt z</comment>
    <comment>Third partial cross-derivatives</comment>
    <comment>XXX Not sure about this formula</comment>
    <comment>Create the interpolating splines</comment>
  </method>
  <javadoc>
    <text>Compute the next index of an array, clipping if necessary.
 * It is assumed (but not checked) that {@code i} is larger than or equal to 0}.</text>
    <param>i Index</param>
    <param>max Upper limit of the array</param>
    <return>the next index</return>
  </javadoc>
  <method type="int" name="nextIndex">
    <declaration type="int" name="index" />
  </method>
  <javadoc>
    <text>Compute the previous index of an array, clipping if necessary.
 * It is assumed (but not checked) that {@code i} is smaller than the size of the array.</text>
    <param>i Index</param>
    <return>the previous index</return>
  </javadoc>
  <method type="int" name="previousIndex">
    <declaration type="int" name="index" />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
