<?xml version="1.0" encoding="UTF-8"?>
<class name="Beta">
  <javadoc>
    <text>&lt;p&gt;
 * This is a utility class that provides computation methods related to the
 * Beta family of functions.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Implementation of {@link #logBeta(double,double)} is based on the
 * algorithms described in
 * &lt;ul&gt;
 * &lt;li&gt;&lt;a href="http://dx.doi.org/10.1145/22721.23109"&gt;Didonato and Morris
 * (1986)&lt;/a&gt;, &lt;em&gt;Computation of the Incomplete Gamma Function Ratios
 * and their Inverse&lt;/em&gt;, TOMS 12(4), 377-393,&lt;/li&gt;
 * &lt;li&gt;&lt;a href="http://dx.doi.org/10.1145/131766.131776"&gt;Didonato and Morris
 * (1992)&lt;/a&gt;, &lt;em&gt;Algorithm 708: Significant Digit Computation of the
 * Incomplete Beta Function Ratios&lt;/em&gt;, TOMS 18(3), 360-373,&lt;/li&gt;
 * &lt;/ul&gt;
 * and implemented in the
 * &lt;a href="http://www.dtic.mil/docs/citations/ADA476840"&gt;NSWC Library of Mathematical Functions&lt;/a&gt;,
 * available
 * &lt;a href="http://www.ualberta.ca/CNS/RESEARCH/Software/NumericalNSWC/site.html"&gt;here&lt;/a&gt;.
 * This library is "approved for public release", and the
 * &lt;a href="http://www.dtic.mil/dtic/pdf/announcements/CopyrightGuidance.pdf"&gt;Copyright guidance&lt;/a&gt;
 * indicates that unless otherwise stated in the code, all FORTRAN functions in
 * this library are license free. Since no such notice appears in the code these
 * functions can safely be ported to Commons-Math.
 * &lt;/p&gt;</text>
    <version>$Id: Beta.java 1420669 2012-12-12 13:40:35Z erans $</version>
  </javadoc>
  <javadoc>
    <text>Maximum allowed numerical error.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_EPSILON" />
  <javadoc>
    <text>The constant value of ½log 2π.</text>
  </javadoc>
  <declaration type="double" name="HALF_LOG_TWO_PI" />
  <javadoc>
    <text>&lt;p&gt;
 * The coefficients of the series expansion of the Δ function. This function
 * is defined as follows
 * &lt;/p&gt;
 * &lt;center&gt;Δ(x) = log Γ(x) - (x - 0.5) log a + a - 0.5 log 2π,&lt;/center&gt;
 * &lt;p&gt;
 * see equation (23) in Didonato and Morris (1992). The series expansion,
 * which applies for x ≥ 10, reads
 * &lt;/p&gt;
 * &lt;pre&gt;
 * 14
 * ====
 * 1  \                2 n
 * Δ(x) = ---  &gt;    d  (10 / x)
 * x  /      n
 * ====
 * n = 0
 * &lt;pre&gt;</text>
  </javadoc>
  <declaration type="double[]" name="DELTA" />
  <javadoc>
    <text>Default constructor.  Prohibit instantiation.</text>
  </javadoc>
  <method type="constructor" name="Beta" />
  <javadoc>
    <text>Returns the
 * &lt;a href="http://mathworld.wolfram.com/RegularizedBetaFunction.html"&gt;
 * regularized beta function&lt;/a&gt; I(x, a, b).</text>
    <param>x Value.</param>
    <param>a Parameter {@code a}.</param>
    <param>b Parameter {@code b}.</param>
    <return>the regularized beta function I(x, a, b).</return>
    <throws>org.apache.commons.math3.exception.MaxCountExceededExceptionif the algorithm fails to converge.</throws>
  </javadoc>
  <method type="double" name="regularizedBeta" />
  <javadoc>
    <text>Returns the
 * &lt;a href="http://mathworld.wolfram.com/RegularizedBetaFunction.html"&gt;
 * regularized beta function&lt;/a&gt; I(x, a, b).</text>
    <param>x Value.</param>
    <param>a Parameter {@code a}.</param>
    <param>b Parameter {@code b}.</param>
    <param>epsilon When the absolute value of the nth item in the
 * series is less than epsilon the approximation ceases to calculate
 * further elements in the series.</param>
    <return>the regularized beta function I(x, a, b)</return>
    <throws>org.apache.commons.math3.exception.MaxCountExceededExceptionif the algorithm fails to converge.</throws>
  </javadoc>
  <method type="double" name="regularizedBeta" />
  <javadoc>
    <text>Returns the regularized beta function I(x, a, b).</text>
    <param>x the value.</param>
    <param>a Parameter {@code a}.</param>
    <param>b Parameter {@code b}.</param>
    <param>maxIterations Maximum number of "iterations" to complete.</param>
    <return>the regularized beta function I(x, a, b)</return>
    <throws>org.apache.commons.math3.exception.MaxCountExceededExceptionif the algorithm fails to converge.</throws>
  </javadoc>
  <method type="double" name="regularizedBeta" />
  <javadoc>
    <text>Returns the regularized beta function I(x, a, b).
 * The implementation of this method is based on:
 * &lt;ul&gt;
 * &lt;li&gt;
 * &lt;a href="http://mathworld.wolfram.com/RegularizedBetaFunction.html"&gt;
 * Regularized Beta Function&lt;/a&gt;.&lt;/li&gt;
 * &lt;li&gt;
 * &lt;a href="http://functions.wolfram.com/06.21.10.0001.01"&gt;
 * Regularized Beta Function&lt;/a&gt;.&lt;/li&gt;
 * &lt;/ul&gt;</text>
    <param>x the value.</param>
    <param>a Parameter {@code a}.</param>
    <param>b Parameter {@code b}.</param>
    <param>epsilon When the absolute value of the nth item in the
 * series is less than epsilon the approximation ceases to calculate
 * further elements in the series.</param>
    <param>maxIterations Maximum number of "iterations" to complete.</param>
    <return>the regularized beta function I(x, a, b)</return>
    <throws>org.apache.commons.math3.exception.MaxCountExceededExceptionif the algorithm fails to converge.</throws>
  </javadoc>
  <method type="double" name="regularizedBeta">
    <declaration type="double" name="ret" />
    <scope />
    <scope />
    <scope>
      <declaration type="ContinuedFraction" name="fraction" />
      <method type="double" name="getB">
        <declaration type="double" name="ret" />
        <declaration type="double" name="m" />
        <scope />
        <scope />
      </method>
      <method type="double" name="getA" />
    </scope>
    <comment>even</comment>
  </method>
  <javadoc>
    <text>Returns the natural logarithm of the beta function B(a, b).
 * The implementation of this method is based on:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;a href="http://mathworld.wolfram.com/BetaFunction.html"&gt;
 * Beta Function&lt;/a&gt;, equation (1).&lt;/li&gt;
 * &lt;/ul&gt;</text>
    <param>a Parameter {@code a}.</param>
    <param>b Parameter {@code b}.</param>
    <param>epsilon This parameter is ignored.</param>
    <param>maxIterations This parameter is ignored.</param>
    <return>log(B(a, b)).</return>
    <deprecated>as of version 3.1, this method is deprecated as the
 * computation of the beta function is no longer iterative; it will be
 * removed in version 4.0. Current implementation of this method
 * internally calls {@link #logBeta(double,double)}.</deprecated>
  </javadoc>
  <method type="double" name="logBeta" />
  <javadoc>
    <text>Returns the value of log Γ(a + b) for 1 ≤ a, b ≤ 2. Based on the
 * &lt;em&gt;NSWC Library of Mathematics Subroutines&lt;/em&gt; double precision
 * implementation, {@code DGSMLN}. In {@link BetaTest#testLogGammaSum()},
 * this private method is accessed through reflection.</text>
    <param>a First argument.</param>
    <param>b Second argument.</param>
    <return>the value of {@code log(Gamma(a + b))}.</return>
    <throws>OutOfRangeException if {@code a} or {@code b} is lower than{@code 1.0} or greater than {@code 2.0}.</throws>
  </javadoc>
  <method type="double" name="logGammaSum">
    <scope />
    <scope />
    <declaration type="double" name="x" />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Returns the value of log[Γ(b) / Γ(a + b)] for a ≥ 0 and b ≥ 10. Based on
 * the &lt;em&gt;NSWC Library of Mathematics Subroutines&lt;/em&gt; double precision
 * implementation, {@code DLGDIV}. In{@link BetaTest#testLogGammaMinusLogGammaSum()}, this private method is
 * accessed through reflection.</text>
    <param>a First argument.</param>
    <param>b Second argument.</param>
    <return>the value of {@code log(Gamma(b) / Gamma(a + b))}.</return>
    <throws>NumberIsTooSmallException if {@code a &lt; 0.0} or {@code b &lt; 10.0}.</throws>
  </javadoc>
  <method type="double" name="logGammaMinusLogGammaSum">
    <scope />
    <scope />
    <declaration type="double" name="d" />
    <declaration type="double" name="w" />
    <scope />
    <scope />
    <declaration type="double" name="u" />
    <declaration type="double" name="v" />
    <comment>d = a + b - 0.5</comment>
  </method>
  <javadoc>
    <text>Returns the value of Δ(b) - Δ(a + b), with 0 ≤ a ≤ b and b ≥ 10. Based
 * on equations (26), (27) and (28) in Didonato and Morris (1992).</text>
    <param>a First argument.</param>
    <param>b Second argument.</param>
    <return>the value of {@code Delta(b) - Delta(a + b)}</return>
    <throws>OutOfRangeException if {@code a &lt; 0} or {@code a &gt; b}</throws>
    <throws>NumberIsTooSmallException if {@code b &lt; 10}</throws>
  </javadoc>
  <method type="double" name="deltaMinusDeltaSum">
    <scope />
    <scope />
    <declaration type="double" name="h" />
    <declaration type="double" name="p" />
    <declaration type="double" name="q" />
    <declaration type="double" name="q2" />
    <declaration type="double[]" name="s" />
    <scope />
    <declaration type="double" name="sqrtT" />
    <declaration type="double" name="t" />
    <declaration type="double" name="w" />
    <scope />
    <comment>s[i] = 1 + q + ... - q(2  i)</comment>
    <comment>w = Delta(b) - Delta(a + b)</comment>
  </method>
  <javadoc>
    <text>Returns the value of Δ(p) + Δ(q) - Δ(p + q), with p, q ≥ 10. Based on
 * the &lt;em&gt;NSWC Library of Mathematics Subroutines&lt;/em&gt; double precision
 * implementation, {@code DBCORR}. In{@link BetaTest#testSumDeltaMinusDeltaSum()}, this private method is
 * accessed through reflection.</text>
    <param>p First argument.</param>
    <param>q Second argument.</param>
    <return>the value of {@code Delta(p) + Delta(q) - Delta(p + q)}.</return>
    <throws>NumberIsTooSmallException if {@code p &lt; 10.0} or {@code q &lt; 10.0}.</throws>
  </javadoc>
  <method type="double" name="sumDeltaMinusDeltaSum">
    <scope />
    <scope />
    <declaration type="double" name="a" />
    <declaration type="double" name="b" />
    <declaration type="double" name="sqrtT" />
    <declaration type="double" name="t" />
    <declaration type="double" name="z" />
    <scope />
  </method>
  <javadoc>
    <text>Returns the value of log B(p, q) for 0 ≤ x ≤ 1 and p, q &gt; 0. Based on the
 * &lt;em&gt;NSWC Library of Mathematics Subroutines&lt;/em&gt; implementation,{@code DBETLN}.</text>
    <param>p First argument.</param>
    <param>q Second argument.</param>
    <return>the value of {@code log(Beta(p, q))}, {@code NaN} if{@code p &lt;= 0} or {@code q &lt;= 0}.</return>
  </javadoc>
  <method type="double" name="logBeta">
    <scope />
    <declaration type="double" name="a" />
    <declaration type="double" name="b" />
    <scope>
      <declaration type="double" name="w" />
      <declaration type="double" name="h" />
      <declaration type="double" name="c" />
      <declaration type="double" name="u" />
      <declaration type="double" name="v" />
      <scope />
      <scope />
    </scope>
    <scope>
      <scope>
        <declaration type="int" name="n" />
        <declaration type="double" name="prod" />
        <declaration type="double" name="ared" />
        <scope />
      </scope>
      <scope>
        <declaration type="double" name="prod1" />
        <declaration type="double" name="ared" />
        <scope>
          <declaration type="double" name="h" />
        </scope>
        <scope>
          <declaration type="double" name="prod2" />
          <declaration type="double" name="bred" />
          <scope />
        </scope>
        <scope />
      </scope>
    </scope>
    <scope>
      <scope>
        <scope>
          <declaration type="double" name="prod" />
          <declaration type="double" name="bred" />
          <scope />
        </scope>
        <scope />
      </scope>
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
    </scope>
    <comment>The following command is the original NSWC implementation.</comment>
    <comment>return Gamma.logGamma(a) +</comment>
    <comment>(Gamma.logGamma(b) - Gamma.logGamma(a + b));</comment>
    <comment>The following command turns out to be more accurate.</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
