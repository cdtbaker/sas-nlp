<?xml version="1.0" encoding="UTF-8"?>
<class name="HarmonicOscillator">
  <javadoc>
    <text>&lt;a href="http://en.wikipedia.org/wiki/Harmonic_oscillator"&gt;
 * simple harmonic oscillator&lt;/a&gt; function.</text>
    <since>3.0</since>
    <version>$Id: HarmonicOscillator.java 1455194 2013-03-11 15:45:54Z luc $</version>
  </javadoc>
  <javadoc>
    <text>Amplitude.</text>
  </javadoc>
  <declaration type="double" name="amplitude" />
  <javadoc>
    <text>Angular frequency.</text>
  </javadoc>
  <declaration type="double" name="omega" />
  <javadoc>
    <text>Phase.</text>
  </javadoc>
  <declaration type="double" name="phase" />
  <javadoc>
    <text>Harmonic oscillator function.</text>
    <param>amplitude Amplitude.</param>
    <param>omega Angular frequency.</param>
    <param>phase Phase.</param>
  </javadoc>
  <method type="constructor" name="HarmonicOscillator" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="value" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <deprecated>as of 3.1, replaced by {@link #value(DerivativeStructure)}</deprecated>
  </javadoc>
  <method type="UnivariateFunction" name="derivative" />
  <javadoc>
    <text>Parametric function where the input array contains the parameters of
 * the harmonic oscillator function, ordered as follows:
 * &lt;ul&gt;
 * &lt;li&gt;Amplitude&lt;/li&gt;
 * &lt;li&gt;Angular frequency&lt;/li&gt;
 * &lt;li&gt;Phase&lt;/li&gt;
 * &lt;/ul&gt;</text>
  </javadoc>
  <javadoc>
    <text>Computes the value of the harmonic oscillator at {@code x}.</text>
    <param>x Value for which the function must be computed.</param>
    <param>param Values of norm, mean and standard deviation.</param>
    <return>the value of the function.</return>
    <throws>NullArgumentException if {@code param} is {@code null}.</throws>
    <throws>DimensionMismatchException if the size of {@code param} is
 * not 3.</throws>
  </javadoc>
  <method type="double" name="value" />
  <javadoc>
    <text>Computes the value of the gradient at {@code x}.
 * The components of the gradient vector are the partial
 * derivatives of the function with respect to each of the
 * &lt;em&gt;parameters&lt;/em&gt; (amplitude, angular frequency and phase).</text>
    <param>x Value at which the gradient must be computed.</param>
    <param>param Values of amplitude, angular frequency and phase.</param>
    <return>the gradient vector at {@code x}.</return>
    <throws>NullArgumentException if {@code param} is {@code null}.</throws>
    <throws>DimensionMismatchException if the size of {@code param} is
 * not 3.</throws>
  </javadoc>
  <method type="double[]" name="gradient">
    <declaration type="double" name="amplitude" />
    <declaration type="double" name="omega" />
    <declaration type="double" name="phase" />
    <declaration type="double" name="xTimesOmegaPlusPhase" />
    <declaration type="double" name="a" />
    <declaration type="double" name="p" />
    <declaration type="double" name="w" />
  </method>
  <javadoc>
    <text>Validates parameters to ensure they are appropriate for the evaluation of
 * the {@link #value(double,double[])} and {@link #gradient(double,double[])}methods.</text>
    <param>param Values of norm, mean and standard deviation.</param>
    <throws>NullArgumentException if {@code param} is {@code null}.</throws>
    <throws>DimensionMismatchException if the size of {@code param} is
 * not 3.</throws>
  </javadoc>
  <method type="void" name="validateParameters">
    <scope />
    <scope />
  </method>
  <javadoc>
    <param>xTimesOmegaPlusPhase {@code omega * x + phase}.</param>
    <param>amplitude Amplitude.</param>
    <return>the value of the harmonic oscillator function at {@code x}.</return>
  </javadoc>
  <method type="double" name="value" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.1</since>
  </javadoc>
  <method type="DerivativeStructure" name="value">
    <declaration type="double" name="x" />
    <declaration type="double[]" name="f" />
    <declaration type="double" name="alpha" />
    <scope>
      <declaration type="double" name="mo2" />
      <scope />
    </scope>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
