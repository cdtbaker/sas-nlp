<?xml version="1.0" encoding="UTF-8"?>
<class name="ExceptionContext">
  <javadoc>
    <text>Class that contains the actual implementation of the functionality mandated
 * by the {@link ExceptionContext} interface.
 * All Commons Math exceptions delegate the interface's methods to this class.</text>
    <since>3.0</since>
    <version>$Id: ExceptionContext.java 1364388 2012-07-22 18:16:43Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version Id.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>The throwable to which this context refers to.</text>
  </javadoc>
  <declaration type="Throwable" name="throwable" />
  <javadoc>
    <text>Various informations that enrich the informative message.</text>
  </javadoc>
  <declaration type="List&lt;Localizable&gt;" name="msgPatterns" />
  <javadoc>
    <text>Various informations that enrich the informative message.
 * The arguments will replace the corresponding place-holders in{@link #msgPatterns}.</text>
  </javadoc>
  <declaration type="List&lt;Object[]&gt;" name="msgArguments" />
  <javadoc>
    <text>Arbitrary context information.</text>
  </javadoc>
  <declaration type="Map&lt;String,Object&gt;" name="context" />
  <javadoc>
    <text>Simple constructor.</text>
    <param>throwable the exception this context refers too</param>
  </javadoc>
  <method type="constructor" name="ExceptionContext" />
  <javadoc>
    <text>Get a reference to the exception to which the context relates.</text>
    <return>a reference to the exception to which the context relates</return>
  </javadoc>
  <method type="Throwable" name="getThrowable" />
  <javadoc>
    <text>Adds a message.</text>
    <param>pattern Message pattern.</param>
    <param>arguments Values for replacing the placeholders in the message
 * pattern.</param>
  </javadoc>
  <method type="void" name="addMessage" />
  <javadoc>
    <text>Sets the context (key, value) pair.
 * Keys are assumed to be unique within an instance. If the same key is
 * assigned a new value, the previous one will be lost.</text>
    <param>key Context key (not null).</param>
    <param>value Context value.</param>
  </javadoc>
  <method type="void" name="setValue" />
  <javadoc>
    <text>Gets the value associated to the given context key.</text>
    <param>key Context key.</param>
    <return>the context value or {@code null} if the key does not exist.</return>
  </javadoc>
  <method type="Object" name="getValue" />
  <javadoc>
    <text>Gets all the keys stored in the exception</text>
    <return>the set of keys.</return>
  </javadoc>
  <method type="Set&lt;String&gt;" name="getKeys" />
  <javadoc>
    <text>Gets the default message.</text>
    <return>the message.</return>
  </javadoc>
  <method type="String" name="getMessage" />
  <javadoc>
    <text>Gets the message in the default locale.</text>
    <return>the localized message.</return>
  </javadoc>
  <method type="String" name="getLocalizedMessage" />
  <javadoc>
    <text>Gets the message in a specified locale.</text>
    <param>locale Locale in which the message should be translated.</param>
    <return>the localized message.</return>
  </javadoc>
  <method type="String" name="getMessage" />
  <javadoc>
    <text>Gets the message in a specified locale.</text>
    <param>locale Locale in which the message should be translated.</param>
    <param>separator Separator inserted between the message parts.</param>
    <return>the localized message.</return>
  </javadoc>
  <method type="String" name="getMessage" />
  <javadoc>
    <text>Builds a message string.</text>
    <param>locale Locale in which the message should be translated.</param>
    <param>separator Message separator.</param>
    <return>a localized message string.</return>
  </javadoc>
  <method type="String" name="buildMessage">
    <declaration type="StringBuilder" name="sb" />
    <declaration type="int" name="count" />
    <declaration type="int" name="len" />
    <scope>
      <declaration type="Localizable" name="pat" />
      <declaration type="Object[]" name="args" />
      <declaration type="MessageFormat" name="fmt" />
      <scope />
    </scope>
    <comment>Add a separator if there are other messages.</comment>
  </method>
  <javadoc>
    <text>Serialize this object to the given stream.</text>
    <param>out Stream.</param>
    <throws>IOException This should never happen.</throws>
  </javadoc>
  <method type="void" name="writeObject" />
  <javadoc>
    <text>Deserialize this object from the given stream.</text>
    <param>in Stream.</param>
    <throws>IOException This should never happen.</throws>
    <throws>ClassNotFoundException This should never happen.</throws>
  </javadoc>
  <method type="void" name="readObject" />
  <javadoc>
    <text>Serialize  {@link #msgPatterns} and {@link #msgArguments}.</text>
    <param>out Stream.</param>
    <throws>IOException This should never happen.</throws>
  </javadoc>
  <method type="void" name="serializeMessages">
    <declaration type="int" name="len" />
    <scope>
      <declaration type="Localizable" name="pat" />
      <declaration type="Object[]" name="args" />
      <declaration type="int" name="aLen" />
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>Step 1.</comment>
    <comment>Step 2.</comment>
    <comment>Step 3.</comment>
    <comment>Step 4.</comment>
    <comment>Step 5a.</comment>
    <comment>Step 5b.</comment>
  </method>
  <javadoc>
    <text>Deserialize {@link #msgPatterns} and {@link #msgArguments}.</text>
    <param>in Stream.</param>
    <throws>IOException This should never happen.</throws>
    <throws>ClassNotFoundException This should never happen.</throws>
  </javadoc>
  <method type="void" name="deSerializeMessages">
    <declaration type="int" name="len" />
    <scope>
      <declaration type="Localizable" name="pat" />
      <declaration type="int" name="aLen" />
      <declaration type="Object[]" name="args" />
      <scope />
    </scope>
    <comment>Step 1.</comment>
    <comment>Step 2.</comment>
    <comment>Step 3.</comment>
    <comment>Step 4.</comment>
    <comment>Step 5.</comment>
  </method>
  <javadoc>
    <text>Serialize {@link #context}.</text>
    <param>out Stream.</param>
    <throws>IOException This should never happen.</throws>
  </javadoc>
  <method type="void" name="serializeContext">
    <declaration type="int" name="len" />
    <scope>
      <declaration type="Object" name="value" />
      <scope />
      <scope />
    </scope>
    <comment>Step 1.</comment>
    <comment>Step 2.</comment>
    <comment>Step 3a.</comment>
    <comment>Step 3b.</comment>
  </method>
  <javadoc>
    <text>Deserialize {@link #context}.</text>
    <param>in Stream.</param>
    <throws>IOException This should never happen.</throws>
    <throws>ClassNotFoundException This should never happen.</throws>
  </javadoc>
  <method type="void" name="deSerializeContext">
    <declaration type="int" name="len" />
    <scope>
      <declaration type="String" name="key" />
      <declaration type="Object" name="value" />
    </scope>
    <comment>Step 1.</comment>
    <comment>Step 2.</comment>
    <comment>Step 3.</comment>
  </method>
  <javadoc>
    <text>Replaces a non-serializable object with an error message string.</text>
    <param>obj Object that does not implement the {@code Serializable}interface.</param>
    <return>a string that mentions which class could not be serialized.</return>
  </javadoc>
  <method type="String" name="nonSerializableReplacement" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
