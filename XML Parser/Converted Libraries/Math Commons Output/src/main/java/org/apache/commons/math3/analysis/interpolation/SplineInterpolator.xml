<?xml version="1.0" encoding="UTF-8"?>
<class name="SplineInterpolator">
  <javadoc>
    <text>Computes a natural (also known as "free", "unclamped") cubic spline interpolation for the data set.
 * &lt;p&gt;
 * The {@link #interpolate(double[],double[])} method returns a {@link PolynomialSplineFunction}consisting of n cubic polynomials, defined over the subintervals determined by the x values,
 * x[0] &lt; x[i] ... &lt; x[n].  The x values are referred to as "knot points."&lt;/p&gt;
 * &lt;p&gt;
 * The value of the PolynomialSplineFunction at a point x that is greater than or equal to the smallest
 * knot point and strictly less than the largest knot point is computed by finding the subinterval to which
 * x belongs and computing the value of the corresponding polynomial at &lt;code&gt;x - x[i] &lt;/code&gt; where
 * &lt;code&gt;i&lt;/code&gt; is the index of the subinterval.  See {@link PolynomialSplineFunction} for more details.
 * &lt;/p&gt;
 * &lt;p&gt;
 * The interpolating polynomials satisfy: &lt;ol&gt;
 * &lt;li&gt;The value of the PolynomialSplineFunction at each of the input x values equals the
 * corresponding y value.&lt;/li&gt;
 * &lt;li&gt;Adjacent polynomials are equal through two derivatives at the knot points (i.e., adjacent polynomials
 * "match up" at the knot points, as do their first and second derivatives).&lt;/li&gt;
 * &lt;/ol&gt;&lt;/p&gt;
 * &lt;p&gt;
 * The cubic spline interpolation algorithm implemented is as described in R.L. Burden, J.D. Faires,
 * &lt;u&gt;Numerical Analysis&lt;/u&gt;, 4th Ed., 1989, PWS-Kent, ISBN 0-53491-585-X, pp 126-131.
 * &lt;/p&gt;</text>
    <version>$Id: SplineInterpolator.java 1379905 2012-09-01 23:56:50Z erans $</version>
  </javadoc>
  <javadoc>
    <text>Computes an interpolating function for the data set.</text>
    <param>x the arguments for the interpolation points</param>
    <param>y the values for the interpolation points</param>
    <return>a function which interpolates the data set</return>
    <throws>DimensionMismatchException if {@code x} and {@code y}have different sizes.</throws>
    <throws>NonMonotonicSequenceException if {@code x} is not sorted in
 * strict increasing order.</throws>
    <throws>NumberIsTooSmallException if the size of {@code x} is smaller
 * than 3.</throws>
  </javadoc>
  <method type="PolynomialSplineFunction" name="interpolate">
    <scope />
    <scope />
    <declaration type="int" name="n" />
    <declaration type="double[]" name="h" />
    <scope />
    <declaration type="double[]" name="mu" />
    <declaration type="double[]" name="z" />
    <declaration type="double" name="g" />
    <scope />
    <declaration type="double[]" name="b" />
    <declaration type="double[]" name="c" />
    <declaration type="double[]" name="d" />
    <scope />
    <declaration type="PolynomialFunction[]" name="polynomials" />
    <declaration type="double[]" name="coefficients" />
    <scope />
    <comment>Number of intervals.  The number of data points is n + 1.</comment>
    <comment>Differences between knot points</comment>
    <comment>cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
