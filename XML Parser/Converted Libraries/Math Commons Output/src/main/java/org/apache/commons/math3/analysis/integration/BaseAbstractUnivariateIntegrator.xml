<?xml version="1.0" encoding="UTF-8"?>
<class name="BaseAbstractUnivariateIntegrator">
  <javadoc>
    <text>Provide a default implementation for several generic functions.</text>
    <version>$Id: BaseAbstractUnivariateIntegrator.java 1455194 2013-03-11 15:45:54Z luc $</version>
    <since>1.2</since>
  </javadoc>
  <javadoc>
    <text>Default absolute accuracy.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_ABSOLUTE_ACCURACY" />
  <javadoc>
    <text>Default relative accuracy.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_RELATIVE_ACCURACY" />
  <javadoc>
    <text>Default minimal iteration count.</text>
  </javadoc>
  <declaration type="int" name="DEFAULT_MIN_ITERATIONS_COUNT" />
  <javadoc>
    <text>Default maximal iteration count.</text>
  </javadoc>
  <declaration type="int" name="DEFAULT_MAX_ITERATIONS_COUNT" />
  <javadoc>
    <text>The iteration count.</text>
  </javadoc>
  <declaration type="Incrementor" name="iterations" />
  <javadoc>
    <text>Maximum absolute error.</text>
  </javadoc>
  <declaration type="double" name="absoluteAccuracy" />
  <javadoc>
    <text>Maximum relative error.</text>
  </javadoc>
  <declaration type="double" name="relativeAccuracy" />
  <javadoc>
    <text>minimum number of iterations</text>
  </javadoc>
  <declaration type="int" name="minimalIterationCount" />
  <javadoc>
    <text>The functions evaluation count.</text>
  </javadoc>
  <declaration type="Incrementor" name="evaluations" />
  <javadoc>
    <text>Function to integrate.</text>
  </javadoc>
  <declaration type="UnivariateFunction" name="function" />
  <javadoc>
    <text>Lower bound for the interval.</text>
  </javadoc>
  <declaration type="double" name="min" />
  <javadoc>
    <text>Upper bound for the interval.</text>
  </javadoc>
  <declaration type="double" name="max" />
  <javadoc>
    <text>Construct an integrator with given accuracies and iteration counts.
 * &lt;p&gt;
 * The meanings of the various parameters are:
 * &lt;ul&gt;
 * &lt;li&gt;relative accuracy:
 * this is used to stop iterations if the absolute accuracy can't be
 * achieved due to large values or short mantissa length. If this
 * should be the primary criterion for convergence rather then a
 * safety measure, set the absolute accuracy to a ridiculously small value,
 * like {@link org.apache.commons.math3.util.Precision#SAFE_MIN Precision.SAFE_MIN}.&lt;/li&gt;
 * &lt;li&gt;absolute accuracy:
 * The default is usually chosen so that results in the interval
 * -10..-0.1 and +0.1..+10 can be found with a reasonable accuracy. If the
 * expected absolute value of your results is of much smaller magnitude, set
 * this to a smaller value.&lt;/li&gt;
 * &lt;li&gt;minimum number of iterations:
 * minimal iteration is needed to avoid false early convergence, e.g.
 * the sample points happen to be zeroes of the function. Users can
 * use the default value or choose one that they see as appropriate.&lt;/li&gt;
 * &lt;li&gt;maximum number of iterations:
 * usually a high iteration count indicates convergence problems. However,
 * the "reasonable value" varies widely for different algorithms. Users are
 * advised to use the default value supplied by the algorithm.&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;</text>
    <param>relativeAccuracy relative accuracy of the result</param>
    <param>absoluteAccuracy absolute accuracy of the result</param>
    <param>minimalIterationCount minimum number of iterations</param>
    <param>maximalIterationCount maximum number of iterations</param>
    <exception>NotStrictlyPositiveException if minimal number of iterations
 * is not strictly positive</exception>
    <exception>NumberIsTooSmallException if maximal number of iterations
 * is lesser than or equal to the minimal number of iterations</exception>
  </javadoc>
  <method type="constructor" name="BaseAbstractUnivariateIntegrator">
    <scope />
    <scope />
    <comment>accuracy settings</comment>
    <comment>iterations count settings</comment>
    <comment>prepare evaluations counter, but do not set it yet</comment>
  </method>
  <javadoc>
    <text>Construct an integrator with given accuracies.</text>
    <param>relativeAccuracy relative accuracy of the result</param>
    <param>absoluteAccuracy absolute accuracy of the result</param>
  </javadoc>
  <method type="constructor" name="BaseAbstractUnivariateIntegrator" />
  <javadoc>
    <text>Construct an integrator with given iteration counts.</text>
    <param>minimalIterationCount minimum number of iterations</param>
    <param>maximalIterationCount maximum number of iterations</param>
    <exception>NotStrictlyPositiveException if minimal number of iterations
 * is not strictly positive</exception>
    <exception>NumberIsTooSmallException if maximal number of iterations
 * is lesser than or equal to the minimal number of iterations</exception>
  </javadoc>
  <method type="constructor" name="BaseAbstractUnivariateIntegrator" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getRelativeAccuracy" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getAbsoluteAccuracy" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getMinimalIterationCount" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getMaximalIterationCount" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getEvaluations" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getIterations" />
  <javadoc>
    <return>the lower bound.</return>
  </javadoc>
  <method type="double" name="getMin" />
  <javadoc>
    <return>the upper bound.</return>
  </javadoc>
  <method type="double" name="getMax" />
  <javadoc>
    <text>Compute the objective function value.</text>
    <param>point Point at which the objective function must be evaluated.</param>
    <return>the objective function value at specified point.</return>
    <throws>TooManyEvaluationsException if the maximal number of function
 * evaluations is exceeded.</throws>
  </javadoc>
  <method type="double" name="computeObjectiveValue">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Prepare for computation.
 * Subclasses must call this method if they override any of the{@code solve} methods.</text>
    <param>maxEval Maximum number of evaluations.</param>
    <param>f the integrand function</param>
    <param>lower the min bound for the interval</param>
    <param>upper the upper bound for the interval</param>
    <throws>NullArgumentException if {@code f} is {@code null}.</throws>
    <throws>MathIllegalArgumentException if {@code min &gt;= max}.</throws>
  </javadoc>
  <method type="void" name="setup">
    <comment>Checks.</comment>
    <comment>Reset.</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="integrate">
    <comment>Initialization.</comment>
    <comment>Perform computation.</comment>
  </method>
  <method name="doIntegrate" type="double" />
  <javadoc>
    <text>Method for implementing actual integration algorithms in derived
 * classes.</text>
    <return>the root.</return>
    <throws>TooManyEvaluationsException if the maximal number of evaluations
 * is exceeded.</throws>
    <throws>MaxCountExceededException if the maximum iteration count is exceeded
 * or the integrator detects convergence problems otherwise</throws>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
