<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractIntegrator">
  <javadoc>
    <text>Base class managing common boilerplate for all integrators.</text>
    <version>$Id: AbstractIntegrator.java 1463684 2013-04-02 19:04:13Z luc $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>Step handler.</text>
  </javadoc>
  <declaration type="Collection&lt;StepHandler&gt;" name="stepHandlers" />
  <javadoc>
    <text>Current step start time.</text>
  </javadoc>
  <declaration type="double" name="stepStart" />
  <javadoc>
    <text>Current stepsize.</text>
  </javadoc>
  <declaration type="double" name="stepSize" />
  <javadoc>
    <text>Indicator for last step.</text>
  </javadoc>
  <declaration type="boolean" name="isLastStep" />
  <javadoc>
    <text>Indicator that a state or derivative reset was triggered by some event.</text>
  </javadoc>
  <declaration type="boolean" name="resetOccurred" />
  <javadoc>
    <text>Events states.</text>
  </javadoc>
  <declaration type="Collection&lt;EventState&gt;" name="eventsStates" />
  <javadoc>
    <text>Initialization indicator of events states.</text>
  </javadoc>
  <declaration type="boolean" name="statesInitialized" />
  <javadoc>
    <text>Name of the method.</text>
  </javadoc>
  <declaration type="String" name="name" />
  <javadoc>
    <text>Counter for number of evaluations.</text>
  </javadoc>
  <declaration type="Incrementor" name="evaluations" />
  <javadoc>
    <text>Differential equations to integrate.</text>
  </javadoc>
  <declaration type="ExpandableStatefulODE" name="expandable" />
  <javadoc>
    <text>Build an instance.</text>
    <param>name name of the method</param>
  </javadoc>
  <method type="constructor" name="AbstractIntegrator" />
  <javadoc>
    <text>Build an instance with a null name.</text>
  </javadoc>
  <method type="constructor" name="AbstractIntegrator" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="String" name="getName" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="addStepHandler" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Collection&lt;StepHandler&gt;" name="getStepHandlers" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="clearStepHandlers" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="addEventHandler" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="addEventHandler" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Collection&lt;EventHandler&gt;" name="getEventHandlers">
    <declaration type="List&lt;EventHandler&gt;" name="list" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="clearEventHandlers" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getCurrentStepStart" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getCurrentSignedStepsize" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setMaxEvaluations" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getMaxEvaluations" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getEvaluations" />
  <javadoc>
    <text>Prepare the start of an integration.</text>
    <param>t0 start value of the independent &lt;i&gt;time&lt;/i&gt; variable</param>
    <param>y0 array containing the start value of the state vector</param>
    <param>t target time for the integration</param>
  </javadoc>
  <method type="void" name="initIntegration">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Set the equations.</text>
    <param>equations equations to set</param>
  </javadoc>
  <method type="void" name="setEquations" />
  <javadoc>
    <text>Get the differential equations to integrate.</text>
    <return>differential equations to integrate</return>
    <since>3.2</since>
  </javadoc>
  <method type="ExpandableStatefulODE" name="getExpandable" />
  <javadoc>
    <text>Get the evaluations counter.</text>
    <return>evaluations counter</return>
    <since>3.2</since>
  </javadoc>
  <method type="Incrementor" name="getEvaluationsCounter" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="integrate">
    <scope />
    <scope />
    <declaration type="ExpandableStatefulODE" name="expandableODE" />
    <comment>prepare expandable stateful equations</comment>
    <comment>perform integration</comment>
    <comment>extract results back from the stateful equations</comment>
  </method>
  <method name="integrate" type="void" />
  <javadoc>
    <text>Integrate a set of differential equations up to the given time.
 * &lt;p&gt;This method solves an Initial Value Problem (IVP).&lt;/p&gt;
 * &lt;p&gt;The set of differential equations is composed of a main set, which
 * can be extended by some sets of secondary equations. The set of
 * equations must be already set up with initial time and partial states.
 * At integration completion, the final time and partial states will be
 * available in the same object.&lt;/p&gt;
 * &lt;p&gt;Since this method stores some internal state variables made
 * available in its public interface during integration ({@link #getCurrentSignedStepsize()}), it is &lt;em&gt;not&lt;/em&gt; thread-safe.&lt;/p&gt;</text>
    <param>equations complete set of differential equations to integrate</param>
    <param>t target time for the integration
 * (can be set to a value smaller than &lt;code&gt;t0&lt;/code&gt; for backward integration)</param>
    <exception>NumberIsTooSmallException if integration step is too small</exception>
    <throws>DimensionMismatchException if the dimension of the complete state does not
 * match the complete equations sets dimension</throws>
    <exception>MaxCountExceededException if the number of functions evaluations is exceeded</exception>
    <exception>NoBracketingException if the location of an event cannot be bracketed</exception>
  </javadoc>
  <javadoc>
    <text>Compute the derivatives and check the number of evaluations.</text>
    <param>t current value of the independent &lt;I&gt;time&lt;/I&gt; variable</param>
    <param>y array containing the current value of the state vector</param>
    <param>yDot placeholder array where to put the time derivative of the state vector</param>
    <exception>MaxCountExceededException if the number of functions evaluations is exceeded</exception>
    <exception>DimensionMismatchException if arrays dimensions do not match equations settings</exception>
  </javadoc>
  <method type="void" name="computeDerivatives" />
  <javadoc>
    <text>Set the stateInitialized flag.
 * &lt;p&gt;This method must be called by integrators with the value{@code false} before they start integration, so a proper lazy
 * initialization is done automatically on the first step.&lt;/p&gt;</text>
    <param>stateInitialized new value for the flag</param>
    <since>2.2</since>
  </javadoc>
  <method type="void" name="setStateInitialized" />
  <javadoc>
    <text>Accept a step, triggering events and step handlers.</text>
    <param>interpolator step interpolator</param>
    <param>y state vector at step end time, must be reset if an event
 * asks for resetting or if an events stops integration during the step</param>
    <param>yDot placeholder array where to put the time derivative of the state vector</param>
    <param>tEnd final integration time</param>
    <return>time at end of step</return>
    <exception>MaxCountExceededException if the interpolator throws one because
 * the number of functions evaluations is exceeded</exception>
    <exception>NoBracketingException if the location of an event cannot be bracketed</exception>
    <exception>DimensionMismatchException if arrays dimensions do not match equations settings</exception>
    <since>2.2</since>
  </javadoc>
  <method type="double" name="acceptStep">
    <declaration type="double" name="previousT" />
    <declaration type="double" name="currentT" />
    <scope>
      <scope />
    </scope>
    <declaration type="int" name="orderingSign" />
    <declaration type="SortedSet&lt;EventState&gt;" name="occuringEvents" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="int" name="compare" />
    <scope>
      <scope />
    </scope>
    <scope>
      <declaration type="Iterator&lt;EventState&gt;" name="iterator" />
      <declaration type="EventState" name="currentEvent" />
      <declaration type="double" name="eventT" />
      <declaration type="double[]" name="eventYPrimary" />
      <declaration type="double[]" name="eventYComplete" />
      <declaration type="int" name="index" />
      <scope />
      <scope />
      <scope />
      <scope />
      <declaration type="boolean" name="needReset" />
      <scope />
      <scope />
      <scope />
    </scope>
    <declaration type="double[]" name="currentY" />
    <scope />
    <scope />
    <comment>initialize the events states if needed</comment>
    <comment>search for next events that may occur during the step</comment>
    <comment>the event occurs during the current step</comment>
    <comment>handle the chronologically first event</comment>
    <comment>restrict the interpolator to the first part of the step, up to the event</comment>
    <comment>get state at event time</comment>
    <comment>advance all event states to current time</comment>
    <comment>handle the first part of the step, up to the event</comment>
    <comment>the event asked to stop integration</comment>
    <comment>some event handler has triggered changes that</comment>
    <comment>invalidate the derivatives, we need to recompute them</comment>
    <comment>prepare handling of the remaining part of the step</comment>
    <comment>check if the same event occurs again in the remaining part of the step</comment>
    <comment>the event occurs during the current step</comment>
    <comment>last part of the step, after the last event</comment>
    <comment>handle the remaining part of the step, after all events if any</comment>
  </method>
  <javadoc>
    <text>Check the integration span.</text>
    <param>equations set of differential equations</param>
    <param>t target time for the integration</param>
    <exception>NumberIsTooSmallException if integration span is too small</exception>
    <exception>DimensionMismatchException if adaptive step size integrators
 * tolerance arrays dimensions are not compatible with equations settings</exception>
  </javadoc>
  <method type="void" name="sanityChecks">
    <declaration type="double" name="threshold" />
    <declaration type="double" name="dt" />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
