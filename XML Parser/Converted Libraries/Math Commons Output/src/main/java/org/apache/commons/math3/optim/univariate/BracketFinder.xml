<?xml version="1.0" encoding="UTF-8"?>
<class name="BracketFinder">
  <javadoc>
    <text>Provide an interval that brackets a local optimum of a function.
 * This code is based on a Python implementation (from &lt;em&gt;SciPy&lt;/em&gt;,
 * module {@code optimize.py} v0.5).</text>
    <version>$Id: BracketFinder.java 1435539 2013-01-19 13:27:24Z tn $</version>
    <since>2.2</since>
  </javadoc>
  <javadoc>
    <text>Tolerance to avoid division by zero.</text>
  </javadoc>
  <declaration type="double" name="EPS_MIN" />
  <javadoc>
    <text>Golden section.</text>
  </javadoc>
  <declaration type="double" name="GOLD" />
  <javadoc>
    <text>Factor for expanding the interval.</text>
  </javadoc>
  <declaration type="double" name="growLimit" />
  <javadoc>
    <text>Counter for function evaluations.</text>
  </javadoc>
  <declaration type="Incrementor" name="evaluations" />
  <javadoc>
    <text>Lower bound of the bracket.</text>
  </javadoc>
  <declaration type="double" name="lo" />
  <javadoc>
    <text>Higher bound of the bracket.</text>
  </javadoc>
  <declaration type="double" name="hi" />
  <javadoc>
    <text>Point inside the bracket.</text>
  </javadoc>
  <declaration type="double" name="mid" />
  <javadoc>
    <text>Function value at {@link #lo}.</text>
  </javadoc>
  <declaration type="double" name="fLo" />
  <javadoc>
    <text>Function value at {@link #hi}.</text>
  </javadoc>
  <declaration type="double" name="fHi" />
  <javadoc>
    <text>Function value at {@link #mid}.</text>
  </javadoc>
  <declaration type="double" name="fMid" />
  <javadoc>
    <text>Constructor with default values {@code 100, 50} (see the{@link #BracketFinder(double,int) other constructor}).</text>
  </javadoc>
  <method type="constructor" name="BracketFinder" />
  <javadoc>
    <text>Create a bracketing interval finder.</text>
    <param>growLimit Expanding factor.</param>
    <param>maxEvaluations Maximum number of evaluations allowed for finding
 * a bracketing interval.</param>
  </javadoc>
  <method type="constructor" name="BracketFinder">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Search new points that bracket a local optimum of the function.</text>
    <param>func Function whose optimum should be bracketed.</param>
    <param>goal {@link GoalType Goal type}.</param>
    <param>xA Initial point.</param>
    <param>xB Initial point.</param>
    <throws>TooManyEvaluationsException if the maximum number of evaluations
 * is exceeded.</throws>
  </javadoc>
  <method type="void" name="search">
    <declaration type="boolean" name="isMinim" />
    <declaration type="double" name="fA" />
    <declaration type="double" name="fB" />
    <scope>
      <declaration type="double" name="tmp" />
    </scope>
    <declaration type="double" name="xC" />
    <declaration type="double" name="fC" />
    <scope>
      <declaration type="double" name="tmp1" />
      <declaration type="double" name="tmp2" />
      <declaration type="double" name="val" />
      <declaration type="double" name="denom" />
      <declaration type="double" name="w" />
      <declaration type="double" name="wLim" />
      <declaration type="double" name="fW" />
      <scope>
        <scope />
        <scope />
      </scope>
      <scope />
      <scope>
        <scope />
      </scope>
      <scope />
    </scope>
    <scope>
      <declaration type="double" name="tmp" />
    </scope>
  </method>
  <javadoc>
    <return>the number of evalutations.</return>
  </javadoc>
  <method type="int" name="getMaxEvaluations" />
  <javadoc>
    <return>the number of evalutations.</return>
  </javadoc>
  <method type="int" name="getEvaluations" />
  <javadoc>
    <return>the lower bound of the bracket.</return>
    <see>#getFLo()</see>
  </javadoc>
  <method type="double" name="getLo" />
  <javadoc>
    <text>Get function value at {@link #getLo()}.</text>
    <return>function value at {@link #getLo()}</return>
  </javadoc>
  <method type="double" name="getFLo" />
  <javadoc>
    <return>the higher bound of the bracket.</return>
    <see>#getFHi()</see>
  </javadoc>
  <method type="double" name="getHi" />
  <javadoc>
    <text>Get function value at {@link #getHi()}.</text>
    <return>function value at {@link #getHi()}</return>
  </javadoc>
  <method type="double" name="getFHi" />
  <javadoc>
    <return>a point in the middle of the bracket.</return>
    <see>#getFMid()</see>
  </javadoc>
  <method type="double" name="getMid" />
  <javadoc>
    <text>Get function value at {@link #getMid()}.</text>
    <return>function value at {@link #getMid()}</return>
  </javadoc>
  <method type="double" name="getFMid" />
  <javadoc>
    <param>f Function.</param>
    <param>x Argument.</param>
    <return>{@code f(x)}</return>
    <throws>TooManyEvaluationsException if the maximal number of evaluations is
 * exceeded.</throws>
  </javadoc>
  <method type="double" name="eval">
    <scope />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
