<?xml version="1.0" encoding="UTF-8"?>
<class name="BaseSecantSolver">
  <javadoc>
    <text>Base class for all bracketing &lt;em&gt;Secant&lt;/em&gt;-based methods for root-finding
 * (approximating a zero of a univariate real function).
 * &lt;p&gt;Implementation of the {@link RegulaFalsiSolver &lt;em&gt;Regula Falsi&lt;/em&gt;} and{@link IllinoisSolver &lt;em&gt;Illinois&lt;/em&gt;} methods is based on the
 * following article: M. Dowell and P. Jarratt,
 * &lt;em&gt;A modified regula falsi method for computing the root of an
 * equation&lt;/em&gt;, BIT Numerical Mathematics, volume 11, number 2,
 * pages 168-174, Springer, 1971.&lt;/p&gt;
 * &lt;p&gt;Implementation of the {@link PegasusSolver &lt;em&gt;Pegasus&lt;/em&gt;} method is
 * based on the following article: M. Dowell and P. Jarratt,
 * &lt;em&gt;The "Pegasus" method for computing the root of an equation&lt;/em&gt;,
 * BIT Numerical Mathematics, volume 12, number 4, pages 503-508, Springer,
 * 1972.&lt;/p&gt;
 * &lt;p&gt;The {@link SecantSolver &lt;em&gt;Secant&lt;/em&gt;} method is &lt;em&gt;not&lt;/em&gt; a
 * bracketing method, so it is not implemented here. It has a separate
 * implementation.&lt;/p&gt;</text>
    <since>3.0</since>
    <version>$Id: BaseSecantSolver.java 1455194 2013-03-11 15:45:54Z luc $</version>
  </javadoc>
  <javadoc>
    <text>Default absolute accuracy.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_ABSOLUTE_ACCURACY" />
  <javadoc>
    <text>The kinds of solutions that the algorithm may accept.</text>
  </javadoc>
  <declaration type="AllowedSolution" name="allowed" />
  <javadoc>
    <text>The &lt;em&gt;Secant&lt;/em&gt;-based root-finding method to use.</text>
  </javadoc>
  <declaration type="Method" name="method" />
  <javadoc>
    <text>Construct a solver.</text>
    <param>absoluteAccuracy Absolute accuracy.</param>
    <param>method &lt;em&gt;Secant&lt;/em&gt;-based root-finding method to use.</param>
  </javadoc>
  <method type="constructor" name="BaseSecantSolver" />
  <javadoc>
    <text>Construct a solver.</text>
    <param>relativeAccuracy Relative accuracy.</param>
    <param>absoluteAccuracy Absolute accuracy.</param>
    <param>method &lt;em&gt;Secant&lt;/em&gt;-based root-finding method to use.</param>
  </javadoc>
  <method type="constructor" name="BaseSecantSolver" />
  <javadoc>
    <text>Construct a solver.</text>
    <param>relativeAccuracy Maximum relative error.</param>
    <param>absoluteAccuracy Maximum absolute error.</param>
    <param>functionValueAccuracy Maximum function value error.</param>
    <param>method &lt;em&gt;Secant&lt;/em&gt;-based root-finding method to use</param>
  </javadoc>
  <method type="constructor" name="BaseSecantSolver" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="solve" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="solve" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="solve" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <throws>ConvergenceException if the algorithm failed due to finite
 * precision.</throws>
  </javadoc>
  <method type="double" name="doSolve">
    <declaration type="double" name="x0" />
    <declaration type="double" name="x1" />
    <declaration type="double" name="f0" />
    <declaration type="double" name="f1" />
    <scope />
    <scope />
    <declaration type="double" name="ftol" />
    <declaration type="double" name="atol" />
    <declaration type="double" name="rtol" />
    <declaration type="boolean" name="inverted" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="fx" />
      <scope />
      <scope />
      <scope>
        <scope />
      </scope>
      <scope>
        <scope />
        <scope />
        <scope />
        <scope />
      </scope>
      <scope />
    </scope>
    <comment>Get initial solution</comment>
    <comment>If one of the bounds is the exact root, return it. Since these are</comment>
    <comment>not under-approximations or over-approximations, we can return them</comment>
    <comment>regardless of the allowed solutions.</comment>
    <comment>Verify bracketing of initial solution.</comment>
    <comment>Get accuracies.</comment>
    <comment>Keep track of inverted intervals, meaning that the left bound is</comment>
    <comment>larger than the right bound.</comment>
    <comment>Keep finding better approximations.</comment>
    <comment>Calculate the next approximation.</comment>
    <comment>If the new approximation is the exact root, return it. Since</comment>
    <comment>this is not an under-approximation or an over-approximation,</comment>
    <comment>we can return it regardless of the allowed solutions.</comment>
    <comment>Update the bounds with the new approximation.</comment>
    <comment>The value of x1 has switched to the other bound, thus inverting</comment>
    <comment>the interval.</comment>
    <comment>Detect early that algorithm is stuck, instead of waiting</comment>
    <comment>for the maximum number of iterations to be exceeded.</comment>
    <comment>Should never happen.</comment>
    <comment>Update from [x0, x1] to [x0, x].</comment>
    <comment>If the function value of the last approximation is too small,</comment>
    <comment>given the function value accuracy, then we can't get closer to</comment>
    <comment>the root than we already are.</comment>
    <comment>If the current interval is within the given accuracies, we</comment>
    <comment>are satisfied with the current approximation.</comment>
  </method>
  <javadoc>
    <text>&lt;em&gt;Secant&lt;/em&gt;-based root-finding methods.</text>
  </javadoc>
  <javadoc>
    <text>The {@link RegulaFalsiSolver &lt;em&gt;Regula Falsi&lt;/em&gt;} or
 * &lt;em&gt;False Position&lt;/em&gt; method.</text>
  </javadoc>
  <javadoc>
    <text>The {@link IllinoisSolver &lt;em&gt;Illinois&lt;/em&gt;} method.</text>
  </javadoc>
  <javadoc>
    <text>The {@link PegasusSolver &lt;em&gt;Pegasus&lt;/em&gt;} method.</text>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
