<?xml version="1.0" encoding="UTF-8"?>
<class name="PascalDistribution">
  <javadoc>
    <text>&lt;p&gt;
 * Implementation of the Pascal distribution. The Pascal distribution is a
 * special case of the Negative Binomial distribution where the number of
 * successes parameter is an integer.
 * &lt;/p&gt;
 * &lt;p&gt;
 * There are various ways to express the probability mass and distribution
 * functions for the Pascal distribution. The present implementation represents
 * the distribution of the number of failures before {@code r} successes occur.
 * This is the convention adopted in e.g.
 * &lt;a href="http://mathworld.wolfram.com/NegativeBinomialDistribution.html"&gt;MathWorld&lt;/a&gt;,
 * but &lt;em&gt;not&lt;/em&gt; in
 * &lt;a href="http://en.wikipedia.org/wiki/Negative_binomial_distribution"&gt;Wikipedia&lt;/a&gt;.
 * &lt;/p&gt;
 * &lt;p&gt;
 * For a random variable {@code X} whose values are distributed according to this
 * distribution, the probability mass function is given by&lt;br/&gt;{@code P(X = k) = C(k + r - 1, r - 1) * p^r * (1 - p)^k,}&lt;br/&gt;
 * where {@code r} is the number of successes, {@code p} is the probability of
 * success, and {@code X} is the total number of failures. {@code C(n, k)} is
 * the binomial coefficient ({@code n} choose {@code k}). The mean and variance
 * of {@code X} are&lt;br/&gt;{@code E(X) = (1 - p) * r / p, var(X) = (1 - p) * r / p^2.}&lt;br/&gt;
 * Finally, the cumulative distribution function is given by&lt;br/&gt;{@code P(X &lt;= k) = I(p, r, k + 1)},
 * where I is the regularized incomplete Beta function.
 * &lt;/p&gt;</text>
    <see>&lt;a href="http://en.wikipedia.org/wiki/Negative_binomial_distribution"&gt;
 * Negative binomial distribution (Wikipedia)&lt;/a&gt;</see>
    <see>&lt;a href="http://mathworld.wolfram.com/NegativeBinomialDistribution.html"&gt;
 * Negative binomial distribution (MathWorld)&lt;/a&gt;</see>
    <version>$Id: PascalDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>1.2 (changed to concrete class in 3.0)</since>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>The number of successes.</text>
  </javadoc>
  <declaration type="int" name="numberOfSuccesses" />
  <javadoc>
    <text>The probability of success.</text>
  </javadoc>
  <declaration type="double" name="probabilityOfSuccess" />
  <javadoc>
    <text>Create a Pascal distribution with the given number of successes and
 * probability of success.</text>
    <param>r Number of successes.</param>
    <param>p Probability of success.</param>
    <throws>NotStrictlyPositiveException if the number of successes is not positive</throws>
    <throws>OutOfRangeException if the probability of success is not in the
 * range {@code [0, 1]}.</throws>
  </javadoc>
  <method type="constructor" name="PascalDistribution" />
  <javadoc>
    <text>Create a Pascal distribution with the given number of successes and
 * probability of success.</text>
    <param>rng Random number generator.</param>
    <param>r Number of successes.</param>
    <param>p Probability of success.</param>
    <throws>NotStrictlyPositiveException if the number of successes is not positive</throws>
    <throws>OutOfRangeException if the probability of success is not in the
 * range {@code [0, 1]}.</throws>
    <since>3.1</since>
  </javadoc>
  <method type="constructor" name="PascalDistribution">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Access the number of successes for this distribution.</text>
    <return>the number of successes.</return>
  </javadoc>
  <method type="int" name="getNumberOfSuccesses" />
  <javadoc>
    <text>Access the probability of success for this distribution.</text>
    <return>the probability of success.</return>
  </javadoc>
  <method type="double" name="getProbabilityOfSuccess" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="probability">
    <declaration type="double" name="ret" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="cumulativeProbability">
    <declaration type="double" name="ret" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}For number of successes {@code r} and probability of success {@code p},
 * the mean is {@code r * (1 - p) / p}.</text>
  </javadoc>
  <method type="double" name="getNumericalMean">
    <declaration type="double" name="p" />
    <declaration type="double" name="r" />
  </method>
  <javadoc>
    <text>{@inheritDoc}For number of successes {@code r} and probability of success {@code p},
 * the variance is {@code r * (1 - p) / p^2}.</text>
  </javadoc>
  <method type="double" name="getNumericalVariance">
    <declaration type="double" name="p" />
    <declaration type="double" name="r" />
  </method>
  <javadoc>
    <text>{@inheritDoc}The lower bound of the support is always 0 no matter the parameters.</text>
    <return>lower bound of the support (always 0)</return>
  </javadoc>
  <method type="int" name="getSupportLowerBound" />
  <javadoc>
    <text>{@inheritDoc}The upper bound of the support is always positive infinity no matter the
 * parameters. Positive infinity is symbolized by {@code Integer.MAX_VALUE}.</text>
    <return>upper bound of the support (always {@code Integer.MAX_VALUE}for positive infinity)</return>
  </javadoc>
  <method type="int" name="getSupportUpperBound" />
  <javadoc>
    <text>{@inheritDoc}The support of this distribution is connected.</text>
    <return>{@code true}</return>
  </javadoc>
  <method type="boolean" name="isSupportConnected" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
