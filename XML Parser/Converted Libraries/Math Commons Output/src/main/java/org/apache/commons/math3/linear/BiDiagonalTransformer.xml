<?xml version="1.0" encoding="UTF-8"?>
<class name="BiDiagonalTransformer">
  <javadoc>
    <text>Class transforming any matrix to bi-diagonal shape.
 * &lt;p&gt;Any m &amp;times; n matrix A can be written as the product of three matrices:
 * A = U &amp;times; B &amp;times; V&lt;sup&gt;T&lt;/sup&gt; with U an m &amp;times; m orthogonal matrix,
 * B an m &amp;times; n bi-diagonal matrix (lower diagonal if m &amp;lt; n, upper diagonal
 * otherwise), and V an n &amp;times; n orthogonal matrix.&lt;/p&gt;
 * &lt;p&gt;Transformation to bi-diagonal shape is often not a goal by itself, but it is
 * an intermediate step in more general decomposition algorithms like {@link SingularValueDecomposition Singular Value Decomposition}. This class is therefore
 * intended for internal use by the library and is not public. As a consequence of
 * this explicitly limited scope, many methods directly returns references to
 * internal arrays, not copies.&lt;/p&gt;</text>
    <version>$Id: BiDiagonalTransformer.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>Householder vectors.</text>
  </javadoc>
  <declaration type="double" name="householderVectors" />
  <javadoc>
    <text>Main diagonal.</text>
  </javadoc>
  <declaration type="double[]" name="main" />
  <javadoc>
    <text>Secondary diagonal.</text>
  </javadoc>
  <declaration type="double[]" name="secondary" />
  <javadoc>
    <text>Cached value of U.</text>
  </javadoc>
  <declaration type="RealMatrix" name="cachedU" />
  <javadoc>
    <text>Cached value of B.</text>
  </javadoc>
  <declaration type="RealMatrix" name="cachedB" />
  <javadoc>
    <text>Cached value of V.</text>
  </javadoc>
  <declaration type="RealMatrix" name="cachedV" />
  <javadoc>
    <text>Build the transformation to bi-diagonal shape of a matrix.</text>
    <param>matrix the matrix to transform.</param>
  </javadoc>
  <method type="constructor" name="BiDiagonalTransformer">
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <declaration type="int" name="p" />
    <scope />
    <scope />
    <comment>transform matrix</comment>
  </method>
  <javadoc>
    <text>Returns the matrix U of the transform.
 * &lt;p&gt;U is an orthogonal matrix, i.e. its transpose is also its inverse.&lt;/p&gt;</text>
    <return>the U matrix</return>
  </javadoc>
  <method type="RealMatrix" name="getU">
    <scope>
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="int" name="p" />
      <declaration type="int" name="diagOffset" />
      <declaration type="double[]" name="diagonal" />
      <declaration type="double[][]" name="ua" />
      <scope />
      <scope>
        <declaration type="double[]" name="hK" />
        <scope>
          <scope>
            <declaration type="double" name="alpha" />
            <scope />
            <scope />
          </scope>
        </scope>
      </scope>
      <scope />
    </scope>
    <comment>fill up the part of the matrix not affected by Householder transforms</comment>
    <comment>build up first part of the matrix by applying Householder transforms</comment>
    <comment>return the cached matrix</comment>
  </method>
  <javadoc>
    <text>Returns the bi-diagonal matrix B of the transform.</text>
    <return>the B matrix</return>
  </javadoc>
  <method type="RealMatrix" name="getB">
    <scope>
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="double[][]" name="ba" />
      <scope>
        <scope>
          <scope />
        </scope>
        <scope>
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>return the cached matrix</comment>
  </method>
  <javadoc>
    <text>Returns the matrix V of the transform.
 * &lt;p&gt;V is an orthogonal matrix, i.e. its transpose is also its inverse.&lt;/p&gt;</text>
    <return>the V matrix</return>
  </javadoc>
  <method type="RealMatrix" name="getV">
    <scope>
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="int" name="p" />
      <declaration type="int" name="diagOffset" />
      <declaration type="double[]" name="diagonal" />
      <declaration type="double[][]" name="va" />
      <scope />
      <scope>
        <declaration type="double[]" name="hK" />
        <scope>
          <scope>
            <declaration type="double" name="beta" />
            <scope />
            <scope />
          </scope>
        </scope>
      </scope>
      <scope />
    </scope>
    <comment>fill up the part of the matrix not affected by Householder transforms</comment>
    <comment>build up first part of the matrix by applying Householder transforms</comment>
    <comment>return the cached matrix</comment>
  </method>
  <javadoc>
    <text>Get the Householder vectors of the transform.
 * &lt;p&gt;Note that since this class is only intended for internal use,
 * it returns directly a reference to its internal arrays, not a copy.&lt;/p&gt;</text>
    <return>the main diagonal elements of the B matrix</return>
  </javadoc>
  <method type="double[][]" name="getHouseholderVectorsRef" />
  <javadoc>
    <text>Get the main diagonal elements of the matrix B of the transform.
 * &lt;p&gt;Note that since this class is only intended for internal use,
 * it returns directly a reference to its internal arrays, not a copy.&lt;/p&gt;</text>
    <return>the main diagonal elements of the B matrix</return>
  </javadoc>
  <method type="double[]" name="getMainDiagonalRef" />
  <javadoc>
    <text>Get the secondary diagonal elements of the matrix B of the transform.
 * &lt;p&gt;Note that since this class is only intended for internal use,
 * it returns directly a reference to its internal arrays, not a copy.&lt;/p&gt;</text>
    <return>the secondary diagonal elements of the B matrix</return>
  </javadoc>
  <method type="double[]" name="getSecondaryDiagonalRef" />
  <javadoc>
    <text>Check if the matrix is transformed to upper bi-diagonal.</text>
    <return>true if the matrix is transformed to upper bi-diagonal</return>
  </javadoc>
  <method type="boolean" name="isUpperBiDiagonal" />
  <javadoc>
    <text>Transform original matrix to upper bi-diagonal form.
 * &lt;p&gt;Transformation is done using alternate Householder transforms
 * on columns and rows.&lt;/p&gt;</text>
  </javadoc>
  <method type="void" name="transformToUpperBiDiagonal">
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <scope>
      <declaration type="double" name="xNormSqr" />
      <scope>
        <declaration type="double" name="c" />
      </scope>
      <declaration type="double[]" name="hK" />
      <declaration type="double" name="a" />
      <scope>
        <scope>
          <declaration type="double" name="alpha" />
          <scope>
            <declaration type="double[]" name="hI" />
          </scope>
          <scope>
            <declaration type="double[]" name="hI" />
          </scope>
        </scope>
      </scope>
      <scope>
        <scope>
          <declaration type="double" name="c" />
        </scope>
        <declaration type="double" name="b" />
        <scope>
          <scope>
            <declaration type="double[]" name="hI" />
            <declaration type="double" name="beta" />
            <scope />
            <scope />
          </scope>
        </scope>
      </scope>
    </scope>
    <comment>zero-out a column</comment>
    <comment>zero-out a row</comment>
  </method>
  <javadoc>
    <text>Transform original matrix to lower bi-diagonal form.
 * &lt;p&gt;Transformation is done using alternate Householder transforms
 * on rows and columns.&lt;/p&gt;</text>
  </javadoc>
  <method type="void" name="transformToLowerBiDiagonal">
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <scope>
      <declaration type="double[]" name="hK" />
      <declaration type="double" name="xNormSqr" />
      <scope>
        <declaration type="double" name="c" />
      </scope>
      <declaration type="double" name="a" />
      <scope>
        <scope>
          <declaration type="double[]" name="hI" />
          <declaration type="double" name="alpha" />
          <scope />
          <scope />
        </scope>
      </scope>
      <scope>
        <declaration type="double[]" name="hKp1" />
        <scope>
          <declaration type="double" name="c" />
        </scope>
        <declaration type="double" name="b" />
        <scope>
          <scope>
            <declaration type="double" name="beta" />
            <scope>
              <declaration type="double[]" name="hI" />
            </scope>
            <scope>
              <declaration type="double[]" name="hI" />
            </scope>
          </scope>
        </scope>
      </scope>
    </scope>
    <comment>zero-out a row</comment>
    <comment>zero-out a column</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
