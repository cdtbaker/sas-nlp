<?xml version="1.0" encoding="UTF-8"?>
<class name="ChiSquareTest">
  <javadoc>
    <text>Implements Chi-Square test statistics.
 * &lt;p&gt;This implementation handles both known and unknown distributions.&lt;/p&gt;
 * &lt;p&gt;Two samples tests can be used when the distribution is unknown &lt;i&gt;a priori&lt;/i&gt;
 * but provided by one sample, or when the hypothesis under test is that the two
 * samples come from the same underlying distribution.&lt;/p&gt;</text>
    <version>$Id: ChiSquareTest.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Construct a ChiSquareTest</text>
  </javadoc>
  <method type="constructor" name="ChiSquareTest" />
  <javadoc>
    <text>Computes the &lt;a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm"&gt;
 * Chi-Square statistic&lt;/a&gt; comparing &lt;code&gt;observed&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt;
 * frequency counts.
 * &lt;p&gt;
 * This statistic can be used to perform a Chi-Square test evaluating the null
 * hypothesis that the observed counts follow the expected distribution.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;Expected counts must all be positive.
 * &lt;/li&gt;
 * &lt;li&gt;Observed counts must all be &amp;ge; 0.
 * &lt;/li&gt;
 * &lt;li&gt;The observed and expected arrays must have the same length and
 * their common length must be at least 2.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;
 * If any of the preconditions are not met, an
 * &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;
 * &lt;p&gt;&lt;strong&gt;Note: &lt;/strong&gt;This implementation rescales the
 * &lt;code&gt;expected&lt;/code&gt; array if necessary to ensure that the sum of the
 * expected and observed counts are equal.&lt;/p&gt;</text>
    <param>observed array of observed frequency counts</param>
    <param>expected array of expected frequency counts</param>
    <return>chiSquare test statistic</return>
    <throws>NotPositiveException if &lt;code&gt;observed&lt;/code&gt; has negative entries</throws>
    <throws>NotStrictlyPositiveException if &lt;code&gt;expected&lt;/code&gt; has entries that are
 * not strictly positive</throws>
    <throws>DimensionMismatchException if the arrays length is less than 2</throws>
  </javadoc>
  <method type="double" name="chiSquare">
    <scope />
    <scope />
    <declaration type="double" name="sumExpected" />
    <declaration type="double" name="sumObserved" />
    <scope />
    <declaration type="double" name="ratio" />
    <declaration type="boolean" name="rescale" />
    <scope />
    <declaration type="double" name="sumSq" />
    <scope>
      <scope>
        <declaration type="double" name="dev" />
      </scope>
      <scope>
        <declaration type="double" name="dev" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or &lt;a href=
 * "http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"&gt;
 * p-value&lt;/a&gt;, associated with a
 * &lt;a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm"&gt;
 * Chi-square goodness of fit test&lt;/a&gt; comparing the &lt;code&gt;observed&lt;/code&gt;
 * frequency counts to those in the &lt;code&gt;expected&lt;/code&gt; array.
 * &lt;p&gt;
 * The number returned is the smallest significance level at which one can reject
 * the null hypothesis that the observed counts conform to the frequency distribution
 * described by the expected counts.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;Expected counts must all be positive.
 * &lt;/li&gt;
 * &lt;li&gt;Observed counts must all be &amp;ge; 0.
 * &lt;/li&gt;
 * &lt;li&gt;The observed and expected arrays must have the same length and
 * their common length must be at least 2.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;
 * If any of the preconditions are not met, an
 * &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;
 * &lt;p&gt;&lt;strong&gt;Note: &lt;/strong&gt;This implementation rescales the
 * &lt;code&gt;expected&lt;/code&gt; array if necessary to ensure that the sum of the
 * expected and observed counts are equal.&lt;/p&gt;</text>
    <param>observed array of observed frequency counts</param>
    <param>expected array of expected frequency counts</param>
    <return>p-value</return>
    <throws>NotPositiveException if &lt;code&gt;observed&lt;/code&gt; has negative entries</throws>
    <throws>NotStrictlyPositiveException if &lt;code&gt;expected&lt;/code&gt; has entries that are
 * not strictly positive</throws>
    <throws>DimensionMismatchException if the arrays length is less than 2</throws>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
  </javadoc>
  <method type="double" name="chiSquareTest">
    <declaration type="ChiSquaredDistribution" name="distribution" />
  </method>
  <javadoc>
    <text>Performs a &lt;a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda35f.htm"&gt;
 * Chi-square goodness of fit test&lt;/a&gt; evaluating the null hypothesis that the
 * observed counts conform to the frequency distribution described by the expected
 * counts, with significance level &lt;code&gt;alpha&lt;/code&gt;.  Returns true iff the null
 * hypothesis can be rejected with 100 * (1 - alpha) percent confidence.
 * &lt;p&gt;
 * &lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
 * To test the hypothesis that &lt;code&gt;observed&lt;/code&gt; follows
 * &lt;code&gt;expected&lt;/code&gt; at the 99% level, use &lt;/p&gt;&lt;p&gt;
 * &lt;code&gt;chiSquareTest(expected, observed, 0.01) &lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;Expected counts must all be positive.
 * &lt;/li&gt;
 * &lt;li&gt;Observed counts must all be &amp;ge; 0.
 * &lt;/li&gt;
 * &lt;li&gt;The observed and expected arrays must have the same length and
 * their common length must be at least 2.
 * &lt;li&gt; &lt;code&gt; 0 &amp;lt; alpha &amp;lt; 0.5 &lt;/code&gt;
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;
 * If any of the preconditions are not met, an
 * &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;
 * &lt;p&gt;&lt;strong&gt;Note: &lt;/strong&gt;This implementation rescales the
 * &lt;code&gt;expected&lt;/code&gt; array if necessary to ensure that the sum of the
 * expected and observed counts are equal.&lt;/p&gt;</text>
    <param>observed array of observed frequency counts</param>
    <param>expected array of expected frequency counts</param>
    <param>alpha significance level of the test</param>
    <return>true iff null hypothesis can be rejected with confidence
 * 1 - alpha</return>
    <throws>NotPositiveException if &lt;code&gt;observed&lt;/code&gt; has negative entries</throws>
    <throws>NotStrictlyPositiveException if &lt;code&gt;expected&lt;/code&gt; has entries that are
 * not strictly positive</throws>
    <throws>DimensionMismatchException if the arrays length is less than 2</throws>
    <throws>OutOfRangeException if &lt;code&gt;alpha&lt;/code&gt; is not in the range (0, 0.5]</throws>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
  </javadoc>
  <method type="boolean" name="chiSquareTest">
    <scope />
  </method>
  <javadoc>
    <text>Computes the Chi-Square statistic associated with a
 * &lt;a href="http://www.itl.nist.gov/div898/handbook/prc/section4/prc45.htm"&gt;
 * chi-square test of independence&lt;/a&gt; based on the input &lt;code&gt;counts&lt;/code&gt;
 * array, viewed as a two-way table.
 * &lt;p&gt;
 * The rows of the 2-way table are
 * &lt;code&gt;count[0], ... , count[count.length - 1] &lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;All counts must be &amp;ge; 0.
 * &lt;/li&gt;
 * &lt;li&gt;The count array must be rectangular (i.e. all count[i] subarrays
 * must have the same length).
 * &lt;/li&gt;
 * &lt;li&gt;The 2-way table represented by &lt;code&gt;counts&lt;/code&gt; must have at
 * least 2 columns and at least 2 rows.
 * &lt;/li&gt;
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;
 * If any of the preconditions are not met, an
 * &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;</text>
    <param>counts array representation of 2-way table</param>
    <return>chiSquare test statistic</return>
    <throws>NullArgumentException if the array is null</throws>
    <throws>DimensionMismatchException if the array is not rectangular</throws>
    <throws>NotPositiveException if {@code counts} has negative entries</throws>
  </javadoc>
  <method type="double" name="chiSquare">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <declaration type="double[]" name="rowSum" />
    <declaration type="double[]" name="colSum" />
    <declaration type="double" name="total" />
    <scope>
      <scope />
    </scope>
    <declaration type="double" name="sumSq" />
    <declaration type="double" name="expected" />
    <scope>
      <scope />
    </scope>
    <comment>compute row, column and total sums</comment>
    <comment>compute expected counts and chi-square</comment>
  </method>
  <javadoc>
    <text>Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or &lt;a href=
 * "http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"&gt;
 * p-value&lt;/a&gt;, associated with a
 * &lt;a href="http://www.itl.nist.gov/div898/handbook/prc/section4/prc45.htm"&gt;
 * chi-square test of independence&lt;/a&gt; based on the input &lt;code&gt;counts&lt;/code&gt;
 * array, viewed as a two-way table.
 * &lt;p&gt;
 * The rows of the 2-way table are
 * &lt;code&gt;count[0], ... , count[count.length - 1] &lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;All counts must be &amp;ge; 0.
 * &lt;/li&gt;
 * &lt;li&gt;The count array must be rectangular (i.e. all count[i] subarrays must have
 * the same length).
 * &lt;/li&gt;
 * &lt;li&gt;The 2-way table represented by &lt;code&gt;counts&lt;/code&gt; must have at least 2
 * columns and at least 2 rows.
 * &lt;/li&gt;
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;
 * If any of the preconditions are not met, an
 * &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;</text>
    <param>counts array representation of 2-way table</param>
    <return>p-value</return>
    <throws>NullArgumentException if the array is null</throws>
    <throws>DimensionMismatchException if the array is not rectangular</throws>
    <throws>NotPositiveException if {@code counts} has negative entries</throws>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
  </javadoc>
  <method type="double" name="chiSquareTest">
    <declaration type="double" name="df" />
    <declaration type="ChiSquaredDistribution" name="distribution" />
  </method>
  <javadoc>
    <text>Performs a &lt;a href="http://www.itl.nist.gov/div898/handbook/prc/section4/prc45.htm"&gt;
 * chi-square test of independence&lt;/a&gt; evaluating the null hypothesis that the
 * classifications represented by the counts in the columns of the input 2-way table
 * are independent of the rows, with significance level &lt;code&gt;alpha&lt;/code&gt;.
 * Returns true iff the null hypothesis can be rejected with 100 * (1 - alpha) percent
 * confidence.
 * &lt;p&gt;
 * The rows of the 2-way table are
 * &lt;code&gt;count[0], ... , count[count.length - 1] &lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
 * To test the null hypothesis that the counts in
 * &lt;code&gt;count[0], ... , count[count.length - 1] &lt;/code&gt;
 * all correspond to the same underlying probability distribution at the 99% level, use&lt;/p&gt;
 * &lt;p&gt;&lt;code&gt;chiSquareTest(counts, 0.01)&lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;All counts must be &amp;ge; 0.
 * &lt;/li&gt;
 * &lt;li&gt;The count array must be rectangular (i.e. all count[i] subarrays must have the
 * same length).&lt;/li&gt;
 * &lt;li&gt;The 2-way table represented by &lt;code&gt;counts&lt;/code&gt; must have at least 2 columns and
 * at least 2 rows.&lt;/li&gt;
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;
 * If any of the preconditions are not met, an
 * &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;</text>
    <param>counts array representation of 2-way table</param>
    <param>alpha significance level of the test</param>
    <return>true iff null hypothesis can be rejected with confidence
 * 1 - alpha</return>
    <throws>NullArgumentException if the array is null</throws>
    <throws>DimensionMismatchException if the array is not rectangular</throws>
    <throws>NotPositiveException if {@code counts} has any negative entries</throws>
    <throws>OutOfRangeException if &lt;code&gt;alpha&lt;/code&gt; is not in the range (0, 0.5]</throws>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
  </javadoc>
  <method type="boolean" name="chiSquareTest">
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;Computes a
 * &lt;a href="http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/chi2samp.htm"&gt;
 * Chi-Square two sample test statistic&lt;/a&gt; comparing bin frequency counts
 * in &lt;code&gt;observed1&lt;/code&gt; and &lt;code&gt;observed2&lt;/code&gt;.  The
 * sums of frequency counts in the two samples are not required to be the
 * same.  The formula used to compute the test statistic is&lt;/p&gt;
 * &lt;code&gt;
 * &amp;sum;[(K * observed1[i] - observed2[i]/K)&lt;sup&gt;2&lt;/sup&gt; / (observed1[i] + observed2[i])]
 * &lt;/code&gt; where
 * &lt;br/&gt;&lt;code&gt;K = &amp;sqrt;[&amp;sum(observed2 / &amp;sum;(observed1)]&lt;/code&gt;
 * &lt;/p&gt;
 * &lt;p&gt;This statistic can be used to perform a Chi-Square test evaluating the
 * null hypothesis that both observed counts follow the same distribution.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;Observed counts must be non-negative.
 * &lt;/li&gt;
 * &lt;li&gt;Observed counts for a specific bin must not both be zero.
 * &lt;/li&gt;
 * &lt;li&gt;Observed counts for a specific sample must not all be 0.
 * &lt;/li&gt;
 * &lt;li&gt;The arrays &lt;code&gt;observed1&lt;/code&gt; and &lt;code&gt;observed2&lt;/code&gt; must have
 * the same length and their common length must be at least 2.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;
 * If any of the preconditions are not met, an
 * &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;</text>
    <param>observed1 array of observed frequency counts of the first data set</param>
    <param>observed2 array of observed frequency counts of the second data set</param>
    <return>chiSquare test statistic</return>
    <throws>DimensionMismatchException the the length of the arrays does not match</throws>
    <throws>NotPositiveException if any entries in &lt;code&gt;observed1&lt;/code&gt; or
 * &lt;code&gt;observed2&lt;/code&gt; are negative</throws>
    <throws>ZeroException if either all counts of &lt;code&gt;observed1&lt;/code&gt; or
 * &lt;code&gt;observed2&lt;/code&gt; are zero, or if the count at some index is zero
 * for both arrays</throws>
    <since>1.2</since>
  </javadoc>
  <method type="double" name="chiSquareDataSetsComparison">
    <scope />
    <scope />
    <declaration type="long" name="countSum1" />
    <declaration type="long" name="countSum2" />
    <declaration type="boolean" name="unequalCounts" />
    <declaration type="double" name="weight" />
    <scope />
    <scope />
    <scope />
    <declaration type="double" name="sumSq" />
    <declaration type="double" name="dev" />
    <declaration type="double" name="obs1" />
    <declaration type="double" name="obs2" />
    <scope>
      <scope />
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>Make sure lengths are same</comment>
    <comment>Ensure non-negative counts</comment>
    <comment>Compute and compare count sums</comment>
    <comment>Ensure neither sample is uniformly 0</comment>
    <comment>Compare and compute weight only if different</comment>
    <comment>Compute ChiSquare statistic</comment>
    <comment>apply weights</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or &lt;a href=
 * "http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"&gt;
 * p-value&lt;/a&gt;, associated with a Chi-Square two sample test comparing
 * bin frequency counts in &lt;code&gt;observed1&lt;/code&gt; and
 * &lt;code&gt;observed2&lt;/code&gt;.
 * &lt;/p&gt;
 * &lt;p&gt;The number returned is the smallest significance level at which one
 * can reject the null hypothesis that the observed counts conform to the
 * same distribution.
 * &lt;/p&gt;
 * &lt;p&gt;See {@link #chiSquareDataSetsComparison(long[],long[])} for details
 * on the formula used to compute the test statistic. The degrees of
 * of freedom used to perform the test is one less than the common length
 * of the input observed count arrays.
 * &lt;/p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;Observed counts must be non-negative.
 * &lt;/li&gt;
 * &lt;li&gt;Observed counts for a specific bin must not both be zero.
 * &lt;/li&gt;
 * &lt;li&gt;Observed counts for a specific sample must not all be 0.
 * &lt;/li&gt;
 * &lt;li&gt;The arrays &lt;code&gt;observed1&lt;/code&gt; and &lt;code&gt;observed2&lt;/code&gt; must
 * have the same length and
 * their common length must be at least 2.
 * &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
 * If any of the preconditions are not met, an
 * &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;</text>
    <param>observed1 array of observed frequency counts of the first data set</param>
    <param>observed2 array of observed frequency counts of the second data set</param>
    <return>p-value</return>
    <throws>DimensionMismatchException the the length of the arrays does not match</throws>
    <throws>NotPositiveException if any entries in &lt;code&gt;observed1&lt;/code&gt; or
 * &lt;code&gt;observed2&lt;/code&gt; are negative</throws>
    <throws>ZeroException if either all counts of &lt;code&gt;observed1&lt;/code&gt; or
 * &lt;code&gt;observed2&lt;/code&gt; are zero, or if the count at the same index is zero
 * for both arrays</throws>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
    <since>1.2</since>
  </javadoc>
  <method type="double" name="chiSquareTestDataSetsComparison">
    <declaration type="ChiSquaredDistribution" name="distribution" />
  </method>
  <javadoc>
    <text>&lt;p&gt;Performs a Chi-Square two sample test comparing two binned data
 * sets. The test evaluates the null hypothesis that the two lists of
 * observed counts conform to the same frequency distribution, with
 * significance level &lt;code&gt;alpha&lt;/code&gt;.  Returns true iff the null
 * hypothesis can be rejected with 100 * (1 - alpha) percent confidence.
 * &lt;/p&gt;
 * &lt;p&gt;See {@link #chiSquareDataSetsComparison(long[],long[])} for
 * details on the formula used to compute the Chisquare statistic used
 * in the test. The degrees of of freedom used to perform the test is
 * one less than the common length of the input observed count arrays.
 * &lt;/p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;Observed counts must be non-negative.
 * &lt;/li&gt;
 * &lt;li&gt;Observed counts for a specific bin must not both be zero.
 * &lt;/li&gt;
 * &lt;li&gt;Observed counts for a specific sample must not all be 0.
 * &lt;/li&gt;
 * &lt;li&gt;The arrays &lt;code&gt;observed1&lt;/code&gt; and &lt;code&gt;observed2&lt;/code&gt; must
 * have the same length and their common length must be at least 2.
 * &lt;/li&gt;
 * &lt;li&gt; &lt;code&gt; 0 &lt; alpha &lt; 0.5 &lt;/code&gt;
 * &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
 * If any of the preconditions are not met, an
 * &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.&lt;/p&gt;</text>
    <param>observed1 array of observed frequency counts of the first data set</param>
    <param>observed2 array of observed frequency counts of the second data set</param>
    <param>alpha significance level of the test</param>
    <return>true iff null hypothesis can be rejected with confidence
 * 1 - alpha</return>
    <throws>DimensionMismatchException the the length of the arrays does not match</throws>
    <throws>NotPositiveException if any entries in &lt;code&gt;observed1&lt;/code&gt; or
 * &lt;code&gt;observed2&lt;/code&gt; are negative</throws>
    <throws>ZeroException if either all counts of &lt;code&gt;observed1&lt;/code&gt; or
 * &lt;code&gt;observed2&lt;/code&gt; are zero, or if the count at the same index is zero
 * for both arrays</throws>
    <throws>OutOfRangeException if &lt;code&gt;alpha&lt;/code&gt; is not in the range (0, 0.5]</throws>
    <throws>MaxCountExceededException if an error occurs performing the test</throws>
    <since>1.2</since>
  </javadoc>
  <method type="boolean" name="chiSquareTestDataSetsComparison">
    <scope />
  </method>
  <javadoc>
    <text>Checks to make sure that the input long[][] array is rectangular,
 * has at least 2 rows and 2 columns, and has all non-negative entries.</text>
    <param>in input 2-way table to check</param>
    <throws>NullArgumentException if the array is null</throws>
    <throws>DimensionMismatchException if the array is not valid</throws>
    <throws>NotPositiveException if the array contains any negative entries</throws>
  </javadoc>
  <method type="void" name="checkArray">
    <scope />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
