<?xml version="1.0" encoding="UTF-8"?>
<class name="Erf">
  <javadoc>
    <text>This is a utility class that provides computation methods related to the
 * error functions.</text>
    <version>$Id: Erf.java 1456905 2013-03-15 11:37:35Z luc $</version>
  </javadoc>
  <javadoc>
    <text>The number {@code X_CRIT} is used by {@link #erf(double,double)} internally.
 * This number solves {@code erf(x)=0.5} within 1ulp.
 * More precisely, the current implementations of{@link #erf(double)} and {@link #erfc(double)} satisfy:&lt;br/&gt;{@code erf(X_CRIT) &lt; 0.5},&lt;br/&gt;{@code erf(Math.nextUp(X_CRIT) &gt; 0.5},&lt;br/&gt;{@code erfc(X_CRIT) = 0.5}, and&lt;br/&gt;{@code erfc(Math.nextUp(X_CRIT) &lt; 0.5}</text>
  </javadoc>
  <declaration type="double" name="X_CRIT" />
  <javadoc>
    <text>Default constructor.  Prohibit instantiation.</text>
  </javadoc>
  <method type="constructor" name="Erf" />
  <javadoc>
    <text>Returns the error function.
 * &lt;p&gt;erf(x) = 2/&amp;radic;&amp;pi; &lt;sub&gt;0&lt;/sub&gt;&amp;int;&lt;sup&gt;x&lt;/sup&gt; e&lt;sup&gt;-t&lt;sup&gt;2&lt;/sup&gt;&lt;/sup&gt;dt &lt;/p&gt;
 * &lt;p&gt;This implementation computes erf(x) using the{@link Gamma#regularizedGammaP(double,double,double,int) regularized gamma function},
 * following &lt;a href="http://mathworld.wolfram.com/Erf.html"&gt; Erf&lt;/a&gt;, equation (3)&lt;/p&gt;
 * &lt;p&gt;The value returned is always between -1 and 1 (inclusive).
 * If {@code abs(x) &gt; 40}, then {@code erf(x)} is indistinguishable from
 * either 1 or -1 as a double, so the appropriate extreme value is returned.
 * &lt;/p&gt;</text>
    <param>x the value.</param>
    <return>the error function erf(x)</return>
    <throws>org.apache.commons.math3.exception.MaxCountExceededExceptionif the algorithm fails to converge.</throws>
    <see>Gamma#regularizedGammaP(double,double,double,int)</see>
  </javadoc>
  <method type="double" name="erf">
    <scope />
    <declaration type="double" name="ret" />
  </method>
  <javadoc>
    <text>Returns the complementary error function.
 * &lt;p&gt;erfc(x) = 2/&amp;radic;&amp;pi; &lt;sub&gt;x&lt;/sub&gt;&amp;int;&lt;sup&gt;&amp;infin;&lt;/sup&gt; e&lt;sup&gt;-t&lt;sup&gt;2&lt;/sup&gt;&lt;/sup&gt;dt
 * &lt;br/&gt;
 * = 1 - {@link #erf(double) erf(x)} &lt;/p&gt;
 * &lt;p&gt;This implementation computes erfc(x) using the{@link Gamma#regularizedGammaQ(double,double,double,int) regularized gamma function},
 * following &lt;a href="http://mathworld.wolfram.com/Erf.html"&gt; Erf&lt;/a&gt;, equation (3).&lt;/p&gt;
 * &lt;p&gt;The value returned is always between 0 and 2 (inclusive).
 * If {@code abs(x) &gt; 40}, then {@code erf(x)} is indistinguishable from
 * either 0 or 2 as a double, so the appropriate extreme value is returned.
 * &lt;/p&gt;</text>
    <param>x the value</param>
    <return>the complementary error function erfc(x)</return>
    <throws>org.apache.commons.math3.exception.MaxCountExceededExceptionif the algorithm fails to converge.</throws>
    <see>Gamma#regularizedGammaQ(double,double,double,int)</see>
    <since>2.2</since>
  </javadoc>
  <method type="double" name="erfc">
    <scope />
    <declaration type="double" name="ret" />
  </method>
  <javadoc>
    <text>Returns the difference between erf(x1) and erf(x2).
 * The implementation uses either erf(double) or erfc(double)
 * depending on which provides the most precise result.</text>
    <param>x1 the first value</param>
    <param>x2 the second value</param>
    <return>erf(x2) - erf(x1)</return>
  </javadoc>
  <method type="double" name="erf">
    <scope />
  </method>
  <javadoc>
    <text>Returns the inverse erf.
 * &lt;p&gt;
 * This implementation is described in the paper:
 * &lt;a href="http://people.maths.ox.ac.uk/gilesm/files/gems_erfinv.pdf"&gt;Approximating
 * the erfinv function&lt;/a&gt; by Mike Giles, Oxford-Man Institute of Quantitative Finance,
 * which was published in GPU Computing Gems, volume 2, 2010.
 * The source code is available &lt;a href="http://gpucomputing.net/?q=node/1828"&gt;here&lt;/a&gt;.
 * &lt;/p&gt;</text>
    <param>x the value</param>
    <return>t such that x = erf(t)</return>
    <since>3.2</since>
  </javadoc>
  <method type="double" name="erfInv">
    <declaration type="double" name="w" />
    <declaration type="double" name="p" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>beware that the logarithm argument must be</comment>
    <comment>commputed as (1.0 - x) * (1.0 + x),</comment>
    <comment>it must NOT be simplified as 1.0 - x * x as this</comment>
    <comment>would induce rounding errors near the boundaries +/-1</comment>
    <comment>this branch does not appears in the original code, it</comment>
    <comment>was added because the previous branch does not handle</comment>
    <comment>x = +/-1 correctly. In this case, w is positive infinity</comment>
    <comment>and as the first coefficient (-2.71e-11) is negative.</comment>
    <comment>Once the first multiplication is done, p becomes negative</comment>
    <comment>infinity and remains so throughout the polynomial evaluation.</comment>
    <comment>So the branch above incorrectly returns negative infinity</comment>
    <comment>instead of the correct positive infinity.</comment>
  </method>
  <javadoc>
    <text>Returns the inverse erfc.</text>
    <param>x the value</param>
    <return>t such that x = erfc(t)</return>
    <since>3.2</since>
  </javadoc>
  <method type="double" name="erfcInv" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
