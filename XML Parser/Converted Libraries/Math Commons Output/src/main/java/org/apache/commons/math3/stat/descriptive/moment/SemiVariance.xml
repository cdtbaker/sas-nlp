<?xml version="1.0" encoding="UTF-8"?>
<class name="SemiVariance">
  <javadoc>
    <text>&lt;p&gt;Computes the semivariance of a set of values with respect to a given cutoff value.
 * We define the &lt;i&gt;downside semivariance&lt;/i&gt; of a set of values &lt;code&gt;x&lt;/code&gt;
 * against the &lt;i&gt;cutoff value&lt;/i&gt; &lt;code&gt;cutoff&lt;/code&gt; to be &lt;br/&gt;
 * &lt;code&gt;&amp;Sigma; (x[i] - target)&lt;sup&gt;2&lt;/sup&gt; / df&lt;/code&gt; &lt;br/&gt;
 * where the sum is taken over all &lt;code&gt;i&lt;/code&gt; such that &lt;code&gt;x[i] &lt; cutoff&lt;/code&gt;
 * and &lt;code&gt;df&lt;/code&gt; is the length of &lt;code&gt;x&lt;/code&gt; (non-bias-corrected) or
 * one less than this number (bias corrected).  The &lt;i&gt;upside semivariance&lt;/i&gt;
 * is defined similarly, with the sum taken over values of &lt;code&gt;x&lt;/code&gt; that
 * exceed the cutoff value.&lt;/p&gt;
 * &lt;p&gt;The cutoff value defaults to the mean, bias correction defaults to &lt;code&gt;true&lt;/code&gt;
 * and the "variance direction" (upside or downside) defaults to downside.  The variance direction
 * and bias correction may be set using property setters or their values can provided as
 * parameters to {@link #evaluate(double[],double,Direction,boolean,int,int)}.&lt;/p&gt;
 * &lt;p&gt;If the input array is null, &lt;code&gt;evaluate&lt;/code&gt; methods throw
 * &lt;code&gt;IllegalArgumentException.&lt;/code&gt;  If the array has length 1, &lt;code&gt;0&lt;/code&gt;
 * is returned, regardless of the value of the &lt;code&gt;cutoff.&lt;/code&gt;
 * &lt;p&gt;&lt;strong&gt;Note that this class is not intended to be threadsafe.&lt;/strong&gt; If
 * multiple threads access an instance of this class concurrently, and one or
 * more of these threads invoke property setters, external synchronization must
 * be provided to ensure correct results.&lt;/p&gt;</text>
    <since>2.1</since>
    <version>$Id: SemiVariance.java 1385386 2012-09-16 22:11:15Z psteitz $</version>
  </javadoc>
  <javadoc>
    <text>The UPSIDE Direction is used to specify that the observations above the
 * cutoff point will be used to calculate SemiVariance.</text>
  </javadoc>
  <declaration type="Direction" name="UPSIDE_VARIANCE" />
  <javadoc>
    <text>The DOWNSIDE Direction is used to specify that the observations below
 * the cutoff point will be used to calculate SemiVariance</text>
  </javadoc>
  <declaration type="Direction" name="DOWNSIDE_VARIANCE" />
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Determines whether or not bias correction is applied when computing the
 * value of the statisic.  True means that bias is corrected.</text>
  </javadoc>
  <declaration type="boolean" name="biasCorrected" />
  <javadoc>
    <text>Determines whether to calculate downside or upside SemiVariance.</text>
  </javadoc>
  <declaration type="Direction" name="varianceDirection" />
  <javadoc>
    <text>Constructs a SemiVariance with default (true) &lt;code&gt;biasCorrected&lt;/code&gt;
 * property and default (Downside) &lt;code&gt;varianceDirection&lt;/code&gt; property.</text>
  </javadoc>
  <method type="constructor" name="SemiVariance" />
  <javadoc>
    <text>Constructs a SemiVariance with the specified &lt;code&gt;biasCorrected&lt;/code&gt;
 * property and default (Downside) &lt;code&gt;varianceDirection&lt;/code&gt; property.</text>
    <param>biasCorrected  setting for bias correction - true means
 * bias will be corrected and is equivalent to using the argumentless
 * constructor</param>
  </javadoc>
  <method type="constructor" name="SemiVariance" />
  <javadoc>
    <text>Constructs a SemiVariance with the specified &lt;code&gt;Direction&lt;/code&gt; property
 * and default (true) &lt;code&gt;biasCorrected&lt;/code&gt; property</text>
    <param>direction  setting for the direction of the SemiVariance
 * to calculate</param>
  </javadoc>
  <method type="constructor" name="SemiVariance" />
  <javadoc>
    <text>Constructs a SemiVariance with the specified &lt;code&gt;isBiasCorrected&lt;/code&gt;
 * property and the specified &lt;code&gt;Direction&lt;/code&gt; property.</text>
    <param>corrected  setting for bias correction - true means
 * bias will be corrected and is equivalent to using the argumentless
 * constructor</param>
    <param>direction  setting for the direction of the SemiVariance
 * to calculate</param>
  </javadoc>
  <method type="constructor" name="SemiVariance" />
  <javadoc>
    <text>Copy constructor, creates a new {@code SemiVariance} identical
 * to the {@code original}</text>
    <param>original the {@code SemiVariance} instance to copy</param>
    <throws>NullArgumentException  if original is null</throws>
  </javadoc>
  <method type="constructor" name="SemiVariance" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="SemiVariance" name="copy">
    <declaration type="SemiVariance" name="result" />
    <comment>No try-catch or advertised exception because args are guaranteed non-null</comment>
  </method>
  <javadoc>
    <text>Copies source to dest.
 * &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;</text>
    <param>source SemiVariance to copy</param>
    <param>dest SemiVariance to copy to</param>
    <throws>NullArgumentException if either source or dest is null</throws>
  </javadoc>
  <method type="void" name="copy" />
  <javadoc>
    <text>&lt;p&gt;Returns the {@link SemiVariance} of the designated values against the mean, using
 * instance properties varianceDirection and biasCorrection.&lt;/p&gt;
 * &lt;p&gt;Returns &lt;code&gt;NaN&lt;/code&gt; if the array is empty and throws
 * &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>start index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the SemiVariance</return>
    <throws>MathIllegalArgumentException if the parameters are not valid</throws>
  </javadoc>
  <method type="double" name="evaluate">
    <declaration type="double" name="m" />
  </method>
  <javadoc>
    <text>This method calculates {@link SemiVariance} for the entire array against the mean, using
 * the current value of the biasCorrection instance property.</text>
    <param>values the input array</param>
    <param>direction the {@link Direction} of the semivariance</param>
    <return>the SemiVariance</return>
    <throws>MathIllegalArgumentException if values is null</throws>
  </javadoc>
  <method type="double" name="evaluate">
    <declaration type="double" name="m" />
  </method>
  <javadoc>
    <text>&lt;p&gt;Returns the {@link SemiVariance} of the designated values against the cutoff, using
 * instance properties variancDirection and biasCorrection.&lt;/p&gt;
 * &lt;p&gt;Returns &lt;code&gt;NaN&lt;/code&gt; if the array is empty and throws
 * &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>cutoff the reference point</param>
    <return>the SemiVariance</return>
    <throws>MathIllegalArgumentException if values is null</throws>
  </javadoc>
  <method type="double" name="evaluate" />
  <javadoc>
    <text>&lt;p&gt;Returns the {@link SemiVariance} of the designated values against the cutoff in the
 * given direction, using the current value of the biasCorrection instance property.&lt;/p&gt;
 * &lt;p&gt;Returns &lt;code&gt;NaN&lt;/code&gt; if the array is empty and throws
 * &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>cutoff the reference point</param>
    <param>direction the {@link Direction} of the semivariance</param>
    <return>the SemiVariance</return>
    <throws>MathIllegalArgumentException if values is null</throws>
  </javadoc>
  <method type="double" name="evaluate" />
  <javadoc>
    <text>&lt;p&gt;Returns the {@link SemiVariance} of the designated values against the cutoff
 * in the given direction with the provided bias correction.&lt;/p&gt;
 * &lt;p&gt;Returns &lt;code&gt;NaN&lt;/code&gt; if the array is empty and throws
 * &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>cutoff the reference point</param>
    <param>direction the {@link Direction} of the semivariance</param>
    <param>corrected the BiasCorrection flag</param>
    <param>start index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the SemiVariance</return>
    <throws>MathIllegalArgumentException if the parameters are not valid</throws>
  </javadoc>
  <method type="double" name="evaluate">
    <scope />
    <scope>
      <scope />
      <scope>
        <declaration type="boolean" name="booleanDirection" />
        <declaration type="double" name="dev" />
        <declaration type="double" name="sumsq" />
        <scope>
          <scope />
        </scope>
        <scope />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Returns true iff biasCorrected property is set to true.</text>
    <return>the value of biasCorrected.</return>
  </javadoc>
  <method type="boolean" name="isBiasCorrected" />
  <javadoc>
    <text>Sets the biasCorrected property.</text>
    <param>biasCorrected new biasCorrected property value</param>
  </javadoc>
  <method type="void" name="setBiasCorrected" />
  <javadoc>
    <text>Returns the varianceDirection property.</text>
    <return>the varianceDirection</return>
  </javadoc>
  <method type="Direction" name="getVarianceDirection" />
  <javadoc>
    <text>Sets the variance direction</text>
    <param>varianceDirection the direction of the semivariance</param>
  </javadoc>
  <method type="void" name="setVarianceDirection" />
  <javadoc>
    <text>The direction of the semivariance - either upside or downside. The direction
 * is represented by boolean, with true corresponding to UPSIDE semivariance.</text>
  </javadoc>
  <javadoc>
    <text>The UPSIDE Direction is used to specify that the observations above the
 * cutoff point will be used to calculate SemiVariance</text>
  </javadoc>
  <javadoc>
    <text>The DOWNSIDE Direction is used to specify that the observations below
 * the cutoff point will be used to calculate SemiVariance</text>
  </javadoc>
  <javadoc>
    <text>boolean value  UPSIDE &lt;-&gt; true</text>
  </javadoc>
  <declaration type="boolean" name="direction" />
  <javadoc>
    <text>Create a Direction with the given value.</text>
    <param>b boolean value representing the Direction. True corresponds to UPSIDE.</param>
  </javadoc>
  <method type="constructor" name="Direction" />
  <javadoc>
    <text>Returns the value of this Direction. True corresponds to UPSIDE.</text>
    <return>true if direction is UPSIDE; false otherwise</return>
  </javadoc>
  <method type="boolean" name="getDirection" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
