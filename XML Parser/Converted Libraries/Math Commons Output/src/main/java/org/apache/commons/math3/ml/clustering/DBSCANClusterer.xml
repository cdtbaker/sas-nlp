<?xml version="1.0" encoding="UTF-8"?>
<class name="DBSCANClusterer">
  <javadoc>
    <text>DBSCAN (density-based spatial clustering of applications with noise) algorithm.
 * &lt;p&gt;
 * The DBSCAN algorithm forms clusters based on the idea of density connectivity, i.e.
 * a point p is density connected to another point q, if there exists a chain of
 * points p&lt;sub&gt;i&lt;/sub&gt;, with i = 1 .. n and p&lt;sub&gt;1&lt;/sub&gt; = p and p&lt;sub&gt;n&lt;/sub&gt; = q,
 * such that each pair &amp;lt;p&lt;sub&gt;i&lt;/sub&gt;, p&lt;sub&gt;i+1&lt;/sub&gt;&amp;gt; is directly density-reachable.
 * A point q is directly density-reachable from point p if it is in the &amp;epsilon;-neighborhood
 * of this point.
 * &lt;p&gt;
 * Any point that is not density-reachable from a formed cluster is treated as noise, and
 * will thus not be present in the result.
 * &lt;p&gt;
 * The algorithm requires two parameters:
 * &lt;ul&gt;
 * &lt;li&gt;eps: the distance that defines the &amp;epsilon;-neighborhood of a point
 * &lt;li&gt;minPoints: the minimum number of density-connected points required to form a cluster
 * &lt;/ul&gt;</text>
    <param>&lt;T&gt;
 *  type of the points to cluster</param>
    <see>&lt;a href="http://en.wikipedia.org/wiki/DBSCAN"&gt;DBSCAN (wikipedia)&lt;/a&gt;</see>
    <see>&lt;a href="http://www.dbs.ifi.lmu.de/Publikationen/Papers/KDD-96.final.frame.pdf"&gt;
 * A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise&lt;/a&gt;</see>
    <version>$Id: DBSCANClusterer.java 1461866 2013-03-27 21:54:36Z tn $</version>
    <since>3.2</since>
  </javadoc>
  <javadoc>
    <text>Maximum radius of the neighborhood to be considered.</text>
  </javadoc>
  <declaration type="double" name="eps" />
  <javadoc>
    <text>Minimum number of points needed for a cluster.</text>
  </javadoc>
  <declaration type="int" name="minPts" />
  <javadoc>
    <text>Status of a point during the clustering process.</text>
  </javadoc>
  <javadoc>
    <text>The point has is considered to be noise.</text>
  </javadoc>
  <javadoc>
    <text>The point is already part of a cluster.</text>
  </javadoc>
  <javadoc>
    <text>Creates a new instance of a DBSCANClusterer.
 * &lt;p&gt;
 * The euclidean distance will be used as default distance measure.</text>
    <param>eps maximum radius of the neighborhood to be considered</param>
    <param>minPts minimum number of points needed for a cluster</param>
    <throws>NotPositiveException if {@code eps &lt; 0.0} or {@code minPts &lt; 0}</throws>
  </javadoc>
  <method type="constructor" name="DBSCANClusterer" />
  <javadoc>
    <text>Creates a new instance of a DBSCANClusterer.</text>
    <param>eps maximum radius of the neighborhood to be considered</param>
    <param>minPts minimum number of points needed for a cluster</param>
    <param>measure the distance measure to use</param>
    <throws>NotPositiveException if {@code eps &lt; 0.0} or {@code minPts &lt; 0}</throws>
  </javadoc>
  <method type="constructor" name="DBSCANClusterer">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Returns the maximum radius of the neighborhood to be considered.</text>
    <return>maximum radius of the neighborhood</return>
  </javadoc>
  <method type="double" name="getEps" />
  <javadoc>
    <text>Returns the minimum number of points needed for a cluster.</text>
    <return>minimum number of points needed for a cluster</return>
  </javadoc>
  <method type="int" name="getMinPts" />
  <javadoc>
    <text>Performs DBSCAN cluster analysis.</text>
    <param>points the points to cluster</param>
    <return>the list of clusters</return>
    <throws>NullArgumentException if the data points are null</throws>
  </javadoc>
  <method type="List&lt;Cluster&lt;T&gt;&gt;" name="cluster">
    <declaration type="List&lt;Cluster&lt;T&gt;&gt;" name="clusters" />
    <declaration type="Map&lt;Clusterable,PointStatus&gt;" name="visited" />
    <scope>
      <scope />
      <declaration type="List&lt;T&gt;" name="neighbors" />
      <scope>
        <declaration type="Cluster&lt;T&gt;" name="cluster" />
      </scope>
      <scope />
    </scope>
    <comment>sanity checks</comment>
    <comment>DBSCAN does not care about center points</comment>
  </method>
  <javadoc>
    <text>Expands the cluster to include density-reachable items.</text>
    <param>cluster Cluster to expand</param>
    <param>point Point to add to cluster</param>
    <param>neighbors List of neighbors</param>
    <param>points the data set</param>
    <param>visited the set of already visited points</param>
    <return>the expanded cluster</return>
  </javadoc>
  <method type="Cluster&lt;T&gt;" name="expandCluster">
    <declaration type="List&lt;T&gt;" name="seeds" />
    <declaration type="int" name="index" />
    <scope>
      <declaration type="T" name="current" />
      <declaration type="PointStatus" name="pStatus" />
      <scope>
        <declaration type="List&lt;T&gt;" name="currentNeighbors" />
        <scope />
      </scope>
      <scope />
    </scope>
    <comment>only check non-visited points</comment>
  </method>
  <javadoc>
    <text>Returns a list of density-reachable neighbors of a {@code point}.</text>
    <param>point the point to look for</param>
    <param>points possible neighbors</param>
    <return>the List of neighbors</return>
  </javadoc>
  <method type="List&lt;T&gt;" name="getNeighbors">
    <declaration type="List&lt;T&gt;" name="neighbors" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Merges two lists together.</text>
    <param>one first list</param>
    <param>two second list</param>
    <return>merged lists</return>
  </javadoc>
  <method type="List&lt;T&gt;" name="merge">
    <declaration type="Set&lt;T&gt;" name="oneSet" />
    <scope>
      <scope />
    </scope>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
