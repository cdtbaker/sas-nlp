<?xml version="1.0" encoding="UTF-8"?>
<class name="Transformer">
  <javadoc>
    <text>Transformer for {@link EventHandler#g(double,double[]) g functions}.</text>
    <see>EventFilter</see>
    <see>FilterType</see>
    <version>$Id: Transformer.java 1458298 2013-03-19 14:09:58Z luc $</version>
    <since>3.2</since>
  </javadoc>
  <javadoc>
    <text>Transformer computing transformed = 0.
 * &lt;p&gt;
 * This transformer is used when we initialize the filter, until we get at
 * least one non-zero value to select the proper transformer.
 * &lt;/p&gt;</text>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="transformed" />
  <javadoc>
    <text>Transformer computing transformed = g.
 * &lt;p&gt;
 * When this transformer is applied, the roots of the original function
 * are preserved, with the same {@code increasing/decreasing} status.
 * &lt;/p&gt;</text>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="transformed" />
  <javadoc>
    <text>Transformer computing transformed = -g.
 * &lt;p&gt;
 * When this transformer is applied, the roots of the original function
 * are preserved, with reversed {@code increasing/decreasing} status.
 * &lt;/p&gt;</text>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="transformed" />
  <javadoc>
    <text>Transformer computing transformed = min(-{@link Precision#SAFE_MIN}, -g, +g).
 * &lt;p&gt;
 * When this transformer is applied, the transformed function is
 * guaranteed to be always strictly negative (i.e. there are no roots).
 * &lt;/p&gt;</text>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="transformed" />
  <javadoc>
    <text>Transformer computing transformed = max(+{@link Precision#SAFE_MIN}, -g, +g).
 * &lt;p&gt;
 * When this transformer is applied, the transformed function is
 * guaranteed to be always strictly positive (i.e. there are no roots).
 * &lt;/p&gt;</text>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="transformed" />
  <method name="transformed" type="double" />
  <javadoc>
    <text>Transform value of function g.</text>
    <param>g raw value of function g</param>
    <return>transformed value of function g</return>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
