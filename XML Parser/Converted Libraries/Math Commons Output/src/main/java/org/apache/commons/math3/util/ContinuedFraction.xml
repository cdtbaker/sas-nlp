<?xml version="1.0" encoding="UTF-8"?>
<class name="ContinuedFraction">
  <javadoc>
    <text>Provides a generic means to evaluate continued fractions.  Subclasses simply
 * provided the a and b coefficients to evaluate the continued fraction.
 * &lt;p&gt;
 * References:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;a href="http://mathworld.wolfram.com/ContinuedFraction.html"&gt;
 * Continued Fraction&lt;/a&gt;&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;</text>
    <version>$Id: ContinuedFraction.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Maximum allowed numerical error.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_EPSILON" />
  <javadoc>
    <text>Default constructor.</text>
  </javadoc>
  <method type="constructor" name="ContinuedFraction" />
  <method name="getA" type="double" />
  <javadoc>
    <text>Access the n-th a coefficient of the continued fraction.  Since a can be
 * a function of the evaluation point, x, that is passed in as well.</text>
    <param>n the coefficient index to retrieve.</param>
    <param>x the evaluation point.</param>
    <return>the n-th a coefficient.</return>
  </javadoc>
  <method name="getB" type="double" />
  <javadoc>
    <text>Access the n-th b coefficient of the continued fraction.  Since b can be
 * a function of the evaluation point, x, that is passed in as well.</text>
    <param>n the coefficient index to retrieve.</param>
    <param>x the evaluation point.</param>
    <return>the n-th b coefficient.</return>
  </javadoc>
  <javadoc>
    <text>Evaluates the continued fraction at the value x.</text>
    <param>x the evaluation point.</param>
    <return>the value of the continued fraction evaluated at x.</return>
    <throws>ConvergenceException if the algorithm fails to converge.</throws>
  </javadoc>
  <method type="double" name="evaluate" />
  <javadoc>
    <text>Evaluates the continued fraction at the value x.</text>
    <param>x the evaluation point.</param>
    <param>epsilon maximum error allowed.</param>
    <return>the value of the continued fraction evaluated at x.</return>
    <throws>ConvergenceException if the algorithm fails to converge.</throws>
  </javadoc>
  <method type="double" name="evaluate" />
  <javadoc>
    <text>Evaluates the continued fraction at the value x.</text>
    <param>x the evaluation point.</param>
    <param>maxIterations maximum number of convergents</param>
    <return>the value of the continued fraction evaluated at x.</return>
    <throws>ConvergenceException if the algorithm fails to converge.</throws>
    <throws>MaxCountExceededException if maximal number of iterations is reached</throws>
  </javadoc>
  <method type="double" name="evaluate" />
  <javadoc>
    <text>Evaluates the continued fraction at the value x.
 * &lt;p&gt;
 * The implementation of this method is based on the modified Lentz algorithm as described
 * on page 18 ff. in:
 * &lt;ul&gt;
 * &lt;li&gt;
 * I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
 * &lt;a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf"&gt;
 * http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf&lt;/a&gt;
 * &lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;b&gt;Note:&lt;/b&gt; the implementation uses the terms a&lt;sub&gt;i&lt;/sub&gt; and b&lt;sub&gt;i&lt;/sub&gt; as defined in
 * &lt;a href="http://mathworld.wolfram.com/ContinuedFraction.html"&gt;Continued Fraction @ MathWorld&lt;/a&gt;.
 * &lt;/p&gt;</text>
    <param>x the evaluation point.</param>
    <param>epsilon maximum error allowed.</param>
    <param>maxIterations maximum number of convergents</param>
    <return>the value of the continued fraction evaluated at x.</return>
    <throws>ConvergenceException if the algorithm fails to converge.</throws>
    <throws>MaxCountExceededException if maximal number of iterations is reached</throws>
  </javadoc>
  <method type="double" name="evaluate">
    <declaration type="double" name="small" />
    <declaration type="double" name="hPrev" />
    <scope />
    <declaration type="int" name="n" />
    <declaration type="double" name="dPrev" />
    <declaration type="double" name="cPrev" />
    <declaration type="double" name="hN" />
    <scope>
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
      <declaration type="double" name="dN" />
      <scope />
      <declaration type="double" name="cN" />
      <scope />
      <declaration type="double" name="deltaN" />
      <scope />
      <scope />
      <scope />
    </scope>
    <scope />
    <comment>use the value of small as epsilon criteria for zero checks</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
