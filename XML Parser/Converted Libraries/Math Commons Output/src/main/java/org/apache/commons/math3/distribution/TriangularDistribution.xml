<?xml version="1.0" encoding="UTF-8"?>
<class name="TriangularDistribution">
  <javadoc>
    <text>Implementation of the triangular real distribution.</text>
    <see>&lt;a href="http://en.wikipedia.org/wiki/Triangular_distribution"&gt;
 * Triangular distribution (Wikipedia)&lt;/a&gt;</see>
    <version>$Id: TriangularDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Lower limit of this distribution (inclusive).</text>
  </javadoc>
  <declaration type="double" name="a" />
  <javadoc>
    <text>Upper limit of this distribution (inclusive).</text>
  </javadoc>
  <declaration type="double" name="b" />
  <javadoc>
    <text>Mode of this distribution.</text>
  </javadoc>
  <declaration type="double" name="c" />
  <javadoc>
    <text>Inverse cumulative probability accuracy.</text>
  </javadoc>
  <declaration type="double" name="solverAbsoluteAccuracy" />
  <javadoc>
    <text>Creates a triangular real distribution using the given lower limit,
 * upper limit, and mode.</text>
    <param>a Lower limit of this distribution (inclusive).</param>
    <param>b Upper limit of this distribution (inclusive).</param>
    <param>c Mode of this distribution.</param>
    <throws>NumberIsTooLargeException if {@code a &gt;= b} or if {@code c &gt; b}.</throws>
    <throws>NumberIsTooSmallException if {@code c &lt; a}.</throws>
  </javadoc>
  <method type="constructor" name="TriangularDistribution" />
  <javadoc>
    <text>Creates a triangular distribution.</text>
    <param>rng Random number generator.</param>
    <param>a Lower limit of this distribution (inclusive).</param>
    <param>b Upper limit of this distribution (inclusive).</param>
    <param>c Mode of this distribution.</param>
    <throws>NumberIsTooLargeException if {@code a &gt;= b} or if {@code c &gt; b}.</throws>
    <throws>NumberIsTooSmallException if {@code c &lt; a}.</throws>
    <since>3.1</since>
  </javadoc>
  <method type="constructor" name="TriangularDistribution">
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Returns the mode {@code c} of this distribution.</text>
    <return>the mode {@code c} of this distribution</return>
  </javadoc>
  <method type="double" name="getMode" />
  <javadoc>
    <text>{@inheritDoc}&lt;p&gt;
 * For this distribution, the returned value is not really meaningful,
 * since exact formulas are implemented for the computation of the{@link #inverseCumulativeProbability(double)} (no solver is invoked).
 * &lt;/p&gt;
 * &lt;p&gt;
 * For lower limit {@code a} and upper limit {@code b}, the current
 * implementation returns {@code max(ulp(a), ulp(b)}.
 * &lt;/p&gt;</text>
  </javadoc>
  <method type="double" name="getSolverAbsoluteAccuracy" />
  <javadoc>
    <text>{@inheritDoc}For lower limit {@code a}, upper limit {@code b} and mode {@code c}, the
 * PDF is given by
 * &lt;ul&gt;
 * &lt;li&gt;{@code 2 * (x - a) / [(b - a) * (c - a)]} if {@code a &lt;= x &lt; c},&lt;/li&gt;
 * &lt;li&gt;{@code 2 / (b - a)} if {@code x = c},&lt;/li&gt;
 * &lt;li&gt;{@code 2 * (b - x) / [(b - a) * (b - c)]} if {@code c &lt; x &lt;= b},&lt;/li&gt;
 * &lt;li&gt;{@code 0} otherwise.
 * &lt;/ul&gt;</text>
  </javadoc>
  <method type="double" name="density">
    <scope />
    <scope>
      <declaration type="double" name="divident" />
      <declaration type="double" name="divisor" />
    </scope>
    <scope />
    <scope>
      <declaration type="double" name="divident" />
      <declaration type="double" name="divisor" />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}For lower limit {@code a}, upper limit {@code b} and mode {@code c}, the
 * CDF is given by
 * &lt;ul&gt;
 * &lt;li&gt;{@code 0} if {@code x &lt; a},&lt;/li&gt;
 * &lt;li&gt;{@code (x - a)^2 / [(b - a) * (c - a)]} if {@code a &lt;= x &lt; c},&lt;/li&gt;
 * &lt;li&gt;{@code (c - a) / (b - a)} if {@code x = c},&lt;/li&gt;
 * &lt;li&gt;{@code 1 - (b - x)^2 / [(b - a) * (b - c)]} if {@code c &lt; x &lt;= b},&lt;/li&gt;
 * &lt;li&gt;{@code 1} if {@code x &gt; b}.&lt;/li&gt;
 * &lt;/ul&gt;</text>
  </javadoc>
  <method type="double" name="cumulativeProbability">
    <scope />
    <scope>
      <declaration type="double" name="divident" />
      <declaration type="double" name="divisor" />
    </scope>
    <scope />
    <scope>
      <declaration type="double" name="divident" />
      <declaration type="double" name="divisor" />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}For lower limit {@code a}, upper limit {@code b}, and mode {@code c},
 * the mean is {@code (a + b + c) / 3}.</text>
  </javadoc>
  <method type="double" name="getNumericalMean" />
  <javadoc>
    <text>{@inheritDoc}For lower limit {@code a}, upper limit {@code b}, and mode {@code c},
 * the variance is {@code (a^2 + b^2 + c^2 - a * b - a * c - b * c) / 18}.</text>
  </javadoc>
  <method type="double" name="getNumericalVariance" />
  <javadoc>
    <text>{@inheritDoc}The lower bound of the support is equal to the lower limit parameter{@code a} of the distribution.</text>
    <return>lower bound of the support</return>
  </javadoc>
  <method type="double" name="getSupportLowerBound" />
  <javadoc>
    <text>{@inheritDoc}The upper bound of the support is equal to the upper limit parameter{@code b} of the distribution.</text>
    <return>upper bound of the support</return>
  </javadoc>
  <method type="double" name="getSupportUpperBound" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSupportLowerBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSupportUpperBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}The support of this distribution is connected.</text>
    <return>{@code true}</return>
  </javadoc>
  <method type="boolean" name="isSupportConnected" />
  <method type="double" name="inverseCumulativeProbability">
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
