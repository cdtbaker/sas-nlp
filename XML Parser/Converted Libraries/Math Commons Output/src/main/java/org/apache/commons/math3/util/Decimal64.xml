<?xml version="1.0" encoding="UTF-8"?>
<class name="Decimal64">
  <javadoc>
    <text>This class wraps a {@code double} value in an object. It is similar to the
 * standard class {@link Double}, while also implementing the{@link RealFieldElement} interface.</text>
    <since>3.1</since>
    <version>$Id: Decimal64.java 1462423 2013-03-29 07:25:18Z luc $</version>
  </javadoc>
  <javadoc>
    <text>The constant value of {@code 0d} as a {@code Decimal64}.</text>
  </javadoc>
  <declaration type="Decimal64" name="ZERO" />
  <javadoc>
    <text>The constant value of {@code 1d} as a {@code Decimal64}.</text>
  </javadoc>
  <declaration type="Decimal64" name="ONE" />
  <javadoc>
    <text>The constant value of {@link Double#NEGATIVE_INFINITY} as a{@code Decimal64}.</text>
  </javadoc>
  <declaration type="Decimal64" name="NEGATIVE_INFINITY" />
  <javadoc>
    <text>The constant value of {@link Double#POSITIVE_INFINITY} as a{@code Decimal64}.</text>
  </javadoc>
  <declaration type="Decimal64" name="POSITIVE_INFINITY" />
  <javadoc>
    <text>The constant value of {@link Double#NaN} as a {@code Decimal64}.</text>
  </javadoc>
  <declaration type="Decimal64" name="NAN" />
  <javadoc />
  <declaration type="long" name="serialVersionUID" />
  <scope />
  <javadoc>
    <text>The primitive {@code double} value of this object.</text>
  </javadoc>
  <declaration type="double" name="value" />
  <javadoc>
    <text>Creates a new instance of this class.</text>
    <param>x the primitive {@code double} value of the object to be created</param>
  </javadoc>
  <method type="constructor" name="Decimal64" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Field&lt;Decimal64&gt;" name="getField" />
  <javadoc>
    <text>{@inheritDoc}The current implementation strictly enforces{@code this.add(a).equals(new Decimal64(this.doubleValue()
 * + a.doubleValue()))}.</text>
  </javadoc>
  <method type="Decimal64" name="add" />
  <javadoc>
    <text>{@inheritDoc}The current implementation strictly enforces{@code this.subtract(a).equals(new Decimal64(this.doubleValue()
 * - a.doubleValue()))}.</text>
  </javadoc>
  <method type="Decimal64" name="subtract" />
  <javadoc>
    <text>{@inheritDoc}The current implementation strictly enforces{@code this.negate().equals(new Decimal64(-this.doubleValue()))}.</text>
  </javadoc>
  <method type="Decimal64" name="negate" />
  <javadoc>
    <text>{@inheritDoc}The current implementation strictly enforces{@code this.multiply(a).equals(new Decimal64(this.doubleValue()
 * * a.doubleValue()))}.</text>
  </javadoc>
  <method type="Decimal64" name="multiply" />
  <javadoc>
    <text>{@inheritDoc}The current implementation strictly enforces{@code this.multiply(n).equals(new Decimal64(n * this.doubleValue()))}.</text>
  </javadoc>
  <method type="Decimal64" name="multiply" />
  <javadoc>
    <text>{@inheritDoc}The current implementation strictly enforces{@code this.divide(a).equals(new Decimal64(this.doubleValue()
 * / a.doubleValue()))}.</text>
  </javadoc>
  <method type="Decimal64" name="divide" />
  <javadoc>
    <text>{@inheritDoc}The current implementation strictly enforces{@code this.reciprocal().equals(new Decimal64(1.0
 * / this.doubleValue()))}.</text>
  </javadoc>
  <method type="Decimal64" name="reciprocal" />
  <javadoc>
    <text>{@inheritDoc}The current implementation performs casting to a {@code byte}.</text>
  </javadoc>
  <method type="byte" name="byteValue" />
  <javadoc>
    <text>{@inheritDoc}The current implementation performs casting to a {@code short}.</text>
  </javadoc>
  <method type="short" name="shortValue" />
  <javadoc>
    <text>{@inheritDoc}The current implementation performs casting to a {@code int}.</text>
  </javadoc>
  <method type="int" name="intValue" />
  <javadoc>
    <text>{@inheritDoc}The current implementation performs casting to a {@code long}.</text>
  </javadoc>
  <method type="long" name="longValue" />
  <javadoc>
    <text>{@inheritDoc}The current implementation performs casting to a {@code float}.</text>
  </javadoc>
  <method type="float" name="floatValue" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="doubleValue" />
  <javadoc>
    <text>{@inheritDoc}The current implementation returns the same value as
 * &lt;center&gt; {@code new Double(this.doubleValue()).compareTo(new
 * Double(o.doubleValue()))} &lt;/center&gt;</text>
    <see>Double#compareTo(Double)</see>
  </javadoc>
  <method type="int" name="compareTo" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="equals">
    <scope>
      <declaration type="Decimal64" name="that" />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}The current implementation returns the same value as{@code new Double(this.doubleValue()).hashCode()}</text>
    <see>Double#hashCode()</see>
  </javadoc>
  <method type="int" name="hashCode">
    <declaration type="long" name="v" />
  </method>
  <javadoc>
    <text>{@inheritDoc}The returned {@code String} is equal to{@code Double.toString(this.doubleValue())}</text>
    <see>Double#toString(double)</see>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>Returns {@code true} if {@code this} double precision number is infinite
 * ({@link Double#POSITIVE_INFINITY} or {@link Double#NEGATIVE_INFINITY}).</text>
    <return>{@code true} if {@code this} number is infinite</return>
  </javadoc>
  <method type="boolean" name="isInfinite" />
  <javadoc>
    <text>Returns {@code true} if {@code this} double precision number is
 * Not-a-Number ({@code NaN}), false otherwise.</text>
    <return>{@code true} if {@code this} is {@code NaN}</return>
  </javadoc>
  <method type="boolean" name="isNaN" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="double" name="getReal" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="add" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="subtract" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="multiply" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="divide" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="remainder" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="remainder" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="abs" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="ceil" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="floor" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="rint" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="long" name="round" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="signum" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="copySign" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="copySign" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="scalb" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="hypot" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="sqrt" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="cbrt" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="rootN">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="pow" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="pow" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="pow" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="exp" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="expm1" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="log" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="log1p" />
  <javadoc>
    <text>Base 10 logarithm.</text>
    <return>base 10 logarithm of the instance</return>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="log10" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="cos" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="sin" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="tan" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="acos" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="asin" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="atan" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="atan2" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="cosh" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="sinh" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="tanh" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="acosh" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="asinh" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="atanh" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="linearCombination">
    <scope />
    <declaration type="double[]" name="aDouble" />
    <declaration type="double[]" name="bDouble" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="linearCombination">
    <scope />
    <declaration type="double[]" name="bDouble" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="linearCombination" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="linearCombination" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="linearCombination" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="linearCombination" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="linearCombination" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="Decimal64" name="linearCombination" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>Methods from the FieldElement interface.</comment>
  <comment>Methods from the Number abstract class</comment>
  <comment>Methods from the Comparable interface.</comment>
  <comment>Methods from the Object abstract class.</comment>
  <comment>Methods inspired by the Double class.</comment>
</class>
