<?xml version="1.0" encoding="UTF-8"?>
<class name="Hyperplane">
  <javadoc>
    <text>This interface represents an hyperplane of a space.
 * &lt;p&gt;The most prominent place where hyperplane appears in space
 * partitioning is as cutters. Each partitioning node in a {@link BSPTree BSP tree} has a cut {@link SubHyperplane sub-hyperplane}which is either an hyperplane or a part of an hyperplane. In an
 * n-dimensions euclidean space, an hyperplane is an (n-1)-dimensions
 * hyperplane (for example a traditional plane in the 3D euclidean
 * space). They can be more exotic objects in specific fields, for
 * example a circle on the surface of the unit sphere.&lt;/p&gt;</text>
    <param>&lt;S&gt;
 *  Type of the space.</param>
    <version>$Id: Hyperplane.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>3.0</since>
  </javadoc>
  <method name="copySelf" type="Hyperplane&lt;S&gt;" />
  <javadoc>
    <text>Copy the instance.
 * &lt;p&gt;The instance created is completely independant of the original
 * one. A deep copy is used, none of the underlying objects are
 * shared (except for immutable objects).&lt;/p&gt;</text>
    <return>a new hyperplane, copy of the instance</return>
  </javadoc>
  <method name="getOffset" type="double" />
  <javadoc>
    <text>Get the offset (oriented distance) of a point.
 * &lt;p&gt;The offset is 0 if the point is on the underlying hyperplane,
 * it is positive if the point is on one particular side of the
 * hyperplane, and it is negative if the point is on the other side,
 * according to the hyperplane natural orientation.&lt;/p&gt;</text>
    <param>point point to check</param>
    <return>offset of the point</return>
  </javadoc>
  <method name="sameOrientationAs" type="boolean" />
  <javadoc>
    <text>Check if the instance has the same orientation as another hyperplane.
 * &lt;p&gt;This method is expected to be called on parallel hyperplanes. The
 * method should &lt;em&gt;not&lt;/em&gt; re-check for parallelism, only for
 * orientation, typically by testing something like the sign of the
 * dot-products of normals.&lt;/p&gt;</text>
    <param>other other hyperplane to check against the instance</param>
    <return>true if the instance and the other hyperplane have
 * the same orientation</return>
  </javadoc>
  <method name="wholeHyperplane" type="SubHyperplane&lt;S&gt;" />
  <javadoc>
    <text>Build a sub-hyperplane covering the whole hyperplane.</text>
    <return>a sub-hyperplane covering the whole hyperplane</return>
  </javadoc>
  <method name="wholeSpace" type="Region&lt;S&gt;" />
  <javadoc>
    <text>Build a region covering the whole space.</text>
    <return>a region containing the instance</return>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
