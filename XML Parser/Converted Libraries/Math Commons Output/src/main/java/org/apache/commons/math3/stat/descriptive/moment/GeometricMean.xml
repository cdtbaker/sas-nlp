<?xml version="1.0" encoding="UTF-8"?>
<class name="GeometricMean">
  <javadoc>
    <text>Returns the &lt;a href="http://www.xycoon.com/geometric_mean.htm"&gt;
 * geometric mean &lt;/a&gt; of the available values.
 * &lt;p&gt;
 * Uses a {@link SumOfLogs} instance to compute sum of logs and returns
 * &lt;code&gt; exp( 1/n  (sum of logs) ).&lt;/code&gt;  Therefore, &lt;/p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;If any of values are &lt; 0, the result is &lt;code&gt;NaN.&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;If all values are non-negative and less than
 * &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt;,  but at least one value is 0, the
 * result is &lt;code&gt;0.&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;If both &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt; and
 * &lt;code&gt;Double.NEGATIVE_INFINITY&lt;/code&gt; are among the values, the result is
 * &lt;code&gt;NaN.&lt;/code&gt;&lt;/li&gt;
 * &lt;/ul&gt; &lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
 * multiple threads access an instance of this class concurrently, and at least
 * one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
 * &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.&lt;/p&gt;</text>
    <version>$Id: GeometricMean.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Wrapped SumOfLogs instance</text>
  </javadoc>
  <declaration type="StorelessUnivariateStatistic" name="sumOfLogs" />
  <javadoc>
    <text>Create a GeometricMean instance</text>
  </javadoc>
  <method type="constructor" name="GeometricMean" />
  <javadoc>
    <text>Copy constructor, creates a new {@code GeometricMean} identical
 * to the {@code original}</text>
    <param>original the {@code GeometricMean} instance to copy</param>
    <throws>NullArgumentException if original is null</throws>
  </javadoc>
  <method type="constructor" name="GeometricMean" />
  <javadoc>
    <text>Create a GeometricMean instance using the given SumOfLogs instance</text>
    <param>sumOfLogs sum of logs instance to use for computation</param>
  </javadoc>
  <method type="constructor" name="GeometricMean" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="GeometricMean" name="copy">
    <declaration type="GeometricMean" name="result" />
    <comment>no try-catch or advertised exception because args guaranteed non-null</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="increment" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getResult">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="clear" />
  <javadoc>
    <text>Returns the geometric mean of the entries in the specified portion
 * of the input array.
 * &lt;p&gt;
 * See {@link GeometricMean} for details on the computing algorithm.&lt;/p&gt;
 * &lt;p&gt;
 * Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;</text>
    <param>values input array containing the values</param>
    <param>begin first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the geometric mean or Double.NaN if length = 0 or
 * any of the values are &amp;lt;= 0.</return>
    <throws>MathIllegalArgumentException if the input array is null or the array
 * index parameters are not valid</throws>
  </javadoc>
  <method type="double" name="evaluate" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="long" name="getN" />
  <javadoc>
    <text>&lt;p&gt;Sets the implementation for the sum of logs.&lt;/p&gt;
 * &lt;p&gt;This method must be activated before any data has been added - i.e.,
 * before {@link #increment(double) increment} has been used to add data;
 * otherwise an IllegalStateException will be thrown.&lt;/p&gt;</text>
    <param>sumLogImpl the StorelessUnivariateStatistic instance to use
 * for computing the log sum</param>
    <throws>MathIllegalStateException if data has already been added
 * (i.e if n &gt; 0)</throws>
  </javadoc>
  <method type="void" name="setSumLogImpl" />
  <javadoc>
    <text>Returns the currently configured sum of logs implementation</text>
    <return>the StorelessUnivariateStatistic implementing the log sum</return>
  </javadoc>
  <method type="StorelessUnivariateStatistic" name="getSumLogImpl" />
  <javadoc>
    <text>Copies source to dest.
 * &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;</text>
    <param>source GeometricMean to copy</param>
    <param>dest GeometricMean to copy to</param>
    <throws>NullArgumentException if either source or dest is null</throws>
  </javadoc>
  <method type="void" name="copy" />
  <javadoc>
    <text>Throws MathIllegalStateException if n &gt; 0.</text>
    <throws>MathIllegalStateException if data has been added to this statistic</throws>
  </javadoc>
  <method type="void" name="checkEmpty">
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
