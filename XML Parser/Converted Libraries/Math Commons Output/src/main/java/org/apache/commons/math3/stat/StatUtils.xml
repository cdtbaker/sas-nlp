<?xml version="1.0" encoding="UTF-8"?>
<class name="StatUtils">
  <javadoc>
    <text>StatUtils provides static methods for computing statistics based on data
 * stored in double[] arrays.</text>
    <version>$Id: StatUtils.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>sum</text>
  </javadoc>
  <declaration type="UnivariateStatistic" name="SUM" />
  <javadoc>
    <text>sumSq</text>
  </javadoc>
  <declaration type="UnivariateStatistic" name="SUM_OF_SQUARES" />
  <javadoc>
    <text>prod</text>
  </javadoc>
  <declaration type="UnivariateStatistic" name="PRODUCT" />
  <javadoc>
    <text>sumLog</text>
  </javadoc>
  <declaration type="UnivariateStatistic" name="SUM_OF_LOGS" />
  <javadoc>
    <text>min</text>
  </javadoc>
  <declaration type="UnivariateStatistic" name="MIN" />
  <javadoc>
    <text>max</text>
  </javadoc>
  <declaration type="UnivariateStatistic" name="MAX" />
  <javadoc>
    <text>mean</text>
  </javadoc>
  <declaration type="UnivariateStatistic" name="MEAN" />
  <javadoc>
    <text>variance</text>
  </javadoc>
  <declaration type="Variance" name="VARIANCE" />
  <javadoc>
    <text>percentile</text>
  </javadoc>
  <declaration type="Percentile" name="PERCENTILE" />
  <javadoc>
    <text>geometric mean</text>
  </javadoc>
  <declaration type="GeometricMean" name="GEOMETRIC_MEAN" />
  <javadoc>
    <text>Private Constructor</text>
  </javadoc>
  <method type="constructor" name="StatUtils" />
  <javadoc>
    <text>Returns the sum of the values in the input array, or
 * &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the input array
 * is null.&lt;/p&gt;</text>
    <param>values  array of values to sum</param>
    <return>the sum of the values or &lt;code&gt;Double.NaN&lt;/code&gt; if the array
 * is empty</return>
    <throws>MathIllegalArgumentException if the array is null</throws>
  </javadoc>
  <method type="double" name="sum" />
  <javadoc>
    <text>Returns the sum of the entries in the specified portion of
 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
 * is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the sum of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
  </javadoc>
  <method type="double" name="sum" />
  <javadoc>
    <text>Returns the sum of the squares of the entries in the input array, or
 * &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;</text>
    <param>values  input array</param>
    <return>the sum of the squared values or &lt;code&gt;Double.NaN&lt;/code&gt; if the
 * array is empty</return>
    <throws>MathIllegalArgumentException if the array is null</throws>
  </javadoc>
  <method type="double" name="sumSq" />
  <javadoc>
    <text>Returns the sum of the squares of the entries in the specified portion of
 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
 * is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the sum of the squares of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
  </javadoc>
  <method type="double" name="sumSq" />
  <javadoc>
    <text>Returns the product of the entries in the input array, or
 * &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;</text>
    <param>values the input array</param>
    <return>the product of the values or Double.NaN if the array is empty</return>
    <throws>MathIllegalArgumentException if the array is null</throws>
  </javadoc>
  <method type="double" name="product" />
  <javadoc>
    <text>Returns the product of the entries in the specified portion of
 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
 * is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the product of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
  </javadoc>
  <method type="double" name="product" />
  <javadoc>
    <text>Returns the sum of the natural logs of the entries in the input array, or
 * &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
 * &lt;p&gt;
 * See {@link org.apache.commons.math3.stat.descriptive.summary.SumOfLogs}.
 * &lt;/p&gt;</text>
    <param>values the input array</param>
    <return>the sum of the natural logs of the values or Double.NaN if
 * the array is empty</return>
    <throws>MathIllegalArgumentException if the array is null</throws>
  </javadoc>
  <method type="double" name="sumLog" />
  <javadoc>
    <text>Returns the sum of the natural logs of the entries in the specified portion of
 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
 * is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
 * &lt;p&gt;
 * See {@link org.apache.commons.math3.stat.descriptive.summary.SumOfLogs}.
 * &lt;/p&gt;</text>
    <param>values the input array</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the sum of the natural logs of the values or Double.NaN if
 * length = 0</return>
    <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
  </javadoc>
  <method type="double" name="sumLog" />
  <javadoc>
    <text>Returns the arithmetic mean of the entries in the input array, or
 * &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
 * &lt;p&gt;
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Mean} for
 * details on the computing algorithm.&lt;/p&gt;</text>
    <param>values the input array</param>
    <return>the mean of the values or Double.NaN if the array is empty</return>
    <throws>MathIllegalArgumentException if the array is null</throws>
  </javadoc>
  <method type="double" name="mean" />
  <javadoc>
    <text>Returns the arithmetic mean of the entries in the specified portion of
 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
 * is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
 * &lt;p&gt;
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Mean} for
 * details on the computing algorithm.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the mean of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
  </javadoc>
  <method type="double" name="mean" />
  <javadoc>
    <text>Returns the geometric mean of the entries in the input array, or
 * &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
 * &lt;p&gt;
 * See {@link org.apache.commons.math3.stat.descriptive.moment.GeometricMean}for details on the computing algorithm.&lt;/p&gt;</text>
    <param>values the input array</param>
    <return>the geometric mean of the values or Double.NaN if the array is empty</return>
    <throws>MathIllegalArgumentException if the array is null</throws>
  </javadoc>
  <method type="double" name="geometricMean" />
  <javadoc>
    <text>Returns the geometric mean of the entries in the specified portion of
 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
 * is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
 * &lt;p&gt;
 * See {@link org.apache.commons.math3.stat.descriptive.moment.GeometricMean}for details on the computing algorithm.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the geometric mean of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
  </javadoc>
  <method type="double" name="geometricMean" />
  <javadoc>
    <text>Returns the variance of the entries in the input array, or
 * &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
 * &lt;p&gt;This method returns the bias-corrected sample variance (using {@code n - 1} in
 * the denominator).  Use {@link #populationVariance(double[])} for the non-bias-corrected
 * population variance.&lt;/p&gt;
 * &lt;p&gt;
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
 * details on the computing algorithm.&lt;/p&gt;
 * &lt;p&gt;
 * Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;</text>
    <param>values the input array</param>
    <return>the variance of the values or Double.NaN if the array is empty</return>
    <throws>MathIllegalArgumentException if the array is null</throws>
  </javadoc>
  <method type="double" name="variance" />
  <javadoc>
    <text>Returns the variance of the entries in the specified portion of
 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
 * is empty.
 * &lt;p&gt;This method returns the bias-corrected sample variance (using {@code n - 1} in
 * the denominator).  Use {@link #populationVariance(double[],int,int)} for the non-bias-corrected
 * population variance.&lt;/p&gt;
 * &lt;p&gt;
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
 * details on the computing algorithm.&lt;/p&gt;
 * &lt;p&gt;
 * Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or the
 * array index parameters are not valid.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the variance of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
  </javadoc>
  <method type="double" name="variance" />
  <javadoc>
    <text>Returns the variance of the entries in the specified portion of
 * the input array, using the precomputed mean value.  Returns
 * &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray is empty.
 * &lt;p&gt;This method returns the bias-corrected sample variance (using {@code n - 1} in
 * the denominator).  Use {@link #populationVariance(double[],double,int,int)} for the non-bias-corrected
 * population variance.&lt;/p&gt;
 * &lt;p&gt;
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
 * details on the computing algorithm.&lt;/p&gt;
 * &lt;p&gt;
 * The formula used assumes that the supplied mean value is the arithmetic
 * mean of the sample data, not a known population parameter.  This method
 * is supplied only to save computation when the mean has already been
 * computed.&lt;/p&gt;
 * &lt;p&gt;
 * Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or the
 * array index parameters are not valid.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>mean the precomputed mean value</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the variance of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
  </javadoc>
  <method type="double" name="variance" />
  <javadoc>
    <text>Returns the variance of the entries in the input array, using the
 * precomputed mean value.  Returns &lt;code&gt;Double.NaN&lt;/code&gt; if the array
 * is empty.
 * &lt;p&gt;This method returns the bias-corrected sample variance (using {@code n - 1} in
 * the denominator).  Use {@link #populationVariance(double[],double)} for the non-bias-corrected
 * population variance.&lt;/p&gt;
 * &lt;p&gt;
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
 * details on the computing algorithm.&lt;/p&gt;
 * &lt;p&gt;
 * The formula used assumes that the supplied mean value is the arithmetic
 * mean of the sample data, not a known population parameter.  This method
 * is supplied only to save computation when the mean has already been
 * computed.&lt;/p&gt;
 * &lt;p&gt;
 * Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>mean the precomputed mean value</param>
    <return>the variance of the values or Double.NaN if the array is empty</return>
    <throws>MathIllegalArgumentException if the array is null</throws>
  </javadoc>
  <method type="double" name="variance" />
  <javadoc>
    <text>Returns the &lt;a href="http://en.wikibooks.org/wiki/Statistics/Summary/Variance"&gt;
 * population variance&lt;/a&gt; of the entries in the input array, or
 * &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
 * &lt;p&gt;
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
 * details on the formula and computing algorithm.&lt;/p&gt;
 * &lt;p&gt;
 * Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;</text>
    <param>values the input array</param>
    <return>the population variance of the values or Double.NaN if the array is empty</return>
    <throws>MathIllegalArgumentException if the array is null</throws>
  </javadoc>
  <method type="double" name="populationVariance" />
  <javadoc>
    <text>Returns the &lt;a href="http://en.wikibooks.org/wiki/Statistics/Summary/Variance"&gt;
 * population variance&lt;/a&gt; of the entries in the specified portion of
 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
 * is empty.
 * &lt;p&gt;
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
 * details on the computing algorithm.&lt;/p&gt;
 * &lt;p&gt;
 * Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or the
 * array index parameters are not valid.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the population variance of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
  </javadoc>
  <method type="double" name="populationVariance" />
  <javadoc>
    <text>Returns the &lt;a href="http://en.wikibooks.org/wiki/Statistics/Summary/Variance"&gt;
 * population variance&lt;/a&gt; of the entries in the specified portion of
 * the input array, using the precomputed mean value.  Returns
 * &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray is empty.
 * &lt;p&gt;
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
 * details on the computing algorithm.&lt;/p&gt;
 * &lt;p&gt;
 * The formula used assumes that the supplied mean value is the arithmetic
 * mean of the sample data, not a known population parameter.  This method
 * is supplied only to save computation when the mean has already been
 * computed.&lt;/p&gt;
 * &lt;p&gt;
 * Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or the
 * array index parameters are not valid.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>mean the precomputed mean value</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the population variance of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
  </javadoc>
  <method type="double" name="populationVariance" />
  <javadoc>
    <text>Returns the &lt;a href="http://en.wikibooks.org/wiki/Statistics/Summary/Variance"&gt;
 * population variance&lt;/a&gt; of the entries in the input array, using the
 * precomputed mean value.  Returns &lt;code&gt;Double.NaN&lt;/code&gt; if the array
 * is empty.
 * &lt;p&gt;
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
 * details on the computing algorithm.&lt;/p&gt;
 * &lt;p&gt;
 * The formula used assumes that the supplied mean value is the arithmetic
 * mean of the sample data, not a known population parameter.  This method
 * is supplied only to save computation when the mean has already been
 * computed.&lt;/p&gt;
 * &lt;p&gt;
 * Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>mean the precomputed mean value</param>
    <return>the population variance of the values or Double.NaN if the array is empty</return>
    <throws>MathIllegalArgumentException if the array is null</throws>
  </javadoc>
  <method type="double" name="populationVariance" />
  <javadoc>
    <text>Returns the maximum of the entries in the input array, or
 * &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;The result is &lt;code&gt;NaN&lt;/code&gt; iff all values are &lt;code&gt;NaN&lt;/code&gt;
 * (i.e. &lt;code&gt;NaN&lt;/code&gt; values have no impact on the value of the statistic).&lt;/li&gt;
 * &lt;li&gt;If any of the values equals &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt;,
 * the result is &lt;code&gt;Double.POSITIVE_INFINITY.&lt;/code&gt;&lt;/li&gt;
 * &lt;/ul&gt;&lt;/p&gt;</text>
    <param>values the input array</param>
    <return>the maximum of the values or Double.NaN if the array is empty</return>
    <throws>MathIllegalArgumentException if the array is null</throws>
  </javadoc>
  <method type="double" name="max" />
  <javadoc>
    <text>Returns the maximum of the entries in the specified portion of
 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
 * is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or
 * the array index parameters are not valid.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;The result is &lt;code&gt;NaN&lt;/code&gt; iff all values are &lt;code&gt;NaN&lt;/code&gt;
 * (i.e. &lt;code&gt;NaN&lt;/code&gt; values have no impact on the value of the statistic).&lt;/li&gt;
 * &lt;li&gt;If any of the values equals &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt;,
 * the result is &lt;code&gt;Double.POSITIVE_INFINITY.&lt;/code&gt;&lt;/li&gt;
 * &lt;/ul&gt;&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the maximum of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
  </javadoc>
  <method type="double" name="max" />
  <javadoc>
    <text>Returns the minimum of the entries in the input array, or
 * &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;The result is &lt;code&gt;NaN&lt;/code&gt; iff all values are &lt;code&gt;NaN&lt;/code&gt;
 * (i.e. &lt;code&gt;NaN&lt;/code&gt; values have no impact on the value of the statistic).&lt;/li&gt;
 * &lt;li&gt;If any of the values equals &lt;code&gt;Double.NEGATIVE_INFINITY&lt;/code&gt;,
 * the result is &lt;code&gt;Double.NEGATIVE_INFINITY.&lt;/code&gt;&lt;/li&gt;
 * &lt;/ul&gt; &lt;/p&gt;</text>
    <param>values the input array</param>
    <return>the minimum of the values or Double.NaN if the array is empty</return>
    <throws>MathIllegalArgumentException if the array is null</throws>
  </javadoc>
  <method type="double" name="min" />
  <javadoc>
    <text>Returns the minimum of the entries in the specified portion of
 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
 * is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null or
 * the array index parameters are not valid.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;The result is &lt;code&gt;NaN&lt;/code&gt; iff all values are &lt;code&gt;NaN&lt;/code&gt;
 * (i.e. &lt;code&gt;NaN&lt;/code&gt; values have no impact on the value of the statistic).&lt;/li&gt;
 * &lt;li&gt;If any of the values equals &lt;code&gt;Double.NEGATIVE_INFINITY&lt;/code&gt;,
 * the result is &lt;code&gt;Double.NEGATIVE_INFINITY.&lt;/code&gt;&lt;/li&gt;
 * &lt;/ul&gt;&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the minimum of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
  </javadoc>
  <method type="double" name="min" />
  <javadoc>
    <text>Returns an estimate of the &lt;code&gt;p&lt;/code&gt;th percentile of the values
 * in the &lt;code&gt;values&lt;/code&gt; array.
 * &lt;p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;Returns &lt;code&gt;Double.NaN&lt;/code&gt; if &lt;code&gt;values&lt;/code&gt; has length
 * &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;&lt;/p&gt;
 * &lt;li&gt;Returns (for any value of &lt;code&gt;p&lt;/code&gt;) &lt;code&gt;values[0]&lt;/code&gt;
 * if &lt;code&gt;values&lt;/code&gt; has length &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;values&lt;/code&gt;
 * is null  or p is not a valid quantile value (p must be greater than 0
 * and less than or equal to 100)&lt;/li&gt;
 * &lt;/ul&gt;&lt;/p&gt;
 * &lt;p&gt;
 * See {@link org.apache.commons.math3.stat.descriptive.rank.Percentile} for
 * a description of the percentile estimation algorithm used.&lt;/p&gt;</text>
    <param>values input array of values</param>
    <param>p the percentile value to compute</param>
    <return>the percentile value or Double.NaN if the array is empty</return>
    <throws>MathIllegalArgumentException if &lt;code&gt;values&lt;/code&gt; is null
 * or p is invalid</throws>
  </javadoc>
  <method type="double" name="percentile" />
  <javadoc>
    <text>Returns an estimate of the &lt;code&gt;p&lt;/code&gt;th percentile of the values
 * in the &lt;code&gt;values&lt;/code&gt; array, starting with the element in (0-based)
 * position &lt;code&gt;begin&lt;/code&gt; in the array and including &lt;code&gt;length&lt;/code&gt;
 * values.
 * &lt;p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;Returns &lt;code&gt;Double.NaN&lt;/code&gt; if &lt;code&gt;length = 0&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;Returns (for any value of &lt;code&gt;p&lt;/code&gt;) &lt;code&gt;values[begin]&lt;/code&gt;
 * if &lt;code&gt;length = 1 &lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if &lt;code&gt;values&lt;/code&gt;
 * is null , &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;length&lt;/code&gt; is invalid, or
 * &lt;code&gt;p&lt;/code&gt; is not a valid quantile value (p must be greater than 0
 * and less than or equal to 100)&lt;/li&gt;
 * &lt;/ul&gt;&lt;/p&gt;
 * &lt;p&gt;
 * See {@link org.apache.commons.math3.stat.descriptive.rank.Percentile} for
 * a description of the percentile estimation algorithm used.&lt;/p&gt;</text>
    <param>values array of input values</param>
    <param>p  the percentile to compute</param>
    <param>begin  the first (0-based) element to include in the computation</param>
    <param>length  the number of array elements to include</param>
    <return>the percentile value</return>
    <throws>MathIllegalArgumentException if the parameters are not valid or the
 * input array is null</throws>
  </javadoc>
  <method type="double" name="percentile" />
  <javadoc>
    <text>Returns the sum of the (signed) differences between corresponding elements of the
 * input arrays -- i.e., sum(sample1[i] - sample2[i]).</text>
    <param>sample1  the first array</param>
    <param>sample2  the second array</param>
    <return>sum of paired differences</return>
    <throws>DimensionMismatchException if the arrays do not have the same
 * (positive) length.</throws>
    <throws>NoDataException if the sample arrays are empty.</throws>
  </javadoc>
  <method type="double" name="sumDifference">
    <declaration type="int" name="n" />
    <scope />
    <scope />
    <declaration type="double" name="result" />
    <scope />
  </method>
  <javadoc>
    <text>Returns the mean of the (signed) differences between corresponding elements of the
 * input arrays -- i.e., sum(sample1[i] - sample2[i]) / sample1.length.</text>
    <param>sample1  the first array</param>
    <param>sample2  the second array</param>
    <return>mean of paired differences</return>
    <throws>DimensionMismatchException if the arrays do not have the same
 * (positive) length.</throws>
    <throws>NoDataException if the sample arrays are empty.</throws>
  </javadoc>
  <method type="double" name="meanDifference" />
  <javadoc>
    <text>Returns the variance of the (signed) differences between corresponding elements of the
 * input arrays -- i.e., var(sample1[i] - sample2[i]).</text>
    <param>sample1  the first array</param>
    <param>sample2  the second array</param>
    <param>meanDifference   the mean difference between corresponding entries</param>
    <see>#meanDifference(double[],double[])</see>
    <return>variance of paired differences</return>
    <throws>DimensionMismatchException if the arrays do not have the same
 * length.</throws>
    <throws>NumberIsTooSmallException if the arrays length is less than 2.</throws>
  </javadoc>
  <method type="double" name="varianceDifference">
    <declaration type="double" name="sum1" />
    <declaration type="double" name="sum2" />
    <declaration type="double" name="diff" />
    <declaration type="int" name="n" />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Normalize (standardize) the sample, so it is has a mean of 0 and a standard deviation of 1.</text>
    <param>sample Sample to normalize.</param>
    <return>normalized (standardized) sample.</return>
    <since>2.2</since>
  </javadoc>
  <method type="double[]" name="normalize">
    <declaration type="DescriptiveStatistics" name="stats" />
    <scope />
    <declaration type="double" name="mean" />
    <declaration type="double" name="standardDeviation" />
    <declaration type="double[]" name="standardizedSample" />
    <scope />
    <comment>Add the data from the series to stats</comment>
    <comment>Compute mean and standard deviation</comment>
    <comment>initialize the standardizedSample, which has the same length as the sample</comment>
    <comment>z = (x- mean)/standardDeviation</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
