<?xml version="1.0" encoding="UTF-8"?>
<class name="OrderedCrossover">
  <javadoc>
    <text>Order 1 Crossover [OX1] builds offspring from &lt;b&gt;ordered&lt;/b&gt; chromosomes by copying a
 * consecutive slice from one parent, and filling up the remaining genes from the other
 * parent as they appear.
 * &lt;p&gt;
 * This policy works by applying the following rules:
 * &lt;ol&gt;
 * &lt;li&gt;select a random slice of consecutive genes from parent 1&lt;/li&gt;
 * &lt;li&gt;copy the slice to child 1 and mark out the genes in parent 2&lt;/li&gt;
 * &lt;li&gt;starting from the right side of the slice, copy genes from parent 2 as they
 * appear to child 1 if they are not yet marked out.&lt;/li&gt;
 * &lt;/ol&gt;
 * &lt;p&gt;
 * Example (random sublist from index 3 to 7, underlined):
 * &lt;pre&gt;
 * p1 = (8 4 7 3 6 2 5 1 9 0)   X   c1 = (0 4 7 3 6 2 5 1 8 9)
 * ---------                        ---------
 * p2 = (0 1 2 3 4 5 6 7 8 9)   X   c2 = (8 1 2 3 4 5 6 7 9 0)
 * &lt;/pre&gt;
 * &lt;p&gt;
 * This policy works only on {@link AbstractListChromosome}, and therefore it
 * is parameterized by T. Moreover, the chromosomes must have same lengths.</text>
    <see>&lt;a href="http://www.rubicite.com/Tutorials/GeneticAlgorithms/CrossoverOperators/Order1CrossoverOperator.aspx"&gt;
 * Order 1 Crossover Operator&lt;/a&gt;</see>
    <param>&lt;T&gt;
 *  generic type of the {@link AbstractListChromosome}s for crossover</param>
    <since>3.1</since>
    <version>$Id: OrderedCrossover.java 1385297 2012-09-16 16:05:57Z tn $</version>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
    <throws>MathIllegalArgumentException iff one of the chromosomes is
 * not an instance of {@link AbstractListChromosome}</throws>
    <throws>DimensionMismatchException if the length of the two chromosomes is different</throws>
  </javadoc>
  <method type="ChromosomePair" name="crossover">
    <scope />
  </method>
  <javadoc>
    <text>Helper for {@link #crossover(Chromosome,Chromosome)}. Performs the actual crossover.</text>
    <param>first the first chromosome</param>
    <param>second the second chromosome</param>
    <return>the pair of new chromosomes that resulted from the crossover</return>
    <throws>DimensionMismatchException if the length of the two chromosomes is different</throws>
  </javadoc>
  <method type="ChromosomePair" name="mate">
    <declaration type="int" name="length" />
    <scope />
    <declaration type="List&lt;T&gt;" name="parent1Rep" />
    <declaration type="List&lt;T&gt;" name="parent2Rep" />
    <declaration type="List&lt;T&gt;" name="child1" />
    <declaration type="List&lt;T&gt;" name="child2" />
    <declaration type="Set&lt;T&gt;" name="child1Set" />
    <declaration type="Set&lt;T&gt;" name="child2Set" />
    <declaration type="RandomGenerator" name="random" />
    <declaration type="int" name="a" />
    <declaration type="int" name="b" />
    <scope />
    <declaration type="int" name="lb" />
    <declaration type="int" name="ub" />
    <scope>
      <declaration type="int" name="idx" />
      <declaration type="T" name="item1" />
      <declaration type="T" name="item2" />
      <scope />
      <scope />
    </scope>
    <comment>array representations of the parents</comment>
    <comment>and of the children</comment>
    <comment>sets of already inserted items for quick access</comment>
    <comment>choose random points, making sure that lb &lt; ub.</comment>
    <comment>determine the lower and upper bounds</comment>
    <comment>add the subLists that are between lb and ub</comment>
    <comment>iterate over every item in the parents</comment>
    <comment>retrieve the current item in each parent</comment>
    <comment>if the first child already contains the item in the second parent add it</comment>
    <comment>if the second child already contains the item in the first parent add it</comment>
    <comment>rotate so that the original slice is in the same place as in the parents.</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
