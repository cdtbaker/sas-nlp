<?xml version="1.0" encoding="UTF-8"?>
<class name="BitsStreamGenerator">
  <javadoc>
    <text>Base class for random number generators that generates bits streams.</text>
    <version>$Id: BitsStreamGenerator.java 1454897 2013-03-10 19:02:54Z luc $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Next gaussian.</text>
  </javadoc>
  <declaration type="double" name="nextGaussian" />
  <javadoc>
    <text>Creates a new random number generator.</text>
  </javadoc>
  <method type="constructor" name="BitsStreamGenerator" />
  <method name="setSeed" type="void" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method name="setSeed" type="void" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method name="setSeed" type="void" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method name="next" type="int" />
  <javadoc>
    <text>Generate next pseudorandom number.
 * &lt;p&gt;This method is the core generation algorithm. It is used by all the
 * public generation methods for the various primitive types {@link #nextBoolean()}, {@link #nextBytes(byte[])}, {@link #nextDouble()},{@link #nextFloat()}, {@link #nextGaussian()}, {@link #nextInt()},{@link #next(int)} and {@link #nextLong()}.&lt;/p&gt;</text>
    <param>bits number of random bits to produce</param>
    <return>random bits generated</return>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="nextBoolean" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="nextBytes">
    <declaration type="int" name="i" />
    <declaration type="int" name="iEnd" />
    <scope>
      <declaration type="int" name="random" />
    </scope>
    <declaration type="int" name="random" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="nextDouble">
    <declaration type="long" name="high" />
    <declaration type="int" name="low" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="float" name="nextFloat" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="nextGaussian">
    <declaration type="double" name="random" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="y" />
      <declaration type="double" name="alpha" />
      <declaration type="double" name="r" />
    </scope>
    <scope />
    <comment>generate a new pair of gaussian numbers</comment>
    <comment>use the second element of the pair already generated</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="nextInt" />
  <javadoc>
    <text>{@inheritDoc}&lt;p&gt;This default implementation is copied from Apache Harmony
 * java.util.Random (r929253).&lt;/p&gt;
 * &lt;p&gt;Implementation notes: &lt;ul&gt;
 * &lt;li&gt;If n is a power of 2, this method returns{@code (int) ((n * (long) next(31)) &gt;&gt; 31)}.&lt;/li&gt;
 * &lt;li&gt;If n is not a power of 2, what is returned is {@code next(31) % n}with {@code next(31)} values rejected (i.e. regenerated) until a
 * value that is larger than the remainder of {@code Integer.MAX_VALUE / n}is generated. Rejection of this initial segment is necessary to ensure
 * a uniform distribution.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
  </javadoc>
  <method type="int" name="nextInt">
    <scope>
      <scope />
      <declaration type="int" name="bits" />
      <declaration type="int" name="val" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="long" name="nextLong">
    <declaration type="long" name="high" />
    <declaration type="long" name="low" />
  </method>
  <javadoc>
    <text>Returns a pseudorandom, uniformly distributed &lt;tt&gt;long&lt;/tt&gt; value
 * between 0 (inclusive) and the specified value (exclusive), drawn from
 * this random number generator's sequence.</text>
    <param>n the bound on the random number to be returned.  Must be
 * positive.</param>
    <return>a pseudorandom, uniformly distributed &lt;tt&gt;long&lt;/tt&gt;
 * value between 0 (inclusive) and n (exclusive).</return>
    <throws>IllegalArgumentException  if n is not positive.</throws>
  </javadoc>
  <method type="long" name="nextLong">
    <scope>
      <declaration type="long" name="bits" />
      <declaration type="long" name="val" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Clears the cache used by the default implementation of{@link #nextGaussian}.</text>
  </javadoc>
  <method type="void" name="clear" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
