<?xml version="1.0" encoding="UTF-8"?>
<class name="MersenneTwister">
  <javadoc>
    <text>This class implements a powerful pseudo-random number generator
 * developed by Makoto Matsumoto and Takuji Nishimura during
 * 1996-1997.
 * &lt;p&gt;This generator features an extremely long period
 * (2&lt;sup&gt;19937&lt;/sup&gt;-1) and 623-dimensional equidistribution up to 32
 * bits accuracy. The home page for this generator is located at &lt;a
 * href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html"&gt;
 * http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html&lt;/a&gt;.&lt;/p&gt;
 * &lt;p&gt;This generator is described in a paper by Makoto Matsumoto and
 * Takuji Nishimura in 1998: &lt;a
 * href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/ARTICLES/mt.pdf"&gt;Mersenne
 * Twister: A 623-Dimensionally Equidistributed Uniform Pseudo-Random
 * Number Generator&lt;/a&gt;, ACM Transactions on Modeling and Computer
 * Simulation, Vol. 8, No. 1, January 1998, pp 3--30&lt;/p&gt;
 * &lt;p&gt;This class is mainly a Java port of the 2002-01-26 version of
 * the generator written in C by Makoto Matsumoto and Takuji
 * Nishimura. Here is their original copyright:&lt;/p&gt;
 * &lt;table border="0" width="80%" cellpadding="10" align="center" bgcolor="#E0E0E0"&gt;
 * &lt;tr&gt;&lt;td&gt;Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
 * All rights reserved.&lt;/td&gt;&lt;/tr&gt;
 * &lt;tr&gt;&lt;td&gt;Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * &lt;ol&gt;
 * &lt;li&gt;Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.&lt;/li&gt;
 * &lt;li&gt;Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.&lt;/li&gt;
 * &lt;li&gt;The names of its contributors may not be used to endorse or promote
 * products derived from this software without specific prior written
 * permission.&lt;/li&gt;
 * &lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;
 * &lt;tr&gt;&lt;td&gt;&lt;strong&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
 * &lt;/table&gt;</text>
    <version>$Id: MersenneTwister.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Size of the bytes pool.</text>
  </javadoc>
  <declaration type="int" name="N" />
  <javadoc>
    <text>Period second parameter.</text>
  </javadoc>
  <declaration type="int" name="M" />
  <javadoc>
    <text>X * MATRIX_A for X = {0, 1}.</text>
  </javadoc>
  <declaration type="int[]" name="MAG01" />
  <javadoc>
    <text>Bytes pool.</text>
  </javadoc>
  <declaration type="int[]" name="mt" />
  <javadoc>
    <text>Current index in the bytes pool.</text>
  </javadoc>
  <declaration type="int" name="mti" />
  <javadoc>
    <text>Creates a new random number generator.
 * &lt;p&gt;The instance is initialized using the current time plus the
 * system identity hash code of this instance as the seed.&lt;/p&gt;</text>
  </javadoc>
  <method type="constructor" name="MersenneTwister" />
  <javadoc>
    <text>Creates a new random number generator using a single int seed.</text>
    <param>seed the initial seed (32 bits integer)</param>
  </javadoc>
  <method type="constructor" name="MersenneTwister" />
  <javadoc>
    <text>Creates a new random number generator using an int array seed.</text>
    <param>seed the initial seed (32 bits integers array), if null
 * the seed of the generator will be related to the current time</param>
  </javadoc>
  <method type="constructor" name="MersenneTwister" />
  <javadoc>
    <text>Creates a new random number generator using a single long seed.</text>
    <param>seed the initial seed (64 bits integer)</param>
  </javadoc>
  <method type="constructor" name="MersenneTwister" />
  <javadoc>
    <text>Reinitialize the generator as if just built with the given int seed.
 * &lt;p&gt;The state of the generator is exactly the same as a new
 * generator built with the same seed.&lt;/p&gt;</text>
    <param>seed the initial seed (32 bits integer)</param>
  </javadoc>
  <method type="void" name="setSeed">
    <declaration type="long" name="longMT" />
    <scope />
    <comment>we use a long masked by 0xffffffffL as a poor man unsigned int</comment>
    <comment>NB: unlike original C code, we are working with java longs, the cast below makes masking unnecessary</comment>
    <comment>See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier.</comment>
    <comment>initializer from the 2002-01-09 C version by Makoto Matsumoto</comment>
    <comment>Clear normal deviate cache</comment>
  </method>
  <javadoc>
    <text>Reinitialize the generator as if just built with the given int array seed.
 * &lt;p&gt;The state of the generator is exactly the same as a new
 * generator built with the same seed.&lt;/p&gt;</text>
    <param>seed the initial seed (32 bits integers array), if null
 * the seed of the generator will be the current system time plus the
 * system identity hash code of this instance</param>
  </javadoc>
  <method type="void" name="setSeed">
    <scope />
    <declaration type="int" name="i" />
    <declaration type="int" name="j" />
    <scope>
      <declaration type="long" name="l0" />
      <declaration type="long" name="l1" />
      <declaration type="long" name="l" />
      <scope />
      <scope />
    </scope>
    <scope>
      <declaration type="long" name="l0" />
      <declaration type="long" name="l1" />
      <declaration type="long" name="l" />
      <scope />
    </scope>
    <comment>non linear</comment>
    <comment>non linear</comment>
    <comment>MSB is 1; assuring non-zero initial array</comment>
    <comment>Clear normal deviate cache</comment>
  </method>
  <javadoc>
    <text>Reinitialize the generator as if just built with the given long seed.
 * &lt;p&gt;The state of the generator is exactly the same as a new
 * generator built with the same seed.&lt;/p&gt;</text>
    <param>seed the initial seed (64 bits integer)</param>
  </javadoc>
  <method type="void" name="setSeed" />
  <javadoc>
    <text>Generate next pseudorandom number.
 * &lt;p&gt;This method is the core generation algorithm. It is used by all the
 * public generation methods for the various primitive types {@link #nextBoolean()}, {@link #nextBytes(byte[])}, {@link #nextDouble()},{@link #nextFloat()}, {@link #nextGaussian()}, {@link #nextInt()},{@link #next(int)} and {@link #nextLong()}.&lt;/p&gt;</text>
    <param>bits number of random bits to produce</param>
    <return>random bits generated</return>
  </javadoc>
  <method type="int" name="next">
    <declaration type="int" name="y" />
    <scope>
      <declaration type="int" name="mtNext" />
      <scope>
        <declaration type="int" name="mtCurr" />
      </scope>
      <scope>
        <declaration type="int" name="mtCurr" />
      </scope>
    </scope>
    <comment>generate N words at one time</comment>
    <comment>tempering</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
