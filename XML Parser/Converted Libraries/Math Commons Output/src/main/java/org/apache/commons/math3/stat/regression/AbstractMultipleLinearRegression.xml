<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractMultipleLinearRegression">
  <javadoc>
    <text>Abstract base class for implementations of MultipleLinearRegression.</text>
    <version>$Id: AbstractMultipleLinearRegression.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>X sample data.</text>
  </javadoc>
  <declaration type="RealMatrix" name="xMatrix" />
  <javadoc>
    <text>Y sample data.</text>
  </javadoc>
  <declaration type="RealVector" name="yVector" />
  <javadoc>
    <text>Whether or not the regression model includes an intercept.  True means no intercept.</text>
  </javadoc>
  <declaration type="boolean" name="noIntercept" />
  <javadoc>
    <return>the X sample data.</return>
  </javadoc>
  <method type="RealMatrix" name="getX" />
  <javadoc>
    <return>the Y sample data.</return>
  </javadoc>
  <method type="RealVector" name="getY" />
  <javadoc>
    <return>true if the model has no intercept term; false otherwise</return>
    <since>2.2</since>
  </javadoc>
  <method type="boolean" name="isNoIntercept" />
  <javadoc>
    <param>noIntercept true means the model is to be estimated without an intercept term</param>
    <since>2.2</since>
  </javadoc>
  <method type="void" name="setNoIntercept" />
  <javadoc>
    <text>&lt;p&gt;Loads model x and y sample data from a flat input array, overriding any previous sample.
 * &lt;/p&gt;
 * &lt;p&gt;Assumes that rows are concatenated with y values first in each row.  For example, an input
 * &lt;code&gt;data&lt;/code&gt; array containing the sequence of values (1, 2, 3, 4, 5, 6, 7, 8, 9) with
 * &lt;code&gt;nobs = 3&lt;/code&gt; and &lt;code&gt;nvars = 2&lt;/code&gt; creates a regression dataset with two
 * independent variables, as below:
 * &lt;pre&gt;
 * y   x[0]  x[1]
 * --------------
 * 1     2     3
 * 4     5     6
 * 7     8     9
 * &lt;/pre&gt;
 * &lt;/p&gt;
 * &lt;p&gt;Note that there is no need to add an initial unitary column (column of 1's) when
 * specifying a model including an intercept term.  If {@link #isNoIntercept()} is &lt;code&gt;true&lt;/code&gt;,
 * the X matrix will be created without an initial column of "1"s; otherwise this column will
 * be added.
 * &lt;/p&gt;
 * &lt;p&gt;Throws IllegalArgumentException if any of the following preconditions fail:
 * &lt;ul&gt;&lt;li&gt;&lt;code&gt;data&lt;/code&gt; cannot be null&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;data.length = nobs * (nvars + 1)&lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;nobs &gt; nvars&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
 * &lt;/p&gt;</text>
    <param>data input data array</param>
    <param>nobs number of observations (rows)</param>
    <param>nvars number of independent variables (columns, not counting y)</param>
    <throws>NullArgumentException if the data array is null</throws>
    <throws>DimensionMismatchException if the length of the data array is not equal
 * to &lt;code&gt;nobs * (nvars + 1)&lt;/code&gt;</throws>
    <throws>NumberIsTooSmallException if &lt;code&gt;nobs&lt;/code&gt; is smaller than
 * &lt;code&gt;nvars&lt;/code&gt;</throws>
  </javadoc>
  <method type="void" name="newSampleData">
    <scope />
    <scope />
    <scope />
    <declaration type="double[]" name="y" />
    <declaration type="int" name="cols" />
    <declaration type="double[][]" name="x" />
    <declaration type="int" name="pointer" />
    <scope>
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Loads new y sample data, overriding any previous data.</text>
    <param>y the array representing the y sample</param>
    <throws>NullArgumentException if y is null</throws>
    <throws>NoDataException if y is empty</throws>
  </javadoc>
  <method type="void" name="newYSampleData">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;Loads new x sample data, overriding any previous data.
 * &lt;/p&gt;
 * The input &lt;code&gt;x&lt;/code&gt; array should have one row for each sample
 * observation, with columns corresponding to independent variables.
 * For example, if &lt;pre&gt;
 * &lt;code&gt; x = new double[][] {{1, 2}, {3, 4}, {5, 6}} &lt;/code&gt;&lt;/pre&gt;
 * then &lt;code&gt;setXSampleData(x) &lt;/code&gt; results in a model with two independent
 * variables and 3 observations:
 * &lt;pre&gt;
 * x[0]  x[1]
 * ----------
 * 1    2
 * 3    4
 * 5    6
 * &lt;/pre&gt;
 * &lt;/p&gt;
 * &lt;p&gt;Note that there is no need to add an initial unitary column (column of 1's) when
 * specifying a model including an intercept term.
 * &lt;/p&gt;</text>
    <param>x the rectangular array representing the x sample</param>
    <throws>NullArgumentException if x is null</throws>
    <throws>NoDataException if x is empty</throws>
    <throws>DimensionMismatchException if x is not rectangular</throws>
  </javadoc>
  <method type="void" name="newXSampleData">
    <scope />
    <scope />
    <scope />
    <scope>
      <declaration type="int" name="nVars" />
      <declaration type="double[][]" name="xAug" />
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>Augment design matrix with initial unitary column</comment>
  </method>
  <javadoc>
    <text>Validates sample data.  Checks that
 * &lt;ul&gt;&lt;li&gt;Neither x nor y is null or empty;&lt;/li&gt;
 * &lt;li&gt;The length (i.e. number of rows) of x equals the length of y&lt;/li&gt;
 * &lt;li&gt;x has at least one more row than it has columns (i.e. there is
 * sufficient data to estimate regression coefficients for each of the
 * columns in x plus an intercept.&lt;/li&gt;
 * &lt;/ul&gt;</text>
    <param>x the [n,k] array representing the x data</param>
    <param>y the [n,1] array representing the y data</param>
    <throws>NullArgumentException if {@code x} or {@code y} is null</throws>
    <throws>DimensionMismatchException if {@code x} and {@code y} do not
 * have the same length</throws>
    <throws>NoDataException if {@code x} or {@code y} are zero-length</throws>
    <throws>MathIllegalArgumentException if the number of rows of {@code x}is not larger than the number of columns + 1</throws>
  </javadoc>
  <method type="void" name="validateSampleData">
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>Must be no y data either</comment>
  </method>
  <javadoc>
    <text>Validates that the x data and covariance matrix have the same
 * number of rows and that the covariance matrix is square.</text>
    <param>x the [n,k] array representing the x sample</param>
    <param>covariance the [n,n] array representing the covariance matrix</param>
    <throws>DimensionMismatchException if the number of rows in x is not equal
 * to the number of rows in covariance</throws>
    <throws>NonSquareMatrixException if the covariance matrix is not square</throws>
  </javadoc>
  <method type="void" name="validateCovarianceData">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[]" name="estimateRegressionParameters">
    <declaration type="RealVector" name="b" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[]" name="estimateResiduals">
    <declaration type="RealVector" name="b" />
    <declaration type="RealVector" name="e" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[][]" name="estimateRegressionParametersVariance" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[]" name="estimateRegressionParametersStandardErrors">
    <declaration type="double[][]" name="betaVariance" />
    <declaration type="double" name="sigma" />
    <declaration type="int" name="length" />
    <declaration type="double[]" name="result" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="estimateRegressandVariance" />
  <javadoc>
    <text>Estimates the variance of the error.</text>
    <return>estimate of the error variance</return>
    <since>2.2</since>
  </javadoc>
  <method type="double" name="estimateErrorVariance" />
  <javadoc>
    <text>Estimates the standard error of the regression.</text>
    <return>regression standard error</return>
    <since>2.2</since>
  </javadoc>
  <method type="double" name="estimateRegressionStandardError" />
  <method name="calculateBeta" type="RealVector" />
  <javadoc>
    <text>Calculates the beta of multiple linear regression in matrix notation.</text>
    <return>beta</return>
  </javadoc>
  <method name="calculateBetaVariance" type="RealMatrix" />
  <javadoc>
    <text>Calculates the beta variance of multiple linear regression in matrix
 * notation.</text>
    <return>beta variance</return>
  </javadoc>
  <javadoc>
    <text>Calculates the variance of the y values.</text>
    <return>Y variance</return>
  </javadoc>
  <method type="double" name="calculateYVariance" />
  <javadoc>
    <text>&lt;p&gt;Calculates the variance of the error term.&lt;/p&gt;
 * Uses the formula &lt;pre&gt;
 * var(u) = u &amp;middot; u / (n - k)
 * &lt;/pre&gt;
 * where n and k are the row and column dimensions of the design
 * matrix X.</text>
    <return>error variance estimate</return>
    <since>2.2</since>
  </javadoc>
  <method type="double" name="calculateErrorVariance">
    <declaration type="RealVector" name="residuals" />
  </method>
  <javadoc>
    <text>Calculates the residuals of multiple linear regression in matrix
 * notation.
 * &lt;pre&gt;
 * u = y - X * b
 * &lt;/pre&gt;</text>
    <return>The residuals [n,1] matrix</return>
  </javadoc>
  <method type="RealVector" name="calculateResiduals">
    <declaration type="RealVector" name="b" />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
