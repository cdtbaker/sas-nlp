<?xml version="1.0" encoding="UTF-8"?>
<class name="RegressionResults">
  <javadoc>
    <text>Results of a Multiple Linear Regression model fit.</text>
    <version>$Id: RegressionResults.java 1392342 2012-10-01 14:08:52Z psteitz $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>INDEX of Sum of Squared Errors</text>
  </javadoc>
  <declaration type="int" name="SSE_IDX" />
  <javadoc>
    <text>INDEX of Sum of Squares of Model</text>
  </javadoc>
  <declaration type="int" name="SST_IDX" />
  <javadoc>
    <text>INDEX of R-Squared of regression</text>
  </javadoc>
  <declaration type="int" name="RSQ_IDX" />
  <javadoc>
    <text>INDEX of Mean Squared Error</text>
  </javadoc>
  <declaration type="int" name="MSE_IDX" />
  <javadoc>
    <text>INDEX of Adjusted R Squared</text>
  </javadoc>
  <declaration type="int" name="ADJRSQ_IDX" />
  <javadoc>
    <text>UID</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>regression slope parameters</text>
  </javadoc>
  <declaration type="double[]" name="parameters" />
  <javadoc>
    <text>variance covariance matrix of parameters</text>
  </javadoc>
  <declaration type="double[][]" name="varCovData" />
  <javadoc>
    <text>boolean flag for variance covariance matrix in symm compressed storage</text>
  </javadoc>
  <declaration type="boolean" name="isSymmetricVCD" />
  <javadoc>
    <text>rank of the solution</text>
  </javadoc>
  <declaration type="int" name="rank" />
  <javadoc>
    <text>number of observations on which results are based</text>
  </javadoc>
  <declaration type="long" name="nobs" />
  <javadoc>
    <text>boolean flag indicator of whether a constant was included</text>
  </javadoc>
  <declaration type="boolean" name="containsConstant" />
  <javadoc>
    <text>array storing global results, SSE, MSE, RSQ, adjRSQ</text>
  </javadoc>
  <declaration type="double[]" name="globalFitInfo" />
  <javadoc>
    <text>Set the default constructor to private access
 * to prevent inadvertent instantiation</text>
  </javadoc>
  <method type="constructor" name="RegressionResults" />
  <javadoc>
    <text>Constructor for Regression Results.</text>
    <param>parameters a double array with the regression slope estimates</param>
    <param>varcov the variance covariance matrix, stored either in a square matrix
 * or as a compressed</param>
    <param>isSymmetricCompressed a flag which denotes that the variance covariance
 * matrix is in symmetric compressed format</param>
    <param>nobs the number of observations of the regression estimation</param>
    <param>rank the number of independent variables in the regression</param>
    <param>sumy the sum of the independent variable</param>
    <param>sumysq the sum of the squared independent variable</param>
    <param>sse sum of squared errors</param>
    <param>containsConstant true model has constant,  false model does not have constant</param>
    <param>copyData if true a deep copy of all input data is made, if false only references
 * are copied and the RegressionResults become mutable</param>
  </javadoc>
  <method type="constructor" name="RegressionResults">
    <scope>
      <scope />
    </scope>
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;Returns the parameter estimate for the regressor at the given index.&lt;/p&gt;
 * &lt;p&gt;A redundant regressor will have its redundancy flag set, as well as
 * a parameters estimated equal to {@code Double.NaN}&lt;/p&gt;</text>
    <param>index Index.</param>
    <return>the parameters estimated for regressor at index.</return>
    <throws>OutOfRangeException if {@code index} is not in the interval{@code [0, number of parameters)}.</throws>
  </javadoc>
  <method type="double" name="getParameterEstimate">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;Returns a copy of the regression parameters estimates.&lt;/p&gt;
 * &lt;p&gt;The parameter estimates are returned in the natural order of the data.&lt;/p&gt;
 * &lt;p&gt;A redundant regressor will have its redundancy flag set, as will
 * a parameter estimate equal to {@code Double.NaN}.&lt;/p&gt;</text>
    <return>array of parameter estimates, null if no estimation occurred</return>
  </javadoc>
  <method type="double[]" name="getParameterEstimates">
    <scope />
  </method>
  <javadoc>
    <text>Returns the &lt;a href="http://www.xycoon.com/standerrorb(1).htm"&gt;standard
 * error of the parameter estimate at index&lt;/a&gt;,
 * usually denoted s(b&lt;sub&gt;index&lt;/sub&gt;).</text>
    <param>index Index.</param>
    <return>the standard errors associated with parameters estimated at index.</return>
    <throws>OutOfRangeException if {@code index} is not in the interval{@code [0, number of parameters)}.</throws>
  </javadoc>
  <method type="double" name="getStdErrorOfEstimate">
    <scope />
    <scope />
    <declaration type="double" name="var" />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;Returns the &lt;a href="http://www.xycoon.com/standerrorb(1).htm"&gt;standard
 * error of the parameter estimates&lt;/a&gt;,
 * usually denoted s(b&lt;sub&gt;i&lt;/sub&gt;).&lt;/p&gt;
 * &lt;p&gt;If there are problems with an ill conditioned design matrix then the regressor
 * which is redundant will be assigned &lt;code&gt;Double.NaN&lt;/code&gt;. &lt;/p&gt;</text>
    <return>an array standard errors associated with parameters estimates,
 * null if no estimation occurred</return>
  </javadoc>
  <method type="double[]" name="getStdErrorOfEstimates">
    <scope />
    <declaration type="double[]" name="se" />
    <scope>
      <declaration type="double" name="var" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;Returns the covariance between regression parameters i and j.&lt;/p&gt;
 * &lt;p&gt;If there are problems with an ill conditioned design matrix then the covariance
 * which involves redundant columns will be assigned {@code Double.NaN}. &lt;/p&gt;</text>
    <param>i {@code i}th regression parameter.</param>
    <param>j {@code j}th regression parameter.</param>
    <return>the covariance of the parameter estimates.</return>
    <throws>OutOfRangeException if {@code i} or {@code j} is not in the
 * interval {@code [0, number of parameters)}.</throws>
  </javadoc>
  <method type="double" name="getCovarianceOfParameters">
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;Returns the number of parameters estimated in the model.&lt;/p&gt;
 * &lt;p&gt;This is the maximum number of regressors, some techniques may drop
 * redundant parameters&lt;/p&gt;</text>
    <return>number of regressors, -1 if not estimated</return>
  </javadoc>
  <method type="int" name="getNumberOfParameters">
    <scope />
  </method>
  <javadoc>
    <text>Returns the number of observations added to the regression model.</text>
    <return>Number of observations, -1 if an error condition prevents estimation</return>
  </javadoc>
  <method type="long" name="getN" />
  <javadoc>
    <text>&lt;p&gt;Returns the sum of squared deviations of the y values about their mean.&lt;/p&gt;
 * &lt;p&gt;This is defined as SSTO
 * &lt;a href="http://www.xycoon.com/SumOfSquares.htm"&gt;here&lt;/a&gt;.&lt;/p&gt;
 * &lt;p&gt;If {@code n &lt; 2}, this returns {@code Double.NaN}.&lt;/p&gt;</text>
    <return>sum of squared deviations of y values</return>
  </javadoc>
  <method type="double" name="getTotalSumSquares" />
  <javadoc>
    <text>&lt;p&gt;Returns the sum of squared deviations of the predicted y values about
 * their mean (which equals the mean of y).&lt;/p&gt;
 * &lt;p&gt;This is usually abbreviated SSR or SSM.  It is defined as SSM
 * &lt;a href="http://www.xycoon.com/SumOfSquares.htm"&gt;here&lt;/a&gt;&lt;/p&gt;
 * &lt;p&gt;&lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;At least two observations (with at least two different x values)
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, &lt;code&gt;Double.NaN&lt;/code&gt; is
 * returned.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <return>sum of squared deviations of predicted y values</return>
  </javadoc>
  <method type="double" name="getRegressionSumSquares" />
  <javadoc>
    <text>&lt;p&gt;Returns the &lt;a href="http://www.xycoon.com/SumOfSquares.htm"&gt;
 * sum of squared errors&lt;/a&gt; (SSE) associated with the regression
 * model.&lt;/p&gt;
 * &lt;p&gt;The return value is constrained to be non-negative - i.e., if due to
 * rounding errors the computational formula returns a negative result,
 * 0 is returned.&lt;/p&gt;
 * &lt;p&gt;&lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;numberOfParameters data pairs
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, &lt;code&gt;Double,NaN&lt;/code&gt; is
 * returned.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <return>sum of squared errors associated with the regression model</return>
  </javadoc>
  <method type="double" name="getErrorSumSquares" />
  <javadoc>
    <text>&lt;p&gt;Returns the sum of squared errors divided by the degrees of freedom,
 * usually abbreviated MSE.&lt;/p&gt;
 * &lt;p&gt;If there are fewer than &lt;strong&gt;numberOfParameters + 1&lt;/strong&gt; data pairs in the model,
 * or if there is no variation in &lt;code&gt;x&lt;/code&gt;, this returns
 * &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt;</text>
    <return>sum of squared deviations of y values</return>
  </javadoc>
  <method type="double" name="getMeanSquareError" />
  <javadoc>
    <text>&lt;p&gt;Returns the &lt;a href="http://www.xycoon.com/coefficient1.htm"&gt;
 * coefficient of multiple determination&lt;/a&gt;,
 * usually denoted r-square.&lt;/p&gt;
 * &lt;p&gt;&lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;At least numberOfParameters observations (with at least numberOfParameters different x values)
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, {@code Double,NaN} is
 * returned.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <return>r-square, a double in the interval [0, 1]</return>
  </javadoc>
  <method type="double" name="getRSquared" />
  <javadoc>
    <text>&lt;p&gt;Returns the adjusted R-squared statistic, defined by the formula &lt;pre&gt;
 * R&lt;sup&gt;2&lt;/sup&gt;&lt;sub&gt;adj&lt;/sub&gt; = 1 - [SSR (n - 1)] / [SSTO (n - p)]
 * &lt;/pre&gt;
 * where SSR is the sum of squared residuals},
 * SSTO is the total sum of squares}, n is the number
 * of observations and p is the number of parameters estimated (including the intercept).&lt;/p&gt;
 * &lt;p&gt;If the regression is estimated without an intercept term, what is returned is &lt;pre&gt;
 * &lt;code&gt; 1 - (1 - {@link #getRSquared()} ) * (n / (n - p)) &lt;/code&gt;
 * &lt;/pre&gt;&lt;/p&gt;</text>
    <return>adjusted R-Squared statistic</return>
  </javadoc>
  <method type="double" name="getAdjustedRSquared" />
  <javadoc>
    <text>Returns true if the regression model has been computed including an intercept.
 * In this case, the coefficient of the intercept is the first element of the{@link #getParameterEstimates() parameter estimates}.</text>
    <return>true if the model has an intercept term</return>
  </javadoc>
  <method type="boolean" name="hasIntercept" />
  <javadoc>
    <text>Gets the i-jth element of the variance-covariance matrix.</text>
    <param>i first variable index</param>
    <param>j second variable index</param>
    <return>the requested variance-covariance matrix entry</return>
  </javadoc>
  <method type="double" name="getVcvElement">
    <scope>
      <scope>
        <scope />
        <scope />
        <scope />
      </scope>
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
    <scope />
    <comment>could be stored in upper or lower triangular</comment>
    <comment>could be in single array</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
