<?xml version="1.0" encoding="UTF-8"?>
<class name="Product">
  <javadoc>
    <text>Returns the product of the available values.
 * &lt;p&gt;
 * If there are no values in the dataset, then 1 is returned.
 * If any of the values are
 * &lt;code&gt;NaN&lt;/code&gt;, then &lt;code&gt;NaN&lt;/code&gt; is returned.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
 * multiple threads access an instance of this class concurrently, and at least
 * one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
 * &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.&lt;/p&gt;</text>
    <version>$Id: Product.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>The number of values that have been added</text>
  </javadoc>
  <declaration type="long" name="n" />
  <javadoc>
    <text>The current Running Product.</text>
  </javadoc>
  <declaration type="double" name="value" />
  <javadoc>
    <text>Create a Product instance</text>
  </javadoc>
  <method type="constructor" name="Product" />
  <javadoc>
    <text>Copy constructor, creates a new {@code Product} identical
 * to the {@code original}</text>
    <param>original the {@code Product} instance to copy</param>
    <throws>NullArgumentException  if original is null</throws>
  </javadoc>
  <method type="constructor" name="Product" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="increment" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getResult" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="long" name="getN" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="clear" />
  <javadoc>
    <text>Returns the product of the entries in the specified portion of
 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
 * is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the product of the values or 1 if length = 0</return>
    <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
  </javadoc>
  <method type="double" name="evaluate">
    <declaration type="double" name="product" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;Returns the weighted product of the entries in the specified portion of
 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
 * is empty.&lt;/p&gt;
 * &lt;p&gt;Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if any of the following are true:
 * &lt;ul&gt;&lt;li&gt;the values array is null&lt;/li&gt;
 * &lt;li&gt;the weights array is null&lt;/li&gt;
 * &lt;li&gt;the weights array does not have the same length as the values array&lt;/li&gt;
 * &lt;li&gt;the weights array contains one or more infinite values&lt;/li&gt;
 * &lt;li&gt;the weights array contains one or more NaN values&lt;/li&gt;
 * &lt;li&gt;the weights array contains negative values&lt;/li&gt;
 * &lt;li&gt;the start and length arguments do not determine a valid array&lt;/li&gt;
 * &lt;/ul&gt;&lt;/p&gt;
 * &lt;p&gt;Uses the formula, &lt;pre&gt;
 * weighted product = &amp;prod;values[i]&lt;sup&gt;weights[i]&lt;/sup&gt;
 * &lt;/pre&gt;
 * that is, the weights are applied as exponents when computing the weighted product.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>weights the weights array</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the product of the values or 1 if length = 0</return>
    <throws>MathIllegalArgumentException if the parameters are not valid</throws>
    <since>2.1</since>
  </javadoc>
  <method type="double" name="evaluate">
    <declaration type="double" name="product" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;Returns the weighted product of the entries in the input array.&lt;/p&gt;
 * &lt;p&gt;Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if any of the following are true:
 * &lt;ul&gt;&lt;li&gt;the values array is null&lt;/li&gt;
 * &lt;li&gt;the weights array is null&lt;/li&gt;
 * &lt;li&gt;the weights array does not have the same length as the values array&lt;/li&gt;
 * &lt;li&gt;the weights array contains one or more infinite values&lt;/li&gt;
 * &lt;li&gt;the weights array contains one or more NaN values&lt;/li&gt;
 * &lt;li&gt;the weights array contains negative values&lt;/li&gt;
 * &lt;/ul&gt;&lt;/p&gt;
 * &lt;p&gt;Uses the formula, &lt;pre&gt;
 * weighted product = &amp;prod;values[i]&lt;sup&gt;weights[i]&lt;/sup&gt;
 * &lt;/pre&gt;
 * that is, the weights are applied as exponents when computing the weighted product.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>weights the weights array</param>
    <return>the product of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the parameters are not valid</throws>
    <since>2.1</since>
  </javadoc>
  <method type="double" name="evaluate" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Product" name="copy">
    <declaration type="Product" name="result" />
    <comment>No try-catch or advertised exception because args are valid</comment>
  </method>
  <javadoc>
    <text>Copies source to dest.
 * &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;</text>
    <param>source Product to copy</param>
    <param>dest Product to copy to</param>
    <throws>NullArgumentException if either source or dest is null</throws>
  </javadoc>
  <method type="void" name="copy" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
