<?xml version="1.0" encoding="UTF-8"?>
<class name="BaseOptimizer">
  <javadoc>
    <text>Base class for implementing optimizers.
 * It contains the boiler-plate code for counting the number of evaluations
 * of the objective function and the number of iterations of the algorithm,
 * and storing the convergence checker.
 * &lt;em&gt;It is not a "user" class.&lt;/em&gt;</text>
    <param>&lt;PAIR&gt;
 *  Type of the point/value pair returned by the optimization
 * algorithm.</param>
    <version>$Id: BaseOptimizer.java 1458323 2013-03-19 14:51:30Z erans $</version>
    <since>3.1</since>
  </javadoc>
  <javadoc>
    <text>Evaluations counter.</text>
  </javadoc>
  <declaration type="Incrementor" name="evaluations" />
  <javadoc>
    <text>Iterations counter.</text>
  </javadoc>
  <declaration type="Incrementor" name="iterations" />
  <javadoc>
    <text>Convergence checker.</text>
  </javadoc>
  <declaration type="ConvergenceChecker&lt;PAIR&gt;" name="checker" />
  <javadoc>
    <param>checker Convergence checker.</param>
  </javadoc>
  <method type="constructor" name="BaseOptimizer" />
  <javadoc>
    <text>Gets the maximal number of function evaluations.</text>
    <return>the maximal number of function evaluations.</return>
  </javadoc>
  <method type="int" name="getMaxEvaluations" />
  <javadoc>
    <text>Gets the number of evaluations of the objective function.
 * The number of evaluations corresponds to the last call to the{@code optimize} method. It is 0 if the method has not been
 * called yet.</text>
    <return>the number of evaluations of the objective function.</return>
  </javadoc>
  <method type="int" name="getEvaluations" />
  <javadoc>
    <text>Gets the maximal number of iterations.</text>
    <return>the maximal number of iterations.</return>
  </javadoc>
  <method type="int" name="getMaxIterations" />
  <javadoc>
    <text>Gets the number of iterations performed by the algorithm.
 * The number iterations corresponds to the last call to the{@code optimize} method. It is 0 if the method has not been
 * called yet.</text>
    <return>the number of evaluations of the objective function.</return>
  </javadoc>
  <method type="int" name="getIterations" />
  <javadoc>
    <text>Gets the convergence checker.</text>
    <return>the object used to check for convergence.</return>
  </javadoc>
  <method type="ConvergenceChecker&lt;PAIR&gt;" name="getConvergenceChecker" />
  <javadoc>
    <text>Stores data and performs the optimization.
 * &lt;br/&gt;
 * The list of parameters is open-ended so that sub-classes can extend it
 * with arguments specific to their concrete implementations.
 * &lt;br/&gt;
 * When the method is called multiple times, instance data is overwritten
 * only when actually present in the list of arguments: when not specified,
 * data set in a previous call is retained (and thus is optional in
 * subsequent calls).
 * &lt;br/&gt;
 * Important note: Subclasses &lt;em&gt;must&lt;/em&gt; override{@link #parseOptimizationData(OptimizationData[])} if they need to register
 * their own options; but then, they &lt;em&gt;must&lt;/em&gt; also call{@code super.parseOptimizationData(optData)} within that method.</text>
    <param>optData Optimization data.
 * This method will register the following data:
 * &lt;ul&gt;
 * &lt;li&gt;{@link MaxEval}&lt;/li&gt;
 * &lt;li&gt;{@link MaxIter}&lt;/li&gt;
 * &lt;/ul&gt;</param>
    <return>a point/value pair that satifies the convergence criteria.</return>
    <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
    <throws>TooManyIterationsException if the maximal number of
 * iterations is exceeded.</throws>
  </javadoc>
  <method type="PAIR" name="optimize">
    <comment>Parse options.</comment>
    <comment>Reset counters.</comment>
    <comment>Perform optimization.</comment>
  </method>
  <method name="doOptimize" type="PAIR" />
  <javadoc>
    <text>Performs the bulk of the optimization algorithm.</text>
    <return>the point/value pair giving the optimal value of the
 * objective function.</return>
  </javadoc>
  <javadoc>
    <text>Increment the evaluation count.</text>
    <throws>TooManyEvaluationsException if the allowed evaluations
 * have been exhausted.</throws>
  </javadoc>
  <method type="void" name="incrementEvaluationCount" />
  <javadoc>
    <text>Increment the iteration count.</text>
    <throws>TooManyIterationsException if the allowed iterations
 * have been exhausted.</throws>
  </javadoc>
  <method type="void" name="incrementIterationCount" />
  <javadoc>
    <text>Scans the list of (required and optional) optimization data that
 * characterize the problem.</text>
    <param>optData Optimization data.
 * The following data will be looked for:
 * &lt;ul&gt;
 * &lt;li&gt;{@link MaxEval}&lt;/li&gt;
 * &lt;li&gt;{@link MaxIter}&lt;/li&gt;
 * &lt;/ul&gt;</param>
  </javadoc>
  <method type="void" name="parseOptimizationData">
    <scope>
      <scope />
      <scope />
    </scope>
    <comment>The existing values (as set by the previous call) are reused if</comment>
    <comment>not provided in the argument list.</comment>
  </method>
  <javadoc>
    <text>Defines the action to perform when reaching the maximum number
 * of evaluations.</text>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
    <throws>TooManyEvaluationsException.</throws>
  </javadoc>
  <method type="void" name="trigger" />
  <javadoc>
    <text>Defines the action to perform when reaching the maximum number
 * of evaluations.</text>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
    <throws>TooManyIterationsException.</throws>
  </javadoc>
  <method type="void" name="trigger" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
