<?xml version="1.0" encoding="UTF-8"?>
<class name="Incrementor">
  <javadoc>
    <text>Utility that increments a counter until a maximum is reached, at
 * which point, the instance will by default throw a{@link MaxCountExceededException}.
 * However, the user is able to override this behaviour by defining a
 * custom {@link MaxCountExceededCallback callback}, in order to e.g.
 * select which exception must be thrown.</text>
    <since>3.0</since>
    <version>$Id: Incrementor.java 1455194 2013-03-11 15:45:54Z luc $</version>
  </javadoc>
  <javadoc>
    <text>Upper limit for the counter.</text>
  </javadoc>
  <declaration type="int" name="maximalCount" />
  <javadoc>
    <text>Current count.</text>
  </javadoc>
  <declaration type="int" name="count" />
  <javadoc>
    <text>Function called at counter exhaustion.</text>
  </javadoc>
  <declaration type="MaxCountExceededCallback" name="maxCountCallback" />
  <javadoc>
    <text>Default constructor.
 * For the new instance to be useful, the maximal count must be set
 * by calling {@link #setMaximalCount(int) setMaximalCount}.</text>
  </javadoc>
  <method type="constructor" name="Incrementor" />
  <javadoc>
    <text>Defines a maximal count.</text>
    <param>max Maximal count.</param>
  </javadoc>
  <method type="constructor" name="Incrementor">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="void" name="trigger" />
  </method>
  <javadoc>
    <text>Defines a maximal count and a callback method to be triggered at
 * counter exhaustion.</text>
    <param>max Maximal count.</param>
    <param>cb Function to be called when the maximal count has been reached.</param>
    <throws>NullArgumentException if {@code cb} is {@code null}</throws>
  </javadoc>
  <method type="constructor" name="Incrementor">
    <scope />
  </method>
  <javadoc>
    <text>Sets the upper limit for the counter.
 * This does not automatically reset the current count to zero (see{@link #resetCount()}).</text>
    <param>max Upper limit of the counter.</param>
  </javadoc>
  <method type="void" name="setMaximalCount" />
  <javadoc>
    <text>Gets the upper limit of the counter.</text>
    <return>the counter upper limit.</return>
  </javadoc>
  <method type="int" name="getMaximalCount" />
  <javadoc>
    <text>Gets the current count.</text>
    <return>the current count.</return>
  </javadoc>
  <method type="int" name="getCount" />
  <javadoc>
    <text>Checks whether a single increment is allowed.</text>
    <return>{@code false} if the next call to {@link #incrementCount(int)incrementCount} will trigger a {@code MaxCountExceededException},{@code true} otherwise.</return>
  </javadoc>
  <method type="boolean" name="canIncrement" />
  <javadoc>
    <text>Performs multiple increments.
 * See the other {@link #incrementCount() incrementCount} method).</text>
    <param>value Number of increments.</param>
    <throws>MaxCountExceededException at counter exhaustion.</throws>
  </javadoc>
  <method type="void" name="incrementCount">
    <scope />
  </method>
  <javadoc>
    <text>Adds one to the current iteration count.
 * At counter exhaustion, this method will call the{@link MaxCountExceededCallback#trigger(int) trigger} method of the
 * callback object passed to the{@link #Incrementor(int,MaxCountExceededCallback) constructor}.
 * If not explictly set, a default callback is used that will throw
 * a {@code MaxCountExceededException}.</text>
    <throws>MaxCountExceededException at counter exhaustion, unless a
 * custom {@link MaxCountExceededCallback callback} has been set at
 * construction.</throws>
  </javadoc>
  <method type="void" name="incrementCount">
    <scope />
  </method>
  <javadoc>
    <text>Resets the counter to 0.</text>
  </javadoc>
  <method type="void" name="resetCount" />
  <javadoc>
    <text>Defines a method to be called at counter exhaustion.
 * The {@link #trigger(int) trigger} method should usually throw an exception.</text>
  </javadoc>
  <method name="trigger" type="void" />
  <javadoc>
    <text>Function called when the maximal count has been reached.</text>
    <param>maximalCount Maximal count.</param>
    <throws>MaxCountExceededException at counter exhaustion</throws>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
