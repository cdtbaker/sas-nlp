<?xml version="1.0" encoding="UTF-8"?>
<class name="EnumeratedDistribution">
  <javadoc>
    <text>&lt;p&gt;A generic implementation of a
 * &lt;a href="http://en.wikipedia.org/wiki/Probability_distribution#Discrete_probability_distribution"&gt;
 * discrete probability distribution (Wikipedia)&lt;/a&gt; over a finite sample space,
 * based on an enumerated list of &amp;lt;value, probability&amp;gt; pairs.  Input probabilities must all be non-negative,
 * but zero values are allowed and their sum does not have to equal one. Constructors will normalize input
 * probabilities to make them sum to one.&lt;/p&gt;
 * &lt;p&gt;The list of &lt;value, probability&gt; pairs does not, strictly speaking, have to be a function and it can
 * contain null values.  The pmf created by the constructor will combine probabilities of equal values and
 * will treat null values as equal.  For example, if the list of pairs &amp;lt;"dog", 0.2&amp;gt;, &amp;lt;null, 0.1&amp;gt;,
 * &amp;lt;"pig", 0.2&amp;gt;, &amp;lt;"dog", 0.1&amp;gt;, &amp;lt;null, 0.4&amp;gt; is provided to the constructor, the resulting
 * pmf will assign mass of 0.5 to null, 0.3 to "dog" and 0.2 to null.&lt;/p&gt;</text>
    <param>&lt;T&gt;
 *  type of the elements in the sample space.</param>
    <version>$Id: EnumeratedDistribution.java 1456769 2013-03-15 04:51:34Z psteitz $</version>
    <since>3.2</since>
  </javadoc>
  <javadoc>
    <text>Serializable UID.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>RNG instance used to generate samples from the distribution.</text>
  </javadoc>
  <declaration type="RandomGenerator" name="random" />
  <javadoc>
    <text>List of random variable values.</text>
  </javadoc>
  <declaration type="List&lt;T&gt;" name="singletons" />
  <javadoc>
    <text>Probabilities of respective random variable values. For i = 0, ..., singletons.size() - 1,
 * probability[i] is the probability that a random variable following this distribution takes
 * the value singletons[i].</text>
  </javadoc>
  <declaration type="double[]" name="probabilities" />
  <javadoc>
    <text>Create an enumerated distribution using the given probability mass function
 * enumeration.</text>
    <param>pmf probability mass function enumerated as a list of &lt;T, probability&gt;
 * pairs.</param>
    <throws>NotPositiveException if any of the probabilities are negative.</throws>
    <throws>NotFiniteNumberException if any of the probabilities are infinite.</throws>
    <throws>NotANumberException if any of the probabilities are NaN.</throws>
    <throws>MathArithmeticException all of the probabilities are 0.</throws>
  </javadoc>
  <method type="constructor" name="EnumeratedDistribution" />
  <javadoc>
    <text>Create an enumerated distribution using the given random number generator
 * and probability mass function enumeration.</text>
    <param>rng random number generator.</param>
    <param>pmf probability mass function enumerated as a list of &lt;T, probability&gt;
 * pairs.</param>
    <throws>NotPositiveException if any of the probabilities are negative.</throws>
    <throws>NotFiniteNumberException if any of the probabilities are infinite.</throws>
    <throws>NotANumberException if any of the probabilities are NaN.</throws>
    <throws>MathArithmeticException all of the probabilities are 0.</throws>
  </javadoc>
  <method type="constructor" name="EnumeratedDistribution">
    <declaration type="double[]" name="probs" />
    <scope>
      <declaration type="Pair&lt;T,Double&gt;" name="sample" />
      <declaration type="double" name="p" />
      <scope />
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Reseed the random generator used to generate samples.</text>
    <param>seed the new seed</param>
  </javadoc>
  <method type="void" name="reseedRandomGenerator" />
  <javadoc>
    <text>&lt;p&gt;For a random variable {@code X} whose values are distributed according to
 * this distribution, this method returns {@code P(X = x)}. In other words,
 * this method represents the probability mass function (PMF) for the
 * distribution.&lt;/p&gt;
 * &lt;p&gt;Note that if {@code x1} and {@code x2} satisfy {@code x1.equals(x2)},
 * or both are null, then {@code probability(x1) = probability(x2)}.&lt;/p&gt;</text>
    <param>x the point at which the PMF is evaluated</param>
    <return>the value of the probability mass function at {@code x}</return>
  </javadoc>
  <method type="double" name="probability">
    <declaration type="double" name="probability" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;Return the probability mass function as a list of &lt;value, probability&gt; pairs.&lt;/p&gt;
 * &lt;p&gt;Note that if duplicate and / or null values were provided to the constructor
 * when creating this EnumeratedDistribution, the returned list will contain these
 * values.  If duplicates values exist, what is returned will not represent
 * a pmf (i.e., it is up to the caller to consolidate duplicate mass points).&lt;/p&gt;</text>
    <return>the probability mass function.</return>
  </javadoc>
  <method type="List&lt;Pair&lt;T,Double&gt;&gt;" name="getPmf">
    <declaration type="List&lt;Pair&lt;T,Double&gt;&gt;" name="samples" />
    <scope />
  </method>
  <javadoc>
    <text>Generate a random value sampled from this distribution.</text>
    <return>a random value.</return>
  </javadoc>
  <method type="T" name="sample">
    <declaration type="double" name="randomValue" />
    <declaration type="double" name="sum" />
    <scope>
      <scope />
    </scope>
    <comment>This should never happen, but it ensures we will return a correct
 object in case the loop above has some floating point inequality
 problem on the final iteration.</comment>
  </method>
  <javadoc>
    <text>Generate a random sample from the distribution.</text>
    <param>sampleSize the number of random values to generate.</param>
    <return>an array representing the random sample.</return>
    <throws>NotStrictlyPositiveException if {@code sampleSize} is not
 * positive.</throws>
  </javadoc>
  <method type="Object[]" name="sample">
    <scope />
    <declaration type="Object[]" name="out" />
    <scope />
  </method>
  <javadoc>
    <text>Generate a random sample from the distribution.
 * &lt;p&gt;
 * If the requested samples fit in the specified array, it is returned
 * therein. Otherwise, a new array is allocated with the runtime type of
 * the specified array and the size of this collection.</text>
    <param>sampleSize the number of random values to generate.</param>
    <param>array the array to populate.</param>
    <return>an array representing the random sample.</return>
    <throws>NotStrictlyPositiveException if {@code sampleSize} is not positive.</throws>
    <throws>NullArgumentException if {@code array} is null</throws>
  </javadoc>
  <method type="T[]" name="sample">
    <scope />
    <scope />
    <declaration type="T[]" name="out" />
    <scope>
      <declaration type="T[][]" name="unchecked" />
    </scope>
    <scope />
    <scope />
    <comment>safe as both are of type T</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
