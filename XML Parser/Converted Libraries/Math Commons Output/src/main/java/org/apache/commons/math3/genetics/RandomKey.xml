<?xml version="1.0" encoding="UTF-8"?>
<class name="RandomKey">
  <javadoc>
    <text>Random Key chromosome is used for permutation representation. It is a vector
 * of a fixed length of real numbers in [0,1] interval. The index of the i-th
 * smallest value in the vector represents an i-th member of the permutation.
 * &lt;p&gt;
 * For example, the random key [0.2, 0.3, 0.8, 0.1] corresponds to the
 * permutation of indices (3,0,1,2). If the original (unpermuted) sequence would
 * be (a,b,c,d), this would mean the sequence (d,a,b,c).
 * &lt;p&gt;
 * With this representation, common operators like n-point crossover can be
 * used, because any such chromosome represents a valid permutation.
 * &lt;p&gt;
 * Since the chromosome (and thus its arrayRepresentation) is immutable, the
 * array representation is sorted only once in the constructor.
 * &lt;p&gt;
 * For details, see:
 * &lt;ul&gt;
 * &lt;li&gt;Bean, J.C.: Genetic algorithms and random keys for sequencing and
 * optimization. ORSA Journal on Computing 6 (1994) 154-160&lt;/li&gt;
 * &lt;li&gt;Rothlauf, F.: Representations for Genetic and Evolutionary Algorithms.
 * Volume 104 of Studies in Fuzziness and Soft Computing. Physica-Verlag,
 * Heidelberg (2002)&lt;/li&gt;
 * &lt;/ul&gt;</text>
    <param>&lt;T&gt;
 *  type of the permuted objects</param>
    <since>2.0</since>
    <version>$Id: RandomKey.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Cache of sorted representation (unmodifiable).</text>
  </javadoc>
  <declaration type="List&lt;Double&gt;" name="sortedRepresentation" />
  <javadoc>
    <text>Base sequence [0,1,...,n-1], permuted accorting to the representation (unmodifiable).</text>
  </javadoc>
  <declaration type="List&lt;Integer&gt;" name="baseSeqPermutation" />
  <javadoc>
    <text>Constructor.</text>
    <param>representation list of [0,1] values representing the permutation</param>
    <throws>InvalidRepresentationException iff the &lt;code&gt;representation&lt;/code&gt; can not represent a valid chromosome</throws>
  </javadoc>
  <method type="constructor" name="RandomKey">
    <declaration type="List&lt;Double&gt;" name="sortedRepr" />
    <comment>store the sorted representation</comment>
    <comment>store the permutation of [0,1,...,n-1] list for toString() and isSame() methods</comment>
  </method>
  <javadoc>
    <text>Constructor.</text>
    <param>representation array of [0,1] values representing the permutation</param>
    <throws>InvalidRepresentationException iff the &lt;code&gt;representation&lt;/code&gt; can not represent a valid chromosome</throws>
  </javadoc>
  <method type="constructor" name="RandomKey" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="List&lt;T&gt;" name="decode" />
  <javadoc>
    <text>Decodes a permutation represented by &lt;code&gt;representation&lt;/code&gt; and
 * returns a (generic) list with the permuted values.</text>
    <param>&lt;S&gt;
 *  generic type of the sequence values</param>
    <param>sequence the unpermuted sequence</param>
    <param>representation representation of the permutation ([0,1] vector)</param>
    <param>sortedRepr sorted &lt;code&gt;representation&lt;/code&gt;</param>
    <return>list with the sequence values permuted according to the representation</return>
    <throws>DimensionMismatchException iff the length of the &lt;code&gt;sequence&lt;/code&gt;,
 * &lt;code&gt;representation&lt;/code&gt; or &lt;code&gt;sortedRepr&lt;/code&gt; lists are not equal</throws>
  </javadoc>
  <method type="List&lt;S&gt;" name="decodeGeneric">
    <declaration type="int" name="l" />
    <scope />
    <scope />
    <declaration type="List&lt;Double&gt;" name="reprCopy" />
    <declaration type="List&lt;S&gt;" name="res" />
    <scope>
      <declaration type="int" name="index" />
    </scope>
    <comment>the size of the three lists must be equal</comment>
    <comment>do not modify the original representation</comment>
    <comment>now find the indices in the original repr and use them for permuting</comment>
  </method>
  <javadoc>
    <text>Returns &lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;another&lt;/code&gt; is a RandomKey and
 * encodes the same permutation.</text>
    <param>another chromosome to compare</param>
    <return>true iff chromosomes encode the same permutation</return>
  </javadoc>
  <method type="boolean" name="isSame">
    <scope />
    <declaration type="RandomKey&lt;?&gt;" name="anotherRk" />
    <scope />
    <declaration type="List&lt;Integer&gt;" name="thisPerm" />
    <declaration type="List&lt;Integer&gt;" name="anotherPerm" />
    <scope>
      <scope />
    </scope>
    <comment>type check</comment>
    <comment>size check</comment>
    <comment>two different representations can still encode the same permutation</comment>
    <comment>the ordering is what counts</comment>
    <comment>the permutations are the same</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="checkValidity">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Generates a representation corresponding to a random permutation of
 * length l which can be passed to the RandomKey constructor.</text>
    <param>l length of the permutation</param>
    <return>representation of a random permutation</return>
  </javadoc>
  <method type="List&lt;Double&gt;" name="randomPermutation">
    <declaration type="List&lt;Double&gt;" name="repr" />
    <scope />
  </method>
  <javadoc>
    <text>Generates a representation corresponding to an identity permutation of
 * length l which can be passed to the RandomKey constructor.</text>
    <param>l length of the permutation</param>
    <return>representation of an identity permutation</return>
  </javadoc>
  <method type="List&lt;Double&gt;" name="identityPermutation">
    <declaration type="List&lt;Double&gt;" name="repr" />
    <scope />
  </method>
  <javadoc>
    <text>Generates a representation of a permutation corresponding to the
 * &lt;code&gt;data&lt;/code&gt; sorted by &lt;code&gt;comparator&lt;/code&gt;. The
 * &lt;code&gt;data&lt;/code&gt; is not modified during the process.
 * This is useful if you want to inject some permutations to the initial
 * population.</text>
    <param>&lt;S&gt;
 *  type of the data</param>
    <param>data list of data determining the order</param>
    <param>comparator how the data will be compared</param>
    <return>list representation of the permutation corresponding to the parameters</return>
  </javadoc>
  <method type="List&lt;Double&gt;" name="comparatorPermutation">
    <declaration type="List&lt;S&gt;" name="sortedData" />
  </method>
  <javadoc>
    <text>Generates a representation of a permutation corresponding to a
 * permutation which yields &lt;code&gt;permutedData&lt;/code&gt; when applied to
 * &lt;code&gt;originalData&lt;/code&gt;.
 * This method can be viewed as an inverse to {@link #decode(List)}.</text>
    <param>&lt;S&gt;
 *  type of the data</param>
    <param>originalData the original, unpermuted data</param>
    <param>permutedData the data, somehow permuted</param>
    <return>representation of a permutation corresponding to the permutation
 * &lt;code&gt;originalData -&gt; permutedData&lt;/code&gt;</return>
    <throws>DimensionMismatchException iff the length of &lt;code&gt;originalData&lt;/code&gt;
 * and &lt;code&gt;permutedData&lt;/code&gt; lists are not equal</throws>
    <throws>MathIllegalArgumentException iff the &lt;code&gt;permutedData&lt;/code&gt; and
 * &lt;code&gt;originalData&lt;/code&gt; lists contain different data</throws>
  </javadoc>
  <method type="List&lt;Double&gt;" name="inducedPermutation">
    <scope />
    <declaration type="int" name="l" />
    <declaration type="List&lt;S&gt;" name="origDataCopy" />
    <declaration type="Double[]" name="res" />
    <scope>
      <declaration type="int" name="index" />
      <scope />
    </scope>
  </method>
  <method type="String" name="toString" />
  <javadoc>
    <text>Helper for constructor. Generates a list of natural numbers (0,1,...,l-1).</text>
    <param>l length of list to generate</param>
    <return>list of integers from 0 to l-1</return>
  </javadoc>
  <method type="List&lt;Integer&gt;" name="baseSequence">
    <declaration type="List&lt;Integer&gt;" name="baseSequence" />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
