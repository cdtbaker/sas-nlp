<?xml version="1.0" encoding="UTF-8"?>
<class name="package-info">
  <javadoc>
    <text>&lt;h2&gt;All classes and sub-packages of this package are deprecated.&lt;/h2&gt;
 * &lt;h3&gt;Please use their replacements, to be found under
 * &lt;ul&gt;
 * &lt;li&gt;{@link org.apache.commons.math3.optim}&lt;/li&gt;
 * &lt;li&gt;{@link org.apache.commons.math3.fitting}&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/h3&gt;
 * &lt;p&gt;
 * This package provides common interfaces for the optimization algorithms
 * provided in sub-packages. The main interfaces defines optimizers and convergence
 * checkers. The functions that are optimized by the algorithms provided by this
 * package and its sub-packages are a subset of the one defined in the &lt;code&gt;analysis&lt;/code&gt;
 * package, namely the real and vector valued functions. These functions are called
 * objective function here. When the goal is to minimize, the functions are often called
 * cost function, this name is not used in this package.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Optimizers are the algorithms that will either minimize or maximize, the objective function
 * by changing its input variables set until an optimal set is found. There are only four
 * interfaces defining the common behavior of optimizers, one for each supported type of objective
 * function:
 * &lt;ul&gt;
 * &lt;li&gt;{@link org.apache.commons.math3.optimization.univariate.UnivariateOptimizerUnivariateOptimizer} for {@link org.apache.commons.math3.analysis.UnivariateFunctionunivariate real functions}&lt;/li&gt;
 * &lt;li&gt;{@link org.apache.commons.math3.optimization.MultivariateOptimizerMultivariateOptimizer} for {@link org.apache.commons.math3.analysis.MultivariateFunctionmultivariate real functions}&lt;/li&gt;
 * &lt;li&gt;{@link org.apache.commons.math3.optimization.MultivariateDifferentiableOptimizerMultivariateDifferentiableOptimizer} for {@link org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunctionmultivariate differentiable real functions}&lt;/li&gt;
 * &lt;li&gt;{@link org.apache.commons.math3.optimization.MultivariateDifferentiableVectorOptimizerMultivariateDifferentiableVectorOptimizer} for {@link org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunctionmultivariate differentiable vectorial functions}&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * Despite there are only four types of supported optimizers, it is possible to optimize a
 * transform a {@link org.apache.commons.math3.analysis.MultivariateVectorFunctionnon-differentiable multivariate vectorial function} by converting it to a {@link org.apache.commons.math3.analysis.MultivariateFunction non-differentiable multivariate
 * real function} thanks to the {@link org.apache.commons.math3.optimization.LeastSquaresConverter LeastSquaresConverter} helper class.
 * The transformed function can be optimized using any implementation of the {@link org.apache.commons.math3.optimization.MultivariateOptimizer MultivariateOptimizer} interface.
 * &lt;/p&gt;
 * &lt;p&gt;
 * For each of the four types of supported optimizers, there is a special implementation which
 * wraps a classical optimizer in order to add it a multi-start feature. This feature call the
 * underlying optimizer several times in sequence with different starting points and returns
 * the best optimum found or all optima if desired. This is a classical way to prevent being
 * trapped into a local extremum when looking for a global one.
 * &lt;/p&gt;</text>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
