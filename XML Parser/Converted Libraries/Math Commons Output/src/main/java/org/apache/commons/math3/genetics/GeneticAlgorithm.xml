<?xml version="1.0" encoding="UTF-8"?>
<class name="GeneticAlgorithm">
  <javadoc>
    <text>Implementation of a genetic algorithm. All factors that govern the operation
 * of the algorithm can be configured for a specific problem.</text>
    <since>2.0</since>
    <version>$Id: GeneticAlgorithm.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Static random number generator shared by GA implementation classes. Set the randomGenerator seed to get
 * reproducible results. Use {@link #setRandomGenerator(RandomGenerator)} to supply an alternative to the default
 * JDK-provided PRNG.</text>
  </javadoc>
  <declaration type="RandomGenerator" name="randomGenerator" />
  <javadoc>
    <text>the crossover policy used by the algorithm.</text>
  </javadoc>
  <declaration type="CrossoverPolicy" name="crossoverPolicy" />
  <javadoc>
    <text>the rate of crossover for the algorithm.</text>
  </javadoc>
  <declaration type="double" name="crossoverRate" />
  <javadoc>
    <text>the mutation policy used by the algorithm.</text>
  </javadoc>
  <declaration type="MutationPolicy" name="mutationPolicy" />
  <javadoc>
    <text>the rate of mutation for the algorithm.</text>
  </javadoc>
  <declaration type="double" name="mutationRate" />
  <javadoc>
    <text>the selection policy used by the algorithm.</text>
  </javadoc>
  <declaration type="SelectionPolicy" name="selectionPolicy" />
  <javadoc>
    <text>the number of generations evolved to reach {@link StoppingCondition} in the last run.</text>
  </javadoc>
  <declaration type="int" name="generationsEvolved" />
  <javadoc>
    <text>Create a new genetic algorithm.</text>
    <param>crossoverPolicy The {@link CrossoverPolicy}</param>
    <param>crossoverRate The crossover rate as a percentage (0-1 inclusive)</param>
    <param>mutationPolicy The {@link MutationPolicy}</param>
    <param>mutationRate The mutation rate as a percentage (0-1 inclusive)</param>
    <param>selectionPolicy The {@link SelectionPolicy}</param>
    <throws>OutOfRangeException if the crossover or mutation rate is outside the [0, 1] range</throws>
  </javadoc>
  <method type="constructor" name="GeneticAlgorithm">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Set the (static) random generator.</text>
    <param>random random generator</param>
  </javadoc>
  <method type="void" name="setRandomGenerator" />
  <javadoc>
    <text>Returns the (static) random generator.</text>
    <return>the static random generator shared by GA implementation classes</return>
  </javadoc>
  <method type="RandomGenerator" name="getRandomGenerator" />
  <javadoc>
    <text>Evolve the given population. Evolution stops when the stopping condition
 * is satisfied. Updates the {@link #getGenerationsEvolved() generationsEvolved}property with the number of generations evolved before the StoppingCondition
 * is satisfied.</text>
    <param>initial the initial, seed population.</param>
    <param>condition the stopping condition used to stop evolution.</param>
    <return>the population that satisfies the stopping condition.</return>
  </javadoc>
  <method type="Population" name="evolve">
    <declaration type="Population" name="current" />
    <scope />
  </method>
  <javadoc>
    <text>Evolve the given population into the next generation.
 * &lt;p&gt;
 * &lt;ol&gt;
 * &lt;li&gt;Get nextGeneration population to fill from &lt;code&gt;current&lt;/code&gt;
 * generation, using its nextGeneration method&lt;/li&gt;
 * &lt;li&gt;Loop until new generation is filled:&lt;/li&gt;
 * &lt;ul&gt;&lt;li&gt;Apply configured SelectionPolicy to select a pair of parents
 * from &lt;code&gt;current&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;With probability = {@link #getCrossoverRate()}, apply
 * configured {@link CrossoverPolicy} to parents&lt;/li&gt;
 * &lt;li&gt;With probability = {@link #getMutationRate()}, apply
 * configured {@link MutationPolicy} to each of the offspring&lt;/li&gt;
 * &lt;li&gt;Add offspring individually to nextGeneration,
 * space permitting&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;li&gt;Return nextGeneration&lt;/li&gt;
 * &lt;/ol&gt;</text>
    <param>current the current population.</param>
    <return>the population for the next generation.</return>
  </javadoc>
  <method type="Population" name="nextGeneration">
    <declaration type="Population" name="nextGeneration" />
    <declaration type="RandomGenerator" name="randGen" />
    <scope>
      <declaration type="ChromosomePair" name="pair" />
      <scope />
      <scope />
      <scope />
    </scope>
    <comment>select parent chromosomes</comment>
    <comment>crossover?</comment>
    <comment>apply crossover policy to create two offspring</comment>
    <comment>mutation?</comment>
    <comment>apply mutation policy to the chromosomes</comment>
    <comment>add the first chromosome to the population</comment>
    <comment>is there still a place for the second chromosome?</comment>
    <comment>add the second chromosome to the population</comment>
  </method>
  <javadoc>
    <text>Returns the crossover policy.</text>
    <return>crossover policy</return>
  </javadoc>
  <method type="CrossoverPolicy" name="getCrossoverPolicy" />
  <javadoc>
    <text>Returns the crossover rate.</text>
    <return>crossover rate</return>
  </javadoc>
  <method type="double" name="getCrossoverRate" />
  <javadoc>
    <text>Returns the mutation policy.</text>
    <return>mutation policy</return>
  </javadoc>
  <method type="MutationPolicy" name="getMutationPolicy" />
  <javadoc>
    <text>Returns the mutation rate.</text>
    <return>mutation rate</return>
  </javadoc>
  <method type="double" name="getMutationRate" />
  <javadoc>
    <text>Returns the selection policy.</text>
    <return>selection policy</return>
  </javadoc>
  <method type="SelectionPolicy" name="getSelectionPolicy" />
  <javadoc>
    <text>Returns the number of generations evolved to reach {@link StoppingCondition} in the last run.</text>
    <return>number of generations evolved</return>
    <since>2.1</since>
  </javadoc>
  <method type="int" name="getGenerationsEvolved" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>@GuardedBy("this")</comment>
</class>
