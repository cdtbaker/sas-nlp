<?xml version="1.0" encoding="UTF-8"?>
<class name="AggregateSummaryStatistics">
  <javadoc>
    <text>&lt;p&gt;
 * An aggregator for {@code SummaryStatistics} from several data sets or
 * data set partitions.  In its simplest usage mode, the client creates an
 * instance via the zero-argument constructor, then uses{@link #createContributingStatistics()} to obtain a {@code SummaryStatistics}for each individual data set / partition.  The per-set statistics objects
 * are used as normal, and at any time the aggregate statistics for all the
 * contributors can be obtained from this object.
 * &lt;/p&gt;&lt;p&gt;
 * Clients with specialized requirements can use alternative constructors to
 * control the statistics implementations and initial values used by the
 * contributing and the internal aggregate {@code SummaryStatistics} objects.
 * &lt;/p&gt;&lt;p&gt;
 * A static {@link #aggregate(Collection)} method is also included that computes
 * aggregate statistics directly from a Collection of SummaryStatistics instances.
 * &lt;/p&gt;&lt;p&gt;
 * When {@link #createContributingStatistics()} is used to create SummaryStatistics
 * instances to be aggregated concurrently, the created instances'{@link SummaryStatistics#addValue(double)} methods must synchronize on the aggregating
 * instance maintained by this class.  In multithreaded environments, if the functionality
 * provided by {@link #aggregate(Collection)} is adequate, that method should be used
 * to avoid unnecessary computation and synchronization delays.&lt;/p&gt;</text>
    <since>2.0</since>
    <version>$Id: AggregateSummaryStatistics.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>A SummaryStatistics serving as a prototype for creating SummaryStatistics
 * contributing to this aggregate</text>
  </javadoc>
  <declaration type="SummaryStatistics" name="statisticsPrototype" />
  <javadoc>
    <text>The SummaryStatistics in which aggregate statistics are accumulated.</text>
  </javadoc>
  <declaration type="SummaryStatistics" name="statistics" />
  <javadoc>
    <text>Initializes a new AggregateSummaryStatistics with default statistics
 * implementations.</text>
  </javadoc>
  <method type="constructor" name="AggregateSummaryStatistics">
    <comment>No try-catch or throws NAE because arg is guaranteed non-null</comment>
  </method>
  <javadoc>
    <text>Initializes a new AggregateSummaryStatistics with the specified statistics
 * object as a prototype for contributing statistics and for the internal
 * aggregate statistics.  This provides for customized statistics implementations
 * to be used by contributing and aggregate statistics.</text>
    <param>prototypeStatistics a {@code SummaryStatistics} serving as a
 * prototype both for the internal aggregate statistics and for
 * contributing statistics obtained via the{@code createContributingStatistics()} method.  Being a prototype
 * means that other objects are initialized by copying this object's state.
 * If {@code null}, a new, default statistics object is used.  Any statistic
 * values in the prototype are propagated to contributing statistics
 * objects and (once) into these aggregate statistics.</param>
    <throws>NullArgumentException if prototypeStatistics is null</throws>
    <see>#createContributingStatistics()</see>
  </javadoc>
  <method type="constructor" name="AggregateSummaryStatistics" />
  <javadoc>
    <text>Initializes a new AggregateSummaryStatistics with the specified statistics
 * object as a prototype for contributing statistics and for the internal
 * aggregate statistics.  This provides for different statistics implementations
 * to be used by contributing and aggregate statistics and for an initial
 * state to be supplied for the aggregate statistics.</text>
    <param>prototypeStatistics a {@code SummaryStatistics} serving as a
 * prototype both for the internal aggregate statistics and for
 * contributing statistics obtained via the{@code createContributingStatistics()} method.  Being a prototype
 * means that other objects are initialized by copying this object's state.
 * If {@code null}, a new, default statistics object is used.  Any statistic
 * values in the prototype are propagated to contributing statistics
 * objects, but not into these aggregate statistics.</param>
    <param>initialStatistics a {@code SummaryStatistics} to serve as the
 * internal aggregate statistics object.  If {@code null}, a new, default
 * statistics object is used.</param>
    <see>#createContributingStatistics()</see>
  </javadoc>
  <method type="constructor" name="AggregateSummaryStatistics" />
  <javadoc>
    <text>{@inheritDoc}.  This version returns the maximum over all the aggregated
 * data.</text>
    <see>StatisticalSummary#getMax()</see>
  </javadoc>
  <method type="double" name="getMax">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}.  This version returns the mean of all the aggregated data.</text>
    <see>StatisticalSummary#getMean()</see>
  </javadoc>
  <method type="double" name="getMean">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}.  This version returns the minimum over all the aggregated
 * data.</text>
    <see>StatisticalSummary#getMin()</see>
  </javadoc>
  <method type="double" name="getMin">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}.  This version returns a count of all the aggregated data.</text>
    <see>StatisticalSummary#getN()</see>
  </javadoc>
  <method type="long" name="getN">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}.  This version returns the standard deviation of all the
 * aggregated data.</text>
    <see>StatisticalSummary#getStandardDeviation()</see>
  </javadoc>
  <method type="double" name="getStandardDeviation">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}.  This version returns a sum of all the aggregated data.</text>
    <see>StatisticalSummary#getSum()</see>
  </javadoc>
  <method type="double" name="getSum">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}.  This version returns the variance of all the aggregated
 * data.</text>
    <see>StatisticalSummary#getVariance()</see>
  </javadoc>
  <method type="double" name="getVariance">
    <scope />
  </method>
  <javadoc>
    <text>Returns the sum of the logs of all the aggregated data.</text>
    <return>the sum of logs</return>
    <see>SummaryStatistics#getSumOfLogs()</see>
  </javadoc>
  <method type="double" name="getSumOfLogs">
    <scope />
  </method>
  <javadoc>
    <text>Returns the geometric mean of all the aggregated data.</text>
    <return>the geometric mean</return>
    <see>SummaryStatistics#getGeometricMean()</see>
  </javadoc>
  <method type="double" name="getGeometricMean">
    <scope />
  </method>
  <javadoc>
    <text>Returns the sum of the squares of all the aggregated data.</text>
    <return>The sum of squares</return>
    <see>SummaryStatistics#getSumsq()</see>
  </javadoc>
  <method type="double" name="getSumsq">
    <scope />
  </method>
  <javadoc>
    <text>Returns a statistic related to the Second Central Moment.  Specifically,
 * what is returned is the sum of squared deviations from the sample mean
 * among the all of the aggregated data.</text>
    <return>second central moment statistic</return>
    <see>SummaryStatistics#getSecondMoment()</see>
  </javadoc>
  <method type="double" name="getSecondMoment">
    <scope />
  </method>
  <javadoc>
    <text>Return a {@link StatisticalSummaryValues} instance reporting current
 * aggregate statistics.</text>
    <return>Current values of aggregate statistics</return>
  </javadoc>
  <method type="StatisticalSummary" name="getSummary">
    <scope />
  </method>
  <javadoc>
    <text>Creates and returns a {@code SummaryStatistics} whose data will be
 * aggregated with those of this {@code AggregateSummaryStatistics}.</text>
    <return>a {@code SummaryStatistics} whose data will be aggregated with
 * those of this {@code AggregateSummaryStatistics}.  The initial state
 * is a copy of the configured prototype statistics.</return>
  </javadoc>
  <method type="SummaryStatistics" name="createContributingStatistics">
    <declaration type="SummaryStatistics" name="contributingStatistics" />
    <comment>No try - catch or advertising NAE because neither argument will ever be null</comment>
  </method>
  <javadoc>
    <text>Computes aggregate summary statistics. This method can be used to combine statistics
 * computed over partitions or subsamples - i.e., the StatisticalSummaryValues returned
 * should contain the same values that would have been obtained by computing a single
 * StatisticalSummary over the combined dataset.
 * &lt;p&gt;
 * Returns null if the collection is empty or null.
 * &lt;/p&gt;</text>
    <param>statistics collection of SummaryStatistics to aggregate</param>
    <return>summary statistics for the combined dataset</return>
  </javadoc>
  <method type="StatisticalSummaryValues" name="aggregate">
    <scope />
    <declaration type="Iterator&lt;SummaryStatistics&gt;" name="iterator" />
    <scope />
    <declaration type="SummaryStatistics" name="current" />
    <declaration type="long" name="n" />
    <declaration type="double" name="min" />
    <declaration type="double" name="sum" />
    <declaration type="double" name="max" />
    <declaration type="double" name="m2" />
    <declaration type="double" name="mean" />
    <scope>
      <scope />
      <scope />
      <declaration type="double" name="oldN" />
      <declaration type="double" name="curN" />
      <declaration type="double" name="meanDiff" />
    </scope>
    <declaration type="double" name="variance" />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>A SummaryStatistics that also forwards all values added to it to a second{@code SummaryStatistics} for aggregation.</text>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>The serialization version of this class</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>An additional SummaryStatistics into which values added to these
 * statistics (and possibly others) are aggregated</text>
  </javadoc>
  <declaration type="SummaryStatistics" name="aggregateStatistics" />
  <javadoc>
    <text>Initializes a new AggregatingSummaryStatistics with the specified
 * aggregate statistics object</text>
    <param>aggregateStatistics a {@code SummaryStatistics} into which
 * values added to this statistics object should be aggregated</param>
  </javadoc>
  <method type="constructor" name="AggregatingSummaryStatistics" />
  <javadoc>
    <text>{@inheritDoc}.  This version adds the provided value to the configured
 * aggregate after adding it to these statistics.</text>
    <see>SummaryStatistics#addValue(double)</see>
  </javadoc>
  <method type="void" name="addValue">
    <scope />
  </method>
  <javadoc>
    <text>Returns true iff &lt;code&gt;object&lt;/code&gt; is a
 * &lt;code&gt;SummaryStatistics&lt;/code&gt; instance and all statistics have the
 * same values as this.</text>
    <param>object the object to test equality against.</param>
    <return>true if object equals this</return>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope />
    <declaration type="AggregatingSummaryStatistics" name="stat" />
  </method>
  <javadoc>
    <text>Returns hash code based on values of statistics</text>
    <return>hash code</return>
  </javadoc>
  <method type="int" name="hashCode" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
