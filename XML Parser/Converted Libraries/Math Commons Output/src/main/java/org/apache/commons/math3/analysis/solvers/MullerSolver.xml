<?xml version="1.0" encoding="UTF-8"?>
<class name="MullerSolver">
  <javadoc>
    <text>This class implements the &lt;a href="http://mathworld.wolfram.com/MullersMethod.html"&gt;
 * Muller's Method&lt;/a&gt; for root finding of real univariate functions. For
 * reference, see &lt;b&gt;Elementary Numerical Analysis&lt;/b&gt;, ISBN 0070124477,
 * chapter 3.
 * &lt;p&gt;
 * Muller's method applies to both real and complex functions, but here we
 * restrict ourselves to real functions.
 * This class differs from {@link MullerSolver} in the way it avoids complex
 * operations.&lt;/p&gt;
 * Muller's original method would have function evaluation at complex point.
 * Since our f(x) is real, we have to find ways to avoid that. Bracketing
 * condition is one way to go: by requiring bracketing in every iteration,
 * the newly computed approximation is guaranteed to be real.&lt;/p&gt;
 * &lt;p&gt;
 * Normally Muller's method converges quadratically in the vicinity of a
 * zero, however it may be very slow in regions far away from zeros. For
 * example, f(x) = exp(x) - 1, min = -50, max = 100. In such case we use
 * bisection as a safety backup if it performs very poorly.&lt;/p&gt;
 * &lt;p&gt;
 * The formulas here use divided differences directly.&lt;/p&gt;</text>
    <version>$Id: MullerSolver.java 1391927 2012-09-30 00:03:30Z erans $</version>
    <since>1.2</since>
    <see>MullerSolver2</see>
  </javadoc>
  <javadoc>
    <text>Default absolute accuracy.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_ABSOLUTE_ACCURACY" />
  <javadoc>
    <text>Construct a solver with default accuracy (1e-6).</text>
  </javadoc>
  <method type="constructor" name="MullerSolver" />
  <javadoc>
    <text>Construct a solver.</text>
    <param>absoluteAccuracy Absolute accuracy.</param>
  </javadoc>
  <method type="constructor" name="MullerSolver" />
  <javadoc>
    <text>Construct a solver.</text>
    <param>relativeAccuracy Relative accuracy.</param>
    <param>absoluteAccuracy Absolute accuracy.</param>
  </javadoc>
  <method type="constructor" name="MullerSolver" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="doSolve">
    <declaration type="double" name="min" />
    <declaration type="double" name="max" />
    <declaration type="double" name="initial" />
    <declaration type="double" name="functionValueAccuracy" />
    <declaration type="double" name="fMin" />
    <scope />
    <declaration type="double" name="fMax" />
    <scope />
    <declaration type="double" name="fInitial" />
    <scope />
    <scope />
    <scope />
    <comment>check for zeros before verifying bracketing</comment>
  </method>
  <javadoc>
    <text>Find a real root in the given interval.</text>
    <param>min Lower bound for the interval.</param>
    <param>max Upper bound for the interval.</param>
    <param>fMin function value at the lower bound.</param>
    <param>fMax function value at the upper bound.</param>
    <return>the point at which the function value is zero.</return>
    <throws>TooManyEvaluationsException if the allowed number of calls to
 * the function to be solved has been exhausted.</throws>
  </javadoc>
  <method type="double" name="solve">
    <declaration type="double" name="relativeAccuracy" />
    <declaration type="double" name="absoluteAccuracy" />
    <declaration type="double" name="functionValueAccuracy" />
    <declaration type="double" name="x0" />
    <declaration type="double" name="y0" />
    <declaration type="double" name="x2" />
    <declaration type="double" name="y2" />
    <declaration type="double" name="x1" />
    <declaration type="double" name="y1" />
    <declaration type="double" name="oldx" />
    <scope>
      <declaration type="double" name="d01" />
      <declaration type="double" name="d12" />
      <declaration type="double" name="d012" />
      <declaration type="double" name="c1" />
      <declaration type="double" name="delta" />
      <declaration type="double" name="xplus" />
      <declaration type="double" name="xminus" />
      <declaration type="double" name="x" />
      <declaration type="double" name="y" />
      <declaration type="double" name="tolerance" />
      <scope />
      <declaration type="boolean" name="bisect" />
      <scope />
      <scope>
        <declaration type="double" name="xm" />
        <declaration type="double" name="ym" />
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>[x0, x2] is the bracketing interval in each iteration</comment>
    <comment>x1 is the last approximation and an interpolation point in (x0, x2)</comment>
    <comment>x is the new root approximation and new x1 for next round</comment>
    <comment>d01, d12, d012 are divided differences</comment>
    <comment>Muller's method employs quadratic interpolation through</comment>
    <comment>x0, x1, x2 and x is the zero of the interpolating parabola.</comment>
    <comment>Due to bracketing condition, this parabola must have two</comment>
    <comment>real roots and we choose one in [x0, x2] to be x.</comment>
    <comment>xplus and xminus are two roots of parabola and at least</comment>
    <comment>one of them should lie in (x0, x2)</comment>
    <comment>check for convergence</comment>
    <comment>Bisect if convergence is too slow. Bisection would waste</comment>
    <comment>our calculation of x, hopefully it won't happen often.</comment>
    <comment>the real number equality test x == x1 is intentional and</comment>
    <comment>completes the proximity tests above it</comment>
    <comment>prepare the new bracketing interval for next iteration</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
