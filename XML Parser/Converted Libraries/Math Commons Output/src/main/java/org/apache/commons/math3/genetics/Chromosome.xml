<?xml version="1.0" encoding="UTF-8"?>
<class name="Chromosome">
  <javadoc>
    <text>Individual in a population. Chromosomes are compared based on their fitness.
 * &lt;p&gt;
 * The chromosomes are IMMUTABLE, and so their fitness is also immutable and
 * therefore it can be cached.</text>
    <since>2.0</since>
    <version>$Id: Chromosome.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Value assigned when no fitness has been computed yet.</text>
  </javadoc>
  <declaration type="double" name="NO_FITNESS" />
  <javadoc>
    <text>Cached value of the fitness of this chromosome.</text>
  </javadoc>
  <declaration type="double" name="fitness" />
  <javadoc>
    <text>Access the fitness of this chromosome. The bigger the fitness, the better the chromosome.
 * &lt;p&gt;
 * Computation of fitness is usually very time-consuming task, therefore the fitness is cached.</text>
    <return>the fitness</return>
  </javadoc>
  <method type="double" name="getFitness">
    <scope />
    <comment>no cache - compute the fitness</comment>
  </method>
  <javadoc>
    <text>Compares two chromosomes based on their fitness. The bigger the fitness, the better the chromosome.</text>
    <param>another another chromosome to compare</param>
    <return>&lt;ul&gt;
 * &lt;li&gt;-1 if &lt;code&gt;another&lt;/code&gt; is better than &lt;code&gt;this&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;1 if &lt;code&gt;another&lt;/code&gt; is worse than &lt;code&gt;this&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;0 if the two chromosomes have the same fitness&lt;/li&gt;
 * &lt;/ul&gt;</return>
  </javadoc>
  <method type="int" name="compareTo" />
  <javadoc>
    <text>Returns &lt;code&gt;true&lt;/code&gt; iff &lt;code&gt;another&lt;/code&gt; has the same representation and therefore the same fitness. By
 * default, it returns false -- override it in your implementation if you need it.</text>
    <param>another chromosome to compare</param>
    <return>true if &lt;code&gt;another&lt;/code&gt; is equivalent to this chromosome</return>
  </javadoc>
  <method type="boolean" name="isSame" />
  <javadoc>
    <text>Searches the &lt;code&gt;population&lt;/code&gt; for another chromosome with the same representation. If such chromosome is
 * found, it is returned, if no such chromosome exists, returns &lt;code&gt;null&lt;/code&gt;.</text>
    <param>population Population to search</param>
    <return>Chromosome with the same representation, or &lt;code&gt;null&lt;/code&gt; if no such chromosome exists.</return>
  </javadoc>
  <method type="Chromosome" name="findSameChromosome">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Searches the population for a chromosome representing the same solution, and if it finds one,
 * updates the fitness to its value.</text>
    <param>population Population to search</param>
  </javadoc>
  <method type="void" name="searchForFitnessUpdate">
    <declaration type="Chromosome" name="sameChromosome" />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
