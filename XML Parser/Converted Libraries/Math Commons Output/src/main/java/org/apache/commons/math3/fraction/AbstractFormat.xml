<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractFormat">
  <javadoc>
    <text>Common part shared by both {@link FractionFormat} and {@link BigFractionFormat}.</text>
    <version>$Id: AbstractFormat.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>The format used for the denominator.</text>
  </javadoc>
  <declaration type="NumberFormat" name="denominatorFormat" />
  <javadoc>
    <text>The format used for the numerator.</text>
  </javadoc>
  <declaration type="NumberFormat" name="numeratorFormat" />
  <javadoc>
    <text>Create an improper formatting instance with the default number format
 * for the numerator and denominator.</text>
  </javadoc>
  <method type="constructor" name="AbstractFormat" />
  <javadoc>
    <text>Create an improper formatting instance with a custom number format for
 * both the numerator and denominator.</text>
    <param>format the custom format for both the numerator and denominator.</param>
  </javadoc>
  <method type="constructor" name="AbstractFormat" />
  <javadoc>
    <text>Create an improper formatting instance with a custom number format for
 * the numerator and a custom number format for the denominator.</text>
    <param>numeratorFormat the custom format for the numerator.</param>
    <param>denominatorFormat the custom format for the denominator.</param>
  </javadoc>
  <method type="constructor" name="AbstractFormat" />
  <javadoc>
    <text>Create a default number format.  The default number format is based on{@link NumberFormat#getNumberInstance(java.util.Locale)}. The only
 * customization is the maximum number of BigFraction digits, which is set to 0.</text>
    <return>the default number format.</return>
  </javadoc>
  <method type="NumberFormat" name="getDefaultNumberFormat" />
  <javadoc>
    <text>Create a default number format.  The default number format is based on{@link NumberFormat#getNumberInstance(java.util.Locale)}. The only
 * customization is the maximum number of BigFraction digits, which is set to 0.</text>
    <param>locale the specific locale used by the format.</param>
    <return>the default number format specific to the given locale.</return>
  </javadoc>
  <method type="NumberFormat" name="getDefaultNumberFormat">
    <declaration type="NumberFormat" name="nf" />
  </method>
  <javadoc>
    <text>Access the denominator format.</text>
    <return>the denominator format.</return>
  </javadoc>
  <method type="NumberFormat" name="getDenominatorFormat" />
  <javadoc>
    <text>Access the numerator format.</text>
    <return>the numerator format.</return>
  </javadoc>
  <method type="NumberFormat" name="getNumeratorFormat" />
  <javadoc>
    <text>Modify the denominator format.</text>
    <param>format the new denominator format value.</param>
    <throws>NullArgumentException if {@code format} is {@code null}.</throws>
  </javadoc>
  <method type="void" name="setDenominatorFormat">
    <scope />
  </method>
  <javadoc>
    <text>Modify the numerator format.</text>
    <param>format the new numerator format value.</param>
    <throws>NullArgumentException if {@code format} is {@code null}.</throws>
  </javadoc>
  <method type="void" name="setNumeratorFormat">
    <scope />
  </method>
  <javadoc>
    <text>Parses &lt;code&gt;source&lt;/code&gt; until a non-whitespace character is found.</text>
    <param>source the string to parse</param>
    <param>pos input/output parsing parameter.  On output, &lt;code&gt;pos&lt;/code&gt;
 * holds the index of the next non-whitespace character.</param>
  </javadoc>
  <method type="void" name="parseAndIgnoreWhitespace" />
  <javadoc>
    <text>Parses &lt;code&gt;source&lt;/code&gt; until a non-whitespace character is found.</text>
    <param>source the string to parse</param>
    <param>pos input/output parsing parameter.</param>
    <return>the first non-whitespace character.</return>
  </javadoc>
  <method type="char" name="parseNextCharacter">
    <declaration type="int" name="index" />
    <declaration type="int" name="n" />
    <declaration type="char" name="ret" />
    <scope>
      <declaration type="char" name="c" />
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Formats a double value as a fraction and appends the result to a StringBuffer.</text>
    <param>value the double value to format</param>
    <param>buffer StringBuffer to append to</param>
    <param>position On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
    <return>a reference to the appended buffer</return>
    <see>#format(Object,StringBuffer,FieldPosition)</see>
  </javadoc>
  <method type="StringBuffer" name="format" />
  <javadoc>
    <text>Formats a long value as a fraction and appends the result to a StringBuffer.</text>
    <param>value the long value to format</param>
    <param>buffer StringBuffer to append to</param>
    <param>position On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
    <return>a reference to the appended buffer</return>
    <see>#format(Object,StringBuffer,FieldPosition)</see>
  </javadoc>
  <method type="StringBuffer" name="format" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
