<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractScalarDifferentiableOptimizer">
  <javadoc>
    <text>Base class for implementing optimizers for multivariate scalar
 * differentiable functions.
 * It contains boiler-plate code for dealing with gradient evaluation.</text>
    <version>$Id: AbstractScalarDifferentiableOptimizer.java 1422230 2012-12-15 12:11:13Z erans $</version>
    <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>Objective function gradient.</text>
  </javadoc>
  <declaration type="MultivariateVectorFunction" name="gradient" />
  <javadoc>
    <text>Simple constructor with default settings.
 * The convergence check is set to a{@link org.apache.commons.math3.optimization.SimpleValueCheckerSimpleValueChecker}.</text>
    <deprecated>See {@link org.apache.commons.math3.optimization.SimpleValueChecker#SimpleValueChecker()}</deprecated>
  </javadoc>
  <method type="constructor" name="AbstractScalarDifferentiableOptimizer" />
  <javadoc>
    <param>checker Convergence checker.</param>
  </javadoc>
  <method type="constructor" name="AbstractScalarDifferentiableOptimizer" />
  <javadoc>
    <text>Compute the gradient vector.</text>
    <param>evaluationPoint Point at which the gradient must be evaluated.</param>
    <return>the gradient at the specified point.</return>
    <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the allowed number of evaluations is exceeded.</throws>
  </javadoc>
  <method type="double[]" name="computeObjectiveGradient" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="PointValuePair" name="optimizeInternal">
    <comment>Store optimization problem characteristics.</comment>
  </method>
  <javadoc>
    <text>Optimize an objective function.</text>
    <param>f Objective function.</param>
    <param>goalType Type of optimization goal: either{@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.</param>
    <param>startPoint Start point for optimization.</param>
    <param>maxEval Maximum number of function evaluations.</param>
    <return>the point/value pair giving the optimal value for objective
 * function.</return>
    <throws>org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.</throws>
    <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.</throws>
    <throws>org.apache.commons.math3.exception.NullArgumentException if
 * any argument is {@code null}.</throws>
  </javadoc>
  <method type="PointValuePair" name="optimize" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
