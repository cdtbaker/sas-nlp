<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractStorelessUnivariateStatistic">
  <javadoc>
    <text>Abstract implementation of the {@link StorelessUnivariateStatistic} interface.
 * &lt;p&gt;
 * Provides default &lt;code&gt;evaluate()&lt;/code&gt; and &lt;code&gt;incrementAll(double[])&lt;/code&gt;
 * implementations.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Note that these implementations are not synchronized.&lt;/strong&gt;&lt;/p&gt;</text>
    <version>$Id: AbstractStorelessUnivariateStatistic.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>This default implementation calls {@link #clear}, then invokes{@link #increment} in a loop over the the input array, and then uses{@link #getResult} to compute the return value.
 * &lt;p&gt;
 * Note that this implementation changes the internal state of the
 * statistic.  Its side effects are the same as invoking {@link #clear} and
 * then {@link #incrementAll(double[])}.&lt;/p&gt;
 * &lt;p&gt;
 * Implementations may override this method with a more efficient and
 * possibly more accurate implementation that works directly with the
 * input array.&lt;/p&gt;
 * &lt;p&gt;
 * If the array is null, a MathIllegalArgumentException is thrown.&lt;/p&gt;</text>
    <param>values input array</param>
    <return>the value of the statistic applied to the input array</return>
    <throws>MathIllegalArgumentException if values is null</throws>
    <see>org.apache.commons.math3.stat.descriptive.UnivariateStatistic#evaluate(double[])</see>
  </javadoc>
  <method type="double" name="evaluate">
    <scope />
  </method>
  <javadoc>
    <text>This default implementation calls {@link #clear}, then invokes{@link #increment} in a loop over the specified portion of the input
 * array, and then uses {@link #getResult} to compute the return value.
 * &lt;p&gt;
 * Note that this implementation changes the internal state of the
 * statistic.  Its side effects are the same as invoking {@link #clear} and
 * then {@link #incrementAll(double[],int,int)}.&lt;/p&gt;
 * &lt;p&gt;
 * Implementations may override this method with a more efficient and
 * possibly more accurate implementation that works directly with the
 * input array.&lt;/p&gt;
 * &lt;p&gt;
 * If the array is null or the index parameters are not valid, an
 * MathIllegalArgumentException is thrown.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>begin the index of the first element to include</param>
    <param>length the number of elements to include</param>
    <return>the value of the statistic applied to the included array entries</return>
    <throws>MathIllegalArgumentException if the array is null or the indices are not valid</throws>
    <see>org.apache.commons.math3.stat.descriptive.UnivariateStatistic#evaluate(double[],int,int)</see>
  </javadoc>
  <method type="double" name="evaluate">
    <scope />
  </method>
  <method name="copy" type="StorelessUnivariateStatistic" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method name="clear" type="void" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method name="getResult" type="double" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method name="increment" type="void" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <javadoc>
    <text>This default implementation just calls {@link #increment} in a loop over
 * the input array.
 * &lt;p&gt;
 * Throws IllegalArgumentException if the input values array is null.&lt;/p&gt;</text>
    <param>values values to add</param>
    <throws>MathIllegalArgumentException if values is null</throws>
    <see>org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic#incrementAll(double[])</see>
  </javadoc>
  <method type="void" name="incrementAll">
    <scope />
  </method>
  <javadoc>
    <text>This default implementation just calls {@link #increment} in a loop over
 * the specified portion of the input array.
 * &lt;p&gt;
 * Throws IllegalArgumentException if the input values array is null.&lt;/p&gt;</text>
    <param>values  array holding values to add</param>
    <param>begin   index of the first array element to add</param>
    <param>length  number of array elements to add</param>
    <throws>MathIllegalArgumentException if values is null</throws>
    <see>org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic#incrementAll(double[],int,int)</see>
  </javadoc>
  <method type="void" name="incrementAll">
    <scope>
      <declaration type="int" name="k" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns true iff &lt;code&gt;object&lt;/code&gt; is an
 * &lt;code&gt;AbstractStorelessUnivariateStatistic&lt;/code&gt; returning the same
 * values as this for &lt;code&gt;getResult()&lt;/code&gt; and &lt;code&gt;getN()&lt;/code&gt;</text>
    <param>object object to test equality against.</param>
    <return>true if object returns the same value as this</return>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope />
    <declaration type="AbstractStorelessUnivariateStatistic" name="stat" />
  </method>
  <javadoc>
    <text>Returns hash code based on getResult() and getN()</text>
    <return>hash code</return>
  </javadoc>
  <method type="int" name="hashCode" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
