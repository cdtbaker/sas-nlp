<?xml version="1.0" encoding="UTF-8"?>
<class name="UnivariateOptimizer">
  <javadoc>
    <text>Base class for a univariate scalar function optimizer.</text>
    <version>$Id: UnivariateOptimizer.java 1443444 2013-02-07 12:41:36Z erans $</version>
    <since>3.1</since>
  </javadoc>
  <javadoc>
    <text>Objective function.</text>
  </javadoc>
  <declaration type="UnivariateFunction" name="function" />
  <javadoc>
    <text>Type of optimization.</text>
  </javadoc>
  <declaration type="GoalType" name="goal" />
  <javadoc>
    <text>Initial guess.</text>
  </javadoc>
  <declaration type="double" name="start" />
  <javadoc>
    <text>Lower bound.</text>
  </javadoc>
  <declaration type="double" name="min" />
  <javadoc>
    <text>Upper bound.</text>
  </javadoc>
  <declaration type="double" name="max" />
  <javadoc>
    <param>checker Convergence checker.</param>
  </javadoc>
  <method type="constructor" name="UnivariateOptimizer" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <param>optData Optimization data. In addition to those documented in{@link BaseOptimizer#parseOptimizationData(OptimizationData[])BaseOptimizer}, this method will register the following data:
 * &lt;ul&gt;
 * &lt;li&gt;{@link GoalType}&lt;/li&gt;
 * &lt;li&gt;{@link SearchInterval}&lt;/li&gt;
 * &lt;li&gt;{@link UnivariateObjectiveFunction}&lt;/li&gt;
 * &lt;/ul&gt;</param>
    <return>{@inheritDoc}</return>
    <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
  </javadoc>
  <method type="UnivariatePointValuePair" name="optimize">
    <comment>Perform computation.</comment>
  </method>
  <javadoc>
    <return>the optimization type.</return>
  </javadoc>
  <method type="GoalType" name="getGoalType" />
  <javadoc>
    <text>Scans the list of (required and optional) optimization data that
 * characterize the problem.</text>
    <param>optData Optimization data.
 * The following data will be looked for:
 * &lt;ul&gt;
 * &lt;li&gt;{@link GoalType}&lt;/li&gt;
 * &lt;li&gt;{@link SearchInterval}&lt;/li&gt;
 * &lt;li&gt;{@link UnivariateObjectiveFunction}&lt;/li&gt;
 * &lt;/ul&gt;</param>
  </javadoc>
  <method type="void" name="parseOptimizationData">
    <scope>
      <scope>
        <declaration type="SearchInterval" name="interval" />
      </scope>
      <scope />
      <scope />
    </scope>
    <comment>Allow base class to register its own data.</comment>
    <comment>The existing values (as set by the previous call) are reused if</comment>
    <comment>not provided in the argument list.</comment>
  </method>
  <javadoc>
    <return>the initial guess.</return>
  </javadoc>
  <method type="double" name="getStartValue" />
  <javadoc>
    <return>the lower bounds.</return>
  </javadoc>
  <method type="double" name="getMin" />
  <javadoc>
    <return>the upper bounds.</return>
  </javadoc>
  <method type="double" name="getMax" />
  <javadoc>
    <text>Computes the objective function value.
 * This method &lt;em&gt;must&lt;/em&gt; be called by subclasses to enforce the
 * evaluation counter limit.</text>
    <param>x Point at which the objective function must be evaluated.</param>
    <return>the objective function value at the specified point.</return>
    <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
  </javadoc>
  <method type="double" name="computeObjectiveValue" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
