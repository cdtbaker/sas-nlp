<?xml version="1.0" encoding="UTF-8"?>
<class name="LegendreGaussIntegrator">
  <javadoc>
    <text>Implements the &lt;a href="http://mathworld.wolfram.com/Legendre-GaussQuadrature.html"&gt;
 * Legendre-Gauss&lt;/a&gt; quadrature formula.
 * &lt;p&gt;
 * Legendre-Gauss integrators are efficient integrators that can
 * accurately integrate functions with few function evaluations. A
 * Legendre-Gauss integrator using an n-points quadrature formula can
 * integrate 2n-1 degree polynomials exactly.
 * &lt;/p&gt;
 * &lt;p&gt;
 * These integrators evaluate the function on n carefully chosen
 * abscissas in each step interval (mapped to the canonical [-1,1] interval).
 * The evaluation abscissas are not evenly spaced and none of them are
 * at the interval endpoints. This implies the function integrated can be
 * undefined at integration interval endpoints.
 * &lt;/p&gt;
 * &lt;p&gt;
 * The evaluation abscissas x&lt;sub&gt;i&lt;/sub&gt; are the roots of the degree n
 * Legendre polynomial. The weights a&lt;sub&gt;i&lt;/sub&gt; of the quadrature formula
 * integrals from -1 to +1 &amp;int; Li&lt;sup&gt;2&lt;/sup&gt; where Li (x) =
 * &amp;prod; (x-x&lt;sub&gt;k&lt;/sub&gt;)/(x&lt;sub&gt;i&lt;/sub&gt;-x&lt;sub&gt;k&lt;/sub&gt;) for k != i.
 * &lt;/p&gt;
 * &lt;p&gt;</text>
    <version>$Id: LegendreGaussIntegrator.java 1455194 2013-03-11 15:45:54Z luc $</version>
    <since>1.2</since>
    <deprecated>As of 3.1 (to be removed in 4.0). Please use{@link IterativeLegendreGaussIntegrator} instead.</deprecated>
  </javadoc>
  <javadoc>
    <text>Abscissas for the 2 points method.</text>
  </javadoc>
  <declaration type="double[]" name="ABSCISSAS_2" />
  <javadoc>
    <text>Weights for the 2 points method.</text>
  </javadoc>
  <declaration type="double[]" name="WEIGHTS_2" />
  <javadoc>
    <text>Abscissas for the 3 points method.</text>
  </javadoc>
  <declaration type="double[]" name="ABSCISSAS_3" />
  <javadoc>
    <text>Weights for the 3 points method.</text>
  </javadoc>
  <declaration type="double[]" name="WEIGHTS_3" />
  <javadoc>
    <text>Abscissas for the 4 points method.</text>
  </javadoc>
  <declaration type="double[]" name="ABSCISSAS_4" />
  <javadoc>
    <text>Weights for the 4 points method.</text>
  </javadoc>
  <declaration type="double[]" name="WEIGHTS_4" />
  <javadoc>
    <text>Abscissas for the 5 points method.</text>
  </javadoc>
  <declaration type="double[]" name="ABSCISSAS_5" />
  <javadoc>
    <text>Weights for the 5 points method.</text>
  </javadoc>
  <declaration type="double[]" name="WEIGHTS_5" />
  <javadoc>
    <text>Abscissas for the current method.</text>
  </javadoc>
  <declaration type="double[]" name="abscissas" />
  <javadoc>
    <text>Weights for the current method.</text>
  </javadoc>
  <declaration type="double[]" name="weights" />
  <javadoc>
    <text>Build a Legendre-Gauss integrator with given accuracies and iterations counts.</text>
    <param>n number of points desired (must be between 2 and 5 inclusive)</param>
    <param>relativeAccuracy relative accuracy of the result</param>
    <param>absoluteAccuracy absolute accuracy of the result</param>
    <param>minimalIterationCount minimum number of iterations</param>
    <param>maximalIterationCount maximum number of iterations</param>
    <exception>MathIllegalArgumentException if number of points is out of [2; 5]</exception>
    <exception>NotStrictlyPositiveException if minimal number of iterations
 * is not strictly positive</exception>
    <exception>NumberIsTooSmallException if maximal number of iterations
 * is lesser than or equal to the minimal number of iterations</exception>
  </javadoc>
  <method type="constructor" name="LegendreGaussIntegrator" />
  <javadoc>
    <text>Build a Legendre-Gauss integrator with given accuracies.</text>
    <param>n number of points desired (must be between 2 and 5 inclusive)</param>
    <param>relativeAccuracy relative accuracy of the result</param>
    <param>absoluteAccuracy absolute accuracy of the result</param>
    <exception>MathIllegalArgumentException if number of points is out of [2; 5]</exception>
  </javadoc>
  <method type="constructor" name="LegendreGaussIntegrator" />
  <javadoc>
    <text>Build a Legendre-Gauss integrator with given iteration counts.</text>
    <param>n number of points desired (must be between 2 and 5 inclusive)</param>
    <param>minimalIterationCount minimum number of iterations</param>
    <param>maximalIterationCount maximum number of iterations</param>
    <exception>MathIllegalArgumentException if number of points is out of [2; 5]</exception>
    <exception>NotStrictlyPositiveException if minimal number of iterations
 * is not strictly positive</exception>
    <exception>NumberIsTooSmallException if maximal number of iterations
 * is lesser than or equal to the minimal number of iterations</exception>
  </javadoc>
  <method type="constructor" name="LegendreGaussIntegrator" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="doIntegrate">
    <declaration type="double" name="oldt" />
    <declaration type="int" name="n" />
    <scope>
      <declaration type="double" name="t" />
      <declaration type="double" name="delta" />
      <declaration type="double" name="limit" />
      <scope />
      <declaration type="double" name="ratio" />
    </scope>
    <comment>compute first estimate with a single step</comment>
    <comment>improve integral with a larger number of steps</comment>
    <comment>estimate error</comment>
    <comment>check convergence</comment>
    <comment>prepare next iteration</comment>
  </method>
  <javadoc>
    <text>Compute the n-th stage integral.</text>
    <param>n number of steps</param>
    <return>the value of n-th stage integral</return>
    <throws>TooManyEvaluationsException if the maximum number of evaluations
 * is exceeded.</throws>
  </javadoc>
  <method type="double" name="stage">
    <declaration type="double" name="step" />
    <declaration type="double" name="halfStep" />
    <declaration type="double" name="midPoint" />
    <declaration type="double" name="sum" />
    <scope>
      <scope />
    </scope>
    <comment>set up the step for the current stage</comment>
    <comment>integrate over all elementary steps</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
