<?xml version="1.0" encoding="UTF-8"?>
<class name="Quaternion">
  <javadoc>
    <text>This class implements &lt;a href="http://mathworld.wolfram.com/Quaternion.html"&gt;
 * quaternions&lt;/a&gt; (Hamilton's hypercomplex numbers).
 * &lt;br/&gt;
 * Instance of this class are guaranteed to be immutable.</text>
    <since>3.1</since>
    <version>$Id: Quaternion.java 1421249 2012-12-13 12:32:03Z erans $</version>
  </javadoc>
  <javadoc>
    <text>Identity quaternion.</text>
  </javadoc>
  <declaration type="Quaternion" name="IDENTITY" />
  <javadoc>
    <text>Zero quaternion.</text>
  </javadoc>
  <declaration type="Quaternion" name="ZERO" />
  <javadoc>
    <text>i</text>
  </javadoc>
  <declaration type="Quaternion" name="I" />
  <javadoc>
    <text>j</text>
  </javadoc>
  <declaration type="Quaternion" name="J" />
  <javadoc>
    <text>k</text>
  </javadoc>
  <declaration type="Quaternion" name="K" />
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>First component (scalar part).</text>
  </javadoc>
  <declaration type="double" name="q0" />
  <javadoc>
    <text>Second component (first vector part).</text>
  </javadoc>
  <declaration type="double" name="q1" />
  <javadoc>
    <text>Third component (second vector part).</text>
  </javadoc>
  <declaration type="double" name="q2" />
  <javadoc>
    <text>Fourth component (third vector part).</text>
  </javadoc>
  <declaration type="double" name="q3" />
  <javadoc>
    <text>Builds a quaternion from its components.</text>
    <param>a Scalar component.</param>
    <param>b First vector component.</param>
    <param>c Second vector component.</param>
    <param>d Third vector component.</param>
  </javadoc>
  <method type="constructor" name="Quaternion" />
  <javadoc>
    <text>Builds a quaternion from scalar and vector parts.</text>
    <param>scalar Scalar part of the quaternion.</param>
    <param>v Components of the vector part of the quaternion.</param>
    <throws>DimensionMismatchException if the array length is not 3.</throws>
  </javadoc>
  <method type="constructor" name="Quaternion">
    <scope />
  </method>
  <javadoc>
    <text>Builds a pure quaternion from a vector (assuming that the scalar
 * part is zero).</text>
    <param>v Components of the vector part of the pure quaternion.</param>
  </javadoc>
  <method type="constructor" name="Quaternion" />
  <javadoc>
    <text>Returns the conjugate quaternion of the instance.</text>
    <return>the conjugate quaternion</return>
  </javadoc>
  <method type="Quaternion" name="getConjugate" />
  <javadoc>
    <text>Returns the Hamilton product of two quaternions.</text>
    <param>q1 First quaternion.</param>
    <param>q2 Second quaternion.</param>
    <return>the product {@code q1} and {@code q2}, in that order.</return>
  </javadoc>
  <method type="Quaternion" name="multiply">
    <declaration type="double" name="q1a" />
    <declaration type="double" name="q1b" />
    <declaration type="double" name="q1c" />
    <declaration type="double" name="q1d" />
    <declaration type="double" name="q2a" />
    <declaration type="double" name="q2b" />
    <declaration type="double" name="q2c" />
    <declaration type="double" name="q2d" />
    <declaration type="double" name="w" />
    <declaration type="double" name="x" />
    <declaration type="double" name="y" />
    <declaration type="double" name="z" />
    <comment>Components of the first quaternion.</comment>
    <comment>Components of the second quaternion.</comment>
    <comment>Components of the product.</comment>
  </method>
  <javadoc>
    <text>Returns the Hamilton product of the instance by a quaternion.</text>
    <param>q Quaternion.</param>
    <return>the product of this instance with {@code q}, in that order.</return>
  </javadoc>
  <method type="Quaternion" name="multiply" />
  <javadoc>
    <text>Computes the sum of two quaternions.</text>
    <param>q1 Quaternion.</param>
    <param>q2 Quaternion.</param>
    <return>the sum of {@code q1} and {@code q2}.</return>
  </javadoc>
  <method type="Quaternion" name="add" />
  <javadoc>
    <text>Computes the sum of the instance and another quaternion.</text>
    <param>q Quaternion.</param>
    <return>the sum of this instance and {@code q}</return>
  </javadoc>
  <method type="Quaternion" name="add" />
  <javadoc>
    <text>Subtracts two quaternions.</text>
    <param>q1 First Quaternion.</param>
    <param>q2 Second quaternion.</param>
    <return>the difference between {@code q1} and {@code q2}.</return>
  </javadoc>
  <method type="Quaternion" name="subtract" />
  <javadoc>
    <text>Subtracts a quaternion from the instance.</text>
    <param>q Quaternion.</param>
    <return>the difference between this instance and {@code q}.</return>
  </javadoc>
  <method type="Quaternion" name="subtract" />
  <javadoc>
    <text>Computes the dot-product of two quaternions.</text>
    <param>q1 Quaternion.</param>
    <param>q2 Quaternion.</param>
    <return>the dot product of {@code q1} and {@code q2}.</return>
  </javadoc>
  <method type="double" name="dotProduct" />
  <javadoc>
    <text>Computes the dot-product of the instance by a quaternion.</text>
    <param>q Quaternion.</param>
    <return>the dot product of this instance and {@code q}.</return>
  </javadoc>
  <method type="double" name="dotProduct" />
  <javadoc>
    <text>Computes the norm of the quaternion.</text>
    <return>the norm.</return>
  </javadoc>
  <method type="double" name="getNorm" />
  <javadoc>
    <text>Computes the normalized quaternion (the versor of the instance).
 * The norm of the quaternion must not be zero.</text>
    <return>a normalized quaternion.</return>
    <throws>ZeroException if the norm of the quaternion is zero.</throws>
  </javadoc>
  <method type="Quaternion" name="normalize">
    <declaration type="double" name="norm" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope>
      <declaration type="Quaternion" name="q" />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="hashCode">
    <declaration type="int" name="result" />
    <scope>
      <declaration type="int" name="c" />
    </scope>
    <comment>"Effective Java" (second edition, p. 47).</comment>
  </method>
  <javadoc>
    <text>Checks whether this instance is equal to another quaternion
 * within a given tolerance.</text>
    <param>q Quaternion with which to compare the current quaternion.</param>
    <param>eps Tolerance.</param>
    <return>{@code true} if the each of the components are equal
 * within the allowed absolute error.</return>
  </javadoc>
  <method type="boolean" name="equals" />
  <javadoc>
    <text>Checks whether the instance is a unit quaternion within a given
 * tolerance.</text>
    <param>eps Tolerance (absolute error).</param>
    <return>{@code true} if the norm is 1 within the given tolerance,{@code false} otherwise</return>
  </javadoc>
  <method type="boolean" name="isUnitQuaternion" />
  <javadoc>
    <text>Checks whether the instance is a pure quaternion within a given
 * tolerance.</text>
    <param>eps Tolerance (absolute error).</param>
    <return>{@code true} if the scalar part of the quaternion is zero.</return>
  </javadoc>
  <method type="boolean" name="isPureQuaternion" />
  <javadoc>
    <text>Returns the polar form of the quaternion.</text>
    <return>the unit quaternion with positive scalar part.</return>
  </javadoc>
  <method type="Quaternion" name="getPositivePolarForm">
    <scope>
      <declaration type="Quaternion" name="unitQ" />
    </scope>
    <scope />
    <comment>The quaternion of rotation (normalized quaternion) q and -q</comment>
    <comment>are equivalent (i.e. represent the same rotation).</comment>
  </method>
  <javadoc>
    <text>Returns the inverse of this instance.
 * The norm of the quaternion must not be zero.</text>
    <return>the inverse.</return>
    <throws>ZeroException if the norm (squared) of the quaternion is zero.</throws>
  </javadoc>
  <method type="Quaternion" name="getInverse">
    <declaration type="double" name="squareNorm" />
    <scope />
  </method>
  <javadoc>
    <text>Gets the first component of the quaternion (scalar part).</text>
    <return>the scalar part.</return>
  </javadoc>
  <method type="double" name="getQ0" />
  <javadoc>
    <text>Gets the second component of the quaternion (first component
 * of the vector part).</text>
    <return>the first component of the vector part.</return>
  </javadoc>
  <method type="double" name="getQ1" />
  <javadoc>
    <text>Gets the third component of the quaternion (second component
 * of the vector part).</text>
    <return>the second component of the vector part.</return>
  </javadoc>
  <method type="double" name="getQ2" />
  <javadoc>
    <text>Gets the fourth component of the quaternion (third component
 * of the vector part).</text>
    <return>the third component of the vector part.</return>
  </javadoc>
  <method type="double" name="getQ3" />
  <javadoc>
    <text>Gets the scalar part of the quaternion.</text>
    <return>the scalar part.</return>
    <see>#getQ0()</see>
  </javadoc>
  <method type="double" name="getScalarPart" />
  <javadoc>
    <text>Gets the three components of the vector part of the quaternion.</text>
    <return>the vector part.</return>
    <see>#getQ1()</see>
    <see>#getQ2()</see>
    <see>#getQ3()</see>
  </javadoc>
  <method type="double[]" name="getVectorPart" />
  <javadoc>
    <text>Multiplies the instance by a scalar.</text>
    <param>alpha Scalar factor.</param>
    <return>a scaled quaternion.</return>
  </javadoc>
  <method type="Quaternion" name="multiply" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="String" name="sp" />
    <declaration type="StringBuilder" name="s" />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
