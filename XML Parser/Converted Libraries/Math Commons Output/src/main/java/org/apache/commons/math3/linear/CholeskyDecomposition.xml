<?xml version="1.0" encoding="UTF-8"?>
<class name="CholeskyDecomposition">
  <javadoc>
    <text>Calculates the Cholesky decomposition of a matrix.
 * &lt;p&gt;The Cholesky decomposition of a real symmetric positive-definite
 * matrix A consists of a lower triangular matrix L with same size such
 * that: A = LL&lt;sup&gt;T&lt;/sup&gt;. In a sense, this is the square root of A.&lt;/p&gt;
 * &lt;p&gt;This class is based on the class with similar name from the
 * &lt;a href="http://math.nist.gov/javanumerics/jama/"&gt;JAMA&lt;/a&gt; library, with the
 * following changes:&lt;/p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;a {@link #getLT() getLT} method has been added,&lt;/li&gt;
 * &lt;li&gt;the {@code isspd} method has been removed, since the constructor of
 * this class throws a {@link NonPositiveDefiniteMatrixException} when a
 * matrix cannot be decomposed,&lt;/li&gt;
 * &lt;li&gt;a {@link #getDeterminant() getDeterminant} method has been added,&lt;/li&gt;
 * &lt;li&gt;the {@code solve} method has been replaced by a {@link #getSolver()getSolver} method and the equivalent method provided by the returned{@link DecompositionSolver}.&lt;/li&gt;
 * &lt;/ul&gt;</text>
    <see>&lt;a href="http://mathworld.wolfram.com/CholeskyDecomposition.html"&gt;MathWorld&lt;/a&gt;</see>
    <see>&lt;a href="http://en.wikipedia.org/wiki/Cholesky_decomposition"&gt;Wikipedia&lt;/a&gt;</see>
    <version>$Id: CholeskyDecomposition.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>2.0 (changed to concrete class in 3.0)</since>
  </javadoc>
  <javadoc>
    <text>Default threshold above which off-diagonal elements are considered too different
 * and matrix not symmetric.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_RELATIVE_SYMMETRY_THRESHOLD" />
  <javadoc>
    <text>Default threshold below which diagonal elements are considered null
 * and matrix not positive definite.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD" />
  <javadoc>
    <text>Row-oriented storage for L&lt;sup&gt;T&lt;/sup&gt; matrix data.</text>
  </javadoc>
  <declaration type="double[][]" name="lTData" />
  <javadoc>
    <text>Cached value of L.</text>
  </javadoc>
  <declaration type="RealMatrix" name="cachedL" />
  <javadoc>
    <text>Cached value of LT.</text>
  </javadoc>
  <declaration type="RealMatrix" name="cachedLT" />
  <javadoc>
    <text>Calculates the Cholesky decomposition of the given matrix.
 * &lt;p&gt;
 * Calling this constructor is equivalent to call {@link #CholeskyDecomposition(RealMatrix,double,double)} with the
 * thresholds set to the default values {@link #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD} and {@link #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD}&lt;/p&gt;</text>
    <param>matrix the matrix to decompose</param>
    <throws>NonSquareMatrixException if the matrix is not square.</throws>
    <throws>NonSymmetricMatrixException if the matrix is not symmetric.</throws>
    <throws>NonPositiveDefiniteMatrixException if the matrix is not
 * strictly positive definite.</throws>
    <see>#CholeskyDecomposition(RealMatrix,double,double)</see>
    <see>#DEFAULT_RELATIVE_SYMMETRY_THRESHOLD</see>
    <see>#DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD</see>
  </javadoc>
  <method type="constructor" name="CholeskyDecomposition" />
  <javadoc>
    <text>Calculates the Cholesky decomposition of the given matrix.</text>
    <param>matrix the matrix to decompose</param>
    <param>relativeSymmetryThreshold threshold above which off-diagonal
 * elements are considered too different and matrix not symmetric</param>
    <param>absolutePositivityThreshold threshold below which diagonal
 * elements are considered null and matrix not positive definite</param>
    <throws>NonSquareMatrixException if the matrix is not square.</throws>
    <throws>NonSymmetricMatrixException if the matrix is not symmetric.</throws>
    <throws>NonPositiveDefiniteMatrixException if the matrix is not
 * strictly positive definite.</throws>
    <see>#CholeskyDecomposition(RealMatrix)</see>
    <see>#DEFAULT_RELATIVE_SYMMETRY_THRESHOLD</see>
    <see>#DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD</see>
  </javadoc>
  <method type="constructor" name="CholeskyDecomposition">
    <scope />
    <declaration type="int" name="order" />
    <scope>
      <declaration type="double[]" name="lI" />
      <scope>
        <declaration type="double[]" name="lJ" />
        <declaration type="double" name="lIJ" />
        <declaration type="double" name="lJI" />
        <declaration type="double" name="maxDelta" />
        <scope />
      </scope>
    </scope>
    <scope>
      <declaration type="double[]" name="ltI" />
      <scope />
      <declaration type="double" name="inverse" />
      <scope>
        <declaration type="double[]" name="ltQ" />
        <scope />
      </scope>
    </scope>
    <comment>check the matrix before transformation</comment>
    <comment>check off-diagonal elements (and reset them to 0)</comment>
    <comment>transform the matrix</comment>
    <comment>check diagonal element</comment>
  </method>
  <javadoc>
    <text>Returns the matrix L of the decomposition.
 * &lt;p&gt;L is an lower-triangular matrix&lt;/p&gt;</text>
    <return>the L matrix</return>
  </javadoc>
  <method type="RealMatrix" name="getL">
    <scope />
  </method>
  <javadoc>
    <text>Returns the transpose of the matrix L of the decomposition.
 * &lt;p&gt;L&lt;sup&gt;T&lt;/sup&gt; is an upper-triangular matrix&lt;/p&gt;</text>
    <return>the transpose of the matrix L of the decomposition</return>
  </javadoc>
  <method type="RealMatrix" name="getLT">
    <scope />
    <comment>return the cached matrix</comment>
  </method>
  <javadoc>
    <text>Return the determinant of the matrix</text>
    <return>determinant of the matrix</return>
  </javadoc>
  <method type="double" name="getDeterminant">
    <declaration type="double" name="determinant" />
    <scope>
      <declaration type="double" name="lTii" />
    </scope>
  </method>
  <javadoc>
    <text>Get a solver for finding the A &amp;times; X = B solution in least square sense.</text>
    <return>a solver</return>
  </javadoc>
  <method type="DecompositionSolver" name="getSolver" />
  <javadoc>
    <text>Specialized solver.</text>
  </javadoc>
  <javadoc>
    <text>Row-oriented storage for L&lt;sup&gt;T&lt;/sup&gt; matrix data.</text>
  </javadoc>
  <declaration type="double[][]" name="lTData" />
  <javadoc>
    <text>Build a solver from decomposed matrix.</text>
    <param>lTData row-oriented storage for L&lt;sup&gt;T&lt;/sup&gt; matrix data</param>
  </javadoc>
  <method type="constructor" name="Solver" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isNonSingular">
    <comment>if we get this far, the matrix was positive definite, hence non-singular</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="solve">
    <declaration type="int" name="m" />
    <scope />
    <declaration type="double[]" name="x" />
    <scope>
      <declaration type="double[]" name="lJ" />
      <declaration type="double" name="xJ" />
      <scope />
    </scope>
    <scope>
      <declaration type="double" name="xJ" />
      <scope />
    </scope>
    <comment>Solve LY = b</comment>
    <comment>Solve LTX = Y</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="solve">
    <declaration type="int" name="m" />
    <scope />
    <declaration type="int" name="nColB" />
    <declaration type="double[][]" name="x" />
    <scope>
      <declaration type="double[]" name="lJ" />
      <declaration type="double" name="lJJ" />
      <declaration type="double[]" name="xJ" />
      <scope />
      <scope>
        <declaration type="double[]" name="xI" />
        <declaration type="double" name="lJI" />
        <scope />
      </scope>
    </scope>
    <scope>
      <declaration type="double" name="lJJ" />
      <declaration type="double[]" name="xJ" />
      <scope />
      <scope>
        <declaration type="double[]" name="xI" />
        <declaration type="double" name="lIJ" />
        <scope />
      </scope>
    </scope>
    <comment>Solve LY = b</comment>
    <comment>Solve LTX = Y</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="getInverse" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
