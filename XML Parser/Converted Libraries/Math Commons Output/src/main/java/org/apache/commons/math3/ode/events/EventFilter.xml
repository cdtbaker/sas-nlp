<?xml version="1.0" encoding="UTF-8"?>
<class name="EventFilter">
  <javadoc>
    <text>Wrapper used to detect only increasing or decreasing events.
 * &lt;p&gt;General {@link EventHandler events} are defined implicitely
 * by a {@link EventHandler#g(double,double[]) g function} crossing
 * zero. This function needs to be continuous in the event neighborhood,
 * and its sign must remain consistent between events. This implies that
 * during an ODE integration, events triggered are alternately events
 * for which the function increases from negative to positive values,
 * and events for which the function decreases from positive to
 * negative values.
 * &lt;/p&gt;
 * &lt;p&gt;Sometimes, users are only interested in one type of event (say
 * increasing events for example) and not in the other type. In these
 * cases, looking precisely for all events location and triggering
 * events that will later be ignored is a waste of computing time.&lt;/p&gt;
 * &lt;p&gt;Users can wrap a regular {@link EventHandler event handler} in
 * an instance of this class and provide this wrapping instance to
 * the {@link org.apache.commons.math3.ode.FirstOrderIntegrator ODE solver}in order to avoid wasting time looking for uninteresting events.
 * The wrapper will intercept the calls to the {@link EventHandler#g(double,double[]) g function} and to the {@link EventHandler#eventOccurred(double,double[],boolean)eventOccurred} method in order to ignore uninteresting events. The
 * wrapped regular {@link EventHandler event handler} will the see only
 * the interesting events, i.e. either only {@code increasing} events or{@code decreasing} events. the number of calls to the {@link EventHandler#g(double,double[]) g function} will also be reduced.&lt;/p&gt;</text>
    <version>$Id: EventFilter.java 1458491 2013-03-19 20:13:11Z luc $</version>
    <since>3.2</since>
  </javadoc>
  <javadoc>
    <text>Number of past transformers updates stored.</text>
  </javadoc>
  <declaration type="int" name="HISTORY_SIZE" />
  <javadoc>
    <text>Wrapped event handler.</text>
  </javadoc>
  <declaration type="EventHandler" name="rawHandler" />
  <javadoc>
    <text>Filter to use.</text>
  </javadoc>
  <declaration type="FilterType" name="filter" />
  <javadoc>
    <text>Transformers of the g function.</text>
  </javadoc>
  <declaration type="Transformer[]" name="transformers" />
  <javadoc>
    <text>Update time of the transformers.</text>
  </javadoc>
  <declaration type="double[]" name="updates" />
  <javadoc>
    <text>Indicator for forward integration.</text>
  </javadoc>
  <declaration type="boolean" name="forward" />
  <javadoc>
    <text>Extreme time encountered so far.</text>
  </javadoc>
  <declaration type="double" name="extremeT" />
  <javadoc>
    <text>Wrap an {@link EventHandler event handler}.</text>
    <param>rawHandler event handler to wrap</param>
    <param>filter filter to use</param>
  </javadoc>
  <method type="constructor" name="EventFilter" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="init">
    <comment>delegate to raw handler</comment>
    <comment>initialize events triggering logic</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="g">
    <declaration type="double" name="rawG" />
    <scope>
      <declaration type="int" name="last" />
      <scope>
        <declaration type="Transformer" name="previous" />
        <declaration type="Transformer" name="next" />
        <scope />
      </scope>
      <scope>
        <scope>
          <scope />
        </scope>
      </scope>
    </scope>
    <scope>
      <scope>
        <declaration type="Transformer" name="previous" />
        <declaration type="Transformer" name="next" />
        <scope />
      </scope>
      <scope>
        <scope>
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>search which transformer should be applied to g</comment>
    <comment>we are at the forward end of the history</comment>
    <comment>check if a new rough root has been crossed</comment>
    <comment>there is a root somewhere between extremeT end t</comment>
    <comment>the new transformer, which is valid on both sides of the root,</comment>
    <comment>so it is valid for t (this is how we have just computed it above),</comment>
    <comment>but it was already valid before, so we store the switch at extremeT</comment>
    <comment>for safety, to ensure the previous transformer is not applied too</comment>
    <comment>close of the root</comment>
    <comment>apply the transform</comment>
    <comment>we are in the middle of the history</comment>
    <comment>select the transformer</comment>
    <comment>apply the transform</comment>
    <comment>we are at the backward end of the history</comment>
    <comment>check if a new rough root has been crossed</comment>
    <comment>there is a root somewhere between extremeT end t</comment>
    <comment>the new transformer, which is valid on both sides of the root,</comment>
    <comment>so it is valid for t (this is how we have just computed it above),</comment>
    <comment>but it was already valid before, so we store the switch at extremeT</comment>
    <comment>for safety, to ensure the previous transformer is not applied too</comment>
    <comment>close of the root</comment>
    <comment>apply the transform</comment>
    <comment>we are in the middle of the history</comment>
    <comment>select the transformer</comment>
    <comment>apply the transform</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Action" name="eventOccurred">
    <comment>delegate to raw handler, fixing increasing status on the fly</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="resetState">
    <comment>delegate to raw handler</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
