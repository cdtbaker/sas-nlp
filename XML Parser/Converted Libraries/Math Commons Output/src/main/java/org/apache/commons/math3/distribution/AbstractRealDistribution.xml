<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractRealDistribution">
  <javadoc>
    <text>Base class for probability distributions on the reals.
 * Default implementations are provided for some of the methods
 * that do not vary from distribution to distribution.</text>
    <version>$Id: AbstractRealDistribution.java 1422195 2012-12-15 06:45:18Z psteitz $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Default accuracy.</text>
  </javadoc>
  <declaration type="double" name="SOLVER_DEFAULT_ABSOLUTE_ACCURACY" />
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>RandomData instance used to generate samples from the distribution.</text>
    <deprecated>As of 3.1, to be removed in 4.0. Please use the{@link #random} instance variable instead.</deprecated>
  </javadoc>
  <declaration type="RandomDataImpl" name="randomData" />
  <javadoc>
    <text>RNG instance used to generate samples from the distribution.</text>
    <since>3.1</since>
  </javadoc>
  <declaration type="RandomGenerator" name="random" />
  <javadoc>
    <text>Solver absolute accuracy for inverse cumulative computation</text>
  </javadoc>
  <declaration type="double" name="solverAbsoluteAccuracy" />
  <javadoc>
    <deprecated>As of 3.1, to be removed in 4.0. Please use{@link #AbstractRealDistribution(RandomGenerator)} instead.</deprecated>
  </javadoc>
  <method type="constructor" name="AbstractRealDistribution">
    <comment>Legacy users are only allowed to access the deprecated "randomData".</comment>
    <comment>New users are forbidden to use this constructor.</comment>
  </method>
  <javadoc>
    <param>rng Random number generator.</param>
    <since>3.1</since>
  </javadoc>
  <method type="constructor" name="AbstractRealDistribution" />
  <javadoc>
    <text>{@inheritDoc}The default implementation uses the identity
 * &lt;p&gt;{@code P(x0 &lt; X &lt;= x1) = P(X &lt;= x1) - P(X &lt;= x0)}&lt;/p&gt;</text>
    <deprecated>As of 3.1 (to be removed in 4.0). Please use{@link #probability(double,double)} instead.</deprecated>
  </javadoc>
  <method type="double" name="cumulativeProbability" />
  <javadoc>
    <text>For a random variable {@code X} whose values are distributed according
 * to this distribution, this method returns {@code P(x0 &lt; X &lt;= x1)}.</text>
    <param>x0 Lower bound (excluded).</param>
    <param>x1 Upper bound (included).</param>
    <return>the probability that a random variable with this distribution
 * takes a value between {@code x0} and {@code x1}, excluding the lower
 * and including the upper endpoint.</return>
    <throws>NumberIsTooLargeException if {@code x0 &gt; x1}.
 * The default implementation uses the identity{@code P(x0 &lt; X &lt;= x1) = P(X &lt;= x1) - P(X &lt;= x0)}</throws>
    <since>3.1</since>
  </javadoc>
  <method type="double" name="probability">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}The default implementation returns
 * &lt;ul&gt;
 * &lt;li&gt;{@link #getSupportLowerBound()} for {@code p = 0},&lt;/li&gt;
 * &lt;li&gt;{@link #getSupportUpperBound()} for {@code p = 1}.&lt;/li&gt;
 * &lt;/ul&gt;</text>
  </javadoc>
  <method type="double" name="inverseCumulativeProbability">
    <scope />
    <declaration type="double" name="lowerBound" />
    <scope />
    <declaration type="double" name="upperBound" />
    <scope />
    <declaration type="double" name="mu" />
    <declaration type="double" name="sig" />
    <declaration type="boolean" name="chebyshevApplies" />
    <scope>
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
    <scope>
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
    <declaration type="UnivariateFunction" name="toSolve" />
    <method type="double" name="value" />
    <declaration type="double" name="x" />
    <scope>
      <declaration type="double" name="dx" />
      <scope>
        <declaration type="double" name="px" />
        <scope>
          <scope>
            <declaration type="double" name="midPoint" />
            <scope />
            <scope />
          </scope>
        </scope>
      </scope>
    </scope>
    <comment>IMPLEMENTATION NOTES
 --------------------
 Where applicable, use is made of the one-sided Chebyshev inequality
 to bracket the root. This inequality states that
 P(X - mu &gt;= k  sig) &lt;= 1  (1 + k^2),
 mu: mean, sig: standard deviation. Equivalently
 1 - P(X &lt; mu + k  sig) &lt;= 1  (1 + k^2),
 F(mu + k  sig) &gt;= k^2  (1 + k^2).

 For k = sqrt(p  (1 - p)), we find
 F(mu + k  sig) &gt;= p,
 and (mu + k  sig) is an upper-bound for the root.

 Then, introducing Y = -X, mean(Y) = -mu, sd(Y) = sig, and
 P(Y &gt;= -mu + k  sig) &lt;= 1  (1 + k^2),
 P(-X &gt;= -mu + k  sig) &lt;= 1  (1 + k^2),
 P(X &lt;= mu - k  sig) &lt;= 1  (1 + k^2),
 F(mu - k  sig) &lt;= 1  (1 + k^2).

 For k = sqrt((1 - p)  p), we find
 F(mu - k  sig) &lt;= p,
 and (mu - k  sig) is a lower-bound for the root.

 In cases where the Chebyshev inequality does not apply, geometric
 progressions 1, 2, 4, ... and -1, -2, -4, ... are used to bracket
 the root.</comment>
    <comment>Test for plateau.</comment>
  </method>
  <javadoc>
    <text>Returns the solver absolute accuracy for inverse cumulative computation.
 * You can override this method in order to use a Brent solver with an
 * absolute accuracy different from the default.</text>
    <return>the maximum absolute error in inverse cumulative probability estimates</return>
  </javadoc>
  <method type="double" name="getSolverAbsoluteAccuracy" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="reseedRandomGenerator" />
  <javadoc>
    <text>{@inheritDoc}The default implementation uses the
 * &lt;a href="http://en.wikipedia.org/wiki/Inverse_transform_sampling"&gt;
 * inversion method.
 * &lt;/a&gt;</text>
  </javadoc>
  <method type="double" name="sample" />
  <javadoc>
    <text>{@inheritDoc}The default implementation generates the sample by calling{@link #sample()} in a loop.</text>
  </javadoc>
  <method type="double[]" name="sample">
    <scope />
    <declaration type="double[]" name="out" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <return>zero.</return>
    <since>3.1</since>
  </javadoc>
  <method type="double" name="probability" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
