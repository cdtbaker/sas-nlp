<?xml version="1.0" encoding="UTF-8"?>
<class name="MicrosphereInterpolatingFunction">
  <javadoc>
    <text>Interpolating function that implements the
 * &lt;a href="http://www.dudziak.com/microsphere.php"&gt;Microsphere Projection&lt;/a&gt;.</text>
    <version>$Id: MicrosphereInterpolatingFunction.java 1455194 2013-03-11 15:45:54Z luc $</version>
  </javadoc>
  <javadoc>
    <text>Space dimension.</text>
  </javadoc>
  <declaration type="int" name="dimension" />
  <javadoc>
    <text>Internal accounting data for the interpolation algorithm.
 * Each element of the list corresponds to one surface element of
 * the microsphere.</text>
  </javadoc>
  <declaration type="List&lt;MicrosphereSurfaceElement&gt;" name="microsphere" />
  <javadoc>
    <text>Exponent used in the power law that computes the weights of the
 * sample data.</text>
  </javadoc>
  <declaration type="double" name="brightnessExponent" />
  <javadoc>
    <text>Sample data.</text>
  </javadoc>
  <declaration type="Map&lt;RealVector,Double&gt;" name="samples" />
  <javadoc>
    <text>Class for storing the accounting data needed to perform the
 * microsphere projection.</text>
  </javadoc>
  <javadoc>
    <text>Normal vector characterizing a surface element.</text>
  </javadoc>
  <declaration type="RealVector" name="normal" />
  <javadoc>
    <text>Illumination received from the brightest sample.</text>
  </javadoc>
  <declaration type="double" name="brightestIllumination" />
  <javadoc>
    <text>Brightest sample.</text>
  </javadoc>
  <declaration type="Map.Entry&lt;RealVector,Double&gt;" name="brightestSample" />
  <javadoc>
    <param>n Normal vector characterizing a surface element
 * of the microsphere.</param>
  </javadoc>
  <method type="constructor" name="MicrosphereSurfaceElement" />
  <javadoc>
    <text>Return the normal vector.</text>
    <return>the normal vector</return>
  </javadoc>
  <method type="RealVector" name="normal" />
  <javadoc>
    <text>Reset "illumination" and "sampleIndex".</text>
  </javadoc>
  <method type="void" name="reset" />
  <javadoc>
    <text>Store the illumination and index of the brightest sample.</text>
    <param>illuminationFromSample illumination received from sample</param>
    <param>sample current sample illuminating the element</param>
  </javadoc>
  <method type="void" name="store">
    <scope />
  </method>
  <javadoc>
    <text>Get the illumination of the element.</text>
    <return>the illumination.</return>
  </javadoc>
  <method type="double" name="illumination" />
  <javadoc>
    <text>Get the sample illuminating the element the most.</text>
    <return>the sample.</return>
  </javadoc>
  <method type="Map.Entry&lt;RealVector,Double&gt;" name="sample" />
  <javadoc>
    <param>xval Arguments for the interpolation points.{@code xval[i][0]} is the first component of interpolation point{@code i}, {@code xval[i][1]} is the second component, and so on
 * until {@code xval[i][d-1]}, the last component of that interpolation
 * point (where {@code dimension} is thus the dimension of the sampled
 * space).</param>
    <param>yval Values for the interpolation points.</param>
    <param>brightnessExponent Brightness dimming factor.</param>
    <param>microsphereElements Number of surface elements of the
 * microsphere.</param>
    <param>rand Unit vector generator for creating the microsphere.</param>
    <throws>DimensionMismatchException if the lengths of {@code yval} and{@code xval} (equal to {@code n}, the number of interpolation points)
 * do not match, or the the arrays {@code xval[0]} ... {@code xval[n]},
 * have lengths different from {@code dimension}.</throws>
    <throws>NoDataException if there an array has zero-length.</throws>
    <throws>NullArgumentException if an argument is {@code null}.</throws>
  </javadoc>
  <method type="constructor" name="MicrosphereInterpolatingFunction">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope>
      <declaration type="double[]" name="xvalI" />
      <scope />
      <scope />
    </scope>
    <scope />
    <comment>Copy data samples.</comment>
    <comment>Generate the microsphere, assuming that a fairly large number of</comment>
    <comment>randomly generated normals will represent a sphere.</comment>
  </method>
  <javadoc>
    <param>point Interpolation point.</param>
    <return>the interpolated value.</return>
    <throws>DimensionMismatchException if point dimension does not math sample</throws>
  </javadoc>
  <method type="double" name="value">
    <declaration type="RealVector" name="p" />
    <scope />
    <scope>
      <declaration type="RealVector" name="diff" />
      <declaration type="double" name="diffNorm" />
      <scope />
      <scope>
        <declaration type="double" name="w" />
      </scope>
    </scope>
    <declaration type="double" name="value" />
    <declaration type="double" name="totalWeight" />
    <scope>
      <declaration type="double" name="iV" />
      <declaration type="Map.Entry&lt;RealVector,Double&gt;" name="sd" />
      <scope />
    </scope>
    <comment>Reset.</comment>
    <comment>Compute contribution of each sample points to the microsphere elements illumination</comment>
    <comment>Vector between interpolation point and current sample point.</comment>
    <comment>No need to interpolate, as the interpolation point is</comment>
    <comment>actually (very close to) one of the sampled points.</comment>
    <comment>Interpolation calculation.</comment>
  </method>
  <javadoc>
    <text>Compute the cosine of the angle between 2 vectors.</text>
    <param>v Vector.</param>
    <param>w Vector.</param>
    <return>the cosine of the angle between {@code v} and {@code w}.</return>
  </javadoc>
  <method type="double" name="cosAngle" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
