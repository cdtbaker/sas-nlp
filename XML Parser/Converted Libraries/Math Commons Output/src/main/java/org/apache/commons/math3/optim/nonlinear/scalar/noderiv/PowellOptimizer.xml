<?xml version="1.0" encoding="UTF-8"?>
<class name="PowellOptimizer">
  <javadoc>
    <text>Powell's algorithm.
 * This code is translated and adapted from the Python version of this
 * algorithm (as implemented in module {@code optimize.py} v0.5 of
 * &lt;em&gt;SciPy&lt;/em&gt;).
 * &lt;br/&gt;
 * The default stopping criterion is based on the differences of the
 * function value between two successive iterations. It is however possible
 * to define a custom convergence checker that might terminate the algorithm
 * earlier.
 * &lt;br/&gt;
 * The internal line search optimizer is a {@link BrentOptimizer} with a
 * convergence checker set to {@link SimpleUnivariateValueChecker}.
 * &lt;br/&gt;
 * Constraints are not supported: the call to{@link #optimize(OptimizationData[]) optimize} will throw{@link MathUnsupportedOperationException} if bounds are passed to it.
 * In order to impose simple constraints, the objective function must be
 * wrapped in an adapter like{@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterMultivariateFunctionMappingAdapter} or{@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterMultivariateFunctionPenaltyAdapter}.</text>
    <version>$Id: PowellOptimizer.java 1462503 2013-03-29 15:48:27Z luc $</version>
    <since>2.2</since>
  </javadoc>
  <javadoc>
    <text>Minimum relative tolerance.</text>
  </javadoc>
  <declaration type="double" name="MIN_RELATIVE_TOLERANCE" />
  <javadoc>
    <text>Relative threshold.</text>
  </javadoc>
  <declaration type="double" name="relativeThreshold" />
  <javadoc>
    <text>Absolute threshold.</text>
  </javadoc>
  <declaration type="double" name="absoluteThreshold" />
  <javadoc>
    <text>Line search.</text>
  </javadoc>
  <declaration type="LineSearch" name="line" />
  <javadoc>
    <text>This constructor allows to specify a user-defined convergence checker,
 * in addition to the parameters that control the default convergence
 * checking procedure.
 * &lt;br/&gt;
 * The internal line search tolerances are set to the square-root of their
 * corresponding value in the multivariate optimizer.</text>
    <param>rel Relative threshold.</param>
    <param>abs Absolute threshold.</param>
    <param>checker Convergence checker.</param>
    <throws>NotStrictlyPositiveException if {@code abs &lt;= 0}.</throws>
    <throws>NumberIsTooSmallException if {@code rel &lt; 2 * Math.ulp(1d)}.</throws>
  </javadoc>
  <method type="constructor" name="PowellOptimizer" />
  <javadoc>
    <text>This constructor allows to specify a user-defined convergence checker,
 * in addition to the parameters that control the default convergence
 * checking procedure and the line search tolerances.</text>
    <param>rel Relative threshold for this optimizer.</param>
    <param>abs Absolute threshold for this optimizer.</param>
    <param>lineRel Relative threshold for the internal line search optimizer.</param>
    <param>lineAbs Absolute threshold for the internal line search optimizer.</param>
    <param>checker Convergence checker.</param>
    <throws>NotStrictlyPositiveException if {@code abs &lt;= 0}.</throws>
    <throws>NumberIsTooSmallException if {@code rel &lt; 2 * Math.ulp(1d)}.</throws>
  </javadoc>
  <method type="constructor" name="PowellOptimizer">
    <scope />
    <scope />
    <comment>Create the line search optimizer.</comment>
  </method>
  <javadoc>
    <text>The parameters control the default convergence checking procedure.
 * &lt;br/&gt;
 * The internal line search tolerances are set to the square-root of their
 * corresponding value in the multivariate optimizer.</text>
    <param>rel Relative threshold.</param>
    <param>abs Absolute threshold.</param>
    <throws>NotStrictlyPositiveException if {@code abs &lt;= 0}.</throws>
    <throws>NumberIsTooSmallException if {@code rel &lt; 2 * Math.ulp(1d)}.</throws>
  </javadoc>
  <method type="constructor" name="PowellOptimizer" />
  <javadoc>
    <text>Builds an instance with the default convergence checking procedure.</text>
    <param>rel Relative threshold.</param>
    <param>abs Absolute threshold.</param>
    <param>lineRel Relative threshold for the internal line search optimizer.</param>
    <param>lineAbs Absolute threshold for the internal line search optimizer.</param>
    <throws>NotStrictlyPositiveException if {@code abs &lt;= 0}.</throws>
    <throws>NumberIsTooSmallException if {@code rel &lt; 2 * Math.ulp(1d)}.</throws>
  </javadoc>
  <method type="constructor" name="PowellOptimizer" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="PointValuePair" name="doOptimize">
    <declaration type="GoalType" name="goal" />
    <declaration type="double[]" name="guess" />
    <declaration type="int" name="n" />
    <declaration type="double[][]" name="direc" />
    <scope />
    <declaration type="ConvergenceChecker&lt;PointValuePair&gt;" name="checker" />
    <declaration type="double[]" name="x" />
    <declaration type="double" name="fVal" />
    <declaration type="double[]" name="x1" />
    <scope>
      <declaration type="double" name="fX" />
      <declaration type="double" name="fX2" />
      <declaration type="double" name="delta" />
      <declaration type="int" name="bigInd" />
      <declaration type="double" name="alphaMin" />
      <scope>
        <declaration type="double[]" name="d" />
        <declaration type="UnivariatePointValuePair" name="optimum" />
        <declaration type="double[][]" name="result" />
        <scope />
      </scope>
      <declaration type="boolean" name="stop" />
      <declaration type="PointValuePair" name="previous" />
      <declaration type="PointValuePair" name="current" />
      <scope />
      <scope>
        <scope />
        <scope />
      </scope>
      <declaration type="double[]" name="d" />
      <declaration type="double[]" name="x2" />
      <scope />
      <scope>
        <declaration type="double" name="t" />
        <declaration type="double" name="temp" />
        <scope>
          <declaration type="UnivariatePointValuePair" name="optimum" />
          <declaration type="double[][]" name="result" />
          <declaration type="int" name="lastInd" />
        </scope>
      </scope>
    </scope>
    <comment>Default convergence check.</comment>
    <comment>User-defined stopping criteria.</comment>
  </method>
  <javadoc>
    <text>Compute a new point (in the original space) and a new direction
 * vector, resulting from the line search.</text>
    <param>p Point used in the line search.</param>
    <param>d Direction used in the line search.</param>
    <param>optimum Optimum found by the line search.</param>
    <return>a 2-element array containing the new point (at index 0) and
 * the new direction (at index 1).</return>
  </javadoc>
  <method type="double[][]" name="newPointAndDirection">
    <declaration type="int" name="n" />
    <declaration type="double[]" name="nP" />
    <declaration type="double[]" name="nD" />
    <scope />
    <declaration type="double[][][]" name="result" />
  </method>
  <javadoc>
    <text>Class for finding the minimum of the objective function along a given
 * direction.</text>
  </javadoc>
  <javadoc>
    <text>Value that will pass the precondition check for {@link BrentOptimizer}but will not pass the convergence check, so that the custom checker
 * will always decide when to stop the line search.</text>
  </javadoc>
  <declaration type="double" name="REL_TOL_UNUSED" />
  <javadoc>
    <text>Value that will pass the precondition check for {@link BrentOptimizer}but will not pass the convergence check, so that the custom checker
 * will always decide when to stop the line search.</text>
  </javadoc>
  <declaration type="double" name="ABS_TOL_UNUSED" />
  <javadoc>
    <text>Automatic bracketing.</text>
  </javadoc>
  <declaration type="BracketFinder" name="bracket" />
  <javadoc>
    <text>The "BrentOptimizer" default stopping criterion uses the tolerances
 * to check the domain (point) values, not the function values.
 * We thus create a custom checker to use function values.</text>
    <param>rel Relative threshold.</param>
    <param>abs Absolute threshold.</param>
  </javadoc>
  <method type="constructor" name="LineSearch" />
  <javadoc>
    <text>Find the minimum of the function {@code f(p + alpha * d)}.</text>
    <param>p Starting point.</param>
    <param>d Search direction.</param>
    <return>the optimum.</return>
    <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the number of evaluations is exceeded.</throws>
  </javadoc>
  <method type="UnivariatePointValuePair" name="search">
    <declaration type="int" name="n" />
    <declaration type="UnivariateFunction[]" name="f" />
    <method type="double" name="value">
      <declaration type="double[]" name="x" />
      <scope />
      <declaration type="double" name="obj" />
    </method>
    <declaration type="GoalType" name="goal" />
    <comment>Passing "MAX_VALUE" as a dummy value because it is the enclosing</comment>
    <comment>class that counts the number of evaluations (and will eventually</comment>
    <comment>generate the exception).</comment>
  </method>
  <javadoc>
    <throws>MathUnsupportedOperationException if bounds were passed to the{@link #optimize(OptimizationData[]) optimize} method.</throws>
  </javadoc>
  <method type="void" name="checkParameters">
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
