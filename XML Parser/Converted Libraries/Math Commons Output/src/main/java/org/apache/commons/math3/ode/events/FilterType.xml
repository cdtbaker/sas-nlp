<?xml version="1.0" encoding="UTF-8"?>
<class name="FilterType">
  <javadoc>
    <text>Enumerate for {@link EventFilter filtering events}.</text>
    <version>$Id: FilterType.java 1458491 2013-03-19 20:13:11Z luc $</version>
    <since>3.2</since>
  </javadoc>
  <javadoc>
    <text>Constant for triggering only decreasing events.
 * &lt;p&gt;When this filter is used, the wrapped {@link EventHandlerevent handler} {@link EventHandler#eventOccurred(double,double[],boolean) eventOccurred} method will be called &lt;em&gt;only&lt;/em&gt; with
 * its {@code increasing} argument set to false.&lt;/p&gt;</text>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="getTriggeredIncreasing" />
  <javadoc>
    <text>{@inheritDoc}&lt;p&gt;
 * states scheduling for computing h(t,y) as an altered version of g(t, y)
 * &lt;ul&gt;
 * &lt;li&gt;0 are triggered events for which a zero is produced (here decreasing events)&lt;/li&gt;
 * &lt;li&gt;X are ignored events for which zero is masked (here increasing events)&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;
 * &lt;pre&gt;
 * g(t)
 * ___                     ___                     ___
 * /   \                   /   \                   /   \
 * /     \                 /     \                 /     \
 * /  g&gt;0  \               /  g&gt;0  \               /  g&gt;0  \
 * /         \             /         \             /         \
 * ----- X --------- 0 --------- X --------- 0 --------- X --------- 0 ---
 * /             \         /             \         /             \
 * /               \ g&lt;0   /               \  g&lt;0  /               \ g&lt;0
 * /                 \     /                 \     /                 \     /
 * ___/                   \___/                   \___/                   \___/
 * &lt;/pre&gt;
 * &lt;pre&gt;
 * h(t,y)) as an alteration of g(t,y)
 * ___                                 ___         ___
 * \       /   \                               /   \       /   \
 * \     /     \ h=+g                        /     \     /     \
 * \   /       \      h=min(-s,-g,+g)      /       \   /       \
 * \_/         \                         /         \_/         \
 * ------ ---------- 0 ----------_---------- 0 --------------------- 0 ---
 * \         / \         /                         \
 * h=max(+s,-g,+g)    \       /   \       /       h=max(+s,-g,+g)     \
 * \     /     \     / h=-g                        \     /
 * \___/       \___/                               \___/
 * &lt;/pre&gt;
 * &lt;p&gt;
 * As shown by the figure above, several expressions are used to compute h,
 * depending on the current state:
 * &lt;ul&gt;
 * &lt;li&gt;h = max(+s,-g,+g)&lt;/li&gt;
 * &lt;li&gt;h = +g&lt;/li&gt;
 * &lt;li&gt;h = min(-s,-g,+g)&lt;/li&gt;
 * &lt;li&gt;h = -g&lt;/li&gt;
 * &lt;/ul&gt;
 * where s is a tiny positive value: {@link org.apache.commons.math3.util.Precision#SAFE_MIN}.
 * &lt;/p&gt;</text>
  </javadoc>
  <method type="Transformer" name="selectTransformer">
    <scope>
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
    </scope>
    <comment>we are initializing the first point</comment>
    <comment>initialize as if previous root (i.e. backward one) was an ignored increasing event</comment>
    <comment>initialize as if previous root (i.e. backward one) was a triggered decreasing event</comment>
    <comment>we are exactly at a root, we don't know if it is an increasing</comment>
    <comment>or a decreasing event, we remain in uninitialized state</comment>
    <comment>we have crossed the zero line on an ignored increasing event,</comment>
    <comment>we must change the transformer</comment>
    <comment>we are still in the same status</comment>
    <comment>we have crossed the zero line on an ignored increasing event,</comment>
    <comment>we must change the transformer</comment>
    <comment>we are still in the same status</comment>
    <comment>we have crossed the zero line on a triggered decreasing event,</comment>
    <comment>we must change the transformer</comment>
    <comment>we are still in the same status</comment>
    <comment>we have crossed the zero line on a triggered decreasing event,</comment>
    <comment>we must change the transformer</comment>
    <comment>we are still in the same status</comment>
    <comment>this should never happen</comment>
    <comment>we are initializing the first point</comment>
    <comment>initialize as if previous root (i.e. forward one) was a triggered decreasing event</comment>
    <comment>initialize as if previous root (i.e. forward one) was an ignored increasing event</comment>
    <comment>we are exactly at a root, we don't know if it is an increasing</comment>
    <comment>or a decreasing event, we remain in uninitialized state</comment>
    <comment>we have crossed the zero line on an ignored increasing event,</comment>
    <comment>we must change the transformer</comment>
    <comment>we are still in the same status</comment>
    <comment>we have crossed the zero line on an ignored increasing event,</comment>
    <comment>we must change the transformer</comment>
    <comment>we are still in the same status</comment>
    <comment>we have crossed the zero line on a triggered decreasing event,</comment>
    <comment>we must change the transformer</comment>
    <comment>we are still in the same status</comment>
    <comment>we have crossed the zero line on a triggered decreasing event,</comment>
    <comment>we must change the transformer</comment>
    <comment>we are still in the same status</comment>
    <comment>this should never happen</comment>
  </method>
  <javadoc>
    <text>Constant for triggering only increasing events.
 * &lt;p&gt;When this filter is used, the wrapped {@link EventHandlerevent handler} {@link EventHandler#eventOccurred(double,double[],boolean) eventOccurred} method will be called &lt;em&gt;only&lt;/em&gt; with
 * its {@code increasing} argument set to true.&lt;/p&gt;</text>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="getTriggeredIncreasing" />
  <javadoc>
    <text>{@inheritDoc}&lt;p&gt;
 * states scheduling for computing h(t,y) as an altered version of g(t, y)
 * &lt;ul&gt;
 * &lt;li&gt;0 are triggered events for which a zero is produced (here increasing events)&lt;/li&gt;
 * &lt;li&gt;X are ignored events for which zero is masked (here decreasing events)&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;
 * &lt;pre&gt;
 * g(t)
 * ___                     ___                     ___
 * /   \                   /   \                   /   \
 * /     \                 /     \                 /     \
 * /  g&gt;0  \               /  g&gt;0  \               /  g&gt;0  \
 * /         \             /         \             /         \
 * ----- 0 --------- X --------- 0 --------- X --------- 0 --------- X ---
 * /             \         /             \         /             \
 * /               \ g&lt;0   /               \  g&lt;0  /               \ g&lt;0
 * /                 \     /                 \     /                 \     /
 * ___/                   \___/                   \___/                   \___/
 * &lt;/pre&gt;
 * &lt;pre&gt;
 * h(t,y)) as an alteration of g(t,y)
 * ___         ___
 * \                               /   \       /   \
 * \ h=-g                        /     \     /     \ h=-g
 * \      h=min(-s,-g,+g)      /       \   /       \      h=min(-s,-g,+g)
 * \                         /         \_/         \
 * ------0 ----------_---------- 0 --------------------- 0 --------- _ ---
 * \         / \         /                         \         / \
 * \       /   \       /       h=max(+s,-g,+g)     \       /   \
 * \     /     \     / h=+g                        \     /     \     /
 * \___/       \___/                               \___/       \___/
 * &lt;/pre&gt;
 * &lt;p&gt;
 * As shown by the figure above, several expressions are used to compute h,
 * depending on the current state:
 * &lt;ul&gt;
 * &lt;li&gt;h = max(+s,-g,+g)&lt;/li&gt;
 * &lt;li&gt;h = +g&lt;/li&gt;
 * &lt;li&gt;h = min(-s,-g,+g)&lt;/li&gt;
 * &lt;li&gt;h = -g&lt;/li&gt;
 * &lt;/ul&gt;
 * where s is a tiny positive value: {@link org.apache.commons.math3.util.Precision#SAFE_MIN}.
 * &lt;/p&gt;</text>
  </javadoc>
  <method type="Transformer" name="selectTransformer">
    <scope>
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
    </scope>
    <comment>we are initializing the first point</comment>
    <comment>initialize as if previous root (i.e. backward one) was a triggered increasing event</comment>
    <comment>initialize as if previous root (i.e. backward one) was an ignored decreasing event</comment>
    <comment>we are exactly at a root, we don't know if it is an increasing</comment>
    <comment>or a decreasing event, we remain in uninitialized state</comment>
    <comment>we have crossed the zero line on an ignored decreasing event,</comment>
    <comment>we must change the transformer</comment>
    <comment>we are still in the same status</comment>
    <comment>we have crossed the zero line on an ignored decreasing event,</comment>
    <comment>we must change the transformer</comment>
    <comment>we are still in the same status</comment>
    <comment>we have crossed the zero line on a triggered increasing event,</comment>
    <comment>we must change the transformer</comment>
    <comment>we are still in the same status</comment>
    <comment>we have crossed the zero line on a triggered increasing event,</comment>
    <comment>we must change the transformer</comment>
    <comment>we are still in the same status</comment>
    <comment>this should never happen</comment>
    <comment>we are initializing the first point</comment>
    <comment>initialize as if previous root (i.e. forward one) was an ignored decreasing event</comment>
    <comment>initialize as if previous root (i.e. forward one) was a triggered increasing event</comment>
    <comment>we are exactly at a root, we don't know if it is an increasing</comment>
    <comment>or a decreasing event, we remain in uninitialized state</comment>
    <comment>we have crossed the zero line on an ignored decreasing event,</comment>
    <comment>we must change the transformer</comment>
    <comment>we are still in the same status</comment>
    <comment>we have crossed the zero line on an ignored decreasing event,</comment>
    <comment>we must change the transformer</comment>
    <comment>we are still in the same status</comment>
    <comment>we have crossed the zero line on a triggered increasing event,</comment>
    <comment>we must change the transformer</comment>
    <comment>we are still in the same status</comment>
    <comment>we have crossed the zero line on a triggered increasing event,</comment>
    <comment>we must change the transformer</comment>
    <comment>we are still in the same status</comment>
    <comment>this should never happen</comment>
  </method>
  <method name="getTriggeredIncreasing" type="boolean" />
  <javadoc>
    <text>Get the increasing status of triggered events.</text>
    <return>true if triggered events are increasing events</return>
  </javadoc>
  <method name="selectTransformer" type="Transformer" />
  <javadoc>
    <text>Get next function transformer in the specified direction.</text>
    <param>previous transformer active on the previous point with respect
 * to integration direction (may be null if no previous point is known)</param>
    <param>g current value of the g function</param>
    <param>forward true if integration goes forward</param>
    <return>next transformer transformer</return>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
