<?xml version="1.0" encoding="UTF-8"?>
<class name="LUDecomposition">
  <javadoc>
    <text>Calculates the LUP-decomposition of a square matrix.
 * &lt;p&gt;The LUP-decomposition of a matrix A consists of three matrices L, U and
 * P that satisfy: P&amp;times;A = L&amp;times;U. L is lower triangular (with unit
 * diagonal terms), U is upper triangular and P is a permutation matrix. All
 * matrices are m&amp;times;m.&lt;/p&gt;
 * &lt;p&gt;As shown by the presence of the P matrix, this decomposition is
 * implemented using partial pivoting.&lt;/p&gt;
 * &lt;p&gt;This class is based on the class with similar name from the
 * &lt;a href="http://math.nist.gov/javanumerics/jama/"&gt;JAMA&lt;/a&gt; library.&lt;/p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;a {@link #getP() getP} method has been added,&lt;/li&gt;
 * &lt;li&gt;the {@code det} method has been renamed as {@link #getDeterminant()getDeterminant},&lt;/li&gt;
 * &lt;li&gt;the {@code getDoublePivot} method has been removed (but the int based{@link #getPivot() getPivot} method has been kept),&lt;/li&gt;
 * &lt;li&gt;the {@code solve} and {@code isNonSingular} methods have been replaced
 * by a {@link #getSolver() getSolver} method and the equivalent methods
 * provided by the returned {@link DecompositionSolver}.&lt;/li&gt;
 * &lt;/ul&gt;</text>
    <see>&lt;a href="http://mathworld.wolfram.com/LUDecomposition.html"&gt;MathWorld&lt;/a&gt;</see>
    <see>&lt;a href="http://en.wikipedia.org/wiki/LU_decomposition"&gt;Wikipedia&lt;/a&gt;</see>
    <version>$Id: LUDecomposition.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>2.0 (changed to concrete class in 3.0)</since>
  </javadoc>
  <javadoc>
    <text>Default bound to determine effective singularity in LU decomposition.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_TOO_SMALL" />
  <javadoc>
    <text>Entries of LU decomposition.</text>
  </javadoc>
  <declaration type="double[][]" name="lu" />
  <javadoc>
    <text>Pivot permutation associated with LU decomposition.</text>
  </javadoc>
  <declaration type="int[]" name="pivot" />
  <javadoc>
    <text>Parity of the permutation associated with the LU decomposition.</text>
  </javadoc>
  <declaration type="boolean" name="even" />
  <javadoc>
    <text>Singularity indicator.</text>
  </javadoc>
  <declaration type="boolean" name="singular" />
  <javadoc>
    <text>Cached value of L.</text>
  </javadoc>
  <declaration type="RealMatrix" name="cachedL" />
  <javadoc>
    <text>Cached value of U.</text>
  </javadoc>
  <declaration type="RealMatrix" name="cachedU" />
  <javadoc>
    <text>Cached value of P.</text>
  </javadoc>
  <declaration type="RealMatrix" name="cachedP" />
  <javadoc>
    <text>Calculates the LU-decomposition of the given matrix.
 * This constructor uses 1e-11 as default value for the singularity
 * threshold.</text>
    <param>matrix Matrix to decompose.</param>
    <throws>NonSquareMatrixException if matrix is not square.</throws>
  </javadoc>
  <method type="constructor" name="LUDecomposition" />
  <javadoc>
    <text>Calculates the LU-decomposition of the given matrix.</text>
    <param>matrix The matrix to decompose.</param>
    <param>singularityThreshold threshold (based on partial row norm)
 * under which a matrix is considered singular</param>
    <throws>NonSquareMatrixException if matrix is not square</throws>
  </javadoc>
  <method type="constructor" name="LUDecomposition">
    <scope />
    <declaration type="int" name="m" />
    <scope />
    <scope>
      <scope>
        <declaration type="double[]" name="luRow" />
        <declaration type="double" name="sum" />
        <scope />
      </scope>
      <declaration type="int" name="max" />
      <declaration type="double" name="largest" />
      <scope>
        <declaration type="double[]" name="luRow" />
        <declaration type="double" name="sum" />
        <scope />
        <scope />
      </scope>
      <scope />
      <scope>
        <declaration type="double" name="tmp" />
        <declaration type="double[]" name="luMax" />
        <declaration type="double[]" name="luCol" />
        <scope />
        <declaration type="int" name="temp" />
      </scope>
      <declaration type="double" name="luDiag" />
      <scope />
    </scope>
    <comment>Initialize permutation array and parity</comment>
    <comment>Loop over columns</comment>
    <comment>upper</comment>
    <comment>lower</comment>
    <comment>permutation row</comment>
    <comment>maintain best permutation choice</comment>
    <comment>Singularity check</comment>
    <comment>Pivot if necessary</comment>
    <comment>Divide the lower elements by the "winning" diagonal elt.</comment>
  </method>
  <javadoc>
    <text>Returns the matrix L of the decomposition.
 * &lt;p&gt;L is a lower-triangular matrix&lt;/p&gt;</text>
    <return>the L matrix (or null if decomposed matrix is singular)</return>
  </javadoc>
  <method type="RealMatrix" name="getL">
    <scope>
      <declaration type="int" name="m" />
      <scope>
        <declaration type="double[]" name="luI" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Returns the matrix U of the decomposition.
 * &lt;p&gt;U is an upper-triangular matrix&lt;/p&gt;</text>
    <return>the U matrix (or null if decomposed matrix is singular)</return>
  </javadoc>
  <method type="RealMatrix" name="getU">
    <scope>
      <declaration type="int" name="m" />
      <scope>
        <declaration type="double[]" name="luI" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Returns the P rows permutation matrix.
 * &lt;p&gt;P is a sparse matrix with exactly one element set to 1.0 in
 * each row and each column, all other elements being set to 0.0.&lt;/p&gt;
 * &lt;p&gt;The positions of the 1 elements are given by the {@link #getPivot()pivot permutation vector}.&lt;/p&gt;</text>
    <return>the P rows permutation matrix (or null if decomposed matrix is singular)</return>
    <see>#getPivot()</see>
  </javadoc>
  <method type="RealMatrix" name="getP">
    <scope>
      <declaration type="int" name="m" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns the pivot permutation vector.</text>
    <return>the pivot permutation vector</return>
    <see>#getP()</see>
  </javadoc>
  <method type="int[]" name="getPivot" />
  <javadoc>
    <text>Return the determinant of the matrix</text>
    <return>determinant of the matrix</return>
  </javadoc>
  <method type="double" name="getDeterminant">
    <scope />
    <scope>
      <declaration type="int" name="m" />
      <declaration type="double" name="determinant" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Get a solver for finding the A &amp;times; X = B solution in exact linear
 * sense.</text>
    <return>a solver</return>
  </javadoc>
  <method type="DecompositionSolver" name="getSolver" />
  <javadoc>
    <text>Specialized solver.</text>
  </javadoc>
  <javadoc>
    <text>Entries of LU decomposition.</text>
  </javadoc>
  <declaration type="double[][]" name="lu" />
  <javadoc>
    <text>Pivot permutation associated with LU decomposition.</text>
  </javadoc>
  <declaration type="int[]" name="pivot" />
  <javadoc>
    <text>Singularity indicator.</text>
  </javadoc>
  <declaration type="boolean" name="singular" />
  <javadoc>
    <text>Build a solver from decomposed matrix.</text>
    <param>lu entries of LU decomposition</param>
    <param>pivot pivot permutation associated with LU decomposition</param>
    <param>singular singularity indicator</param>
  </javadoc>
  <method type="constructor" name="Solver" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isNonSingular" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="solve">
    <declaration type="int" name="m" />
    <scope />
    <scope />
    <declaration type="double[]" name="bp" />
    <scope />
    <scope>
      <declaration type="double" name="bpCol" />
      <scope />
    </scope>
    <scope>
      <declaration type="double" name="bpCol" />
      <scope />
    </scope>
    <comment>Apply permutations to b</comment>
    <comment>Solve LY = b</comment>
    <comment>Solve UX = Y</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="solve">
    <declaration type="int" name="m" />
    <scope />
    <scope />
    <declaration type="int" name="nColB" />
    <declaration type="double[][]" name="bp" />
    <scope>
      <declaration type="double[]" name="bpRow" />
      <declaration type="int" name="pRow" />
      <scope />
    </scope>
    <scope>
      <declaration type="double[]" name="bpCol" />
      <scope>
        <declaration type="double[]" name="bpI" />
        <declaration type="double" name="luICol" />
        <scope />
      </scope>
    </scope>
    <scope>
      <declaration type="double[]" name="bpCol" />
      <declaration type="double" name="luDiag" />
      <scope />
      <scope>
        <declaration type="double[]" name="bpI" />
        <declaration type="double" name="luICol" />
        <scope />
      </scope>
    </scope>
    <comment>Apply permutations to b</comment>
    <comment>Solve LY = b</comment>
    <comment>Solve UX = Y</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="getInverse" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
