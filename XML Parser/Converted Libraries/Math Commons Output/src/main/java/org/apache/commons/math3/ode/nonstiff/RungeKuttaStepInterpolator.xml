<?xml version="1.0" encoding="UTF-8"?>
<class name="RungeKuttaStepInterpolator">
  <javadoc>
    <text>This class represents an interpolator over the last step during an
 * ODE integration for Runge-Kutta and embedded Runge-Kutta integrators.</text>
    <see>RungeKuttaIntegrator</see>
    <see>EmbeddedRungeKuttaIntegrator</see>
    <version>$Id: RungeKuttaStepInterpolator.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>1.2</since>
  </javadoc>
  <javadoc>
    <text>Previous state.</text>
  </javadoc>
  <declaration type="double[]" name="previousState" />
  <javadoc>
    <text>Slopes at the intermediate points</text>
  </javadoc>
  <declaration type="double[][]" name="yDotK" />
  <javadoc>
    <text>Reference to the integrator.</text>
  </javadoc>
  <declaration type="AbstractIntegrator" name="integrator" />
  <javadoc>
    <text>Simple constructor.
 * This constructor builds an instance that is not usable yet, the{@link #reinitialize} method should be called before using the
 * instance in order to initialize the internal arrays. This
 * constructor is used only in order to delay the initialization in
 * some cases. The {@link RungeKuttaIntegrator} and {@link EmbeddedRungeKuttaIntegrator} classes use the prototyping design
 * pattern to create the step interpolators by cloning an
 * uninitialized model and latter initializing the copy.</text>
  </javadoc>
  <method type="constructor" name="RungeKuttaStepInterpolator" />
  <javadoc>
    <text>Copy constructor.
 * &lt;p&gt;The copied interpolator should have been finalized before the
 * copy, otherwise the copy will not be able to perform correctly any
 * interpolation and will throw a {@link NullPointerException}later. Since we don't want this constructor to throw the
 * exceptions finalization may involve and since we don't want this
 * method to modify the state of the copied interpolator,
 * finalization is &lt;strong&gt;not&lt;/strong&gt; done automatically, it
 * remains under user control.&lt;/p&gt;
 * &lt;p&gt;The copy is a deep copy: its arrays are separated from the
 * original arrays of the instance.&lt;/p&gt;</text>
    <param>interpolator interpolator to copy from.</param>
  </javadoc>
  <method type="constructor" name="RungeKuttaStepInterpolator">
    <scope>
      <scope />
    </scope>
    <scope />
    <comment>we cannot keep any reference to the equations in the copy</comment>
    <comment>the interpolator should have been finalized before</comment>
  </method>
  <javadoc>
    <text>Reinitialize the instance
 * &lt;p&gt;Some Runge-Kutta integrators need fewer functions evaluations
 * than their counterpart step interpolators. So the interpolator
 * should perform the last evaluations they need by themselves. The{@link RungeKuttaIntegrator RungeKuttaIntegrator} and {@link EmbeddedRungeKuttaIntegrator EmbeddedRungeKuttaIntegrator}abstract classes call this method in order to let the step
 * interpolator perform the evaluations it needs. These evaluations
 * will be performed during the call to &lt;code&gt;doFinalize&lt;/code&gt; if
 * any, i.e. only if the step handler either calls the {@link AbstractStepInterpolator#finalizeStep finalizeStep} method or the{@link AbstractStepInterpolator#getInterpolatedStategetInterpolatedState} method (for an interpolator which needs a
 * finalization) or if it clones the step interpolator.&lt;/p&gt;</text>
    <param>rkIntegrator integrator being used</param>
    <param>y reference to the integrator array holding the state at
 * the end of the step</param>
    <param>yDotArray reference to the integrator array holding all the
 * intermediate slopes</param>
    <param>forward integration direction indicator</param>
    <param>primaryMapper equations mapper for the primary equations set</param>
    <param>secondaryMappers equations mappers for the secondary equations sets</param>
  </javadoc>
  <method type="void" name="reinitialize" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="shift" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="writeExternal">
    <declaration type="int" name="n" />
    <scope />
    <declaration type="int" name="kMax" />
    <scope>
      <scope />
    </scope>
    <comment>save the state of the base class</comment>
    <comment>save the local attributes</comment>
    <comment>we do not save any reference to the equations</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="readExternal">
    <declaration type="double" name="t" />
    <declaration type="int" name="n" />
    <scope />
    <scope>
      <scope />
    </scope>
    <declaration type="int" name="kMax" />
    <scope>
      <scope />
    </scope>
    <scope />
    <scope />
    <comment>read the base class</comment>
    <comment>read the local attributes</comment>
    <comment>we can now set the interpolated time and state</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
