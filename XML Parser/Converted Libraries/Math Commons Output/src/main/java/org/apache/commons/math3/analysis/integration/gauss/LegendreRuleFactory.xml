<?xml version="1.0" encoding="UTF-8"?>
<class name="LegendreRuleFactory">
  <javadoc>
    <text>Factory that creates Gauss-type quadrature rule using Legendre polynomials.
 * In this implementation, the lower and upper bounds of the natural interval
 * of integration are -1 and 1, respectively.
 * The Legendre polynomials are evaluated using the recurrence relation
 * presented in &lt;a href="http://en.wikipedia.org/wiki/Abramowitz_and_Stegun"
 * Abramowitz and Stegun, 1964&lt;/a&gt;.</text>
    <since>3.1</since>
    <version>$Id: LegendreRuleFactory.java 1455194 2013-03-11 15:45:54Z luc $</version>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Pair&lt;Double[],Double[]&gt;" name="computeRule">
    <scope />
    <declaration type="Double[]" name="previousPoints" />
    <declaration type="Double[]" name="points" />
    <declaration type="Double[]" name="weights" />
    <declaration type="int" name="iMax" />
    <scope>
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
      <declaration type="double" name="pma" />
      <declaration type="double" name="pa" />
      <declaration type="double" name="pmb" />
      <declaration type="double" name="pb" />
      <scope>
        <declaration type="int" name="two_j_p_1" />
        <declaration type="int" name="j_p_1" />
        <declaration type="double" name="ppa" />
        <declaration type="double" name="ppb" />
      </scope>
      <declaration type="double" name="c" />
      <declaration type="double" name="pmc" />
      <declaration type="double" name="pc" />
      <declaration type="boolean" name="done" />
      <scope>
        <scope>
          <declaration type="double" name="ppc" />
        </scope>
        <scope>
          <scope />
          <scope />
        </scope>
      </scope>
      <declaration type="double" name="d" />
      <declaration type="double" name="w" />
      <declaration type="int" name="idx" />
    </scope>
    <scope>
      <declaration type="double" name="pmc" />
      <scope />
      <declaration type="double" name="d" />
      <declaration type="double" name="w" />
    </scope>
    <comment>Break recursion.</comment>
    <comment>Get previous rule.</comment>
    <comment>If it has not been computed yet it will trigger a recursive call</comment>
    <comment>to this method.</comment>
    <comment>Compute next rule.</comment>
    <comment>Find i-th root of P[n+1] by bracketing.</comment>
    <comment>Lower-bound of the interval.</comment>
    <comment>Upper-bound of the interval.</comment>
    <comment>P[j-1](a)</comment>
    <comment>P[j](a)</comment>
    <comment>P[j-1](b)</comment>
    <comment>P[j](b)</comment>
    <comment>P[j+1](a)</comment>
    <comment>P[j+1](b)</comment>
    <comment>Now pa = P[n+1](a), and pma = P[n](a) (same holds for b).</comment>
    <comment>Middle of the interval.</comment>
    <comment>P[j-1](c)</comment>
    <comment>P[j](c)</comment>
    <comment>P[j+1](c)</comment>
    <comment>Now pc = P[n+1](c) and pmc = P[n](c).</comment>
    <comment>If "numberOfPoints" is odd, 0 is a root.</comment>
    <comment>Note: as written, the test for oddness will work for negative</comment>
    <comment>integers too (although it is not necessary here), preventing</comment>
    <comment>a FindBugs warning.</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
