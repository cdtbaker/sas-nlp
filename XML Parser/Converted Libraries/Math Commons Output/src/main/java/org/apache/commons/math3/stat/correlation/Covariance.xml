<?xml version="1.0" encoding="UTF-8"?>
<class name="Covariance">
  <javadoc>
    <text>Computes covariances for pairs of arrays or columns of a matrix.
 * &lt;p&gt;The constructors that take &lt;code&gt;RealMatrix&lt;/code&gt; or
 * &lt;code&gt;double[][]&lt;/code&gt; arguments generate covariance matrices.  The
 * columns of the input matrices are assumed to represent variable values.&lt;/p&gt;
 * &lt;p&gt;The constructor argument &lt;code&gt;biasCorrected&lt;/code&gt; determines whether or
 * not computed covariances are bias-corrected.&lt;/p&gt;
 * &lt;p&gt;Unbiased covariances are given by the formula&lt;/p&gt;
 * &lt;code&gt;cov(X, Y) = &amp;Sigma;[(x&lt;sub&gt;i&lt;/sub&gt; - E(X))(y&lt;sub&gt;i&lt;/sub&gt; - E(Y))] / (n - 1)&lt;/code&gt;
 * where &lt;code&gt;E(X)&lt;/code&gt; is the mean of &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;E(Y)&lt;/code&gt;
 * is the mean of the &lt;code&gt;Y&lt;/code&gt; values.
 * &lt;p&gt;Non-bias-corrected estimates use &lt;code&gt;n&lt;/code&gt; in place of &lt;code&gt;n - 1&lt;/code&gt;</text>
    <version>$Id: Covariance.java 1453271 2013-03-06 10:29:51Z luc $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>covariance matrix</text>
  </javadoc>
  <declaration type="RealMatrix" name="covarianceMatrix" />
  <javadoc>
    <text>Number of observations (length of covariate vectors)</text>
  </javadoc>
  <declaration type="int" name="n" />
  <javadoc>
    <text>Create a Covariance with no data</text>
  </javadoc>
  <method type="constructor" name="Covariance" />
  <javadoc>
    <text>Create a Covariance matrix from a rectangular array
 * whose columns represent covariates.
 * &lt;p&gt;The &lt;code&gt;biasCorrected&lt;/code&gt; parameter determines whether or not
 * covariance estimates are bias-corrected.&lt;/p&gt;
 * &lt;p&gt;The input array must be rectangular with at least one column
 * and two rows.&lt;/p&gt;</text>
    <param>data rectangular array with columns representing covariates</param>
    <param>biasCorrected true means covariances are bias-corrected</param>
    <throws>MathIllegalArgumentException if the input data array is not
 * rectangular with at least two rows and one column.</throws>
    <throws>NotStrictlyPositiveException if the input data array is not
 * rectangular with at least one row and one column.</throws>
  </javadoc>
  <method type="constructor" name="Covariance" />
  <javadoc>
    <text>Create a Covariance matrix from a rectangular array
 * whose columns represent covariates.
 * &lt;p&gt;The input array must be rectangular with at least one column
 * and two rows&lt;/p&gt;</text>
    <param>data rectangular array with columns representing covariates</param>
    <throws>MathIllegalArgumentException if the input data array is not
 * rectangular with at least two rows and one column.</throws>
    <throws>NotStrictlyPositiveException if the input data array is not
 * rectangular with at least one row and one column.</throws>
  </javadoc>
  <method type="constructor" name="Covariance" />
  <javadoc>
    <text>Create a covariance matrix from a matrix whose columns
 * represent covariates.
 * &lt;p&gt;The &lt;code&gt;biasCorrected&lt;/code&gt; parameter determines whether or not
 * covariance estimates are bias-corrected.&lt;/p&gt;
 * &lt;p&gt;The matrix must have at least one column and two rows&lt;/p&gt;</text>
    <param>matrix matrix with columns representing covariates</param>
    <param>biasCorrected true means covariances are bias-corrected</param>
    <throws>MathIllegalArgumentException if the input matrix does not have
 * at least two rows and one column</throws>
  </javadoc>
  <method type="constructor" name="Covariance" />
  <javadoc>
    <text>Create a covariance matrix from a matrix whose columns
 * represent covariates.
 * &lt;p&gt;The matrix must have at least one column and two rows&lt;/p&gt;</text>
    <param>matrix matrix with columns representing covariates</param>
    <throws>MathIllegalArgumentException if the input matrix does not have
 * at least two rows and one column</throws>
  </javadoc>
  <method type="constructor" name="Covariance" />
  <javadoc>
    <text>Returns the covariance matrix</text>
    <return>covariance matrix</return>
  </javadoc>
  <method type="RealMatrix" name="getCovarianceMatrix" />
  <javadoc>
    <text>Returns the number of observations (length of covariate vectors)</text>
    <return>number of observations</return>
  </javadoc>
  <method type="int" name="getN" />
  <javadoc>
    <text>Compute a covariance matrix from a matrix whose columns represent
 * covariates.</text>
    <param>matrix input matrix (must have at least one column and two rows)</param>
    <param>biasCorrected determines whether or not covariance estimates are bias-corrected</param>
    <return>covariance matrix</return>
    <throws>MathIllegalArgumentException if the matrix does not contain sufficient data</throws>
  </javadoc>
  <method type="RealMatrix" name="computeCovarianceMatrix">
    <declaration type="int" name="dimension" />
    <declaration type="Variance" name="variance" />
    <declaration type="RealMatrix" name="outMatrix" />
    <scope>
      <scope>
        <declaration type="double" name="cov" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Create a covariance matrix from a matrix whose columns represent
 * covariates. Covariances are computed using the bias-corrected formula.</text>
    <param>matrix input matrix (must have at least one column and two rows)</param>
    <return>covariance matrix</return>
    <throws>MathIllegalArgumentException if matrix does not contain sufficient data</throws>
    <see>#Covariance</see>
  </javadoc>
  <method type="RealMatrix" name="computeCovarianceMatrix" />
  <javadoc>
    <text>Compute a covariance matrix from a rectangular array whose columns represent
 * covariates.</text>
    <param>data input array (must have at least one column and two rows)</param>
    <param>biasCorrected determines whether or not covariance estimates are bias-corrected</param>
    <return>covariance matrix</return>
    <throws>MathIllegalArgumentException if the data array does not contain sufficient
 * data</throws>
    <throws>NotStrictlyPositiveException if the input data array is not
 * rectangular with at least one row and one column.</throws>
  </javadoc>
  <method type="RealMatrix" name="computeCovarianceMatrix" />
  <javadoc>
    <text>Create a covariance matrix from a rectangular array whose columns represent
 * covariates. Covariances are computed using the bias-corrected formula.</text>
    <param>data input array (must have at least one column and two rows)</param>
    <return>covariance matrix</return>
    <throws>MathIllegalArgumentException if the data array does not contain sufficient data</throws>
    <throws>NotStrictlyPositiveException if the input data array is not
 * rectangular with at least one row and one column.</throws>
    <see>#Covariance</see>
  </javadoc>
  <method type="RealMatrix" name="computeCovarianceMatrix" />
  <javadoc>
    <text>Computes the covariance between the two arrays.
 * &lt;p&gt;Array lengths must match and the common length must be at least 2.&lt;/p&gt;</text>
    <param>xArray first data array</param>
    <param>yArray second data array</param>
    <param>biasCorrected if true, returned value will be bias-corrected</param>
    <return>returns the covariance for the two arrays</return>
    <throws>MathIllegalArgumentException if the arrays lengths do not match or
 * there is insufficient data</throws>
  </javadoc>
  <method type="double" name="covariance">
    <declaration type="Mean" name="mean" />
    <declaration type="double" name="result" />
    <declaration type="int" name="length" />
    <scope />
    <scope />
    <scope>
      <declaration type="double" name="xMean" />
      <declaration type="double" name="yMean" />
      <scope>
        <declaration type="double" name="xDev" />
        <declaration type="double" name="yDev" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Computes the covariance between the two arrays, using the bias-corrected
 * formula.
 * &lt;p&gt;Array lengths must match and the common length must be at least 2.&lt;/p&gt;</text>
    <param>xArray first data array</param>
    <param>yArray second data array</param>
    <return>returns the covariance for the two arrays</return>
    <throws>MathIllegalArgumentException if the arrays lengths do not match or
 * there is insufficient data</throws>
  </javadoc>
  <method type="double" name="covariance" />
  <javadoc>
    <text>Throws MathIllegalArgumentException if the matrix does not have at least
 * one column and two rows.</text>
    <param>matrix matrix to check</param>
    <throws>MathIllegalArgumentException if the matrix does not contain sufficient data
 * to compute covariance</throws>
  </javadoc>
  <method type="void" name="checkSufficientData">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <javadoc>
    <text>Create an empty covariance matrix.</text>
  </javadoc>
</class>
