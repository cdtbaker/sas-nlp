<?xml version="1.0" encoding="UTF-8"?>
<class name="BaseAbstractUnivariateSolver">
  <javadoc>
    <text>Provide a default implementation for several functions useful to generic
 * solvers.</text>
    <param>&lt;FUNC&gt;
 *  Type of function to solve.</param>
    <since>2.0</since>
    <version>$Id: BaseAbstractUnivariateSolver.java 1455194 2013-03-11 15:45:54Z luc $</version>
  </javadoc>
  <javadoc>
    <text>Default relative accuracy.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_RELATIVE_ACCURACY" />
  <javadoc>
    <text>Default function value accuracy.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_FUNCTION_VALUE_ACCURACY" />
  <javadoc>
    <text>Function value accuracy.</text>
  </javadoc>
  <declaration type="double" name="functionValueAccuracy" />
  <javadoc>
    <text>Absolute accuracy.</text>
  </javadoc>
  <declaration type="double" name="absoluteAccuracy" />
  <javadoc>
    <text>Relative accuracy.</text>
  </javadoc>
  <declaration type="double" name="relativeAccuracy" />
  <javadoc>
    <text>Evaluations counter.</text>
  </javadoc>
  <declaration type="Incrementor" name="evaluations" />
  <javadoc>
    <text>Lower end of search interval.</text>
  </javadoc>
  <declaration type="double" name="searchMin" />
  <javadoc>
    <text>Higher end of search interval.</text>
  </javadoc>
  <declaration type="double" name="searchMax" />
  <javadoc>
    <text>Initial guess.</text>
  </javadoc>
  <declaration type="double" name="searchStart" />
  <javadoc>
    <text>Function to solve.</text>
  </javadoc>
  <declaration type="FUNC" name="function" />
  <javadoc>
    <text>Construct a solver with given absolute accuracy.</text>
    <param>absoluteAccuracy Maximum absolute error.</param>
  </javadoc>
  <method type="constructor" name="BaseAbstractUnivariateSolver" />
  <javadoc>
    <text>Construct a solver with given accuracies.</text>
    <param>relativeAccuracy Maximum relative error.</param>
    <param>absoluteAccuracy Maximum absolute error.</param>
  </javadoc>
  <method type="constructor" name="BaseAbstractUnivariateSolver" />
  <javadoc>
    <text>Construct a solver with given accuracies.</text>
    <param>relativeAccuracy Maximum relative error.</param>
    <param>absoluteAccuracy Maximum absolute error.</param>
    <param>functionValueAccuracy Maximum function value error.</param>
  </javadoc>
  <method type="constructor" name="BaseAbstractUnivariateSolver" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getMaxEvaluations" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getEvaluations" />
  <javadoc>
    <return>the lower end of the search interval.</return>
  </javadoc>
  <method type="double" name="getMin" />
  <javadoc>
    <return>the higher end of the search interval.</return>
  </javadoc>
  <method type="double" name="getMax" />
  <javadoc>
    <return>the initial guess.</return>
  </javadoc>
  <method type="double" name="getStartValue" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getAbsoluteAccuracy" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getRelativeAccuracy" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getFunctionValueAccuracy" />
  <javadoc>
    <text>Compute the objective function value.</text>
    <param>point Point at which the objective function must be evaluated.</param>
    <return>the objective function value at specified point.</return>
    <throws>TooManyEvaluationsException if the maximal number of evaluations
 * is exceeded.</throws>
  </javadoc>
  <method type="double" name="computeObjectiveValue" />
  <javadoc>
    <text>Prepare for computation.
 * Subclasses must call this method if they override any of the{@code solve} methods.</text>
    <param>f Function to solve.</param>
    <param>min Lower bound for the interval.</param>
    <param>max Upper bound for the interval.</param>
    <param>startValue Start value to use.</param>
    <param>maxEval Maximum number of evaluations.</param>
    <exception>NullArgumentException if f is null</exception>
  </javadoc>
  <method type="void" name="setup">
    <comment>Checks.</comment>
    <comment>Reset.</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="solve">
    <comment>Initialization.</comment>
    <comment>Perform computation.</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="solve" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="solve" />
  <method name="doSolve" type="double" />
  <javadoc>
    <text>Method for implementing actual optimization algorithms in derived
 * classes.</text>
    <return>the root.</return>
    <throws>TooManyEvaluationsException if the maximal number of evaluations
 * is exceeded.</throws>
    <throws>NoBracketingException if the initial search interval does not bracket
 * a root and the solver requires it.</throws>
  </javadoc>
  <javadoc>
    <text>Check whether the function takes opposite signs at the endpoints.</text>
    <param>lower Lower endpoint.</param>
    <param>upper Upper endpoint.</param>
    <return>{@code true} if the function values have opposite signs at the
 * given points.</return>
  </javadoc>
  <method type="boolean" name="isBracketing" />
  <javadoc>
    <text>Check whether the arguments form a (strictly) increasing sequence.</text>
    <param>start First number.</param>
    <param>mid Second number.</param>
    <param>end Third number.</param>
    <return>{@code true} if the arguments form an increasing sequence.</return>
  </javadoc>
  <method type="boolean" name="isSequence" />
  <javadoc>
    <text>Check that the endpoints specify an interval.</text>
    <param>lower Lower endpoint.</param>
    <param>upper Upper endpoint.</param>
    <throws>NumberIsTooLargeException if {@code lower &gt;= upper}.</throws>
  </javadoc>
  <method type="void" name="verifyInterval" />
  <javadoc>
    <text>Check that {@code lower &lt; initial &lt; upper}.</text>
    <param>lower Lower endpoint.</param>
    <param>initial Initial value.</param>
    <param>upper Upper endpoint.</param>
    <throws>NumberIsTooLargeException if {@code lower &gt;= initial} or{@code initial &gt;= upper}.</throws>
  </javadoc>
  <method type="void" name="verifySequence" />
  <javadoc>
    <text>Check that the endpoints specify an interval and the function takes
 * opposite signs at the endpoints.</text>
    <param>lower Lower endpoint.</param>
    <param>upper Upper endpoint.</param>
    <throws>NullArgumentException if the function has not been set.</throws>
    <throws>NoBracketingException if the function has the same sign at
 * the endpoints.</throws>
  </javadoc>
  <method type="void" name="verifyBracketing" />
  <javadoc>
    <text>Increment the evaluation count by one.
 * Method {@link #computeObjectiveValue(double)} calls this method internally.
 * It is provided for subclasses that do not exclusively use{@code computeObjectiveValue} to solve the function.
 * See e.g. {@link AbstractUnivariateDifferentiableSolver}.</text>
    <throws>TooManyEvaluationsException when the allowed number of function
 * evaluations has been exhausted.</throws>
  </javadoc>
  <method type="void" name="incrementEvaluationCount">
    <scope />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
