<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractRandomGenerator">
  <javadoc>
    <text>Abstract class implementing the {@link RandomGenerator} interface.
 * Default implementations for all methods other than {@link #nextDouble()} and{@link #setSeed(long)} are provided.
 * &lt;p&gt;
 * All data generation methods are based on {@code code nextDouble()}.
 * Concrete implementations &lt;strong&gt;must&lt;/strong&gt; override
 * this method and &lt;strong&gt;should&lt;/strong&gt; provide better / more
 * performant implementations of the other methods if the underlying PRNG
 * supplies them.&lt;/p&gt;</text>
    <since>1.1</since>
    <version>$Id: AbstractRandomGenerator.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Cached random normal value.  The default implementation for{@link #nextGaussian} generates pairs of values and this field caches the
 * second value so that the full algorithm is not executed for every
 * activation.  The value {@code Double.NaN} signals that there is
 * no cached value.  Use {@link #clear} to clear the cached value.</text>
  </javadoc>
  <declaration type="double" name="cachedNormalDeviate" />
  <javadoc>
    <text>Construct a RandomGenerator.</text>
  </javadoc>
  <method type="constructor" name="AbstractRandomGenerator" />
  <javadoc>
    <text>Clears the cache used by the default implementation of{@link #nextGaussian}. Implementations that do not override the
 * default implementation of {@code nextGaussian} should call this
 * method in the implementation of {@link #setSeed(long)}</text>
  </javadoc>
  <method type="void" name="clear" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setSeed" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setSeed">
    <declaration type="long" name="prime" />
    <declaration type="long" name="combined" />
    <scope />
    <comment>the following number is the largest prime that fits in 32 bits (it is 2^32 - 5)</comment>
  </method>
  <method name="setSeed" type="void" />
  <javadoc>
    <text>Sets the seed of the underlying random number generator using a{@code long} seed.  Sequences of values generated starting with the
 * same seeds should be identical.
 * &lt;p&gt;
 * Implementations that do not override the default implementation of{@code nextGaussian} should include a call to {@link #clear} in the
 * implementation of this method.&lt;/p&gt;</text>
    <param>seed the seed value</param>
  </javadoc>
  <javadoc>
    <text>Generates random bytes and places them into a user-supplied
 * byte array.  The number of random bytes produced is equal to
 * the length of the byte array.
 * &lt;p&gt;
 * The default implementation fills the array with bytes extracted from
 * random integers generated using {@link #nextInt}.&lt;/p&gt;</text>
    <param>bytes the non-null byte array in which to put the
 * random bytes</param>
  </javadoc>
  <method type="void" name="nextBytes">
    <declaration type="int" name="bytesOut" />
    <scope>
      <declaration type="int" name="randInt" />
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Returns the next pseudorandom, uniformly distributed {@code int}value from this random number generator's sequence.
 * All 2&lt;font size="-1"&gt;&lt;sup&gt;32&lt;/sup&gt;&lt;/font&gt; possible {@code int} values
 * should be produced with  (approximately) equal probability.
 * &lt;p&gt;
 * The default implementation provided here returns
 * &lt;pre&gt;
 * &lt;code&gt;(int) (nextDouble() * Integer.MAX_VALUE)&lt;/code&gt;
 * &lt;/pre&gt;&lt;/p&gt;</text>
    <return>the next pseudorandom, uniformly distributed {@code int}value from this random number generator's sequence</return>
  </javadoc>
  <method type="int" name="nextInt" />
  <javadoc>
    <text>Returns a pseudorandom, uniformly distributed {@code int} value
 * between 0 (inclusive) and the specified value (exclusive), drawn from
 * this random number generator's sequence.
 * &lt;p&gt;
 * The default implementation returns
 * &lt;pre&gt;
 * &lt;code&gt;(int) (nextDouble() * n&lt;/code&gt;
 * &lt;/pre&gt;&lt;/p&gt;</text>
    <param>n the bound on the random number to be returned.  Must be
 * positive.</param>
    <return>a pseudorandom, uniformly distributed {@code int}value between 0 (inclusive) and n (exclusive).</return>
    <throws>NotStrictlyPositiveException if {@code n &lt;= 0}.</throws>
  </javadoc>
  <method type="int" name="nextInt">
    <scope />
    <declaration type="int" name="result" />
  </method>
  <javadoc>
    <text>Returns the next pseudorandom, uniformly distributed {@code long}value from this random number generator's sequence.  All
 * 2&lt;font size="-1"&gt;&lt;sup&gt;64&lt;/sup&gt;&lt;/font&gt; possible {@code long} values
 * should be produced with (approximately) equal probability.
 * &lt;p&gt;
 * The default implementation returns
 * &lt;pre&gt;
 * &lt;code&gt;(long) (nextDouble() * Long.MAX_VALUE)&lt;/code&gt;
 * &lt;/pre&gt;&lt;/p&gt;</text>
    <return>the next pseudorandom, uniformly distributed {@code long}value from this random number generator's sequence</return>
  </javadoc>
  <method type="long" name="nextLong" />
  <javadoc>
    <text>Returns the next pseudorandom, uniformly distributed{@code boolean} value from this random number generator's
 * sequence.
 * &lt;p&gt;
 * The default implementation returns
 * &lt;pre&gt;
 * &lt;code&gt;nextDouble() &lt;= 0.5&lt;/code&gt;
 * &lt;/pre&gt;&lt;/p&gt;</text>
    <return>the next pseudorandom, uniformly distributed{@code boolean} value from this random number generator's
 * sequence</return>
  </javadoc>
  <method type="boolean" name="nextBoolean" />
  <javadoc>
    <text>Returns the next pseudorandom, uniformly distributed {@code float}value between {@code 0.0} and {@code 1.0} from this random
 * number generator's sequence.
 * &lt;p&gt;
 * The default implementation returns
 * &lt;pre&gt;
 * &lt;code&gt;(float) nextDouble() &lt;/code&gt;
 * &lt;/pre&gt;&lt;/p&gt;</text>
    <return>the next pseudorandom, uniformly distributed {@code float}value between {@code 0.0} and {@code 1.0} from this
 * random number generator's sequence</return>
  </javadoc>
  <method type="float" name="nextFloat" />
  <method name="nextDouble" type="double" />
  <javadoc>
    <text>Returns the next pseudorandom, uniformly distributed{@code double} value between {@code 0.0} and{@code 1.0} from this random number generator's sequence.
 * &lt;p&gt;
 * This method provides the underlying source of random data used by the
 * other methods.&lt;/p&gt;</text>
    <return>the next pseudorandom, uniformly distributed{@code double} value between {@code 0.0} and{@code 1.0} from this random number generator's sequence</return>
  </javadoc>
  <javadoc>
    <text>Returns the next pseudorandom, Gaussian ("normally") distributed{@code double} value with mean {@code 0.0} and standard
 * deviation {@code 1.0} from this random number generator's sequence.
 * &lt;p&gt;
 * The default implementation uses the &lt;em&gt;Polar Method&lt;/em&gt;
 * due to G.E.P. Box, M.E. Muller and G. Marsaglia, as described in
 * D. Knuth, &lt;u&gt;The Art of Computer Programming&lt;/u&gt;, 3.4.1C.&lt;/p&gt;
 * &lt;p&gt;
 * The algorithm generates a pair of independent random values.  One of
 * these is cached for reuse, so the full algorithm is not executed on each
 * activation.  Implementations that do not override this method should
 * make sure to call {@link #clear} to clear the cached value in the
 * implementation of {@link #setSeed(long)}.&lt;/p&gt;</text>
    <return>the next pseudorandom, Gaussian ("normally") distributed{@code double} value with mean {@code 0.0} and
 * standard deviation {@code 1.0} from this random number
 * generator's sequence</return>
  </javadoc>
  <method type="double" name="nextGaussian">
    <scope>
      <declaration type="double" name="dev" />
    </scope>
    <declaration type="double" name="v1" />
    <declaration type="double" name="v2" />
    <declaration type="double" name="s" />
    <scope />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
