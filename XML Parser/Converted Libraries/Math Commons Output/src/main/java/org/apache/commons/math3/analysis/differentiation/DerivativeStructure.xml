<?xml version="1.0" encoding="UTF-8"?>
<class name="DerivativeStructure">
  <javadoc>
    <text>Class representing both the value and the differentials of a function.
 * &lt;p&gt;This class is the workhorse of the differentiation package.&lt;/p&gt;
 * &lt;p&gt;This class is an implementation of the extension to Rall's
 * numbers described in Dan Kalman's paper &lt;a
 * href="http://www.math.american.edu/People/kalman/pdffiles/mmgautodiff.pdf"&gt;Doubly
 * Recursive Multivariate Automatic Differentiation&lt;/a&gt;, Mathematics Magazine, vol. 75,
 * no. 3, June 2002.&lt;/p&gt;. Rall's numbers are an extension to the real numbers used
 * throughout mathematical expressions; they hold the derivative together with the
 * value of a function. Dan Kalman's derivative structures hold all partial derivatives
 * up to any specified order, with respect to any number of free parameters. Rall's
 * numbers therefore can be seen as derivative structures for order one derivative and
 * one free parameter, and real numbers can be seen as derivative structures with zero
 * order derivative and no free parameters.&lt;/p&gt;
 * &lt;p&gt;{@link DerivativeStructure} instances can be used directly thanks to
 * the arithmetic operators to the mathematical functions provided as static
 * methods by this class (+, -, *, /, %, sin, cos ...).&lt;/p&gt;
 * &lt;p&gt;Implementing complex expressions by hand using these classes is
 * a tedious and error-prone task but has the advantage of having no limitation
 * on the derivation order despite no requiring users to compute the derivatives by
 * themselves. Implementing complex expression can also be done by developing computation
 * code using standard primitive double values and to use {@link UnivariateFunctionDifferentiator differentiators} to create the {@link DerivativeStructure}-based instances. This method is simpler but may be limited in
 * the accuracy and derivation orders and may be computationally intensive (this is
 * typically the case for {@link FiniteDifferencesDifferentiator finite differences
 * differentiator}.&lt;/p&gt;
 * &lt;p&gt;Instances of this class are guaranteed to be immutable.&lt;/p&gt;</text>
    <see>DSCompiler</see>
    <version>$Id: DerivativeStructure.java 1462423 2013-03-29 07:25:18Z luc $</version>
    <since>3.1</since>
  </javadoc>
  <javadoc>
    <text>Serializable UID.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Compiler for the current dimensions.</text>
  </javadoc>
  <declaration type="DSCompiler" name="compiler" />
  <javadoc>
    <text>Combined array holding all values.</text>
  </javadoc>
  <declaration type="double[]" name="data" />
  <javadoc>
    <text>Build an instance with all values and derivatives set to 0.</text>
    <param>compiler compiler to use for computation</param>
  </javadoc>
  <method type="constructor" name="DerivativeStructure" />
  <javadoc>
    <text>Build an instance with all values and derivatives set to 0.</text>
    <param>parameters number of free parameters</param>
    <param>order derivation order</param>
    <throws>NumberIsTooLargeException if order is too large</throws>
  </javadoc>
  <method type="constructor" name="DerivativeStructure" />
  <javadoc>
    <text>Build an instance representing a constant value.</text>
    <param>parameters number of free parameters</param>
    <param>order derivation order</param>
    <param>value value of the constant</param>
    <throws>NumberIsTooLargeException if order is too large</throws>
    <see>#DerivativeStructure(int,int,int,double)</see>
  </javadoc>
  <method type="constructor" name="DerivativeStructure" />
  <javadoc>
    <text>Build an instance representing a variable.
 * &lt;p&gt;Instances built using this constructor are considered
 * to be the free variables with respect to which differentials
 * are computed. As such, their differential with respect to
 * themselves is +1.&lt;/p&gt;</text>
    <param>parameters number of free parameters</param>
    <param>order derivation order</param>
    <param>index index of the variable (from 0 to {@code parameters - 1})</param>
    <param>value value of the variable</param>
    <exception>NumberIsTooLargeException if {@code index &gt;= parameters}.</exception>
    <see>#DerivativeStructure(int,int,double)</see>
  </javadoc>
  <method type="constructor" name="DerivativeStructure">
    <scope />
    <scope />
    <comment>the derivative of the variable with respect to itself is 1.</comment>
  </method>
  <javadoc>
    <text>Linear combination constructor.
 * The derivative structure built will be a1 * ds1 + a2 * ds2</text>
    <param>a1 first scale factor</param>
    <param>ds1 first base (unscaled) derivative structure</param>
    <param>a2 second scale factor</param>
    <param>ds2 second base (unscaled) derivative structure</param>
    <exception>DimensionMismatchException if number of free parameters or orders are inconsistent</exception>
  </javadoc>
  <method type="constructor" name="DerivativeStructure" />
  <javadoc>
    <text>Linear combination constructor.
 * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3</text>
    <param>a1 first scale factor</param>
    <param>ds1 first base (unscaled) derivative structure</param>
    <param>a2 second scale factor</param>
    <param>ds2 second base (unscaled) derivative structure</param>
    <param>a3 third scale factor</param>
    <param>ds3 third base (unscaled) derivative structure</param>
    <exception>DimensionMismatchException if number of free parameters or orders are inconsistent</exception>
  </javadoc>
  <method type="constructor" name="DerivativeStructure" />
  <javadoc>
    <text>Linear combination constructor.
 * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4</text>
    <param>a1 first scale factor</param>
    <param>ds1 first base (unscaled) derivative structure</param>
    <param>a2 second scale factor</param>
    <param>ds2 second base (unscaled) derivative structure</param>
    <param>a3 third scale factor</param>
    <param>ds3 third base (unscaled) derivative structure</param>
    <param>a4 fourth scale factor</param>
    <param>ds4 fourth base (unscaled) derivative structure</param>
    <exception>DimensionMismatchException if number of free parameters or orders are inconsistent</exception>
  </javadoc>
  <method type="constructor" name="DerivativeStructure" />
  <javadoc>
    <text>Build an instance from all its derivatives.</text>
    <param>parameters number of free parameters</param>
    <param>order derivation order</param>
    <param>derivatives derivatives sorted according to{@link DSCompiler#getPartialDerivativeIndex(int...)}</param>
    <exception>DimensionMismatchException if derivatives array does not match the{@link DSCompiler#getSize() size} expected by the compiler</exception>
    <throws>NumberIsTooLargeException if order is too large</throws>
    <see>#getAllDerivatives()</see>
  </javadoc>
  <method type="constructor" name="DerivativeStructure">
    <scope />
  </method>
  <javadoc>
    <text>Copy constructor.</text>
    <param>ds instance to copy</param>
  </javadoc>
  <method type="constructor" name="DerivativeStructure" />
  <javadoc>
    <text>Get the number of free parameters.</text>
    <return>number of free parameters</return>
  </javadoc>
  <method type="int" name="getFreeParameters" />
  <javadoc>
    <text>Get the derivation order.</text>
    <return>derivation order</return>
  </javadoc>
  <method type="int" name="getOrder" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="double" name="getReal" />
  <javadoc>
    <text>Get the value part of the derivative structure.</text>
    <return>value part of the derivative structure</return>
    <see>#getPartialDerivative(int...)</see>
  </javadoc>
  <method type="double" name="getValue" />
  <javadoc>
    <text>Get a partial derivative.</text>
    <param>orders derivation orders with respect to each variable (if all orders are 0,
 * the value is returned)</param>
    <return>partial derivative</return>
    <see>#getValue()</see>
    <exception>DimensionMismatchException if the numbers of variables does not
 * match the instance</exception>
    <exception>NumberIsTooLargeException if sum of derivation orders is larger
 * than the instance limits</exception>
  </javadoc>
  <method type="double" name="getPartialDerivative" />
  <javadoc>
    <text>Get all partial derivatives.</text>
    <return>a fresh copy of partial derivatives, in an array sorted according to{@link DSCompiler#getPartialDerivativeIndex(int...)}</return>
  </javadoc>
  <method type="double[]" name="getAllDerivatives" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="add">
    <declaration type="DerivativeStructure" name="ds" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
  </javadoc>
  <method type="DerivativeStructure" name="add">
    <declaration type="DerivativeStructure" name="ds" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="subtract" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
  </javadoc>
  <method type="DerivativeStructure" name="subtract">
    <declaration type="DerivativeStructure" name="ds" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="DerivativeStructure" name="multiply" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="multiply">
    <declaration type="DerivativeStructure" name="ds" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
  </javadoc>
  <method type="DerivativeStructure" name="multiply">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="divide">
    <declaration type="DerivativeStructure" name="ds" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
  </javadoc>
  <method type="DerivativeStructure" name="divide">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="DerivativeStructure" name="remainder">
    <declaration type="DerivativeStructure" name="ds" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="remainder">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="DerivativeStructure" name="negate">
    <declaration type="DerivativeStructure" name="ds" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="abs">
    <scope />
    <scope />
    <comment>we use the bits representation to also handle -0.0</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="ceil" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="floor" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="rint" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="long" name="round" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="signum" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="copySign">
    <declaration type="long" name="m" />
    <declaration type="long" name="s" />
    <scope />
    <comment>Sign is currently OK</comment>
    <comment>flip sign</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="copySign">
    <declaration type="long" name="m" />
    <declaration type="long" name="s" />
    <scope />
    <comment>Sign is currently OK</comment>
    <comment>flip sign</comment>
  </method>
  <javadoc>
    <text>Return the exponent of the instance value, removing the bias.
 * &lt;p&gt;
 * For double numbers of the form 2&lt;sup&gt;x&lt;/sup&gt;, the unbiased
 * exponent is exactly x.
 * &lt;/p&gt;</text>
    <return>exponent for instance in IEEE754 representation, without bias</return>
  </javadoc>
  <method type="int" name="getExponent" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="scalb">
    <declaration type="DerivativeStructure" name="ds" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="hypot">
    <scope />
    <scope />
    <scope>
      <declaration type="int" name="expX" />
      <declaration type="int" name="expY" />
      <scope />
      <scope />
      <scope>
        <declaration type="int" name="middleExp" />
        <declaration type="DerivativeStructure" name="scaledX" />
        <declaration type="DerivativeStructure" name="scaledY" />
        <declaration type="DerivativeStructure" name="scaledH" />
      </scope>
    </scope>
    <comment>y is neglectible with respect to x</comment>
    <comment>x is neglectible with respect to y</comment>
    <comment>find an intermediate scale to avoid both overflow and underflow</comment>
    <comment>scale parameters without losing precision</comment>
    <comment>compute scaled hypotenuse</comment>
    <comment>remove scaling</comment>
  </method>
  <javadoc>
    <text>Returns the hypotenuse of a triangle with sides {@code x} and {@code y}- sqrt(&lt;i&gt;x&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+&lt;i&gt;y&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)&lt;br/&gt;
 * avoiding intermediate overflow or underflow.
 * &lt;ul&gt;
 * &lt;li&gt; If either argument is infinite, then the result is positive infinity.&lt;/li&gt;
 * &lt;li&gt; else, if either argument is NaN then the result is NaN.&lt;/li&gt;
 * &lt;/ul&gt;</text>
    <param>x a value</param>
    <param>y a value</param>
    <return>sqrt(&lt;i&gt;x&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+&lt;i&gt;y&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)</return>
    <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="hypot" />
  <javadoc>
    <text>Compute composition of the instance by a univariate function.</text>
    <param>f array of value and derivatives of the function at
 * the current point (i.e. [f({@link #getValue()}),
 * f'({@link #getValue()}), f''({@link #getValue()})...]).</param>
    <return>f(this)</return>
    <exception>DimensionMismatchException if the number of derivatives
 * in the array is not equal to {@link #getOrder() order} + 1</exception>
  </javadoc>
  <method type="DerivativeStructure" name="compose">
    <scope />
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="DerivativeStructure" name="reciprocal">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="sqrt" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="cbrt" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="rootN">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Field&lt;DerivativeStructure&gt;" name="getField">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="DerivativeStructure" name="getZero" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="DerivativeStructure" name="getOne" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="Class&lt;? extends FieldElement&lt;DerivativeStructure&gt;&gt;" name="getRuntimeClass" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="pow">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="pow">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="pow">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="exp">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="expm1">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="log">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="log1p">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>Base 10 logarithm.</text>
    <return>base 10 logarithm of the instance</return>
  </javadoc>
  <method type="DerivativeStructure" name="log10">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="cos">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="sin">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="tan">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="acos">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="asin">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="atan">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="atan2">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>Two arguments arc tangent operation.</text>
    <param>y first argument of the arc tangent</param>
    <param>x second argument of the arc tangent</param>
    <return>atan2(y, x)</return>
    <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="atan2" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="cosh">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="sinh">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="tanh">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="acosh">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="asinh">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="atanh">
    <declaration type="DerivativeStructure" name="result" />
  </method>
  <javadoc>
    <text>Convert radians to degrees, with error of less than 0.5 ULP</text>
    <return>instance converted into degrees</return>
  </javadoc>
  <method type="DerivativeStructure" name="toDegrees">
    <declaration type="DerivativeStructure" name="ds" />
    <scope />
  </method>
  <javadoc>
    <text>Convert degrees to radians, with error of less than 0.5 ULP</text>
    <return>instance converted into radians</return>
  </javadoc>
  <method type="DerivativeStructure" name="toRadians">
    <declaration type="DerivativeStructure" name="ds" />
    <scope />
  </method>
  <javadoc>
    <text>Evaluate Taylor expansion a derivative structure.</text>
    <param>delta parameters offsets (&amp;Delta;x, &amp;Delta;y, ...)</param>
    <return>value of the Taylor expansion at x + &amp;Delta;x, y + &amp;Delta;y, ...</return>
    <throws>MathArithmeticException if factorials becomes too large</throws>
  </javadoc>
  <method type="double" name="taylor" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="linearCombination">
    <declaration type="double[]" name="aDouble" />
    <scope />
    <declaration type="double[]" name="bDouble" />
    <scope />
    <declaration type="double" name="accurateValue" />
    <declaration type="DerivativeStructure" name="simpleValue" />
    <scope />
    <declaration type="double[]" name="all" />
    <comment>compute an accurate value, taking care of cancellations</comment>
    <comment>compute a simple value, with all partial derivatives</comment>
    <comment>create a result with accurate value and all derivatives (not necessarily as accurate as the value)</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="linearCombination">
    <declaration type="double[]" name="bDouble" />
    <scope />
    <declaration type="double" name="accurateValue" />
    <declaration type="DerivativeStructure" name="simpleValue" />
    <scope />
    <declaration type="double[]" name="all" />
    <comment>compute an accurate value, taking care of cancellations</comment>
    <comment>compute a simple value, with all partial derivatives</comment>
    <comment>create a result with accurate value and all derivatives (not necessarily as accurate as the value)</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="linearCombination">
    <declaration type="double" name="accurateValue" />
    <declaration type="DerivativeStructure" name="simpleValue" />
    <declaration type="double[]" name="all" />
    <comment>compute an accurate value, taking care of cancellations</comment>
    <comment>compute a simple value, with all partial derivatives</comment>
    <comment>create a result with accurate value and all derivatives (not necessarily as accurate as the value)</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="linearCombination">
    <declaration type="double" name="accurateValue" />
    <declaration type="DerivativeStructure" name="simpleValue" />
    <declaration type="double[]" name="all" />
    <comment>compute an accurate value, taking care of cancellations</comment>
    <comment>compute a simple value, with all partial derivatives</comment>
    <comment>create a result with accurate value and all derivatives (not necessarily as accurate as the value)</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="linearCombination">
    <declaration type="double" name="accurateValue" />
    <declaration type="DerivativeStructure" name="simpleValue" />
    <declaration type="double[]" name="all" />
    <comment>compute an accurate value, taking care of cancellations</comment>
    <comment>compute a simple value, with all partial derivatives</comment>
    <comment>create a result with accurate value and all derivatives (not necessarily as accurate as the value)</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="linearCombination">
    <declaration type="double" name="accurateValue" />
    <declaration type="DerivativeStructure" name="simpleValue" />
    <declaration type="double[]" name="all" />
    <comment>compute an accurate value, taking care of cancellations</comment>
    <comment>compute a simple value, with all partial derivatives</comment>
    <comment>create a result with accurate value and all derivatives (not necessarily as accurate as the value)</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="linearCombination">
    <declaration type="double" name="accurateValue" />
    <declaration type="DerivativeStructure" name="simpleValue" />
    <declaration type="double[]" name="all" />
    <comment>compute an accurate value, taking care of cancellations</comment>
    <comment>compute a simple value, with all partial derivatives</comment>
    <comment>create a result with accurate value and all derivatives (not necessarily as accurate as the value)</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
    <since>3.2</since>
  </javadoc>
  <method type="DerivativeStructure" name="linearCombination">
    <declaration type="double" name="accurateValue" />
    <declaration type="DerivativeStructure" name="simpleValue" />
    <declaration type="double[]" name="all" />
    <comment>compute an accurate value, taking care of cancellations</comment>
    <comment>compute a simple value, with all partial derivatives</comment>
    <comment>create a result with accurate value and all derivatives (not necessarily as accurate as the value)</comment>
  </method>
  <javadoc>
    <text>Test for the equality of two derivative structures.
 * &lt;p&gt;
 * Derivative structures are considered equal if they have the same number
 * of free parameters, the same derivation order, and the same derivatives.
 * &lt;/p&gt;</text>
    <param>other Object to test for equality to this</param>
    <return>true if two derivative structures are equal</return>
    <since>3.2</since>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope>
      <declaration type="DerivativeStructure" name="rhs" />
    </scope>
  </method>
  <javadoc>
    <text>Get a hashCode for the derivative structure.</text>
    <return>a hash code value for this object</return>
    <since>3.2</since>
  </javadoc>
  <method type="int" name="hashCode" />
  <javadoc>
    <text>Replace the instance with a data transfer object for serialization.</text>
    <return>data transfer object that will be serialized</return>
  </javadoc>
  <method type="Object" name="writeReplace" />
  <javadoc>
    <text>Internal class used only for serialization.</text>
  </javadoc>
  <javadoc>
    <text>Serializable UID.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Number of variables.</text>
    <serial />
  </javadoc>
  <declaration type="int" name="variables" />
  <javadoc>
    <text>Derivation order.</text>
    <serial />
  </javadoc>
  <declaration type="int" name="order" />
  <javadoc>
    <text>Partial derivatives.</text>
    <serial />
  </javadoc>
  <declaration type="double[]" name="data" />
  <javadoc>
    <text>Simple constructor.</text>
    <param>variables number of variables</param>
    <param>order derivation order</param>
    <param>data partial derivatives</param>
  </javadoc>
  <method type="constructor" name="DataTransferObject" />
  <javadoc>
    <text>Replace the deserialized data transfer object with a {@link DerivativeStructure}.</text>
    <return>replacement {@link DerivativeStructure}</return>
  </javadoc>
  <method type="Object" name="readResolve" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
