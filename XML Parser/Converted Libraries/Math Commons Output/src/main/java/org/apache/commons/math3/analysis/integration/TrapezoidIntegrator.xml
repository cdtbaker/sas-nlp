<?xml version="1.0" encoding="UTF-8"?>
<class name="TrapezoidIntegrator">
  <javadoc>
    <text>Implements the &lt;a href="http://mathworld.wolfram.com/TrapezoidalRule.html"&gt;
 * Trapezoid Rule&lt;/a&gt; for integration of real univariate functions. For
 * reference, see &lt;b&gt;Introduction to Numerical Analysis&lt;/b&gt;, ISBN 038795452X,
 * chapter 3.
 * &lt;p&gt;
 * The function should be integrable.&lt;/p&gt;</text>
    <version>$Id: TrapezoidIntegrator.java 1455194 2013-03-11 15:45:54Z luc $</version>
    <since>1.2</since>
  </javadoc>
  <javadoc>
    <text>Maximum number of iterations for trapezoid.</text>
  </javadoc>
  <declaration type="int" name="TRAPEZOID_MAX_ITERATIONS_COUNT" />
  <javadoc>
    <text>Intermediate result.</text>
  </javadoc>
  <declaration type="double" name="s" />
  <javadoc>
    <text>Build a trapezoid integrator with given accuracies and iterations counts.</text>
    <param>relativeAccuracy relative accuracy of the result</param>
    <param>absoluteAccuracy absolute accuracy of the result</param>
    <param>minimalIterationCount minimum number of iterations</param>
    <param>maximalIterationCount maximum number of iterations
 * (must be less than or equal to {@link #TRAPEZOID_MAX_ITERATIONS_COUNT}</param>
    <exception>NotStrictlyPositiveException if minimal number of iterations
 * is not strictly positive</exception>
    <exception>NumberIsTooSmallException if maximal number of iterations
 * is lesser than or equal to the minimal number of iterations</exception>
    <exception>NumberIsTooLargeException if maximal number of iterations
 * is greater than {@link #TRAPEZOID_MAX_ITERATIONS_COUNT}</exception>
  </javadoc>
  <method type="constructor" name="TrapezoidIntegrator">
    <scope />
  </method>
  <javadoc>
    <text>Build a trapezoid integrator with given iteration counts.</text>
    <param>minimalIterationCount minimum number of iterations</param>
    <param>maximalIterationCount maximum number of iterations
 * (must be less than or equal to {@link #TRAPEZOID_MAX_ITERATIONS_COUNT}</param>
    <exception>NotStrictlyPositiveException if minimal number of iterations
 * is not strictly positive</exception>
    <exception>NumberIsTooSmallException if maximal number of iterations
 * is lesser than or equal to the minimal number of iterations</exception>
    <exception>NumberIsTooLargeException if maximal number of iterations
 * is greater than {@link #TRAPEZOID_MAX_ITERATIONS_COUNT}</exception>
  </javadoc>
  <method type="constructor" name="TrapezoidIntegrator">
    <scope />
  </method>
  <javadoc>
    <text>Construct a trapezoid integrator with default settings.
 * (max iteration count set to {@link #TRAPEZOID_MAX_ITERATIONS_COUNT})</text>
  </javadoc>
  <method type="constructor" name="TrapezoidIntegrator" />
  <javadoc>
    <text>Compute the n-th stage integral of trapezoid rule. This function
 * should only be called by API &lt;code&gt;integrate()&lt;/code&gt; in the package.
 * To save time it does not verify arguments - caller does.
 * &lt;p&gt;
 * The interval is divided equally into 2^n sections rather than an
 * arbitrary m sections because this configuration can best utilize the
 * already computed values.&lt;/p&gt;</text>
    <param>baseIntegrator integrator holding integration parameters</param>
    <param>n the stage of 1/2 refinement, n = 0 is no refinement</param>
    <return>the value of n-th stage integral</return>
    <throws>TooManyEvaluationsException if the maximal number of evaluations
 * is exceeded.</throws>
  </javadoc>
  <method type="double" name="stage">
    <scope>
      <declaration type="double" name="max" />
      <declaration type="double" name="min" />
    </scope>
    <scope>
      <declaration type="long" name="np" />
      <declaration type="double" name="sum" />
      <declaration type="double" name="max" />
      <declaration type="double" name="min" />
      <declaration type="double" name="spacing" />
      <declaration type="double" name="x" />
      <scope />
    </scope>
    <comment>number of new points in this stage</comment>
    <comment>spacing between adjacent new points</comment>
    <comment>the first new point</comment>
    <comment>add the new sum to previously calculated result</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="doIntegrate">
    <declaration type="double" name="oldt" />
    <scope>
      <declaration type="int" name="i" />
      <declaration type="double" name="t" />
      <scope>
        <declaration type="double" name="delta" />
        <declaration type="double" name="rLimit" />
        <scope />
      </scope>
    </scope>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
