<?xml version="1.0" encoding="UTF-8"?>
<class name="Line">
  <javadoc>
    <text>The class represent lines in a three dimensional space.
 * &lt;p&gt;Each oriented line is intrinsically associated with an abscissa
 * which is a coordinate on the line. The point at abscissa 0 is the
 * orthogonal projection of the origin on the line, another equivalent
 * way to express this is to say that it is the point of the line
 * which is closest to the origin. Abscissa increases in the line
 * direction.&lt;/p&gt;</text>
    <version>$Id: Line.java 1453218 2013-03-06 08:53:28Z luc $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Line direction.</text>
  </javadoc>
  <declaration type="Vector3D" name="direction" />
  <javadoc>
    <text>Line point closest to the origin.</text>
  </javadoc>
  <declaration type="Vector3D" name="zero" />
  <javadoc>
    <text>Build a line from two points.</text>
    <param>p1 first point belonging to the line (this can be any point)</param>
    <param>p2 second point belonging to the line (this can be any point, different from p1)</param>
    <exception>MathIllegalArgumentException if the points are equal</exception>
  </javadoc>
  <method type="constructor" name="Line" />
  <javadoc>
    <text>Copy constructor.
 * &lt;p&gt;The created instance is completely independent from the
 * original instance, it is a deep copy.&lt;/p&gt;</text>
    <param>line line to copy</param>
  </javadoc>
  <method type="constructor" name="Line" />
  <javadoc>
    <text>Reset the instance as if built from two points.</text>
    <param>p1 first point belonging to the line (this can be any point)</param>
    <param>p2 second point belonging to the line (this can be any point, different from p1)</param>
    <exception>MathIllegalArgumentException if the points are equal</exception>
  </javadoc>
  <method type="void" name="reset">
    <declaration type="Vector3D" name="delta" />
    <declaration type="double" name="norm2" />
    <scope />
  </method>
  <javadoc>
    <text>Get a line with reversed direction.</text>
    <return>a new instance, with reversed direction</return>
  </javadoc>
  <method type="Line" name="revert">
    <declaration type="Line" name="reverted" />
  </method>
  <javadoc>
    <text>Get the normalized direction vector.</text>
    <return>normalized direction vector</return>
  </javadoc>
  <method type="Vector3D" name="getDirection" />
  <javadoc>
    <text>Get the line point closest to the origin.</text>
    <return>line point closest to the origin</return>
  </javadoc>
  <method type="Vector3D" name="getOrigin" />
  <javadoc>
    <text>Get the abscissa of a point with respect to the line.
 * &lt;p&gt;The abscissa is 0 if the projection of the point and the
 * projection of the frame origin on the line are the same
 * point.&lt;/p&gt;</text>
    <param>point point to check</param>
    <return>abscissa of the point</return>
  </javadoc>
  <method type="double" name="getAbscissa" />
  <javadoc>
    <text>Get one point from the line.</text>
    <param>abscissa desired abscissa for the point</param>
    <return>one point belonging to the line, at specified abscissa</return>
  </javadoc>
  <method type="Vector3D" name="pointAt" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <see>#getAbscissa(Vector3D)</see>
  </javadoc>
  <method type="Vector1D" name="toSubSpace" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <see>#pointAt(double)</see>
  </javadoc>
  <method type="Vector3D" name="toSpace" />
  <javadoc>
    <text>Check if the instance is similar to another line.
 * &lt;p&gt;Lines are considered similar if they contain the same
 * points. This does not mean they are equal since they can have
 * opposite directions.&lt;/p&gt;</text>
    <param>line line to which instance should be compared</param>
    <return>true if the lines are similar</return>
  </javadoc>
  <method type="boolean" name="isSimilarTo">
    <declaration type="double" name="angle" />
  </method>
  <javadoc>
    <text>Check if the instance contains a point.</text>
    <param>p point to check</param>
    <return>true if p belongs to the line</return>
  </javadoc>
  <method type="boolean" name="contains" />
  <javadoc>
    <text>Compute the distance between the instance and a point.</text>
    <param>p to check</param>
    <return>distance between the instance and the point</return>
  </javadoc>
  <method type="double" name="distance">
    <declaration type="Vector3D" name="d" />
    <declaration type="Vector3D" name="n" />
  </method>
  <javadoc>
    <text>Compute the shortest distance between the instance and another line.</text>
    <param>line line to check against the instance</param>
    <return>shortest distance between the instance and the line</return>
  </javadoc>
  <method type="double" name="distance">
    <declaration type="Vector3D" name="normal" />
    <declaration type="double" name="n" />
    <scope />
    <declaration type="double" name="offset" />
    <comment>lines are parallel</comment>
    <comment>signed separation of the two parallel planes that contains the lines</comment>
  </method>
  <javadoc>
    <text>Compute the point of the instance closest to another line.</text>
    <param>line line to check against the instance</param>
    <return>point of the instance closest to another line</return>
  </javadoc>
  <method type="Vector3D" name="closestPoint">
    <declaration type="double" name="cos" />
    <declaration type="double" name="n" />
    <scope />
    <declaration type="Vector3D" name="delta0" />
    <declaration type="double" name="a" />
    <declaration type="double" name="b" />
    <comment>the lines are parallel</comment>
  </method>
  <javadoc>
    <text>Get the intersection point of the instance and another line.</text>
    <param>line other line</param>
    <return>intersection point of the instance and the other line
 * or null if there are no intersection points</return>
  </javadoc>
  <method type="Vector3D" name="intersection">
    <declaration type="Vector3D" name="closest" />
  </method>
  <javadoc>
    <text>Build a sub-line covering the whole line.</text>
    <return>a sub-line covering the whole line</return>
  </javadoc>
  <method type="SubLine" name="wholeLine" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
