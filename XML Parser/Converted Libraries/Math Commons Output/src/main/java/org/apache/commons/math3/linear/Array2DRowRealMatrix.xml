<?xml version="1.0" encoding="UTF-8"?>
<class name="Array2DRowRealMatrix">
  <javadoc>
    <text>Implementation of {@link RealMatrix} using a {@code double[][]} array to
 * store entries.</text>
    <version>$Id: Array2DRowRealMatrix.java 1459082 2013-03-20 22:24:09Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Entries of the matrix.</text>
  </javadoc>
  <declaration type="double" name="data" />
  <javadoc>
    <text>Creates a matrix with no data</text>
  </javadoc>
  <method type="constructor" name="Array2DRowRealMatrix" />
  <javadoc>
    <text>Create a new RealMatrix with the supplied row and column dimensions.</text>
    <param>rowDimension Number of rows in the new matrix.</param>
    <param>columnDimension Number of columns in the new matrix.</param>
    <throws>NotStrictlyPositiveException if the row or column dimension is
 * not positive.</throws>
  </javadoc>
  <method type="constructor" name="Array2DRowRealMatrix" />
  <javadoc>
    <text>Create a new {@code RealMatrix} using the input array as the underlying
 * data array.
 * &lt;p&gt;The input array is copied, not referenced. This constructor has
 * the same effect as calling {@link #Array2DRowRealMatrix(double[][],boolean)}with the second argument set to {@code true}.&lt;/p&gt;</text>
    <param>d Data for the new matrix.</param>
    <throws>DimensionMismatchException if {@code d} is not rectangular.</throws>
    <throws>NoDataException if {@code d} row or column dimension is zero.</throws>
    <throws>NullArgumentException if {@code d} is {@code null}.</throws>
    <see>#Array2DRowRealMatrix(double[][],boolean)</see>
  </javadoc>
  <method type="constructor" name="Array2DRowRealMatrix" />
  <javadoc>
    <text>Create a new RealMatrix using the input array as the underlying
 * data array.
 * If an array is built specially in order to be embedded in a
 * RealMatrix and not used directly, the {@code copyArray} may be
 * set to {@code false}. This will prevent the copying and improve
 * performance as no new array will be built and no data will be copied.</text>
    <param>d Data for new matrix.</param>
    <param>copyArray if {@code true}, the input array will be copied,
 * otherwise it will be referenced.</param>
    <throws>DimensionMismatchException if {@code d} is not rectangular.</throws>
    <throws>NoDataException if {@code d} row or column dimension is zero.</throws>
    <throws>NullArgumentException if {@code d} is {@code null}.</throws>
    <see>#Array2DRowRealMatrix(double[][])</see>
  </javadoc>
  <method type="constructor" name="Array2DRowRealMatrix">
    <scope />
    <scope>
      <scope />
      <declaration type="int" name="nRows" />
      <scope />
      <declaration type="int" name="nCols" />
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Create a new (column) RealMatrix using {@code v} as the
 * data for the unique column of the created matrix.
 * The input array is copied.</text>
    <param>v Column vector holding data for new matrix.</param>
  </javadoc>
  <method type="constructor" name="Array2DRowRealMatrix">
    <declaration type="int" name="nRows" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="createMatrix" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="copy" />
  <javadoc>
    <text>Compute the sum of {@code this} and {@code m}.</text>
    <param>m Matrix to be added.</param>
    <return>{@code this + m}.</return>
    <throws>MatrixDimensionMismatchException if {@code m} is not the same
 * size as {@code this}.</throws>
  </javadoc>
  <method type="Array2DRowRealMatrix" name="add">
    <declaration type="int" name="rowCount" />
    <declaration type="int" name="columnCount" />
    <declaration type="double[][]" name="outData" />
    <scope>
      <declaration type="double[]" name="dataRow" />
      <declaration type="double[]" name="mRow" />
      <declaration type="double[]" name="outDataRow" />
      <scope />
    </scope>
    <comment>Safety check.</comment>
  </method>
  <javadoc>
    <text>Returns {@code this} minus {@code m}.</text>
    <param>m Matrix to be subtracted.</param>
    <return>{@code this - m}</return>
    <throws>MatrixDimensionMismatchException if {@code m} is not the same
 * size as {@code this}.</throws>
  </javadoc>
  <method type="Array2DRowRealMatrix" name="subtract">
    <declaration type="int" name="rowCount" />
    <declaration type="int" name="columnCount" />
    <declaration type="double[][]" name="outData" />
    <scope>
      <declaration type="double[]" name="dataRow" />
      <declaration type="double[]" name="mRow" />
      <declaration type="double[]" name="outDataRow" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns the result of postmultiplying {@code this} by {@code m}.</text>
    <param>m matrix to postmultiply by</param>
    <return>{@code this * m}</return>
    <throws>DimensionMismatchException if{@code columnDimension(this) != rowDimension(m)}</throws>
  </javadoc>
  <method type="Array2DRowRealMatrix" name="multiply">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <declaration type="int" name="nSum" />
    <declaration type="double[][]" name="outData" />
    <declaration type="double[]" name="mCol" />
    <declaration type="double[][]" name="mData" />
    <scope>
      <scope />
      <scope>
        <declaration type="double[]" name="dataRow" />
        <declaration type="double" name="sum" />
        <scope />
      </scope>
    </scope>
    <comment>Will hold a column of "m".</comment>
    <comment>Multiply.</comment>
    <comment>Copy all elements of column "col" of "m" so that</comment>
    <comment>will be in contiguous memory.</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[][]" name="getData" />
  <javadoc>
    <text>Get a reference to the underlying data array.</text>
    <return>2-dimensional array of entries.</return>
  </javadoc>
  <method type="double[][]" name="getDataRef" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setSubMatrix">
    <scope>
      <scope />
      <scope />
      <declaration type="int" name="nRows" />
      <scope />
      <declaration type="int" name="nCols" />
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getEntry" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setEntry" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="addToEntry" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="multiplyEntry" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getRowDimension" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getColumnDimension" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[]" name="operate">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <scope />
    <declaration type="double[]" name="out" />
    <scope>
      <declaration type="double[]" name="dataRow" />
      <declaration type="double" name="sum" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[]" name="preMultiply">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <scope />
    <declaration type="double[]" name="out" />
    <scope>
      <declaration type="double" name="sum" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInRowOrder">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <scope>
      <declaration type="double[]" name="rowI" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInRowOrder">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <scope>
      <declaration type="double[]" name="rowI" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInRowOrder">
    <scope>
      <declaration type="double[]" name="rowI" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInRowOrder">
    <scope>
      <declaration type="double[]" name="rowI" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInColumnOrder">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <scope>
      <scope>
        <declaration type="double[]" name="rowI" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInColumnOrder">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInColumnOrder">
    <scope>
      <scope>
        <declaration type="double[]" name="rowI" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInColumnOrder">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Get a fresh copy of the underlying data array.</text>
    <return>a copy of the underlying data array.</return>
  </javadoc>
  <method type="double[][]" name="copyOut">
    <declaration type="int" name="nRows" />
    <declaration type="double[][]" name="out" />
    <scope />
    <comment>can't copy 2-d array in one shot, otherwise get row references</comment>
  </method>
  <javadoc>
    <text>Replace data with a fresh copy of the input array.</text>
    <param>in Data to copy.</param>
    <throws>NoDataException if the input array is empty.</throws>
    <throws>DimensionMismatchException if the input array is not rectangular.</throws>
    <throws>NullArgumentException if the input array is {@code null}.</throws>
  </javadoc>
  <method type="void" name="copyIn" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
