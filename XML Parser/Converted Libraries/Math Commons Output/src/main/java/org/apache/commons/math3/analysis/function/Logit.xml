<?xml version="1.0" encoding="UTF-8"?>
<class name="Logit">
  <javadoc>
    <text>&lt;a href="http://en.wikipedia.org/wiki/Logit"&gt;
 * Logit&lt;/a&gt; function.
 * It is the inverse of the {@link Sigmoid sigmoid} function.</text>
    <since>3.0</since>
    <version>$Id: Logit.java 1391927 2012-09-30 00:03:30Z erans $</version>
  </javadoc>
  <javadoc>
    <text>Lower bound.</text>
  </javadoc>
  <declaration type="double" name="lo" />
  <javadoc>
    <text>Higher bound.</text>
  </javadoc>
  <declaration type="double" name="hi" />
  <javadoc>
    <text>Usual logit function, where the lower bound is 0 and the higher
 * bound is 1.</text>
  </javadoc>
  <method type="constructor" name="Logit" />
  <javadoc>
    <text>Logit function.</text>
    <param>lo Lower bound of the function domain.</param>
    <param>hi Higher bound of the function domain.</param>
  </javadoc>
  <method type="constructor" name="Logit" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="value" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <deprecated>as of 3.1, replaced by {@link #value(DerivativeStructure)}</deprecated>
  </javadoc>
  <method type="UnivariateFunction" name="derivative" />
  <javadoc>
    <text>Parametric function where the input array contains the parameters of
 * the logit function, ordered as follows:
 * &lt;ul&gt;
 * &lt;li&gt;Lower bound&lt;/li&gt;
 * &lt;li&gt;Higher bound&lt;/li&gt;
 * &lt;/ul&gt;</text>
  </javadoc>
  <javadoc>
    <text>Computes the value of the logit at {@code x}.</text>
    <param>x Value for which the function must be computed.</param>
    <param>param Values of lower bound and higher bounds.</param>
    <return>the value of the function.</return>
    <throws>NullArgumentException if {@code param} is {@code null}.</throws>
    <throws>DimensionMismatchException if the size of {@code param} is
 * not 2.</throws>
  </javadoc>
  <method type="double" name="value" />
  <javadoc>
    <text>Computes the value of the gradient at {@code x}.
 * The components of the gradient vector are the partial
 * derivatives of the function with respect to each of the
 * &lt;em&gt;parameters&lt;/em&gt; (lower bound and higher bound).</text>
    <param>x Value at which the gradient must be computed.</param>
    <param>param Values for lower and higher bounds.</param>
    <return>the gradient vector at {@code x}.</return>
    <throws>NullArgumentException if {@code param} is {@code null}.</throws>
    <throws>DimensionMismatchException if the size of {@code param} is
 * not 2.</throws>
  </javadoc>
  <method type="double[]" name="gradient">
    <declaration type="double" name="lo" />
    <declaration type="double" name="hi" />
  </method>
  <javadoc>
    <text>Validates parameters to ensure they are appropriate for the evaluation of
 * the {@link #value(double,double[])} and {@link #gradient(double,double[])}methods.</text>
    <param>param Values for lower and higher bounds.</param>
    <throws>NullArgumentException if {@code param} is {@code null}.</throws>
    <throws>DimensionMismatchException if the size of {@code param} is
 * not 2.</throws>
  </javadoc>
  <method type="void" name="validateParameters">
    <scope />
    <scope />
  </method>
  <javadoc>
    <param>x Value at which to compute the logit.</param>
    <param>lo Lower bound.</param>
    <param>hi Higher bound.</param>
    <return>the value of the logit function at {@code x}.</return>
    <throws>OutOfRangeException if {@code x &lt; lo} or {@code x &gt; hi}.</throws>
  </javadoc>
  <method type="double" name="value">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.1</since>
    <exception>OutOfRangeException if parameter is outside of function domain</exception>
  </javadoc>
  <method type="DerivativeStructure" name="value">
    <declaration type="double" name="x" />
    <scope />
    <declaration type="double[]" name="f" />
    <scope>
      <scope />
      <scope />
    </scope>
    <scope>
      <declaration type="double" name="invL" />
      <declaration type="double" name="xL" />
      <declaration type="double" name="invH" />
      <declaration type="double" name="xH" />
      <scope />
    </scope>
    <comment>function value</comment>
    <comment>fill the array with infinities</comment>
    <comment>(for x close to lo the signs will flip between -inf and +inf,</comment>
    <comment>for x close to hi the signs will always be +inf)</comment>
    <comment>this is probably overkill, since the call to compose at the end</comment>
    <comment>of the method will transform most infinities into NaN ...</comment>
    <comment>function derivatives</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
