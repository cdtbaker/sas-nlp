<?xml version="1.0" encoding="UTF-8"?>
<class name="LogNormalDistribution">
  <javadoc>
    <text>Implementation of the log-normal (gaussian) distribution.
 * &lt;p&gt;
 * &lt;strong&gt;Parameters:&lt;/strong&gt;{@code X} is log-normally distributed if its natural logarithm {@code log(X)}is normally distributed. The probability distribution function of {@code X}is given by (for {@code x &gt; 0})
 * &lt;/p&gt;
 * &lt;p&gt;{@code exp(-0.5 * ((ln(x) - m) / s)^2) / (s * sqrt(2 * pi) * x)}&lt;/p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;{@code m} is the &lt;em&gt;scale&lt;/em&gt; parameter: this is the mean of the
 * normally distributed natural logarithm of this distribution,&lt;/li&gt;
 * &lt;li&gt;{@code s} is the &lt;em&gt;shape&lt;/em&gt; parameter: this is the standard
 * deviation of the normally distributed natural logarithm of this
 * distribution.
 * &lt;/ul&gt;</text>
    <see>&lt;a href="http://en.wikipedia.org/wiki/Log-normal_distribution"&gt;
 * Log-normal distribution (Wikipedia)&lt;/a&gt;</see>
    <see>&lt;a href="http://mathworld.wolfram.com/LogNormalDistribution.html"&gt;
 * Log Normal distribution (MathWorld)&lt;/a&gt;</see>
    <version>$Id: LogNormalDistribution.java 1422195 2012-12-15 06:45:18Z psteitz $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Default inverse cumulative probability accuracy.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" />
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>&amp;radic;(2 &amp;pi;)</text>
  </javadoc>
  <declaration type="double" name="SQRT2PI" />
  <javadoc>
    <text>&amp;radic;(2)</text>
  </javadoc>
  <declaration type="double" name="SQRT2" />
  <javadoc>
    <text>The scale parameter of this distribution.</text>
  </javadoc>
  <declaration type="double" name="scale" />
  <javadoc>
    <text>The shape parameter of this distribution.</text>
  </javadoc>
  <declaration type="double" name="shape" />
  <javadoc>
    <text>Inverse cumulative probability accuracy.</text>
  </javadoc>
  <declaration type="double" name="solverAbsoluteAccuracy" />
  <javadoc>
    <text>Create a log-normal distribution, where the mean and standard deviation
 * of the {@link NormalDistribution normally distributed} natural
 * logarithm of the log-normal distribution are equal to zero and one
 * respectively. In other words, the scale of the returned distribution is{@code 0}, while its shape is {@code 1}.</text>
  </javadoc>
  <method type="constructor" name="LogNormalDistribution" />
  <javadoc>
    <text>Create a log-normal distribution using the specified scale and shape.</text>
    <param>scale the scale parameter of this distribution</param>
    <param>shape the shape parameter of this distribution</param>
    <throws>NotStrictlyPositiveException if {@code shape &lt;= 0}.</throws>
  </javadoc>
  <method type="constructor" name="LogNormalDistribution" />
  <javadoc>
    <text>Create a log-normal distribution using the specified scale, shape and
 * inverse cumulative distribution accuracy.</text>
    <param>scale the scale parameter of this distribution</param>
    <param>shape the shape parameter of this distribution</param>
    <param>inverseCumAccuracy Inverse cumulative probability accuracy.</param>
    <throws>NotStrictlyPositiveException if {@code shape &lt;= 0}.</throws>
  </javadoc>
  <method type="constructor" name="LogNormalDistribution" />
  <javadoc>
    <text>Creates a log-normal distribution.</text>
    <param>rng Random number generator.</param>
    <param>scale Scale parameter of this distribution.</param>
    <param>shape Shape parameter of this distribution.</param>
    <param>inverseCumAccuracy Inverse cumulative probability accuracy.</param>
    <throws>NotStrictlyPositiveException if {@code shape &lt;= 0}.</throws>
    <since>3.1</since>
  </javadoc>
  <method type="constructor" name="LogNormalDistribution">
    <scope />
  </method>
  <javadoc>
    <text>Returns the scale parameter of this distribution.</text>
    <return>the scale parameter</return>
  </javadoc>
  <method type="double" name="getScale" />
  <javadoc>
    <text>Returns the shape parameter of this distribution.</text>
    <return>the shape parameter</return>
  </javadoc>
  <method type="double" name="getShape" />
  <javadoc>
    <text>{@inheritDoc}For scale {@code m}, and shape {@code s} of this distribution, the PDF
 * is given by
 * &lt;ul&gt;
 * &lt;li&gt;{@code 0} if {@code x &lt;= 0},&lt;/li&gt;
 * &lt;li&gt;{@code exp(-0.5 * ((ln(x) - m) / s)^2) / (s * sqrt(2 * pi) * x)}otherwise.&lt;/li&gt;
 * &lt;/ul&gt;</text>
  </javadoc>
  <method type="double" name="density">
    <scope />
    <declaration type="double" name="x0" />
    <declaration type="double" name="x1" />
  </method>
  <javadoc>
    <text>{@inheritDoc}For scale {@code m}, and shape {@code s} of this distribution, the CDF
 * is given by
 * &lt;ul&gt;
 * &lt;li&gt;{@code 0} if {@code x &lt;= 0},&lt;/li&gt;
 * &lt;li&gt;{@code 0} if {@code ln(x) - m &lt; 0} and {@code m - ln(x) &gt; 40 * s}, as
 * in these cases the actual value is within {@code Double.MIN_VALUE} of 0,
 * &lt;li&gt;{@code 1} if {@code ln(x) - m &gt;= 0} and {@code ln(x) - m &gt; 40 * s},
 * as in these cases the actual value is within {@code Double.MIN_VALUE} of
 * 1,&lt;/li&gt;
 * &lt;li&gt;{@code 0.5 + 0.5 * erf((ln(x) - m) / (s * sqrt(2))} otherwise.&lt;/li&gt;
 * &lt;/ul&gt;</text>
  </javadoc>
  <method type="double" name="cumulativeProbability">
    <scope />
    <declaration type="double" name="dev" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <deprecated>See {@link RealDistribution#cumulativeProbability(double,double)}</deprecated>
  </javadoc>
  <method type="double" name="cumulativeProbability" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="probability">
    <scope />
    <scope />
    <declaration type="double" name="denom" />
    <declaration type="double" name="v0" />
    <declaration type="double" name="v1" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getSolverAbsoluteAccuracy" />
  <javadoc>
    <text>{@inheritDoc}For scale {@code m} and shape {@code s}, the mean is{@code exp(m + s^2 / 2)}.</text>
  </javadoc>
  <method type="double" name="getNumericalMean">
    <declaration type="double" name="s" />
  </method>
  <javadoc>
    <text>{@inheritDoc}For scale {@code m} and shape {@code s}, the variance is{@code (exp(s^2) - 1) * exp(2 * m + s^2)}.</text>
  </javadoc>
  <method type="double" name="getNumericalVariance">
    <declaration type="double" name="s" />
    <declaration type="double" name="ss" />
  </method>
  <javadoc>
    <text>{@inheritDoc}The lower bound of the support is always 0 no matter the parameters.</text>
    <return>lower bound of the support (always 0)</return>
  </javadoc>
  <method type="double" name="getSupportLowerBound" />
  <javadoc>
    <text>{@inheritDoc}The upper bound of the support is always positive infinity
 * no matter the parameters.</text>
    <return>upper bound of the support (always{@code Double.POSITIVE_INFINITY})</return>
  </javadoc>
  <method type="double" name="getSupportUpperBound" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSupportLowerBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSupportUpperBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}The support of this distribution is connected.</text>
    <return>{@code true}</return>
  </javadoc>
  <method type="boolean" name="isSupportConnected" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="sample">
    <declaration type="double" name="n" />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
