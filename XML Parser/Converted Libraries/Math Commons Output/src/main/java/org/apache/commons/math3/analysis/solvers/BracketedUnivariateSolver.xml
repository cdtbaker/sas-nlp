<?xml version="1.0" encoding="UTF-8"?>
<class name="BracketedUnivariateSolver">
  <javadoc>
    <text>Interface for {@link UnivariateSolver (univariate real) root-finding
 * algorithms} that maintain a bracketed solution. There are several advantages
 * to having such root-finding algorithms:
 * &lt;ul&gt;
 * &lt;li&gt;The bracketed solution guarantees that the root is kept within the
 * interval. As such, these algorithms generally also guarantee
 * convergence.&lt;/li&gt;
 * &lt;li&gt;The bracketed solution means that we have the opportunity to only
 * return roots that are greater than or equal to the actual root, or
 * are less than or equal to the actual root. That is, we can control
 * whether under-approximations and over-approximations are{@link AllowedSolution allowed solutions}. Other root-finding
 * algorithms can usually only guarantee that the solution (the root that
 * was found) is around the actual root.&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;p&gt;For backwards compatibility, all root-finding algorithms must have{@link AllowedSolution#ANY_SIDE ANY_SIDE} as default for the allowed
 * solutions.&lt;/p&gt;</text>
    <param>&lt;FUNC&gt;
 *  Type of function to solve.</param>
    <see>AllowedSolution</see>
    <since>3.0</since>
    <version>$Id: BracketedUnivariateSolver.java 1364387 2012-07-22 18:14:11Z tn $</version>
  </javadoc>
  <method name="solve" type="double" />
  <javadoc>
    <text>Solve for a zero in the given interval.
 * A solver may require that the interval brackets a single zero root.
 * Solvers that do require bracketing should be able to handle the case
 * where one of the endpoints is itself a root.</text>
    <param>maxEval Maximum number of evaluations.</param>
    <param>f Function to solve.</param>
    <param>min Lower bound for the interval.</param>
    <param>max Upper bound for the interval.</param>
    <param>allowedSolution The kind of solutions that the root-finding algorithm may
 * accept as solutions.</param>
    <return>A value where the function is zero.</return>
    <throws>org.apache.commons.math3.exception.MathIllegalArgumentExceptionif the arguments do not satisfy the requirements specified by the solver.</throws>
    <throws>org.apache.commons.math3.exception.TooManyEvaluationsException if
 * the allowed number of evaluations is exceeded.</throws>
  </javadoc>
  <method name="solve" type="double" />
  <javadoc>
    <text>Solve for a zero in the given interval, start at {@code startValue}.
 * A solver may require that the interval brackets a single zero root.
 * Solvers that do require bracketing should be able to handle the case
 * where one of the endpoints is itself a root.</text>
    <param>maxEval Maximum number of evaluations.</param>
    <param>f Function to solve.</param>
    <param>min Lower bound for the interval.</param>
    <param>max Upper bound for the interval.</param>
    <param>startValue Start value to use.</param>
    <param>allowedSolution The kind of solutions that the root-finding algorithm may
 * accept as solutions.</param>
    <return>A value where the function is zero.</return>
    <throws>org.apache.commons.math3.exception.MathIllegalArgumentExceptionif the arguments do not satisfy the requirements specified by the solver.</throws>
    <throws>org.apache.commons.math3.exception.TooManyEvaluationsException if
 * the allowed number of evaluations is exceeded.</throws>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
