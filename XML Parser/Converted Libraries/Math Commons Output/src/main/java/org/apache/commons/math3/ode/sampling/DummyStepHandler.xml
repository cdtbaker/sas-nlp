<?xml version="1.0" encoding="UTF-8"?>
<class name="DummyStepHandler">
  <javadoc>
    <text>This class is a step handler that does nothing.
 * &lt;p&gt;This class is provided as a convenience for users who are only
 * interested in the final state of an integration and not in the
 * intermediate steps. Its handleStep method does nothing.&lt;/p&gt;
 * &lt;p&gt;Since this class has no internal state, it is implemented using
 * the Singleton design pattern. This means that only one instance is
 * ever created, which can be retrieved using the getInstance
 * method. This explains why there is no public constructor.&lt;/p&gt;</text>
    <see>StepHandler</see>
    <version>$Id: DummyStepHandler.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>1.2</since>
  </javadoc>
  <javadoc>
    <text>Private constructor.
 * The constructor is private to prevent users from creating
 * instances (Singleton design-pattern).</text>
  </javadoc>
  <method type="constructor" name="DummyStepHandler" />
  <javadoc>
    <text>Get the only instance.</text>
    <return>the only instance</return>
  </javadoc>
  <method type="DummyStepHandler" name="getInstance" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="init" />
  <javadoc>
    <text>Handle the last accepted step.
 * This method does nothing in this class.</text>
    <param>interpolator interpolator for the last accepted step. For
 * efficiency purposes, the various integrators reuse the same
 * object on each call, so if the instance wants to keep it across
 * all calls (for example to provide at the end of the integration a
 * continuous model valid throughout the integration range), it
 * should build a local copy using the clone method and store this
 * copy.</param>
    <param>isLast true if the step is the last one</param>
  </javadoc>
  <method type="void" name="handleStep" />
  <javadoc>
    <text>Holder for the instance.
 * &lt;p&gt;We use here the Initialization On Demand Holder Idiom.&lt;/p&gt;</text>
  </javadoc>
  <javadoc>
    <text>Cached field instance.</text>
  </javadoc>
  <declaration type="DummyStepHandler" name="INSTANCE" />
  <javadoc>
    <text>Handle deserialization of the singleton.</text>
    <return>the singleton instance</return>
  </javadoc>
  <method type="Object" name="readResolve">
    <comment>return the singleton instance</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>CHECKSTYLE: stop HideUtilityClassConstructor</comment>
  <comment>CHECKSTYLE: resume HideUtilityClassConstructor</comment>
</class>
