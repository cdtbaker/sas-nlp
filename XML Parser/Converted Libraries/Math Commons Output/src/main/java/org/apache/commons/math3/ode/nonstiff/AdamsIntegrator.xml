<?xml version="1.0" encoding="UTF-8"?>
<class name="AdamsIntegrator">
  <javadoc>
    <text>Base class for {@link AdamsBashforthIntegrator Adams-Bashforth} and{@link AdamsMoultonIntegrator Adams-Moulton} integrators.</text>
    <version>$Id: AdamsIntegrator.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>Transformer.</text>
  </javadoc>
  <declaration type="AdamsNordsieckTransformer" name="transformer" />
  <javadoc>
    <text>Build an Adams integrator with the given order and step control parameters.</text>
    <param>name name of the method</param>
    <param>nSteps number of steps of the method excluding the one being computed</param>
    <param>order order of the method</param>
    <param>minStep minimal step (sign is irrelevant, regardless of
 * integration direction, forward or backward), the last step can
 * be smaller than this</param>
    <param>maxStep maximal step (sign is irrelevant, regardless of
 * integration direction, forward or backward), the last step can
 * be smaller than this</param>
    <param>scalAbsoluteTolerance allowed absolute error</param>
    <param>scalRelativeTolerance allowed relative error</param>
    <exception>NumberIsTooSmallException if order is 1 or less</exception>
  </javadoc>
  <method type="constructor" name="AdamsIntegrator" />
  <javadoc>
    <text>Build an Adams integrator with the given order and step control parameters.</text>
    <param>name name of the method</param>
    <param>nSteps number of steps of the method excluding the one being computed</param>
    <param>order order of the method</param>
    <param>minStep minimal step (sign is irrelevant, regardless of
 * integration direction, forward or backward), the last step can
 * be smaller than this</param>
    <param>maxStep maximal step (sign is irrelevant, regardless of
 * integration direction, forward or backward), the last step can
 * be smaller than this</param>
    <param>vecAbsoluteTolerance allowed absolute error</param>
    <param>vecRelativeTolerance allowed relative error</param>
    <exception>IllegalArgumentException if order is 1 or less</exception>
  </javadoc>
  <method type="constructor" name="AdamsIntegrator" />
  <method name="integrate" type="void" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Array2DRowRealMatrix" name="initializeHighOrderDerivatives" />
  <javadoc>
    <text>Update the high order scaled derivatives for Adams integrators (phase 1).
 * &lt;p&gt;The complete update of high order derivatives has a form similar to:
 * &lt;pre&gt;
 * r&lt;sub&gt;n+1&lt;/sub&gt; = (s&lt;sub&gt;1&lt;/sub&gt;(n) - s&lt;sub&gt;1&lt;/sub&gt;(n+1)) P&lt;sup&gt;-1&lt;/sup&gt; u + P&lt;sup&gt;-1&lt;/sup&gt; A P r&lt;sub&gt;n&lt;/sub&gt;
 * &lt;/pre&gt;
 * this method computes the P&lt;sup&gt;-1&lt;/sup&gt; A P r&lt;sub&gt;n&lt;/sub&gt; part.&lt;/p&gt;</text>
    <param>highOrder high order scaled derivatives
 * (h&lt;sup&gt;2&lt;/sup&gt;/2 y'', ... h&lt;sup&gt;k&lt;/sup&gt;/k! y(k))</param>
    <return>updated high order derivatives</return>
    <see>#updateHighOrderDerivativesPhase2(double[],double[],Array2DRowRealMatrix)</see>
  </javadoc>
  <method type="Array2DRowRealMatrix" name="updateHighOrderDerivativesPhase1" />
  <javadoc>
    <text>Update the high order scaled derivatives Adams integrators (phase 2).
 * &lt;p&gt;The complete update of high order derivatives has a form similar to:
 * &lt;pre&gt;
 * r&lt;sub&gt;n+1&lt;/sub&gt; = (s&lt;sub&gt;1&lt;/sub&gt;(n) - s&lt;sub&gt;1&lt;/sub&gt;(n+1)) P&lt;sup&gt;-1&lt;/sup&gt; u + P&lt;sup&gt;-1&lt;/sup&gt; A P r&lt;sub&gt;n&lt;/sub&gt;
 * &lt;/pre&gt;
 * this method computes the (s&lt;sub&gt;1&lt;/sub&gt;(n) - s&lt;sub&gt;1&lt;/sub&gt;(n+1)) P&lt;sup&gt;-1&lt;/sup&gt; u part.&lt;/p&gt;
 * &lt;p&gt;Phase 1 of the update must already have been performed.&lt;/p&gt;</text>
    <param>start first order scaled derivatives at step start</param>
    <param>end first order scaled derivatives at step end</param>
    <param>highOrder high order scaled derivatives, will be modified
 * (h&lt;sup&gt;2&lt;/sup&gt;/2 y'', ... h&lt;sup&gt;k&lt;/sup&gt;/k! y(k))</param>
    <see>#updateHighOrderDerivativesPhase1(Array2DRowRealMatrix)</see>
  </javadoc>
  <method type="void" name="updateHighOrderDerivativesPhase2" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
