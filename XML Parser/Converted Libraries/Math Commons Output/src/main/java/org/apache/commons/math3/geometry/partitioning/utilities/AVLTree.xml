<?xml version="1.0" encoding="UTF-8"?>
<class name="AVLTree">
  <javadoc>
    <text>This class implements AVL trees.
 * &lt;p&gt;The purpose of this class is to sort elements while allowing
 * duplicate elements (i.e. such that {@code a.equals(b)} is
 * true). The {@code SortedSet} interface does not allow this, so
 * a specific class is needed. Null elements are not allowed.&lt;/p&gt;
 * &lt;p&gt;Since the {@code equals} method is not sufficient to
 * differentiate elements, the {@link #delete delete} method is
 * implemented using the equality operator.&lt;/p&gt;
 * &lt;p&gt;In order to clearly mark the methods provided here do not have
 * the same semantics as the ones specified in the{@code SortedSet} interface, different names are used
 * ({@code add} has been replaced by {@link #insert insert} and{@code remove} has been replaced by {@link #deletedelete}).&lt;/p&gt;
 * &lt;p&gt;This class is based on the C implementation Georg Kraml has put
 * in the public domain. Unfortunately, his &lt;a
 * href="www.purists.org/georg/avltree/index.html"&gt;page&lt;/a&gt; seems not
 * to exist any more.&lt;/p&gt;</text>
    <param>&lt;T&gt;
 *  the type of the elements</param>
    <version>$Id: AVLTree.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Top level node.</text>
  </javadoc>
  <declaration type="Node" name="top" />
  <javadoc>
    <text>Build an empty tree.</text>
  </javadoc>
  <method type="constructor" name="AVLTree" />
  <javadoc>
    <text>Insert an element in the tree.</text>
    <param>element element to insert (silently ignored if null)</param>
  </javadoc>
  <method type="void" name="insert">
    <scope>
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Delete an element from the tree.
 * &lt;p&gt;The element is deleted only if there is a node {@code n}containing exactly the element instance specified, i.e. for which{@code n.getElement() == element}. This is purposely
 * &lt;em&gt;different&lt;/em&gt; from the specification of the{@code java.util.Set} {@code remove} method (in fact,
 * this is the reason why a specific class has been developed).&lt;/p&gt;</text>
    <param>element element to delete (silently ignored if null)</param>
    <return>true if the element was deleted from the tree</return>
  </javadoc>
  <method type="boolean" name="delete">
    <scope>
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>loop over all elements neither smaller nor larger</comment>
    <comment>than the specified one</comment>
    <comment>all the remaining elements are known to be larger,</comment>
    <comment>the element is not in the tree</comment>
  </method>
  <javadoc>
    <text>Check if the tree is empty.</text>
    <return>true if the tree is empty</return>
  </javadoc>
  <method type="boolean" name="isEmpty" />
  <javadoc>
    <text>Get the number of elements of the tree.</text>
    <return>number of elements contained in the tree</return>
  </javadoc>
  <method type="int" name="size" />
  <javadoc>
    <text>Get the node whose element is the smallest one in the tree.</text>
    <return>the tree node containing the smallest element in the tree
 * or null if the tree is empty</return>
    <see>#getLargest</see>
    <see>#getNotSmaller</see>
    <see>#getNotLarger</see>
    <see>Node#getPrevious</see>
    <see>Node#getNext</see>
  </javadoc>
  <method type="Node" name="getSmallest" />
  <javadoc>
    <text>Get the node whose element is the largest one in the tree.</text>
    <return>the tree node containing the largest element in the tree
 * or null if the tree is empty</return>
    <see>#getSmallest</see>
    <see>#getNotSmaller</see>
    <see>#getNotLarger</see>
    <see>Node#getPrevious</see>
    <see>Node#getNext</see>
  </javadoc>
  <method type="Node" name="getLargest" />
  <javadoc>
    <text>Get the node whose element is not smaller than the reference object.</text>
    <param>reference reference object (may not be in the tree)</param>
    <return>the tree node containing the smallest element not smaller
 * than the reference object or null if either the tree is empty or
 * all its elements are smaller than the reference object</return>
    <see>#getSmallest</see>
    <see>#getLargest</see>
    <see>#getNotLarger</see>
    <see>Node#getPrevious</see>
    <see>Node#getNext</see>
  </javadoc>
  <method type="Node" name="getNotSmaller">
    <declaration type="Node" name="candidate" />
    <scope>
      <scope>
        <scope />
      </scope>
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Get the node whose element is not larger than the reference object.</text>
    <param>reference reference object (may not be in the tree)</param>
    <return>the tree node containing the largest element not larger
 * than the reference object (in which case the node is guaranteed
 * not to be empty) or null if either the tree is empty or all its
 * elements are larger than the reference object</return>
    <see>#getSmallest</see>
    <see>#getLargest</see>
    <see>#getNotSmaller</see>
    <see>Node#getPrevious</see>
    <see>Node#getNext</see>
  </javadoc>
  <method type="Node" name="getNotLarger">
    <declaration type="Node" name="candidate" />
    <scope>
      <scope>
        <scope />
      </scope>
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Enum for tree skew factor.</text>
  </javadoc>
  <javadoc>
    <text>Code for left high trees.</text>
  </javadoc>
  <javadoc>
    <text>Code for right high trees.</text>
  </javadoc>
  <javadoc>
    <text>Code for Skew.BALANCED trees.</text>
  </javadoc>
  <javadoc>
    <text>This class implements AVL trees nodes.
 * &lt;p&gt;AVL tree nodes implement all the logical structure of the
 * tree. Nodes are created by the {@link AVLTree AVLTree} class.&lt;/p&gt;
 * &lt;p&gt;The nodes are not independant from each other but must obey
 * specific balancing constraints and the tree structure is
 * rearranged as elements are inserted or deleted from the tree. The
 * creation, modification and tree-related navigation methods have
 * therefore restricted access. Only the order-related navigation,
 * reading and delete methods are public.&lt;/p&gt;</text>
    <see>AVLTree</see>
  </javadoc>
  <javadoc>
    <text>Element contained in the current node.</text>
  </javadoc>
  <declaration type="T" name="element" />
  <javadoc>
    <text>Left sub-tree.</text>
  </javadoc>
  <declaration type="Node" name="left" />
  <javadoc>
    <text>Right sub-tree.</text>
  </javadoc>
  <declaration type="Node" name="right" />
  <javadoc>
    <text>Parent tree.</text>
  </javadoc>
  <declaration type="Node" name="parent" />
  <javadoc>
    <text>Skew factor.</text>
  </javadoc>
  <declaration type="Skew" name="skew" />
  <javadoc>
    <text>Build a node for a specified element.</text>
    <param>element element</param>
    <param>parent parent node</param>
  </javadoc>
  <method type="constructor" name="Node" />
  <javadoc>
    <text>Get the contained element.</text>
    <return>element contained in the node</return>
  </javadoc>
  <method type="T" name="getElement" />
  <javadoc>
    <text>Get the number of elements of the tree rooted at this node.</text>
    <return>number of elements contained in the tree rooted at this node</return>
  </javadoc>
  <method type="int" name="size" />
  <javadoc>
    <text>Get the node whose element is the smallest one in the tree
 * rooted at this node.</text>
    <return>the tree node containing the smallest element in the
 * tree rooted at this node or null if the tree is empty</return>
    <see>#getLargest</see>
  </javadoc>
  <method type="Node" name="getSmallest">
    <declaration type="Node" name="node" />
    <scope />
  </method>
  <javadoc>
    <text>Get the node whose element is the largest one in the tree
 * rooted at this node.</text>
    <return>the tree node containing the largest element in the
 * tree rooted at this node or null if the tree is empty</return>
    <see>#getSmallest</see>
  </javadoc>
  <method type="Node" name="getLargest">
    <declaration type="Node" name="node" />
    <scope />
  </method>
  <javadoc>
    <text>Get the node containing the next smaller or equal element.</text>
    <return>node containing the next smaller or equal element or
 * null if there is no smaller or equal element in the tree</return>
    <see>#getNext</see>
  </javadoc>
  <method type="Node" name="getPrevious">
    <scope>
      <declaration type="Node" name="node" />
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Get the node containing the next larger or equal element.</text>
    <return>node containing the next larger or equal element (in
 * which case the node is guaranteed not to be empty) or null if
 * there is no larger or equal element in the tree</return>
    <see>#getPrevious</see>
  </javadoc>
  <method type="Node" name="getNext">
    <scope>
      <declaration type="Node" name="node" />
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Insert an element in a sub-tree.</text>
    <param>newElement element to insert</param>
    <return>true if the parent tree should be re-Skew.BALANCED</return>
  </javadoc>
  <method type="boolean" name="insert">
    <scope>
      <scope />
    </scope>
    <scope />
    <comment>the inserted element is smaller than the node</comment>
    <comment>the inserted element is equal to or greater than the node</comment>
  </method>
  <javadoc>
    <text>Delete the node from the tree.</text>
  </javadoc>
  <method type="void" name="delete">
    <scope />
    <scope>
      <declaration type="Node" name="node" />
      <declaration type="Node" name="child" />
      <declaration type="boolean" name="leftShrunk" />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>this was the last node, the tree is now empty</comment>
  </method>
  <javadoc>
    <text>Re-balance the instance as left sub-tree has grown.</text>
    <return>true if the parent tree should be reSkew.BALANCED too</return>
  </javadoc>
  <method type="boolean" name="rebalanceLeftGrown">
    <scope />
    <scope>
      <declaration type="Skew" name="s" />
    </scope>
  </method>
  <javadoc>
    <text>Re-balance the instance as right sub-tree has grown.</text>
    <return>true if the parent tree should be reSkew.BALANCED too</return>
  </javadoc>
  <method type="boolean" name="rebalanceRightGrown">
    <scope />
    <scope>
      <declaration type="Skew" name="s" />
    </scope>
  </method>
  <javadoc>
    <text>Re-balance the instance as left sub-tree has shrunk.</text>
    <return>true if the parent tree should be reSkew.BALANCED too</return>
  </javadoc>
  <method type="boolean" name="rebalanceLeftShrunk">
    <scope />
    <scope />
    <scope>
      <declaration type="Skew" name="s" />
    </scope>
  </method>
  <javadoc>
    <text>Re-balance the instance as right sub-tree has shrunk.</text>
    <return>true if the parent tree should be reSkew.BALANCED too</return>
  </javadoc>
  <method type="boolean" name="rebalanceRightShrunk">
    <scope />
    <scope />
    <scope>
      <declaration type="Skew" name="s" />
    </scope>
  </method>
  <javadoc>
    <text>Perform a clockwise rotation rooted at the instance.
 * &lt;p&gt;The skew factor are not updated by this method, they
 * &lt;em&gt;must&lt;/em&gt; be updated by the caller&lt;/p&gt;</text>
  </javadoc>
  <method type="void" name="rotateCW">
    <declaration type="T" name="tmpElt" />
    <declaration type="Node" name="tmpNode" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Perform a counter-clockwise rotation rooted at the instance.
 * &lt;p&gt;The skew factor are not updated by this method, they
 * &lt;em&gt;must&lt;/em&gt; be updated by the caller&lt;/p&gt;</text>
  </javadoc>
  <method type="void" name="rotateCCW">
    <declaration type="T" name="tmpElt" />
    <declaration type="Node" name="tmpNode" />
    <scope />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
