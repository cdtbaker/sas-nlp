<?xml version="1.0" encoding="UTF-8"?>
<class name="BaseUnivariateSolver">
  <javadoc>
    <text>Interface for (univariate real) rootfinding algorithms.
 * Implementations will search for only one zero in the given interval.
 * This class is not intended for use outside of the Apache Commons Math
 * library, regular user should rely on more specific interfaces like{@link UnivariateSolver}, {@link PolynomialSolver} or {@link DifferentiableUnivariateSolver}.</text>
    <param>&lt;FUNC&gt;
 *  Type of function to solve.</param>
    <since>3.0</since>
    <version>$Id: BaseUnivariateSolver.java 1455194 2013-03-11 15:45:54Z luc $</version>
    <see>UnivariateSolver</see>
    <see>PolynomialSolver</see>
    <see>DifferentiableUnivariateSolver</see>
  </javadoc>
  <method name="getMaxEvaluations" type="int" />
  <javadoc>
    <text>Get the maximum number of function evaluations.</text>
    <return>the maximum number of function evaluations.</return>
  </javadoc>
  <method name="getEvaluations" type="int" />
  <javadoc>
    <text>Get the number of evaluations of the objective function.
 * The number of evaluations corresponds to the last call to the{@code optimize} method. It is 0 if the method has not been
 * called yet.</text>
    <return>the number of evaluations of the objective function.</return>
  </javadoc>
  <method name="getAbsoluteAccuracy" type="double" />
  <javadoc>
    <text>Get the absolute accuracy of the solver.  Solutions returned by the
 * solver should be accurate to this tolerance, i.e., if &amp;epsilon; is the
 * absolute accuracy of the solver and {@code v} is a value returned by
 * one of the {@code solve} methods, then a root of the function should
 * exist somewhere in the interval ({@code v} - &amp;epsilon;, {@code v} + &amp;epsilon;).</text>
    <return>the absolute accuracy.</return>
  </javadoc>
  <method name="getRelativeAccuracy" type="double" />
  <javadoc>
    <text>Get the relative accuracy of the solver.  The contract for relative
 * accuracy is the same as {@link #getAbsoluteAccuracy()}, but using
 * relative, rather than absolute error.  If &amp;rho; is the relative accuracy
 * configured for a solver and {@code v} is a value returned, then a root
 * of the function should exist somewhere in the interval
 * ({@code v} - &amp;rho; {@code v}, {@code v} + &amp;rho; {@code v}).</text>
    <return>the relative accuracy.</return>
  </javadoc>
  <method name="getFunctionValueAccuracy" type="double" />
  <javadoc>
    <text>Get the function value accuracy of the solver.  If {@code v} is
 * a value returned by the solver for a function {@code f},
 * then by contract, {@code |f(v)|} should be less than or equal to
 * the function value accuracy configured for the solver.</text>
    <return>the function value accuracy.</return>
  </javadoc>
  <method name="solve" type="double" />
  <javadoc>
    <text>Solve for a zero root in the given interval.
 * A solver may require that the interval brackets a single zero root.
 * Solvers that do require bracketing should be able to handle the case
 * where one of the endpoints is itself a root.</text>
    <param>maxEval Maximum number of evaluations.</param>
    <param>f Function to solve.</param>
    <param>min Lower bound for the interval.</param>
    <param>max Upper bound for the interval.</param>
    <return>a value where the function is zero.</return>
    <throws>MathIllegalArgumentExceptionif the arguments do not satisfy the requirements specified by the solver.</throws>
    <throws>TooManyEvaluationsException if
 * the allowed number of evaluations is exceeded.</throws>
  </javadoc>
  <method name="solve" type="double" />
  <javadoc>
    <text>Solve for a zero in the given interval, start at {@code startValue}.
 * A solver may require that the interval brackets a single zero root.
 * Solvers that do require bracketing should be able to handle the case
 * where one of the endpoints is itself a root.</text>
    <param>maxEval Maximum number of evaluations.</param>
    <param>f Function to solve.</param>
    <param>min Lower bound for the interval.</param>
    <param>max Upper bound for the interval.</param>
    <param>startValue Start value to use.</param>
    <return>a value where the function is zero.</return>
    <throws>MathIllegalArgumentExceptionif the arguments do not satisfy the requirements specified by the solver.</throws>
    <throws>TooManyEvaluationsException if
 * the allowed number of evaluations is exceeded.</throws>
  </javadoc>
  <method name="solve" type="double" />
  <javadoc>
    <text>Solve for a zero in the vicinity of {@code startValue}.</text>
    <param>f Function to solve.</param>
    <param>startValue Start value to use.</param>
    <return>a value where the function is zero.</return>
    <param>maxEval Maximum number of evaluations.</param>
    <throws>org.apache.commons.math3.exception.MathIllegalArgumentExceptionif the arguments do not satisfy the requirements specified by the solver.</throws>
    <throws>org.apache.commons.math3.exception.TooManyEvaluationsException if
 * the allowed number of evaluations is exceeded.</throws>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
