<?xml version="1.0" encoding="UTF-8"?>
<class name="ValueServer">
  <javadoc>
    <text>Generates values for use in simulation applications.
 * &lt;p&gt;
 * How values are generated is determined by the &lt;code&gt;mode&lt;/code&gt;
 * property.&lt;/p&gt;
 * &lt;p&gt;
 * Supported &lt;code&gt;mode&lt;/code&gt; values are: &lt;ul&gt;
 * &lt;li&gt; DIGEST_MODE -- uses an empirical distribution &lt;/li&gt;
 * &lt;li&gt; REPLAY_MODE -- replays data from &lt;code&gt;valuesFileURL&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt; UNIFORM_MODE -- generates uniformly distributed random values with
 * mean = &lt;code&gt;mu&lt;/code&gt; &lt;/li&gt;
 * &lt;li&gt; EXPONENTIAL_MODE -- generates exponentially distributed random values
 * with mean = &lt;code&gt;mu&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt; GAUSSIAN_MODE -- generates Gaussian distributed random values with
 * mean = &lt;code&gt;mu&lt;/code&gt; and
 * standard deviation = &lt;code&gt;sigma&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt; CONSTANT_MODE -- returns &lt;code&gt;mu&lt;/code&gt; every time.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <version>$Id: ValueServer.java 1422350 2012-12-15 20:47:47Z psteitz $</version>
  </javadoc>
  <javadoc>
    <text>Use empirical distribution.</text>
  </javadoc>
  <declaration type="int" name="DIGEST_MODE" />
  <javadoc>
    <text>Replay data from valuesFilePath.</text>
  </javadoc>
  <declaration type="int" name="REPLAY_MODE" />
  <javadoc>
    <text>Uniform random deviates with mean = &amp;mu;.</text>
  </javadoc>
  <declaration type="int" name="UNIFORM_MODE" />
  <javadoc>
    <text>Exponential random deviates with mean = &amp;mu;.</text>
  </javadoc>
  <declaration type="int" name="EXPONENTIAL_MODE" />
  <javadoc>
    <text>Gaussian random deviates with mean = &amp;mu;, std dev = &amp;sigma;.</text>
  </javadoc>
  <declaration type="int" name="GAUSSIAN_MODE" />
  <javadoc>
    <text>Always return mu</text>
  </javadoc>
  <declaration type="int" name="CONSTANT_MODE" />
  <javadoc>
    <text>mode determines how values are generated.</text>
  </javadoc>
  <declaration type="int" name="mode" />
  <javadoc>
    <text>URI to raw data values.</text>
  </javadoc>
  <declaration type="URL" name="valuesFileURL" />
  <javadoc>
    <text>Mean for use with non-data-driven modes.</text>
  </javadoc>
  <declaration type="double" name="mu" />
  <javadoc>
    <text>Standard deviation for use with GAUSSIAN_MODE.</text>
  </javadoc>
  <declaration type="double" name="sigma" />
  <javadoc>
    <text>Empirical probability distribution for use with DIGEST_MODE.</text>
  </javadoc>
  <declaration type="EmpiricalDistribution" name="empiricalDistribution" />
  <javadoc>
    <text>File pointer for REPLAY_MODE.</text>
  </javadoc>
  <declaration type="BufferedReader" name="filePointer" />
  <javadoc>
    <text>RandomDataImpl to use for random data generation.</text>
  </javadoc>
  <declaration type="RandomDataImpl" name="randomData" />
  <javadoc>
    <text>Creates new ValueServer</text>
  </javadoc>
  <method type="constructor" name="ValueServer" />
  <javadoc>
    <text>Construct a ValueServer instance using a RandomDataImpl as its source
 * of random data.</text>
    <param>randomData the RandomDataImpl instance used to source random data</param>
    <since>3.0</since>
    <deprecated>use {@link #ValueServer(RandomGenerator)}</deprecated>
  </javadoc>
  <method type="constructor" name="ValueServer" />
  <javadoc>
    <text>Construct a ValueServer instance using a RandomGenerator as its source
 * of random data.</text>
    <since>3.1</since>
    <param>generator source of random data</param>
  </javadoc>
  <method type="constructor" name="ValueServer" />
  <javadoc>
    <text>Returns the next generated value, generated according
 * to the mode value (see MODE constants).</text>
    <return>generated value</return>
    <throws>IOException in REPLAY_MODE if a file I/O error occurs</throws>
    <throws>MathIllegalStateException if mode is not recognized</throws>
    <throws>MathIllegalArgumentException if the underlying random generator thwrows one</throws>
  </javadoc>
  <method type="double" name="getNext" />
  <javadoc>
    <text>Fills the input array with values generated using getNext() repeatedly.</text>
    <param>values array to be filled</param>
    <throws>IOException in REPLAY_MODE if a file I/O error occurs</throws>
    <throws>MathIllegalStateException if mode is not recognized</throws>
    <throws>MathIllegalArgumentException if the underlying random generator thwrows one</throws>
  </javadoc>
  <method type="void" name="fill">
    <scope />
  </method>
  <javadoc>
    <text>Returns an array of length &lt;code&gt;length&lt;/code&gt; with values generated
 * using getNext() repeatedly.</text>
    <param>length length of output array</param>
    <return>array of generated values</return>
    <throws>IOException in REPLAY_MODE if a file I/O error occurs</throws>
    <throws>MathIllegalStateException if mode is not recognized</throws>
    <throws>MathIllegalArgumentException if the underlying random generator thwrows one</throws>
  </javadoc>
  <method type="double[]" name="fill">
    <declaration type="double[]" name="out" />
    <scope />
  </method>
  <javadoc>
    <text>Computes the empirical distribution using values from the file
 * in &lt;code&gt;valuesFileURL&lt;/code&gt;, using the default number of bins.
 * &lt;p&gt;
 * &lt;code&gt;valuesFileURL&lt;/code&gt; must exist and be
 * readable by *this at runtime.&lt;/p&gt;
 * &lt;p&gt;
 * This method must be called before using &lt;code&gt;getNext()&lt;/code&gt;
 * with &lt;code&gt;mode = DIGEST_MODE&lt;/code&gt;&lt;/p&gt;</text>
    <throws>IOException if an I/O error occurs reading the input file</throws>
    <throws>NullArgumentException if the {@code valuesFileURL} has not been set</throws>
    <throws>ZeroException if URL contains no data</throws>
  </javadoc>
  <method type="void" name="computeDistribution" />
  <javadoc>
    <text>Computes the empirical distribution using values from the file
 * in &lt;code&gt;valuesFileURL&lt;/code&gt; and &lt;code&gt;binCount&lt;/code&gt; bins.
 * &lt;p&gt;
 * &lt;code&gt;valuesFileURL&lt;/code&gt; must exist and be readable by this process
 * at runtime.&lt;/p&gt;
 * &lt;p&gt;
 * This method must be called before using &lt;code&gt;getNext()&lt;/code&gt;
 * with &lt;code&gt;mode = DIGEST_MODE&lt;/code&gt;&lt;/p&gt;</text>
    <param>binCount the number of bins used in computing the empirical
 * distribution</param>
    <throws>NullArgumentException if the {@code valuesFileURL} has not been set</throws>
    <throws>IOException if an error occurs reading the input file</throws>
    <throws>ZeroException if URL contains no data</throws>
  </javadoc>
  <method type="void" name="computeDistribution" />
  <javadoc>
    <text>Returns the data generation mode. See {@link ValueServer the class javadoc}for description of the valid values of this property.</text>
    <return>Value of property mode.</return>
  </javadoc>
  <method type="int" name="getMode" />
  <javadoc>
    <text>Sets the data generation mode.</text>
    <param>mode New value of the data generation mode.</param>
  </javadoc>
  <method type="void" name="setMode" />
  <javadoc>
    <text>Returns the URL for the file used to build the empirical distribution
 * when using {@link #DIGEST_MODE}.</text>
    <return>Values file URL.</return>
  </javadoc>
  <method type="URL" name="getValuesFileURL" />
  <javadoc>
    <text>Sets the {@link #getValuesFileURL() values file URL} using a string
 * URL representation.</text>
    <param>url String representation for new valuesFileURL.</param>
    <throws>MalformedURLException if url is not well formed</throws>
  </javadoc>
  <method type="void" name="setValuesFileURL" />
  <javadoc>
    <text>Sets the the {@link #getValuesFileURL() values file URL}.
 * &lt;p&gt;The values file &lt;i&gt;must&lt;/i&gt; be an ASCII text file containing one
 * valid numeric entry per line.&lt;/p&gt;</text>
    <param>url URL of the values file.</param>
  </javadoc>
  <method type="void" name="setValuesFileURL" />
  <javadoc>
    <text>Returns the {@link EmpiricalDistribution} used when operating in {@value #DIGEST_MODE}.</text>
    <return>EmpircalDistribution built by {@link #computeDistribution()}</return>
  </javadoc>
  <method type="EmpiricalDistribution" name="getEmpiricalDistribution" />
  <javadoc>
    <text>Resets REPLAY_MODE file pointer to the beginning of the &lt;code&gt;valuesFileURL&lt;/code&gt;.</text>
    <throws>IOException if an error occurs opening the file</throws>
  </javadoc>
  <method type="void" name="resetReplayFile">
    <scope>
      <scope />
      <scope />
    </scope>
    <comment>NOPMD</comment>
    <comment>ignore</comment>
  </method>
  <javadoc>
    <text>Closes {@code valuesFileURL} after use in REPLAY_MODE.</text>
    <throws>IOException if an error occurs closing the file</throws>
  </javadoc>
  <method type="void" name="closeReplayFile">
    <scope />
  </method>
  <javadoc>
    <text>Returns the mean used when operating in {@link #GAUSSIAN_MODE}, {@link #EXPONENTIAL_MODE}or {@link #UNIFORM_MODE}.  When operating in {@link #CONSTANT_MODE}, this is the constant
 * value always returned.  Calling {@link #computeDistribution()} sets this value to the
 * overall mean of the values in the {@link #getValuesFileURL() values file}.</text>
    <return>Mean used in data generation.</return>
  </javadoc>
  <method type="double" name="getMu" />
  <javadoc>
    <text>Sets the {@link #getMu() mean} used in data generation.  Note that calling this method
 * after {@link #computeDistribution()} has been called will have no effect on data
 * generated in {@link #DIGEST_MODE}.</text>
    <param>mu new Mean value.</param>
  </javadoc>
  <method type="void" name="setMu" />
  <javadoc>
    <text>Returns the standard deviation used when operating in {@link #GAUSSIAN_MODE}.
 * Calling {@link #computeDistribution()} sets this value to the overall standard
 * deviation of the values in the {@link #getValuesFileURL() values file}.  This
 * property has no effect when the data generation mode is not{@link #GAUSSIAN_MODE}.</text>
    <return>Standard deviation used when operating in {@link #GAUSSIAN_MODE}.</return>
  </javadoc>
  <method type="double" name="getSigma" />
  <javadoc>
    <text>Sets the {@link #getSigma() standard deviation} used in {@link #GAUSSIAN_MODE}.</text>
    <param>sigma New standard deviation.</param>
  </javadoc>
  <method type="void" name="setSigma" />
  <javadoc>
    <text>Reseeds the random data generator.</text>
    <param>seed Value with which to reseed the {@link RandomDataImpl}used to generate random data.</param>
  </javadoc>
  <method type="void" name="reSeed" />
  <javadoc>
    <text>Gets a random value in DIGEST_MODE.
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;Before this method is called, &lt;code&gt;computeDistribution()&lt;/code&gt;
 * must have completed successfully; otherwise an
 * &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <return>next random value from the empirical distribution digest</return>
    <throws>MathIllegalStateException if digest has not been initialized</throws>
  </javadoc>
  <method type="double" name="getNextDigest">
    <scope />
  </method>
  <javadoc>
    <text>Gets next sequential value from the &lt;code&gt;valuesFileURL&lt;/code&gt;.
 * &lt;p&gt;
 * Throws an IOException if the read fails.&lt;/p&gt;
 * &lt;p&gt;
 * This method will open the &lt;code&gt;valuesFileURL&lt;/code&gt; if there is no
 * replay file open.&lt;/p&gt;
 * &lt;p&gt;
 * The &lt;code&gt;valuesFileURL&lt;/code&gt; will be closed and reopened to wrap around
 * from EOF to BOF if EOF is encountered. EOFException (which is a kind of
 * IOException) may still be thrown if the &lt;code&gt;valuesFileURL&lt;/code&gt; is
 * empty.&lt;/p&gt;</text>
    <return>next value from the replay file</return>
    <throws>IOException if there is a problem reading from the file</throws>
    <throws>MathIllegalStateException if URL contains no data</throws>
    <throws>NumberFormatException if an invalid numeric string is
 * encountered in the file</throws>
  </javadoc>
  <method type="double" name="getNextReplay">
    <declaration type="String" name="str" />
    <scope />
    <scope>
      <scope />
    </scope>
    <comment>we have probably reached end of file, wrap around from EOF to BOF</comment>
  </method>
  <javadoc>
    <text>Gets a uniformly distributed random value with mean = mu.</text>
    <return>random uniform value</return>
    <throws>MathIllegalArgumentException if the underlying random generator thwrows one</throws>
  </javadoc>
  <method type="double" name="getNextUniform" />
  <javadoc>
    <text>Gets an exponentially distributed random value with mean = mu.</text>
    <return>random exponential value</return>
    <throws>MathIllegalArgumentException if the underlying random generator thwrows one</throws>
  </javadoc>
  <method type="double" name="getNextExponential" />
  <javadoc>
    <text>Gets a Gaussian distributed random value with mean = mu
 * and standard deviation = sigma.</text>
    <return>random Gaussian value</return>
    <throws>MathIllegalArgumentException if the underlying random generator thwrows one</throws>
  </javadoc>
  <method type="double" name="getNextGaussian" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>Data generation modes ======================================</comment>
  <comment>------------- private methods ---------------------------------</comment>
</class>
