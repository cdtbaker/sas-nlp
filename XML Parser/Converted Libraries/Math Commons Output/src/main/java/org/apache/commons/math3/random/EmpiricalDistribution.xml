<?xml version="1.0" encoding="UTF-8"?>
<class name="EmpiricalDistribution">
  <javadoc>
    <text>&lt;p&gt;Represents an &lt;a href="http://http://en.wikipedia.org/wiki/Empirical_distribution_function"&gt;
 * empirical probability distribution&lt;/a&gt; -- a probability distribution derived
 * from observed data without making any assumptions about the functional form
 * of the population distribution that the data come from.&lt;/p&gt;
 * &lt;p&gt;An &lt;code&gt;EmpiricalDistribution&lt;/code&gt; maintains data structures, called
 * &lt;i&gt;distribution digests&lt;/i&gt;, that describe empirical distributions and
 * support the following operations: &lt;ul&gt;
 * &lt;li&gt;loading the distribution from a file of observed data values&lt;/li&gt;
 * &lt;li&gt;dividing the input data into "bin ranges" and reporting bin frequency
 * counts (data for histogram)&lt;/li&gt;
 * &lt;li&gt;reporting univariate statistics describing the full set of data values
 * as well as the observations within each bin&lt;/li&gt;
 * &lt;li&gt;generating random values from the distribution&lt;/li&gt;
 * &lt;/ul&gt;
 * Applications can use &lt;code&gt;EmpiricalDistribution&lt;/code&gt; to build grouped
 * frequency histograms representing the input data or to generate random values
 * "like" those in the input file -- i.e., the values generated will follow the
 * distribution of the values in the file.&lt;/p&gt;
 * &lt;p&gt;The implementation uses what amounts to the
 * &lt;a href="http://nedwww.ipac.caltech.edu/level5/March02/Silverman/Silver2_6.html"&gt;
 * Variable Kernel Method&lt;/a&gt; with Gaussian smoothing:&lt;p&gt;
 * &lt;strong&gt;Digesting the input file&lt;/strong&gt;
 * &lt;ol&gt;&lt;li&gt;Pass the file once to compute min and max.&lt;/li&gt;
 * &lt;li&gt;Divide the range from min-max into &lt;code&gt;binCount&lt;/code&gt; "bins."&lt;/li&gt;
 * &lt;li&gt;Pass the data file again, computing bin counts and univariate
 * statistics (mean, std dev.) for each of the bins &lt;/li&gt;
 * &lt;li&gt;Divide the interval (0,1) into subintervals associated with the bins,
 * with the length of a bin's subinterval proportional to its count.&lt;/li&gt;&lt;/ol&gt;
 * &lt;strong&gt;Generating random values from the distribution&lt;/strong&gt;&lt;ol&gt;
 * &lt;li&gt;Generate a uniformly distributed value in (0,1) &lt;/li&gt;
 * &lt;li&gt;Select the subinterval to which the value belongs.
 * &lt;li&gt;Generate a random Gaussian value with mean = mean of the associated
 * bin and std dev = std dev of associated bin.&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;
 * &lt;p&gt;EmpiricalDistribution implements the {@link RealDistribution} interface
 * as follows.  Given x within the range of values in the dataset, let B
 * be the bin containing x and let K be the within-bin kernel for B.  Let P(B-)
 * be the sum of the probabilities of the bins below B and let K(B) be the
 * mass of B under K (i.e., the integral of the kernel density over B).  Then
 * set P(X &lt; x) = P(B-) + P(B) * K(x) / K(B) where K(x) is the kernel distribution
 * evaluated at x. This results in a cdf that matches the grouped frequency
 * distribution at the bin endpoints and interpolates within bins using
 * within-bin kernels.&lt;/p&gt;
 * &lt;strong&gt;USAGE NOTES:&lt;/strong&gt;&lt;ul&gt;
 * &lt;li&gt;The &lt;code&gt;binCount&lt;/code&gt; is set by default to 1000.  A good rule of thumb
 * is to set the bin count to approximately the length of the input file divided
 * by 10. &lt;/li&gt;
 * &lt;li&gt;The input file &lt;i&gt;must&lt;/i&gt; be a plain text file containing one valid numeric
 * entry per line.&lt;/li&gt;
 * &lt;/ul&gt;&lt;/p&gt;</text>
    <version>$Id: EmpiricalDistribution.java 1457372 2013-03-17 04:28:04Z psteitz $</version>
  </javadoc>
  <javadoc>
    <text>Default bin count</text>
  </javadoc>
  <declaration type="int" name="DEFAULT_BIN_COUNT" />
  <javadoc>
    <text>Character set for file input</text>
  </javadoc>
  <declaration type="String" name="FILE_CHARSET" />
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>RandomDataGenerator instance to use in repeated calls to getNext()</text>
  </javadoc>
  <declaration type="RandomDataGenerator" name="randomData" />
  <javadoc>
    <text>List of SummaryStatistics objects characterizing the bins</text>
  </javadoc>
  <declaration type="List&lt;SummaryStatistics&gt;" name="binStats" />
  <javadoc>
    <text>Sample statistics</text>
  </javadoc>
  <declaration type="SummaryStatistics" name="sampleStats" />
  <javadoc>
    <text>Max loaded value</text>
  </javadoc>
  <declaration type="double" name="max" />
  <javadoc>
    <text>Min loaded value</text>
  </javadoc>
  <declaration type="double" name="min" />
  <javadoc>
    <text>Grid size</text>
  </javadoc>
  <declaration type="double" name="delta" />
  <javadoc>
    <text>number of bins</text>
  </javadoc>
  <declaration type="int" name="binCount" />
  <javadoc>
    <text>is the distribution loaded?</text>
  </javadoc>
  <declaration type="boolean" name="loaded" />
  <javadoc>
    <text>upper bounds of subintervals in (0,1) "belonging" to the bins</text>
  </javadoc>
  <declaration type="double[]" name="upperBounds" />
  <javadoc>
    <text>Creates a new EmpiricalDistribution with the default bin count.</text>
  </javadoc>
  <method type="constructor" name="EmpiricalDistribution" />
  <javadoc>
    <text>Creates a new EmpiricalDistribution with the specified bin count.</text>
    <param>binCount number of bins</param>
  </javadoc>
  <method type="constructor" name="EmpiricalDistribution" />
  <javadoc>
    <text>Creates a new EmpiricalDistribution with the specified bin count using the
 * provided {@link RandomGenerator} as the source of random data.</text>
    <param>binCount number of bins</param>
    <param>generator random data generator (may be null, resulting in default JDK generator)</param>
    <since>3.0</since>
  </javadoc>
  <method type="constructor" name="EmpiricalDistribution" />
  <javadoc>
    <text>Creates a new EmpiricalDistribution with default bin count using the
 * provided {@link RandomGenerator} as the source of random data.</text>
    <param>generator random data generator (may be null, resulting in default JDK generator)</param>
    <since>3.0</since>
  </javadoc>
  <method type="constructor" name="EmpiricalDistribution" />
  <javadoc>
    <text>Creates a new EmpiricalDistribution with the specified bin count using the
 * provided {@link RandomDataImpl} instance as the source of random data.</text>
    <param>binCount number of bins</param>
    <param>randomData random data generator (may be null, resulting in default JDK generator)</param>
    <since>3.0</since>
    <deprecated>As of 3.1. Please use {@link #EmpiricalDistribution(int,RandomGenerator)} instead.</deprecated>
  </javadoc>
  <method type="constructor" name="EmpiricalDistribution" />
  <javadoc>
    <text>Creates a new EmpiricalDistribution with default bin count using the
 * provided {@link RandomDataImpl} as the source of random data.</text>
    <param>randomData random data generator (may be null, resulting in default JDK generator)</param>
    <since>3.0</since>
    <deprecated>As of 3.1. Please use {@link #EmpiricalDistribution(RandomGenerator)} instead.</deprecated>
  </javadoc>
  <method type="constructor" name="EmpiricalDistribution" />
  <javadoc>
    <text>Private constructor to allow lazy initialisation of the RNG contained
 * in the {@link #randomData} instance variable.</text>
    <param>binCount number of bins</param>
    <param>randomData Random data generator.</param>
  </javadoc>
  <method type="constructor" name="EmpiricalDistribution" />
  <javadoc>
    <text>Computes the empirical distribution from the provided
 * array of numbers.</text>
    <param>in the input data array</param>
    <exception>NullArgumentException if in is null</exception>
  </javadoc>
  <method type="void" name="load">
    <declaration type="DataAdapter" name="da" />
    <scope />
    <scope />
    <comment>new adapter for the second pass</comment>
    <comment>Can't happen</comment>
  </method>
  <javadoc>
    <text>Computes the empirical distribution using data read from a URL.
 * &lt;p&gt;The input file &lt;i&gt;must&lt;/i&gt; be an ASCII text file containing one
 * valid numeric entry per line.&lt;/p&gt;</text>
    <param>url url of the input file</param>
    <throws>IOException if an IO error occurs</throws>
    <throws>NullArgumentException if url is null</throws>
    <throws>ZeroException if URL contains no data</throws>
  </javadoc>
  <method type="void" name="load">
    <declaration type="Charset" name="charset" />
    <declaration type="BufferedReader" name="in" />
    <scope>
      <declaration type="DataAdapter" name="da" />
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
    </scope>
    <comment>new adapter for the second pass</comment>
    <comment>NOPMD</comment>
    <comment>ignore</comment>
  </method>
  <javadoc>
    <text>Computes the empirical distribution from the input file.
 * &lt;p&gt;The input file &lt;i&gt;must&lt;/i&gt; be an ASCII text file containing one
 * valid numeric entry per line.&lt;/p&gt;</text>
    <param>file the input file</param>
    <throws>IOException if an IO error occurs</throws>
    <throws>NullArgumentException if file is null</throws>
  </javadoc>
  <method type="void" name="load">
    <declaration type="Charset" name="charset" />
    <declaration type="InputStream" name="is" />
    <declaration type="BufferedReader" name="in" />
    <scope>
      <declaration type="DataAdapter" name="da" />
    </scope>
    <scope>
      <scope />
      <scope />
    </scope>
    <comment>new adapter for second pass</comment>
    <comment>NOPMD</comment>
    <comment>ignore</comment>
  </method>
  <javadoc>
    <text>Provides methods for computing &lt;code&gt;sampleStats&lt;/code&gt; and
 * &lt;code&gt;beanStats&lt;/code&gt; abstracting the source of data.</text>
  </javadoc>
  <method name="computeBinStats" type="void" />
  <javadoc>
    <text>Compute bin stats.</text>
    <throws>IOException  if an error occurs computing bin stats</throws>
  </javadoc>
  <method name="computeStats" type="void" />
  <javadoc>
    <text>Compute sample statistics.</text>
    <throws>IOException if an error occurs computing sample stats</throws>
  </javadoc>
  <javadoc>
    <text>&lt;code&gt;DataAdapter&lt;/code&gt; for data provided through some input stream</text>
  </javadoc>
  <javadoc>
    <text>Input stream providing access to the data</text>
  </javadoc>
  <declaration type="BufferedReader" name="inputStream" />
  <javadoc>
    <text>Create a StreamDataAdapter from a BufferedReader</text>
    <param>in BufferedReader input stream</param>
  </javadoc>
  <method type="constructor" name="StreamDataAdapter" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="computeBinStats">
    <declaration type="String" name="str" />
    <declaration type="double" name="val" />
    <scope>
      <declaration type="SummaryStatistics" name="stats" />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="computeStats">
    <declaration type="String" name="str" />
    <declaration type="double" name="val" />
    <scope />
  </method>
  <javadoc>
    <text>&lt;code&gt;DataAdapter&lt;/code&gt; for data provided as array of doubles.</text>
  </javadoc>
  <javadoc>
    <text>Array of input  data values</text>
  </javadoc>
  <declaration type="double[]" name="inputArray" />
  <javadoc>
    <text>Construct an ArrayDataAdapter from a double[] array</text>
    <param>in double[] array holding the data</param>
    <throws>NullArgumentException if in is null</throws>
  </javadoc>
  <method type="constructor" name="ArrayDataAdapter" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="computeStats">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="computeBinStats">
    <scope>
      <declaration type="SummaryStatistics" name="stats" />
    </scope>
  </method>
  <javadoc>
    <text>Fills binStats array (second pass through data file).</text>
    <param>da object providing access to the data</param>
    <throws>IOException  if an IO error occurs</throws>
  </javadoc>
  <method type="void" name="fillBinStats">
    <scope />
    <scope>
      <declaration type="SummaryStatistics" name="stats" />
    </scope>
    <scope />
    <comment>Set up grid</comment>
    <comment>Initialize binStats ArrayList</comment>
    <comment>Filling data in binStats Array</comment>
    <comment>Assign upperBounds based on bin counts</comment>
  </method>
  <javadoc>
    <text>Returns the index of the bin to which the given value belongs</text>
    <param>value  the value whose bin we are trying to find</param>
    <return>the index of the bin containing the value</return>
  </javadoc>
  <method type="int" name="findBin" />
  <javadoc>
    <text>Generates a random value from this distribution.
 * &lt;strong&gt;Preconditions:&lt;/strong&gt;&lt;ul&gt;
 * &lt;li&gt;the distribution must be loaded before invoking this method&lt;/li&gt;&lt;/ul&gt;</text>
    <return>the random value.</return>
    <throws>MathIllegalStateException if the distribution has not been loaded</throws>
  </javadoc>
  <method type="double" name="getNextValue">
    <scope />
    <declaration type="double" name="x" />
    <scope>
      <scope>
        <declaration type="SummaryStatistics" name="stats" />
        <scope>
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>Start with a uniformly distributed random number in (0,1)</comment>
    <comment>Use this to select the bin and generate a Gaussian within the bin</comment>
    <comment>more than one obs</comment>
    <comment>only one obs in bin</comment>
  </method>
  <javadoc>
    <text>Returns a {@link StatisticalSummary} describing this distribution.
 * &lt;strong&gt;Preconditions:&lt;/strong&gt;&lt;ul&gt;
 * &lt;li&gt;the distribution must be loaded before invoking this method&lt;/li&gt;&lt;/ul&gt;</text>
    <return>the sample statistics</return>
    <throws>IllegalStateException if the distribution has not been loaded</throws>
  </javadoc>
  <method type="StatisticalSummary" name="getSampleStats" />
  <javadoc>
    <text>Returns the number of bins.</text>
    <return>the number of bins.</return>
  </javadoc>
  <method type="int" name="getBinCount" />
  <javadoc>
    <text>Returns a List of {@link SummaryStatistics} instances containing
 * statistics describing the values in each of the bins.  The list is
 * indexed on the bin number.</text>
    <return>List of bin statistics.</return>
  </javadoc>
  <method type="List&lt;SummaryStatistics&gt;" name="getBinStats" />
  <javadoc>
    <text>&lt;p&gt;Returns a fresh copy of the array of upper bounds for the bins.
 * Bins are: &lt;br/&gt;
 * [min,upperBounds[0]],(upperBounds[0],upperBounds[1]],...,
 * (upperBounds[binCount-2], upperBounds[binCount-1] = max].&lt;/p&gt;
 * &lt;p&gt;Note: In versions 1.0-2.0 of commons-math, this method
 * incorrectly returned the array of probability generator upper
 * bounds now returned by {@link #getGeneratorUpperBounds()}.&lt;/p&gt;</text>
    <return>array of bin upper bounds</return>
    <since>2.1</since>
  </javadoc>
  <method type="double[]" name="getUpperBounds">
    <declaration type="double[]" name="binUpperBounds" />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;Returns a fresh copy of the array of upper bounds of the subintervals
 * of [0,1] used in generating data from the empirical distribution.
 * Subintervals correspond to bins with lengths proportional to bin counts.&lt;/p&gt;
 * &lt;p&gt;In versions 1.0-2.0 of commons-math, this array was (incorrectly) returned
 * by {@link #getUpperBounds()}.&lt;/p&gt;</text>
    <since>2.1</since>
    <return>array of upper bounds of subintervals used in data generation</return>
  </javadoc>
  <method type="double[]" name="getGeneratorUpperBounds">
    <declaration type="int" name="len" />
    <declaration type="double[]" name="out" />
  </method>
  <javadoc>
    <text>Property indicating whether or not the distribution has been loaded.</text>
    <return>true if the distribution has been loaded</return>
  </javadoc>
  <method type="boolean" name="isLoaded" />
  <javadoc>
    <text>Reseeds the random number generator used by {@link #getNextValue()}.</text>
    <param>seed random generator seed</param>
    <since>3.0</since>
  </javadoc>
  <method type="void" name="reSeed" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.1</since>
  </javadoc>
  <method type="double" name="probability" />
  <javadoc>
    <text>{@inheritDoc}&lt;p&gt;Returns the kernel density normalized so that its integral over each bin
 * equals the bin mass.&lt;/p&gt;
 * &lt;p&gt;Algorithm description: &lt;ol&gt;
 * &lt;li&gt;Find the bin B that x belongs to.&lt;/li&gt;
 * &lt;li&gt;Compute K(B) = the mass of B with respect to the within-bin kernel (i.e., the
 * integral of the kernel density over B).&lt;/li&gt;
 * &lt;li&gt;Return k(x) * P(B) / K(B), where k is the within-bin kernel density
 * and P(B) is the mass of B.&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;</text>
    <since>3.1</since>
  </javadoc>
  <method type="double" name="density">
    <scope />
    <declaration type="int" name="binIndex" />
    <declaration type="RealDistribution" name="kernel" />
  </method>
  <javadoc>
    <text>{@inheritDoc}&lt;p&gt;Algorithm description:&lt;ol&gt;
 * &lt;li&gt;Find the bin B that x belongs to.&lt;/li&gt;
 * &lt;li&gt;Compute P(B) = the mass of B and P(B-) = the combined mass of the bins below B.&lt;/li&gt;
 * &lt;li&gt;Compute K(B) = the probability mass of B with respect to the within-bin kernel
 * and K(B-) = the kernel distribution evaluated at the lower endpoint of B&lt;/li&gt;
 * &lt;li&gt;Return P(B-) + P(B) * [K(x) - K(B-)] / K(B) where
 * K(x) is the within-bin kernel distribution function evaluated at x.&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;</text>
    <since>3.1</since>
  </javadoc>
  <method type="double" name="cumulativeProbability">
    <scope />
    <scope />
    <declaration type="int" name="binIndex" />
    <declaration type="double" name="pBminus" />
    <declaration type="double" name="pB" />
    <declaration type="double[]" name="binBounds" />
    <declaration type="double" name="kB" />
    <declaration type="double" name="lower" />
    <declaration type="RealDistribution" name="kernel" />
    <declaration type="double" name="withinBinCum" />
  </method>
  <javadoc>
    <text>{@inheritDoc}&lt;p&gt;Algorithm description:&lt;ol&gt;
 * &lt;li&gt;Find the smallest i such that the sum of the masses of the bins
 * through i is at least p.&lt;/li&gt;
 * &lt;li&gt;
 * Let K be the within-bin kernel distribution for bin i.&lt;/br&gt;
 * Let K(B) be the mass of B under K. &lt;br/&gt;
 * Let K(B-) be K evaluated at the lower endpoint of B (the combined
 * mass of the bins below B under K).&lt;br/&gt;
 * Let P(B) be the probability of bin i.&lt;br/&gt;
 * Let P(B-) be the sum of the bin masses below bin i. &lt;br/&gt;
 * Let pCrit = p - P(B-)&lt;br/&gt;
 * &lt;li&gt;Return the inverse of K evaluated at &lt;br/&gt;
 * K(B-) + pCrit * K(B) / P(B) &lt;/li&gt;
 * &lt;/ol&gt;&lt;/p&gt;</text>
    <since>3.1</since>
  </javadoc>
  <method type="double" name="inverseCumulativeProbability">
    <scope />
    <scope />
    <scope />
    <declaration type="int" name="i" />
    <scope />
    <declaration type="RealDistribution" name="kernel" />
    <declaration type="double" name="kB" />
    <declaration type="double[]" name="binBounds" />
    <declaration type="double" name="lower" />
    <declaration type="double" name="kBminus" />
    <declaration type="double" name="pB" />
    <declaration type="double" name="pBminus" />
    <declaration type="double" name="pCrit" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.1</since>
  </javadoc>
  <method type="double" name="getNumericalMean" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.1</since>
  </javadoc>
  <method type="double" name="getNumericalVariance" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.1</since>
  </javadoc>
  <method type="double" name="getSupportLowerBound" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.1</since>
  </javadoc>
  <method type="double" name="getSupportUpperBound" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.1</since>
  </javadoc>
  <method type="boolean" name="isSupportLowerBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.1</since>
  </javadoc>
  <method type="boolean" name="isSupportUpperBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.1</since>
  </javadoc>
  <method type="boolean" name="isSupportConnected" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.1</since>
  </javadoc>
  <method type="double" name="sample" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.1</since>
  </javadoc>
  <method type="void" name="reseedRandomGenerator" />
  <javadoc>
    <text>The probability of bin i.</text>
    <param>i the index of the bin</param>
    <return>the probability that selection begins in bin i</return>
  </javadoc>
  <method type="double" name="pB" />
  <javadoc>
    <text>The combined probability of the bins up to but not including bin i.</text>
    <param>i the index of the bin</param>
    <return>the probability that selection begins in a bin below bin i.</return>
  </javadoc>
  <method type="double" name="pBminus" />
  <javadoc>
    <text>Mass of bin i under the within-bin kernel of the bin.</text>
    <param>i index of the bin</param>
    <return>the difference in the within-bin kernel cdf between the
 * upper and lower endpoints of bin i</return>
  </javadoc>
  <method type="double" name="kB">
    <declaration type="double[]" name="binBounds" />
    <declaration type="RealDistribution" name="kernel" />
  </method>
  <javadoc>
    <text>The within-bin kernel of the bin that x belongs to.</text>
    <param>x the value to locate within a bin</param>
    <return>the within-bin kernel of the bin containing x</return>
  </javadoc>
  <method type="RealDistribution" name="k">
    <declaration type="int" name="binIndex" />
  </method>
  <javadoc>
    <text>The combined probability of the bins up to and including binIndex.</text>
    <param>binIndex maximum bin index</param>
    <return>sum of the probabilities of bins through binIndex</return>
  </javadoc>
  <method type="double" name="cumBinP" />
  <javadoc>
    <text>The within-bin smoothing kernel.</text>
    <param>bStats summary statistics for the bin</param>
    <return>within-bin kernel parameterized by bStats</return>
  </javadoc>
  <method type="RealDistribution" name="getKernel">
    <comment>Default to Gaussian</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>Distribution methods ---------------------------</comment>
</class>
