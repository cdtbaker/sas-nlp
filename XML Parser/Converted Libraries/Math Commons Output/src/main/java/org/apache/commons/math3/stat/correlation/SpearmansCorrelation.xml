<?xml version="1.0" encoding="UTF-8"?>
<class name="SpearmansCorrelation">
  <javadoc>
    <text>Spearman's rank correlation. This implementation performs a rank
 * transformation on the input data and then computes {@link PearsonsCorrelation}on the ranked data.
 * &lt;p&gt;
 * By default, ranks are computed using {@link NaturalRanking} with default
 * strategies for handling NaNs and ties in the data (NaNs maximal, ties averaged).
 * The ranking algorithm can be set using a constructor argument.</text>
    <since>2.0</since>
    <version>$Id: SpearmansCorrelation.java 1461822 2013-03-27 19:44:22Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Input data</text>
  </javadoc>
  <declaration type="RealMatrix" name="data" />
  <javadoc>
    <text>Ranking algorithm</text>
  </javadoc>
  <declaration type="RankingAlgorithm" name="rankingAlgorithm" />
  <javadoc>
    <text>Rank correlation</text>
  </javadoc>
  <declaration type="PearsonsCorrelation" name="rankCorrelation" />
  <javadoc>
    <text>Create a SpearmansCorrelation without data.</text>
  </javadoc>
  <method type="constructor" name="SpearmansCorrelation" />
  <javadoc>
    <text>Create a SpearmansCorrelation with the given ranking algorithm.
 * &lt;p&gt;
 * From version 4.0 onwards this constructor will throw an exception
 * if the provided {@link NaturalRanking} uses a {@link NaNStrategy#REMOVED} strategy.</text>
    <param>rankingAlgorithm ranking algorithm</param>
    <since>3.1</since>
  </javadoc>
  <method type="constructor" name="SpearmansCorrelation" />
  <javadoc>
    <text>Create a SpearmansCorrelation from the given data matrix.</text>
    <param>dataMatrix matrix of data with columns representing
 * variables to correlate</param>
  </javadoc>
  <method type="constructor" name="SpearmansCorrelation" />
  <javadoc>
    <text>Create a SpearmansCorrelation with the given input data matrix
 * and ranking algorithm.
 * &lt;p&gt;
 * From version 4.0 onwards this constructor will throw an exception
 * if the provided {@link NaturalRanking} uses a {@link NaNStrategy#REMOVED} strategy.</text>
    <param>dataMatrix matrix of data with columns representing
 * variables to correlate</param>
    <param>rankingAlgorithm ranking algorithm</param>
  </javadoc>
  <method type="constructor" name="SpearmansCorrelation" />
  <javadoc>
    <text>Calculate the Spearman Rank Correlation Matrix.</text>
    <return>Spearman Rank Correlation Matrix</return>
  </javadoc>
  <method type="RealMatrix" name="getCorrelationMatrix" />
  <javadoc>
    <text>Returns a {@link PearsonsCorrelation} instance constructed from the
 * ranked input data. That is,
 * &lt;code&gt;new SpearmansCorrelation(matrix).getRankCorrelation()&lt;/code&gt;
 * is equivalent to
 * &lt;code&gt;new PearsonsCorrelation(rankTransform(matrix))&lt;/code&gt; where
 * &lt;code&gt;rankTransform(matrix)&lt;/code&gt; is the result of applying the
 * configured &lt;code&gt;RankingAlgorithm&lt;/code&gt; to each of the columns of
 * &lt;code&gt;matrix.&lt;/code&gt;</text>
    <return>PearsonsCorrelation among ranked column data</return>
  </javadoc>
  <method type="PearsonsCorrelation" name="getRankCorrelation" />
  <javadoc>
    <text>Computes the Spearman's rank correlation matrix for the columns of the
 * input matrix.</text>
    <param>matrix matrix with columns representing variables to correlate</param>
    <return>correlation matrix</return>
  </javadoc>
  <method type="RealMatrix" name="computeCorrelationMatrix">
    <declaration type="RealMatrix" name="matrixCopy" />
  </method>
  <javadoc>
    <text>Computes the Spearman's rank correlation matrix for the columns of the
 * input rectangular array.  The columns of the array represent values
 * of variables to be correlated.</text>
    <param>matrix matrix with columns representing variables to correlate</param>
    <return>correlation matrix</return>
  </javadoc>
  <method type="RealMatrix" name="computeCorrelationMatrix" />
  <javadoc>
    <text>Computes the Spearman's rank correlation coefficient between the two arrays.</text>
    <param>xArray first data array</param>
    <param>yArray second data array</param>
    <return>Returns Spearman's rank correlation coefficient for the two arrays</return>
    <throws>DimensionMismatchException if the arrays lengths do not match</throws>
    <throws>MathIllegalArgumentException if the array length is less than 2</throws>
  </javadoc>
  <method type="double" name="correlation">
    <scope />
    <scope />
    <scope>
      <declaration type="double[]" name="x" />
      <declaration type="double[]" name="y" />
      <scope>
        <declaration type="Set&lt;Integer&gt;" name="nanPositions" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Applies rank transform to each of the columns of &lt;code&gt;matrix&lt;/code&gt;
 * using the current &lt;code&gt;rankingAlgorithm&lt;/code&gt;.</text>
    <param>matrix matrix to transform</param>
    <return>a rank-transformed matrix</return>
  </javadoc>
  <method type="RealMatrix" name="rankTransform">
    <declaration type="RealMatrix" name="transformed" />
    <scope>
      <declaration type="Set&lt;Integer&gt;" name="nanPositions" />
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
    <scope />
    <scope />
    <comment>if we have found NaN values, we have to update the matrix size</comment>
  </method>
  <javadoc>
    <text>Returns a list containing the indices of NaN values in the input array.</text>
    <param>input the input array</param>
    <return>a list of NaN positions in the input array</return>
  </javadoc>
  <method type="List&lt;Integer&gt;" name="getNaNPositions">
    <declaration type="List&lt;Integer&gt;" name="positions" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Removes all values from the input array at the specified indices.</text>
    <param>input the input array</param>
    <param>indices a set containing the indices to be removed</param>
    <return>the input array without the values at the specified indices</return>
  </javadoc>
  <method type="double[]" name="removeValues">
    <scope />
    <declaration type="double[]" name="result" />
    <scope>
      <scope />
    </scope>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
