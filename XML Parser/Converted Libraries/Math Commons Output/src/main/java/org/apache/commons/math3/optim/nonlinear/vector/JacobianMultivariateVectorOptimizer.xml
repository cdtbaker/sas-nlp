<?xml version="1.0" encoding="UTF-8"?>
<class name="JacobianMultivariateVectorOptimizer">
  <javadoc>
    <text>Base class for implementing optimizers for multivariate vector
 * differentiable functions.
 * It contains boiler-plate code for dealing with Jacobian evaluation.
 * It assumes that the rows of the Jacobian matrix iterate on the model
 * functions while the columns iterate on the parameters; thus, the numbers
 * of rows is equal to the dimension of the {@link Target} while the
 * number of columns is equal to the dimension of the{@link org.apache.commons.math3.optim.InitialGuess InitialGuess}.</text>
    <version>$Id: JacobianMultivariateVectorOptimizer.java 1454464 2013-03-08 16:58:10Z luc $</version>
    <since>3.1</since>
  </javadoc>
  <javadoc>
    <text>Jacobian of the model function.</text>
  </javadoc>
  <declaration type="MultivariateMatrixFunction" name="jacobian" />
  <javadoc>
    <param>checker Convergence checker.</param>
  </javadoc>
  <method type="constructor" name="JacobianMultivariateVectorOptimizer" />
  <javadoc>
    <text>Computes the Jacobian matrix.</text>
    <param>params Point at which the Jacobian must be evaluated.</param>
    <return>the Jacobian at the specified point.</return>
  </javadoc>
  <method type="double[][]" name="computeJacobian" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <param>optData Optimization data. In addition to those documented in{@link MultivariateVectorOptimizer#optimize(OptimizationData)}MultivariateOptimizer}, this method will register the following data:
 * &lt;ul&gt;
 * &lt;li&gt;{@link ModelFunctionJacobian}&lt;/li&gt;
 * &lt;/ul&gt;</param>
    <return>{@inheritDoc}</return>
    <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
    <throws>DimensionMismatchException if the initial guess, target, and weight
 * arguments have inconsistent dimensions.</throws>
  </javadoc>
  <method type="PointVectorValuePair" name="optimize">
    <comment>Set up base class and perform computation.</comment>
  </method>
  <javadoc>
    <text>Scans the list of (required and optional) optimization data that
 * characterize the problem.</text>
    <param>optData Optimization data.
 * The following data will be looked for:
 * &lt;ul&gt;
 * &lt;li&gt;{@link ModelFunctionJacobian}&lt;/li&gt;
 * &lt;/ul&gt;</param>
  </javadoc>
  <method type="void" name="parseOptimizationData">
    <scope>
      <scope />
    </scope>
    <comment>Allow base class to register its own data.</comment>
    <comment>The existing values (as set by the previous call) are reused if</comment>
    <comment>not provided in the argument list.</comment>
    <comment>If more data must be parsed, this statement _must_ be</comment>
    <comment>changed to "continue".</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
