<?xml version="1.0" encoding="UTF-8"?>
<class name="DoubleArray">
  <javadoc>
    <text>Provides a standard interface for double arrays.  Allows different
 * array implementations to support various storage mechanisms
 * such as automatic expansion, contraction, and array "rolling".</text>
    <version>$Id: DoubleArray.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <method name="getNumElements" type="int" />
  <javadoc>
    <text>Returns the number of elements currently in the array.  Please note
 * that this may be different from the length of the internal storage array.</text>
    <return>number of elements</return>
  </javadoc>
  <method name="getElement" type="double" />
  <javadoc>
    <text>Returns the element at the specified index.  Note that if an
 * out of bounds index is supplied a ArrayIndexOutOfBoundsException
 * will be thrown.</text>
    <param>index index to fetch a value from</param>
    <return>value stored at the specified index</return>
    <throws>ArrayIndexOutOfBoundsException if &lt;code&gt;index&lt;/code&gt; is less than
 * zero or is greater than &lt;code&gt;getNumElements() - 1&lt;/code&gt;.</throws>
  </javadoc>
  <method name="setElement" type="void" />
  <javadoc>
    <text>Sets the element at the specified index.  If the specified index is greater than
 * &lt;code&gt;getNumElements() - 1&lt;/code&gt;, the &lt;code&gt;numElements&lt;/code&gt; property
 * is increased to &lt;code&gt;index +1&lt;/code&gt; and additional storage is allocated
 * (if necessary) for the new element and all  (uninitialized) elements
 * between the new element and the previous end of the array).</text>
    <param>index index to store a value in</param>
    <param>value value to store at the specified index</param>
    <throws>ArrayIndexOutOfBoundsException if &lt;code&gt;index&lt;/code&gt; is less than
 * zero.</throws>
  </javadoc>
  <method name="addElement" type="void" />
  <javadoc>
    <text>Adds an element to the end of this expandable array</text>
    <param>value to be added to end of array</param>
  </javadoc>
  <method name="addElements" type="void" />
  <javadoc>
    <text>Adds elements to the end of this expandable array</text>
    <param>values to be added to end of array</param>
  </javadoc>
  <method name="addElementRolling" type="double" />
  <javadoc>
    <text>&lt;p&gt;
 * Adds an element to the end of the array and removes the first
 * element in the array.  Returns the discarded first element.
 * The effect is similar to a push operation in a FIFO queue.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Example: If the array contains the elements 1, 2, 3, 4 (in that order)
 * and addElementRolling(5) is invoked, the result is an array containing
 * the entries 2, 3, 4, 5 and the value returned is 1.
 * &lt;/p&gt;</text>
    <param>value the value to be added to the array</param>
    <return>the value which has been discarded or "pushed" out of the array
 * by this rolling insert</return>
  </javadoc>
  <method name="getElements" type="double[]" />
  <javadoc>
    <text>Returns a double[] array containing the elements of this
 * &lt;code&gt;DoubleArray&lt;/code&gt;.  If the underlying implementation is
 * array-based, this method should always return a copy, rather than a
 * reference to the underlying array so that changes made to the returned
 * array have no effect on the &lt;code&gt;DoubleArray.&lt;/code&gt;</text>
    <return>all elements added to the array</return>
  </javadoc>
  <method name="clear" type="void" />
  <javadoc>
    <text>Clear the double array</text>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
