<?xml version="1.0" encoding="UTF-8"?>
<class name="LeastSquaresConverter">
  <javadoc>
    <text>This class converts{@link MultivariateVectorFunction vectorial objective functions} to{@link MultivariateFunction scalar objective functions}when the goal is to minimize them.
 * &lt;br/&gt;
 * This class is mostly used when the vectorial objective function represents
 * a theoretical result computed from a point set applied to a model and
 * the models point must be adjusted to fit the theoretical result to some
 * reference observations. The observations may be obtained for example from
 * physical measurements whether the model is built from theoretical
 * considerations.
 * &lt;br/&gt;
 * This class computes a possibly weighted squared sum of the residuals, which is
 * a scalar value. The residuals are the difference between the theoretical model
 * (i.e. the output of the vectorial objective function) and the observations. The
 * class implements the {@link MultivariateFunction} interface and can therefore be
 * minimized by any optimizer supporting scalar objectives functions.This is one way
 * to perform a least square estimation. There are other ways to do this without using
 * this converter, as some optimization algorithms directly support vectorial objective
 * functions.
 * &lt;br/&gt;
 * This class support combination of residuals with or without weights and correlations.</text>
    <see>MultivariateFunction</see>
    <see>MultivariateVectorFunction</see>
    <version>$Id: LeastSquaresConverter.java 1435539 2013-01-19 13:27:24Z tn $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>Underlying vectorial function.</text>
  </javadoc>
  <declaration type="MultivariateVectorFunction" name="function" />
  <javadoc>
    <text>Observations to be compared to objective function to compute residuals.</text>
  </javadoc>
  <declaration type="double[]" name="observations" />
  <javadoc>
    <text>Optional weights for the residuals.</text>
  </javadoc>
  <declaration type="double[]" name="weights" />
  <javadoc>
    <text>Optional scaling matrix (weight and correlations) for the residuals.</text>
  </javadoc>
  <declaration type="RealMatrix" name="scale" />
  <javadoc>
    <text>Builds a simple converter for uncorrelated residuals with identical
 * weights.</text>
    <param>function vectorial residuals function to wrap</param>
    <param>observations observations to be compared to objective function to compute residuals</param>
  </javadoc>
  <method type="constructor" name="LeastSquaresConverter" />
  <javadoc>
    <text>Builds a simple converter for uncorrelated residuals with the
 * specified weights.
 * &lt;p&gt;
 * The scalar objective function value is computed as:
 * &lt;pre&gt;
 * objective = &amp;sum;weight&lt;sub&gt;i&lt;/sub&gt;(observation&lt;sub&gt;i&lt;/sub&gt;-objective&lt;sub&gt;i&lt;/sub&gt;)&lt;sup&gt;2&lt;/sup&gt;
 * &lt;/pre&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * Weights can be used for example to combine residuals with different standard
 * deviations. As an example, consider a residuals array in which even elements
 * are angular measurements in degrees with a 0.01&amp;deg; standard deviation and
 * odd elements are distance measurements in meters with a 15m standard deviation.
 * In this case, the weights array should be initialized with value
 * 1.0/(0.01&lt;sup&gt;2&lt;/sup&gt;) in the even elements and 1.0/(15.0&lt;sup&gt;2&lt;/sup&gt;) in the
 * odd elements (i.e. reciprocals of variances).
 * &lt;/p&gt;
 * &lt;p&gt;
 * The array computed by the objective function, the observations array and the
 * weights array must have consistent sizes or a {@link DimensionMismatchException}will be triggered while computing the scalar objective.
 * &lt;/p&gt;</text>
    <param>function vectorial residuals function to wrap</param>
    <param>observations observations to be compared to objective function to compute residuals</param>
    <param>weights weights to apply to the residuals</param>
    <throws>DimensionMismatchException if the observations vector and the weights
 * vector dimensions do not match (objective function dimension is checked only when
 * the {@link #value(double[])} method is called)</throws>
  </javadoc>
  <method type="constructor" name="LeastSquaresConverter">
    <scope />
  </method>
  <javadoc>
    <text>Builds a simple converter for correlated residuals with the
 * specified weights.
 * &lt;p&gt;
 * The scalar objective function value is computed as:
 * &lt;pre&gt;
 * objective = y&lt;sup&gt;T&lt;/sup&gt;y with y = scale&amp;times;(observation-objective)
 * &lt;/pre&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * The array computed by the objective function, the observations array and the
 * the scaling matrix must have consistent sizes or a {@link DimensionMismatchException}will be triggered while computing the scalar objective.
 * &lt;/p&gt;</text>
    <param>function vectorial residuals function to wrap</param>
    <param>observations observations to be compared to objective function to compute residuals</param>
    <param>scale scaling matrix</param>
    <throws>DimensionMismatchException if the observations vector and the scale
 * matrix dimensions do not match (objective function dimension is checked only when
 * the {@link #value(double[])} method is called)</throws>
  </javadoc>
  <method type="constructor" name="LeastSquaresConverter">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="value">
    <declaration type="double[]" name="residuals" />
    <scope />
    <scope />
    <declaration type="double" name="sumSquares" />
    <scope>
      <scope>
        <declaration type="double" name="ri" />
      </scope>
    </scope>
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <comment>compute residuals</comment>
    <comment>compute sum of squares</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
