<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractWell">
  <javadoc>
    <text>This abstract class implements the WELL class of pseudo-random number generator
 * from Fran&amp;ccedil;ois Panneton, Pierre L'Ecuyer and Makoto Matsumoto.
 * &lt;p&gt;This generator is described in a paper by Fran&amp;ccedil;ois Panneton,
 * Pierre L'Ecuyer and Makoto Matsumoto &lt;a
 * href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng.pdf"&gt;Improved
 * Long-Period Generators Based on Linear Recurrences Modulo 2&lt;/a&gt; ACM
 * Transactions on Mathematical Software, 32, 1 (2006). The errata for the paper
 * are in &lt;a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt"&gt;wellrng-errata.txt&lt;/a&gt;.&lt;/p&gt;</text>
    <see>&lt;a href="http://www.iro.umontreal.ca/~panneton/WELLRNG.html"&gt;WELL Random number generator&lt;/a&gt;</see>
    <version>$Id: AbstractWell.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>2.2</since>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Current index in the bytes pool.</text>
  </javadoc>
  <declaration type="int" name="index" />
  <javadoc>
    <text>Bytes pool.</text>
  </javadoc>
  <declaration type="int[]" name="v" />
  <javadoc>
    <text>Index indirection table giving for each index its predecessor taking table size into account.</text>
  </javadoc>
  <declaration type="int[]" name="iRm1" />
  <javadoc>
    <text>Index indirection table giving for each index its second predecessor taking table size into account.</text>
  </javadoc>
  <declaration type="int[]" name="iRm2" />
  <javadoc>
    <text>Index indirection table giving for each index the value index + m1 taking table size into account.</text>
  </javadoc>
  <declaration type="int[]" name="i1" />
  <javadoc>
    <text>Index indirection table giving for each index the value index + m2 taking table size into account.</text>
  </javadoc>
  <declaration type="int[]" name="i2" />
  <javadoc>
    <text>Index indirection table giving for each index the value index + m3 taking table size into account.</text>
  </javadoc>
  <declaration type="int[]" name="i3" />
  <javadoc>
    <text>Creates a new random number generator.
 * &lt;p&gt;The instance is initialized using the current time plus the
 * system identity hash code of this instance as the seed.&lt;/p&gt;</text>
    <param>k number of bits in the pool (not necessarily a multiple of 32)</param>
    <param>m1 first parameter of the algorithm</param>
    <param>m2 second parameter of the algorithm</param>
    <param>m3 third parameter of the algorithm</param>
  </javadoc>
  <method type="constructor" name="AbstractWell" />
  <javadoc>
    <text>Creates a new random number generator using a single int seed.</text>
    <param>k number of bits in the pool (not necessarily a multiple of 32)</param>
    <param>m1 first parameter of the algorithm</param>
    <param>m2 second parameter of the algorithm</param>
    <param>m3 third parameter of the algorithm</param>
    <param>seed the initial seed (32 bits integer)</param>
  </javadoc>
  <method type="constructor" name="AbstractWell" />
  <javadoc>
    <text>Creates a new random number generator using an int array seed.</text>
    <param>k number of bits in the pool (not necessarily a multiple of 32)</param>
    <param>m1 first parameter of the algorithm</param>
    <param>m2 second parameter of the algorithm</param>
    <param>m3 third parameter of the algorithm</param>
    <param>seed the initial seed (32 bits integers array), if null
 * the seed of the generator will be related to the current time</param>
  </javadoc>
  <method type="constructor" name="AbstractWell">
    <declaration type="int" name="w" />
    <declaration type="int" name="r" />
    <scope />
    <comment>the bits pool contains k bits, k = r w - p where r is the number</comment>
    <comment>of w bits blocks, w is the block size (always 32 in the original paper)</comment>
    <comment>and p is the number of unused bits in the last block</comment>
    <comment>precompute indirection index tables. These tables are used for optimizing access</comment>
    <comment>they allow saving computations like "(j + r - 2) % r" with costly modulo operations</comment>
    <comment>initialize the pool content</comment>
  </method>
  <javadoc>
    <text>Creates a new random number generator using a single long seed.</text>
    <param>k number of bits in the pool (not necessarily a multiple of 32)</param>
    <param>m1 first parameter of the algorithm</param>
    <param>m2 second parameter of the algorithm</param>
    <param>m3 third parameter of the algorithm</param>
    <param>seed the initial seed (64 bits integer)</param>
  </javadoc>
  <method type="constructor" name="AbstractWell" />
  <javadoc>
    <text>Reinitialize the generator as if just built with the given int seed.
 * &lt;p&gt;The state of the generator is exactly the same as a new
 * generator built with the same seed.&lt;/p&gt;</text>
    <param>seed the initial seed (32 bits integer)</param>
  </javadoc>
  <method type="void" name="setSeed" />
  <javadoc>
    <text>Reinitialize the generator as if just built with the given int array seed.
 * &lt;p&gt;The state of the generator is exactly the same as a new
 * generator built with the same seed.&lt;/p&gt;</text>
    <param>seed the initial seed (32 bits integers array). If null
 * the seed of the generator will be the system time plus the system identity
 * hash code of the instance.</param>
  </javadoc>
  <method type="void" name="setSeed">
    <scope />
    <scope>
      <scope>
        <declaration type="long" name="l" />
      </scope>
    </scope>
    <comment>Clear normal deviate cache</comment>
  </method>
  <javadoc>
    <text>Reinitialize the generator as if just built with the given long seed.
 * &lt;p&gt;The state of the generator is exactly the same as a new
 * generator built with the same seed.&lt;/p&gt;</text>
    <param>seed the initial seed (64 bits integer)</param>
  </javadoc>
  <method type="void" name="setSeed" />
  <method name="next" type="int" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
