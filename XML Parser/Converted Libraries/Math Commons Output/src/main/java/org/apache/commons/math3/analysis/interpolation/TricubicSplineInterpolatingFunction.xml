<?xml version="1.0" encoding="UTF-8"?>
<class name="TricubicSplineInterpolatingFunction">
  <javadoc>
    <text>Function that implements the
 * &lt;a href="http://en.wikipedia.org/wiki/Tricubic_interpolation"&gt;
 * tricubic spline interpolation&lt;/a&gt;, as proposed in
 * &lt;quote&gt;
 * Tricubic interpolation in three dimensions&lt;br/&gt;
 * F. Lekien and J. Marsden&lt;br/&gt;
 * &lt;em&gt;Int. J. Numer. Meth. Engng&lt;/em&gt; 2005; &lt;b&gt;63&lt;/b&gt;:455-471
 * &lt;/quote&gt;</text>
    <since>2.2</since>
    <version>$Id: TricubicSplineInterpolatingFunction.java 1385314 2012-09-16 16:35:49Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Matrix to compute the spline coefficients from the function values
 * and function derivatives values</text>
  </javadoc>
  <declaration type="double[][]" name="AINV" />
  <javadoc>
    <text>Samples x-coordinates</text>
  </javadoc>
  <declaration type="double[]" name="xval" />
  <javadoc>
    <text>Samples y-coordinates</text>
  </javadoc>
  <declaration type="double[]" name="yval" />
  <javadoc>
    <text>Samples z-coordinates</text>
  </javadoc>
  <declaration type="double[]" name="zval" />
  <javadoc>
    <text>Set of cubic splines pacthing the whole data grid</text>
  </javadoc>
  <declaration type="TricubicSplineFunction[][][]" name="splines" />
  <javadoc>
    <param>x Sample values of the x-coordinate, in increasing order.</param>
    <param>y Sample values of the y-coordinate, in increasing order.</param>
    <param>z Sample values of the y-coordinate, in increasing order.</param>
    <param>f Values of the function on every grid point.</param>
    <param>dFdX Values of the partial derivative of function with respect to x on every grid point.</param>
    <param>dFdY Values of the partial derivative of function with respect to y on every grid point.</param>
    <param>dFdZ Values of the partial derivative of function with respect to z on every grid point.</param>
    <param>d2FdXdY Values of the cross partial derivative of function on every grid point.</param>
    <param>d2FdXdZ Values of the cross partial derivative of function on every grid point.</param>
    <param>d2FdYdZ Values of the cross partial derivative of function on every grid point.</param>
    <param>d3FdXdYdZ Values of the cross partial derivative of function on every grid point.</param>
    <throws>NoDataException if any of the arrays has zero length.</throws>
    <throws>DimensionMismatchException if the various arrays do not contain the expected number of elements.</throws>
    <throws>NonMonotonicSequenceException if {@code x}, {@code y} or {@code z} are not strictly increasing.</throws>
  </javadoc>
  <method type="constructor" name="TricubicSplineInterpolatingFunction">
    <declaration type="int" name="xLen" />
    <declaration type="int" name="yLen" />
    <declaration type="int" name="zLen" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <declaration type="int" name="lastI" />
    <declaration type="int" name="lastJ" />
    <declaration type="int" name="lastK" />
    <scope>
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <declaration type="int" name="ip1" />
      <scope>
        <scope />
        <scope />
        <scope />
        <scope />
        <scope />
        <scope />
        <scope />
        <scope />
        <declaration type="int" name="jp1" />
        <scope>
          <declaration type="int" name="kp1" />
          <declaration type="double[][]" name="beta" />
        </scope>
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <throws>OutOfRangeException if any of the variables is outside its interpolation range.</throws>
  </javadoc>
  <method type="double" name="value">
    <declaration type="int" name="i" />
    <scope />
    <declaration type="int" name="j" />
    <scope />
    <declaration type="int" name="k" />
    <scope />
    <declaration type="double" name="xN" />
    <declaration type="double" name="yN" />
    <declaration type="double" name="zN" />
  </method>
  <javadoc>
    <param>c Coordinate.</param>
    <param>val Coordinate samples.</param>
    <return>the index in {@code val} corresponding to the interval containing {@code c}, or {@code -1}if {@code c} is out of the range defined by the end values of {@code val}.</return>
  </javadoc>
  <method type="int" name="searchIndex">
    <scope />
    <declaration type="int" name="max" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Compute the spline coefficients from the list of function values and
 * function partial derivatives values at the four corners of a grid
 * element. They must be specified in the following order:
 * &lt;ul&gt;
 * &lt;li&gt;f(0,0,0)&lt;/li&gt;
 * &lt;li&gt;f(1,0,0)&lt;/li&gt;
 * &lt;li&gt;f(0,1,0)&lt;/li&gt;
 * &lt;li&gt;f(1,1,0)&lt;/li&gt;
 * &lt;li&gt;f(0,0,1)&lt;/li&gt;
 * &lt;li&gt;f(1,0,1)&lt;/li&gt;
 * &lt;li&gt;f(0,1,1)&lt;/li&gt;
 * &lt;li&gt;f(1,1,1)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(0,0,0)&lt;/li&gt;
 * &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(1,1,1)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(0,0,0)&lt;/li&gt;
 * &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(1,1,1)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;z&lt;/sub&gt;(0,0,0)&lt;/li&gt;
 * &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;z&lt;/sub&gt;(1,1,1)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(0,0,0)&lt;/li&gt;
 * &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(1,1,1)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;xz&lt;/sub&gt;(0,0,0)&lt;/li&gt;
 * &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;xz&lt;/sub&gt;(1,1,1)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;yz&lt;/sub&gt;(0,0,0)&lt;/li&gt;
 * &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;yz&lt;/sub&gt;(1,1,1)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;xyz&lt;/sub&gt;(0,0,0)&lt;/li&gt;
 * &lt;li&gt;... &lt;em&gt;(same order as above)&lt;/em&gt;&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;xyz&lt;/sub&gt;(1,1,1)&lt;/li&gt;
 * &lt;/ul&gt;
 * where the subscripts indicate the partial derivative with respect to
 * the corresponding variable(s).</text>
    <param>beta List of function values and function partial derivatives values.</param>
    <return>the spline coefficients.</return>
  </javadoc>
  <method type="double[]" name="computeSplineCoefficients">
    <declaration type="int" name="sz" />
    <declaration type="double[]" name="a" />
    <scope>
      <declaration type="double" name="result" />
      <declaration type="double[]" name="row" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>3D-spline function.</text>
    <version>$Id: TricubicSplineInterpolatingFunction.java 1385314 2012-09-16 16:35:49Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Number of points.</text>
  </javadoc>
  <declaration type="short" name="N" />
  <javadoc>
    <text>Coefficients</text>
  </javadoc>
  <declaration type="double[][][]" name="a" />
  <javadoc>
    <param>aV List of spline coefficients.</param>
  </javadoc>
  <method type="constructor" name="TricubicSplineFunction">
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <param>x x-coordinate of the interpolation point.</param>
    <param>y y-coordinate of the interpolation point.</param>
    <param>z z-coordinate of the interpolation point.</param>
    <return>the interpolated value.</return>
    <throws>OutOfRangeException if {@code x}, {@code y} or{@code z} are not in the interval {@code [0, 1]}.</throws>
  </javadoc>
  <method type="double" name="value">
    <scope />
    <scope />
    <scope />
    <declaration type="double" name="x2" />
    <declaration type="double" name="x3" />
    <declaration type="double[]" name="pX" />
    <declaration type="double" name="y2" />
    <declaration type="double" name="y3" />
    <declaration type="double[]" name="pY" />
    <declaration type="double" name="z2" />
    <declaration type="double" name="z3" />
    <declaration type="double[]" name="pZ" />
    <declaration type="double" name="result" />
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
