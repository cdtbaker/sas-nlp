<?xml version="1.0" encoding="UTF-8"?>
<class name="Fraction">
  <javadoc>
    <text>Representation of a rational number.
 * implements Serializable since 2.0</text>
    <since>1.1</since>
    <version>$Id: Fraction.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>A fraction representing "2 / 1".</text>
  </javadoc>
  <declaration type="Fraction" name="TWO" />
  <javadoc>
    <text>A fraction representing "1".</text>
  </javadoc>
  <declaration type="Fraction" name="ONE" />
  <javadoc>
    <text>A fraction representing "0".</text>
  </javadoc>
  <declaration type="Fraction" name="ZERO" />
  <javadoc>
    <text>A fraction representing "4/5".</text>
  </javadoc>
  <declaration type="Fraction" name="FOUR_FIFTHS" />
  <javadoc>
    <text>A fraction representing "1/5".</text>
  </javadoc>
  <declaration type="Fraction" name="ONE_FIFTH" />
  <javadoc>
    <text>A fraction representing "1/2".</text>
  </javadoc>
  <declaration type="Fraction" name="ONE_HALF" />
  <javadoc>
    <text>A fraction representing "1/4".</text>
  </javadoc>
  <declaration type="Fraction" name="ONE_QUARTER" />
  <javadoc>
    <text>A fraction representing "1/3".</text>
  </javadoc>
  <declaration type="Fraction" name="ONE_THIRD" />
  <javadoc>
    <text>A fraction representing "3/5".</text>
  </javadoc>
  <declaration type="Fraction" name="THREE_FIFTHS" />
  <javadoc>
    <text>A fraction representing "3/4".</text>
  </javadoc>
  <declaration type="Fraction" name="THREE_QUARTERS" />
  <javadoc>
    <text>A fraction representing "2/5".</text>
  </javadoc>
  <declaration type="Fraction" name="TWO_FIFTHS" />
  <javadoc>
    <text>A fraction representing "2/4".</text>
  </javadoc>
  <declaration type="Fraction" name="TWO_QUARTERS" />
  <javadoc>
    <text>A fraction representing "2/3".</text>
  </javadoc>
  <declaration type="Fraction" name="TWO_THIRDS" />
  <javadoc>
    <text>A fraction representing "-1 / 1".</text>
  </javadoc>
  <declaration type="Fraction" name="MINUS_ONE" />
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>The denominator.</text>
  </javadoc>
  <declaration type="int" name="denominator" />
  <javadoc>
    <text>The numerator.</text>
  </javadoc>
  <declaration type="int" name="numerator" />
  <javadoc>
    <text>Create a fraction given the double value.</text>
    <param>value the double value to convert to a fraction.</param>
    <throws>FractionConversionException if the continued fraction failed to
 * converge.</throws>
  </javadoc>
  <method type="constructor" name="Fraction" />
  <javadoc>
    <text>Create a fraction given the double value and maximum error allowed.
 * &lt;p&gt;
 * References:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;a href="http://mathworld.wolfram.com/ContinuedFraction.html"&gt;
 * Continued Fraction&lt;/a&gt; equations (11) and (22)-(26)&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;</text>
    <param>value the double value to convert to a fraction.</param>
    <param>epsilon maximum error allowed.  The resulting fraction is within{@code epsilon} of {@code value}, in absolute terms.</param>
    <param>maxIterations maximum number of convergents</param>
    <throws>FractionConversionException if the continued fraction failed to
 * converge.</throws>
  </javadoc>
  <method type="constructor" name="Fraction" />
  <javadoc>
    <text>Create a fraction given the double value and maximum denominator.
 * &lt;p&gt;
 * References:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;a href="http://mathworld.wolfram.com/ContinuedFraction.html"&gt;
 * Continued Fraction&lt;/a&gt; equations (11) and (22)-(26)&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;</text>
    <param>value the double value to convert to a fraction.</param>
    <param>maxDenominator The maximum allowed value for denominator</param>
    <throws>FractionConversionException if the continued fraction failed to
 * converge</throws>
  </javadoc>
  <method type="constructor" name="Fraction" />
  <javadoc>
    <text>Create a fraction given the double value and either the maximum error
 * allowed or the maximum number of denominator digits.
 * &lt;p&gt;
 * NOTE: This constructor is called with EITHER
 * - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
 * (that way the maxDenominator has no effect).
 * OR
 * - a valid maxDenominator value and the epsilon value set to zero
 * (that way epsilon only has effect if there is an exact match before
 * the maxDenominator value is reached).
 * &lt;/p&gt;&lt;p&gt;
 * It has been done this way so that the same code can be (re)used for both
 * scenarios. However this could be confusing to users if it were part of
 * the public API and this constructor should therefore remain PRIVATE.
 * &lt;/p&gt;
 * See JIRA issue ticket MATH-181 for more details:
 * https://issues.apache.org/jira/browse/MATH-181</text>
    <param>value the double value to convert to a fraction.</param>
    <param>epsilon maximum error allowed.  The resulting fraction is within{@code epsilon} of {@code value}, in absolute terms.</param>
    <param>maxDenominator maximum denominator value allowed.</param>
    <param>maxIterations maximum number of convergents</param>
    <throws>FractionConversionException if the continued fraction failed to
 * converge.</throws>
  </javadoc>
  <method type="constructor" name="Fraction">
    <declaration type="long" name="overflow" />
    <declaration type="double" name="r0" />
    <declaration type="long" name="a0" />
    <scope />
    <scope />
    <declaration type="long" name="p0" />
    <declaration type="long" name="q0" />
    <declaration type="long" name="p1" />
    <declaration type="long" name="q1" />
    <declaration type="long" name="p2" />
    <declaration type="long" name="q2" />
    <declaration type="int" name="n" />
    <declaration type="boolean" name="stop" />
    <scope>
      <declaration type="double" name="r1" />
      <declaration type="long" name="a1" />
      <scope />
      <declaration type="double" name="convergent" />
      <scope />
      <scope />
    </scope>
    <scope />
    <scope />
    <scope />
    <comment>check for (almost) integer arguments, which should not go</comment>
    <comment>to iterations.</comment>
  </method>
  <javadoc>
    <text>Create a fraction from an int.
 * The fraction is num / 1.</text>
    <param>num the numerator.</param>
  </javadoc>
  <method type="constructor" name="Fraction" />
  <javadoc>
    <text>Create a fraction given the numerator and denominator.  The fraction is
 * reduced to lowest terms.</text>
    <param>num the numerator.</param>
    <param>den the denominator.</param>
    <throws>MathArithmeticException if the denominator is {@code zero}</throws>
  </javadoc>
  <method type="constructor" name="Fraction">
    <scope />
    <scope>
      <scope />
    </scope>
    <declaration type="int" name="d" />
    <scope />
    <scope />
    <comment>reduce numerator and denominator by greatest common denominator.</comment>
    <comment>move sign to numerator.</comment>
  </method>
  <javadoc>
    <text>Returns the absolute value of this fraction.</text>
    <return>the absolute value.</return>
  </javadoc>
  <method type="Fraction" name="abs">
    <declaration type="Fraction" name="ret" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Compares this object to another based on size.</text>
    <param>object the object to compare to</param>
    <return>-1 if this is less than &lt;tt&gt;object&lt;/tt&gt;, +1 if this is greater
 * than &lt;tt&gt;object&lt;/tt&gt;, 0 if they are equal.</return>
  </javadoc>
  <method type="int" name="compareTo">
    <declaration type="long" name="nOd" />
    <declaration type="long" name="dOn" />
  </method>
  <javadoc>
    <text>Gets the fraction as a &lt;tt&gt;double&lt;/tt&gt;. This calculates the fraction as
 * the numerator divided by denominator.</text>
    <return>the fraction as a &lt;tt&gt;double&lt;/tt&gt;</return>
  </javadoc>
  <method type="double" name="doubleValue" />
  <javadoc>
    <text>Test for the equality of two fractions.  If the lowest term
 * numerator and denominators are the same for both fractions, the two
 * fractions are considered to be equal.</text>
    <param>other fraction to test for equality to this fraction</param>
    <return>true if two fractions are equal, false if object is
 * &lt;tt&gt;null&lt;/tt&gt;, not an instance of {@link Fraction}, or not equal
 * to this fraction instance.</return>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope>
      <declaration type="Fraction" name="rhs" />
    </scope>
    <comment>since fractions are always in lowest terms, numerators and</comment>
    <comment>denominators can be compared directly for equality.</comment>
  </method>
  <javadoc>
    <text>Gets the fraction as a &lt;tt&gt;float&lt;/tt&gt;. This calculates the fraction as
 * the numerator divided by denominator.</text>
    <return>the fraction as a &lt;tt&gt;float&lt;/tt&gt;</return>
  </javadoc>
  <method type="float" name="floatValue" />
  <javadoc>
    <text>Access the denominator.</text>
    <return>the denominator.</return>
  </javadoc>
  <method type="int" name="getDenominator" />
  <javadoc>
    <text>Access the numerator.</text>
    <return>the numerator.</return>
  </javadoc>
  <method type="int" name="getNumerator" />
  <javadoc>
    <text>Gets a hashCode for the fraction.</text>
    <return>a hash code value for this object</return>
  </javadoc>
  <method type="int" name="hashCode" />
  <javadoc>
    <text>Gets the fraction as an &lt;tt&gt;int&lt;/tt&gt;. This returns the whole number part
 * of the fraction.</text>
    <return>the whole number fraction part</return>
  </javadoc>
  <method type="int" name="intValue" />
  <javadoc>
    <text>Gets the fraction as a &lt;tt&gt;long&lt;/tt&gt;. This returns the whole number part
 * of the fraction.</text>
    <return>the whole number fraction part</return>
  </javadoc>
  <method type="long" name="longValue" />
  <javadoc>
    <text>Return the additive inverse of this fraction.</text>
    <return>the negation of this fraction.</return>
  </javadoc>
  <method type="Fraction" name="negate">
    <scope />
  </method>
  <javadoc>
    <text>Return the multiplicative inverse of this fraction.</text>
    <return>the reciprocal fraction</return>
  </javadoc>
  <method type="Fraction" name="reciprocal" />
  <javadoc>
    <text>&lt;p&gt;Adds the value of this fraction to another, returning the result in reduced form.
 * The algorithm follows Knuth, 4.5.1.&lt;/p&gt;</text>
    <param>fraction  the fraction to add, must not be {@code null}</param>
    <return>a {@code Fraction} instance with the resulting values</return>
    <throws>NullArgumentException if the fraction is {@code null}</throws>
    <throws>MathArithmeticException if the resulting numerator or denominator exceeds{@code Integer.MAX_VALUE}</throws>
  </javadoc>
  <method type="Fraction" name="add">
    <comment>return addSub(fraction, true  add );</comment>
  </method>
  <javadoc>
    <text>Add an integer to the fraction.</text>
    <param>i the &lt;tt&gt;integer&lt;/tt&gt; to add.</param>
    <return>this + i</return>
  </javadoc>
  <method type="Fraction" name="add" />
  <javadoc>
    <text>&lt;p&gt;Subtracts the value of another fraction from the value of this one,
 * returning the result in reduced form.&lt;/p&gt;</text>
    <param>fraction  the fraction to subtract, must not be {@code null}</param>
    <return>a {@code Fraction} instance with the resulting values</return>
    <throws>NullArgumentException if the fraction is {@code null}</throws>
    <throws>MathArithmeticException if the resulting numerator or denominator
 * cannot be represented in an {@code int}.</throws>
  </javadoc>
  <method type="Fraction" name="subtract">
    <comment>return addSub(fraction, false  subtract );</comment>
  </method>
  <javadoc>
    <text>Subtract an integer from the fraction.</text>
    <param>i the &lt;tt&gt;integer&lt;/tt&gt; to subtract.</param>
    <return>this - i</return>
  </javadoc>
  <method type="Fraction" name="subtract" />
  <javadoc>
    <text>Implement add and subtract using algorithm described in Knuth 4.5.1.</text>
    <param>fraction the fraction to subtract, must not be {@code null}</param>
    <param>isAdd true to add, false to subtract</param>
    <return>a {@code Fraction} instance with the resulting values</return>
    <throws>NullArgumentException if the fraction is {@code null}</throws>
    <throws>MathArithmeticException if the resulting numerator or denominator
 * cannot be represented in an {@code int}.</throws>
  </javadoc>
  <method type="Fraction" name="addSub">
    <scope />
    <scope />
    <scope />
    <declaration type="int" name="d1" />
    <scope>
      <declaration type="int" name="uvp" />
      <declaration type="int" name="upv" />
    </scope>
    <declaration type="BigInteger" name="uvp" />
    <declaration type="BigInteger" name="upv" />
    <declaration type="BigInteger" name="t" />
    <declaration type="int" name="tmodd1" />
    <declaration type="int" name="d2" />
    <declaration type="BigInteger" name="w" />
    <scope />
    <comment>zero is identity for addition.</comment>
    <comment>if denominators are randomly distributed, d1 will be 1 about 61%</comment>
    <comment>of the time.</comment>
    <comment>result is ( (u*v' +/- u'v) / u'v')</comment>
    <comment>the quantity 't' requires 65 bits of precision; see knuth 4.5.1</comment>
    <comment>exercise 7.  we're going to use a BigInteger.</comment>
    <comment>t = u(v'/d1) +/- v(u'/d1)</comment>
    <comment>but d2 doesn't need extra precision because</comment>
    <comment>d2 = gcd(t,d1) = gcd(t mod d1, d1)</comment>
    <comment>result is (t/d2) / (u'/d1)(v'/d2)</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;Multiplies the value of this fraction by another, returning the
 * result in reduced form.&lt;/p&gt;</text>
    <param>fraction  the fraction to multiply by, must not be {@code null}</param>
    <return>a {@code Fraction} instance with the resulting values</return>
    <throws>NullArgumentException if the fraction is {@code null}</throws>
    <throws>MathArithmeticException if the resulting numerator or denominator exceeds{@code Integer.MAX_VALUE}</throws>
  </javadoc>
  <method type="Fraction" name="multiply">
    <scope />
    <scope />
    <declaration type="int" name="d1" />
    <declaration type="int" name="d2" />
    <comment>knuth 4.5.1</comment>
    <comment>make sure we don't overflow unless the result *must* overflow.</comment>
  </method>
  <javadoc>
    <text>Multiply the fraction by an integer.</text>
    <param>i the &lt;tt&gt;integer&lt;/tt&gt; to multiply by.</param>
    <return>this * i</return>
  </javadoc>
  <method type="Fraction" name="multiply" />
  <javadoc>
    <text>&lt;p&gt;Divide the value of this fraction by another.&lt;/p&gt;</text>
    <param>fraction  the fraction to divide by, must not be {@code null}</param>
    <return>a {@code Fraction} instance with the resulting values</return>
    <throws>IllegalArgumentException if the fraction is {@code null}</throws>
    <throws>MathArithmeticException if the fraction to divide by is zero</throws>
    <throws>MathArithmeticException if the resulting numerator or denominator exceeds{@code Integer.MAX_VALUE}</throws>
  </javadoc>
  <method type="Fraction" name="divide">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Divide the fraction by an integer.</text>
    <param>i the &lt;tt&gt;integer&lt;/tt&gt; to divide by.</param>
    <return>this * i</return>
  </javadoc>
  <method type="Fraction" name="divide" />
  <javadoc>
    <text>&lt;p&gt;
 * Gets the fraction percentage as a &lt;tt&gt;double&lt;/tt&gt;. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * &lt;/p&gt;</text>
    <return>the fraction percentage as a &lt;tt&gt;double&lt;/tt&gt;.</return>
  </javadoc>
  <method type="double" name="percentageValue" />
  <javadoc>
    <text>&lt;p&gt;Creates a {@code Fraction} instance with the 2 parts
 * of a fraction Y/Z.&lt;/p&gt;
 * &lt;p&gt;Any negative signs are resolved to be on the numerator.&lt;/p&gt;</text>
    <param>numerator  the numerator, for example the three in 'three sevenths'</param>
    <param>denominator  the denominator, for example the seven in 'three sevenths'</param>
    <return>a new fraction instance, with the numerator and denominator reduced</return>
    <throws>MathArithmeticException if the denominator is {@code zero}</throws>
  </javadoc>
  <method type="Fraction" name="getReducedFraction">
    <scope />
    <scope />
    <scope />
    <scope>
      <scope />
    </scope>
    <declaration type="int" name="gcd" />
    <comment>normalize zero.</comment>
    <comment>allow 2^k/-2^31 as a valid fraction (where k&gt;0)</comment>
    <comment>simplify fraction.</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Returns the {@code String} representing this fraction, ie
 * "num / dem" or just "num" if the denominator is one.
 * &lt;/p&gt;</text>
    <return>a string representation of the fraction.</return>
    <see>java.lang.Object#toString()</see>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="String" name="str" />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FractionField" name="getField" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
