<?xml version="1.0" encoding="UTF-8"?>
<class name="DiagonalMatrix">
  <javadoc>
    <text>Implementation of a diagonal matrix.</text>
    <version>$Id$</version>
    <since>3.1.1</since>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Entries of the diagonal.</text>
  </javadoc>
  <declaration type="double[]" name="data" />
  <javadoc>
    <text>Creates a matrix with the supplied dimension.</text>
    <param>dimension Number of rows and columns in the new matrix.</param>
    <throws>NotStrictlyPositiveException if the dimension is
 * not positive.</throws>
  </javadoc>
  <method type="constructor" name="DiagonalMatrix" />
  <javadoc>
    <text>Creates a matrix using the input array as the underlying data.
 * &lt;br/&gt;
 * The input array is copied, not referenced.</text>
    <param>d Data for the new matrix.</param>
  </javadoc>
  <method type="constructor" name="DiagonalMatrix" />
  <javadoc>
    <text>Creates a matrix using the input array as the underlying data.
 * &lt;br/&gt;
 * If an array is created specially in order to be embedded in a
 * this instance and not used directly, the {@code copyArray} may be
 * set to {@code false}.
 * This will prevent the copying and improve performance as no new
 * array will be built and no data will be copied.</text>
    <param>d Data for new matrix.</param>
    <param>copyArray if {@code true}, the input array will be copied,
 * otherwise it will be referenced.</param>
    <exception>NullArgumentException if d is null</exception>
  </javadoc>
  <method type="constructor" name="DiagonalMatrix" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <throws>DimensionMismatchException if the requested dimensions are not equal.</throws>
  </javadoc>
  <method type="RealMatrix" name="createMatrix">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="copy" />
  <javadoc>
    <text>Compute the sum of {@code this} and {@code m}.</text>
    <param>m Matrix to be added.</param>
    <return>{@code this + m}.</return>
    <throws>MatrixDimensionMismatchException if {@code m} is not the same
 * size as {@code this}.</throws>
  </javadoc>
  <method type="DiagonalMatrix" name="add">
    <declaration type="int" name="dim" />
    <declaration type="double[]" name="outData" />
    <scope />
    <comment>Safety check.</comment>
  </method>
  <javadoc>
    <text>Returns {@code this} minus {@code m}.</text>
    <param>m Matrix to be subtracted.</param>
    <return>{@code this - m}</return>
    <throws>MatrixDimensionMismatchException if {@code m} is not the same
 * size as {@code this}.</throws>
  </javadoc>
  <method type="DiagonalMatrix" name="subtract">
    <declaration type="int" name="dim" />
    <declaration type="double[]" name="outData" />
    <scope />
  </method>
  <javadoc>
    <text>Returns the result of postmultiplying {@code this} by {@code m}.</text>
    <param>m matrix to postmultiply by</param>
    <return>{@code this * m}</return>
    <throws>DimensionMismatchException if{@code columnDimension(this) != rowDimension(m)}</throws>
  </javadoc>
  <method type="DiagonalMatrix" name="multiply">
    <declaration type="int" name="dim" />
    <declaration type="double[]" name="outData" />
    <scope />
  </method>
  <javadoc>
    <text>Returns the result of postmultiplying {@code this} by {@code m}.</text>
    <param>m matrix to postmultiply by</param>
    <return>{@code this * m}</return>
    <throws>DimensionMismatchException if{@code columnDimension(this) != rowDimension(m)}</throws>
  </javadoc>
  <method type="RealMatrix" name="multiply">
    <scope />
    <scope>
      <declaration type="int" name="nRows" />
      <declaration type="int" name="nCols" />
      <declaration type="double[][]" name="product" />
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[][]" name="getData">
    <declaration type="int" name="dim" />
    <declaration type="double[][]" name="out" />
    <scope />
  </method>
  <javadoc>
    <text>Gets a reference to the underlying data array.</text>
    <return>1-dimensional array of entries.</return>
  </javadoc>
  <method type="double[]" name="getDataRef" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getEntry" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <throws>NumberIsTooLargeException if {@code row != column} and value is non-zero.</throws>
  </javadoc>
  <method type="void" name="setEntry">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <throws>NumberIsTooLargeException if {@code row != column} and increment is non-zero.</throws>
  </javadoc>
  <method type="void" name="addToEntry">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="multiplyEntry">
    <scope />
    <comment>we don't care about non-diagonal elements for multiplication</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getRowDimension" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getColumnDimension" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[]" name="operate" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[]" name="preMultiply" />
  <javadoc>
    <text>Ensure a value is zero.</text>
    <param>value value to check</param>
    <exception>NumberIsTooLargeException if value is not zero</exception>
  </javadoc>
  <method type="void" name="ensureZero">
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
