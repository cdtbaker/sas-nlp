<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractLeastSquaresOptimizer">
  <javadoc>
    <text>Base class for implementing least-squares optimizers.
 * It provides methods for error estimation.</text>
    <version>$Id: AbstractLeastSquaresOptimizer.java 1443444 2013-02-07 12:41:36Z erans $</version>
    <since>3.1</since>
  </javadoc>
  <javadoc>
    <text>Square-root of the weight matrix.</text>
  </javadoc>
  <declaration type="RealMatrix" name="weightMatrixSqrt" />
  <javadoc>
    <text>Cost value (square root of the sum of the residuals).</text>
  </javadoc>
  <declaration type="double" name="cost" />
  <javadoc>
    <param>checker Convergence checker.</param>
  </javadoc>
  <method type="constructor" name="AbstractLeastSquaresOptimizer" />
  <javadoc>
    <text>Computes the weighted Jacobian matrix.</text>
    <param>params Model parameters at which to compute the Jacobian.</param>
    <return>the weighted Jacobian: W&lt;sup&gt;1/2&lt;/sup&gt; J.</return>
    <throws>DimensionMismatchException if the Jacobian dimension does not
 * match problem dimension.</throws>
  </javadoc>
  <method type="RealMatrix" name="computeWeightedJacobian" />
  <javadoc>
    <text>Computes the cost.</text>
    <param>residuals Residuals.</param>
    <return>the cost.</return>
    <see>#computeResiduals(double[])</see>
  </javadoc>
  <method type="double" name="computeCost">
    <declaration type="ArrayRealVector" name="r" />
  </method>
  <javadoc>
    <text>Gets the root-mean-square (RMS) value.
 * The RMS the root of the arithmetic mean of the square of all weighted
 * residuals.
 * This is related to the criterion that is minimized by the optimizer
 * as follows: If &lt;em&gt;c&lt;/em&gt; if the criterion, and &lt;em&gt;n&lt;/em&gt; is the
 * number of measurements, then the RMS is &lt;em&gt;sqrt (c/n)&lt;/em&gt;.</text>
    <return>the RMS value.</return>
  </javadoc>
  <method type="double" name="getRMS" />
  <javadoc>
    <text>Get a Chi-Square-like value assuming the N residuals follow N
 * distinct normal distributions centered on 0 and whose variances are
 * the reciprocal of the weights.</text>
    <return>chi-square value</return>
  </javadoc>
  <method type="double" name="getChiSquare" />
  <javadoc>
    <text>Gets the square-root of the weight matrix.</text>
    <return>the square-root of the weight matrix.</return>
  </javadoc>
  <method type="RealMatrix" name="getWeightSquareRoot" />
  <javadoc>
    <text>Sets the cost.</text>
    <param>cost Cost value.</param>
  </javadoc>
  <method type="void" name="setCost" />
  <javadoc>
    <text>Get the covariance matrix of the optimized parameters.
 * &lt;br/&gt;
 * Note that this operation involves the inversion of the
 * &lt;code&gt;J&lt;sup&gt;T&lt;/sup&gt;J&lt;/code&gt; matrix, where {@code J} is the
 * Jacobian matrix.
 * The {@code threshold} parameter is a way for the caller to specify
 * that the result of this computation should be considered meaningless,
 * and thus trigger an exception.</text>
    <param>params Model parameters.</param>
    <param>threshold Singularity threshold.</param>
    <return>the covariance matrix.</return>
    <throws>org.apache.commons.math3.linear.SingularMatrixExceptionif the covariance matrix cannot be computed (singular problem).</throws>
  </javadoc>
  <method type="double[][]" name="computeCovariances">
    <declaration type="RealMatrix" name="j" />
    <declaration type="RealMatrix" name="jTj" />
    <declaration type="DecompositionSolver" name="solver" />
    <comment>Set up the Jacobian.</comment>
    <comment>Compute transpose(J)J.</comment>
    <comment>Compute the covariances matrix.</comment>
  </method>
  <javadoc>
    <text>Computes an estimate of the standard deviation of the parameters. The
 * returned values are the square root of the diagonal coefficients of the
 * covariance matrix, {@code sd(a[i]) ~= sqrt(C[i][i])}, where {@code a[i]}is the optimized value of the {@code i}-th parameter, and {@code C} is
 * the covariance matrix.</text>
    <param>params Model parameters.</param>
    <param>covarianceSingularityThreshold Singularity threshold (see{@link #computeCovariances(double[],double) computeCovariances}).</param>
    <return>an estimate of the standard deviation of the optimized parameters</return>
    <throws>org.apache.commons.math3.linear.SingularMatrixExceptionif the covariance matrix cannot be computed.</throws>
  </javadoc>
  <method type="double[]" name="computeSigma">
    <declaration type="int" name="nC" />
    <declaration type="double[]" name="sig" />
    <declaration type="double[][]" name="cov" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <param>optData Optimization data. In addition to those documented in{@link JacobianMultivariateVectorOptimizer#parseOptimizationData(OptimizationData[])JacobianMultivariateVectorOptimizer}, this method will register the following data:
 * &lt;ul&gt;
 * &lt;li&gt;{@link org.apache.commons.math3.optim.nonlinear.vector.Weight}&lt;/li&gt;
 * &lt;/ul&gt;</param>
    <return>{@inheritDoc}</return>
    <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
    <throws>DimensionMismatchException if the initial guess, target, and weight
 * arguments have inconsistent dimensions.</throws>
  </javadoc>
  <method type="PointVectorValuePair" name="optimize">
    <comment>Set up base class and perform computation.</comment>
  </method>
  <javadoc>
    <text>Computes the residuals.
 * The residual is the difference between the observed (target)
 * values and the model (objective function) value.
 * There is one residual for each element of the vector-valued
 * function.</text>
    <param>objectiveValue Value of the the objective function. This is
 * the value returned from a call to{@link #computeObjectiveValue(double[]) computeObjectiveValue}(whose array argument contains the model parameters).</param>
    <return>the residuals.</return>
    <throws>DimensionMismatchException if {@code params} has a wrong
 * length.</throws>
  </javadoc>
  <method type="double[]" name="computeResiduals">
    <declaration type="double[]" name="target" />
    <scope />
    <declaration type="double[]" name="residuals" />
    <scope />
  </method>
  <javadoc>
    <text>Scans the list of (required and optional) optimization data that
 * characterize the problem.
 * If the weight matrix is specified, the {@link #weightMatrixSqrt}field is recomputed.</text>
    <param>optData Optimization data. The following data will be looked for:
 * &lt;ul&gt;
 * &lt;li&gt;{@link Weight}&lt;/li&gt;
 * &lt;/ul&gt;</param>
  </javadoc>
  <method type="void" name="parseOptimizationData">
    <scope>
      <scope />
    </scope>
    <comment>Allow base class to register its own data.</comment>
    <comment>The existing values (as set by the previous call) are reused if</comment>
    <comment>not provided in the argument list.</comment>
    <comment>If more data must be parsed, this statement _must_ be</comment>
    <comment>changed to "continue".</comment>
  </method>
  <javadoc>
    <text>Computes the square-root of the weight matrix.</text>
    <param>m Symmetric, positive-definite (weight) matrix.</param>
    <return>the square-root of the weight matrix.</return>
  </javadoc>
  <method type="RealMatrix" name="squareRoot">
    <scope>
      <declaration type="int" name="dim" />
      <declaration type="RealMatrix" name="sqrtM" />
      <scope />
    </scope>
    <scope>
      <declaration type="EigenDecomposition" name="dec" />
    </scope>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
