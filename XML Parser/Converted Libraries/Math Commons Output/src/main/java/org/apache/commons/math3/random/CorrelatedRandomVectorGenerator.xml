<?xml version="1.0" encoding="UTF-8"?>
<class name="CorrelatedRandomVectorGenerator">
  <javadoc>
    <text>A {@link RandomVectorGenerator} that generates vectors with with
 * correlated components.
 * &lt;p&gt;Random vectors with correlated components are built by combining
 * the uncorrelated components of another random vector in such a way that
 * the resulting correlations are the ones specified by a positive
 * definite covariance matrix.&lt;/p&gt;
 * &lt;p&gt;The main use for correlated random vector generation is for Monte-Carlo
 * simulation of physical problems with several variables, for example to
 * generate error vectors to be added to a nominal vector. A particularly
 * interesting case is when the generated vector should be drawn from a &lt;a
 * href="http://en.wikipedia.org/wiki/Multivariate_normal_distribution"&gt;
 * Multivariate Normal Distribution&lt;/a&gt;. The approach using a Cholesky
 * decomposition is quite usual in this case. However, it can be extended
 * to other cases as long as the underlying random generator provides{@link NormalizedRandomGenerator normalized values} like {@link GaussianRandomGenerator} or {@link UniformRandomGenerator}.&lt;/p&gt;
 * &lt;p&gt;Sometimes, the covariance matrix for a given simulation is not
 * strictly positive definite. This means that the correlations are
 * not all independent from each other. In this case, however, the non
 * strictly positive elements found during the Cholesky decomposition
 * of the covariance matrix should not be negative either, they
 * should be null. Another non-conventional extension handling this case
 * is used here. Rather than computing &lt;code&gt;C = U&lt;sup&gt;T&lt;/sup&gt;.U&lt;/code&gt;
 * where &lt;code&gt;C&lt;/code&gt; is the covariance matrix and &lt;code&gt;U&lt;/code&gt;
 * is an upper-triangular matrix, we compute &lt;code&gt;C = B.B&lt;sup&gt;T&lt;/sup&gt;&lt;/code&gt;
 * where &lt;code&gt;B&lt;/code&gt; is a rectangular matrix having
 * more rows than columns. The number of columns of &lt;code&gt;B&lt;/code&gt; is
 * the rank of the covariance matrix, and it is the dimension of the
 * uncorrelated random vector that is needed to compute the component
 * of the correlated vector. This class handles this situation
 * automatically.&lt;/p&gt;</text>
    <version>$Id: CorrelatedRandomVectorGenerator.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>1.2</since>
  </javadoc>
  <javadoc>
    <text>Mean vector.</text>
  </javadoc>
  <declaration type="double[]" name="mean" />
  <javadoc>
    <text>Underlying generator.</text>
  </javadoc>
  <declaration type="NormalizedRandomGenerator" name="generator" />
  <javadoc>
    <text>Storage for the normalized vector.</text>
  </javadoc>
  <declaration type="double[]" name="normalized" />
  <javadoc>
    <text>Root of the covariance matrix.</text>
  </javadoc>
  <declaration type="RealMatrix" name="root" />
  <javadoc>
    <text>Builds a correlated random vector generator from its mean
 * vector and covariance matrix.</text>
    <param>mean Expected mean values for all components.</param>
    <param>covariance Covariance matrix.</param>
    <param>small Diagonal elements threshold under which  column are
 * considered to be dependent on previous ones and are discarded</param>
    <param>generator underlying generator for uncorrelated normalized
 * components.</param>
    <throws>org.apache.commons.math3.linear.NonPositiveDefiniteMatrixExceptionif the covariance matrix is not strictly positive definite.</throws>
    <throws>DimensionMismatchException if the mean and covariance
 * arrays dimensions do not match.</throws>
  </javadoc>
  <method type="constructor" name="CorrelatedRandomVectorGenerator">
    <declaration type="int" name="order" />
    <scope />
    <declaration type="RectangularCholeskyDecomposition" name="decomposition" />
  </method>
  <javadoc>
    <text>Builds a null mean random correlated vector generator from its
 * covariance matrix.</text>
    <param>covariance Covariance matrix.</param>
    <param>small Diagonal elements threshold under which  column are
 * considered to be dependent on previous ones and are discarded.</param>
    <param>generator Underlying generator for uncorrelated normalized
 * components.</param>
    <throws>org.apache.commons.math3.linear.NonPositiveDefiniteMatrixExceptionif the covariance matrix is not strictly positive definite.</throws>
  </javadoc>
  <method type="constructor" name="CorrelatedRandomVectorGenerator">
    <declaration type="int" name="order" />
    <scope />
    <declaration type="RectangularCholeskyDecomposition" name="decomposition" />
  </method>
  <javadoc>
    <text>Get the underlying normalized components generator.</text>
    <return>underlying uncorrelated components generator</return>
  </javadoc>
  <method type="NormalizedRandomGenerator" name="getGenerator" />
  <javadoc>
    <text>Get the rank of the covariance matrix.
 * The rank is the number of independent rows in the covariance
 * matrix, it is also the number of columns of the root matrix.</text>
    <return>rank of the square matrix.</return>
    <see>#getRootMatrix()</see>
  </javadoc>
  <method type="int" name="getRank" />
  <javadoc>
    <text>Get the root of the covariance matrix.
 * The root is the rectangular matrix &lt;code&gt;B&lt;/code&gt; such that
 * the covariance matrix is equal to &lt;code&gt;B.B&lt;sup&gt;T&lt;/sup&gt;&lt;/code&gt;</text>
    <return>root of the square matrix</return>
    <see>#getRank()</see>
  </javadoc>
  <method type="RealMatrix" name="getRootMatrix" />
  <javadoc>
    <text>Generate a correlated random vector.</text>
    <return>a random vector as an array of double. The returned array
 * is created at each call, the caller can do what it wants with it.</return>
  </javadoc>
  <method type="double[]" name="nextVector">
    <scope />
    <declaration type="double[]" name="correlated" />
    <scope>
      <scope />
    </scope>
    <comment>generate uncorrelated vector</comment>
    <comment>compute correlated vector</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
