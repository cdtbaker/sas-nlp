<?xml version="1.0" encoding="UTF-8"?>
<class name="StableRandomGenerator">
  <javadoc>
    <text>&lt;p&gt;This class provides a stable normalized random generator. It samples from a stable
 * distribution with location parameter 0 and scale 1.&lt;/p&gt;
 * &lt;p&gt;The implementation uses the Chambers-Mallows-Stuck method as described in
 * &lt;i&gt;Handbook of computational statistics: concepts and methods&lt;/i&gt; by
 * James E. Gentle, Wolfgang H&amp;auml;rdle, Yuichi Mori.&lt;/p&gt;</text>
    <version>$Id: StableRandomGenerator.java 1394763 2012-10-05 19:54:00Z psteitz $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Underlying generator.</text>
  </javadoc>
  <declaration type="RandomGenerator" name="generator" />
  <javadoc>
    <text>stability parameter</text>
  </javadoc>
  <declaration type="double" name="alpha" />
  <javadoc>
    <text>skewness parameter</text>
  </javadoc>
  <declaration type="double" name="beta" />
  <javadoc>
    <text>cache of expression value used in generation</text>
  </javadoc>
  <declaration type="double" name="zeta" />
  <javadoc>
    <text>Create a new generator.</text>
    <param>generator underlying random generator to use</param>
    <param>alpha Stability parameter. Must be in range (0, 2]</param>
    <param>beta Skewness parameter. Must be in range [-1, 1]</param>
    <throws>NullArgumentException if generator is null</throws>
    <throws>OutOfRangeException if {@code alpha &lt;= 0} or {@code alpha &gt; 2}or {@code beta &lt; -1} or {@code beta &gt; 1}</throws>
  </javadoc>
  <method type="constructor" name="StableRandomGenerator">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Generate a random scalar with zero location and unit scale.</text>
    <return>a random scalar with zero location and unit scale</return>
  </javadoc>
  <method type="double" name="nextNormalizedDouble">
    <declaration type="double" name="omega" />
    <declaration type="double" name="phi" />
    <scope />
    <declaration type="double" name="x" />
    <scope>
      <scope />
      <scope />
    </scope>
    <scope>
      <declaration type="double" name="cosPhi" />
      <scope>
        <declaration type="double" name="alphaPhi" />
        <declaration type="double" name="invAlphaPhi" />
      </scope>
      <scope>
        <declaration type="double" name="betaPhi" />
        <scope />
      </scope>
    </scope>
    <comment>we need 2 uniform random numbers to calculate omega and phi</comment>
    <comment>Normal distribution case (Box-Muller algorithm)</comment>
    <comment>when beta = 0, zeta is zero as well</comment>
    <comment>Thus we can exclude it from the formula</comment>
    <comment>Cauchy distribution case</comment>
    <comment>Generic stable distribution</comment>
    <comment>to avoid rounding errors around alpha = 1</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
