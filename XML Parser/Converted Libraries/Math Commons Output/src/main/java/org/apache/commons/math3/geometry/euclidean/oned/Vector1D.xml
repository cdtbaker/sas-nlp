<?xml version="1.0" encoding="UTF-8"?>
<class name="Vector1D">
  <javadoc>
    <text>This class represents a 1D vector.
 * &lt;p&gt;Instances of this class are guaranteed to be immutable.&lt;/p&gt;</text>
    <version>$Id: Vector1D.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Origin (coordinates: 0).</text>
  </javadoc>
  <declaration type="Vector1D" name="ZERO" />
  <javadoc>
    <text>Unit (coordinates: 1).</text>
  </javadoc>
  <declaration type="Vector1D" name="ONE" />
  <javadoc>
    <text>A vector with all coordinates set to NaN.</text>
  </javadoc>
  <declaration type="Vector1D" name="NaN" />
  <javadoc>
    <text>A vector with all coordinates set to positive infinity.</text>
  </javadoc>
  <declaration type="Vector1D" name="POSITIVE_INFINITY" />
  <javadoc>
    <text>A vector with all coordinates set to negative infinity.</text>
  </javadoc>
  <declaration type="Vector1D" name="NEGATIVE_INFINITY" />
  <javadoc>
    <text>Serializable UID.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Abscissa.</text>
  </javadoc>
  <declaration type="double" name="x" />
  <javadoc>
    <text>Simple constructor.
 * Build a vector from its coordinates</text>
    <param>x abscissa</param>
    <see>#getX()</see>
  </javadoc>
  <method type="constructor" name="Vector1D" />
  <javadoc>
    <text>Multiplicative constructor
 * Build a vector from another one and a scale factor.
 * The vector built will be a * u</text>
    <param>a scale factor</param>
    <param>u base (unscaled) vector</param>
  </javadoc>
  <method type="constructor" name="Vector1D" />
  <javadoc>
    <text>Linear constructor
 * Build a vector from two other ones and corresponding scale factors.
 * The vector built will be a1 * u1 + a2 * u2</text>
    <param>a1 first scale factor</param>
    <param>u1 first base (unscaled) vector</param>
    <param>a2 second scale factor</param>
    <param>u2 second base (unscaled) vector</param>
  </javadoc>
  <method type="constructor" name="Vector1D" />
  <javadoc>
    <text>Linear constructor
 * Build a vector from three other ones and corresponding scale factors.
 * The vector built will be a1 * u1 + a2 * u2 + a3 * u3</text>
    <param>a1 first scale factor</param>
    <param>u1 first base (unscaled) vector</param>
    <param>a2 second scale factor</param>
    <param>u2 second base (unscaled) vector</param>
    <param>a3 third scale factor</param>
    <param>u3 third base (unscaled) vector</param>
  </javadoc>
  <method type="constructor" name="Vector1D" />
  <javadoc>
    <text>Linear constructor
 * Build a vector from four other ones and corresponding scale factors.
 * The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4</text>
    <param>a1 first scale factor</param>
    <param>u1 first base (unscaled) vector</param>
    <param>a2 second scale factor</param>
    <param>u2 second base (unscaled) vector</param>
    <param>a3 third scale factor</param>
    <param>u3 third base (unscaled) vector</param>
    <param>a4 fourth scale factor</param>
    <param>u4 fourth base (unscaled) vector</param>
  </javadoc>
  <method type="constructor" name="Vector1D" />
  <javadoc>
    <text>Get the abscissa of the vector.</text>
    <return>abscissa of the vector</return>
    <see>#Vector1D(double)</see>
  </javadoc>
  <method type="double" name="getX" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Space" name="getSpace" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Vector1D" name="getZero" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getNorm1" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getNorm" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getNormSq" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getNormInf" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Vector1D" name="add">
    <declaration type="Vector1D" name="v1" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Vector1D" name="add">
    <declaration type="Vector1D" name="v1" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Vector1D" name="subtract">
    <declaration type="Vector1D" name="p3" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Vector1D" name="subtract">
    <declaration type="Vector1D" name="v1" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Vector1D" name="normalize">
    <declaration type="double" name="s" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Vector1D" name="negate" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Vector1D" name="scalarMultiply" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isNaN" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isInfinite" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="distance1">
    <declaration type="Vector1D" name="p3" />
    <declaration type="double" name="dx" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="distance">
    <declaration type="Vector1D" name="p3" />
    <declaration type="double" name="dx" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="distanceInf">
    <declaration type="Vector1D" name="p3" />
    <declaration type="double" name="dx" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="distanceSq">
    <declaration type="Vector1D" name="p3" />
    <declaration type="double" name="dx" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="dotProduct">
    <declaration type="Vector1D" name="v1" />
  </method>
  <javadoc>
    <text>Compute the distance between two vectors according to the L&lt;sub&gt;2&lt;/sub&gt; norm.
 * &lt;p&gt;Calling this method is equivalent to calling:
 * &lt;code&gt;p1.subtract(p2).getNorm()&lt;/code&gt; except that no intermediate
 * vector is built&lt;/p&gt;</text>
    <param>p1 first vector</param>
    <param>p2 second vector</param>
    <return>the distance between p1 and p2 according to the L&lt;sub&gt;2&lt;/sub&gt; norm</return>
  </javadoc>
  <method type="double" name="distance" />
  <javadoc>
    <text>Compute the distance between two vectors according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm.
 * &lt;p&gt;Calling this method is equivalent to calling:
 * &lt;code&gt;p1.subtract(p2).getNormInf()&lt;/code&gt; except that no intermediate
 * vector is built&lt;/p&gt;</text>
    <param>p1 first vector</param>
    <param>p2 second vector</param>
    <return>the distance between p1 and p2 according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm</return>
  </javadoc>
  <method type="double" name="distanceInf" />
  <javadoc>
    <text>Compute the square of the distance between two vectors.
 * &lt;p&gt;Calling this method is equivalent to calling:
 * &lt;code&gt;p1.subtract(p2).getNormSq()&lt;/code&gt; except that no intermediate
 * vector is built&lt;/p&gt;</text>
    <param>p1 first vector</param>
    <param>p2 second vector</param>
    <return>the square of the distance between p1 and p2</return>
  </javadoc>
  <method type="double" name="distanceSq" />
  <javadoc>
    <text>Test for the equality of two 1D vectors.
 * &lt;p&gt;
 * If all coordinates of two 1D vectors are exactly the same, and none are
 * &lt;code&gt;Double.NaN&lt;/code&gt;, the two 1D vectors are considered to be equal.
 * &lt;/p&gt;
 * &lt;p&gt;
 * &lt;code&gt;NaN&lt;/code&gt; coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 1D vector are equal to &lt;code&gt;Double.NaN&lt;/code&gt;, the 1D vector is equal to{@link #NaN}.
 * &lt;/p&gt;</text>
    <param>other Object to test for equality to this</param>
    <return>true if two 1D vector objects are equal, false if
 * object is null, not an instance of Vector1D, or
 * not equal to this Vector1D instance</return>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope>
      <declaration type="Vector1D" name="rhs" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Get a hashCode for the 1D vector.
 * &lt;p&gt;
 * All NaN values have the same hash code.&lt;/p&gt;</text>
    <return>a hash code value for this object</return>
  </javadoc>
  <method type="int" name="hashCode">
    <scope />
  </method>
  <javadoc>
    <text>Get a string representation of this vector.</text>
    <return>a string representation of this vector</return>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="String" name="toString" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>CHECKSTYLE: stop ConstantName</comment>
  <comment>CHECKSTYLE: resume ConstantName</comment>
</class>
