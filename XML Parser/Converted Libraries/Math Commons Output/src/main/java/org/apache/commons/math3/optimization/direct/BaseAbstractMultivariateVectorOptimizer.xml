<?xml version="1.0" encoding="UTF-8"?>
<class name="BaseAbstractMultivariateVectorOptimizer">
  <javadoc>
    <text>Base class for implementing optimizers for multivariate scalar functions.
 * This base class handles the boiler-plate methods associated to thresholds
 * settings, iterations and evaluations counting.</text>
    <param>&lt;FUNC&gt;
 *  the type of the objective function to be optimized</param>
    <version>$Id: BaseAbstractMultivariateVectorOptimizer.java 1422230 2012-12-15 12:11:13Z erans $</version>
    <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Evaluations counter.</text>
  </javadoc>
  <declaration type="Incrementor" name="evaluations" />
  <javadoc>
    <text>Convergence checker.</text>
  </javadoc>
  <declaration type="ConvergenceChecker&lt;PointVectorValuePair&gt;" name="checker" />
  <javadoc>
    <text>Target value for the objective functions at optimum.</text>
  </javadoc>
  <declaration type="double[]" name="target" />
  <javadoc>
    <text>Weight matrix.</text>
  </javadoc>
  <declaration type="RealMatrix" name="weightMatrix" />
  <javadoc>
    <text>Weight for the least squares cost computation.</text>
    <deprecated />
  </javadoc>
  <declaration type="double[]" name="weight" />
  <javadoc>
    <text>Initial guess.</text>
  </javadoc>
  <declaration type="double[]" name="start" />
  <javadoc>
    <text>Objective function.</text>
  </javadoc>
  <declaration type="FUNC" name="function" />
  <javadoc>
    <text>Simple constructor with default settings.
 * The convergence check is set to a {@link SimpleVectorValueChecker}.</text>
    <deprecated>See {@link SimpleVectorValueChecker#SimpleVectorValueChecker()}</deprecated>
  </javadoc>
  <method type="constructor" name="BaseAbstractMultivariateVectorOptimizer" />
  <javadoc>
    <param>checker Convergence checker.</param>
  </javadoc>
  <method type="constructor" name="BaseAbstractMultivariateVectorOptimizer" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getMaxEvaluations" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getEvaluations" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="ConvergenceChecker&lt;PointVectorValuePair&gt;" name="getConvergenceChecker" />
  <javadoc>
    <text>Compute the objective function value.</text>
    <param>point Point at which the objective function must be evaluated.</param>
    <return>the objective function value at the specified point.</return>
    <throws>TooManyEvaluationsException if the maximal number of evaluations is
 * exceeded.</throws>
  </javadoc>
  <method type="double[]" name="computeObjectiveValue">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <deprecated>As of 3.1. Please use{@link #optimize(int,MultivariateVectorFunction,OptimizationData[])}instead.</deprecated>
  </javadoc>
  <method type="PointVectorValuePair" name="optimize" />
  <javadoc>
    <text>Optimize an objective function.</text>
    <param>maxEval Allowed number of evaluations of the objective function.</param>
    <param>f Objective function.</param>
    <param>optData Optimization data. The following data will be looked for:
 * &lt;ul&gt;
 * &lt;li&gt;{@link Target}&lt;/li&gt;
 * &lt;li&gt;{@link Weight}&lt;/li&gt;
 * &lt;li&gt;{@link InitialGuess}&lt;/li&gt;
 * &lt;/ul&gt;</param>
    <return>the point/value pair giving the optimal value of the objective
 * function.</return>
    <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
    <throws>DimensionMismatchException if the initial guess, target, and weight
 * arguments have inconsistent dimensions.</throws>
    <since>3.1</since>
  </javadoc>
  <method type="PointVectorValuePair" name="optimize" />
  <javadoc>
    <text>Optimize an objective function.
 * Optimization is considered to be a weighted least-squares minimization.
 * The cost function to be minimized is
 * &lt;code&gt;&amp;sum;weight&lt;sub&gt;i&lt;/sub&gt;(objective&lt;sub&gt;i&lt;/sub&gt; - target&lt;sub&gt;i&lt;/sub&gt;)&lt;sup&gt;2&lt;/sup&gt;&lt;/code&gt;</text>
    <param>f Objective function.</param>
    <param>t Target value for the objective functions at optimum.</param>
    <param>w Weights for the least squares cost computation.</param>
    <param>startPoint Start point for optimization.</param>
    <return>the point/value pair giving the optimal value for objective
 * function.</return>
    <param>maxEval Maximum number of function evaluations.</param>
    <throws>org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.</throws>
    <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.</throws>
    <throws>org.apache.commons.math3.exception.NullArgumentException if
 * any argument is {@code null}.</throws>
    <deprecated>As of 3.1. Please use{@link #optimizeInternal(int,MultivariateVectorFunction,OptimizationData[])}instead.</deprecated>
  </javadoc>
  <method type="PointVectorValuePair" name="optimizeInternal">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>Checks.</comment>
  </method>
  <javadoc>
    <text>Optimize an objective function.</text>
    <param>maxEval Allowed number of evaluations of the objective function.</param>
    <param>f Objective function.</param>
    <param>optData Optimization data. The following data will be looked for:
 * &lt;ul&gt;
 * &lt;li&gt;{@link Target}&lt;/li&gt;
 * &lt;li&gt;{@link Weight}&lt;/li&gt;
 * &lt;li&gt;{@link InitialGuess}&lt;/li&gt;
 * &lt;/ul&gt;</param>
    <return>the point/value pair giving the optimal value of the objective
 * function.</return>
    <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
    <throws>DimensionMismatchException if the initial guess, target, and weight
 * arguments have inconsistent dimensions.</throws>
    <since>3.1</since>
  </javadoc>
  <method type="PointVectorValuePair" name="optimizeInternal">
    <comment>Set internal state.</comment>
    <comment>Retrieve other settings.</comment>
    <comment>Check input consistency.</comment>
    <comment>Allow subclasses to reset their own internal state.</comment>
    <comment>Perform computation.</comment>
  </method>
  <javadoc>
    <text>Gets the initial values of the optimized parameters.</text>
    <return>the initial guess.</return>
  </javadoc>
  <method type="double[]" name="getStartPoint" />
  <javadoc>
    <text>Gets the weight matrix of the observations.</text>
    <return>the weight matrix.</return>
    <since>3.1</since>
  </javadoc>
  <method type="RealMatrix" name="getWeight" />
  <javadoc>
    <text>Gets the observed values to be matched by the objective vector
 * function.</text>
    <return>the target values.</return>
    <since>3.1</since>
  </javadoc>
  <method type="double[]" name="getTarget" />
  <javadoc>
    <text>Gets the objective vector function.
 * Note that this access bypasses the evaluation counter.</text>
    <return>the objective vector function.</return>
    <since>3.1</since>
  </javadoc>
  <method type="FUNC" name="getObjectiveFunction" />
  <method name="doOptimize" type="PointVectorValuePair" />
  <javadoc>
    <text>Perform the bulk of the optimization algorithm.</text>
    <return>the point/value pair giving the optimal value for the
 * objective function.</return>
  </javadoc>
  <javadoc>
    <return>a reference to the {@link #target array}.</return>
    <deprecated>As of 3.1.</deprecated>
  </javadoc>
  <method type="double[]" name="getTargetRef" />
  <javadoc>
    <return>a reference to the {@link #weight array}.</return>
    <deprecated>As of 3.1.</deprecated>
  </javadoc>
  <method type="double[]" name="getWeightRef" />
  <javadoc>
    <text>Method which a subclass &lt;em&gt;must&lt;/em&gt; override whenever its internal
 * state depend on the {@link OptimizationData input} parsed by this base
 * class.
 * It will be called after the parsing step performed in the{@link #optimize(int,MultivariateVectorFunction,OptimizationData[])optimize} method and just before {@link #doOptimize()}.</text>
    <since>3.1</since>
  </javadoc>
  <method type="void" name="setUp">
    <declaration type="int" name="dim" />
    <scope />
    <comment>XXX Temporary code until the new internal data is used everywhere.</comment>
  </method>
  <javadoc>
    <text>Scans the list of (required and optional) optimization data that
 * characterize the problem.</text>
    <param>optData Optimization data. The following data will be looked for:
 * &lt;ul&gt;
 * &lt;li&gt;{@link Target}&lt;/li&gt;
 * &lt;li&gt;{@link Weight}&lt;/li&gt;
 * &lt;li&gt;{@link InitialGuess}&lt;/li&gt;
 * &lt;/ul&gt;</param>
  </javadoc>
  <method type="void" name="parseOptimizationData">
    <scope>
      <scope />
      <scope />
      <scope />
    </scope>
    <comment>The existing values (as set by the previous call) are reused if</comment>
    <comment>not provided in the argument list.</comment>
  </method>
  <javadoc>
    <text>Check parameters consistency.</text>
    <throws>DimensionMismatchException if {@link #target} and{@link #weightMatrix} have inconsistent dimensions.</throws>
  </javadoc>
  <method type="void" name="checkParameters">
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
