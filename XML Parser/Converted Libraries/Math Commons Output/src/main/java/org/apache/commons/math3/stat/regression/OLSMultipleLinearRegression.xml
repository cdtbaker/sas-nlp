<?xml version="1.0" encoding="UTF-8"?>
<class name="OLSMultipleLinearRegression">
  <javadoc>
    <text>&lt;p&gt;Implements ordinary least squares (OLS) to estimate the parameters of a
 * multiple linear regression model.&lt;/p&gt;
 * &lt;p&gt;The regression coefficients, &lt;code&gt;b&lt;/code&gt;, satisfy the normal equations:
 * &lt;pre&gt;&lt;code&gt; X&lt;sup&gt;T&lt;/sup&gt; X b = X&lt;sup&gt;T&lt;/sup&gt; y &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
 * &lt;p&gt;To solve the normal equations, this implementation uses QR decomposition
 * of the &lt;code&gt;X&lt;/code&gt; matrix. (See {@link QRDecomposition} for details on the
 * decomposition algorithm.) The &lt;code&gt;X&lt;/code&gt; matrix, also known as the &lt;i&gt;design matrix,&lt;/i&gt;
 * has rows corresponding to sample observations and columns corresponding to independent
 * variables.  When the model is estimated using an intercept term (i.e. when{@link #isNoIntercept() isNoIntercept} is false as it is by default), the &lt;code&gt;X&lt;/code&gt;
 * matrix includes an initial column identically equal to 1.  We solve the normal equations
 * as follows:
 * &lt;pre&gt;&lt;code&gt; X&lt;sup&gt;T&lt;/sup&gt;X b = X&lt;sup&gt;T&lt;/sup&gt; y
 * (QR)&lt;sup&gt;T&lt;/sup&gt; (QR) b = (QR)&lt;sup&gt;T&lt;/sup&gt;y
 * R&lt;sup&gt;T&lt;/sup&gt; (Q&lt;sup&gt;T&lt;/sup&gt;Q) R b = R&lt;sup&gt;T&lt;/sup&gt; Q&lt;sup&gt;T&lt;/sup&gt; y
 * R&lt;sup&gt;T&lt;/sup&gt; R b = R&lt;sup&gt;T&lt;/sup&gt; Q&lt;sup&gt;T&lt;/sup&gt; y
 * (R&lt;sup&gt;T&lt;/sup&gt;)&lt;sup&gt;-1&lt;/sup&gt; R&lt;sup&gt;T&lt;/sup&gt; R b = (R&lt;sup&gt;T&lt;/sup&gt;)&lt;sup&gt;-1&lt;/sup&gt; R&lt;sup&gt;T&lt;/sup&gt; Q&lt;sup&gt;T&lt;/sup&gt; y
 * R b = Q&lt;sup&gt;T&lt;/sup&gt; y &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
 * &lt;p&gt;Given &lt;code&gt;Q&lt;/code&gt; and &lt;code&gt;R&lt;/code&gt;, the last equation is solved by back-substitution.&lt;/p&gt;</text>
    <version>$Id: OLSMultipleLinearRegression.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>Cached QR decomposition of X matrix</text>
  </javadoc>
  <declaration type="QRDecomposition" name="qr" />
  <javadoc>
    <text>Loads model x and y sample data, overriding any previous sample.
 * Computes and caches QR decomposition of the X matrix.</text>
    <param>y the [n,1] array representing the y sample</param>
    <param>x the [n,k] array representing the x sample</param>
    <throws>MathIllegalArgumentException if the x and y array data are not
 * compatible for the regression</throws>
  </javadoc>
  <method type="void" name="newSampleData" />
  <javadoc>
    <text>{@inheritDoc}&lt;p&gt;This implementation computes and caches the QR decomposition of the X matrix.&lt;/p&gt;</text>
  </javadoc>
  <method type="void" name="newSampleData" />
  <javadoc>
    <text>&lt;p&gt;Compute the "hat" matrix.
 * &lt;/p&gt;
 * &lt;p&gt;The hat matrix is defined in terms of the design matrix X
 * by X(X&lt;sup&gt;T&lt;/sup&gt;X)&lt;sup&gt;-1&lt;/sup&gt;X&lt;sup&gt;T&lt;/sup&gt;
 * &lt;/p&gt;
 * &lt;p&gt;The implementation here uses the QR decomposition to compute the
 * hat matrix as Q I&lt;sub&gt;p&lt;/sub&gt;Q&lt;sup&gt;T&lt;/sup&gt; where I&lt;sub&gt;p&lt;/sub&gt; is the
 * p-dimensional identity matrix augmented by 0's.  This computational
 * formula is from "The Hat Matrix in Regression and ANOVA",
 * David C. Hoaglin and Roy E. Welsch,
 * &lt;i&gt;The American Statistician&lt;/i&gt;, Vol. 32, No. 1 (Feb., 1978), pp. 17-22.
 * &lt;/p&gt;
 * &lt;p&gt;Data for the model must have been successfully loaded using one of
 * the {@code newSampleData} methods before invoking this method; otherwise
 * a {@code NullPointerException} will be thrown.&lt;/p&gt;</text>
    <return>the hat matrix</return>
  </javadoc>
  <method type="RealMatrix" name="calculateHat">
    <declaration type="RealMatrix" name="Q" />
    <declaration type="int" name="p" />
    <declaration type="int" name="n" />
    <declaration type="Array2DRowRealMatrix" name="augI" />
    <declaration type="double[][]" name="augIData" />
    <scope>
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>Create augmented identity matrix</comment>
    <comment>No try-catch or advertised NotStrictlyPositiveException - NPE above if n &lt; 3</comment>
    <comment>Compute and return Hat matrix</comment>
    <comment>No DME advertised - args valid if we get here</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;Returns the sum of squared deviations of Y from its mean.&lt;/p&gt;
 * &lt;p&gt;If the model has no intercept term, &lt;code&gt;0&lt;/code&gt; is used for the
 * mean of Y - i.e., what is returned is the sum of the squared Y values.&lt;/p&gt;
 * &lt;p&gt;The value returned by this method is the SSTO value used in
 * the {@link #calculateRSquared() R-squared} computation.&lt;/p&gt;</text>
    <return>SSTO - the total sum of squares</return>
    <throws>MathIllegalArgumentException if the sample has not been set or does
 * not contain at least 3 observations</throws>
    <see>#isNoIntercept()</see>
    <since>2.2</since>
  </javadoc>
  <method type="double" name="calculateTotalSumOfSquares">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Returns the sum of squared residuals.</text>
    <return>residual sum of squares</return>
    <since>2.2</since>
  </javadoc>
  <method type="double" name="calculateResidualSumOfSquares">
    <declaration type="RealVector" name="residuals" />
    <comment>No advertised DME, args are valid</comment>
  </method>
  <javadoc>
    <text>Returns the R-Squared statistic, defined by the formula &lt;pre&gt;
 * R&lt;sup&gt;2&lt;/sup&gt; = 1 - SSR / SSTO
 * &lt;/pre&gt;
 * where SSR is the {@link #calculateResidualSumOfSquares() sum of squared residuals}and SSTO is the {@link #calculateTotalSumOfSquares() total sum of squares}</text>
    <return>R-square statistic</return>
    <throws>MathIllegalArgumentException if the sample has not been set or does
 * not contain at least 3 observations</throws>
    <since>2.2</since>
  </javadoc>
  <method type="double" name="calculateRSquared" />
  <javadoc>
    <text>&lt;p&gt;Returns the adjusted R-squared statistic, defined by the formula &lt;pre&gt;
 * R&lt;sup&gt;2&lt;/sup&gt;&lt;sub&gt;adj&lt;/sub&gt; = 1 - [SSR (n - 1)] / [SSTO (n - p)]
 * &lt;/pre&gt;
 * where SSR is the {@link #calculateResidualSumOfSquares() sum of squared residuals},
 * SSTO is the {@link #calculateTotalSumOfSquares() total sum of squares}, n is the number
 * of observations and p is the number of parameters estimated (including the intercept).&lt;/p&gt;
 * &lt;p&gt;If the regression is estimated without an intercept term, what is returned is &lt;pre&gt;
 * &lt;code&gt; 1 - (1 - {@link #calculateRSquared()}) * (n / (n - p)) &lt;/code&gt;
 * &lt;/pre&gt;&lt;/p&gt;</text>
    <return>adjusted R-Squared statistic</return>
    <throws>MathIllegalArgumentException if the sample has not been set or does
 * not contain at least 3 observations</throws>
    <see>#isNoIntercept()</see>
    <since>2.2</since>
  </javadoc>
  <method type="double" name="calculateAdjustedRSquared">
    <declaration type="double" name="n" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}&lt;p&gt;This implementation computes and caches the QR decomposition of the X matrix
 * once it is successfully loaded.&lt;/p&gt;</text>
  </javadoc>
  <method type="void" name="newXSampleData" />
  <javadoc>
    <text>Calculates the regression coefficients using OLS.
 * &lt;p&gt;Data for the model must have been successfully loaded using one of
 * the {@code newSampleData} methods before invoking this method; otherwise
 * a {@code NullPointerException} will be thrown.&lt;/p&gt;</text>
    <return>beta</return>
  </javadoc>
  <method type="RealVector" name="calculateBeta" />
  <javadoc>
    <text>&lt;p&gt;Calculates the variance-covariance matrix of the regression parameters.
 * &lt;/p&gt;
 * &lt;p&gt;Var(b) = (X&lt;sup&gt;T&lt;/sup&gt;X)&lt;sup&gt;-1&lt;/sup&gt;
 * &lt;/p&gt;
 * &lt;p&gt;Uses QR decomposition to reduce (X&lt;sup&gt;T&lt;/sup&gt;X)&lt;sup&gt;-1&lt;/sup&gt;
 * to (R&lt;sup&gt;T&lt;/sup&gt;R)&lt;sup&gt;-1&lt;/sup&gt;, with only the top p rows of
 * R included, where p = the length of the beta vector.&lt;/p&gt;
 * &lt;p&gt;Data for the model must have been successfully loaded using one of
 * the {@code newSampleData} methods before invoking this method; otherwise
 * a {@code NullPointerException} will be thrown.&lt;/p&gt;</text>
    <return>The beta variance-covariance matrix</return>
  </javadoc>
  <method type="RealMatrix" name="calculateBetaVariance">
    <declaration type="int" name="p" />
    <declaration type="RealMatrix" name="Raug" />
    <declaration type="RealMatrix" name="Rinv" />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
