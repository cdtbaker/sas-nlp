<?xml version="1.0" encoding="UTF-8"?>
<class name="NormalDistribution">
  <javadoc>
    <text>Implementation of the normal (gaussian) distribution.</text>
    <see>&lt;a href="http://en.wikipedia.org/wiki/Normal_distribution"&gt;Normal distribution (Wikipedia)&lt;/a&gt;</see>
    <see>&lt;a href="http://mathworld.wolfram.com/NormalDistribution.html"&gt;Normal distribution (MathWorld)&lt;/a&gt;</see>
    <version>$Id: NormalDistribution.java 1462423 2013-03-29 07:25:18Z luc $</version>
  </javadoc>
  <javadoc>
    <text>Default inverse cumulative probability accuracy.</text>
    <since>2.1</since>
  </javadoc>
  <declaration type="double" name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" />
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>&amp;radic;(2 &amp;pi;)</text>
  </javadoc>
  <declaration type="double" name="SQRT2PI" />
  <javadoc>
    <text>&amp;radic;(2)</text>
  </javadoc>
  <declaration type="double" name="SQRT2" />
  <javadoc>
    <text>Mean of this distribution.</text>
  </javadoc>
  <declaration type="double" name="mean" />
  <javadoc>
    <text>Standard deviation of this distribution.</text>
  </javadoc>
  <declaration type="double" name="standardDeviation" />
  <javadoc>
    <text>Inverse cumulative probability accuracy.</text>
  </javadoc>
  <declaration type="double" name="solverAbsoluteAccuracy" />
  <javadoc>
    <text>Create a normal distribution with mean equal to zero and standard
 * deviation equal to one.</text>
  </javadoc>
  <method type="constructor" name="NormalDistribution" />
  <javadoc>
    <text>Create a normal distribution using the given mean and standard deviation.</text>
    <param>mean Mean for this distribution.</param>
    <param>sd Standard deviation for this distribution.</param>
    <throws>NotStrictlyPositiveException if {@code sd &lt;= 0}.</throws>
  </javadoc>
  <method type="constructor" name="NormalDistribution" />
  <javadoc>
    <text>Create a normal distribution using the given mean, standard deviation and
 * inverse cumulative distribution accuracy.</text>
    <param>mean Mean for this distribution.</param>
    <param>sd Standard deviation for this distribution.</param>
    <param>inverseCumAccuracy Inverse cumulative probability accuracy.</param>
    <throws>NotStrictlyPositiveException if {@code sd &lt;= 0}.</throws>
    <since>2.1</since>
  </javadoc>
  <method type="constructor" name="NormalDistribution" />
  <javadoc>
    <text>Creates a normal distribution.</text>
    <param>rng Random number generator.</param>
    <param>mean Mean for this distribution.</param>
    <param>sd Standard deviation for this distribution.</param>
    <param>inverseCumAccuracy Inverse cumulative probability accuracy.</param>
    <throws>NotStrictlyPositiveException if {@code sd &lt;= 0}.</throws>
    <since>3.1</since>
  </javadoc>
  <method type="constructor" name="NormalDistribution">
    <scope />
  </method>
  <javadoc>
    <text>Access the mean.</text>
    <return>the mean for this distribution.</return>
  </javadoc>
  <method type="double" name="getMean" />
  <javadoc>
    <text>Access the standard deviation.</text>
    <return>the standard deviation for this distribution.</return>
  </javadoc>
  <method type="double" name="getStandardDeviation" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="density">
    <declaration type="double" name="x0" />
    <declaration type="double" name="x1" />
  </method>
  <javadoc>
    <text>{@inheritDoc}If {@code x} is more than 40 standard deviations from the mean, 0 or 1
 * is returned, as in these cases the actual value is within{@code Double.MIN_VALUE} of 0 or 1.</text>
  </javadoc>
  <method type="double" name="cumulativeProbability">
    <declaration type="double" name="dev" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.2</since>
  </javadoc>
  <method type="double" name="inverseCumulativeProbability">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <deprecated>See {@link RealDistribution#cumulativeProbability(double,double)}</deprecated>
  </javadoc>
  <method type="double" name="cumulativeProbability" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="probability">
    <scope />
    <declaration type="double" name="denom" />
    <declaration type="double" name="v0" />
    <declaration type="double" name="v1" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getSolverAbsoluteAccuracy" />
  <javadoc>
    <text>{@inheritDoc}For mean parameter {@code mu}, the mean is {@code mu}.</text>
  </javadoc>
  <method type="double" name="getNumericalMean" />
  <javadoc>
    <text>{@inheritDoc}For standard deviation parameter {@code s}, the variance is {@code s^2}.</text>
  </javadoc>
  <method type="double" name="getNumericalVariance">
    <declaration type="double" name="s" />
  </method>
  <javadoc>
    <text>{@inheritDoc}The lower bound of the support is always negative infinity
 * no matter the parameters.</text>
    <return>lower bound of the support (always{@code Double.NEGATIVE_INFINITY})</return>
  </javadoc>
  <method type="double" name="getSupportLowerBound" />
  <javadoc>
    <text>{@inheritDoc}The upper bound of the support is always positive infinity
 * no matter the parameters.</text>
    <return>upper bound of the support (always{@code Double.POSITIVE_INFINITY})</return>
  </javadoc>
  <method type="double" name="getSupportUpperBound" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSupportLowerBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSupportUpperBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}The support of this distribution is connected.</text>
    <return>{@code true}</return>
  </javadoc>
  <method type="boolean" name="isSupportConnected" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="sample" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
