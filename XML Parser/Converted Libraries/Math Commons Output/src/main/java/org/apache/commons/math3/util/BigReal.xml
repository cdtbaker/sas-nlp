<?xml version="1.0" encoding="UTF-8"?>
<class name="BigReal">
  <javadoc>
    <text>Arbitrary precision decimal number.
 * &lt;p&gt;
 * This class is a simple wrapper around the standard &lt;code&gt;BigDecimal&lt;/code&gt;
 * in order to implement the {@link FieldElement} interface.
 * &lt;/p&gt;</text>
    <since>2.0</since>
    <version>$Id: BigReal.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>A big real representing 0.</text>
  </javadoc>
  <declaration type="BigReal" name="ZERO" />
  <javadoc>
    <text>A big real representing 1.</text>
  </javadoc>
  <declaration type="BigReal" name="ONE" />
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Underlying BigDecimal.</text>
  </javadoc>
  <declaration type="BigDecimal" name="d" />
  <javadoc>
    <text>Rounding mode for divisions.</text>
  </javadoc>
  <declaration type="RoundingMode" name="roundingMode" />
  <javadoc>
    <text>BigDecimal scale</text>
  </javadoc>
  <declaration type="int" name="scale" />
  <javadoc>
    <text>Build an instance from a BigDecimal.</text>
    <param>val value of the instance</param>
  </javadoc>
  <method type="constructor" name="BigReal" />
  <javadoc>
    <text>Build an instance from a BigInteger.</text>
    <param>val value of the instance</param>
  </javadoc>
  <method type="constructor" name="BigReal" />
  <javadoc>
    <text>Build an instance from an unscaled BigInteger.</text>
    <param>unscaledVal unscaled value</param>
    <param>scale scale to use</param>
  </javadoc>
  <method type="constructor" name="BigReal" />
  <javadoc>
    <text>Build an instance from an unscaled BigInteger.</text>
    <param>unscaledVal unscaled value</param>
    <param>scale scale to use</param>
    <param>mc to used</param>
  </javadoc>
  <method type="constructor" name="BigReal" />
  <javadoc>
    <text>Build an instance from a BigInteger.</text>
    <param>val value of the instance</param>
    <param>mc context to use</param>
  </javadoc>
  <method type="constructor" name="BigReal" />
  <javadoc>
    <text>Build an instance from a characters representation.</text>
    <param>in character representation of the value</param>
  </javadoc>
  <method type="constructor" name="BigReal" />
  <javadoc>
    <text>Build an instance from a characters representation.</text>
    <param>in character representation of the value</param>
    <param>offset offset of the first character to analyze</param>
    <param>len length of the array slice to analyze</param>
  </javadoc>
  <method type="constructor" name="BigReal" />
  <javadoc>
    <text>Build an instance from a characters representation.</text>
    <param>in character representation of the value</param>
    <param>offset offset of the first character to analyze</param>
    <param>len length of the array slice to analyze</param>
    <param>mc context to use</param>
  </javadoc>
  <method type="constructor" name="BigReal" />
  <javadoc>
    <text>Build an instance from a characters representation.</text>
    <param>in character representation of the value</param>
    <param>mc context to use</param>
  </javadoc>
  <method type="constructor" name="BigReal" />
  <javadoc>
    <text>Build an instance from a double.</text>
    <param>val value of the instance</param>
  </javadoc>
  <method type="constructor" name="BigReal" />
  <javadoc>
    <text>Build an instance from a double.</text>
    <param>val value of the instance</param>
    <param>mc context to use</param>
  </javadoc>
  <method type="constructor" name="BigReal" />
  <javadoc>
    <text>Build an instance from an int.</text>
    <param>val value of the instance</param>
  </javadoc>
  <method type="constructor" name="BigReal" />
  <javadoc>
    <text>Build an instance from an int.</text>
    <param>val value of the instance</param>
    <param>mc context to use</param>
  </javadoc>
  <method type="constructor" name="BigReal" />
  <javadoc>
    <text>Build an instance from a long.</text>
    <param>val value of the instance</param>
  </javadoc>
  <method type="constructor" name="BigReal" />
  <javadoc>
    <text>Build an instance from a long.</text>
    <param>val value of the instance</param>
    <param>mc context to use</param>
  </javadoc>
  <method type="constructor" name="BigReal" />
  <javadoc>
    <text>Build an instance from a String representation.</text>
    <param>val character representation of the value</param>
  </javadoc>
  <method type="constructor" name="BigReal" />
  <javadoc>
    <text>Build an instance from a String representation.</text>
    <param>val character representation of the value</param>
    <param>mc context to use</param>
  </javadoc>
  <method type="constructor" name="BigReal" />
  <javadoc>
    <text>Gets the rounding mode for division operations
 * The default is {@code RoundingMode.HALF_UP}</text>
    <return>the rounding mode.</return>
    <since>2.1</since>
  </javadoc>
  <method type="RoundingMode" name="getRoundingMode" />
  <javadoc>
    <text>Sets the rounding mode for decimal divisions.</text>
    <param>roundingMode rounding mode for decimal divisions</param>
    <since>2.1</since>
  </javadoc>
  <method type="void" name="setRoundingMode" />
  <javadoc>
    <text>Sets the scale for division operations.
 * The default is 64</text>
    <return>the scale</return>
    <since>2.1</since>
  </javadoc>
  <method type="int" name="getScale" />
  <javadoc>
    <text>Sets the scale for division operations.</text>
    <param>scale scale for division operations</param>
    <since>2.1</since>
  </javadoc>
  <method type="void" name="setScale" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="BigReal" name="add" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="BigReal" name="subtract" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="BigReal" name="negate" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <throws>MathArithmeticException if {@code a} is zero</throws>
  </javadoc>
  <method type="BigReal" name="divide">
    <scope />
    <scope />
    <comment>Division by zero has occured</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <throws>MathArithmeticException if {@code this} is zero</throws>
  </javadoc>
  <method type="BigReal" name="reciprocal">
    <scope />
    <scope />
    <comment>Division by zero has occured</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="BigReal" name="multiply" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="BigReal" name="multiply" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="compareTo" />
  <javadoc>
    <text>Get the double value corresponding to the instance.</text>
    <return>double value corresponding to the instance</return>
  </javadoc>
  <method type="double" name="doubleValue" />
  <javadoc>
    <text>Get the BigDecimal value corresponding to the instance.</text>
    <return>BigDecimal value corresponding to the instance</return>
  </javadoc>
  <method type="BigDecimal" name="bigDecimalValue" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="hashCode" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Field&lt;BigReal&gt;" name="getField" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
