<?xml version="1.0" encoding="UTF-8"?>
<class name="ExponentialDistribution">
  <javadoc>
    <text>Implementation of the exponential distribution.</text>
    <see>&lt;a href="http://en.wikipedia.org/wiki/Exponential_distribution"&gt;Exponential distribution (Wikipedia)&lt;/a&gt;</see>
    <see>&lt;a href="http://mathworld.wolfram.com/ExponentialDistribution.html"&gt;Exponential distribution (MathWorld)&lt;/a&gt;</see>
    <version>$Id: ExponentialDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Default inverse cumulative probability accuracy.</text>
    <since>2.1</since>
  </javadoc>
  <declaration type="double" name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" />
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Used when generating Exponential samples.
 * Table containing the constants
 * q_i = sum_{j=1}^i (ln 2)^j/j! = ln 2 + (ln 2)^2/2 + ... + (ln 2)^i/i!
 * until the largest representable fraction below 1 is exceeded.
 * Note that
 * 1 = 2 - 1 = exp(ln 2) - 1 = sum_{n=1}^infty (ln 2)^n / n!
 * thus q_i -&gt; 1 as i -&gt; +inf,
 * so the higher i, the closer to one we get (the series is not alternating).
 * By trying, n = 16 in Java is enough to reach 1.0.</text>
  </javadoc>
  <declaration type="double[]" name="EXPONENTIAL_SA_QI" />
  <javadoc>
    <text>The mean of this distribution.</text>
  </javadoc>
  <declaration type="double" name="mean" />
  <javadoc>
    <text>Inverse cumulative probability accuracy.</text>
  </javadoc>
  <declaration type="double" name="solverAbsoluteAccuracy" />
  <javadoc>
    <text>Initialize tables.</text>
  </javadoc>
  <scope>
    <declaration type="double" name="LN2" />
    <declaration type="double" name="qi" />
    <declaration type="int" name="i" />
    <declaration type="ResizableDoubleArray" name="ra" />
    <scope />
  </scope>
  <javadoc>
    <text>Create an exponential distribution with the given mean.</text>
    <param>mean mean of this distribution.</param>
  </javadoc>
  <method type="constructor" name="ExponentialDistribution" />
  <javadoc>
    <text>Create an exponential distribution with the given mean.</text>
    <param>mean Mean of this distribution.</param>
    <param>inverseCumAccuracy Maximum absolute error in inverse
 * cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).</param>
    <throws>NotStrictlyPositiveException if {@code mean &lt;= 0}.</throws>
    <since>2.1</since>
  </javadoc>
  <method type="constructor" name="ExponentialDistribution" />
  <javadoc>
    <text>Creates an exponential distribution.</text>
    <param>rng Random number generator.</param>
    <param>mean Mean of this distribution.</param>
    <param>inverseCumAccuracy Maximum absolute error in inverse
 * cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).</param>
    <throws>NotStrictlyPositiveException if {@code mean &lt;= 0}.</throws>
    <since>3.1</since>
  </javadoc>
  <method type="constructor" name="ExponentialDistribution">
    <scope />
  </method>
  <javadoc>
    <text>Access the mean.</text>
    <return>the mean.</return>
  </javadoc>
  <method type="double" name="getMean" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="density">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}The implementation of this method is based on:
 * &lt;ul&gt;
 * &lt;li&gt;
 * &lt;a href="http://mathworld.wolfram.com/ExponentialDistribution.html"&gt;
 * Exponential Distribution&lt;/a&gt;, equation (1).&lt;/li&gt;
 * &lt;/ul&gt;</text>
  </javadoc>
  <method type="double" name="cumulativeProbability">
    <declaration type="double" name="ret" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}Returns {@code 0} when {@code p= = 0} and{@code Double.POSITIVE_INFINITY} when {@code p == 1}.</text>
  </javadoc>
  <method type="double" name="inverseCumulativeProbability">
    <declaration type="double" name="ret" />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}&lt;p&gt;&lt;strong&gt;Algorithm Description&lt;/strong&gt;: this implementation uses the
 * &lt;a href="http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html"&gt;
 * Inversion Method&lt;/a&gt; to generate exponentially distributed random values
 * from uniform deviates.&lt;/p&gt;</text>
    <return>a random value.</return>
    <since>2.2</since>
  </javadoc>
  <method type="double" name="sample">
    <declaration type="double" name="a" />
    <declaration type="double" name="u" />
    <scope />
    <scope />
    <declaration type="int" name="i" />
    <declaration type="double" name="u2" />
    <declaration type="double" name="umin" />
    <scope>
      <scope />
    </scope>
    <comment>Step 1:</comment>
    <comment>Step 2 and 3:</comment>
    <comment>Step 4 (now u &gt;= 0.5):</comment>
    <comment>Step 5:</comment>
    <comment>Step 6:</comment>
    <comment>Should be 1, be we iterate before it in while using 0</comment>
    <comment>Step 7 and 8:</comment>
    <comment>Step 8:</comment>
    <comment>Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getSolverAbsoluteAccuracy" />
  <javadoc>
    <text>{@inheritDoc}For mean parameter {@code k}, the mean is {@code k}.</text>
  </javadoc>
  <method type="double" name="getNumericalMean" />
  <javadoc>
    <text>{@inheritDoc}For mean parameter {@code k}, the variance is {@code k^2}.</text>
  </javadoc>
  <method type="double" name="getNumericalVariance">
    <declaration type="double" name="m" />
  </method>
  <javadoc>
    <text>{@inheritDoc}The lower bound of the support is always 0 no matter the mean parameter.</text>
    <return>lower bound of the support (always 0)</return>
  </javadoc>
  <method type="double" name="getSupportLowerBound" />
  <javadoc>
    <text>{@inheritDoc}The upper bound of the support is always positive infinity
 * no matter the mean parameter.</text>
    <return>upper bound of the support (always Double.POSITIVE_INFINITY)</return>
  </javadoc>
  <method type="double" name="getSupportUpperBound" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSupportLowerBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSupportUpperBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}The support of this distribution is connected.</text>
    <return>{@code true}</return>
  </javadoc>
  <method type="boolean" name="isSupportConnected" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <javadoc>
    <text>Filling EXPONENTIAL_SA_QI table.
 * Note that we don't want qi = 0 in the table.</text>
  </javadoc>
  <javadoc>
    <text>ArithmeticUtils provides factorials up to 20, so let's use that
 * limit together with Precision.EPSILON to generate the following
 * code (a priori, we know that there will be 16 elements, but it is
 * better to not hardcode it).</text>
  </javadoc>
</class>
