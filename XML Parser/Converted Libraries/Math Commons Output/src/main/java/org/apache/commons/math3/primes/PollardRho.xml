<?xml version="1.0" encoding="UTF-8"?>
<class name="PollardRho">
  <javadoc>
    <text>Implementation of the Pollard's rho factorization algorithm.</text>
    <version>$Id: PollardRho.java 1462702 2013-03-30 04:45:52Z psteitz $</version>
    <since>3.2</since>
  </javadoc>
  <javadoc>
    <text>Hide utility class.</text>
  </javadoc>
  <method type="constructor" name="PollardRho" />
  <javadoc>
    <text>Factorization using Pollard's rho algorithm.</text>
    <param>n number to factors, must be &amp;gt; 0</param>
    <return>the list of prime factors of n.</return>
  </javadoc>
  <method type="List&lt;Integer&gt;" name="primeFactors">
    <declaration type="List&lt;Integer&gt;" name="factors" />
    <scope />
    <scope />
    <declaration type="int" name="divisor" />
  </method>
  <javadoc>
    <text>Implementation of the Pollard's rho factorization algorithm.
 * &lt;p&gt;
 * This implementation follows the paper "An improved Monte Carlo factorization algorithm"
 * by Richard P. Brent. This avoids the triple computation of f(x) typically found in Pollard's
 * rho implementations. It also batches several gcd computation into 1.
 * &lt;p&gt;
 * The backtracking is not implemented as we deal only with semi-primes.</text>
    <param>n number to factor, must be semi-prime.</param>
    <return>a prime factor of n.</return>
  </javadoc>
  <method type="int" name="rhoBrent">
    <declaration type="int" name="x0" />
    <declaration type="int" name="m" />
    <declaration type="int" name="cst" />
    <declaration type="int" name="y" />
    <declaration type="int" name="r" />
    <scope>
      <declaration type="int" name="x" />
      <scope>
        <declaration type="long" name="y2" />
      </scope>
      <declaration type="int" name="k" />
      <scope>
        <declaration type="int" name="bound" />
        <declaration type="int" name="q" />
        <scope>
          <declaration type="long" name="y2" />
          <declaration type="long" name="divisor" />
          <scope />
          <declaration type="long" name="prod" />
          <scope />
        </scope>
        <declaration type="int" name="out" />
        <scope />
      </scope>
    </scope>
    <comment>start at -3 to ensure we enter this loop at least 3 times</comment>
  </method>
  <javadoc>
    <text>Gcd between two positive numbers.
 * &lt;p&gt;
 * Gets the greatest common divisor of two numbers, using the "binary gcd" method,
 * which avoids division and modulo operations. See Knuth 4.5.2 algorithm B.
 * This algorithm is due to Josef Stein (1961).
 * &lt;/p&gt;
 * Special cases:
 * &lt;ul&gt;
 * &lt;li&gt;The result of {@code gcd(x, x)}, {@code gcd(0, x)} and {@code gcd(x, 0)} is the value of {@code x}.&lt;/li&gt;
 * &lt;li&gt;The invocation {@code gcd(0, 0)} is the only one which returns {@code 0}.&lt;/li&gt;
 * &lt;/ul&gt;</text>
    <param>a first number, must be &amp;ge; 0</param>
    <param>b second number, must be &amp;ge; 0</param>
    <return>gcd(a,b)</return>
  </javadoc>
  <method type="int" name="gcdPositive">
    <scope />
    <scope />
    <declaration type="int" name="aTwos" />
    <declaration type="int" name="bTwos" />
    <declaration type="int" name="shift" />
    <scope>
      <declaration type="int" name="delta" />
    </scope>
    <comment>both a and b must be positive, it is not checked here</comment>
    <comment>gdc(a,0) = a</comment>
    <comment>make a and b odd, keep in mind the common power of twos</comment>
    <comment>a and b &gt;0</comment>
    <comment>if a &gt; b then gdc(a,b) = gcd(a-b,b)</comment>
    <comment>if a &lt; b then gcd(a,b) = gcd(b-a,a)</comment>
    <comment>so next a is the absolute difference and next b is the minimum of current values</comment>
    <comment>for speed optimization:</comment>
    <comment>remove any power of two in a as b is guaranteed to be odd throughout all iterations</comment>
    <comment>gcd(a,a) = a, just "add" the common power of twos</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
