<?xml version="1.0" encoding="UTF-8"?>
<class name="BSPTreeVisitor">
  <javadoc>
    <text>This interface is used to visit {@link BSPTree BSP tree} nodes.
 * &lt;p&gt;Navigation through {@link BSPTree BSP trees} can be done using
 * two different point of views:&lt;/p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;
 * the first one is in a node-oriented way using the {@link BSPTree#getPlus}, {@link BSPTree#getMinus} and {@link BSPTree#getParent} methods. Terminal nodes without associated{@link SubHyperplane sub-hyperplanes} can be visited this way,
 * there is no constraint in the visit order, and it is possible
 * to visit either all nodes or only a subset of the nodes
 * &lt;/li&gt;
 * &lt;li&gt;
 * the second one is in a sub-hyperplane-oriented way using
 * classes implementing this interface which obeys the visitor
 * design pattern. The visit order is provided by the visitor as
 * each node is first encountered. Each node is visited exactly
 * once.
 * &lt;/li&gt;
 * &lt;/ul&gt;</text>
    <param>&lt;S&gt;
 *  Type of the space.</param>
    <see>BSPTree</see>
    <see>SubHyperplane</see>
    <version>$Id: BSPTreeVisitor.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Enumerate for visit order with respect to plus sub-tree, minus sub-tree and cut sub-hyperplane.</text>
  </javadoc>
  <javadoc>
    <text>Indicator for visit order plus sub-tree, then minus sub-tree,
 * and last cut sub-hyperplane.</text>
  </javadoc>
  <javadoc>
    <text>Indicator for visit order plus sub-tree, then cut sub-hyperplane,
 * and last minus sub-tree.</text>
  </javadoc>
  <javadoc>
    <text>Indicator for visit order minus sub-tree, then plus sub-tree,
 * and last cut sub-hyperplane.</text>
  </javadoc>
  <javadoc>
    <text>Indicator for visit order minus sub-tree, then cut sub-hyperplane,
 * and last plus sub-tree.</text>
  </javadoc>
  <javadoc>
    <text>Indicator for visit order cut sub-hyperplane, then plus sub-tree,
 * and last minus sub-tree.</text>
  </javadoc>
  <javadoc>
    <text>Indicator for visit order cut sub-hyperplane, then minus sub-tree,
 * and last plus sub-tree.</text>
  </javadoc>
  <method name="visitOrder" type="Order" />
  <javadoc>
    <text>Determine the visit order for this node.
 * &lt;p&gt;Before attempting to visit an internal node, this method is
 * called to determine the desired ordering of the visit. It is
 * guaranteed that this method will be called before {@link #visitInternalNode visitInternalNode} for a given node, it will be
 * called exactly once for each internal node.&lt;/p&gt;</text>
    <param>node BSP node guaranteed to have a non null cut sub-hyperplane</param>
    <return>desired visit order, must be one of{@link Order#PLUS_MINUS_SUB}, {@link Order#PLUS_SUB_MINUS},{@link Order#MINUS_PLUS_SUB}, {@link Order#MINUS_SUB_PLUS},{@link Order#SUB_PLUS_MINUS}, {@link Order#SUB_MINUS_PLUS}</return>
  </javadoc>
  <method name="visitInternalNode" type="void" />
  <javadoc>
    <text>Visit a BSP tree node node having a non-null sub-hyperplane.
 * &lt;p&gt;It is guaranteed that this method will be called after {@link #visitOrder visitOrder} has been called for a given node,
 * it wil be called exactly once for each internal node.&lt;/p&gt;</text>
    <param>node BSP node guaranteed to have a non null cut sub-hyperplane</param>
    <see>#visitLeafNode</see>
  </javadoc>
  <method name="visitLeafNode" type="void" />
  <javadoc>
    <text>Visit a leaf BSP tree node node having a null sub-hyperplane.</text>
    <param>node leaf BSP node having a null sub-hyperplane</param>
    <see>#visitInternalNode</see>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
