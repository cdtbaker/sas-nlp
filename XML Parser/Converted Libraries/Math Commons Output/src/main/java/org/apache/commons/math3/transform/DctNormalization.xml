<?xml version="1.0" encoding="UTF-8"?>
<class name="DctNormalization">
  <javadoc>
    <text>This enumeration defines the various types of normalizations that can be
 * applied to discrete cosine transforms (DCT). The exact definition of these
 * normalizations is detailed below.</text>
    <see>FastCosineTransformer</see>
    <version>$Id: DctNormalization.java 1385310 2012-09-16 16:32:10Z tn $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Should be passed to the constructor of {@link FastCosineTransformer}to use the &lt;em&gt;standard&lt;/em&gt; normalization convention.  The standard
 * DCT-I normalization convention is defined as follows
 * &lt;ul&gt;
 * &lt;li&gt;forward transform:
 * y&lt;sub&gt;n&lt;/sub&gt; = (1/2) [x&lt;sub&gt;0&lt;/sub&gt; + (-1)&lt;sup&gt;n&lt;/sup&gt;x&lt;sub&gt;N-1&lt;/sub&gt;]
 * + &amp;sum;&lt;sub&gt;k=1&lt;/sub&gt;&lt;sup&gt;N-2&lt;/sup&gt;
 * x&lt;sub&gt;k&lt;/sub&gt; cos[&amp;pi; nk / (N - 1)],&lt;/li&gt;
 * &lt;li&gt;inverse transform:
 * x&lt;sub&gt;k&lt;/sub&gt; = [1 / (N - 1)] [y&lt;sub&gt;0&lt;/sub&gt;
 * + (-1)&lt;sup&gt;k&lt;/sup&gt;y&lt;sub&gt;N-1&lt;/sub&gt;]
 * + [2 / (N - 1)] &amp;sum;&lt;sub&gt;n=1&lt;/sub&gt;&lt;sup&gt;N-2&lt;/sup&gt;
 * y&lt;sub&gt;n&lt;/sub&gt; cos[&amp;pi; nk / (N - 1)],&lt;/li&gt;
 * &lt;/ul&gt;
 * where N is the size of the data sample.</text>
  </javadoc>
  <javadoc>
    <text>Should be passed to the constructor of {@link FastCosineTransformer}to use the &lt;em&gt;orthogonal&lt;/em&gt; normalization convention. The orthogonal
 * DCT-I normalization convention is defined as follows
 * &lt;ul&gt;
 * &lt;li&gt;forward transform:
 * y&lt;sub&gt;n&lt;/sub&gt; = [2(N - 1)]&lt;sup&gt;-1/2&lt;/sup&gt; [x&lt;sub&gt;0&lt;/sub&gt;
 * + (-1)&lt;sup&gt;n&lt;/sup&gt;x&lt;sub&gt;N-1&lt;/sub&gt;]
 * + [2 / (N - 1)]&lt;sup&gt;1/2&lt;/sup&gt; &amp;sum;&lt;sub&gt;k=1&lt;/sub&gt;&lt;sup&gt;N-2&lt;/sup&gt;
 * x&lt;sub&gt;k&lt;/sub&gt; cos[&amp;pi; nk / (N - 1)],&lt;/li&gt;
 * &lt;li&gt;inverse transform:
 * x&lt;sub&gt;k&lt;/sub&gt; = [2(N - 1)]&lt;sup&gt;-1/2&lt;/sup&gt; [y&lt;sub&gt;0&lt;/sub&gt;
 * + (-1)&lt;sup&gt;k&lt;/sup&gt;y&lt;sub&gt;N-1&lt;/sub&gt;]
 * + [2 / (N - 1)]&lt;sup&gt;1/2&lt;/sup&gt; &amp;sum;&lt;sub&gt;n=1&lt;/sub&gt;&lt;sup&gt;N-2&lt;/sup&gt;
 * y&lt;sub&gt;n&lt;/sub&gt; cos[&amp;pi; nk / (N - 1)],&lt;/li&gt;
 * &lt;/ul&gt;
 * which makes the transform orthogonal. N is the size of the data sample.</text>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
