<?xml version="1.0" encoding="UTF-8"?>
<class name="FieldHermiteInterpolator">
  <javadoc>
    <text>Polynomial interpolator using both sample values and sample derivatives.
 * &lt;p&gt;
 * The interpolation polynomials match all sample points, including both values
 * and provided derivatives. There is one polynomial for each component of
 * the values vector. All polynomials have the same degree. The degree of the
 * polynomials depends on the number of points and number of derivatives at each
 * point. For example the interpolation polynomials for n sample points without
 * any derivatives all have degree n-1. The interpolation polynomials for n
 * sample points with the two extreme points having value and first derivative
 * and the remaining points having value only all have degree n+1. The
 * interpolation polynomial for n sample points with value, first and second
 * derivative for all points all have degree 3n-1.
 * &lt;/p&gt;</text>
    <param>&lt;T&gt;
 *  Type of the field elements.</param>
    <version>$Id: FieldHermiteInterpolator.java 1455194 2013-03-11 15:45:54Z luc $</version>
    <since>3.2</since>
  </javadoc>
  <javadoc>
    <text>Sample abscissae.</text>
  </javadoc>
  <declaration type="List&lt;T&gt;" name="abscissae" />
  <javadoc>
    <text>Top diagonal of the divided differences array.</text>
  </javadoc>
  <declaration type="List&lt;T[]&gt;" name="topDiagonal" />
  <javadoc>
    <text>Bottom diagonal of the divided differences array.</text>
  </javadoc>
  <declaration type="List&lt;T[]&gt;" name="bottomDiagonal" />
  <javadoc>
    <text>Create an empty interpolator.</text>
  </javadoc>
  <method type="constructor" name="FieldHermiteInterpolator" />
  <javadoc>
    <text>Add a sample point.
 * &lt;p&gt;
 * This method must be called once for each sample point. It is allowed to
 * mix some calls with values only with calls with values and first
 * derivatives.
 * &lt;/p&gt;
 * &lt;p&gt;
 * The point abscissae for all calls &lt;em&gt;must&lt;/em&gt; be different.
 * &lt;/p&gt;</text>
    <param>x abscissa of the sample point</param>
    <param>value value and derivatives of the sample point
 * (if only one row is passed, it is the value, if two rows are
 * passed the first one is the value and the second the derivative
 * and so on)</param>
    <exception>ZeroException if the abscissa difference between added point
 * and a previous point is zero (i.e. the two points are at same abscissa)</exception>
    <exception>MathArithmeticException if the number of derivatives is larger
 * than 20, which prevents computation of a factorial</exception>
    <throws>DimensionMismatchException if derivative structures are inconsistent</throws>
    <throws>NullArgumentException if x is null</throws>
  </javadoc>
  <method type="void" name="addSamplePoint">
    <declaration type="T" name="factorial" />
    <scope>
      <declaration type="T[]" name="y" />
      <scope>
        <declaration type="T" name="inv" />
        <scope />
      </scope>
      <declaration type="int" name="n" />
      <declaration type="T[]" name="bottom0" />
      <scope>
        <declaration type="T[]" name="bottom1" />
        <scope />
        <declaration type="T" name="inv" />
        <scope />
      </scope>
    </scope>
    <comment>update the bottom diagonal of the divided differences array</comment>
    <comment>update the top diagonal of the divided differences array</comment>
    <comment>update the abscissae array</comment>
  </method>
  <javadoc>
    <text>Interpolate value at a specified abscissa.</text>
    <param>x interpolation abscissa</param>
    <return>interpolated value</return>
    <exception>NoDataException if sample is empty</exception>
    <throws>NullArgumentException if x is null</throws>
  </javadoc>
  <method type="T[]" name="value">
    <scope />
    <declaration type="T[]" name="value" />
    <declaration type="T" name="valueCoeff" />
    <scope>
      <declaration type="T[]" name="dividedDifference" />
      <scope />
      <declaration type="T" name="deltaX" />
    </scope>
    <comment>safety check</comment>
  </method>
  <javadoc>
    <text>Interpolate value and first derivatives at a specified abscissa.</text>
    <param>x interpolation abscissa</param>
    <param>order maximum derivation order</param>
    <return>interpolated value and derivatives (value in row 0,
 * 1&lt;sup&gt;st&lt;/sup&gt; derivative in row 1, ... n&lt;sup&gt;th&lt;/sup&gt; derivative in row n)</return>
    <exception>NoDataException if sample is empty</exception>
    <throws>NullArgumentException if x is null</throws>
  </javadoc>
  <method type="T[][]" name="derivatives">
    <scope />
    <declaration type="T" name="zero" />
    <declaration type="T" name="one" />
    <declaration type="T[]" name="tj" />
    <scope />
    <declaration type="T[][]" name="derivatives" />
    <declaration type="T[]" name="valueCoeff" />
    <scope>
      <declaration type="T[]" name="dividedDifference" />
      <declaration type="T" name="deltaX" />
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>safety check</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
