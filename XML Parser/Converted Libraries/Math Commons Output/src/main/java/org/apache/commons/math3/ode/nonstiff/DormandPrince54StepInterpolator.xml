<?xml version="1.0" encoding="UTF-8"?>
<class name="DormandPrince54StepInterpolator">
  <javadoc>
    <text>This class represents an interpolator over the last step during an
 * ODE integration for the 5(4) Dormand-Prince integrator.</text>
    <see>DormandPrince54Integrator</see>
    <version>$Id: DormandPrince54StepInterpolator.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>1.2</since>
  </javadoc>
  <javadoc>
    <text>Last row of the Butcher-array internal weights, element 0.</text>
  </javadoc>
  <declaration type="double" name="A70" />
  <javadoc>
    <text>Last row of the Butcher-array internal weights, element 2.</text>
  </javadoc>
  <declaration type="double" name="A72" />
  <javadoc>
    <text>Last row of the Butcher-array internal weights, element 3.</text>
  </javadoc>
  <declaration type="double" name="A73" />
  <javadoc>
    <text>Last row of the Butcher-array internal weights, element 4.</text>
  </javadoc>
  <declaration type="double" name="A74" />
  <javadoc>
    <text>Last row of the Butcher-array internal weights, element 5.</text>
  </javadoc>
  <declaration type="double" name="A75" />
  <javadoc>
    <text>Shampine (1986) Dense output, element 0.</text>
  </javadoc>
  <declaration type="double" name="D0" />
  <javadoc>
    <text>Shampine (1986) Dense output, element 2.</text>
  </javadoc>
  <declaration type="double" name="D2" />
  <javadoc>
    <text>Shampine (1986) Dense output, element 3.</text>
  </javadoc>
  <declaration type="double" name="D3" />
  <javadoc>
    <text>Shampine (1986) Dense output, element 4.</text>
  </javadoc>
  <declaration type="double" name="D4" />
  <javadoc>
    <text>Shampine (1986) Dense output, element 5.</text>
  </javadoc>
  <declaration type="double" name="D5" />
  <javadoc>
    <text>Shampine (1986) Dense output, element 6.</text>
  </javadoc>
  <declaration type="double" name="D6" />
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>First vector for interpolation.</text>
  </javadoc>
  <declaration type="double[]" name="v1" />
  <javadoc>
    <text>Second vector for interpolation.</text>
  </javadoc>
  <declaration type="double[]" name="v2" />
  <javadoc>
    <text>Third vector for interpolation.</text>
  </javadoc>
  <declaration type="double[]" name="v3" />
  <javadoc>
    <text>Fourth vector for interpolation.</text>
  </javadoc>
  <declaration type="double[]" name="v4" />
  <javadoc>
    <text>Initialization indicator for the interpolation vectors.</text>
  </javadoc>
  <declaration type="boolean" name="vectorsInitialized" />
  <javadoc>
    <text>Simple constructor.
 * This constructor builds an instance that is not usable yet, the{@link #reinitialize} method should be called before using the
 * instance in order to initialize the internal arrays. This
 * constructor is used only in order to delay the initialization in
 * some cases. The {@link EmbeddedRungeKuttaIntegrator} uses the
 * prototyping design pattern to create the step interpolators by
 * cloning an uninitialized model and latter initializing the copy.</text>
  </javadoc>
  <method type="constructor" name="DormandPrince54StepInterpolator" />
  <javadoc>
    <text>Copy constructor.</text>
    <param>interpolator interpolator to copy from. The copy is a deep
 * copy: its arrays are separated from the original arrays of the
 * instance</param>
  </javadoc>
  <method type="constructor" name="DormandPrince54StepInterpolator">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="StepInterpolator" name="doCopy" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="reinitialize" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="storeTime" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="computeInterpolatedStateAndDerivatives">
    <scope>
      <scope />
      <scope>
        <declaration type="double" name="yDot0" />
        <declaration type="double" name="yDot2" />
        <declaration type="double" name="yDot3" />
        <declaration type="double" name="yDot4" />
        <declaration type="double" name="yDot5" />
        <declaration type="double" name="yDot6" />
      </scope>
    </scope>
    <declaration type="double" name="eta" />
    <declaration type="double" name="twoTheta" />
    <declaration type="double" name="dot2" />
    <declaration type="double" name="dot3" />
    <declaration type="double" name="dot4" />
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <comment>no step finalization is needed for this interpolator</comment>
    <comment>we need to compute the interpolation vectors for this time step</comment>
    <comment>interpolate</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>element 1 is zero, so it is neither stored nor used</comment>
  <comment>element 1 is zero, so it is neither stored nor used</comment>
</class>
