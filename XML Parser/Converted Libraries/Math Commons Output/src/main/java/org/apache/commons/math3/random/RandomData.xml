<?xml version="1.0" encoding="UTF-8"?>
<class name="RandomData">
  <javadoc>
    <text>Random data generation utilities.</text>
    <deprecated>to be removed in 4.0.  Use {@link RandomDataGenerator} directly</deprecated>
    <version>$Id: RandomData.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <method name="nextHexString" type="String" />
  <javadoc>
    <text>Generates a random string of hex characters of length {@code len}.
 * &lt;p&gt;
 * The generated string will be random, but not cryptographically
 * secure. To generate cryptographically secure strings, use{@link #nextSecureHexString(int)}.
 * &lt;/p&gt;</text>
    <param>len the length of the string to be generated</param>
    <return>a random string of hex characters of length {@code len}</return>
    <throws>NotStrictlyPositiveExceptionif {@code len &lt;= 0}</throws>
  </javadoc>
  <method name="nextInt" type="int" />
  <javadoc>
    <text>Generates a uniformly distributed random integer between {@code lower}and {@code upper} (endpoints included).
 * &lt;p&gt;
 * The generated integer will be random, but not cryptographically secure.
 * To generate cryptographically secure integer sequences, use{@link #nextSecureInt(int,int)}.
 * &lt;/p&gt;</text>
    <param>lower lower bound for generated integer</param>
    <param>upper upper bound for generated integer</param>
    <return>a random integer greater than or equal to {@code lower}and less than or equal to {@code upper}</return>
    <throws>NumberIsTooLargeException if {@code lower &gt;= upper}</throws>
  </javadoc>
  <method name="nextLong" type="long" />
  <javadoc>
    <text>Generates a uniformly distributed random long integer between{@code lower} and {@code upper} (endpoints included).
 * &lt;p&gt;
 * The generated long integer values will be random, but not
 * cryptographically secure. To generate cryptographically secure sequences
 * of longs, use {@link #nextSecureLong(long,long)}.
 * &lt;/p&gt;</text>
    <param>lower lower bound for generated long integer</param>
    <param>upper upper bound for generated long integer</param>
    <return>a random long integer greater than or equal to {@code lower} and
 * less than or equal to {@code upper}</return>
    <throws>NumberIsTooLargeException if {@code lower &gt;= upper}</throws>
  </javadoc>
  <method name="nextSecureHexString" type="String" />
  <javadoc>
    <text>Generates a random string of hex characters from a secure random
 * sequence.
 * &lt;p&gt;
 * If cryptographic security is not required, use{@link #nextHexString(int)}.
 * &lt;/p&gt;</text>
    <param>len the length of the string to be generated</param>
    <return>a random string of hex characters of length {@code len}</return>
    <throws>NotStrictlyPositiveException if {@code len &lt;= 0}</throws>
  </javadoc>
  <method name="nextSecureInt" type="int" />
  <javadoc>
    <text>Generates a uniformly distributed random integer between {@code lower}and {@code upper} (endpoints included) from a secure random sequence.
 * &lt;p&gt;
 * Sequences of integers generated using this method will be
 * cryptographically secure. If cryptographic security is not required,{@link #nextInt(int,int)} should be used instead of this method.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Definition&lt;/strong&gt;:
 * &lt;a href="http://en.wikipedia.org/wiki/Cryptographically_secure_pseudo-random_number_generator"&gt;
 * Secure Random Sequence&lt;/a&gt;&lt;/p&gt;</text>
    <param>lower lower bound for generated integer</param>
    <param>upper upper bound for generated integer</param>
    <return>a random integer greater than or equal to {@code lower} and less
 * than or equal to {@code upper}.</return>
    <throws>NumberIsTooLargeException if {@code lower &gt;= upper}.</throws>
  </javadoc>
  <method name="nextSecureLong" type="long" />
  <javadoc>
    <text>Generates a uniformly distributed random long integer between{@code lower} and {@code upper} (endpoints included) from a secure random
 * sequence.
 * &lt;p&gt;
 * Sequences of long values generated using this method will be
 * cryptographically secure. If cryptographic security is not required,{@link #nextLong(long,long)} should be used instead of this method.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Definition&lt;/strong&gt;:
 * &lt;a href="http://en.wikipedia.org/wiki/Cryptographically_secure_pseudo-random_number_generator"&gt;
 * Secure Random Sequence&lt;/a&gt;&lt;/p&gt;</text>
    <param>lower lower bound for generated integer</param>
    <param>upper upper bound for generated integer</param>
    <return>a random long integer greater than or equal to {@code lower} and
 * less than or equal to {@code upper}.</return>
    <throws>NumberIsTooLargeException if {@code lower &gt;= upper}.</throws>
  </javadoc>
  <method name="nextPoisson" type="long" />
  <javadoc>
    <text>Generates a random value from the Poisson distribution with the given
 * mean.
 * &lt;p&gt;
 * &lt;strong&gt;Definition&lt;/strong&gt;:
 * &lt;a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda366j.htm"&gt;
 * Poisson Distribution&lt;/a&gt;&lt;/p&gt;</text>
    <param>mean the mean of the Poisson distribution</param>
    <return>a random value following the specified Poisson distribution</return>
    <throws>NotStrictlyPositiveException if {@code mean &lt;= 0}.</throws>
  </javadoc>
  <method name="nextGaussian" type="double" />
  <javadoc>
    <text>Generates a random value from the Normal (or Gaussian) distribution with
 * specified mean and standard deviation.
 * &lt;p&gt;
 * &lt;strong&gt;Definition&lt;/strong&gt;:
 * &lt;a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda3661.htm"&gt;
 * Normal Distribution&lt;/a&gt;&lt;/p&gt;</text>
    <param>mu the mean of the distribution</param>
    <param>sigma the standard deviation of the distribution</param>
    <return>a random value following the specified Gaussian distribution</return>
    <throws>NotStrictlyPositiveException if {@code sigma &lt;= 0}.</throws>
  </javadoc>
  <method name="nextExponential" type="double" />
  <javadoc>
    <text>Generates a random value from the exponential distribution
 * with specified mean.
 * &lt;p&gt;
 * &lt;strong&gt;Definition&lt;/strong&gt;:
 * &lt;a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda3667.htm"&gt;
 * Exponential Distribution&lt;/a&gt;&lt;/p&gt;</text>
    <param>mean the mean of the distribution</param>
    <return>a random value following the specified exponential distribution</return>
    <throws>NotStrictlyPositiveException if {@code mean &lt;= 0}.</throws>
  </javadoc>
  <method name="nextUniform" type="double" />
  <javadoc>
    <text>Generates a uniformly distributed random value from the open interval{@code (lower, upper)} (i.e., endpoints excluded).
 * &lt;p&gt;
 * &lt;strong&gt;Definition&lt;/strong&gt;:
 * &lt;a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda3662.htm"&gt;
 * Uniform Distribution&lt;/a&gt; {@code lower} and {@code upper - lower} are the
 * &lt;a href = "http://www.itl.nist.gov/div898/handbook/eda/section3/eda364.htm"&gt;
 * location and scale parameters&lt;/a&gt;, respectively.&lt;/p&gt;</text>
    <param>lower the exclusive lower bound of the support</param>
    <param>upper the exclusive upper bound of the support</param>
    <return>a uniformly distributed random value between lower and upper
 * (exclusive)</return>
    <throws>NumberIsTooLargeException if {@code lower &gt;= upper}</throws>
    <throws>NotFiniteNumberException if one of the bounds is infinite</throws>
    <throws>NotANumberException if one of the bounds is NaN</throws>
  </javadoc>
  <method name="nextUniform" type="double" />
  <javadoc>
    <text>Generates a uniformly distributed random value from the interval{@code (lower, upper)} or the interval {@code [lower, upper)}. The lower
 * bound is thus optionally included, while the upper bound is always
 * excluded.
 * &lt;p&gt;
 * &lt;strong&gt;Definition&lt;/strong&gt;:
 * &lt;a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda3662.htm"&gt;
 * Uniform Distribution&lt;/a&gt; {@code lower} and {@code upper - lower} are the
 * &lt;a href = "http://www.itl.nist.gov/div898/handbook/eda/section3/eda364.htm"&gt;
 * location and scale parameters&lt;/a&gt;, respectively.&lt;/p&gt;</text>
    <param>lower the lower bound of the support</param>
    <param>upper the exclusive upper bound of the support</param>
    <param>lowerInclusive {@code true} if the lower bound is inclusive</param>
    <return>uniformly distributed random value in the {@code (lower, upper)}interval, if {@code lowerInclusive} is {@code false}, or in the{@code [lower, upper)} interval, if {@code lowerInclusive} is{@code true}</return>
    <throws>NumberIsTooLargeException if {@code lower &gt;= upper}</throws>
    <throws>NotFiniteNumberException if one of the bounds is infinite</throws>
    <throws>NotANumberException if one of the bounds is NaN</throws>
  </javadoc>
  <method name="nextPermutation" type="int[]" />
  <javadoc>
    <text>Generates an integer array of length {@code k} whose entries are selected
 * randomly, without repetition, from the integers {@code 0, ..., n - 1}(inclusive).
 * &lt;p&gt;
 * Generated arrays represent permutations of {@code n} taken {@code k} at a
 * time.&lt;/p&gt;</text>
    <param>n the domain of the permutation</param>
    <param>k the size of the permutation</param>
    <return>a random {@code k}-permutation of {@code n}, as an array of
 * integers</return>
    <throws>NumberIsTooLargeException if {@code k &gt; n}.</throws>
    <throws>NotStrictlyPositiveException if {@code k &lt;= 0}.</throws>
  </javadoc>
  <method name="nextSample" type="Object[]" />
  <javadoc>
    <text>Returns an array of {@code k} objects selected randomly from the
 * Collection {@code c}.
 * &lt;p&gt;
 * Sampling from {@code c} is without replacement; but if {@code c} contains
 * identical objects, the sample may include repeats.  If all elements of{@code c} are distinct, the resulting object array represents a
 * &lt;a href="http://rkb.home.cern.ch/rkb/AN16pp/node250.html#SECTION0002500000000000000000"&gt;
 * Simple Random Sample&lt;/a&gt; of size {@code k} from the elements of{@code c}.&lt;/p&gt;</text>
    <param>c the collection to be sampled</param>
    <param>k the size of the sample</param>
    <return>a random sample of {@code k} elements from {@code c}</return>
    <throws>NumberIsTooLargeException if {@code k &gt; c.size()}.</throws>
    <throws>NotStrictlyPositiveException if {@code k &lt;= 0}.</throws>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
