<?xml version="1.0" encoding="UTF-8"?>
<class name="GaussNewtonOptimizer">
  <javadoc>
    <text>Gauss-Newton least-squares solver.
 * &lt;br/&gt;
 * Constraints are not supported: the call to{@link #optimize(OptimizationData[]) optimize} will throw{@link MathUnsupportedOperationException} if bounds are passed to it.
 * &lt;p&gt;
 * This class solve a least-square problem by solving the normal equations
 * of the linearized problem at each iteration. Either LU decomposition or
 * QR decomposition can be used to solve the normal equations. LU decomposition
 * is faster but QR decomposition is more robust for difficult problems.
 * &lt;/p&gt;</text>
    <version>$Id: GaussNewtonOptimizer.java 1458323 2013-03-19 14:51:30Z erans $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>Indicator for using LU decomposition.</text>
  </javadoc>
  <declaration type="boolean" name="useLU" />
  <javadoc>
    <text>Simple constructor with default settings.
 * The normal equations will be solved using LU decomposition.</text>
    <param>checker Convergence checker.</param>
  </javadoc>
  <method type="constructor" name="GaussNewtonOptimizer" />
  <javadoc>
    <param>useLU If {@code true}, the normal equations will be solved
 * using LU decomposition, otherwise they will be solved using QR
 * decomposition.</param>
    <param>checker Convergence checker.</param>
  </javadoc>
  <method type="constructor" name="GaussNewtonOptimizer" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="PointVectorValuePair" name="doOptimize">
    <declaration type="ConvergenceChecker&lt;PointVectorValuePair&gt;" name="checker" />
    <scope />
    <declaration type="double[]" name="targetValues" />
    <declaration type="int" name="nR" />
    <declaration type="RealMatrix" name="weightMatrix" />
    <declaration type="double[]" name="residualsWeights" />
    <scope />
    <declaration type="double[]" name="currentPoint" />
    <declaration type="int" name="nC" />
    <declaration type="PointVectorValuePair" name="current" />
    <scope>
      <declaration type="PointVectorValuePair" name="previous" />
      <declaration type="double[]" name="currentObjective" />
      <declaration type="double[]" name="currentResiduals" />
      <declaration type="RealMatrix" name="weightedJacobian" />
      <declaration type="double[]" name="b" />
      <declaration type="double[][]" name="a" />
      <scope>
        <declaration type="double[]" name="grad" />
        <declaration type="double" name="weight" />
        <declaration type="double" name="residual" />
        <declaration type="double" name="wr" />
        <scope />
        <scope>
          <declaration type="double[]" name="ak" />
          <declaration type="double" name="wgk" />
          <scope />
        </scope>
      </scope>
      <scope>
        <declaration type="RealMatrix" name="mA" />
        <declaration type="DecompositionSolver" name="solver" />
        <declaration type="double[]" name="dX" />
        <scope />
      </scope>
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>Computation will be useless without a checker (see "for-loop").</comment>
    <comment>Number of observed data.</comment>
    <comment>Diagonal of the weight matrix.</comment>
    <comment>iterate until convergence is reached</comment>
    <comment>evaluate the objective function and its jacobian</comment>
    <comment>Value of the objective function at "currentPoint".</comment>
    <comment>build the linear problem</comment>
    <comment>compute the normal equation</comment>
    <comment>build the contribution matrix for measurement i</comment>
    <comment>solve the linearized least squares problem</comment>
    <comment>update the estimated parameters</comment>
    <comment>Check convergence.</comment>
    <comment>Must never happen.</comment>
  </method>
  <javadoc>
    <throws>MathUnsupportedOperationException if bounds were passed to the{@link #optimize(OptimizationData[]) optimize} method.</throws>
  </javadoc>
  <method type="void" name="checkParameters">
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
