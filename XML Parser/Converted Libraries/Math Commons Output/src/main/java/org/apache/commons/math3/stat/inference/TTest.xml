<?xml version="1.0" encoding="UTF-8"?>
<class name="TTest">
  <javadoc>
    <text>An implementation for Student's t-tests.
 * &lt;p&gt;
 * Tests can be:&lt;ul&gt;
 * &lt;li&gt;One-sample or two-sample&lt;/li&gt;
 * &lt;li&gt;One-sided or two-sided&lt;/li&gt;
 * &lt;li&gt;Paired or unpaired (for two-sample tests)&lt;/li&gt;
 * &lt;li&gt;Homoscedastic (equal variance assumption) or heteroscedastic
 * (for two sample tests)&lt;/li&gt;
 * &lt;li&gt;Fixed significance level (boolean-valued) or returning p-values.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
 * &lt;p&gt;
 * Test statistics are available for all tests.  Methods including "Test" in
 * in their names perform tests, all other methods return t-statistics.  Among
 * the "Test" methods, &lt;code&gt;double-&lt;/code&gt;valued methods return p-values;
 * &lt;code&gt;boolean-&lt;/code&gt;valued methods perform fixed significance level tests.
 * Significance levels are always specified as numbers between 0 and 0.5
 * (e.g. tests at the 95% level  use &lt;code&gt;alpha=0.05&lt;/code&gt;).&lt;/p&gt;
 * &lt;p&gt;
 * Input to tests can be either &lt;code&gt;double[]&lt;/code&gt; arrays or{@link StatisticalSummary} instances.&lt;/p&gt;&lt;p&gt;
 * Uses commons-math {@link org.apache.commons.math3.distribution.TDistribution}implementation to estimate exact p-values.&lt;/p&gt;</text>
    <version>$Id: TTest.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Computes a paired, 2-sample t-statistic based on the data in the input
 * arrays.  The t-statistic returned is equivalent to what would be returned by
 * computing the one-sample t-statistic {@link #t(double,double[])}, with
 * &lt;code&gt;mu = 0&lt;/code&gt; and the sample array consisting of the (signed)
 * differences between corresponding entries in &lt;code&gt;sample1&lt;/code&gt; and
 * &lt;code&gt;sample2.&lt;/code&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The input arrays must have the same length and their common length
 * must be at least 2.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>sample1 array of sample data values</param>
    <param>sample2 array of sample data values</param>
    <return>t statistic</return>
    <throws>NullArgumentException if the arrays are &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NoDataException if the arrays are empty</throws>
    <throws>DimensionMismatchException if the length of the arrays is not equal</throws>
    <throws>NumberIsTooSmallException if the length of the arrays is &amp;lt; 2</throws>
  </javadoc>
  <method type="double" name="pairedT">
    <declaration type="double" name="meanDifference" />
  </method>
  <javadoc>
    <text>Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or
 * &lt;i&gt; p-value&lt;/i&gt;, associated with a paired, two-sample, two-tailed t-test
 * based on the data in the input arrays.
 * &lt;p&gt;
 * The number returned is the smallest significance level
 * at which one can reject the null hypothesis that the mean of the paired
 * differences is 0 in favor of the two-sided alternative that the mean paired
 * difference is not equal to 0. For a one-sided test, divide the returned
 * value by 2.&lt;/p&gt;
 * &lt;p&gt;
 * This test is equivalent to a one-sample t-test computed using{@link #tTest(double,double[])} with &lt;code&gt;mu = 0&lt;/code&gt; and the sample
 * array consisting of the signed differences between corresponding elements of
 * &lt;code&gt;sample1&lt;/code&gt; and &lt;code&gt;sample2.&lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
 * The validity of the p-value depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * &lt;a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"&gt;
 * here&lt;/a&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The input array lengths must be the same and their common length must
 * be at least 2.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>sample1 array of sample data values</param>
    <param>sample2 array of sample data values</param>
    <return>p-value for t-test</return>
    <throws>NullArgumentException if the arrays are &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NoDataException if the arrays are empty</throws>
    <throws>DimensionMismatchException if the length of the arrays is not equal</throws>
    <throws>NumberIsTooSmallException if the length of the arrays is &amp;lt; 2</throws>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
  </javadoc>
  <method type="double" name="pairedTTest">
    <declaration type="double" name="meanDifference" />
  </method>
  <javadoc>
    <text>Performs a paired t-test evaluating the null hypothesis that the
 * mean of the paired differences between &lt;code&gt;sample1&lt;/code&gt; and
 * &lt;code&gt;sample2&lt;/code&gt; is 0 in favor of the two-sided alternative that the
 * mean paired difference is not equal to 0, with significance level
 * &lt;code&gt;alpha&lt;/code&gt;.
 * &lt;p&gt;
 * Returns &lt;code&gt;true&lt;/code&gt; iff the null hypothesis can be rejected with
 * confidence &lt;code&gt;1 - alpha&lt;/code&gt;.  To perform a 1-sided test, use
 * &lt;code&gt;alpha * 2&lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
 * The validity of the test depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * &lt;a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"&gt;
 * here&lt;/a&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The input array lengths must be the same and their common length
 * must be at least 2.
 * &lt;/li&gt;
 * &lt;li&gt; &lt;code&gt; 0 &amp;lt; alpha &amp;lt; 0.5 &lt;/code&gt;
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>sample1 array of sample data values</param>
    <param>sample2 array of sample data values</param>
    <param>alpha significance level of the test</param>
    <return>true if the null hypothesis can be rejected with
 * confidence 1 - alpha</return>
    <throws>NullArgumentException if the arrays are &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NoDataException if the arrays are empty</throws>
    <throws>DimensionMismatchException if the length of the arrays is not equal</throws>
    <throws>NumberIsTooSmallException if the length of the arrays is &amp;lt; 2</throws>
    <throws>OutOfRangeException if &lt;code&gt;alpha&lt;/code&gt; is not in the range (0, 0.5]</throws>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
  </javadoc>
  <method type="boolean" name="pairedTTest" />
  <javadoc>
    <text>Computes a &lt;a href="http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula"&gt;
 * t statistic &lt;/a&gt; given observed values and a comparison constant.
 * &lt;p&gt;
 * This statistic can be used to perform a one sample t-test for the mean.
 * &lt;/p&gt;&lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The observed array length must be at least 2.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>mu comparison constant</param>
    <param>observed array of values</param>
    <return>t statistic</return>
    <throws>NullArgumentException if &lt;code&gt;observed&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NumberIsTooSmallException if the length of &lt;code&gt;observed&lt;/code&gt; is &amp;lt; 2</throws>
  </javadoc>
  <method type="double" name="t">
    <comment>No try-catch or advertised exception because args have just been checked</comment>
  </method>
  <javadoc>
    <text>Computes a &lt;a href="http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula"&gt;
 * t statistic &lt;/a&gt; to use in comparing the mean of the dataset described by
 * &lt;code&gt;sampleStats&lt;/code&gt; to &lt;code&gt;mu&lt;/code&gt;.
 * &lt;p&gt;
 * This statistic can be used to perform a one sample t-test for the mean.
 * &lt;/p&gt;&lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;&lt;code&gt;observed.getN() &amp;ge; 2&lt;/code&gt;.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>mu comparison constant</param>
    <param>sampleStats DescriptiveStatistics holding sample summary statitstics</param>
    <return>t statistic</return>
    <throws>NullArgumentException if &lt;code&gt;sampleStats&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NumberIsTooSmallException if the number of samples is &amp;lt; 2</throws>
  </javadoc>
  <method type="double" name="t" />
  <javadoc>
    <text>Computes a 2-sample t statistic,  under the hypothesis of equal
 * subpopulation variances.  To compute a t-statistic without the
 * equal variances hypothesis, use {@link #t(double[],double[])}.
 * &lt;p&gt;
 * This statistic can be used to perform a (homoscedastic) two-sample
 * t-test to compare sample means.&lt;/p&gt;
 * &lt;p&gt;
 * The t-statistic is&lt;/p&gt;
 * &lt;p&gt;
 * &amp;nbsp;&amp;nbsp;&lt;code&gt;  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))&lt;/code&gt;
 * &lt;/p&gt;&lt;p&gt;
 * where &lt;strong&gt;&lt;code&gt;n1&lt;/code&gt;&lt;/strong&gt; is the size of first sample;
 * &lt;strong&gt;&lt;code&gt; n2&lt;/code&gt;&lt;/strong&gt; is the size of second sample;
 * &lt;strong&gt;&lt;code&gt; m1&lt;/code&gt;&lt;/strong&gt; is the mean of first sample;
 * &lt;strong&gt;&lt;code&gt; m2&lt;/code&gt;&lt;/strong&gt; is the mean of second sample&lt;/li&gt;
 * &lt;/ul&gt;
 * and &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt; is the pooled variance estimate:
 * &lt;/p&gt;&lt;p&gt;
 * &lt;code&gt;var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))&lt;/code&gt;
 * &lt;/p&gt;&lt;p&gt;
 * with &lt;strong&gt;&lt;code&gt;var1&lt;/code&gt;&lt;/strong&gt; the variance of the first sample and
 * &lt;strong&gt;&lt;code&gt;var2&lt;/code&gt;&lt;/strong&gt; the variance of the second sample.
 * &lt;/p&gt;&lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The observed array lengths must both be at least 2.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>sample1 array of sample data values</param>
    <param>sample2 array of sample data values</param>
    <return>t statistic</return>
    <throws>NullArgumentException if the arrays are &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NumberIsTooSmallException if the length of the arrays is &amp;lt; 2</throws>
  </javadoc>
  <method type="double" name="homoscedasticT">
    <comment>No try-catch or advertised exception because args have just been checked</comment>
  </method>
  <javadoc>
    <text>Computes a 2-sample t statistic, without the hypothesis of equal
 * subpopulation variances.  To compute a t-statistic assuming equal
 * variances, use {@link #homoscedasticT(double[],double[])}.
 * &lt;p&gt;
 * This statistic can be used to perform a two-sample t-test to compare
 * sample means.&lt;/p&gt;
 * &lt;p&gt;
 * The t-statistic is&lt;/p&gt;
 * &lt;p&gt;
 * &amp;nbsp;&amp;nbsp; &lt;code&gt;  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)&lt;/code&gt;
 * &lt;/p&gt;&lt;p&gt;
 * where &lt;strong&gt;&lt;code&gt;n1&lt;/code&gt;&lt;/strong&gt; is the size of the first sample
 * &lt;strong&gt;&lt;code&gt; n2&lt;/code&gt;&lt;/strong&gt; is the size of the second sample;
 * &lt;strong&gt;&lt;code&gt; m1&lt;/code&gt;&lt;/strong&gt; is the mean of the first sample;
 * &lt;strong&gt;&lt;code&gt; m2&lt;/code&gt;&lt;/strong&gt; is the mean of the second sample;
 * &lt;strong&gt;&lt;code&gt; var1&lt;/code&gt;&lt;/strong&gt; is the variance of the first sample;
 * &lt;strong&gt;&lt;code&gt; var2&lt;/code&gt;&lt;/strong&gt; is the variance of the second sample;
 * &lt;/p&gt;&lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The observed array lengths must both be at least 2.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>sample1 array of sample data values</param>
    <param>sample2 array of sample data values</param>
    <return>t statistic</return>
    <throws>NullArgumentException if the arrays are &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NumberIsTooSmallException if the length of the arrays is &amp;lt; 2</throws>
  </javadoc>
  <method type="double" name="t">
    <comment>No try-catch or advertised exception because args have just been checked</comment>
  </method>
  <javadoc>
    <text>Computes a 2-sample t statistic &lt;/a&gt;, comparing the means of the datasets
 * described by two {@link StatisticalSummary} instances, without the
 * assumption of equal subpopulation variances.  Use{@link #homoscedasticT(StatisticalSummary,StatisticalSummary)} to
 * compute a t-statistic under the equal variances assumption.
 * &lt;p&gt;
 * This statistic can be used to perform a two-sample t-test to compare
 * sample means.&lt;/p&gt;
 * &lt;p&gt;
 * The returned  t-statistic is&lt;/p&gt;
 * &lt;p&gt;
 * &amp;nbsp;&amp;nbsp; &lt;code&gt;  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)&lt;/code&gt;
 * &lt;/p&gt;&lt;p&gt;
 * where &lt;strong&gt;&lt;code&gt;n1&lt;/code&gt;&lt;/strong&gt; is the size of the first sample;
 * &lt;strong&gt;&lt;code&gt; n2&lt;/code&gt;&lt;/strong&gt; is the size of the second sample;
 * &lt;strong&gt;&lt;code&gt; m1&lt;/code&gt;&lt;/strong&gt; is the mean of the first sample;
 * &lt;strong&gt;&lt;code&gt; m2&lt;/code&gt;&lt;/strong&gt; is the mean of the second sample
 * &lt;strong&gt;&lt;code&gt; var1&lt;/code&gt;&lt;/strong&gt; is the variance of the first sample;
 * &lt;strong&gt;&lt;code&gt; var2&lt;/code&gt;&lt;/strong&gt; is the variance of the second sample
 * &lt;/p&gt;&lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The datasets described by the two Univariates must each contain
 * at least 2 observations.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>sampleStats1 StatisticalSummary describing data from the first sample</param>
    <param>sampleStats2 StatisticalSummary describing data from the second sample</param>
    <return>t statistic</return>
    <throws>NullArgumentException if the sample statistics are &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NumberIsTooSmallException if the number of samples is &amp;lt; 2</throws>
  </javadoc>
  <method type="double" name="t" />
  <javadoc>
    <text>Computes a 2-sample t statistic, comparing the means of the datasets
 * described by two {@link StatisticalSummary} instances, under the
 * assumption of equal subpopulation variances.  To compute a t-statistic
 * without the equal variances assumption, use{@link #t(StatisticalSummary,StatisticalSummary)}.
 * &lt;p&gt;
 * This statistic can be used to perform a (homoscedastic) two-sample
 * t-test to compare sample means.&lt;/p&gt;
 * &lt;p&gt;
 * The t-statistic returned is&lt;/p&gt;
 * &lt;p&gt;
 * &amp;nbsp;&amp;nbsp;&lt;code&gt;  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))&lt;/code&gt;
 * &lt;/p&gt;&lt;p&gt;
 * where &lt;strong&gt;&lt;code&gt;n1&lt;/code&gt;&lt;/strong&gt; is the size of first sample;
 * &lt;strong&gt;&lt;code&gt; n2&lt;/code&gt;&lt;/strong&gt; is the size of second sample;
 * &lt;strong&gt;&lt;code&gt; m1&lt;/code&gt;&lt;/strong&gt; is the mean of first sample;
 * &lt;strong&gt;&lt;code&gt; m2&lt;/code&gt;&lt;/strong&gt; is the mean of second sample
 * and &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt; is the pooled variance estimate:
 * &lt;/p&gt;&lt;p&gt;
 * &lt;code&gt;var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))&lt;/code&gt;
 * &lt;/p&gt;&lt;p&gt;
 * with &lt;strong&gt;&lt;code&gt;var1&lt;/code&gt;&lt;/strong&gt; the variance of the first sample and
 * &lt;strong&gt;&lt;code&gt;var2&lt;/code&gt;&lt;/strong&gt; the variance of the second sample.
 * &lt;/p&gt;&lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The datasets described by the two Univariates must each contain
 * at least 2 observations.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>sampleStats1 StatisticalSummary describing data from the first sample</param>
    <param>sampleStats2 StatisticalSummary describing data from the second sample</param>
    <return>t statistic</return>
    <throws>NullArgumentException if the sample statistics are &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NumberIsTooSmallException if the number of samples is &amp;lt; 2</throws>
  </javadoc>
  <method type="double" name="homoscedasticT" />
  <javadoc>
    <text>Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or
 * &lt;i&gt;p-value&lt;/i&gt;, associated with a one-sample, two-tailed t-test
 * comparing the mean of the input array with the constant &lt;code&gt;mu&lt;/code&gt;.
 * &lt;p&gt;
 * The number returned is the smallest significance level
 * at which one can reject the null hypothesis that the mean equals
 * &lt;code&gt;mu&lt;/code&gt; in favor of the two-sided alternative that the mean
 * is different from &lt;code&gt;mu&lt;/code&gt;. For a one-sided test, divide the
 * returned value by 2.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
 * The validity of the test depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * &lt;a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"&gt;here&lt;/a&gt;
 * &lt;/p&gt;&lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The observed array length must be at least 2.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>mu constant value to compare sample mean against</param>
    <param>sample array of sample data values</param>
    <return>p-value</return>
    <throws>NullArgumentException if the sample array is &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NumberIsTooSmallException if the length of the array is &amp;lt; 2</throws>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
  </javadoc>
  <method type="double" name="tTest">
    <comment>No try-catch or advertised exception because args have just been checked</comment>
  </method>
  <javadoc>
    <text>Performs a &lt;a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm"&gt;
 * two-sided t-test&lt;/a&gt; evaluating the null hypothesis that the mean of the population from
 * which &lt;code&gt;sample&lt;/code&gt; is drawn equals &lt;code&gt;mu&lt;/code&gt;.
 * &lt;p&gt;
 * Returns &lt;code&gt;true&lt;/code&gt; iff the null hypothesis can be
 * rejected with confidence &lt;code&gt;1 - alpha&lt;/code&gt;.  To
 * perform a 1-sided test, use &lt;code&gt;alpha * 2&lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Examples:&lt;/strong&gt;&lt;br&gt;&lt;ol&gt;
 * &lt;li&gt;To test the (2-sided) hypothesis &lt;code&gt;sample mean = mu &lt;/code&gt; at
 * the 95% level, use &lt;br&gt;&lt;code&gt;tTest(mu, sample, 0.05) &lt;/code&gt;
 * &lt;/li&gt;
 * &lt;li&gt;To test the (one-sided) hypothesis &lt;code&gt; sample mean &lt; mu &lt;/code&gt;
 * at the 99% level, first verify that the measured sample mean is less
 * than &lt;code&gt;mu&lt;/code&gt; and then use
 * &lt;br&gt;&lt;code&gt;tTest(mu, sample, 0.02) &lt;/code&gt;
 * &lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
 * The validity of the test depends on the assumptions of the one-sample
 * parametric t-test procedure, as discussed
 * &lt;a href="http://www.basic.nwu.edu/statguidefiles/sg_glos.html#one-sample"&gt;here&lt;/a&gt;
 * &lt;/p&gt;&lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The observed array length must be at least 2.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>mu constant value to compare sample mean against</param>
    <param>sample array of sample data values</param>
    <param>alpha significance level of the test</param>
    <return>p-value</return>
    <throws>NullArgumentException if the sample array is &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NumberIsTooSmallException if the length of the array is &amp;lt; 2</throws>
    <throws>OutOfRangeException if &lt;code&gt;alpha&lt;/code&gt; is not in the range (0, 0.5]</throws>
    <throws>MaxCountExceededException if an error computing the p-value</throws>
  </javadoc>
  <method type="boolean" name="tTest" />
  <javadoc>
    <text>Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or
 * &lt;i&gt;p-value&lt;/i&gt;, associated with a one-sample, two-tailed t-test
 * comparing the mean of the dataset described by &lt;code&gt;sampleStats&lt;/code&gt;
 * with the constant &lt;code&gt;mu&lt;/code&gt;.
 * &lt;p&gt;
 * The number returned is the smallest significance level
 * at which one can reject the null hypothesis that the mean equals
 * &lt;code&gt;mu&lt;/code&gt; in favor of the two-sided alternative that the mean
 * is different from &lt;code&gt;mu&lt;/code&gt;. For a one-sided test, divide the
 * returned value by 2.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
 * The validity of the test depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * &lt;a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"&gt;
 * here&lt;/a&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The sample must contain at least 2 observations.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>mu constant value to compare sample mean against</param>
    <param>sampleStats StatisticalSummary describing sample data</param>
    <return>p-value</return>
    <throws>NullArgumentException if &lt;code&gt;sampleStats&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NumberIsTooSmallException if the number of samples is &amp;lt; 2</throws>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
  </javadoc>
  <method type="double" name="tTest" />
  <javadoc>
    <text>Performs a &lt;a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm"&gt;
 * two-sided t-test&lt;/a&gt; evaluating the null hypothesis that the mean of the
 * population from which the dataset described by &lt;code&gt;stats&lt;/code&gt; is
 * drawn equals &lt;code&gt;mu&lt;/code&gt;.
 * &lt;p&gt;
 * Returns &lt;code&gt;true&lt;/code&gt; iff the null hypothesis can be rejected with
 * confidence &lt;code&gt;1 - alpha&lt;/code&gt;.  To  perform a 1-sided test, use
 * &lt;code&gt;alpha * 2.&lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Examples:&lt;/strong&gt;&lt;br&gt;&lt;ol&gt;
 * &lt;li&gt;To test the (2-sided) hypothesis &lt;code&gt;sample mean = mu &lt;/code&gt; at
 * the 95% level, use &lt;br&gt;&lt;code&gt;tTest(mu, sampleStats, 0.05) &lt;/code&gt;
 * &lt;/li&gt;
 * &lt;li&gt;To test the (one-sided) hypothesis &lt;code&gt; sample mean &lt; mu &lt;/code&gt;
 * at the 99% level, first verify that the measured sample mean is less
 * than &lt;code&gt;mu&lt;/code&gt; and then use
 * &lt;br&gt;&lt;code&gt;tTest(mu, sampleStats, 0.02) &lt;/code&gt;
 * &lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
 * The validity of the test depends on the assumptions of the one-sample
 * parametric t-test procedure, as discussed
 * &lt;a href="http://www.basic.nwu.edu/statguidefiles/sg_glos.html#one-sample"&gt;here&lt;/a&gt;
 * &lt;/p&gt;&lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The sample must include at least 2 observations.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>mu constant value to compare sample mean against</param>
    <param>sampleStats StatisticalSummary describing sample data values</param>
    <param>alpha significance level of the test</param>
    <return>p-value</return>
    <throws>NullArgumentException if &lt;code&gt;sampleStats&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NumberIsTooSmallException if the number of samples is &amp;lt; 2</throws>
    <throws>OutOfRangeException if &lt;code&gt;alpha&lt;/code&gt; is not in the range (0, 0.5]</throws>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
  </javadoc>
  <method type="boolean" name="tTest" />
  <javadoc>
    <text>Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or
 * &lt;i&gt;p-value&lt;/i&gt;, associated with a two-sample, two-tailed t-test
 * comparing the means of the input arrays.
 * &lt;p&gt;
 * The number returned is the smallest significance level
 * at which one can reject the null hypothesis that the two means are
 * equal in favor of the two-sided alternative that they are different.
 * For a one-sided test, divide the returned value by 2.&lt;/p&gt;
 * &lt;p&gt;
 * The test does not assume that the underlying popuation variances are
 * equal  and it uses approximated degrees of freedom computed from the
 * sample data to compute the p-value.  The t-statistic used is as defined in{@link #t(double[],double[])} and the Welch-Satterthwaite approximation
 * to the degrees of freedom is used,
 * as described
 * &lt;a href="http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm"&gt;
 * here.&lt;/a&gt;  To perform the test under the assumption of equal subpopulation
 * variances, use {@link #homoscedasticTTest(double[],double[])}.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
 * The validity of the p-value depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * &lt;a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"&gt;
 * here&lt;/a&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The observed array lengths must both be at least 2.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>sample1 array of sample data values</param>
    <param>sample2 array of sample data values</param>
    <return>p-value for t-test</return>
    <throws>NullArgumentException if the arrays are &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NumberIsTooSmallException if the length of the arrays is &amp;lt; 2</throws>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
  </javadoc>
  <method type="double" name="tTest">
    <comment>No try-catch or advertised exception because args have just been checked</comment>
  </method>
  <javadoc>
    <text>Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or
 * &lt;i&gt;p-value&lt;/i&gt;, associated with a two-sample, two-tailed t-test
 * comparing the means of the input arrays, under the assumption that
 * the two samples are drawn from subpopulations with equal variances.
 * To perform the test without the equal variances assumption, use{@link #tTest(double[],double[])}.&lt;/p&gt;
 * &lt;p&gt;
 * The number returned is the smallest significance level
 * at which one can reject the null hypothesis that the two means are
 * equal in favor of the two-sided alternative that they are different.
 * For a one-sided test, divide the returned value by 2.&lt;/p&gt;
 * &lt;p&gt;
 * A pooled variance estimate is used to compute the t-statistic.  See{@link #homoscedasticT(double[],double[])}. The sum of the sample sizes
 * minus 2 is used as the degrees of freedom.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
 * The validity of the p-value depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * &lt;a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"&gt;
 * here&lt;/a&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The observed array lengths must both be at least 2.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>sample1 array of sample data values</param>
    <param>sample2 array of sample data values</param>
    <return>p-value for t-test</return>
    <throws>NullArgumentException if the arrays are &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NumberIsTooSmallException if the length of the arrays is &amp;lt; 2</throws>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
  </javadoc>
  <method type="double" name="homoscedasticTTest">
    <comment>No try-catch or advertised exception because args have just been checked</comment>
  </method>
  <javadoc>
    <text>Performs a
 * &lt;a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm"&gt;
 * two-sided t-test&lt;/a&gt; evaluating the null hypothesis that &lt;code&gt;sample1&lt;/code&gt;
 * and &lt;code&gt;sample2&lt;/code&gt; are drawn from populations with the same mean,
 * with significance level &lt;code&gt;alpha&lt;/code&gt;.  This test does not assume
 * that the subpopulation variances are equal.  To perform the test assuming
 * equal variances, use{@link #homoscedasticTTest(double[],double[],double)}.
 * &lt;p&gt;
 * Returns &lt;code&gt;true&lt;/code&gt; iff the null hypothesis that the means are
 * equal can be rejected with confidence &lt;code&gt;1 - alpha&lt;/code&gt;.  To
 * perform a 1-sided test, use &lt;code&gt;alpha * 2&lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;
 * See {@link #t(double[],double[])} for the formula used to compute the
 * t-statistic.  Degrees of freedom are approximated using the
 * &lt;a href="http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm"&gt;
 * Welch-Satterthwaite approximation.&lt;/a&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Examples:&lt;/strong&gt;&lt;br&gt;&lt;ol&gt;
 * &lt;li&gt;To test the (2-sided) hypothesis &lt;code&gt;mean 1 = mean 2 &lt;/code&gt; at
 * the 95% level,  use
 * &lt;br&gt;&lt;code&gt;tTest(sample1, sample2, 0.05). &lt;/code&gt;
 * &lt;/li&gt;
 * &lt;li&gt;To test the (one-sided) hypothesis &lt;code&gt; mean 1 &lt; mean 2 &lt;/code&gt;,
 * at the 99% level, first verify that the measured  mean of &lt;code&gt;sample 1&lt;/code&gt;
 * is less than the mean of &lt;code&gt;sample 2&lt;/code&gt; and then use
 * &lt;br&gt;&lt;code&gt;tTest(sample1, sample2, 0.02) &lt;/code&gt;
 * &lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
 * The validity of the test depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * &lt;a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"&gt;
 * here&lt;/a&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The observed array lengths must both be at least 2.
 * &lt;/li&gt;
 * &lt;li&gt; &lt;code&gt; 0 &lt; alpha &lt; 0.5 &lt;/code&gt;
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>sample1 array of sample data values</param>
    <param>sample2 array of sample data values</param>
    <param>alpha significance level of the test</param>
    <return>true if the null hypothesis can be rejected with
 * confidence 1 - alpha</return>
    <throws>NullArgumentException if the arrays are &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NumberIsTooSmallException if the length of the arrays is &amp;lt; 2</throws>
    <throws>OutOfRangeException if &lt;code&gt;alpha&lt;/code&gt; is not in the range (0, 0.5]</throws>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
  </javadoc>
  <method type="boolean" name="tTest" />
  <javadoc>
    <text>Performs a
 * &lt;a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm"&gt;
 * two-sided t-test&lt;/a&gt; evaluating the null hypothesis that &lt;code&gt;sample1&lt;/code&gt;
 * and &lt;code&gt;sample2&lt;/code&gt; are drawn from populations with the same mean,
 * with significance level &lt;code&gt;alpha&lt;/code&gt;,  assuming that the
 * subpopulation variances are equal.  Use{@link #tTest(double[],double[],double)} to perform the test without
 * the assumption of equal variances.
 * &lt;p&gt;
 * Returns &lt;code&gt;true&lt;/code&gt; iff the null hypothesis that the means are
 * equal can be rejected with confidence &lt;code&gt;1 - alpha&lt;/code&gt;.  To
 * perform a 1-sided test, use &lt;code&gt;alpha * 2.&lt;/code&gt;  To perform the test
 * without the assumption of equal subpopulation variances, use{@link #tTest(double[],double[],double)}.&lt;/p&gt;
 * &lt;p&gt;
 * A pooled variance estimate is used to compute the t-statistic. See{@link #t(double[],double[])} for the formula. The sum of the sample
 * sizes minus 2 is used as the degrees of freedom.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Examples:&lt;/strong&gt;&lt;br&gt;&lt;ol&gt;
 * &lt;li&gt;To test the (2-sided) hypothesis &lt;code&gt;mean 1 = mean 2 &lt;/code&gt; at
 * the 95% level, use &lt;br&gt;&lt;code&gt;tTest(sample1, sample2, 0.05). &lt;/code&gt;
 * &lt;/li&gt;
 * &lt;li&gt;To test the (one-sided) hypothesis &lt;code&gt; mean 1 &lt; mean 2, &lt;/code&gt;
 * at the 99% level, first verify that the measured mean of
 * &lt;code&gt;sample 1&lt;/code&gt; is less than the mean of &lt;code&gt;sample 2&lt;/code&gt;
 * and then use
 * &lt;br&gt;&lt;code&gt;tTest(sample1, sample2, 0.02) &lt;/code&gt;
 * &lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
 * The validity of the test depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * &lt;a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"&gt;
 * here&lt;/a&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The observed array lengths must both be at least 2.
 * &lt;/li&gt;
 * &lt;li&gt; &lt;code&gt; 0 &lt; alpha &lt; 0.5 &lt;/code&gt;
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>sample1 array of sample data values</param>
    <param>sample2 array of sample data values</param>
    <param>alpha significance level of the test</param>
    <return>true if the null hypothesis can be rejected with
 * confidence 1 - alpha</return>
    <throws>NullArgumentException if the arrays are &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NumberIsTooSmallException if the length of the arrays is &amp;lt; 2</throws>
    <throws>OutOfRangeException if &lt;code&gt;alpha&lt;/code&gt; is not in the range (0, 0.5]</throws>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
  </javadoc>
  <method type="boolean" name="homoscedasticTTest" />
  <javadoc>
    <text>Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or
 * &lt;i&gt;p-value&lt;/i&gt;, associated with a two-sample, two-tailed t-test
 * comparing the means of the datasets described by two StatisticalSummary
 * instances.
 * &lt;p&gt;
 * The number returned is the smallest significance level
 * at which one can reject the null hypothesis that the two means are
 * equal in favor of the two-sided alternative that they are different.
 * For a one-sided test, divide the returned value by 2.&lt;/p&gt;
 * &lt;p&gt;
 * The test does not assume that the underlying population variances are
 * equal  and it uses approximated degrees of freedom computed from the
 * sample data to compute the p-value.   To perform the test assuming
 * equal variances, use{@link #homoscedasticTTest(StatisticalSummary,StatisticalSummary)}.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
 * The validity of the p-value depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * &lt;a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"&gt;
 * here&lt;/a&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The datasets described by the two Univariates must each contain
 * at least 2 observations.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>sampleStats1  StatisticalSummary describing data from the first sample</param>
    <param>sampleStats2  StatisticalSummary describing data from the second sample</param>
    <return>p-value for t-test</return>
    <throws>NullArgumentException if the sample statistics are &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NumberIsTooSmallException if the number of samples is &amp;lt; 2</throws>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
  </javadoc>
  <method type="double" name="tTest" />
  <javadoc>
    <text>Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or
 * &lt;i&gt;p-value&lt;/i&gt;, associated with a two-sample, two-tailed t-test
 * comparing the means of the datasets described by two StatisticalSummary
 * instances, under the hypothesis of equal subpopulation variances. To
 * perform a test without the equal variances assumption, use{@link #tTest(StatisticalSummary,StatisticalSummary)}.
 * &lt;p&gt;
 * The number returned is the smallest significance level
 * at which one can reject the null hypothesis that the two means are
 * equal in favor of the two-sided alternative that they are different.
 * For a one-sided test, divide the returned value by 2.&lt;/p&gt;
 * &lt;p&gt;
 * See {@link #homoscedasticT(double[],double[])} for the formula used to
 * compute the t-statistic. The sum of the  sample sizes minus 2 is used as
 * the degrees of freedom.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
 * The validity of the p-value depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * &lt;a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"&gt;here&lt;/a&gt;
 * &lt;/p&gt;&lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The datasets described by the two Univariates must each contain
 * at least 2 observations.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>sampleStats1  StatisticalSummary describing data from the first sample</param>
    <param>sampleStats2  StatisticalSummary describing data from the second sample</param>
    <return>p-value for t-test</return>
    <throws>NullArgumentException if the sample statistics are &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NumberIsTooSmallException if the number of samples is &amp;lt; 2</throws>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
  </javadoc>
  <method type="double" name="homoscedasticTTest" />
  <javadoc>
    <text>Performs a
 * &lt;a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm"&gt;
 * two-sided t-test&lt;/a&gt; evaluating the null hypothesis that
 * &lt;code&gt;sampleStats1&lt;/code&gt; and &lt;code&gt;sampleStats2&lt;/code&gt; describe
 * datasets drawn from populations with the same mean, with significance
 * level &lt;code&gt;alpha&lt;/code&gt;.   This test does not assume that the
 * subpopulation variances are equal.  To perform the test under the equal
 * variances assumption, use{@link #homoscedasticTTest(StatisticalSummary,StatisticalSummary)}.
 * &lt;p&gt;
 * Returns &lt;code&gt;true&lt;/code&gt; iff the null hypothesis that the means are
 * equal can be rejected with confidence &lt;code&gt;1 - alpha&lt;/code&gt;.  To
 * perform a 1-sided test, use &lt;code&gt;alpha * 2&lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;
 * See {@link #t(double[],double[])} for the formula used to compute the
 * t-statistic.  Degrees of freedom are approximated using the
 * &lt;a href="http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm"&gt;
 * Welch-Satterthwaite approximation.&lt;/a&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Examples:&lt;/strong&gt;&lt;br&gt;&lt;ol&gt;
 * &lt;li&gt;To test the (2-sided) hypothesis &lt;code&gt;mean 1 = mean 2 &lt;/code&gt; at
 * the 95%, use
 * &lt;br&gt;&lt;code&gt;tTest(sampleStats1, sampleStats2, 0.05) &lt;/code&gt;
 * &lt;/li&gt;
 * &lt;li&gt;To test the (one-sided) hypothesis &lt;code&gt; mean 1 &lt; mean 2 &lt;/code&gt;
 * at the 99% level,  first verify that the measured mean of
 * &lt;code&gt;sample 1&lt;/code&gt; is less than  the mean of &lt;code&gt;sample 2&lt;/code&gt;
 * and then use
 * &lt;br&gt;&lt;code&gt;tTest(sampleStats1, sampleStats2, 0.02) &lt;/code&gt;
 * &lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Usage Note:&lt;/strong&gt;&lt;br&gt;
 * The validity of the test depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * &lt;a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"&gt;
 * here&lt;/a&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The datasets described by the two Univariates must each contain
 * at least 2 observations.
 * &lt;/li&gt;
 * &lt;li&gt; &lt;code&gt; 0 &lt; alpha &lt; 0.5 &lt;/code&gt;
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>sampleStats1 StatisticalSummary describing sample data values</param>
    <param>sampleStats2 StatisticalSummary describing sample data values</param>
    <param>alpha significance level of the test</param>
    <return>true if the null hypothesis can be rejected with
 * confidence 1 - alpha</return>
    <throws>NullArgumentException if the sample statistics are &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>NumberIsTooSmallException if the number of samples is &amp;lt; 2</throws>
    <throws>OutOfRangeException if &lt;code&gt;alpha&lt;/code&gt; is not in the range (0, 0.5]</throws>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
  </javadoc>
  <method type="boolean" name="tTest" />
  <javadoc>
    <text>Computes approximate degrees of freedom for 2-sample t-test.</text>
    <param>v1 first sample variance</param>
    <param>v2 second sample variance</param>
    <param>n1 first sample n</param>
    <param>n2 second sample n</param>
    <return>approximate degrees of freedom</return>
  </javadoc>
  <method type="double" name="df" />
  <javadoc>
    <text>Computes t test statistic for 1-sample t-test.</text>
    <param>m sample mean</param>
    <param>mu constant to test against</param>
    <param>v sample variance</param>
    <param>n sample n</param>
    <return>t test statistic</return>
  </javadoc>
  <method type="double" name="t" />
  <javadoc>
    <text>Computes t test statistic for 2-sample t-test.
 * &lt;p&gt;
 * Does not assume that subpopulation variances are equal.&lt;/p&gt;</text>
    <param>m1 first sample mean</param>
    <param>m2 second sample mean</param>
    <param>v1 first sample variance</param>
    <param>v2 second sample variance</param>
    <param>n1 first sample n</param>
    <param>n2 second sample n</param>
    <return>t test statistic</return>
  </javadoc>
  <method type="double" name="t" />
  <javadoc>
    <text>Computes t test statistic for 2-sample t-test under the hypothesis
 * of equal subpopulation variances.</text>
    <param>m1 first sample mean</param>
    <param>m2 second sample mean</param>
    <param>v1 first sample variance</param>
    <param>v2 second sample variance</param>
    <param>n1 first sample n</param>
    <param>n2 second sample n</param>
    <return>t test statistic</return>
  </javadoc>
  <method type="double" name="homoscedasticT">
    <declaration type="double" name="pooledVariance" />
  </method>
  <javadoc>
    <text>Computes p-value for 2-sided, 1-sample t-test.</text>
    <param>m sample mean</param>
    <param>mu constant to test against</param>
    <param>v sample variance</param>
    <param>n sample n</param>
    <return>p-value</return>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
    <throws>MathIllegalArgumentException if n is not greater than 1</throws>
  </javadoc>
  <method type="double" name="tTest">
    <declaration type="double" name="t" />
    <declaration type="TDistribution" name="distribution" />
  </method>
  <javadoc>
    <text>Computes p-value for 2-sided, 2-sample t-test.
 * &lt;p&gt;
 * Does not assume subpopulation variances are equal. Degrees of freedom
 * are estimated from the data.&lt;/p&gt;</text>
    <param>m1 first sample mean</param>
    <param>m2 second sample mean</param>
    <param>v1 first sample variance</param>
    <param>v2 second sample variance</param>
    <param>n1 first sample n</param>
    <param>n2 second sample n</param>
    <return>p-value</return>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
    <throws>NotStrictlyPositiveException if the estimated degrees of freedom is not
 * strictly positive</throws>
  </javadoc>
  <method type="double" name="tTest">
    <declaration type="double" name="t" />
    <declaration type="double" name="degreesOfFreedom" />
    <declaration type="TDistribution" name="distribution" />
  </method>
  <javadoc>
    <text>Computes p-value for 2-sided, 2-sample t-test, under the assumption
 * of equal subpopulation variances.
 * &lt;p&gt;
 * The sum of the sample sizes minus 2 is used as degrees of freedom.&lt;/p&gt;</text>
    <param>m1 first sample mean</param>
    <param>m2 second sample mean</param>
    <param>v1 first sample variance</param>
    <param>v2 second sample variance</param>
    <param>n1 first sample n</param>
    <param>n2 second sample n</param>
    <return>p-value</return>
    <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
    <throws>NotStrictlyPositiveException if the estimated degrees of freedom is not
 * strictly positive</throws>
  </javadoc>
  <method type="double" name="homoscedasticTTest">
    <declaration type="double" name="t" />
    <declaration type="double" name="degreesOfFreedom" />
    <declaration type="TDistribution" name="distribution" />
  </method>
  <javadoc>
    <text>Check significance level.</text>
    <param>alpha significance level</param>
    <throws>OutOfRangeException if the significance level is out of bounds.</throws>
  </javadoc>
  <method type="void" name="checkSignificanceLevel">
    <scope />
  </method>
  <javadoc>
    <text>Check sample data.</text>
    <param>data Sample data.</param>
    <throws>NullArgumentException if {@code data} is {@code null}.</throws>
    <throws>NumberIsTooSmallException if there is not enough sample data.</throws>
  </javadoc>
  <method type="void" name="checkSampleData">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Check sample data.</text>
    <param>stat Statistical summary.</param>
    <throws>NullArgumentException if {@code data} is {@code null}.</throws>
    <throws>NumberIsTooSmallException if there is not enough sample data.</throws>
  </javadoc>
  <method type="void" name="checkSampleData">
    <scope />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>----------------------------------------------- Protected methods</comment>
</class>
