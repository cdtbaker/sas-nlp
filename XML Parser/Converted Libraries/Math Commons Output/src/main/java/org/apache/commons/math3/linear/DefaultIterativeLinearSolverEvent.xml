<?xml version="1.0" encoding="UTF-8"?>
<class name="DefaultIterativeLinearSolverEvent">
  <javadoc>
    <text>A default concrete implementation of the abstract class{@link IterativeLinearSolverEvent}.</text>
    <version>$Id: DefaultIterativeLinearSolverEvent.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc />
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>The right-hand side vector.</text>
  </javadoc>
  <declaration type="RealVector" name="b" />
  <javadoc>
    <text>The current estimate of the residual.</text>
  </javadoc>
  <declaration type="RealVector" name="r" />
  <javadoc>
    <text>The current estimate of the norm of the residual.</text>
  </javadoc>
  <declaration type="double" name="rnorm" />
  <javadoc>
    <text>The current estimate of the solution.</text>
  </javadoc>
  <declaration type="RealVector" name="x" />
  <javadoc>
    <text>Creates a new instance of this class. This implementation does
 * &lt;em&gt;not&lt;/em&gt; deep copy the specified vectors {@code x}, {@code b},{@code r}. Therefore the user must make sure that these vectors are
 * either unmodifiable views or deep copies of the same vectors actually
 * used by the {@code source}. Failure to do so may compromise subsequent
 * iterations of the {@code source}. If the residual vector {@code r} is{@code null}, then {@link #getResidual()} throws a{@link MathUnsupportedOperationException}, and{@link #providesResidual()} returns {@code false}.</text>
    <param>source the iterative solver which fired this event</param>
    <param>iterations the number of iterations performed at the time{@code this} event is created</param>
    <param>x the current estimate of the solution</param>
    <param>b the right-hand side vector</param>
    <param>r the current estimate of the residual (can be {@code null})</param>
    <param>rnorm the norm of the current estimate of the residual</param>
  </javadoc>
  <method type="constructor" name="DefaultIterativeLinearSolverEvent" />
  <javadoc>
    <text>Creates a new instance of this class. This implementation does
 * &lt;em&gt;not&lt;/em&gt; deep copy the specified vectors {@code x}, {@code b}.
 * Therefore the user must make sure that these vectors are either
 * unmodifiable views or deep copies of the same vectors actually used by
 * the {@code source}. Failure to do so may compromise subsequent iterations
 * of the {@code source}. Callling {@link #getResidual()} on instances
 * returned by this constructor throws a{@link MathUnsupportedOperationException}, while{@link #providesResidual()} returns {@code false}.</text>
    <param>source the iterative solver which fired this event</param>
    <param>iterations the number of iterations performed at the time{@code this} event is created</param>
    <param>x the current estimate of the solution</param>
    <param>b the right-hand side vector</param>
    <param>rnorm the norm of the current estimate of the residual</param>
  </javadoc>
  <method type="constructor" name="DefaultIterativeLinearSolverEvent" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getNormOfResidual" />
  <javadoc>
    <text>{@inheritDoc}This implementation throws an {@link MathUnsupportedOperationException}if no residual vector {@code r} was provided at construction time.</text>
  </javadoc>
  <method type="RealVector" name="getResidual">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="getRightHandSideVector" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="getSolution" />
  <javadoc>
    <text>{@inheritDoc}This implementation returns {@code true} if a non-{@code null} value was
 * specified for the residual vector {@code r} at construction time.</text>
    <return>{@code true} if {@code r != null}</return>
  </javadoc>
  <method type="boolean" name="providesResidual" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
