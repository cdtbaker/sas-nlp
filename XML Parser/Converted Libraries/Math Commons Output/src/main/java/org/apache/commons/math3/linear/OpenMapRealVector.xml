<?xml version="1.0" encoding="UTF-8"?>
<class name="OpenMapRealVector">
  <javadoc>
    <text>This class implements the {@link RealVector} interface with a{@link OpenIntToDoubleHashMap} backing store.</text>
    <version>$Id: OpenMapRealVector.java 1462503 2013-03-29 15:48:27Z luc $</version>
    <since>2.0</since>
    <deprecated>As of version 3.1, this class is deprecated, for reasons exposed
 * in this JIRA
 * &lt;a href="https://issues.apache.org/jira/browse/MATH-870"&gt;ticket&lt;/a&gt;. This
 * class will be removed in version 4.0.</deprecated>
  </javadoc>
  <javadoc>
    <text>Default Tolerance for having a value considered zero.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_ZERO_TOLERANCE" />
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Entries of the vector.</text>
  </javadoc>
  <declaration type="OpenIntToDoubleHashMap" name="entries" />
  <javadoc>
    <text>Dimension of the vector.</text>
  </javadoc>
  <declaration type="int" name="virtualSize" />
  <javadoc>
    <text>Tolerance for having a value considered zero.</text>
  </javadoc>
  <declaration type="double" name="epsilon" />
  <javadoc>
    <text>Build a 0-length vector.
 * Zero-length vectors may be used to initialized construction of vectors
 * by data gathering. We start with zero-length and use either the {@link #OpenMapRealVector(OpenMapRealVector,int)} constructor
 * or one of the {@code append} method ({@link #append(double)},{@link #append(RealVector)}) to gather data into this vector.</text>
  </javadoc>
  <method type="constructor" name="OpenMapRealVector" />
  <javadoc>
    <text>Construct a vector of zeroes.</text>
    <param>dimension Size of the vector.</param>
  </javadoc>
  <method type="constructor" name="OpenMapRealVector" />
  <javadoc>
    <text>Construct a vector of zeroes, specifying zero tolerance.</text>
    <param>dimension Size of the vector.</param>
    <param>epsilon Tolerance below which a value considered zero.</param>
  </javadoc>
  <method type="constructor" name="OpenMapRealVector" />
  <javadoc>
    <text>Build a resized vector, for use with append.</text>
    <param>v Original vector.</param>
    <param>resize Amount to add.</param>
  </javadoc>
  <method type="constructor" name="OpenMapRealVector" />
  <javadoc>
    <text>Build a vector with known the sparseness (for advanced use only).</text>
    <param>dimension Size of the vector.</param>
    <param>expectedSize The expected number of non-zero entries.</param>
  </javadoc>
  <method type="constructor" name="OpenMapRealVector" />
  <javadoc>
    <text>Build a vector with known the sparseness and zero tolerance
 * setting (for advanced use only).</text>
    <param>dimension Size of the vector.</param>
    <param>expectedSize Expected number of non-zero entries.</param>
    <param>epsilon Tolerance below which a value is considered zero.</param>
  </javadoc>
  <method type="constructor" name="OpenMapRealVector" />
  <javadoc>
    <text>Create from an array.
 * Only non-zero entries will be stored.</text>
    <param>values Set of values to create from.</param>
  </javadoc>
  <method type="constructor" name="OpenMapRealVector" />
  <javadoc>
    <text>Create from an array, specifying zero tolerance.
 * Only non-zero entries will be stored.</text>
    <param>values Set of values to create from.</param>
    <param>epsilon Tolerance below which a value is considered zero.</param>
  </javadoc>
  <method type="constructor" name="OpenMapRealVector">
    <scope>
      <declaration type="double" name="value" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Create from an array.
 * Only non-zero entries will be stored.</text>
    <param>values The set of values to create from</param>
  </javadoc>
  <method type="constructor" name="OpenMapRealVector" />
  <javadoc>
    <text>Create from an array.
 * Only non-zero entries will be stored.</text>
    <param>values Set of values to create from.</param>
    <param>epsilon Tolerance below which a value is considered zero.</param>
  </javadoc>
  <method type="constructor" name="OpenMapRealVector">
    <scope>
      <declaration type="double" name="value" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Copy constructor.</text>
    <param>v Instance to copy from.</param>
  </javadoc>
  <method type="constructor" name="OpenMapRealVector" />
  <javadoc>
    <text>Generic copy constructor.</text>
    <param>v Instance to copy from.</param>
  </javadoc>
  <method type="constructor" name="OpenMapRealVector">
    <scope>
      <declaration type="double" name="value" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Get the entries of this instance.</text>
    <return>the entries of this instance.</return>
  </javadoc>
  <method type="OpenIntToDoubleHashMap" name="getEntries" />
  <javadoc>
    <text>Determine if this value is within epsilon of zero.</text>
    <param>value Value to test</param>
    <return>{@code true} if this value is within epsilon to zero,{@code false} otherwise.</return>
    <since>2.1</since>
  </javadoc>
  <method type="boolean" name="isDefaultValue" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="add">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Optimized method to add two OpenMapRealVectors.
 * It copies the larger vector, then iterates over the smaller.</text>
    <param>v Vector to add.</param>
    <return>the sum of {@code this} and {@code v}.</return>
    <throws>DimensionMismatchException if the dimensions do not match.</throws>
  </javadoc>
  <method type="OpenMapRealVector" name="add">
    <declaration type="boolean" name="copyThis" />
    <declaration type="OpenMapRealVector" name="res" />
    <declaration type="Iterator" name="iter" />
    <declaration type="OpenIntToDoubleHashMap" name="randomAccess" />
    <scope>
      <declaration type="int" name="key" />
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Optimized method to append a OpenMapRealVector.</text>
    <param>v vector to append</param>
    <return>The result of appending {@code v} to self</return>
  </javadoc>
  <method type="OpenMapRealVector" name="append">
    <declaration type="OpenMapRealVector" name="res" />
    <declaration type="Iterator" name="iter" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="OpenMapRealVector" name="append">
    <scope />
    <scope>
      <declaration type="OpenMapRealVector" name="res" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="OpenMapRealVector" name="append">
    <declaration type="OpenMapRealVector" name="res" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>2.1</since>
  </javadoc>
  <method type="OpenMapRealVector" name="copy" />
  <javadoc>
    <text>Computes the dot product.
 * Note that the computation is now performed in the parent class: no
 * performance improvement is to be expected from this overloaded
 * method.
 * The previous implementation was buggy and cannot be easily fixed
 * (see MATH-795).</text>
    <param>v Vector.</param>
    <return>the dot product of this vector with {@code v}.</return>
    <throws>DimensionMismatchException if {@code v} is not the same size as{@code this} vector.</throws>
    <deprecated>as of 3.1 (to be removed in 4.0). The computation is
 * performed by the parent class. The method must be kept to maintain
 * backwards compatibility.</deprecated>
  </javadoc>
  <method type="double" name="dotProduct" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="OpenMapRealVector" name="ebeDivide">
    <declaration type="OpenMapRealVector" name="res" />
    <declaration type="int" name="n" />
    <scope />
    <comment>MATH-803: it is not sufficient to loop through non zero entries of
 this only. Indeed, if this[i] = 0d and v[i] = 0d, then
 this[i]  v[i] = NaN, and not 0d.</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="OpenMapRealVector" name="ebeMultiply">
    <declaration type="OpenMapRealVector" name="res" />
    <declaration type="Iterator" name="iter" />
    <scope />
    <scope>
      <declaration type="int" name="n" />
      <scope>
        <declaration type="double" name="y" />
        <scope />
        <scope>
          <declaration type="double" name="x" />
        </scope>
      </scope>
    </scope>
    <comment>MATH-803: the above loop assumes that 0d  x  = 0d for any double x,
 which allows to consider only the non-zero entries of this. However,
 this fails if this[i] == 0d and (v[i] = NaN or v[i] = Infinity).

 These special cases are handled below.</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="OpenMapRealVector" name="getSubVector">
    <scope />
    <declaration type="OpenMapRealVector" name="res" />
    <declaration type="int" name="end" />
    <declaration type="Iterator" name="iter" />
    <scope>
      <declaration type="int" name="key" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getDimension" />
  <javadoc>
    <text>Optimized method to compute distance.</text>
    <param>v Vector to compute distance to.</param>
    <return>the distance from {@code this} and {@code v}.</return>
    <throws>DimensionMismatchException if the dimensions do not match.</throws>
  </javadoc>
  <method type="double" name="getDistance">
    <declaration type="Iterator" name="iter" />
    <declaration type="double" name="res" />
    <scope>
      <declaration type="int" name="key" />
      <declaration type="double" name="delta" />
    </scope>
    <scope>
      <declaration type="int" name="key" />
      <scope>
        <declaration type="double" name="value" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getDistance">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getEntry" />
  <javadoc>
    <text>Distance between two vectors.
 * This method computes the distance consistent with
 * L&lt;sub&gt;1&lt;/sub&gt; norm, i.e. the sum of the absolute values of
 * elements differences.</text>
    <param>v Vector to which distance is requested.</param>
    <return>distance between this vector and {@code v}.</return>
    <throws>DimensionMismatchException if the dimensions do not match.</throws>
  </javadoc>
  <method type="double" name="getL1Distance">
    <declaration type="double" name="max" />
    <declaration type="Iterator" name="iter" />
    <scope>
      <declaration type="double" name="delta" />
    </scope>
    <scope>
      <declaration type="int" name="key" />
      <scope>
        <declaration type="double" name="delta" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getL1Distance">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Optimized method to compute LInfDistance.</text>
    <param>v Vector to compute distance from.</param>
    <return>the LInfDistance.</return>
    <throws>DimensionMismatchException if the dimensions do not match.</throws>
  </javadoc>
  <method type="double" name="getLInfDistance">
    <declaration type="double" name="max" />
    <declaration type="Iterator" name="iter" />
    <scope>
      <declaration type="double" name="delta" />
      <scope />
    </scope>
    <scope>
      <declaration type="int" name="key" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getLInfDistance">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isInfinite">
    <declaration type="boolean" name="infiniteFound" />
    <declaration type="Iterator" name="iter" />
    <scope>
      <declaration type="double" name="value" />
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isNaN">
    <declaration type="Iterator" name="iter" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="OpenMapRealVector" name="mapAdd" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="OpenMapRealVector" name="mapAddToSelf">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setEntry">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setSubVector">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="set">
    <scope />
  </method>
  <javadoc>
    <text>Optimized method to subtract OpenMapRealVectors.</text>
    <param>v Vector to subtract from {@code this}.</param>
    <return>the difference of {@code this} and {@code v}.</return>
    <throws>DimensionMismatchException if the dimensions do not match.</throws>
  </javadoc>
  <method type="OpenMapRealVector" name="subtract">
    <declaration type="OpenMapRealVector" name="res" />
    <declaration type="Iterator" name="iter" />
    <scope>
      <declaration type="int" name="key" />
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="subtract">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="OpenMapRealVector" name="unitVector">
    <declaration type="OpenMapRealVector" name="res" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="unitize">
    <declaration type="double" name="norm" />
    <scope />
    <declaration type="Iterator" name="iter" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[]" name="toArray">
    <declaration type="double[]" name="res" />
    <declaration type="Iterator" name="iter" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}Implementation Note: This works on exact values, and as a result
 * it is possible for {@code a.subtract(b)} to be the zero vector, while{@code a.hashCode() != b.hashCode()}.</text>
  </javadoc>
  <method type="int" name="hashCode">
    <declaration type="int" name="prime" />
    <declaration type="int" name="result" />
    <declaration type="long" name="temp" />
    <declaration type="Iterator" name="iter" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}Implementation Note: This performs an exact comparison, and as a result
 * it is possible for {@code a.subtract(b}} to be the zero vector, while{@code  a.equals(b) == false}.</text>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope />
    <declaration type="OpenMapRealVector" name="other" />
    <scope />
    <scope />
    <declaration type="Iterator" name="iter" />
    <scope>
      <declaration type="double" name="test" />
      <scope />
    </scope>
    <scope>
      <declaration type="double" name="test" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <return>the percentage of none zero elements as a decimal percent.</return>
    <since>2.2</since>
  </javadoc>
  <method type="double" name="getSparsity" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="java.util.Iterator&lt;Entry&gt;" name="sparseIterator" />
  <javadoc>
    <text>Implementation of {@code Entry} optimized for OpenMap.
 * This implementation does not allow arbitrary calls to {@code setIndex}since the order in which entries are returned is undefined.</text>
  </javadoc>
  <javadoc>
    <text>Iterator pointing to the entry.</text>
  </javadoc>
  <declaration type="Iterator" name="iter" />
  <javadoc>
    <text>Build an entry from an iterator point to an element.</text>
    <param>iter Iterator pointing to the entry.</param>
  </javadoc>
  <method type="constructor" name="OpenMapEntry" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getValue" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setValue" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getIndex" />
  <javadoc>
    <text>Iterator class to do iteration over just the non-zero elements.
 * This implementation is fail-fast, so cannot be used to modify
 * any zero element.</text>
  </javadoc>
  <javadoc>
    <text>Underlying iterator.</text>
  </javadoc>
  <declaration type="Iterator" name="iter" />
  <javadoc>
    <text>Current entry.</text>
  </javadoc>
  <declaration type="Entry" name="current" />
  <javadoc>
    <text>Simple constructor.</text>
  </javadoc>
  <method type="constructor" name="OpenMapSparseIterator" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="hasNext" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Entry" name="next" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="remove" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
