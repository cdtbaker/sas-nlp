<?xml version="1.0" encoding="UTF-8"?>
<class name="Transform">
  <javadoc>
    <text>This interface represents an inversible affine transform in a space.
 * &lt;p&gt;Inversible affine transform include for example scalings,
 * translations, rotations.&lt;/p&gt;
 * &lt;p&gt;Transforms are dimension-specific. The consistency rules between
 * the three {@code apply} methods are the following ones for a
 * transformed defined for dimension D:&lt;/p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;
 * the transform can be applied to a point in the
 * D-dimension space using its {@link #apply(Vector)}method
 * &lt;/li&gt;
 * &lt;li&gt;
 * the transform can be applied to a (D-1)-dimension
 * hyperplane in the D-dimension space using its{@link #apply(Hyperplane)} method
 * &lt;/li&gt;
 * &lt;li&gt;
 * the transform can be applied to a (D-2)-dimension
 * sub-hyperplane in a (D-1)-dimension hyperplane using
 * its {@link #apply(SubHyperplane,Hyperplane,Hyperplane)}method
 * &lt;/li&gt;
 * &lt;/ul&gt;</text>
    <param>&lt;S&gt;
 *  Type of the embedding space.</param>
    <param>&lt;T&gt;
 *  Type of the embedded sub-space.</param>
    <version>$Id: Transform.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>3.0</since>
  </javadoc>
  <method name="apply" type="Vector&lt;S&gt;" />
  <javadoc>
    <text>Transform a point of a space.</text>
    <param>point point to transform</param>
    <return>a new object representing the transformed point</return>
  </javadoc>
  <method name="apply" type="Hyperplane&lt;S&gt;" />
  <javadoc>
    <text>Transform an hyperplane of a space.</text>
    <param>hyperplane hyperplane to transform</param>
    <return>a new object representing the transformed hyperplane</return>
  </javadoc>
  <method name="apply" type="SubHyperplane&lt;T&gt;" />
  <javadoc>
    <text>Transform a sub-hyperplane embedded in an hyperplane.</text>
    <param>sub sub-hyperplane to transform</param>
    <param>original hyperplane in which the sub-hyperplane is
 * defined (this is the original hyperplane, the transform has
 * &lt;em&gt;not&lt;/em&gt; been applied to it)</param>
    <param>transformed hyperplane in which the sub-hyperplane is
 * defined (this is the transformed hyperplane, the transform
 * &lt;em&gt;has&lt;/em&gt; been applied to it)</param>
    <return>a new object representing the transformed sub-hyperplane</return>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
