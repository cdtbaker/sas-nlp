<?xml version="1.0" encoding="UTF-8"?>
<class name="BigFractionFormat">
  <javadoc>
    <text>Formats a BigFraction number in proper format or improper format.
 * &lt;p&gt;
 * The number format for each of the whole number, numerator and,
 * denominator can be configured.
 * &lt;/p&gt;</text>
    <since>2.0</since>
    <version>$Id: BigFractionFormat.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Create an improper formatting instance with the default number format
 * for the numerator and denominator.</text>
  </javadoc>
  <method type="constructor" name="BigFractionFormat" />
  <javadoc>
    <text>Create an improper formatting instance with a custom number format for
 * both the numerator and denominator.</text>
    <param>format the custom format for both the numerator and denominator.</param>
  </javadoc>
  <method type="constructor" name="BigFractionFormat" />
  <javadoc>
    <text>Create an improper formatting instance with a custom number format for
 * the numerator and a custom number format for the denominator.</text>
    <param>numeratorFormat the custom format for the numerator.</param>
    <param>denominatorFormat the custom format for the denominator.</param>
  </javadoc>
  <method type="constructor" name="BigFractionFormat" />
  <javadoc>
    <text>Get the set of locales for which complex formats are available.  This
 * is the same set as the {@link NumberFormat} set.</text>
    <return>available complex format locales.</return>
  </javadoc>
  <method type="Locale[]" name="getAvailableLocales" />
  <javadoc>
    <text>This static method calls formatBigFraction() on a default instance of
 * BigFractionFormat.</text>
    <param>f BigFraction object to format</param>
    <return>A formatted BigFraction in proper form.</return>
  </javadoc>
  <method type="String" name="formatBigFraction" />
  <javadoc>
    <text>Returns the default complex format for the current locale.</text>
    <return>the default complex format.</return>
  </javadoc>
  <method type="BigFractionFormat" name="getImproperInstance" />
  <javadoc>
    <text>Returns the default complex format for the given locale.</text>
    <param>locale the specific locale used by the format.</param>
    <return>the complex format specific to the given locale.</return>
  </javadoc>
  <method type="BigFractionFormat" name="getImproperInstance" />
  <javadoc>
    <text>Returns the default complex format for the current locale.</text>
    <return>the default complex format.</return>
  </javadoc>
  <method type="BigFractionFormat" name="getProperInstance" />
  <javadoc>
    <text>Returns the default complex format for the given locale.</text>
    <param>locale the specific locale used by the format.</param>
    <return>the complex format specific to the given locale.</return>
  </javadoc>
  <method type="BigFractionFormat" name="getProperInstance" />
  <javadoc>
    <text>Formats a {@link BigFraction} object to produce a string.  The BigFraction is
 * output in improper format.</text>
    <param>BigFraction the object to format.</param>
    <param>toAppendTo where the text is to be appended</param>
    <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
    <return>the value passed in as toAppendTo.</return>
  </javadoc>
  <method type="StringBuffer" name="format" />
  <javadoc>
    <text>Formats an object and appends the result to a StringBuffer.
 * &lt;code&gt;obj&lt;/code&gt; must be either a  {@link BigFraction} object or a{@link BigInteger} object or a {@link Number} object. Any other type of
 * object will result in an {@link IllegalArgumentException} being thrown.</text>
    <param>obj the object to format.</param>
    <param>toAppendTo where the text is to be appended</param>
    <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
    <return>the value passed in as toAppendTo.</return>
    <see>java.text.Format#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)</see>
    <throws>MathIllegalArgumentException if &lt;code&gt;obj&lt;/code&gt; is not a valid type.</throws>
  </javadoc>
  <method type="StringBuffer" name="format">
    <declaration type="StringBuffer" name="ret" />
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Parses a string to produce a {@link BigFraction} object.</text>
    <param>source the string to parse</param>
    <return>the parsed {@link BigFraction} object.</return>
    <exception>MathParseException if the beginning of the specified string
 * cannot be parsed.</exception>
  </javadoc>
  <method type="BigFraction" name="parse">
    <declaration type="ParsePosition" name="parsePosition" />
    <declaration type="BigFraction" name="result" />
    <scope />
  </method>
  <javadoc>
    <text>Parses a string to produce a {@link BigFraction} object.
 * This method expects the string to be formatted as an improper BigFraction.</text>
    <param>source the string to parse</param>
    <param>pos input/output parsing parameter.</param>
    <return>the parsed {@link BigFraction} object.</return>
  </javadoc>
  <method type="BigFraction" name="parse">
    <declaration type="int" name="initialIndex" />
    <declaration type="BigInteger" name="num" />
    <scope />
    <declaration type="int" name="startIndex" />
    <declaration type="char" name="c" />
    <declaration type="BigInteger" name="den" />
    <scope />
    <comment>parse whitespace</comment>
    <comment>parse numerator</comment>
    <comment>invalid integer number</comment>
    <comment>set index back to initial, error index should already be set</comment>
    <comment>character examined.</comment>
    <comment>parse '/'</comment>
    <comment>no '/'</comment>
    <comment>return num as a BigFraction</comment>
    <comment>found '/', continue parsing denominator</comment>
    <comment>invalid '/'</comment>
    <comment>set index back to initial, error index should be the last</comment>
    <comment>character examined.</comment>
    <comment>parse whitespace</comment>
    <comment>parse denominator</comment>
    <comment>invalid integer number</comment>
    <comment>set index back to initial, error index should already be set</comment>
    <comment>character examined.</comment>
  </method>
  <javadoc>
    <text>Parses a string to produce a &lt;code&gt;BigInteger&lt;/code&gt;.</text>
    <param>source the string to parse</param>
    <param>pos input/output parsing parameter.</param>
    <return>a parsed &lt;code&gt;BigInteger&lt;/code&gt; or null if string does not
 * contain a BigInteger at the specified position</return>
  </javadoc>
  <method type="BigInteger" name="parseNextBigInteger">
    <declaration type="int" name="start" />
    <declaration type="int" name="end" />
    <scope />
    <scope>
      <declaration type="BigInteger" name="n" />
    </scope>
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
