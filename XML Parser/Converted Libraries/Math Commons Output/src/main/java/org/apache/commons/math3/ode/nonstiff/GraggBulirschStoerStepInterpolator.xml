<?xml version="1.0" encoding="UTF-8"?>
<class name="GraggBulirschStoerStepInterpolator">
  <javadoc>
    <text>This class implements an interpolator for the Gragg-Bulirsch-Stoer
 * integrator.
 * &lt;p&gt;This interpolator compute dense output inside the last step
 * produced by a Gragg-Bulirsch-Stoer integrator.&lt;/p&gt;
 * &lt;p&gt;
 * This implementation is basically a reimplementation in Java of the
 * &lt;a
 * href="http://www.unige.ch/math/folks/hairer/prog/nonstiff/odex.f"&gt;odex&lt;/a&gt;
 * fortran code by E. Hairer and G. Wanner. The redistribution policy
 * for this code is available &lt;a
 * href="http://www.unige.ch/~hairer/prog/licence.txt"&gt;here&lt;/a&gt;, for
 * convenience, it is reproduced below.&lt;/p&gt;
 * &lt;/p&gt;
 * &lt;table border="0" width="80%" cellpadding="10" align="center" bgcolor="#E0E0E0"&gt;
 * &lt;tr&gt;&lt;td&gt;Copyright (c) 2004, Ernst Hairer&lt;/td&gt;&lt;/tr&gt;
 * &lt;tr&gt;&lt;td&gt;Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 * &lt;ul&gt;
 * &lt;li&gt;Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.&lt;/li&gt;
 * &lt;li&gt;Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.&lt;/li&gt;
 * &lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;
 * &lt;tr&gt;&lt;td&gt;&lt;strong&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;
 * &lt;/table&gt;</text>
    <see>GraggBulirschStoerIntegrator</see>
    <version>$Id: GraggBulirschStoerStepInterpolator.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>1.2</since>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Slope at the beginning of the step.</text>
  </javadoc>
  <declaration type="double[]" name="y0Dot" />
  <javadoc>
    <text>State at the end of the step.</text>
  </javadoc>
  <declaration type="double[]" name="y1" />
  <javadoc>
    <text>Slope at the end of the step.</text>
  </javadoc>
  <declaration type="double[]" name="y1Dot" />
  <javadoc>
    <text>Derivatives at the middle of the step.
 * element 0 is state at midpoint, element 1 is first derivative ...</text>
  </javadoc>
  <declaration type="double[][]" name="yMidDots" />
  <javadoc>
    <text>Interpolation polynomials.</text>
  </javadoc>
  <declaration type="double[][]" name="polynomials" />
  <javadoc>
    <text>Error coefficients for the interpolation.</text>
  </javadoc>
  <declaration type="double[]" name="errfac" />
  <javadoc>
    <text>Degree of the interpolation polynomials.</text>
  </javadoc>
  <declaration type="int" name="currentDegree" />
  <javadoc>
    <text>Simple constructor.
 * This constructor should not be used directly, it is only intended
 * for the serialization process.</text>
  </javadoc>
  <method type="constructor" name="GraggBulirschStoerStepInterpolator" />
  <javadoc>
    <text>Simple constructor.</text>
    <param>y reference to the integrator array holding the current state</param>
    <param>y0Dot reference to the integrator array holding the slope
 * at the beginning of the step</param>
    <param>y1 reference to the integrator array holding the state at
 * the end of the step</param>
    <param>y1Dot reference to the integrator array holding the slope
 * at the end of the step</param>
    <param>yMidDots reference to the integrator array holding the
 * derivatives at the middle point of the step</param>
    <param>forward integration direction indicator</param>
    <param>primaryMapper equations mapper for the primary equations set</param>
    <param>secondaryMappers equations mappers for the secondary equations sets</param>
  </javadoc>
  <method type="constructor" name="GraggBulirschStoerStepInterpolator" />
  <javadoc>
    <text>Copy constructor.</text>
    <param>interpolator interpolator to copy from. The copy is a deep
 * copy: its arrays are separated from the original arrays of the
 * instance</param>
  </javadoc>
  <method type="constructor" name="GraggBulirschStoerStepInterpolator">
    <declaration type="int" name="dimension" />
    <scope />
    <scope>
      <scope />
    </scope>
    <comment>the interpolator has been finalized,</comment>
    <comment>the following arrays are not needed anymore</comment>
    <comment>copy the interpolation polynomials (up to the current degree only)</comment>
  </method>
  <javadoc>
    <text>Reallocate the internal tables.
 * Reallocate the internal tables in order to be able to handle
 * interpolation polynomials up to the given degree</text>
    <param>maxDegree maximal degree to handle</param>
  </javadoc>
  <method type="void" name="resetTables">
    <scope />
    <scope>
      <declaration type="double[][][]" name="newPols" />
      <scope>
        <scope />
      </scope>
      <scope>
        <scope />
      </scope>
      <scope />
      <scope>
        <scope>
          <declaration type="int" name="ip5" />
          <declaration type="double" name="e" />
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>initialize the error factors array for interpolation</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="StepInterpolator" name="doCopy" />
  <javadoc>
    <text>Compute the interpolation coefficients for dense output.</text>
    <param>mu degree of the interpolation polynomial</param>
    <param>h current step</param>
  </javadoc>
  <method type="void" name="computeCoefficients">
    <scope />
    <scope>
      <declaration type="double" name="yp0" />
      <declaration type="double" name="yp1" />
      <declaration type="double" name="ydiff" />
      <declaration type="double" name="aspl" />
      <declaration type="double" name="bspl" />
      <scope />
      <declaration type="double" name="ph0" />
      <scope>
        <declaration type="double" name="ph1" />
        <scope>
          <declaration type="double" name="ph2" />
          <scope>
            <declaration type="double" name="ph3" />
            <scope>
              <declaration type="double" name="fac1" />
              <declaration type="double" name="fac2" />
            </scope>
          </scope>
        </scope>
      </scope>
    </scope>
    <comment>compute the remaining coefficients</comment>
  </method>
  <javadoc>
    <text>Estimate interpolation error.</text>
    <param>scale scaling array</param>
    <return>estimate of the interpolation error</return>
  </javadoc>
  <method type="double" name="estimateError">
    <declaration type="double" name="error" />
    <scope>
      <scope>
        <declaration type="double" name="e" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="computeInterpolatedStateAndDerivatives">
    <declaration type="int" name="dimension" />
    <declaration type="double" name="oneMinusTheta" />
    <declaration type="double" name="theta05" />
    <declaration type="double" name="tOmT" />
    <declaration type="double" name="t4" />
    <declaration type="double" name="t4Dot" />
    <declaration type="double" name="dot1" />
    <declaration type="double" name="dot2" />
    <declaration type="double" name="dot3" />
    <scope>
      <declaration type="double" name="p0" />
      <declaration type="double" name="p1" />
      <declaration type="double" name="p2" />
      <declaration type="double" name="p3" />
      <scope>
        <declaration type="double" name="cDot" />
        <declaration type="double" name="c" />
        <scope>
          <declaration type="double" name="d" />
        </scope>
      </scope>
    </scope>
    <scope />
    <comment>in this degenerated case, the previous computation leads to NaN for derivatives</comment>
    <comment>we fix this by using the derivatives at midpoint</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="writeExternal">
    <declaration type="int" name="dimension" />
    <scope>
      <scope />
    </scope>
    <comment>save the state of the base class</comment>
    <comment>save the local attributes (but not the temporary vectors)</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="readExternal">
    <declaration type="double" name="t" />
    <declaration type="int" name="dimension" />
    <declaration type="int" name="degree" />
    <scope>
      <scope />
    </scope>
    <comment>read the base class</comment>
    <comment>read the local attributes</comment>
    <comment>we can now set the interpolated time and state</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
