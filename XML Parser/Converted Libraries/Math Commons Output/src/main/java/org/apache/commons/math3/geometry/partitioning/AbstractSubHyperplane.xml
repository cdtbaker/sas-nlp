<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractSubHyperplane">
  <javadoc>
    <text>This class implements the dimension-independent parts of {@link SubHyperplane}.
 * &lt;p&gt;sub-hyperplanes are obtained when parts of an {@link Hyperplane hyperplane} are chopped off by other hyperplanes that
 * intersect it. The remaining part is a convex region. Such objects
 * appear in {@link BSPTree BSP trees} as the intersection of a cut
 * hyperplane with the convex region which it splits, the chopping
 * hyperplanes are the cut hyperplanes closer to the tree root.&lt;/p&gt;</text>
    <param>&lt;S&gt;
 *  Type of the embedding space.</param>
    <param>&lt;T&gt;
 *  Type of the embedded sub-space.</param>
    <version>$Id: AbstractSubHyperplane.java 1421448 2012-12-13 19:45:57Z tn $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Underlying hyperplane.</text>
  </javadoc>
  <declaration type="Hyperplane&lt;S&gt;" name="hyperplane" />
  <javadoc>
    <text>Remaining region of the hyperplane.</text>
  </javadoc>
  <declaration type="Region&lt;T&gt;" name="remainingRegion" />
  <javadoc>
    <text>Build a sub-hyperplane from an hyperplane and a region.</text>
    <param>hyperplane underlying hyperplane</param>
    <param>remainingRegion remaining region of the hyperplane</param>
  </javadoc>
  <method type="constructor" name="AbstractSubHyperplane" />
  <method name="buildNew" type="AbstractSubHyperplane&lt;S,T&gt;" />
  <javadoc>
    <text>Build a sub-hyperplane from an hyperplane and a region.</text>
    <param>hyper underlying hyperplane</param>
    <param>remaining remaining region of the hyperplane</param>
    <return>a new sub-hyperplane</return>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="AbstractSubHyperplane&lt;S,T&gt;" name="copySelf" />
  <javadoc>
    <text>Get the underlying hyperplane.</text>
    <return>underlying hyperplane</return>
  </javadoc>
  <method type="Hyperplane&lt;S&gt;" name="getHyperplane" />
  <javadoc>
    <text>Get the remaining region of the hyperplane.
 * &lt;p&gt;The returned region is expressed in the canonical hyperplane
 * frame and has the hyperplane dimension. For example a chopped
 * hyperplane in the 3D euclidean is a 2D plane and the
 * corresponding region is a convex 2D polygon.&lt;/p&gt;</text>
    <return>remaining region of the hyperplane</return>
  </javadoc>
  <method type="Region&lt;T&gt;" name="getRemainingRegion" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getSize" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="AbstractSubHyperplane&lt;S,T&gt;" name="reunite">
    <declaration type="AbstractSubHyperplane&lt;S,T&gt;" name="o" />
  </method>
  <javadoc>
    <text>Apply a transform to the instance.
 * &lt;p&gt;The instance must be a (D-1)-dimension sub-hyperplane with
 * respect to the transform &lt;em&gt;not&lt;/em&gt; a (D-2)-dimension
 * sub-hyperplane the transform knows how to transform by
 * itself. The transform will consist in transforming first the
 * hyperplane and then the all region using the various methods
 * provided by the transform.&lt;/p&gt;</text>
    <param>transform D-dimension transform to apply</param>
    <return>the transformed instance</return>
  </javadoc>
  <method type="AbstractSubHyperplane&lt;S,T&gt;" name="applyTransform">
    <declaration type="Hyperplane&lt;S&gt;" name="tHyperplane" />
    <declaration type="BSPTree&lt;T&gt;" name="tTree" />
  </method>
  <javadoc>
    <text>Recursively transform a BSP-tree from a sub-hyperplane.</text>
    <param>node current BSP tree node</param>
    <param>transformed image of the instance hyperplane by the transform</param>
    <param>transform transform to apply</param>
    <return>a new tree</return>
  </javadoc>
  <method type="BSPTree&lt;T&gt;" name="recurseTransform">
    <scope />
    <declaration type="BoundaryAttribute&lt;T&gt;" name="attribute" />
    <scope>
      <declaration type="SubHyperplane&lt;T&gt;" name="tPO" />
      <declaration type="SubHyperplane&lt;T&gt;" name="tPI" />
    </scope>
  </method>
  <method name="side" type="Side" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method name="split" type="SplitSubHyperplane&lt;S&gt;" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isEmpty" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
