<?xml version="1.0" encoding="UTF-8"?>
<class name="Sinc">
  <javadoc>
    <text>&lt;a href="http://en.wikipedia.org/wiki/Sinc_function"&gt;Sinc&lt;/a&gt; function,
 * defined by
 * &lt;pre&gt;&lt;code&gt;
 * sinc(x) = 1            if x = 0,
 * sin(x) / x   otherwise.
 * &lt;/code&gt;&lt;/pre&gt;</text>
    <since>3.0</since>
    <version>$Id: Sinc.java 1455194 2013-03-11 15:45:54Z luc $</version>
  </javadoc>
  <javadoc>
    <text>Value below which the computations are done using Taylor series.
 * &lt;p&gt;
 * The Taylor series for sinc even order derivatives are:
 * &lt;pre&gt;
 * d^(2n)sinc/dx^(2n)     = Sum_(k&gt;=0) (-1)^(n+k) / ((2k)!(2n+2k+1)) x^(2k)
 * = (-1)^n     [ 1/(2n+1) - x^2/(4n+6) + x^4/(48n+120) - x^6/(1440n+5040) + O(x^8) ]
 * &lt;/pre&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * The Taylor series for sinc odd order derivatives are:
 * &lt;pre&gt;
 * d^(2n+1)sinc/dx^(2n+1) = Sum_(k&gt;=0) (-1)^(n+k+1) / ((2k+1)!(2n+2k+3)) x^(2k+1)
 * = (-1)^(n+1) [ x/(2n+3) - x^3/(12n+30) + x^5/(240n+840) - x^7/(10080n+45360) + O(x^9) ]
 * &lt;/pre&gt;
 * &lt;/p&gt;
 * &lt;p&gt;
 * So the ratio of the fourth term with respect to the first term
 * is always smaller than x^6/720, for all derivative orders.
 * This implies that neglecting this term and using only the first three terms induces
 * a relative error bounded by x^6/720. The SHORTCUT value is chosen such that this
 * relative error is below double precision accuracy when |x| &lt;= SHORTCUT.
 * &lt;/p&gt;</text>
  </javadoc>
  <declaration type="double" name="SHORTCUT" />
  <javadoc>
    <text>For normalized sinc function.</text>
  </javadoc>
  <declaration type="boolean" name="normalized" />
  <javadoc>
    <text>The sinc function, {@code sin(x) / x}.</text>
  </javadoc>
  <method type="constructor" name="Sinc" />
  <javadoc>
    <text>Instantiates the sinc function.</text>
    <param>normalized If {@code true}, the function is
 * &lt;code&gt; sin(&amp;pi;x) / &amp;pi;x&lt;/code&gt;, otherwise {@code sin(x) / x}.</param>
  </javadoc>
  <method type="constructor" name="Sinc" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="value">
    <declaration type="double" name="scaledX" />
    <scope>
      <declaration type="double" name="scaledX2" />
    </scope>
    <scope />
    <comment>use Taylor series</comment>
    <comment>use definition expression</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <deprecated>as of 3.1, replaced by {@link #value(DerivativeStructure)}</deprecated>
  </javadoc>
  <method type="UnivariateFunction" name="derivative" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.1</since>
  </javadoc>
  <method type="DerivativeStructure" name="value">
    <declaration type="double" name="scaledX" />
    <declaration type="double" name="scaledX2" />
    <declaration type="double[]" name="f" />
    <scope>
      <scope>
        <declaration type="int" name="k" />
        <scope />
        <scope />
      </scope>
    </scope>
    <scope>
      <declaration type="double" name="inv" />
      <declaration type="double" name="cos" />
      <declaration type="double" name="sin" />
      <declaration type="double[]" name="sc" />
      <declaration type="double" name="coeff" />
      <scope>
        <declaration type="double" name="s" />
        <declaration type="double" name="c" />
        <declaration type="int" name="kStart" />
        <scope />
        <scope />
        <scope />
      </scope>
    </scope>
    <scope>
      <declaration type="double" name="scale" />
      <scope />
    </scope>
    <comment>even derivation order</comment>
    <comment>odd derivation order</comment>
    <comment>the nth order derivative of sinc has the form:</comment>
    <comment>dn(sinc(x)/dxn = [S_n(x) sin(x) + C_n(x) cos(x)] / x^(n+1)</comment>
    <comment>where S_n(x) is an even polynomial with degree n-1 or n (depending on parity)</comment>
    <comment>and C_n(x) is an odd polynomial with degree n-1 or n (depending on parity)</comment>
    <comment>S_0(x) = 1, S_1(x) = -1, S_2(x) = -x^2 + 2, S_3(x) = 3x^2 - 6...</comment>
    <comment>C_0(x) = 0, C_1(x) = x, C_2(x) = -2x, C_3(x) = -x^3 + 6x...</comment>
    <comment>the general recurrence relations for S_n and C_n are:</comment>
    <comment>S_n(x) = x S_(n-1)'(x) - n S_(n-1)(x) - x C_(n-1)(x)</comment>
    <comment>C_n(x) = x C_(n-1)'(x) - n C_(n-1)(x) + x S_(n-1)(x)</comment>
    <comment>as per polynomials parity, we can store both S_n and C_n in the same array</comment>
    <comment>update and evaluate polynomials S_n(x) and C_n(x)</comment>
    <comment>even derivation order, S_n is degree n and C_n is degree n-1</comment>
    <comment>odd derivation order, S_n is degree n-1 and C_n is degree n</comment>
    <comment>in this loop, k is always even</comment>
    <comment>sine part</comment>
    <comment>cosine part</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
