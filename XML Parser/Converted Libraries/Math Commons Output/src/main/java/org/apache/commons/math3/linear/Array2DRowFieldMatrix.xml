<?xml version="1.0" encoding="UTF-8"?>
<class name="Array2DRowFieldMatrix">
  <javadoc>
    <text>Implementation of FieldMatrix&lt;T&gt; using a {@link FieldElement}[][] array to store entries.
 * &lt;p&gt;
 * As specified in the {@link FieldMatrix} interface, matrix element indexing
 * is 0-based -- e.g., &lt;code&gt;getEntry(0, 0)&lt;/code&gt;
 * returns the element in the first row, first column of the matrix.&lt;/li&gt;&lt;/ul&gt;
 * &lt;/p&gt;</text>
    <param>&lt;T&gt;
 *  the type of the field elements</param>
    <version>$Id: Array2DRowFieldMatrix.java 1449528 2013-02-24 19:06:20Z luc $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Entries of the matrix</text>
  </javadoc>
  <declaration type="T[][]" name="data" />
  <javadoc>
    <text>Creates a matrix with no data</text>
    <param>field field to which the elements belong</param>
  </javadoc>
  <method type="constructor" name="Array2DRowFieldMatrix" />
  <javadoc>
    <text>Create a new {@code FieldMatrix&lt;T&gt;} with the supplied row and column dimensions.</text>
    <param>field Field to which the elements belong.</param>
    <param>rowDimension Number of rows in the new matrix.</param>
    <param>columnDimension Number of columns in the new matrix.</param>
    <throws>NotStrictlyPositiveException if row or column dimension is not positive.</throws>
  </javadoc>
  <method type="constructor" name="Array2DRowFieldMatrix" />
  <javadoc>
    <text>Create a new {@code FieldMatrix&lt;T&gt;} using the input array as the underlying
 * data array.
 * &lt;p&gt;The input array is copied, not referenced. This constructor has
 * the same effect as calling {@link #Array2DRowFieldMatrix(FieldElement[][],boolean)}with the second argument set to {@code true}.&lt;/p&gt;</text>
    <param>d Data for the new matrix.</param>
    <throws>DimensionMismatchException if {@code d} is not rectangular.</throws>
    <throws>NullArgumentException if {@code d} is {@code null}.</throws>
    <throws>NoDataException if there are not at least one row and one column.</throws>
    <see>#Array2DRowFieldMatrix(FieldElement[][],boolean)</see>
  </javadoc>
  <method type="constructor" name="Array2DRowFieldMatrix" />
  <javadoc>
    <text>Create a new {@code FieldMatrix&lt;T&gt;} using the input array as the underlying
 * data array.
 * &lt;p&gt;The input array is copied, not referenced. This constructor has
 * the same effect as calling {@link #Array2DRowFieldMatrix(FieldElement[][],boolean)}with the second argument set to {@code true}.&lt;/p&gt;</text>
    <param>field Field to which the elements belong.</param>
    <param>d Data for the new matrix.</param>
    <throws>DimensionMismatchException if {@code d} is not rectangular.</throws>
    <throws>NullArgumentException if {@code d} is {@code null}.</throws>
    <throws>NoDataException if there are not at least one row and one column.</throws>
    <see>#Array2DRowFieldMatrix(FieldElement[][],boolean)</see>
  </javadoc>
  <method type="constructor" name="Array2DRowFieldMatrix" />
  <javadoc>
    <text>Create a new {@code FieldMatrix&lt;T&gt;} using the input array as the underlying
 * data array.
 * &lt;p&gt;If an array is built specially in order to be embedded in a{@code FieldMatrix&lt;T&gt;} and not used directly, the {@code copyArray} may be
 * set to {@code false}. This will prevent the copying and improve
 * performance as no new array will be built and no data will be copied.&lt;/p&gt;</text>
    <param>d Data for the new matrix.</param>
    <param>copyArray Whether to copy or reference the input array.</param>
    <throws>DimensionMismatchException if {@code d} is not rectangular.</throws>
    <throws>NoDataException if there are not at least one row and one column.</throws>
    <throws>NullArgumentException if {@code d} is {@code null}.</throws>
    <see>#Array2DRowFieldMatrix(FieldElement[][])</see>
  </javadoc>
  <method type="constructor" name="Array2DRowFieldMatrix" />
  <javadoc>
    <text>Create a new {@code FieldMatrix&lt;T&gt;} using the input array as the underlying
 * data array.
 * &lt;p&gt;If an array is built specially in order to be embedded in a{@code FieldMatrix&lt;T&gt;} and not used directly, the {@code copyArray} may be
 * set to {@code false}. This will prevent the copying and improve
 * performance as no new array will be built and no data will be copied.&lt;/p&gt;</text>
    <param>field Field to which the elements belong.</param>
    <param>d Data for the new matrix.</param>
    <param>copyArray Whether to copy or reference the input array.</param>
    <throws>DimensionMismatchException if {@code d} is not rectangular.</throws>
    <throws>NoDataException if there are not at least one row and one column.</throws>
    <throws>NullArgumentException if {@code d} is {@code null}.</throws>
    <see>#Array2DRowFieldMatrix(FieldElement[][])</see>
  </javadoc>
  <method type="constructor" name="Array2DRowFieldMatrix">
    <scope />
    <scope>
      <declaration type="int" name="nRows" />
      <scope />
      <declaration type="int" name="nCols" />
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Create a new (column) {@code FieldMatrix&lt;T&gt;} using {@code v} as the
 * data for the unique column of the created matrix.
 * The input array is copied.</text>
    <param>v Column vector holding data for new matrix.</param>
    <throws>NoDataException if v is empty</throws>
  </javadoc>
  <method type="constructor" name="Array2DRowFieldMatrix" />
  <javadoc>
    <text>Create a new (column) {@code FieldMatrix&lt;T&gt;} using {@code v} as the
 * data for the unique column of the created matrix.
 * The input array is copied.</text>
    <param>field Field to which the elements belong.</param>
    <param>v Column vector holding data for new matrix.</param>
  </javadoc>
  <method type="constructor" name="Array2DRowFieldMatrix">
    <declaration type="int" name="nRows" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldMatrix&lt;T&gt;" name="createMatrix" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldMatrix&lt;T&gt;" name="copy" />
  <javadoc>
    <text>Add {@code m} to this matrix.</text>
    <param>m Matrix to be added.</param>
    <return>{@code this} + m.</return>
    <throws>MatrixDimensionMismatchException if {@code m} is not the same
 * size as this matrix.</throws>
  </javadoc>
  <method type="Array2DRowFieldMatrix&lt;T&gt;" name="add">
    <declaration type="int" name="rowCount" />
    <declaration type="int" name="columnCount" />
    <declaration type="T[][]" name="outData" />
    <scope>
      <declaration type="T[]" name="dataRow" />
      <declaration type="T[]" name="mRow" />
      <declaration type="T[]" name="outDataRow" />
      <scope />
    </scope>
    <comment>safety check</comment>
  </method>
  <javadoc>
    <text>Subtract {@code m} from this matrix.</text>
    <param>m Matrix to be subtracted.</param>
    <return>{@code this} + m.</return>
    <throws>MatrixDimensionMismatchException if {@code m} is not the same
 * size as this matrix.</throws>
  </javadoc>
  <method type="Array2DRowFieldMatrix&lt;T&gt;" name="subtract">
    <declaration type="int" name="rowCount" />
    <declaration type="int" name="columnCount" />
    <declaration type="T[][]" name="outData" />
    <scope>
      <declaration type="T[]" name="dataRow" />
      <declaration type="T[]" name="mRow" />
      <declaration type="T[]" name="outDataRow" />
      <scope />
    </scope>
    <comment>safety check</comment>
  </method>
  <javadoc>
    <text>Postmultiplying this matrix by {@code m}.</text>
    <param>m Matrix to postmultiply by.</param>
    <return>{@code this} * m.</return>
    <throws>DimensionMismatchException if the number of columns of this
 * matrix is not equal to the number of rows of {@code m}.</throws>
  </javadoc>
  <method type="Array2DRowFieldMatrix&lt;T&gt;" name="multiply">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <declaration type="int" name="nSum" />
    <declaration type="T[][]" name="outData" />
    <scope>
      <declaration type="T[]" name="dataRow" />
      <declaration type="T[]" name="outDataRow" />
      <scope>
        <declaration type="T" name="sum" />
        <scope />
      </scope>
    </scope>
    <comment>safety check</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T[][]" name="getData" />
  <javadoc>
    <text>Get a reference to the underlying data array.
 * This methods returns internal data, &lt;strong&gt;not&lt;/strong&gt; fresh copy of it.</text>
    <return>the 2-dimensional array of entries.</return>
  </javadoc>
  <method type="T[][]" name="getDataRef" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setSubMatrix">
    <scope>
      <scope />
      <scope />
      <declaration type="int" name="nRows" />
      <scope />
      <declaration type="int" name="nCols" />
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="getEntry" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setEntry" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="addToEntry" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="multiplyEntry" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getRowDimension" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getColumnDimension" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T[]" name="operate">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <scope />
    <declaration type="T[]" name="out" />
    <scope>
      <declaration type="T[]" name="dataRow" />
      <declaration type="T" name="sum" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T[]" name="preMultiply">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <scope />
    <declaration type="T[]" name="out" />
    <scope>
      <declaration type="T" name="sum" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInRowOrder">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <scope>
      <declaration type="T[]" name="rowI" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInRowOrder">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <scope>
      <declaration type="T[]" name="rowI" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInRowOrder">
    <scope>
      <declaration type="T[]" name="rowI" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInRowOrder">
    <scope>
      <declaration type="T[]" name="rowI" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInColumnOrder">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <scope>
      <scope>
        <declaration type="T[]" name="rowI" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInColumnOrder">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInColumnOrder">
    <scope>
      <scope>
        <declaration type="T[]" name="rowI" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInColumnOrder">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Get a fresh copy of the underlying data array.</text>
    <return>a copy of the underlying data array.</return>
  </javadoc>
  <method type="T[][]" name="copyOut">
    <declaration type="int" name="nRows" />
    <declaration type="T[][]" name="out" />
    <scope />
    <comment>can't copy 2-d array in one shot, otherwise get row references</comment>
  </method>
  <javadoc>
    <text>Replace data with a fresh copy of the input array.</text>
    <param>in Data to copy.</param>
    <throws>NoDataException if the input array is empty.</throws>
    <throws>DimensionMismatchException if the input array is not rectangular.</throws>
    <throws>NullArgumentException if the input array is {@code null}.</throws>
  </javadoc>
  <method type="void" name="copyIn" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
