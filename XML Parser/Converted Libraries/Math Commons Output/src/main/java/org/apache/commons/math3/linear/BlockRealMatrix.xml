<?xml version="1.0" encoding="UTF-8"?>
<class name="BlockRealMatrix">
  <javadoc>
    <text>Cache-friendly implementation of RealMatrix using a flat arrays to store
 * square blocks of the matrix.
 * &lt;p&gt;
 * This implementation is specially designed to be cache-friendly. Square blocks are
 * stored as small arrays and allow efficient traversal of data both in row major direction
 * and columns major direction, one block at a time. This greatly increases performances
 * for algorithms that use crossed directions loops like multiplication or transposition.
 * &lt;/p&gt;
 * &lt;p&gt;
 * The size of square blocks is a static parameter. It may be tuned according to the cache
 * size of the target computer processor. As a rule of thumbs, it should be the largest
 * value that allows three blocks to be simultaneously cached (this is necessary for example
 * for matrix multiplication). The default value is to use 52x52 blocks which is well suited
 * for processors with 64k L1 cache (one block holds 2704 values or 21632 bytes). This value
 * could be lowered to 36x36 for processors with 32k L1 cache.
 * &lt;/p&gt;
 * &lt;p&gt;
 * The regular blocks represent {@link #BLOCK_SIZE} x {@link #BLOCK_SIZE} squares. Blocks
 * at right hand side and bottom side which may be smaller to fit matrix dimensions. The square
 * blocks are flattened in row major order in single dimension arrays which are therefore{@link #BLOCK_SIZE}&lt;sup&gt;2&lt;/sup&gt; elements long for regular blocks. The blocks are themselves
 * organized in row major order.
 * &lt;/p&gt;
 * &lt;p&gt;
 * As an example, for a block size of 52x52, a 100x60 matrix would be stored in 4 blocks.
 * Block 0 would be a double[2704] array holding the upper left 52x52 square, block 1 would be
 * a double[416] array holding the upper right 52x8 rectangle, block 2 would be a double[2496]
 * array holding the lower left 48x52 rectangle and block 3 would be a double[384] array
 * holding the lower right 48x8 rectangle.
 * &lt;/p&gt;
 * &lt;p&gt;
 * The layout complexity overhead versus simple mapping of matrices to java
 * arrays is negligible for small matrices (about 1%). The gain from cache efficiency leads
 * to up to 3-fold improvements for matrices of moderate to large size.
 * &lt;/p&gt;</text>
    <version>$Id: BlockRealMatrix.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>Block size.</text>
  </javadoc>
  <declaration type="int" name="BLOCK_SIZE" />
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Blocks of matrix entries.</text>
  </javadoc>
  <declaration type="double" name="blocks" />
  <javadoc>
    <text>Number of rows of the matrix.</text>
  </javadoc>
  <declaration type="int" name="rows" />
  <javadoc>
    <text>Number of columns of the matrix.</text>
  </javadoc>
  <declaration type="int" name="columns" />
  <javadoc>
    <text>Number of block rows of the matrix.</text>
  </javadoc>
  <declaration type="int" name="blockRows" />
  <javadoc>
    <text>Number of block columns of the matrix.</text>
  </javadoc>
  <declaration type="int" name="blockColumns" />
  <javadoc>
    <text>Create a new matrix with the supplied row and column dimensions.</text>
    <param>rows  the number of rows in the new matrix</param>
    <param>columns  the number of columns in the new matrix</param>
    <throws>NotStrictlyPositiveException if row or column dimension is not
 * positive.</throws>
  </javadoc>
  <method type="constructor" name="BlockRealMatrix">
    <comment>number of blocks</comment>
    <comment>allocate storage blocks, taking care of smaller ones at right and bottom</comment>
  </method>
  <javadoc>
    <text>Create a new dense matrix copying entries from raw layout data.
 * &lt;p&gt;The input array &lt;em&gt;must&lt;/em&gt; already be in raw layout.&lt;/p&gt;
 * &lt;p&gt;Calling this constructor is equivalent to call:
 * &lt;pre&gt;matrix = new BlockRealMatrix(rawData.length, rawData[0].length,
 * toBlocksLayout(rawData), false);&lt;/pre&gt;
 * &lt;/p&gt;</text>
    <param>rawData data for new matrix, in raw layout</param>
    <throws>DimensionMismatchException if the shape of {@code blockData} is
 * inconsistent with block layout.</throws>
    <throws>NotStrictlyPositiveException if row or column dimension is not
 * positive.</throws>
    <see>#BlockRealMatrix(int,int,double[][],boolean)</see>
  </javadoc>
  <method type="constructor" name="BlockRealMatrix" />
  <javadoc>
    <text>Create a new dense matrix copying entries from block layout data.
 * &lt;p&gt;The input array &lt;em&gt;must&lt;/em&gt; already be in blocks layout.&lt;/p&gt;</text>
    <param>rows Number of rows in the new matrix.</param>
    <param>columns Number of columns in the new matrix.</param>
    <param>blockData data for new matrix</param>
    <param>copyArray Whether the input array will be copied or referenced.</param>
    <throws>DimensionMismatchException if the shape of {@code blockData} is
 * inconsistent with block layout.</throws>
    <throws>NotStrictlyPositiveException if row or column dimension is not
 * positive.</throws>
    <see>#createBlocksLayout(int,int)</see>
    <see>#toBlocksLayout(double[][])</see>
    <see>#BlockRealMatrix(double[][])</see>
  </javadoc>
  <method type="constructor" name="BlockRealMatrix">
    <scope />
    <scope />
    <declaration type="int" name="index" />
    <scope>
      <declaration type="int" name="iHeight" />
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>number of blocks</comment>
    <comment>allocate storage blocks, taking care of smaller ones at right and bottom</comment>
    <comment>reference existing array</comment>
  </method>
  <javadoc>
    <text>Convert a data array from raw layout to blocks layout.
 * &lt;p&gt;
 * Raw layout is the straightforward layout where element at row i and
 * column j is in array element &lt;code&gt;rawData[i][j]&lt;/code&gt;. Blocks layout
 * is the layout used in {@link BlockRealMatrix} instances, where the matrix
 * is split in square blocks (except at right and bottom side where blocks may
 * be rectangular to fit matrix size) and each block is stored in a flattened
 * one-dimensional array.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This method creates an array in blocks layout from an input array in raw layout.
 * It can be used to provide the array argument of the {@link #BlockRealMatrix(int,int,double[][],boolean)} constructor.
 * &lt;/p&gt;</text>
    <param>rawData Data array in raw layout.</param>
    <return>a new data array containing the same entries but in blocks layout.</return>
    <throws>DimensionMismatchException if {@code rawData} is not rectangular.</throws>
    <see>#createBlocksLayout(int,int)</see>
    <see>#BlockRealMatrix(int,int,double[][],boolean)</see>
  </javadoc>
  <method type="double[][]" name="toBlocksLayout">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <declaration type="int" name="blockRows" />
    <declaration type="int" name="blockColumns" />
    <scope>
      <declaration type="int" name="length" />
      <scope />
    </scope>
    <declaration type="double[][][]" name="blocks" />
    <declaration type="int" name="blockIndex" />
    <scope>
      <declaration type="int" name="pStart" />
      <declaration type="int" name="pEnd" />
      <declaration type="int" name="iHeight" />
      <scope>
        <declaration type="int" name="qStart" />
        <declaration type="int" name="qEnd" />
        <declaration type="int" name="jWidth" />
        <declaration type="double[]" name="block" />
        <declaration type="int" name="index" />
        <scope />
      </scope>
    </scope>
    <comment>safety checks</comment>
    <comment>convert array</comment>
    <comment>allocate new block</comment>
    <comment>copy data</comment>
  </method>
  <javadoc>
    <text>Create a data array in blocks layout.
 * &lt;p&gt;
 * This method can be used to create the array argument of the {@link #BlockRealMatrix(int,int,double[][],boolean)} constructor.
 * &lt;/p&gt;</text>
    <param>rows Number of rows in the new matrix.</param>
    <param>columns Number of columns in the new matrix.</param>
    <return>a new data array in blocks layout.</return>
    <see>#toBlocksLayout(double[][])</see>
    <see>#BlockRealMatrix(int,int,double[][],boolean)</see>
  </javadoc>
  <method type="double[][]" name="createBlocksLayout">
    <declaration type="int" name="blockRows" />
    <declaration type="int" name="blockColumns" />
    <declaration type="double[][][]" name="blocks" />
    <declaration type="int" name="blockIndex" />
    <scope>
      <declaration type="int" name="pStart" />
      <declaration type="int" name="pEnd" />
      <declaration type="int" name="iHeight" />
      <scope>
        <declaration type="int" name="qStart" />
        <declaration type="int" name="qEnd" />
        <declaration type="int" name="jWidth" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="BlockRealMatrix" name="createMatrix" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="BlockRealMatrix" name="copy">
    <declaration type="BlockRealMatrix" name="copied" />
    <scope />
    <comment>create an empty matrix</comment>
    <comment>copy the blocks</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="BlockRealMatrix" name="add">
    <scope />
    <scope>
      <declaration type="BlockRealMatrix" name="out" />
      <declaration type="int" name="blockIndex" />
      <scope>
        <scope>
          <declaration type="double[]" name="outBlock" />
          <declaration type="double[]" name="tBlock" />
          <declaration type="int" name="pStart" />
          <declaration type="int" name="pEnd" />
          <declaration type="int" name="qStart" />
          <declaration type="int" name="qEnd" />
          <declaration type="int" name="k" />
          <scope>
            <scope />
          </scope>
        </scope>
      </scope>
    </scope>
    <comment>safety check</comment>
    <comment>perform addition block-wise, to ensure good cache behavior</comment>
    <comment>perform addition on the current block</comment>
    <comment>go to next block</comment>
  </method>
  <javadoc>
    <text>Compute the sum of this matrix and {@code m}.</text>
    <param>m Matrix to be added.</param>
    <return>{@code this} + m.</return>
    <throws>MatrixDimensionMismatchException if {@code m} is not the same
 * size as this matrix.</throws>
  </javadoc>
  <method type="BlockRealMatrix" name="add">
    <declaration type="BlockRealMatrix" name="out" />
    <scope>
      <declaration type="double[]" name="outBlock" />
      <declaration type="double[]" name="tBlock" />
      <declaration type="double[]" name="mBlock" />
      <scope />
    </scope>
    <comment>safety check</comment>
    <comment>perform addition block-wise, to ensure good cache behavior</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="BlockRealMatrix" name="subtract">
    <scope />
    <scope>
      <declaration type="BlockRealMatrix" name="out" />
      <declaration type="int" name="blockIndex" />
      <scope>
        <scope>
          <declaration type="double[]" name="outBlock" />
          <declaration type="double[]" name="tBlock" />
          <declaration type="int" name="pStart" />
          <declaration type="int" name="pEnd" />
          <declaration type="int" name="qStart" />
          <declaration type="int" name="qEnd" />
          <declaration type="int" name="k" />
          <scope>
            <scope />
          </scope>
        </scope>
      </scope>
    </scope>
    <comment>safety check</comment>
    <comment>perform subtraction block-wise, to ensure good cache behavior</comment>
    <comment>perform subtraction on the current block</comment>
    <comment>go to next block</comment>
  </method>
  <javadoc>
    <text>Subtract {@code m} from this matrix.</text>
    <param>m Matrix to be subtracted.</param>
    <return>{@code this} - m.</return>
    <throws>MatrixDimensionMismatchException if {@code m} is not the
 * same size as this matrix.</throws>
  </javadoc>
  <method type="BlockRealMatrix" name="subtract">
    <declaration type="BlockRealMatrix" name="out" />
    <scope>
      <declaration type="double[]" name="outBlock" />
      <declaration type="double[]" name="tBlock" />
      <declaration type="double[]" name="mBlock" />
      <scope />
    </scope>
    <comment>safety check</comment>
    <comment>perform subtraction block-wise, to ensure good cache behavior</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="BlockRealMatrix" name="scalarAdd">
    <declaration type="BlockRealMatrix" name="out" />
    <scope>
      <declaration type="double[]" name="outBlock" />
      <declaration type="double[]" name="tBlock" />
      <scope />
    </scope>
    <comment>perform subtraction block-wise, to ensure good cache behavior</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="scalarMultiply">
    <declaration type="BlockRealMatrix" name="out" />
    <scope>
      <declaration type="double[]" name="outBlock" />
      <declaration type="double[]" name="tBlock" />
      <scope />
    </scope>
    <comment>perform subtraction block-wise, to ensure good cache behavior</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="BlockRealMatrix" name="multiply">
    <scope />
    <scope>
      <declaration type="BlockRealMatrix" name="out" />
      <declaration type="int" name="blockIndex" />
      <scope>
        <declaration type="int" name="pStart" />
        <declaration type="int" name="pEnd" />
        <scope>
          <declaration type="int" name="qStart" />
          <declaration type="int" name="qEnd" />
          <declaration type="double[]" name="outBlock" />
          <scope>
            <declaration type="int" name="kWidth" />
            <declaration type="double[]" name="tBlock" />
            <declaration type="int" name="rStart" />
            <declaration type="int" name="k" />
            <scope>
              <declaration type="int" name="lStart" />
              <declaration type="int" name="lEnd" />
              <scope>
                <declaration type="double" name="sum" />
                <declaration type="int" name="r" />
                <scope />
              </scope>
            </scope>
          </scope>
        </scope>
      </scope>
    </scope>
    <comment>safety check</comment>
    <comment>perform multiplication block-wise, to ensure good cache behavior</comment>
    <comment>select current block</comment>
    <comment>perform multiplication on current block</comment>
    <comment>go to next block</comment>
  </method>
  <javadoc>
    <text>Returns the result of postmultiplying this by {@code m}.</text>
    <param>m Matrix to postmultiply by.</param>
    <return>{@code this} * m.</return>
    <throws>DimensionMismatchException if the matrices are not compatible.</throws>
  </javadoc>
  <method type="BlockRealMatrix" name="multiply">
    <declaration type="BlockRealMatrix" name="out" />
    <declaration type="int" name="blockIndex" />
    <scope>
      <declaration type="int" name="pStart" />
      <declaration type="int" name="pEnd" />
      <scope>
        <declaration type="int" name="jWidth" />
        <declaration type="int" name="jWidth2" />
        <declaration type="int" name="jWidth3" />
        <declaration type="int" name="jWidth4" />
        <declaration type="double[]" name="outBlock" />
        <scope>
          <declaration type="int" name="kWidth" />
          <declaration type="double[]" name="tBlock" />
          <declaration type="double[]" name="mBlock" />
          <declaration type="int" name="k" />
          <scope>
            <declaration type="int" name="lStart" />
            <declaration type="int" name="lEnd" />
            <scope>
              <declaration type="double" name="sum" />
              <declaration type="int" name="l" />
              <declaration type="int" name="n" />
              <scope />
              <scope />
            </scope>
          </scope>
        </scope>
      </scope>
    </scope>
    <comment>safety check</comment>
    <comment>perform multiplication block-wise, to ensure good cache behavior</comment>
    <comment>select current block</comment>
    <comment>perform multiplication on current block</comment>
    <comment>go to next block</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[][]" name="getData">
    <declaration type="double[][]" name="data" />
    <declaration type="int" name="lastColumns" />
    <scope>
      <declaration type="int" name="pStart" />
      <declaration type="int" name="pEnd" />
      <declaration type="int" name="regularPos" />
      <declaration type="int" name="lastPos" />
      <scope>
        <declaration type="double[]" name="dataP" />
        <declaration type="int" name="blockIndex" />
        <declaration type="int" name="dataPos" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getNorm">
    <declaration type="double[]" name="colSums" />
    <declaration type="double" name="maxColSum" />
    <scope>
      <declaration type="int" name="jWidth" />
      <scope>
        <declaration type="int" name="iHeight" />
        <declaration type="double[]" name="block" />
        <scope>
          <declaration type="double" name="sum" />
          <scope />
        </scope>
      </scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getFrobeniusNorm">
    <declaration type="double" name="sum2" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="BlockRealMatrix" name="getSubMatrix">
    <declaration type="BlockRealMatrix" name="out" />
    <declaration type="int" name="blockStartRow" />
    <declaration type="int" name="rowsShift" />
    <declaration type="int" name="blockStartColumn" />
    <declaration type="int" name="columnsShift" />
    <declaration type="int" name="pBlock" />
    <scope>
      <declaration type="int" name="iHeight" />
      <declaration type="int" name="qBlock" />
      <scope>
        <declaration type="int" name="jWidth" />
        <declaration type="int" name="outIndex" />
        <declaration type="double[]" name="outBlock" />
        <declaration type="int" name="index" />
        <declaration type="int" name="width" />
        <declaration type="int" name="heightExcess" />
        <declaration type="int" name="widthExcess" />
        <scope>
          <scope>
            <declaration type="int" name="width2" />
          </scope>
          <scope />
        </scope>
        <scope>
          <scope>
            <declaration type="int" name="width2" />
          </scope>
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>safety checks</comment>
    <comment>create the output matrix</comment>
    <comment>compute blocks shifts</comment>
    <comment>perform extraction block-wise, to ensure good cache behavior</comment>
    <comment>handle one block of the output matrix</comment>
    <comment>the submatrix block spans on two blocks rows from the original matrix</comment>
    <comment>the submatrix block spans on two blocks columns from the original matrix</comment>
    <comment>the submatrix block spans on one block column from the original matrix</comment>
    <comment>the submatrix block spans on one block row from the original matrix</comment>
    <comment>the submatrix block spans on two blocks columns from the original matrix</comment>
    <comment>the submatrix block spans on one block column from the original matrix</comment>
  </method>
  <javadoc>
    <text>Copy a part of a block into another one
 * &lt;p&gt;This method can be called only when the specified part fits in both
 * blocks, no verification is done here.&lt;/p&gt;</text>
    <param>srcBlock source block</param>
    <param>srcWidth source block width ({@link #BLOCK_SIZE} or smaller)</param>
    <param>srcStartRow start row in the source block</param>
    <param>srcEndRow end row (exclusive) in the source block</param>
    <param>srcStartColumn start column in the source block</param>
    <param>srcEndColumn end column (exclusive) in the source block</param>
    <param>dstBlock destination block</param>
    <param>dstWidth destination block width ({@link #BLOCK_SIZE} or smaller)</param>
    <param>dstStartRow start row in the destination block</param>
    <param>dstStartColumn start column in the destination block</param>
  </javadoc>
  <method type="void" name="copyBlockPart">
    <declaration type="int" name="length" />
    <declaration type="int" name="srcPos" />
    <declaration type="int" name="dstPos" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setSubMatrix">
    <declaration type="int" name="refLength" />
    <scope />
    <declaration type="int" name="endRow" />
    <declaration type="int" name="endColumn" />
    <scope>
      <scope />
    </scope>
    <declaration type="int" name="blockStartRow" />
    <declaration type="int" name="blockEndRow" />
    <declaration type="int" name="blockStartColumn" />
    <declaration type="int" name="blockEndColumn" />
    <scope>
      <declaration type="int" name="iHeight" />
      <declaration type="int" name="firstRow" />
      <declaration type="int" name="iStart" />
      <declaration type="int" name="iEnd" />
      <scope>
        <declaration type="int" name="jWidth" />
        <declaration type="int" name="firstColumn" />
        <declaration type="int" name="jStart" />
        <declaration type="int" name="jEnd" />
        <declaration type="int" name="jLength" />
        <declaration type="double[]" name="block" />
        <scope />
      </scope>
    </scope>
    <comment>safety checks</comment>
    <comment>compute blocks bounds</comment>
    <comment>perform copy block-wise, to ensure good cache behavior</comment>
    <comment>handle one block, row by row</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="BlockRealMatrix" name="getRowMatrix">
    <declaration type="BlockRealMatrix" name="out" />
    <declaration type="int" name="iBlock" />
    <declaration type="int" name="iRow" />
    <declaration type="int" name="outBlockIndex" />
    <declaration type="int" name="outIndex" />
    <declaration type="double[]" name="outBlock" />
    <scope>
      <declaration type="int" name="jWidth" />
      <declaration type="double[]" name="block" />
      <declaration type="int" name="available" />
      <scope />
      <scope />
    </scope>
    <comment>perform copy block-wise, to ensure good cache behavior</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setRowMatrix">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Sets the entries in row number &lt;code&gt;row&lt;/code&gt;
 * as a row matrix.  Row indices start at 0.</text>
    <param>row the row to be set</param>
    <param>matrix row matrix (must have one row and the same number of columns
 * as the instance)</param>
    <throws>OutOfRangeException if the specified row index is invalid.</throws>
    <throws>MatrixDimensionMismatchException if the matrix dimensions do
 * not match one instance row.</throws>
  </javadoc>
  <method type="void" name="setRowMatrix">
    <declaration type="int" name="nCols" />
    <scope />
    <declaration type="int" name="iBlock" />
    <declaration type="int" name="iRow" />
    <declaration type="int" name="mBlockIndex" />
    <declaration type="int" name="mIndex" />
    <declaration type="double[]" name="mBlock" />
    <scope>
      <declaration type="int" name="jWidth" />
      <declaration type="double[]" name="block" />
      <declaration type="int" name="available" />
      <scope />
      <scope />
    </scope>
    <comment>perform copy block-wise, to ensure good cache behavior</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="BlockRealMatrix" name="getColumnMatrix">
    <declaration type="BlockRealMatrix" name="out" />
    <declaration type="int" name="jBlock" />
    <declaration type="int" name="jColumn" />
    <declaration type="int" name="jWidth" />
    <declaration type="int" name="outBlockIndex" />
    <declaration type="int" name="outIndex" />
    <declaration type="double[]" name="outBlock" />
    <scope>
      <declaration type="int" name="iHeight" />
      <declaration type="double[]" name="block" />
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>perform copy block-wise, to ensure good cache behavior</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setColumnMatrix">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Sets the entries in column number &lt;code&gt;column&lt;/code&gt;
 * as a column matrix.  Column indices start at 0.</text>
    <param>column the column to be set</param>
    <param>matrix column matrix (must have one column and the same number of rows
 * as the instance)</param>
    <throws>OutOfRangeException if the specified column index is invalid.</throws>
    <throws>MatrixDimensionMismatchException if the matrix dimensions do
 * not match one instance column.</throws>
  </javadoc>
  <method type="void" name="setColumnMatrix">
    <declaration type="int" name="nRows" />
    <scope />
    <declaration type="int" name="jBlock" />
    <declaration type="int" name="jColumn" />
    <declaration type="int" name="jWidth" />
    <declaration type="int" name="mBlockIndex" />
    <declaration type="int" name="mIndex" />
    <declaration type="double[]" name="mBlock" />
    <scope>
      <declaration type="int" name="iHeight" />
      <declaration type="double[]" name="block" />
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>perform copy block-wise, to ensure good cache behavior</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="getRowVector">
    <declaration type="double[]" name="outData" />
    <declaration type="int" name="iBlock" />
    <declaration type="int" name="iRow" />
    <declaration type="int" name="outIndex" />
    <scope>
      <declaration type="int" name="jWidth" />
      <declaration type="double[]" name="block" />
    </scope>
    <comment>perform copy block-wise, to ensure good cache behavior</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setRowVector">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="getColumnVector">
    <declaration type="double[]" name="outData" />
    <declaration type="int" name="jBlock" />
    <declaration type="int" name="jColumn" />
    <declaration type="int" name="jWidth" />
    <declaration type="int" name="outIndex" />
    <scope>
      <declaration type="int" name="iHeight" />
      <declaration type="double[]" name="block" />
      <scope />
    </scope>
    <comment>perform copy block-wise, to ensure good cache behavior</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setColumnVector">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[]" name="getRow">
    <declaration type="double[]" name="out" />
    <declaration type="int" name="iBlock" />
    <declaration type="int" name="iRow" />
    <declaration type="int" name="outIndex" />
    <scope>
      <declaration type="int" name="jWidth" />
      <declaration type="double[]" name="block" />
    </scope>
    <comment>perform copy block-wise, to ensure good cache behavior</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setRow">
    <declaration type="int" name="nCols" />
    <scope />
    <declaration type="int" name="iBlock" />
    <declaration type="int" name="iRow" />
    <declaration type="int" name="outIndex" />
    <scope>
      <declaration type="int" name="jWidth" />
      <declaration type="double[]" name="block" />
    </scope>
    <comment>perform copy block-wise, to ensure good cache behavior</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[]" name="getColumn">
    <declaration type="double[]" name="out" />
    <declaration type="int" name="jBlock" />
    <declaration type="int" name="jColumn" />
    <declaration type="int" name="jWidth" />
    <declaration type="int" name="outIndex" />
    <scope>
      <declaration type="int" name="iHeight" />
      <declaration type="double[]" name="block" />
      <scope />
    </scope>
    <comment>perform copy block-wise, to ensure good cache behavior</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setColumn">
    <declaration type="int" name="nRows" />
    <scope />
    <declaration type="int" name="jBlock" />
    <declaration type="int" name="jColumn" />
    <declaration type="int" name="jWidth" />
    <declaration type="int" name="outIndex" />
    <scope>
      <declaration type="int" name="iHeight" />
      <declaration type="double[]" name="block" />
      <scope />
    </scope>
    <comment>perform copy block-wise, to ensure good cache behavior</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getEntry">
    <declaration type="int" name="iBlock" />
    <declaration type="int" name="jBlock" />
    <declaration type="int" name="k" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setEntry">
    <declaration type="int" name="iBlock" />
    <declaration type="int" name="jBlock" />
    <declaration type="int" name="k" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="addToEntry">
    <declaration type="int" name="iBlock" />
    <declaration type="int" name="jBlock" />
    <declaration type="int" name="k" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="multiplyEntry">
    <declaration type="int" name="iBlock" />
    <declaration type="int" name="jBlock" />
    <declaration type="int" name="k" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="BlockRealMatrix" name="transpose">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <declaration type="BlockRealMatrix" name="out" />
    <declaration type="int" name="blockIndex" />
    <scope>
      <scope>
        <declaration type="double[]" name="outBlock" />
        <declaration type="double[]" name="tBlock" />
        <declaration type="int" name="pStart" />
        <declaration type="int" name="pEnd" />
        <declaration type="int" name="qStart" />
        <declaration type="int" name="qEnd" />
        <declaration type="int" name="k" />
        <scope>
          <declaration type="int" name="lInc" />
          <declaration type="int" name="l" />
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>perform transpose block-wise, to ensure good cache behavior</comment>
    <comment>transpose current block</comment>
    <comment>go to next block</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getRowDimension" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getColumnDimension" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[]" name="operate">
    <scope />
    <declaration type="double[]" name="out" />
    <scope>
      <declaration type="int" name="pStart" />
      <declaration type="int" name="pEnd" />
      <scope>
        <declaration type="double[]" name="block" />
        <declaration type="int" name="qStart" />
        <declaration type="int" name="qEnd" />
        <declaration type="int" name="k" />
        <scope>
          <declaration type="double" name="sum" />
          <declaration type="int" name="q" />
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>perform multiplication block-wise, to ensure good cache behavior</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[]" name="preMultiply">
    <scope />
    <declaration type="double[]" name="out" />
    <scope>
      <declaration type="int" name="jWidth" />
      <declaration type="int" name="jWidth2" />
      <declaration type="int" name="jWidth3" />
      <declaration type="int" name="jWidth4" />
      <declaration type="int" name="qStart" />
      <declaration type="int" name="qEnd" />
      <scope>
        <declaration type="double[]" name="block" />
        <declaration type="int" name="pStart" />
        <declaration type="int" name="pEnd" />
        <scope>
          <declaration type="int" name="k" />
          <declaration type="double" name="sum" />
          <declaration type="int" name="p" />
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>perform multiplication block-wise, to ensure good cache behavior</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInRowOrder">
    <scope>
      <declaration type="int" name="pStart" />
      <declaration type="int" name="pEnd" />
      <scope>
        <scope>
          <declaration type="int" name="jWidth" />
          <declaration type="int" name="qStart" />
          <declaration type="int" name="qEnd" />
          <declaration type="double[]" name="block" />
          <declaration type="int" name="k" />
          <scope />
        </scope>
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInRowOrder">
    <scope>
      <declaration type="int" name="pStart" />
      <declaration type="int" name="pEnd" />
      <scope>
        <scope>
          <declaration type="int" name="jWidth" />
          <declaration type="int" name="qStart" />
          <declaration type="int" name="qEnd" />
          <declaration type="double[]" name="block" />
          <declaration type="int" name="k" />
          <scope />
        </scope>
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInRowOrder">
    <scope>
      <declaration type="int" name="p0" />
      <declaration type="int" name="pStart" />
      <declaration type="int" name="pEnd" />
      <scope>
        <scope>
          <declaration type="int" name="jWidth" />
          <declaration type="int" name="q0" />
          <declaration type="int" name="qStart" />
          <declaration type="int" name="qEnd" />
          <declaration type="double[]" name="block" />
          <declaration type="int" name="k" />
          <scope />
        </scope>
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInRowOrder">
    <scope>
      <declaration type="int" name="p0" />
      <declaration type="int" name="pStart" />
      <declaration type="int" name="pEnd" />
      <scope>
        <scope>
          <declaration type="int" name="jWidth" />
          <declaration type="int" name="q0" />
          <declaration type="int" name="qStart" />
          <declaration type="int" name="qEnd" />
          <declaration type="double[]" name="block" />
          <declaration type="int" name="k" />
          <scope />
        </scope>
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInOptimizedOrder">
    <declaration type="int" name="blockIndex" />
    <scope>
      <declaration type="int" name="pStart" />
      <declaration type="int" name="pEnd" />
      <scope>
        <declaration type="int" name="qStart" />
        <declaration type="int" name="qEnd" />
        <declaration type="double[]" name="block" />
        <declaration type="int" name="k" />
        <scope>
          <scope />
        </scope>
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInOptimizedOrder">
    <declaration type="int" name="blockIndex" />
    <scope>
      <declaration type="int" name="pStart" />
      <declaration type="int" name="pEnd" />
      <scope>
        <declaration type="int" name="qStart" />
        <declaration type="int" name="qEnd" />
        <declaration type="double[]" name="block" />
        <declaration type="int" name="k" />
        <scope>
          <scope />
        </scope>
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInOptimizedOrder">
    <scope>
      <declaration type="int" name="p0" />
      <declaration type="int" name="pStart" />
      <declaration type="int" name="pEnd" />
      <scope>
        <declaration type="int" name="jWidth" />
        <declaration type="int" name="q0" />
        <declaration type="int" name="qStart" />
        <declaration type="int" name="qEnd" />
        <declaration type="double[]" name="block" />
        <scope>
          <declaration type="int" name="k" />
          <scope />
        </scope>
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInOptimizedOrder">
    <scope>
      <declaration type="int" name="p0" />
      <declaration type="int" name="pStart" />
      <declaration type="int" name="pEnd" />
      <scope>
        <declaration type="int" name="jWidth" />
        <declaration type="int" name="q0" />
        <declaration type="int" name="qStart" />
        <declaration type="int" name="qEnd" />
        <declaration type="double[]" name="block" />
        <scope>
          <declaration type="int" name="k" />
          <scope />
        </scope>
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Get the height of a block.</text>
    <param>blockRow row index (in block sense) of the block</param>
    <return>height (number of rows) of the block</return>
  </javadoc>
  <method type="int" name="blockHeight" />
  <javadoc>
    <text>Get the width of a block.</text>
    <param>blockColumn column index (in block sense) of the block</param>
    <return>width (number of columns) of the block</return>
  </javadoc>
  <method type="int" name="blockWidth" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
