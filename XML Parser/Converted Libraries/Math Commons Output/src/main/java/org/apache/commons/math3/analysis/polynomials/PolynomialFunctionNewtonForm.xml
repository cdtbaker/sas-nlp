<?xml version="1.0" encoding="UTF-8"?>
<class name="PolynomialFunctionNewtonForm">
  <javadoc>
    <text>Implements the representation of a real polynomial function in
 * Newton Form. For reference, see &lt;b&gt;Elementary Numerical Analysis&lt;/b&gt;,
 * ISBN 0070124477, chapter 2.
 * &lt;p&gt;
 * The formula of polynomial in Newton form is
 * p(x) = a[0] + a[1](x-c[0]) + a[2](x-c[0])(x-c[1]) + ... +
 * a[n](x-c[0])(x-c[1])...(x-c[n-1])
 * Note that the length of a[] is one more than the length of c[]&lt;/p&gt;</text>
    <version>$Id: PolynomialFunctionNewtonForm.java 1455194 2013-03-11 15:45:54Z luc $</version>
    <since>1.2</since>
  </javadoc>
  <javadoc>
    <text>The coefficients of the polynomial, ordered by degree -- i.e.
 * coefficients[0] is the constant term and coefficients[n] is the
 * coefficient of x^n where n is the degree of the polynomial.</text>
  </javadoc>
  <declaration type="double" name="coefficients" />
  <javadoc>
    <text>Centers of the Newton polynomial.</text>
  </javadoc>
  <declaration type="double" name="c" />
  <javadoc>
    <text>When all c[i] = 0, a[] becomes normal polynomial coefficients,
 * i.e. a[i] = coefficients[i].</text>
  </javadoc>
  <declaration type="double" name="a" />
  <javadoc>
    <text>Whether the polynomial coefficients are available.</text>
  </javadoc>
  <declaration type="boolean" name="coefficientsComputed" />
  <javadoc>
    <text>Construct a Newton polynomial with the given a[] and c[]. The order of
 * centers are important in that if c[] shuffle, then values of a[] would
 * completely change, not just a permutation of old a[].
 * &lt;p&gt;
 * The constructor makes copy of the input arrays and assigns them.&lt;/p&gt;</text>
    <param>a Coefficients in Newton form formula.</param>
    <param>c Centers.</param>
    <throws>NullArgumentException if any argument is {@code null}.</throws>
    <throws>NoDataException if any array has zero length.</throws>
    <throws>DimensionMismatchException if the size difference between{@code a} and {@code c} is not equal to 1.</throws>
  </javadoc>
  <method type="constructor" name="PolynomialFunctionNewtonForm" />
  <javadoc>
    <text>Calculate the function value at the given point.</text>
    <param>z Point at which the function value is to be computed.</param>
    <return>the function value.</return>
  </javadoc>
  <method type="double" name="value" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.1</since>
  </javadoc>
  <method type="DerivativeStructure" name="value">
    <declaration type="int" name="n" />
    <declaration type="DerivativeStructure" name="value" />
    <scope />
  </method>
  <javadoc>
    <text>Returns the degree of the polynomial.</text>
    <return>the degree of the polynomial</return>
  </javadoc>
  <method type="int" name="degree" />
  <javadoc>
    <text>Returns a copy of coefficients in Newton form formula.
 * &lt;p&gt;
 * Changes made to the returned copy will not affect the polynomial.&lt;/p&gt;</text>
    <return>a fresh copy of coefficients in Newton form formula</return>
  </javadoc>
  <method type="double[]" name="getNewtonCoefficients">
    <declaration type="double[]" name="out" />
  </method>
  <javadoc>
    <text>Returns a copy of the centers array.
 * &lt;p&gt;
 * Changes made to the returned copy will not affect the polynomial.&lt;/p&gt;</text>
    <return>a fresh copy of the centers array.</return>
  </javadoc>
  <method type="double[]" name="getCenters">
    <declaration type="double[]" name="out" />
  </method>
  <javadoc>
    <text>Returns a copy of the coefficients array.
 * &lt;p&gt;
 * Changes made to the returned copy will not affect the polynomial.&lt;/p&gt;</text>
    <return>a fresh copy of the coefficients array.</return>
  </javadoc>
  <method type="double[]" name="getCoefficients">
    <scope />
    <declaration type="double[]" name="out" />
  </method>
  <javadoc>
    <text>Evaluate the Newton polynomial using nested multiplication. It is
 * also called &lt;a href="http://mathworld.wolfram.com/HornersRule.html"&gt;
 * Horner's Rule&lt;/a&gt; and takes O(N) time.</text>
    <param>a Coefficients in Newton form formula.</param>
    <param>c Centers.</param>
    <param>z Point at which the function value is to be computed.</param>
    <return>the function value.</return>
    <throws>NullArgumentException if any argument is {@code null}.</throws>
    <throws>NoDataException if any array has zero length.</throws>
    <throws>DimensionMismatchException if the size difference between{@code a} and {@code c} is not equal to 1.</throws>
  </javadoc>
  <method type="double" name="evaluate">
    <declaration type="int" name="n" />
    <declaration type="double" name="value" />
    <scope />
  </method>
  <javadoc>
    <text>Calculate the normal polynomial coefficients given the Newton form.
 * It also uses nested multiplication but takes O(N^2) time.</text>
  </javadoc>
  <method type="void" name="computeCoefficients">
    <declaration type="int" name="n" />
    <scope />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Verifies that the input arrays are valid.
 * &lt;p&gt;
 * The centers must be distinct for interpolation purposes, but not
 * for general use. Thus it is not verified here.&lt;/p&gt;</text>
    <param>a the coefficients in Newton form formula</param>
    <param>c the centers</param>
    <throws>NullArgumentException if any argument is {@code null}.</throws>
    <throws>NoDataException if any array has zero length.</throws>
    <throws>DimensionMismatchException if the size difference between{@code a} and {@code c} is not equal to 1.</throws>
    <see>org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator#computeDividedDifference(double[],double[])</see>
  </javadoc>
  <method type="void" name="verifyInputArray">
    <scope />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
