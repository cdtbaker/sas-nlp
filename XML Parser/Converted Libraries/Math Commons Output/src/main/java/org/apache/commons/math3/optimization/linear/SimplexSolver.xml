<?xml version="1.0" encoding="UTF-8"?>
<class name="SimplexSolver">
  <javadoc>
    <text>Solves a linear problem using the Two-Phase Simplex Method.</text>
    <version>$Id: SimplexSolver.java 1462503 2013-03-29 15:48:27Z luc $</version>
    <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>Default amount of error to accept for algorithm convergence.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_EPSILON" />
  <javadoc>
    <text>Default amount of error to accept in floating point comparisons (as ulps).</text>
  </javadoc>
  <declaration type="int" name="DEFAULT_ULPS" />
  <javadoc>
    <text>Amount of error to accept for algorithm convergence.</text>
  </javadoc>
  <declaration type="double" name="epsilon" />
  <javadoc>
    <text>Amount of error to accept in floating point comparisons (as ulps).</text>
  </javadoc>
  <declaration type="int" name="maxUlps" />
  <javadoc>
    <text>Build a simplex solver with default settings.</text>
  </javadoc>
  <method type="constructor" name="SimplexSolver" />
  <javadoc>
    <text>Build a simplex solver with a specified accepted amount of error</text>
    <param>epsilon the amount of error to accept for algorithm convergence</param>
    <param>maxUlps amount of error to accept in floating point comparisons</param>
  </javadoc>
  <method type="constructor" name="SimplexSolver" />
  <javadoc>
    <text>Returns the column with the most negative coefficient in the objective function row.</text>
    <param>tableau simple tableau for the problem</param>
    <return>column with the most negative coefficient</return>
  </javadoc>
  <method type="Integer" name="getPivotColumn">
    <declaration type="double" name="minValue" />
    <declaration type="Integer" name="minPos" />
    <scope>
      <declaration type="double" name="entry" />
      <scope />
    </scope>
    <comment>check if the entry is strictly smaller than the current minimum</comment>
    <comment>do not use a ulp/epsilon check</comment>
  </method>
  <javadoc>
    <text>Returns the row with the minimum ratio as given by the minimum ratio test (MRT).</text>
    <param>tableau simple tableau for the problem</param>
    <param>col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}</param>
    <return>row with the minimum ratio</return>
  </javadoc>
  <method type="Integer" name="getPivotRow">
    <declaration type="List&lt;Integer&gt;" name="minRatioPositions" />
    <declaration type="double" name="minRatio" />
    <scope>
      <declaration type="double" name="rhs" />
      <declaration type="double" name="entry" />
      <scope>
        <declaration type="double" name="ratio" />
        <declaration type="int" name="cmp" />
        <scope />
        <scope />
      </scope>
    </scope>
    <scope />
    <scope>
      <scope>
        <scope>
          <scope>
            <declaration type="int" name="column" />
            <declaration type="double" name="entry" />
            <scope />
          </scope>
        </scope>
      </scope>
      <scope>
        <declaration type="Integer" name="minRow" />
        <declaration type="int" name="minIndex" />
        <declaration type="int" name="varStart" />
        <declaration type="int" name="varEnd" />
        <scope>
          <scope>
            <declaration type="Integer" name="basicRow" />
            <scope />
          </scope>
        </scope>
      </scope>
    </scope>
    <comment>create a list of all the rows that tie for the lowest score in the minimum ratio test</comment>
    <comment>check if the entry is strictly equal to the current min ratio</comment>
    <comment>do not use a ulp/epsilon check</comment>
    <comment>there's a degeneracy as indicated by a tie in the minimum ratio test</comment>
    <comment>1. check if there's an artificial variable that can be forced out of the basis</comment>
    <comment>2. apply Bland's rule to prevent cycling:</comment>
    <comment>take the row for which the corresponding basic variable has the smallest index</comment>
    <comment />
    <comment>see http:www.stanford.edu/class/msande310/blandrule.pdf</comment>
    <comment>see http:en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)</comment>
    <comment />
    <comment>Additional heuristic: if we did not get a solution after half of maxIterations</comment>
    <comment>revert to the simple case of just returning the top-most row</comment>
    <comment>This heuristic is based on empirical data gathered while investigating MATH-828.</comment>
  </method>
  <javadoc>
    <text>Runs one iteration of the Simplex method on the given model.</text>
    <param>tableau simple tableau for the problem</param>
    <throws>MaxCountExceededException if the maximal iteration count has been exceeded</throws>
    <throws>UnboundedSolutionException if the model is found not to have a bounded solution</throws>
  </javadoc>
  <method type="void" name="doIteration">
    <declaration type="Integer" name="pivotCol" />
    <declaration type="Integer" name="pivotRow" />
    <scope />
    <declaration type="double" name="pivotVal" />
    <scope>
      <scope>
        <declaration type="double" name="multiplier" />
      </scope>
    </scope>
    <comment>set the pivot element to 1</comment>
    <comment>set the rest of the pivot column to 0</comment>
  </method>
  <javadoc>
    <text>Solves Phase 1 of the Simplex method.</text>
    <param>tableau simple tableau for the problem</param>
    <throws>MaxCountExceededException if the maximal iteration count has been exceeded</throws>
    <throws>UnboundedSolutionException if the model is found not to have a bounded solution</throws>
    <throws>NoFeasibleSolutionException if there is no feasible solution</throws>
  </javadoc>
  <method type="void" name="solvePhase1">
    <scope />
    <scope />
    <scope />
    <comment>make sure we're in Phase 1</comment>
    <comment>if W is not zero then we have no feasible solution</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="PointValuePair" name="doOptimize">
    <declaration type="SimplexTableau" name="tableau" />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
