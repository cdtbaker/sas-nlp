<?xml version="1.0" encoding="UTF-8"?>
<class name="BrentSolver">
  <javadoc>
    <text>This class implements the &lt;a href="http://mathworld.wolfram.com/BrentsMethod.html"&gt;
 * Brent algorithm&lt;/a&gt; for finding zeros of real univariate functions.
 * The function should be continuous but not necessarily smooth.
 * The {@code solve} method returns a zero {@code x} of the function {@code f}in the given interval {@code [a, b]} to within a tolerance{@code 6 eps abs(x) + t} where {@code eps} is the relative accuracy and{@code t} is the absolute accuracy.
 * The given interval must bracket the root.</text>
    <version>$Id: BrentSolver.java 1379560 2012-08-31 19:40:30Z erans $</version>
  </javadoc>
  <javadoc>
    <text>Default absolute accuracy.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_ABSOLUTE_ACCURACY" />
  <javadoc>
    <text>Construct a solver with default accuracy (1e-6).</text>
  </javadoc>
  <method type="constructor" name="BrentSolver" />
  <javadoc>
    <text>Construct a solver.</text>
    <param>absoluteAccuracy Absolute accuracy.</param>
  </javadoc>
  <method type="constructor" name="BrentSolver" />
  <javadoc>
    <text>Construct a solver.</text>
    <param>relativeAccuracy Relative accuracy.</param>
    <param>absoluteAccuracy Absolute accuracy.</param>
  </javadoc>
  <method type="constructor" name="BrentSolver" />
  <javadoc>
    <text>Construct a solver.</text>
    <param>relativeAccuracy Relative accuracy.</param>
    <param>absoluteAccuracy Absolute accuracy.</param>
    <param>functionValueAccuracy Function value accuracy.</param>
  </javadoc>
  <method type="constructor" name="BrentSolver" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="doSolve">
    <declaration type="double" name="min" />
    <declaration type="double" name="max" />
    <declaration type="double" name="initial" />
    <declaration type="double" name="functionValueAccuracy" />
    <declaration type="double" name="yInitial" />
    <scope />
    <declaration type="double" name="yMin" />
    <scope />
    <scope />
    <declaration type="double" name="yMax" />
    <scope />
    <scope />
    <comment>Return the initial guess if it is good enough.</comment>
    <comment>Return the first endpoint if it is good enough.</comment>
    <comment>Reduce interval if min and initial bracket the root.</comment>
    <comment>Return the second endpoint if it is good enough.</comment>
    <comment>Reduce interval if initial and max bracket the root.</comment>
  </method>
  <javadoc>
    <text>Search for a zero inside the provided interval.
 * This implementation is based on the algorithm described at page 58 of
 * the book
 * &lt;quote&gt;
 * &lt;b&gt;Algorithms for Minimization Without Derivatives&lt;/b&gt;
 * &lt;it&gt;Richard P. Brent&lt;/it&gt;
 * Dover 0-486-41998-3
 * &lt;/quote&gt;</text>
    <param>lo Lower bound of the search interval.</param>
    <param>hi Higher bound of the search interval.</param>
    <param>fLo Function value at the lower bound of the search interval.</param>
    <param>fHi Function value at the higher bound of the search interval.</param>
    <return>the value where the function is zero.</return>
  </javadoc>
  <method type="double" name="brent">
    <declaration type="double" name="a" />
    <declaration type="double" name="fa" />
    <declaration type="double" name="b" />
    <declaration type="double" name="fb" />
    <declaration type="double" name="c" />
    <declaration type="double" name="fc" />
    <declaration type="double" name="d" />
    <declaration type="double" name="e" />
    <declaration type="double" name="t" />
    <declaration type="double" name="eps" />
    <scope>
      <scope />
      <declaration type="double" name="tol" />
      <declaration type="double" name="m" />
      <scope />
      <scope />
      <scope>
        <declaration type="double" name="s" />
        <declaration type="double" name="p" />
        <declaration type="double" name="q" />
        <scope />
        <scope>
          <declaration type="double" name="r" />
        </scope>
        <scope />
        <scope />
        <scope />
        <scope />
      </scope>
      <scope />
      <scope />
      <scope />
      <scope />
    </scope>
    <comment>Force bisection.</comment>
    <comment>The equality test (a == c) is intentional,</comment>
    <comment>it is part of the original Brent's method and</comment>
    <comment>it should NOT be replaced by proximity test.</comment>
    <comment>Linear interpolation.</comment>
    <comment>Inverse quadratic interpolation.</comment>
    <comment>Inverse quadratic interpolation gives a value</comment>
    <comment>in the wrong direction, or progress is slow.</comment>
    <comment>Fall back to bisection.</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
