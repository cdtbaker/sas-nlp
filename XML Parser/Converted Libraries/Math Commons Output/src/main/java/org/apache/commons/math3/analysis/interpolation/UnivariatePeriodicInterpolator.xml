<?xml version="1.0" encoding="UTF-8"?>
<class name="UnivariatePeriodicInterpolator">
  <javadoc>
    <text>Adapter for classes implementing the {@link UnivariateInterpolator}interface.
 * The data to be interpolated is assumed to be periodic. Thus values that are
 * outside of the range can be passed to the interpolation function: They will
 * be wrapped into the initial range before being passed to the class that
 * actually computes the interpolation.</text>
    <version>$Id: UnivariatePeriodicInterpolator.java 1459739 2013-03-22 11:58:11Z erans $</version>
  </javadoc>
  <javadoc>
    <text>Default number of extension points of the samples array.</text>
  </javadoc>
  <declaration type="int" name="DEFAULT_EXTEND" />
  <javadoc>
    <text>Interpolator.</text>
  </javadoc>
  <declaration type="UnivariateInterpolator" name="interpolator" />
  <javadoc>
    <text>Period.</text>
  </javadoc>
  <declaration type="double" name="period" />
  <javadoc>
    <text>Number of extension points.</text>
  </javadoc>
  <declaration type="int" name="extend" />
  <javadoc>
    <text>Builds an interpolator.</text>
    <param>interpolator Interpolator.</param>
    <param>period Period.</param>
    <param>extend Number of points to be appended at the beginning and
 * end of the sample arrays in order to avoid interpolation failure at
 * the (periodic) boundaries of the orginal interval. The value is the
 * number of sample points which the original {@code interpolator} needs
 * on each side of the interpolated point.</param>
  </javadoc>
  <method type="constructor" name="UnivariatePeriodicInterpolator" />
  <javadoc>
    <text>Builds an interpolator.
 * Uses {@link #DEFAULT_EXTEND} as the number of extension points on each side
 * of the original abscissae range.</text>
    <param>interpolator Interpolator.</param>
    <param>period Period.</param>
  </javadoc>
  <method type="constructor" name="UnivariatePeriodicInterpolator" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <throws>NumberIsTooSmallException if the number of extension points
 * is larger than the size of {@code xval}.</throws>
  </javadoc>
  <method type="UnivariateFunction" name="interpolate">
    <scope />
    <declaration type="double" name="offset" />
    <declaration type="int" name="len" />
    <declaration type="double[]" name="x" />
    <declaration type="double[]" name="y" />
    <scope>
      <declaration type="int" name="index" />
    </scope>
    <scope>
      <declaration type="int" name="index" />
    </scope>
    <declaration type="UnivariateFunction" name="f" />
    <method type="double" name="value" />
    <comment>Wrap to enable interpolation at the boundaries.</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
