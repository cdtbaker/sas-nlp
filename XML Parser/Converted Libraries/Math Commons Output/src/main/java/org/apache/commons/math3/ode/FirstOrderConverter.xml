<?xml version="1.0" encoding="UTF-8"?>
<class name="FirstOrderConverter">
  <javadoc>
    <text>This class converts second order differential equations to first
 * order ones.
 * &lt;p&gt;This class is a wrapper around a {@link SecondOrderDifferentialEquations} which allow to use a {@link FirstOrderIntegrator} to integrate it.&lt;/p&gt;
 * &lt;p&gt;The transformation is done by changing the n dimension state
 * vector to a 2n dimension vector, where the first n components are
 * the initial state variables and the n last components are their
 * first time derivative. The first time derivative of this state
 * vector then really contains both the first and second time
 * derivative of the initial state vector, which can be handled by the
 * underlying second order equations set.&lt;/p&gt;
 * &lt;p&gt;One should be aware that the data is duplicated during the
 * transformation process and that for each call to {@link #computeDerivatives computeDerivatives}, this wrapper does copy 4n
 * scalars : 2n before the call to {@link SecondOrderDifferentialEquations#computeSecondDerivativescomputeSecondDerivatives} in order to dispatch the y state vector
 * into z and zDot, and 2n after the call to gather zDot and zDDot
 * into yDot. Since the underlying problem by itself perhaps also
 * needs to copy data and dispatch the arrays into domain objects,
 * this has an impact on both memory and CPU usage. The only way to
 * avoid this duplication is to perform the transformation at the
 * problem level, i.e. to implement the problem as a first order one
 * and then avoid using this class.&lt;/p&gt;</text>
    <see>FirstOrderIntegrator</see>
    <see>FirstOrderDifferentialEquations</see>
    <see>SecondOrderDifferentialEquations</see>
    <version>$Id: FirstOrderConverter.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>1.2</since>
  </javadoc>
  <javadoc>
    <text>Underlying second order equations set.</text>
  </javadoc>
  <declaration type="SecondOrderDifferentialEquations" name="equations" />
  <javadoc>
    <text>second order problem dimension.</text>
  </javadoc>
  <declaration type="int" name="dimension" />
  <javadoc>
    <text>state vector.</text>
  </javadoc>
  <declaration type="double[]" name="z" />
  <javadoc>
    <text>first time derivative of the state vector.</text>
  </javadoc>
  <declaration type="double[]" name="zDot" />
  <javadoc>
    <text>second time derivative of the state vector.</text>
  </javadoc>
  <declaration type="double[]" name="zDDot" />
  <javadoc>
    <text>Simple constructor.
 * Build a converter around a second order equations set.</text>
    <param>equations second order equations set to convert</param>
  </javadoc>
  <method type="constructor" name="FirstOrderConverter" />
  <javadoc>
    <text>Get the dimension of the problem.
 * &lt;p&gt;The dimension of the first order problem is twice the
 * dimension of the underlying second order problem.&lt;/p&gt;</text>
    <return>dimension of the problem</return>
  </javadoc>
  <method type="int" name="getDimension" />
  <javadoc>
    <text>Get the current time derivative of the state vector.</text>
    <param>t current value of the independent &lt;I&gt;time&lt;/I&gt; variable</param>
    <param>y array containing the current value of the state vector</param>
    <param>yDot placeholder array where to put the time derivative of the state vector</param>
  </javadoc>
  <method type="void" name="computeDerivatives">
    <comment>split the state vector in two</comment>
    <comment>apply the underlying equations set</comment>
    <comment>build the result state derivative</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
