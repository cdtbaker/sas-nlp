<?xml version="1.0" encoding="UTF-8"?>
<class name="MultiDirectionalSimplex">
  <javadoc>
    <text>This class implements the multi-directional direct search method.</text>
    <version>$Id: MultiDirectionalSimplex.java 1422230 2012-12-15 12:11:13Z erans $</version>
    <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Default value for {@link #khi}: {@value}.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_KHI" />
  <javadoc>
    <text>Default value for {@link #gamma}: {@value}.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_GAMMA" />
  <javadoc>
    <text>Expansion coefficient.</text>
  </javadoc>
  <declaration type="double" name="khi" />
  <javadoc>
    <text>Contraction coefficient.</text>
  </javadoc>
  <declaration type="double" name="gamma" />
  <javadoc>
    <text>Build a multi-directional simplex with default coefficients.
 * The default values are 2.0 for khi and 0.5 for gamma.</text>
    <param>n Dimension of the simplex.</param>
  </javadoc>
  <method type="constructor" name="MultiDirectionalSimplex" />
  <javadoc>
    <text>Build a multi-directional simplex with default coefficients.
 * The default values are 2.0 for khi and 0.5 for gamma.</text>
    <param>n Dimension of the simplex.</param>
    <param>sideLength Length of the sides of the default (hypercube)
 * simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.</param>
  </javadoc>
  <method type="constructor" name="MultiDirectionalSimplex" />
  <javadoc>
    <text>Build a multi-directional simplex with specified coefficients.</text>
    <param>n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int,double)}.</param>
    <param>khi Expansion coefficient.</param>
    <param>gamma Contraction coefficient.</param>
  </javadoc>
  <method type="constructor" name="MultiDirectionalSimplex" />
  <javadoc>
    <text>Build a multi-directional simplex with specified coefficients.</text>
    <param>n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int,double)}.</param>
    <param>sideLength Length of the sides of the default (hypercube)
 * simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.</param>
    <param>khi Expansion coefficient.</param>
    <param>gamma Contraction coefficient.</param>
  </javadoc>
  <method type="constructor" name="MultiDirectionalSimplex" />
  <javadoc>
    <text>Build a multi-directional simplex with default coefficients.
 * The default values are 2.0 for khi and 0.5 for gamma.</text>
    <param>steps Steps along the canonical axes representing box edges.
 * They may be negative but not zero. See</param>
  </javadoc>
  <method type="constructor" name="MultiDirectionalSimplex" />
  <javadoc>
    <text>Build a multi-directional simplex with specified coefficients.</text>
    <param>steps Steps along the canonical axes representing box edges.
 * They may be negative but not zero. See{@link AbstractSimplex#AbstractSimplex(double[])}.</param>
    <param>khi Expansion coefficient.</param>
    <param>gamma Contraction coefficient.</param>
  </javadoc>
  <method type="constructor" name="MultiDirectionalSimplex" />
  <javadoc>
    <text>Build a multi-directional simplex with default coefficients.
 * The default values are 2.0 for khi and 0.5 for gamma.</text>
    <param>referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.</param>
  </javadoc>
  <method type="constructor" name="MultiDirectionalSimplex" />
  <javadoc>
    <text>Build a multi-directional simplex with specified coefficients.</text>
    <param>referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.</param>
    <param>khi Expansion coefficient.</param>
    <param>gamma Contraction coefficient.</param>
    <throws>org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif the reference simplex does not contain at least one point.</throws>
    <throws>org.apache.commons.math3.exception.DimensionMismatchExceptionif there is a dimension mismatch in the reference simplex.</throws>
  </javadoc>
  <method type="constructor" name="MultiDirectionalSimplex" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="iterate">
    <declaration type="PointValuePair[]" name="original" />
    <declaration type="PointValuePair" name="best" />
    <declaration type="PointValuePair" name="reflected" />
    <scope>
      <declaration type="PointValuePair[]" name="reflectedSimplex" />
      <declaration type="PointValuePair" name="expanded" />
      <scope />
    </scope>
    <comment>Save the original simplex.</comment>
    <comment>Perform a reflection step.</comment>
    <comment>Compute the expanded simplex.</comment>
    <comment>Keep the reflected simplex.</comment>
    <comment>Keep the expanded simplex.</comment>
    <comment>Compute the contracted simplex.</comment>
  </method>
  <javadoc>
    <text>Compute and evaluate a new simplex.</text>
    <param>evaluationFunction Evaluation function.</param>
    <param>original Original simplex (to be preserved).</param>
    <param>coeff Linear coefficient.</param>
    <param>comparator Comparator to use to sort simplex vertices from best
 * to poorest.</param>
    <return>the best point in the transformed simplex.</return>
    <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.</throws>
  </javadoc>
  <method type="PointValuePair" name="evaluateNewSimplex">
    <declaration type="double[]" name="xSmallest" />
    <declaration type="int" name="dim" />
    <scope>
      <declaration type="double[]" name="xOriginal" />
      <declaration type="double[]" name="xTransformed" />
      <scope />
    </scope>
    <comment>Perform a linear transformation on all the simplex points,</comment>
    <comment>except the first one.</comment>
    <comment>Evaluate the simplex.</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
