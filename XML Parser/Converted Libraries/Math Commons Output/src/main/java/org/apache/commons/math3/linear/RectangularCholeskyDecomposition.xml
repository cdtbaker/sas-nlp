<?xml version="1.0" encoding="UTF-8"?>
<class name="RectangularCholeskyDecomposition">
  <javadoc>
    <text>Calculates the rectangular Cholesky decomposition of a matrix.
 * &lt;p&gt;The rectangular Cholesky decomposition of a real symmetric positive
 * semidefinite matrix A consists of a rectangular matrix B with the same
 * number of rows such that: A is almost equal to BB&lt;sup&gt;T&lt;/sup&gt;, depending
 * on a user-defined tolerance. In a sense, this is the square root of A.&lt;/p&gt;
 * &lt;p&gt;The difference with respect to the regular {@link CholeskyDecomposition}is that rows/columns may be permuted (hence the rectangular shape instead
 * of the traditional triangular shape) and there is a threshold to ignore
 * small diagonal elements. This is used for example to generate {@link org.apache.commons.math3.random.CorrelatedRandomVectorGenerator correlated
 * random n-dimensions vectors} in a p-dimension subspace (p &lt; n).
 * In other words, it allows generating random vectors from a covariance
 * matrix that is only positive semidefinite, and not positive definite.&lt;/p&gt;
 * &lt;p&gt;Rectangular Cholesky decomposition is &lt;em&gt;not&lt;/em&gt; suited for solving
 * linear systems, so it does not provide any {@link DecompositionSolverdecomposition solver}.&lt;/p&gt;</text>
    <see>&lt;a href="http://mathworld.wolfram.com/CholeskyDecomposition.html"&gt;MathWorld&lt;/a&gt;</see>
    <see>&lt;a href="http://en.wikipedia.org/wiki/Cholesky_decomposition"&gt;Wikipedia&lt;/a&gt;</see>
    <version>$Id: RectangularCholeskyDecomposition.java 1422313 2012-12-15 18:53:41Z psteitz $</version>
    <since>2.0 (changed to concrete class in 3.0)</since>
  </javadoc>
  <javadoc>
    <text>Permutated Cholesky root of the symmetric positive semidefinite matrix.</text>
  </javadoc>
  <declaration type="RealMatrix" name="root" />
  <javadoc>
    <text>Rank of the symmetric positive semidefinite matrix.</text>
  </javadoc>
  <declaration type="int" name="rank" />
  <javadoc>
    <text>Decompose a symmetric positive semidefinite matrix.
 * &lt;p&gt;
 * &lt;b&gt;Note:&lt;/b&gt; this constructor follows the linpack method to detect dependent
 * columns by proceeding with the Cholesky algorithm until a nonpositive diagonal
 * element is encountered.</text>
    <see>&lt;a href="http://eprints.ma.man.ac.uk/1193/01/covered/MIMS_ep2008_56.pdf"&gt;
     * Analysis of the Cholesky Decomposition of a Semi-definite Matrix&lt;/a&gt;</see>
    <param>matrix Symmetric positive semidefinite matrix.</param>
    <exception>NonPositiveDefiniteMatrixException if the matrix is not
 * positive semidefinite.</exception>
    <since>3.1</since>
  </javadoc>
  <method type="constructor" name="RectangularCholeskyDecomposition" />
  <javadoc>
    <text>Decompose a symmetric positive semidefinite matrix.</text>
    <param>matrix Symmetric positive semidefinite matrix.</param>
    <param>small Diagonal elements threshold under which columns are
 * considered to be dependent on previous ones and are discarded.</param>
    <exception>NonPositiveDefiniteMatrixException if the matrix is not
 * positive semidefinite.</exception>
  </javadoc>
  <method type="constructor" name="RectangularCholeskyDecomposition">
    <declaration type="int" name="order" />
    <declaration type="double[][]" name="c" />
    <declaration type="double[][]" name="b" />
    <declaration type="int[]" name="index" />
    <scope />
    <declaration type="int" name="r" />
    <scope>
      <declaration type="int" name="swapR" />
      <scope>
        <declaration type="int" name="ii" />
        <declaration type="int" name="isr" />
        <scope />
      </scope>
      <scope>
        <declaration type="int" name="tmpIndex" />
        <declaration type="double[]" name="tmpRow" />
      </scope>
      <declaration type="int" name="ir" />
      <scope>
        <scope />
        <scope>
          <scope />
        </scope>
      </scope>
      <scope>
        <declaration type="double" name="sqrt" />
        <declaration type="double" name="inverse" />
        <declaration type="double" name="inverse2" />
        <scope>
          <declaration type="int" name="ii" />
          <declaration type="double" name="e" />
          <scope>
            <declaration type="int" name="ij" />
            <declaration type="double" name="f" />
          </scope>
        </scope>
      </scope>
    </scope>
    <scope>
      <scope />
    </scope>
    <comment>find maximal diagonal element</comment>
    <comment>swap elements</comment>
    <comment>check diagonal element</comment>
    <comment>check remaining diagonal elements</comment>
    <comment>there is at least one sufficiently negative diagonal element,</comment>
    <comment>the symmetric positive semidefinite matrix is wrong</comment>
    <comment>all remaining diagonal elements are close to zero, we consider we have</comment>
    <comment>found the rank of the symmetric positive semidefinite matrix</comment>
    <comment>transform the matrix</comment>
    <comment>prepare next iteration</comment>
    <comment>build the root matrix</comment>
  </method>
  <javadoc>
    <text>Get the root of the covariance matrix.
 * The root is the rectangular matrix &lt;code&gt;B&lt;/code&gt; such that
 * the covariance matrix is equal to &lt;code&gt;B.B&lt;sup&gt;T&lt;/sup&gt;&lt;/code&gt;</text>
    <return>root of the square matrix</return>
    <see>#getRank()</see>
  </javadoc>
  <method type="RealMatrix" name="getRootMatrix" />
  <javadoc>
    <text>Get the rank of the symmetric positive semidefinite matrix.
 * The r is the number of independent rows in the symmetric positive semidefinite
 * matrix, it is also the number of columns of the rectangular
 * matrix of the decomposition.</text>
    <return>r of the square matrix.</return>
    <see>#getRootMatrix()</see>
  </javadoc>
  <method type="int" name="getRank" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
