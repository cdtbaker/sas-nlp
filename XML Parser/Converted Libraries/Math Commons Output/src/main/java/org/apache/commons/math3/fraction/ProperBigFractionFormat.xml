<?xml version="1.0" encoding="UTF-8"?>
<class name="ProperBigFractionFormat">
  <javadoc>
    <text>Formats a BigFraction number in proper format.  The number format for each of
 * the whole number, numerator and, denominator can be configured.
 * &lt;p&gt;
 * Minus signs are only allowed in the whole number part - i.e.,
 * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
 * will result in a &lt;code&gt;ParseException&lt;/code&gt;.&lt;/p&gt;</text>
    <since>1.1</since>
    <version>$Id: ProperBigFractionFormat.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>The format used for the whole number.</text>
  </javadoc>
  <declaration type="NumberFormat" name="wholeFormat" />
  <javadoc>
    <text>Create a proper formatting instance with the default number format for
 * the whole, numerator, and denominator.</text>
  </javadoc>
  <method type="constructor" name="ProperBigFractionFormat" />
  <javadoc>
    <text>Create a proper formatting instance with a custom number format for the
 * whole, numerator, and denominator.</text>
    <param>format the custom format for the whole, numerator, and
 * denominator.</param>
  </javadoc>
  <method type="constructor" name="ProperBigFractionFormat" />
  <javadoc>
    <text>Create a proper formatting instance with a custom number format for each
 * of the whole, numerator, and denominator.</text>
    <param>wholeFormat the custom format for the whole.</param>
    <param>numeratorFormat the custom format for the numerator.</param>
    <param>denominatorFormat the custom format for the denominator.</param>
  </javadoc>
  <method type="constructor" name="ProperBigFractionFormat" />
  <javadoc>
    <text>Formats a {@link BigFraction} object to produce a string.  The BigFraction
 * is output in proper format.</text>
    <param>fraction the object to format.</param>
    <param>toAppendTo where the text is to be appended</param>
    <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
    <return>the value passed in as toAppendTo.</return>
  </javadoc>
  <method type="StringBuffer" name="format">
    <declaration type="BigInteger" name="num" />
    <declaration type="BigInteger" name="den" />
    <declaration type="BigInteger" name="whole" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Access the whole format.</text>
    <return>the whole format.</return>
  </javadoc>
  <method type="NumberFormat" name="getWholeFormat" />
  <javadoc>
    <text>Parses a string to produce a {@link BigFraction} object.  This method
 * expects the string to be formatted as a proper BigFraction.
 * &lt;p&gt;
 * Minus signs are only allowed in the whole number part - i.e.,
 * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
 * will result in a &lt;code&gt;ParseException&lt;/code&gt;.&lt;/p&gt;</text>
    <param>source the string to parse</param>
    <param>pos input/ouput parsing parameter.</param>
    <return>the parsed {@link BigFraction} object.</return>
  </javadoc>
  <method type="BigFraction" name="parse">
    <declaration type="BigFraction" name="ret" />
    <scope />
    <declaration type="int" name="initialIndex" />
    <declaration type="BigInteger" name="whole" />
    <scope />
    <declaration type="BigInteger" name="num" />
    <scope />
    <scope />
    <declaration type="int" name="startIndex" />
    <declaration type="char" name="c" />
    <declaration type="BigInteger" name="den" />
    <scope />
    <scope />
    <declaration type="boolean" name="wholeIsNeg" />
    <scope />
    <scope />
    <comment>try to parse improper BigFraction</comment>
    <comment>parse whitespace</comment>
    <comment>parse whole</comment>
    <comment>invalid integer number</comment>
    <comment>set index back to initial, error index should already be set</comment>
    <comment>character examined.</comment>
    <comment>parse whitespace</comment>
    <comment>parse numerator</comment>
    <comment>invalid integer number</comment>
    <comment>set index back to initial, error index should already be set</comment>
    <comment>character examined.</comment>
    <comment>minus signs should be leading, invalid expression</comment>
    <comment>parse '/'</comment>
    <comment>no '/'</comment>
    <comment>return num as a BigFraction</comment>
    <comment>found '/', continue parsing denominator</comment>
    <comment>invalid '/'</comment>
    <comment>set index back to initial, error index should be the last</comment>
    <comment>character examined.</comment>
    <comment>parse whitespace</comment>
    <comment>parse denominator</comment>
    <comment>invalid integer number</comment>
    <comment>set index back to initial, error index should already be set</comment>
    <comment>character examined.</comment>
    <comment>minus signs must be leading, invalid</comment>
  </method>
  <javadoc>
    <text>Modify the whole format.</text>
    <param>format The new whole format value.</param>
    <throws>NullArgumentException if {@code format} is {@code null}.</throws>
  </javadoc>
  <method type="void" name="setWholeFormat">
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
