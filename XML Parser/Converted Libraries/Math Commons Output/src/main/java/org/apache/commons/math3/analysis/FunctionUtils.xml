<?xml version="1.0" encoding="UTF-8"?>
<class name="FunctionUtils">
  <javadoc>
    <text>Utilities for manipulating function objects.</text>
    <version>$Id: FunctionUtils.java 1455194 2013-03-11 15:45:54Z luc $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Class only contains static methods.</text>
  </javadoc>
  <method type="constructor" name="FunctionUtils" />
  <javadoc>
    <text>Composes functions.
 * &lt;br/&gt;
 * The functions in the argument list are composed sequentially, in the
 * given order.  For example, compose(f1,f2,f3) acts like f1(f2(f3(x))).</text>
    <param>f List of functions.</param>
    <return>the composite function.</return>
  </javadoc>
  <method type="UnivariateFunction" name="compose">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value">
      <declaration type="double" name="r" />
      <scope />
    </method>
  </method>
  <javadoc>
    <text>Composes functions.
 * &lt;br/&gt;
 * The functions in the argument list are composed sequentially, in the
 * given order.  For example, compose(f1,f2,f3) acts like f1(f2(f3(x))).</text>
    <param>f List of functions.</param>
    <return>the composite function.</return>
    <since>3.1</since>
  </javadoc>
  <method type="UnivariateDifferentiableFunction" name="compose">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value">
      <declaration type="double" name="r" />
      <scope />
    </method>
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="DerivativeStructure" name="value">
      <declaration type="DerivativeStructure" name="r" />
      <scope />
    </method>
  </method>
  <javadoc>
    <text>Composes functions.
 * &lt;br/&gt;
 * The functions in the argument list are composed sequentially, in the
 * given order.  For example, compose(f1,f2,f3) acts like f1(f2(f3(x))).</text>
    <param>f List of functions.</param>
    <return>the composite function.</return>
    <deprecated>as of 3.1 replaced by {@link #compose(UnivariateDifferentiableFunction)}</deprecated>
  </javadoc>
  <method type="DifferentiableUnivariateFunction" name="compose">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value">
      <declaration type="double" name="r" />
      <scope />
    </method>
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="UnivariateFunction" name="derivative">
      <javadoc>
        <text>{@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value">
        <declaration type="double" name="p" />
        <declaration type="double" name="r" />
        <scope />
      </method>
    </method>
  </method>
  <javadoc>
    <text>Adds functions.</text>
    <param>f List of functions.</param>
    <return>a function that computes the sum of the functions.</return>
  </javadoc>
  <method type="UnivariateFunction" name="add">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value">
      <declaration type="double" name="r" />
      <scope />
    </method>
  </method>
  <javadoc>
    <text>Adds functions.</text>
    <param>f List of functions.</param>
    <return>a function that computes the sum of the functions.</return>
    <since>3.1</since>
  </javadoc>
  <method type="UnivariateDifferentiableFunction" name="add">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value">
      <declaration type="double" name="r" />
      <scope />
    </method>
    <javadoc>
      <text>{@inheritDoc}</text>
      <throws>DimensionMismatchException if functions are not consistent with each other</throws>
    </javadoc>
    <method type="DerivativeStructure" name="value">
      <declaration type="DerivativeStructure" name="r" />
      <scope />
    </method>
  </method>
  <javadoc>
    <text>Adds functions.</text>
    <param>f List of functions.</param>
    <return>a function that computes the sum of the functions.</return>
    <deprecated>as of 3.1 replaced by {@link #add(UnivariateDifferentiableFunction)}</deprecated>
  </javadoc>
  <method type="DifferentiableUnivariateFunction" name="add">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value">
      <declaration type="double" name="r" />
      <scope />
    </method>
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="UnivariateFunction" name="derivative">
      <javadoc>
        <text>{@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value">
        <declaration type="double" name="r" />
        <scope />
      </method>
    </method>
  </method>
  <javadoc>
    <text>Multiplies functions.</text>
    <param>f List of functions.</param>
    <return>a function that computes the product of the functions.</return>
  </javadoc>
  <method type="UnivariateFunction" name="multiply">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value">
      <declaration type="double" name="r" />
      <scope />
    </method>
  </method>
  <javadoc>
    <text>Multiplies functions.</text>
    <param>f List of functions.</param>
    <return>a function that computes the product of the functions.</return>
    <since>3.1</since>
  </javadoc>
  <method type="UnivariateDifferentiableFunction" name="multiply">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value">
      <declaration type="double" name="r" />
      <scope />
    </method>
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="DerivativeStructure" name="value">
      <declaration type="DerivativeStructure" name="r" />
      <scope />
    </method>
  </method>
  <javadoc>
    <text>Multiplies functions.</text>
    <param>f List of functions.</param>
    <return>a function that computes the product of the functions.</return>
    <deprecated>as of 3.1 replaced by {@link #multiply(UnivariateDifferentiableFunction)}</deprecated>
  </javadoc>
  <method type="DifferentiableUnivariateFunction" name="multiply">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value">
      <declaration type="double" name="r" />
      <scope />
    </method>
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="UnivariateFunction" name="derivative">
      <javadoc>
        <text>{@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value">
        <declaration type="double" name="sum" />
        <scope>
          <declaration type="double" name="prod" />
          <scope>
            <scope />
          </scope>
        </scope>
      </method>
    </method>
  </method>
  <javadoc>
    <text>Returns the univariate function &lt;br/&gt;{@code h(x) = combiner(f(x), g(x))}.</text>
    <param>combiner Combiner function.</param>
    <param>f Function.</param>
    <param>g Function.</param>
    <return>the composite function.</return>
  </javadoc>
  <method type="UnivariateFunction" name="combine">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value" />
  </method>
  <javadoc>
    <text>Returns a MultivariateFunction h(x[]) defined by &lt;pre&gt; &lt;code&gt;
 * h(x[]) = combiner(...combiner(combiner(initialValue,f(x[0])),f(x[1]))...),f(x[x.length-1]))
 * &lt;/code&gt;&lt;/pre&gt;</text>
    <param>combiner Combiner function.</param>
    <param>f Function.</param>
    <param>initialValue Initial value.</param>
    <return>a collector function.</return>
  </javadoc>
  <method type="MultivariateFunction" name="collector">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value">
      <declaration type="double" name="result" />
      <scope />
    </method>
  </method>
  <javadoc>
    <text>Returns a MultivariateFunction h(x[]) defined by &lt;pre&gt; &lt;code&gt;
 * h(x[]) = combiner(...combiner(combiner(initialValue,x[0]),x[1])...),x[x.length-1])
 * &lt;/code&gt;&lt;/pre&gt;</text>
    <param>combiner Combiner function.</param>
    <param>initialValue Initial value.</param>
    <return>a collector function.</return>
  </javadoc>
  <method type="MultivariateFunction" name="collector" />
  <javadoc>
    <text>Creates a unary function by fixing the first argument of a binary function.</text>
    <param>f Binary function.</param>
    <param>fixed Value to which the first argument of {@code f} is set.</param>
    <return>the unary function h(x) = f(fixed, x)</return>
  </javadoc>
  <method type="UnivariateFunction" name="fix1stArgument">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value" />
  </method>
  <javadoc>
    <text>Creates a unary function by fixing the second argument of a binary function.</text>
    <param>f Binary function.</param>
    <param>fixed Value to which the second argument of {@code f} is set.</param>
    <return>the unary function h(x) = f(x, fixed)</return>
  </javadoc>
  <method type="UnivariateFunction" name="fix2ndArgument">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value" />
  </method>
  <javadoc>
    <text>Samples the specified univariate real function on the specified interval.
 * &lt;br/&gt;
 * The interval is divided equally into {@code n} sections and sample points
 * are taken from {@code min} to {@code max - (max - min) / n}; therefore{@code f} is not sampled at the upper bound {@code max}.</text>
    <param>f Function to be sampled</param>
    <param>min Lower bound of the interval (included).</param>
    <param>max Upper bound of the interval (excluded).</param>
    <param>n Number of sample points.</param>
    <return>the array of samples.</return>
    <throws>NumberIsTooLargeException if the lower bound {@code min} is
 * greater than, or equal to the upper bound {@code max}.</throws>
    <throws>NotStrictlyPositiveException if the number of sample points{@code n} is negative.</throws>
  </javadoc>
  <method type="double[]" name="sample">
    <scope />
    <scope />
    <declaration type="double[]" name="s" />
    <declaration type="double" name="h" />
    <scope />
  </method>
  <javadoc>
    <text>Convert a {@link UnivariateDifferentiableFunction} into a {@link DifferentiableUnivariateFunction}.</text>
    <param>f function to convert</param>
    <return>converted function</return>
    <deprecated>this conversion method is temporary in version 3.1, as the {@link DifferentiableUnivariateFunction} interface itself is deprecated</deprecated>
  </javadoc>
  <method type="DifferentiableUnivariateFunction" name="toDifferentiableUnivariateFunction">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="UnivariateFunction" name="derivative">
      <javadoc>
        <text>{@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" />
    </method>
  </method>
  <javadoc>
    <text>Convert a {@link DifferentiableUnivariateFunction} into a {@link UnivariateDifferentiableFunction}.
 * &lt;p&gt;
 * Note that the converted function is able to handle {@link DerivativeStructure} up to order one.
 * If the function is called with higher order, a {@link NumberIsTooLargeException} will be thrown.
 * &lt;/p&gt;</text>
    <param>f function to convert</param>
    <return>converted function</return>
    <deprecated>this conversion method is temporary in version 3.1, as the {@link DifferentiableUnivariateFunction} interface itself is deprecated</deprecated>
  </javadoc>
  <method type="UnivariateDifferentiableFunction" name="toUnivariateDifferential">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value" />
    <javadoc>
      <text>{@inheritDoc}</text>
      <exception>NumberIsTooLargeException if derivation order is greater than 1</exception>
    </javadoc>
    <method type="DerivativeStructure" name="value">
      <scope>
        <declaration type="int" name="parameters" />
        <declaration type="double[]" name="derivatives" />
        <declaration type="double" name="fPrime" />
        <declaration type="int[]" name="orders" />
        <scope />
      </scope>
    </method>
  </method>
  <javadoc>
    <text>Convert a {@link MultivariateDifferentiableFunction} into a {@link DifferentiableMultivariateFunction}.</text>
    <param>f function to convert</param>
    <return>converted function</return>
    <deprecated>this conversion method is temporary in version 3.1, as the {@link DifferentiableMultivariateFunction} interface itself is deprecated</deprecated>
  </javadoc>
  <method type="DifferentiableMultivariateFunction" name="toDifferentiableMultivariateFunction">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="MultivariateFunction" name="partialDerivative">
      <javadoc>
        <text>{@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value">
        <declaration type="int" name="n" />
        <declaration type="DerivativeStructure[]" name="dsX" />
        <scope>
          <scope />
          <scope />
        </scope>
        <declaration type="DerivativeStructure" name="y" />
      </method>
    </method>
    <method type="MultivariateVectorFunction" name="gradient">
      <javadoc>
        <text>{@inheritDoc}</text>
      </javadoc>
      <method type="double[]" name="value">
        <declaration type="int" name="n" />
        <declaration type="DerivativeStructure[]" name="dsX" />
        <scope />
        <declaration type="DerivativeStructure" name="y" />
        <declaration type="double[]" name="gradient" />
        <declaration type="int[]" name="orders" />
        <scope />
      </method>
    </method>
    <comment>delegate computation to underlying function</comment>
    <comment>extract partial derivative</comment>
    <comment>delegate computation to underlying function</comment>
    <comment>extract gradient</comment>
  </method>
  <javadoc>
    <text>Convert a {@link DifferentiableMultivariateFunction} into a {@link MultivariateDifferentiableFunction}.
 * &lt;p&gt;
 * Note that the converted function is able to handle {@link DerivativeStructure} elements
 * that all have the same number of free parameters and order, and with order at most 1.
 * If the function is called with inconsistent numbers of free parameters or higher order, a{@link DimensionMismatchException} or a {@link NumberIsTooLargeException} will be thrown.
 * &lt;/p&gt;</text>
    <param>f function to convert</param>
    <return>converted function</return>
    <deprecated>this conversion method is temporary in version 3.1, as the {@link DifferentiableMultivariateFunction} interface itself is deprecated</deprecated>
  </javadoc>
  <method type="MultivariateDifferentiableFunction" name="toMultivariateDifferentiableFunction">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value" />
    <javadoc>
      <text>{@inheritDoc}</text>
      <exception>NumberIsTooLargeException if derivation order is higher than 1</exception>
      <exception>DimensionMismatchException if numbers of free parameters are inconsistent</exception>
    </javadoc>
    <method type="DerivativeStructure" name="value">
      <declaration type="int" name="parameters" />
      <declaration type="int" name="order" />
      <declaration type="int" name="n" />
      <scope />
      <scope>
        <scope />
        <scope />
      </scope>
      <declaration type="double[]" name="point" />
      <scope />
      <declaration type="double" name="value" />
      <declaration type="double[]" name="gradient" />
      <declaration type="double[]" name="derivatives" />
      <declaration type="int[]" name="orders" />
      <scope>
        <scope />
      </scope>
    </method>
    <comment>check parameters and orders limits</comment>
    <comment>check all elements in the array are consistent</comment>
    <comment>delegate computation to underlying function</comment>
    <comment>merge value and gradient into one DerivativeStructure</comment>
  </method>
  <javadoc>
    <text>Convert a {@link MultivariateDifferentiableVectorFunction} into a {@link DifferentiableMultivariateVectorFunction}.</text>
    <param>f function to convert</param>
    <return>converted function</return>
    <deprecated>this conversion method is temporary in version 3.1, as the {@link DifferentiableMultivariateVectorFunction} interface itself is deprecated</deprecated>
  </javadoc>
  <method type="DifferentiableMultivariateVectorFunction" name="toDifferentiableMultivariateVectorFunction">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double[]" name="value" />
    <method type="MultivariateMatrixFunction" name="jacobian">
      <javadoc>
        <text>{@inheritDoc}</text>
      </javadoc>
      <method type="double[][]" name="value">
        <declaration type="int" name="n" />
        <declaration type="DerivativeStructure[]" name="dsX" />
        <scope />
        <declaration type="DerivativeStructure[]" name="y" />
        <declaration type="double[][]" name="jacobian" />
        <declaration type="int[]" name="orders" />
        <scope>
          <scope />
        </scope>
      </method>
    </method>
    <comment>delegate computation to underlying function</comment>
    <comment>extract Jacobian</comment>
  </method>
  <javadoc>
    <text>Convert a {@link DifferentiableMultivariateVectorFunction} into a {@link MultivariateDifferentiableVectorFunction}.
 * &lt;p&gt;
 * Note that the converted function is able to handle {@link DerivativeStructure} elements
 * that all have the same number of free parameters and order, and with order at most 1.
 * If the function is called with inconsistent numbers of free parameters or higher order, a{@link DimensionMismatchException} or a {@link NumberIsTooLargeException} will be thrown.
 * &lt;/p&gt;</text>
    <param>f function to convert</param>
    <return>converted function</return>
    <deprecated>this conversion method is temporary in version 3.1, as the {@link DifferentiableMultivariateFunction} interface itself is deprecated</deprecated>
  </javadoc>
  <method type="MultivariateDifferentiableVectorFunction" name="toMultivariateDifferentiableVectorFunction">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double[]" name="value" />
    <javadoc>
      <text>{@inheritDoc}</text>
      <exception>NumberIsTooLargeException if derivation order is higher than 1</exception>
      <exception>DimensionMismatchException if numbers of free parameters are inconsistent</exception>
    </javadoc>
    <method type="DerivativeStructure[]" name="value">
      <declaration type="int" name="parameters" />
      <declaration type="int" name="order" />
      <declaration type="int" name="n" />
      <scope />
      <scope>
        <scope />
        <scope />
      </scope>
      <declaration type="double[]" name="point" />
      <scope />
      <declaration type="double[]" name="value" />
      <declaration type="double[][]" name="jacobian" />
      <declaration type="DerivativeStructure[]" name="merged" />
      <scope>
        <declaration type="double[]" name="derivatives" />
        <declaration type="int[]" name="orders" />
        <scope>
          <scope />
        </scope>
      </scope>
    </method>
    <comment>check parameters and orders limits</comment>
    <comment>check all elements in the array are consistent</comment>
    <comment>delegate computation to underlying function</comment>
    <comment>merge value and Jacobian into a DerivativeStructure array</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
