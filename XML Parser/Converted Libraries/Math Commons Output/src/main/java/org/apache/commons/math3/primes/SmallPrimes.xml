<?xml version="1.0" encoding="UTF-8"?>
<class name="SmallPrimes">
  <javadoc>
    <text>Utility methods to work on primes within the &lt;code&gt;int&lt;/code&gt; range.</text>
    <version>$Id: SmallPrimes.java 1462702 2013-03-30 04:45:52Z psteitz $</version>
    <since>3.2</since>
  </javadoc>
  <javadoc>
    <text>The first 512 prime numbers.
 * &lt;p&gt;
 * It contains all primes smaller or equal to the cubic square of Integer.MAX_VALUE.
 * As a result, &lt;code&gt;int&lt;/code&gt; numbers which are not reduced by those primes are guaranteed
 * to be either prime or semi prime.</text>
  </javadoc>
  <declaration type="int[]" name="PRIMES" />
  <javadoc>
    <text>The last number in PRIMES.</text>
  </javadoc>
  <declaration type="int" name="PRIMES_LAST" />
  <javadoc>
    <text>Hide utility class.</text>
  </javadoc>
  <method type="constructor" name="SmallPrimes" />
  <javadoc>
    <text>Extract small factors.</text>
    <param>n the number to factor, must be &amp;gt; 0.</param>
    <param>factors the list where to add the factors.</param>
    <return>the part of n which remains to be factored, it is either a prime or a semi-prime</return>
  </javadoc>
  <method type="int" name="smallTrialDivision">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Extract factors in the range &lt;code&gt;PRIME_LAST+2&lt;/code&gt; to &lt;code&gt;maxFactors&lt;/code&gt;.</text>
    <param>n the number to factorize, must be &gt;= PRIME_LAST+2 and must not contain any factor below PRIME_LAST+2</param>
    <param>maxFactor the upper bound of trial division: if it is reached, the method gives up and returns n.</param>
    <param>factors the list where to add the factors.</param>
    <return>n or 1 if factorization is completed.</return>
  </javadoc>
  <method type="int" name="boundedTrialDivision">
    <declaration type="int" name="f" />
    <scope>
      <scope />
      <scope />
    </scope>
    <scope />
    <comment>no check is done about n &gt;= f</comment>
  </method>
  <javadoc>
    <text>Factorization by trial division.</text>
    <param>n the number to factor</param>
    <return>the list of prime factors of n</return>
  </javadoc>
  <method type="List&lt;Integer&gt;" name="trialDivision">
    <declaration type="List&lt;Integer&gt;" name="factors" />
    <scope />
    <declaration type="int" name="bound" />
    <comment>here we are sure that n is either a prime or a semi prime</comment>
  </method>
  <javadoc>
    <text>Miller-Rabin probabilistic primality test for int type, used in such a way that a result is always guaranteed.
 * &lt;p&gt;
 * It uses the prime numbers as successive base therefore it is guaranteed to be always correct.
 * (see Handbook of applied cryptography by Menezes, table 4.1)</text>
    <param>n number to test: an odd integer &amp;ge; 3</param>
    <return>true if n is prime. false if n is definitely composite.</return>
  </javadoc>
  <method type="boolean" name="millerRabinPrimeTest">
    <declaration type="int" name="nMinus1" />
    <declaration type="int" name="s" />
    <declaration type="int" name="r" />
    <declaration type="int" name="t" />
    <scope />
    <scope />
    <scope />
    <declaration type="BigInteger" name="br" />
    <declaration type="BigInteger" name="bn" />
    <scope>
      <declaration type="BigInteger" name="a" />
      <declaration type="BigInteger" name="bPow" />
      <declaration type="int" name="y" />
      <scope>
        <declaration type="int" name="j" />
        <scope>
          <declaration type="long" name="square" />
          <scope />
        </scope>
        <scope />
      </scope>
    </scope>
    <comment>r must be odd, it is not checked here</comment>
    <comment>works up to 3.2 billion, int range stops at 2.7 so we are safe :-)</comment>
    <comment>definitely composite</comment>
    <comment>definitely composite</comment>
    <comment>definitely prime</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
