<?xml version="1.0" encoding="UTF-8"?>
<class name="PearsonsCorrelation">
  <javadoc>
    <text>Computes Pearson's product-moment correlation coefficients for pairs of arrays
 * or columns of a matrix.
 * &lt;p&gt;The constructors that take &lt;code&gt;RealMatrix&lt;/code&gt; or
 * &lt;code&gt;double[][]&lt;/code&gt; arguments generate correlation matrices.  The
 * columns of the input matrices are assumed to represent variable values.
 * Correlations are given by the formula&lt;/p&gt;
 * &lt;code&gt;cor(X, Y) = &amp;Sigma;[(x&lt;sub&gt;i&lt;/sub&gt; - E(X))(y&lt;sub&gt;i&lt;/sub&gt; - E(Y))] / [(n - 1)s(X)s(Y)]&lt;/code&gt;
 * where &lt;code&gt;E(X)&lt;/code&gt; is the mean of &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;E(Y)&lt;/code&gt;
 * is the mean of the &lt;code&gt;Y&lt;/code&gt; values and s(X), s(Y) are standard deviations.</text>
    <version>$Id: PearsonsCorrelation.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>correlation matrix</text>
  </javadoc>
  <declaration type="RealMatrix" name="correlationMatrix" />
  <javadoc>
    <text>number of observations</text>
  </javadoc>
  <declaration type="int" name="nObs" />
  <javadoc>
    <text>Create a PearsonsCorrelation instance without data</text>
  </javadoc>
  <method type="constructor" name="PearsonsCorrelation" />
  <javadoc>
    <text>Create a PearsonsCorrelation from a rectangular array
 * whose columns represent values of variables to be correlated.</text>
    <param>data rectangular array with columns representing variables</param>
    <throws>IllegalArgumentException if the input data array is not
 * rectangular with at least two rows and two columns.</throws>
  </javadoc>
  <method type="constructor" name="PearsonsCorrelation" />
  <javadoc>
    <text>Create a PearsonsCorrelation from a RealMatrix whose columns
 * represent variables to be correlated.</text>
    <param>matrix matrix with columns representing variables to correlate</param>
  </javadoc>
  <method type="constructor" name="PearsonsCorrelation" />
  <javadoc>
    <text>Create a PearsonsCorrelation from a {@link Covariance}.  The correlation
 * matrix is computed by scaling the Covariance's covariance matrix.
 * The Covariance instance must have been created from a data matrix with
 * columns representing variable values.</text>
    <param>covariance Covariance instance</param>
  </javadoc>
  <method type="constructor" name="PearsonsCorrelation">
    <declaration type="RealMatrix" name="covarianceMatrix" />
    <scope />
  </method>
  <javadoc>
    <text>Create a PearsonsCorrelation from a covariance matrix.  The correlation
 * matrix is computed by scaling the covariance matrix.</text>
    <param>covarianceMatrix covariance matrix</param>
    <param>numberOfObservations the number of observations in the dataset used to compute
 * the covariance matrix</param>
  </javadoc>
  <method type="constructor" name="PearsonsCorrelation" />
  <javadoc>
    <text>Returns the correlation matrix</text>
    <return>correlation matrix</return>
  </javadoc>
  <method type="RealMatrix" name="getCorrelationMatrix" />
  <javadoc>
    <text>Returns a matrix of standard errors associated with the estimates
 * in the correlation matrix.&lt;br/&gt;
 * &lt;code&gt;getCorrelationStandardErrors().getEntry(i,j)&lt;/code&gt; is the standard
 * error associated with &lt;code&gt;getCorrelationMatrix.getEntry(i,j)&lt;/code&gt;
 * &lt;p&gt;The formula used to compute the standard error is &lt;br/&gt;
 * &lt;code&gt;SE&lt;sub&gt;r&lt;/sub&gt; = ((1 - r&lt;sup&gt;2&lt;/sup&gt;) / (n - 2))&lt;sup&gt;1/2&lt;/sup&gt;&lt;/code&gt;
 * where &lt;code&gt;r&lt;/code&gt; is the estimated correlation coefficient and
 * &lt;code&gt;n&lt;/code&gt; is the number of observations in the source dataset.&lt;/p&gt;</text>
    <return>matrix of correlation standard errors</return>
  </javadoc>
  <method type="RealMatrix" name="getCorrelationStandardErrors">
    <declaration type="int" name="nVars" />
    <declaration type="double[][]" name="out" />
    <scope>
      <scope>
        <declaration type="double" name="r" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Returns a matrix of p-values associated with the (two-sided) null
 * hypothesis that the corresponding correlation coefficient is zero.
 * &lt;p&gt;&lt;code&gt;getCorrelationPValues().getEntry(i,j)&lt;/code&gt; is the probability
 * that a random variable distributed as &lt;code&gt;t&lt;sub&gt;n-2&lt;/sub&gt;&lt;/code&gt; takes
 * a value with absolute value greater than or equal to &lt;br&gt;
 * &lt;code&gt;|r|((n - 2) / (1 - r&lt;sup&gt;2&lt;/sup&gt;))&lt;sup&gt;1/2&lt;/sup&gt;&lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;The values in the matrix are sometimes referred to as the
 * &lt;i&gt;significance&lt;/i&gt; of the corresponding correlation coefficients.&lt;/p&gt;</text>
    <return>matrix of p-values</return>
    <throws>org.apache.commons.math3.exception.MaxCountExceededExceptionif an error occurs estimating probabilities</throws>
  </javadoc>
  <method type="RealMatrix" name="getCorrelationPValues">
    <declaration type="TDistribution" name="tDistribution" />
    <declaration type="int" name="nVars" />
    <declaration type="double[][]" name="out" />
    <scope>
      <scope>
        <scope />
        <scope>
          <declaration type="double" name="r" />
          <declaration type="double" name="t" />
        </scope>
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Computes the correlation matrix for the columns of the
 * input matrix.</text>
    <param>matrix matrix with columns representing variables to correlate</param>
    <return>correlation matrix</return>
  </javadoc>
  <method type="RealMatrix" name="computeCorrelationMatrix">
    <declaration type="int" name="nVars" />
    <declaration type="RealMatrix" name="outMatrix" />
    <scope>
      <scope>
        <declaration type="double" name="corr" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Computes the correlation matrix for the columns of the
 * input rectangular array.  The colums of the array represent values
 * of variables to be correlated.</text>
    <param>data matrix with columns representing variables to correlate</param>
    <return>correlation matrix</return>
  </javadoc>
  <method type="RealMatrix" name="computeCorrelationMatrix" />
  <javadoc>
    <text>Computes the Pearson's product-moment correlation coefficient between the two arrays.
 * &lt;/p&gt;Throws IllegalArgumentException if the arrays do not have the same length
 * or their common length is less than 2&lt;/p&gt;</text>
    <param>xArray first data array</param>
    <param>yArray second data array</param>
    <return>Returns Pearson's correlation coefficient for the two arrays</return>
    <throws>DimensionMismatchException if the arrays lengths do not match</throws>
    <throws>MathIllegalArgumentException if there is insufficient data</throws>
  </javadoc>
  <method type="double" name="correlation">
    <declaration type="SimpleRegression" name="regression" />
    <scope />
    <scope />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Derives a correlation matrix from a covariance matrix.
 * &lt;p&gt;Uses the formula &lt;br/&gt;
 * &lt;code&gt;r(X,Y) = cov(X,Y)/s(X)s(Y)&lt;/code&gt; where
 * &lt;code&gt;r(&amp;middot,&amp;middot;)&lt;/code&gt; is the correlation coefficient and
 * &lt;code&gt;s(&amp;middot;)&lt;/code&gt; means standard deviation.&lt;/p&gt;</text>
    <param>covarianceMatrix the covariance matrix</param>
    <return>correlation matrix</return>
  </javadoc>
  <method type="RealMatrix" name="covarianceToCorrelation">
    <declaration type="int" name="nVars" />
    <declaration type="RealMatrix" name="outMatrix" />
    <scope>
      <declaration type="double" name="sigma" />
      <scope>
        <declaration type="double" name="entry" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Throws IllegalArgumentException of the matrix does not have at least
 * two columns and two rows</text>
    <param>matrix matrix to check for sufficiency</param>
    <throws>MathIllegalArgumentException if there is insufficient data</throws>
  </javadoc>
  <method type="void" name="checkSufficientData">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
