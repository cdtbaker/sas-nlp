<?xml version="1.0" encoding="UTF-8"?>
<class name="MultivariateNormalMixtureExpectationMaximization">
  <javadoc>
    <text>Expectation-Maximization&lt;/a&gt; algorithm for fitting the parameters of
 * multivariate normal mixture model distributions.
 * This implementation is pure original code based on &lt;a
 * href="https://www.ee.washington.edu/techsite/papers/documents/UWEETR-2010-0002.pdf"&gt;
 * EM Demystified: An Expectation-Maximization Tutorial&lt;/a&gt; by Yihua Chen and Maya R. Gupta,
 * Department of Electrical Engineering, University of Washington, Seattle, WA 98195.
 * It was verified using external tools like &lt;a
 * href="http://cran.r-project.org/web/packages/mixtools/index.html"&gt;CRAN Mixtools&lt;/a&gt;
 * (see the JUnit test cases) but it is &lt;strong&gt;not&lt;/strong&gt; based on Mixtools code at all.
 * The discussion of the origin of this class can be seen in the comments of the &lt;a
 * href="https://issues.apache.org/jira/browse/MATH-817"&gt;MATH-817&lt;/a&gt; JIRA issue.</text>
    <version>$Id: MultivariateNormalMixtureExpectationMaximization.java 1462508 2013-03-29 15:50:47Z luc $</version>
    <since>3.2</since>
  </javadoc>
  <javadoc>
    <text>Default maximum number of iterations allowed per fitting process.</text>
  </javadoc>
  <declaration type="int" name="DEFAULT_MAX_ITERATIONS" />
  <javadoc>
    <text>Default convergence threshold for fitting.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_THRESHOLD" />
  <javadoc>
    <text>The data to fit.</text>
  </javadoc>
  <declaration type="double[][]" name="data" />
  <javadoc>
    <text>The model fit against the data.</text>
  </javadoc>
  <declaration type="MixtureMultivariateNormalDistribution" name="fittedModel" />
  <javadoc>
    <text>The log likelihood of the data given the fitted model.</text>
  </javadoc>
  <declaration type="double" name="logLikelihood" />
  <javadoc>
    <text>Creates an object to fit a multivariate normal mixture model to data.</text>
    <param>data Data to use in fitting procedure</param>
    <throws>NotStrictlyPositiveException if data has no rows</throws>
    <throws>DimensionMismatchException if rows of data have different numbers
 * of columns</throws>
    <throws>NumberIsTooSmallException if the number of columns in the data is
 * less than 2</throws>
  </javadoc>
  <method type="constructor" name="MultivariateNormalMixtureExpectationMaximization">
    <scope />
    <scope>
      <scope />
      <scope />
    </scope>
    <comment>Jagged arrays not allowed</comment>
  </method>
  <javadoc>
    <text>Fit a mixture model to the data supplied to the constructor.
 * The quality of the fit depends on the concavity of the data provided to
 * the constructor and the initial mixture provided to this function. If the
 * data has many local optima, multiple runs of the fitting function with
 * different initial mixtures may be required to find the optimal solution.
 * If a SingularMatrixException is encountered, it is possible that another
 * initialization would work.</text>
    <param>initialMixture Model containing initial values of weights and
 * multivariate normals</param>
    <param>maxIterations Maximum iterations allowed for fit</param>
    <param>threshold Convergence threshold computed as difference in
 * logLikelihoods between successive iterations</param>
    <throws>SingularMatrixException if any component's covariance matrix is
 * singular during fitting</throws>
    <throws>NotStrictlyPositiveException if numComponents is less than one
 * or threshold is less than Double.MIN_VALUE</throws>
    <throws>DimensionMismatchException if initialMixture mean vector and data
 * number of columns are not equal</throws>
  </javadoc>
  <method type="void" name="fit">
    <scope />
    <scope />
    <declaration type="int" name="n" />
    <declaration type="int" name="numCols" />
    <declaration type="int" name="k" />
    <declaration type="int" name="numMeanColumns" />
    <scope />
    <declaration type="int" name="numIterations" />
    <declaration type="double" name="previousLogLikelihood" />
    <scope>
      <declaration type="double" name="sumLogLikelihood" />
      <declaration type="List&lt;Pair&lt;Double,MultivariateNormalDistribution&gt;&gt;" name="components" />
      <declaration type="double[]" name="weights" />
      <declaration type="MultivariateNormalDistribution[]" name="mvns" />
      <scope />
      <declaration type="double[][]" name="gamma" />
      <declaration type="double[]" name="gammaSums" />
      <declaration type="double[][]" name="gammaDataProdSums" />
      <scope>
        <declaration type="double" name="rowDensity" />
        <scope>
          <scope />
        </scope>
      </scope>
      <declaration type="double[]" name="newWeights" />
      <declaration type="double[][]" name="newMeans" />
      <scope>
        <scope />
      </scope>
      <declaration type="RealMatrix[]" name="newCovMats" />
      <scope />
      <scope>
        <scope>
          <declaration type="RealMatrix" name="vec" />
          <declaration type="RealMatrix" name="dataCov" />
        </scope>
      </scope>
      <declaration type="double[][][]" name="newCovMatArrays" />
      <scope />
    </scope>
    <scope />
    <comment>Number of data columns. Jagged data already rejected in constructor,</comment>
    <comment>so we can assume the lengths of each row are equal.</comment>
    <comment>Initialize model to fit to initial mixture.</comment>
    <comment>Mixture components</comment>
    <comment>Weight and distribution of each component</comment>
    <comment>E-step: compute the data dependent parameters of the expectation</comment>
    <comment>function.</comment>
    <comment>The percentage of row's total density between a row and a</comment>
    <comment>component</comment>
    <comment>Sum of gamma for each component</comment>
    <comment>Sum of gamma times its row for each each component</comment>
    <comment>M-step: compute the new parameters based on the expectation</comment>
    <comment>function.</comment>
    <comment>Compute new covariance matrices</comment>
    <comment>Converting to arrays for use by fitted model</comment>
    <comment>Update current model</comment>
    <comment>Did not converge before the maximum number of iterations</comment>
  </method>
  <javadoc>
    <text>Fit a mixture model to the data supplied to the constructor.
 * The quality of the fit depends on the concavity of the data provided to
 * the constructor and the initial mixture provided to this function. If the
 * data has many local optima, multiple runs of the fitting function with
 * different initial mixtures may be required to find the optimal solution.
 * If a SingularMatrixException is encountered, it is possible that another
 * initialization would work.</text>
    <param>initialMixture Model containing initial values of weights and
 * multivariate normals</param>
    <throws>SingularMatrixException if any component's covariance matrix is
 * singular during fitting</throws>
    <throws>NotStrictlyPositiveException if numComponents is less than one or
 * threshold is less than Double.MIN_VALUE</throws>
  </javadoc>
  <method type="void" name="fit" />
  <javadoc>
    <text>Helper method to create a multivariate normal mixture model which can be
 * used to initialize {@link #fit(MixtureMultivariateNormalDistribution)}.
 * This method uses the data supplied to the constructor to try to determine
 * a good mixture model at which to start the fit, but it is not guaranteed
 * to supply a model which will find the optimal solution or even converge.</text>
    <param>data Data to estimate distribution</param>
    <param>numComponents Number of components for estimated mixture</param>
    <return>Multivariate normal mixture model estimated from the data</return>
    <throws>NumberIsTooLargeException if {@code numComponents} is greater
 * than the number of data rows.</throws>
    <throws>NumberIsTooSmallException if {@code numComponents &lt; 2}.</throws>
    <throws>NotStrictlyPositiveException if data has less than 2 rows</throws>
    <throws>DimensionMismatchException if rows of data have different numbers
 * of columns</throws>
  </javadoc>
  <method type="MixtureMultivariateNormalDistribution" name="estimate">
    <scope />
    <scope />
    <scope />
    <declaration type="int" name="numRows" />
    <declaration type="int" name="numCols" />
    <declaration type="DataRow[]" name="sortedData" />
    <scope />
    <declaration type="double" name="weight" />
    <declaration type="List&lt;Pair&lt;Double,MultivariateNormalDistribution&gt;&gt;" name="components" />
    <scope>
      <declaration type="int" name="minIndex" />
      <declaration type="int" name="maxIndex" />
      <declaration type="int" name="numBinRows" />
      <declaration type="double[][]" name="binData" />
      <declaration type="double[]" name="columnMeans" />
      <scope>
        <scope>
          <declaration type="double" name="val" />
        </scope>
      </scope>
      <declaration type="double[][]" name="covMat" />
      <declaration type="MultivariateNormalDistribution" name="mvn" />
    </scope>
    <comment>sort the data</comment>
    <comment>uniform weight for each bin</comment>
    <comment>components of mixture model to be created</comment>
    <comment>create a component based on data in each bin</comment>
    <comment>minimum index (inclusive) from sorted data for this bin</comment>
    <comment>maximum index (exclusive) from sorted data for this bin</comment>
    <comment>number of data records that will be in this bin</comment>
    <comment>data for this bin</comment>
    <comment>mean of each column for the data in the this bin</comment>
    <comment>populate bin and create component</comment>
    <comment>covariance matrix for this bin</comment>
  </method>
  <javadoc>
    <text>Gets the log likelihood of the data under the fitted model.</text>
    <return>Log likelihood of data or zero of no data has been fit</return>
  </javadoc>
  <method type="double" name="getLogLikelihood" />
  <javadoc>
    <text>Gets the fitted model.</text>
    <return>fitted model or {@code null} if no fit has been performed yet.</return>
  </javadoc>
  <method type="MixtureMultivariateNormalDistribution" name="getFittedModel" />
  <javadoc>
    <text>Class used for sorting user-supplied data.</text>
  </javadoc>
  <javadoc>
    <text>One data row.</text>
  </javadoc>
  <declaration type="double[]" name="row" />
  <javadoc>
    <text>Mean of the data row.</text>
  </javadoc>
  <declaration type="Double" name="mean" />
  <javadoc>
    <text>Create a data row.</text>
    <param>data Data to use for the row</param>
  </javadoc>
  <method type="constructor" name="DataRow">
    <scope />
    <comment>Store reference.</comment>
    <comment>Compute mean.</comment>
  </method>
  <javadoc>
    <text>Compare two data rows.</text>
    <param>other The other row</param>
    <return>int for sorting</return>
  </javadoc>
  <method type="int" name="compareTo" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="hashCode" />
  <javadoc>
    <text>Get a data row.</text>
    <return>data row array</return>
  </javadoc>
  <method type="double[]" name="getRow" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
