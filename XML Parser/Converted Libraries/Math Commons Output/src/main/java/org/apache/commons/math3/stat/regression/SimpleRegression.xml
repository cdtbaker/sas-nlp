<?xml version="1.0" encoding="UTF-8"?>
<class name="SimpleRegression">
  <javadoc>
    <text>Estimates an ordinary least squares regression model
 * with one independent variable.
 * &lt;p&gt;
 * &lt;code&gt; y = intercept + slope * x  &lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;
 * Standard errors for &lt;code&gt;intercept&lt;/code&gt; and &lt;code&gt;slope&lt;/code&gt; are
 * available as well as ANOVA, r-square and Pearson's r statistics.&lt;/p&gt;
 * &lt;p&gt;
 * Observations (x,y pairs) can be added to the model one at a time or they
 * can be provided in a 2-dimensional array.  The observations are not stored
 * in memory, so there is no limit to the number of observations that can be
 * added to the model.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Usage Notes&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt; When there are fewer than two observations in the model, or when
 * there is no variation in the x values (i.e. all x values are the same)
 * all statistics return &lt;code&gt;NaN&lt;/code&gt;. At least two observations with
 * different x coordinates are required to estimate a bivariate regression
 * model.
 * &lt;/li&gt;
 * &lt;li&gt; Getters for the statistics always compute values based on the current
 * set of observations -- i.e., you can get statistics, then add more data
 * and get updated statistics without using a new instance.  There is no
 * "compute" method that updates all statistics.  Each of the getters performs
 * the necessary computations to return the requested statistic.
 * &lt;/li&gt;
 * &lt;li&gt; The intercept term may be suppressed by passing {@code false} to
 * the {@link #SimpleRegression(boolean)} constructor.  When the{@code hasIntercept} property is false, the model is estimated without a
 * constant term and {@link #getIntercept()} returns {@code 0}.&lt;/li&gt;
 * &lt;/ul&gt;&lt;/p&gt;</text>
    <version>$Id: SimpleRegression.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>sum of x values</text>
  </javadoc>
  <declaration type="double" name="sumX" />
  <javadoc>
    <text>total variation in x (sum of squared deviations from xbar)</text>
  </javadoc>
  <declaration type="double" name="sumXX" />
  <javadoc>
    <text>sum of y values</text>
  </javadoc>
  <declaration type="double" name="sumY" />
  <javadoc>
    <text>total variation in y (sum of squared deviations from ybar)</text>
  </javadoc>
  <declaration type="double" name="sumYY" />
  <javadoc>
    <text>sum of products</text>
  </javadoc>
  <declaration type="double" name="sumXY" />
  <javadoc>
    <text>number of observations</text>
  </javadoc>
  <declaration type="long" name="n" />
  <javadoc>
    <text>mean of accumulated x values, used in updating formulas</text>
  </javadoc>
  <declaration type="double" name="xbar" />
  <javadoc>
    <text>mean of accumulated y values, used in updating formulas</text>
  </javadoc>
  <declaration type="double" name="ybar" />
  <javadoc>
    <text>include an intercept or not</text>
  </javadoc>
  <declaration type="boolean" name="hasIntercept" />
  <javadoc>
    <text>Create an empty SimpleRegression instance</text>
  </javadoc>
  <method type="constructor" name="SimpleRegression" />
  <javadoc>
    <text>Create a SimpleRegression instance, specifying whether or not to estimate
 * an intercept.
 * &lt;p&gt;Use {@code false} to estimate a model with no intercept.  When the{@code hasIntercept} property is false, the model is estimated without a
 * constant term and {@link #getIntercept()} returns {@code 0}.&lt;/p&gt;</text>
    <param>includeIntercept whether or not to include an intercept term in
 * the regression model</param>
  </javadoc>
  <method type="constructor" name="SimpleRegression" />
  <javadoc>
    <text>Adds the observation (x,y) to the regression data set.
 * &lt;p&gt;
 * Uses updating formulas for means and sums of squares defined in
 * "Algorithms for Computing the Sample Variance: Analysis and
 * Recommendations", Chan, T.F., Golub, G.H., and LeVeque, R.J.
 * 1983, American Statistician, vol. 37, pp. 242-247, referenced in
 * Weisberg, S. "Applied Linear Regression". 2nd Ed. 1985.&lt;/p&gt;</text>
    <param>x independent variable value</param>
    <param>y dependent variable value</param>
  </javadoc>
  <method type="void" name="addData">
    <scope />
    <scope>
      <scope>
        <declaration type="double" name="fact1" />
        <declaration type="double" name="fact2" />
        <declaration type="double" name="dx" />
        <declaration type="double" name="dy" />
      </scope>
    </scope>
    <scope />
  </method>
  <javadoc>
    <text>Removes the observation (x,y) from the regression data set.
 * &lt;p&gt;
 * Mirrors the addData method.  This method permits the use of
 * SimpleRegression instances in streaming mode where the regression
 * is applied to a sliding "window" of observations, however the caller is
 * responsible for maintaining the set of observations in the window.&lt;/p&gt;
 * The method has no effect if there are no points of data (i.e. n=0)</text>
    <param>x independent variable value</param>
    <param>y dependent variable value</param>
  </javadoc>
  <method type="void" name="removeData">
    <scope>
      <scope>
        <declaration type="double" name="fact1" />
        <declaration type="double" name="fact2" />
        <declaration type="double" name="dx" />
        <declaration type="double" name="dy" />
      </scope>
      <scope>
        <declaration type="double" name="fact1" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Adds the observations represented by the elements in
 * &lt;code&gt;data&lt;/code&gt;.
 * &lt;p&gt;
 * &lt;code&gt;(data[0][0],data[0][1])&lt;/code&gt; will be the first observation, then
 * &lt;code&gt;(data[1][0],data[1][1])&lt;/code&gt;, etc.&lt;/p&gt;
 * &lt;p&gt;
 * This method does not replace data that has already been added.  The
 * observations represented by &lt;code&gt;data&lt;/code&gt; are added to the existing
 * dataset.&lt;/p&gt;
 * &lt;p&gt;
 * To replace all data, use &lt;code&gt;clear()&lt;/code&gt; before adding the new
 * data.&lt;/p&gt;</text>
    <param>data array of observations to be added</param>
    <throws>ModelSpecificationException if the length of {@code data[i]} is not
 * greater than or equal to 2</throws>
  </javadoc>
  <method type="void" name="addData">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Adds one observation to the regression model.</text>
    <param>x the independent variables which form the design matrix</param>
    <param>y the dependent or response variable</param>
    <throws>ModelSpecificationException if the length of {@code x} does not equal
 * the number of independent variables in the model</throws>
  </javadoc>
  <method type="void" name="addObservation">
    <scope />
  </method>
  <javadoc>
    <text>Adds a series of observations to the regression model. The lengths of
 * x and y must be the same and x must be rectangular.</text>
    <param>x a series of observations on the independent variables</param>
    <param>y a series of observations on the dependent variable
 * The length of x and y must be the same</param>
    <throws>ModelSpecificationException if {@code x} is not rectangular, does not match
 * the length of {@code y} or does not contain sufficient data to estimate the model</throws>
  </javadoc>
  <method type="void" name="addObservations">
    <scope />
    <declaration type="boolean" name="obsOk" />
    <scope>
      <scope />
    </scope>
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Removes observations represented by the elements in &lt;code&gt;data&lt;/code&gt;.
 * &lt;p&gt;
 * If the array is larger than the current n, only the first n elements are
 * processed.  This method permits the use of SimpleRegression instances in
 * streaming mode where the regression is applied to a sliding "window" of
 * observations, however the caller is responsible for maintaining the set
 * of observations in the window.&lt;/p&gt;
 * &lt;p&gt;
 * To remove all data, use &lt;code&gt;clear()&lt;/code&gt;.&lt;/p&gt;</text>
    <param>data array of observations to be removed</param>
  </javadoc>
  <method type="void" name="removeData">
    <scope />
  </method>
  <javadoc>
    <text>Clears all data from the model.</text>
  </javadoc>
  <method type="void" name="clear" />
  <javadoc>
    <text>Returns the number of observations that have been added to the model.</text>
    <return>n number of observations that have been added.</return>
  </javadoc>
  <method type="long" name="getN" />
  <javadoc>
    <text>Returns the "predicted" &lt;code&gt;y&lt;/code&gt; value associated with the
 * supplied &lt;code&gt;x&lt;/code&gt; value,  based on the data that has been
 * added to the model when this method is activated.
 * &lt;p&gt;
 * &lt;code&gt; predict(x) = intercept + slope * x &lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;At least two observations (with at least two different x values)
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, &lt;code&gt;Double,NaN&lt;/code&gt; is
 * returned.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>x input &lt;code&gt;x&lt;/code&gt; value</param>
    <return>predicted &lt;code&gt;y&lt;/code&gt; value</return>
  </javadoc>
  <method type="double" name="predict">
    <declaration type="double" name="b1" />
    <scope />
  </method>
  <javadoc>
    <text>Returns the intercept of the estimated regression line, if{@link #hasIntercept()} is true; otherwise 0.
 * &lt;p&gt;
 * The least squares estimate of the intercept is computed using the
 * &lt;a href="http://www.xycoon.com/estimation4.htm"&gt;normal equations&lt;/a&gt;.
 * The intercept is sometimes denoted b0.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;At least two observations (with at least two different x values)
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, &lt;code&gt;Double,NaN&lt;/code&gt; is
 * returned.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <return>the intercept of the regression line if the model includes an
 * intercept; 0 otherwise</return>
    <see>#SimpleRegression(boolean)</see>
  </javadoc>
  <method type="double" name="getIntercept" />
  <javadoc>
    <text>Returns true if the model includes an intercept term.</text>
    <return>true if the regression includes an intercept; false otherwise</return>
    <see>#SimpleRegression(boolean)</see>
  </javadoc>
  <method type="boolean" name="hasIntercept" />
  <javadoc>
    <text>Returns the slope of the estimated regression line.
 * &lt;p&gt;
 * The least squares estimate of the slope is computed using the
 * &lt;a href="http://www.xycoon.com/estimation4.htm"&gt;normal equations&lt;/a&gt;.
 * The slope is sometimes denoted b1.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;At least two observations (with at least two different x values)
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, &lt;code&gt;Double.NaN&lt;/code&gt; is
 * returned.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <return>the slope of the regression line</return>
  </javadoc>
  <method type="double" name="getSlope">
    <scope />
    <scope />
    <comment>not enough data</comment>
    <comment>not enough variation in x</comment>
  </method>
  <javadoc>
    <text>Returns the &lt;a href="http://www.xycoon.com/SumOfSquares.htm"&gt;
 * sum of squared errors&lt;/a&gt; (SSE) associated with the regression
 * model.
 * &lt;p&gt;
 * The sum is computed using the computational formula&lt;/p&gt;
 * &lt;p&gt;
 * &lt;code&gt;SSE = SYY - (SXY * SXY / SXX)&lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;
 * where &lt;code&gt;SYY&lt;/code&gt; is the sum of the squared deviations of the y
 * values about their mean, &lt;code&gt;SXX&lt;/code&gt; is similarly defined and
 * &lt;code&gt;SXY&lt;/code&gt; is the sum of the products of x and y mean deviations.
 * &lt;/p&gt;&lt;p&gt;
 * The sums are accumulated using the updating algorithm referenced in{@link #addData}.&lt;/p&gt;
 * &lt;p&gt;
 * The return value is constrained to be non-negative - i.e., if due to
 * rounding errors the computational formula returns a negative result,
 * 0 is returned.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;At least two observations (with at least two different x values)
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, &lt;code&gt;Double,NaN&lt;/code&gt; is
 * returned.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <return>sum of squared errors associated with the regression model</return>
  </javadoc>
  <method type="double" name="getSumSquaredErrors" />
  <javadoc>
    <text>Returns the sum of squared deviations of the y values about their mean.
 * &lt;p&gt;
 * This is defined as SSTO
 * &lt;a href="http://www.xycoon.com/SumOfSquares.htm"&gt;here&lt;/a&gt;.&lt;/p&gt;
 * &lt;p&gt;
 * If &lt;code&gt;n &lt; 2&lt;/code&gt;, this returns &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt;</text>
    <return>sum of squared deviations of y values</return>
  </javadoc>
  <method type="double" name="getTotalSumSquares">
    <scope />
  </method>
  <javadoc>
    <text>Returns the sum of squared deviations of the x values about their mean.
 * If &lt;code&gt;n &lt; 2&lt;/code&gt;, this returns &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt;</text>
    <return>sum of squared deviations of x values</return>
  </javadoc>
  <method type="double" name="getXSumSquares">
    <scope />
  </method>
  <javadoc>
    <text>Returns the sum of crossproducts, x&lt;sub&gt;i&lt;/sub&gt;*y&lt;sub&gt;i&lt;/sub&gt;.</text>
    <return>sum of cross products</return>
  </javadoc>
  <method type="double" name="getSumOfCrossProducts" />
  <javadoc>
    <text>Returns the sum of squared deviations of the predicted y values about
 * their mean (which equals the mean of y).
 * &lt;p&gt;
 * This is usually abbreviated SSR or SSM.  It is defined as SSM
 * &lt;a href="http://www.xycoon.com/SumOfSquares.htm"&gt;here&lt;/a&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;At least two observations (with at least two different x values)
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, &lt;code&gt;Double.NaN&lt;/code&gt; is
 * returned.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <return>sum of squared deviations of predicted y values</return>
  </javadoc>
  <method type="double" name="getRegressionSumSquares" />
  <javadoc>
    <text>Returns the sum of squared errors divided by the degrees of freedom,
 * usually abbreviated MSE.
 * &lt;p&gt;
 * If there are fewer than &lt;strong&gt;three&lt;/strong&gt; data pairs in the model,
 * or if there is no variation in &lt;code&gt;x&lt;/code&gt;, this returns
 * &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt;</text>
    <return>sum of squared deviations of y values</return>
  </javadoc>
  <method type="double" name="getMeanSquareError">
    <scope />
  </method>
  <javadoc>
    <text>Returns &lt;a href="http://mathworld.wolfram.com/CorrelationCoefficient.html"&gt;
 * Pearson's product moment correlation coefficient&lt;/a&gt;,
 * usually denoted r.
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;At least two observations (with at least two different x values)
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, &lt;code&gt;Double,NaN&lt;/code&gt; is
 * returned.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <return>Pearson's r</return>
  </javadoc>
  <method type="double" name="getR">
    <declaration type="double" name="b1" />
    <declaration type="double" name="result" />
    <scope />
  </method>
  <javadoc>
    <text>Returns the &lt;a href="http://www.xycoon.com/coefficient1.htm"&gt;
 * coefficient of determination&lt;/a&gt;,
 * usually denoted r-square.
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;At least two observations (with at least two different x values)
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, &lt;code&gt;Double,NaN&lt;/code&gt; is
 * returned.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <return>r-square</return>
  </javadoc>
  <method type="double" name="getRSquare">
    <declaration type="double" name="ssto" />
  </method>
  <javadoc>
    <text>Returns the &lt;a href="http://www.xycoon.com/standarderrorb0.htm"&gt;
 * standard error of the intercept estimate&lt;/a&gt;,
 * usually denoted s(b0).
 * &lt;p&gt;
 * If there are fewer that &lt;strong&gt;three&lt;/strong&gt; observations in the
 * model, or if there is no variation in x, this returns
 * &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt; Additionally, a &lt;code&gt;Double.NaN&lt;/code&gt; is
 * returned when the intercept is constrained to be zero</text>
    <return>standard error associated with intercept estimate</return>
  </javadoc>
  <method type="double" name="getInterceptStdErr">
    <scope />
  </method>
  <javadoc>
    <text>Returns the &lt;a href="http://www.xycoon.com/standerrorb(1).htm"&gt;standard
 * error of the slope estimate&lt;/a&gt;,
 * usually denoted s(b1).
 * &lt;p&gt;
 * If there are fewer that &lt;strong&gt;three&lt;/strong&gt; data pairs in the model,
 * or if there is no variation in x, this returns &lt;code&gt;Double.NaN&lt;/code&gt;.
 * &lt;/p&gt;</text>
    <return>standard error associated with slope estimate</return>
  </javadoc>
  <method type="double" name="getSlopeStdErr" />
  <javadoc>
    <text>Returns the half-width of a 95% confidence interval for the slope
 * estimate.
 * &lt;p&gt;
 * The 95% confidence interval is&lt;/p&gt;
 * &lt;p&gt;
 * &lt;code&gt;(getSlope() - getSlopeConfidenceInterval(),
 * getSlope() + getSlopeConfidenceInterval())&lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;
 * If there are fewer that &lt;strong&gt;three&lt;/strong&gt; observations in the
 * model, or if there is no variation in x, this returns
 * &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Usage Note&lt;/strong&gt;:&lt;br&gt;
 * The validity of this statistic depends on the assumption that the
 * observations included in the model are drawn from a
 * &lt;a href="http://mathworld.wolfram.com/BivariateNormalDistribution.html"&gt;
 * Bivariate Normal Distribution&lt;/a&gt;.&lt;/p&gt;</text>
    <return>half-width of 95% confidence interval for the slope estimate</return>
    <throws>OutOfRangeException if the confidence interval can not be computed.</throws>
  </javadoc>
  <method type="double" name="getSlopeConfidenceInterval" />
  <javadoc>
    <text>Returns the half-width of a (100-100*alpha)% confidence interval for
 * the slope estimate.
 * &lt;p&gt;
 * The (100-100*alpha)% confidence interval is &lt;/p&gt;
 * &lt;p&gt;
 * &lt;code&gt;(getSlope() - getSlopeConfidenceInterval(),
 * getSlope() + getSlopeConfidenceInterval())&lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;
 * To request, for example, a 99% confidence interval, use
 * &lt;code&gt;alpha = .01&lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Usage Note&lt;/strong&gt;:&lt;br&gt;
 * The validity of this statistic depends on the assumption that the
 * observations included in the model are drawn from a
 * &lt;a href="http://mathworld.wolfram.com/BivariateNormalDistribution.html"&gt;
 * Bivariate Normal Distribution&lt;/a&gt;.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt; Preconditions:&lt;/strong&gt;&lt;ul&gt;
 * &lt;li&gt;If there are fewer that &lt;strong&gt;three&lt;/strong&gt; observations in the
 * model, or if there is no variation in x, this returns
 * &lt;code&gt;Double.NaN&lt;/code&gt;.
 * &lt;/li&gt;
 * &lt;li&gt;&lt;code&gt;(0 &lt; alpha &lt; 1)&lt;/code&gt;; otherwise an
 * &lt;code&gt;OutOfRangeException&lt;/code&gt; is thrown.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</text>
    <param>alpha the desired significance level</param>
    <return>half-width of 95% confidence interval for the slope estimate</return>
    <throws>OutOfRangeException if the confidence interval can not be computed.</throws>
  </javadoc>
  <method type="double" name="getSlopeConfidenceInterval">
    <scope />
    <scope />
    <declaration type="TDistribution" name="distribution" />
    <comment>No advertised NotStrictlyPositiveException here - will return NaN above</comment>
  </method>
  <javadoc>
    <text>Returns the significance level of the slope (equiv) correlation.
 * &lt;p&gt;
 * Specifically, the returned value is the smallest &lt;code&gt;alpha&lt;/code&gt;
 * such that the slope confidence interval with significance level
 * equal to &lt;code&gt;alpha&lt;/code&gt; does not include &lt;code&gt;0&lt;/code&gt;.
 * On regression output, this is often denoted &lt;code&gt;Prob(|t| &gt; 0)&lt;/code&gt;
 * &lt;/p&gt;&lt;p&gt;
 * &lt;strong&gt;Usage Note&lt;/strong&gt;:&lt;br&gt;
 * The validity of this statistic depends on the assumption that the
 * observations included in the model are drawn from a
 * &lt;a href="http://mathworld.wolfram.com/BivariateNormalDistribution.html"&gt;
 * Bivariate Normal Distribution&lt;/a&gt;.&lt;/p&gt;
 * &lt;p&gt;
 * If there are fewer that &lt;strong&gt;three&lt;/strong&gt; observations in the
 * model, or if there is no variation in x, this returns
 * &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt;</text>
    <return>significance level for slope/correlation</return>
    <throws>org.apache.commons.math3.exception.MaxCountExceededExceptionif the significance level can not be computed.</throws>
  </javadoc>
  <method type="double" name="getSignificance">
    <scope />
    <declaration type="TDistribution" name="distribution" />
    <comment>No advertised NotStrictlyPositiveException here - will return NaN above</comment>
  </method>
  <javadoc>
    <text>Returns the intercept of the estimated regression line, given the slope.
 * &lt;p&gt;
 * Will return &lt;code&gt;NaN&lt;/code&gt; if slope is &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;</text>
    <param>slope current slope</param>
    <return>the intercept of the regression line</return>
  </javadoc>
  <method type="double" name="getIntercept">
    <scope />
  </method>
  <javadoc>
    <text>Computes SSR from b1.</text>
    <param>slope regression slope estimate</param>
    <return>sum of squared deviations of predicted y values</return>
  </javadoc>
  <method type="double" name="getRegressionSumSquares" />
  <javadoc>
    <text>Performs a regression on data present in buffers and outputs a RegressionResults object.
 * &lt;p&gt;If there are fewer than 3 observations in the model and {@code hasIntercept} is true
 * a {@code NoDataException} is thrown.  If there is no intercept term, the model must
 * contain at least 2 observations.&lt;/p&gt;</text>
    <return>RegressionResults acts as a container of regression output</return>
    <throws>ModelSpecificationException if the model is not correctly specified</throws>
    <throws>NoDataException if there is not sufficient data in the model to
 * estimate the regression parameters</throws>
  </javadoc>
  <method type="RegressionResults" name="regress">
    <scope>
      <scope />
      <scope>
        <declaration type="double[][]" name="params" />
        <declaration type="double" name="mse" />
        <declaration type="double" name="_syy" />
        <declaration type="double[][]" name="vcv" />
      </scope>
      <scope>
        <declaration type="double[][]" name="params" />
        <declaration type="double[][]" name="vcv" />
      </scope>
    </scope>
    <scope>
      <scope />
      <scope>
        <declaration type="double[][]" name="vcv" />
        <declaration type="double[][]" name="params" />
      </scope>
      <scope>
        <declaration type="double[][]" name="vcv" />
        <declaration type="double[][]" name="params" />
      </scope>
    </scope>
    <comment>final double mse = getMeanSquareError();</comment>
  </method>
  <javadoc>
    <text>Performs a regression on data present in buffers including only regressors
 * indexed in variablesToInclude and outputs a RegressionResults object</text>
    <param>variablesToInclude an array of indices of regressors to include</param>
    <return>RegressionResults acts as a container of regression output</return>
    <throws>MathIllegalArgumentException if the variablesToInclude array is null or zero length</throws>
    <throws>OutOfRangeException if a requested variable is not present in model</throws>
  </javadoc>
  <method type="RegressionResults" name="regress">
    <scope />
    <scope />
    <scope>
      <scope>
        <scope />
        <scope />
        <scope />
      </scope>
      <scope>
        <scope />
        <declaration type="double" name="_mean" />
        <declaration type="double" name="_syy" />
        <scope>
          <declaration type="double[][]" name="vcv" />
          <declaration type="double[][]" name="params" />
        </scope>
        <scope>
          <declaration type="double" name="_sxx" />
          <declaration type="double" name="_sxy" />
          <declaration type="double" name="_sse" />
          <declaration type="double" name="_mse" />
          <scope>
            <declaration type="double[][]" name="vcv" />
            <declaration type="double[][]" name="params" />
          </scope>
          <scope>
            <declaration type="double[][]" name="vcv" />
            <declaration type="double[][]" name="params" />
          </scope>
        </scope>
      </scope>
    </scope>
    <scope>
      <scope />
    </scope>
    <comment>just the mean</comment>
    <comment>final double _syy = sumYY + sumY * sumY / ((double) n);</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>---------------------Public methods--------------------------------------</comment>
  <comment>---------------------Private methods-----------------------------------</comment>
</class>
