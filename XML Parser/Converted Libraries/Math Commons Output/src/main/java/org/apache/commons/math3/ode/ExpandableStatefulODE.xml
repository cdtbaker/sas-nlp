<?xml version="1.0" encoding="UTF-8"?>
<class name="ExpandableStatefulODE">
  <javadoc>
    <text>This class represents a combined set of first order differential equations,
 * with at least a primary set of equations expandable by some sets of secondary
 * equations.
 * &lt;p&gt;
 * One typical use case is the computation of the Jacobian matrix for some ODE.
 * In this case, the primary set of equations corresponds to the raw ODE, and we
 * add to this set another bunch of secondary equations which represent the Jacobian
 * matrix of the primary set.
 * &lt;/p&gt;
 * &lt;p&gt;
 * We want the integrator to use &lt;em&gt;only&lt;/em&gt; the primary set to estimate the
 * errors and hence the step sizes. It should &lt;em&gt;not&lt;/em&gt; use the secondary
 * equations in this computation. The {@link AbstractIntegrator integrator} will
 * be able to know where the primary set ends and so where the secondary sets begin.
 * &lt;/p&gt;</text>
    <see>FirstOrderDifferentialEquations</see>
    <see>JacobianMatrices</see>
    <version>$Id: ExpandableStatefulODE.java 1463680 2013-04-02 19:02:55Z luc $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Primary differential equation.</text>
  </javadoc>
  <declaration type="FirstOrderDifferentialEquations" name="primary" />
  <javadoc>
    <text>Mapper for primary equation.</text>
  </javadoc>
  <declaration type="EquationsMapper" name="primaryMapper" />
  <javadoc>
    <text>Time.</text>
  </javadoc>
  <declaration type="double" name="time" />
  <javadoc>
    <text>State.</text>
  </javadoc>
  <declaration type="double[]" name="primaryState" />
  <javadoc>
    <text>State derivative.</text>
  </javadoc>
  <declaration type="double[]" name="primaryStateDot" />
  <javadoc>
    <text>Components of the expandable ODE.</text>
  </javadoc>
  <declaration type="List&lt;SecondaryComponent&gt;" name="components" />
  <javadoc>
    <text>Build an expandable set from its primary ODE set.</text>
    <param>primary the primary set of differential equations to be integrated.</param>
  </javadoc>
  <method type="constructor" name="ExpandableStatefulODE">
    <declaration type="int" name="n" />
  </method>
  <javadoc>
    <text>Get the primary set of differential equations.</text>
    <return>primary set of differential equations</return>
  </javadoc>
  <method type="FirstOrderDifferentialEquations" name="getPrimary" />
  <javadoc>
    <text>Return the dimension of the complete set of equations.
 * &lt;p&gt;
 * The complete set of equations correspond to the primary set plus all secondary sets.
 * &lt;/p&gt;</text>
    <return>dimension of the complete set of equations</return>
  </javadoc>
  <method type="int" name="getTotalDimension">
    <scope />
    <scope>
      <declaration type="EquationsMapper" name="lastMapper" />
    </scope>
    <comment>there are no secondary equations, the complete set is limited to the primary set</comment>
    <comment>there are secondary equations, the complete set ends after the last set</comment>
  </method>
  <javadoc>
    <text>Get the current time derivative of the complete state vector.</text>
    <param>t current value of the independent &lt;I&gt;time&lt;/I&gt; variable</param>
    <param>y array containing the current value of the complete state vector</param>
    <param>yDot placeholder array where to put the time derivative of the complete state vector</param>
    <exception>MaxCountExceededException if the number of functions evaluations is exceeded</exception>
    <exception>DimensionMismatchException if arrays dimensions do not match equations settings</exception>
  </javadoc>
  <method type="void" name="computeDerivatives">
    <scope />
    <comment>compute derivatives of the primary equations</comment>
    <comment>Add contribution for secondary equations</comment>
  </method>
  <javadoc>
    <text>Add a set of secondary equations to be integrated along with the primary set.</text>
    <param>secondary secondary equations set</param>
    <return>index of the secondary equation in the expanded state</return>
  </javadoc>
  <method type="int" name="addSecondaryEquations">
    <declaration type="int" name="firstIndex" />
    <scope />
    <scope>
      <declaration type="SecondaryComponent" name="last" />
    </scope>
    <comment>lazy creation of the components list</comment>
  </method>
  <javadoc>
    <text>Get an equations mapper for the primary equations set.</text>
    <return>mapper for the primary set</return>
    <see>#getSecondaryMappers()</see>
  </javadoc>
  <method type="EquationsMapper" name="getPrimaryMapper" />
  <javadoc>
    <text>Get the equations mappers for the secondary equations sets.</text>
    <return>equations mappers for the secondary equations sets</return>
    <see>#getPrimaryMapper()</see>
  </javadoc>
  <method type="EquationsMapper[]" name="getSecondaryMappers">
    <declaration type="EquationsMapper[]" name="mappers" />
    <scope />
  </method>
  <javadoc>
    <text>Set current time.</text>
    <param>time current time</param>
  </javadoc>
  <method type="void" name="setTime" />
  <javadoc>
    <text>Get current time.</text>
    <return>current time</return>
  </javadoc>
  <method type="double" name="getTime" />
  <javadoc>
    <text>Set primary part of the current state.</text>
    <param>primaryState primary part of the current state</param>
    <throws>DimensionMismatchException if the dimension of the array does not
 * match the primary set</throws>
  </javadoc>
  <method type="void" name="setPrimaryState">
    <scope />
    <comment>safety checks</comment>
    <comment>set the data</comment>
  </method>
  <javadoc>
    <text>Get primary part of the current state.</text>
    <return>primary part of the current state</return>
  </javadoc>
  <method type="double[]" name="getPrimaryState" />
  <javadoc>
    <text>Get primary part of the current state derivative.</text>
    <return>primary part of the current state derivative</return>
  </javadoc>
  <method type="double[]" name="getPrimaryStateDot" />
  <javadoc>
    <text>Set secondary part of the current state.</text>
    <param>index index of the part to set as returned by {@link #addSecondaryEquations(SecondaryEquations)}</param>
    <param>secondaryState secondary part of the current state</param>
    <throws>DimensionMismatchException if the dimension of the partial state does not
 * match the selected equations set dimension</throws>
  </javadoc>
  <method type="void" name="setSecondaryState">
    <declaration type="double[]" name="localArray" />
    <scope />
    <comment>get either the secondary state</comment>
    <comment>safety checks</comment>
    <comment>set the data</comment>
  </method>
  <javadoc>
    <text>Get secondary part of the current state.</text>
    <param>index index of the part to set as returned by {@link #addSecondaryEquations(SecondaryEquations)}</param>
    <return>secondary part of the current state</return>
  </javadoc>
  <method type="double[]" name="getSecondaryState" />
  <javadoc>
    <text>Get secondary part of the current state derivative.</text>
    <param>index index of the part to set as returned by {@link #addSecondaryEquations(SecondaryEquations)}</param>
    <return>secondary part of the current state derivative</return>
  </javadoc>
  <method type="double[]" name="getSecondaryStateDot" />
  <javadoc>
    <text>Set the complete current state.</text>
    <param>completeState complete current state to copy data from</param>
    <throws>DimensionMismatchException if the dimension of the complete state does not
 * match the complete equations sets dimension</throws>
  </javadoc>
  <method type="void" name="setCompleteState">
    <scope />
    <scope />
    <comment>safety checks</comment>
    <comment>set the data</comment>
  </method>
  <javadoc>
    <text>Get the complete current state.</text>
    <return>complete current state</return>
    <throws>DimensionMismatchException if the dimension of the complete state does not
 * match the complete equations sets dimension</throws>
  </javadoc>
  <method type="double[]" name="getCompleteState">
    <declaration type="double[]" name="completeState" />
    <scope />
    <comment>allocate complete array</comment>
    <comment>set the data</comment>
  </method>
  <javadoc>
    <text>Components of the compound stateful ODE.</text>
  </javadoc>
  <javadoc>
    <text>Secondary differential equation.</text>
  </javadoc>
  <declaration type="SecondaryEquations" name="equation" />
  <javadoc>
    <text>Mapper between local and complete arrays.</text>
  </javadoc>
  <declaration type="EquationsMapper" name="mapper" />
  <javadoc>
    <text>State.</text>
  </javadoc>
  <declaration type="double[]" name="state" />
  <javadoc>
    <text>State derivative.</text>
  </javadoc>
  <declaration type="double[]" name="stateDot" />
  <javadoc>
    <text>Simple constructor.</text>
    <param>equation secondary differential equation</param>
    <param>firstIndex index to use for the first element in the complete arrays</param>
  </javadoc>
  <method type="constructor" name="SecondaryComponent">
    <declaration type="int" name="n" />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
