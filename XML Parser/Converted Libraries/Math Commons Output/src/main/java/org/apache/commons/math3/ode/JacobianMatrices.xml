<?xml version="1.0" encoding="UTF-8"?>
<class name="JacobianMatrices">
  <javadoc>
    <text>This class defines a set of {@link SecondaryEquations secondary equations} to
 * compute the Jacobian matrices with respect to the initial state vector and, if
 * any, to some parameters of the primary ODE set.
 * &lt;p&gt;
 * It is intended to be packed into an {@link ExpandableStatefulODE}in conjunction with a primary set of ODE, which may be:
 * &lt;ul&gt;
 * &lt;li&gt;a {@link FirstOrderDifferentialEquations}&lt;/li&gt;
 * &lt;li&gt;a {@link MainStateJacobianProvider}&lt;/li&gt;
 * &lt;/ul&gt;
 * In order to compute Jacobian matrices with respect to some parameters of the
 * primary ODE set, the following parameter Jacobian providers may be set:
 * &lt;ul&gt;
 * &lt;li&gt;a {@link ParameterJacobianProvider}&lt;/li&gt;
 * &lt;li&gt;a {@link ParameterizedODE}&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;</text>
    <see>ExpandableStatefulODE</see>
    <see>FirstOrderDifferentialEquations</see>
    <see>MainStateJacobianProvider</see>
    <see>ParameterJacobianProvider</see>
    <see>ParameterizedODE</see>
    <version>$Id: JacobianMatrices.java 1422447 2012-12-16 01:38:40Z psteitz $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Expandable first order differential equation.</text>
  </javadoc>
  <declaration type="ExpandableStatefulODE" name="efode" />
  <javadoc>
    <text>Index of the instance in the expandable set.</text>
  </javadoc>
  <declaration type="int" name="index" />
  <javadoc>
    <text>FODE with exact primary Jacobian computation skill.</text>
  </javadoc>
  <declaration type="MainStateJacobianProvider" name="jode" />
  <javadoc>
    <text>FODE without exact parameter Jacobian computation skill.</text>
  </javadoc>
  <declaration type="ParameterizedODE" name="pode" />
  <javadoc>
    <text>Main state vector dimension.</text>
  </javadoc>
  <declaration type="int" name="stateDim" />
  <javadoc>
    <text>Selected parameters for parameter Jacobian computation.</text>
  </javadoc>
  <declaration type="ParameterConfiguration[]" name="selectedParameters" />
  <javadoc>
    <text>FODE with exact parameter Jacobian computation skill.</text>
  </javadoc>
  <declaration type="List&lt;ParameterJacobianProvider&gt;" name="jacobianProviders" />
  <javadoc>
    <text>Parameters dimension.</text>
  </javadoc>
  <declaration type="int" name="paramDim" />
  <javadoc>
    <text>Boolean for selected parameters consistency.</text>
  </javadoc>
  <declaration type="boolean" name="dirtyParameter" />
  <javadoc>
    <text>State and parameters Jacobian matrices in a row.</text>
  </javadoc>
  <declaration type="double[]" name="matricesData" />
  <javadoc>
    <text>Simple constructor for a secondary equations set computing Jacobian matrices.
 * &lt;p&gt;
 * Parameters must belong to the supported ones given by {@link Parameterizable#getParametersNames()}, so the primary set of differential
 * equations must be {@link Parameterizable}.
 * &lt;/p&gt;
 * &lt;p&gt;Note that each selection clears the previous selected parameters.&lt;/p&gt;</text>
    <param>fode the primary first order differential equations set to extend</param>
    <param>hY step used for finite difference computation with respect to state vector</param>
    <param>parameters parameters to consider for Jacobian matrices processing
 * (may be null if parameters Jacobians is not desired)</param>
    <exception>DimensionMismatchException if there is a dimension mismatch between
 * the steps array {@code hY} and the equation dimension</exception>
  </javadoc>
  <method type="constructor" name="JacobianMatrices" />
  <javadoc>
    <text>Simple constructor for a secondary equations set computing Jacobian matrices.
 * &lt;p&gt;
 * Parameters must belong to the supported ones given by {@link Parameterizable#getParametersNames()}, so the primary set of differential
 * equations must be {@link Parameterizable}.
 * &lt;/p&gt;
 * &lt;p&gt;Note that each selection clears the previous selected parameters.&lt;/p&gt;</text>
    <param>jode the primary first order differential equations set to extend</param>
    <param>parameters parameters to consider for Jacobian matrices processing
 * (may be null if parameters Jacobians is not desired)</param>
  </javadoc>
  <method type="constructor" name="JacobianMatrices">
    <scope />
    <scope>
      <scope />
    </scope>
    <scope />
    <comment>set the default initial state Jacobian to the identity</comment>
    <comment>and the default initial parameters Jacobian to the null matrix</comment>
  </method>
  <javadoc>
    <text>Register the variational equations for the Jacobians matrices to the expandable set.</text>
    <param>expandable expandable set into which variational equations should be registered</param>
    <throws>DimensionMismatchException if the dimension of the partial state does not
 * match the selected equations set dimension</throws>
    <exception>MismatchedEquations if the primary set of the expandable set does
 * not match the one used to build the instance</exception>
    <see>ExpandableStatefulODE#addSecondaryEquations(SecondaryEquations)</see>
  </javadoc>
  <method type="void" name="registerVariationalEquations">
    <declaration type="FirstOrderDifferentialEquations" name="ode" />
    <scope />
    <comment>safety checks</comment>
  </method>
  <javadoc>
    <text>Add a parameter Jacobian provider.</text>
    <param>provider the parameter Jacobian provider to compute exactly the parameter Jacobian matrix</param>
  </javadoc>
  <method type="void" name="addParameterJacobianProvider" />
  <javadoc>
    <text>Set a parameter Jacobian provider.</text>
    <param>parameterizedOde the parameterized ODE to compute the parameter Jacobian matrix using finite differences</param>
  </javadoc>
  <method type="void" name="setParameterizedODE" />
  <javadoc>
    <text>Set the step associated to a parameter in order to compute by finite
 * difference the Jacobian matrix.
 * &lt;p&gt;
 * Needed if and only if the primary ODE set is a {@link ParameterizedODE}.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Given a non zero parameter value pval for the parameter, a reasonable value
 * for such a step is {@code pval * FastMath.sqrt(Precision.EPSILON)}.
 * &lt;/p&gt;
 * &lt;p&gt;
 * A zero value for such a step doesn't enable to compute the parameter Jacobian matrix.
 * &lt;/p&gt;</text>
    <param>parameter parameter to consider for Jacobian processing</param>
    <param>hP step for Jacobian finite difference computation w.r.t. the specified parameter</param>
    <see>ParameterizedODE</see>
    <exception>UnknownParameterException if the parameter is not supported</exception>
  </javadoc>
  <method type="void" name="setParameterStep">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Set the initial value of the Jacobian matrix with respect to state.
 * &lt;p&gt;
 * If this method is not called, the initial value of the Jacobian
 * matrix with respect to state is set to identity.
 * &lt;/p&gt;</text>
    <param>dYdY0 initial Jacobian matrix w.r.t. state</param>
    <exception>DimensionMismatchException if matrix dimensions are incorrect</exception>
  </javadoc>
  <method type="void" name="setInitialMainStateJacobian">
    <declaration type="int" name="i" />
    <scope />
    <scope />
    <comment>Check dimensions</comment>
    <comment>store the matrix in row major order as a single dimension array</comment>
  </method>
  <javadoc>
    <text>Set the initial value of a column of the Jacobian matrix with respect to one parameter.
 * &lt;p&gt;
 * If this method is not called for some parameter, the initial value of
 * the column of the Jacobian matrix with respect to this parameter is set to zero.
 * &lt;/p&gt;</text>
    <param>pName parameter name</param>
    <param>dYdP initial Jacobian column vector with respect to the parameter</param>
    <exception>UnknownParameterException if a parameter is not supported</exception>
    <throws>DimensionMismatchException if the column vector does not match state dimension</throws>
  </javadoc>
  <method type="void" name="setInitialParameterJacobian">
    <declaration type="int" name="i" />
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>Check dimensions</comment>
    <comment>store the column in a global single dimension array</comment>
  </method>
  <javadoc>
    <text>Get the current value of the Jacobian matrix with respect to state.</text>
    <param>dYdY0 current Jacobian matrix with respect to state.</param>
  </javadoc>
  <method type="void" name="getCurrentMainSetJacobian">
    <declaration type="double[]" name="p" />
    <declaration type="int" name="j" />
    <scope />
    <comment>get current state for this set of equations from the expandable fode</comment>
  </method>
  <javadoc>
    <text>Get the current value of the Jacobian matrix with respect to one parameter.</text>
    <param>pName name of the parameter for the computed Jacobian matrix</param>
    <param>dYdP current Jacobian matrix with respect to the named parameter</param>
  </javadoc>
  <method type="void" name="getCurrentParameterJacobian">
    <declaration type="double[]" name="p" />
    <declaration type="int" name="i" />
    <scope>
      <scope />
    </scope>
    <comment>get current state for this set of equations from the expandable fode</comment>
  </method>
  <javadoc>
    <text>Check array dimensions.</text>
    <param>expected expected dimension</param>
    <param>array (may be null if expected is 0)</param>
    <throws>DimensionMismatchException if the array dimension does not match the expected one</throws>
  </javadoc>
  <method type="void" name="checkDimension">
    <declaration type="int" name="arrayDimension" />
    <scope />
  </method>
  <javadoc>
    <text>Local implementation of secondary equations.
 * &lt;p&gt;
 * This class is an inner class to ensure proper scheduling of calls
 * by forcing the use of {@link JacobianMatrices#registerVariationalEquations(ExpandableStatefulODE)}.
 * &lt;/p&gt;</text>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getDimension" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="computeDerivatives">
    <scope />
    <declaration type="double[][]" name="dFdY" />
    <scope>
      <declaration type="double[]" name="dFdYi" />
      <scope>
        <declaration type="double" name="s" />
        <declaration type="int" name="startIndex" />
        <declaration type="int" name="zIndex" />
        <scope />
      </scope>
    </scope>
    <scope>
      <declaration type="double[]" name="dFdP" />
      <declaration type="int" name="startIndex" />
      <scope>
        <declaration type="boolean" name="found" />
        <scope>
          <declaration type="ParameterJacobianProvider" name="provider" />
          <scope>
            <scope>
              <declaration type="double[]" name="dFdYi" />
              <declaration type="int" name="zIndex" />
              <declaration type="double" name="s" />
              <scope />
            </scope>
          </scope>
        </scope>
        <scope />
      </scope>
    </scope>
    <comment>Lazy initialization</comment>
    <comment>variational equations:</comment>
    <comment>from d[dy/dt]/dy0 and d[dy/dt]/dp to d[dy/dy0]/dt and d[dy/dp]/dt</comment>
    <comment>compute Jacobian matrix with respect to primary state</comment>
    <comment>Dispatch Jacobian matrix in the compound secondary state vector</comment>
    <comment>compute Jacobian matrices with respect to parameters</comment>
  </method>
  <javadoc>
    <text>Wrapper class to compute jacobian matrices by finite differences for ODE
 * which do not compute them by themselves.</text>
  </javadoc>
  <javadoc>
    <text>Raw ODE without jacobians computation skill to be wrapped into a MainStateJacobianProvider.</text>
  </javadoc>
  <declaration type="FirstOrderDifferentialEquations" name="ode" />
  <javadoc>
    <text>Steps for finite difference computation of the jacobian df/dy w.r.t. state.</text>
  </javadoc>
  <declaration type="double[]" name="hY" />
  <javadoc>
    <text>Wrap a {@link FirstOrderDifferentialEquations} into a {@link MainStateJacobianProvider}.</text>
    <param>ode original ODE problem, without jacobians computation skill</param>
    <param>hY step sizes to compute the jacobian df/dy</param>
    <see>JacobianMatrices#setMainStateSteps(double[])</see>
    <exception>DimensionMismatchException if there is a dimension mismatch between
 * the steps array {@code hY} and the equation dimension</exception>
  </javadoc>
  <method type="constructor" name="MainStateJacobianWrapper">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getDimension" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="computeDerivatives" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="computeMainStateJacobian">
    <declaration type="int" name="n" />
    <declaration type="double[]" name="tmpDot" />
    <scope>
      <declaration type="double" name="savedYj" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Special exception for equations mismatch.</text>
    <since>3.1</since>
  </javadoc>
  <javadoc>
    <text>Serializable UID.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Simple constructor.</text>
  </javadoc>
  <method type="constructor" name="MismatchedEquations" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
