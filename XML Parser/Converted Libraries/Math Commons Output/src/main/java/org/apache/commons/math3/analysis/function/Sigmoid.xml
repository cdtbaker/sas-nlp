<?xml version="1.0" encoding="UTF-8"?>
<class name="Sigmoid">
  <javadoc>
    <text>&lt;a href="http://en.wikipedia.org/wiki/Sigmoid_function"&gt;
 * Sigmoid&lt;/a&gt; function.
 * It is the inverse of the {@link Logit logit} function.
 * A more flexible version, the generalised logistic, is implemented
 * by the {@link Logistic} class.</text>
    <since>3.0</since>
    <version>$Id: Sigmoid.java 1455194 2013-03-11 15:45:54Z luc $</version>
  </javadoc>
  <javadoc>
    <text>Lower asymptote.</text>
  </javadoc>
  <declaration type="double" name="lo" />
  <javadoc>
    <text>Higher asymptote.</text>
  </javadoc>
  <declaration type="double" name="hi" />
  <javadoc>
    <text>Usual sigmoid function, where the lower asymptote is 0 and the higher
 * asymptote is 1.</text>
  </javadoc>
  <method type="constructor" name="Sigmoid" />
  <javadoc>
    <text>Sigmoid function.</text>
    <param>lo Lower asymptote.</param>
    <param>hi Higher asymptote.</param>
  </javadoc>
  <method type="constructor" name="Sigmoid" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <deprecated>as of 3.1, replaced by {@link #value(DerivativeStructure)}</deprecated>
  </javadoc>
  <method type="UnivariateFunction" name="derivative" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="value" />
  <javadoc>
    <text>Parametric function where the input array contains the parameters of
 * the logit function, ordered as follows:
 * &lt;ul&gt;
 * &lt;li&gt;Lower asymptote&lt;/li&gt;
 * &lt;li&gt;Higher asymptote&lt;/li&gt;
 * &lt;/ul&gt;</text>
  </javadoc>
  <javadoc>
    <text>Computes the value of the sigmoid at {@code x}.</text>
    <param>x Value for which the function must be computed.</param>
    <param>param Values of lower asymptote and higher asymptote.</param>
    <return>the value of the function.</return>
    <throws>NullArgumentException if {@code param} is {@code null}.</throws>
    <throws>DimensionMismatchException if the size of {@code param} is
 * not 2.</throws>
  </javadoc>
  <method type="double" name="value" />
  <javadoc>
    <text>Computes the value of the gradient at {@code x}.
 * The components of the gradient vector are the partial
 * derivatives of the function with respect to each of the
 * &lt;em&gt;parameters&lt;/em&gt; (lower asymptote and higher asymptote).</text>
    <param>x Value at which the gradient must be computed.</param>
    <param>param Values for lower asymptote and higher asymptote.</param>
    <return>the gradient vector at {@code x}.</return>
    <throws>NullArgumentException if {@code param} is {@code null}.</throws>
    <throws>DimensionMismatchException if the size of {@code param} is
 * not 2.</throws>
  </javadoc>
  <method type="double[]" name="gradient">
    <declaration type="double" name="invExp1" />
  </method>
  <javadoc>
    <text>Validates parameters to ensure they are appropriate for the evaluation of
 * the {@link #value(double,double[])} and {@link #gradient(double,double[])}methods.</text>
    <param>param Values for lower and higher asymptotes.</param>
    <throws>NullArgumentException if {@code param} is {@code null}.</throws>
    <throws>DimensionMismatchException if the size of {@code param} is
 * not 2.</throws>
  </javadoc>
  <method type="void" name="validateParameters">
    <scope />
    <scope />
  </method>
  <javadoc>
    <param>x Value at which to compute the sigmoid.</param>
    <param>lo Lower asymptote.</param>
    <param>hi Higher asymptote.</param>
    <return>the value of the sigmoid function at {@code x}.</return>
  </javadoc>
  <method type="double" name="value" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.1</since>
  </javadoc>
  <method type="DerivativeStructure" name="value">
    <declaration type="double[]" name="f" />
    <declaration type="double" name="exp" />
    <scope />
    <scope>
      <declaration type="double[]" name="p" />
      <declaration type="double" name="inv" />
      <declaration type="double" name="coeff" />
      <scope>
        <declaration type="double" name="v" />
        <scope>
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>special handling near lower boundary, to avoid NaN</comment>
    <comment>the nth order derivative of sigmoid has the form:</comment>
    <comment>dn(sigmoid(x)/dxn = P_n(exp(-x)) / (1+exp(-x))^(n+1)</comment>
    <comment>where P_n(t) is a degree n polynomial with normalized higher term</comment>
    <comment>P_0(t) = 1, P_1(t) = t, P_2(t) = t^2 - t, P_3(t) = t^3 - 4 t^2 + t...</comment>
    <comment>the general recurrence relation for P_n is:</comment>
    <comment>P_n(x) = n t P_(n-1)(t) - t (1 + t) P_(n-1)'(t)</comment>
    <comment>update and evaluate polynomial P_n(t)</comment>
    <comment>fix function value</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
