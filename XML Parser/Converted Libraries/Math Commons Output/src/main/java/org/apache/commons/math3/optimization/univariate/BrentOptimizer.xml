<?xml version="1.0" encoding="UTF-8"?>
<class name="BrentOptimizer">
  <javadoc>
    <text>For a function defined on some interval {@code (lo, hi)}, this class
 * finds an approximation {@code x} to the point at which the function
 * attains its minimum.
 * It implements Richard Brent's algorithm (from his book "Algorithms for
 * Minimization without Derivatives", p. 79) for finding minima of real
 * univariate functions.
 * &lt;br/&gt;
 * This code is an adaptation, partly based on the Python code from SciPy
 * (module "optimize.py" v0.5); the original algorithm is also modified
 * &lt;ul&gt;
 * &lt;li&gt;to use an initial guess provided by the user,&lt;/li&gt;
 * &lt;li&gt;to ensure that the best point encountered is the one returned.&lt;/li&gt;
 * &lt;/ul&gt;</text>
    <version>$Id: BrentOptimizer.java 1462503 2013-03-29 15:48:27Z luc $</version>
    <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>Golden section.</text>
  </javadoc>
  <declaration type="double" name="GOLDEN_SECTION" />
  <javadoc>
    <text>Minimum relative tolerance.</text>
  </javadoc>
  <declaration type="double" name="MIN_RELATIVE_TOLERANCE" />
  <javadoc>
    <text>Relative threshold.</text>
  </javadoc>
  <declaration type="double" name="relativeThreshold" />
  <javadoc>
    <text>Absolute threshold.</text>
  </javadoc>
  <declaration type="double" name="absoluteThreshold" />
  <javadoc>
    <text>The arguments are used implement the original stopping criterion
 * of Brent's algorithm.{@code abs} and {@code rel} define a tolerance{@code tol = rel |x| + abs}. {@code rel} should be no smaller than
 * &lt;em&gt;2 macheps&lt;/em&gt; and preferably not much less than &lt;em&gt;sqrt(macheps)&lt;/em&gt;,
 * where &lt;em&gt;macheps&lt;/em&gt; is the relative machine precision. {@code abs} must
 * be positive.</text>
    <param>rel Relative threshold.</param>
    <param>abs Absolute threshold.</param>
    <param>checker Additional, user-defined, convergence checking
 * procedure.</param>
    <throws>NotStrictlyPositiveException if {@code abs &lt;= 0}.</throws>
    <throws>NumberIsTooSmallException if {@code rel &lt; 2 * Math.ulp(1d)}.</throws>
  </javadoc>
  <method type="constructor" name="BrentOptimizer">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>The arguments are used for implementing the original stopping criterion
 * of Brent's algorithm.{@code abs} and {@code rel} define a tolerance{@code tol = rel |x| + abs}. {@code rel} should be no smaller than
 * &lt;em&gt;2 macheps&lt;/em&gt; and preferably not much less than &lt;em&gt;sqrt(macheps)&lt;/em&gt;,
 * where &lt;em&gt;macheps&lt;/em&gt; is the relative machine precision. {@code abs} must
 * be positive.</text>
    <param>rel Relative threshold.</param>
    <param>abs Absolute threshold.</param>
    <throws>NotStrictlyPositiveException if {@code abs &lt;= 0}.</throws>
    <throws>NumberIsTooSmallException if {@code rel &lt; 2 * Math.ulp(1d)}.</throws>
  </javadoc>
  <method type="constructor" name="BrentOptimizer" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="UnivariatePointValuePair" name="doOptimize">
    <declaration type="boolean" name="isMinim" />
    <declaration type="double" name="lo" />
    <declaration type="double" name="mid" />
    <declaration type="double" name="hi" />
    <declaration type="ConvergenceChecker&lt;UnivariatePointValuePair&gt;" name="checker" />
    <declaration type="double" name="a" />
    <declaration type="double" name="b" />
    <scope />
    <scope />
    <declaration type="double" name="x" />
    <declaration type="double" name="v" />
    <declaration type="double" name="w" />
    <declaration type="double" name="d" />
    <declaration type="double" name="e" />
    <declaration type="double" name="fx" />
    <scope />
    <declaration type="double" name="fv" />
    <declaration type="double" name="fw" />
    <declaration type="UnivariatePointValuePair" name="previous" />
    <declaration type="UnivariatePointValuePair" name="current" />
    <declaration type="UnivariatePointValuePair" name="best" />
    <declaration type="int" name="iter" />
    <scope>
      <declaration type="double" name="m" />
      <declaration type="double" name="tol1" />
      <declaration type="double" name="tol2" />
      <declaration type="boolean" name="stop" />
      <scope>
        <declaration type="double" name="p" />
        <declaration type="double" name="q" />
        <declaration type="double" name="r" />
        <declaration type="double" name="u" />
        <scope>
          <scope />
          <scope />
          <scope>
            <scope>
              <scope />
              <scope />
            </scope>
          </scope>
          <scope>
            <scope />
            <scope />
          </scope>
        </scope>
        <scope>
          <scope />
          <scope />
        </scope>
        <scope>
          <scope />
          <scope />
        </scope>
        <scope />
        <declaration type="double" name="fu" />
        <scope />
        <scope />
        <scope>
          <scope />
          <scope />
        </scope>
        <scope>
          <scope />
          <scope />
          <scope />
          <scope />
        </scope>
      </scope>
      <scope />
    </scope>
    <comment>Optional additional convergence criteria.</comment>
    <comment>Best point encountered so far (which is the initial guess).</comment>
    <comment>Default stopping criterion.</comment>
    <comment>Fit parabola.</comment>
    <comment>Parabolic interpolation step.</comment>
    <comment>f must not be evaluated too close to a or b.</comment>
    <comment>Golden section step.</comment>
    <comment>Golden section step.</comment>
    <comment>Update by at least "tol1".</comment>
    <comment>User-defined convergence checker.</comment>
    <comment>Update a, b, v, w and x.</comment>
    <comment>Default termination (Brent's criterion).</comment>
  </method>
  <javadoc>
    <text>Selects the best of two points.</text>
    <param>a Point and value.</param>
    <param>b Point and value.</param>
    <param>isMinim {@code true} if the selected point must be the one with
 * the lowest value.</param>
    <return>the best point, or {@code null} if {@code a} and {@code b} are
 * both {@code null}. When {@code a} and {@code b} have the same function
 * value, {@code a} is returned.</return>
  </javadoc>
  <method type="UnivariatePointValuePair" name="best">
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
