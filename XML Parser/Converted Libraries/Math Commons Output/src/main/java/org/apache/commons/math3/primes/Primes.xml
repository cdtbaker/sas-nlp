<?xml version="1.0" encoding="UTF-8"?>
<class name="Primes">
  <javadoc>
    <text>Methods related to prime numbers in the range of &lt;code&gt;int&lt;/code&gt;:
 * &lt;ul&gt;
 * &lt;li&gt;primality test&lt;/li&gt;
 * &lt;li&gt;prime number generation&lt;/li&gt;
 * &lt;li&gt;factorization&lt;/li&gt;
 * &lt;/ul&gt;</text>
    <version>$Id: Primes.java 1462702 2013-03-30 04:45:52Z psteitz $</version>
    <since>3.2</since>
  </javadoc>
  <javadoc>
    <text>Hide utility class.</text>
  </javadoc>
  <method type="constructor" name="Primes" />
  <javadoc>
    <text>Primality test: tells if the argument is a (provable) prime or not.
 * &lt;p&gt;
 * It uses the Miller-Rabin probabilistic test in such a way that a result is guaranteed:
 * it uses the firsts prime numbers as successive base (see Handbook of applied cryptography
 * by Menezes, table 4.1).</text>
    <param>n number to test.</param>
    <return>true if n is prime. (All numbers &amp;lt; 2 return false).</return>
  </javadoc>
  <method type="boolean" name="isPrime">
    <scope />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Return the smallest prime greater than or equal to n.</text>
    <param>n a positive number.</param>
    <return>the smallest prime greater than or equal to n.</return>
    <throws>MathIllegalArgumentException if n &amp;lt; 0.</throws>
  </javadoc>
  <method type="int" name="nextPrime">
    <scope />
    <scope />
    <scope />
    <scope />
    <declaration type="int" name="rem" />
    <scope />
    <scope />
    <scope>
      <scope />
      <scope />
    </scope>
    <comment>make sure n is odd</comment>
    <comment>prepare entry in the +2, +4 loop:</comment>
    <comment>n should not be a multiple of 3</comment>
    <comment>if n % 3 == 0</comment>
    <comment>n % 3 == 2</comment>
    <comment>if n % 3 == 1</comment>
    <comment>if (isPrime(n)) return n;</comment>
    <comment>n % 3 == 2</comment>
    <comment>this loop skips all multiple of 3</comment>
    <comment>n % 3 == 1</comment>
    <comment>n % 3 == 2</comment>
  </method>
  <javadoc>
    <text>Prime factors decomposition</text>
    <param>n number to factorize: must be &amp;ge; 2</param>
    <return>list of prime factors of n</return>
    <throws>MathIllegalArgumentException if n &amp;lt; 2.</throws>
  </javadoc>
  <method type="List&lt;Integer&gt;" name="primeFactors">
    <scope />
    <comment>slower than trial div unless we do an awful lot of computation</comment>
    <comment>(then it finally gets JIT-compiled efficiently</comment>
    <comment>List&lt;Integer&gt; out = PollardRho.primeFactors(n);</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
