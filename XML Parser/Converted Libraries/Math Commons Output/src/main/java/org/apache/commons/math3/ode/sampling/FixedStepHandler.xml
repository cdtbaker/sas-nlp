<?xml version="1.0" encoding="UTF-8"?>
<class name="FixedStepHandler">
  <javadoc>
    <text>This interface represents a handler that should be called after
 * each successful fixed step.
 * &lt;p&gt;This interface should be implemented by anyone who is interested
 * in getting the solution of an ordinary differential equation at
 * fixed time steps. Objects implementing this interface should be
 * wrapped within an instance of {@link StepNormalizer} that itself
 * is used as the general {@link StepHandler} by the integrator. The{@link StepNormalizer} object is called according to the integrator
 * internal algorithms and it calls objects implementing this
 * interface as necessary at fixed time steps.&lt;/p&gt;</text>
    <see>StepHandler</see>
    <see>StepNormalizer</see>
    <version>$Id: FixedStepHandler.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>1.2</since>
  </javadoc>
  <method name="init" type="void" />
  <javadoc>
    <text>Initialize step handler at the start of an ODE integration.
 * &lt;p&gt;
 * This method is called once at the start of the integration. It
 * may be used by the step handler to initialize some internal data
 * if needed.
 * &lt;/p&gt;</text>
    <param>t0 start value of the independent &lt;i&gt;time&lt;/i&gt; variable</param>
    <param>y0 array containing the start value of the state vector</param>
    <param>t target time for the integration</param>
  </javadoc>
  <method name="handleStep" type="void" />
  <javadoc>
    <text>Handle the last accepted step</text>
    <param>t time of the current step</param>
    <param>y state vector at t. For efficiency purposes, the {@link StepNormalizer} class reuses the same array on each call, so if
 * the instance wants to keep it across all calls (for example to
 * provide at the end of the integration a complete array of all
 * steps), it should build a local copy store this copy.</param>
    <param>yDot derivatives of the state vector state vector at t.
 * For efficiency purposes, the {@link StepNormalizer} class reuses
 * the same array on each call, so if
 * the instance wants to keep it across all calls (for example to
 * provide at the end of the integration a complete array of all
 * steps), it should build a local copy store this copy.</param>
    <param>isLast true if the step is the last one</param>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
