<?xml version="1.0" encoding="UTF-8"?>
<class name="DormandPrince853Integrator">
  <javadoc>
    <text>This class implements the 8(5,3) Dormand-Prince integrator for Ordinary
 * Differential Equations.
 * &lt;p&gt;This integrator is an embedded Runge-Kutta integrator
 * of order 8(5,3) used in local extrapolation mode (i.e. the solution
 * is computed using the high order formula) with stepsize control
 * (and automatic step initialization) and continuous output. This
 * method uses 12 functions evaluations per step for integration and 4
 * evaluations for interpolation. However, since the first
 * interpolation evaluation is the same as the first integration
 * evaluation of the next step, we have included it in the integrator
 * rather than in the interpolator and specified the method was an
 * &lt;i&gt;fsal&lt;/i&gt;. Hence, despite we have 13 stages here, the cost is
 * really 12 evaluations per step even if no interpolation is done,
 * and the overcost of interpolation is only 3 evaluations.&lt;/p&gt;
 * &lt;p&gt;This method is based on an 8(6) method by Dormand and Prince
 * (i.e. order 8 for the integration and order 6 for error estimation)
 * modified by Hairer and Wanner to use a 5th order error estimator
 * with 3rd order correction. This modification was introduced because
 * the original method failed in some cases (wrong steps can be
 * accepted when step size is too large, for example in the
 * Brusselator problem) and also had &lt;i&gt;severe difficulties when
 * applied to problems with discontinuities&lt;/i&gt;. This modification is
 * explained in the second edition of the first volume (Nonstiff
 * Problems) of the reference book by Hairer, Norsett and Wanner:
 * &lt;i&gt;Solving Ordinary Differential Equations&lt;/i&gt; (Springer-Verlag,
 * ISBN 3-540-56670-8).&lt;/p&gt;</text>
    <version>$Id: DormandPrince853Integrator.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>1.2</since>
  </javadoc>
  <javadoc>
    <text>Integrator method name.</text>
  </javadoc>
  <declaration type="String" name="METHOD_NAME" />
  <javadoc>
    <text>Time steps Butcher array.</text>
  </javadoc>
  <declaration type="double[]" name="STATIC_C" />
  <javadoc>
    <text>Internal weights Butcher array.</text>
  </javadoc>
  <declaration type="double[][]" name="STATIC_A" />
  <javadoc>
    <text>Propagation weights Butcher array.</text>
  </javadoc>
  <declaration type="double[]" name="STATIC_B" />
  <javadoc>
    <text>First error weights array, element 1.</text>
  </javadoc>
  <declaration type="double" name="E1_01" />
  <javadoc>
    <text>First error weights array, element 6.</text>
  </javadoc>
  <declaration type="double" name="E1_06" />
  <javadoc>
    <text>First error weights array, element 7.</text>
  </javadoc>
  <declaration type="double" name="E1_07" />
  <javadoc>
    <text>First error weights array, element 8.</text>
  </javadoc>
  <declaration type="double" name="E1_08" />
  <javadoc>
    <text>First error weights array, element 9.</text>
  </javadoc>
  <declaration type="double" name="E1_09" />
  <javadoc>
    <text>First error weights array, element 10.</text>
  </javadoc>
  <declaration type="double" name="E1_10" />
  <javadoc>
    <text>First error weights array, element 11.</text>
  </javadoc>
  <declaration type="double" name="E1_11" />
  <javadoc>
    <text>First error weights array, element 12.</text>
  </javadoc>
  <declaration type="double" name="E1_12" />
  <javadoc>
    <text>Second error weights array, element 1.</text>
  </javadoc>
  <declaration type="double" name="E2_01" />
  <javadoc>
    <text>Second error weights array, element 6.</text>
  </javadoc>
  <declaration type="double" name="E2_06" />
  <javadoc>
    <text>Second error weights array, element 7.</text>
  </javadoc>
  <declaration type="double" name="E2_07" />
  <javadoc>
    <text>Second error weights array, element 8.</text>
  </javadoc>
  <declaration type="double" name="E2_08" />
  <javadoc>
    <text>Second error weights array, element 9.</text>
  </javadoc>
  <declaration type="double" name="E2_09" />
  <javadoc>
    <text>Second error weights array, element 10.</text>
  </javadoc>
  <declaration type="double" name="E2_10" />
  <javadoc>
    <text>Second error weights array, element 11.</text>
  </javadoc>
  <declaration type="double" name="E2_11" />
  <javadoc>
    <text>Second error weights array, element 12.</text>
  </javadoc>
  <declaration type="double" name="E2_12" />
  <javadoc>
    <text>Simple constructor.
 * Build an eighth order Dormand-Prince integrator with the given step bounds</text>
    <param>minStep minimal step (sign is irrelevant, regardless of
 * integration direction, forward or backward), the last step can
 * be smaller than this</param>
    <param>maxStep maximal step (sign is irrelevant, regardless of
 * integration direction, forward or backward), the last step can
 * be smaller than this</param>
    <param>scalAbsoluteTolerance allowed absolute error</param>
    <param>scalRelativeTolerance allowed relative error</param>
  </javadoc>
  <method type="constructor" name="DormandPrince853Integrator" />
  <javadoc>
    <text>Simple constructor.
 * Build an eighth order Dormand-Prince integrator with the given step bounds</text>
    <param>minStep minimal step (sign is irrelevant, regardless of
 * integration direction, forward or backward), the last step can
 * be smaller than this</param>
    <param>maxStep maximal step (sign is irrelevant, regardless of
 * integration direction, forward or backward), the last step can
 * be smaller than this</param>
    <param>vecAbsoluteTolerance allowed absolute error</param>
    <param>vecRelativeTolerance allowed relative error</param>
  </javadoc>
  <method type="constructor" name="DormandPrince853Integrator" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getOrder" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="estimateError">
    <declaration type="double" name="error1" />
    <declaration type="double" name="error2" />
    <scope>
      <declaration type="double" name="errSum1" />
      <declaration type="double" name="errSum2" />
      <declaration type="double" name="yScale" />
      <declaration type="double" name="tol" />
      <declaration type="double" name="ratio1" />
      <declaration type="double" name="ratio2" />
    </scope>
    <declaration type="double" name="den" />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>k2</comment>
  <comment>k3</comment>
  <comment>k4</comment>
  <comment>k5</comment>
  <comment>k6</comment>
  <comment>k7</comment>
  <comment>k8</comment>
  <comment>k9</comment>
  <comment>k10</comment>
  <comment>k11</comment>
  <comment>k12</comment>
  <comment>k13 should be for interpolation only, but since it is the same</comment>
  <comment>stage as the first evaluation of the next step, we perform it</comment>
  <comment>here at no cost by specifying this is an fsal method</comment>
  <comment>elements 2 to 5 are zero, so they are neither stored nor used</comment>
  <comment>elements 2 to 5 are zero, so they are neither stored nor used</comment>
</class>
