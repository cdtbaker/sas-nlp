<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractRealMatrix">
  <javadoc>
    <text>Basic implementation of RealMatrix methods regardless of the underlying storage.
 * &lt;p&gt;All the methods implemented here use {@link #getEntry(int,int)} to access
 * matrix elements. Derived class can provide faster implementations.&lt;/p&gt;</text>
    <version>$Id: AbstractRealMatrix.java 1459534 2013-03-21 21:24:45Z tn $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>Default format.</text>
  </javadoc>
  <declaration type="RealMatrixFormat" name="DEFAULT_FORMAT" />
  <scope />
  <javadoc>
    <text>Creates a matrix with no data</text>
  </javadoc>
  <method type="constructor" name="AbstractRealMatrix" />
  <javadoc>
    <text>Create a new RealMatrix with the supplied row and column dimensions.</text>
    <param>rowDimension  the number of rows in the new matrix</param>
    <param>columnDimension  the number of columns in the new matrix</param>
    <throws>NotStrictlyPositiveException if row or column dimension is not positive</throws>
  </javadoc>
  <method type="constructor" name="AbstractRealMatrix">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="add">
    <declaration type="int" name="rowCount" />
    <declaration type="int" name="columnCount" />
    <declaration type="RealMatrix" name="out" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="subtract">
    <declaration type="int" name="rowCount" />
    <declaration type="int" name="columnCount" />
    <declaration type="RealMatrix" name="out" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="scalarAdd">
    <declaration type="int" name="rowCount" />
    <declaration type="int" name="columnCount" />
    <declaration type="RealMatrix" name="out" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="scalarMultiply">
    <declaration type="int" name="rowCount" />
    <declaration type="int" name="columnCount" />
    <declaration type="RealMatrix" name="out" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="multiply">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <declaration type="int" name="nSum" />
    <declaration type="RealMatrix" name="out" />
    <scope>
      <scope>
        <declaration type="double" name="sum" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="preMultiply" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="power">
    <scope />
    <scope />
    <scope />
    <scope />
    <declaration type="int" name="power" />
    <declaration type="char[]" name="binaryRepresentation" />
    <declaration type="ArrayList&lt;Integer&gt;" name="nonZeroPositions" />
    <declaration type="int" name="maxI" />
    <scope>
      <scope>
        <declaration type="int" name="pos" />
        <scope />
      </scope>
    </scope>
    <declaration type="RealMatrix[]" name="results" />
    <scope />
    <declaration type="RealMatrix" name="result" />
    <scope />
    <comment>Only log_2(p) operations is used by doing as follows:
 5^214 = 5^128  5^64  5^16  5^4  5^2

 In general, the same approach is used for A^p.</comment>
    <comment>The positions are taken in turn, so maxI is only changed once</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[][]" name="getData">
    <declaration type="double[][]" name="data" />
    <scope>
      <declaration type="double[]" name="dataI" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getNorm">
    <javadoc>
      <text>Last row index.</text>
    </javadoc>
    <declaration type="double" name="endRow" />
    <javadoc>
      <text>Sum of absolute values on one column.</text>
    </javadoc>
    <declaration type="double" name="columnSum" />
    <javadoc>
      <text>Maximal sum across all columns.</text>
    </javadoc>
    <declaration type="double" name="maxColSum" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="void" name="start" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="void" name="visit">
      <scope />
    </method>
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="end" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getFrobeniusNorm">
    <javadoc>
      <text>Sum of squared entries.</text>
    </javadoc>
    <declaration type="double" name="sum" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="void" name="start" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="void" name="visit" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="end" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="getSubMatrix">
    <declaration type="RealMatrix" name="subMatrix" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="getSubMatrix">
    <declaration type="RealMatrix" name="subMatrix" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="visit" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="copySubMatrix">
    <declaration type="int" name="rowsCount" />
    <declaration type="int" name="columnsCount" />
    <scope />
    <scope>
      <scope />
    </scope>
    <javadoc>
      <text>Initial row index.</text>
    </javadoc>
    <declaration type="int" name="startRow" />
    <javadoc>
      <text>Initial column index.</text>
    </javadoc>
    <declaration type="int" name="startColumn" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="void" name="start" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="void" name="visit" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="copySubMatrix">
    <declaration type="int" name="nCols" />
    <scope />
    <scope>
      <declaration type="double[]" name="destinationI" />
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setSubMatrix">
    <declaration type="int" name="nRows" />
    <scope />
    <declaration type="int" name="nCols" />
    <scope />
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="getRowMatrix">
    <declaration type="int" name="nCols" />
    <declaration type="RealMatrix" name="out" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setRowMatrix">
    <declaration type="int" name="nCols" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="getColumnMatrix">
    <declaration type="int" name="nRows" />
    <declaration type="RealMatrix" name="out" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setColumnMatrix">
    <declaration type="int" name="nRows" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="getRowVector" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setRowVector">
    <declaration type="int" name="nCols" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="getColumnVector" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setColumnVector">
    <declaration type="int" name="nRows" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[]" name="getRow">
    <declaration type="int" name="nCols" />
    <declaration type="double[]" name="out" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setRow">
    <declaration type="int" name="nCols" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[]" name="getColumn">
    <declaration type="int" name="nRows" />
    <declaration type="double[]" name="out" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setColumn">
    <declaration type="int" name="nRows" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="addToEntry" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="multiplyEntry" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="transpose">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <declaration type="RealMatrix" name="out" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="void" name="visit" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSquare" />
  <method name="getRowDimension" type="int" />
  <javadoc>
    <text>Returns the number of rows of this matrix.</text>
    <return>the number of rows.</return>
  </javadoc>
  <method name="getColumnDimension" type="int" />
  <javadoc>
    <text>Returns the number of columns of this matrix.</text>
    <return>the number of columns.</return>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getTrace">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <scope />
    <declaration type="double" name="trace" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[]" name="operate">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <scope />
    <declaration type="double[]" name="out" />
    <scope>
      <declaration type="double" name="sum" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="operate">
    <scope />
    <scope>
      <declaration type="int" name="nRows" />
      <declaration type="int" name="nCols" />
      <scope />
      <declaration type="double[]" name="out" />
      <scope>
        <declaration type="double" name="sum" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[]" name="preMultiply">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <scope />
    <declaration type="double[]" name="out" />
    <scope>
      <declaration type="double" name="sum" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="preMultiply">
    <scope />
    <scope>
      <declaration type="int" name="nRows" />
      <declaration type="int" name="nCols" />
      <scope />
      <declaration type="double[]" name="out" />
      <scope>
        <declaration type="double" name="sum" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInRowOrder">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <scope>
      <scope>
        <declaration type="double" name="oldValue" />
        <declaration type="double" name="newValue" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInRowOrder">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInRowOrder">
    <scope>
      <scope>
        <declaration type="double" name="oldValue" />
        <declaration type="double" name="newValue" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInRowOrder">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInColumnOrder">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <scope>
      <scope>
        <declaration type="double" name="oldValue" />
        <declaration type="double" name="newValue" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInColumnOrder">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInColumnOrder">
    <scope>
      <scope>
        <declaration type="double" name="oldValue" />
        <declaration type="double" name="newValue" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInColumnOrder">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInOptimizedOrder" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInOptimizedOrder" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInOptimizedOrder" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInOptimizedOrder" />
  <javadoc>
    <text>Get a string representation for this matrix.</text>
    <return>a string representation for this matrix</return>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuilder" name="res" />
    <declaration type="String" name="fullClassName" />
    <declaration type="String" name="shortClassName" />
  </method>
  <javadoc>
    <text>Returns true iff &lt;code&gt;object&lt;/code&gt; is a
 * &lt;code&gt;RealMatrix&lt;/code&gt; instance with the same dimensions as this
 * and all corresponding matrix entries are equal.</text>
    <param>object the object to test equality against.</param>
    <return>true if object equals this</return>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope />
    <declaration type="RealMatrix" name="m" />
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <scope />
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Computes a hashcode for the matrix.</text>
    <return>hashcode for matrix</return>
  </javadoc>
  <method type="int" name="hashCode">
    <declaration type="int" name="ret" />
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <scope>
      <scope />
    </scope>
  </method>
  <method name="createMatrix" type="RealMatrix" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method name="copy" type="RealMatrix" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method name="getEntry" type="double" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method name="setEntry" type="void" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>set the minimum fraction digits to 1 to keep compatibility</comment>
  <comment>Empty implementations of these methods are provided in order to allow for
 the use of the @Override tag with Java 1.5.</comment>
</class>
