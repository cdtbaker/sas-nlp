<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractIntegerDistribution">
  <javadoc>
    <text>Base class for integer-valued discrete distributions.  Default
 * implementations are provided for some of the methods that do not vary
 * from distribution to distribution.</text>
    <version>$Id: AbstractIntegerDistribution.java 1455716 2013-03-12 21:12:21Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>RandomData instance used to generate samples from the distribution.</text>
    <deprecated>As of 3.1, to be removed in 4.0. Please use the{@link #random} instance variable instead.</deprecated>
  </javadoc>
  <declaration type="RandomDataImpl" name="randomData" />
  <javadoc>
    <text>RNG instance used to generate samples from the distribution.</text>
    <since>3.1</since>
  </javadoc>
  <declaration type="RandomGenerator" name="random" />
  <javadoc>
    <deprecated>As of 3.1, to be removed in 4.0. Please use{@link #AbstractIntegerDistribution(RandomGenerator)} instead.</deprecated>
  </javadoc>
  <method type="constructor" name="AbstractIntegerDistribution">
    <comment>Legacy users are only allowed to access the deprecated "randomData".</comment>
    <comment>New users are forbidden to use this constructor.</comment>
  </method>
  <javadoc>
    <param>rng Random number generator.</param>
    <since>3.1</since>
  </javadoc>
  <method type="constructor" name="AbstractIntegerDistribution" />
  <javadoc>
    <text>{@inheritDoc}The default implementation uses the identity
 * &lt;p&gt;{@code P(x0 &lt; X &lt;= x1) = P(X &lt;= x1) - P(X &lt;= x0)}&lt;/p&gt;</text>
  </javadoc>
  <method type="double" name="cumulativeProbability">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}The default implementation returns
 * &lt;ul&gt;
 * &lt;li&gt;{@link #getSupportLowerBound()} for {@code p = 0},&lt;/li&gt;
 * &lt;li&gt;{@link #getSupportUpperBound()} for {@code p = 1}, and&lt;/li&gt;
 * &lt;li&gt;{@link #solveInverseCumulativeProbability(double,int,int)} for{@code 0 &lt; p &lt; 1}.&lt;/li&gt;
 * &lt;/ul&gt;</text>
  </javadoc>
  <method type="int" name="inverseCumulativeProbability">
    <scope />
    <declaration type="int" name="lower" />
    <scope />
    <scope>
      <scope />
    </scope>
    <scope />
    <declaration type="int" name="upper" />
    <scope />
    <declaration type="double" name="mu" />
    <declaration type="double" name="sigma" />
    <declaration type="boolean" name="chebyshevApplies" />
    <scope>
      <declaration type="double" name="k" />
      <declaration type="double" name="tmp" />
      <scope />
      <scope />
    </scope>
    <comment>this ensures cumulativeProbability(lower) &lt; p, which</comment>
    <comment>is important for the solving step</comment>
    <comment>use the one-sided Chebyshev inequality to narrow the bracket</comment>
    <comment>cf. AbstractRealDistribution.inverseCumulativeProbability(double)</comment>
  </method>
  <javadoc>
    <text>This is a utility function used by {@link #inverseCumulativeProbability(double)}. It assumes {@code 0 &lt; p &lt; 1} and
 * that the inverse cumulative probability lies in the bracket {@code(lower, upper]}. The implementation does simple bisection to find the
 * smallest {@code p}-quantile &lt;code&gt;inf{x in Z | P(X&lt;=x) &gt;= p}&lt;/code&gt;.</text>
    <param>p the cumulative probability</param>
    <param>lower a value satisfying {@code cumulativeProbability(lower) &lt; p}</param>
    <param>upper a value satisfying {@code p &lt;= cumulativeProbability(upper)}</param>
    <return>the smallest {@code p}-quantile of this distribution</return>
  </javadoc>
  <method type="int" name="solveInverseCumulativeProbability">
    <scope>
      <declaration type="int" name="xm" />
      <scope />
      <declaration type="double" name="pm" />
      <scope />
      <scope />
    </scope>
    <comment>Overflow.
 There will never be an overflow in both calculation methods
 for xm at the same time</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="reseedRandomGenerator" />
  <javadoc>
    <text>{@inheritDoc}The default implementation uses the
 * &lt;a href="http://en.wikipedia.org/wiki/Inverse_transform_sampling"&gt;
 * inversion method&lt;/a&gt;.</text>
  </javadoc>
  <method type="int" name="sample" />
  <javadoc>
    <text>{@inheritDoc}The default implementation generates the sample by calling{@link #sample()} in a loop.</text>
  </javadoc>
  <method type="int[]" name="sample">
    <scope />
    <declaration type="int[]" name="out" />
    <scope />
  </method>
  <javadoc>
    <text>Computes the cumulative probability function and checks for {@code NaN}values returned. Throws {@code MathInternalError} if the value is{@code NaN}. Rethrows any exception encountered evaluating the cumulative
 * probability function. Throws {@code MathInternalError} if the cumulative
 * probability function returns {@code NaN}.</text>
    <param>argument input value</param>
    <return>the cumulative probability</return>
    <throws>MathInternalError if the cumulative probability is {@code NaN}</throws>
  </javadoc>
  <method type="double" name="checkedCumulativeProbability">
    <declaration type="double" name="result" />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
