<?xml version="1.0" encoding="UTF-8"?>
<class name="Gaussian">
  <javadoc>
    <text>&lt;a href="http://en.wikipedia.org/wiki/Gaussian_function"&gt;
 * Gaussian&lt;/a&gt; function.</text>
    <since>3.0</since>
    <version>$Id: Gaussian.java 1455194 2013-03-11 15:45:54Z luc $</version>
  </javadoc>
  <javadoc>
    <text>Mean.</text>
  </javadoc>
  <declaration type="double" name="mean" />
  <javadoc>
    <text>Inverse of the standard deviation.</text>
  </javadoc>
  <declaration type="double" name="is" />
  <javadoc>
    <text>Inverse of twice the square of the standard deviation.</text>
  </javadoc>
  <declaration type="double" name="i2s2" />
  <javadoc>
    <text>Normalization factor.</text>
  </javadoc>
  <declaration type="double" name="norm" />
  <javadoc>
    <text>Gaussian with given normalization factor, mean and standard deviation.</text>
    <param>norm Normalization factor.</param>
    <param>mean Mean.</param>
    <param>sigma Standard deviation.</param>
    <throws>NotStrictlyPositiveException if {@code sigma &lt;= 0}.</throws>
  </javadoc>
  <method type="constructor" name="Gaussian">
    <scope />
  </method>
  <javadoc>
    <text>Normalized gaussian with given mean and standard deviation.</text>
    <param>mean Mean.</param>
    <param>sigma Standard deviation.</param>
    <throws>NotStrictlyPositiveException if {@code sigma &lt;= 0}.</throws>
  </javadoc>
  <method type="constructor" name="Gaussian" />
  <javadoc>
    <text>Normalized gaussian with zero mean and unit standard deviation.</text>
  </javadoc>
  <method type="constructor" name="Gaussian" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="value" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <deprecated>as of 3.1, replaced by {@link #value(DerivativeStructure)}</deprecated>
  </javadoc>
  <method type="UnivariateFunction" name="derivative" />
  <javadoc>
    <text>Parametric function where the input array contains the parameters of
 * the Gaussian, ordered as follows:
 * &lt;ul&gt;
 * &lt;li&gt;Norm&lt;/li&gt;
 * &lt;li&gt;Mean&lt;/li&gt;
 * &lt;li&gt;Standard deviation&lt;/li&gt;
 * &lt;/ul&gt;</text>
  </javadoc>
  <javadoc>
    <text>Computes the value of the Gaussian at {@code x}.</text>
    <param>x Value for which the function must be computed.</param>
    <param>param Values of norm, mean and standard deviation.</param>
    <return>the value of the function.</return>
    <throws>NullArgumentException if {@code param} is {@code null}.</throws>
    <throws>DimensionMismatchException if the size of {@code param} is
 * not 3.</throws>
    <throws>NotStrictlyPositiveException if {@code param[2]} is negative.</throws>
  </javadoc>
  <method type="double" name="value">
    <declaration type="double" name="diff" />
    <declaration type="double" name="i2s2" />
  </method>
  <javadoc>
    <text>Computes the value of the gradient at {@code x}.
 * The components of the gradient vector are the partial
 * derivatives of the function with respect to each of the
 * &lt;em&gt;parameters&lt;/em&gt; (norm, mean and standard deviation).</text>
    <param>x Value at which the gradient must be computed.</param>
    <param>param Values of norm, mean and standard deviation.</param>
    <return>the gradient vector at {@code x}.</return>
    <throws>NullArgumentException if {@code param} is {@code null}.</throws>
    <throws>DimensionMismatchException if the size of {@code param} is
 * not 3.</throws>
    <throws>NotStrictlyPositiveException if {@code param[2]} is negative.</throws>
  </javadoc>
  <method type="double[]" name="gradient">
    <declaration type="double" name="norm" />
    <declaration type="double" name="diff" />
    <declaration type="double" name="sigma" />
    <declaration type="double" name="i2s2" />
    <declaration type="double" name="n" />
    <declaration type="double" name="m" />
    <declaration type="double" name="s" />
  </method>
  <javadoc>
    <text>Validates parameters to ensure they are appropriate for the evaluation of
 * the {@link #value(double,double[])} and {@link #gradient(double,double[])}methods.</text>
    <param>param Values of norm, mean and standard deviation.</param>
    <throws>NullArgumentException if {@code param} is {@code null}.</throws>
    <throws>DimensionMismatchException if the size of {@code param} is
 * not 3.</throws>
    <throws>NotStrictlyPositiveException if {@code param[2]} is negative.</throws>
  </javadoc>
  <method type="void" name="validateParameters">
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <param>xMinusMean {@code x - mean}.</param>
    <param>norm Normalization factor.</param>
    <param>i2s2 Inverse of twice the square of the standard deviation.</param>
    <return>the value of the Gaussian at {@code x}.</return>
  </javadoc>
  <method type="double" name="value" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.1</since>
  </javadoc>
  <method type="DerivativeStructure" name="value">
    <declaration type="double" name="u" />
    <declaration type="double[]" name="f" />
    <declaration type="double[]" name="p" />
    <declaration type="double" name="u2" />
    <declaration type="double" name="coeff" />
    <scope />
    <scope>
      <scope>
        <declaration type="double" name="v" />
        <scope>
          <scope />
          <scope />
        </scope>
        <scope />
      </scope>
    </scope>
    <comment>the nth order derivative of the Gaussian has the form:</comment>
    <comment>dn(g(x)/dxn = (norm / s^n) P_n(u) exp(-u^2/2) with u=(x-m)/s</comment>
    <comment>where P_n(u) is a degree n polynomial with same parity as n</comment>
    <comment>P_0(u) = 1, P_1(u) = -u, P_2(u) = u^2 - 1, P_3(u) = -u^3 + 3 u...</comment>
    <comment>the general recurrence relation for P_n is:</comment>
    <comment>P_n(u) = P_(n-1)'(u) - u P_(n-1)(u)</comment>
    <comment>as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array</comment>
    <comment>update and evaluate polynomial P_n(x)</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
