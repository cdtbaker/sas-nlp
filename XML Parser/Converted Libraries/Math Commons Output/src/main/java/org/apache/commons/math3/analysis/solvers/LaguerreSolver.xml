<?xml version="1.0" encoding="UTF-8"?>
<class name="LaguerreSolver">
  <javadoc>
    <text>Implements the &lt;a href="http://mathworld.wolfram.com/LaguerresMethod.html"&gt;
 * Laguerre's Method&lt;/a&gt; for root finding of real coefficient polynomials.
 * For reference, see
 * &lt;quote&gt;
 * &lt;b&gt;A First Course in Numerical Analysis&lt;/b&gt;
 * ISBN 048641454X, chapter 8.
 * &lt;/quote&gt;
 * Laguerre's method is global in the sense that it can start with any initial
 * approximation and be able to solve all roots from that point.
 * The algorithm requires a bracketing condition.</text>
    <version>$Id: LaguerreSolver.java 1422195 2012-12-15 06:45:18Z psteitz $</version>
    <since>1.2</since>
  </javadoc>
  <javadoc>
    <text>Default absolute accuracy.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_ABSOLUTE_ACCURACY" />
  <javadoc>
    <text>Complex solver.</text>
  </javadoc>
  <declaration type="ComplexSolver" name="complexSolver" />
  <javadoc>
    <text>Construct a solver with default accuracy (1e-6).</text>
  </javadoc>
  <method type="constructor" name="LaguerreSolver" />
  <javadoc>
    <text>Construct a solver.</text>
    <param>absoluteAccuracy Absolute accuracy.</param>
  </javadoc>
  <method type="constructor" name="LaguerreSolver" />
  <javadoc>
    <text>Construct a solver.</text>
    <param>relativeAccuracy Relative accuracy.</param>
    <param>absoluteAccuracy Absolute accuracy.</param>
  </javadoc>
  <method type="constructor" name="LaguerreSolver" />
  <javadoc>
    <text>Construct a solver.</text>
    <param>relativeAccuracy Relative accuracy.</param>
    <param>absoluteAccuracy Absolute accuracy.</param>
    <param>functionValueAccuracy Function value accuracy.</param>
  </javadoc>
  <method type="constructor" name="LaguerreSolver" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="doSolve">
    <declaration type="double" name="min" />
    <declaration type="double" name="max" />
    <declaration type="double" name="initial" />
    <declaration type="double" name="functionValueAccuracy" />
    <declaration type="double" name="yInitial" />
    <scope />
    <declaration type="double" name="yMin" />
    <scope />
    <scope />
    <declaration type="double" name="yMax" />
    <scope />
    <scope />
    <comment>Return the initial guess if it is good enough.</comment>
    <comment>Return the first endpoint if it is good enough.</comment>
    <comment>Reduce interval if min and initial bracket the root.</comment>
    <comment>Return the second endpoint if it is good enough.</comment>
    <comment>Reduce interval if initial and max bracket the root.</comment>
  </method>
  <javadoc>
    <text>Find a real root in the given interval.
 * Despite the bracketing condition, the root returned by{@link LaguerreSolver.ComplexSolver#solve(Complex[],Complex)} may
 * not be a real zero inside {@code [min, max]}.
 * For example, &lt;code&gt;p(x) = x&lt;sup&gt;3&lt;/sup&gt; + 1,&lt;/code&gt;
 * with {@code min = -2}, {@code max = 2}, {@code initial = 0}.
 * When it occurs, this code calls{@link LaguerreSolver.ComplexSolver#solveAll(Complex[],Complex)}in order to obtain all roots and picks up one real root.</text>
    <param>lo Lower bound of the search interval.</param>
    <param>hi Higher bound of the search interval.</param>
    <param>fLo Function value at the lower bound of the search interval.</param>
    <param>fHi Function value at the higher bound of the search interval.</param>
    <return>the point at which the function value is zero.</return>
    <deprecated>This method should not be part of the public API: It will
 * be made private in version 4.0.</deprecated>
  </javadoc>
  <method type="double" name="laguerre">
    <declaration type="Complex[]" name="c" />
    <declaration type="Complex" name="initial" />
    <declaration type="Complex" name="z" />
    <scope />
    <scope>
      <declaration type="double" name="r" />
      <declaration type="Complex[]" name="root" />
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>Solve all roots and select the one we are seeking.</comment>
  </method>
  <javadoc>
    <text>Find all complex roots for the polynomial with the given
 * coefficients, starting from the given initial value.
 * &lt;br/&gt;
 * Note: This method is not part of the API of {@link BaseUnivariateSolver}.</text>
    <param>coefficients Polynomial coefficients.</param>
    <param>initial Start value.</param>
    <return>the point at which the function value is zero.</return>
    <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximum number of evaluations is exceeded.</throws>
    <throws>NullArgumentException if the {@code coefficients} is{@code null}.</throws>
    <throws>NoDataException if the {@code coefficients} array is empty.</throws>
    <since>3.1</since>
  </javadoc>
  <method type="Complex[]" name="solveAllComplex" />
  <javadoc>
    <text>Find a complex root for the polynomial with the given coefficients,
 * starting from the given initial value.
 * &lt;br/&gt;
 * Note: This method is not part of the API of {@link BaseUnivariateSolver}.</text>
    <param>coefficients Polynomial coefficients.</param>
    <param>initial Start value.</param>
    <return>the point at which the function value is zero.</return>
    <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximum number of evaluations is exceeded.</throws>
    <throws>NullArgumentException if the {@code coefficients} is{@code null}.</throws>
    <throws>NoDataException if the {@code coefficients} array is empty.</throws>
    <since>3.1</since>
  </javadoc>
  <method type="Complex" name="solveComplex" />
  <javadoc>
    <text>Class for searching all (complex) roots.</text>
  </javadoc>
  <javadoc>
    <text>Check whether the given complex root is actually a real zero
 * in the given interval, within the solver tolerance level.</text>
    <param>min Lower bound for the interval.</param>
    <param>max Upper bound for the interval.</param>
    <param>z Complex root.</param>
    <return>{@code true} if z is a real zero.</return>
  </javadoc>
  <method type="boolean" name="isRoot">
    <scope>
      <declaration type="double" name="tolerance" />
    </scope>
  </method>
  <javadoc>
    <text>Find all complex roots for the polynomial with the given
 * coefficients, starting from the given initial value.</text>
    <param>coefficients Polynomial coefficients.</param>
    <param>initial Start value.</param>
    <return>the point at which the function value is zero.</return>
    <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximum number of evaluations is exceeded.</throws>
    <throws>NullArgumentException if the {@code coefficients} is{@code null}.</throws>
    <throws>NoDataException if the {@code coefficients} array is empty.</throws>
  </javadoc>
  <method type="Complex[]" name="solveAll">
    <scope />
    <declaration type="int" name="n" />
    <scope />
    <declaration type="Complex[]" name="c" />
    <scope />
    <declaration type="Complex[]" name="root" />
    <scope>
      <declaration type="Complex[]" name="subarray" />
      <declaration type="Complex" name="newc" />
      <declaration type="Complex" name="oldc" />
      <scope />
    </scope>
    <comment>Coefficients for deflated polynomial.</comment>
    <comment>Solve individual roots successively.</comment>
    <comment>Polynomial deflation using synthetic division.</comment>
  </method>
  <javadoc>
    <text>Find a complex root for the polynomial with the given coefficients,
 * starting from the given initial value.</text>
    <param>coefficients Polynomial coefficients.</param>
    <param>initial Start value.</param>
    <return>the point at which the function value is zero.</return>
    <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximum number of evaluations is exceeded.</throws>
    <throws>NullArgumentException if the {@code coefficients} is{@code null}.</throws>
    <throws>NoDataException if the {@code coefficients} array is empty.</throws>
  </javadoc>
  <method type="Complex" name="solve">
    <scope />
    <declaration type="int" name="n" />
    <scope />
    <declaration type="double" name="absoluteAccuracy" />
    <declaration type="double" name="relativeAccuracy" />
    <declaration type="double" name="functionValueAccuracy" />
    <declaration type="Complex" name="nC" />
    <declaration type="Complex" name="n1C" />
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="oldz" />
    <scope>
      <declaration type="Complex" name="pv" />
      <declaration type="Complex" name="dv" />
      <declaration type="Complex" name="d2v" />
      <scope />
      <declaration type="double" name="tolerance" />
      <scope />
      <scope />
      <declaration type="Complex" name="G" />
      <declaration type="Complex" name="G2" />
      <declaration type="Complex" name="H" />
      <declaration type="Complex" name="delta" />
      <declaration type="Complex" name="deltaSqrt" />
      <declaration type="Complex" name="dplus" />
      <declaration type="Complex" name="dminus" />
      <declaration type="Complex" name="denominator" />
      <scope />
      <scope />
    </scope>
    <comment>Compute pv (polynomial value), dv (derivative value), and</comment>
    <comment>d2v (second derivative value) simultaneously.</comment>
    <comment>Check for convergence.</comment>
    <comment>Now pv != 0, calculate the new approximation.</comment>
    <comment>Choose a denominator larger in magnitude.</comment>
    <comment>Perturb z if denominator is zero, for instance,</comment>
    <comment>p(x) = x^3 + 1, z = 0.</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
