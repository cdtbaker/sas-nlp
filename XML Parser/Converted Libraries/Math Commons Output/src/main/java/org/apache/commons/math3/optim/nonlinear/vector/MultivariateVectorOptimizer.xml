<?xml version="1.0" encoding="UTF-8"?>
<class name="MultivariateVectorOptimizer">
  <javadoc>
    <text>Base class for a multivariate vector function optimizer.</text>
    <version>$Id: MultivariateVectorOptimizer.java 1443444 2013-02-07 12:41:36Z erans $</version>
    <since>3.1</since>
  </javadoc>
  <javadoc>
    <text>Target values for the model function at optimum.</text>
  </javadoc>
  <declaration type="double[]" name="target" />
  <javadoc>
    <text>Weight matrix.</text>
  </javadoc>
  <declaration type="RealMatrix" name="weightMatrix" />
  <javadoc>
    <text>Model function.</text>
  </javadoc>
  <declaration type="MultivariateVectorFunction" name="model" />
  <javadoc>
    <param>checker Convergence checker.</param>
  </javadoc>
  <method type="constructor" name="MultivariateVectorOptimizer" />
  <javadoc>
    <text>Computes the objective function value.
 * This method &lt;em&gt;must&lt;/em&gt; be called by subclasses to enforce the
 * evaluation counter limit.</text>
    <param>params Point at which the objective function must be evaluated.</param>
    <return>the objective function value at the specified point.</return>
    <throws>TooManyEvaluationsException if the maximal number of evaluations
 * (of the model vector function) is exceeded.</throws>
  </javadoc>
  <method type="double[]" name="computeObjectiveValue" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <param>optData Optimization data. In addition to those documented in{@link BaseMultivariateOptimizer#parseOptimizationData(OptimizationData[])BaseMultivariateOptimizer}, this method will register the following data:
 * &lt;ul&gt;
 * &lt;li&gt;{@link Target}&lt;/li&gt;
 * &lt;li&gt;{@link Weight}&lt;/li&gt;
 * &lt;li&gt;{@link ModelFunction}&lt;/li&gt;
 * &lt;/ul&gt;</param>
    <return>{@inheritDoc}</return>
    <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
    <throws>DimensionMismatchException if the initial guess, target, and weight
 * arguments have inconsistent dimensions.</throws>
  </javadoc>
  <method type="PointVectorValuePair" name="optimize">
    <comment>Set up base class and perform computation.</comment>
  </method>
  <javadoc>
    <text>Gets the weight matrix of the observations.</text>
    <return>the weight matrix.</return>
  </javadoc>
  <method type="RealMatrix" name="getWeight" />
  <javadoc>
    <text>Gets the observed values to be matched by the objective vector
 * function.</text>
    <return>the target values.</return>
  </javadoc>
  <method type="double[]" name="getTarget" />
  <javadoc>
    <text>Gets the number of observed values.</text>
    <return>the length of the target vector.</return>
  </javadoc>
  <method type="int" name="getTargetSize" />
  <javadoc>
    <text>Scans the list of (required and optional) optimization data that
 * characterize the problem.</text>
    <param>optData Optimization data. The following data will be looked for:
 * &lt;ul&gt;
 * &lt;li&gt;{@link Target}&lt;/li&gt;
 * &lt;li&gt;{@link Weight}&lt;/li&gt;
 * &lt;li&gt;{@link ModelFunction}&lt;/li&gt;
 * &lt;/ul&gt;</param>
  </javadoc>
  <method type="void" name="parseOptimizationData">
    <scope>
      <scope />
      <scope />
      <scope />
    </scope>
    <comment>Allow base class to register its own data.</comment>
    <comment>The existing values (as set by the previous call) are reused if</comment>
    <comment>not provided in the argument list.</comment>
    <comment>Check input consistency.</comment>
  </method>
  <javadoc>
    <text>Check parameters consistency.</text>
    <throws>DimensionMismatchException if {@link #target} and{@link #weightMatrix} have inconsistent dimensions.</throws>
  </javadoc>
  <method type="void" name="checkParameters">
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
