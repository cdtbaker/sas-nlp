<?xml version="1.0" encoding="UTF-8"?>
<class name="TransformUtils">
  <javadoc>
    <text>Useful functions for the implementation of various transforms.</text>
    <version>$Id: TransformUtils.java 1385310 2012-09-16 16:32:10Z tn $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Table of the powers of 2 to facilitate binary search lookup.</text>
    <see>#exactLog2(int)</see>
  </javadoc>
  <declaration type="int[]" name="POWERS_OF_TWO" />
  <javadoc>
    <text>Private constructor.</text>
  </javadoc>
  <method type="constructor" name="TransformUtils" />
  <javadoc>
    <text>Multiply every component in the given real array by the
 * given real number. The change is made in place.</text>
    <param>f the real array to be scaled</param>
    <param>d the real scaling coefficient</param>
    <return>a reference to the scaled array</return>
  </javadoc>
  <method type="double[]" name="scaleArray">
    <scope />
  </method>
  <javadoc>
    <text>Multiply every component in the given complex array by the
 * given real number. The change is made in place.</text>
    <param>f the complex array to be scaled</param>
    <param>d the real scaling coefficient</param>
    <return>a reference to the scaled array</return>
  </javadoc>
  <method type="Complex[]" name="scaleArray">
    <scope />
  </method>
  <javadoc>
    <text>Builds a new two dimensional array of {@code double} filled with the real
 * and imaginary parts of the specified {@link Complex} numbers. In the
 * returned array {@code dataRI}, the data is laid out as follows
 * &lt;ul&gt;
 * &lt;li&gt;{@code dataRI[0][i] = dataC[i].getReal()},&lt;/li&gt;
 * &lt;li&gt;{@code dataRI[1][i] = dataC[i].getImaginary()}.&lt;/li&gt;
 * &lt;/ul&gt;</text>
    <param>dataC the array of {@link Complex} data to be transformed</param>
    <return>a two dimensional array filled with the real and imaginary parts
 * of the specified complex input</return>
  </javadoc>
  <method type="double[][]" name="createRealImaginaryArray">
    <declaration type="double[][]" name="dataRI" />
    <declaration type="double[]" name="dataR" />
    <declaration type="double[]" name="dataI" />
    <scope>
      <declaration type="Complex" name="c" />
    </scope>
  </method>
  <javadoc>
    <text>Builds a new array of {@link Complex} from the specified two dimensional
 * array of real and imaginary parts. In the returned array {@code dataC},
 * the data is laid out as follows
 * &lt;ul&gt;
 * &lt;li&gt;{@code dataC[i].getReal() = dataRI[0][i]},&lt;/li&gt;
 * &lt;li&gt;{@code dataC[i].getImaginary() = dataRI[1][i]}.&lt;/li&gt;
 * &lt;/ul&gt;</text>
    <param>dataRI the array of real and imaginary parts to be transformed</param>
    <return>an array of {@link Complex} with specified real and imaginary parts.</return>
    <throws>DimensionMismatchException if the number of rows of the specified
 * array is not two, or the array is not rectangular</throws>
  </javadoc>
  <method type="Complex[]" name="createComplexArray">
    <scope />
    <declaration type="double[]" name="dataR" />
    <declaration type="double[]" name="dataI" />
    <scope />
    <declaration type="int" name="n" />
    <declaration type="Complex[]" name="c" />
    <scope />
  </method>
  <javadoc>
    <text>Returns the base-2 logarithm of the specified {@code int}. Throws an
 * exception if {@code n} is not a power of two.</text>
    <param>n the {@code int} whose base-2 logarithm is to be evaluated</param>
    <return>the base-2 logarithm of {@code n}</return>
    <throws>MathIllegalArgumentException if {@code n} is not a power of two</throws>
  </javadoc>
  <method type="int" name="exactLog2">
    <declaration type="int" name="index" />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
