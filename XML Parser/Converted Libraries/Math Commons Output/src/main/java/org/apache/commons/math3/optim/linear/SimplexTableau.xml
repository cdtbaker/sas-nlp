<?xml version="1.0" encoding="UTF-8"?>
<class name="SimplexTableau">
  <javadoc>
    <text>A tableau for use in the Simplex method.
 * &lt;p&gt;
 * Example:
 * &lt;pre&gt;
 * W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS
 * ---------------------------------------------------
 * -1    0    0     0     0     0     0     1     0   &amp;lt;= phase 1 objective
 * 0    1   -15   -10    0     0     0     0     0   &amp;lt;= phase 2 objective
 * 0    0    1     0     0     1     0     0     2   &amp;lt;= constraint 1
 * 0    0    0     1     0     0     1     0     3   &amp;lt;= constraint 2
 * 0    0    1     1     0     0     0     1     4   &amp;lt;= constraint 3
 * &lt;/pre&gt;
 * W: Phase 1 objective function&lt;/br&gt;
 * Z: Phase 2 objective function&lt;/br&gt;
 * x1 &amp;amp; x2: Decision variables&lt;/br&gt;
 * x-: Extra decision variable to allow for negative values&lt;/br&gt;
 * s1 &amp;amp; s2: Slack/Surplus variables&lt;/br&gt;
 * a1: Artificial variable&lt;/br&gt;
 * RHS: Right hand side&lt;/br&gt;
 * &lt;/p&gt;</text>
    <version>$Id: SimplexTableau.java 1435810 2013-01-20 10:04:45Z tn $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>Column label for negative vars.</text>
  </javadoc>
  <declaration type="String" name="NEGATIVE_VAR_COLUMN_LABEL" />
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Linear objective function.</text>
  </javadoc>
  <declaration type="LinearObjectiveFunction" name="f" />
  <javadoc>
    <text>Linear constraints.</text>
  </javadoc>
  <declaration type="List&lt;LinearConstraint&gt;" name="constraints" />
  <javadoc>
    <text>Whether to restrict the variables to non-negative values.</text>
  </javadoc>
  <declaration type="boolean" name="restrictToNonNegative" />
  <javadoc>
    <text>The variables each column represents</text>
  </javadoc>
  <declaration type="List&lt;String&gt;" name="columnLabels" />
  <javadoc>
    <text>Simple tableau.</text>
  </javadoc>
  <declaration type="RealMatrix" name="tableau" />
  <javadoc>
    <text>Number of decision variables.</text>
  </javadoc>
  <declaration type="int" name="numDecisionVariables" />
  <javadoc>
    <text>Number of slack variables.</text>
  </javadoc>
  <declaration type="int" name="numSlackVariables" />
  <javadoc>
    <text>Number of artificial variables.</text>
  </javadoc>
  <declaration type="int" name="numArtificialVariables" />
  <javadoc>
    <text>Amount of error to accept when checking for optimality.</text>
  </javadoc>
  <declaration type="double" name="epsilon" />
  <javadoc>
    <text>Amount of error to accept in floating point comparisons.</text>
  </javadoc>
  <declaration type="int" name="maxUlps" />
  <javadoc>
    <text>Cut-off value for entries in the tableau.</text>
  </javadoc>
  <declaration type="double" name="cutOff" />
  <javadoc>
    <text>Builds a tableau for a linear problem.</text>
    <param>f Linear objective function.</param>
    <param>constraints Linear constraints.</param>
    <param>goalType Optimization goal: either {@link GoalType#MAXIMIZE}or {@link GoalType#MINIMIZE}.</param>
    <param>restrictToNonNegative Whether to restrict the variables to non-negative values.</param>
    <param>epsilon Amount of error to accept when checking for optimality.</param>
  </javadoc>
  <method type="constructor" name="SimplexTableau" />
  <javadoc>
    <text>Build a tableau for a linear problem.</text>
    <param>f linear objective function</param>
    <param>constraints linear constraints</param>
    <param>goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}</param>
    <param>restrictToNonNegative whether to restrict the variables to non-negative values</param>
    <param>epsilon amount of error to accept when checking for optimality</param>
    <param>maxUlps amount of error to accept in floating point comparisons</param>
  </javadoc>
  <method type="constructor" name="SimplexTableau" />
  <javadoc>
    <text>Build a tableau for a linear problem.</text>
    <param>f linear objective function</param>
    <param>constraints linear constraints</param>
    <param>goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}</param>
    <param>restrictToNonNegative whether to restrict the variables to non-negative values</param>
    <param>epsilon amount of error to accept when checking for optimality</param>
    <param>maxUlps amount of error to accept in floating point comparisons</param>
    <param>cutOff the cut-off value for tableau entries</param>
  </javadoc>
  <method type="constructor" name="SimplexTableau" />
  <javadoc>
    <text>Initialize the labels for the columns.</text>
  </javadoc>
  <method type="void" name="initializeColumnLabels">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Create the tableau by itself.</text>
    <param>maximize if true, goal is to maximize the objective function</param>
    <return>created tableau</return>
  </javadoc>
  <method type="RealMatrix" name="createTableau">
    <declaration type="int" name="width" />
    <declaration type="int" name="height" />
    <declaration type="Array2DRowRealMatrix" name="matrix" />
    <scope />
    <declaration type="int" name="zIndex" />
    <declaration type="RealVector" name="objectiveCoefficients" />
    <scope />
    <declaration type="int" name="slackVar" />
    <declaration type="int" name="artificialVar" />
    <scope>
      <declaration type="LinearConstraint" name="constraint" />
      <declaration type="int" name="row" />
      <scope />
      <scope />
      <scope />
      <scope />
    </scope>
    <comment>create a matrix of the correct size</comment>
    <comment>+ 1 is for RHS</comment>
    <comment>initialize the objective function rows</comment>
    <comment>initialize the constraint rows</comment>
    <comment>decision variable coefficients</comment>
    <comment>x-</comment>
    <comment>RHS</comment>
    <comment>slack variables</comment>
    <comment>slack</comment>
    <comment>excess</comment>
    <comment>artificial variables</comment>
  </method>
  <javadoc>
    <text>Get new versions of the constraints which have positive right hand sides.</text>
    <param>originalConstraints original (not normalized) constraints</param>
    <return>new versions of the constraints</return>
  </javadoc>
  <method type="List&lt;LinearConstraint&gt;" name="normalizeConstraints">
    <declaration type="List&lt;LinearConstraint&gt;" name="normalized" />
    <scope />
  </method>
  <javadoc>
    <text>Get a new equation equivalent to this one with a positive right hand side.</text>
    <param>constraint reference constraint</param>
    <return>new equation</return>
  </javadoc>
  <method type="LinearConstraint" name="normalize">
    <scope />
  </method>
  <javadoc>
    <text>Get the number of objective functions in this tableau.</text>
    <return>2 for Phase 1.  1 for Phase 2.</return>
  </javadoc>
  <method type="int" name="getNumObjectiveFunctions" />
  <javadoc>
    <text>Get a count of constraints corresponding to a specified relationship.</text>
    <param>relationship relationship to count</param>
    <return>number of constraint with the specified relationship</return>
  </javadoc>
  <method type="int" name="getConstraintTypeCounts">
    <declaration type="int" name="count" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Get the -1 times the sum of all coefficients in the given array.</text>
    <param>coefficients coefficients to sum</param>
    <return>the -1 times the sum of all coefficients in the given array.</return>
  </javadoc>
  <method type="double" name="getInvertedCoefficientSum">
    <declaration type="double" name="sum" />
    <scope />
  </method>
  <javadoc>
    <text>Checks whether the given column is basic.</text>
    <param>col index of the column to check</param>
    <return>the row that the variable is basic in.  null if the column is not basic</return>
  </javadoc>
  <method type="Integer" name="getBasicRow">
    <declaration type="Integer" name="row" />
    <scope>
      <declaration type="double" name="entry" />
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Removes the phase 1 objective function, positive cost non-artificial variables,
 * and the non-basic artificial variables from this tableau.</text>
  </javadoc>
  <method type="void" name="dropPhase1Objective">
    <scope />
    <declaration type="Set&lt;Integer&gt;" name="columnsToDrop" />
    <scope>
      <declaration type="double" name="entry" />
      <scope />
    </scope>
    <scope>
      <declaration type="int" name="col" />
      <scope />
    </scope>
    <declaration type="double[][]" name="matrix" />
    <scope>
      <declaration type="int" name="col" />
      <scope>
        <scope />
      </scope>
    </scope>
    <declaration type="Integer[]" name="drop" />
    <scope />
    <comment>positive cost non-artificial variables</comment>
    <comment>non-basic artificial variables</comment>
    <comment>remove the columns in reverse order so the indices are correct</comment>
  </method>
  <javadoc>
    <param>src the source array</param>
    <param>dest the destination array</param>
  </javadoc>
  <method type="void" name="copyArray" />
  <javadoc>
    <text>Returns whether the problem is at an optimal state.</text>
    <return>whether the model has been solved</return>
  </javadoc>
  <method type="boolean" name="isOptimal">
    <scope>
      <declaration type="double" name="entry" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Get the current solution.</text>
    <return>current solution</return>
  </javadoc>
  <method type="PointValuePair" name="getSolution">
    <declaration type="int" name="negativeVarColumn" />
    <declaration type="Integer" name="negativeVarBasicRow" />
    <declaration type="double" name="mostNegative" />
    <declaration type="Set&lt;Integer&gt;" name="basicRows" />
    <declaration type="double[]" name="coefficients" />
    <scope>
      <declaration type="int" name="colIndex" />
      <scope />
      <declaration type="Integer" name="basicRow" />
      <scope />
      <scope />
      <scope />
    </scope>
    <comment>if the basic row is found to be the objective function row</comment>
    <comment>set the coefficient to 0 -&gt; this case handles unconstrained</comment>
    <comment>variables that are still part of the objective function</comment>
    <comment>if multiple variables can take a given value</comment>
    <comment>then we choose the first and set the rest equal to 0</comment>
  </method>
  <javadoc>
    <text>Subtracts a multiple of one row from another.
 * &lt;p&gt;
 * After application of this operation, the following will hold:
 * &lt;pre&gt;minuendRow = minuendRow - multiple * subtrahendRow&lt;/pre&gt;</text>
    <param>dividendRow index of the row</param>
    <param>divisor value of the divisor</param>
  </javadoc>
  <method type="void" name="divideRow">
    <scope />
  </method>
  <javadoc>
    <text>Subtracts a multiple of one row from another.
 * &lt;p&gt;
 * After application of this operation, the following will hold:
 * &lt;pre&gt;minuendRow = minuendRow - multiple * subtrahendRow&lt;/pre&gt;</text>
    <param>minuendRow row index</param>
    <param>subtrahendRow row index</param>
    <param>multiple multiplication factor</param>
  </javadoc>
  <method type="void" name="subtractRow">
    <scope>
      <declaration type="double" name="result" />
      <scope />
    </scope>
    <comment>cut-off values smaller than the cut-off threshold, otherwise may lead to numerical instabilities</comment>
  </method>
  <javadoc>
    <text>Get the width of the tableau.</text>
    <return>width of the tableau</return>
  </javadoc>
  <method type="int" name="getWidth" />
  <javadoc>
    <text>Get the height of the tableau.</text>
    <return>height of the tableau</return>
  </javadoc>
  <method type="int" name="getHeight" />
  <javadoc>
    <text>Get an entry of the tableau.</text>
    <param>row row index</param>
    <param>column column index</param>
    <return>entry at (row, column)</return>
  </javadoc>
  <method type="double" name="getEntry" />
  <javadoc>
    <text>Set an entry of the tableau.</text>
    <param>row row index</param>
    <param>column column index</param>
    <param>value for the entry</param>
  </javadoc>
  <method type="void" name="setEntry" />
  <javadoc>
    <text>Get the offset of the first slack variable.</text>
    <return>offset of the first slack variable</return>
  </javadoc>
  <method type="int" name="getSlackVariableOffset" />
  <javadoc>
    <text>Get the offset of the first artificial variable.</text>
    <return>offset of the first artificial variable</return>
  </javadoc>
  <method type="int" name="getArtificialVariableOffset" />
  <javadoc>
    <text>Get the offset of the right hand side.</text>
    <return>offset of the right hand side</return>
  </javadoc>
  <method type="int" name="getRhsOffset" />
  <javadoc>
    <text>Get the number of decision variables.
 * &lt;p&gt;
 * If variables are not restricted to positive values, this will include 1 extra decision variable to represent
 * the absolute value of the most negative variable.</text>
    <return>number of decision variables</return>
    <see>#getOriginalNumDecisionVariables()</see>
  </javadoc>
  <method type="int" name="getNumDecisionVariables" />
  <javadoc>
    <text>Get the original number of decision variables.</text>
    <return>original number of decision variables</return>
    <see>#getNumDecisionVariables()</see>
  </javadoc>
  <method type="int" name="getOriginalNumDecisionVariables" />
  <javadoc>
    <text>Get the number of slack variables.</text>
    <return>number of slack variables</return>
  </javadoc>
  <method type="int" name="getNumSlackVariables" />
  <javadoc>
    <text>Get the number of artificial variables.</text>
    <return>number of artificial variables</return>
  </javadoc>
  <method type="int" name="getNumArtificialVariables" />
  <javadoc>
    <text>Get the tableau data.</text>
    <return>tableau data</return>
  </javadoc>
  <method type="double[][]" name="getData" />
  <method type="boolean" name="equals">
    <scope />
    <scope>
      <declaration type="SimplexTableau" name="rhs" />
    </scope>
  </method>
  <method type="int" name="hashCode" />
  <javadoc>
    <text>Serialize the instance.</text>
    <param>oos stream where object should be written</param>
    <throws>IOException if object cannot be written to stream</throws>
  </javadoc>
  <method type="void" name="writeObject" />
  <javadoc>
    <text>Deserialize the instance.</text>
    <param>ois stream from which the object should be read</param>
    <throws>ClassNotFoundException if a class in the stream cannot be found</throws>
    <throws>IOException if object cannot be read from the stream</throws>
  </javadoc>
  <method type="void" name="readObject" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
