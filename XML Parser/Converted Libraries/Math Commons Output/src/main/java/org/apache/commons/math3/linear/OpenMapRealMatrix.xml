<?xml version="1.0" encoding="UTF-8"?>
<class name="OpenMapRealMatrix">
  <javadoc>
    <text>Sparse matrix implementation based on an open addressed map.</text>
    <version>$Id: OpenMapRealMatrix.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>2.0</since>
    <deprecated>As of version 3.1, this class is deprecated, for reasons exposed
 * in this JIRA
 * &lt;a href="https://issues.apache.org/jira/browse/MATH-870"&gt;ticket&lt;/a&gt;. This
 * class will be removed in version 4.0.</deprecated>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Number of rows of the matrix.</text>
  </javadoc>
  <declaration type="int" name="rows" />
  <javadoc>
    <text>Number of columns of the matrix.</text>
  </javadoc>
  <declaration type="int" name="columns" />
  <javadoc>
    <text>Storage for (sparse) matrix elements.</text>
  </javadoc>
  <declaration type="OpenIntToDoubleHashMap" name="entries" />
  <javadoc>
    <text>Build a sparse matrix with the supplied row and column dimensions.</text>
    <param>rowDimension Number of rows of the matrix.</param>
    <param>columnDimension Number of columns of the matrix.</param>
    <throws>NotStrictlyPositiveException if row or column dimension is not
 * positive.</throws>
    <throws>NumberIsTooLargeException if the total number of entries of the
 * matrix is larger than {@code Integer.MAX_VALUE}.</throws>
  </javadoc>
  <method type="constructor" name="OpenMapRealMatrix">
    <declaration type="long" name="lRow" />
    <declaration type="long" name="lCol" />
    <scope />
  </method>
  <javadoc>
    <text>Build a matrix by copying another one.</text>
    <param>matrix matrix to copy.</param>
  </javadoc>
  <method type="constructor" name="OpenMapRealMatrix" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="OpenMapRealMatrix" name="copy" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <throws>NumberIsTooLargeException if the total number of entries of the
 * matrix is larger than {@code Integer.MAX_VALUE}.</throws>
  </javadoc>
  <method type="OpenMapRealMatrix" name="createMatrix" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getColumnDimension" />
  <javadoc>
    <text>Compute the sum of this matrix and {@code m}.</text>
    <param>m Matrix to be added.</param>
    <return>{@code this} + {@code m}.</return>
    <throws>MatrixDimensionMismatchException if {@code m} is not the same
 * size as {@code this}.</throws>
  </javadoc>
  <method type="OpenMapRealMatrix" name="add">
    <declaration type="OpenMapRealMatrix" name="out" />
    <scope>
      <declaration type="int" name="row" />
      <declaration type="int" name="col" />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="OpenMapRealMatrix" name="subtract">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Subtract {@code m} from this matrix.</text>
    <param>m Matrix to be subtracted.</param>
    <return>{@code this} - {@code m}.</return>
    <throws>MatrixDimensionMismatchException if {@code m} is not the same
 * size as {@code this}.</throws>
  </javadoc>
  <method type="OpenMapRealMatrix" name="subtract">
    <declaration type="OpenMapRealMatrix" name="out" />
    <scope>
      <declaration type="int" name="row" />
      <declaration type="int" name="col" />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <throws>NumberIsTooLargeException if {@code m} is an{@code OpenMapRealMatrix}, and the total number of entries of the product
 * is larger than {@code Integer.MAX_VALUE}.</throws>
  </javadoc>
  <method type="RealMatrix" name="multiply">
    <scope />
    <scope>
      <declaration type="int" name="outCols" />
      <declaration type="BlockRealMatrix" name="out" />
      <scope>
        <declaration type="double" name="value" />
        <declaration type="int" name="key" />
        <declaration type="int" name="i" />
        <declaration type="int" name="k" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Postmultiply this matrix by {@code m}.</text>
    <param>m Matrix to postmultiply by.</param>
    <return>{@code this} * {@code m}.</return>
    <throws>DimensionMismatchException if the number of rows of {@code m}differ from the number of columns of {@code this} matrix.</throws>
    <throws>NumberIsTooLargeException if the total number of entries of the
 * product is larger than {@code Integer.MAX_VALUE}.</throws>
  </javadoc>
  <method type="OpenMapRealMatrix" name="multiply">
    <declaration type="int" name="outCols" />
    <declaration type="OpenMapRealMatrix" name="out" />
    <scope>
      <declaration type="double" name="value" />
      <declaration type="int" name="key" />
      <declaration type="int" name="i" />
      <declaration type="int" name="k" />
      <scope>
        <declaration type="int" name="rightKey" />
        <scope>
          <declaration type="int" name="outKey" />
          <declaration type="double" name="outValue" />
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>Safety check.</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getEntry" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getRowDimension" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setEntry">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="addToEntry">
    <declaration type="int" name="key" />
    <declaration type="double" name="value" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="multiplyEntry">
    <declaration type="int" name="key" />
    <declaration type="double" name="value" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Compute the key to access a matrix element</text>
    <param>row row index of the matrix element</param>
    <param>column column index of the matrix element</param>
    <return>key within the map to access the matrix element</return>
  </javadoc>
  <method type="int" name="computeKey" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
