<?xml version="1.0" encoding="UTF-8"?>
<class name="BicubicSplineInterpolatingFunction">
  <javadoc>
    <text>Function that implements the
 * &lt;a href="http://en.wikipedia.org/wiki/Bicubic_interpolation"&gt;
 * bicubic spline interpolation&lt;/a&gt;.</text>
    <since>2.1</since>
    <version>$Id: BicubicSplineInterpolatingFunction.java 1379904 2012-09-01 23:54:52Z erans $</version>
  </javadoc>
  <javadoc>
    <text>Matrix to compute the spline coefficients from the function values
 * and function derivatives values</text>
  </javadoc>
  <declaration type="double[][]" name="AINV" />
  <javadoc>
    <text>Samples x-coordinates</text>
  </javadoc>
  <declaration type="double[]" name="xval" />
  <javadoc>
    <text>Samples y-coordinates</text>
  </javadoc>
  <declaration type="double[]" name="yval" />
  <javadoc>
    <text>Set of cubic splines patching the whole data grid</text>
  </javadoc>
  <declaration type="BicubicSplineFunction[][]" name="splines" />
  <javadoc>
    <text>Partial derivatives
 * The value of the first index determines the kind of derivatives:
 * 0 = first partial derivatives wrt x
 * 1 = first partial derivatives wrt y
 * 2 = second partial derivatives wrt x
 * 3 = second partial derivatives wrt y
 * 4 = cross partial derivatives</text>
  </javadoc>
  <declaration type="BivariateFunction[][][]" name="partialDerivatives" />
  <javadoc>
    <param>x Sample values of the x-coordinate, in increasing order.</param>
    <param>y Sample values of the y-coordinate, in increasing order.</param>
    <param>f Values of the function on every grid point.</param>
    <param>dFdX Values of the partial derivative of function with respect
 * to x on every grid point.</param>
    <param>dFdY Values of the partial derivative of function with respect
 * to y on every grid point.</param>
    <param>d2FdXdY Values of the cross partial derivative of function on
 * every grid point.</param>
    <throws>DimensionMismatchException if the various arrays do not contain
 * the expected number of elements.</throws>
    <throws>NonMonotonicSequenceException if {@code x} or {@code y} are
 * not strictly increasing.</throws>
    <throws>NoDataException if any of the arrays has zero length.</throws>
  </javadoc>
  <method type="constructor" name="BicubicSplineInterpolatingFunction">
    <declaration type="int" name="xLen" />
    <declaration type="int" name="yLen" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <declaration type="int" name="lastI" />
    <declaration type="int" name="lastJ" />
    <scope>
      <scope />
      <scope />
      <scope />
      <scope />
      <declaration type="int" name="ip1" />
      <scope>
        <declaration type="int" name="jp1" />
        <declaration type="double[][]" name="beta" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="value">
    <declaration type="int" name="i" />
    <scope />
    <declaration type="int" name="j" />
    <scope />
    <declaration type="double" name="xN" />
    <declaration type="double" name="yN" />
  </method>
  <javadoc>
    <param>x x-coordinate.</param>
    <param>y y-coordinate.</param>
    <return>the value at point (x, y) of the first partial derivative with
 * respect to x.</return>
    <throws>OutOfRangeException if {@code x} (resp. {@code y}) is outside
 * the range defined by the boundary values of {@code xval} (resp.{@code yval}).</throws>
  </javadoc>
  <method type="double" name="partialDerivativeX" />
  <javadoc>
    <param>x x-coordinate.</param>
    <param>y y-coordinate.</param>
    <return>the value at point (x, y) of the first partial derivative with
 * respect to y.</return>
    <throws>OutOfRangeException if {@code x} (resp. {@code y}) is outside
 * the range defined by the boundary values of {@code xval} (resp.{@code yval}).</throws>
  </javadoc>
  <method type="double" name="partialDerivativeY" />
  <javadoc>
    <param>x x-coordinate.</param>
    <param>y y-coordinate.</param>
    <return>the value at point (x, y) of the second partial derivative with
 * respect to x.</return>
    <throws>OutOfRangeException if {@code x} (resp. {@code y}) is outside
 * the range defined by the boundary values of {@code xval} (resp.{@code yval}).</throws>
  </javadoc>
  <method type="double" name="partialDerivativeXX" />
  <javadoc>
    <param>x x-coordinate.</param>
    <param>y y-coordinate.</param>
    <return>the value at point (x, y) of the second partial derivative with
 * respect to y.</return>
    <throws>OutOfRangeException if {@code x} (resp. {@code y}) is outside
 * the range defined by the boundary values of {@code xval} (resp.{@code yval}).</throws>
  </javadoc>
  <method type="double" name="partialDerivativeYY" />
  <javadoc>
    <param>x x-coordinate.</param>
    <param>y y-coordinate.</param>
    <return>the value at point (x, y) of the second partial cross-derivative.</return>
    <throws>OutOfRangeException if {@code x} (resp. {@code y}) is outside
 * the range defined by the boundary values of {@code xval} (resp.{@code yval}).</throws>
  </javadoc>
  <method type="double" name="partialDerivativeXY" />
  <javadoc>
    <param>which First index in {@link #partialDerivatives}.</param>
    <param>x x-coordinate.</param>
    <param>y y-coordinate.</param>
    <return>the value at point (x, y) of the selected partial derivative.</return>
    <throws>OutOfRangeException if {@code x} (resp. {@code y}) is outside
 * the range defined by the boundary values of {@code xval} (resp.{@code yval}).</throws>
  </javadoc>
  <method type="double" name="partialDerivative">
    <scope />
    <declaration type="int" name="i" />
    <scope />
    <declaration type="int" name="j" />
    <scope />
    <declaration type="double" name="xN" />
    <declaration type="double" name="yN" />
  </method>
  <javadoc>
    <text>Compute all partial derivatives.</text>
  </javadoc>
  <method type="void" name="computePartialDerivatives">
    <declaration type="int" name="lastI" />
    <declaration type="int" name="lastJ" />
    <scope>
      <scope>
        <declaration type="BicubicSplineFunction" name="f" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <param>c Coordinate.</param>
    <param>val Coordinate samples.</param>
    <return>the index in {@code val} corresponding to the interval
 * containing {@code c}, or {@code -1} if {@code c} is out of the
 * range defined by the boundary values of {@code val}.</return>
  </javadoc>
  <method type="int" name="searchIndex">
    <scope />
    <declaration type="int" name="max" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Compute the spline coefficients from the list of function values and
 * function partial derivatives values at the four corners of a grid
 * element. They must be specified in the following order:
 * &lt;ul&gt;
 * &lt;li&gt;f(0,0)&lt;/li&gt;
 * &lt;li&gt;f(1,0)&lt;/li&gt;
 * &lt;li&gt;f(0,1)&lt;/li&gt;
 * &lt;li&gt;f(1,1)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(0,0)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(1,0)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(0,1)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;x&lt;/sub&gt;(1,1)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(0,0)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(1,0)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(0,1)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;y&lt;/sub&gt;(1,1)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(0,0)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(1,0)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(0,1)&lt;/li&gt;
 * &lt;li&gt;f&lt;sub&gt;xy&lt;/sub&gt;(1,1)&lt;/li&gt;
 * &lt;/ul&gt;
 * where the subscripts indicate the partial derivative with respect to
 * the corresponding variable(s).</text>
    <param>beta List of function values and function partial derivatives
 * values.</param>
    <return>the spline coefficients.</return>
  </javadoc>
  <method type="double[]" name="computeSplineCoefficients">
    <declaration type="double[]" name="a" />
    <scope>
      <declaration type="double" name="result" />
      <declaration type="double[]" name="row" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>2D-spline function.</text>
    <version>$Id: BicubicSplineInterpolatingFunction.java 1379904 2012-09-01 23:54:52Z erans $</version>
  </javadoc>
  <javadoc>
    <text>Number of points.</text>
  </javadoc>
  <declaration type="short" name="N" />
  <javadoc>
    <text>Coefficients</text>
  </javadoc>
  <declaration type="double[][]" name="a" />
  <javadoc>
    <text>First partial derivative along x.</text>
  </javadoc>
  <declaration type="BivariateFunction" name="partialDerivativeX" />
  <javadoc>
    <text>First partial derivative along y.</text>
  </javadoc>
  <declaration type="BivariateFunction" name="partialDerivativeY" />
  <javadoc>
    <text>Second partial derivative along x.</text>
  </javadoc>
  <declaration type="BivariateFunction" name="partialDerivativeXX" />
  <javadoc>
    <text>Second partial derivative along y.</text>
  </javadoc>
  <declaration type="BivariateFunction" name="partialDerivativeYY" />
  <javadoc>
    <text>Second crossed partial derivative.</text>
  </javadoc>
  <declaration type="BivariateFunction" name="partialDerivativeXY" />
  <javadoc>
    <text>Simple constructor.</text>
    <param>a Spline coefficients</param>
  </javadoc>
  <method type="constructor" name="BicubicSplineFunction">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="value">
    <scope />
    <scope />
    <declaration type="double" name="x2" />
    <declaration type="double" name="x3" />
    <declaration type="double[]" name="pX" />
    <declaration type="double" name="y2" />
    <declaration type="double" name="y3" />
    <declaration type="double[]" name="pY" />
  </method>
  <javadoc>
    <text>Compute the value of the bicubic polynomial.</text>
    <param>pX Powers of the x-coordinate.</param>
    <param>pY Powers of the y-coordinate.</param>
    <param>coeff Spline coefficients.</param>
    <return>the interpolated value.</return>
  </javadoc>
  <method type="double" name="apply">
    <declaration type="double" name="result" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <return>the partial derivative wrt {@code x}.</return>
  </javadoc>
  <method type="BivariateFunction" name="partialDerivativeX">
    <scope />
  </method>
  <javadoc>
    <return>the partial derivative wrt {@code y}.</return>
  </javadoc>
  <method type="BivariateFunction" name="partialDerivativeY">
    <scope />
  </method>
  <javadoc>
    <return>the second partial derivative wrt {@code x}.</return>
  </javadoc>
  <method type="BivariateFunction" name="partialDerivativeXX">
    <scope />
  </method>
  <javadoc>
    <return>the second partial derivative wrt {@code y}.</return>
  </javadoc>
  <method type="BivariateFunction" name="partialDerivativeYY">
    <scope />
  </method>
  <javadoc>
    <return>the second partial cross-derivative.</return>
  </javadoc>
  <method type="BivariateFunction" name="partialDerivativeXY">
    <scope />
  </method>
  <javadoc>
    <text>Compute all partial derivatives functions.</text>
  </javadoc>
  <method type="void" name="computePartialDerivatives">
    <declaration type="double[][]" name="aX" />
    <declaration type="double[][]" name="aY" />
    <declaration type="double[][]" name="aXX" />
    <declaration type="double[][]" name="aYY" />
    <declaration type="double[][]" name="aXY" />
    <scope>
      <scope>
        <declaration type="double" name="c" />
      </scope>
    </scope>
    <method type="double" name="value">
      <declaration type="double" name="x2" />
      <declaration type="double[]" name="pX" />
      <declaration type="double" name="y2" />
      <declaration type="double" name="y3" />
      <declaration type="double[]" name="pY" />
    </method>
    <method type="double" name="value">
      <declaration type="double" name="x2" />
      <declaration type="double" name="x3" />
      <declaration type="double[]" name="pX" />
      <declaration type="double" name="y2" />
      <declaration type="double[]" name="pY" />
    </method>
    <method type="double" name="value">
      <declaration type="double[]" name="pX" />
      <declaration type="double" name="y2" />
      <declaration type="double" name="y3" />
      <declaration type="double[]" name="pY" />
    </method>
    <method type="double" name="value">
      <declaration type="double" name="x2" />
      <declaration type="double" name="x3" />
      <declaration type="double[]" name="pX" />
      <declaration type="double[]" name="pY" />
    </method>
    <method type="double" name="value">
      <declaration type="double" name="x2" />
      <declaration type="double[]" name="pX" />
      <declaration type="double" name="y2" />
      <declaration type="double[]" name="pY" />
    </method>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
