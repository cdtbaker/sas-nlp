<?xml version="1.0" encoding="UTF-8"?>
<class name="RandomAdaptor">
  <javadoc>
    <text>Extension of &lt;code&gt;java.util.Random&lt;/code&gt; wrapping a{@link RandomGenerator}.</text>
    <since>1.1</since>
    <version>$Id: RandomAdaptor.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Wrapped randomGenerator instance</text>
  </javadoc>
  <declaration type="RandomGenerator" name="randomGenerator" />
  <javadoc>
    <text>Prevent instantiation without a generator argument</text>
  </javadoc>
  <method type="constructor" name="RandomAdaptor" />
  <javadoc>
    <text>Construct a RandomAdaptor wrapping the supplied RandomGenerator.</text>
    <param>randomGenerator  the wrapped generator</param>
  </javadoc>
  <method type="constructor" name="RandomAdaptor" />
  <javadoc>
    <text>Factory method to create a &lt;code&gt;Random&lt;/code&gt; using the supplied
 * &lt;code&gt;RandomGenerator&lt;/code&gt;.</text>
    <param>randomGenerator  wrapped RandomGenerator instance</param>
    <return>a Random instance wrapping the RandomGenerator</return>
  </javadoc>
  <method type="Random" name="createAdaptor" />
  <javadoc>
    <text>Returns the next pseudorandom, uniformly distributed
 * &lt;code&gt;boolean&lt;/code&gt; value from this random number generator's
 * sequence.</text>
    <return>the next pseudorandom, uniformly distributed
 * &lt;code&gt;boolean&lt;/code&gt; value from this random number generator's
 * sequence</return>
  </javadoc>
  <method type="boolean" name="nextBoolean" />
  <javadoc>
    <text>Generates random bytes and places them into a user-supplied
 * byte array.  The number of random bytes produced is equal to
 * the length of the byte array.</text>
    <param>bytes the non-null byte array in which to put the
 * random bytes</param>
  </javadoc>
  <method type="void" name="nextBytes" />
  <javadoc>
    <text>Returns the next pseudorandom, uniformly distributed
 * &lt;code&gt;double&lt;/code&gt; value between &lt;code&gt;0.0&lt;/code&gt; and
 * &lt;code&gt;1.0&lt;/code&gt; from this random number generator's sequence.</text>
    <return>the next pseudorandom, uniformly distributed
 * &lt;code&gt;double&lt;/code&gt; value between &lt;code&gt;0.0&lt;/code&gt; and
 * &lt;code&gt;1.0&lt;/code&gt; from this random number generator's sequence</return>
  </javadoc>
  <method type="double" name="nextDouble" />
  <javadoc>
    <text>Returns the next pseudorandom, uniformly distributed &lt;code&gt;float&lt;/code&gt;
 * value between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt; from this random
 * number generator's sequence.</text>
    <return>the next pseudorandom, uniformly distributed &lt;code&gt;float&lt;/code&gt;
 * value between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt; from this
 * random number generator's sequence</return>
  </javadoc>
  <method type="float" name="nextFloat" />
  <javadoc>
    <text>Returns the next pseudorandom, Gaussian ("normally") distributed
 * &lt;code&gt;double&lt;/code&gt; value with mean &lt;code&gt;0.0&lt;/code&gt; and standard
 * deviation &lt;code&gt;1.0&lt;/code&gt; from this random number generator's sequence.</text>
    <return>the next pseudorandom, Gaussian ("normally") distributed
 * &lt;code&gt;double&lt;/code&gt; value with mean &lt;code&gt;0.0&lt;/code&gt; and
 * standard deviation &lt;code&gt;1.0&lt;/code&gt; from this random number
 * generator's sequence</return>
  </javadoc>
  <method type="double" name="nextGaussian" />
  <javadoc>
    <text>Returns the next pseudorandom, uniformly distributed &lt;code&gt;int&lt;/code&gt;
 * value from this random number generator's sequence.
 * All 2&lt;font size="-1"&gt;&lt;sup&gt;32&lt;/sup&gt;&lt;/font&gt; possible &lt;tt&gt;int&lt;/tt&gt; values
 * should be produced with  (approximately) equal probability.</text>
    <return>the next pseudorandom, uniformly distributed &lt;code&gt;int&lt;/code&gt;
 * value from this random number generator's sequence</return>
  </javadoc>
  <method type="int" name="nextInt" />
  <javadoc>
    <text>Returns a pseudorandom, uniformly distributed &lt;tt&gt;int&lt;/tt&gt; value
 * between 0 (inclusive) and the specified value (exclusive), drawn from
 * this random number generator's sequence.</text>
    <param>n the bound on the random number to be returned.  Must be
 * positive.</param>
    <return>a pseudorandom, uniformly distributed &lt;tt&gt;int&lt;/tt&gt;
 * value between 0 (inclusive) and n (exclusive).</return>
    <throws>IllegalArgumentException  if n is not positive.</throws>
  </javadoc>
  <method type="int" name="nextInt" />
  <javadoc>
    <text>Returns the next pseudorandom, uniformly distributed &lt;code&gt;long&lt;/code&gt;
 * value from this random number generator's sequence.  All
 * 2&lt;font size="-1"&gt;&lt;sup&gt;64&lt;/sup&gt;&lt;/font&gt; possible &lt;tt&gt;long&lt;/tt&gt; values
 * should be produced with (approximately) equal probability.</text>
    <return>the next pseudorandom, uniformly distributed &lt;code&gt;long&lt;/code&gt;
 * value from this random number generator's sequence</return>
  </javadoc>
  <method type="long" name="nextLong" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setSeed">
    <scope />
    <comment>required to avoid NPE in constructor</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setSeed">
    <scope />
    <comment>required to avoid NPE in constructor</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setSeed">
    <scope />
    <comment>required to avoid NPE in constructor</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
