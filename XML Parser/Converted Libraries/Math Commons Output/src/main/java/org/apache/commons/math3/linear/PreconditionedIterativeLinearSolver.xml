<?xml version="1.0" encoding="UTF-8"?>
<class name="PreconditionedIterativeLinearSolver">
  <javadoc>
    <text>&lt;p&gt;
 * This abstract class defines preconditioned iterative solvers. When A is
 * ill-conditioned, instead of solving system A &amp;middot; x = b directly, it is
 * preferable to solve either
 * &lt;center&gt;
 * (M &amp;middot; A) &amp;middot; x = M &amp;middot; b
 * &lt;/center&gt;
 * (left preconditioning), or
 * &lt;center&gt;
 * (A &amp;middot; M) &amp;middot; y = b, &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;followed by
 * M &amp;middot; y = x
 * &lt;/center&gt;
 * (right preconditioning), where M approximates in some way A&lt;sup&gt;-1&lt;/sup&gt;,
 * while matrix-vector products of the type M &amp;middot; y remain comparatively
 * easy to compute. In this library, M (not M&lt;sup&gt;-1&lt;/sup&gt;!) is called the
 * &lt;em&gt;preconditionner&lt;/em&gt;.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Concrete implementations of this abstract class must be provided with the
 * preconditioner M, as a {@link RealLinearOperator}.
 * &lt;/p&gt;</text>
    <version>$Id: PreconditionedIterativeLinearSolver.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Creates a new instance of this class, with default iteration manager.</text>
    <param>maxIterations the maximum number of iterations</param>
  </javadoc>
  <method type="constructor" name="PreconditionedIterativeLinearSolver" />
  <javadoc>
    <text>Creates a new instance of this class, with custom iteration manager.</text>
    <param>manager the custom iteration manager</param>
    <throws>NullArgumentException if {@code manager} is {@code null}</throws>
  </javadoc>
  <method type="constructor" name="PreconditionedIterativeLinearSolver" />
  <javadoc>
    <text>Returns an estimate of the solution to the linear system A &amp;middot; x =
 * b.</text>
    <param>a the linear operator A of the system</param>
    <param>m the preconditioner, M (can be {@code null})</param>
    <param>b the right-hand side vector</param>
    <param>x0 the initial guess of the solution</param>
    <return>a new vector containing the solution</return>
    <throws>NullArgumentException if one of the parameters is {@code null}</throws>
    <throws>NonSquareOperatorException if {@code a} or {@code m} is not
 * square</throws>
    <throws>DimensionMismatchException if {@code m}, {@code b} or{@code x0} have dimensions inconsistent with {@code a}</throws>
    <throws>MaxCountExceededException at exhaustion of the iteration count,
 * unless a custom{@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}has been set at construction of the {@link IterationManager}</throws>
  </javadoc>
  <method type="RealVector" name="solve" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="solve">
    <declaration type="RealVector" name="x" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="solve" />
  <javadoc>
    <text>Performs all dimension checks on the parameters of{@link #solve(RealLinearOperator,RealLinearOperator,RealVector,RealVector) solve}and{@link #solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector) solveInPlace},
 * and throws an exception if one of the checks fails.</text>
    <param>a the linear operator A of the system</param>
    <param>m the preconditioner, M (can be {@code null})</param>
    <param>b the right-hand side vector</param>
    <param>x0 the initial guess of the solution</param>
    <throws>NullArgumentException if one of the parameters is {@code null}</throws>
    <throws>NonSquareOperatorException if {@code a} or {@code m} is not
 * square</throws>
    <throws>DimensionMismatchException if {@code m}, {@code b} or{@code x0} have dimensions inconsistent with {@code a}</throws>
  </javadoc>
  <method type="void" name="checkParameters">
    <scope>
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns an estimate of the solution to the linear system A &amp;middot; x =
 * b.</text>
    <param>a the linear operator A of the system</param>
    <param>m the preconditioner, M (can be {@code null})</param>
    <param>b the right-hand side vector</param>
    <return>a new vector containing the solution</return>
    <throws>NullArgumentException if one of the parameters is {@code null}</throws>
    <throws>NonSquareOperatorException if {@code a} or {@code m} is not
 * square</throws>
    <throws>DimensionMismatchException if {@code m} or {@code b} have
 * dimensions inconsistent with {@code a}</throws>
    <throws>MaxCountExceededException at exhaustion of the iteration count,
 * unless a custom{@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}has been set at construction of the {@link IterationManager}</throws>
  </javadoc>
  <method type="RealVector" name="solve">
    <declaration type="RealVector" name="x" />
  </method>
  <method name="solveInPlace" type="RealVector" />
  <javadoc>
    <text>Returns an estimate of the solution to the linear system A &amp;middot; x =
 * b. The solution is computed in-place (initial guess is modified).</text>
    <param>a the linear operator A of the system</param>
    <param>m the preconditioner, M (can be {@code null})</param>
    <param>b the right-hand side vector</param>
    <param>x0 the initial guess of the solution</param>
    <return>a reference to {@code x0} (shallow copy) updated with the
 * solution</return>
    <throws>NullArgumentException if one of the parameters is {@code null}</throws>
    <throws>NonSquareOperatorException if {@code a} or {@code m} is not
 * square</throws>
    <throws>DimensionMismatchException if {@code m}, {@code b} or{@code x0} have dimensions inconsistent with {@code a}</throws>
    <throws>MaxCountExceededException at exhaustion of the iteration count,
 * unless a custom{@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}has been set at construction of the {@link IterationManager}</throws>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="solveInPlace" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
