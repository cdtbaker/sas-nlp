<?xml version="1.0" encoding="UTF-8"?>
<class name="MathUtils">
  <javadoc>
    <text>Miscellaneous utility functions.</text>
    <see>ArithmeticUtils</see>
    <see>Precision</see>
    <see>MathArrays</see>
    <version>$Id: MathUtils.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>2 &amp;pi;.</text>
    <since>2.1</since>
  </javadoc>
  <declaration type="double" name="TWO_PI" />
  <javadoc>
    <text>Class contains only static methods.</text>
  </javadoc>
  <method type="constructor" name="MathUtils" />
  <javadoc>
    <text>Returns an integer hash code representing the given double value.</text>
    <param>value the value to be hashed</param>
    <return>the hash code</return>
  </javadoc>
  <method type="int" name="hash" />
  <javadoc>
    <text>Returns an integer hash code representing the given double array.</text>
    <param>value the value to be hashed (may be null)</param>
    <return>the hash code</return>
    <since>1.2</since>
  </javadoc>
  <method type="int" name="hash" />
  <javadoc>
    <text>Normalize an angle in a 2&amp;pi wide interval around a center value.
 * &lt;p&gt;This method has three main uses:&lt;/p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;normalize an angle between 0 and 2&amp;pi;:&lt;br/&gt;{@code a = MathUtils.normalizeAngle(a, FastMath.PI);}&lt;/li&gt;
 * &lt;li&gt;normalize an angle between -&amp;pi; and +&amp;pi;&lt;br/&gt;{@code a = MathUtils.normalizeAngle(a, 0.0);}&lt;/li&gt;
 * &lt;li&gt;compute the angle between two defining angular positions:&lt;br&gt;{@code angle = MathUtils.normalizeAngle(end, start) - start;}&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;p&gt;Note that due to numerical accuracy and since &amp;pi; cannot be represented
 * exactly, the result interval is &lt;em&gt;closed&lt;/em&gt;, it cannot be half-closed
 * as would be more satisfactory in a purely mathematical view.&lt;/p&gt;</text>
    <param>a angle to normalize</param>
    <param>center center of the desired 2&amp;pi; interval for the result</param>
    <return>a-2k&amp;pi; with integer k and center-&amp;pi; &amp;lt;= a-2k&amp;pi; &amp;lt;= center+&amp;pi;</return>
    <since>1.2</since>
  </javadoc>
  <method type="double" name="normalizeAngle" />
  <javadoc>
    <text>&lt;p&gt;Reduce {@code |a - offset|} to the primary interval{@code [0, |period|)}.&lt;/p&gt;
 * &lt;p&gt;Specifically, the value returned is &lt;br/&gt;{@code a - |period| * floor((a - offset) / |period|) - offset}.&lt;/p&gt;
 * &lt;p&gt;If any of the parameters are {@code NaN} or infinite, the result is{@code NaN}.&lt;/p&gt;</text>
    <param>a Value to reduce.</param>
    <param>period Period.</param>
    <param>offset Value that will be mapped to {@code 0}.</param>
    <return>the value, within the interval {@code [0 |period|)},
 * that corresponds to {@code a}.</return>
  </javadoc>
  <method type="double" name="reduce">
    <declaration type="double" name="p" />
  </method>
  <javadoc>
    <text>Returns the first argument with the sign of the second argument.</text>
    <param>magnitude Magnitude of the returned value.</param>
    <param>sign Sign of the returned value.</param>
    <return>a value with magnitude equal to {@code magnitude} and with the
 * same sign as the {@code sign} argument.</return>
    <throws>MathArithmeticException if {@code magnitude == Byte.MIN_VALUE}and {@code sign &gt;= 0}.</throws>
  </javadoc>
  <method type="byte" name="copySign">
    <scope />
    <scope />
    <scope />
    <comment>Sign is OK.</comment>
    <comment>Flip sign.</comment>
  </method>
  <javadoc>
    <text>Returns the first argument with the sign of the second argument.</text>
    <param>magnitude Magnitude of the returned value.</param>
    <param>sign Sign of the returned value.</param>
    <return>a value with magnitude equal to {@code magnitude} and with the
 * same sign as the {@code sign} argument.</return>
    <throws>MathArithmeticException if {@code magnitude == Short.MIN_VALUE}and {@code sign &gt;= 0}.</throws>
  </javadoc>
  <method type="short" name="copySign">
    <scope />
    <scope />
    <scope />
    <comment>Sign is OK.</comment>
    <comment>Flip sign.</comment>
  </method>
  <javadoc>
    <text>Returns the first argument with the sign of the second argument.</text>
    <param>magnitude Magnitude of the returned value.</param>
    <param>sign Sign of the returned value.</param>
    <return>a value with magnitude equal to {@code magnitude} and with the
 * same sign as the {@code sign} argument.</return>
    <throws>MathArithmeticException if {@code magnitude == Integer.MIN_VALUE}and {@code sign &gt;= 0}.</throws>
  </javadoc>
  <method type="int" name="copySign">
    <scope />
    <scope />
    <scope />
    <comment>Sign is OK.</comment>
    <comment>Flip sign.</comment>
  </method>
  <javadoc>
    <text>Returns the first argument with the sign of the second argument.</text>
    <param>magnitude Magnitude of the returned value.</param>
    <param>sign Sign of the returned value.</param>
    <return>a value with magnitude equal to {@code magnitude} and with the
 * same sign as the {@code sign} argument.</return>
    <throws>MathArithmeticException if {@code magnitude == Long.MIN_VALUE}and {@code sign &gt;= 0}.</throws>
  </javadoc>
  <method type="long" name="copySign">
    <scope />
    <scope />
    <scope />
    <comment>Sign is OK.</comment>
    <comment>Flip sign.</comment>
  </method>
  <javadoc>
    <text>Check that the argument is a real number.</text>
    <param>x Argument.</param>
    <throws>NotFiniteNumberException if {@code x} is not a
 * finite real number.</throws>
  </javadoc>
  <method type="void" name="checkFinite">
    <scope />
  </method>
  <javadoc>
    <text>Check that all the elements are real numbers.</text>
    <param>val Arguments.</param>
    <throws>NotFiniteNumberException if any values of the array is not a
 * finite real number.</throws>
  </javadoc>
  <method type="void" name="checkFinite">
    <scope>
      <declaration type="double" name="x" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Checks that an object is not null.</text>
    <param>o Object to be checked.</param>
    <param>pattern Message pattern.</param>
    <param>args Arguments to replace the placeholders in {@code pattern}.</param>
    <throws>NullArgumentException if {@code o} is {@code null}.</throws>
  </javadoc>
  <method type="void" name="checkNotNull">
    <scope />
  </method>
  <javadoc>
    <text>Checks that an object is not null.</text>
    <param>o Object to be checked.</param>
    <throws>NullArgumentException if {@code o} is {@code null}.</throws>
  </javadoc>
  <method type="void" name="checkNotNull">
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
