<?xml version="1.0" encoding="UTF-8"?>
<class name="DfpDec">
  <javadoc>
    <text>Subclass of {@link Dfp} which hides the radix-10000 artifacts of the superclass.
 * This should give outward appearances of being a decimal number with DIGITS*4-3
 * decimal digits. This class can be subclassed to appear to be an arbitrary number
 * of decimal digits less than DIGITS*4-3.</text>
    <version>$Id: DfpDec.java 1449529 2013-02-24 19:13:17Z luc $</version>
    <since>2.2</since>
  </javadoc>
  <javadoc>
    <text>Makes an instance with a value of zero.</text>
    <param>factory factory linked to this instance</param>
  </javadoc>
  <method type="constructor" name="DfpDec" />
  <javadoc>
    <text>Create an instance from a byte value.</text>
    <param>factory factory linked to this instance</param>
    <param>x value to convert to an instance</param>
  </javadoc>
  <method type="constructor" name="DfpDec" />
  <javadoc>
    <text>Create an instance from an int value.</text>
    <param>factory factory linked to this instance</param>
    <param>x value to convert to an instance</param>
  </javadoc>
  <method type="constructor" name="DfpDec" />
  <javadoc>
    <text>Create an instance from a long value.</text>
    <param>factory factory linked to this instance</param>
    <param>x value to convert to an instance</param>
  </javadoc>
  <method type="constructor" name="DfpDec" />
  <javadoc>
    <text>Create an instance from a double value.</text>
    <param>factory factory linked to this instance</param>
    <param>x value to convert to an instance</param>
  </javadoc>
  <method type="constructor" name="DfpDec" />
  <javadoc>
    <text>Copy constructor.</text>
    <param>d instance to copy</param>
  </javadoc>
  <method type="constructor" name="DfpDec" />
  <javadoc>
    <text>Create an instance from a String representation.</text>
    <param>factory factory linked to this instance</param>
    <param>s string representation of the instance</param>
  </javadoc>
  <method type="constructor" name="DfpDec" />
  <javadoc>
    <text>Creates an instance with a non-finite value.</text>
    <param>factory factory linked to this instance</param>
    <param>sign sign of the Dfp to create</param>
    <param>nans code of the value, must be one of {@link #INFINITE},{@link #SNAN},  {@link #QNAN}</param>
  </javadoc>
  <method type="constructor" name="DfpDec" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Dfp" name="newInstance" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Dfp" name="newInstance" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Dfp" name="newInstance" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Dfp" name="newInstance" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Dfp" name="newInstance" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Dfp" name="newInstance">
    <scope>
      <declaration type="Dfp" name="result" />
    </scope>
    <comment>make sure we don't mix number with different precision</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Dfp" name="newInstance" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Dfp" name="newInstance" />
  <javadoc>
    <text>Get the number of decimal digits this class is going to represent.
 * Default implementation returns {@link #getRadixDigits()}*4-3. Subclasses can
 * override this to return something less.</text>
    <return>number of decimal digits this class is going to represent</return>
  </javadoc>
  <method type="int" name="getDecimalDigits" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="round">
    <declaration type="int" name="msb" />
    <scope />
    <declaration type="int" name="cmaxdigits" />
    <declaration type="int" name="lsbthreshold" />
    <scope />
    <declaration type="int" name="digits" />
    <declaration type="int" name="lsbshift" />
    <declaration type="int" name="lsd" />
    <scope />
    <declaration type="int" name="lsb" />
    <scope />
    <declaration type="int" name="discarded" />
    <declaration type="int" name="n" />
    <scope />
    <scope />
    <scope />
    <declaration type="boolean" name="inc" />
    <scope>
      <declaration type="int" name="rh" />
      <scope>
        <declaration type="int" name="r" />
      </scope>
      <scope />
    </scope>
    <scope />
    <scope />
    <scope />
    <comment>special case -- this == zero</comment>
    <comment>not looking at this after this point</comment>
    <comment>look to the next digit for rounding</comment>
    <comment>need to know if there are any discarded bits</comment>
    <comment>round up if n!=0</comment>
    <comment>round half up</comment>
    <comment>round half down</comment>
    <comment>round half-even</comment>
    <comment>round half-odd</comment>
    <comment>round ceil</comment>
    <comment>round floor</comment>
    <comment>increment if necessary</comment>
    <comment>Check for exceptional cases and raise signals if necessary</comment>
    <comment>Gradual Underflow</comment>
    <comment>Overflow</comment>
    <comment>Inexact</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Dfp" name="nextAfter">
    <declaration type="String" name="trapName" />
    <scope>
      <declaration type="Dfp" name="result" />
    </scope>
    <declaration type="boolean" name="up" />
    <declaration type="Dfp" name="result" />
    <declaration type="Dfp" name="inc" />
    <scope />
    <scope />
    <scope />
    <scope>
      <scope />
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
    </scope>
    <scope />
    <scope />
    <comment>make sure we don't mix number with different precision</comment>
    <comment>if this is greater than x</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
