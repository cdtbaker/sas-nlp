<?xml version="1.0" encoding="UTF-8"?>
<class name="JacobiPreconditioner">
  <javadoc>
    <text>This class implements the standard Jacobi (diagonal) preconditioner. For a
 * matrix A&lt;sub&gt;ij&lt;/sub&gt;, this preconditioner is
 * M = diag(1 / A&lt;sub&gt;11&lt;/sub&gt;, 1 / A&lt;sub&gt;22&lt;/sub&gt;, &amp;hellip;).</text>
    <version>$Id: JacobiPreconditioner.java 1422195 2012-12-15 06:45:18Z psteitz $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>The diagonal coefficients of the preconditioner.</text>
  </javadoc>
  <declaration type="ArrayRealVector" name="diag" />
  <javadoc>
    <text>Creates a new instance of this class.</text>
    <param>diag the diagonal coefficients of the linear operator to be
 * preconditioned</param>
    <param>deep {@code true} if a deep copy of the above array should be
 * performed</param>
  </javadoc>
  <method type="constructor" name="JacobiPreconditioner" />
  <javadoc>
    <text>Creates a new instance of this class. This method extracts the diagonal
 * coefficients of the specified linear operator. If {@code a} does not
 * extend {@link AbstractRealMatrix}, then the coefficients of the
 * underlying matrix are not accessible, coefficient extraction is made by
 * matrix-vector products with the basis vectors (and might therefore take
 * some time). With matrices, direct entry access is carried out.</text>
    <param>a the linear operator for which the preconditioner should be built</param>
    <return>the diagonal preconditioner made of the inverse of the diagonal
 * coefficients of the specified linear operator</return>
    <throws>NonSquareOperatorException if {@code a} is not square</throws>
  </javadoc>
  <method type="JacobiPreconditioner" name="create">
    <declaration type="int" name="n" />
    <scope />
    <declaration type="double[]" name="diag" />
    <scope>
      <declaration type="AbstractRealMatrix" name="m" />
      <scope />
    </scope>
    <scope>
      <declaration type="ArrayRealVector" name="x" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getColumnDimension" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getRowDimension" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="operate">
    <comment>Dimension check is carried out by ebeDivide</comment>
  </method>
  <javadoc>
    <text>Returns the square root of {@code this} diagonal operator. More
 * precisely, this method returns
 * P = diag(1 / &amp;radic;A&lt;sub&gt;11&lt;/sub&gt;, 1 / &amp;radic;A&lt;sub&gt;22&lt;/sub&gt;, &amp;hellip;).</text>
    <return>the square root of {@code this} preconditioner</return>
    <since>3.1</since>
  </javadoc>
  <method type="RealLinearOperator" name="sqrt">
    <declaration type="RealVector" name="sqrtDiag" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="RealVector" name="operate" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getRowDimension" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getColumnDimension" />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
