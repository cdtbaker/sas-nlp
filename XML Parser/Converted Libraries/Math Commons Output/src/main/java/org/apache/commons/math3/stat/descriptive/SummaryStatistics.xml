<?xml version="1.0" encoding="UTF-8"?>
<class name="SummaryStatistics">
  <javadoc>
    <text>&lt;p&gt;
 * Computes summary statistics for a stream of data values added using the{@link #addValue(double) addValue} method. The data values are not stored in
 * memory, so this class can be used to compute statistics for very large data
 * streams.
 * &lt;/p&gt;
 * &lt;p&gt;
 * The {@link StorelessUnivariateStatistic} instances used to maintain summary
 * state and compute statistics are configurable via setters. For example, the
 * default implementation for the variance can be overridden by calling{@link #setVarianceImpl(StorelessUnivariateStatistic)}. Actual parameters to
 * these methods must implement the {@link StorelessUnivariateStatistic}interface and configuration must be completed before &lt;code&gt;addValue&lt;/code&gt;
 * is called. No configuration is necessary to use the default, commons-math
 * provided implementations.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Note: This class is not thread-safe. Use{@link SynchronizedSummaryStatistics} if concurrent access from multiple
 * threads is required.
 * &lt;/p&gt;</text>
    <version>$Id: SummaryStatistics.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serialization UID</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>count of values that have been added</text>
  </javadoc>
  <declaration type="long" name="n" />
  <javadoc>
    <text>SecondMoment is used to compute the mean and variance</text>
  </javadoc>
  <declaration type="SecondMoment" name="secondMoment" />
  <javadoc>
    <text>sum of values that have been added</text>
  </javadoc>
  <declaration type="Sum" name="sum" />
  <javadoc>
    <text>sum of the square of each value that has been added</text>
  </javadoc>
  <declaration type="SumOfSquares" name="sumsq" />
  <javadoc>
    <text>min of values that have been added</text>
  </javadoc>
  <declaration type="Min" name="min" />
  <javadoc>
    <text>max of values that have been added</text>
  </javadoc>
  <declaration type="Max" name="max" />
  <javadoc>
    <text>sumLog of values that have been added</text>
  </javadoc>
  <declaration type="SumOfLogs" name="sumLog" />
  <javadoc>
    <text>geoMean of values that have been added</text>
  </javadoc>
  <declaration type="GeometricMean" name="geoMean" />
  <javadoc>
    <text>mean of values that have been added</text>
  </javadoc>
  <declaration type="Mean" name="mean" />
  <javadoc>
    <text>variance of values that have been added</text>
  </javadoc>
  <declaration type="Variance" name="variance" />
  <javadoc>
    <text>Sum statistic implementation - can be reset by setter.</text>
  </javadoc>
  <declaration type="StorelessUnivariateStatistic" name="sumImpl" />
  <javadoc>
    <text>Sum of squares statistic implementation - can be reset by setter.</text>
  </javadoc>
  <declaration type="StorelessUnivariateStatistic" name="sumsqImpl" />
  <javadoc>
    <text>Minimum statistic implementation - can be reset by setter.</text>
  </javadoc>
  <declaration type="StorelessUnivariateStatistic" name="minImpl" />
  <javadoc>
    <text>Maximum statistic implementation - can be reset by setter.</text>
  </javadoc>
  <declaration type="StorelessUnivariateStatistic" name="maxImpl" />
  <javadoc>
    <text>Sum of log statistic implementation - can be reset by setter.</text>
  </javadoc>
  <declaration type="StorelessUnivariateStatistic" name="sumLogImpl" />
  <javadoc>
    <text>Geometric mean statistic implementation - can be reset by setter.</text>
  </javadoc>
  <declaration type="StorelessUnivariateStatistic" name="geoMeanImpl" />
  <javadoc>
    <text>Mean statistic implementation - can be reset by setter.</text>
  </javadoc>
  <declaration type="StorelessUnivariateStatistic" name="meanImpl" />
  <javadoc>
    <text>Variance statistic implementation - can be reset by setter.</text>
  </javadoc>
  <declaration type="StorelessUnivariateStatistic" name="varianceImpl" />
  <javadoc>
    <text>Construct a SummaryStatistics instance</text>
  </javadoc>
  <method type="constructor" name="SummaryStatistics" />
  <javadoc>
    <text>A copy constructor. Creates a deep-copy of the {@code original}.</text>
    <param>original the {@code SummaryStatistics} instance to copy</param>
    <throws>NullArgumentException if original is null</throws>
  </javadoc>
  <method type="constructor" name="SummaryStatistics" />
  <javadoc>
    <text>Return a {@link StatisticalSummaryValues} instance reporting current
 * statistics.</text>
    <return>Current values of statistics</return>
  </javadoc>
  <method type="StatisticalSummary" name="getSummary" />
  <javadoc>
    <text>Add a value to the data</text>
    <param>value the value to add</param>
  </javadoc>
  <method type="void" name="addValue">
    <scope />
    <scope />
    <scope />
    <comment>If mean, variance or geomean have been overridden,</comment>
    <comment>need to increment these</comment>
  </method>
  <javadoc>
    <text>Returns the number of available values</text>
    <return>The number of available values</return>
  </javadoc>
  <method type="long" name="getN" />
  <javadoc>
    <text>Returns the sum of the values that have been added</text>
    <return>The sum or &lt;code&gt;Double.NaN&lt;/code&gt; if no values have been added</return>
  </javadoc>
  <method type="double" name="getSum" />
  <javadoc>
    <text>Returns the sum of the squares of the values that have been added.
 * &lt;p&gt;
 * Double.NaN is returned if no values have been added.
 * &lt;/p&gt;</text>
    <return>The sum of squares</return>
  </javadoc>
  <method type="double" name="getSumsq" />
  <javadoc>
    <text>Returns the mean of the values that have been added.
 * &lt;p&gt;
 * Double.NaN is returned if no values have been added.
 * &lt;/p&gt;</text>
    <return>the mean</return>
  </javadoc>
  <method type="double" name="getMean" />
  <javadoc>
    <text>Returns the standard deviation of the values that have been added.
 * &lt;p&gt;
 * Double.NaN is returned if no values have been added.
 * &lt;/p&gt;</text>
    <return>the standard deviation</return>
  </javadoc>
  <method type="double" name="getStandardDeviation">
    <declaration type="double" name="stdDev" />
    <scope>
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns the (sample) variance of the available values.
 * &lt;p&gt;This method returns the bias-corrected sample variance (using {@code n - 1} in
 * the denominator).  Use {@link #getPopulationVariance()} for the non-bias-corrected
 * population variance.&lt;/p&gt;
 * &lt;p&gt;Double.NaN is returned if no values have been added.&lt;/p&gt;</text>
    <return>the variance</return>
  </javadoc>
  <method type="double" name="getVariance" />
  <javadoc>
    <text>Returns the &lt;a href="http://en.wikibooks.org/wiki/Statistics/Summary/Variance"&gt;
 * population variance&lt;/a&gt; of the values that have been added.
 * &lt;p&gt;Double.NaN is returned if no values have been added.&lt;/p&gt;</text>
    <return>the population variance</return>
  </javadoc>
  <method type="double" name="getPopulationVariance">
    <declaration type="Variance" name="populationVariance" />
  </method>
  <javadoc>
    <text>Returns the maximum of the values that have been added.
 * &lt;p&gt;
 * Double.NaN is returned if no values have been added.
 * &lt;/p&gt;</text>
    <return>the maximum</return>
  </javadoc>
  <method type="double" name="getMax" />
  <javadoc>
    <text>Returns the minimum of the values that have been added.
 * &lt;p&gt;
 * Double.NaN is returned if no values have been added.
 * &lt;/p&gt;</text>
    <return>the minimum</return>
  </javadoc>
  <method type="double" name="getMin" />
  <javadoc>
    <text>Returns the geometric mean of the values that have been added.
 * &lt;p&gt;
 * Double.NaN is returned if no values have been added.
 * &lt;/p&gt;</text>
    <return>the geometric mean</return>
  </javadoc>
  <method type="double" name="getGeometricMean" />
  <javadoc>
    <text>Returns the sum of the logs of the values that have been added.
 * &lt;p&gt;
 * Double.NaN is returned if no values have been added.
 * &lt;/p&gt;</text>
    <return>the sum of logs</return>
    <since>1.2</since>
  </javadoc>
  <method type="double" name="getSumOfLogs" />
  <javadoc>
    <text>Returns a statistic related to the Second Central Moment.  Specifically,
 * what is returned is the sum of squared deviations from the sample mean
 * among the values that have been added.
 * &lt;p&gt;
 * Returns &lt;code&gt;Double.NaN&lt;/code&gt; if no data values have been added and
 * returns &lt;code&gt;0&lt;/code&gt; if there is just one value in the data set.&lt;/p&gt;
 * &lt;p&gt;</text>
    <return>second central moment statistic</return>
    <since>2.0</since>
  </javadoc>
  <method type="double" name="getSecondMoment" />
  <javadoc>
    <text>Generates a text report displaying summary statistics from values that
 * have been added.</text>
    <return>String with line feeds displaying statistics</return>
    <since>1.2</since>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuilder" name="outBuffer" />
    <declaration type="String" name="endl" />
  </method>
  <javadoc>
    <text>Resets all statistics and storage</text>
  </javadoc>
  <method type="void" name="clear">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Returns true iff &lt;code&gt;object&lt;/code&gt; is a
 * &lt;code&gt;SummaryStatistics&lt;/code&gt; instance and all statistics have the
 * same values as this.</text>
    <param>object the object to test equality against.</param>
    <return>true if object equals this</return>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope />
    <declaration type="SummaryStatistics" name="stat" />
  </method>
  <javadoc>
    <text>Returns hash code based on values of statistics</text>
    <return>hash code</return>
  </javadoc>
  <method type="int" name="hashCode">
    <declaration type="int" name="result" />
  </method>
  <javadoc>
    <text>Returns the currently configured Sum implementation</text>
    <return>the StorelessUnivariateStatistic implementing the sum</return>
    <since>1.2</since>
  </javadoc>
  <method type="StorelessUnivariateStatistic" name="getSumImpl" />
  <javadoc>
    <text>&lt;p&gt;
 * Sets the implementation for the Sum.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.
 * &lt;/p&gt;</text>
    <param>sumImpl the StorelessUnivariateStatistic instance to use for
 * computing the Sum</param>
    <throws>MathIllegalStateException if data has already been added (i.e if n &gt;0)</throws>
    <since>1.2</since>
  </javadoc>
  <method type="void" name="setSumImpl" />
  <javadoc>
    <text>Returns the currently configured sum of squares implementation</text>
    <return>the StorelessUnivariateStatistic implementing the sum of squares</return>
    <since>1.2</since>
  </javadoc>
  <method type="StorelessUnivariateStatistic" name="getSumsqImpl" />
  <javadoc>
    <text>&lt;p&gt;
 * Sets the implementation for the sum of squares.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.
 * &lt;/p&gt;</text>
    <param>sumsqImpl the StorelessUnivariateStatistic instance to use for
 * computing the sum of squares</param>
    <throws>MathIllegalStateException if data has already been added (i.e if n &gt; 0)</throws>
    <since>1.2</since>
  </javadoc>
  <method type="void" name="setSumsqImpl" />
  <javadoc>
    <text>Returns the currently configured minimum implementation</text>
    <return>the StorelessUnivariateStatistic implementing the minimum</return>
    <since>1.2</since>
  </javadoc>
  <method type="StorelessUnivariateStatistic" name="getMinImpl" />
  <javadoc>
    <text>&lt;p&gt;
 * Sets the implementation for the minimum.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.
 * &lt;/p&gt;</text>
    <param>minImpl the StorelessUnivariateStatistic instance to use for
 * computing the minimum</param>
    <throws>MathIllegalStateException if data has already been added (i.e if n &gt; 0)</throws>
    <since>1.2</since>
  </javadoc>
  <method type="void" name="setMinImpl" />
  <javadoc>
    <text>Returns the currently configured maximum implementation</text>
    <return>the StorelessUnivariateStatistic implementing the maximum</return>
    <since>1.2</since>
  </javadoc>
  <method type="StorelessUnivariateStatistic" name="getMaxImpl" />
  <javadoc>
    <text>&lt;p&gt;
 * Sets the implementation for the maximum.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.
 * &lt;/p&gt;</text>
    <param>maxImpl the StorelessUnivariateStatistic instance to use for
 * computing the maximum</param>
    <throws>MathIllegalStateException if data has already been added (i.e if n &gt; 0)</throws>
    <since>1.2</since>
  </javadoc>
  <method type="void" name="setMaxImpl" />
  <javadoc>
    <text>Returns the currently configured sum of logs implementation</text>
    <return>the StorelessUnivariateStatistic implementing the log sum</return>
    <since>1.2</since>
  </javadoc>
  <method type="StorelessUnivariateStatistic" name="getSumLogImpl" />
  <javadoc>
    <text>&lt;p&gt;
 * Sets the implementation for the sum of logs.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.
 * &lt;/p&gt;</text>
    <param>sumLogImpl the StorelessUnivariateStatistic instance to use for
 * computing the log sum</param>
    <throws>MathIllegalStateException if data has already been added (i.e if n &gt; 0)</throws>
    <since>1.2</since>
  </javadoc>
  <method type="void" name="setSumLogImpl" />
  <javadoc>
    <text>Returns the currently configured geometric mean implementation</text>
    <return>the StorelessUnivariateStatistic implementing the geometric mean</return>
    <since>1.2</since>
  </javadoc>
  <method type="StorelessUnivariateStatistic" name="getGeoMeanImpl" />
  <javadoc>
    <text>&lt;p&gt;
 * Sets the implementation for the geometric mean.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.
 * &lt;/p&gt;</text>
    <param>geoMeanImpl the StorelessUnivariateStatistic instance to use for
 * computing the geometric mean</param>
    <throws>MathIllegalStateException if data has already been added (i.e if n &gt; 0)</throws>
    <since>1.2</since>
  </javadoc>
  <method type="void" name="setGeoMeanImpl" />
  <javadoc>
    <text>Returns the currently configured mean implementation</text>
    <return>the StorelessUnivariateStatistic implementing the mean</return>
    <since>1.2</since>
  </javadoc>
  <method type="StorelessUnivariateStatistic" name="getMeanImpl" />
  <javadoc>
    <text>&lt;p&gt;
 * Sets the implementation for the mean.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.
 * &lt;/p&gt;</text>
    <param>meanImpl the StorelessUnivariateStatistic instance to use for
 * computing the mean</param>
    <throws>MathIllegalStateException if data has already been added (i.e if n &gt; 0)</throws>
    <since>1.2</since>
  </javadoc>
  <method type="void" name="setMeanImpl" />
  <javadoc>
    <text>Returns the currently configured variance implementation</text>
    <return>the StorelessUnivariateStatistic implementing the variance</return>
    <since>1.2</since>
  </javadoc>
  <method type="StorelessUnivariateStatistic" name="getVarianceImpl" />
  <javadoc>
    <text>&lt;p&gt;
 * Sets the implementation for the variance.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.
 * &lt;/p&gt;</text>
    <param>varianceImpl the StorelessUnivariateStatistic instance to use for
 * computing the variance</param>
    <throws>MathIllegalStateException if data has already been added (i.e if n &gt; 0)</throws>
    <since>1.2</since>
  </javadoc>
  <method type="void" name="setVarianceImpl" />
  <javadoc>
    <text>Throws IllegalStateException if n &gt; 0.</text>
    <throws>MathIllegalStateException if data has been added</throws>
  </javadoc>
  <method type="void" name="checkEmpty">
    <scope />
  </method>
  <javadoc>
    <text>Returns a copy of this SummaryStatistics instance with the same internal state.</text>
    <return>a copy of this</return>
  </javadoc>
  <method type="SummaryStatistics" name="copy">
    <declaration type="SummaryStatistics" name="result" />
    <comment>No try-catch or advertised exception because arguments are guaranteed non-null</comment>
  </method>
  <javadoc>
    <text>Copies source to dest.
 * &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;</text>
    <param>source SummaryStatistics to copy</param>
    <param>dest SummaryStatistics to copy to</param>
    <throws>NullArgumentException if either source or dest is null</throws>
  </javadoc>
  <method type="void" name="copy">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>Keep commons-math supplied statistics with embedded moments in synch</comment>
    <comment>Make sure that if stat == statImpl in source, same</comment>
    <comment>holds in dest; otherwise copy stat</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>Getters and setters for statistics implementations</comment>
</class>
