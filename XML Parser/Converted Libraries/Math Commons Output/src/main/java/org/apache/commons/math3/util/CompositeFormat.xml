<?xml version="1.0" encoding="UTF-8"?>
<class name="CompositeFormat">
  <javadoc>
    <text>Base class for formatters of composite objects (complex numbers, vectors ...).</text>
    <version>$Id: CompositeFormat.java 1462503 2013-03-29 15:48:27Z luc $</version>
  </javadoc>
  <javadoc>
    <text>Class contains only static methods.</text>
  </javadoc>
  <method type="constructor" name="CompositeFormat" />
  <javadoc>
    <text>Create a default number format.  The default number format is based on{@link NumberFormat#getInstance()} with the only customizing that the
 * maximum number of fraction digits is set to 10.</text>
    <return>the default number format.</return>
  </javadoc>
  <method type="NumberFormat" name="getDefaultNumberFormat" />
  <javadoc>
    <text>Create a default number format.  The default number format is based on{@link NumberFormat#getInstance(java.util.Locale)} with the only
 * customizing that the maximum number of fraction digits is set to 10.</text>
    <param>locale the specific locale used by the format.</param>
    <return>the default number format specific to the given locale.</return>
  </javadoc>
  <method type="NumberFormat" name="getDefaultNumberFormat">
    <declaration type="NumberFormat" name="nf" />
  </method>
  <javadoc>
    <text>Parses &lt;code&gt;source&lt;/code&gt; until a non-whitespace character is found.</text>
    <param>source the string to parse</param>
    <param>pos input/output parsing parameter.  On output, &lt;code&gt;pos&lt;/code&gt;
 * holds the index of the next non-whitespace character.</param>
  </javadoc>
  <method type="void" name="parseAndIgnoreWhitespace" />
  <javadoc>
    <text>Parses &lt;code&gt;source&lt;/code&gt; until a non-whitespace character is found.</text>
    <param>source the string to parse</param>
    <param>pos input/output parsing parameter.</param>
    <return>the first non-whitespace character.</return>
  </javadoc>
  <method type="char" name="parseNextCharacter">
    <declaration type="int" name="index" />
    <declaration type="int" name="n" />
    <declaration type="char" name="ret" />
    <scope>
      <declaration type="char" name="c" />
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Parses &lt;code&gt;source&lt;/code&gt; for special double values.  These values
 * include Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY.</text>
    <param>source the string to parse</param>
    <param>value the special value to parse.</param>
    <param>pos input/output parsing parameter.</param>
    <return>the special number.</return>
  </javadoc>
  <method type="Number" name="parseNumber">
    <declaration type="Number" name="ret" />
    <declaration type="StringBuilder" name="sb" />
    <declaration type="int" name="n" />
    <declaration type="int" name="startIndex" />
    <declaration type="int" name="endIndex" />
    <scope />
  </method>
  <javadoc>
    <text>Parses &lt;code&gt;source&lt;/code&gt; for a number.  This method can parse normal,
 * numeric values as well as special values.  These special values include
 * Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY.</text>
    <param>source the string to parse</param>
    <param>format the number format used to parse normal, numeric values.</param>
    <param>pos input/output parsing parameter.</param>
    <return>the parsed number.</return>
  </javadoc>
  <method type="Number" name="parseNumber">
    <declaration type="int" name="startIndex" />
    <declaration type="Number" name="number" />
    <declaration type="int" name="endIndex" />
    <scope>
      <declaration type="double[]" name="special" />
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>check for error parsing number</comment>
    <comment>try parsing special numbers</comment>
  </method>
  <javadoc>
    <text>Parse &lt;code&gt;source&lt;/code&gt; for an expected fixed string.</text>
    <param>source the string to parse</param>
    <param>expected expected string</param>
    <param>pos input/output parsing parameter.</param>
    <return>true if the expected string was there</return>
  </javadoc>
  <method type="boolean" name="parseFixedstring">
    <declaration type="int" name="startIndex" />
    <declaration type="int" name="endIndex" />
    <scope />
    <comment>set index back to start, error index should be the start index</comment>
    <comment>the string was here</comment>
  </method>
  <javadoc>
    <text>Formats a double value to produce a string.  In general, the value is
 * formatted using the formatting rules of &lt;code&gt;format&lt;/code&gt;.  There are
 * three exceptions to this:
 * &lt;ol&gt;
 * &lt;li&gt;NaN is formatted as '(NaN)'&lt;/li&gt;
 * &lt;li&gt;Positive infinity is formatted as '(Infinity)'&lt;/li&gt;
 * &lt;li&gt;Negative infinity is formatted as '(-Infinity)'&lt;/li&gt;
 * &lt;/ol&gt;</text>
    <param>value the double to format.</param>
    <param>format the format used.</param>
    <param>toAppendTo where the text is to be appended</param>
    <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
    <return>the value passed in as toAppendTo.</return>
  </javadoc>
  <method type="StringBuffer" name="formatDouble">
    <scope />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
