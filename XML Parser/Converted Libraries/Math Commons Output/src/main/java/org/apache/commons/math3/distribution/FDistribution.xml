<?xml version="1.0" encoding="UTF-8"?>
<class name="FDistribution">
  <javadoc>
    <text>Implementation of the F-distribution.</text>
    <see>&lt;a href="http://en.wikipedia.org/wiki/F-distribution"&gt;F-distribution (Wikipedia)&lt;/a&gt;</see>
    <see>&lt;a href="http://mathworld.wolfram.com/F-Distribution.html"&gt;F-distribution (MathWorld)&lt;/a&gt;</see>
    <version>$Id: FDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Default inverse cumulative probability accuracy.</text>
    <since>2.1</since>
  </javadoc>
  <declaration type="double" name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" />
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>The numerator degrees of freedom.</text>
  </javadoc>
  <declaration type="double" name="numeratorDegreesOfFreedom" />
  <javadoc>
    <text>The numerator degrees of freedom.</text>
  </javadoc>
  <declaration type="double" name="denominatorDegreesOfFreedom" />
  <javadoc>
    <text>Inverse cumulative probability accuracy.</text>
  </javadoc>
  <declaration type="double" name="solverAbsoluteAccuracy" />
  <javadoc>
    <text>Cached numerical variance</text>
  </javadoc>
  <declaration type="double" name="numericalVariance" />
  <javadoc>
    <text>Whether or not the numerical variance has been calculated</text>
  </javadoc>
  <declaration type="boolean" name="numericalVarianceIsCalculated" />
  <javadoc>
    <text>Creates an F distribution using the given degrees of freedom.</text>
    <param>numeratorDegreesOfFreedom Numerator degrees of freedom.</param>
    <param>denominatorDegreesOfFreedom Denominator degrees of freedom.</param>
    <throws>NotStrictlyPositiveException if{@code numeratorDegreesOfFreedom &lt;= 0} or{@code denominatorDegreesOfFreedom &lt;= 0}.</throws>
  </javadoc>
  <method type="constructor" name="FDistribution" />
  <javadoc>
    <text>Creates an F distribution using the given degrees of freedom
 * and inverse cumulative probability accuracy.</text>
    <param>numeratorDegreesOfFreedom Numerator degrees of freedom.</param>
    <param>denominatorDegreesOfFreedom Denominator degrees of freedom.</param>
    <param>inverseCumAccuracy the maximum absolute error in inverse
 * cumulative probability estimates.</param>
    <throws>NotStrictlyPositiveException if{@code numeratorDegreesOfFreedom &lt;= 0} or{@code denominatorDegreesOfFreedom &lt;= 0}.</throws>
    <since>2.1</since>
  </javadoc>
  <method type="constructor" name="FDistribution" />
  <javadoc>
    <text>Creates an F distribution.</text>
    <param>rng Random number generator.</param>
    <param>numeratorDegreesOfFreedom Numerator degrees of freedom.</param>
    <param>denominatorDegreesOfFreedom Denominator degrees of freedom.</param>
    <param>inverseCumAccuracy the maximum absolute error in inverse
 * cumulative probability estimates.</param>
    <throws>NotStrictlyPositiveException if{@code numeratorDegreesOfFreedom &lt;= 0} or{@code denominatorDegreesOfFreedom &lt;= 0}.</throws>
    <since>3.1</since>
  </javadoc>
  <method type="constructor" name="FDistribution">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>2.1</since>
  </javadoc>
  <method type="double" name="density">
    <declaration type="double" name="nhalf" />
    <declaration type="double" name="mhalf" />
    <declaration type="double" name="logx" />
    <declaration type="double" name="logn" />
    <declaration type="double" name="logm" />
    <declaration type="double" name="lognxm" />
  </method>
  <javadoc>
    <text>{@inheritDoc}The implementation of this method is based on
 * &lt;ul&gt;
 * &lt;li&gt;
 * &lt;a href="http://mathworld.wolfram.com/F-Distribution.html"&gt;
 * F-Distribution&lt;/a&gt;, equation (4).
 * &lt;/li&gt;
 * &lt;/ul&gt;</text>
  </javadoc>
  <method type="double" name="cumulativeProbability">
    <declaration type="double" name="ret" />
    <scope />
    <scope>
      <declaration type="double" name="n" />
      <declaration type="double" name="m" />
    </scope>
  </method>
  <javadoc>
    <text>Access the numerator degrees of freedom.</text>
    <return>the numerator degrees of freedom.</return>
  </javadoc>
  <method type="double" name="getNumeratorDegreesOfFreedom" />
  <javadoc>
    <text>Access the denominator degrees of freedom.</text>
    <return>the denominator degrees of freedom.</return>
  </javadoc>
  <method type="double" name="getDenominatorDegreesOfFreedom" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getSolverAbsoluteAccuracy" />
  <javadoc>
    <text>{@inheritDoc}For denominator degrees of freedom parameter {@code b}, the mean is
 * &lt;ul&gt;
 * &lt;li&gt;if {@code b &gt; 2} then {@code b / (b - 2)},&lt;/li&gt;
 * &lt;li&gt;else undefined ({@code Double.NaN}).
 * &lt;/ul&gt;</text>
  </javadoc>
  <method type="double" name="getNumericalMean">
    <declaration type="double" name="denominatorDF" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}For numerator degrees of freedom parameter {@code a} and denominator
 * degrees of freedom parameter {@code b}, the variance is
 * &lt;ul&gt;
 * &lt;li&gt;
 * if {@code b &gt; 4} then{@code [2 * b^2 * (a + b - 2)] / [a * (b - 2)^2 * (b - 4)]},
 * &lt;/li&gt;
 * &lt;li&gt;else undefined ({@code Double.NaN}).
 * &lt;/ul&gt;</text>
  </javadoc>
  <method type="double" name="getNumericalVariance">
    <scope />
  </method>
  <javadoc>
    <text>used by {@link #getNumericalVariance()}</text>
    <return>the variance of this distribution</return>
  </javadoc>
  <method type="double" name="calculateNumericalVariance">
    <declaration type="double" name="denominatorDF" />
    <scope>
      <declaration type="double" name="numeratorDF" />
      <declaration type="double" name="denomDFMinusTwo" />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}The lower bound of the support is always 0 no matter the parameters.</text>
    <return>lower bound of the support (always 0)</return>
  </javadoc>
  <method type="double" name="getSupportLowerBound" />
  <javadoc>
    <text>{@inheritDoc}The upper bound of the support is always positive infinity
 * no matter the parameters.</text>
    <return>upper bound of the support (always Double.POSITIVE_INFINITY)</return>
  </javadoc>
  <method type="double" name="getSupportUpperBound" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSupportLowerBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSupportUpperBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}The support of this distribution is connected.</text>
    <return>{@code true}</return>
  </javadoc>
  <method type="boolean" name="isSupportConnected" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
