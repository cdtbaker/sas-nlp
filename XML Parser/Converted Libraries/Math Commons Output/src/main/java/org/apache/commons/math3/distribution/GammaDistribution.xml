<?xml version="1.0" encoding="UTF-8"?>
<class name="GammaDistribution">
  <javadoc>
    <text>Implementation of the Gamma distribution.</text>
    <see>&lt;a href="http://en.wikipedia.org/wiki/Gamma_distribution"&gt;Gamma distribution (Wikipedia)&lt;/a&gt;</see>
    <see>&lt;a href="http://mathworld.wolfram.com/GammaDistribution.html"&gt;Gamma distribution (MathWorld)&lt;/a&gt;</see>
    <version>$Id: GammaDistribution.java 1422195 2012-12-15 06:45:18Z psteitz $</version>
  </javadoc>
  <javadoc>
    <text>Default inverse cumulative probability accuracy.</text>
    <since>2.1</since>
  </javadoc>
  <declaration type="double" name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" />
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>The shape parameter.</text>
  </javadoc>
  <declaration type="double" name="shape" />
  <javadoc>
    <text>The scale parameter.</text>
  </javadoc>
  <declaration type="double" name="scale" />
  <javadoc>
    <text>The constant value of {@code shape + g + 0.5}, where {@code g} is the
 * Lanczos constant {@link Gamma#LANCZOS_G}.</text>
  </javadoc>
  <declaration type="double" name="shiftedShape" />
  <javadoc>
    <text>The constant value of{@code shape / scale * sqrt(e / (2 * pi * (shape + g + 0.5))) / L(shape)},
 * where {@code L(shape)} is the Lanczos approximation returned by{@link Gamma#lanczos(double)}. This prefactor is used in{@link #density(double)}, when no overflow occurs with the natural
 * calculation.</text>
  </javadoc>
  <declaration type="double" name="densityPrefactor1" />
  <javadoc>
    <text>The constant value of{@code shape * sqrt(e / (2 * pi * (shape + g + 0.5))) / L(shape)},
 * where {@code L(shape)} is the Lanczos approximation returned by{@link Gamma#lanczos(double)}. This prefactor is used in{@link #density(double)}, when overflow occurs with the natural
 * calculation.</text>
  </javadoc>
  <declaration type="double" name="densityPrefactor2" />
  <javadoc>
    <text>Lower bound on {@code y = x / scale} for the selection of the computation
 * method in {@link #density(double)}. For {@code y &lt;= minY}, the natural
 * calculation overflows.</text>
  </javadoc>
  <declaration type="double" name="minY" />
  <javadoc>
    <text>Upper bound on {@code log(y)} ({@code y = x / scale}) for the selection
 * of the computation method in {@link #density(double)}. For{@code log(y) &gt;= maxLogY}, the natural calculation overflows.</text>
  </javadoc>
  <declaration type="double" name="maxLogY" />
  <javadoc>
    <text>Inverse cumulative probability accuracy.</text>
  </javadoc>
  <declaration type="double" name="solverAbsoluteAccuracy" />
  <javadoc>
    <text>Creates a new gamma distribution with specified values of the shape and
 * scale parameters.</text>
    <param>shape the shape parameter</param>
    <param>scale the scale parameter</param>
    <throws>NotStrictlyPositiveException if {@code shape &lt;= 0} or{@code scale &lt;= 0}.</throws>
  </javadoc>
  <method type="constructor" name="GammaDistribution" />
  <javadoc>
    <text>Creates a new gamma distribution with specified values of the shape and
 * scale parameters.</text>
    <param>shape the shape parameter</param>
    <param>scale the scale parameter</param>
    <param>inverseCumAccuracy the maximum absolute error in inverse
 * cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).</param>
    <throws>NotStrictlyPositiveException if {@code shape &lt;= 0} or{@code scale &lt;= 0}.</throws>
    <since>2.1</since>
  </javadoc>
  <method type="constructor" name="GammaDistribution" />
  <javadoc>
    <text>Creates a Gamma distribution.</text>
    <param>rng Random number generator.</param>
    <param>shape the shape parameter</param>
    <param>scale the scale parameter</param>
    <param>inverseCumAccuracy the maximum absolute error in inverse
 * cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).</param>
    <throws>NotStrictlyPositiveException if {@code shape &lt;= 0} or{@code scale &lt;= 0}.</throws>
    <since>3.1</since>
  </javadoc>
  <method type="constructor" name="GammaDistribution">
    <scope />
    <scope />
    <declaration type="double" name="aux" />
  </method>
  <javadoc>
    <text>Returns the shape parameter of {@code this} distribution.</text>
    <return>the shape parameter</return>
    <deprecated>as of version 3.1, {@link #getShape()} should be preferred.
 * This method will be removed in version 4.0.</deprecated>
  </javadoc>
  <method type="double" name="getAlpha" />
  <javadoc>
    <text>Returns the shape parameter of {@code this} distribution.</text>
    <return>the shape parameter</return>
    <since>3.1</since>
  </javadoc>
  <method type="double" name="getShape" />
  <javadoc>
    <text>Returns the scale parameter of {@code this} distribution.</text>
    <return>the scale parameter</return>
    <deprecated>as of version 3.1, {@link #getScale()} should be preferred.
 * This method will be removed in version 4.0.</deprecated>
  </javadoc>
  <method type="double" name="getBeta" />
  <javadoc>
    <text>Returns the scale parameter of {@code this} distribution.</text>
    <return>the scale parameter</return>
    <since>3.1</since>
  </javadoc>
  <method type="double" name="getScale" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="density">
    <scope />
    <declaration type="double" name="y" />
    <scope>
      <declaration type="double" name="aux1" />
      <declaration type="double" name="aux2" />
      <declaration type="double" name="aux3" />
    </scope>
    <comment>The present method must return the value of

     1       x a     - x
 ---------- (-)  exp(---)
 x Gamma(a)  b        b

 where a is the shape parameter, and b the scale parameter.
 Substituting the Lanczos approximation of Gamma(a) leads to the
 following expression of the density

 a              e            1         y      a
 - sqrt(------------------) ---- (-----------)  exp(a - y + g),
 x      2 pi (a + g + 0.5)  L(a)  a + g + 0.5

 where y = x  b. The above formula is the "natural" computation, which
 is implemented when no overflow is likely to occur. If overflow occurs
 with the natural computation, the following identity is used. It is
 based on the BOOST library
 http:www.boost.orgdoclibs1_35_0libsmathdocsf_and_disthtmlmath_toolkitspecialsf_gammaigamma.html
 Formula (15) needs adaptations, which are detailed below.

       y      a
 (-----------)  exp(a - y + g)
  a + g + 0.5
                              y - a - g - 0.5    y (g + 0.5)
               = exp(a log1pm(---------------) - ----------- + g),
                                a + g + 0.5      a + g + 0.5

  where log1pm(z) = log(1 + z) - z. Therefore, the value to be
  returned is

 a              e            1
 - sqrt(------------------) ----
 x      2 pi (a + g + 0.5)  L(a)
                              y - a - g - 0.5    y (g + 0.5)
                exp(a log1pm(---------------) - ----------- + g).
                                a + g + 0.5      a + g + 0.5</comment>
    <comment>Overflow.</comment>
    <comment>Natural calculation.</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}The implementation of this method is based on:
 * &lt;ul&gt;
 * &lt;li&gt;
 * &lt;a href="http://mathworld.wolfram.com/Chi-SquaredDistribution.html"&gt;
 * Chi-Squared Distribution&lt;/a&gt;, equation (9).
 * &lt;/li&gt;
 * &lt;li&gt;Casella, G., &amp; Berger, R. (1990). &lt;i&gt;Statistical Inference&lt;/i&gt;.
 * Belmont, CA: Duxbury Press.
 * &lt;/li&gt;
 * &lt;/ul&gt;</text>
  </javadoc>
  <method type="double" name="cumulativeProbability">
    <declaration type="double" name="ret" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getSolverAbsoluteAccuracy" />
  <javadoc>
    <text>{@inheritDoc}For shape parameter {@code alpha} and scale parameter {@code beta}, the
 * mean is {@code alpha * beta}.</text>
  </javadoc>
  <method type="double" name="getNumericalMean" />
  <javadoc>
    <text>{@inheritDoc}For shape parameter {@code alpha} and scale parameter {@code beta}, the
 * variance is {@code alpha * beta^2}.</text>
    <return>{@inheritDoc}</return>
  </javadoc>
  <method type="double" name="getNumericalVariance" />
  <javadoc>
    <text>{@inheritDoc}The lower bound of the support is always 0 no matter the parameters.</text>
    <return>lower bound of the support (always 0)</return>
  </javadoc>
  <method type="double" name="getSupportLowerBound" />
  <javadoc>
    <text>{@inheritDoc}The upper bound of the support is always positive infinity
 * no matter the parameters.</text>
    <return>upper bound of the support (always Double.POSITIVE_INFINITY)</return>
  </javadoc>
  <method type="double" name="getSupportUpperBound" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSupportLowerBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSupportUpperBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}The support of this distribution is connected.</text>
    <return>{@code true}</return>
  </javadoc>
  <method type="boolean" name="isSupportConnected" />
  <javadoc>
    <text>&lt;p&gt;This implementation uses the following algorithms: &lt;/p&gt;
 * &lt;p&gt;For 0 &lt; shape &lt; 1: &lt;br/&gt;
 * Ahrens, J. H. and Dieter, U., &lt;i&gt;Computer methods for
 * sampling from gamma, beta, Poisson and binomial distributions.&lt;/i&gt;
 * Computing, 12, 223-246, 1974.&lt;/p&gt;
 * &lt;p&gt;For shape &gt;= 1: &lt;br/&gt;
 * Marsaglia and Tsang, &lt;i&gt;A Simple Method for Generating
 * Gamma Variables.&lt;/i&gt; ACM Transactions on Mathematical Software,
 * Volume 26 Issue 3, September, 2000.&lt;/p&gt;</text>
    <return>random value sampled from the Gamma(shape, scale) distribution</return>
  </javadoc>
  <method type="double" name="sample">
    <scope>
      <scope>
        <declaration type="double" name="u" />
        <declaration type="double" name="bGS" />
        <declaration type="double" name="p" />
        <scope>
          <declaration type="double" name="x" />
          <declaration type="double" name="u2" />
          <scope />
          <scope />
        </scope>
        <scope>
          <declaration type="double" name="x" />
          <declaration type="double" name="u2" />
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
    <declaration type="double" name="d" />
    <declaration type="double" name="c" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="v" />
      <scope />
      <declaration type="double" name="x2" />
      <declaration type="double" name="u" />
      <scope />
      <scope />
    </scope>
    <comment>[1]: p. 228, Algorithm GS</comment>
    <comment>Step 1:</comment>
    <comment>Step 2:</comment>
    <comment>Reject</comment>
    <comment>Step 3:</comment>
    <comment>Reject</comment>
    <comment>Now shape &gt;= 1</comment>
    <comment>Squeeze</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
