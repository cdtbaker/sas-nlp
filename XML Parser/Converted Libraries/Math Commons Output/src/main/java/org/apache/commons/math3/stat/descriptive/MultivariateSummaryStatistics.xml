<?xml version="1.0" encoding="UTF-8"?>
<class name="MultivariateSummaryStatistics">
  <javadoc>
    <text>&lt;p&gt;Computes summary statistics for a stream of n-tuples added using the{@link #addValue(double[]) addValue} method. The data values are not stored
 * in memory, so this class can be used to compute statistics for very large
 * n-tuple streams.&lt;/p&gt;
 * &lt;p&gt;The {@link StorelessUnivariateStatistic} instances used to maintain
 * summary state and compute statistics are configurable via setters.
 * For example, the default implementation for the mean can be overridden by
 * calling {@link #setMeanImpl(StorelessUnivariateStatistic[])}. Actual
 * parameters to these methods must implement the{@link StorelessUnivariateStatistic} interface and configuration must be
 * completed before &lt;code&gt;addValue&lt;/code&gt; is called. No configuration is
 * necessary to use the default, commons-math provided implementations.&lt;/p&gt;
 * &lt;p&gt;To compute statistics for a stream of n-tuples, construct a
 * MultivariateStatistics instance with dimension n and then use{@link #addValue(double[])} to add n-tuples. The &lt;code&gt;getXxx&lt;/code&gt;
 * methods where Xxx is a statistic return an array of &lt;code&gt;double&lt;/code&gt;
 * values, where for &lt;code&gt;i = 0,...,n-1&lt;/code&gt; the i&lt;sup&gt;th&lt;/sup&gt; array element is the
 * value of the given statistic for data range consisting of the i&lt;sup&gt;th&lt;/sup&gt; element of
 * each of the input n-tuples.  For example, if &lt;code&gt;addValue&lt;/code&gt; is called
 * with actual parameters {0, 1, 2}, then {3, 4, 5} and finally {6, 7, 8},
 * &lt;code&gt;getSum&lt;/code&gt; will return a three-element array with values
 * {0+3+6, 1+4+7, 2+5+8}&lt;/p&gt;
 * &lt;p&gt;Note: This class is not thread-safe. Use{@link SynchronizedMultivariateSummaryStatistics} if concurrent access from multiple
 * threads is required.&lt;/p&gt;</text>
    <since>1.2</since>
    <version>$Id: MultivariateSummaryStatistics.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serialization UID</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Dimension of the data.</text>
  </javadoc>
  <declaration type="int" name="k" />
  <javadoc>
    <text>Count of values that have been added</text>
  </javadoc>
  <declaration type="long" name="n" />
  <javadoc>
    <text>Sum statistic implementation - can be reset by setter.</text>
  </javadoc>
  <declaration type="StorelessUnivariateStatistic[]" name="sumImpl" />
  <javadoc>
    <text>Sum of squares statistic implementation - can be reset by setter.</text>
  </javadoc>
  <declaration type="StorelessUnivariateStatistic[]" name="sumSqImpl" />
  <javadoc>
    <text>Minimum statistic implementation - can be reset by setter.</text>
  </javadoc>
  <declaration type="StorelessUnivariateStatistic[]" name="minImpl" />
  <javadoc>
    <text>Maximum statistic implementation - can be reset by setter.</text>
  </javadoc>
  <declaration type="StorelessUnivariateStatistic[]" name="maxImpl" />
  <javadoc>
    <text>Sum of log statistic implementation - can be reset by setter.</text>
  </javadoc>
  <declaration type="StorelessUnivariateStatistic[]" name="sumLogImpl" />
  <javadoc>
    <text>Geometric mean statistic implementation - can be reset by setter.</text>
  </javadoc>
  <declaration type="StorelessUnivariateStatistic[]" name="geoMeanImpl" />
  <javadoc>
    <text>Mean statistic implementation - can be reset by setter.</text>
  </javadoc>
  <declaration type="StorelessUnivariateStatistic[]" name="meanImpl" />
  <javadoc>
    <text>Covariance statistic implementation - cannot be reset.</text>
  </javadoc>
  <declaration type="VectorialCovariance" name="covarianceImpl" />
  <javadoc>
    <text>Construct a MultivariateSummaryStatistics instance</text>
    <param>k dimension of the data</param>
    <param>isCovarianceBiasCorrected if true, the unbiased sample
 * covariance is computed, otherwise the biased population covariance
 * is computed</param>
  </javadoc>
  <method type="constructor" name="MultivariateSummaryStatistics">
    <scope />
  </method>
  <javadoc>
    <text>Add an n-tuple to the data</text>
    <param>value  the n-tuple to add</param>
    <throws>DimensionMismatchException if the length of the array
 * does not match the one used at construction</throws>
  </javadoc>
  <method type="void" name="addValue">
    <scope>
      <declaration type="double" name="v" />
    </scope>
  </method>
  <javadoc>
    <text>Returns the dimension of the data</text>
    <return>The dimension of the data</return>
  </javadoc>
  <method type="int" name="getDimension" />
  <javadoc>
    <text>Returns the number of available values</text>
    <return>The number of available values</return>
  </javadoc>
  <method type="long" name="getN" />
  <javadoc>
    <text>Returns an array of the results of a statistic.</text>
    <param>stats univariate statistic array</param>
    <return>results array</return>
  </javadoc>
  <method type="double[]" name="getResults">
    <declaration type="double[]" name="results" />
    <scope />
  </method>
  <javadoc>
    <text>Returns an array whose i&lt;sup&gt;th&lt;/sup&gt; entry is the sum of the
 * i&lt;sup&gt;th&lt;/sup&gt; entries of the arrays that have been added using{@link #addValue(double[])}</text>
    <return>the array of component sums</return>
  </javadoc>
  <method type="double[]" name="getSum" />
  <javadoc>
    <text>Returns an array whose i&lt;sup&gt;th&lt;/sup&gt; entry is the sum of squares of the
 * i&lt;sup&gt;th&lt;/sup&gt; entries of the arrays that have been added using{@link #addValue(double[])}</text>
    <return>the array of component sums of squares</return>
  </javadoc>
  <method type="double[]" name="getSumSq" />
  <javadoc>
    <text>Returns an array whose i&lt;sup&gt;th&lt;/sup&gt; entry is the sum of logs of the
 * i&lt;sup&gt;th&lt;/sup&gt; entries of the arrays that have been added using{@link #addValue(double[])}</text>
    <return>the array of component log sums</return>
  </javadoc>
  <method type="double[]" name="getSumLog" />
  <javadoc>
    <text>Returns an array whose i&lt;sup&gt;th&lt;/sup&gt; entry is the mean of the
 * i&lt;sup&gt;th&lt;/sup&gt; entries of the arrays that have been added using{@link #addValue(double[])}</text>
    <return>the array of component means</return>
  </javadoc>
  <method type="double[]" name="getMean" />
  <javadoc>
    <text>Returns an array whose i&lt;sup&gt;th&lt;/sup&gt; entry is the standard deviation of the
 * i&lt;sup&gt;th&lt;/sup&gt; entries of the arrays that have been added using{@link #addValue(double[])}</text>
    <return>the array of component standard deviations</return>
  </javadoc>
  <method type="double[]" name="getStandardDeviation">
    <declaration type="double[]" name="stdDev" />
    <scope />
    <scope />
    <scope>
      <declaration type="RealMatrix" name="matrix" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns the covariance matrix of the values that have been added.</text>
    <return>the covariance matrix</return>
  </javadoc>
  <method type="RealMatrix" name="getCovariance" />
  <javadoc>
    <text>Returns an array whose i&lt;sup&gt;th&lt;/sup&gt; entry is the maximum of the
 * i&lt;sup&gt;th&lt;/sup&gt; entries of the arrays that have been added using{@link #addValue(double[])}</text>
    <return>the array of component maxima</return>
  </javadoc>
  <method type="double[]" name="getMax" />
  <javadoc>
    <text>Returns an array whose i&lt;sup&gt;th&lt;/sup&gt; entry is the minimum of the
 * i&lt;sup&gt;th&lt;/sup&gt; entries of the arrays that have been added using{@link #addValue(double[])}</text>
    <return>the array of component minima</return>
  </javadoc>
  <method type="double[]" name="getMin" />
  <javadoc>
    <text>Returns an array whose i&lt;sup&gt;th&lt;/sup&gt; entry is the geometric mean of the
 * i&lt;sup&gt;th&lt;/sup&gt; entries of the arrays that have been added using{@link #addValue(double[])}</text>
    <return>the array of component geometric means</return>
  </javadoc>
  <method type="double[]" name="getGeometricMean" />
  <javadoc>
    <text>Generates a text report displaying
 * summary statistics from values that
 * have been added.</text>
    <return>String with line feeds displaying statistics</return>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="String" name="separator" />
    <declaration type="String" name="suffix" />
    <declaration type="StringBuilder" name="outBuffer" />
  </method>
  <javadoc>
    <text>Append a text representation of an array to a buffer.</text>
    <param>buffer buffer to fill</param>
    <param>data data array</param>
    <param>prefix text prefix</param>
    <param>separator elements separator</param>
    <param>suffix text suffix</param>
  </javadoc>
  <method type="void" name="append">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Resets all statistics and storage</text>
  </javadoc>
  <method type="void" name="clear">
    <scope />
  </method>
  <javadoc>
    <text>Returns true iff &lt;code&gt;object&lt;/code&gt; is a &lt;code&gt;MultivariateSummaryStatistics&lt;/code&gt;
 * instance and all statistics have the same values as this.</text>
    <param>object the object to test equality against.</param>
    <return>true if object equals this</return>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope />
    <declaration type="MultivariateSummaryStatistics" name="stat" />
  </method>
  <javadoc>
    <text>Returns hash code based on values of statistics</text>
    <return>hash code</return>
  </javadoc>
  <method type="int" name="hashCode">
    <declaration type="int" name="result" />
  </method>
  <javadoc>
    <text>Sets statistics implementations.</text>
    <param>newImpl new implementations for statistics</param>
    <param>oldImpl old implementations for statistics</param>
    <throws>DimensionMismatchException if the array dimension
 * does not match the one used at construction</throws>
    <throws>MathIllegalStateException if data has already been added
 * (i.e. if n &gt; 0)</throws>
  </javadoc>
  <method type="void" name="setImpl" />
  <javadoc>
    <text>Returns the currently configured Sum implementation</text>
    <return>the StorelessUnivariateStatistic implementing the sum</return>
  </javadoc>
  <method type="StorelessUnivariateStatistic[]" name="getSumImpl" />
  <javadoc>
    <text>&lt;p&gt;Sets the implementation for the Sum.&lt;/p&gt;
 * &lt;p&gt;This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double[]) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.&lt;/p&gt;</text>
    <param>sumImpl the StorelessUnivariateStatistic instance to use
 * for computing the Sum</param>
    <throws>DimensionMismatchException if the array dimension
 * does not match the one used at construction</throws>
    <throws>MathIllegalStateException if data has already been added
 * (i.e if n &gt; 0)</throws>
  </javadoc>
  <method type="void" name="setSumImpl" />
  <javadoc>
    <text>Returns the currently configured sum of squares implementation</text>
    <return>the StorelessUnivariateStatistic implementing the sum of squares</return>
  </javadoc>
  <method type="StorelessUnivariateStatistic[]" name="getSumsqImpl" />
  <javadoc>
    <text>&lt;p&gt;Sets the implementation for the sum of squares.&lt;/p&gt;
 * &lt;p&gt;This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double[]) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.&lt;/p&gt;</text>
    <param>sumsqImpl the StorelessUnivariateStatistic instance to use
 * for computing the sum of squares</param>
    <throws>DimensionMismatchException if the array dimension
 * does not match the one used at construction</throws>
    <throws>MathIllegalStateException if data has already been added
 * (i.e if n &gt; 0)</throws>
  </javadoc>
  <method type="void" name="setSumsqImpl" />
  <javadoc>
    <text>Returns the currently configured minimum implementation</text>
    <return>the StorelessUnivariateStatistic implementing the minimum</return>
  </javadoc>
  <method type="StorelessUnivariateStatistic[]" name="getMinImpl" />
  <javadoc>
    <text>&lt;p&gt;Sets the implementation for the minimum.&lt;/p&gt;
 * &lt;p&gt;This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double[]) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.&lt;/p&gt;</text>
    <param>minImpl the StorelessUnivariateStatistic instance to use
 * for computing the minimum</param>
    <throws>DimensionMismatchException if the array dimension
 * does not match the one used at construction</throws>
    <throws>MathIllegalStateException if data has already been added
 * (i.e if n &gt; 0)</throws>
  </javadoc>
  <method type="void" name="setMinImpl" />
  <javadoc>
    <text>Returns the currently configured maximum implementation</text>
    <return>the StorelessUnivariateStatistic implementing the maximum</return>
  </javadoc>
  <method type="StorelessUnivariateStatistic[]" name="getMaxImpl" />
  <javadoc>
    <text>&lt;p&gt;Sets the implementation for the maximum.&lt;/p&gt;
 * &lt;p&gt;This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double[]) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.&lt;/p&gt;</text>
    <param>maxImpl the StorelessUnivariateStatistic instance to use
 * for computing the maximum</param>
    <throws>DimensionMismatchException if the array dimension
 * does not match the one used at construction</throws>
    <throws>MathIllegalStateException if data has already been added
 * (i.e if n &gt; 0)</throws>
  </javadoc>
  <method type="void" name="setMaxImpl" />
  <javadoc>
    <text>Returns the currently configured sum of logs implementation</text>
    <return>the StorelessUnivariateStatistic implementing the log sum</return>
  </javadoc>
  <method type="StorelessUnivariateStatistic[]" name="getSumLogImpl" />
  <javadoc>
    <text>&lt;p&gt;Sets the implementation for the sum of logs.&lt;/p&gt;
 * &lt;p&gt;This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double[]) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.&lt;/p&gt;</text>
    <param>sumLogImpl the StorelessUnivariateStatistic instance to use
 * for computing the log sum</param>
    <throws>DimensionMismatchException if the array dimension
 * does not match the one used at construction</throws>
    <throws>MathIllegalStateException if data has already been added
 * (i.e if n &gt; 0)</throws>
  </javadoc>
  <method type="void" name="setSumLogImpl" />
  <javadoc>
    <text>Returns the currently configured geometric mean implementation</text>
    <return>the StorelessUnivariateStatistic implementing the geometric mean</return>
  </javadoc>
  <method type="StorelessUnivariateStatistic[]" name="getGeoMeanImpl" />
  <javadoc>
    <text>&lt;p&gt;Sets the implementation for the geometric mean.&lt;/p&gt;
 * &lt;p&gt;This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double[]) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.&lt;/p&gt;</text>
    <param>geoMeanImpl the StorelessUnivariateStatistic instance to use
 * for computing the geometric mean</param>
    <throws>DimensionMismatchException if the array dimension
 * does not match the one used at construction</throws>
    <throws>MathIllegalStateException if data has already been added
 * (i.e if n &gt; 0)</throws>
  </javadoc>
  <method type="void" name="setGeoMeanImpl" />
  <javadoc>
    <text>Returns the currently configured mean implementation</text>
    <return>the StorelessUnivariateStatistic implementing the mean</return>
  </javadoc>
  <method type="StorelessUnivariateStatistic[]" name="getMeanImpl" />
  <javadoc>
    <text>&lt;p&gt;Sets the implementation for the mean.&lt;/p&gt;
 * &lt;p&gt;This method must be activated before any data has been added - i.e.,
 * before {@link #addValue(double[]) addValue} has been used to add data;
 * otherwise an IllegalStateException will be thrown.&lt;/p&gt;</text>
    <param>meanImpl the StorelessUnivariateStatistic instance to use
 * for computing the mean</param>
    <throws>DimensionMismatchException if the array dimension
 * does not match the one used at construction</throws>
    <throws>MathIllegalStateException if data has already been added
 * (i.e if n &gt; 0)</throws>
  </javadoc>
  <method type="void" name="setMeanImpl" />
  <javadoc>
    <text>Throws MathIllegalStateException if the statistic is not empty.</text>
    <throws>MathIllegalStateException if n &gt; 0.</throws>
  </javadoc>
  <method type="void" name="checkEmpty">
    <scope />
  </method>
  <javadoc>
    <text>Throws DimensionMismatchException if dimension != k.</text>
    <param>dimension dimension to check</param>
    <throws>DimensionMismatchException if dimension != k</throws>
  </javadoc>
  <method type="void" name="checkDimension">
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>Getters and setters for statistics implementations</comment>
</class>
