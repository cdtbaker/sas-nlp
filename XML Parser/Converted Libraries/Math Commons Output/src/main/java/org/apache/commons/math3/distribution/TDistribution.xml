<?xml version="1.0" encoding="UTF-8"?>
<class name="TDistribution">
  <javadoc>
    <text>Implementation of Student's t-distribution.</text>
    <see>"&lt;a href='http://en.wikipedia.org/wiki/Student&amp;apos;s_t-distribution'&gt;Student's t-distribution (Wikipedia)&lt;/a&gt;"</see>
    <see>"&lt;a href='http://mathworld.wolfram.com/Studentst-Distribution.html'&gt;Student's t-distribution (MathWorld)&lt;/a&gt;"</see>
    <version>$Id: TDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Default inverse cumulative probability accuracy.</text>
    <since>2.1</since>
  </javadoc>
  <declaration type="double" name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" />
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>The degrees of freedom.</text>
  </javadoc>
  <declaration type="double" name="degreesOfFreedom" />
  <javadoc>
    <text>Inverse cumulative probability accuracy.</text>
  </javadoc>
  <declaration type="double" name="solverAbsoluteAccuracy" />
  <javadoc>
    <text>Create a t distribution using the given degrees of freedom.</text>
    <param>degreesOfFreedom Degrees of freedom.</param>
    <throws>NotStrictlyPositiveException if {@code degreesOfFreedom &lt;= 0}</throws>
  </javadoc>
  <method type="constructor" name="TDistribution" />
  <javadoc>
    <text>Create a t distribution using the given degrees of freedom and the
 * specified inverse cumulative probability absolute accuracy.</text>
    <param>degreesOfFreedom Degrees of freedom.</param>
    <param>inverseCumAccuracy the maximum absolute error in inverse
 * cumulative probability estimates
 * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).</param>
    <throws>NotStrictlyPositiveException if {@code degreesOfFreedom &lt;= 0}</throws>
    <since>2.1</since>
  </javadoc>
  <method type="constructor" name="TDistribution" />
  <javadoc>
    <text>Creates a t distribution.</text>
    <param>rng Random number generator.</param>
    <param>degreesOfFreedom Degrees of freedom.</param>
    <param>inverseCumAccuracy the maximum absolute error in inverse
 * cumulative probability estimates
 * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).</param>
    <throws>NotStrictlyPositiveException if {@code degreesOfFreedom &lt;= 0}</throws>
    <since>3.1</since>
  </javadoc>
  <method type="constructor" name="TDistribution">
    <scope />
  </method>
  <javadoc>
    <text>Access the degrees of freedom.</text>
    <return>the degrees of freedom.</return>
  </javadoc>
  <method type="double" name="getDegreesOfFreedom" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="density">
    <declaration type="double" name="n" />
    <declaration type="double" name="nPlus1Over2" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="cumulativeProbability">
    <declaration type="double" name="ret" />
    <scope />
    <scope>
      <declaration type="double" name="t" />
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getSolverAbsoluteAccuracy" />
  <javadoc>
    <text>{@inheritDoc}For degrees of freedom parameter {@code df}, the mean is
 * &lt;ul&gt;
 * &lt;li&gt;if {@code df &gt; 1} then {@code 0},&lt;/li&gt;
 * &lt;li&gt;else undefined ({@code Double.NaN}).&lt;/li&gt;
 * &lt;/ul&gt;</text>
  </javadoc>
  <method type="double" name="getNumericalMean">
    <declaration type="double" name="df" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}For degrees of freedom parameter {@code df}, the variance is
 * &lt;ul&gt;
 * &lt;li&gt;if {@code df &gt; 2} then {@code df / (df - 2)},&lt;/li&gt;
 * &lt;li&gt;if {@code 1 &lt; df &lt;= 2} then positive infinity
 * ({@code Double.POSITIVE_INFINITY}),&lt;/li&gt;
 * &lt;li&gt;else undefined ({@code Double.NaN}).&lt;/li&gt;
 * &lt;/ul&gt;</text>
  </javadoc>
  <method type="double" name="getNumericalVariance">
    <declaration type="double" name="df" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}The lower bound of the support is always negative infinity no matter the
 * parameters.</text>
    <return>lower bound of the support (always{@code Double.NEGATIVE_INFINITY})</return>
  </javadoc>
  <method type="double" name="getSupportLowerBound" />
  <javadoc>
    <text>{@inheritDoc}The upper bound of the support is always positive infinity no matter the
 * parameters.</text>
    <return>upper bound of the support (always{@code Double.POSITIVE_INFINITY})</return>
  </javadoc>
  <method type="double" name="getSupportUpperBound" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSupportLowerBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSupportUpperBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}The support of this distribution is connected.</text>
    <return>{@code true}</return>
  </javadoc>
  <method type="boolean" name="isSupportConnected" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
