<?xml version="1.0" encoding="UTF-8"?>
<class name="FastCosineTransformer">
  <javadoc>
    <text>Implements the Fast Cosine Transform for transformation of one-dimensional
 * real data sets. For reference, see James S. Walker, &lt;em&gt;Fast Fourier
 * Transforms&lt;/em&gt;, chapter 3 (ISBN 0849371635).
 * &lt;p&gt;
 * There are several variants of the discrete cosine transform. The present
 * implementation corresponds to DCT-I, with various normalization conventions,
 * which are specified by the parameter {@link DctNormalization}.
 * &lt;p&gt;
 * DCT-I is equivalent to DFT of an &lt;em&gt;even extension&lt;/em&gt; of the data series.
 * More precisely, if x&lt;sub&gt;0&lt;/sub&gt;, &amp;hellip;, x&lt;sub&gt;N-1&lt;/sub&gt; is the data set
 * to be cosine transformed, the extended data set
 * x&lt;sub&gt;0&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt;, &amp;hellip;, x&lt;sub&gt;2N-3&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt;
 * is defined as follows
 * &lt;ul&gt;
 * &lt;li&gt;x&lt;sub&gt;k&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt; = x&lt;sub&gt;k&lt;/sub&gt; if 0 &amp;le; k &amp;lt; N,&lt;/li&gt;
 * &lt;li&gt;x&lt;sub&gt;k&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt; = x&lt;sub&gt;2N-2-k&lt;/sub&gt;
 * if N &amp;le; k &amp;lt; 2N - 2.&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;p&gt;
 * Then, the standard DCT-I y&lt;sub&gt;0&lt;/sub&gt;, &amp;hellip;, y&lt;sub&gt;N-1&lt;/sub&gt; of the real
 * data set x&lt;sub&gt;0&lt;/sub&gt;, &amp;hellip;, x&lt;sub&gt;N-1&lt;/sub&gt; is equal to &lt;em&gt;half&lt;/em&gt;
 * of the N first elements of the DFT of the extended data set
 * x&lt;sub&gt;0&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt;, &amp;hellip;, x&lt;sub&gt;2N-3&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt;
 * &lt;br/&gt;
 * y&lt;sub&gt;n&lt;/sub&gt; = (1 / 2) &amp;sum;&lt;sub&gt;k=0&lt;/sub&gt;&lt;sup&gt;2N-3&lt;/sup&gt;
 * x&lt;sub&gt;k&lt;/sub&gt;&lt;sup&gt;&amp;#35;&lt;/sup&gt; exp[-2&amp;pi;i nk / (2N - 2)]
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;k = 0, &amp;hellip;, N-1.
 * &lt;p&gt;
 * The present implementation of the discrete cosine transform as a fast cosine
 * transform requires the length of the data set to be a power of two plus one
 * (N&amp;nbsp;=&amp;nbsp;2&lt;sup&gt;n&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;1). Besides, it implicitly assumes
 * that the sampled function is even.</text>
    <version>$Id: FastCosineTransformer.java 1385310 2012-09-16 16:32:10Z tn $</version>
    <since>1.2</since>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>The type of DCT to be performed.</text>
  </javadoc>
  <declaration type="DctNormalization" name="normalization" />
  <javadoc>
    <text>Creates a new instance of this class, with various normalization
 * conventions.</text>
    <param>normalization the type of normalization to be applied to the
 * transformed data</param>
  </javadoc>
  <method type="constructor" name="FastCosineTransformer" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <throws>MathIllegalArgumentException if the length of the data array is
 * not a power of two plus one</throws>
  </javadoc>
  <method type="double[]" name="transform">
    <scope>
      <scope>
        <declaration type="double" name="s" />
      </scope>
    </scope>
    <declaration type="double" name="s2" />
    <declaration type="double" name="s1" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <throws>org.apache.commons.math3.exception.NonMonotonicSequenceExceptionif the lower bound is greater than, or equal to the upper bound</throws>
    <throws>org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif the number of sample points is negative</throws>
    <throws>MathIllegalArgumentException if the number of sample points is
 * not a power of two plus one</throws>
  </javadoc>
  <method type="double[]" name="transform">
    <declaration type="double[]" name="data" />
  </method>
  <javadoc>
    <text>Perform the FCT algorithm (including inverse).</text>
    <param>f the real data array to be transformed</param>
    <return>the real transformed array</return>
    <throws>MathIllegalArgumentException if the length of the data array is
 * not a power of two plus one</throws>
  </javadoc>
  <method type="double[]" name="fct">
    <declaration type="double[]" name="transformed" />
    <declaration type="int" name="n" />
    <scope />
    <scope />
    <declaration type="double[]" name="x" />
    <declaration type="double" name="t1" />
    <scope>
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
      <declaration type="double" name="c" />
    </scope>
    <declaration type="FastFourierTransformer" name="transformer" />
    <declaration type="Complex[]" name="y" />
    <scope />
    <comment>trivial case</comment>
    <comment>construct a new array and perform FFT on it</comment>
    <comment>temporary variable for transformed[1]</comment>
    <comment>reconstruct the FCT result for the original array</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
