<?xml version="1.0" encoding="UTF-8"?>
<class name="MicrosphereInterpolator">
  <javadoc>
    <text>Interpolator that implements the algorithm described in
 * &lt;em&gt;William Dudziak&lt;/em&gt;'s
 * &lt;a href="http://www.dudziak.com/microsphere.pdf"&gt;MS thesis&lt;/a&gt;.</text>
    <since>2.1</since>
    <version>$Id: MicrosphereInterpolator.java 1379904 2012-09-01 23:54:52Z erans $</version>
  </javadoc>
  <javadoc>
    <text>Default number of surface elements that composes the microsphere.</text>
  </javadoc>
  <declaration type="int" name="DEFAULT_MICROSPHERE_ELEMENTS" />
  <javadoc>
    <text>Default exponent used the weights calculation.</text>
  </javadoc>
  <declaration type="int" name="DEFAULT_BRIGHTNESS_EXPONENT" />
  <javadoc>
    <text>Number of surface elements of the microsphere.</text>
  </javadoc>
  <declaration type="int" name="microsphereElements" />
  <javadoc>
    <text>Exponent used in the power law that computes the weights of the
 * sample data.</text>
  </javadoc>
  <declaration type="int" name="brightnessExponent" />
  <javadoc>
    <text>Create a microsphere interpolator with default settings.
 * Calling this constructor is equivalent to call {@link #MicrosphereInterpolator(int,int)MicrosphereInterpolator(MicrosphereInterpolator.DEFAULT_MICROSPHERE_ELEMENTS,
 * MicrosphereInterpolator.DEFAULT_BRIGHTNESS_EXPONENT)}.</text>
  </javadoc>
  <method type="constructor" name="MicrosphereInterpolator" />
  <javadoc>
    <text>Create a microsphere interpolator.</text>
    <param>elements Number of surface elements of the microsphere.</param>
    <param>exponent Exponent used in the power law that computes the
 * weights (distance dimming factor) of the sample data.</param>
    <throws>NotPositiveException if {@code exponent &lt; 0}.</throws>
    <throws>NotStrictlyPositiveException if {@code elements &lt;= 0}.</throws>
  </javadoc>
  <method type="constructor" name="MicrosphereInterpolator">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="MultivariateFunction" name="interpolate">
    <declaration type="UnitSphereRandomVectorGenerator" name="rand" />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
