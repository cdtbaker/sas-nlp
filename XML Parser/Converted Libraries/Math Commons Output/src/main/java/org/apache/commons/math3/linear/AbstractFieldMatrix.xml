<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractFieldMatrix">
  <javadoc>
    <text>Basic implementation of {@link FieldMatrix} methods regardless of the underlying storage.
 * &lt;p&gt;All the methods implemented here use {@link #getEntry(int,int)} to access
 * matrix elements. Derived class can provide faster implementations. &lt;/p&gt;</text>
    <param>&lt;T&gt;
 *  Type of the field elements.</param>
    <version>$Id: AbstractFieldMatrix.java 1454876 2013-03-10 16:41:08Z luc $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>Field to which the elements belong.</text>
  </javadoc>
  <declaration type="Field&lt;T&gt;" name="field" />
  <javadoc>
    <text>Constructor for use with Serializable</text>
  </javadoc>
  <method type="constructor" name="AbstractFieldMatrix" />
  <javadoc>
    <text>Creates a matrix with no data</text>
    <param>field field to which the elements belong</param>
  </javadoc>
  <method type="constructor" name="AbstractFieldMatrix" />
  <javadoc>
    <text>Create a new FieldMatrix&lt;T&gt; with the supplied row and column dimensions.</text>
    <param>field Field to which the elements belong.</param>
    <param>rowDimension Number of rows in the new matrix.</param>
    <param>columnDimension Number of columns in the new matrix.</param>
    <throws>NotStrictlyPositiveException if row or column dimension is not
 * positive.</throws>
  </javadoc>
  <method type="constructor" name="AbstractFieldMatrix">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Get the elements type from an array.</text>
    <param>&lt;T&gt;
 *  Type of the field elements.</param>
    <param>d Data array.</param>
    <return>the field to which the array elements belong.</return>
    <throws>NullArgumentException if the array is {@code null}.</throws>
    <throws>NoDataException if the array is empty.</throws>
  </javadoc>
  <method type="Field&lt;T&gt;" name="extractField">
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Get the elements type from an array.</text>
    <param>&lt;T&gt;
 *  Type of the field elements.</param>
    <param>d Data array.</param>
    <return>the field to which the array elements belong.</return>
    <throws>NoDataException if array is empty.</throws>
  </javadoc>
  <method type="Field&lt;T&gt;" name="extractField">
    <scope />
  </method>
  <javadoc>
    <text>Build an array of elements.
 * &lt;p&gt;
 * Complete arrays are filled with field.getZero()
 * &lt;/p&gt;</text>
    <param>&lt;T&gt;
 *  Type of the field elements</param>
    <param>field field to which array elements belong</param>
    <param>rows number of rows</param>
    <param>columns number of columns (may be negative to build partial
 * arrays in the same way &lt;code&gt;new Field[rows][]&lt;/code&gt; works)</param>
    <return>a new array</return>
    <deprecated>as of 3.2, replaced by {@link MathArrays#buildArray(Field,int,int)}</deprecated>
  </javadoc>
  <method type="T[][]" name="buildArray" />
  <javadoc>
    <text>Build an array of elements.
 * &lt;p&gt;
 * Arrays are filled with field.getZero()
 * &lt;/p&gt;</text>
    <param>&lt;T&gt;
 *  the type of the field elements</param>
    <param>field field to which array elements belong</param>
    <param>length of the array</param>
    <return>a new array</return>
    <deprecated>as of 3.2, replaced by {@link MathArrays#buildArray(Field,int)}</deprecated>
  </javadoc>
  <method type="T[]" name="buildArray" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Field&lt;T&gt;" name="getField" />
  <method name="createMatrix" type="FieldMatrix&lt;T&gt;" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method name="copy" type="FieldMatrix&lt;T&gt;" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldMatrix&lt;T&gt;" name="add">
    <declaration type="int" name="rowCount" />
    <declaration type="int" name="columnCount" />
    <declaration type="FieldMatrix&lt;T&gt;" name="out" />
    <scope>
      <scope />
    </scope>
    <comment>safety check</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldMatrix&lt;T&gt;" name="subtract">
    <declaration type="int" name="rowCount" />
    <declaration type="int" name="columnCount" />
    <declaration type="FieldMatrix&lt;T&gt;" name="out" />
    <scope>
      <scope />
    </scope>
    <comment>safety check</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldMatrix&lt;T&gt;" name="scalarAdd">
    <declaration type="int" name="rowCount" />
    <declaration type="int" name="columnCount" />
    <declaration type="FieldMatrix&lt;T&gt;" name="out" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldMatrix&lt;T&gt;" name="scalarMultiply">
    <declaration type="int" name="rowCount" />
    <declaration type="int" name="columnCount" />
    <declaration type="FieldMatrix&lt;T&gt;" name="out" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldMatrix&lt;T&gt;" name="multiply">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <declaration type="int" name="nSum" />
    <declaration type="FieldMatrix&lt;T&gt;" name="out" />
    <scope>
      <scope>
        <declaration type="T" name="sum" />
        <scope />
      </scope>
    </scope>
    <comment>safety check</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldMatrix&lt;T&gt;" name="preMultiply" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldMatrix&lt;T&gt;" name="power">
    <scope />
    <scope />
    <scope />
    <scope />
    <declaration type="int" name="power" />
    <declaration type="char[]" name="binaryRepresentation" />
    <declaration type="ArrayList&lt;Integer&gt;" name="nonZeroPositions" />
    <scope>
      <scope>
        <declaration type="int" name="pos" />
      </scope>
    </scope>
    <declaration type="ArrayList&lt;FieldMatrix&lt;T&gt;&gt;" name="results" />
    <scope>
      <declaration type="FieldMatrix&lt;T&gt;" name="s" />
      <declaration type="FieldMatrix&lt;T&gt;" name="r" />
    </scope>
    <declaration type="FieldMatrix&lt;T&gt;" name="result" />
    <scope />
    <comment>Only log_2(p) operations is used by doing as follows:
 5^214 = 5^128  5^64  5^16  5^4  5^2

 In general, the same approach is used for A^p.</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T[][]" name="getData">
    <declaration type="T[][]" name="data" />
    <scope>
      <declaration type="T[]" name="dataI" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldMatrix&lt;T&gt;" name="getSubMatrix">
    <declaration type="FieldMatrix&lt;T&gt;" name="subMatrix" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldMatrix&lt;T&gt;" name="getSubMatrix">
    <declaration type="FieldMatrix&lt;T&gt;" name="subMatrix" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="T" name="visit" />
    <comment>safety checks</comment>
    <comment>copy entries</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="copySubMatrix">
    <declaration type="int" name="rowsCount" />
    <declaration type="int" name="columnsCount" />
    <scope />
    <javadoc>
      <text>Initial row index.</text>
    </javadoc>
    <declaration type="int" name="startRow" />
    <javadoc>
      <text>Initial column index.</text>
    </javadoc>
    <declaration type="int" name="startColumn" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="void" name="start" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="void" name="visit" />
    <comment>safety checks</comment>
    <comment>copy entries</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="copySubMatrix">
    <scope />
    <scope>
      <declaration type="T[]" name="destinationI" />
      <scope />
    </scope>
    <comment>safety checks</comment>
    <comment>copy entries</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setSubMatrix">
    <scope />
    <declaration type="int" name="nRows" />
    <scope />
    <declaration type="int" name="nCols" />
    <scope />
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldMatrix&lt;T&gt;" name="getRowMatrix">
    <declaration type="int" name="nCols" />
    <declaration type="FieldMatrix&lt;T&gt;" name="out" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setRowMatrix">
    <declaration type="int" name="nCols" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldMatrix&lt;T&gt;" name="getColumnMatrix">
    <declaration type="int" name="nRows" />
    <declaration type="FieldMatrix&lt;T&gt;" name="out" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setColumnMatrix">
    <declaration type="int" name="nRows" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="getRowVector" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setRowVector">
    <declaration type="int" name="nCols" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="getColumnVector" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setColumnVector">
    <declaration type="int" name="nRows" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T[]" name="getRow">
    <declaration type="int" name="nCols" />
    <declaration type="T[]" name="out" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setRow">
    <declaration type="int" name="nCols" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T[]" name="getColumn">
    <declaration type="int" name="nRows" />
    <declaration type="T[]" name="out" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setColumn">
    <declaration type="int" name="nRows" />
    <scope />
    <scope />
  </method>
  <method name="getEntry" type="T" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method name="setEntry" type="void" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method name="addToEntry" type="void" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method name="multiplyEntry" type="void" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldMatrix&lt;T&gt;" name="transpose">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <declaration type="FieldMatrix&lt;T&gt;" name="out" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="void" name="visit" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSquare" />
  <method name="getRowDimension" type="int" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method name="getColumnDimension" type="int" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="getTrace">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <scope />
    <declaration type="T" name="trace" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T[]" name="operate">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <scope />
    <declaration type="T[]" name="out" />
    <scope>
      <declaration type="T" name="sum" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="operate">
    <scope />
    <scope>
      <declaration type="int" name="nRows" />
      <declaration type="int" name="nCols" />
      <scope />
      <declaration type="T[]" name="out" />
      <scope>
        <declaration type="T" name="sum" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T[]" name="preMultiply">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <scope />
    <declaration type="T[]" name="out" />
    <scope>
      <declaration type="T" name="sum" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="preMultiply">
    <scope />
    <scope>
      <declaration type="int" name="nRows" />
      <declaration type="int" name="nCols" />
      <scope />
      <declaration type="T[]" name="out" />
      <scope>
        <declaration type="T" name="sum" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInRowOrder">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <scope>
      <scope>
        <declaration type="T" name="oldValue" />
        <declaration type="T" name="newValue" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInRowOrder">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInRowOrder">
    <scope>
      <scope>
        <declaration type="T" name="oldValue" />
        <declaration type="T" name="newValue" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInRowOrder">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInColumnOrder">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <scope>
      <scope>
        <declaration type="T" name="oldValue" />
        <declaration type="T" name="newValue" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInColumnOrder">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInColumnOrder">
    <scope>
      <scope>
        <declaration type="T" name="oldValue" />
        <declaration type="T" name="newValue" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInColumnOrder">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInOptimizedOrder" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInOptimizedOrder" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInOptimizedOrder" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="walkInOptimizedOrder" />
  <javadoc>
    <text>Get a string representation for this matrix.</text>
    <return>a string representation for this matrix</return>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <declaration type="StringBuffer" name="res" />
    <declaration type="String" name="fullClassName" />
    <declaration type="String" name="shortClassName" />
    <scope>
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Returns true iff &lt;code&gt;object&lt;/code&gt; is a
 * &lt;code&gt;FieldMatrix&lt;/code&gt; instance with the same dimensions as this
 * and all corresponding matrix entries are equal.</text>
    <param>object the object to test equality against.</param>
    <return>true if object equals this</return>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope />
    <declaration type="FieldMatrix&lt;?&gt;" name="m" />
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <scope />
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Computes a hashcode for the matrix.</text>
    <return>hashcode for matrix</return>
  </javadoc>
  <method type="int" name="hashCode">
    <declaration type="int" name="ret" />
    <declaration type="int" name="nRows" />
    <declaration type="int" name="nCols" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Check if a row index is valid.</text>
    <param>row Row index to check.</param>
    <throws>OutOfRangeException if {@code index} is not valid.</throws>
  </javadoc>
  <method type="void" name="checkRowIndex">
    <scope />
  </method>
  <javadoc>
    <text>Check if a column index is valid.</text>
    <param>column Column index to check.</param>
    <throws>OutOfRangeException if {@code index} is not valid.</throws>
  </javadoc>
  <method type="void" name="checkColumnIndex">
    <scope />
  </method>
  <javadoc>
    <text>Check if submatrix ranges indices are valid.
 * Rows and columns are indicated counting from 0 to n-1.</text>
    <param>startRow Initial row index.</param>
    <param>endRow Final row index.</param>
    <param>startColumn Initial column index.</param>
    <param>endColumn Final column index.</param>
    <throws>OutOfRangeException if the indices are not valid.</throws>
    <throws>NumberIsTooSmallException if {@code endRow &lt; startRow} or{@code endColumn &lt; startColumn}.</throws>
  </javadoc>
  <method type="void" name="checkSubMatrixIndex">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Check if submatrix ranges indices are valid.
 * Rows and columns are indicated counting from 0 to n-1.</text>
    <param>selectedRows Array of row indices.</param>
    <param>selectedColumns Array of column indices.</param>
    <throws>NullArgumentException if the arrays are {@code null}.</throws>
    <throws>NoDataException if the arrays have zero length.</throws>
    <throws>OutOfRangeException if row or column selections are not valid.</throws>
  </javadoc>
  <method type="void" name="checkSubMatrixIndex">
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Check if a matrix is addition compatible with the instance.</text>
    <param>m Matrix to check.</param>
    <throws>MatrixDimensionMismatchException if the matrix is not
 * addition-compatible with instance.</throws>
  </javadoc>
  <method type="void" name="checkAdditionCompatible">
    <scope />
  </method>
  <javadoc>
    <text>Check if a matrix is subtraction compatible with the instance.</text>
    <param>m Matrix to check.</param>
    <throws>MatrixDimensionMismatchException if the matrix is not
 * subtraction-compatible with instance.</throws>
  </javadoc>
  <method type="void" name="checkSubtractionCompatible">
    <scope />
  </method>
  <javadoc>
    <text>Check if a matrix is multiplication compatible with the instance.</text>
    <param>m Matrix to check.</param>
    <throws>DimensionMismatchException if the matrix is not
 * multiplication-compatible with instance.</throws>
  </javadoc>
  <method type="void" name="checkMultiplicationCompatible">
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
