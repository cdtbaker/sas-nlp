<?xml version="1.0" encoding="UTF-8"?>
<class name="Kurtosis">
  <javadoc>
    <text>Computes the Kurtosis of the available values.
 * &lt;p&gt;
 * We use the following (unbiased) formula to define kurtosis:&lt;/p&gt;
 * &lt;p&gt;
 * kurtosis = { [n(n+1) / (n -1)(n - 2)(n-3)] sum[(x_i - mean)^4] / std^4 } - [3(n-1)^2 / (n-2)(n-3)]
 * &lt;/p&gt;&lt;p&gt;
 * where n is the number of values, mean is the {@link Mean} and std is the{@link StandardDeviation}&lt;/p&gt;
 * &lt;p&gt;
 * Note that this statistic is undefined for n &lt; 4.  &lt;code&gt;Double.Nan&lt;/code&gt;
 * is returned when there is not sufficient data to compute the statistic.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
 * multiple threads access an instance of this class concurrently, and at least
 * one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
 * &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.&lt;/p&gt;</text>
    <version>$Id: Kurtosis.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Fourth Moment on which this statistic is based</text>
  </javadoc>
  <declaration type="FourthMoment" name="moment" />
  <javadoc>
    <text>Determines whether or not this statistic can be incremented or cleared.
 * &lt;p&gt;
 * Statistics based on (constructed from) external moments cannot
 * be incremented or cleared.&lt;/p&gt;</text>
  </javadoc>
  <declaration type="boolean" name="incMoment" />
  <javadoc>
    <text>Construct a Kurtosis</text>
  </javadoc>
  <method type="constructor" name="Kurtosis" />
  <javadoc>
    <text>Construct a Kurtosis from an external moment</text>
    <param>m4 external Moment</param>
  </javadoc>
  <method type="constructor" name="Kurtosis" />
  <javadoc>
    <text>Copy constructor, creates a new {@code Kurtosis} identical
 * to the {@code original}</text>
    <param>original the {@code Kurtosis} instance to copy</param>
    <throws>NullArgumentException if original is null</throws>
  </javadoc>
  <method type="constructor" name="Kurtosis" />
  <javadoc>
    <text>{@inheritDoc}&lt;p&gt;Note that when {@link #Kurtosis(FourthMoment)} is used to
 * create a Variance, this method does nothing. In that case, the
 * FourthMoment should be incremented directly.&lt;/p&gt;</text>
  </javadoc>
  <method type="void" name="increment">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getResult">
    <declaration type="double" name="kurtosis" />
    <scope>
      <declaration type="double" name="variance" />
      <scope />
      <scope>
        <declaration type="double" name="n" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="clear">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="long" name="getN" />
  <javadoc>
    <text>Returns the kurtosis of the entries in the specified portion of the
 * input array.
 * &lt;p&gt;
 * See {@link Kurtosis} for details on the computing algorithm.&lt;/p&gt;
 * &lt;p&gt;
 * Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the kurtosis of the values or Double.NaN if length is less than 4</return>
    <throws>MathIllegalArgumentException if the input array is null or the array
 * index parameters are not valid</throws>
  </javadoc>
  <method type="double" name="evaluate">
    <declaration type="double" name="kurt" />
    <scope>
      <declaration type="Variance" name="variance" />
      <declaration type="double" name="mean" />
      <declaration type="double" name="stdDev" />
      <declaration type="double" name="accum3" />
      <scope />
      <declaration type="double" name="n0" />
      <declaration type="double" name="coefficientOne" />
      <declaration type="double" name="termTwo" />
    </scope>
    <comment>Initialize the kurtosis</comment>
    <comment>Compute the mean and standard deviation</comment>
    <comment>Sum the ^4 of the distance from the mean divided by the</comment>
    <comment>standard deviation</comment>
    <comment>Get N</comment>
    <comment>Calculate kurtosis</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Kurtosis" name="copy">
    <declaration type="Kurtosis" name="result" />
    <comment>No try-catch because args are guaranteed non-null</comment>
  </method>
  <javadoc>
    <text>Copies source to dest.
 * &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;</text>
    <param>source Kurtosis to copy</param>
    <param>dest Kurtosis to copy to</param>
    <throws>NullArgumentException if either source or dest is null</throws>
  </javadoc>
  <method type="void" name="copy" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>UnvariateStatistic Approach</comment>
</class>
