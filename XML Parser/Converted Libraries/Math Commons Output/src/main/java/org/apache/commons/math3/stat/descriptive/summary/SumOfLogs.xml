<?xml version="1.0" encoding="UTF-8"?>
<class name="SumOfLogs">
  <javadoc>
    <text>Returns the sum of the natural logs for this collection of values.
 * &lt;p&gt;
 * Uses {@link org.apache.commons.math3.util.FastMath#log(double)} to compute the logs.
 * Therefore,
 * &lt;ul&gt;
 * &lt;li&gt;If any of values are &amp;lt; 0, the result is &lt;code&gt;NaN.&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;If all values are non-negative and less than
 * &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt;,  but at least one value is 0, the
 * result is &lt;code&gt;Double.NEGATIVE_INFINITY.&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;If both &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt; and
 * &lt;code&gt;Double.NEGATIVE_INFINITY&lt;/code&gt; are among the values, the result is
 * &lt;code&gt;NaN.&lt;/code&gt;&lt;/li&gt;
 * &lt;/ul&gt;&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
 * multiple threads access an instance of this class concurrently, and at least
 * one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
 * &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.&lt;/p&gt;</text>
    <version>$Id: SumOfLogs.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Number of values that have been added</text>
  </javadoc>
  <declaration type="int" name="n" />
  <javadoc>
    <text>The currently running value</text>
  </javadoc>
  <declaration type="double" name="value" />
  <javadoc>
    <text>Create a SumOfLogs instance</text>
  </javadoc>
  <method type="constructor" name="SumOfLogs" />
  <javadoc>
    <text>Copy constructor, creates a new {@code SumOfLogs} identical
 * to the {@code original}</text>
    <param>original the {@code SumOfLogs} instance to copy</param>
    <throws>NullArgumentException if original is null</throws>
  </javadoc>
  <method type="constructor" name="SumOfLogs" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="increment" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getResult" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="long" name="getN" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="clear" />
  <javadoc>
    <text>Returns the sum of the natural logs of the entries in the specified portion of
 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
 * is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
 * &lt;p&gt;
 * See {@link SumOfLogs}.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the sum of the natural logs of the values or 0 if
 * length = 0</return>
    <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
  </javadoc>
  <method type="double" name="evaluate">
    <declaration type="double" name="sumLog" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="SumOfLogs" name="copy">
    <declaration type="SumOfLogs" name="result" />
    <comment>No try-catch or advertised exception here because args are valid</comment>
  </method>
  <javadoc>
    <text>Copies source to dest.
 * &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;</text>
    <param>source SumOfLogs to copy</param>
    <param>dest SumOfLogs to copy to</param>
    <throws>NullArgumentException if either source or dest is null</throws>
  </javadoc>
  <method type="void" name="copy" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
