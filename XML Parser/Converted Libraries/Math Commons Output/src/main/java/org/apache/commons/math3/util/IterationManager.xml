<?xml version="1.0" encoding="UTF-8"?>
<class name="IterationManager">
  <javadoc>
    <text>This abstract class provides a general framework for managing iterative
 * algorithms. The maximum number of iterations can be set, and methods are
 * provided to monitor the current iteration count. A lightweight event
 * framework is also provided.</text>
    <version>$Id: IterationManager.java 1422313 2012-12-15 18:53:41Z psteitz $</version>
  </javadoc>
  <javadoc>
    <text>Keeps a count of the number of iterations.</text>
  </javadoc>
  <declaration type="Incrementor" name="iterations" />
  <javadoc>
    <text>The collection of all listeners attached to this iterative algorithm.</text>
  </javadoc>
  <declaration type="Collection&lt;IterationListener&gt;" name="listeners" />
  <javadoc>
    <text>Creates a new instance of this class.</text>
    <param>maxIterations the maximum number of iterations</param>
  </javadoc>
  <method type="constructor" name="IterationManager" />
  <javadoc>
    <text>Creates a new instance of this class.</text>
    <param>maxIterations the maximum number of iterations</param>
    <param>callBack the function to be called when the maximum number of
 * iterations has been reached</param>
    <throws>org.apache.commons.math3.exception.NullArgumentException if {@code callBack} is {@code null}</throws>
    <since>3.1</since>
  </javadoc>
  <method type="constructor" name="IterationManager" />
  <javadoc>
    <text>Attaches a listener to this manager.</text>
    <param>listener A {@code IterationListener} object.</param>
  </javadoc>
  <method type="void" name="addIterationListener" />
  <javadoc>
    <text>Informs all registered listeners that the initial phase (prior to the
 * main iteration loop) has been completed.</text>
    <param>e The {@link IterationEvent} object.</param>
  </javadoc>
  <method type="void" name="fireInitializationEvent">
    <scope />
  </method>
  <javadoc>
    <text>Informs all registered listeners that a new iteration (in the main
 * iteration loop) has been performed.</text>
    <param>e The {@link IterationEvent} object.</param>
  </javadoc>
  <method type="void" name="fireIterationPerformedEvent">
    <scope />
  </method>
  <javadoc>
    <text>Informs all registered listeners that a new iteration (in the main
 * iteration loop) has been started.</text>
    <param>e The {@link IterationEvent} object.</param>
  </javadoc>
  <method type="void" name="fireIterationStartedEvent">
    <scope />
  </method>
  <javadoc>
    <text>Informs all registered listeners that the final phase (post-iterations)
 * has been completed.</text>
    <param>e The {@link IterationEvent} object.</param>
  </javadoc>
  <method type="void" name="fireTerminationEvent">
    <scope />
  </method>
  <javadoc>
    <text>Returns the number of iterations of this solver, 0 if no iterations has
 * been performed yet.</text>
    <return>the number of iterations.</return>
  </javadoc>
  <method type="int" name="getIterations" />
  <javadoc>
    <text>Returns the maximum number of iterations.</text>
    <return>the maximum number of iterations.</return>
  </javadoc>
  <method type="int" name="getMaxIterations" />
  <javadoc>
    <text>Increments the iteration count by one, and throws an exception if the
 * maximum number of iterations is reached. This method should be called at
 * the beginning of a new iteration.</text>
    <throws>MaxCountExceededException if the maximum number of iterations is
 * reached.</throws>
  </javadoc>
  <method type="void" name="incrementIterationCount" />
  <javadoc>
    <text>Removes the specified iteration listener from the list of listeners
 * currently attached to {@code this} object. Attempting to remove a
 * listener which was &lt;em&gt;not&lt;/em&gt; previously registered does not cause any
 * error.</text>
    <param>listener The {@link IterationListener} to be removed.</param>
  </javadoc>
  <method type="void" name="removeIterationListener" />
  <javadoc>
    <text>Sets the iteration count to 0. This method must be called during the
 * initial phase.</text>
  </javadoc>
  <method type="void" name="resetIterationCount" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
