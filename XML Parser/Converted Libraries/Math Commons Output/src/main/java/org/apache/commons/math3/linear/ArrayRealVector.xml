<?xml version="1.0" encoding="UTF-8"?>
<class name="ArrayRealVector">
  <javadoc>
    <text>This class implements the {@link RealVector} interface with a double array.</text>
    <version>$Id: ArrayRealVector.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Default format.</text>
  </javadoc>
  <declaration type="RealVectorFormat" name="DEFAULT_FORMAT" />
  <javadoc>
    <text>Entries of the vector.</text>
  </javadoc>
  <declaration type="double" name="data" />
  <javadoc>
    <text>Build a 0-length vector.
 * Zero-length vectors may be used to initialized construction of vectors
 * by data gathering. We start with zero-length and use either the {@link #ArrayRealVector(ArrayRealVector,ArrayRealVector)} constructor
 * or one of the {@code append} method ({@link #append(double)},{@link #append(ArrayRealVector)}) to gather data into this vector.</text>
  </javadoc>
  <method type="constructor" name="ArrayRealVector" />
  <javadoc>
    <text>Construct a vector of zeroes.</text>
    <param>size Size of the vector.</param>
  </javadoc>
  <method type="constructor" name="ArrayRealVector" />
  <javadoc>
    <text>Construct a vector with preset values.</text>
    <param>size Size of the vector</param>
    <param>preset All entries will be set with this value.</param>
  </javadoc>
  <method type="constructor" name="ArrayRealVector" />
  <javadoc>
    <text>Construct a vector from an array, copying the input array.</text>
    <param>d Array.</param>
  </javadoc>
  <method type="constructor" name="ArrayRealVector" />
  <javadoc>
    <text>Create a new ArrayRealVector using the input array as the underlying
 * data array.
 * If an array is built specially in order to be embedded in a
 * ArrayRealVector and not used directly, the {@code copyArray} may be
 * set to {@code false}. This will prevent the copying and improve
 * performance as no new array will be built and no data will be copied.</text>
    <param>d Data for the new vector.</param>
    <param>copyArray if {@code true}, the input array will be copied,
 * otherwise it will be referenced.</param>
    <throws>NullArgumentException if {@code d} is {@code null}.</throws>
    <see>#ArrayRealVector(double[])</see>
  </javadoc>
  <method type="constructor" name="ArrayRealVector">
    <scope />
  </method>
  <javadoc>
    <text>Construct a vector from part of a array.</text>
    <param>d Array.</param>
    <param>pos Position of first entry.</param>
    <param>size Number of entries to copy.</param>
    <throws>NullArgumentException if {@code d} is {@code null}.</throws>
    <throws>NumberIsTooLargeException if the size of {@code d} is less
 * than {@code pos + size}.</throws>
  </javadoc>
  <method type="constructor" name="ArrayRealVector">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Construct a vector from an array.</text>
    <param>d Array of {@code Double}s.</param>
  </javadoc>
  <method type="constructor" name="ArrayRealVector">
    <scope />
  </method>
  <javadoc>
    <text>Construct a vector from part of an array.</text>
    <param>d Array.</param>
    <param>pos Position of first entry.</param>
    <param>size Number of entries to copy.</param>
    <throws>NullArgumentException if {@code d} is {@code null}.</throws>
    <throws>NumberIsTooLargeException if the size of {@code d} is less
 * than {@code pos + size}.</throws>
  </javadoc>
  <method type="constructor" name="ArrayRealVector">
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Construct a vector from another vector, using a deep copy.</text>
    <param>v vector to copy.</param>
    <throws>NullArgumentException if {@code v} is {@code null}.</throws>
  </javadoc>
  <method type="constructor" name="ArrayRealVector">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Construct a vector from another vector, using a deep copy.</text>
    <param>v Vector to copy.</param>
    <throws>NullArgumentException if {@code v} is {@code null}.</throws>
  </javadoc>
  <method type="constructor" name="ArrayRealVector" />
  <javadoc>
    <text>Construct a vector from another vector.</text>
    <param>v Vector to copy.</param>
    <param>deep If {@code true} perform a deep copy, otherwise perform a
 * shallow copy.</param>
  </javadoc>
  <method type="constructor" name="ArrayRealVector" />
  <javadoc>
    <text>Construct a vector by appending one vector to another vector.</text>
    <param>v1 First vector (will be put in front of the new vector).</param>
    <param>v2 Second vector (will be put at back of the new vector).</param>
  </javadoc>
  <method type="constructor" name="ArrayRealVector" />
  <javadoc>
    <text>Construct a vector by appending one vector to another vector.</text>
    <param>v1 First vector (will be put in front of the new vector).</param>
    <param>v2 Second vector (will be put at back of the new vector).</param>
  </javadoc>
  <method type="constructor" name="ArrayRealVector">
    <declaration type="int" name="l1" />
    <declaration type="int" name="l2" />
    <scope />
  </method>
  <javadoc>
    <text>Construct a vector by appending one vector to another vector.</text>
    <param>v1 First vector (will be put in front of the new vector).</param>
    <param>v2 Second vector (will be put at back of the new vector).</param>
  </javadoc>
  <method type="constructor" name="ArrayRealVector">
    <declaration type="int" name="l1" />
    <declaration type="int" name="l2" />
    <scope />
  </method>
  <javadoc>
    <text>Construct a vector by appending one vector to another vector.</text>
    <param>v1 First vector (will be put in front of the new vector).</param>
    <param>v2 Second vector (will be put at back of the new vector).</param>
  </javadoc>
  <method type="constructor" name="ArrayRealVector">
    <declaration type="int" name="l1" />
    <declaration type="int" name="l2" />
  </method>
  <javadoc>
    <text>Construct a vector by appending one vector to another vector.</text>
    <param>v1 First vector (will be put in front of the new vector).</param>
    <param>v2 Second vector (will be put at back of the new vector).</param>
  </javadoc>
  <method type="constructor" name="ArrayRealVector">
    <declaration type="int" name="l1" />
    <declaration type="int" name="l2" />
  </method>
  <javadoc>
    <text>Construct a vector by appending one vector to another vector.</text>
    <param>v1 first vector (will be put in front of the new vector)</param>
    <param>v2 second vector (will be put at back of the new vector)</param>
  </javadoc>
  <method type="constructor" name="ArrayRealVector">
    <declaration type="int" name="l1" />
    <declaration type="int" name="l2" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="ArrayRealVector" name="copy" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="ArrayRealVector" name="add">
    <scope>
      <declaration type="double[]" name="vData" />
      <declaration type="int" name="dim" />
      <declaration type="ArrayRealVector" name="result" />
      <declaration type="double[]" name="resultData" />
      <scope />
    </scope>
    <scope>
      <declaration type="double[]" name="out" />
      <declaration type="Iterator&lt;Entry&gt;" name="it" />
      <scope>
        <declaration type="Entry" name="e" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="ArrayRealVector" name="subtract">
    <scope>
      <declaration type="double[]" name="vData" />
      <declaration type="int" name="dim" />
      <declaration type="ArrayRealVector" name="result" />
      <declaration type="double[]" name="resultData" />
      <scope />
    </scope>
    <scope>
      <declaration type="double[]" name="out" />
      <declaration type="Iterator&lt;Entry&gt;" name="it" />
      <scope>
        <declaration type="Entry" name="e" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="ArrayRealVector" name="map" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="ArrayRealVector" name="mapToSelf">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="mapAddToSelf">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="mapSubtractToSelf">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="mapMultiplyToSelf">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="mapDivideToSelf">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="ArrayRealVector" name="ebeMultiply">
    <scope>
      <declaration type="double[]" name="vData" />
      <declaration type="int" name="dim" />
      <declaration type="ArrayRealVector" name="result" />
      <declaration type="double[]" name="resultData" />
      <scope />
    </scope>
    <scope>
      <declaration type="double[]" name="out" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="ArrayRealVector" name="ebeDivide">
    <scope>
      <declaration type="double[]" name="vData" />
      <declaration type="int" name="dim" />
      <declaration type="ArrayRealVector" name="result" />
      <declaration type="double[]" name="resultData" />
      <scope />
    </scope>
    <scope>
      <declaration type="double[]" name="out" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Get a reference to the underlying data array.
 * This method does not make a fresh copy of the underlying data.</text>
    <return>the array of entries.</return>
  </javadoc>
  <method type="double[]" name="getDataRef" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="dotProduct">
    <scope>
      <declaration type="double[]" name="vData" />
      <declaration type="double" name="dot" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getNorm">
    <declaration type="double" name="sum" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getL1Norm">
    <declaration type="double" name="sum" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getLInfNorm">
    <declaration type="double" name="max" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getDistance">
    <scope>
      <declaration type="double[]" name="vData" />
      <declaration type="double" name="sum" />
      <scope>
        <declaration type="double" name="delta" />
      </scope>
    </scope>
    <scope>
      <declaration type="double" name="sum" />
      <scope>
        <declaration type="double" name="delta" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getL1Distance">
    <scope>
      <declaration type="double[]" name="vData" />
      <declaration type="double" name="sum" />
      <scope>
        <declaration type="double" name="delta" />
      </scope>
    </scope>
    <scope>
      <declaration type="double" name="sum" />
      <scope>
        <declaration type="double" name="delta" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getLInfDistance">
    <scope>
      <declaration type="double[]" name="vData" />
      <declaration type="double" name="max" />
      <scope>
        <declaration type="double" name="delta" />
      </scope>
    </scope>
    <scope>
      <declaration type="double" name="max" />
      <scope>
        <declaration type="double" name="delta" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealMatrix" name="outerProduct">
    <scope>
      <declaration type="double[]" name="vData" />
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="RealMatrix" name="out" />
      <scope>
        <scope />
      </scope>
    </scope>
    <scope>
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="RealMatrix" name="out" />
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getEntry">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getDimension" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="append">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Construct a vector by appending a vector to this vector.</text>
    <param>v Vector to append to this one.</param>
    <return>a new vector.</return>
  </javadoc>
  <method type="ArrayRealVector" name="append" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="append">
    <declaration type="double[]" name="out" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="RealVector" name="getSubVector">
    <scope />
    <declaration type="ArrayRealVector" name="out" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setEntry">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="addToEntry">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setSubVector">
    <scope />
    <scope>
      <scope>
        <scope />
      </scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Set a set of consecutive elements.</text>
    <param>index Index of first element to be set.</param>
    <param>v Vector containing the values to set.</param>
    <throws>OutOfRangeException if the index is inconsistent with the vector
 * size.</throws>
  </javadoc>
  <method type="void" name="setSubVector">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="set" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[]" name="toArray" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>Check if instance and specified vectors have the same dimension.</text>
    <param>v Vector to compare instance with.</param>
    <throws>DimensionMismatchException if the vectors do not
 * have the same dimension.</throws>
  </javadoc>
  <method type="void" name="checkVectorDimensions" />
  <javadoc>
    <text>Check if instance dimension is equal to some expected value.</text>
    <param>n Expected dimension.</param>
    <throws>DimensionMismatchException if the dimension is
 * inconsistent with vector size.</throws>
  </javadoc>
  <method type="void" name="checkVectorDimensions">
    <scope />
  </method>
  <javadoc>
    <text>Check if any coordinate of this vector is {@code NaN}.</text>
    <return>{@code true} if any coordinate of this vector is {@code NaN},{@code false} otherwise.</return>
  </javadoc>
  <method type="boolean" name="isNaN">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Check whether any coordinate of this vector is infinite and none
 * are {@code NaN}.</text>
    <return>{@code true} if any coordinate of this vector is infinite and
 * none are {@code NaN}, {@code false} otherwise.</return>
  </javadoc>
  <method type="boolean" name="isInfinite">
    <scope />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope />
    <declaration type="RealVector" name="rhs" />
    <scope />
    <scope />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc} All {@code NaN} values have the same hash code.</text>
  </javadoc>
  <method type="int" name="hashCode">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="ArrayRealVector" name="combine" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="ArrayRealVector" name="combineToSelf">
    <scope>
      <declaration type="double[]" name="yData" />
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInDefaultOrder">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInDefaultOrder">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}In this implementation, the optimized order is the default order.</text>
  </javadoc>
  <method type="double" name="walkInOptimizedOrder" />
  <javadoc>
    <text>{@inheritDoc}In this implementation, the optimized order is the default order.</text>
  </javadoc>
  <method type="double" name="walkInOptimizedOrder" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInDefaultOrder">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="walkInDefaultOrder">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}In this implementation, the optimized order is the default order.</text>
  </javadoc>
  <method type="double" name="walkInOptimizedOrder" />
  <javadoc>
    <text>{@inheritDoc}In this implementation, the optimized order is the default order.</text>
  </javadoc>
  <method type="double" name="walkInOptimizedOrder" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
