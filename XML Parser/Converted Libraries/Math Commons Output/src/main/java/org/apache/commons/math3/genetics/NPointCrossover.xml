<?xml version="1.0" encoding="UTF-8"?>
<class name="NPointCrossover">
  <javadoc>
    <text>N-point crossover policy. For each iteration a random crossover point is
 * selected and the first part from each parent is copied to the corresponding
 * child, and the second parts are copied crosswise.
 * Example (2-point crossover):
 * &lt;pre&gt;
 * -C- denotes a crossover point
 * -C-       -C-                         -C-        -C-
 * p1 = (1 0  | 1 0 0 1 | 0 1 1)    X    p2 = (0 1  | 1 0 1 0  | 1 1 1)
 * \----/ \-------/ \-----/              \----/ \--------/ \-----/
 * ||      (*)       ||                  ||      (**)       ||
 * VV      (**)      VV                  VV      (*)        VV
 * /----\ /--------\ /-----\             /----\ /--------\ /-----\
 * c1 = (1 0  | 1 0 1 0  | 0 1 1)    X   c2 = (0 1  | 1 0 0 1  | 0 1 1)
 * &lt;/pre&gt;
 * This policy works only on {@link AbstractListChromosome}, and therefore it
 * is parameterized by T. Moreover, the chromosomes must have same lengths.</text>
    <param>&lt;T&gt;
 *  generic type of the {@link AbstractListChromosome}s for crossover</param>
    <since>3.1</since>
    <version>$Id: NPointCrossover.java 1385297 2012-09-16 16:05:57Z tn $</version>
  </javadoc>
  <javadoc>
    <text>The number of crossover points.</text>
  </javadoc>
  <declaration type="int" name="crossoverPoints" />
  <javadoc>
    <text>Creates a new {@link NPointCrossover} policy using the given number of points.
 * &lt;p&gt;
 * &lt;b&gt;Note&lt;/b&gt;: the number of crossover points must be &amp;lt; &lt;code&gt;chromosome length - 1&lt;/code&gt;.
 * This condition can only be checked at runtime, as the chromosome length is not known in advance.</text>
    <param>crossoverPoints the number of crossover points</param>
    <throws>NotStrictlyPositiveException if the number of {@code crossoverPoints} is not strictly positive</throws>
  </javadoc>
  <method type="constructor" name="NPointCrossover">
    <scope />
  </method>
  <javadoc>
    <text>Returns the number of crossover points used by this {@link CrossoverPolicy}.</text>
    <return>the number of crossover points</return>
  </javadoc>
  <method type="int" name="getCrossoverPoints" />
  <javadoc>
    <text>Performs a N-point crossover. N random crossover points are selected and are used
 * to divide the parent chromosomes into segments. The segments are copied in alternate
 * order from the two parents to the corresponding child chromosomes.
 * Example (2-point crossover):
 * &lt;pre&gt;
 * -C- denotes a crossover point
 * -C-       -C-                         -C-        -C-
 * p1 = (1 0  | 1 0 0 1 | 0 1 1)    X    p2 = (0 1  | 1 0 1 0  | 1 1 1)
 * \----/ \-------/ \-----/              \----/ \--------/ \-----/
 * ||      (*)       ||                  ||      (**)       ||
 * VV      (**)      VV                  VV      (*)        VV
 * /----\ /--------\ /-----\             /----\ /--------\ /-----\
 * c1 = (1 0  | 1 0 1 0  | 0 1 1)    X   c2 = (0 1  | 1 0 0 1  | 0 1 1)
 * &lt;/pre&gt;</text>
    <param>first first parent (p1)</param>
    <param>second second parent (p2)</param>
    <return>pair of two children (c1,c2)</return>
    <throws>MathIllegalArgumentException iff one of the chromosomes is
 * not an instance of {@link AbstractListChromosome}</throws>
    <throws>DimensionMismatchException if the length of the two chromosomes is different</throws>
  </javadoc>
  <method type="ChromosomePair" name="crossover">
    <scope />
  </method>
  <javadoc>
    <text>Helper for {@link #crossover(Chromosome,Chromosome)}. Performs the actual crossover.</text>
    <param>first the first chromosome</param>
    <param>second the second chromosome</param>
    <return>the pair of new chromosomes that resulted from the crossover</return>
    <throws>DimensionMismatchException if the length of the two chromosomes is different</throws>
    <throws>NumberIsTooLargeException if the number of crossoverPoints is too large for the actual chromosomes</throws>
  </javadoc>
  <method type="ChromosomePair" name="mate">
    <declaration type="int" name="length" />
    <scope />
    <scope />
    <declaration type="List&lt;T&gt;" name="parent1Rep" />
    <declaration type="List&lt;T&gt;" name="parent2Rep" />
    <declaration type="ArrayList&lt;T&gt;" name="child1Rep" />
    <declaration type="ArrayList&lt;T&gt;" name="child2Rep" />
    <declaration type="RandomGenerator" name="random" />
    <declaration type="ArrayList&lt;T&gt;" name="c1" />
    <declaration type="ArrayList&lt;T&gt;" name="c2" />
    <declaration type="int" name="remainingPoints" />
    <declaration type="int" name="lastIndex" />
    <scope>
      <declaration type="int" name="crossoverIndex" />
      <scope />
      <declaration type="ArrayList&lt;T&gt;" name="tmp" />
    </scope>
    <scope />
    <comment>array representations of the parents</comment>
    <comment>and of the children</comment>
    <comment>select the next crossover point at random</comment>
    <comment>copy the current segment</comment>
    <comment>swap the children for the next segment</comment>
    <comment>copy the last segment</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>OK because of instanceof checks</comment>
</class>
