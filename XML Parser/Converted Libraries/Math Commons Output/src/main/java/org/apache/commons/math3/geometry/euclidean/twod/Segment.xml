<?xml version="1.0" encoding="UTF-8"?>
<class name="Segment">
  <javadoc>
    <text>Simple container for a two-points segment.</text>
    <version>$Id: Segment.java 1422195 2012-12-15 06:45:18Z psteitz $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Start point of the segment.</text>
  </javadoc>
  <declaration type="Vector2D" name="start" />
  <javadoc>
    <text>End point of the segments.</text>
  </javadoc>
  <declaration type="Vector2D" name="end" />
  <javadoc>
    <text>Line containing the segment.</text>
  </javadoc>
  <declaration type="Line" name="line" />
  <javadoc>
    <text>Build a segment.</text>
    <param>start start point of the segment</param>
    <param>end end point of the segment</param>
    <param>line line containing the segment</param>
  </javadoc>
  <method type="constructor" name="Segment" />
  <javadoc>
    <text>Get the start point of the segment.</text>
    <return>start point of the segment</return>
  </javadoc>
  <method type="Vector2D" name="getStart" />
  <javadoc>
    <text>Get the end point of the segment.</text>
    <return>end point of the segment</return>
  </javadoc>
  <method type="Vector2D" name="getEnd" />
  <javadoc>
    <text>Get the line containing the segment.</text>
    <return>line containing the segment</return>
  </javadoc>
  <method type="Line" name="getLine" />
  <javadoc>
    <text>Calculates the shortest distance from a point to this line segment.
 * &lt;p&gt;
 * If the perpendicular extension from the point to the line does not
 * cross in the bounds of the line segment, the shortest distance to
 * the two end points will be returned.
 * &lt;/p&gt;
 * Algorithm adapted from:
 * &lt;a href="http://www.codeguru.com/forum/printthread.php?s=cc8cf0596231f9a7dba4da6e77c29db3&amp;t=194400&amp;pp=15&amp;page=1"&gt;
 * Thread @ Codeguru&lt;/a&gt;</text>
    <param>p to check</param>
    <return>distance between the instance and the point</return>
    <since>3.1</since>
  </javadoc>
  <method type="double" name="distance">
    <declaration type="double" name="deltaX" />
    <declaration type="double" name="deltaY" />
    <declaration type="double" name="r" />
    <scope>
      <declaration type="double" name="dist1" />
      <declaration type="double" name="dist2" />
    </scope>
    <scope>
      <declaration type="double" name="px" />
      <declaration type="double" name="py" />
      <declaration type="Vector2D" name="interPt" />
    </scope>
    <comment>r == 0 =&gt; P = startPt</comment>
    <comment>r == 1 =&gt; P = endPt</comment>
    <comment>r &lt; 0 =&gt; P is on the backward extension of the segment</comment>
    <comment>r &gt; 1 =&gt; P is on the forward extension of the segment</comment>
    <comment>0 &lt; r &lt; 1 =&gt; P is on the segment</comment>
    <comment>if point isn't on the line segment, just return the shortest distance to the end points</comment>
    <comment>find point on line and see if it is in the line segment</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
