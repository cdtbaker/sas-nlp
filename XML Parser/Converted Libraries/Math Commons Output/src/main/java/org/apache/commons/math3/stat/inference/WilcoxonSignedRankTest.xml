<?xml version="1.0" encoding="UTF-8"?>
<class name="WilcoxonSignedRankTest">
  <javadoc>
    <text>An implementation of the Wilcoxon signed-rank test.</text>
    <version>$Id: WilcoxonSignedRankTest.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Ranking algorithm.</text>
  </javadoc>
  <declaration type="NaturalRanking" name="naturalRanking" />
  <javadoc>
    <text>Create a test instance where NaN's are left in place and ties get
 * the average of applicable ranks. Use this unless you are very sure
 * of what you are doing.</text>
  </javadoc>
  <method type="constructor" name="WilcoxonSignedRankTest" />
  <javadoc>
    <text>Create a test instance using the given strategies for NaN's and ties.
 * Only use this if you are sure of what you are doing.</text>
    <param>nanStrategyspecifies the strategy that should be used for Double.NaN's</param>
    <param>tiesStrategyspecifies the strategy that should be used for ties</param>
  </javadoc>
  <method type="constructor" name="WilcoxonSignedRankTest" />
  <javadoc>
    <text>Ensures that the provided arrays fulfills the assumptions.</text>
    <param>x first sample</param>
    <param>y second sample</param>
    <throws>NullArgumentException if {@code x} or {@code y} are {@code null}.</throws>
    <throws>NoDataException if {@code x} or {@code y} are zero-length.</throws>
    <throws>DimensionMismatchException if {@code x} and {@code y} do not
 * have the same length.</throws>
  </javadoc>
  <method type="void" name="ensureDataConformance">
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Calculates y[i] - x[i] for all i</text>
    <param>x first sample</param>
    <param>y second sample</param>
    <return>z = y - x</return>
  </javadoc>
  <method type="double[]" name="calculateDifferences">
    <declaration type="double[]" name="z" />
    <scope />
  </method>
  <javadoc>
    <text>Calculates |z[i]| for all i</text>
    <param>z sample</param>
    <return>|z|</return>
    <throws>NullArgumentException if {@code z} is {@code null}</throws>
    <throws>NoDataException if {@code z} is zero-length.</throws>
  </javadoc>
  <method type="double[]" name="calculateAbsoluteDifferences">
    <scope />
    <scope />
    <declaration type="double[]" name="zAbs" />
    <scope />
  </method>
  <javadoc>
    <text>Computes the &lt;a
 * href="http://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test"&gt;
 * Wilcoxon signed ranked statistic&lt;/a&gt; comparing mean for two related
 * samples or repeated measurements on a single sample.
 * &lt;p&gt;
 * This statistic can be used to perform a Wilcoxon signed ranked test
 * evaluating the null hypothesis that the two related samples or repeated
 * measurements on a single sample has equal mean.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Let X&lt;sub&gt;i&lt;/sub&gt; denote the i'th individual of the first sample and
 * Y&lt;sub&gt;i&lt;/sub&gt; the related i'th individual in the second sample. Let
 * Z&lt;sub&gt;i&lt;/sub&gt; = Y&lt;sub&gt;i&lt;/sub&gt; - X&lt;sub&gt;i&lt;/sub&gt;.
 * &lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;:
 * &lt;ul&gt;
 * &lt;li&gt;The differences Z&lt;sub&gt;i&lt;/sub&gt; must be independent.&lt;/li&gt;
 * &lt;li&gt;Each Z&lt;sub&gt;i&lt;/sub&gt; comes from a continuous population (they must be
 * identical) and is symmetric about a common median.&lt;/li&gt;
 * &lt;li&gt;The values that X&lt;sub&gt;i&lt;/sub&gt; and Y&lt;sub&gt;i&lt;/sub&gt; represent are
 * ordered, so the comparisons greater than, less than, and equal to are
 * meaningful.&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;</text>
    <param>x the first sample</param>
    <param>y the second sample</param>
    <return>wilcoxonSignedRank statistic (the larger of W+ and W-)</return>
    <throws>NullArgumentException if {@code x} or {@code y} are {@code null}.</throws>
    <throws>NoDataException if {@code x} or {@code y} are zero-length.</throws>
    <throws>DimensionMismatchException if {@code x} and {@code y} do not
 * have the same length.</throws>
  </javadoc>
  <method type="double" name="wilcoxonSignedRank">
    <declaration type="double[]" name="z" />
    <declaration type="double[]" name="zAbs" />
    <declaration type="double[]" name="ranks" />
    <declaration type="double" name="Wplus" />
    <scope>
      <scope />
    </scope>
    <declaration type="int" name="N" />
    <declaration type="double" name="Wminus" />
    <comment>throws IllegalArgumentException if x and y are not correctly</comment>
    <comment>specified</comment>
  </method>
  <javadoc>
    <text>Algorithm inspired by
 * http://www.fon.hum.uva.nl/Service/Statistics/Signed_Rank_Algorihms.html#C
 * by Rob van Son, Institute of Phonetic Sciences &amp; IFOTT,
 * University of Amsterdam</text>
    <param>Wmax largest Wilcoxon signed rank value</param>
    <param>N number of subjects (corresponding to x.length)</param>
    <return>two-sided exact p-value</return>
  </javadoc>
  <method type="double" name="calculateExactPValue">
    <declaration type="int" name="m" />
    <declaration type="int" name="largerRankSums" />
    <scope>
      <declaration type="int" name="rankSum" />
      <scope>
        <scope />
      </scope>
      <scope />
    </scope>
    <comment>Total number of outcomes (equal to 2^N but a lot faster)</comment>
    <comment>Generate all possible rank sums</comment>
    <comment>(i &gt;&gt; j) &amp; 1 extract i's j-th bit from the right</comment>
    <comment>largerRankSums  m gives the one-sided p-value, so it's multiplied
 with 2 to get the two-sided p-value</comment>
  </method>
  <javadoc>
    <param>Wmin smallest Wilcoxon signed rank value</param>
    <param>N number of subjects (corresponding to x.length)</param>
    <return>two-sided asymptotic p-value</return>
  </javadoc>
  <method type="double" name="calculateAsymptoticPValue">
    <declaration type="double" name="ES" />
    <declaration type="double" name="VarS" />
    <declaration type="double" name="z" />
    <declaration type="NormalDistribution" name="standardNormal" />
    <comment>Same as (but saves computations):
 final double VarW = ((double) (N  (N + 1)  (2N + 1)))  24;</comment>
    <comment>- 0.5 is a continuity correction</comment>
    <comment>No try-catch or advertised exception because args are valid</comment>
  </method>
  <javadoc>
    <text>Returns the &lt;i&gt;observed significance level&lt;/i&gt;, or &lt;a href=
 * "http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"&gt;
 * p-value&lt;/a&gt;, associated with a &lt;a
 * href="http://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test"&gt;
 * Wilcoxon signed ranked statistic&lt;/a&gt; comparing mean for two related
 * samples or repeated measurements on a single sample.
 * &lt;p&gt;
 * Let X&lt;sub&gt;i&lt;/sub&gt; denote the i'th individual of the first sample and
 * Y&lt;sub&gt;i&lt;/sub&gt; the related i'th individual in the second sample. Let
 * Z&lt;sub&gt;i&lt;/sub&gt; = Y&lt;sub&gt;i&lt;/sub&gt; - X&lt;sub&gt;i&lt;/sub&gt;.
 * &lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Preconditions&lt;/strong&gt;:
 * &lt;ul&gt;
 * &lt;li&gt;The differences Z&lt;sub&gt;i&lt;/sub&gt; must be independent.&lt;/li&gt;
 * &lt;li&gt;Each Z&lt;sub&gt;i&lt;/sub&gt; comes from a continuous population (they must be
 * identical) and is symmetric about a common median.&lt;/li&gt;
 * &lt;li&gt;The values that X&lt;sub&gt;i&lt;/sub&gt; and Y&lt;sub&gt;i&lt;/sub&gt; represent are
 * ordered, so the comparisons greater than, less than, and equal to are
 * meaningful.&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;</text>
    <param>x the first sample</param>
    <param>y the second sample</param>
    <param>exactPValueif the exact p-value is wanted (only works for x.length &lt;= 30,
 * if true and x.length &gt; 30, this is ignored because
 * calculations may take too long)</param>
    <return>p-value</return>
    <throws>NullArgumentException if {@code x} or {@code y} are {@code null}.</throws>
    <throws>NoDataException if {@code x} or {@code y} are zero-length.</throws>
    <throws>DimensionMismatchException if {@code x} and {@code y} do not
 * have the same length.</throws>
    <throws>NumberIsTooLargeException if {@code exactPValue} is {@code true}and {@code x.length} &gt; 30</throws>
    <throws>ConvergenceException if the p-value can not be computed due to
 * a convergence error</throws>
    <throws>MaxCountExceededException if the maximum number of iterations
 * is exceeded</throws>
  </javadoc>
  <method type="double" name="wilcoxonSignedRankTest">
    <declaration type="int" name="N" />
    <declaration type="double" name="Wmax" />
    <scope />
    <scope />
    <scope>
      <declaration type="double" name="Wmin" />
    </scope>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
