<?xml version="1.0" encoding="UTF-8"?>
<class name="HypergeometricDistribution">
  <javadoc>
    <text>Implementation of the hypergeometric distribution.</text>
    <see>&lt;a href="http://en.wikipedia.org/wiki/Hypergeometric_distribution"&gt;Hypergeometric distribution (Wikipedia)&lt;/a&gt;</see>
    <see>&lt;a href="http://mathworld.wolfram.com/HypergeometricDistribution.html"&gt;Hypergeometric distribution (MathWorld)&lt;/a&gt;</see>
    <version>$Id: HypergeometricDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>The number of successes in the population.</text>
  </javadoc>
  <declaration type="int" name="numberOfSuccesses" />
  <javadoc>
    <text>The population size.</text>
  </javadoc>
  <declaration type="int" name="populationSize" />
  <javadoc>
    <text>The sample size.</text>
  </javadoc>
  <declaration type="int" name="sampleSize" />
  <javadoc>
    <text>Cached numerical variance</text>
  </javadoc>
  <declaration type="double" name="numericalVariance" />
  <javadoc>
    <text>Whether or not the numerical variance has been calculated</text>
  </javadoc>
  <declaration type="boolean" name="numericalVarianceIsCalculated" />
  <javadoc>
    <text>Construct a new hypergeometric distribution with the specified population
 * size, number of successes in the population, and sample size.</text>
    <param>populationSize Population size.</param>
    <param>numberOfSuccesses Number of successes in the population.</param>
    <param>sampleSize Sample size.</param>
    <throws>NotPositiveException if {@code numberOfSuccesses &lt; 0}.</throws>
    <throws>NotStrictlyPositiveException if {@code populationSize &lt;= 0}.</throws>
    <throws>NumberIsTooLargeException if {@code numberOfSuccesses &gt; populationSize},
 * or {@code sampleSize &gt; populationSize}.</throws>
  </javadoc>
  <method type="constructor" name="HypergeometricDistribution" />
  <javadoc>
    <text>Creates a new hypergeometric distribution.</text>
    <param>rng Random number generator.</param>
    <param>populationSize Population size.</param>
    <param>numberOfSuccesses Number of successes in the population.</param>
    <param>sampleSize Sample size.</param>
    <throws>NotPositiveException if {@code numberOfSuccesses &lt; 0}.</throws>
    <throws>NotStrictlyPositiveException if {@code populationSize &lt;= 0}.</throws>
    <throws>NumberIsTooLargeException if {@code numberOfSuccesses &gt; populationSize},
 * or {@code sampleSize &gt; populationSize}.</throws>
    <since>3.1</since>
  </javadoc>
  <method type="constructor" name="HypergeometricDistribution">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="cumulativeProbability">
    <declaration type="double" name="ret" />
    <declaration type="int[]" name="domain" />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Return the domain for the given hypergeometric distribution parameters.</text>
    <param>n Population size.</param>
    <param>m Number of successes in the population.</param>
    <param>k Sample size.</param>
    <return>a two element array containing the lower and upper bounds of the
 * hypergeometric distribution.</return>
  </javadoc>
  <method type="int[]" name="getDomain" />
  <javadoc>
    <text>Return the lowest domain value for the given hypergeometric distribution
 * parameters.</text>
    <param>n Population size.</param>
    <param>m Number of successes in the population.</param>
    <param>k Sample size.</param>
    <return>the lowest domain value of the hypergeometric distribution.</return>
  </javadoc>
  <method type="int" name="getLowerDomain" />
  <javadoc>
    <text>Access the number of successes.</text>
    <return>the number of successes.</return>
  </javadoc>
  <method type="int" name="getNumberOfSuccesses" />
  <javadoc>
    <text>Access the population size.</text>
    <return>the population size.</return>
  </javadoc>
  <method type="int" name="getPopulationSize" />
  <javadoc>
    <text>Access the sample size.</text>
    <return>the sample size.</return>
  </javadoc>
  <method type="int" name="getSampleSize" />
  <javadoc>
    <text>Return the highest domain value for the given hypergeometric distribution
 * parameters.</text>
    <param>m Number of successes in the population.</param>
    <param>k Sample size.</param>
    <return>the highest domain value of the hypergeometric distribution.</return>
  </javadoc>
  <method type="int" name="getUpperDomain" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="probability">
    <declaration type="double" name="ret" />
    <declaration type="int[]" name="domain" />
    <scope />
    <scope>
      <declaration type="double" name="p" />
      <declaration type="double" name="q" />
      <declaration type="double" name="p1" />
      <declaration type="double" name="p2" />
      <declaration type="double" name="p3" />
    </scope>
  </method>
  <javadoc>
    <text>For this distribution, {@code X}, this method returns {@code P(X &gt;= x)}.</text>
    <param>x Value at which the CDF is evaluated.</param>
    <return>the upper tail CDF for this distribution.</return>
    <since>1.1</since>
  </javadoc>
  <method type="double" name="upperCumulativeProbability">
    <declaration type="double" name="ret" />
    <declaration type="int[]" name="domain" />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>For this distribution, {@code X}, this method returns{@code P(x0 &lt;= X &lt;= x1)}.
 * This probability is computed by summing the point probabilities for the
 * values {@code x0, x0 + 1, x0 + 2, ..., x1}, in the order directed by{@code dx}.</text>
    <param>x0 Inclusive lower bound.</param>
    <param>x1 Inclusive upper bound.</param>
    <param>dx Direction of summation (1 indicates summing from x0 to x1, and
 * 0 indicates summing from x1 to x0).</param>
    <return>{@code P(x0 &lt;= X &lt;= x1)}.</return>
  </javadoc>
  <method type="double" name="innerCumulativeProbability">
    <declaration type="double" name="ret" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.</text>
  </javadoc>
  <method type="double" name="getNumericalMean" />
  <javadoc>
    <text>{@inheritDoc}For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the variance is{@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.</text>
  </javadoc>
  <method type="double" name="getNumericalVariance">
    <scope />
  </method>
  <javadoc>
    <text>Used by {@link #getNumericalVariance()}.</text>
    <return>the variance of this distribution</return>
  </javadoc>
  <method type="double" name="calculateNumericalVariance">
    <declaration type="double" name="N" />
    <declaration type="double" name="m" />
    <declaration type="double" name="n" />
  </method>
  <javadoc>
    <text>{@inheritDoc}For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the lower bound of the support is{@code max(0, n + m - N)}.</text>
    <return>lower bound of the support</return>
  </javadoc>
  <method type="int" name="getSupportLowerBound" />
  <javadoc>
    <text>{@inheritDoc}For number of successes {@code m} and sample size {@code n}, the upper
 * bound of the support is {@code min(m, n)}.</text>
    <return>upper bound of the support</return>
  </javadoc>
  <method type="int" name="getSupportUpperBound" />
  <javadoc>
    <text>{@inheritDoc}The support of this distribution is connected.</text>
    <return>{@code true}</return>
  </javadoc>
  <method type="boolean" name="isSupportConnected" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
