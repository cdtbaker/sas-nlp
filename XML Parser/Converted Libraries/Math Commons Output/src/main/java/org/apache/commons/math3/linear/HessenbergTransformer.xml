<?xml version="1.0" encoding="UTF-8"?>
<class name="HessenbergTransformer">
  <javadoc>
    <text>Class transforming a general real matrix to Hessenberg form.
 * &lt;p&gt;A m &amp;times; m matrix A can be written as the product of three matrices: A = P
 * &amp;times; H &amp;times; P&lt;sup&gt;T&lt;/sup&gt; with P an orthogonal matrix and H a Hessenberg
 * matrix. Both P and H are m &amp;times; m matrices.&lt;/p&gt;
 * &lt;p&gt;Transformation to Hessenberg form is often not a goal by itself, but it is an
 * intermediate step in more general decomposition algorithms like{@link EigenDecomposition eigen decomposition}. This class is therefore
 * intended for internal use by the library and is not public. As a consequence
 * of this explicitly limited scope, many methods directly returns references to
 * internal arrays, not copies.&lt;/p&gt;
 * &lt;p&gt;This class is based on the method orthes in class EigenvalueDecomposition
 * from the &lt;a href="http://math.nist.gov/javanumerics/jama/"&gt;JAMA&lt;/a&gt; library.&lt;/p&gt;</text>
    <see>&lt;a href="http://mathworld.wolfram.com/HessenbergDecomposition.html"&gt;MathWorld&lt;/a&gt;</see>
    <see>&lt;a href="http://en.wikipedia.org/wiki/Householder_transformation"&gt;Householder Transformations&lt;/a&gt;</see>
    <version>$Id: HessenbergTransformer.java 1334644 2012-05-06 14:33:32Z tn $</version>
    <since>3.1</since>
  </javadoc>
  <javadoc>
    <text>Householder vectors.</text>
  </javadoc>
  <declaration type="double" name="householderVectors" />
  <javadoc>
    <text>Temporary storage vector.</text>
  </javadoc>
  <declaration type="double" name="ort" />
  <javadoc>
    <text>Cached value of P.</text>
  </javadoc>
  <declaration type="RealMatrix" name="cachedP" />
  <javadoc>
    <text>Cached value of Pt.</text>
  </javadoc>
  <declaration type="RealMatrix" name="cachedPt" />
  <javadoc>
    <text>Cached value of H.</text>
  </javadoc>
  <declaration type="RealMatrix" name="cachedH" />
  <javadoc>
    <text>Build the transformation to Hessenberg form of a general matrix.</text>
    <param>matrix matrix to transform</param>
    <throws>NonSquareMatrixException if the matrix is not square</throws>
  </javadoc>
  <method type="constructor" name="HessenbergTransformer">
    <scope />
    <declaration type="int" name="m" />
    <comment>transform matrix</comment>
  </method>
  <javadoc>
    <text>Returns the matrix P of the transform.
 * &lt;p&gt;P is an orthogonal matrix, i.e. its inverse is also its transpose.&lt;/p&gt;</text>
    <return>the P matrix</return>
  </javadoc>
  <method type="RealMatrix" name="getP">
    <scope>
      <declaration type="int" name="n" />
      <declaration type="int" name="high" />
      <declaration type="double[][]" name="pa" />
      <scope>
        <scope />
      </scope>
      <scope>
        <scope>
          <scope />
          <scope>
            <declaration type="double" name="g" />
            <scope />
            <scope />
          </scope>
        </scope>
      </scope>
    </scope>
    <comment>Double division avoids possible underflow</comment>
  </method>
  <javadoc>
    <text>Returns the transpose of the matrix P of the transform.
 * &lt;p&gt;P is an orthogonal matrix, i.e. its inverse is also its transpose.&lt;/p&gt;</text>
    <return>the transpose of the P matrix</return>
  </javadoc>
  <method type="RealMatrix" name="getPT">
    <scope />
    <comment>return the cached matrix</comment>
  </method>
  <javadoc>
    <text>Returns the Hessenberg matrix H of the transform.</text>
    <return>the H matrix</return>
  </javadoc>
  <method type="RealMatrix" name="getH">
    <scope>
      <declaration type="int" name="m" />
      <declaration type="double[][]" name="h" />
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>copy the entry of the lower sub-diagonal</comment>
    <comment>copy upper triangular part of the matrix</comment>
    <comment>return the cached matrix</comment>
  </method>
  <javadoc>
    <text>Get the Householder vectors of the transform.
 * &lt;p&gt;Note that since this class is only intended for internal use, it returns
 * directly a reference to its internal arrays, not a copy.&lt;/p&gt;</text>
    <return>the main diagonal elements of the B matrix</return>
  </javadoc>
  <method type="double[][]" name="getHouseholderVectorsRef" />
  <javadoc>
    <text>Transform original matrix to Hessenberg form.
 * &lt;p&gt;Transformation is done using Householder transforms.&lt;/p&gt;</text>
  </javadoc>
  <method type="void" name="transform">
    <declaration type="int" name="n" />
    <declaration type="int" name="high" />
    <scope>
      <declaration type="double" name="scale" />
      <scope />
      <scope>
        <declaration type="double" name="h" />
        <scope />
        <declaration type="double" name="g" />
        <scope>
          <declaration type="double" name="f" />
          <scope />
          <scope />
        </scope>
        <scope>
          <declaration type="double" name="f" />
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>Scale column.</comment>
    <comment>Compute Householder transformation.</comment>
    <comment>Apply Householder similarity transformation</comment>
    <comment>H = (I - u*u' / h) * H * (I - u*u' / h)</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
