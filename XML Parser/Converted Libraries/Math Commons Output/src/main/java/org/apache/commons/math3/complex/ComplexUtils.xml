<?xml version="1.0" encoding="UTF-8"?>
<class name="ComplexUtils">
  <javadoc>
    <text>Static implementations of common{@link org.apache.commons.math3.complex.Complex} utilities functions.</text>
    <version>$Id: ComplexUtils.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Default constructor.</text>
  </javadoc>
  <method type="constructor" name="ComplexUtils" />
  <javadoc>
    <text>Creates a complex number from the given polar representation.
 * &lt;p&gt;
 * The value returned is &lt;code&gt;r&amp;middot;e&lt;sup&gt;i&amp;middot;theta&lt;/sup&gt;&lt;/code&gt;,
 * computed as &lt;code&gt;r&amp;middot;cos(theta) + r&amp;middot;sin(theta)i&lt;/code&gt;&lt;/p&gt;
 * &lt;p&gt;
 * If either &lt;code&gt;r&lt;/code&gt; or &lt;code&gt;theta&lt;/code&gt; is NaN, or
 * &lt;code&gt;theta&lt;/code&gt; is infinite, {@link Complex#NaN} is returned.&lt;/p&gt;
 * &lt;p&gt;
 * If &lt;code&gt;r&lt;/code&gt; is infinite and &lt;code&gt;theta&lt;/code&gt; is finite,
 * infinite or NaN values may be returned in parts of the result, following
 * the rules for double arithmetic.&lt;pre&gt;
 * Examples:
 * &lt;code&gt;
 * polar2Complex(INFINITY, &amp;pi;/4) = INFINITY + INFINITY i
 * polar2Complex(INFINITY, 0) = INFINITY + NaN i
 * polar2Complex(INFINITY, -&amp;pi;/4) = INFINITY - INFINITY i
 * polar2Complex(INFINITY, 5&amp;pi;/4) = -INFINITY - INFINITY i &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</text>
    <param>r the modulus of the complex number to create</param>
    <param>theta  the argument of the complex number to create</param>
    <return>&lt;code&gt;r&amp;middot;e&lt;sup&gt;i&amp;middot;theta&lt;/sup&gt;&lt;/code&gt;</return>
    <throws>MathIllegalArgumentException if {@code r} is negative.</throws>
    <since>1.1</since>
  </javadoc>
  <method type="Complex" name="polar2Complex">
    <scope />
  </method>
  <javadoc>
    <text>Convert an array of primitive doubles to an array of {@code Complex} objects.</text>
    <param>real Array of numbers to be converted to their {@code Complex}equivalent.</param>
    <return>an array of {@code Complex} objects.</return>
    <since>3.1</since>
  </javadoc>
  <method type="Complex[]" name="convertToComplex">
    <declaration type="Complex[]" name="c" />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
