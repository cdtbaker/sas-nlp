<?xml version="1.0" encoding="UTF-8"?>
<class name="Mean">
  <javadoc>
    <text>&lt;p&gt;Computes the arithmetic mean of a set of values. Uses the definitional
 * formula:&lt;/p&gt;
 * &lt;p&gt;
 * mean = sum(x_i) / n
 * &lt;/p&gt;
 * &lt;p&gt;where &lt;code&gt;n&lt;/code&gt; is the number of observations.
 * &lt;/p&gt;
 * &lt;p&gt;When {@link #increment(double)} is used to add data incrementally from a
 * stream of (unstored) values, the value of the statistic that{@link #getResult()} returns is computed using the following recursive
 * updating algorithm: &lt;/p&gt;
 * &lt;ol&gt;
 * &lt;li&gt;Initialize &lt;code&gt;m = &lt;/code&gt; the first value&lt;/li&gt;
 * &lt;li&gt;For each additional value, update using &lt;br&gt;
 * &lt;code&gt;m = m + (new value - m) / (number of observations)&lt;/code&gt;&lt;/li&gt;
 * &lt;/ol&gt;
 * &lt;p&gt; If {@link #evaluate(double[])} is used to compute the mean of an array
 * of stored values, a two-pass, corrected algorithm is used, starting with
 * the definitional formula computed using the array of stored values and then
 * correcting this by adding the mean deviation of the data values from the
 * arithmetic mean. See, e.g. "Comparison of Several Algorithms for Computing
 * Sample Means and Variances," Robert F. Ling, Journal of the American
 * Statistical Association, Vol. 69, No. 348 (Dec., 1974), pp. 859-866. &lt;/p&gt;
 * &lt;p&gt;
 * Returns &lt;code&gt;Double.NaN&lt;/code&gt; if the dataset is empty.
 * &lt;/p&gt;
 * &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
 * multiple threads access an instance of this class concurrently, and at least
 * one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
 * &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.</text>
    <version>$Id: Mean.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>First moment on which this statistic is based.</text>
  </javadoc>
  <declaration type="FirstMoment" name="moment" />
  <javadoc>
    <text>Determines whether or not this statistic can be incremented or cleared.
 * &lt;p&gt;
 * Statistics based on (constructed from) external moments cannot
 * be incremented or cleared.&lt;/p&gt;</text>
  </javadoc>
  <declaration type="boolean" name="incMoment" />
  <javadoc>
    <text>Constructs a Mean.</text>
  </javadoc>
  <method type="constructor" name="Mean" />
  <javadoc>
    <text>Constructs a Mean with an External Moment.</text>
    <param>m1 the moment</param>
  </javadoc>
  <method type="constructor" name="Mean" />
  <javadoc>
    <text>Copy constructor, creates a new {@code Mean} identical
 * to the {@code original}</text>
    <param>original the {@code Mean} instance to copy</param>
    <throws>NullArgumentException if original is null</throws>
  </javadoc>
  <method type="constructor" name="Mean" />
  <javadoc>
    <text>{@inheritDoc}&lt;p&gt;Note that when {@link #Mean(FirstMoment)} is used to
 * create a Mean, this method does nothing. In that case, the
 * FirstMoment should be incremented directly.&lt;/p&gt;</text>
  </javadoc>
  <method type="void" name="increment">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="clear">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getResult" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="long" name="getN" />
  <javadoc>
    <text>Returns the arithmetic mean of the entries in the specified portion of
 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
 * is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
 * &lt;p&gt;
 * See {@link Mean} for details on the computing algorithm.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the mean of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
  </javadoc>
  <method type="double" name="evaluate">
    <scope>
      <declaration type="Sum" name="sum" />
      <declaration type="double" name="sampleSize" />
      <declaration type="double" name="xbar" />
      <declaration type="double" name="correction" />
      <scope />
    </scope>
    <comment>Compute initial estimate using definitional formula</comment>
    <comment>Compute correction factor in second pass</comment>
  </method>
  <javadoc>
    <text>Returns the weighted arithmetic mean of the entries in the specified portion of
 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
 * is empty.
 * &lt;p&gt;
 * Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if either array is null.&lt;/p&gt;
 * &lt;p&gt;
 * See {@link Mean} for details on the computing algorithm. The two-pass algorithm
 * described above is used here, with weights applied in computing both the original
 * estimate and the correction factor.&lt;/p&gt;
 * &lt;p&gt;
 * Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if any of the following are true:
 * &lt;ul&gt;&lt;li&gt;the values array is null&lt;/li&gt;
 * &lt;li&gt;the weights array is null&lt;/li&gt;
 * &lt;li&gt;the weights array does not have the same length as the values array&lt;/li&gt;
 * &lt;li&gt;the weights array contains one or more infinite values&lt;/li&gt;
 * &lt;li&gt;the weights array contains one or more NaN values&lt;/li&gt;
 * &lt;li&gt;the weights array contains negative values&lt;/li&gt;
 * &lt;li&gt;the start and length arguments do not determine a valid array&lt;/li&gt;
 * &lt;/ul&gt;&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>weights the weights array</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the mean of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the parameters are not valid</throws>
    <since>2.1</since>
  </javadoc>
  <method type="double" name="evaluate">
    <scope>
      <declaration type="Sum" name="sum" />
      <declaration type="double" name="sumw" />
      <declaration type="double" name="xbarw" />
      <declaration type="double" name="correction" />
      <scope />
    </scope>
    <comment>Compute initial estimate using definitional formula</comment>
    <comment>Compute correction factor in second pass</comment>
  </method>
  <javadoc>
    <text>Returns the weighted arithmetic mean of the entries in the input array.
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if either array is null.&lt;/p&gt;
 * &lt;p&gt;
 * See {@link Mean} for details on the computing algorithm. The two-pass algorithm
 * described above is used here, with weights applied in computing both the original
 * estimate and the correction factor.&lt;/p&gt;
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if any of the following are true:
 * &lt;ul&gt;&lt;li&gt;the values array is null&lt;/li&gt;
 * &lt;li&gt;the weights array is null&lt;/li&gt;
 * &lt;li&gt;the weights array does not have the same length as the values array&lt;/li&gt;
 * &lt;li&gt;the weights array contains one or more infinite values&lt;/li&gt;
 * &lt;li&gt;the weights array contains one or more NaN values&lt;/li&gt;
 * &lt;li&gt;the weights array contains negative values&lt;/li&gt;
 * &lt;/ul&gt;&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>weights the weights array</param>
    <return>the mean of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the parameters are not valid</throws>
    <since>2.1</since>
  </javadoc>
  <method type="double" name="evaluate" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Mean" name="copy">
    <declaration type="Mean" name="result" />
    <comment>No try-catch or advertised exception because args are guaranteed non-null</comment>
  </method>
  <javadoc>
    <text>Copies source to dest.
 * &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;</text>
    <param>source Mean to copy</param>
    <param>dest Mean to copy to</param>
    <throws>NullArgumentException if either source or dest is null</throws>
  </javadoc>
  <method type="void" name="copy" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
