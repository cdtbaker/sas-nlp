<?xml version="1.0" encoding="UTF-8"?>
<class name="TransformerMap">
  <javadoc>
    <text>This TansformerMap automates the transformation of mixed object types.
 * It provides a means to set NumberTransformers that will be selected
 * based on the Class of the object handed to the Maps
 * &lt;code&gt;double transform(Object o)&lt;/code&gt; method.</text>
    <version>$Id: TransformerMap.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>A default Number Transformer for Numbers and numeric Strings.</text>
  </javadoc>
  <declaration type="NumberTransformer" name="defaultTransformer" />
  <javadoc>
    <text>The internal Map.</text>
  </javadoc>
  <declaration type="Map&lt;Class&lt;?&gt;,NumberTransformer&gt;" name="map" />
  <javadoc>
    <text>Build a map containing only the default transformer.</text>
  </javadoc>
  <method type="constructor" name="TransformerMap" />
  <javadoc>
    <text>Tests if a Class is present in the TransformerMap.</text>
    <param>key Class to check</param>
    <return>true|false</return>
  </javadoc>
  <method type="boolean" name="containsClass" />
  <javadoc>
    <text>Tests if a NumberTransformer is present in the TransformerMap.</text>
    <param>value NumberTransformer to check</param>
    <return>true|false</return>
  </javadoc>
  <method type="boolean" name="containsTransformer" />
  <javadoc>
    <text>Returns the Transformer that is mapped to a class
 * if mapping is not present, this returns null.</text>
    <param>key The Class of the object</param>
    <return>the mapped NumberTransformer or null.</return>
  </javadoc>
  <method type="NumberTransformer" name="getTransformer" />
  <javadoc>
    <text>Sets a Class to Transformer Mapping in the Map. If
 * the Class is already present, this overwrites that
 * mapping.</text>
    <param>key The Class</param>
    <param>transformer The NumberTransformer</param>
    <return>the replaced transformer if one is present</return>
  </javadoc>
  <method type="NumberTransformer" name="putTransformer" />
  <javadoc>
    <text>Removes a Class to Transformer Mapping in the Map.</text>
    <param>key The Class</param>
    <return>the removed transformer if one is present or
 * null if none was present.</return>
  </javadoc>
  <method type="NumberTransformer" name="removeTransformer" />
  <javadoc>
    <text>Clears all the Class to Transformer mappings.</text>
  </javadoc>
  <method type="void" name="clear" />
  <javadoc>
    <text>Returns the Set of Classes used as keys in the map.</text>
    <return>Set of Classes</return>
  </javadoc>
  <method type="Set&lt;Class&lt;?&gt;&gt;" name="classes" />
  <javadoc>
    <text>Returns the Set of NumberTransformers used as values
 * in the map.</text>
    <return>Set of NumberTransformers</return>
  </javadoc>
  <method type="Collection&lt;NumberTransformer&gt;" name="transformers" />
  <javadoc>
    <text>Attempts to transform the Object against the map of
 * NumberTransformers. Otherwise it returns Double.NaN.</text>
    <param>o the Object to be transformed.</param>
    <return>the double value of the Object.</return>
    <throws>MathIllegalArgumentException if the Object can not be
 * transformed into a Double.</throws>
    <see>org.apache.commons.math3.util.NumberTransformer#transform(java.lang.Object)</see>
  </javadoc>
  <method type="double" name="transform">
    <declaration type="double" name="value" />
    <scope />
    <scope>
      <declaration type="NumberTransformer" name="trans" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope>
      <declaration type="TransformerMap" name="rhs" />
      <scope />
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="hashCode">
    <declaration type="int" name="hash" />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
