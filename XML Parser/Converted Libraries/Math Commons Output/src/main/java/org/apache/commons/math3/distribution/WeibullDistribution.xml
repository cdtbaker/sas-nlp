<?xml version="1.0" encoding="UTF-8"?>
<class name="WeibullDistribution">
  <javadoc>
    <text>Implementation of the Weibull distribution. This implementation uses the
 * two parameter form of the distribution defined by
 * &lt;a href="http://mathworld.wolfram.com/WeibullDistribution.html"&gt;
 * Weibull Distribution&lt;/a&gt;, equations (1) and (2).</text>
    <see>&lt;a href="http://en.wikipedia.org/wiki/Weibull_distribution"&gt;Weibull distribution (Wikipedia)&lt;/a&gt;</see>
    <see>&lt;a href="http://mathworld.wolfram.com/WeibullDistribution.html"&gt;Weibull distribution (MathWorld)&lt;/a&gt;</see>
    <since>1.1 (changed to concrete class in 3.0)</since>
    <version>$Id: WeibullDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Default inverse cumulative probability accuracy.</text>
    <since>2.1</since>
  </javadoc>
  <declaration type="double" name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" />
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>The shape parameter.</text>
  </javadoc>
  <declaration type="double" name="shape" />
  <javadoc>
    <text>The scale parameter.</text>
  </javadoc>
  <declaration type="double" name="scale" />
  <javadoc>
    <text>Inverse cumulative probability accuracy.</text>
  </javadoc>
  <declaration type="double" name="solverAbsoluteAccuracy" />
  <javadoc>
    <text>Cached numerical mean</text>
  </javadoc>
  <declaration type="double" name="numericalMean" />
  <javadoc>
    <text>Whether or not the numerical mean has been calculated</text>
  </javadoc>
  <declaration type="boolean" name="numericalMeanIsCalculated" />
  <javadoc>
    <text>Cached numerical variance</text>
  </javadoc>
  <declaration type="double" name="numericalVariance" />
  <javadoc>
    <text>Whether or not the numerical variance has been calculated</text>
  </javadoc>
  <declaration type="boolean" name="numericalVarianceIsCalculated" />
  <javadoc>
    <text>Create a Weibull distribution with the given shape and scale and a
 * location equal to zero.</text>
    <param>alpha Shape parameter.</param>
    <param>beta Scale parameter.</param>
    <throws>NotStrictlyPositiveException if {@code alpha &lt;= 0} or{@code beta &lt;= 0}.</throws>
  </javadoc>
  <method type="constructor" name="WeibullDistribution" />
  <javadoc>
    <text>Create a Weibull distribution with the given shape, scale and inverse
 * cumulative probability accuracy and a location equal to zero.</text>
    <param>alpha Shape parameter.</param>
    <param>beta Scale parameter.</param>
    <param>inverseCumAccuracy Maximum absolute error in inverse
 * cumulative probability estimates
 * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).</param>
    <throws>NotStrictlyPositiveException if {@code alpha &lt;= 0} or{@code beta &lt;= 0}.</throws>
    <since>2.1</since>
  </javadoc>
  <method type="constructor" name="WeibullDistribution" />
  <javadoc>
    <text>Creates a Weibull distribution.</text>
    <param>rng Random number generator.</param>
    <param>alpha Shape parameter.</param>
    <param>beta Scale parameter.</param>
    <param>inverseCumAccuracy Maximum absolute error in inverse
 * cumulative probability estimates
 * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).</param>
    <throws>NotStrictlyPositiveException if {@code alpha &lt;= 0} or{@code beta &lt;= 0}.</throws>
    <since>3.1</since>
  </javadoc>
  <method type="constructor" name="WeibullDistribution">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Access the shape parameter, {@code alpha}.</text>
    <return>the shape parameter, {@code alpha}.</return>
  </javadoc>
  <method type="double" name="getShape" />
  <javadoc>
    <text>Access the scale parameter, {@code beta}.</text>
    <return>the scale parameter, {@code beta}.</return>
  </javadoc>
  <method type="double" name="getScale" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="density">
    <scope />
    <declaration type="double" name="xscale" />
    <declaration type="double" name="xscalepow" />
    <declaration type="double" name="xscalepowshape" />
    <comment>FastMath.pow(x  scale, shape) =
 FastMath.pow(xscale, shape) =
 FastMath.pow(xscale, shape - 1)  xscale</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="cumulativeProbability">
    <declaration type="double" name="ret" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}Returns {@code 0} when {@code p == 0} and{@code Double.POSITIVE_INFINITY} when {@code p == 1}.</text>
  </javadoc>
  <method type="double" name="inverseCumulativeProbability">
    <declaration type="double" name="ret" />
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Return the absolute accuracy setting of the solver used to estimate
 * inverse cumulative probabilities.</text>
    <return>the solver absolute accuracy.</return>
    <since>2.1</since>
  </javadoc>
  <method type="double" name="getSolverAbsoluteAccuracy" />
  <javadoc>
    <text>{@inheritDoc}The mean is {@code scale * Gamma(1 + (1 / shape))}, where {@code Gamma()}is the Gamma-function.</text>
  </javadoc>
  <method type="double" name="getNumericalMean">
    <scope />
  </method>
  <javadoc>
    <text>used by {@link #getNumericalMean()}</text>
    <return>the mean of this distribution</return>
  </javadoc>
  <method type="double" name="calculateNumericalMean">
    <declaration type="double" name="sh" />
    <declaration type="double" name="sc" />
  </method>
  <javadoc>
    <text>{@inheritDoc}The variance is {@code scale^2 * Gamma(1 + (2 / shape)) - mean^2}where {@code Gamma()} is the Gamma-function.</text>
  </javadoc>
  <method type="double" name="getNumericalVariance">
    <scope />
  </method>
  <javadoc>
    <text>used by {@link #getNumericalVariance()}</text>
    <return>the variance of this distribution</return>
  </javadoc>
  <method type="double" name="calculateNumericalVariance">
    <declaration type="double" name="sh" />
    <declaration type="double" name="sc" />
    <declaration type="double" name="mn" />
  </method>
  <javadoc>
    <text>{@inheritDoc}The lower bound of the support is always 0 no matter the parameters.</text>
    <return>lower bound of the support (always 0)</return>
  </javadoc>
  <method type="double" name="getSupportLowerBound" />
  <javadoc>
    <text>{@inheritDoc}The upper bound of the support is always positive infinity
 * no matter the parameters.</text>
    <return>upper bound of the support (always{@code Double.POSITIVE_INFINITY})</return>
  </javadoc>
  <method type="double" name="getSupportUpperBound" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSupportLowerBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSupportUpperBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}The support of this distribution is connected.</text>
    <return>{@code true}</return>
  </javadoc>
  <method type="boolean" name="isSupportConnected" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
