<?xml version="1.0" encoding="UTF-8"?>
<class name="BaseAbstractMultivariateOptimizer">
  <javadoc>
    <text>Base class for implementing optimizers for multivariate scalar functions.
 * This base class handles the boiler-plate methods associated to thresholds,
 * evaluations counting, initial guess and simple bounds settings.</text>
    <param>&lt;FUNC&gt;
 *  Type of the objective function to be optimized.</param>
    <version>$Id: BaseAbstractMultivariateOptimizer.java 1422313 2012-12-15 18:53:41Z psteitz $</version>
    <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
    <since>2.2</since>
  </javadoc>
  <javadoc>
    <text>Evaluations counter.</text>
  </javadoc>
  <declaration type="Incrementor" name="evaluations" />
  <javadoc>
    <text>Convergence checker.</text>
  </javadoc>
  <declaration type="ConvergenceChecker&lt;PointValuePair&gt;" name="checker" />
  <javadoc>
    <text>Type of optimization.</text>
  </javadoc>
  <declaration type="GoalType" name="goal" />
  <javadoc>
    <text>Initial guess.</text>
  </javadoc>
  <declaration type="double[]" name="start" />
  <javadoc>
    <text>Lower bounds.</text>
  </javadoc>
  <declaration type="double[]" name="lowerBound" />
  <javadoc>
    <text>Upper bounds.</text>
  </javadoc>
  <declaration type="double[]" name="upperBound" />
  <javadoc>
    <text>Objective function.</text>
  </javadoc>
  <declaration type="MultivariateFunction" name="function" />
  <javadoc>
    <text>Simple constructor with default settings.
 * The convergence check is set to a {@link SimpleValueChecker}.</text>
    <deprecated>See {@link SimpleValueChecker#SimpleValueChecker()}</deprecated>
  </javadoc>
  <method type="constructor" name="BaseAbstractMultivariateOptimizer" />
  <javadoc>
    <param>checker Convergence checker.</param>
  </javadoc>
  <method type="constructor" name="BaseAbstractMultivariateOptimizer" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getMaxEvaluations" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getEvaluations" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="ConvergenceChecker&lt;PointValuePair&gt;" name="getConvergenceChecker" />
  <javadoc>
    <text>Compute the objective function value.</text>
    <param>point Point at which the objective function must be evaluated.</param>
    <return>the objective function value at the specified point.</return>
    <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
  </javadoc>
  <method type="double" name="computeObjectiveValue">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <deprecated>As of 3.1. Please use{@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])}instead.</deprecated>
  </javadoc>
  <method type="PointValuePair" name="optimize" />
  <javadoc>
    <text>Optimize an objective function.</text>
    <param>maxEval Allowed number of evaluations of the objective function.</param>
    <param>f Objective function.</param>
    <param>goalType Optimization type.</param>
    <param>optData Optimization data. The following data will be looked for:
 * &lt;ul&gt;
 * &lt;li&gt;{@link InitialGuess}&lt;/li&gt;
 * &lt;li&gt;{@link SimpleBounds}&lt;/li&gt;
 * &lt;/ul&gt;</param>
    <return>the point/value pair giving the optimal value of the objective
 * function.</return>
    <since>3.1</since>
  </javadoc>
  <method type="PointValuePair" name="optimize" />
  <javadoc>
    <text>Optimize an objective function.</text>
    <param>f Objective function.</param>
    <param>goalType Type of optimization goal: either{@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.</param>
    <param>startPoint Start point for optimization.</param>
    <param>maxEval Maximum number of function evaluations.</param>
    <return>the point/value pair giving the optimal value for objective
 * function.</return>
    <throws>org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.</throws>
    <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.</throws>
    <throws>org.apache.commons.math3.exception.NullArgumentException if
 * any argument is {@code null}.</throws>
    <deprecated>As of 3.1. Please use{@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])}instead.</deprecated>
  </javadoc>
  <method type="PointValuePair" name="optimizeInternal" />
  <javadoc>
    <text>Optimize an objective function.</text>
    <param>maxEval Allowed number of evaluations of the objective function.</param>
    <param>f Objective function.</param>
    <param>goalType Optimization type.</param>
    <param>optData Optimization data. The following data will be looked for:
 * &lt;ul&gt;
 * &lt;li&gt;{@link InitialGuess}&lt;/li&gt;
 * &lt;li&gt;{@link SimpleBounds}&lt;/li&gt;
 * &lt;/ul&gt;</param>
    <return>the point/value pair giving the optimal value of the objective
 * function.</return>
    <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
    <since>3.1</since>
  </javadoc>
  <method type="PointValuePair" name="optimizeInternal">
    <comment>Set internal state.</comment>
    <comment>Retrieve other settings.</comment>
    <comment>Check input consistency.</comment>
    <comment>Perform computation.</comment>
  </method>
  <javadoc>
    <text>Scans the list of (required and optional) optimization data that
 * characterize the problem.</text>
    <param>optData Optimization data. The following data will be looked for:
 * &lt;ul&gt;
 * &lt;li&gt;{@link InitialGuess}&lt;/li&gt;
 * &lt;li&gt;{@link SimpleBounds}&lt;/li&gt;
 * &lt;/ul&gt;</param>
  </javadoc>
  <method type="void" name="parseOptimizationData">
    <scope>
      <scope />
      <scope>
        <declaration type="SimpleBounds" name="bounds" />
      </scope>
    </scope>
    <comment>The existing values (as set by the previous call) are reused if</comment>
    <comment>not provided in the argument list.</comment>
  </method>
  <javadoc>
    <return>the optimization type.</return>
  </javadoc>
  <method type="GoalType" name="getGoalType" />
  <javadoc>
    <return>the initial guess.</return>
  </javadoc>
  <method type="double[]" name="getStartPoint" />
  <javadoc>
    <return>the lower bounds.</return>
    <since>3.1</since>
  </javadoc>
  <method type="double[]" name="getLowerBound" />
  <javadoc>
    <return>the upper bounds.</return>
    <since>3.1</since>
  </javadoc>
  <method type="double[]" name="getUpperBound" />
  <method name="doOptimize" type="PointValuePair" />
  <javadoc>
    <text>Perform the bulk of the optimization algorithm.</text>
    <return>the point/value pair giving the optimal value of the
 * objective function.</return>
  </javadoc>
  <javadoc>
    <text>Check parameters consistency.</text>
  </javadoc>
  <method type="void" name="checkParameters">
    <scope>
      <declaration type="int" name="dim" />
      <scope>
        <scope />
        <scope>
          <declaration type="double" name="v" />
          <declaration type="double" name="lo" />
          <scope />
        </scope>
      </scope>
      <scope>
        <scope />
        <scope>
          <declaration type="double" name="v" />
          <declaration type="double" name="hi" />
          <scope />
        </scope>
      </scope>
      <scope>
        <scope />
      </scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>If the bounds were not specified, the allowed interval is</comment>
    <comment>assumed to be [-inf, +inf].</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
