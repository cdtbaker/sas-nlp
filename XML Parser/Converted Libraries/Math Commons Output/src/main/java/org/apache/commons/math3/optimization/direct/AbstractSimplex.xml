<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractSimplex">
  <javadoc>
    <text>This class implements the simplex concept.
 * It is intended to be used in conjunction with {@link SimplexOptimizer}.
 * &lt;br/&gt;
 * The initial configuration of the simplex is set by the constructors{@link #AbstractSimplex(double[])} or {@link #AbstractSimplex(double[][])}.
 * The other {@link #AbstractSimplex(int) constructor} will set all steps
 * to 1, thus building a default configuration from a unit hypercube.
 * &lt;br/&gt;
 * Users &lt;em&gt;must&lt;/em&gt; call the {@link #build(double[]) build} method in order
 * to create the data structure that will be acted on by the other methods of
 * this class.</text>
    <see>SimplexOptimizer</see>
    <version>$Id: AbstractSimplex.java 1422230 2012-12-15 12:11:13Z erans $</version>
    <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Simplex.</text>
  </javadoc>
  <declaration type="PointValuePair[]" name="simplex" />
  <javadoc>
    <text>Start simplex configuration.</text>
  </javadoc>
  <declaration type="double[][]" name="startConfiguration" />
  <javadoc>
    <text>Simplex dimension (must be equal to {@code simplex.length - 1}).</text>
  </javadoc>
  <declaration type="int" name="dimension" />
  <javadoc>
    <text>Build a unit hypercube simplex.</text>
    <param>n Dimension of the simplex.</param>
  </javadoc>
  <method type="constructor" name="AbstractSimplex" />
  <javadoc>
    <text>Build a hypercube simplex with the given side length.</text>
    <param>n Dimension of the simplex.</param>
    <param>sideLength Length of the sides of the hypercube.</param>
  </javadoc>
  <method type="constructor" name="AbstractSimplex" />
  <javadoc>
    <text>The start configuration for simplex is built from a box parallel to
 * the canonical axes of the space. The simplex is the subset of vertices
 * of a box parallel to the canonical axes. It is built as the path followed
 * while traveling from one vertex of the box to the diagonally opposite
 * vertex moving only along the box edges. The first vertex of the box will
 * be located at the start point of the optimization.
 * As an example, in dimension 3 a simplex has 4 vertices. Setting the
 * steps to (1, 10, 2) and the start point to (1, 1, 1) would imply the
 * start simplex would be: { (1, 1, 1), (2, 1, 1), (2, 11, 1), (2, 11, 3) }.
 * The first vertex would be set to the start point at (1, 1, 1) and the
 * last vertex would be set to the diagonally opposite vertex at (2, 11, 3).</text>
    <param>steps Steps along the canonical axes representing box edges. They
 * may be negative but not zero.</param>
    <throws>NullArgumentException if {@code steps} is {@code null}.</throws>
    <throws>ZeroException if one of the steps is zero.</throws>
  </javadoc>
  <method type="constructor" name="AbstractSimplex">
    <scope />
    <scope />
    <scope>
      <declaration type="double[]" name="vertexI" />
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>Only the relative position of the n final vertices with respect</comment>
    <comment>to the first one are stored.</comment>
  </method>
  <javadoc>
    <text>The real initial simplex will be set up by moving the reference
 * simplex such that its first point is located at the start point of the
 * optimization.</text>
    <param>referenceSimplex Reference simplex.</param>
    <throws>NotStrictlyPositiveException if the reference simplex does not
 * contain at least one point.</throws>
    <throws>DimensionMismatchException if there is a dimension mismatch
 * in the reference simplex.</throws>
    <throws>IllegalArgumentException if one of its vertices is duplicated.</throws>
  </javadoc>
  <method type="constructor" name="AbstractSimplex">
    <scope />
    <declaration type="double[]" name="ref0" />
    <scope>
      <declaration type="double[]" name="refI" />
      <scope />
      <scope>
        <declaration type="double[]" name="refJ" />
        <declaration type="boolean" name="allEquals" />
        <scope>
          <scope />
        </scope>
        <scope />
      </scope>
      <scope>
        <declaration type="double[]" name="confI" />
        <scope />
      </scope>
    </scope>
    <comment>Only the relative position of the n final vertices with respect</comment>
    <comment>to the first one are stored.</comment>
    <comment>Loop over vertices.</comment>
    <comment>Safety checks.</comment>
    <comment>Store vertex i position relative to vertex 0 position.</comment>
  </method>
  <javadoc>
    <text>Get simplex dimension.</text>
    <return>the dimension of the simplex.</return>
  </javadoc>
  <method type="int" name="getDimension" />
  <javadoc>
    <text>Get simplex size.
 * After calling the {@link #build(double[]) build} method, this method will
 * will be equivalent to {@code getDimension() + 1}.</text>
    <return>the size of the simplex.</return>
  </javadoc>
  <method type="int" name="getSize" />
  <method name="iterate" type="void" />
  <javadoc>
    <text>Compute the next simplex of the algorithm.</text>
    <param>evaluationFunction Evaluation function.</param>
    <param>comparator Comparator to use to sort simplex vertices from best
 * to worst.</param>
    <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the algorithm fails to converge.</throws>
  </javadoc>
  <javadoc>
    <text>Build an initial simplex.</text>
    <param>startPoint First point of the simplex.</param>
    <throws>DimensionMismatchException if the start point does not match
 * simplex dimension.</throws>
  </javadoc>
  <method type="void" name="build">
    <scope />
    <scope>
      <declaration type="double[]" name="confI" />
      <declaration type="double[]" name="vertexI" />
      <scope />
    </scope>
    <comment>Set first vertex.</comment>
    <comment>Set remaining vertices.</comment>
  </method>
  <javadoc>
    <text>Evaluate all the non-evaluated points of the simplex.</text>
    <param>evaluationFunction Evaluation function.</param>
    <param>comparator Comparator to use to sort simplex vertices from best to worst.</param>
    <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.</throws>
  </javadoc>
  <method type="void" name="evaluate">
    <scope>
      <declaration type="PointValuePair" name="vertex" />
      <declaration type="double[]" name="point" />
      <scope />
    </scope>
    <comment>Evaluate the objective function at all non-evaluated simplex points.</comment>
    <comment>Sort the simplex from best to worst.</comment>
  </method>
  <javadoc>
    <text>Replace the worst point of the simplex by a new point.</text>
    <param>pointValuePair Point to insert.</param>
    <param>comparator Comparator to use for sorting the simplex vertices
 * from best to worst.</param>
  </javadoc>
  <method type="void" name="replaceWorstPoint">
    <scope>
      <scope>
        <declaration type="PointValuePair" name="tmp" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Get the points of the simplex.</text>
    <return>all the simplex points.</return>
  </javadoc>
  <method type="PointValuePair[]" name="getPoints">
    <declaration type="PointValuePair[]" name="copy" />
  </method>
  <javadoc>
    <text>Get the simplex point stored at the requested {@code index}.</text>
    <param>index Location.</param>
    <return>the point at location {@code index}.</return>
  </javadoc>
  <method type="PointValuePair" name="getPoint">
    <scope />
  </method>
  <javadoc>
    <text>Store a new point at location {@code index}.
 * Note that no deep-copy of {@code point} is performed.</text>
    <param>index Location.</param>
    <param>point New value.</param>
  </javadoc>
  <method type="void" name="setPoint">
    <scope />
  </method>
  <javadoc>
    <text>Replace all points.
 * Note that no deep-copy of {@code points} is performed.</text>
    <param>points New Points.</param>
  </javadoc>
  <method type="void" name="setPoints">
    <scope />
  </method>
  <javadoc>
    <text>Create steps for a unit hypercube.</text>
    <param>n Dimension of the hypercube.</param>
    <param>sideLength Length of the sides of the hypercube.</param>
    <return>the steps.</return>
  </javadoc>
  <method type="double[]" name="createHypercubeSteps">
    <declaration type="double[]" name="steps" />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
