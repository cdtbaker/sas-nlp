<?xml version="1.0" encoding="UTF-8"?>
<class name="RealVectorFormat">
  <javadoc>
    <text>Formats a vector in components list format "{v0; v1; ...; vk-1}".
 * &lt;p&gt;The prefix and suffix "{" and "}" and the separator "; " can be replaced by
 * any user-defined strings. The number format for components can be configured.&lt;/p&gt;
 * &lt;p&gt;White space is ignored at parse time, even if it is in the prefix, suffix
 * or separator specifications. So even if the default separator does include a space
 * character that is used at format time, both input string "{1;1;1}" and
 * " { 1 ; 1 ; 1 } " will be parsed without error and the same vector will be
 * returned. In the second case, however, the parse position after parsing will be
 * just after the closing curly brace, i.e. just before the trailing space.&lt;/p&gt;</text>
    <version>$Id: RealVectorFormat.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>The default prefix: "{".</text>
  </javadoc>
  <declaration type="String" name="DEFAULT_PREFIX" />
  <javadoc>
    <text>The default suffix: "}".</text>
  </javadoc>
  <declaration type="String" name="DEFAULT_SUFFIX" />
  <javadoc>
    <text>The default separator: ", ".</text>
  </javadoc>
  <declaration type="String" name="DEFAULT_SEPARATOR" />
  <javadoc>
    <text>Prefix.</text>
  </javadoc>
  <declaration type="String" name="prefix" />
  <javadoc>
    <text>Suffix.</text>
  </javadoc>
  <declaration type="String" name="suffix" />
  <javadoc>
    <text>Separator.</text>
  </javadoc>
  <declaration type="String" name="separator" />
  <javadoc>
    <text>Trimmed prefix.</text>
  </javadoc>
  <declaration type="String" name="trimmedPrefix" />
  <javadoc>
    <text>Trimmed suffix.</text>
  </javadoc>
  <declaration type="String" name="trimmedSuffix" />
  <javadoc>
    <text>Trimmed separator.</text>
  </javadoc>
  <declaration type="String" name="trimmedSeparator" />
  <javadoc>
    <text>The format used for components.</text>
  </javadoc>
  <declaration type="NumberFormat" name="format" />
  <javadoc>
    <text>Create an instance with default settings.
 * &lt;p&gt;The instance uses the default prefix, suffix and separator:
 * "{", "}", and "; " and the default number format for components.&lt;/p&gt;</text>
  </javadoc>
  <method type="constructor" name="RealVectorFormat" />
  <javadoc>
    <text>Create an instance with a custom number format for components.</text>
    <param>format the custom format for components.</param>
  </javadoc>
  <method type="constructor" name="RealVectorFormat" />
  <javadoc>
    <text>Create an instance with custom prefix, suffix and separator.</text>
    <param>prefix prefix to use instead of the default "{"</param>
    <param>suffix suffix to use instead of the default "}"</param>
    <param>separator separator to use instead of the default "; "</param>
  </javadoc>
  <method type="constructor" name="RealVectorFormat" />
  <javadoc>
    <text>Create an instance with custom prefix, suffix, separator and format
 * for components.</text>
    <param>prefix prefix to use instead of the default "{"</param>
    <param>suffix suffix to use instead of the default "}"</param>
    <param>separator separator to use instead of the default "; "</param>
    <param>format the custom format for components.</param>
  </javadoc>
  <method type="constructor" name="RealVectorFormat" />
  <javadoc>
    <text>Get the set of locales for which real vectors formats are available.
 * &lt;p&gt;This is the same set as the {@link NumberFormat} set.&lt;/p&gt;</text>
    <return>available real vector format locales.</return>
  </javadoc>
  <method type="Locale[]" name="getAvailableLocales" />
  <javadoc>
    <text>Get the format prefix.</text>
    <return>format prefix.</return>
  </javadoc>
  <method type="String" name="getPrefix" />
  <javadoc>
    <text>Get the format suffix.</text>
    <return>format suffix.</return>
  </javadoc>
  <method type="String" name="getSuffix" />
  <javadoc>
    <text>Get the format separator between components.</text>
    <return>format separator.</return>
  </javadoc>
  <method type="String" name="getSeparator" />
  <javadoc>
    <text>Get the components format.</text>
    <return>components format.</return>
  </javadoc>
  <method type="NumberFormat" name="getFormat" />
  <javadoc>
    <text>Returns the default real vector format for the current locale.</text>
    <return>the default real vector format.</return>
  </javadoc>
  <method type="RealVectorFormat" name="getInstance" />
  <javadoc>
    <text>Returns the default real vector format for the given locale.</text>
    <param>locale the specific locale used by the format.</param>
    <return>the real vector format specific to the given locale.</return>
  </javadoc>
  <method type="RealVectorFormat" name="getInstance" />
  <javadoc>
    <text>This method calls {@link #format(RealVector,StringBuffer,FieldPosition)}.</text>
    <param>v RealVector object to format.</param>
    <return>a formatted vector.</return>
  </javadoc>
  <method type="String" name="format" />
  <javadoc>
    <text>Formats a {@link RealVector} object to produce a string.</text>
    <param>vector the object to format.</param>
    <param>toAppendTo where the text is to be appended</param>
    <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
    <return>the value passed in as toAppendTo.</return>
  </javadoc>
  <method type="StringBuffer" name="format">
    <scope>
      <scope />
    </scope>
    <comment>format prefix</comment>
    <comment>format components</comment>
    <comment>format suffix</comment>
  </method>
  <javadoc>
    <text>Parse a string to produce a {@link RealVector} object.</text>
    <param>source String to parse.</param>
    <return>the parsed {@link RealVector} object.</return>
    <throws>MathParseException if the beginning of the specified string
 * cannot be parsed.</throws>
  </javadoc>
  <method type="ArrayRealVector" name="parse">
    <declaration type="ParsePosition" name="parsePosition" />
    <declaration type="ArrayRealVector" name="result" />
    <scope />
  </method>
  <javadoc>
    <text>Parse a string to produce a {@link RealVector} object.</text>
    <param>source String to parse.</param>
    <param>pos input/ouput parsing parameter.</param>
    <return>the parsed {@link RealVector} object.</return>
  </javadoc>
  <method type="ArrayRealVector" name="parse">
    <declaration type="int" name="initialIndex" />
    <scope />
    <declaration type="List&lt;Number&gt;" name="components" />
    <scope>
      <scope>
        <scope />
      </scope>
      <scope>
        <declaration type="Number" name="component" />
        <scope />
        <scope />
      </scope>
    </scope>
    <scope />
    <declaration type="double[]" name="data" />
    <scope />
    <comment>parse prefix</comment>
    <comment>parse components</comment>
    <comment>invalid component</comment>
    <comment>set index back to initial, error index should already be set</comment>
    <comment>parse suffix</comment>
    <comment>build vector</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
