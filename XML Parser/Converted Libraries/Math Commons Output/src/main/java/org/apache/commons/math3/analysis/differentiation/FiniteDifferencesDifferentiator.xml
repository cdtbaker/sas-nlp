<?xml version="1.0" encoding="UTF-8"?>
<class name="FiniteDifferencesDifferentiator">
  <javadoc>
    <text>Univariate functions differentiator using finite differences.
 * &lt;p&gt;
 * This class creates some wrapper objects around regular{@link UnivariateFunction univariate functions} (or {@link UnivariateVectorFunction univariate vector functions} or {@link UnivariateMatrixFunction univariate matrix functions}). These
 * wrapper objects compute derivatives in addition to function
 * value.
 * &lt;/p&gt;
 * &lt;p&gt;
 * The wrapper objects work by calling the underlying function on
 * a sampling grid around the current point and performing polynomial
 * interpolation. A finite differences scheme with n points is
 * theoretically able to compute derivatives up to order n-1, but
 * it is generally better to have a slight margin. The step size must
 * also be small enough in order for the polynomial approximation to
 * be good in the current point neighborhood, but it should not be too
 * small because numerical instability appears quickly (there are several
 * differences of close points). Choosing the number of points and
 * the step size is highly problem dependent.
 * &lt;/p&gt;
 * &lt;p&gt;
 * As an example of good and bad settings, lets consider the quintic
 * polynomial function {@code f(x) = (x-1)*(x-0.5)*x*(x+0.5)*(x+1)}.
 * Since it is a polynomial, finite differences with at least 6 points
 * should theoretically recover the exact same polynomial and hence
 * compute accurate derivatives for any order. However, due to numerical
 * errors, we get the following results for a 7 points finite differences
 * for abscissae in the [-10, 10] range:
 * &lt;ul&gt;
 * &lt;li&gt;step size = 0.25, second order derivative error about 9.97e-10&lt;/li&gt;
 * &lt;li&gt;step size = 0.25, fourth order derivative error about 5.43e-8&lt;/li&gt;
 * &lt;li&gt;step size = 1.0e-6, second order derivative error about 148&lt;/li&gt;
 * &lt;li&gt;step size = 1.0e-6, fourth order derivative error about 6.35e+14&lt;/li&gt;
 * &lt;/ul&gt;
 * This example shows that the small step size is really bad, even simply
 * for second order derivative!
 * &lt;/p&gt;</text>
    <version>$Id: FiniteDifferencesDifferentiator.java 1420666 2012-12-12 13:33:20Z erans $</version>
    <since>3.1</since>
  </javadoc>
  <javadoc>
    <text>Serializable UID.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Number of points to use.</text>
  </javadoc>
  <declaration type="int" name="nbPoints" />
  <javadoc>
    <text>Step size.</text>
  </javadoc>
  <declaration type="double" name="stepSize" />
  <javadoc>
    <text>Half sample span.</text>
  </javadoc>
  <declaration type="double" name="halfSampleSpan" />
  <javadoc>
    <text>Lower bound for independent variable.</text>
  </javadoc>
  <declaration type="double" name="tMin" />
  <javadoc>
    <text>Upper bound for independent variable.</text>
  </javadoc>
  <declaration type="double" name="tMax" />
  <javadoc>
    <text>Build a differentiator with number of points and step size when independent variable is unbounded.
 * &lt;p&gt;
 * Beware that wrong settings for the finite differences differentiator
 * can lead to highly unstable and inaccurate results, especially for
 * high derivation orders. Using very small step sizes is often a
 * &lt;em&gt;bad&lt;/em&gt; idea.
 * &lt;/p&gt;</text>
    <param>nbPoints number of points to use</param>
    <param>stepSize step size (gap between each point)</param>
    <exception>NotPositiveException if {@code stepsize &lt;= 0} (note that{@link NotPositiveException} extends {@link NumberIsTooSmallException})</exception>
    <exception>NumberIsTooSmallException {@code nbPoint &lt;= 1}</exception>
  </javadoc>
  <method type="constructor" name="FiniteDifferencesDifferentiator" />
  <javadoc>
    <text>Build a differentiator with number of points and step size when independent variable is bounded.
 * &lt;p&gt;
 * When the independent variable is bounded (tLower &amp;lt; t &amp;lt; tUpper), the sampling
 * points used for differentiation will be adapted to ensure the constraint holds
 * even near the boundaries. This means the sample will not be centered anymore in
 * these cases. At an extreme case, computing derivatives exactly at the lower bound
 * will lead the sample to be entirely on the right side of the derivation point.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Note that the boundaries are considered to be excluded for function evaluation.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Beware that wrong settings for the finite differences differentiator
 * can lead to highly unstable and inaccurate results, especially for
 * high derivation orders. Using very small step sizes is often a
 * &lt;em&gt;bad&lt;/em&gt; idea.
 * &lt;/p&gt;</text>
    <param>nbPoints number of points to use</param>
    <param>stepSize step size (gap between each point)</param>
    <param>tLower lower bound for independent variable (may be {@code Double.NEGATIVE_INFINITY}if there are no lower bounds)</param>
    <param>tUpper upper bound for independent variable (may be {@code Double.POSITIVE_INFINITY}if there are no upper bounds)</param>
    <exception>NotPositiveException if {@code stepsize &lt;= 0} (note that{@link NotPositiveException} extends {@link NumberIsTooSmallException})</exception>
    <exception>NumberIsTooSmallException {@code nbPoint &lt;= 1}</exception>
    <exception>NumberIsTooLargeException {@code stepSize * (nbPoints - 1) &gt;= tUpper - tLower}</exception>
  </javadoc>
  <method type="constructor" name="FiniteDifferencesDifferentiator">
    <scope />
    <scope />
    <scope />
    <declaration type="double" name="safety" />
  </method>
  <javadoc>
    <text>Get the number of points to use.</text>
    <return>number of points to use</return>
  </javadoc>
  <method type="int" name="getNbPoints" />
  <javadoc>
    <text>Get the step size.</text>
    <return>step size</return>
  </javadoc>
  <method type="double" name="getStepSize" />
  <javadoc>
    <text>Evaluate derivatives from a sample.
 * &lt;p&gt;
 * Evaluation is done using divided differences.
 * &lt;/p&gt;</text>
    <param>t evaluation abscissa value and derivatives</param>
    <param>t0 first sample point abscissa</param>
    <param>y function values sample {@code y[i] = f(t[i]) = f(t0 + i * stepSize)}</param>
    <return>value and derivatives at {@code t}</return>
    <exception>NumberIsTooLargeException if the requested derivation order
 * is larger or equal to the number of points</exception>
  </javadoc>
  <method type="DerivativeStructure" name="evaluate">
    <declaration type="double[]" name="top" />
    <declaration type="double[]" name="bottom" />
    <scope>
      <scope />
    </scope>
    <declaration type="int" name="order" />
    <declaration type="int" name="parameters" />
    <declaration type="double[]" name="derivatives" />
    <declaration type="double" name="dt0" />
    <declaration type="DerivativeStructure" name="interpolation" />
    <declaration type="DerivativeStructure" name="monomial" />
    <scope>
      <scope />
      <scope>
        <declaration type="DerivativeStructure" name="deltaX" />
      </scope>
    </scope>
    <comment>create divided differences diagonal arrays</comment>
    <comment>update the bottom diagonal of the divided differences array</comment>
    <comment>update the top diagonal of the divided differences array</comment>
    <comment>evaluate interpolation polynomial (represented by top diagonal) at t</comment>
    <comment>start with monomial(t) = 1</comment>
    <comment>monomial(t) = (t - t0) * (t - t1) * ... * (t - t(i-1))</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}&lt;p&gt;The returned object cannot compute derivatives to arbitrary orders. The
 * value function will throw a {@link NumberIsTooLargeException} if the requested
 * derivation order is larger or equal to the number of points.
 * &lt;/p&gt;</text>
  </javadoc>
  <method type="UnivariateDifferentiableFunction" name="differentiate">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="DerivativeStructure" name="value">
      <scope />
      <declaration type="double" name="t0" />
      <declaration type="double[]" name="y" />
      <scope />
    </method>
    <comment>check we can achieve the requested derivation order with the sample</comment>
    <comment>compute sample position, trying to be centered if possible</comment>
    <comment>compute sample points</comment>
    <comment>evaluate derivatives</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}&lt;p&gt;The returned object cannot compute derivatives to arbitrary orders. The
 * value function will throw a {@link NumberIsTooLargeException} if the requested
 * derivation order is larger or equal to the number of points.
 * &lt;/p&gt;</text>
  </javadoc>
  <method type="UnivariateDifferentiableVectorFunction" name="differentiate">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double[]" name="value" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="DerivativeStructure[]" name="value">
      <scope />
      <declaration type="double" name="t0" />
      <declaration type="double[][]" name="y" />
      <scope>
        <declaration type="double[]" name="v" />
        <scope />
        <scope />
      </scope>
      <declaration type="DerivativeStructure[]" name="value" />
      <scope />
    </method>
    <comment>check we can achieve the requested derivation order with the sample</comment>
    <comment>compute sample position, trying to be centered if possible</comment>
    <comment>compute sample points</comment>
    <comment>evaluate derivatives</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}&lt;p&gt;The returned object cannot compute derivatives to arbitrary orders. The
 * value function will throw a {@link NumberIsTooLargeException} if the requested
 * derivation order is larger or equal to the number of points.
 * &lt;/p&gt;</text>
  </javadoc>
  <method type="UnivariateDifferentiableMatrixFunction" name="differentiate">
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="double[][]" name="value" />
    <javadoc>
      <text>{@inheritDoc}</text>
    </javadoc>
    <method type="DerivativeStructure[][]" name="value">
      <scope />
      <declaration type="double" name="t0" />
      <declaration type="double[][][]" name="y" />
      <scope>
        <declaration type="double[][]" name="v" />
        <scope />
        <scope>
          <scope />
        </scope>
      </scope>
      <declaration type="DerivativeStructure[][]" name="value" />
      <scope>
        <scope />
      </scope>
    </method>
    <comment>check we can achieve the requested derivation order with the sample</comment>
    <comment>compute sample position, trying to be centered if possible</comment>
    <comment>compute sample points</comment>
    <comment>evaluate derivatives</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
