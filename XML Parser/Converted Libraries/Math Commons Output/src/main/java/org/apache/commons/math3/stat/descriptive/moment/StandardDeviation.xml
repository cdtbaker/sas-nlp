<?xml version="1.0" encoding="UTF-8"?>
<class name="StandardDeviation">
  <javadoc>
    <text>Computes the sample standard deviation.  The standard deviation
 * is the positive square root of the variance.  This implementation wraps a{@link Variance} instance.  The &lt;code&gt;isBiasCorrected&lt;/code&gt; property of the
 * wrapped Variance instance is exposed, so that this class can be used to
 * compute both the "sample standard deviation" (the square root of the
 * bias-corrected "sample variance") or the "population standard deviation"
 * (the square root of the non-bias-corrected "population variance"). See{@link Variance} for more information.
 * &lt;p&gt;
 * &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
 * multiple threads access an instance of this class concurrently, and at least
 * one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
 * &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.&lt;/p&gt;</text>
    <version>$Id: StandardDeviation.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Wrapped Variance instance</text>
  </javadoc>
  <declaration type="Variance" name="variance" />
  <javadoc>
    <text>Constructs a StandardDeviation.  Sets the underlying {@link Variance}instance's &lt;code&gt;isBiasCorrected&lt;/code&gt; property to true.</text>
  </javadoc>
  <method type="constructor" name="StandardDeviation" />
  <javadoc>
    <text>Constructs a StandardDeviation from an external second moment.</text>
    <param>m2 the external moment</param>
  </javadoc>
  <method type="constructor" name="StandardDeviation" />
  <javadoc>
    <text>Copy constructor, creates a new {@code StandardDeviation} identical
 * to the {@code original}</text>
    <param>original the {@code StandardDeviation} instance to copy</param>
    <throws>NullArgumentException if original is null</throws>
  </javadoc>
  <method type="constructor" name="StandardDeviation" />
  <javadoc>
    <text>Contructs a StandardDeviation with the specified value for the
 * &lt;code&gt;isBiasCorrected&lt;/code&gt; property.  If this property is set to
 * &lt;code&gt;true&lt;/code&gt;, the {@link Variance} used in computing results will
 * use the bias-corrected, or "sample" formula.  See {@link Variance} for
 * details.</text>
    <param>isBiasCorrected  whether or not the variance computation will use
 * the bias-corrected formula</param>
  </javadoc>
  <method type="constructor" name="StandardDeviation" />
  <javadoc>
    <text>Contructs a StandardDeviation with the specified value for the
 * &lt;code&gt;isBiasCorrected&lt;/code&gt; property and the supplied external moment.
 * If &lt;code&gt;isBiasCorrected&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the{@link Variance} used in computing results will use the bias-corrected,
 * or "sample" formula.  See {@link Variance} for details.</text>
    <param>isBiasCorrected  whether or not the variance computation will use
 * the bias-corrected formula</param>
    <param>m2 the external moment</param>
  </javadoc>
  <method type="constructor" name="StandardDeviation" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="increment" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="long" name="getN" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getResult" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="clear" />
  <javadoc>
    <text>Returns the Standard Deviation of the entries in the input array, or
 * &lt;code&gt;Double.NaN&lt;/code&gt; if the array is empty.
 * &lt;p&gt;
 * Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
 * &lt;p&gt;
 * Does not change the internal state of the statistic.&lt;/p&gt;</text>
    <param>values the input array</param>
    <return>the standard deviation of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the array is null</throws>
  </javadoc>
  <method type="double" name="evaluate" />
  <javadoc>
    <text>Returns the Standard Deviation of the entries in the specified portion of
 * the input array, or &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray
 * is empty.
 * &lt;p&gt;
 * Returns 0 for a single-value (i.e. length = 1) sample. &lt;/p&gt;
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
 * &lt;p&gt;
 * Does not change the internal state of the statistic.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the standard deviation of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
  </javadoc>
  <method type="double" name="evaluate" />
  <javadoc>
    <text>Returns the Standard Deviation of the entries in the specified portion of
 * the input array, using the precomputed mean value.  Returns
 * &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray is empty.
 * &lt;p&gt;
 * Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
 * &lt;p&gt;
 * The formula used assumes that the supplied mean value is the arithmetic
 * mean of the sample data, not a known population parameter.  This method
 * is supplied only to save computation when the mean has already been
 * computed.&lt;/p&gt;
 * &lt;p&gt;
 * Throws &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
 * &lt;p&gt;
 * Does not change the internal state of the statistic.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>mean the precomputed mean value</param>
    <param>begin index of the first array element to include</param>
    <param>length the number of elements to include</param>
    <return>the standard deviation of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
  </javadoc>
  <method type="double" name="evaluate" />
  <javadoc>
    <text>Returns the Standard Deviation of the entries in the input array, using
 * the precomputed mean value.  Returns
 * &lt;code&gt;Double.NaN&lt;/code&gt; if the designated subarray is empty.
 * &lt;p&gt;
 * Returns 0 for a single-value (i.e. length = 1) sample.&lt;/p&gt;
 * &lt;p&gt;
 * The formula used assumes that the supplied mean value is the arithmetic
 * mean of the sample data, not a known population parameter.  This method
 * is supplied only to save computation when the mean has already been
 * computed.&lt;/p&gt;
 * &lt;p&gt;
 * Throws &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; if the array is null.&lt;/p&gt;
 * &lt;p&gt;
 * Does not change the internal state of the statistic.&lt;/p&gt;</text>
    <param>values the input array</param>
    <param>mean the precomputed mean value</param>
    <return>the standard deviation of the values or Double.NaN if length = 0</return>
    <throws>MathIllegalArgumentException if the array is null</throws>
  </javadoc>
  <method type="double" name="evaluate" />
  <javadoc>
    <return>Returns the isBiasCorrected.</return>
  </javadoc>
  <method type="boolean" name="isBiasCorrected" />
  <javadoc>
    <param>isBiasCorrected The isBiasCorrected to set.</param>
  </javadoc>
  <method type="void" name="setBiasCorrected" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="StandardDeviation" name="copy">
    <declaration type="StandardDeviation" name="result" />
    <comment>No try-catch or advertised exception because args are guaranteed non-null</comment>
  </method>
  <javadoc>
    <text>Copies source to dest.
 * &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;</text>
    <param>source StandardDeviation to copy</param>
    <param>dest StandardDeviation to copy to</param>
    <throws>NullArgumentException if either source or dest is null</throws>
  </javadoc>
  <method type="void" name="copy" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
