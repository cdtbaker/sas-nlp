<?xml version="1.0" encoding="UTF-8"?>
<class name="BigFraction">
  <javadoc>
    <text>Representation of a rational number without any overflow. This class is
 * immutable.</text>
    <version>$Id: BigFraction.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>2.0</since>
  </javadoc>
  <javadoc>
    <text>A fraction representing "2 / 1".</text>
  </javadoc>
  <declaration type="BigFraction" name="TWO" />
  <javadoc>
    <text>A fraction representing "1".</text>
  </javadoc>
  <declaration type="BigFraction" name="ONE" />
  <javadoc>
    <text>A fraction representing "0".</text>
  </javadoc>
  <declaration type="BigFraction" name="ZERO" />
  <javadoc>
    <text>A fraction representing "-1 / 1".</text>
  </javadoc>
  <declaration type="BigFraction" name="MINUS_ONE" />
  <javadoc>
    <text>A fraction representing "4/5".</text>
  </javadoc>
  <declaration type="BigFraction" name="FOUR_FIFTHS" />
  <javadoc>
    <text>A fraction representing "1/5".</text>
  </javadoc>
  <declaration type="BigFraction" name="ONE_FIFTH" />
  <javadoc>
    <text>A fraction representing "1/2".</text>
  </javadoc>
  <declaration type="BigFraction" name="ONE_HALF" />
  <javadoc>
    <text>A fraction representing "1/4".</text>
  </javadoc>
  <declaration type="BigFraction" name="ONE_QUARTER" />
  <javadoc>
    <text>A fraction representing "1/3".</text>
  </javadoc>
  <declaration type="BigFraction" name="ONE_THIRD" />
  <javadoc>
    <text>A fraction representing "3/5".</text>
  </javadoc>
  <declaration type="BigFraction" name="THREE_FIFTHS" />
  <javadoc>
    <text>A fraction representing "3/4".</text>
  </javadoc>
  <declaration type="BigFraction" name="THREE_QUARTERS" />
  <javadoc>
    <text>A fraction representing "2/5".</text>
  </javadoc>
  <declaration type="BigFraction" name="TWO_FIFTHS" />
  <javadoc>
    <text>A fraction representing "2/4".</text>
  </javadoc>
  <declaration type="BigFraction" name="TWO_QUARTERS" />
  <javadoc>
    <text>A fraction representing "2/3".</text>
  </javadoc>
  <declaration type="BigFraction" name="TWO_THIRDS" />
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>&lt;code&gt;BigInteger&lt;/code&gt; representation of 100.</text>
  </javadoc>
  <declaration type="BigInteger" name="ONE_HUNDRED" />
  <javadoc>
    <text>The numerator.</text>
  </javadoc>
  <declaration type="BigInteger" name="numerator" />
  <javadoc>
    <text>The denominator.</text>
  </javadoc>
  <declaration type="BigInteger" name="denominator" />
  <javadoc>
    <text>&lt;p&gt;
 * Create a {@link BigFraction} equivalent to the passed &lt;tt&gt;BigInteger&lt;/tt&gt;, ie
 * "num / 1".
 * &lt;/p&gt;</text>
    <param>numthe numerator.</param>
  </javadoc>
  <method type="constructor" name="BigFraction" />
  <javadoc>
    <text>Create a {@link BigFraction} given the numerator and denominator as{@code BigInteger}. The {@link BigFraction} is reduced to lowest terms.</text>
    <param>num the numerator, must not be {@code null}.</param>
    <param>den the denominator, must not be {@code null}.</param>
    <throws>ZeroException if the denominator is zero.</throws>
    <throws>NullArgumentException if either of the arguments is null</throws>
  </javadoc>
  <method type="constructor" name="BigFraction">
    <scope />
    <scope />
    <scope>
      <declaration type="BigInteger" name="gcd" />
      <scope />
      <scope />
    </scope>
    <comment>reduce numerator and denominator by greatest common denominator</comment>
    <comment>move sign to numerator</comment>
    <comment>store the values in the final fields</comment>
  </method>
  <javadoc>
    <text>Create a fraction given the double value.
 * &lt;p&gt;
 * This constructor behaves &lt;em&gt;differently&lt;/em&gt; from{@link #BigFraction(double,double,int)}. It converts the double value
 * exactly, considering its internal bits representation. This works for all
 * values except NaN and infinities and does not requires any loop or
 * convergence threshold.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Since this conversion is exact and since double numbers are sometimes
 * approximated, the fraction created may seem strange in some cases. For example,
 * calling &lt;code&gt;new BigFraction(1.0 / 3.0)&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; create
 * the fraction 1/3, but the fraction 6004799503160661 / 18014398509481984
 * because the double number passed to the constructor is not exactly 1/3
 * (this number cannot be stored exactly in IEEE754).
 * &lt;/p&gt;</text>
    <see>#BigFraction(double,double,int)</see>
    <param>value the double value to convert to a fraction.</param>
    <exception>MathIllegalArgumentException if value is NaN or infinite</exception>
  </javadoc>
  <method type="constructor" name="BigFraction">
    <scope />
    <scope />
    <declaration type="long" name="bits" />
    <declaration type="long" name="sign" />
    <declaration type="long" name="exponent" />
    <declaration type="long" name="m" />
    <scope />
    <scope />
    <declaration type="int" name="k" />
    <scope />
    <scope />
    <scope />
    <comment>compute m and k such that value = m * 2^k</comment>
    <comment>this was a normalized number, add the implicit most significant bit</comment>
  </method>
  <javadoc>
    <text>Create a fraction given the double value and maximum error allowed.
 * &lt;p&gt;
 * References:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;a href="http://mathworld.wolfram.com/ContinuedFraction.html"&gt;
 * Continued Fraction&lt;/a&gt; equations (11) and (22)-(26)&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;</text>
    <param>valuethe double value to convert to a fraction.</param>
    <param>epsilonmaximum error allowed. The resulting fraction is within
 * &lt;code&gt;epsilon&lt;/code&gt; of &lt;code&gt;value&lt;/code&gt;, in absolute terms.</param>
    <param>maxIterationsmaximum number of convergents.</param>
    <throws>FractionConversionExceptionif the continued fraction failed to converge.</throws>
    <see>#BigFraction(double)</see>
  </javadoc>
  <method type="constructor" name="BigFraction" />
  <javadoc>
    <text>Create a fraction given the double value and either the maximum error
 * allowed or the maximum number of denominator digits.
 * &lt;p&gt;
 * NOTE: This constructor is called with EITHER - a valid epsilon value and
 * the maxDenominator set to Integer.MAX_VALUE (that way the maxDenominator
 * has no effect). OR - a valid maxDenominator value and the epsilon value
 * set to zero (that way epsilon only has effect if there is an exact match
 * before the maxDenominator value is reached).
 * &lt;/p&gt;
 * &lt;p&gt;
 * It has been done this way so that the same code can be (re)used for both
 * scenarios. However this could be confusing to users if it were part of
 * the public API and this constructor should therefore remain PRIVATE.
 * &lt;/p&gt;
 * See JIRA issue ticket MATH-181 for more details:
 * https://issues.apache.org/jira/browse/MATH-181</text>
    <param>valuethe double value to convert to a fraction.</param>
    <param>epsilonmaximum error allowed. The resulting fraction is within
 * &lt;code&gt;epsilon&lt;/code&gt; of &lt;code&gt;value&lt;/code&gt;, in absolute terms.</param>
    <param>maxDenominatormaximum denominator value allowed.</param>
    <param>maxIterationsmaximum number of convergents.</param>
    <throws>FractionConversionExceptionif the continued fraction failed to converge.</throws>
  </javadoc>
  <method type="constructor" name="BigFraction">
    <declaration type="long" name="overflow" />
    <declaration type="double" name="r0" />
    <declaration type="long" name="a0" />
    <scope />
    <scope />
    <declaration type="long" name="p0" />
    <declaration type="long" name="q0" />
    <declaration type="long" name="p1" />
    <declaration type="long" name="q1" />
    <declaration type="long" name="p2" />
    <declaration type="long" name="q2" />
    <declaration type="int" name="n" />
    <declaration type="boolean" name="stop" />
    <scope>
      <declaration type="double" name="r1" />
      <declaration type="long" name="a1" />
      <scope />
      <declaration type="double" name="convergent" />
      <scope />
      <scope />
    </scope>
    <scope />
    <scope />
    <scope />
    <comment>check for (almost) integer arguments, which should not go</comment>
    <comment>to iterations.</comment>
  </method>
  <javadoc>
    <text>Create a fraction given the double value and maximum denominator.
 * &lt;p&gt;
 * References:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;a href="http://mathworld.wolfram.com/ContinuedFraction.html"&gt;
 * Continued Fraction&lt;/a&gt; equations (11) and (22)-(26)&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;</text>
    <param>valuethe double value to convert to a fraction.</param>
    <param>maxDenominatorThe maximum allowed value for denominator.</param>
    <throws>FractionConversionExceptionif the continued fraction failed to converge.</throws>
  </javadoc>
  <method type="constructor" name="BigFraction" />
  <javadoc>
    <text>&lt;p&gt;
 * Create a {@link BigFraction} equivalent to the passed &lt;tt&gt;int&lt;/tt&gt;, ie
 * "num / 1".
 * &lt;/p&gt;</text>
    <param>numthe numerator.</param>
  </javadoc>
  <method type="constructor" name="BigFraction" />
  <javadoc>
    <text>&lt;p&gt;
 * Create a {@link BigFraction} given the numerator and denominator as simple
 * &lt;tt&gt;int&lt;/tt&gt;. The {@link BigFraction} is reduced to lowest terms.
 * &lt;/p&gt;</text>
    <param>numthe numerator.</param>
    <param>denthe denominator.</param>
  </javadoc>
  <method type="constructor" name="BigFraction" />
  <javadoc>
    <text>&lt;p&gt;
 * Create a {@link BigFraction} equivalent to the passed long, ie "num / 1".
 * &lt;/p&gt;</text>
    <param>numthe numerator.</param>
  </javadoc>
  <method type="constructor" name="BigFraction" />
  <javadoc>
    <text>&lt;p&gt;
 * Create a {@link BigFraction} given the numerator and denominator as simple
 * &lt;tt&gt;long&lt;/tt&gt;. The {@link BigFraction} is reduced to lowest terms.
 * &lt;/p&gt;</text>
    <param>numthe numerator.</param>
    <param>denthe denominator.</param>
  </javadoc>
  <method type="constructor" name="BigFraction" />
  <javadoc>
    <text>&lt;p&gt;
 * Creates a &lt;code&gt;BigFraction&lt;/code&gt; instance with the 2 parts of a fraction
 * Y/Z.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Any negative signs are resolved to be on the numerator.
 * &lt;/p&gt;</text>
    <param>numeratorthe numerator, for example the three in 'three sevenths'.</param>
    <param>denominatorthe denominator, for example the seven in 'three sevenths'.</param>
    <return>a new fraction instance, with the numerator and denominator
 * reduced.</return>
    <throws>ArithmeticExceptionif the denominator is &lt;code&gt;zero&lt;/code&gt;.</throws>
  </javadoc>
  <method type="BigFraction" name="getReducedFraction">
    <scope />
    <comment>normalize zero.</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Returns the absolute value of this {@link BigFraction}.
 * &lt;/p&gt;</text>
    <return>the absolute value as a {@link BigFraction}.</return>
  </javadoc>
  <method type="BigFraction" name="abs" />
  <javadoc>
    <text>&lt;p&gt;
 * Adds the value of this fraction to the passed {@link BigInteger},
 * returning the result in reduced form.
 * &lt;/p&gt;</text>
    <param>bgthe {@link BigInteger} to add, must'nt be &lt;code&gt;null&lt;/code&gt;.</param>
    <return>a &lt;code&gt;BigFraction&lt;/code&gt; instance with the resulting values.</return>
    <throws>NullArgumentExceptionif the {@link BigInteger} is &lt;code&gt;null&lt;/code&gt;.</throws>
  </javadoc>
  <method type="BigFraction" name="add" />
  <javadoc>
    <text>&lt;p&gt;
 * Adds the value of this fraction to the passed &lt;tt&gt;integer&lt;/tt&gt;, returning
 * the result in reduced form.
 * &lt;/p&gt;</text>
    <param>ithe &lt;tt&gt;integer&lt;/tt&gt; to add.</param>
    <return>a &lt;code&gt;BigFraction&lt;/code&gt; instance with the resulting values.</return>
  </javadoc>
  <method type="BigFraction" name="add" />
  <javadoc>
    <text>&lt;p&gt;
 * Adds the value of this fraction to the passed &lt;tt&gt;long&lt;/tt&gt;, returning
 * the result in reduced form.
 * &lt;/p&gt;</text>
    <param>lthe &lt;tt&gt;long&lt;/tt&gt; to add.</param>
    <return>a &lt;code&gt;BigFraction&lt;/code&gt; instance with the resulting values.</return>
  </javadoc>
  <method type="BigFraction" name="add" />
  <javadoc>
    <text>&lt;p&gt;
 * Adds the value of this fraction to another, returning the result in
 * reduced form.
 * &lt;/p&gt;</text>
    <param>fractionthe {@link BigFraction} to add, must not be &lt;code&gt;null&lt;/code&gt;.</param>
    <return>a {@link BigFraction} instance with the resulting values.</return>
    <throws>NullArgumentException if the {@link BigFraction} is {@code null}.</throws>
  </javadoc>
  <method type="BigFraction" name="add">
    <scope />
    <scope />
    <declaration type="BigInteger" name="num" />
    <declaration type="BigInteger" name="den" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Gets the fraction as a &lt;code&gt;BigDecimal&lt;/code&gt;. This calculates the
 * fraction as the numerator divided by denominator.
 * &lt;/p&gt;</text>
    <return>the fraction as a &lt;code&gt;BigDecimal&lt;/code&gt;.</return>
    <throws>ArithmeticExceptionif the exact quotient does not have a terminating decimal
 * expansion.</throws>
    <see>BigDecimal</see>
  </javadoc>
  <method type="BigDecimal" name="bigDecimalValue" />
  <javadoc>
    <text>&lt;p&gt;
 * Gets the fraction as a &lt;code&gt;BigDecimal&lt;/code&gt; following the passed
 * rounding mode. This calculates the fraction as the numerator divided by
 * denominator.
 * &lt;/p&gt;</text>
    <param>roundingModerounding mode to apply. see {@link BigDecimal} constants.</param>
    <return>the fraction as a &lt;code&gt;BigDecimal&lt;/code&gt;.</return>
    <throws>IllegalArgumentExceptionif &lt;tt&gt;roundingMode&lt;/tt&gt; does not represent a valid rounding
 * mode.</throws>
    <see>BigDecimal</see>
  </javadoc>
  <method type="BigDecimal" name="bigDecimalValue" />
  <javadoc>
    <text>&lt;p&gt;
 * Gets the fraction as a &lt;code&gt;BigDecimal&lt;/code&gt; following the passed scale
 * and rounding mode. This calculates the fraction as the numerator divided
 * by denominator.
 * &lt;/p&gt;</text>
    <param>scalescale of the &lt;code&gt;BigDecimal&lt;/code&gt; quotient to be returned.
 * see {@link BigDecimal} for more information.</param>
    <param>roundingModerounding mode to apply. see {@link BigDecimal} constants.</param>
    <return>the fraction as a &lt;code&gt;BigDecimal&lt;/code&gt;.</return>
    <see>BigDecimal</see>
  </javadoc>
  <method type="BigDecimal" name="bigDecimalValue" />
  <javadoc>
    <text>&lt;p&gt;
 * Compares this object to another based on size.
 * &lt;/p&gt;</text>
    <param>objectthe object to compare to, must not be &lt;code&gt;null&lt;/code&gt;.</param>
    <return>-1 if this is less than &lt;tt&gt;object&lt;/tt&gt;, +1 if this is greater
 * than &lt;tt&gt;object&lt;/tt&gt;, 0 if they are equal.</return>
    <see>java.lang.Comparable#compareTo(java.lang.Object)</see>
  </javadoc>
  <method type="int" name="compareTo">
    <declaration type="BigInteger" name="nOd" />
    <declaration type="BigInteger" name="dOn" />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Divide the value of this fraction by the passed {@code BigInteger},
 * ie {@code this * 1 / bg}, returning the result in reduced form.
 * &lt;/p&gt;</text>
    <param>bg the {@code BigInteger} to divide by, must not be {@code null}</param>
    <return>a {@link BigFraction} instance with the resulting values</return>
    <throws>NullArgumentException if the {@code BigInteger} is {@code null}</throws>
    <throws>MathArithmeticException if the fraction to divide by is zero</throws>
  </javadoc>
  <method type="BigFraction" name="divide">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Divide the value of this fraction by the passed {@code int}, ie{@code this * 1 / i}, returning the result in reduced form.
 * &lt;/p&gt;</text>
    <param>i the {@code int} to divide by</param>
    <return>a {@link BigFraction} instance with the resulting values</return>
    <throws>MathArithmeticException if the fraction to divide by is zero</throws>
  </javadoc>
  <method type="BigFraction" name="divide" />
  <javadoc>
    <text>&lt;p&gt;
 * Divide the value of this fraction by the passed {@code long}, ie{@code this * 1 / l}, returning the result in reduced form.
 * &lt;/p&gt;</text>
    <param>l the {@code long} to divide by</param>
    <return>a {@link BigFraction} instance with the resulting values</return>
    <throws>MathArithmeticException if the fraction to divide by is zero</throws>
  </javadoc>
  <method type="BigFraction" name="divide" />
  <javadoc>
    <text>&lt;p&gt;
 * Divide the value of this fraction by another, returning the result in
 * reduced form.
 * &lt;/p&gt;</text>
    <param>fraction Fraction to divide by, must not be {@code null}.</param>
    <return>a {@link BigFraction} instance with the resulting values.</return>
    <throws>NullArgumentException if the {@code fraction} is {@code null}.</throws>
    <throws>MathArithmeticException if the fraction to divide by is zero</throws>
  </javadoc>
  <method type="BigFraction" name="divide">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Gets the fraction as a &lt;tt&gt;double&lt;/tt&gt;. This calculates the fraction as
 * the numerator divided by denominator.
 * &lt;/p&gt;</text>
    <return>the fraction as a &lt;tt&gt;double&lt;/tt&gt;</return>
    <see>java.lang.Number#doubleValue()</see>
  </javadoc>
  <method type="double" name="doubleValue">
    <declaration type="double" name="result" />
    <scope>
      <declaration type="int" name="shift" />
    </scope>
    <comment>Numerator and/or denominator must be out of range:</comment>
    <comment>Calculate how far to shift them to put them in range.</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * &lt;/p&gt;</text>
    <param>otherfraction to test for equality to this fraction, can be
 * &lt;code&gt;null&lt;/code&gt;.</param>
    <return>true if two fractions are equal, false if object is
 * &lt;code&gt;null&lt;/code&gt;, not an instance of {@link BigFraction}, or not
 * equal to this fraction instance.</return>
    <see>java.lang.Object#equals(java.lang.Object)</see>
  </javadoc>
  <method type="boolean" name="equals">
    <declaration type="boolean" name="ret" />
    <scope />
    <scope>
      <declaration type="BigFraction" name="rhs" />
      <declaration type="BigFraction" name="thisOne" />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Gets the fraction as a &lt;tt&gt;float&lt;/tt&gt;. This calculates the fraction as
 * the numerator divided by denominator.
 * &lt;/p&gt;</text>
    <return>the fraction as a &lt;tt&gt;float&lt;/tt&gt;.</return>
    <see>java.lang.Number#floatValue()</see>
  </javadoc>
  <method type="float" name="floatValue">
    <declaration type="float" name="result" />
    <scope>
      <declaration type="int" name="shift" />
    </scope>
    <comment>Numerator and/or denominator must be out of range:</comment>
    <comment>Calculate how far to shift them to put them in range.</comment>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Access the denominator as a &lt;code&gt;BigInteger&lt;/code&gt;.
 * &lt;/p&gt;</text>
    <return>the denominator as a &lt;code&gt;BigInteger&lt;/code&gt;.</return>
  </javadoc>
  <method type="BigInteger" name="getDenominator" />
  <javadoc>
    <text>&lt;p&gt;
 * Access the denominator as a &lt;tt&gt;int&lt;/tt&gt;.
 * &lt;/p&gt;</text>
    <return>the denominator as a &lt;tt&gt;int&lt;/tt&gt;.</return>
  </javadoc>
  <method type="int" name="getDenominatorAsInt" />
  <javadoc>
    <text>&lt;p&gt;
 * Access the denominator as a &lt;tt&gt;long&lt;/tt&gt;.
 * &lt;/p&gt;</text>
    <return>the denominator as a &lt;tt&gt;long&lt;/tt&gt;.</return>
  </javadoc>
  <method type="long" name="getDenominatorAsLong" />
  <javadoc>
    <text>&lt;p&gt;
 * Access the numerator as a &lt;code&gt;BigInteger&lt;/code&gt;.
 * &lt;/p&gt;</text>
    <return>the numerator as a &lt;code&gt;BigInteger&lt;/code&gt;.</return>
  </javadoc>
  <method type="BigInteger" name="getNumerator" />
  <javadoc>
    <text>&lt;p&gt;
 * Access the numerator as a &lt;tt&gt;int&lt;/tt&gt;.
 * &lt;/p&gt;</text>
    <return>the numerator as a &lt;tt&gt;int&lt;/tt&gt;.</return>
  </javadoc>
  <method type="int" name="getNumeratorAsInt" />
  <javadoc>
    <text>&lt;p&gt;
 * Access the numerator as a &lt;tt&gt;long&lt;/tt&gt;.
 * &lt;/p&gt;</text>
    <return>the numerator as a &lt;tt&gt;long&lt;/tt&gt;.</return>
  </javadoc>
  <method type="long" name="getNumeratorAsLong" />
  <javadoc>
    <text>&lt;p&gt;
 * Gets a hashCode for the fraction.
 * &lt;/p&gt;</text>
    <return>a hash code value for this object.</return>
    <see>java.lang.Object#hashCode()</see>
  </javadoc>
  <method type="int" name="hashCode" />
  <javadoc>
    <text>&lt;p&gt;
 * Gets the fraction as an &lt;tt&gt;int&lt;/tt&gt;. This returns the whole number part
 * of the fraction.
 * &lt;/p&gt;</text>
    <return>the whole number fraction part.</return>
    <see>java.lang.Number#intValue()</see>
  </javadoc>
  <method type="int" name="intValue" />
  <javadoc>
    <text>&lt;p&gt;
 * Gets the fraction as a &lt;tt&gt;long&lt;/tt&gt;. This returns the whole number part
 * of the fraction.
 * &lt;/p&gt;</text>
    <return>the whole number fraction part.</return>
    <see>java.lang.Number#longValue()</see>
  </javadoc>
  <method type="long" name="longValue" />
  <javadoc>
    <text>&lt;p&gt;
 * Multiplies the value of this fraction by the passed
 * &lt;code&gt;BigInteger&lt;/code&gt;, returning the result in reduced form.
 * &lt;/p&gt;</text>
    <param>bg the {@code BigInteger} to multiply by.</param>
    <return>a {@code BigFraction} instance with the resulting values.</return>
    <throws>NullArgumentException if {@code bg} is {@code null}.</throws>
  </javadoc>
  <method type="BigFraction" name="multiply">
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Multiply the value of this fraction by the passed &lt;tt&gt;int&lt;/tt&gt;, returning
 * the result in reduced form.
 * &lt;/p&gt;</text>
    <param>ithe &lt;tt&gt;int&lt;/tt&gt; to multiply by.</param>
    <return>a {@link BigFraction} instance with the resulting values.</return>
  </javadoc>
  <method type="BigFraction" name="multiply" />
  <javadoc>
    <text>&lt;p&gt;
 * Multiply the value of this fraction by the passed &lt;tt&gt;long&lt;/tt&gt;,
 * returning the result in reduced form.
 * &lt;/p&gt;</text>
    <param>lthe &lt;tt&gt;long&lt;/tt&gt; to multiply by.</param>
    <return>a {@link BigFraction} instance with the resulting values.</return>
  </javadoc>
  <method type="BigFraction" name="multiply" />
  <javadoc>
    <text>&lt;p&gt;
 * Multiplies the value of this fraction by another, returning the result in
 * reduced form.
 * &lt;/p&gt;</text>
    <param>fraction Fraction to multiply by, must not be {@code null}.</param>
    <return>a {@link BigFraction} instance with the resulting values.</return>
    <throws>NullArgumentException if {@code fraction} is {@code null}.</throws>
  </javadoc>
  <method type="BigFraction" name="multiply">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Return the additive inverse of this fraction, returning the result in
 * reduced form.
 * &lt;/p&gt;</text>
    <return>the negation of this fraction.</return>
  </javadoc>
  <method type="BigFraction" name="negate" />
  <javadoc>
    <text>&lt;p&gt;
 * Gets the fraction percentage as a &lt;tt&gt;double&lt;/tt&gt;. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * &lt;/p&gt;</text>
    <return>the fraction percentage as a &lt;tt&gt;double&lt;/tt&gt;.</return>
  </javadoc>
  <method type="double" name="percentageValue" />
  <javadoc>
    <text>&lt;p&gt;
 * Returns a {@code BigFraction} whose value is{@code (this&lt;sup&gt;exponent&lt;/sup&gt;)}, returning the result in reduced form.
 * &lt;/p&gt;</text>
    <param>exponentexponent to which this {@code BigFraction} is to be
 * raised.</param>
    <return>&lt;tt&gt;this&lt;sup&gt;exponent&lt;/sup&gt;&lt;/tt&gt;.</return>
  </javadoc>
  <method type="BigFraction" name="pow">
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Returns a &lt;code&gt;BigFraction&lt;/code&gt; whose value is
 * &lt;tt&gt;(this&lt;sup&gt;exponent&lt;/sup&gt;)&lt;/tt&gt;, returning the result in reduced form.
 * &lt;/p&gt;</text>
    <param>exponentexponent to which this &lt;code&gt;BigFraction&lt;/code&gt; is to be raised.</param>
    <return>&lt;tt&gt;this&lt;sup&gt;exponent&lt;/sup&gt;&lt;/tt&gt; as a &lt;code&gt;BigFraction&lt;/code&gt;.</return>
  </javadoc>
  <method type="BigFraction" name="pow">
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Returns a &lt;code&gt;BigFraction&lt;/code&gt; whose value is
 * &lt;tt&gt;(this&lt;sup&gt;exponent&lt;/sup&gt;)&lt;/tt&gt;, returning the result in reduced form.
 * &lt;/p&gt;</text>
    <param>exponentexponent to which this &lt;code&gt;BigFraction&lt;/code&gt; is to be raised.</param>
    <return>&lt;tt&gt;this&lt;sup&gt;exponent&lt;/sup&gt;&lt;/tt&gt; as a &lt;code&gt;BigFraction&lt;/code&gt;.</return>
  </javadoc>
  <method type="BigFraction" name="pow">
    <scope>
      <declaration type="BigInteger" name="eNeg" />
    </scope>
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Returns a &lt;code&gt;double&lt;/code&gt; whose value is
 * &lt;tt&gt;(this&lt;sup&gt;exponent&lt;/sup&gt;)&lt;/tt&gt;, returning the result in reduced form.
 * &lt;/p&gt;</text>
    <param>exponentexponent to which this &lt;code&gt;BigFraction&lt;/code&gt; is to be raised.</param>
    <return>&lt;tt&gt;this&lt;sup&gt;exponent&lt;/sup&gt;&lt;/tt&gt;.</return>
  </javadoc>
  <method type="double" name="pow" />
  <javadoc>
    <text>&lt;p&gt;
 * Return the multiplicative inverse of this fraction.
 * &lt;/p&gt;</text>
    <return>the reciprocal fraction.</return>
  </javadoc>
  <method type="BigFraction" name="reciprocal" />
  <javadoc>
    <text>&lt;p&gt;
 * Reduce this &lt;code&gt;BigFraction&lt;/code&gt; to its lowest terms.
 * &lt;/p&gt;</text>
    <return>the reduced &lt;code&gt;BigFraction&lt;/code&gt;. It doesn't change anything if
 * the fraction can be reduced.</return>
  </javadoc>
  <method type="BigFraction" name="reduce">
    <declaration type="BigInteger" name="gcd" />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Subtracts the value of an {@link BigInteger} from the value of this{@code BigFraction}, returning the result in reduced form.
 * &lt;/p&gt;</text>
    <param>bg the {@link BigInteger} to subtract, cannot be {@code null}.</param>
    <return>a {@code BigFraction} instance with the resulting values.</return>
    <throws>NullArgumentException if the {@link BigInteger} is {@code null}.</throws>
  </javadoc>
  <method type="BigFraction" name="subtract">
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Subtracts the value of an {@code integer} from the value of this{@code BigFraction}, returning the result in reduced form.
 * &lt;/p&gt;</text>
    <param>i the {@code integer} to subtract.</param>
    <return>a {@code BigFraction} instance with the resulting values.</return>
  </javadoc>
  <method type="BigFraction" name="subtract" />
  <javadoc>
    <text>&lt;p&gt;
 * Subtracts the value of a {@code long} from the value of this{@code BigFraction}, returning the result in reduced form.
 * &lt;/p&gt;</text>
    <param>l the {@code long} to subtract.</param>
    <return>a {@code BigFraction} instance with the resulting values.</return>
  </javadoc>
  <method type="BigFraction" name="subtract" />
  <javadoc>
    <text>&lt;p&gt;
 * Subtracts the value of another fraction from the value of this one,
 * returning the result in reduced form.
 * &lt;/p&gt;</text>
    <param>fraction {@link BigFraction} to subtract, must not be {@code null}.</param>
    <return>a {@link BigFraction} instance with the resulting values</return>
    <throws>NullArgumentException if the {@code fraction} is {@code null}.</throws>
  </javadoc>
  <method type="BigFraction" name="subtract">
    <scope />
    <scope />
    <declaration type="BigInteger" name="num" />
    <declaration type="BigInteger" name="den" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Returns the &lt;code&gt;String&lt;/code&gt; representing this fraction, ie
 * "num / dem" or just "num" if the denominator is one.
 * &lt;/p&gt;</text>
    <return>a string representation of the fraction.</return>
    <see>java.lang.Object#toString()</see>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="String" name="str" />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="BigFractionField" name="getField" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
