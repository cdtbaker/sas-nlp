<?xml version="1.0" encoding="UTF-8"?>
<class name="RootsOfUnity">
  <javadoc>
    <text>A helper class for the computation and caching of the {@code n}-th roots of
 * unity.</text>
    <version>$Id: RootsOfUnity.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Serializable version id.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Number of roots of unity.</text>
  </javadoc>
  <declaration type="int" name="omegaCount" />
  <javadoc>
    <text>Real part of the roots.</text>
  </javadoc>
  <declaration type="double[]" name="omegaReal" />
  <javadoc>
    <text>Imaginary part of the {@code n}-th roots of unity, for positive values
 * of {@code n}. In this array, the roots are stored in counter-clockwise
 * order.</text>
  </javadoc>
  <declaration type="double[]" name="omegaImaginaryCounterClockwise" />
  <javadoc>
    <text>Imaginary part of the {@code n}-th roots of unity, for negative values
 * of {@code n}. In this array, the roots are stored in clockwise order.</text>
  </javadoc>
  <declaration type="double[]" name="omegaImaginaryClockwise" />
  <javadoc>
    <text>{@code true} if {@link #computeRoots(int)} was called with a positive
 * value of its argument {@code n}. In this case, counter-clockwise ordering
 * of the roots of unity should be used.</text>
  </javadoc>
  <declaration type="boolean" name="isCounterClockWise" />
  <javadoc>
    <text>Build an engine for computing the {@code n}-th roots of unity.</text>
  </javadoc>
  <method type="constructor" name="RootsOfUnity" />
  <javadoc>
    <text>Returns {@code true} if {@link #computeRoots(int)} was called with a
 * positive value of its argument {@code n}. If {@code true}, then
 * counter-clockwise ordering of the roots of unity should be used.</text>
    <return>{@code true} if the roots of unity are stored in
 * counter-clockwise order</return>
    <throws>MathIllegalStateException if no roots of unity have been computed
 * yet</throws>
  </javadoc>
  <method type="boolean" name="isCounterClockWise">
    <scope />
  </method>
  <javadoc>
    <text>&lt;p&gt;
 * Computes the {@code n}-th roots of unity. The roots are stored in{@code omega[]}, such that {@code omega[k] = w ^ k}, where{@code k = 0, ..., n - 1}, {@code w = exp(2 * pi * i / n)} and{@code i = sqrt(-1)}.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Note that {@code n} can be positive of negative
 * &lt;/p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;{@code abs(n)} is always the number of roots of unity.&lt;/li&gt;
 * &lt;li&gt;If {@code n &gt; 0}, then the roots are stored in counter-clockwise order.&lt;/li&gt;
 * &lt;li&gt;If {@code n &lt; 0}, then the roots are stored in clockwise order.&lt;/p&gt;
 * &lt;/ul&gt;</text>
    <param>n the (signed) number of roots of unity to be computed</param>
    <throws>ZeroException if {@code n = 0}</throws>
  </javadoc>
  <method type="void" name="computeRoots">
    <scope />
    <declaration type="int" name="absN" />
    <scope />
    <declaration type="double" name="t" />
    <declaration type="double" name="cosT" />
    <declaration type="double" name="sinT" />
    <scope />
    <comment>avoid repetitive calculations</comment>
    <comment>calculate everything from scratch</comment>
  </method>
  <javadoc>
    <text>Get the real part of the {@code k}-th {@code n}-th root of unity.</text>
    <param>k index of the {@code n}-th root of unity</param>
    <return>real part of the {@code k}-th {@code n}-th root of unity</return>
    <throws>MathIllegalStateException if no roots of unity have been
 * computed yet</throws>
    <throws>MathIllegalArgumentException if {@code k} is out of range</throws>
  </javadoc>
  <method type="double" name="getReal">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Get the imaginary part of the {@code k}-th {@code n}-th root of unity.</text>
    <param>k index of the {@code n}-th root of unity</param>
    <return>imaginary part of the {@code k}-th {@code n}-th root of unity</return>
    <throws>MathIllegalStateException if no roots of unity have been
 * computed yet</throws>
    <throws>OutOfRangeException if {@code k} is out of range</throws>
  </javadoc>
  <method type="double" name="getImaginary">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Returns the number of roots of unity currently stored. If{@link #computeRoots(int)} was called with {@code n}, then this method
 * returns {@code abs(n)}. If no roots of unity have been computed yet, this
 * method returns 0.</text>
    <return>the number of roots of unity currently stored</return>
  </javadoc>
  <method type="int" name="getNumberOfRoots" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
