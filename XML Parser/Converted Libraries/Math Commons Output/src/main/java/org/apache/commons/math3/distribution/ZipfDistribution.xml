<?xml version="1.0" encoding="UTF-8"?>
<class name="ZipfDistribution">
  <javadoc>
    <text>Implementation of the Zipf distribution.</text>
    <see>&lt;a href="http://mathworld.wolfram.com/ZipfDistribution.html"&gt;Zipf distribution (MathWorld)&lt;/a&gt;</see>
    <version>$Id: ZipfDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Number of elements.</text>
  </javadoc>
  <declaration type="int" name="numberOfElements" />
  <javadoc>
    <text>Exponent parameter of the distribution.</text>
  </javadoc>
  <declaration type="double" name="exponent" />
  <javadoc>
    <text>Cached numerical mean</text>
  </javadoc>
  <declaration type="double" name="numericalMean" />
  <javadoc>
    <text>Whether or not the numerical mean has been calculated</text>
  </javadoc>
  <declaration type="boolean" name="numericalMeanIsCalculated" />
  <javadoc>
    <text>Cached numerical variance</text>
  </javadoc>
  <declaration type="double" name="numericalVariance" />
  <javadoc>
    <text>Whether or not the numerical variance has been calculated</text>
  </javadoc>
  <declaration type="boolean" name="numericalVarianceIsCalculated" />
  <javadoc>
    <text>Create a new Zipf distribution with the given number of elements and
 * exponent.</text>
    <param>numberOfElements Number of elements.</param>
    <param>exponent Exponent.</param>
    <exception>NotStrictlyPositiveException if {@code numberOfElements &lt;= 0}or {@code exponent &lt;= 0}.</exception>
  </javadoc>
  <method type="constructor" name="ZipfDistribution" />
  <javadoc>
    <text>Creates a Zipf distribution.</text>
    <param>rng Random number generator.</param>
    <param>numberOfElements Number of elements.</param>
    <param>exponent Exponent.</param>
    <exception>NotStrictlyPositiveException if {@code numberOfElements &lt;= 0}or {@code exponent &lt;= 0}.</exception>
    <since>3.1</since>
  </javadoc>
  <method type="constructor" name="ZipfDistribution">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Get the number of elements (e.g. corpus size) for the distribution.</text>
    <return>the number of elements</return>
  </javadoc>
  <method type="int" name="getNumberOfElements" />
  <javadoc>
    <text>Get the exponent characterizing the distribution.</text>
    <return>the exponent</return>
  </javadoc>
  <method type="double" name="getExponent" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="probability">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="cumulativeProbability">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}For number of elements {@code N} and exponent {@code s}, the mean is{@code Hs1 / Hs}, where
 * &lt;ul&gt;
 * &lt;li&gt;{@code Hs1 = generalizedHarmonic(N, s - 1)},&lt;/li&gt;
 * &lt;li&gt;{@code Hs = generalizedHarmonic(N, s)}.&lt;/li&gt;
 * &lt;/ul&gt;</text>
  </javadoc>
  <method type="double" name="getNumericalMean">
    <scope />
  </method>
  <javadoc>
    <text>Used by {@link #getNumericalMean()}.</text>
    <return>the mean of this distribution</return>
  </javadoc>
  <method type="double" name="calculateNumericalMean">
    <declaration type="int" name="N" />
    <declaration type="double" name="s" />
    <declaration type="double" name="Hs1" />
    <declaration type="double" name="Hs" />
  </method>
  <javadoc>
    <text>{@inheritDoc}For number of elements {@code N} and exponent {@code s}, the mean is{@code (Hs2 / Hs) - (Hs1^2 / Hs^2)}, where
 * &lt;ul&gt;
 * &lt;li&gt;{@code Hs2 = generalizedHarmonic(N, s - 2)},&lt;/li&gt;
 * &lt;li&gt;{@code Hs1 = generalizedHarmonic(N, s - 1)},&lt;/li&gt;
 * &lt;li&gt;{@code Hs = generalizedHarmonic(N, s)}.&lt;/li&gt;
 * &lt;/ul&gt;</text>
  </javadoc>
  <method type="double" name="getNumericalVariance">
    <scope />
  </method>
  <javadoc>
    <text>Used by {@link #getNumericalVariance()}.</text>
    <return>the variance of this distribution</return>
  </javadoc>
  <method type="double" name="calculateNumericalVariance">
    <declaration type="int" name="N" />
    <declaration type="double" name="s" />
    <declaration type="double" name="Hs2" />
    <declaration type="double" name="Hs1" />
    <declaration type="double" name="Hs" />
  </method>
  <javadoc>
    <text>Calculates the Nth generalized harmonic number. See
 * &lt;a href="http://mathworld.wolfram.com/HarmonicSeries.html"&gt;Harmonic
 * Series&lt;/a&gt;.</text>
    <param>n Term in the series to calculate (must be larger than 1)</param>
    <param>m Exponent (special case {@code m = 1} is the harmonic series).</param>
    <return>the n&lt;sup&gt;th&lt;/sup&gt; generalized harmonic number.</return>
  </javadoc>
  <method type="double" name="generalizedHarmonic">
    <declaration type="double" name="value" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}The lower bound of the support is always 1 no matter the parameters.</text>
    <return>lower bound of the support (always 1)</return>
  </javadoc>
  <method type="int" name="getSupportLowerBound" />
  <javadoc>
    <text>{@inheritDoc}The upper bound of the support is the number of elements.</text>
    <return>upper bound of the support</return>
  </javadoc>
  <method type="int" name="getSupportUpperBound" />
  <javadoc>
    <text>{@inheritDoc}The support of this distribution is connected.</text>
    <return>{@code true}</return>
  </javadoc>
  <method type="boolean" name="isSupportConnected" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
