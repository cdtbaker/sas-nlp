<?xml version="1.0" encoding="UTF-8"?>
<class name="NestedLoops">
  <javadoc>
    <text>This class represent a tree of nested 2D boundary loops.
 * &lt;p&gt;This class is used for piecewise polygons construction.
 * Polygons are built using the outline edges as
 * representative of boundaries, the orientation of these lines are
 * meaningful. However, we want to allow the user to specify its
 * outline loops without having to take care of this orientation. This
 * class is devoted to correct mis-oriented loops.&lt;p&gt;
 * &lt;p&gt;Orientation is computed assuming the piecewise polygon is finite,
 * i.e. the outermost loops have their exterior side facing points at
 * infinity, and hence are oriented counter-clockwise. The orientation of
 * internal loops is computed as the reverse of the orientation of
 * their immediate surrounding loop.&lt;/p&gt;</text>
    <version>$Id: NestedLoops.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Boundary loop.</text>
  </javadoc>
  <declaration type="Vector2D[]" name="loop" />
  <javadoc>
    <text>Surrounded loops.</text>
  </javadoc>
  <declaration type="ArrayList&lt;NestedLoops&gt;" name="surrounded" />
  <javadoc>
    <text>Polygon enclosing a finite region.</text>
  </javadoc>
  <declaration type="Region&lt;Euclidean2D&gt;" name="polygon" />
  <javadoc>
    <text>Indicator for original loop orientation.</text>
  </javadoc>
  <declaration type="boolean" name="originalIsClockwise" />
  <javadoc>
    <text>Simple Constructor.
 * &lt;p&gt;Build an empty tree of nested loops. This instance will become
 * the root node of a complete tree, it is not associated with any
 * loop by itself, the outermost loops are in the root tree child
 * nodes.&lt;/p&gt;</text>
  </javadoc>
  <method type="constructor" name="NestedLoops" />
  <javadoc>
    <text>Constructor.
 * &lt;p&gt;Build a tree node with neither parent nor children&lt;/p&gt;</text>
    <param>loop boundary loop (will be reversed in place if needed)</param>
    <exception>MathIllegalArgumentException if an outline has an open boundary loop</exception>
  </javadoc>
  <method type="constructor" name="NestedLoops">
    <scope />
    <declaration type="ArrayList&lt;SubHyperplane&lt;Euclidean2D&gt;&gt;" name="edges" />
    <declaration type="Vector2D" name="current" />
    <scope>
      <declaration type="Vector2D" name="previous" />
      <declaration type="Line" name="line" />
      <declaration type="IntervalsSet" name="region" />
    </scope>
    <scope />
    <scope />
    <comment>build the polygon defined by the loop</comment>
    <comment>ensure the polygon encloses a finite region of the plane</comment>
  </method>
  <javadoc>
    <text>Add a loop in a tree.</text>
    <param>bLoop boundary loop (will be reversed in place if needed)</param>
    <exception>MathIllegalArgumentException if an outline has crossing
 * boundary loops or open boundary loops</exception>
  </javadoc>
  <method type="void" name="add" />
  <javadoc>
    <text>Add a loop in a tree.</text>
    <param>node boundary loop (will be reversed in place if needed)</param>
    <exception>MathIllegalArgumentException if an outline has boundary
 * loops that cross each other</exception>
  </javadoc>
  <method type="void" name="add">
    <scope>
      <scope />
    </scope>
    <scope>
      <declaration type="NestedLoops" name="child" />
      <scope />
    </scope>
    <declaration type="RegionFactory&lt;Euclidean2D&gt;" name="factory" />
    <scope>
      <scope />
    </scope>
    <comment>check if we can go deeper in the tree</comment>
    <comment>check if we can absorb some of the instance children</comment>
    <comment>we should be separate from the remaining children</comment>
  </method>
  <javadoc>
    <text>Correct the orientation of the loops contained in the tree.
 * &lt;p&gt;This is this method that really inverts the loops that where
 * provided through the {@link #add(Vector2D[]) add} method if
 * they are mis-oriented&lt;/p&gt;</text>
  </javadoc>
  <method type="void" name="correctOrientation">
    <scope />
  </method>
  <javadoc>
    <text>Set the loop orientation.</text>
    <param>clockwise if true, the loop should be set to clockwise
 * orientation</param>
  </javadoc>
  <method type="void" name="setClockWise">
    <scope>
      <declaration type="int" name="min" />
      <declaration type="int" name="max" />
      <scope>
        <declaration type="Vector2D" name="tmp" />
      </scope>
    </scope>
    <scope />
    <comment>we need to inverse the original loop</comment>
    <comment>go deeper in the tree</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
