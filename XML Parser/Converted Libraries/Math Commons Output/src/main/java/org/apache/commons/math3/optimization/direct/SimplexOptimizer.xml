<?xml version="1.0" encoding="UTF-8"?>
<class name="SimplexOptimizer">
  <javadoc>
    <text>This class implements simplex-based direct search optimization.
 * &lt;p&gt;
 * Direct search methods only use objective function values, they do
 * not need derivatives and don't either try to compute approximation
 * of the derivatives. According to a 1996 paper by Margaret H. Wright
 * (&lt;a href="http://cm.bell-labs.com/cm/cs/doc/96/4-02.ps.gz"&gt;Direct
 * Search Methods: Once Scorned, Now Respectable&lt;/a&gt;), they are used
 * when either the computation of the derivative is impossible (noisy
 * functions, unpredictable discontinuities) or difficult (complexity,
 * computation cost). In the first cases, rather than an optimum, a
 * &lt;em&gt;not too bad&lt;/em&gt; point is desired. In the latter cases, an
 * optimum is desired but cannot be reasonably found. In all cases
 * direct search methods can be useful.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Simplex-based direct search methods are based on comparison of
 * the objective function values at the vertices of a simplex (which is a
 * set of n+1 points in dimension n) that is updated by the algorithms
 * steps.
 * &lt;p&gt;
 * &lt;p&gt;
 * The {@link #setSimplex(AbstractSimplex) setSimplex} method &lt;em&gt;must&lt;/em&gt;
 * be called prior to calling the {@code optimize} method.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Each call to {@link #optimize(int,MultivariateFunction,GoalType,double[])optimize} will re-use the start configuration of the current simplex and
 * move it such that its first vertex is at the provided start point of the
 * optimization. If the {@code optimize} method is called to solve a different
 * problem and the number of parameters change, the simplex must be
 * re-initialized to one with the appropriate dimensions.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Convergence is checked by providing the &lt;em&gt;worst&lt;/em&gt; points of
 * previous and current simplex to the convergence checker, not the best
 * ones.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This simplex optimizer implementation does not directly support constrained
 * optimization with simple bounds, so for such optimizations, either a more
 * dedicated method must be used like {@link CMAESOptimizer} or {@link BOBYQAOptimizer}, or the optimized method must be wrapped in an adapter like{@link MultivariateFunctionMappingAdapter} or {@link MultivariateFunctionPenaltyAdapter}.
 * &lt;/p&gt;</text>
    <see>AbstractSimplex</see>
    <see>MultivariateFunctionMappingAdapter</see>
    <see>MultivariateFunctionPenaltyAdapter</see>
    <see>CMAESOptimizer</see>
    <see>BOBYQAOptimizer</see>
    <version>$Id: SimplexOptimizer.java 1422230 2012-12-15 12:11:13Z erans $</version>
    <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Simplex.</text>
  </javadoc>
  <declaration type="AbstractSimplex" name="simplex" />
  <javadoc>
    <text>Constructor using a default {@link SimpleValueChecker convergence
 * checker}.</text>
    <deprecated>See {@link SimpleValueChecker#SimpleValueChecker()}</deprecated>
  </javadoc>
  <method type="constructor" name="SimplexOptimizer" />
  <javadoc>
    <param>checker Convergence checker.</param>
  </javadoc>
  <method type="constructor" name="SimplexOptimizer" />
  <javadoc>
    <param>rel Relative threshold.</param>
    <param>abs Absolute threshold.</param>
  </javadoc>
  <method type="constructor" name="SimplexOptimizer" />
  <javadoc>
    <text>Set the simplex algorithm.</text>
    <param>simplex Simplex.</param>
    <deprecated>As of 3.1. The initial simplex can now be passed as an
 * argument of the {@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])}method.</deprecated>
  </javadoc>
  <method type="void" name="setSimplex" />
  <javadoc>
    <text>Optimize an objective function.</text>
    <param>maxEval Allowed number of evaluations of the objective function.</param>
    <param>f Objective function.</param>
    <param>goalType Optimization type.</param>
    <param>optData Optimization data. The following data will be looked for:
 * &lt;ul&gt;
 * &lt;li&gt;{@link org.apache.commons.math3.optimization.InitialGuess InitialGuess}&lt;/li&gt;
 * &lt;li&gt;{@link AbstractSimplex}&lt;/li&gt;
 * &lt;/ul&gt;</param>
    <return>the point/value pair giving the optimal value for objective
 * function.</return>
  </javadoc>
  <method type="PointValuePair" name="optimizeInternal">
    <comment>Scan "optData" for the input specific to this optimizer.</comment>
    <comment>The parent's method will retrieve the common parameters from</comment>
    <comment>"optData" and call "doOptimize".</comment>
  </method>
  <javadoc>
    <text>Scans the list of (required and optional) optimization data that
 * characterize the problem.</text>
    <param>optData Optimization data. The following data will be looked for:
 * &lt;ul&gt;
 * &lt;li&gt;{@link AbstractSimplex}&lt;/li&gt;
 * &lt;/ul&gt;</param>
  </javadoc>
  <method type="void" name="parseOptimizationData">
    <scope>
      <scope />
    </scope>
    <comment>The existing values (as set by the previous call) are reused if</comment>
    <comment>not provided in the argument list.</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="PointValuePair" name="doOptimize">
    <scope />
    <declaration type="MultivariateFunction[]" name="evalFunc" />
    <method type="double" name="value" />
    <declaration type="boolean" name="isMinim" />
    <declaration type="Comparator&lt;PointValuePair&gt;" name="comparator" />
    <method type="int" name="compare">
      <declaration type="double" name="v1" />
      <declaration type="double" name="v2" />
    </method>
    <declaration type="PointValuePair[]" name="previous" />
    <declaration type="int" name="iteration" />
    <declaration type="ConvergenceChecker&lt;PointValuePair&gt;" name="checker" />
    <scope>
      <scope>
        <declaration type="boolean" name="converged" />
        <scope>
          <declaration type="PointValuePair" name="prev" />
        </scope>
        <scope />
      </scope>
    </scope>
    <comment>Indirect call to "computeObjectiveValue" in order to update the</comment>
    <comment>evaluations counter.</comment>
    <comment>Initialize search.</comment>
    <comment>We have found an optimum.</comment>
    <comment>We still need to search.</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
