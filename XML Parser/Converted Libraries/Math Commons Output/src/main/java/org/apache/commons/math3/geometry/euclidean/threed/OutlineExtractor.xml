<?xml version="1.0" encoding="UTF-8"?>
<class name="OutlineExtractor">
  <javadoc>
    <text>Extractor for {@link PolygonsSet polyhedrons sets} outlines.
 * &lt;p&gt;This class extracts the 2D outlines from {{@link PolygonsSetpolyhedrons sets} in a specified projection plane.&lt;/p&gt;</text>
    <version>$Id: OutlineExtractor.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Abscissa axis of the projection plane.</text>
  </javadoc>
  <declaration type="Vector3D" name="u" />
  <javadoc>
    <text>Ordinate axis of the projection plane.</text>
  </javadoc>
  <declaration type="Vector3D" name="v" />
  <javadoc>
    <text>Normal of the projection plane (viewing direction).</text>
  </javadoc>
  <declaration type="Vector3D" name="w" />
  <javadoc>
    <text>Build an extractor for a specific projection plane.</text>
    <param>u abscissa axis of the projection point</param>
    <param>v ordinate axis of the projection point</param>
  </javadoc>
  <method type="constructor" name="OutlineExtractor" />
  <javadoc>
    <text>Extract the outline of a polyhedrons set.</text>
    <param>polyhedronsSet polyhedrons set whose outline must be extracted</param>
    <return>an outline, as an array of loops.</return>
  </javadoc>
  <method type="Vector2D[][]" name="getOutline">
    <declaration type="BoundaryProjector" name="projector" />
    <declaration type="PolygonsSet" name="projected" />
    <declaration type="Vector2D[][]" name="outline" />
    <scope>
      <declaration type="Vector2D[]" name="rawLoop" />
      <declaration type="int" name="end" />
      <declaration type="int" name="j" />
      <scope>
        <scope>
          <scope />
        </scope>
        <scope />
      </scope>
      <scope />
    </scope>
    <comment>project all boundary facets into one polygons set</comment>
    <comment>Remove the spurious intermediate vertices from the outline</comment>
    <comment>the point should be removed</comment>
    <comment>the point remains in the loop</comment>
    <comment>resize the array</comment>
  </method>
  <javadoc>
    <text>Check if a point is geometrically between its neighbour in an array.
 * &lt;p&gt;The neighbours are computed considering the array is a loop
 * (i.e. point at index (n-1) is before point at index 0)&lt;/p&gt;</text>
    <param>loop points array</param>
    <param>n number of points to consider in the array</param>
    <param>i index of the point to check (must be between 0 and n-1)</param>
    <return>true if the point is exactly between its neighbours</return>
  </javadoc>
  <method type="boolean" name="pointIsBetween">
    <declaration type="Vector2D" name="previous" />
    <declaration type="Vector2D" name="current" />
    <declaration type="Vector2D" name="next" />
    <declaration type="double" name="dx1" />
    <declaration type="double" name="dy1" />
    <declaration type="double" name="dx2" />
    <declaration type="double" name="dy2" />
    <declaration type="double" name="cross" />
    <declaration type="double" name="dot" />
    <declaration type="double" name="d1d2" />
  </method>
  <javadoc>
    <text>Visitor projecting the boundary facets on a plane.</text>
  </javadoc>
  <javadoc>
    <text>Projection of the polyhedrons set on the plane.</text>
  </javadoc>
  <declaration type="PolygonsSet" name="projected" />
  <javadoc>
    <text>Simple constructor.</text>
  </javadoc>
  <method type="constructor" name="BoundaryProjector" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Order" name="visitOrder" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="visitInternalNode">
    <declaration type="BoundaryAttribute&lt;Euclidean3D&gt;" name="attribute" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="visitLeafNode" />
  <javadoc>
    <text>Add he contribution of a boundary facet.</text>
    <param>facet boundary facet</param>
    <param>reversed if true, the facet has the inside on its plus side</param>
  </javadoc>
  <method type="void" name="addContribution">
    <declaration type="AbstractSubHyperplane&lt;Euclidean3D,Euclidean2D&gt;" name="absFacet" />
    <declaration type="Plane" name="plane" />
    <declaration type="double" name="scal" />
    <scope>
      <declaration type="Vector2D[][]" name="vertices" />
      <scope>
        <declaration type="Vector2D[][][]" name="newVertices" />
        <scope>
          <declaration type="Vector2D[]" name="loop" />
          <declaration type="Vector2D[]" name="newLoop" />
          <scope>
            <scope />
          </scope>
          <scope>
            <scope />
          </scope>
        </scope>
      </scope>
      <declaration type="ArrayList&lt;SubHyperplane&lt;Euclidean2D&gt;&gt;" name="edges" />
      <scope>
        <declaration type="boolean" name="closed" />
        <declaration type="int" name="previous" />
        <declaration type="Vector3D" name="previous3D" />
        <declaration type="int" name="current" />
        <declaration type="Vector2D" name="pPoint" />
        <scope>
          <declaration type="Vector3D" name="current3D" />
          <declaration type="Vector2D" name="cPoint" />
          <declaration type="org.apache.commons.math3.geometry.euclidean.twod.Line" name="line" />
          <declaration type="SubHyperplane&lt;Euclidean2D&gt;" name="edge" />
          <scope>
            <declaration type="double" name="angle" />
            <declaration type="org.apache.commons.math3.geometry.euclidean.twod.Line" name="l" />
          </scope>
          <scope>
            <declaration type="double" name="angle" />
            <declaration type="org.apache.commons.math3.geometry.euclidean.twod.Line" name="l" />
          </scope>
        </scope>
      </scope>
      <declaration type="PolygonsSet" name="projectedFacet" />
    </scope>
    <comment>extract the vertices of the facet</comment>
    <comment>the facet is seen from the inside,</comment>
    <comment>we need to invert its boundary orientation</comment>
    <comment>use the reverted vertices</comment>
    <comment>compute the projection of the facet in the outline plane</comment>
    <comment>the previous point is a real vertex</comment>
    <comment>it defines one bounding point of the edge</comment>
    <comment>the current point is a real vertex</comment>
    <comment>it defines one bounding point of the edge</comment>
    <comment>add the contribution of the facet to the global outline</comment>
  </method>
  <javadoc>
    <text>Get the projection of the polyhedrons set on the plane.</text>
    <return>projection of the polyhedrons set on the plane</return>
  </javadoc>
  <method type="PolygonsSet" name="getProjected" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
