<?xml version="1.0" encoding="UTF-8"?>
<class name="OneWayAnova">
  <javadoc>
    <text>Implements one-way ANOVA (analysis of variance) statistics.
 * &lt;p&gt; Tests for differences between two or more categories of univariate data
 * (for example, the body mass index of accountants, lawyers, doctors and
 * computer programmers).  When two categories are given, this is equivalent to
 * the {@link org.apache.commons.math3.stat.inference.TTest}.
 * &lt;/p&gt;&lt;p&gt;
 * Uses the {@link org.apache.commons.math3.distribution.FDistributioncommons-math F Distribution implementation} to estimate exact p-values.&lt;/p&gt;
 * &lt;p&gt;This implementation is based on a description at
 * http://faculty.vassar.edu/lowry/ch13pt1.html&lt;/p&gt;
 * &lt;pre&gt;
 * Abbreviations: bg = between groups,
 * wg = within groups,
 * ss = sum squared deviations
 * &lt;/pre&gt;</text>
    <since>1.2</since>
    <version>$Id: OneWayAnova.java 1462423 2013-03-29 07:25:18Z luc $</version>
  </javadoc>
  <javadoc>
    <text>Default constructor.</text>
  </javadoc>
  <method type="constructor" name="OneWayAnova" />
  <javadoc>
    <text>Computes the ANOVA F-value for a collection of &lt;code&gt;double[]&lt;/code&gt;
 * arrays.
 * &lt;p&gt;&lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The categoryData &lt;code&gt;Collection&lt;/code&gt; must contain
 * &lt;code&gt;double[]&lt;/code&gt; arrays.&lt;/li&gt;
 * &lt;li&gt; There must be at least two &lt;code&gt;double[]&lt;/code&gt; arrays in the
 * &lt;code&gt;categoryData&lt;/code&gt; collection and each of these arrays must
 * contain at least two values.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;
 * This implementation computes the F statistic using the definitional
 * formula&lt;pre&gt;
 * F = msbg/mswg&lt;/pre&gt;
 * where&lt;pre&gt;
 * msbg = between group mean square
 * mswg = within group mean square&lt;/pre&gt;
 * are as defined &lt;a href="http://faculty.vassar.edu/lowry/ch13pt1.html"&gt;
 * here&lt;/a&gt;&lt;/p&gt;</text>
    <param>categoryData &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;double[]&lt;/code&gt;
 * arrays each containing data for one category</param>
    <return>Fvalue</return>
    <throws>NullArgumentException if &lt;code&gt;categoryData&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>DimensionMismatchException if the length of the &lt;code&gt;categoryData&lt;/code&gt;
 * array is less than 2 or a contained &lt;code&gt;double[]&lt;/code&gt; array does not have
 * at least two values</throws>
  </javadoc>
  <method type="double" name="anovaFValue">
    <declaration type="AnovaStats" name="a" />
  </method>
  <javadoc>
    <text>Computes the ANOVA P-value for a collection of &lt;code&gt;double[]&lt;/code&gt;
 * arrays.
 * &lt;p&gt;&lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The categoryData &lt;code&gt;Collection&lt;/code&gt; must contain
 * &lt;code&gt;double[]&lt;/code&gt; arrays.&lt;/li&gt;
 * &lt;li&gt; There must be at least two &lt;code&gt;double[]&lt;/code&gt; arrays in the
 * &lt;code&gt;categoryData&lt;/code&gt; collection and each of these arrays must
 * contain at least two values.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;
 * This implementation uses the{@link org.apache.commons.math3.distribution.FDistributioncommons-math F Distribution implementation} to estimate the exact
 * p-value, using the formula&lt;pre&gt;
 * p = 1 - cumulativeProbability(F)&lt;/pre&gt;
 * where &lt;code&gt;F&lt;/code&gt; is the F value and &lt;code&gt;cumulativeProbability&lt;/code&gt;
 * is the commons-math implementation of the F distribution.&lt;/p&gt;</text>
    <param>categoryData &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;double[]&lt;/code&gt;
 * arrays each containing data for one category</param>
    <return>Pvalue</return>
    <throws>NullArgumentException if &lt;code&gt;categoryData&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>DimensionMismatchException if the length of the &lt;code&gt;categoryData&lt;/code&gt;
 * array is less than 2 or a contained &lt;code&gt;double[]&lt;/code&gt; array does not have
 * at least two values</throws>
    <throws>ConvergenceException if the p-value can not be computed due to a convergence error</throws>
    <throws>MaxCountExceededException if the maximum number of iterations is exceeded</throws>
  </javadoc>
  <method type="double" name="anovaPValue">
    <declaration type="AnovaStats" name="a" />
    <declaration type="FDistribution" name="fdist" />
    <comment>No try-catch or advertised exception because args are valid</comment>
  </method>
  <javadoc>
    <text>Computes the ANOVA P-value for a collection of {@link SummaryStatistics}.
 * &lt;p&gt;&lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The categoryData &lt;code&gt;Collection&lt;/code&gt; must contain{@link SummaryStatistics}.&lt;/li&gt;
 * &lt;li&gt; There must be at least two {@link SummaryStatistics} in the
 * &lt;code&gt;categoryData&lt;/code&gt; collection and each of these statistics must
 * contain at least two values.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;
 * This implementation uses the{@link org.apache.commons.math3.distribution.FDistributioncommons-math F Distribution implementation} to estimate the exact
 * p-value, using the formula&lt;pre&gt;
 * p = 1 - cumulativeProbability(F)&lt;/pre&gt;
 * where &lt;code&gt;F&lt;/code&gt; is the F value and &lt;code&gt;cumulativeProbability&lt;/code&gt;
 * is the commons-math implementation of the F distribution.&lt;/p&gt;</text>
    <param>categoryData &lt;code&gt;Collection&lt;/code&gt; of {@link SummaryStatistics}each containing data for one category</param>
    <param>allowOneElementData if true, allow computation for one catagory
 * only or for one data element per category</param>
    <return>Pvalue</return>
    <throws>NullArgumentException if &lt;code&gt;categoryData&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>DimensionMismatchException if the length of the &lt;code&gt;categoryData&lt;/code&gt;
 * array is less than 2 or a contained {@link SummaryStatistics} does not have
 * at least two values</throws>
    <throws>ConvergenceException if the p-value can not be computed due to a convergence error</throws>
    <throws>MaxCountExceededException if the maximum number of iterations is exceeded</throws>
    <since>3.2</since>
  </javadoc>
  <method type="double" name="anovaPValue">
    <declaration type="AnovaStats" name="a" />
    <declaration type="FDistribution" name="fdist" />
  </method>
  <javadoc>
    <text>This method calls the method that actually does the calculations (except
 * P-value).</text>
    <param>categoryData&lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;double[]&lt;/code&gt; arrays each
 * containing data for one category</param>
    <return>computed AnovaStats</return>
    <throws>NullArgumentExceptionif &lt;code&gt;categoryData&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>DimensionMismatchExceptionif the length of the &lt;code&gt;categoryData&lt;/code&gt; array is less
 * than 2 or a contained &lt;code&gt;double[]&lt;/code&gt; array does not
 * contain at least two values</throws>
  </javadoc>
  <method type="AnovaStats" name="anovaStats">
    <declaration type="Collection&lt;SummaryStatistics&gt;" name="categoryDataSummaryStatistics" />
    <scope>
      <declaration type="SummaryStatistics" name="dataSummaryStatistics" />
      <scope />
    </scope>
    <comment>convert arrays to SummaryStatistics</comment>
  </method>
  <javadoc>
    <text>Performs an ANOVA test, evaluating the null hypothesis that there
 * is no difference among the means of the data categories.
 * &lt;p&gt;&lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
 * &lt;li&gt;The categoryData &lt;code&gt;Collection&lt;/code&gt; must contain
 * &lt;code&gt;double[]&lt;/code&gt; arrays.&lt;/li&gt;
 * &lt;li&gt; There must be at least two &lt;code&gt;double[]&lt;/code&gt; arrays in the
 * &lt;code&gt;categoryData&lt;/code&gt; collection and each of these arrays must
 * contain at least two values.&lt;/li&gt;
 * &lt;li&gt;alpha must be strictly greater than 0 and less than or equal to 0.5.
 * &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;
 * This implementation uses the{@link org.apache.commons.math3.distribution.FDistributioncommons-math F Distribution implementation} to estimate the exact
 * p-value, using the formula&lt;pre&gt;
 * p = 1 - cumulativeProbability(F)&lt;/pre&gt;
 * where &lt;code&gt;F&lt;/code&gt; is the F value and &lt;code&gt;cumulativeProbability&lt;/code&gt;
 * is the commons-math implementation of the F distribution.&lt;/p&gt;
 * &lt;p&gt;True is returned iff the estimated p-value is less than alpha.&lt;/p&gt;</text>
    <param>categoryData &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;double[]&lt;/code&gt;
 * arrays each containing data for one category</param>
    <param>alpha significance level of the test</param>
    <return>true if the null hypothesis can be rejected with
 * confidence 1 - alpha</return>
    <throws>NullArgumentException if &lt;code&gt;categoryData&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>DimensionMismatchException if the length of the &lt;code&gt;categoryData&lt;/code&gt;
 * array is less than 2 or a contained &lt;code&gt;double[]&lt;/code&gt; array does not have
 * at least two values</throws>
    <throws>OutOfRangeException if &lt;code&gt;alpha&lt;/code&gt; is not in the range (0, 0.5]</throws>
    <throws>ConvergenceException if the p-value can not be computed due to a convergence error</throws>
    <throws>MaxCountExceededException if the maximum number of iterations is exceeded</throws>
  </javadoc>
  <method type="boolean" name="anovaTest">
    <scope />
  </method>
  <javadoc>
    <text>This method actually does the calculations (except P-value).</text>
    <param>categoryData &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;double[]&lt;/code&gt;
 * arrays each containing data for one category</param>
    <param>allowOneElementData if true, allow computation for one catagory
 * only or for one data element per category</param>
    <return>computed AnovaStats</return>
    <throws>NullArgumentException if &lt;code&gt;categoryData&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</throws>
    <throws>DimensionMismatchException if &lt;code&gt;allowOneElementData&lt;/code&gt; is false and the number of
 * categories is less than 2 or a contained SummaryStatistics does not contain
 * at least two values</throws>
  </javadoc>
  <method type="AnovaStats" name="anovaStats">
    <scope>
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
    <declaration type="int" name="dfwg" />
    <declaration type="double" name="sswg" />
    <declaration type="double" name="totsum" />
    <declaration type="double" name="totsumsq" />
    <declaration type="int" name="totnum" />
    <scope>
      <declaration type="double" name="sum" />
      <declaration type="double" name="sumsq" />
      <declaration type="int" name="num" />
      <declaration type="double" name="ss" />
    </scope>
    <declaration type="double" name="sst" />
    <declaration type="double" name="ssbg" />
    <declaration type="int" name="dfbg" />
    <declaration type="double" name="msbg" />
    <declaration type="double" name="mswg" />
    <declaration type="double" name="F" />
    <comment>check if we have enough categories</comment>
    <comment>check if each category has enough data</comment>
  </method>
  <javadoc>
    <text>Convenience class to pass dfbg,dfwg,F values around within OneWayAnova.
 * No get/set methods provided.</text>
  </javadoc>
  <javadoc>
    <text>Degrees of freedom in numerator (between groups).</text>
  </javadoc>
  <declaration type="int" name="dfbg" />
  <javadoc>
    <text>Degrees of freedom in denominator (within groups).</text>
  </javadoc>
  <declaration type="int" name="dfwg" />
  <javadoc>
    <text>Statistic.</text>
  </javadoc>
  <declaration type="double" name="F" />
  <javadoc>
    <text>Constructor</text>
    <param>dfbg degrees of freedom in numerator (between groups)</param>
    <param>dfwg degrees of freedom in denominator (within groups)</param>
    <param>F statistic</param>
  </javadoc>
  <method type="constructor" name="AnovaStats" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
