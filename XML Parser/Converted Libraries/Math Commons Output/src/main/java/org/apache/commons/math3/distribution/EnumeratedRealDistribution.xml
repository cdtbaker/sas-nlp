<?xml version="1.0" encoding="UTF-8"?>
<class name="EnumeratedRealDistribution">
  <javadoc>
    <text>&lt;p&gt;Implementation of a real-valued {@link EnumeratedDistribution}.
 * &lt;p&gt;Values with zero-probability are allowed but they do not extend the
 * support.&lt;br/&gt;
 * Duplicate values are allowed. Probabilities of duplicate values are combined
 * when computing cumulative probabilities and statistics.&lt;/p&gt;</text>
    <version>$Id: EnumeratedRealDistribution.java 1456769 2013-03-15 04:51:34Z psteitz $</version>
    <since>3.2</since>
  </javadoc>
  <javadoc>
    <text>Serializable UID.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>{@link EnumeratedDistribution} (using the {@link Double} wrapper)
 * used to generate the pmf.</text>
  </javadoc>
  <declaration type="EnumeratedDistribution&lt;Double&gt;" name="innerDistribution" />
  <javadoc>
    <text>Create a discrete distribution using the given probability mass function
 * enumeration.</text>
    <param>singletons array of random variable values.</param>
    <param>probabilities array of probabilities.</param>
    <throws>DimensionMismatchException if{@code singletons.length != probabilities.length}</throws>
    <throws>NotPositiveException if any of the probabilities are negative.</throws>
    <throws>NotFiniteNumberException if any of the probabilities are infinite.</throws>
    <throws>NotANumberException if any of the probabilities are NaN.</throws>
    <throws>MathArithmeticException all of the probabilities are 0.</throws>
  </javadoc>
  <method type="constructor" name="EnumeratedRealDistribution" />
  <javadoc>
    <text>Create a discrete distribution using the given random number generator
 * and probability mass function enumeration.</text>
    <param>rng random number generator.</param>
    <param>singletons array of random variable values.</param>
    <param>probabilities array of probabilities.</param>
    <throws>DimensionMismatchException if{@code singletons.length != probabilities.length}</throws>
    <throws>NotPositiveException if any of the probabilities are negative.</throws>
    <throws>NotFiniteNumberException if any of the probabilities are infinite.</throws>
    <throws>NotANumberException if any of the probabilities are NaN.</throws>
    <throws>MathArithmeticException all of the probabilities are 0.</throws>
  </javadoc>
  <method type="constructor" name="EnumeratedRealDistribution">
    <scope />
    <declaration type="List&lt;Pair&lt;Double,Double&gt;&gt;" name="samples" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="probability" />
  <javadoc>
    <text>For a random variable {@code X} whose values are distributed according to
 * this distribution, this method returns {@code P(X = x)}. In other words,
 * this method represents the probability mass function (PMF) for the
 * distribution.</text>
    <param>x the point at which the PMF is evaluated</param>
    <return>the value of the probability mass function at point {@code x}</return>
  </javadoc>
  <method type="double" name="density" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="cumulativeProbability">
    <declaration type="double" name="probability" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <return>{@code sum(singletons[i] * probabilities[i])}</return>
  </javadoc>
  <method type="double" name="getNumericalMean">
    <declaration type="double" name="mean" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <return>{@code sum((singletons[i] - mean) ^ 2 * probabilities[i])}</return>
  </javadoc>
  <method type="double" name="getNumericalVariance">
    <declaration type="double" name="mean" />
    <declaration type="double" name="meanOfSquares" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}Returns the lowest value with non-zero probability.</text>
    <return>the lowest value with non-zero probability.</return>
  </javadoc>
  <method type="double" name="getSupportLowerBound">
    <declaration type="double" name="min" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}Returns the highest value with non-zero probability.</text>
    <return>the highest value with non-zero probability.</return>
  </javadoc>
  <method type="double" name="getSupportUpperBound">
    <declaration type="double" name="max" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}The support of this distribution includes the lower bound.</text>
    <return>{@code true}</return>
  </javadoc>
  <method type="boolean" name="isSupportLowerBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}The support of this distribution includes the upper bound.</text>
    <return>{@code true}</return>
  </javadoc>
  <method type="boolean" name="isSupportUpperBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}The support of this distribution is connected.</text>
    <return>{@code true}</return>
  </javadoc>
  <method type="boolean" name="isSupportConnected" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="sample" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
