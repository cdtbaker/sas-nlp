<?xml version="1.0" encoding="UTF-8"?>
<class name="ISAACRandom">
  <javadoc>
    <text>&lt;a href="http://burtleburtle.net/bob/rand/isaacafa.html"&gt;
 * ISAAC: a fast cryptographic pseudo-random number generator&lt;/a&gt;
 * &lt;br/&gt;
 * ISAAC (Indirection, Shift, Accumulate, Add, and Count) generates 32-bit
 * random numbers.
 * ISAAC has been designed to be cryptographically secure and is inspired
 * by RC4.
 * Cycles are guaranteed to be at least 2&lt;sup&gt;40&lt;/sup&gt; values long, and they
 * are 2&lt;sup&gt;8295&lt;/sup&gt; values long on average.
 * The results are uniformly distributed, unbiased, and unpredictable unless
 * you know the seed.
 * &lt;br/&gt;
 * This code is based (with minor changes and improvements) on the original
 * implementation of the algorithm by Bob Jenkins.
 * &lt;br/&gt;</text>
    <version>$Id: ISAACRandom.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Log of size of rsl[] and mem[]</text>
  </javadoc>
  <declaration type="int" name="SIZE_L" />
  <javadoc>
    <text>Size of rsl[] and mem[]</text>
  </javadoc>
  <declaration type="int" name="SIZE" />
  <javadoc>
    <text>Half-size of rsl[] and mem[]</text>
  </javadoc>
  <declaration type="int" name="H_SIZE" />
  <javadoc>
    <text>For pseudo-random lookup</text>
  </javadoc>
  <declaration type="int" name="MASK" />
  <javadoc>
    <text>The golden ratio</text>
  </javadoc>
  <declaration type="int" name="GLD_RATIO" />
  <javadoc>
    <text>The results given to the user</text>
  </javadoc>
  <declaration type="int[]" name="rsl" />
  <javadoc>
    <text>The internal state</text>
  </javadoc>
  <declaration type="int[]" name="mem" />
  <javadoc>
    <text>Count through the results in rsl[]</text>
  </javadoc>
  <declaration type="int" name="count" />
  <javadoc>
    <text>Accumulator</text>
  </javadoc>
  <declaration type="int" name="isaacA" />
  <javadoc>
    <text>The last result</text>
  </javadoc>
  <declaration type="int" name="isaacB" />
  <javadoc>
    <text>Counter, guarantees cycle is at least 2^40</text>
  </javadoc>
  <declaration type="int" name="isaacC" />
  <javadoc>
    <text>Service variable.</text>
  </javadoc>
  <declaration type="int[]" name="arr" />
  <javadoc>
    <text>Service variable.</text>
  </javadoc>
  <declaration type="int" name="isaacX" />
  <javadoc>
    <text>Service variable.</text>
  </javadoc>
  <declaration type="int" name="isaacI" />
  <javadoc>
    <text>Service variable.</text>
  </javadoc>
  <declaration type="int" name="isaacJ" />
  <javadoc>
    <text>Creates a new ISAAC random number generator.
 * &lt;br/&gt;
 * The instance is initialized using a combination of the
 * current time and system hash code of the instance as the seed.</text>
  </javadoc>
  <method type="constructor" name="ISAACRandom" />
  <javadoc>
    <text>Creates a new ISAAC random number generator using a single long seed.</text>
    <param>seed Initial seed.</param>
  </javadoc>
  <method type="constructor" name="ISAACRandom" />
  <javadoc>
    <text>Creates a new ISAAC random number generator using an int array seed.</text>
    <param>seed Initial seed. If {@code null}, the seed will be related
 * to the current time.</param>
  </javadoc>
  <method type="constructor" name="ISAACRandom" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setSeed" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setSeed" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setSeed">
    <scope />
    <declaration type="int" name="seedLen" />
    <declaration type="int" name="rslLen" />
    <scope>
      <scope>
        <declaration type="long" name="k" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="next">
    <scope />
  </method>
  <javadoc>
    <text>Generate 256 results</text>
  </javadoc>
  <method type="void" name="isaac">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Intermediate internal loop.</text>
  </javadoc>
  <method type="void" name="isaac2" />
  <javadoc>
    <text>Lowest level internal loop.</text>
  </javadoc>
  <method type="void" name="isaac3" />
  <javadoc>
    <text>Initialize, or reinitialize, this instance of rand.</text>
  </javadoc>
  <method type="void" name="initState">
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>fill in mem[] with messy stuff</comment>
    <comment>second pass makes all of seed affect all of mem</comment>
  </method>
  <javadoc>
    <text>Shuffle array.</text>
  </javadoc>
  <method type="void" name="shuffle" />
  <javadoc>
    <text>Set the state by copying the internal arrays.</text>
    <param>start First index into {@link #mem} array.</param>
  </javadoc>
  <method type="void" name="setState" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
