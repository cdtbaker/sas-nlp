<?xml version="1.0" encoding="UTF-8"?>
<class name="BOBYQAOptimizer">
  <javadoc>
    <text>Powell's BOBYQA algorithm. This implementation is translated and
 * adapted from the Fortran version available
 * &lt;a href="http://plato.asu.edu/ftp/other_software/bobyqa.zip"&gt;here&lt;/a&gt;.
 * See &lt;a href="http://www.optimization-online.org/DB_HTML/2010/05/2616.html"&gt;
 * this paper&lt;/a&gt; for an introduction.
 * &lt;br/&gt;
 * BOBYQA is particularly well suited for high dimensional problems
 * where derivatives are not available. In most cases it outperforms the{@link PowellOptimizer} significantly. Stochastic algorithms like{@link CMAESOptimizer} succeed more often than BOBYQA, but are more
 * expensive. BOBYQA could also be considered as a replacement of any
 * derivative-based optimizer when the derivatives are approximated by
 * finite differences.</text>
    <version>$Id: BOBYQAOptimizer.java 1462507 2013-03-29 15:50:22Z luc $</version>
    <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Minimum dimension of the problem: {@value}</text>
  </javadoc>
  <declaration type="int" name="MINIMUM_PROBLEM_DIMENSION" />
  <javadoc>
    <text>Default value for {@link #initialTrustRegionRadius}: {@value} .</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_INITIAL_RADIUS" />
  <javadoc>
    <text>Default value for {@link #stoppingTrustRegionRadius}: {@value} .</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_STOPPING_RADIUS" />
  <declaration type="double" name="ZERO" />
  <declaration type="double" name="ONE" />
  <declaration type="double" name="TWO" />
  <declaration type="double" name="TEN" />
  <declaration type="double" name="SIXTEEN" />
  <declaration type="double" name="TWO_HUNDRED_FIFTY" />
  <declaration type="double" name="MINUS_ONE" />
  <declaration type="double" name="HALF" />
  <declaration type="double" name="ONE_OVER_FOUR" />
  <declaration type="double" name="ONE_OVER_EIGHT" />
  <declaration type="double" name="ONE_OVER_TEN" />
  <declaration type="double" name="ONE_OVER_A_THOUSAND" />
  <javadoc>
    <text>numberOfInterpolationPoints XXX</text>
  </javadoc>
  <declaration type="int" name="numberOfInterpolationPoints" />
  <javadoc>
    <text>initialTrustRegionRadius XXX</text>
  </javadoc>
  <declaration type="double" name="initialTrustRegionRadius" />
  <javadoc>
    <text>stoppingTrustRegionRadius XXX</text>
  </javadoc>
  <declaration type="double" name="stoppingTrustRegionRadius" />
  <javadoc>
    <text>Goal type (minimize or maximize).</text>
  </javadoc>
  <declaration type="boolean" name="isMinimize" />
  <javadoc>
    <text>Current best values for the variables to be optimized.
 * The vector will be changed in-place to contain the values of the least
 * calculated objective function values.</text>
  </javadoc>
  <declaration type="ArrayRealVector" name="currentBest" />
  <javadoc>
    <text>Differences between the upper and lower bounds.</text>
  </javadoc>
  <declaration type="double[]" name="boundDifference" />
  <javadoc>
    <text>Index of the interpolation point at the trust region center.</text>
  </javadoc>
  <declaration type="int" name="trustRegionCenterInterpolationPointIndex" />
  <javadoc>
    <text>Last &lt;em&gt;n&lt;/em&gt; columns of matrix H (where &lt;em&gt;n&lt;/em&gt; is the dimension
 * of the problem).
 * XXX "bmat" in the original code.</text>
  </javadoc>
  <declaration type="Array2DRowRealMatrix" name="bMatrix" />
  <javadoc>
    <text>Factorization of the leading &lt;em&gt;npt&lt;/em&gt; square submatrix of H, this
 * factorization being Z Z&lt;sup&gt;T&lt;/sup&gt;, which provides both the correct
 * rank and positive semi-definiteness.
 * XXX "zmat" in the original code.</text>
  </javadoc>
  <declaration type="Array2DRowRealMatrix" name="zMatrix" />
  <javadoc>
    <text>Coordinates of the interpolation points relative to {@link #originShift}.
 * XXX "xpt" in the original code.</text>
  </javadoc>
  <declaration type="Array2DRowRealMatrix" name="interpolationPoints" />
  <javadoc>
    <text>Shift of origin that should reduce the contributions from rounding
 * errors to values of the model and Lagrange functions.
 * XXX "xbase" in the original code.</text>
  </javadoc>
  <declaration type="ArrayRealVector" name="originShift" />
  <javadoc>
    <text>Values of the objective function at the interpolation points.
 * XXX "fval" in the original code.</text>
  </javadoc>
  <declaration type="ArrayRealVector" name="fAtInterpolationPoints" />
  <javadoc>
    <text>Displacement from {@link #originShift} of the trust region center.
 * XXX "xopt" in the original code.</text>
  </javadoc>
  <declaration type="ArrayRealVector" name="trustRegionCenterOffset" />
  <javadoc>
    <text>Gradient of the quadratic model at {@link #originShift} +{@link #trustRegionCenterOffset}.
 * XXX "gopt" in the original code.</text>
  </javadoc>
  <declaration type="ArrayRealVector" name="gradientAtTrustRegionCenter" />
  <javadoc>
    <text>Differences {@link #getLowerBound()} - {@link #originShift}.
 * All the components of every {@link #trustRegionCenterOffset} are going
 * to satisfy the bounds&lt;br/&gt;{@link #getLowerBound() lowerBound}&lt;sub&gt;i&lt;/sub&gt; &amp;le;{@link #trustRegionCenterOffset}&lt;sub&gt;i&lt;/sub&gt;,&lt;br/&gt;
 * with appropriate equalities when {@link #trustRegionCenterOffset} is
 * on a constraint boundary.
 * XXX "sl" in the original code.</text>
  </javadoc>
  <declaration type="ArrayRealVector" name="lowerDifference" />
  <javadoc>
    <text>Differences {@link #getUpperBound()} - {@link #originShift}All the components of every {@link #trustRegionCenterOffset} are going
 * to satisfy the bounds&lt;br/&gt;{@link #trustRegionCenterOffset}&lt;sub&gt;i&lt;/sub&gt; &amp;le;{@link #getUpperBound() upperBound}&lt;sub&gt;i&lt;/sub&gt;,&lt;br/&gt;
 * with appropriate equalities when {@link #trustRegionCenterOffset} is
 * on a constraint boundary.
 * XXX "su" in the original code.</text>
  </javadoc>
  <declaration type="ArrayRealVector" name="upperDifference" />
  <javadoc>
    <text>Parameters of the implicit second derivatives of the quadratic model.
 * XXX "pq" in the original code.</text>
  </javadoc>
  <declaration type="ArrayRealVector" name="modelSecondDerivativesParameters" />
  <javadoc>
    <text>Point chosen by function {@link #trsbox(double,ArrayRealVector,ArrayRealVector,ArrayRealVector,ArrayRealVector,ArrayRealVector) trsbox}or {@link #altmov(int,double) altmov}.
 * Usually {@link #originShift} + {@link #newPoint} is the vector of
 * variables for the next evaluation of the objective function.
 * It also satisfies the constraints indicated in {@link #lowerDifference}and {@link #upperDifference}.
 * XXX "xnew" in the original code.</text>
  </javadoc>
  <declaration type="ArrayRealVector" name="newPoint" />
  <javadoc>
    <text>Alternative to {@link #newPoint}, chosen by{@link #altmov(int,double) altmov}.
 * It may replace {@link #newPoint} in order to increase the denominator
 * in the {@link #update(double,double,int) updating procedure}.
 * XXX "xalt" in the original code.</text>
  </javadoc>
  <declaration type="ArrayRealVector" name="alternativeNewPoint" />
  <javadoc>
    <text>Trial step from {@link #trustRegionCenterOffset} which is usually{@link #newPoint} - {@link #trustRegionCenterOffset}.
 * XXX "d__" in the original code.</text>
  </javadoc>
  <declaration type="ArrayRealVector" name="trialStepPoint" />
  <javadoc>
    <text>Values of the Lagrange functions at a new point.
 * XXX "vlag" in the original code.</text>
  </javadoc>
  <declaration type="ArrayRealVector" name="lagrangeValuesAtNewPoint" />
  <javadoc>
    <text>Explicit second derivatives of the quadratic model.
 * XXX "hq" in the original code.</text>
  </javadoc>
  <declaration type="ArrayRealVector" name="modelSecondDerivativesValues" />
  <javadoc>
    <param>numberOfInterpolationPoints Number of interpolation conditions.
 * For a problem of dimension {@code n}, its value must be in the interval{@code [n+2, (n+1)(n+2)/2]}.
 * Choices that exceed {@code 2n+1} are not recommended.</param>
  </javadoc>
  <method type="constructor" name="BOBYQAOptimizer" />
  <javadoc>
    <param>numberOfInterpolationPoints Number of interpolation conditions.
 * For a problem of dimension {@code n}, its value must be in the interval{@code [n+2, (n+1)(n+2)/2]}.
 * Choices that exceed {@code 2n+1} are not recommended.</param>
    <param>initialTrustRegionRadius Initial trust region radius.</param>
    <param>stoppingTrustRegionRadius Stopping trust region radius.</param>
  </javadoc>
  <method type="constructor" name="BOBYQAOptimizer">
    <comment>No custom convergence criterion.</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="PointValuePair" name="doOptimize">
    <declaration type="double[]" name="lowerBound" />
    <declaration type="double[]" name="upperBound" />
    <declaration type="double" name="value" />
    <comment>Validity checks.</comment>
  </method>
  <javadoc>
    <text>This subroutine seeks the least value of a function of many variables,
 * by applying a trust region method that forms quadratic models by
 * interpolation. There is usually some freedom in the interpolation
 * conditions, which is taken up by minimizing the Frobenius norm of
 * the change to the second derivative of the model, beginning with the
 * zero matrix. The values of the variables are constrained by upper and
 * lower bounds. The arguments of the subroutine are as follows.
 * N must be set to the number of variables and must be at least two.
 * NPT is the number of interpolation conditions. Its value must be in
 * the interval [N+2,(N+1)(N+2)/2]. Choices that exceed 2*N+1 are not
 * recommended.
 * Initial values of the variables must be set in X(1),X(2),...,X(N). They
 * will be changed to the values that give the least calculated F.
 * For I=1,2,...,N, XL(I) and XU(I) must provide the lower and upper
 * bounds, respectively, on X(I). The construction of quadratic models
 * requires XL(I) to be strictly less than XU(I) for each I. Further,
 * the contribution to a model from changes to the I-th variable is
 * damaged severely by rounding errors if XU(I)-XL(I) is too small.
 * RHOBEG and RHOEND must be set to the initial and final values of a trust
 * region radius, so both must be positive with RHOEND no greater than
 * RHOBEG. Typically, RHOBEG should be about one tenth of the greatest
 * expected change to a variable, while RHOEND should indicate the
 * accuracy that is required in the final values of the variables. An
 * error return occurs if any of the differences XU(I)-XL(I), I=1,...,N,
 * is less than 2*RHOBEG.
 * MAXFUN must be set to an upper bound on the number of calls of CALFUN.
 * The array W will be used for working space. Its length must be at least
 * (NPT+5)*(NPT+N)+3*N*(N+5)/2.</text>
    <param>lowerBound Lower bounds.</param>
    <param>upperBound Upper bounds.</param>
    <return>the value of the objective at the optimum.</return>
  </javadoc>
  <method type="double" name="bobyqa">
    <declaration type="int" name="n" />
    <scope>
      <declaration type="double" name="boundDiff" />
      <scope>
        <scope />
        <scope>
          <declaration type="double" name="deltaOne" />
        </scope>
      </scope>
      <scope>
        <scope />
        <scope>
          <declaration type="double" name="deltaOne" />
          <declaration type="double" name="deltaTwo" />
        </scope>
      </scope>
    </scope>
    <comment>XXX</comment>
    <comment>Return if there is insufficient space between the bounds. Modify the</comment>
    <comment>initial X if necessary in order to avoid conflicts between the bounds</comment>
    <comment>and the construction of the first quadratic model. The lower and upper</comment>
    <comment>bounds on moves from the updated X are set now, in the ISL and ISU</comment>
    <comment>partitions of W, in order to provide useful and exact information about</comment>
    <comment>components of X that become within distance RHOBEG from their bounds.</comment>
    <comment>Computing MAX</comment>
    <comment>Computing MIN</comment>
    <comment>Make the call of BOBYQB.</comment>
    <comment>bobyqa</comment>
  </method>
  <javadoc>
    <text>The arguments N, NPT, X, XL, XU, RHOBEG, RHOEND, IPRINT and MAXFUN
 * are identical to the corresponding arguments in SUBROUTINE BOBYQA.
 * XBASE holds a shift of origin that should reduce the contributions
 * from rounding errors to values of the model and Lagrange functions.
 * XPT is a two-dimensional array that holds the coordinates of the
 * interpolation points relative to XBASE.
 * FVAL holds the values of F at the interpolation points.
 * XOPT is set to the displacement from XBASE of the trust region centre.
 * GOPT holds the gradient of the quadratic model at XBASE+XOPT.
 * HQ holds the explicit second derivatives of the quadratic model.
 * PQ contains the parameters of the implicit second derivatives of the
 * quadratic model.
 * BMAT holds the last N columns of H.
 * ZMAT holds the factorization of the leading NPT by NPT submatrix of H,
 * this factorization being ZMAT times ZMAT^T, which provides both the
 * correct rank and positive semi-definiteness.
 * NDIM is the first dimension of BMAT and has the value NPT+N.
 * SL and SU hold the differences XL-XBASE and XU-XBASE, respectively.
 * All the components of every XOPT are going to satisfy the bounds
 * SL(I) .LEQ. XOPT(I) .LEQ. SU(I), with appropriate equalities when
 * XOPT is on a constraint boundary.
 * XNEW is chosen by SUBROUTINE TRSBOX or ALTMOV. Usually XBASE+XNEW is the
 * vector of variables for the next call of CALFUN. XNEW also satisfies
 * the SL and SU constraints in the way that has just been mentioned.
 * XALT is an alternative to XNEW, chosen by ALTMOV, that may replace XNEW
 * in order to increase the denominator in the updating of UPDATE.
 * D is reserved for a trial step from XOPT, which is usually XNEW-XOPT.
 * VLAG contains the values of the Lagrange functions at a new point X.
 * They are part of a product that requires VLAG to be of length NDIM.
 * W is a one-dimensional array that is used for working space. Its length
 * must be at least 3*NDIM = 3*(NPT+N).</text>
    <param>lowerBound Lower bounds.</param>
    <param>upperBound Upper bounds.</param>
    <return>the value of the objective at the optimum.</return>
  </javadoc>
  <method type="double" name="bobyqb">
    <declaration type="int" name="n" />
    <declaration type="int" name="npt" />
    <declaration type="int" name="np" />
    <declaration type="int" name="nptm" />
    <declaration type="int" name="nh" />
    <declaration type="ArrayRealVector" name="work1" />
    <declaration type="ArrayRealVector" name="work2" />
    <declaration type="ArrayRealVector" name="work3" />
    <declaration type="double" name="cauchy" />
    <declaration type="double" name="alpha" />
    <declaration type="double" name="dsq" />
    <declaration type="double" name="crvmin" />
    <declaration type="double" name="xoptsq" />
    <scope>
      <declaration type="double" name="deltaOne" />
    </scope>
    <declaration type="double" name="fsave" />
    <declaration type="int" name="kbase" />
    <declaration type="int" name="ntrits" />
    <declaration type="int" name="itest" />
    <declaration type="int" name="knew" />
    <declaration type="int" name="nfsav" />
    <declaration type="double" name="rho" />
    <declaration type="double" name="delta" />
    <declaration type="double" name="diffa" />
    <declaration type="double" name="diffb" />
    <declaration type="double" name="diffc" />
    <declaration type="double" name="f" />
    <declaration type="double" name="beta" />
    <declaration type="double" name="adelt" />
    <declaration type="double" name="denom" />
    <declaration type="double" name="ratio" />
    <declaration type="double" name="dnorm" />
    <declaration type="double" name="scaden" />
    <declaration type="double" name="biglsq" />
    <declaration type="double" name="distsq" />
    <declaration type="int" name="state" />
    <scope>
      <scope>
        <declaration type="int" name="ih" />
        <scope>
          <scope>
            <scope />
          </scope>
        </scope>
        <scope>
          <scope>
            <declaration type="double" name="temp" />
            <scope />
            <scope />
          </scope>
        </scope>
      </scope>
    </scope>
    <scope>
      <declaration type="ArrayRealVector" name="gnew" />
      <declaration type="ArrayRealVector" name="xbdi" />
      <declaration type="ArrayRealVector" name="s" />
      <declaration type="ArrayRealVector" name="hs" />
      <declaration type="ArrayRealVector" name="hred" />
      <declaration type="double[]" name="dsqCrvmin" />
      <declaration type="double" name="deltaOne" />
      <declaration type="double" name="deltaTwo" />
      <scope>
        <scope />
        <declaration type="double" name="errbig" />
        <declaration type="double" name="frhosq" />
        <scope />
        <declaration type="double" name="bdtol" />
        <scope>
          <declaration type="double" name="bdtest" />
          <scope />
          <scope />
          <scope>
            <declaration type="double" name="curv" />
            <scope>
              <declaration type="double" name="d1" />
            </scope>
            <scope />
          </scope>
        </scope>
      </scope>
    </scope>
    <scope>
      <scope>
        <declaration type="double" name="fracsq" />
        <declaration type="double" name="sumpq" />
        <scope>
          <declaration type="double" name="sum" />
          <scope />
          <declaration type="double" name="temp" />
          <scope>
            <declaration type="int" name="ip" />
            <scope />
          </scope>
        </scope>
        <scope>
          <declaration type="double" name="sumz" />
          <declaration type="double" name="sumw" />
          <scope />
          <scope>
            <declaration type="double" name="sum" />
            <scope />
            <scope />
          </scope>
          <scope>
            <declaration type="int" name="ip" />
            <declaration type="double" name="temp" />
            <scope />
          </scope>
        </scope>
        <declaration type="int" name="ih" />
        <scope>
          <scope />
          <scope />
        </scope>
        <scope />
      </scope>
      <scope />
    </scope>
    <scope>
      <declaration type="double[]" name="alphaCauchy" />
      <scope />
    </scope>
    <scope>
      <scope>
        <declaration type="double" name="suma" />
        <declaration type="double" name="sumb" />
        <declaration type="double" name="sum" />
        <scope />
      </scope>
      <scope>
        <declaration type="double" name="sum" />
        <scope />
        <scope />
      </scope>
      <declaration type="double" name="bsum" />
      <declaration type="double" name="dx" />
      <scope>
        <declaration type="double" name="d1" />
        <declaration type="double" name="sum" />
        <scope />
        <declaration type="int" name="jp" />
        <scope />
      </scope>
      <scope>
        <declaration type="double" name="d1" />
        <scope>
          <scope />
        </scope>
      </scope>
      <scope>
        <declaration type="double" name="delsq" />
        <scope>
          <scope />
          <declaration type="double" name="hdiag" />
          <scope>
            <declaration type="double" name="d1" />
          </scope>
          <declaration type="double" name="d2" />
          <declaration type="double" name="den" />
          <scope>
            <declaration type="double" name="d3" />
          </scope>
          <declaration type="double" name="d4" />
          <declaration type="double" name="temp" />
          <scope />
          <declaration type="double" name="d5" />
        </scope>
      </scope>
    </scope>
    <scope>
      <scope>
        <declaration type="double" name="d3" />
        <declaration type="double" name="d4" />
        <declaration type="double" name="d1" />
        <declaration type="double" name="d2" />
        <scope />
        <scope />
      </scope>
      <scope />
      <declaration type="double" name="fopt" />
      <declaration type="double" name="vquad" />
      <declaration type="int" name="ih" />
      <scope>
        <scope>
          <declaration type="double" name="temp" />
          <scope />
        </scope>
      </scope>
      <scope>
        <declaration type="double" name="d1" />
        <declaration type="double" name="d2" />
      </scope>
      <declaration type="double" name="diff" />
      <scope />
      <scope>
        <scope />
        <declaration type="double" name="hDelta" />
        <scope />
        <scope />
        <scope />
        <scope />
        <scope>
          <declaration type="int" name="ksav" />
          <declaration type="double" name="densav" />
          <declaration type="double" name="delsq" />
          <scope>
            <declaration type="double" name="hdiag" />
            <scope>
              <declaration type="double" name="d1" />
            </scope>
            <declaration type="double" name="d1" />
            <declaration type="double" name="den" />
            <scope>
              <declaration type="double" name="d2" />
            </scope>
            <declaration type="double" name="d3" />
            <declaration type="double" name="temp" />
            <scope />
            <declaration type="double" name="d4" />
            <declaration type="double" name="d5" />
          </scope>
          <scope />
        </scope>
      </scope>
      <declaration type="double" name="pqold" />
      <scope>
        <declaration type="double" name="temp" />
        <scope />
      </scope>
      <scope>
        <declaration type="double" name="temp" />
        <scope />
      </scope>
      <scope />
      <scope>
        <declaration type="double" name="suma" />
        <scope />
        <declaration type="double" name="sumb" />
        <scope />
        <declaration type="double" name="temp" />
        <scope />
      </scope>
      <scope />
      <scope>
        <scope>
          <declaration type="double" name="d1" />
          <scope>
            <scope />
          </scope>
        </scope>
        <scope>
          <declaration type="double" name="temp" />
          <scope />
          <scope />
        </scope>
      </scope>
      <scope>
        <scope />
        <scope>
          <declaration type="double" name="sum" />
          <scope />
          <scope />
        </scope>
        <scope>
          <declaration type="double" name="sum" />
          <scope />
        </scope>
        <declaration type="double" name="gqsq" />
        <declaration type="double" name="gisq" />
        <scope>
          <declaration type="double" name="sum" />
          <scope />
          <scope>
            <declaration type="double" name="d1" />
            <declaration type="double" name="d2" />
          </scope>
          <scope>
            <declaration type="double" name="d1" />
            <declaration type="double" name="d2" />
          </scope>
          <scope>
            <declaration type="double" name="d1" />
          </scope>
        </scope>
        <scope />
        <scope>
          <scope>
            <scope />
            <scope />
            <scope />
          </scope>
        </scope>
      </scope>
      <scope />
      <scope />
      <declaration type="double" name="d1" />
      <declaration type="double" name="d2" />
    </scope>
    <scope>
      <scope>
        <declaration type="double" name="sum" />
        <scope>
          <declaration type="double" name="d1" />
        </scope>
        <scope />
      </scope>
      <scope>
        <declaration type="double" name="dist" />
        <scope>
          <scope />
        </scope>
        <declaration type="double" name="d1" />
      </scope>
      <scope />
      <scope />
      <scope />
    </scope>
    <scope>
      <scope>
        <scope />
        <scope />
        <scope />
      </scope>
      <scope />
    </scope>
    <scope>
      <scope>
        <scope>
          <declaration type="double" name="d3" />
          <declaration type="double" name="d4" />
          <declaration type="double" name="d1" />
          <declaration type="double" name="d2" />
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
    <scope />
    <comment>XXX</comment>
    <comment>Set some constants.</comment>
    <comment>Parameter adjustments</comment>
    <comment>Function Body</comment>
    <comment>The call of PRELIM sets the elements of XBASE, XPT, FVAL, GOPT, HQ, PQ,</comment>
    <comment>BMAT and ZMAT for the first iteration, with the corresponding values of</comment>
    <comment>of NF and KOPT, which are the number of calls of CALFUN so far and the</comment>
    <comment>index of the interpolation point at the trust region centre. Then the</comment>
    <comment>initial XOPT is set too. The branch to label 720 occurs if MAXFUN is</comment>
    <comment>less than NPT. GOPT will be updated if KOPT is different from KBASE.</comment>
    <comment>Computing 2nd power</comment>
    <comment>Complete the settings that are required for the iterative procedure.</comment>
    <comment>Update GOPT if necessary before the first iteration and after each</comment>
    <comment>call of RESCUE that makes a call of CALFUN.</comment>
    <comment>XXX</comment>
    <comment>throw new PathIsExploredException();  XXX</comment>
    <comment>Generate the next point in the trust region that provides a small value</comment>
    <comment>of the quadratic model subject to the constraints on the variables.</comment>
    <comment>The int NTRITS is set to the number "trust region" iterations that</comment>
    <comment>have occurred since the last "alternative" iteration. If the length</comment>
    <comment>of XNEW-XOPT is less than HALF*RHO, however, then there is a branch to</comment>
    <comment>label 650 or 680 with NTRITS=-1, instead of calculating F at XNEW.</comment>
    <comment>XXX</comment>
    <comment>Computing MIN</comment>
    <comment>Computing 2nd power</comment>
    <comment>The following choice between labels 650 and 680 depends on whether or</comment>
    <comment>not our work with the current RHO seems to be complete. Either RHO is</comment>
    <comment>decreased or termination occurs if the errors in the quadratic model at</comment>
    <comment>the last three interpolation points compare favourably with predictions</comment>
    <comment>of likely improvements to the model within distance HALF*RHO of XOPT.</comment>
    <comment>Computing MAX</comment>
    <comment>Computing 2nd power</comment>
    <comment>throw new PathIsExploredException();  XXX</comment>
    <comment>Severe cancellation is likely to occur if XOPT is too far from XBASE.</comment>
    <comment>If the following test holds, then XBASE is shifted so that XOPT becomes</comment>
    <comment>zero. The appropriate changes are made to BMAT and to the second</comment>
    <comment>derivatives of the current model, beginning with the changes to BMAT</comment>
    <comment>that do not depend on ZMAT. VLAG is used temporarily for working space.</comment>
    <comment>XXX</comment>
    <comment>final RealVector sumVector</comment>
    <comment>= new ArrayRealVector(npt, -HALF * xoptsq).add(interpolationPoints.operate(trustRegionCenter));</comment>
    <comment>sum = sumVector.getEntry(k);  XXX "testAckley" and "testDiffPow" fail.</comment>
    <comment>Then the revisions of BMAT that depend on ZMAT are calculated.</comment>
    <comment>The following instructions complete the shift, including the changes</comment>
    <comment>to the second derivative parameters of the quadratic model.</comment>
    <comment>XBASE is also moved to XOPT by a call of RESCUE. This calculation is</comment>
    <comment>more expensive than the previous shift, because new matrices BMAT and</comment>
    <comment>ZMAT are generated from scratch, which may include the replacement of</comment>
    <comment>interpolation points whose positions seem to be causing near linear</comment>
    <comment>dependence in the interpolation conditions. Therefore RESCUE is called</comment>
    <comment>only if rounding errors have reduced by at least a factor of two the</comment>
    <comment>denominator of the formula for updating the H matrix. It provides a</comment>
    <comment>useful safeguard, but is not invoked in most applications of BOBYQA.</comment>
    <comment>XXX</comment>
    <comment>Pick two alternative vectors of variables, relative to XBASE, that</comment>
    <comment>are suitable as new positions of the KNEW-th interpolation point.</comment>
    <comment>Firstly, XNEW is set to the point on a line through XOPT and another</comment>
    <comment>interpolation point that minimizes the predicted value of the next</comment>
    <comment>denominator, subject to ||XNEW - XOPT|| .LEQ. ADELT and to the SL</comment>
    <comment>and SU bounds. Secondly, XALT is set to the best feasible point on</comment>
    <comment>a constrained version of the Cauchy step of the KNEW-th Lagrange</comment>
    <comment>function, the corresponding value of the square of this function</comment>
    <comment>being returned in CAUCHY. The choice between these alternatives is</comment>
    <comment>going to be made when the denominator is calculated.</comment>
    <comment>Calculate VLAG and BETA for the current choice of D. The scalar</comment>
    <comment>product of D with XPT(K,.) is going to be held in W(NPT+K) for</comment>
    <comment>use when VQUAD is calculated.</comment>
    <comment>XXX</comment>
    <comment>Computing 2nd power</comment>
    <comment>Original</comment>
    <comment>beta += dx * dx + dsq * (xoptsq + dx + dx + HALF * dsq) - bsum;  XXX "testAckley" and "testDiffPow" fail.</comment>
    <comment>beta = dx * dx + dsq * (xoptsq + 2 * dx + HALF * dsq) + beta - bsum;  XXX "testDiffPow" fails.</comment>
    <comment>If NTRITS is zero, the denominator may be increased by replacing</comment>
    <comment>the step D of ALTMOV by a Cauchy step. Then RESCUE may be called if</comment>
    <comment>rounding errors have damaged the chosen denominator.</comment>
    <comment>Computing 2nd power</comment>
    <comment>XXX Useful statement?</comment>
    <comment>Alternatively, if NTRITS is positive, then set KNEW to the index of</comment>
    <comment>the next interpolation point to be deleted to make room for a trust</comment>
    <comment>region step. Again RESCUE may be called if rounding errors have damaged_</comment>
    <comment>the chosen denominator, which is the reason for attempting to select</comment>
    <comment>KNEW before calculating the next value of the objective function.</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing MAX</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing MAX</comment>
    <comment>Computing 2nd power</comment>
    <comment>Put the variables for the next calculation of the objective function</comment>
    <comment>in XNEW, with any adjustments for the bounds.</comment>
    <comment>Calculate the value of the objective function at XBASE+XNEW, unless</comment>
    <comment>the limit on the number of calculations of F has been reached.</comment>
    <comment>XXX</comment>
    <comment>Computing MIN</comment>
    <comment>Computing MAX</comment>
    <comment>Use the quadratic model to predict the change in F due to the step D,</comment>
    <comment>and set DIFF to the error of this prediction.</comment>
    <comment>Computing 2nd power</comment>
    <comment>"d1" must be squared first to prevent test failures.</comment>
    <comment>Pick the next value of DELTA after a trust region step.</comment>
    <comment>Computing MIN</comment>
    <comment>Computing MAX</comment>
    <comment>Computing MAX</comment>
    <comment>Recalculate KNEW and DENOM if the new F is less than FOPT.</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing MAX</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing MAX</comment>
    <comment>Computing 2nd power</comment>
    <comment>Update BMAT and ZMAT, so that the KNEW-th interpolation point can be</comment>
    <comment>moved. Also update the second derivative terms of the model.</comment>
    <comment>Include the new interpolation point, and make the changes to GOPT at</comment>
    <comment>the old XOPT that are caused by the updating of the quadratic model.</comment>
    <comment>Update XOPT, GOPT and KOPT if the new calculated F is less than FOPT.</comment>
    <comment>Computing 2nd power</comment>
    <comment>Calculate the parameters of the least Frobenius norm interpolant to</comment>
    <comment>the current data, the gradient of this interpolant at XOPT being put</comment>
    <comment>into VLAG(NPT+I), I=1,2,...,N.</comment>
    <comment>Computing MIN</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing MAX</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing 2nd power</comment>
    <comment>Test whether to replace the new quadratic model by the least Frobenius</comment>
    <comment>norm interpolant, making the replacement if the test is satisfied.</comment>
    <comment>If a trust region step has provided a sufficient decrease in F, then</comment>
    <comment>branch for another trust region calculation. The case NTRITS=0 occurs</comment>
    <comment>when the new interpolation point was reached by an alternative step.</comment>
    <comment>Alternatively, find out if the interpolation points are close enough</comment>
    <comment>to the best point so far.</comment>
    <comment>Computing MAX</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing 2nd power</comment>
    <comment>XXX</comment>
    <comment>Computing 2nd power</comment>
    <comment>If KNEW is positive, then ALTMOV finds alternative new positions for</comment>
    <comment>the KNEW-th interpolation point within distance ADELT of XOPT. It is</comment>
    <comment>reached via label 90. Otherwise, there is a branch to label 60 for</comment>
    <comment>another trust region iteration, unless the calculations with the</comment>
    <comment>current RHO are complete.</comment>
    <comment>Computing MIN</comment>
    <comment>Computing MAX</comment>
    <comment>Computing MIN</comment>
    <comment>The calculations with the current value of RHO are complete. Pick the</comment>
    <comment>next values of RHO and DELTA.</comment>
    <comment>XXX</comment>
    <comment>Return from the calculation, after another Newton-Raphson step, if</comment>
    <comment>it is too short to have been tried before.</comment>
    <comment>XXX</comment>
    <comment>Computing MIN</comment>
    <comment>Computing MAX</comment>
    <comment>bobyqb</comment>
  </method>
  <javadoc>
    <text>The arguments N, NPT, XPT, XOPT, BMAT, ZMAT, NDIM, SL and SU all have
 * the same meanings as the corresponding arguments of BOBYQB.
 * KOPT is the index of the optimal interpolation point.
 * KNEW is the index of the interpolation point that is going to be moved.
 * ADELT is the current trust region bound.
 * XNEW will be set to a suitable new position for the interpolation point
 * XPT(KNEW,.). Specifically, it satisfies the SL, SU and trust region
 * bounds and it should provide a large denominator in the next call of
 * UPDATE. The step XNEW-XOPT from XOPT is restricted to moves along the
 * straight lines through XOPT and another interpolation point.
 * XALT also provides a large value of the modulus of the KNEW-th Lagrange
 * function subject to the constraints that have been mentioned, its main
 * difference from XNEW being that XALT-XOPT is a constrained version of
 * the Cauchy step within the trust region. An exception is that XALT is
 * not calculated if all components of GLAG (see below) are zero.
 * ALPHA will be set to the KNEW-th diagonal element of the H matrix.
 * CAUCHY will be set to the square of the KNEW-th Lagrange function at
 * the step XALT-XOPT from XOPT for the vector XALT that is returned,
 * except that CAUCHY is set to zero if XALT is not calculated.
 * GLAG is a working space vector of length N for the gradient of the
 * KNEW-th Lagrange function at XOPT.
 * HCOL is a working space vector of length NPT for the second derivative
 * coefficients of the KNEW-th Lagrange function.
 * W is a working space vector of length 2N that is going to hold the
 * constrained Cauchy step from XOPT of the Lagrange function, followed
 * by the downhill version of XALT when the uphill step is calculated.
 * Set the first NPT components of W to the leading elements of the
 * KNEW-th column of the H matrix.</text>
    <param>knew</param>
    <param>adelt</param>
  </javadoc>
  <method type="double[]" name="altmov">
    <declaration type="int" name="n" />
    <declaration type="int" name="npt" />
    <declaration type="ArrayRealVector" name="glag" />
    <declaration type="ArrayRealVector" name="hcol" />
    <declaration type="ArrayRealVector" name="work1" />
    <declaration type="ArrayRealVector" name="work2" />
    <scope />
    <scope>
      <declaration type="double" name="tmp" />
      <scope />
    </scope>
    <declaration type="double" name="alpha" />
    <declaration type="double" name="ha" />
    <scope />
    <scope>
      <declaration type="double" name="tmp" />
      <scope />
      <scope />
    </scope>
    <declaration type="double" name="presav" />
    <declaration type="double" name="step" />
    <declaration type="int" name="ksav" />
    <declaration type="int" name="ibdsav" />
    <declaration type="double" name="stpsav" />
    <scope>
      <scope />
      <declaration type="double" name="dderiv" />
      <declaration type="double" name="distsq" />
      <scope>
        <declaration type="double" name="tmp" />
      </scope>
      <declaration type="double" name="subd" />
      <declaration type="double" name="slbd" />
      <declaration type="int" name="ilbd" />
      <declaration type="int" name="iubd" />
      <declaration type="double" name="sumin" />
      <scope>
        <declaration type="double" name="tmp" />
        <scope>
          <scope />
          <scope />
        </scope>
        <scope>
          <scope />
          <scope />
        </scope>
      </scope>
      <declaration type="int" name="isbd" />
      <declaration type="double" name="vlag" />
      <scope>
        <declaration type="double" name="diff" />
        <declaration type="double" name="d1" />
        <scope />
        <declaration type="double" name="d2" />
        <declaration type="double" name="d3" />
        <declaration type="double" name="d4" />
        <scope>
          <declaration type="double" name="d5" />
          <scope />
        </scope>
      </scope>
      <scope>
        <declaration type="double" name="tmp" />
        <scope />
        <scope />
      </scope>
      <declaration type="double" name="tmp" />
      <declaration type="double" name="predsq" />
      <scope />
    </scope>
    <scope>
      <declaration type="double" name="tmp" />
    </scope>
    <scope />
    <scope />
    <declaration type="double" name="bigstp" />
    <declaration type="int" name="iflag" />
    <declaration type="double" name="cauchy" />
    <declaration type="double" name="csave" />
    <scope>
      <declaration type="double" name="wfixsq" />
      <declaration type="double" name="ggfree" />
      <scope>
        <declaration type="double" name="glagValue" />
        <scope />
      </scope>
      <scope />
      <declaration type="double" name="tmp1" />
      <scope>
        <scope>
          <scope>
            <declaration type="double" name="tmp2" />
            <scope>
              <declaration type="double" name="d1" />
            </scope>
            <scope>
              <declaration type="double" name="d1" />
            </scope>
            <scope>
              <declaration type="double" name="d1" />
            </scope>
          </scope>
        </scope>
      </scope>
      <declaration type="double" name="gw" />
      <scope>
        <declaration type="double" name="glagValue" />
        <scope>
          <declaration type="double" name="min" />
        </scope>
        <scope />
        <scope />
        <scope />
      </scope>
      <declaration type="double" name="curv" />
      <scope>
        <declaration type="double" name="tmp" />
        <scope />
      </scope>
      <scope />
      <scope>
        <declaration type="double" name="scale" />
        <scope>
          <declaration type="double" name="tmp" />
        </scope>
        <declaration type="double" name="d1" />
      </scope>
      <scope>
        <declaration type="double" name="d1" />
      </scope>
      <scope>
        <scope />
      </scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <comment>XXX</comment>
    <comment>Calculate the gradient of the KNEW-th Lagrange function at XOPT.</comment>
    <comment>Search for a large denominator along the straight lines through XOPT</comment>
    <comment>and another interpolation point. SLBD and SUBD will be lower and upper</comment>
    <comment>bounds on the step along each of these lines in turn. PREDSQ will be</comment>
    <comment>set to the square of the predicted denominator for each line. PRESAV</comment>
    <comment>will be set to the largest admissible value of PREDSQ that occurs.</comment>
    <comment>Revise SLBD and SUBD if necessary because of the bounds in SL and SU.</comment>
    <comment>Computing MAX</comment>
    <comment>Computing MAX</comment>
    <comment>Seek a large modulus of the KNEW-th Lagrange function when the index</comment>
    <comment>of the other interpolation point on the line through XOPT is KNEW.</comment>
    <comment>Search along each of the other lines through XOPT and another point.</comment>
    <comment>Calculate PREDSQ for the current line search and maintain PRESAV.</comment>
    <comment>Construct XNEW in a way that satisfies the bound constraints exactly.</comment>
    <comment>Prepare for the iterative method that assembles the constrained Cauchy</comment>
    <comment>step in W. The sum of squares of the fixed components of W is formed in</comment>
    <comment>WFIXSQ, and the free components of W are set to BIGSTP.</comment>
    <comment>Computing 2nd power</comment>
    <comment>Investigate whether more components of W can be fixed.</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing 2nd power</comment>
    <comment>Set the remaining free components of W and all components of XALT,</comment>
    <comment>except that W may be scaled later.</comment>
    <comment>Set CURV to the curvature of the KNEW-th Lagrange function along W.</comment>
    <comment>Scale W by a factor less than one if that can reduce the modulus of</comment>
    <comment>the Lagrange function at XOPT+W. Set CAUCHY to the final value of</comment>
    <comment>the square of this function.</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing 2nd power</comment>
    <comment>If IFLAG is zero, then XALT is calculated as before after reversing</comment>
    <comment>the sign of GLAG. Thus two XALT vectors become available. The one that</comment>
    <comment>is chosen is the one that gives the larger value of CAUCHY.</comment>
    <comment>altmov</comment>
  </method>
  <javadoc>
    <text>SUBROUTINE PRELIM sets the elements of XBASE, XPT, FVAL, GOPT, HQ, PQ,
 * BMAT and ZMAT for the first iteration, and it maintains the values of
 * NF and KOPT. The vector X is also changed by PRELIM.
 * The arguments N, NPT, X, XL, XU, RHOBEG, IPRINT and MAXFUN are the
 * same as the corresponding arguments in SUBROUTINE BOBYQA.
 * The arguments XBASE, XPT, FVAL, HQ, PQ, BMAT, ZMAT, NDIM, SL and SU
 * are the same as the corresponding arguments in BOBYQB, the elements
 * of SL and SU being set in BOBYQA.
 * GOPT is usually the gradient of the quadratic model at XOPT+XBASE, but
 * it is set by PRELIM to the gradient of the quadratic model at XBASE.
 * If XOPT is nonzero, BOBYQB will change it to its usual value later.
 * NF is maintaned as the number of calls of CALFUN so far.
 * KOPT will be such that the least calculated value of F so far is at
 * the point XPT(KOPT,.)+XBASE in the space of the variables.</text>
    <param>lowerBound Lower bounds.</param>
    <param>upperBound Upper bounds.</param>
  </javadoc>
  <method type="void" name="prelim">
    <declaration type="int" name="n" />
    <declaration type="int" name="npt" />
    <declaration type="int" name="ndim" />
    <declaration type="double" name="rhosq" />
    <declaration type="double" name="recip" />
    <declaration type="int" name="np" />
    <scope>
      <scope />
      <scope />
    </scope>
    <scope />
    <scope>
      <scope />
    </scope>
    <declaration type="int" name="ipt" />
    <declaration type="int" name="jpt" />
    <declaration type="double" name="fbeg" />
    <scope>
      <declaration type="int" name="nfm" />
      <declaration type="int" name="nfx" />
      <declaration type="int" name="nfmm" />
      <declaration type="int" name="nfxm" />
      <declaration type="double" name="stepa" />
      <declaration type="double" name="stepb" />
      <scope>
        <scope>
          <scope />
        </scope>
        <scope>
          <scope />
          <scope />
        </scope>
      </scope>
      <scope>
        <declaration type="int" name="tmp1" />
        <scope>
          <declaration type="int" name="tmp2" />
        </scope>
        <declaration type="int" name="iptMinus1" />
        <declaration type="int" name="jptMinus1" />
      </scope>
      <scope>
        <scope />
        <scope />
      </scope>
      <declaration type="double" name="objectiveValue" />
      <declaration type="double" name="f" />
      <declaration type="int" name="numEval" />
      <scope />
      <scope />
      <scope>
        <scope>
          <scope>
            <declaration type="double" name="oneOverStepA" />
          </scope>
        </scope>
        <scope>
          <declaration type="int" name="ih" />
          <declaration type="double" name="tmp" />
          <declaration type="double" name="diff" />
          <scope>
            <scope />
          </scope>
        </scope>
      </scope>
      <scope>
        <declaration type="int" name="ih" />
        <declaration type="double" name="tmp" />
      </scope>
    </scope>
    <comment>XXX</comment>
    <comment>Set XBASE to the initial vector of variables, and set the initial</comment>
    <comment>elements of XPT, BMAT, HQ, PQ and ZMAT to zero.</comment>
    <comment>Begin the initialization procedure. NF becomes one more than the number</comment>
    <comment>of function values so far. The coordinates of the displacement of the</comment>
    <comment>next initial interpolation point from XBASE are set in XPT(NF+1,.).</comment>
    <comment>throw new PathIsExploredException();  XXX</comment>
    <comment>throw new PathIsExploredException();  XXX</comment>
    <comment>throw new PathIsExploredException();  XXX</comment>
    <comment>throw new PathIsExploredException();  XXX</comment>
    <comment>Calculate the next value of F. The least function value so far and</comment>
    <comment>its index are required.</comment>
    <comment>nfm + 1</comment>
    <comment>Set the nonzero initial elements of BMAT and the quadratic model in the</comment>
    <comment>cases when NF is at most 2*N+1. If NF exceeds N+1, then the positions</comment>
    <comment>of the NF-th and (NF-N)-th interpolation points may be switched, in</comment>
    <comment>order that the function value at the first of them contributes to the</comment>
    <comment>off-diagonal second derivative terms of the initial quadratic model.</comment>
    <comment>throw new PathIsExploredException();  XXX</comment>
    <comment>zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) * recip);  XXX "testAckley" and "testDiffPow" fail.</comment>
    <comment>Set the off-diagonal second derivatives of the Lagrange functions and</comment>
    <comment>the initial quadratic model.</comment>
    <comment>throw new PathIsExploredException();  XXX</comment>
    <comment>prelim</comment>
  </method>
  <javadoc>
    <text>A version of the truncated conjugate gradient is applied. If a line
 * search is restricted by a constraint, then the procedure is restarted,
 * the values of the variables that are at their bounds being fixed. If
 * the trust region boundary is reached, then further changes may be made
 * to D, each one being in the two dimensional space that is spanned
 * by the current D and the gradient of Q at XOPT+D, staying on the trust
 * region boundary. Termination occurs when the reduction in Q seems to
 * be close to the greatest reduction that can be achieved.
 * The arguments N, NPT, XPT, XOPT, GOPT, HQ, PQ, SL and SU have the same
 * meanings as the corresponding arguments of BOBYQB.
 * DELTA is the trust region radius for the present calculation, which
 * seeks a small value of the quadratic model within distance DELTA of
 * XOPT subject to the bounds on the variables.
 * XNEW will be set to a new vector of variables that is approximately
 * the one that minimizes the quadratic model within the trust region
 * subject to the SL and SU constraints on the variables. It satisfies
 * as equations the bounds that become active during the calculation.
 * D is the calculated trial step from XOPT, generated iteratively from an
 * initial value of zero. Thus XNEW is XOPT+D after the final iteration.
 * GNEW holds the gradient of the quadratic model at XOPT+D. It is updated
 * when D is updated.
 * xbdi.get( is a working space vector. For I=1,2,...,N, the element xbdi.get((I) is
 * set to -1.0, 0.0, or 1.0, the value being nonzero if and only if the
 * I-th variable has become fixed at a bound, the bound being SL(I) or
 * SU(I) in the case xbdi.get((I)=-1.0 or xbdi.get((I)=1.0, respectively. This
 * information is accumulated during the construction of XNEW.
 * The arrays S, HS and HRED are also used for working space. They hold the
 * current search direction, and the changes in the gradient of Q along S
 * and the reduced D, respectively, where the reduced D is the same as D,
 * except that the components of the fixed variables are zero.
 * DSQ will be set to the square of the length of XNEW-XOPT.
 * CRVMIN is set to zero if D reaches the trust region boundary. Otherwise
 * it is set to the least curvature of H that occurs in the conjugate
 * gradient searches that are not restricted by any constraints. The
 * value CRVMIN=-1.0D0 is set, however, if all of these searches are
 * constrained.</text>
    <param>delta</param>
    <param>gnew</param>
    <param>xbdi</param>
    <param>s</param>
    <param>hs</param>
    <param>hred</param>
  </javadoc>
  <method type="double[]" name="trsbox">
    <declaration type="int" name="n" />
    <declaration type="int" name="npt" />
    <declaration type="double" name="dsq" />
    <declaration type="double" name="crvmin" />
    <declaration type="double" name="ds" />
    <declaration type="int" name="iu" />
    <declaration type="double" name="dhd" />
    <declaration type="int" name="iact" />
    <declaration type="int" name="nact" />
    <declaration type="double" name="angt" />
    <declaration type="int" name="isav" />
    <declaration type="double" name="temp" />
    <declaration type="int" name="iterc" />
    <declaration type="double" name="resid" />
    <declaration type="int" name="itcsav" />
    <declaration type="double" name="rdprev" />
    <declaration type="int" name="itermax" />
    <scope>
      <scope>
        <scope />
      </scope>
      <scope />
      <scope />
    </scope>
    <declaration type="int" name="state" />
    <scope>
      <scope />
      <scope>
        <scope>
          <scope />
          <scope />
          <scope />
          <declaration type="double" name="d1" />
        </scope>
        <scope />
        <scope />
        <scope />
      </scope>
      <scope>
        <scope>
          <scope>
            <declaration type="double" name="d1" />
          </scope>
        </scope>
        <scope />
        <scope />
        <scope />
        <scope />
        <scope>
          <scope>
            <scope />
            <scope />
            <scope />
          </scope>
        </scope>
        <scope>
          <scope>
            <scope />
          </scope>
          <scope>
            <scope>
              <declaration type="double" name="d1" />
            </scope>
          </scope>
          <declaration type="double" name="d1" />
        </scope>
        <scope>
          <scope />
          <declaration type="double" name="d1" />
          <scope />
        </scope>
        <scope>
          <scope />
          <scope />
        </scope>
      </scope>
      <scope />
      <scope>
        <scope />
        <scope>
          <scope>
            <declaration type="double" name="d1" />
          </scope>
          <scope />
        </scope>
      </scope>
      <scope>
        <scope />
        <scope>
          <scope />
          <scope />
        </scope>
        <scope>
          <scope>
            <scope />
            <scope />
            <declaration type="double" name="d1" />
            <declaration type="double" name="d2" />
            <scope>
              <scope />
            </scope>
            <scope>
              <scope />
            </scope>
          </scope>
        </scope>
      </scope>
      <scope>
        <scope>
          <scope />
        </scope>
        <scope>
          <scope />
          <scope />
        </scope>
        <scope />
        <scope />
        <scope />
        <scope>
          <scope>
            <declaration type="double" name="d1" />
          </scope>
        </scope>
        <scope />
        <scope />
      </scope>
      <scope>
        <scope>
          <declaration type="double" name="min" />
          <scope />
          <scope />
          <declaration type="double" name="d1" />
        </scope>
      </scope>
      <scope>
        <declaration type="int" name="ih" />
        <scope>
          <scope>
            <scope />
          </scope>
        </scope>
        <declaration type="RealVector" name="tmp" />
        <scope>
          <scope>
            <scope />
          </scope>
        </scope>
        <scope />
        <scope />
        <scope />
      </scope>
      <scope />
    </scope>
    <comment>XXX</comment>
    <comment>Local variables</comment>
    <comment>Set some constants.</comment>
    <comment>Function Body</comment>
    <comment>The sign of GOPT(I) gives the sign of the change to the I-th variable</comment>
    <comment>that will reduce Q from its value at XOPT. Thus xbdi.get((I) shows whether</comment>
    <comment>or not to fix the I-th variable at one of its bounds initially, with</comment>
    <comment>NACT being set to the number of fixed variables. D and GNEW are also</comment>
    <comment>set for the first iteration. DELSQ is the upper bound on the sum of</comment>
    <comment>squares of the free variables. QRED is the reduction in Q so far.</comment>
    <comment>Set the next search direction of the conjugate gradient method. It is</comment>
    <comment>the steepest descent direction initially and when the iterations are</comment>
    <comment>restarted because a variable has just been fixed by a bound, and of</comment>
    <comment>course the components of the fixed variables are zero. ITERMAX is an</comment>
    <comment>upper bound on the indices of the conjugate gradient iterations.</comment>
    <comment>XXX</comment>
    <comment>XXX</comment>
    <comment>Computing 2nd power</comment>
    <comment>Multiply the search direction by the second derivative matrix of Q and</comment>
    <comment>calculate some scalars for the choice of steplength. Then set BLEN to</comment>
    <comment>the length of the the step to the trust region boundary and STPLEN to</comment>
    <comment>the steplength, ignoring the simple bounds.</comment>
    <comment>XXX</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing MIN</comment>
    <comment>Reduce STPLEN if necessary in order to preserve the simple bounds,</comment>
    <comment>letting IACT be the index of the new constrained variable.</comment>
    <comment>Update CRVMIN, GNEW and D. Set SDEC to the decrease that occurs in Q.</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing MAX</comment>
    <comment>Restart the conjugate gradient method if it has hit a new bound.</comment>
    <comment>Computing 2nd power</comment>
    <comment>If STPLEN is less than BLEN, then either apply another conjugate</comment>
    <comment>gradient iteration or RETURN.</comment>
    <comment>XXX</comment>
    <comment>Prepare for the alternative iteration by calculating some scalars</comment>
    <comment>and by multiplying the reduced D by the second derivative matrix of</comment>
    <comment>Q, where S holds the reduced D in the call of GGMULT.</comment>
    <comment>XXX</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing 2nd power</comment>
    <comment>Let the search direction S be a linear combination of the reduced D</comment>
    <comment>and the reduced G that is orthogonal to the reduced D.</comment>
    <comment>XXX</comment>
    <comment>By considering the simple bounds on the variables, calculate an upper</comment>
    <comment>bound on the tangent of half the angle of the alternative iteration,</comment>
    <comment>namely ANGBD, except that, if already a free variable has reached a</comment>
    <comment>bound, there is a branch back to label 100 after fixing that variable.</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing 2nd power</comment>
    <comment>Calculate HHD and some curvatures for the alternative iteration.</comment>
    <comment>XXX</comment>
    <comment>Seek the greatest reduction in Q for a range of equally spaced values</comment>
    <comment>of ANGT in [0,ANGBD], where ANGT is the tangent of half the angle of</comment>
    <comment>the alternative iteration.</comment>
    <comment>Return if the reduction is zero. Otherwise, set the sine and cosine</comment>
    <comment>of the angle of the alternative iteration, and calculate SDEC.</comment>
    <comment>Update GNEW, D and HRED. If the angle of the alternative iteration</comment>
    <comment>is restricted by a bound on a free variable, that variable is fixed</comment>
    <comment>at the bound.</comment>
    <comment>Computing 2nd power</comment>
    <comment>If SDEC is sufficiently small, then RETURN after setting XNEW to</comment>
    <comment>XOPT+D, giving careful attention to the bounds.</comment>
    <comment>XXX</comment>
    <comment>Computing MAX</comment>
    <comment>Computing MIN</comment>
    <comment>Computing 2nd power</comment>
    <comment>The following instructions multiply the current S-vector by the second</comment>
    <comment>derivative matrix of the quadratic model, putting the product in HS.</comment>
    <comment>They are reached from three different parts of the software above and</comment>
    <comment>they can be regarded as an external subroutine.</comment>
    <comment>XXX</comment>
    <comment>trsbox</comment>
  </method>
  <javadoc>
    <text>The arrays BMAT and ZMAT are updated, as required by the new position
 * of the interpolation point that has the index KNEW. The vector VLAG has
 * N+NPT components, set on entry to the first NPT and last N components
 * of the product Hw in equation (4.11) of the Powell (2006) paper on
 * NEWUOA. Further, BETA is set on entry to the value of the parameter
 * with that name, and DENOM is set to the denominator of the updating
 * formula. Elements of ZMAT may be treated as zero if their moduli are
 * at most ZTEST. The first NDIM elements of W are used for working space.</text>
    <param>beta</param>
    <param>denom</param>
    <param>knew</param>
  </javadoc>
  <method type="void" name="update">
    <declaration type="int" name="n" />
    <declaration type="int" name="npt" />
    <declaration type="int" name="nptm" />
    <declaration type="ArrayRealVector" name="work" />
    <declaration type="double" name="ztest" />
    <scope>
      <scope />
    </scope>
    <scope>
      <declaration type="double" name="d1" />
      <scope>
        <declaration type="double" name="d2" />
        <declaration type="double" name="d3" />
        <declaration type="double" name="d4" />
        <declaration type="double" name="d5" />
        <declaration type="double" name="d6" />
        <scope>
          <declaration type="double" name="d7" />
        </scope>
      </scope>
    </scope>
    <scope />
    <declaration type="double" name="alpha" />
    <declaration type="double" name="tau" />
    <declaration type="double" name="sqrtDenom" />
    <declaration type="double" name="d1" />
    <declaration type="double" name="d2" />
    <scope />
    <scope>
      <declaration type="int" name="jp" />
      <declaration type="double" name="d3" />
      <declaration type="double" name="d4" />
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>XXX</comment>
    <comment>XXX Should probably be split into two arrays.</comment>
    <comment>Computing MAX</comment>
    <comment>Apply the rotations that put zeros in the KNEW-th row of ZMAT.</comment>
    <comment>Computing 2nd power</comment>
    <comment>Computing 2nd power</comment>
    <comment>Put the first NPT components of the KNEW-th column of HLAG into W,</comment>
    <comment>and calculate the parameters of the updating formula.</comment>
    <comment>Complete the updating of ZMAT.</comment>
    <comment>Finally, update the matrix BMAT.</comment>
    <comment>update</comment>
  </method>
  <javadoc>
    <text>Performs validity checks.</text>
    <param>lowerBound Lower bounds (constraints) of the objective variables.</param>
    <param>upperBound Upperer bounds (constraints) of the objective variables.</param>
  </javadoc>
  <method type="void" name="setup">
    <declaration type="double[]" name="init" />
    <declaration type="int" name="dimension" />
    <scope />
    <declaration type="int[]" name="nPointsInterval" />
    <scope />
    <declaration type="double" name="requiredMinDiff" />
    <declaration type="double" name="minDiff" />
    <scope />
    <scope />
    <comment>XXX</comment>
    <comment>Check problem dimension.</comment>
    <comment>Check number of interpolation points.</comment>
    <comment>Initialize bound differences.</comment>
    <comment>Initialize the data structures used by the "bobyqa" method.</comment>
  </method>
  <method type="String" name="caller">
    <declaration type="Throwable" name="t" />
    <declaration type="StackTraceElement[]" name="elements" />
    <declaration type="StackTraceElement" name="e" />
    <comment>XXX utility for figuring out call sequence.</comment>
  </method>
  <method type="void" name="printState">
    <comment>XXX utility for figuring out call sequence.</comment>
    <comment>System.out.println(caller(2) + ": state " + s);</comment>
  </method>
  <method type="void" name="printMethod">
    <comment>XXX utility for figuring out call sequence.</comment>
    <comment>System.out.println(caller(2));</comment>
  </method>
  <javadoc>
    <text>Marker for code paths that are not explored with the current unit tests.
 * If the path becomes explored, it should just be removed from the code.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <declaration type="String" name="PATH_IS_EXPLORED" />
  <method type="constructor" name="PathIsExploredException" />
  <comment>CHECKSTYLE: stop all</comment>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>----------------------------------------------------------------------------------------</comment>
  <comment>----------------------------------------------------------------------------------------</comment>
  <comment>----------------------------------------------------------------------------------------</comment>
  <comment>----------------------------------------------------------------------------------------</comment>
  <comment>----------------------------------------------------------------------------------------</comment>
  <comment>CHECKSTYLE: resume all</comment>
</class>
