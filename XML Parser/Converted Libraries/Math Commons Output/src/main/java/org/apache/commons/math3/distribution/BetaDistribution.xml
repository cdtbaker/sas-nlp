<?xml version="1.0" encoding="UTF-8"?>
<class name="BetaDistribution">
  <javadoc>
    <text>Implements the Beta distribution.</text>
    <see>&lt;a href="http://en.wikipedia.org/wiki/Beta_distribution"&gt;Beta distribution&lt;/a&gt;</see>
    <version>$Id: BetaDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <since>2.0 (changed to concrete class in 3.0)</since>
  </javadoc>
  <javadoc>
    <text>Default inverse cumulative probability accuracy.</text>
    <since>2.1</since>
  </javadoc>
  <declaration type="double" name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" />
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>First shape parameter.</text>
  </javadoc>
  <declaration type="double" name="alpha" />
  <javadoc>
    <text>Second shape parameter.</text>
  </javadoc>
  <declaration type="double" name="beta" />
  <javadoc>
    <text>Normalizing factor used in density computations.
 * updated whenever alpha or beta are changed.</text>
  </javadoc>
  <declaration type="double" name="z" />
  <javadoc>
    <text>Inverse cumulative probability accuracy.</text>
  </javadoc>
  <declaration type="double" name="solverAbsoluteAccuracy" />
  <javadoc>
    <text>Build a new instance.</text>
    <param>alpha First shape parameter (must be positive).</param>
    <param>beta Second shape parameter (must be positive).</param>
  </javadoc>
  <method type="constructor" name="BetaDistribution" />
  <javadoc>
    <text>Build a new instance.</text>
    <param>alpha First shape parameter (must be positive).</param>
    <param>beta Second shape parameter (must be positive).</param>
    <param>inverseCumAccuracy Maximum absolute error in inverse
 * cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).</param>
    <since>2.1</since>
  </javadoc>
  <method type="constructor" name="BetaDistribution" />
  <javadoc>
    <text>Creates a &amp;beta; distribution.</text>
    <param>rng Random number generator.</param>
    <param>alpha First shape parameter (must be positive).</param>
    <param>beta Second shape parameter (must be positive).</param>
    <param>inverseCumAccuracy Maximum absolute error in inverse
 * cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).</param>
    <since>3.1</since>
  </javadoc>
  <method type="constructor" name="BetaDistribution" />
  <javadoc>
    <text>Access the first shape parameter, {@code alpha}.</text>
    <return>the first shape parameter.</return>
  </javadoc>
  <method type="double" name="getAlpha" />
  <javadoc>
    <text>Access the second shape parameter, {@code beta}.</text>
    <return>the second shape parameter.</return>
  </javadoc>
  <method type="double" name="getBeta" />
  <javadoc>
    <text>Recompute the normalization factor.</text>
  </javadoc>
  <method type="void" name="recomputeZ">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="density">
    <scope />
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <scope>
      <declaration type="double" name="logX" />
      <declaration type="double" name="log1mX" />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="cumulativeProbability">
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Return the absolute accuracy setting of the solver used to estimate
 * inverse cumulative probabilities.</text>
    <return>the solver absolute accuracy.</return>
    <since>2.1</since>
  </javadoc>
  <method type="double" name="getSolverAbsoluteAccuracy" />
  <javadoc>
    <text>{@inheritDoc}For first shape parameter {@code alpha} and second shape parameter{@code beta}, the mean is {@code alpha / (alpha + beta)}.</text>
  </javadoc>
  <method type="double" name="getNumericalMean">
    <declaration type="double" name="a" />
  </method>
  <javadoc>
    <text>{@inheritDoc}For first shape parameter {@code alpha} and second shape parameter{@code beta}, the variance is{@code (alpha * beta) / [(alpha + beta)^2 * (alpha + beta + 1)]}.</text>
  </javadoc>
  <method type="double" name="getNumericalVariance">
    <declaration type="double" name="a" />
    <declaration type="double" name="b" />
    <declaration type="double" name="alphabetasum" />
  </method>
  <javadoc>
    <text>{@inheritDoc}The lower bound of the support is always 0 no matter the parameters.</text>
    <return>lower bound of the support (always 0)</return>
  </javadoc>
  <method type="double" name="getSupportLowerBound" />
  <javadoc>
    <text>{@inheritDoc}The upper bound of the support is always 1 no matter the parameters.</text>
    <return>upper bound of the support (always 1)</return>
  </javadoc>
  <method type="double" name="getSupportUpperBound" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSupportLowerBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="isSupportUpperBoundInclusive" />
  <javadoc>
    <text>{@inheritDoc}The support of this distribution is connected.</text>
    <return>{@code true}</return>
  </javadoc>
  <method type="boolean" name="isSupportConnected" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
