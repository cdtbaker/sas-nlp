<?xml version="1.0" encoding="UTF-8"?>
<class name="LinearOptimizer">
  <javadoc>
    <text>Base class for implementing linear optimizers.</text>
    <version>$Id: LinearOptimizer.java 1443444 2013-02-07 12:41:36Z erans $</version>
    <since>3.1</since>
  </javadoc>
  <javadoc>
    <text>Linear objective function.</text>
  </javadoc>
  <declaration type="LinearObjectiveFunction" name="function" />
  <javadoc>
    <text>Linear constraints.</text>
  </javadoc>
  <declaration type="Collection&lt;LinearConstraint&gt;" name="linearConstraints" />
  <javadoc>
    <text>Whether to restrict the variables to non-negative values.</text>
  </javadoc>
  <declaration type="boolean" name="nonNegative" />
  <javadoc>
    <text>Simple constructor with default settings.</text>
  </javadoc>
  <method type="constructor" name="LinearOptimizer">
    <comment>No convergence checker.</comment>
  </method>
  <javadoc>
    <return>{@code true} if the variables are restricted to non-negative values.</return>
  </javadoc>
  <method type="boolean" name="isRestrictedToNonNegative" />
  <javadoc>
    <return>the optimization type.</return>
  </javadoc>
  <method type="LinearObjectiveFunction" name="getFunction" />
  <javadoc>
    <return>the optimization type.</return>
  </javadoc>
  <method type="Collection&lt;LinearConstraint&gt;" name="getConstraints" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <param>optData Optimization data. In addition to those documented in{@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])MultivariateOptimizer}, this method will register the following data:
 * &lt;ul&gt;
 * &lt;li&gt;{@link LinearObjectiveFunction}&lt;/li&gt;
 * &lt;li&gt;{@link LinearConstraintSet}&lt;/li&gt;
 * &lt;li&gt;{@link NonNegativeConstraint}&lt;/li&gt;
 * &lt;/ul&gt;</param>
    <return>{@inheritDoc}</return>
    <throws>TooManyIterationsException if the maximal number of
 * iterations is exceeded.</throws>
  </javadoc>
  <method type="PointValuePair" name="optimize">
    <comment>Set up base class and perform computation.</comment>
  </method>
  <javadoc>
    <text>Scans the list of (required and optional) optimization data that
 * characterize the problem.</text>
    <param>optData Optimization data.
 * The following data will be looked for:
 * &lt;ul&gt;
 * &lt;li&gt;{@link LinearObjectiveFunction}&lt;/li&gt;
 * &lt;li&gt;{@link LinearConstraintSet}&lt;/li&gt;
 * &lt;li&gt;{@link NonNegativeConstraint}&lt;/li&gt;
 * &lt;/ul&gt;</param>
  </javadoc>
  <method type="void" name="parseOptimizationData">
    <scope>
      <scope />
      <scope />
      <scope />
    </scope>
    <comment>Allow base class to register its own data.</comment>
    <comment>The existing values (as set by the previous call) are reused if</comment>
    <comment>not provided in the argument list.</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
