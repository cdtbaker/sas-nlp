<?xml version="1.0" encoding="UTF-8"?>
<class name="SparseFieldVector">
  <javadoc>
    <text>This class implements the {@link FieldVector} interface with a {@link OpenIntToFieldHashMap} backing store.</text>
    <param>&lt;T&gt;
 *  the type of the field elements</param>
    <version>$Id: SparseFieldVector.java 1455233 2013-03-11 17:00:41Z luc $</version>
    <since>2.0</since>
    <deprecated>As of version 3.1, this class is deprecated, for reasons exposed
 * in this JIRA
 * &lt;a href="https://issues.apache.org/jira/browse/MATH-870"&gt;ticket&lt;/a&gt;. This
 * class will be removed in version 4.0.</deprecated>
  </javadoc>
  <javadoc>
    <text>Serialization identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Field to which the elements belong.</text>
  </javadoc>
  <declaration type="Field&lt;T&gt;" name="field" />
  <javadoc>
    <text>Entries of the vector.</text>
  </javadoc>
  <declaration type="OpenIntToFieldHashMap&lt;T&gt;" name="entries" />
  <javadoc>
    <text>Dimension of the vector.</text>
  </javadoc>
  <declaration type="int" name="virtualSize" />
  <javadoc>
    <text>Build a 0-length vector.
 * Zero-length vectors may be used to initialize construction of vectors
 * by data gathering. We start with zero-length and use either the {@link #SparseFieldVector(SparseFieldVector,int)} constructor
 * or one of the {@code append} method ({@link #append(FieldVector)} or{@link #append(SparseFieldVector)}) to gather data into this vector.</text>
    <param>field Field to which the elements belong.</param>
  </javadoc>
  <method type="constructor" name="SparseFieldVector" />
  <javadoc>
    <text>Construct a vector of zeroes.</text>
    <param>field Field to which the elements belong.</param>
    <param>dimension Size of the vector.</param>
  </javadoc>
  <method type="constructor" name="SparseFieldVector" />
  <javadoc>
    <text>Build a resized vector, for use with append.</text>
    <param>v Original vector</param>
    <param>resize Amount to add.</param>
  </javadoc>
  <method type="constructor" name="SparseFieldVector" />
  <javadoc>
    <text>Build a vector with known the sparseness (for advanced use only).</text>
    <param>field Field to which the elements belong.</param>
    <param>dimension Size of the vector.</param>
    <param>expectedSize Expected number of non-zero entries.</param>
  </javadoc>
  <method type="constructor" name="SparseFieldVector" />
  <javadoc>
    <text>Create from a Field array.
 * Only non-zero entries will be stored.</text>
    <param>field Field to which the elements belong.</param>
    <param>values Set of values to create from.</param>
    <exception>NullArgumentException if values is null</exception>
  </javadoc>
  <method type="constructor" name="SparseFieldVector">
    <scope>
      <declaration type="T" name="value" />
    </scope>
  </method>
  <javadoc>
    <text>Copy constructor.</text>
    <param>v Instance to copy.</param>
  </javadoc>
  <method type="constructor" name="SparseFieldVector" />
  <javadoc>
    <text>Get the entries of this instance.</text>
    <return>the entries of this instance</return>
  </javadoc>
  <method type="OpenIntToFieldHashMap&lt;T&gt;" name="getEntries" />
  <javadoc>
    <text>Optimized method to add sparse vectors.</text>
    <param>v Vector to add.</param>
    <return>{@code this + v}.</return>
    <throws>DimensionMismatchException if {@code v} is not the same size as{@code this}.</throws>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="add">
    <declaration type="SparseFieldVector&lt;T&gt;" name="res" />
    <declaration type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" name="iter" />
    <scope>
      <declaration type="int" name="key" />
      <declaration type="T" name="value" />
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Construct a vector by appending a vector to this vector.</text>
    <param>v Vector to append to this one.</param>
    <return>a new vector.</return>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="append">
    <declaration type="SparseFieldVector&lt;T&gt;" name="res" />
    <declaration type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" name="iter" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="append">
    <scope />
    <scope>
      <declaration type="int" name="n" />
      <declaration type="FieldVector&lt;T&gt;" name="res" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <exception>NullArgumentException if d is null</exception>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="append">
    <declaration type="FieldVector&lt;T&gt;" name="res" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="copy" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="dotProduct">
    <declaration type="T" name="res" />
    <declaration type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" name="iter" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="ebeDivide">
    <declaration type="SparseFieldVector&lt;T&gt;" name="res" />
    <declaration type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" name="iter" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="ebeMultiply">
    <declaration type="SparseFieldVector&lt;T&gt;" name="res" />
    <declaration type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" name="iter" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <deprecated>as of 3.1, to be removed in 4.0. Please use the {@link #toArray()} method instead.</deprecated>
  </javadoc>
  <method type="T[]" name="getData" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getDimension" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T" name="getEntry" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Field&lt;T&gt;" name="getField" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="getSubVector">
    <scope />
    <declaration type="SparseFieldVector&lt;T&gt;" name="res" />
    <declaration type="int" name="end" />
    <declaration type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" name="iter" />
    <scope>
      <declaration type="int" name="key" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="mapAdd" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="mapAddToSelf">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="mapDivide" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="mapDivideToSelf">
    <declaration type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" name="iter" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="mapInv" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="mapInvToSelf">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="mapMultiply" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="mapMultiplyToSelf">
    <declaration type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" name="iter" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="mapSubtract" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="mapSubtractToSelf" />
  <javadoc>
    <text>Optimized method to compute outer product when both vectors are sparse.</text>
    <param>v vector with which outer product should be computed</param>
    <return>the matrix outer product between instance and v</return>
  </javadoc>
  <method type="FieldMatrix&lt;T&gt;" name="outerProduct">
    <declaration type="int" name="n" />
    <declaration type="SparseFieldMatrix&lt;T&gt;" name="res" />
    <declaration type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" name="iter" />
    <scope>
      <declaration type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" name="iter2" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldMatrix&lt;T&gt;" name="outerProduct">
    <scope />
    <scope>
      <declaration type="int" name="n" />
      <declaration type="FieldMatrix&lt;T&gt;" name="res" />
      <declaration type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" name="iter" />
      <scope>
        <declaration type="int" name="row" />
        <declaration type="FieldElement&lt;T&gt;" name="value" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="projection" />
  <javadoc>
    <text>{@inheritDoc}</text>
    <exception>NullArgumentException if value is null</exception>
  </javadoc>
  <method type="void" name="set">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <exception>NullArgumentException if value is null</exception>
  </javadoc>
  <method type="void" name="setEntry" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setSubVector">
    <declaration type="int" name="n" />
    <scope />
  </method>
  <javadoc>
    <text>Optimized method to compute {@code this} minus {@code v}.</text>
    <param>v vector to be subtracted</param>
    <return>{@code this - v}</return>
    <throws>DimensionMismatchException if {@code v} is not the same size as{@code this}.</throws>
  </javadoc>
  <method type="SparseFieldVector&lt;T&gt;" name="subtract">
    <declaration type="SparseFieldVector&lt;T&gt;" name="res" />
    <declaration type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" name="iter" />
    <scope>
      <declaration type="int" name="key" />
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="subtract">
    <scope />
    <scope>
      <declaration type="int" name="n" />
      <declaration type="SparseFieldVector&lt;T&gt;" name="res" />
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="T[]" name="toArray">
    <declaration type="T[]" name="res" />
    <declaration type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" name="iter" />
    <scope />
  </method>
  <javadoc>
    <text>Check whether an index is valid.</text>
    <param>index Index to check.</param>
    <throws>OutOfRangeException if the index is not valid.</throws>
  </javadoc>
  <method type="void" name="checkIndex">
    <scope />
  </method>
  <javadoc>
    <text>Check if instance dimension is equal to some expected value.</text>
    <param>n Expected dimension.</param>
    <throws>DimensionMismatchException if the dimensions do not match.</throws>
  </javadoc>
  <method type="void" name="checkVectorDimensions">
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FieldVector&lt;T&gt;" name="add">
    <scope />
    <scope>
      <declaration type="int" name="n" />
      <declaration type="SparseFieldVector&lt;T&gt;" name="res" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="hashCode">
    <declaration type="int" name="prime" />
    <declaration type="int" name="result" />
    <declaration type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" name="iter" />
    <scope>
      <declaration type="int" name="temp" />
    </scope>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope />
    <declaration type="SparseFieldVector&lt;T&gt;" name="other" />
    <scope>
      <scope />
    </scope>
    <scope />
    <scope />
    <declaration type="OpenIntToFieldHashMap&lt;T&gt;.Iterator" name="iter" />
    <scope>
      <declaration type="T" name="test" />
      <scope />
    </scope>
    <scope>
      <declaration type="T" name="test" />
      <scope />
    </scope>
    <comment>OK, because "else if" check below ensures that</comment>
    <comment>other must be the same type as this</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
