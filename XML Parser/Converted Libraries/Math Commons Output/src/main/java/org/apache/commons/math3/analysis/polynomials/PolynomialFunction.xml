<?xml version="1.0" encoding="UTF-8"?>
<class name="PolynomialFunction">
  <javadoc>
    <text>Immutable representation of a real polynomial function with real coefficients.
 * &lt;p&gt;
 * &lt;a href="http://mathworld.wolfram.com/HornersMethod.html"&gt;Horner's Method&lt;/a&gt;
 * is used to evaluate the function.&lt;/p&gt;</text>
    <version>$Id: PolynomialFunction.java 1455194 2013-03-11 15:45:54Z luc $</version>
  </javadoc>
  <javadoc>
    <text>Serialization identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>The coefficients of the polynomial, ordered by degree -- i.e.,
 * coefficients[0] is the constant term and coefficients[n] is the
 * coefficient of x^n where n is the degree of the polynomial.</text>
  </javadoc>
  <declaration type="double" name="coefficients" />
  <javadoc>
    <text>Construct a polynomial with the given coefficients.  The first element
 * of the coefficients array is the constant term.  Higher degree
 * coefficients follow in sequence.  The degree of the resulting polynomial
 * is the index of the last non-null element of the array, or 0 if all elements
 * are null.
 * &lt;p&gt;
 * The constructor makes a copy of the input array and assigns the copy to
 * the coefficients property.&lt;/p&gt;</text>
    <param>c Polynomial coefficients.</param>
    <throws>NullArgumentException if {@code c} is {@code null}.</throws>
    <throws>NoDataException if {@code c} is empty.</throws>
  </javadoc>
  <method type="constructor" name="PolynomialFunction">
    <declaration type="int" name="n" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Compute the value of the function for the given argument.
 * &lt;p&gt;
 * The value returned is &lt;br/&gt;
 * &lt;code&gt;coefficients[n] * x^n + ... + coefficients[1] * x  + coefficients[0]&lt;/code&gt;
 * &lt;/p&gt;</text>
    <param>x Argument for which the function value should be computed.</param>
    <return>the value of the polynomial at the given point.</return>
    <see>UnivariateFunction#value(double)</see>
  </javadoc>
  <method type="double" name="value" />
  <javadoc>
    <text>Returns the degree of the polynomial.</text>
    <return>the degree of the polynomial.</return>
  </javadoc>
  <method type="int" name="degree" />
  <javadoc>
    <text>Returns a copy of the coefficients array.
 * &lt;p&gt;
 * Changes made to the returned copy will not affect the coefficients of
 * the polynomial.&lt;/p&gt;</text>
    <return>a fresh copy of the coefficients array.</return>
  </javadoc>
  <method type="double[]" name="getCoefficients" />
  <javadoc>
    <text>Uses Horner's Method to evaluate the polynomial with the given coefficients at
 * the argument.</text>
    <param>coefficients Coefficients of the polynomial to evaluate.</param>
    <param>argument Input value.</param>
    <return>the value of the polynomial.</return>
    <throws>NoDataException if {@code coefficients} is empty.</throws>
    <throws>NullArgumentException if {@code coefficients} is {@code null}.</throws>
  </javadoc>
  <method type="double" name="evaluate">
    <declaration type="int" name="n" />
    <scope />
    <declaration type="double" name="result" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
    <since>3.1</since>
    <throws>NoDataException if {@code coefficients} is empty.</throws>
    <throws>NullArgumentException if {@code coefficients} is {@code null}.</throws>
  </javadoc>
  <method type="DerivativeStructure" name="value">
    <declaration type="int" name="n" />
    <scope />
    <declaration type="DerivativeStructure" name="result" />
    <scope />
  </method>
  <javadoc>
    <text>Add a polynomial to the instance.</text>
    <param>p Polynomial to add.</param>
    <return>a new polynomial which is the sum of the instance and {@code p}.</return>
  </javadoc>
  <method type="PolynomialFunction" name="add">
    <declaration type="int" name="lowLength" />
    <declaration type="int" name="highLength" />
    <declaration type="double[]" name="newCoefficients" />
    <scope />
    <comment>identify the lowest degree polynomial</comment>
    <comment>build the coefficients array</comment>
  </method>
  <javadoc>
    <text>Subtract a polynomial from the instance.</text>
    <param>p Polynomial to subtract.</param>
    <return>a new polynomial which is the difference the instance minus {@code p}.</return>
  </javadoc>
  <method type="PolynomialFunction" name="subtract">
    <declaration type="int" name="lowLength" />
    <declaration type="int" name="highLength" />
    <declaration type="double[]" name="newCoefficients" />
    <scope />
    <scope>
      <scope />
    </scope>
    <scope />
    <comment>identify the lowest degree polynomial</comment>
    <comment>build the coefficients array</comment>
  </method>
  <javadoc>
    <text>Negate the instance.</text>
    <return>a new polynomial.</return>
  </javadoc>
  <method type="PolynomialFunction" name="negate">
    <declaration type="double[]" name="newCoefficients" />
    <scope />
  </method>
  <javadoc>
    <text>Multiply the instance by a polynomial.</text>
    <param>p Polynomial to multiply by.</param>
    <return>a new polynomial.</return>
  </javadoc>
  <method type="PolynomialFunction" name="multiply">
    <declaration type="double[]" name="newCoefficients" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns the coefficients of the derivative of the polynomial with the given coefficients.</text>
    <param>coefficients Coefficients of the polynomial to differentiate.</param>
    <return>the coefficients of the derivative or {@code null} if coefficients has length 1.</return>
    <throws>NoDataException if {@code coefficients} is empty.</throws>
    <throws>NullArgumentException if {@code coefficients} is {@code null}.</throws>
  </javadoc>
  <method type="double[]" name="differentiate">
    <declaration type="int" name="n" />
    <scope />
    <scope />
    <declaration type="double[]" name="result" />
    <scope />
  </method>
  <javadoc>
    <text>Returns the derivative as a {@link PolynomialFunction}.</text>
    <return>the derivative polynomial.</return>
  </javadoc>
  <method type="PolynomialFunction" name="polynomialDerivative" />
  <javadoc>
    <text>Returns the derivative as a {@link UnivariateFunction}.</text>
    <return>the derivative function.</return>
  </javadoc>
  <method type="UnivariateFunction" name="derivative" />
  <javadoc>
    <text>Returns a string representation of the polynomial.
 * &lt;p&gt;The representation is user oriented. Terms are displayed lowest
 * degrees first. The multiplications signs, coefficients equals to
 * one and null terms are not displayed (except if the polynomial is 0,
 * in which case the 0 constant term is displayed). Addition of terms
 * with negative coefficients are replaced by subtraction of terms
 * with positive coefficients except for the first displayed term
 * (i.e. we display &lt;code&gt;-3&lt;/code&gt; for a constant negative polynomial,
 * but &lt;code&gt;1 - 3 x + x^2&lt;/code&gt; if the negative coefficient is not
 * the first one displayed).&lt;/p&gt;</text>
    <return>a string representation of the polynomial.</return>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuilder" name="s" />
    <scope>
      <scope />
    </scope>
    <scope />
    <scope>
      <scope>
        <scope>
          <scope />
          <scope />
        </scope>
        <scope>
          <scope />
        </scope>
        <declaration type="double" name="absAi" />
        <scope />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Creates a string representing a coefficient, removing ".0" endings.</text>
    <param>coeff Coefficient.</param>
    <return>a string representation of {@code coeff}.</return>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="String" name="c" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="hashCode">
    <declaration type="int" name="prime" />
    <declaration type="int" name="result" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope />
    <declaration type="PolynomialFunction" name="other" />
    <scope />
  </method>
  <javadoc>
    <text>Dedicated parametric polynomial class.</text>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double[]" name="gradient">
    <declaration type="double[]" name="gradient" />
    <declaration type="double" name="xn" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="value" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
