<?xml version="1.0" encoding="UTF-8"?>
<class name="Vector">
  <javadoc>
    <text>This interface represents a generic vector in a vectorial space or a point in an affine space.</text>
    <param>&lt;S&gt;
 *  Type of the space.</param>
    <version>$Id: Vector.java 1416643 2012-12-03 19:37:14Z tn $</version>
    <see>Space</see>
    <see>Vector</see>
    <since>3.0</since>
  </javadoc>
  <method name="getSpace" type="Space" />
  <javadoc>
    <text>Get the space to which the vector belongs.</text>
    <return>containing space</return>
  </javadoc>
  <method name="getZero" type="Vector&lt;S&gt;" />
  <javadoc>
    <text>Get the null vector of the vectorial space or origin point of the affine space.</text>
    <return>null vector of the vectorial space or origin point of the affine space</return>
  </javadoc>
  <method name="getNorm1" type="double" />
  <javadoc>
    <text>Get the L&lt;sub&gt;1&lt;/sub&gt; norm for the vector.</text>
    <return>L&lt;sub&gt;1&lt;/sub&gt; norm for the vector</return>
  </javadoc>
  <method name="getNorm" type="double" />
  <javadoc>
    <text>Get the L&lt;sub&gt;2&lt;/sub&gt; norm for the vector.</text>
    <return>Euclidean norm for the vector</return>
  </javadoc>
  <method name="getNormSq" type="double" />
  <javadoc>
    <text>Get the square of the norm for the vector.</text>
    <return>square of the Euclidean norm for the vector</return>
  </javadoc>
  <method name="getNormInf" type="double" />
  <javadoc>
    <text>Get the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm for the vector.</text>
    <return>L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm for the vector</return>
  </javadoc>
  <method name="add" type="Vector&lt;S&gt;" />
  <javadoc>
    <text>Add a vector to the instance.</text>
    <param>v vector to add</param>
    <return>a new vector</return>
  </javadoc>
  <method name="add" type="Vector&lt;S&gt;" />
  <javadoc>
    <text>Add a scaled vector to the instance.</text>
    <param>factor scale factor to apply to v before adding it</param>
    <param>v vector to add</param>
    <return>a new vector</return>
  </javadoc>
  <method name="subtract" type="Vector&lt;S&gt;" />
  <javadoc>
    <text>Subtract a vector from the instance.</text>
    <param>v vector to subtract</param>
    <return>a new vector</return>
  </javadoc>
  <method name="subtract" type="Vector&lt;S&gt;" />
  <javadoc>
    <text>Subtract a scaled vector from the instance.</text>
    <param>factor scale factor to apply to v before subtracting it</param>
    <param>v vector to subtract</param>
    <return>a new vector</return>
  </javadoc>
  <method name="negate" type="Vector&lt;S&gt;" />
  <javadoc>
    <text>Get the opposite of the instance.</text>
    <return>a new vector which is opposite to the instance</return>
  </javadoc>
  <method name="normalize" type="Vector&lt;S&gt;" />
  <javadoc>
    <text>Get a normalized vector aligned with the instance.</text>
    <return>a new normalized vector</return>
    <exception>MathArithmeticException if the norm is zero</exception>
  </javadoc>
  <method name="scalarMultiply" type="Vector&lt;S&gt;" />
  <javadoc>
    <text>Multiply the instance by a scalar.</text>
    <param>a scalar</param>
    <return>a new vector</return>
  </javadoc>
  <method name="isNaN" type="boolean" />
  <javadoc>
    <text>Returns true if any coordinate of this vector is NaN; false otherwise</text>
    <return>true if any coordinate of this vector is NaN; false otherwise</return>
  </javadoc>
  <method name="isInfinite" type="boolean" />
  <javadoc>
    <text>Returns true if any coordinate of this vector is infinite and none are NaN;
 * false otherwise</text>
    <return>true if any coordinate of this vector is infinite and none are NaN;
 * false otherwise</return>
  </javadoc>
  <method name="distance1" type="double" />
  <javadoc>
    <text>Compute the distance between the instance and another vector according to the L&lt;sub&gt;1&lt;/sub&gt; norm.
 * &lt;p&gt;Calling this method is equivalent to calling:
 * &lt;code&gt;q.subtract(p).getNorm1()&lt;/code&gt; except that no intermediate
 * vector is built&lt;/p&gt;</text>
    <param>v second vector</param>
    <return>the distance between the instance and p according to the L&lt;sub&gt;1&lt;/sub&gt; norm</return>
  </javadoc>
  <method name="distance" type="double" />
  <javadoc>
    <text>Compute the distance between the instance and another vector according to the L&lt;sub&gt;2&lt;/sub&gt; norm.
 * &lt;p&gt;Calling this method is equivalent to calling:
 * &lt;code&gt;q.subtract(p).getNorm()&lt;/code&gt; except that no intermediate
 * vector is built&lt;/p&gt;</text>
    <param>v second vector</param>
    <return>the distance between the instance and p according to the L&lt;sub&gt;2&lt;/sub&gt; norm</return>
  </javadoc>
  <method name="distanceInf" type="double" />
  <javadoc>
    <text>Compute the distance between the instance and another vector according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm.
 * &lt;p&gt;Calling this method is equivalent to calling:
 * &lt;code&gt;q.subtract(p).getNormInf()&lt;/code&gt; except that no intermediate
 * vector is built&lt;/p&gt;</text>
    <param>v second vector</param>
    <return>the distance between the instance and p according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm</return>
  </javadoc>
  <method name="distanceSq" type="double" />
  <javadoc>
    <text>Compute the square of the distance between the instance and another vector.
 * &lt;p&gt;Calling this method is equivalent to calling:
 * &lt;code&gt;q.subtract(p).getNormSq()&lt;/code&gt; except that no intermediate
 * vector is built&lt;/p&gt;</text>
    <param>v second vector</param>
    <return>the square of the distance between the instance and p</return>
  </javadoc>
  <method name="dotProduct" type="double" />
  <javadoc>
    <text>Compute the dot-product of the instance and another vector.</text>
    <param>v second vector</param>
    <return>the dot product this.v</return>
  </javadoc>
  <method name="toString" type="String" />
  <javadoc>
    <text>Get a string representation of this vector.</text>
    <param>format the custom format for components</param>
    <return>a string representation of this vector</return>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
