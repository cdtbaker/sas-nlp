<?xml version="1.0" encoding="UTF-8"?>
<class name="MultidimensionalCounter">
  <javadoc>
    <text>Converter between unidimensional storage structure and multidimensional
 * conceptual structure.
 * This utility will convert from indices in a multidimensional structure
 * to the corresponding index in a one-dimensional array. For example,
 * assuming that the ranges (in 3 dimensions) of indices are 2, 4 and 3,
 * the following correspondences, between 3-tuples indices and unidimensional
 * indices, will hold:
 * &lt;ul&gt;
 * &lt;li&gt;(0, 0, 0) corresponds to 0&lt;/li&gt;
 * &lt;li&gt;(0, 0, 1) corresponds to 1&lt;/li&gt;
 * &lt;li&gt;(0, 0, 2) corresponds to 2&lt;/li&gt;
 * &lt;li&gt;(0, 1, 0) corresponds to 3&lt;/li&gt;
 * &lt;li&gt;...&lt;/li&gt;
 * &lt;li&gt;(1, 0, 0) corresponds to 12&lt;/li&gt;
 * &lt;li&gt;...&lt;/li&gt;
 * &lt;li&gt;(1, 3, 2) corresponds to 23&lt;/li&gt;
 * &lt;/ul&gt;</text>
    <since>2.2</since>
    <version>$Id: MultidimensionalCounter.java 1382887 2012-09-10 14:37:27Z luc $</version>
  </javadoc>
  <javadoc>
    <text>Number of dimensions.</text>
  </javadoc>
  <declaration type="int" name="dimension" />
  <javadoc>
    <text>Offset for each dimension.</text>
  </javadoc>
  <declaration type="int[]" name="uniCounterOffset" />
  <javadoc>
    <text>Counter sizes.</text>
  </javadoc>
  <declaration type="int[]" name="size" />
  <javadoc>
    <text>Total number of (one-dimensional) slots.</text>
  </javadoc>
  <declaration type="int" name="totalSize" />
  <javadoc>
    <text>Index of last dimension.</text>
  </javadoc>
  <declaration type="int" name="last" />
  <javadoc>
    <text>Perform iteration over the multidimensional counter.</text>
  </javadoc>
  <javadoc>
    <text>Multidimensional counter.</text>
  </javadoc>
  <declaration type="int[]" name="counter" />
  <javadoc>
    <text>Unidimensional counter.</text>
  </javadoc>
  <declaration type="int" name="count" />
  <javadoc>
    <text>Create an iterator</text>
    <see>#iterator()</see>
  </javadoc>
  <method type="constructor" name="Iterator" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="hasNext">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <return>the unidimensional count after the counter has been
 * incremented by {@code 1}.</return>
  </javadoc>
  <method type="Integer" name="next">
    <scope>
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Get the current unidimensional counter slot.</text>
    <return>the index within the unidimensionl counter.</return>
  </javadoc>
  <method type="int" name="getCount" />
  <javadoc>
    <text>Get the current multidimensional counter slots.</text>
    <return>the indices within the multidimensional counter.</return>
  </javadoc>
  <method type="int[]" name="getCounts" />
  <javadoc>
    <text>Get the current count in the selected dimension.</text>
    <param>dim Dimension index.</param>
    <return>the count at the corresponding index for the current state
 * of the iterator.</return>
    <throws>IndexOutOfBoundsException if {@code index} is not in the
 * correct interval (as defined by the length of the argument in the{@link MultidimensionalCounter#MultidimensionalCounter(int[])constructor of the enclosing class}).</throws>
  </javadoc>
  <method type="int" name="getCount" />
  <javadoc>
    <throws>UnsupportedOperationException</throws>
  </javadoc>
  <method type="void" name="remove" />
  <javadoc>
    <text>Create a counter.</text>
    <param>size Counter sizes (number of slots in each dimension).</param>
    <throws>NotStrictlyPositiveException if one of the sizes is
 * negative or zero.</throws>
  </javadoc>
  <method type="constructor" name="MultidimensionalCounter">
    <declaration type="int" name="tS" />
    <scope>
      <declaration type="int" name="count" />
      <scope />
    </scope>
    <scope />
  </method>
  <javadoc>
    <text>Create an iterator over this counter.</text>
    <return>the iterator.</return>
  </javadoc>
  <method type="Iterator" name="iterator" />
  <javadoc>
    <text>Get the number of dimensions of the multidimensional counter.</text>
    <return>the number of dimensions.</return>
  </javadoc>
  <method type="int" name="getDimension" />
  <javadoc>
    <text>Convert to multidimensional counter.</text>
    <param>index Index in unidimensional counter.</param>
    <return>the multidimensional counts.</return>
    <throws>OutOfRangeException if {@code index} is not between{@code 0} and the value returned by {@link #getSize()} (excluded).</throws>
  </javadoc>
  <method type="int[]" name="getCounts">
    <scope />
    <declaration type="int[]" name="indices" />
    <declaration type="int" name="count" />
    <scope>
      <declaration type="int" name="idx" />
      <declaration type="int" name="offset" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Convert to unidimensional counter.</text>
    <param>c Indices in multidimensional counter.</param>
    <return>the index within the unidimensionl counter.</return>
    <throws>DimensionMismatchException if the size of {@code c}does not match the size of the array given in the constructor.</throws>
    <throws>OutOfRangeException if a value of {@code c} is not in
 * the range of the corresponding dimension, as defined in the{@link MultidimensionalCounter#MultidimensionalCounter(int...) constructor}.</throws>
  </javadoc>
  <method type="int" name="getCount">
    <scope />
    <declaration type="int" name="count" />
    <scope>
      <declaration type="int" name="index" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Get the total number of elements.</text>
    <return>the total size of the unidimensional counter.</return>
  </javadoc>
  <method type="int" name="getSize" />
  <javadoc>
    <text>Get the number of multidimensional counter slots in each dimension.</text>
    <return>the sizes of the multidimensional counter in each dimension.</return>
  </javadoc>
  <method type="int[]" name="getSizes" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuilder" name="sb" />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
