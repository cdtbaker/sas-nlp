<?xml version="1.0" encoding="UTF-8"?>
<class name="PoissonDistribution">
  <javadoc>
    <text>Implementation of the Poisson distribution.</text>
    <see>&lt;a href="http://en.wikipedia.org/wiki/Poisson_distribution"&gt;Poisson distribution (Wikipedia)&lt;/a&gt;</see>
    <see>&lt;a href="http://mathworld.wolfram.com/PoissonDistribution.html"&gt;Poisson distribution (MathWorld)&lt;/a&gt;</see>
    <version>$Id: PoissonDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Default maximum number of iterations for cumulative probability calculations.</text>
    <since>2.1</since>
  </javadoc>
  <declaration type="int" name="DEFAULT_MAX_ITERATIONS" />
  <javadoc>
    <text>Default convergence criterion.</text>
    <since>2.1</since>
  </javadoc>
  <declaration type="double" name="DEFAULT_EPSILON" />
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Distribution used to compute normal approximation.</text>
  </javadoc>
  <declaration type="NormalDistribution" name="normal" />
  <javadoc>
    <text>Distribution needed for the {@link #sample()} method.</text>
  </javadoc>
  <declaration type="ExponentialDistribution" name="exponential" />
  <javadoc>
    <text>Mean of the distribution.</text>
  </javadoc>
  <declaration type="double" name="mean" />
  <javadoc>
    <text>Maximum number of iterations for cumulative probability. Cumulative
 * probabilities are estimated using either Lanczos series approximation
 * of {@link Gamma#regularizedGammaP(double,double,double,int)}or continued fraction approximation of{@link Gamma#regularizedGammaQ(double,double,double,int)}.</text>
  </javadoc>
  <declaration type="int" name="maxIterations" />
  <javadoc>
    <text>Convergence criterion for cumulative probability.</text>
  </javadoc>
  <declaration type="double" name="epsilon" />
  <javadoc>
    <text>Creates a new Poisson distribution with specified mean.</text>
    <param>p the Poisson mean</param>
    <throws>NotStrictlyPositiveException if {@code p &lt;= 0}.</throws>
  </javadoc>
  <method type="constructor" name="PoissonDistribution" />
  <javadoc>
    <text>Creates a new Poisson distribution with specified mean, convergence
 * criterion and maximum number of iterations.</text>
    <param>p Poisson mean.</param>
    <param>epsilon Convergence criterion for cumulative probabilities.</param>
    <param>maxIterations the maximum number of iterations for cumulative
 * probabilities.</param>
    <throws>NotStrictlyPositiveException if {@code p &lt;= 0}.</throws>
    <since>2.1</since>
  </javadoc>
  <method type="constructor" name="PoissonDistribution" />
  <javadoc>
    <text>Creates a new Poisson distribution with specified mean, convergence
 * criterion and maximum number of iterations.</text>
    <param>rng Random number generator.</param>
    <param>p Poisson mean.</param>
    <param>epsilon Convergence criterion for cumulative probabilities.</param>
    <param>maxIterations the maximum number of iterations for cumulative
 * probabilities.</param>
    <throws>NotStrictlyPositiveException if {@code p &lt;= 0}.</throws>
    <since>3.1</since>
  </javadoc>
  <method type="constructor" name="PoissonDistribution">
    <scope />
    <comment>Use the same RNG instance as the parent class.</comment>
  </method>
  <javadoc>
    <text>Creates a new Poisson distribution with the specified mean and
 * convergence criterion.</text>
    <param>p Poisson mean.</param>
    <param>epsilon Convergence criterion for cumulative probabilities.</param>
    <throws>NotStrictlyPositiveException if {@code p &lt;= 0}.</throws>
    <since>2.1</since>
  </javadoc>
  <method type="constructor" name="PoissonDistribution" />
  <javadoc>
    <text>Creates a new Poisson distribution with the specified mean and maximum
 * number of iterations.</text>
    <param>p Poisson mean.</param>
    <param>maxIterations Maximum number of iterations for cumulative
 * probabilities.</param>
    <since>2.1</since>
  </javadoc>
  <method type="constructor" name="PoissonDistribution" />
  <javadoc>
    <text>Get the mean for the distribution.</text>
    <return>the mean for the distribution.</return>
  </javadoc>
  <method type="double" name="getMean" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="probability">
    <declaration type="double" name="ret" />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="cumulativeProbability">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Calculates the Poisson distribution function using a normal
 * approximation. The {@code N(mean, sqrt(mean))} distribution is used
 * to approximate the Poisson distribution. The computation uses
 * "half-correction" (evaluating the normal distribution function at{@code x + 0.5}).</text>
    <param>x Upper bound, inclusive.</param>
    <return>the distribution function value calculated using a normal
 * approximation.</return>
  </javadoc>
  <method type="double" name="normalApproximateProbability">
    <comment>calculate the probability using half-correction</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}For mean parameter {@code p}, the mean is {@code p}.</text>
  </javadoc>
  <method type="double" name="getNumericalMean" />
  <javadoc>
    <text>{@inheritDoc}For mean parameter {@code p}, the variance is {@code p}.</text>
  </javadoc>
  <method type="double" name="getNumericalVariance" />
  <javadoc>
    <text>{@inheritDoc}The lower bound of the support is always 0 no matter the mean parameter.</text>
    <return>lower bound of the support (always 0)</return>
  </javadoc>
  <method type="int" name="getSupportLowerBound" />
  <javadoc>
    <text>{@inheritDoc}The upper bound of the support is positive infinity,
 * regardless of the parameter values. There is no integer infinity,
 * so this method returns {@code Integer.MAX_VALUE}.</text>
    <return>upper bound of the support (always {@code Integer.MAX_VALUE} for
 * positive infinity)</return>
  </javadoc>
  <method type="int" name="getSupportUpperBound" />
  <javadoc>
    <text>{@inheritDoc}The support of this distribution is connected.</text>
    <return>{@code true}</return>
  </javadoc>
  <method type="boolean" name="isSupportConnected" />
  <javadoc>
    <text>{@inheritDoc}&lt;p&gt;
 * &lt;strong&gt;Algorithm Description&lt;/strong&gt;:
 * &lt;ul&gt;
 * &lt;li&gt;For small means, uses simulation of a Poisson process
 * using Uniform deviates, as described
 * &lt;a href="http://irmi.epfl.ch/cmos/Pmmi/interactive/rng7.htm"&gt; here&lt;/a&gt;.
 * The Poisson process (and hence value returned) is bounded by 1000 * mean.
 * &lt;/li&gt;
 * &lt;li&gt;For large means, uses the rejection algorithm described in
 * &lt;quote&gt;
 * Devroye, Luc. (1981).&lt;i&gt;The Computer Generation of Poisson Random Variables&lt;/i&gt;
 * &lt;strong&gt;Computing&lt;/strong&gt; vol. 26 pp. 197-207.
 * &lt;/quote&gt;
 * &lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;</text>
    <return>a random value.</return>
    <since>2.2</since>
  </javadoc>
  <method type="int" name="sample" />
  <javadoc>
    <param>meanPoisson Mean of the Poisson distribution.</param>
    <return>the next sample.</return>
  </javadoc>
  <method type="long" name="nextPoisson">
    <declaration type="double" name="pivot" />
    <scope>
      <declaration type="double" name="p" />
      <declaration type="long" name="n" />
      <declaration type="double" name="r" />
      <declaration type="double" name="rnd" />
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
    <scope>
      <declaration type="double" name="lambda" />
      <declaration type="double" name="lambdaFractional" />
      <declaration type="double" name="logLambda" />
      <declaration type="double" name="logLambdaFactorial" />
      <declaration type="long" name="y2" />
      <declaration type="double" name="delta" />
      <declaration type="double" name="halfDelta" />
      <declaration type="double" name="twolpd" />
      <declaration type="double" name="a1" />
      <declaration type="double" name="a2" />
      <declaration type="double" name="aSum" />
      <declaration type="double" name="p1" />
      <declaration type="double" name="p2" />
      <declaration type="double" name="c1" />
      <declaration type="double" name="x" />
      <declaration type="double" name="y" />
      <declaration type="double" name="v" />
      <declaration type="int" name="a" />
      <declaration type="double" name="t" />
      <declaration type="double" name="qr" />
      <declaration type="double" name="qa" />
      <scope>
        <declaration type="double" name="u" />
        <scope>
          <declaration type="double" name="n" />
          <scope />
          <declaration type="double" name="e" />
        </scope>
        <scope>
          <scope />
          <scope />
        </scope>
        <scope />
        <scope />
        <scope />
        <scope />
      </scope>
    </scope>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
