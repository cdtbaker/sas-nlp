<?xml version="1.0" encoding="UTF-8"?>
<class name="FirstMoment">
  <javadoc>
    <text>Computes the first moment (arithmetic mean).  Uses the definitional formula:
 * &lt;p&gt;
 * mean = sum(x_i) / n &lt;/p&gt;
 * &lt;p&gt;
 * where &lt;code&gt;n&lt;/code&gt; is the number of observations. &lt;/p&gt;
 * &lt;p&gt;
 * To limit numeric errors, the value of the statistic is computed using the
 * following recursive updating algorithm: &lt;/p&gt;
 * &lt;p&gt;
 * &lt;ol&gt;
 * &lt;li&gt;Initialize &lt;code&gt;m = &lt;/code&gt; the first value&lt;/li&gt;
 * &lt;li&gt;For each additional value, update using &lt;br&gt;
 * &lt;code&gt;m = m + (new value - m) / (number of observations)&lt;/code&gt;&lt;/li&gt;
 * &lt;/ol&gt;&lt;/p&gt;
 * &lt;p&gt;
 * Returns &lt;code&gt;Double.NaN&lt;/code&gt; if the dataset is empty.&lt;/p&gt;
 * &lt;p&gt;
 * &lt;strong&gt;Note that this implementation is not synchronized.&lt;/strong&gt; If
 * multiple threads access an instance of this class concurrently, and at least
 * one of the threads invokes the &lt;code&gt;increment()&lt;/code&gt; or
 * &lt;code&gt;clear()&lt;/code&gt; method, it must be synchronized externally.&lt;/p&gt;</text>
    <version>$Id: FirstMoment.java 1416643 2012-12-03 19:37:14Z tn $</version>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Count of values that have been added</text>
  </javadoc>
  <declaration type="long" name="n" />
  <javadoc>
    <text>First moment of values that have been added</text>
  </javadoc>
  <declaration type="double" name="m1" />
  <javadoc>
    <text>Deviation of most recently added value from previous first moment.
 * Retained to prevent repeated computation in higher order moments.</text>
  </javadoc>
  <declaration type="double" name="dev" />
  <javadoc>
    <text>Deviation of most recently added value from previous first moment,
 * normalized by previous sample size.  Retained to prevent repeated
 * computation in higher order moments</text>
  </javadoc>
  <declaration type="double" name="nDev" />
  <javadoc>
    <text>Create a FirstMoment instance</text>
  </javadoc>
  <method type="constructor" name="FirstMoment" />
  <javadoc>
    <text>Copy constructor, creates a new {@code FirstMoment} identical
 * to the {@code original}</text>
    <param>original the {@code FirstMoment} instance to copy</param>
    <throws>NullArgumentException if original is null</throws>
  </javadoc>
  <method type="constructor" name="FirstMoment" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="increment">
    <scope />
    <declaration type="double" name="n0" />
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="clear" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getResult" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="long" name="getN" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="FirstMoment" name="copy">
    <declaration type="FirstMoment" name="result" />
    <comment>No try-catch or advertised exception because args are guaranteed non-null</comment>
  </method>
  <javadoc>
    <text>Copies source to dest.
 * &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;</text>
    <param>source FirstMoment to copy</param>
    <param>dest FirstMoment to copy to</param>
    <throws>NullArgumentException if either source or dest is null</throws>
  </javadoc>
  <method type="void" name="copy" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
