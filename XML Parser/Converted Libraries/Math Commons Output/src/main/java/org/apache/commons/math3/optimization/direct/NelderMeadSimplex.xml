<?xml version="1.0" encoding="UTF-8"?>
<class name="NelderMeadSimplex">
  <javadoc>
    <text>This class implements the Nelder-Mead simplex algorithm.</text>
    <version>$Id: NelderMeadSimplex.java 1422230 2012-12-15 12:11:13Z erans $</version>
    <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
    <since>3.0</since>
  </javadoc>
  <javadoc>
    <text>Default value for {@link #rho}: {@value}.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_RHO" />
  <javadoc>
    <text>Default value for {@link #khi}: {@value}.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_KHI" />
  <javadoc>
    <text>Default value for {@link #gamma}: {@value}.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_GAMMA" />
  <javadoc>
    <text>Default value for {@link #sigma}: {@value}.</text>
  </javadoc>
  <declaration type="double" name="DEFAULT_SIGMA" />
  <javadoc>
    <text>Reflection coefficient.</text>
  </javadoc>
  <declaration type="double" name="rho" />
  <javadoc>
    <text>Expansion coefficient.</text>
  </javadoc>
  <declaration type="double" name="khi" />
  <javadoc>
    <text>Contraction coefficient.</text>
  </javadoc>
  <declaration type="double" name="gamma" />
  <javadoc>
    <text>Shrinkage coefficient.</text>
  </javadoc>
  <declaration type="double" name="sigma" />
  <javadoc>
    <text>Build a Nelder-Mead simplex with default coefficients.
 * The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
 * for both gamma and sigma.</text>
    <param>n Dimension of the simplex.</param>
  </javadoc>
  <method type="constructor" name="NelderMeadSimplex" />
  <javadoc>
    <text>Build a Nelder-Mead simplex with default coefficients.
 * The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
 * for both gamma and sigma.</text>
    <param>n Dimension of the simplex.</param>
    <param>sideLength Length of the sides of the default (hypercube)
 * simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.</param>
  </javadoc>
  <method type="constructor" name="NelderMeadSimplex" />
  <javadoc>
    <text>Build a Nelder-Mead simplex with specified coefficients.</text>
    <param>n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int,double)}.</param>
    <param>sideLength Length of the sides of the default (hypercube)
 * simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.</param>
    <param>rho Reflection coefficient.</param>
    <param>khi Expansion coefficient.</param>
    <param>gamma Contraction coefficient.</param>
    <param>sigma Shrinkage coefficient.</param>
  </javadoc>
  <method type="constructor" name="NelderMeadSimplex" />
  <javadoc>
    <text>Build a Nelder-Mead simplex with specified coefficients.</text>
    <param>n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int)}.</param>
    <param>rho Reflection coefficient.</param>
    <param>khi Expansion coefficient.</param>
    <param>gamma Contraction coefficient.</param>
    <param>sigma Shrinkage coefficient.</param>
  </javadoc>
  <method type="constructor" name="NelderMeadSimplex" />
  <javadoc>
    <text>Build a Nelder-Mead simplex with default coefficients.
 * The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
 * for both gamma and sigma.</text>
    <param>steps Steps along the canonical axes representing box edges.
 * They may be negative but not zero. See</param>
  </javadoc>
  <method type="constructor" name="NelderMeadSimplex" />
  <javadoc>
    <text>Build a Nelder-Mead simplex with specified coefficients.</text>
    <param>steps Steps along the canonical axes representing box edges.
 * They may be negative but not zero. See{@link AbstractSimplex#AbstractSimplex(double[])}.</param>
    <param>rho Reflection coefficient.</param>
    <param>khi Expansion coefficient.</param>
    <param>gamma Contraction coefficient.</param>
    <param>sigma Shrinkage coefficient.</param>
    <throws>IllegalArgumentException if one of the steps is zero.</throws>
  </javadoc>
  <method type="constructor" name="NelderMeadSimplex" />
  <javadoc>
    <text>Build a Nelder-Mead simplex with default coefficients.
 * The default coefficients are 1.0 for rho, 2.0 for khi and 0.5
 * for both gamma and sigma.</text>
    <param>referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.</param>
  </javadoc>
  <method type="constructor" name="NelderMeadSimplex" />
  <javadoc>
    <text>Build a Nelder-Mead simplex with specified coefficients.</text>
    <param>referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.</param>
    <param>rho Reflection coefficient.</param>
    <param>khi Expansion coefficient.</param>
    <param>gamma Contraction coefficient.</param>
    <param>sigma Shrinkage coefficient.</param>
    <throws>org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif the reference simplex does not contain at least one point.</throws>
    <throws>org.apache.commons.math3.exception.DimensionMismatchExceptionif there is a dimension mismatch in the reference simplex.</throws>
  </javadoc>
  <method type="constructor" name="NelderMeadSimplex" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="iterate">
    <declaration type="int" name="n" />
    <declaration type="PointValuePair" name="best" />
    <declaration type="PointValuePair" name="secondBest" />
    <declaration type="PointValuePair" name="worst" />
    <declaration type="double[]" name="xWorst" />
    <declaration type="double[]" name="centroid" />
    <scope>
      <declaration type="double[]" name="x" />
      <scope />
    </scope>
    <declaration type="double" name="scaling" />
    <scope />
    <declaration type="double[]" name="xR" />
    <scope />
    <declaration type="PointValuePair" name="reflected" />
    <scope />
    <scope>
      <declaration type="double[]" name="xE" />
      <scope />
      <declaration type="PointValuePair" name="expanded" />
      <scope />
      <scope />
    </scope>
    <scope>
      <scope>
        <declaration type="double[]" name="xC" />
        <scope />
        <declaration type="PointValuePair" name="outContracted" />
        <scope />
      </scope>
      <scope>
        <declaration type="double[]" name="xC" />
        <scope />
        <declaration type="PointValuePair" name="inContracted" />
        <scope />
      </scope>
      <declaration type="double[]" name="xSmallest" />
      <scope>
        <declaration type="double[]" name="x" />
        <scope />
      </scope>
    </scope>
    <comment>The simplex has n + 1 points if dimension is n.</comment>
    <comment>Interesting values.</comment>
    <comment>Compute the centroid of the best vertices (dismissing the worst</comment>
    <comment>point at index n).</comment>
    <comment>compute the reflection point</comment>
    <comment>Accept the reflected point.</comment>
    <comment>Compute the expansion point.</comment>
    <comment>Accept the expansion point.</comment>
    <comment>Accept the reflected point.</comment>
    <comment>Perform an outside contraction.</comment>
    <comment>Accept the contraction point.</comment>
    <comment>Perform an inside contraction.</comment>
    <comment>Accept the contraction point.</comment>
    <comment>Perform a shrink.</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
