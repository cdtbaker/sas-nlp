<?xml version="1.0" encoding="UTF-8"?>
<class name="PolynomialFitterTest">
  <javadoc>
    <text>Test for class {@link CurveFitter} where the function to fit is a
 * polynomial.</text>
  </javadoc>
  <method type="void" name="testFit">
    <declaration type="RealDistribution" name="rng" />
    <declaration type="LevenbergMarquardtOptimizer" name="optim" />
    <declaration type="PolynomialFitter" name="fitter" />
    <declaration type="double[]" name="coeff" />
    <declaration type="PolynomialFunction" name="f" />
    <scope>
      <declaration type="double" name="x" />
    </scope>
    <declaration type="double[][]" name="best" />
    <comment>12.9 - 3.4 x + 2.1 x^2</comment>
    <comment>Collect data from a known polynomial.</comment>
    <comment>Start fit from initial guesses that are far from the optimal values.</comment>
  </method>
  <method type="void" name="testNoError">
    <declaration type="Random" name="randomizer" />
    <scope>
      <declaration type="PolynomialFunction" name="p" />
      <declaration type="PolynomialFitter" name="fitter" />
      <scope />
      <declaration type="double[]" name="init" />
      <declaration type="PolynomialFunction" name="fitted" />
      <scope>
        <declaration type="double" name="error" />
      </scope>
    </scope>
  </method>
  <method type="void" name="testSmallError">
    <declaration type="Random" name="randomizer" />
    <declaration type="double" name="maxError" />
    <scope>
      <declaration type="PolynomialFunction" name="p" />
      <declaration type="PolynomialFitter" name="fitter" />
      <scope />
      <declaration type="double[]" name="init" />
      <declaration type="PolynomialFunction" name="fitted" />
      <scope>
        <declaration type="double" name="error" />
      </scope>
    </scope>
  </method>
  <method type="void" name="testMath798">
    <declaration type="double" name="tol" />
    <declaration type="SimpleVectorValueChecker" name="checker" />
    <declaration type="double[][]" name="init" />
    <declaration type="int" name="maxEval" />
    <declaration type="double[]" name="lm" />
    <declaration type="double[]" name="gn" />
    <scope />
  </method>
  <javadoc>
    <text>This test shows that the user can set the maximum number of iterations
 * to avoid running for too long.
 * But in the test case, the real problem is that the tolerance is way too
 * stringent.</text>
  </javadoc>
  <method type="void" name="testMath798WithToleranceTooLow">
    <declaration type="double" name="tol" />
    <declaration type="SimpleVectorValueChecker" name="checker" />
    <declaration type="double[][]" name="init" />
    <declaration type="int" name="maxEval" />
    <declaration type="double[]" name="gn" />
    <comment>Trying hard to fit.</comment>
  </method>
  <javadoc>
    <text>This test shows that the user can set the maximum number of iterations
 * to avoid running for too long.
 * Even if the real problem is that the tolerance is way too stringent, it
 * is possible to get the best solution so far, i.e. a checker will return
 * the point when the maximum iteration count has been reached.</text>
  </javadoc>
  <method type="void" name="testMath798WithToleranceTooLowButNoException">
    <declaration type="double" name="tol" />
    <declaration type="double[][]" name="init" />
    <declaration type="int" name="maxEval" />
    <declaration type="SimpleVectorValueChecker" name="checker" />
    <declaration type="double[]" name="lm" />
    <declaration type="double[]" name="gn" />
    <scope />
    <comment>Trying hard to fit.</comment>
  </method>
  <javadoc>
    <param>optimizer Optimizer.</param>
    <param>maxEval Maximum number of function evaluations.</param>
    <param>init First guess.</param>
    <return>the solution found by the given optimizer.</return>
  </javadoc>
  <method type="double[]" name="doMath798">
    <declaration type="CurveFitter&lt;Parametric&gt;" name="fitter" />
    <declaration type="double[]" name="coeff" />
  </method>
  <method type="void" name="testRedundantSolvable">
    <comment>Levenberg-Marquardt should handle redundant information gracefully</comment>
  </method>
  <method type="void" name="testRedundantUnsolvable">
    <comment>Gauss-Newton should not be able to solve redundant information</comment>
  </method>
  <method type="void" name="testLargeSample">
    <declaration type="Random" name="randomizer" />
    <declaration type="double" name="maxError" />
    <scope>
      <declaration type="PolynomialFunction" name="p" />
      <declaration type="PolynomialFitter" name="fitter" />
      <scope>
        <declaration type="double" name="x" />
      </scope>
      <declaration type="double[]" name="init" />
      <declaration type="PolynomialFunction" name="fitted" />
      <scope>
        <declaration type="double" name="error" />
      </scope>
    </scope>
  </method>
  <method type="void" name="checkUnsolvableProblem">
    <declaration type="Random" name="randomizer" />
    <scope>
      <declaration type="PolynomialFunction" name="p" />
      <declaration type="PolynomialFitter" name="fitter" />
      <scope />
      <scope>
        <declaration type="double[]" name="init" />
      </scope>
      <scope />
    </scope>
    <comment>reusing the same point over and over again does not bring</comment>
    <comment>information, the problem cannot be solved in this case for</comment>
    <comment>degrees greater than 1 (but one point is sufficient for</comment>
    <comment>degree 0)</comment>
  </method>
  <method type="PolynomialFunction" name="buildRandomPolynomial">
    <declaration type="double[]" name="coefficients" />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
