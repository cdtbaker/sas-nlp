<?xml version="1.0" encoding="UTF-8"?>
<class name="RealVectorAbstractTest">
  <javadoc>
    <text>&lt;p&gt;
 * This is an attempt at covering most particular cases of combining two
 * values. Here {@code x} is the value returned by{@link #getPreferredEntryValue()}, while {@code y} and {@code z} are two
 * "normal" values.
 * &lt;/p&gt;
 * &lt;ol&gt;
 * &lt;li&gt;
 * Addition: the following cases should be covered
 * &lt;ul&gt;
 * &lt;li&gt;{@code (2 * x) + (-x)}&lt;/li&gt;
 * &lt;li&gt;{@code (-x) + 2 * x}&lt;/li&gt;
 * &lt;li&gt;{@code x + y}&lt;/li&gt;
 * &lt;li&gt;{@code y + x}&lt;/li&gt;
 * &lt;li&gt;{@code y + z}&lt;/li&gt;
 * &lt;li&gt;{@code y + (x - y)}&lt;/li&gt;
 * &lt;li&gt;{@code (y - x) + x}&lt;/li&gt;
 * &lt;/ul&gt;
 * The values to be considered are:{@code x, y, z, 2 * x, -x, x - y, y - x}.
 * &lt;/li&gt;
 * &lt;li&gt;
 * Subtraction: the following cases should be covered
 * &lt;ul&gt;
 * &lt;li&gt;{@code (2 * x) - x}&lt;/li&gt;
 * &lt;li&gt;{@code x - y}&lt;/li&gt;
 * &lt;li&gt;{@code y - x}&lt;/li&gt;
 * &lt;li&gt;{@code y - z}&lt;/li&gt;
 * &lt;li&gt;{@code y - (y - x)}&lt;/li&gt;
 * &lt;li&gt;{@code (y + x) - y}&lt;/li&gt;
 * &lt;/ul&gt;
 * The values to be considered are: {@code x, y, z, x + y, y - x}.
 * &lt;/li&gt;
 * &lt;li&gt;
 * Multiplication
 * &lt;ul&gt;
 * &lt;li&gt;{@code (x * x) * (1 / x)}&lt;/li&gt;
 * &lt;li&gt;{@code (1 / x) * (x * x)}&lt;/li&gt;
 * &lt;li&gt;{@code x * y}&lt;/li&gt;
 * &lt;li&gt;{@code y * x}&lt;/li&gt;
 * &lt;li&gt;{@code y * z}&lt;/li&gt;
 * &lt;/ul&gt;
 * The values to be considered are: {@code x, y, z, 1 / x, x * x}.
 * &lt;/li&gt;
 * &lt;li&gt;
 * Division
 * &lt;ul&gt;
 * &lt;li&gt;{@code (x * x) / x}&lt;/li&gt;
 * &lt;li&gt;{@code x / y}&lt;/li&gt;
 * &lt;li&gt;{@code y / x}&lt;/li&gt;
 * &lt;li&gt;{@code y / z}&lt;/li&gt;
 * &lt;/ul&gt;
 * The values to be considered are: {@code x, y, z, x * x}.
 * &lt;/li&gt;
 * &lt;/ol&gt;
 * Also to be considered {@code NaN}, {@code POSITIVE_INFINITY},{@code NEGATIVE_INFINITY}, {@code +0.0}, {@code -0.0}.</text>
  </javadoc>
  <declaration type="double[]" name="values" />
  <method name="create" type="RealVector" />
  <javadoc>
    <text>Creates a new instance of {@link RealVector}, with specified entries.
 * The returned vector must be of the type currently tested. It should be
 * noted that some tests assume that no references to the specified{@code double[]} are kept in the returned object: if necessary, defensive
 * copy of this array should be made.</text>
    <param>data the entries of the vector to be created</param>
    <return>a new {@link RealVector} of the type to be tested</return>
  </javadoc>
  <javadoc>
    <text>Creates a new instance of {@link RealVector}, with specified entries.
 * The type of the returned vector must be different from the type currently
 * tested. It should be noted that some tests assume that no references to
 * the specified {@code double[]} are kept in the returned object: if
 * necessary, defensive copy of this array should be made.</text>
    <param>data the entries of the vector to be created</param>
    <return>a new {@link RealVector} of an alien type</return>
  </javadoc>
  <method type="RealVector" name="createAlien" />
  <javadoc>
    <text>Returns a preferred value of the entries, to be tested specifically. Some
 * implementations of {@link RealVector} (e.g. {@link OpenMapRealVector}) do
 * not store specific values of entries. In order to ensure that all tests
 * take into account this specific value, some entries of the vectors to be
 * tested are deliberately set to the value returned by the present method.
 * The default implementation returns {@code 0.0}.</text>
    <return>a value which &lt;em&gt;should&lt;/em&gt; be present in all vectors to be
 * tested</return>
  </javadoc>
  <method type="double" name="getPreferredEntryValue" />
  <method type="constructor" name="RealVectorAbstractTest">
    <declaration type="double" name="x" />
    <declaration type="double" name="y" />
    <declaration type="double" name="z" />
    <comment>Make sure that x, y, z are three different values. Also, x is the
 preferred value (e.g. the value which is not stored in sparse
 implementations).</comment>
  </method>
  <method type="void" name="testGetDimension">
    <declaration type="double" name="x" />
    <declaration type="double[]" name="data1" />
    <declaration type="double" name="y" />
    <declaration type="double[]" name="data2" />
  </method>
  <method type="void" name="testGetEntry">
    <declaration type="double" name="x" />
    <declaration type="double[]" name="data" />
    <declaration type="RealVector" name="v" />
    <scope />
  </method>
  <method type="void" name="testGetEntryInvalidIndex1" />
  <method type="void" name="testGetEntryInvalidIndex2" />
  <method type="void" name="testSetEntry">
    <declaration type="double" name="x" />
    <declaration type="double[]" name="data" />
    <declaration type="double[]" name="expected" />
    <declaration type="RealVector" name="actual" />
    <scope>
      <declaration type="double" name="oldValue" />
      <declaration type="double" name="newValue" />
    </scope>
    <scope>
      <declaration type="double" name="oldValue" />
      <declaration type="double" name="newValue" />
    </scope>
    <comment>Try setting to any value.</comment>
    <comment>Try setting to the preferred value.</comment>
  </method>
  <method type="void" name="testSetEntryInvalidIndex1" />
  <method type="void" name="testSetEntryInvalidIndex2" />
  <method type="void" name="testAddToEntry">
    <declaration type="double" name="x" />
    <declaration type="double[]" name="data1" />
    <declaration type="double[]" name="data2" />
    <declaration type="double[]" name="expected" />
    <declaration type="RealVector" name="actual" />
    <declaration type="double" name="increment" />
    <scope>
      <declaration type="double" name="oldValue" />
    </scope>
    <scope>
      <declaration type="double" name="oldValue" />
    </scope>
    <comment>Try adding any value.</comment>
    <comment>Try incrementing so that result is equal to preferred value.</comment>
  </method>
  <method type="void" name="testAddToEntryInvalidIndex1" />
  <method type="void" name="testAddToEntryInvalidIndex2" />
  <method type="void" name="doTestAppendVector">
    <declaration type="int" name="n1" />
    <declaration type="int" name="n2" />
    <declaration type="RealVector" name="v" />
    <scope>
      <declaration type="String" name="msg" />
    </scope>
    <scope>
      <declaration type="String" name="msg" />
    </scope>
  </method>
  <method type="void" name="testAppendVector">
    <declaration type="double" name="x" />
    <declaration type="double[]" name="data1" />
    <declaration type="double[]" name="data2" />
  </method>
  <method type="void" name="doTestAppendScalar">
    <declaration type="int" name="n" />
    <declaration type="RealVector" name="w" />
    <scope>
      <declaration type="String" name="msg" />
    </scope>
    <declaration type="String" name="msg" />
  </method>
  <method type="void" name="testAppendScalar">
    <declaration type="double" name="x" />
    <declaration type="double[][]" name="data" />
  </method>
  <method type="void" name="testGetSubVector">
    <declaration type="double" name="x" />
    <declaration type="double[]" name="data" />
    <declaration type="int" name="index" />
    <declaration type="int" name="n" />
    <declaration type="RealVector" name="actual" />
    <declaration type="double[]" name="expected" />
  </method>
  <method type="void" name="testGetSubVectorInvalidIndex1">
    <declaration type="int" name="n" />
  </method>
  <method type="void" name="testGetSubVectorInvalidIndex2">
    <declaration type="int" name="n" />
  </method>
  <method type="void" name="testGetSubVectorInvalidIndex3">
    <declaration type="int" name="n" />
  </method>
  <method type="void" name="testGetSubVectorInvalidIndex4">
    <declaration type="int" name="n" />
  </method>
  <method type="void" name="testSetSubVectorSameType">
    <declaration type="double" name="x" />
    <declaration type="double[]" name="expected" />
    <declaration type="double[]" name="sub" />
    <declaration type="RealVector" name="actual" />
    <declaration type="int" name="index" />
    <scope />
  </method>
  <method type="void" name="testSetSubVectorMixedType">
    <declaration type="double" name="x" />
    <declaration type="double[]" name="expected" />
    <declaration type="double[]" name="sub" />
    <declaration type="RealVector" name="actual" />
    <declaration type="int" name="index" />
    <scope />
  </method>
  <method type="void" name="testSetSubVectorInvalidIndex1" />
  <method type="void" name="testSetSubVectorInvalidIndex2" />
  <method type="void" name="testSetSubVectorInvalidIndex3" />
  <method type="void" name="testIsNaN">
    <declaration type="RealVector[]" name="v" />
  </method>
  <method type="void" name="testIsInfinite">
    <declaration type="RealVector[]" name="v" />
  </method>
  <method type="void" name="doTestEbeBinaryOperation">
    <declaration type="double[]" name="data1" />
    <declaration type="double[]" name="data2" />
    <declaration type="int" name="k" />
    <scope>
      <scope />
    </scope>
    <declaration type="RealVector" name="v1" />
    <declaration type="RealVector" name="v2" />
    <declaration type="RealVector" name="actual" />
    <declaration type="double[]" name="expected" />
    <scope />
    <scope>
      <declaration type="String" name="msg" />
    </scope>
  </method>
  <method type="void" name="doTestEbeBinaryOperationDimensionMismatch">
    <declaration type="int" name="n" />
  </method>
  <method type="void" name="testAddSameType" />
  <method type="void" name="testAddMixedTypes" />
  <method type="void" name="testAddDimensionMismatch" />
  <method type="void" name="testSubtractSameType" />
  <method type="void" name="testSubtractMixedTypes" />
  <method type="void" name="testSubtractDimensionMismatch" />
  <method type="void" name="testEbeMultiplySameType" />
  <method type="void" name="testEbeMultiplyMixedTypes" />
  <method type="void" name="testEbeMultiplyDimensionMismatch" />
  <method type="void" name="testEbeDivideSameType" />
  <method type="void" name="testEbeDivideMixedTypes" />
  <method type="void" name="testEbeDivideDimensionMismatch" />
  <method type="void" name="doTestGetDistance">
    <declaration type="double" name="x" />
    <declaration type="double[][]" name="data1" />
    <declaration type="double[][]" name="data2" />
    <declaration type="RealVector" name="v1" />
    <declaration type="RealVector" name="v2" />
    <scope />
    <scope />
    <declaration type="double" name="actual" />
    <declaration type="double" name="expected" />
    <scope>
      <declaration type="double" name="delta" />
    </scope>
  </method>
  <method type="void" name="testGetDistanceSameType" />
  <method type="void" name="testGetDistanceMixedTypes" />
  <method type="void" name="testGetDistanceDimensionMismatch" />
  <method type="void" name="testGetNorm">
    <declaration type="double" name="x" />
    <declaration type="double[][]" name="data" />
    <declaration type="RealVector" name="v" />
    <declaration type="double" name="actual" />
    <declaration type="double" name="expected" />
    <scope />
  </method>
  <method type="void" name="doTestGetL1Distance">
    <declaration type="double" name="x" />
    <declaration type="double[][]" name="data1" />
    <declaration type="double[][]" name="data2" />
    <declaration type="RealVector" name="v1" />
    <declaration type="RealVector" name="v2" />
    <scope />
    <scope />
    <declaration type="double" name="actual" />
    <declaration type="double" name="expected" />
    <scope>
      <declaration type="double" name="delta" />
    </scope>
  </method>
  <method type="void" name="testGetL1DistanceSameType" />
  <method type="void" name="testGetL1DistanceMixedTypes" />
  <method type="void" name="testGetL1DistanceDimensionMismatch" />
  <method type="void" name="testGetL1Norm">
    <declaration type="double" name="x" />
    <declaration type="double[][]" name="data" />
    <declaration type="RealVector" name="v" />
    <declaration type="double" name="actual" />
    <declaration type="double" name="expected" />
    <scope />
  </method>
  <method type="void" name="doTestGetLInfDistance">
    <declaration type="double" name="x" />
    <declaration type="double[][]" name="data1" />
    <declaration type="double[][]" name="data2" />
    <declaration type="RealVector" name="v1" />
    <declaration type="RealVector" name="v2" />
    <scope />
    <scope />
    <declaration type="double" name="actual" />
    <declaration type="double" name="expected" />
    <scope>
      <declaration type="double" name="delta" />
    </scope>
  </method>
  <method type="void" name="testGetLInfDistanceSameType" />
  <method type="void" name="testGetLInfDistanceMixedTypes" />
  <method type="void" name="testGetLInfDistanceDimensionMismatch" />
  <method type="void" name="testGetLInfNorm">
    <declaration type="double" name="x" />
    <declaration type="double[][]" name="data" />
    <declaration type="RealVector" name="v" />
    <declaration type="double" name="actual" />
    <declaration type="double" name="expected" />
    <scope />
  </method>
  <method type="void" name="doTestMapBinaryOperation">
    <declaration type="double[]" name="expected" />
    <scope>
      <declaration type="double" name="d" />
      <scope />
      <declaration type="RealVector" name="v" />
      <declaration type="RealVector" name="actual" />
      <scope />
      <scope />
    </scope>
  </method>
  <method type="void" name="testMapAdd" />
  <method type="void" name="testMapAddToSelf" />
  <method type="void" name="testMapSubtract" />
  <method type="void" name="testMapSubtractToSelf" />
  <method type="void" name="testMapMultiply" />
  <method type="void" name="testMapMultiplyToSelf" />
  <method type="void" name="testMapDivide" />
  <method type="void" name="testMapDivideToSelf" />
  <method type="void" name="doTestMapFunction">
    <declaration type="double[]" name="data" />
    <declaration type="double[]" name="expected" />
    <scope />
    <declaration type="RealVector" name="v" />
    <declaration type="RealVector" name="actual" />
    <scope />
    <scope />
  </method>
  <method type="UnivariateFunction[]" name="createFunctions" />
  <method type="void" name="testMap">
    <declaration type="UnivariateFunction[]" name="functions" />
    <scope />
  </method>
  <method type="void" name="testMapToSelf">
    <declaration type="UnivariateFunction[]" name="functions" />
    <scope />
  </method>
  <method type="void" name="doTestOuterProduct">
    <declaration type="double[]" name="dataU" />
    <declaration type="RealVector" name="u" />
    <declaration type="double[]" name="dataV" />
    <declaration type="RealVector" name="v" />
    <scope />
    <scope />
    <declaration type="RealMatrix" name="uv" />
    <scope>
      <scope>
        <declaration type="double" name="expected" />
        <declaration type="double" name="actual" />
      </scope>
    </scope>
  </method>
  <method type="void" name="testOuterProductSameType" />
  <method type="void" name="testOuterProductMixedTypes" />
  <method type="void" name="doTestProjection">
    <declaration type="double" name="x" />
    <declaration type="double[]" name="data1" />
    <declaration type="double[]" name="data2" />
    <declaration type="double" name="dotProduct" />
    <declaration type="double" name="norm2" />
    <scope />
    <declaration type="double" name="s" />
    <declaration type="double[]" name="expected" />
    <scope />
    <declaration type="RealVector" name="v1" />
    <declaration type="RealVector" name="v2" />
    <scope />
    <scope />
    <declaration type="RealVector" name="actual" />
  </method>
  <method type="void" name="testProjectionSameType" />
  <method type="void" name="testProjectionMixedTypes" />
  <method type="void" name="testProjectionNullVector" />
  <method type="void" name="testProjectionDimensionMismatch">
    <declaration type="RealVector" name="v1" />
    <declaration type="RealVector" name="v2" />
  </method>
  <method type="void" name="testSet">
    <scope>
      <declaration type="double" name="expected" />
      <declaration type="RealVector" name="v" />
      <scope />
    </scope>
  </method>
  <method type="void" name="testToArray">
    <declaration type="double[]" name="data" />
    <scope />
  </method>
  <method type="void" name="doTestUnitVector">
    <declaration type="double" name="x" />
    <declaration type="double[]" name="data" />
    <declaration type="double" name="norm" />
    <scope />
    <declaration type="double[]" name="expected" />
    <scope />
    <declaration type="RealVector" name="v" />
    <declaration type="RealVector" name="actual" />
    <scope />
    <scope />
  </method>
  <method type="void" name="testUnitVector" />
  <method type="void" name="testUnitize" />
  <method type="void" name="doTestUnitVectorNullVector">
    <declaration type="double[]" name="data" />
    <scope />
    <scope />
  </method>
  <method type="void" name="testUnitVectorNullVector" />
  <method type="void" name="testUnitizeNullVector" />
  <method type="void" name="testIterator">
    <declaration type="RealVector" name="v" />
    <declaration type="Iterator&lt;RealVector.Entry&gt;" name="it" />
    <scope>
      <declaration type="RealVector.Entry" name="e" />
      <scope />
      <scope />
    </scope>
    <scope />
    <scope />
    <comment>Expected behavior</comment>
    <comment>Expected behavior</comment>
  </method>
  <method type="void" name="doTestCombine">
    <declaration type="int" name="n" />
    <declaration type="double[]" name="data1" />
    <declaration type="double[]" name="data2" />
    <scope>
      <scope>
        <declaration type="int" name="index" />
      </scope>
    </scope>
    <declaration type="RealVector" name="v1" />
    <declaration type="RealVector" name="v2" />
    <declaration type="double[]" name="expected" />
    <scope>
      <declaration type="double" name="a1" />
      <scope>
        <declaration type="double" name="a2" />
        <scope />
        <declaration type="RealVector" name="actual" />
        <scope>
          <declaration type="RealVector" name="v1bis" />
        </scope>
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="doTestCombineDimensionMismatch">
    <declaration type="RealVector" name="v1" />
    <declaration type="RealVector" name="v2" />
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <method type="void" name="testCombineSameType" />
  <method type="void" name="testCombineMixedTypes" />
  <method type="void" name="testCombineDimensionMismatchSameType" />
  <method type="void" name="testCombineDimensionMismatchMixedTypes" />
  <method type="void" name="testCombineToSelfSameType" />
  <method type="void" name="testCombineToSelfMixedTypes" />
  <method type="void" name="testCombineToSelfDimensionMismatchSameType" />
  <method type="void" name="testCombineToSelfDimensionMismatchMixedTypes" />
  <method type="void" name="testCopy">
    <declaration type="RealVector" name="v" />
    <declaration type="RealVector" name="w" />
  </method>
  <method type="void" name="doTestDotProductRegularValues">
    <declaration type="double" name="x" />
    <declaration type="double[]" name="data1" />
    <declaration type="double[]" name="data2" />
    <declaration type="double" name="expected" />
    <scope />
    <declaration type="RealVector" name="v1" />
    <declaration type="RealVector" name="v2" />
    <scope />
    <scope />
    <declaration type="double" name="actual" />
  </method>
  <method type="void" name="doTestDotProductSpecialValues">
    <scope>
      <declaration type="double[]" name="data1" />
      <declaration type="RealVector" name="v1" />
      <scope>
        <declaration type="double[]" name="data2" />
        <declaration type="RealVector" name="v2" />
        <scope />
        <scope />
        <declaration type="double" name="expected" />
        <declaration type="double" name="actual" />
      </scope>
    </scope>
  </method>
  <method type="void" name="doTestDotProductDimensionMismatch">
    <declaration type="double[]" name="data1" />
    <declaration type="double[]" name="data2" />
    <declaration type="RealVector" name="v1" />
    <declaration type="RealVector" name="v2" />
    <scope />
    <scope />
  </method>
  <method type="void" name="testDotProductSameType" />
  <method type="void" name="testDotProductDimensionMismatchSameType" />
  <method type="void" name="testDotProductMixedTypes" />
  <method type="void" name="testDotProductDimensionMismatchMixedTypes" />
  <method type="void" name="doTestCosine">
    <declaration type="double" name="x" />
    <declaration type="double[]" name="data1" />
    <declaration type="double[]" name="data2" />
    <declaration type="double" name="norm1" />
    <declaration type="double" name="norm2" />
    <declaration type="double" name="dotProduct" />
    <scope />
    <declaration type="double" name="expected" />
    <declaration type="RealVector" name="v1" />
    <declaration type="RealVector" name="v2" />
    <scope />
    <scope />
    <declaration type="double" name="actual" />
  </method>
  <method type="void" name="testCosineSameType" />
  <method type="void" name="testCosineMixedTypes" />
  <method type="void" name="testCosineLeftNullVector">
    <declaration type="RealVector[]" name="v" />
    <declaration type="RealVector[]" name="w" />
  </method>
  <method type="void" name="testCosineRightNullVector">
    <declaration type="RealVector[]" name="v" />
    <declaration type="RealVector[]" name="w" />
  </method>
  <method type="void" name="testCosineDimensionMismatch">
    <declaration type="RealVector[]" name="v" />
    <declaration type="RealVector[]" name="w" />
  </method>
  <method type="void" name="testEquals">
    <declaration type="RealVector[]" name="v" />
  </method>
  <method type="void" name="testSerial">
    <declaration type="RealVector[]" name="v" />
  </method>
  <method type="void" name="testMinMax">
    <declaration type="RealVector[]" name="v1" />
    <declaration type="RealVector[]" name="v2" />
    <declaration type="RealVector[]" name="v3" />
    <declaration type="RealVector" name="v4" />
  </method>
  <javadoc>
    <text>The whole vector is visited.</text>
  </javadoc>
  <method type="void" name="testWalkInDefaultOrderPreservingVisitor1">
    <declaration type="double[][]" name="data" />
    <declaration type="RealVector" name="v" />
    <declaration type="RealVectorPreservingVisitor" name="visitor" />
    <declaration type="int" name="expectedIndex" />
    <method type="void" name="visit" />
    <method type="void" name="start" />
    <method type="double" name="end" />
  </method>
  <javadoc>
    <text>Visiting an invalid subvector.</text>
  </javadoc>
  <method type="void" name="testWalkInDefaultOrderPreservingVisitor2">
    <declaration type="RealVector" name="v" />
    <declaration type="RealVectorPreservingVisitor" name="visitor" />
    <method type="void" name="visit" />
    <method type="void" name="start" />
    <method type="double" name="end" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>Do nothing</comment>
    <comment>Do nothing</comment>
    <comment>Expected behavior</comment>
    <comment>Expected behavior</comment>
    <comment>Expected behavior</comment>
    <comment>Expected behavior</comment>
    <comment>Expected behavior</comment>
  </method>
  <javadoc>
    <text>Visiting a valid subvector.</text>
  </javadoc>
  <method type="void" name="testWalkInDefaultOrderPreservingVisitor3">
    <declaration type="double[][]" name="data" />
    <declaration type="int" name="expectedStart" />
    <declaration type="int" name="expectedEnd" />
    <declaration type="RealVector" name="v" />
    <declaration type="RealVectorPreservingVisitor" name="visitor" />
    <declaration type="int" name="expectedIndex" />
    <method type="void" name="visit" />
    <method type="void" name="start" />
    <method type="double" name="end" />
  </method>
  <javadoc>
    <text>The whole vector is visited.</text>
  </javadoc>
  <method type="void" name="testWalkInOptimizedOrderPreservingVisitor1">
    <declaration type="double[][]" name="data" />
    <declaration type="RealVector" name="v" />
    <declaration type="RealVectorPreservingVisitor" name="visitor" />
    <declaration type="boolean[]" name="visited" />
    <method type="void" name="visit" />
    <method type="void" name="start" />
    <method type="double" name="end">
      <scope />
    </method>
  </method>
  <javadoc>
    <text>Visiting an invalid subvector.</text>
  </javadoc>
  <method type="void" name="testWalkInOptimizedOrderPreservingVisitor2">
    <declaration type="RealVector" name="v" />
    <declaration type="RealVectorPreservingVisitor" name="visitor" />
    <method type="void" name="visit" />
    <method type="void" name="start" />
    <method type="double" name="end" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>Do nothing</comment>
    <comment>Do nothing</comment>
    <comment>Expected behavior</comment>
    <comment>Expected behavior</comment>
    <comment>Expected behavior</comment>
    <comment>Expected behavior</comment>
    <comment>Expected behavior</comment>
  </method>
  <javadoc>
    <text>Visiting a valid subvector.</text>
  </javadoc>
  <method type="void" name="testWalkInOptimizedOrderPreservingVisitor3">
    <declaration type="double[][]" name="data" />
    <declaration type="int" name="expectedStart" />
    <declaration type="int" name="expectedEnd" />
    <declaration type="RealVector" name="v" />
    <declaration type="RealVectorPreservingVisitor" name="visitor" />
    <declaration type="boolean[]" name="visited" />
    <method type="void" name="visit" />
    <method type="void" name="start" />
    <method type="double" name="end">
      <scope />
    </method>
  </method>
  <javadoc>
    <text>The whole vector is visited.</text>
  </javadoc>
  <method type="void" name="testWalkInDefaultOrderChangingVisitor1">
    <declaration type="double[][]" name="data" />
    <declaration type="RealVector" name="v" />
    <declaration type="RealVectorChangingVisitor" name="visitor" />
    <declaration type="int" name="expectedIndex" />
    <method type="double" name="visit" />
    <method type="void" name="start" />
    <method type="double" name="end" />
    <scope />
  </method>
  <javadoc>
    <text>Visiting an invalid subvector.</text>
  </javadoc>
  <method type="void" name="testWalkInDefaultOrderChangingVisitor2">
    <declaration type="RealVector" name="v" />
    <declaration type="RealVectorChangingVisitor" name="visitor" />
    <method type="double" name="visit" />
    <method type="void" name="start" />
    <method type="double" name="end" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>Do nothing</comment>
    <comment>Expected behavior</comment>
    <comment>Expected behavior</comment>
    <comment>Expected behavior</comment>
    <comment>Expected behavior</comment>
    <comment>Expected behavior</comment>
  </method>
  <javadoc>
    <text>Visiting a valid subvector.</text>
  </javadoc>
  <method type="void" name="testWalkInDefaultOrderChangingVisitor3">
    <declaration type="double[][]" name="data" />
    <declaration type="int" name="expectedStart" />
    <declaration type="int" name="expectedEnd" />
    <declaration type="RealVector" name="v" />
    <declaration type="RealVectorChangingVisitor" name="visitor" />
    <declaration type="int" name="expectedIndex" />
    <method type="double" name="visit" />
    <method type="void" name="start" />
    <method type="double" name="end" />
    <scope />
  </method>
  <javadoc>
    <text>The whole vector is visited.</text>
  </javadoc>
  <method type="void" name="testWalkInOptimizedOrderChangingVisitor1">
    <declaration type="double[][]" name="data" />
    <declaration type="RealVector" name="v" />
    <declaration type="RealVectorChangingVisitor" name="visitor" />
    <declaration type="boolean[]" name="visited" />
    <method type="double" name="visit" />
    <method type="void" name="start" />
    <method type="double" name="end">
      <scope />
    </method>
    <scope />
  </method>
  <javadoc>
    <text>Visiting an invalid subvector.</text>
  </javadoc>
  <method type="void" name="testWalkInOptimizedOrderChangingVisitor2">
    <declaration type="RealVector" name="v" />
    <declaration type="RealVectorChangingVisitor" name="visitor" />
    <method type="double" name="visit" />
    <method type="void" name="start" />
    <method type="double" name="end" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>Do nothing</comment>
    <comment>Expected behavior</comment>
    <comment>Expected behavior</comment>
    <comment>Expected behavior</comment>
    <comment>Expected behavior</comment>
    <comment>Expected behavior</comment>
  </method>
  <javadoc>
    <text>Visiting a valid subvector.</text>
  </javadoc>
  <method type="void" name="testWalkInOptimizedOrderChangingVisitor3">
    <declaration type="double[][]" name="data" />
    <declaration type="int" name="expectedStart" />
    <declaration type="int" name="expectedEnd" />
    <declaration type="RealVector" name="v" />
    <declaration type="RealVectorChangingVisitor" name="visitor" />
    <declaration type="boolean[]" name="visited" />
    <method type="double" name="visit" />
    <method type="void" name="start" />
    <method type="double" name="end">
      <scope />
    </method>
    <scope />
  </method>
  <javadoc>
    <text>Minimal implementation of the {@link RealVector} abstract class, for
 * mixed types unit tests.</text>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Entries of the vector.</text>
  </javadoc>
  <declaration type="double" name="data" />
  <method type="constructor" name="RealVectorTestImpl" />
  <method type="UnsupportedOperationException" name="unsupported" />
  <method type="RealVector" name="copy" />
  <method type="RealVector" name="ebeMultiply" />
  <method type="RealVector" name="ebeDivide" />
  <method type="double" name="getEntry" />
  <method type="int" name="getDimension" />
  <method type="RealVector" name="append" />
  <method type="RealVector" name="append" />
  <method type="RealVector" name="getSubVector" />
  <method type="void" name="setEntry" />
  <method type="void" name="setSubVector" />
  <method type="boolean" name="isNaN" />
  <method type="boolean" name="isInfinite" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>TESTS OF THE VISITOR PATTERN</comment>
</class>
