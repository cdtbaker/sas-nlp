<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractLeastSquaresOptimizerTestValidation">
  <javadoc>
    <text>This class demonstrates the main functionality of the{@link AbstractLeastSquaresOptimizer}, common to the
 * optimizer implementations in package{@link org.apache.commons.math3.optimization.general}.
 * &lt;br/&gt;
 * Not enabled by default, as the class name does not end with "Test".
 * &lt;br/&gt;
 * Invoke by running
 * &lt;pre&gt;&lt;code&gt;
 * mvn test -Dtest=AbstractLeastSquaresOptimizerTestValidation
 * &lt;/code&gt;&lt;/pre&gt;
 * or by running
 * &lt;pre&gt;&lt;code&gt;
 * mvn test -Dtest=AbstractLeastSquaresOptimizerTestValidation -DargLine="-DmcRuns=1234 -server"
 * &lt;/code&gt;&lt;/pre&gt;</text>
  </javadoc>
  <declaration type="int" name="MONTE_CARLO_RUNS" />
  <javadoc>
    <text>Using a Monte-Carlo procedure, this test checks the error estimations
 * as provided by the square-root of the diagonal elements of the
 * covariance matrix.
 * &lt;br/&gt;
 * The test generates sets of observations, each sampled from
 * a Gaussian distribution.
 * &lt;br/&gt;
 * The optimization problem solved is defined in class{@link StraightLineProblem}.
 * &lt;br/&gt;
 * The output (on stdout) will be a table summarizing the distribution
 * of parameters generated by the Monte-Carlo process and by the direct
 * estimation provided by the diagonal elements of the covariance matrix.</text>
  </javadoc>
  <method type="void" name="testParametersErrorMonteCarloObservations">
    <declaration type="double" name="yError" />
    <declaration type="double" name="slope" />
    <declaration type="double" name="offset" />
    <declaration type="RandomStraightLinePointGenerator" name="lineGenerator" />
    <declaration type="int" name="numObs" />
    <declaration type="int" name="numParams" />
    <declaration type="SummaryStatistics[]" name="paramsFoundByDirectSolution" />
    <declaration type="SummaryStatistics[]" name="sigmaEstimate" />
    <scope />
    <declaration type="AbstractLeastSquaresOptimizer" name="optim" />
    <declaration type="double[]" name="init" />
    <declaration type="int" name="mcRepeat" />
    <declaration type="int" name="mcCount" />
    <scope>
      <declaration type="Point2D.Double[]" name="obs" />
      <declaration type="StraightLineProblem" name="problem" />
      <scope>
        <declaration type="Point2D.Double" name="p" />
      </scope>
      <declaration type="double[]" name="regress" />
      <declaration type="PointVectorValuePair" name="optimum" />
      <declaration type="double[]" name="sigma" />
      <scope />
    </scope>
    <declaration type="String" name="line" />
    <scope>
      <declaration type="StatisticalSummary" name="s" />
    </scope>
    <scope />
    <comment>Error on the observations.</comment>
    <comment>True values of the parameters.</comment>
    <comment>Samples generator.</comment>
    <comment>Number of observations.</comment>
    <comment>XXX Should be a command-line option.</comment>
    <comment>number of parameters.</comment>
    <comment>Parameters found for each of Monte-Carlo run.</comment>
    <comment>Sigma estimations (square-root of the diagonal elements of the</comment>
    <comment>covariance matrix), for each Monte-Carlo run.</comment>
    <comment>Initialize statistics accumulators.</comment>
    <comment>Dummy optimizer (to compute the covariance matrix).</comment>
    <comment>Monte-Carlo (generates many sets of observations).</comment>
    <comment>Observations.</comment>
    <comment>Direct solution (using simple regression).</comment>
    <comment>Estimation of the standard deviation (diagonal elements of the</comment>
    <comment>covariance matrix).</comment>
    <comment>Accumulate statistics.</comment>
    <comment>Next Monte-Carlo.</comment>
    <comment>Print statistics.</comment>
    <comment>Check the error estimation.</comment>
  </method>
  <javadoc>
    <text>In this test, the set of observations is fixed.
 * Using a Monte-Carlo procedure, it generates sets of parameters,
 * and determine the parameter change that will result in the
 * normalized chi-square becoming larger by one than the value from
 * the best fit solution.
 * &lt;br/&gt;
 * The optimization problem solved is defined in class{@link StraightLineProblem}.
 * &lt;br/&gt;
 * The output (on stdout) will be a list of lines containing:
 * &lt;ul&gt;
 * &lt;li&gt;slope of the straight line,&lt;/li&gt;
 * &lt;li&gt;intercept of the straight line,&lt;/li&gt;
 * &lt;li&gt;chi-square of the solution defined by the above two values.&lt;/li&gt;
 * &lt;/ul&gt;
 * The output is separated into two blocks (with a blank line between
 * them); the first block will contain all parameter sets for which{@code chi2 &lt; chi2_b + 1}and the second block, all sets for which{@code chi2 &gt;= chi2_b + 1}where {@code chi2_b} is the lowest chi-square (corresponding to the
 * best solution).</text>
  </javadoc>
  <method type="void" name="testParametersErrorMonteCarloParameters">
    <declaration type="double" name="yError" />
    <declaration type="double" name="slope" />
    <declaration type="double" name="offset" />
    <declaration type="RandomStraightLinePointGenerator" name="lineGenerator" />
    <declaration type="int" name="numObs" />
    <declaration type="int" name="numParams" />
    <declaration type="Point2D.Double[]" name="obs" />
    <declaration type="StraightLineProblem" name="problem" />
    <scope>
      <declaration type="Point2D.Double" name="p" />
    </scope>
    <declaration type="double[]" name="regress" />
    <declaration type="AbstractLeastSquaresOptimizer" name="optim" />
    <declaration type="double[]" name="init" />
    <declaration type="double" name="bestChi2N" />
    <declaration type="double[]" name="sigma" />
    <declaration type="int" name="mcRepeat" />
    <declaration type="int" name="gridSize" />
    <declaration type="List&lt;double[]&gt;[]" name="paramsAndChi2" />
    <declaration type="double" name="slopeRange" />
    <declaration type="double" name="offsetRange" />
    <declaration type="double" name="minSlope" />
    <declaration type="double" name="minOffset" />
    <declaration type="double" name="deltaSlope" />
    <declaration type="double" name="deltaOffset" />
    <scope>
      <declaration type="double" name="s" />
      <scope>
        <declaration type="double" name="o" />
        <declaration type="double[]" name="chi2N" />
      </scope>
    </scope>
    <declaration type="double" name="chi2NPlusOne" />
    <declaration type="int" name="numLarger" />
    <declaration type="String" name="lineFmt" />
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <comment>Error on the observations.</comment>
    <comment>True values of the parameters.</comment>
    <comment>Samples generator.</comment>
    <comment>Number of observations.</comment>
    <comment>number of parameters.</comment>
    <comment>Create a single set of observations.</comment>
    <comment>Direct solution (using simple regression).</comment>
    <comment>Dummy optimizer (to compute the chi-square).</comment>
    <comment>Get chi-square of the best parameters set for the given set of</comment>
    <comment>observations.</comment>
    <comment>Monte-Carlo (generates a grid of parameters).</comment>
    <comment>Parameters found for each of Monte-Carlo run.</comment>
    <comment>Index 0 = slope</comment>
    <comment>Index 1 = offset</comment>
    <comment>Index 2 = normalized chi2</comment>
    <comment>Output (for use with "gnuplot").</comment>
    <comment>Some info.</comment>
    <comment>For plotting separately sets of parameters that have a large chi2.</comment>
    <comment>Point with smallest chi-square.</comment>
    <comment>Empty line.</comment>
    <comment>Points within the confidence interval.</comment>
    <comment>Empty line.</comment>
    <comment>Points outside the confidence interval.</comment>
    <comment>Empty line.</comment>
  </method>
  <javadoc>
    <return>the normalized chi-square.</return>
  </javadoc>
  <method type="double" name="getChi2N">
    <declaration type="double[]" name="t" />
    <declaration type="double[]" name="w" />
  </method>
  <javadoc>
    <text>A dummy optimizer.
 * Used for computing the covariance matrix.</text>
  </javadoc>
  <method type="constructor" name="DummyOptimizer" />
  <javadoc>
    <text>This method does nothing and returns a dummy value.</text>
  </javadoc>
  <method type="PointVectorValuePair" name="doOptimize">
    <declaration type="double[]" name="params" />
    <declaration type="double[]" name="res" />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements. See the NOTICE file distributed with this
 work for additional information regarding copyright ownership. The ASF
 licenses this file to You under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http:www.apache.orglicensesLICENSE-2.0 Unless required by applicable law
 or agreed to in writing, software distributed under the License is
 distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the specific language
 governing permissions and limitations under the License.</comment>
</class>
