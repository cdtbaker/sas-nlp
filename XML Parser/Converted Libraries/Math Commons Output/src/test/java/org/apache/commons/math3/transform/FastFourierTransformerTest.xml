<?xml version="1.0" encoding="UTF-8"?>
<class name="FastFourierTransformerTest">
  <javadoc>
    <text>Test case for fast Fourier transformer.
 * &lt;p&gt;
 * FFT algorithm is exact, the small tolerance number is used only
 * to account for round-off errors.</text>
    <version>$Id: FastFourierTransformerTest.java 1374632 2012-08-18 18:11:11Z luc $</version>
  </javadoc>
  <javadoc>
    <text>The common seed of all random number generators used in this test.</text>
  </javadoc>
  <declaration type="long" name="SEED" />
  <method type="void" name="testTransformComplexSizeNotAPowerOfTwo">
    <declaration type="int" name="n" />
    <declaration type="Complex[]" name="x" />
    <declaration type="DftNormalization[]" name="norm" />
    <declaration type="TransformType[]" name="type" />
    <scope>
      <scope>
        <declaration type="FastFourierTransformer" name="fft" />
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>Expected behaviour</comment>
  </method>
  <method type="void" name="testTransformRealSizeNotAPowerOfTwo">
    <declaration type="int" name="n" />
    <declaration type="double[]" name="x" />
    <declaration type="DftNormalization[]" name="norm" />
    <declaration type="TransformType[]" name="type" />
    <scope>
      <scope>
        <declaration type="FastFourierTransformer" name="fft" />
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>Expected behaviour</comment>
  </method>
  <method type="void" name="testTransformFunctionSizeNotAPowerOfTwo">
    <declaration type="int" name="n" />
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="DftNormalization[]" name="norm" />
    <declaration type="TransformType[]" name="type" />
    <scope>
      <scope>
        <declaration type="FastFourierTransformer" name="fft" />
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>Expected behaviour</comment>
  </method>
  <method type="void" name="testTransformFunctionNotStrictlyPositiveNumberOfSamples">
    <declaration type="int" name="n" />
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="DftNormalization[]" name="norm" />
    <declaration type="TransformType[]" name="type" />
    <scope>
      <scope>
        <declaration type="FastFourierTransformer" name="fft" />
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>Expected behaviour</comment>
  </method>
  <method type="void" name="testTransformFunctionInvalidBounds">
    <declaration type="int" name="n" />
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="DftNormalization[]" name="norm" />
    <declaration type="TransformType[]" name="type" />
    <scope>
      <scope>
        <declaration type="FastFourierTransformer" name="fft" />
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>Expected behaviour</comment>
  </method>
  <method type="Complex[]" name="createComplexData">
    <declaration type="Random" name="random" />
    <declaration type="Complex[]" name="data" />
    <scope>
      <declaration type="double" name="re" />
      <declaration type="double" name="im" />
    </scope>
  </method>
  <method type="double[]" name="createRealData">
    <declaration type="Random" name="random" />
    <declaration type="double[]" name="data" />
    <scope />
  </method>
  <javadoc>
    <text>Naive implementation of DFT, for reference.</text>
  </javadoc>
  <method type="Complex[]" name="dft">
    <declaration type="int" name="n" />
    <declaration type="double[]" name="cos" />
    <declaration type="double[]" name="sin" />
    <declaration type="Complex[]" name="y" />
    <scope>
      <declaration type="double" name="arg" />
    </scope>
    <scope>
      <declaration type="double" name="yr" />
      <declaration type="double" name="yi" />
      <scope>
        <declaration type="int" name="index" />
        <declaration type="double" name="c" />
        <declaration type="double" name="s" />
        <declaration type="double" name="xr" />
        <declaration type="double" name="xi" />
      </scope>
    </scope>
  </method>
  <method type="void" name="doTestTransformComplex">
    <declaration type="FastFourierTransformer" name="fft" />
    <declaration type="Complex[]" name="x" />
    <declaration type="Complex[]" name="expected" />
    <declaration type="double" name="s" />
    <scope>
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
    </scope>
    <declaration type="Complex[]" name="actual" />
    <scope>
      <declaration type="String" name="msg" />
      <declaration type="double" name="re" />
      <declaration type="double" name="im" />
    </scope>
  </method>
  <method type="void" name="doTestTransformReal">
    <declaration type="FastFourierTransformer" name="fft" />
    <declaration type="double[]" name="x" />
    <declaration type="Complex[]" name="xc" />
    <scope />
    <declaration type="Complex[]" name="expected" />
    <declaration type="double" name="s" />
    <scope>
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
    </scope>
    <declaration type="Complex[]" name="actual" />
    <scope>
      <declaration type="String" name="msg" />
      <declaration type="double" name="re" />
      <declaration type="double" name="im" />
    </scope>
  </method>
  <method type="void" name="doTestTransformFunction">
    <declaration type="FastFourierTransformer" name="fft" />
    <declaration type="Complex[]" name="x" />
    <scope>
      <declaration type="double" name="t" />
    </scope>
    <declaration type="Complex[]" name="expected" />
    <declaration type="double" name="s" />
    <scope>
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
    </scope>
    <declaration type="Complex[]" name="actual" />
    <scope>
      <declaration type="String" name="msg" />
      <declaration type="double" name="re" />
      <declaration type="double" name="im" />
    </scope>
  </method>
  <method type="void" name="testTransformComplex">
    <declaration type="DftNormalization[]" name="norm" />
    <declaration type="TransformType[]" name="type" />
    <scope>
      <scope />
    </scope>
  </method>
  <method type="void" name="testStandardTransformReal">
    <declaration type="DftNormalization[]" name="norm" />
    <declaration type="TransformType[]" name="type" />
    <scope>
      <scope />
    </scope>
  </method>
  <method type="void" name="testStandardTransformFunction">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="double" name="min" />
    <declaration type="double" name="max" />
    <declaration type="DftNormalization[]" name="norm" />
    <declaration type="TransformType[]" name="type" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Test of transformer for the ad hoc data taken from Mathematica.</text>
  </javadoc>
  <method type="void" name="testAdHocData">
    <declaration type="FastFourierTransformer" name="transformer" />
    <declaration type="Complex[]" name="result" />
    <declaration type="double" name="tolerance" />
    <declaration type="double[]" name="x" />
    <declaration type="Complex[]" name="y" />
    <scope />
    <scope />
    <declaration type="double[]" name="x2" />
    <declaration type="Complex[]" name="y2" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Test of transformer for the sine function.</text>
  </javadoc>
  <method type="void" name="testSinFunction">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="FastFourierTransformer" name="transformer" />
    <declaration type="Complex[]" name="result" />
    <declaration type="int" name="N" />
    <declaration type="double" name="min" />
    <scope />
    <scope />
  </method>
  <method type="void" name="test2DData">
    <declaration type="FastFourierTransformer" name="transformer" />
    <declaration type="double" name="tolerance" />
    <declaration type="Complex[][][]" name="input" />
    <declaration type="Complex[][][]" name="goodOutput" />
    <scope />
    <declaration type="Complex[][][]" name="output" />
    <declaration type="Complex[][][]" name="output2" />
    <scope>
      <scope />
    </scope>
  </method>
  <method type="void" name="test2DDataUnitary">
    <declaration type="FastFourierTransformer" name="transformer" />
    <declaration type="double" name="tolerance" />
    <declaration type="Complex[][][]" name="input" />
    <declaration type="Complex[][][]" name="goodOutput" />
    <declaration type="Complex[][][]" name="output" />
    <declaration type="Complex[][][]" name="output2" />
    <scope>
      <scope />
    </scope>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>Precondition checks.</comment>
  <comment>Utility methods for checking (successful) transforms.</comment>
  <comment>Tests of standard transform (when data is valid).</comment>
  <comment>Additional tests for 1D data.</comment>
  <comment>Additional tests for 2D data.</comment>
</class>
