<?xml version="1.0" encoding="UTF-8"?>
<class name="DfpTest">
  <method type="Dfp" name="build" />
  <declaration type="DfpField" name="field" />
  <declaration type="Dfp" name="pinf" />
  <declaration type="Dfp" name="ninf" />
  <declaration type="Dfp" name="nan" />
  <declaration type="Dfp" name="snan" />
  <declaration type="Dfp" name="qnan" />
  <method type="void" name="setUp">
    <comment>Some basic setup.  Define some constants and clear the status flags</comment>
  </method>
  <method type="void" name="tearDown" />
  <method type="void" name="test">
    <declaration type="boolean" name="b" />
    <comment>NaNs involved</comment>
    <comment>distinguish +/- zero</comment>
  </method>
  <method type="void" name="testByteConstructor" />
  <method type="void" name="testIntConstructor" />
  <method type="void" name="testLongConstructor" />
  <method type="void" name="testAdd">
    <comment>Basic tests   1+1 = 2</comment>
    <comment>1 + (-1) = 0</comment>
    <comment>(-1) + 1 = 0</comment>
    <comment>(-1) + (-1) = -2</comment>
    <comment>rounding mode is round half even</comment>
    <comment>rounding on add</comment>
    <comment>rounding on add</comment>
    <comment>rounding on add</comment>
    <comment>rounding on add</comment>
    <comment>rounding on add</comment>
    <comment>rounding on add</comment>
    <comment>rounding on add</comment>
    <comment>rounding on add</comment>
    <comment>rounding on add</comment>
    <comment>rounding on add</comment>
    <comment>overflow on add</comment>
    <comment>overflow on add</comment>
    <comment>overflow on add</comment>
    <comment>overflow on add</comment>
    <comment>underflow on add</comment>
    <comment>underflow on add</comment>
    <comment>underflow on add</comment>
    <comment>underflow on add</comment>
    <comment>underflow on add</comment>
    <comment>loss of precision on alignment?</comment>
    <comment>proper normalization?</comment>
    <comment>adding zeros</comment>
    <comment>adding zeros</comment>
    <comment>adding zeros</comment>
    <comment>adding zeros</comment>
    <comment>adding zeros</comment>
    <comment>adding zeros</comment>
    <comment>adding zeros</comment>
    <comment>adding infinities</comment>
    <comment>adding infinities</comment>
    <comment>adding infinities</comment>
    <comment>adding infinities</comment>
    <comment>adding infinities</comment>
    <comment>adding infinities</comment>
    <comment>adding infinities</comment>
    <comment>adding infinities</comment>
    <comment>adding infinities</comment>
    <comment>adding infinities</comment>
    <comment>adding infinities</comment>
    <comment>adding infinities</comment>
    <comment>adding infinities</comment>
    <comment>adding infinities</comment>
    <comment>adding infinities</comment>
    <comment>adding infinities</comment>
    <comment>overflow</comment>
    <comment>overflow</comment>
  </method>
  <method type="void" name="cmptst" />
  <method type="void" name="testCompare">
    <comment>test equal() comparison</comment>
    <comment>check zero vs. zero</comment>
    <comment>0 == 0</comment>
    <comment>0 == -0</comment>
    <comment>-0 == -0</comment>
    <comment>-0 == 0</comment>
    <comment>check zero vs normal numbers</comment>
    <comment>0 == 1</comment>
    <comment>1 == 0</comment>
    <comment>-1 == 0</comment>
    <comment>0 == -1</comment>
    <comment>0 == 1e-131072</comment>
    <comment>check flags</comment>
    <comment>0 == 1e-131078</comment>
    <comment>check flags  -- underflow should be set</comment>
    <comment>0 == 1e+131071</comment>
    <comment>check zero vs infinities</comment>
    <comment>0 == pinf</comment>
    <comment>0 == ninf</comment>
    <comment>-0 == pinf</comment>
    <comment>-0 == ninf</comment>
    <comment>pinf == 0</comment>
    <comment>ninf == 0</comment>
    <comment>pinf == -0</comment>
    <comment>ninf == -0</comment>
    <comment>ninf == pinf</comment>
    <comment>pinf == ninf</comment>
    <comment>pinf == pinf</comment>
    <comment>ninf == ninf</comment>
    <comment>check some normal numbers</comment>
    <comment>1 == 1</comment>
    <comment>1 == -1</comment>
    <comment>-1 == -1</comment>
    <comment>1 == 1.0000000000000001</comment>
    <comment>The tests below checks to ensure that comparisons don't set FLAG_INEXACT</comment>
    <comment>100000 == 1.0000000000000001</comment>
    <comment>check some nans -- nans shouldnt equal anything</comment>
    <comment />
    <comment>Tests for un equal  -- do it all over again</comment>
    <comment />
    <comment>0 == 0</comment>
    <comment>0 == -0</comment>
    <comment>-0 == -0</comment>
    <comment>-0 == 0</comment>
    <comment>check zero vs normal numbers</comment>
    <comment>0 == 1</comment>
    <comment>1 == 0</comment>
    <comment>-1 == 0</comment>
    <comment>0 == -1</comment>
    <comment>0 == 1e-131072</comment>
    <comment>check flags</comment>
    <comment>0 == 1e-131078</comment>
    <comment>check flags  -- underflow should be set</comment>
    <comment>0 == 1e+131071</comment>
    <comment>check zero vs infinities</comment>
    <comment>0 == pinf</comment>
    <comment>0 == ninf</comment>
    <comment>-0 == pinf</comment>
    <comment>-0 == ninf</comment>
    <comment>pinf == 0</comment>
    <comment>ninf == 0</comment>
    <comment>pinf == -0</comment>
    <comment>ninf == -0</comment>
    <comment>ninf == pinf</comment>
    <comment>pinf == ninf</comment>
    <comment>pinf == pinf</comment>
    <comment>ninf == ninf</comment>
    <comment>check some normal numbers</comment>
    <comment>1 == 1</comment>
    <comment>1 == -1</comment>
    <comment>-1 == -1</comment>
    <comment>1 == 1.0000000000000001</comment>
    <comment>The tests below checks to ensure that comparisons don't set FLAG_INEXACT</comment>
    <comment>100000 == 1.0000000000000001</comment>
    <comment>check some nans -- nans shouldnt be unequal to anything</comment>
    <comment />
    <comment>Tests for lessThan  -- do it all over again</comment>
    <comment />
    <comment>0 &lt; 0</comment>
    <comment>0 &lt; -0</comment>
    <comment>-0 &lt; -0</comment>
    <comment>-0 &lt; 0</comment>
    <comment>check zero vs normal numbers</comment>
    <comment>0 &lt; 1</comment>
    <comment>1 &lt; 0</comment>
    <comment>-1 &lt; 0</comment>
    <comment>0 &lt; -1</comment>
    <comment>0 &lt; 1e-131072</comment>
    <comment>check flags</comment>
    <comment>0 &lt; 1e-131078</comment>
    <comment>check flags  -- underflow should be set</comment>
    <comment>0 &lt; 1e+131071</comment>
    <comment>check zero vs infinities</comment>
    <comment>0 &lt; pinf</comment>
    <comment>0 &lt; ninf</comment>
    <comment>-0 &lt; pinf</comment>
    <comment>-0 &lt; ninf</comment>
    <comment>pinf &lt; 0</comment>
    <comment>ninf &lt; 0</comment>
    <comment>pinf &lt; -0</comment>
    <comment>ninf &lt; -0</comment>
    <comment>ninf &lt; pinf</comment>
    <comment>pinf &lt; ninf</comment>
    <comment>pinf &lt; pinf</comment>
    <comment>ninf &lt; ninf</comment>
    <comment>check some normal numbers</comment>
    <comment>1 &lt; 1</comment>
    <comment>1 &lt; -1</comment>
    <comment>-1 &lt; -1</comment>
    <comment>1 &lt; 1.0000000000000001</comment>
    <comment>The tests below checks to ensure that comparisons don't set FLAG_INEXACT</comment>
    <comment>100000 &lt; 1.0000000000000001</comment>
    <comment>check some nans -- nans shouldnt be lessThan to anything</comment>
    <comment>lessThan compares with nans should raise FLAG_INVALID</comment>
    <comment />
    <comment>Tests for greaterThan  -- do it all over again</comment>
    <comment />
    <comment>0 &gt; 0</comment>
    <comment>0 &gt; -0</comment>
    <comment>-0 &gt; -0</comment>
    <comment>-0 &gt; 0</comment>
    <comment>check zero vs normal numbers</comment>
    <comment>0 &gt; 1</comment>
    <comment>1 &gt; 0</comment>
    <comment>-1 &gt; 0</comment>
    <comment>0 &gt; -1</comment>
    <comment>0 &gt; 1e-131072</comment>
    <comment>check flags</comment>
    <comment>0 &gt; 1e-131078</comment>
    <comment>check flags  -- underflow should be set</comment>
    <comment>0 &gt; 1e+131071</comment>
    <comment>check zero vs infinities</comment>
    <comment>0 &gt; pinf</comment>
    <comment>0 &gt; ninf</comment>
    <comment>-0 &gt; pinf</comment>
    <comment>-0 &gt; ninf</comment>
    <comment>pinf &gt; 0</comment>
    <comment>ninf &gt; 0</comment>
    <comment>pinf &gt; -0</comment>
    <comment>ninf &gt; -0</comment>
    <comment>ninf &gt; pinf</comment>
    <comment>pinf &gt; ninf</comment>
    <comment>pinf &gt; pinf</comment>
    <comment>ninf &gt; ninf</comment>
    <comment>check some normal numbers</comment>
    <comment>1 &gt; 1</comment>
    <comment>1 &gt; -1</comment>
    <comment>-1 &gt; -1</comment>
    <comment>1 &gt; 1.0000000000000001</comment>
    <comment>The tests below checks to ensure that comparisons don't set FLAG_INEXACT</comment>
    <comment>100000 &gt; 1.0000000000000001</comment>
    <comment>check some nans -- nans shouldnt be greaterThan to anything</comment>
    <comment>greaterThan compares with nans should raise FLAG_INVALID</comment>
  </method>
  <method type="void" name="testMultiply">
    <comment>Basic tests   1*1 = 1</comment>
    <comment>Basic tests   1*1 = 1</comment>
    <comment>Basic tests   -1*1 = -1</comment>
    <comment>Basic tests   -1*1 = -1</comment>
    <comment>basic tests with integers</comment>
    <comment>multiply by zero</comment>
  </method>
  <method type="void" name="testDivide">
    <comment>divide by NaN = NaN</comment>
    <comment>NaN / number = NaN</comment>
    <comment>test trial-divisor too high</comment>
  </method>
  <method type="void" name="testReciprocal" />
  <method type="void" name="testDivideInt">
    <comment>NaN / number = NaN</comment>
  </method>
  <method type="void" name="testNextAfter" />
  <method type="void" name="testToString" />
  <method type="void" name="testRound">
    <comment>Round down</comment>
    <comment>Round up</comment>
    <comment>Round half up</comment>
    <comment>Round half down</comment>
    <comment>Round half odd</comment>
    <comment>Round ceil</comment>
    <comment>Round floor</comment>
    <comment>reset</comment>
  </method>
  <method type="void" name="testCeil" />
  <method type="void" name="testFloor" />
  <method type="void" name="testRint" />
  <method type="void" name="testCopySign" />
  <method type="void" name="testIntValue" />
  <method type="void" name="testLog10K" />
  <method type="void" name="testPower10K">
    <declaration type="Dfp" name="d" />
  </method>
  <method type="void" name="testLog10" />
  <method type="void" name="testPower10">
    <declaration type="Dfp" name="d" />
  </method>
  <method type="void" name="testRemainder" />
  <method type="void" name="testSqrt" />
  <method type="void" name="testIssue567">
    <declaration type="DfpField" name="field" />
  </method>
  <method type="void" name="testIsZero" />
  <method type="void" name="testSignPredicates" />
  <method type="void" name="testSpecialConstructors" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>Generic test function.  Takes params x and y and tests them for</comment>
  <comment>equality.  Then checks the status flags against the flags argument.</comment>
  <comment>If the test fail, it prints the desc string</comment>
  <comment>Test addition</comment>
  <comment />
  <comment>Test comparisons</comment>
  <comment>utility function to help test comparisons</comment>
  <comment />
  <comment>Test multiplication</comment>
  <comment />
</class>
