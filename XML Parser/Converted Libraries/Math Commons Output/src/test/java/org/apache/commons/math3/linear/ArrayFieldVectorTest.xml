<?xml version="1.0" encoding="UTF-8"?>
<class name="ArrayFieldVectorTest">
  <javadoc>
    <text>Test cases for the {@link ArrayFieldVector} class.</text>
    <version>$Id: ArrayFieldVectorTest.java 1296542 2012-03-03 00:55:17Z sebb $</version>
  </javadoc>
  <declaration type="Fraction[][]" name="ma1" />
  <declaration type="Fraction[]" name="vec1" />
  <declaration type="Fraction[]" name="vec2" />
  <declaration type="Fraction[]" name="vec3" />
  <declaration type="Fraction[]" name="vec4" />
  <declaration type="Fraction[]" name="vec_null" />
  <declaration type="Fraction[]" name="dvec1" />
  <declaration type="Fraction[][]" name="mat1" />
  <declaration type="long" name="serialVersionUID" />
  <declaration type="Field&lt;T&gt;" name="field" />
  <javadoc>
    <text>Entries of the vector.</text>
  </javadoc>
  <declaration type="T[]" name="data" />
  <javadoc>
    <text>Build an array of elements.</text>
    <param>length size of the array to build</param>
    <return>a new array</return>
  </javadoc>
  <method type="T[]" name="buildArray">
    <comment>field is of type T</comment>
  </method>
  <method type="constructor" name="FieldVectorTestImpl" />
  <method type="Field&lt;T&gt;" name="getField" />
  <method type="UnsupportedOperationException" name="unsupported" />
  <method type="FieldVector&lt;T&gt;" name="copy" />
  <method type="FieldVector&lt;T&gt;" name="add" />
  <method type="FieldVector&lt;T&gt;" name="add" />
  <method type="FieldVector&lt;T&gt;" name="subtract" />
  <method type="FieldVector&lt;T&gt;" name="subtract" />
  <method type="FieldVector&lt;T&gt;" name="mapAdd" />
  <method type="FieldVector&lt;T&gt;" name="mapAddToSelf" />
  <method type="FieldVector&lt;T&gt;" name="mapSubtract" />
  <method type="FieldVector&lt;T&gt;" name="mapSubtractToSelf" />
  <method type="FieldVector&lt;T&gt;" name="mapMultiply">
    <declaration type="T[]" name="out" />
    <scope />
  </method>
  <method type="FieldVector&lt;T&gt;" name="mapMultiplyToSelf" />
  <method type="FieldVector&lt;T&gt;" name="mapDivide" />
  <method type="FieldVector&lt;T&gt;" name="mapDivideToSelf" />
  <method type="FieldVector&lt;T&gt;" name="mapInv" />
  <method type="FieldVector&lt;T&gt;" name="mapInvToSelf" />
  <method type="FieldVector&lt;T&gt;" name="ebeMultiply" />
  <method type="FieldVector&lt;T&gt;" name="ebeMultiply" />
  <method type="FieldVector&lt;T&gt;" name="ebeDivide" />
  <method type="FieldVector&lt;T&gt;" name="ebeDivide" />
  <method type="T[]" name="getData" />
  <method type="T" name="dotProduct">
    <declaration type="T" name="dot" />
    <scope />
  </method>
  <method type="T" name="dotProduct">
    <declaration type="T" name="dot" />
    <scope />
  </method>
  <method type="FieldVector&lt;T&gt;" name="projection" />
  <method type="FieldVector&lt;T&gt;" name="projection" />
  <method type="FieldMatrix&lt;T&gt;" name="outerProduct" />
  <method type="FieldMatrix&lt;T&gt;" name="outerProduct" />
  <method type="T" name="getEntry" />
  <method type="int" name="getDimension" />
  <method type="FieldVector&lt;T&gt;" name="append" />
  <method type="FieldVector&lt;T&gt;" name="append" />
  <method type="FieldVector&lt;T&gt;" name="append" />
  <method type="FieldVector&lt;T&gt;" name="getSubVector" />
  <method type="void" name="setEntry" />
  <method type="void" name="setSubVector" />
  <method type="void" name="setSubVector" />
  <method type="void" name="set" />
  <method type="T[]" name="toArray" />
  <method type="void" name="testConstructors">
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v0" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v1" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v2" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v3" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v4" />
    <scope />
    <scope />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v5_i" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v5" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v6" />
    <scope />
    <scope />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v7" />
    <declaration type="FieldVectorTestImpl&lt;Fraction&gt;" name="v7_i" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v7_2" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v8" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v8_2" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v9" />
    <comment>expected behavior</comment>
    <comment>expected behavior</comment>
  </method>
  <method type="void" name="testDataInOut">
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v1" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v2" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v4" />
    <declaration type="FieldVectorTestImpl&lt;Fraction&gt;" name="v2_t" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_append_1" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_append_2" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_append_4" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_copy" />
    <declaration type="Fraction[]" name="a_frac" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="vout5" />
    <scope />
    <scope />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v_set1" />
    <scope />
    <scope />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v_set2" />
    <scope />
    <scope />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v_set3" />
    <scope />
    <scope />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v_set4" />
    <scope />
    <scope />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="vout10" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="vout10_2" />
    <comment>ArrayFieldVector&lt;Fraction&gt; vout4 = (ArrayFieldVector&lt;Fraction&gt;) v1.clone();</comment>
    <comment>Assert.assertEquals(3, vout4.getDimension());</comment>
    <comment>Assert.assertEquals(v1.getDataRef(), vout4.getDataRef());</comment>
    <comment>expected behavior</comment>
    <comment>expected behavior</comment>
    <comment>expected behavior</comment>
    <comment>expected behavior</comment>
    <comment>expected behavior</comment>
  </method>
  <method type="void" name="testMapFunctions">
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v1" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_mapAdd" />
    <declaration type="Fraction[]" name="result_mapAdd" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_mapAddToSelf" />
    <declaration type="Fraction[]" name="result_mapAddToSelf" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_mapSubtract" />
    <declaration type="Fraction[]" name="result_mapSubtract" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_mapSubtractToSelf" />
    <declaration type="Fraction[]" name="result_mapSubtractToSelf" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_mapMultiply" />
    <declaration type="Fraction[]" name="result_mapMultiply" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_mapMultiplyToSelf" />
    <declaration type="Fraction[]" name="result_mapMultiplyToSelf" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_mapDivide" />
    <declaration type="Fraction[]" name="result_mapDivide" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_mapDivideToSelf" />
    <declaration type="Fraction[]" name="result_mapDivideToSelf" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_mapInv" />
    <declaration type="Fraction[]" name="result_mapInv" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_mapInvToSelf" />
    <declaration type="Fraction[]" name="result_mapInvToSelf" />
    <comment>octave =  v1 .+ 2.0</comment>
    <comment>octave =  v1 .+ 2.0</comment>
    <comment>octave =  v1 .- 2.0</comment>
    <comment>octave =  v1 .- 2.0</comment>
    <comment>octave =  v1 .* 2.0</comment>
    <comment>octave =  v1 .* 2.0</comment>
    <comment>octave =  v1 ./ 2.0</comment>
    <comment>octave =  v1 ./ 2.0</comment>
    <comment>octave =  v1 .^-1</comment>
    <comment>octave =  v1 .^-1</comment>
  </method>
  <method type="void" name="testBasicFunctions">
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v1" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v2" />
    <declaration type="FieldVectorTestImpl&lt;Fraction&gt;" name="v2_t" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v_add" />
    <declaration type="Fraction[]" name="result_add" />
    <declaration type="FieldVectorTestImpl&lt;Fraction&gt;" name="vt2" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_add_i" />
    <declaration type="Fraction[]" name="result_add_i" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v_subtract" />
    <declaration type="Fraction[]" name="result_subtract" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_subtract_i" />
    <declaration type="Fraction[]" name="result_subtract_i" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v_ebeMultiply" />
    <declaration type="Fraction[]" name="result_ebeMultiply" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_ebeMultiply_2" />
    <declaration type="Fraction[]" name="result_ebeMultiply_2" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v_ebeDivide" />
    <declaration type="Fraction[]" name="result_ebeDivide" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_ebeDivide_2" />
    <declaration type="Fraction[]" name="result_ebeDivide_2" />
    <declaration type="Fraction" name="dot" />
    <declaration type="Fraction" name="dot_2" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m_outerProduct" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m_outerProduct_2" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v_projection" />
    <declaration type="Fraction[]" name="result_projection" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v_projection_2" />
    <declaration type="Fraction[]" name="result_projection_2" />
    <comment>octave =  v1 + v2</comment>
    <comment>octave =  v1 - v2</comment>
    <comment>octave v1 .* v2</comment>
    <comment>octave v1 ./ v2</comment>
    <comment>octave  dot(v1,v2)</comment>
    <comment>octave  dot(v1,v2_t)</comment>
  </method>
  <method type="void" name="testMisc">
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v1" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v4" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="v4_2" />
    <declaration type="String" name="out1" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>Fraction[] dout1 = v1.copyOut();
Assert.assertEquals(3, dout1.length);
assertNotSame("testData not same object ", v1.getDataRef(), dout1);</comment>
    <comment>expected behavior</comment>
    <comment>expected behavior</comment>
    <comment>expected behavior</comment>
  </method>
  <method type="void" name="testSerial">
    <declaration type="ArrayFieldVector&lt;Fraction&gt;" name="v" />
  </method>
  <method type="void" name="testZeroVectors">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>when the field is not specified, array cannot be empty</comment>
    <comment>expected behavior</comment>
    <comment>expected behavior</comment>
    <comment>expected behavior</comment>
    <comment>when the field is specified, array can be empty</comment>
  </method>
  <method type="void" name="testOuterProduct">
    <declaration type="ArrayFieldVector&lt;Fraction&gt;[]" name="u" />
    <declaration type="ArrayFieldVector&lt;Fraction&gt;[]" name="v" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="uv" />
    <declaration type="double" name="tol" />
  </method>
  <javadoc>
    <text>verifies that two vectors are equals</text>
  </javadoc>
  <method type="void" name="checkArray">
    <scope />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment />
  <comment>Testclass to test the FieldVector&lt;Fraction&gt; interface</comment>
  <comment>only with enough content to support the test</comment>
</class>
