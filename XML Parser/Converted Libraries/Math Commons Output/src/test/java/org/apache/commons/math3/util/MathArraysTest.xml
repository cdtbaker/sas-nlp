<?xml version="1.0" encoding="UTF-8"?>
<class name="MathArraysTest">
  <javadoc>
    <text>Test cases for the {@link MathArrays} class.</text>
    <version>$Id$</version>
  </javadoc>
  <method type="void" name="testScale">
    <declaration type="double[][]" name="test" />
    <declaration type="double[]" name="correctTest" />
    <declaration type="double[][]" name="correctScaled" />
    <declaration type="double[]" name="scaled" />
    <scope />
    <scope />
    <comment>Make sure test has not changed</comment>
    <comment>Test scaled values</comment>
  </method>
  <method type="void" name="testScaleInPlace">
    <declaration type="double[][]" name="test" />
    <declaration type="double[][]" name="correctScaled" />
    <scope />
    <comment>Make sure test has changed</comment>
  </method>
  <method type="void" name="testEbeAddPrecondition" />
  <method type="void" name="testEbeSubtractPrecondition" />
  <method type="void" name="testEbeMultiplyPrecondition" />
  <method type="void" name="testEbeDividePrecondition" />
  <method type="void" name="testEbeAdd">
    <declaration type="double[]" name="a" />
    <declaration type="double[]" name="b" />
    <declaration type="double[]" name="r" />
    <scope />
  </method>
  <method type="void" name="testEbeSubtract">
    <declaration type="double[]" name="a" />
    <declaration type="double[]" name="b" />
    <declaration type="double[]" name="r" />
    <scope />
  </method>
  <method type="void" name="testEbeMultiply">
    <declaration type="double[]" name="a" />
    <declaration type="double[]" name="b" />
    <declaration type="double[]" name="r" />
    <scope />
  </method>
  <method type="void" name="testEbeDivide">
    <declaration type="double[]" name="a" />
    <declaration type="double[]" name="b" />
    <declaration type="double[]" name="r" />
    <scope />
  </method>
  <method type="void" name="testL1DistanceDouble">
    <declaration type="double[]" name="p1" />
    <declaration type="double[]" name="p2" />
  </method>
  <method type="void" name="testL1DistanceInt">
    <declaration type="int[]" name="p1" />
    <declaration type="int[]" name="p2" />
  </method>
  <method type="void" name="testL2DistanceDouble">
    <declaration type="double[]" name="p1" />
    <declaration type="double[]" name="p2" />
  </method>
  <method type="void" name="testL2DistanceInt">
    <declaration type="int[]" name="p1" />
    <declaration type="int[]" name="p2" />
  </method>
  <method type="void" name="testLInfDistanceDouble">
    <declaration type="double[]" name="p1" />
    <declaration type="double[]" name="p2" />
  </method>
  <method type="void" name="testLInfDistanceInt">
    <declaration type="int[]" name="p1" />
    <declaration type="int[]" name="p2" />
  </method>
  <method type="void" name="testCheckOrder">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>Expected</comment>
    <comment>Expected</comment>
    <comment>Expected</comment>
    <comment>Expected</comment>
    <comment>Expected</comment>
  </method>
  <method type="void" name="testIsMonotonic" />
  <method type="void" name="testIsMonotonicComparable" />
  <method type="void" name="testCheckRectangular">
    <declaration type="long[][][]" name="rect" />
    <declaration type="long[][][]" name="ragged" />
    <declaration type="long[][]" name="nullArray" />
    <declaration type="long[][][]" name="empty" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>Expected</comment>
    <comment>Expected</comment>
  </method>
  <method type="void" name="testCheckPositive">
    <declaration type="double[][]" name="positive" />
    <declaration type="double[][]" name="nonNegative" />
    <declaration type="double[]" name="nullArray" />
    <declaration type="double[][]" name="empty" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>Expected</comment>
    <comment>Expected</comment>
  </method>
  <method type="void" name="testCheckNonNegative">
    <declaration type="long[][]" name="nonNegative" />
    <declaration type="long[][]" name="hasNegative" />
    <declaration type="long[]" name="nullArray" />
    <declaration type="long[][]" name="empty" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>Expected</comment>
    <comment>Expected</comment>
  </method>
  <method type="void" name="testCheckNonNegative2D">
    <declaration type="long[][][]" name="nonNegative" />
    <declaration type="long[][][]" name="hasNegative" />
    <declaration type="long[][]" name="nullArray" />
    <declaration type="long[][][]" name="empty" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>Expected</comment>
    <comment>Expected</comment>
  </method>
  <method type="void" name="testSortInPlace">
    <declaration type="double[]" name="x1" />
    <declaration type="double[]" name="x2" />
    <declaration type="double[]" name="x3" />
  </method>
  <method type="void" name="testSortInPlaceExample">
    <declaration type="double[]" name="x" />
    <declaration type="double[]" name="y" />
    <declaration type="double[]" name="z" />
    <declaration type="double[]" name="sx" />
    <declaration type="double[]" name="sy" />
    <declaration type="double[]" name="sz" />
  </method>
  <method type="void" name="testSortInPlaceFailures">
    <declaration type="double[]" name="nullArray" />
    <declaration type="double[]" name="one" />
    <declaration type="double[]" name="two" />
    <declaration type="double[]" name="onep" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testCopyOfInt">
    <declaration type="int[]" name="source" />
    <declaration type="int[]" name="dest" />
    <scope />
  </method>
  <method type="void" name="testCopyOfInt2">
    <declaration type="int[]" name="source" />
    <declaration type="int" name="offset" />
    <declaration type="int[]" name="dest" />
    <scope />
  </method>
  <method type="void" name="testCopyOfInt3">
    <declaration type="int[]" name="source" />
    <declaration type="int" name="offset" />
    <declaration type="int[]" name="dest" />
    <scope />
    <scope />
  </method>
  <method type="void" name="testCopyOfDouble">
    <declaration type="double[]" name="source" />
    <declaration type="double[]" name="dest" />
    <scope />
  </method>
  <method type="void" name="testCopyOfDouble2">
    <declaration type="double[]" name="source" />
    <declaration type="int" name="offset" />
    <declaration type="double[]" name="dest" />
    <scope />
  </method>
  <method type="void" name="testCopyOfDouble3">
    <declaration type="double[]" name="source" />
    <declaration type="int" name="offset" />
    <declaration type="double[]" name="dest" />
    <scope />
    <scope />
  </method>
  <method type="void" name="testLinearCombination1">
    <declaration type="double[][]" name="a" />
    <declaration type="double[][]" name="b" />
    <declaration type="double" name="abSumInline" />
    <declaration type="double" name="abSumArray" />
    <declaration type="double" name="naive" />
  </method>
  <method type="void" name="testLinearCombination2">
    <declaration type="Well1024a" name="random" />
    <scope>
      <declaration type="double" name="ux" />
      <declaration type="double" name="uy" />
      <declaration type="double" name="uz" />
      <declaration type="double" name="vx" />
      <declaration type="double" name="vy" />
      <declaration type="double" name="vz" />
      <declaration type="double" name="sInline" />
      <declaration type="double[]" name="sArray" />
    </scope>
    <comment>we compare accurate versus naive dot product implementations</comment>
    <comment>on regular vectors (i.e. not extreme cases like in the previous test)</comment>
  </method>
  <method type="void" name="testLinearCombinationInfinite">
    <declaration type="double[][][]" name="a" />
    <declaration type="double[][][]" name="b" />
  </method>
  <method type="void" name="testArrayEquals" />
  <method type="void" name="testArrayEqualsIncludingNaN" />
  <method type="void" name="testNormalizeArray">
    <declaration type="double[][]" name="testValues1" />
    <declaration type="double[][]" name="testValues2" />
    <declaration type="double[][]" name="testValues3" />
    <declaration type="double[][]" name="zeroSum" />
    <scope />
    <scope />
    <declaration type="double[][]" name="hasInf" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>Ignore NaNs</comment>
    <comment>Zero sum -&gt; MathArithmeticException</comment>
    <comment>Infinite elements -&gt; MathArithmeticException</comment>
    <comment>Infinite target -&gt; MathIllegalArgumentException</comment>
    <comment>NaN target -&gt; MathIllegalArgumentException</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements. See the NOTICE file distributed with this
 work for additional information regarding copyright ownership. The ASF
 licenses this file to You under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http:www.apache.orglicensesLICENSE-2.0 Unless required by applicable law
 or agreed to in writing, software distributed under the License is
 distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the specific language
 governing permissions and limitations under the License.</comment>
  <javadoc>
    <text>Example in javadoc</text>
  </javadoc>
</class>
