<?xml version="1.0" encoding="UTF-8"?>
<class name="BOBYQAOptimizerTest">
  <javadoc>
    <text>Test for {@link BOBYQAOptimizer}.</text>
  </javadoc>
  <declaration type="int" name="DIM" />
  <method type="void" name="testInitOutOfBounds">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[][]" name="boundaries" />
  </method>
  <method type="void" name="testBoundariesDimensionMismatch">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[][]" name="boundaries" />
  </method>
  <method type="void" name="testProblemDimensionTooSmall">
    <declaration type="double[]" name="startPoint" />
  </method>
  <method type="void" name="testMaxEvaluations">
    <declaration type="int" name="lowMaxEval" />
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[][]" name="boundaries" />
  </method>
  <method type="void" name="testRosen">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testMaximize">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testEllipse">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testElliRotated">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testCigar">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testTwoAxes">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testCigTab">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testSphere">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testTablet">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testDiffPow">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testSsDiffPow">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testAckley">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testRastrigin">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testConstrainedRosen">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testConstrainedRosenWithMoreInterpolationPoints">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
    <declaration type="int" name="maxAdditionalPoints" />
    <scope />
    <comment>This should have been 78 because in the code the hard limit is</comment>
    <comment>said to be</comment>
    <comment>((DIM + 1) * (DIM + 2)) / 2 - (2 * DIM + 1)</comment>
    <comment>i.e. 78 in this case, but the test fails for 48, 59, 62, 63, 64,</comment>
    <comment>65, 66, ...</comment>
  </method>
  <javadoc>
    <param>func Function to optimize.</param>
    <param>startPoint Starting point.</param>
    <param>boundaries Upper / lower point limit.</param>
    <param>goal Minimization or maximization.</param>
    <param>fTol Tolerance relative error on the objective function.</param>
    <param>pointTol Tolerance for checking that the optimum is correct.</param>
    <param>maxEvaluations Maximum number of evaluations.</param>
    <param>expected Expected point / value.</param>
  </javadoc>
  <method type="void" name="doTest" />
  <javadoc>
    <param>func Function to optimize.</param>
    <param>startPoint Starting point.</param>
    <param>boundaries Upper / lower point limit.</param>
    <param>goal Minimization or maximization.</param>
    <param>fTol Tolerance relative error on the objective function.</param>
    <param>pointTol Tolerance for checking that the optimum is correct.</param>
    <param>maxEvaluations Maximum number of evaluations.</param>
    <param>additionalInterpolationPoints Number of interpolation to used
 * in addition to the default (2 * dim + 1).</param>
    <param>expected Expected point / value.</param>
  </javadoc>
  <method type="void" name="doTest">
    <declaration type="int" name="dim" />
    <declaration type="double[]" name="lB" />
    <declaration type="double[]" name="uB" />
    <declaration type="int" name="numIterpolationPoints" />
    <declaration type="BOBYQAOptimizer" name="optim" />
    <declaration type="PointValuePair" name="result" />
    <scope />
    <comment>System.out.println(func.getClass().getName() + " BEGIN");  XXX</comment>
    <comment>MultivariateOptimizer optim =</comment>
    <comment>new PowellOptimizer(1e-13, Math.ulp(1d));</comment>
    <comment>PointValuePair result = optim.optimize(100000, func, goal, startPoint);</comment>
    <comment>System.out.println(func.getClass().getName() + " = "</comment>
    <comment>+ optim.getEvaluations() + " f(");</comment>
    <comment>for (double x: result.getPoint())  System.out.print(x + " ");</comment>
    <comment>System.out.println(") = " +  result.getValue());</comment>
    <comment>System.out.println(func.getClass().getName() + " END");  XXX</comment>
  </method>
  <method type="double[]" name="point">
    <declaration type="double[]" name="ds" />
  </method>
  <method type="double[][]" name="boundaries">
    <declaration type="double[][]" name="boundaries" />
  </method>
  <method type="double" name="value">
    <declaration type="double" name="f" />
  </method>
  <declaration type="double" name="factor" />
  <method type="constructor" name="Cigar" />
  <method type="constructor" name="Cigar" />
  <method type="double" name="value">
    <declaration type="double" name="f" />
  </method>
  <declaration type="double" name="factor" />
  <method type="constructor" name="Tablet" />
  <method type="constructor" name="Tablet" />
  <method type="double" name="value">
    <declaration type="double" name="f" />
  </method>
  <declaration type="double" name="factor" />
  <method type="constructor" name="CigTab" />
  <method type="constructor" name="CigTab" />
  <method type="double" name="value">
    <declaration type="int" name="end" />
    <declaration type="double" name="f" />
  </method>
  <declaration type="double" name="factor" />
  <method type="constructor" name="TwoAxes" />
  <method type="constructor" name="TwoAxes" />
  <method type="double" name="value">
    <declaration type="double" name="f" />
  </method>
  <declaration type="Basis" name="B" />
  <declaration type="double" name="factor" />
  <method type="constructor" name="ElliRotated" />
  <method type="constructor" name="ElliRotated" />
  <method type="double" name="value">
    <declaration type="double" name="f" />
  </method>
  <declaration type="double" name="factor" />
  <method type="constructor" name="Elli" />
  <method type="constructor" name="Elli" />
  <method type="double" name="value">
    <declaration type="double" name="f" />
  </method>
  <declaration type="Elli" name="elli" />
  <method type="double" name="value" />
  <method type="double" name="value">
    <declaration type="double" name="f" />
    <comment>private int fcount = 0;</comment>
    <comment>System.out.print("" + (fcount++) + ") ");</comment>
    <comment>for (int i = 0; i &lt; x.length; i++)</comment>
    <comment>System.out.print(x[i] +  " ");</comment>
    <comment>System.out.println(" = " + f);</comment>
  </method>
  <method type="double" name="value">
    <declaration type="double" name="f" />
  </method>
  <method type="double" name="value">
    <declaration type="double" name="f" />
  </method>
  <declaration type="double" name="axisratio" />
  <method type="constructor" name="Ackley" />
  <method type="constructor" name="Ackley" />
  <method type="double" name="value">
    <declaration type="double" name="f" />
    <declaration type="double" name="res2" />
    <declaration type="double" name="fac" />
    <scope />
  </method>
  <declaration type="double" name="axisratio" />
  <declaration type="double" name="amplitude" />
  <method type="constructor" name="Rastrigin" />
  <method type="constructor" name="Rastrigin" />
  <method type="double" name="value">
    <declaration type="double" name="f" />
    <declaration type="double" name="fac" />
    <scope />
  </method>
  <declaration type="double[][]" name="basis" />
  <declaration type="Random" name="rand" />
  <method type="double[]" name="Rotate">
    <declaration type="double[]" name="y" />
    <scope />
  </method>
  <method type="void" name="GenBasis">
    <declaration type="double" name="sp" />
    <declaration type="int" name="i" />
    <scope>
      <scope />
    </scope>
    <comment>generate orthogonal basis</comment>
    <comment>sample components gaussian</comment>
    <comment>substract projection of previous vectors</comment>
    <comment>sp += basis[i][k]  basis[j][k];  scalar product</comment>
    <comment>basis[i][k] -= sp  basis[j][k];  substract</comment>
    <comment>normalize</comment>
    <comment>sp += basis[i][k]  basis[i][k];  squared norm</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>See MATH-728</comment>
  <comment>TODO: this test is temporarily disabled for 3.2 release as a bug in Cobertura</comment>
  <comment>makes it run for several hours before completing</comment>
  <comment>use not always the same basis</comment>
</class>
