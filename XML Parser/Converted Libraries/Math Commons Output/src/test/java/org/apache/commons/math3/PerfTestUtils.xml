<?xml version="1.0" encoding="UTF-8"?>
<class name="PerfTestUtils">
  <javadoc>
    <text>Simple benchmarking utilities.</text>
  </javadoc>
  <javadoc>
    <text>Nanoseconds to milliseconds conversion factor ({@value}).</text>
  </javadoc>
  <declaration type="double" name="NANO_TO_MILLI" />
  <javadoc>
    <text>Default number of code repeat per timed block.</text>
  </javadoc>
  <declaration type="int" name="DEFAULT_REPEAT_CHUNK" />
  <javadoc>
    <text>Default number of code repeats for computing the average run time.</text>
  </javadoc>
  <declaration type="int" name="DEFAULT_REPEAT_STAT" />
  <javadoc>
    <text>RNG.</text>
  </javadoc>
  <declaration type="Random" name="rng" />
  <javadoc>
    <text>Timing.</text>
    <param>repeatChunk Each timing measurement will done done for that
 * number of repeats of the code.</param>
    <param>repeatStat Timing will be averaged over that number of runs.</param>
    <param>runGC Call {@code System.gc()} between each timed block. When
 * set to {@code true}, the test will run much slower.</param>
    <param>methods Codes being timed.</param>
    <return>for each of the given {@code methods}, a{@link StatisticalSummary} of the average times (in milliseconds)
 * taken by a single call to the {@code call} method (i.e. the time
 * taken by each timed block divided by {@code repeatChunk}).</return>
  </javadoc>
  <method type="StatisticalSummary[]" name="time">
    <declaration type="double[][][]" name="times" />
    <declaration type="int" name="len" />
    <declaration type="StatisticalSummary[]" name="stats" />
    <scope>
      <declaration type="SummaryStatistics" name="s" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Timing.</text>
    <param>repeatChunk Each timing measurement will done done for that
 * number of repeats of the code.</param>
    <param>repeatStat Timing will be averaged over that number of runs.</param>
    <param>runGC Call {@code System.gc()} between each timed block. When
 * set to {@code true}, the test will run much slower.</param>
    <param>methods Codes being timed.</param>
    <return>for each of the given {@code methods} (first dimension), and
 * each of the {@code repeatStat} runs (second dimension):
 * &lt;ul&gt;
 * &lt;li&gt;
 * the average time (in milliseconds) taken by a single call to the{@code call} method (i.e. the time taken by each timed block divided
 * by {@code repeatChunk})
 * &lt;/li&gt;
 * &lt;li&gt;
 * the result returned by the {@code call} method.
 * &lt;/li&gt;
 * &lt;/ul&gt;</return>
  </javadoc>
  <method type="double[][][]" name="timesAndResults">
    <declaration type="int" name="numMethods" />
    <declaration type="double[][][]" name="timesAndResults" />
    <scope>
      <scope>
        <scope>
          <scope />
          <declaration type="Callable&lt;Double&gt;" name="r" />
          <declaration type="double[]" name="result" />
          <declaration type="long" name="start" />
          <scope />
          <declaration type="long" name="stop" />
        </scope>
      </scope>
    </scope>
    <scope />
    <declaration type="double" name="normFactor" />
    <scope>
      <scope />
    </scope>
    <comment>Try to perform GC outside the timed block.</comment>
    <comment>Timed block.</comment>
    <comment>Collect run time.</comment>
    <comment>Keep track of a randomly selected result.</comment>
    <comment>Abort benchmarking if codes throw exceptions.</comment>
  </method>
  <javadoc>
    <text>Timing and report (to standard output) the average time and standard
 * deviation of a single call.
 * The timing is performed by calling the{@link #time(int,int,boolean,Callable[]) time} method.</text>
    <param>title Title of the test (for the report).</param>
    <param>repeatChunk Each timing measurement will done done for that
 * number of repeats of the code.</param>
    <param>repeatStat Timing will be averaged over that number of runs.</param>
    <param>runGC Call {@code System.gc()} between each timed block. When
 * set to {@code true}, the test will run much slower.</param>
    <param>methods Codes being timed.</param>
    <return>for each of the given {@code methods}, a statistics of the
 * average times (in milliseconds) taken by a single call to the{@code call} method (i.e. the time taken by each timed block divided
 * by {@code repeatChunk}).</return>
  </javadoc>
  <method type="StatisticalSummary[]" name="timeAndReport">
    <declaration type="String" name="hFormat" />
    <declaration type="int" name="nameLength" />
    <scope>
      <declaration type="int" name="len" />
      <scope />
    </scope>
    <declaration type="String" name="nameLengthFormat" />
    <declaration type="String" name="cFormat" />
    <declaration type="String" name="format" />
    <declaration type="StatisticalSummary[]" name="time" />
    <declaration type="double" name="refSum" />
    <scope>
      <declaration type="StatisticalSummary" name="s" />
      <declaration type="double" name="sum" />
    </scope>
    <comment>Header format.</comment>
    <comment>Width of the longest name.</comment>
    <comment>Column format.</comment>
    <comment>Result format.</comment>
  </method>
  <javadoc>
    <text>Timing and report (to standard output).
 * This method calls {@link #timeAndReport(String,int,int,boolean,RunTest[])timeAndReport(title, 1000, 10000, false, methods)}.</text>
    <param>title Title of the test (for the report).</param>
    <param>methods Codes being timed.</param>
    <return>for each of the given {@code methods}, a statistics of the
 * average times (in milliseconds) taken by a single call to the{@code call} method (i.e. the time taken by each timed block divided
 * by {@code repeatChunk}).</return>
  </javadoc>
  <method type="StatisticalSummary[]" name="timeAndReport" />
  <javadoc>
    <text>Utility class for storing a test label.</text>
  </javadoc>
  <declaration type="String" name="name" />
  <javadoc>
    <param>name Test name.</param>
  </javadoc>
  <method type="constructor" name="RunTest" />
  <javadoc>
    <return>the name of this test.</return>
  </javadoc>
  <method type="String" name="getName" />
  <method name="call" type="Double" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
