<?xml version="1.0" encoding="UTF-8"?>
<class name="CMAESOptimizerTest">
  <javadoc>
    <text>Test for {@link CMAESOptimizer}.</text>
  </javadoc>
  <declaration type="int" name="DIM" />
  <declaration type="int" name="LAMBDA" />
  <method type="void" name="testInitOutofbounds1">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testInitOutofbounds2">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testBoundariesDimensionMismatch">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testInputSigmaNegative">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testInputSigmaOutOfRange">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testInputSigmaDimensionMismatch">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testRosen">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testMaximize">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testEllipse">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testElliRotated">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testCigar">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testCigarWithBoundaries">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testTwoAxes">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testCigTab">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testSphere">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testTablet">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testDiffPow">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testSsDiffPow">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testAckley">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testRastrigin">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testConstrainedRosen">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testDiagonalRosen">
    <declaration type="double[]" name="startPoint" />
    <declaration type="double[]" name="insigma" />
    <declaration type="double[][]" name="boundaries" />
    <declaration type="PointValuePair" name="expected" />
  </method>
  <method type="void" name="testMath864">
    <declaration type="CMAESOptimizer" name="optimizer" />
    <declaration type="MultivariateFunction[]" name="fitnessFunction" />
    <method type="double" name="value">
      <declaration type="double" name="target" />
      <declaration type="double" name="error" />
    </method>
    <declaration type="double[]" name="start" />
    <declaration type="double[]" name="lower" />
    <declaration type="double[]" name="upper" />
    <declaration type="double[]" name="result" />
  </method>
  <javadoc>
    <text>Cf. MATH-867</text>
  </javadoc>
  <method type="void" name="testFitAccuracyDependsOnBoundary">
    <declaration type="CMAESOptimizer" name="optimizer" />
    <declaration type="MultivariateFunction[]" name="fitnessFunction" />
    <method type="double" name="value">
      <declaration type="double" name="target" />
      <declaration type="double" name="error" />
    </method>
    <declaration type="double[]" name="start" />
    <declaration type="PointValuePair" name="result" />
    <declaration type="double" name="resNoBound" />
    <declaration type="double[]" name="lower" />
    <declaration type="double[]" name="upper" />
    <declaration type="double" name="resNearLo" />
    <declaration type="double" name="resNearHi" />
    <comment>No bounds.</comment>
    <comment>Optimum is near the lower bound.</comment>
    <comment>Optimum is near the upper bound.</comment>
    <comment>System.out.println("resNoBound=" + resNoBound +</comment>
    <comment>" resNearLo=" + resNearLo +</comment>
    <comment>" resNearHi=" + resNearHi);</comment>
    <comment>The two values currently differ by a substantial amount, indicating that</comment>
    <comment>the bounds definition can prevent reaching the optimum.</comment>
  </method>
  <javadoc>
    <param>func Function to optimize.</param>
    <param>startPoint Starting point.</param>
    <param>inSigma Individual input sigma.</param>
    <param>boundaries Upper / lower point limit.</param>
    <param>goal Minimization or maximization.</param>
    <param>lambda Population size used for offspring.</param>
    <param>isActive Covariance update mechanism.</param>
    <param>diagonalOnly Simplified covariance update.</param>
    <param>stopValue Termination criteria for optimization.</param>
    <param>fTol Tolerance relative error on the objective function.</param>
    <param>pointTol Tolerance for checking that the optimum is correct.</param>
    <param>maxEvaluations Maximum number of evaluations.</param>
    <param>expected Expected point / value.</param>
  </javadoc>
  <method type="void" name="doTest">
    <declaration type="int" name="dim" />
    <declaration type="CMAESOptimizer" name="optim" />
    <declaration type="double[]" name="lB" />
    <declaration type="double[]" name="uB" />
    <declaration type="PointValuePair" name="result" />
    <scope />
    <comment>test diagonalOnly = 0 - slow but normally fewer feval#</comment>
    <comment>System.out.println("sol=" + Arrays.toString(result.getPoint()));</comment>
  </method>
  <method type="double[]" name="point">
    <declaration type="double[]" name="ds" />
  </method>
  <method type="double[][]" name="boundaries">
    <declaration type="double[][]" name="boundaries" />
  </method>
  <method type="double" name="value">
    <declaration type="double" name="f" />
  </method>
  <declaration type="double" name="factor" />
  <method type="constructor" name="Cigar" />
  <method type="constructor" name="Cigar" />
  <method type="double" name="value">
    <declaration type="double" name="f" />
  </method>
  <declaration type="double" name="factor" />
  <method type="constructor" name="Tablet" />
  <method type="constructor" name="Tablet" />
  <method type="double" name="value">
    <declaration type="double" name="f" />
  </method>
  <declaration type="double" name="factor" />
  <method type="constructor" name="CigTab" />
  <method type="constructor" name="CigTab" />
  <method type="double" name="value">
    <declaration type="int" name="end" />
    <declaration type="double" name="f" />
  </method>
  <declaration type="double" name="factor" />
  <method type="constructor" name="TwoAxes" />
  <method type="constructor" name="TwoAxes" />
  <method type="double" name="value">
    <declaration type="double" name="f" />
  </method>
  <declaration type="Basis" name="B" />
  <declaration type="double" name="factor" />
  <method type="constructor" name="ElliRotated" />
  <method type="constructor" name="ElliRotated" />
  <method type="double" name="value">
    <declaration type="double" name="f" />
  </method>
  <declaration type="double" name="factor" />
  <method type="constructor" name="Elli" />
  <method type="constructor" name="Elli" />
  <method type="double" name="value">
    <declaration type="double" name="f" />
  </method>
  <method type="double" name="value" />
  <method type="double" name="value">
    <declaration type="double" name="f" />
  </method>
  <method type="double" name="value">
    <declaration type="double" name="f" />
  </method>
  <method type="double" name="value">
    <declaration type="double" name="f" />
  </method>
  <declaration type="double" name="axisratio" />
  <method type="constructor" name="Ackley" />
  <method type="constructor" name="Ackley" />
  <method type="double" name="value">
    <declaration type="double" name="f" />
    <declaration type="double" name="res2" />
    <declaration type="double" name="fac" />
    <scope />
  </method>
  <declaration type="double" name="axisratio" />
  <declaration type="double" name="amplitude" />
  <method type="constructor" name="Rastrigin" />
  <method type="constructor" name="Rastrigin" />
  <method type="double" name="value">
    <declaration type="double" name="f" />
    <declaration type="double" name="fac" />
    <scope />
  </method>
  <declaration type="double[][]" name="basis" />
  <declaration type="Random" name="rand" />
  <method type="double[]" name="Rotate">
    <declaration type="double[]" name="y" />
    <scope />
  </method>
  <method type="void" name="GenBasis">
    <declaration type="double" name="sp" />
    <declaration type="int" name="i" />
    <scope>
      <scope />
    </scope>
    <comment>generate orthogonal basis</comment>
    <comment>sample components gaussian</comment>
    <comment>substract projection of previous vectors</comment>
    <comment>sp += basis[i][k]  basis[j][k];  scalar product</comment>
    <comment>basis[i][k] -= sp  basis[j][k];  substract</comment>
    <comment>normalize</comment>
    <comment>sp += basis[i][k]  basis[i][k];  squared norm</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>use not always the same basis</comment>
</class>
