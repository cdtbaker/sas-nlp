<?xml version="1.0" encoding="UTF-8"?>
<class name="UnmodifiableRealVectorAbstractTest">
  <javadoc>
    <text>This is an abstract test of the {@link RealVector#unmodifiableRealVector(RealVector) unmodifiable vector}implementation. These unmodifiable vectors decorate a (modifiable){@link RealVector}; therefore, a new implementation of this abstract
 * test should be considered for each implementation of{@link RealVector}.</text>
    <version>$Id$</version>
  </javadoc>
  <javadoc>
    <text>The dimension of the randomly generated vectors.</text>
  </javadoc>
  <declaration type="int" name="DIM" />
  <javadoc>
    <text>Absolute tolerance.</text>
  </javadoc>
  <declaration type="double" name="EPS" />
  <javadoc>
    <text>The list of methods which are excluded from the general test{@link #testAllButExcluded()}.</text>
  </javadoc>
  <declaration type="Set&lt;String&gt;" name="EXCLUDE" />
  <javadoc>
    <text>The random number generator (always initialized with the same seed.</text>
  </javadoc>
  <declaration type="Random" name="RANDOM" />
  <scope>
    <scope />
  </scope>
  <javadoc>
    <text>Returns {@code true} if the specified {@code double} are equal (within a
 * given tolerance).</text>
    <param>x First {@code double}.</param>
    <param>y Second {@code double}.</param>
    <return>{@code true} if {@code x} and {@code y} are equal.</return>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Returns {@code true} if the specified {@code double} arrays are equal
 * (within a given tolerance).</text>
    <param>x First array.</param>
    <param>y Second array.</param>
    <return>{@code true} if {@code x} and {@code y} are equal.</return>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <declaration type="int" name="n" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns {@code true} if the specified {@code RealVector} are equal
 * (within a given tolerance).</text>
    <param>x First vector.</param>
    <param>y Second vector.</param>
    <return>{@code true} if {@code x} and {@code y} are equal.</return>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <declaration type="int" name="n" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns {@code true} if the specified {@code RealVector} is equal to the
 * specified {@code double} array (within a given tolerance).</text>
    <param>x Vector.</param>
    <param>y Array.</param>
    <return>{@code true} if {@code x} and {@code y} are equal.</return>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <declaration type="int" name="n" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns {@code true} if the specified {@code RealMatrix} are equal
 * (within a given tolerance).</text>
    <param>x First matrix.</param>
    <param>y Second matrix.</param>
    <return>{@code true} if {@code x} and {@code y} are equal.</return>
  </javadoc>
  <method type="boolean" name="equals">
    <scope />
    <scope />
    <declaration type="int" name="rows" />
    <declaration type="int" name="cols" />
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Returns {@code true} if the specified {@code Object} are equal.</text>
    <param>x First object.</param>
    <param>y Second object.</param>
    <return>{@code true} if {@code x} and {@code y} are equal.</return>
    <throws>IllegalArgumentException if {@code x} and {@code y} could
 * not be compared.</throws>
  </javadoc>
  <method type="boolean" name="equals">
    <scope>
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
    </scope>
    <scope />
  </method>
  <method name="createVector" type="RealVector" />
  <javadoc>
    <text>Creates a new random vector of a specified type. This vector is then to
 * be wrapped in an unmodifiable vector.</text>
    <return>a new random vector.</return>
  </javadoc>
  <javadoc>
    <text>Creates a new random object of the specified type.</text>
    <param>c Class of the object to be created.</param>
    <return>a new random object.</return>
    <throws>IllegalArgumentException if the specified class is not
 * recognized by this method.</throws>
  </javadoc>
  <method type="Object" name="createParameter">
    <scope />
    <scope />
    <scope>
      <declaration type="double[]" name="v" />
      <scope />
    </scope>
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>This is the general test of most methods in the{@link RealVector#unmodifiableRealVector(RealVector) unmodifiable vector}.
 * It works as follows.
 * First, an unmodifiable view of a copy of the specified random vector{@code u} is created: this defines {@code v}. Then the &lt;em&gt;same&lt;/em&gt;
 * method {@code m} is invoked on {@code u} and {@code v}, with randomly
 * generated parameters {@code args}.
 * If it turns out that {@code u} has changed after the call of method{@code m}, then this test checks that the call of this method on{@code v} resulted in a {@link MathUnsupportedOperationException}. If{@code u} was not modified, then this test checks that the results
 * returned by the call of method {@code m} on {@code u} and {@code v}returned the same result.</text>
    <param>m Method to be tested.</param>
    <param>u Random vector from which the unmodifiable view is to be
 * constructed.</param>
    <param>args Arguments to be passed to method {@code m}.</param>
  </javadoc>
  <method type="void" name="callMethod">
    <declaration type="RealVector" name="uu" />
    <declaration type="RealVector" name="v" />
    <declaration type="Object" name="exp" />
    <scope>
      <declaration type="Object" name="act" />
    </scope>
    <scope>
      <declaration type="boolean" name="flag" />
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>This test calls {@link #callMethod(Method,RealVector,Object)} on
 * every method defined in interface {@link RealVector}. It generates the
 * appropriate random arguments. Some methods are manually excluded (see{@link #EXCLUDE}), they must be handled by separate tests.</text>
  </javadoc>
  <method type="void" name="testAllButExcluded">
    <declaration type="Method[]" name="method" />
    <scope>
      <declaration type="Method" name="m" />
      <scope>
        <declaration type="RealVector" name="u" />
        <declaration type="Class&lt;?&gt;[]" name="paramType" />
        <declaration type="Object[]" name="param" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testGetEntry">
    <declaration type="RealVector" name="u" />
    <declaration type="RealVector" name="v" />
    <scope />
  </method>
  <method type="void" name="testSetEntry">
    <declaration type="RealVector" name="u" />
    <declaration type="RealVector" name="v" />
    <scope />
  </method>
  <method type="void" name="testAddToEntry">
    <declaration type="RealVector" name="u" />
    <declaration type="RealVector" name="v" />
    <scope />
  </method>
  <method type="void" name="testGetSubVector">
    <declaration type="RealVector" name="u" />
    <declaration type="RealVector" name="v" />
    <scope>
      <scope>
        <declaration type="RealVector" name="exp" />
        <declaration type="RealVector" name="act" />
      </scope>
    </scope>
  </method>
  <method type="void" name="testSetSubVector">
    <declaration type="RealVector" name="u" />
    <declaration type="RealVector" name="v" />
  </method>
  <method type="void" name="testIterator">
    <declaration type="RealVector" name="u" />
    <declaration type="Iterator&lt;Entry&gt;" name="i" />
    <declaration type="RealVector" name="v" />
    <declaration type="Iterator&lt;Entry&gt;" name="j" />
    <declaration type="boolean" name="flag" />
    <scope>
      <declaration type="Entry" name="exp" />
      <declaration type="Entry" name="act" />
      <scope />
      <scope />
    </scope>
  </method>
  <method type="void" name="testSparseIterator">
    <declaration type="RealVector" name="u" />
    <declaration type="Iterator&lt;Entry&gt;" name="i" />
    <declaration type="RealVector" name="v" />
    <declaration type="Iterator&lt;Entry&gt;" name="j" />
    <declaration type="boolean" name="flag" />
    <scope>
      <declaration type="Entry" name="exp" />
      <declaration type="Entry" name="act" />
      <scope />
      <scope />
    </scope>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements. See the NOTICE file distributed with this
 work for additional information regarding copyright ownership. The ASF
 licenses this file to You under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.</comment>
  <comment>Excluded because they are inherited from "Object".</comment>
</class>
