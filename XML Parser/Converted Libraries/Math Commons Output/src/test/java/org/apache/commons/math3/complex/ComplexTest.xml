<?xml version="1.0" encoding="UTF-8"?>
<class name="ComplexTest">
  <javadoc>
    <version>$Id: ComplexTest.java 1459927 2013-03-22 18:55:58Z luc $</version>
  </javadoc>
  <declaration type="double" name="inf" />
  <declaration type="double" name="neginf" />
  <declaration type="double" name="nan" />
  <declaration type="double" name="pi" />
  <declaration type="Complex" name="oneInf" />
  <declaration type="Complex" name="oneNegInf" />
  <declaration type="Complex" name="infOne" />
  <declaration type="Complex" name="infZero" />
  <declaration type="Complex" name="infNaN" />
  <declaration type="Complex" name="infNegInf" />
  <declaration type="Complex" name="infInf" />
  <declaration type="Complex" name="negInfInf" />
  <declaration type="Complex" name="negInfZero" />
  <declaration type="Complex" name="negInfOne" />
  <declaration type="Complex" name="negInfNaN" />
  <declaration type="Complex" name="negInfNegInf" />
  <declaration type="Complex" name="oneNaN" />
  <declaration type="Complex" name="zeroInf" />
  <declaration type="Complex" name="zeroNaN" />
  <declaration type="Complex" name="nanInf" />
  <declaration type="Complex" name="nanNegInf" />
  <declaration type="Complex" name="nanZero" />
  <method type="void" name="testConstructor">
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testConstructorNaN">
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testAbs">
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testAbsNaN">
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testAbsInfinite">
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testAdd">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="y" />
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testAddNaN">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="w" />
  </method>
  <method type="void" name="testAddInf">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="w" />
  </method>
  <method type="void" name="testScalarAdd">
    <declaration type="Complex" name="x" />
    <declaration type="double" name="yDouble" />
    <declaration type="Complex" name="yComplex" />
  </method>
  <method type="void" name="testScalarAddNaN">
    <declaration type="Complex" name="x" />
    <declaration type="double" name="yDouble" />
    <declaration type="Complex" name="yComplex" />
  </method>
  <method type="void" name="testScalarAddInf">
    <declaration type="Complex" name="x" />
    <declaration type="double" name="yDouble" />
    <declaration type="Complex" name="yComplex" />
  </method>
  <method type="void" name="testConjugate">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testConjugateNaN">
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testConjugateInfiinite">
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testDivide">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="y" />
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testDivideReal">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="y" />
  </method>
  <method type="void" name="testDivideImaginary">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="y" />
  </method>
  <method type="void" name="testDivideInf">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="w" />
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testDivideZero">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="z" />
    <comment>Assert.assertEquals(z, Complex.INF);  See MATH-657</comment>
  </method>
  <method type="void" name="testDivideZeroZero">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testDivideNaN">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testDivideNaNInf">
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testScalarDivide">
    <declaration type="Complex" name="x" />
    <declaration type="double" name="yDouble" />
    <declaration type="Complex" name="yComplex" />
  </method>
  <method type="void" name="testScalarDivideNaN">
    <declaration type="Complex" name="x" />
    <declaration type="double" name="yDouble" />
    <declaration type="Complex" name="yComplex" />
  </method>
  <method type="void" name="testScalarDivideInf">
    <declaration type="Complex" name="x" />
    <declaration type="double" name="yDouble" />
    <declaration type="Complex" name="yComplex" />
  </method>
  <method type="void" name="testScalarDivideZero">
    <declaration type="Complex" name="x" />
  </method>
  <method type="void" name="testReciprocal">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="act" />
    <declaration type="double" name="expRe" />
    <declaration type="double" name="expIm" />
  </method>
  <method type="void" name="testReciprocalReal">
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testReciprocalImaginary">
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testReciprocalInf">
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testReciprocalZero" />
  <method type="void" name="testReciprocalNaN" />
  <method type="void" name="testMultiply">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="y" />
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testMultiplyNaN">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testMultiplyInfInf">
    <comment>Assert.assertTrue(infInf.multiply(infInf).isNaN());  MATH-620</comment>
  </method>
  <method type="void" name="testMultiplyNaNInf">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="w" />
    <comment>[MATH-164]</comment>
  </method>
  <method type="void" name="testScalarMultiply">
    <declaration type="Complex" name="x" />
    <declaration type="double" name="yDouble" />
    <declaration type="Complex" name="yComplex" />
    <declaration type="int" name="zInt" />
    <declaration type="Complex" name="zComplex" />
  </method>
  <method type="void" name="testScalarMultiplyNaN">
    <declaration type="Complex" name="x" />
    <declaration type="double" name="yDouble" />
    <declaration type="Complex" name="yComplex" />
  </method>
  <method type="void" name="testScalarMultiplyInf">
    <declaration type="Complex" name="x" />
    <declaration type="double" name="yDouble" />
    <declaration type="Complex" name="yComplex" />
  </method>
  <method type="void" name="testNegate">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testNegateNaN">
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testSubtract">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="y" />
    <declaration type="Complex" name="z" />
  </method>
  <method type="void" name="testSubtractNaN">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="w" />
  </method>
  <method type="void" name="testSubtractInf">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="w" />
  </method>
  <method type="void" name="testScalarSubtract">
    <declaration type="Complex" name="x" />
    <declaration type="double" name="yDouble" />
    <declaration type="Complex" name="yComplex" />
  </method>
  <method type="void" name="testScalarSubtractNaN">
    <declaration type="Complex" name="x" />
    <declaration type="double" name="yDouble" />
    <declaration type="Complex" name="yComplex" />
  </method>
  <method type="void" name="testScalarSubtractInf">
    <declaration type="Complex" name="x" />
    <declaration type="double" name="yDouble" />
    <declaration type="Complex" name="yComplex" />
  </method>
  <method type="void" name="testEqualsNull">
    <declaration type="Complex" name="x" />
  </method>
  <method type="void" name="testEqualsClass">
    <declaration type="Complex" name="x" />
  </method>
  <method type="void" name="testEqualsSame">
    <declaration type="Complex" name="x" />
  </method>
  <method type="void" name="testEqualsTrue">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="y" />
  </method>
  <method type="void" name="testEqualsRealDifference">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="y" />
  </method>
  <method type="void" name="testEqualsImaginaryDifference">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="y" />
  </method>
  <method type="void" name="testEqualsNaN">
    <declaration type="Complex" name="realNaN" />
    <declaration type="Complex" name="imaginaryNaN" />
    <declaration type="Complex" name="complexNaN" />
  </method>
  <method type="void" name="testHashCode">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="y" />
    <declaration type="Complex" name="realNaN" />
    <declaration type="Complex" name="imaginaryNaN" />
  </method>
  <method type="void" name="testAcos">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="expected" />
  </method>
  <method type="void" name="testAcosInf" />
  <method type="void" name="testAcosNaN" />
  <method type="void" name="testAsin">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="expected" />
  </method>
  <method type="void" name="testAsinNaN" />
  <method type="void" name="testAsinInf" />
  <method type="void" name="testAtan">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="expected" />
  </method>
  <method type="void" name="testAtanInf" />
  <method type="void" name="testAtanI" />
  <method type="void" name="testAtanNaN" />
  <method type="void" name="testCos">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="expected" />
  </method>
  <method type="void" name="testCosNaN" />
  <method type="void" name="testCosInf" />
  <method type="void" name="testCosh">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="expected" />
  </method>
  <method type="void" name="testCoshNaN" />
  <method type="void" name="testCoshInf" />
  <method type="void" name="testExp">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="expected" />
    <declaration type="Complex" name="iPi" />
  </method>
  <method type="void" name="testExpNaN" />
  <method type="void" name="testExpInf" />
  <method type="void" name="testLog">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="expected" />
  </method>
  <method type="void" name="testLogNaN" />
  <method type="void" name="testLogInf" />
  <method type="void" name="testLogZero" />
  <method type="void" name="testPow">
    <declaration type="Complex" name="x" />
    <declaration type="Complex" name="y" />
    <declaration type="Complex" name="expected" />
  </method>
  <method type="void" name="testPowNaNBase">
    <declaration type="Complex" name="x" />
  </method>
  <method type="void" name="testPowNaNExponent">
    <declaration type="Complex" name="x" />
  </method>
  <method type="void" name="testPowInf" />
  <method type="void" name="testPowZero" />
  <method type="void" name="testScalarPow">
    <declaration type="Complex" name="x" />
    <declaration type="double" name="yDouble" />
    <declaration type="Complex" name="yComplex" />
  </method>
  <method type="void" name="testScalarPowNaNBase">
    <declaration type="Complex" name="x" />
    <declaration type="double" name="yDouble" />
    <declaration type="Complex" name="yComplex" />
  </method>
  <method type="void" name="testScalarPowNaNExponent">
    <declaration type="Complex" name="x" />
    <declaration type="double" name="yDouble" />
    <declaration type="Complex" name="yComplex" />
  </method>
  <method type="void" name="testScalarPowInf" />
  <method type="void" name="testScalarPowZero" />
  <method type="void" name="testpowNull" />
  <method type="void" name="testSin">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="expected" />
  </method>
  <method type="void" name="testSinInf" />
  <method type="void" name="testSinNaN" />
  <method type="void" name="testSinh">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="expected" />
  </method>
  <method type="void" name="testSinhNaN" />
  <method type="void" name="testSinhInf" />
  <method type="void" name="testSqrtRealPositive">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="expected" />
  </method>
  <method type="void" name="testSqrtRealZero">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="expected" />
  </method>
  <method type="void" name="testSqrtRealNegative">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="expected" />
  </method>
  <method type="void" name="testSqrtImaginaryZero">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="expected" />
  </method>
  <method type="void" name="testSqrtImaginaryNegative">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="expected" />
  </method>
  <method type="void" name="testSqrtPolar">
    <declaration type="double" name="r" />
    <scope>
      <declaration type="double" name="theta" />
      <scope>
        <declaration type="Complex" name="z" />
        <declaration type="Complex" name="sqrtz" />
      </scope>
    </scope>
  </method>
  <method type="void" name="testSqrtNaN" />
  <method type="void" name="testSqrtInf" />
  <method type="void" name="testSqrt1z">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="expected" />
  </method>
  <method type="void" name="testSqrt1zNaN" />
  <method type="void" name="testTan">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="expected" />
    <declaration type="Complex" name="actual" />
    <comment>Check that no overflow occurs (MATH-722)</comment>
  </method>
  <method type="void" name="testTanNaN" />
  <method type="void" name="testTanInf" />
  <method type="void" name="testTanCritical" />
  <method type="void" name="testTanh">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="expected" />
    <declaration type="Complex" name="actual" />
    <comment>Check that no overflow occurs (MATH-722)</comment>
  </method>
  <method type="void" name="testTanhNaN" />
  <method type="void" name="testTanhInf" />
  <method type="void" name="testTanhCritical" />
  <javadoc>
    <text>test issue MATH-221</text>
  </javadoc>
  <method type="void" name="testMath221" />
  <javadoc>
    <text>Test: computing &lt;b&gt;third roots&lt;/b&gt; of z.
 * &lt;pre&gt;
 * &lt;code&gt;
 * &lt;b&gt;z = -2 + 2 * i&lt;/b&gt;
 * =&gt; z_0 =  1      +          i
 * =&gt; z_1 = -1.3660 + 0.3660 * i
 * =&gt; z_2 =  0.3660 - 1.3660 * i
 * &lt;/code&gt;
 * &lt;/pre&gt;</text>
  </javadoc>
  <method type="void" name="testNthRoot_normal_thirdRoot">
    <declaration type="Complex" name="z" />
    <declaration type="Complex[]" name="thirdRootsOfZ" />
    <comment>The complex number we want to compute all third-roots for.</comment>
    <comment>The List holding all third roots</comment>
    <comment>Returned Collection must not be empty!</comment>
    <comment>test z_0</comment>
    <comment>test z_1</comment>
    <comment>test z_2</comment>
  </method>
  <javadoc>
    <text>Test: computing &lt;b&gt;fourth roots&lt;/b&gt; of z.
 * &lt;pre&gt;
 * &lt;code&gt;
 * &lt;b&gt;z = 5 - 2 * i&lt;/b&gt;
 * =&gt; z_0 =  1.5164 - 0.1446 * i
 * =&gt; z_1 =  0.1446 + 1.5164 * i
 * =&gt; z_2 = -1.5164 + 0.1446 * i
 * =&gt; z_3 = -1.5164 - 0.1446 * i
 * &lt;/code&gt;
 * &lt;/pre&gt;</text>
  </javadoc>
  <method type="void" name="testNthRoot_normal_fourthRoot">
    <declaration type="Complex" name="z" />
    <declaration type="Complex[]" name="fourthRootsOfZ" />
    <comment>The complex number we want to compute all third-roots for.</comment>
    <comment>The List holding all fourth roots</comment>
    <comment>Returned Collection must not be empty!</comment>
    <comment>test z_0</comment>
    <comment>test z_1</comment>
    <comment>test z_2</comment>
    <comment>test z_3</comment>
  </method>
  <javadoc>
    <text>Test: computing &lt;b&gt;third roots&lt;/b&gt; of z.
 * &lt;pre&gt;
 * &lt;code&gt;
 * &lt;b&gt;z = 8&lt;/b&gt;
 * =&gt; z_0 =  2
 * =&gt; z_1 = -1 + 1.73205 * i
 * =&gt; z_2 = -1 - 1.73205 * i
 * &lt;/code&gt;
 * &lt;/pre&gt;</text>
  </javadoc>
  <method type="void" name="testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty">
    <declaration type="Complex" name="z" />
    <declaration type="Complex[]" name="thirdRootsOfZ" />
    <comment>The number 8 has three third roots. One we all already know is the number 2.</comment>
    <comment>But there are two more complex roots.</comment>
    <comment>The List holding all third roots</comment>
    <comment>Returned Collection must not be empty!</comment>
    <comment>test z_0</comment>
    <comment>test z_1</comment>
    <comment>test z_2</comment>
  </method>
  <javadoc>
    <text>Test: computing &lt;b&gt;third roots&lt;/b&gt; of z with real part 0.
 * &lt;pre&gt;
 * &lt;code&gt;
 * &lt;b&gt;z = 2 * i&lt;/b&gt;
 * =&gt; z_0 =  1.0911 + 0.6299 * i
 * =&gt; z_1 = -1.0911 + 0.6299 * i
 * =&gt; z_2 = -2.3144 - 1.2599 * i
 * &lt;/code&gt;
 * &lt;/pre&gt;</text>
  </javadoc>
  <method type="void" name="testNthRoot_cornercase_thirdRoot_realPartZero">
    <declaration type="Complex" name="z" />
    <declaration type="Complex[]" name="thirdRootsOfZ" />
    <comment>complex number with only imaginary part</comment>
    <comment>The List holding all third roots</comment>
    <comment>Returned Collection must not be empty!</comment>
    <comment>test z_0</comment>
    <comment>test z_1</comment>
    <comment>test z_2</comment>
  </method>
  <javadoc>
    <text>Test cornercases with NaN and Infinity.</text>
  </javadoc>
  <method type="void" name="testNthRoot_cornercase_NAN_Inf">
    <declaration type="List&lt;Complex&gt;" name="roots" />
    <comment>NaN + finite -&gt; NaN</comment>
    <comment>NaN + infinite -&gt; NaN</comment>
    <comment>finite + infinite -&gt; Inf</comment>
    <comment>infinite + infinite -&gt; Inf</comment>
  </method>
  <javadoc>
    <text>Test standard values</text>
  </javadoc>
  <method type="void" name="testGetArgument">
    <declaration type="Complex" name="z" />
  </method>
  <javadoc>
    <text>Verify atan2-style handling of infinite parts</text>
  </javadoc>
  <method type="void" name="testGetArgumentInf" />
  <javadoc>
    <text>Verify that either part NaN results in NaN</text>
  </javadoc>
  <method type="void" name="testGetArgumentNaN" />
  <method type="void" name="testSerial">
    <declaration type="Complex" name="z" />
    <declaration type="Complex" name="ncmplx" />
    <declaration type="Complex" name="infcmplx" />
    <declaration type="TestComplex" name="tz" />
    <declaration type="TestComplex" name="ntcmplx" />
    <declaration type="TestComplex" name="inftcmplx" />
  </method>
  <javadoc>
    <text>Class to test extending Complex</text>
  </javadoc>
  <javadoc>
    <text>Serialization identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <method type="constructor" name="TestComplex" />
  <method type="constructor" name="TestComplex" />
  <method type="TestComplex" name="createComplex" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
