<?xml version="1.0" encoding="UTF-8"?>
<class name="NevilleInterpolatorTest">
  <javadoc>
    <text>Test case for Neville interpolator.
 * &lt;p&gt;
 * The error of polynomial interpolation is
 * f(z) - p(z) = f^(n)(zeta) * (z-x[0])(z-x[1])...(z-x[n-1]) / n!
 * where f^(n) is the n-th derivative of the approximated function and
 * zeta is some point in the interval determined by x[] and z.
 * &lt;p&gt;
 * Since zeta is unknown, f^(n)(zeta) cannot be calculated. But we can bound
 * it and use the absolute value upper bound for estimates. For reference,
 * see &lt;b&gt;Introduction to Numerical Analysis&lt;/b&gt;, ISBN 038795452X, chapter 2.</text>
    <version>$Id: NevilleInterpolatorTest.java 1374632 2012-08-18 18:11:11Z luc $</version>
  </javadoc>
  <javadoc>
    <text>Test of interpolator for the sine function.
 * &lt;p&gt;
 * |sin^(n)(zeta)| &lt;= 1.0, zeta in [0, 2*PI]</text>
  </javadoc>
  <method type="void" name="testSinFunction">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="UnivariateInterpolator" name="interpolator" />
    <declaration type="double[]" name="x" />
    <declaration type="int" name="n" />
    <declaration type="double" name="min" />
    <scope />
    <declaration type="double" name="derivativebound" />
    <declaration type="UnivariateFunction" name="p" />
    <comment>6 interpolating points on interval [0, 2*PI]</comment>
  </method>
  <javadoc>
    <text>Test of interpolator for the exponential function.
 * &lt;p&gt;
 * |expm1^(n)(zeta)| &lt;= e, zeta in [-1, 1]</text>
  </javadoc>
  <method type="void" name="testExpm1Function">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="UnivariateInterpolator" name="interpolator" />
    <declaration type="double[]" name="x" />
    <declaration type="int" name="n" />
    <declaration type="double" name="min" />
    <scope />
    <declaration type="double" name="derivativebound" />
    <declaration type="UnivariateFunction" name="p" />
    <comment>5 interpolating points on interval [-1, 1]</comment>
  </method>
  <javadoc>
    <text>Test of parameters for the interpolator.</text>
  </javadoc>
  <method type="void" name="testParameters">
    <declaration type="UnivariateInterpolator" name="interpolator" />
    <scope>
      <declaration type="double[]" name="x" />
      <declaration type="double[]" name="y" />
      <declaration type="UnivariateFunction" name="p" />
    </scope>
    <scope />
    <comment>bad abscissas array</comment>
    <comment>expected</comment>
  </method>
  <javadoc>
    <text>Returns the partial error term (z-x[0])(z-x[1])...(z-x[n-1])/n!</text>
  </javadoc>
  <method type="double" name="partialerror">
    <scope />
    <declaration type="double" name="out" />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
