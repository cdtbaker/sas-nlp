<?xml version="1.0" encoding="UTF-8"?>
<class name="BigFractionTest">
  <method type="void" name="assertFraction" />
  <method type="void" name="assertFraction" />
  <method type="void" name="testConstructor">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testGoldenRatio">
    <comment>the golden ratio is notoriously a difficult number for continuous fraction</comment>
  </method>
  <method type="void" name="testDoubleConstructor" />
  <method type="void" name="testDigitLimitConstructor" />
  <method type="void" name="testEpsilonLimitConstructor" />
  <method type="void" name="testCompareTo">
    <declaration type="BigFraction" name="first" />
    <declaration type="BigFraction" name="second" />
    <declaration type="BigFraction" name="third" />
    <declaration type="BigFraction" name="pi1" />
    <declaration type="BigFraction" name="pi2" />
    <comment>these two values are different approximations of PI</comment>
    <comment>the first  one is approximately PI - 3.07e-18</comment>
    <comment>the second one is approximately PI + 1.936e-17</comment>
  </method>
  <method type="void" name="testDoubleValue">
    <declaration type="BigFraction" name="first" />
    <declaration type="BigFraction" name="second" />
  </method>
  <method type="void" name="testDoubleValueForLargeNumeratorAndDenominator">
    <declaration type="BigInteger" name="pow400" />
    <declaration type="BigInteger" name="pow401" />
    <declaration type="BigInteger" name="two" />
    <declaration type="BigFraction" name="large" />
  </method>
  <method type="void" name="testFloatValueForLargeNumeratorAndDenominator">
    <declaration type="BigInteger" name="pow400" />
    <declaration type="BigInteger" name="pow401" />
    <declaration type="BigInteger" name="two" />
    <declaration type="BigFraction" name="large" />
  </method>
  <method type="void" name="testFloatValue">
    <declaration type="BigFraction" name="first" />
    <declaration type="BigFraction" name="second" />
  </method>
  <method type="void" name="testIntValue">
    <declaration type="BigFraction" name="first" />
    <declaration type="BigFraction" name="second" />
  </method>
  <method type="void" name="testLongValue">
    <declaration type="BigFraction" name="first" />
    <declaration type="BigFraction" name="second" />
  </method>
  <method type="void" name="testConstructorDouble">
    <scope>
      <scope />
      <scope />
    </scope>
    <comment>expected</comment>
  </method>
  <method type="void" name="testAbs">
    <declaration type="BigFraction" name="a" />
    <declaration type="BigFraction" name="b" />
    <declaration type="BigFraction" name="c" />
  </method>
  <method type="void" name="testReciprocal">
    <declaration type="BigFraction" name="f" />
    <scope />
    <scope />
    <comment>large values</comment>
  </method>
  <method type="void" name="testNegate">
    <declaration type="BigFraction" name="f" />
    <comment>large values</comment>
  </method>
  <method type="void" name="testAdd">
    <declaration type="BigFraction" name="a" />
    <declaration type="BigFraction" name="b" />
    <declaration type="BigFraction" name="f1" />
    <declaration type="BigFraction" name="f2" />
    <declaration type="BigFraction" name="f" />
    <scope />
    <scope />
    <comment>if this fraction is added naively, it will overflow.</comment>
    <comment>check that it doesn't.</comment>
  </method>
  <method type="void" name="testDivide">
    <declaration type="BigFraction" name="a" />
    <declaration type="BigFraction" name="b" />
    <declaration type="BigFraction" name="f1" />
    <declaration type="BigFraction" name="f2" />
    <scope />
    <scope />
    <declaration type="BigFraction" name="f" />
    <scope />
    <scope />
  </method>
  <method type="void" name="testMultiply">
    <declaration type="BigFraction" name="a" />
    <declaration type="BigFraction" name="b" />
    <declaration type="BigFraction" name="f1" />
    <declaration type="BigFraction" name="f2" />
    <declaration type="BigFraction" name="f" />
    <scope />
    <scope />
  </method>
  <method type="void" name="testSubtract">
    <declaration type="BigFraction" name="a" />
    <declaration type="BigFraction" name="b" />
    <declaration type="BigFraction" name="f" />
    <scope />
    <scope />
    <declaration type="BigFraction" name="f1" />
    <declaration type="BigFraction" name="f2" />
    <comment>if this fraction is subtracted naively, it will overflow.</comment>
    <comment>check that it doesn't.</comment>
  </method>
  <method type="void" name="testBigDecimalValue" />
  <method type="void" name="testEqualsAndHashCode">
    <declaration type="BigFraction" name="zero" />
    <declaration type="BigFraction" name="nullFraction" />
    <declaration type="BigFraction" name="zero2" />
    <declaration type="BigFraction" name="one" />
  </method>
  <method type="void" name="testGetReducedFraction">
    <declaration type="BigFraction" name="threeFourths" />
    <scope />
    <scope />
    <comment>expected</comment>
  </method>
  <method type="void" name="testPercentage" />
  <method type="void" name="testPow" />
  <method type="void" name="testMath340">
    <declaration type="BigFraction" name="fractionA" />
    <declaration type="BigFraction" name="fractionB" />
    <declaration type="BigFraction" name="errorResult" />
    <declaration type="BigFraction" name="correctResult" />
  </method>
  <method type="void" name="testSerial">
    <declaration type="BigFraction[]" name="fractions" />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>MATH-179</comment>
  <comment>MATH-181</comment>
  <comment>MATH-744</comment>
  <comment>MATH-744</comment>
</class>
