<?xml version="1.0" encoding="UTF-8"?>
<class name="FastMathStrictComparisonTest">
  <javadoc>
    <text>Test to compare FastMath results against StrictMath results for boundary values.
 * &lt;p&gt;
 * Running all tests independently: &lt;br/&gt;{@code mvn test -Dtest=FastMathStrictComparisonTest}&lt;br/&gt;
 * or just run tests against a single method (e.g. scalb):&lt;br/&gt;{@code mvn test -Dtest=FastMathStrictComparisonTest -DargLine="-DtestMethod=scalb"}</text>
  </javadoc>
  <declaration type="Double[]" name="DOUBLE_SPECIAL_VALUES" />
  <declaration type="Float[]" name="FLOAT_SPECIAL_VALUES" />
  <declaration type="Object[]" name="LONG_SPECIAL_VALUES" />
  <declaration type="Object[]" name="INT_SPECIAL_VALUES" />
  <declaration type="Method" name="mathMethod" />
  <declaration type="Method" name="fastMethod" />
  <declaration type="Type[]" name="types" />
  <declaration type="Object[][]" name="valueArrays" />
  <method type="constructor" name="FastMathStrictComparisonTest" />
  <method type="void" name="test1" />
  <method type="boolean" name="isNumber" />
  <method type="boolean" name="isNumber" />
  <method type="void" name="reportFailedResults">
    <declaration type="String" name="methodName" />
    <declaration type="String" name="format" />
    <declaration type="long" name="actL" />
    <declaration type="long" name="expL" />
    <scope>
      <declaration type="Double" name="exp" />
      <declaration type="Double" name="act" />
      <scope>
        <scope>
          <scope />
        </scope>
      </scope>
    </scope>
    <scope>
      <declaration type="Float" name="exp" />
      <declaration type="Float" name="act" />
      <scope />
    </scope>
    <declaration type="StringBuilder" name="sb" />
    <declaration type="String" name="sep" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <declaration type="String" name="message" />
    <declaration type="boolean" name="fatal" />
    <scope />
    <scope />
    <comment>show difference as hex</comment>
    <comment>Not 100% sure off-by-one errors are allowed everywhere, so only allow for these methods</comment>
    <comment>show difference as hex</comment>
  </method>
  <method type="void" name="callMethods">
    <scope>
      <declaration type="Object" name="expected" />
      <declaration type="Object" name="actual" />
      <scope />
    </scope>
    <scope />
  </method>
  <method type="void" name="setupMethodCall">
    <declaration type="Object[]" name="params" />
    <declaration type="int" name="entry1" />
    <declaration type="int[]" name="entries" />
    <scope>
      <scope>
        <declaration type="int" name="entry2" />
        <scope />
      </scope>
      <scope />
    </scope>
  </method>
  <method type="List&lt;Object[]&gt;" name="data">
    <declaration type="String" name="singleMethod" />
    <declaration type="List&lt;Object[]&gt;[]" name="list" />
    <scope>
      <scope>
        <declaration type="Type[]" name="types" />
        <scope>
          <scope>
            <declaration type="Method[]" name="fastMethod" />
            <scope>
              <scope />
              <declaration type="Object[][][]" name="values" />
              <declaration type="int" name="index" />
              <scope>
                <scope />
                <scope />
                <scope />
                <scope />
                <scope />
              </scope>
            </scope>
            <scope />
          </scope>
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>Only test public methods</comment>
    <comment>Only check methods with at least one parameter</comment>
    <comment>Get the corresponding FastMath method</comment>
    <comment>It must be public too</comment>
    <comment>System.out.println(fastMethod);</comment>
    <comment>The current implementation runs each method as a separate test.
 Could be amended to run each value as a separate test</comment>
    <comment>setupMethodCall(mathMethod, fastMethod, params, data);</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>Values which often need special handling</comment>
  <comment>1,2</comment>
  <comment>3</comment>
  <comment>4,5</comment>
  <comment>6,7</comment>
  <comment>decreasing order of absolute value to help catch first failure</comment>
  <comment>8,9</comment>
  <comment>10,11</comment>
  <comment>12,13</comment>
  <comment>1,2</comment>
  <comment>3</comment>
  <comment>4,5</comment>
  <comment>6,7</comment>
  <comment>8,9</comment>
  <comment>1,2,3</comment>
  <comment>4,5</comment>
  <comment>1,2,3</comment>
  <comment>4,5</comment>
</class>
