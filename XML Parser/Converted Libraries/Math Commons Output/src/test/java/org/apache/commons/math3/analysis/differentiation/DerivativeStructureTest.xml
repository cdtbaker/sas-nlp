<?xml version="1.0" encoding="UTF-8"?>
<class name="DerivativeStructureTest">
  <javadoc>
    <text>Test for class {@link DerivativeStructure}.</text>
  </javadoc>
  <method type="DerivativeStructure" name="build" />
  <method type="void" name="testWrongVariableIndex" />
  <method type="void" name="testMissingOrders" />
  <method type="void" name="testTooLargeOrder" />
  <method type="void" name="testVariableWithoutDerivative0">
    <declaration type="DerivativeStructure" name="v" />
  </method>
  <method type="void" name="testVariableWithoutDerivative1">
    <declaration type="DerivativeStructure" name="v" />
  </method>
  <method type="void" name="testVariable">
    <scope />
  </method>
  <method type="void" name="testConstant">
    <scope />
  </method>
  <method type="void" name="testPrimitiveAdd">
    <scope />
  </method>
  <method type="void" name="testAdd">
    <scope>
      <declaration type="DerivativeStructure" name="x" />
      <declaration type="DerivativeStructure" name="y" />
      <declaration type="DerivativeStructure" name="z" />
      <declaration type="DerivativeStructure" name="xyz" />
    </scope>
  </method>
  <method type="void" name="testPrimitiveSubtract">
    <scope />
  </method>
  <method type="void" name="testSubtract">
    <scope>
      <declaration type="DerivativeStructure" name="x" />
      <declaration type="DerivativeStructure" name="y" />
      <declaration type="DerivativeStructure" name="z" />
      <declaration type="DerivativeStructure" name="xyz" />
    </scope>
  </method>
  <method type="void" name="testPrimitiveMultiply">
    <scope />
  </method>
  <method type="void" name="testMultiply">
    <scope>
      <declaration type="DerivativeStructure" name="x" />
      <declaration type="DerivativeStructure" name="y" />
      <declaration type="DerivativeStructure" name="z" />
      <declaration type="DerivativeStructure" name="xyz" />
      <scope>
        <scope>
          <scope>
            <scope />
          </scope>
        </scope>
      </scope>
    </scope>
  </method>
  <method type="void" name="testNegate">
    <scope />
  </method>
  <method type="void" name="testReciprocal">
    <scope>
      <declaration type="DerivativeStructure" name="r" />
      <scope>
        <declaration type="double" name="expected" />
      </scope>
    </scope>
  </method>
  <method type="void" name="testPow">
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="x" />
        <declaration type="DerivativeStructure" name="y" />
        <declaration type="DerivativeStructure" name="z" />
        <declaration type="List&lt;DerivativeStructure&gt;" name="list" />
        <scope>
          <scope />
        </scope>
        <scope>
          <scope />
        </scope>
        <scope>
          <scope>
            <declaration type="DerivativeStructure" name="p" />
            <scope />
          </scope>
        </scope>
      </scope>
    </scope>
  </method>
  <method type="void" name="testExpression">
    <declaration type="double" name="epsilon" />
    <scope>
      <declaration type="DerivativeStructure" name="dsX" />
      <scope>
        <declaration type="DerivativeStructure" name="dsY" />
        <scope>
          <declaration type="DerivativeStructure" name="dsZ" />
          <declaration type="DerivativeStructure" name="ds" />
          <declaration type="DerivativeStructure" name="dsOther" />
          <declaration type="double" name="f" />
          <declaration type="double" name="dfdx" />
          <declaration type="double" name="dfdxdy" />
          <declaration type="double" name="dfdxdydz" />
        </scope>
      </scope>
    </scope>
    <comment>f(x, y, z) = x + 5 x y - 2 z + (8 z x - y)^3</comment>
    <comment>df/dx = 1 + 5 y + 24 (8 z x - y)^2 z</comment>
    <comment>df/dxdy = 5 + 48 z*(y - 8 z x)</comment>
    <comment>df/dxdydz = 48 (y - 16 z x)</comment>
  </method>
  <method type="void" name="testCompositionOneVariableX">
    <declaration type="double" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <scope>
          <declaration type="DerivativeStructure" name="dsY" />
          <declaration type="DerivativeStructure" name="f" />
          <declaration type="double" name="f0" />
          <scope>
            <declaration type="double" name="f1" />
            <scope>
              <declaration type="double" name="f2" />
              <scope>
                <declaration type="double" name="f3" />
              </scope>
            </scope>
          </scope>
        </scope>
      </scope>
    </scope>
  </method>
  <method type="void" name="testTrigo">
    <declaration type="double" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <scope>
          <declaration type="DerivativeStructure" name="dsY" />
          <scope>
            <declaration type="DerivativeStructure" name="dsZ" />
            <declaration type="DerivativeStructure" name="f" />
            <declaration type="double" name="a" />
            <declaration type="double" name="f0" />
            <scope>
              <declaration type="double" name="dfdx" />
              <declaration type="double" name="dfdy" />
              <declaration type="double" name="cz" />
              <declaration type="double" name="cz2" />
              <declaration type="double" name="dfdz" />
              <scope>
                <declaration type="double" name="df2dx2" />
                <declaration type="double" name="df2dy2" />
                <declaration type="double" name="c4" />
                <declaration type="double" name="df2dz2" />
                <declaration type="double" name="df2dxdy" />
              </scope>
            </scope>
          </scope>
        </scope>
      </scope>
    </scope>
  </method>
  <method type="void" name="testSqrtDefinition">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="sqrt1" />
        <declaration type="DerivativeStructure" name="sqrt2" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testRootNSingularity">
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsZero" />
        <declaration type="DerivativeStructure" name="rootN" />
        <scope>
          <scope />
        </scope>
        <declaration type="double[]" name="gDerivatives" />
        <scope />
        <declaration type="DerivativeStructure" name="correctRoot" />
        <scope>
          <scope>
            <scope />
            <scope />
          </scope>
        </scope>
      </scope>
    </scope>
    <comment>the following checks shows a LIMITATION of the current implementation</comment>
    <comment>we have no way to tell dsZero is a pure linear variable x = 0</comment>
    <comment>we only say: "dsZero is a structure with value = 0.0,</comment>
    <comment>first derivative = 1.0, second and higher derivatives = 0.0".</comment>
    <comment>Function composition rule for second derivatives is:</comment>
    <comment>d2[f(g(x))]/dx2 = f''(g(x)) * [g'(x)]^2 + f'(g(x)) * g''(x)</comment>
    <comment>when function f is the nth root and x = 0 we have:</comment>
    <comment>f(0) = 0, f'(0) = +infinity, f''(0) = -infinity (and higher</comment>
    <comment>derivatives keep switching between +infinity and -infinity)</comment>
    <comment>so given that in our case dsZero represents g, we have g(x) = 0,</comment>
    <comment>g'(x) = 1 and g''(x) = 0</comment>
    <comment>applying the composition rules gives:</comment>
    <comment>d2[f(g(x))]/dx2 = f''(g(x)) * [g'(x)]^2 + f'(g(x)) * g''(x)</comment>
    <comment>= -infinity * 1^2 + +infinity * 0</comment>
    <comment>= -infinity + NaN</comment>
    <comment>= NaN</comment>
    <comment>if we knew dsZero is really the x variable and not the identity</comment>
    <comment>function applied to x, we would not have computed f'(g(x)) * g''(x)</comment>
    <comment>and we would have found that the result was -infinity and not NaN</comment>
    <comment>the following shows that the limitation explained above is NOT a bug...</comment>
    <comment>if we set up the higher order derivatives for g appropriately, we do</comment>
    <comment>compute the higher order derivatives of the composition correctly</comment>
  </method>
  <method type="void" name="testSqrtPow2">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="rebuiltX" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testCbrtDefinition">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="cbrt1" />
        <declaration type="DerivativeStructure" name="cbrt2" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testCbrtPow3">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="rebuiltX" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testPowReciprocalPow">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <scope>
          <declaration type="DerivativeStructure" name="dsY" />
          <declaration type="DerivativeStructure" name="rebuiltX" />
          <declaration type="DerivativeStructure" name="zero" />
          <scope>
            <scope>
              <scope />
            </scope>
          </scope>
        </scope>
      </scope>
    </scope>
  </method>
  <method type="void" name="testHypotDefinition">
    <declaration type="double" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <scope>
          <declaration type="DerivativeStructure" name="dsY" />
          <declaration type="DerivativeStructure" name="hypot" />
          <declaration type="DerivativeStructure" name="ref" />
          <declaration type="DerivativeStructure" name="zero" />
          <scope>
            <scope>
              <scope />
            </scope>
          </scope>
        </scope>
      </scope>
    </scope>
  </method>
  <method type="void" name="testHypotNoOverflow">
    <declaration type="DerivativeStructure" name="dsX" />
    <declaration type="DerivativeStructure" name="dsY" />
    <declaration type="DerivativeStructure" name="hypot" />
    <declaration type="DerivativeStructure" name="sqrt" />
  </method>
  <method type="void" name="testHypotNeglectible">
    <declaration type="DerivativeStructure" name="dsSmall" />
    <declaration type="DerivativeStructure" name="dsLarge" />
  </method>
  <method type="void" name="testHypotSpecial" />
  <method type="void" name="testPrimitiveRemainder">
    <declaration type="double" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <scope>
          <declaration type="DerivativeStructure" name="remainder" />
          <declaration type="DerivativeStructure" name="ref" />
          <declaration type="DerivativeStructure" name="zero" />
          <scope>
            <scope>
              <scope />
            </scope>
          </scope>
        </scope>
      </scope>
    </scope>
  </method>
  <method type="void" name="testRemainder">
    <declaration type="double" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <scope>
          <declaration type="DerivativeStructure" name="dsY" />
          <declaration type="DerivativeStructure" name="remainder" />
          <declaration type="DerivativeStructure" name="ref" />
          <declaration type="DerivativeStructure" name="zero" />
          <scope>
            <scope>
              <scope />
            </scope>
          </scope>
        </scope>
      </scope>
    </scope>
  </method>
  <method type="void" name="testExp">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="double" name="refExp" />
        <declaration type="DerivativeStructure" name="exp" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testExpm1Definition">
    <declaration type="double" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="expm11" />
        <declaration type="DerivativeStructure" name="expm12" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testLog">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="log" />
        <scope>
          <declaration type="double" name="refDer" />
        </scope>
      </scope>
    </scope>
  </method>
  <method type="void" name="testLog1pDefinition">
    <declaration type="double" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="log1p1" />
        <declaration type="DerivativeStructure" name="log1p2" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testLog10Definition">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="log101" />
        <declaration type="DerivativeStructure" name="log102" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testLogExp">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="rebuiltX" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testLog1pExpm1">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="rebuiltX" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testLog10Power">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="rebuiltX" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testSinCos">
    <declaration type="double" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="sin" />
        <declaration type="DerivativeStructure" name="cos" />
        <declaration type="double" name="s" />
        <declaration type="double" name="c" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testSinAsin">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="rebuiltX" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testCosAcos">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="rebuiltX" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testTanAtan">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="rebuiltX" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testTangentDefinition">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="tan1" />
        <declaration type="DerivativeStructure" name="tan2" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testAtan2">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <scope>
          <declaration type="DerivativeStructure" name="dsY" />
          <declaration type="DerivativeStructure" name="atan2" />
          <declaration type="DerivativeStructure" name="ref" />
          <scope />
          <declaration type="DerivativeStructure" name="zero" />
          <scope>
            <scope>
              <scope />
            </scope>
          </scope>
        </scope>
      </scope>
    </scope>
  </method>
  <method type="void" name="testAtan2SpecialCases">
    <declaration type="DerivativeStructure" name="pp" />
    <declaration type="DerivativeStructure" name="pn" />
    <declaration type="DerivativeStructure" name="np" />
    <declaration type="DerivativeStructure" name="nn" />
  </method>
  <method type="void" name="testSinhDefinition">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="sinh1" />
        <declaration type="DerivativeStructure" name="sinh2" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testCoshDefinition">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="cosh1" />
        <declaration type="DerivativeStructure" name="cosh2" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testTanhDefinition">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="tanh1" />
        <declaration type="DerivativeStructure" name="tanh2" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testSinhAsinh">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="rebuiltX" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testCoshAcosh">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="rebuiltX" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testTanhAtanh">
    <declaration type="double[][]" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="rebuiltX" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testCompositionOneVariableY">
    <declaration type="double" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <scope>
          <declaration type="DerivativeStructure" name="dsY" />
          <declaration type="DerivativeStructure" name="f" />
          <declaration type="double" name="f0" />
          <scope>
            <declaration type="double" name="f1" />
            <scope>
              <declaration type="double" name="f2" />
              <scope>
                <declaration type="double" name="f3" />
              </scope>
            </scope>
          </scope>
        </scope>
      </scope>
    </scope>
  </method>
  <method type="void" name="testTaylorPolynomial">
    <scope>
      <declaration type="DerivativeStructure" name="dsX" />
      <scope>
        <declaration type="DerivativeStructure" name="dsY" />
        <scope>
          <declaration type="DerivativeStructure" name="dsZ" />
          <declaration type="DerivativeStructure" name="f" />
          <scope>
            <scope>
              <scope>
                <declaration type="double" name="ref" />
              </scope>
            </scope>
          </scope>
        </scope>
      </scope>
    </scope>
  </method>
  <method type="void" name="testTaylorAtan2">
    <declaration type="double[][]" name="expected" />
    <declaration type="double" name="x0" />
    <declaration type="double" name="y0" />
    <scope>
      <declaration type="DerivativeStructure" name="dsX" />
      <declaration type="DerivativeStructure" name="dsY" />
      <declaration type="DerivativeStructure" name="atan2" />
      <declaration type="double" name="maxError" />
      <scope>
        <scope>
          <declaration type="double" name="ref" />
        </scope>
      </scope>
    </scope>
  </method>
  <method type="void" name="testAbs">
    <declaration type="DerivativeStructure" name="minusOne" />
    <declaration type="DerivativeStructure" name="plusOne" />
    <declaration type="DerivativeStructure" name="minusZero" />
    <declaration type="DerivativeStructure" name="plusZero" />
  </method>
  <method type="void" name="testSignum">
    <declaration type="DerivativeStructure" name="minusOne" />
    <declaration type="DerivativeStructure" name="plusOne" />
    <declaration type="DerivativeStructure" name="minusZero" />
    <declaration type="DerivativeStructure" name="plusZero" />
  </method>
  <method type="void" name="testCeilFloorRintLong">
    <declaration type="DerivativeStructure" name="x" />
  </method>
  <method type="void" name="testCopySign">
    <declaration type="DerivativeStructure" name="minusOne" />
    <declaration type="DerivativeStructure" name="plusOne" />
  </method>
  <method type="void" name="testToDegreesDefinition">
    <declaration type="double" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <scope>
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
  </method>
  <method type="void" name="testToRadiansDefinition">
    <declaration type="double" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <scope>
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
  </method>
  <method type="void" name="testDegRad">
    <declaration type="double" name="epsilon" />
    <scope>
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="rebuiltX" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testComposeMismatchedDimensions" />
  <method type="void" name="testCompose">
    <declaration type="double[][]" name="epsilon" />
    <declaration type="PolynomialFunction[]" name="poly" />
    <scope>
      <declaration type="PolynomialFunction[]" name="p" />
      <scope />
      <scope>
        <declaration type="DerivativeStructure" name="dsX" />
        <declaration type="DerivativeStructure" name="dsY1" />
        <scope />
        <declaration type="double[]" name="f" />
        <scope />
        <declaration type="DerivativeStructure" name="dsY2" />
        <declaration type="DerivativeStructure" name="zero" />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testField">
    <scope>
      <declaration type="DerivativeStructure" name="x" />
    </scope>
  </method>
  <method type="void" name="testOneParameterConstructor">
    <declaration type="double" name="x" />
    <declaration type="double" name="cos" />
    <declaration type="double" name="sin" />
    <declaration type="DerivativeStructure" name="yRef" />
    <scope />
    <scope />
    <scope />
    <declaration type="double[][]" name="derivatives" />
    <declaration type="DerivativeStructure" name="y" />
    <comment>expected</comment>
  </method>
  <method type="void" name="testOneOrderConstructor">
    <declaration type="double" name="x" />
    <declaration type="double" name="y" />
    <declaration type="double" name="z" />
    <declaration type="DerivativeStructure" name="xRef" />
    <declaration type="DerivativeStructure" name="yRef" />
    <declaration type="DerivativeStructure" name="zRef" />
    <scope />
    <scope />
    <scope />
    <declaration type="double[][]" name="derivatives" />
    <declaration type="DerivativeStructure" name="t" />
    <comment>expected</comment>
  </method>
  <method type="void" name="testLinearCombination1DSDS">
    <declaration type="DerivativeStructure[][]" name="a" />
    <declaration type="DerivativeStructure[][]" name="b" />
    <declaration type="DerivativeStructure" name="abSumInline" />
    <declaration type="DerivativeStructure" name="abSumArray" />
  </method>
  <method type="void" name="testLinearCombination1DoubleDS">
    <declaration type="double[][]" name="a" />
    <declaration type="DerivativeStructure[][]" name="b" />
    <declaration type="DerivativeStructure" name="abSumInline" />
    <declaration type="DerivativeStructure" name="abSumArray" />
  </method>
  <method type="void" name="testLinearCombination2DSDS">
    <declaration type="Well1024a" name="random" />
    <scope>
      <declaration type="DerivativeStructure[]" name="u" />
      <declaration type="DerivativeStructure[]" name="v" />
      <scope />
      <declaration type="DerivativeStructure" name="lin" />
      <declaration type="double" name="ref" />
    </scope>
    <comment>we compare accurate versus naive dot product implementations</comment>
    <comment>on regular vectors (i.e. not extreme cases like in the previous test)</comment>
  </method>
  <method type="void" name="testLinearCombination2DoubleDS">
    <declaration type="Well1024a" name="random" />
    <scope>
      <declaration type="double[]" name="u" />
      <declaration type="DerivativeStructure[]" name="v" />
      <scope />
      <declaration type="DerivativeStructure" name="lin" />
      <declaration type="double" name="ref" />
    </scope>
    <comment>we compare accurate versus naive dot product implementations</comment>
    <comment>on regular vectors (i.e. not extreme cases like in the previous test)</comment>
  </method>
  <method type="void" name="testSerialization">
    <declaration type="DerivativeStructure" name="a" />
    <declaration type="DerivativeStructure" name="b" />
  </method>
  <method type="void" name="checkF0F1">
    <scope>
      <declaration type="int[]" name="orders" />
    </scope>
    <comment>check dimension</comment>
    <comment>check value, directly and also as 0th order derivative</comment>
    <comment>check first order derivatives</comment>
  </method>
  <method type="void" name="checkEquals">
    <declaration type="int[]" name="derivatives" />
    <declaration type="int" name="sum" />
    <scope>
      <scope />
      <declaration type="boolean" name="increment" />
      <scope>
        <scope>
          <scope />
          <scope />
        </scope>
      </scope>
      <scope />
    </scope>
    <comment>check dimension</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
