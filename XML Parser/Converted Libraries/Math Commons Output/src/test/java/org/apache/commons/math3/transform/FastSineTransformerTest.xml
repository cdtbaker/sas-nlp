<?xml version="1.0" encoding="UTF-8"?>
<class name="FastSineTransformerTest">
  <javadoc>
    <text>Test case for fast sine transformer.
 * &lt;p&gt;
 * FST algorithm is exact, the small tolerance number is used only
 * to account for round-off errors.</text>
    <version>$Id: FastSineTransformerTest.java 1374632 2012-08-18 18:11:11Z luc $</version>
  </javadoc>
  <declaration type="DstNormalization" name="normalization" />
  <declaration type="int[]" name="invalidDataSize" />
  <declaration type="double[]" name="relativeTolerance" />
  <declaration type="int[]" name="validDataSize" />
  <method type="constructor" name="FastSineTransformerTest" />
  <javadoc>
    <text>Returns an array containing {@code true, false} in order to check both
 * standard and orthogonal DSTs.</text>
    <return>an array of parameters for this parameterized test</return>
  </javadoc>
  <method type="Collection&lt;Object[]&gt;" name="data">
    <declaration type="DstNormalization[]" name="normalization" />
    <declaration type="Object[][]" name="data" />
    <scope />
  </method>
  <javadoc>
    <text>{@inheritDoc}Overriding the default implementation allows to ensure that the first
 * element of the data set is zero.</text>
  </javadoc>
  <method type="double[]" name="createRealData">
    <declaration type="double[]" name="data" />
  </method>
  <method type="RealTransformer" name="createRealTransformer" />
  <method type="int" name="getInvalidDataSize" />
  <method type="int" name="getNumberOfInvalidDataSizes" />
  <method type="int" name="getNumberOfValidDataSizes" />
  <method type="double" name="getRelativeTolerance" />
  <method type="int" name="getValidDataSize" />
  <method type="UnivariateFunction" name="getValidFunction" />
  <method type="double" name="getValidLowerBound" />
  <method type="double" name="getValidUpperBound" />
  <method type="double[]" name="transform">
    <declaration type="int" name="n" />
    <declaration type="double[]" name="y" />
    <declaration type="double[]" name="sin" />
    <scope />
    <scope>
      <declaration type="double" name="yj" />
      <scope />
    </scope>
    <declaration type="double" name="s" />
    <scope>
      <scope />
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
      <scope />
    </scope>
    <scope />
    <comment>Should never occur. This clause is a safeguard in case other
 types are used to TransformType (which should not be done).</comment>
  </method>
  <method type="void" name="testTransformRealFirstElementNotZero">
    <declaration type="TransformType[]" name="type" />
    <declaration type="double[][]" name="data" />
    <declaration type="RealTransformer" name="transformer" />
    <scope>
      <scope />
      <scope />
    </scope>
    <comment>Expected: do nothing</comment>
  </method>
  <javadoc>
    <text>Test of transformer for the ad hoc data.</text>
  </javadoc>
  <method type="void" name="testAdHocData">
    <declaration type="FastSineTransformer" name="transformer" />
    <declaration type="double[]" name="result" />
    <declaration type="double[]" name="x" />
    <declaration type="double[]" name="y" />
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Test of transformer for the sine function.</text>
  </javadoc>
  <method type="void" name="testSinFunction">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="FastSineTransformer" name="transformer" />
    <declaration type="double" name="min" />
    <declaration type="int" name="N" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Test of parameters for the transformer.</text>
  </javadoc>
  <method type="void" name="testParameters">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="FastSineTransformer" name="transformer" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>bad interval</comment>
    <comment>expected</comment>
    <comment>bad samples number</comment>
    <comment>expected</comment>
    <comment>bad samples number</comment>
    <comment>expected</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>Additional tests.</comment>
  <comment>Additional (legacy) tests.</comment>
</class>
