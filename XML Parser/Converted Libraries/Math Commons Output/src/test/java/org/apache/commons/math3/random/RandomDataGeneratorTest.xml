<?xml version="1.0" encoding="UTF-8"?>
<class name="RandomDataGeneratorTest">
  <javadoc>
    <text>Test cases for the RandomDataGenerator class.</text>
    <version>$Id: RandomDataGeneratorTest.java 1457491 2013-03-17 17:15:31Z psteitz $</version>
  </javadoc>
  <method type="constructor" name="RandomDataGeneratorTest" />
  <declaration type="long" name="smallSampleSize" />
  <declaration type="double[]" name="expected" />
  <declaration type="int" name="largeSampleSize" />
  <declaration type="String[]" name="hex" />
  <declaration type="RandomDataGenerator" name="randomData" />
  <declaration type="ChiSquareTest" name="testStatistic" />
  <method type="void" name="testNextIntExtremeValues">
    <declaration type="int" name="x" />
    <declaration type="int" name="y" />
  </method>
  <method type="void" name="testNextLongExtremeValues">
    <declaration type="long" name="x" />
    <declaration type="long" name="y" />
  </method>
  <method type="void" name="testNextUniformExtremeValues">
    <declaration type="double" name="x" />
    <declaration type="double" name="y" />
  </method>
  <method type="void" name="testNextIntIAE">
    <scope />
    <scope />
    <comment>ignored</comment>
  </method>
  <method type="void" name="testNextIntNegativeToPositiveRange">
    <scope />
  </method>
  <method type="void" name="testNextIntNegativeRange">
    <scope />
  </method>
  <method type="void" name="testNextIntPositiveRange">
    <scope />
  </method>
  <method type="void" name="checkNextIntUniform">
    <declaration type="Frequency" name="freq" />
    <scope>
      <declaration type="int" name="value" />
    </scope>
    <declaration type="int" name="len" />
    <declaration type="long[]" name="observed" />
    <scope />
    <declaration type="double[]" name="expected" />
    <scope />
  </method>
  <method type="void" name="testNextIntWideRange">
    <declaration type="int" name="lower" />
    <declaration type="int" name="upper" />
    <declaration type="int" name="max" />
    <declaration type="int" name="min" />
    <scope>
      <declaration type="int" name="r" />
    </scope>
    <declaration type="double" name="ratio" />
  </method>
  <method type="void" name="testNextLongIAE">
    <scope />
    <scope />
    <comment>ignored</comment>
  </method>
  <method type="void" name="testNextLongNegativeToPositiveRange">
    <scope />
  </method>
  <method type="void" name="testNextLongNegativeRange">
    <scope />
  </method>
  <method type="void" name="testNextLongPositiveRange">
    <scope />
  </method>
  <method type="void" name="checkNextLongUniform">
    <declaration type="Frequency" name="freq" />
    <scope>
      <declaration type="long" name="value" />
    </scope>
    <declaration type="int" name="len" />
    <declaration type="long[]" name="observed" />
    <scope />
    <declaration type="double[]" name="expected" />
    <scope />
  </method>
  <method type="void" name="testNextLongWideRange">
    <declaration type="long" name="lower" />
    <declaration type="long" name="upper" />
    <declaration type="long" name="max" />
    <declaration type="long" name="min" />
    <scope>
      <declaration type="long" name="r" />
    </scope>
    <declaration type="double" name="ratio" />
  </method>
  <method type="void" name="testNextSecureLongIAE">
    <scope />
    <scope />
    <comment>ignored</comment>
  </method>
  <method type="void" name="testNextSecureLongNegativeToPositiveRange">
    <scope />
  </method>
  <method type="void" name="testNextSecureLongNegativeRange">
    <scope />
  </method>
  <method type="void" name="testNextSecureLongPositiveRange">
    <scope />
  </method>
  <method type="void" name="checkNextSecureLongUniform">
    <declaration type="Frequency" name="freq" />
    <scope>
      <declaration type="long" name="value" />
    </scope>
    <declaration type="int" name="len" />
    <declaration type="long[]" name="observed" />
    <scope />
    <declaration type="double[]" name="expected" />
    <scope />
  </method>
  <method type="void" name="testNextSecureIntIAE">
    <scope />
    <scope />
    <comment>ignored</comment>
  </method>
  <method type="void" name="testNextSecureIntNegativeToPositiveRange">
    <scope />
  </method>
  <method type="void" name="testNextSecureIntNegativeRange">
    <scope />
  </method>
  <method type="void" name="testNextSecureIntPositiveRange">
    <scope />
  </method>
  <method type="void" name="checkNextSecureIntUniform">
    <declaration type="Frequency" name="freq" />
    <scope>
      <declaration type="int" name="value" />
    </scope>
    <declaration type="int" name="len" />
    <declaration type="long[]" name="observed" />
    <scope />
    <declaration type="double[]" name="expected" />
    <scope />
  </method>
  <javadoc>
    <text>Make sure that empirical distribution of random Poisson(4)'s has P(X &lt;=
 * 5) close to actual cumulative Poisson probability and that nextPoisson
 * fails when mean is non-positive.</text>
  </javadoc>
  <method type="void" name="testNextPoisson">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <declaration type="double" name="mean" />
    <declaration type="int" name="len" />
    <declaration type="PoissonDistribution" name="poissonDistribution" />
    <declaration type="Frequency" name="f" />
    <scope />
    <declaration type="long[]" name="observed" />
    <scope />
    <declaration type="double[]" name="expected" />
    <scope />
    <comment>ignored</comment>
    <comment>ignored</comment>
    <comment>ignored</comment>
  </method>
  <method type="void" name="testNextPoissonConsistency">
    <scope />
    <scope />
    <scope />
    <comment>Small integral means</comment>
    <comment>non-integer means</comment>
    <comment>large means</comment>
    <comment>TODO: When MATH-282 is resolved, s/3000/10000 below</comment>
  </method>
  <javadoc>
    <text>Verifies that nextPoisson(mean) generates an empirical distribution of values
 * consistent with PoissonDistributionImpl by generating 1000 values, computing a
 * grouped frequency distribution of the observed values and comparing this distribution
 * to the corresponding expected distribution computed using PoissonDistributionImpl.
 * Uses ChiSquare test of goodness of fit to evaluate the null hypothesis that the
 * distributions are the same. If the null hypothesis can be rejected with confidence
 * 1 - alpha, the check fails.</text>
  </javadoc>
  <method type="void" name="checkNextPoissonConsistency">
    <declaration type="int" name="sampleSize" />
    <declaration type="int" name="minExpectedCount" />
    <declaration type="long" name="maxObservedValue" />
    <declaration type="double" name="alpha" />
    <declaration type="Frequency" name="frequency" />
    <scope>
      <declaration type="long" name="value" />
      <scope />
    </scope>
    <declaration type="PoissonDistribution" name="poissonDistribution" />
    <declaration type="int" name="lower" />
    <scope />
    <declaration type="int" name="upper" />
    <scope />
    <declaration type="int" name="binWidth" />
    <declaration type="boolean" name="widthSufficient" />
    <declaration type="double" name="lowerBinMass" />
    <declaration type="double" name="upperBinMass" />
    <scope />
    <declaration type="List&lt;Integer&gt;" name="binBounds" />
    <declaration type="int" name="bound" />
    <scope />
    <declaration type="int" name="binCount" />
    <declaration type="long[]" name="observed" />
    <declaration type="double[]" name="expected" />
    <scope />
    <scope />
    <scope>
      <scope />
    </scope>
    <declaration type="ChiSquareTest" name="chiSquareTest" />
    <scope>
      <declaration type="StringBuilder" name="msgBuffer" />
      <declaration type="DecimalFormat" name="df" />
      <scope />
    </scope>
    <comment>Generate sample values</comment>
    <comment>Number of deviates to generate</comment>
    <comment>Minimum size of expected bin count</comment>
    <comment>Probability of false failure</comment>
    <comment>Set up bins for chi-square test.
  Ensure expected counts are all at least minExpectedCount.
  Start with upper and lower tail bins.
  Lower bin = [0, lower); Upper bin = [upper, +inf).</comment>
    <comment>Even for mean = 1, not much mass beyond 5</comment>
    <comment>Set bin width for interior bins.  For poisson, only need to look at end bins.</comment>
    <comment>Determine interior bin bounds.  Bins are
  [1, lower = binBounds[0]), [lower, binBounds[1]), [binBounds[1], binBounds[2]), ... ,
    [binBounds[binCount - 2], upper = binBounds[binCount - 1]), [upper, +inf)</comment>
    <comment>The size of bin [binBounds[binCount - 2], upper) satisfies binWidth &lt;= size &lt; 2*binWidth.</comment>
    <comment>Compute observed and expected bin counts</comment>
    <comment>Bottom bin</comment>
    <comment>Top bin</comment>
    <comment>Interior bins</comment>
    <comment>Expected count is (mass in [binBounds[i-1], binBounds[i])) * sampleSize</comment>
    <comment>Use chisquare test to verify that generated values are poisson(mean)-distributed</comment>
    <comment>Fail if we can reject null hypothesis that distributions are the same</comment>
  </method>
  <javadoc>
    <text>test dispersion and failure modes for nextHex()</text>
  </javadoc>
  <method type="void" name="testNextHex">
    <scope />
    <scope />
    <scope />
    <scope />
    <declaration type="String" name="hexString" />
    <scope />
    <scope />
    <scope />
    <scope />
    <declaration type="Frequency" name="f" />
    <scope>
      <scope />
      <scope />
    </scope>
    <declaration type="double[]" name="expected" />
    <declaration type="long[]" name="observed" />
    <scope />
    <comment>ignored</comment>
    <comment>ignored</comment>
    <comment>ignored</comment>
  </method>
  <javadoc>
    <text>test dispersion and failure modes for nextHex()</text>
  </javadoc>
  <method type="void" name="testNextSecureHex">
    <scope />
    <scope />
    <scope />
    <scope />
    <declaration type="String" name="hexString" />
    <scope />
    <scope />
    <scope />
    <scope />
    <declaration type="Frequency" name="f" />
    <scope>
      <scope />
      <scope />
    </scope>
    <declaration type="double[]" name="expected" />
    <declaration type="long[]" name="observed" />
    <scope />
    <comment>ignored</comment>
    <comment>ignored</comment>
    <comment>ignored</comment>
  </method>
  <method type="void" name="testNextUniformIAE">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>ignored</comment>
    <comment>ignored</comment>
    <comment>ignored</comment>
    <comment>ignored</comment>
    <comment>ignored</comment>
  </method>
  <method type="void" name="testNextUniformUniformPositiveBounds">
    <scope />
  </method>
  <method type="void" name="testNextUniformUniformNegativeToPositiveBounds">
    <scope />
  </method>
  <method type="void" name="testNextUniformUniformNegaiveBounds">
    <scope />
  </method>
  <method type="void" name="testNextUniformUniformMaximalInterval">
    <scope />
  </method>
  <method type="void" name="checkNextUniformUniform">
    <declaration type="int" name="binCount" />
    <declaration type="double" name="binSize" />
    <declaration type="double[]" name="binBounds" />
    <scope />
    <declaration type="Frequency" name="freq" />
    <scope>
      <declaration type="double" name="value" />
      <declaration type="int" name="j" />
      <scope />
    </scope>
    <declaration type="long[]" name="observed" />
    <scope />
    <declaration type="double[]" name="expected" />
    <scope />
    <comment>Set up bin bounds - min, binBound[0], ..., binBound[binCount-2], max</comment>
    <comment>Prevent overflow in extreme value case</comment>
    <comment>+ instead of * to avoid overflow in extreme case</comment>
    <comment>Find bin</comment>
  </method>
  <javadoc>
    <text>test exclusive endpoints of nextUniform</text>
  </javadoc>
  <method type="void" name="testNextUniformExclusiveEndpoints">
    <scope>
      <declaration type="double" name="u" />
    </scope>
  </method>
  <javadoc>
    <text>test failure modes and distribution of nextGaussian()</text>
  </javadoc>
  <method type="void" name="testNextGaussian">
    <scope />
    <scope />
    <declaration type="double[]" name="quartiles" />
    <declaration type="long[]" name="counts" />
    <scope>
      <declaration type="double" name="value" />
    </scope>
    <comment>ignored</comment>
  </method>
  <javadoc>
    <text>test failure modes and distribution of nextExponential()</text>
  </javadoc>
  <method type="void" name="testNextExponential">
    <scope />
    <scope />
    <scope />
    <scope />
    <declaration type="double[]" name="quartiles" />
    <declaration type="long[]" name="counts" />
    <scope>
      <declaration type="double" name="value" />
    </scope>
    <scope>
      <declaration type="double" name="value" />
    </scope>
    <comment>ignored</comment>
    <comment>ignored</comment>
    <comment>Mean 1</comment>
    <comment>Mean 5</comment>
  </method>
  <javadoc>
    <text>test reseeding, algorithm/provider games</text>
  </javadoc>
  <method type="void" name="testConfig">
    <declaration type="double" name="v" />
    <declaration type="String" name="hex" />
    <declaration type="RandomDataGenerator" name="rd" />
    <declaration type="RandomDataGenerator" name="rd2" />
    <comment>remove this test back soon, since it takes about 4 seconds

 try { randomData.setSecureAlgorithm("SHA1PRNG","SUN"); } catch
 (NoSuchProviderException ex) { ; } Assert.assertTrue("different seeds",
 !hex.equals(randomData.nextSecureHexString(40))); try {
 randomData.setSecureAlgorithm("NOSUCHTHING","SUN");
 Assert.fail("expecting NoSuchAlgorithmException"); } catch
 (NoSuchProviderException ex) { ; } catch (NoSuchAlgorithmException
 ex) { ; }

 try { randomData.setSecureAlgorithm("SHA1PRNG","NOSUCHPROVIDER");
 Assert.fail("expecting NoSuchProviderException"); } catch
 (NoSuchProviderException ex) { ; }</comment>
    <comment>test reseeding without first using the generators</comment>
  </method>
  <javadoc>
    <text>tests for nextSample() sampling from Collection</text>
  </javadoc>
  <method type="void" name="testNextSample">
    <declaration type="Object[][]" name="c" />
    <declaration type="long[]" name="observed" />
    <declaration type="double[]" name="expected" />
    <declaration type="HashSet&lt;Object&gt;" name="cPop" />
    <scope />
    <declaration type="Object[]" name="sets" />
    <scope>
      <declaration type="HashSet&lt;Object&gt;" name="hs" />
    </scope>
    <scope>
      <declaration type="Object[]" name="cSamp" />
    </scope>
    <declaration type="HashSet&lt;Object&gt;" name="hs" />
    <declaration type="Object[]" name="one" />
    <declaration type="String" name="oneString" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>{0,1,2,3,4}</comment>
    <comment>2-sets from 5</comment>
    <comment>Use ChiSquare dist with df = 10-1 = 9, alpha = .001 Change to 21.67
 for alpha = .01</comment>
    <comment>Make sure sample of size = size of collection returns same collection</comment>
    <comment>Make sure we fail for sample size &gt; collection size</comment>
    <comment>ignored</comment>
    <comment>Make sure we fail for empty collection</comment>
    <comment>ignored</comment>
  </method>
  <method type="int" name="findSample">
    <scope>
      <declaration type="HashSet&lt;Object&gt;" name="set" />
      <declaration type="HashSet&lt;Object&gt;" name="sampSet" />
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>tests for nextPermutation</text>
  </javadoc>
  <method type="void" name="testNextPermutation">
    <declaration type="int[][]" name="p" />
    <declaration type="long[]" name="observed" />
    <declaration type="double[]" name="expected" />
    <scope>
      <declaration type="int[]" name="perm" />
    </scope>
    <declaration type="String[]" name="labels" />
    <declaration type="int[]" name="perm" />
    <scope>
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
    </scope>
    <comment>Check size = 1 boundary case</comment>
    <comment>Make sure we fail for k size &gt; n</comment>
    <comment>ignored</comment>
    <comment>Make sure we fail for n = 0</comment>
    <comment>ignored</comment>
    <comment>Make sure we fail for k &lt; n &lt; 0</comment>
    <comment>ignored</comment>
  </method>
  <method type="int" name="findPerm">
    <scope>
      <declaration type="boolean" name="good" />
      <scope>
        <scope />
      </scope>
      <scope />
    </scope>
  </method>
  <method type="void" name="testNextInversionDeviate">
    <declaration type="RandomGenerator" name="rg" />
    <declaration type="RandomDataGenerator" name="rdg" />
    <declaration type="double[]" name="quantiles" />
    <scope />
    <declaration type="BetaDistribution" name="betaDistribution" />
    <scope>
      <declaration type="double" name="value" />
    </scope>
    <comment>Set the seed for the default random generator</comment>
    <comment>Reseed again so the inversion generator gets the same sequence</comment>
    <comment>Generate a sequence of deviates using inversion - the distribution function
  evaluated at the random value from the distribution should match the uniform
  random value used to generate it, which is stored in the quantiles[] array.</comment>
  </method>
  <method type="void" name="testNextBeta">
    <declaration type="double[]" name="quartiles" />
    <declaration type="long[]" name="counts" />
    <scope>
      <declaration type="double" name="value" />
    </scope>
  </method>
  <method type="void" name="testNextCauchy">
    <declaration type="double[]" name="quartiles" />
    <declaration type="long[]" name="counts" />
    <scope>
      <declaration type="double" name="value" />
    </scope>
  </method>
  <method type="void" name="testNextChiSquare">
    <declaration type="double[]" name="quartiles" />
    <declaration type="long[]" name="counts" />
    <scope>
      <declaration type="double" name="value" />
    </scope>
  </method>
  <method type="void" name="testNextF">
    <declaration type="double[]" name="quartiles" />
    <declaration type="long[]" name="counts" />
    <scope>
      <declaration type="double" name="value" />
    </scope>
  </method>
  <method type="void" name="testNextGamma">
    <declaration type="double[]" name="quartiles" />
    <declaration type="long[]" name="counts" />
    <scope>
      <declaration type="double" name="value" />
    </scope>
    <scope>
      <declaration type="double" name="value" />
    </scope>
    <comment>Tests shape &gt; 1, one case in the rejection sampling</comment>
    <comment>Tests shape &lt;= 1, another case in the rejection sampling</comment>
  </method>
  <method type="void" name="testNextT">
    <declaration type="double[]" name="quartiles" />
    <declaration type="long[]" name="counts" />
    <scope>
      <declaration type="double" name="value" />
    </scope>
  </method>
  <method type="void" name="testNextWeibull">
    <declaration type="double[]" name="quartiles" />
    <declaration type="long[]" name="counts" />
    <scope>
      <declaration type="double" name="value" />
    </scope>
  </method>
  <method type="void" name="testNextBinomial">
    <declaration type="BinomialDistributionTest" name="testInstance" />
    <declaration type="int[]" name="densityPoints" />
    <declaration type="double[]" name="densityValues" />
    <declaration type="int" name="sampleSize" />
    <declaration type="int" name="length" />
    <declaration type="BinomialDistribution" name="distribution" />
    <declaration type="double[]" name="expectedCounts" />
    <declaration type="long[]" name="observedCounts" />
    <scope />
    <scope>
      <declaration type="int" name="value" />
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testNextHypergeometric">
    <declaration type="HypergeometricDistributionTest" name="testInstance" />
    <declaration type="int[]" name="densityPoints" />
    <declaration type="double[]" name="densityValues" />
    <declaration type="int" name="sampleSize" />
    <declaration type="int" name="length" />
    <declaration type="HypergeometricDistribution" name="distribution" />
    <declaration type="double[]" name="expectedCounts" />
    <declaration type="long[]" name="observedCounts" />
    <scope />
    <scope>
      <declaration type="int" name="value" />
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testNextPascal">
    <declaration type="PascalDistributionTest" name="testInstance" />
    <declaration type="int[]" name="densityPoints" />
    <declaration type="double[]" name="densityValues" />
    <declaration type="int" name="sampleSize" />
    <declaration type="int" name="length" />
    <declaration type="PascalDistribution" name="distribution" />
    <declaration type="double[]" name="expectedCounts" />
    <declaration type="long[]" name="observedCounts" />
    <scope />
    <scope>
      <declaration type="int" name="value" />
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testNextZipf">
    <declaration type="ZipfDistributionTest" name="testInstance" />
    <declaration type="int[]" name="densityPoints" />
    <declaration type="double[]" name="densityValues" />
    <declaration type="int" name="sampleSize" />
    <declaration type="int" name="length" />
    <declaration type="ZipfDistribution" name="distribution" />
    <declaration type="double[]" name="expectedCounts" />
    <declaration type="long[]" name="observedCounts" />
    <scope />
    <scope>
      <declaration type="int" name="value" />
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testReseed">
    <declaration type="PoissonDistribution" name="x" />
    <declaration type="double" name="u" />
    <declaration type="PoissonDistribution" name="y" />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>Disable until we have equals</comment>
  <comment>public void testSerial() {</comment>
  <comment>Assert.assertEquals(randomData, TestUtils.serializeAndRecover(randomData));</comment>
  <comment>}</comment>
  <javadoc>
    <text>MATH-720</text>
  </javadoc>
</class>
