<?xml version="1.0" encoding="UTF-8"?>
<class name="Vector3DTest">
  <method type="void" name="testConstructors">
    <declaration type="double" name="r" />
  </method>
  <method type="void" name="testSpace">
    <declaration type="Space" name="space" />
    <declaration type="Space" name="deserialized" />
  </method>
  <method type="void" name="testZero" />
  <method type="void" name="testEquals">
    <declaration type="Vector3D" name="u1" />
    <declaration type="Vector3D" name="u2" />
  </method>
  <method type="void" name="testHash">
    <declaration type="Vector3D" name="u" />
    <declaration type="Vector3D" name="v" />
  </method>
  <method type="void" name="testInfinite" />
  <method type="void" name="testNaN" />
  <method type="void" name="testToString">
    <declaration type="NumberFormat" name="format" />
  </method>
  <method type="void" name="testWrongDimension" />
  <method type="void" name="testCoordinates">
    <declaration type="Vector3D" name="v" />
    <declaration type="double[]" name="coordinates" />
  </method>
  <method type="void" name="testNorm1" />
  <method type="void" name="testNorm" />
  <method type="void" name="testNormSq" />
  <method type="void" name="testNormInf" />
  <method type="void" name="testDistance1">
    <declaration type="Vector3D" name="v1" />
    <declaration type="Vector3D" name="v2" />
  </method>
  <method type="void" name="testDistance">
    <declaration type="Vector3D" name="v1" />
    <declaration type="Vector3D" name="v2" />
  </method>
  <method type="void" name="testDistanceSq">
    <declaration type="Vector3D" name="v1" />
    <declaration type="Vector3D" name="v2" />
  </method>
  <method type="void" name="testDistanceInf">
    <declaration type="Vector3D" name="v1" />
    <declaration type="Vector3D" name="v2" />
  </method>
  <method type="void" name="testSubtract">
    <declaration type="Vector3D" name="v1" />
    <declaration type="Vector3D" name="v2" />
  </method>
  <method type="void" name="testAdd">
    <declaration type="Vector3D" name="v1" />
    <declaration type="Vector3D" name="v2" />
  </method>
  <method type="void" name="testScalarProduct">
    <declaration type="Vector3D" name="v" />
  </method>
  <method type="void" name="testVectorialProducts">
    <declaration type="Vector3D" name="v1" />
    <declaration type="Vector3D" name="v2" />
    <declaration type="Vector3D" name="v3" />
  </method>
  <method type="void" name="testCrossProductCancellation">
    <declaration type="Vector3D" name="v1" />
    <declaration type="Vector3D" name="v2" />
    <declaration type="double" name="scale" />
    <declaration type="Vector3D" name="big1" />
    <declaration type="Vector3D" name="small2" />
  </method>
  <method type="void" name="testAngular">
    <declaration type="Vector3D" name="u" />
  </method>
  <method type="void" name="testAngularSeparation">
    <declaration type="Vector3D" name="v1" />
    <declaration type="Vector3D" name="k" />
    <declaration type="Vector3D" name="i" />
    <declaration type="Vector3D" name="v2" />
  </method>
  <method type="void" name="testNormalize">
    <scope />
    <scope />
    <comment>expected behavior</comment>
  </method>
  <method type="void" name="testNegate" />
  <method type="void" name="testOrthogonal">
    <declaration type="Vector3D" name="v1" />
    <declaration type="Vector3D" name="v2" />
    <declaration type="Vector3D" name="v3" />
    <declaration type="Vector3D" name="v4" />
    <scope />
    <scope />
    <comment>expected behavior</comment>
  </method>
  <method type="void" name="testAngle">
    <scope />
    <scope />
    <comment>expected behavior</comment>
  </method>
  <method type="void" name="testAccurateDotProduct">
    <declaration type="Vector3D" name="u1" />
    <declaration type="Vector3D" name="u2" />
    <declaration type="double" name="sNaive" />
    <declaration type="double" name="sAccurate" />
    <comment>the following two vectors are nearly but not exactly orthogonal</comment>
    <comment>naive dot product (i.e. computing u1.x * u2.x + u1.y * u2.y + u1.z * u2.z</comment>
    <comment>leads to a result of 0.0, instead of the correct -1.855129...</comment>
  </method>
  <method type="void" name="testDotProduct">
    <declaration type="Well1024a" name="random" />
    <scope>
      <declaration type="double" name="ux" />
      <declaration type="double" name="uy" />
      <declaration type="double" name="uz" />
      <declaration type="double" name="vx" />
      <declaration type="double" name="vy" />
      <declaration type="double" name="vz" />
      <declaration type="double" name="sNaive" />
      <declaration type="double" name="sAccurate" />
    </scope>
    <comment>we compare accurate versus naive dot product implementations</comment>
    <comment>on regular vectors (i.e. not extreme cases like in the previous test)</comment>
  </method>
  <method type="void" name="testAccurateCrossProduct">
    <declaration type="Vector3D" name="u1" />
    <declaration type="Vector3D" name="u2" />
    <declaration type="Vector3D" name="u3" />
    <declaration type="Vector3D" name="cNaive" />
    <declaration type="Vector3D" name="cAccurate" />
    <comment>the vectors u1 and u2 are nearly but not exactly anti-parallel</comment>
    <comment>(7.31e-16 degrees from 180 degrees) naive cross product (i.e.</comment>
    <comment>computing u1.x * u2.x + u1.y * u2.y + u1.z * u2.z</comment>
    <comment>leads to a result of   [0.0009765, -0.0001220, -0.0039062],</comment>
    <comment>instead of the correct [0.0006913, -0.0001254, -0.0007909]</comment>
  </method>
  <method type="void" name="testCrossProduct">
    <declaration type="Well1024a" name="random" />
    <scope>
      <declaration type="double" name="ux" />
      <declaration type="double" name="uy" />
      <declaration type="double" name="uz" />
      <declaration type="double" name="vx" />
      <declaration type="double" name="vy" />
      <declaration type="double" name="vz" />
      <declaration type="Vector3D" name="cNaive" />
      <declaration type="Vector3D" name="cAccurate" />
    </scope>
    <comment>we compare accurate versus naive cross product implementations</comment>
    <comment>on regular vectors (i.e. not extreme cases like in the previous test)</comment>
  </method>
  <method type="void" name="checkVector" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
