<?xml version="1.0" encoding="UTF-8"?>
<class name="JacobianMatricesTest">
  <method type="void" name="testLowAccuracyExternalDifferentiation">
    <declaration type="FirstOrderIntegrator[]" name="integ" />
    <declaration type="double" name="hP" />
    <declaration type="SummaryStatistics" name="residualsP0" />
    <declaration type="SummaryStatistics" name="residualsP1" />
    <scope>
      <declaration type="Brusselator" name="brusselator" />
      <declaration type="double[]" name="y" />
      <declaration type="double[]" name="yP" />
    </scope>
    <comment>this test does not really test JacobianMatrices,</comment>
    <comment>it only shows that WITHOUT this class, attempting to recover</comment>
    <comment>the jacobians from external differentiation on simple integration</comment>
    <comment>results with low accuracy gives very poor results. In fact,</comment>
    <comment>the curves dy/dp = g(b) when b varies from 2.88 to 3.08 are</comment>
    <comment>essentially noise.</comment>
    <comment>This test is taken from Hairer, Norsett and Wanner book</comment>
    <comment>Solving Ordinary Differential Equations I (Nonstiff problems),</comment>
    <comment>the curves dy/dp = g(b) are in figure 6.5</comment>
  </method>
  <method type="void" name="testHighAccuracyExternalDifferentiation">
    <declaration type="FirstOrderIntegrator[]" name="integ" />
    <declaration type="double" name="hP" />
    <declaration type="SummaryStatistics" name="residualsP0" />
    <declaration type="SummaryStatistics" name="residualsP1" />
    <scope>
      <declaration type="ParamBrusselator" name="brusselator" />
      <declaration type="double[]" name="y" />
      <declaration type="double[]" name="yP" />
    </scope>
  </method>
  <method type="void" name="testInternalDifferentiation">
    <declaration type="AbstractIntegrator[]" name="integ" />
    <declaration type="double" name="hP" />
    <declaration type="double" name="hY" />
    <declaration type="SummaryStatistics" name="residualsP0" />
    <declaration type="SummaryStatistics" name="residualsP1" />
    <scope>
      <declaration type="ParamBrusselator" name="brusselator" />
      <declaration type="double[]" name="z" />
      <declaration type="double[][]" name="dZdZ0" />
      <declaration type="double[]" name="dZdP" />
      <declaration type="JacobianMatrices[]" name="jacob" />
      <declaration type="ExpandableStatefulODE" name="efode" />
    </scope>
    <comment>Assert.assertEquals(5000, integ.getMaxEvaluations());</comment>
    <comment>Assert.assertTrue(integ.getEvaluations() &gt; 1500);</comment>
    <comment>Assert.assertTrue(integ.getEvaluations() &lt; 2100);</comment>
    <comment>Assert.assertEquals(4 * integ.getEvaluations(), integ.getEvaluations());</comment>
  </method>
  <method type="void" name="testAnalyticalDifferentiation">
    <declaration type="AbstractIntegrator[]" name="integ" />
    <declaration type="SummaryStatistics" name="residualsP0" />
    <declaration type="SummaryStatistics" name="residualsP1" />
    <scope>
      <declaration type="Brusselator" name="brusselator" />
      <declaration type="double[]" name="z" />
      <declaration type="double[][]" name="dZdZ0" />
      <declaration type="double[]" name="dZdP" />
      <declaration type="JacobianMatrices" name="jacob" />
      <declaration type="ExpandableStatefulODE" name="efode" />
    </scope>
    <comment>Assert.assertEquals(5000, integ.getMaxEvaluations());</comment>
    <comment>Assert.assertTrue(integ.getEvaluations() &gt; 350);</comment>
    <comment>Assert.assertTrue(integ.getEvaluations() &lt; 510);</comment>
  </method>
  <method type="void" name="testFinalResult">
    <declaration type="AbstractIntegrator[]" name="integ" />
    <declaration type="double[][]" name="y" />
    <declaration type="Circle" name="circle" />
    <declaration type="JacobianMatrices" name="jacob" />
    <declaration type="ExpandableStatefulODE" name="efode" />
    <declaration type="double" name="t" />
    <scope />
    <declaration type="double[][]" name="dydy0" />
    <scope>
      <scope />
    </scope>
    <declaration type="double[]" name="dydcx" />
    <scope />
    <declaration type="double[]" name="dydcy" />
    <scope />
    <declaration type="double[]" name="dydom" />
    <scope />
  </method>
  <method type="void" name="testParameterizable">
    <declaration type="AbstractIntegrator[]" name="integ" />
    <declaration type="double[][]" name="y" />
    <declaration type="ParameterizedCircle" name="pcircle" />
    <declaration type="double" name="hP" />
    <declaration type="double" name="hY" />
    <declaration type="JacobianMatrices[]" name="jacob" />
    <declaration type="ExpandableStatefulODE" name="efode" />
    <declaration type="double" name="t" />
    <scope />
    <declaration type="double[][]" name="dydy0" />
    <scope>
      <scope />
    </scope>
    <declaration type="double[]" name="dydp0" />
    <scope />
    <declaration type="double[]" name="dydp1" />
    <scope />
  </method>
  <declaration type="String" name="B" />
  <declaration type="double" name="b" />
  <method type="constructor" name="Brusselator" />
  <method type="int" name="getDimension" />
  <method type="void" name="computeDerivatives">
    <declaration type="double" name="prod" />
  </method>
  <method type="void" name="computeMainStateJacobian">
    <declaration type="double" name="p" />
    <declaration type="double" name="y02" />
  </method>
  <method type="void" name="computeParameterJacobian">
    <scope />
    <scope />
  </method>
  <method type="double" name="dYdP0" />
  <method type="double" name="dYdP1" />
  <declaration type="String" name="B" />
  <declaration type="double" name="b" />
  <method type="constructor" name="ParamBrusselator" />
  <method type="int" name="getDimension" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="getParameter" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="setParameter" />
  <method type="void" name="computeDerivatives">
    <declaration type="double" name="prod" />
  </method>
  <method type="double" name="dYdP0" />
  <method type="double" name="dYdP1" />
  <javadoc>
    <text>ODE representing a point moving on a circle with provided center and angular rate.</text>
  </javadoc>
  <declaration type="String" name="CX" />
  <declaration type="String" name="CY" />
  <declaration type="String" name="OMEGA" />
  <declaration type="double[]" name="y0" />
  <declaration type="double" name="cx" />
  <declaration type="double" name="cy" />
  <declaration type="double" name="omega" />
  <method type="constructor" name="Circle" />
  <method type="int" name="getDimension" />
  <method type="void" name="computeDerivatives" />
  <method type="void" name="computeMainStateJacobian" />
  <method type="void" name="computeParameterJacobian">
    <scope />
    <scope />
    <scope />
  </method>
  <method type="double[]" name="exactY">
    <declaration type="double" name="cos" />
    <declaration type="double" name="sin" />
    <declaration type="double" name="dx0" />
    <declaration type="double" name="dy0" />
  </method>
  <method type="double[][]" name="exactDyDy0">
    <declaration type="double" name="cos" />
    <declaration type="double" name="sin" />
  </method>
  <method type="double[]" name="exactDyDcx">
    <declaration type="double" name="cos" />
    <declaration type="double" name="sin" />
  </method>
  <method type="double[]" name="exactDyDcy">
    <declaration type="double" name="cos" />
    <declaration type="double" name="sin" />
  </method>
  <method type="double[]" name="exactDyDom">
    <declaration type="double" name="cos" />
    <declaration type="double" name="sin" />
    <declaration type="double" name="dx0" />
    <declaration type="double" name="dy0" />
  </method>
  <javadoc>
    <text>ODE representing a point moving on a circle with provided center and angular rate.</text>
  </javadoc>
  <declaration type="String" name="CX" />
  <declaration type="String" name="CY" />
  <declaration type="String" name="OMEGA" />
  <declaration type="double[]" name="y0" />
  <declaration type="double" name="cx" />
  <declaration type="double" name="cy" />
  <declaration type="double" name="omega" />
  <method type="constructor" name="ParameterizedCircle" />
  <method type="int" name="getDimension" />
  <method type="void" name="computeDerivatives" />
  <method type="double" name="getParameter">
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <method type="void" name="setParameter">
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <method type="double[]" name="exactY">
    <declaration type="double" name="cos" />
    <declaration type="double" name="sin" />
    <declaration type="double" name="dx0" />
    <declaration type="double" name="dy0" />
  </method>
  <method type="double[][]" name="exactDyDy0">
    <declaration type="double" name="cos" />
    <declaration type="double" name="sin" />
  </method>
  <method type="double[]" name="exactDyDcx">
    <declaration type="double" name="cos" />
    <declaration type="double" name="sin" />
  </method>
  <method type="double[]" name="exactDyDcy">
    <declaration type="double" name="cos" />
    <declaration type="double" name="sin" />
  </method>
  <method type="double[]" name="exactDyDom">
    <declaration type="double" name="cos" />
    <declaration type="double" name="sin" />
    <declaration type="double" name="dx0" />
    <declaration type="double" name="dy0" />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
