<?xml version="1.0" encoding="UTF-8"?>
<class name="StatisticalReferenceDataset">
  <javadoc>
    <text>This class gives access to the statistical reference datasets provided by the
 * NIST (available
 * &lt;a href="http://www.itl.nist.gov/div898/strd/general/dataarchive.html"&gt;here&lt;/a&gt;).
 * Instances of this class can be created by invocation of the{@link StatisticalReferenceDatasetFactory}.</text>
  </javadoc>
  <javadoc>
    <text>The name of this dataset.</text>
  </javadoc>
  <declaration type="String" name="name" />
  <javadoc>
    <text>The total number of observations (data points).</text>
  </javadoc>
  <declaration type="int" name="numObservations" />
  <javadoc>
    <text>The total number of parameters.</text>
  </javadoc>
  <declaration type="int" name="numParameters" />
  <javadoc>
    <text>The total number of starting points for the optimizations.</text>
  </javadoc>
  <declaration type="int" name="numStartingPoints" />
  <javadoc>
    <text>The values of the predictor.</text>
  </javadoc>
  <declaration type="double[]" name="x" />
  <javadoc>
    <text>The values of the response.</text>
  </javadoc>
  <declaration type="double[]" name="y" />
  <javadoc>
    <text>The starting values. {@code startingValues[j][i]} is the value of the{@code i}-th parameter in the {@code j}-th set of starting values.</text>
  </javadoc>
  <declaration type="double[][]" name="startingValues" />
  <javadoc>
    <text>The certified values of the parameters.</text>
  </javadoc>
  <declaration type="double[]" name="a" />
  <javadoc>
    <text>The certified values of the standard deviation of the parameters.</text>
  </javadoc>
  <declaration type="double[]" name="sigA" />
  <javadoc>
    <text>The certified value of the residual sum of squares.</text>
  </javadoc>
  <declaration type="double" name="residualSumOfSquares" />
  <javadoc>
    <text>The least-squares problem.</text>
  </javadoc>
  <declaration type="LeastSquaresProblem" name="problem" />
  <javadoc>
    <text>Creates a new instance of this class from the specified data file. The
 * file must follow the StRD format.</text>
    <param>in the data file</param>
    <throws>IOException if an I/O error occurs</throws>
  </javadoc>
  <method type="constructor" name="StatisticalReferenceDataset">
    <declaration type="ArrayList&lt;String&gt;" name="lines" />
    <scope />
    <declaration type="int[]" name="index" />
    <scope />
    <scope>
      <declaration type="String" name="line" />
      <declaration type="String[]" name="tokens" />
    </scope>
    <scope />
    <declaration type="double[][]" name="start" />
    <scope>
      <declaration type="String" name="line" />
      <declaration type="String[]" name="tokens" />
      <scope />
      <scope />
    </scope>
    <scope />
    <declaration type="double" name="dummyDouble" />
    <declaration type="String" name="dummyString" />
    <scope>
      <scope />
      <scope>
        <declaration type="String[]" name="tokens" />
      </scope>
    </scope>
    <scope />
    <scope />
    <comment>Data columns are in reverse order!!!</comment>
  </method>
  <method type="ModelFunction" name="getModelFunction">
    <method type="double[]" name="value">
      <declaration type="int" name="n" />
      <declaration type="double[]" name="yhat" />
      <scope />
    </method>
  </method>
  <method type="ModelFunctionJacobian" name="getModelFunctionJacobian">
    <method type="double[][]" name="value">
      <declaration type="int" name="n" />
      <declaration type="double[][][]" name="j" />
      <scope />
    </method>
  </method>
  <javadoc>
    <text>Returns the name of this dataset.</text>
    <return>the name of the dataset</return>
  </javadoc>
  <method type="String" name="getName" />
  <javadoc>
    <text>Returns the total number of observations (data points).</text>
    <return>the number of observations</return>
  </javadoc>
  <method type="int" name="getNumObservations" />
  <javadoc>
    <text>Returns a copy of the data arrays. The data is laid out as follows &lt;li&gt;{@code data[0][i] = x[i]},&lt;/li&gt; &lt;li&gt;{@code data[1][i] = y[i]},&lt;/li&gt;</text>
    <return>the array of data points.</return>
  </javadoc>
  <method type="double[][]" name="getData" />
  <javadoc>
    <text>Returns the x-value of the {@code i}-th data point.</text>
    <param>i the index of the data point</param>
    <return>the x-value</return>
  </javadoc>
  <method type="double" name="getX" />
  <javadoc>
    <text>Returns the y-value of the {@code i}-th data point.</text>
    <param>i the index of the data point</param>
    <return>the y-value</return>
  </javadoc>
  <method type="double" name="getY" />
  <javadoc>
    <text>Returns the total number of parameters.</text>
    <return>the number of parameters</return>
  </javadoc>
  <method type="int" name="getNumParameters" />
  <javadoc>
    <text>Returns the certified values of the paramters.</text>
    <return>the values of the parameters</return>
  </javadoc>
  <method type="double[]" name="getParameters" />
  <javadoc>
    <text>Returns the certified value of the {@code i}-th parameter.</text>
    <param>i the index of the parameter</param>
    <return>the value of the parameter</return>
  </javadoc>
  <method type="double" name="getParameter" />
  <javadoc>
    <text>Reurns the certified values of the standard deviations of the parameters.</text>
    <return>the standard deviations of the parameters</return>
  </javadoc>
  <method type="double[]" name="getParametersStandardDeviations" />
  <javadoc>
    <text>Returns the certified value of the standard deviation of the {@code i}-th
 * parameter.</text>
    <param>i the index of the parameter</param>
    <return>the standard deviation of the parameter</return>
  </javadoc>
  <method type="double" name="getParameterStandardDeviation" />
  <javadoc>
    <text>Returns the certified value of the residual sum of squares.</text>
    <return>the residual sum of squares</return>
  </javadoc>
  <method type="double" name="getResidualSumOfSquares" />
  <javadoc>
    <text>Returns the total number of starting points (initial guesses for the
 * optimization process).</text>
    <return>the number of starting points</return>
  </javadoc>
  <method type="int" name="getNumStartingPoints" />
  <javadoc>
    <text>Returns the {@code i}-th set of initial values of the parameters.</text>
    <param>i the index of the starting point</param>
    <return>the starting point</return>
  </javadoc>
  <method type="double[]" name="getStartingPoint" />
  <javadoc>
    <text>Returns the least-squares problem corresponding to fitting the model to
 * the specified data.</text>
    <return>the least-squares problem</return>
  </javadoc>
  <method type="LeastSquaresProblem" name="getLeastSquaresProblem" />
  <method name="getModelValue" type="double" />
  <javadoc>
    <text>Returns the value of the model for the specified values of the predictor
 * variable and the parameters.</text>
    <param>x the predictor variable</param>
    <param>a the parameters</param>
    <return>the value of the model</return>
  </javadoc>
  <method name="getModelDerivatives" type="double[]" />
  <javadoc>
    <text>Returns the values of the partial derivatives of the model with respect
 * to the parameters.</text>
    <param>x the predictor variable</param>
    <param>a the parameters</param>
    <return>the partial derivatives</return>
  </javadoc>
  <javadoc>
    <text>&lt;p&gt;
 * Parses the specified text lines, and extracts the indices of the first
 * and last lines of the data defined by the specified {@code key}. This key
 * must be one of
 * &lt;/p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;{@code "Starting Values"},&lt;/li&gt;
 * &lt;li&gt;{@code "Certified Values"},&lt;/li&gt;
 * &lt;li&gt;{@code "Data"}.&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;p&gt;
 * In the NIST data files, the line indices are separated by the keywords{@code "lines"} and {@code "to"}.
 * &lt;/p&gt;</text>
    <param>lines the line of text to be parsed</param>
    <return>an array of two {@code int}s. First value is the index of the
 * first line, second value is the index of the last line.{@code null} if the line could not be parsed.</return>
  </javadoc>
  <method type="int[]" name="findLineNumbers">
    <scope>
      <declaration type="boolean" name="flag" />
      <scope>
        <declaration type="int[]" name="numbers" />
        <declaration type="String" name="from" />
        <declaration type="String" name="to" />
      </scope>
    </scope>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
