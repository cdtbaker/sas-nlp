<?xml version="1.0" encoding="UTF-8"?>
<class name="DummyStepInterpolator">
  <javadoc>
    <text>This class is a step interpolator that does nothing.
 * &lt;p&gt;This class is used when the {@link StepHandler "step handler"}set up by the user does not need step interpolation. It does not
 * recompute the state when {@link AbstractStepInterpolator#setInterpolatedTimesetInterpolatedTime} is called. This implies the interpolated state
 * is always the state at the end of the current step.&lt;/p&gt;</text>
    <see>StepHandler</see>
    <version>$Id: DummyStepInterpolator.java 1302386 2012-03-19 11:59:25Z sebb $</version>
    <since>1.2</since>
  </javadoc>
  <javadoc>
    <text>Serializable version identifier.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Current derivative.</text>
  </javadoc>
  <declaration type="double[]" name="currentDerivative" />
  <javadoc>
    <text>Simple constructor.
 * This constructor builds an instance that is not usable yet, the
 * &lt;code&gt;AbstractStepInterpolator.reinitialize&lt;/code&gt; protected method
 * should be called before using the instance in order to initialize
 * the internal arrays. This constructor is used only in order to delay
 * the initialization in some cases. As an example, the {@link org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator} uses
 * the prototyping design pattern to create the step interpolators by
 * cloning an uninitialized model and latter initializing the copy.</text>
  </javadoc>
  <method type="constructor" name="DummyStepInterpolator" />
  <javadoc>
    <text>Simple constructor.</text>
    <param>y reference to the integrator array holding the state at
 * the end of the step</param>
    <param>yDot reference to the integrator array holding the state
 * derivative at some arbitrary point within the step</param>
    <param>forward integration direction indicator</param>
  </javadoc>
  <method type="constructor" name="DummyStepInterpolator" />
  <javadoc>
    <text>Copy constructor.</text>
    <param>interpolator interpolator to copy from. The copy is a deep
 * copy: its arrays are separated from the original arrays of the
 * instance</param>
  </javadoc>
  <method type="constructor" name="DummyStepInterpolator" />
  <javadoc>
    <text>Really copy the finalized instance.</text>
    <return>a copy of the finalized instance</return>
  </javadoc>
  <method type="StepInterpolator" name="doCopy" />
  <javadoc>
    <text>Compute the state at the interpolated time.
 * In this class, this method does nothing: the interpolated state
 * is always the state at the end of the current step.</text>
    <param>theta normalized interpolation abscissa within the step
 * (theta is zero at the previous time step and one at the current time step)</param>
    <param>oneMinusThetaH time gap between the interpolated time and
 * the current time</param>
  </javadoc>
  <method type="void" name="computeInterpolatedStateAndDerivatives" />
  <javadoc>
    <text>Write the instance to an output channel.</text>
    <param>out output channel</param>
    <exception>IOException if the instance cannot be written</exception>
  </javadoc>
  <method type="void" name="writeExternal">
    <scope>
      <scope />
    </scope>
    <comment>save the state of the base class</comment>
  </method>
  <javadoc>
    <text>Read the instance from an input channel.</text>
    <param>in input channel</param>
    <exception>IOException if the instance cannot be read</exception>
  </javadoc>
  <method type="void" name="readExternal">
    <declaration type="double" name="t" />
    <scope />
    <scope>
      <scope />
    </scope>
    <comment>read the base class</comment>
    <comment>we can now set the interpolated time and state</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
