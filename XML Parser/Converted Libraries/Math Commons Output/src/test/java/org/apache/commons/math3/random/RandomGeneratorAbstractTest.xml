<?xml version="1.0" encoding="UTF-8"?>
<class name="RandomGeneratorAbstractTest">
  <javadoc>
    <text>Base class for RandomGenerator tests.
 * Tests RandomGenerator methods directly and also executes RandomDataTest
 * test cases against a RandomDataImpl created using the provided generator.
 * RandomGenerator test classes should extend this class, implementing
 * makeGenerator() to provide a concrete generator to test. The generator
 * returned by makeGenerator should be seeded with a fixed seed.</text>
    <version>$Id: RandomGeneratorAbstractTest.java 1454846 2013-03-10 13:02:04Z luc $</version>
  </javadoc>
  <javadoc>
    <text>RandomGenerator under test</text>
  </javadoc>
  <declaration type="RandomGenerator" name="generator" />
  <method name="makeGenerator" type="RandomGenerator" />
  <javadoc>
    <text>Override this method in subclasses to provide a concrete generator to test.
 * Return a generator seeded with a fixed seed.</text>
  </javadoc>
  <javadoc>
    <text>Initialize generator and randomData instance in superclass.</text>
  </javadoc>
  <method type="constructor" name="RandomGeneratorAbstractTest" />
  <javadoc>
    <text>Set a fixed seed for the tests</text>
  </javadoc>
  <method type="void" name="setUp" />
  <method type="void" name="testNextSecureLongIAE" />
  <method type="void" name="testNextSecureLongNegativeToPositiveRange" />
  <method type="void" name="testNextSecureLongNegativeRange" />
  <method type="void" name="testNextSecureLongPositiveRange" />
  <method type="void" name="testNextSecureIntIAE" />
  <method type="void" name="testNextSecureIntNegativeToPositiveRange" />
  <method type="void" name="testNextSecureIntNegativeRange" />
  <method type="void" name="testNextSecureIntPositiveRange" />
  <method type="void" name="testNextSecureHex" />
  <method type="void" name="testNextIntDirect">
    <declaration type="int[][]" name="testValues" />
    <scope>
      <declaration type="int" name="val" />
    </scope>
    <declaration type="int" name="numTests" />
    <scope>
      <declaration type="int" name="n" />
      <declaration type="int[]" name="binUpperBounds" />
      <scope>
        <scope />
      </scope>
      <scope>
        <declaration type="int" name="step" />
        <scope />
      </scope>
      <declaration type="int" name="numFailures" />
      <declaration type="int" name="binCount" />
      <declaration type="long[]" name="observed" />
      <declaration type="double[]" name="expected" />
      <scope />
      <scope>
        <scope>
          <declaration type="int" name="value" />
          <scope>
            <scope />
          </scope>
        </scope>
        <scope />
      </scope>
      <scope />
    </scope>
    <comment>Set up test values - end of the array filled randomly</comment>
    <comment>Set up bins</comment>
    <comment>Run the tests</comment>
  </method>
  <method type="void" name="testNextIntIAE2">
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>ignored</comment>
    <comment>ignored</comment>
  </method>
  <method type="void" name="testNextLongDirect">
    <declaration type="long" name="q1" />
    <declaration type="long" name="q2" />
    <declaration type="long" name="q3" />
    <declaration type="Frequency" name="freq" />
    <declaration type="long" name="val" />
    <declaration type="int" name="value" />
    <scope>
      <scope />
      <scope />
      <scope />
      <scope />
    </scope>
    <declaration type="long[]" name="observed" />
    <scope />
    <comment>Use ChiSquare dist with df = 4-1 = 3, alpha = .001
 Change to 11.34 for alpha = .01</comment>
  </method>
  <method type="void" name="testNextBooleanDirect">
    <declaration type="long" name="halfSampleSize" />
    <declaration type="double[]" name="expected" />
    <declaration type="long[]" name="observed" />
    <scope>
      <scope />
      <scope />
    </scope>
    <comment>Use ChiSquare dist with df = 2-1 = 1, alpha = .001
 Change to 6.635 for alpha = .01</comment>
  </method>
  <method type="void" name="testNextFloatDirect">
    <declaration type="Frequency" name="freq" />
    <declaration type="float" name="val" />
    <declaration type="int" name="value" />
    <scope>
      <scope />
      <scope />
      <scope />
      <scope />
    </scope>
    <declaration type="long[]" name="observed" />
    <scope />
    <comment>Use ChiSquare dist with df = 4-1 = 3, alpha = .001
 Change to 11.34 for alpha = .01</comment>
  </method>
  <method type="void" name="testDoubleDirect">
    <declaration type="SummaryStatistics" name="sample" />
    <declaration type="int" name="N" />
    <scope />
  </method>
  <method type="void" name="testFloatDirect">
    <declaration type="SummaryStatistics" name="sample" />
    <declaration type="int" name="N" />
    <scope />
  </method>
  <method type="void" name="testNextIntNeg" />
  <method type="void" name="testNextInt2">
    <declaration type="int" name="walk" />
    <declaration type="int" name="N" />
    <scope>
      <scope />
      <scope />
    </scope>
  </method>
  <method type="void" name="testNextLong2">
    <declaration type="int" name="walk" />
    <declaration type="int" name="N" />
    <scope>
      <scope />
      <scope />
    </scope>
  </method>
  <method type="void" name="testNexBoolean2">
    <declaration type="int" name="walk" />
    <declaration type="int" name="N" />
    <scope>
      <scope />
      <scope />
    </scope>
  </method>
  <method type="void" name="testNexBytes">
    <declaration type="long[]" name="count" />
    <declaration type="byte[]" name="bytes" />
    <declaration type="double[]" name="expected" />
    <declaration type="int" name="sampleSize" />
    <scope />
    <scope>
      <scope />
    </scope>
  </method>
  <method type="void" name="testSeeding">
    <declaration type="RandomGenerator" name="gen" />
    <declaration type="RandomGenerator" name="gen1" />
    <comment>makeGenerator initializes with fixed seed</comment>
    <comment>reseed, but recreate the second one</comment>
    <comment>verifies MATH-723</comment>
  </method>
  <method type="void" name="checkSameSequence">
    <declaration type="int" name="len" />
    <declaration type="double[][]" name="values" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>Needs to be an odd number to check MATH-723</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>Omit secureXxx tests, since they do not use the provided generator</comment>
  <javadoc>
    <text>Tests uniformity of nextInt(int) distribution by generating 1000
 * samples for each of 10 test values and for each sample performing
 * a chi-square test of homogeneity of the observed distribution with
 * the expected uniform distribution.  Tests are performed at the .01
 * level and an average failure rate higher than 2% (i.e. more than 20
 * null hypothesis rejections) causes the test case to fail.
 * All random values are generated using the generator instance used by
 * other tests and the generator is not reseeded, so this is a fixed seed
 * test.</text>
  </javadoc>
</class>
