<?xml version="1.0" encoding="UTF-8"?>
<class name="FieldMatrixImplTest">
  <javadoc>
    <text>Test cases for the {@link Array2DRowFieldMatrix} class.</text>
    <version>$Id: FieldMatrixImplTest.java 1364030 2012-07-21 01:10:04Z erans $</version>
  </javadoc>
  <declaration type="Fraction[][]" name="id" />
  <declaration type="Fraction[][]" name="testData" />
  <declaration type="Fraction[][]" name="testDataLU" />
  <declaration type="Fraction[][]" name="testDataPlus2" />
  <declaration type="Fraction[][]" name="testDataMinus" />
  <declaration type="Fraction[]" name="testDataRow1" />
  <declaration type="Fraction[]" name="testDataCol3" />
  <declaration type="Fraction[][]" name="testDataInv" />
  <declaration type="Fraction[]" name="preMultTest" />
  <declaration type="Fraction[][]" name="testData2" />
  <declaration type="Fraction[][]" name="testData2T" />
  <declaration type="Fraction[][]" name="testDataPlusInv" />
  <declaration type="Fraction[][]" name="luData" />
  <declaration type="Fraction[][]" name="luDataLUDecomposition" />
  <declaration type="Fraction[][]" name="singular" />
  <declaration type="Fraction[][]" name="bigSingular" />
  <declaration type="Fraction[][]" name="detData" />
  <declaration type="Fraction[][]" name="detData2" />
  <declaration type="Fraction[]" name="testVector" />
  <declaration type="Fraction[]" name="testVector2" />
  <declaration type="Fraction[][]" name="subTestData" />
  <declaration type="Fraction[][]" name="subRows02Cols13" />
  <declaration type="Fraction[][]" name="subRows03Cols12" />
  <declaration type="Fraction[][]" name="subRows03Cols123" />
  <declaration type="Fraction[][]" name="subRows20Cols123" />
  <declaration type="Fraction[][]" name="subRows31Cols31" />
  <declaration type="Fraction[][]" name="subRows01Cols23" />
  <declaration type="Fraction[][]" name="subRows23Cols00" />
  <declaration type="Fraction[][]" name="subRows00Cols33" />
  <declaration type="Fraction[][]" name="subRow0" />
  <declaration type="Fraction[][]" name="subRow3" />
  <declaration type="Fraction[][]" name="subColumn1" />
  <declaration type="Fraction[][]" name="subColumn3" />
  <declaration type="double" name="entryTolerance" />
  <declaration type="double" name="normTolerance" />
  <javadoc>
    <text>test dimensions</text>
  </javadoc>
  <method type="void" name="testDimensions">
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m2" />
  </method>
  <javadoc>
    <text>test copy functions</text>
  </javadoc>
  <method type="void" name="testCopyFunctions">
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m1" />
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m2" />
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m3" />
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m4" />
  </method>
  <javadoc>
    <text>test add</text>
  </javadoc>
  <method type="void" name="testAdd">
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="mInv" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="mPlusMInv" />
    <declaration type="Fraction[][]" name="sumEntries" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>test add failure</text>
  </javadoc>
  <method type="void" name="testAddFail">
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m2" />
    <scope />
    <scope />
    <comment>ignored</comment>
  </method>
  <javadoc>
    <text>test m-n = m + -n</text>
  </javadoc>
  <method type="void" name="testPlusMinus">
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m2" />
    <scope />
    <scope />
    <comment>ignored</comment>
  </method>
  <javadoc>
    <text>test multiply</text>
  </javadoc>
  <method type="void" name="testMultiply">
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="mInv" />
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="identity" />
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m2" />
    <scope />
    <scope />
    <comment>ignored</comment>
  </method>
  <declaration type="Fraction[][]" name="d3" />
  <declaration type="Fraction[][]" name="d4" />
  <declaration type="Fraction[][]" name="d5" />
  <method type="void" name="testMultiply2">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m3" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m4" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m5" />
  </method>
  <method type="void" name="testPower">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="mInv" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="mPlusInv" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="identity" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="C1" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="C2" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="C3" />
    <scope />
    <scope>
      <declaration type="FieldMatrix&lt;Fraction&gt;" name="mNotSquare" />
    </scope>
    <scope />
    <scope />
    <scope />
    <comment>stop at 5 to avoid overflow</comment>
    <comment>ignored</comment>
    <comment>ignored</comment>
  </method>
  <javadoc>
    <text>test trace</text>
  </javadoc>
  <method type="void" name="testTrace">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <scope />
    <scope />
    <comment>ignored</comment>
  </method>
  <javadoc>
    <text>test sclarAdd</text>
  </javadoc>
  <method type="void" name="testScalarAdd">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
  </method>
  <javadoc>
    <text>test operate</text>
  </javadoc>
  <method type="void" name="testOperate">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <scope />
    <scope />
    <comment>ignored</comment>
  </method>
  <javadoc>
    <text>test issue MATH-209</text>
  </javadoc>
  <method type="void" name="testMath209">
    <declaration type="FieldMatrix&lt;Fraction&gt;[]" name="a" />
    <declaration type="Fraction[][]" name="b" />
  </method>
  <javadoc>
    <text>test transpose</text>
  </javadoc>
  <method type="void" name="testTranspose">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="mIT" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="mTI" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="mt" />
  </method>
  <javadoc>
    <text>test preMultiply by vector</text>
  </javadoc>
  <method type="void" name="testPremultiplyVector">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <scope />
    <scope />
    <comment>ignored</comment>
  </method>
  <method type="void" name="testPremultiply">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m3" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m4" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m5" />
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="mInv" />
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="identity" />
    <scope />
    <scope />
    <comment>ignored</comment>
  </method>
  <method type="void" name="testGetVectors">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>ignored</comment>
    <comment>ignored</comment>
  </method>
  <method type="void" name="testGetEntry">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <scope />
    <scope />
    <comment>expected</comment>
  </method>
  <javadoc>
    <text>test examples in user guide</text>
  </javadoc>
  <method type="void" name="testExamples">
    <declaration type="Fraction[][]" name="matrixData" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="Fraction[][]" name="matrixData2" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="n" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="p" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="pInverse" />
    <declaration type="Fraction[][]" name="coefficientsData" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="coefficients" />
    <declaration type="Fraction[]" name="constants" />
    <declaration type="Fraction[]" name="solution" />
    <comment>Create a real matrix with two rows and three columns</comment>
    <comment>One more with three rows, two columns</comment>
    <comment>Now multiply m by n</comment>
    <comment>Invert p</comment>
    <comment>Solve example</comment>
  </method>
  <method type="void" name="testGetSubMatrix">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
  </method>
  <method type="void" name="checkGetSubMatrix">
    <scope>
      <declaration type="FieldMatrix&lt;Fraction&gt;" name="sub" />
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
  </method>
  <method type="void" name="checkGetSubMatrix">
    <scope>
      <declaration type="FieldMatrix&lt;Fraction&gt;" name="sub" />
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
  </method>
  <method type="void" name="testCopySubMatrix">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
  </method>
  <method type="void" name="checkCopy">
    <scope>
      <declaration type="Fraction[][]" name="sub" />
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
  </method>
  <method type="void" name="checkCopy">
    <scope>
      <declaration type="Fraction[][]" name="sub" />
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
  </method>
  <method type="void" name="testGetRowMatrix">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="mRow0" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="mRow3" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testSetRowMatrix">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="mRow3" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testGetColumnMatrix">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="mColumn1" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="mColumn3" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testSetColumnMatrix">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="mColumn3" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testGetRowVector">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="mRow0" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="mRow3" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testSetRowVector">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="mRow3" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testGetColumnVector">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="mColumn1" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="mColumn3" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testSetColumnVector">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="FieldVector&lt;Fraction&gt;" name="mColumn3" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="FieldVector&lt;Fraction&gt;" name="columnToVector">
    <declaration type="Fraction[]" name="data" />
    <scope />
  </method>
  <method type="void" name="testGetRow">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testSetRow">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testGetColumn">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="Fraction[]" name="mColumn1" />
    <declaration type="Fraction[]" name="mColumn3" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testSetColumn">
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="Fraction[]" name="mColumn3" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="Fraction[]" name="columnToArray">
    <declaration type="Fraction[]" name="data" />
    <scope />
  </method>
  <method type="void" name="checkArrays">
    <scope />
  </method>
  <method type="void" name="testEqualsAndHashCode">
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m1" />
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="mt" />
  </method>
  <method type="void" name="testToString">
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m" />
  </method>
  <method type="void" name="testSetSubMatrix">
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="FieldMatrix&lt;Fraction&gt;[]" name="expected" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m2" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>dimension overflow</comment>
    <comment>expected</comment>
    <comment>dimension underflow</comment>
    <comment>expected</comment>
    <comment>expected</comment>
    <comment>null</comment>
    <comment>expected</comment>
    <comment>expected</comment>
    <comment>expected</comment>
    <comment>ragged</comment>
    <comment>expected</comment>
    <comment>empty</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testWalk">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="GetVisitor" name="getVisitor" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <method type="void" name="testSerial">
    <declaration type="Array2DRowFieldMatrix&lt;Fraction&gt;" name="m" />
  </method>
  <method type="constructor" name="SetVisitor" />
  <method type="Fraction" name="visit" />
  <declaration type="int" name="count" />
  <method type="constructor" name="GetVisitor" />
  <method type="void" name="visit" />
  <method type="int" name="getCount" />
  <javadoc>
    <text>extracts the l  and u matrices from compact lu representation</text>
  </javadoc>
  <method type="void" name="splitLU">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <declaration type="int" name="n" />
    <scope>
      <scope>
        <scope />
        <scope />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Returns the result of applying the given row permutation to the matrix</text>
  </javadoc>
  <method type="FieldMatrix&lt;Fraction&gt;" name="permuteRows">
    <scope />
    <scope />
    <declaration type="int" name="n" />
    <declaration type="int" name="m" />
    <declaration type="Fraction[]" name="out" />
    <scope>
      <scope />
    </scope>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>3 x 3 identity matrix</comment>
  <comment>Test data for group operations</comment>
  <comment>lu decomposition tests</comment>
  <comment>singular matrices</comment>
  <comment>4th row = 1st + 2nd</comment>
  <comment>vectors</comment>
  <comment>submatrix accessor tests</comment>
  <comment>array selections</comment>
  <comment>effective permutations</comment>
  <comment>contiguous ranges</comment>
  <comment>row matrices</comment>
  <comment>column matrices</comment>
  <comment>tolerances</comment>
  <comment>Additional Test for Array2DRowFieldMatrix&lt;Fraction&gt;Test.testMultiply</comment>
  <comment>test submatrix accessors</comment>
  <comment>--------------- -----------------Protected methods</comment>
</class>
