<?xml version="1.0" encoding="UTF-8"?>
<class name="PolynomialSplineFunctionTest">
  <javadoc>
    <text>Tests the PolynomialSplineFunction implementation.</text>
    <version>$Id: PolynomialSplineFunctionTest.java 1364030 2012-07-21 01:10:04Z erans $</version>
  </javadoc>
  <javadoc>
    <text>Error tolerance for tests</text>
  </javadoc>
  <declaration type="double" name="tolerance" />
  <javadoc>
    <text>Quadratic polynomials used in tests:
 * x^2 + x            [-1, 0)
 * x^2 + x + 2        [0, 1)
 * x^2 + x + 4        [1, 2)
 * Defined so that evaluation using PolynomialSplineFunction evaluation
 * algorithm agrees at knot point boundaries.</text>
  </javadoc>
  <declaration type="PolynomialFunction[]" name="polynomials" />
  <javadoc>
    <text>Knot points</text>
  </javadoc>
  <declaration type="double[]" name="knots" />
  <javadoc>
    <text>Derivative of test polynomials -- 2x + 1</text>
  </javadoc>
  <declaration type="PolynomialFunction" name="dp" />
  <method type="void" name="testConstructor">
    <declaration type="PolynomialSplineFunction" name="spline" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>too few knots</comment>
    <comment>expected</comment>
    <comment>too many knots</comment>
    <comment>expected</comment>
    <comment>knots not increasing</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testValues">
    <declaration type="PolynomialSplineFunction" name="spline" />
    <declaration type="UnivariateFunction" name="dSpline" />
    <declaration type="double" name="x" />
    <declaration type="int" name="index" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <javadoc>
      <text>interior points -- spline value at x should equal p(x - knot)
 * where knot is the largest knot point less than or equal to x and p
 * is the polynomial defined over the knot segment to which x belongs.</text>
    </javadoc>
    <comment>knot points -- centering should zero arguments</comment>
    <comment>outside of domain -- under min</comment>
    <comment>expected</comment>
    <comment>outside of domain -- over max</comment>
    <comment>expected</comment>
  </method>
  <javadoc>
    <text>Do linear search to find largest knot point less than or equal to x.
 * Implementation does binary search.</text>
  </javadoc>
  <method type="int" name="findKnot">
    <scope />
    <scope>
      <scope />
    </scope>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
