<?xml version="1.0" encoding="UTF-8"?>
<class name="ArithmeticUtilsTest">
  <javadoc>
    <text>Test cases for the {@link ArithmeticUtils} class.</text>
    <version>$Id: ArithmeticUtilsTest.java 1371680 2012-08-10 12:15:23Z luc $</version>
  </javadoc>
  <javadoc>
    <text>cached binomial coefficients</text>
  </javadoc>
  <declaration type="List&lt;Map&lt;Integer,Long&gt;&gt;" name="binomialCache" />
  <javadoc>
    <text>Verify that b(0,0) = 1</text>
  </javadoc>
  <method type="void" name="test0Choose0" />
  <method type="void" name="testAddAndCheck">
    <declaration type="int" name="big" />
    <declaration type="int" name="bigNeg" />
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <method type="void" name="testAddAndCheckLong">
    <declaration type="long" name="max" />
    <declaration type="long" name="min" />
  </method>
  <method type="void" name="testBinomialCoefficient">
    <declaration type="long[]" name="bcoef5" />
    <declaration type="long[]" name="bcoef6" />
    <scope />
    <scope />
    <scope>
      <scope />
    </scope>
    <declaration type="int[]" name="n" />
    <declaration type="int[]" name="k" />
    <scope>
      <declaration type="long" name="expected" />
    </scope>
  </method>
  <method type="void" name="testBinomialCoefficientFail">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <declaration type="double" name="x" />
    <comment>ignored</comment>
    <comment>ignored</comment>
    <comment>ignored</comment>
    <comment>ignored</comment>
    <comment>ignored</comment>
    <comment>ignored</comment>
    <comment>ignored</comment>
    <comment>ignored</comment>
  </method>
  <javadoc>
    <text>Tests correctness for large n and sharpness of upper bound in API doc
 * JIRA: MATH-241</text>
  </javadoc>
  <method type="void" name="testBinomialCoefficientLarge">
    <scope>
      <scope>
        <declaration type="long" name="ourResult" />
        <declaration type="long" name="exactResult" />
        <declaration type="boolean" name="shouldThrow" />
        <declaration type="boolean" name="didThrow" />
        <scope />
        <scope />
        <scope />
        <scope />
        <scope />
      </scope>
    </scope>
    <declaration type="long" name="ourResult" />
    <declaration type="long" name="exactResult" />
    <scope />
    <scope />
    <declaration type="int" name="n" />
    <comment>This tests all legal and illegal values for n &lt;= 200.</comment>
    <comment>This one should throw</comment>
    <comment>Expected</comment>
  </method>
  <method type="void" name="testFactorial">
    <scope />
  </method>
  <method type="void" name="testFactorialFail">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>ignored</comment>
    <comment>ignored</comment>
    <comment>ignored</comment>
    <comment>ignored</comment>
  </method>
  <method type="void" name="testGcd">
    <declaration type="int" name="a" />
    <declaration type="int" name="b" />
    <declaration type="int" name="c" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>gcd(Integer.MIN_VALUE, 0) &gt; Integer.MAX_VALUE</comment>
    <comment>expected</comment>
    <comment>gcd(0, Integer.MIN_VALUE) &gt; Integer.MAX_VALUE</comment>
    <comment>expected</comment>
    <comment>gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) &gt; Integer.MAX_VALUE</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testGcdConsistency">
    <declaration type="int[]" name="primeList" />
    <declaration type="ArrayList&lt;Integer&gt;" name="primes" />
    <scope />
    <declaration type="RandomDataImpl" name="randomData" />
    <scope>
      <declaration type="Object[]" name="sample" />
      <declaration type="int" name="p1" />
      <declaration type="int" name="p2" />
      <declaration type="int" name="p3" />
      <declaration type="int" name="p4" />
      <declaration type="int" name="i1" />
      <declaration type="int" name="i2" />
      <declaration type="int" name="gcd" />
      <declaration type="long" name="l1" />
      <declaration type="long" name="l2" />
    </scope>
  </method>
  <method type="void" name="testGcdLong">
    <declaration type="long" name="a" />
    <declaration type="long" name="b" />
    <declaration type="long" name="c" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>gcd(Long.MIN_VALUE, 0) &gt; Long.MAX_VALUE</comment>
    <comment>expected</comment>
    <comment>gcd(0, Long.MIN_VALUE) &gt; Long.MAX_VALUE</comment>
    <comment>expected</comment>
    <comment>gcd(Long.MIN_VALUE, Long.MIN_VALUE) &gt; Long.MAX_VALUE</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testLcm">
    <declaration type="int" name="a" />
    <declaration type="int" name="b" />
    <declaration type="int" name="c" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>Assert that no intermediate value overflows:</comment>
    <comment>The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)</comment>
    <comment>Special case</comment>
    <comment>lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int</comment>
    <comment>expected</comment>
    <comment>lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int</comment>
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testLcmLong">
    <declaration type="long" name="a" />
    <declaration type="long" name="b" />
    <declaration type="long" name="c" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>Assert that no intermediate value overflows:</comment>
    <comment>The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)</comment>
    <comment>Special case</comment>
    <comment>lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int</comment>
    <comment>expected</comment>
    <comment>lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int</comment>
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testMulAndCheck">
    <declaration type="int" name="big" />
    <declaration type="int" name="bigNeg" />
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <method type="void" name="testMulAndCheckLong">
    <declaration type="long" name="max" />
    <declaration type="long" name="min" />
  </method>
  <method type="void" name="testSubAndCheck">
    <declaration type="int" name="big" />
    <declaration type="int" name="bigNeg" />
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <method type="void" name="testSubAndCheckErrorMessage">
    <declaration type="int" name="big" />
    <scope />
    <scope />
  </method>
  <method type="void" name="testSubAndCheckLong">
    <declaration type="long" name="max" />
    <declaration type="long" name="min" />
    <comment>min == -1-max</comment>
  </method>
  <method type="void" name="testPow">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <declaration type="BigInteger" name="twentyOne" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <declaration type="BigInteger" name="bigOne" />
    <comment>expected behavior</comment>
    <comment>expected behavior</comment>
    <comment>expected behavior</comment>
    <comment>expected behavior</comment>
    <comment>expected behavior</comment>
    <comment>expected behavior</comment>
    <comment>expected behavior</comment>
  </method>
  <method type="void" name="testIsPowerOfTwo">
    <declaration type="int" name="n" />
    <declaration type="boolean[]" name="expected" />
    <scope />
    <scope>
      <declaration type="boolean" name="actual" />
    </scope>
  </method>
  <method type="void" name="testStirlingS2">
    <scope>
      <scope />
    </scope>
  </method>
  <method type="void" name="testStirlingS2NegativeN" />
  <method type="void" name="testStirlingS2LargeK" />
  <method type="void" name="testStirlingS2Overflow" />
  <javadoc>
    <text>Exact (caching) recursive implementation to test against</text>
  </javadoc>
  <method type="long" name="binomialCoefficient">
    <scope>
      <declaration type="Long" name="cachedResult" />
      <scope />
    </scope>
    <declaration type="long" name="result" />
    <scope />
    <scope />
    <scope>
      <scope />
      <scope />
    </scope>
    <scope />
    <scope />
    <comment>Reduce stack depth for larger values of n</comment>
  </method>
  <javadoc>
    <text>Exact direct multiplication implementation to test against</text>
  </javadoc>
  <method type="long" name="factorial">
    <declaration type="long" name="result" />
    <scope />
  </method>
  <method type="void" name="testAddAndCheckLongFailure">
    <scope />
    <scope />
    <comment>success</comment>
  </method>
  <method type="void" name="testMulAndCheckLongFailure">
    <scope />
    <scope />
    <comment>success</comment>
  </method>
  <method type="void" name="testSubAndCheckLongFailure">
    <scope />
    <scope />
    <comment>success</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
