<?xml version="1.0" encoding="UTF-8"?>
<class name="BrentOptimizerTest">
  <javadoc>
    <version>$Id$</version>
  </javadoc>
  <method type="void" name="testSinMin">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="UnivariateOptimizer" name="optimizer" />
    <scope />
    <scope />
    <comment>expected</comment>
  </method>
  <method type="void" name="testSinMinWithValueChecker">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="ConvergenceChecker&lt;UnivariatePointValuePair&gt;" name="checker" />
    <declaration type="UnivariateOptimizer" name="optimizer" />
    <declaration type="UnivariatePointValuePair" name="result" />
    <comment>The default stopping criterion of Brent's algorithm should not</comment>
    <comment>pass, but the search will stop at the given relative tolerance</comment>
    <comment>for the function value.</comment>
  </method>
  <method type="void" name="testBoundaries">
    <declaration type="double" name="lower" />
    <declaration type="double" name="upper" />
    <declaration type="UnivariateFunction" name="f" />
    <method type="double" name="value">
      <scope />
      <scope />
      <scope />
    </method>
    <declaration type="UnivariateOptimizer" name="optimizer" />
  </method>
  <method type="void" name="testQuinticMin">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="UnivariateOptimizer" name="optimizer" />
    <comment>The function has local minima at -0.27195613 and 0.82221643.</comment>
    <comment>search in a large interval</comment>
  </method>
  <method type="void" name="testQuinticMinStatistics">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="UnivariateOptimizer" name="optimizer" />
    <declaration type="DescriptiveStatistics[]" name="stat" />
    <scope />
    <declaration type="double" name="min" />
    <declaration type="double" name="max" />
    <declaration type="int" name="nSamples" />
    <declaration type="double" name="delta" />
    <scope>
      <declaration type="double" name="start" />
    </scope>
    <declaration type="double" name="meanOptValue" />
    <declaration type="double" name="medianEval" />
    <comment>The function has local minima at -0.27195613 and 0.82221643.</comment>
  </method>
  <method type="void" name="testQuinticMax">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="UnivariateOptimizer" name="optimizer" />
    <scope />
    <scope />
    <comment>The quintic function has zeros at 0, +-0.5 and +-1.</comment>
    <comment>The function has a local maximum at 0.27195613.</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testMinEndpoints">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="UnivariateOptimizer" name="optimizer" />
    <declaration type="double" name="result" />
    <comment>endpoint is minimum</comment>
  </method>
  <method type="void" name="testMath832">
    <declaration type="UnivariateFunction" name="f" />
    <method type="double" name="value">
      <declaration type="double" name="sqrtX" />
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
      <declaration type="double" name="c" />
    </method>
    <declaration type="UnivariateOptimizer" name="optimizer" />
    <declaration type="double" name="result" />
  </method>
  <javadoc>
    <text>Contrived example showing that prior to the resolution of MATH-855
 * (second revision), the algorithm would not return the best point if
 * it happened to be the initial guess.</text>
  </javadoc>
  <method type="void" name="testKeepInitIfBest">
    <declaration type="double" name="minSin" />
    <declaration type="double" name="offset" />
    <declaration type="double" name="delta" />
    <declaration type="UnivariateFunction" name="f1" />
    <declaration type="UnivariateFunction[]" name="f2" />
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="double" name="relTol" />
    <declaration type="UnivariateOptimizer" name="optimizer" />
    <declaration type="double" name="init" />
    <declaration type="UnivariatePointValuePair" name="result" />
    <declaration type="int" name="numEval" />
    <declaration type="double" name="sol" />
    <declaration type="double" name="expected" />
    <comment>A slightly less stringent tolerance would make the test pass</comment>
    <comment>even with the previous implementation.</comment>
    <comment>System.out.println("numEval=" + numEval);</comment>
    <comment>System.out.println("min=" + init + " f=" + f.value(init));</comment>
    <comment>System.out.println("sol=" + sol + " f=" + f.value(sol));</comment>
    <comment>System.out.println("exp=" + expected + " f=" + f.value(expected));</comment>
  </method>
  <javadoc>
    <text>Contrived example showing that prior to the resolution of MATH-855,
 * the algorithm, by always returning the last evaluated point, would
 * sometimes not report the best point it had found.</text>
  </javadoc>
  <method type="void" name="testMath855">
    <declaration type="double" name="minSin" />
    <declaration type="double" name="offset" />
    <declaration type="double" name="delta" />
    <declaration type="UnivariateFunction" name="f1" />
    <declaration type="UnivariateFunction[]" name="f2" />
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="UnivariateOptimizer" name="optimizer" />
    <declaration type="UnivariatePointValuePair" name="result" />
    <declaration type="int" name="numEval" />
    <declaration type="double" name="sol" />
    <declaration type="double" name="expected" />
    <comment>System.out.println("min=" + (minSin + offset) + " f=" + f.value(minSin + offset));</comment>
    <comment>System.out.println("sol=" + sol + " f=" + f.value(sol));</comment>
    <comment>System.out.println("exp=" + expected + " f=" + f.value(expected));</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
