<?xml version="1.0" encoding="UTF-8"?>
<class name="SparseRealMatrixTest">
  <javadoc>
    <text>Test cases for the {@link OpenMapRealMatrix} class.</text>
    <version>$Id: SparseRealMatrixTest.java 1364668 2012-07-23 15:07:39Z erans $</version>
  </javadoc>
  <declaration type="double[][]" name="id" />
  <declaration type="double[][]" name="testData" />
  <declaration type="double[][]" name="testDataLU" />
  <declaration type="double[][]" name="testDataPlus2" />
  <declaration type="double[][]" name="testDataMinus" />
  <declaration type="double[]" name="testDataRow1" />
  <declaration type="double[]" name="testDataCol3" />
  <declaration type="double[][]" name="testDataInv" />
  <declaration type="double[]" name="preMultTest" />
  <declaration type="double[][]" name="testData2" />
  <declaration type="double[][]" name="testData2T" />
  <declaration type="double[][]" name="testDataPlusInv" />
  <declaration type="double[][]" name="luData" />
  <declaration type="double[][]" name="luDataLUDecomposition" />
  <declaration type="double[][]" name="singular" />
  <declaration type="double[][]" name="bigSingular" />
  <declaration type="double[][]" name="detData" />
  <declaration type="double[][]" name="detData2" />
  <declaration type="double[]" name="testVector" />
  <declaration type="double[]" name="testVector2" />
  <declaration type="double[][]" name="subTestData" />
  <declaration type="double[][]" name="subRows02Cols13" />
  <declaration type="double[][]" name="subRows03Cols12" />
  <declaration type="double[][]" name="subRows03Cols123" />
  <declaration type="double[][]" name="subRows20Cols123" />
  <declaration type="double[][]" name="subRows31Cols31" />
  <declaration type="double[][]" name="subRows01Cols23" />
  <declaration type="double[][]" name="subRows23Cols00" />
  <declaration type="double[][]" name="subRows00Cols33" />
  <declaration type="double[][]" name="subRow0" />
  <declaration type="double[][]" name="subRow3" />
  <declaration type="double[][]" name="subColumn1" />
  <declaration type="double[][]" name="subColumn3" />
  <declaration type="double" name="entryTolerance" />
  <declaration type="double" name="normTolerance" />
  <javadoc>
    <text>test dimensions</text>
  </javadoc>
  <method type="void" name="testDimensions">
    <declaration type="OpenMapRealMatrix" name="m" />
    <declaration type="OpenMapRealMatrix" name="m2" />
  </method>
  <javadoc>
    <text>test copy functions</text>
  </javadoc>
  <method type="void" name="testCopyFunctions">
    <declaration type="OpenMapRealMatrix" name="m1" />
    <declaration type="RealMatrix" name="m2" />
    <declaration type="OpenMapRealMatrix" name="m3" />
    <declaration type="RealMatrix" name="m4" />
  </method>
  <javadoc>
    <text>test add</text>
  </javadoc>
  <method type="void" name="testAdd">
    <declaration type="OpenMapRealMatrix" name="m" />
    <declaration type="OpenMapRealMatrix" name="mInv" />
    <declaration type="OpenMapRealMatrix" name="mDataPlusInv" />
    <declaration type="RealMatrix" name="mPlusMInv" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>test add failure</text>
  </javadoc>
  <method type="void" name="testAddFail">
    <declaration type="OpenMapRealMatrix" name="m" />
    <declaration type="OpenMapRealMatrix" name="m2" />
    <scope />
    <scope />
    <comment>ignored</comment>
  </method>
  <javadoc>
    <text>test norm</text>
  </javadoc>
  <method type="void" name="testNorm">
    <declaration type="OpenMapRealMatrix" name="m" />
    <declaration type="OpenMapRealMatrix" name="m2" />
  </method>
  <javadoc>
    <text>test m-n = m + -n</text>
  </javadoc>
  <method type="void" name="testPlusMinus">
    <declaration type="OpenMapRealMatrix" name="m" />
    <declaration type="OpenMapRealMatrix" name="n" />
    <scope />
    <scope />
    <comment>ignored</comment>
  </method>
  <javadoc>
    <text>test multiply</text>
  </javadoc>
  <method type="void" name="testMultiply">
    <declaration type="OpenMapRealMatrix" name="m" />
    <declaration type="OpenMapRealMatrix" name="mInv" />
    <declaration type="OpenMapRealMatrix" name="identity" />
    <declaration type="OpenMapRealMatrix" name="m2" />
    <scope />
    <scope />
    <comment>ignored</comment>
  </method>
  <declaration type="double[][]" name="d3" />
  <declaration type="double[][]" name="d4" />
  <declaration type="double[][]" name="d5" />
  <method type="void" name="testMultiply2">
    <declaration type="RealMatrix" name="m3" />
    <declaration type="RealMatrix" name="m4" />
    <declaration type="RealMatrix" name="m5" />
  </method>
  <javadoc>
    <text>test trace</text>
  </javadoc>
  <method type="void" name="testTrace">
    <declaration type="RealMatrix" name="m" />
    <scope />
    <scope />
    <comment>ignored</comment>
  </method>
  <javadoc>
    <text>test sclarAdd</text>
  </javadoc>
  <method type="void" name="testScalarAdd">
    <declaration type="RealMatrix" name="m" />
  </method>
  <javadoc>
    <text>test operate</text>
  </javadoc>
  <method type="void" name="testOperate">
    <declaration type="RealMatrix" name="m" />
    <scope />
    <scope />
    <comment>ignored</comment>
  </method>
  <javadoc>
    <text>test issue MATH-209</text>
  </javadoc>
  <method type="void" name="testMath209">
    <declaration type="RealMatrix[]" name="a" />
    <declaration type="double[][]" name="b" />
  </method>
  <javadoc>
    <text>test transpose</text>
  </javadoc>
  <method type="void" name="testTranspose">
    <declaration type="RealMatrix" name="m" />
    <declaration type="RealMatrix" name="mIT" />
    <declaration type="RealMatrix" name="mTI" />
    <declaration type="RealMatrix" name="mt" />
  </method>
  <javadoc>
    <text>test preMultiply by vector</text>
  </javadoc>
  <method type="void" name="testPremultiplyVector">
    <declaration type="RealMatrix" name="m" />
    <scope />
    <scope />
    <comment>ignored</comment>
  </method>
  <method type="void" name="testPremultiply">
    <declaration type="RealMatrix" name="m3" />
    <declaration type="RealMatrix" name="m4" />
    <declaration type="RealMatrix" name="m5" />
    <declaration type="OpenMapRealMatrix" name="m" />
    <declaration type="OpenMapRealMatrix" name="mInv" />
    <declaration type="OpenMapRealMatrix" name="identity" />
    <scope />
    <scope />
    <comment>ignored</comment>
  </method>
  <method type="void" name="testGetVectors">
    <declaration type="RealMatrix" name="m" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>ignored</comment>
    <comment>ignored</comment>
  </method>
  <method type="void" name="testGetEntry">
    <declaration type="RealMatrix" name="m" />
    <scope />
    <scope />
    <comment>expected</comment>
  </method>
  <javadoc>
    <text>test examples in user guide</text>
  </javadoc>
  <method type="void" name="testExamples">
    <declaration type="double[][]" name="matrixData" />
    <declaration type="RealMatrix" name="m" />
    <declaration type="double[][]" name="matrixData2" />
    <declaration type="RealMatrix" name="n" />
    <declaration type="RealMatrix" name="p" />
    <declaration type="RealMatrix" name="pInverse" />
    <declaration type="double[][]" name="coefficientsData" />
    <declaration type="RealMatrix" name="coefficients" />
    <declaration type="RealVector[]" name="constants" />
    <declaration type="RealVector" name="solution" />
    <declaration type="double" name="cst0" />
    <declaration type="double" name="cst1" />
    <declaration type="double" name="cst2" />
    <declaration type="double" name="sol0" />
    <declaration type="double" name="sol1" />
    <declaration type="double" name="sol2" />
    <comment>Create a real matrix with two rows and three columns</comment>
    <comment>One more with three rows, two columns</comment>
    <comment>Now multiply m by n</comment>
    <comment>Invert p</comment>
    <comment>Solve example</comment>
  </method>
  <method type="void" name="testSubMatrix">
    <declaration type="RealMatrix" name="m" />
    <declaration type="RealMatrix" name="mRows23Cols00" />
    <declaration type="RealMatrix" name="mRows00Cols33" />
    <declaration type="RealMatrix" name="mRows01Cols23" />
    <declaration type="RealMatrix" name="mRows02Cols13" />
    <declaration type="RealMatrix" name="mRows03Cols12" />
    <declaration type="RealMatrix" name="mRows03Cols123" />
    <declaration type="RealMatrix" name="mRows20Cols123" />
    <declaration type="RealMatrix" name="mRows31Cols31" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
    <comment>expected</comment>
    <comment>expected</comment>
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testGetRowMatrix">
    <declaration type="RealMatrix" name="m" />
    <declaration type="RealMatrix" name="mRow0" />
    <declaration type="RealMatrix" name="mRow3" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testGetColumnMatrix">
    <declaration type="RealMatrix" name="m" />
    <declaration type="RealMatrix" name="mColumn1" />
    <declaration type="RealMatrix" name="mColumn3" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testGetRowVector">
    <declaration type="RealMatrix" name="m" />
    <declaration type="RealVector" name="mRow0" />
    <declaration type="RealVector" name="mRow3" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testGetColumnVector">
    <declaration type="RealMatrix" name="m" />
    <declaration type="RealVector" name="mColumn1" />
    <declaration type="RealVector" name="mColumn3" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <method type="RealVector" name="columnToVector">
    <declaration type="double[]" name="data" />
    <scope />
  </method>
  <method type="void" name="testEqualsAndHashCode">
    <declaration type="OpenMapRealMatrix" name="m" />
    <declaration type="OpenMapRealMatrix" name="m1" />
    <declaration type="OpenMapRealMatrix" name="mt" />
  </method>
  <method type="void" name="testToString">
    <declaration type="OpenMapRealMatrix" name="m" />
  </method>
  <method type="void" name="testSetSubMatrix">
    <declaration type="OpenMapRealMatrix" name="m" />
    <declaration type="RealMatrix[]" name="expected" />
    <declaration type="OpenMapRealMatrix[]" name="matrix" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>javadoc example</comment>
    <comment>dimension overflow</comment>
    <comment>expected</comment>
    <comment>dimension underflow</comment>
    <comment>expected</comment>
    <comment>expected</comment>
    <comment>null</comment>
    <comment>expected</comment>
    <comment>expected</comment>
    <comment>ragged</comment>
    <comment>expected</comment>
    <comment>empty</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testSerial">
    <declaration type="OpenMapRealMatrix" name="m" />
  </method>
  <javadoc>
    <text>verifies that two matrices are close (1-norm)</text>
  </javadoc>
  <method type="void" name="assertClose" />
  <javadoc>
    <text>verifies that two vectors are close (sup norm)</text>
  </javadoc>
  <method type="void" name="assertClose">
    <scope />
    <scope />
  </method>
  <method type="OpenMapRealMatrix" name="createSparseMatrix">
    <declaration type="OpenMapRealMatrix" name="matrix" />
    <scope>
      <scope />
    </scope>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>3 x 3 identity matrix</comment>
  <comment>Test data for group operations</comment>
  <comment>lu decomposition tests</comment>
  <comment>singular matrices</comment>
  <comment>4th</comment>
  <comment>row</comment>
  <comment>=</comment>
  <comment>1st</comment>
  <comment>+</comment>
  <comment>2nd</comment>
  <comment>vectors</comment>
  <comment>submatrix accessor tests</comment>
  <comment>array selections</comment>
  <comment>effective permutations</comment>
  <comment>contiguous ranges</comment>
  <comment>row matrices</comment>
  <comment>column matrices</comment>
  <comment>tolerances</comment>
  <comment>Additional Test for Array2DRowRealMatrixTest.testMultiply</comment>
  <comment>test submatrix accessors</comment>
  <comment>--------------- -----------------Protected methods</comment>
</class>
