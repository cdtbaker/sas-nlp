<?xml version="1.0" encoding="UTF-8"?>
<class name="PrecisionTest">
  <javadoc>
    <text>Test cases for the {@link Precision} class.</text>
    <version>$Id$</version>
  </javadoc>
  <method type="void" name="testEqualsWithRelativeTolerance">
    <declaration type="double" name="eps" />
  </method>
  <method type="void" name="testEqualsIncludingNaN">
    <declaration type="double[]" name="testArray" />
    <scope>
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testEqualsWithAllowedDelta" />
  <method type="void" name="testMath475">
    <declaration type="double" name="a" />
    <declaration type="double" name="b" />
    <declaration type="double" name="diff" />
    <declaration type="double" name="c" />
    <comment>Because they are adjacent floating point numbers, "a" and "b" are</comment>
    <comment>considered equal even though the allowed error is smaller than</comment>
    <comment>their difference.</comment>
    <comment>Because "a" and "c" are not adjacent, the tolerance is taken into</comment>
    <comment>account for assessing equality.</comment>
  </method>
  <method type="void" name="testEqualsIncludingNaNWithAllowedDelta" />
  <method type="void" name="testFloatEqualsWithAllowedUlps">
    <declaration type="float" name="oneFloat" />
    <comment>These tests need adjusting for floating point precision</comment>
    <comment>Assert.assertTrue(Precision.equals(153.0f, 153.00000000000003f, 1));</comment>
    <comment>Assert.assertFalse(Precision.equals(153.0f, 153.00000000000006f, 1));</comment>
    <comment>Assert.assertTrue(Precision.equals(153.0f, 152.99999999999997f, 1));</comment>
    <comment>Assert.assertFalse(Precision.equals(153f, 152.99999999999994f, 1));</comment>
    <comment />
    <comment>Assert.assertTrue(Precision.equals(-128.0f, -127.99999999999999f, 1));</comment>
    <comment>Assert.assertFalse(Precision.equals(-128.0f, -127.99999999999997f, 1));</comment>
    <comment>Assert.assertTrue(Precision.equals(-128.0f, -128.00000000000003f, 1));</comment>
    <comment>Assert.assertFalse(Precision.equals(-128.0f, -128.00000000000006f, 1));</comment>
  </method>
  <method type="void" name="testEqualsWithAllowedUlps">
    <declaration type="double" name="nUp1" />
    <declaration type="double" name="nnUp1" />
  </method>
  <method type="void" name="testEqualsIncludingNaNWithAllowedUlps">
    <declaration type="double" name="nUp1" />
    <declaration type="double" name="nnUp1" />
  </method>
  <method type="void" name="testCompareToEpsilon" />
  <method type="void" name="testCompareToMaxUlps">
    <declaration type="double" name="a" />
    <declaration type="double" name="delta" />
    <scope>
      <scope />
      <scope />
    </scope>
  </method>
  <method type="void" name="testRoundDouble">
    <declaration type="double" name="x" />
    <declaration type="double" name="xx" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>JIRA MATH-151</comment>
    <comment>BZ 35904</comment>
    <comment>expected</comment>
    <comment>expected</comment>
    <comment>MATH-151</comment>
    <comment>special values</comment>
  </method>
  <method type="void" name="testRoundFloat">
    <declaration type="float" name="x" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>BZ 35904</comment>
    <comment>success</comment>
    <comment>success</comment>
    <comment>special values</comment>
  </method>
  <method type="void" name="testIssue721" />
  <method type="void" name="testRepresentableDelta">
    <declaration type="int" name="nonRepresentableCount" />
    <declaration type="double" name="x" />
    <declaration type="int" name="numTrials" />
    <scope>
      <declaration type="double" name="originalDelta" />
      <declaration type="double" name="delta" />
      <scope />
    </scope>
  </method>
  <method type="void" name="testMath843">
    <declaration type="double" name="afterEpsilon" />
    <comment>a) 1 + EPSILON is equal to 1.</comment>
    <comment>b) 1 + "the number after EPSILON" is not equal to 1.</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements. See the NOTICE file distributed with this
 work for additional information regarding copyright ownership. The ASF
 licenses this file to You under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http:www.apache.orglicensesLICENSE-2.0 Unless required by applicable law
 or agreed to in writing, software distributed under the License is
 distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the specific language
 governing permissions and limitations under the License.</comment>
  <comment>Tests for floating point equality</comment>
</class>
