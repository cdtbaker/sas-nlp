<?xml version="1.0" encoding="UTF-8"?>
<class name="MatrixUtilsTest">
  <javadoc>
    <text>Test cases for the {@link MatrixUtils} class.</text>
    <version>$Id: MatrixUtilsTest.java 1403587 2012-10-30 00:21:20Z erans $</version>
  </javadoc>
  <declaration type="double[][]" name="testData" />
  <declaration type="double[][]" name="nullMatrix" />
  <declaration type="double[]" name="row" />
  <declaration type="BigDecimal[]" name="bigRow" />
  <declaration type="String[]" name="stringRow" />
  <declaration type="Fraction[]" name="fractionRow" />
  <declaration type="double[][]" name="rowMatrix" />
  <declaration type="BigDecimal[][]" name="bigRowMatrix" />
  <declaration type="String[][]" name="stringRowMatrix" />
  <declaration type="Fraction[][]" name="fractionRowMatrix" />
  <declaration type="double[]" name="col" />
  <declaration type="BigDecimal[]" name="bigCol" />
  <declaration type="String[]" name="stringCol" />
  <declaration type="Fraction[]" name="fractionCol" />
  <declaration type="double[]" name="nullDoubleArray" />
  <declaration type="double[][]" name="colMatrix" />
  <declaration type="BigDecimal[][]" name="bigColMatrix" />
  <declaration type="String[][]" name="stringColMatrix" />
  <declaration type="Fraction[][]" name="fractionColMatrix" />
  <method type="void" name="testCreateRealMatrix">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>ragged</comment>
    <comment>expected</comment>
    <comment>no columns</comment>
    <comment>expected</comment>
    <comment>null</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testcreateFieldMatrix">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>ragged</comment>
    <comment>expected</comment>
    <comment>no columns</comment>
    <comment>expected</comment>
    <comment>null</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testCreateRowRealMatrix">
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>empty</comment>
    <comment>expected</comment>
    <comment>null</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testCreateRowFieldMatrix">
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>empty</comment>
    <comment>expected</comment>
    <comment>null</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testCreateColumnRealMatrix">
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>empty</comment>
    <comment>expected</comment>
    <comment>null</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testCreateColumnFieldMatrix">
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>empty</comment>
    <comment>expected</comment>
    <comment>null</comment>
    <comment>expected</comment>
  </method>
  <javadoc>
    <text>Verifies that the matrix is an identity matrix</text>
  </javadoc>
  <method type="void" name="checkIdentityMatrix">
    <scope>
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testCreateIdentityMatrix">
    <scope />
    <scope />
    <comment>expected</comment>
  </method>
  <javadoc>
    <text>Verifies that the matrix is an identity matrix</text>
  </javadoc>
  <method type="void" name="checkIdentityFieldMatrix">
    <scope>
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="testcreateFieldIdentityMatrix">
    <scope />
    <scope />
    <comment>expected</comment>
  </method>
  <method type="void" name="testBigFractionConverter">
    <declaration type="BigFraction[][]" name="bfData" />
    <declaration type="FieldMatrix&lt;BigFraction&gt;" name="m" />
    <declaration type="RealMatrix" name="converted" />
    <declaration type="RealMatrix" name="reference" />
  </method>
  <method type="void" name="testFractionConverter">
    <declaration type="Fraction[][]" name="fData" />
    <declaration type="FieldMatrix&lt;Fraction&gt;" name="m" />
    <declaration type="RealMatrix" name="converted" />
    <declaration type="RealMatrix" name="reference" />
  </method>
  <method type="Fraction[][]" name="asFraction">
    <declaration type="Fraction[]" name="d" />
    <scope>
      <scope>
        <declaration type="double[]" name="dataI" />
        <declaration type="Fraction[]" name="dI" />
        <scope />
      </scope>
    </scope>
    <scope />
  </method>
  <method type="Fraction[]" name="asFraction">
    <declaration type="Fraction[]" name="d" />
    <scope>
      <scope />
    </scope>
    <scope />
  </method>
  <method type="void" name="testSolveLowerTriangularSystem">
    <declaration type="RealMatrix[]" name="rm" />
    <declaration type="RealVector[]" name="b" />
  </method>
  <method type="void" name="testSolveUpperTriangularSystem">
    <declaration type="RealMatrix[]" name="rm" />
    <declaration type="RealVector[]" name="b" />
  </method>
  <javadoc>
    <text>This test should probably be replaced by one that could show
 * whether this algorithm can sometimes perform better (precision- or
 * performance-wise) than the direct inversion of the whole matrix.</text>
  </javadoc>
  <method type="void" name="testBlockInverse">
    <declaration type="double[][]" name="data" />
    <declaration type="RealMatrix" name="m" />
    <declaration type="int" name="len" />
    <declaration type="double" name="tol" />
    <scope>
      <declaration type="RealMatrix" name="mInv" />
      <declaration type="RealMatrix" name="id" />
      <scope>
        <scope>
          <declaration type="double" name="entry" />
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>Check that we recovered the identity matrix.</comment>
  </method>
  <method type="void" name="testIsSymmetric">
    <declaration type="double" name="eps" />
    <declaration type="double[][]" name="dataSym" />
    <declaration type="double[][]" name="dataNonSym" />
  </method>
  <method type="void" name="testIsSymmetricTolerance">
    <declaration type="double" name="eps" />
    <declaration type="double[][]" name="dataSym1" />
    <declaration type="double[][]" name="dataSym2" />
    <declaration type="double[][]" name="dataNonSym1" />
    <declaration type="double[][]" name="dataNonSym2" />
  </method>
  <method type="void" name="testCheckSymmetric1">
    <declaration type="double[][]" name="dataSym" />
  </method>
  <method type="void" name="testCheckSymmetric2">
    <declaration type="double[][]" name="dataNonSym" />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>Taken from R manual http:stat.ethz.chR-manualR-patchedlibrarybasehtmlbacksolve.html</comment>
</class>
