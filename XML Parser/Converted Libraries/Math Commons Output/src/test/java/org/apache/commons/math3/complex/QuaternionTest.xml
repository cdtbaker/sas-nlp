<?xml version="1.0" encoding="UTF-8"?>
<class name="QuaternionTest">
  <javadoc>
    <text>Epsilon for double comparison.</text>
  </javadoc>
  <declaration type="double" name="EPS" />
  <javadoc>
    <text>Epsilon for double comparison.</text>
  </javadoc>
  <declaration type="double" name="COMPARISON_EPS" />
  <method type="void" name="testAccessors1">
    <declaration type="double" name="q0" />
    <declaration type="double" name="q1" />
    <declaration type="double" name="q2" />
    <declaration type="double" name="q3" />
    <declaration type="Quaternion" name="q" />
  </method>
  <method type="void" name="testAccessors2">
    <declaration type="double" name="q0" />
    <declaration type="double" name="q1" />
    <declaration type="double" name="q2" />
    <declaration type="double" name="q3" />
    <declaration type="Quaternion" name="q" />
    <declaration type="double" name="sP" />
    <declaration type="double[]" name="vP" />
  </method>
  <method type="void" name="testAccessors3">
    <declaration type="double" name="q0" />
    <declaration type="double" name="q1" />
    <declaration type="double" name="q2" />
    <declaration type="double" name="q3" />
    <declaration type="Quaternion[]" name="q" />
    <declaration type="double" name="sP" />
    <declaration type="double[]" name="vP" />
  </method>
  <method type="void" name="testWrongDimension" />
  <method type="void" name="testConjugate">
    <declaration type="double" name="q0" />
    <declaration type="double" name="q1" />
    <declaration type="double" name="q2" />
    <declaration type="double" name="q3" />
    <declaration type="Quaternion" name="q" />
    <declaration type="Quaternion" name="qConjugate" />
  </method>
  <method type="void" name="testProductQuaternionQuaternion">
    <declaration type="Quaternion" name="qA" />
    <declaration type="Quaternion" name="qB" />
    <declaration type="Quaternion" name="qResult" />
    <declaration type="Vector3D" name="vectorA" />
    <declaration type="Vector3D" name="vectorB" />
    <declaration type="Vector3D" name="vectorResult" />
    <declaration type="double" name="scalarPartRef" />
    <declaration type="Vector3D" name="vectorPartRef" />
    <declaration type="double" name="norm" />
    <declaration type="Quaternion" name="conjugateOfProduct" />
    <declaration type="Quaternion" name="productOfConjugate" />
    <comment>Case : analytic test case</comment>
    <comment>comparison with the result given by the formula :</comment>
    <comment>qResult = (scalarA * scalarB - vectorA . vectorB) + (scalarA * vectorB + scalarB * vectorA + vectorA ^</comment>
    <comment>vectorB)</comment>
    <comment>Conjugate of the product of two quaternions and product of their conjugates :</comment>
    <comment>Conj(qA * qB) = Conj(qB) * Conj(qA)</comment>
  </method>
  <method type="void" name="testProductQuaternionVector">
    <declaration type="Quaternion" name="quaternion" />
    <declaration type="double[]" name="vector" />
    <declaration type="Quaternion" name="qResultQxV" />
    <declaration type="double[]" name="vectorQ" />
    <declaration type="double[]" name="vectorResultQxV" />
    <declaration type="double" name="scalarPartRefQxV" />
    <declaration type="Vector3D" name="vectorPartRefQxV" />
    <declaration type="double" name="normQxV" />
    <declaration type="Quaternion" name="qResultVxQ" />
    <declaration type="double[]" name="vectorResultVxQ" />
    <declaration type="double" name="scalarPartRefVxQ" />
    <declaration type="Vector3D" name="vectorPartRefVxQ" />
    <declaration type="double" name="normVxQ" />
    <comment>Case : Product between a vector and a quaternion : QxV</comment>
    <comment>comparison with the result given by the formula :</comment>
    <comment>qResult = (- vectorQ . vector) + (scalarQ * vector + vectorQ ^ vector)</comment>
    <comment>Case : Product between a vector and a quaternion : VxQ</comment>
    <comment>comparison with the result given by the formula :</comment>
    <comment>qResult = (- vector . vectorQ) + (scalarQ * vector + vector ^ vectorQ)</comment>
  </method>
  <method type="void" name="testDotProductQuaternionQuaternion">
    <declaration type="double" name="expected" />
    <declaration type="Quaternion" name="q1" />
    <declaration type="Quaternion" name="q2" />
    <declaration type="double" name="actual1" />
    <declaration type="double" name="actual2" />
    <comment>expected output</comment>
    <comment>inputs</comment>
  </method>
  <method type="void" name="testScalarMultiplyDouble">
    <declaration type="double" name="w" />
    <declaration type="double" name="x" />
    <declaration type="double" name="y" />
    <declaration type="double" name="z" />
    <declaration type="Quaternion" name="q1" />
    <declaration type="double" name="a" />
    <declaration type="Quaternion" name="q" />
    <comment>expected outputs</comment>
    <comment>inputs</comment>
  </method>
  <method type="void" name="testAddQuaternionQuaternion">
    <declaration type="double" name="w" />
    <declaration type="double" name="x" />
    <declaration type="double" name="y" />
    <declaration type="double" name="z" />
    <declaration type="Quaternion" name="q1" />
    <declaration type="Quaternion" name="q2" />
    <declaration type="Quaternion" name="qa" />
    <declaration type="Quaternion" name="qb" />
    <comment>expected outputs</comment>
    <comment>inputs</comment>
  </method>
  <method type="void" name="testSubtractQuaternionQuaternion">
    <declaration type="double" name="w" />
    <declaration type="double" name="x" />
    <declaration type="double" name="y" />
    <declaration type="double" name="z" />
    <declaration type="Quaternion" name="q1" />
    <declaration type="Quaternion" name="q2" />
    <declaration type="Quaternion" name="qa" />
    <declaration type="Quaternion" name="qb" />
    <comment>expected outputs</comment>
    <comment>inputs</comment>
  </method>
  <method type="void" name="testNorm">
    <declaration type="double" name="q0" />
    <declaration type="double" name="q1" />
    <declaration type="double" name="q2" />
    <declaration type="double" name="q3" />
    <declaration type="Quaternion" name="q" />
    <declaration type="double" name="norm" />
    <declaration type="double" name="normSquareRef" />
  </method>
  <method type="void" name="testNormalize">
    <declaration type="Quaternion" name="q" />
    <declaration type="Quaternion" name="versor" />
  </method>
  <method type="void" name="testNormalizeFail">
    <declaration type="Quaternion" name="zeroQ" />
  </method>
  <method type="void" name="testObjectEquals">
    <declaration type="double" name="one" />
    <declaration type="Quaternion" name="q1" />
    <declaration type="Quaternion" name="q2" />
    <declaration type="Quaternion" name="q3" />
  </method>
  <method type="void" name="testQuaternionEquals">
    <declaration type="double" name="inc" />
    <declaration type="Quaternion" name="q1" />
    <declaration type="Quaternion" name="q2" />
    <declaration type="Quaternion" name="q3" />
    <declaration type="Quaternion" name="q4" />
    <declaration type="Quaternion" name="q5" />
  </method>
  <method type="void" name="testQuaternionEquals2">
    <declaration type="Quaternion" name="q1" />
    <declaration type="double" name="gap" />
    <declaration type="Quaternion" name="q2" />
  </method>
  <method type="void" name="testIsUnitQuaternion">
    <declaration type="Random" name="r" />
    <declaration type="int" name="numberOfTrials" />
    <scope>
      <declaration type="Quaternion" name="q1" />
      <declaration type="Quaternion" name="q2" />
    </scope>
    <declaration type="Quaternion" name="q" />
  </method>
  <method type="void" name="testIsPureQuaternion">
    <declaration type="Quaternion" name="q1" />
    <declaration type="Quaternion" name="q2" />
    <declaration type="Quaternion" name="q3" />
    <declaration type="Random" name="r" />
    <declaration type="double[]" name="v" />
    <declaration type="Quaternion" name="q4" />
    <declaration type="Quaternion" name="q5" />
  </method>
  <method type="void" name="testPolarForm">
    <declaration type="Random" name="r" />
    <declaration type="int" name="numberOfTrials" />
    <scope>
      <declaration type="Quaternion" name="q" />
      <declaration type="Quaternion" name="qP" />
      <declaration type="Rotation" name="rot" />
      <declaration type="Rotation" name="rotP" />
    </scope>
  </method>
  <method type="void" name="testGetInverse">
    <declaration type="Quaternion" name="q" />
    <declaration type="Quaternion" name="inverseQ" />
    <declaration type="Quaternion" name="product" />
    <declaration type="Quaternion" name="qNul" />
    <scope>
      <declaration type="Quaternion" name="inverseQNul" />
    </scope>
    <scope />
    <comment>expected</comment>
  </method>
  <method type="void" name="testToString">
    <declaration type="Quaternion" name="q" />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
