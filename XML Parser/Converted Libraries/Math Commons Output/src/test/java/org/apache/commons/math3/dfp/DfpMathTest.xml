<?xml version="1.0" encoding="UTF-8"?>
<class name="DfpMathTest">
  <declaration type="DfpField" name="factory" />
  <declaration type="Dfp" name="pinf" />
  <declaration type="Dfp" name="ninf" />
  <declaration type="Dfp" name="nan" />
  <declaration type="Dfp" name="qnan" />
  <method type="void" name="setUp">
    <declaration type="Dfp" name="pi" />
    <comment>Some basic setup.  Define some constants and clear the status flags</comment>
    <comment>force loading of dfpmath</comment>
  </method>
  <method type="void" name="tearDown" />
  <method type="void" name="test">
    <declaration type="boolean" name="b" />
    <comment>NaNs involved</comment>
    <comment>distinguish +/- zero</comment>
  </method>
  <method type="void" name="testPow">
    <comment>Test special cases  exponent of zero</comment>
    <comment>exponent of one</comment>
    <comment>exponent of NaN</comment>
    <comment>radix of NaN</comment>
    <comment>(x &gt; 1) ^ pinf = pinf,    (x &lt; -1) ^ pinf = pinf</comment>
    <comment>(x &gt; 1) ^ ninf = +0,    (x &lt; -1) ^ ninf = +0</comment>
    <comment>(-1 &lt; x &lt; 1) ^ pinf = 0</comment>
    <comment>(-1 &lt; x &lt; 1) ^ ninf = pinf</comment>
    <comment>+/- 1  ^ +/-inf  = NaN</comment>
    <comment>+0  ^ +anything except 0, NAN  = +0</comment>
    <comment>-0  ^ +anything except 0, NAN, odd integer  = +0</comment>
    <comment>+0  ^ -anything except 0, NAN  = +INF</comment>
    <comment>-0  ^ -anything except 0, NAN, odd integer  = +INF</comment>
    <comment>-0  ^ -odd integer   =  -INF</comment>
    <comment>-0  ^ +odd integer   =  -0</comment>
    <comment>pinf  ^ +anything   = pinf</comment>
    <comment>pinf  ^ -anything   = +0</comment>
    <comment>ninf  ^ anything   = -0 ^ -anything</comment>
    <comment>ninf  ^ -anything except 0, NAN, odd integer  = +0</comment>
    <comment>ninf  ^ +anything except 0, NAN, odd integer  = +INF</comment>
    <comment>ninf  ^ +odd integer   =  -INF</comment>
    <comment>ninf  ^ -odd integer   =  -0</comment>
    <comment>-anything ^ integer</comment>
    <comment>-anything ^ noninteger = NaN</comment>
    <comment>Some fractional cases.</comment>
  </method>
  <method type="void" name="testSin">
    <comment>pi/4</comment>
    <comment>-pi/4</comment>
    <comment>-pi/4</comment>
    <comment>off by one ULP</comment>
    <comment>off by one ULP</comment>
    <comment>off by one ULP</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>Generic test function.  Takes params x and y and tests them for</comment>
  <comment>equality.  Then checks the status flags against the flags argument.</comment>
  <comment>If the test fail, it prints the desc string</comment>
</class>
