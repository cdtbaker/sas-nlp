<?xml version="1.0" encoding="UTF-8"?>
<class name="TestUtils">
  <javadoc>
    <version>$Id: TestUtils.java 1363575 2012-07-19 23:02:47Z erans $</version>
  </javadoc>
  <javadoc>
    <text>Collection of static methods used in math unit tests.</text>
  </javadoc>
  <method type="constructor" name="TestUtils" />
  <javadoc>
    <text>Verifies that expected and actual are within delta, or are both NaN or
 * infinities of the same sign.</text>
  </javadoc>
  <method type="void" name="assertEquals" />
  <javadoc>
    <text>Verifies that expected and actual are within delta, or are both NaN or
 * infinities of the same sign.</text>
  </javadoc>
  <method type="void" name="assertEquals">
    <scope />
    <scope />
    <comment>check for NaN</comment>
  </method>
  <javadoc>
    <text>Verifies that the two arguments are exactly the same, either
 * both NaN or infinities of same sign, or identical floating point values.</text>
  </javadoc>
  <method type="void" name="assertSame" />
  <javadoc>
    <text>Verifies that real and imaginary parts of the two complex arguments
 * are exactly the same.  Also ensures that NaN / infinite components match.</text>
  </javadoc>
  <method type="void" name="assertSame" />
  <javadoc>
    <text>Verifies that real and imaginary parts of the two complex arguments
 * differ by at most delta.  Also ensures that NaN / infinite components match.</text>
  </javadoc>
  <method type="void" name="assertEquals" />
  <javadoc>
    <text>Verifies that two double arrays have equal entries, up to tolerance</text>
  </javadoc>
  <method type="void" name="assertEquals" />
  <javadoc>
    <text>Serializes an object to a bytes array and then recovers the object from the bytes array.
 * Returns the deserialized object.</text>
    <param>o  object to serialize and recover</param>
    <return>the recovered, deserialized object</return>
  </javadoc>
  <method type="Object" name="serializeAndRecover">
    <scope>
      <declaration type="ByteArrayOutputStream" name="bos" />
      <declaration type="ObjectOutputStream" name="so" />
      <declaration type="ByteArrayInputStream" name="bis" />
      <declaration type="ObjectInputStream" name="si" />
    </scope>
    <scope />
    <scope />
    <comment>serialize the Object</comment>
    <comment>deserialize the Object</comment>
  </method>
  <javadoc>
    <text>Verifies that serialization preserves equals and hashCode.
 * Serializes the object, then recovers it and checks equals and hash code.</text>
    <param>object  the object to serialize and recover</param>
  </javadoc>
  <method type="void" name="checkSerializedEquality">
    <declaration type="Object" name="object2" />
  </method>
  <javadoc>
    <text>Verifies that the relative error in actual vs. expected is less than or
 * equal to relativeError.  If expected is infinite or NaN, actual must be
 * the same (NaN or infinity of the same sign).</text>
    <param>expected expected value</param>
    <param>actual  observed value</param>
    <param>relativeError  maximum allowable relative error</param>
  </javadoc>
  <method type="void" name="assertRelativelyEquals" />
  <javadoc>
    <text>Verifies that the relative error in actual vs. expected is less than or
 * equal to relativeError.  If expected is infinite or NaN, actual must be
 * the same (NaN or infinity of the same sign).</text>
    <param>msg  message to return with failure</param>
    <param>expected expected value</param>
    <param>actual  observed value</param>
    <param>relativeError  maximum allowable relative error</param>
  </javadoc>
  <method type="void" name="assertRelativelyEquals">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope>
      <declaration type="double" name="absError" />
    </scope>
  </method>
  <javadoc>
    <text>Fails iff values does not contain a number within epsilon of z.</text>
    <param>msg  message to return with failure</param>
    <param>values complex array to search</param>
    <param>z  value sought</param>
    <param>epsilon  tolerance</param>
  </javadoc>
  <method type="void" name="assertContains">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Fails iff values does not contain a number within epsilon of z.</text>
    <param>values complex array to search</param>
    <param>z  value sought</param>
    <param>epsilon  tolerance</param>
  </javadoc>
  <method type="void" name="assertContains" />
  <javadoc>
    <text>Fails iff values does not contain a number within epsilon of x.</text>
    <param>msg  message to return with failure</param>
    <param>values double array to search</param>
    <param>x value sought</param>
    <param>epsilon  tolerance</param>
  </javadoc>
  <method type="void" name="assertContains">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Fails iff values does not contain a number within epsilon of x.</text>
    <param>values double array to search</param>
    <param>x value sought</param>
    <param>epsilon  tolerance</param>
  </javadoc>
  <method type="void" name="assertContains" />
  <javadoc>
    <text>Asserts that all entries of the specified vectors are equal to within a
 * positive {@code delta}.</text>
    <param>message the identifying message for the assertion error (can be{@code null})</param>
    <param>expected expected value</param>
    <param>actual actual value</param>
    <param>delta the maximum difference between the entries of the expected
 * and actual vectors for which both entries are still considered equal</param>
  </javadoc>
  <method type="void" name="assertEquals">
    <declaration type="String" name="msgAndSep" />
    <scope />
  </method>
  <javadoc>
    <text>Asserts that all entries of the specified vectors are equal to within a
 * positive {@code delta}.</text>
    <param>message the identifying message for the assertion error (can be{@code null})</param>
    <param>expected expected value</param>
    <param>actual actual value</param>
    <param>delta the maximum difference between the entries of the expected
 * and actual vectors for which both entries are still considered equal</param>
  </javadoc>
  <method type="void" name="assertEquals">
    <declaration type="String" name="msgAndSep" />
    <declaration type="int" name="dim" />
    <scope />
  </method>
  <javadoc>
    <text>verifies that two matrices are close (1-norm)</text>
  </javadoc>
  <method type="void" name="assertEquals">
    <scope>
      <declaration type="StringBuilder" name="messageBuffer" />
    </scope>
    <declaration type="RealMatrix" name="delta" />
    <scope>
      <declaration type="StringBuilder" name="messageBuffer" />
    </scope>
  </method>
  <javadoc>
    <text>verifies that two matrices are equal</text>
  </javadoc>
  <method type="void" name="assertEquals">
    <scope>
      <declaration type="StringBuilder" name="messageBuffer" />
    </scope>
    <scope>
      <scope>
        <declaration type="FieldElement&lt;?&gt;" name="eij" />
        <declaration type="FieldElement&lt;?&gt;" name="oij" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>verifies that two arrays are close (sup norm)</text>
  </javadoc>
  <method type="void" name="assertEquals">
    <declaration type="StringBuilder" name="out" />
    <scope />
    <declaration type="boolean" name="failure" />
    <scope>
      <scope />
    </scope>
    <scope />
  </method>
  <javadoc>
    <text>verifies that two arrays are equal</text>
  </javadoc>
  <method type="void" name="assertEquals">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Computes the sum of squared deviations of &lt;values&gt; from &lt;target&gt;</text>
    <param>values array of deviates</param>
    <param>target value to compute deviations from</param>
    <return>sum of squared deviations</return>
  </javadoc>
  <method type="double" name="sumSquareDev">
    <declaration type="double" name="sumsq" />
    <scope>
      <declaration type="double" name="dev" />
    </scope>
  </method>
  <javadoc>
    <text>Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test
 * statistics if the null hypothesis can be rejected with confidence 100 * (1 - alpha)%</text>
    <param>valueLabels labels for the values of the discrete distribution under test</param>
    <param>expected expected counts</param>
    <param>observed observed counts</param>
    <param>alpha significance level of the test</param>
  </javadoc>
  <method type="void" name="assertChiSquareAccept">
    <declaration type="ChiSquareTest" name="chiSquareTest" />
    <scope>
      <declaration type="StringBuilder" name="msgBuffer" />
      <declaration type="DecimalFormat" name="df" />
      <scope />
    </scope>
    <comment>Fail if we can reject null hypothesis that distributions are the same</comment>
  </method>
  <javadoc>
    <text>Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test
 * statistics if the null hypothesis can be rejected with confidence 100 * (1 - alpha)%</text>
    <param>values integer values whose observed and expected counts are being compared</param>
    <param>expected expected counts</param>
    <param>observed observed counts</param>
    <param>alpha significance level of the test</param>
  </javadoc>
  <method type="void" name="assertChiSquareAccept">
    <declaration type="String[]" name="labels" />
    <scope />
  </method>
  <javadoc>
    <text>Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test
 * statistics if the null hypothesis can be rejected with confidence 100 * (1 - alpha)%</text>
    <param>expected expected counts</param>
    <param>observed observed counts</param>
    <param>alpha significance level of the test</param>
  </javadoc>
  <method type="void" name="assertChiSquareAccept">
    <declaration type="String[]" name="labels" />
    <scope />
  </method>
  <javadoc>
    <text>Computes the 25th, 50th and 75th percentiles of the given distribution and returns
 * these values in an array.</text>
  </javadoc>
  <method type="double[]" name="getDistributionQuartiles">
    <declaration type="double[]" name="quantiles" />
  </method>
  <javadoc>
    <text>Updates observed counts of values in quartiles.
 * counts[0] &lt;-&gt; 1st quartile ... counts[3] &lt;-&gt; top quartile</text>
  </javadoc>
  <method type="void" name="updateCounts">
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Eliminates points with zero mass from densityPoints and densityValues parallel
 * arrays.  Returns the number of positive mass points and collapses the arrays so
 * that the first &lt;returned value&gt; elements of the input arrays represent the positive
 * mass points.</text>
  </javadoc>
  <method type="int" name="eliminateZeroMassPoints">
    <declaration type="int" name="positiveMassCount" />
    <scope>
      <scope />
    </scope>
    <scope>
      <declaration type="int[]" name="newPoints" />
      <declaration type="double[]" name="newValues" />
      <declaration type="int" name="j" />
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
