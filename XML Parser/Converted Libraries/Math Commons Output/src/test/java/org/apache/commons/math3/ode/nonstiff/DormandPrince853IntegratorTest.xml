<?xml version="1.0" encoding="UTF-8"?>
<class name="DormandPrince853IntegratorTest">
  <method type="void" name="testMissedEndEvent">
    <declaration type="double" name="t0" />
    <declaration type="double" name="tEvent" />
    <declaration type="double[]" name="k" />
    <declaration type="FirstOrderDifferentialEquations[]" name="ode" />
    <method type="int" name="getDimension" />
    <method type="void" name="computeDerivatives">
      <scope />
    </method>
    <declaration type="DormandPrince853Integrator" name="integrator" />
    <declaration type="double[]" name="y0" />
    <scope />
    <declaration type="double[]" name="y" />
    <declaration type="double" name="finalT" />
    <scope />
    <method type="void" name="init" />
    <method type="void" name="resetState" />
    <method type="double" name="g" />
    <method type="Action" name="eventOccurred" />
    <scope />
  </method>
  <method type="void" name="testDimensionCheck">
    <declaration type="TestProblem1" name="pb" />
    <declaration type="DormandPrince853Integrator" name="integrator" />
  </method>
  <method type="void" name="testNullIntervalCheck">
    <declaration type="TestProblem1" name="pb" />
    <declaration type="DormandPrince853Integrator" name="integrator" />
  </method>
  <method type="void" name="testMinStep">
    <declaration type="TestProblem1" name="pb" />
    <declaration type="double" name="minStep" />
    <declaration type="double" name="maxStep" />
    <declaration type="double[]" name="vecAbsoluteTolerance" />
    <declaration type="double[]" name="vecRelativeTolerance" />
    <declaration type="FirstOrderIntegrator" name="integ" />
    <declaration type="TestProblemHandler" name="handler" />
  </method>
  <method type="void" name="testIncreasingTolerance">
    <declaration type="int" name="previousCalls" />
    <declaration type="AdaptiveStepsizeIntegrator" name="integ" />
    <scope>
      <declaration type="TestProblem1" name="pb" />
      <declaration type="double" name="minStep" />
      <declaration type="double" name="maxStep" />
      <declaration type="double" name="scalAbsoluteTolerance" />
      <declaration type="double" name="scalRelativeTolerance" />
      <declaration type="TestProblemHandler" name="handler" />
      <declaration type="int" name="calls" />
    </scope>
    <comment>the 1.3 factor is only valid for this test</comment>
    <comment>and has been obtained from trial and error</comment>
    <comment>there is no general relation between local and global errors</comment>
  </method>
  <method type="void" name="testTooLargeFirstStep">
    <declaration type="AdaptiveStepsizeIntegrator" name="integ" />
    <declaration type="double" name="start" />
    <declaration type="double" name="end" />
    <declaration type="FirstOrderDifferentialEquations[]" name="equations" />
    <method type="int" name="getDimension" />
    <method type="void" name="computeDerivatives" />
  </method>
  <method type="void" name="testBackward">
    <declaration type="TestProblem5" name="pb" />
    <declaration type="double" name="minStep" />
    <declaration type="double" name="maxStep" />
    <declaration type="double" name="scalAbsoluteTolerance" />
    <declaration type="double" name="scalRelativeTolerance" />
    <declaration type="FirstOrderIntegrator" name="integ" />
    <declaration type="TestProblemHandler" name="handler" />
  </method>
  <method type="void" name="testEvents">
    <declaration type="TestProblem4" name="pb" />
    <declaration type="double" name="minStep" />
    <declaration type="double" name="maxStep" />
    <declaration type="double" name="scalAbsoluteTolerance" />
    <declaration type="double" name="scalRelativeTolerance" />
    <declaration type="FirstOrderIntegrator" name="integ" />
    <declaration type="TestProblemHandler" name="handler" />
    <declaration type="EventHandler[]" name="functions" />
    <declaration type="double" name="convergence" />
    <scope />
  </method>
  <method type="void" name="testKepler">
    <declaration type="TestProblem3" name="pb" />
    <declaration type="double" name="minStep" />
    <declaration type="double" name="maxStep" />
    <declaration type="double" name="scalAbsoluteTolerance" />
    <declaration type="double" name="scalRelativeTolerance" />
    <declaration type="FirstOrderIntegrator" name="integ" />
  </method>
  <method type="void" name="testVariableSteps">
    <declaration type="TestProblem3" name="pb" />
    <declaration type="double" name="minStep" />
    <declaration type="double" name="maxStep" />
    <declaration type="double" name="scalAbsoluteTolerance" />
    <declaration type="double" name="scalRelativeTolerance" />
    <declaration type="FirstOrderIntegrator" name="integ" />
    <declaration type="double" name="stopTime" />
  </method>
  <method type="void" name="testUnstableDerivative">
    <declaration type="StepProblem" name="stepProblem" />
    <declaration type="FirstOrderIntegrator" name="integ" />
    <declaration type="double[]" name="y" />
  </method>
  <method type="void" name="testEventsScheduling">
    <declaration type="FirstOrderDifferentialEquations[]" name="sincos" />
    <method type="int" name="getDimension" />
    <method type="void" name="computeDerivatives" />
    <declaration type="SchedulingChecker" name="sinChecker" />
    <declaration type="SchedulingChecker" name="cosChecker" />
    <declaration type="FirstOrderIntegrator" name="integ" />
    <declaration type="double" name="t0" />
    <declaration type="double[][]" name="y0" />
    <declaration type="double" name="t" />
    <declaration type="double[]" name="y" />
    <comment>events at 0, PI, 2PI ...</comment>
    <comment>events at PI/2, 3PI/2, 5PI/2 ...</comment>
  </method>
  <declaration type="int" name="index" />
  <declaration type="double" name="tMin" />
  <method type="constructor" name="SchedulingChecker" />
  <method type="void" name="init" />
  <method type="void" name="handleStep" />
  <method type="double" name="g">
    <comment>once a step has been handled by handleStep,</comment>
    <comment>events checking should only refer to dates after the step</comment>
  </method>
  <method type="Action" name="eventOccurred" />
  <method type="void" name="resetState">
    <comment>in fact, we don't need to reset anything for the test</comment>
  </method>
  <method type="constructor" name="KeplerHandler" />
  <method type="void" name="init" />
  <method type="void" name="handleStep">
    <scope>
      <declaration type="double" name="prev" />
      <declaration type="double" name="curr" />
      <declaration type="double" name="interp" />
      <declaration type="double[]" name="interpolatedY" />
      <declaration type="double[]" name="theoreticalY" />
      <declaration type="double" name="dx" />
      <declaration type="double" name="dy" />
      <declaration type="double" name="error" />
      <scope />
    </scope>
    <scope />
  </method>
  <declaration type="int" name="nbSteps" />
  <declaration type="double" name="maxError" />
  <declaration type="TestProblem3" name="pb" />
  <method type="constructor" name="VariableHandler" />
  <method type="void" name="init" />
  <method type="void" name="handleStep">
    <declaration type="double" name="step" />
    <scope />
    <scope>
      <scope />
      <scope />
    </scope>
    <scope />
  </method>
  <declaration type="boolean" name="firstTime" />
  <declaration type="double" name="minStep" />
  <declaration type="double" name="maxStep" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
