<?xml version="1.0" encoding="UTF-8"?>
<class name="RealTransformerAbstractTest">
  <javadoc>
    <text>Abstract test for classes implementing the {@link RealTransformer} interface.
 * This abstract test handles the automatic generation of random data of various
 * sizes. For each generated data array, actual values (returned by the
 * transformer to be tested) are compared to expected values, returned by the{@link #transform(double[],TransformType)} (to be implemented by the user:
 * a naive method may be used). Methods are also provided to test that invalid
 * parameters throw the expected exceptions.</text>
    <since>3.0</since>
    <version>$Id: RealTransformerAbstractTest.java 1244375 2012-02-15 06:30:05Z celestin $</version>
  </javadoc>
  <javadoc>
    <text>The common seed of all random number generators used in this test.</text>
  </javadoc>
  <declaration type="long" name="SEED" />
  <method name="createRealTransformer" type="RealTransformer" />
  <javadoc>
    <text>Returns a new instance of the {@link RealTransformer} to be tested.</text>
    <return>a the transformer to be tested</return>
  </javadoc>
  <method name="getInvalidDataSize" type="int" />
  <javadoc>
    <text>Returns an invalid data size. Transforms with this data size should
 * trigger a {@link MathIllegalArgumentException}.</text>
    <param>i the index of the invalid data size ({@code 0 &lt;= i &lt;}{@link #getNumberOfInvalidDataSizes()}</param>
    <return>an invalid data size</return>
  </javadoc>
  <method name="getNumberOfInvalidDataSizes" type="int" />
  <javadoc>
    <text>Returns the total number of invalid data sizes to be tested. If data
 * array of any
 * size can be handled by the {@link RealTransformer} to be tested, this
 * method should return {@code 0}.</text>
    <return>the total number of invalid data sizes</return>
  </javadoc>
  <method name="getNumberOfValidDataSizes" type="int" />
  <javadoc>
    <text>Returns the total number of valid data sizes to be tested.</text>
    <return>the total number of valid data sizes</return>
  </javadoc>
  <method name="getRelativeTolerance" type="double" />
  <javadoc>
    <text>Returns the expected relative accuracy for data arrays of size{@code getValidDataSize(i)}.</text>
    <param>i the index of the valid data size</param>
    <return>the expected relative accuracy</return>
  </javadoc>
  <method name="getValidDataSize" type="int" />
  <javadoc>
    <text>Returns a valid data size. This method allows for data arrays of various
 * sizes to be automatically tested (by allowing multiple values of the
 * specified index).</text>
    <param>i the index of the valid data size ({@code 0 &lt;= i &lt;}{@link #getNumberOfValidDataSizes()}</param>
    <return>a valid data size</return>
  </javadoc>
  <method name="getValidFunction" type="UnivariateFunction" />
  <javadoc>
    <text>Returns a function for the accuracy check of{@link RealTransformer#transform(UnivariateFunction,double,double,int)}and{@link RealTransformer#inverseTransform(UnivariateFunction,double,double,int)}.
 * This function should be valid. In other words, none of the above methods
 * should throw an exception when passed this function.</text>
    <return>a valid function</return>
  </javadoc>
  <method name="getValidLowerBound" type="double" />
  <javadoc>
    <text>Returns a sampling lower bound for the accuracy check of{@link RealTransformer#transform(UnivariateFunction,double,double,int)}and{@link RealTransformer#inverseTransform(UnivariateFunction,double,double,int)}.
 * This lower bound should be valid. In other words, none of the above
 * methods should throw an exception when passed this bound.</text>
    <return>a valid lower bound</return>
  </javadoc>
  <method name="getValidUpperBound" type="double" />
  <javadoc>
    <text>Returns a sampling upper bound for the accuracy check of{@link RealTransformer#transform(UnivariateFunction,double,double,int)}and{@link RealTransformer#inverseTransform(UnivariateFunction,double,double,int)}.
 * This upper bound should be valid. In other words, none of the above
 * methods should throw an exception when passed this bound.</text>
    <return>a valid bound</return>
  </javadoc>
  <method name="transform" type="double[]" />
  <javadoc>
    <text>Returns the expected transform of the specified real data array.</text>
    <param>x the real data array to be transformed</param>
    <param>type the type of transform (forward, inverse) to be performed</param>
    <return>the expected transform</return>
  </javadoc>
  <javadoc>
    <text>{@link RealTransformer#transform(double[],TransformType)} should throw a{@link MathIllegalArgumentException} if data size is invalid.</text>
  </javadoc>
  <method type="void" name="testTransformRealInvalidDataSize">
    <declaration type="TransformType[]" name="type" />
    <declaration type="RealTransformer" name="transformer" />
    <scope>
      <declaration type="int" name="n" />
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>Expected: do nothing</comment>
  </method>
  <javadoc>
    <text>{@link RealTransformer#transform(UnivariateFunction,double,double,int,TransformType)}should throw a {@link MathIllegalArgumentException} if number of samples
 * is invalid.</text>
  </javadoc>
  <method type="void" name="testTransformFunctionInvalidDataSize">
    <declaration type="TransformType[]" name="type" />
    <declaration type="RealTransformer" name="transformer" />
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="double" name="a" />
    <declaration type="double" name="b" />
    <scope>
      <declaration type="int" name="n" />
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>Expected: do nothing</comment>
  </method>
  <javadoc>
    <text>{@link RealTransformer#transform(UnivariateFunction,double,double,int,TransformType)}should throw a {@link NotStrictlyPositiveException} if number of samples
 * is not strictly positive.</text>
  </javadoc>
  <method type="void" name="testTransformFunctionNotStrictlyPositiveNumberOfSamples">
    <declaration type="TransformType[]" name="type" />
    <declaration type="RealTransformer" name="transformer" />
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="double" name="a" />
    <declaration type="double" name="b" />
    <scope>
      <declaration type="int" name="n" />
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>Expected: do nothing</comment>
  </method>
  <javadoc>
    <text>{@link RealTransformer#transform(UnivariateFunction,double,double,int,TransformType)}should throw a {@link NumberIsTooLargeException} if sampling bounds are
 * not correctly ordered.</text>
  </javadoc>
  <method type="void" name="testTransformFunctionInvalidBounds">
    <declaration type="TransformType[]" name="type" />
    <declaration type="RealTransformer" name="transformer" />
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="double" name="a" />
    <declaration type="double" name="b" />
    <scope>
      <declaration type="int" name="n" />
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>Expected: do nothing</comment>
  </method>
  <javadoc>
    <text>Accuracy check of {@link RealTransformer#transform(double[],TransformType)}.
 * For each valid data size returned by{@link #getValidDataSize(int) getValidDataSize(i)},
 * a random data array is generated with{@link #createRealData(int) createRealData(i)}. The actual
 * transform is computed and compared to the expected transform, return by{@link #transform(double[],TransformType)}. Actual and expected values
 * should be equal to within the relative error returned by{@link #getRelativeTolerance(int) getRelativeTolerance(i)}.</text>
  </javadoc>
  <method type="void" name="testTransformReal">
    <declaration type="TransformType[]" name="type" />
    <scope>
      <declaration type="int" name="n" />
      <declaration type="double" name="tol" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Accuracy check of{@link RealTransformer#transform(UnivariateFunction,double,double,int,TransformType)}.
 * For each valid data size returned by{@link #getValidDataSize(int) getValidDataSize(i)},
 * the {@link UnivariateFunction} returned by {@link #getValidFunction()} is
 * sampled. The actual transform is computed and compared to the expected
 * transform, return by {@link #transform(double[],TransformType)}. Actual
 * and expected values should be equal to within the relative error returned
 * by {@link #getRelativeTolerance(int) getRelativeTolerance(i)}.</text>
  </javadoc>
  <method type="void" name="testTransformFunction">
    <declaration type="TransformType[]" name="type" />
    <scope>
      <declaration type="int" name="n" />
      <declaration type="double" name="tol" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns a random array of doubles. Random generator always uses the same
 * seed.</text>
    <param>n the size of the array to be returned</param>
    <return>a random array of specified size</return>
  </javadoc>
  <method type="double[]" name="createRealData">
    <declaration type="Random" name="random" />
    <declaration type="double[]" name="data" />
    <scope />
  </method>
  <method type="void" name="doTestTransformReal">
    <declaration type="RealTransformer" name="transformer" />
    <declaration type="double[]" name="x" />
    <declaration type="double[]" name="expected" />
    <declaration type="double[]" name="actual" />
    <scope>
      <declaration type="String" name="msg" />
      <declaration type="double" name="delta" />
    </scope>
  </method>
  <method type="void" name="doTestTransformFunction">
    <declaration type="RealTransformer" name="transformer" />
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="double" name="a" />
    <declaration type="double" name="b" />
    <declaration type="double[]" name="x" />
    <scope>
      <declaration type="double" name="t" />
    </scope>
    <declaration type="double[]" name="expected" />
    <declaration type="double[]" name="actual" />
    <scope>
      <declaration type="String" name="msg" />
      <declaration type="double" name="delta" />
    </scope>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>Check of preconditions.</comment>
  <comment>Accuracy tests of transform of valid data.</comment>
  <comment>Utility methods.</comment>
  <comment>The tests per se.</comment>
</class>
