<?xml version="1.0" encoding="UTF-8"?>
<class name="OverlappingEventsTest">
  <javadoc>
    <text>Tests for overlapping state events. Also tests an event function that does
 * not converge to zero, but does have values of opposite sign around its root.</text>
  </javadoc>
  <javadoc>
    <text>Expected event times for first event.</text>
  </javadoc>
  <declaration type="double[]" name="EVENT_TIMES1" />
  <javadoc>
    <text>Expected event times for second event.</text>
  </javadoc>
  <declaration type="double[]" name="EVENT_TIMES2" />
  <javadoc>
    <text>Test for events that occur at the exact same time, but due to numerical
 * calculations occur very close together instead. Uses event type 0. See{@link org.apache.commons.math3.ode.events.EventHandler#g(double,double[])EventHandler.g(double, double[])}.</text>
  </javadoc>
  <method type="void" name="testOverlappingEvents0" />
  <javadoc>
    <text>Test for events that occur at the exact same time, but due to numerical
 * calculations occur very close together instead. Uses event type 1. See{@link org.apache.commons.math3.ode.events.EventHandler#g(double,double[])EventHandler.g(double, double[])}.</text>
  </javadoc>
  <method type="void" name="testOverlappingEvents1" />
  <javadoc>
    <text>Test for events that occur at the exact same time, but due to numerical
 * calculations occur very close together instead.</text>
    <param>eventType the type of events to use. See{@link org.apache.commons.math3.ode.events.EventHandler#g(double,double[])EventHandler.g(double, double[])}.</param>
  </javadoc>
  <method type="void" name="test">
    <declaration type="double" name="e" />
    <declaration type="FirstOrderIntegrator" name="integrator" />
    <declaration type="BaseSecantSolver" name="rootSolver" />
    <declaration type="EventHandler" name="evt1" />
    <declaration type="EventHandler" name="evt2" />
    <declaration type="double" name="t" />
    <declaration type="double" name="tEnd" />
    <declaration type="double[]" name="y" />
    <declaration type="List&lt;Double&gt;" name="events1" />
    <declaration type="List&lt;Double&gt;" name="events2" />
    <scope>
      <scope />
      <scope />
    </scope>
    <scope />
    <scope />
    <comment>System.out.println("t=" + t + ",\t\ty=[" + y[0] + "," + y[1] + "]");</comment>
    <comment>System.out.println("Event 1 @ t=" + t);</comment>
    <comment>System.out.println("Event 2 @ t=" + t);</comment>
    <comment>System.out.println();</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getDimension" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="computeDerivatives" />
  <javadoc>
    <text>State events for this unit test.</text>
  </javadoc>
  <javadoc>
    <text>The index of the continuous variable to use.</text>
  </javadoc>
  <declaration type="int" name="idx" />
  <javadoc>
    <text>The event type to use. See {@link #g}.</text>
  </javadoc>
  <declaration type="int" name="eventType" />
  <javadoc>
    <text>Constructor for the {@link Event} class.</text>
    <param>idx the index of the continuous variable to use</param>
    <param>eventType the type of event to use. See {@link #g}</param>
  </javadoc>
  <method type="constructor" name="Event" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="init" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="double" name="g" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="Action" name="eventOccurred" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="resetState">
    <comment>Never called.</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
