<?xml version="1.0" encoding="UTF-8"?>
<class name="StepNormalizerOutputTestBase">
  <javadoc>
    <text>Base class for step normalizer output tests.</text>
  </javadoc>
  <javadoc>
    <text>The normalized output time values.</text>
  </javadoc>
  <declaration type="List&lt;Double&gt;" name="output" />
  <method name="getStart" type="double" />
  <javadoc>
    <text>Returns the start time.</text>
    <return>the start time</return>
  </javadoc>
  <method name="getEnd" type="double" />
  <javadoc>
    <text>Returns the end time.</text>
    <return>the end time</return>
  </javadoc>
  <method name="getExpInc" type="double[]" />
  <javadoc>
    <text>Returns the expected normalized output time values for increment mode.</text>
    <return>the expected normalized output time values for increment mode</return>
  </javadoc>
  <method name="getExpIncRev" type="double[]" />
  <javadoc>
    <text>Returns the expected reversed normalized output time values for
 * increment mode.</text>
    <return>the expected reversed normalized output time values for
 * increment mode</return>
  </javadoc>
  <method name="getExpMul" type="double[]" />
  <javadoc>
    <text>Returns the expected normalized output time values for multiples mode.</text>
    <return>the expected normalized output time values for multiples mode</return>
  </javadoc>
  <method name="getExpMulRev" type="double[]" />
  <javadoc>
    <text>Returns the expected reversed normalized output time values for
 * multiples mode.</text>
    <return>the expected reversed normalized output time values for
 * multiples mode</return>
  </javadoc>
  <method name="getO" type="int[][]" />
  <javadoc>
    <text>Returns the offsets for the unit tests below, in the order they are
 * given below. For each test, the left and right offsets are returned.</text>
    <return>the offsets for the unit tests below, in the order they are
 * given below</return>
  </javadoc>
  <javadoc>
    <text>Get the array, given left and right offsets.</text>
    <param>a the input array</param>
    <param>offsetL the left side offset</param>
    <param>offsetR the right side offset</param>
    <return>the modified array</return>
  </javadoc>
  <method type="double[]" name="getArray">
    <declaration type="double[]" name="copy" />
  </method>
  <method type="void" name="testIncNeither">
    <declaration type="double[]" name="exp" />
  </method>
  <method type="void" name="testIncNeitherRev">
    <declaration type="double[]" name="exp" />
  </method>
  <method type="void" name="testIncFirst">
    <declaration type="double[]" name="exp" />
  </method>
  <method type="void" name="testIncFirstRev">
    <declaration type="double[]" name="exp" />
  </method>
  <method type="void" name="testIncLast">
    <declaration type="double[]" name="exp" />
  </method>
  <method type="void" name="testIncLastRev">
    <declaration type="double[]" name="exp" />
  </method>
  <method type="void" name="testIncBoth">
    <declaration type="double[]" name="exp" />
  </method>
  <method type="void" name="testIncBothRev">
    <declaration type="double[]" name="exp" />
  </method>
  <method type="void" name="testMulNeither">
    <declaration type="double[]" name="exp" />
  </method>
  <method type="void" name="testMulNeitherRev">
    <declaration type="double[]" name="exp" />
  </method>
  <method type="void" name="testMulFirst">
    <declaration type="double[]" name="exp" />
  </method>
  <method type="void" name="testMulFirstRev">
    <declaration type="double[]" name="exp" />
  </method>
  <method type="void" name="testMulLast">
    <declaration type="double[]" name="exp" />
  </method>
  <method type="void" name="testMulLastRev">
    <declaration type="double[]" name="exp" />
  </method>
  <method type="void" name="testMulBoth">
    <declaration type="double[]" name="exp" />
  </method>
  <method type="void" name="testMulBothRev">
    <declaration type="double[]" name="exp" />
  </method>
  <javadoc>
    <text>The actual step normalizer output test code, shared by all the unit
 * tests.</text>
    <param>mode the step normalizer mode to use</param>
    <param>bounds the step normalizer bounds setting to use</param>
    <param>expected the expected output (normalized time points)</param>
    <param>reverse whether to reverse the integration direction</param>
    <throws>NoBracketingException</throws>
    <throws>MaxCountExceededException</throws>
    <throws>NumberIsTooSmallException</throws>
    <throws>DimensionMismatchException</throws>
  </javadoc>
  <method type="void" name="doTest">
    <declaration type="FirstOrderIntegrator" name="integ" />
    <declaration type="double[]" name="y" />
    <declaration type="double" name="start" />
    <declaration type="double" name="end" />
    <declaration type="double[]" name="actual" />
    <scope />
    <comment>Forward test.</comment>
  </method>
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="int" name="getDimension" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="computeDerivatives" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="init" />
  <javadoc>
    <text>{@inheritDoc}</text>
  </javadoc>
  <method type="void" name="handleStep" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
