<?xml version="1.0" encoding="UTF-8"?>
<class name="EmpiricalDistributionTest">
  <javadoc>
    <text>Test cases for the EmpiricalDistribution class</text>
    <version>$Id: EmpiricalDistributionTest.java 1461172 2013-03-26 15:11:18Z luc $</version>
  </javadoc>
  <declaration type="EmpiricalDistribution" name="empiricalDistribution" />
  <declaration type="EmpiricalDistribution" name="empiricalDistribution2" />
  <declaration type="File" name="file" />
  <declaration type="URL" name="url" />
  <declaration type="double[]" name="dataArray" />
  <declaration type="int" name="n" />
  <method type="void" name="setUp">
    <declaration type="ArrayList&lt;Double&gt;" name="list" />
    <scope>
      <declaration type="BufferedReader" name="in" />
      <declaration type="String" name="str" />
      <scope />
    </scope>
    <scope />
    <declaration type="int" name="i" />
    <scope />
    <comment>empiricalDistribution = new EmpiricalDistribution(100, new RandomDataImpl());  XXX Deprecated API</comment>
    <comment>empiricalDistribution2 = new EmpiricalDistribution(100, new RandomDataImpl());  XXX Deprecated API</comment>
  </method>
  <javadoc>
    <text>Test EmpiricalDistrbution.load() using sample data file.&lt;br&gt;
 * Check that the sampleCount, mu and sigma match data in
 * the sample data file. Also verify that load is idempotent.</text>
  </javadoc>
  <method type="void" name="testLoad">
    <declaration type="File" name="file" />
    <comment>Load from a URL</comment>
    <comment>Load again from a file (also verifies idempotency of load)</comment>
  </method>
  <method type="void" name="checkDistribution">
    <comment>testData File has 10000 values, with mean ~ 5.0, std dev ~ 1</comment>
    <comment>Make sure that loaded distribution matches this</comment>
    <comment>TODO: replace with statistical tests</comment>
  </method>
  <javadoc>
    <text>Test EmpiricalDistrbution.load(double[]) using data taken from
 * sample data file.&lt;br&gt;
 * Check that the sampleCount, mu and sigma match data in
 * the sample data file.</text>
  </javadoc>
  <method type="void" name="testDoubleLoad">
    <declaration type="double[]" name="bounds" />
    <comment>testData File has 10000 values, with mean ~ 5.0, std dev ~ 1</comment>
    <comment>Make sure that loaded distribution matches this</comment>
    <comment>TODO: replace with statistical tests</comment>
  </method>
  <javadoc>
    <text>Generate 1000 random values and make sure they look OK.&lt;br&gt;
 * Note that there is a non-zero (but very small) probability that
 * these tests will fail even if the code is working as designed.</text>
  </javadoc>
  <method type="void" name="testNext" />
  <javadoc>
    <text>Make sure exception thrown if digest getNext is attempted
 * before loading empiricalDistribution.</text>
  </javadoc>
  <method type="void" name="testNexFail">
    <scope />
    <scope />
    <comment>expected</comment>
  </method>
  <javadoc>
    <text>Make sure we can handle a grid size that is too fine</text>
  </javadoc>
  <method type="void" name="testGridTooFine" />
  <javadoc>
    <text>How about too fat?</text>
  </javadoc>
  <method type="void" name="testGridTooFat">
    <comment>ridiculous tolerance; but ridiculous grid size</comment>
    <comment>really just checking to make sure we do not bomb</comment>
  </method>
  <javadoc>
    <text>Test bin index overflow problem (BZ 36450)</text>
  </javadoc>
  <method type="void" name="testBinIndexOverflow">
    <declaration type="double[][]" name="x" />
  </method>
  <method type="void" name="testSerialization">
    <declaration type="EmpiricalDistribution" name="dist" />
    <declaration type="EmpiricalDistribution" name="dist2" />
    <comment>Empty</comment>
    <comment>Loaded</comment>
  </method>
  <method type="void" name="testLoadNullDoubleArray" />
  <method type="void" name="testLoadNullURL" />
  <method type="void" name="testLoadNullFile" />
  <javadoc>
    <text>MATH-298</text>
  </javadoc>
  <method type="void" name="testGetBinUpperBounds">
    <declaration type="double[]" name="testData" />
    <declaration type="EmpiricalDistribution" name="dist" />
    <declaration type="double[]" name="expectedBinUpperBounds" />
    <declaration type="double[]" name="expectedGeneratorUpperBounds" />
    <declaration type="double" name="tol" />
  </method>
  <method type="void" name="testGeneratorConfig">
    <declaration type="double[]" name="testData" />
    <declaration type="RandomGenerator" name="generator" />
    <declaration type="EmpiricalDistribution" name="dist" />
    <scope />
    <comment>Verify no NPE with null generator argument</comment>
  </method>
  <method type="void" name="testReSeed">
    <declaration type="double[]" name="values" />
    <scope />
    <scope />
  </method>
  <method type="void" name="verifySame">
    <scope>
      <scope />
    </scope>
  </method>
  <method type="void" name="tstGen">
    <declaration type="SummaryStatistics" name="stats" />
    <scope />
  </method>
  <method type="void" name="tstDoubleGen">
    <declaration type="SummaryStatistics" name="stats" />
    <scope />
  </method>
  <method type="RealDistribution" name="makeDistribution">
    <declaration type="double[]" name="sourceData" />
    <scope />
    <declaration type="EmpiricalDistribution" name="dist" />
    <comment>Create a uniform distribution on [0, 10,000]</comment>
  </method>
  <javadoc>
    <text>Uniform bin mass = 10/10001 == mass of all but the first bin</text>
  </javadoc>
  <declaration type="double" name="binMass" />
  <javadoc>
    <text>Mass of first bin = 11/10001</text>
  </javadoc>
  <declaration type="double" name="firstBinMass" />
  <method type="double[]" name="makeCumulativeTestPoints">
    <declaration type="double[][]" name="testPoints" />
  </method>
  <method type="double[]" name="makeCumulativeTestValues">
    <declaration type="double[]" name="testPoints" />
    <declaration type="double[]" name="cumValues" />
    <declaration type="EmpiricalDistribution" name="empiricalDistribution" />
    <declaration type="double[]" name="binBounds" />
    <scope>
      <declaration type="int" name="bin" />
      <declaration type="double" name="lower" />
      <declaration type="double" name="upper" />
      <declaration type="double" name="bMinus" />
      <declaration type="RealDistribution" name="kernel" />
      <declaration type="double" name="withinBinKernelMass" />
      <declaration type="double" name="kernelCum" />
    </scope>
    <comment>Bins should be [0, 10], (10, 20], ..., (9990, 10000]
 Kernels should be N(4.5, 3.02765), N(14.5, 3.02765)...
 Each bin should have mass 1010000 = .001</comment>
    <comment>Compute bMinus = sum or mass of bins below the bin containing the point</comment>
    <comment>First bin has mass 11 / 10000, the rest have mass 10 / 10000.</comment>
  </method>
  <method type="double[]" name="makeDensityTestValues">
    <declaration type="double[]" name="testPoints" />
    <declaration type="double[]" name="densityValues" />
    <declaration type="EmpiricalDistribution" name="empiricalDistribution" />
    <declaration type="double[]" name="binBounds" />
    <scope>
      <declaration type="int" name="bin" />
      <declaration type="double" name="lower" />
      <declaration type="double" name="upper" />
      <declaration type="RealDistribution" name="kernel" />
      <declaration type="double" name="withinBinKernelMass" />
      <declaration type="double" name="density" />
    </scope>
  </method>
  <javadoc>
    <text>Modify test integration bounds from the default. Because the distribution
 * has discontinuities at bin boundaries, integrals spanning multiple bins
 * will face convergence problems.  Only test within-bin integrals and spans
 * across no more than 3 bin boundaries.</text>
  </javadoc>
  <method type="void" name="testDensityIntegrals">
    <declaration type="RealDistribution" name="distribution" />
    <declaration type="double" name="tol" />
    <declaration type="BaseAbstractUnivariateIntegrator" name="integrator" />
    <declaration type="UnivariateFunction" name="d" />
    <method type="double" name="value" />
    <declaration type="double[]" name="lower" />
    <declaration type="double[]" name="upper" />
    <scope />
    <comment>Triangle integrals are very slow to converge</comment>
  </method>
  <javadoc>
    <text>Find the bin that x belongs (relative to {@link #makeDistribution()}).</text>
  </javadoc>
  <method type="int" name="findBin">
    <declaration type="double" name="nMinus" />
    <declaration type="int" name="bin" />
    <comment>Number of bins below x should be trunc(x/10)</comment>
    <comment>If x falls on a bin boundary, it is in the lower bin</comment>
  </method>
  <javadoc>
    <text>Find the within-bin kernel for the bin with lower bound lower
 * and upper bound upper. All bins other than the first contain 10 points
 * exclusive of the lower bound and are centered at (lower + upper + 1) / 2.
 * The first bin includes its lower bound, 0, so has different mean and
 * standard deviation.</text>
  </javadoc>
  <method type="RealDistribution" name="findKernel">
    <scope />
    <scope />
  </method>
  <method type="void" name="testKernelOverrideConstant">
    <declaration type="EmpiricalDistribution" name="dist" />
    <declaration type="double[]" name="data" />
    <declaration type="double[]" name="values" />
    <scope />
    <declaration type="double" name="tol" />
    <comment>Bin masses concentrated on 2, 5, 8, 11, 14 &lt;- effectively discrete uniform distribution over these</comment>
  </method>
  <method type="void" name="testKernelOverrideUniform">
    <declaration type="EmpiricalDistribution" name="dist" />
    <declaration type="double[]" name="data" />
    <declaration type="double[]" name="bounds" />
    <declaration type="double" name="tol" />
    <scope>
      <declaration type="double" name="v" />
      <scope />
    </scope>
    <comment>Kernels are uniform distributions on [1,3], [4,6], [7,9], [10,12], [13,15]</comment>
    <comment>Make sure v is not in the excluded range between bins - that is (bounds[i], bounds[i] + 1)</comment>
  </method>
  <javadoc>
    <text>Empirical distribution using a constant smoothing kernel.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <method type="constructor" name="ConstantKernelEmpiricalDistribution" />
  <method type="RealDistribution" name="getKernel">
    <comment>Use constant distribution equal to bin mean within bin</comment>
  </method>
  <javadoc>
    <text>Empirical distribution using a uniform smoothing kernel.</text>
  </javadoc>
  <method type="constructor" name="UniformKernelEmpiricalDistribution" />
  <method type="RealDistribution" name="getKernel" />
  <javadoc>
    <text>Distribution that takes just one value.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Singleton value in the sample space</text>
  </javadoc>
  <declaration type="double" name="c" />
  <method type="constructor" name="ConstantDistribution" />
  <method type="double" name="density" />
  <method type="double" name="cumulativeProbability" />
  <method type="double" name="inverseCumulativeProbability">
    <scope />
  </method>
  <method type="double" name="getNumericalMean" />
  <method type="double" name="getNumericalVariance" />
  <method type="double" name="getSupportLowerBound" />
  <method type="double" name="getSupportUpperBound" />
  <method type="boolean" name="isSupportLowerBoundInclusive" />
  <method type="boolean" name="isSupportUpperBoundInclusive" />
  <method type="boolean" name="isSupportConnected" />
  <method type="double" name="sample" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>Setup for distribution tests</comment>
</class>
