<?xml version="1.0" encoding="UTF-8"?>
<class name="PowellOptimizerTest">
  <javadoc>
    <text>Test for {@link PowellOptimizer}.</text>
  </javadoc>
  <method type="void" name="testBoundsUnsupported">
    <declaration type="MultivariateFunction" name="func" />
    <declaration type="PowellOptimizer" name="optim" />
  </method>
  <method type="void" name="testSumSinc">
    <declaration type="MultivariateFunction" name="func" />
    <declaration type="int" name="dim" />
    <declaration type="double[]" name="minPoint" />
    <scope />
    <declaration type="double[]" name="init" />
    <scope />
    <scope />
    <comment>Initial is minimum.</comment>
    <comment>Initial is far from minimum.</comment>
    <comment>More stringent line search tolerance enhances the precision</comment>
    <comment>of the result.</comment>
  </method>
  <method type="void" name="testQuadratic">
    <declaration type="MultivariateFunction[]" name="func" />
    <method type="double" name="value">
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
    </method>
    <declaration type="int" name="dim" />
    <declaration type="double[]" name="minPoint" />
    <scope />
    <declaration type="double[]" name="init" />
    <scope />
    <scope />
    <comment>Initial is minimum.</comment>
    <comment>Initial is far from minimum.</comment>
  </method>
  <method type="void" name="testMaximizeQuadratic">
    <declaration type="MultivariateFunction[]" name="func" />
    <method type="double" name="value">
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
    </method>
    <declaration type="int" name="dim" />
    <declaration type="double[]" name="maxPoint" />
    <scope />
    <declaration type="double[]" name="init" />
    <scope />
    <scope />
    <comment>Initial is minimum.</comment>
    <comment>Initial is far from minimum.</comment>
  </method>
  <javadoc>
    <text>Ensure that we do not increase the number of function evaluations when
 * the function values are scaled up.
 * Note that the tolerances parameters passed to the constructor must
 * still hold sensible values because they are used to set the line search
 * tolerances.</text>
  </javadoc>
  <method type="void" name="testRelativeToleranceOnScaledValues">
    <declaration type="MultivariateFunction[]" name="func" />
    <method type="double" name="value">
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
    </method>
    <declaration type="int" name="dim" />
    <declaration type="double[]" name="minPoint" />
    <scope />
    <declaration type="double[]" name="init" />
    <scope />
    <declaration type="double" name="relTol" />
    <declaration type="int" name="maxEval" />
    <declaration type="PowellOptimizer" name="optim" />
    <declaration type="PointValuePair" name="funcResult" />
    <declaration type="double" name="funcValue" />
    <declaration type="int" name="funcEvaluations" />
    <declaration type="double" name="scale" />
    <declaration type="MultivariateFunction[]" name="funcScaled" />
    <method type="double" name="value" />
    <declaration type="PointValuePair" name="funcScaledResult" />
    <declaration type="double" name="funcScaledValue" />
    <declaration type="int" name="funcScaledEvaluations" />
    <comment>Initial is far from minimum.</comment>
    <comment>Very small absolute tolerance to rely solely on the relative</comment>
    <comment>tolerance as a stopping criterion</comment>
    <comment>Check that both minima provide the same objective funciton values,</comment>
    <comment>within the relative function tolerance.</comment>
    <comment>Check that the numbers of evaluations are the same.</comment>
  </method>
  <javadoc>
    <param>func Function to optimize.</param>
    <param>optimum Expected optimum.</param>
    <param>init Starting point.</param>
    <param>goal Minimization or maximization.</param>
    <param>fTol Tolerance (relative error on the objective function) for
 * "Powell" algorithm.</param>
    <param>pointTol Tolerance for checking that the optimum is correct.</param>
  </javadoc>
  <method type="void" name="doTest">
    <declaration type="PowellOptimizer" name="optim" />
    <declaration type="PointValuePair" name="result" />
    <declaration type="double[]" name="point" />
    <scope />
  </method>
  <javadoc>
    <param>func Function to optimize.</param>
    <param>optimum Expected optimum.</param>
    <param>init Starting point.</param>
    <param>goal Minimization or maximization.</param>
    <param>fTol Tolerance (relative error on the objective function) for
 * "Powell" algorithm.</param>
    <param>fLineTol Tolerance (relative error on the objective function)
 * for the internal line search algorithm.</param>
    <param>pointTol Tolerance for checking that the optimum is correct.</param>
  </javadoc>
  <method type="void" name="doTest">
    <declaration type="PowellOptimizer" name="optim" />
    <declaration type="PointValuePair" name="result" />
    <declaration type="double[]" name="point" />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
