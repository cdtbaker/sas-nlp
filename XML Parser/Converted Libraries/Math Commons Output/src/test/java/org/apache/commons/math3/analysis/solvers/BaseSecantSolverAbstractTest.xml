<?xml version="1.0" encoding="UTF-8"?>
<class name="BaseSecantSolverAbstractTest">
  <javadoc>
    <text>Base class for root-finding algorithms tests derived from{@link BaseSecantSolver}.</text>
    <version>$Id$</version>
  </javadoc>
  <method name="getSolver" type="UnivariateSolver" />
  <javadoc>
    <text>Returns the solver to use to perform the tests.</text>
    <return>the solver to use to perform the tests</return>
  </javadoc>
  <method name="getQuinticEvalCounts" type="int[]" />
  <javadoc>
    <text>Returns the expected number of evaluations for the{@link #testQuinticZero} unit test. A value of {@code -1} indicates that
 * the test should be skipped for that solver.</text>
    <return>the expected number of evaluations for the{@link #testQuinticZero} unit test</return>
  </javadoc>
  <method type="void" name="testSinZero">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="double" name="result" />
    <declaration type="UnivariateSolver" name="solver" />
    <comment>The sinus function is behaved well around the root at pi. The second</comment>
    <comment>order derivative is zero, which means linear approximating methods</comment>
    <comment>still converge quadratically.</comment>
    <comment>System.out.println(</comment>
    <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
    <comment>System.out.println(</comment>
    <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
  </method>
  <method type="void" name="testQuinticZero">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="double" name="result" />
    <declaration type="UnivariateSolver" name="solver" />
    <declaration type="double" name="atol" />
    <declaration type="int[]" name="counts" />
    <declaration type="double[][]" name="testsData" />
    <declaration type="int" name="maxIter" />
    <scope>
      <declaration type="double[]" name="testData" />
    </scope>
    <comment>The quintic function has zeros at 0, +-0.5 and +-1.</comment>
    <comment>Around the root of 0 the function is well behaved, with a second</comment>
    <comment>derivative of zero a 0.</comment>
    <comment>The other roots are less well to find, in particular the root at 1,</comment>
    <comment>because the function grows fast for x&gt;1.</comment>
    <comment>The function has extrema (first derivative is zero) at 0.27195613</comment>
    <comment>and 0.82221643, intervals containing these values are harder for</comment>
    <comment>the solvers.</comment>
    <comment>Tests data: initial bounds, and expected solution, per test case.</comment>
    <comment>Skip test, if needed.</comment>
    <comment>Compute solution.</comment>
    <comment>System.out.println(</comment>
    <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
    <comment>Check solution.</comment>
  </method>
  <method type="void" name="testRootEndpoints">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="UnivariateSolver" name="solver" />
    <declaration type="double" name="result" />
    <comment>End-point is root. This should be a special case in the solver, and</comment>
    <comment>the initial end-point should be returned exactly.</comment>
  </method>
  <method type="void" name="testBadEndpoints">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="UnivariateSolver" name="solver" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>bad interval</comment>
    <comment>expected</comment>
    <comment>no bracket</comment>
    <comment>expected</comment>
    <comment>no bracket</comment>
    <comment>expected</comment>
  </method>
  <method type="void" name="testSolutionLeftSide">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="UnivariateSolver" name="solver" />
    <declaration type="double" name="left" />
    <declaration type="double" name="right" />
    <scope>
      <declaration type="double" name="solution" />
      <scope />
    </scope>
    <comment>Test whether the allowed solutions are taken into account.</comment>
    <comment>Prepare for next test.</comment>
  </method>
  <method type="void" name="testSolutionRightSide">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="UnivariateSolver" name="solver" />
    <declaration type="double" name="left" />
    <declaration type="double" name="right" />
    <scope>
      <declaration type="double" name="solution" />
      <scope />
    </scope>
    <comment>Test whether the allowed solutions are taken into account.</comment>
    <comment>Prepare for next test.</comment>
  </method>
  <method type="void" name="testSolutionBelowSide">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="UnivariateSolver" name="solver" />
    <declaration type="double" name="left" />
    <declaration type="double" name="right" />
    <scope>
      <declaration type="double" name="solution" />
      <scope />
    </scope>
    <comment>Test whether the allowed solutions are taken into account.</comment>
    <comment>Prepare for next test.</comment>
  </method>
  <method type="void" name="testSolutionAboveSide">
    <declaration type="UnivariateFunction" name="f" />
    <declaration type="UnivariateSolver" name="solver" />
    <declaration type="double" name="left" />
    <declaration type="double" name="right" />
    <scope>
      <declaration type="double" name="solution" />
      <scope />
    </scope>
    <comment>Test whether the allowed solutions are taken into account.</comment>
    <comment>Prepare for next test.</comment>
  </method>
  <method type="double" name="getSolution">
    <scope>
      <declaration type="BracketedUnivariateSolver&lt;UnivariateFunction&gt;" name="bracketing" />
    </scope>
    <scope>
      <declaration type="double" name="baseRoot" />
      <scope />
      <declaration type="PegasusSolver" name="bracketing" />
    </scope>
    <comment>the solution slipped out of interval</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
