<?xml version="1.0" encoding="UTF-8"?>
<class name="KalmanFilterTest">
  <javadoc>
    <text>Tests for {@link KalmanFilter}.</text>
    <version>$Id$</version>
  </javadoc>
  <method type="void" name="testTransitionMeasurementMatrixMismatch">
    <declaration type="RealMatrix[]" name="A" />
    <declaration type="RealMatrix" name="B" />
    <declaration type="RealMatrix[]" name="H" />
    <declaration type="RealMatrix[]" name="Q" />
    <declaration type="RealMatrix[]" name="R" />
    <declaration type="ProcessModel[]" name="pm" />
    <declaration type="MeasurementModel" name="mm" />
    <comment>A and H matrix do not match in dimensions</comment>
    <comment>A = [ 1 ]</comment>
    <comment>no control input</comment>
    <comment>H = [ 1 1 ]</comment>
    <comment>Q = [ 0 ]</comment>
    <comment>R = [ 0 ]</comment>
  </method>
  <method type="void" name="testTransitionControlMatrixMismatch">
    <declaration type="RealMatrix[]" name="A" />
    <declaration type="RealMatrix[]" name="B" />
    <declaration type="RealMatrix[]" name="H" />
    <declaration type="RealMatrix[]" name="Q" />
    <declaration type="RealMatrix[]" name="R" />
    <declaration type="ProcessModel[]" name="pm" />
    <declaration type="MeasurementModel" name="mm" />
    <comment>A and B matrix do not match in dimensions</comment>
    <comment>A = [ 1 ]</comment>
    <comment>B = [ 1 1 ]</comment>
    <comment>H = [ 1 ]</comment>
    <comment>Q = [ 0 ]</comment>
    <comment>R = [ 0 ]</comment>
  </method>
  <method type="void" name="testConstant">
    <declaration type="double" name="constantValue" />
    <declaration type="double" name="measurementNoise" />
    <declaration type="double" name="processNoise" />
    <declaration type="RealMatrix[]" name="A" />
    <declaration type="RealMatrix" name="B" />
    <declaration type="RealMatrix[]" name="H" />
    <declaration type="RealVector[]" name="x" />
    <declaration type="RealMatrix[]" name="Q" />
    <declaration type="RealMatrix[]" name="R" />
    <declaration type="ProcessModel[]" name="pm" />
    <declaration type="MeasurementModel" name="mm" />
    <declaration type="KalmanFilter" name="filter" />
    <declaration type="double[][]" name="expectedInitialState" />
    <declaration type="RealVector" name="pNoise" />
    <declaration type="RealVector" name="mNoise" />
    <declaration type="RandomGenerator" name="rand" />
    <scope>
      <declaration type="RealVector" name="z" />
      <declaration type="double" name="diff" />
    </scope>
    <comment>simulates a simple process with a constant state and no control input</comment>
    <comment>A = [ 1 ]</comment>
    <comment>no control input</comment>
    <comment>H = [ 1 ]</comment>
    <comment>x = [ 10 ]</comment>
    <comment>Q = [ 1e-5 ]</comment>
    <comment>R = [ 0.1 ]</comment>
    <comment>check the initial state</comment>
    <comment>iterate 60 steps</comment>
    <comment>Simulate the process</comment>
    <comment>x = A * x + p_noise</comment>
    <comment>Simulate the measurement</comment>
    <comment>z = H * x + m_noise</comment>
    <comment>state estimate shouldn't be larger than measurement noise</comment>
    <comment>System.out.println(diff);</comment>
    <comment>error covariance should be already very low (&lt; 0.02)</comment>
  </method>
  <method type="void" name="testConstantAcceleration">
    <declaration type="double" name="dt" />
    <declaration type="double" name="measurementNoise" />
    <declaration type="double" name="accelNoise" />
    <declaration type="RealMatrix[]" name="A" />
    <declaration type="RealMatrix[]" name="B" />
    <declaration type="RealMatrix[]" name="H" />
    <declaration type="RealVector[]" name="x" />
    <declaration type="RealMatrix[]" name="tmp" />
    <declaration type="RealMatrix" name="Q" />
    <declaration type="RealMatrix[]" name="P0" />
    <declaration type="RealMatrix[]" name="R" />
    <declaration type="RealVector[]" name="u" />
    <declaration type="ProcessModel" name="pm" />
    <declaration type="MeasurementModel" name="mm" />
    <declaration type="KalmanFilter" name="filter" />
    <declaration type="double[][]" name="expectedInitialState" />
    <declaration type="RandomGenerator" name="rand" />
    <declaration type="RealVector[]" name="tmpPNoise" />
    <declaration type="RealVector" name="mNoise" />
    <scope>
      <declaration type="RealVector" name="pNoise" />
      <declaration type="RealVector" name="z" />
      <declaration type="double" name="diff" />
    </scope>
    <comment>simulates a vehicle, accelerating at a constant rate (0.1 m/s)</comment>
    <comment>discrete time interval</comment>
    <comment>position measurement noise (meter)</comment>
    <comment>acceleration noise (meter/sec^2)</comment>
    <comment>A = [ 1 dt ]</comment>
    <comment>[ 0  1 ]</comment>
    <comment>B = [ dt^2/2 ]</comment>
    <comment>[ dt     ]</comment>
    <comment>H = [ 1 0 ]</comment>
    <comment>x = [ 0 0 ]</comment>
    <comment>Q = [ dt^4/4 dt^3/2 ]</comment>
    <comment>[ dt^3/2 dt^2   ]</comment>
    <comment>P0 = [ 1 1 ]</comment>
    <comment>[ 1 1 ]</comment>
    <comment>R = [ measurementNoise^2 ]</comment>
    <comment>constant control input, increase velocity by 0.1 m/s per cycle</comment>
    <comment>check the initial state</comment>
    <comment>iterate 60 steps</comment>
    <comment>Simulate the process</comment>
    <comment>x = A * x + B * u + pNoise</comment>
    <comment>Simulate the measurement</comment>
    <comment>z = H * x + m_noise</comment>
    <comment>state estimate shouldn't be larger than the measurement noise</comment>
    <comment>error covariance of the velocity should be already very low (&lt; 0.1)</comment>
  </method>
  <method type="void" name="assertVectorEquals">
    <scope />
  </method>
  <method type="void" name="assertMatrixEquals">
    <scope>
      <scope />
    </scope>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements. See the NOTICE file distributed with this
 work for additional information regarding copyright ownership. The ASF
 licenses this file to You under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http:www.apache.orglicensesLICENSE-2.0 Unless required by applicable law
 or agreed to in writing, software distributed under the License is
 distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the specific language
 governing permissions and limitations under the License.</comment>
</class>
