<?xml version="1.0" encoding="UTF-8"?>
<class name="GLSMultipleLinearRegressionTest">
  <declaration type="double[]" name="y" />
  <declaration type="double[][]" name="x" />
  <declaration type="double[][]" name="omega" />
  <declaration type="double[]" name="longley" />
  <method type="void" name="setUp" />
  <method type="void" name="cannotAddXSampleData" />
  <method type="void" name="cannotAddNullYSampleData" />
  <method type="void" name="cannotAddSampleDataWithSizeMismatch">
    <declaration type="double[][]" name="y" />
    <declaration type="double[][][]" name="x" />
  </method>
  <method type="void" name="cannotAddNullCovarianceData" />
  <method type="void" name="notEnoughData">
    <declaration type="double[]" name="reducedY" />
    <declaration type="double[][][]" name="reducedX" />
    <declaration type="double[][][]" name="reducedO" />
  </method>
  <method type="void" name="cannotAddCovarianceDataWithSampleSizeMismatch">
    <declaration type="double[][]" name="y" />
    <declaration type="double[][][]" name="x" />
    <declaration type="double[][][]" name="omega" />
  </method>
  <method type="void" name="cannotAddCovarianceDataThatIsNotSquare">
    <declaration type="double[][]" name="y" />
    <declaration type="double[][][]" name="x" />
    <declaration type="double[][][]" name="omega" />
  </method>
  <method type="GLSMultipleLinearRegression" name="createRegression">
    <declaration type="GLSMultipleLinearRegression" name="regression" />
  </method>
  <method type="int" name="getNumberOfRegressors" />
  <method type="int" name="getSampleSize" />
  <javadoc>
    <text>test calculateYVariance</text>
  </javadoc>
  <method type="void" name="testYVariance">
    <declaration type="GLSMultipleLinearRegression" name="model" />
    <comment>assumes: y = new double[]{11.0, 12.0, 13.0, 14.0, 15.0, 16.0};</comment>
  </method>
  <javadoc>
    <text>Verifies that setting X, Y and covariance separately has the same effect as newSample(X,Y,cov).</text>
  </javadoc>
  <method type="void" name="testNewSample2">
    <declaration type="double[][]" name="y" />
    <declaration type="double[][][]" name="x" />
    <declaration type="double[][]" name="covariance" />
    <declaration type="GLSMultipleLinearRegression" name="regression" />
    <declaration type="RealMatrix" name="combinedX" />
    <declaration type="RealVector" name="combinedY" />
    <declaration type="RealMatrix" name="combinedCovInv" />
  </method>
  <javadoc>
    <text>Verifies that GLS with identity covariance matrix gives the same results
 * as OLS.</text>
  </javadoc>
  <method type="void" name="testGLSOLSConsistency">
    <declaration type="RealMatrix" name="identityCov" />
    <declaration type="GLSMultipleLinearRegression" name="glsModel" />
    <declaration type="OLSMultipleLinearRegression" name="olsModel" />
    <declaration type="double[]" name="olsBeta" />
    <declaration type="double[]" name="glsBeta" />
    <scope />
    <comment>TODO:  Should have assertRelativelyEquals(double[], double[], eps) in TestUtils</comment>
    <comment>Should also add RealVector and RealMatrix versions</comment>
  </method>
  <javadoc>
    <text>Generate an error covariance matrix and sample data representing models
 * with this error structure. Then verify that GLS estimated coefficients,
 * on average, perform better than OLS.</text>
  </javadoc>
  <method type="void" name="testGLSEfficiency">
    <declaration type="RandomGenerator" name="rg" />
    <declaration type="int" name="nObs" />
    <declaration type="double[]" name="sigma" />
    <scope />
    <declaration type="int" name="numSeeds" />
    <declaration type="RealMatrix" name="errorSeeds" />
    <scope>
      <scope />
    </scope>
    <declaration type="RealMatrix" name="cov" />
    <declaration type="GaussianRandomGenerator" name="rawGenerator" />
    <declaration type="double[]" name="errorMeans" />
    <declaration type="CorrelatedRandomVectorGenerator" name="gen" />
    <declaration type="OLSMultipleLinearRegression" name="ols" />
    <declaration type="RealVector" name="b" />
    <declaration type="RealMatrix" name="x" />
    <declaration type="GLSMultipleLinearRegression" name="gls" />
    <declaration type="DescriptiveStatistics" name="olsBetaStats" />
    <declaration type="DescriptiveStatistics" name="glsBetaStats" />
    <declaration type="int" name="nModels" />
    <scope>
      <declaration type="RealVector" name="u" />
      <declaration type="double[]" name="y" />
      <declaration type="RealVector" name="olsBeta" />
      <declaration type="RealVector" name="glsBeta" />
      <declaration type="double" name="dist" />
    </scope>
    <comment>Seed has been selected to generate non-trivial covariance</comment>
    <comment>Assume model has 16 observations (will use Longley data).  Start by generating</comment>
    <comment>non-constant variances for the 16 error terms.</comment>
    <comment>Now generate 1000 error vectors to use to estimate the covariance matrix</comment>
    <comment>Columns are draws on N(0, sigma[col])</comment>
    <comment>Get covariance matrix for columns</comment>
    <comment>Create a CorrelatedRandomVectorGenerator to use to generate correlated errors</comment>
    <comment>Counting on init to 0 here</comment>
    <comment>Now start generating models.  Use Longley X matrix on LHS</comment>
    <comment>and Longley OLS beta vector as "true" beta.  Generate</comment>
    <comment>Y values by XB + u where u is a CorrelatedRandomVector generated</comment>
    <comment>from cov.</comment>
    <comment>Create a GLS model to reuse</comment>
    <comment>Create aggregators for stats measuring model performance</comment>
    <comment>Generate Y vectors for 10000 models, estimate GLS and OLS and</comment>
    <comment>Verify that OLS estimates are better</comment>
    <comment>Generate y = xb + u with u cov</comment>
    <comment>Estimate OLS parameters</comment>
    <comment>Estimate GLS parameters</comment>
    <comment>Record deviations from "true" beta</comment>
    <comment>Verify that GLS is on average more efficient, lower variance</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
