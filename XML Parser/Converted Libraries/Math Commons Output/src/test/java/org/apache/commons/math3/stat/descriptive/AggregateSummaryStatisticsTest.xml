<?xml version="1.0" encoding="UTF-8"?>
<class name="AggregateSummaryStatisticsTest">
  <javadoc>
    <text>Test cases for {@link AggregateSummaryStatistics}</text>
  </javadoc>
  <javadoc>
    <text>Tests the standard aggregation behavior</text>
  </javadoc>
  <method type="void" name="testAggregation">
    <declaration type="AggregateSummaryStatistics" name="aggregate" />
    <declaration type="SummaryStatistics" name="setOneStats" />
    <declaration type="SummaryStatistics" name="setTwoStats" />
  </method>
  <javadoc>
    <text>Verify that aggregating over a partition gives the same results
 * as direct computation.
 * 1) Randomly generate a dataset of 10-100 values
 * from [-100, 100]
 * 2) Divide the dataset it into 2-5 partitions
 * 3) Create an AggregateSummaryStatistic and ContributingStatistics
 * for each partition
 * 4) Compare results from the AggregateSummaryStatistic with values
 * returned by a single SummaryStatistics instance that is provided
 * the full dataset</text>
  </javadoc>
  <method type="void" name="testAggregationConsistency">
    <declaration type="double[]" name="totalSample" />
    <declaration type="double[][]" name="subSamples" />
    <declaration type="int" name="nSamples" />
    <declaration type="AggregateSummaryStatistics" name="aggregate" />
    <declaration type="SummaryStatistics" name="totalStats" />
    <declaration type="SummaryStatistics[]" name="componentStats" />
    <scope>
      <scope />
    </scope>
    <scope />
    <comment>Generate a random sample and random partition</comment>
    <comment>Create aggregator and total stats for comparison</comment>
    <comment>Create array of component stats</comment>
    <comment>Make componentStats[i] a contributing statistic to aggregate</comment>
    <comment>Add values from subsample</comment>
    <comment>Compute totalStats directly</comment>
    <comment>Compare statistics in totalStats with aggregate.
 Note that guaranteed success of this comparison depends on the
 fact that &lt;aggregate&gt; gets values in exactly the same order
 as &lt;totalStats&gt;.</comment>
  </method>
  <javadoc>
    <text>Test aggregate function by randomly generating a dataset of 10-100 values
 * from [-100, 100], dividing it into 2-5 partitions, computing stats for each
 * partition and comparing the result of aggregate(...) applied to the collection
 * of per-partition SummaryStatistics with a single SummaryStatistics computed
 * over the full sample.</text>
  </javadoc>
  <method type="void" name="testAggregate">
    <declaration type="double[]" name="totalSample" />
    <declaration type="double[][]" name="subSamples" />
    <declaration type="int" name="nSamples" />
    <declaration type="SummaryStatistics" name="totalStats" />
    <scope />
    <declaration type="SummaryStatistics[]" name="subSampleStats" />
    <scope />
    <declaration type="Collection&lt;SummaryStatistics&gt;" name="aggregate" />
    <scope>
      <scope />
    </scope>
    <declaration type="StatisticalSummary" name="aggregatedStats" />
    <comment>Generate a random sample and random partition</comment>
    <comment>Compute combined stats directly</comment>
    <comment>Now compute subsample stats individually and aggregate</comment>
    <comment>Compare values</comment>
  </method>
  <method type="void" name="testAggregateDegenerate">
    <declaration type="double[]" name="totalSample" />
    <declaration type="double[][]" name="subSamples" />
    <declaration type="SummaryStatistics" name="totalStats" />
    <scope />
    <declaration type="SummaryStatistics[]" name="subSampleStats" />
    <scope />
    <declaration type="Collection&lt;SummaryStatistics&gt;" name="aggregate" />
    <scope>
      <scope />
    </scope>
    <declaration type="StatisticalSummaryValues" name="aggregatedStats" />
    <comment>Compute combined stats directly</comment>
    <comment>Now compute subsample stats individually and aggregate</comment>
    <comment>Compare values</comment>
  </method>
  <method type="void" name="testAggregateSpecialValues">
    <declaration type="double[]" name="totalSample" />
    <declaration type="double[][]" name="subSamples" />
    <declaration type="SummaryStatistics" name="totalStats" />
    <scope />
    <declaration type="SummaryStatistics[]" name="subSampleStats" />
    <scope />
    <declaration type="Collection&lt;SummaryStatistics&gt;" name="aggregate" />
    <scope>
      <scope />
    </scope>
    <declaration type="StatisticalSummaryValues" name="aggregatedStats" />
    <comment>Compute combined stats directly</comment>
    <comment>Now compute subsample stats individually and aggregate</comment>
    <comment>Compare values</comment>
  </method>
  <javadoc>
    <text>Verifies that a StatisticalSummary and a StatisticalSummaryValues are equal up
 * to delta, with NaNs, infinities returned in the same spots. For max, min, n, values
 * have to agree exactly, delta is used only for sum, mean, variance, std dev.</text>
  </javadoc>
  <method type="void" name="assertEquals" />
  <javadoc>
    <text>Generates a random sample of double values.
 * Sample size is random, between 10 and 100 and values are
 * uniformly distributed over [-100, 100].</text>
    <return>array of random double values</return>
  </javadoc>
  <method type="double[]" name="generateSample">
    <declaration type="IntegerDistribution" name="size" />
    <declaration type="RealDistribution" name="randomData" />
    <declaration type="int" name="sampleSize" />
    <declaration type="double[]" name="out" />
  </method>
  <javadoc>
    <text>Generates a partition of &lt;sample&gt; into up to 5 sequentially selected
 * subsamples with randomly selected partition points.</text>
    <param>sample array to partition</param>
    <return>rectangular array with rows = subsamples</return>
  </javadoc>
  <method type="double[][]" name="generatePartition">
    <declaration type="int" name="length" />
    <declaration type="double[][][]" name="out" />
    <declaration type="int" name="cur" />
    <declaration type="int" name="offset" />
    <declaration type="int" name="sampleCount" />
    <scope>
      <scope />
      <declaration type="int" name="next" />
      <scope />
      <scope />
      <declaration type="int" name="subLength" />
    </scope>
    <scope>
      <declaration type="double[][][]" name="out2" />
      <scope>
        <declaration type="int" name="curSize" />
      </scope>
    </scope>
    <scope />
    <comment>beginning of current partition segment</comment>
    <comment>end of current partition segment</comment>
    <comment>number of segments defined</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
