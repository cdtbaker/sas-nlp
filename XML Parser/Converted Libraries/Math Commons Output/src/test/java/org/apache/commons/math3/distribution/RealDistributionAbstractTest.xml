<?xml version="1.0" encoding="UTF-8"?>
<class name="RealDistributionAbstractTest">
  <javadoc>
    <text>Abstract base class for {@link RealDistribution} tests.
 * &lt;p&gt;
 * To create a concrete test class for a continuous distribution
 * implementation, first implement makeDistribution() to return a distribution
 * instance to use in tests. Then implement each of the test data generation
 * methods below.  In each case, the test points and test values arrays
 * returned represent parallel arrays of inputs and expected values for the
 * distribution returned by makeDistribution().  Default implementations
 * are provided for the makeInverseXxx methods that just invert the mapping
 * defined by the arrays returned by the makeCumulativeXxx methods.
 * &lt;p&gt;
 * makeCumulativeTestPoints() -- arguments used to test cumulative probabilities
 * makeCumulativeTestValues() -- expected cumulative probabilites
 * makeDensityTestValues() -- expected density values at cumulativeTestPoints
 * makeInverseCumulativeTestPoints() -- arguments used to test inverse cdf
 * makeInverseCumulativeTestValues() -- expected inverse cdf values
 * &lt;p&gt;
 * To implement additional test cases with different distribution instances and
 * test data, use the setXxx methods for the instance data in test cases and
 * call the verifyXxx methods to verify results.
 * &lt;p&gt;
 * Error tolerance can be overriden by implementing getTolerance().
 * &lt;p&gt;
 * Test data should be validated against reference tables or other packages
 * where possible, and the source of the reference data and/or validation
 * should be documented in the test cases.  A framework for validating
 * distribution data against R is included in the /src/test/R source tree.
 * &lt;p&gt;
 * See {@link NormalDistributionTest} and {@link ChiSquaredDistributionTest}for examples.</text>
    <version>$Id: RealDistributionAbstractTest.java 1428822 2013-01-04 12:28:44Z erans $</version>
  </javadoc>
  <javadoc>
    <text>Distribution instance used to perform tests</text>
  </javadoc>
  <declaration type="RealDistribution" name="distribution" />
  <javadoc>
    <text>Tolerance used in comparing expected and returned values</text>
  </javadoc>
  <declaration type="double" name="tolerance" />
  <javadoc>
    <text>Arguments used to test cumulative probability density calculations</text>
  </javadoc>
  <declaration type="double[]" name="cumulativeTestPoints" />
  <javadoc>
    <text>Values used to test cumulative probability density calculations</text>
  </javadoc>
  <declaration type="double[]" name="cumulativeTestValues" />
  <javadoc>
    <text>Arguments used to test inverse cumulative probability density calculations</text>
  </javadoc>
  <declaration type="double[]" name="inverseCumulativeTestPoints" />
  <javadoc>
    <text>Values used to test inverse cumulative probability density calculations</text>
  </javadoc>
  <declaration type="double[]" name="inverseCumulativeTestValues" />
  <javadoc>
    <text>Values used to test density calculations</text>
  </javadoc>
  <declaration type="double[]" name="densityTestValues" />
  <method name="makeDistribution" type="RealDistribution" />
  <javadoc>
    <text>Creates the default continuous distribution instance to use in tests.</text>
  </javadoc>
  <method name="makeCumulativeTestPoints" type="double[]" />
  <javadoc>
    <text>Creates the default cumulative probability test input values</text>
  </javadoc>
  <method name="makeCumulativeTestValues" type="double[]" />
  <javadoc>
    <text>Creates the default cumulative probability test expected values</text>
  </javadoc>
  <method name="makeDensityTestValues" type="double[]" />
  <javadoc>
    <text>Creates the default density test expected values</text>
  </javadoc>
  <javadoc>
    <text>Creates the default inverse cumulative probability test input values</text>
  </javadoc>
  <method type="double[]" name="makeInverseCumulativeTestPoints" />
  <javadoc>
    <text>Creates the default inverse cumulative probability density test expected values</text>
  </javadoc>
  <method type="double[]" name="makeInverseCumulativeTestValues" />
  <javadoc>
    <text>Setup sets all test instance data to default values</text>
  </javadoc>
  <method type="void" name="setUp" />
  <javadoc>
    <text>Cleans up test instance data</text>
  </javadoc>
  <method type="void" name="tearDown" />
  <javadoc>
    <text>Verifies that cumulative probability density calculations match expected values
 * using current test instance data</text>
  </javadoc>
  <method type="void" name="verifyCumulativeProbabilities">
    <scope />
    <scope>
      <scope>
        <scope />
        <scope>
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>verify cumulativeProbability(double)</comment>
    <comment>verify cumulativeProbability(double, double)</comment>
    <comment>XXX In 4.0, "cumulativeProbability(double,double)" must be replaced with "probability" (MATH-839).</comment>
  </method>
  <javadoc>
    <text>Verifies that inverse cumulative probability density calculations match expected values
 * using current test instance data</text>
  </javadoc>
  <method type="void" name="verifyInverseCumulativeProbabilities">
    <scope />
  </method>
  <javadoc>
    <text>Verifies that density calculations match expected values</text>
  </javadoc>
  <method type="void" name="verifyDensities">
    <scope />
  </method>
  <javadoc>
    <text>Verifies that cumulative probability density calculations match expected values
 * using default test instance data</text>
  </javadoc>
  <method type="void" name="testCumulativeProbabilities" />
  <javadoc>
    <text>Verifies that inverse cumulative probability density calculations match expected values
 * using default test instance data</text>
  </javadoc>
  <method type="void" name="testInverseCumulativeProbabilities" />
  <javadoc>
    <text>Verifies that density calculations return expected values
 * for default test instance data</text>
  </javadoc>
  <method type="void" name="testDensities" />
  <javadoc>
    <text>Verifies that probability computations are consistent</text>
  </javadoc>
  <method type="void" name="testConsistency">
    <scope>
      <declaration type="double" name="upper" />
      <declaration type="double" name="lower" />
      <declaration type="double" name="diff" />
      <declaration type="double" name="direct" />
    </scope>
    <comment>check that cdf(x, x) = 0</comment>
    <comment>XXX In 4.0, "cumulativeProbability(double,double)" must be replaced with "probability" (MATH-839).</comment>
    <comment>check that P(a &lt; X &lt;= b) = P(X &lt;= b) - P(X &lt;= a)</comment>
    <comment>XXX In 4.0, "cumulativeProbability(double,double)" must be replaced with "probability" (MATH-839).</comment>
  </method>
  <javadoc>
    <text>Verifies that illegal arguments are correctly handled</text>
  </javadoc>
  <method type="void" name="testIllegalArguments">
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>XXX In 4.0, "cumulativeProbability(double,double)" must be replaced with "probability" (MATH-839).</comment>
    <comment>expected</comment>
    <comment>expected</comment>
    <comment>expected</comment>
  </method>
  <javadoc>
    <text>Test sampling</text>
  </javadoc>
  <method type="void" name="testSampling">
    <declaration type="int" name="sampleSize" />
    <declaration type="double[]" name="sample" />
    <declaration type="double[]" name="quartiles" />
    <declaration type="double[]" name="expected" />
    <declaration type="long[]" name="counts" />
    <scope />
    <comment>Use fixed seed</comment>
  </method>
  <javadoc>
    <text>Verify that density integrals match the distribution.
 * The (filtered, sorted) cumulativeTestPoints array is used to source
 * integration limits. The integral of the density (estimated using a
 * Legendre-Gauss integrator) is compared with the cdf over the same
 * interval. Test points outside of the domain of the density function
 * are discarded.</text>
  </javadoc>
  <method type="void" name="testDensityIntegrals">
    <declaration type="double" name="tol" />
    <declaration type="BaseAbstractUnivariateIntegrator" name="integrator" />
    <declaration type="UnivariateFunction" name="d" />
    <method type="double" name="value" />
    <declaration type="ArrayList&lt;Double&gt;" name="integrationTestPoints" />
    <scope>
      <scope />
    </scope>
    <scope />
    <comment>exclude integrals outside domain.</comment>
    <comment>FIXME @4.0 when rename happens</comment>
    <comment>Triangle integrals are very slow to converge</comment>
  </method>
  <javadoc>
    <text>Verify that isSupportLowerBoundInclusvie returns true iff the lower bound
 * is finite and density is non-NaN, non-infinite there.</text>
  </javadoc>
  <method type="void" name="testIsSupportLowerBoundInclusive">
    <declaration type="double" name="lowerBound" />
    <declaration type="double" name="result" />
  </method>
  <javadoc>
    <text>Verify that isSupportUpperBoundInclusvie returns true iff the upper bound
 * is finite and density is non-NaN, non-infinite there.</text>
  </javadoc>
  <method type="void" name="testIsSupportUpperBoundInclusive">
    <declaration type="double" name="upperBound" />
    <declaration type="double" name="result" />
  </method>
  <method type="void" name="testDistributionClone">
    <declaration type="RealDistribution" name="cloned" />
    <declaration type="double" name="s1" />
    <declaration type="double" name="s2" />
    <comment>Construct a distribution and initialize its internal random</comment>
    <comment>generator, using a fixed seed for deterministic results.</comment>
    <comment>Clone the distribution.</comment>
    <comment>Make sure they still produce the same samples.</comment>
  </method>
  <javadoc>
    <return>Returns the cumulativeTestPoints.</return>
  </javadoc>
  <method type="double[]" name="getCumulativeTestPoints" />
  <javadoc>
    <param>cumulativeTestPoints The cumulativeTestPoints to set.</param>
  </javadoc>
  <method type="void" name="setCumulativeTestPoints" />
  <javadoc>
    <return>Returns the cumulativeTestValues.</return>
  </javadoc>
  <method type="double[]" name="getCumulativeTestValues" />
  <javadoc>
    <param>cumulativeTestValues The cumulativeTestValues to set.</param>
  </javadoc>
  <method type="void" name="setCumulativeTestValues" />
  <method type="double[]" name="getDensityTestValues" />
  <method type="void" name="setDensityTestValues" />
  <javadoc>
    <return>Returns the distribution.</return>
  </javadoc>
  <method type="RealDistribution" name="getDistribution" />
  <javadoc>
    <param>distribution The distribution to set.</param>
  </javadoc>
  <method type="void" name="setDistribution" />
  <javadoc>
    <return>Returns the inverseCumulativeTestPoints.</return>
  </javadoc>
  <method type="double[]" name="getInverseCumulativeTestPoints" />
  <javadoc>
    <param>inverseCumulativeTestPoints The inverseCumulativeTestPoints to set.</param>
  </javadoc>
  <method type="void" name="setInverseCumulativeTestPoints" />
  <javadoc>
    <return>Returns the inverseCumulativeTestValues.</return>
  </javadoc>
  <method type="double[]" name="getInverseCumulativeTestValues" />
  <javadoc>
    <param>inverseCumulativeTestValues The inverseCumulativeTestValues to set.</param>
  </javadoc>
  <method type="void" name="setInverseCumulativeTestValues" />
  <javadoc>
    <return>Returns the tolerance.</return>
  </javadoc>
  <method type="double" name="getTolerance" />
  <javadoc>
    <param>tolerance The tolerance to set.</param>
  </javadoc>
  <method type="void" name="setTolerance" />
  <javadoc>
    <text>Serialization and deserialization loop of the {@link #distribution}.</text>
  </javadoc>
  <method type="RealDistribution" name="deepClone">
    <declaration type="ByteArrayOutputStream" name="bOut" />
    <declaration type="ObjectOutputStream" name="oOut" />
    <declaration type="byte[]" name="data" />
    <declaration type="ByteArrayInputStream" name="bIn" />
    <declaration type="ObjectInputStream" name="oIn" />
    <declaration type="Object" name="clone" />
    <comment>Serialize to byte array.</comment>
    <comment>Deserialize from byte array.</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>-------------------- Private test instance data -------------------------</comment>
  <comment>-------------------- Abstract methods -----------------------------------</comment>
  <comment>---- Default implementations of inverse test data generation methods ----</comment>
  <comment>-------------------- Setup / tear down ----------------------------------</comment>
  <comment>-------------------- Verification methods -------------------------------</comment>
  <comment>------------------------ Default test cases -----------------------------</comment>
  <comment>------------------ Getters / Setters for test instance data -----------</comment>
</class>
