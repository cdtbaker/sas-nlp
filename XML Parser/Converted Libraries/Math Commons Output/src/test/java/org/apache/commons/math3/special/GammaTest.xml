<?xml version="1.0" encoding="UTF-8"?>
<class name="GammaTest">
  <javadoc>
    <version>$Id: GammaTest.java 1414531 2012-11-28 05:39:39Z celestin $</version>
  </javadoc>
  <method type="void" name="testRegularizedGamma">
    <declaration type="double" name="actualP" />
    <declaration type="double" name="actualQ" />
  </method>
  <method type="void" name="testLogGamma">
    <declaration type="double" name="actual" />
  </method>
  <method type="void" name="testRegularizedGammaNanPositive" />
  <method type="void" name="testRegularizedGammaPositiveNan" />
  <method type="void" name="testRegularizedGammaNegativePositive" />
  <method type="void" name="testRegularizedGammaPositiveNegative" />
  <method type="void" name="testRegularizedGammaZeroPositive" />
  <method type="void" name="testRegularizedGammaPositiveZero" />
  <method type="void" name="testRegularizedGammaPositivePositive" />
  <method type="void" name="testLogGammaNan" />
  <method type="void" name="testLogGammaNegative" />
  <method type="void" name="testLogGammaZero" />
  <method type="void" name="testLogGammaPositive" />
  <method type="void" name="testDigammaLargeArgs">
    <declaration type="double" name="eps" />
  </method>
  <method type="void" name="testDigammaSmallArgs">
    <declaration type="double[]" name="expected" />
    <scope />
    <comment>values for negative powers of 10 from 1 to 30 as computed by webMathematica with 20 digits</comment>
    <comment>see functions.wolfram.com</comment>
  </method>
  <method type="void" name="testTrigamma">
    <declaration type="double" name="eps" />
    <declaration type="double[]" name="data" />
    <scope />
    <comment>computed using webMathematica.  For example, to compute trigamma($i) = Polygamma(1, $i), use</comment>
    <comment />
    <comment>http:functions.wolfram.com/webMathematica/Evaluated.jsp?name=PolyGamma2&amp;plottype=0&amp;vars={%221%22,%22$i%22}&amp;digits=20</comment>
  </method>
  <javadoc>
    <text>Reference data for the {@link Gamma#logGamma(double)} function. This data
 * was generated with the following &lt;a
 * href="http://maxima.sourceforge.net/"&gt;Maxima&lt;/a&gt; script.
 * &lt;pre&gt;
 * kill(all);
 * fpprec : 64;
 * gamln(x) := log(gamma(x));
 * x : append(makelist(bfloat(i / 8), i, 1, 80),
 * [0.8b0, 1b2, 1b3, 1b4, 1b5, 1b6, 1b7, 1b8, 1b9, 1b10]);
 * for i : 1 while i &lt;= length(x) do
 * print("{", float(x[i]), ",", float(gamln(x[i])), "},");
 * &lt;/pre&gt;</text>
  </javadoc>
  <declaration type="double[][]" name="LOG_GAMMA_REF" />
  <method type="void" name="testLogGamma">
    <declaration type="int" name="ulps" />
    <scope>
      <declaration type="double[]" name="data" />
      <declaration type="double" name="x" />
      <declaration type="double" name="expected" />
      <declaration type="double" name="actual" />
      <declaration type="double" name="tol" />
      <scope />
      <scope />
    </scope>
  </method>
  <method type="void" name="testLogGammaPrecondition1" />
  <method type="void" name="testLogGammaPrecondition2" />
  <javadoc>
    <text>&lt;p&gt;
 * Reference values for the {@link Gamma#invGamma1pm1(double)} method.
 * These values were generated with the following &lt;a
 * href="http://maxima.sourceforge.net/"&gt;Maxima&lt;/a&gt; script
 * &lt;/p&gt;
 * &lt;pre&gt;
 * kill(all);
 * fpprec : 64;
 * gam1(x) := 1 / gamma(1 + x) - 1;
 * x : makelist(bfloat(i / 8), i, -4, 12);
 * for i : 1 while i &lt;= length(x) do print("{",
 * float(x[i]),
 * ",",
 * float(gam1(x[i])),
 * "},");
 * &lt;/pre&gt;</text>
  </javadoc>
  <declaration type="double[][]" name="INV_GAMMA1P_M1_REF" />
  <method type="void" name="testInvGamma1pm1">
    <declaration type="int" name="ulps" />
    <scope>
      <declaration type="double[]" name="ref" />
      <declaration type="double" name="x" />
      <declaration type="double" name="expected" />
      <declaration type="double" name="actual" />
      <declaration type="double" name="tol" />
    </scope>
  </method>
  <method type="void" name="testInvGamma1pm1Precondition1" />
  <method type="void" name="testInvGamma1pm1Precondition2" />
  <declaration type="double[][]" name="LOG_GAMMA1P_REF" />
  <method type="void" name="testLogGamma1p">
    <declaration type="int" name="ulps" />
    <scope>
      <declaration type="double[]" name="ref" />
      <declaration type="double" name="x" />
      <declaration type="double" name="expected" />
      <declaration type="double" name="actual" />
      <declaration type="double" name="tol" />
    </scope>
  </method>
  <method type="void" name="testLogGamma1pPrecondition1" />
  <method type="void" name="testLogGamma1pPrecondition2" />
  <javadoc>
    <text>Reference data for the {@link Gamma#gamma(double)} function. This
 * data was generated with the following &lt;a
 * href="http://maxima.sourceforge.net/"&gt;Maxima&lt;/a&gt; script.
 * &lt;pre&gt;
 * kill(all);
 * fpprec : 64;
 * EPSILON : 10**(-fpprec + 1);
 * isInteger(x) := abs(x - floor(x)) &lt;= EPSILON * abs(x);
 * x : makelist(bfloat(i / 8), i, -160, 160);
 * x : append(x, makelist(bfloat(i / 2), i, 41, 200));
 * for i : 1 while i &lt;= length(x) do if not(isInteger(x[i])) then
 * print("{", float(x[i]), ",", float(gamma(x[i])), "},");
 * &lt;/pre&gt;</text>
  </javadoc>
  <declaration type="double[][]" name="GAMMA_REF" />
  <method type="void" name="testGamma">
    <scope>
      <declaration type="double[]" name="ref" />
      <declaration type="double" name="x" />
      <declaration type="double" name="expected" />
      <declaration type="double" name="actual" />
      <declaration type="double" name="absX" />
      <declaration type="int" name="ulps" />
      <scope />
      <scope />
      <scope />
      <scope />
      <scope />
      <declaration type="double" name="tol" />
    </scope>
  </method>
  <method type="void" name="testGammaNegativeInteger">
    <scope />
  </method>
  <method type="void" name="checkRelativeError" />
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
