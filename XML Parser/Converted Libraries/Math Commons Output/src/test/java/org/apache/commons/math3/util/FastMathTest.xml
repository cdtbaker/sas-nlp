<?xml version="1.0" encoding="UTF-8"?>
<class name="FastMathTest">
  <declaration type="double" name="MAX_ERROR_ULP" />
  <declaration type="int" name="NUMBER_OF_TRIALS" />
  <declaration type="DfpField" name="field" />
  <declaration type="RandomGenerator" name="generator" />
  <method type="void" name="setUp" />
  <method type="void" name="testMinMaxDouble">
    <declaration type="double[][]" name="pairs" />
    <scope />
  </method>
  <method type="void" name="testMinMaxFloat">
    <declaration type="float[][]" name="pairs" />
    <scope />
  </method>
  <method type="void" name="testConstants" />
  <method type="void" name="testAtan2">
    <declaration type="double" name="y1" />
    <declaration type="double" name="x1" />
    <declaration type="double" name="y2" />
    <declaration type="double" name="x2" />
  </method>
  <method type="void" name="testHyperbolic">
    <declaration type="double" name="maxErr" />
    <scope>
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
    </scope>
    <scope>
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
    </scope>
    <scope>
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
    </scope>
  </method>
  <method type="void" name="testMath904">
    <declaration type="double" name="x" />
    <declaration type="double" name="y" />
  </method>
  <method type="void" name="testMath905LargePositive">
    <declaration type="double" name="start" />
    <declaration type="double" name="endT" />
    <declaration type="double" name="end" />
    <declaration type="double" name="maxErr" />
    <scope>
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
    </scope>
    <scope>
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
    </scope>
  </method>
  <method type="void" name="testMath905LargeNegative">
    <declaration type="double" name="start" />
    <declaration type="double" name="endT" />
    <declaration type="double" name="end" />
    <declaration type="double" name="maxErr" />
    <scope>
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
    </scope>
    <scope>
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
    </scope>
  </method>
  <method type="void" name="testHyperbolicInverses">
    <declaration type="double" name="maxErr" />
    <scope />
    <scope />
    <scope />
  </method>
  <method type="void" name="testLogAccuracy">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>double x = generator.nextDouble()*2.0;</comment>
    <comment>System.out.println(x + "\t" + tst + "\t" + ref + "\t" + err + "\t" + errulp);</comment>
  </method>
  <method type="void" name="testLog10Accuracy">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>double x = generator.nextDouble()*2.0;</comment>
    <comment>System.out.println(x + "\t" + tst + "\t" + ref + "\t" + err + "\t" + errulp);</comment>
  </method>
  <method type="void" name="testLog1pAccuracy">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>double x = generator.nextDouble()*2.0;</comment>
    <comment>System.out.println(x + "\t" + tst + "\t" + ref + "\t" + err + "\t" + errulp);</comment>
  </method>
  <method type="void" name="testLog1pSpecialCases" />
  <method type="void" name="testLogSpecialCases" />
  <method type="void" name="testExpSpecialCases">
    <comment>Smallest value that will round up to Double.MIN_VALUE</comment>
  </method>
  <method type="void" name="testPowSpecialCases">
    <comment>Added tests for a 100% coverage</comment>
  </method>
  <method type="void" name="testAtan2SpecialCases" />
  <method type="void" name="testPowAccuracy">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="y" />
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>double x = FastMath.floor(generator.nextDouble()1024.0 - 512.0); double
 y; if (x != 0) y = FastMath.floor(512.0  FastMath.abs(x)); else
 y = generator.nextDouble()1200.0; y = y - y2; x = FastMath.pow(2.0, x) 
 generator.nextDouble(); y = y  generator.nextDouble();</comment>
    <comment>double x = generator.nextDouble()*2.0;</comment>
    <comment>System.out.println(x + "\t" + y + "\t" + tst + "\t" + ref + "\t" + err + "\t" + errulp);</comment>
  </method>
  <method type="void" name="testExpAccuracy">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>double x = 1.0 + i1024.02.0;</comment>
    <comment>double x = (generator.nextDouble() * 20.0) - 10.0;</comment>
    <comment>double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();</comment>
    <comment>double x = 3.0  512.0  i - 3.0;</comment>
    <comment>System.out.println(x + "\t" + tst + "\t" + ref + "\t" + err + "\t" + errulp);</comment>
  </method>
  <method type="void" name="testSinAccuracy">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>double x = 1.0 + i1024.02.0;</comment>
    <comment>double x = ((generator.nextDouble() * 1416.0) - 708.0) * generator.nextDouble();</comment>
    <comment>double x = (generator.nextDouble() * 20.0) - 10.0;</comment>
    <comment>double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();</comment>
    <comment>double x = 3.0  512.0  i - 3.0;</comment>
    <comment>System.out.println(x + "\t" + tst + "\t" + ref + "\t" + err + "\t" + errulp);</comment>
  </method>
  <method type="void" name="testCosAccuracy">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>double x = 1.0 + i1024.02.0;</comment>
    <comment>double x = ((generator.nextDouble() * 1416.0) - 708.0) * generator.nextDouble();</comment>
    <comment>double x = (generator.nextDouble() * 20.0) - 10.0;</comment>
    <comment>double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();</comment>
    <comment>double x = 3.0  512.0  i - 3.0;</comment>
    <comment>System.out.println(x + "\t" + tst + "\t" + ref + "\t" + err + "\t" + errulp);</comment>
  </method>
  <method type="void" name="testTanAccuracy">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>double x = 1.0 + i1024.02.0;</comment>
    <comment>double x = ((generator.nextDouble() * 1416.0) - 708.0) * generator.nextDouble();</comment>
    <comment>double x = (generator.nextDouble() * 20.0) - 10.0;</comment>
    <comment>double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();</comment>
    <comment>double x = 3.0  512.0  i - 3.0;</comment>
    <comment>System.out.println(x + "\t" + tst + "\t" + ref + "\t" + err + "\t" + errulp);</comment>
  </method>
  <method type="void" name="testAtanAccuracy">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>double x = 1.0 + i1024.02.0;</comment>
    <comment>double x = ((generator.nextDouble() * 1416.0) - 708.0) * generator.nextDouble();</comment>
    <comment>double x = ((generator.nextDouble() * Math.PI) - Math.PI/2.0) *</comment>
    <comment>generator.nextDouble();</comment>
    <comment>double x = (generator.nextDouble() * 20.0) - 10.0;</comment>
    <comment>double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();</comment>
    <comment>double x = 3.0  512.0  i - 3.0;</comment>
    <comment>System.out.println(x + "\t" + tst + "\t" + ref + "\t" + err + "\t" + errulp);</comment>
  </method>
  <method type="void" name="testAtan2Accuracy">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="y" />
      <declaration type="double" name="tst" />
      <declaration type="Dfp" name="refdfp" />
      <scope />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>double x = 1.0 + i1024.02.0;</comment>
    <comment>double x = ((generator.nextDouble() * 1416.0) - 708.0) * generator.nextDouble();</comment>
    <comment>double x = (generator.nextDouble() * 20.0) - 10.0;</comment>
    <comment>double x = ((generator.nextDouble() * 2.0) - 1.0) * generator.nextDouble();</comment>
    <comment>double x = 3.0  512.0  i - 3.0;</comment>
    <comment>Make adjustments for sign</comment>
    <comment>System.out.println(x + "\t" + y + "\t" + tst + "\t" + ref + "\t" + errulp);</comment>
  </method>
  <method type="void" name="testExpm1Accuracy">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>double x = 1.0 + i1024.02.0;</comment>
    <comment>double x = (generator.nextDouble() * 20.0) - 10.0;</comment>
    <comment>double x = 3.0  512.0  i - 3.0;</comment>
    <comment>System.out.println(x + "\t" + tst + "\t" + ref + "\t" + err + "\t" + errulp);</comment>
  </method>
  <method type="void" name="testAsinAccuracy">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>System.out.println(x+"\t"+tst+"\t"+ref+"\t"+err+"\t"+errulp);</comment>
  </method>
  <method type="void" name="testAcosAccuracy">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>System.out.println(x+"\t"+tst+"\t"+ref+"\t"+err+"\t"+errulp);</comment>
  </method>
  <javadoc>
    <text>Added tests for a 100% coverage of acos().</text>
  </javadoc>
  <method type="void" name="testAcosSpecialCases" />
  <javadoc>
    <text>Added tests for a 100% coverage of asin().</text>
  </javadoc>
  <method type="void" name="testAsinSpecialCases" />
  <method type="Dfp" name="cosh" />
  <method type="Dfp" name="sinh" />
  <method type="Dfp" name="tanh" />
  <method type="void" name="testSinhAccuracy">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>System.out.println(x+"\t"+tst+"\t"+ref+"\t"+err+"\t"+errulp);</comment>
  </method>
  <method type="void" name="testCoshAccuracy">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>System.out.println(x+"\t"+tst+"\t"+ref+"\t"+err+"\t"+errulp);</comment>
  </method>
  <method type="void" name="testTanhAccuracy">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>System.out.println(x+"\t"+tst+"\t"+ref+"\t"+err+"\t"+errulp);</comment>
  </method>
  <method type="void" name="testCbrtAccuracy">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>System.out.println(x+"\t"+tst+"\t"+ref+"\t"+err+"\t"+errulp);</comment>
  </method>
  <method type="Dfp" name="cbrt">
    <declaration type="boolean" name="negative" />
    <scope />
    <declaration type="Dfp" name="y" />
    <scope />
  </method>
  <method type="void" name="testToDegrees">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>System.out.println(x + "\t" + tst + "\t" + ref + "\t" + err + "\t" + errulp);</comment>
  </method>
  <method type="void" name="testToRadians">
    <declaration type="double" name="maxerrulp" />
    <scope>
      <declaration type="double" name="x" />
      <declaration type="double" name="tst" />
      <declaration type="double" name="ref" />
      <declaration type="double" name="err" />
      <scope>
        <declaration type="double" name="ulp" />
        <declaration type="double" name="errulp" />
      </scope>
    </scope>
    <comment>System.out.println(x + "\t" + tst + "\t" + ref + "\t" + err + "\t" + errulp);</comment>
  </method>
  <method type="void" name="testNextAfter">
    <comment>0x402fffffffffffff 0x404123456789abcd -&gt; 4030000000000000</comment>
    <comment>0xc02fffffffffffff 0x404123456789abcd -&gt; c02ffffffffffffe</comment>
    <comment>0x402fffffffffffff 0x400123456789abcd -&gt; 402ffffffffffffe</comment>
    <comment>0xc02fffffffffffff 0x400123456789abcd -&gt; c02ffffffffffffe</comment>
    <comment>0x4020000000000000 0x404123456789abcd -&gt; 4020000000000001</comment>
    <comment>0xc020000000000000 0x404123456789abcd -&gt; c01fffffffffffff</comment>
    <comment>0x4020000000000000 0x400123456789abcd -&gt; 401fffffffffffff</comment>
    <comment>0xc020000000000000 0x400123456789abcd -&gt; c01fffffffffffff</comment>
    <comment>0x3f2e43753d36a223 0x3f2e43753d36a224 -&gt; 3f2e43753d36a224</comment>
    <comment>0x3f2e43753d36a223 0x3f2e43753d36a223 -&gt; 3f2e43753d36a223</comment>
    <comment>0x3f2e43753d36a223 0x3f2e43753d36a222 -&gt; 3f2e43753d36a222</comment>
    <comment>0x3f2e43753d36a223 0xbf2e43753d36a224 -&gt; 3f2e43753d36a222</comment>
    <comment>0x3f2e43753d36a223 0xbf2e43753d36a223 -&gt; 3f2e43753d36a222</comment>
    <comment>0x3f2e43753d36a223 0xbf2e43753d36a222 -&gt; 3f2e43753d36a222</comment>
    <comment>0xbf2e43753d36a223 0x3f2e43753d36a224 -&gt; bf2e43753d36a222</comment>
    <comment>0xbf2e43753d36a223 0x3f2e43753d36a223 -&gt; bf2e43753d36a222</comment>
    <comment>0xbf2e43753d36a223 0x3f2e43753d36a222 -&gt; bf2e43753d36a222</comment>
    <comment>0xbf2e43753d36a223 0xbf2e43753d36a224 -&gt; bf2e43753d36a224</comment>
    <comment>0xbf2e43753d36a223 0xbf2e43753d36a223 -&gt; bf2e43753d36a223</comment>
    <comment>0xbf2e43753d36a223 0xbf2e43753d36a222 -&gt; bf2e43753d36a222</comment>
  </method>
  <method type="void" name="testDoubleNextAfterSpecialCases" />
  <method type="void" name="testFloatNextAfterSpecialCases" />
  <method type="void" name="testDoubleScalbSpecialCases" />
  <method type="void" name="testFloatScalbSpecialCases" />
  <method type="boolean" name="compareClassMethods">
    <declaration type="boolean" name="allfound" />
    <scope>
      <scope>
        <declaration type="Type[]" name="params" />
        <scope />
        <scope />
      </scope>
    </scope>
  </method>
  <method type="void" name="checkMissingFastMathClasses">
    <declaration type="boolean" name="ok" />
  </method>
  <method type="void" name="checkExtraFastMathClasses" />
  <method type="void" name="testSignumDouble">
    <declaration type="double" name="delta" />
  </method>
  <method type="void" name="testSignumFloat">
    <declaration type="float" name="delta" />
  </method>
  <method type="void" name="testLogWithBase" />
  <method type="void" name="testIndicatorDouble">
    <declaration type="double" name="delta" />
  </method>
  <method type="void" name="testIndicatorFloat">
    <declaration type="float" name="delta" />
  </method>
  <method type="void" name="testIntPow">
    <declaration type="int" name="maxExp" />
    <declaration type="DfpField" name="field" />
    <declaration type="double" name="base" />
    <declaration type="Dfp" name="baseDfp" />
    <declaration type="Dfp" name="dfpPower" />
    <scope />
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
</class>
