<?xml version="1.0" encoding="UTF-8"?>
<class name="EigenDecompositionTest">
  <declaration type="double[]" name="refValues" />
  <declaration type="RealMatrix" name="matrix" />
  <method type="void" name="testDimension1">
    <declaration type="RealMatrix[]" name="matrix" />
    <declaration type="EigenDecomposition" name="ed" />
  </method>
  <method type="void" name="testDimension2">
    <declaration type="RealMatrix[]" name="matrix" />
    <declaration type="EigenDecomposition" name="ed" />
  </method>
  <method type="void" name="testDimension3">
    <declaration type="RealMatrix[]" name="matrix" />
    <declaration type="EigenDecomposition" name="ed" />
  </method>
  <method type="void" name="testDimension3MultipleRoot">
    <declaration type="RealMatrix[]" name="matrix" />
    <declaration type="EigenDecomposition" name="ed" />
  </method>
  <method type="void" name="testDimension4WithSplit">
    <declaration type="RealMatrix[]" name="matrix" />
    <declaration type="EigenDecomposition" name="ed" />
  </method>
  <method type="void" name="testDimension4WithoutSplit">
    <declaration type="RealMatrix[]" name="matrix" />
    <declaration type="EigenDecomposition" name="ed" />
  </method>
  <method type="void" name="testMath308">
    <declaration type="double[]" name="mainTridiagonal" />
    <declaration type="double[]" name="secondaryTridiagonal" />
    <declaration type="double[]" name="refEigenValues" />
    <declaration type="RealVector[][]" name="refEigenVectors" />
    <declaration type="EigenDecomposition" name="decomposition" />
    <declaration type="double[]" name="eigenValues" />
    <scope />
    <comment>the reference values have been computed using routine DSTEMR</comment>
    <comment>from the fortran library LAPACK version 3.2.1</comment>
  </method>
  <method type="void" name="testMathpbx02">
    <declaration type="double[]" name="mainTridiagonal" />
    <declaration type="double[]" name="secondaryTridiagonal" />
    <declaration type="double[]" name="refEigenValues" />
    <declaration type="RealVector[][]" name="refEigenVectors" />
    <declaration type="EigenDecomposition" name="decomposition" />
    <declaration type="double[]" name="eigenValues" />
    <scope>
      <scope />
      <scope />
    </scope>
    <comment>the reference values have been computed using routine DSTEMR</comment>
    <comment>from the fortran library LAPACK version 3.2.1</comment>
    <comment>the following line triggers the exception</comment>
  </method>
  <method type="void" name="testMathpbx03">
    <declaration type="double[]" name="mainTridiagonal" />
    <declaration type="double[]" name="secondaryTridiagonal" />
    <declaration type="double[]" name="refEigenValues" />
    <declaration type="RealVector[][]" name="refEigenVectors" />
    <declaration type="EigenDecomposition" name="decomposition" />
    <declaration type="double[]" name="eigenValues" />
    <scope>
      <scope />
      <scope />
    </scope>
    <comment>the reference values have been computed using routine DSTEMR</comment>
    <comment>from the fortran library LAPACK version 3.2.1</comment>
    <comment>the following line triggers the exception</comment>
  </method>
  <javadoc>
    <text>test a matrix already in tridiagonal form.</text>
  </javadoc>
  <method type="void" name="testTridiagonal">
    <declaration type="Random" name="r" />
    <declaration type="double[]" name="ref" />
    <scope>
      <scope />
      <scope />
    </scope>
    <declaration type="TriDiagonalTransformer" name="t" />
    <declaration type="EigenDecomposition" name="ed" />
    <declaration type="double[]" name="eigenValues" />
    <scope />
  </method>
  <javadoc>
    <text>test dimensions</text>
  </javadoc>
  <method type="void" name="testDimensions">
    <declaration type="int" name="m" />
    <declaration type="EigenDecomposition" name="ed" />
  </method>
  <javadoc>
    <text>test eigenvalues</text>
  </javadoc>
  <method type="void" name="testEigenvalues">
    <declaration type="EigenDecomposition" name="ed" />
    <declaration type="double[]" name="eigenValues" />
    <scope />
  </method>
  <javadoc>
    <text>test eigenvalues for a big matrix.</text>
  </javadoc>
  <method type="void" name="testBigMatrix">
    <declaration type="Random" name="r" />
    <declaration type="double[]" name="bigValues" />
    <scope />
    <declaration type="EigenDecomposition" name="ed" />
    <declaration type="double[]" name="eigenValues" />
    <scope />
  </method>
  <method type="void" name="testSymmetric">
    <declaration type="RealMatrix[]" name="symmetric" />
    <declaration type="EigenDecomposition" name="ed" />
    <declaration type="RealMatrix" name="d" />
    <declaration type="RealMatrix" name="v" />
    <declaration type="RealMatrix" name="vT" />
    <declaration type="double" name="norm" />
  </method>
  <method type="void" name="testSquareRoot">
    <declaration type="double[][]" name="data" />
    <declaration type="EigenDecomposition" name="dec" />
    <declaration type="RealMatrix" name="sqrtM" />
    <declaration type="RealMatrix" name="m" />
    <declaration type="int" name="dim" />
    <scope>
      <scope />
    </scope>
    <comment>Reconstruct initial matrix.</comment>
  </method>
  <method type="void" name="testSquareRootNonSymmetric">
    <declaration type="double[][]" name="data" />
    <declaration type="EigenDecomposition" name="dec" />
    <declaration type="RealMatrix" name="sqrtM" />
  </method>
  <method type="void" name="testSquareRootNonPositiveDefinite">
    <declaration type="double[][]" name="data" />
    <declaration type="EigenDecomposition" name="dec" />
    <declaration type="RealMatrix" name="sqrtM" />
  </method>
  <method type="void" name="testUnsymmetric">
    <declaration type="double[][]" name="vData" />
    <declaration type="RealMatrix[]" name="randMatrix" />
    <declaration type="double[][]" name="randData2" />
    <comment>Vandermonde matrix V(x;i,j) = x_i^{n - j} with x = (-1,-2,3,4)</comment>
    <comment>from http:eigen.tuxfamily.org/dox/classEigen_1_1RealSchur.html</comment>
  </method>
  <method type="void" name="testRandomUnsymmetricMatrix">
    <scope>
      <declaration type="Random" name="r" />
      <declaration type="int" name="size" />
      <declaration type="double[][]" name="data" />
      <scope>
        <scope />
      </scope>
      <declaration type="RealMatrix" name="m" />
    </scope>
    <comment>matrix size</comment>
  </method>
  <method type="void" name="testNormalDistributionUnsymmetricMatrix">
    <scope>
      <declaration type="Random" name="r" />
      <declaration type="NormalDistribution" name="dist" />
      <declaration type="int" name="size" />
      <declaration type="double[][]" name="data" />
      <scope>
        <scope />
      </scope>
      <declaration type="RealMatrix" name="m" />
    </scope>
    <comment>matrix size</comment>
  </method>
  <method type="void" name="testMath848">
    <declaration type="double[][]" name="data" />
    <declaration type="RealMatrix" name="m" />
  </method>
  <javadoc>
    <text>Checks that the eigen decomposition of a general (unsymmetric) matrix is valid by
 * checking: A*V = V*D</text>
  </javadoc>
  <method type="void" name="checkUnsymmetricMatrix">
    <scope>
      <declaration type="EigenDecomposition" name="ed" />
      <declaration type="RealMatrix" name="d" />
      <declaration type="RealMatrix" name="v" />
      <declaration type="RealMatrix" name="x" />
      <declaration type="RealMatrix" name="y" />
      <declaration type="double" name="diffNorm" />
      <declaration type="RealMatrix" name="invV" />
      <declaration type="double" name="norm" />
    </scope>
    <scope />
    <comment>RealMatrix vT = ed.getVT();</comment>
  </method>
  <javadoc>
    <text>test eigenvectors</text>
  </javadoc>
  <method type="void" name="testEigenvectors">
    <declaration type="EigenDecomposition" name="ed" />
    <scope>
      <declaration type="double" name="lambda" />
      <declaration type="RealVector" name="v" />
      <declaration type="RealVector" name="mV" />
    </scope>
  </method>
  <javadoc>
    <text>test A = VDVt</text>
  </javadoc>
  <method type="void" name="testAEqualVDVt">
    <declaration type="EigenDecomposition" name="ed" />
    <declaration type="RealMatrix" name="v" />
    <declaration type="RealMatrix" name="d" />
    <declaration type="RealMatrix" name="vT" />
    <declaration type="double" name="norm" />
  </method>
  <javadoc>
    <text>test that V is orthogonal</text>
  </javadoc>
  <method type="void" name="testVOrthogonal">
    <declaration type="RealMatrix" name="v" />
    <declaration type="RealMatrix" name="vTv" />
    <declaration type="RealMatrix" name="id" />
  </method>
  <javadoc>
    <text>test diagonal matrix</text>
  </javadoc>
  <method type="void" name="testDiagonal">
    <declaration type="double[][]" name="diagonal" />
    <declaration type="RealMatrix" name="m" />
    <declaration type="EigenDecomposition" name="ed" />
  </method>
  <javadoc>
    <text>Matrix with eigenvalues {8, -1, -1}</text>
  </javadoc>
  <method type="void" name="testRepeatedEigenvalue">
    <declaration type="RealMatrix[]" name="repeated" />
    <declaration type="EigenDecomposition" name="ed" />
  </method>
  <javadoc>
    <text>Matrix with eigenvalues {2, 0, 12}</text>
  </javadoc>
  <method type="void" name="testDistinctEigenvalues">
    <declaration type="RealMatrix[]" name="distinct" />
    <declaration type="EigenDecomposition" name="ed" />
  </method>
  <javadoc>
    <text>Verifies operation on indefinite matrix</text>
  </javadoc>
  <method type="void" name="testZeroDivide">
    <declaration type="RealMatrix[]" name="indefinite" />
    <declaration type="EigenDecomposition" name="ed" />
    <declaration type="double" name="isqrt3" />
    <declaration type="double" name="isqrt2" />
    <declaration type="double" name="isqrt6" />
  </method>
  <javadoc>
    <text>Verifies that the given EigenDecomposition has eigenvalues equivalent to
 * the targetValues, ignoring the order of the values and allowing
 * values to differ by tolerance.</text>
  </javadoc>
  <method type="void" name="checkEigenValues">
    <declaration type="double[]" name="observed" />
    <scope />
  </method>
  <javadoc>
    <text>Returns true iff there is an entry within tolerance of value in
 * searchArray.</text>
  </javadoc>
  <method type="boolean" name="isIncludedValue">
    <declaration type="boolean" name="found" />
    <declaration type="int" name="i" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns true iff eigenVector is a scalar multiple of one of the columns
 * of ed.getV().  Does not try linear combinations - i.e., should only be
 * used to find vectors in one-dimensional eigenspaces.</text>
  </javadoc>
  <method type="void" name="checkEigenVector" />
  <javadoc>
    <text>Returns true iff there is a column that is a scalar multiple of column
 * in searchMatrix (modulo tolerance)</text>
  </javadoc>
  <method type="boolean" name="isIncludedColumn">
    <declaration type="boolean" name="found" />
    <declaration type="int" name="i" />
    <scope>
      <declaration type="double" name="multiplier" />
      <declaration type="boolean" name="matching" />
      <declaration type="int" name="j" />
      <scope>
        <declaration type="double" name="colEntry" />
        <scope />
        <scope />
      </scope>
    </scope>
    <comment>Use the first entry where both are non-zero as scalar</comment>
  </method>
  <method type="void" name="setUp" />
  <method type="void" name="tearDown" />
  <method type="RealMatrix" name="createTestMatrix">
    <declaration type="int" name="n" />
    <declaration type="RealMatrix" name="v" />
    <declaration type="RealMatrix" name="d" />
  </method>
  <method type="RealMatrix" name="createOrthogonalMatrix">
    <declaration type="double[][]" name="data" />
    <scope>
      <declaration type="double[]" name="dataI" />
      <declaration type="double" name="norm2" />
      <scope>
        <scope />
        <scope>
          <declaration type="double[]" name="dataK" />
          <declaration type="double" name="dotProduct" />
          <scope />
          <scope />
        </scope>
        <scope />
        <declaration type="double" name="inv" />
        <scope />
      </scope>
    </scope>
    <comment>generate randomly row I</comment>
    <comment>project the row in the subspace orthogonal to previous rows</comment>
    <comment>normalize the row</comment>
  </method>
  <comment>Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http:www.apache.orglicensesLICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.</comment>
  <comment>the following test triggered an ArrayIndexOutOfBoundsException in commons-math 2.0</comment>
</class>
