<?xml version="1.0" encoding="UTF-8"?>
<class name="Benchmark">
  <javadoc>
    <text>Benchmarks the classes of this package.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="Benchmark" />
  <javadoc />
  <method type="void" name="benchmark">
    <declaration type="QuickOpenIntIntHashMap" name="map" />
    <scope />
    <scope />
    <scope />
    <declaration type="int" name="s" />
    <declaration type="Timer" name="timer0" />
    <declaration type="Timer" name="timer1" />
    <declaration type="Timer" name="timer2" />
    <scope>
      <scope>
        <scope />
      </scope>
      <scope>
        <scope />
      </scope>
      <scope />
    </scope>
    <comment>for (int i=size; --i &gt;=0; ) {</comment>
    <comment>map.hashCollisions = 0;</comment>
    <comment>map.ensureCapacity(size*3);</comment>
    <comment>System.out.println("collisions="+map.hashCollisions);</comment>
  </method>
  <javadoc>
    <text>Tests various methods of this class.</text>
  </javadoc>
  <method type="void" name="main">
    <declaration type="int" name="runs" />
    <declaration type="int" name="size" />
    <declaration type="String" name="kind" />
    <comment>boolean add = args[2].equals("add");</comment>
  </method>
  <javadoc />
  <method type="void" name="test2">
    <declaration type="cern.jet.random.Uniform" name="uniform" />
    <declaration type="int[]" name="keys" />
    <declaration type="int" name="to" />
    <scope />
    <declaration type="int[][]" name="values" />
    <declaration type="int" name="size" />
    <declaration type="AbstractIntIntMap" name="map" />
    <scope />
    <declaration type="int" name="sum" />
    <scope />
    <comment>using a map</comment>
    <comment>int[]    keys   = {0    , 3     , 277+3, 277*2+3, 100000, 9    };</comment>
    <comment>double[] values = {100.0, 1000.0, 277+3, 277*2+3, 70.0  , 71.0 ,};</comment>
    <comment>int[]    keys   = {0,1,3,4,5,6, 271,272,273,274,275,276,277+5, 277+6,277+7};</comment>
    <comment>AbstractIntIntMap map = new OpenIntIntHashMap(size*2, 0.2, 0.5);</comment>
    <comment>System.out.println(map);</comment>
    <comment>System.out.println(map.containsKey(3));
System.out.println(map.get(3));

System.out.println(map.containsKey(4));
System.out.println(map.get(4));

System.out.println(map.containsValue((int)71.0));
System.out.println(map.keyOf((int)71.0));</comment>
    <comment>System.out.println(map);</comment>
    <comment>System.out.println(map.keys());</comment>
    <comment>System.out.println(map.values());</comment>
    <comment>if (map instanceof QuickOpenIntIntHashMap) {
System.out.println("totalProbesSaved="+((QuickOpenIntIntHashMap)map).totalProbesSaved);
}
System.out.println("probes="+map.hashCollisions);

map.hashCollisions = 0;</comment>
    <comment>System.out.println(map);</comment>
    <comment>System.out.println("probes="+map.hashCollisions);</comment>
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
