<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractDoubleIntMap">
  <javadoc>
    <text>Abstract base class for hash maps holding (key,value) associations of type &lt;tt&gt;(double--&gt;int)&lt;/tt&gt;.
 * First see the &lt;a href="package-summary.html"&gt;package summary&lt;/a&gt; and javadoc &lt;a href="package-tree.html"&gt;tree view&lt;/a&gt; to get the broad picture.
 * &lt;p&gt;
 * &lt;b&gt;Implementation&lt;/b&gt;:
 * &lt;p&gt;
 * Almost all methods are expressed in terms of {@link #forEachKey(DoubleProcedure)}. 
 * As such they are fully functional, but inefficient. Override them in subclasses if necessary.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
    <see>java.util.HashMap</see>
  </javadoc>
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="AbstractDoubleIntMap" />
  <javadoc>
    <text>Returns &lt;tt&gt;true&lt;/tt&gt; if the receiver contains the specified key.</text>
    <return>&lt;tt&gt;true&lt;/tt&gt; if the receiver contains the specified key.</return>
  </javadoc>
  <method type="boolean" name="containsKey">
    <method type="boolean" name="apply" />
  </method>
  <javadoc>
    <text>Returns &lt;tt&gt;true&lt;/tt&gt; if the receiver contains the specified value.</text>
    <return>&lt;tt&gt;true&lt;/tt&gt; if the receiver contains the specified value.</return>
  </javadoc>
  <method type="boolean" name="containsValue">
    <method type="boolean" name="apply" />
  </method>
  <javadoc>
    <text>Returns a deep copy of the receiver; uses &lt;code&gt;clone()&lt;/code&gt; and casts the result.</text>
    <return>a deep copy of the receiver.</return>
  </javadoc>
  <method type="AbstractDoubleIntMap" name="copy" />
  <javadoc>
    <text>Compares the specified object with this map for equality.  Returns
 * &lt;tt&gt;true&lt;/tt&gt; if the given object is also a map and the two maps
 * represent the same mappings.  More formally, two maps &lt;tt&gt;m1&lt;/tt&gt; and
 * &lt;tt&gt;m2&lt;/tt&gt; represent the same mappings iff
 * &lt;pre&gt;
 * m1.forEachPair(
 * new DoubleIntProcedure() {
 * public boolean apply(double key, int value) {
 * return m2.containsKey(key) &amp;&amp; m2.get(key) == value;
 * }
 * }
 * )
 * &amp;&amp;
 * m2.forEachPair(
 * new DoubleIntProcedure() {
 * public boolean apply(double key, int value) {
 * return m1.containsKey(key) &amp;&amp; m1.get(key) == value;
 * }
 * }
 * );
 * &lt;/pre&gt;
 * This implementation first checks if the specified object is this map;
 * if so it returns &lt;tt&gt;true&lt;/tt&gt;.  Then, it checks if the specified
 * object is a map whose size is identical to the size of this set; if
 * not, it it returns &lt;tt&gt;false&lt;/tt&gt;.  If so, it applies the iteration as described above.</text>
    <param>obj object to be compared for equality with this map.</param>
    <return>&lt;tt&gt;true&lt;/tt&gt; if the specified object is equal to this map.</return>
  </javadoc>
  <method type="boolean" name="equals">
    <declaration type="AbstractDoubleIntMap" name="other" />
    <method type="boolean" name="apply" />
    <method type="boolean" name="apply" />
  </method>
  <method name="forEachKey" type="boolean" />
  <javadoc>
    <text>Applies a procedure to each key of the receiver, if any.
 * Note: Iterates over the keys in no particular order.
 * Subclasses can define a particular order, for example, "sorted by key".
 * All methods which &lt;i&gt;can&lt;/i&gt; be expressed in terms of this method (most methods can) &lt;i&gt;must guarantee&lt;/i&gt; to use the &lt;i&gt;same&lt;/i&gt; order defined by this method, even if it is no particular order.
 * This is necessary so that, for example, methods &lt;tt&gt;keys&lt;/tt&gt; and &lt;tt&gt;values&lt;/tt&gt; will yield association pairs, not two uncorrelated lists.</text>
    <param>procedure    the procedure to be applied. Stops iteration if the procedure returns &lt;tt&gt;false&lt;/tt&gt;, otherwise continues.</param>
    <return>&lt;tt&gt;false&lt;/tt&gt; if the procedure stopped before all keys where iterated over, &lt;tt&gt;true&lt;/tt&gt; otherwise.</return>
  </javadoc>
  <javadoc>
    <text>Applies a procedure to each (key,value) pair of the receiver, if any.
 * Iteration order is guaranteed to be &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(DoubleProcedure)}.</text>
    <param>procedure    the procedure to be applied. Stops iteration if the procedure returns &lt;tt&gt;false&lt;/tt&gt;, otherwise continues.</param>
    <return>&lt;tt&gt;false&lt;/tt&gt; if the procedure stopped before all keys where iterated over, &lt;tt&gt;true&lt;/tt&gt; otherwise.</return>
  </javadoc>
  <method type="boolean" name="forEachPair">
    <method type="boolean" name="apply" />
  </method>
  <method name="get" type="int" />
  <javadoc>
    <text>Returns the value associated with the specified key.
 * It is often a good idea to first check with {@link #containsKey(double)} whether the given key has a value associated or not, i.e. whether there exists an association for the given key or not.</text>
    <param>key the key to be searched for.</param>
    <return>the value associated with the specified key; &lt;tt&gt;0&lt;/tt&gt; if no such key is present.</return>
  </javadoc>
  <javadoc>
    <text>Returns the first key the given value is associated with.
 * It is often a good idea to first check with {@link #containsValue(int)} whether there exists an association from a key to this value.
 * Search order is guaranteed to be &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(DoubleProcedure)}.</text>
    <param>value the value to search for.</param>
    <return>the first key for which holds &lt;tt&gt;get(key) == value&lt;/tt&gt;; 
 * returns &lt;tt&gt;Double.NaN&lt;/tt&gt; if no such key exists.</return>
  </javadoc>
  <method type="double" name="keyOf">
    <declaration type="double[]" name="foundKey" />
    <declaration type="boolean" name="notFound" />
    <method type="boolean" name="apply">
      <declaration type="boolean" name="found" />
    </method>
  </method>
  <javadoc>
    <text>Returns a list filled with all keys contained in the receiver.
 * The returned list has a size that equals &lt;tt&gt;this.size()&lt;/tt&gt;.
 * Note: Keys are filled into the list in no particular order.
 * However, the order is &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(DoubleProcedure)}.
 * &lt;p&gt;
 * This method can be used to iterate over the keys of the receiver.</text>
    <return>the keys.</return>
  </javadoc>
  <method type="DoubleArrayList" name="keys">
    <declaration type="DoubleArrayList" name="list" />
  </method>
  <javadoc>
    <text>Fills all keys contained in the receiver into the specified list.
 * Fills the list, starting at index 0.
 * After this call returns the specified list has a new size that equals &lt;tt&gt;this.size()&lt;/tt&gt;.
 * Iteration order is guaranteed to be &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(DoubleProcedure)}.
 * &lt;p&gt;
 * This method can be used to iterate over the keys of the receiver.</text>
    <param>list the list to be filled, can have any size.</param>
  </javadoc>
  <method type="void" name="keys">
    <method type="boolean" name="apply" />
  </method>
  <javadoc>
    <text>Fills all keys &lt;i&gt;sorted ascending by their associated value&lt;/i&gt; into the specified list.
 * Fills into the list, starting at index 0.
 * After this call returns the specified list has a new size that equals &lt;tt&gt;this.size()&lt;/tt&gt;.
 * Primary sort criterium is "value", secondary sort criterium is "key". 
 * This means that if any two values are equal, the smaller key comes first.
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;br&gt;
 * &lt;tt&gt;keys = (8,7,6), values = (1,2,2) --&gt; keyList = (8,6,7)&lt;/tt&gt;</text>
    <param>keyList the list to be filled, can have any size.</param>
  </javadoc>
  <method type="void" name="keysSortedByValue" />
  <javadoc>
    <text>Fills all pairs satisfying a given condition into the specified lists.
 * Fills into the lists, starting at index 0.
 * After this call returns the specified lists both have a new size, the number of pairs satisfying the condition.
 * Iteration order is guaranteed to be &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(DoubleProcedure)}.
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;br&gt;
 * &lt;pre&gt;
 * DoubleIntProcedure condition = new DoubleIntProcedure() { // match even values only
 * public boolean apply(double key, int value) { return value%2==0; }
 * }
 * keys = (8,7,6), values = (1,2,2) --&gt; keyList = (6,8), valueList = (2,1)&lt;/tt&gt;
 * &lt;/pre&gt;</text>
    <param>condition    the condition to be matched. Takes the current key as first and the current value as second argument.</param>
    <param>keyList the list to be filled with keys, can have any size.</param>
    <param>valueList the list to be filled with values, can have any size.</param>
  </javadoc>
  <method type="void" name="pairsMatching">
    <method type="boolean" name="apply">
      <scope />
    </method>
  </method>
  <javadoc>
    <text>Fills all keys and values &lt;i&gt;sorted ascending by key&lt;/i&gt; into the specified lists.
 * Fills into the lists, starting at index 0.
 * After this call returns the specified lists both have a new size that equals &lt;tt&gt;this.size()&lt;/tt&gt;.
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;br&gt;
 * &lt;tt&gt;keys = (8,7,6), values = (1,2,2) --&gt; keyList = (6,7,8), valueList = (2,2,1)&lt;/tt&gt;</text>
    <param>keyList the list to be filled with keys, can have any size.</param>
    <param>valueList the list to be filled with values, can have any size.</param>
  </javadoc>
  <method type="void" name="pairsSortedByKey">
    <scope />
    <comment>keys(keyList);
values(valueList);

final double[] k = keyList.elements();
final int[] v = valueList.elements();
cern.colt.Swapper swapper = new cern.colt.Swapper() {
public void swap(int a, int b) {
int t1;	double t2;
t1 = v[a]; v[a] = v[b]; v[b] = t1;
t2 = k[a]; k[a] = k[b];	k[b] = t2;
}
};

cern.colt.function.IntComparator comp = new cern.colt.function.IntComparator() {
public int compare(int a, int b) {
return k[a]&lt;k[b] ? -1 : k[a]==k[b] ? 0 : 1;
}
};
cern.colt.MultiSorting.sort(0,keyList.size(),comp,swapper);</comment>
    <comment>this variant may be quicker</comment>
    <comment>cern.colt.map.OpenDoubleIntHashMap.hashCollisions = 0;</comment>
    <comment>System.out.println("collisions="+cern.colt.map.OpenDoubleIntHashMap.hashCollisions);</comment>
    <comment>System.out.println("collisions="+cern.colt.map.OpenDoubleIntHashMap.hashCollisions);</comment>
  </method>
  <javadoc>
    <text>Fills all keys and values &lt;i&gt;sorted ascending by value&lt;/i&gt; into the specified lists.
 * Fills into the lists, starting at index 0.
 * After this call returns the specified lists both have a new size that equals &lt;tt&gt;this.size()&lt;/tt&gt;.
 * Primary sort criterium is "value", secondary sort criterium is "key". 
 * This means that if any two values are equal, the smaller key comes first.
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;br&gt;
 * &lt;tt&gt;keys = (8,7,6), values = (1,2,2) --&gt; keyList = (8,6,7), valueList = (1,2,2)&lt;/tt&gt;</text>
    <param>keyList the list to be filled with keys, can have any size.</param>
    <param>valueList the list to be filled with values, can have any size.</param>
  </javadoc>
  <method type="void" name="pairsSortedByValue">
    <declaration type="double[]" name="k" />
    <declaration type="int[]" name="v" />
    <declaration type="cern.colt.Swapper" name="swapper" />
    <method type="void" name="swap">
      <declaration type="int" name="t1" />
      <declaration type="double" name="t2" />
    </method>
    <declaration type="cern.colt.function.IntComparator" name="comp" />
    <method type="int" name="compare" />
    <comment>cern.colt.map.OpenDoubleIntHashMap.hashCollisions = 0;</comment>
    <comment>System.out.println("collisions="+cern.colt.map.OpenDoubleIntHashMap.hashCollisions);</comment>
  </method>
  <method name="put" type="boolean" />
  <javadoc>
    <text>Associates the given key with the given value.
 * Replaces any old &lt;tt&gt;(key,someOtherValue)&lt;/tt&gt; association, if existing.</text>
    <param>key the key the value shall be associated with.</param>
    <param>value the value to be associated.</param>
    <return>&lt;tt&gt;true&lt;/tt&gt; if the receiver did not already contain such a key;
 * &lt;tt&gt;false&lt;/tt&gt; if the receiver did already contain such a key - the new value has now replaced the formerly associated value.</return>
  </javadoc>
  <method name="removeKey" type="boolean" />
  <javadoc>
    <text>Removes the given key with its associated element from the receiver, if present.</text>
    <param>key the key to be removed from the receiver.</param>
    <return>&lt;tt&gt;true&lt;/tt&gt; if the receiver contained the specified key, &lt;tt&gt;false&lt;/tt&gt; otherwise.</return>
  </javadoc>
  <javadoc>
    <text>Returns a string representation of the receiver, containing
 * the String representation of each key-value pair, sorted ascending by key.</text>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="DoubleArrayList" name="theKeys" />
    <declaration type="StringBuffer" name="buf" />
    <declaration type="int" name="maxIndex" />
    <scope>
      <declaration type="double" name="key" />
    </scope>
  </method>
  <javadoc>
    <text>Returns a string representation of the receiver, containing
 * the String representation of each key-value pair, sorted ascending by value.</text>
  </javadoc>
  <method type="String" name="toStringByValue">
    <declaration type="DoubleArrayList" name="theKeys" />
    <declaration type="StringBuffer" name="buf" />
    <declaration type="int" name="maxIndex" />
    <scope>
      <declaration type="double" name="key" />
    </scope>
  </method>
  <javadoc>
    <text>Returns a list filled with all values contained in the receiver.
 * The returned list has a size that equals &lt;tt&gt;this.size()&lt;/tt&gt;.
 * Iteration order is guaranteed to be &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(DoubleProcedure)}.
 * &lt;p&gt;
 * This method can be used to iterate over the values of the receiver.</text>
    <return>the values.</return>
  </javadoc>
  <method type="IntArrayList" name="values">
    <declaration type="IntArrayList" name="list" />
  </method>
  <javadoc>
    <text>Fills all values contained in the receiver into the specified list.
 * Fills the list, starting at index 0.
 * After this call returns the specified list has a new size that equals &lt;tt&gt;this.size()&lt;/tt&gt;.
 * Iteration order is guaranteed to be &lt;i&gt;identical&lt;/i&gt; to the order used by method {@link #forEachKey(DoubleProcedure)}.
 * &lt;p&gt;
 * This method can be used to iterate over the values of the receiver.</text>
    <param>list the list to be filled, can have any size.</param>
  </javadoc>
  <method type="void" name="values">
    <method type="boolean" name="apply" />
  </method>
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>public static int hashCollisions = 0;  for debug only</comment>
</class>
