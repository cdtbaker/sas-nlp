<?xml version="1.0" encoding="UTF-8"?>
<class name="QuickOpenIntIntHashMap">
  <javadoc>
    <text>Status: Experimental; Do not use for production yet. Hash map holding (key,value) associations of type &lt;tt&gt;(int--&gt;int)&lt;/tt&gt;; Automatically grows and shrinks as needed; Implemented using open addressing with double hashing.
 * First see the &lt;a href="package-summary.html"&gt;package summary&lt;/a&gt; and javadoc &lt;a href="package-tree.html"&gt;tree view&lt;/a&gt; to get the broad picture.
 * Implements open addressing with double hashing, using "Brent's variation".
 * Brent's variation slows insertions a bit down (not much) but reduces probes (collisions) for successful searches, in particular for large load factors.
 * (It does not improve unsuccessful searches.)
 * See D. Knuth, Searching and Sorting, 3rd ed., p.533-545</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
    <see>java.util.HashMap</see>
  </javadoc>
  <declaration type="int" name="totalProbesSaved" />
  <javadoc>
    <text>Constructs an empty map with default capacity and default load factors.</text>
  </javadoc>
  <method type="constructor" name="QuickOpenIntIntHashMap" />
  <javadoc>
    <text>Constructs an empty map with the specified initial capacity and default load factors.</text>
    <param>initialCapacity   the initial capacity of the map.</param>
    <throws>IllegalArgumentException if the initial capacity is less
 * than zero.</throws>
  </javadoc>
  <method type="constructor" name="QuickOpenIntIntHashMap" />
  <javadoc>
    <text>Constructs an empty map with
 * the specified initial capacity and the specified minimum and maximum load factor.</text>
    <param>initialCapacity   the initial capacity.</param>
    <param>minLoadFactor        the minimum load factor.</param>
    <param>maxLoadFactor        the maximum load factor.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;initialCapacity &lt; 0 || (minLoadFactor &lt; 0.0 || minLoadFactor &gt;= 1.0) || (maxLoadFactor &lt;= 0.0 || maxLoadFactor &gt;= 1.0) || (minLoadFactor &gt;= maxLoadFactor)&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="constructor" name="QuickOpenIntIntHashMap" />
  <javadoc>
    <text>Associates the given key with the given value.
 * Replaces any old &lt;tt&gt;(key,someOtherValue)&lt;/tt&gt; association, if existing.</text>
    <param>key the key the value shall be associated with.</param>
    <param>value the value to be associated.</param>
    <return>&lt;tt&gt;true&lt;/tt&gt; if the receiver did not already contain such a key;
 * &lt;tt&gt;false&lt;/tt&gt; if the receiver did already contain such a key - the new value has now replaced the formerly associated value.</return>
  </javadoc>
  <method type="boolean" name="put">
    <declaration type="int" name="key0" />
    <declaration type="int[]" name="tab" />
    <declaration type="byte[]" name="stat" />
    <declaration type="int" name="length" />
    <declaration type="int" name="hash" />
    <declaration type="int" name="i" />
    <declaration type="int" name="decrement" />
    <declaration type="int" name="t" />
    <declaration type="int" name="p0" />
    <scope />
    <scope />
    <scope>
      <declaration type="int" name="newCapacity" />
    </scope>
    <scope>
      <declaration type="int" name="pc" />
      <scope />
      <scope />
    </scope>
    <scope>
      <declaration type="int" name="newCapacity" />
    </scope>
    <comment>This is open addressing with double hashing, using "Brent's variation".
Brent's variation slows insertions a bit down (not much) but reduces probes (collisions) for successful searches, in particular for large load factors.
(It does not improve unsuccessful searches.)
See D. Knuth, Searching and Sorting, 3rd ed., p.533-545

h1(key) = hash % M
h2(key) = decrement = Max(1, hashM % M)
M is prime = capacity = table.length
probing positions are table[(h1-jh2) % M] for j=0,1,...
(M and h2 could also be chosen differently, but h2 is required to be relative prime to M.)</comment>
    <comment>System.out.println("insert search for (key,value)=("+key+","+value+") at i="+i+", dec="+decrement);</comment>
    <comment>stop if we find a removed or free slot, or if we find the key itself</comment>
    <comment>do NOT skip over removed slots (yes, open addressing is like that...)</comment>
    <comment>int comp = comparisons;</comment>
    <comment>the number of probes</comment>
    <comment>the first position to probe</comment>
    <comment>hashCollisions++;</comment>
    <comment>if (comparisons-comp&gt;0) System.out.println("probed "+(comparisons-comp)+" slots.");</comment>
    <comment>key already contained at slot i.</comment>
    <comment>not already contained, should be inserted at slot i.</comment>
    <comment>System.out.print("grow rehashing ");</comment>
    <comment>System.out.println("at distinct="+distinct+", capacity="+table.length+" to newCapacity="+newCapacity+" ...");</comment>
    <comment>Brent's variation does a local reorganization to reduce probes. It essentially means:
We test whether it is possible to move the association we probed first (table[p0]) out of the way.
If this is possible, it will reduce probes for the key to be inserted, since it takes its place; it gets hit earlier.
However, future probes for the key that we move out of the way will increase.
Thus we only move it out of the way, if we have a net gain, that is, if we save more probes than we loose.
For the first probe we safe more than we loose if the number of probes we needed was &gt;=2 (t&gt;=2).
If the first probe cannot be moved out of the way, we try the next probe (p1).
Now we safe more than we loose if t&gt;=3.
We repeat this until we find that we cannot gain or that we can indeed move p(x) out of the way.

Note: Under the great majority of insertions t&lt;=1, so the loop is entered very infrequently.</comment>
    <comment>System.out.println("t="+t);</comment>
    <comment>pc = (p0-j*decrement) % M, j=1,2,..</comment>
    <comment>not a free slot, continue searching for free slot to move to, or break.</comment>
    <comment>free or removed slot found, now move...</comment>
    <comment>System.out.println("copying p0="+p0+" to pc="+pc+", (key,val)=("+tab[p0]+","+values[p0]+"), saving "+(t-1)+" probes.");</comment>
    <comment>prepare to insert: table[p0]=key</comment>
    <comment>break loop</comment>
    <comment>System.out.println("inserting at i="+i);</comment>
    <comment>delta</comment>
  </method>
  <javadoc>
    <text>Rehashes the contents of the receiver into a new table
 * with a smaller or larger capacity.
 * This method is called automatically when the
 * number of keys in the receiver exceeds the high water mark or falls below the low water mark.</text>
  </javadoc>
  <method type="void" name="rehash">
    <declaration type="int" name="oldCapacity" />
    <declaration type="int[]" name="oldTable" />
    <declaration type="int[]" name="oldValues" />
    <declaration type="byte[]" name="oldState" />
    <declaration type="int[]" name="newTable" />
    <declaration type="int[]" name="newValues" />
    <declaration type="byte[]" name="newState" />
    <declaration type="int" name="tmp" />
    <scope>
      <scope />
    </scope>
    <comment>if (oldCapacity == newCapacity) return;</comment>
    <comment>delta</comment>
    <comment>switch of watermarks</comment>
    <comment>int element = oldTable[i];
int index = indexOfInsertion(element);
newTable[index]=element;
newValues[index]=oldValues[i];
newState[index]=FULL;</comment>
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>benchmark only</comment>
</class>
