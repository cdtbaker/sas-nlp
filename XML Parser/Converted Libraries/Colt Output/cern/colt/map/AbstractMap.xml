<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractMap">
  <javadoc>
    <text>Abstract base class for hash maps holding objects or primitive data types such as &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, etc. as keys and/or values.
 * First see the &lt;a href="package-summary.html"&gt;package summary&lt;/a&gt; and javadoc &lt;a href="package-tree.html"&gt;tree view&lt;/a&gt; to get the broad picture.
 * &lt;p&gt;
 * Note that implementations are not synchronized.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
    <see>java.util.HashMap</see>
  </javadoc>
  <javadoc>
    <text>The number of distinct associations in the map; its "size()".</text>
  </javadoc>
  <declaration type="int" name="distinct" />
  <javadoc>
    <text>The table capacity c=table.length always satisfies the invariant
 * &lt;tt&gt;c * minLoadFactor &lt;= s &lt;= c * maxLoadFactor&lt;/tt&gt;, where s=size() is the number of associations currently contained.
 * The term "c * minLoadFactor" is called the "lowWaterMark", "c * maxLoadFactor" is called the "highWaterMark".
 * In other words, the table capacity (and proportionally the memory used by this class) oscillates within these constraints.
 * The terms are precomputed and cached to avoid recalculating them each time put(..) or removeKey(...) is called.</text>
  </javadoc>
  <declaration type="int" name="lowWaterMark" />
  <declaration type="int" name="highWaterMark" />
  <javadoc>
    <text>The minimum load factor for the hashtable.</text>
  </javadoc>
  <declaration type="double" name="minLoadFactor" />
  <javadoc>
    <text>The maximum load factor for the hashtable.</text>
  </javadoc>
  <declaration type="double" name="maxLoadFactor" />
  <declaration type="int" name="defaultCapacity" />
  <declaration type="double" name="defaultMinLoadFactor" />
  <declaration type="double" name="defaultMaxLoadFactor" />
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="AbstractMap" />
  <javadoc>
    <text>Chooses a new prime table capacity optimized for growing that (approximately) satisfies the invariant
 * &lt;tt&gt;c * minLoadFactor &lt;= size &lt;= c * maxLoadFactor&lt;/tt&gt;
 * and has at least one FREE slot for the given size.</text>
  </javadoc>
  <method type="int" name="chooseGrowCapacity" />
  <javadoc>
    <text>Returns new high water mark threshold based on current capacity and maxLoadFactor.</text>
    <return>int the new threshold.</return>
  </javadoc>
  <method type="int" name="chooseHighWaterMark">
    <comment>makes sure there is always at least one FREE slot</comment>
  </method>
  <javadoc>
    <text>Returns new low water mark threshold based on current capacity and minLoadFactor.</text>
    <return>int the new threshold.</return>
  </javadoc>
  <method type="int" name="chooseLowWaterMark" />
  <javadoc>
    <text>Chooses a new prime table capacity neither favoring shrinking nor growing,
 * that (approximately) satisfies the invariant
 * &lt;tt&gt;c * minLoadFactor &lt;= size &lt;= c * maxLoadFactor&lt;/tt&gt;
 * and has at least one FREE slot for the given size.</text>
  </javadoc>
  <method type="int" name="chooseMeanCapacity" />
  <javadoc>
    <text>Chooses a new prime table capacity optimized for shrinking that (approximately) satisfies the invariant
 * &lt;tt&gt;c * minLoadFactor &lt;= size &lt;= c * maxLoadFactor&lt;/tt&gt;
 * and has at least one FREE slot for the given size.</text>
  </javadoc>
  <method type="int" name="chooseShrinkCapacity" />
  <method name="clear" type="void" />
  <javadoc>
    <text>Removes all (key,value) associations from the receiver.</text>
  </javadoc>
  <javadoc>
    <text>Ensures that the receiver can hold at least the specified number of elements without needing to allocate new internal memory.
 * If necessary, allocates new internal memory and increases the capacity of the receiver.
 * &lt;p&gt;
 * This method never need be called; it is for performance tuning only.
 * Calling this method before &lt;tt&gt;put()&lt;/tt&gt;ing a large number of associations boosts performance,
 * because the receiver will grow only once instead of potentially many times.
 * &lt;p&gt;
 * &lt;b&gt;This default implementation does nothing.&lt;/b&gt; Override this method if necessary.</text>
    <param>minCapacity   the desired minimum capacity.</param>
  </javadoc>
  <method type="void" name="ensureCapacity" />
  <javadoc>
    <text>Returns &lt;tt&gt;true&lt;/tt&gt; if the receiver contains no (key,value) associations.</text>
    <return>&lt;tt&gt;true&lt;/tt&gt; if the receiver contains no (key,value) associations.</return>
  </javadoc>
  <method type="boolean" name="isEmpty" />
  <javadoc>
    <text>Returns a prime number which is &lt;code&gt;&amp;gt;= desiredCapacity&lt;/code&gt; and very close to &lt;code&gt;desiredCapacity&lt;/code&gt; (within 11% if &lt;code&gt;desiredCapacity &amp;gt;= 1000&lt;/code&gt;).</text>
    <param>desiredCapacity the capacity desired by the user.</param>
    <return>the capacity which should be used for a hashtable.</return>
  </javadoc>
  <method type="int" name="nextPrime" />
  <javadoc>
    <text>Initializes the receiver.
 * You will almost certainly need to override this method in subclasses to initialize the hash table.</text>
    <param>initialCapacity   the initial capacity of the receiver.</param>
    <param>minLoadFactor     the minLoadFactor of the receiver.</param>
    <param>maxLoadFactor     the maxLoadFactor of the receiver.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;initialCapacity &lt; 0 || (minLoadFactor &lt; 0.0 || minLoadFactor &gt;= 1.0) || (maxLoadFactor &lt;= 0.0 || maxLoadFactor &gt;= 1.0) || (minLoadFactor &gt;= maxLoadFactor)&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="setUp" />
  <javadoc>
    <text>Returns the number of (key,value) associations currently contained.</text>
    <return>the number of (key,value) associations currently contained.</return>
  </javadoc>
  <method type="int" name="size" />
  <javadoc>
    <text>Trims the capacity of the receiver to be the receiver's current 
 * size. Releases any superfluous internal memory. An application can use this operation to minimize the 
 * storage of the receiver.
 * &lt;p&gt;
 * This default implementation does nothing. Override this method if necessary.</text>
  </javadoc>
  <method type="void" name="trimToSize" />
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>public static boolean debug = false;  debug only</comment>
</class>
