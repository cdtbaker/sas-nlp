<?xml version="1.0" encoding="UTF-8"?>
<class name="Timer">
  <javadoc>
    <text>A handy stopwatch for benchmarking.
 * Like a real stop watch used on ancient running tracks you can start the watch, stop it,
 * start it again, stop it again, display the elapsed time and reset the watch.</text>
  </javadoc>
  <declaration type="long" name="baseTime" />
  <declaration type="long" name="elapsedTime" />
  <declaration type="long" name="UNIT" />
  <javadoc>
    <text>Constructs a new timer, initially not started. Use start() to start the timer.</text>
  </javadoc>
  <method type="constructor" name="Timer" />
  <javadoc>
    <text>Prints the elapsed time on System.out</text>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="Timer" name="display" />
  <javadoc>
    <text>Same as &lt;tt&gt;seconds()&lt;/tt&gt;.</text>
  </javadoc>
  <method type="float" name="elapsedTime" />
  <javadoc>
    <text>Returns the elapsed time in milli seconds; does not stop the timer, if started.</text>
  </javadoc>
  <method type="long" name="millis">
    <declaration type="long" name="elapsed" />
    <scope />
    <comment>we are started</comment>
  </method>
  <javadoc>
    <text>&lt;tt&gt;T = this - other&lt;/tt&gt;; Constructs and returns a new timer which is the difference of the receiver and the other timer.
 * The new timer is not started.</text>
    <param>other the timer to subtract.</param>
    <return>a new timer.</return>
  </javadoc>
  <method type="Timer" name="minus">
    <declaration type="Timer" name="copy" />
  </method>
  <javadoc>
    <text>Returns the elapsed time in minutes; does not stop the timer, if started.</text>
  </javadoc>
  <method type="float" name="minutes" />
  <javadoc>
    <text>&lt;tt&gt;T = this + other&lt;/tt&gt;; Constructs and returns a new timer which is the sum of the receiver and the other timer.
 * The new timer is not started.</text>
    <param>other the timer to add.</param>
    <return>a new timer.</return>
  </javadoc>
  <method type="Timer" name="plus">
    <declaration type="Timer" name="copy" />
  </method>
  <javadoc>
    <text>Resets the timer.</text>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="Timer" name="reset" />
  <javadoc>
    <text>Returns the elapsed time in seconds; does not stop the timer, if started.</text>
  </javadoc>
  <method type="float" name="seconds" />
  <javadoc>
    <text>Starts the timer.</text>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="Timer" name="start" />
  <javadoc>
    <text>Stops the timer. You can start it again later, if necessary.</text>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="Timer" name="stop">
    <scope />
  </method>
  <javadoc>
    <text>Shows how to use a timer in convenient ways.</text>
  </javadoc>
  <method type="void" name="test">
    <declaration type="Timer" name="t" />
    <declaration type="int" name="j" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>benchmark this piece</comment>
    <comment>do something we do not want to benchmark</comment>
    <comment>benchmark another piece and add to last benchmark</comment>
    <comment>benchmark yet another piece independently</comment>
    <comment>set timer to zero</comment>
  </method>
  <javadoc>
    <text>Returns a String representation of the receiver.</text>
  </javadoc>
  <method type="String" name="toString" />
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
