<?xml version="1.0" encoding="UTF-8"?>
<class name="FloatListAdapter">
  <javadoc>
    <text>Adapter that permits an {@link cern.colt.list.AbstractFloatList} to be viewed and treated as a JDK 1.2 {@link java.util.AbstractList}.
 * Makes the contained list compatible with the JDK 1.2 Collections Framework.
 * &lt;p&gt;
 * Any attempt to pass elements other than &lt;tt&gt;java.lang.Number&lt;/tt&gt; to setter methods will throw a &lt;tt&gt;java.lang.ClassCastException&lt;/tt&gt;.
 * &lt;tt&gt;java.lang.Number.floatValue()&lt;/tt&gt; is used to convert objects into primitive values which are then stored in the backing templated list.
 * Getter methods return &lt;tt&gt;java.lang.Float&lt;/tt&gt; objects.</text>
  </javadoc>
  <declaration type="AbstractFloatList" name="content" />
  <javadoc>
    <text>Constructs a list backed by the specified content list.</text>
  </javadoc>
  <method type="constructor" name="FloatListAdapter" />
  <javadoc>
    <text>Inserts the specified element at the specified position in this list
 * (optional operation).  Shifts the element currently at that position
 * (if any) and any subsequent elements to the right (adds one to their
 * indices).&lt;p&gt;</text>
    <param>index index at which the specified element is to be inserted.</param>
    <param>element element to be inserted.</param>
    <throws>ClassCastException if the class of the specified element
 * prevents it from being added to this list.</throws>
    <throws>IllegalArgumentException if some aspect of the specified
 * element prevents it from being added to this list.</throws>
    <throws>IndexOutOfBoundsException index is out of range (&lt;tt&gt;index &amp;lt;
 * 0 || index &amp;gt; size()&lt;/tt&gt;).</throws>
  </javadoc>
  <method type="void" name="add" />
  <javadoc>
    <text>Returns the element at the specified position in this list.</text>
    <param>index index of element to return.</param>
    <return>the element at the specified position in this list.</return>
    <throws>IndexOutOfBoundsException if the given index is out of range
 * (&lt;tt&gt;index &amp;lt; 0 || index &amp;gt;= size()&lt;/tt&gt;).</throws>
  </javadoc>
  <method type="Object" name="get" />
  <javadoc>
    <text>Transforms an element of a primitive data type to an object.</text>
  </javadoc>
  <method type="Object" name="object" />
  <javadoc>
    <text>Removes the element at the specified position in this list (optional
 * operation).  Shifts any subsequent elements to the left (subtracts one
 * from their indices).  Returns the element that was removed from the
 * list.&lt;p&gt;</text>
    <param>index the index of the element to remove.</param>
    <return>the element previously at the specified position.</return>
    <throws>IndexOutOfBoundsException if the specified index is out of
 * range (&lt;tt&gt;index &amp;lt; 0 || index &amp;gt;= size()&lt;/tt&gt;).</throws>
  </javadoc>
  <method type="Object" name="remove">
    <declaration type="Object" name="old" />
  </method>
  <javadoc>
    <text>Replaces the element at the specified position in this list with the
 * specified element (optional operation). &lt;p&gt;</text>
    <param>index index of element to replace.</param>
    <param>element element to be stored at the specified position.</param>
    <return>the element previously at the specified position.</return>
    <throws>ClassCastException if the class of the specified element
 * prevents it from being added to this list.</throws>
    <throws>IllegalArgumentException if some aspect of the specified
 * element prevents it from being added to this list.</throws>
    <throws>IndexOutOfBoundsException if the specified index is out of
 * range (&lt;tt&gt;index &amp;lt; 0 || index &amp;gt;= size()&lt;/tt&gt;).</throws>
  </javadoc>
  <method type="Object" name="set">
    <declaration type="Object" name="old" />
  </method>
  <javadoc>
    <text>Returns the number of elements in this list.</text>
    <return>the number of elements in this list.</return>
  </javadoc>
  <method type="int" name="size" />
  <javadoc>
    <text>Transforms an object element to a primitive data type.</text>
  </javadoc>
  <method type="float" name="value" />
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
