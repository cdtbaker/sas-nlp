<?xml version="1.0" encoding="UTF-8"?>
<class name="DistinctNumberList">
  <javadoc>
    <text>Resizable compressed list holding numbers; based on the fact that a number from a large list with few distinct values need not take more than &lt;tt&gt;log(distinctValues)&lt;/tt&gt; bits; implemented with a &lt;tt&gt;MinMaxNumberList&lt;/tt&gt;.
 * First see the &lt;a href="package-summary.html"&gt;package summary&lt;/a&gt; and javadoc &lt;a href="package-tree.html"&gt;tree view&lt;/a&gt; to get the broad picture.
 * &lt;p&gt;
 * This class can, for example, be useful when making large lists of numbers persistent.
 * Also useful when very large lists would otherwise consume too much main memory.
 * &lt;p&gt;
 * You can add, get and set elements quite similar to &lt;tt&gt;java.util.ArrayList&lt;/tt&gt;.
 * &lt;p&gt;
 * &lt;b&gt;Applicability:&lt;/b&gt; Applicable if data is highly skewed and legal values are known in advance. Robust in the presence of "outliers".
 * &lt;p&gt;
 * &lt;b&gt;Performance:&lt;/b&gt; Operations &lt;tt&gt;get()&lt;/tt&gt;, &lt;tt&gt;size()&lt;/tt&gt; and &lt;tt&gt;clear()&lt;/tt&gt; are &lt;tt&gt;O(1)&lt;/tt&gt;, i.e. run in constant time.
 * Operations like &lt;tt&gt;add()&lt;/tt&gt; and &lt;tt&gt;set()&lt;/tt&gt; are &lt;tt&gt;O(log(distinctValues.length))&lt;/tt&gt;.
 * &lt;p&gt;
 * Upon instantiation a contract is signed that defines the distinct values allowed to be hold in this list.
 * It is not legal to store elements other than specified by the contract.
 * Any attempt to violate the contract will throw an &lt;tt&gt;IllegalArgumentException&lt;/tt&gt;.
 * &lt;p&gt;
 * Although access methods are only defined on &lt;tt&gt;long&lt;/tt&gt; values you can also store
 * all other primitive data types: &lt;tt&gt;boolean&lt;/tt&gt;, &lt;tt&gt;byte&lt;/tt&gt;, &lt;tt&gt;short&lt;/tt&gt;, &lt;tt&gt;int&lt;/tt&gt;, &lt;tt&gt;long&lt;/tt&gt;, &lt;tt&gt;float&lt;/tt&gt;, &lt;tt&gt;double&lt;/tt&gt; and &lt;tt&gt;char&lt;/tt&gt;.
 * You can do this by explicitly representing them as &lt;tt&gt;long&lt;/tt&gt; values.
 * Use casts for discrete data types.
 * Use the methods of &lt;tt&gt;java.lang.Float&lt;/tt&gt; and &lt;tt&gt;java.lang.Double&lt;/tt&gt; for floating point data types:
 * Recall that with those methods you can convert any floating point value to a &lt;tt&gt;long&lt;/tt&gt; value and back &lt;b&gt;without losing any precision&lt;/b&gt;:
 * &lt;p&gt;
 * &lt;b&gt;Example usage:&lt;/b&gt;&lt;pre&gt;
 * DistinctNumberList list = ... instantiation goes here
 * double d1 = 1.234;
 * list.add(Double.doubleToLongBits(d1));
 * double d2 = Double.longBitsToDouble(list.get(0));
 * if (d1!=d2) System.out.println("This is impossible!");
 * DistinctNumberList list2 = ... instantiation goes here
 * float f1 = 1.234f;
 * list2.add((long) Float.floatToIntBits(f1));
 * float f2 = Float.intBitsToFloat((int)list2.get(0));
 * if (f1!=f2) System.out.println("This is impossible!");
 * &lt;/pre&gt;</text>
    <see>LongArrayList</see>
    <see>MinMaxNumberList</see>
    <see>java.lang.Float</see>
    <see>java.lang.Double</see>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="long[]" name="distinctValues" />
  <declaration type="MinMaxNumberList" name="elements" />
  <javadoc>
    <text>Constructs an empty list with the specified initial capacity and the specified distinct values allowed to be hold in this list.</text>
    <param>distinctValues   an array sorted ascending containing the distinct values allowed to be hold in this list.</param>
    <param>initialCapacity   the number of elements the receiver can hold without auto-expanding itself by allocating new internal memory.</param>
  </javadoc>
  <method type="constructor" name="DistinctNumberList" />
  <javadoc>
    <text>Appends the specified element to the end of this list.</text>
    <param>element element to be appended to this list.</param>
  </javadoc>
  <method type="void" name="add">
    <comment>overridden for performance only.</comment>
  </method>
  <javadoc>
    <text>Returns the code that shall be stored for the given element.</text>
  </javadoc>
  <method type="int" name="codeOf">
    <declaration type="int" name="index" />
  </method>
  <javadoc>
    <text>Ensures that the receiver can hold at least the specified number of elements without needing to allocate new internal memory.
 * If necessary, allocates new internal memory and increases the capacity of the receiver.</text>
    <param>minCapacity   the desired minimum capacity.</param>
  </javadoc>
  <method type="void" name="ensureCapacity" />
  <javadoc>
    <text>Returns the element at the specified position in the receiver; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions. 
 * Provided with invalid parameters this method may return invalid elements without throwing any exception!
 * &lt;b&gt;You should only use this method when you are absolutely sure that the index is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;index &amp;gt;= 0 &amp;&amp; index &amp;lt; size()&lt;/tt&gt;.</text>
    <param>index index of element to return.</param>
  </javadoc>
  <method type="long" name="getQuick" />
  <javadoc>
    <text>Removes from the receiver all elements whose index is between
 * &lt;code&gt;from&lt;/code&gt;, inclusive and &lt;code&gt;to&lt;/code&gt;, inclusive.  Shifts any succeeding
 * elements to the left (reduces their index).
 * This call shortens the list by &lt;tt&gt;(to - from + 1)&lt;/tt&gt; elements.</text>
    <param>from index of first element to be removed.</param>
    <param>to index of last element to be removed.</param>
    <exception>IndexOutOfBoundsException index is out of range (&lt;tt&gt;size()&amp;gt;0 &amp;&amp; (from&amp;lt;0 || from&amp;gt;to || to&amp;gt;=size())&lt;/tt&gt;).</exception>
  </javadoc>
  <method type="void" name="removeFromTo" />
  <javadoc>
    <text>Replaces the element at the specified position in the receiver with the specified element; &lt;b&gt;WARNING:&lt;/b&gt; Does not check preconditions. 
 * Provided with invalid parameters this method may access invalid indexes without throwing any exception!
 * &lt;b&gt;You should only use this method when you are absolutely sure that the index is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;index &amp;gt;= 0 &amp;&amp; index &amp;lt; size()&lt;/tt&gt;.</text>
    <param>index index of element to replace.</param>
    <param>element element to be stored at the specified position.</param>
  </javadoc>
  <method type="void" name="setQuick" />
  <javadoc>
    <text>Sets the size of the receiver without modifying it otherwise.
 * This method should not release or allocate new memory but simply set some instance variable like &lt;tt&gt;size&lt;/tt&gt;.</text>
  </javadoc>
  <method type="void" name="setSizeRaw" />
  <javadoc>
    <text>Sets the receiver to an empty list with the specified initial capacity and the specified distinct values allowed to be hold in this list.</text>
    <param>distinctValues   an array sorted ascending containing the distinct values allowed to be hold in this list.</param>
    <param>initialCapacity   the number of elements the receiver can hold without auto-expanding itself by allocating new internal memory.</param>
  </javadoc>
  <method type="void" name="setUp">
    <comment>java.util.Arrays.sort(this.distinctElements);</comment>
  </method>
  <javadoc>
    <text>Trims the capacity of the receiver to be the receiver's current 
 * size. An application can use this operation to minimize the 
 * storage of the receiver.</text>
  </javadoc>
  <method type="void" name="trimToSize" />
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
