<?xml version="1.0" encoding="UTF-8"?>
<class name="DenseDoubleMatrix2D">
  <javadoc>
    <text>Dense 2-d matrix holding &lt;tt&gt;double&lt;/tt&gt; elements.
 * First see the &lt;a href="package-summary.html"&gt;package summary&lt;/a&gt; and javadoc &lt;a href="package-tree.html"&gt;tree view&lt;/a&gt; to get the broad picture.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt;
 * &lt;p&gt;
 * Internally holds one single contigous one-dimensional array, addressed in row major. 
 * Note that this implementation is not synchronized.
 * &lt;p&gt;
 * &lt;b&gt;Memory requirements:&lt;/b&gt;
 * &lt;p&gt;
 * &lt;tt&gt;memory [bytes] = 8*rows()*columns()&lt;/tt&gt;.
 * Thus, a 1000*1000 matrix uses 8 MB.
 * &lt;p&gt;
 * &lt;b&gt;Time complexity:&lt;/b&gt;
 * &lt;p&gt;
 * &lt;tt&gt;O(1)&lt;/tt&gt; (i.e. constant time) for the basic operations
 * &lt;tt&gt;get&lt;/tt&gt;, &lt;tt&gt;getQuick&lt;/tt&gt;, &lt;tt&gt;set&lt;/tt&gt;, &lt;tt&gt;setQuick&lt;/tt&gt; and &lt;tt&gt;size&lt;/tt&gt;,
 * &lt;p&gt;
 * Cells are internally addressed in row-major.
 * Applications demanding utmost speed can exploit this fact.
 * Setting/getting values in a loop row-by-row is quicker than column-by-column.
 * Thus
 * &lt;pre&gt;
 * for (int row=0; row &lt; rows; row++) {
 * for (int column=0; column &lt; columns; column++) {
 * matrix.setQuick(row,column,someValue);
 * }
 * }
 * &lt;/pre&gt;
 * is quicker than
 * &lt;pre&gt;
 * for (int column=0; column &lt; columns; column++) {
 * for (int row=0; row &lt; rows; row++) {
 * matrix.setQuick(row,column,someValue);
 * }
 * }
 * &lt;/pre&gt;</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>The elements of this matrix.
 * elements are stored in row major, i.e.
 * index==row*columns + column
 * columnOf(index)==index%columns
 * rowOf(index)==index/columns
 * i.e. {row0 column0..m}, {row1 column0..m}, ..., {rown column0..m}</text>
  </javadoc>
  <declaration type="double[]" name="elements" />
  <javadoc>
    <text>Constructs a matrix with a copy of the given values.
 * &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[row][column]&lt;/tt&gt;
 * and have exactly the same number of columns in every row.
 * &lt;p&gt;
 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.</text>
    <param>values The values to be filled into the new matrix.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;for any 1 &amp;lt;= row &amp;lt; values.length: values[row].length != values[row-1].length&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="constructor" name="DenseDoubleMatrix2D" />
  <javadoc>
    <text>Constructs a matrix with a given number of rows and columns.
 * All entries are initially &lt;tt&gt;0&lt;/tt&gt;.</text>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;rows&lt;0 || columns&lt;0 || (double)columns*rows &gt; Integer.MAX_VALUE&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="constructor" name="DenseDoubleMatrix2D" />
  <javadoc>
    <text>Constructs a view with the given parameters.</text>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <param>elements the cells.</param>
    <param>rowZero the position of the first element.</param>
    <param>columnZero the position of the first element.</param>
    <param>rowStride the number of elements between two rows, i.e. &lt;tt&gt;index(i+1,j)-index(i,j)&lt;/tt&gt;.</param>
    <param>columnStride the number of elements between two columns, i.e. &lt;tt&gt;index(i,j+1)-index(i,j)&lt;/tt&gt;.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;rows&lt;0 || columns&lt;0 || (double)columns*rows &gt; Integer.MAX_VALUE&lt;/tt&gt; or flip's are illegal.</throws>
  </javadoc>
  <method type="constructor" name="DenseDoubleMatrix2D" />
  <javadoc>
    <text>Sets all cells to the state specified by &lt;tt&gt;values&lt;/tt&gt;.
 * &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[row][column]&lt;/tt&gt;
 * and have exactly the same number of rows and columns as the receiver.
 * &lt;p&gt;
 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.</text>
    <param>values the values to be filled into the cells.</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
    <throws>IllegalArgumentException if &lt;tt&gt;values.length != rows() || for any 0 &amp;lt;= row &amp;lt; rows(): values[row].length != columns()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="DoubleMatrix2D" name="assign">
    <scope>
      <declaration type="int" name="i" />
      <scope>
        <declaration type="double[]" name="currentRow" />
      </scope>
    </scope>
    <scope />
  </method>
  <javadoc>
    <text>Sets all cells to the state specified by &lt;tt&gt;value&lt;/tt&gt;.</text>
    <param>value the value to be filled into the cells.</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="assign">
    <declaration type="double[]" name="elems" />
    <declaration type="int" name="index" />
    <declaration type="int" name="cs" />
    <declaration type="int" name="rs" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Assigns the result of a function to each cell; &lt;tt&gt;x[row,col] = function(x[row,col])&lt;/tt&gt;.
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;pre&gt;
 * matrix = 2 x 2 matrix
 * 0.5 1.5      
 * 2.5 3.5
 * // change each cell to its sine
 * matrix.assign(cern.jet.math.Functions.sin);
 * --&gt;
 * 2 x 2 matrix
 * 0.479426  0.997495 
 * 0.598472 -0.350783
 * &lt;/pre&gt;
 * For further examples, see the &lt;a href="package-summary.html#FunctionObjects"&gt;package doc&lt;/a&gt;.</text>
    <param>function a function object taking as argument the current cell's value.</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
    <see>cern.jet.math.Functions</see>
  </javadoc>
  <method type="DoubleMatrix2D" name="assign">
    <declaration type="double[]" name="elems" />
    <declaration type="int" name="index" />
    <declaration type="int" name="cs" />
    <declaration type="int" name="rs" />
    <scope>
      <declaration type="double" name="multiplicator" />
      <scope>
        <scope />
      </scope>
    </scope>
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>specialization for speed</comment>
    <comment>x[i] = mult*x[i]</comment>
    <comment>the general case</comment>
    <comment>the general case x[i] = f(x[i])</comment>
  </method>
  <javadoc>
    <text>Replaces all cell values of the receiver with the values of another matrix.
 * Both matrices must have the same number of rows and columns.
 * If both matrices share the same cells (as is the case if they are views derived from the same matrix) and intersect in an ambiguous way, then replaces &lt;i&gt;as if&lt;/i&gt; using an intermediate auxiliary deep copy of &lt;tt&gt;other&lt;/tt&gt;.</text>
    <param>source   the source matrix to copy from (may be identical to the receiver).</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
    <throws>IllegalArgumentException if &lt;tt&gt;columns() != source.columns() || rows() != source.rows()&lt;/tt&gt;</throws>
  </javadoc>
  <method type="DoubleMatrix2D" name="assign">
    <scope />
    <declaration type="DenseDoubleMatrix2D" name="other" />
    <scope />
    <scope>
      <declaration type="DoubleMatrix2D" name="c" />
      <scope />
    </scope>
    <declaration type="double[]" name="elems" />
    <declaration type="double[]" name="otherElems" />
    <declaration type="int" name="cs" />
    <declaration type="int" name="ocs" />
    <declaration type="int" name="rs" />
    <declaration type="int" name="ors" />
    <declaration type="int" name="otherIndex" />
    <declaration type="int" name="index" />
    <scope>
      <scope />
    </scope>
    <comment>overriden for performance only</comment>
    <comment>nothing to do</comment>
    <comment>quickest</comment>
    <comment>should not happen</comment>
  </method>
  <javadoc>
    <text>Assigns the result of a function to each cell; &lt;tt&gt;x[row,col] = function(x[row,col],y[row,col])&lt;/tt&gt;.
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;pre&gt;
 * // assign x[row,col] = x[row,col]&lt;sup&gt;y[row,col]&lt;/sup&gt;
 * m1 = 2 x 2 matrix 
 * 0 1 
 * 2 3
 * m2 = 2 x 2 matrix 
 * 0 2 
 * 4 6
 * m1.assign(m2, cern.jet.math.Functions.pow);
 * --&gt;
 * m1 == 2 x 2 matrix
 * 1   1 
 * 16 729
 * &lt;/pre&gt;
 * For further examples, see the &lt;a href="package-summary.html#FunctionObjects"&gt;package doc&lt;/a&gt;.</text>
    <param>y the secondary matrix to operate on.</param>
    <param>function a function object taking as first argument the current cell's value of &lt;tt&gt;this&lt;/tt&gt;,
 * and as second argument the current cell's value of &lt;tt&gt;y&lt;/tt&gt;,</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
    <throws>IllegalArgumentException if &lt;tt&gt;columns() != other.columns() || rows() != other.rows()&lt;/tt&gt;</throws>
    <see>cern.jet.math.Functions</see>
  </javadoc>
  <method type="DoubleMatrix2D" name="assign">
    <scope />
    <declaration type="DenseDoubleMatrix2D" name="other" />
    <declaration type="double[]" name="elems" />
    <declaration type="double[]" name="otherElems" />
    <declaration type="int" name="cs" />
    <declaration type="int" name="ocs" />
    <declaration type="int" name="rs" />
    <declaration type="int" name="ors" />
    <declaration type="int" name="otherIndex" />
    <declaration type="int" name="index" />
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <scope>
      <declaration type="double" name="multiplicator" />
      <scope />
      <scope>
        <scope>
          <scope />
        </scope>
      </scope>
      <scope>
        <scope>
          <scope />
        </scope>
      </scope>
      <scope>
        <scope>
          <scope />
        </scope>
      </scope>
    </scope>
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>overriden for performance only</comment>
    <comment>specialized for speed</comment>
    <comment>x[i] = x[i] * y[i]</comment>
    <comment>x[i] = x[i] / y[i]</comment>
    <comment>x[i] = x[i] + 0*y[i]</comment>
    <comment>x[i] = x[i] + y[i]</comment>
    <comment>x[i] = x[i] - y[i]</comment>
    <comment>the general case</comment>
    <comment>x[i] = x[i] + mult*y[i]</comment>
    <comment>the general case x[i] = f(x[i],y[i])</comment>
  </method>
  <javadoc>
    <text>Returns the matrix cell value at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt;.
 * &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.</text>
    <param>row   the index of the row-coordinate.</param>
    <param>column   the index of the column-coordinate.</param>
    <return>the value at the specified coordinate.</return>
  </javadoc>
  <method type="double" name="getQuick">
    <comment>if (debug) if (column&lt;0 || column&gt;=columns || row&lt;0 || row&gt;=rows) throw new IndexOutOfBoundsException("row:"+row+", column:"+column);</comment>
    <comment>return elements[index(row,column)];</comment>
    <comment>manually inlined:</comment>
  </method>
  <javadoc>
    <text>Returns &lt;tt&gt;true&lt;/tt&gt; if both matrices share common cells.
 * More formally, returns &lt;tt&gt;true&lt;/tt&gt; if &lt;tt&gt;other != null&lt;/tt&gt; and at least one of the following conditions is met
 * &lt;ul&gt;
 * &lt;li&gt;the receiver is a view of the other matrix
 * &lt;li&gt;the other matrix is a view of the receiver
 * &lt;li&gt;&lt;tt&gt;this == other&lt;/tt&gt;
 * &lt;/ul&gt;</text>
  </javadoc>
  <method type="boolean" name="haveSharedCellsRaw">
    <scope>
      <declaration type="SelectedDenseDoubleMatrix2D" name="otherMatrix" />
    </scope>
    <scope>
      <declaration type="DenseDoubleMatrix2D" name="otherMatrix" />
    </scope>
  </method>
  <javadoc>
    <text>Returns the position of the given coordinate within the (virtual or non-virtual) internal 1-dimensional array.</text>
    <param>row   the index of the row-coordinate.</param>
    <param>column   the index of the column-coordinate.</param>
  </javadoc>
  <method type="int" name="index">
    <comment>return super.index(row,column);</comment>
    <comment>manually inlined for speed:</comment>
  </method>
  <javadoc>
    <text>Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified number of rows and columns.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt;, etc.
 * In general, the new matrix should have internal parametrization as similar as possible.</text>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <return>a new empty matrix of the same dynamic type.</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="like" />
  <javadoc>
    <text>Construct and returns a new 1-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, entirelly independent of the receiver.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt;, etc.</text>
    <param>size the number of cells the matrix shall have.</param>
    <return>a new matrix of the corresponding dynamic type.</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="like1D" />
  <javadoc>
    <text>Construct and returns a new 1-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, sharing the same cells.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt;, etc.</text>
    <param>size the number of cells the matrix shall have.</param>
    <param>zero the index of the first element.</param>
    <param>stride the number of indexes between any two elements, i.e. &lt;tt&gt;index(i+1)-index(i)&lt;/tt&gt;.</param>
    <return>a new matrix of the corresponding dynamic type.</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="like1D" />
  <javadoc>
    <text>Sets the matrix cell at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt; to the specified value.
 * &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.</text>
    <param>row   the index of the row-coordinate.</param>
    <param>column   the index of the column-coordinate.</param>
    <param>value the value to be filled into the specified cell.</param>
  </javadoc>
  <method type="void" name="setQuick">
    <comment>if (debug) if (column&lt;0 || column&gt;=columns || row&lt;0 || row&gt;=rows) throw new IndexOutOfBoundsException("row:"+row+", column:"+column);</comment>
    <comment>elements[index(row,column)] = value;</comment>
    <comment>manually inlined:</comment>
  </method>
  <javadoc>
    <text>Construct and returns a new selection view.</text>
    <param>rowOffsets the offsets of the visible elements.</param>
    <param>columnOffsets the offsets of the visible elements.</param>
    <return>a new view.</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewSelectionLike" />
  <javadoc>
    <text>8 neighbor stencil transformation. For efficient finite difference operations.
 * Applies a function to a moving &lt;tt&gt;3 x 3&lt;/tt&gt; window.
 * Does nothing if &lt;tt&gt;rows() &lt; 3 || columns() &lt; 3&lt;/tt&gt;.
 * &lt;pre&gt;
 * B[i,j] = function.apply(
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;A[i-1,j-1], A[i-1,j], A[i-1,j+1],
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;A[i,  j-1], A[i,  j], A[i,  j+1],
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;A[i+1,j-1], A[i+1,j], A[i+1,j+1]
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;)
 * x x x - &amp;nbsp;&amp;nbsp;&amp;nbsp; - x x x &amp;nbsp;&amp;nbsp;&amp;nbsp; - - - - 
 * x o x - &amp;nbsp;&amp;nbsp;&amp;nbsp; - x o x &amp;nbsp;&amp;nbsp;&amp;nbsp; - - - - 
 * x x x - &amp;nbsp;&amp;nbsp;&amp;nbsp; - x x x ... - x x x 
 * - - - - &amp;nbsp;&amp;nbsp;&amp;nbsp; - - - - &amp;nbsp;&amp;nbsp;&amp;nbsp; - x o x 
 * - - - - &amp;nbsp;&amp;nbsp;&amp;nbsp; - - - - &amp;nbsp;&amp;nbsp;&amp;nbsp; - x x x 
 * &lt;/pre&gt;
 * Make sure that cells of &lt;tt&gt;this&lt;/tt&gt; and &lt;tt&gt;B&lt;/tt&gt; do not overlap.
 * In case of overlapping views, behaviour is unspecified.
 * &lt;/pre&gt;
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;pre&gt;
 * final double alpha = 0.25;
 * final double beta = 0.75;
 * // 8 neighbors
 * cern.colt.function.Double9Function f = new cern.colt.function.Double9Function() {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;public final double apply(
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a00, double a01, double a02,
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a10, double a11, double a12,
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a20, double a21, double a22) {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return beta*a11 + alpha*(a00+a01+a02 + a10+a12 + a20+a21+a22);
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 * };
 * A.zAssign8Neighbors(B,f);
 * // 4 neighbors
 * cern.colt.function.Double9Function g = new cern.colt.function.Double9Function() {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;public final double apply(
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a00, double a01, double a02,
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a10, double a11, double a12,
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a20, double a21, double a22) {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return beta*a11 + alpha*(a01+a10+a12+a21);
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;}
 * C.zAssign8Neighbors(B,g); // fast, even though it doesn't look like it
 * };
 * &lt;/pre&gt;</text>
    <param>B the matrix to hold the results.</param>
    <param>function the function to be applied to the 9 cells.</param>
    <throws>NullPointerException if &lt;tt&gt;function==null&lt;/tt&gt;.</throws>
    <throws>IllegalArgumentException if &lt;tt&gt;rows() != B.rows() || columns() != B.columns()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="zAssign8Neighbors">
    <scope />
    <declaration type="int" name="r" />
    <declaration type="int" name="c" />
    <declaration type="DenseDoubleMatrix2D" name="BB" />
    <declaration type="int" name="A_rs" />
    <declaration type="int" name="B_rs" />
    <declaration type="int" name="A_cs" />
    <declaration type="int" name="B_cs" />
    <declaration type="double[]" name="elems" />
    <declaration type="double[]" name="B_elems" />
    <declaration type="int" name="A_index" />
    <declaration type="int" name="B_index" />
    <scope>
      <declaration type="double" name="a00" />
      <declaration type="double" name="a10" />
      <declaration type="double" name="a20" />
      <declaration type="int" name="B11" />
      <declaration type="int" name="A02" />
      <declaration type="int" name="A12" />
      <declaration type="int" name="A22" />
      <scope />
    </scope>
    <comment>1. using only 4-5 out of the 9 cells in "function" is *not* the limiting factor for performance.</comment>
    <comment>2. if the "function" would be hardwired into the innermost loop, a speedup of 1.5-2.0 would be seen</comment>
    <comment>but then the multi-purpose interface is gone...</comment>
    <comment>nothing to do</comment>
    <comment>in each step six cells can be remembered in registers - they don't need to be reread from slow memory</comment>
    <comment>A02+=A_cs;</comment>
    <comment>A12+=A_cs;</comment>
    <comment>A22+=A_cs;</comment>
    <comment>in each step 3 instead of 9 cells need to be read from memory.</comment>
    <comment>move remembered cells</comment>
  </method>
  <method type="DoubleMatrix1D" name="zMult">
    <declaration type="DenseDoubleMatrix1D" name="yy" />
    <declaration type="DenseDoubleMatrix1D" name="zz" />
    <declaration type="double[]" name="AElems" />
    <declaration type="double[]" name="yElems" />
    <declaration type="double[]" name="zElems" />
    <declaration type="int" name="As" />
    <declaration type="int" name="ys" />
    <declaration type="int" name="zs" />
    <declaration type="int" name="indexA" />
    <declaration type="int" name="indexY" />
    <declaration type="int" name="indexZ" />
    <declaration type="int" name="cols" />
    <scope>
      <declaration type="double" name="sum" />
      <declaration type="int" name="i" />
      <declaration type="int" name="j" />
      <scope />
      <scope />
    </scope>
    <comment>not loop unrolled
for (int i=indexA, j=indexY, column=columns; --column &gt;= 0; ) {
sum += AElems[i]  yElems[j];
i += As;
j += ys;
}</comment>
    <comment>loop unrolled</comment>
  </method>
  <method type="DoubleMatrix2D" name="zMult">
    <scope>
      <scope />
      <scope />
    </scope>
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <declaration type="int" name="p" />
    <declaration type="DenseDoubleMatrix2D" name="BB" />
    <declaration type="DenseDoubleMatrix2D" name="CC" />
    <declaration type="double[]" name="AElems" />
    <declaration type="double[]" name="BElems" />
    <declaration type="double[]" name="CElems" />
    <declaration type="int" name="cA" />
    <declaration type="int" name="cB" />
    <declaration type="int" name="cC" />
    <declaration type="int" name="rA" />
    <declaration type="int" name="rB" />
    <declaration type="int" name="rC" />
    <declaration type="int" name="BLOCK_SIZE" />
    <declaration type="int" name="m_optimal" />
    <declaration type="int" name="blocks" />
    <declaration type="int" name="rr" />
    <scope>
      <declaration type="int" name="jB" />
      <declaration type="int" name="indexA" />
      <declaration type="int" name="jC" />
      <scope>
        <declaration type="int" name="iA" />
        <declaration type="int" name="iC" />
        <scope>
          <declaration type="int" name="kA" />
          <declaration type="int" name="kB" />
          <declaration type="double" name="s" />
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>overriden for performance only</comment>
    <comment>exploit quick sparse mult</comment>
    <comment>A*B = (B' * A')'</comment>
    <comment>final RCDoubleMatrix2D transB = new RCDoubleMatrix2D(B.columns,B.rows);
B.forEachNonZero(
new cern.colt.function.IntIntDoubleFunction() {
public double apply(int i, int j, double value) {
transB.setQuick(j,i,value);
return value;
}
}
);

return transB.zMult(this.viewDice(),C.viewDice()).viewDice();</comment>
    <comment>A is blocked to hide memory latency
xxxxxxx B
xxxxxxx
xxxxxxx
A
xxx     xxxxxxx C
xxx     xxxxxxx
---     -------
xxx     xxxxxxx
xxx     xxxxxxx
---     -------
xxx     xxxxxxx</comment>
    <comment>* 8 == Level 2 cache in bytes</comment>
    <comment>if (n+p == 0) return C;</comment>
    <comment>int m_optimal = (BLOCK_SIZE - n*p) / (n+p);</comment>
    <comment>not unrolled:
for (int k = n; --k &gt;= 0; ) {
s += getQuick(i,k)  B.getQuick(k,j);
s += AElems[kA]  BElems[kB];
kB += rB;
kA += cA;
}</comment>
    <comment>loop unrolled</comment>
  </method>
  <javadoc>
    <text>Returns the sum of all cells; &lt;tt&gt;Sum( x[i,j] )&lt;/tt&gt;.</text>
    <return>the sum.</return>
  </javadoc>
  <method type="double" name="zSum">
    <declaration type="double" name="sum" />
    <declaration type="double[]" name="elems" />
    <declaration type="int" name="index" />
    <declaration type="int" name="cs" />
    <declaration type="int" name="rs" />
    <scope>
      <scope />
    </scope>
  </method>
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
