<?xml version="1.0" encoding="UTF-8"?>
<class name="DelegateDoubleMatrix1D">
  <javadoc>
    <text>1-d matrix holding &lt;tt&gt;double&lt;/tt&gt; elements; either a view wrapping another 2-d matrix and therefore delegating calls to it.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="DoubleMatrix2D" name="content" />
  <declaration type="int" name="row" />
  <method type="constructor" name="DelegateDoubleMatrix1D" />
  <javadoc>
    <text>Returns the matrix cell value at coordinate &lt;tt&gt;index&lt;/tt&gt;.
 * &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;index&amp;lt;0 || index&amp;gt;=size()&lt;/tt&gt;.</text>
    <param>index   the index of the cell.</param>
    <return>the value of the specified cell.</return>
  </javadoc>
  <method type="double" name="getQuick" />
  <javadoc>
    <text>Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified size.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt;, etc.
 * In general, the new matrix should have internal parametrization as similar as possible.</text>
    <param>size the number of cell the matrix shall have.</param>
    <return>a new empty matrix of the same dynamic type.</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="like" />
  <javadoc>
    <text>Construct and returns a new 2-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, entirelly independent of the receiver.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt;, etc.</text>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <return>a new matrix of the corresponding dynamic type.</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="like2D" />
  <javadoc>
    <text>Sets the matrix cell at coordinate &lt;tt&gt;index&lt;/tt&gt; to the specified value.
 * &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;index&amp;lt;0 || index&amp;gt;=size()&lt;/tt&gt;.</text>
    <param>index   the index of the cell.</param>
    <param>value the value to be filled into the specified cell.</param>
  </javadoc>
  <method type="void" name="setQuick" />
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>The elements of the matrix.</comment>
  <comment>The row this view is bound to.</comment>
</class>
