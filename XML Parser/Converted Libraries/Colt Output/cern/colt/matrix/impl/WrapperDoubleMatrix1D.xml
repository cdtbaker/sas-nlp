<?xml version="1.0" encoding="UTF-8"?>
<class name="WrapperDoubleMatrix1D">
  <javadoc>
    <text>1-d matrix holding &lt;tt&gt;double&lt;/tt&gt; elements; either a view wrapping another matrix or a matrix whose views are wrappers.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="DoubleMatrix1D" name="content" />
  <method type="constructor" name="WrapperDoubleMatrix1D" />
  <javadoc>
    <text>Returns the content of this matrix if it is a wrapper; or &lt;tt&gt;this&lt;/tt&gt; otherwise.
 * Override this method in wrappers.</text>
  </javadoc>
  <method type="DoubleMatrix1D" name="getContent" />
  <javadoc>
    <text>Returns the matrix cell value at coordinate &lt;tt&gt;index&lt;/tt&gt;.
 * &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;index&amp;lt;0 || index&amp;gt;=size()&lt;/tt&gt;.</text>
    <param>index   the index of the cell.</param>
    <return>the value of the specified cell.</return>
  </javadoc>
  <method type="double" name="getQuick" />
  <javadoc>
    <text>Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified size.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt;, etc.
 * In general, the new matrix should have internal parametrization as similar as possible.</text>
    <param>size the number of cell the matrix shall have.</param>
    <return>a new empty matrix of the same dynamic type.</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="like" />
  <javadoc>
    <text>Construct and returns a new 2-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, entirelly independent of the receiver.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt;, etc.</text>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <return>a new matrix of the corresponding dynamic type.</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="like2D" />
  <javadoc>
    <text>Sets the matrix cell at coordinate &lt;tt&gt;index&lt;/tt&gt; to the specified value.
 * &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;index&amp;lt;0 || index&amp;gt;=size()&lt;/tt&gt;.</text>
    <param>index   the index of the cell.</param>
    <param>value the value to be filled into the specified cell.</param>
  </javadoc>
  <method type="void" name="setQuick" />
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;flip view&lt;/i&gt;.
 * What used to be index &lt;tt&gt;0&lt;/tt&gt; is now index &lt;tt&gt;size()-1&lt;/tt&gt;, ..., what used to be index &lt;tt&gt;size()-1&lt;/tt&gt; is now index &lt;tt&gt;0&lt;/tt&gt;.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.</text>
    <return>a new flip view.</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="viewFlip">
    <declaration type="DoubleMatrix1D" name="view" />
    <method type="double" name="getQuick" />
    <method type="void" name="setQuick" />
  </method>
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;sub-range view&lt;/i&gt; that is a &lt;tt&gt;width&lt;/tt&gt; sub matrix starting at &lt;tt&gt;index&lt;/tt&gt;.
 * Operations on the returned view can only be applied to the restricted range.
 * Any attempt to access coordinates not contained in the view will throw an &lt;tt&gt;IndexOutOfBoundsException&lt;/tt&gt;.
 * &lt;p&gt;
 * &lt;b&gt;Note that the view is really just a range restriction:&lt;/b&gt; 
 * The returned matrix is backed by this matrix, so changes in the returned matrix are reflected in this matrix, and vice-versa. 
 * &lt;p&gt;
 * The view contains the cells from &lt;tt&gt;index..index+width-1&lt;/tt&gt;.
 * and has &lt;tt&gt;view.size() == width&lt;/tt&gt;.
 * A view's legal coordinates are again zero based, as usual.
 * In other words, legal coordinates of the view are &lt;tt&gt;0 .. view.size()-1==width-1&lt;/tt&gt;.
 * As usual, any attempt to access a cell at other coordinates will throw an &lt;tt&gt;IndexOutOfBoundsException&lt;/tt&gt;.</text>
    <param>index   The index of the first cell.</param>
    <param>width   The width of the range.</param>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;index&lt;0 || width&lt;0 || index+width&gt;size()&lt;/tt&gt;.</throws>
    <return>the new view.</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="viewPart">
    <declaration type="DoubleMatrix1D" name="view" />
    <method type="double" name="getQuick" />
    <method type="void" name="setQuick" />
  </method>
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;selection view&lt;/i&gt; that is a matrix holding the indicated cells.
 * There holds &lt;tt&gt;view.size() == indexes.length&lt;/tt&gt; and &lt;tt&gt;view.get(i) == this.get(indexes[i])&lt;/tt&gt;.
 * Indexes can occur multiple times and can be in arbitrary order.
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;br&gt;
 * &lt;pre&gt;
 * this     = (0,0,8,0,7)
 * indexes  = (0,2,4,2)
 * --&gt;
 * view     = (0,8,7,8)
 * &lt;/pre&gt;
 * Note that modifying &lt;tt&gt;indexes&lt;/tt&gt; after this call has returned has no effect on the view.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.</text>
    <param>indexes   The indexes of the cells that shall be visible in the new view. To indicate that &lt;i&gt;all&lt;/i&gt; cells shall be visible, simply set this parameter to &lt;tt&gt;null&lt;/tt&gt;.</param>
    <return>the new view.</return>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;!(0 &lt;= indexes[i] &lt; size())&lt;/tt&gt; for any &lt;tt&gt;i=0..indexes.length()-1&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="DoubleMatrix1D" name="viewSelection">
    <scope />
    <declaration type="int[]" name="idx" />
    <declaration type="DoubleMatrix1D" name="view" />
    <method type="double" name="getQuick" />
    <method type="void" name="setQuick" />
    <comment>check for "all"</comment>
  </method>
  <javadoc>
    <text>Construct and returns a new selection view.</text>
    <param>offsets the offsets of the visible elements.</param>
    <return>a new view.</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="viewSelectionLike">
    <comment>should never get called</comment>
  </method>
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;stride view&lt;/i&gt; which is a sub matrix consisting of every i-th cell.
 * More specifically, the view has size &lt;tt&gt;this.size()/stride&lt;/tt&gt; holding cells &lt;tt&gt;this.get(i*stride)&lt;/tt&gt; for all &lt;tt&gt;i = 0..size()/stride - 1&lt;/tt&gt;.</text>
    <param>stride  the step factor.</param>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;stride &lt;= 0&lt;/tt&gt;.</throws>
    <return>the new view.</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="viewStrides">
    <declaration type="DoubleMatrix1D" name="view" />
    <method type="double" name="getQuick" />
    <method type="void" name="setQuick" />
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>The elements of the matrix.</comment>
</class>
