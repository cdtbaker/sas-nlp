<?xml version="1.0" encoding="UTF-8"?>
<class name="TestMatrix2D">
  <javadoc>
    <text>Quick and dirty tests.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="cern.jet.math.Functions" name="F" />
  <declaration type="cern.colt.matrix.DoubleFactory2D" name="Factory2D" />
  <declaration type="cern.colt.matrix.DoubleFactory1D" name="Factory1D" />
  <declaration type="cern.colt.matrix.linalg.Algebra" name="LinearAlgebra" />
  <declaration type="cern.colt.matrix.doublealgo.Transform" name="Transform" />
  <declaration type="cern.colt.matrix.linalg.Property" name="Property" />
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="TestMatrix2D" />
  <javadoc />
  <method type="void" name="doubleTest">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <declaration type="DoubleMatrix2D" name="master" />
    <declaration type="DoubleMatrix2D" name="copyPart" />
    <declaration type="DoubleMatrix2D" name="view1" />
    <declaration type="DoubleMatrix2D" name="view2" />
    <comment>make a 4*5 matrix</comment>
    <comment>set all cells to 1</comment>
    <comment>set [2,1] .. [3,3] to 2</comment>
    <comment>modify an independent copy</comment>
    <comment>has changed</comment>
    <comment>master has not changed</comment>
    <comment>[0,3] .. [3,4]</comment>
    <comment>a view from a view</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest">
    <declaration type="DoubleMatrix2D" name="matrix" />
    <declaration type="int" name="i" />
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <comment>if (i%1000 == 0) {</comment>
    <comment>}</comment>
    <comment>if (i%1000 == 0) {</comment>
    <comment>}</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest10">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <declaration type="DoubleMatrix2D" name="master" />
    <declaration type="int[]" name="rowIndexes" />
    <declaration type="int[]" name="columnIndexes" />
    <declaration type="int[]" name="rowIndexes2" />
    <declaration type="int[]" name="columnIndexes2" />
    <declaration type="DoubleMatrix2D" name="view1" />
    <declaration type="DoubleMatrix2D" name="view9" />
    <declaration type="DoubleMatrix2D" name="view2" />
    <declaration type="DoubleMatrix2D" name="view3" />
    <comment>make a 4*5 matrix</comment>
    <comment>DoubleMatrix2D master = new DenseDoubleMatrix2D(rows,columns);</comment>
    <comment>Basic.ascending(master);</comment>
    <comment>master.assign(1);  set all cells to 1</comment>
    <comment>master.viewPart(2,0,2,3).assign(2);  set [2,1] .. [3,3] to 2</comment>
    <comment>System.out.println("\n"+master);</comment>
    <comment>Basic.ascending(view3);</comment>
    <comment>view2.assign(-1);</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest11">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <declaration type="DoubleMatrix2D" name="master" />
    <declaration type="int[]" name="rowIndexes" />
    <declaration type="int[]" name="columnIndexes" />
    <declaration type="DoubleMatrix2D" name="view1" />
    <comment>make a 1*1 matrix</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest12">
    <declaration type="DoubleMatrix2D" name="A" />
  </method>
  <javadoc />
  <method type="void" name="doubleTest13">
    <declaration type="double[]" name="values" />
    <declaration type="DoubleMatrix1D" name="matrix" />
    <method type="boolean" name="apply" />
    <declaration type="double" name="limit" />
    <declaration type="DoubleFunction" name="f" />
    <method type="double" name="apply" />
    <declaration type="DoubleMatrix1D" name="otherMatrix1D" />
    <method type="double" name="apply" />
    <declaration type="DoubleMatrix3D" name="x" />
    <declaration type="DoubleMatrix3D" name="y" />
    <comment>Sum( x[i]*x[i] )</comment>
    <comment>--&gt; 14</comment>
    <comment>Sum( x[i]*x[i] )</comment>
    <comment>--&gt; 14</comment>
    <comment>Sum( x[i]*x[i]*x[i] )</comment>
    <comment>--&gt; 36</comment>
    <comment>Sum( x[i] )</comment>
    <comment>--&gt; 6</comment>
    <comment>Min( x[i] )</comment>
    <comment>--&gt; 0</comment>
    <comment>Max( Sqrt(x[i]) / 2 )</comment>
    <comment>--&gt; 0.8660254037844386</comment>
    <comment>Number of all cells with 0 &lt;= value &lt;= 2</comment>
    <comment>--&gt; 3</comment>
    <comment>Number of all cells with 0.8 &lt;= Log2(value) &lt;= 1.2</comment>
    <comment>--&gt; 1</comment>
    <comment>Product( x[i] )</comment>
    <comment>--&gt; 0</comment>
    <comment>Product( x[i] ) of all x[i] &gt; limit</comment>
    <comment>--&gt; 6</comment>
    <comment>Sum( (x[i]+y[i])^2 )</comment>
    <comment>--&gt; 56</comment>
    <comment>otherMatrix1D.zMult(3);</comment>
    <comment>Sum(Math.PI * Math.log(otherMatrix1D[i] / matrix[i]))</comment>
    <comment>or, perhaps less error prone and more readable:</comment>
    <comment>Sum( x[slice,row,col]*x[slice,row,col] )</comment>
    <comment>--&gt; 140</comment>
    <comment>Sum( (x[i]+y[i])^2 )</comment>
    <comment>--&gt; 560</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest14">
    <declaration type="double[]" name="values" />
    <declaration type="DoubleMatrix2D" name="a" />
    <declaration type="DoubleMatrix2D" name="b" />
    <declaration type="cern.colt.Timer" name="timer" />
    <comment>System.out.println(a);</comment>
    <comment>System.out.println(b);</comment>
    <comment>System.out.println(Basic.product(a,b));</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest15">
    <declaration type="double[][]" name="values" />
    <declaration type="DoubleMatrix2D" name="A" />
    <declaration type="double" name="value" />
    <scope />
    <declaration type="cern.colt.Timer" name="timer" />
    <declaration type="DoubleMatrix2D" name="inv" />
    <scope />
    <comment>DoubleMatrix2D A = Factory2D.make(values);</comment>
    <comment>DoubleMatrix2D A = Factory2D.makeIdentity(size,size);</comment>
    <comment>DoubleMatrix2D A = Factory2D.makeAscending(size,size).assign(new cern.jet.random.engine.MersenneTwister());</comment>
    <comment>timer.reset().start();
for (int run=0; run&lt;runs; run++) {
new Jama.Matrix(A.toArray()).inverse();
}
timer.stop().display();</comment>
    <comment>System.out.println("A="+A);</comment>
    <comment>System.out.println("inverse(A)="+inv);</comment>
    <comment>System.out.println("formatted inverse(A)="+ new Jama.Matrix(inv.toArray()));</comment>
    <comment>-1.0000000000000018, 2.000000000000007, -1.0000000000000047
2.000000000000007, -6.750000000000024, 4.500000000000016
-1.000000000000004, 3.7500000000000133, -2.500000000000009</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest17">
    <declaration type="DoubleMatrix2D" name="A" />
    <declaration type="DoubleMatrix2D" name="B" />
    <declaration type="DoubleMatrix2D" name="C" />
    <comment>DoubleMatrix2D A = Factory2D.make(values);</comment>
    <comment>System.out.println("\n"+A);
System.out.println("\n"+B);
System.out.println("\n"+C);
System.out.println("\n"+Factory2D.diag(A,B,C));</comment>
    <comment>System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A.toString()));</comment>
    <comment>System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(B.toString()));</comment>
    <comment>System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(C.toString()));</comment>
    <comment>System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(Factory2D.diagonal(A,B,C).toString()));</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest18">
    <declaration type="int" name="s" />
    <declaration type="DoubleMatrix2D" name="A00" />
    <comment>DoubleMatrix2D A = Factory2D.make(values);</comment>
    <comment>A01 = empty;</comment>
    <comment>A11 = Factory2D.ascending(s,s).assign(F.plus(A10.getQuick(s-1,s-1)));</comment>
    <comment>A12 = Factory2D.ascending(s,s).assign(F.plus(A11.getQuick(s-1,s-1)));</comment>
    <comment>A21 = Factory2D.ascending(s,s).assign(F.plus(A20.getQuick(s-1,s-1)));</comment>
    <comment>A22 = Factory2D.ascending(s,s).assign(F.plus(A21.getQuick(s-1,s-1)));</comment>
    <comment>B.assign(F.plus(A.zSum()));</comment>
    <comment>C.assign(F.plus(B.zSum()));</comment>
    <comment>System.out.println("\n"+Factory2D.make33(A00,A01,A02,A10,A11,A12,A20,A21,A22));</comment>
    <comment>System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A00.toString()));
System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A01.toString()));
System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A02.toString()));
System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A10.toString()));
System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A11.toString()));
System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A12.toString()));
System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A20.toString()));
System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A21.toString()));
System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A22.toString()));

System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(Factory2D.make33(A00,A01,A02,A10,A11,A12,A20,A21,A22).toString()));</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest19">
    <declaration type="DoubleMatrix2D" name="A" />
    <declaration type="int" name="k" />
    <declaration type="int" name="uk" />
    <declaration type="int" name="lk" />
    <declaration type="double[][]" name="values5" />
    <declaration type="double[][]" name="values4" />
    <declaration type="double[][]" name="values1" />
    <declaration type="double[][]" name="values6" />
    <declaration type="double[][]" name="values7" />
    <declaration type="double[][]" name="values2" />
    <declaration type="double[][]" name="values3" />
    <comment>System.out.println("\n\nbandwidth="+k+" "+cern.colt.matrixpattern.Converting.toHTML(A.toString()));</comment>
    <comment>System.out.println("\n\nbandwidth="+k+" "+cern.colt.matrixpattern.Converting.toHTML(A.toString()));</comment>
    <comment>System.out.println("\n\nbandwidth="+k+" "+cern.colt.matrixpattern.Converting.toHTML(A.toString()));</comment>
    <comment>System.out.println("\n\nbandwidth="+k+" "+cern.colt.matrixpattern.Converting.toHTML(A.toString()));</comment>
    <comment>System.out.println("\n\nbandwidth="+k+" "+cern.colt.matrixpattern.Converting.toHTML(A.toString()));</comment>
    <comment>System.out.println("\n\nbandwidth="+k+" "+cern.colt.matrixpattern.Converting.toHTML(A.toString()));</comment>
    <comment>System.out.println("\n\nbandwidth="+k+" "+cern.colt.matrixpattern.Converting.toHTML(A.toString()));</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest19">
    <declaration type="int" name="s" />
    <declaration type="DoubleMatrix2D" name="A00" />
    <comment>DoubleMatrix2D A = Factory2D.make(values);</comment>
    <comment>A01 = empty;</comment>
    <comment>A11 = Factory2D.ascending(s,s).assign(F.plus(A10.getQuick(s-1,s-1)));</comment>
    <comment>A12 = Factory2D.ascending(s,s).assign(F.plus(A11.getQuick(s-1,s-1)));</comment>
    <comment>A21 = Factory2D.ascending(s,s).assign(F.plus(A20.getQuick(s-1,s-1)));</comment>
    <comment>A22 = Factory2D.ascending(s,s).assign(F.plus(A21.getQuick(s-1,s-1)));</comment>
    <comment>B.assign(F.plus(A.zSum()));</comment>
    <comment>C.assign(F.plus(B.zSum()));</comment>
    <comment>System.out.println("\n"+Factory2D.make33(A00,A01,A02,A10,A11,A12,A20,A21,A22));</comment>
    <comment>System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A00.toString()));
System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A01.toString()));
System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A02.toString()));
System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A10.toString()));
System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A11.toString()));
System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A12.toString()));
System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A20.toString()));
System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A21.toString()));
System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(A22.toString()));

System.out.println("\n"+cern.colt.matrixpattern.Converting.toHTML(Factory2D.make33(A00,A01,A02,A10,A11,A12,A20,A21,A22).toString()));</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest2">
    <declaration type="int[]" name="keys" />
    <declaration type="double[]" name="values" />
    <declaration type="int" name="size" />
    <declaration type="AbstractIntDoubleMap" name="map" />
    <scope />
    <comment>using a map</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest20">
    <declaration type="DoubleMatrix2D" name="A" />
    <declaration type="int" name="k" />
    <declaration type="int" name="uk" />
    <declaration type="int" name="lk" />
    <declaration type="double[][]" name="values1" />
    <declaration type="double[][]" name="values2" />
    <declaration type="double[][]" name="values3" />
    <declaration type="double" name="a" />
    <declaration type="double" name="b" />
    <declaration type="double[]" name="e" />
    <comment>System.out.println("\n\nbandwidth="+k+" "+cern.colt.matrixpattern.Converting.toHTML(A.toString()));</comment>
    <comment>System.out.println("\n\nbandwidth="+k+" "+cern.colt.matrixpattern.Converting.toHTML(A.toString()));</comment>
    <comment>System.out.println("\n\nbandwidth="+k+" "+cern.colt.matrixpattern.Converting.toHTML(A.toString()));</comment>
    <comment>Exact eigenvalues from Westlake (1968), p.150 (ei'vectors given too):</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest21">
    <declaration type="DoubleMatrix2D" name="A" />
    <declaration type="int" name="k" />
    <declaration type="int" name="uk" />
    <declaration type="int" name="lk" />
    <declaration type="double[][]" name="values1" />
    <comment>System.out.println("\n\n"+LinearAlgebra.toVerboseString(A));</comment>
    <comment>System.out.println(new LUDecomposition(A));</comment>
    <comment>System.out.println("\n\nbandwidth="+k+" "+cern.colt.matrixpattern.Converting.toHTML(A.toString()));</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest22">
    <declaration type="DoubleMatrix2D" name="A" />
    <declaration type="int" name="k" />
    <declaration type="int" name="uk" />
    <declaration type="int" name="lk" />
    <declaration type="double[][]" name="values1" />
    <comment>System.out.println("\n\n"+LinearAlgebra.toVerboseString(A));</comment>
    <comment>System.out.println(new LUDecomposition(A));</comment>
    <comment>System.out.println("\n\nbandwidth="+k+" "+cern.colt.matrixpattern.Converting.toHTML(A.toString()));</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest23">
    <declaration type="DoubleMatrix2D" name="A" />
    <declaration type="DoubleMatrix1D" name="b" />
    <declaration type="double" name="mean" />
    <declaration type="double" name="stdDev" />
    <declaration type="cern.jet.random.Normal" name="random" />
    <declaration type="double" name="value" />
    <declaration type="LUDecompositionQuick" name="lu" />
    <declaration type="cern.colt.Timer" name="timer" />
    <scope />
    <comment>A.assign(random);</comment>
    <comment>A.assign(F.rint);  round</comment>
    <comment>I = Factory2D.identity(size);</comment>
    <comment>Inv = Factory2D.make(size,size);</comment>
    <comment>Inv.assign(I);</comment>
    <comment>lu.decompose(LU);</comment>
    <comment>lu.solve(Inv);</comment>
    <comment>System.out.println("A="+A);</comment>
    <comment>System.out.println("LU="+LU);</comment>
    <comment>System.out.println("U="+lu.getU());</comment>
    <comment>System.out.println("L="+lu.getL());</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest24">
    <declaration type="DoubleMatrix2D" name="A" />
    <declaration type="DoubleFactory2D" name="factory" />
    <declaration type="double" name="value" />
    <declaration type="double" name="omega" />
    <declaration type="double" name="alpha" />
    <declaration type="double" name="beta" />
    <declaration type="cern.colt.function.Double9Function" name="function" />
    <method type="double" name="apply" />
    <declaration type="cern.colt.Timer" name="timer" />
    <scope />
    <declaration type="double[][]" name="B" />
    <scope />
    <comment>A.zSum4Neighbors(A,alpha,beta,runs);</comment>
    <comment>System.out.println("A="+A);</comment>
    <comment>jnt.scimark2.SOR.execute(omega, B, runs);</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest25">
    <declaration type="boolean" name="dense" />
    <declaration type="DoubleMatrix2D" name="A" />
    <declaration type="DoubleFactory2D" name="factory" />
    <declaration type="double" name="value" />
    <declaration type="cern.colt.Timer" name="timer" />
  </method>
  <javadoc />
  <method type="void" name="doubleTest26">
    <declaration type="boolean" name="dense" />
    <declaration type="DoubleMatrix2D" name="A" />
    <declaration type="DoubleFactory2D" name="factory" />
    <declaration type="double" name="value" />
    <declaration type="cern.colt.Timer" name="timer" />
    <declaration type="DoubleMatrix2DComparator" name="fun" />
    <method type="int" name="compare" />
  </method>
  <javadoc />
  <method type="void" name="doubleTest27">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <declaration type="double[][]" name="trainingSet" />
    <declaration type="int" name="patternIndex" />
    <declaration type="int" name="unitIndex" />
    <declaration type="DoubleMatrix2D" name="patternMatrix" />
    <declaration type="DoubleMatrix2D" name="transposeMatrix" />
    <declaration type="DoubleMatrix2D" name="QMatrix" />
    <declaration type="DoubleMatrix2D" name="inverseQMatrix" />
    <declaration type="DoubleMatrix2D" name="pseudoInverseMatrix" />
    <declaration type="DoubleMatrix2D" name="weightMatrix" />
    <scope>
      <scope />
    </scope>
    <comment>form a matrix with the columns as training vectors</comment>
    <comment>copy the patterns into the matrix</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest28">
    <declaration type="double[]" name="data" />
    <declaration type="double[][]" name="arrMatrix" />
    <declaration type="DoubleFactory2D" name="f" />
    <declaration type="DoubleMatrix1D" name="vector" />
    <declaration type="DoubleMatrix2D" name="matrix" />
    <declaration type="DoubleMatrix1D" name="res" />
  </method>
  <javadoc />
  <method type="void" name="doubleTest28">
    <declaration type="double[]" name="data" />
    <declaration type="double[][]" name="arrMatrix" />
    <declaration type="DoubleMatrix1D" name="vector" />
    <declaration type="DoubleMatrix2D" name="matrix" />
    <declaration type="DoubleMatrix1D" name="res" />
  </method>
  <javadoc />
  <method type="void" name="doubleTest29">
    <comment>System.out.println("\n\n");
System.out.println("initializing...");
boolean dense = false;
DoubleMatrix2D A;
DoubleFactory2D factory;
if (dense)
factory = Factory2D.dense;
else
factory = Factory2D.sparse;

double value = 0.5;

DoubleMatrix2D C = Factory2D.dense.sample(size,size,value,1);

A = factory.make(size,size);
System.out.print("A assign C... ");
cern.colt.Timer timer = new cern.colt.Timer().start();
A.assign(C);
timer.stop().display();

System.out.print("A getquick... ");
timer.reset().start();
double sum=0;
for (int i=0; i&lt;size; i++) {
for (int j=0; j&lt;size; j++ ) {
sum+=A.getQuick(i,j);
}
}
timer.stop().display();
System.out.println(sum);
System.out.println(A);

System.out.print("sci set3... ");
JSci.maths.DoubleSparseMatrix B = new JSci.maths.DoubleSparseMatrix(size);
timer.reset().start();
for (int i=size; --i&gt;=0; ) {
	for (int j=size; --j&gt;=0; ) {
for (int i=0; i&lt;size; i++) {
for (int j=0; j&lt;size; j++ ) {
B.setElement3(i,j,C.getQuick(i,j));
}
}
System.out.println(A);
timer.stop().display();

System.out.print("sci get3... ");
timer.reset().start();
sum=0;
for (int i=0; i&lt;size; i++) {
for (int j=0; j&lt;size; j++ ) {
sum+=B.getElement3(i,j);
}
}
System.out.println(sum);
timer.stop().display();

JSci.maths.DoubleVector vec = new JSci.maths.DoubleVector(size);

System.out.print("sci mult3... ");
timer.reset().start();
B.multiply3(vec);
timer.stop().display();


System.out.println("done.");</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest29">
    <declaration type="DoubleMatrix2D" name="x" />
    <declaration type="DoubleMatrix2D" name="matrix" />
    <declaration type="cern.colt.Timer" name="timer" />
    <declaration type="DoubleMatrix2D" name="res" />
    <comment>System.out.println(res);</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest29">
    <declaration type="double[][]" name="data" />
    <declaration type="double[][]" name="arrMatrix" />
    <declaration type="DoubleMatrix2D" name="x" />
    <declaration type="DoubleMatrix2D" name="matrix" />
    <declaration type="DoubleMatrix2D" name="res" />
  </method>
  <javadoc />
  <method type="void" name="doubleTest3">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <declaration type="DoubleMatrix2D" name="master" />
    <declaration type="DoubleMatrix2D" name="flip1" />
    <declaration type="DoubleMatrix2D" name="flip2" />
    <comment>make a 4*5 matrix</comment>
    <comment>set all cells to 1</comment>
    <comment>set [2,1] .. [3,3] to 2</comment>
    <comment>DoubleMatrix2D copyPart = master.copyPart(2,1,2,3);
copyPart.assign(3);  modify an independent copy
copyPart.set(0,0,4);
System.out.println("\n"+copyPart);  has changed
System.out.println("\n"+master);  master has not changed

DoubleMatrix2D view1 = master.viewPart(0,3,4,2);  [0,3] .. [3,4]
DoubleMatrix2D view2 = view1.viewPart(0,0,4,1);  a view from a view
System.out.println("\n"+view1);
System.out.println("\n"+view2);</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest30">
    <declaration type="double[][]" name="data" />
    <declaration type="double[]" name="x" />
    <declaration type="double[]" name="y" />
    <declaration type="DoubleMatrix2D" name="A" />
  </method>
  <javadoc />
  <method type="void" name="doubleTest30">
    <declaration type="int[]" name="values" />
    <declaration type="IntArrayList" name="list" />
    <declaration type="int" name="val" />
    <declaration type="int" name="sum" />
    <declaration type="cern.colt.Timer" name="timer" />
    <scope>
      <declaration type="int" name="k" />
    </scope>
    <comment>System.out.println("sum = "+sum);</comment>
    <comment>System.out.println("\n\n");
System.out.println("initializing...");
boolean dense = false;
DoubleMatrix2D A;
DoubleFactory2D factory;
if (dense)
factory = Factory2D.dense;
else
factory = Factory2D.sparse;

double value = 0.5;

DoubleMatrix2D C = Factory2D.dense.sample(size,size,value,0.01);

A = factory.make(size,size);
cern.colt.Timer timer = new cern.colt.Timer().start();
A.assign(C);
timer.stop().display();

timer.reset().start();
double sum=0;
for (int i=0; i&lt;size; i++) {
for (int j=0; j&lt;size; j++ ) {
sum+=A.getQuick(i,j);
}
}
timer.stop().display();
System.out.println(sum);
System.out.println(A);

JSci.maths.DoubleSparseMatrix B = new JSci.maths.DoubleSparseMatrix(size);
timer.reset().start();
for (int i=size; --i&gt;=0; ) {
for (int j=size; --j&gt;=0; ) {
for (int i=0; i&lt;size; i++) {
	for (int j=0; j&lt;size; j++ ) {
B.setElement2(i,j,C.getQuick(i,j));
}
}
System.out.println(A);
timer.stop().display();

timer.reset().start();
sum=0;
for (int i=0; i&lt;size; i++) {
for (int j=0; j&lt;size; j++ ) {
sum+=B.getElement2(i,j);
}
}
System.out.println(sum);
timer.stop().display();

System.out.println("done.");</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest30">
    <declaration type="int[]" name="values" />
    <declaration type="IntArrayList" name="list" />
    <declaration type="int" name="l" />
    <declaration type="int" name="sum" />
    <declaration type="cern.colt.Timer" name="timer" />
    <scope>
      <declaration type="int" name="k" />
    </scope>
    <comment>int[] values = { 0, 2};</comment>
    <comment>int k = list.binarySearchFromTo(val,0,l);</comment>
    <comment>System.out.println(list+", "+val+" --&gt; i="+k+", -i-1="+(-k-1));</comment>
    <comment>System.out.println("\n\n");
System.out.println("initializing...");
boolean dense = false;
DoubleMatrix2D A;
DoubleFactory2D factory;
if (dense)
factory = Factory2D.dense;
else
factory = Factory2D.sparse;

double value = 0.5;

DoubleMatrix2D C = Factory2D.dense.sample(size,size,value,0.01);

A = factory.make(size,size);
cern.colt.Timer timer = new cern.colt.Timer().start();
A.assign(C);
timer.stop().display();

timer.reset().start();
double sum=0;
for (int i=0; i&lt;size; i++) {
for (int j=0; j&lt;size; j++ ) {
sum+=A.getQuick(i,j);
}
}
timer.stop().display();
System.out.println(sum);
System.out.println(A);

JSci.maths.DoubleSparseMatrix B = new JSci.maths.DoubleSparseMatrix(size);
timer.reset().start();
for (int i=size; --i&gt;=0; ) {
for (int j=size; --j&gt;=0; ) {
for (int i=0; i&lt;size; i++) {
	for (int j=0; j&lt;size; j++ ) {
B.setElement2(i,j,C.getQuick(i,j));
}
}
System.out.println(A);
timer.stop().display();

timer.reset().start();
sum=0;
for (int i=0; i&lt;size; i++) {
for (int j=0; j&lt;size; j++ ) {
sum+=B.getElement2(i,j);
}
}
System.out.println(sum);
timer.stop().display();

System.out.println("done.");</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest31">
    <declaration type="DoubleMatrix1D" name="a" />
    <declaration type="DoubleMatrix1D" name="b" />
    <declaration type="DoubleMatrix1D" name="c" />
    <declaration type="DoubleMatrix1D" name="d" />
    <comment>DoubleMatrix1D c = b.viewFlip();</comment>
    <comment>DoubleMatrix1D d = c.viewFlip();</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest32">
    <declaration type="double[][]" name="data" />
    <declaration type="DoubleMatrix2D" name="x" />
  </method>
  <javadoc />
  <method type="void" name="doubleTest33">
    <declaration type="double" name="nan" />
    <declaration type="double" name="inf" />
    <declaration type="double" name="ninf" />
    <declaration type="double[][]" name="data" />
    <declaration type="DoubleMatrix2D" name="x" />
    <comment>{
{ 1, 4, 0 },
{ 6, 2, 5 },
{ 0, 7, 3 },
{ 0, 0, 8 },
{ 0, 0, 0 },
{ 0, 0, 0 }
};</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest34">
    <declaration type="double[][]" name="data" />
    <declaration type="DoubleMatrix2D" name="A" />
    <declaration type="DoubleMatrix2D" name="inv" />
    <declaration type="DoubleMatrix2D" name="B" />
    <scope />
  </method>
  <javadoc>
    <text>Title:        Aero3D&lt;p&gt;
 * Description:  A Program to analyse aeroelestic evects in transonic wings&lt;p&gt;
 * Copyright:    Copyright (c) 1998&lt;p&gt;
 * Company:      PIERSOL Engineering Inc.&lt;p&gt;</text>
    <author>John R. Piersol</author>
    <version />
  </javadoc>
  <method type="void" name="doubleTest35">
    <comment>final int DOF = 200;
final cern.jet.random.engine.MersenneTwister RANDOM = new cern.jet.random.engine.MersenneTwister();
final Algebra ALGEBRA = new Algebra();

System.out.println("\n\n\nStarting...");
double[][] k = randomMatrix(DOF, RANDOM);
DoubleMatrix2D kd = new DenseDoubleMatrix2D(k);
Jama.Matrix km = new Jama.Matrix(k);





DoubleMatrix2D coltL = new LUDecomposition(kd).getL();
DoubleMatrix2D coltU = new LUDecomposition(kd).getU();
Jama.Matrix jamaL = new Jama.LUDecomposition(km).getL();
Jama.Matrix jamaU = new Jama.LUDecomposition(km).getU();

System.out.println(coltL.equals(kd.like().assign(jamaL.getArrayCopy())));
System.out.println(coltL.aggregate(F.plus,F.abs));
double s = 0;
double[] temp2 = jamaL.getColumnPackedCopy();
for (int i = 0, n = temp2.length; i &lt; n; ++i) s += Math.abs(temp2[i]);
System.out.println(s);

System.out.println(coltU.equals(kd.like().assign(jamaU.getArrayCopy())));
System.out.println(coltU.aggregate(F.plus,F.abs));
s = 0;
temp2 = jamaU.getColumnPackedCopy();
for (int i = 0, n = temp2.length; i &lt; n; ++i) s += Math.abs(temp2[i]);
System.out.println(s);

System.out.println("colt="+new LUDecomposition(kd).toString());
System.out.println("jama="+new Jama.LUDecomposition(km).toString());



Jama.Matrix kmi = km.inverse();

DoubleMatrix2D kdi = Algebra.DEFAULT.inverse(kd);
DoubleMatrix2D checkColt = Algebra.DEFAULT.mult(kd, kdi);
System.out.println("Colt checksum = " + checkColt.aggregate(F.plus,F.abs) + ", correct = " + DOF);

Jama.Matrix checkJama = kmi.times(km);
double checksum = 0;
double[] temp = checkJama.getColumnPackedCopy();
for (int i = 0, n = temp.length; i &lt; n; ++i) checksum += Math.abs(temp[i]);
System.out.println("Jama checksum = " + checksum + ", correct = " + DOF);

System.out.println("done\n");</comment>
  </method>
  <javadoc>
    <text>Title:        Aero3D&lt;p&gt;
 * Description:  A Program to analyse aeroelestic evects in transonic wings&lt;p&gt;
 * Copyright:    Copyright (c) 1998&lt;p&gt;
 * Company:      PIERSOL Engineering Inc.&lt;p&gt;</text>
    <author>John R. Piersol</author>
    <version />
  </javadoc>
  <method type="void" name="doubleTest36">
    <declaration type="double[]" name="testSort" />
    <declaration type="DoubleMatrix1D" name="doubleDense" />
  </method>
  <javadoc />
  <method type="void" name="doubleTest4">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <declaration type="DoubleMatrix2D" name="master" />
    <declaration type="DoubleMatrix2D" name="view" />
    <comment>make a 4*5 matrix</comment>
    <comment>set all cells to 1</comment>
    <comment>DoubleMatrix2D copyPart = master.copyPart(2,1,2,3);
copyPart.assign(3);  modify an independent copy
copyPart.set(0,0,4);
System.out.println("\n"+copyPart);  has changed
System.out.println("\n"+master);  master has not changed

DoubleMatrix2D view1 = master.viewPart(0,3,4,2);  [0,3] .. [3,4]
DoubleMatrix2D view2 = view1.viewPart(0,0,4,1);  a view from a view
System.out.println("\n"+view1);
System.out.println("\n"+view2);</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest5">
    <comment>int rows = 4;
int columns = 5;  make a 45 matrix
DoubleMatrix2D master = new DenseDoubleMatrix2D(rows,columns);
System.out.println(master);
master.assign(1);  set all cells to 1
DoubleMatrix2D view = master.viewPart(2,0,2,3);
view.assign(0);
for (int i=0; i&lt;rows; i++) {
for (int j=0; j&lt;columns; j++) {
boolean hasIndex = view.hasIndex(master.index(i,j));
System.out.println("("+i+","+j+"):"+hasIndex);
}
}
System.out.println("\n"+master);
System.out.println("\n"+view);
IntArrayList rowList = new IntArrayList();
IntArrayList columnList = new IntArrayList();
DoubleArrayList valueList = new DoubleArrayList();
master.getNonZeros(rowList,columnList,valueList);
System.out.println(rowList);
System.out.println(columnList);
System.out.println(valueList);
System.out.println(master.toStringSparse());</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest6">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <declaration type="DoubleMatrix2D" name="master" />
    <declaration type="int[]" name="indexes" />
    <declaration type="DoubleMatrix1D" name="view1" />
    <declaration type="DoubleMatrix1D" name="view2" />
    <comment>make a 4*5 matrix</comment>
    <comment>master.assign(1);  set all cells to 1</comment>
    <comment>set [2,1] .. [3,3] to 2</comment>
    <comment>DoubleMatrix2D copyPart = master.copyPart(2,1,2,3);
copyPart.assign(3);  modify an independent copy
copyPart.set(0,0,4);
System.out.println("\n"+copyPart);  has changed
System.out.println("\n"+master);  master has not changed

DoubleMatrix2D view1 = master.viewPart(0,3,4,2);  [0,3] .. [3,4]
DoubleMatrix2D view2 = view1.viewPart(0,0,4,1);  a view from a view
System.out.println("\n"+view1);
System.out.println("\n"+view2);</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest7">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <declaration type="DoubleMatrix2D" name="master" />
    <declaration type="int[]" name="rowIndexes" />
    <declaration type="int[]" name="columnIndexes" />
    <declaration type="DoubleMatrix2D" name="view1" />
    <declaration type="DoubleMatrix2D" name="view2" />
    <comment>make a 4*5 matrix</comment>
    <comment>master.assign(1);  set all cells to 1</comment>
    <comment>master.viewPart(2,0,2,3).assign(2);  set [2,1] .. [3,3] to 2</comment>
    <comment>System.out.println("\n"+master);</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest8">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <declaration type="DoubleMatrix2D" name="master" />
    <declaration type="DoubleMatrix2D" name="view1" />
    <declaration type="DoubleMatrix2D" name="view2" />
    <comment>make a 4*5 matrix</comment>
    <comment>master.assign(1);  set all cells to 1</comment>
    <comment>master.viewPart(2,0,2,3).assign(2);  set [2,1] .. [3,3] to 2</comment>
    <comment>System.out.println("\n"+master);</comment>
  </method>
  <javadoc />
  <method type="void" name="doubleTest9">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <declaration type="DoubleMatrix2D" name="master" />
    <declaration type="DoubleMatrix2D" name="view1" />
    <declaration type="DoubleMatrix2D" name="view2" />
    <comment>make a 4*5 matrix</comment>
    <comment>master.assign(1);  set all cells to 1</comment>
    <comment>master.viewPart(2,0,2,3).assign(2);  set [2,1] .. [3,3] to 2</comment>
    <comment>System.out.println("\n"+master);</comment>
  </method>
  <method type="void" name="doubleTestQR">
    <declaration type="double[]" name="x0" />
    <declaration type="double[]" name="y0" />
    <declaration type="double[]" name="x1" />
    <declaration type="double[]" name="y1" />
    <comment>test case0...</comment>
  </method>
  <javadoc />
  <method type="void" name="main">
    <declaration type="int" name="runs" />
    <declaration type="int" name="val" />
    <comment>int runs = Integer.parseInt(args[0]);
int size = Integer.parseInt(args[1]);
double nonZeroFraction = new Double(args[2]).doubleValue();
boolean dense = args[3].equals("dense");
doubleTest23(runs, size, nonZeroFraction, dense);
doubleTest24(runs, size, dense);</comment>
  </method>
  <method type="double[][]" name="randomMatrix">
    <declaration type="double[][]" name="m" />
    <scope>
      <scope />
    </scope>
    <comment>for (int i = 0; i &lt; dof; ++i) {
for (int j = i - 1, n = i + 1; j &lt;= n; ++j) {
if (j &lt; dof &amp;&amp; j &gt; -1)
m[i][j] = RANDOM.nextDouble();
}
}</comment>
    <comment>for (int i = 0; i &lt; dof; ++i)</comment>
    <comment>for (int j = 0; j &lt; dof; ++j) m[i][j] = RANDOM.nextDouble();</comment>
  </method>
  <method type="void" name="solve">
    <comment>create the matrix object
DoubleMatrix2D A = new DenseDoubleMatrix2D(numpnt, 5);
DoubleMatrix2D B = new DenseDoubleMatrix2D(numpnt, 1);
fillout the matrix
for (int i = 0; i &lt; numpnt; i++) {
A.setQuick(i, 0, x[i]  y[i]);
A.setQuick(i, 1, y[i]  y[i]);
A.setQuick(i, 2, x[i]);
A.setQuick(i, 3, y[i]);
A.setQuick(i, 4, 1.0);
B.setQuick(i, 0, -x[i]  x[i]);
}
System.out.println(A);
test the matrix condition
SingularValueDecomposition svd = new SingularValueDecomposition(A);
System.out.println(svd);
 Using Algebra to solve the equation
Algebra alg = new Algebra();
DoubleMatrix2D resAlg = alg.solve(A.copy(), B.copy());
System.out.println("Using Algebra...");
System.out.println(resAlg);
 Using QRDecomposition to solve the problem..
QRDecomposition qrd = new QRDecomposition(A);
DoubleMatrix2D resQRD = qrd.solve(B);
System.out.println("Using QRDecomposition...");
System.out.println(resQRD);
 Using Jama.QRDecomposition to solve the problem..
Jama.QRDecomposition qrdJama = new Jama.QRDecomposition(new Jama.Matrix(A.toArray()));
resQRD = new DenseDoubleMatrix2D(qrdJama.solve(new Jama.Matrix(B.toArray())).getArrayCopy());
System.out.println("Using Jama.QRDecomposition...");
System.out.println(resQRD);</comment>
  </method>
  <javadoc />
  <method type="void" name="testLU">
    <declaration type="double[][]" name="vals" />
    <declaration type="DoubleMatrix2D" name="H" />
    <declaration type="DoubleMatrix2D" name="Hplus" />
    <comment>see values below...</comment>
    <comment>DoubleMatrix2D HtH = new DenseDoubleMatrix2D( 5, 5 );
DoubleMatrix2D Hplus = new DenseDoubleMatrix2D( 5, 6 );
LUDecompositionQuick LUD = new LUDecompositionQuick();
H.zMult( H, HtH, 1, 0, true, false );
DoubleMatrix2D res = Algebra.DEFAULT.inverse(HtH).zMult(H,null,1,0,false,true);
LUD.decompose( HtH );
 first fill Hplus with the transpose of H...
for (int i = 0; i &lt; 6; i++ ) {
for ( int j = 0; j &lt; 5; j++ ) {
Hplus.set( j, i, H.get( i, j ) );
}
}
LUD.solve( Hplus );

DoubleMatrix2D perm = Algebra.DEFAULT.permute(Hplus, null,LUD.getPivot());
DoubleMatrix2D inv = Algebra.DEFAULT.inverse(HtH);.zMult(H,null,1,0,false,true);</comment>
    <comment>in matlab...</comment>
    <comment>Hplus = inv(H' * H) * H'</comment>
    <comment>System.out.println("\nLU="+LUD);</comment>
    <comment>System.out.println("\nHplus="+Hplus);</comment>
    <comment>System.out.println("\nperm="+perm);</comment>
    <comment>System.out.println("\ninv="+inv);</comment>
    <comment>System.out.println("\nres="+res);</comment>
  </method>
  <javadoc />
  <method type="void" name="testMax">
    <declaration type="double[]" name="temp" />
    <declaration type="DenseDoubleMatrix1D" name="d1Double" />
    <declaration type="hep.aida.bin.DynamicBin1D" name="d1ynamicBin" />
    <declaration type="double" name="max" />
  </method>
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
