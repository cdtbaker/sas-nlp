<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractMatrix1D">
  <javadoc>
    <text>Abstract base class for 1-d matrices (aka &lt;i&gt;vectors&lt;/i&gt;) holding objects or primitive data types such as &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, etc.
 * First see the &lt;a href="package-summary.html"&gt;package summary&lt;/a&gt; and javadoc &lt;a href="package-tree.html"&gt;tree view&lt;/a&gt; to get the broad picture.
 * &lt;p&gt;
 * &lt;b&gt;Note that this implementation is not synchronized.&lt;/b&gt;</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <javadoc>
    <text>the number of cells this matrix (view) has</text>
  </javadoc>
  <declaration type="int" name="size" />
  <javadoc>
    <text>the index of the first element</text>
  </javadoc>
  <declaration type="int" name="zero" />
  <javadoc>
    <text>the number of indexes between any two elements, i.e. &lt;tt&gt;index(i+1) - index(i)&lt;/tt&gt;.</text>
  </javadoc>
  <declaration type="int" name="stride" />
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="AbstractMatrix1D" />
  <javadoc>
    <text>Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
 * Default implementation. Override, if necessary.</text>
    <param>rank   the absolute rank of the element.</param>
    <return>the position.</return>
  </javadoc>
  <method type="int" name="_offset" />
  <javadoc>
    <text>Returns the absolute rank of the given relative rank.</text>
    <param>rank   the relative rank of the element.</param>
    <return>the absolute rank of the element.</return>
  </javadoc>
  <method type="int" name="_rank">
    <comment>return zero + ((rank+flipMask)^flipMask);</comment>
    <comment>return zero + rank*flip;  slower</comment>
  </method>
  <javadoc>
    <text>Sanity check for operations requiring an index to be within bounds.</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;index &lt; 0 || index &gt;= size()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="checkIndex" />
  <javadoc>
    <text>Checks whether indexes are legal and throws an exception, if necessary.</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;! (0 &lt;= indexes[i] &lt; size())&lt;/tt&gt; for any i=0..indexes.length()-1.</throws>
  </javadoc>
  <method type="void" name="checkIndexes">
    <scope>
      <declaration type="int" name="index" />
    </scope>
  </method>
  <javadoc>
    <text>Checks whether the receiver contains the given range and throws an exception, if necessary.</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;index&lt;0 || index+width&gt;size()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="checkRange" />
  <javadoc>
    <text>Sanity check for operations requiring two matrices with the same size.</text>
    <throws>IllegalArgumentException if &lt;tt&gt;size() != B.size()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="checkSize" />
  <javadoc>
    <text>Sanity check for operations requiring two matrices with the same size.</text>
    <throws>IllegalArgumentException if &lt;tt&gt;size() != B.size()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="checkSize" />
  <javadoc>
    <text>Returns the position of the element with the given relative rank within the (virtual or non-virtual) internal 1-dimensional array.
 * You may want to override this method for performance.</text>
    <param>rank   the rank of the element.</param>
  </javadoc>
  <method type="int" name="index" />
  <javadoc>
    <text>Sets up a matrix with a given number of cells.</text>
    <param>size the number of cells the matrix shall have.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;size&lt;0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="setUp" />
  <javadoc>
    <text>Sets up a matrix with the given parameters.</text>
    <param>size the number of elements the matrix shall have.</param>
    <param>zero the index of the first element.</param>
    <param>stride the number of indexes between any two elements, i.e. &lt;tt&gt;index(i+1)-index(i)&lt;/tt&gt;.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;size&lt;0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="setUp" />
  <javadoc>
    <text>Returns the number of cells.</text>
  </javadoc>
  <method type="int" name="size" />
  <javadoc>
    <text>Returns the stride of the given dimension (axis, rank).</text>
    <dimension>the index of the dimension.</dimension>
    <return>the stride in the given dimension.</return>
    <throws>IllegalArgumentException if &lt;tt&gt;dimension != 0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="int" name="stride" />
  <javadoc>
    <text>Returns a string representation of the receiver's shape.</text>
  </javadoc>
  <method type="String" name="toStringShort" />
  <javadoc>
    <text>Self modifying version of viewFlip().
 * What used to be index &lt;tt&gt;0&lt;/tt&gt; is now index &lt;tt&gt;size()-1&lt;/tt&gt;, ..., what used to be index &lt;tt&gt;size()-1&lt;/tt&gt; is now index &lt;tt&gt;0&lt;/tt&gt;.</text>
  </javadoc>
  <method type="AbstractMatrix1D" name="vFlip">
    <scope />
  </method>
  <javadoc>
    <text>Self modifying version of viewPart().</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;index&lt;0 || index+width&gt;size()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="AbstractMatrix1D" name="vPart" />
  <javadoc>
    <text>Self modifying version of viewStrides().</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;stride &lt;= 0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="AbstractMatrix1D" name="vStrides" />
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <javadoc>
    <text>Indicates non-flipped state (flip==1) or flipped state (flip==-1).
 * see _setFlip() for further info.</text>
  </javadoc>
  <comment>protected int flip;</comment>
  <javadoc>
    <text>Indicates non-flipped state or flipped state.
 * see _setFlip() for further info.</text>
  </javadoc>
  <comment>protected int flipMask;</comment>
  <comment>this.isNoView implies: offset==0, stride==1</comment>
</class>
