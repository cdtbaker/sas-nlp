<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractMatrix2D">
  <javadoc>
    <text>Abstract base class for 2-d matrices holding objects or primitive data types such as &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, etc.
 * First see the &lt;a href="package-summary.html"&gt;package summary&lt;/a&gt; and javadoc &lt;a href="package-tree.html"&gt;tree view&lt;/a&gt; to get the broad picture.
 * &lt;p&gt;
 * &lt;b&gt;Note that this implementation is not synchronized.&lt;/b&gt;</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <javadoc>
    <text>the number of colums and rows this matrix (view) has</text>
  </javadoc>
  <declaration type="int" name="columns" />
  <javadoc>
    <text>the number of elements between two rows, i.e. &lt;tt&gt;index(i+1,j,k) - index(i,j,k)&lt;/tt&gt;.</text>
  </javadoc>
  <declaration type="int" name="rowStride" />
  <javadoc>
    <text>the number of elements between two columns, i.e. &lt;tt&gt;index(i,j+1,k) - index(i,j,k)&lt;/tt&gt;.</text>
  </javadoc>
  <declaration type="int" name="columnStride" />
  <javadoc>
    <text>the index of the first element</text>
  </javadoc>
  <declaration type="int" name="rowZero" />
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="AbstractMatrix2D" />
  <javadoc>
    <text>Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
 * Default implementation. Override, if necessary.</text>
    <param>rank   the absolute rank of the element.</param>
    <return>the position.</return>
  </javadoc>
  <method type="int" name="_columnOffset" />
  <javadoc>
    <text>Returns the absolute rank of the given relative rank.</text>
    <param>rank   the relative rank of the element.</param>
    <return>the absolute rank of the element.</return>
  </javadoc>
  <method type="int" name="_columnRank">
    <comment>return columnZero + ((rank+columnFlipMask)^columnFlipMask);</comment>
    <comment>return columnZero + rank*columnFlip;  slower</comment>
  </method>
  <javadoc>
    <text>Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
 * Default implementation. Override, if necessary.</text>
    <param>rank   the absolute rank of the element.</param>
    <return>the position.</return>
  </javadoc>
  <method type="int" name="_rowOffset" />
  <javadoc>
    <text>Returns the absolute rank of the given relative rank.</text>
    <param>rank   the relative rank of the element.</param>
    <return>the absolute rank of the element.</return>
  </javadoc>
  <method type="int" name="_rowRank">
    <comment>return rowZero + ((rank+rowFlipMask)^rowFlipMask);</comment>
    <comment>return rowZero + rank*rowFlip;  slower</comment>
  </method>
  <javadoc>
    <text>Checks whether the receiver contains the given box and throws an exception, if necessary.</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;column&lt;0 || width&lt;0 || column+width&gt;columns() || row&lt;0 || height&lt;0 || row+height&gt;rows()&lt;/tt&gt;</throws>
  </javadoc>
  <method type="void" name="checkBox" />
  <javadoc>
    <text>Sanity check for operations requiring a column index to be within bounds.</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;column &lt; 0 || column &gt;= columns()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="checkColumn" />
  <javadoc>
    <text>Checks whether indexes are legal and throws an exception, if necessary.</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;! (0 &lt;= indexes[i] &lt; columns())&lt;/tt&gt; for any i=0..indexes.length()-1.</throws>
  </javadoc>
  <method type="void" name="checkColumnIndexes">
    <scope>
      <declaration type="int" name="index" />
    </scope>
  </method>
  <javadoc>
    <text>Sanity check for operations requiring a row index to be within bounds.</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;row &lt; 0 || row &gt;= rows()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="checkRow" />
  <javadoc>
    <text>Checks whether indexes are legal and throws an exception, if necessary.</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;! (0 &lt;= indexes[i] &lt; rows())&lt;/tt&gt; for any i=0..indexes.length()-1.</throws>
  </javadoc>
  <method type="void" name="checkRowIndexes">
    <scope>
      <declaration type="int" name="index" />
    </scope>
  </method>
  <javadoc>
    <text>Sanity check for operations requiring two matrices with the same number of columns and rows.</text>
    <throws>IllegalArgumentException if &lt;tt&gt;columns() != B.columns() || rows() != B.rows()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="checkShape" />
  <javadoc>
    <text>Sanity check for operations requiring matrices with the same number of columns and rows.</text>
    <throws>IllegalArgumentException if &lt;tt&gt;columns() != B.columns() || rows() != B.rows() || columns() != C.columns() || rows() != C.rows()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="checkShape" />
  <javadoc>
    <text>Returns the number of columns.</text>
  </javadoc>
  <method type="int" name="columns" />
  <javadoc>
    <text>Returns the position of the given coordinate within the (virtual or non-virtual) internal 1-dimensional array.</text>
    <param>row   the index of the row-coordinate.</param>
    <param>column   the index of the column-coordinate.</param>
  </javadoc>
  <method type="int" name="index" />
  <javadoc>
    <text>Returns the number of rows.</text>
  </javadoc>
  <method type="int" name="rows" />
  <javadoc>
    <text>Sets up a matrix with a given number of rows and columns.</text>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;rows&lt;0 || columns&lt;0 || (double)columns*rows &gt; Integer.MAX_VALUE&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="setUp" />
  <javadoc>
    <text>Sets up a matrix with a given number of rows and columns and the given strides.</text>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <param>rowZero the position of the first element.</param>
    <param>columnZero the position of the first element.</param>
    <param>rowStride the number of elements between two rows, i.e. &lt;tt&gt;index(i+1,j)-index(i,j)&lt;/tt&gt;.</param>
    <param>columnStride the number of elements between two columns, i.e. &lt;tt&gt;index(i,j+1)-index(i,j)&lt;/tt&gt;.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;rows&lt;0 || columns&lt;0 || (double)columns*rows &gt; Integer.MAX_VALUE&lt;/tt&gt; or flip's are illegal.</throws>
  </javadoc>
  <method type="void" name="setUp" />
  <javadoc>
    <text>Returns the number of cells which is &lt;tt&gt;rows()*columns()&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="size" />
  <javadoc>
    <text>Returns a string representation of the receiver's shape.</text>
  </javadoc>
  <method type="String" name="toStringShort" />
  <javadoc>
    <text>Self modifying version of viewColumnFlip().</text>
  </javadoc>
  <method type="AbstractMatrix2D" name="vColumnFlip">
    <scope />
  </method>
  <javadoc>
    <text>Self modifying version of viewDice().</text>
  </javadoc>
  <method type="AbstractMatrix2D" name="vDice">
    <declaration type="int" name="tmp" />
    <comment>swap;</comment>
    <comment>flips stay unaffected</comment>
  </method>
  <javadoc>
    <text>Self modifying version of viewPart().</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;column&lt;0 || width&lt;0 || column+width&gt;columns() || row&lt;0 || height&lt;0 || row+height&gt;rows()&lt;/tt&gt;</throws>
  </javadoc>
  <method type="AbstractMatrix2D" name="vPart" />
  <javadoc>
    <text>Self modifying version of viewRowFlip().</text>
  </javadoc>
  <method type="AbstractMatrix2D" name="vRowFlip">
    <scope />
  </method>
  <javadoc>
    <text>Self modifying version of viewStrides().</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;rowStride&lt;=0 || columnStride&lt;=0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="AbstractMatrix2D" name="vStrides" />
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <javadoc>
    <text>Indicates non-flipped state (flip==1) or flipped state (flip==-1).
 * see _setFlip() for further info.</text>
  </javadoc>
  <comment>protected int rowFlip, columnFlip;</comment>
  <javadoc>
    <text>Indicates non-flipped state or flipped state.
 * see _setFlip() for further info.</text>
  </javadoc>
  <comment>protected int rowFlipMask, columnFlipMask;</comment>
</class>
