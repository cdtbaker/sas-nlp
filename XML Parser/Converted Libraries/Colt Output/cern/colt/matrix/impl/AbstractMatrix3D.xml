<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractMatrix3D">
  <javadoc>
    <text>Abstract base class for 3-d matrices holding objects or primitive data types such as &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, etc.
 * First see the &lt;a href="package-summary.html"&gt;package summary&lt;/a&gt; and javadoc &lt;a href="package-tree.html"&gt;tree view&lt;/a&gt; to get the broad picture.
 * &lt;p&gt;
 * &lt;b&gt;Note that this implementation is not synchronized.&lt;/b&gt;</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <javadoc>
    <text>the number of slices this matrix (view) has</text>
  </javadoc>
  <declaration type="int" name="slices" />
  <javadoc>
    <text>the number of rows this matrix (view) has</text>
  </javadoc>
  <declaration type="int" name="rows" />
  <javadoc>
    <text>the number of columns this matrix (view) has</text>
  </javadoc>
  <declaration type="int" name="columns" />
  <javadoc>
    <text>the number of elements between two slices, i.e. &lt;tt&gt;index(k+1,i,j) - index(k,i,j)&lt;/tt&gt;.</text>
  </javadoc>
  <declaration type="int" name="sliceStride" />
  <javadoc>
    <text>the number of elements between two rows, i.e. &lt;tt&gt;index(k,i+1,j) - index(k,i,j)&lt;/tt&gt;.</text>
  </javadoc>
  <declaration type="int" name="rowStride" />
  <javadoc>
    <text>the number of elements between two columns, i.e. &lt;tt&gt;index(k,i,j+1) - index(k,i,j)&lt;/tt&gt;.</text>
  </javadoc>
  <declaration type="int" name="columnStride" />
  <javadoc>
    <text>the index of the first element</text>
  </javadoc>
  <declaration type="int" name="sliceZero" />
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="AbstractMatrix3D" />
  <javadoc>
    <text>Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
 * Default implementation. Override, if necessary.</text>
    <param>rank   the absolute rank of the element.</param>
    <return>the position.</return>
  </javadoc>
  <method type="int" name="_columnOffset" />
  <javadoc>
    <text>Returns the absolute rank of the given relative rank.</text>
    <param>rank   the relative rank of the element.</param>
    <return>the absolute rank of the element.</return>
  </javadoc>
  <method type="int" name="_columnRank" />
  <javadoc>
    <text>Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
 * Default implementation. Override, if necessary.</text>
    <param>rank   the absolute rank of the element.</param>
    <return>the position.</return>
  </javadoc>
  <method type="int" name="_rowOffset" />
  <javadoc>
    <text>Returns the absolute rank of the given relative rank.</text>
    <param>rank   the relative rank of the element.</param>
    <return>the absolute rank of the element.</return>
  </javadoc>
  <method type="int" name="_rowRank" />
  <javadoc>
    <text>Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
 * Default implementation. Override, if necessary.</text>
    <param>rank   the absolute rank of the element.</param>
    <return>the position.</return>
  </javadoc>
  <method type="int" name="_sliceOffset" />
  <javadoc>
    <text>Returns the absolute rank of the given relative rank.</text>
    <param>rank   the relative rank of the element.</param>
    <return>the absolute rank of the element.</return>
  </javadoc>
  <method type="int" name="_sliceRank" />
  <javadoc>
    <text>Checks whether the receiver contains the given box and throws an exception, if necessary.</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;row&lt;0 || height&lt;0 || row+height&gt;rows || slice&lt;0 || depth&lt;0 || slice+depth&gt;slices  || column&lt;0 || width&lt;0 || column+width&gt;columns&lt;/tt&gt;</throws>
  </javadoc>
  <method type="void" name="checkBox" />
  <javadoc>
    <text>Sanity check for operations requiring a column index to be within bounds.</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;column &lt; 0 || column &gt;= columns()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="checkColumn" />
  <javadoc>
    <text>Checks whether indexes are legal and throws an exception, if necessary.</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;! (0 &lt;= indexes[i] &lt; columns())&lt;/tt&gt; for any i=0..indexes.length()-1.</throws>
  </javadoc>
  <method type="void" name="checkColumnIndexes">
    <scope>
      <declaration type="int" name="index" />
    </scope>
  </method>
  <javadoc>
    <text>Sanity check for operations requiring a row index to be within bounds.</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;row &lt; 0 || row &gt;= rows()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="checkRow" />
  <javadoc>
    <text>Checks whether indexes are legal and throws an exception, if necessary.</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;! (0 &lt;= indexes[i] &lt; rows())&lt;/tt&gt; for any i=0..indexes.length()-1.</throws>
  </javadoc>
  <method type="void" name="checkRowIndexes">
    <scope>
      <declaration type="int" name="index" />
    </scope>
  </method>
  <javadoc>
    <text>Sanity check for operations requiring two matrices with the same number of slices, rows and columns.</text>
    <throws>IllegalArgumentException if &lt;tt&gt;slices() != B.slices() || rows() != B.rows() || columns() != B.columns()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="checkShape" />
  <javadoc>
    <text>Sanity check for operations requiring matrices with the same number of slices, rows and columns.</text>
    <throws>IllegalArgumentException if &lt;tt&gt;slices() != B.slices() || rows() != B.rows() || columns() != B.columns() || slices() != C.slices() || rows() != C.rows() || columns() != C.columns()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="checkShape" />
  <javadoc>
    <text>Sanity check for operations requiring a slice index to be within bounds.</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;slice &lt; 0 || slice &gt;= slices()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="checkSlice" />
  <javadoc>
    <text>Checks whether indexes are legal and throws an exception, if necessary.</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;! (0 &lt;= indexes[i] &lt; slices())&lt;/tt&gt; for any i=0..indexes.length()-1.</throws>
  </javadoc>
  <method type="void" name="checkSliceIndexes">
    <scope>
      <declaration type="int" name="index" />
    </scope>
  </method>
  <javadoc>
    <text>Returns the number of columns.</text>
  </javadoc>
  <method type="int" name="columns" />
  <javadoc>
    <text>Returns the position of the given coordinate within the (virtual or non-virtual) internal 1-dimensional array.</text>
    <param>slice   the index of the slice-coordinate.</param>
    <param>row   the index of the row-coordinate.</param>
    <param>column   the index of the third-coordinate.</param>
  </javadoc>
  <method type="int" name="index" />
  <javadoc>
    <text>Returns the number of rows.</text>
  </javadoc>
  <method type="int" name="rows" />
  <javadoc>
    <text>Sets up a matrix with a given number of slices and rows.</text>
    <param>slices the number of slices the matrix shall have.</param>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;(double)rows*slices &gt; Integer.MAX_VALUE&lt;/tt&gt;.</throws>
    <throws>IllegalArgumentException if &lt;tt&gt;slices&lt;0 || rows&lt;0 || columns&lt;0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="setUp" />
  <javadoc>
    <text>Sets up a matrix with a given number of slices and rows and the given strides.</text>
    <param>slices the number of slices the matrix shall have.</param>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <param>sliceZero the position of the first element.</param>
    <param>rowZero the position of the first element.</param>
    <param>columnZero the position of the first element.</param>
    <param>sliceStride the number of elements between two slices, i.e. &lt;tt&gt;index(k+1,i,j)-index(k,i,j)&lt;/tt&gt;.</param>
    <param>rowStride the number of elements between two rows, i.e. &lt;tt&gt;index(k,i+1,j)-index(k,i,j)&lt;/tt&gt;.</param>
    <param>columnnStride the number of elements between two columns, i.e. &lt;tt&gt;index(k,i,j+1)-index(k,i,j)&lt;/tt&gt;.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;(double)slices*rows*columnss &gt; Integer.MAX_VALUE&lt;/tt&gt;.</throws>
    <throws>IllegalArgumentException if &lt;tt&gt;slices&lt;0 || rows&lt;0 || columns&lt;0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="setUp" />
  <method type="int[]" name="shape">
    <declaration type="int[]" name="shape" />
  </method>
  <javadoc>
    <text>Returns the number of cells which is &lt;tt&gt;slices()*rows()*columns()&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="size" />
  <javadoc>
    <text>Returns the number of slices.</text>
  </javadoc>
  <method type="int" name="slices" />
  <javadoc>
    <text>Returns a string representation of the receiver's shape.</text>
  </javadoc>
  <method type="String" name="toStringShort" />
  <javadoc>
    <text>Self modifying version of viewColumnFlip().</text>
  </javadoc>
  <method type="AbstractMatrix3D" name="vColumnFlip">
    <scope />
  </method>
  <javadoc>
    <text>Self modifying version of viewDice().</text>
    <throws>IllegalArgumentException if some of the parameters are equal or not in range 0..2.</throws>
  </javadoc>
  <method type="AbstractMatrix3D" name="vDice">
    <declaration type="int" name="d" />
    <scope />
    <declaration type="int[]" name="shape" />
    <declaration type="int[]" name="strides" />
    <comment>swap shape</comment>
    <comment>swap strides</comment>
  </method>
  <javadoc>
    <text>Self modifying version of viewPart().</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;slice&lt;0 || depth&lt;0 || slice+depth&gt;slices() || row&lt;0 || height&lt;0 || row+height&gt;rows() || column&lt;0 || width&lt;0 || column+width&gt;columns()&lt;/tt&gt;</throws>
  </javadoc>
  <method type="AbstractMatrix3D" name="vPart" />
  <javadoc>
    <text>Self modifying version of viewRowFlip().</text>
  </javadoc>
  <method type="AbstractMatrix3D" name="vRowFlip">
    <scope />
  </method>
  <javadoc>
    <text>Self modifying version of viewSliceFlip().</text>
  </javadoc>
  <method type="AbstractMatrix3D" name="vSliceFlip">
    <scope />
  </method>
  <javadoc>
    <text>Self modifying version of viewStrides().</text>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;sliceStride&lt;=0 || rowStride&lt;=0 || columnStride&lt;=0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="AbstractMatrix3D" name="vStrides" />
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>this.isNoView implies: offset==0, sliceStride==rows*slices, rowStride==columns, columnStride==1</comment>
</class>
