<?xml version="1.0" encoding="UTF-8"?>
<class name="RCDoubleMatrix2D">
  <javadoc>
    <text>Sparse row-compressed 2-d matrix holding &lt;tt&gt;double&lt;/tt&gt; elements.
 * First see the &lt;a href="package-summary.html"&gt;package summary&lt;/a&gt; and javadoc &lt;a href="package-tree.html"&gt;tree view&lt;/a&gt; to get the broad picture.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt;
 * &lt;p&gt;
 * Internally uses the standard sparse row-compressed format, with two important differences that broaden the applicability of this storage format:
 * &lt;ul&gt;
 * &lt;li&gt;We use a {@link cern.colt.list.IntArrayList} and {@link cern.colt.list.DoubleArrayList} to hold the column indexes and nonzero values, respectively. 
 * This improves set(...) performance, because the standard way of using non-resizable primitive arrays causes excessive memory allocation, garbage collection and array copying.
 * The small downside of this is that set(...,0) does not free memory (The capacity of an arraylist does not shrink upon element removal).
 * &lt;li&gt;Column indexes are kept sorted within a row. This both improves get and set performance on rows with many non-zeros, because we can use a binary search. 
 * (Experiments show that this hurts &lt; 10% on rows with &lt; 4 nonZeros.)
 * &lt;/ul&gt;
 * &lt;br&gt;
 * Note that this implementation is not synchronized.
 * &lt;p&gt;
 * &lt;b&gt;Memory requirements:&lt;/b&gt;
 * &lt;p&gt;
 * Cells that
 * &lt;ul&gt;
 * &lt;li&gt;are never set to non-zero values do not use any memory.
 * &lt;li&gt;switch from zero to non-zero state do use memory.
 * &lt;li&gt;switch back from non-zero to zero state also do use memory. Their memory is &lt;i&gt;not&lt;/i&gt; automatically reclaimed (because of the lists vs. arrays). Reclamation can be triggered via {@link #trimToSize()}.
 * &lt;/ul&gt;
 * &lt;p&gt;
 * &lt;tt&gt;memory [bytes] = 4*rows + 12 * nonZeros&lt;/tt&gt;.
 * &lt;br&gt;Where &lt;tt&gt;nonZeros = cardinality()&lt;/tt&gt; is the number of non-zero cells.
 * Thus, a 1000 x 1000 matrix with 1000000 non-zero cells consumes 11.5 MB.
 * The same 1000 x 1000 matrix with 1000 non-zero cells consumes 15 KB.
 * &lt;p&gt;
 * &lt;b&gt;Time complexity:&lt;/b&gt;
 * &lt;p&gt;
 * Getting a cell value takes time&lt;tt&gt; O(log nzr)&lt;/tt&gt; where &lt;tt&gt;nzr&lt;/tt&gt; 
 * is the number of non-zeros of the touched row. This is usually quick, because 
 * typically there are only few nonzeros per row. So, in practice, get has &lt;i&gt;expected&lt;/i&gt; 
 * constant time. Setting a cell value takes &lt;i&gt; &lt;/i&gt;worst-case time &lt;tt&gt;O(nz)&lt;/tt&gt; 
 * where &lt;tt&gt;nzr&lt;/tt&gt; is the total number of non-zeros in the matrix. This can 
 * be extremely slow, but if you traverse coordinates properly (i.e. upwards), each write is done much quicker:
 * &lt;table&gt;
 * &lt;td class="PRE"&gt; 
 * &lt;pre&gt;
 * // rather quick
 * matrix.assign(0);
 * for (int row=0; row &lt; rows; row++) {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;for (int column=0; column &lt; columns; column++) {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (someCondition) matrix.setQuick(row,column,someValue);
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;}
 * }
 * // poor
 * matrix.assign(0);
 * for (int row=rows; --row &gt;= 0; ) {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;for (int column=columns; --column &gt;= 0; ) {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (someCondition) matrix.setQuick(row,column,someValue);
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;}
 * }
 * &lt;/pre&gt;
 * &lt;/td&gt;
 * &lt;/table&gt;
 * If for whatever reasons you can't iterate properly, consider to create an empty dense matrix, store your non-zeros in it, then call &lt;tt&gt;sparse.assign(dense)&lt;/tt&gt;. Under the circumstances, this is still rather quick.
 * &lt;p&gt;
 * Fast iteration over non-zeros can be done via {@link #forEachNonZero}, which supplies your function with row, column and value of each nonzero.
 * Although the internally implemented version is a bit more sophisticated,
 * here is how a quite efficient user-level matrix-vector multiplication could look like:
 * &lt;table&gt;
 * &lt;td class="PRE"&gt; 
 * &lt;pre&gt;
 * // Linear algebraic y = A * x
 * A.forEachNonZero(
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;new cern.colt.function.IntIntDoubleFunction() {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public double apply(int row, int column, double value) {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;y.setQuick(row,y.getQuick(row) + value * x.getQuick(column));
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return value;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;}
 * );
 * &lt;/pre&gt;
 * &lt;/td&gt;
 * &lt;/table&gt;
 * &lt;p&gt;
 * Here is how a a quite efficient user-level combined scaling operation could look like:
 * &lt;table&gt;
 * &lt;td class="PRE"&gt; 
 * &lt;pre&gt;
 * // Elementwise A = A + alpha*B
 * B.forEachNonZero(
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;new cern.colt.function.IntIntDoubleFunction() {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public double apply(int row, int column, double value) {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;A.setQuick(row,column,A.getQuick(row,column) + alpha*value);
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return value;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;}
 * );
 * &lt;/pre&gt;
 * &lt;/td&gt;
 * &lt;/table&gt;
 * Method {@link #assign(DoubleMatrix2D,cern.colt.function.DoubleDoubleFunction)} does just that if you supply {@link cern.jet.math.Functions#plusMult} as argument.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>0.9, 04/14/2000</version>
  </javadoc>
  <declaration type="IntArrayList" name="indexes" />
  <declaration type="DoubleArrayList" name="values" />
  <declaration type="int[]" name="starts" />
  <javadoc>
    <text>Constructs a matrix with a copy of the given values.
 * &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[row][column]&lt;/tt&gt;
 * and have exactly the same number of columns in every row.
 * &lt;p&gt;
 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.</text>
    <param>values The values to be filled into the new matrix.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;for any 1 &amp;lt;= row &amp;lt; values.length: values[row].length != values[row-1].length&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="constructor" name="RCDoubleMatrix2D" />
  <javadoc>
    <text>Constructs a matrix with a given number of rows and columns.
 * All entries are initially &lt;tt&gt;0&lt;/tt&gt;.</text>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;rows&lt;0 || columns&lt;0 || (double)columns*rows &gt; Integer.MAX_VALUE&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="constructor" name="RCDoubleMatrix2D">
    <scope />
    <scope />
    <comment>we can hold rows*columns&gt;Integer.MAX_VALUE cells !</comment>
  </method>
  <javadoc>
    <text>Sets all cells to the state specified by &lt;tt&gt;value&lt;/tt&gt;.</text>
    <param>value the value to be filled into the cells.</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="assign">
    <scope />
    <comment>overriden for performance only</comment>
  </method>
  <method type="DoubleMatrix2D" name="assign">
    <scope>
      <declaration type="double" name="alpha" />
      <declaration type="double[]" name="vals" />
      <scope />
    </scope>
    <scope />
    <comment>x[i] = mult*x[i]</comment>
    <comment>the funny definition of isNaN(). This should better not happen.</comment>
    <comment>forEachNonZero(
new cern.colt.function.IntIntDoubleFunction() {
public double apply(int i, int j, double value) {
return function.apply(value);
}
}
);</comment>
  </method>
  <javadoc>
    <text>Replaces all cell values of the receiver with the values of another matrix.
 * Both matrices must have the same number of rows and columns.
 * If both matrices share the same cells (as is the case if they are views derived from the same matrix) and intersect in an ambiguous way, then replaces &lt;i&gt;as if&lt;/i&gt; using an intermediate auxiliary deep copy of &lt;tt&gt;other&lt;/tt&gt;.</text>
    <param>source   the source matrix to copy from (may be identical to the receiver).</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
    <throws>IllegalArgumentException if &lt;tt&gt;columns() != source.columns() || rows() != source.rows()&lt;/tt&gt;</throws>
  </javadoc>
  <method type="DoubleMatrix2D" name="assign">
    <scope>
      <method type="double" name="apply" />
    </scope>
    <declaration type="RCDoubleMatrix2D" name="other" />
    <declaration type="int" name="s" />
    <comment>nothing to do</comment>
    <comment>overriden for performance only</comment>
    <comment>return super.assign(source);</comment>
    <comment>indexes.clear();
values.clear();
int nonZeros=0;
for (int row=0; row&lt;rows; row++) {
starts[row]=nonZeros;
for (int column=0; column&lt;columns; column++) {
double v = source.getQuick(row,column);
if (v!=0) {
values.add(v);
indexes.add(column);
nonZeros++;
}
}
}
starts[rows]=nonZeros;</comment>
    <comment>even quicker</comment>
  </method>
  <method type="DoubleMatrix2D" name="assign">
    <scope>
      <declaration type="double" name="alpha" />
      <method type="double" name="apply" />
    </scope>
    <scope>
      <declaration type="int[]" name="idx" />
      <declaration type="double[]" name="vals" />
      <scope>
        <declaration type="int" name="low" />
        <scope>
          <declaration type="int" name="j" />
        </scope>
      </scope>
    </scope>
    <scope>
      <declaration type="int[]" name="idx" />
      <declaration type="double[]" name="vals" />
      <scope>
        <declaration type="int" name="low" />
        <scope>
          <declaration type="int" name="j" />
        </scope>
      </scope>
    </scope>
    <comment>x[i] = x[i] + alpha*y[i]</comment>
    <comment>nothing to do</comment>
    <comment>x[i] = x[i] * y[i]</comment>
    <comment>x[i] = x[i] / y[i]</comment>
  </method>
  <method type="DoubleMatrix2D" name="forEachNonZero">
    <declaration type="int[]" name="idx" />
    <declaration type="double[]" name="vals" />
    <scope>
      <declaration type="int" name="low" />
      <scope>
        <declaration type="int" name="j" />
        <declaration type="double" name="value" />
        <declaration type="double" name="r" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Returns the content of this matrix if it is a wrapper; or &lt;tt&gt;this&lt;/tt&gt; otherwise.
 * Override this method in wrappers.</text>
  </javadoc>
  <method type="DoubleMatrix2D" name="getContent" />
  <javadoc>
    <text>Returns the matrix cell value at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt;.
 * &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.</text>
    <param>row   the index of the row-coordinate.</param>
    <param>column   the index of the column-coordinate.</param>
    <return>the value at the specified coordinate.</return>
  </javadoc>
  <method type="double" name="getQuick">
    <declaration type="int" name="k" />
    <declaration type="double" name="v" />
  </method>
  <method type="void" name="insert" />
  <javadoc>
    <text>Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified number of rows and columns.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt;, etc.
 * In general, the new matrix should have internal parametrization as similar as possible.</text>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <return>a new empty matrix of the same dynamic type.</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="like" />
  <javadoc>
    <text>Construct and returns a new 1-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, entirelly independent of the receiver.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt;, etc.</text>
    <param>size the number of cells the matrix shall have.</param>
    <return>a new matrix of the corresponding dynamic type.</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="like1D" />
  <method type="void" name="remove" />
  <javadoc>
    <text>Sets the matrix cell at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt; to the specified value.
 * &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.</text>
    <param>row   the index of the row-coordinate.</param>
    <param>column   the index of the column-coordinate.</param>
    <param>value the value to be filled into the specified cell.</param>
  </javadoc>
  <method type="void" name="setQuick">
    <declaration type="int" name="k" />
    <scope />
    <scope />
    <comment>found</comment>
  </method>
  <method type="void" name="trimToSize" />
  <method type="DoubleMatrix1D" name="zMult">
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <scope />
    <declaration type="boolean" name="ignore" />
    <scope />
    <declaration type="DenseDoubleMatrix1D" name="zz" />
    <declaration type="double[]" name="zElements" />
    <declaration type="int" name="zStride" />
    <declaration type="int" name="zi" />
    <declaration type="DenseDoubleMatrix1D" name="yy" />
    <declaration type="double[]" name="yElements" />
    <declaration type="int" name="yStride" />
    <declaration type="int" name="yi" />
    <declaration type="int[]" name="idx" />
    <declaration type="double[]" name="vals" />
    <declaration type="int" name="s" />
    <scope>
      <scope>
        <declaration type="int" name="high" />
        <declaration type="double" name="sum" />
        <scope>
          <declaration type="int" name="j" />
        </scope>
      </scope>
    </scope>
    <scope>
      <scope>
        <declaration type="int" name="high" />
        <declaration type="double" name="yElem" />
        <scope>
          <declaration type="int" name="j" />
        </scope>
      </scope>
    </scope>
    <comment>forEachNonZero(
new cern.colt.function.IntIntDoubleFunction() {
public double apply(int i, int j, double value) {
zElements[zi + zStridei] += value  yElements[yi + yStridej];
z.setQuick(row,z.getQuick(row) + value  y.getQuick(column));
System.out.println("["+i+","+j+"]--&gt;"+value);
return value;
}
}
);</comment>
  </method>
  <method type="DoubleMatrix2D" name="zMult">
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <scope />
    <declaration type="int" name="p" />
    <declaration type="boolean" name="ignore" />
    <declaration type="DoubleMatrix1D[]" name="Brows" />
    <declaration type="DoubleMatrix1D[]" name="Crows" />
    <declaration type="cern.jet.math.PlusMult" name="fun" />
    <declaration type="int[]" name="idx" />
    <declaration type="double[]" name="vals" />
    <scope>
      <declaration type="int" name="low" />
      <scope>
        <declaration type="int" name="j" />
      </scope>
    </scope>
    <comment>cache views</comment>
  </method>
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>The elements of the matrix.</comment>
  <comment>protected int N;</comment>
</class>
