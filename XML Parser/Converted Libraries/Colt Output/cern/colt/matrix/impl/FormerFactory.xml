<?xml version="1.0" encoding="UTF-8"?>
<class name="FormerFactory">
  <javadoc>
    <text>Factory producing implementations of {@link cern.colt.matrix.impl.Former} via method create();
 * Implementations of can use existing libraries such as corejava.PrintfFormat or corejava.Format or other.
 * Serves to isolate the interface of String formatting from the actual implementation.
 * If you want to plug in a different String formatting implementation, simply replace this class with your alternative.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 21/07/00</version>
  </javadoc>
  <javadoc>
    <text>Constructs and returns a new format instance.</text>
    <param>s the format string following printf conventions.
 * The string has a prefix, a format code and a suffix. The prefix and suffix
 * become part of the formatted output. The format code directs the
 * formatting of the (single) parameter to be formatted. The code has the
 * following structure
 * &lt;ul&gt;
 * &lt;li&gt; a % (required)
 * &lt;li&gt; a modifier (optional)
 * &lt;dl&gt;
 * &lt;dt&gt; + &lt;dd&gt; forces display of + for positive numbers
 * &lt;dt&gt; 0 &lt;dd&gt; show leading zeroes
 * &lt;dt&gt; - &lt;dd&gt; align left in the field
 * &lt;dt&gt; space &lt;dd&gt; prepend a space in front of positive numbers
 * &lt;dt&gt; # &lt;dd&gt; use "alternate" format. Add 0 or 0x for octal or hexadecimal numbers. Don't suppress trailing zeroes in general floating point format.
 * &lt;/dl&gt;
 * &lt;li&gt; an integer denoting field width (optional)
 * &lt;li&gt; a period followed by an integer denoting precision (optional)
 * &lt;li&gt; a format descriptor (required)
 * &lt;dl&gt;
 * &lt;dt&gt;f &lt;dd&gt; floating point number in fixed format
 * &lt;dt&gt;e, E &lt;dd&gt; floating point number in exponential notation (scientific format). The E format results in an uppercase E for the exponent (1.14130E+003), the e format in a lowercase e.
 * &lt;dt&gt;g, G &lt;dd&gt; floating point number in general format (fixed format for small numbers, exponential format for large numbers). Trailing zeroes are suppressed. The G format results in an uppercase E for the exponent (if any), the g format in a lowercase e.
 * &lt;dt&gt;d, i &lt;dd&gt; integer in decimal
 * &lt;dt&gt;x &lt;dd&gt; integer in hexadecimal
 * &lt;dt&gt;o &lt;dd&gt; integer in octal
 * &lt;dt&gt;s &lt;dd&gt; string
 * &lt;dt&gt;c &lt;dd&gt; character
 * &lt;/dl&gt;
 * &lt;/ul&gt;</param>
    <exception>IllegalArgumentException if bad format</exception>
  </javadoc>
  <method type="Former" name="create">
    <declaration type="corejava.Format" name="f" />
    <method type="String" name="form">
      <scope />
    </method>
    <comment>private FormatStringBuffer f = (format!=null ? new corejava.FormatStringBuffer(format) : null);</comment>
    <comment>private corejava.PrintfFormat f = (format!=null ? new corejava.PrintfFormat(format) : null);</comment>
    <comment>value != value &lt;==&gt; Double.isNaN(value)</comment>
    <comment>Work around bug in corejava.Format.form() for inf, -inf, NaN</comment>
    <comment>return f.format(value).toString();</comment>
    <comment>return f.sprintf(value);</comment>
  </method>
</class>
