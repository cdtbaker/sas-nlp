<?xml version="1.0" encoding="UTF-8"?>
<class name="SelectedDenseDoubleMatrix3D">
  <javadoc>
    <text>Selection view on dense 3-d matrices holding &lt;tt&gt;double&lt;/tt&gt; elements.
 * First see the &lt;a href="package-summary.html"&gt;package summary&lt;/a&gt; and javadoc &lt;a href="package-tree.html"&gt;tree view&lt;/a&gt; to get the broad picture.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt;
 * &lt;p&gt;
 * Objects of this class are typically constructed via &lt;tt&gt;viewIndexes&lt;/tt&gt; methods on some source matrix.
 * The interface introduced in abstract super classes defines everything a user can do.
 * From a user point of view there is nothing special about this class; it presents the same functionality with the same signatures and semantics as its abstract superclass(es) while introducing no additional functionality.
 * Thus, this class need not be visible to users.
 * By the way, the same principle applies to concrete DenseXXX and SparseXXX classes: they presents the same functionality with the same signatures and semantics as abstract superclass(es) while introducing no additional functionality.
 * Thus, they need not be visible to users, either. 
 * Factory methods could hide all these concrete types.
 * &lt;p&gt;
 * This class uses no delegation. 
 * Its instances point directly to the data. 
 * Cell addressing overhead is is 1 additional int addition and 3 additional array index accesses per get/set.
 * &lt;p&gt;
 * Note that this implementation is not synchronized.
 * &lt;p&gt;
 * &lt;b&gt;Memory requirements:&lt;/b&gt;
 * &lt;p&gt;
 * &lt;tt&gt;memory [bytes] = 4*(sliceIndexes.length+rowIndexes.length+columnIndexes.length)&lt;/tt&gt;.
 * Thus, an index view with 100 x 100 x 100 indexes additionally uses 8 KB.
 * &lt;p&gt;
 * &lt;b&gt;Time complexity:&lt;/b&gt;
 * &lt;p&gt;
 * Depends on the parent view holding cells.
 * &lt;p&gt;</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <javadoc>
    <text>The elements of this matrix.</text>
  </javadoc>
  <declaration type="double[]" name="elements" />
  <javadoc>
    <text>The offsets of the visible cells of this matrix.</text>
  </javadoc>
  <declaration type="int[]" name="sliceOffsets" />
  <declaration type="int[]" name="rowOffsets" />
  <declaration type="int[]" name="columnOffsets" />
  <javadoc>
    <text>The offset.</text>
  </javadoc>
  <declaration type="int" name="offset" />
  <javadoc>
    <text>Constructs a matrix view with the given parameters.</text>
    <param>elements the cells.</param>
    <param>sliceOffsets   The slice offsets of the cells that shall be visible.</param>
    <param>rowOffsets   The row offsets of the cells that shall be visible.</param>
    <param>columnOffsets   The column offsets of the cells that shall be visible.</param>
  </javadoc>
  <method type="constructor" name="SelectedDenseDoubleMatrix3D">
    <declaration type="int" name="slices" />
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <comment>be sure parameters are valid, we do not check...</comment>
  </method>
  <javadoc>
    <text>Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
 * Default implementation. Override, if necessary.</text>
    <param>rank   the absolute rank of the element.</param>
    <return>the position.</return>
  </javadoc>
  <method type="int" name="_columnOffset" />
  <javadoc>
    <text>Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
 * Default implementation. Override, if necessary.</text>
    <param>rank   the absolute rank of the element.</param>
    <return>the position.</return>
  </javadoc>
  <method type="int" name="_rowOffset" />
  <javadoc>
    <text>Returns the position of the given absolute rank within the (virtual or non-virtual) internal 1-dimensional array. 
 * Default implementation. Override, if necessary.</text>
    <param>rank   the absolute rank of the element.</param>
    <return>the position.</return>
  </javadoc>
  <method type="int" name="_sliceOffset" />
  <javadoc>
    <text>Returns the matrix cell value at coordinate &lt;tt&gt;[slice,row,column]&lt;/tt&gt;.
 * &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;slice&amp;lt;0 || slice&amp;gt;=slices() || row&amp;lt;0 || row&amp;gt;=rows() || column&amp;lt;0 || column&amp;gt;=column()&lt;/tt&gt;.</text>
    <param>slice   the index of the slice-coordinate.</param>
    <param>row   the index of the row-coordinate.</param>
    <param>column   the index of the column-coordinate.</param>
    <return>the value at the specified coordinate.</return>
  </javadoc>
  <method type="double" name="getQuick">
    <comment>if (debug) if (slice&lt;0 || slice&gt;=slices || row&lt;0 || row&gt;=rows || column&lt;0 || column&gt;=columns) throw new IndexOutOfBoundsException("slice:"+slice+", row:"+row+", column:"+column);</comment>
    <comment>return elements[index(slice,row,column)];</comment>
    <comment>manually inlined:</comment>
  </method>
  <javadoc>
    <text>Returns &lt;tt&gt;true&lt;/tt&gt; if both matrices share common cells.
 * More formally, returns &lt;tt&gt;true&lt;/tt&gt; if &lt;tt&gt;other != null&lt;/tt&gt; and at least one of the following conditions is met
 * &lt;ul&gt;
 * &lt;li&gt;the receiver is a view of the other matrix
 * &lt;li&gt;the other matrix is a view of the receiver
 * &lt;li&gt;&lt;tt&gt;this == other&lt;/tt&gt;
 * &lt;/ul&gt;</text>
  </javadoc>
  <method type="boolean" name="haveSharedCellsRaw">
    <scope>
      <declaration type="SelectedDenseDoubleMatrix3D" name="otherMatrix" />
    </scope>
    <scope>
      <declaration type="DenseDoubleMatrix3D" name="otherMatrix" />
    </scope>
  </method>
  <javadoc>
    <text>Returns the position of the given coordinate within the (virtual or non-virtual) internal 1-dimensional array.</text>
    <param>slice   the index of the slice-coordinate.</param>
    <param>row   the index of the row-coordinate.</param>
    <param>column   the index of the third-coordinate.</param>
  </javadoc>
  <method type="int" name="index">
    <comment>return this.offset + super.index(slice,row,column);</comment>
    <comment>manually inlined:</comment>
  </method>
  <javadoc>
    <text>Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified number of slices, rows and columns.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix3D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix3D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix3D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix3D&lt;/tt&gt;, etc.
 * In general, the new matrix should have internal parametrization as similar as possible.</text>
    <param>slices the number of slices the matrix shall have.</param>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <return>a new empty matrix of the same dynamic type.</return>
  </javadoc>
  <method type="DoubleMatrix3D" name="like" />
  <javadoc>
    <text>Construct and returns a new 2-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, sharing the same cells.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix3D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix3D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt;, etc.</text>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <param>rowZero the position of the first element.</param>
    <param>columnZero the position of the first element.</param>
    <param>rowStride the number of elements between two rows, i.e. &lt;tt&gt;index(i+1,j)-index(i,j)&lt;/tt&gt;.</param>
    <param>columnStride the number of elements between two columns, i.e. &lt;tt&gt;index(i,j+1)-index(i,j)&lt;/tt&gt;.</param>
    <return>a new matrix of the corresponding dynamic type.</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="like2D">
    <comment>this method is never called since viewRow() and viewColumn are overridden properly.</comment>
  </method>
  <javadoc>
    <text>Sets the matrix cell at coordinate &lt;tt&gt;[slice,row,column]&lt;/tt&gt; to the specified value.
 * &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;slice&amp;lt;0 || slice&amp;gt;=slices() || row&amp;lt;0 || row&amp;gt;=rows() || column&amp;lt;0 || column&amp;gt;=column()&lt;/tt&gt;.</text>
    <param>slice   the index of the slice-coordinate.</param>
    <param>row   the index of the row-coordinate.</param>
    <param>column   the index of the column-coordinate.</param>
    <param>value the value to be filled into the specified cell.</param>
  </javadoc>
  <method type="void" name="setQuick">
    <comment>if (debug) if (slice&lt;0 || slice&gt;=slices || row&lt;0 || row&gt;=rows || column&lt;0 || column&gt;=columns) throw new IndexOutOfBoundsException("slice:"+slice+", row:"+row+", column:"+column);</comment>
    <comment>elements[index(slice,row,column)] = value;</comment>
    <comment>manually inlined:</comment>
  </method>
  <javadoc>
    <text>Sets up a matrix with a given number of slices and rows.</text>
    <param>slices the number of slices the matrix shall have.</param>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;(double)rows*slices &gt; Integer.MAX_VALUE&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="setUp" />
  <javadoc>
    <text>Self modifying version of viewDice().</text>
    <throws>IllegalArgumentException if some of the parameters are equal or not in range 0..2.</throws>
  </javadoc>
  <method type="AbstractMatrix3D" name="vDice">
    <declaration type="int[][][]" name="offsets" />
    <comment>swap offsets</comment>
  </method>
  <javadoc>
    <text>Constructs and returns a new 2-dimensional &lt;i&gt;slice view&lt;/i&gt; representing the slices and rows of the given column.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
 * &lt;p&gt;
 * To obtain a slice view on subranges, construct a sub-ranging view (&lt;tt&gt;view().part(...)&lt;/tt&gt;), then apply this method to the sub-range view.
 * To obtain 1-dimensional views, apply this method, then apply another slice view (methods &lt;tt&gt;viewColumn&lt;/tt&gt;, &lt;tt&gt;viewRow&lt;/tt&gt;) on the intermediate 2-dimensional view.
 * To obtain 1-dimensional views on subranges, apply both steps.</text>
    <param>column the index of the column to fix.</param>
    <return>a new 2-dimensional slice view.</return>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;column &lt; 0 || column &gt;= columns()&lt;/tt&gt;.</throws>
    <see>#viewSlice(int)</see>
    <see>#viewRow(int)</see>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewColumn">
    <declaration type="int" name="viewRows" />
    <declaration type="int" name="viewColumns" />
    <declaration type="int" name="viewRowZero" />
    <declaration type="int" name="viewColumnZero" />
    <declaration type="int" name="viewOffset" />
    <declaration type="int" name="viewRowStride" />
    <declaration type="int" name="viewColumnStride" />
    <declaration type="int[]" name="viewRowOffsets" />
    <declaration type="int[]" name="viewColumnOffsets" />
  </method>
  <javadoc>
    <text>Constructs and returns a new 2-dimensional &lt;i&gt;slice view&lt;/i&gt; representing the slices and columns of the given row.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
 * &lt;p&gt;
 * To obtain a slice view on subranges, construct a sub-ranging view (&lt;tt&gt;view().part(...)&lt;/tt&gt;), then apply this method to the sub-range view.
 * To obtain 1-dimensional views, apply this method, then apply another slice view (methods &lt;tt&gt;viewColumn&lt;/tt&gt;, &lt;tt&gt;viewRow&lt;/tt&gt;) on the intermediate 2-dimensional view.
 * To obtain 1-dimensional views on subranges, apply both steps.</text>
    <param>row the index of the row to fix.</param>
    <return>a new 2-dimensional slice view.</return>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;row &lt; 0 || row &gt;= row()&lt;/tt&gt;.</throws>
    <see>#viewSlice(int)</see>
    <see>#viewColumn(int)</see>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewRow">
    <declaration type="int" name="viewRows" />
    <declaration type="int" name="viewColumns" />
    <declaration type="int" name="viewRowZero" />
    <declaration type="int" name="viewColumnZero" />
    <declaration type="int" name="viewOffset" />
    <declaration type="int" name="viewRowStride" />
    <declaration type="int" name="viewColumnStride" />
    <declaration type="int[]" name="viewRowOffsets" />
    <declaration type="int[]" name="viewColumnOffsets" />
  </method>
  <javadoc>
    <text>Construct and returns a new selection view.</text>
    <param>sliceOffsets the offsets of the visible elements.</param>
    <param>rowOffsets the offsets of the visible elements.</param>
    <param>columnOffsets the offsets of the visible elements.</param>
    <return>a new view.</return>
  </javadoc>
  <method type="DoubleMatrix3D" name="viewSelectionLike" />
  <javadoc>
    <text>Constructs and returns a new 2-dimensional &lt;i&gt;slice view&lt;/i&gt; representing the rows and columns of the given slice.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
 * &lt;p&gt;
 * To obtain a slice view on subranges, construct a sub-ranging view (&lt;tt&gt;view().part(...)&lt;/tt&gt;), then apply this method to the sub-range view.
 * To obtain 1-dimensional views, apply this method, then apply another slice view (methods &lt;tt&gt;viewColumn&lt;/tt&gt;, &lt;tt&gt;viewRow&lt;/tt&gt;) on the intermediate 2-dimensional view.
 * To obtain 1-dimensional views on subranges, apply both steps.</text>
    <param>slice the index of the slice to fix.</param>
    <return>a new 2-dimensional slice view.</return>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;slice &lt; 0 || slice &gt;= slices()&lt;/tt&gt;.</throws>
    <see>#viewRow(int)</see>
    <see>#viewColumn(int)</see>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewSlice">
    <declaration type="int" name="viewRows" />
    <declaration type="int" name="viewColumns" />
    <declaration type="int" name="viewRowZero" />
    <declaration type="int" name="viewColumnZero" />
    <declaration type="int" name="viewOffset" />
    <declaration type="int" name="viewRowStride" />
    <declaration type="int" name="viewColumnStride" />
    <declaration type="int[]" name="viewRowOffsets" />
    <declaration type="int[]" name="viewColumnOffsets" />
  </method>
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
