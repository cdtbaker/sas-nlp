<?xml version="1.0" encoding="UTF-8"?>
<class name="DenseObjectMatrix1D">
  <javadoc>
    <text>Dense 1-d matrix (aka &lt;i&gt;vector&lt;/i&gt;) holding &lt;tt&gt;Object&lt;/tt&gt; elements.
 * First see the &lt;a href="package-summary.html"&gt;package summary&lt;/a&gt; and javadoc &lt;a href="package-tree.html"&gt;tree view&lt;/a&gt; to get the broad picture.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt;
 * &lt;p&gt;
 * Internally holds one single contigous one-dimensional array. 
 * Note that this implementation is not synchronized.
 * &lt;p&gt;
 * &lt;b&gt;Memory requirements:&lt;/b&gt;
 * &lt;p&gt;
 * &lt;tt&gt;memory [bytes] = 8*size()&lt;/tt&gt;.
 * Thus, a 1000000 matrix uses 8 MB.
 * &lt;p&gt;
 * &lt;b&gt;Time complexity:&lt;/b&gt;
 * &lt;p&gt;
 * &lt;tt&gt;O(1)&lt;/tt&gt; (i.e. constant time) for the basic operations
 * &lt;tt&gt;get&lt;/tt&gt;, &lt;tt&gt;getQuick&lt;/tt&gt;, &lt;tt&gt;set&lt;/tt&gt;, &lt;tt&gt;setQuick&lt;/tt&gt; and &lt;tt&gt;size&lt;/tt&gt;,
 * &lt;p&gt;</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <javadoc>
    <text>The elements of this matrix.</text>
  </javadoc>
  <declaration type="Object[]" name="elements" />
  <javadoc>
    <text>Constructs a matrix with a copy of the given values.
 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.</text>
    <param>values The values to be filled into the new matrix.</param>
  </javadoc>
  <method type="constructor" name="DenseObjectMatrix1D" />
  <javadoc>
    <text>Constructs a matrix with a given number of cells.
 * All entries are initially &lt;tt&gt;0&lt;/tt&gt;.</text>
    <param>size the number of cells the matrix shall have.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;size&lt;0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="constructor" name="DenseObjectMatrix1D" />
  <javadoc>
    <text>Constructs a matrix view with the given parameters.</text>
    <param>size the number of cells the matrix shall have.</param>
    <param>elements the cells.</param>
    <param>zero the index of the first element.</param>
    <param>stride the number of indexes between any two elements, i.e. &lt;tt&gt;index(i+1)-index(i)&lt;/tt&gt;.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;size&lt;0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="constructor" name="DenseObjectMatrix1D" />
  <javadoc>
    <text>Sets all cells to the state specified by &lt;tt&gt;values&lt;/tt&gt;.
 * &lt;tt&gt;values&lt;/tt&gt; is required to have the same number of cells as the receiver.
 * &lt;p&gt;
 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.</text>
    <param>values the values to be filled into the cells.</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
    <throws>IllegalArgumentException if &lt;tt&gt;values.length != size()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="ObjectMatrix1D" name="assign">
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Assigns the result of a function to each cell; &lt;tt&gt;x[i] = function(x[i])&lt;/tt&gt;.
 * (Iterates downwards from &lt;tt&gt;[size()-1]&lt;/tt&gt; to &lt;tt&gt;[0]&lt;/tt&gt;).
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;pre&gt;
 * // change each cell to its sine
 * matrix =   0.5      1.5      2.5       3.5 
 * matrix.assign(cern.jet.math.Functions.sin);
 * --&gt;
 * matrix ==  0.479426 0.997495 0.598472 -0.350783
 * &lt;/pre&gt;
 * For further examples, see the &lt;a href="package-summary.html#FunctionObjects"&gt;package doc&lt;/a&gt;.</text>
    <param>function a function object taking as argument the current cell's value.</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
    <see>cern.jet.math.Functions</see>
  </javadoc>
  <method type="ObjectMatrix1D" name="assign">
    <declaration type="int" name="s" />
    <declaration type="int" name="i" />
    <declaration type="Object[]" name="elems" />
    <scope />
    <comment>the general case x[i] = f(x[i])</comment>
  </method>
  <javadoc>
    <text>Replaces all cell values of the receiver with the values of another matrix.
 * Both matrices must have the same size.
 * If both matrices share the same cells (as is the case if they are views derived from the same matrix) and intersect in an ambiguous way, then replaces &lt;i&gt;as if&lt;/i&gt; using an intermediate auxiliary deep copy of &lt;tt&gt;other&lt;/tt&gt;.</text>
    <param>source   the source matrix to copy from (may be identical to the receiver).</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
    <throws>IllegalArgumentException if &lt;tt&gt;size() != other.size()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="ObjectMatrix1D" name="assign">
    <scope />
    <declaration type="DenseObjectMatrix1D" name="other" />
    <scope />
    <scope>
      <declaration type="ObjectMatrix1D" name="c" />
      <scope />
    </scope>
    <declaration type="Object[]" name="elems" />
    <declaration type="Object[]" name="otherElems" />
    <declaration type="int" name="s" />
    <declaration type="int" name="ys" />
    <declaration type="int" name="index" />
    <declaration type="int" name="otherIndex" />
    <scope />
    <comment>overriden for performance only</comment>
    <comment>quickest</comment>
    <comment>should not happen</comment>
  </method>
  <javadoc>
    <text>Assigns the result of a function to each cell; &lt;tt&gt;x[i] = function(x[i],y[i])&lt;/tt&gt;.
 * (Iterates downwards from &lt;tt&gt;[size()-1]&lt;/tt&gt; to &lt;tt&gt;[0]&lt;/tt&gt;).
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;pre&gt;
 * // assign x[i] = x[i]&lt;sup&gt;y[i]&lt;/sup&gt;
 * m1 = 0 1 2 3;
 * m2 = 0 2 4 6;
 * m1.assign(m2, cern.jet.math.Functions.pow);
 * --&gt;
 * m1 == 1 1 16 729
 * // for non-standard functions there is no shortcut: 
 * m1.assign(m2,
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;new ObjectObjectFunction() {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public Object apply(Object x, Object y) { return Math.pow(x,y); }
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;}
 * );
 * &lt;/pre&gt;
 * For further examples, see the &lt;a href="package-summary.html#FunctionObjects"&gt;package doc&lt;/a&gt;.</text>
    <param>y the secondary matrix to operate on.</param>
    <param>function a function object taking as first argument the current cell's value of &lt;tt&gt;this&lt;/tt&gt;,
 * and as second argument the current cell's value of &lt;tt&gt;y&lt;/tt&gt;,</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
    <throws>IllegalArgumentException if &lt;tt&gt;size() != y.size()&lt;/tt&gt;.</throws>
    <see>cern.jet.math.Functions</see>
  </javadoc>
  <method type="ObjectMatrix1D" name="assign">
    <scope />
    <declaration type="DenseObjectMatrix1D" name="other" />
    <declaration type="Object[]" name="elems" />
    <declaration type="Object[]" name="otherElems" />
    <declaration type="int" name="s" />
    <declaration type="int" name="ys" />
    <declaration type="int" name="index" />
    <declaration type="int" name="otherIndex" />
    <scope />
    <comment>overriden for performance only</comment>
    <comment>the general case x[i] = f(x[i],y[i])</comment>
  </method>
  <javadoc>
    <text>Returns the matrix cell value at coordinate &lt;tt&gt;index&lt;/tt&gt;.
 * &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;index&amp;lt;0 || index&amp;gt;=size()&lt;/tt&gt;.</text>
    <param>index   the index of the cell.</param>
    <return>the value of the specified cell.</return>
  </javadoc>
  <method type="Object" name="getQuick">
    <comment>if (debug) if (index&lt;0 || index&gt;=size) checkIndex(index);</comment>
    <comment>return elements[index(index)];</comment>
    <comment>manually inlined:</comment>
  </method>
  <javadoc>
    <text>Returns &lt;tt&gt;true&lt;/tt&gt; if both matrices share at least one identical cell.</text>
  </javadoc>
  <method type="boolean" name="haveSharedCellsRaw">
    <scope>
      <declaration type="SelectedDenseObjectMatrix1D" name="otherMatrix" />
    </scope>
    <scope>
      <declaration type="DenseObjectMatrix1D" name="otherMatrix" />
    </scope>
  </method>
  <javadoc>
    <text>Returns the position of the element with the given relative rank within the (virtual or non-virtual) internal 1-dimensional array.
 * You may want to override this method for performance.</text>
    <param>rank   the rank of the element.</param>
  </javadoc>
  <method type="int" name="index">
    <comment>overriden for manual inlining only</comment>
    <comment>return _offset(_rank(rank));</comment>
  </method>
  <javadoc>
    <text>Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified size.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseObjectMatrix1D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseObjectMatrix1D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseObjectMatrix1D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseObjectMatrix1D&lt;/tt&gt;, etc.
 * In general, the new matrix should have internal parametrization as similar as possible.</text>
    <param>size the number of cell the matrix shall have.</param>
    <return>a new empty matrix of the same dynamic type.</return>
  </javadoc>
  <method type="ObjectMatrix1D" name="like" />
  <javadoc>
    <text>Construct and returns a new 2-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, entirelly independent of the receiver.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseObjectMatrix1D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseObjectMatrix2D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseObjectMatrix1D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseObjectMatrix2D&lt;/tt&gt;, etc.</text>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <return>a new matrix of the corresponding dynamic type.</return>
  </javadoc>
  <method type="ObjectMatrix2D" name="like2D" />
  <javadoc>
    <text>Sets the matrix cell at coordinate &lt;tt&gt;index&lt;/tt&gt; to the specified value.
 * &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;index&amp;lt;0 || index&amp;gt;=size()&lt;/tt&gt;.</text>
    <param>index   the index of the cell.</param>
    <param>value the value to be filled into the specified cell.</param>
  </javadoc>
  <method type="void" name="setQuick">
    <comment>if (debug) if (index&lt;0 || index&gt;=size) checkIndex(index);</comment>
    <comment>elements[index(index)] = value;</comment>
    <comment>manually inlined:</comment>
  </method>
  <javadoc>
    <text>Swaps each element &lt;tt&gt;this[i]&lt;/tt&gt; with &lt;tt&gt;other[i]&lt;/tt&gt;.</text>
    <throws>IllegalArgumentException if &lt;tt&gt;size() != other.size()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="swap">
    <scope />
    <declaration type="DenseObjectMatrix1D" name="y" />
    <declaration type="Object[]" name="elems" />
    <declaration type="Object[]" name="otherElems" />
    <declaration type="int" name="s" />
    <declaration type="int" name="ys" />
    <declaration type="int" name="index" />
    <declaration type="int" name="otherIndex" />
    <scope>
      <declaration type="Object" name="tmp" />
    </scope>
    <comment>overriden for performance only</comment>
  </method>
  <javadoc>
    <text>Fills the cell values into the specified 1-dimensional array.
 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.
 * After this call returns the array &lt;tt&gt;values&lt;/tt&gt; has the form 
 * &lt;br&gt;
 * &lt;tt&gt;for (int i=0; i &lt; size(); i++) values[i] = get(i);&lt;/tt&gt;</text>
    <throws>IllegalArgumentException if &lt;tt&gt;values.length &lt; size()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="toArray" />
  <javadoc>
    <text>Construct and returns a new selection view.</text>
    <param>offsets the offsets of the visible elements.</param>
    <return>a new view.</return>
  </javadoc>
  <method type="ObjectMatrix1D" name="viewSelectionLike" />
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
