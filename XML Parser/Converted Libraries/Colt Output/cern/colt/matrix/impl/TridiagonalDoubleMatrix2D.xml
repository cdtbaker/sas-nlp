<?xml version="1.0" encoding="UTF-8"?>
<class name="TridiagonalDoubleMatrix2D">
  <javadoc>
    <text>Tridiagonal 2-d matrix holding &lt;tt&gt;double&lt;/tt&gt; elements.
 * First see the &lt;a href="package-summary.html"&gt;package summary&lt;/a&gt; and javadoc &lt;a href="package-tree.html"&gt;tree view&lt;/a&gt; to get the broad picture.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt;
 * TODO.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>0.9, 04/14/2000</version>
  </javadoc>
  <declaration type="double[]" name="values" />
  <declaration type="int[]" name="dims" />
  <declaration type="int" name="NONZERO" />
  <javadoc>
    <text>Constructs a matrix with a copy of the given values.
 * &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[row][column]&lt;/tt&gt;
 * and have exactly the same number of columns in every row.
 * &lt;p&gt;
 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.</text>
    <param>values The values to be filled into the new matrix.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;for any 1 &amp;lt;= row &amp;lt; values.length: values[row].length != values[row-1].length&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="constructor" name="TridiagonalDoubleMatrix2D" />
  <javadoc>
    <text>Constructs a matrix with a given number of rows and columns.
 * All entries are initially &lt;tt&gt;0&lt;/tt&gt;.</text>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;rows&lt;0 || columns&lt;0 || (double)columns*rows &gt; Integer.MAX_VALUE&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="constructor" name="TridiagonalDoubleMatrix2D">
    <declaration type="int" name="d" />
    <declaration type="int" name="u" />
    <declaration type="int" name="l" />
    <declaration type="int[]" name="dimensions" />
    <comment>{lower, diagonal, upper}</comment>
    <comment>{lowerStart, diagonalStart, upperStart, values.length, lowerNonZeros, diagonalNonZeros, upperNonZeros}</comment>
    <comment>diagonal = new double[d];</comment>
    <comment>lower = new double[l];</comment>
    <comment>upper = new double[u];</comment>
    <comment>diagonalNonZeros = 0;</comment>
    <comment>lowerNonZeros = 0;</comment>
    <comment>upperNonZeros = 0;</comment>
  </method>
  <javadoc>
    <text>Sets all cells to the state specified by &lt;tt&gt;value&lt;/tt&gt;.</text>
    <param>value the value to be filled into the cells.</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="assign">
    <scope />
    <comment>overriden for performance only</comment>
    <comment>for (int i=diagonal.length; --i &gt;= 0; ) diagonal[i]=0;</comment>
    <comment>for (int i=upper.length; --i &gt;= 0; ) upper[i]=0;</comment>
    <comment>for (int i=lower.length; --i &gt;= 0; ) lower[i]=0;</comment>
    <comment>diagonalNonZeros = 0;</comment>
    <comment>lowerNonZeros = 0;</comment>
    <comment>upperNonZeros = 0;</comment>
  </method>
  <method type="DoubleMatrix2D" name="assign">
    <scope>
      <declaration type="double" name="alpha" />
      <method type="double" name="apply" />
    </scope>
    <scope />
    <comment>x[i] = mult*x[i]</comment>
    <comment>the funny definition of isNaN(). This should better not happen.</comment>
    <comment>double[] vals = values.elements();
for (int j=values.size(); --j &gt;= 0; ) {
vals[j] = alpha;
}</comment>
  </method>
  <javadoc>
    <text>Replaces all cell values of the receiver with the values of another matrix.
 * Both matrices must have the same number of rows and columns.
 * If both matrices share the same cells (as is the case if they are views derived from the same matrix) and intersect in an ambiguous way, then replaces &lt;i&gt;as if&lt;/i&gt; using an intermediate auxiliary deep copy of &lt;tt&gt;other&lt;/tt&gt;.</text>
    <param>source   the source matrix to copy from (may be identical to the receiver).</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
    <throws>IllegalArgumentException if &lt;tt&gt;columns() != source.columns() || rows() != source.rows()&lt;/tt&gt;</throws>
  </javadoc>
  <method type="DoubleMatrix2D" name="assign">
    <scope>
      <declaration type="TridiagonalDoubleMatrix2D" name="other" />
    </scope>
    <scope>
      <method type="double" name="apply" />
    </scope>
    <comment>overriden for performance only</comment>
    <comment>nothing to do</comment>
    <comment>quickest</comment>
  </method>
  <method type="DoubleMatrix2D" name="assign">
    <scope>
      <declaration type="double" name="alpha" />
      <method type="double" name="apply" />
    </scope>
    <scope>
      <method type="double" name="apply" />
    </scope>
    <scope>
      <method type="double" name="apply" />
    </scope>
    <comment>x[i] = x[i] + alpha*y[i]</comment>
    <comment>nothing to do</comment>
    <comment>x[i] = x[i] * y[i]</comment>
    <comment>x[i] = x[i] / y[i]</comment>
  </method>
  <method type="DoubleMatrix2D" name="forEachNonZero">
    <scope>
      <declaration type="int" name="i" />
      <scope />
      <scope />
      <declaration type="int" name="low" />
      <declaration type="int" name="high" />
      <scope>
        <declaration type="double" name="value" />
        <scope>
          <declaration type="double" name="r" />
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>lower</comment>
    <comment>case 1: {   }  diagonal</comment>
    <comment>upper</comment>
    <comment>one non zero more</comment>
  </method>
  <javadoc>
    <text>Returns the content of this matrix if it is a wrapper; or &lt;tt&gt;this&lt;/tt&gt; otherwise.
 * Override this method in wrappers.</text>
  </javadoc>
  <method type="DoubleMatrix2D" name="getContent" />
  <javadoc>
    <text>Returns the matrix cell value at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt;.
 * &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.</text>
    <param>row   the index of the row-coordinate.</param>
    <param>column   the index of the column-coordinate.</param>
    <return>the value at the specified coordinate.</return>
  </javadoc>
  <method type="double" name="getQuick">
    <declaration type="int" name="i" />
    <declaration type="int" name="j" />
    <declaration type="int" name="k" />
    <declaration type="int" name="q" />
    <scope />
    <comment>lower diagonal</comment>
    <comment>int k = -1;</comment>
    <comment>int q = 0;</comment>
    <comment>if (i==j) { k=0; q=i; }</comment>
    <comment>if (i==j+1) { k=1; q=j; }</comment>
    <comment>if (i==j-1) { k=2; q=i; }</comment>
    <comment>if (k&lt;0) return 0;</comment>
    <comment>return values[dims[k]+q];</comment>
    <comment>if (i==j) return diagonal[i];</comment>
    <comment>if (i==j+1) return lower[j];</comment>
    <comment>if (i==j-1) return upper[i];</comment>
    <comment>return 0;</comment>
  </method>
  <javadoc>
    <text>Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified number of rows and columns.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt;, etc.
 * In general, the new matrix should have internal parametrization as similar as possible.</text>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <return>a new empty matrix of the same dynamic type.</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="like" />
  <javadoc>
    <text>Construct and returns a new 1-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, entirelly independent of the receiver.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt;, etc.</text>
    <param>size the number of cells the matrix shall have.</param>
    <return>a new matrix of the corresponding dynamic type.</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="like1D" />
  <javadoc>
    <text>Sets the matrix cell at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt; to the specified value.
 * &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.</text>
    <param>row   the index of the row-coordinate.</param>
    <param>column   the index of the column-coordinate.</param>
    <param>value the value to be filled into the specified cell.</param>
  </javadoc>
  <method type="void" name="setQuick">
    <declaration type="int" name="i" />
    <declaration type="int" name="j" />
    <declaration type="boolean" name="isZero" />
    <declaration type="int" name="k" />
    <declaration type="int" name="q" />
    <scope>
      <declaration type="int" name="index" />
      <scope />
      <scope />
    </scope>
    <comment>lower diagonal</comment>
    <comment>one nonZero less</comment>
    <comment>one nonZero more</comment>
    <comment>int k = -1;</comment>
    <comment>int q = 0;</comment>
    <comment>if (i==j) { k=0; q=i; }  diagonal</comment>
    <comment>if (i==j+1) { k=1; q=j; }  lower diagonal</comment>
    <comment>if (i==j-1) { k=2; q=i; }  upper diagonal</comment>
    <comment>if (k&gt;0) {</comment>
    <comment>int index = dims[k]+q;</comment>
    <comment>if (values[index]!=0) {</comment>
    <comment>if (isZero) dims[k+NONZERO]--;  one nonZero less</comment>
    <comment>}</comment>
    <comment>else {</comment>
    <comment>if (!isZero) dims[k+NONZERO]++;  one nonZero more</comment>
    <comment>}</comment>
    <comment>values[index] = value;</comment>
    <comment>return;</comment>
    <comment>}</comment>
    <comment>if (!isZero) throw new IllegalArgumentException("Can't store non-zero value to non-tridiagonal coordinate: row="+row+", column="+column+", value="+value);</comment>
    <comment>if (i==j) {</comment>
    <comment>if (diagonal[i]!=0) {</comment>
    <comment>if (isZero) diagonalNonZeros--;</comment>
    <comment>}</comment>
    <comment>else {</comment>
    <comment>if (!isZero) diagonalNonZeros++;</comment>
    <comment>}</comment>
    <comment>diagonal[i] = value;</comment>
    <comment>return;</comment>
    <comment>}</comment>
    <comment>if (i==j+1) {</comment>
    <comment>if (lower[j]!=0) {</comment>
    <comment>if (isZero) lowerNonZeros--;</comment>
    <comment>}</comment>
    <comment>else {</comment>
    <comment>if (!isZero) lowerNonZeros++;</comment>
    <comment>}</comment>
    <comment>lower[j] = value;</comment>
    <comment>return;</comment>
    <comment>}</comment>
    <comment>if (i==j-1) {</comment>
    <comment>if (upper[i]!=0) {</comment>
    <comment>if (isZero) upperNonZeros--;</comment>
    <comment>}</comment>
    <comment>else {</comment>
    <comment>if (!isZero) upperNonZeros++;</comment>
    <comment>}</comment>
    <comment>upper[i] = value;</comment>
    <comment>return;</comment>
    <comment>}</comment>
    <comment>if (!isZero) throw new IllegalArgumentException("Can't store non-zero value to non-tridiagonal coordinate: row="+row+", column="+column+", value="+value);</comment>
  </method>
  <method type="DoubleMatrix1D" name="zMult">
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <scope />
    <declaration type="boolean" name="ignore" />
    <scope />
    <declaration type="DenseDoubleMatrix1D" name="zz" />
    <declaration type="double[]" name="zElements" />
    <declaration type="int" name="zStride" />
    <declaration type="int" name="zi" />
    <declaration type="DenseDoubleMatrix1D" name="yy" />
    <declaration type="double[]" name="yElements" />
    <declaration type="int" name="yStride" />
    <declaration type="int" name="yi" />
    <method type="double" name="apply">
      <scope>
        <declaration type="int" name="tmp" />
      </scope>
    </method>
    <comment>z.setQuick(row,z.getQuick(row) + value * y.getQuick(column));</comment>
    <comment>System.out.println("["+i+","+j+"]--&gt;"+value);</comment>
  </method>
  <method type="DoubleMatrix2D" name="zMult">
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <scope />
    <declaration type="int" name="p" />
    <declaration type="boolean" name="ignore" />
    <declaration type="DoubleMatrix1D[]" name="Brows" />
    <declaration type="DoubleMatrix1D[]" name="Crows" />
    <declaration type="cern.jet.math.PlusMult" name="fun" />
    <method type="double" name="apply" />
    <comment>cache views</comment>
  </method>
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>The non zero elements of the matrix: {lower, diagonal, upper}.</comment>
  <comment>The startIndexes and number of non zeros: {lowerStart, diagonalStart, upperStart, values.length, lowerNonZeros, diagonalNonZeros, upperNonZeros}.
 lowerStart = 0
 diagonalStart = lowerStart + lower.length
 upperStart = diagonalStart + diagonal.length</comment>
  <comment>protected double diagonal[];</comment>
  <comment>protected double lower[];</comment>
  <comment>protected double upper[];</comment>
  <comment>protected int diagonalNonZeros;</comment>
  <comment>protected int lowerNonZeros;</comment>
  <comment>protected int upperNonZeros;</comment>
  <comment>protected int N;</comment>
</class>
