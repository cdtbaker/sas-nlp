<?xml version="1.0" encoding="UTF-8"?>
<class name="WrapperDoubleMatrix2D">
  <javadoc>
    <text>2-d matrix holding &lt;tt&gt;double&lt;/tt&gt; elements; either a view wrapping another matrix or a matrix whose views are wrappers.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 04/14/2000</version>
  </javadoc>
  <declaration type="DoubleMatrix2D" name="content" />
  <javadoc>
    <text>Constructs a matrix with a copy of the given values.
 * &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[row][column]&lt;/tt&gt;
 * and have exactly the same number of columns in every row.
 * &lt;p&gt;
 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.</text>
    <param>values The values to be filled into the new matrix.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;for any 1 &amp;lt;= row &amp;lt; values.length: values[row].length != values[row-1].length&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="constructor" name="WrapperDoubleMatrix2D" />
  <javadoc>
    <text>Returns the content of this matrix if it is a wrapper; or &lt;tt&gt;this&lt;/tt&gt; otherwise.
 * Override this method in wrappers.</text>
  </javadoc>
  <method type="DoubleMatrix2D" name="getContent" />
  <javadoc>
    <text>Returns the matrix cell value at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt;.
 * &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.</text>
    <param>row   the index of the row-coordinate.</param>
    <param>column   the index of the column-coordinate.</param>
    <return>the value at the specified coordinate.</return>
  </javadoc>
  <method type="double" name="getQuick" />
  <javadoc>
    <text>Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified number of rows and columns.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt;, etc.
 * In general, the new matrix should have internal parametrization as similar as possible.</text>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <return>a new empty matrix of the same dynamic type.</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="like" />
  <javadoc>
    <text>Construct and returns a new 1-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, entirelly independent of the receiver.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt;, etc.</text>
    <param>size the number of cells the matrix shall have.</param>
    <return>a new matrix of the corresponding dynamic type.</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="like1D" />
  <javadoc>
    <text>Construct and returns a new 1-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, sharing the same cells.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt;, etc.</text>
    <param>size the number of cells the matrix shall have.</param>
    <param>offset the index of the first element.</param>
    <param>stride the number of indexes between any two elements, i.e. &lt;tt&gt;index(i+1)-index(i)&lt;/tt&gt;.</param>
    <return>a new matrix of the corresponding dynamic type.</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="like1D">
    <comment>should never get called</comment>
  </method>
  <javadoc>
    <text>Sets the matrix cell at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt; to the specified value.
 * &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.</text>
    <param>row   the index of the row-coordinate.</param>
    <param>column   the index of the column-coordinate.</param>
    <param>value the value to be filled into the specified cell.</param>
  </javadoc>
  <method type="void" name="setQuick" />
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;slice view&lt;/i&gt; representing the rows of the given column.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
 * To obtain a slice view on subranges, construct a sub-ranging view (&lt;tt&gt;viewPart(...)&lt;/tt&gt;), then apply this method to the sub-range view.
 * &lt;p&gt; 
 * &lt;b&gt;Example:&lt;/b&gt; 
 * &lt;table border="0"&gt;
 * &lt;tr nowrap&gt; 
 * &lt;td valign="top"&gt;2 x 3 matrix: &lt;br&gt;
 * 1, 2, 3&lt;br&gt;
 * 4, 5, 6 &lt;/td&gt;
 * &lt;td&gt;viewColumn(0) ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;Matrix1D of size 2:&lt;br&gt;
 * 1, 4&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;</text>
    <param>column the column to fix.</param>
    <return>a new slice view.</return>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;column &lt; 0 || column &gt;= columns()&lt;/tt&gt;.</throws>
    <see>#viewRow(int)</see>
  </javadoc>
  <method type="DoubleMatrix1D" name="viewColumn" />
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;flip view&lt;/i&gt; along the column axis.
 * What used to be column &lt;tt&gt;0&lt;/tt&gt; is now column &lt;tt&gt;columns()-1&lt;/tt&gt;, ..., what used to be column &lt;tt&gt;columns()-1&lt;/tt&gt; is now column &lt;tt&gt;0&lt;/tt&gt;.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
 * &lt;p&gt; 
 * &lt;b&gt;Example:&lt;/b&gt; 
 * &lt;table border="0"&gt;
 * &lt;tr nowrap&gt; 
 * &lt;td valign="top"&gt;2 x 3 matrix: &lt;br&gt;
 * 1, 2, 3&lt;br&gt;
 * 4, 5, 6 &lt;/td&gt;
 * &lt;td&gt;columnFlip ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;2 x 3 matrix:&lt;br&gt;
 * 3, 2, 1 &lt;br&gt;
 * 6, 5, 4&lt;/td&gt;
 * &lt;td&gt;columnFlip ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;2 x 3 matrix: &lt;br&gt;
 * 1, 2, 3&lt;br&gt;
 * 4, 5, 6 &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;</text>
    <return>a new flip view.</return>
    <see>#viewRowFlip()</see>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewColumnFlip">
    <declaration type="DoubleMatrix2D" name="view" />
    <method type="double" name="getQuick" />
    <method type="void" name="setQuick" />
  </method>
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;dice (transposition) view&lt;/i&gt;; Swaps axes; example: 3 x 4 matrix --&gt; 4 x 3 matrix.
 * The view has both dimensions exchanged; what used to be columns become rows, what used to be rows become columns.
 * In other words: &lt;tt&gt;view.get(row,column)==this.get(column,row)&lt;/tt&gt;.
 * This is a zero-copy transposition, taking O(1), i.e. constant time.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa. 
 * Use idioms like &lt;tt&gt;result = viewDice(A).copy()&lt;/tt&gt; to generate an independent transposed matrix.
 * &lt;p&gt; 
 * &lt;b&gt;Example:&lt;/b&gt; 
 * &lt;table border="0"&gt;
 * &lt;tr nowrap&gt; 
 * &lt;td valign="top"&gt;2 x 3 matrix: &lt;br&gt;
 * 1, 2, 3&lt;br&gt;
 * 4, 5, 6 &lt;/td&gt;
 * &lt;td&gt;transpose ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;3 x 2 matrix:&lt;br&gt;
 * 1, 4 &lt;br&gt;
 * 2, 5 &lt;br&gt;
 * 3, 6&lt;/td&gt;
 * &lt;td&gt;transpose ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;2 x 3 matrix: &lt;br&gt;
 * 1, 2, 3&lt;br&gt;
 * 4, 5, 6 &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;</text>
    <return>a new dice view.</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewDice">
    <declaration type="DoubleMatrix2D" name="view" />
    <method type="double" name="getQuick" />
    <method type="void" name="setQuick" />
  </method>
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;sub-range view&lt;/i&gt; that is a &lt;tt&gt;height x width&lt;/tt&gt; sub matrix starting at &lt;tt&gt;[row,column]&lt;/tt&gt;.
 * Operations on the returned view can only be applied to the restricted range.
 * Any attempt to access coordinates not contained in the view will throw an &lt;tt&gt;IndexOutOfBoundsException&lt;/tt&gt;.
 * &lt;p&gt;
 * &lt;b&gt;Note that the view is really just a range restriction:&lt;/b&gt; 
 * The returned matrix is backed by this matrix, so changes in the returned matrix are reflected in this matrix, and vice-versa. 
 * &lt;p&gt;
 * The view contains the cells from &lt;tt&gt;[row,column]&lt;/tt&gt; to &lt;tt&gt;[row+height-1,column+width-1]&lt;/tt&gt;, all inclusive.
 * and has &lt;tt&gt;view.rows() == height; view.columns() == width;&lt;/tt&gt;.
 * A view's legal coordinates are again zero based, as usual.
 * In other words, legal coordinates of the view range from &lt;tt&gt;[0,0]&lt;/tt&gt; to &lt;tt&gt;[view.rows()-1==height-1,view.columns()-1==width-1]&lt;/tt&gt;.
 * As usual, any attempt to access a cell at a coordinate &lt;tt&gt;column&amp;lt;0 || column&amp;gt;=view.columns() || row&amp;lt;0 || row&amp;gt;=view.rows()&lt;/tt&gt; will throw an &lt;tt&gt;IndexOutOfBoundsException&lt;/tt&gt;.</text>
    <param>row   The index of the row-coordinate.</param>
    <param>column   The index of the column-coordinate.</param>
    <param>height   The height of the box.</param>
    <param>width   The width of the box.</param>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;column&lt;0 || width&lt;0 || column+width&gt;columns() || row&lt;0 || height&lt;0 || row+height&gt;rows()&lt;/tt&gt;</throws>
    <return>the new view.</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewPart">
    <declaration type="DoubleMatrix2D" name="view" />
    <method type="double" name="getQuick" />
    <method type="void" name="setQuick" />
  </method>
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;slice view&lt;/i&gt; representing the columns of the given row.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
 * To obtain a slice view on subranges, construct a sub-ranging view (&lt;tt&gt;viewPart(...)&lt;/tt&gt;), then apply this method to the sub-range view.
 * &lt;p&gt; 
 * &lt;b&gt;Example:&lt;/b&gt; 
 * &lt;table border="0"&gt;
 * &lt;tr nowrap&gt; 
 * &lt;td valign="top"&gt;2 x 3 matrix: &lt;br&gt;
 * 1, 2, 3&lt;br&gt;
 * 4, 5, 6 &lt;/td&gt;
 * &lt;td&gt;viewRow(0) ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;Matrix1D of size 3:&lt;br&gt;
 * 1, 2, 3&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;</text>
    <param>row the row to fix.</param>
    <return>a new slice view.</return>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;row &lt; 0 || row &gt;= rows()&lt;/tt&gt;.</throws>
    <see>#viewColumn(int)</see>
  </javadoc>
  <method type="DoubleMatrix1D" name="viewRow" />
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;flip view&lt;/i&gt; along the row axis.
 * What used to be row &lt;tt&gt;0&lt;/tt&gt; is now row &lt;tt&gt;rows()-1&lt;/tt&gt;, ..., what used to be row &lt;tt&gt;rows()-1&lt;/tt&gt; is now row &lt;tt&gt;0&lt;/tt&gt;.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
 * &lt;p&gt; 
 * &lt;b&gt;Example:&lt;/b&gt; 
 * &lt;table border="0"&gt;
 * &lt;tr nowrap&gt; 
 * &lt;td valign="top"&gt;2 x 3 matrix: &lt;br&gt;
 * 1, 2, 3&lt;br&gt;
 * 4, 5, 6 &lt;/td&gt;
 * &lt;td&gt;rowFlip ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;2 x 3 matrix:&lt;br&gt;
 * 4, 5, 6 &lt;br&gt;
 * 1, 2, 3&lt;/td&gt;
 * &lt;td&gt;rowFlip ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;2 x 3 matrix: &lt;br&gt;
 * 1, 2, 3&lt;br&gt;
 * 4, 5, 6 &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;</text>
    <return>a new flip view.</return>
    <see>#viewColumnFlip()</see>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewRowFlip">
    <declaration type="DoubleMatrix2D" name="view" />
    <method type="double" name="getQuick" />
    <method type="void" name="setQuick" />
  </method>
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;selection view&lt;/i&gt; that is a matrix holding the indicated cells.
 * There holds &lt;tt&gt;view.rows() == rowIndexes.length, view.columns() == columnIndexes.length&lt;/tt&gt; and &lt;tt&gt;view.get(i,j) == this.get(rowIndexes[i],columnIndexes[j])&lt;/tt&gt;.
 * Indexes can occur multiple times and can be in arbitrary order.
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;pre&gt;
 * this = 2 x 3 matrix:
 * 1, 2, 3
 * 4, 5, 6
 * rowIndexes     = (0,1)
 * columnIndexes  = (1,0,1,0)
 * --&gt;
 * view = 2 x 4 matrix:
 * 2, 1, 2, 1
 * 5, 4, 5, 4
 * &lt;/pre&gt;
 * Note that modifying the index arguments after this call has returned has no effect on the view.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa. 
 * &lt;p&gt;
 * To indicate "all" rows or "all columns", simply set the respective parameter</text>
    <param>rowIndexes   The rows of the cells that shall be visible in the new view. To indicate that &lt;i&gt;all&lt;/i&gt; rows shall be visible, simply set this parameter to &lt;tt&gt;null&lt;/tt&gt;.</param>
    <param>columnIndexes   The columns of the cells that shall be visible in the new view. To indicate that &lt;i&gt;all&lt;/i&gt; columns shall be visible, simply set this parameter to &lt;tt&gt;null&lt;/tt&gt;.</param>
    <return>the new view.</return>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;!(0 &lt;= rowIndexes[i] &lt; rows())&lt;/tt&gt; for any &lt;tt&gt;i=0..rowIndexes.length()-1&lt;/tt&gt;.</throws>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;!(0 &lt;= columnIndexes[i] &lt; columns())&lt;/tt&gt; for any &lt;tt&gt;i=0..columnIndexes.length()-1&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewSelection">
    <scope />
    <scope />
    <declaration type="int[]" name="rix" />
    <declaration type="int[]" name="cix" />
    <declaration type="DoubleMatrix2D" name="view" />
    <method type="double" name="getQuick" />
    <method type="void" name="setQuick" />
    <comment>check for "all"</comment>
  </method>
  <javadoc>
    <text>Construct and returns a new selection view.</text>
    <param>rowOffsets the offsets of the visible elements.</param>
    <param>columnOffsets the offsets of the visible elements.</param>
    <return>a new view.</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewSelectionLike">
    <comment>should never be called</comment>
  </method>
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;stride view&lt;/i&gt; which is a sub matrix consisting of every i-th cell.
 * More specifically, the view has &lt;tt&gt;this.rows()/rowStride&lt;/tt&gt; rows and &lt;tt&gt;this.columns()/columnStride&lt;/tt&gt; columns holding cells &lt;tt&gt;this.get(i*rowStride,j*columnStride)&lt;/tt&gt; for all &lt;tt&gt;i = 0..rows()/rowStride - 1, j = 0..columns()/columnStride - 1&lt;/tt&gt;.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.</text>
    <param>rowStride the row step factor.</param>
    <param>columnStride the column step factor.</param>
    <return>a new view.</return>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;rowStride&lt;=0 || columnStride&lt;=0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewStrides">
    <declaration type="DoubleMatrix2D" name="view" />
    <method type="double" name="getQuick" />
    <method type="void" name="setQuick" />
  </method>
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>The elements of the matrix.</comment>
</class>
