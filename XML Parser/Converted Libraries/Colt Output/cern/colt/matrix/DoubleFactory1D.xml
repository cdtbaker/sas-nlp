<?xml version="1.0" encoding="UTF-8"?>
<class name="DoubleFactory1D">
  <javadoc>
    <text>Factory for convenient construction of 1-d matrices holding &lt;tt&gt;double&lt;/tt&gt; cells.
 * Use idioms like &lt;tt&gt;DoubleFactory1D.dense.make(1000)&lt;/tt&gt; to construct dense matrices, 
 * &lt;tt&gt;DoubleFactory1D.sparse.make(1000)&lt;/tt&gt; to construct sparse matrices.
 * If the factory is used frequently it might be useful to streamline the notation. 
 * For example by aliasing:
 * &lt;table&gt;
 * &lt;td class="PRE"&gt; 
 * &lt;pre&gt;
 * DoubleFactory1D F = DoubleFactory1D.dense;
 * F.make(1000);
 * F.descending(10);
 * F.random(3);
 * ...
 * &lt;/pre&gt;
 * &lt;/td&gt;
 * &lt;/table&gt;</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <javadoc>
    <text>A factory producing dense matrices.</text>
  </javadoc>
  <declaration type="DoubleFactory1D" name="dense" />
  <javadoc>
    <text>A factory producing sparse matrices.</text>
  </javadoc>
  <declaration type="DoubleFactory1D" name="sparse" />
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="DoubleFactory1D" />
  <javadoc>
    <text>C = A||B; Constructs a new matrix which is the concatenation of two other matrices.
 * Example: &lt;tt&gt;0 1&lt;/tt&gt; append &lt;tt&gt;3 4&lt;/tt&gt; --&gt; &lt;tt&gt;0 1 3 4&lt;/tt&gt;.</text>
  </javadoc>
  <method type="DoubleMatrix1D" name="append">
    <declaration type="DoubleMatrix1D" name="matrix" />
    <comment>concatenate</comment>
  </method>
  <javadoc>
    <text>Constructs a matrix with cells having ascending values.
 * For debugging purposes.
 * Example: &lt;tt&gt;0 1 2&lt;/tt&gt;</text>
  </javadoc>
  <method type="DoubleMatrix1D" name="ascending">
    <declaration type="cern.jet.math.Functions" name="F" />
  </method>
  <javadoc>
    <text>Constructs a matrix with cells having descending values.
 * For debugging purposes.
 * Example: &lt;tt&gt;2 1 0&lt;/tt&gt;</text>
  </javadoc>
  <method type="DoubleMatrix1D" name="descending">
    <declaration type="DoubleMatrix1D" name="matrix" />
    <declaration type="int" name="v" />
    <scope />
  </method>
  <javadoc>
    <text>Constructs a matrix with the given cell values.
 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.</text>
    <param>values The values to be filled into the new matrix.</param>
  </javadoc>
  <method type="DoubleMatrix1D" name="make" />
  <javadoc>
    <text>Constructs a matrix which is the concatenation of all given parts.
 * Cells are copied.</text>
  </javadoc>
  <method type="DoubleMatrix1D" name="make">
    <declaration type="int" name="size" />
    <declaration type="DoubleMatrix1D" name="vector" />
    <scope />
  </method>
  <javadoc>
    <text>Constructs a matrix with the given shape, each cell initialized with zero.</text>
  </javadoc>
  <method type="DoubleMatrix1D" name="make" />
  <javadoc>
    <text>Constructs a matrix with the given shape, each cell initialized with the given value.</text>
  </javadoc>
  <method type="DoubleMatrix1D" name="make" />
  <javadoc>
    <text>Constructs a matrix from the values of the given list.
 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.</text>
    <param>values The values to be filled into the new matrix.</param>
    <return>a new matrix.</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="make">
    <declaration type="int" name="size" />
    <declaration type="DoubleMatrix1D" name="vector" />
  </method>
  <javadoc>
    <text>Constructs a matrix with uniformly distributed values in &lt;tt&gt;(0,1)&lt;/tt&gt; (exclusive).</text>
  </javadoc>
  <method type="DoubleMatrix1D" name="random" />
  <javadoc>
    <text>C = A||A||..||A; Constructs a new matrix which is concatenated &lt;tt&gt;repeat&lt;/tt&gt; times.
 * Example:
 * &lt;pre&gt;
 * 0 1
 * repeat(3) --&gt;
 * 0 1 0 1 0 1
 * &lt;/pre&gt;</text>
  </javadoc>
  <method type="DoubleMatrix1D" name="repeat">
    <declaration type="int" name="size" />
    <declaration type="DoubleMatrix1D" name="matrix" />
    <scope />
  </method>
  <javadoc>
    <text>Constructs a randomly sampled matrix with the given shape.
 * Randomly picks exactly &lt;tt&gt;Math.round(size*nonZeroFraction)&lt;/tt&gt; cells and initializes them to &lt;tt&gt;value&lt;/tt&gt;, all the rest will be initialized to zero.
 * Note that this is not the same as setting each cell with probability &lt;tt&gt;nonZeroFraction&lt;/tt&gt; to &lt;tt&gt;value&lt;/tt&gt;.</text>
    <throws>IllegalArgumentException if &lt;tt&gt;nonZeroFraction &lt; 0 || nonZeroFraction &gt; 1&lt;/tt&gt;.</throws>
    <see>cern.jet.random.sampling.RandomSampler</see>
  </javadoc>
  <method type="DoubleMatrix1D" name="sample">
    <declaration type="double" name="epsilon" />
    <declaration type="DoubleMatrix1D" name="matrix" />
    <declaration type="int" name="n" />
    <declaration type="cern.jet.random.sampling.RandomSamplingAssistant" name="sampler" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Constructs a list from the given matrix.
 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the list, and vice-versa.</text>
    <param>values The values to be filled into the new list.</param>
    <return>a new list.</return>
  </javadoc>
  <method type="cern.colt.list.DoubleArrayList" name="toList">
    <declaration type="int" name="size" />
    <declaration type="cern.colt.list.DoubleArrayList" name="list" />
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
