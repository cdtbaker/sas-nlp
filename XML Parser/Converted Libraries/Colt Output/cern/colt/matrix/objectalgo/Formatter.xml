<?xml version="1.0" encoding="UTF-8"?>
<class name="Formatter">
  <javadoc>
    <text>Flexible, well human readable matrix print formatting.
 * Each cell is converted using {@link Object#toString()}.
 * For examples see {@link cern.colt.matrix.doublealgo.Formatter doublealgo.Formatter} which is just the same except that it operates on doubles.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.1, 11/22/99</version>
  </javadoc>
  <javadoc>
    <text>Constructs and returns a matrix formatter with alignment &lt;tt&gt;LEFT&lt;/tt&gt;.</text>
  </javadoc>
  <method type="constructor" name="Formatter" />
  <javadoc>
    <text>Constructs and returns a matrix formatter.</text>
    <param>alignment the given alignment used to align a column.</param>
  </javadoc>
  <method type="constructor" name="Formatter" />
  <javadoc>
    <text>Converts a given cell to a String; no alignment considered.</text>
  </javadoc>
  <method type="String" name="form" />
  <javadoc>
    <text>Converts a given cell to a String; no alignment considered.</text>
  </javadoc>
  <method type="String" name="form">
    <declaration type="Object" name="value" />
  </method>
  <javadoc>
    <text>Returns a string representations of all cells; no alignment considered.</text>
  </javadoc>
  <method type="String[][]" name="format" />
  <javadoc>
    <text>Returns a string representations of all cells; no alignment considered.</text>
  </javadoc>
  <method type="String[][]" name="format">
    <declaration type="String[][]" name="strings" />
  </method>
  <javadoc>
    <text>Returns a string &lt;tt&gt;s&lt;/tt&gt; such that &lt;tt&gt;Object[] m = s&lt;/tt&gt; is a legal Java statement.</text>
    <param>matrix the matrix to format.</param>
  </javadoc>
  <method type="String" name="toSourceCode">
    <declaration type="Formatter" name="copy" />
    <declaration type="String" name="lead" />
    <declaration type="String" name="trail" />
  </method>
  <javadoc>
    <text>Returns a string &lt;tt&gt;s&lt;/tt&gt; such that &lt;tt&gt;Object[] m = s&lt;/tt&gt; is a legal Java statement.</text>
    <param>matrix the matrix to format.</param>
  </javadoc>
  <method type="String" name="toSourceCode">
    <declaration type="Formatter" name="copy" />
    <declaration type="String" name="b3" />
    <declaration type="String" name="lead" />
    <declaration type="String" name="trail" />
  </method>
  <javadoc>
    <text>Returns a string &lt;tt&gt;s&lt;/tt&gt; such that &lt;tt&gt;Object[] m = s&lt;/tt&gt; is a legal Java statement.</text>
    <param>matrix the matrix to format.</param>
  </javadoc>
  <method type="String" name="toSourceCode">
    <declaration type="Formatter" name="copy" />
    <declaration type="String" name="b3" />
    <declaration type="String" name="b6" />
    <declaration type="String" name="lead" />
    <declaration type="String" name="trail" />
  </method>
  <javadoc>
    <text>Returns a string representation of the given matrix.</text>
    <param>matrix the matrix to convert.</param>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>Returns a string representation of the given matrix.</text>
    <param>matrix the matrix to convert.</param>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="ObjectMatrix2D" name="easy" />
  </method>
  <javadoc>
    <text>Returns a string representation of the given matrix.</text>
    <param>matrix the matrix to convert.</param>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>Returns a string representation of the given matrix.</text>
    <param>matrix the matrix to convert.</param>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuffer" name="buf" />
    <declaration type="boolean" name="oldPrintShape" />
    <scope />
  </method>
  <javadoc>
    <text>Returns a string representation of the given matrix with axis as well as rows and columns labeled.
 * Pass &lt;tt&gt;null&lt;/tt&gt; to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.</text>
    <param>matrix The matrix to format.</param>
    <param>rowNames The headers of all rows (to be put to the left of the matrix).</param>
    <param>columnNames The headers of all columns (to be put to above the matrix).</param>
    <param>rowAxisName The label of the y-axis.</param>
    <param>columnAxisName The label of the x-axis.</param>
    <param>title The overall title of the matrix to be formatted.</param>
    <return>the matrix converted to a string.</return>
  </javadoc>
  <method type="String" name="toTitleString">
    <declaration type="String" name="oldFormat" />
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <declaration type="int" name="r" />
    <declaration type="int" name="c" />
    <declaration type="int" name="height" />
    <declaration type="int" name="width" />
    <declaration type="cern.colt.matrix.ObjectMatrix2D" name="titleMatrix" />
    <scope>
      <declaration type="String[]" name="rowAxisStrings" />
    </scope>
    <declaration type="boolean" name="oldPrintShape" />
    <declaration type="String" name="str" />
    <declaration type="StringBuffer" name="total" />
    <scope>
      <declaration type="int" name="i" />
    </scope>
    <scope>
      <declaration type="int" name="i" />
    </scope>
    <scope>
      <declaration type="int" name="j" />
      <declaration type="String" name="s" />
    </scope>
    <comment>determine how many rows and columns are needed</comment>
    <comment>make larger matrix holding original matrix and naming strings</comment>
    <comment>insert original matrix into larger matrix</comment>
    <comment>insert column axis name in leading row</comment>
    <comment>insert row axis name in leading column</comment>
    <comment>insert row names in next leading columns</comment>
    <comment>insert vertical "---------" separator line in next leading column</comment>
    <comment>convert the large matrix to a string</comment>
    <comment>insert horizontal "--------------" separator line</comment>
    <comment>insert line for column axis name</comment>
    <comment>insert title</comment>
  </method>
  <javadoc>
    <text>Returns a string representation of the given matrix with axis as well as rows and columns labeled.
 * Pass &lt;tt&gt;null&lt;/tt&gt; to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.</text>
    <param>matrix The matrix to format.</param>
    <param>sliceNames The headers of all slices (to be put above each slice).</param>
    <param>rowNames The headers of all rows (to be put to the left of the matrix).</param>
    <param>columnNames The headers of all columns (to be put to above the matrix).</param>
    <param>sliceAxisName The label of the z-axis (to be put above each slice).</param>
    <param>rowAxisName The label of the y-axis.</param>
    <param>columnAxisName The label of the x-axis.</param>
    <param>title The overall title of the matrix to be formatted.</param>
    <return>the matrix converted to a string.</return>
  </javadoc>
  <method type="String" name="toTitleString">
    <declaration type="StringBuffer" name="buf" />
    <scope />
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
