<?xml version="1.0" encoding="UTF-8"?>
<class name="CholeskyDecomposition">
  <javadoc>
    <text>For a symmetric, positive definite matrix &lt;tt&gt;A&lt;/tt&gt;, the Cholesky decomposition
 * is a lower triangular matrix &lt;tt&gt;L&lt;/tt&gt; so that &lt;tt&gt;A = L*L'&lt;/tt&gt;;
 * If the matrix is not symmetric or positive definite, the constructor
 * returns a partial decomposition and sets an internal flag that may
 * be queried by the &lt;tt&gt;isSymmetricPositiveDefinite()&lt;/tt&gt; method.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Array for internal storage of decomposition.</text>
    <serial>internal array storage.</serial>
  </javadoc>
  <declaration type="DoubleMatrix2D" name="L" />
  <javadoc>
    <text>Row and column dimension (square matrix).</text>
    <serial>matrix dimension.</serial>
  </javadoc>
  <declaration type="int" name="n" />
  <javadoc>
    <text>Symmetric and positive definite flag.</text>
    <serial>is symmetric and positive definite flag.</serial>
  </javadoc>
  <declaration type="boolean" name="isSymmetricPositiveDefinite" />
  <javadoc>
    <text>Constructs and returns a new Cholesky decomposition object for a symmetric and positive definite matrix; 
 * The decomposed matrices can be retrieved via instance methods of the returned decomposition object.</text>
    <param>A   Square, symmetric matrix.</param>
    <return>Structure to access &lt;tt&gt;L&lt;/tt&gt; and &lt;tt&gt;isSymmetricPositiveDefinite&lt;/tt&gt; flag.</return>
    <throws>IllegalArgumentException if &lt;tt&gt;A&lt;/tt&gt; is not square.</throws>
  </javadoc>
  <method type="constructor" name="CholeskyDecomposition">
    <declaration type="DoubleMatrix1D[]" name="Lrows" />
    <scope>
      <declaration type="double" name="d" />
      <scope>
        <declaration type="double" name="s" />
      </scope>
      <scope />
    </scope>
    <comment>Initialize.</comment>
    <comment>double[][] A = Arg.getArray();</comment>
    <comment>L = new double[n][n];</comment>
    <comment>precompute and cache some views to avoid regenerating them time and again</comment>
    <comment>Main loop.</comment>
    <comment>double[] Lrowj = L[j];</comment>
    <comment>DoubleMatrix1D Lrowj = L.viewRow(j);</comment>
    <comment>double[] Lrowk = L[k];</comment>
    <comment>DoubleMatrix1D Lrowk = L.viewRow(k);
double s = 0.0;
for (int i = 0; i &lt; k; i++) {
s += Lrowk.getQuick(i)Lrowj.getQuick(i);
}</comment>
  </method>
  <javadoc>
    <text>Returns the triangular factor, &lt;tt&gt;L&lt;/tt&gt;.</text>
    <return>&lt;tt&gt;L&lt;/tt&gt;</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="getL" />
  <javadoc>
    <text>Returns whether the matrix &lt;tt&gt;A&lt;/tt&gt; is symmetric and positive definite.</text>
    <return>true if &lt;tt&gt;A&lt;/tt&gt; is symmetric and positive definite; false otherwise</return>
  </javadoc>
  <method type="boolean" name="isSymmetricPositiveDefinite" />
  <javadoc>
    <text>Solves &lt;tt&gt;A*X = B&lt;/tt&gt;; returns &lt;tt&gt;X&lt;/tt&gt;.</text>
    <param>B   A Matrix with as many rows as &lt;tt&gt;A&lt;/tt&gt; and any number of columns.</param>
    <return>&lt;tt&gt;X&lt;/tt&gt; so that &lt;tt&gt;L*L'*X = B&lt;/tt&gt;.</return>
    <exception>IllegalArgumentException  if &lt;tt&gt;B.rows() != A.rows()&lt;/tt&gt;.</exception>
    <exception>IllegalArgumentException  if &lt;tt&gt;!isSymmetricPositiveDefinite()&lt;/tt&gt;.</exception>
  </javadoc>
  <method type="DoubleMatrix2D" name="solve">
    <declaration type="DoubleMatrix2D" name="X" />
    <declaration type="int" name="nx" />
    <scope>
      <scope>
        <declaration type="double" name="sum" />
        <scope />
      </scope>
      <scope>
        <declaration type="double" name="sum" />
        <scope />
      </scope>
    </scope>
    <comment>Copy right hand side.</comment>
    <comment>fix by MG Ferreira &lt;mgf@webmail.co.za&gt;</comment>
    <comment>old code is in method xxxSolveBuggy()</comment>
    <comment>Solve L*Y = B;</comment>
    <comment>Solve L'*X = Y;</comment>
  </method>
  <javadoc>
    <text>Solves &lt;tt&gt;A*X = B&lt;/tt&gt;; returns &lt;tt&gt;X&lt;/tt&gt;.</text>
    <param>B   A Matrix with as many rows as &lt;tt&gt;A&lt;/tt&gt; and any number of columns.</param>
    <return>&lt;tt&gt;X&lt;/tt&gt; so that &lt;tt&gt;L*L'*X = B&lt;/tt&gt;.</return>
    <exception>IllegalArgumentException  if &lt;tt&gt;B.rows() != A.rows()&lt;/tt&gt;.</exception>
    <exception>IllegalArgumentException  if &lt;tt&gt;!isSymmetricPositiveDefinite()&lt;/tt&gt;.</exception>
  </javadoc>
  <method type="DoubleMatrix2D" name="XXXsolveBuggy">
    <declaration type="cern.jet.math.Functions" name="F" />
    <scope />
    <scope />
    <declaration type="DoubleMatrix2D" name="X" />
    <declaration type="int" name="nx" />
    <declaration type="DoubleMatrix1D[]" name="Xrows" />
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <comment>Copy right hand side.</comment>
    <comment>precompute and cache some views to avoid regenerating them time and again</comment>
    <comment>Solve L*Y = B;</comment>
    <comment>X[i,j] -= X[k,j]*L[i,k]</comment>
    <comment>Solve L'*X = Y;</comment>
    <comment>X[i,j] -= X[k,j]*L[k,i]</comment>
  </method>
  <javadoc>
    <text>Returns a String with (propertyName, propertyValue) pairs.
 * Useful for debugging or to quickly get the rough picture.
 * For example,
 * &lt;pre&gt;
 * rank          : 3
 * trace         : 0
 * &lt;/pre&gt;</text>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuffer" name="buf" />
    <declaration type="String" name="unknown" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>private double[][] L;</comment>
</class>
