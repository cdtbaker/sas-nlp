<?xml version="1.0" encoding="UTF-8"?>
<class name="SeqBlas">
  <javadoc>
    <text>Sequential implementation of the Basic Linear Algebra System.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>0.9, 16/04/2000</version>
  </javadoc>
  <javadoc>
    <text>Little trick to allow for "aliasing", that is, renaming this class.
 * Time and again writing code like
 * &lt;p&gt;
 * &lt;tt&gt;SeqBlas.blas.dgemm(...);&lt;/tt&gt;
 * &lt;p&gt;
 * is a bit awkward. Using the aliasing you can instead write
 * &lt;p&gt;
 * &lt;tt&gt;Blas B = SeqBlas.blas; &lt;br&gt;
 * B.dgemm(...);&lt;/tt&gt;</text>
  </javadoc>
  <declaration type="Blas" name="seqBlas" />
  <declaration type="cern.jet.math.Functions" name="F" />
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="SeqBlas" />
  <method type="void" name="assign" />
  <method type="void" name="assign" />
  <method type="double" name="dasum" />
  <method type="void" name="daxpy" />
  <method type="void" name="daxpy" />
  <method type="void" name="dcopy" />
  <method type="void" name="dcopy" />
  <method type="double" name="ddot" />
  <method type="void" name="dgemm" />
  <method type="void" name="dgemv" />
  <method type="void" name="dger">
    <declaration type="cern.jet.math.PlusMult" name="fun" />
    <scope />
  </method>
  <method type="double" name="dnrm2" />
  <method type="void" name="drot">
    <declaration type="DoubleMatrix1D" name="tmp" />
  </method>
  <method type="void" name="drotg">
    <declaration type="double" name="c" />
    <scope />
    <scope />
  </method>
  <method type="void" name="dscal" />
  <method type="void" name="dscal" />
  <method type="void" name="dswap" />
  <method type="void" name="dswap">
    <comment>B.swap(A); not yet implemented</comment>
  </method>
  <method type="void" name="dsymv">
    <declaration type="int" name="size" />
    <scope />
    <declaration type="DoubleMatrix1D" name="tmp" />
    <scope>
      <declaration type="double" name="sum" />
      <scope />
      <scope />
    </scope>
  </method>
  <method type="void" name="dtrmv">
    <scope />
    <declaration type="int" name="size" />
    <scope />
    <declaration type="DoubleMatrix1D" name="b" />
    <declaration type="DoubleMatrix1D" name="y" />
    <scope />
    <scope>
      <scope />
    </scope>
    <scope>
      <declaration type="double" name="sum" />
      <scope>
        <scope />
      </scope>
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <method type="int" name="idamax">
    <declaration type="int" name="maxIndex" />
    <declaration type="double" name="maxValue" />
    <scope>
      <declaration type="double" name="v" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Implements the FORTRAN sign (not sin) function.
 * See the code for details.</text>
    <param>a   a</param>
    <param>b   b</param>
  </javadoc>
  <method type="double" name="sign">
    <scope />
    <scope />
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
