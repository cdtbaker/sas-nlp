<?xml version="1.0" encoding="UTF-8"?>
<class name="LUDecompositionQuick">
  <javadoc>
    <text>A low level version of {@link LUDecomposition}, avoiding unnecessary memory allocation and copying.
 * The input to &lt;tt&gt;decompose&lt;/tt&gt; methods is overriden with the result (LU).
 * The input to &lt;tt&gt;solve&lt;/tt&gt; methods is overriden with the result (X).
 * In addition to &lt;tt&gt;LUDecomposition&lt;/tt&gt;, this class also includes a faster variant of the decomposition, specialized for tridiagonal (and hence also diagonal) matrices,
 * as well as a solver tuned for vectors.
 * Its disadvantage is that it is a bit more difficult to use than &lt;tt&gt;LUDecomposition&lt;/tt&gt;. 
 * Thus, you may want to disregard this class and come back later, if a need for speed arises.
 * &lt;p&gt;
 * An instance of this class remembers the result of its last decomposition.
 * Usage pattern is as follows: Create an instance of this class, call a decompose method, 
 * then retrieve the decompositions, determinant, and/or solve as many equation problems as needed.
 * Once another matrix needs to be LU-decomposed, you need not create a new instance of this class. 
 * Start again by calling a decompose method, then retrieve the decomposition and/or solve your equations, and so on.
 * In case a &lt;tt&gt;LU&lt;/tt&gt; matrix is already available, call method &lt;tt&gt;setLU&lt;/tt&gt; instead of &lt;tt&gt;decompose&lt;/tt&gt; and proceed with solving et al.
 * &lt;p&gt;
 * If a matrix shall not be overriden, use &lt;tt&gt;matrix.copy()&lt;/tt&gt; and hand the the copy to methods.
 * &lt;p&gt;
 * For an &lt;tt&gt;m x n&lt;/tt&gt; matrix &lt;tt&gt;A&lt;/tt&gt; with &lt;tt&gt;m &gt;= n&lt;/tt&gt;, the LU decomposition is an &lt;tt&gt;m x n&lt;/tt&gt;
 * unit lower triangular matrix &lt;tt&gt;L&lt;/tt&gt;, an &lt;tt&gt;n x n&lt;/tt&gt; upper triangular matrix &lt;tt&gt;U&lt;/tt&gt;,
 * and a permutation vector &lt;tt&gt;piv&lt;/tt&gt; of length &lt;tt&gt;m&lt;/tt&gt; so that &lt;tt&gt;A(piv,:) = L*U&lt;/tt&gt;;
 * If &lt;tt&gt;m &lt; n&lt;/tt&gt;, then &lt;tt&gt;L&lt;/tt&gt; is &lt;tt&gt;m x m&lt;/tt&gt; and &lt;tt&gt;U&lt;/tt&gt; is &lt;tt&gt;m x n&lt;/tt&gt;.
 * &lt;P&gt;
 * The LU decomposition with pivoting always exists, even if the matrix is
 * singular, so the decompose methods will never fail.  The primary use of the
 * LU decomposition is in the solution of square systems of simultaneous
 * linear equations.
 * Attempting to solve such a system will throw an exception if &lt;tt&gt;isNonsingular()&lt;/tt&gt; returns false.
 * &lt;p&gt;</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <javadoc>
    <text>Array for internal storage of decomposition.</text>
    <serial>internal array storage.</serial>
  </javadoc>
  <declaration type="DoubleMatrix2D" name="LU" />
  <javadoc>
    <text>pivot sign.</text>
    <serial>pivot sign.</serial>
  </javadoc>
  <declaration type="int" name="pivsign" />
  <javadoc>
    <text>Internal storage of pivot vector.</text>
    <serial>pivot vector.</serial>
  </javadoc>
  <declaration type="int[]" name="piv" />
  <declaration type="boolean" name="isNonSingular" />
  <declaration type="Algebra" name="algebra" />
  <declaration type="double[]" name="workDouble" />
  <declaration type="int[]" name="work1" />
  <declaration type="int[]" name="work2" />
  <javadoc>
    <text>Constructs and returns a new LU Decomposition object with default tolerance &lt;tt&gt;1.0E-9&lt;/tt&gt; for singularity detection.</text>
  </javadoc>
  <method type="constructor" name="LUDecompositionQuick" />
  <javadoc>
    <text>Constructs and returns a new LU Decomposition object which uses the given tolerance for singularity detection;</text>
  </javadoc>
  <method type="constructor" name="LUDecompositionQuick" />
  <javadoc>
    <text>Decomposes matrix &lt;tt&gt;A&lt;/tt&gt; into &lt;tt&gt;L&lt;/tt&gt; and &lt;tt&gt;U&lt;/tt&gt; (in-place).
 * Upon return &lt;tt&gt;A&lt;/tt&gt; is overridden with the result &lt;tt&gt;LU&lt;/tt&gt;, such that &lt;tt&gt;L*U = A&lt;/tt&gt;.
 * Uses a "left-looking", dot-product, Crout/Doolittle algorithm.</text>
    <param>A   any matrix.</param>
  </javadoc>
  <method type="void" name="decompose">
    <declaration type="int" name="CUT_OFF" />
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <scope />
    <declaration type="DoubleMatrix1D[]" name="LUrows" />
    <declaration type="cern.colt.list.IntArrayList" name="nonZeroIndexes" />
    <declaration type="DoubleMatrix1D" name="LUcolj" />
    <declaration type="cern.jet.math.Mult" name="multFunction" />
    <scope>
      <declaration type="int" name="maxCardinality" />
      <declaration type="int" name="cardinality" />
      <declaration type="boolean" name="sparse" />
      <scope>
        <declaration type="int" name="kmax" />
        <declaration type="double" name="s" />
        <scope />
        <scope />
        <declaration type="double" name="before" />
        <declaration type="double" name="after" />
        <scope>
          <scope>
            <declaration type="int" name="pos" />
          </scope>
          <scope />
        </scope>
      </scope>
      <declaration type="int" name="p" />
      <scope>
        <declaration type="double" name="max" />
        <scope>
          <declaration type="double" name="v" />
          <scope />
        </scope>
      </scope>
      <scope>
        <declaration type="int" name="k" />
      </scope>
      <declaration type="double" name="jj" />
      <scope />
    </scope>
    <comment>setup</comment>
    <comment>setup pivot vector</comment>
    <comment>nothing to do</comment>
    <comment>precompute and cache some views to avoid regenerating them time and again</comment>
    <comment>sparsity</comment>
    <comment>blocked column j</comment>
    <comment>Outer loop.</comment>
    <comment>blocking (make copy of j-th column to localize references)</comment>
    <comment>sparsity detection</comment>
    <comment>== heuristic depending on speedup</comment>
    <comment>Apply previous transformations.</comment>
    <comment>LUcolj is a copy</comment>
    <comment>this is the original</comment>
    <comment>nasty bug fixed!</comment>
    <comment>Find pivot and exchange if necessary.</comment>
    <comment>Compute multipliers.</comment>
  </method>
  <javadoc>
    <text>Decomposes the banded and square matrix &lt;tt&gt;A&lt;/tt&gt; into &lt;tt&gt;L&lt;/tt&gt; and &lt;tt&gt;U&lt;/tt&gt; (in-place).
 * Upon return &lt;tt&gt;A&lt;/tt&gt; is overridden with the result &lt;tt&gt;LU&lt;/tt&gt;, such that &lt;tt&gt;L*U = A&lt;/tt&gt;.
 * Currently supports diagonal and tridiagonal matrices, all other cases fall through to {@link #decompose(DoubleMatrix2D)}.</text>
    <param>semiBandwidth == 1 --&gt; A is diagonal, == 2 --&gt; A is tridiagonal.</param>
    <param>A   any matrix.</param>
  </javadoc>
  <method type="void" name="decompose">
    <scope />
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <scope />
    <scope>
      <scope>
        <declaration type="double" name="ei" />
      </scope>
    </scope>
    <comment>setup</comment>
    <comment>setup pivot vector</comment>
    <comment>nothing to do</comment>
    <comment>if (semiBandwidth == 1) {  A is diagonal; nothing to do</comment>
    <comment>A is tridiagonal</comment>
    <comment>currently no pivoting !</comment>
  </method>
  <javadoc>
    <text>Returns the determinant, &lt;tt&gt;det(A)&lt;/tt&gt;.</text>
    <exception>IllegalArgumentException  if &lt;tt&gt;A.rows() != A.columns()&lt;/tt&gt; (Matrix must be square).</exception>
  </javadoc>
  <method type="double" name="det">
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <declaration type="double" name="det" />
    <scope />
    <comment>avoid rounding errors</comment>
  </method>
  <javadoc>
    <text>Returns pivot permutation vector as a one-dimensional double array</text>
    <return>(double) piv</return>
  </javadoc>
  <method type="double[]" name="getDoublePivot">
    <declaration type="int" name="m" />
    <declaration type="double[]" name="vals" />
    <scope />
  </method>
  <javadoc>
    <text>Returns the lower triangular factor, &lt;tt&gt;L&lt;/tt&gt;.</text>
    <return>&lt;tt&gt;L&lt;/tt&gt;</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="getL" />
  <javadoc>
    <text>Returns a copy of the combined lower and upper triangular factor, &lt;tt&gt;LU&lt;/tt&gt;.</text>
    <return>&lt;tt&gt;LU&lt;/tt&gt;</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="getLU" />
  <javadoc>
    <text>Returns the pivot permutation vector (not a copy of it).</text>
    <return>piv</return>
  </javadoc>
  <method type="int[]" name="getPivot" />
  <javadoc>
    <text>Returns the upper triangular factor, &lt;tt&gt;U&lt;/tt&gt;.</text>
    <return>&lt;tt&gt;U&lt;/tt&gt;</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="getU" />
  <javadoc>
    <text>Returns whether the matrix is nonsingular (has an inverse).</text>
    <return>true if &lt;tt&gt;U&lt;/tt&gt;, and hence &lt;tt&gt;A&lt;/tt&gt;, is nonsingular; false otherwise.</return>
  </javadoc>
  <method type="boolean" name="isNonsingular" />
  <javadoc>
    <text>Returns whether the matrix is nonsingular.</text>
    <return>true if &lt;tt&gt;matrix&lt;/tt&gt; is nonsingular; false otherwise.</return>
  </javadoc>
  <method type="boolean" name="isNonsingular">
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <declaration type="double" name="epsilon" />
    <scope />
    <comment>consider numerical instability</comment>
    <comment>if (matrix.getQuick(j,j) == 0) return false;</comment>
  </method>
  <javadoc>
    <text>Modifies the matrix to be a lower triangular matrix.
 * &lt;p&gt;
 * &lt;b&gt;Examples:&lt;/b&gt; 
 * &lt;table border="0"&gt;
 * &lt;tr nowrap&gt; 
 * &lt;td valign="top"&gt;3 x 5 matrix:&lt;br&gt;
 * 9, 9, 9, 9, 9&lt;br&gt;
 * 9, 9, 9, 9, 9&lt;br&gt;
 * 9, 9, 9, 9, 9 &lt;/td&gt;
 * &lt;td align="center"&gt;triang.Upper&lt;br&gt;
 * ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;3 x 5 matrix:&lt;br&gt;
 * 9, 9, 9, 9, 9&lt;br&gt;
 * 0, 9, 9, 9, 9&lt;br&gt;
 * 0, 0, 9, 9, 9&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr nowrap&gt; 
 * &lt;td valign="top"&gt;5 x 3 matrix:&lt;br&gt;
 * 9, 9, 9&lt;br&gt;
 * 9, 9, 9&lt;br&gt;
 * 9, 9, 9&lt;br&gt;
 * 9, 9, 9&lt;br&gt;
 * 9, 9, 9 &lt;/td&gt;
 * &lt;td align="center"&gt;triang.Upper&lt;br&gt;
 * ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;5 x 3 matrix:&lt;br&gt;
 * 9, 9, 9&lt;br&gt;
 * 0, 9, 9&lt;br&gt;
 * 0, 0, 9&lt;br&gt;
 * 0, 0, 0&lt;br&gt;
 * 0, 0, 0&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr nowrap&gt; 
 * &lt;td valign="top"&gt;3 x 5 matrix:&lt;br&gt;
 * 9, 9, 9, 9, 9&lt;br&gt;
 * 9, 9, 9, 9, 9&lt;br&gt;
 * 9, 9, 9, 9, 9 &lt;/td&gt;
 * &lt;td align="center"&gt;triang.Lower&lt;br&gt;
 * ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;3 x 5 matrix:&lt;br&gt;
 * 1, 0, 0, 0, 0&lt;br&gt;
 * 9, 1, 0, 0, 0&lt;br&gt;
 * 9, 9, 1, 0, 0&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr nowrap&gt; 
 * &lt;td valign="top"&gt;5 x 3 matrix:&lt;br&gt;
 * 9, 9, 9&lt;br&gt;
 * 9, 9, 9&lt;br&gt;
 * 9, 9, 9&lt;br&gt;
 * 9, 9, 9&lt;br&gt;
 * 9, 9, 9 &lt;/td&gt;
 * &lt;td align="center"&gt;triang.Lower&lt;br&gt;
 * ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;5 x 3 matrix:&lt;br&gt;
 * 1, 0, 0&lt;br&gt;
 * 9, 1, 0&lt;br&gt;
 * 9, 9, 1&lt;br&gt;
 * 9, 9, 9&lt;br&gt;
 * 9, 9, 9&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;</text>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
    <see>#triangulateUpper(DoubleMatrix2D)</see>
  </javadoc>
  <method type="DoubleMatrix2D" name="lowerTriangular">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <declaration type="int" name="min" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc />
  <method type="int" name="m" />
  <javadoc />
  <method type="int" name="n" />
  <javadoc>
    <text>Sets the combined lower and upper triangular factor, &lt;tt&gt;LU&lt;/tt&gt;.
 * The parameter is not checked; make sure it is indeed a proper LU decomposition.</text>
  </javadoc>
  <method type="void" name="setLU" />
  <javadoc>
    <text>Solves the system of equations &lt;tt&gt;A*X = B&lt;/tt&gt; (in-place).
 * Upon return &lt;tt&gt;B&lt;/tt&gt; is overridden with the result &lt;tt&gt;X&lt;/tt&gt;, such that &lt;tt&gt;L*U*X = B(piv)&lt;/tt&gt;.</text>
    <param>B   A vector with &lt;tt&gt;B.size() == A.rows()&lt;/tt&gt;.</param>
    <exception>IllegalArgumentException if &lt;/tt&gt;B.size() != A.rows()&lt;/tt&gt;.</exception>
    <exception>IllegalArgumentException  if A is singular, that is, if &lt;tt&gt;!isNonsingular()&lt;/tt&gt;.</exception>
    <exception>IllegalArgumentException  if &lt;tt&gt;A.rows() &lt; A.columns()&lt;/tt&gt;.</exception>
  </javadoc>
  <method type="void" name="solve">
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <scope>
      <declaration type="double" name="f" />
      <scope>
        <scope>
          <declaration type="double" name="v" />
        </scope>
      </scope>
    </scope>
    <scope>
      <declaration type="double" name="f" />
      <scope>
        <scope>
          <declaration type="double" name="v" />
        </scope>
      </scope>
    </scope>
    <comment>right hand side with pivoting</comment>
    <comment>Matrix Xmat = B.getMatrix(piv,0,nx-1);</comment>
    <comment>nothing to do</comment>
    <comment>Solve L*Y = B(piv,:)</comment>
    <comment>B[i] -= B[k]*LU[i][k];</comment>
    <comment>Solve U*B = Y;</comment>
    <comment>B[k] /= LU[k,k]</comment>
    <comment>B[i] -= B[k]*LU[i][k];</comment>
  </method>
  <javadoc>
    <text>Solves the system of equations &lt;tt&gt;A*X = B&lt;/tt&gt; (in-place).
 * Upon return &lt;tt&gt;B&lt;/tt&gt; is overridden with the result &lt;tt&gt;X&lt;/tt&gt;, such that &lt;tt&gt;L*U*X = B(piv,:)&lt;/tt&gt;.</text>
    <param>B   A matrix with as many rows as &lt;tt&gt;A&lt;/tt&gt; and any number of columns.</param>
    <exception>IllegalArgumentException if &lt;/tt&gt;B.rows() != A.rows()&lt;/tt&gt;.</exception>
    <exception>IllegalArgumentException  if A is singular, that is, if &lt;tt&gt;!isNonsingular()&lt;/tt&gt;.</exception>
    <exception>IllegalArgumentException  if &lt;tt&gt;A.rows() &lt; A.columns()&lt;/tt&gt;.</exception>
  </javadoc>
  <method type="void" name="solve">
    <declaration type="int" name="CUT_OFF" />
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <declaration type="int" name="nx" />
    <declaration type="DoubleMatrix1D[]" name="Brows" />
    <declaration type="cern.jet.math.Mult" name="div" />
    <declaration type="cern.jet.math.PlusMult" name="minusMult" />
    <declaration type="cern.colt.list.IntArrayList" name="nonZeroIndexes" />
    <declaration type="DoubleMatrix1D" name="Browk" />
    <scope>
      <declaration type="int" name="maxCardinality" />
      <declaration type="int" name="cardinality" />
      <declaration type="boolean" name="sparse" />
      <scope>
        <scope>
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
    <scope>
      <declaration type="int" name="maxCardinality" />
      <declaration type="int" name="cardinality" />
      <declaration type="boolean" name="sparse" />
      <scope>
        <scope>
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>right hand side with pivoting</comment>
    <comment>Matrix Xmat = B.getMatrix(piv,0,nx-1);</comment>
    <comment>if (this.work2 == null || this.work2.length &lt; m) this.work2 = new int[m];</comment>
    <comment>nothing to do</comment>
    <comment>precompute and cache some views to avoid regenerating them time and again</comment>
    <comment>transformations</comment>
    <comment>sparsity</comment>
    <comment>blocked row k</comment>
    <comment>Solve L*Y = B(piv,:)</comment>
    <comment>blocking (make copy of k-th row to localize references)</comment>
    <comment>sparsity detection</comment>
    <comment>== heuristic depending on speedup</comment>
    <comment>for (int j = 0; j &lt; nx; j++) B[i][j] -= B[k][j]*LU[i][k];</comment>
    <comment>for (int j = 0; j &lt; nx; j++) B.set(i,j, B.get(i,j) - B.get(k,j)*LU.get(i,k));</comment>
    <comment>Solve U*B = Y;</comment>
    <comment>for (int j = 0; j &lt; nx; j++) B[k][j] /= LU[k][k];</comment>
    <comment>for (int j = 0; j &lt; nx; j++) B.set(k,j, B.get(k,j) / LU.get(k,k));</comment>
    <comment>blocking</comment>
    <comment>sparsity detection</comment>
    <comment>== heuristic depending on speedup</comment>
    <comment>Browk.getNonZeros(nonZeroIndexes,null);</comment>
    <comment>boolean sparse = nonZeroIndexes.size() &lt; nx/10;</comment>
    <comment>for (int j = 0; j &lt; nx; j++) B[i][j] -= B[k][j]*LU[i][k];</comment>
    <comment>for (int j = 0; j &lt; nx; j++) B.set(i,j, B.get(i,j) - B.get(k,j)*LU.get(i,k));</comment>
  </method>
  <javadoc>
    <text>Solves &lt;tt&gt;A*X = B&lt;/tt&gt;.</text>
    <param>B   A matrix with as many rows as &lt;tt&gt;A&lt;/tt&gt; and any number of columns.</param>
    <return>&lt;tt&gt;X&lt;/tt&gt; so that &lt;tt&gt;L*U*X = B(piv,:)&lt;/tt&gt;.</return>
    <exception>IllegalArgumentException if &lt;/tt&gt;B.rows() != A.rows()&lt;/tt&gt;.</exception>
    <exception>IllegalArgumentException  if A is singular, that is, if &lt;tt&gt;!this.isNonsingular()&lt;/tt&gt;.</exception>
    <exception>IllegalArgumentException  if &lt;tt&gt;A.rows() &lt; A.columns()&lt;/tt&gt;.</exception>
  </javadoc>
  <method type="void" name="solveOld">
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <declaration type="int" name="nx" />
    <scope>
      <scope>
        <declaration type="double" name="mult" />
        <scope>
          <scope />
        </scope>
      </scope>
    </scope>
    <scope>
      <declaration type="double" name="mult" />
      <scope>
        <scope />
      </scope>
      <scope>
        <scope>
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>Copy right hand side with pivoting</comment>
    <comment>if (this.work2 == null || this.work2.length &lt; m) this.work2 = new int[m];</comment>
    <comment>Solve L*Y = B(piv,:) --&gt; Y (Y is modified B)</comment>
    <comment>B[i][j] -= B[k][j]*LU[i,k];</comment>
    <comment>Solve U*X = Y; --&gt; X (X is modified B)</comment>
    <comment>B[k][j] /= LU[k][k];</comment>
    <comment>B[i][j] -= B[k][j]*LU[i][k];</comment>
  </method>
  <javadoc>
    <text>Returns a String with (propertyName, propertyValue) pairs.
 * Useful for debugging or to quickly get the rough picture.
 * For example,
 * &lt;pre&gt;
 * rank          : 3
 * trace         : 0
 * &lt;/pre&gt;</text>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuffer" name="buf" />
    <declaration type="String" name="unknown" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <declaration type="DoubleMatrix2D" name="identity" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Modifies the matrix to be an upper triangular matrix.</text>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
    <see>#triangulateLower(DoubleMatrix2D)</see>
  </javadoc>
  <method type="DoubleMatrix2D" name="upperTriangular">
    <declaration type="int" name="rows" />
    <declaration type="int" name="columns" />
    <declaration type="int" name="min" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns pivot permutation vector as a one-dimensional double array</text>
    <return>(double) piv</return>
  </javadoc>
  <method type="double[]" name="xgetDoublePivot">
    <declaration type="int" name="m" />
    <declaration type="double[]" name="vals" />
    <scope />
  </method>
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
