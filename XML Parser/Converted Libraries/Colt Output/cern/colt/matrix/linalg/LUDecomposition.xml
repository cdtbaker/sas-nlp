<?xml version="1.0" encoding="UTF-8"?>
<class name="LUDecomposition">
  <javadoc>
    <text>For an &lt;tt&gt;m x n&lt;/tt&gt; matrix &lt;tt&gt;A&lt;/tt&gt; with &lt;tt&gt;m &gt;= n&lt;/tt&gt;, the LU decomposition is an &lt;tt&gt;m x n&lt;/tt&gt;
 * unit lower triangular matrix &lt;tt&gt;L&lt;/tt&gt;, an &lt;tt&gt;n x n&lt;/tt&gt; upper triangular matrix &lt;tt&gt;U&lt;/tt&gt;,
 * and a permutation vector &lt;tt&gt;piv&lt;/tt&gt; of length &lt;tt&gt;m&lt;/tt&gt; so that &lt;tt&gt;A(piv,:) = L*U&lt;/tt&gt;;
 * If &lt;tt&gt;m &lt; n&lt;/tt&gt;, then &lt;tt&gt;L&lt;/tt&gt; is &lt;tt&gt;m x m&lt;/tt&gt; and &lt;tt&gt;U&lt;/tt&gt; is &lt;tt&gt;m x n&lt;/tt&gt;.
 * &lt;P&gt;
 * The LU decomposition with pivoting always exists, even if the matrix is
 * singular, so the constructor will never fail.  The primary use of the
 * LU decomposition is in the solution of square systems of simultaneous
 * linear equations.  This will fail if &lt;tt&gt;isNonsingular()&lt;/tt&gt; returns false.</text>
  </javadoc>
  <declaration type="long" name="serialVersionUID" />
  <declaration type="LUDecompositionQuick" name="quick" />
  <javadoc>
    <text>Constructs and returns a new LU Decomposition object; 
 * The decomposed matrices can be retrieved via instance methods of the returned decomposition object.</text>
    <param>A   Rectangular matrix</param>
    <return>Structure to access L, U and piv.</return>
  </javadoc>
  <method type="constructor" name="LUDecomposition">
    <comment>zero tolerance for compatibility with Jama</comment>
  </method>
  <javadoc>
    <text>Returns the determinant, &lt;tt&gt;det(A)&lt;/tt&gt;.</text>
    <exception>IllegalArgumentException  Matrix must be square</exception>
  </javadoc>
  <method type="double" name="det" />
  <javadoc>
    <text>Returns pivot permutation vector as a one-dimensional double array</text>
    <return>(double) piv</return>
  </javadoc>
  <method type="double[]" name="getDoublePivot" />
  <javadoc>
    <text>Returns the lower triangular factor, &lt;tt&gt;L&lt;/tt&gt;.</text>
    <return>&lt;tt&gt;L&lt;/tt&gt;</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="getL" />
  <javadoc>
    <text>Returns a copy of the pivot permutation vector.</text>
    <return>piv</return>
  </javadoc>
  <method type="int[]" name="getPivot" />
  <javadoc>
    <text>Returns the upper triangular factor, &lt;tt&gt;U&lt;/tt&gt;.</text>
    <return>&lt;tt&gt;U&lt;/tt&gt;</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="getU" />
  <javadoc>
    <text>Returns whether the matrix is nonsingular (has an inverse).</text>
    <return>true if &lt;tt&gt;U&lt;/tt&gt;, and hence &lt;tt&gt;A&lt;/tt&gt;, is nonsingular; false otherwise.</return>
  </javadoc>
  <method type="boolean" name="isNonsingular" />
  <javadoc>
    <text>Solves &lt;tt&gt;A*X = B&lt;/tt&gt;.</text>
    <param>B   A matrix with as many rows as &lt;tt&gt;A&lt;/tt&gt; and any number of columns.</param>
    <return>&lt;tt&gt;X&lt;/tt&gt; so that &lt;tt&gt;L*U*X = B(piv,:)&lt;/tt&gt;.</return>
    <exception>IllegalArgumentException if &lt;/tt&gt;B.rows() != A.rows()&lt;/tt&gt;.</exception>
    <exception>IllegalArgumentException  if A is singular, that is, if &lt;tt&gt;!this.isNonsingular()&lt;/tt&gt;.</exception>
    <exception>IllegalArgumentException  if &lt;tt&gt;A.rows() &lt; A.columns()&lt;/tt&gt;.</exception>
  </javadoc>
  <method type="DoubleMatrix2D" name="solve">
    <declaration type="DoubleMatrix2D" name="X" />
  </method>
  <javadoc>
    <text>Returns a String with (propertyName, propertyValue) pairs.
 * Useful for debugging or to quickly get the rough picture.
 * For example,
 * &lt;pre&gt;
 * rank          : 3
 * trace         : 0
 * &lt;/pre&gt;</text>
  </javadoc>
  <method type="String" name="toString" />
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>import cern.colt.matrix.DenseDoubleMatrix1D;</comment>
</class>
