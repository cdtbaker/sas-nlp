<?xml version="1.0" encoding="UTF-8"?>
<class name="Smp">
  <declaration type="FJTaskRunnerGroup" name="taskGroup" />
  <declaration type="int" name="maxThreads" />
  <javadoc>
    <text>Constructs a new Smp using a maximum of &lt;tt&gt;maxThreads&lt;tt&gt; threads.</text>
  </javadoc>
  <method type="constructor" name="Smp">
    <scope />
    <scope />
    <comment>avoid parallel overhead</comment>
  </method>
  <javadoc>
    <text>Clean up deamon threads, if necessary.</text>
  </javadoc>
  <method type="void" name="finalize" />
  <method type="void" name="run">
    <declaration type="FJTask[]" name="subTasks" />
    <scope>
      <declaration type="int" name="k" />
      <method type="void" name="run">
        <declaration type="double" name="result" />
      </method>
    </scope>
    <scope>
      <method type="void" name="run" />
    </scope>
    <scope />
    <comment>System.out.print(".");</comment>
    <comment>run tasks and wait for completion</comment>
  </method>
  <method type="DoubleMatrix2D[]" name="splitBlockedNN">
    <declaration type="int" name="noOfTasks" />
    <declaration type="boolean" name="splitHoriz" />
    <declaration type="int" name="p" />
    <scope />
    <declaration type="int" name="span" />
    <declaration type="DoubleMatrix2D[]" name="blocks" />
    <scope>
      <declaration type="int" name="offset" />
      <declaration type="DoubleMatrix2D" name="AA" />
      <scope />
      <scope />
    </scope>
    <comment>determine how to split and parallelize best into blocks
if more B.columns than tasks --&gt; split B.columns, as follows:

xx|xx|xxx B
xx|xx|xxx
xx|xx|xxx
A
xxx     xx|xx|xxx C
xxx		xx|xx|xxx
xxx		xx|xx|xxx
xxx		xx|xx|xxx
xxx		xx|xx|xxx

if less B.columns than tasks --&gt; split A.rows, as follows:

xxxxxxx B
xxxxxxx
xxxxxxx
A
xxx     xxxxxxx C
xxx     xxxxxxx
---     -------
xxx     xxxxxxx
xxx     xxxxxxx
---     -------
xxx     xxxxxxx</comment>
    <comment>long flops = 2L*A.rows()*A.columns()*A.columns();</comment>
    <comment>each thread should process at least 30000 flops</comment>
    <comment>boolean splitHoriz = (A.columns() &gt;= noOfTasks);</comment>
    <comment>parallelization doesn't pay off (too much start up overhead)</comment>
    <comment>set up concurrent tasks</comment>
    <comment>last span may be a bit larger</comment>
    <comment>split B along columns into blocks</comment>
    <comment>split A along rows into blocks</comment>
  </method>
  <method type="DoubleMatrix2D[][]" name="splitBlockedNN">
    <declaration type="DoubleMatrix2D[]" name="blocksA" />
    <declaration type="DoubleMatrix2D[]" name="blocksB" />
    <declaration type="DoubleMatrix2D[][]" name="blocks" />
  </method>
  <method type="DoubleMatrix2D[]" name="splitStridedNN">
    <declaration type="int" name="noOfTasks" />
    <declaration type="boolean" name="splitHoriz" />
    <declaration type="int" name="p" />
    <scope />
    <declaration type="int" name="span" />
    <declaration type="DoubleMatrix2D[]" name="blocks" />
    <scope>
      <declaration type="int" name="offset" />
      <declaration type="DoubleMatrix2D" name="AA" />
      <scope />
      <scope />
    </scope>
    <comment>determine how to split and parallelize best into blocks
if more B.columns than tasks --&gt; split B.columns, as follows:

xx|xx|xxx B
xx|xx|xxx
xx|xx|xxx
A
xxx     xx|xx|xxx C
xxx		xx|xx|xxx
xxx		xx|xx|xxx
xxx		xx|xx|xxx
xxx		xx|xx|xxx

if less B.columns than tasks --&gt; split A.rows, as follows:

xxxxxxx B
xxxxxxx
xxxxxxx
A
xxx     xxxxxxx C
xxx     xxxxxxx
---     -------
xxx     xxxxxxx
xxx     xxxxxxx
---     -------
xxx     xxxxxxx</comment>
    <comment>long flops = 2L*A.rows()*A.columns()*A.columns();</comment>
    <comment>each thread should process at least 30000 flops</comment>
    <comment>boolean splitHoriz = (A.columns() &gt;= noOfTasks);</comment>
    <comment>parallelization doesn't pay off (too much start up overhead)</comment>
    <comment>set up concurrent tasks</comment>
    <comment>last span may be a bit larger</comment>
    <comment>split B along columns into blocks</comment>
    <comment>split A along rows into blocks</comment>
  </method>
  <javadoc>
    <text>Prints various snapshot statistics to System.out; Simply delegates to {@link EDU.oswego.cs.dl.util.concurrent.FJTaskRunnerGroup#stats}.</text>
  </javadoc>
  <method type="void" name="stats" />
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment />
  <comment>a very efficient and light weight thread pool</comment>
</class>
