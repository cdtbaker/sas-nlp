<?xml version="1.0" encoding="UTF-8"?>
<class name="DoubleFactory3D">
  <javadoc>
    <text>Factory for convenient construction of 3-d matrices holding &lt;tt&gt;double&lt;/tt&gt; cells. 
 * Use idioms like &lt;tt&gt;DoubleFactory3D.dense.make(4,4,4)&lt;/tt&gt; to construct dense matrices, 
 * &lt;tt&gt;DoubleFactory3D.sparse.make(4,4,4)&lt;/tt&gt; to construct sparse matrices.
 * If the factory is used frequently it might be useful to streamline the notation. 
 * For example by aliasing:
 * &lt;table&gt;
 * &lt;td class="PRE"&gt; 
 * &lt;pre&gt;
 * DoubleFactory3D F = DoubleFactory3D.dense;
 * F.make(4,4,4);
 * F.descending(10,20,5);
 * F.random(4,4,5);
 * ...
 * &lt;/pre&gt;
 * &lt;/td&gt;
 * &lt;/table&gt;</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <javadoc>
    <text>A factory producing dense matrices.</text>
  </javadoc>
  <declaration type="DoubleFactory3D" name="dense" />
  <javadoc>
    <text>A factory producing sparse matrices.</text>
  </javadoc>
  <declaration type="DoubleFactory3D" name="sparse" />
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="DoubleFactory3D" />
  <javadoc>
    <text>Constructs a matrix with cells having ascending values.
 * For debugging purposes.</text>
  </javadoc>
  <method type="DoubleMatrix3D" name="ascending">
    <declaration type="cern.jet.math.Functions" name="F" />
  </method>
  <javadoc>
    <text>Constructs a matrix with cells having descending values.
 * For debugging purposes.</text>
  </javadoc>
  <method type="DoubleMatrix3D" name="descending">
    <declaration type="DoubleMatrix3D" name="matrix" />
    <declaration type="int" name="v" />
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Constructs a matrix with the given cell values.
 * &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[slice][row][column]&lt;/tt&gt;
 * and have exactly the same number of slices, rows and columns as the receiver.
 * &lt;p&gt;
 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.</text>
    <param>values the values to be filled into the cells.</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
    <throws>IllegalArgumentException if &lt;tt&gt;values.length != slices() || for any 0 &amp;lt;= slice &amp;lt; slices(): values[slice].length != rows()&lt;/tt&gt;.</throws>
    <throws>IllegalArgumentException if &lt;tt&gt;for any 0 &amp;lt;= column &amp;lt; columns(): values[slice][row].length != columns()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="DoubleMatrix3D" name="make" />
  <javadoc>
    <text>Constructs a matrix with the given shape, each cell initialized with zero.</text>
  </javadoc>
  <method type="DoubleMatrix3D" name="make" />
  <javadoc>
    <text>Constructs a matrix with the given shape, each cell initialized with the given value.</text>
  </javadoc>
  <method type="DoubleMatrix3D" name="make" />
  <javadoc>
    <text>Constructs a matrix with uniformly distributed values in &lt;tt&gt;(0,1)&lt;/tt&gt; (exclusive).</text>
  </javadoc>
  <method type="DoubleMatrix3D" name="random" />
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
