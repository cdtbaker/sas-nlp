<?xml version="1.0" encoding="UTF-8"?>
<class name="Transform">
  <javadoc>
    <text>Deprecated; Basic element-by-element transformations on {@link cern.colt.matrix.DoubleMatrix1D} and {@link cern.colt.matrix.DoubleMatrix2D}.
 * All transformations modify the first argument matrix to hold the result of the transformation.
 * Use idioms like &lt;tt&gt;result = mult(matrix.copy(),5)&lt;/tt&gt; to leave source matrices unaffected.
 * &lt;p&gt;
 * If your favourite transformation is not provided by this class, consider using method &lt;tt&gt;assign&lt;/tt&gt; in combination with prefabricated function objects of {@link cern.jet.math.Functions},
 * using idioms like 
 * &lt;table&gt;
 * &lt;td class="PRE"&gt; 
 * &lt;pre&gt;
 * cern.jet.math.Functions F = cern.jet.math.Functions.functions; // alias
 * matrix.assign(F.square);
 * matrix.assign(F.sqrt);
 * matrix.assign(F.sin);
 * matrix.assign(F.log);
 * matrix.assign(F.log(b));
 * matrix.assign(otherMatrix, F.min);
 * matrix.assign(otherMatrix, F.max);
 * &lt;/pre&gt;
 * &lt;/td&gt;
 * &lt;/table&gt;
 * Here are some &lt;a href="../doc-files/functionObjects.html"&gt;other examples&lt;/a&gt;.
 * &lt;p&gt;
 * Implementation: Performance optimized for medium to very large matrices.
 * In fact, there is now nomore a performance advantage in using this class; The assign (transform) methods directly defined on matrices are now just as fast.
 * Thus, this class will soon be removed altogether.</text>
    <deprecated />
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <javadoc>
    <text>Little trick to allow for "aliasing", that is, renaming this class.
 * Normally you would write
 * &lt;pre&gt;
 * Transform.mult(myMatrix,2);
 * Transform.plus(myMatrix,5);
 * &lt;/pre&gt;
 * Since this class has only static methods, but no instance methods
 * you can also shorten the name "DoubleTransform" to a name that better suits you, for example "Trans".
 * &lt;pre&gt;
 * Transform T = Transform.transform; // kind of "alias"
 * T.mult(myMatrix,2);
 * T.plus(myMatrix,5);
 * &lt;/pre&gt;</text>
  </javadoc>
  <declaration type="Transform" name="transform" />
  <declaration type="cern.jet.math.Functions" name="F" />
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="Transform" />
  <javadoc>
    <text>&lt;tt&gt;A[i] = Math.abs(A[i])&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="abs" />
  <javadoc>
    <text>&lt;tt&gt;A[row,col] = Math.abs(A[row,col])&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="abs" />
  <javadoc>
    <text>&lt;tt&gt;A = A / s &lt;=&gt; A[i] = A[i] / s&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>s the scalar; can have any value.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="div" />
  <javadoc>
    <text>&lt;tt&gt;A = A / B &lt;=&gt; A[i] = A[i] / B[i]&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>B the matrix to stay unaffected.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="div" />
  <javadoc>
    <text>&lt;tt&gt;A = A / s &lt;=&gt; A[row,col] = A[row,col] / s&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>s the scalar; can have any value.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="div" />
  <javadoc>
    <text>&lt;tt&gt;A = A / B &lt;=&gt; A[row,col] = A[row,col] / B[row,col]&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>B the matrix to stay unaffected.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="div" />
  <javadoc>
    <text>&lt;tt&gt;A[row,col] = A[row,col] == s ? 1 : 0&lt;/tt&gt;; ignores tolerance.</text>
    <param>A the matrix to modify.</param>
    <param>s the scalar; can have any value.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="equals" />
  <javadoc>
    <text>&lt;tt&gt;A[row,col] = A[row,col] == B[row,col] ? 1 : 0&lt;/tt&gt;; ignores tolerance.</text>
    <param>A the matrix to modify.</param>
    <param>B the matrix to stay unaffected.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="equals" />
  <javadoc>
    <text>&lt;tt&gt;A[row,col] = A[row,col] &gt; s ? 1 : 0&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>s the scalar; can have any value.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="greater" />
  <javadoc>
    <text>&lt;tt&gt;A[row,col] = A[row,col] &gt; B[row,col] ? 1 : 0&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>B the matrix to stay unaffected.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="greater" />
  <javadoc>
    <text>&lt;tt&gt;A[row,col] = A[row,col] &lt; s ? 1 : 0&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>s the scalar; can have any value.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="less" />
  <javadoc>
    <text>&lt;tt&gt;A[row,col] = A[row,col] &lt; B[row,col] ? 1 : 0&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>B the matrix to stay unaffected.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="less" />
  <javadoc>
    <text>&lt;tt&gt;A = A - s &lt;=&gt; A[i] = A[i] - s&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>s the scalar; can have any value.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="minus" />
  <javadoc>
    <text>&lt;tt&gt;A = A - B &lt;=&gt; A[i] = A[i] - B[i]&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>B the matrix to stay unaffected.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="minus" />
  <javadoc>
    <text>&lt;tt&gt;A = A - s &lt;=&gt; A[row,col] = A[row,col] - s&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>s the scalar; can have any value.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="minus" />
  <javadoc>
    <text>&lt;tt&gt;A = A - B &lt;=&gt; A[row,col] = A[row,col] - B[row,col]&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>B the matrix to stay unaffected.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="minus" />
  <javadoc>
    <text>&lt;tt&gt;A = A - B*s &lt;=&gt; A[i] = A[i] - B[i]*s&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>B the matrix to stay unaffected.</param>
    <param>s the scalar; can have any value.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="minusMult" />
  <javadoc>
    <text>&lt;tt&gt;A = A - B*s &lt;=&gt; A[row,col] = A[row,col] - B[row,col]*s&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>B the matrix to stay unaffected.</param>
    <param>s the scalar; can have any value.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="minusMult" />
  <javadoc>
    <text>&lt;tt&gt;A = A * s &lt;=&gt; A[i] = A[i] * s&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>s the scalar; can have any value.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="mult" />
  <javadoc>
    <text>&lt;tt&gt;A = A * B &lt;=&gt; A[i] = A[i] * B[i]&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>B the matrix to stay unaffected.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="mult" />
  <javadoc>
    <text>&lt;tt&gt;A = A * s &lt;=&gt; A[row,col] = A[row,col] * s&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>s the scalar; can have any value.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="mult" />
  <javadoc>
    <text>&lt;tt&gt;A = A * B &lt;=&gt; A[row,col] = A[row,col] * B[row,col]&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>B the matrix to stay unaffected.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="mult" />
  <javadoc>
    <text>&lt;tt&gt;A = -A &lt;=&gt; A[i] = -A[i]&lt;/tt&gt; for all cells.</text>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="negate" />
  <javadoc>
    <text>&lt;tt&gt;A = -A &lt;=&gt; A[row,col] = -A[row,col]&lt;/tt&gt;.</text>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="negate" />
  <javadoc>
    <text>&lt;tt&gt;A = A + s &lt;=&gt; A[i] = A[i] + s&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>s the scalar; can have any value.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="plus" />
  <javadoc>
    <text>&lt;tt&gt;A = A + B &lt;=&gt; A[i] = A[i] + B[i]&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>B the matrix to stay unaffected.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="plus" />
  <javadoc>
    <text>&lt;tt&gt;A = A + s &lt;=&gt; A[row,col] = A[row,col] + s&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>s the scalar; can have any value.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="plus" />
  <javadoc>
    <text>&lt;tt&gt;A = A + B &lt;=&gt; A[row,col] = A[row,col] + B[row,col]&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>B the matrix to stay unaffected.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="plus" />
  <javadoc>
    <text>&lt;tt&gt;A = A + B*s&lt;=&gt; A[i] = A[i] + B[i]*s&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>B the matrix to stay unaffected.</param>
    <param>s the scalar; can have any value.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="plusMult" />
  <javadoc>
    <text>&lt;tt&gt;A = A + B*s &lt;=&gt; A[row,col] = A[row,col] + B[row,col]*s&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>B the matrix to stay unaffected.</param>
    <param>s the scalar; can have any value.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="plusMult" />
  <javadoc>
    <text>&lt;tt&gt;A = A&lt;sup&gt;s&lt;/sup&gt; &lt;=&gt; A[i] = Math.pow(A[i], s)&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>s the scalar; can have any value.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="pow" />
  <javadoc>
    <text>&lt;tt&gt;A = A&lt;sup&gt;B&lt;/sup&gt; &lt;=&gt; A[i] = Math.pow(A[i], B[i])&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>B the matrix to stay unaffected.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix1D" name="pow" />
  <javadoc>
    <text>&lt;tt&gt;A = A&lt;sup&gt;s&lt;/sup&gt; &lt;=&gt; A[row,col] = Math.pow(A[row,col], s)&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>s the scalar; can have any value.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="pow" />
  <javadoc>
    <text>&lt;tt&gt;A = A&lt;sup&gt;B&lt;/sup&gt; &lt;=&gt; A[row,col] = Math.pow(A[row,col], B[row,col])&lt;/tt&gt;.</text>
    <param>A the matrix to modify.</param>
    <param>B the matrix to stay unaffected.</param>
    <return>&lt;tt&gt;A&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="pow" />
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>alias</comment>
</class>
