<?xml version="1.0" encoding="UTF-8"?>
<class name="Stencil">
  <javadoc>
    <text>Stencil operations. For efficient finite difference operations.
 * Applies a function to a moving &lt;tt&gt;3 x 3&lt;/tt&gt; or &lt;tt&gt;3 x 3 x 3&lt;/tt&gt; window.
 * Build on top of &lt;tt&gt;matrix.zAssignXXXNeighbors(...)&lt;/tt&gt;.
 * You can specify how many iterations shall at most be done, a convergence condition when iteration shall be terminated, and how many iterations shall pass between convergence checks.
 * Always does two iterations at a time for efficiency.
 * These class is for convencience and efficiency.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 01/02/2000</version>
  </javadoc>
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="Stencil" />
  <javadoc>
    <text>27 point stencil operation.
 * Applies a function to a moving &lt;tt&gt;3 x 3 x 3&lt;/tt&gt; window.</text>
    <param>A the matrix to operate on.</param>
    <param>function the function to be applied to each window.</param>
    <param>maxIterations the maximum number of times the stencil shall be applied to the matrix. 
 * Should be a multiple of 2 because two iterations are always done in one atomic step.</param>
    <param>hasConverged Convergence condition; will return before maxIterations are done when &lt;tt&gt;hasConverged.apply(A)==true&lt;/tt&gt;.
 * Set this parameter to &lt;tt&gt;null&lt;/tt&gt; to indicate that no convergence checks shall be made.</param>
    <param>convergenceIterations the number of iterations to pass between each convergence check.
 * (Since a convergence may be expensive, you may want to do it only every 2,4 or 8 iterations.)</param>
    <return>the number of iterations actually executed.</return>
  </javadoc>
  <method type="int" name="stencil27">
    <declaration type="DoubleMatrix3D" name="B" />
    <declaration type="int" name="i" />
    <scope>
      <scope />
    </scope>
    <comment>odd -&gt; make it even</comment>
    <comment>do two steps at a time for efficiency</comment>
  </method>
  <javadoc>
    <text>9 point stencil operation.
 * Applies a function to a moving &lt;tt&gt;3 x 3&lt;/tt&gt; window.</text>
    <param>A the matrix to operate on.</param>
    <param>function the function to be applied to each window.</param>
    <param>maxIterations the maximum number of times the stencil shall be applied to the matrix. 
 * Should be a multiple of 2 because two iterations are always done in one atomic step.</param>
    <param>hasConverged Convergence condition; will return before maxIterations are done when &lt;tt&gt;hasConverged.apply(A)==true&lt;/tt&gt;.
 * Set this parameter to &lt;tt&gt;null&lt;/tt&gt; to indicate that no convergence checks shall be made.</param>
    <param>convergenceIterations the number of iterations to pass between each convergence check.
 * (Since a convergence may be expensive, you may want to do it only every 2,4 or 8 iterations.)</param>
    <return>the number of iterations actually executed.</return>
  </javadoc>
  <method type="int" name="stencil9">
    <declaration type="DoubleMatrix2D" name="B" />
    <declaration type="int" name="i" />
    <scope>
      <scope />
    </scope>
    <comment>odd -&gt; make it even</comment>
    <comment>do two steps at a time for efficiency</comment>
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
