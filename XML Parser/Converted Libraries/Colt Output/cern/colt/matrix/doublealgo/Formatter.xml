<?xml version="1.0" encoding="UTF-8"?>
<class name="Formatter">
  <javadoc>
    <text>Flexible, well human readable matrix print formatting; By default decimal point aligned. Build on top of the C-like &lt;i&gt;sprintf&lt;/i&gt; functionality 
 * provided by the {@link corejava.Format} class written by Cay Horstmann.
 * Currenly works on 1-d, 2-d and 3-d matrices.
 * Note that in most cases you will not need to get familiar with this class; just call &lt;tt&gt;matrix.toString()&lt;/tt&gt; and be happy with the default formatting.
 * This class is for advanced requirements.
 * &lt;p&gt; Can't exactly remember the syntax of printf format strings? See {@link corejava.Format} 
 * or &lt;a href="http://www.braju.com/docs/index.html"&gt;Henrik 
 * Nordberg's documentation&lt;/a&gt;, or the &lt;a href="http://www.dinkumware.com/htm_cl/lib_prin.html#Print%20Functions"&gt;Dinkumware's 
 * C Library Reference&lt;/a&gt;.
 * &lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;
 * &lt;p&gt;
 * Examples demonstrate usage on 2-d matrices. 1-d and 3-d matrices formatting works very similar.
 * &lt;table border="1" cellspacing="0"&gt;
 * &lt;tr align="center"&gt; 
 * &lt;td&gt;Original matrix&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt; 
 * &lt;td&gt; 
 * &lt;p&gt;&lt;tt&gt;double[][] values = {&lt;br&gt;
 * {3, 0, -3.4, 0},&lt;br&gt;
 * {5.1 ,0, +3.0123456789, 0}, &lt;br&gt;
 * {16.37, 0.0, 2.5, 0}, &lt;br&gt;
 * {-16.3, 0, -3.012345678E-4, -1},&lt;br&gt;
 * {1236.3456789, 0, 7, -1.2}&lt;br&gt;
 * };&lt;br&gt;
 * matrix = new DenseDoubleMatrix2D(values);&lt;/tt&gt;&lt;/p&gt;
 * &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;
 * &lt;p&gt;&amp;nbsp;&lt;/p&gt;
 * &lt;table border="1" cellspacing="0"&gt;
 * &lt;tr align="center"&gt; 
 * &lt;td&gt;&lt;tt&gt;format&lt;/tt&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;&lt;tt&gt;Formatter.toString(matrix);&lt;/tt&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;&lt;tt&gt;Formatter.toSourceCode(matrix);&lt;/tt&gt;&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt; 
 * &lt;td&gt;&lt;tt&gt;%G &lt;/tt&gt;&lt;br&gt;
 * (default)&lt;/td&gt;
 * &lt;td align="left" valign="top"&gt;&lt;tt&gt;5&amp;nbsp;x&amp;nbsp;4&amp;nbsp;matrix&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;-3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;3.012346&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;16.37&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * &amp;nbsp;-16.3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;-0.000301&amp;nbsp;-1&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * 1236.345679&amp;nbsp;0&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-1.2 
 * &lt;/tt&gt;&lt;/td&gt;
 * &lt;td align="left" valign="top"&gt;&lt;tt&gt;{&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0,&amp;nbsp;-3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0,&amp;nbsp;&amp;nbsp;3.012346,&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;16.37&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0,&amp;nbsp;&amp;nbsp;2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;-16.3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0,&amp;nbsp;-0.000301,&amp;nbsp;-1&amp;nbsp;&amp;nbsp;},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{1236.345679,&amp;nbsp;0,&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;-1.2}&lt;br&gt;
 * }; &lt;/tt&gt;&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt; 
 * &lt;td&gt;&lt;tt&gt;%1.10G&lt;/tt&gt;&lt;/td&gt;
 * &lt;td align="left" valign="top"&gt;&lt;tt&gt;5&amp;nbsp;x&amp;nbsp;4&amp;nbsp;matrix&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;-3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;3.0123456789&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;16.37&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * &amp;nbsp;-16.3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0&amp;nbsp;-0.0003012346&amp;nbsp;-1&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * 1236.3456789&amp;nbsp;0&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-1.2 
 * &lt;/tt&gt;&lt;/td&gt;
 * &lt;td align="left" valign="top"&gt;&lt;tt&gt;{&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0,&amp;nbsp;-3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0,&amp;nbsp;&amp;nbsp;3.0123456789,&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;16.37&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0,&amp;nbsp;&amp;nbsp;2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;0&amp;nbsp;&amp;nbsp;},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;-16.3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0,&amp;nbsp;-0.0003012346,&amp;nbsp;-1&amp;nbsp;&amp;nbsp;},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{1236.3456789,&amp;nbsp;0,&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;-1.2}&lt;br&gt;
 * }; &lt;/tt&gt;&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt; 
 * &lt;td&gt;&lt;tt&gt;%f&lt;/tt&gt;&lt;/td&gt;
 * &lt;td align="left" valign="top"&gt; &lt;tt&gt; 5&amp;nbsp;x&amp;nbsp;4&amp;nbsp;matrix&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;3.000000&amp;nbsp;0.000000&amp;nbsp;-3.400000&amp;nbsp;&amp;nbsp;0.000000&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;5.100000&amp;nbsp;0.000000&amp;nbsp;&amp;nbsp;3.012346&amp;nbsp;&amp;nbsp;0.000000&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;16.370000&amp;nbsp;0.000000&amp;nbsp;&amp;nbsp;2.500000&amp;nbsp;&amp;nbsp;0.000000&lt;br&gt;
 * &amp;nbsp;-16.300000&amp;nbsp;0.000000&amp;nbsp;-0.000301&amp;nbsp;-1.000000&lt;br&gt;
 * 1236.345679&amp;nbsp;0.000000&amp;nbsp;&amp;nbsp;7.000000&amp;nbsp;-1.200000 &lt;/tt&gt; &lt;/td&gt;
 * &lt;td align="left" valign="top"&gt;&lt;tt&gt; {&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;3.000000,&amp;nbsp;0.000000,&amp;nbsp;-3.400000,&amp;nbsp;&amp;nbsp;0.000000},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;5.100000,&amp;nbsp;0.000000,&amp;nbsp;&amp;nbsp;3.012346,&amp;nbsp;&amp;nbsp;0.000000},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;16.370000,&amp;nbsp;0.000000,&amp;nbsp;&amp;nbsp;2.500000,&amp;nbsp;&amp;nbsp;0.000000},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;-16.300000,&amp;nbsp;0.000000,&amp;nbsp;-0.000301,&amp;nbsp;-1.000000},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{1236.345679,&amp;nbsp;0.000000,&amp;nbsp;&amp;nbsp;7.000000,&amp;nbsp;-1.200000}&lt;br&gt;
 * }; &lt;/tt&gt; &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt; 
 * &lt;td&gt;&lt;tt&gt;%1.2f&lt;/tt&gt;&lt;/td&gt;
 * &lt;td align="left" valign="top"&gt;&lt;tt&gt;5&amp;nbsp;x&amp;nbsp;4&amp;nbsp;matrix&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;3.00&amp;nbsp;0.00&amp;nbsp;-3.40&amp;nbsp;&amp;nbsp;0.00&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;5.10&amp;nbsp;0.00&amp;nbsp;&amp;nbsp;3.01&amp;nbsp;&amp;nbsp;0.00&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;16.37&amp;nbsp;0.00&amp;nbsp;&amp;nbsp;2.50&amp;nbsp;&amp;nbsp;0.00&lt;br&gt;
 * &amp;nbsp;-16.30&amp;nbsp;0.00&amp;nbsp;-0.00&amp;nbsp;-1.00&lt;br&gt;
 * 1236.35&amp;nbsp;0.00&amp;nbsp;&amp;nbsp;7.00&amp;nbsp;-1.20 &lt;/tt&gt;&lt;/td&gt;
 * &lt;td align="left" valign="top"&gt;&lt;tt&gt;{&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;3.00,&amp;nbsp;0.00,&amp;nbsp;-3.40,&amp;nbsp;&amp;nbsp;0.00},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;5.10,&amp;nbsp;0.00,&amp;nbsp;&amp;nbsp;3.01,&amp;nbsp;&amp;nbsp;0.00},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;16.37,&amp;nbsp;0.00,&amp;nbsp;&amp;nbsp;2.50,&amp;nbsp;&amp;nbsp;0.00},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;-16.30,&amp;nbsp;0.00,&amp;nbsp;-0.00,&amp;nbsp;-1.00},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{1236.35,&amp;nbsp;0.00,&amp;nbsp;&amp;nbsp;7.00,&amp;nbsp;-1.20}&lt;br&gt;
 * }; &lt;/tt&gt;&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt; 
 * &lt;td&gt;&lt;tt&gt;%0.2e&lt;/tt&gt;&lt;/td&gt;
 * &lt;td align="left" valign="top"&gt;&lt;tt&gt;5&amp;nbsp;x&amp;nbsp;4&amp;nbsp;matrix&lt;br&gt;
 * &amp;nbsp;3.00e+000&amp;nbsp;0.00e+000&amp;nbsp;-3.40e+000&amp;nbsp;&amp;nbsp;0.00e+000&lt;br&gt;
 * &amp;nbsp;5.10e+000&amp;nbsp;0.00e+000&amp;nbsp;&amp;nbsp;3.01e+000&amp;nbsp;&amp;nbsp;0.00e+000&lt;br&gt;
 * &amp;nbsp;1.64e+001&amp;nbsp;0.00e+000&amp;nbsp;&amp;nbsp;2.50e+000&amp;nbsp;&amp;nbsp;0.00e+000&lt;br&gt;
 * -1.63e+001&amp;nbsp;0.00e+000&amp;nbsp;-3.01e-004&amp;nbsp;-1.00e+000&lt;br&gt;
 * &amp;nbsp;1.24e+003&amp;nbsp;0.00e+000&amp;nbsp;&amp;nbsp;7.00e+000&amp;nbsp;-1.20e+000 &lt;/tt&gt;&lt;/td&gt;
 * &lt;td align="left" valign="top"&gt;&lt;tt&gt;{&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;3.00e+000,&amp;nbsp;0.00e+000,&amp;nbsp;-3.40e+000,&amp;nbsp;&amp;nbsp;0.00e+000},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;5.10e+000,&amp;nbsp;0.00e+000,&amp;nbsp;&amp;nbsp;3.01e+000,&amp;nbsp;&amp;nbsp;0.00e+000},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;1.64e+001,&amp;nbsp;0.00e+000,&amp;nbsp;&amp;nbsp;2.50e+000,&amp;nbsp;&amp;nbsp;0.00e+000},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{-1.63e+001,&amp;nbsp;0.00e+000,&amp;nbsp;-3.01e-004,&amp;nbsp;-1.00e+000},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;1.24e+003,&amp;nbsp;0.00e+000,&amp;nbsp;&amp;nbsp;7.00e+000,&amp;nbsp;-1.20e+000}&lt;br&gt;
 * }; &lt;/tt&gt;&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt; 
 * &lt;td&gt;&lt;tt&gt;null&lt;/tt&gt;&lt;/td&gt;
 * &lt;td align="left" valign="top"&gt;&lt;tt&gt;5&amp;nbsp;x&amp;nbsp;4&amp;nbsp;matrix &lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;3.0&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0.0&amp;nbsp;-3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0.0&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0.0&amp;nbsp;&amp;nbsp;3.0123456789&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0.0&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;16.37&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0.0&amp;nbsp;&amp;nbsp;2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0.0&lt;br&gt;
 * &amp;nbsp;-16.3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;0.0&amp;nbsp;-3.012345678E-4&amp;nbsp;-1.0&lt;br&gt;
 * 1236.3456789&amp;nbsp;0.0&amp;nbsp;&amp;nbsp;7.0&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-1.2 
 * &lt;/tt&gt; &lt;tt&gt; &lt;/tt&gt;&lt;/td&gt;
 * &lt;td align="left" valign="top"&gt;&lt;tt&gt; {&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;3.0&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0.0,&amp;nbsp;-3.4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;0.0},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;&amp;nbsp;5.1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0.0,&amp;nbsp;&amp;nbsp;3.0123456789&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;0.0},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&amp;nbsp;16.37&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0.0,&amp;nbsp;&amp;nbsp;2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;&amp;nbsp;0.0},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;-16.3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;0.0,&amp;nbsp;-3.012345678E-4,&amp;nbsp;-1.0},&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;{1236.3456789,&amp;nbsp;0.0,&amp;nbsp;&amp;nbsp;7.0&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;,&amp;nbsp;-1.2}&lt;br&gt;
 * }; &lt;/tt&gt; &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;
 * &lt;p&gt;Here are some more elaborate examples, adding labels for axes, rows, columns, 
 * title and some statistical aggregations.&lt;/p&gt;
 * &lt;table border="1" cellspacing="0"&gt;
 * &lt;tr&gt; 
 * &lt;td nowrap&gt; 
 * &lt;p&gt;&lt;tt&gt; double[][] values = {&lt;br&gt;
 * {5 ,10, 20, 40 },&lt;br&gt;
 * { 7, 8 , 6 , 7 },&lt;br&gt;
 * {12 ,10, 20, 19 },&lt;br&gt;
 * { 3, 1 , 5 , 6 }&lt;br&gt;
 * }; &lt;br&gt;
 * &lt;/tt&gt;&lt;tt&gt;String title = "CPU performance over time [nops/sec]";&lt;br&gt;
 * String columnAxisName = "Year";&lt;br&gt;
 * String rowAxisName = "CPU"; &lt;br&gt;
 * String[] columnNames = {"1996", "1997", "1998", "1999"};&lt;br&gt;
 * String[] rowNames = { "PowerBar", "Benzol", "Mercedes", "Sparcling"};&lt;br&gt;
 * hep.aida.bin.BinFunctions1D F = hep.aida.bin.BinFunctions1D.functions; // alias&lt;br&gt;
 * hep.aida.bin.BinFunction1D[] aggr = {F.mean, F.rms, F.quantile(0.25), F.median, F.quantile(0.75), F.stdDev, F.min, F.max};&lt;br&gt;
 * String format = "%1.2G";&lt;br&gt;
 * DoubleMatrix2D matrix = new DenseDoubleMatrix2D(values); &lt;br&gt;
 * new Formatter(format).toTitleString(&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;matrix,rowNames,columnNames,rowAxisName,columnAxisName,title,aggr); &lt;/tt&gt; 
 * &lt;/p&gt;
 * &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt; 
 * &lt;td&gt;&lt;tt&gt;
 * CPU&amp;nbsp;performance&amp;nbsp;over&amp;nbsp;time&amp;nbsp;[nops/sec]&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;Year&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;1996&amp;nbsp;&amp;nbsp;1997&amp;nbsp;&amp;nbsp;1998&amp;nbsp;&amp;nbsp;1999&amp;nbsp;&amp;nbsp;|&amp;nbsp;Mean&amp;nbsp;&amp;nbsp;RMS&amp;nbsp;&amp;nbsp;&amp;nbsp;25%&amp;nbsp;Q.&amp;nbsp;Median&amp;nbsp;75%&amp;nbsp;Q.&amp;nbsp;StdDev&amp;nbsp;Min&amp;nbsp;Max&lt;br&gt;
 * ---------------------------------------------------------------------------------------&lt;br&gt;
 * C&amp;nbsp;PowerBar&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;10&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;20&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;40&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;18.75&amp;nbsp;23.05&amp;nbsp;&amp;nbsp;8.75&amp;nbsp;&amp;nbsp;15&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;25&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;15.48&amp;nbsp;&amp;nbsp;&amp;nbsp;5&amp;nbsp;&amp;nbsp;40&amp;nbsp;&lt;br&gt;
 * P&amp;nbsp;Benzol&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;7.04&amp;nbsp;&amp;nbsp;6.75&amp;nbsp;&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;7.25&amp;nbsp;&amp;nbsp;&amp;nbsp;0.82&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&amp;nbsp;&amp;nbsp;8&amp;nbsp;&lt;br&gt;
 * U&amp;nbsp;Mercedes&amp;nbsp;&amp;nbsp;|&amp;nbsp;12&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;10&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;20&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;19&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;15.25&amp;nbsp;15.85&amp;nbsp;11.5&amp;nbsp;&amp;nbsp;&amp;nbsp;15.5&amp;nbsp;&amp;nbsp;&amp;nbsp;19.25&amp;nbsp;&amp;nbsp;&amp;nbsp;4.99&amp;nbsp;&amp;nbsp;10&amp;nbsp;&amp;nbsp;20&amp;nbsp;&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;Sparcling&amp;nbsp;|&amp;nbsp;&amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;3.75&amp;nbsp;&amp;nbsp;4.21&amp;nbsp;&amp;nbsp;2.5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5.25&amp;nbsp;&amp;nbsp;&amp;nbsp;2.22&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&lt;br&gt;
 * ---------------------------------------------------------------------------------------&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;Mean&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;6.75&amp;nbsp;&amp;nbsp;7.25&amp;nbsp;12.75&amp;nbsp;18&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;RMS&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;7.53&amp;nbsp;&amp;nbsp;8.14&amp;nbsp;14.67&amp;nbsp;22.62&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;25%&amp;nbsp;Q.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;4.5&amp;nbsp;&amp;nbsp;&amp;nbsp;6.25&amp;nbsp;&amp;nbsp;5.75&amp;nbsp;&amp;nbsp;6.75&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;Median&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;6&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;9&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;13&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;13&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;75%&amp;nbsp;Q.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;8.25&amp;nbsp;10&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;20&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;24.25&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;StdDev&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;3.86&amp;nbsp;&amp;nbsp;4.27&amp;nbsp;&amp;nbsp;8.38&amp;nbsp;15.81&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;Min&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;Max&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;12&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;10&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;20&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;19&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
 * &lt;/tt&gt;
 * &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt; 
 * &lt;td nowrap&gt;&lt;tt&gt; same as above, but now without aggregations&lt;br&gt;
 * aggr=null; &lt;/tt&gt; &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt; 
 * &lt;td&gt;&lt;tt&gt; CPU&amp;nbsp;performance&amp;nbsp;over&amp;nbsp;time&amp;nbsp;[nops/sec]&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;Year&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;1996&amp;nbsp;1997&amp;nbsp;1998&amp;nbsp;1999&lt;br&gt;
 * ---------------------------------&lt;br&gt;
 * C&amp;nbsp;PowerBar&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;5&amp;nbsp;&amp;nbsp;&amp;nbsp;10&amp;nbsp;&amp;nbsp;&amp;nbsp;20&amp;nbsp;&amp;nbsp;&amp;nbsp;40&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * P&amp;nbsp;Benzol&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * U&amp;nbsp;Mercedes&amp;nbsp;&amp;nbsp;|&amp;nbsp;12&amp;nbsp;&amp;nbsp;&amp;nbsp;10&amp;nbsp;&amp;nbsp;&amp;nbsp;20&amp;nbsp;&amp;nbsp;&amp;nbsp;19&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * &amp;nbsp;&amp;nbsp;Sparcling&amp;nbsp;|&amp;nbsp;&amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&amp;nbsp; 
 * &lt;/tt&gt; &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt; 
 * &lt;td nowrap&gt;
 * &lt;p&gt;&lt;tt&gt; same as above, but now without rows labeled&lt;br&gt;
 * aggr=null;&lt;br&gt;
 * rowNames=null;&lt;br&gt;
 * rowAxisName=null; &lt;/tt&gt; &lt;/p&gt;
 * &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt; 
 * &lt;td&gt;&lt;tt&gt;
 * CPU&amp;nbsp;performance&amp;nbsp;over&amp;nbsp;time&amp;nbsp;[nops/sec]&lt;br&gt;
 * Year&lt;br&gt;
 * 1996&amp;nbsp;1997&amp;nbsp;1998&amp;nbsp;1999&lt;br&gt;
 * -------------------&lt;br&gt;
 * &amp;nbsp;5&amp;nbsp;&amp;nbsp;&amp;nbsp;10&amp;nbsp;&amp;nbsp;&amp;nbsp;20&amp;nbsp;&amp;nbsp;&amp;nbsp;40&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * &amp;nbsp;7&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;7&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * 12&amp;nbsp;&amp;nbsp;&amp;nbsp;10&amp;nbsp;&amp;nbsp;&amp;nbsp;20&amp;nbsp;&amp;nbsp;&amp;nbsp;19&amp;nbsp;&amp;nbsp;&lt;br&gt;
 * &amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&amp;nbsp;
 * &lt;/tt&gt;
 * &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;
 * &lt;p&gt;A column can be broader than specified by the parameter &lt;tt&gt;minColumnWidth&lt;/tt&gt; 
 * (because a cell may not fit into that width) but a column is never smaller than 
 * &lt;tt&gt;minColumnWidth&lt;/tt&gt;. Normally one does not need to specify &lt;tt&gt;minColumnWidth&lt;/tt&gt; 
 * (default is &lt;tt&gt;1&lt;/tt&gt;). This parameter is only interesting when wanting to 
 * print two distinct matrices such that both matrices have the same column width, 
 * for example, to make it easier to see which column of matrix A corresponds to 
 * which column of matrix B.&lt;/p&gt;
 * &lt;p&gt;&lt;b&gt;Implementation:&lt;/b&gt;&lt;/p&gt;
 * &lt;p&gt;Note that this class is by no means ment to be used for high performance I/O (serialization is much quicker).
 * It is ment to produce well human readable output.&lt;/p&gt;
 * &lt;p&gt;Analyzes the entire matrix before producing output. Each cell is converted 
 * to a String as indicated by the given C-like format string. If &lt;tt&gt;null&lt;/tt&gt; 
 * is passed as format string, {@link java.lang.Double#toString(double)} is used 
 * instead, yielding full precision.&lt;/p&gt;
 * &lt;p&gt;Next, leading and trailing whitespaces are removed. For each column the maximum number of characters before 
 * and after the decimal point is determined. (No problem if decimal points are 
 * missing). Each cell is then padded with leading and trailing blanks, as necessary 
 * to achieve decimal point aligned, left justified formatting.&lt;/p&gt;</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.2, 11/30/99</version>
  </javadoc>
  <javadoc>
    <text>Constructs and returns a matrix formatter with format &lt;tt&gt;"%G"&lt;/tt&gt;.</text>
  </javadoc>
  <method type="constructor" name="Formatter" />
  <javadoc>
    <text>Constructs and returns a matrix formatter.</text>
    <param>format the given format used to convert a single cell value.</param>
  </javadoc>
  <method type="constructor" name="Formatter" />
  <javadoc>
    <text>Demonstrates how to use this class.</text>
  </javadoc>
  <method type="void" name="demo1">
    <declaration type="double[][]" name="values" />
    <declaration type="String[]" name="formats" />
    <declaration type="int" name="size" />
    <declaration type="DoubleMatrix2D" name="matrix" />
    <declaration type="String[]" name="strings" />
    <declaration type="String[]" name="sourceCodes" />
    <declaration type="String[]" name="htmlStrings" />
    <declaration type="String[]" name="htmlSourceCodes" />
    <scope>
      <declaration type="String" name="format" />
    </scope>
    <scope />
    <scope />
    <comment>parameters</comment>
    <comment>now the processing</comment>
    <comment>may not compile because of packages not included in the distribution</comment>
    <comment>htmlStrings[i] = cern.colt.matrixpattern.Converting.toHTML(strings[i]);</comment>
    <comment>htmlSourceCodes[i] = cern.colt.matrixpattern.Converting.toHTML(sourceCodes[i]);</comment>
    <comment>may not compile because of packages not included in the distribution</comment>
    <comment>System.out.println("\nhtmlString("+formats[i]+"):\n"+htmlStrings[i]);</comment>
    <comment>System.out.println("\nhtmlSourceCode("+formats[i]+"):\n"+htmlSourceCodes[i]);</comment>
  </method>
  <javadoc>
    <text>Demonstrates how to use this class.</text>
  </javadoc>
  <method type="void" name="demo2">
    <declaration type="double[]" name="values" />
    <declaration type="String[]" name="formats" />
    <declaration type="int" name="size" />
    <declaration type="DoubleMatrix1D" name="matrix" />
    <declaration type="String[]" name="strings" />
    <scope>
      <declaration type="String" name="format" />
      <scope />
    </scope>
    <scope />
    <comment>parameters</comment>
    <comment>5, 0.0, -0.0, -Double.NaN, Double.NaN, 0.0/0.0, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.MIN_VALUE, Double.MAX_VALUE</comment>
    <comment>Double.MIN_VALUE, Double.MAX_VALUE , Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY</comment>
    <comment>String[] formats =         {"%G", "%1.10G", "%f", "%1.2f", "%0.2e"};</comment>
    <comment>now the processing</comment>
    <comment>String[] javaStrings = new String[size];</comment>
  </method>
  <javadoc>
    <text>Demonstrates how to use this class.</text>
  </javadoc>
  <method type="void" name="demo3">
    <declaration type="cern.colt.Timer" name="timer" />
    <declaration type="String" name="s" />
    <declaration type="StringBuffer" name="buf" />
    <declaration type="DoubleMatrix2D" name="matrix" />
    <scope>
      <scope />
    </scope>
    <declaration type="cern.colt.matrix.impl.Former" name="format" />
    <scope>
      <scope />
    </scope>
    <comment>System.out.println(s);</comment>
    <comment>System.out.println(s);</comment>
  </method>
  <javadoc>
    <text>Demonstrates how to use this class.</text>
  </javadoc>
  <method type="void" name="demo4">
    <declaration type="double[][]" name="values" />
    <declaration type="String[]" name="columnNames" />
    <declaration type="String[]" name="rowNames" />
    <declaration type="DoubleMatrix2D" name="matrix" />
    <comment>parameters</comment>
    <comment>double[][] values = {
{3,     1,      },
{5.1   ,16.37,  }
};</comment>
    <comment>String[] columnNames = { "he",   "",  "he", "four" };</comment>
    <comment>String[] rowNames = { "hello", "du", null, "abcdef", "five" };</comment>
    <comment>String[] columnNames = { "0.1", "0.3" };</comment>
    <comment>String[] rowNames = { "SunJDK1.2.2 classic", "IBMJDK1.1.8"};</comment>
  </method>
  <javadoc>
    <text>Demonstrates how to use this class.</text>
  </javadoc>
  <method type="void" name="demo5">
    <declaration type="double[][]" name="values" />
    <declaration type="String[]" name="columnNames" />
    <declaration type="String[]" name="rowNames" />
    <comment>parameters</comment>
    <comment>double[][] values = {
{3,     1,      },
{5.1   ,16.37,  }
};</comment>
    <comment>String[] columnNames = { "he",   "",  "he", "four" };</comment>
    <comment>String[] rowNames = { "hello", "du", null, "abcdef", "five" };</comment>
    <comment>String[] columnNames = { "0.1", "0.3" };</comment>
    <comment>String[] rowNames = { "SunJDK1.2.2 classic", "IBMJDK1.1.8"};</comment>
  </method>
  <javadoc>
    <text>Demonstrates how to use this class.</text>
  </javadoc>
  <method type="void" name="demo6">
    <declaration type="double[][]" name="values" />
    <declaration type="String[]" name="columnNames" />
    <declaration type="String[]" name="rowNames" />
    <comment>parameters</comment>
    <comment>double[][] values = {
{3,     1,      },
{5.1   ,16.37,  }
};</comment>
    <comment>String[] columnNames = { "he",   "",  "he", "four" };</comment>
    <comment>String[] rowNames = { "hello", "du", null, "abcdef", "five" };</comment>
    <comment>String[] columnNames = { "0.1", "0.3", "0.5", "0.7" };</comment>
    <comment>String[] columnNames = { "0.1", "0.3" };</comment>
    <comment>String[] rowNames = { "SunJDK1.2.2 classic", "IBMJDK1.1.8"};</comment>
    <comment>System.out.println(cern.colt.matrix.DoubleFactory2D.dense.make(values));</comment>
    <comment>System.out.println(new Formatter().toSourceCode(cern.colt.matrix.DoubleFactory2D.dense.make(values)));</comment>
  </method>
  <javadoc>
    <text>Demonstrates how to use this class.</text>
  </javadoc>
  <method type="void" name="demo7">
    <declaration type="double[][]" name="values" />
    <declaration type="String[]" name="columnNames" />
    <declaration type="String[]" name="rowNames" />
    <declaration type="String" name="rowAxisName" />
    <declaration type="String" name="columnAxisName" />
    <declaration type="String" name="title" />
    <declaration type="hep.aida.bin.BinFunctions1D" name="F" />
    <declaration type="hep.aida.bin.BinFunction1D[]" name="aggr" />
    <declaration type="String" name="format" />
    <comment>parameters</comment>
    <comment>double[][] values = {
{3,     0,        -3.4, 0},
{5.1   ,0,        +3.0123456789, 0},
{16.37, 0.0,       2.5, 0},
{-16.3, 0,        -3.012345678E-4, -1},
{1236.3456789, 0,  7, -1.2}
};</comment>
    <comment>String[] columnNames = { "W", "X", "Y", "Z", "mean", "median", "sum"};</comment>
    <comment>String[] rowNames = { "SunJDK1.2.2 classic", "IBMJDK1.1.8", "SunJDK1.3 Hotspot", "other1", "other2", "mean", "median", "sum" };</comment>
    <comment>hep.aida.bin.BinFunction1D[] aggr = {F.mean, F.median, F.sum};</comment>
    <comment>System.out.println(cern.colt.matrix.DoubleFactory2D.dense.make(values));</comment>
    <comment>System.out.println(new Formatter().toSourceCode(cern.colt.matrix.DoubleFactory2D.dense.make(values)));</comment>
    <comment>System.out.println(new Formatter().toString(cern.colt.matrix.DoubleFactory2D.dense.make(values)));</comment>
    <comment>System.out.println(new Formatter().toTitleString(cern.colt.matrix.DoubleFactory2D.dense.make(values),rowNames,columnNames,rowAxisName,columnAxisName,title));</comment>
    <comment>System.out.println(cern.colt.matrixpattern.Converting.toHTML(new Formatter(format).toTitleString(cern.colt.matrix.DoubleFactory2D.dense.make(values),rowNames,columnNames,rowAxisName,columnAxisName,title, aggr)));</comment>
  </method>
  <javadoc>
    <text>Converts a given cell to a String; no alignment considered.</text>
  </javadoc>
  <method type="String" name="form" />
  <javadoc>
    <text>Converts a given cell to a String; no alignment considered.</text>
  </javadoc>
  <method type="String" name="form" />
  <javadoc>
    <text>Returns a string representations of all cells; no alignment considered.</text>
  </javadoc>
  <method type="String[][]" name="format">
    <declaration type="String[][]" name="strings" />
  </method>
  <javadoc>
    <text>Returns a string representations of all cells; no alignment considered.</text>
  </javadoc>
  <method type="String[][]" name="format" />
  <javadoc>
    <text>Returns the index of the decimal point.</text>
  </javadoc>
  <method type="int" name="indexOfDecimalPoint">
    <declaration type="int" name="i" />
  </method>
  <javadoc>
    <text>Returns the number of characters before the decimal point.</text>
  </javadoc>
  <method type="int" name="lead" />
  <javadoc>
    <text>Returns a string &lt;tt&gt;s&lt;/tt&gt; such that &lt;tt&gt;Object[] m = s&lt;/tt&gt; is a legal Java statement.</text>
    <param>matrix the matrix to format.</param>
  </javadoc>
  <method type="String" name="toSourceCode">
    <declaration type="Formatter" name="copy" />
    <declaration type="String" name="lead" />
    <declaration type="String" name="trail" />
  </method>
  <javadoc>
    <text>Returns a string &lt;tt&gt;s&lt;/tt&gt; such that &lt;tt&gt;Object[] m = s&lt;/tt&gt; is a legal Java statement.</text>
    <param>matrix the matrix to format.</param>
  </javadoc>
  <method type="String" name="toSourceCode">
    <declaration type="Formatter" name="copy" />
    <declaration type="String" name="b3" />
    <declaration type="String" name="lead" />
    <declaration type="String" name="trail" />
  </method>
  <javadoc>
    <text>Returns a string &lt;tt&gt;s&lt;/tt&gt; such that &lt;tt&gt;Object[] m = s&lt;/tt&gt; is a legal Java statement.</text>
    <param>matrix the matrix to format.</param>
  </javadoc>
  <method type="String" name="toSourceCode">
    <declaration type="Formatter" name="copy" />
    <declaration type="String" name="b3" />
    <declaration type="String" name="b6" />
    <declaration type="String" name="lead" />
    <declaration type="String" name="trail" />
  </method>
  <javadoc>
    <text>Returns a string representation of the given matrix.</text>
    <param>matrix the matrix to convert.</param>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="DoubleMatrix2D" name="easy" />
  </method>
  <javadoc>
    <text>Returns a string representation of the given matrix.</text>
    <param>matrix the matrix to convert.</param>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>Returns a string representation of the given matrix.</text>
    <param>matrix the matrix to convert.</param>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuffer" name="buf" />
    <declaration type="boolean" name="oldPrintShape" />
    <scope />
  </method>
  <javadoc>
    <text>Returns a string representation of the given matrix.</text>
    <param>matrix the matrix to convert.</param>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>Returns a string representation of the given matrix with axis as well as rows and columns labeled.
 * Pass &lt;tt&gt;null&lt;/tt&gt; to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.</text>
    <param>matrix The matrix to format.</param>
    <param>rowNames The headers of all rows (to be put to the left of the matrix).</param>
    <param>columnNames The headers of all columns (to be put to above the matrix).</param>
    <param>rowAxisName The label of the y-axis.</param>
    <param>columnAxisName The label of the x-axis.</param>
    <param>title The overall title of the matrix to be formatted.</param>
    <return>the matrix converted to a string.</return>
  </javadoc>
  <method type="String" name="toTitleString">
    <declaration type="String[][]" name="s" />
    <comment>String oldAlignment = this.alignment;</comment>
    <comment>this.alignment = DECIMAL;</comment>
    <comment>this.alignment = oldAlignment;</comment>
  </method>
  <javadoc>
    <text>Same as &lt;tt&gt;toTitleString&lt;/tt&gt; except that additionally statistical aggregates (mean, median, sum, etc.) of rows and columns are printed.
 * Pass &lt;tt&gt;null&lt;/tt&gt; to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.</text>
    <param>matrix The matrix to format.</param>
    <param>rowNames The headers of all rows (to be put to the left of the matrix).</param>
    <param>columnNames The headers of all columns (to be put to above the matrix).</param>
    <param>rowAxisName The label of the y-axis.</param>
    <param>columnAxisName The label of the x-axis.</param>
    <param>title The overall title of the matrix to be formatted.</param>
    <param>aggr the aggregation functions to be applied to columns and rows.</param>
    <return>the matrix converted to a string.</return>
    <see>hep.aida.bin.BinFunction1D</see>
    <see>hep.aida.bin.BinFunctions1D</see>
  </javadoc>
  <method type="String" name="toTitleString">
    <declaration type="DoubleMatrix2D" name="rowStats" />
    <declaration type="DoubleMatrix2D" name="colStats" />
    <declaration type="DoubleMatrix2D" name="tmp" />
    <declaration type="String[][]" name="s1" />
    <declaration type="String[][]" name="s2" />
    <declaration type="cern.colt.matrix.ObjectMatrix2D" name="allStats" />
    <scope>
      <declaration type="cern.colt.list.ObjectArrayList" name="list" />
    </scope>
    <scope>
      <declaration type="cern.colt.list.ObjectArrayList" name="list" />
    </scope>
    <declaration type="String" name="s" />
    <declaration type="int" name="last" />
    <declaration type="int" name="secondLast" />
    <declaration type="int" name="v" />
    <scope />
    <declaration type="StringBuffer" name="buf" />
    <comment>hold row aggregations</comment>
    <comment>hold column aggregations</comment>
    <comment>aggregate an entire column at a time</comment>
    <comment>aggregate an entire row at a time</comment>
    <comment>turn into strings</comment>
    <comment>tmp holds "matrix" plus "colStats" below (needed so that numbers in a columns can be decimal point aligned)</comment>
    <comment>copy strings into a large matrix holding the source matrix and all aggregations</comment>
    <comment>append a vertical "|" separator plus names of aggregation functions to line holding columnNames</comment>
    <comment>add names of aggregation functions</comment>
    <comment>append names of aggregation functions to line holding rowNames</comment>
    <comment>add names of aggregation functions</comment>
    <comment>turn large matrix into string</comment>
    <comment>insert a horizontal "----------------------" separation line above the column stats</comment>
    <comment>determine insertion position and line width</comment>
    <comment>scan "aggr.length+1+v" lines backwards</comment>
  </method>
  <javadoc>
    <text>Returns a string representation of the given matrix with axis as well as rows and columns labeled.
 * Pass &lt;tt&gt;null&lt;/tt&gt; to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.</text>
    <param>matrix The matrix to format.</param>
    <param>sliceNames The headers of all slices (to be put above each slice).</param>
    <param>rowNames The headers of all rows (to be put to the left of the matrix).</param>
    <param>columnNames The headers of all columns (to be put to above the matrix).</param>
    <param>sliceAxisName The label of the z-axis (to be put above each slice).</param>
    <param>rowAxisName The label of the y-axis.</param>
    <param>columnAxisName The label of the x-axis.</param>
    <param>title The overall title of the matrix to be formatted.</param>
    <param>aggr the aggregation functions to be applied to columns, rows.</param>
    <return>the matrix converted to a string.</return>
    <see>hep.aida.bin.BinFunction1D</see>
    <see>hep.aida.bin.BinFunctions1D</see>
  </javadoc>
  <method type="String" name="toTitleString">
    <declaration type="StringBuffer" name="buf" />
    <scope />
  </method>
  <javadoc>
    <text>Returns a string representation of the given matrix with axis as well as rows and columns labeled.
 * Pass &lt;tt&gt;null&lt;/tt&gt; to one or more parameters to indicate that the corresponding decoration element shall not appear in the string converted matrix.</text>
    <param>matrix The matrix to format.</param>
    <param>sliceNames The headers of all slices (to be put above each slice).</param>
    <param>rowNames The headers of all rows (to be put to the left of the matrix).</param>
    <param>columnNames The headers of all columns (to be put to above the matrix).</param>
    <param>sliceAxisName The label of the z-axis (to be put above each slice).</param>
    <param>rowAxisName The label of the y-axis.</param>
    <param>columnAxisName The label of the x-axis.</param>
    <param>title The overall title of the matrix to be formatted.</param>
    <return>the matrix converted to a string.</return>
  </javadoc>
  <method type="String" name="xtoTitleString">
    <declaration type="StringBuffer" name="buf" />
    <scope />
  </method>
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
