<?xml version="1.0" encoding="UTF-8"?>
<class name="BenchmarkMatrix">
  <javadoc>
    <text>Configurable matrix benchmark.
 * Runs the operations defined in main(args) or in the file specified by args.
 * To get &lt;a href="doc-files/usage.txt"&gt;this overall help&lt;/a&gt; on usage type &lt;tt&gt;java cern.colt.matrix.bench.BenchmarkMatrix -help&lt;/tt&gt;.
 * To get help on usage of a given command, type &lt;tt&gt;java cern.colt.matrix.bench.BenchmarkMatrix -help &amp;lt;command&amp;gt;&lt;/tt&gt;.
 * Here is the &lt;a href="doc-files/usage_dgemm.txt"&gt;help ouput for the dgemm&lt;/a&gt; command.
 * &lt;a href="../doc-files/dgemmColt1.0.1ibm1.3LxPIII_2.txt"&gt;Here&lt;/a&gt; is a sample result.
 * For more results see the &lt;a href="../doc-files/performanceLog.html"&gt;performance log&lt;/a&gt;.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>0.5, 10-May-2000</version>
  </javadoc>
  <javadoc>
    <text>Benchmark constructor comment.</text>
  </javadoc>
  <method type="constructor" name="BenchmarkMatrix" />
  <javadoc>
    <text>Not yet documented.</text>
  </javadoc>
  <method type="void" name="bench_dgemm">
    <declaration type="String[]" name="types" />
    <declaration type="int" name="cpus" />
    <declaration type="double" name="minSecs" />
    <declaration type="boolean" name="transposeA" />
    <declaration type="boolean" name="transposeB" />
    <declaration type="double[]" name="densities" />
    <declaration type="int[]" name="sizes" />
    <scope>
      <declaration type="int" name="k" />
    </scope>
    <scope />
    <declaration type="Double2DProcedure" name="fun" />
    <declaration type="String" name="title" />
    <declaration type="String" name="params" />
    <comment>parse</comment>
  </method>
  <javadoc>
    <text>Not yet documented.</text>
  </javadoc>
  <method type="void" name="bench_dgemv">
    <declaration type="String[]" name="types" />
    <declaration type="int" name="cpus" />
    <declaration type="double" name="minSecs" />
    <declaration type="boolean" name="transposeA" />
    <declaration type="double[]" name="densities" />
    <declaration type="int[]" name="sizes" />
    <scope>
      <declaration type="int" name="k" />
    </scope>
    <scope />
    <declaration type="Double2DProcedure" name="fun" />
    <declaration type="String" name="title" />
    <declaration type="String" name="params" />
    <comment>parse</comment>
  </method>
  <javadoc>
    <text>Not yet documented.</text>
  </javadoc>
  <method type="void" name="bench_pow">
    <declaration type="String[]" name="types" />
    <declaration type="int" name="cpus" />
    <declaration type="double" name="minSecs" />
    <declaration type="double[]" name="densities" />
    <declaration type="int" name="exponent" />
    <declaration type="int[]" name="sizes" />
    <scope>
      <declaration type="int" name="k" />
    </scope>
    <scope />
    <declaration type="Double2DProcedure" name="fun" />
    <declaration type="String" name="title" />
    <declaration type="String" name="params" />
    <comment>parse</comment>
  </method>
  <javadoc>
    <text>Not yet documented.</text>
  </javadoc>
  <method type="void" name="benchGeneric">
    <declaration type="String[]" name="types" />
    <declaration type="int" name="cpus" />
    <declaration type="double" name="minSecs" />
    <declaration type="double[]" name="densities" />
    <declaration type="int[]" name="sizes" />
    <scope>
      <declaration type="int" name="k" />
    </scope>
    <scope />
    <declaration type="String" name="title" />
    <comment>parse</comment>
  </method>
  <javadoc />
  <method type="String" name="commands" />
  <javadoc>
    <text>Linear algebrax matrix-matrix multiply.</text>
  </javadoc>
  <method type="Double2DProcedure" name="fun_dgemm">
    <method type="String" name="toString" />
    <method type="void" name="setParameters" />
    <method type="void" name="init" />
    <method type="void" name="apply" />
    <method type="double" name="operations">
      <declaration type="double" name="m" />
      <declaration type="double" name="n" />
      <declaration type="double" name="p" />
    </method>
    <comment>Mflops</comment>
  </method>
  <javadoc>
    <text>Linear algebrax matrix-matrix multiply.</text>
  </javadoc>
  <method type="Double2DProcedure" name="fun_dgemv">
    <method type="String" name="toString" />
    <method type="void" name="setParameters" />
    <method type="void" name="init" />
    <method type="void" name="apply" />
    <method type="double" name="operations">
      <declaration type="double" name="m" />
      <declaration type="double" name="n" />
    </method>
    <comment>Mflops</comment>
    <comment>double p = B.columns();</comment>
  </method>
  <javadoc>
    <text>2D assign with get,set</text>
  </javadoc>
  <method type="Double2DProcedure" name="fun_pow">
    <declaration type="double" name="dummy" />
    <method type="String" name="toString" />
    <method type="void" name="setParameters">
      <scope>
        <scope />
      </scope>
    </method>
    <method type="void" name="init" />
    <method type="void" name="apply" />
    <method type="double" name="operations">
      <declaration type="double" name="m" />
      <declaration type="double" name="mflops" />
      <scope>
        <declaration type="double" name="N" />
        <declaration type="double" name="n" />
        <declaration type="double" name="nx" />
      </scope>
    </method>
    <comment>must be nonsingular for inversion</comment>
    <comment>Mflops</comment>
    <comment>identity</comment>
    <comment>LU.decompose</comment>
    <comment>LU.solve</comment>
    <comment>mult</comment>
  </method>
  <javadoc>
    <text>2D assign with A.assign(B)</text>
  </javadoc>
  <method type="Double2DProcedure" name="funAssign">
    <method type="String" name="toString" />
    <method type="void" name="init" />
    <method type="void" name="apply" />
  </method>
  <javadoc>
    <text>2D assign with get,set</text>
  </javadoc>
  <method type="Double2DProcedure" name="funAssignGetSet">
    <method type="String" name="toString" />
    <method type="void" name="init" />
    <method type="void" name="apply">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope>
        <scope />
      </scope>
    </method>
    <comment>for (int row=rows; --row &gt;= 0; ) {
for (int column=columns; --column &gt;= 0; ) {
A.set(row,column, B.get(row,column));
}
}</comment>
  </method>
  <javadoc>
    <text>2D assign with getQuick,setQuick</text>
  </javadoc>
  <method type="Double2DProcedure" name="funAssignGetSetQuick">
    <method type="String" name="toString" />
    <method type="void" name="init" />
    <method type="void" name="apply">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope>
        <scope />
      </scope>
    </method>
    <comment>for (int row=rows; --row &gt;= 0; ) {</comment>
    <comment>for (int column=columns; --column &gt;= 0; ) {</comment>
  </method>
  <javadoc>
    <text>2D assign with A.assign(B)</text>
  </javadoc>
  <method type="Double2DProcedure" name="funAssignLog">
    <method type="String" name="toString" />
    <method type="void" name="init" />
    <method type="void" name="apply" />
  </method>
  <javadoc>
    <text>2D assign with A.assign(B)</text>
  </javadoc>
  <method type="Double2DProcedure" name="funAssignPlusMult">
    <method type="String" name="toString" />
    <method type="void" name="init" />
    <method type="void" name="apply" />
    <method type="double" name="operations">
      <declaration type="double" name="m" />
      <declaration type="double" name="n" />
    </method>
    <comment>Mflops</comment>
  </method>
  <javadoc>
    <text>Linear algebrax matrix-matrix multiply.</text>
  </javadoc>
  <method type="Double2DProcedure" name="funCorrelation">
    <method type="String" name="toString" />
    <method type="void" name="init" />
    <method type="void" name="setParameters" />
    <method type="void" name="apply" />
    <method type="double" name="operations">
      <declaration type="double" name="m" />
      <declaration type="double" name="n" />
    </method>
    <comment>transposed --&gt; faster (memory aware) iteration in correlation algo</comment>
    <comment>Mflops</comment>
  </method>
  <javadoc>
    <text>Element-by-element matrix-matrix multiply.</text>
  </javadoc>
  <method type="Double2DProcedure" name="funElementwiseMult">
    <method type="String" name="toString" />
    <method type="void" name="init" />
    <method type="void" name="apply" />
  </method>
  <javadoc>
    <text>Element-by-element matrix-matrix multiply.</text>
  </javadoc>
  <method type="Double2DProcedure" name="funElementwiseMultB">
    <method type="String" name="toString" />
    <method type="void" name="init" />
    <method type="void" name="apply" />
  </method>
  <javadoc>
    <text>2D assign with get,set</text>
  </javadoc>
  <method type="Double2DProcedure" name="funGetQuick">
    <declaration type="double" name="dummy" />
    <method type="String" name="toString" />
    <method type="void" name="init" />
    <method type="void" name="apply">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <declaration type="double" name="sum" />
      <scope>
        <scope />
      </scope>
    </method>
    <comment>for (int row=rows; --row &gt;= 0; ) {</comment>
    <comment>for (int column=columns; --column &gt;= 0; ) {</comment>
  </method>
  <javadoc>
    <text>2D assign with getQuick,setQuick</text>
  </javadoc>
  <method type="Double2DProcedure" name="funLUDecompose">
    <declaration type="cern.colt.matrix.linalg.LUDecompositionQuick" name="lu" />
    <method type="String" name="toString" />
    <method type="void" name="init" />
    <method type="void" name="apply" />
    <method type="double" name="operations">
      <declaration type="double" name="N" />
    </method>
    <comment>Mflops</comment>
  </method>
  <javadoc>
    <text>2D assign with getQuick,setQuick</text>
  </javadoc>
  <method type="Double2DProcedure" name="funLUSolve">
    <declaration type="cern.colt.matrix.linalg.LUDecompositionQuick" name="lu" />
    <method type="String" name="toString" />
    <method type="void" name="setParameters">
      <scope />
    </method>
    <method type="void" name="init" />
    <method type="void" name="apply" />
    <method type="double" name="operations">
      <declaration type="double" name="n" />
      <declaration type="double" name="nx" />
    </method>
    <comment>Mflops</comment>
  </method>
  <javadoc>
    <text>Linear algebrax matrix-matrix multiply.</text>
  </javadoc>
  <method type="Double2DProcedure" name="funMatMultLarge">
    <method type="String" name="toString" />
    <method type="void" name="setParameters" />
    <method type="void" name="init" />
    <method type="void" name="apply" />
    <method type="double" name="operations">
      <declaration type="double" name="m" />
      <declaration type="double" name="n" />
      <declaration type="double" name="p" />
    </method>
    <comment>do not allocate mem for "D" --&gt; safe some mem</comment>
    <comment>Mflops</comment>
  </method>
  <javadoc>
    <text>Linear algebrax matrix-vector multiply.</text>
  </javadoc>
  <method type="Double2DProcedure" name="funMatVectorMult">
    <method type="String" name="toString" />
    <method type="void" name="setParameters" />
    <method type="void" name="init" />
    <method type="void" name="apply" />
    <method type="double" name="operations">
      <declaration type="double" name="m" />
      <declaration type="double" name="n" />
    </method>
    <comment>Mflops</comment>
    <comment>double p = B.columns();</comment>
  </method>
  <javadoc>
    <text>2D assign with get,set</text>
  </javadoc>
  <method type="Double2DProcedure" name="funSetQuick">
    <declaration type="int" name="current" />
    <declaration type="double" name="density" />
    <method type="String" name="toString" />
    <method type="void" name="init">
      <declaration type="int" name="seed" />
    </method>
    <method type="void" name="apply">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope>
        <scope>
          <declaration type="double" name="random" />
        </scope>
      </scope>
    </method>
    <comment>for (int row=rows; --row &gt;= 0; ) {</comment>
    <comment>for (int column=columns; --column &gt;= 0; ) {</comment>
    <comment>a very fast random number generator (this is an inline version of class cern.jet.random.engine.DRand)</comment>
    <comment>random uniform in (0.0,1.0)</comment>
  </method>
  <javadoc />
  <method type="Double2DProcedure" name="funSOR5">
    <declaration type="double" name="value" />
    <declaration type="double" name="omega" />
    <declaration type="double" name="alpha" />
    <declaration type="double" name="beta" />
    <method type="double" name="apply" />
    <declaration type="cern.colt.function.Double9Function" name="function" />
    <method type="String" name="toString" />
    <method type="void" name="init" />
    <method type="void" name="apply" />
    <method type="double" name="operations">
      <declaration type="double" name="n" />
      <declaration type="double" name="m" />
    </method>
    <comment>Mflops</comment>
  </method>
  <javadoc />
  <method type="Double2DProcedure" name="funSOR8">
    <declaration type="double" name="value" />
    <declaration type="double" name="omega" />
    <declaration type="double" name="alpha" />
    <declaration type="double" name="beta" />
    <method type="double" name="apply" />
    <declaration type="cern.colt.function.Double9Function" name="function" />
    <method type="String" name="toString" />
    <method type="void" name="init" />
    <method type="void" name="apply" />
    <method type="double" name="operations">
      <declaration type="double" name="n" />
      <declaration type="double" name="m" />
    </method>
    <comment>Mflops</comment>
  </method>
  <javadoc />
  <method type="Double2DProcedure" name="funSort">
    <method type="String" name="toString" />
    <method type="void" name="init" />
    <method type="void" name="apply" />
  </method>
  <javadoc>
    <text>Not yet documented.</text>
  </javadoc>
  <method type="DoubleFactory2D" name="getFactory">
    <declaration type="DoubleFactory2D" name="factory" />
    <declaration type="String" name="s" />
  </method>
  <javadoc>
    <text>Not yet documented.</text>
  </javadoc>
  <method type="Double2DProcedure" name="getGenericFunction">
    <comment>else if (cmd.equals("xxxxxxxxxxxxxxxxx")) return xxxxx();
}</comment>
  </method>
  <javadoc>
    <text>Executes a command</text>
  </javadoc>
  <method type="boolean" name="handle">
    <declaration type="boolean" name="success" />
    <declaration type="String" name="cmd" />
    <scope>
      <declaration type="Double2DProcedure" name="fun" />
      <scope />
      <scope>
        <declaration type="String" name="s" />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Runs the matrix benchmark operations defined in args or in the file specified by args0.
 * To get detailed help on usage type java cern.colt.matrix.bench.BenchmarkMatrix -help</text>
  </javadoc>
  <method type="void" name="main">
    <declaration type="int" name="n" />
    <scope />
    <scope>
      <scope />
      <scope />
    </scope>
    <declaration type="cern.colt.Timer" name="timer" />
    <scope />
    <scope>
      <declaration type="java.io.BufferedReader" name="reader" />
      <scope />
      <scope />
      <declaration type="java.io.StreamTokenizer" name="stream" />
      <scope>
        <declaration type="cern.colt.list.ObjectArrayList" name="words" />
        <declaration type="int" name="token" />
        <scope>
          <scope>
            <scope>
              <declaration type="String[]" name="params" />
            </scope>
          </scope>
          <scope>
            <declaration type="String" name="word" />
            <declaration type="cern.colt.matrix.impl.Former" name="formatter" />
          </scope>
        </scope>
        <scope />
        <scope />
        <declaration type="String" name="line" />
        <scope />
      </scope>
      <scope />
    </scope>
    <comment>overall help</comment>
    <comment>help on specific command</comment>
    <comment>interactive mode, commands supplied via java class args</comment>
    <comment>batch mode, read commands from file</comment>
    <comment>parse command file in args[0]
one command per line (including parameters)
for example:
 dgemm dense 2 2.0 false true 0.999 10 30 50 100 250 500 1000
dgemm dense 2 2.5 false true 0.999 10 50
dgemm sparse 2 2.5 false true 0.001 500 1000</comment>
    <comment>allow  comments</comment>
    <comment>allow /* comments */</comment>
    <comment>while not end of file</comment>
    <comment>execute a command line at a time</comment>
    <comment>System.out.println(words);</comment>
    <comment>ignore emty lines</comment>
    <comment>execute command</comment>
    <comment>ok: 2.0 -&gt; 2   wrong: 2.0 -&gt; 2.0 (kills Integer.parseInt())</comment>
    <comment>java.io.InputStream input = new java.io.DataInputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(args[1])));
BufferedReader d
= new BufferedReader(new InputStreamReader(in));</comment>
    <comment>while not end of file</comment>
  </method>
  <javadoc>
    <text>Executes procedure repeatadly until more than minSeconds have elapsed.</text>
  </javadoc>
  <method type="void" name="run">
    <declaration type="DoubleMatrix3D" name="timings" />
    <declaration type="cern.colt.Timer" name="runTime" />
    <scope>
      <declaration type="DoubleFactory2D" name="factory" />
      <scope>
        <declaration type="int" name="size" />
        <scope>
          <declaration type="double" name="density" />
          <declaration type="float" name="opsPerSec" />
          <scope>
            <declaration type="double" name="val" />
            <declaration type="DoubleMatrix2D" name="A" />
            <declaration type="DoubleMatrix2D" name="B" />
            <declaration type="double" name="ops" />
            <declaration type="double" name="secs" />
          </scope>
          <scope />
        </scope>
      </scope>
    </scope>
    <declaration type="String" name="sliceAxisName" />
    <declaration type="String" name="rowAxisName" />
    <declaration type="String" name="colAxisName" />
    <declaration type="String[]" name="sliceNames" />
    <declaration type="hep.aida.bin.BinFunctions1D" name="F" />
    <declaration type="hep.aida.bin.BinFunction1D[]" name="aggr" />
    <declaration type="String[]" name="rowNames" />
    <declaration type="String[]" name="colNames" />
    <declaration type="String" name="tmp" />
    <declaration type="String[]" name="tmp2" />
    <comment>int[] sizes = {33,500,1000};</comment>
    <comment>double[] densities = {0.001,0.01,0.99};</comment>
    <comment>int[] sizes = {3,5,7,9,30,45,60,61,100,200,300,500,800,1000};</comment>
    <comment>double[] densities = {0.001,0.01,0.1,0.999};</comment>
    <comment>int[] sizes = {3};</comment>
    <comment>double[] densities = {0.1};</comment>
    <comment>DoubleFactory2D factory = (k==0 ? DoubleFactory2D.dense : k==1 ? DoubleFactory2D.sparse : DoubleFactory2D.rowCompressed);</comment>
    <comment>DoubleFactory2D factory = (k==0 ? DoubleFactory2D.dense : k==1 ? DoubleFactory2D.sparse : k==2 ? DoubleFactory2D.rowCompressed : DoubleFactory2D.rowCompressedModified);</comment>
    <comment>System.out.println("doing size="+size+"...");</comment>
    <comment>System.out.println("   doing density="+density+"...");</comment>
    <comment>if (true) {</comment>
    <comment>if (!((k==1 &amp;&amp; density &gt;= 0.1 &amp;&amp; size &gt;=100) || (size&gt;5000 &amp;&amp; (k==0 || density&gt;1.0E-4) ))) {</comment>
    <comment>--&gt; help gc before allocating new mem</comment>
    <comment>help gc</comment>
    <comment>skip this parameter combination (not used in practice &amp; would take a lot of memory and time)</comment>
    <comment>System.out.println(secs);</comment>
    <comment>System.out.println(opsPerSec+" Mops/sec\n");</comment>
    <comment>"density";</comment>
    <comment>String[] sliceNames = {"dense", "sparse"};</comment>
    <comment>String[] sliceNames = {"dense", "sparse", "rowCompressed"};</comment>
    <comment>{F.mean, F.median, F.sum};</comment>
    <comment>show transposed</comment>
    <comment>title = "Speedup of dense over sparse";
DoubleMatrix2D speedup = cern.colt.matrix.doublealgo.Transform.div(timings.viewSlice(0).copy(),timings.viewSlice(1));
System.out.println("\n"+new cern.colt.matrix.doublealgo.Formatter("%1.3G").toTitleString(speedup,rowNames,colNames,rowAxisName,colAxisName,title,aggr));</comment>
  </method>
  <javadoc>
    <text>Executes procedure repeatadly until more than minSeconds have elapsed.</text>
  </javadoc>
  <method type="void" name="runSpecial">
    <declaration type="int[]" name="sizes" />
    <declaration type="double[]" name="densities" />
    <declaration type="boolean[]" name="sparses" />
    <declaration type="DoubleMatrix2D" name="timings" />
    <declaration type="cern.colt.Timer" name="runTime" />
    <scope>
      <declaration type="int" name="size" />
      <declaration type="double" name="density" />
      <declaration type="boolean" name="sparse" />
      <declaration type="DoubleFactory2D" name="factory" />
      <declaration type="double" name="val" />
      <declaration type="DoubleMatrix2D" name="A" />
      <declaration type="DoubleMatrix2D" name="B" />
      <declaration type="float" name="secs" />
      <declaration type="double" name="ops" />
      <declaration type="float" name="opsPerSec" />
    </scope>
    <declaration type="hep.aida.bin.BinFunctions1D" name="F" />
    <declaration type="hep.aida.bin.BinFunction1D[]" name="aggr" />
    <declaration type="String[]" name="rowNames" />
    <declaration type="String[]" name="colNames" />
    <declaration type="String" name="rowAxisName" />
    <declaration type="String" name="colAxisName" />
    <comment>--&gt; help gc before allocating new mem</comment>
    <comment>help gc</comment>
    <comment>System.out.println(secs);</comment>
    <comment>System.out.println(opsPerSec+" Mops/sec\n");</comment>
    <comment>{F.mean, F.median, F.sum};</comment>
  </method>
  <javadoc>
    <text>Overall usage.</text>
  </javadoc>
  <method type="String" name="usage">
    <declaration type="String" name="usage" />
  </method>
  <javadoc>
    <text>Usage of a specific command.</text>
  </javadoc>
  <method type="String" name="usage">
    <declaration type="String" name="usage" />
    <comment>String usage = "Illegal arguments! Arguments to be supplied:\n" +</comment>
    <comment>"\te.g. "+cmd+" dense 2 2.0 false 0.999 10 30 50 100 250 500 1000\n"+</comment>
  </method>
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
