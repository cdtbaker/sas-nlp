<?xml version="1.0" encoding="UTF-8"?>
<class name="DoubleMatrix2D">
  <javadoc>
    <text>Abstract base class for 2-d matrices holding &lt;tt&gt;double&lt;/tt&gt; elements.
 * First see the &lt;a href="package-summary.html"&gt;package summary&lt;/a&gt; and javadoc &lt;a href="package-tree.html"&gt;tree view&lt;/a&gt; to get the broad picture.
 * &lt;p&gt;
 * A matrix has a number of rows and columns, which are assigned upon instance construction - The matrix's size is then &lt;tt&gt;rows()*columns()&lt;/tt&gt;.
 * Elements are accessed via &lt;tt&gt;[row,column]&lt;/tt&gt; coordinates.
 * Legal coordinates range from &lt;tt&gt;[0,0]&lt;/tt&gt; to &lt;tt&gt;[rows()-1,columns()-1]&lt;/tt&gt;.
 * Any attempt to access an element at a coordinate &lt;tt&gt;column&amp;lt;0 || column&amp;gt;=columns() || row&amp;lt;0 || row&amp;gt;=rows()&lt;/tt&gt; will throw an &lt;tt&gt;IndexOutOfBoundsException&lt;/tt&gt;.
 * &lt;p&gt;
 * &lt;b&gt;Note&lt;/b&gt; that this implementation is not synchronized.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="DoubleMatrix2D" />
  <javadoc>
    <text>Applies a function to each cell and aggregates the results.
 * Returns a value &lt;tt&gt;v&lt;/tt&gt; such that &lt;tt&gt;v==a(size())&lt;/tt&gt; where &lt;tt&gt;a(i) == aggr( a(i-1), f(get(row,column)) )&lt;/tt&gt; and terminators are &lt;tt&gt;a(1) == f(get(0,0)), a(0)==Double.NaN&lt;/tt&gt;.
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;pre&gt;
 * cern.jet.math.Functions F = cern.jet.math.Functions.functions;
 * 2 x 2 matrix
 * 0 1
 * 2 3
 * // Sum( x[row,col]*x[row,col] ) 
 * matrix.aggregate(F.plus,F.square);
 * --&gt; 14
 * &lt;/pre&gt;
 * For further examples, see the &lt;a href="package-summary.html#FunctionObjects"&gt;package doc&lt;/a&gt;.</text>
    <param>aggr an aggregation function taking as first argument the current aggregation and as second argument the transformed current cell value.</param>
    <param>f a function transforming the current cell value.</param>
    <return>the aggregated measure.</return>
    <see>cern.jet.math.Functions</see>
  </javadoc>
  <method type="double" name="aggregate">
    <declaration type="double" name="a" />
    <declaration type="int" name="d" />
    <scope>
      <scope />
    </scope>
    <comment>last cell already done</comment>
  </method>
  <javadoc>
    <text>Applies a function to each corresponding cell of two matrices and aggregates the results.
 * Returns a value &lt;tt&gt;v&lt;/tt&gt; such that &lt;tt&gt;v==a(size())&lt;/tt&gt; where &lt;tt&gt;a(i) == aggr( a(i-1), f(get(row,column),other.get(row,column)) )&lt;/tt&gt; and terminators are &lt;tt&gt;a(1) == f(get(0,0),other.get(0,0)), a(0)==Double.NaN&lt;/tt&gt;.
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;pre&gt;
 * cern.jet.math.Functions F = cern.jet.math.Functions.functions;
 * x == 2 x 2 matrix
 * 0 1
 * 2 3
 * y == 2 x 2 matrix
 * 0 1
 * 2 3
 * // Sum( x[row,col] * y[row,col] ) 
 * x.aggregate(y, F.plus, F.mult);
 * --&gt; 14
 * // Sum( (x[row,col] + y[row,col])^2 )
 * x.aggregate(y, F.plus, F.chain(F.square,F.plus));
 * --&gt; 56
 * &lt;/pre&gt;
 * For further examples, see the &lt;a href="package-summary.html#FunctionObjects"&gt;package doc&lt;/a&gt;.</text>
    <param>aggr an aggregation function taking as first argument the current aggregation and as second argument the transformed current cell values.</param>
    <param>f a function transforming the current cell values.</param>
    <return>the aggregated measure.</return>
    <throws>IllegalArgumentException if &lt;tt&gt;columns() != other.columns() || rows() != other.rows()&lt;/tt&gt;</throws>
    <see>cern.jet.math.Functions</see>
  </javadoc>
  <method type="double" name="aggregate">
    <declaration type="double" name="a" />
    <declaration type="int" name="d" />
    <scope>
      <scope />
    </scope>
    <comment>last cell already done</comment>
  </method>
  <javadoc>
    <text>Sets all cells to the state specified by &lt;tt&gt;values&lt;/tt&gt;.
 * &lt;tt&gt;values&lt;/tt&gt; is required to have the form &lt;tt&gt;values[row][column]&lt;/tt&gt;
 * and have exactly the same number of rows and columns as the receiver.
 * &lt;p&gt;
 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.</text>
    <param>values the values to be filled into the cells.</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
    <throws>IllegalArgumentException if &lt;tt&gt;values.length != rows() || for any 0 &amp;lt;= row &amp;lt; rows(): values[row].length != columns()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="DoubleMatrix2D" name="assign">
    <scope>
      <declaration type="double[]" name="currentRow" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Sets all cells to the state specified by &lt;tt&gt;value&lt;/tt&gt;.</text>
    <param>value the value to be filled into the cells.</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="assign">
    <declaration type="int" name="r" />
    <declaration type="int" name="c" />
    <scope>
      <scope />
    </scope>
    <comment>for (int row=rows; --row &gt;= 0;) {</comment>
    <comment>for (int column=columns; --column &gt;= 0;) {</comment>
  </method>
  <javadoc>
    <text>Assigns the result of a function to each cell; &lt;tt&gt;x[row,col] = function(x[row,col])&lt;/tt&gt;.
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;pre&gt;
 * matrix = 2 x 2 matrix 
 * 0.5 1.5      
 * 2.5 3.5
 * // change each cell to its sine
 * matrix.assign(cern.jet.math.Functions.sin);
 * --&gt;
 * 2 x 2 matrix
 * 0.479426  0.997495 
 * 0.598472 -0.350783
 * &lt;/pre&gt;
 * For further examples, see the &lt;a href="package-summary.html#FunctionObjects"&gt;package doc&lt;/a&gt;.</text>
    <param>function a function object taking as argument the current cell's value.</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
    <see>cern.jet.math.Functions</see>
  </javadoc>
  <method type="DoubleMatrix2D" name="assign">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Replaces all cell values of the receiver with the values of another matrix.
 * Both matrices must have the same number of rows and columns.
 * If both matrices share the same cells (as is the case if they are views derived from the same matrix) and intersect in an ambiguous way, then replaces &lt;i&gt;as if&lt;/i&gt; using an intermediate auxiliary deep copy of &lt;tt&gt;other&lt;/tt&gt;.</text>
    <param>other   the source matrix to copy from (may be identical to the receiver).</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
    <throws>IllegalArgumentException if &lt;tt&gt;columns() != other.columns() || rows() != other.rows()&lt;/tt&gt;</throws>
  </javadoc>
  <method type="DoubleMatrix2D" name="assign">
    <scope>
      <scope />
    </scope>
    <comment>for (int row=0; row&lt;rows; row++) {</comment>
    <comment>for (int column=0; column&lt;columns; column++) {</comment>
  </method>
  <javadoc>
    <text>Assigns the result of a function to each cell; &lt;tt&gt;x[row,col] = function(x[row,col],y[row,col])&lt;/tt&gt;.
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;pre&gt;
 * // assign x[row,col] = x[row,col]&lt;sup&gt;y[row,col]&lt;/sup&gt;
 * m1 = 2 x 2 matrix 
 * 0 1 
 * 2 3
 * m2 = 2 x 2 matrix 
 * 0 2 
 * 4 6
 * m1.assign(m2, cern.jet.math.Functions.pow);
 * --&gt;
 * m1 == 2 x 2 matrix
 * 1   1 
 * 16 729
 * &lt;/pre&gt;
 * For further examples, see the &lt;a href="package-summary.html#FunctionObjects"&gt;package doc&lt;/a&gt;.</text>
    <param>y the secondary matrix to operate on.</param>
    <param>function a function object taking as first argument the current cell's value of &lt;tt&gt;this&lt;/tt&gt;,
 * and as second argument the current cell's value of &lt;tt&gt;y&lt;/tt&gt;,</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
    <throws>IllegalArgumentException if &lt;tt&gt;columns() != other.columns() || rows() != other.rows()&lt;/tt&gt;</throws>
    <see>cern.jet.math.Functions</see>
  </javadoc>
  <method type="DoubleMatrix2D" name="assign">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns the number of cells having non-zero values; ignores tolerance.</text>
  </javadoc>
  <method type="int" name="cardinality">
    <declaration type="int" name="cardinality" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Constructs and returns a deep copy of the receiver.
 * &lt;p&gt;
 * &lt;b&gt;Note that the returned matrix is an independent deep copy.&lt;/b&gt;
 * The returned matrix is not backed by this matrix, so changes in the returned matrix are not reflected in this matrix, and vice-versa.</text>
    <return>a deep copy of the receiver.</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="copy" />
  <javadoc>
    <text>Returns whether all cells are equal to the given value.</text>
    <param>value the value to test against.</param>
    <return>&lt;tt&gt;true&lt;/tt&gt; if all cells are equal to the given value, &lt;tt&gt;false&lt;/tt&gt; otherwise.</return>
  </javadoc>
  <method type="boolean" name="equals" />
  <javadoc>
    <text>Compares this object against the specified object.
 * The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is 
 * not &lt;code&gt;null&lt;/code&gt; and is at least a &lt;code&gt;DoubleMatrix2D&lt;/code&gt; object
 * that has the same number of columns and rows as the receiver and 
 * has exactly the same values at the same coordinates.</text>
    <param>obj   the object to compare with.</param>
    <return>&lt;code&gt;true&lt;/code&gt; if the objects are the same;
 * &lt;code&gt;false&lt;/code&gt; otherwise.</return>
  </javadoc>
  <method type="boolean" name="equals" />
  <javadoc>
    <text>Assigns the result of a function to each &lt;i&gt;non-zero&lt;/i&gt; cell; &lt;tt&gt;x[row,col] = function(x[row,col])&lt;/tt&gt;.
 * Use this method for fast special-purpose iteration.
 * If you want to modify another matrix instead of &lt;tt&gt;this&lt;/tt&gt; (i.e. work in read-only mode), simply return the input value unchanged.
 * Parameters to function are as follows: &lt;tt&gt;first==row&lt;/tt&gt;, &lt;tt&gt;second==column&lt;/tt&gt;, &lt;tt&gt;third==nonZeroValue&lt;/tt&gt;.</text>
    <param>function a function object taking as argument the current non-zero cell's row, column and value.</param>
    <return>&lt;tt&gt;this&lt;/tt&gt; (for convenience only).</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="forEachNonZero">
    <scope>
      <scope>
        <declaration type="double" name="value" />
        <scope>
          <declaration type="double" name="r" />
        </scope>
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Returns the matrix cell value at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt;.</text>
    <param>row   the index of the row-coordinate.</param>
    <param>column   the index of the column-coordinate.</param>
    <return>the value of the specified cell.</return>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;column&amp;lt;0 || column&amp;gt;=columns() || row&amp;lt;0 || row&amp;gt;=rows()&lt;/tt&gt;</throws>
  </javadoc>
  <method type="double" name="get" />
  <javadoc>
    <text>Returns the content of this matrix if it is a wrapper; or &lt;tt&gt;this&lt;/tt&gt; otherwise.
 * Override this method in wrappers.</text>
  </javadoc>
  <method type="DoubleMatrix2D" name="getContent" />
  <javadoc>
    <text>Fills the coordinates and values of cells having non-zero values into the specified lists.
 * Fills into the lists, starting at index 0.
 * After this call returns the specified lists all have a new size, the number of non-zero values.
 * &lt;p&gt;
 * In general, fill order is &lt;i&gt;unspecified&lt;/i&gt;.
 * This implementation fills like &lt;tt&gt;for (row = 0..rows-1) for (column = 0..columns-1) do ... &lt;/tt&gt;.
 * However, subclasses are free to us any other order, even an order that may change over time as cell values are changed.
 * (Of course, result lists indexes are guaranteed to correspond to the same cell).
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;br&gt;
 * &lt;pre&gt;
 * 2 x 3 matrix:
 * 0, 0, 8
 * 0, 7, 0
 * --&gt;
 * rowList    = (0,1)
 * columnList = (2,1)
 * valueList  = (8,7)
 * &lt;/pre&gt;
 * In other words, &lt;tt&gt;get(0,2)==8, get(1,1)==7&lt;/tt&gt;.</text>
    <param>rowList the list to be filled with row indexes, can have any size.</param>
    <param>columnList the list to be filled with column indexes, can have any size.</param>
    <param>valueList the list to be filled with values, can have any size.</param>
  </javadoc>
  <method type="void" name="getNonZeros">
    <declaration type="int" name="r" />
    <declaration type="int" name="c" />
    <scope>
      <scope>
        <declaration type="double" name="value" />
        <scope />
      </scope>
    </scope>
  </method>
  <method name="getQuick" type="double" />
  <javadoc>
    <text>Returns the matrix cell value at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt;.
 * &lt;p&gt;Provided with invalid parameters this method may return invalid objects without throwing any exception.
 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.</text>
    <param>row   the index of the row-coordinate.</param>
    <param>column   the index of the column-coordinate.</param>
    <return>the value at the specified coordinate.</return>
  </javadoc>
  <javadoc>
    <text>Returns &lt;tt&gt;true&lt;/tt&gt; if both matrices share at least one identical cell.</text>
  </javadoc>
  <method type="boolean" name="haveSharedCells" />
  <javadoc>
    <text>Returns &lt;tt&gt;true&lt;/tt&gt; if both matrices share at least one identical cell.</text>
  </javadoc>
  <method type="boolean" name="haveSharedCellsRaw" />
  <javadoc>
    <text>Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the same number of rows and columns.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt;, etc.
 * In general, the new matrix should have internal parametrization as similar as possible.</text>
    <return>a new empty matrix of the same dynamic type.</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="like" />
  <method name="like" type="DoubleMatrix2D" />
  <javadoc>
    <text>Construct and returns a new empty matrix &lt;i&gt;of the same dynamic type&lt;/i&gt; as the receiver, having the specified number of rows and columns.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must also be of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt;, etc.
 * In general, the new matrix should have internal parametrization as similar as possible.</text>
    <param>rows the number of rows the matrix shall have.</param>
    <param>columns the number of columns the matrix shall have.</param>
    <return>a new empty matrix of the same dynamic type.</return>
  </javadoc>
  <method name="like1D" type="DoubleMatrix1D" />
  <javadoc>
    <text>Construct and returns a new 1-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, entirelly independent of the receiver.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt;, etc.</text>
    <param>size the number of cells the matrix shall have.</param>
    <return>a new matrix of the corresponding dynamic type.</return>
  </javadoc>
  <method name="like1D" type="DoubleMatrix1D" />
  <javadoc>
    <text>Construct and returns a new 1-d matrix &lt;i&gt;of the corresponding dynamic type&lt;/i&gt;, sharing the same cells.
 * For example, if the receiver is an instance of type &lt;tt&gt;DenseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;DenseDoubleMatrix1D&lt;/tt&gt;,
 * if the receiver is an instance of type &lt;tt&gt;SparseDoubleMatrix2D&lt;/tt&gt; the new matrix must be of type &lt;tt&gt;SparseDoubleMatrix1D&lt;/tt&gt;, etc.</text>
    <param>size the number of cells the matrix shall have.</param>
    <param>zero the index of the first element.</param>
    <param>stride the number of indexes between any two elements, i.e. &lt;tt&gt;index(i+1)-index(i)&lt;/tt&gt;.</param>
    <return>a new matrix of the corresponding dynamic type.</return>
  </javadoc>
  <javadoc>
    <text>Sets the matrix cell at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt; to the specified value.</text>
    <param>row   the index of the row-coordinate.</param>
    <param>column   the index of the column-coordinate.</param>
    <param>value the value to be filled into the specified cell.</param>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;column&amp;lt;0 || column&amp;gt;=columns() || row&amp;lt;0 || row&amp;gt;=rows()&lt;/tt&gt;</throws>
  </javadoc>
  <method type="void" name="set" />
  <method name="setQuick" type="void" />
  <javadoc>
    <text>Sets the matrix cell at coordinate &lt;tt&gt;[row,column]&lt;/tt&gt; to the specified value.
 * &lt;p&gt;Provided with invalid parameters this method may access illegal indexes without throwing any exception.
 * &lt;b&gt;You should only use this method when you are absolutely sure that the coordinate is within bounds.&lt;/b&gt;
 * Precondition (unchecked): &lt;tt&gt;0 &amp;lt;= column &amp;lt; columns() &amp;&amp; 0 &amp;lt;= row &amp;lt; rows()&lt;/tt&gt;.</text>
    <param>row   the index of the row-coordinate.</param>
    <param>column   the index of the column-coordinate.</param>
    <param>value the value to be filled into the specified cell.</param>
  </javadoc>
  <javadoc>
    <text>Constructs and returns a 2-dimensional array containing the cell values.
 * The returned array &lt;tt&gt;values&lt;/tt&gt; has the form &lt;tt&gt;values[row][column]&lt;/tt&gt;
 * and has the same number of rows and columns as the receiver.
 * &lt;p&gt;
 * The values are copied. So subsequent changes in &lt;tt&gt;values&lt;/tt&gt; are not reflected in the matrix, and vice-versa.</text>
    <return>an array filled with the values of the cells.</return>
  </javadoc>
  <method type="double[][]" name="toArray">
    <declaration type="double[][]" name="values" />
    <scope>
      <declaration type="double[]" name="currentRow" />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns a string representation using default formatting.</text>
    <see>cern.colt.matrix.doublealgo.Formatter</see>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>Constructs and returns a new view equal to the receiver.
 * The view is a shallow clone. Calls &lt;code&gt;clone()&lt;/code&gt; and casts the result.
 * &lt;p&gt;
 * &lt;b&gt;Note that the view is not a deep copy.&lt;/b&gt;
 * The returned matrix is backed by this matrix, so changes in the returned matrix are reflected in this matrix, and vice-versa. 
 * &lt;p&gt;
 * Use {@link #copy()} to construct an independent deep copy rather than a new view.</text>
    <return>a new view of the receiver.</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="view" />
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;slice view&lt;/i&gt; representing the rows of the given column.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
 * To obtain a slice view on subranges, construct a sub-ranging view (&lt;tt&gt;viewPart(...)&lt;/tt&gt;), then apply this method to the sub-range view.
 * &lt;p&gt; 
 * &lt;b&gt;Example:&lt;/b&gt; 
 * &lt;table border="0"&gt;
 * &lt;tr nowrap&gt; 
 * &lt;td valign="top"&gt;2 x 3 matrix: &lt;br&gt;
 * 1, 2, 3&lt;br&gt;
 * 4, 5, 6 &lt;/td&gt;
 * &lt;td&gt;viewColumn(0) ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;Matrix1D of size 2:&lt;br&gt;
 * 1, 4&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;</text>
    <param>column the column to fix.</param>
    <return>a new slice view.</return>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;column &lt; 0 || column &gt;= columns()&lt;/tt&gt;.</throws>
    <see>#viewRow(int)</see>
  </javadoc>
  <method type="DoubleMatrix1D" name="viewColumn">
    <declaration type="int" name="viewSize" />
    <declaration type="int" name="viewZero" />
    <declaration type="int" name="viewStride" />
  </method>
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;flip view&lt;/i&gt; along the column axis.
 * What used to be column &lt;tt&gt;0&lt;/tt&gt; is now column &lt;tt&gt;columns()-1&lt;/tt&gt;, ..., what used to be column &lt;tt&gt;columns()-1&lt;/tt&gt; is now column &lt;tt&gt;0&lt;/tt&gt;.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
 * &lt;p&gt; 
 * &lt;b&gt;Example:&lt;/b&gt; 
 * &lt;table border="0"&gt;
 * &lt;tr nowrap&gt; 
 * &lt;td valign="top"&gt;2 x 3 matrix: &lt;br&gt;
 * 1, 2, 3&lt;br&gt;
 * 4, 5, 6 &lt;/td&gt;
 * &lt;td&gt;columnFlip ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;2 x 3 matrix:&lt;br&gt;
 * 3, 2, 1 &lt;br&gt;
 * 6, 5, 4&lt;/td&gt;
 * &lt;td&gt;columnFlip ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;2 x 3 matrix: &lt;br&gt;
 * 1, 2, 3&lt;br&gt;
 * 4, 5, 6 &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;</text>
    <return>a new flip view.</return>
    <see>#viewRowFlip()</see>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewColumnFlip" />
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;dice (transposition) view&lt;/i&gt;; Swaps axes; example: 3 x 4 matrix --&gt; 4 x 3 matrix.
 * The view has both dimensions exchanged; what used to be columns become rows, what used to be rows become columns.
 * In other words: &lt;tt&gt;view.get(row,column)==this.get(column,row)&lt;/tt&gt;.
 * This is a zero-copy transposition, taking O(1), i.e. constant time.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa. 
 * Use idioms like &lt;tt&gt;result = viewDice(A).copy()&lt;/tt&gt; to generate an independent transposed matrix.
 * &lt;p&gt; 
 * &lt;b&gt;Example:&lt;/b&gt; 
 * &lt;table border="0"&gt;
 * &lt;tr nowrap&gt; 
 * &lt;td valign="top"&gt;2 x 3 matrix: &lt;br&gt;
 * 1, 2, 3&lt;br&gt;
 * 4, 5, 6 &lt;/td&gt;
 * &lt;td&gt;transpose ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;3 x 2 matrix:&lt;br&gt;
 * 1, 4 &lt;br&gt;
 * 2, 5 &lt;br&gt;
 * 3, 6&lt;/td&gt;
 * &lt;td&gt;transpose ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;2 x 3 matrix: &lt;br&gt;
 * 1, 2, 3&lt;br&gt;
 * 4, 5, 6 &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;</text>
    <return>a new dice view.</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewDice" />
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;sub-range view&lt;/i&gt; that is a &lt;tt&gt;height x width&lt;/tt&gt; sub matrix starting at &lt;tt&gt;[row,column]&lt;/tt&gt;.
 * Operations on the returned view can only be applied to the restricted range.
 * Any attempt to access coordinates not contained in the view will throw an &lt;tt&gt;IndexOutOfBoundsException&lt;/tt&gt;.
 * &lt;p&gt;
 * &lt;b&gt;Note that the view is really just a range restriction:&lt;/b&gt; 
 * The returned matrix is backed by this matrix, so changes in the returned matrix are reflected in this matrix, and vice-versa. 
 * &lt;p&gt;
 * The view contains the cells from &lt;tt&gt;[row,column]&lt;/tt&gt; to &lt;tt&gt;[row+height-1,column+width-1]&lt;/tt&gt;, all inclusive.
 * and has &lt;tt&gt;view.rows() == height; view.columns() == width;&lt;/tt&gt;.
 * A view's legal coordinates are again zero based, as usual.
 * In other words, legal coordinates of the view range from &lt;tt&gt;[0,0]&lt;/tt&gt; to &lt;tt&gt;[view.rows()-1==height-1,view.columns()-1==width-1]&lt;/tt&gt;.
 * As usual, any attempt to access a cell at a coordinate &lt;tt&gt;column&amp;lt;0 || column&amp;gt;=view.columns() || row&amp;lt;0 || row&amp;gt;=view.rows()&lt;/tt&gt; will throw an &lt;tt&gt;IndexOutOfBoundsException&lt;/tt&gt;.</text>
    <param>row   The index of the row-coordinate.</param>
    <param>column   The index of the column-coordinate.</param>
    <param>height   The height of the box.</param>
    <param>width   The width of the box.</param>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;column&lt;0 || width&lt;0 || column+width&gt;columns() || row&lt;0 || height&lt;0 || row+height&gt;rows()&lt;/tt&gt;</throws>
    <return>the new view.</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewPart" />
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;slice view&lt;/i&gt; representing the columns of the given row.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
 * To obtain a slice view on subranges, construct a sub-ranging view (&lt;tt&gt;viewPart(...)&lt;/tt&gt;), then apply this method to the sub-range view.
 * &lt;p&gt; 
 * &lt;b&gt;Example:&lt;/b&gt; 
 * &lt;table border="0"&gt;
 * &lt;tr nowrap&gt; 
 * &lt;td valign="top"&gt;2 x 3 matrix: &lt;br&gt;
 * 1, 2, 3&lt;br&gt;
 * 4, 5, 6 &lt;/td&gt;
 * &lt;td&gt;viewRow(0) ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;Matrix1D of size 3:&lt;br&gt;
 * 1, 2, 3&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;</text>
    <param>row the row to fix.</param>
    <return>a new slice view.</return>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;row &lt; 0 || row &gt;= rows()&lt;/tt&gt;.</throws>
    <see>#viewColumn(int)</see>
  </javadoc>
  <method type="DoubleMatrix1D" name="viewRow">
    <declaration type="int" name="viewSize" />
    <declaration type="int" name="viewZero" />
    <declaration type="int" name="viewStride" />
  </method>
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;flip view&lt;/i&gt; along the row axis.
 * What used to be row &lt;tt&gt;0&lt;/tt&gt; is now row &lt;tt&gt;rows()-1&lt;/tt&gt;, ..., what used to be row &lt;tt&gt;rows()-1&lt;/tt&gt; is now row &lt;tt&gt;0&lt;/tt&gt;.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.
 * &lt;p&gt; 
 * &lt;b&gt;Example:&lt;/b&gt; 
 * &lt;table border="0"&gt;
 * &lt;tr nowrap&gt; 
 * &lt;td valign="top"&gt;2 x 3 matrix: &lt;br&gt;
 * 1, 2, 3&lt;br&gt;
 * 4, 5, 6 &lt;/td&gt;
 * &lt;td&gt;rowFlip ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;2 x 3 matrix:&lt;br&gt;
 * 4, 5, 6 &lt;br&gt;
 * 1, 2, 3&lt;/td&gt;
 * &lt;td&gt;rowFlip ==&gt;&lt;/td&gt;
 * &lt;td valign="top"&gt;2 x 3 matrix: &lt;br&gt;
 * 1, 2, 3&lt;br&gt;
 * 4, 5, 6 &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;</text>
    <return>a new flip view.</return>
    <see>#viewColumnFlip()</see>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewRowFlip" />
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;selection view&lt;/i&gt; that is a matrix holding the indicated cells.
 * There holds &lt;tt&gt;view.rows() == rowIndexes.length, view.columns() == columnIndexes.length&lt;/tt&gt; and &lt;tt&gt;view.get(i,j) == this.get(rowIndexes[i],columnIndexes[j])&lt;/tt&gt;.
 * Indexes can occur multiple times and can be in arbitrary order.
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;pre&gt;
 * this = 2 x 3 matrix:
 * 1, 2, 3
 * 4, 5, 6
 * rowIndexes     = (0,1)
 * columnIndexes  = (1,0,1,0)
 * --&gt;
 * view = 2 x 4 matrix:
 * 2, 1, 2, 1
 * 5, 4, 5, 4
 * &lt;/pre&gt;
 * Note that modifying the index arguments after this call has returned has no effect on the view.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa. 
 * &lt;p&gt;
 * To indicate "all" rows or "all columns", simply set the respective parameter</text>
    <param>rowIndexes   The rows of the cells that shall be visible in the new view. To indicate that &lt;i&gt;all&lt;/i&gt; rows shall be visible, simply set this parameter to &lt;tt&gt;null&lt;/tt&gt;.</param>
    <param>columnIndexes   The columns of the cells that shall be visible in the new view. To indicate that &lt;i&gt;all&lt;/i&gt; columns shall be visible, simply set this parameter to &lt;tt&gt;null&lt;/tt&gt;.</param>
    <return>the new view.</return>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;!(0 &lt;= rowIndexes[i] &lt; rows())&lt;/tt&gt; for any &lt;tt&gt;i=0..rowIndexes.length()-1&lt;/tt&gt;.</throws>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;!(0 &lt;= columnIndexes[i] &lt; columns())&lt;/tt&gt; for any &lt;tt&gt;i=0..columnIndexes.length()-1&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewSelection">
    <scope />
    <scope />
    <declaration type="int[]" name="rowOffsets" />
    <declaration type="int[]" name="columnOffsets" />
    <scope />
    <scope />
    <comment>check for "all"</comment>
  </method>
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;selection view&lt;/i&gt; that is a matrix holding all &lt;b&gt;rows&lt;/b&gt; matching the given condition.
 * Applies the condition to each row and takes only those row where &lt;tt&gt;condition.apply(viewRow(i))&lt;/tt&gt; yields &lt;tt&gt;true&lt;/tt&gt;.
 * To match columns, use a dice view.
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;br&gt;
 * &lt;pre&gt;
 * // extract and view all rows which have a value &lt; threshold in the first column (representing "age")
 * final double threshold = 16;
 * matrix.viewSelection( 
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;new DoubleMatrix1DProcedure() {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public final boolean apply(DoubleMatrix1D m) { return m.get(0) &lt; threshold; }
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;}
 * );
 * // extract and view all rows with RMS &lt; threshold
 * // The RMS (Root-Mean-Square) is a measure of the average "size" of the elements of a data sequence.
 * matrix = 0 1 2 3
 * final double threshold = 0.5;
 * matrix.viewSelection( 
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;new DoubleMatrix1DProcedure() {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public final boolean apply(DoubleMatrix1D m) { return Math.sqrt(m.aggregate(F.plus,F.square) / m.size()) &lt; threshold; }
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;}
 * );
 * &lt;/pre&gt;
 * For further examples, see the &lt;a href="package-summary.html#FunctionObjects"&gt;package doc&lt;/a&gt;.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.</text>
    <param>condition The condition to be matched.</param>
    <return>the new view.</return>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewSelection">
    <declaration type="IntArrayList" name="matches" />
    <scope />
    <comment>take all columns</comment>
  </method>
  <method name="viewSelectionLike" type="DoubleMatrix2D" />
  <javadoc>
    <text>Construct and returns a new selection view.</text>
    <param>rowOffsets the offsets of the visible elements.</param>
    <param>columnOffsets the offsets of the visible elements.</param>
    <return>a new view.</return>
  </javadoc>
  <javadoc>
    <text>Sorts the matrix rows into ascending order, according to the &lt;i&gt;natural ordering&lt;/i&gt; of the matrix values in the given column.
 * This sort is guaranteed to be &lt;i&gt;stable&lt;/i&gt;.
 * For further information, see {@link cern.colt.matrix.doublealgo.Sorting#sort(DoubleMatrix2D,int)}.
 * For more advanced sorting functionality, see {@link cern.colt.matrix.doublealgo.Sorting}.</text>
    <return>a new sorted vector (matrix) view.</return>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;column &lt; 0 || column &gt;= columns()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewSorted" />
  <javadoc>
    <text>Constructs and returns a new &lt;i&gt;stride view&lt;/i&gt; which is a sub matrix consisting of every i-th cell.
 * More specifically, the view has &lt;tt&gt;this.rows()/rowStride&lt;/tt&gt; rows and &lt;tt&gt;this.columns()/columnStride&lt;/tt&gt; columns holding cells &lt;tt&gt;this.get(i*rowStride,j*columnStride)&lt;/tt&gt; for all &lt;tt&gt;i = 0..rows()/rowStride - 1, j = 0..columns()/columnStride - 1&lt;/tt&gt;.
 * The returned view is backed by this matrix, so changes in the returned view are reflected in this matrix, and vice-versa.</text>
    <param>rowStride the row step factor.</param>
    <param>columnStride the column step factor.</param>
    <return>a new view.</return>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;rowStride&lt;=0 || columnStride&lt;=0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="DoubleMatrix2D" name="viewStrides" />
  <javadoc>
    <text>Applies a procedure to each cell's value.
 * Iterates downwards from &lt;tt&gt;[rows()-1,columns()-1]&lt;/tt&gt; to &lt;tt&gt;[0,0]&lt;/tt&gt;,
 * as demonstrated by this snippet:
 * &lt;pre&gt;
 * for (int row=rows; --row &gt;=0;) {
 * for (int column=columns; --column &gt;= 0;) {
 * if (!procedure.apply(getQuick(row,column))) return false;
 * }
 * }
 * return true;
 * &lt;/pre&gt;
 * Note that an implementation may use more efficient techniques, but must not use any other order.</text>
    <param>procedure a procedure object taking as argument the current cell's value. Stops iteration if the procedure returns &lt;tt&gt;false&lt;/tt&gt;, otherwise continues.</param>
    <return>&lt;tt&gt;false&lt;/tt&gt; if the procedure stopped before all elements where iterated over, &lt;tt&gt;true&lt;/tt&gt; otherwise.</return>
  </javadoc>
  <method type="boolean" name="xforEach">
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>8 neighbor stencil transformation. For efficient finite difference operations.
 * Applies a function to a moving &lt;tt&gt;3 x 3&lt;/tt&gt; window.
 * Does nothing if &lt;tt&gt;rows() &lt; 3 || columns() &lt; 3&lt;/tt&gt;.
 * &lt;pre&gt;
 * B[i,j] = function.apply(
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;A[i-1,j-1], A[i-1,j], A[i-1,j+1],
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;A[i,  j-1], A[i,  j], A[i,  j+1],
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;A[i+1,j-1], A[i+1,j], A[i+1,j+1]
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;)
 * x x x - &amp;nbsp;&amp;nbsp;&amp;nbsp; - x x x &amp;nbsp;&amp;nbsp;&amp;nbsp; - - - - 
 * x o x - &amp;nbsp;&amp;nbsp;&amp;nbsp; - x o x &amp;nbsp;&amp;nbsp;&amp;nbsp; - - - - 
 * x x x - &amp;nbsp;&amp;nbsp;&amp;nbsp; - x x x ... - x x x 
 * - - - - &amp;nbsp;&amp;nbsp;&amp;nbsp; - - - - &amp;nbsp;&amp;nbsp;&amp;nbsp; - x o x 
 * - - - - &amp;nbsp;&amp;nbsp;&amp;nbsp; - - - - &amp;nbsp;&amp;nbsp;&amp;nbsp; - x x x 
 * &lt;/pre&gt;
 * Make sure that cells of &lt;tt&gt;this&lt;/tt&gt; and &lt;tt&gt;B&lt;/tt&gt; do not overlap.
 * In case of overlapping views, behaviour is unspecified.
 * &lt;/pre&gt;
 * &lt;p&gt;
 * &lt;b&gt;Example:&lt;/b&gt;
 * &lt;pre&gt;
 * final double alpha = 0.25;
 * final double beta = 0.75;
 * // 8 neighbors
 * cern.colt.function.Double9Function f = new cern.colt.function.Double9Function() {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;public final double apply(
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a00, double a01, double a02,
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a10, double a11, double a12,
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a20, double a21, double a22) {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return beta*a11 + alpha*(a00+a01+a02 + a10+a12 + a20+a21+a22);
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 * };
 * A.zAssign8Neighbors(B,f);
 * // 4 neighbors
 * cern.colt.function.Double9Function g = new cern.colt.function.Double9Function() {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;public final double apply(
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a00, double a01, double a02,
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a10, double a11, double a12,
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double a20, double a21, double a22) {
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return beta*a11 + alpha*(a01+a10+a12+a21);
 * &amp;nbsp;&amp;nbsp;&amp;nbsp;}
 * C.zAssign8Neighbors(B,g); // fast, even though it doesn't look like it
 * };
 * &lt;/pre&gt;</text>
    <param>B the matrix to hold the results.</param>
    <param>function the function to be applied to the 9 cells.</param>
    <throws>NullPointerException if &lt;tt&gt;function==null&lt;/tt&gt;.</throws>
    <throws>IllegalArgumentException if &lt;tt&gt;rows() != B.rows() || columns() != B.columns()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="zAssign8Neighbors">
    <declaration type="int" name="r" />
    <declaration type="int" name="c" />
    <declaration type="double" name="a00" />
    <declaration type="double" name="a10" />
    <declaration type="double" name="a20" />
    <scope>
      <scope />
    </scope>
    <comment>nothing to do</comment>
    <comment>in each step six cells can be remembered in registers - they don't need to be reread from slow memory</comment>
    <comment>in each step 3 instead of 9 cells need to be read from memory.</comment>
  </method>
  <javadoc>
    <text>Linear algebraic matrix-vector multiplication; &lt;tt&gt;z = A * y&lt;/tt&gt;; 
 * Equivalent to &lt;tt&gt;return A.zMult(y,z,1,0);&lt;/tt&gt;</text>
  </javadoc>
  <method type="DoubleMatrix1D" name="zMult" />
  <javadoc>
    <text>Linear algebraic matrix-vector multiplication; &lt;tt&gt;z = alpha * A * y + beta*z&lt;/tt&gt;.
 * &lt;tt&gt;z[i] = alpha*Sum(A[i,j] * y[j]) + beta*z[i], i=0..A.rows()-1, j=0..y.size()-1&lt;/tt&gt;.
 * Where &lt;tt&gt;A == this&lt;/tt&gt;.
 * &lt;br&gt;
 * Note: Matrix shape conformance is checked &lt;i&gt;after&lt;/i&gt; potential transpositions.</text>
    <param>y the source vector.</param>
    <param>z the vector where results are to be stored. Set this parameter to &lt;tt&gt;null&lt;/tt&gt; to indicate that a new result vector shall be constructed.</param>
    <return>z (for convenience only).</return>
    <throws>IllegalArgumentException if &lt;tt&gt;A.columns() != y.size() || A.rows() &gt; z.size())&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="DoubleMatrix1D" name="zMult">
    <scope>
      <declaration type="double" name="s" />
      <scope />
    </scope>
    <comment>boolean ignore = (z==null);</comment>
  </method>
  <javadoc>
    <text>Linear algebraic matrix-matrix multiplication; &lt;tt&gt;C = A x B&lt;/tt&gt;;
 * Equivalent to &lt;tt&gt;A.zMult(B,C,1,0,false,false)&lt;/tt&gt;.</text>
  </javadoc>
  <method type="DoubleMatrix2D" name="zMult" />
  <javadoc>
    <text>Linear algebraic matrix-matrix multiplication; &lt;tt&gt;C = alpha * A x B + beta*C&lt;/tt&gt;.
 * &lt;tt&gt;C[i,j] = alpha*Sum(A[i,k] * B[k,j]) + beta*C[i,j], k=0..n-1&lt;/tt&gt;.
 * &lt;br&gt;
 * Matrix shapes: &lt;tt&gt;A(m x n), B(n x p), C(m x p)&lt;/tt&gt;.
 * &lt;br&gt;
 * Note: Matrix shape conformance is checked &lt;i&gt;after&lt;/i&gt; potential transpositions.</text>
    <param>B the second source matrix.</param>
    <param>C the matrix where results are to be stored. Set this parameter to &lt;tt&gt;null&lt;/tt&gt; to indicate that a new result matrix shall be constructed.</param>
    <return>C (for convenience only).</return>
    <throws>IllegalArgumentException if &lt;tt&gt;B.rows() != A.columns()&lt;/tt&gt;.</throws>
    <throws>IllegalArgumentException if &lt;tt&gt;C.rows() != A.rows() || C.columns() != B.columns()&lt;/tt&gt;.</throws>
    <throws>IllegalArgumentException if &lt;tt&gt;A == C || B == C&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="DoubleMatrix2D" name="zMult">
    <declaration type="int" name="m" />
    <declaration type="int" name="n" />
    <declaration type="int" name="p" />
    <scope>
      <scope>
        <declaration type="double" name="s" />
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Returns the sum of all cells; &lt;tt&gt;Sum( x[i,j] )&lt;/tt&gt;.</text>
    <return>the sum.</return>
  </javadoc>
  <method type="double" name="zSum" />
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
