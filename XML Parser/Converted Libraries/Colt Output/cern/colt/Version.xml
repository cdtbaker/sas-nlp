<?xml version="1.0" encoding="UTF-8"?>
<class name="Version">
  <javadoc>
    <text>Information about the current release.
 * Use this class to distinguish releases and base runtime decisions upon.
 * Versions are of the form &lt;tt&gt;Major.Minor.Micro.Build&lt;/tt&gt;, e.g. &lt;tt&gt;1.0.0.52&lt;/tt&gt;
 * &lt;p&gt;
 * You can most easily display version info by running &lt;tt&gt;java cern.colt.Version&lt;/tt&gt;.</text>
  </javadoc>
  <javadoc>
    <text>Not yet commented.</text>
  </javadoc>
  <method type="constructor" name="Version" />
  <javadoc>
    <text>Returns all version information as string.</text>
  </javadoc>
  <method type="String" name="asString">
    <declaration type="String" name="vendor" />
  </method>
  <javadoc>
    <text>Returns the time this release was build; for example "Tue Apr 11 11:50:39 CEST 2000".</text>
  </javadoc>
  <method type="String" name="getBuildTime">
    <declaration type="String" name="s" />
    <declaration type="int" name="k" />
    <comment>String s = "1.2.3.56 (Tue Apr 11 11:50:39 CEST 2000)";</comment>
  </method>
  <javadoc>
    <text>Returns the build version of this release.</text>
  </javadoc>
  <method type="int" name="getBuildVersion" />
  <javadoc>
    <text>Returns the major version of this release.</text>
  </javadoc>
  <method type="int" name="getMajorVersion" />
  <javadoc>
    <text>Returns the micro version of this release.</text>
  </javadoc>
  <method type="int" name="getMicroVersion" />
  <javadoc>
    <text>Returns the minor version of this release.</text>
  </javadoc>
  <method type="int" name="getMinorVersion" />
  <javadoc />
  <method type="Package" name="getPackage" />
  <javadoc>
    <text>Prints &lt;tt&gt;asString&lt;/tt&gt; on &lt;tt&gt;System.out&lt;/tt&gt;.</text>
    <param>args ignored.</param>
  </javadoc>
  <method type="void" name="main" />
  <javadoc>
    <text>Returns the major version of this release; for example version 1.2.3 returns 1.</text>
  </javadoc>
  <method type="int[]" name="numbers">
    <declaration type="int" name="w" />
    <declaration type="int[][]" name="numbers" />
    <comment>int[] numbers = new int[w];</comment>
    <comment>if (getPackage()==null) return numbers;
String s = getPackage().getImplementationVersion();
if (s==null) return numbers;
int k = s.indexOf('(');
s = s.substring(0,k);
s = s.trim();
s = s.replace('.', ' ');
s = ViolinStrings.Strings.stripBlanks(s);
s = ViolinStrings.Strings.translate(s, ".", " ");
String[] words = s.split(".");  requires jdk 1.4.x
for (int i=0; i&lt;w; i++) {
numbers[i] = Integer.parseInt(words[i]);
numbers[i] = Integer.parseInt(ViolinStrings.Strings.word(s, i));
System.out.println(numbers[i]);
}
return numbers;</comment>
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
