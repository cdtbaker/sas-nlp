<?xml version="1.0" encoding="UTF-8"?>
<class name="Arrays">
  <javadoc>
    <text>Array manipulations; complements &lt;tt&gt;java.util.Arrays&lt;/tt&gt;.</text>
    <see>java.util.Arrays</see>
    <see>cern.colt.Sorting</see>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 03-Jul-99</version>
  </javadoc>
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="Arrays" />
  <javadoc>
    <text>Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
 * Returns the identical array if it can hold at least the number of elements specified.
 * Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
 * that it can hold at least the number of elements specified by 
 * the minimum capacity argument.</text>
    <param>minCapacity   the desired minimum capacity.</param>
  </javadoc>
  <method type="byte[]" name="ensureCapacity">
    <declaration type="int" name="oldCapacity" />
    <declaration type="byte[]" name="newArray" />
    <scope>
      <declaration type="int" name="newCapacity" />
      <scope />
    </scope>
    <scope />
  </method>
  <javadoc>
    <text>Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
 * Returns the identical array if it can hold at least the number of elements specified.
 * Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
 * that it can hold at least the number of elements specified by 
 * the minimum capacity argument.</text>
    <param>minCapacity   the desired minimum capacity.</param>
  </javadoc>
  <method type="char[]" name="ensureCapacity">
    <declaration type="int" name="oldCapacity" />
    <declaration type="char[]" name="newArray" />
    <scope>
      <declaration type="int" name="newCapacity" />
      <scope />
    </scope>
    <scope />
  </method>
  <javadoc>
    <text>Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
 * Returns the identical array if it can hold at least the number of elements specified.
 * Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
 * that it can hold at least the number of elements specified by 
 * the minimum capacity argument.</text>
    <param>minCapacity   the desired minimum capacity.</param>
  </javadoc>
  <method type="double[]" name="ensureCapacity">
    <declaration type="int" name="oldCapacity" />
    <declaration type="double[]" name="newArray" />
    <scope>
      <declaration type="int" name="newCapacity" />
      <scope />
    </scope>
    <scope />
    <comment>for (int i = oldCapacity; --i &gt;= 0; ) newArray[i] = array[i];</comment>
  </method>
  <javadoc>
    <text>Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
 * Returns the identical array if it can hold at least the number of elements specified.
 * Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
 * that it can hold at least the number of elements specified by 
 * the minimum capacity argument.</text>
    <param>minCapacity   the desired minimum capacity.</param>
  </javadoc>
  <method type="float[]" name="ensureCapacity">
    <declaration type="int" name="oldCapacity" />
    <declaration type="float[]" name="newArray" />
    <scope>
      <declaration type="int" name="newCapacity" />
      <scope />
    </scope>
    <scope />
  </method>
  <javadoc>
    <text>Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
 * Returns the identical array if it can hold at least the number of elements specified.
 * Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
 * that it can hold at least the number of elements specified by 
 * the minimum capacity argument.</text>
    <param>minCapacity   the desired minimum capacity.</param>
  </javadoc>
  <method type="int[]" name="ensureCapacity">
    <declaration type="int" name="oldCapacity" />
    <declaration type="int[]" name="newArray" />
    <scope>
      <declaration type="int" name="newCapacity" />
      <scope />
    </scope>
    <scope />
  </method>
  <javadoc>
    <text>Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
 * Returns the identical array if it can hold at least the number of elements specified.
 * Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
 * that it can hold at least the number of elements specified by 
 * the minimum capacity argument.</text>
    <param>minCapacity   the desired minimum capacity.</param>
  </javadoc>
  <method type="long[]" name="ensureCapacity">
    <declaration type="int" name="oldCapacity" />
    <declaration type="long[]" name="newArray" />
    <scope>
      <declaration type="int" name="newCapacity" />
      <scope />
    </scope>
    <scope />
  </method>
  <javadoc>
    <text>Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
 * Returns the identical array if it can hold at least the number of elements specified.
 * Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
 * that it can hold at least the number of elements specified by 
 * the minimum capacity argument.</text>
    <param>minCapacity   the desired minimum capacity.</param>
  </javadoc>
  <method type="Object[]" name="ensureCapacity">
    <declaration type="int" name="oldCapacity" />
    <declaration type="Object[]" name="newArray" />
    <scope>
      <declaration type="int" name="newCapacity" />
      <scope />
    </scope>
    <scope />
  </method>
  <javadoc>
    <text>Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
 * Returns the identical array if it can hold at least the number of elements specified.
 * Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
 * that it can hold at least the number of elements specified by 
 * the minimum capacity argument.</text>
    <param>minCapacity   the desired minimum capacity.</param>
  </javadoc>
  <method type="short[]" name="ensureCapacity">
    <declaration type="int" name="oldCapacity" />
    <declaration type="short[]" name="newArray" />
    <scope>
      <declaration type="int" name="newCapacity" />
      <scope />
    </scope>
    <scope />
  </method>
  <javadoc>
    <text>Ensures that a given array can hold up to &lt;tt&gt;minCapacity&lt;/tt&gt; elements.
 * Returns the identical array if it can hold at least the number of elements specified.
 * Otherwise, returns a new array with increased capacity containing the same elements, ensuring  
 * that it can hold at least the number of elements specified by 
 * the minimum capacity argument.</text>
    <param>minCapacity   the desired minimum capacity.</param>
  </javadoc>
  <method type="boolean[]" name="ensureCapacity">
    <declaration type="int" name="oldCapacity" />
    <declaration type="boolean[]" name="newArray" />
    <scope>
      <declaration type="int" name="newCapacity" />
      <scope />
    </scope>
    <scope />
  </method>
  <javadoc>
    <text>Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (&lt;tt&gt;"[]"&lt;/tt&gt;).  Adjacent elements are separated by the characters
 * &lt;tt&gt;", "&lt;/tt&gt; (comma and space).</text>
    <return>a string representation of the specified array.</return>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuffer" name="buf" />
    <declaration type="int" name="maxIndex" />
    <scope />
  </method>
  <javadoc>
    <text>Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (&lt;tt&gt;"[]"&lt;/tt&gt;).  Adjacent elements are separated by the characters
 * &lt;tt&gt;", "&lt;/tt&gt; (comma and space).</text>
    <return>a string representation of the specified array.</return>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuffer" name="buf" />
    <declaration type="int" name="maxIndex" />
    <scope />
  </method>
  <javadoc>
    <text>Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (&lt;tt&gt;"[]"&lt;/tt&gt;).  Adjacent elements are separated by the characters
 * &lt;tt&gt;", "&lt;/tt&gt; (comma and space).</text>
    <return>a string representation of the specified array.</return>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuffer" name="buf" />
    <declaration type="int" name="maxIndex" />
    <scope />
  </method>
  <javadoc>
    <text>Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (&lt;tt&gt;"[]"&lt;/tt&gt;).  Adjacent elements are separated by the characters
 * &lt;tt&gt;", "&lt;/tt&gt; (comma and space).</text>
    <return>a string representation of the specified array.</return>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuffer" name="buf" />
    <declaration type="int" name="maxIndex" />
    <scope />
  </method>
  <javadoc>
    <text>Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (&lt;tt&gt;"[]"&lt;/tt&gt;).  Adjacent elements are separated by the characters
 * &lt;tt&gt;", "&lt;/tt&gt; (comma and space).</text>
    <return>a string representation of the specified array.</return>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuffer" name="buf" />
    <declaration type="int" name="maxIndex" />
    <scope />
  </method>
  <javadoc>
    <text>Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (&lt;tt&gt;"[]"&lt;/tt&gt;).  Adjacent elements are separated by the characters
 * &lt;tt&gt;", "&lt;/tt&gt; (comma and space).</text>
    <return>a string representation of the specified array.</return>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuffer" name="buf" />
    <declaration type="int" name="maxIndex" />
    <scope />
  </method>
  <javadoc>
    <text>Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (&lt;tt&gt;"[]"&lt;/tt&gt;).  Adjacent elements are separated by the characters
 * &lt;tt&gt;", "&lt;/tt&gt; (comma and space).</text>
    <return>a string representation of the specified array.</return>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuffer" name="buf" />
    <declaration type="int" name="maxIndex" />
    <scope />
  </method>
  <javadoc>
    <text>Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (&lt;tt&gt;"[]"&lt;/tt&gt;).  Adjacent elements are separated by the characters
 * &lt;tt&gt;", "&lt;/tt&gt; (comma and space).</text>
    <return>a string representation of the specified array.</return>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuffer" name="buf" />
    <declaration type="int" name="maxIndex" />
    <scope />
  </method>
  <javadoc>
    <text>Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (&lt;tt&gt;"[]"&lt;/tt&gt;).  Adjacent elements are separated by the characters
 * &lt;tt&gt;", "&lt;/tt&gt; (comma and space).</text>
    <return>a string representation of the specified array.</return>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuffer" name="buf" />
    <declaration type="int" name="maxIndex" />
    <scope />
  </method>
  <javadoc>
    <text>Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
 * An application can use this operation to minimize array storage.
 * &lt;p&gt;
 * Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
 * Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
 * containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.</text>
    <param>maxCapacity   the desired maximum capacity.</param>
  </javadoc>
  <method type="byte[]" name="trimToCapacity">
    <scope>
      <declaration type="byte[]" name="oldArray" />
    </scope>
  </method>
  <javadoc>
    <text>Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
 * An application can use this operation to minimize array storage.
 * &lt;p&gt;
 * Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
 * Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
 * containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.</text>
    <param>maxCapacity   the desired maximum capacity.</param>
  </javadoc>
  <method type="char[]" name="trimToCapacity">
    <scope>
      <declaration type="char[]" name="oldArray" />
    </scope>
  </method>
  <javadoc>
    <text>Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
 * An application can use this operation to minimize array storage.
 * &lt;p&gt;
 * Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
 * Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
 * containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.</text>
    <param>maxCapacity   the desired maximum capacity.</param>
  </javadoc>
  <method type="double[]" name="trimToCapacity">
    <scope>
      <declaration type="double[]" name="oldArray" />
    </scope>
  </method>
  <javadoc>
    <text>Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
 * An application can use this operation to minimize array storage.
 * &lt;p&gt;
 * Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
 * Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
 * containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.</text>
    <param>maxCapacity   the desired maximum capacity.</param>
  </javadoc>
  <method type="float[]" name="trimToCapacity">
    <scope>
      <declaration type="float[]" name="oldArray" />
    </scope>
  </method>
  <javadoc>
    <text>Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
 * An application can use this operation to minimize array storage.
 * &lt;p&gt;
 * Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
 * Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
 * containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.</text>
    <param>maxCapacity   the desired maximum capacity.</param>
  </javadoc>
  <method type="int[]" name="trimToCapacity">
    <scope>
      <declaration type="int[]" name="oldArray" />
    </scope>
  </method>
  <javadoc>
    <text>Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
 * An application can use this operation to minimize array storage.
 * &lt;p&gt;
 * Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
 * Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
 * containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.</text>
    <param>maxCapacity   the desired maximum capacity.</param>
  </javadoc>
  <method type="long[]" name="trimToCapacity">
    <scope>
      <declaration type="long[]" name="oldArray" />
    </scope>
  </method>
  <javadoc>
    <text>Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
 * An application can use this operation to minimize array storage.
 * &lt;p&gt;
 * Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
 * Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
 * containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.</text>
    <param>maxCapacity   the desired maximum capacity.</param>
  </javadoc>
  <method type="Object[]" name="trimToCapacity">
    <scope>
      <declaration type="Object[]" name="oldArray" />
    </scope>
  </method>
  <javadoc>
    <text>Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
 * An application can use this operation to minimize array storage.
 * &lt;p&gt;
 * Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
 * Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
 * containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.</text>
    <param>maxCapacity   the desired maximum capacity.</param>
  </javadoc>
  <method type="short[]" name="trimToCapacity">
    <scope>
      <declaration type="short[]" name="oldArray" />
    </scope>
  </method>
  <javadoc>
    <text>Ensures that the specified array cannot hold more than &lt;tt&gt;maxCapacity&lt;/tt&gt; elements.
 * An application can use this operation to minimize array storage.
 * &lt;p&gt;
 * Returns the identical array if &lt;tt&gt;array.length &amp;lt;= maxCapacity&lt;/tt&gt;.
 * Otherwise, returns a new array with a length of &lt;tt&gt;maxCapacity&lt;/tt&gt;
 * containing the first &lt;tt&gt;maxCapacity&lt;/tt&gt; elements of &lt;tt&gt;array&lt;/tt&gt;.</text>
    <param>maxCapacity   the desired maximum capacity.</param>
  </javadoc>
  <method type="boolean[]" name="trimToCapacity">
    <scope>
      <declaration type="boolean[]" name="oldArray" />
    </scope>
  </method>
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
