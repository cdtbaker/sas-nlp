<?xml version="1.0" encoding="UTF-8"?>
<class name="PhysicalConstants">
  <javadoc>
    <text>High Energy Physics coherent Physical Constants.
 * This class is a Java port of the &lt;a href="http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Units/PhysicalConstants_h.html"&gt;C++ version&lt;/a&gt; found in &lt;a href="http://wwwinfo.cern.ch/asd/lhc++/clhep"&gt;CLHEP 1.4.0&lt;/a&gt;, which in turn has been provided by Geant4 (a simulation toolkit for HEP).
 * &lt;p&gt;
 * For aliasing see {@link #physicalConstants}.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <javadoc>
    <text>Little trick to allow for "aliasing", that is, renaming this class.
 * Normally you would write
 * &lt;pre&gt;
 * PhysicalConstants.twopi;
 * PhysicalConstants.c_light;
 * PhysicalConstants.h_Planck;
 * &lt;/pre&gt;
 * Since this class has only static methods, but no instance methods
 * you can also shorten the name "PhysicalConstants" to a name that better suits you, for example "P".
 * &lt;pre&gt;
 * PhysicalConstants P = PhysicalConstants.physicalConstants; // kind of "alias"
 * P.twopi;
 * P.c_light;
 * P.h_Planck;
 * &lt;/pre&gt;</text>
  </javadoc>
  <declaration type="PhysicalConstants" name="physicalConstants" />
  <declaration type="double" name="pi" />
  <declaration type="double" name="twopi" />
  <declaration type="double" name="halfpi" />
  <declaration type="double" name="pi2" />
  <declaration type="double" name="Avogadro" />
  <declaration type="double" name="c_light" />
  <declaration type="double" name="c_squared" />
  <declaration type="double" name="h_Planck" />
  <declaration type="double" name="hbar_Planck" />
  <declaration type="double" name="hbarc" />
  <declaration type="double" name="hbarc_squared" />
  <declaration type="double" name="electron_charge" />
  <declaration type="double" name="e_squared" />
  <declaration type="double" name="electron_mass_c2" />
  <declaration type="double" name="proton_mass_c2" />
  <declaration type="double" name="neutron_mass_c2" />
  <declaration type="double" name="amu_c2" />
  <declaration type="double" name="amu" />
  <declaration type="double" name="mu0" />
  <declaration type="double" name="epsilon0" />
  <declaration type="double" name="elm_coupling" />
  <declaration type="double" name="fine_structure_const" />
  <declaration type="double" name="classic_electr_radius" />
  <declaration type="double" name="electron_Compton_length" />
  <declaration type="double" name="Bohr_radius" />
  <declaration type="double" name="alpha_rcl2" />
  <declaration type="double" name="twopi_mc2_rcl2" />
  <declaration type="double" name="k_Boltzmann" />
  <declaration type="double" name="STP_Temperature" />
  <declaration type="double" name="STP_Pressure" />
  <declaration type="double" name="kGasThreshold" />
  <declaration type="double" name="universe_mean_density" />
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="PhysicalConstants" />
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment />
  <comment />
  <comment />
  <comment>3.14159265358979323846;</comment>
  <comment />
  <comment />
  <comment />
  <comment />
  <comment>c   = 299.792458 mm/ns</comment>
  <comment>c^2 = 898.7404 (mm/ns)^2</comment>
  <comment />
  <comment />
  <comment>h     = 4.13566e-12 MeV*ns</comment>
  <comment>hbar  = 6.58212e-13 MeV*ns</comment>
  <comment>hbarc = 197.32705e-12 MeV*mm</comment>
  <comment />
  <comment />
  <comment />
  <comment />
  <comment>see SystemOfUnits.h</comment>
  <comment />
  <comment>amu_c2 - atomic equivalent mass unit</comment>
  <comment>amu    - atomic mass unit</comment>
  <comment />
  <comment />
  <comment>permeability of free space mu0    = 2.01334e-16 Mev*(ns*eplus)^2/mm</comment>
  <comment>permittivity of free space epsil0 = 5.52636e+10 eplus^2/(MeV*mm)</comment>
  <comment />
  <comment />
  <comment>electromagnetic coupling = 1.43996e-12 MeV*mm/(eplus^2)</comment>
  <comment />
  <comment />
  <comment />
  <comment />
  <comment />
  <comment />
  <comment />
  <comment />
  <comment />
  <comment />
</class>
