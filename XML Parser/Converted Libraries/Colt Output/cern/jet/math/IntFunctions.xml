<?xml version="1.0" encoding="UTF-8"?>
<class name="IntFunctions">
  <javadoc>
    <text>Integer Function objects to be passed to generic methods.
 * Same as {@link Functions} except operating on integers.
 * &lt;p&gt;
 * For aliasing see {@link #intFunctions}.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <javadoc>
    <text>Little trick to allow for "aliasing", that is, renaming this class.
 * Writing code like
 * &lt;p&gt;
 * &lt;tt&gt;IntFunctions.chain(IntFunctions.plus,IntFunctions.mult(3),IntFunctions.chain(IntFunctions.square,IntFunctions.div(2)));&lt;/tt&gt;
 * &lt;p&gt;
 * is a bit awkward, to say the least.
 * Using the aliasing you can instead write
 * &lt;p&gt;
 * &lt;tt&gt;IntFunctions F = IntFunctions.intFunctions; &lt;br&gt;
 * F.chain(F.plus,F.mult(3),F.chain(F.square,F.div(2)));&lt;/tt&gt;
 * &lt;p&gt;</text>
  </javadoc>
  <declaration type="IntFunctions" name="intFunctions" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;Math.abs(a) == (a &lt; 0) ? -a : a&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntFunction" name="abs" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a--&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntFunction" name="dec" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;(int) Arithmetic.factorial(a)&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntFunction" name="factorial" />
  <javadoc>
    <text>Function that returns its argument.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntFunction" name="identity" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a++&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntFunction" name="inc" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;-a&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntFunction" name="neg" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;~a&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntFunction" name="not" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a &lt; 0 ? -1 : a &gt; 0 ? 1 : 0&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntFunction" name="sign" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a * a&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntFunction" name="square" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a &amp; b&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntIntFunction" name="and" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a &lt; b ? -1 : a &gt; b ? 1 : 0&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntIntFunction" name="compare" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a / b&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntIntFunction" name="div" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a == b ? 1 : 0&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntIntFunction" name="equals" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a == b&lt;/tt&gt;.</text>
  </javadoc>
  <method type="boolean" name="apply" />
  <declaration type="IntIntProcedure" name="isEqual" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a &lt; b&lt;/tt&gt;.</text>
  </javadoc>
  <method type="boolean" name="apply" />
  <declaration type="IntIntProcedure" name="isLess" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a &gt; b&lt;/tt&gt;.</text>
  </javadoc>
  <method type="boolean" name="apply" />
  <declaration type="IntIntProcedure" name="isGreater" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;Math.max(a,b)&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntIntFunction" name="max" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;Math.min(a,b)&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntIntFunction" name="min" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a - b&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntIntFunction" name="minus" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a % b&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntIntFunction" name="mod" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a * b&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntIntFunction" name="mult" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a | b&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntIntFunction" name="or" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a + b&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntIntFunction" name="plus" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;(int) Math.pow(a,b)&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntIntFunction" name="pow" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a &lt;&lt; b&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntIntFunction" name="shiftLeft" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a &gt;&gt; b&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntIntFunction" name="shiftRightSigned" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a &gt;&gt;&gt; b&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntIntFunction" name="shiftRightUnsigned" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;a ^ b&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="apply" />
  <declaration type="IntIntFunction" name="xor" />
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="IntFunctions" />
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;a &amp; b&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntFunction" name="and">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;(from&lt;=a &amp;&amp; a&lt;=to) ? 1 : 0&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt; are fixed.</text>
  </javadoc>
  <method type="IntFunction" name="between">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a unary function from a binary function with the first operand (argument) fixed to the given constant &lt;tt&gt;c&lt;/tt&gt;.
 * The second operand is variable (free).</text>
    <param>function a binary function taking operands in the form &lt;tt&gt;function.apply(c,var)&lt;/tt&gt;.</param>
    <return>the unary function &lt;tt&gt;function(c,var)&lt;/tt&gt;.</return>
  </javadoc>
  <method type="IntFunction" name="bindArg1">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a unary function from a binary function with the second operand (argument) fixed to the given constant &lt;tt&gt;c&lt;/tt&gt;.
 * The first operand is variable (free).</text>
    <param>function a binary function taking operands in the form &lt;tt&gt;function.apply(var,c)&lt;/tt&gt;.</param>
    <return>the unary function &lt;tt&gt;function(var,c)&lt;/tt&gt;.</return>
  </javadoc>
  <method type="IntFunction" name="bindArg2">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs the function &lt;tt&gt;g( h(a) )&lt;/tt&gt;.</text>
    <param>g a unary function.</param>
    <param>h a unary function.</param>
    <return>the unary function &lt;tt&gt;g( h(a) )&lt;/tt&gt;.</return>
  </javadoc>
  <method type="IntFunction" name="chain">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs the function &lt;tt&gt;g( h(a,b) )&lt;/tt&gt;.</text>
    <param>g a unary function.</param>
    <param>h a binary function.</param>
    <return>the unary function &lt;tt&gt;g( h(a,b) )&lt;/tt&gt;.</return>
  </javadoc>
  <method type="IntIntFunction" name="chain">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs the function &lt;tt&gt;f( g(a), h(b) )&lt;/tt&gt;.</text>
    <param>f a binary function.</param>
    <param>g a unary function.</param>
    <param>h a unary function.</param>
    <return>the binary function &lt;tt&gt;f( g(a), h(b) )&lt;/tt&gt;.</return>
  </javadoc>
  <method type="IntIntFunction" name="chain">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;a &lt; b ? -1 : a &gt; b ? 1 : 0&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntFunction" name="compare">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns the constant &lt;tt&gt;c&lt;/tt&gt;.</text>
  </javadoc>
  <method type="IntFunction" name="constant">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;a / b&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntFunction" name="div">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;a == b ? 1 : 0&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntFunction" name="equals">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;from&lt;=a &amp;&amp; a&lt;=to&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt; are fixed.</text>
  </javadoc>
  <method type="IntProcedure" name="isBetween">
    <method type="boolean" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;a == b&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntProcedure" name="isEqual">
    <method type="boolean" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;a &gt; b&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntProcedure" name="isGreater">
    <method type="boolean" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;a &lt; b&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntProcedure" name="isLess">
    <method type="boolean" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;Math.max(a,b)&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntFunction" name="max">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;Math.min(a,b)&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntFunction" name="min">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;a - b&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntFunction" name="minus">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;a % b&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntFunction" name="mod">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;a * b&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntFunction" name="mult">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;a | b&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntFunction" name="or">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;a + b&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntFunction" name="plus">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;(int) Math.pow(a,b)&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntFunction" name="pow">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns a 32 bit uniformly distributed random number in the closed interval &lt;tt&gt;[Integer.MIN_VALUE,Integer.MAX_VALUE]&lt;/tt&gt; (including &lt;tt&gt;Integer.MIN_VALUE&lt;/tt&gt; and &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;).
 * Currently the engine is {@link cern.jet.random.engine.MersenneTwister}and is seeded with the current time.
 * &lt;p&gt;
 * Note that any random engine derived from {@link cern.jet.random.engine.RandomEngine} and any random distribution derived from {@link cern.jet.random.AbstractDistribution} are function objects, because they implement the proper interfaces.
 * Thus, if you are not happy with the default, just pass your favourite random generator to function evaluating methods.</text>
  </javadoc>
  <method type="IntFunction" name="random" />
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;a &lt;&lt; b&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntFunction" name="shiftLeft">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;a &gt;&gt; b&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntFunction" name="shiftRightSigned">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;a &gt;&gt;&gt; b&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntFunction" name="shiftRightUnsigned">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;function.apply(b,a)&lt;/tt&gt;, i.e. applies the function with the first operand as second operand and the second operand as first operand.</text>
    <param>function a function taking operands in the form &lt;tt&gt;function.apply(a,b)&lt;/tt&gt;.</param>
    <return>the binary function &lt;tt&gt;function(b,a)&lt;/tt&gt;.</return>
  </javadoc>
  <method type="IntIntFunction" name="swapArgs">
    <method type="int" name="apply" />
  </method>
  <javadoc>
    <text>Constructs a function that returns &lt;tt&gt;a | b&lt;/tt&gt;.
 * &lt;tt&gt;a&lt;/tt&gt; is a variable, &lt;tt&gt;b&lt;/tt&gt; is fixed.</text>
  </javadoc>
  <method type="IntFunction" name="xor">
    <method type="int" name="apply" />
  </method>
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <javadoc>
    <text>&lt;H3&gt;Unary functions&lt;/H3&gt;</text>
  </javadoc>
  <javadoc>
    <text>&lt;H3&gt;Binary functions&lt;/H3&gt;</text>
  </javadoc>
</class>
