<?xml version="1.0" encoding="UTF-8"?>
<class name="Binomial">
  <javadoc>
    <text>Binomial distribution; See the &lt;A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node19.html#SECTION000190000000000000000"&gt; math definition&lt;/A&gt;
 * and &lt;A HREF="http://www.statsoft.com/textbook/glosb.html#Binomial Distribution"&gt; animated definition&lt;/A&gt;.
 * &lt;p&gt;
 * &lt;tt&gt;p(x) = k * p^k * (1-p)^(n-k)&lt;/tt&gt; with &lt;tt&gt;k = n! / (k! * (n-k)!)&lt;/tt&gt;.
 * &lt;p&gt;
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * &lt;dt&gt;
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt; High performance implementation. Acceptance Rejection/Inversion method. 
 * This is a port of &lt;A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandBinomial.html"&gt;RandBinomial&lt;/A&gt; used in &lt;A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep"&gt;CLHEP 1.4.0&lt;/A&gt; (C++).
 * CLHEP's implementation is, in turn, based on 
 * &lt;p&gt;V. Kachitvichyanukul, B.W. Schmeiser (1988): Binomial random variate generation, Communications of the ACM 31, 216-222.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="int" name="n" />
  <declaration type="double" name="p" />
  <declaration type="int" name="n_last" />
  <declaration type="double" name="par" />
  <declaration type="int" name="b" />
  <declaration type="double" name="pq" />
  <declaration type="double" name="log_p" />
  <declaration type="Binomial" name="shared" />
  <javadoc>
    <text>Constructs a binomial distribution.
 * Example: n=1, p=0.5.</text>
    <param>n the number of trials (also known as &lt;i&gt;sample size&lt;/i&gt;).</param>
    <param>p the probability of success.</param>
    <param>randomGenerator a uniform random number generator.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;n*Math.min(p,1-p) &amp;lt;= 0.0&lt;/tt&gt;</throws>
  </javadoc>
  <method type="constructor" name="Binomial" />
  <javadoc>
    <text>Returns the cumulative distribution function.</text>
  </javadoc>
  <method type="double" name="cdf" />
  <javadoc>
    <text>Returns the cumulative distribution function.</text>
  </javadoc>
  <method type="double" name="cdfSlow">
    <declaration type="double" name="sum" />
  </method>
  <javadoc>
    <text>*
 * Binomial-Distribution - Acceptance Rejection/Inversion     
 * *
 * *
 * Acceptance Rejection method combined with Inversion for        
 * generating Binomial random numbers with parameters             
 * n (number of trials) and p (probability of success).           
 * For  min(n*p,n*(1-p)) &lt; 10  the Inversion method is applied:   
 * The random numbers are generated via sequential search,        
 * starting at the lowest index k=0. The cumulative probabilities 
 * are avoided by using the technique of chop-down.               
 * For  min(n*p,n*(1-p)) &gt;= 10  Acceptance Rejection is used:     
 * The algorithm is based on a hat-function which is uniform in   
 * the centre region and exponential in the tails.                
 * A triangular immediate acceptance region in the centre speeds  
 * up the generation of binomial variates.                        
 * If candidate k is near the mode, f(k) is computed recursively  
 * starting at the mode m.                                        
 * The acceptance test by Stirling's formula is modified          
 * according to W. Hoermann (1992): The generation of binomial    
 * random variates, to appear in J. Statist. Comput. Simul.       
 * If  p &lt; .5  the algorithm is applied to parameters n, p.       
 * Otherwise p is replaced by 1-p, and k is replaced by n - k.    
 * *
 * *
 * FUNCTION:    - samples a random number from the binomial       
 * distribution with parameters n and p  and is    
 * valid for  n*min(p,1-p)  &gt;  0.                  
 * REFERENCE:   - V. Kachitvichyanukul, B.W. Schmeiser (1988):    
 * Binomial random variate generation,             
 * Communications of the ACM 31, 216-222.          
 * SUBPROGRAMS: - StirlingCorrection()                            
 * ... Correction term of the Stirling 
 * approximation for log(k!)       
 * (series in 1/k or table values  
 * for small k) with long int k    
 * - randomGenerator    ... (0,1)-Uniform engine     * 
 * *</text>
  </javadoc>
  <method type="int" name="generateBinomial">
    <declaration type="double" name="C1_3" />
    <declaration type="double" name="C5_8" />
    <declaration type="double" name="C1_6" />
    <declaration type="int" name="DMAX_KM" />
    <declaration type="int" name="bh" />
    <declaration type="double" name="f" />
    <scope>
      <scope />
      <scope />
    </scope>
    <scope>
      <declaration type="double" name="pk" />
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
    <scope>
      <scope />
      <scope />
      <scope />
      <scope />
      <scope>
        <scope>
          <scope />
        </scope>
        <scope>
          <scope />
        </scope>
      </scope>
      <scope>
        <scope>
          <scope />
        </scope>
      </scope>
    </scope>
    <comment>set-up</comment>
    <comment>Check for invalid input values</comment>
    <comment>mode, integer</comment>
    <comment>Chop-down</comment>
    <comment>recurr. relat.</comment>
    <comment>variance</comment>
    <comment>i = p1 - 0.5</comment>
    <comment>limit left</comment>
    <comment>limit right</comment>
    <comment>parallelogram</comment>
    <comment>height</comment>
    <comment>probabilities</comment>
    <comment>of regions 1-4</comment>
    <comment>Inversion Chop-down</comment>
    <comment>triangular region</comment>
    <comment>immediate accept</comment>
    <comment>parallelogram</comment>
    <comment>left tail</comment>
    <comment>right tail</comment>
    <comment>acceptance test :  two cases, depending on |K - m|</comment>
    <comment>computation of p(K) via recurrence relationship from the mode</comment>
    <comment>f(m)</comment>
    <comment>multiply  f</comment>
    <comment>multiply  V</comment>
    <comment>acceptance test</comment>
    <comment>lower and upper squeeze tests, based on lower bounds for log p(K)</comment>
    <comment>computation of log f(K) via Stirling's formula</comment>
    <comment>final acceptance-rejection test</comment>
  </method>
  <javadoc>
    <text>Returns a random number from the distribution.</text>
  </javadoc>
  <method type="int" name="nextInt" />
  <javadoc>
    <text>Returns a random number from the distribution with the given parameters n and p; bypasses the internal state.</text>
    <param>n the number of trials</param>
    <param>p the probability of success.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;n*Math.min(p,1-p) &amp;lt;= 0.0&lt;/tt&gt;</throws>
  </javadoc>
  <method type="int" name="nextInt" />
  <javadoc>
    <text>Returns the probability distribution function.</text>
  </javadoc>
  <method type="double" name="pdf">
    <declaration type="int" name="r" />
  </method>
  <javadoc>
    <text>Sets the parameters number of trials and the probability of success.</text>
    <param>n the number of trials</param>
    <param>p the probability of success.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;n*Math.min(p,1-p) &amp;lt;= 0.0&lt;/tt&gt;</throws>
  </javadoc>
  <method type="void" name="setNandP" />
  <javadoc>
    <text>Returns a random number from the distribution with the given parameters n and p.</text>
    <param>n the number of trials</param>
    <param>p the probability of success.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;n*Math.min(p,1-p) &amp;lt;= 0.0&lt;/tt&gt;</throws>
  </javadoc>
  <method type="int" name="staticNextInt">
    <scope />
  </method>
  <javadoc>
    <text>Returns a String representation of the receiver.</text>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</text>
    <param>randomGenerator the new uniform random number generator to be shared.</param>
  </javadoc>
  <method type="void" name="xstaticSetRandomGenerator">
    <scope />
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>cache vars for method generateBinomial(...)</comment>
  <comment>cache vars for method pdf(...)</comment>
  <comment>The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</comment>
</class>
