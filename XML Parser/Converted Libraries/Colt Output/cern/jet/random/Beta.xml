<?xml version="1.0" encoding="UTF-8"?>
<class name="Beta">
  <javadoc>
    <text>Beta distribution; &lt;A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node15.html#SECTION000150000000000000000"&gt; math definition&lt;/A&gt;
 * and &lt;A HREF="http://www.statsoft.com/textbook/glosb.html#Beta Distribution"&gt; animated definition&lt;/A&gt;.
 * &lt;p&gt;
 * &lt;tt&gt;p(x) = k * x^(alpha-1) * (1-x)^(beta-1)&lt;/tt&gt; with &lt;tt&gt;k = g(alpha+beta)/(g(alpha)*g(beta))&lt;/tt&gt; and &lt;tt&gt;g(a)&lt;/tt&gt; being the gamma function.
 * &lt;p&gt;
 * Valid parameter ranges: &lt;tt&gt;alpha &amp;gt; 0&lt;/tt&gt; and &lt;tt&gt;beta &amp;gt; 0&lt;/tt&gt;.            
 * &lt;p&gt;
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * &lt;dt&gt;
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt;
 * &lt;dt&gt;Method: Stratified Rejection/Patchwork Rejection.
 * High performance implementation.
 * &lt;dt&gt;This is a port of &lt;tt&gt;bsprc.c&lt;/tt&gt; from the &lt;A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
 * C-RAND's implementation, in turn, is based upon
 * &lt;p&gt;
 * H. Sakasegawa (1983): Stratified rejection and squeeze method for generating beta random numbers, 
 * Ann. Inst. Statist. Math. 35 B, 291-302.                                        
 * &lt;p&gt;
 * and
 * &lt;p&gt;
 * Stadlober E., H. Zechner (1993), &lt;A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"&gt; Generating beta variates via patchwork rejection,&lt;/A&gt;,
 * Computing 50, 1-18.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="double" name="alpha" />
  <declaration type="double" name="beta" />
  <declaration type="double" name="PDF_CONST" />
  <declaration type="double" name="a_last" />
  <declaration type="double" name="a_" />
  <declaration type="double" name="c" />
  <declaration type="double" name="ml" />
  <declaration type="double" name="p_last" />
  <declaration type="double" name="a" />
  <declaration type="double" name="ll" />
  <declaration type="Beta" name="shared" />
  <javadoc>
    <text>Constructs a Beta distribution.</text>
  </javadoc>
  <method type="constructor" name="Beta" />
  <javadoc />
  <method type="double" name="b00">
    <declaration type="double" name="U" />
    <scope />
    <scope>
      <scope>
        <scope />
      </scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>b(1-b) / a(1-a)</comment>
    <comment>t = t_opt</comment>
    <comment>f(t) = fa * fb</comment>
    <comment>0 &lt; X &lt; t</comment>
    <comment>t &lt; X &lt; 1</comment>
    <comment>X &lt; t</comment>
    <comment>squeeze accept:   L(x) = 1 + (1 - b)x</comment>
    <comment>squeeze reject:   U(x) = 1 + ((1 - t)^(b-1) - 1)/t * x</comment>
    <comment>quotient accept:  q(x) = (1 - x)^(b-1) / fb</comment>
    <comment>X &gt; t</comment>
    <comment>squeeze accept:   L(x) = 1 + (1 - a)(1 - x)</comment>
    <comment>squeeze reject:   U(x) = 1 + (t^(a-1) - 1)/(1 - t) * (1 - x)</comment>
    <comment>quotient accept:  q(x) = x^(a-1) / fa</comment>
  </method>
  <javadoc />
  <method type="double" name="b01">
    <declaration type="double" name="U" />
    <scope>
      <scope />
      <scope />
    </scope>
    <scope>
      <scope>
        <scope />
      </scope>
      <scope>
        <scope />
      </scope>
    </scope>
    <comment>one step Newton * start value t</comment>
    <comment>f(t) = fa * fb</comment>
    <comment>ml = -m1</comment>
    <comment>mu = -m2 * t</comment>
    <comment>0 &lt; X &lt; t</comment>
    <comment>t &lt; X &lt; 1</comment>
    <comment>X &lt; t</comment>
    <comment>squeeze accept:   L(x) = 1 + m1*x,  ml = -m1</comment>
    <comment>squeeze reject:   U(x) = 1 + m2*x,  mu = -m2 * t</comment>
    <comment>quotient accept:  q(x) = (1 - x)^(b-1)</comment>
    <comment>X &gt; t</comment>
    <comment>squeeze accept:   L(x) = 1 + (1 - a)(1 - x)</comment>
    <comment>squeeze reject:   U(x) = 1 + (t^(a-1) - 1)/(1 - t) * (1 - x)</comment>
    <comment>quotient accept:  q(x) = (x)^(a-1) / fa</comment>
  </method>
  <javadoc />
  <method type="double" name="b1prs">
    <declaration type="double" name="U" />
    <scope>
      <scope />
      <scope>
        <scope />
        <scope />
      </scope>
      <scope />
      <scope>
        <scope />
      </scope>
    </scope>
    <scope>
      <scope>
        <scope />
      </scope>
      <scope>
        <scope />
      </scope>
      <scope />
      <scope />
    </scope>
    <comment>z1 = x1 - ll</comment>
    <comment>z5 = x5 + lr</comment>
    <comment>x1 &lt; X &lt; m</comment>
    <comment>m  &lt; X &lt; x5</comment>
    <comment>X &lt; x1</comment>
    <comment>x5 &lt; X</comment>
    <comment>immediate accept:  x2 &lt; X &lt; m, - f(x2) &lt; W &lt; 0</comment>
    <comment>immediate accept:  x1 &lt; X &lt; x2, 0 &lt; W &lt; f(x1)</comment>
    <comment>candidates for acceptance-rejection-test</comment>
    <comment>squeeze accept:    L(x) = f(x2) (x - z2) / (x2 - z2)</comment>
    <comment>squeeze accept:    L(x) = f(x2) + (1 - f(x2))(x - x2)/(m - x2)</comment>
    <comment>quotient accept:   x2 &lt; Y &lt; m,   W &gt;= 2f2 - f(Y)</comment>
    <comment>immediate accept:  m &lt; X &lt; x4, - f(x4) &lt; W &lt; 0</comment>
    <comment>immediate accept:  x4 &lt; X &lt; x5, 0 &lt; W &lt; f(x5)</comment>
    <comment>candidates for acceptance-rejection-test</comment>
    <comment>squeeze accept:    L(x) = f(x4) (z4 - x) / (z4 - x4)</comment>
    <comment>squeeze accept:    L(x) = f(x4) + (1 - f(x4))(x4 - x)/(x4 - m)</comment>
    <comment>quotient accept:   m &lt; Y &lt; x4,   W &gt;= 2f4 - f(Y)</comment>
    <comment>X &lt; x1</comment>
    <comment>X &gt; 0!!</comment>
    <comment>squeeze accept:    L(x) = f(x1) (x - z1) / (x1 - z1)</comment>
    <comment>z1 = x1 - ll,   W &lt;= 1 + (X - x1)/ll</comment>
    <comment>x5 &lt; X</comment>
    <comment>X &lt; 1!!</comment>
    <comment>squeeze accept:    L(x) = f(x5) (z5 - x) / (z5 - x5)</comment>
    <comment>z5 = x5 + lr,   W &lt;= 1 + (x5 - X)/lr</comment>
    <comment>density accept:  f(x) = (x/m)^a ((1 - x)/(1 - m))^b</comment>
  </method>
  <javadoc>
    <text>Returns the cumulative distribution function.</text>
  </javadoc>
  <method type="double" name="cdf" />
  <method type="double" name="f" />
  <javadoc>
    <text>Returns a random number from the distribution.</text>
  </javadoc>
  <method type="double" name="nextDouble" />
  <javadoc>
    <text>Returns a beta distributed random number; bypasses the internal state.</text>
  </javadoc>
  <method type="double" name="nextDouble">
    <declaration type="double" name="a" />
    <declaration type="double" name="b" />
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <scope />
    <javadoc>
      <text>*
 * Beta Distribution - Stratified Rejection/Patchwork Rejection   
 * *
 * For parameters a &lt; 1 , b &lt; 1  and  a &lt; 1 &lt; b   or  b &lt; 1 &lt; a   
 * the stratified rejection methods b00 and b01 of Sakasegawa are 
 * used. Both procedures employ suitable two-part power functions 
 * from which samples can be obtained by inversion.               
 * If a &gt; 1 , b &gt; 1 (unimodal case) the patchwork rejection       
 * method b1prs of Zechner/Stadlober is utilized:                 
 * The area below the density function f(x) in its body is        
 * rearranged by certain point reflections. Within a large center 
 * interval variates are sampled efficiently by rejection from    
 * uniform hats. Rectangular immediate acceptance regions speed   
 * up the generation. The remaining tails are covered by          
 * exponential functions.                                         
 * If (a-1)(b-1) = 0  sampling is done by inversion if either a   
 * or b are not equal to one. If  a = b = 1  a uniform random     
 * variate is delivered.                                          
 * *
 * *
 * FUNCTION :   - bsprc samples a random variate from the beta    
 * distribution with parameters  a &gt; 0, b &gt; 0.     
 * REFERENCES : - H. Sakasegawa (1983): Stratified rejection and  
 * squeeze method for generating beta random       
 * numbers, Ann. Inst. Statist. Math. 35 B,        
 * 291-302.                                        
 * - H. Zechner, E. Stadlober (1993): Generating     
 * beta variates via patchwork rejection,          
 * Computing 50, 1-18.                             
 * *
 * SUBPROGRAMS: - drand(seed) ... (0,1)-Uniform generator with    
 * unsigned long integer *seed.                    
 * - b00(seed,a,b) ... Beta generator for a&lt;1, b&lt;1   
 * - b01(seed,a,b) ... Beta generator for a&lt;1&lt;b or   
 * b&lt;1&lt;a                         
 * - b1prs(seed,a,b) ... Beta generator for a&gt;1, b&gt;1 
 * with unsigned long integer *seed, double a, b.  
 * *</text>
    </javadoc>
  </method>
  <javadoc>
    <text>Returns the cumulative distribution function.</text>
  </javadoc>
  <method type="double" name="pdf" />
  <javadoc>
    <text>Sets the parameters.</text>
  </javadoc>
  <method type="void" name="setState" />
  <javadoc>
    <text>Returns a random number from the distribution.</text>
  </javadoc>
  <method type="double" name="staticNextDouble">
    <scope />
  </method>
  <javadoc>
    <text>Returns a String representation of the receiver.</text>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</text>
    <param>randomGenerator the new uniform random number generator to be shared.</param>
  </javadoc>
  <method type="void" name="xstaticSetRandomGenerator">
    <scope />
  </method>
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>cache to speed up pdf()</comment>
  <comment>cached values shared by bXX</comment>
  <comment>cached values for b00</comment>
  <comment>chached values for b01</comment>
  <comment>chached values for b1prs</comment>
  <comment>The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</comment>
</class>
