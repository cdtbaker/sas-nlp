<?xml version="1.0" encoding="UTF-8"?>
<class name="StudentT">
  <javadoc>
    <text>StudentT distribution (aka T-distribution); See the &lt;A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node279.html#SECTION0002790000000000000000"&gt; math definition&lt;/A&gt;
 * and &lt;A HREF="http://www.statsoft.com/textbook/gloss.html#Student's t Distribution"&gt; animated definition&lt;/A&gt;.
 * &lt;p&gt;
 * &lt;tt&gt;p(x) = k  *  (1+x^2/f) ^ -(f+1)/2&lt;/tt&gt; where &lt;tt&gt;k = g((f+1)/2) / (sqrt(pi*f) * g(f/2))&lt;/tt&gt; and &lt;tt&gt;g(a)&lt;/tt&gt; being the gamma function and &lt;tt&gt;f&lt;/tt&gt; being the degrees of freedom.
 * &lt;p&gt;
 * Valid parameter ranges: &lt;tt&gt;freedom &amp;gt; 0&lt;/tt&gt;.
 * &lt;p&gt;
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * &lt;dt&gt;
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt;
 * &lt;dt&gt;
 * Method: Adapted Polar Box-Muller transformation.
 * &lt;dt&gt;
 * This is a port of &lt;A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandStudentT.html"&gt;RandStudentT&lt;/A&gt; used in &lt;A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep"&gt;CLHEP 1.4.0&lt;/A&gt; (C++).
 * CLHEP's implementation, in turn, is based on &lt;tt&gt;tpol.c&lt;/tt&gt; from the &lt;A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
 * C-RAND's implementation, in turn, is based upon
 * &lt;p&gt;R.W. Bailey (1994): Polar generation of random variates with the t-distribution, Mathematics of Computation 62, 779-781.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="double" name="freedom" />
  <declaration type="double" name="TERM" />
  <declaration type="StudentT" name="shared" />
  <javadoc>
    <text>Constructs a StudentT distribution.
 * Example: freedom=1.0.</text>
    <param>freedom degrees of freedom.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;freedom &amp;lt;= 0.0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="constructor" name="StudentT" />
  <javadoc>
    <text>Returns the cumulative distribution function.</text>
  </javadoc>
  <method type="double" name="cdf" />
  <javadoc>
    <text>Returns a random number from the distribution.</text>
  </javadoc>
  <method type="double" name="nextDouble" />
  <javadoc>
    <text>Returns a random number from the distribution; bypasses the internal state.</text>
    <param>a degrees of freedom.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;a &amp;lt;= 0.0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="double" name="nextDouble">
    <declaration type="double" name="u" />
    <scope />
    <comment>The polar method of BoxMuller for generating Normal variates
 is adapted to the Student-t distribution. The two generated
 variates are not independent and the expected no. of uniforms
 per variate is 2.5464.

 REFERENCE :  - R.W. Bailey (1994): Polar generation of random
                variates with the t-distribution, Mathematics
                of Computation 62, 779-781.</comment>
  </method>
  <javadoc>
    <text>Returns the probability distribution function.</text>
  </javadoc>
  <method type="double" name="pdf" />
  <javadoc>
    <text>Sets the distribution parameter.</text>
    <param>freedom degrees of freedom.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;freedom &amp;lt;= 0.0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="setState">
    <declaration type="double" name="val" />
  </method>
  <javadoc>
    <text>Returns a random number from the distribution.</text>
    <param>freedom degrees of freedom.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;freedom &amp;lt;= 0.0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="double" name="staticNextDouble">
    <scope />
  </method>
  <javadoc>
    <text>Returns a String representation of the receiver.</text>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</text>
    <param>randomGenerator the new uniform random number generator to be shared.</param>
  </javadoc>
  <method type="void" name="xstaticSetRandomGenerator">
    <scope />
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>performance cache for pdf()</comment>
  <comment>The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</comment>
</class>
