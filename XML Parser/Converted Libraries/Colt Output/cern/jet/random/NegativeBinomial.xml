<?xml version="1.0" encoding="UTF-8"?>
<class name="NegativeBinomial">
  <javadoc>
    <text>Negative Binomial distribution; See the &lt;A HREF="http://www.statlets.com/usermanual/glossary2.htm"&gt; math definition&lt;/A&gt;.
 * &lt;p&gt;
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * &lt;dt&gt;
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt; High performance implementation. Compound method. 
 * &lt;dt&gt;
 * This is a port of &lt;tt&gt;nbp.c&lt;/tt&gt; from the &lt;A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
 * C-RAND's implementation, in turn, is based upon
 * &lt;p&gt;
 * J.H. Ahrens, U. Dieter (1974): Computer methods for sampling from gamma, beta, Poisson and binomial distributions, Computing 12, 223--246.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="int" name="n" />
  <declaration type="double" name="p" />
  <declaration type="Gamma" name="gamma" />
  <declaration type="Poisson" name="poisson" />
  <declaration type="NegativeBinomial" name="shared" />
  <javadoc>
    <text>Constructs a Negative Binomial distribution.
 * Example: n=1, p=0.5.</text>
    <param>n the number of trials.</param>
    <param>p the probability of success.</param>
    <param>randomGenerator a uniform random number generator.</param>
  </javadoc>
  <method type="constructor" name="NegativeBinomial" />
  <javadoc>
    <text>Returns the cumulative distribution function.</text>
  </javadoc>
  <method type="double" name="cdf" />
  <javadoc>
    <text>Returns a deep copy of the receiver; the copy will produce identical sequences.
 * After this call has returned, the copy and the receiver have equal but separate state.</text>
    <return>a copy of the receiver.</return>
  </javadoc>
  <method type="Object" name="clone">
    <declaration type="NegativeBinomial" name="copy" />
  </method>
  <javadoc>
    <text>Returns a random number from the distribution.</text>
  </javadoc>
  <method type="int" name="nextInt" />
  <javadoc>
    <text>Returns a random number from the distribution; bypasses the internal state.</text>
  </javadoc>
  <method type="int" name="nextInt">
    <declaration type="double" name="x" />
    <declaration type="double" name="p1" />
    <declaration type="double" name="y" />
    <javadoc>
      <text>*
 * Negative Binomial Distribution - Compound method        
 * *
 * *
 * FUNCTION:    - nbp  samples a random number from the Negative  
 * Binomial distribution with parameters r (no. of 
 * failures given) and p (probability of success)  
 * valid for  r &gt; 0, 0 &lt; p &lt; 1.                    
 * If G from Gamma(r) then K  from Poiss(pG/(1-p)) 
 * is NB(r,p)--distributed.                        
 * REFERENCE:   - J.H. Ahrens, U. Dieter (1974): Computer methods 
 * for sampling from gamma, beta, Poisson and      
 * binomial distributions, Computing 12, 223--246. 
 * SUBPROGRAMS: - drand(seed) ... (0,1)-Uniform generator with    
 * unsigned long integer *seed                     
 * - Gamma(seed,a) ... Gamma generator for a &gt; 0     
 * unsigned long *seed, double a                   
 * - Poisson(seed,a) ...Poisson generator for a &gt; 0  
 * unsigned long *seed, double a.                  
 * *</text>
    </javadoc>
  </method>
  <javadoc>
    <text>Returns the probability distribution function.</text>
  </javadoc>
  <method type="double" name="pdf" />
  <javadoc>
    <text>Sets the parameters number of trials and the probability of success.</text>
    <param>n the number of trials</param>
    <param>p the probability of success.</param>
  </javadoc>
  <method type="void" name="setNandP" />
  <javadoc>
    <text>Returns a random number from the distribution with the given parameters n and p.</text>
    <param>n the number of trials</param>
    <param>p the probability of success.</param>
  </javadoc>
  <method type="int" name="staticNextInt">
    <scope />
  </method>
  <javadoc>
    <text>Returns a String representation of the receiver.</text>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</text>
    <param>randomGenerator the new uniform random number generator to be shared.</param>
  </javadoc>
  <method type="void" name="xstaticSetRandomGenerator">
    <scope />
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</comment>
</class>
