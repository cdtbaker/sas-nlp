<?xml version="1.0" encoding="UTF-8"?>
<class name="Gamma">
  <javadoc>
    <text>Gamma distribution; &lt;A HREF="http://wwwinfo.cern.ch/asdoc/shortwrupsdir/g106/top.html"&gt; math definition&lt;/A&gt;,
 * &lt;A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node96.html#SECTION000960000000000000000"&gt; definition of gamma function&lt;/A&gt;
 * and &lt;A HREF="http://www.statsoft.com/textbook/glosf.html#Gamma Distribution"&gt; animated definition&lt;/A&gt;. 
 * &lt;p&gt;
 * &lt;tt&gt;p(x) = k * x^(alpha-1) * e^(-x/beta)&lt;/tt&gt; with &lt;tt&gt;k = 1/(g(alpha) * b^a))&lt;/tt&gt; and &lt;tt&gt;g(a)&lt;/tt&gt; being the gamma function.
 * &lt;p&gt;
 * Valid parameter ranges: &lt;tt&gt;alpha &amp;gt; 0&lt;/tt&gt;.
 * &lt;p&gt;
 * Note: For a Gamma distribution to have the mean &lt;tt&gt;mean&lt;/tt&gt; and variance &lt;tt&gt;variance&lt;/tt&gt;, set the parameters as follows:
 * &lt;pre&gt;
 * alpha = mean*mean / variance; lambda = 1 / (variance / mean); 
 * &lt;/pre&gt;
 * &lt;p&gt;
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * &lt;dt&gt;
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt; 
 * &lt;dt&gt;
 * Method: Acceptance Rejection combined with Acceptance Complement.
 * &lt;dt&gt;
 * High performance implementation. This is a port of &lt;A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandGamma.html"&gt;RandGamma&lt;/A&gt; used in &lt;A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep"&gt;CLHEP 1.4.0&lt;/A&gt; (C++).
 * CLHEP's implementation, in turn, is based on &lt;tt&gt;gds.c&lt;/tt&gt; from the &lt;A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
 * C-RAND's implementation, in turn, is based upon
 * &lt;p&gt;
 * J.H. Ahrens, U. Dieter (1974): Computer methods for sampling from gamma, beta, Poisson and binomial distributions, 
 * Computing 12, 223-246.
 * &lt;p&gt;
 * and
 * &lt;p&gt;
 * J.H. Ahrens, U. Dieter (1982): Generating gamma variates by a modified rejection technique,
 * Communications of the ACM 25, 47-54.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="double" name="alpha" />
  <declaration type="double" name="lambda" />
  <declaration type="Gamma" name="shared" />
  <javadoc>
    <text>Constructs a Gamma distribution.
 * Example: alpha=1.0, lambda=1.0.</text>
    <throws>IllegalArgumentException if &lt;tt&gt;alpha &amp;lt;= 0.0 || lambda &amp;lt;= 0.0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="constructor" name="Gamma" />
  <javadoc>
    <text>Returns the cumulative distribution function.</text>
  </javadoc>
  <method type="double" name="cdf" />
  <javadoc>
    <text>Returns a random number from the distribution.</text>
  </javadoc>
  <method type="double" name="nextDouble" />
  <javadoc>
    <text>Returns a random number from the distribution; bypasses the internal state.</text>
  </javadoc>
  <method type="double" name="nextDouble">
    <declaration type="double" name="a" />
    <declaration type="double" name="aa" />
    <declaration type="double" name="gds" />
    <declaration type="double" name="v1" />
    <scope>
      <scope>
        <scope />
        <scope />
      </scope>
    </scope>
    <scope>
      <scope />
      <scope />
      <scope>
        <scope>
          <scope />
          <scope />
        </scope>
        <scope />
      </scope>
      <scope>
        <scope />
        <scope />
      </scope>
      <scope>
        <scope />
        <scope />
        <scope />
        <scope />
        <scope />
        <scope />
      </scope>
    </scope>
    <javadoc>
      <text>*
 * Gamma Distribution - Acceptance Rejection combined with     
 * Acceptance Complement                  
 * *
 * *
 * FUNCTION:    - gds samples a random number from the standard   
 * gamma distribution with parameter  a &gt; 0.       
 * Acceptance Rejection  gs  for  a &lt; 1 ,          
 * Acceptance Complement gd  for  a &gt;= 1 .         
 * REFERENCES:  - J.H. Ahrens, U. Dieter (1974): Computer methods 
 * for sampling from gamma, beta, Poisson and      
 * binomial distributions, Computing 12, 223-246.  
 * - J.H. Ahrens, U. Dieter (1982): Generating gamma 
 * variates by a modified rejection technique,     
 * Communications of the ACM 25, 47-54.            
 * SUBPROGRAMS: - drand(seed) ... (0,1)-Uniform generator with    
 * unsigned long integer *seed                     
 * - NORMAL(seed) ... Normal generator N(0,1).       
 * *</text>
    </javadoc>
    <comment>Check for invalid input values</comment>
    <comment>CASE A: Acceptance rejection algorithm gs</comment>
    <comment>Step 1</comment>
    <comment>Step 2. Case gds &lt;= 1</comment>
    <comment>Step 3. Case gds &gt; 1</comment>
    <comment>CASE B: Acceptance complement algorithm gd (gaussian distribution, box muller transformation)</comment>
    <comment>Step 1. Preparations</comment>
    <comment>Step 2. Normal deviate</comment>
    <comment>Immediate acceptance</comment>
    <comment>Step 3. Uniform random number</comment>
    <comment>Squeeze acceptance</comment>
    <comment>Step 4. Set-up for hat case</comment>
    <comment>Step 5. Calculation of q</comment>
    <comment>Step 6.</comment>
    <comment>Step 7. Quotient acceptance</comment>
    <comment>Step 8. Double exponential deviate t</comment>
    <comment>Step 9. Rejection of t</comment>
    <comment>Step 10. New q(t)</comment>
    <comment>Step 11.</comment>
    <comment>Step 12. Hat acceptance</comment>
  </method>
  <javadoc>
    <text>Returns the probability distribution function.</text>
  </javadoc>
  <method type="double" name="pdf">
    <scope />
  </method>
  <javadoc>
    <text>Sets the mean and variance.</text>
    <throws>IllegalArgumentException if &lt;tt&gt;alpha &amp;lt;= 0.0 || lambda &amp;lt;= 0.0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="setState" />
  <javadoc>
    <text>Returns a random number from the distribution.</text>
    <throws>IllegalArgumentException if &lt;tt&gt;alpha &amp;lt;= 0.0 || lambda &amp;lt;= 0.0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="double" name="staticNextDouble">
    <scope />
  </method>
  <javadoc>
    <text>Returns a String representation of the receiver.</text>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</text>
    <param>randomGenerator the new uniform random number generator to be shared.</param>
  </javadoc>
  <method type="void" name="xstaticSetRandomGenerator">
    <scope />
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</comment>
</class>
