<?xml version="1.0" encoding="UTF-8"?>
<class name="RandomSamplingAssistant">
  <javadoc>
    <text>Conveniently computes a stable &lt;i&gt;Simple Random Sample Without Replacement (SRSWOR)&lt;/i&gt; subsequence of &lt;tt&gt;n&lt;/tt&gt; elements from a given input sequence of &lt;tt&gt;N&lt;/tt&gt; elements;
 * Example: Computing a sublist of &lt;tt&gt;n=3&lt;/tt&gt; random elements from a list &lt;tt&gt;(1,...,50)&lt;/tt&gt; may yield the sublist &lt;tt&gt;(7,13,47)&lt;/tt&gt;.
 * The subsequence is guaranteed to be &lt;i&gt;stable&lt;/i&gt;, i.e. elements never change position relative to each other.
 * Each element from the &lt;tt&gt;N&lt;/tt&gt; elements has the same probability to be included in the &lt;tt&gt;n&lt;/tt&gt; chosen elements.
 * This class is a convenience adapter for &lt;tt&gt;RandomSampler&lt;/tt&gt; using blocks.</text>
    <see>RandomSampler</see>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 02/05/99</version>
  </javadoc>
  <declaration type="RandomSampler" name="sampler" />
  <declaration type="long[]" name="buffer" />
  <declaration type="int" name="bufferPosition" />
  <declaration type="long" name="skip" />
  <declaration type="long" name="n" />
  <declaration type="int" name="MAX_BUFFER_SIZE" />
  <javadoc>
    <text>Constructs a random sampler that samples &lt;tt&gt;n&lt;/tt&gt; random elements from an input sequence of &lt;tt&gt;N&lt;/tt&gt; elements.</text>
    <param>n the total number of elements to choose (must be &amp;gt;= 0).</param>
    <param>N number of elements to choose from (must be &amp;gt;= n).</param>
    <param>randomGenerator a random number generator. Set this parameter to &lt;tt&gt;null&lt;/tt&gt; to use the default random number generator.</param>
  </javadoc>
  <method type="constructor" name="RandomSamplingAssistant">
    <comment>start with the right offset</comment>
  </method>
  <javadoc>
    <text>Returns a deep copy of the receiver.</text>
  </javadoc>
  <method type="Object" name="clone">
    <declaration type="RandomSamplingAssistant" name="copy" />
  </method>
  <javadoc>
    <text>Not yet commented.</text>
  </javadoc>
  <method type="void" name="fetchNextBlock">
    <scope>
      <declaration type="long" name="last" />
    </scope>
  </method>
  <javadoc>
    <text>Returns the used random generator.</text>
  </javadoc>
  <method type="RandomEngine" name="getRandomGenerator" />
  <javadoc>
    <text>Tests random sampling.</text>
  </javadoc>
  <method type="void" name="main">
    <declaration type="long" name="n" />
    <declaration type="long" name="N" />
    <comment>test(n,N);</comment>
  </method>
  <javadoc>
    <text>Just shows how this class can be used; samples n elements from and int[] array.</text>
  </javadoc>
  <method type="int[]" name="sampleArray">
    <declaration type="RandomSamplingAssistant" name="assistant" />
    <declaration type="int[]" name="sample" />
    <declaration type="int" name="j" />
    <declaration type="int" name="length" />
    <scope />
  </method>
  <javadoc>
    <text>Returns whether the next element of the input sequence shall be sampled (picked) or not.</text>
    <return>&lt;tt&gt;true&lt;/tt&gt; if the next element shall be sampled (picked), &lt;tt&gt;false&lt;/tt&gt; otherwise.</return>
  </javadoc>
  <method type="boolean" name="sampleNextElement">
    <scope />
    <scope />
    <comment>reject</comment>
    <comment>reject</comment>
    <comment>accept</comment>
  </method>
  <javadoc>
    <text>Tests the methods of this class.
 * To do benchmarking, comment the lines printing stuff to the console.</text>
  </javadoc>
  <method type="void" name="test">
    <declaration type="RandomSamplingAssistant" name="assistant" />
    <declaration type="cern.colt.list.LongArrayList" name="sample" />
    <declaration type="cern.colt.Timer" name="timer" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Tests the methods of this class.
 * To do benchmarking, comment the lines printing stuff to the console.</text>
  </javadoc>
  <method type="void" name="testArraySampling">
    <declaration type="int[]" name="elements" />
    <declaration type="cern.colt.Timer" name="timer" />
    <declaration type="int[]" name="sample" />
    <comment>System.out.print("\nElements = [");
for (int i=0; i&lt;N-1; i++) System.out.print(elements[i]+", ");
System.out.print(elements[N-1]);
System.out.println("]");


System.out.print("\nSample = [");
for (int i=0; i&lt;n-1; i++) System.out.print(sample[i]+", ");
System.out.print(sample[n-1]);
System.out.println("]");</comment>
  </method>
  <javadoc>
    <text>Returns whether the next elements of the input sequence shall be sampled (picked) or not.
 * one is chosen from the first block, one from the second, ..., one from the last block.</text>
    <param>acceptList a bitvector which will be filled with &lt;tt&gt;true&lt;/tt&gt; where sampling shall occur and &lt;tt&gt;false&lt;/tt&gt; where it shall not occur.</param>
  </javadoc>
  <method type="void" name="xsampleNextElements">
    <declaration type="int" name="length" />
    <declaration type="boolean[]" name="accept" />
    <scope>
      <scope />
      <scope />
      <scope />
      <scope />
    </scope>
    <comment>manually inlined</comment>
    <comment>reject</comment>
    <comment>reject</comment>
    <comment>accept</comment>
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>public class RandomSamplingAssistant extends Object implements java.io.Serializable {</comment>
</class>
