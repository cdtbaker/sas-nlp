<?xml version="1.0" encoding="UTF-8"?>
<class name="WeightedRandomSampler">
  <javadoc>
    <text>Conveniently computes a stable subsequence of elements from a given input sequence;
 * Picks (samples) exactly one random element from successive blocks of &lt;tt&gt;weight&lt;/tt&gt; input elements each.
 * For example, if weight==2 (a block is 2 elements), and the input is 5*2=10 elements long, then picks 5 random elements from the 10 elements such that
 * one element is randomly picked from the first block, one element from the second block, ..., one element from the last block.
 * weight == 1.0 --&gt; all elements are picked (sampled). weight == 10.0 --&gt; Picks one random element from successive blocks of 10 elements each. Etc.
 * The subsequence is guaranteed to be &lt;i&gt;stable&lt;/i&gt;, i.e. elements never change position relative to each other.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 02/05/99</version>
  </javadoc>
  <declaration type="int" name="skip" />
  <declaration type="int" name="nextTriggerPos" />
  <declaration type="int" name="nextSkip" />
  <declaration type="int" name="weight" />
  <declaration type="Uniform" name="generator" />
  <declaration type="int" name="UNDEFINED" />
  <javadoc>
    <text>Calls &lt;tt&gt;BlockedRandomSampler(1,null)&lt;/tt&gt;.</text>
  </javadoc>
  <method type="constructor" name="WeightedRandomSampler" />
  <javadoc>
    <text>Chooses exactly one random element from successive blocks of &lt;tt&gt;weight&lt;/tt&gt; input elements each.
 * For example, if weight==2, and the input is 5*2=10 elements long, then chooses 5 random elements from the 10 elements such that
 * one is chosen from the first block, one from the second, ..., one from the last block.
 * weight == 1.0 --&gt; all elements are consumed (sampled). 10.0 --&gt; Consumes one random element from successive blocks of 10 elements each. Etc.</text>
    <param>weight the weight.</param>
    <param>randomGenerator a random number generator. Set this parameter to &lt;tt&gt;null&lt;/tt&gt; to use the default random number generator.</param>
  </javadoc>
  <method type="constructor" name="WeightedRandomSampler" />
  <javadoc>
    <text>Returns a deep copy of the receiver.</text>
  </javadoc>
  <method type="Object" name="clone">
    <declaration type="WeightedRandomSampler" name="copy" />
  </method>
  <javadoc>
    <text>Not yet commented.</text>
    <param>weight int</param>
  </javadoc>
  <method type="int" name="getWeight" />
  <javadoc>
    <text>Chooses exactly one random element from successive blocks of &lt;tt&gt;weight&lt;/tt&gt; input elements each.
 * For example, if weight==2, and the input is 5*2=10 elements long, then chooses 5 random elements from the 10 elements such that
 * one is chosen from the first block, one from the second, ..., one from the last block.</text>
    <return>&lt;tt&gt;true&lt;/tt&gt; if the next element shall be sampled (picked), &lt;tt&gt;false&lt;/tt&gt; otherwise.</return>
  </javadoc>
  <method type="boolean" name="sampleNextElement">
    <scope />
    <scope />
    <scope />
    <comment>reject</comment>
    <comment>tuned for speed</comment>
    <comment>reject</comment>
    <comment>accept</comment>
  </method>
  <javadoc>
    <text>Not yet commented.</text>
    <param>weight int</param>
  </javadoc>
  <method type="void" name="setWeight" />
  <javadoc>
    <text>Not yet commented.</text>
  </javadoc>
  <method type="void" name="test">
    <declaration type="WeightedRandomSampler" name="sampler" />
    <declaration type="cern.colt.list.IntArrayList" name="sample" />
    <scope />
  </method>
  <javadoc>
    <text>Chooses exactly one random element from successive blocks of &lt;tt&gt;weight&lt;/tt&gt; input elements each.
 * For example, if weight==2, and the input is 5*2=10 elements long, then chooses 5 random elements from the 10 elements such that
 * one is chosen from the first block, one from the second, ..., one from the last block.</text>
    <param>acceptList a bitvector which will be filled with &lt;tt&gt;true&lt;/tt&gt; where sampling shall occur and &lt;tt&gt;false&lt;/tt&gt; where it shall not occur.</param>
  </javadoc>
  <method type="void" name="xsampleNextElements">
    <declaration type="int" name="length" />
    <declaration type="boolean[]" name="accept" />
    <scope>
      <scope />
      <scope />
      <scope />
    </scope>
    <comment>manually inlined</comment>
    <comment>reject</comment>
    <comment>tuned for speed</comment>
    <comment>reject</comment>
    <comment>accept</comment>
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>public class BlockedRandomSampler extends Object implements java.io.Serializable {</comment>
</class>
