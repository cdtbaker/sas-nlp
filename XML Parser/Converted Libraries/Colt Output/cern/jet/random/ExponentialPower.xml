<?xml version="1.0" encoding="UTF-8"?>
<class name="ExponentialPower">
  <javadoc>
    <text>Exponential Power distribution.
 * &lt;p&gt;
 * Valid parameter ranges: &lt;tt&gt;tau &amp;gt;= 1&lt;/tt&gt;.
 * &lt;p&gt;
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * &lt;dt&gt;
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt;
 * &lt;dt&gt;Method: Non-universal rejection method for logconcave densities.
 * &lt;dt&gt;This is a port of &lt;tt&gt;epd.c&lt;/tt&gt; from the &lt;A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
 * C-RAND's implementation, in turn, is based upon
 * &lt;p&gt;
 * L. Devroye (1986): Non-Uniform Random Variate Generation , Springer Verlag, New York.
 * &lt;p&gt;</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="double" name="tau" />
  <declaration type="double" name="s" />
  <declaration type="ExponentialPower" name="shared" />
  <javadoc>
    <text>Constructs an Exponential Power distribution.
 * Example: tau=1.0.</text>
    <throws>IllegalArgumentException if &lt;tt&gt;tau &amp;lt; 1.0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="constructor" name="ExponentialPower" />
  <javadoc>
    <text>Returns a random number from the distribution.</text>
  </javadoc>
  <method type="double" name="nextDouble" />
  <javadoc>
    <text>Returns a random number from the distribution; bypasses the internal state.</text>
    <throws>IllegalArgumentException if &lt;tt&gt;tau &amp;lt; 1.0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="double" name="nextDouble">
    <declaration type="double" name="u" />
    <scope />
    <scope>
      <scope />
      <scope />
    </scope>
    <comment>SET-UP</comment>
    <comment>GENERATOR</comment>
    <comment>U(0/1)</comment>
    <comment>U(-1.0/1.0)</comment>
    <comment>u1=|u|</comment>
    <comment>U(0/1)</comment>
    <comment>Uniform hat-function for x &lt;= (1-1/tau)</comment>
    <comment>Exponential hat-function for x &gt; (1-1/tau)</comment>
    <comment>U(0/1)</comment>
    <comment>Acceptance/Rejection</comment>
    <comment>Random sign</comment>
  </method>
  <javadoc>
    <text>Sets the distribution parameter.</text>
    <throws>IllegalArgumentException if &lt;tt&gt;tau &amp;lt; 1.0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="setState" />
  <javadoc>
    <text>Returns a random number from the distribution.</text>
    <throws>IllegalArgumentException if &lt;tt&gt;tau &amp;lt; 1.0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="double" name="staticNextDouble">
    <scope />
  </method>
  <javadoc>
    <text>Returns a String representation of the receiver.</text>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</text>
    <param>randomGenerator the new uniform random number generator to be shared.</param>
  </javadoc>
  <method type="void" name="xstaticSetRandomGenerator">
    <scope />
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>cached vars for method nextDouble(tau) (for performance only)</comment>
  <comment>The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</comment>
</class>
