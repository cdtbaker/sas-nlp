<?xml version="1.0" encoding="UTF-8"?>
<class name="Uniform">
  <javadoc>
    <text>Uniform distribution; &lt;A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node292.html#SECTION0002920000000000000000"&gt; Math definition&lt;/A&gt;
 * and &lt;A HREF="http://www.statsoft.com/textbook/glosu.html#Uniform Distribution"&gt; animated definition&lt;/A&gt;.
 * &lt;p&gt;
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * &lt;dt&gt;
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * &lt;p&gt;</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="double" name="min" />
  <declaration type="double" name="max" />
  <declaration type="Uniform" name="shared" />
  <javadoc>
    <text>Constructs a uniform distribution with the given minimum and maximum, using a {@link cern.jet.random.engine.MersenneTwister} seeded with the given seed.</text>
  </javadoc>
  <method type="constructor" name="Uniform" />
  <javadoc>
    <text>Constructs a uniform distribution with the given minimum and maximum.</text>
  </javadoc>
  <method type="constructor" name="Uniform" />
  <javadoc>
    <text>Constructs a uniform distribution with &lt;tt&gt;min=0.0&lt;/tt&gt; and &lt;tt&gt;max=1.0&lt;/tt&gt;.</text>
  </javadoc>
  <method type="constructor" name="Uniform" />
  <javadoc>
    <text>Returns the cumulative distribution function (assuming a continous uniform distribution).</text>
  </javadoc>
  <method type="double" name="cdf" />
  <javadoc>
    <text>Returns a uniformly distributed random &lt;tt&gt;boolean&lt;/tt&gt;.</text>
  </javadoc>
  <method type="boolean" name="nextBoolean" />
  <javadoc>
    <text>Returns a uniformly distributed random number in the open interval &lt;tt&gt;(min,max)&lt;/tt&gt; (excluding &lt;tt&gt;min&lt;/tt&gt; and &lt;tt&gt;max&lt;/tt&gt;).</text>
  </javadoc>
  <method type="double" name="nextDouble" />
  <javadoc>
    <text>Returns a uniformly distributed random number in the open interval &lt;tt&gt;(from,to)&lt;/tt&gt; (excluding &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
 * Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="nextDoubleFromTo" />
  <javadoc>
    <text>Returns a uniformly distributed random number in the open interval &lt;tt&gt;(from,to)&lt;/tt&gt; (excluding &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
 * Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.</text>
  </javadoc>
  <method type="float" name="nextFloatFromTo" />
  <javadoc>
    <text>Returns a uniformly distributed random number in the closed interval &lt;tt&gt;[min,max]&lt;/tt&gt; (including &lt;tt&gt;min&lt;/tt&gt; and &lt;tt&gt;max&lt;/tt&gt;).</text>
  </javadoc>
  <method type="int" name="nextInt" />
  <javadoc>
    <text>Returns a uniformly distributed random number in the closed interval &lt;tt&gt;[from,to]&lt;/tt&gt; (including &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
 * Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="nextIntFromTo" />
  <javadoc>
    <text>Returns a uniformly distributed random number in the closed interval &lt;tt&gt;[from,to]&lt;/tt&gt; (including &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
 * Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.</text>
  </javadoc>
  <method type="long" name="nextLongFromTo">
    <scope />
    <declaration type="double" name="diff" />
    <scope />
    <declaration type="long" name="random" />
    <scope>
      <scope>
        <declaration type="int" name="i1" />
        <declaration type="int" name="i2" />
      </scope>
    </scope>
    <scope />
    <comment>Doing the thing turns out to be more tricky than expected.
avoids overflows and underflows.
treats cases like from=-1, to=1 and the like right.
the following code would NOT solve the problem: return (long) (Doubles.randomFromTo(from,to));

rounding avoids the unsymmetric behaviour of casts from double to long: (long) -0.7 = 0, (long) 0.7 = 0.
checking for overflows and underflows is also necessary.</comment>
    <comment>first the most likely and also the fastest case.</comment>
    <comment>would we get a numeric overflow?</comment>
    <comment>if not, we can still handle the case rather efficient.</comment>
    <comment>now the pathologic boundary cases.</comment>
    <comment>they are handled rather slow.</comment>
    <comment>return Math.round(nextDoubleFromTo(from,to));</comment>
  </method>
  <javadoc>
    <text>Returns the probability distribution function (assuming a continous uniform distribution).</text>
  </javadoc>
  <method type="double" name="pdf" />
  <javadoc>
    <text>Sets the internal state.</text>
  </javadoc>
  <method type="void" name="setState">
    <scope />
  </method>
  <javadoc>
    <text>Returns a uniformly distributed random &lt;tt&gt;boolean&lt;/tt&gt;.</text>
  </javadoc>
  <method type="boolean" name="staticNextBoolean">
    <scope />
  </method>
  <javadoc>
    <text>Returns a uniformly distributed random number in the open interval &lt;tt&gt;(0,1)&lt;/tt&gt; (excluding &lt;tt&gt;0&lt;/tt&gt; and &lt;tt&gt;1&lt;/tt&gt;).</text>
  </javadoc>
  <method type="double" name="staticNextDouble">
    <scope />
  </method>
  <javadoc>
    <text>Returns a uniformly distributed random number in the open interval &lt;tt&gt;(from,to)&lt;/tt&gt; (excluding &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
 * Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="staticNextDoubleFromTo">
    <scope />
  </method>
  <javadoc>
    <text>Returns a uniformly distributed random number in the open interval &lt;tt&gt;(from,to)&lt;/tt&gt; (excluding &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
 * Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.</text>
  </javadoc>
  <method type="float" name="staticNextFloatFromTo">
    <scope />
  </method>
  <javadoc>
    <text>Returns a uniformly distributed random number in the closed interval &lt;tt&gt;[from,to]&lt;/tt&gt; (including &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
 * Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.</text>
  </javadoc>
  <method type="int" name="staticNextIntFromTo">
    <scope />
  </method>
  <javadoc>
    <text>Returns a uniformly distributed random number in the closed interval &lt;tt&gt;[from,to]&lt;/tt&gt; (including &lt;tt&gt;from&lt;/tt&gt; and &lt;tt&gt;to&lt;/tt&gt;).
 * Pre conditions: &lt;tt&gt;from &amp;lt;= to&lt;/tt&gt;.</text>
  </javadoc>
  <method type="long" name="staticNextLongFromTo">
    <scope />
  </method>
  <javadoc>
    <text>Sets the uniform random number generation engine shared by all &lt;b&gt;static&lt;/b&gt; methods.</text>
    <param>randomGenerator the new uniform random number generation engine to be shared.</param>
  </javadoc>
  <method type="void" name="staticSetRandomEngine">
    <scope />
  </method>
  <javadoc>
    <text>Returns a String representation of the receiver.</text>
  </javadoc>
  <method type="String" name="toString" />
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</comment>
</class>
