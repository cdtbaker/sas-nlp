<?xml version="1.0" encoding="UTF-8"?>
<class name="PoissonSlow">
  <javadoc>
    <text>Poisson distribution; See the &lt;A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node208.html#SECTION0002080000000000000000"&gt; math definition&lt;/A&gt;
 * and &lt;A HREF="http://www.statsoft.com/textbook/glosp.html#Poisson Distribution"&gt; animated definition&lt;/A&gt;.
 * &lt;p&gt;
 * &lt;tt&gt;p(k) = (mean^k / k!) * exp(-mean)&lt;/tt&gt; for &lt;tt&gt;k &amp;gt;= 0&lt;/tt&gt;.
 * &lt;p&gt;
 * Valid parameter ranges: &lt;tt&gt;mean &amp;gt; 0&lt;/tt&gt;.
 * Note: if &lt;tt&gt;mean &amp;lt;= 0.0&lt;/tt&gt; then always returns zero.
 * &lt;p&gt;
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * &lt;dt&gt;
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt; 
 * This is a port of &lt;A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandPoisson.html"&gt;RandPoisson&lt;/A&gt; used in &lt;A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep"&gt;CLHEP 1.4.0&lt;/A&gt; (C++).
 * CLHEP's implementation, in turn, is based upon "W.H.Press et al., Numerical Recipes in C, Second Edition".</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="double" name="mean" />
  <declaration type="double" name="cached_sq" />
  <declaration type="double" name="cached_alxm" />
  <declaration type="double" name="cached_g" />
  <declaration type="double" name="MEAN_MAX" />
  <declaration type="double" name="SWITCH_MEAN" />
  <declaration type="double[]" name="cof" />
  <declaration type="PoissonSlow" name="shared" />
  <javadoc>
    <text>Constructs a poisson distribution.
 * Example: mean=1.0.</text>
  </javadoc>
  <method type="constructor" name="PoissonSlow" />
  <javadoc>
    <text>Returns the value ln(Gamma(xx) for xx &gt; 0.  Full accuracy is obtained for 
 * xx &gt; 1. For 0 &lt; xx &lt; 1. the reflection formula (6.1.4) can be used first.
 * (Adapted from Numerical Recipes in C)</text>
  </javadoc>
  <method type="double" name="logGamma">
    <declaration type="double" name="x" />
    <declaration type="double" name="tmp" />
    <declaration type="double" name="ser" />
    <declaration type="double[]" name="coeff" />
    <scope />
  </method>
  <javadoc>
    <text>Returns a random number from the distribution.</text>
  </javadoc>
  <method type="int" name="nextInt" />
  <javadoc>
    <text>Returns a random number from the distribution; bypasses the internal state.</text>
  </javadoc>
  <method type="int" name="nextInt">
    <declaration type="double" name="xm" />
    <declaration type="double" name="g" />
    <scope>
      <declaration type="int" name="poisson" />
      <declaration type="double" name="product" />
      <scope />
    </scope>
    <scope>
      <declaration type="double" name="t" />
      <declaration type="double" name="em" />
      <declaration type="double" name="sq" />
      <declaration type="double" name="alxm" />
      <declaration type="RandomEngine" name="rand" />
      <scope>
        <declaration type="double" name="y" />
        <scope />
      </scope>
    </scope>
    <scope />
    <comment>Adapted from "Numerical Recipes in C".</comment>
    <comment>not defined</comment>
    <comment>bug in CLHEP 1.4.0: was "} while ( product &gt; g );"</comment>
    <comment>faster than em = Math.floor(em); (em&gt;=0.0)</comment>
    <comment>mean is too large</comment>
  </method>
  <javadoc>
    <text>Returns a random number from the distribution.</text>
  </javadoc>
  <method type="int" name="nextIntSlow">
    <declaration type="double" name="bound" />
    <declaration type="int" name="count" />
    <declaration type="double" name="product" />
    <scope />
    <comment>detected endless loop due to rounding errors</comment>
  </method>
  <javadoc>
    <text>Sets the mean.</text>
  </javadoc>
  <method type="void" name="setMean">
    <scope>
      <scope />
      <scope />
    </scope>
    <comment>not defined</comment>
  </method>
  <javadoc>
    <text>Returns a random number from the distribution with the given mean.</text>
  </javadoc>
  <method type="int" name="staticNextInt">
    <scope />
  </method>
  <javadoc>
    <text>Returns a String representation of the receiver.</text>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</text>
    <param>randomGenerator the new uniform random number generator to be shared.</param>
  </javadoc>
  <method type="void" name="xstaticSetRandomGenerator">
    <scope />
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>precomputed and cached values (for performance only)</comment>
  <comment>for all means larger than that, we don't try to compute a poisson deviation, but return the mean.</comment>
  <comment>switch from method A to method B</comment>
  <comment>for method logGamma()</comment>
  <comment>The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</comment>
</class>
