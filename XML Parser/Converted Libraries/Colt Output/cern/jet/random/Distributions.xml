<?xml version="1.0" encoding="UTF-8"?>
<class name="Distributions">
  <javadoc>
    <text>Contains methods for conveniently generating pseudo-random numbers from special distributions such as the Burr, Cauchy, Erlang, Geometric, Lambda, Laplace, Logistic, Weibull, etc.
 * &lt;p&gt;
 * &lt;b&gt;About this class:&lt;/b&gt;
 * &lt;dt&gt;All distributions are obtained by using a &lt;b&gt;uniform&lt;/b&gt; pseudo-random number generator.
 * followed by a transformation to the desired distribution.
 * &lt;p&gt;
 * &lt;b&gt;Example usage:&lt;/b&gt;&lt;pre&gt;
 * cern.jet.random.engine.RandomEngine generator;
 * generator = new cern.jet.random.engine.MersenneTwister(new java.util.Date());
 * //generator = new edu.cornell.lassp.houle.RngPack.Ranecu(new java.util.Date());
 * //generator = new edu.cornell.lassp.houle.RngPack.Ranmar(new java.util.Date());
 * //generator = new edu.cornell.lassp.houle.RngPack.Ranlux(new java.util.Date());
 * //generator = AbstractDistribution.makeDefaultGenerator();
 * for (int i=1000000; --i &gt;=0; ) {
 * int cauchy = Distributions.nextCauchy(generator);
 * ...
 * }
 * &lt;/pre&gt;</text>
    <see>cern.jet.random.engine.MersenneTwister</see>
    <see>java.util.Random</see>
    <see>java.lang.Math</see>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="Distributions" />
  <javadoc>
    <text>Returns the probability distribution function of the discrete geometric distribution.
 * &lt;p&gt;
 * &lt;tt&gt;p(k) = p * (1-p)^k&lt;/tt&gt; for &lt;tt&gt; k &amp;gt;= 0&lt;/tt&gt;.
 * &lt;p&gt;</text>
    <param>k the argument to the probability distribution function.</param>
    <param>p the parameter of the probability distribution function.</param>
  </javadoc>
  <method type="double" name="geometricPdf" />
  <javadoc>
    <text>Returns a random number from the Burr II, VII, VIII, X Distributions.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
 * This is a port of &lt;tt&gt;burr1.c&lt;/tt&gt; from the &lt;A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
 * C-RAND's implementation, in turn, is based upon
 * &lt;p&gt;
 * L. Devroye (1986): Non-Uniform Random Variate Generation, Springer Verlag, New York.                                      
 * &lt;p&gt;</text>
    <param>r must be &amp;gt; 0.</param>
    <param>nr the number of the burr distribution (e.g. 2,7,8,10).</param>
  </javadoc>
  <method type="double" name="nextBurr1">
    <declaration type="double" name="y" />
    <javadoc>
      <text>*
 * Burr II, VII, VIII, X Distributions - Inversion         
 * *
 * *
 * FUNCTION :   - burr1 samples a random number from one of the   
 * Burr II, VII, VIII, X distributions with        
 * parameter  r &gt; 0 , where the no. of the         
 * distribution is indicated by a pointer          
 * variable.                                       
 * REFERENCE :  - L. Devroye (1986): Non-Uniform Random Variate   
 * Generation, Springer Verlag, New York.          
 * SUBPROGRAM : - drand(seed) ... (0,1)-uniform generator with    
 * unsigned long integer *seed.                    
 * *</text>
    </javadoc>
    <comment>y=Math.exp(Math.log(randomGenerator.raw())r);                                 y=u^(1r)</comment>
    <comment>BURR II</comment>
    <comment>BURR VII</comment>
    <comment>BURR VIII</comment>
    <comment>BURR X</comment>
  </method>
  <javadoc>
    <text>Returns a random number from the Burr III, IV, V, VI, IX, XII distributions.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
 * This is a port of &lt;tt&gt;burr2.c&lt;/tt&gt; from the &lt;A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
 * C-RAND's implementation, in turn, is based upon
 * &lt;p&gt;
 * L. Devroye (1986): Non-Uniform Random Variate Generation, Springer Verlag, New York.                                      
 * &lt;p&gt;</text>
    <param>r must be &amp;gt; 0.</param>
    <param>k must be &amp;gt; 0.</param>
    <param>nr the number of the burr distribution (e.g. 3,4,5,6,9,12).</param>
  </javadoc>
  <method type="double" name="nextBurr2">
    <declaration type="double" name="y" />
    <javadoc>
      <text>*
 * Burr III, IV, V, VI, IX, XII Distribution - Inversion     
 * *
 * *
 * FUNCTION :   - burr2 samples a random number from one of the   
 * Burr III, IV, V, VI, IX, XII distributions with 
 * parameters r &gt; 0 and k &gt; 0, where the no. of    
 * the distribution is indicated by a pointer      
 * variable.                                       
 * REFERENCE :  - L. Devroye (1986): Non-Uniform Random Variate   
 * Generation, Springer Verlag, New York.          
 * SUBPROGRAM : - drand(seed) ... (0,1)-Uniform generator with    
 * unsigned long integer *seed.                    
 * *</text>
    </javadoc>
    <comment>U(0/1)</comment>
    <comment>u^(-1/r) - 1</comment>
    <comment>BURR III</comment>
    <comment>y^(-1/k)</comment>
    <comment>BURR IV</comment>
    <comment>y^k + 1</comment>
    <comment>BURR V</comment>
    <comment>arctan[log(y/k)]</comment>
    <comment>BURR VI</comment>
    <comment>BURR IX</comment>
    <comment>y^(1/r) -1</comment>
    <comment>BURR XII</comment>
    <comment>y^(1/k)</comment>
  </method>
  <javadoc>
    <text>Returns a cauchy distributed random number from the standard Cauchy distribution C(0,1).  
 * &lt;A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node25.html#SECTION000250000000000000000"&gt; math definition&lt;/A&gt;
 * and &lt;A HREF="http://www.statsoft.com/textbook/glosc.html#Cauchy Distribution"&gt; animated definition&lt;/A&gt;. 
 * &lt;p&gt;
 * &lt;tt&gt;p(x) = 1/ (mean*pi * (1+(x/mean)^2))&lt;/tt&gt;.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt;
 * This is a port of &lt;tt&gt;cin.c&lt;/tt&gt; from the &lt;A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
 * &lt;p&gt;</text>
    <returns>a number in the open unit interval &lt;code&gt;(0.0,1.0)&lt;/code&gt; (excluding 0.0 and 1.0).</returns>
  </javadoc>
  <method type="double" name="nextCauchy" />
  <javadoc>
    <text>Returns an erlang distributed random number with the given variance and mean.</text>
  </javadoc>
  <method type="double" name="nextErlang">
    <declaration type="int" name="k" />
    <declaration type="double" name="a" />
    <declaration type="double" name="prod" />
  </method>
  <javadoc>
    <text>Returns a discrete geometric distributed random number; &lt;A HREF="http://www.statsoft.com/textbook/glosf.html#Geometric Distribution"&gt;Definition&lt;/A&gt;.
 * &lt;p&gt;
 * &lt;tt&gt;p(k) = p * (1-p)^k&lt;/tt&gt; for &lt;tt&gt; k &amp;gt;= 0&lt;/tt&gt;.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
 * This is a port of &lt;tt&gt;geo.c&lt;/tt&gt; from the &lt;A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"&gt;C-RAND / WIN-RAND&lt;/A&gt; library.</text>
    <param>p must satisfy &lt;tt&gt;0 &amp;lt; p &amp;lt; 1&lt;/tt&gt;.
 * &lt;p&gt;</param>
  </javadoc>
  <method type="int" name="nextGeometric">
    <declaration type="double" name="u" />
    <javadoc>
      <text>*
 * Geometric Distribution - Inversion                
 * *
 * *
 * On generating random numbers of a discrete distribution by     
 * Inversion normally sequential search is necessary, but in the  
 * case of the Geometric distribution a direct transformation is  
 * possible because of the special parallel to the continuous     
 * Exponential distribution Exp(t):                               
 * X - Exp(t): G(x)=1-exp(-tx)                                 
 * Geo(p): pk=G(k+1)-G(k)=exp(-tk)*(1-exp(-t))             
 * p=1-exp(-t)                                     
 * A random number of the Geometric distribution Geo(p) is        
 * obtained by k=(long int)x, where x is from Exp(t) with         
 * parameter t=-log(1-p).                                         
 * *
 * *
 * FUNCTION:    - geo samples a random number from the Geometric  
 * distribution with parameter 0&lt;p&lt;1.              
 * SUBPROGRAMS: - drand(seed) ... (0,1)-Uniform generator with    
 * unsigned long integer *seed.                    
 * *</text>
    </javadoc>
  </method>
  <javadoc>
    <text>Returns a lambda distributed random number with parameters l3 and l4.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
 * This is a port of &lt;tt&gt;lamin.c&lt;/tt&gt; from the &lt;A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
 * C-RAND's implementation, in turn, is based upon
 * &lt;p&gt;
 * J.S. Ramberg, B:W. Schmeiser (1974): An approximate method for generating asymmetric variables, Communications ACM 17, 78-82.
 * &lt;p&gt;</text>
  </javadoc>
  <method type="double" name="nextLambda">
    <declaration type="double" name="l_sign" />
    <declaration type="double" name="u" />
    <declaration type="double" name="x" />
    <comment>sign(l)</comment>
    <comment>U(0/1)</comment>
  </method>
  <javadoc>
    <text>Returns a Laplace (Double Exponential) distributed random number from the standard Laplace distribution L(0,1).  
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
 * This is a port of &lt;tt&gt;lapin.c&lt;/tt&gt; from the &lt;A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
 * &lt;p&gt;</text>
    <returns>a number in the open unit interval &lt;code&gt;(0.0,1.0)&lt;/code&gt; (excluding 0.0 and 1.0).</returns>
  </javadoc>
  <method type="double" name="nextLaplace">
    <declaration type="double" name="u" />
  </method>
  <javadoc>
    <text>Returns a random number from the standard Logistic distribution Log(0,1).
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
 * This is a port of &lt;tt&gt;login.c&lt;/tt&gt; from the &lt;A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"&gt;C-RAND / WIN-RAND&lt;/A&gt; library.</text>
  </javadoc>
  <method type="double" name="nextLogistic">
    <declaration type="double" name="u" />
  </method>
  <javadoc>
    <text>Returns a power-law distributed random number with the given exponent and lower cutoff.</text>
    <param>alpha the exponent</param>
    <param>cut the lower cutoff</param>
  </javadoc>
  <method type="double" name="nextPowLaw" />
  <javadoc>
    <text>Returns a random number from the standard Triangular distribution in (-1,1).
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt; Inversion method.
 * This is a port of &lt;tt&gt;tra.c&lt;/tt&gt; from the &lt;A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
 * &lt;p&gt;</text>
  </javadoc>
  <method type="double" name="nextTriangular">
    <declaration type="double" name="u" />
    <javadoc>
      <text>*
 * Triangular Distribution - Inversion: x = +-(1-sqrt(u))     
 * *
 * *
 * FUNCTION :   - tra samples a random number from the            
 * standard Triangular distribution in (-1,1)      
 * SUBPROGRAM : - drand(seed) ... (0,1)-Uniform generator with    
 * unsigned long integer *seed.                    
 * *</text>
    </javadoc>
    <comment>if (u&lt;=0.5) return(Math.sqrt(2.0u)-1.0);                       -1 &lt;= x &lt;= 0</comment>
    <comment>else return(1.0-Math.sqrt(2.0(1.0-u)));                   0 &lt;= x &lt;= 1</comment>
  </method>
  <javadoc>
    <text>Returns a weibull distributed random number. 
 * Polar method.
 * See Simulation, Modelling &amp; Analysis by Law &amp; Kelton, pp259</text>
  </javadoc>
  <method type="double" name="nextWeibull">
    <comment>Polar method.</comment>
    <comment>See Simulation, Modelling &amp; Analysis by Law &amp; Kelton, pp259</comment>
  </method>
  <javadoc>
    <text>Returns a zipfian distributed random number with the given skew.
 * &lt;p&gt;
 * Algorithm from page 551 of:
 * Devroye, Luc (1986) `Non-uniform random variate generation',
 * Springer-Verlag: Berlin.   ISBN 3-540-96305-7 (also 0-387-96305-7)</text>
    <param>z the skew of the distribution (must be &amp;gt;1.0).</param>
    <returns>a zipfian distributed number in the closed interval &lt;tt&gt;[1,Integer.MAX_VALUE]&lt;/tt&gt;.</returns>
  </javadoc>
  <method type="int" name="nextZipfInt">
    <declaration type="double" name="b" />
    <declaration type="double" name="constant" />
    <declaration type="int" name="result" />
    <scope>
      <declaration type="double" name="u" />
      <declaration type="double" name="v" />
      <declaration type="double" name="t" />
    </scope>
    <comment>Algorithm from page 551 of:
 Devroye, Luc (1986) `Non-uniform random variate generation',
 Springer-Verlag: Berlin.   ISBN 3-540-96305-7 (also 0-387-96305-7)</comment>
  </method>
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
