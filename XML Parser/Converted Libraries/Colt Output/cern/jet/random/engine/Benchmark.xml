<?xml version="1.0" encoding="UTF-8"?>
<class name="Benchmark">
  <javadoc>
    <text>Benchmarks the performance of the currently provided uniform pseudo-random number generation engines.
 * &lt;p&gt;
 * All distributions are obtained by using a &lt;b&gt;uniform&lt;/b&gt; pseudo-random number generation engine.
 * followed by a transformation to the desired distribution.
 * Therefore, the performance of the uniform engines is crucial.
 * &lt;p&gt;
 * &lt;h2 align=center&gt;Comparison of uniform generation engines&lt;/h2&gt;
 * &lt;center&gt;
 * &lt;table border&gt;
 * &lt;tr&gt; 
 * &lt;td align="center" width="40%"&gt;Name&lt;/td&gt;
 * &lt;td align="center" width="20%"&gt;Period&lt;/td&gt;
 * &lt;td align="center" width="40%"&gt;
 * &lt;p&gt;Speed&lt;br&gt;
 * [# million uniform random numbers generated/sec]&lt;br&gt;
 * Pentium Pro 200 Mhz, JDK 1.2, NT&lt;/p&gt;
 * &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt; 
 * &lt;td align="center" width="40%"&gt; &lt;tt&gt;MersenneTwister&lt;/tt&gt;&lt;/td&gt;
 * &lt;td align="center" width="20%"&gt;2&lt;sup&gt;19937&lt;/sup&gt;-1 (=10&lt;sup&gt;6001&lt;/sup&gt;)&lt;/td&gt;
 * &lt;td align="center" width="40"&gt;2.5&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt; 
 * &lt;td align="center" width="40%"&gt; &lt;tt&gt;Ranlux&lt;/tt&gt; (default luxury level 3) &lt;/td&gt;
 * &lt;td align="center" width="20%"&gt;10&lt;sup&gt;171&lt;/sup&gt;&lt;/td&gt;
 * &lt;td align="center" width="40"&gt;0.4&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt; 
 * &lt;td align="center" width="40"&gt; &lt;tt&gt;Ranmar&lt;/tt&gt;&lt;/td&gt;
 * &lt;td align="center" width="20"&gt;10&lt;sup&gt;43&lt;/sup&gt;&lt;/td&gt;
 * &lt;td align="center" width="40%"&gt;1.6&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt; 
 * &lt;td align="center" width="40%"&gt; &lt;tt&gt;Ranecu&lt;/tt&gt; &lt;/td&gt;
 * &lt;td align="center" width="20"&gt;10&lt;sup&gt;18&lt;/sup&gt;&lt;/td&gt;
 * &lt;td align="center" width="40%"&gt;1.5&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt; 
 * &lt;td align="center"&gt; &lt;tt&gt;java.util.Random.nextFloat() &lt;/tt&gt;&lt;tt&gt; 
 * &lt;/tt&gt;&lt;/td&gt;
 * &lt;td align="center"&gt;&lt;font size=+3&gt;?&lt;/font&gt;&lt;/td&gt;
 * &lt;td align="center"&gt;2.4&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;
 * &lt;/center&gt;
 * &lt;p&gt;
 * &lt;b&gt;Note:&lt;/b&gt; Methods working on the default uniform random generator are &lt;b&gt;synchronized&lt;/b&gt; and therefore in current VM's &lt;b&gt;slow&lt;/b&gt; (as of June '99).
 * Methods taking as argument a uniform random generator are &lt;b&gt;not synchronized&lt;/b&gt; and therefore much &lt;b&gt;quicker&lt;/b&gt;.
 * Thus, if you need a lot of random numbers, you should use the unsynchronized approach:
 * &lt;p&gt;
 * &lt;b&gt;Example usage:&lt;/b&gt;&lt;pre&gt;
 * edu.cornell.lassp.houle.RngPack.RandomElement generator;
 * generator = new cern.jet.random.engine.MersenneTwister(new java.util.Date());
 * //generator = new edu.cornell.lassp.houle.RngPack.Ranecu(new java.util.Date());
 * //generator = new edu.cornell.lassp.houle.RngPack.Ranmar(new java.util.Date());
 * //generator = new edu.cornell.lassp.houle.RngPack.Ranlux(new java.util.Date());
 * //generator = makeDefaultGenerator();
 * for (int i=1000000; --i &gt;=0; ) {
 * double uniform = generator.raw();
 * ...
 * }
 * &lt;/pre&gt;</text>
    <see>cern.jet.random</see>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="Benchmark" />
  <javadoc>
    <text>Benchmarks &lt;tt&gt;raw()&lt;/tt&gt; for various uniform generation engines.</text>
  </javadoc>
  <method type="void" name="benchmark">
    <declaration type="cern.colt.Timer" name="timer" />
    <declaration type="RandomEngine" name="gen" />
    <declaration type="float" name="emptyLoop" />
    <declaration type="java.util.Random" name="javaGen" />
    <comment>no operation</comment>
    <comment>gen = new edu.stanford.mt.MersenneTwister();
System.out.println("\n edu.stanford.mt.MersenneTwister:");
timer.reset().start();
for (int i=times; --i&gt;=0; ) gen.raw();
timer.stop().display();
System.out.println(times(timer.elapsedTime()-emptyLoop)+ " numbers per second.");</comment>
    <comment>nextDouble() is slower</comment>
    <comment>gen = new edu.cornell.lassp.houle.RngPack.Ranecu();
System.out.println("\nRanecu:");
timer.reset().start();
for (int i=times; --i&gt;=0; ) gen.raw();
timer.stop().display();
System.out.println(times(timer.elapsedTime()-emptyLoop)+ " numbers per second.");

gen = new edu.cornell.lassp.houle.RngPack.Ranmar();
System.out.println("\nRanmar:");
timer.reset().start();
for (int i=times; --i&gt;=0; ) gen.raw();
timer.stop().display();
System.out.println(times(timer.elapsedTime()-emptyLoop)+ " numbers per second.");

gen = new edu.cornell.lassp.houle.RngPack.Ranlux();
System.out.println("\nRanlux:");
timer.reset().start();
for (int i=times; --i&gt;=0; ) gen.raw();
timer.stop().display();
System.out.println(times(timer.elapsedTime()-emptyLoop)+ " numbers per second.");</comment>
  </method>
  <javadoc>
    <text>Tests various methods of this class.</text>
  </javadoc>
  <method type="void" name="main">
    <declaration type="long" name="from" />
    <declaration type="long" name="to" />
    <declaration type="int" name="times" />
    <declaration type="int" name="runs" />
    <scope />
    <comment>testRandomFromTo(from,to,times);</comment>
    <comment>benchmark(1000000);</comment>
    <comment>benchmark(1000000);</comment>
    <comment>benchmarkSync(times);</comment>
  </method>
  <javadoc>
    <text>Prints the first &lt;tt&gt;size&lt;/tt&gt; random numbers generated by the given engine.</text>
  </javadoc>
  <method type="void" name="test">
    <declaration type="RandomEngine" name="random" />
    <scope />
    <comment>System.out.println("raw():");
random = (RandomEngine) randomEngine.clone();
cern.colt.Timer timer = new cern.colt.Timer().start();
for (int j=0, i=size; --i&gt;=0; j++) {
System.out.print(" "+random.raw());
if (j%8==7) System.out.println();
}

System.out.println("\n\nfloat():");
random = (RandomEngine) randomEngine.clone();
for (int j=0, i=size; --i&gt;=0; j++) {
System.out.print(" "+random.nextFloat());
if (j%8==7) System.out.println();
}

System.out.println("\n\ndouble():");
random = (RandomEngine) randomEngine.clone();
for (int j=0, i=size; --i&gt;=0; j++) {
System.out.print(" "+random.nextDouble());
if (j%8==7) System.out.println();
}</comment>
    <comment>timer.stop().display();</comment>
  </method>
  <javadoc>
    <text>Tests various methods of this class.</text>
  </javadoc>
  <method type="void" name="xtestRandomFromTo">
    <declaration type="java.util.Random" name="randomJava" />
    <declaration type="RandomEngine" name="random" />
    <declaration type="int" name="_from" />
    <declaration type="cern.colt.Timer" name="timer" />
    <scope />
    <comment>cern.colt.set.OpenMultiFloatHashSet multiset = new cern.colt.set.OpenMultiFloatHashSet();</comment>
    <comment>edu.cornell.lassp.houle.RngPack.RandomElement random = new edu.cornell.lassp.houle.RngPack.Ranecu();</comment>
    <comment>edu.cornell.lassp.houle.RngPack.RandomElement random = new edu.cornell.lassp.houle.RngPack.MT19937B();</comment>
    <comment>edu.cornell.lassp.houle.RngPack.RandomElement random = new edu.stanford.mt.MersenneTwister();</comment>
    <comment>randomJava.nextInt(10000);</comment>
    <comment>Integers.randomFromTo(_from,_to);</comment>
    <comment>multiset.add(nextIntFromTo(_from,_to));</comment>
    <comment>System.out.println(multiset); check the distribution</comment>
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
