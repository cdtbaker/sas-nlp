<?xml version="1.0" encoding="UTF-8"?>
<class name="RandomEngine">
  <javadoc>
    <text>Abstract base class for uniform pseudo-random number generating engines.
 * &lt;p&gt;
 * Most probability distributions are obtained by using a &lt;b&gt;uniform&lt;/b&gt; pseudo-random number generation engine 
 * followed by a transformation to the desired distribution.
 * Thus, subclasses of this class are at the core of computational statistics, simulations, Monte Carlo methods, etc.
 * &lt;p&gt;
 * Subclasses produce uniformly distributed &lt;tt&gt;int&lt;/tt&gt;'s and &lt;tt&gt;long&lt;/tt&gt;'s in the closed intervals &lt;tt&gt;[Integer.MIN_VALUE,Integer.MAX_VALUE]&lt;/tt&gt; and &lt;tt&gt;[Long.MIN_VALUE,Long.MAX_VALUE]&lt;/tt&gt;, respectively, 
 * as well as &lt;tt&gt;float&lt;/tt&gt;'s and &lt;tt&gt;double&lt;/tt&gt;'s in the open unit intervals &lt;tt&gt;(0.0f,1.0f)&lt;/tt&gt; and &lt;tt&gt;(0.0,1.0)&lt;/tt&gt;, respectively.
 * &lt;p&gt;
 * Subclasses need to override one single method only: &lt;tt&gt;nextInt()&lt;/tt&gt;.
 * All other methods generating different data types or ranges are usually layered upon &lt;tt&gt;nextInt()&lt;/tt&gt;.
 * &lt;tt&gt;long&lt;/tt&gt;'s are formed by concatenating two 32 bit &lt;tt&gt;int&lt;/tt&gt;'s.
 * &lt;tt&gt;float&lt;/tt&gt;'s are formed by dividing the interval &lt;tt&gt;[0.0f,1.0f]&lt;/tt&gt; into 2&lt;sup&gt;32&lt;/sup&gt; sub intervals, then randomly choosing one subinterval.
 * &lt;tt&gt;double&lt;/tt&gt;'s are formed by dividing the interval &lt;tt&gt;[0.0,1.0]&lt;/tt&gt; into 2&lt;sup&gt;64&lt;/sup&gt; sub intervals, then randomly choosing one subinterval.
 * &lt;p&gt;
 * Note that this implementation is &lt;b&gt;not synchronized&lt;/b&gt;.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
    <see>MersenneTwister</see>
    <see>MersenneTwister64</see>
    <see>java.util.Random</see>
  </javadoc>
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="RandomEngine" />
  <javadoc>
    <text>Equivalent to &lt;tt&gt;raw()&lt;/tt&gt;.
 * This has the effect that random engines can now be used as function objects, returning a random number upon function evaluation.</text>
  </javadoc>
  <method type="double" name="apply" />
  <javadoc>
    <text>Equivalent to &lt;tt&gt;nextInt()&lt;/tt&gt;.
 * This has the effect that random engines can now be used as function objects, returning a random number upon function evaluation.</text>
  </javadoc>
  <method type="int" name="apply" />
  <javadoc>
    <text>Constructs and returns a new uniform random number engine seeded with the current time.
 * Currently this is {@link cern.jet.random.engine.MersenneTwister}.</text>
  </javadoc>
  <method type="RandomEngine" name="makeDefault" />
  <javadoc>
    <text>Returns a 64 bit uniformly distributed random number in the open unit interval &lt;code&gt;(0.0,1.0)&lt;/code&gt; (excluding 0.0 and 1.0).</text>
  </javadoc>
  <method type="double" name="nextDouble">
    <declaration type="double" name="nextDouble" />
    <scope />
    <comment>-9.223372036854776E18 == (double) Long.MIN_VALUE</comment>
    <comment>5.421010862427522E-20 == 1 / Math.pow(2,64) == 1 / ((double) Long.MAX_VALUE - (double) Long.MIN_VALUE);</comment>
    <comment>catch loss of precision of long --&gt; double conversion</comment>
    <comment>--&gt; in (0.0,1.0)</comment>
    <comment>nextLong == Long.MAX_VALUE         --&gt; 1.0
nextLong == Long.MIN_VALUE         --&gt; 0.0
nextLong == Long.MAX_VALUE-1       --&gt; 1.0
nextLong == Long.MAX_VALUE-100000L --&gt; 0.9999999999999946
nextLong == Long.MIN_VALUE+1       --&gt; 0.0
nextLong == Long.MIN_VALUE-100000L --&gt; 0.9999999999999946
nextLong == 1L                     --&gt; 0.5
nextLong == -1L                    --&gt; 0.5
nextLong == 2L                     --&gt; 0.5
nextLong == -2L                    --&gt; 0.5
nextLong == 2L+100000L             --&gt; 0.5000000000000054
nextLong == -2L-100000L            --&gt; 0.49999999999999456</comment>
  </method>
  <javadoc>
    <text>Returns a 32 bit uniformly distributed random number in the open unit interval &lt;code&gt;(0.0f,1.0f)&lt;/code&gt; (excluding 0.0f and 1.0f).</text>
  </javadoc>
  <method type="float" name="nextFloat">
    <declaration type="float" name="nextFloat" />
    <scope />
    <comment>catch loss of precision of double --&gt; float conversion</comment>
    <comment>--&gt; in (0.0f,1.0f)</comment>
  </method>
  <method name="nextInt" type="int" />
  <javadoc>
    <text>Returns a 32 bit uniformly distributed random number in the closed interval &lt;tt&gt;[Integer.MIN_VALUE,Integer.MAX_VALUE]&lt;/tt&gt; (including &lt;tt&gt;Integer.MIN_VALUE&lt;/tt&gt; and &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;);</text>
  </javadoc>
  <javadoc>
    <text>Returns a 64 bit uniformly distributed random number in the closed interval &lt;tt&gt;[Long.MIN_VALUE,Long.MAX_VALUE]&lt;/tt&gt; (including &lt;tt&gt;Long.MIN_VALUE&lt;/tt&gt; and &lt;tt&gt;Long.MAX_VALUE&lt;/tt&gt;).</text>
  </javadoc>
  <method type="long" name="nextLong">
    <comment>concatenate two 32-bit strings into one 64-bit string</comment>
  </method>
  <javadoc>
    <text>Returns a 32 bit uniformly distributed random number in the open unit interval &lt;code&gt;(0.0,1.0)&lt;/code&gt; (excluding 0.0 and 1.0).</text>
  </javadoc>
  <method type="double" name="raw">
    <declaration type="int" name="nextInt" />
    <scope />
    <comment>accept anything but zero</comment>
    <comment>in [Integer.MIN_VALUE,Integer.MAX_VALUE]-interval</comment>
    <comment>transform to (0.0,1.0)-interval</comment>
    <comment>2.3283064365386963E-10 == 1.0 / Math.pow(2,32)</comment>
    <comment>nextInt == Integer.MAX_VALUE   --&gt; 0.49999999976716936
nextInt == Integer.MIN_VALUE   --&gt; 0.5
nextInt == Integer.MAX_VALUE-1 --&gt; 0.4999999995343387
nextInt == Integer.MIN_VALUE+1 --&gt; 0.5000000002328306
nextInt == 1                   --&gt; 2.3283064365386963E-10
nextInt == -1                  --&gt; 0.9999999997671694
nextInt == 2                   --&gt; 4.6566128730773926E-10
nextInt == -2                  --&gt; 0.9999999995343387</comment>
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>public abstract class RandomEngine extends edu.cornell.lassp.houle.RngPack.RandomSeedable implements cern.colt.function.DoubleFunction, cern.colt.function.IntFunction {</comment>
</class>
