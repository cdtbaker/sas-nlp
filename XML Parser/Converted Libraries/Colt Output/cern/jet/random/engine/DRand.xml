<?xml version="1.0" encoding="UTF-8"?>
<class name="DRand">
  <javadoc>
    <text>Quick medium quality uniform pseudo-random number generator.
 * Produces uniformly distributed &lt;tt&gt;int&lt;/tt&gt;'s and &lt;tt&gt;long&lt;/tt&gt;'s in the closed intervals &lt;tt&gt;[Integer.MIN_VALUE,Integer.MAX_VALUE]&lt;/tt&gt; and &lt;tt&gt;[Long.MIN_VALUE,Long.MAX_VALUE]&lt;/tt&gt;, respectively, 
 * as well as &lt;tt&gt;float&lt;/tt&gt;'s and &lt;tt&gt;double&lt;/tt&gt;'s in the open unit intervals &lt;tt&gt;(0.0f,1.0f)&lt;/tt&gt; and &lt;tt&gt;(0.0,1.0)&lt;/tt&gt;, respectively.
 * &lt;p&gt;
 * The seed can be any integer satisfying &lt;tt&gt;0 &amp;lt; 4*seed+1 &amp;lt; 2&lt;sup&gt;32&lt;/sup&gt;&lt;/tt&gt;.
 * In other words, there must hold &lt;tt&gt;seed &amp;gt;= 0 &amp;&amp; seed &amp;lt; 1073741823&lt;/tt&gt;.
 * &lt;p&gt;
 * &lt;b&gt;Quality:&lt;/b&gt; This generator follows the multiplicative congruential method of the form                    
 * &lt;dt&gt;
 * &lt;tt&gt;z(i+1) = a * z(i) (mod m)&lt;/tt&gt; with
 * &lt;tt&gt;a=663608941 (=0X278DDE6DL), m=2&lt;sup&gt;32&lt;/sup&gt;&lt;/tt&gt;.
 * &lt;dt&gt;
 * &lt;tt&gt;z(i)&lt;/tt&gt; assumes all different values &lt;tt&gt;0 &amp;lt; 4*seed+1 &amp;lt; m&lt;/tt&gt; during a full period of 2&lt;sup&gt;30&lt;/sup&gt;.
 * &lt;p&gt;
 * &lt;b&gt;Performance:&lt;/b&gt; TO_DO
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt; TO_DO
 * &lt;p&gt;
 * Note that this implementation is &lt;b&gt;not synchronized&lt;/b&gt;.                                  
 * &lt;p&gt;</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
    <see>MersenneTwister</see>
    <see>java.util.Random</see>
  </javadoc>
  <declaration type="int" name="current" />
  <declaration type="int" name="DEFAULT_SEED" />
  <javadoc>
    <text>Constructs and returns a random number generator with a default seed, which is a &lt;b&gt;constant&lt;/b&gt;.</text>
  </javadoc>
  <method type="constructor" name="DRand" />
  <javadoc>
    <text>Constructs and returns a random number generator with the given seed.</text>
    <param>seed should not be 0, in such a case &lt;tt&gt;DRand.DEFAULT_SEED&lt;/tt&gt; is substituted.</param>
  </javadoc>
  <method type="constructor" name="DRand" />
  <javadoc>
    <text>Constructs and returns a random number generator seeded with the given date.</text>
    <param>d typically &lt;tt&gt;new java.util.Date()&lt;/tt&gt;</param>
  </javadoc>
  <method type="constructor" name="DRand" />
  <javadoc>
    <text>Returns a 32 bit uniformly distributed random number in the closed interval &lt;tt&gt;[Integer.MIN_VALUE,Integer.MAX_VALUE]&lt;/tt&gt; (including &lt;tt&gt;Integer.MIN_VALUE&lt;/tt&gt; and &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;).</text>
  </javadoc>
  <method type="int" name="nextInt">
    <comment>current = 0x278DDE6D;      z(i+1)=az(i) (mod 232)</comment>
    <comment>a == 0x278DDE6D == 663608941</comment>
  </method>
  <javadoc>
    <text>Sets the receiver's seed. 
 * This method resets the receiver's entire internal state.
 * The following condition must hold: &lt;tt&gt;seed &amp;gt;= 0 &amp;&amp; seed &amp;lt; (2&lt;sup&gt;32&lt;/sup&gt;-1) / 4&lt;/tt&gt;.</text>
    <param>seed if the above condition does not hold, a modified seed that meets the condition is silently substituted.</param>
  </javadoc>
  <method type="void" name="setSeed">
    <declaration type="int" name="limit" />
    <comment>--&gt; 536870911</comment>
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
