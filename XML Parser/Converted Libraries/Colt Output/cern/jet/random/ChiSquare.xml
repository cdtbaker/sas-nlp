<?xml version="1.0" encoding="UTF-8"?>
<class name="ChiSquare">
  <javadoc>
    <text>ChiSquare distribution; See the &lt;A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node31.html#SECTION000310000000000000000"&gt; math definition&lt;/A&gt;
 * and &lt;A HREF="http://www.statsoft.com/textbook/glosc.html#Chi-square Distribution"&gt; animated definition&lt;/A&gt;.
 * &lt;dt&gt;A special case of the Gamma distribution.
 * &lt;p&gt;
 * &lt;tt&gt;p(x) = (1/g(f/2)) * (x/2)^(f/2-1) * exp(-x/2)&lt;/tt&gt; with &lt;tt&gt;g(a)&lt;/tt&gt; being the gamma function and &lt;tt&gt;f&lt;/tt&gt; being the degrees of freedom.
 * &lt;p&gt;
 * Valid parameter ranges: &lt;tt&gt;freedom &amp;gt; 0&lt;/tt&gt;.
 * &lt;p&gt; 
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * &lt;dt&gt;
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt; 
 * &lt;dt&gt;
 * Method: Ratio of Uniforms with shift.
 * &lt;dt&gt;
 * High performance implementation. This is a port of &lt;A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandChiSquare.html"&gt;RandChiSquare&lt;/A&gt; used in &lt;A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep"&gt;CLHEP 1.4.0&lt;/A&gt; (C++).
 * CLHEP's implementation, in turn, is based on &lt;tt&gt;chru.c&lt;/tt&gt; from the &lt;A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
 * C-RAND's implementation, in turn, is based upon
 * &lt;p&gt;J.F. Monahan (1987): An algorithm for generating chi random variables, ACM Trans. Math. Software 13, 168-172.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="double" name="freedom" />
  <declaration type="double" name="freedom_in" />
  <declaration type="ChiSquare" name="shared" />
  <javadoc>
    <text>Constructs a ChiSquare distribution.
 * Example: freedom=1.0.</text>
    <param>freedom degrees of freedom.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;freedom &amp;lt; 1.0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="constructor" name="ChiSquare" />
  <javadoc>
    <text>Returns the cumulative distribution function.</text>
  </javadoc>
  <method type="double" name="cdf" />
  <javadoc>
    <text>Returns a random number from the distribution.</text>
  </javadoc>
  <method type="double" name="nextDouble" />
  <javadoc>
    <text>Returns a random number from the distribution; bypasses the internal state.</text>
    <param>freedom degrees of freedom.
 * It should hold &lt;tt&gt;freedom &amp;lt; 1.0&lt;/tt&gt;.</param>
  </javadoc>
  <method type="double" name="nextDouble">
    <declaration type="double" name="u" />
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
    </scope>
    <javadoc>
      <text>*
 * Chi Distribution - Ratio of Uniforms  with shift        
 * *
 * *
 * FUNCTION :   - chru samples a random number from the Chi       
 * distribution with parameter  a &gt; 1.             
 * REFERENCE :  - J.F. Monahan (1987): An algorithm for           
 * generating chi random variables, ACM Trans.     
 * Math. Software 13, 168-172.                     
 * SUBPROGRAM : - anEngine  ... pointer to a (0,1)-Uniform        
 * engine                                          
 * *
 * Implemented by R. Kremer, 1990</text>
    </javadoc>
    <comment>if( a &lt; 1 )  return (-1.0);  Check for invalid input value</comment>
  </method>
  <javadoc>
    <text>Returns the probability distribution function.</text>
  </javadoc>
  <method type="double" name="pdf">
    <declaration type="double" name="logGamma" />
  </method>
  <javadoc>
    <text>Sets the distribution parameter.</text>
    <param>freedom degrees of freedom.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;freedom &amp;lt; 1.0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="setState" />
  <javadoc>
    <text>Returns a random number from the distribution.</text>
    <param>freedom degrees of freedom.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;freedom &amp;lt; 1.0&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="double" name="staticNextDouble">
    <scope />
  </method>
  <javadoc>
    <text>Returns a String representation of the receiver.</text>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</text>
    <param>randomGenerator the new uniform random number generator to be shared.</param>
  </javadoc>
  <method type="void" name="xstaticSetRandomGenerator">
    <scope />
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>cached vars for method nextDouble(a) (for performance only)</comment>
  <comment>The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</comment>
</class>
