<?xml version="1.0" encoding="UTF-8"?>
<class name="Normal">
  <javadoc>
    <text>Normal (aka Gaussian) distribution; See the &lt;A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node188.html#SECTION0001880000000000000000"&gt; math definition&lt;/A&gt;
 * and &lt;A HREF="http://www.statsoft.com/textbook/glosn.html#Normal Distribution"&gt; animated definition&lt;/A&gt;.
 * &lt;pre&gt;                       
 * 1                       2
 * pdf(x) = ---------    exp( - (x-mean) / 2v ) 
 * sqrt(2pi*v)
 * x
 * -
 * 1        | |                 2
 * cdf(x) = ---------    |    exp( - (t-mean) / 2v ) dt
 * sqrt(2pi*v)| |
 * -
 * -inf.
 * &lt;/pre&gt;
 * where &lt;tt&gt;v = variance = standardDeviation^2&lt;/tt&gt;.
 * &lt;p&gt;
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * &lt;dt&gt;
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt; Polar Box-Muller transformation. See 
 * G.E.P. Box, M.E. Muller (1958): A note on the generation of random normal deviates, Annals Math. Statist. 29, 610-611.
 * &lt;p&gt;</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="double" name="mean" />
  <declaration type="double" name="variance" />
  <declaration type="double" name="standardDeviation" />
  <declaration type="double" name="cache" />
  <declaration type="boolean" name="cacheFilled" />
  <declaration type="double" name="SQRT_INV" />
  <declaration type="Normal" name="shared" />
  <javadoc>
    <text>Constructs a normal (gauss) distribution.
 * Example: mean=0.0, standardDeviation=1.0.</text>
  </javadoc>
  <method type="constructor" name="Normal" />
  <javadoc>
    <text>Returns the cumulative distribution function.</text>
  </javadoc>
  <method type="double" name="cdf" />
  <javadoc>
    <text>Returns a random number from the distribution.</text>
  </javadoc>
  <method type="double" name="nextDouble" />
  <javadoc>
    <text>Returns a random number from the distribution; bypasses the internal state.</text>
  </javadoc>
  <method type="double" name="nextDouble">
    <scope />
    <declaration type="double" name="x" />
    <scope />
    <comment>Uses polar Box-Muller transformation.</comment>
  </method>
  <javadoc>
    <text>Returns the probability distribution function.</text>
  </javadoc>
  <method type="double" name="pdf">
    <declaration type="double" name="diff" />
  </method>
  <javadoc>
    <text>Sets the uniform random generator internally used.</text>
  </javadoc>
  <method type="void" name="setRandomGenerator" />
  <javadoc>
    <text>Sets the mean and variance.</text>
  </javadoc>
  <method type="void" name="setState">
    <scope />
  </method>
  <javadoc>
    <text>Returns a random number from the distribution with the given mean and standard deviation.</text>
  </javadoc>
  <method type="double" name="staticNextDouble">
    <scope />
  </method>
  <javadoc>
    <text>Returns a String representation of the receiver.</text>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</text>
    <param>randomGenerator the new uniform random number generator to be shared.</param>
  </javadoc>
  <method type="void" name="xstaticSetRandomGenerator">
    <scope />
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>cache for Box-Mueller algorithm</comment>
  <comment>Box-Mueller</comment>
  <comment>performance cache</comment>
  <comment>The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</comment>
</class>
