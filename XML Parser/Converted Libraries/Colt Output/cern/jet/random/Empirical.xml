<?xml version="1.0" encoding="UTF-8"?>
<class name="Empirical">
  <javadoc>
    <text>Empirical distribution.
 * &lt;p&gt;
 * The probability distribution function (pdf) must be provided by the user as an array of positive real numbers. 
 * The pdf does not need to be provided in the form of relative probabilities, absolute probabilities are also accepted.
 * &lt;p&gt;
 * If &lt;tt&gt;interpolationType == LINEAR_INTERPOLATION&lt;/tt&gt; a linear interpolation within the bin is computed, resulting in a constant density within each bin.
 * &lt;dt&gt;
 * If &lt;tt&gt;interpolationType == NO_INTERPOLATION&lt;/tt&gt; no interpolation is performed and the result is a discrete distribution.  
 * &lt;p&gt;
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * &lt;dt&gt;
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt;
 * A uniform random number is generated using a user supplied generator.
 * The uniform number is then transformed to the user's distribution using the cumulative probability distribution constructed from the pdf.
 * The cumulative distribution is inverted using a binary search for the nearest bin boundary. 
 * &lt;p&gt;
 * This is a port of &lt;A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep/manual/RefGuide/Random/RandGeneral.html"&gt;RandGeneral&lt;/A&gt; used in &lt;A HREF="http://wwwinfo.cern.ch/asd/lhc++/clhep"&gt;CLHEP 1.4.0&lt;/A&gt; (C++).</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="double[]" name="cdf" />
  <declaration type="int" name="interpolationType" />
  <declaration type="int" name="LINEAR_INTERPOLATION" />
  <declaration type="int" name="NO_INTERPOLATION" />
  <javadoc>
    <text>Constructs an Empirical distribution.
 * The probability distribution function (pdf) is an array of positive real numbers. 
 * It need not be provided in the form of relative probabilities, absolute probabilities are also accepted.
 * The &lt;tt&gt;pdf&lt;/tt&gt; must satisfy both of the following conditions
 * &lt;ul&gt;
 * &lt;li&gt;&lt;tt&gt;0.0 &amp;lt;= pdf[i] : 0&amp;lt;=i&amp;lt;=pdf.length-1&lt;/tt&gt;
 * &lt;li&gt;&lt;tt&gt;0.0 &amp;lt; Sum(pdf[i]) : 0&amp;lt;=i&amp;lt;=pdf.length-1&lt;/tt&gt;
 * &lt;/ul&gt;</text>
    <param>pdf the probability distribution function.</param>
    <param>interpolationType can be either &lt;tt&gt;Empirical.NO_INTERPOLATION&lt;/tt&gt; or &lt;tt&gt;Empirical.LINEAR_INTERPOLATION&lt;/tt&gt;.</param>
    <param>randomGenerator a uniform random number generator.</param>
    <throws>IllegalArgumentException if at least one of the three conditions above is violated.</throws>
  </javadoc>
  <method type="constructor" name="Empirical" />
  <javadoc>
    <text>Returns the cumulative distribution function.</text>
  </javadoc>
  <method type="double" name="cdf" />
  <javadoc>
    <text>Returns a deep copy of the receiver; the copy will produce identical sequences.
 * After this call has returned, the copy and the receiver have equal but separate state.</text>
    <return>a copy of the receiver.</return>
  </javadoc>
  <method type="Object" name="clone">
    <declaration type="Empirical" name="copy" />
  </method>
  <javadoc>
    <text>Returns a random number from the distribution.</text>
  </javadoc>
  <method type="double" name="nextDouble">
    <declaration type="double" name="rand" />
    <declaration type="int" name="nBins" />
    <declaration type="int" name="nbelow" />
    <declaration type="int" name="nabove" />
    <scope>
      <declaration type="int" name="middle" />
    </scope>
    <scope />
    <scope>
      <declaration type="double" name="binMeasure" />
      <scope />
      <declaration type="double" name="binFraction" />
    </scope>
    <comment>Non-existing pdf</comment>
    <comment>binary search in cumulative distribution function:</comment>
    <comment>largest k such that I[k] is known to be &lt;= rand</comment>
    <comment>largest k such that I[k] is known to be &gt;  rand</comment>
    <comment>div 2</comment>
    <comment>after this binary search, nabove is always nbelow+1 and they straddle rand:</comment>
    <comment>binMeasure is always aProbFunc[nbelow],</comment>
    <comment>but we don't have aProbFunc any more so we subtract.</comment>
    <comment>rand lies right in a bin of measure 0.  Simply return the center</comment>
    <comment>of the range of that bin.  (Any value between k/N and (k+1)/N is</comment>
    <comment>equally good, in this rare case.)</comment>
    <comment>illegal interpolation type</comment>
  </method>
  <javadoc>
    <text>Returns the probability distribution function.</text>
  </javadoc>
  <method type="double" name="pdf">
    <comment>if (x &lt; 0 || x &gt; cdf.length-2) return 0.0;</comment>
    <comment>int k = (int) x;</comment>
    <comment>return cdf[k-1] - cdf[k];</comment>
  </method>
  <javadoc>
    <text>Returns the probability distribution function.</text>
  </javadoc>
  <method type="double" name="pdf" />
  <javadoc>
    <text>Sets the distribution parameters.
 * The &lt;tt&gt;pdf&lt;/tt&gt; must satisfy both of the following conditions
 * &lt;ul&gt;
 * &lt;li&gt;&lt;tt&gt;0.0 &amp;lt;= pdf[i] : 0 &amp;lt; =i &amp;lt;= pdf.length-1&lt;/tt&gt;
 * &lt;li&gt;&lt;tt&gt;0.0 &amp;lt; Sum(pdf[i]) : 0 &amp;lt;=i &amp;lt;= pdf.length-1&lt;/tt&gt;
 * &lt;/ul&gt;</text>
    <param>pdf probability distribution function.</param>
    <param>interpolationType can be either &lt;tt&gt;Empirical.NO_INTERPOLATION&lt;/tt&gt; or &lt;tt&gt;Empirical.LINEAR_INTERPOLATION&lt;/tt&gt;.</param>
    <throws>IllegalArgumentException if at least one of the three conditions above is violated.</throws>
  </javadoc>
  <method type="void" name="setState">
    <scope />
    <scope />
    <declaration type="int" name="nBins" />
    <scope>
      <declaration type="double" name="prob" />
    </scope>
    <scope />
    <comment>throw new IllegalArgumentException("Non-existing pdf");</comment>
    <comment>compute cumulative distribution function (cdf) from probability distribution function (pdf)</comment>
    <comment>cdf is now cached...</comment>
  </method>
  <javadoc>
    <text>Returns a String representation of the receiver.</text>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="String" name="interpolation" />
  </method>
  <javadoc>
    <text>Not yet commented.</text>
    <return>int</return>
  </javadoc>
  <method type="int" name="xnBins" />
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>cumulative distribution function</comment>
</class>
