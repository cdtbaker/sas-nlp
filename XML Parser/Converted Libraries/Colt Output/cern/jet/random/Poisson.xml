<?xml version="1.0" encoding="UTF-8"?>
<class name="Poisson">
  <javadoc>
    <text>Poisson distribution (quick); See the &lt;A HREF="http://www.cern.ch/RD11/rkb/AN16pp/node208.html#SECTION0002080000000000000000"&gt; math definition&lt;/A&gt;
 * and &lt;A HREF="http://www.statsoft.com/textbook/glosp.html#Poisson Distribution"&gt; animated definition&lt;/A&gt;.
 * &lt;p&gt;
 * &lt;tt&gt;p(k) = (mean^k / k!) * exp(-mean)&lt;/tt&gt; for &lt;tt&gt;k &amp;gt;= 0&lt;/tt&gt;.
 * &lt;p&gt;
 * Valid parameter ranges: &lt;tt&gt;mean &amp;gt; 0&lt;/tt&gt;.
 * Note: if &lt;tt&gt;mean &amp;lt;= 0.0&lt;/tt&gt; then always returns zero.
 * &lt;p&gt;
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * &lt;dt&gt;
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt; High performance implementation.
 * Patchwork Rejection/Inversion method.
 * &lt;dt&gt;This is a port of &lt;tt&gt;pprsc.c&lt;/tt&gt; from the &lt;A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
 * C-RAND's implementation, in turn, is based upon
 * &lt;p&gt;
 * H. Zechner (1994): Efficient sampling from continuous and discrete unimodal distributions,
 * Doctoral Dissertation, 156 pp., Technical University Graz, Austria.
 * &lt;p&gt;
 * Also see
 * &lt;p&gt;
 * Stadlober E., H. Zechner (1999), &lt;A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"&gt;The patchwork rejection method for sampling from unimodal distributions&lt;/A&gt;,
 * to appear in ACM Transactions on Modelling and Simulation.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="double" name="mean" />
  <declaration type="double" name="my_old" />
  <declaration type="double" name="p" />
  <declaration type="double[]" name="pp" />
  <declaration type="int" name="llll" />
  <declaration type="double" name="my_last" />
  <declaration type="double" name="ll" />
  <declaration type="int" name="k2" />
  <declaration type="double" name="dl" />
  <declaration type="double" name="f1" />
  <declaration type="int" name="m" />
  <declaration type="double" name="MEAN_MAX" />
  <declaration type="double" name="SWITCH_MEAN" />
  <declaration type="Poisson" name="shared" />
  <javadoc>
    <text>Constructs a poisson distribution.
 * Example: mean=1.0.</text>
  </javadoc>
  <method type="constructor" name="Poisson" />
  <javadoc>
    <text>Returns the cumulative distribution function.</text>
  </javadoc>
  <method type="double" name="cdf" />
  <javadoc>
    <text>Returns a deep copy of the receiver; the copy will produce identical sequences.
 * After this call has returned, the copy and the receiver have equal but separate state.</text>
    <return>a copy of the receiver.</return>
  </javadoc>
  <method type="Object" name="clone">
    <declaration type="Poisson" name="copy" />
  </method>
  <method type="double" name="f" />
  <javadoc>
    <text>Returns a random number from the distribution.</text>
  </javadoc>
  <method type="int" name="nextInt" />
  <javadoc>
    <text>Returns a random number from the distribution; bypasses the internal state.</text>
  </javadoc>
  <method type="int" name="nextInt">
    <declaration type="RandomEngine" name="gen" />
    <declaration type="double" name="my" />
    <declaration type="double" name="t" />
    <declaration type="double" name="gx" />
    <declaration type="int" name="sign" />
    <declaration type="double" name="u" />
    <declaration type="int" name="k" />
    <scope>
      <scope />
      <scope>
        <scope />
        <scope>
          <scope />
        </scope>
      </scope>
    </scope>
    <scope>
      <declaration type="int" name="Dk" />
      <declaration type="double" name="Ds" />
      <scope />
      <scope>
        <scope>
          <scope />
          <scope>
            <scope />
          </scope>
        </scope>
        <scope>
          <scope />
          <scope>
            <scope />
          </scope>
        </scope>
        <scope>
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
    <scope />
    <javadoc>
      <text>*
 * Poisson Distribution - Patchwork Rejection/Inversion           
 * *
 * *
 * For parameter  my &lt; 10  Tabulated Inversion is applied.        
 * For my &gt;= 10  Patchwork Rejection is employed:                 
 * The area below the histogram function f(x) is rearranged in    
 * its body by certain point reflections. Within a large center   
 * interval variates are sampled efficiently by rejection from    
 * uniform hats. Rectangular immediate acceptance regions speed   
 * up the generation. The remaining tails are covered by          
 * exponential functions.                                         
 * *</text>
    </javadoc>
    <comment>static double p,q,p0,pp[36];</comment>
    <comment>static long ll,m;</comment>
    <comment>CASE B: Inversion- start new table and calculate p0</comment>
    <comment>for (k=pp.length; --k &gt;=0; ) pp[k] = 0;</comment>
    <comment>Step U. Uniform sample</comment>
    <comment>Step T. Table comparison</comment>
    <comment>Step C. Creation of new prob.</comment>
    <comment>end my &lt; SWITCH_MEAN</comment>
    <comment>CASE A: acceptance complement</comment>
    <comment>static double        my_last = -1.0;</comment>
    <comment>static long int      m,  k2, k4, k1, k5;</comment>
    <comment>static double        dl, dr, r1, r2, r4, r5, ll, lr, l_my, c_pm,</comment>
    <comment>f1, f2, f4, f5, p1, p2, p3, p4, p5, p6;</comment>
    <comment>set-up</comment>
    <comment>approximate deviation of reflection points k2, k4 from my - 1/2</comment>
    <comment>mode m, reflection points k2 and k4, and points k1 and k5, which</comment>
    <comment>delimit the centre region of h(x)</comment>
    <comment>range width of the critical left and right centre region</comment>
    <comment>recurrence constants r(k) = p(k)/p(k-1) at k = k1, k2, k4+1, k5+1</comment>
    <comment>reciprocal values of the scale parameters of expon. tail envelopes</comment>
    <comment>expon. tail left</comment>
    <comment>expon. tail right</comment>
    <comment>Poisson constants, necessary for computing function values f(k)</comment>
    <comment>function values f(k) = p(k)/p(m) at k = k2, k4, k1, k5</comment>
    <comment>area of the two centre and the two exponential tail regions</comment>
    <comment>area of the two immediate acceptance regions between k2, k4</comment>
    <comment>immed. left</comment>
    <comment>centre left</comment>
    <comment>immed. right</comment>
    <comment>centre right</comment>
    <comment>expon. tail left</comment>
    <comment>expon. tail right</comment>
    <comment>end set-up</comment>
    <comment>generate uniform number U -- U(0, p6)</comment>
    <comment>case distinction corresponding to U</comment>
    <comment>centre left</comment>
    <comment>immediate acceptance region R2 = [k2, m) *[0, f2),  X = k2, ... m -1</comment>
    <comment>immediate acceptance region R1 = [k1, k2)*[0, f1),  X = k1, ... k2-1</comment>
    <comment>computation of candidate X &lt; k2, and its counterpart Y &gt; k2</comment>
    <comment>either squeeze-acceptance of X or acceptance-rejection of Y</comment>
    <comment>quick accept of</comment>
    <comment>X = k2 - Dk</comment>
    <comment>quick reject of Y</comment>
    <comment>quick accept of</comment>
    <comment>Y = k2 + Dk</comment>
    <comment>final accept of Y</comment>
    <comment>centre right</comment>
    <comment>immediate acceptance region R3 = [m, k4+1)*[0, f4), X = m, ... k4</comment>
    <comment>immediate acceptance region R4 = [k4+1, k5+1)*[0, f5)</comment>
    <comment>computation of candidate X &gt; k4, and its counterpart Y &lt; k4</comment>
    <comment>either squeeze-acceptance of X or acceptance-rejection of Y</comment>
    <comment>quick accept of</comment>
    <comment>X = k4 + Dk</comment>
    <comment>quick reject of Y</comment>
    <comment>quick accept of</comment>
    <comment>Y = k4 - Dk</comment>
    <comment>final accept of Y</comment>
    <comment>expon. tail left</comment>
    <comment>0 &lt;= X &lt;= k1 - 1</comment>
    <comment>W -- U(0, h(x))</comment>
    <comment>quick accept of X</comment>
    <comment>expon. tail right</comment>
    <comment>X &gt;= k5 + 1</comment>
    <comment>W -- U(0, h(x))</comment>
    <comment>quick accept of X</comment>
    <comment>acceptance-rejection test of candidate X from the original area</comment>
    <comment>test, whether  W &lt;= f(k),    with  W = U*h(x)  and  U -- U(0, 1)</comment>
    <comment>log f(X) = (X - m)*log(my) - log X! + log m!</comment>
    <comment>mean is too large</comment>
  </method>
  <javadoc>
    <text>Returns the probability distribution function.</text>
  </javadoc>
  <method type="double" name="pdf">
    <comment>Overflow sensitive:</comment>
    <comment>return (Math.pow(mean,k) / cephes.Arithmetic.factorial(k)) * Math.exp(-this.mean);</comment>
  </method>
  <javadoc>
    <text>Sets the mean.</text>
  </javadoc>
  <method type="void" name="setMean" />
  <javadoc>
    <text>Returns a random number from the distribution with the given mean.</text>
  </javadoc>
  <method type="int" name="staticNextInt">
    <scope />
  </method>
  <javadoc>
    <text>Returns a String representation of the receiver.</text>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</text>
    <param>randomGenerator the new uniform random number generator to be shared.</param>
  </javadoc>
  <method type="void" name="xstaticSetRandomGenerator">
    <scope />
  </method>
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>precomputed and cached values (for performance only)</comment>
  <comment>cache for &lt; SWITCH_MEAN</comment>
  <comment>cache for &gt;= SWITCH_MEAN</comment>
  <comment>cache for both;</comment>
  <comment>for all means larger than that, we don't try to compute a poisson deviation, but return the mean.</comment>
  <comment>switch from method A to method B</comment>
  <comment>The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</comment>
</class>
