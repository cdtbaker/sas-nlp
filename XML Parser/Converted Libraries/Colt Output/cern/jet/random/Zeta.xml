<?xml version="1.0" encoding="UTF-8"?>
<class name="Zeta">
  <javadoc>
    <text>Zeta distribution.
 * &lt;p&gt;
 * Valid parameter ranges: &lt;tt&gt;ro &amp;gt; 0&lt;/tt&gt; and &lt;tt&gt;pk &amp;gt;= 0&lt;/tt&gt;.
 * &lt;dt&gt;
 * If either &lt;tt&gt;ro &amp;gt; 100&lt;/tt&gt;  or  &lt;tt&gt;k &amp;gt; 10000&lt;/tt&gt; numerical problems in
 * computing the theoretical moments arise, therefore &lt;tt&gt;ro &amp;lt;= 100&lt;/tt&gt; and 
 * &lt;tt&gt;k &amp;lt;= 10000&lt;/tt&gt; are recommended.                                      
 * &lt;p&gt;
 * Instance methods operate on a user supplied uniform random number generator; they are unsynchronized.
 * &lt;dt&gt;
 * Static methods operate on a default uniform random number generator; they are synchronized.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt; 
 * &lt;dt&gt;Method: Acceptance/Rejection.
 * High performance implementation.
 * &lt;dt&gt;This is a port and adaption of &lt;tt&gt;Zeta.c&lt;/tt&gt; from the &lt;A HREF="http://www.cis.tu-graz.ac.at/stat/stadl/random.html"&gt;C-RAND / WIN-RAND&lt;/A&gt; library.
 * C-RAND's implementation, in turn, is based upon
 * &lt;p&gt;
 * J. Dagpunar (1988): Principles of Random Variate  Generation, Clarendon Press, Oxford.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="double" name="ro" />
  <declaration type="double" name="pk" />
  <declaration type="double" name="c" />
  <declaration type="double" name="maxlongint" />
  <declaration type="Zeta" name="shared" />
  <javadoc>
    <text>Constructs a Zeta distribution.</text>
  </javadoc>
  <method type="constructor" name="Zeta" />
  <javadoc>
    <text>Returns a zeta distributed random number.</text>
  </javadoc>
  <method type="long" name="generateZeta">
    <declaration type="double" name="u" />
    <declaration type="long" name="k" />
    <scope>
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <javadoc>
      <text>*
 * Zeta Distribution - Acceptance Rejection            
 * *
 * *
 * To sample from the Zeta distribution with parameters ro and pk 
 * it suffices to sample variates x from the distribution with    
 * density function  f(x)=B*{[x+0.5]+pk}^(-(1+ro)) ( x &gt; .5 )     
 * and then deliver k=[x+0.5].                                    
 * 1/B=Sum[(j+pk)^-(ro+1)]  (j=1,2,...) converges for ro &gt;= .5 .  
 * It is not necessary to compute B, because variates x are       
 * generated by acceptance rejection using density function       
 * g(x)=ro*(c+0.5)^ro*(c+x)^-(ro+1).                              
 * *                                                                
 * Integer overflow is possible, when ro is small (ro &lt;= .5) and  
 * pk large. In this case a new sample is generated. If ro and pk 
 * satisfy the inequality   ro &gt; .14 + pk*1.85e-8 + .02*ln(pk)    
 * the percentage of overflow is less than 1%, so that the        
 * result is reliable.                                            
 * NOTE: The comment above is likely to be nomore valid since     
 * the C-version operated on 32-bit integers, while this Java     
 * version operates on 64-bit integers. However, the following is 
 * still valid:                                                   *                                                                
 * *                                                                
 * If either ro &gt; 100  or  k &gt; 10000 numerical problems in        
 * computing the theoretical moments arise, therefore ro&lt;=100 and 
 * k&lt;=10000 are recommended.                                      
 * *
 * *
 * FUNCTION:    - zeta  samples a random number from the          
 * Zeta distribution with parameters  ro &gt; 0  and  
 * pk &gt;= 0.                                        
 * REFERENCE:   - J. Dagpunar (1988): Principles of Random        
 * Variate  Generation, Clarendon Press, Oxford.   
 * *</text>
    </javadoc>
    <comment>Set-up</comment>
  </method>
  <javadoc>
    <text>Returns a random number from the distribution.</text>
  </javadoc>
  <method type="int" name="nextInt" />
  <javadoc>
    <text>Sets the parameters.</text>
  </javadoc>
  <method type="void" name="setState" />
  <javadoc>
    <text>Returns a random number from the distribution.</text>
  </javadoc>
  <method type="int" name="staticNextInt">
    <scope />
  </method>
  <javadoc>
    <text>Returns a String representation of the receiver.</text>
  </javadoc>
  <method type="String" name="toString" />
  <javadoc>
    <text>Sets the uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</text>
    <param>randomGenerator the new uniform random number generator to be shared.</param>
  </javadoc>
  <method type="void" name="xstaticSetRandomGenerator">
    <scope />
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>cached values (for performance)</comment>
  <comment>The uniform random number generated shared by all &lt;b&gt;static&lt;/b&gt; methods.</comment>
</class>
