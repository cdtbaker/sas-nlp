<?xml version="1.0" encoding="UTF-8"?>
<class name="Probability">
  <javadoc>
    <text>Custom tailored numerical integration of certain probability distributions.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt;
 * &lt;dt&gt;
 * Some code taken and adapted from the &lt;A HREF="http://www.sci.usq.edu.au/staff/leighb/graph/Top.html"&gt;Java 2D Graph Package 2.4&lt;/A&gt;,
 * which in turn is a port from the &lt;A HREF="http://people.ne.mediaone.net/moshier/index.html#Cephes"&gt;Cephes 2.2&lt;/A&gt; Math Library (C).
 * Most Cephes code (missing from the 2D Graph Package) directly ported.</text>
    <author>peter.gedeck@pharma.Novartis.com</author>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>0.91, 08-Dec-99</version>
  </javadoc>
  <javadoc>
    <text>COEFFICIENTS FOR METHOD  normalInverse()</text>
  </javadoc>
  <declaration type="double" name="P0" />
  <declaration type="double" name="Q0" />
  <declaration type="double" name="P1" />
  <declaration type="double" name="Q1" />
  <declaration type="double" name="P2" />
  <declaration type="double" name="Q2" />
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="Probability" />
  <javadoc>
    <text>Returns the area from zero to &lt;tt&gt;x&lt;/tt&gt; under the beta density
 * function.
 * &lt;pre&gt;
 * x
 * -             -
 * | (a+b)       | |  a-1      b-1
 * P(x)  =  ----------     |   t    (1-t)    dt
 * -     -     | |
 * | (a) | (b)   -
 * 0
 * &lt;/pre&gt;
 * This function is identical to the incomplete beta
 * integral function &lt;tt&gt;Gamma.incompleteBeta(a, b, x)&lt;/tt&gt;.
 * The complemented function is
 * &lt;tt&gt;1 - P(1-x)  =  Gamma.incompleteBeta( b, a, x )&lt;/tt&gt;;</text>
  </javadoc>
  <method type="double" name="beta" />
  <javadoc>
    <text>Returns the area under the right hand tail (from &lt;tt&gt;x&lt;/tt&gt; to
 * infinity) of the beta density function.
 * This function is identical to the incomplete beta
 * integral function &lt;tt&gt;Gamma.incompleteBeta(b, a, x)&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="betaComplemented" />
  <javadoc>
    <text>Returns the sum of the terms &lt;tt&gt;0&lt;/tt&gt; through &lt;tt&gt;k&lt;/tt&gt; of the Binomial
 * probability density.
 * &lt;pre&gt;
 * k
 * --  ( n )   j      n-j
 * &gt;   (   )  p  (1-p)
 * --  ( j )
 * j=0
 * &lt;/pre&gt;
 * The terms are not summed directly; instead the incomplete
 * beta integral is employed, according to the formula
 * &lt;p&gt;
 * &lt;tt&gt;y = binomial( k, n, p ) = Gamma.incompleteBeta( n-k, k+1, 1-p )&lt;/tt&gt;.
 * &lt;p&gt;
 * All arguments must be positive,</text>
    <param>k end term.</param>
    <param>n the number of trials.</param>
    <param>p the probability of success (must be in &lt;tt&gt;(0.0,1.0)&lt;/tt&gt;).</param>
  </javadoc>
  <method type="double" name="binomial" />
  <javadoc>
    <text>Returns the sum of the terms &lt;tt&gt;k+1&lt;/tt&gt; through &lt;tt&gt;n&lt;/tt&gt; of the Binomial
 * probability density.
 * &lt;pre&gt;
 * n
 * --  ( n )   j      n-j
 * &gt;   (   )  p  (1-p)
 * --  ( j )
 * j=k+1
 * &lt;/pre&gt;
 * The terms are not summed directly; instead the incomplete
 * beta integral is employed, according to the formula
 * &lt;p&gt;
 * &lt;tt&gt;y = binomialComplemented( k, n, p ) = Gamma.incompleteBeta( k+1, n-k, p )&lt;/tt&gt;.
 * &lt;p&gt;
 * All arguments must be positive,</text>
    <param>k end term.</param>
    <param>n the number of trials.</param>
    <param>p the probability of success (must be in &lt;tt&gt;(0.0,1.0)&lt;/tt&gt;).</param>
  </javadoc>
  <method type="double" name="binomialComplemented" />
  <javadoc>
    <text>Returns the area under the left hand tail (from 0 to &lt;tt&gt;x&lt;/tt&gt;)
 * of the Chi square probability density function with
 * &lt;tt&gt;v&lt;/tt&gt; degrees of freedom.
 * &lt;pre&gt;
 * inf.
 * -
 * 1          | |  v/2-1  -t/2
 * P( x | v )   =   -----------     |   t      e     dt
 * v/2  -       | |
 * 2    | (v/2)   -
 * x
 * &lt;/pre&gt;
 * where &lt;tt&gt;x&lt;/tt&gt; is the Chi-square variable.
 * &lt;p&gt;
 * The incomplete gamma integral is used, according to the
 * formula
 * &lt;p&gt;
 * &lt;tt&gt;y = chiSquare( v, x ) = incompleteGamma( v/2.0, x/2.0 )&lt;/tt&gt;.
 * &lt;p&gt;
 * The arguments must both be positive.</text>
    <param>v degrees of freedom.</param>
    <param>x integration end point.</param>
  </javadoc>
  <method type="double" name="chiSquare" />
  <javadoc>
    <text>Returns the area under the right hand tail (from &lt;tt&gt;x&lt;/tt&gt; to
 * infinity) of the Chi square probability density function
 * with &lt;tt&gt;v&lt;/tt&gt; degrees of freedom.
 * &lt;pre&gt;
 * inf.
 * -
 * 1          | |  v/2-1  -t/2
 * P( x | v )   =   -----------     |   t      e     dt
 * v/2  -       | |
 * 2    | (v/2)   -
 * x
 * &lt;/pre&gt;
 * where &lt;tt&gt;x&lt;/tt&gt; is the Chi-square variable.
 * The incomplete gamma integral is used, according to the
 * formula
 * &lt;tt&gt;y = chiSquareComplemented( v, x ) = incompleteGammaComplement( v/2.0, x/2.0 )&lt;/tt&gt;.
 * The arguments must both be positive.</text>
    <param>v degrees of freedom.</param>
  </javadoc>
  <method type="double" name="chiSquareComplemented" />
  <javadoc>
    <text>Returns the error function of the normal distribution; formerly named &lt;tt&gt;erf&lt;/tt&gt;.
 * The integral is
 * &lt;pre&gt;
 * x 
 * -
 * 2         | |          2
 * erf(x)  =  --------     |    exp( - t  ) dt.
 * sqrt(pi)   | |
 * -
 * 0
 * &lt;/pre&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt;
 * For &lt;tt&gt;0 &lt;= |x| &lt; 1, erf(x) = x * P4(x**2)/Q5(x**2)&lt;/tt&gt;; otherwise
 * &lt;tt&gt;erf(x) = 1 - erfc(x)&lt;/tt&gt;.
 * &lt;p&gt;
 * Code adapted from the &lt;A HREF="http://www.sci.usq.edu.au/staff/leighb/graph/Top.html"&gt;Java 2D Graph Package 2.4&lt;/A&gt;,
 * which in turn is a port from the &lt;A HREF="http://people.ne.mediaone.net/moshier/index.html#Cephes"&gt;Cephes 2.2&lt;/A&gt; Math Library (C).</text>
    <param>a the argument to the function.</param>
  </javadoc>
  <method type="double" name="errorFunction">
    <declaration type="double" name="y" />
    <declaration type="double[]" name="T" />
    <declaration type="double[]" name="U" />
    <comment>1.00000000000000000000E0,</comment>
  </method>
  <javadoc>
    <text>Returns the complementary Error function of the normal distribution; formerly named &lt;tt&gt;erfc&lt;/tt&gt;.
 * &lt;pre&gt;
 * 1 - erf(x) =
 * inf. 
 * -
 * 2         | |          2
 * erfc(x)  =  --------     |    exp( - t  ) dt
 * sqrt(pi)   | |
 * -
 * x
 * &lt;/pre&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt;
 * For small x, &lt;tt&gt;erfc(x) = 1 - erf(x)&lt;/tt&gt;; otherwise rational
 * approximations are computed.
 * &lt;p&gt;
 * Code adapted from the &lt;A HREF="http://www.sci.usq.edu.au/staff/leighb/graph/Top.html"&gt;Java 2D Graph Package 2.4&lt;/A&gt;,
 * which in turn is a port from the &lt;A HREF="http://people.ne.mediaone.net/moshier/index.html#Cephes"&gt;Cephes 2.2&lt;/A&gt; Math Library (C).</text>
    <param>a the argument to the function.</param>
  </javadoc>
  <method type="double" name="errorFunctionComplemented">
    <declaration type="double" name="x" />
    <declaration type="double[]" name="P" />
    <declaration type="double[]" name="Q" />
    <declaration type="double[]" name="R" />
    <declaration type="double[]" name="S" />
    <scope />
    <scope />
    <scope />
    <scope />
    <comment>1.0</comment>
    <comment>1.00000000000000000000E0,</comment>
  </method>
  <javadoc>
    <text>Returns the integral from zero to &lt;tt&gt;x&lt;/tt&gt; of the gamma probability
 * density function.
 * &lt;pre&gt;
 * x
 * b       -
 * a       | |   b-1  -at
 * y =  -----    |    t    e    dt
 * -     | |
 * | (b)   -
 * 0
 * &lt;/pre&gt;
 * The incomplete gamma integral is used, according to the
 * relation
 * &lt;tt&gt;y = Gamma.incompleteGamma( b, a*x )&lt;/tt&gt;.</text>
    <param>a the paramater a (alpha) of the gamma distribution.</param>
    <param>b the paramater b (beta, lambda) of the gamma distribution.</param>
    <param>x integration end point.</param>
  </javadoc>
  <method type="double" name="gamma" />
  <javadoc>
    <text>Returns the integral from &lt;tt&gt;x&lt;/tt&gt; to infinity of the gamma
 * probability density function:
 * &lt;pre&gt;
 * inf.
 * b       -
 * a       | |   b-1  -at
 * y =  -----    |    t    e    dt
 * -     | |
 * | (b)   -
 * x
 * &lt;/pre&gt;
 * The incomplete gamma integral is used, according to the
 * relation
 * &lt;p&gt;
 * y = Gamma.incompleteGammaComplement( b, a*x ).</text>
    <param>a the paramater a (alpha) of the gamma distribution.</param>
    <param>b the paramater b (beta, lambda) of the gamma distribution.</param>
    <param>x integration end point.</param>
  </javadoc>
  <method type="double" name="gammaComplemented" />
  <javadoc>
    <text>Returns the sum of the terms &lt;tt&gt;0&lt;/tt&gt; through &lt;tt&gt;k&lt;/tt&gt; of the Negative Binomial Distribution.
 * &lt;pre&gt;
 * k
 * --  ( n+j-1 )   n      j
 * &gt;   (       )  p  (1-p)
 * --  (   j   )
 * j=0
 * &lt;/pre&gt;
 * In a sequence of Bernoulli trials, this is the probability
 * that &lt;tt&gt;k&lt;/tt&gt; or fewer failures precede the &lt;tt&gt;n&lt;/tt&gt;-th success.
 * &lt;p&gt;
 * The terms are not computed individually; instead the incomplete
 * beta integral is employed, according to the formula
 * &lt;p&gt;
 * &lt;tt&gt;y = negativeBinomial( k, n, p ) = Gamma.incompleteBeta( n, k+1, p )&lt;/tt&gt;.
 * All arguments must be positive,</text>
    <param>k end term.</param>
    <param>n the number of trials.</param>
    <param>p the probability of success (must be in &lt;tt&gt;(0.0,1.0)&lt;/tt&gt;).</param>
  </javadoc>
  <method type="double" name="negativeBinomial" />
  <javadoc>
    <text>Returns the sum of the terms &lt;tt&gt;k+1&lt;/tt&gt; to infinity of the Negative
 * Binomial distribution.
 * &lt;pre&gt;
 * inf
 * --  ( n+j-1 )   n      j
 * &gt;   (       )  p  (1-p)
 * --  (   j   )
 * j=k+1
 * &lt;/pre&gt;
 * The terms are not computed individually; instead the incomplete
 * beta integral is employed, according to the formula
 * &lt;p&gt;
 * y = negativeBinomialComplemented( k, n, p ) = Gamma.incompleteBeta( k+1, n, 1-p ).
 * All arguments must be positive,</text>
    <param>k end term.</param>
    <param>n the number of trials.</param>
    <param>p the probability of success (must be in &lt;tt&gt;(0.0,1.0)&lt;/tt&gt;).</param>
  </javadoc>
  <method type="double" name="negativeBinomialComplemented" />
  <javadoc>
    <text>Returns the area under the Normal (Gaussian) probability density
 * function, integrated from minus infinity to &lt;tt&gt;x&lt;/tt&gt; (assumes mean is zero, variance is one).
 * &lt;pre&gt;
 * x
 * -
 * 1        | |          2
 * normal(x)  = ---------    |    exp( - t /2 ) dt
 * sqrt(2pi)  | |
 * -
 * -inf.
 * =  ( 1 + erf(z) ) / 2
 * =  erfc(z) / 2
 * &lt;/pre&gt;
 * where &lt;tt&gt;z = x/sqrt(2)&lt;/tt&gt;.
 * Computation is via the functions &lt;tt&gt;errorFunction&lt;/tt&gt; and &lt;tt&gt;errorFunctionComplement&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="normal">
    <declaration type="double" name="x" />
    <scope />
  </method>
  <javadoc>
    <text>Returns the area under the Normal (Gaussian) probability density
 * function, integrated from minus infinity to &lt;tt&gt;x&lt;/tt&gt;.
 * &lt;pre&gt;
 * x
 * -
 * 1        | |                 2
 * normal(x)  = ---------    |    exp( - (t-mean) / 2v ) dt
 * sqrt(2pi*v)| |
 * -
 * -inf.
 * &lt;/pre&gt;
 * where &lt;tt&gt;v = variance&lt;/tt&gt;.
 * Computation is via the functions &lt;tt&gt;errorFunction&lt;/tt&gt;.</text>
    <param>mean the mean of the normal distribution.</param>
    <param>variance the variance of the normal distribution.</param>
    <param>x the integration limit.</param>
  </javadoc>
  <method type="double" name="normal" />
  <javadoc>
    <text>Returns the value, &lt;tt&gt;x&lt;/tt&gt;, for which the area under the
 * Normal (Gaussian) probability density function (integrated from
 * minus infinity to &lt;tt&gt;x&lt;/tt&gt;) is equal to the argument &lt;tt&gt;y&lt;/tt&gt; (assumes mean is zero, variance is one); formerly named &lt;tt&gt;ndtri&lt;/tt&gt;.
 * &lt;p&gt;
 * For small arguments &lt;tt&gt;0 &lt; y &lt; exp(-2)&lt;/tt&gt;, the program computes
 * &lt;tt&gt;z = sqrt( -2.0 * log(y) )&lt;/tt&gt;;  then the approximation is
 * &lt;tt&gt;x = z - log(z)/z  - (1/z) P(1/z) / Q(1/z)&lt;/tt&gt;.
 * There are two rational functions P/Q, one for &lt;tt&gt;0 &lt; y &lt; exp(-32)&lt;/tt&gt;
 * and the other for &lt;tt&gt;y&lt;/tt&gt; up to &lt;tt&gt;exp(-2)&lt;/tt&gt;. 
 * For larger arguments,
 * &lt;tt&gt;w = y - 0.5&lt;/tt&gt;, and  &lt;tt&gt;x/sqrt(2pi) = w + w**3 R(w**2)/S(w**2))&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="normalInverse">
    <declaration type="double" name="x" />
    <declaration type="int" name="code" />
    <declaration type="double" name="s2pi" />
    <scope />
    <scope />
    <comment>if( y &gt; (1.0 - 0.13533528323661269189) ) {  0.135... = exp(-2)</comment>
    <comment>if( x &lt; 8.0 )  y &gt; exp(-32) = 1.2664165549e-14</comment>
  </method>
  <javadoc>
    <text>Returns the sum of the first &lt;tt&gt;k&lt;/tt&gt; terms of the Poisson distribution.
 * &lt;pre&gt;
 * k         j
 * --   -m  m
 * &gt;   e    --
 * --       j!
 * j=0
 * &lt;/pre&gt;
 * The terms are not summed directly; instead the incomplete
 * gamma integral is employed, according to the relation
 * &lt;p&gt;
 * &lt;tt&gt;y = poisson( k, m ) = Gamma.incompleteGammaComplement( k+1, m )&lt;/tt&gt;.
 * The arguments must both be positive.</text>
    <param>k number of terms.</param>
    <param>mean the mean of the poisson distribution.</param>
  </javadoc>
  <method type="double" name="poisson" />
  <javadoc>
    <text>Returns the sum of the terms &lt;tt&gt;k+1&lt;/tt&gt; to &lt;tt&gt;Infinity&lt;/tt&gt; of the Poisson distribution.
 * &lt;pre&gt;
 * inf.       j
 * --   -m  m
 * &gt;   e    --
 * --       j!
 * j=k+1
 * &lt;/pre&gt;
 * The terms are not summed directly; instead the incomplete
 * gamma integral is employed, according to the formula
 * &lt;p&gt;
 * &lt;tt&gt;y = poissonComplemented( k, m ) = Gamma.incompleteGamma( k+1, m )&lt;/tt&gt;.
 * The arguments must both be positive.</text>
    <param>k start term.</param>
    <param>mean the mean of the poisson distribution.</param>
  </javadoc>
  <method type="double" name="poissonComplemented" />
  <javadoc>
    <text>Returns the integral from minus infinity to &lt;tt&gt;t&lt;/tt&gt; of the Student-t 
 * distribution with &lt;tt&gt;k &amp;gt; 0&lt;/tt&gt; degrees of freedom.
 * &lt;pre&gt;
 * t
 * -
 * | |
 * -                      |         2   -(k+1)/2
 * | ( (k+1)/2 )           |  (     x   )
 * ----------------------        |  ( 1 + --- )        dx
 * -               |  (      k  )
 * sqrt( k pi ) | ( k/2 )        |
 * | |
 * -
 * -inf.
 * &lt;/pre&gt;
 * Relation to incomplete beta integral:
 * &lt;p&gt;
 * &lt;tt&gt;1 - studentT(k,t) = 0.5 * Gamma.incompleteBeta( k/2, 1/2, z )&lt;/tt&gt;
 * where &lt;tt&gt;z = k/(k + t**2)&lt;/tt&gt;.
 * &lt;p&gt;
 * Since the function is symmetric about &lt;tt&gt;t=0&lt;/tt&gt;, the area under the
 * right tail of the density is found by calling the function
 * with &lt;tt&gt;-t&lt;/tt&gt; instead of &lt;tt&gt;t&lt;/tt&gt;.</text>
    <param>k degrees of freedom.</param>
    <param>t integration end point.</param>
  </javadoc>
  <method type="double" name="studentT">
    <declaration type="double" name="cdf" />
    <comment>fixes bug reported by stefan.bentink@molgen.mpg.de</comment>
  </method>
  <javadoc>
    <text>Returns the value, &lt;tt&gt;t&lt;/tt&gt;, for which the area under the
 * Student-t probability density function (integrated from
 * minus infinity to &lt;tt&gt;t&lt;/tt&gt;) is equal to &lt;tt&gt;1-alpha/2&lt;/tt&gt;.
 * The value returned corresponds to usual Student t-distribution lookup
 * table for &lt;tt&gt;t&lt;sub&gt;alpha[size]&lt;/sub&gt;&lt;/tt&gt;.
 * &lt;p&gt;
 * The function uses the studentT function to determine the return
 * value iteratively.</text>
    <param>alpha probability</param>
    <param>size size of data set</param>
  </javadoc>
  <method type="double" name="studentTInverse">
    <declaration type="double" name="cumProb" />
    <declaration type="double" name="f1" />
    <declaration type="double" name="x1" />
    <declaration type="double" name="g" />
    <scope />
    <scope>
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
      <scope />
    </scope>
    <scope />
    <scope />
    <comment>Cumulative probability</comment>
    <comment>Cumulative probability</comment>
    <comment>Return inverse of normal for large size</comment>
    <comment>Find a pair of x1,x2 that braket zero</comment>
    <comment>Find better approximation</comment>
    <comment>Pegasus-method</comment>
    <comment>Calculate slope of secant and t value for which it is 0.</comment>
    <comment>Calculate function value at x3</comment>
    <comment>This criteria needs to be very tight!</comment>
    <comment>We found a perfect value -&gt; return</comment>
  </method>
  <comment>Copyright � 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>approximation for 0 &lt;= |y - 0.5| &lt;= 38</comment>
  <comment>1.00000000000000000000E0,</comment>
  <comment>Approximation for interval z = sqrt(-2 log y ) between 2 and 8
 i.e., y between exp(-2) = .135 and exp(-32) = 1.27e-14.</comment>
  <comment>1.00000000000000000000E0,</comment>
  <comment>Approximation for interval z = sqrt(-2 log y ) between 8 and 64
 i.e., y between exp(-32) = 1.27e-14 and exp(-2048) = 3.67e-890.</comment>
  <comment>1.00000000000000000000E0,</comment>
</class>
