<?xml version="1.0" encoding="UTF-8"?>
<class name="Gamma">
  <javadoc>
    <text>Gamma and Beta functions.
 * &lt;p&gt;
 * &lt;b&gt;Implementation:&lt;/b&gt;
 * &lt;dt&gt;
 * Some code taken and adapted from the &lt;A HREF="http://www.sci.usq.edu.au/staff/leighb/graph/Top.html"&gt;Java 2D Graph Package 2.4&lt;/A&gt;,
 * which in turn is a port from the &lt;A HREF="http://people.ne.mediaone.net/moshier/index.html#Cephes"&gt;Cephes 2.2&lt;/A&gt; Math Library (C).
 * Most Cephes code (missing from the 2D Graph Package) directly ported.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>0.9, 22-Jun-99</version>
  </javadoc>
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="Gamma" />
  <javadoc>
    <text>Returns the beta function of the arguments.
 * &lt;pre&gt;
 * -     -
 * | (a) | (b)
 * beta( a, b )  =  -----------.
 * -
 * | (a+b)
 * &lt;/pre&gt;</text>
  </javadoc>
  <method type="double" name="beta">
    <declaration type="double" name="y" />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Returns the Gamma function of the argument.</text>
  </javadoc>
  <method type="double" name="gamma">
    <declaration type="double[]" name="P" />
    <declaration type="double[]" name="Q" />
    <declaration type="double" name="p" />
    <declaration type="int" name="i" />
    <declaration type="double" name="q" />
    <scope>
      <scope>
        <scope />
      </scope>
      <scope />
    </scope>
    <scope />
    <scope>
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
    </scope>
    <comment>double MAXGAM = 171.624376956302725;</comment>
    <comment>double LOGPI  = 1.14472988584940017414;</comment>
  </method>
  <javadoc>
    <text>Returns the Incomplete Beta Function evaluated from zero to &lt;tt&gt;xx&lt;/tt&gt;; formerly named &lt;tt&gt;ibeta&lt;/tt&gt;.</text>
    <param>aa the alpha parameter of the beta distribution.</param>
    <param>bb the beta parameter of the beta distribution.</param>
    <param>xx the integration end point.</param>
  </javadoc>
  <method type="double" name="incompleteBeta">
    <declaration type="double" name="a" />
    <declaration type="boolean" name="flag" />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope />
    <scope>
      <scope />
    </scope>
    <scope />
    <comment>Reverse a and b if x is greater than the mean.</comment>
    <comment>Choose expansion for better convergence.</comment>
    <comment>Multiply w by the factor
a      b   _             _     _
x  (1-x)   | (a+b)  ( a | (a) | (b) ) .</comment>
    <comment>Resort to logarithms.</comment>
  </method>
  <javadoc>
    <text>Continued fraction expansion #1 for incomplete beta integral; formerly named &lt;tt&gt;incbcf&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="incompleteBetaFraction1">
    <declaration type="double" name="xk" />
    <declaration type="double" name="k1" />
    <declaration type="double" name="r" />
    <declaration type="int" name="n" />
    <scope>
      <scope />
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Continued fraction expansion #2 for incomplete beta integral; formerly named &lt;tt&gt;incbd&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="incompleteBetaFraction2">
    <declaration type="double" name="xk" />
    <declaration type="double" name="k1" />
    <declaration type="double" name="r" />
    <declaration type="int" name="n" />
    <scope>
      <scope />
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns the Incomplete Gamma function; formerly named &lt;tt&gt;igamma&lt;/tt&gt;.</text>
    <param>a the parameter of the gamma distribution.</param>
    <param>x the integration end point.</param>
  </javadoc>
  <method type="double" name="incompleteGamma">
    <declaration type="double" name="ans" />
    <scope />
    <comment>Compute  xa  exp(-x)  gamma(a)</comment>
    <comment>power series</comment>
  </method>
  <javadoc>
    <text>Returns the Complemented Incomplete Gamma function; formerly named &lt;tt&gt;igamc&lt;/tt&gt;.</text>
    <param>a the parameter of the gamma distribution.</param>
    <param>x the integration start point.</param>
  </javadoc>
  <method type="double" name="incompleteGammaComplement">
    <declaration type="double" name="ans" />
    <declaration type="double" name="pk" />
    <scope>
      <scope />
      <scope />
    </scope>
    <comment>continued fraction</comment>
  </method>
  <javadoc>
    <text>Returns the natural logarithm of the gamma function; formerly named &lt;tt&gt;lgamma&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="logGamma">
    <declaration type="double" name="p" />
    <declaration type="double[]" name="A" />
    <declaration type="double[]" name="B" />
    <declaration type="double[]" name="C" />
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
    </scope>
    <comment>1.00000000000000000000E0,</comment>
    <comment>if( x &gt; 1.0e8 ) return( q );</comment>
  </method>
  <javadoc>
    <text>Power series for incomplete beta integral; formerly named &lt;tt&gt;pseries&lt;/tt&gt;.
 * Use when b*x is small and x not too close to 1.</text>
  </javadoc>
  <method type="double" name="powerSeries">
    <declaration type="double" name="s" />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Returns the Gamma function computed by Stirling's formula; formerly named &lt;tt&gt;stirf&lt;/tt&gt;.
 * The polynomial STIR is valid for 33 &lt;= x &lt;= 172.</text>
  </javadoc>
  <method type="double" name="stirlingFormula">
    <declaration type="double[]" name="STIR" />
    <declaration type="double" name="MAXSTIR" />
    <declaration type="double" name="w" />
    <declaration type="double" name="y" />
    <scope>
      <declaration type="double" name="v" />
    </scope>
    <scope />
    <comment>Avoid overflow in Math.pow()</comment>
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
