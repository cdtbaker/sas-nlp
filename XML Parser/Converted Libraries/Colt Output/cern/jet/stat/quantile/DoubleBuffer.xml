<?xml version="1.0" encoding="UTF-8"?>
<class name="DoubleBuffer">
  <javadoc>
    <text>A buffer holding &lt;tt&gt;double&lt;/tt&gt; elements; internally used for computing approximate quantiles.</text>
  </javadoc>
  <declaration type="DoubleArrayList" name="values" />
  <declaration type="boolean" name="isSorted" />
  <javadoc>
    <text>This method was created in VisualAge.</text>
    <param>k int</param>
  </javadoc>
  <method type="constructor" name="DoubleBuffer" />
  <javadoc>
    <text>Adds a value to the receiver.</text>
  </javadoc>
  <method type="void" name="add">
    <comment>lazy buffer allocation can safe memory.</comment>
  </method>
  <javadoc>
    <text>Adds a value to the receiver.</text>
  </javadoc>
  <method type="void" name="addAllOfFromTo">
    <comment>lazy buffer allocation can safe memory.</comment>
  </method>
  <javadoc>
    <text>Allocates the receiver.</text>
  </javadoc>
  <method type="void" name="allocate" />
  <javadoc>
    <text>Clears the receiver.</text>
  </javadoc>
  <method type="void" name="clear" />
  <javadoc>
    <text>Returns a deep copy of the receiver.</text>
    <return>a deep copy of the receiver.</return>
  </javadoc>
  <method type="Object" name="clone">
    <declaration type="DoubleBuffer" name="copy" />
  </method>
  <javadoc>
    <text>Returns whether the specified element is contained in the receiver.</text>
  </javadoc>
  <method type="boolean" name="contains" />
  <javadoc>
    <text>Returns whether the receiver is empty.</text>
  </javadoc>
  <method type="boolean" name="isEmpty" />
  <javadoc>
    <text>Returns whether the receiver is empty.</text>
  </javadoc>
  <method type="boolean" name="isFull" />
  <javadoc>
    <text>Returns the number of elements currently needed to store all contained elements.
 * This number usually differs from the results of method &lt;tt&gt;size()&lt;/tt&gt;, according to the underlying algorithm.</text>
  </javadoc>
  <method type="int" name="memory" />
  <javadoc>
    <text>Returns the rank of a given element within the sorted sequence of the receiver.
 * A rank is the number of elements &lt;= element.
 * Ranks are of the form {1,2,...size()}.
 * If no element is &lt;= element, then the rank is zero.
 * If the element lies in between two contained elements, then uses linear interpolation.</text>
    <return>the rank of the element.</return>
    <param>list cern.colt.list.DoubleArrayList</param>
    <param>element the element to search for</param>
  </javadoc>
  <method type="double" name="rank" />
  <javadoc>
    <text>Returns the number of elements contained in the receiver.</text>
  </javadoc>
  <method type="int" name="size" />
  <javadoc>
    <text>Sorts the receiver.</text>
  </javadoc>
  <method type="void" name="sort">
    <scope />
    <comment>IMPORTANT: TO DO : replace mergeSort with quickSort!</comment>
    <comment>currently it is mergeSort only for debugging purposes (JDK 1.2 can't be imported into VisualAge).</comment>
    <comment>values.mergeSort();</comment>
  </method>
  <javadoc>
    <text>Returns a String representation of the receiver.</text>
  </javadoc>
  <method type="String" name="toString">
    <comment>", v=" + values.toString();</comment>
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
