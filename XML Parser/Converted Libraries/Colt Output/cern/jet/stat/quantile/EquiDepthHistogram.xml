<?xml version="1.0" encoding="UTF-8"?>
<class name="EquiDepthHistogram">
  <javadoc>
    <text>Read-only equi-depth histogram for selectivity estimation.
 * Assume you have collected statistics over a data set, among them a one-dimensional equi-depth histogram (quantiles).
 * Then an applications or DBMS might want to estimate the &lt;i&gt;selectivity&lt;/i&gt; of some range query &lt;tt&gt;[from,to]&lt;/tt&gt;, i.e. the percentage of data set elements contained in the query range.
 * This class does not collect equi-depth histograms but only space efficiently stores already produced histograms and provides operations for selectivity estimation.
 * Uses linear interpolation.
 * &lt;p&gt;
 * This class stores a list &lt;tt&gt;l&lt;/tt&gt; of &lt;tt&gt;float&lt;/tt&gt; values for which holds:
 * &lt;li&gt;Let &lt;tt&gt;v&lt;/tt&gt; be a list of values (sorted ascending) an equi-depth histogram has been computed over.&lt;/li&gt;
 * &lt;li&gt;Let &lt;tt&gt;s=l.length&lt;/tt&gt;.&lt;/li&gt;
 * &lt;li&gt;Let &lt;tt&gt;p=(0, 1/s-1), 2/s-1,..., s-1/s-1=1.0)&lt;/tt&gt; be a list of the &lt;tt&gt;s&lt;/tt&gt; percentages.&lt;/li&gt;
 * &lt;li&gt;Then for each &lt;tt&gt;i=0..s-1: l[i] = e : v.contains(e) &amp;&amp; v[0],..., v[p[i]*v.length] &amp;lt;= e&lt;/tt&gt;.&lt;/li&gt;
 * &lt;li&gt;(In particular: &lt;tt&gt;l[0]=min(v)=v[0]&lt;/tt&gt; and &lt;tt&gt;l[s-1]=max(v)=v[s-1]&lt;/tt&gt;.)&lt;/li&gt;</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="float[]" name="binBoundaries" />
  <javadoc>
    <text>Constructs an equi-depth histogram with the given quantile elements.
 * Quantile elements must be sorted ascending and have the form specified in the class documentation.</text>
  </javadoc>
  <method type="constructor" name="EquiDepthHistogram" />
  <javadoc>
    <text>Returns the bin index of the given element.
 * In other words, returns a handle to the range the element falls into.</text>
    <param>element the element to search for.</param>
    <throws>java.lang.IllegalArgumentException if the element is not contained in any bin.</throws>
  </javadoc>
  <method type="int" name="binOfElement">
    <declaration type="int" name="index" />
    <scope />
    <scope>
      <scope />
    </scope>
    <comment>element found.</comment>
    <comment>last bin is a closed interval.</comment>
    <comment>element not found.</comment>
    <comment>index = -index-1; now index is the insertion point.</comment>
  </method>
  <javadoc>
    <text>Returns the number of bins. In other words, returns the number of subdomains partitioning the entire value domain.</text>
  </javadoc>
  <method type="int" name="bins" />
  <javadoc>
    <text>Returns the end of the range associated with the given bin.</text>
    <throws>ArrayIndexOutOfBoundsException if &lt;tt&gt;binIndex &amp;lt; 0 || binIndex &amp;gt;= bins()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="float" name="endOfBin" />
  <javadoc>
    <text>Returns the percentage of elements in the range (from,to]. Does linear interpolation.</text>
    <param>from the start point (exclusive).</param>
    <param>to the end point (inclusive).</param>
    <returns>a number in the closed interval &lt;tt&gt;[0.0,1.0]&lt;/tt&gt;.</returns>
  </javadoc>
  <method type="double" name="percentFromTo" />
  <javadoc>
    <text>Returns how many percent of the elements contained in the receiver are &lt;tt&gt;&amp;lt;= element&lt;/tt&gt;.
 * Does linear interpolation.</text>
    <param>the element to search for.</param>
    <returns>a number in the closed interval &lt;tt&gt;[0.0,1.0]&lt;/tt&gt;.</returns>
  </javadoc>
  <method type="double" name="phi">
    <declaration type="int" name="size" />
    <declaration type="double" name="binWidth" />
    <declaration type="int" name="index" />
    <scope />
    <declaration type="int" name="insertionPoint" />
    <declaration type="double" name="from" />
    <declaration type="double" name="to" />
    <declaration type="double" name="p" />
    <comment>int index = new FloatArrayList(binBoundaries).binarySearch(element);</comment>
    <comment>found</comment>
    <comment>do linear interpolation</comment>
  </method>
  <javadoc>
    <deprecated>Deprecated.
 * Returns the number of bin boundaries.</deprecated>
  </javadoc>
  <method type="int" name="size" />
  <javadoc>
    <text>Returns the start of the range associated with the given bin.</text>
    <throws>ArrayIndexOutOfBoundsException if &lt;tt&gt;binIndex &amp;lt; 0 || binIndex &amp;gt;= bins()&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="float" name="startOfBin" />
  <javadoc>
    <text>Not yet commented.</text>
  </javadoc>
  <method type="void" name="test">
    <declaration type="float[]" name="quantileElements" />
    <declaration type="EquiDepthHistogram" name="histo" />
  </method>
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
</class>
