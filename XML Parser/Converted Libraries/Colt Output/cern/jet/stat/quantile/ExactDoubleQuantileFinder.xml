<?xml version="1.0" encoding="UTF-8"?>
<class name="ExactDoubleQuantileFinder">
  <javadoc>
    <text>Exact quantile finding algorithm for known and unknown &lt;tt&gt;N&lt;/tt&gt; requiring large main memory; computes quantiles over a sequence of &lt;tt&gt;double&lt;/tt&gt; elements.
 * The folkore algorithm: Keeps all elements in main memory, sorts the list, then picks the quantiles.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <declaration type="DoubleArrayList" name="buffer" />
  <declaration type="boolean" name="isSorted" />
  <javadoc>
    <text>Constructs an empty exact quantile finder.</text>
  </javadoc>
  <method type="constructor" name="ExactDoubleQuantileFinder" />
  <javadoc>
    <text>Adds a value to the receiver.</text>
    <param>value the value to add.</param>
  </javadoc>
  <method type="void" name="add" />
  <javadoc>
    <text>Adds all values of the specified list to the receiver.</text>
    <param>values the list of which all values shall be added.</param>
  </javadoc>
  <method type="void" name="addAllOf" />
  <javadoc>
    <text>Adds the part of the specified list between indexes &lt;tt&gt;from&lt;/tt&gt; (inclusive) and &lt;tt&gt;to&lt;/tt&gt; (inclusive) to the receiver.</text>
    <param>values the list of which elements shall be added.</param>
    <param>from the index of the first element to be added (inclusive).</param>
    <param>to the index of the last element to be added (inclusive).</param>
  </javadoc>
  <method type="void" name="addAllOfFromTo" />
  <javadoc>
    <text>Removes all elements from the receiver.  The receiver will
 * be empty after this call returns, and its memory requirements will be close to zero.</text>
  </javadoc>
  <method type="void" name="clear" />
  <javadoc>
    <text>Returns a deep copy of the receiver.</text>
    <return>a deep copy of the receiver.</return>
  </javadoc>
  <method type="Object" name="clone">
    <declaration type="ExactDoubleQuantileFinder" name="copy" />
  </method>
  <javadoc>
    <text>Returns whether the specified element is contained in the receiver.</text>
  </javadoc>
  <method type="boolean" name="contains" />
  <javadoc>
    <text>Applies a procedure to each element of the receiver, if any.
 * Iterates over the receiver in no particular order.</text>
    <param>procedure    the procedure to be applied. Stops iteration if the procedure returns &lt;tt&gt;false&lt;/tt&gt;, otherwise continues.</param>
    <return>&lt;tt&gt;false&lt;/tt&gt; if the procedure stopped before all elements where iterated over, &lt;tt&gt;true&lt;/tt&gt; otherwise.</return>
  </javadoc>
  <method type="boolean" name="forEach">
    <declaration type="double[]" name="theElements" />
    <declaration type="int" name="theSize" />
  </method>
  <javadoc>
    <text>Returns the number of elements currently needed to store all contained elements.
 * This number usually differs from the results of method &lt;tt&gt;size()&lt;/tt&gt;, according to the underlying datastructure.</text>
  </javadoc>
  <method type="long" name="memory" />
  <javadoc>
    <text>Returns how many percent of the elements contained in the receiver are &lt;tt&gt;&amp;lt;= element&lt;/tt&gt;.
 * Does linear interpolation if the element is not contained but lies in between two contained elements.</text>
    <param>the element to search for.</param>
    <return>the percentage &lt;tt&gt;p&lt;/tt&gt; of elements &lt;tt&gt;&amp;lt;= element&lt;/tt&gt; (&lt;tt&gt;0.0 &amp;lt;= p &amp;lt;=1.0)&lt;/tt&gt;.</return>
  </javadoc>
  <method type="double" name="phi" />
  <javadoc>
    <text>Computes the specified quantile elements over the values previously added.</text>
    <param>phis the quantiles for which elements are to be computed. Each phi must be in the interval [0.0,1.0]. &lt;tt&gt;phis&lt;/tt&gt; must be sorted ascending.</param>
    <return>the exact quantile elements.</return>
  </javadoc>
  <method type="DoubleArrayList" name="quantileElements">
    <comment>int bufferSize = (int) this.size();
double[] quantileElements = new double[phis.size()];
for (int i=phis.size(); --i &gt;=0;) {
int rank=(int)Utils.epsilonCeiling(phis.get(i)bufferSize) -1;
quantileElements[i]=buffer.get(rank);
}
return new DoubleArrayList(quantileElements);</comment>
  </method>
  <javadoc>
    <text>Returns the number of elements currently contained in the receiver (identical to the number of values added so far).</text>
  </javadoc>
  <method type="long" name="size" />
  <javadoc>
    <text>Sorts the receiver.</text>
  </javadoc>
  <method type="void" name="sort">
    <scope />
    <comment>IMPORTANT: TO DO : replace mergeSort with quickSort!</comment>
    <comment>currently it is mergeSort because JDK 1.2 can't be imported into VisualAge.</comment>
    <comment>this.buffer.mergeSort();</comment>
  </method>
  <javadoc>
    <text>Returns a String representation of the receiver.</text>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="String" name="s" />
  </method>
  <javadoc>
    <text>Returns the number of elements currently needed to store all contained elements.
 * This number usually differs from the results of method &lt;tt&gt;size()&lt;/tt&gt;, according to the underlying datastructure.</text>
  </javadoc>
  <method type="long" name="totalMemory" />
  <comment>Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose
is hereby granted without fee, provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear in supporting documentation.
CERN makes no representations about the suitability of this software for any purpose.
It is provided "as is" without expressed or implied warranty.</comment>
  <comment>class ExactDoubleQuantileFinder extends Object implements DoubleQuantileFinder {</comment>
</class>
