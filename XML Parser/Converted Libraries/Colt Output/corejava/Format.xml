<?xml version="1.0" encoding="UTF-8"?>
<class name="Format">
  <javadoc>
    <text>A class for formatting numbers that follows &lt;tt&gt;printf&lt;/tt&gt; conventions.
 * Also implements C-like &lt;tt&gt;atoi&lt;/tt&gt; and &lt;tt&gt;atof&lt;/tt&gt; functions</text>
    <version>1.22 2002-11-16</version>
    <author>Cay Horstmann
 * 1998-09-14: Fixed a number of bugs.
 * 1.Formatting the most extreme negative number (-9223372036854775808L) printed with 2 leading minus signs.
 * 2.Printing 0 with a %e or %g format did not work.
 * 3.Printing numbers that were closer to 1 than the number of requested decimal places rounded down rather than up, e.g. formatting 1.999 with %.2f printed 1.00. (This one is pretty serious, of course.)
 * 4.Printing with precision 0 (e.g %10.0f) didn't work.
 * 5.Printing a string with a precision that exceeded the string length (e.g. print "Hello" with %20.10s) caused a StringIndexOutOfBounds error.
 * 1998-10-21: Changed method names from print to printf
 * 2000-06-09: Moved to package com.horstmann; no longer part of
 * Core Java
 * 2000-06-09: Fixed a number of bugs.
 * 1.Printing 100.0 with %e printed 10.0e1, not 1.0e2
 * 2.Printing Inf and NaN didn't work.
 * 2000-06-09: Coding guideline cleanup
 * 2002-11-16: Move to package com.horstmann.format; licensed under LGPL</author>
  </javadoc>
  <javadoc>
    <text>Formats the number following &lt;tt&gt;printf&lt;/tt&gt; conventions.
 * Main limitation: Can only handle one format parameter at a time
 * Use multiple Format objects to format more than one number</text>
    <param>s the format string following printf conventions
 * The string has a prefix, a format code and a suffix. The prefix and suffix
 * become part of the formatted output. The format code directs the
 * formatting of the (single) parameter to be formatted. The code has the
 * following structure
 * &lt;ul&gt;
 * &lt;li&gt; a % (required)
 * &lt;li&gt; a modifier (optional)
 * &lt;dl&gt;
 * &lt;dt&gt; + &lt;dd&gt; forces display of + for positive numbers
 * &lt;dt&gt; 0 &lt;dd&gt; show leading zeroes
 * &lt;dt&gt; - &lt;dd&gt; align left in the field
 * &lt;dt&gt; space &lt;dd&gt; prepend a space in front of positive numbers
 * &lt;dt&gt; # &lt;dd&gt; use "alternate" format. Add 0 or 0x for octal or hexadecimal numbers. Don't suppress trailing zeroes in general floating point format.
 * &lt;/dl&gt;
 * &lt;li&gt; an integer denoting field width (optional)
 * &lt;li&gt; a period followed by an integer denoting precision (optional)
 * &lt;li&gt; a format descriptor (required)
 * &lt;dl&gt;
 * &lt;dt&gt;f &lt;dd&gt; floating point number in fixed format
 * &lt;dt&gt;e, E &lt;dd&gt; floating point number in exponential notation (scientific format). The E format results in an uppercase E for the exponent (1.14130E+003), the e format in a lowercase e.
 * &lt;dt&gt;g, G &lt;dd&gt; floating point number in general format (fixed format for small numbers, exponential format for large numbers). Trailing zeroes are suppressed. The G format results in an uppercase E for the exponent (if any), the g format in a lowercase e.
 * &lt;dt&gt;d, i &lt;dd&gt; integer in decimal
 * &lt;dt&gt;x &lt;dd&gt; integer in hexadecimal
 * &lt;dt&gt;o &lt;dd&gt; integer in octal
 * &lt;dt&gt;s &lt;dd&gt; string
 * &lt;dt&gt;c &lt;dd&gt; character
 * &lt;/dl&gt;
 * &lt;/ul&gt;</param>
    <exception>IllegalArgumentException if bad format</exception>
  </javadoc>
  <method type="constructor" name="Format">
    <declaration type="int" name="state" />
    <declaration type="int" name="length" />
    <declaration type="int" name="parseState" />
    <declaration type="int" name="i" />
    <scope>
      <scope>
        <scope>
          <scope />
        </scope>
      </scope>
    </scope>
    <scope>
      <scope />
    </scope>
    <scope>
      <scope />
      <scope />
    </scope>
    <scope>
      <scope />
    </scope>
    <scope />
    <comment>0 = prefix, 1 = flags, 2 = width, 3 = precision,</comment>
    <comment>4 = format, 5 = end</comment>
  </method>
  <javadoc>
    <text>prints a formatted number following printf conventions</text>
    <param>fmt the format string</param>
    <param>x the double to print</param>
  </javadoc>
  <method type="void" name="printf" />
  <javadoc>
    <text>prints a formatted number following printf conventions</text>
    <param>fmt the format string</param>
    <param>x the int to print</param>
  </javadoc>
  <method type="void" name="printf" />
  <javadoc>
    <text>prints a formatted number following printf conventions</text>
    <param>fmt the format string</param>
    <param>x the long to print</param>
  </javadoc>
  <method type="void" name="printf" />
  <javadoc>
    <text>prints a formatted number following printf conventions</text>
    <param>fmt the format string</param>
    <param>x the character to print</param>
  </javadoc>
  <method type="void" name="printf" />
  <javadoc>
    <text>prints a formatted number following printf conventions</text>
    <param>fmt the format string</param>
    <param>x a string to print</param>
  </javadoc>
  <method type="void" name="printf" />
  <javadoc>
    <text>Converts a string of digits (decimal, octal or hex) to an integer</text>
    <param>s a string</param>
    <return>the numeric value of the prefix of s representing a base 10 integer</return>
  </javadoc>
  <method type="int" name="atoi" />
  <javadoc>
    <text>Converts a string of digits (decimal, octal or hex) to a long integer</text>
    <param>s a string</param>
    <return>the numeric value of the prefix of s representing a base 10 integer</return>
  </javadoc>
  <method type="long" name="atol">
    <declaration type="int" name="i" />
    <scope />
  </method>
  <method type="long" name="parseLong">
    <declaration type="int" name="i" />
    <declaration type="int" name="sign" />
    <declaration type="long" name="r" />
    <scope />
    <scope />
    <scope>
      <declaration type="char" name="ch" />
    </scope>
  </method>
  <javadoc>
    <text>Converts a string of digits to a &lt;tt&gt;double&lt;/tt&gt;</text>
    <param>s a string</param>
  </javadoc>
  <method type="double" name="atof">
    <declaration type="int" name="i" />
    <declaration type="int" name="sign" />
    <declaration type="double" name="r" />
    <declaration type="double" name="f" />
    <declaration type="double" name="p" />
    <declaration type="int" name="state" />
    <scope />
    <scope />
    <scope>
      <declaration type="char" name="ch" />
      <scope>
        <scope />
      </scope>
      <scope />
      <scope>
        <declaration type="long" name="e" />
      </scope>
    </scope>
    <comment>integer part</comment>
    <comment>fractional part</comment>
    <comment>exponent of fractional part</comment>
    <comment>0 = int part, 1 = frac part</comment>
  </method>
  <javadoc>
    <text>Formats a &lt;tt&gt;double&lt;/tt&gt; into a string (like sprintf in C)</text>
    <param>x the number to format</param>
    <return>the formatted string</return>
    <exception>IllegalArgumentException if bad argument</exception>
  </javadoc>
  <method type="String" name="format">
    <declaration type="String" name="r" />
    <declaration type="int" name="s" />
    <scope />
  </method>
  <javadoc>
    <text>Formats an integer into a string (like sprintf in C)</text>
    <param>x the number to format</param>
    <return>the formatted string</return>
  </javadoc>
  <method type="String" name="format">
    <declaration type="long" name="lx" />
  </method>
  <javadoc>
    <text>Formats a long integer into a string (like sprintf in C)</text>
    <param>x the number to format</param>
    <return>the formatted string</return>
  </javadoc>
  <method type="String" name="format">
    <declaration type="String" name="r" />
    <declaration type="int" name="s" />
    <scope>
      <scope />
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Formats a character into a string (like sprintf in C)</text>
    <param>x the value to format</param>
    <return>the formatted string</return>
  </javadoc>
  <method type="String" name="format">
    <declaration type="String" name="r" />
  </method>
  <javadoc>
    <text>Formats a string into a larger string (like sprintf in C)</text>
    <param>x the value to format</param>
    <return>the formatted string</return>
  </javadoc>
  <method type="String" name="format" />
  <javadoc>
    <text>a test stub for the format class</text>
  </javadoc>
  <method type="void" name="main">
    <declaration type="double" name="x" />
    <declaration type="double" name="y" />
    <declaration type="double" name="z" />
    <declaration type="double" name="w" />
    <declaration type="double" name="u" />
    <declaration type="double" name="v" />
    <declaration type="int" name="d" />
    <comment>regression test to confirm fix of reported bugs</comment>
    <comment>2000-06-09</comment>
  </method>
  <method type="String" name="repeat">
    <declaration type="StringBuffer" name="s" />
  </method>
  <method type="String" name="convert">
    <declaration type="String" name="r" />
    <scope />
  </method>
  <method type="String" name="pad">
    <declaration type="String" name="p" />
  </method>
  <method type="String" name="sign">
    <declaration type="String" name="p" />
    <scope />
    <scope />
    <declaration type="int" name="w" />
  </method>
  <method type="String" name="fixedFormat">
    <declaration type="boolean" name="removeTrailing" />
    <declaration type="long" name="whole" />
    <declaration type="double" name="fr" />
    <declaration type="double" name="factor" />
    <declaration type="String" name="leadingZeroes" />
    <scope />
    <declaration type="long" name="l" />
    <scope />
    <declaration type="String" name="z" />
    <scope>
      <declaration type="int" name="t" />
    </scope>
    <comment>remove trailing zeroes and decimal point</comment>
    <comment>fractional part</comment>
    <comment>CSH 10-25-97</comment>
  </method>
  <method type="String" name="expFormat">
    <declaration type="String" name="f" />
    <declaration type="int" name="e" />
    <declaration type="double" name="dd" />
    <declaration type="double" name="factor" />
    <scope>
      <scope />
      <scope />
    </scope>
    <declaration type="String" name="p" />
    <scope />
    <scope />
    <comment>2000-06-09</comment>
  </method>
  <declaration type="int" name="width" />
  <declaration type="int" name="precision" />
  <declaration type="String" name="pre" />
  <declaration type="String" name="post" />
  <declaration type="boolean" name="leadingZeroes" />
  <declaration type="boolean" name="showPlus" />
  <declaration type="boolean" name="alternate" />
  <declaration type="boolean" name="showSpace" />
  <declaration type="boolean" name="leftAlign" />
  <declaration type="char" name="fmt" />
  <comment>Format - printf style formatting for Java
Copyright (C) 1995...2002 Cay S. Horstmann (http:horstmann.com)

This library is free software; you can redistribute it andor
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</comment>
  <comment>one of cdeEfgGiosxXos</comment>
</class>
