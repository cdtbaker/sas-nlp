<?xml version="1.0" encoding="UTF-8"?>
<class name="Converter">
  <javadoc>
    <text>Histogram conversions, for example to String and XML format; 
 * This class requires the Colt distribution, whereas the rest of the package is entirelly stand-alone.</text>
  </javadoc>
  <javadoc>
    <text>Creates a new histogram converter.</text>
  </javadoc>
  <method type="constructor" name="Converter" />
  <javadoc>
    <text>Returns all edges of the given axis.</text>
  </javadoc>
  <method type="double[]" name="edges">
    <declaration type="int" name="b" />
    <declaration type="double[]" name="bounds" />
  </method>
  <method type="String" name="form" />
  <javadoc>
    <text>Returns an array[h.xAxis().bins()]; ignoring extra bins.</text>
  </javadoc>
  <method type="double[]" name="toArrayErrors">
    <declaration type="int" name="xBins" />
    <declaration type="double[]" name="array" />
    <scope />
  </method>
  <javadoc>
    <text>Returns an array[h.xAxis().bins()][h.yAxis().bins()]; ignoring extra bins.</text>
  </javadoc>
  <method type="double[][]" name="toArrayErrors">
    <declaration type="int" name="xBins" />
    <declaration type="int" name="yBins" />
    <declaration type="double[][]" name="array" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns an array[h.xAxis().bins()]; ignoring extra bins.</text>
  </javadoc>
  <method type="double[]" name="toArrayHeights">
    <declaration type="int" name="xBins" />
    <declaration type="double[]" name="array" />
    <scope />
  </method>
  <javadoc>
    <text>Returns an array[h.xAxis().bins()][h.yAxis().bins()]; ignoring extra bins.</text>
  </javadoc>
  <method type="double[][]" name="toArrayHeights">
    <declaration type="int" name="xBins" />
    <declaration type="int" name="yBins" />
    <declaration type="double[][]" name="array" />
    <scope>
      <scope />
    </scope>
  </method>
  <javadoc>
    <text>Returns an array[h.xAxis().bins()][h.yAxis().bins()][h.zAxis().bins()]; ignoring extra bins.</text>
  </javadoc>
  <method type="double[][][]" name="toArrayHeights">
    <declaration type="int" name="xBins" />
    <declaration type="int" name="yBins" />
    <declaration type="int" name="zBins" />
    <declaration type="double[][][]" name="array" />
    <scope>
      <scope>
        <scope />
      </scope>
    </scope>
  </method>
  <javadoc>
    <text>Returns a string representation of the specified array.  The string
 * representation consists of a list of the arrays's elements, enclosed in square brackets
 * (&lt;tt&gt;"[]"&lt;/tt&gt;).  Adjacent elements are separated by the characters
 * &lt;tt&gt;", "&lt;/tt&gt; (comma and space).</text>
    <return>a string representation of the specified array.</return>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuffer" name="buf" />
    <declaration type="int" name="maxIndex" />
    <scope />
  </method>
  <javadoc>
    <text>Returns a string representation of the given argument.</text>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuffer" name="buf" />
  </method>
  <javadoc>
    <text>Returns a string representation of the given argument.</text>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="String" name="columnAxisName" />
    <declaration type="String" name="rowAxisName" />
    <declaration type="hep.aida.bin.BinFunction1D[]" name="aggr" />
    <declaration type="String" name="format" />
    <declaration type="cern.colt.matrix.impl.Former" name="f" />
    <declaration type="String" name="sep" />
    <declaration type="int[]" name="minMaxBins" />
    <declaration type="String" name="title" />
    <declaration type="String[]" name="xEdges" />
    <declaration type="String[]" name="yEdges" />
    <declaration type="cern.colt.matrix.DoubleMatrix2D" name="heights" />
    <comment>"X";</comment>
    <comment>{hep.aida.bin.BinFunctions1D.sum};</comment>
    <comment>String format = "%1.2G";</comment>
    <comment>cern.colt.matrix.DoubleMatrix2D errors = new cern.colt.matrix.impl.DenseDoubleMatrix2D(1,h.xAxis().bins());</comment>
    <comment>errors.viewRow(0).assign(toArrayErrors(h));</comment>
    <comment>+ sep +
"Errors:" + sep +
new cern.colt.matrix.doublealgo.Formatter().toTitleString(
errors,yEdges,xEdges,rowAxisName,columnAxisName,null,aggr);</comment>
  </method>
  <javadoc>
    <text>Returns a string representation of the given argument.</text>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="String" name="columnAxisName" />
    <declaration type="String" name="rowAxisName" />
    <declaration type="hep.aida.bin.BinFunction1D[]" name="aggr" />
    <declaration type="String" name="format" />
    <declaration type="cern.colt.matrix.impl.Former" name="f" />
    <declaration type="String" name="sep" />
    <declaration type="int[]" name="minMaxBins" />
    <declaration type="String" name="title" />
    <declaration type="String[]" name="xEdges" />
    <declaration type="String[]" name="yEdges" />
    <declaration type="cern.colt.matrix.DoubleMatrix2D" name="heights" />
    <comment>String format = "%1.2G";</comment>
    <comment>keep coord. system</comment>
    <comment>keep the histo coord. system</comment>
    <comment>heights = heights.viewPart(1,1,heights.rows()-2,heights.columns()-2);  ignore under&amp;overflows</comment>
    <comment>cern.colt.matrix.DoubleMatrix2D errors = new cern.colt.matrix.impl.DenseDoubleMatrix2D(toArrayErrors(h));</comment>
    <comment>errors = errors.viewDice().viewRowFlip();  keep the histo coord system</comment>
    <comment>errors = errors.viewPart(1,1,errors.rows()-2,errors.columns()-2);  ignore under&amp;overflows</comment>
    <comment>+ sep +
"Errors:" + sep +
new cern.colt.matrix.doublealgo.Formatter().toTitleString(
errors,yEdges,xEdges,rowAxisName,columnAxisName,null,aggr);</comment>
  </method>
  <javadoc>
    <text>Returns a string representation of the given argument.</text>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="String" name="columnAxisName" />
    <declaration type="String" name="rowAxisName" />
    <declaration type="String" name="sliceAxisName" />
    <declaration type="hep.aida.bin.BinFunction1D[]" name="aggr" />
    <declaration type="String" name="format" />
    <declaration type="cern.colt.matrix.impl.Former" name="f" />
    <declaration type="String" name="sep" />
    <declaration type="int[]" name="minMaxBins" />
    <declaration type="String" name="title" />
    <declaration type="String[]" name="xEdges" />
    <declaration type="String[]" name="yEdges" />
    <declaration type="String[]" name="zEdges" />
    <declaration type="cern.colt.matrix.DoubleMatrix3D" name="heights" />
    <comment>String format = "%1.2G";</comment>
    <comment>keep coord. system</comment>
    <comment>keep coord. system</comment>
    <comment>keep the histo coord. system</comment>
    <comment>heights = heights.viewPart(1,1,heights.rows()-2,heights.columns()-2);  ignore under&amp;overflows</comment>
    <comment>cern.colt.matrix.DoubleMatrix2D errors = new cern.colt.matrix.impl.DenseDoubleMatrix2D(toArrayErrors(h));</comment>
    <comment>errors = errors.viewDice().viewRowFlip();  keep the histo coord system</comment>
    <comment>errors = errors.viewPart(1,1,errors.rows()-2,errors.columns()-2);  ignore under&amp;overflows</comment>
    <comment>+ sep +
"Errors:" + sep +
new cern.colt.matrix.doublealgo.Formatter().toTitleString(
errors,yEdges,xEdges,rowAxisName,columnAxisName,null,aggr);</comment>
  </method>
  <javadoc>
    <text>Returns a XML representation of the given argument.</text>
  </javadoc>
  <method type="String" name="toXML">
    <declaration type="StringBuffer" name="buf" />
    <declaration type="String" name="sep" />
    <scope />
    <scope />
    <scope />
  </method>
  <javadoc>
    <text>Returns a XML representation of the given argument.</text>
  </javadoc>
  <method type="String" name="toXML">
    <declaration type="StringBuffer" name="out" />
    <declaration type="String" name="sep" />
    <scope />
    <comment>out.append("&lt;statistics&gt;"); out.append(sep);</comment>
    <comment>out.append("&lt;statistic name=\"Entries\" value=\""+h.entries()+"\"/&gt;"); out.append(sep);</comment>
    <comment>out.append("&lt;statistic name=\"MeanX\" value=\""+h.meanX()+"\"/&gt;"); out.append(sep);</comment>
    <comment>out.append("&lt;statistic name=\"RmsX\" value=\""+h.rmsX()+"\"/&gt;"); out.append(sep);</comment>
    <comment>out.append("&lt;statistic name=\"MeanY\" value=\""+h.meanY()+"\"/&gt;"); out.append(sep);</comment>
    <comment>out.append("&lt;statistic name=\"RmsY\" value=\""+h.rmsY()+"\"/&gt;"); out.append(sep);</comment>
    <comment>out.append("&lt;/statistics&gt;"); out.append(sep);</comment>
  </method>
</class>
