<?xml version="1.0" encoding="UTF-8"?>
<class name="Histogram1D">
  <javadoc>
    <text>A reference implementation of hep.aida.IHistogram1D.
 * The goal is to provide a clear implementation rather than the most efficient implementation.
 * However, performance seems fine - filling 1.2 * 10^6 points/sec, both using FixedAxis or VariableAxis.</text>
    <author>Wolfgang Hoschek, Tony Johnson, and others.</author>
    <version>1.0, 23/03/2000</version>
  </javadoc>
  <declaration type="double[]" name="errors" />
  <declaration type="double[]" name="heights" />
  <declaration type="int[]" name="entries" />
  <declaration type="int" name="nEntry" />
  <declaration type="double" name="sumWeight" />
  <declaration type="double" name="sumWeightSquared" />
  <declaration type="double" name="mean" />
  <javadoc>
    <text>Creates a variable-width histogram.
 * Example: &lt;tt&gt;edges = (0.2, 1.0, 5.0)&lt;/tt&gt; yields an axis with 2 in-range bins &lt;tt&gt;[0.2,1.0), [1.0,5.0)&lt;/tt&gt; and 2 extra bins &lt;tt&gt;[-inf,0.2), [5.0,inf]&lt;/tt&gt;.</text>
    <param>title The histogram title.</param>
    <param>edges the bin boundaries the axis shall have;
 * must be sorted ascending and must not contain multiple identical elements.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;edges.length &lt; 1&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="constructor" name="Histogram1D" />
  <javadoc>
    <text>Creates a fixed-width histogram.</text>
    <param>title The histogram title.</param>
    <param>bins The number of bins.</param>
    <param>min The minimum value on the X axis.</param>
    <param>max The maximum value on the X axis.</param>
  </javadoc>
  <method type="constructor" name="Histogram1D" />
  <javadoc>
    <text>Creates a histogram with the given axis binning.</text>
    <param>title The histogram title.</param>
    <param>axis The axis description to be used for binning.</param>
  </javadoc>
  <method type="constructor" name="Histogram1D">
    <declaration type="int" name="bins" />
  </method>
  <method type="int" name="allEntries">
    <comment>perhaps to be deleted (default impl. in superclass sufficient)</comment>
  </method>
  <method type="int" name="binEntries">
    <comment>return entries[xAxis.map(index)];</comment>
  </method>
  <method type="double" name="binError">
    <comment>return Math.sqrt(errors[xAxis.map(index)]);</comment>
  </method>
  <method type="double" name="binHeight">
    <comment>return heights[xAxis.map(index)];</comment>
  </method>
  <method type="double" name="equivalentBinEntries" />
  <method type="void" name="fill">
    <declaration type="int" name="bin" />
    <comment>int bin = xAxis.getBin(x);</comment>
  </method>
  <method type="void" name="fill">
    <declaration type="int" name="bin" />
    <comment>int bin = xAxis.getBin(x);</comment>
  </method>
  <method type="double" name="mean" />
  <method type="void" name="reset">
    <scope />
  </method>
  <method type="double" name="rms" />
  <javadoc>
    <text>Used internally for creating slices and projections</text>
  </javadoc>
  <method type="void" name="setContents">
    <scope />
    <comment>TODO: Can we do anything sensible/useful with the other statistics?</comment>
  </method>
  <comment>total number of times fill called</comment>
  <comment>Sum of all weights</comment>
  <comment>Sum of the squares of the weights</comment>
</class>
