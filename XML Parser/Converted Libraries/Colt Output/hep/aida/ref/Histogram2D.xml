<?xml version="1.0" encoding="UTF-8"?>
<class name="Histogram2D">
  <javadoc>
    <text>A reference implementation of hep.aida.IHistogram2D.
 * The goal is to provide a clear implementation rather than the most efficient implementation.
 * However, performance seems fine - filling 6 * 10^5 points/sec, both using FixedAxis or VariableAxis.</text>
    <author>Wolfgang Hoschek, Tony Johnson, and others.</author>
    <version>1.0, 23/03/2000</version>
  </javadoc>
  <declaration type="double[][]" name="heights" />
  <declaration type="double[][]" name="errors" />
  <declaration type="int[][]" name="entries" />
  <declaration type="int" name="nEntry" />
  <declaration type="double" name="sumWeight" />
  <declaration type="double" name="sumWeightSquared" />
  <declaration type="double" name="meanX" />
  <declaration type="double" name="meanY" />
  <javadoc>
    <text>Creates a variable-width histogram.
 * Example: &lt;tt&gt;xEdges = (0.2, 1.0, 5.0, 6.0), yEdges = (-5, 0, 7)&lt;/tt&gt; yields 3*2 in-range bins.</text>
    <param>title The histogram title.</param>
    <param>xEdges the bin boundaries the x-axis shall have;
 * must be sorted ascending and must not contain multiple identical elements.</param>
    <param>yEdges the bin boundaries the y-axis shall have;
 * must be sorted ascending and must not contain multiple identical elements.</param>
    <throws>IllegalArgumentException if &lt;tt&gt;xEdges.length &lt; 1 || yEdges.length &lt; 1&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="constructor" name="Histogram2D" />
  <javadoc>
    <text>Creates a fixed-width histogram.</text>
    <param>title The histogram title.</param>
    <param>xBins The number of bins on the X axis.</param>
    <param>xMin The minimum value on the X axis.</param>
    <param>xMax The maximum value on the X axis.</param>
    <param>yBins The number of bins on the Y axis.</param>
    <param>yMin The minimum value on the Y axis.</param>
    <param>yMax The maximum value on the Y axis.</param>
  </javadoc>
  <method type="constructor" name="Histogram2D" />
  <javadoc>
    <text>Creates a histogram with the given axis binning.</text>
    <param>title The histogram title.</param>
    <param>xAxis The x-axis description to be used for binning.</param>
    <param>yAxis The y-axis description to be used for binning.</param>
  </javadoc>
  <method type="constructor" name="Histogram2D">
    <declaration type="int" name="xBins" />
    <declaration type="int" name="yBins" />
  </method>
  <method type="int" name="allEntries" />
  <method type="int" name="binEntries">
    <comment>return entries[xAxis.map(indexX)][yAxis.map(indexY)];</comment>
  </method>
  <method type="double" name="binError">
    <comment>return Math.sqrt(errors[xAxis.map(indexX)][yAxis.map(indexY)]);</comment>
  </method>
  <method type="double" name="binHeight">
    <comment>return heights[xAxis.map(indexX)][yAxis.map(indexY)];</comment>
  </method>
  <method type="double" name="equivalentBinEntries" />
  <method type="void" name="fill">
    <declaration type="int" name="xBin" />
    <declaration type="int" name="yBin" />
    <comment>int xBin = xAxis.getBin(x);</comment>
    <comment>int yBin = xAxis.getBin(y);</comment>
  </method>
  <method type="void" name="fill">
    <declaration type="int" name="xBin" />
    <declaration type="int" name="yBin" />
    <comment>int xBin = xAxis.getBin(x);</comment>
    <comment>int yBin = xAxis.getBin(y);</comment>
  </method>
  <javadoc>
    <text>The precise meaning of the arguments to the public slice
 * methods is somewhat ambiguous, so we define this internal
 * slice method and clearly specify its arguments.
 * &lt;p&gt;
 * &lt;b&gt;Note 0&lt;/b&gt;indexY1 and indexY2 use our INTERNAL bin numbering scheme
 * &lt;b&gt;Note 1&lt;/b&gt;The slice is done between indexY1 and indexY2 INCLUSIVE
 * &lt;b&gt;Note 2&lt;/b&gt;indexY1 and indexY2 may include the use of under and over flow bins
 * &lt;b&gt;Note 3&lt;/b&gt;There is no note 3 (yet)</text>
  </javadoc>
  <method type="IHistogram1D" name="internalSliceX">
    <declaration type="int" name="sliceBins" />
    <declaration type="int[]" name="sliceEntries" />
    <declaration type="double[]" name="sliceHeights" />
    <declaration type="double[]" name="sliceErrors" />
    <scope>
      <scope />
    </scope>
    <declaration type="Histogram1D" name="result" />
    <comment>Attention: our internal definition of bins has been choosen</comment>
    <comment>so that this works properly even if the indeces passed in include</comment>
    <comment>the underflow or overflow bins</comment>
    <comment>for (int i=xAxis.under; i&lt;=xAxis.over; i++)</comment>
  </method>
  <javadoc>
    <text>The precise meaning of the arguments to the public slice
 * methods is somewhat ambiguous, so we define this internal
 * slice method and clearly specify its arguments.
 * &lt;p&gt;
 * &lt;b&gt;Note 0&lt;/b&gt;indexX1 and indexX2 use our INTERNAL bin numbering scheme
 * &lt;b&gt;Note 1&lt;/b&gt;The slice is done between indexX1 and indexX2 INCLUSIVE
 * &lt;b&gt;Note 2&lt;/b&gt;indexX1 and indexX2 may include the use of under and over flow bins
 * &lt;b&gt;Note 3&lt;/b&gt;There is no note 3 (yet)</text>
  </javadoc>
  <method type="IHistogram1D" name="internalSliceY">
    <declaration type="int" name="sliceBins" />
    <declaration type="int[]" name="sliceEntries" />
    <declaration type="double[]" name="sliceHeights" />
    <declaration type="double[]" name="sliceErrors" />
    <scope>
      <scope />
    </scope>
    <declaration type="Histogram1D" name="result" />
    <comment>Attention: our internal definition of bins has been choosen</comment>
    <comment>so that this works properly even if the indeces passed in include</comment>
    <comment>the underflow or overflow bins</comment>
    <comment>for (int j=yAxis.under; j&lt;=yAxis.over; j++)</comment>
  </method>
  <method type="double" name="meanX" />
  <method type="double" name="meanY" />
  <method type="void" name="reset">
    <scope />
  </method>
  <method type="double" name="rmsX" />
  <method type="double" name="rmsY" />
  <javadoc>
    <text>Used internally for creating slices and projections</text>
  </javadoc>
  <method type="void" name="setContents">
    <scope />
    <comment>TODO: Can we do anything sensible/useful with the other statistics?</comment>
  </method>
  <method type="double" name="sumAllBinHeights" />
  <comment>total number of times fill called</comment>
  <comment>Sum of all weights</comment>
  <comment>Sum of the squares of the weights</comment>
</class>
