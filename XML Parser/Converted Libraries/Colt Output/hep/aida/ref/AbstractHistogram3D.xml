<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractHistogram3D">
  <javadoc>
    <text>Abstract base class extracting and implementing most of the redundancy of the interface.</text>
    <author>Wolfgang Hoschek, Tony Johnson, and others.</author>
    <version>1.0, 23/03/2000</version>
  </javadoc>
  <declaration type="IAxis" name="xAxis" />
  <method type="constructor" name="AbstractHistogram3D" />
  <method type="int" name="allEntries">
    <declaration type="int" name="n" />
    <scope />
  </method>
  <method type="int" name="dimensions" />
  <method type="int" name="entries">
    <declaration type="int" name="n" />
    <scope />
  </method>
  <method type="int" name="extraEntries" />
  <method type="void" name="fill" />
  <method name="internalSliceXY" type="IHistogram2D" />
  <javadoc>
    <text>The precise meaning of the arguments to the public slice
 * methods is somewhat ambiguous, so we define this internal
 * slice method and clearly specify its arguments.
 * &lt;p&gt;
 * &lt;b&gt;Note 0&lt;/b&gt;indexX1 and indexX2 use our INTERNAL bin numbering scheme
 * &lt;b&gt;Note 1&lt;/b&gt;The slice is done between indexX1 and indexX2 INCLUSIVE
 * &lt;b&gt;Note 2&lt;/b&gt;indexX1 and indexX2 may include the use of under and over flow bins
 * &lt;b&gt;Note 3&lt;/b&gt;There is no note 3 (yet)</text>
  </javadoc>
  <method name="internalSliceXZ" type="IHistogram2D" />
  <javadoc>
    <text>The precise meaning of the arguments to the public slice
 * methods is somewhat ambiguous, so we define this internal
 * slice method and clearly specify its arguments.
 * &lt;p&gt;
 * &lt;b&gt;Note 0&lt;/b&gt;indexY1 and indexY2 use our INTERNAL bin numbering scheme
 * &lt;b&gt;Note 1&lt;/b&gt;The slice is done between indexY1 and indexY2 INCLUSIVE
 * &lt;b&gt;Note 2&lt;/b&gt;indexY1 and indexY2 may include the use of under and over flow bins
 * &lt;b&gt;Note 3&lt;/b&gt;There is no note 3 (yet)</text>
  </javadoc>
  <method name="internalSliceYZ" type="IHistogram2D" />
  <javadoc>
    <text>The precise meaning of the arguments to the public slice
 * methods is somewhat ambiguous, so we define this internal
 * slice method and clearly specify its arguments.
 * &lt;p&gt;
 * &lt;b&gt;Note 0&lt;/b&gt;indexX1 and indexX2 use our INTERNAL bin numbering scheme
 * &lt;b&gt;Note 1&lt;/b&gt;The slice is done between indexX1 and indexX2 INCLUSIVE
 * &lt;b&gt;Note 2&lt;/b&gt;indexX1 and indexX2 may include the use of under and over flow bins
 * &lt;b&gt;Note 3&lt;/b&gt;There is no note 3 (yet)</text>
  </javadoc>
  <javadoc>
    <text>Package private method to map from the external representation of bin
 * number to our internal representation of bin number</text>
  </javadoc>
  <method type="int" name="mapX">
    <declaration type="int" name="bins" />
  </method>
  <javadoc>
    <text>Package private method to map from the external representation of bin
 * number to our internal representation of bin number</text>
  </javadoc>
  <method type="int" name="mapY">
    <declaration type="int" name="bins" />
  </method>
  <javadoc>
    <text>Package private method to map from the external representation of bin
 * number to our internal representation of bin number</text>
  </javadoc>
  <method type="int" name="mapZ">
    <declaration type="int" name="bins" />
  </method>
  <method type="int[]" name="minMaxBins">
    <declaration type="double" name="minValue" />
    <declaration type="double" name="maxValue" />
    <declaration type="int" name="minBinX" />
    <declaration type="int" name="minBinY" />
    <declaration type="int" name="minBinZ" />
    <declaration type="int" name="maxBinX" />
    <declaration type="int" name="maxBinY" />
    <declaration type="int" name="maxBinZ" />
    <scope>
      <scope>
        <scope>
          <declaration type="double" name="value" />
          <scope />
          <scope />
        </scope>
      </scope>
    </scope>
    <declaration type="int[]" name="result" />
  </method>
  <method type="IHistogram2D" name="projectionXY">
    <declaration type="String" name="newTitle" />
  </method>
  <method type="IHistogram2D" name="projectionXZ">
    <declaration type="String" name="newTitle" />
  </method>
  <method type="IHistogram2D" name="projectionYZ">
    <declaration type="String" name="newTitle" />
  </method>
  <method type="IHistogram2D" name="sliceXY" />
  <method type="IHistogram2D" name="sliceXY">
    <declaration type="int" name="start" />
    <declaration type="int" name="stop" />
    <declaration type="String" name="newTitle" />
  </method>
  <method type="IHistogram2D" name="sliceXZ" />
  <method type="IHistogram2D" name="sliceXZ">
    <declaration type="int" name="start" />
    <declaration type="int" name="stop" />
    <declaration type="String" name="newTitle" />
  </method>
  <method type="IHistogram2D" name="sliceYZ" />
  <method type="IHistogram2D" name="sliceYZ">
    <declaration type="int" name="start" />
    <declaration type="int" name="stop" />
    <declaration type="String" name="newTitle" />
  </method>
  <method type="double" name="sumAllBinHeights">
    <declaration type="double" name="n" />
    <scope />
  </method>
  <method type="double" name="sumBinHeights">
    <declaration type="double" name="n" />
    <scope />
  </method>
  <method type="double" name="sumExtraBinHeights" />
  <method type="IAxis" name="xAxis" />
  <method type="IAxis" name="yAxis" />
  <method type="IAxis" name="zAxis" />
</class>
