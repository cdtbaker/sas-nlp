<?xml version="1.0" encoding="UTF-8"?>
<class name="StaticBin1D">
  <javadoc>
    <text>1-dimensional non-rebinnable bin consuming &lt;tt&gt;double&lt;/tt&gt; elements;
 * Efficiently computes basic statistics of data sequences.
 * First see the &lt;a href="package-summary.html"&gt;package summary&lt;/a&gt; and javadoc &lt;a href="package-tree.html"&gt;tree view&lt;/a&gt; to get the broad picture.
 * &lt;p&gt;
 * The data streamed into a &lt;tt&gt;SimpleBin1D&lt;/tt&gt; is not preserved!
 * As a consequence infinitely many elements can be added to this bin.
 * As a further consequence this bin cannot compute more than basic statistics.
 * It is also not rebinnable.
 * If these drawbacks matter, consider to use a {@link DynamicBin1D}, 
 * which overcomes them at the expense of increased memory requirements.
 * &lt;p&gt;
 * This class is fully thread safe (all public methods are synchronized).
 * Thus, you can have one or more threads adding to the bin as well as one or more threads reading and viewing the statistics of the bin &lt;i&gt;while it is filled&lt;/i&gt;.
 * For high performance, add data in large chunks (buffers) via method &lt;tt&gt;addAllOf&lt;/tt&gt; rather than piecewise via method &lt;tt&gt;add&lt;/tt&gt;.
 * &lt;p&gt;
 * &lt;b&gt;Implementation&lt;/b&gt;:
 * Incremental maintainance. Performance linear in the number of elements added.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>0.9, 03-Jul-99</version>
  </javadoc>
  <javadoc>
    <text>The number of elements consumed by incremental parameter maintainance.</text>
  </javadoc>
  <declaration type="int" name="size" />
  <declaration type="double" name="min" />
  <declaration type="double" name="max" />
  <declaration type="double" name="sum" />
  <declaration type="double" name="sum_xx" />
  <javadoc>
    <text>Function arguments used by method addAllOf(...)
 * For memory tuning only. Avoids allocating a new array of arguments each time addAllOf(...) is called.
 * Each bin does not need its own set of argument vars since they are declared as "static".
 * addAllOf(...) of this class uses only 4 entries.
 * Subclasses computing additional incremental statistics may need more arguments.
 * So, to be on the safe side we allocate space for 20 args.
 * Be sure you access this arguments only in synchronized blocks like
 * synchronized (arguments) { do it }
 * By the way, the whole fuss would be unnecessary if Java would know INOUT parameters (call by reference).</text>
  </javadoc>
  <declaration type="double[]" name="arguments" />
  <javadoc>
    <text>Constructs and returns an empty bin.</text>
  </javadoc>
  <method type="constructor" name="StaticBin1D" />
  <javadoc>
    <text>Adds the specified element to the receiver.</text>
    <param>element element to be appended.</param>
  </javadoc>
  <method type="void" name="add">
    <comment>prototyping implementation; inefficient; TODO</comment>
    <comment>sumSquares += element  element;
if (this.done == 0) {  initial setup
this.min = element;
this.max = element;
}
else {
if (element &lt; this.min) this.min = element;
if (element &gt; this.max) this.max = element;

double oldMean = this.mean;
this.mean += (element - this.mean)(done+1);
this.sumsq += (element-this.mean)(element-oldMean);  cool, huh?
}
this.done++;</comment>
  </method>
  <javadoc>
    <text>Adds the part of the specified list between indexes &lt;tt&gt;from&lt;/tt&gt; (inclusive) and &lt;tt&gt;to&lt;/tt&gt; (inclusive) to the receiver.</text>
    <param>list the list of which elements shall be added.</param>
    <param>from the index of the first element to be added (inclusive).</param>
    <param>to the index of the last element to be added (inclusive).</param>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;list.size()&amp;gt;0 &amp;&amp; (from&amp;lt;0 || from&amp;gt;to || to&amp;gt;=list.size())&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="addAllOfFromTo">
    <scope />
    <comment>if (this.arguments == null) setUpCache();</comment>
    <comment>prepare arguments</comment>
    <comment>store the new parameters back</comment>
  </method>
  <javadoc>
    <text>Removes all elements from the receiver.
 * The receiver will be empty after this call returns.</text>
  </javadoc>
  <method type="void" name="clear" />
  <javadoc>
    <text>Resets the values of all measures.</text>
  </javadoc>
  <method type="void" name="clearAllMeasures" />
  <javadoc>
    <text>Returns &lt;tt&gt;false&lt;/tt&gt;.
 * Returns whether a client can obtain all elements added to the receiver.
 * In other words, tells whether the receiver internally preserves all added elements.
 * If the receiver is rebinnable, the elements can be obtained via &lt;tt&gt;elements()&lt;/tt&gt; methods.</text>
  </javadoc>
  <method type="boolean" name="isRebinnable" />
  <javadoc>
    <text>Returns the maximum.</text>
  </javadoc>
  <method type="double" name="max" />
  <javadoc>
    <text>Returns the minimum.</text>
  </javadoc>
  <method type="double" name="min" />
  <javadoc>
    <text>Returns the number of elements contained in the receiver.</text>
    <returns>the number of elements contained in the receiver.</returns>
  </javadoc>
  <method type="int" name="size" />
  <javadoc>
    <text>Returns the sum of all elements, which is &lt;tt&gt;Sum( x[i] )&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="sum" />
  <javadoc>
    <text>Returns the sum of squares, which is &lt;tt&gt;Sum( x[i] * x[i] )&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="sumOfSquares" />
  <comment>cached parameters</comment>
  <comment>Min( x[i] )</comment>
  <comment>Max( x[i] )</comment>
  <comment>Sum( x[i] )</comment>
  <comment>Sum( x[i]*x[i] )</comment>
</class>
