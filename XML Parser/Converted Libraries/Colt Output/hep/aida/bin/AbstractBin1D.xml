<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractBin1D">
  <javadoc>
    <text>Abstract base class for all 1-dimensional bins consumes &lt;tt&gt;double&lt;/tt&gt; elements.
 * First see the &lt;a href="package-summary.html"&gt;package summary&lt;/a&gt; and javadoc &lt;a href="package-tree.html"&gt;tree view&lt;/a&gt; to get the broad picture.
 * &lt;p&gt;
 * This class is fully thread safe (all public methods are synchronized).
 * Thus, you can have one or more threads adding to the bin as well as one or more threads reading and viewing the statistics of the bin &lt;i&gt;while it is filled&lt;/i&gt;.
 * For high performance, add data in large chunks (buffers) via method &lt;tt&gt;addAllOf&lt;/tt&gt; rather than piecewise via method &lt;tt&gt;add&lt;/tt&gt;.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>0.9, 03-Jul-99</version>
  </javadoc>
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="AbstractBin1D" />
  <method name="add" type="void" />
  <javadoc>
    <text>Adds the specified element to the receiver.</text>
    <param>element element to be appended.</param>
  </javadoc>
  <javadoc>
    <text>Adds all values of the specified list to the receiver.</text>
    <param>list the list of which all values shall be added.</param>
  </javadoc>
  <method type="void" name="addAllOf" />
  <javadoc>
    <text>Adds the part of the specified list between indexes &lt;tt&gt;from&lt;/tt&gt; (inclusive) and &lt;tt&gt;to&lt;/tt&gt; (inclusive) to the receiver.
 * You may want to override this method for performance reasons.</text>
    <param>list the list of which elements shall be added.</param>
    <param>from the index of the first element to be added (inclusive).</param>
    <param>to the index of the last element to be added (inclusive).</param>
    <throws>IndexOutOfBoundsException if &lt;tt&gt;list.size()&amp;gt;0 &amp;&amp; (from&amp;lt;0 || from&amp;gt;to || to&amp;gt;=list.size())&lt;/tt&gt;.</throws>
  </javadoc>
  <method type="void" name="addAllOfFromTo" />
  <javadoc>
    <text>Constructs and returns a streaming buffer connected to the receiver.
 * Whenever the buffer is full it's contents are automatically flushed to &lt;tt&gt;this&lt;/tt&gt;. 
 * (Addding elements via a buffer to a bin is significantly faster than adding them directly.)</text>
    <param>capacity the number of elements the buffer shall be capable of holding before overflowing and flushing to the receiver.</param>
    <return>a streaming buffer having the receiver as target.</return>
  </javadoc>
  <method type="cern.colt.buffer.DoubleBuffer" name="buffered" />
  <javadoc>
    <text>Computes the deviations from the receiver's measures to another bin's measures.</text>
    <param>other the other bin to compare with</param>
    <return>a summary of the deviations.</return>
  </javadoc>
  <method type="String" name="compareWith">
    <declaration type="StringBuffer" name="buf" />
  </method>
  <javadoc>
    <text>Returns whether two bins are equal; 
 * They are equal if the other object is of the same class or a subclass of this class and both have the same size, minimum, maximum, sum and sumOfSquares.</text>
  </javadoc>
  <method type="boolean" name="equals">
    <declaration type="AbstractBin1D" name="other" />
  </method>
  <method name="max" type="double" />
  <javadoc>
    <text>Returns the maximum.</text>
  </javadoc>
  <javadoc>
    <text>Returns the arithmetic mean, which is &lt;tt&gt;Sum( x[i] ) / size()&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="mean" />
  <method name="min" type="double" />
  <javadoc>
    <text>Returns the minimum.</text>
  </javadoc>
  <javadoc>
    <text>Computes the relative error (in percent) from one measure to another.</text>
  </javadoc>
  <method type="double" name="relError" />
  <javadoc>
    <text>Returns the rms (Root Mean Square), which is &lt;tt&gt;Math.sqrt( Sum( x[i]*x[i] ) / size() )&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="rms" />
  <javadoc>
    <text>Returns the sample standard deviation, which is &lt;tt&gt;Math.sqrt(variance())&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="standardDeviation" />
  <javadoc>
    <text>Returns the sample standard error, which is &lt;tt&gt;Math.sqrt(variance() / size())&lt;/tt&gt;</text>
  </javadoc>
  <method type="double" name="standardError" />
  <method name="sum" type="double" />
  <javadoc>
    <text>Returns the sum of all elements, which is &lt;tt&gt;Sum( x[i] )&lt;/tt&gt;.</text>
  </javadoc>
  <method name="sumOfSquares" type="double" />
  <javadoc>
    <text>Returns the sum of squares, which is &lt;tt&gt;Sum( x[i] * x[i] )&lt;/tt&gt;.</text>
  </javadoc>
  <javadoc>
    <text>Returns a String representation of the receiver.</text>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuffer" name="buf" />
    <comment>buf.append("\nValue: "+value());
buf.append("\nError(0): "+error(0));</comment>
  </method>
  <javadoc>
    <text>Trims the capacity of the receiver to be the receiver's current size.
 * Releases any superfluos internal memory.
 * An application can use this operation to minimize the storage of the receiver.
 * This default implementation does nothing.</text>
  </javadoc>
  <method type="void" name="trimToSize" />
  <javadoc>
    <text>Returns the sample variance, which is &lt;tt&gt;Sum( (x[i]-mean())&lt;sup&gt;2&lt;/sup&gt; )  /  (size()-1)&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="variance" />
</class>
