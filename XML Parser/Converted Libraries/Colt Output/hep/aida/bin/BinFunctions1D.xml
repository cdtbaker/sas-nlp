<?xml version="1.0" encoding="UTF-8"?>
<class name="BinFunctions1D">
  <javadoc>
    <text>Function objects computing dynamic bin aggregations; to be passed to generic methods.</text>
    <see>cern.colt.matrix.doublealgo.Formatter</see>
    <see>cern.colt.matrix.doublealgo.Statistic</see>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>1.0, 09/24/99</version>
  </javadoc>
  <javadoc>
    <text>Little trick to allow for "aliasing", that is, renaming this class.
 * Using the aliasing you can instead write
 * &lt;p&gt;
 * &lt;tt&gt;BinFunctions F = BinFunctions.functions; &lt;br&gt;
 * someAlgo(F.max);&lt;/tt&gt;</text>
  </javadoc>
  <declaration type="BinFunctions1D" name="functions" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;bin.max()&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="apply" />
  <method type="String" name="name" />
  <declaration type="BinFunction1D" name="max" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;bin.mean()&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="apply" />
  <method type="String" name="name" />
  <declaration type="BinFunction1D" name="mean" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;bin.median()&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="apply" />
  <method type="String" name="name" />
  <declaration type="BinFunction1D" name="median" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;bin.min()&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="apply" />
  <method type="String" name="name" />
  <declaration type="BinFunction1D" name="min" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;bin.rms()&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="apply" />
  <method type="String" name="name" />
  <declaration type="BinFunction1D" name="rms" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;bin.size()&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="apply" />
  <method type="String" name="name" />
  <declaration type="BinFunction1D" name="size" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;bin.standardDeviation()&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="apply" />
  <method type="String" name="name" />
  <declaration type="BinFunction1D" name="stdDev" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;bin.sum()&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="apply" />
  <method type="String" name="name" />
  <declaration type="BinFunction1D" name="sum" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;bin.sumOfLogarithms()&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="apply" />
  <method type="String" name="name" />
  <declaration type="BinFunction1D" name="sumLog" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;bin.geometricMean()&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="apply" />
  <method type="String" name="name" />
  <declaration type="BinFunction1D" name="geometricMean" />
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="BinFunctions1D" />
  <javadoc>
    <text>Function that returns &lt;tt&gt;bin.quantile(percentage)&lt;/tt&gt;.</text>
    <param>the percentage of the quantile (&lt;tt&gt;0 &lt;= percentage &lt;= 1&lt;/tt&gt;).</param>
  </javadoc>
  <method type="BinFunction1D" name="quantile">
    <method type="double" name="apply" />
    <method type="String" name="name" />
  </method>
</class>
