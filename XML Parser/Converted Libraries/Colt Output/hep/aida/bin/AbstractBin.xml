<?xml version="1.0" encoding="UTF-8"?>
<class name="AbstractBin">
  <javadoc>
    <text>Abstract base class for all arbitrary-dimensional bins consumes &lt;tt&gt;double&lt;/tt&gt; elements.
 * First see the &lt;a href="package-summary.html"&gt;package summary&lt;/a&gt; and javadoc &lt;a href="package-tree.html"&gt;tree view&lt;/a&gt; to get the broad picture.
 * &lt;p&gt;
 * This class is fully thread safe (all public methods are synchronized).
 * Thus, you can have one or more threads adding to the bin as well as one or more threads reading and viewing the statistics of the bin &lt;i&gt;while it is filled&lt;/i&gt;.
 * For high performance, add data in large chunks (buffers) via method &lt;tt&gt;addAllOf&lt;/tt&gt; rather than piecewise via method &lt;tt&gt;add&lt;/tt&gt;.</text>
    <author>wolfgang.hoschek@cern.ch</author>
    <version>0.9, 03-Jul-99</version>
  </javadoc>
  <javadoc>
    <text>Makes this class non instantiable, but still let's others inherit from it.</text>
  </javadoc>
  <method type="constructor" name="AbstractBin" />
  <javadoc>
    <text>Returns &lt;tt&gt;center(0)&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="center" />
  <javadoc>
    <text>Returns a custom definable "center" measure; override this method if necessary.
 * Returns the absolute or relative center of this bin.
 * For example, the center of gravity.
 * The &lt;i&gt;real&lt;/i&gt; absolute center can be obtained as follow:
 * &lt;tt&gt;partition(i).min(j) * bin(j).offset() + bin(j).center(i)&lt;/tt&gt;,
 * where &lt;tt&gt;i&lt;/tt&gt; is the dimension.
 * and &lt;tt&gt;j&lt;/tt&gt; is the index of this bin.
 * &lt;p&gt;This default implementation always returns 0.5.</text>
    <param>dimension the dimension to be considered (zero based).</param>
  </javadoc>
  <method type="double" name="center" />
  <method name="clear" type="void" />
  <javadoc>
    <text>Removes all elements from the receiver.
 * The receiver will be empty after this call returns.</text>
  </javadoc>
  <javadoc>
    <text>Returns whether two objects are equal;
 * This default implementation returns true if the other object is a bin 
 * and has the same size, value, error and center.</text>
  </javadoc>
  <method type="boolean" name="equals">
    <declaration type="AbstractBin" name="other" />
  </method>
  <javadoc>
    <text>Returns &lt;tt&gt;error(0)&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="error" />
  <javadoc>
    <text>Returns a custom definable error measure; override this method if necessary.
 * This default implementation always returns &lt;tt&gt;0&lt;/tt&gt;.</text>
    <param>dimension the dimension to be considered.</param>
  </javadoc>
  <method type="double" name="error" />
  <method name="isRebinnable" type="boolean" />
  <javadoc>
    <text>Returns whether a client can obtain all elements added to the receiver.
 * In other words, tells whether the receiver internally preserves all added elements.
 * If the receiver is rebinnable, the elements can be obtained via &lt;tt&gt;elements()&lt;/tt&gt; methods.</text>
  </javadoc>
  <javadoc>
    <text>Returns &lt;tt&gt;offset(0)&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="offset" />
  <javadoc>
    <text>Returns the relative or absolute position for the center of the bin; override this method if necessary.
 * Returns 1.0 if a relative center is stored in the bin.
 * Returns 0.0 if an absolute center is stored in the bin.
 * &lt;p&gt;This default implementation always returns 1.0 (relative).</text>
    <param>dimension the index of the considered dimension (zero based);</param>
  </javadoc>
  <method type="double" name="offset" />
  <method name="size" type="int" />
  <javadoc>
    <text>Returns the number of elements contained.</text>
    <returns>the number of elements contained.</returns>
  </javadoc>
  <javadoc>
    <text>Returns a String representation of the receiver.</text>
  </javadoc>
  <method type="String" name="toString">
    <declaration type="StringBuffer" name="buf" />
    <comment>buf.append("\nValue: "+value());
buf.append("\nError: "+error());
buf.append("\nRMS: "+rms()+"\n");</comment>
  </method>
  <javadoc>
    <text>Trims the capacity of the receiver to be the receiver's current size.
 * Releases any superfluos internal memory.
 * An application can use this operation to minimize the storage of the receiver.
 * This default implementation does nothing.</text>
  </javadoc>
  <method type="void" name="trimToSize" />
  <javadoc>
    <text>Returns &lt;tt&gt;value(0)&lt;/tt&gt;.</text>
  </javadoc>
  <method type="double" name="value" />
  <javadoc>
    <text>Returns a custom definable "value" measure; override this method if necessary.
 * &lt;p&gt;This default implementation always returns 0.0.</text>
    <param>dimension the dimension to be considered.</param>
  </javadoc>
  <method type="double" name="value" />
</class>
