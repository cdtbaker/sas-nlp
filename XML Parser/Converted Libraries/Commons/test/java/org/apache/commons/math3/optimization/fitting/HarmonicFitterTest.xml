<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.fitting">
  <import name="java.util.Random" />
  <import name="org.apache.commons.math3.analysis.function.HarmonicOscillator" />
  <import name="org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.MathIllegalStateException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <import name="org.junit.Test" />
  <import name="org.junit.Assert" />
  <class name="HarmonicFitterTest" startLine="32">
    <method type="void" name="testPreconditions1" startLine="34" endLine="39">
      <declaration type="HarmonicFitter" name="fitter" />
    </method>
    <method type="void" name="testNoError" startLine="57" endLine="79">
      <declaration type="double" name="a" />
      <declaration type="double" name="w" />
      <declaration type="double" name="p" />
      <declaration type="HarmonicOscillator" name="f" />
      <declaration type="HarmonicFitter" name="fitter" />
      <scope startLine="65" endLine="67" />
      <declaration type="double[]" name="fitted" />
      <declaration type="HarmonicOscillator" name="ff" />
      <scope startLine="76" endLine="78" />
    </method>
    <method type="void" name="test1PercentError" startLine="82" endLine="100">
      <declaration type="Random" name="randomizer" />
      <declaration type="double" name="a" />
      <declaration type="double" name="w" />
      <declaration type="double" name="p" />
      <declaration type="HarmonicOscillator" name="f" />
      <declaration type="HarmonicFitter" name="fitter" />
      <scope startLine="91" endLine="94" />
      <declaration type="double[]" name="fitted" />
    </method>
    <method type="void" name="testTinyVariationsData" startLine="103" endLine="115">
      <declaration type="Random" name="randomizer" />
      <declaration type="HarmonicFitter" name="fitter" />
      <scope startLine="108" endLine="110" />
      <comment>This test serves to cover the part of the code of "guessAOmega"</comment>
      <comment>when the algorithm using integrals fails.</comment>
    </method>
    <method type="void" name="testInitialGuess" startLine="118" endLine="136">
      <declaration type="Random" name="randomizer" />
      <declaration type="double" name="a" />
      <declaration type="double" name="w" />
      <declaration type="double" name="p" />
      <declaration type="HarmonicOscillator" name="f" />
      <declaration type="HarmonicFitter" name="fitter" />
      <scope startLine="127" endLine="130" />
      <declaration type="double[][]" name="fitted" />
    </method>
    <method type="void" name="testUnsorted" startLine="139" endLine="179">
      <declaration type="Random" name="randomizer" />
      <declaration type="double" name="a" />
      <declaration type="double" name="w" />
      <declaration type="double" name="p" />
      <declaration type="HarmonicOscillator" name="f" />
      <declaration type="HarmonicFitter" name="fitter" />
      <declaration type="int" name="size" />
      <declaration type="double[]" name="xTab" />
      <declaration type="double[]" name="yTab" />
      <scope startLine="153" endLine="156" />
      <scope startLine="159" endLine="168">
        <declaration type="int" name="i1" />
        <declaration type="int" name="i2" />
        <declaration type="double" name="xTmp" />
        <declaration type="double" name="yTmp" />
      </scope>
      <scope startLine="171" endLine="173" />
      <declaration type="double[]" name="fitted" />
      <comment>build a regularly spaced array of measurements</comment>
      <comment>shake it</comment>
      <comment>pass it to the fitter</comment>
    </method>
    <method type="void" name="testMath844" startLine="182" endLine="201">
      <declaration type="double[]" name="y" />
      <declaration type="int" name="len" />
      <declaration type="WeightedObservedPoint[]" name="points" />
      <scope startLine="190" endLine="192" />
      <declaration type="HarmonicFitter.ParameterGuesser" name="guesser" />
      <comment>The guesser fails because the function is far from an harmonic</comment>
      <comment>function: It is a triangular periodic function with amplitude 3</comment>
      <comment>and period 12, and all sample points are taken at integer abscissae</comment>
      <comment>so function values all belong to the integer subset {-3, -2, -1, 0,</comment>
      <comment>1, 2, 3}.</comment>
    </method>
    <comment>This test fails (throwing "ConvergenceException" instead).</comment>
    <comment>@Test(expected=ZeroException.class)</comment>
    <comment>public void testPreconditions2() {</comment>
    <comment>HarmonicFitter fitter =</comment>
    <comment>new HarmonicFitter(new LevenbergMarquardtOptimizer());</comment>
    <comment>final double x = 1.2;</comment>
    <comment>fitter.addObservedPoint(1, x, 1);</comment>
    <comment>fitter.addObservedPoint(1, x, -1);</comment>
    <comment>fitter.addObservedPoint(1, x, 0.5);</comment>
    <comment>fitter.addObservedPoint(1, x, 0);</comment>
    <comment>final double[] fitted = fitter.fit();</comment>
    <comment>}</comment>
  </class>
</source>
