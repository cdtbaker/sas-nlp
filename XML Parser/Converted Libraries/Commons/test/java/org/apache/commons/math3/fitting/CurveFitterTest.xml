<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.fitting">
  <import name="org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer" />
  <import name="org.apache.commons.math3.analysis.ParametricUnivariateFunction" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="CurveFitterTest" startLine="25">
    <method type="void" name="testMath303" startLine="27" endLine="45">
      <declaration type="LevenbergMarquardtOptimizer" name="optimizer" />
      <declaration type="CurveFitter<ParametricUnivariateFunction>" name="fitter" />
      <declaration type="ParametricUnivariateFunction" name="sif" />
      <declaration type="double[]" name="initialguess1" />
      <declaration type="double[]" name="initialguess2" />
    </method>
    <method type="void" name="testMath304" startLine="48" endLine="65">
      <declaration type="LevenbergMarquardtOptimizer" name="optimizer" />
      <declaration type="CurveFitter<ParametricUnivariateFunction>" name="fitter" />
      <declaration type="ParametricUnivariateFunction" name="sif" />
      <declaration type="double[]" name="initialguess1" />
      <declaration type="double[]" name="initialguess2" />
    </method>
    <method type="void" name="testMath372" startLine="68" endLine="124">
      <declaration type="LevenbergMarquardtOptimizer" name="optimizer" />
      <declaration type="CurveFitter<ParametricUnivariateFunction>" name="curveFitter" />
      <declaration type="ParametricUnivariateFunction[]" name="f" />
      <method type="double" name="value" startLine="80" endLine="87">
        <declaration type="double" name="a" />
        <declaration type="double" name="b" />
        <declaration type="double" name="c" />
        <declaration type="double" name="d" />
      </method>
      <method type="double[]" name="gradient" startLine="89" endLine="113">
        <declaration type="double" name="a" />
        <declaration type="double" name="b" />
        <declaration type="double" name="c" />
        <declaration type="double" name="d" />
        <declaration type="double[]" name="gradients" />
        <declaration type="double" name="den" />
      </method>
      <declaration type="double[][]" name="initialGuess" />
      <declaration type="double[]" name="estimatedParameters" />
      <comment>derivative with respect to a</comment>
      <comment>derivative with respect to b</comment>
      <comment>in the reported (invalid) issue, there was a sign error here</comment>
      <comment>derivative with respect to c</comment>
      <comment>derivative with respect to d</comment>
    </method>
    <class name="SimpleInverseFunction" startLine="126">
      <implements name="ParametricUnivariateFunction" />
      <method type="double" name="value" startLine="128" endLine="130" />
      <method type="double[]" name="gradient" startLine="132" endLine="139">
        <declaration type="double[]" name="gradientVector" />
        <scope startLine="135" endLine="137" />
      </method>
    </class>
  </class>
</source>
