<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.regression">
  <import name="org.junit.Assert" />
  <import name="org.junit.Before" />
  <import name="org.junit.Test" />
  <import name="org.apache.commons.math3.TestUtils" />
  <import name="org.apache.commons.math3.linear.MatrixUtils" />
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <import name="org.apache.commons.math3.linear.RealVector" />
  <import name="org.apache.commons.math3.random.CorrelatedRandomVectorGenerator" />
  <import name="org.apache.commons.math3.random.JDKRandomGenerator" />
  <import name="org.apache.commons.math3.random.GaussianRandomGenerator" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.stat.correlation.Covariance" />
  <import name="org.apache.commons.math3.stat.descriptive.DescriptiveStatistics" />
  <class name="GLSMultipleLinearRegressionTest" extends="MultipleLinearRegressionAbstractTest" startLine="33">
    <declaration type="double[]" name="y" />
    <declaration type="double[][]" name="x" />
    <declaration type="double[][]" name="omega" />
    <declaration type="double[]" name="longley" />
    <method type="void" name="setUp" startLine="59" endLine="76" />
    <method type="void" name="cannotAddXSampleData" startLine="79" endLine="81" />
    <method type="void" name="cannotAddNullYSampleData" startLine="84" endLine="86" />
    <method type="void" name="cannotAddSampleDataWithSizeMismatch" startLine="89" endLine="94">
      <declaration type="double[][]" name="y" />
      <declaration type="double[][][]" name="x" />
    </method>
    <method type="void" name="cannotAddNullCovarianceData" startLine="97" endLine="99" />
    <method type="void" name="notEnoughData" startLine="102" endLine="110">
      <declaration type="double[]" name="reducedY" />
      <declaration type="double[][][]" name="reducedX" />
      <declaration type="double[][][]" name="reducedO" />
    </method>
    <method type="void" name="cannotAddCovarianceDataWithSampleSizeMismatch" startLine="113" endLine="121">
      <declaration type="double[][]" name="y" />
      <declaration type="double[][][]" name="x" />
      <declaration type="double[][][]" name="omega" />
    </method>
    <method type="void" name="cannotAddCovarianceDataThatIsNotSquare" startLine="124" endLine="134">
      <declaration type="double[][]" name="y" />
      <declaration type="double[][][]" name="x" />
      <declaration type="double[][][]" name="omega" />
    </method>
    <method type="GLSMultipleLinearRegression" name="createRegression" startLine="137" endLine="141">
      <declaration type="GLSMultipleLinearRegression" name="regression" />
    </method>
    <method type="int" name="getNumberOfRegressors" startLine="144" endLine="146" />
    <method type="int" name="getSampleSize" startLine="149" endLine="151" />
    <javadoc>
      <text>* test calculateYVariance</text>
    </javadoc>
    <method type="void" name="testYVariance" startLine="157" endLine="164">
      <declaration type="GLSMultipleLinearRegression" name="model" />
      <comment>assumes: y = new double[]{11.0, 12.0, 13.0, 14.0, 15.0, 16.0};</comment>
    </method>
    <javadoc>
      <text>* Verifies that setting X, Y and covariance separately has the same effect as newSample(X,Y,cov).</text>
    </javadoc>
    <method type="void" name="testNewSample2" startLine="170" endLine="189">
      <declaration type="double[][]" name="y" />
      <declaration type="double[][][]" name="x" />
      <declaration type="double[][]" name="covariance" />
      <declaration type="GLSMultipleLinearRegression" name="regression" />
      <declaration type="RealMatrix" name="combinedX" />
      <declaration type="RealVector" name="combinedY" />
      <declaration type="RealMatrix" name="combinedCovInv" />
    </method>
    <javadoc>
      <text>* Verifies that GLS with identity covariance matrix gives the same results
 * as OLS.</text>
    </javadoc>
    <method type="void" name="testGLSOLSConsistency" startLine="196" endLine="210">
      <declaration type="RealMatrix" name="identityCov" />
      <declaration type="GLSMultipleLinearRegression" name="glsModel" />
      <declaration type="OLSMultipleLinearRegression" name="olsModel" />
      <declaration type="double[]" name="olsBeta" />
      <declaration type="double[]" name="glsBeta" />
      <scope startLine="207" endLine="209" />
      <comment>TODO:  Should have assertRelativelyEquals(double[], double[], eps) in TestUtils</comment>
      <comment>Should also add RealVector and RealMatrix versions</comment>
    </method>
    <javadoc>
      <text>* Generate an error covariance matrix and sample data representing models
 * with this error structure. Then verify that GLS estimated coefficients,
 * on average, perform better than OLS.</text>
    </javadoc>
    <method type="void" name="testGLSEfficiency" startLine="218" endLine="295">
      <declaration type="RandomGenerator" name="rg" />
      <declaration type="int" name="nObs" />
      <declaration type="double[]" name="sigma" />
      <scope startLine="226" endLine="228" />
      <declaration type="int" name="numSeeds" />
      <declaration type="RealMatrix" name="errorSeeds" />
      <scope startLine="234" endLine="238">
        <scope startLine="235" endLine="237" />
      </scope>
      <declaration type="RealMatrix" name="cov" />
      <declaration type="GaussianRandomGenerator" name="rawGenerator" />
      <declaration type="double[]" name="errorMeans" />
      <declaration type="CorrelatedRandomVectorGenerator" name="gen" />
      <declaration type="OLSMultipleLinearRegression" name="ols" />
      <declaration type="RealVector" name="b" />
      <declaration type="RealMatrix" name="x" />
      <declaration type="GLSMultipleLinearRegression" name="gls" />
      <declaration type="DescriptiveStatistics" name="olsBetaStats" />
      <declaration type="DescriptiveStatistics" name="glsBetaStats" />
      <declaration type="int" name="nModels" />
      <scope startLine="270" endLine="290">
        <declaration type="RealVector" name="u" />
        <declaration type="double[]" name="y" />
        <declaration type="RealVector" name="olsBeta" />
        <declaration type="RealVector" name="glsBeta" />
        <declaration type="double" name="dist" />
        <comment>Generate y = xb + u with u cov</comment>
        <comment>Estimate OLS parameters</comment>
        <comment>Estimate GLS parameters</comment>
        <comment>Record deviations from "true" beta</comment>
      </scope>
      <comment>Seed has been selected to generate non-trivial covariance</comment>
      <comment>Assume model has 16 observations (will use Longley data).  Start by generating</comment>
      <comment>non-constant variances for the 16 error terms.</comment>
      <comment>Now generate 1000 error vectors to use to estimate the covariance matrix</comment>
      <comment>Columns are draws on N(0, sigma[col])</comment>
      <comment>Get covariance matrix for columns</comment>
      <comment>Create a CorrelatedRandomVectorGenerator to use to generate correlated errors</comment>
      <comment>Counting on init to 0 here</comment>
      <comment>Now start generating models.  Use Longley X matrix on LHS</comment>
      <comment>and Longley OLS beta vector as "true" beta.  Generate</comment>
      <comment>Y values by XB + u where u is a CorrelatedRandomVector generated</comment>
      <comment>from cov.</comment>
      <comment>Create a GLS model to reuse</comment>
      <comment>Create aggregators for stats measuring model performance</comment>
      <comment>Generate Y vectors for 10000 models, estimate GLS and OLS and</comment>
      <comment>Verify that OLS estimates are better</comment>
      <comment>Verify that GLS is on average more efficient, lower variance</comment>
    </method>
  </class>
</source>
