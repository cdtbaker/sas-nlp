<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.special">
  <import name="org.apache.commons.math3.TestUtils" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="GammaTest" startLine="26">
    <javadoc>
      <version>$Id: GammaTest.java 1414531 2012-11-28 05:39:39Z celestin $</version>
    </javadoc>
    <method type="void" name="testRegularizedGamma" startLine="30" endLine="35">
      <declaration type="double" name="actualP" />
      <declaration type="double" name="actualQ" />
    </method>
    <method type="void" name="testLogGamma" startLine="37" endLine="40">
      <declaration type="double" name="actual" />
    </method>
    <method type="void" name="testRegularizedGammaNanPositive" startLine="43" endLine="45" />
    <method type="void" name="testRegularizedGammaPositiveNan" startLine="48" endLine="50" />
    <method type="void" name="testRegularizedGammaNegativePositive" startLine="53" endLine="55" />
    <method type="void" name="testRegularizedGammaPositiveNegative" startLine="58" endLine="60" />
    <method type="void" name="testRegularizedGammaZeroPositive" startLine="63" endLine="65" />
    <method type="void" name="testRegularizedGammaPositiveZero" startLine="68" endLine="70" />
    <method type="void" name="testRegularizedGammaPositivePositive" startLine="73" endLine="75" />
    <method type="void" name="testLogGammaNan" startLine="78" endLine="80" />
    <method type="void" name="testLogGammaNegative" startLine="83" endLine="85" />
    <method type="void" name="testLogGammaZero" startLine="88" endLine="90" />
    <method type="void" name="testLogGammaPositive" startLine="93" endLine="95" />
    <method type="void" name="testDigammaLargeArgs" startLine="98" endLine="111">
      <declaration type="double" name="eps" />
    </method>
    <method type="void" name="testDigammaSmallArgs" startLine="114" endLine="126">
      <declaration type="double[]" name="expected" />
      <scope startLine="123" endLine="125" />
      <comment>values for negative powers of 10 from 1 to 30 as computed by webMathematica with 20 digits</comment>
      <comment>see functions.wolfram.com</comment>
    </method>
    <method type="void" name="testTrigamma" startLine="129" endLine="152">
      <declaration type="double" name="eps" />
      <declaration type="double[]" name="data" />
      <scope startLine="149" endLine="151" />
      <comment>computed using webMathematica.  For example, to compute trigamma($i) = Polygamma(1, $i), use</comment>
      <comment />
      <comment>http:functions.wolfram.com/webMathematica/Evaluated.jsp?name=PolyGamma2&plottype=0&vars={%221%22,%22$i%22}&digits=20</comment>
    </method>
    <javadoc>
      <text>* Reference data for the {@link Gamma#logGamma(double)} function. This data
 * was generated with the following <a
 * href="http://maxima.sourceforge.net/">Maxima</a> script.
 * <pre>
 * kill(all);
 * fpprec : 64;
 * gamln(x) := log(gamma(x));
 * x : append(makelist(bfloat(i / 8), i, 1, 80),
 * [0.8b0, 1b2, 1b3, 1b4, 1b5, 1b6, 1b7, 1b8, 1b9, 1b10]);
 * for i : 1 while i <= length(x) do
 * print("{", float(x[i]), ",", float(gamln(x[i])), "},");
 * </pre></text>
    </javadoc>
    <declaration type="double[][]" name="LOG_GAMMA_REF" />
    <method type="void" name="testLogGamma" startLine="307" endLine="322">
      <declaration type="int" name="ulps" />
      <scope startLine="309" endLine="321">
        <declaration type="double[]" name="data" />
        <declaration type="double" name="x" />
        <declaration type="double" name="expected" />
        <declaration type="double" name="actual" />
        <declaration type="double" name="tol" />
        <scope startLine="315" endLine="317" />
        <scope startLine="317" endLine="319" />
      </scope>
    </method>
    <method type="void" name="testLogGammaPrecondition1" startLine="325" endLine="327" />
    <method type="void" name="testLogGammaPrecondition2" startLine="330" endLine="332" />
    <javadoc>
      <text>* <p>
 * Reference values for the {@link Gamma#invGamma1pm1(double)} method.
 * These values were generated with the following <a
 * href="http://maxima.sourceforge.net/">Maxima</a> script
 * </p>
 * <pre>
 * kill(all);
 * fpprec : 64;
 * gam1(x) := 1 / gamma(1 + x) - 1;
 * x : makelist(bfloat(i / 8), i, -4, 12);
 * for i : 1 while i <= length(x) do print("{",
 * float(x[i]),
 * ",",
 * float(gam1(x[i])),
 * "},");
 * </pre></text>
    </javadoc>
    <declaration type="double[][]" name="INV_GAMMA1P_M1_REF" />
    <method type="void" name="testInvGamma1pm1" startLine="376" endLine="387">
      <declaration type="int" name="ulps" />
      <scope startLine="379" endLine="386">
        <declaration type="double[]" name="ref" />
        <declaration type="double" name="x" />
        <declaration type="double" name="expected" />
        <declaration type="double" name="actual" />
        <declaration type="double" name="tol" />
      </scope>
    </method>
    <method type="void" name="testInvGamma1pm1Precondition1" startLine="390" endLine="393" />
    <method type="void" name="testInvGamma1pm1Precondition2" startLine="396" endLine="399" />
    <declaration type="double[][]" name="LOG_GAMMA1P_REF" />
    <method type="void" name="testLogGamma1p" startLine="422" endLine="433">
      <declaration type="int" name="ulps" />
      <scope startLine="425" endLine="432">
        <declaration type="double[]" name="ref" />
        <declaration type="double" name="x" />
        <declaration type="double" name="expected" />
        <declaration type="double" name="actual" />
        <declaration type="double" name="tol" />
      </scope>
    </method>
    <method type="void" name="testLogGamma1pPrecondition1" startLine="436" endLine="439" />
    <method type="void" name="testLogGamma1pPrecondition2" startLine="442" endLine="445" />
    <javadoc>
      <text>* Reference data for the {@link Gamma#gamma(double)} function. This
 * data was generated with the following <a
 * href="http://maxima.sourceforge.net/">Maxima</a> script.
 * <pre>
 * kill(all);
 * fpprec : 64;
 * EPSILON : 10**(-fpprec + 1);
 * isInteger(x) := abs(x - floor(x)) <= EPSILON * abs(x);
 * x : makelist(bfloat(i / 8), i, -160, 160);
 * x : append(x, makelist(bfloat(i / 2), i, 41, 200));
 * for i : 1 while i <= length(x) do if not(isInteger(x[i])) then
 * print("{", float(x[i]), ",", float(gamma(x[i])), "},");
 * </pre></text>
    </javadoc>
    <declaration type="double[][]" name="GAMMA_REF" />
    <method type="void" name="testGamma" startLine="931" endLine="954">
      <scope startLine="933" endLine="953">
        <declaration type="double[]" name="ref" />
        <declaration type="double" name="x" />
        <declaration type="double" name="expected" />
        <declaration type="double" name="actual" />
        <declaration type="double" name="absX" />
        <declaration type="int" name="ulps" />
        <scope startLine="940" endLine="942" />
        <scope startLine="942" endLine="944" />
        <scope startLine="944" endLine="946" />
        <scope startLine="946" endLine="948" />
        <scope startLine="948" endLine="950" />
        <declaration type="double" name="tol" />
      </scope>
    </method>
    <method type="void" name="testGammaNegativeInteger" startLine="957" endLine="962">
      <scope startLine="959" endLine="961" />
    </method>
    <method type="void" name="checkRelativeError" startLine="965" endLine="968" />
  </class>
</source>
