<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3">
  <import name="java.util.Random" />
  <import name="java.util.concurrent.Callable" />
  <import name="org.apache.commons.math3.stat.descriptive.SummaryStatistics" />
  <import name="org.apache.commons.math3.stat.descriptive.StatisticalSummary" />
  <import name="org.apache.commons.math3.exception.MathIllegalStateException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <class name="PerfTestUtils" startLine="26">
    <javadoc>
      <text>* Simple benchmarking utilities.</text>
    </javadoc>
    <javadoc>
      <text>* Nanoseconds to milliseconds conversion factor ({@value}).</text>
    </javadoc>
    <declaration type="double" name="NANO_TO_MILLI" />
    <javadoc>
      <text>* Default number of code repeat per timed block.</text>
    </javadoc>
    <declaration type="int" name="DEFAULT_REPEAT_CHUNK" />
    <javadoc>
      <text>* Default number of code repeats for computing the average run time.</text>
    </javadoc>
    <declaration type="int" name="DEFAULT_REPEAT_STAT" />
    <javadoc>
      <text>* RNG.</text>
    </javadoc>
    <declaration type="Random" name="rng" />
    <javadoc>
      <text>* Timing.</text>
      <param>repeatChunk Each timing measurement will done done for that
 * number of repeats of the code.</param>
      <param>repeatStat Timing will be averaged over that number of runs.</param>
      <param>runGC Call {@code System.gc()} between each timed block. When
 * set to {@code true}, the test will run much slower.</param>
      <param>methods Codes being timed.</param>
      <return>for each of the given {@code methods}, a{@link StatisticalSummary} of the average times (in milliseconds)
 * taken by a single call to the {@code call} method (i.e. the time
 * taken by each timed block divided by {@code repeatChunk}).</return>
    </javadoc>
    <method type="StatisticalSummary[]" name="time" startLine="56" endLine="73">
      <declaration type="double[][][]" name="times" />
      <declaration type="int" name="len" />
      <declaration type="StatisticalSummary[]" name="stats" />
      <scope startLine="64" endLine="70">
        <declaration type="SummaryStatistics" name="s" />
        <scope startLine="66" endLine="68" />
      </scope>
    </method>
    <javadoc>
      <text>* Timing.</text>
      <param>repeatChunk Each timing measurement will done done for that
 * number of repeats of the code.</param>
      <param>repeatStat Timing will be averaged over that number of runs.</param>
      <param>runGC Call {@code System.gc()} between each timed block. When
 * set to {@code true}, the test will run much slower.</param>
      <param>methods Codes being timed.</param>
      <return>for each of the given {@code methods} (first dimension), and
 * each of the {@code repeatStat} runs (second dimension):
 * <ul>
 * <li>
 * the average time (in milliseconds) taken by a single call to the{@code call} method (i.e. the time taken by each timed block divided
 * by {@code repeatChunk})
 * </li>
 * <li>
 * the result returned by the {@code call} method.
 * </li>
 * </ul></return>
    </javadoc>
    <method type="double[][][]" name="timesAndResults" startLine="100" endLine="141">
      <declaration type="int" name="numMethods" />
      <declaration type="double[][][]" name="timesAndResults" />
      <scope startLine="104" endLine="128">
        <scope startLine="105" endLine="127">
          <scope startLine="106" endLine="126">
            <scope startLine="107" endLine="110" />
            <declaration type="Callable<Double>" name="r" />
            <declaration type="double[]" name="result" />
            <declaration type="long" name="start" />
            <scope startLine="117" endLine="119" />
            <declaration type="long" name="stop" />
          </scope>
        </scope>
        <comment>Try to perform GC outside the timed block.</comment>
        <comment>Timed block.</comment>
        <comment>Collect run time.</comment>
        <comment>Keep track of a randomly selected result.</comment>
      </scope>
      <scope startLine="128" endLine="131">
        <comment>Abort benchmarking if codes throw exceptions.</comment>
      </scope>
      <declaration type="double" name="normFactor" />
      <scope startLine="134" endLine="138">
        <scope startLine="135" endLine="137" />
      </scope>
    </method>
    <javadoc>
      <text>* Timing and report (to standard output) the average time and standard
 * deviation of a single call.
 * The timing is performed by calling the{@link #time(int,int,boolean,Callable[]) time} method.</text>
      <param>title Title of the test (for the report).</param>
      <param>repeatChunk Each timing measurement will done done for that
 * number of repeats of the code.</param>
      <param>repeatStat Timing will be averaged over that number of runs.</param>
      <param>runGC Call {@code System.gc()} between each timed block. When
 * set to {@code true}, the test will run much slower.</param>
      <param>methods Codes being timed.</param>
      <return>for each of the given {@code methods}, a statistics of the
 * average times (in milliseconds) taken by a single call to the{@code call} method (i.e. the time taken by each timed block divided
 * by {@code repeatChunk}).</return>
    </javadoc>
    <method type="StatisticalSummary[]" name="timeAndReport" startLine="165" endLine="213">
      <declaration type="String" name="hFormat" />
      <declaration type="int" name="nameLength" />
      <scope startLine="171" endLine="176">
        <declaration type="int" name="len" />
        <scope startLine="173" endLine="175" />
      </scope>
      <declaration type="String" name="nameLengthFormat" />
      <declaration type="String" name="cFormat" />
      <declaration type="String" name="format" />
      <declaration type="StatisticalSummary[]" name="time" />
      <declaration type="double" name="refSum" />
      <scope startLine="200" endLine="210">
        <declaration type="StatisticalSummary" name="s" />
        <declaration type="double" name="sum" />
      </scope>
      <comment>Header format.</comment>
      <comment>Width of the longest name.</comment>
      <comment>Column format.</comment>
      <comment>Result format.</comment>
    </method>
    <javadoc>
      <text>* Timing and report (to standard output).
 * This method calls {@link #timeAndReport(String,int,int,boolean,RunTest[])timeAndReport(title, 1000, 10000, false, methods)}.</text>
      <param>title Title of the test (for the report).</param>
      <param>methods Codes being timed.</param>
      <return>for each of the given {@code methods}, a statistics of the
 * average times (in milliseconds) taken by a single call to the{@code call} method (i.e. the time taken by each timed block divided
 * by {@code repeatChunk}).</return>
    </javadoc>
    <method type="StatisticalSummary[]" name="timeAndReport" startLine="228" endLine="234" />
    <class name="RunTest" startLine="236">
      <implements name="Callable<Double>" />
      <javadoc>
        <text>* Utility class for storing a test label.</text>
      </javadoc>
      <declaration type="String" name="name" />
      <javadoc>
        <param>name Test name.</param>
      </javadoc>
      <method type="constructor" name="RunTest" startLine="245" endLine="247" />
      <javadoc>
        <return>the name of this test.</return>
      </javadoc>
      <method type="String" name="getName" startLine="252" endLine="254" />
      <method name="call" type="Double" startLine="256" endLine="257" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
    </class>
  </class>
</source>
