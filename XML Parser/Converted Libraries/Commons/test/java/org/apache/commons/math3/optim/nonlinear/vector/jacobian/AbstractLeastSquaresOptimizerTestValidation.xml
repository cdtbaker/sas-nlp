<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.nonlinear.vector.jacobian">
  <import name="java.util.Arrays" />
  <import name="java.util.List" />
  <import name="java.util.ArrayList" />
  <import name="java.awt.geom.Point2D" />
  <import name="org.apache.commons.math3.optim.PointVectorValuePair" />
  <import name="org.apache.commons.math3.optim.InitialGuess" />
  <import name="org.apache.commons.math3.optim.MaxEval" />
  <import name="org.apache.commons.math3.optim.nonlinear.vector.Target" />
  <import name="org.apache.commons.math3.optim.nonlinear.vector.Weight" />
  <import name="org.apache.commons.math3.stat.descriptive.SummaryStatistics" />
  <import name="org.apache.commons.math3.stat.descriptive.StatisticalSummary" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Test" />
  <import name="org.junit.Assert" />
  <class name="AbstractLeastSquaresOptimizerTestValidation" startLine="31">
    <javadoc>
      <text>* This class demonstrates the main functionality of the{@link AbstractLeastSquaresOptimizer}, common to the
 * optimizer implementations in package{@link org.apache.commons.math3.optimization.general}.
 * <br/>
 * Not enabled by default, as the class name does not end with "Test".
 * <br/>
 * Invoke by running
 * <pre><code>
 * mvn test -Dtest=AbstractLeastSquaresOptimizerTestValidation
 * </code></pre>
 * or by running
 * <pre><code>
 * mvn test -Dtest=AbstractLeastSquaresOptimizerTestValidation -DargLine="-DmcRuns=1234 -server"
 * </code></pre></text>
    </javadoc>
    <declaration type="int" name="MONTE_CARLO_RUNS" />
    <javadoc>
      <text>* Using a Monte-Carlo procedure, this test checks the error estimations
 * as provided by the square-root of the diagonal elements of the
 * covariance matrix.
 * <br/>
 * The test generates sets of observations, each sampled from
 * a Gaussian distribution.
 * <br/>
 * The optimization problem solved is defined in class{@link StraightLineProblem}.
 * <br/>
 * The output (on stdout) will be a table summarizing the distribution
 * of parameters generated by the Monte-Carlo process and by the direct
 * estimation provided by the diagonal elements of the covariance matrix.</text>
    </javadoc>
    <method type="void" name="testParametersErrorMonteCarloObservations" startLine="68" endLine="167">
      <declaration type="double" name="yError" />
      <declaration type="double" name="slope" />
      <declaration type="double" name="offset" />
      <declaration type="RandomStraightLinePointGenerator" name="lineGenerator" />
      <declaration type="int" name="numObs" />
      <declaration type="int" name="numParams" />
      <declaration type="SummaryStatistics[]" name="paramsFoundByDirectSolution" />
      <declaration type="SummaryStatistics[]" name="sigmaEstimate" />
      <scope startLine="95" endLine="98" />
      <declaration type="AbstractLeastSquaresOptimizer" name="optim" />
      <declaration type="double[]" name="init" />
      <declaration type="int" name="mcRepeat" />
      <declaration type="int" name="mcCount" />
      <scope startLine="107" endLine="139">
        <declaration type="Point2D.Double[]" name="obs" />
        <declaration type="StraightLineProblem" name="problem" />
        <scope startLine="112" endLine="115">
          <declaration type="Point2D.Double" name="p" />
        </scope>
        <declaration type="double[]" name="regress" />
        <declaration type="PointVectorValuePair" name="optimum" />
        <declaration type="double[]" name="sigma" />
        <scope startLine="132" endLine="135" />
        <comment>Observations.</comment>
        <comment>Direct solution (using simple regression).</comment>
        <comment>Estimation of the standard deviation (diagonal elements of the</comment>
        <comment>covariance matrix).</comment>
        <comment>Accumulate statistics.</comment>
        <comment>Next Monte-Carlo.</comment>
      </scope>
      <declaration type="String" name="line" />
      <scope startLine="144" endLine="158">
        <declaration type="StatisticalSummary" name="s" />
      </scope>
      <scope startLine="162" endLine="166" />
      <comment>Error on the observations.</comment>
      <comment>True values of the parameters.</comment>
      <comment>Samples generator.</comment>
      <comment>Number of observations.</comment>
      <comment>XXX Should be a command-line option.</comment>
      <comment>number of parameters.</comment>
      <comment>Parameters found for each of Monte-Carlo run.</comment>
      <comment>Sigma estimations (square-root of the diagonal elements of the</comment>
      <comment>covariance matrix), for each Monte-Carlo run.</comment>
      <comment>Initialize statistics accumulators.</comment>
      <comment>Dummy optimizer (to compute the covariance matrix).</comment>
      <comment>Monte-Carlo (generates many sets of observations).</comment>
      <comment>Print statistics.</comment>
      <comment>Check the error estimation.</comment>
    </method>
    <javadoc>
      <text>* In this test, the set of observations is fixed.
 * Using a Monte-Carlo procedure, it generates sets of parameters,
 * and determine the parameter change that will result in the
 * normalized chi-square becoming larger by one than the value from
 * the best fit solution.
 * <br/>
 * The optimization problem solved is defined in class{@link StraightLineProblem}.
 * <br/>
 * The output (on stdout) will be a list of lines containing:
 * <ul>
 * <li>slope of the straight line,</li>
 * <li>intercept of the straight line,</li>
 * <li>chi-square of the solution defined by the above two values.</li>
 * </ul>
 * The output is separated into two blocks (with a blank line between
 * them); the first block will contain all parameter sets for which{@code chi2 < chi2_b + 1}and the second block, all sets for which{@code chi2 >= chi2_b + 1}where {@code chi2_b} is the lowest chi-square (corresponding to the
 * best solution).</text>
    </javadoc>
    <method type="void" name="testParametersErrorMonteCarloParameters" startLine="194" endLine="293">
      <declaration type="double" name="yError" />
      <declaration type="double" name="slope" />
      <declaration type="double" name="offset" />
      <declaration type="RandomStraightLinePointGenerator" name="lineGenerator" />
      <declaration type="int" name="numObs" />
      <declaration type="int" name="numParams" />
      <declaration type="Point2D.Double[]" name="obs" />
      <declaration type="StraightLineProblem" name="problem" />
      <scope startLine="218" endLine="221">
        <declaration type="Point2D.Double" name="p" />
      </scope>
      <declaration type="double[]" name="regress" />
      <declaration type="AbstractLeastSquaresOptimizer" name="optim" />
      <declaration type="double[]" name="init" />
      <declaration type="double" name="bestChi2N" />
      <declaration type="double[]" name="sigma" />
      <declaration type="int" name="mcRepeat" />
      <declaration type="int" name="gridSize" />
      <declaration type="List<double[]>[]" name="paramsAndChi2" />
      <declaration type="double" name="slopeRange" />
      <declaration type="double" name="offsetRange" />
      <declaration type="double" name="minSlope" />
      <declaration type="double" name="minOffset" />
      <declaration type="double" name="deltaSlope" />
      <declaration type="double" name="deltaOffset" />
      <scope startLine="250" endLine="258">
        <declaration type="double" name="s" />
        <scope startLine="252" endLine="257">
          <declaration type="double" name="o" />
          <declaration type="double[]" name="chi2N" />
        </scope>
      </scope>
      <declaration type="double" name="chi2NPlusOne" />
      <declaration type="int" name="numLarger" />
      <declaration type="String" name="lineFmt" />
      <scope startLine="275" endLine="279">
        <scope startLine="276" endLine="278" />
      </scope>
      <scope startLine="283" endLine="288">
        <scope startLine="284" endLine="287" />
      </scope>
      <comment>Error on the observations.</comment>
      <comment>True values of the parameters.</comment>
      <comment>Samples generator.</comment>
      <comment>Number of observations.</comment>
      <comment>number of parameters.</comment>
      <comment>Create a single set of observations.</comment>
      <comment>Direct solution (using simple regression).</comment>
      <comment>Dummy optimizer (to compute the chi-square).</comment>
      <comment>Get chi-square of the best parameters set for the given set of</comment>
      <comment>observations.</comment>
      <comment>Monte-Carlo (generates a grid of parameters).</comment>
      <comment>Parameters found for each of Monte-Carlo run.</comment>
      <comment>Index 0 = slope</comment>
      <comment>Index 1 = offset</comment>
      <comment>Index 2 = normalized chi2</comment>
      <comment>Output (for use with "gnuplot").</comment>
      <comment>Some info.</comment>
      <comment>For plotting separately sets of parameters that have a large chi2.</comment>
      <comment>Point with smallest chi-square.</comment>
      <comment>Empty line.</comment>
      <comment>Points within the confidence interval.</comment>
      <comment>Empty line.</comment>
      <comment>Points outside the confidence interval.</comment>
      <comment>Empty line.</comment>
    </method>
    <javadoc>
      <return>the normalized chi-square.</return>
    </javadoc>
    <method type="double" name="getChi2N" startLine="300" endLine="312">
      <declaration type="double[]" name="t" />
      <declaration type="double[]" name="w" />
    </method>
    <class name="DummyOptimizer" extends="AbstractLeastSquaresOptimizer" startLine="315">
      <javadoc>
        <text>* A dummy optimizer.
 * Used for computing the covariance matrix.</text>
      </javadoc>
      <method type="constructor" name="DummyOptimizer" startLine="320" endLine="322" />
      <javadoc>
        <text>* This method does nothing and returns a dummy value.</text>
      </javadoc>
      <method type="PointVectorValuePair" name="doOptimize" startLine="328" endLine="333">
        <declaration type="double[]" name="params" />
        <declaration type="double[]" name="res" />
      </method>
    </class>
  </class>
</source>
