<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.util">
  <import name="java.math.BigDecimal" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.TestUtils" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="PrecisionTest" startLine="24">
    <javadoc>
      <text>* Test cases for the {@link Precision} class.</text>
      <version>$Id$</version>
    </javadoc>
    <method type="void" name="testEqualsWithRelativeTolerance" startLine="31" endLine="55">
      <declaration type="double" name="eps" />
    </method>
    <method type="void" name="testEqualsIncludingNaN" startLine="58" endLine="76">
      <declaration type="double[]" name="testArray" />
      <scope startLine="65" endLine="75">
        <scope startLine="66" endLine="74">
          <scope startLine="67" endLine="70" />
          <scope startLine="70" endLine="73" />
        </scope>
      </scope>
    </method>
    <method type="void" name="testEqualsWithAllowedDelta" startLine="79" endLine="89" />
    <method type="void" name="testMath475" startLine="92" endLine="108">
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
      <declaration type="double" name="diff" />
      <declaration type="double" name="c" />
      <comment>Because they are adjacent floating point numbers, "a" and "b" are</comment>
      <comment>considered equal even though the allowed error is smaller than</comment>
      <comment>their difference.</comment>
      <comment>Because "a" and "c" are not adjacent, the tolerance is taken into</comment>
      <comment>account for assessing equality.</comment>
    </method>
    <method type="void" name="testEqualsIncludingNaNWithAllowedDelta" startLine="111" endLine="121" />
    <method type="void" name="testFloatEqualsWithAllowedUlps" startLine="125" endLine="159">
      <declaration type="float" name="oneFloat" />
      <comment>These tests need adjusting for floating point precision</comment>
      <comment>Assert.assertTrue(Precision.equals(153.0f, 153.00000000000003f, 1));</comment>
      <comment>Assert.assertFalse(Precision.equals(153.0f, 153.00000000000006f, 1));</comment>
      <comment>Assert.assertTrue(Precision.equals(153.0f, 152.99999999999997f, 1));</comment>
      <comment>Assert.assertFalse(Precision.equals(153f, 152.99999999999994f, 1));</comment>
      <comment />
      <comment>Assert.assertTrue(Precision.equals(-128.0f, -127.99999999999999f, 1));</comment>
      <comment>Assert.assertFalse(Precision.equals(-128.0f, -127.99999999999997f, 1));</comment>
      <comment>Assert.assertTrue(Precision.equals(-128.0f, -128.00000000000003f, 1));</comment>
      <comment>Assert.assertFalse(Precision.equals(-128.0f, -128.00000000000006f, 1));</comment>
    </method>
    <method type="void" name="testEqualsWithAllowedUlps" startLine="162" endLine="202">
      <declaration type="double" name="nUp1" />
      <declaration type="double" name="nnUp1" />
    </method>
    <method type="void" name="testEqualsIncludingNaNWithAllowedUlps" startLine="205" endLine="241">
      <declaration type="double" name="nUp1" />
      <declaration type="double" name="nnUp1" />
    </method>
    <method type="void" name="testCompareToEpsilon" startLine="244" endLine="250" />
    <method type="void" name="testCompareToMaxUlps" startLine="253" endLine="287">
      <declaration type="double" name="a" />
      <declaration type="double" name="delta" />
      <scope startLine="256" endLine="264">
        <scope startLine="257" endLine="260" />
        <scope startLine="260" endLine="263" />
      </scope>
    </method>
    <method type="void" name="testRoundDouble" startLine="290" endLine="396">
      <declaration type="double" name="x" />
      <declaration type="double" name="xx" />
      <scope startLine="367" endLine="370" />
      <scope startLine="370" endLine="372">
        <comment>expected</comment>
      </scope>
      <scope startLine="381" endLine="384" />
      <scope startLine="384" endLine="386">
        <comment>expected</comment>
      </scope>
      <comment>JIRA MATH-151</comment>
      <comment>BZ 35904</comment>
      <comment>MATH-151</comment>
      <comment>special values</comment>
    </method>
    <method type="void" name="testRoundFloat" startLine="399" endLine="493">
      <declaration type="float" name="x" />
      <scope startLine="467" endLine="470" />
      <scope startLine="470" endLine="472">
        <comment>success</comment>
      </scope>
      <scope startLine="481" endLine="484" />
      <scope startLine="484" endLine="486">
        <comment>success</comment>
      </scope>
      <comment>BZ 35904</comment>
      <comment>special values</comment>
    </method>
    <method type="void" name="testIssue721" startLine="497" endLine="500" />
    <method type="void" name="testRepresentableDelta" startLine="504" endLine="517">
      <declaration type="int" name="nonRepresentableCount" />
      <declaration type="double" name="x" />
      <declaration type="int" name="numTrials" />
      <scope startLine="508" endLine="514">
        <declaration type="double" name="originalDelta" />
        <declaration type="double" name="delta" />
        <scope startLine="511" endLine="513" />
      </scope>
    </method>
    <method type="void" name="testMath843" startLine="520" endLine="529">
      <declaration type="double" name="afterEpsilon" />
      <comment>a) 1 + EPSILON is equal to 1.</comment>
      <comment>b) 1 + "the number after EPSILON" is not equal to 1.</comment>
    </method>
    <comment>Tests for floating point equality</comment>
  </class>
</source>
