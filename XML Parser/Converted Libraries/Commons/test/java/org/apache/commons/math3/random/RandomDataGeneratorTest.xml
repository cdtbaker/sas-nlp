<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.random">
  <import name="java.text.DecimalFormat" />
  <import name="java.util.ArrayList" />
  <import name="java.util.HashSet" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.Retry" />
  <import name="org.apache.commons.math3.RetryRunner" />
  <import name="org.apache.commons.math3.TestUtils" />
  <import name="org.apache.commons.math3.distribution.BetaDistribution" />
  <import name="org.apache.commons.math3.distribution.BinomialDistribution" />
  <import name="org.apache.commons.math3.distribution.BinomialDistributionTest" />
  <import name="org.apache.commons.math3.distribution.CauchyDistribution" />
  <import name="org.apache.commons.math3.distribution.ChiSquaredDistribution" />
  <import name="org.apache.commons.math3.distribution.ExponentialDistribution" />
  <import name="org.apache.commons.math3.distribution.FDistribution" />
  <import name="org.apache.commons.math3.distribution.GammaDistribution" />
  <import name="org.apache.commons.math3.distribution.HypergeometricDistribution" />
  <import name="org.apache.commons.math3.distribution.HypergeometricDistributionTest" />
  <import name="org.apache.commons.math3.distribution.NormalDistribution" />
  <import name="org.apache.commons.math3.distribution.PascalDistribution" />
  <import name="org.apache.commons.math3.distribution.PascalDistributionTest" />
  <import name="org.apache.commons.math3.distribution.PoissonDistribution" />
  <import name="org.apache.commons.math3.distribution.TDistribution" />
  <import name="org.apache.commons.math3.distribution.WeibullDistribution" />
  <import name="org.apache.commons.math3.distribution.ZipfDistribution" />
  <import name="org.apache.commons.math3.distribution.ZipfDistributionTest" />
  <import name="org.apache.commons.math3.stat.Frequency" />
  <import name="org.apache.commons.math3.stat.descriptive.SummaryStatistics" />
  <import name="org.apache.commons.math3.stat.inference.ChiSquareTest" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <import name="org.junit.runner.RunWith" />
  <class name="RandomDataGeneratorTest" startLine="54">
    <javadoc>
      <text>* Test cases for the RandomDataGenerator class.</text>
      <version>$Id: RandomDataGeneratorTest.java 1457491 2013-03-17 17:15:31Z psteitz $</version>
    </javadoc>
    <method type="constructor" name="RandomDataGeneratorTest" startLine="62" endLine="65" />
    <declaration type="long" name="smallSampleSize" />
    <declaration type="double[]" name="expected" />
    <declaration type="int" name="largeSampleSize" />
    <declaration type="String[]" name="hex" />
    <declaration type="RandomDataGenerator" name="randomData" />
    <declaration type="ChiSquareTest" name="testStatistic" />
    <method type="void" name="testNextIntExtremeValues" startLine="76" endLine="80">
      <declaration type="int" name="x" />
      <declaration type="int" name="y" />
    </method>
    <method type="void" name="testNextLongExtremeValues" startLine="83" endLine="87">
      <declaration type="long" name="x" />
      <declaration type="long" name="y" />
    </method>
    <method type="void" name="testNextUniformExtremeValues" startLine="90" endLine="98">
      <declaration type="double" name="x" />
      <declaration type="double" name="y" />
    </method>
    <method type="void" name="testNextIntIAE" startLine="101" endLine="108">
      <scope startLine="102" endLine="105" />
      <scope startLine="105" endLine="107">
        <comment>ignored</comment>
      </scope>
    </method>
    <method type="void" name="testNextIntNegativeToPositiveRange" startLine="111" endLine="116">
      <scope startLine="112" endLine="115" />
    </method>
    <method type="void" name="testNextIntNegativeRange" startLine="119" endLine="125">
      <scope startLine="120" endLine="124" />
    </method>
    <method type="void" name="testNextIntPositiveRange" startLine="128" endLine="135">
      <scope startLine="129" endLine="134" />
    </method>
    <method type="void" name="checkNextIntUniform" startLine="137" endLine="155">
      <declaration type="Frequency" name="freq" />
      <scope startLine="139" endLine="143">
        <declaration type="int" name="value" />
      </scope>
      <declaration type="int" name="len" />
      <declaration type="long[]" name="observed" />
      <scope startLine="146" endLine="148" />
      <declaration type="double[]" name="expected" />
      <scope startLine="150" endLine="152" />
    </method>
    <method type="void" name="testNextIntWideRange" startLine="158" endLine="173">
      <declaration type="int" name="lower" />
      <declaration type="int" name="upper" />
      <declaration type="int" name="max" />
      <declaration type="int" name="min" />
      <scope startLine="163" endLine="169">
        <declaration type="int" name="r" />
      </scope>
      <declaration type="double" name="ratio" />
    </method>
    <method type="void" name="testNextLongIAE" startLine="176" endLine="183">
      <scope startLine="177" endLine="180" />
      <scope startLine="180" endLine="182">
        <comment>ignored</comment>
      </scope>
    </method>
    <method type="void" name="testNextLongNegativeToPositiveRange" startLine="186" endLine="191">
      <scope startLine="187" endLine="190" />
    </method>
    <method type="void" name="testNextLongNegativeRange" startLine="194" endLine="200">
      <scope startLine="195" endLine="199" />
    </method>
    <method type="void" name="testNextLongPositiveRange" startLine="203" endLine="209">
      <scope startLine="204" endLine="208" />
    </method>
    <method type="void" name="checkNextLongUniform" startLine="211" endLine="230">
      <declaration type="Frequency" name="freq" />
      <scope startLine="213" endLine="218">
        <declaration type="long" name="value" />
      </scope>
      <declaration type="int" name="len" />
      <declaration type="long[]" name="observed" />
      <scope startLine="221" endLine="223" />
      <declaration type="double[]" name="expected" />
      <scope startLine="225" endLine="227" />
    </method>
    <method type="void" name="testNextLongWideRange" startLine="233" endLine="248">
      <declaration type="long" name="lower" />
      <declaration type="long" name="upper" />
      <declaration type="long" name="max" />
      <declaration type="long" name="min" />
      <scope startLine="238" endLine="244">
        <declaration type="long" name="r" />
      </scope>
      <declaration type="double" name="ratio" />
    </method>
    <method type="void" name="testNextSecureLongIAE" startLine="251" endLine="258">
      <scope startLine="252" endLine="255" />
      <scope startLine="255" endLine="257">
        <comment>ignored</comment>
      </scope>
    </method>
    <method type="void" name="testNextSecureLongNegativeToPositiveRange" startLine="262" endLine="267">
      <scope startLine="263" endLine="266" />
    </method>
    <method type="void" name="testNextSecureLongNegativeRange" startLine="271" endLine="276">
      <scope startLine="272" endLine="275" />
    </method>
    <method type="void" name="testNextSecureLongPositiveRange" startLine="280" endLine="285">
      <scope startLine="281" endLine="284" />
    </method>
    <method type="void" name="checkNextSecureLongUniform" startLine="287" endLine="305">
      <declaration type="Frequency" name="freq" />
      <scope startLine="289" endLine="293">
        <declaration type="long" name="value" />
      </scope>
      <declaration type="int" name="len" />
      <declaration type="long[]" name="observed" />
      <scope startLine="296" endLine="298" />
      <declaration type="double[]" name="expected" />
      <scope startLine="300" endLine="302" />
    </method>
    <method type="void" name="testNextSecureIntIAE" startLine="308" endLine="315">
      <scope startLine="309" endLine="312" />
      <scope startLine="312" endLine="314">
        <comment>ignored</comment>
      </scope>
    </method>
    <method type="void" name="testNextSecureIntNegativeToPositiveRange" startLine="319" endLine="324">
      <scope startLine="320" endLine="323" />
    </method>
    <method type="void" name="testNextSecureIntNegativeRange" startLine="328" endLine="333">
      <scope startLine="329" endLine="332" />
    </method>
    <method type="void" name="testNextSecureIntPositiveRange" startLine="337" endLine="342">
      <scope startLine="338" endLine="341" />
    </method>
    <method type="void" name="checkNextSecureIntUniform" startLine="344" endLine="362">
      <declaration type="Frequency" name="freq" />
      <scope startLine="346" endLine="350">
        <declaration type="int" name="value" />
      </scope>
      <declaration type="int" name="len" />
      <declaration type="long[]" name="observed" />
      <scope startLine="353" endLine="355" />
      <declaration type="double[]" name="expected" />
      <scope startLine="357" endLine="359" />
    </method>
    <javadoc>
      <text>* Make sure that empirical distribution of random Poisson(4)'s has P(X <=
 * 5) close to actual cumulative Poisson probability and that nextPoisson
 * fails when mean is non-positive.</text>
    </javadoc>
    <method type="void" name="testNextPoisson" startLine="372" endLine="410">
      <scope startLine="373" endLine="376" />
      <scope startLine="376" endLine="378">
        <comment>ignored</comment>
      </scope>
      <scope startLine="379" endLine="382" />
      <scope startLine="382" endLine="384">
        <comment>ignored</comment>
      </scope>
      <scope startLine="385" endLine="388" />
      <scope startLine="388" endLine="390">
        <comment>ignored</comment>
      </scope>
      <declaration type="double" name="mean" />
      <declaration type="int" name="len" />
      <declaration type="PoissonDistribution" name="poissonDistribution" />
      <declaration type="Frequency" name="f" />
      <scope startLine="397" endLine="399" />
      <declaration type="long[]" name="observed" />
      <scope startLine="401" endLine="403" />
      <declaration type="double[]" name="expected" />
      <scope startLine="405" endLine="407" />
    </method>
    <method type="void" name="testNextPoissonConsistency" startLine="413" endLine="428">
      <scope startLine="416" endLine="418" />
      <scope startLine="420" endLine="422" />
      <scope startLine="425" endLine="427" />
      <comment>Small integral means</comment>
      <comment>non-integer means</comment>
      <comment>large means</comment>
      <comment>TODO: When MATH-282 is resolved, s/3000/10000 below</comment>
    </method>
    <javadoc>
      <text>* Verifies that nextPoisson(mean) generates an empirical distribution of values
 * consistent with PoissonDistributionImpl by generating 1000 values, computing a
 * grouped frequency distribution of the observed values and comparing this distribution
 * to the corresponding expected distribution computed using PoissonDistributionImpl.
 * Uses ChiSquare test of goodness of fit to evaluate the null hypothesis that the
 * distributions are the same. If the null hypothesis can be rejected with confidence
 * 1 - alpha, the check fails.</text>
    </javadoc>
    <method type="void" name="checkNextPoissonConsistency" startLine="439" endLine="557">
      <declaration type="int" name="sampleSize" />
      <declaration type="int" name="minExpectedCount" />
      <declaration type="long" name="maxObservedValue" />
      <declaration type="double" name="alpha" />
      <declaration type="Frequency" name="frequency" />
      <scope startLine="446" endLine="452">
        <declaration type="long" name="value" />
        <scope startLine="448" endLine="450" />
      </scope>
      <declaration type="PoissonDistribution" name="poissonDistribution" />
      <declaration type="int" name="lower" />
      <scope startLine="462" endLine="464" />
      <declaration type="int" name="upper" />
      <scope startLine="466" endLine="468" />
      <declaration type="int" name="binWidth" />
      <declaration type="boolean" name="widthSufficient" />
      <declaration type="double" name="lowerBinMass" />
      <declaration type="double" name="upperBinMass" />
      <scope startLine="475" endLine="480" />
      <declaration type="List<Integer>" name="binBounds" />
      <declaration type="int" name="bound" />
      <scope startLine="491" endLine="494" />
      <declaration type="int" name="binCount" />
      <declaration type="long[]" name="observed" />
      <declaration type="double[]" name="expected" />
      <scope startLine="504" endLine="506" />
      <scope startLine="511" endLine="513" />
      <scope startLine="517" endLine="524">
        <scope startLine="519" endLine="521" />
        <comment>Expected count is (mass in [binBounds[i-1], binBounds[i])) * sampleSize</comment>
      </scope>
      <declaration type="ChiSquareTest" name="chiSquareTest" />
      <scope startLine="529" endLine="556">
        <declaration type="StringBuilder" name="msgBuffer" />
        <declaration type="DecimalFormat" name="df" />
        <scope startLine="540" endLine="551" />
      </scope>
      <comment>Generate sample values</comment>
      <comment>Number of deviates to generate</comment>
      <comment>Minimum size of expected bin count</comment>
      <comment>Probability of false failure</comment>
      <comment>Set up bins for chi-square test.
  Ensure expected counts are all at least minExpectedCount.
  Start with upper and lower tail bins.
  Lower bin = [0, lower); Upper bin = [upper, +inf).</comment>
      <comment>Even for mean = 1, not much mass beyond 5</comment>
      <comment>Set bin width for interior bins.  For poisson, only need to look at end bins.</comment>
      <comment>Determine interior bin bounds.  Bins are
  [1, lower = binBounds[0]), [lower, binBounds[1]), [binBounds[1], binBounds[2]), ... ,
    [binBounds[binCount - 2], upper = binBounds[binCount - 1]), [upper, +inf)</comment>
      <comment>The size of bin [binBounds[binCount - 2], upper) satisfies binWidth <= size < 2*binWidth.</comment>
      <comment>Compute observed and expected bin counts</comment>
      <comment>Bottom bin</comment>
      <comment>Top bin</comment>
      <comment>Interior bins</comment>
      <comment>Use chisquare test to verify that generated values are poisson(mean)-distributed</comment>
      <comment>Fail if we can reject null hypothesis that distributions are the same</comment>
    </method>
    <javadoc>
      <text>* test dispersion and failure modes for nextHex()</text>
    </javadoc>
    <method type="void" name="testNextHex" startLine="561" endLine="605">
      <scope startLine="562" endLine="565" />
      <scope startLine="565" endLine="567">
        <comment>ignored</comment>
      </scope>
      <scope startLine="568" endLine="571" />
      <scope startLine="571" endLine="573">
        <comment>ignored</comment>
      </scope>
      <declaration type="String" name="hexString" />
      <scope startLine="575" endLine="577" />
      <scope startLine="579" endLine="581" />
      <scope startLine="582" endLine="585" />
      <scope startLine="585" endLine="587">
        <comment>ignored</comment>
      </scope>
      <declaration type="Frequency" name="f" />
      <scope startLine="589" endLine="597">
        <scope startLine="591" endLine="593" />
        <scope startLine="594" endLine="596" />
      </scope>
      <declaration type="double[]" name="expected" />
      <declaration type="long[]" name="observed" />
      <scope startLine="600" endLine="603" />
    </method>
    <javadoc>
      <text>* test dispersion and failure modes for nextHex()</text>
    </javadoc>
    <method type="void" name="testNextSecureHex" startLine="610" endLine="654">
      <scope startLine="611" endLine="614" />
      <scope startLine="614" endLine="616">
        <comment>ignored</comment>
      </scope>
      <scope startLine="617" endLine="620" />
      <scope startLine="620" endLine="622">
        <comment>ignored</comment>
      </scope>
      <declaration type="String" name="hexString" />
      <scope startLine="624" endLine="626" />
      <scope startLine="628" endLine="630" />
      <scope startLine="631" endLine="634" />
      <scope startLine="634" endLine="636">
        <comment>ignored</comment>
      </scope>
      <declaration type="Frequency" name="f" />
      <scope startLine="638" endLine="646">
        <scope startLine="640" endLine="642" />
        <scope startLine="643" endLine="645" />
      </scope>
      <declaration type="double[]" name="expected" />
      <declaration type="long[]" name="observed" />
      <scope startLine="649" endLine="652" />
    </method>
    <method type="void" name="testNextUniformIAE" startLine="657" endLine="688">
      <scope startLine="658" endLine="661" />
      <scope startLine="661" endLine="663">
        <comment>ignored</comment>
      </scope>
      <scope startLine="664" endLine="667" />
      <scope startLine="667" endLine="669">
        <comment>ignored</comment>
      </scope>
      <scope startLine="670" endLine="673" />
      <scope startLine="673" endLine="675">
        <comment>ignored</comment>
      </scope>
      <scope startLine="676" endLine="679" />
      <scope startLine="679" endLine="681">
        <comment>ignored</comment>
      </scope>
      <scope startLine="682" endLine="685" />
      <scope startLine="685" endLine="687">
        <comment>ignored</comment>
      </scope>
    </method>
    <method type="void" name="testNextUniformUniformPositiveBounds" startLine="691" endLine="695">
      <scope startLine="692" endLine="694" />
    </method>
    <method type="void" name="testNextUniformUniformNegativeToPositiveBounds" startLine="698" endLine="702">
      <scope startLine="699" endLine="701" />
    </method>
    <method type="void" name="testNextUniformUniformNegaiveBounds" startLine="705" endLine="709">
      <scope startLine="706" endLine="708" />
    </method>
    <method type="void" name="testNextUniformUniformMaximalInterval" startLine="712" endLine="716">
      <scope startLine="713" endLine="715" />
    </method>
    <method type="void" name="checkNextUniformUniform" startLine="718" endLine="750">
      <declaration type="int" name="binCount" />
      <declaration type="double" name="binSize" />
      <declaration type="double[]" name="binBounds" />
      <scope startLine="724" endLine="726">
        <comment>+ instead of * to avoid overflow in extreme case</comment>
      </scope>
      <declaration type="Frequency" name="freq" />
      <scope startLine="729" endLine="738">
        <declaration type="double" name="value" />
        <declaration type="int" name="j" />
        <scope startLine="734" endLine="736" />
        <comment>Find bin</comment>
      </scope>
      <declaration type="long[]" name="observed" />
      <scope startLine="741" endLine="743" />
      <declaration type="double[]" name="expected" />
      <scope startLine="745" endLine="747" />
      <comment>Set up bin bounds - min, binBound[0], ..., binBound[binCount-2], max</comment>
      <comment>Prevent overflow in extreme value case</comment>
    </method>
    <javadoc>
      <text>* test exclusive endpoints of nextUniform</text>
    </javadoc>
    <method type="void" name="testNextUniformExclusiveEndpoints" startLine="754" endLine="759">
      <scope startLine="755" endLine="758">
        <declaration type="double" name="u" />
      </scope>
    </method>
    <javadoc>
      <text>* test failure modes and distribution of nextGaussian()</text>
    </javadoc>
    <method type="void" name="testNextGaussian" startLine="763" endLine="778">
      <scope startLine="764" endLine="767" />
      <scope startLine="767" endLine="769">
        <comment>ignored</comment>
      </scope>
      <declaration type="double[]" name="quartiles" />
      <declaration type="long[]" name="counts" />
      <scope startLine="773" endLine="776">
        <declaration type="double" name="value" />
      </scope>
    </method>
    <javadoc>
      <text>* test failure modes and distribution of nextExponential()</text>
    </javadoc>
    <method type="void" name="testNextExponential" startLine="782" endLine="817">
      <scope startLine="783" endLine="786" />
      <scope startLine="786" endLine="788">
        <comment>ignored</comment>
      </scope>
      <scope startLine="789" endLine="792" />
      <scope startLine="792" endLine="794">
        <comment>ignored</comment>
      </scope>
      <declaration type="double[]" name="quartiles" />
      <declaration type="long[]" name="counts" />
      <scope startLine="802" endLine="805">
        <declaration type="double" name="value" />
      </scope>
      <scope startLine="812" endLine="815">
        <declaration type="double" name="value" />
      </scope>
      <comment>Mean 1</comment>
      <comment>Mean 5</comment>
    </method>
    <javadoc>
      <text>* test reseeding, algorithm/provider games</text>
    </javadoc>
    <method type="void" name="testConfig" startLine="821" endLine="867">
      <declaration type="double" name="v" />
      <declaration type="String" name="hex" />
      <declaration type="RandomDataGenerator" name="rd" />
      <declaration type="RandomDataGenerator" name="rd2" />
      <comment>remove this test back soon, since it takes about 4 seconds

 try { randomData.setSecureAlgorithm("SHA1PRNG","SUN"); } catch
 (NoSuchProviderException ex) { ; } Assert.assertTrue("different seeds",
 !hex.equals(randomData.nextSecureHexString(40))); try {
 randomData.setSecureAlgorithm("NOSUCHTHING","SUN");
 Assert.fail("expecting NoSuchAlgorithmException"); } catch
 (NoSuchProviderException ex) { ; } catch (NoSuchAlgorithmException
 ex) { ; }

 try { randomData.setSecureAlgorithm("SHA1PRNG","NOSUCHPROVIDER");
 Assert.fail("expecting NoSuchProviderException"); } catch
 (NoSuchProviderException ex) { ; }</comment>
      <comment>test reseeding without first using the generators</comment>
    </method>
    <javadoc>
      <text>* tests for nextSample() sampling from Collection</text>
    </javadoc>
    <method type="void" name="testNextSample" startLine="871" endLine="928">
      <declaration type="Object[][]" name="c" />
      <declaration type="long[]" name="observed" />
      <declaration type="double[]" name="expected" />
      <declaration type="HashSet<Object>" name="cPop" />
      <scope startLine="879" endLine="881" />
      <declaration type="Object[]" name="sets" />
      <scope startLine="884" endLine="889">
        <declaration type="HashSet<Object>" name="hs" />
      </scope>
      <scope startLine="891" endLine="894">
        <declaration type="Object[]" name="cSamp" />
      </scope>
      <declaration type="HashSet<Object>" name="hs" />
      <declaration type="Object[]" name="one" />
      <declaration type="String" name="oneString" />
      <scope startLine="908" endLine="910" />
      <scope startLine="913" endLine="916" />
      <scope startLine="916" endLine="918">
        <comment>ignored</comment>
      </scope>
      <scope startLine="921" endLine="925" />
      <scope startLine="925" endLine="927">
        <comment>ignored</comment>
      </scope>
      <comment>{0,1,2,3,4}</comment>
      <comment>2-sets from 5</comment>
      <comment>Use ChiSquare dist with df = 10-1 = 9, alpha = .001 Change to 21.67
 for alpha = .01</comment>
      <comment>Make sure sample of size = size of collection returns same collection</comment>
      <comment>Make sure we fail for sample size > collection size</comment>
      <comment>Make sure we fail for empty collection</comment>
    </method>
    <method type="int" name="findSample" startLine="931" endLine="944">
      <scope startLine="932" endLine="941">
        <declaration type="HashSet<Object>" name="set" />
        <declaration type="HashSet<Object>" name="sampSet" />
        <scope startLine="935" endLine="937" />
        <scope startLine="938" endLine="940" />
      </scope>
    </method>
    <javadoc>
      <text>* tests for nextPermutation</text>
    </javadoc>
    <method type="void" name="testNextPermutation" startLine="948" endLine="993">
      <declaration type="int[][]" name="p" />
      <declaration type="long[]" name="observed" />
      <declaration type="double[]" name="expected" />
      <scope startLine="954" endLine="957">
        <declaration type="int[]" name="perm" />
      </scope>
      <declaration type="String[]" name="labels" />
      <declaration type="int[]" name="perm" />
      <scope startLine="965" endLine="992">
        <scope startLine="969" endLine="972" />
        <scope startLine="972" endLine="974" />
        <scope startLine="977" endLine="980" />
        <scope startLine="980" endLine="982" />
        <scope startLine="985" endLine="988" />
        <scope startLine="988" endLine="990" />
        <comment>Make sure we fail for k size > n</comment>
        <comment>ignored</comment>
        <comment>Make sure we fail for n = 0</comment>
        <comment>ignored</comment>
        <comment>Make sure we fail for k < n < 0</comment>
        <comment>ignored</comment>
      </scope>
      <comment>Check size = 1 boundary case</comment>
    </method>
    <method type="int" name="findPerm" startLine="1000" endLine="1014">
      <scope startLine="1001" endLine="1011">
        <declaration type="boolean" name="good" />
        <scope startLine="1003" endLine="1007">
          <scope startLine="1004" endLine="1006" />
        </scope>
        <scope startLine="1008" endLine="1010" />
      </scope>
    </method>
    <method type="void" name="testNextInversionDeviate" startLine="1017" endLine="1038">
      <declaration type="RandomGenerator" name="rg" />
      <declaration type="RandomDataGenerator" name="rdg" />
      <declaration type="double[]" name="quantiles" />
      <scope startLine="1022" endLine="1024" />
      <declaration type="BetaDistribution" name="betaDistribution" />
      <scope startLine="1034" endLine="1037">
        <declaration type="double" name="value" />
      </scope>
      <comment>Set the seed for the default random generator</comment>
      <comment>Reseed again so the inversion generator gets the same sequence</comment>
      <comment>Generate a sequence of deviates using inversion - the distribution function
  evaluated at the random value from the distribution should match the uniform
  random value used to generate it, which is stored in the quantiles[] array.</comment>
    </method>
    <method type="void" name="testNextBeta" startLine="1041" endLine="1050">
      <declaration type="double[]" name="quartiles" />
      <declaration type="long[]" name="counts" />
      <scope startLine="1045" endLine="1048">
        <declaration type="double" name="value" />
      </scope>
    </method>
    <method type="void" name="testNextCauchy" startLine="1053" endLine="1062">
      <declaration type="double[]" name="quartiles" />
      <declaration type="long[]" name="counts" />
      <scope startLine="1057" endLine="1060">
        <declaration type="double" name="value" />
      </scope>
    </method>
    <method type="void" name="testNextChiSquare" startLine="1065" endLine="1074">
      <declaration type="double[]" name="quartiles" />
      <declaration type="long[]" name="counts" />
      <scope startLine="1069" endLine="1072">
        <declaration type="double" name="value" />
      </scope>
    </method>
    <method type="void" name="testNextF" startLine="1077" endLine="1086">
      <declaration type="double[]" name="quartiles" />
      <declaration type="long[]" name="counts" />
      <scope startLine="1081" endLine="1084">
        <declaration type="double" name="value" />
      </scope>
    </method>
    <method type="void" name="testNextGamma" startLine="1089" endLine="1112">
      <declaration type="double[]" name="quartiles" />
      <declaration type="long[]" name="counts" />
      <scope startLine="1097" endLine="1100">
        <declaration type="double" name="value" />
      </scope>
      <scope startLine="1107" endLine="1110">
        <declaration type="double" name="value" />
      </scope>
      <comment>Tests shape > 1, one case in the rejection sampling</comment>
      <comment>Tests shape <= 1, another case in the rejection sampling</comment>
    </method>
    <method type="void" name="testNextT" startLine="1115" endLine="1124">
      <declaration type="double[]" name="quartiles" />
      <declaration type="long[]" name="counts" />
      <scope startLine="1119" endLine="1122">
        <declaration type="double" name="value" />
      </scope>
    </method>
    <method type="void" name="testNextWeibull" startLine="1127" endLine="1136">
      <declaration type="double[]" name="quartiles" />
      <declaration type="long[]" name="counts" />
      <scope startLine="1131" endLine="1134">
        <declaration type="double" name="value" />
      </scope>
    </method>
    <method type="void" name="testNextBinomial" startLine="1139" endLine="1162">
      <declaration type="BinomialDistributionTest" name="testInstance" />
      <declaration type="int[]" name="densityPoints" />
      <declaration type="double[]" name="densityValues" />
      <declaration type="int" name="sampleSize" />
      <declaration type="int" name="length" />
      <declaration type="BinomialDistribution" name="distribution" />
      <declaration type="double[]" name="expectedCounts" />
      <declaration type="long[]" name="observedCounts" />
      <scope startLine="1148" endLine="1150" />
      <scope startLine="1152" endLine="1160">
        <declaration type="int" name="value" />
        <scope startLine="1155" endLine="1159">
          <scope startLine="1156" endLine="1158" />
        </scope>
      </scope>
    </method>
    <method type="void" name="testNextHypergeometric" startLine="1165" endLine="1188">
      <declaration type="HypergeometricDistributionTest" name="testInstance" />
      <declaration type="int[]" name="densityPoints" />
      <declaration type="double[]" name="densityValues" />
      <declaration type="int" name="sampleSize" />
      <declaration type="int" name="length" />
      <declaration type="HypergeometricDistribution" name="distribution" />
      <declaration type="double[]" name="expectedCounts" />
      <declaration type="long[]" name="observedCounts" />
      <scope startLine="1174" endLine="1176" />
      <scope startLine="1178" endLine="1186">
        <declaration type="int" name="value" />
        <scope startLine="1181" endLine="1185">
          <scope startLine="1182" endLine="1184" />
        </scope>
      </scope>
    </method>
    <method type="void" name="testNextPascal" startLine="1191" endLine="1213">
      <declaration type="PascalDistributionTest" name="testInstance" />
      <declaration type="int[]" name="densityPoints" />
      <declaration type="double[]" name="densityValues" />
      <declaration type="int" name="sampleSize" />
      <declaration type="int" name="length" />
      <declaration type="PascalDistribution" name="distribution" />
      <declaration type="double[]" name="expectedCounts" />
      <declaration type="long[]" name="observedCounts" />
      <scope startLine="1200" endLine="1202" />
      <scope startLine="1204" endLine="1211">
        <declaration type="int" name="value" />
        <scope startLine="1206" endLine="1210">
          <scope startLine="1207" endLine="1209" />
        </scope>
      </scope>
    </method>
    <method type="void" name="testNextZipf" startLine="1216" endLine="1238">
      <declaration type="ZipfDistributionTest" name="testInstance" />
      <declaration type="int[]" name="densityPoints" />
      <declaration type="double[]" name="densityValues" />
      <declaration type="int" name="sampleSize" />
      <declaration type="int" name="length" />
      <declaration type="ZipfDistribution" name="distribution" />
      <declaration type="double[]" name="expectedCounts" />
      <declaration type="long[]" name="observedCounts" />
      <scope startLine="1225" endLine="1227" />
      <scope startLine="1229" endLine="1236">
        <declaration type="int" name="value" />
        <scope startLine="1231" endLine="1235">
          <scope startLine="1232" endLine="1234" />
        </scope>
      </scope>
    </method>
    <method type="void" name="testReseed" startLine="1244" endLine="1251">
      <declaration type="PoissonDistribution" name="x" />
      <declaration type="double" name="u" />
      <declaration type="PoissonDistribution" name="y" />
    </method>
    <comment>Disable until we have equals</comment>
    <comment>public void testSerial() {</comment>
    <comment>Assert.assertEquals(randomData, TestUtils.serializeAndRecover(randomData));</comment>
    <comment>}</comment>
    <javadoc>
      <text>* MATH-720</text>
    </javadoc>
  </class>
</source>
