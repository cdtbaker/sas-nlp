<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="java.util.ArrayList" />
  <import name="java.util.Collections" />
  <import name="java.io.ByteArrayInputStream" />
  <import name="java.io.ByteArrayOutputStream" />
  <import name="java.io.IOException" />
  <import name="java.io.ObjectInputStream" />
  <import name="java.io.ObjectOutputStream" />
  <import name="org.apache.commons.math3.TestUtils" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator" />
  <import name="org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.junit.After" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Before" />
  <import name="org.junit.Test" />
  <class name="RealDistributionAbstractTest" startLine="40">
    <javadoc>
      <text>* Abstract base class for {@link RealDistribution} tests.
 * <p>
 * To create a concrete test class for a continuous distribution
 * implementation, first implement makeDistribution() to return a distribution
 * instance to use in tests. Then implement each of the test data generation
 * methods below.  In each case, the test points and test values arrays
 * returned represent parallel arrays of inputs and expected values for the
 * distribution returned by makeDistribution().  Default implementations
 * are provided for the makeInverseXxx methods that just invert the mapping
 * defined by the arrays returned by the makeCumulativeXxx methods.
 * <p>
 * makeCumulativeTestPoints() -- arguments used to test cumulative probabilities
 * makeCumulativeTestValues() -- expected cumulative probabilites
 * makeDensityTestValues() -- expected density values at cumulativeTestPoints
 * makeInverseCumulativeTestPoints() -- arguments used to test inverse cdf
 * makeInverseCumulativeTestValues() -- expected inverse cdf values
 * <p>
 * To implement additional test cases with different distribution instances and
 * test data, use the setXxx methods for the instance data in test cases and
 * call the verifyXxx methods to verify results.
 * <p>
 * Error tolerance can be overriden by implementing getTolerance().
 * <p>
 * Test data should be validated against reference tables or other packages
 * where possible, and the source of the reference data and/or validation
 * should be documented in the test cases.  A framework for validating
 * distribution data against R is included in the /src/test/R source tree.
 * <p>
 * See {@link NormalDistributionTest} and {@link ChiSquaredDistributionTest}for examples.</text>
      <version>$Id: RealDistributionAbstractTest.java 1428822 2013-01-04 12:28:44Z erans $</version>
    </javadoc>
    <javadoc>
      <text>* Distribution instance used to perform tests</text>
    </javadoc>
    <declaration type="RealDistribution" name="distribution" />
    <javadoc>
      <text>* Tolerance used in comparing expected and returned values</text>
    </javadoc>
    <declaration type="double" name="tolerance" />
    <javadoc>
      <text>* Arguments used to test cumulative probability density calculations</text>
    </javadoc>
    <declaration type="double[]" name="cumulativeTestPoints" />
    <javadoc>
      <text>* Values used to test cumulative probability density calculations</text>
    </javadoc>
    <declaration type="double[]" name="cumulativeTestValues" />
    <javadoc>
      <text>* Arguments used to test inverse cumulative probability density calculations</text>
    </javadoc>
    <declaration type="double[]" name="inverseCumulativeTestPoints" />
    <javadoc>
      <text>* Values used to test inverse cumulative probability density calculations</text>
    </javadoc>
    <declaration type="double[]" name="inverseCumulativeTestValues" />
    <javadoc>
      <text>* Values used to test density calculations</text>
    </javadoc>
    <declaration type="double[]" name="densityTestValues" />
    <method name="makeDistribution" type="RealDistribution" startLine="100" endLine="101" />
    <javadoc>
      <text>* Creates the default continuous distribution instance to use in tests.</text>
    </javadoc>
    <method name="makeCumulativeTestPoints" type="double[]" startLine="103" endLine="104" />
    <javadoc>
      <text>* Creates the default cumulative probability test input values</text>
    </javadoc>
    <method name="makeCumulativeTestValues" type="double[]" startLine="106" endLine="107" />
    <javadoc>
      <text>* Creates the default cumulative probability test expected values</text>
    </javadoc>
    <method name="makeDensityTestValues" type="double[]" startLine="109" endLine="110" />
    <javadoc>
      <text>* Creates the default density test expected values</text>
    </javadoc>
    <javadoc>
      <text>* Creates the default inverse cumulative probability test input values</text>
    </javadoc>
    <method type="double[]" name="makeInverseCumulativeTestPoints" startLine="115" endLine="117" />
    <javadoc>
      <text>* Creates the default inverse cumulative probability density test expected values</text>
    </javadoc>
    <method type="double[]" name="makeInverseCumulativeTestValues" startLine="120" endLine="122" />
    <javadoc>
      <text>* Setup sets all test instance data to default values</text>
    </javadoc>
    <method type="void" name="setUp" startLine="130" endLine="137" />
    <javadoc>
      <text>* Cleans up test instance data</text>
    </javadoc>
    <method type="void" name="tearDown" startLine="143" endLine="150" />
    <javadoc>
      <text>* Verifies that cumulative probability density calculations match expected values
 * using current test instance data</text>
    </javadoc>
    <method type="void" name="verifyCumulativeProbabilities" startLine="158" endLine="184">
      <scope startLine="160" endLine="165" />
      <scope startLine="168" endLine="183">
        <scope startLine="169" endLine="182">
          <scope startLine="170" endLine="174" />
          <scope startLine="174" endLine="181">
            <scope startLine="175" endLine="177" />
            <scope startLine="177" endLine="179" />
          </scope>
        </scope>
      </scope>
      <comment>verify cumulativeProbability(double)</comment>
      <comment>verify cumulativeProbability(double, double)</comment>
      <comment>XXX In 4.0, "cumulativeProbability(double,double)" must be replaced with "probability" (MATH-839).</comment>
    </method>
    <javadoc>
      <text>* Verifies that inverse cumulative probability density calculations match expected values
 * using current test instance data</text>
    </javadoc>
    <method type="void" name="verifyInverseCumulativeProbabilities" startLine="190" endLine="197">
      <scope startLine="191" endLine="196" />
    </method>
    <javadoc>
      <text>* Verifies that density calculations match expected values</text>
    </javadoc>
    <method type="void" name="verifyDensities" startLine="202" endLine="209">
      <scope startLine="203" endLine="208" />
    </method>
    <javadoc>
      <text>* Verifies that cumulative probability density calculations match expected values
 * using default test instance data</text>
    </javadoc>
    <method type="void" name="testCumulativeProbabilities" startLine="218" endLine="220" />
    <javadoc>
      <text>* Verifies that inverse cumulative probability density calculations match expected values
 * using default test instance data</text>
    </javadoc>
    <method type="void" name="testInverseCumulativeProbabilities" startLine="227" endLine="229" />
    <javadoc>
      <text>* Verifies that density calculations return expected values
 * for default test instance data</text>
    </javadoc>
    <method type="void" name="testDensities" startLine="236" endLine="238" />
    <javadoc>
      <text>* Verifies that probability computations are consistent</text>
    </javadoc>
    <method type="void" name="testConsistency" startLine="244" endLine="263">
      <scope startLine="245" endLine="262">
        <declaration type="double" name="upper" />
        <declaration type="double" name="lower" />
        <declaration type="double" name="diff" />
        <declaration type="double" name="direct" />
        <comment>check that cdf(x, x) = 0</comment>
        <comment>XXX In 4.0, "cumulativeProbability(double,double)" must be replaced with "probability" (MATH-839).</comment>
        <comment>check that P(a < X <= b) = P(X <= b) - P(X <= a)</comment>
        <comment>XXX In 4.0, "cumulativeProbability(double,double)" must be replaced with "probability" (MATH-839).</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Verifies that illegal arguments are correctly handled</text>
    </javadoc>
    <method type="void" name="testIllegalArguments" startLine="269" endLine="289">
      <scope startLine="270" endLine="274">
        <comment>XXX In 4.0, "cumulativeProbability(double,double)" must be replaced with "probability" (MATH-839).</comment>
      </scope>
      <scope startLine="274" endLine="276">
        <comment>expected</comment>
      </scope>
      <scope startLine="277" endLine="280" />
      <scope startLine="280" endLine="282">
        <comment>expected</comment>
      </scope>
      <scope startLine="283" endLine="286" />
      <scope startLine="286" endLine="288">
        <comment>expected</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Test sampling</text>
    </javadoc>
    <method type="void" name="testSampling" startLine="295" endLine="306">
      <declaration type="int" name="sampleSize" />
      <declaration type="double[]" name="sample" />
      <declaration type="double[]" name="quartiles" />
      <declaration type="double[]" name="expected" />
      <declaration type="long[]" name="counts" />
      <scope startLine="302" endLine="304" />
      <comment>Use fixed seed</comment>
    </method>
    <javadoc>
      <text>* Verify that density integrals match the distribution.
 * The (filtered, sorted) cumulativeTestPoints array is used to source
 * integration limits. The integral of the density (estimated using a
 * Legendre-Gauss integrator) is compared with the cdf over the same
 * interval. Test points outside of the domain of the density function
 * are discarded.</text>
    </javadoc>
    <method type="void" name="testDensityIntegrals" startLine="317" endLine="345">
      <declaration type="double" name="tol" />
      <declaration type="BaseAbstractUnivariateIntegrator" name="integrator" />
      <declaration type="UnivariateFunction" name="d" />
      <method type="double" name="value" startLine="322" endLine="324" />
      <declaration type="ArrayList<Double>" name="integrationTestPoints" />
      <scope startLine="327" endLine="334">
        <scope startLine="330" endLine="332" />
        <comment>exclude integrals outside domain.</comment>
      </scope>
      <scope startLine="336" endLine="344">
        <comment>FIXME @4.0 when rename happens</comment>
        <comment>Triangle integrals are very slow to converge</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Verify that isSupportLowerBoundInclusvie returns true iff the lower bound
 * is finite and density is non-NaN, non-infinite there.</text>
    </javadoc>
    <method type="void" name="testIsSupportLowerBoundInclusive" startLine="352" endLine="361">
      <declaration type="double" name="lowerBound" />
      <declaration type="double" name="result" />
    </method>
    <javadoc>
      <text>* Verify that isSupportUpperBoundInclusvie returns true iff the upper bound
 * is finite and density is non-NaN, non-infinite there.</text>
    </javadoc>
    <method type="void" name="testIsSupportUpperBoundInclusive" startLine="368" endLine="377">
      <declaration type="double" name="upperBound" />
      <declaration type="double" name="result" />
    </method>
    <method type="void" name="testDistributionClone" startLine="382" endLine="395">
      <declaration type="RealDistribution" name="cloned" />
      <declaration type="double" name="s1" />
      <declaration type="double" name="s2" />
      <comment>Construct a distribution and initialize its internal random</comment>
      <comment>generator, using a fixed seed for deterministic results.</comment>
      <comment>Clone the distribution.</comment>
      <comment>Make sure they still produce the same samples.</comment>
    </method>
    <javadoc>
      <return>Returns the cumulativeTestPoints.</return>
    </javadoc>
    <method type="double[]" name="getCumulativeTestPoints" startLine="401" endLine="403" />
    <javadoc>
      <param>cumulativeTestPoints The cumulativeTestPoints to set.</param>
    </javadoc>
    <method type="void" name="setCumulativeTestPoints" startLine="408" endLine="410" />
    <javadoc>
      <return>Returns the cumulativeTestValues.</return>
    </javadoc>
    <method type="double[]" name="getCumulativeTestValues" startLine="415" endLine="417" />
    <javadoc>
      <param>cumulativeTestValues The cumulativeTestValues to set.</param>
    </javadoc>
    <method type="void" name="setCumulativeTestValues" startLine="422" endLine="424" />
    <method type="double[]" name="getDensityTestValues" startLine="426" endLine="428" />
    <method type="void" name="setDensityTestValues" startLine="430" endLine="432" />
    <javadoc>
      <return>Returns the distribution.</return>
    </javadoc>
    <method type="RealDistribution" name="getDistribution" startLine="437" endLine="439" />
    <javadoc>
      <param>distribution The distribution to set.</param>
    </javadoc>
    <method type="void" name="setDistribution" startLine="444" endLine="446" />
    <javadoc>
      <return>Returns the inverseCumulativeTestPoints.</return>
    </javadoc>
    <method type="double[]" name="getInverseCumulativeTestPoints" startLine="451" endLine="453" />
    <javadoc>
      <param>inverseCumulativeTestPoints The inverseCumulativeTestPoints to set.</param>
    </javadoc>
    <method type="void" name="setInverseCumulativeTestPoints" startLine="458" endLine="460" />
    <javadoc>
      <return>Returns the inverseCumulativeTestValues.</return>
    </javadoc>
    <method type="double[]" name="getInverseCumulativeTestValues" startLine="465" endLine="467" />
    <javadoc>
      <param>inverseCumulativeTestValues The inverseCumulativeTestValues to set.</param>
    </javadoc>
    <method type="void" name="setInverseCumulativeTestValues" startLine="472" endLine="474" />
    <javadoc>
      <return>Returns the tolerance.</return>
    </javadoc>
    <method type="double" name="getTolerance" startLine="479" endLine="481" />
    <javadoc>
      <param>tolerance The tolerance to set.</param>
    </javadoc>
    <method type="void" name="setTolerance" startLine="486" endLine="488" />
    <javadoc>
      <text>* Serialization and deserialization loop of the {@link #distribution}.</text>
    </javadoc>
    <method type="RealDistribution" name="deepClone" startLine="495" endLine="509">
      <declaration type="ByteArrayOutputStream" name="bOut" />
      <declaration type="ObjectOutputStream" name="oOut" />
      <declaration type="byte[]" name="data" />
      <declaration type="ByteArrayInputStream" name="bIn" />
      <declaration type="ObjectInputStream" name="oIn" />
      <declaration type="Object" name="clone" />
      <comment>Serialize to byte array.</comment>
      <comment>Deserialize from byte array.</comment>
    </method>
    <comment>-------------------- Private test instance data -------------------------</comment>
    <comment>-------------------- Abstract methods -----------------------------------</comment>
    <comment>---- Default implementations of inverse test data generation methods ----</comment>
    <comment>-------------------- Setup / tear down ----------------------------------</comment>
    <comment>-------------------- Verification methods -------------------------------</comment>
    <comment>------------------------ Default test cases -----------------------------</comment>
    <comment>------------------ Getters / Setters for test instance data -----------</comment>
  </class>
</source>
