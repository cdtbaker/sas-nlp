<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="java.util.Arrays" />
  <import name="java.util.Random" />
  <import name="org.apache.commons.math3.distribution.NormalDistribution" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.Precision" />
  <import name="org.apache.commons.math3.exception.MathUnsupportedOperationException" />
  <import name="org.junit.After" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Before" />
  <import name="org.junit.Ignore" />
  <import name="org.junit.Test" />
  <class name="EigenDecompositionTest" startLine="34">
    <declaration type="double[]" name="refValues" />
    <declaration type="RealMatrix" name="matrix" />
    <method type="void" name="testDimension1" startLine="40" endLine="46">
      <declaration type="RealMatrix[]" name="matrix" />
      <declaration type="EigenDecomposition" name="ed" />
    </method>
    <method type="void" name="testDimension2" startLine="49" endLine="59">
      <declaration type="RealMatrix[]" name="matrix" />
      <declaration type="EigenDecomposition" name="ed" />
    </method>
    <method type="void" name="testDimension3" startLine="62" endLine="74">
      <declaration type="RealMatrix[]" name="matrix" />
      <declaration type="EigenDecomposition" name="ed" />
    </method>
    <method type="void" name="testDimension3MultipleRoot" startLine="77" endLine="89">
      <declaration type="RealMatrix[]" name="matrix" />
      <declaration type="EigenDecomposition" name="ed" />
    </method>
    <method type="void" name="testDimension4WithSplit" startLine="92" endLine="106">
      <declaration type="RealMatrix[]" name="matrix" />
      <declaration type="EigenDecomposition" name="ed" />
    </method>
    <method type="void" name="testDimension4WithoutSplit" startLine="109" endLine="123">
      <declaration type="RealMatrix[]" name="matrix" />
      <declaration type="EigenDecomposition" name="ed" />
    </method>
    <method type="void" name="testMath308" startLine="127" endLine="158">
      <declaration type="double[]" name="mainTridiagonal" />
      <declaration type="double[]" name="secondaryTridiagonal" />
      <declaration type="double[]" name="refEigenValues" />
      <declaration type="RealVector[][]" name="refEigenVectors" />
      <declaration type="EigenDecomposition" name="decomposition" />
      <declaration type="double[]" name="eigenValues" />
      <scope startLine="153" endLine="156" />
      <comment>the reference values have been computed using routine DSTEMR</comment>
      <comment>from the fortran library LAPACK version 3.2.1</comment>
    </method>
    <method type="void" name="testMathpbx02" startLine="161" endLine="205">
      <declaration type="double[]" name="mainTridiagonal" />
      <declaration type="double[]" name="secondaryTridiagonal" />
      <declaration type="double[]" name="refEigenValues" />
      <declaration type="RealVector[][]" name="refEigenVectors" />
      <declaration type="EigenDecomposition" name="decomposition" />
      <declaration type="double[]" name="eigenValues" />
      <scope startLine="196" endLine="203">
        <scope startLine="198" endLine="200" />
        <scope startLine="200" endLine="202" />
      </scope>
      <comment>the reference values have been computed using routine DSTEMR</comment>
      <comment>from the fortran library LAPACK version 3.2.1</comment>
      <comment>the following line triggers the exception</comment>
    </method>
    <method type="void" name="testMathpbx03" startLine="208" endLine="250">
      <declaration type="double[]" name="mainTridiagonal" />
      <declaration type="double[]" name="secondaryTridiagonal" />
      <declaration type="double[]" name="refEigenValues" />
      <declaration type="RealVector[][]" name="refEigenVectors" />
      <declaration type="EigenDecomposition" name="decomposition" />
      <declaration type="double[]" name="eigenValues" />
      <scope startLine="241" endLine="248">
        <scope startLine="243" endLine="245" />
        <scope startLine="245" endLine="247" />
      </scope>
      <comment>the reference values have been computed using routine DSTEMR</comment>
      <comment>from the fortran library LAPACK version 3.2.1</comment>
      <comment>the following line triggers the exception</comment>
    </method>
    <javadoc>
      <text>* test a matrix already in tridiagonal form.</text>
    </javadoc>
    <method type="void" name="testTridiagonal" startLine="254" endLine="275">
      <declaration type="Random" name="r" />
      <declaration type="double[]" name="ref" />
      <scope startLine="257" endLine="263">
        <scope startLine="258" endLine="260" />
        <scope startLine="260" endLine="262" />
      </scope>
      <declaration type="TriDiagonalTransformer" name="t" />
      <declaration type="EigenDecomposition" name="ed" />
      <declaration type="double[]" name="eigenValues" />
      <scope startLine="271" endLine="273" />
    </method>
    <javadoc>
      <text>* test dimensions</text>
    </javadoc>
    <method type="void" name="testDimensions" startLine="279" endLine="289">
      <declaration type="int" name="m" />
      <declaration type="EigenDecomposition" name="ed" />
    </method>
    <javadoc>
      <text>* test eigenvalues</text>
    </javadoc>
    <method type="void" name="testEigenvalues" startLine="293" endLine="301">
      <declaration type="EigenDecomposition" name="ed" />
      <declaration type="double[]" name="eigenValues" />
      <scope startLine="298" endLine="300" />
    </method>
    <javadoc>
      <text>* test eigenvalues for a big matrix.</text>
    </javadoc>
    <method type="void" name="testBigMatrix" startLine="305" endLine="319">
      <declaration type="Random" name="r" />
      <declaration type="double[]" name="bigValues" />
      <scope startLine="308" endLine="310" />
      <declaration type="EigenDecomposition" name="ed" />
      <declaration type="double[]" name="eigenValues" />
      <scope startLine="316" endLine="318" />
    </method>
    <method type="void" name="testSymmetric" startLine="322" endLine="338">
      <declaration type="RealMatrix[]" name="symmetric" />
      <declaration type="EigenDecomposition" name="ed" />
      <declaration type="RealMatrix" name="d" />
      <declaration type="RealMatrix" name="v" />
      <declaration type="RealMatrix" name="vT" />
      <declaration type="double" name="norm" />
    </method>
    <method type="void" name="testSquareRoot" startLine="341" endLine="361">
      <declaration type="double[][]" name="data" />
      <declaration type="EigenDecomposition" name="dec" />
      <declaration type="RealMatrix" name="sqrtM" />
      <declaration type="RealMatrix" name="m" />
      <declaration type="int" name="dim" />
      <scope startLine="355" endLine="360">
        <scope startLine="356" endLine="359" />
      </scope>
      <comment>Reconstruct initial matrix.</comment>
    </method>
    <method type="void" name="testSquareRootNonSymmetric" startLine="364" endLine="373">
      <declaration type="double[][]" name="data" />
      <declaration type="EigenDecomposition" name="dec" />
      <declaration type="RealMatrix" name="sqrtM" />
    </method>
    <method type="void" name="testSquareRootNonPositiveDefinite" startLine="376" endLine="385">
      <declaration type="double[][]" name="data" />
      <declaration type="EigenDecomposition" name="dec" />
      <declaration type="RealMatrix" name="sqrtM" />
    </method>
    <method type="void" name="testUnsymmetric" startLine="388" endLine="414">
      <declaration type="double[][]" name="vData" />
      <declaration type="RealMatrix[]" name="randMatrix" />
      <declaration type="double[][]" name="randData2" />
      <comment>Vandermonde matrix V(x;i,j) = x_i^{n - j} with x = (-1,-2,3,4)</comment>
      <comment>from http:eigen.tuxfamily.org/dox/classEigen_1_1RealSchur.html</comment>
    </method>
    <method type="void" name="testRandomUnsymmetricMatrix" startLine="418" endLine="435">
      <scope startLine="419" endLine="434">
        <declaration type="Random" name="r" />
        <declaration type="int" name="size" />
        <declaration type="double[][]" name="data" />
        <scope startLine="426" endLine="430">
          <scope startLine="427" endLine="429" />
        </scope>
        <declaration type="RealMatrix" name="m" />
        <comment>matrix size</comment>
      </scope>
    </method>
    <method type="void" name="testNormalDistributionUnsymmetricMatrix" startLine="439" endLine="457">
      <scope startLine="440" endLine="456">
        <declaration type="Random" name="r" />
        <declaration type="NormalDistribution" name="dist" />
        <declaration type="int" name="size" />
        <declaration type="double[][]" name="data" />
        <scope startLine="448" endLine="452">
          <scope startLine="449" endLine="451" />
        </scope>
        <declaration type="RealMatrix" name="m" />
        <comment>matrix size</comment>
      </scope>
    </method>
    <method type="void" name="testMath848" startLine="460" endLine="472">
      <declaration type="double[][]" name="data" />
      <declaration type="RealMatrix" name="m" />
    </method>
    <javadoc>
      <text>* Checks that the eigen decomposition of a general (unsymmetric) matrix is valid by
 * checking: A*V = V*D</text>
    </javadoc>
    <method type="void" name="checkUnsymmetricMatrix" startLine="478" endLine="499">
      <scope startLine="479" endLine="496">
        <declaration type="EigenDecomposition" name="ed" />
        <declaration type="RealMatrix" name="d" />
        <declaration type="RealMatrix" name="v" />
        <declaration type="RealMatrix" name="x" />
        <declaration type="RealMatrix" name="y" />
        <declaration type="double" name="diffNorm" />
        <declaration type="RealMatrix" name="invV" />
        <declaration type="double" name="norm" />
        <comment>RealMatrix vT = ed.getVT();</comment>
      </scope>
      <scope startLine="496" endLine="498" />
    </method>
    <javadoc>
      <text>* test eigenvectors</text>
    </javadoc>
    <method type="void" name="testEigenvectors" startLine="503" endLine="512">
      <declaration type="EigenDecomposition" name="ed" />
      <scope startLine="506" endLine="511">
        <declaration type="double" name="lambda" />
        <declaration type="RealVector" name="v" />
        <declaration type="RealVector" name="mV" />
      </scope>
    </method>
    <javadoc>
      <text>* test A = VDVt</text>
    </javadoc>
    <method type="void" name="testAEqualVDVt" startLine="516" endLine="524">
      <declaration type="EigenDecomposition" name="ed" />
      <declaration type="RealMatrix" name="v" />
      <declaration type="RealMatrix" name="d" />
      <declaration type="RealMatrix" name="vT" />
      <declaration type="double" name="norm" />
    </method>
    <javadoc>
      <text>* test that V is orthogonal</text>
    </javadoc>
    <method type="void" name="testVOrthogonal" startLine="528" endLine="533">
      <declaration type="RealMatrix" name="v" />
      <declaration type="RealMatrix" name="vTv" />
      <declaration type="RealMatrix" name="id" />
    </method>
    <javadoc>
      <text>* test diagonal matrix</text>
    </javadoc>
    <method type="void" name="testDiagonal" startLine="537" endLine="546">
      <declaration type="double[][]" name="diagonal" />
      <declaration type="RealMatrix" name="m" />
      <declaration type="EigenDecomposition" name="ed" />
    </method>
    <javadoc>
      <text>* Matrix with eigenvalues {8, -1, -1}</text>
    </javadoc>
    <method type="void" name="testRepeatedEigenvalue" startLine="552" endLine="562">
      <declaration type="RealMatrix[]" name="repeated" />
      <declaration type="EigenDecomposition" name="ed" />
    </method>
    <javadoc>
      <text>* Matrix with eigenvalues {2, 0, 12}</text>
    </javadoc>
    <method type="void" name="testDistinctEigenvalues" startLine="568" endLine="580">
      <declaration type="RealMatrix[]" name="distinct" />
      <declaration type="EigenDecomposition" name="ed" />
    </method>
    <javadoc>
      <text>* Verifies operation on indefinite matrix</text>
    </javadoc>
    <method type="void" name="testZeroDivide" startLine="586" endLine="601">
      <declaration type="RealMatrix[]" name="indefinite" />
      <declaration type="EigenDecomposition" name="ed" />
      <declaration type="double" name="isqrt3" />
      <declaration type="double" name="isqrt2" />
      <declaration type="double" name="isqrt6" />
    </method>
    <javadoc>
      <text>* Verifies that the given EigenDecomposition has eigenvalues equivalent to
 * the targetValues, ignoring the order of the values and allowing
 * values to differ by tolerance.</text>
    </javadoc>
    <method type="void" name="checkEigenValues" startLine="608" endLine="614">
      <declaration type="double[]" name="observed" />
      <scope startLine="610" endLine="613" />
    </method>
    <javadoc>
      <text>* Returns true iff there is an entry within tolerance of value in
 * searchArray.</text>
    </javadoc>
    <method type="boolean" name="isIncludedValue" startLine="622" endLine="632">
      <declaration type="boolean" name="found" />
      <declaration type="int" name="i" />
      <scope startLine="625" endLine="630">
        <scope startLine="626" endLine="628" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns true iff eigenVector is a scalar multiple of one of the columns
 * of ed.getV().  Does not try linear combinations - i.e., should only be
 * used to find vectors in one-dimensional eigenspaces.</text>
    </javadoc>
    <method type="void" name="checkEigenVector" startLine="640" endLine="642" />
    <javadoc>
      <text>* Returns true iff there is a column that is a scalar multiple of column
 * in searchMatrix (modulo tolerance)</text>
    </javadoc>
    <method type="boolean" name="isIncludedColumn" startLine="649" endLine="672">
      <declaration type="boolean" name="found" />
      <declaration type="int" name="i" />
      <scope startLine="652" endLine="670">
        <declaration type="double" name="multiplier" />
        <declaration type="boolean" name="matching" />
        <declaration type="int" name="j" />
        <scope startLine="656" endLine="667">
          <declaration type="double" name="colEntry" />
          <scope startLine="660" endLine="662" />
          <scope startLine="663" endLine="665" />
        </scope>
        <comment>Use the first entry where both are non-zero as scalar</comment>
      </scope>
    </method>
    <method type="void" name="setUp" startLine="675" endLine="680" />
    <method type="void" name="tearDown" startLine="683" endLine="686" />
    <method type="RealMatrix" name="createTestMatrix" startLine="688" endLine="693">
      <declaration type="int" name="n" />
      <declaration type="RealMatrix" name="v" />
      <declaration type="RealMatrix" name="d" />
    </method>
    <method type="RealMatrix" name="createOrthogonalMatrix" startLine="695" endLine="736">
      <declaration type="double[][]" name="data" />
      <scope startLine="699" endLine="732">
        <declaration type="double[]" name="dataI" />
        <declaration type="double" name="norm2" />
        <scope startLine="702" endLine="731">
          <scope startLine="705" endLine="707" />
          <scope startLine="710" endLine="719">
            <declaration type="double[]" name="dataK" />
            <declaration type="double" name="dotProduct" />
            <scope startLine="713" endLine="715" />
            <scope startLine="716" endLine="718" />
          </scope>
          <scope startLine="723" endLine="725" />
          <declaration type="double" name="inv" />
          <scope startLine="727" endLine="729" />
        </scope>
        <comment>generate randomly row I</comment>
        <comment>project the row in the subspace orthogonal to previous rows</comment>
        <comment>normalize the row</comment>
      </scope>
    </method>
    <comment>the following test triggered an ArrayIndexOutOfBoundsException in commons-math 2.0</comment>
  </class>
</source>
