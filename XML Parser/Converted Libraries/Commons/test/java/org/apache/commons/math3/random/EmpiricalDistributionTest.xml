<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.random">
  <import name="java.io.BufferedReader" />
  <import name="java.io.File" />
  <import name="java.io.IOException" />
  <import name="java.io.InputStreamReader" />
  <import name="java.net.URL" />
  <import name="java.util.ArrayList" />
  <import name="java.util.Arrays" />
  <import name="org.apache.commons.math3.TestUtils" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator" />
  <import name="org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator" />
  <import name="org.apache.commons.math3.distribution.AbstractRealDistribution" />
  <import name="org.apache.commons.math3.distribution.NormalDistribution" />
  <import name="org.apache.commons.math3.distribution.RealDistribution" />
  <import name="org.apache.commons.math3.distribution.RealDistributionAbstractTest" />
  <import name="org.apache.commons.math3.distribution.UniformRealDistribution" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.stat.descriptive.SummaryStatistics" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Before" />
  <import name="org.junit.Test" />
  <class name="EmpiricalDistributionTest" extends="RealDistributionAbstractTest" startLine="43">
    <javadoc>
      <text>* Test cases for the EmpiricalDistribution class</text>
      <version>$Id: EmpiricalDistributionTest.java 1461172 2013-03-26 15:11:18Z luc $</version>
    </javadoc>
    <declaration type="EmpiricalDistribution" name="empiricalDistribution" />
    <declaration type="EmpiricalDistribution" name="empiricalDistribution2" />
    <declaration type="File" name="file" />
    <declaration type="URL" name="url" />
    <declaration type="double[]" name="dataArray" />
    <declaration type="int" name="n" />
    <method type="void" name="setUp" startLine="59" endLine="87">
      <declaration type="ArrayList<Double>" name="list" />
      <scope startLine="65" endLine="77">
        <declaration type="BufferedReader" name="in" />
        <declaration type="String" name="str" />
        <scope startLine="72" endLine="74" />
        <comment>empiricalDistribution2 = new EmpiricalDistribution(100, new RandomDataImpl());  XXX Deprecated API</comment>
      </scope>
      <scope startLine="77" endLine="79" />
      <declaration type="int" name="i" />
      <scope startLine="83" endLine="86" />
      <comment>empiricalDistribution = new EmpiricalDistribution(100, new RandomDataImpl());  XXX Deprecated API</comment>
    </method>
    <javadoc>
      <text>* Test EmpiricalDistrbution.load() using sample data file.<br>
 * Check that the sampleCount, mu and sigma match data in
 * the sample data file. Also verify that load is idempotent.</text>
    </javadoc>
    <method type="void" name="testLoad" startLine="95" endLine="104">
      <declaration type="File" name="file" />
      <comment>Load from a URL</comment>
      <comment>Load again from a file (also verifies idempotency of load)</comment>
    </method>
    <method type="void" name="checkDistribution" startLine="106" endLine="115">
      <comment>testData File has 10000 values, with mean ~ 5.0, std dev ~ 1</comment>
      <comment>Make sure that loaded distribution matches this</comment>
      <comment>TODO: replace with statistical tests</comment>
    </method>
    <javadoc>
      <text>* Test EmpiricalDistrbution.load(double[]) using data taken from
 * sample data file.<br>
 * Check that the sampleCount, mu and sigma match data in
 * the sample data file.</text>
    </javadoc>
    <method type="void" name="testDoubleLoad" startLine="124" endLine="139">
      <declaration type="double[]" name="bounds" />
      <comment>testData File has 10000 values, with mean ~ 5.0, std dev ~ 1</comment>
      <comment>Make sure that loaded distribution matches this</comment>
      <comment>TODO: replace with statistical tests</comment>
    </method>
    <javadoc>
      <text>* Generate 1000 random values and make sure they look OK.<br>
 * Note that there is a non-zero (but very small) probability that
 * these tests will fail even if the code is working as designed.</text>
    </javadoc>
    <method type="void" name="testNext" startLine="147" endLine="150" />
    <javadoc>
      <text>* Make sure exception thrown if digest getNext is attempted
 * before loading empiricalDistribution.</text>
    </javadoc>
    <method type="void" name="testNexFail" startLine="157" endLine="165">
      <scope startLine="158" endLine="162" />
      <scope startLine="162" endLine="164">
        <comment>expected</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Make sure we can handle a grid size that is too fine</text>
    </javadoc>
    <method type="void" name="testGridTooFine" startLine="171" endLine="176" />
    <javadoc>
      <text>* How about too fat?</text>
    </javadoc>
    <method type="void" name="testGridTooFat" startLine="182" endLine="188">
      <comment>ridiculous tolerance; but ridiculous grid size</comment>
      <comment>really just checking to make sure we do not bomb</comment>
    </method>
    <javadoc>
      <text>* Test bin index overflow problem (BZ 36450)</text>
    </javadoc>
    <method type="void" name="testBinIndexOverflow" startLine="194" endLine="197">
      <declaration type="double[][]" name="x" />
    </method>
    <method type="void" name="testSerialization" startLine="200" endLine="210">
      <declaration type="EmpiricalDistribution" name="dist" />
      <declaration type="EmpiricalDistribution" name="dist2" />
      <comment>Empty</comment>
      <comment>Loaded</comment>
    </method>
    <method type="void" name="testLoadNullDoubleArray" startLine="213" endLine="215" />
    <method type="void" name="testLoadNullURL" startLine="218" endLine="220" />
    <method type="void" name="testLoadNullFile" startLine="223" endLine="225" />
    <javadoc>
      <text>* MATH-298</text>
    </javadoc>
    <method type="void" name="testGetBinUpperBounds" startLine="231" endLine="240">
      <declaration type="double[]" name="testData" />
      <declaration type="EmpiricalDistribution" name="dist" />
      <declaration type="double[]" name="expectedBinUpperBounds" />
      <declaration type="double[]" name="expectedGeneratorUpperBounds" />
      <declaration type="double" name="tol" />
    </method>
    <method type="void" name="testGeneratorConfig" startLine="243" endLine="257">
      <declaration type="double[]" name="testData" />
      <declaration type="RandomGenerator" name="generator" />
      <declaration type="EmpiricalDistribution" name="dist" />
      <scope startLine="249" endLine="251" />
      <comment>Verify no NPE with null generator argument</comment>
    </method>
    <method type="void" name="testReSeed" startLine="260" endLine="271">
      <declaration type="double[]" name="values" />
      <scope startLine="264" endLine="266" />
      <scope startLine="268" endLine="270" />
    </method>
    <method type="void" name="verifySame" startLine="273" endLine="283">
      <scope startLine="277" endLine="282">
        <scope startLine="278" endLine="280" />
      </scope>
    </method>
    <method type="void" name="tstGen" startLine="285" endLine="294">
      <declaration type="SummaryStatistics" name="stats" />
      <scope startLine="289" endLine="291" />
    </method>
    <method type="void" name="tstDoubleGen" startLine="296" endLine="305">
      <declaration type="SummaryStatistics" name="stats" />
      <scope startLine="300" endLine="302" />
    </method>
    <method type="RealDistribution" name="makeDistribution" startLine="310" endLine="319">
      <declaration type="double[]" name="sourceData" />
      <scope startLine="313" endLine="315" />
      <declaration type="EmpiricalDistribution" name="dist" />
      <comment>Create a uniform distribution on [0, 10,000]</comment>
    </method>
    <javadoc>
      <text>* Uniform bin mass = 10/10001 == mass of all but the first bin</text>
    </javadoc>
    <declaration type="double" name="binMass" />
    <javadoc>
      <text>* Mass of first bin = 11/10001</text>
    </javadoc>
    <declaration type="double" name="firstBinMass" />
    <method type="double[]" name="makeCumulativeTestPoints" startLine="328" endLine="331">
      <declaration type="double[][]" name="testPoints" />
    </method>
    <method type="double[]" name="makeCumulativeTestValues" startLine="335" endLine="359">
      <declaration type="double[]" name="testPoints" />
      <declaration type="double[]" name="cumValues" />
      <declaration type="EmpiricalDistribution" name="empiricalDistribution" />
      <declaration type="double[]" name="binBounds" />
      <scope startLine="345" endLine="357">
        <declaration type="int" name="bin" />
        <declaration type="double" name="lower" />
        <declaration type="double" name="upper" />
        <declaration type="double" name="bMinus" />
        <declaration type="RealDistribution" name="kernel" />
        <declaration type="double" name="withinBinKernelMass" />
        <declaration type="double" name="kernelCum" />
        <comment>Compute bMinus = sum or mass of bins below the bin containing the point</comment>
        <comment>First bin has mass 11 / 10000, the rest have mass 10 / 10000.</comment>
      </scope>
      <comment>Bins should be [0, 10], (10, 20], ..., (9990, 10000]
 Kernels should be N(4.5, 3.02765), N(14.5, 3.02765)...
 Each bin should have mass 1010000 = .001</comment>
    </method>
    <method type="double[]" name="makeDensityTestValues" startLine="362" endLine="378">
      <declaration type="double[]" name="testPoints" />
      <declaration type="double[]" name="densityValues" />
      <declaration type="EmpiricalDistribution" name="empiricalDistribution" />
      <declaration type="double[]" name="binBounds" />
      <scope startLine="367" endLine="376">
        <declaration type="int" name="bin" />
        <declaration type="double" name="lower" />
        <declaration type="double" name="upper" />
        <declaration type="RealDistribution" name="kernel" />
        <declaration type="double" name="withinBinKernelMass" />
        <declaration type="double" name="density" />
      </scope>
    </method>
    <javadoc>
      <text>* Modify test integration bounds from the default. Because the distribution
 * has discontinuities at bin boundaries, integrals spanning multiple bins
 * will face convergence problems.  Only test within-bin integrals and spans
 * across no more than 3 bin boundaries.</text>
    </javadoc>
    <method type="void" name="testDensityIntegrals" startLine="388" endLine="408">
      <declaration type="RealDistribution" name="distribution" />
      <declaration type="double" name="tol" />
      <declaration type="BaseAbstractUnivariateIntegrator" name="integrator" />
      <declaration type="UnivariateFunction" name="d" />
      <method type="double" name="value" startLine="394" endLine="396" />
      <declaration type="double[]" name="lower" />
      <declaration type="double[]" name="upper" />
      <scope startLine="400" endLine="407">
        <comment>Triangle integrals are very slow to converge</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Find the bin that x belongs (relative to {@link #makeDistribution()}).</text>
    </javadoc>
    <method type="int" name="findBin" startLine="413" endLine="419">
      <declaration type="double" name="nMinus" />
      <declaration type="int" name="bin" />
      <comment>Number of bins below x should be trunc(x/10)</comment>
      <comment>If x falls on a bin boundary, it is in the lower bin</comment>
    </method>
    <javadoc>
      <text>* Find the within-bin kernel for the bin with lower bound lower
 * and upper bound upper. All bins other than the first contain 10 points
 * exclusive of the lower bound and are centered at (lower + upper + 1) / 2.
 * The first bin includes its lower bound, 0, so has different mean and
 * standard deviation.</text>
    </javadoc>
    <method type="RealDistribution" name="findKernel" startLine="428" endLine="434">
      <scope startLine="429" endLine="431" />
      <scope startLine="431" endLine="433" />
    </method>
    <method type="void" name="testKernelOverrideConstant" startLine="437" endLine="460">
      <declaration type="EmpiricalDistribution" name="dist" />
      <declaration type="double[]" name="data" />
      <declaration type="double[]" name="values" />
      <scope startLine="443" endLine="445" />
      <declaration type="double" name="tol" />
      <comment>Bin masses concentrated on 2, 5, 8, 11, 14 <- effectively discrete uniform distribution over these</comment>
    </method>
    <method type="void" name="testKernelOverrideUniform" startLine="463" endLine="490">
      <declaration type="EmpiricalDistribution" name="dist" />
      <declaration type="double[]" name="data" />
      <declaration type="double[]" name="bounds" />
      <declaration type="double" name="tol" />
      <scope startLine="470" endLine="476">
        <declaration type="double" name="v" />
        <scope startLine="473" endLine="475" />
        <comment>Make sure v is not in the excluded range between bins - that is (bounds[i], bounds[i] + 1)</comment>
      </scope>
      <comment>Kernels are uniform distributions on [1,3], [4,6], [7,9], [10,12], [13,15]</comment>
    </method>
    <class name="ConstantKernelEmpiricalDistribution" extends="EmpiricalDistribution" startLine="493">
      <javadoc>
        <text>* Empirical distribution using a constant smoothing kernel.</text>
      </javadoc>
      <declaration type="long" name="serialVersionUID" />
      <method type="constructor" name="ConstantKernelEmpiricalDistribution" startLine="498" endLine="500" />
      <method type="RealDistribution" name="getKernel" startLine="502" endLine="504" />
      <class name="UniformKernelEmpiricalDistribution" extends="EmpiricalDistribution" startLine="507">
        <javadoc>
          <text>* Empirical distribution using a uniform smoothing kernel.</text>
        </javadoc>
        <method type="constructor" name="UniformKernelEmpiricalDistribution" startLine="511" endLine="513" />
        <method type="RealDistribution" name="getKernel" startLine="514" endLine="517" />
        <class name="ConstantDistribution" extends="AbstractRealDistribution" startLine="520">
          <javadoc>
            <text>* Distribution that takes just one value.</text>
          </javadoc>
          <declaration type="long" name="serialVersionUID" />
          <javadoc>
            <text>* Singleton value in the sample space</text>
          </javadoc>
          <declaration type="double" name="c" />
          <method type="constructor" name="ConstantDistribution" startLine="529" endLine="531" />
          <method type="double" name="density" startLine="533" endLine="535" />
          <method type="double" name="cumulativeProbability" startLine="537" endLine="539" />
          <method type="double" name="inverseCumulativeProbability" startLine="542" endLine="547">
            <scope startLine="543" endLine="545" />
          </method>
          <method type="double" name="getNumericalMean" startLine="549" endLine="551" />
          <method type="double" name="getNumericalVariance" startLine="553" endLine="555" />
          <method type="double" name="getSupportLowerBound" startLine="557" endLine="559" />
          <method type="double" name="getSupportUpperBound" startLine="561" endLine="563" />
          <method type="boolean" name="isSupportLowerBoundInclusive" startLine="565" endLine="567" />
          <method type="boolean" name="isSupportUpperBoundInclusive" startLine="569" endLine="571" />
          <method type="boolean" name="isSupportConnected" startLine="573" endLine="575" />
          <method type="double" name="sample" startLine="578" endLine="580" />
        </class>
      </class>
    </class>
    <comment>Setup for distribution tests</comment>
    <comment>Use constant distribution equal to bin mean within bin</comment>
  </class>
</source>
