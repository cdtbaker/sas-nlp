<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="java.lang.reflect.InvocationTargetException" />
  <import name="java.lang.reflect.Method" />
  <import name="java.util.Set" />
  <import name="java.util.HashSet" />
  <import name="java.util.Iterator" />
  <import name="java.util.Random" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.function.Sin" />
  <import name="org.apache.commons.math3.exception.MathUnsupportedOperationException" />
  <import name="org.apache.commons.math3.linear.RealVector.Entry" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="UnmodifiableRealVectorAbstractTest" startLine="33">
    <javadoc>
      <text>* This is an abstract test of the {@link RealVector#unmodifiableRealVector(RealVector) unmodifiable vector}implementation. These unmodifiable vectors decorate a (modifiable){@link RealVector}; therefore, a new implementation of this abstract
 * test should be considered for each implementation of{@link RealVector}.</text>
      <version>$Id$</version>
    </javadoc>
    <javadoc>
      <text>* The dimension of the randomly generated vectors.</text>
    </javadoc>
    <declaration type="int" name="DIM" />
    <javadoc>
      <text>* Absolute tolerance.</text>
    </javadoc>
    <declaration type="double" name="EPS" />
    <javadoc>
      <text>* The list of methods which are excluded from the general test{@link #testAllButExcluded()}.</text>
    </javadoc>
    <declaration type="Set<String>" name="EXCLUDE" />
    <javadoc>
      <text>* The random number generator (always initialized with the same seed.</text>
    </javadoc>
    <declaration type="Random" name="RANDOM" />
    <scope startLine="57" endLine="75">
      <scope startLine="71" endLine="73" />
      <comment>Excluded because they are inherited from "Object".</comment>
    </scope>
    <javadoc>
      <text>* Returns {@code true} if the specified {@code double} are equal (within a
 * given tolerance).</text>
      <param>x First {@code double}.</param>
      <param>y Second {@code double}.</param>
      <return>{@code true} if {@code x} and {@code y} are equal.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="85" endLine="95">
      <scope startLine="86" endLine="88" />
      <scope startLine="88" endLine="90" />
      <scope startLine="90" endLine="92" />
      <scope startLine="92" endLine="94" />
    </method>
    <javadoc>
      <text>* Returns {@code true} if the specified {@code double} arrays are equal
 * (within a given tolerance).</text>
      <param>x First array.</param>
      <param>y Second array.</param>
      <return>{@code true} if {@code x} and {@code y} are equal.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="105" endLine="116">
      <scope startLine="106" endLine="108" />
      <declaration type="int" name="n" />
      <scope startLine="110" endLine="114">
        <scope startLine="111" endLine="113" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns {@code true} if the specified {@code RealVector} are equal
 * (within a given tolerance).</text>
      <param>x First vector.</param>
      <param>y Second vector.</param>
      <return>{@code true} if {@code x} and {@code y} are equal.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="126" endLine="137">
      <scope startLine="127" endLine="129" />
      <declaration type="int" name="n" />
      <scope startLine="131" endLine="135">
        <scope startLine="132" endLine="134" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns {@code true} if the specified {@code RealVector} is equal to the
 * specified {@code double} array (within a given tolerance).</text>
      <param>x Vector.</param>
      <param>y Array.</param>
      <return>{@code true} if {@code x} and {@code y} are equal.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="147" endLine="158">
      <scope startLine="148" endLine="150" />
      <declaration type="int" name="n" />
      <scope startLine="152" endLine="156">
        <scope startLine="153" endLine="155" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns {@code true} if the specified {@code RealMatrix} are equal
 * (within a given tolerance).</text>
      <param>x First matrix.</param>
      <param>y Second matrix.</param>
      <return>{@code true} if {@code x} and {@code y} are equal.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="168" endLine="185">
      <scope startLine="169" endLine="171" />
      <scope startLine="172" endLine="174" />
      <declaration type="int" name="rows" />
      <declaration type="int" name="cols" />
      <scope startLine="177" endLine="183">
        <scope startLine="178" endLine="182">
          <scope startLine="179" endLine="181" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Returns {@code true} if the specified {@code Object} are equal.</text>
      <param>x First object.</param>
      <param>y Second object.</param>
      <return>{@code true} if {@code x} and {@code y} are equal.</return>
      <throws>IllegalArgumentException if {@code x} and {@code y} could
 * not be compared.</throws>
    </javadoc>
    <method type="boolean" name="equals" startLine="196" endLine="244">
      <scope startLine="197" endLine="204">
        <scope startLine="198" endLine="201" />
        <scope startLine="201" endLine="203" />
      </scope>
      <scope startLine="205" endLine="211">
        <scope startLine="206" endLine="208" />
        <scope startLine="208" endLine="210" />
      </scope>
      <scope startLine="211" endLine="218">
        <scope startLine="212" endLine="215" />
        <scope startLine="215" endLine="217" />
      </scope>
      <scope startLine="218" endLine="226">
        <scope startLine="219" endLine="221" />
        <scope startLine="221" endLine="223" />
        <scope startLine="223" endLine="225" />
      </scope>
      <scope startLine="226" endLine="234">
        <scope startLine="227" endLine="229" />
        <scope startLine="229" endLine="231" />
        <scope startLine="231" endLine="233" />
      </scope>
      <scope startLine="234" endLine="240">
        <scope startLine="235" endLine="237" />
        <scope startLine="237" endLine="239" />
      </scope>
      <scope startLine="240" endLine="243" />
    </method>
    <method name="createVector" type="RealVector" startLine="246" endLine="252" />
    <javadoc>
      <text>* Creates a new random vector of a specified type. This vector is then to
 * be wrapped in an unmodifiable vector.</text>
      <return>a new random vector.</return>
    </javadoc>
    <javadoc>
      <text>* Creates a new random object of the specified type.</text>
      <param>c Class of the object to be created.</param>
      <return>a new random object.</return>
      <throws>IllegalArgumentException if the specified class is not
 * recognized by this method.</throws>
    </javadoc>
    <method type="Object" name="createParameter" startLine="262" endLine="280">
      <scope startLine="263" endLine="265" />
      <scope startLine="265" endLine="267" />
      <scope startLine="267" endLine="273">
        <declaration type="double[]" name="v" />
        <scope startLine="269" endLine="271" />
      </scope>
      <scope startLine="273" endLine="275" />
      <scope startLine="275" endLine="277" />
      <scope startLine="277" endLine="279" />
    </method>
    <javadoc>
      <text>* This is the general test of most methods in the{@link RealVector#unmodifiableRealVector(RealVector) unmodifiable vector}.
 * It works as follows.
 * First, an unmodifiable view of a copy of the specified random vector{@code u} is created: this defines {@code v}. Then the <em>same</em>
 * method {@code m} is invoked on {@code u} and {@code v}, with randomly
 * generated parameters {@code args}.
 * If it turns out that {@code u} has changed after the call of method{@code m}, then this test checks that the call of this method on{@code v} resulted in a {@link MathUnsupportedOperationException}. If{@code u} was not modified, then this test checks that the results
 * returned by the call of method {@code m} on {@code u} and {@code v}returned the same result.</text>
      <param>m Method to be tested.</param>
      <param>u Random vector from which the unmodifiable view is to be
 * constructed.</param>
      <param>args Arguments to be passed to method {@code m}.</param>
    </javadoc>
    <method type="void" name="callMethod" startLine="307" endLine="329">
      <declaration type="RealVector" name="uu" />
      <declaration type="RealVector" name="v" />
      <declaration type="Object" name="exp" />
      <scope startLine="311" endLine="318">
        <declaration type="Object" name="act" />
      </scope>
      <scope startLine="318" endLine="328">
        <declaration type="boolean" name="flag" />
        <scope startLine="320" endLine="322" />
        <scope startLine="322" endLine="326">
          <scope startLine="323" endLine="325" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* This test calls {@link #callMethod(Method,RealVector,Object)} on
 * every method defined in interface {@link RealVector}. It generates the
 * appropriate random arguments. Some methods are manually excluded (see{@link #EXCLUDE}), they must be handled by separate tests.</text>
    </javadoc>
    <method type="void" name="testAllButExcluded" startLine="341" endLine="355">
      <declaration type="Method[]" name="method" />
      <scope startLine="343" endLine="354">
        <declaration type="Method" name="m" />
        <scope startLine="345" endLine="353">
          <declaration type="RealVector" name="u" />
          <declaration type="Class<?>[]" name="paramType" />
          <declaration type="Object[]" name="param" />
          <scope startLine="349" endLine="351" />
        </scope>
      </scope>
    </method>
    <method type="void" name="testGetEntry" startLine="358" endLine="364">
      <declaration type="RealVector" name="u" />
      <declaration type="RealVector" name="v" />
      <scope startLine="361" endLine="363" />
    </method>
    <method type="void" name="testSetEntry" startLine="367" endLine="373">
      <declaration type="RealVector" name="u" />
      <declaration type="RealVector" name="v" />
      <scope startLine="370" endLine="372" />
    </method>
    <method type="void" name="testAddToEntry" startLine="376" endLine="382">
      <declaration type="RealVector" name="u" />
      <declaration type="RealVector" name="v" />
      <scope startLine="379" endLine="381" />
    </method>
    <method type="void" name="testGetSubVector" startLine="385" endLine="395">
      <declaration type="RealVector" name="u" />
      <declaration type="RealVector" name="v" />
      <scope startLine="388" endLine="394">
        <scope startLine="389" endLine="393">
          <declaration type="RealVector" name="exp" />
          <declaration type="RealVector" name="act" />
        </scope>
      </scope>
    </method>
    <method type="void" name="testSetSubVector" startLine="398" endLine="402">
      <declaration type="RealVector" name="u" />
      <declaration type="RealVector" name="v" />
    </method>
    <method type="void" name="testIterator" startLine="405" endLine="428">
      <declaration type="RealVector" name="u" />
      <declaration type="Iterator<Entry>" name="i" />
      <declaration type="RealVector" name="v" />
      <declaration type="Iterator<Entry>" name="j" />
      <declaration type="boolean" name="flag" />
      <scope startLine="411" endLine="426">
        <declaration type="Entry" name="exp" />
        <declaration type="Entry" name="act" />
        <scope startLine="420" endLine="422" />
        <scope startLine="422" endLine="424" />
      </scope>
    </method>
    <method type="void" name="testSparseIterator" startLine="431" endLine="454">
      <declaration type="RealVector" name="u" />
      <declaration type="Iterator<Entry>" name="i" />
      <declaration type="RealVector" name="v" />
      <declaration type="Iterator<Entry>" name="j" />
      <declaration type="boolean" name="flag" />
      <scope startLine="437" endLine="452">
        <declaration type="Entry" name="exp" />
        <declaration type="Entry" name="act" />
        <scope startLine="446" endLine="448" />
        <scope startLine="448" endLine="450" />
      </scope>
    </method>
  </class>
</source>
