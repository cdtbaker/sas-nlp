<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive">
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.TestUtils" />
  <import name="org.apache.commons.math3.distribution.IntegerDistribution" />
  <import name="org.apache.commons.math3.distribution.UniformIntegerDistribution" />
  <import name="org.apache.commons.math3.distribution.RealDistribution" />
  <import name="org.apache.commons.math3.distribution.NormalDistribution" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="UnivariateStatisticAbstractTest" startLine="32">
    <javadoc>
      <text>* Test cases for the {@link UnivariateStatistic} class.</text>
      <version>$Id: UnivariateStatisticAbstractTest.java 1368738 2012-08-02 22:18:08Z erans $</version>
    </javadoc>
    <declaration type="double" name="mean" />
    <declaration type="double" name="geoMean" />
    <declaration type="double" name="var" />
    <declaration type="double" name="std" />
    <declaration type="double" name="skew" />
    <declaration type="double" name="kurt" />
    <declaration type="double" name="min" />
    <declaration type="double" name="max" />
    <declaration type="double" name="median" />
    <declaration type="double" name="percentile5" />
    <declaration type="double" name="percentile95" />
    <declaration type="double" name="product" />
    <declaration type="double" name="sumLog" />
    <declaration type="double" name="sumSq" />
    <declaration type="double" name="sum" />
    <declaration type="double" name="secondMoment" />
    <declaration type="double" name="thirdMoment" />
    <declaration type="double" name="fourthMoment" />
    <declaration type="double" name="weightedMean" />
    <declaration type="double" name="weightedVar" />
    <declaration type="double" name="weightedStd" />
    <declaration type="double" name="weightedProduct" />
    <declaration type="double" name="weightedSum" />
    <declaration type="double" name="tolerance" />
    <declaration type="double[]" name="testArray" />
    <declaration type="double[]" name="testWeightsArray" />
    <declaration type="double[]" name="identicalWeightsArray" />
    <declaration type="double[]" name="unitWeightsArray" />
    <method name="getUnivariateStatistic" type="UnivariateStatistic" startLine="89" endLine="89" />
    <method name="expectedValue" type="double" startLine="91" endLine="91" />
    <method type="double" name="getTolerance" startLine="93" endLine="95" />
    <method type="void" name="testEvaluation" startLine="98" endLine="103" />
    <method type="void" name="testEvaluateArraySegment" startLine="106" endLine="117">
      <declaration type="UnivariateStatistic" name="stat" />
      <declaration type="double[]" name="arrayZero" />
      <declaration type="double[]" name="arrayOne" />
      <declaration type="double[]" name="arrayEnd" />
    </method>
    <method type="void" name="testEvaluateArraySegmentWeighted" startLine="120" endLine="146">
      <declaration type="UnivariateStatistic" name="statistic" />
      <scope startLine="124" endLine="126" />
      <declaration type="WeightedEvaluation" name="stat" />
      <declaration type="double[]" name="arrayZero" />
      <declaration type="double[]" name="weightZero" />
      <declaration type="double[]" name="arrayOne" />
      <declaration type="double[]" name="weightOne" />
      <declaration type="double[]" name="arrayEnd" />
      <declaration type="double[]" name="weightEnd" />
      <comment>See if this statistic computes weighted statistics</comment>
      <comment>If not, skip this test</comment>
    </method>
    <method type="void" name="testCopy" startLine="149" endLine="156">
      <declaration type="UnivariateStatistic" name="original" />
      <declaration type="UnivariateStatistic" name="copy" />
    </method>
    <javadoc>
      <text>* Tests consistency of weighted statistic computation.
 * For statistics that support weighted evaluation, this test case compares
 * the result of direct computation on an array with repeated values with
 * a weighted computation on the corresponding (shorter) array with each
 * value appearing only once but with a weight value equal to its multiplicity
 * in the repeating array.</text>
    </javadoc>
    <method type="void" name="testWeightedConsistency" startLine="168" endLine="224">
      <declaration type="UnivariateStatistic" name="statistic" />
      <scope startLine="173" endLine="175" />
      <declaration type="int" name="len" />
      <declaration type="double" name="mu" />
      <declaration type="double" name="sigma" />
      <declaration type="double[]" name="values" />
      <declaration type="double[]" name="weights" />
      <declaration type="int[]" name="intWeights" />
      <declaration type="IntegerDistribution" name="weightDist" />
      <scope startLine="188" endLine="191" />
      <declaration type="RealDistribution" name="valueDist" />
      <declaration type="List<Double>" name="valuesList" />
      <scope startLine="198" endLine="204">
        <declaration type="double" name="value" />
        <scope startLine="201" endLine="203" />
      </scope>
      <declaration type="int" name="sumWeights" />
      <declaration type="double[]" name="repeatedValues" />
      <scope startLine="209" endLine="211" />
      <declaration type="WeightedEvaluation" name="weightedStatistic" />
      <comment>See if this statistic computes weighted statistics</comment>
      <comment>If not, skip this test</comment>
      <comment>Create arrays of values and corresponding integral weights</comment>
      <comment>and longer array with values repeated according to the weights</comment>
      <comment>length of values array</comment>
      <comment>mean of test data</comment>
      <comment>std dev of test data</comment>
      <comment>Fill weights array with random int values between 1 and 5</comment>
      <comment>Fill values array with random data from N(mu, sigma)</comment>
      <comment>and fill valuesList with values from values array with</comment>
      <comment>values[i] repeated weights[i] times, each i</comment>
      <comment>Dump valuesList into repeatedValues array</comment>
      <comment>Compare result of weighted statistic computation with direct computation</comment>
      <comment>on array of repeated values</comment>
      <comment>Check consistency of weighted evaluation methods</comment>
    </method>
  </class>
</source>
