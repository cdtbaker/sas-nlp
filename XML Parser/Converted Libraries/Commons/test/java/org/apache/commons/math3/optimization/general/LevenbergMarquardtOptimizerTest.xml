<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.general">
  <import name="java.io.Serializable" />
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.analysis.differentiation.DerivativeStructure" />
  <import name="org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction" />
  <import name="org.apache.commons.math3.exception.ConvergenceException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.geometry.euclidean.twod.Vector2D" />
  <import name="org.apache.commons.math3.linear.SingularMatrixException" />
  <import name="org.apache.commons.math3.optimization.PointVectorValuePair" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.Precision" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <import name="org.junit.Ignore" />
  <class name="LevenbergMarquardtOptimizerTest" extends="AbstractLeastSquaresOptimizerAbstractTest" startLine="38">
    <javadoc>
      <text>* <p>Some of the unit tests are re-implementations of the MINPACK <a
 * href="http://www.netlib.org/minpack/ex/file17">file17</a> and <a
 * href="http://www.netlib.org/minpack/ex/file22">file22</a> test files.
 * The redistribution policy for MINPACK is available <a
 * href="http://www.netlib.org/minpack/disclaimer">here</a>, for
 * convenience, it is reproduced below.</p>
 * <table border="0" width="80%" cellpadding="10" align="center" bgcolor="#E0E0E0">
 * <tr><td>
 * Minpack Copyright Notice (1999) University of Chicago.
 * All rights reserved
 * </td></tr>
 * <tr><td>
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * <ol>
 * <li>Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.</li>
 * <li>Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following
 * disclaimer in the documentation and/or other materials provided
 * with the distribution.</li>
 * <li>The end-user documentation included with the redistribution, if any,
 * must include the following acknowledgment:
 * <code>This product includes software developed by the University of
 * Chicago, as Operator of Argonne National Laboratory.</code>
 * Alternately, this acknowledgment may appear in the software itself,
 * if and wherever such third-party acknowledgments normally appear.</li>
 * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED "AS IS"
 * WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE
 * UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND
 * THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE
 * OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY
 * OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR
 * USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF
 * THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)
 * DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
 * UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL
 * BE CORRECTED.</strong></li>
 * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
 * HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF
 * ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,
 * INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF
 * ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF
 * PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER
 * SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT
 * (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,
 * EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
 * POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
 * <ol></td></tr>
 * </table></text>
      <author>Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)</author>
      <author>Burton S. Garbow (original fortran minpack tests)</author>
      <author>Kenneth E. Hillstrom (original fortran minpack tests)</author>
      <author>Jorge J. More (original fortran minpack tests)</author>
      <author>Luc Maisonobe (non-minpack tests and minpack tests Java translation)</author>
    </javadoc>
    <method type="AbstractLeastSquaresOptimizer" name="createOptimizer" startLine="103" endLine="105" />
    <method type="void" name="testNonInvertible" startLine="109" endLine="125">
      <declaration type="LinearProblem[]" name="problem" />
      <declaration type="AbstractLeastSquaresOptimizer" name="optimizer" />
      <declaration type="PointVectorValuePair[]" name="optimum" />
      <comment>Overrides the method from parent class, since the default singularity
 threshold (1e-14) does not trigger the expected exception.</comment>
    </method>
    <method type="void" name="testControlParameters" startLine="128" endLine="140">
      <declaration type="CircleVectorial" name="circle" />
    </method>
    <method type="void" name="checkEstimate" startLine="145" endLine="162">
      <scope startLine="146" endLine="157">
        <declaration type="LevenbergMarquardtOptimizer" name="optimizer" />
      </scope>
      <scope startLine="157" endLine="159" />
      <scope startLine="159" endLine="161" />
    </method>
    <method type="void" name="testMath199" startLine="166" endLine="184">
      <scope startLine="167" endLine="181">
        <declaration type="QuadraticProblem" name="problem" />
        <declaration type="LevenbergMarquardtOptimizer" name="optimizer" />
      </scope>
      <scope startLine="181" endLine="183">
        <comment>expected behavior</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Non-linear test case: fitting of decay curve (from Chapter 8 of
 * Bevington's textbook, "Data reduction and analysis for the physical sciences").
 * XXX The expected ("reference") values may not be accurate and the tolerance too
 * relaxed for this test to be currently really useful (the issue is under
 * investigation).</text>
    </javadoc>
    <method type="void" name="testBevington" startLine="194" endLine="260">
      <declaration type="double[][]" name="dataPoints" />
      <declaration type="BevingtonProblem" name="problem" />
      <declaration type="int" name="len" />
      <declaration type="double[]" name="weights" />
      <scope startLine="216" endLine="221" />
      <declaration type="LevenbergMarquardtOptimizer" name="optimizer" />
      <declaration type="PointVectorValuePair[]" name="optimum" />
      <declaration type="double[]" name="solution" />
      <declaration type="double[]" name="expectedSolution" />
      <declaration type="double[][]" name="covarMatrix" />
      <declaration type="double[][]" name="expectedCovarMatrix" />
      <declaration type="int" name="numParams" />
      <scope startLine="245" endLine="248">
        <declaration type="double" name="error" />
      </scope>
      <scope startLine="252" endLine="259">
        <scope startLine="253" endLine="258" />
      </scope>
      <comment>column 1 = times</comment>
      <comment>column 2 = measured counts</comment>
      <comment>Check that the computed solution is within the reference error range.</comment>
      <comment>Check that each entry of the computed covariance matrix is within 10%</comment>
      <comment>of the reference matrix entry.</comment>
    </method>
    <method type="void" name="testCircleFitting2" startLine="263" endLine="311">
      <declaration type="double" name="xCenter" />
      <declaration type="double" name="yCenter" />
      <declaration type="double" name="xSigma" />
      <declaration type="double" name="ySigma" />
      <declaration type="double" name="radius" />
      <declaration type="long" name="seed" />
      <declaration type="RandomCirclePointGenerator" name="factory" />
      <declaration type="CircleProblem" name="circle" />
      <declaration type="int" name="numPoints" />
      <scope startLine="278" endLine="281">
        <comment>System.out.println(p.x + " " + p.y);</comment>
      </scope>
      <declaration type="double[]" name="init" />
      <declaration type="LevenbergMarquardtOptimizer" name="optimizer" />
      <declaration type="PointVectorValuePair" name="optimum" />
      <declaration type="double[]" name="paramFound" />
      <declaration type="double[][]" name="covMatrix" />
      <declaration type="double[]" name="asymptoticStandardErrorFound" />
      <declaration type="double[]" name="sigmaFound" />
      <scope startLine="298" endLine="303">
        <comment>System.out.println("i=" + i + " value=" + paramFound[i]</comment>
        <comment>+ " sigma=" + sigmaFound[i]</comment>
        <comment>+ " ase=" + asymptoticStandardErrorFound[i]);</comment>
      </scope>
      <comment>The test is extremely sensitive to the seed.</comment>
      <comment>First guess for the center's coordinates and radius.</comment>
      <comment>Retrieve errors estimation.</comment>
      <comment>System.out.println("chi2=" + optimizer.getChiSquare());</comment>
      <comment>Check that the parameters are found within the assumed error bars.</comment>
    </method>
    <class name="QuadraticProblem" startLine="313">
      <implements name="MultivariateDifferentiableVectorFunction" />
      <implements name="Serializable" />
      <declaration type="long" name="serialVersionUID" />
      <declaration type="List<Double>" name="x" />
      <declaration type="List<Double>" name="y" />
      <method type="constructor" name="QuadraticProblem" startLine="319" endLine="322" />
      <method type="void" name="addPoint" startLine="324" endLine="327" />
      <method type="double[]" name="value" startLine="329" endLine="335">
        <declaration type="double[]" name="values" />
        <scope startLine="331" endLine="333" />
      </method>
      <method type="DerivativeStructure[]" name="value" startLine="337" endLine="343">
        <declaration type="DerivativeStructure[]" name="values" />
        <scope startLine="339" endLine="341" />
      </method>
      <class name="BevingtonProblem" startLine="347">
        <implements name="MultivariateDifferentiableVectorFunction" />
        <declaration type="List<Double>" name="time" />
        <declaration type="List<Double>" name="count" />
        <method type="constructor" name="BevingtonProblem" startLine="352" endLine="355" />
        <method type="void" name="addPoint" startLine="357" endLine="360" />
        <method type="double[]" name="value" startLine="362" endLine="371">
          <declaration type="double[]" name="values" />
          <scope startLine="364" endLine="369">
            <declaration type="double" name="t" />
          </scope>
        </method>
        <method type="DerivativeStructure[]" name="value" startLine="373" endLine="382">
          <declaration type="DerivativeStructure[]" name="values" />
          <scope startLine="375" endLine="380">
            <declaration type="double" name="t" />
          </scope>
        </method>
      </class>
    </class>
    <comment>Test is skipped because it fails with the latest code update.</comment>
  </class>
</source>
