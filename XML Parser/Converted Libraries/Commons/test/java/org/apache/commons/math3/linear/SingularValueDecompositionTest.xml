<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="java.io.BufferedReader" />
  <import name="java.io.DataInputStream" />
  <import name="java.io.IOException" />
  <import name="java.io.InputStreamReader" />
  <import name="java.util.Random" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="SingularValueDecompositionTest" startLine="30">
    <declaration type="double[][]" name="testSquare" />
    <declaration type="double[][]" name="testNonSquare" />
    <declaration type="double" name="normTolerance" />
    <method type="void" name="testMoreRows" startLine="47" endLine="59">
      <declaration type="double[]" name="singularValues" />
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <declaration type="Random" name="r" />
      <declaration type="SingularValueDecomposition" name="svd" />
      <declaration type="double[]" name="computedSV" />
      <scope startLine="56" endLine="58" />
    </method>
    <method type="void" name="testMoreColumns" startLine="62" endLine="74">
      <declaration type="double[]" name="singularValues" />
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <declaration type="Random" name="r" />
      <declaration type="SingularValueDecomposition" name="svd" />
      <declaration type="double[]" name="computedSV" />
      <scope startLine="71" endLine="73" />
    </method>
    <javadoc>
      <text>* test dimensions</text>
    </javadoc>
    <method type="void" name="testDimensions" startLine="78" endLine="90">
      <declaration type="RealMatrix" name="matrix" />
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="SingularValueDecomposition" name="svd" />
    </method>
    <javadoc>
      <text>* Test based on a dimension 4 Hadamard matrix.</text>
    </javadoc>
    <method type="void" name="testHadamard" startLine="94" endLine="127">
      <declaration type="RealMatrix[]" name="matrix" />
      <declaration type="SingularValueDecomposition" name="svd" />
      <declaration type="RealMatrix[]" name="fullCovariance" />
      <declaration type="RealMatrix[]" name="halfCovariance" />
    </method>
    <javadoc>
      <text>* test A = USVt</text>
    </javadoc>
    <method type="void" name="testAEqualUSVt" startLine="131" endLine="135" />
    <method type="void" name="checkAEqualUSVt" startLine="137" endLine="145">
      <declaration type="SingularValueDecomposition" name="svd" />
      <declaration type="RealMatrix" name="u" />
      <declaration type="RealMatrix" name="s" />
      <declaration type="RealMatrix" name="v" />
      <declaration type="double" name="norm" />
    </method>
    <javadoc>
      <text>* test that U is orthogonal</text>
    </javadoc>
    <method type="void" name="testUOrthogonal" startLine="149" endLine="153" />
    <javadoc>
      <text>* test that V is orthogonal</text>
    </javadoc>
    <method type="void" name="testVOrthogonal" startLine="157" endLine="161" />
    <method type="void" name="checkOrthogonal" startLine="163" endLine="167">
      <declaration type="RealMatrix" name="mTm" />
      <declaration type="RealMatrix" name="id" />
    </method>
    <javadoc>
      <text>* test matrices values</text>
    </javadoc>
    <method type="void" name="testMatricesValues1" startLine="172" endLine="201">
      <declaration type="SingularValueDecomposition" name="svd" />
      <declaration type="RealMatrix[]" name="uRef" />
      <declaration type="RealMatrix[]" name="sRef" />
      <declaration type="RealMatrix[]" name="vRef" />
      <declaration type="RealMatrix" name="u" />
      <declaration type="RealMatrix" name="s" />
      <declaration type="RealMatrix" name="v" />
      <comment>check values against known references</comment>
      <comment>check the same cached instance is returned the second time</comment>
    </method>
    <javadoc>
      <text>* test matrices values</text>
    </javadoc>
    <method type="void" name="useless_testMatricesValues2" startLine="206" endLine="240">
      <declaration type="RealMatrix[]" name="uRef" />
      <declaration type="RealMatrix[]" name="sRef" />
      <declaration type="RealMatrix[]" name="vRef" />
      <declaration type="SingularValueDecomposition" name="svd" />
      <declaration type="RealMatrix" name="u" />
      <declaration type="RealMatrix" name="s" />
      <declaration type="RealMatrix" name="v" />
      <comment>check values against known references</comment>
      <comment>check the same cached instance is returned the second time</comment>
    </method>
    <javadoc>
      <text>* test MATH-465</text>
    </javadoc>
    <method type="void" name="testRank" startLine="244" endLine="249">
      <declaration type="double[][]" name="d" />
      <declaration type="RealMatrix" name="m" />
      <declaration type="SingularValueDecomposition" name="svd" />
    </method>
    <javadoc>
      <text>* test MATH-583</text>
    </javadoc>
    <method type="void" name="testStability1" startLine="253" endLine="261">
      <declaration type="RealMatrix" name="m" />
      <scope startLine="256" endLine="258" />
      <scope startLine="258" endLine="260" />
    </method>
    <javadoc>
      <text>* test MATH-327</text>
    </javadoc>
    <method type="void" name="testStability2" startLine="265" endLine="273">
      <declaration type="RealMatrix" name="m" />
      <scope startLine="268" endLine="270" />
      <scope startLine="270" endLine="272" />
    </method>
    <method type="void" name="loadRealMatrix" startLine="275" endLine="292">
      <scope startLine="276" endLine="291">
        <declaration type="DataInputStream" name="in" />
        <declaration type="BufferedReader" name="br" />
        <declaration type="String" name="strLine" />
        <declaration type="int" name="row" />
        <scope startLine="281" endLine="289">
          <scope startLine="282" endLine="288">
            <declaration type="int" name="col" />
            <scope startLine="284" endLine="286" />
          </scope>
        </scope>
      </scope>
      <scope startLine="291" endLine="291" />
    </method>
    <javadoc>
      <text>* test condition number</text>
    </javadoc>
    <method type="void" name="testConditionNumber" startLine="296" endLine="301">
      <declaration type="SingularValueDecomposition" name="svd" />
      <comment>replace 1.0e-15 with 1.5e-15</comment>
    </method>
    <method type="void" name="testInverseConditionNumber" startLine="304" endLine="308">
      <declaration type="SingularValueDecomposition" name="svd" />
    </method>
    <method type="RealMatrix" name="createTestMatrix" startLine="311" endLine="317">
      <declaration type="RealMatrix" name="u" />
      <declaration type="RealMatrix" name="d" />
      <declaration type="RealMatrix" name="v" />
    </method>
    <method type="void" name="testIssue947" startLine="320" endLine="329">
      <declaration type="double[][][]" name="nans" />
      <declaration type="RealMatrix" name="m" />
      <declaration type="SingularValueDecomposition" name="svd" />
    </method>
    <comment>This test is useless since whereas the columns of U and V are linked</comment>
    <comment>together, the actual triplet (U,S,V) is not uniquely defined.</comment>
    <comment>This test is useless since whereas the columns of U and V are linked</comment>
    <comment>together, the actual triplet (U,S,V) is not uniquely defined.</comment>
  </class>
</source>
