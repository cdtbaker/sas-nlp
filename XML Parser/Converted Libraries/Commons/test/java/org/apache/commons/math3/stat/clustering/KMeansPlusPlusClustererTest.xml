<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.clustering">
  <import name="java.util.ArrayList" />
  <import name="java.util.Arrays" />
  <import name="java.util.Collection" />
  <import name="java.util.List" />
  <import name="java.util.Random" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="KMeansPlusPlusClustererTest" startLine="31">
    <method type="void" name="dimension2" startLine="34" endLine="97">
      <declaration type="KMeansPlusPlusClusterer<EuclideanIntegerPoint>" name="transformer" />
      <declaration type="EuclideanIntegerPoint[][]" name="points" />
      <declaration type="List<Cluster<EuclideanIntegerPoint>>" name="clusters" />
      <declaration type="boolean" name="cluster1Found" />
      <declaration type="boolean" name="cluster2Found" />
      <declaration type="boolean" name="cluster3Found" />
      <scope startLine="74" endLine="92">
        <declaration type="int[]" name="center" />
        <scope startLine="76" endLine="81" />
        <scope startLine="81" endLine="86" />
        <scope startLine="86" endLine="91" />
      </scope>
      <comment>first expected cluster</comment>
      <comment>second expected cluster</comment>
      <comment>third expected cluster</comment>
    </method>
    <javadoc>
      <text>* JIRA: MATH-305
 * Two points, one cluster, one iteration</text>
    </javadoc>
    <method type="void" name="testPerformClusterAnalysisDegenerate" startLine="105" endLine="119">
      <declaration type="KMeansPlusPlusClusterer<EuclideanIntegerPoint>" name="transformer" />
      <declaration type="EuclideanIntegerPoint[][]" name="points" />
      <declaration type="List<Cluster<EuclideanIntegerPoint>>" name="clusters" />
      <declaration type="EuclideanIntegerPoint[]" name="pt1" />
      <declaration type="EuclideanIntegerPoint[]" name="pt2" />
    </method>
    <method type="void" name="testCertainSpace" startLine="122" endLine="168">
      <declaration type="KMeansPlusPlusClusterer.EmptyClusterStrategy[]" name="strategies" />
      <scope startLine="128" endLine="166">
        <declaration type="KMeansPlusPlusClusterer<EuclideanIntegerPoint>" name="transformer" />
        <declaration type="int" name="numberOfVariables" />
        <declaration type="int" name="position1" />
        <declaration type="int" name="position2" />
        <declaration type="int" name="position3" />
        <declaration type="int" name="position4" />
        <declaration type="int" name="multiplier" />
        <declaration type="EuclideanIntegerPoint[]" name="breakingPoints" />
        <scope startLine="142" endLine="154">
          <declaration type="int[]" name="points" />
          <scope startLine="145" endLine="147" />
          <declaration type="EuclideanIntegerPoint" name="euclideanIntegerPoint" />
        </scope>
        <scope startLine="156" endLine="165">
          <declaration type="List<Cluster<EuclideanIntegerPoint>>" name="clusters" />
          <declaration type="int" name="sum" />
          <scope startLine="161" endLine="163" />
        </scope>
        <comment>initialise testvalues</comment>
        <comment>testvalues will be multiplied</comment>
        <comment>define the space which will break the cluster algorithm</comment>
        <comment>multiply the values</comment>
      </scope>
    </method>
    <class name="CloseIntegerPoint" startLine="170">
      <implements name="Clusterable<CloseIntegerPoint>" />
      <javadoc>
        <text>* A helper class for testSmallDistances(). This class is similar to EuclideanIntegerPoint, but
 * it defines a different distanceFrom() method that tends to return distances less than 1.</text>
      </javadoc>
      <method type="constructor" name="CloseIntegerPoint" startLine="175" endLine="177" />
      <method type="double" name="distanceFrom" startLine="179" endLine="181" />
      <method type="CloseIntegerPoint" name="centroidOf" startLine="183" endLine="190">
        <declaration type="Collection<EuclideanIntegerPoint>" name="euclideanPoints" />
        <scope startLine="186" endLine="188" />
      </method>
      <method type="boolean" name="equals" startLine="193" endLine="200">
        <scope startLine="194" endLine="196" />
        <declaration type="CloseIntegerPoint" name="p" />
      </method>
      <method type="int" name="hashCode" startLine="203" endLine="205" />
      <declaration type="EuclideanIntegerPoint" name="euclideanPoint" />
      <javadoc>
        <text>* Test points that are very close together. See issue MATH-546.</text>
      </javadoc>
      <method type="void" name="testSmallDistances" startLine="214" endLine="249">
        <declaration type="int[]" name="repeatedArray" />
        <declaration type="int[]" name="uniqueArray" />
        <declaration type="CloseIntegerPoint" name="repeatedPoint" />
        <declaration type="CloseIntegerPoint" name="uniquePoint" />
        <declaration type="Collection<CloseIntegerPoint>" name="points" />
        <declaration type="int" name="NUM_REPEATED_POINTS" />
        <scope startLine="226" endLine="228" />
        <declaration type="long" name="RANDOM_SEED" />
        <declaration type="int" name="NUM_CLUSTERS" />
        <declaration type="int" name="NUM_ITERATIONS" />
        <declaration type="KMeansPlusPlusClusterer<CloseIntegerPoint>" name="clusterer" />
        <declaration type="List<Cluster<CloseIntegerPoint>>" name="clusters" />
        <declaration type="boolean" name="uniquePointIsCenter" />
        <scope startLine="243" endLine="247">
          <scope startLine="244" endLine="246" />
        </scope>
        <comment>Create a bunch of CloseIntegerPoints. Most are identical, but one is different by a</comment>
        <comment>small distance.</comment>
        <comment>Ask a KMeansPlusPlusClusterer to run zero iterations (i.e., to simply choose initial</comment>
        <comment>cluster centers).</comment>
        <comment>Check that one of the chosen centers is the unique point.</comment>
      </method>
      <javadoc>
        <text>* 2 variables cannot be clustered into 3 clusters. See issue MATH-436.</text>
      </javadoc>
      <method type="void" name="testPerformClusterAnalysisToManyClusters" startLine="255" endLine="270">
        <declaration type="KMeansPlusPlusClusterer<EuclideanIntegerPoint>" name="transformer" />
        <declaration type="EuclideanIntegerPoint[][]" name="points" />
      </method>
    </class>
  </class>
</source>
