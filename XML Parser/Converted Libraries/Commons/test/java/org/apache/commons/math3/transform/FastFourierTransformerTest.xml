<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.transform">
  <import name="java.util.Random" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.function.Sin" />
  <import name="org.apache.commons.math3.analysis.function.Sinc" />
  <import name="org.apache.commons.math3.complex.Complex" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="FastFourierTransformerTest" startLine="32">
    <javadoc>
      <text>* Test case for fast Fourier transformer.
 * <p>
 * FFT algorithm is exact, the small tolerance number is used only
 * to account for round-off errors.</text>
      <version>$Id: FastFourierTransformerTest.java 1374632 2012-08-18 18:11:11Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* The common seed of all random number generators used in this test.</text>
    </javadoc>
    <declaration type="long" name="SEED" />
    <method type="void" name="testTransformComplexSizeNotAPowerOfTwo" startLine="49" endLine="69">
      <declaration type="int" name="n" />
      <declaration type="Complex[]" name="x" />
      <declaration type="DftNormalization[]" name="norm" />
      <declaration type="TransformType[]" name="type" />
      <scope startLine="56" endLine="68">
        <scope startLine="57" endLine="67">
          <declaration type="FastFourierTransformer" name="fft" />
          <scope startLine="60" endLine="64" />
          <scope startLine="64" endLine="66" />
        </scope>
        <comment>Expected behaviour</comment>
      </scope>
    </method>
    <method type="void" name="testTransformRealSizeNotAPowerOfTwo" startLine="72" endLine="92">
      <declaration type="int" name="n" />
      <declaration type="double[]" name="x" />
      <declaration type="DftNormalization[]" name="norm" />
      <declaration type="TransformType[]" name="type" />
      <scope startLine="79" endLine="91">
        <scope startLine="80" endLine="90">
          <declaration type="FastFourierTransformer" name="fft" />
          <scope startLine="83" endLine="87" />
          <scope startLine="87" endLine="89" />
        </scope>
        <comment>Expected behaviour</comment>
      </scope>
    </method>
    <method type="void" name="testTransformFunctionSizeNotAPowerOfTwo" startLine="95" endLine="115">
      <declaration type="int" name="n" />
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="DftNormalization[]" name="norm" />
      <declaration type="TransformType[]" name="type" />
      <scope startLine="102" endLine="114">
        <scope startLine="103" endLine="113">
          <declaration type="FastFourierTransformer" name="fft" />
          <scope startLine="106" endLine="110" />
          <scope startLine="110" endLine="112" />
        </scope>
        <comment>Expected behaviour</comment>
      </scope>
    </method>
    <method type="void" name="testTransformFunctionNotStrictlyPositiveNumberOfSamples" startLine="118" endLine="139">
      <declaration type="int" name="n" />
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="DftNormalization[]" name="norm" />
      <declaration type="TransformType[]" name="type" />
      <scope startLine="125" endLine="138">
        <scope startLine="126" endLine="137">
          <declaration type="FastFourierTransformer" name="fft" />
          <scope startLine="129" endLine="134" />
          <scope startLine="134" endLine="136" />
        </scope>
        <comment>Expected behaviour</comment>
      </scope>
    </method>
    <method type="void" name="testTransformFunctionInvalidBounds" startLine="142" endLine="162">
      <declaration type="int" name="n" />
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="DftNormalization[]" name="norm" />
      <declaration type="TransformType[]" name="type" />
      <scope startLine="149" endLine="161">
        <scope startLine="150" endLine="160">
          <declaration type="FastFourierTransformer" name="fft" />
          <scope startLine="153" endLine="157" />
          <scope startLine="157" endLine="159" />
        </scope>
        <comment>Expected behaviour</comment>
      </scope>
    </method>
    <method type="Complex[]" name="createComplexData" startLine="168" endLine="177">
      <declaration type="Random" name="random" />
      <declaration type="Complex[]" name="data" />
      <scope startLine="171" endLine="175">
        <declaration type="double" name="re" />
        <declaration type="double" name="im" />
      </scope>
    </method>
    <method type="double[]" name="createRealData" startLine="179" endLine="186">
      <declaration type="Random" name="random" />
      <declaration type="double[]" name="data" />
      <scope startLine="182" endLine="184" />
    </method>
    <javadoc>
      <text>* Naive implementation of DFT, for reference.</text>
    </javadoc>
    <method type="Complex[]" name="dft" startLine="189" endLine="214">
      <declaration type="int" name="n" />
      <declaration type="double[]" name="cos" />
      <declaration type="double[]" name="sin" />
      <declaration type="Complex[]" name="y" />
      <scope startLine="194" endLine="198">
        <declaration type="double" name="arg" />
      </scope>
      <scope startLine="199" endLine="212">
        <declaration type="double" name="yr" />
        <declaration type="double" name="yi" />
        <scope startLine="202" endLine="210">
          <declaration type="int" name="index" />
          <declaration type="double" name="c" />
          <declaration type="double" name="s" />
          <declaration type="double" name="xr" />
          <declaration type="double" name="xi" />
        </scope>
      </scope>
    </method>
    <method type="void" name="doTestTransformComplex" startLine="218" endLine="250">
      <declaration type="FastFourierTransformer" name="fft" />
      <declaration type="Complex[]" name="x" />
      <declaration type="Complex[]" name="expected" />
      <declaration type="double" name="s" />
      <scope startLine="224" endLine="231">
        <scope startLine="226" endLine="228" />
        <scope startLine="228" endLine="230" />
      </scope>
      <scope startLine="231" endLine="238">
        <scope startLine="233" endLine="235" />
        <scope startLine="235" endLine="237" />
      </scope>
      <declaration type="Complex[]" name="actual" />
      <scope startLine="240" endLine="249">
        <declaration type="String" name="msg" />
        <declaration type="double" name="re" />
        <declaration type="double" name="im" />
      </scope>
    </method>
    <method type="void" name="doTestTransformReal" startLine="254" endLine="290">
      <declaration type="FastFourierTransformer" name="fft" />
      <declaration type="double[]" name="x" />
      <declaration type="Complex[]" name="xc" />
      <scope startLine="259" endLine="261" />
      <declaration type="Complex[]" name="expected" />
      <declaration type="double" name="s" />
      <scope startLine="264" endLine="271">
        <scope startLine="266" endLine="268" />
        <scope startLine="268" endLine="270" />
      </scope>
      <scope startLine="271" endLine="278">
        <scope startLine="273" endLine="275" />
        <scope startLine="275" endLine="277" />
      </scope>
      <declaration type="Complex[]" name="actual" />
      <scope startLine="280" endLine="289">
        <declaration type="String" name="msg" />
        <declaration type="double" name="re" />
        <declaration type="double" name="im" />
      </scope>
    </method>
    <method type="void" name="doTestTransformFunction" startLine="295" endLine="330">
      <declaration type="FastFourierTransformer" name="fft" />
      <declaration type="Complex[]" name="x" />
      <scope startLine="299" endLine="302">
        <declaration type="double" name="t" />
      </scope>
      <declaration type="Complex[]" name="expected" />
      <declaration type="double" name="s" />
      <scope startLine="305" endLine="312">
        <scope startLine="307" endLine="309" />
        <scope startLine="309" endLine="311" />
      </scope>
      <scope startLine="312" endLine="319">
        <scope startLine="314" endLine="316" />
        <scope startLine="316" endLine="318" />
      </scope>
      <declaration type="Complex[]" name="actual" />
      <scope startLine="321" endLine="329">
        <declaration type="String" name="msg" />
        <declaration type="double" name="re" />
        <declaration type="double" name="im" />
      </scope>
    </method>
    <method type="void" name="testTransformComplex" startLine="337" endLine="353">
      <declaration type="DftNormalization[]" name="norm" />
      <declaration type="TransformType[]" name="type" />
      <scope startLine="342" endLine="352">
        <scope startLine="343" endLine="351" />
      </scope>
    </method>
    <method type="void" name="testStandardTransformReal" startLine="356" endLine="372">
      <declaration type="DftNormalization[]" name="norm" />
      <declaration type="TransformType[]" name="type" />
      <scope startLine="361" endLine="371">
        <scope startLine="362" endLine="370" />
      </scope>
    </method>
    <method type="void" name="testStandardTransformFunction" startLine="375" endLine="394">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
      <declaration type="DftNormalization[]" name="norm" />
      <declaration type="TransformType[]" name="type" />
      <scope startLine="383" endLine="393">
        <scope startLine="384" endLine="392" />
      </scope>
    </method>
    <javadoc>
      <text>* Test of transformer for the ad hoc data taken from Mathematica.</text>
    </javadoc>
    <method type="void" name="testAdHocData" startLine="404" endLine="448">
      <declaration type="FastFourierTransformer" name="transformer" />
      <declaration type="Complex[]" name="result" />
      <declaration type="double" name="tolerance" />
      <declaration type="double[]" name="x" />
      <declaration type="Complex[]" name="y" />
      <scope startLine="421" endLine="424" />
      <scope startLine="427" endLine="430" />
      <declaration type="double[]" name="x2" />
      <declaration type="Complex[]" name="y2" />
      <scope startLine="438" endLine="441" />
      <scope startLine="444" endLine="447" />
    </method>
    <javadoc>
      <text>* Test of transformer for the sine function.</text>
    </javadoc>
    <method type="void" name="testSinFunction" startLine="454" endLine="482">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="FastFourierTransformer" name="transformer" />
      <declaration type="Complex[]" name="result" />
      <declaration type="int" name="N" />
      <declaration type="double" name="min" />
      <scope startLine="467" endLine="470" />
      <scope startLine="478" endLine="481" />
    </method>
    <method type="void" name="test2DData" startLine="489" endLine="527">
      <declaration type="FastFourierTransformer" name="transformer" />
      <declaration type="double" name="tolerance" />
      <declaration type="Complex[][][]" name="input" />
      <declaration type="Complex[][][]" name="goodOutput" />
      <scope startLine="501" endLine="506" />
      <declaration type="Complex[][][]" name="output" />
      <declaration type="Complex[][][]" name="output2" />
      <scope startLine="517" endLine="526">
        <scope startLine="518" endLine="525" />
      </scope>
    </method>
    <method type="void" name="test2DDataUnitary" startLine="530" endLine="561">
      <declaration type="FastFourierTransformer" name="transformer" />
      <declaration type="double" name="tolerance" />
      <declaration type="Complex[][][]" name="input" />
      <declaration type="Complex[][][]" name="goodOutput" />
      <declaration type="Complex[][][]" name="output" />
      <declaration type="Complex[][][]" name="output2" />
      <scope startLine="551" endLine="560">
        <scope startLine="552" endLine="559" />
      </scope>
    </method>
    <comment>Precondition checks.</comment>
    <comment>Utility methods for checking (successful) transforms.</comment>
    <comment>Tests of standard transform (when data is valid).</comment>
    <comment>Additional tests for 1D data.</comment>
    <comment>Additional tests for 2D data.</comment>
  </class>
</source>
