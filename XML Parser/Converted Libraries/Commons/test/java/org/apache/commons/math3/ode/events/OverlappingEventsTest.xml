<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode.events">
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.analysis.solvers.BaseSecantSolver" />
  <import name="org.apache.commons.math3.analysis.solvers.PegasusSolver" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.exception.NoBracketingException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.ode.FirstOrderDifferentialEquations" />
  <import name="org.apache.commons.math3.ode.FirstOrderIntegrator" />
  <import name="org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="OverlappingEventsTest" startLine="34">
    <implements name="FirstOrderDifferentialEquations" />
    <javadoc>
      <text>* Tests for overlapping state events. Also tests an event function that does
 * not converge to zero, but does have values of opposite sign around its root.</text>
    </javadoc>
    <javadoc>
      <text>* Expected event times for first event.</text>
    </javadoc>
    <declaration type="double[]" name="EVENT_TIMES1" />
    <javadoc>
      <text>* Expected event times for second event.</text>
    </javadoc>
    <declaration type="double[]" name="EVENT_TIMES2" />
    <javadoc>
      <text>* Test for events that occur at the exact same time, but due to numerical
 * calculations occur very close together instead. Uses event type 0. See{@link org.apache.commons.math3.ode.events.EventHandler#g(double,double[])EventHandler.g(double, double[])}.</text>
    </javadoc>
    <method type="void" name="testOverlappingEvents0" startLine="57" endLine="59" />
    <javadoc>
      <text>* Test for events that occur at the exact same time, but due to numerical
 * calculations occur very close together instead. Uses event type 1. See{@link org.apache.commons.math3.ode.events.EventHandler#g(double,double[])EventHandler.g(double, double[])}.</text>
    </javadoc>
    <method type="void" name="testOverlappingEvents1" startLine="69" endLine="71" />
    <javadoc>
      <text>* Test for events that occur at the exact same time, but due to numerical
 * calculations occur very close together instead.</text>
      <param>eventType the type of events to use. See{@link org.apache.commons.math3.ode.events.EventHandler#g(double,double[])EventHandler.g(double, double[])}.</param>
    </javadoc>
    <method type="void" name="test" startLine="81" endLine="118">
      <declaration type="double" name="e" />
      <declaration type="FirstOrderIntegrator" name="integrator" />
      <declaration type="BaseSecantSolver" name="rootSolver" />
      <declaration type="EventHandler" name="evt1" />
      <declaration type="EventHandler" name="evt2" />
      <declaration type="double" name="t" />
      <declaration type="double" name="tEnd" />
      <declaration type="double[]" name="y" />
      <declaration type="List<Double>" name="events1" />
      <declaration type="List<Double>" name="events2" />
      <scope startLine="94" endLine="108">
        <scope startLine="98" endLine="102" />
        <scope startLine="103" endLine="107" />
        <comment>System.out.println("t=" + t + ",\t\ty=[" + y[0] + "," + y[1] + "]");</comment>
        <comment>System.out.println("Event 1 @ t=" + t);</comment>
        <comment>System.out.println("Event 2 @ t=" + t);</comment>
      </scope>
      <scope startLine="111" endLine="113" />
      <scope startLine="114" endLine="116" />
      <comment>System.out.println();</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getDimension" startLine="121" endLine="123" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="computeDerivatives" startLine="126" endLine="129" />
    <class name="Event" startLine="131">
      <implements name="EventHandler" />
      <javadoc>
        <text>* State events for this unit test.</text>
      </javadoc>
      <javadoc>
        <text>* The index of the continuous variable to use.</text>
      </javadoc>
      <declaration type="int" name="idx" />
      <javadoc>
        <text>* The event type to use. See {@link #g}.</text>
      </javadoc>
      <declaration type="int" name="eventType" />
      <javadoc>
        <text>* Constructor for the {@link Event} class.</text>
        <param>idx the index of the continuous variable to use</param>
        <param>eventType the type of event to use. See {@link #g}</param>
      </javadoc>
      <method type="constructor" name="Event" startLine="143" endLine="146" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="void" name="init" startLine="149" endLine="150" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="g" startLine="153" endLine="156" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="Action" name="eventOccurred" startLine="159" endLine="161" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="void" name="resetState" startLine="164" endLine="166">
        <comment>Never called.</comment>
      </method>
    </class>
  </class>
</source>
