<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.interpolation">
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.function.Expm1" />
  <import name="org.apache.commons.math3.analysis.function.Sin" />
  <import name="org.apache.commons.math3.exception.NonMonotonicSequenceException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="NevilleInterpolatorTest" startLine="28">
    <javadoc>
      <text>* Test case for Neville interpolator.
 * <p>
 * The error of polynomial interpolation is
 * f(z) - p(z) = f^(n)(zeta) * (z-x[0])(z-x[1])...(z-x[n-1]) / n!
 * where f^(n) is the n-th derivative of the approximated function and
 * zeta is some point in the interval determined by x[] and z.
 * <p>
 * Since zeta is unknown, f^(n)(zeta) cannot be calculated. But we can bound
 * it and use the absolute value upper bound for estimates. For reference,
 * see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X, chapter 2.</text>
      <version>$Id: NevilleInterpolatorTest.java 1374632 2012-08-18 18:11:11Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* Test of interpolator for the sine function.
 * <p>
 * |sin^(n)(zeta)| <= 1.0, zeta in [0, 2*PI]</text>
    </javadoc>
    <method type="void" name="testSinFunction" startLine="50" endLine="74">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="UnivariateInterpolator" name="interpolator" />
      <declaration type="double[]" name="x" />
      <declaration type="int" name="n" />
      <declaration type="double" name="min" />
      <scope startLine="60" endLine="63" />
      <declaration type="double" name="derivativebound" />
      <declaration type="UnivariateFunction" name="p" />
      <comment>6 interpolating points on interval [0, 2*PI]</comment>
    </method>
    <javadoc>
      <text>* Test of interpolator for the exponential function.
 * <p>
 * |expm1^(n)(zeta)| <= e, zeta in [-1, 1]</text>
    </javadoc>
    <method type="void" name="testExpm1Function" startLine="82" endLine="110">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="UnivariateInterpolator" name="interpolator" />
      <declaration type="double[]" name="x" />
      <declaration type="int" name="n" />
      <declaration type="double" name="min" />
      <scope startLine="92" endLine="95" />
      <declaration type="double" name="derivativebound" />
      <declaration type="UnivariateFunction" name="p" />
      <comment>5 interpolating points on interval [-1, 1]</comment>
    </method>
    <javadoc>
      <text>* Test of parameters for the interpolator.</text>
    </javadoc>
    <method type="void" name="testParameters" startLine="116" endLine="129">
      <declaration type="UnivariateInterpolator" name="interpolator" />
      <scope startLine="119" endLine="126">
        <declaration type="double[]" name="x" />
        <declaration type="double[]" name="y" />
        <declaration type="UnivariateFunction" name="p" />
        <comment>bad abscissas array</comment>
      </scope>
      <scope startLine="126" endLine="128">
        <comment>expected</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the partial error term (z-x[0])(z-x[1])...(z-x[n-1])/n!</text>
    </javadoc>
    <method type="double" name="partialerror" startLine="135" endLine="146">
      <scope startLine="137" endLine="140" />
      <declaration type="double" name="out" />
      <scope startLine="142" endLine="144" />
    </method>
  </class>
</source>
