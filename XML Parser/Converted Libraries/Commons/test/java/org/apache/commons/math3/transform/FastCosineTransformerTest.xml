<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.transform">
  <import name="java.util.Arrays" />
  <import name="java.util.Collection" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.function.Sin" />
  <import name="org.apache.commons.math3.analysis.function.Sinc" />
  <import name="org.apache.commons.math3.exception.MathIllegalStateException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <import name="org.junit.runner.RunWith" />
  <import name="org.junit.runners.Parameterized" />
  <import name="org.junit.runners.Parameterized.Parameters" />
  <class name="FastCosineTransformerTest" extends="RealTransformerAbstractTest" startLine="33">
    <javadoc>
      <text>* Test case for fast cosine transformer.
 * <p>
 * FCT algorithm is exact, the small tolerance number is used only to account
 * for round-off errors.</text>
      <version>$Id: FastCosineTransformerTest.java 1374632 2012-08-18 18:11:11Z luc $</version>
    </javadoc>
    <declaration type="DctNormalization" name="normalization" />
    <declaration type="int[]" name="invalidDataSize" />
    <declaration type="double[]" name="relativeTolerance" />
    <declaration type="int[]" name="validDataSize" />
    <method type="constructor" name="FastCosineTransformerTest" startLine="53" endLine="64" />
    <javadoc>
      <text>* Returns an array containing {@code true, false} in order to check both
 * standard and orthogonal DCTs.</text>
      <return>an array of parameters for this parameterized test</return>
    </javadoc>
    <method type="Collection<Object[]>" name="data" startLine="73" endLine="80">
      <declaration type="DctNormalization[]" name="normalization" />
      <declaration type="Object[][]" name="data" />
      <scope startLine="76" endLine="78" />
    </method>
    <method type="RealTransformer" name="createRealTransformer" startLine="83" endLine="85" />
    <method type="int" name="getInvalidDataSize" startLine="88" endLine="90" />
    <method type="int" name="getNumberOfInvalidDataSizes" startLine="93" endLine="95" />
    <method type="int" name="getNumberOfValidDataSizes" startLine="98" endLine="100" />
    <method type="double" name="getRelativeTolerance" startLine="103" endLine="105" />
    <method type="int" name="getValidDataSize" startLine="108" endLine="110" />
    <method type="UnivariateFunction" name="getValidFunction" startLine="113" endLine="115" />
    <method type="double" name="getValidLowerBound" startLine="118" endLine="120" />
    <method type="double" name="getValidUpperBound" startLine="123" endLine="125" />
    <method type="double[]" name="transform" startLine="128" endLine="170">
      <declaration type="int" name="n" />
      <declaration type="double[]" name="y" />
      <declaration type="double[]" name="cos" />
      <scope startLine="132" endLine="134" />
      <declaration type="int" name="sgn" />
      <scope startLine="136" endLine="143">
        <declaration type="double" name="yj" />
        <scope startLine="138" endLine="140" />
      </scope>
      <declaration type="double" name="s" />
      <scope startLine="145" endLine="153">
        <scope startLine="146" endLine="148" />
        <scope startLine="148" endLine="150" />
        <scope startLine="150" endLine="152" />
      </scope>
      <scope startLine="153" endLine="161">
        <scope startLine="154" endLine="156" />
        <scope startLine="156" endLine="158" />
        <scope startLine="158" endLine="160" />
      </scope>
      <scope startLine="161" endLine="167">
        <comment>Should never occur. This clause is a safeguard in case other
 types are used to TransformType (which should not be done).</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Test of transformer for the ad hoc data.</text>
    </javadoc>
    <method type="void" name="testAdHocData" startLine="178" endLine="215">
      <declaration type="FastCosineTransformer" name="transformer" />
      <declaration type="double[]" name="result" />
      <declaration type="double[]" name="x" />
      <declaration type="double[]" name="y" />
      <scope startLine="194" endLine="196" />
      <scope startLine="199" endLine="201" />
      <scope startLine="207" endLine="209" />
      <scope startLine="212" endLine="214" />
    </method>
    <javadoc>
      <text>* Test of parameters for the transformer.</text>
    </javadoc>
    <method type="void" name="testParameters" startLine="220" endLine="248">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="FastCosineTransformer" name="transformer" />
      <scope startLine="225" endLine="229">
        <comment>bad interval</comment>
      </scope>
      <scope startLine="229" endLine="231">
        <comment>expected</comment>
      </scope>
      <scope startLine="232" endLine="237">
        <comment>bad samples number</comment>
      </scope>
      <scope startLine="237" endLine="239">
        <comment>expected</comment>
      </scope>
      <scope startLine="240" endLine="245">
        <comment>bad samples number</comment>
      </scope>
      <scope startLine="245" endLine="247">
        <comment>expected</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Test of transformer for the sine function.</text>
    </javadoc>
    <method type="void" name="testSinFunction" startLine="252" endLine="277">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="FastCosineTransformer" name="transformer" />
      <declaration type="double" name="min" />
      <declaration type="int" name="N" />
      <declaration type="double[]" name="expected" />
      <scope startLine="267" endLine="269" />
      <scope startLine="274" endLine="276" />
    </method>
    <comment>Additional tests.</comment>
  </class>
</source>
