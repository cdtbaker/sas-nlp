<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution.fitting">
  <import name="java.util.ArrayList" />
  <import name="java.util.Arrays" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution" />
  <import name="org.apache.commons.math3.distribution.MultivariateNormalDistribution" />
  <import name="org.apache.commons.math3.exception.ConvergenceException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.linear.Array2DRowRealMatrix" />
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <import name="org.apache.commons.math3.util.Pair" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="MultivariateNormalMixtureExpectationMaximizationTest" startLine="35">
    <javadoc>
      <text>* Test that demonstrates the use of{@link MultivariateNormalMixtureExpectationMaximization}.</text>
    </javadoc>
    <method type="void" name="testNonEmptyData" startLine="42" endLine="45">
      <comment>Should not accept empty data</comment>
    </method>
    <method type="void" name="testNonJaggedData" startLine="48" endLine="55">
      <declaration type="double[][][]" name="data" />
      <comment>Reject data with nonconstant numbers of columns</comment>
    </method>
    <method type="void" name="testMultipleColumnsRequired" startLine="58" endLine="64">
      <declaration type="double[][][]" name="data" />
      <comment>Data should have at least 2 columns</comment>
    </method>
    <method type="void" name="testMaxIterationsPositive" startLine="67" endLine="77">
      <declaration type="double[][]" name="data" />
      <declaration type="MultivariateNormalMixtureExpectationMaximization" name="fitter" />
      <declaration type="MixtureMultivariateNormalDistribution" name="initialMix" />
      <comment>Maximum iterations for fit must be positive integer</comment>
    </method>
    <method type="void" name="testThresholdPositive" startLine="80" endLine="91">
      <declaration type="double[][]" name="data" />
      <declaration type="MultivariateNormalMixtureExpectationMaximization" name="fitter" />
      <declaration type="MixtureMultivariateNormalDistribution" name="initialMix" />
      <comment>Maximum iterations for fit must be positive</comment>
    </method>
    <method type="void" name="testConvergenceException" startLine="94" endLine="105">
      <declaration type="double[][]" name="data" />
      <declaration type="MultivariateNormalMixtureExpectationMaximization" name="fitter" />
      <declaration type="MixtureMultivariateNormalDistribution" name="initialMix" />
      <comment>ConvergenceException thrown if fit terminates before threshold met</comment>
      <comment>5 iterations not enough to meet convergence threshold</comment>
    </method>
    <method type="void" name="testIncompatibleIntialMixture" startLine="108" endLine="144">
      <declaration type="double[][][]" name="data" />
      <declaration type="double[][]" name="weights" />
      <declaration type="MultivariateNormalDistribution[]" name="mvns" />
      <declaration type="List<Pair<Double,MultivariateNormalDistribution>>" name="components" />
      <declaration type="MixtureMultivariateNormalDistribution" name="badInitialMix" />
      <declaration type="MultivariateNormalMixtureExpectationMaximization" name="fitter" />
      <comment>Data has 3 columns</comment>
      <comment>These distributions are compatible with 2-column data, not 3-column</comment>
      <comment>data</comment>
      <comment>Create components and mixture</comment>
    </method>
    <method type="void" name="testInitialMixture" startLine="147" endLine="191">
      <declaration type="double[][]" name="correctWeights" />
      <declaration type="double[][][]" name="correctMeans" />
      <declaration type="RealMatrix[]" name="correctCovMats" />
      <declaration type="MultivariateNormalDistribution[]" name="correctMVNs" />
      <declaration type="MixtureMultivariateNormalDistribution" name="initialMix" />
      <declaration type="int" name="i" />
      <scope startLine="180" endLine="190">
        <declaration type="double[]" name="means" />
        <declaration type="RealMatrix" name="covMat" />
      </scope>
      <comment>Testing initial mixture estimated from data</comment>
    </method>
    <method type="void" name="testFit" startLine="194" endLine="243">
      <declaration type="double[][]" name="data" />
      <declaration type="double" name="correctLogLikelihood" />
      <declaration type="double[][]" name="correctWeights" />
      <declaration type="double[][][]" name="correctMeans" />
      <declaration type="RealMatrix[]" name="correctCovMats" />
      <declaration type="MultivariateNormalDistribution[]" name="correctMVNs" />
      <declaration type="MultivariateNormalMixtureExpectationMaximization" name="fitter" />
      <declaration type="MixtureMultivariateNormalDistribution" name="initialMix" />
      <declaration type="MixtureMultivariateNormalDistribution" name="fittedMix" />
      <declaration type="List<Pair<Double,MultivariateNormalDistribution>>" name="components" />
      <declaration type="int" name="i" />
      <scope startLine="233" endLine="242">
        <declaration type="double" name="weight" />
        <declaration type="MultivariateNormalDistribution" name="mvn" />
        <declaration type="double[]" name="mean" />
        <declaration type="RealMatrix" name="covMat" />
      </scope>
      <comment>Test that the loglikelihood, weights, and models are determined and</comment>
      <comment>fitted correctly</comment>
    </method>
    <method type="double[][]" name="getTestSamples" startLine="245" endLine="348">
      <comment>generated using R Mixtools rmvnorm with mean vectors [-1.5, 2] and</comment>
      <comment>[4, 8.2]</comment>
    </method>
  </class>
</source>
