<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.util">
  <import name="java.util.Arrays" />
  <import name="org.apache.commons.math3.TestUtils" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NonMonotonicSequenceException" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.random.Well1024a" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="MathArraysTest" startLine="30">
    <javadoc>
      <text>* Test cases for the {@link MathArrays} class.</text>
      <version>$Id$</version>
    </javadoc>
    <method type="void" name="testScale" startLine="38" endLine="54">
      <declaration type="double[][]" name="test" />
      <declaration type="double[]" name="correctTest" />
      <declaration type="double[][]" name="correctScaled" />
      <declaration type="double[]" name="scaled" />
      <scope startLine="46" endLine="48" />
      <scope startLine="51" endLine="53" />
      <comment>Make sure test has not changed</comment>
      <comment>Test scaled values</comment>
    </method>
    <method type="void" name="testScaleInPlace" startLine="57" endLine="66">
      <declaration type="double[][]" name="test" />
      <declaration type="double[][]" name="correctScaled" />
      <scope startLine="63" endLine="65" />
      <comment>Make sure test has changed</comment>
    </method>
    <method type="void" name="testEbeAddPrecondition" startLine="69" endLine="71" />
    <method type="void" name="testEbeSubtractPrecondition" startLine="73" endLine="75" />
    <method type="void" name="testEbeMultiplyPrecondition" startLine="77" endLine="79" />
    <method type="void" name="testEbeDividePrecondition" startLine="81" endLine="83" />
    <method type="void" name="testEbeAdd" startLine="86" endLine="94">
      <declaration type="double[]" name="a" />
      <declaration type="double[]" name="b" />
      <declaration type="double[]" name="r" />
      <scope startLine="91" endLine="93" />
    </method>
    <method type="void" name="testEbeSubtract" startLine="96" endLine="104">
      <declaration type="double[]" name="a" />
      <declaration type="double[]" name="b" />
      <declaration type="double[]" name="r" />
      <scope startLine="101" endLine="103" />
    </method>
    <method type="void" name="testEbeMultiply" startLine="106" endLine="114">
      <declaration type="double[]" name="a" />
      <declaration type="double[]" name="b" />
      <declaration type="double[]" name="r" />
      <scope startLine="111" endLine="113" />
    </method>
    <method type="void" name="testEbeDivide" startLine="116" endLine="124">
      <declaration type="double[]" name="a" />
      <declaration type="double[]" name="b" />
      <declaration type="double[]" name="r" />
      <scope startLine="121" endLine="123" />
    </method>
    <method type="void" name="testL1DistanceDouble" startLine="127" endLine="131">
      <declaration type="double[]" name="p1" />
      <declaration type="double[]" name="p2" />
    </method>
    <method type="void" name="testL1DistanceInt" startLine="134" endLine="138">
      <declaration type="int[]" name="p1" />
      <declaration type="int[]" name="p2" />
    </method>
    <method type="void" name="testL2DistanceDouble" startLine="141" endLine="145">
      <declaration type="double[]" name="p1" />
      <declaration type="double[]" name="p2" />
    </method>
    <method type="void" name="testL2DistanceInt" startLine="148" endLine="152">
      <declaration type="int[]" name="p1" />
      <declaration type="int[]" name="p2" />
    </method>
    <method type="void" name="testLInfDistanceDouble" startLine="155" endLine="159">
      <declaration type="double[]" name="p1" />
      <declaration type="double[]" name="p2" />
    </method>
    <method type="void" name="testLInfDistanceInt" startLine="162" endLine="166">
      <declaration type="int[]" name="p1" />
      <declaration type="int[]" name="p2" />
    </method>
    <method type="void" name="testCheckOrder" startLine="169" endLine="214">
      <scope startLine="179" endLine="183" />
      <scope startLine="183" endLine="185">
        <comment>Expected</comment>
      </scope>
      <scope startLine="186" endLine="190" />
      <scope startLine="190" endLine="192">
        <comment>Expected</comment>
      </scope>
      <scope startLine="193" endLine="197" />
      <scope startLine="197" endLine="199">
        <comment>Expected</comment>
      </scope>
      <scope startLine="200" endLine="204" />
      <scope startLine="204" endLine="206">
        <comment>Expected</comment>
      </scope>
      <scope startLine="207" endLine="211" />
      <scope startLine="211" endLine="213">
        <comment>Expected</comment>
      </scope>
    </method>
    <method type="void" name="testIsMonotonic" startLine="217" endLine="234" />
    <method type="void" name="testIsMonotonicComparable" startLine="237" endLine="290" />
    <method type="void" name="testCheckRectangular" startLine="293" endLine="312">
      <declaration type="long[][][]" name="rect" />
      <declaration type="long[][][]" name="ragged" />
      <declaration type="long[][]" name="nullArray" />
      <declaration type="long[][][]" name="empty" />
      <scope startLine="300" endLine="303" />
      <scope startLine="303" endLine="305">
        <comment>Expected</comment>
      </scope>
      <scope startLine="306" endLine="309" />
      <scope startLine="309" endLine="311">
        <comment>Expected</comment>
      </scope>
    </method>
    <method type="void" name="testCheckPositive" startLine="315" endLine="334">
      <declaration type="double[][]" name="positive" />
      <declaration type="double[][]" name="nonNegative" />
      <declaration type="double[]" name="nullArray" />
      <declaration type="double[][]" name="empty" />
      <scope startLine="322" endLine="325" />
      <scope startLine="325" endLine="327">
        <comment>Expected</comment>
      </scope>
      <scope startLine="328" endLine="331" />
      <scope startLine="331" endLine="333">
        <comment>Expected</comment>
      </scope>
    </method>
    <method type="void" name="testCheckNonNegative" startLine="337" endLine="356">
      <declaration type="long[][]" name="nonNegative" />
      <declaration type="long[][]" name="hasNegative" />
      <declaration type="long[]" name="nullArray" />
      <declaration type="long[][]" name="empty" />
      <scope startLine="344" endLine="347" />
      <scope startLine="347" endLine="349">
        <comment>Expected</comment>
      </scope>
      <scope startLine="350" endLine="353" />
      <scope startLine="353" endLine="355">
        <comment>Expected</comment>
      </scope>
    </method>
    <method type="void" name="testCheckNonNegative2D" startLine="359" endLine="378">
      <declaration type="long[][][]" name="nonNegative" />
      <declaration type="long[][][]" name="hasNegative" />
      <declaration type="long[][]" name="nullArray" />
      <declaration type="long[][][]" name="empty" />
      <scope startLine="366" endLine="369" />
      <scope startLine="369" endLine="371">
        <comment>Expected</comment>
      </scope>
      <scope startLine="372" endLine="375" />
      <scope startLine="375" endLine="377">
        <comment>Expected</comment>
      </scope>
    </method>
    <method type="void" name="testSortInPlace" startLine="381" endLine="407">
      <declaration type="double[]" name="x1" />
      <declaration type="double[]" name="x2" />
      <declaration type="double[]" name="x3" />
    </method>
    <method type="void" name="testSortInPlaceExample" startLine="411" endLine="422">
      <declaration type="double[]" name="x" />
      <declaration type="double[]" name="y" />
      <declaration type="double[]" name="z" />
      <declaration type="double[]" name="sx" />
      <declaration type="double[]" name="sy" />
      <declaration type="double[]" name="sz" />
    </method>
    <method type="void" name="testSortInPlaceFailures" startLine="425" endLine="448">
      <declaration type="double[]" name="nullArray" />
      <declaration type="double[]" name="one" />
      <declaration type="double[]" name="two" />
      <declaration type="double[]" name="onep" />
      <scope startLine="430" endLine="433" />
      <scope startLine="433" endLine="435">
        <comment>expected</comment>
      </scope>
      <scope startLine="436" endLine="439" />
      <scope startLine="439" endLine="441">
        <comment>expected</comment>
      </scope>
      <scope startLine="442" endLine="445" />
      <scope startLine="445" endLine="447">
        <comment>expected</comment>
      </scope>
    </method>
    <method type="void" name="testCopyOfInt" startLine="451" endLine="461">
      <declaration type="int[]" name="source" />
      <declaration type="int[]" name="dest" />
      <scope startLine="458" endLine="460" />
    </method>
    <method type="void" name="testCopyOfInt2" startLine="464" endLine="475">
      <declaration type="int[]" name="source" />
      <declaration type="int" name="offset" />
      <declaration type="int[]" name="dest" />
      <scope startLine="472" endLine="474" />
    </method>
    <method type="void" name="testCopyOfInt3" startLine="478" endLine="492">
      <declaration type="int[]" name="source" />
      <declaration type="int" name="offset" />
      <declaration type="int[]" name="dest" />
      <scope startLine="486" endLine="488" />
      <scope startLine="489" endLine="491" />
    </method>
    <method type="void" name="testCopyOfDouble" startLine="495" endLine="510">
      <declaration type="double[]" name="source" />
      <declaration type="double[]" name="dest" />
      <scope startLine="507" endLine="509" />
    </method>
    <method type="void" name="testCopyOfDouble2" startLine="513" endLine="529">
      <declaration type="double[]" name="source" />
      <declaration type="int" name="offset" />
      <declaration type="double[]" name="dest" />
      <scope startLine="526" endLine="528" />
    </method>
    <method type="void" name="testCopyOfDouble3" startLine="532" endLine="551">
      <declaration type="double[]" name="source" />
      <declaration type="int" name="offset" />
      <declaration type="double[]" name="dest" />
      <scope startLine="545" endLine="547" />
      <scope startLine="548" endLine="550" />
    </method>
    <method type="void" name="testLinearCombination1" startLine="554" endLine="577">
      <declaration type="double[][]" name="a" />
      <declaration type="double[][]" name="b" />
      <declaration type="double" name="abSumInline" />
      <declaration type="double" name="abSumArray" />
      <declaration type="double" name="naive" />
    </method>
    <method type="void" name="testLinearCombination2" startLine="580" endLine="599">
      <declaration type="Well1024a" name="random" />
      <scope startLine="585" endLine="598">
        <declaration type="double" name="ux" />
        <declaration type="double" name="uy" />
        <declaration type="double" name="uz" />
        <declaration type="double" name="vx" />
        <declaration type="double" name="vy" />
        <declaration type="double" name="vz" />
        <declaration type="double" name="sInline" />
        <declaration type="double[]" name="sArray" />
      </scope>
      <comment>we compare accurate versus naive dot product implementations</comment>
      <comment>on regular vectors (i.e. not extreme cases like in the previous test)</comment>
    </method>
    <method type="void" name="testLinearCombinationInfinite" startLine="602" endLine="751">
      <declaration type="double[][][]" name="a" />
      <declaration type="double[][][]" name="b" />
    </method>
    <method type="void" name="testArrayEquals" startLine="754" endLine="772" />
    <method type="void" name="testArrayEqualsIncludingNaN" startLine="775" endLine="790" />
    <method type="void" name="testNormalizeArray" startLine="793" endLine="835">
      <declaration type="double[][]" name="testValues1" />
      <declaration type="double[][]" name="testValues2" />
      <declaration type="double[][]" name="testValues3" />
      <declaration type="double[][]" name="zeroSum" />
      <scope startLine="812" endLine="815" />
      <scope startLine="815" endLine="815" />
      <declaration type="double[][]" name="hasInf" />
      <scope startLine="819" endLine="822" />
      <scope startLine="822" endLine="822" />
      <scope startLine="825" endLine="828" />
      <scope startLine="828" endLine="828" />
      <scope startLine="831" endLine="834" />
      <scope startLine="834" endLine="834" />
      <comment>Ignore NaNs</comment>
      <comment>Zero sum -> MathArithmeticException</comment>
      <comment>Infinite elements -> MathArithmeticException</comment>
      <comment>Infinite target -> MathIllegalArgumentException</comment>
      <comment>NaN target -> MathIllegalArgumentException</comment>
    </method>
    <javadoc>
      <text>* Example in javadoc</text>
    </javadoc>
  </class>
</source>
