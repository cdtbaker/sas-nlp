<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.dfp">
  <import name="org.apache.commons.math3.ExtendedFieldElementAbstractTest" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.Precision" />
  <import name="org.junit.After" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Before" />
  <import name="org.junit.Test" />
  <class name="DfpTest" extends="ExtendedFieldElementAbstractTest<Dfp>" startLine="28">
    <method type="Dfp" name="build" startLine="30" endLine="32" />
    <declaration type="DfpField" name="field" />
    <declaration type="Dfp" name="pinf" />
    <declaration type="Dfp" name="ninf" />
    <declaration type="Dfp" name="nan" />
    <declaration type="Dfp" name="snan" />
    <declaration type="Dfp" name="qnan" />
    <method type="void" name="setUp" startLine="42" endLine="51">
      <comment>Some basic setup.  Define some constants and clear the status flags</comment>
    </method>
    <method type="void" name="tearDown" startLine="54" endLine="61" />
    <method type="void" name="test" startLine="67" endLine="82">
      <declaration type="boolean" name="b" />
      <comment>NaNs involved</comment>
      <comment>distinguish +/- zero</comment>
    </method>
    <method type="void" name="testByteConstructor" startLine="85" endLine="91" />
    <method type="void" name="testIntConstructor" startLine="94" endLine="102" />
    <method type="void" name="testLongConstructor" startLine="105" endLine="113" />
    <method type="void" name="testAdd" startLine="120" endLine="366">
      <comment>Basic tests   1+1 = 2</comment>
      <comment>1 + (-1) = 0</comment>
      <comment>(-1) + 1 = 0</comment>
      <comment>(-1) + (-1) = -2</comment>
      <comment>rounding mode is round half even</comment>
      <comment>rounding on add</comment>
      <comment>rounding on add</comment>
      <comment>rounding on add</comment>
      <comment>rounding on add</comment>
      <comment>rounding on add</comment>
      <comment>rounding on add</comment>
      <comment>rounding on add</comment>
      <comment>rounding on add</comment>
      <comment>rounding on add</comment>
      <comment>rounding on add</comment>
      <comment>overflow on add</comment>
      <comment>overflow on add</comment>
      <comment>overflow on add</comment>
      <comment>overflow on add</comment>
      <comment>underflow on add</comment>
      <comment>underflow on add</comment>
      <comment>underflow on add</comment>
      <comment>underflow on add</comment>
      <comment>underflow on add</comment>
      <comment>loss of precision on alignment?</comment>
      <comment>proper normalization?</comment>
      <comment>adding zeros</comment>
      <comment>adding zeros</comment>
      <comment>adding zeros</comment>
      <comment>adding zeros</comment>
      <comment>adding zeros</comment>
      <comment>adding zeros</comment>
      <comment>adding zeros</comment>
      <comment>adding infinities</comment>
      <comment>adding infinities</comment>
      <comment>adding infinities</comment>
      <comment>adding infinities</comment>
      <comment>adding infinities</comment>
      <comment>adding infinities</comment>
      <comment>adding infinities</comment>
      <comment>adding infinities</comment>
      <comment>adding infinities</comment>
      <comment>adding infinities</comment>
      <comment>adding infinities</comment>
      <comment>adding infinities</comment>
      <comment>adding infinities</comment>
      <comment>adding infinities</comment>
      <comment>adding infinities</comment>
      <comment>adding infinities</comment>
      <comment>overflow</comment>
      <comment>overflow</comment>
    </method>
    <method type="void" name="cmptst" startLine="374" endLine="390" />
    <method type="void" name="testCompare" startLine="394" endLine="755">
      <comment>test equal() comparison</comment>
      <comment>check zero vs. zero</comment>
      <comment>0 == 0</comment>
      <comment>0 == -0</comment>
      <comment>-0 == -0</comment>
      <comment>-0 == 0</comment>
      <comment>check zero vs normal numbers</comment>
      <comment>0 == 1</comment>
      <comment>1 == 0</comment>
      <comment>-1 == 0</comment>
      <comment>0 == -1</comment>
      <comment>0 == 1e-131072</comment>
      <comment>check flags</comment>
      <comment>0 == 1e-131078</comment>
      <comment>check flags  -- underflow should be set</comment>
      <comment>0 == 1e+131071</comment>
      <comment>check zero vs infinities</comment>
      <comment>0 == pinf</comment>
      <comment>0 == ninf</comment>
      <comment>-0 == pinf</comment>
      <comment>-0 == ninf</comment>
      <comment>pinf == 0</comment>
      <comment>ninf == 0</comment>
      <comment>pinf == -0</comment>
      <comment>ninf == -0</comment>
      <comment>ninf == pinf</comment>
      <comment>pinf == ninf</comment>
      <comment>pinf == pinf</comment>
      <comment>ninf == ninf</comment>
      <comment>check some normal numbers</comment>
      <comment>1 == 1</comment>
      <comment>1 == -1</comment>
      <comment>-1 == -1</comment>
      <comment>1 == 1.0000000000000001</comment>
      <comment>The tests below checks to ensure that comparisons don't set FLAG_INEXACT</comment>
      <comment>100000 == 1.0000000000000001</comment>
      <comment>check some nans -- nans shouldnt equal anything</comment>
      <comment />
      <comment>Tests for un equal  -- do it all over again</comment>
      <comment />
      <comment>0 == 0</comment>
      <comment>0 == -0</comment>
      <comment>-0 == -0</comment>
      <comment>-0 == 0</comment>
      <comment>check zero vs normal numbers</comment>
      <comment>0 == 1</comment>
      <comment>1 == 0</comment>
      <comment>-1 == 0</comment>
      <comment>0 == -1</comment>
      <comment>0 == 1e-131072</comment>
      <comment>check flags</comment>
      <comment>0 == 1e-131078</comment>
      <comment>check flags  -- underflow should be set</comment>
      <comment>0 == 1e+131071</comment>
      <comment>check zero vs infinities</comment>
      <comment>0 == pinf</comment>
      <comment>0 == ninf</comment>
      <comment>-0 == pinf</comment>
      <comment>-0 == ninf</comment>
      <comment>pinf == 0</comment>
      <comment>ninf == 0</comment>
      <comment>pinf == -0</comment>
      <comment>ninf == -0</comment>
      <comment>ninf == pinf</comment>
      <comment>pinf == ninf</comment>
      <comment>pinf == pinf</comment>
      <comment>ninf == ninf</comment>
      <comment>check some normal numbers</comment>
      <comment>1 == 1</comment>
      <comment>1 == -1</comment>
      <comment>-1 == -1</comment>
      <comment>1 == 1.0000000000000001</comment>
      <comment>The tests below checks to ensure that comparisons don't set FLAG_INEXACT</comment>
      <comment>100000 == 1.0000000000000001</comment>
      <comment>check some nans -- nans shouldnt be unequal to anything</comment>
      <comment />
      <comment>Tests for lessThan  -- do it all over again</comment>
      <comment />
      <comment>0 < 0</comment>
      <comment>0 < -0</comment>
      <comment>-0 < -0</comment>
      <comment>-0 < 0</comment>
      <comment>check zero vs normal numbers</comment>
      <comment>0 < 1</comment>
      <comment>1 < 0</comment>
      <comment>-1 < 0</comment>
      <comment>0 < -1</comment>
      <comment>0 < 1e-131072</comment>
      <comment>check flags</comment>
      <comment>0 < 1e-131078</comment>
      <comment>check flags  -- underflow should be set</comment>
      <comment>0 < 1e+131071</comment>
      <comment>check zero vs infinities</comment>
      <comment>0 < pinf</comment>
      <comment>0 < ninf</comment>
      <comment>-0 < pinf</comment>
      <comment>-0 < ninf</comment>
      <comment>pinf < 0</comment>
      <comment>ninf < 0</comment>
      <comment>pinf < -0</comment>
      <comment>ninf < -0</comment>
      <comment>ninf < pinf</comment>
      <comment>pinf < ninf</comment>
      <comment>pinf < pinf</comment>
      <comment>ninf < ninf</comment>
      <comment>check some normal numbers</comment>
      <comment>1 < 1</comment>
      <comment>1 < -1</comment>
      <comment>-1 < -1</comment>
      <comment>1 < 1.0000000000000001</comment>
      <comment>The tests below checks to ensure that comparisons don't set FLAG_INEXACT</comment>
      <comment>100000 < 1.0000000000000001</comment>
      <comment>check some nans -- nans shouldnt be lessThan to anything</comment>
      <comment>lessThan compares with nans should raise FLAG_INVALID</comment>
      <comment />
      <comment>Tests for greaterThan  -- do it all over again</comment>
      <comment />
      <comment>0 > 0</comment>
      <comment>0 > -0</comment>
      <comment>-0 > -0</comment>
      <comment>-0 > 0</comment>
      <comment>check zero vs normal numbers</comment>
      <comment>0 > 1</comment>
      <comment>1 > 0</comment>
      <comment>-1 > 0</comment>
      <comment>0 > -1</comment>
      <comment>0 > 1e-131072</comment>
      <comment>check flags</comment>
      <comment>0 > 1e-131078</comment>
      <comment>check flags  -- underflow should be set</comment>
      <comment>0 > 1e+131071</comment>
      <comment>check zero vs infinities</comment>
      <comment>0 > pinf</comment>
      <comment>0 > ninf</comment>
      <comment>-0 > pinf</comment>
      <comment>-0 > ninf</comment>
      <comment>pinf > 0</comment>
      <comment>ninf > 0</comment>
      <comment>pinf > -0</comment>
      <comment>ninf > -0</comment>
      <comment>ninf > pinf</comment>
      <comment>pinf > ninf</comment>
      <comment>pinf > pinf</comment>
      <comment>ninf > ninf</comment>
      <comment>check some normal numbers</comment>
      <comment>1 > 1</comment>
      <comment>1 > -1</comment>
      <comment>-1 > -1</comment>
      <comment>1 > 1.0000000000000001</comment>
      <comment>The tests below checks to ensure that comparisons don't set FLAG_INEXACT</comment>
      <comment>100000 > 1.0000000000000001</comment>
      <comment>check some nans -- nans shouldnt be greaterThan to anything</comment>
      <comment>greaterThan compares with nans should raise FLAG_INVALID</comment>
    </method>
    <method type="void" name="testMultiply" startLine="762" endLine="925">
      <comment>Basic tests   1*1 = 1</comment>
      <comment>Basic tests   1*1 = 1</comment>
      <comment>Basic tests   -1*1 = -1</comment>
      <comment>Basic tests   -1*1 = -1</comment>
      <comment>basic tests with integers</comment>
      <comment>multiply by zero</comment>
    </method>
    <method type="void" name="testDivide" startLine="929" endLine="1045">
      <comment>divide by NaN = NaN</comment>
      <comment>NaN / number = NaN</comment>
      <comment>test trial-divisor too high</comment>
    </method>
    <method type="void" name="testReciprocal" startLine="1049" endLine="1085" />
    <method type="void" name="testDivideInt" startLine="1089" endLine="1153">
      <comment>NaN / number = NaN</comment>
    </method>
    <method type="void" name="testNextAfter" startLine="1157" endLine="1217" />
    <method type="void" name="testToString" startLine="1221" endLine="1231" />
    <method type="void" name="testRound" startLine="1235" endLine="1350">
      <comment>Round down</comment>
      <comment>Round up</comment>
      <comment>Round half up</comment>
      <comment>Round half down</comment>
      <comment>Round half odd</comment>
      <comment>Round ceil</comment>
      <comment>Round floor</comment>
      <comment>reset</comment>
    </method>
    <method type="void" name="testCeil" startLine="1354" endLine="1358" />
    <method type="void" name="testFloor" startLine="1362" endLine="1366" />
    <method type="void" name="testRint" startLine="1370" endLine="1382" />
    <method type="void" name="testCopySign" startLine="1386" endLine="1402" />
    <method type="void" name="testIntValue" startLine="1406" endLine="1413" />
    <method type="void" name="testLog10K" startLine="1417" endLine="1423" />
    <method type="void" name="testPower10K" startLine="1427" endLine="1437">
      <declaration type="Dfp" name="d" />
    </method>
    <method type="void" name="testLog10" startLine="1441" endLine="1460" />
    <method type="void" name="testPower10" startLine="1464" endLine="1488">
      <declaration type="Dfp" name="d" />
    </method>
    <method type="void" name="testRemainder" startLine="1492" endLine="1504" />
    <method type="void" name="testSqrt" startLine="1508" endLine="1556" />
    <method type="void" name="testIssue567" startLine="1559" endLine="1565">
      <declaration type="DfpField" name="field" />
    </method>
    <method type="void" name="testIsZero" startLine="1568" endLine="1580" />
    <method type="void" name="testSignPredicates" startLine="1583" endLine="1635" />
    <method type="void" name="testSpecialConstructors" startLine="1638" endLine="1645" />
    <comment>Generic test function.  Takes params x and y and tests them for</comment>
    <comment>equality.  Then checks the status flags against the flags argument.</comment>
    <comment>If the test fail, it prints the desc string</comment>
    <comment>Test addition</comment>
    <comment />
    <comment>Test comparisons</comment>
    <comment>utility function to help test comparisons</comment>
    <comment />
    <comment>Test multiplication</comment>
    <comment />
  </class>
</source>
