<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode.sampling">
  <import name="java.io.IOException" />
  <import name="java.io.ObjectInput" />
  <import name="java.io.ObjectOutput" />
  <import name="org.apache.commons.math3.ode.EquationsMapper" />
  <class name="DummyStepInterpolator" extends="AbstractStepInterpolator" startLine="26">
    <javadoc>
      <text>* This class is a step interpolator that does nothing.
 * <p>This class is used when the {@link StepHandler "step handler"}set up by the user does not need step interpolation. It does not
 * recompute the state when {@link AbstractStepInterpolator#setInterpolatedTimesetInterpolatedTime} is called. This implies the interpolated state
 * is always the state at the end of the current step.</p></text>
      <see>StepHandler</see>
      <version>$Id: DummyStepInterpolator.java 1302386 2012-03-19 11:59:25Z sebb $</version>
      <since>1.2</since>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Current derivative.</text>
    </javadoc>
    <declaration type="double[]" name="currentDerivative" />
    <javadoc>
      <text>* Simple constructor.
 * This constructor builds an instance that is not usable yet, the
 * <code>AbstractStepInterpolator.reinitialize</code> protected method
 * should be called before using the instance in order to initialize
 * the internal arrays. This constructor is used only in order to delay
 * the initialization in some cases. As an example, the {@link org.apache.commons.math3.ode.nonstiff.EmbeddedRungeKuttaIntegrator} uses
 * the prototyping design pattern to create the step interpolators by
 * cloning an uninitialized model and latter initializing the copy.</text>
    </javadoc>
    <method type="constructor" name="DummyStepInterpolator" startLine="59" endLine="62" />
    <javadoc>
      <text>* Simple constructor.</text>
      <param>y reference to the integrator array holding the state at
 * the end of the step</param>
      <param>yDot reference to the integrator array holding the state
 * derivative at some arbitrary point within the step</param>
      <param>forward integration direction indicator</param>
    </javadoc>
    <method type="constructor" name="DummyStepInterpolator" startLine="71" endLine="74" />
    <javadoc>
      <text>* Copy constructor.</text>
      <param>interpolator interpolator to copy from. The copy is a deep
 * copy: its arrays are separated from the original arrays of the
 * instance</param>
    </javadoc>
    <method type="constructor" name="DummyStepInterpolator" startLine="81" endLine="84" />
    <javadoc>
      <text>* Really copy the finalized instance.</text>
      <return>a copy of the finalized instance</return>
    </javadoc>
    <method type="StepInterpolator" name="doCopy" startLine="90" endLine="92" />
    <javadoc>
      <text>* Compute the state at the interpolated time.
 * In this class, this method does nothing: the interpolated state
 * is always the state at the end of the current step.</text>
      <param>theta normalized interpolation abscissa within the step
 * (theta is zero at the previous time step and one at the current time step)</param>
      <param>oneMinusThetaH time gap between the interpolated time and
 * the current time</param>
    </javadoc>
    <method type="void" name="computeInterpolatedStateAndDerivatives" startLine="103" endLine="106" />
    <javadoc>
      <text>* Write the instance to an output channel.</text>
      <param>out output channel</param>
      <exception>IOException if the instance cannot be written</exception>
    </javadoc>
    <method type="void" name="writeExternal" startLine="114" endLine="125">
      <scope startLine="119" endLine="123">
        <scope startLine="120" endLine="122" />
      </scope>
      <comment>save the state of the base class</comment>
    </method>
    <javadoc>
      <text>* Read the instance from an input channel.</text>
      <param>in input channel</param>
      <exception>IOException if the instance cannot be read</exception>
    </javadoc>
    <method type="void" name="readExternal" startLine="133" endLine="150">
      <declaration type="double" name="t" />
      <scope startLine="138" endLine="140" />
      <scope startLine="140" endLine="145">
        <scope startLine="142" endLine="144" />
      </scope>
      <comment>read the base class</comment>
      <comment>we can now set the interpolated time and state</comment>
    </method>
  </class>
</source>
