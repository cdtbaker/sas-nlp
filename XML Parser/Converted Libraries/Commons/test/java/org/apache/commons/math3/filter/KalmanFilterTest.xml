<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.filter">
  <import name="org.apache.commons.math3.linear.Array2DRowRealMatrix" />
  <import name="org.apache.commons.math3.linear.ArrayRealVector" />
  <import name="org.apache.commons.math3.linear.MatrixDimensionMismatchException" />
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <import name="org.apache.commons.math3.linear.RealVector" />
  <import name="org.apache.commons.math3.random.JDKRandomGenerator" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.util.Precision" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="KalmanFilterTest" startLine="28">
    <javadoc>
      <text>* Tests for {@link KalmanFilter}.</text>
      <version>$Id$</version>
    </javadoc>
    <method type="void" name="testTransitionMeasurementMatrixMismatch" startLine="36" endLine="57">
      <declaration type="RealMatrix[]" name="A" />
      <declaration type="RealMatrix" name="B" />
      <declaration type="RealMatrix[]" name="H" />
      <declaration type="RealMatrix[]" name="Q" />
      <declaration type="RealMatrix[]" name="R" />
      <declaration type="ProcessModel[]" name="pm" />
      <declaration type="MeasurementModel" name="mm" />
      <comment>A and H matrix do not match in dimensions</comment>
      <comment>A = [ 1 ]</comment>
      <comment>no control input</comment>
      <comment>H = [ 1 1 ]</comment>
      <comment>Q = [ 0 ]</comment>
      <comment>R = [ 0 ]</comment>
    </method>
    <method type="void" name="testTransitionControlMatrixMismatch" startLine="60" endLine="81">
      <declaration type="RealMatrix[]" name="A" />
      <declaration type="RealMatrix[]" name="B" />
      <declaration type="RealMatrix[]" name="H" />
      <declaration type="RealMatrix[]" name="Q" />
      <declaration type="RealMatrix[]" name="R" />
      <declaration type="ProcessModel[]" name="pm" />
      <declaration type="MeasurementModel" name="mm" />
      <comment>A and B matrix do not match in dimensions</comment>
      <comment>A = [ 1 ]</comment>
      <comment>B = [ 1 1 ]</comment>
      <comment>H = [ 1 ]</comment>
      <comment>Q = [ 0 ]</comment>
      <comment>R = [ 0 ]</comment>
    </method>
    <method type="void" name="testConstant" startLine="84" endLine="150">
      <declaration type="double" name="constantValue" />
      <declaration type="double" name="measurementNoise" />
      <declaration type="double" name="processNoise" />
      <declaration type="RealMatrix[]" name="A" />
      <declaration type="RealMatrix" name="B" />
      <declaration type="RealMatrix[]" name="H" />
      <declaration type="RealVector[]" name="x" />
      <declaration type="RealMatrix[]" name="Q" />
      <declaration type="RealMatrix[]" name="R" />
      <declaration type="ProcessModel[]" name="pm" />
      <declaration type="MeasurementModel" name="mm" />
      <declaration type="KalmanFilter" name="filter" />
      <declaration type="double[][]" name="expectedInitialState" />
      <declaration type="RealVector" name="pNoise" />
      <declaration type="RealVector" name="mNoise" />
      <declaration type="RandomGenerator" name="rand" />
      <scope startLine="124" endLine="145">
        <declaration type="RealVector" name="z" />
        <declaration type="double" name="diff" />
        <comment>Simulate the process</comment>
        <comment>x = A * x + p_noise</comment>
        <comment>Simulate the measurement</comment>
        <comment>z = H * x + m_noise</comment>
        <comment>state estimate shouldn't be larger than measurement noise</comment>
        <comment>System.out.println(diff);</comment>
      </scope>
      <comment>simulates a simple process with a constant state and no control input</comment>
      <comment>A = [ 1 ]</comment>
      <comment>no control input</comment>
      <comment>H = [ 1 ]</comment>
      <comment>x = [ 10 ]</comment>
      <comment>Q = [ 1e-5 ]</comment>
      <comment>R = [ 0.1 ]</comment>
      <comment>check the initial state</comment>
      <comment>iterate 60 steps</comment>
      <comment>error covariance should be already very low (< 0.02)</comment>
    </method>
    <method type="void" name="testConstantAcceleration" startLine="153" endLine="243">
      <declaration type="double" name="dt" />
      <declaration type="double" name="measurementNoise" />
      <declaration type="double" name="accelNoise" />
      <declaration type="RealMatrix[]" name="A" />
      <declaration type="RealMatrix[]" name="B" />
      <declaration type="RealMatrix[]" name="H" />
      <declaration type="RealVector[]" name="x" />
      <declaration type="RealMatrix[]" name="tmp" />
      <declaration type="RealMatrix" name="Q" />
      <declaration type="RealMatrix[]" name="P0" />
      <declaration type="RealMatrix[]" name="R" />
      <declaration type="RealVector[]" name="u" />
      <declaration type="ProcessModel" name="pm" />
      <declaration type="MeasurementModel" name="mm" />
      <declaration type="KalmanFilter" name="filter" />
      <declaration type="double[][]" name="expectedInitialState" />
      <declaration type="RandomGenerator" name="rand" />
      <declaration type="RealVector[]" name="tmpPNoise" />
      <declaration type="RealVector" name="mNoise" />
      <scope startLine="218" endLine="238">
        <declaration type="RealVector" name="pNoise" />
        <declaration type="RealVector" name="z" />
        <declaration type="double" name="diff" />
        <comment>Simulate the process</comment>
        <comment>x = A * x + B * u + pNoise</comment>
        <comment>Simulate the measurement</comment>
        <comment>z = H * x + m_noise</comment>
        <comment>state estimate shouldn't be larger than the measurement noise</comment>
      </scope>
      <comment>simulates a vehicle, accelerating at a constant rate (0.1 m/s)</comment>
      <comment>discrete time interval</comment>
      <comment>position measurement noise (meter)</comment>
      <comment>acceleration noise (meter/sec^2)</comment>
      <comment>A = [ 1 dt ]</comment>
      <comment>[ 0  1 ]</comment>
      <comment>B = [ dt^2/2 ]</comment>
      <comment>[ dt     ]</comment>
      <comment>H = [ 1 0 ]</comment>
      <comment>x = [ 0 0 ]</comment>
      <comment>Q = [ dt^4/4 dt^3/2 ]</comment>
      <comment>[ dt^3/2 dt^2   ]</comment>
      <comment>P0 = [ 1 1 ]</comment>
      <comment>[ 1 1 ]</comment>
      <comment>R = [ measurementNoise^2 ]</comment>
      <comment>constant control input, increase velocity by 0.1 m/s per cycle</comment>
      <comment>check the initial state</comment>
      <comment>iterate 60 steps</comment>
      <comment>error covariance of the velocity should be already very low (< 0.1)</comment>
    </method>
    <method type="void" name="assertVectorEquals" startLine="245" endLine="252">
      <scope startLine="248" endLine="251" />
    </method>
    <method type="void" name="assertMatrixEquals" startLine="254" endLine="265">
      <scope startLine="257" endLine="264">
        <scope startLine="260" endLine="263" />
      </scope>
    </method>
  </class>
</source>
