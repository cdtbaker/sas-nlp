<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="org.junit.Test" />
  <import name="org.junit.Assert" />
  <import name="org.apache.commons.math3.Field" />
  <import name="org.apache.commons.math3.fraction.Fraction" />
  <import name="org.apache.commons.math3.fraction.FractionConversionException" />
  <import name="org.apache.commons.math3.fraction.FractionField" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <class name="SparseFieldMatrixTest" startLine="32">
    <javadoc>
      <text>* Test cases for the {@link SparseFieldMatrix} class.</text>
      <version>$Id: SparseFieldMatrixTest.java 1364030 2012-07-21 01:10:04Z erans $</version>
    </javadoc>
    <declaration type="Fraction[][]" name="id" />
    <declaration type="Fraction[][]" name="testData" />
    <declaration type="Fraction[][]" name="testDataLU" />
    <declaration type="Fraction[][]" name="testDataPlus2" />
    <declaration type="Fraction[][]" name="testDataMinus" />
    <declaration type="Fraction[]" name="testDataRow1" />
    <declaration type="Fraction[]" name="testDataCol3" />
    <declaration type="Fraction[][]" name="testDataInv" />
    <declaration type="Fraction[]" name="preMultTest" />
    <declaration type="Fraction[][]" name="testData2" />
    <declaration type="Fraction[][]" name="testData2T" />
    <declaration type="Fraction[][]" name="testDataPlusInv" />
    <declaration type="Fraction[][]" name="luData" />
    <declaration type="Fraction[][]" name="luDataLUDecomposition" />
    <declaration type="Fraction[][]" name="singular" />
    <declaration type="Fraction[][]" name="bigSingular" />
    <declaration type="Fraction[][]" name="detData" />
    <declaration type="Fraction[][]" name="detData2" />
    <declaration type="Fraction[]" name="testVector" />
    <declaration type="Fraction[]" name="testVector2" />
    <declaration type="Fraction[][]" name="subTestData" />
    <declaration type="Fraction[][]" name="subRows02Cols13" />
    <declaration type="Fraction[][]" name="subRows03Cols12" />
    <declaration type="Fraction[][]" name="subRows03Cols123" />
    <declaration type="Fraction[][]" name="subRows20Cols123" />
    <declaration type="Fraction[][]" name="subRows31Cols31" />
    <declaration type="Fraction[][]" name="subRows01Cols23" />
    <declaration type="Fraction[][]" name="subRows23Cols00" />
    <declaration type="Fraction[][]" name="subRows00Cols33" />
    <declaration type="Fraction[][]" name="subRow0" />
    <declaration type="Fraction[][]" name="subRow3" />
    <declaration type="Fraction[][]" name="subColumn1" />
    <declaration type="Fraction[][]" name="subColumn3" />
    <declaration type="double" name="entryTolerance" />
    <declaration type="double" name="normTolerance" />
    <declaration type="Field<Fraction>" name="field" />
    <method type="constructor" name="SparseFieldMatrixTest" startLine="110" endLine="125">
      <scope startLine="111" endLine="122" />
      <scope startLine="122" endLine="124">
        <comment>ignore, can't happen</comment>
      </scope>
    </method>
    <javadoc>
      <text>* test dimensions</text>
    </javadoc>
    <method type="void" name="testDimensions" startLine="129" endLine="138">
      <declaration type="SparseFieldMatrix<Fraction>" name="m" />
      <declaration type="SparseFieldMatrix<Fraction>" name="m2" />
    </method>
    <javadoc>
      <text>* test copy functions</text>
    </javadoc>
    <method type="void" name="testCopyFunctions" startLine="142" endLine="151">
      <declaration type="SparseFieldMatrix<Fraction>" name="m1" />
      <declaration type="FieldMatrix<Fraction>" name="m2" />
      <declaration type="SparseFieldMatrix<Fraction>" name="m3" />
      <declaration type="FieldMatrix<Fraction>" name="m4" />
    </method>
    <javadoc>
      <text>* test add</text>
    </javadoc>
    <method type="void" name="testAdd" startLine="155" endLine="167">
      <declaration type="SparseFieldMatrix<Fraction>" name="m" />
      <declaration type="SparseFieldMatrix<Fraction>" name="mInv" />
      <declaration type="SparseFieldMatrix<Fraction>" name="mDataPlusInv" />
      <declaration type="FieldMatrix<Fraction>" name="mPlusMInv" />
      <scope startLine="160" endLine="166">
        <scope startLine="161" endLine="165" />
      </scope>
    </method>
    <javadoc>
      <text>* test add failure</text>
    </javadoc>
    <method type="void" name="testAddFail" startLine="171" endLine="180">
      <declaration type="SparseFieldMatrix<Fraction>" name="m" />
      <declaration type="SparseFieldMatrix<Fraction>" name="m2" />
      <scope startLine="174" endLine="177" />
      <scope startLine="177" endLine="179">
        <comment>ignored</comment>
      </scope>
    </method>
    <javadoc>
      <text>* test m-n = m + -n</text>
    </javadoc>
    <method type="void" name="testPlusMinus" startLine="185" endLine="196">
      <declaration type="SparseFieldMatrix<Fraction>" name="m" />
      <declaration type="SparseFieldMatrix<Fraction>" name="n" />
      <scope startLine="190" endLine="193" />
      <scope startLine="193" endLine="195">
        <comment>ignored</comment>
      </scope>
    </method>
    <javadoc>
      <text>* test multiply</text>
    </javadoc>
    <method type="void" name="testMultiply" startLine="200" endLine="223">
      <declaration type="SparseFieldMatrix<Fraction>" name="m" />
      <declaration type="SparseFieldMatrix<Fraction>" name="mInv" />
      <declaration type="SparseFieldMatrix<Fraction>" name="identity" />
      <declaration type="SparseFieldMatrix<Fraction>" name="m2" />
      <scope startLine="217" endLine="220" />
      <scope startLine="220" endLine="222">
        <comment>ignored</comment>
      </scope>
    </method>
    <declaration type="Fraction[][]" name="d3" />
    <declaration type="Fraction[][]" name="d4" />
    <declaration type="Fraction[][]" name="d5" />
    <method type="void" name="testMultiply2" startLine="232" endLine="237">
      <declaration type="FieldMatrix<Fraction>" name="m3" />
      <declaration type="FieldMatrix<Fraction>" name="m4" />
      <declaration type="FieldMatrix<Fraction>" name="m5" />
    </method>
    <javadoc>
      <text>* test trace</text>
    </javadoc>
    <method type="void" name="testTrace" startLine="241" endLine="251">
      <declaration type="FieldMatrix<Fraction>" name="m" />
      <scope startLine="245" endLine="248" />
      <scope startLine="248" endLine="250">
        <comment>ignored</comment>
      </scope>
    </method>
    <javadoc>
      <text>* test sclarAdd</text>
    </javadoc>
    <method type="void" name="testScalarAdd" startLine="255" endLine="259">
      <declaration type="FieldMatrix<Fraction>" name="m" />
    </method>
    <javadoc>
      <text>* test operate</text>
    </javadoc>
    <method type="void" name="testOperate" startLine="263" endLine="276">
      <declaration type="FieldMatrix<Fraction>" name="m" />
      <scope startLine="270" endLine="273" />
      <scope startLine="273" endLine="275">
        <comment>ignored</comment>
      </scope>
    </method>
    <javadoc>
      <text>* test issue MATH-209</text>
    </javadoc>
    <method type="void" name="testMath209" startLine="280" endLine="288">
      <declaration type="FieldMatrix<Fraction>[]" name="a" />
      <declaration type="Fraction[][]" name="b" />
    </method>
    <javadoc>
      <text>* test transpose</text>
    </javadoc>
    <method type="void" name="testTranspose" startLine="292" endLine="300">
      <declaration type="FieldMatrix<Fraction>" name="m" />
      <declaration type="FieldMatrix<Fraction>" name="mIT" />
      <declaration type="FieldMatrix<Fraction>" name="mTI" />
      <declaration type="FieldMatrix<Fraction>" name="mt" />
    </method>
    <javadoc>
      <text>* test preMultiply by vector</text>
    </javadoc>
    <method type="void" name="testPremultiplyVector" startLine="304" endLine="317">
      <declaration type="FieldMatrix<Fraction>" name="m" />
      <scope startLine="311" endLine="314" />
      <scope startLine="314" endLine="316">
        <comment>ignored</comment>
      </scope>
    </method>
    <method type="void" name="testPremultiply" startLine="320" endLine="343">
      <declaration type="FieldMatrix<Fraction>" name="m3" />
      <declaration type="FieldMatrix<Fraction>" name="m4" />
      <declaration type="FieldMatrix<Fraction>" name="m5" />
      <declaration type="SparseFieldMatrix<Fraction>" name="m" />
      <declaration type="SparseFieldMatrix<Fraction>" name="mInv" />
      <declaration type="SparseFieldMatrix<Fraction>" name="identity" />
      <scope startLine="337" endLine="340" />
      <scope startLine="340" endLine="342">
        <comment>ignored</comment>
      </scope>
    </method>
    <method type="void" name="testGetVectors" startLine="346" endLine="362">
      <declaration type="FieldMatrix<Fraction>" name="m" />
      <scope startLine="350" endLine="353" />
      <scope startLine="353" endLine="355">
        <comment>ignored</comment>
      </scope>
      <scope startLine="356" endLine="359" />
      <scope startLine="359" endLine="361">
        <comment>ignored</comment>
      </scope>
    </method>
    <method type="void" name="testGetEntry" startLine="365" endLine="374">
      <declaration type="FieldMatrix<Fraction>" name="m" />
      <scope startLine="368" endLine="371" />
      <scope startLine="371" endLine="373">
        <comment>expected</comment>
      </scope>
    </method>
    <javadoc>
      <text>* test examples in user guide</text>
    </javadoc>
    <method type="void" name="testExamples" startLine="378" endLine="410">
      <declaration type="Fraction[][]" name="matrixData" />
      <declaration type="FieldMatrix<Fraction>" name="m" />
      <declaration type="Fraction[][]" name="matrixData2" />
      <declaration type="FieldMatrix<Fraction>" name="n" />
      <declaration type="FieldMatrix<Fraction>" name="p" />
      <declaration type="FieldMatrix<Fraction>" name="pInverse" />
      <declaration type="Fraction[][]" name="coefficientsData" />
      <declaration type="FieldMatrix<Fraction>" name="coefficients" />
      <declaration type="Fraction[]" name="constants" />
      <declaration type="Fraction[]" name="solution" />
      <comment>Create a real matrix with two rows and three columns</comment>
      <comment>One more with three rows, two columns</comment>
      <comment>Now multiply m by n</comment>
      <comment>Invert p</comment>
      <comment>Solve example</comment>
    </method>
    <method type="void" name="testSubMatrix" startLine="414" endLine="476">
      <declaration type="FieldMatrix<Fraction>" name="m" />
      <declaration type="FieldMatrix<Fraction>" name="mRows23Cols00" />
      <declaration type="FieldMatrix<Fraction>" name="mRows00Cols33" />
      <declaration type="FieldMatrix<Fraction>" name="mRows01Cols23" />
      <declaration type="FieldMatrix<Fraction>" name="mRows02Cols13" />
      <declaration type="FieldMatrix<Fraction>" name="mRows03Cols12" />
      <declaration type="FieldMatrix<Fraction>" name="mRows03Cols123" />
      <declaration type="FieldMatrix<Fraction>" name="mRows20Cols123" />
      <declaration type="FieldMatrix<Fraction>" name="mRows31Cols31" />
      <scope startLine="440" endLine="443" />
      <scope startLine="443" endLine="445">
        <comment>expected</comment>
      </scope>
      <scope startLine="446" endLine="449" />
      <scope startLine="449" endLine="451">
        <comment>expected</comment>
      </scope>
      <scope startLine="452" endLine="455" />
      <scope startLine="455" endLine="457">
        <comment>expected</comment>
      </scope>
      <scope startLine="458" endLine="461" />
      <scope startLine="461" endLine="463">
        <comment>expected</comment>
      </scope>
      <scope startLine="464" endLine="467" />
      <scope startLine="467" endLine="469">
        <comment>expected</comment>
      </scope>
      <scope startLine="470" endLine="473" />
      <scope startLine="473" endLine="475">
        <comment>expected</comment>
      </scope>
    </method>
    <method type="void" name="testGetRowMatrix" startLine="479" endLine="497">
      <declaration type="FieldMatrix<Fraction>" name="m" />
      <declaration type="FieldMatrix<Fraction>" name="mRow0" />
      <declaration type="FieldMatrix<Fraction>" name="mRow3" />
      <scope startLine="485" endLine="488" />
      <scope startLine="488" endLine="490">
        <comment>expected</comment>
      </scope>
      <scope startLine="491" endLine="494" />
      <scope startLine="494" endLine="496">
        <comment>expected</comment>
      </scope>
    </method>
    <method type="void" name="testGetColumnMatrix" startLine="500" endLine="518">
      <declaration type="FieldMatrix<Fraction>" name="m" />
      <declaration type="FieldMatrix<Fraction>" name="mColumn1" />
      <declaration type="FieldMatrix<Fraction>" name="mColumn3" />
      <scope startLine="506" endLine="509" />
      <scope startLine="509" endLine="511">
        <comment>expected</comment>
      </scope>
      <scope startLine="512" endLine="515" />
      <scope startLine="515" endLine="517">
        <comment>expected</comment>
      </scope>
    </method>
    <method type="void" name="testGetRowVector" startLine="521" endLine="539">
      <declaration type="FieldMatrix<Fraction>" name="m" />
      <declaration type="FieldVector<Fraction>" name="mRow0" />
      <declaration type="FieldVector<Fraction>" name="mRow3" />
      <scope startLine="527" endLine="530" />
      <scope startLine="530" endLine="532">
        <comment>expected</comment>
      </scope>
      <scope startLine="533" endLine="536" />
      <scope startLine="536" endLine="538">
        <comment>expected</comment>
      </scope>
    </method>
    <method type="void" name="testGetColumnVector" startLine="542" endLine="560">
      <declaration type="FieldMatrix<Fraction>" name="m" />
      <declaration type="FieldVector<Fraction>" name="mColumn1" />
      <declaration type="FieldVector<Fraction>" name="mColumn3" />
      <scope startLine="548" endLine="551" />
      <scope startLine="551" endLine="553">
        <comment>expected</comment>
      </scope>
      <scope startLine="554" endLine="557" />
      <scope startLine="557" endLine="559">
        <comment>expected</comment>
      </scope>
    </method>
    <method type="FieldVector<Fraction>" name="columnToVector" startLine="562" endLine="568">
      <declaration type="Fraction[]" name="data" />
      <scope startLine="564" endLine="566" />
    </method>
    <method type="void" name="testEqualsAndHashCode" startLine="571" endLine="582">
      <declaration type="SparseFieldMatrix<Fraction>" name="m" />
      <declaration type="SparseFieldMatrix<Fraction>" name="m1" />
      <declaration type="SparseFieldMatrix<Fraction>" name="mt" />
    </method>
    <method type="void" name="testSetSubMatrix" startLine="596" endLine="672">
      <declaration type="SparseFieldMatrix<Fraction>" name="m" />
      <declaration type="FieldMatrix<Fraction>[]" name="expected" />
      <declaration type="SparseFieldMatrix<Fraction>[]" name="matrix" />
      <scope startLine="623" endLine="626" />
      <scope startLine="626" endLine="628">
        <comment>expected</comment>
      </scope>
      <scope startLine="630" endLine="633" />
      <scope startLine="633" endLine="635">
        <comment>expected</comment>
      </scope>
      <scope startLine="636" endLine="639" />
      <scope startLine="639" endLine="641">
        <comment>expected</comment>
      </scope>
      <scope startLine="644" endLine="647" />
      <scope startLine="647" endLine="649">
        <comment>expected</comment>
      </scope>
      <scope startLine="650" endLine="653" />
      <scope startLine="653" endLine="655">
        <comment>expected</comment>
      </scope>
      <scope startLine="658" endLine="661" />
      <scope startLine="661" endLine="663">
        <comment>expected</comment>
      </scope>
      <scope startLine="666" endLine="669" />
      <scope startLine="669" endLine="671">
        <comment>expected</comment>
      </scope>
      <comment>javadoc example</comment>
      <comment>dimension overflow</comment>
      <comment>dimension underflow</comment>
      <comment>null</comment>
      <comment>ragged</comment>
      <comment>empty</comment>
    </method>
    <javadoc>
      <text>* verifies that two matrices are close (1-norm)</text>
    </javadoc>
    <method type="void" name="assertClose" startLine="678" endLine="685">
      <scope startLine="679" endLine="684">
        <scope startLine="680" endLine="682" />
      </scope>
    </method>
    <javadoc>
      <text>* verifies that two vectors are close (sup norm)</text>
    </javadoc>
    <method type="void" name="assertClose" startLine="689" endLine="697">
      <scope startLine="690" endLine="692" />
      <scope startLine="693" endLine="696" />
    </method>
    <method type="SparseFieldMatrix<Fraction>" name="createSparseMatrix" startLine="699" endLine="707">
      <declaration type="SparseFieldMatrix<Fraction>" name="matrix" />
      <scope startLine="701" endLine="705">
        <scope startLine="702" endLine="704" />
      </scope>
    </method>
    <comment>3 x 3 identity matrix</comment>
    <comment>Test data for group operations</comment>
    <comment>lu decomposition tests</comment>
    <comment>singular matrices</comment>
    <comment>4th</comment>
    <comment>row</comment>
    <comment>=</comment>
    <comment>1st</comment>
    <comment>+</comment>
    <comment>2nd</comment>
    <comment>vectors</comment>
    <comment>submatrix accessor tests</comment>
    <comment>array selections</comment>
    <comment>effective permutations</comment>
    <comment>contiguous ranges</comment>
    <comment>row matrices</comment>
    <comment>column matrices</comment>
    <comment>tolerances</comment>
    <comment>Additional Test for Array2DRowRealMatrixTest.testMultiply</comment>
    <comment>test submatrix accessors</comment>
    <comment>Disable for now
@Test
public void testToString() {
SparseFieldMatrix<Fraction> m = createSparseMatrix(testData);
Assert.assertEquals("SparseFieldMatrix<Fraction>{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}",
m.toString());
m = new SparseFieldMatrix<Fraction>(field, 1, 1);
Assert.assertEquals("SparseFieldMatrix<Fraction>{{0.0}}", m.toString());
}</comment>
    <comment>--------------- -----------------Protected methods</comment>
  </class>
</source>
