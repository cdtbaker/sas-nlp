<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.dfp">
  <import name="org.junit.After" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Before" />
  <import name="org.junit.Test" />
  <class name="DfpMathTest" startLine="25">
    <declaration type="DfpField" name="factory" />
    <declaration type="Dfp" name="pinf" />
    <declaration type="Dfp" name="ninf" />
    <declaration type="Dfp" name="nan" />
    <declaration type="Dfp" name="qnan" />
    <method type="void" name="setUp" startLine="34" endLine="46">
      <declaration type="Dfp" name="pi" />
      <comment>Some basic setup.  Define some constants and clear the status flags</comment>
      <comment>force loading of dfpmath</comment>
    </method>
    <method type="void" name="tearDown" startLine="49" endLine="54" />
    <method type="void" name="test" startLine="60" endLine="75">
      <declaration type="boolean" name="b" />
      <comment>NaNs involved</comment>
      <comment>distinguish +/- zero</comment>
    </method>
    <method type="void" name="testPow" startLine="79" endLine="472">
      <comment>Test special cases  exponent of zero</comment>
      <comment>exponent of one</comment>
      <comment>exponent of NaN</comment>
      <comment>radix of NaN</comment>
      <comment>(x > 1) ^ pinf = pinf,    (x < -1) ^ pinf = pinf</comment>
      <comment>(x > 1) ^ ninf = +0,    (x < -1) ^ ninf = +0</comment>
      <comment>(-1 < x < 1) ^ pinf = 0</comment>
      <comment>(-1 < x < 1) ^ ninf = pinf</comment>
      <comment>+/- 1  ^ +/-inf  = NaN</comment>
      <comment>+0  ^ +anything except 0, NAN  = +0</comment>
      <comment>-0  ^ +anything except 0, NAN, odd integer  = +0</comment>
      <comment>+0  ^ -anything except 0, NAN  = +INF</comment>
      <comment>-0  ^ -anything except 0, NAN, odd integer  = +INF</comment>
      <comment>-0  ^ -odd integer   =  -INF</comment>
      <comment>-0  ^ +odd integer   =  -0</comment>
      <comment>pinf  ^ +anything   = pinf</comment>
      <comment>pinf  ^ -anything   = +0</comment>
      <comment>ninf  ^ anything   = -0 ^ -anything</comment>
      <comment>ninf  ^ -anything except 0, NAN, odd integer  = +0</comment>
      <comment>ninf  ^ +anything except 0, NAN, odd integer  = +INF</comment>
      <comment>ninf  ^ +odd integer   =  -INF</comment>
      <comment>ninf  ^ -odd integer   =  -0</comment>
      <comment>-anything ^ integer</comment>
      <comment>-anything ^ noninteger = NaN</comment>
      <comment>Some fractional cases.</comment>
    </method>
    <method type="void" name="testSin" startLine="476" endLine="584">
      <comment>pi/4</comment>
      <comment>-pi/4</comment>
      <comment>-pi/4</comment>
      <comment>off by one ULP</comment>
      <comment>off by one ULP</comment>
      <comment>off by one ULP</comment>
    </method>
    <comment>Generic test function.  Takes params x and y and tests them for</comment>
    <comment>equality.  Then checks the status flags against the flags argument.</comment>
    <comment>If the test fail, it prints the desc string</comment>
  </class>
</source>
