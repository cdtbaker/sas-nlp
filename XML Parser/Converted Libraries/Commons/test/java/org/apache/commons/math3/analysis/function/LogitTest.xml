<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.function">
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.FunctionUtils" />
  <import name="org.apache.commons.math3.analysis.differentiation.DerivativeStructure" />
  <import name="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well1024a" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="LogitTest" startLine="34">
    <javadoc>
      <text>* Test for class {@link Logit}.</text>
    </javadoc>
    <declaration type="double" name="EPS" />
    <method type="void" name="testPreconditions1" startLine="41" endLine="47">
      <declaration type="double" name="lo" />
      <declaration type="double" name="hi" />
      <declaration type="UnivariateFunction" name="f" />
    </method>
    <method type="void" name="testPreconditions2" startLine="50" endLine="56">
      <declaration type="double" name="lo" />
      <declaration type="double" name="hi" />
      <declaration type="UnivariateFunction" name="f" />
    </method>
    <method type="void" name="testSomeValues" startLine="59" endLine="67">
      <declaration type="double" name="lo" />
      <declaration type="double" name="hi" />
      <declaration type="UnivariateFunction" name="f" />
    </method>
    <method type="void" name="testDerivative" startLine="70" endLine="77">
      <declaration type="double" name="lo" />
      <declaration type="double" name="hi" />
      <declaration type="Logit" name="f" />
      <declaration type="DerivativeStructure" name="f15" />
    </method>
    <method type="void" name="testDerivativeLargeArguments" startLine="80" endLine="95">
      <declaration type="Logit" name="f" />
      <scope startLine="85" endLine="94">
        <scope startLine="86" endLine="89" />
        <scope startLine="89" endLine="91" />
        <scope startLine="91" endLine="93" />
        <comment>expected</comment>
      </scope>
    </method>
    <method type="void" name="testDerivativesHighOrder" startLine="98" endLine="106">
      <declaration type="DerivativeStructure" name="l" />
    </method>
    <method type="void" name="testParametricUsage1" startLine="109" endLine="112">
      <declaration type="Logit.Parametric" name="g" />
    </method>
    <method type="void" name="testParametricUsage2" startLine="115" endLine="118">
      <declaration type="Logit.Parametric" name="g" />
    </method>
    <method type="void" name="testParametricUsage3" startLine="121" endLine="124">
      <declaration type="Logit.Parametric" name="g" />
    </method>
    <method type="void" name="testParametricUsage4" startLine="127" endLine="130">
      <declaration type="Logit.Parametric" name="g" />
    </method>
    <method type="void" name="testParametricUsage5" startLine="133" endLine="136">
      <declaration type="Logit.Parametric" name="g" />
    </method>
    <method type="void" name="testParametricUsage6" startLine="139" endLine="142">
      <declaration type="Logit.Parametric" name="g" />
    </method>
    <method type="void" name="testParametricValue" startLine="145" endLine="154">
      <declaration type="double" name="lo" />
      <declaration type="double" name="hi" />
      <declaration type="Logit" name="f" />
      <declaration type="Logit.Parametric" name="g" />
    </method>
    <method type="void" name="testValueWithInverseFunction" startLine="157" endLine="173">
      <declaration type="double" name="lo" />
      <declaration type="double" name="hi" />
      <declaration type="Logit" name="f" />
      <declaration type="Sigmoid" name="g" />
      <declaration type="RandomGenerator" name="random" />
      <declaration type="UnivariateDifferentiableFunction" name="id" />
      <scope startLine="166" endLine="169">
        <declaration type="double" name="x" />
      </scope>
    </method>
    <method type="void" name="testDerivativesWithInverseFunction" startLine="176" endLine="224">
      <declaration type="double[][]" name="epsilon" />
      <declaration type="double" name="lo" />
      <declaration type="double" name="hi" />
      <declaration type="Logit" name="f" />
      <declaration type="Sigmoid" name="g" />
      <declaration type="RandomGenerator" name="random" />
      <declaration type="UnivariateDifferentiableFunction" name="id" />
      <scope startLine="185" endLine="223">
        <declaration type="double" name="max" />
        <scope startLine="187" endLine="195">
          <declaration type="double" name="x" />
          <declaration type="DerivativeStructure" name="dsX" />
        </scope>
        <declaration type="DerivativeStructure" name="dsLo" />
        <scope startLine="200" endLine="203" />
        <scope startLine="203" endLine="206" />
        <scope startLine="206" endLine="209" />
        <declaration type="DerivativeStructure" name="dsHi" />
        <scope startLine="212" endLine="215" />
        <scope startLine="215" endLine="218" />
        <scope startLine="218" endLine="221" />
        <comment>each function evaluates correctly near boundaries,</comment>
        <comment>but combination leads to NaN as some intermediate point is infinite</comment>
      </scope>
    </method>
  </class>
</source>
