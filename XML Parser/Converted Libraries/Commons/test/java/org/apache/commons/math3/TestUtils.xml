<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3">
  <import name="java.io.ByteArrayInputStream" />
  <import name="java.io.ByteArrayOutputStream" />
  <import name="java.io.IOException" />
  <import name="java.io.ObjectInputStream" />
  <import name="java.io.ObjectOutputStream" />
  <import name="java.text.DecimalFormat" />
  <import name="org.apache.commons.math3.complex.Complex" />
  <import name="org.apache.commons.math3.complex.ComplexFormat" />
  <import name="org.apache.commons.math3.distribution.RealDistribution" />
  <import name="org.apache.commons.math3.linear.FieldMatrix" />
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <import name="org.apache.commons.math3.linear.RealVector" />
  <import name="org.apache.commons.math3.stat.inference.ChiSquareTest" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.Precision" />
  <import name="org.junit.Assert" />
  <class name="TestUtils" startLine="39">
    <javadoc>
      <version>$Id: TestUtils.java 1363575 2012-07-19 23:02:47Z erans $</version>
    </javadoc>
    <javadoc>
      <text>* Collection of static methods used in math unit tests.</text>
    </javadoc>
    <method type="constructor" name="TestUtils" startLine="46" endLine="48" />
    <javadoc>
      <text>* Verifies that expected and actual are within delta, or are both NaN or
 * infinities of the same sign.</text>
    </javadoc>
    <method type="void" name="assertEquals" startLine="54" endLine="56" />
    <javadoc>
      <text>* Verifies that expected and actual are within delta, or are both NaN or
 * infinities of the same sign.</text>
    </javadoc>
    <method type="void" name="assertEquals" startLine="62" endLine="70">
      <scope startLine="64" endLine="67" />
      <scope startLine="67" endLine="69" />
      <comment>check for NaN</comment>
    </method>
    <javadoc>
      <text>* Verifies that the two arguments are exactly the same, either
 * both NaN or infinities of same sign, or identical floating point values.</text>
    </javadoc>
    <method type="void" name="assertSame" startLine="76" endLine="78" />
    <javadoc>
      <text>* Verifies that real and imaginary parts of the two complex arguments
 * are exactly the same.  Also ensures that NaN / infinite components match.</text>
    </javadoc>
    <method type="void" name="assertSame" startLine="84" endLine="87" />
    <javadoc>
      <text>* Verifies that real and imaginary parts of the two complex arguments
 * differ by at most delta.  Also ensures that NaN / infinite components match.</text>
    </javadoc>
    <method type="void" name="assertEquals" startLine="93" endLine="96" />
    <javadoc>
      <text>* Verifies that two double arrays have equal entries, up to tolerance</text>
    </javadoc>
    <method type="void" name="assertEquals" startLine="101" endLine="103" />
    <javadoc>
      <text>* Serializes an object to a bytes array and then recovers the object from the bytes array.
 * Returns the deserialized object.</text>
      <param>o  object to serialize and recover</param>
      <return>the recovered, deserialized object</return>
    </javadoc>
    <method type="Object" name="serializeAndRecover" startLine="112" endLine="128">
      <scope startLine="113" endLine="123">
        <declaration type="ByteArrayOutputStream" name="bos" />
        <declaration type="ObjectOutputStream" name="so" />
        <declaration type="ByteArrayInputStream" name="bis" />
        <declaration type="ObjectInputStream" name="si" />
        <comment>serialize the Object</comment>
        <comment>deserialize the Object</comment>
      </scope>
      <scope startLine="123" endLine="125" />
      <scope startLine="125" endLine="127" />
    </method>
    <javadoc>
      <text>* Verifies that serialization preserves equals and hashCode.
 * Serializes the object, then recovers it and checks equals and hash code.</text>
      <param>object  the object to serialize and recover</param>
    </javadoc>
    <method type="void" name="checkSerializedEquality" startLine="136" endLine="140">
      <declaration type="Object" name="object2" />
    </method>
    <javadoc>
      <text>* Verifies that the relative error in actual vs. expected is less than or
 * equal to relativeError.  If expected is infinite or NaN, actual must be
 * the same (NaN or infinity of the same sign).</text>
      <param>expected expected value</param>
      <param>actual  observed value</param>
      <param>relativeError  maximum allowable relative error</param>
    </javadoc>
    <method type="void" name="assertRelativelyEquals" startLine="152" endLine="154" />
    <javadoc>
      <text>* Verifies that the relative error in actual vs. expected is less than or
 * equal to relativeError.  If expected is infinite or NaN, actual must be
 * the same (NaN or infinity of the same sign).</text>
      <param>msg  message to return with failure</param>
      <param>expected expected value</param>
      <param>actual  observed value</param>
      <param>relativeError  maximum allowable relative error</param>
    </javadoc>
    <method type="void" name="assertRelativelyEquals" startLine="167" endLine="180">
      <scope startLine="168" endLine="170" />
      <scope startLine="170" endLine="172" />
      <scope startLine="172" endLine="174" />
      <scope startLine="174" endLine="176" />
      <scope startLine="176" endLine="179">
        <declaration type="double" name="absError" />
      </scope>
    </method>
    <javadoc>
      <text>* Fails iff values does not contain a number within epsilon of z.</text>
      <param>msg  message to return with failure</param>
      <param>values complex array to search</param>
      <param>z  value sought</param>
      <param>epsilon  tolerance</param>
    </javadoc>
    <method type="void" name="assertContains" startLine="191" endLine="199">
      <scope startLine="192" endLine="197">
        <scope startLine="194" endLine="196" />
      </scope>
    </method>
    <javadoc>
      <text>* Fails iff values does not contain a number within epsilon of z.</text>
      <param>values complex array to search</param>
      <param>z  value sought</param>
      <param>epsilon  tolerance</param>
    </javadoc>
    <method type="void" name="assertContains" startLine="209" endLine="211" />
    <javadoc>
      <text>* Fails iff values does not contain a number within epsilon of x.</text>
      <param>msg  message to return with failure</param>
      <param>values double array to search</param>
      <param>x value sought</param>
      <param>epsilon  tolerance</param>
    </javadoc>
    <method type="void" name="assertContains" startLine="222" endLine="229">
      <scope startLine="223" endLine="227">
        <scope startLine="224" endLine="226" />
      </scope>
    </method>
    <javadoc>
      <text>* Fails iff values does not contain a number within epsilon of x.</text>
      <param>values double array to search</param>
      <param>x value sought</param>
      <param>epsilon  tolerance</param>
    </javadoc>
    <method type="void" name="assertContains" startLine="239" endLine="241" />
    <javadoc>
      <text>* Asserts that all entries of the specified vectors are equal to within a
 * positive {@code delta}.</text>
      <param>message the identifying message for the assertion error (can be{@code null})</param>
      <param>expected expected value</param>
      <param>actual actual value</param>
      <param>delta the maximum difference between the entries of the expected
 * and actual vectors for which both entries are still considered equal</param>
    </javadoc>
    <method type="void" name="assertEquals" startLine="255" endLine="263">
      <declaration type="String" name="msgAndSep" />
      <scope startLine="259" endLine="262" />
    </method>
    <javadoc>
      <text>* Asserts that all entries of the specified vectors are equal to within a
 * positive {@code delta}.</text>
      <param>message the identifying message for the assertion error (can be{@code null})</param>
      <param>expected expected value</param>
      <param>actual actual value</param>
      <param>delta the maximum difference between the entries of the expected
 * and actual vectors for which both entries are still considered equal</param>
    </javadoc>
    <method type="void" name="assertEquals" startLine="277" endLine="286">
      <declaration type="String" name="msgAndSep" />
      <declaration type="int" name="dim" />
      <scope startLine="282" endLine="285" />
    </method>
    <javadoc>
      <text>* verifies that two matrices are close (1-norm)</text>
    </javadoc>
    <method type="void" name="assertEquals" startLine="289" endLine="312">
      <scope startLine="294" endLine="302">
        <declaration type="StringBuilder" name="messageBuffer" />
      </scope>
      <declaration type="RealMatrix" name="delta" />
      <scope startLine="305" endLine="311">
        <declaration type="StringBuilder" name="messageBuffer" />
      </scope>
    </method>
    <javadoc>
      <text>* verifies that two matrices are equal</text>
    </javadoc>
    <method type="void" name="assertEquals" startLine="316" endLine="338">
      <scope startLine="321" endLine="329">
        <declaration type="StringBuilder" name="messageBuffer" />
      </scope>
      <scope startLine="331" endLine="337">
        <scope startLine="332" endLine="336">
          <declaration type="FieldElement<?>" name="eij" />
          <declaration type="FieldElement<?>" name="oij" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* verifies that two arrays are close (sup norm)</text>
    </javadoc>
    <method type="void" name="assertEquals" startLine="341" endLine="367">
      <declaration type="StringBuilder" name="out" />
      <scope startLine="343" endLine="350" />
      <declaration type="boolean" name="failure" />
      <scope startLine="352" endLine="363">
        <scope startLine="353" endLine="362" />
      </scope>
      <scope startLine="364" endLine="366" />
    </method>
    <javadoc>
      <text>* verifies that two arrays are equal</text>
    </javadoc>
    <method type="void" name="assertEquals" startLine="370" endLine="377">
      <scope startLine="371" endLine="373" />
      <scope startLine="374" endLine="376" />
    </method>
    <javadoc>
      <text>* Computes the sum of squared deviations of <values> from <target></text>
      <param>values array of deviates</param>
      <param>target value to compute deviations from</param>
      <return>sum of squared deviations</return>
    </javadoc>
    <method type="double" name="sumSquareDev" startLine="386" endLine="393">
      <declaration type="double" name="sumsq" />
      <scope startLine="388" endLine="391">
        <declaration type="double" name="dev" />
      </scope>
    </method>
    <javadoc>
      <text>* Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test
 * statistics if the null hypothesis can be rejected with confidence 100 * (1 - alpha)%</text>
      <param>valueLabels labels for the values of the discrete distribution under test</param>
      <param>expected expected counts</param>
      <param>observed observed counts</param>
      <param>alpha significance level of the test</param>
    </javadoc>
    <method type="void" name="assertChiSquareAccept" startLine="404" endLine="431">
      <declaration type="ChiSquareTest" name="chiSquareTest" />
      <scope startLine="408" endLine="430">
        <declaration type="StringBuilder" name="msgBuffer" />
        <declaration type="DecimalFormat" name="df" />
        <scope startLine="418" endLine="425" />
      </scope>
      <comment>Fail if we can reject null hypothesis that distributions are the same</comment>
    </method>
    <javadoc>
      <text>* Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test
 * statistics if the null hypothesis can be rejected with confidence 100 * (1 - alpha)%</text>
      <param>values integer values whose observed and expected counts are being compared</param>
      <param>expected expected counts</param>
      <param>observed observed counts</param>
      <param>alpha significance level of the test</param>
    </javadoc>
    <method type="void" name="assertChiSquareAccept" startLine="442" endLine="448">
      <declaration type="String[]" name="labels" />
      <scope startLine="444" endLine="446" />
    </method>
    <javadoc>
      <text>* Asserts the null hypothesis for a ChiSquare test.  Fails and dumps arguments and test
 * statistics if the null hypothesis can be rejected with confidence 100 * (1 - alpha)%</text>
      <param>expected expected counts</param>
      <param>observed observed counts</param>
      <param>alpha significance level of the test</param>
    </javadoc>
    <method type="void" name="assertChiSquareAccept" startLine="458" endLine="464">
      <declaration type="String[]" name="labels" />
      <scope startLine="460" endLine="462" />
    </method>
    <javadoc>
      <text>* Computes the 25th, 50th and 75th percentiles of the given distribution and returns
 * these values in an array.</text>
    </javadoc>
    <method type="double[]" name="getDistributionQuartiles" startLine="470" endLine="476">
      <declaration type="double[]" name="quantiles" />
    </method>
    <javadoc>
      <text>* Updates observed counts of values in quartiles.
 * counts[0] <-> 1st quartile ... counts[3] <-> top quartile</text>
    </javadoc>
    <method type="void" name="updateCounts" startLine="482" endLine="492">
      <scope startLine="483" endLine="485" />
      <scope startLine="485" endLine="487" />
      <scope startLine="487" endLine="489" />
      <scope startLine="489" endLine="491" />
    </method>
    <javadoc>
      <text>* Eliminates points with zero mass from densityPoints and densityValues parallel
 * arrays.  Returns the number of positive mass points and collapses the arrays so
 * that the first <returned value> elements of the input arrays represent the positive
 * mass points.</text>
    </javadoc>
    <method type="int" name="eliminateZeroMassPoints" startLine="500" endLine="522">
      <declaration type="int" name="positiveMassCount" />
      <scope startLine="502" endLine="506">
        <scope startLine="503" endLine="505" />
      </scope>
      <scope startLine="507" endLine="520">
        <declaration type="int[]" name="newPoints" />
        <declaration type="double[]" name="newValues" />
        <declaration type="int" name="j" />
        <scope startLine="511" endLine="517">
          <scope startLine="512" endLine="516" />
        </scope>
      </scope>
    </method>
  </class>
</source>
