<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.regression">
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <import name="org.apache.commons.math3.stat.correlation.PearsonsCorrelation" />
  <import name="org.apache.commons.math3.TestUtils" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="MillerUpdatingRegressionTest" startLine="26">
    <javadoc>
      <text>* MillerUpdatingRegression tests.</text>
    </javadoc>
    <method type="constructor" name="MillerUpdatingRegressionTest" startLine="31" endLine="32" />
    <declaration type="double[][]" name="airdata" />
    <javadoc>
      <text>* Test of hasIntercept method, of class MillerUpdatingRegression.</text>
    </javadoc>
    <method type="void" name="testHasIntercept" startLine="49" endLine="58">
      <declaration type="MillerUpdatingRegression" name="instance" />
      <scope startLine="51" endLine="53" />
      <scope startLine="55" endLine="57" />
    </method>
    <javadoc>
      <text>* Test of getN method, of class MillerUpdatingRegression.</text>
    </javadoc>
    <method type="void" name="testAddObsGetNClear" startLine="64" endLine="87">
      <declaration type="MillerUpdatingRegression" name="instance" />
      <declaration type="double[][][]" name="xAll" />
      <declaration type="double[]" name="y" />
      <scope startLine="68" endLine="74" />
      <scope startLine="76" endLine="78" />
      <scope startLine="80" endLine="82" />
      <scope startLine="83" endLine="85" />
    </method>
    <method type="void" name="testNegativeTestAddObs" startLine="90" endLine="133">
      <declaration type="MillerUpdatingRegression" name="instance" />
      <scope startLine="92" endLine="95" />
      <scope startLine="95" endLine="96" />
      <scope startLine="96" endLine="98" />
      <scope startLine="99" endLine="102" />
      <scope startLine="102" endLine="103" />
      <scope startLine="103" endLine="105" />
      <scope startLine="106" endLine="108" />
      <scope startLine="108" endLine="110" />
      <scope startLine="114" endLine="117" />
      <scope startLine="117" endLine="118" />
      <scope startLine="118" endLine="120" />
      <scope startLine="121" endLine="124" />
      <scope startLine="124" endLine="125" />
      <scope startLine="125" endLine="127" />
      <scope startLine="128" endLine="130" />
      <scope startLine="130" endLine="132" />
      <comment>now we try it without an intercept</comment>
    </method>
    <method type="void" name="testNegativeTestAddMultipleObs" startLine="136" endLine="159">
      <declaration type="MillerUpdatingRegression" name="instance" />
      <scope startLine="138" endLine="144">
        <declaration type="double[][]" name="tst" />
        <declaration type="double[]" name="y" />
      </scope>
      <scope startLine="144" endLine="145" />
      <scope startLine="145" endLine="147" />
      <scope startLine="149" endLine="155">
        <declaration type="double[][]" name="tst" />
        <declaration type="double[]" name="y" />
      </scope>
      <scope startLine="155" endLine="156" />
      <scope startLine="156" endLine="158" />
    </method>
    <method type="void" name="testRegressAirlineConstantExternal" startLine="165" endLine="195">
      <declaration type="MillerUpdatingRegression" name="instance" />
      <declaration type="double[][][]" name="x" />
      <declaration type="double[]" name="y" />
      <scope startLine="169" endLine="176" />
      <scope startLine="179" endLine="192">
        <declaration type="RegressionResults" name="result" />
      </scope>
      <scope startLine="192" endLine="194" />
    </method>
    <method type="void" name="testRegressAirlineConstantInternal" startLine="198" endLine="228">
      <declaration type="MillerUpdatingRegression" name="instance" />
      <declaration type="double[][][]" name="x" />
      <declaration type="double[]" name="y" />
      <scope startLine="202" endLine="208" />
      <scope startLine="211" endLine="225">
        <declaration type="RegressionResults" name="result" />
      </scope>
      <scope startLine="225" endLine="227" />
    </method>
    <method type="void" name="testFilippelli" startLine="231" endLine="380">
      <declaration type="double[][]" name="data" />
      <declaration type="MillerUpdatingRegression" name="model" />
      <declaration type="int" name="off" />
      <declaration type="double[]" name="tmp" />
      <declaration type="int" name="nobs" />
      <scope startLine="320" endLine="342">
        <comment>tmp[1] = tmp[0] * tmp[0];</comment>
        <comment>tmp[2] = tmp[0] * tmp[1]; ^3</comment>
        <comment>tmp[3] = tmp[1] * tmp[1]; ^4</comment>
        <comment>tmp[4] = tmp[2] * tmp[1]; ^5</comment>
        <comment>tmp[5] = tmp[2] * tmp[2]; ^6</comment>
        <comment>tmp[6] = tmp[2] * tmp[3]; ^7</comment>
        <comment>tmp[7] = tmp[3] * tmp[3]; ^8</comment>
        <comment>tmp[8] = tmp[4] * tmp[3]; ^9</comment>
        <comment>tmp[9] = tmp[4] * tmp[4]; ^10</comment>
      </scope>
      <declaration type="RegressionResults" name="result" />
      <declaration type="double[]" name="betaHat" />
      <declaration type="double[]" name="se" />
      <comment />
      <comment />
      <comment />
    </method>
    <method type="void" name="testWampler1" startLine="383" endLine="440">
      <declaration type="double[][]" name="data" />
      <declaration type="MillerUpdatingRegression" name="model" />
      <declaration type="int" name="off" />
      <declaration type="double[]" name="tmp" />
      <declaration type="int" name="nobs" />
      <scope startLine="411" endLine="419" />
      <declaration type="RegressionResults" name="result" />
      <declaration type="double[]" name="betaHat" />
      <declaration type="double[]" name="se" />
      <comment />
      <comment />
      <comment />
    </method>
    <method type="void" name="testWampler2" startLine="443" endLine="499">
      <declaration type="double[][]" name="data" />
      <declaration type="MillerUpdatingRegression" name="model" />
      <declaration type="int" name="off" />
      <declaration type="double[]" name="tmp" />
      <declaration type="int" name="nobs" />
      <scope startLine="471" endLine="479" />
      <declaration type="RegressionResults" name="result" />
      <declaration type="double[]" name="betaHat" />
      <declaration type="double[]" name="se" />
      <comment />
      <comment />
      <comment />
    </method>
    <method type="void" name="testWampler3" startLine="502" endLine="556">
      <declaration type="double[][]" name="data" />
      <declaration type="MillerUpdatingRegression" name="model" />
      <declaration type="int" name="off" />
      <declaration type="double[]" name="tmp" />
      <declaration type="int" name="nobs" />
      <scope startLine="529" endLine="537" />
      <declaration type="RegressionResults" name="result" />
      <declaration type="double[]" name="betaHat" />
      <declaration type="double[]" name="se" />
      <comment />
      <comment />
    </method>
    <method type="void" name="testWampler4" startLine="559" endLine="615">
      <declaration type="double[][]" name="data" />
      <declaration type="MillerUpdatingRegression" name="model" />
      <declaration type="int" name="off" />
      <declaration type="double[]" name="tmp" />
      <declaration type="int" name="nobs" />
      <scope startLine="586" endLine="594" />
      <declaration type="RegressionResults" name="result" />
      <declaration type="double[]" name="betaHat" />
      <declaration type="double[]" name="se" />
      <comment />
      <comment />
      <comment />
    </method>
    <javadoc>
      <text>* Test Longley dataset against certified values provided by NIST.
 * Data Source: J. Longley (1967) "An Appraisal of Least Squares
 * Programs for the Electronic Computer from the Point of View of the User"
 * Journal of the American Statistical Association, vol. 62. September,
 * pp. 819-841.
 * Certified values (and data) are from NIST:
 * http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Longley.dat</text>
    </javadoc>
    <method type="void" name="testLongly" startLine="628" endLine="714">
      <declaration type="double[][]" name="design" />
      <declaration type="int" name="nobs" />
      <declaration type="int" name="nvars" />
      <declaration type="MillerUpdatingRegression" name="model" />
      <declaration type="int" name="off" />
      <declaration type="double[]" name="tmp" />
      <scope startLine="657" endLine="661" />
      <declaration type="RegressionResults" name="result" />
      <declaration type="double[]" name="betaHat" />
      <declaration type="double[]" name="errors" />
      <scope startLine="690" endLine="694" />
      <comment>Y values are first, then independent vars</comment>
      <comment>Each row is one observation</comment>
      <comment>Estimate the model</comment>
      <comment>Check expected beta values from NIST</comment>
      <comment />
      <comment>Check standard errors from NIST</comment>
      <comment />
      <comment>Check R-Square statistics against R</comment>
      <comment />
      <comment />
      <comment>Estimate model without intercept</comment>
      <comment>Check expected beta values from R</comment>
      <comment />
      <comment>Check standard errors from R</comment>
      <comment />
      <comment>Check R-Square statistics against R</comment>
    </method>
    <method type="void" name="testOneRedundantColumn" startLine="757" endLine="813">
      <declaration type="MillerUpdatingRegression" name="instance" />
      <declaration type="MillerUpdatingRegression" name="instance2" />
      <declaration type="double[][][]" name="x" />
      <declaration type="double[][][]" name="x2" />
      <declaration type="double[]" name="y" />
      <scope startLine="763" endLine="778" />
      <declaration type="RegressionResults" name="result" />
      <declaration type="RegressionResults" name="resultRedundant" />
      <declaration type="double[]" name="beta" />
      <declaration type="double[]" name="betar" />
      <declaration type="double[]" name="se" />
      <declaration type="double[]" name="ser" />
      <scope startLine="792" endLine="805">
        <scope startLine="793" endLine="795" />
        <scope startLine="796" endLine="798" />
        <scope startLine="799" endLine="804">
          <scope startLine="801" endLine="803" />
        </scope>
      </scope>
    </method>
    <method type="void" name="testThreeRedundantColumn" startLine="816" endLine="928">
      <declaration type="MillerUpdatingRegression" name="instance" />
      <declaration type="MillerUpdatingRegression" name="instance2" />
      <declaration type="double[][][]" name="x" />
      <declaration type="double[][][]" name="x2" />
      <declaration type="double[]" name="y" />
      <scope startLine="823" endLine="840" />
      <declaration type="RegressionResults" name="result" />
      <declaration type="RegressionResults" name="resultRedundant" />
      <declaration type="double[]" name="beta" />
      <declaration type="double[]" name="betar" />
      <declaration type="double[]" name="se" />
      <declaration type="double[]" name="ser" />
      <scope startLine="854" endLine="856" />
      <scope startLine="857" endLine="859" />
      <scope startLine="860" endLine="862" />
      <scope startLine="863" endLine="865" />
      <scope startLine="867" endLine="869" />
      <scope startLine="870" endLine="872" />
      <scope startLine="873" endLine="875" />
      <scope startLine="876" endLine="878" />
      <scope startLine="881" endLine="883" />
      <scope startLine="885" endLine="887" />
      <scope startLine="889" endLine="891" />
      <scope startLine="893" endLine="895" />
      <scope startLine="897" endLine="899" />
      <scope startLine="901" endLine="903" />
      <scope startLine="905" endLine="907" />
      <scope startLine="910" endLine="912" />
      <scope startLine="914" endLine="916" />
      <scope startLine="919" endLine="921" />
    </method>
    <method type="void" name="testPCorr" startLine="931" endLine="999">
      <declaration type="MillerUpdatingRegression" name="instance" />
      <declaration type="double[][][]" name="x" />
      <declaration type="double[]" name="y" />
      <declaration type="double[]" name="cp" />
      <declaration type="double[]" name="yxcorr" />
      <declaration type="double[]" name="diag" />
      <declaration type="double" name="sumysq" />
      <declaration type="int" name="off" />
      <scope startLine="940" endLine="956">
        <scope startLine="948" endLine="954">
          <declaration type="double" name="tmp" />
          <scope startLine="950" endLine="952" />
        </scope>
      </scope>
      <declaration type="PearsonsCorrelation" name="pearson" />
      <declaration type="RealMatrix" name="corr" />
      <scope startLine="960" endLine="962" />
      <declaration type="double[]" name="pc" />
      <declaration type="int" name="idx" />
      <declaration type="int" name="off2" />
      <scope startLine="969" endLine="981">
        <scope startLine="970" endLine="976">
          <scope startLine="971" endLine="973" />
        </scope>
        <scope startLine="978" endLine="980" />
      </scope>
      <declaration type="double[]" name="pc2" />
      <scope startLine="986" endLine="993">
        <scope startLine="987" endLine="992">
          <scope startLine="988" endLine="990" />
        </scope>
      </scope>
      <declaration type="double[]" name="pc3" />
      <scope startLine="995" endLine="997" />
    </method>
    <method type="void" name="testHdiag" startLine="1002" endLine="1024">
      <declaration type="MillerUpdatingRegression" name="instance" />
      <declaration type="double[][][]" name="x" />
      <declaration type="double[]" name="y" />
      <scope startLine="1006" endLine="1013" />
      <declaration type="OLSMultipleLinearRegression" name="ols" />
      <declaration type="RealMatrix" name="rm" />
      <scope startLine="1020" endLine="1022" />
    </method>
    <method type="void" name="testHdiagConstant" startLine="1026" endLine="1047">
      <declaration type="MillerUpdatingRegression" name="instance" />
      <declaration type="double[][][]" name="x" />
      <declaration type="double[]" name="y" />
      <scope startLine="1030" endLine="1036" />
      <declaration type="OLSMultipleLinearRegression" name="ols" />
      <declaration type="RealMatrix" name="rm" />
      <scope startLine="1043" endLine="1045" />
    </method>
    <method type="void" name="testSubsetRegression" startLine="1051" endLine="1079">
      <declaration type="MillerUpdatingRegression" name="instance" />
      <declaration type="MillerUpdatingRegression" name="redRegression" />
      <declaration type="double[][][]" name="x" />
      <declaration type="double[][][]" name="xReduced" />
      <declaration type="double[]" name="y" />
      <scope startLine="1058" endLine="1069" />
      <declaration type="RegressionResults[]" name="resultsInstance" />
      <declaration type="RegressionResults" name="resultsReduced" />
    </method>
    <comment>This is the Greene Airline Cost data.
 The data can be downloaded from http:www.indiana.edu~statmathstatallpanelairline.csv</comment>
    <comment>"I",new double[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},</comment>
    <comment>"T", new double[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},</comment>
    <comment>"C", new double[]{1140640, 1215690, 1309570, 1511530, 1676730, 1823740, 2022890, 2314760, 2639160, 3247620, 3787750, 3867750, 3996020, 4282880, 4748320, 569292, 640614, 777655, 999294, 1203970, 1358100, 1501350, 1709270, 2025400, 2548370, 3137740, 3557700, 3717740, 3962370, 4209390, 286298, 309290, 342056, 374595, 450037, 510412, 575347, 669331, 783799, 913883, 1041520, 1125800, 1096070, 1198930, 1170470, 145167, 170192, 247506, 309391, 354338, 373941, 420915, 474017, 532590, 676771, 880438, 1052020, 1193680, 1303390, 1436970, 91361, 95428, 98187, 115967, 138382, 156228, 183169, 210212, 274024, 356915, 432344, 524294, 530924, 581447, 610257, 68978, 74904, 83829, 98148, 118449, 133161, 145062, 170711, 199775, 276797, 381478, 506969, 633388, 804388, 1009500},</comment>
    <comment>"Q", new double[]{0.952757, 0.986757, 1.09198, 1.17578, 1.16017, 1.17376, 1.29051, 1.39067, 1.61273, 1.82544, 1.54604, 1.5279, 1.6602, 1.82231, 1.93646, 0.520635, 0.534627, 0.655192, 0.791575, 0.842945, 0.852892, 0.922843, 1, 1.19845, 1.34067, 1.32624, 1.24852, 1.25432, 1.37177, 1.38974, 0.262424, 0.266433, 0.306043, 0.325586, 0.345706, 0.367517, 0.409937, 0.448023, 0.539595, 0.539382, 0.467967, 0.450544, 0.468793, 0.494397, 0.493317, 0.086393, 0.09674, 0.1415, 0.169715, 0.173805, 0.164272, 0.170906, 0.17784, 0.192248, 0.242469, 0.256505, 0.249657, 0.273923, 0.371131, 0.421411, 0.051028, 0.052646, 0.056348, 0.066953, 0.070308, 0.073961, 0.084946, 0.095474, 0.119814, 0.150046, 0.144014, 0.1693, 0.172761, 0.18667, 0.213279, 0.037682, 0.039784, 0.044331, 0.050245, 0.055046, 0.052462, 0.056977, 0.06149, 0.069027, 0.092749, 0.11264, 0.154154, 0.186461, 0.246847, 0.304013},</comment>
    <comment>"PF", new double[]{106650, 110307, 110574, 121974, 196606, 265609, 263451, 316411, 384110, 569251, 871636, 997239, 938002, 859572, 823411, 103795, 111477, 118664, 114797, 215322, 281704, 304818, 348609, 374579, 544109, 853356, 1003200, 941977, 856533, 821361, 118788, 123798, 122882, 131274, 222037, 278721, 306564, 356073, 378311, 555267, 850322, 1015610, 954508, 886999, 844079, 114987, 120501, 121908, 127220, 209405, 263148, 316724, 363598, 389436, 547376, 850418, 1011170, 951934, 881323, 831374, 118222, 116223, 115853, 129372, 243266, 277930, 317273, 358794, 397667, 566672, 848393, 1005740, 958231, 872924, 844622, 117112, 119420, 116087, 122997, 194309, 307923, 323595, 363081, 386422, 564867, 874818, 1013170, 930477, 851676, 819476},</comment>
    <comment>"LF", new double[]{0.534487, 0.532328, 0.547736, 0.540846, 0.591167, 0.575417, 0.594495, 0.597409, 0.638522, 0.676287, 0.605735, 0.61436, 0.633366, 0.650117, 0.625603, 0.490851, 0.473449, 0.503013, 0.512501, 0.566782, 0.558133, 0.558799, 0.57207, 0.624763, 0.628706, 0.58915, 0.532612, 0.526652, 0.540163, 0.528775, 0.524334, 0.537185, 0.582119, 0.579489, 0.606592, 0.60727, 0.582425, 0.573972, 0.654256, 0.631055, 0.56924, 0.589682, 0.587953, 0.565388, 0.577078, 0.432066, 0.439669, 0.488932, 0.484181, 0.529925, 0.532723, 0.549067, 0.55714, 0.611377, 0.645319, 0.611734, 0.580884, 0.572047, 0.59457, 0.585525, 0.442875, 0.462473, 0.519118, 0.529331, 0.557797, 0.556181, 0.569327, 0.583465, 0.631818, 0.604723, 0.587921, 0.616159, 0.605868, 0.594688, 0.635545, 0.448539, 0.475889, 0.500562, 0.500344, 0.528897, 0.495361, 0.510342, 0.518296, 0.546723, 0.554276, 0.517766, 0.580049, 0.556024, 0.537791, 0.525775}</comment>
    <comment>Results can be found at http:www.indiana.edu~statmathstatallpanelpanel4.html
 This test concerns a known data set</comment>
    <comment>@Test</comment>
    <comment>@Test</comment>
    <comment>public void testRegressReorder() {</comment>
    <comment>System.out.println("testRegressReorder");</comment>
    <comment>MillerUpdatingRegression instance = new MillerUpdatingRegression(4, false);</comment>
    <comment>double[][] x = new double[airdata[0].length][];</comment>
    <comment>double[] y = new double[airdata[0].length];</comment>
    <comment>for (int i = 0; i < airdata[0].length; i++) {</comment>
    <comment>x[i] = new double[4];</comment>
    <comment>x[i][0] = 1.0;</comment>
    <comment>x[i][1] = Math.log(airdata[3][i]);</comment>
    <comment>x[i][2] = Math.log(airdata[4][i]);</comment>
    <comment>x[i][3] = airdata[5][i];</comment>
    <comment>y[i] = Math.log(airdata[2][i]);</comment>
    <comment>}</comment>
    <comment />
    <comment>instance.addObservations(x, y);</comment>
    <comment>RegressionResults result = instance.regress();</comment>
    <comment>if (result == null) {</comment>
    <comment>Assert.fail("Null result....");</comment>
    <comment>}</comment>
    <comment />
    <comment>instance.reorderRegressors(new int[]{3, 2}, 0);</comment>
    <comment>RegressionResults resultInverse = instance.regress();</comment>
    <comment />
    <comment>double[] beta = result.getParameterEstimates();</comment>
    <comment>double[] betar = resultInverse.getParameterEstimates();</comment>
    <comment>if (Math.abs(beta[0] - betar[0]) > 1.0e-14) {</comment>
    <comment>Assert.fail("Parameters not correct after reorder (0,3)");</comment>
    <comment>}</comment>
    <comment>if (Math.abs(beta[1] - betar[1]) > 1.0e-14) {</comment>
    <comment>Assert.fail("Parameters not correct after reorder (1,2)");</comment>
    <comment>}</comment>
    <comment>if (Math.abs(beta[2] - betar[2]) > 1.0e-14) {</comment>
    <comment>Assert.fail("Parameters not correct after reorder (2,1)");</comment>
    <comment>}</comment>
    <comment>if (Math.abs(beta[3] - betar[3]) > 1.0e-14) {</comment>
    <comment>Assert.fail("Parameters not correct after reorder (3,0)");</comment>
    <comment>}</comment>
    <comment>}</comment>
  </class>
</source>
