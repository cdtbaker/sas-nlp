<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.solvers">
  <import name="org.apache.commons.math3.analysis.FunctionUtils" />
  <import name="org.apache.commons.math3.analysis.MonitoredFunction" />
  <import name="org.apache.commons.math3.analysis.QuinticFunction" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.differentiation.DerivativeStructure" />
  <import name="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction" />
  <import name="org.apache.commons.math3.analysis.function.Constant" />
  <import name="org.apache.commons.math3.analysis.function.Inverse" />
  <import name="org.apache.commons.math3.analysis.function.Sin" />
  <import name="org.apache.commons.math3.analysis.function.Sqrt" />
  <import name="org.apache.commons.math3.exception.NoBracketingException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="BrentSolverTest" startLine="36">
    <javadoc>
      <text>* Test case for {@link BrentSolver Brent} solver.
 * Because Brent-Dekker is guaranteed to converge in less than the default
 * maximum iteration count due to bisection fallback, it is quite hard to
 * debug. I include measured iteration counts plus one in order to detect
 * regressions. On average Brent-Dekker should use 4..5 iterations for the
 * default absolute accuracy of 10E-8 for sinus and the quintic function around
 * zero, and 5..10 iterations for the other zeros.</text>
      <version>$Id: BrentSolverTest.java 1383845 2012-09-12 08:34:10Z luc $</version>
    </javadoc>
    <method type="void" name="testSinZero" startLine="49" endLine="68">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="double" name="result" />
      <declaration type="UnivariateSolver" name="solver" />
      <comment>The sinus function is behaved well around the root at pi. The second</comment>
      <comment>order derivative is zero, which means linar approximating methods will</comment>
      <comment>still converge quadratically.</comment>
      <comment>Somewhat benign interval. The function is monotone.</comment>
      <comment>System.out.println(</comment>
      <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
      <comment>Larger and somewhat less benign interval. The function is grows first.</comment>
      <comment>System.out.println(</comment>
      <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
    </method>
    <method type="void" name="testQuinticZero" startLine="71" endLine="162">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="double" name="result" />
      <declaration type="UnivariateSolver" name="solver" />
      <scope startLine="156" endLine="159" />
      <scope startLine="159" endLine="161">
        <comment>Expected.</comment>
      </scope>
      <comment>The quintic function has zeros at 0, +-0.5 and +-1.</comment>
      <comment>Around the root of 0 the function is well behaved, with a second derivative</comment>
      <comment>of zero a 0.</comment>
      <comment>The other roots are less well to find, in particular the root at 1, because</comment>
      <comment>the function grows fast for x>1.</comment>
      <comment>The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,</comment>
      <comment>intervals containing these values are harder for the solvers.</comment>
      <comment>Brent-Dekker solver.</comment>
      <comment>Symmetric bracket around 0. Test whether solvers can handle hitting</comment>
      <comment>the root in the first iteration.</comment>
      <comment>System.out.println(</comment>
      <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
      <comment>1 iterations on i586 JDK 1.4.1.</comment>
      <comment>Asymmetric bracket around 0, just for fun. Contains extremum.</comment>
      <comment>System.out.println(</comment>
      <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
      <comment>5 iterations on i586 JDK 1.4.1.</comment>
      <comment>Large bracket around 0. Contains two extrema.</comment>
      <comment>System.out.println(</comment>
      <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
      <comment>6 iterations on i586 JDK 1.4.1.</comment>
      <comment>Benign bracket around 0.5, function is monotonous.</comment>
      <comment>System.out.println(</comment>
      <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
      <comment>6 iterations on i586 JDK 1.4.1.</comment>
      <comment>Less benign bracket around 0.5, contains one extremum.</comment>
      <comment>System.out.println(</comment>
      <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
      <comment>Large, less benign bracket around 0.5, contains both extrema.</comment>
      <comment>System.out.println(</comment>
      <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
      <comment>Relatively benign bracket around 1, function is monotonous. Fast growth for x>1</comment>
      <comment>is still a problem.</comment>
      <comment>System.out.println(</comment>
      <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
      <comment>Less benign bracket around 1 with extremum.</comment>
      <comment>System.out.println(</comment>
      <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
      <comment>Large bracket around 1. Monotonous.</comment>
      <comment>System.out.println(</comment>
      <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
      <comment>Large bracket around 1. Interval contains extremum.</comment>
      <comment>System.out.println(</comment>
      <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
      <comment>Very large bracket around 1 for testing fast growth behaviour.</comment>
      <comment>System.out.println(</comment>
      <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
    </method>
    <method type="void" name="testRootEndpoints" startLine="165" endLine="181">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="BrentSolver" name="solver" />
      <declaration type="double" name="result" />
      <comment>endpoint is root</comment>
    </method>
    <method type="void" name="testBadEndpoints" startLine="184" endLine="205">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="BrentSolver" name="solver" />
      <scope startLine="187" endLine="190">
        <comment>bad interval</comment>
      </scope>
      <scope startLine="190" endLine="192">
        <comment>expected</comment>
      </scope>
      <scope startLine="193" endLine="196">
        <comment>no bracket</comment>
      </scope>
      <scope startLine="196" endLine="198">
        <comment>expected</comment>
      </scope>
      <scope startLine="199" endLine="202">
        <comment>no bracket</comment>
      </scope>
      <scope startLine="202" endLine="204">
        <comment>expected</comment>
      </scope>
    </method>
    <method type="void" name="testInitialGuess" startLine="208" endLine="245">
      <declaration type="MonitoredFunction" name="f" />
      <declaration type="BrentSolver" name="solver" />
      <declaration type="double" name="result" />
      <declaration type="int" name="referenceCallsCount" />
      <scope startLine="220" endLine="223" />
      <scope startLine="223" endLine="225">
        <comment>expected behaviour</comment>
      </scope>
      <comment>no guess</comment>
      <comment>invalid guess (it *is* a root, but outside of the range)</comment>
      <comment>bad guess</comment>
      <comment>good guess</comment>
      <comment>perfect guess</comment>
    </method>
    <method type="void" name="testMath832" startLine="248" endLine="267">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="UnivariateDifferentiableFunction" name="sqrt" />
      <declaration type="UnivariateDifferentiableFunction" name="inv" />
      <declaration type="UnivariateDifferentiableFunction" name="func" />
      <method type="double" name="value" startLine="258" endLine="260" />
      <declaration type="BrentSolver" name="solver" />
      <declaration type="double" name="result" />
    </method>
  </class>
</source>
