<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.direct">
  <import name="java.util.Arrays" />
  <import name="java.util.Random" />
  <import name="org.apache.commons.math3.analysis.MultivariateFunction" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.optimization.GoalType" />
  <import name="org.apache.commons.math3.optimization.PointValuePair" />
  <import name="org.apache.commons.math3.optimization.InitialGuess" />
  <import name="org.apache.commons.math3.optimization.SimpleBounds" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Ignore" />
  <import name="org.junit.Test" />
  <class name="BOBYQAOptimizerTest" startLine="35">
    <javadoc>
      <text>* Test for {@link BOBYQAOptimizer}.</text>
    </javadoc>
    <declaration type="int" name="DIM" />
    <method type="void" name="testInitOutOfBounds" startLine="43" endLine="49">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[][]" name="boundaries" />
    </method>
    <method type="void" name="testBoundariesDimensionMismatch" startLine="52" endLine="58">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[][]" name="boundaries" />
    </method>
    <method type="void" name="testProblemDimensionTooSmall" startLine="61" endLine="66">
      <declaration type="double[]" name="startPoint" />
    </method>
    <method type="void" name="testMaxEvaluations" startLine="69" endLine="76">
      <declaration type="int" name="lowMaxEval" />
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[][]" name="boundaries" />
    </method>
    <method type="void" name="testRosen" startLine="79" endLine="86">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testMaximize" startLine="89" endLine="101">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testEllipse" startLine="104" endLine="112">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testElliRotated" startLine="115" endLine="123">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testCigar" startLine="126" endLine="134">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testTwoAxes" startLine="137" endLine="145">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testCigTab" startLine="148" endLine="156">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testSphere" startLine="159" endLine="167">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testTablet" startLine="170" endLine="178">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testDiffPow" startLine="181" endLine="189">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testSsDiffPow" startLine="192" endLine="200">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testAckley" startLine="203" endLine="211">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testRastrigin" startLine="214" endLine="223">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testConstrainedRosen" startLine="226" endLine="235">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testConstrainedRosenWithMoreInterpolationPoints" startLine="241" endLine="261">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
      <declaration type="int" name="maxAdditionalPoints" />
      <scope startLine="253" endLine="260" />
      <comment>This should have been 78 because in the code the hard limit is</comment>
      <comment>said to be</comment>
      <comment>((DIM + 1) * (DIM + 2)) / 2 - (2 * DIM + 1)</comment>
      <comment>i.e. 78 in this case, but the test fails for 48, 59, 62, 63, 64,</comment>
      <comment>65, 66, ...</comment>
    </method>
    <javadoc>
      <param>func Function to optimize.</param>
      <param>startPoint Starting point.</param>
      <param>boundaries Upper / lower point limit.</param>
      <param>goal Minimization or maximization.</param>
      <param>fTol Tolerance relative error on the objective function.</param>
      <param>pointTol Tolerance for checking that the optimum is correct.</param>
      <param>maxEvaluations Maximum number of evaluations.</param>
      <param>expected Expected point / value.</param>
    </javadoc>
    <method type="void" name="doTest" startLine="280" endLine="291" />
    <javadoc>
      <param>func Function to optimize.</param>
      <param>startPoint Starting point.</param>
      <param>boundaries Upper / lower point limit.</param>
      <param>goal Minimization or maximization.</param>
      <param>fTol Tolerance relative error on the objective function.</param>
      <param>pointTol Tolerance for checking that the optimum is correct.</param>
      <param>maxEvaluations Maximum number of evaluations.</param>
      <param>additionalInterpolationPoints Number of interpolation to used
 * in addition to the default (2 * dim + 1).</param>
      <param>expected Expected point / value.</param>
    </javadoc>
    <method type="void" name="doTest" startLine="314" endLine="343">
      <declaration type="int" name="dim" />
      <declaration type="double[]" name="lB" />
      <declaration type="double[]" name="uB" />
      <declaration type="int" name="numIterpolationPoints" />
      <declaration type="BOBYQAOptimizer" name="optim" />
      <declaration type="PointValuePair" name="result" />
      <scope startLine="337" endLine="340" />
      <comment>System.out.println(func.getClass().getName() + " BEGIN");  XXX</comment>
      <comment>MultivariateOptimizer optim =</comment>
      <comment>new PowellOptimizer(1e-13, Math.ulp(1d));</comment>
      <comment>PointValuePair result = optim.optimize(100000, func, goal, startPoint);</comment>
      <comment>System.out.println(func.getClass().getName() + " = "</comment>
      <comment>+ optim.getEvaluations() + " f(");</comment>
      <comment>for (double x: result.getPoint())  System.out.print(x + " ");</comment>
      <comment>System.out.println(") = " +  result.getValue());</comment>
      <comment>System.out.println(func.getClass().getName() + " END");  XXX</comment>
    </method>
    <method type="double[]" name="point" startLine="345" endLine="349">
      <declaration type="double[]" name="ds" />
    </method>
    <method type="double[][]" name="boundaries" startLine="352" endLine="359">
      <declaration type="double[][]" name="boundaries" />
    </method>
    <class name="Sphere" startLine="361">
      <implements name="MultivariateFunction" />
      <method type="double" name="value" startLine="363" endLine="368">
        <declaration type="double" name="f" />
      </method>
      <class name="Cigar" startLine="371">
        <implements name="MultivariateFunction" />
        <declaration type="double" name="factor" />
        <method type="constructor" name="Cigar" startLine="374" endLine="376" />
        <method type="constructor" name="Cigar" startLine="378" endLine="380" />
        <method type="double" name="value" startLine="382" endLine="387">
          <declaration type="double" name="f" />
        </method>
        <class name="Tablet" startLine="390">
          <implements name="MultivariateFunction" />
          <declaration type="double" name="factor" />
          <method type="constructor" name="Tablet" startLine="393" endLine="395" />
          <method type="constructor" name="Tablet" startLine="397" endLine="399" />
          <method type="double" name="value" startLine="401" endLine="406">
            <declaration type="double" name="f" />
          </method>
          <class name="CigTab" startLine="409">
            <implements name="MultivariateFunction" />
            <declaration type="double" name="factor" />
            <method type="constructor" name="CigTab" startLine="412" endLine="414" />
            <method type="constructor" name="CigTab" startLine="416" endLine="418" />
            <method type="double" name="value" startLine="420" endLine="426">
              <declaration type="int" name="end" />
              <declaration type="double" name="f" />
            </method>
            <class name="TwoAxes" startLine="429">
              <implements name="MultivariateFunction" />
              <declaration type="double" name="factor" />
              <method type="constructor" name="TwoAxes" startLine="433" endLine="435" />
              <method type="constructor" name="TwoAxes" startLine="437" endLine="439" />
              <method type="double" name="value" startLine="441" endLine="446">
                <declaration type="double" name="f" />
              </method>
              <class name="ElliRotated" startLine="449">
                <implements name="MultivariateFunction" />
                <declaration type="Basis" name="B" />
                <declaration type="double" name="factor" />
                <method type="constructor" name="ElliRotated" startLine="453" endLine="455" />
                <method type="constructor" name="ElliRotated" startLine="457" endLine="459" />
                <method type="double" name="value" startLine="461" endLine="467">
                  <declaration type="double" name="f" />
                </method>
                <class name="Elli" startLine="470">
                  <implements name="MultivariateFunction" />
                  <declaration type="double" name="factor" />
                  <method type="constructor" name="Elli" startLine="474" endLine="476" />
                  <method type="constructor" name="Elli" startLine="478" endLine="480" />
                  <method type="double" name="value" startLine="482" endLine="487">
                    <declaration type="double" name="f" />
                  </method>
                  <class name="MinusElli" startLine="490">
                    <implements name="MultivariateFunction" />
                    <declaration type="Elli" name="elli" />
                    <method type="double" name="value" startLine="492" endLine="494" />
                    <class name="DiffPow" startLine="497">
                      <implements name="MultivariateFunction" />
                      <method type="double" name="value" startLine="499" endLine="509">
                        <declaration type="double" name="f" />
                        <comment>System.out.print("" + (fcount++) + ") ");</comment>
                        <comment>for (int i = 0; i < x.length; i++)</comment>
                        <comment>System.out.print(x[i] +  " ");</comment>
                        <comment>System.out.println(" = " + f);</comment>
                      </method>
                      <class name="SsDiffPow" startLine="512">
                        <implements name="MultivariateFunction" />
                        <method type="double" name="value" startLine="514" endLine="517">
                          <declaration type="double" name="f" />
                        </method>
                        <class name="Rosen" startLine="520">
                          <implements name="MultivariateFunction" />
                          <method type="double" name="value" startLine="522" endLine="528">
                            <declaration type="double" name="f" />
                          </method>
                          <class name="Ackley" startLine="531">
                            <implements name="MultivariateFunction" />
                            <declaration type="double" name="axisratio" />
                            <method type="constructor" name="Ackley" startLine="534" endLine="536" />
                            <method type="constructor" name="Ackley" startLine="538" endLine="540" />
                            <method type="double" name="value" startLine="542" endLine="554">
                              <declaration type="double" name="f" />
                              <declaration type="double" name="res2" />
                              <declaration type="double" name="fac" />
                              <scope startLine="546" endLine="550" />
                            </method>
                            <class name="Rastrigin" startLine="557">
                              <implements name="MultivariateFunction" />
                              <declaration type="double" name="axisratio" />
                              <declaration type="double" name="amplitude" />
                              <method type="constructor" name="Rastrigin" startLine="562" endLine="564" />
                              <method type="constructor" name="Rastrigin" startLine="566" endLine="569" />
                              <method type="double" name="value" startLine="571" endLine="582">
                                <declaration type="double" name="f" />
                                <declaration type="double" name="fac" />
                                <scope startLine="574" endLine="580" />
                              </method>
                              <class name="Basis" startLine="585">
                                <declaration type="double[][]" name="basis" />
                                <declaration type="Random" name="rand" />
                                <method type="double[]" name="Rotate" startLine="589" endLine="598">
                                  <declaration type="double[]" name="y" />
                                  <scope startLine="592" endLine="596" />
                                </method>
                                <method type="void" name="GenBasis" startLine="600" endLine="626">
                                  <declaration type="double" name="sp" />
                                  <declaration type="int" name="i" />
                                  <scope startLine="609" endLine="625">
                                    <scope startLine="614" endLine="619" />
                                    <comment>sample components gaussian</comment>
                                    <comment>substract projection of previous vectors</comment>
                                    <comment>sp += basis[i][k]  basis[j][k];  scalar product</comment>
                                    <comment>basis[i][k] -= sp  basis[j][k];  substract</comment>
                                    <comment>normalize</comment>
                                    <comment>sp += basis[i][k]  basis[i][k];  squared norm</comment>
                                  </scope>
                                  <comment>generate orthogonal basis</comment>
                                </method>
                              </class>
                            </class>
                          </class>
                        </class>
                      </class>
                    </class>
                  </class>
                </class>
              </class>
            </class>
          </class>
        </class>
      </class>
    </class>
    <comment>See MATH-728</comment>
    <comment>TODO: this test is temporarily disabled for 3.2 release as a bug in Cobertura</comment>
    <comment>makes it run for several hours before completing</comment>
    <comment>private int fcount = 0;</comment>
    <comment>use not always the same basis</comment>
  </class>
</source>
