<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="org.apache.commons.math3.fraction.Fraction" />
  <import name="org.apache.commons.math3.fraction.FractionConversionException" />
  <import name="org.apache.commons.math3.fraction.FractionField" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="SparseFieldVectorTest" startLine="28">
    <javadoc>
      <text>* Test cases for the {@link SparseFieldVector} class.</text>
      <version>$Id: SparseFieldVectorTest.java 1244107 2012-02-14 16:17:55Z erans $</version>
    </javadoc>
    <declaration type="Fraction[][]" name="ma1" />
    <declaration type="Fraction[]" name="vec1" />
    <declaration type="Fraction[]" name="vec2" />
    <declaration type="Fraction[]" name="vec3" />
    <declaration type="Fraction[]" name="vec4" />
    <declaration type="Fraction[]" name="vec_null" />
    <declaration type="Fraction[]" name="dvec1" />
    <declaration type="Fraction[][]" name="mat1" />
    <declaration type="double" name="entryTolerance" />
    <declaration type="double" name="normTolerance" />
    <declaration type="FractionField" name="field" />
    <method type="void" name="testMapFunctions" startLine="52" endLine="111">
      <declaration type="SparseFieldVector<Fraction>" name="v1" />
      <declaration type="FieldVector<Fraction>" name="v_mapAdd" />
      <declaration type="Fraction[]" name="result_mapAdd" />
      <declaration type="FieldVector<Fraction>" name="v_mapAddToSelf" />
      <declaration type="Fraction[]" name="result_mapAddToSelf" />
      <declaration type="FieldVector<Fraction>" name="v_mapSubtract" />
      <declaration type="Fraction[]" name="result_mapSubtract" />
      <declaration type="FieldVector<Fraction>" name="v_mapSubtractToSelf" />
      <declaration type="Fraction[]" name="result_mapSubtractToSelf" />
      <declaration type="FieldVector<Fraction>" name="v_mapMultiply" />
      <declaration type="Fraction[]" name="result_mapMultiply" />
      <declaration type="FieldVector<Fraction>" name="v_mapMultiplyToSelf" />
      <declaration type="Fraction[]" name="result_mapMultiplyToSelf" />
      <declaration type="FieldVector<Fraction>" name="v_mapDivide" />
      <declaration type="Fraction[]" name="result_mapDivide" />
      <declaration type="FieldVector<Fraction>" name="v_mapDivideToSelf" />
      <declaration type="Fraction[]" name="result_mapDivideToSelf" />
      <declaration type="FieldVector<Fraction>" name="v_mapInv" />
      <declaration type="Fraction[]" name="result_mapInv" />
      <declaration type="FieldVector<Fraction>" name="v_mapInvToSelf" />
      <declaration type="Fraction[]" name="result_mapInvToSelf" />
      <comment>octave =  v1 .+ 2.0</comment>
      <comment>octave =  v1 .+ 2.0</comment>
      <comment>octave =  v1 .- 2.0</comment>
      <comment>octave =  v1 .- 2.0</comment>
      <comment>octave =  v1 .* 2.0</comment>
      <comment>octave =  v1 .* 2.0</comment>
      <comment>octave =  v1 ./ 2.0</comment>
      <comment>octave =  v1 ./ 2.0</comment>
      <comment>octave =  v1 .^-1</comment>
      <comment>octave =  v1 .^-1</comment>
    </method>
    <method type="void" name="testBasicFunctions" startLine="114" endLine="171">
      <declaration type="SparseFieldVector<Fraction>" name="v1" />
      <declaration type="SparseFieldVector<Fraction>" name="v2" />
      <declaration type="FieldVector<Fraction>" name="v2_t" />
      <declaration type="FieldVector<Fraction>" name="v_add" />
      <declaration type="Fraction[]" name="result_add" />
      <declaration type="FieldVector<Fraction>" name="vt2" />
      <declaration type="FieldVector<Fraction>" name="v_add_i" />
      <declaration type="Fraction[]" name="result_add_i" />
      <declaration type="SparseFieldVector<Fraction>" name="v_subtract" />
      <declaration type="Fraction[]" name="result_subtract" />
      <declaration type="FieldVector<Fraction>" name="v_subtract_i" />
      <declaration type="Fraction[]" name="result_subtract_i" />
      <declaration type="FieldVector<Fraction>" name="v_ebeMultiply" />
      <declaration type="Fraction[]" name="result_ebeMultiply" />
      <declaration type="FieldVector<Fraction>" name="v_ebeMultiply_2" />
      <declaration type="Fraction[]" name="result_ebeMultiply_2" />
      <declaration type="FieldVector<Fraction>" name="v_ebeDivide" />
      <declaration type="Fraction[]" name="result_ebeDivide" />
      <declaration type="FieldVector<Fraction>" name="v_ebeDivide_2" />
      <declaration type="Fraction[]" name="result_ebeDivide_2" />
      <declaration type="Fraction" name="dot" />
      <declaration type="Fraction" name="dot_2" />
      <declaration type="FieldMatrix<Fraction>" name="m_outerProduct" />
      <declaration type="FieldMatrix<Fraction>" name="m_outerProduct_2" />
      <comment>octave =  v1 + v2</comment>
      <comment>octave =  v1 - v2</comment>
      <comment>octave v1 .* v2</comment>
      <comment>octave v1 ./ v2</comment>
      <comment>octave  dot(v1,v2)</comment>
      <comment>octave  dot(v1,v2_t)</comment>
    </method>
    <method type="void" name="testOuterProduct" startLine="174" endLine="194">
      <declaration type="SparseFieldVector<Fraction>[]" name="u" />
      <declaration type="SparseFieldVector<Fraction>[]" name="v" />
      <declaration type="FieldMatrix<Fraction>" name="uv" />
      <declaration type="double" name="tol" />
    </method>
    <method type="void" name="testMisc" startLine="197" endLine="210">
      <declaration type="SparseFieldVector<Fraction>" name="v1" />
      <declaration type="String" name="out1" />
      <scope startLine="202" endLine="205" />
      <scope startLine="205" endLine="207">
        <comment>expected behavior</comment>
      </scope>
    </method>
    <method type="void" name="testPredicates" startLine="213" endLine="221">
      <declaration type="SparseFieldVector<Fraction>[]" name="v" />
    </method>
    <javadoc>
      <text>* verifies that two vectors are close (sup norm)</text>
    </javadoc>
    <method type="void" name="assertEquals" startLine="224" endLine="231">
      <scope startLine="225" endLine="227" />
      <scope startLine="228" endLine="230" />
    </method>
    <javadoc>
      <text>* verifies that two vectors are close (sup norm)</text>
    </javadoc>
    <method type="void" name="assertClose" startLine="234" endLine="241">
      <scope startLine="235" endLine="237" />
      <scope startLine="238" endLine="240" />
    </method>
    <comment />
    <comment>tolerances</comment>
  </class>
</source>
