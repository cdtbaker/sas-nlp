<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.complex">
  <import name="org.apache.commons.math3.TestUtils" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <import name="java.util.List" />
  <class name="ComplexTest" startLine="29">
    <javadoc>
      <version>$Id: ComplexTest.java 1459927 2013-03-22 18:55:58Z luc $</version>
    </javadoc>
    <declaration type="double" name="inf" />
    <declaration type="double" name="neginf" />
    <declaration type="double" name="nan" />
    <declaration type="double" name="pi" />
    <declaration type="Complex" name="oneInf" />
    <declaration type="Complex" name="oneNegInf" />
    <declaration type="Complex" name="infOne" />
    <declaration type="Complex" name="infZero" />
    <declaration type="Complex" name="infNaN" />
    <declaration type="Complex" name="infNegInf" />
    <declaration type="Complex" name="infInf" />
    <declaration type="Complex" name="negInfInf" />
    <declaration type="Complex" name="negInfZero" />
    <declaration type="Complex" name="negInfOne" />
    <declaration type="Complex" name="negInfNaN" />
    <declaration type="Complex" name="negInfNegInf" />
    <declaration type="Complex" name="oneNaN" />
    <declaration type="Complex" name="zeroInf" />
    <declaration type="Complex" name="zeroNaN" />
    <declaration type="Complex" name="nanInf" />
    <declaration type="Complex" name="nanNegInf" />
    <declaration type="Complex" name="nanZero" />
    <method type="void" name="testConstructor" startLine="59" endLine="63">
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testConstructorNaN" startLine="66" endLine="75">
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testAbs" startLine="78" endLine="81">
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testAbsNaN" startLine="84" endLine="88">
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testAbsInfinite" startLine="91" endLine="98">
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testAdd" startLine="101" endLine="107">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="y" />
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testAddNaN" startLine="110" endLine="117">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="w" />
    </method>
    <method type="void" name="testAddInf" startLine="120" endLine="129">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="w" />
    </method>
    <method type="void" name="testScalarAdd" startLine="133" endLine="138">
      <declaration type="Complex" name="x" />
      <declaration type="double" name="yDouble" />
      <declaration type="Complex" name="yComplex" />
    </method>
    <method type="void" name="testScalarAddNaN" startLine="141" endLine="146">
      <declaration type="Complex" name="x" />
      <declaration type="double" name="yDouble" />
      <declaration type="Complex" name="yComplex" />
    </method>
    <method type="void" name="testScalarAddInf" startLine="149" endLine="158">
      <declaration type="Complex" name="x" />
      <declaration type="double" name="yDouble" />
      <declaration type="Complex" name="yComplex" />
    </method>
    <method type="void" name="testConjugate" startLine="161" endLine="166">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testConjugateNaN" startLine="169" endLine="172">
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testConjugateInfiinite" startLine="175" endLine="180">
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testDivide" startLine="183" endLine="189">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="y" />
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testDivideReal" startLine="192" endLine="197">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="y" />
    </method>
    <method type="void" name="testDivideImaginary" startLine="200" endLine="204">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="y" />
    </method>
    <method type="void" name="testDivideInf" startLine="207" endLine="225">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="w" />
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testDivideZero" startLine="228" endLine="233">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="z" />
      <comment>Assert.assertEquals(z, Complex.INF);  See MATH-657</comment>
    </method>
    <method type="void" name="testDivideZeroZero" startLine="236" endLine="240">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testDivideNaN" startLine="243" endLine="247">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testDivideNaNInf" startLine="250" endLine="262">
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testScalarDivide" startLine="265" endLine="270">
      <declaration type="Complex" name="x" />
      <declaration type="double" name="yDouble" />
      <declaration type="Complex" name="yComplex" />
    </method>
    <method type="void" name="testScalarDivideNaN" startLine="273" endLine="278">
      <declaration type="Complex" name="x" />
      <declaration type="double" name="yDouble" />
      <declaration type="Complex" name="yComplex" />
    </method>
    <method type="void" name="testScalarDivideInf" startLine="281" endLine="293">
      <declaration type="Complex" name="x" />
      <declaration type="double" name="yDouble" />
      <declaration type="Complex" name="yComplex" />
    </method>
    <method type="void" name="testScalarDivideZero" startLine="296" endLine="299">
      <declaration type="Complex" name="x" />
    </method>
    <method type="void" name="testReciprocal" startLine="302" endLine="309">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="act" />
      <declaration type="double" name="expRe" />
      <declaration type="double" name="expIm" />
    </method>
    <method type="void" name="testReciprocalReal" startLine="312" endLine="315">
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testReciprocalImaginary" startLine="318" endLine="321">
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testReciprocalInf" startLine="324" endLine="330">
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testReciprocalZero" startLine="333" endLine="335" />
    <method type="void" name="testReciprocalNaN" startLine="338" endLine="340" />
    <method type="void" name="testMultiply" startLine="343" endLine="349">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="y" />
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testMultiplyNaN" startLine="352" endLine="358">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testMultiplyInfInf" startLine="361" endLine="364">
      <comment>Assert.assertTrue(infInf.multiply(infInf).isNaN());  MATH-620</comment>
    </method>
    <method type="void" name="testMultiplyNaNInf" startLine="367" endLine="388">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="w" />
      <comment>[MATH-164]</comment>
    </method>
    <method type="void" name="testScalarMultiply" startLine="391" endLine="399">
      <declaration type="Complex" name="x" />
      <declaration type="double" name="yDouble" />
      <declaration type="Complex" name="yComplex" />
      <declaration type="int" name="zInt" />
      <declaration type="Complex" name="zComplex" />
    </method>
    <method type="void" name="testScalarMultiplyNaN" startLine="402" endLine="407">
      <declaration type="Complex" name="x" />
      <declaration type="double" name="yDouble" />
      <declaration type="Complex" name="yComplex" />
    </method>
    <method type="void" name="testScalarMultiplyInf" startLine="410" endLine="419">
      <declaration type="Complex" name="x" />
      <declaration type="double" name="yDouble" />
      <declaration type="Complex" name="yComplex" />
    </method>
    <method type="void" name="testNegate" startLine="422" endLine="427">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testNegateNaN" startLine="430" endLine="433">
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testSubtract" startLine="436" endLine="442">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="y" />
      <declaration type="Complex" name="z" />
    </method>
    <method type="void" name="testSubtractNaN" startLine="445" endLine="452">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="w" />
    </method>
    <method type="void" name="testSubtractInf" startLine="455" endLine="464">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="w" />
    </method>
    <method type="void" name="testScalarSubtract" startLine="467" endLine="472">
      <declaration type="Complex" name="x" />
      <declaration type="double" name="yDouble" />
      <declaration type="Complex" name="yComplex" />
    </method>
    <method type="void" name="testScalarSubtractNaN" startLine="475" endLine="480">
      <declaration type="Complex" name="x" />
      <declaration type="double" name="yDouble" />
      <declaration type="Complex" name="yComplex" />
    </method>
    <method type="void" name="testScalarSubtractInf" startLine="483" endLine="491">
      <declaration type="Complex" name="x" />
      <declaration type="double" name="yDouble" />
      <declaration type="Complex" name="yComplex" />
    </method>
    <method type="void" name="testEqualsNull" startLine="495" endLine="498">
      <declaration type="Complex" name="x" />
    </method>
    <method type="void" name="testEqualsClass" startLine="501" endLine="504">
      <declaration type="Complex" name="x" />
    </method>
    <method type="void" name="testEqualsSame" startLine="507" endLine="510">
      <declaration type="Complex" name="x" />
    </method>
    <method type="void" name="testEqualsTrue" startLine="513" endLine="517">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="y" />
    </method>
    <method type="void" name="testEqualsRealDifference" startLine="520" endLine="524">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="y" />
    </method>
    <method type="void" name="testEqualsImaginaryDifference" startLine="527" endLine="531">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="y" />
    </method>
    <method type="void" name="testEqualsNaN" startLine="534" endLine="541">
      <declaration type="Complex" name="realNaN" />
      <declaration type="Complex" name="imaginaryNaN" />
      <declaration type="Complex" name="complexNaN" />
    </method>
    <method type="void" name="testHashCode" startLine="544" endLine="554">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="y" />
      <declaration type="Complex" name="realNaN" />
      <declaration type="Complex" name="imaginaryNaN" />
    </method>
    <method type="void" name="testAcos" startLine="557" endLine="563">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="expected" />
    </method>
    <method type="void" name="testAcosInf" startLine="566" endLine="575" />
    <method type="void" name="testAcosNaN" startLine="578" endLine="580" />
    <method type="void" name="testAsin" startLine="583" endLine="587">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="expected" />
    </method>
    <method type="void" name="testAsinNaN" startLine="590" endLine="592" />
    <method type="void" name="testAsinInf" startLine="595" endLine="604" />
    <method type="void" name="testAtan" startLine="608" endLine="612">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="expected" />
    </method>
    <method type="void" name="testAtanInf" startLine="615" endLine="624" />
    <method type="void" name="testAtanI" startLine="627" endLine="629" />
    <method type="void" name="testAtanNaN" startLine="632" endLine="634" />
    <method type="void" name="testCos" startLine="637" endLine="641">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="expected" />
    </method>
    <method type="void" name="testCosNaN" startLine="644" endLine="646" />
    <method type="void" name="testCosInf" startLine="649" endLine="658" />
    <method type="void" name="testCosh" startLine="661" endLine="665">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="expected" />
    </method>
    <method type="void" name="testCoshNaN" startLine="668" endLine="670" />
    <method type="void" name="testCoshInf" startLine="673" endLine="682" />
    <method type="void" name="testExp" startLine="685" endLine="694">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="expected" />
      <declaration type="Complex" name="iPi" />
    </method>
    <method type="void" name="testExpNaN" startLine="697" endLine="699" />
    <method type="void" name="testExpInf" startLine="702" endLine="711" />
    <method type="void" name="testLog" startLine="714" endLine="718">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="expected" />
    </method>
    <method type="void" name="testLogNaN" startLine="721" endLine="723" />
    <method type="void" name="testLogInf" startLine="726" endLine="742" />
    <method type="void" name="testLogZero" startLine="745" endLine="747" />
    <method type="void" name="testPow" startLine="750" endLine="755">
      <declaration type="Complex" name="x" />
      <declaration type="Complex" name="y" />
      <declaration type="Complex" name="expected" />
    </method>
    <method type="void" name="testPowNaNBase" startLine="758" endLine="761">
      <declaration type="Complex" name="x" />
    </method>
    <method type="void" name="testPowNaNExponent" startLine="764" endLine="767">
      <declaration type="Complex" name="x" />
    </method>
    <method type="void" name="testPowInf" startLine="770" endLine="793" />
    <method type="void" name="testPowZero" startLine="796" endLine="809" />
    <method type="void" name="testScalarPow" startLine="812" endLine="817">
      <declaration type="Complex" name="x" />
      <declaration type="double" name="yDouble" />
      <declaration type="Complex" name="yComplex" />
    </method>
    <method type="void" name="testScalarPowNaNBase" startLine="820" endLine="825">
      <declaration type="Complex" name="x" />
      <declaration type="double" name="yDouble" />
      <declaration type="Complex" name="yComplex" />
    </method>
    <method type="void" name="testScalarPowNaNExponent" startLine="828" endLine="833">
      <declaration type="Complex" name="x" />
      <declaration type="double" name="yDouble" />
      <declaration type="Complex" name="yComplex" />
    </method>
    <method type="void" name="testScalarPowInf" startLine="836" endLine="851" />
    <method type="void" name="testScalarPowZero" startLine="854" endLine="860" />
    <method type="void" name="testpowNull" startLine="863" endLine="865" />
    <method type="void" name="testSin" startLine="868" endLine="872">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="expected" />
    </method>
    <method type="void" name="testSinInf" startLine="875" endLine="884" />
    <method type="void" name="testSinNaN" startLine="887" endLine="889" />
    <method type="void" name="testSinh" startLine="892" endLine="896">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="expected" />
    </method>
    <method type="void" name="testSinhNaN" startLine="899" endLine="901" />
    <method type="void" name="testSinhInf" startLine="904" endLine="913" />
    <method type="void" name="testSqrtRealPositive" startLine="916" endLine="920">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="expected" />
    </method>
    <method type="void" name="testSqrtRealZero" startLine="923" endLine="927">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="expected" />
    </method>
    <method type="void" name="testSqrtRealNegative" startLine="930" endLine="934">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="expected" />
    </method>
    <method type="void" name="testSqrtImaginaryZero" startLine="937" endLine="941">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="expected" />
    </method>
    <method type="void" name="testSqrtImaginaryNegative" startLine="944" endLine="948">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="expected" />
    </method>
    <method type="void" name="testSqrtPolar" startLine="951" endLine="963">
      <declaration type="double" name="r" />
      <scope startLine="953" endLine="962">
        <declaration type="double" name="theta" />
        <scope startLine="956" endLine="961">
          <declaration type="Complex" name="z" />
          <declaration type="Complex" name="sqrtz" />
        </scope>
      </scope>
    </method>
    <method type="void" name="testSqrtNaN" startLine="966" endLine="968" />
    <method type="void" name="testSqrtInf" startLine="971" endLine="980" />
    <method type="void" name="testSqrt1z" startLine="983" endLine="987">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="expected" />
    </method>
    <method type="void" name="testSqrt1zNaN" startLine="990" endLine="992" />
    <method type="void" name="testTan" startLine="995" endLine="1006">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="expected" />
      <declaration type="Complex" name="actual" />
      <comment>Check that no overflow occurs (MATH-722)</comment>
    </method>
    <method type="void" name="testTanNaN" startLine="1009" endLine="1011" />
    <method type="void" name="testTanInf" startLine="1014" endLine="1023" />
    <method type="void" name="testTanCritical" startLine="1026" endLine="1029" />
    <method type="void" name="testTanh" startLine="1032" endLine="1043">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="expected" />
      <declaration type="Complex" name="actual" />
      <comment>Check that no overflow occurs (MATH-722)</comment>
    </method>
    <method type="void" name="testTanhNaN" startLine="1046" endLine="1048" />
    <method type="void" name="testTanhInf" startLine="1051" endLine="1060" />
    <method type="void" name="testTanhCritical" startLine="1063" endLine="1065" />
    <javadoc>
      <text>* test issue MATH-221</text>
    </javadoc>
    <method type="void" name="testMath221" startLine="1069" endLine="1071" />
    <javadoc>
      <text>* Test: computing <b>third roots</b> of z.
 * <pre>
 * <code>
 * <b>z = -2 + 2 * i</b>
 * => z_0 =  1      +          i
 * => z_1 = -1.3660 + 0.3660 * i
 * => z_2 =  0.3660 - 1.3660 * i
 * </code>
 * </pre></text>
    </javadoc>
    <method type="void" name="testNthRoot_normal_thirdRoot" startLine="1085" endLine="1101">
      <declaration type="Complex" name="z" />
      <declaration type="Complex[]" name="thirdRootsOfZ" />
      <comment>The complex number we want to compute all third-roots for.</comment>
      <comment>The List holding all third roots</comment>
      <comment>Returned Collection must not be empty!</comment>
      <comment>test z_0</comment>
      <comment>test z_1</comment>
      <comment>test z_2</comment>
    </method>
    <javadoc>
      <text>* Test: computing <b>fourth roots</b> of z.
 * <pre>
 * <code>
 * <b>z = 5 - 2 * i</b>
 * => z_0 =  1.5164 - 0.1446 * i
 * => z_1 =  0.1446 + 1.5164 * i
 * => z_2 = -1.5164 + 0.1446 * i
 * => z_3 = -1.5164 - 0.1446 * i
 * </code>
 * </pre></text>
    </javadoc>
    <method type="void" name="testNthRoot_normal_fourthRoot" startLine="1117" endLine="1136">
      <declaration type="Complex" name="z" />
      <declaration type="Complex[]" name="fourthRootsOfZ" />
      <comment>The complex number we want to compute all third-roots for.</comment>
      <comment>The List holding all fourth roots</comment>
      <comment>Returned Collection must not be empty!</comment>
      <comment>test z_0</comment>
      <comment>test z_1</comment>
      <comment>test z_2</comment>
      <comment>test z_3</comment>
    </method>
    <javadoc>
      <text>* Test: computing <b>third roots</b> of z.
 * <pre>
 * <code>
 * <b>z = 8</b>
 * => z_0 =  2
 * => z_1 = -1 + 1.73205 * i
 * => z_2 = -1 - 1.73205 * i
 * </code>
 * </pre></text>
    </javadoc>
    <method type="void" name="testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty" startLine="1150" endLine="1167">
      <declaration type="Complex" name="z" />
      <declaration type="Complex[]" name="thirdRootsOfZ" />
      <comment>The number 8 has three third roots. One we all already know is the number 2.</comment>
      <comment>But there are two more complex roots.</comment>
      <comment>The List holding all third roots</comment>
      <comment>Returned Collection must not be empty!</comment>
      <comment>test z_0</comment>
      <comment>test z_1</comment>
      <comment>test z_2</comment>
    </method>
    <javadoc>
      <text>* Test: computing <b>third roots</b> of z with real part 0.
 * <pre>
 * <code>
 * <b>z = 2 * i</b>
 * => z_0 =  1.0911 + 0.6299 * i
 * => z_1 = -1.0911 + 0.6299 * i
 * => z_2 = -2.3144 - 1.2599 * i
 * </code>
 * </pre></text>
    </javadoc>
    <method type="void" name="testNthRoot_cornercase_thirdRoot_realPartZero" startLine="1182" endLine="1198">
      <declaration type="Complex" name="z" />
      <declaration type="Complex[]" name="thirdRootsOfZ" />
      <comment>complex number with only imaginary part</comment>
      <comment>The List holding all third roots</comment>
      <comment>Returned Collection must not be empty!</comment>
      <comment>test z_0</comment>
      <comment>test z_1</comment>
      <comment>test z_2</comment>
    </method>
    <javadoc>
      <text>* Test cornercases with NaN and Infinity.</text>
    </javadoc>
    <method type="void" name="testNthRoot_cornercase_NAN_Inf" startLine="1204" endLine="1228">
      <declaration type="List<Complex>" name="roots" />
      <comment>NaN + finite -> NaN</comment>
      <comment>NaN + infinite -> NaN</comment>
      <comment>finite + infinite -> Inf</comment>
      <comment>infinite + infinite -> Inf</comment>
    </method>
    <javadoc>
      <text>* Test standard values</text>
    </javadoc>
    <method type="void" name="testGetArgument" startLine="1234" endLine="1259">
      <declaration type="Complex" name="z" />
    </method>
    <javadoc>
      <text>* Verify atan2-style handling of infinite parts</text>
    </javadoc>
    <method type="void" name="testGetArgumentInf" startLine="1265" endLine="1274" />
    <javadoc>
      <text>* Verify that either part NaN results in NaN</text>
    </javadoc>
    <method type="void" name="testGetArgumentNaN" startLine="1280" endLine="1284" />
    <method type="void" name="testSerial" startLine="1287" endLine="1304">
      <declaration type="Complex" name="z" />
      <declaration type="Complex" name="ncmplx" />
      <declaration type="Complex" name="infcmplx" />
      <declaration type="TestComplex" name="tz" />
      <declaration type="TestComplex" name="ntcmplx" />
      <declaration type="TestComplex" name="inftcmplx" />
    </method>
    <class name="TestComplex" extends="Complex" startLine="1306">
      <javadoc>
        <text>* Class to test extending Complex</text>
      </javadoc>
      <javadoc>
        <text>* Serialization identifier.</text>
      </javadoc>
      <declaration type="long" name="serialVersionUID" />
      <method type="constructor" name="TestComplex" startLine="1316" endLine="1318" />
      <method type="constructor" name="TestComplex" startLine="1320" endLine="1322" />
      <method type="TestComplex" name="createComplex" startLine="1325" endLine="1327" />
    </class>
  </class>
</source>
