<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.interpolation">
  <import name="org.apache.commons.math3.exception.NonMonotonicSequenceException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.TestUtils" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.polynomials.PolynomialFunction" />
  <import name="org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="SplineInterpolatorTest" startLine="30">
    <javadoc>
      <text>* Test the SplineInterpolator.</text>
      <version>$Id: SplineInterpolatorTest.java 1364030 2012-07-21 01:10:04Z erans $</version>
    </javadoc>
    <javadoc>
      <text>* error tolerance for spline interpolator value at knot points</text>
    </javadoc>
    <declaration type="double" name="knotTolerance" />
    <javadoc>
      <text>* error tolerance for interpolating polynomial coefficients</text>
    </javadoc>
    <declaration type="double" name="coefficientTolerance" />
    <javadoc>
      <text>* error tolerance for interpolated values -- high value is from sin test</text>
    </javadoc>
    <declaration type="double" name="interpolationTolerance" />
    <method type="void" name="testInterpolateLinearDegenerateTwoSegment" startLine="48" endLine="67">
      <declaration type="double[]" name="x" />
      <declaration type="double[]" name="y" />
      <declaration type="UnivariateInterpolator" name="i" />
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="PolynomialFunction[]" name="polynomials" />
      <declaration type="double[]" name="target" />
      <comment>Verify coefficients using analytical values</comment>
      <comment>Check interpolation</comment>
    </method>
    <method type="void" name="testInterpolateLinearDegenerateThreeSegment" startLine="71" endLine="91">
      <declaration type="double[]" name="x" />
      <declaration type="double[]" name="y" />
      <declaration type="UnivariateInterpolator" name="i" />
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="PolynomialFunction[]" name="polynomials" />
      <declaration type="double[]" name="target" />
      <comment>Verify coefficients using analytical values</comment>
      <comment>Check interpolation</comment>
    </method>
    <method type="void" name="testInterpolateLinear" startLine="94" endLine="108">
      <declaration type="double[]" name="x" />
      <declaration type="double[]" name="y" />
      <declaration type="UnivariateInterpolator" name="i" />
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="PolynomialFunction[]" name="polynomials" />
      <declaration type="double[]" name="target" />
      <comment>Verify coefficients using analytical values</comment>
    </method>
    <method type="void" name="testInterpolateSin" startLine="111" endLine="159">
      <declaration type="double[]" name="x" />
      <declaration type="double[]" name="y" />
      <declaration type="UnivariateInterpolator" name="i" />
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="PolynomialFunction[]" name="polynomials" />
      <declaration type="double[]" name="target" />
      <comment>Check coefficients against values computed using R (version 1.8.1, Red Hat Linux 9)

 To replicate in R:
     x[1] <- 0
     x[2] <- pi  6, etc, same for y[] (could use y <- scan() for y values)
     g <- splinefun(x, y, "natural")
     splinecoef <- eval(expression(z), envir = environment(g))
     print(splinecoef)</comment>
      <comment>Check interpolation</comment>
    </method>
    <method type="void" name="testIllegalArguments" startLine="162" endLine="191">
      <declaration type="UnivariateInterpolator" name="i" />
      <scope startLine="165" endLine="170">
        <declaration type="double[]" name="xval" />
        <declaration type="double[]" name="yval" />
      </scope>
      <scope startLine="170" endLine="172">
        <comment>Expected.</comment>
      </scope>
      <scope startLine="174" endLine="179">
        <declaration type="double[]" name="xval" />
        <declaration type="double[]" name="yval" />
      </scope>
      <scope startLine="179" endLine="181">
        <comment>Expected.</comment>
      </scope>
      <scope startLine="183" endLine="188">
        <declaration type="double[]" name="xval" />
        <declaration type="double[]" name="yval" />
      </scope>
      <scope startLine="188" endLine="190">
        <comment>Expected.</comment>
      </scope>
      <comment>Data set arrays of different size.</comment>
      <comment>X values not sorted.</comment>
      <comment>Not enough data to interpolate.</comment>
    </method>
    <javadoc>
      <text>* verifies that f(x[i]) = y[i] for i = 0..n-1 where n is common length.</text>
    </javadoc>
    <method type="void" name="verifyInterpolation" startLine="197" endLine="201">
      <scope startLine="198" endLine="200" />
    </method>
    <javadoc>
      <text>* Verifies that interpolating polynomials satisfy consistency requirement:
 * adjacent polynomials must agree through two derivatives at knot points</text>
    </javadoc>
    <method type="void" name="verifyConsistency" startLine="208" endLine="218">
      <declaration type="PolynomialFunction[]" name="polynomials" />
      <scope startLine="210" endLine="217">
        <comment>evaluate polynomials and derivatives at x[i + 1]</comment>
      </scope>
    </method>
  </class>
</source>
