<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.nonlinear.vector.jacobian">
  <import name="java.io.BufferedReader" />
  <import name="java.io.IOException" />
  <import name="java.util.ArrayList" />
  <import name="org.apache.commons.math3.analysis.MultivariateVectorFunction" />
  <import name="org.apache.commons.math3.analysis.MultivariateMatrixFunction" />
  <import name="org.apache.commons.math3.optim.nonlinear.vector.ModelFunction" />
  <import name="org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <class name="StatisticalReferenceDataset" startLine="28">
    <javadoc>
      <text>* This class gives access to the statistical reference datasets provided by the
 * NIST (available
 * <a href="http://www.itl.nist.gov/div898/strd/general/dataarchive.html">here</a>).
 * Instances of this class can be created by invocation of the{@link StatisticalReferenceDatasetFactory}.</text>
    </javadoc>
    <javadoc>
      <text>* The name of this dataset.</text>
    </javadoc>
    <declaration type="String" name="name" />
    <javadoc>
      <text>* The total number of observations (data points).</text>
    </javadoc>
    <declaration type="int" name="numObservations" />
    <javadoc>
      <text>* The total number of parameters.</text>
    </javadoc>
    <declaration type="int" name="numParameters" />
    <javadoc>
      <text>* The total number of starting points for the optimizations.</text>
    </javadoc>
    <declaration type="int" name="numStartingPoints" />
    <javadoc>
      <text>* The values of the predictor.</text>
    </javadoc>
    <declaration type="double[]" name="x" />
    <javadoc>
      <text>* The values of the response.</text>
    </javadoc>
    <declaration type="double[]" name="y" />
    <javadoc>
      <text>* The starting values. {@code startingValues[j][i]} is the value of the{@code i}-th parameter in the {@code j}-th set of starting values.</text>
    </javadoc>
    <declaration type="double[][]" name="startingValues" />
    <javadoc>
      <text>* The certified values of the parameters.</text>
    </javadoc>
    <declaration type="double[]" name="a" />
    <javadoc>
      <text>* The certified values of the standard deviation of the parameters.</text>
    </javadoc>
    <declaration type="double[]" name="sigA" />
    <javadoc>
      <text>* The certified value of the residual sum of squares.</text>
    </javadoc>
    <declaration type="double" name="residualSumOfSquares" />
    <javadoc>
      <text>* The least-squares problem.</text>
    </javadoc>
    <declaration type="LeastSquaresProblem" name="problem" />
    <javadoc>
      <text>* Creates a new instance of this class from the specified data file. The
 * file must follow the StRD format.</text>
      <param>in the data file</param>
      <throws>IOException if an I/O error occurs</throws>
    </javadoc>
    <method type="constructor" name="StatisticalReferenceDataset" startLine="81" endLine="155">
      <declaration type="ArrayList<String>" name="lines" />
      <scope startLine="84" endLine="86" />
      <declaration type="int[]" name="index" />
      <scope startLine="88" endLine="90" />
      <scope startLine="94" endLine="100">
        <declaration type="String" name="line" />
        <declaration type="String[]" name="tokens" />
        <comment>Data columns are in reverse order!!!</comment>
      </scope>
      <scope startLine="103" endLine="106" />
      <declaration type="double[][]" name="start" />
      <scope startLine="112" endLine="123">
        <declaration type="String" name="line" />
        <declaration type="String[]" name="tokens" />
        <scope startLine="115" endLine="117" />
        <scope startLine="118" endLine="120" />
      </scope>
      <scope startLine="124" endLine="126" />
      <declaration type="double" name="dummyDouble" />
      <declaration type="String" name="dummyString" />
      <scope startLine="132" endLine="142">
        <scope startLine="133" endLine="137" />
        <scope startLine="138" endLine="141">
          <declaration type="String[]" name="tokens" />
        </scope>
      </scope>
      <scope startLine="143" endLine="146" />
      <scope startLine="149" endLine="151" />
    </method>
    <class name="LeastSquaresProblem" startLine="157">
      <method type="ModelFunction" name="getModelFunction" startLine="158" endLine="169">
        <method type="double[]" name="value" startLine="160" endLine="167">
          <declaration type="int" name="n" />
          <declaration type="double[]" name="yhat" />
          <scope startLine="163" endLine="165" />
        </method>
      </method>
      <method type="ModelFunctionJacobian" name="getModelFunctionJacobian" startLine="171" endLine="183">
        <method type="double[][]" name="value" startLine="174" endLine="181">
          <declaration type="int" name="n" />
          <declaration type="double[][][]" name="j" />
          <scope startLine="177" endLine="179" />
        </method>
      </method>
      <javadoc>
        <text>* Returns the name of this dataset.</text>
        <return>the name of the dataset</return>
      </javadoc>
      <method type="String" name="getName" startLine="191" endLine="193" />
      <javadoc>
        <text>* Returns the total number of observations (data points).</text>
        <return>the number of observations</return>
      </javadoc>
      <method type="int" name="getNumObservations" startLine="200" endLine="202" />
      <javadoc>
        <text>* Returns a copy of the data arrays. The data is laid out as follows <li>{@code data[0][i] = x[i]},</li> <li>{@code data[1][i] = y[i]},</li></text>
        <return>the array of data points.</return>
      </javadoc>
      <method type="double[][]" name="getData" startLine="210" endLine="214" />
      <javadoc>
        <text>* Returns the x-value of the {@code i}-th data point.</text>
        <param>i the index of the data point</param>
        <return>the x-value</return>
      </javadoc>
      <method type="double" name="getX" startLine="222" endLine="224" />
      <javadoc>
        <text>* Returns the y-value of the {@code i}-th data point.</text>
        <param>i the index of the data point</param>
        <return>the y-value</return>
      </javadoc>
      <method type="double" name="getY" startLine="232" endLine="234" />
      <javadoc>
        <text>* Returns the total number of parameters.</text>
        <return>the number of parameters</return>
      </javadoc>
      <method type="int" name="getNumParameters" startLine="241" endLine="243" />
      <javadoc>
        <text>* Returns the certified values of the paramters.</text>
        <return>the values of the parameters</return>
      </javadoc>
      <method type="double[]" name="getParameters" startLine="250" endLine="252" />
      <javadoc>
        <text>* Returns the certified value of the {@code i}-th parameter.</text>
        <param>i the index of the parameter</param>
        <return>the value of the parameter</return>
      </javadoc>
      <method type="double" name="getParameter" startLine="260" endLine="262" />
      <javadoc>
        <text>* Reurns the certified values of the standard deviations of the parameters.</text>
        <return>the standard deviations of the parameters</return>
      </javadoc>
      <method type="double[]" name="getParametersStandardDeviations" startLine="269" endLine="271" />
      <javadoc>
        <text>* Returns the certified value of the standard deviation of the {@code i}-th
 * parameter.</text>
        <param>i the index of the parameter</param>
        <return>the standard deviation of the parameter</return>
      </javadoc>
      <method type="double" name="getParameterStandardDeviation" startLine="280" endLine="282" />
      <javadoc>
        <text>* Returns the certified value of the residual sum of squares.</text>
        <return>the residual sum of squares</return>
      </javadoc>
      <method type="double" name="getResidualSumOfSquares" startLine="289" endLine="291" />
      <javadoc>
        <text>* Returns the total number of starting points (initial guesses for the
 * optimization process).</text>
        <return>the number of starting points</return>
      </javadoc>
      <method type="int" name="getNumStartingPoints" startLine="299" endLine="301" />
      <javadoc>
        <text>* Returns the {@code i}-th set of initial values of the parameters.</text>
        <param>i the index of the starting point</param>
        <return>the starting point</return>
      </javadoc>
      <method type="double[]" name="getStartingPoint" startLine="309" endLine="311" />
      <javadoc>
        <text>* Returns the least-squares problem corresponding to fitting the model to
 * the specified data.</text>
        <return>the least-squares problem</return>
      </javadoc>
      <method type="LeastSquaresProblem" name="getLeastSquaresProblem" startLine="319" endLine="321" />
      <method name="getModelValue" type="double" startLine="323" endLine="331" />
      <javadoc>
        <text>* Returns the value of the model for the specified values of the predictor
 * variable and the parameters.</text>
        <param>x the predictor variable</param>
        <param>a the parameters</param>
        <return>the value of the model</return>
      </javadoc>
      <method name="getModelDerivatives" type="double[]" startLine="333" endLine="342" />
      <javadoc>
        <text>* Returns the values of the partial derivatives of the model with respect
 * to the parameters.</text>
        <param>x the predictor variable</param>
        <param>a the parameters</param>
        <return>the partial derivatives</return>
      </javadoc>
      <javadoc>
        <text>* <p>
 * Parses the specified text lines, and extracts the indices of the first
 * and last lines of the data defined by the specified {@code key}. This key
 * must be one of
 * </p>
 * <ul>
 * <li>{@code "Starting Values"},</li>
 * <li>{@code "Certified Values"},</li>
 * <li>{@code "Data"}.</li>
 * </ul>
 * <p>
 * In the NIST data files, the line indices are separated by the keywords{@code "lines"} and {@code "to"}.
 * </p></text>
        <param>lines the line of text to be parsed</param>
        <return>an array of two {@code int}s. First value is the index of the
 * first line, second value is the index of the last line.{@code null} if the line could not be parsed.</return>
      </javadoc>
      <method type="int[]" name="findLineNumbers" startLine="366" endLine="382">
        <scope startLine="367" endLine="380">
          <declaration type="boolean" name="flag" />
          <scope startLine="370" endLine="379">
            <declaration type="int[]" name="numbers" />
            <declaration type="String" name="from" />
            <declaration type="String" name="to" />
          </scope>
        </scope>
      </method>
    </class>
  </class>
</source>
