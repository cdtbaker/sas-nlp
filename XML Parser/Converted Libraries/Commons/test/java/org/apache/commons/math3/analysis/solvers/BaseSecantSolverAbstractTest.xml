<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.solvers">
  <import name="org.apache.commons.math3.analysis.QuinticFunction" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.XMinus5Function" />
  <import name="org.apache.commons.math3.analysis.function.Sin" />
  <import name="org.apache.commons.math3.exception.NoBracketingException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="BaseSecantSolverAbstractTest" startLine="29">
    <javadoc>
      <text>* Base class for root-finding algorithms tests derived from{@link BaseSecantSolver}.</text>
      <version>$Id$</version>
    </javadoc>
    <method name="getSolver" type="UnivariateSolver" startLine="36" endLine="39" />
    <javadoc>
      <text>* Returns the solver to use to perform the tests.</text>
      <return>the solver to use to perform the tests</return>
    </javadoc>
    <method name="getQuinticEvalCounts" type="int[]" startLine="41" endLine="47" />
    <javadoc>
      <text>* Returns the expected number of evaluations for the{@link #testQuinticZero} unit test. A value of {@code -1} indicates that
 * the test should be skipped for that solver.</text>
      <return>the expected number of evaluations for the{@link #testQuinticZero} unit test</return>
    </javadoc>
    <method type="void" name="testSinZero" startLine="50" endLine="68">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="double" name="result" />
      <declaration type="UnivariateSolver" name="solver" />
      <comment>The sinus function is behaved well around the root at pi. The second</comment>
      <comment>order derivative is zero, which means linear approximating methods</comment>
      <comment>still converge quadratically.</comment>
      <comment>System.out.println(</comment>
      <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
      <comment>System.out.println(</comment>
      <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
    </method>
    <method type="void" name="testQuinticZero" startLine="71" endLine="115">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="double" name="result" />
      <declaration type="UnivariateSolver" name="solver" />
      <declaration type="double" name="atol" />
      <declaration type="int[]" name="counts" />
      <declaration type="double[][]" name="testsData" />
      <declaration type="int" name="maxIter" />
      <scope startLine="101" endLine="114">
        <declaration type="double[]" name="testData" />
        <comment>Skip test, if needed.</comment>
        <comment>Compute solution.</comment>
        <comment>System.out.println(</comment>
        <comment>"Root: " + result + " Evaluations: " + solver.getEvaluations());</comment>
        <comment>Check solution.</comment>
      </scope>
      <comment>The quintic function has zeros at 0, +-0.5 and +-1.</comment>
      <comment>Around the root of 0 the function is well behaved, with a second</comment>
      <comment>derivative of zero a 0.</comment>
      <comment>The other roots are less well to find, in particular the root at 1,</comment>
      <comment>because the function grows fast for x>1.</comment>
      <comment>The function has extrema (first derivative is zero) at 0.27195613</comment>
      <comment>and 0.82221643, intervals containing these values are harder for</comment>
      <comment>the solvers.</comment>
      <comment>Tests data: initial bounds, and expected solution, per test case.</comment>
    </method>
    <method type="void" name="testRootEndpoints" startLine="118" endLine="135">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="UnivariateSolver" name="solver" />
      <declaration type="double" name="result" />
      <comment>End-point is root. This should be a special case in the solver, and</comment>
      <comment>the initial end-point should be returned exactly.</comment>
    </method>
    <method type="void" name="testBadEndpoints" startLine="138" endLine="159">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="UnivariateSolver" name="solver" />
      <scope startLine="141" endLine="144">
        <comment>bad interval</comment>
      </scope>
      <scope startLine="144" endLine="146">
        <comment>expected</comment>
      </scope>
      <scope startLine="147" endLine="150">
        <comment>no bracket</comment>
      </scope>
      <scope startLine="150" endLine="152">
        <comment>expected</comment>
      </scope>
      <scope startLine="153" endLine="156">
        <comment>no bracket</comment>
      </scope>
      <scope startLine="156" endLine="158">
        <comment>expected</comment>
      </scope>
    </method>
    <method type="void" name="testSolutionLeftSide" startLine="162" endLine="178">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="UnivariateSolver" name="solver" />
      <declaration type="double" name="left" />
      <declaration type="double" name="right" />
      <scope startLine="167" endLine="177">
        <declaration type="double" name="solution" />
        <scope startLine="170" endLine="172" />
        <comment>Test whether the allowed solutions are taken into account.</comment>
        <comment>Prepare for next test.</comment>
      </scope>
    </method>
    <method type="void" name="testSolutionRightSide" startLine="181" endLine="197">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="UnivariateSolver" name="solver" />
      <declaration type="double" name="left" />
      <declaration type="double" name="right" />
      <scope startLine="186" endLine="196">
        <declaration type="double" name="solution" />
        <scope startLine="189" endLine="191" />
        <comment>Test whether the allowed solutions are taken into account.</comment>
        <comment>Prepare for next test.</comment>
      </scope>
    </method>
    <method type="void" name="testSolutionBelowSide" startLine="199" endLine="215">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="UnivariateSolver" name="solver" />
      <declaration type="double" name="left" />
      <declaration type="double" name="right" />
      <scope startLine="204" endLine="214">
        <declaration type="double" name="solution" />
        <scope startLine="207" endLine="209" />
        <comment>Test whether the allowed solutions are taken into account.</comment>
        <comment>Prepare for next test.</comment>
      </scope>
    </method>
    <method type="void" name="testSolutionAboveSide" startLine="218" endLine="234">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="UnivariateSolver" name="solver" />
      <declaration type="double" name="left" />
      <declaration type="double" name="right" />
      <scope startLine="223" endLine="233">
        <declaration type="double" name="solution" />
        <scope startLine="226" endLine="228" />
        <comment>Test whether the allowed solutions are taken into account.</comment>
        <comment>Prepare for next test.</comment>
      </scope>
    </method>
    <method type="double" name="getSolution" startLine="237" endLine="256">
      <scope startLine="238" endLine="243">
        <declaration type="BracketedUnivariateSolver<UnivariateFunction>" name="bracketing" />
      </scope>
      <scope startLine="243" endLine="255">
        <declaration type="double" name="baseRoot" />
        <scope startLine="245" endLine="248" />
        <declaration type="PegasusSolver" name="bracketing" />
        <comment>the solution slipped out of interval</comment>
      </scope>
    </method>
  </class>
</source>
