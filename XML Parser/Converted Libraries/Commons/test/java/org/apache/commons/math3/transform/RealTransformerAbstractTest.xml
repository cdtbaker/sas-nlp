<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.transform">
  <import name="java.util.Random" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="RealTransformerAbstractTest" startLine="29">
    <javadoc>
      <text>* Abstract test for classes implementing the {@link RealTransformer} interface.
 * This abstract test handles the automatic generation of random data of various
 * sizes. For each generated data array, actual values (returned by the
 * transformer to be tested) are compared to expected values, returned by the{@link #transform(double[],TransformType)} (to be implemented by the user:
 * a naive method may be used). Methods are also provided to test that invalid
 * parameters throw the expected exceptions.</text>
      <since>3.0</since>
      <version>$Id: RealTransformerAbstractTest.java 1244375 2012-02-15 06:30:05Z celestin $</version>
    </javadoc>
    <javadoc>
      <text>* The common seed of all random number generators used in this test.</text>
    </javadoc>
    <declaration type="long" name="SEED" />
    <method name="createRealTransformer" type="RealTransformer" startLine="46" endLine="51" />
    <javadoc>
      <text>* Returns a new instance of the {@link RealTransformer} to be tested.</text>
      <return>a the transformer to be tested</return>
    </javadoc>
    <method name="getInvalidDataSize" type="int" startLine="53" endLine="61" />
    <javadoc>
      <text>* Returns an invalid data size. Transforms with this data size should
 * trigger a {@link MathIllegalArgumentException}.</text>
      <param>i the index of the invalid data size ({@code 0 <= i <}{@link #getNumberOfInvalidDataSizes()}</param>
      <return>an invalid data size</return>
    </javadoc>
    <method name="getNumberOfInvalidDataSizes" type="int" startLine="63" endLine="71" />
    <javadoc>
      <text>* Returns the total number of invalid data sizes to be tested. If data
 * array of any
 * size can be handled by the {@link RealTransformer} to be tested, this
 * method should return {@code 0}.</text>
      <return>the total number of invalid data sizes</return>
    </javadoc>
    <method name="getNumberOfValidDataSizes" type="int" startLine="73" endLine="78" />
    <javadoc>
      <text>* Returns the total number of valid data sizes to be tested.</text>
      <return>the total number of valid data sizes</return>
    </javadoc>
    <method name="getRelativeTolerance" type="double" startLine="80" endLine="87" />
    <javadoc>
      <text>* Returns the expected relative accuracy for data arrays of size{@code getValidDataSize(i)}.</text>
      <param>i the index of the valid data size</param>
      <return>the expected relative accuracy</return>
    </javadoc>
    <method name="getValidDataSize" type="int" startLine="89" endLine="98" />
    <javadoc>
      <text>* Returns a valid data size. This method allows for data arrays of various
 * sizes to be automatically tested (by allowing multiple values of the
 * specified index).</text>
      <param>i the index of the valid data size ({@code 0 <= i <}{@link #getNumberOfValidDataSizes()}</param>
      <return>a valid data size</return>
    </javadoc>
    <method name="getValidFunction" type="UnivariateFunction" startLine="100" endLine="110" />
    <javadoc>
      <text>* Returns a function for the accuracy check of{@link RealTransformer#transform(UnivariateFunction,double,double,int)}and{@link RealTransformer#inverseTransform(UnivariateFunction,double,double,int)}.
 * This function should be valid. In other words, none of the above methods
 * should throw an exception when passed this function.</text>
      <return>a valid function</return>
    </javadoc>
    <method name="getValidLowerBound" type="double" startLine="112" endLine="122" />
    <javadoc>
      <text>* Returns a sampling lower bound for the accuracy check of{@link RealTransformer#transform(UnivariateFunction,double,double,int)}and{@link RealTransformer#inverseTransform(UnivariateFunction,double,double,int)}.
 * This lower bound should be valid. In other words, none of the above
 * methods should throw an exception when passed this bound.</text>
      <return>a valid lower bound</return>
    </javadoc>
    <method name="getValidUpperBound" type="double" startLine="124" endLine="134" />
    <javadoc>
      <text>* Returns a sampling upper bound for the accuracy check of{@link RealTransformer#transform(UnivariateFunction,double,double,int)}and{@link RealTransformer#inverseTransform(UnivariateFunction,double,double,int)}.
 * This upper bound should be valid. In other words, none of the above
 * methods should throw an exception when passed this bound.</text>
      <return>a valid bound</return>
    </javadoc>
    <method name="transform" type="double[]" startLine="136" endLine="143" />
    <javadoc>
      <text>* Returns the expected transform of the specified real data array.</text>
      <param>x the real data array to be transformed</param>
      <param>type the type of transform (forward, inverse) to be performed</param>
      <return>the expected transform</return>
    </javadoc>
    <javadoc>
      <text>* {@link RealTransformer#transform(double[],TransformType)} should throw a{@link MathIllegalArgumentException} if data size is invalid.</text>
    </javadoc>
    <method type="void" name="testTransformRealInvalidDataSize" startLine="154" endLine="168">
      <declaration type="TransformType[]" name="type" />
      <declaration type="RealTransformer" name="transformer" />
      <scope startLine="157" endLine="167">
        <declaration type="int" name="n" />
        <scope startLine="159" endLine="166">
          <scope startLine="160" endLine="163" />
          <scope startLine="163" endLine="165" />
        </scope>
        <comment>Expected: do nothing</comment>
      </scope>
    </method>
    <javadoc>
      <text>* {@link RealTransformer#transform(UnivariateFunction,double,double,int,TransformType)}should throw a {@link MathIllegalArgumentException} if number of samples
 * is invalid.</text>
    </javadoc>
    <method type="void" name="testTransformFunctionInvalidDataSize" startLine="176" endLine="193">
      <declaration type="TransformType[]" name="type" />
      <declaration type="RealTransformer" name="transformer" />
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
      <scope startLine="182" endLine="192">
        <declaration type="int" name="n" />
        <scope startLine="184" endLine="191">
          <scope startLine="185" endLine="188" />
          <scope startLine="188" endLine="190" />
        </scope>
        <comment>Expected: do nothing</comment>
      </scope>
    </method>
    <javadoc>
      <text>* {@link RealTransformer#transform(UnivariateFunction,double,double,int,TransformType)}should throw a {@link NotStrictlyPositiveException} if number of samples
 * is not strictly positive.</text>
    </javadoc>
    <method type="void" name="testTransformFunctionNotStrictlyPositiveNumberOfSamples" startLine="201" endLine="218">
      <declaration type="TransformType[]" name="type" />
      <declaration type="RealTransformer" name="transformer" />
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
      <scope startLine="207" endLine="217">
        <declaration type="int" name="n" />
        <scope startLine="209" endLine="216">
          <scope startLine="210" endLine="213" />
          <scope startLine="213" endLine="215" />
        </scope>
        <comment>Expected: do nothing</comment>
      </scope>
    </method>
    <javadoc>
      <text>* {@link RealTransformer#transform(UnivariateFunction,double,double,int,TransformType)}should throw a {@link NumberIsTooLargeException} if sampling bounds are
 * not correctly ordered.</text>
    </javadoc>
    <method type="void" name="testTransformFunctionInvalidBounds" startLine="226" endLine="243">
      <declaration type="TransformType[]" name="type" />
      <declaration type="RealTransformer" name="transformer" />
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
      <scope startLine="232" endLine="242">
        <declaration type="int" name="n" />
        <scope startLine="234" endLine="241">
          <scope startLine="235" endLine="238" />
          <scope startLine="238" endLine="240" />
        </scope>
        <comment>Expected: do nothing</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Accuracy check of {@link RealTransformer#transform(double[],TransformType)}.
 * For each valid data size returned by{@link #getValidDataSize(int) getValidDataSize(i)},
 * a random data array is generated with{@link #createRealData(int) createRealData(i)}. The actual
 * transform is computed and compared to the expected transform, return by{@link #transform(double[],TransformType)}. Actual and expected values
 * should be equal to within the relative error returned by{@link #getRelativeTolerance(int) getRelativeTolerance(i)}.</text>
    </javadoc>
    <method type="void" name="testTransformReal" startLine="261" endLine="270">
      <declaration type="TransformType[]" name="type" />
      <scope startLine="263" endLine="269">
        <declaration type="int" name="n" />
        <declaration type="double" name="tol" />
        <scope startLine="266" endLine="268" />
      </scope>
    </method>
    <javadoc>
      <text>* Accuracy check of{@link RealTransformer#transform(UnivariateFunction,double,double,int,TransformType)}.
 * For each valid data size returned by{@link #getValidDataSize(int) getValidDataSize(i)},
 * the {@link UnivariateFunction} returned by {@link #getValidFunction()} is
 * sampled. The actual transform is computed and compared to the expected
 * transform, return by {@link #transform(double[],TransformType)}. Actual
 * and expected values should be equal to within the relative error returned
 * by {@link #getRelativeTolerance(int) getRelativeTolerance(i)}.</text>
    </javadoc>
    <method type="void" name="testTransformFunction" startLine="284" endLine="293">
      <declaration type="TransformType[]" name="type" />
      <scope startLine="286" endLine="292">
        <declaration type="int" name="n" />
        <declaration type="double" name="tol" />
        <scope startLine="289" endLine="291" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns a random array of doubles. Random generator always uses the same
 * seed.</text>
      <param>n the size of the array to be returned</param>
      <return>a random array of specified size</return>
    </javadoc>
    <method type="double[]" name="createRealData" startLine="306" endLine="313">
      <declaration type="Random" name="random" />
      <declaration type="double[]" name="data" />
      <scope startLine="309" endLine="311" />
    </method>
    <method type="void" name="doTestTransformReal" startLine="320" endLine="330">
      <declaration type="RealTransformer" name="transformer" />
      <declaration type="double[]" name="x" />
      <declaration type="double[]" name="expected" />
      <declaration type="double[]" name="actual" />
      <scope startLine="325" endLine="329">
        <declaration type="String" name="msg" />
        <declaration type="double" name="delta" />
      </scope>
    </method>
    <method type="void" name="doTestTransformFunction" startLine="333" endLine="350">
      <declaration type="RealTransformer" name="transformer" />
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
      <declaration type="double[]" name="x" />
      <scope startLine="339" endLine="342">
        <declaration type="double" name="t" />
      </scope>
      <declaration type="double[]" name="expected" />
      <declaration type="double[]" name="actual" />
      <scope startLine="345" endLine="349">
        <declaration type="String" name="msg" />
        <declaration type="double" name="delta" />
      </scope>
    </method>
    <comment>Check of preconditions.</comment>
    <comment>Accuracy tests of transform of valid data.</comment>
    <comment>Utility methods.</comment>
    <comment>The tests per se.</comment>
  </class>
</source>
