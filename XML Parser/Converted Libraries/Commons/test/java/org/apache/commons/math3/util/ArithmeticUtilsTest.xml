<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.util">
  <import name="java.util.ArrayList" />
  <import name="java.util.Arrays" />
  <import name="java.util.HashMap" />
  <import name="java.util.List" />
  <import name="java.util.Map" />
  <import name="java.math.BigInteger" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.random.RandomDataImpl" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="ArithmeticUtilsTest" startLine="34">
    <javadoc>
      <text>* Test cases for the {@link ArithmeticUtils} class.</text>
      <version>$Id: ArithmeticUtilsTest.java 1371680 2012-08-10 12:15:23Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* cached binomial coefficients</text>
    </javadoc>
    <declaration type="List<Map<Integer,Long>>" name="binomialCache" />
    <javadoc>
      <text>* Verify that b(0,0) = 1</text>
    </javadoc>
    <method type="void" name="test0Choose0" startLine="46" endLine="50" />
    <method type="void" name="testAddAndCheck" startLine="53" endLine="67">
      <declaration type="int" name="big" />
      <declaration type="int" name="bigNeg" />
      <scope startLine="57" endLine="60" />
      <scope startLine="60" endLine="61" />
      <scope startLine="62" endLine="65" />
      <scope startLine="65" endLine="66" />
    </method>
    <method type="void" name="testAddAndCheckLong" startLine="70" endLine="85">
      <declaration type="long" name="max" />
      <declaration type="long" name="min" />
    </method>
    <method type="void" name="testBinomialCoefficient" startLine="89" endLine="131">
      <declaration type="long[]" name="bcoef5" />
      <declaration type="long[]" name="bcoef6" />
      <scope startLine="105" endLine="107" />
      <scope startLine="108" endLine="110" />
      <scope startLine="112" endLine="118">
        <scope startLine="113" endLine="117" />
      </scope>
      <declaration type="int[]" name="n" />
      <declaration type="int[]" name="k" />
      <scope startLine="122" endLine="130">
        <declaration type="long" name="expected" />
      </scope>
    </method>
    <method type="void" name="testBinomialCoefficientFail" startLine="134" endLine="190">
      <scope startLine="135" endLine="138" />
      <scope startLine="138" endLine="140">
        <comment>ignored</comment>
      </scope>
      <scope startLine="142" endLine="145" />
      <scope startLine="145" endLine="147">
        <comment>ignored</comment>
      </scope>
      <scope startLine="149" endLine="152" />
      <scope startLine="152" endLine="154">
        <comment>ignored</comment>
      </scope>
      <scope startLine="156" endLine="159" />
      <scope startLine="159" endLine="161">
        <comment>ignored</comment>
      </scope>
      <scope startLine="162" endLine="165" />
      <scope startLine="165" endLine="167">
        <comment>ignored</comment>
      </scope>
      <scope startLine="168" endLine="171" />
      <scope startLine="171" endLine="173">
        <comment>ignored</comment>
      </scope>
      <scope startLine="175" endLine="178" />
      <scope startLine="178" endLine="180">
        <comment>ignored</comment>
      </scope>
      <scope startLine="181" endLine="184" />
      <scope startLine="184" endLine="186">
        <comment>ignored</comment>
      </scope>
      <declaration type="double" name="x" />
    </method>
    <javadoc>
      <text>* Tests correctness for large n and sharpness of upper bound in API doc
 * JIRA: MATH-241</text>
    </javadoc>
    <method type="void" name="testBinomialCoefficientLarge" startLine="197" endLine="251">
      <scope startLine="199" endLine="226">
        <scope startLine="200" endLine="225">
          <declaration type="long" name="ourResult" />
          <declaration type="long" name="exactResult" />
          <declaration type="boolean" name="shouldThrow" />
          <declaration type="boolean" name="didThrow" />
          <scope startLine="205" endLine="207" />
          <scope startLine="207" endLine="209" />
          <scope startLine="210" endLine="212" />
          <scope startLine="212" endLine="214" />
          <scope startLine="219" endLine="224" />
        </scope>
      </scope>
      <declaration type="long" name="ourResult" />
      <declaration type="long" name="exactResult" />
      <scope startLine="237" endLine="240" />
      <scope startLine="240" endLine="242">
        <comment>Expected</comment>
      </scope>
      <declaration type="int" name="n" />
      <comment>This tests all legal and illegal values for n <= 200.</comment>
      <comment>This one should throw</comment>
    </method>
    <method type="void" name="testFactorial" startLine="254" endLine="264">
      <scope startLine="255" endLine="259" />
    </method>
    <method type="void" name="testFactorialFail" startLine="267" endLine="293">
      <scope startLine="268" endLine="271" />
      <scope startLine="271" endLine="273">
        <comment>ignored</comment>
      </scope>
      <scope startLine="274" endLine="277" />
      <scope startLine="277" endLine="279">
        <comment>ignored</comment>
      </scope>
      <scope startLine="280" endLine="283" />
      <scope startLine="283" endLine="285">
        <comment>ignored</comment>
      </scope>
      <scope startLine="286" endLine="289" />
      <scope startLine="289" endLine="291">
        <comment>ignored</comment>
      </scope>
    </method>
    <method type="void" name="testGcd" startLine="296" endLine="344">
      <declaration type="int" name="a" />
      <declaration type="int" name="b" />
      <declaration type="int" name="c" />
      <scope startLine="323" endLine="327">
        <comment>gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE</comment>
      </scope>
      <scope startLine="327" endLine="329">
        <comment>expected</comment>
      </scope>
      <scope startLine="330" endLine="334">
        <comment>gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE</comment>
      </scope>
      <scope startLine="334" endLine="336">
        <comment>expected</comment>
      </scope>
      <scope startLine="337" endLine="341">
        <comment>gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE</comment>
      </scope>
      <scope startLine="341" endLine="343">
        <comment>expected</comment>
      </scope>
    </method>
    <method type="void" name="testGcdConsistency" startLine="347" endLine="368">
      <declaration type="int[]" name="primeList" />
      <declaration type="ArrayList<Integer>" name="primes" />
      <scope startLine="350" endLine="352" />
      <declaration type="RandomDataImpl" name="randomData" />
      <scope startLine="354" endLine="367">
        <declaration type="Object[]" name="sample" />
        <declaration type="int" name="p1" />
        <declaration type="int" name="p2" />
        <declaration type="int" name="p3" />
        <declaration type="int" name="p4" />
        <declaration type="int" name="i1" />
        <declaration type="int" name="i2" />
        <declaration type="int" name="gcd" />
        <declaration type="long" name="l1" />
        <declaration type="long" name="l2" />
      </scope>
    </method>
    <method type="void" name="testGcdLong" startLine="371" endLine="421">
      <declaration type="long" name="a" />
      <declaration type="long" name="b" />
      <declaration type="long" name="c" />
      <scope startLine="400" endLine="404">
        <comment>gcd(Long.MIN_VALUE, 0) > Long.MAX_VALUE</comment>
      </scope>
      <scope startLine="404" endLine="406">
        <comment>expected</comment>
      </scope>
      <scope startLine="407" endLine="411">
        <comment>gcd(0, Long.MIN_VALUE) > Long.MAX_VALUE</comment>
      </scope>
      <scope startLine="411" endLine="413">
        <comment>expected</comment>
      </scope>
      <scope startLine="414" endLine="418">
        <comment>gcd(Long.MIN_VALUE, Long.MIN_VALUE) > Long.MAX_VALUE</comment>
      </scope>
      <scope startLine="418" endLine="420">
        <comment>expected</comment>
      </scope>
    </method>
    <method type="void" name="testLcm" startLine="425" endLine="469">
      <declaration type="int" name="a" />
      <declaration type="int" name="b" />
      <declaration type="int" name="c" />
      <scope startLine="447" endLine="451">
        <comment>lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int</comment>
      </scope>
      <scope startLine="451" endLine="453">
        <comment>expected</comment>
      </scope>
      <scope startLine="455" endLine="459">
        <comment>lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int</comment>
      </scope>
      <scope startLine="459" endLine="461">
        <comment>expected</comment>
      </scope>
      <scope startLine="463" endLine="466" />
      <scope startLine="466" endLine="468">
        <comment>expected</comment>
      </scope>
      <comment>Assert that no intermediate value overflows:</comment>
      <comment>The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)</comment>
      <comment>Special case</comment>
    </method>
    <method type="void" name="testLcmLong" startLine="472" endLine="520">
      <declaration type="long" name="a" />
      <declaration type="long" name="b" />
      <declaration type="long" name="c" />
      <scope startLine="496" endLine="500">
        <comment>lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int</comment>
      </scope>
      <scope startLine="500" endLine="502">
        <comment>expected</comment>
      </scope>
      <scope startLine="504" endLine="508">
        <comment>lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int</comment>
      </scope>
      <scope startLine="508" endLine="510">
        <comment>expected</comment>
      </scope>
      <scope startLine="514" endLine="517" />
      <scope startLine="517" endLine="519">
        <comment>expected</comment>
      </scope>
      <comment>Assert that no intermediate value overflows:</comment>
      <comment>The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)</comment>
      <comment>Special case</comment>
    </method>
    <method type="void" name="testMulAndCheck" startLine="523" endLine="537">
      <declaration type="int" name="big" />
      <declaration type="int" name="bigNeg" />
      <scope startLine="527" endLine="530" />
      <scope startLine="530" endLine="531" />
      <scope startLine="532" endLine="535" />
      <scope startLine="535" endLine="536" />
    </method>
    <method type="void" name="testMulAndCheckLong" startLine="540" endLine="559">
      <declaration type="long" name="max" />
      <declaration type="long" name="min" />
    </method>
    <method type="void" name="testSubAndCheck" startLine="562" endLine="578">
      <declaration type="int" name="big" />
      <declaration type="int" name="bigNeg" />
      <scope startLine="568" endLine="571" />
      <scope startLine="571" endLine="572" />
      <scope startLine="573" endLine="576" />
      <scope startLine="576" endLine="577" />
    </method>
    <method type="void" name="testSubAndCheckErrorMessage" startLine="581" endLine="589">
      <declaration type="int" name="big" />
      <scope startLine="583" endLine="586" />
      <scope startLine="586" endLine="588" />
    </method>
    <method type="void" name="testSubAndCheckLong" startLine="592" endLine="605">
      <declaration type="long" name="max" />
      <declaration type="long" name="min" />
      <comment>min == -1-max</comment>
    </method>
    <method type="void" name="testPow" startLine="608" endLine="682">
      <scope startLine="612" endLine="615" />
      <scope startLine="615" endLine="617">
        <comment>expected behavior</comment>
      </scope>
      <scope startLine="621" endLine="624" />
      <scope startLine="624" endLine="626">
        <comment>expected behavior</comment>
      </scope>
      <scope startLine="630" endLine="633" />
      <scope startLine="633" endLine="635">
        <comment>expected behavior</comment>
      </scope>
      <scope startLine="639" endLine="642" />
      <scope startLine="642" endLine="644">
        <comment>expected behavior</comment>
      </scope>
      <declaration type="BigInteger" name="twentyOne" />
      <scope startLine="649" endLine="652" />
      <scope startLine="652" endLine="654">
        <comment>expected behavior</comment>
      </scope>
      <scope startLine="658" endLine="661" />
      <scope startLine="661" endLine="663">
        <comment>expected behavior</comment>
      </scope>
      <scope startLine="667" endLine="670" />
      <scope startLine="670" endLine="672">
        <comment>expected behavior</comment>
      </scope>
      <declaration type="BigInteger" name="bigOne" />
    </method>
    <method type="void" name="testIsPowerOfTwo" startLine="685" endLine="696">
      <declaration type="int" name="n" />
      <declaration type="boolean[]" name="expected" />
      <scope startLine="689" endLine="691" />
      <scope startLine="692" endLine="695">
        <declaration type="boolean" name="actual" />
      </scope>
    </method>
    <method type="void" name="testStirlingS2" startLine="699" endLine="738">
      <scope startLine="703" endLine="712">
        <scope startLine="706" endLine="710" />
      </scope>
    </method>
    <method type="void" name="testStirlingS2NegativeN" startLine="741" endLine="743" />
    <method type="void" name="testStirlingS2LargeK" startLine="746" endLine="748" />
    <method type="void" name="testStirlingS2Overflow" startLine="751" endLine="753" />
    <javadoc>
      <text>* Exact (caching) recursive implementation to test against</text>
    </javadoc>
    <method type="long" name="binomialCoefficient" startLine="758" endLine="789">
      <scope startLine="759" endLine="764">
        <declaration type="Long" name="cachedResult" />
        <scope startLine="761" endLine="763" />
      </scope>
      <declaration type="long" name="result" />
      <scope startLine="766" endLine="768" />
      <scope startLine="768" endLine="770" />
      <scope startLine="770" endLine="780">
        <scope startLine="772" endLine="774" />
        <scope startLine="775" endLine="777" />
        <comment>Reduce stack depth for larger values of n</comment>
      </scope>
      <scope startLine="781" endLine="783" />
      <scope startLine="784" endLine="786" />
    </method>
    <javadoc>
      <text>* Exact direct multiplication implementation to test against</text>
    </javadoc>
    <method type="long" name="factorial" startLine="794" endLine="800">
      <declaration type="long" name="result" />
      <scope startLine="796" endLine="798" />
    </method>
    <method type="void" name="testAddAndCheckLongFailure" startLine="802" endLine="809">
      <scope startLine="803" endLine="806" />
      <scope startLine="806" endLine="808">
        <comment>success</comment>
      </scope>
    </method>
    <method type="void" name="testMulAndCheckLongFailure" startLine="811" endLine="818">
      <scope startLine="812" endLine="815" />
      <scope startLine="815" endLine="817">
        <comment>success</comment>
      </scope>
    </method>
    <method type="void" name="testSubAndCheckLongFailure" startLine="820" endLine="827">
      <scope startLine="821" endLine="824" />
      <scope startLine="824" endLine="826">
        <comment>success</comment>
      </scope>
    </method>
  </class>
</source>
