<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.complex">
  <import name="java.util.Random" />
  <import name="org.apache.commons.math3.complex.Quaternion" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.ZeroException" />
  <import name="org.apache.commons.math3.geometry.euclidean.threed.Rotation" />
  <import name="org.apache.commons.math3.geometry.euclidean.threed.Vector3D" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Test" />
  <import name="org.junit.Assert" />
  <class name="QuaternionTest" startLine="29">
    <javadoc>
      <text>* Epsilon for double comparison.</text>
    </javadoc>
    <declaration type="double" name="EPS" />
    <javadoc>
      <text>* Epsilon for double comparison.</text>
    </javadoc>
    <declaration type="double" name="COMPARISON_EPS" />
    <method type="void" name="testAccessors1" startLine="36" endLine="47">
      <declaration type="double" name="q0" />
      <declaration type="double" name="q1" />
      <declaration type="double" name="q2" />
      <declaration type="double" name="q3" />
      <declaration type="Quaternion" name="q" />
    </method>
    <method type="void" name="testAccessors2" startLine="50" endLine="64">
      <declaration type="double" name="q0" />
      <declaration type="double" name="q1" />
      <declaration type="double" name="q2" />
      <declaration type="double" name="q3" />
      <declaration type="Quaternion" name="q" />
      <declaration type="double" name="sP" />
      <declaration type="double[]" name="vP" />
    </method>
    <method type="void" name="testAccessors3" startLine="67" endLine="81">
      <declaration type="double" name="q0" />
      <declaration type="double" name="q1" />
      <declaration type="double" name="q2" />
      <declaration type="double" name="q3" />
      <declaration type="Quaternion[]" name="q" />
      <declaration type="double" name="sP" />
      <declaration type="double[]" name="vP" />
    </method>
    <method type="void" name="testWrongDimension" startLine="84" endLine="86" />
    <method type="void" name="testConjugate" startLine="89" endLine="102">
      <declaration type="double" name="q0" />
      <declaration type="double" name="q1" />
      <declaration type="double" name="q2" />
      <declaration type="double" name="q3" />
      <declaration type="Quaternion" name="q" />
      <declaration type="Quaternion" name="qConjugate" />
    </method>
    <method type="void" name="testProductQuaternionQuaternion" startLine="105" endLine="146">
      <declaration type="Quaternion" name="qA" />
      <declaration type="Quaternion" name="qB" />
      <declaration type="Quaternion" name="qResult" />
      <declaration type="Vector3D" name="vectorA" />
      <declaration type="Vector3D" name="vectorB" />
      <declaration type="Vector3D" name="vectorResult" />
      <declaration type="double" name="scalarPartRef" />
      <declaration type="Vector3D" name="vectorPartRef" />
      <declaration type="double" name="norm" />
      <declaration type="Quaternion" name="conjugateOfProduct" />
      <declaration type="Quaternion" name="productOfConjugate" />
      <comment>Case : analytic test case</comment>
      <comment>comparison with the result given by the formula :</comment>
      <comment>qResult = (scalarA * scalarB - vectorA . vectorB) + (scalarA * vectorB + scalarB * vectorA + vectorA ^</comment>
      <comment>vectorB)</comment>
      <comment>Conjugate of the product of two quaternions and product of their conjugates :</comment>
      <comment>Conj(qA * qB) = Conj(qB) * Conj(qA)</comment>
    </method>
    <method type="void" name="testProductQuaternionVector" startLine="149" endLine="197">
      <declaration type="Quaternion" name="quaternion" />
      <declaration type="double[]" name="vector" />
      <declaration type="Quaternion" name="qResultQxV" />
      <declaration type="double[]" name="vectorQ" />
      <declaration type="double[]" name="vectorResultQxV" />
      <declaration type="double" name="scalarPartRefQxV" />
      <declaration type="Vector3D" name="vectorPartRefQxV" />
      <declaration type="double" name="normQxV" />
      <declaration type="Quaternion" name="qResultVxQ" />
      <declaration type="double[]" name="vectorResultVxQ" />
      <declaration type="double" name="scalarPartRefVxQ" />
      <declaration type="Vector3D" name="vectorPartRefVxQ" />
      <declaration type="double" name="normVxQ" />
      <comment>Case : Product between a vector and a quaternion : QxV</comment>
      <comment>comparison with the result given by the formula :</comment>
      <comment>qResult = (- vectorQ . vector) + (scalarQ * vector + vectorQ ^ vector)</comment>
      <comment>Case : Product between a vector and a quaternion : VxQ</comment>
      <comment>comparison with the result given by the formula :</comment>
      <comment>qResult = (- vector . vectorQ) + (scalarQ * vector + vector ^ vectorQ)</comment>
    </method>
    <method type="void" name="testDotProductQuaternionQuaternion" startLine="200" endLine="212">
      <declaration type="double" name="expected" />
      <declaration type="Quaternion" name="q1" />
      <declaration type="Quaternion" name="q2" />
      <declaration type="double" name="actual1" />
      <declaration type="double" name="actual2" />
      <comment>expected output</comment>
      <comment>inputs</comment>
    </method>
    <method type="void" name="testScalarMultiplyDouble" startLine="215" endLine="231">
      <declaration type="double" name="w" />
      <declaration type="double" name="x" />
      <declaration type="double" name="y" />
      <declaration type="double" name="z" />
      <declaration type="Quaternion" name="q1" />
      <declaration type="double" name="a" />
      <declaration type="Quaternion" name="q" />
      <comment>expected outputs</comment>
      <comment>inputs</comment>
    </method>
    <method type="void" name="testAddQuaternionQuaternion" startLine="234" endLine="256">
      <declaration type="double" name="w" />
      <declaration type="double" name="x" />
      <declaration type="double" name="y" />
      <declaration type="double" name="z" />
      <declaration type="Quaternion" name="q1" />
      <declaration type="Quaternion" name="q2" />
      <declaration type="Quaternion" name="qa" />
      <declaration type="Quaternion" name="qb" />
      <comment>expected outputs</comment>
      <comment>inputs</comment>
    </method>
    <method type="void" name="testSubtractQuaternionQuaternion" startLine="259" endLine="281">
      <declaration type="double" name="w" />
      <declaration type="double" name="x" />
      <declaration type="double" name="y" />
      <declaration type="double" name="z" />
      <declaration type="Quaternion" name="q1" />
      <declaration type="Quaternion" name="q2" />
      <declaration type="Quaternion" name="qa" />
      <declaration type="Quaternion" name="qb" />
      <comment>expected outputs</comment>
      <comment>inputs</comment>
    </method>
    <method type="void" name="testNorm" startLine="284" endLine="298">
      <declaration type="double" name="q0" />
      <declaration type="double" name="q1" />
      <declaration type="double" name="q2" />
      <declaration type="double" name="q3" />
      <declaration type="Quaternion" name="q" />
      <declaration type="double" name="norm" />
      <declaration type="double" name="normSquareRef" />
    </method>
    <method type="void" name="testNormalize" startLine="301" endLine="313">
      <declaration type="Quaternion" name="q" />
      <declaration type="Quaternion" name="versor" />
    </method>
    <method type="void" name="testNormalizeFail" startLine="316" endLine="319">
      <declaration type="Quaternion" name="zeroQ" />
    </method>
    <method type="void" name="testObjectEquals" startLine="322" endLine="332">
      <declaration type="double" name="one" />
      <declaration type="Quaternion" name="q1" />
      <declaration type="Quaternion" name="q2" />
      <declaration type="Quaternion" name="q3" />
    </method>
    <method type="void" name="testQuaternionEquals" startLine="335" endLine="352">
      <declaration type="double" name="inc" />
      <declaration type="Quaternion" name="q1" />
      <declaration type="Quaternion" name="q2" />
      <declaration type="Quaternion" name="q3" />
      <declaration type="Quaternion" name="q4" />
      <declaration type="Quaternion" name="q5" />
    </method>
    <method type="void" name="testQuaternionEquals2" startLine="355" endLine="363">
      <declaration type="Quaternion" name="q1" />
      <declaration type="double" name="gap" />
      <declaration type="Quaternion" name="q2" />
    </method>
    <method type="void" name="testIsUnitQuaternion" startLine="366" endLine="377">
      <declaration type="Random" name="r" />
      <declaration type="int" name="numberOfTrials" />
      <scope startLine="369" endLine="373">
        <declaration type="Quaternion" name="q1" />
        <declaration type="Quaternion" name="q2" />
      </scope>
      <declaration type="Quaternion" name="q" />
    </method>
    <method type="void" name="testIsPureQuaternion" startLine="380" endLine="397">
      <declaration type="Quaternion" name="q1" />
      <declaration type="Quaternion" name="q2" />
      <declaration type="Quaternion" name="q3" />
      <declaration type="Random" name="r" />
      <declaration type="double[]" name="v" />
      <declaration type="Quaternion" name="q4" />
      <declaration type="Quaternion" name="q5" />
    </method>
    <method type="void" name="testPolarForm" startLine="400" endLine="419">
      <declaration type="Random" name="r" />
      <declaration type="int" name="numberOfTrials" />
      <scope startLine="403" endLine="418">
        <declaration type="Quaternion" name="q" />
        <declaration type="Quaternion" name="qP" />
        <declaration type="Rotation" name="rot" />
        <declaration type="Rotation" name="rotP" />
      </scope>
    </method>
    <method type="void" name="testGetInverse" startLine="422" endLine="444">
      <declaration type="Quaternion" name="q" />
      <declaration type="Quaternion" name="inverseQ" />
      <declaration type="Quaternion" name="product" />
      <declaration type="Quaternion" name="qNul" />
      <scope startLine="438" endLine="441">
        <declaration type="Quaternion" name="inverseQNul" />
      </scope>
      <scope startLine="441" endLine="443">
        <comment>expected</comment>
      </scope>
    </method>
    <method type="void" name="testToString" startLine="447" endLine="450">
      <declaration type="Quaternion" name="q" />
    </method>
  </class>
</source>
