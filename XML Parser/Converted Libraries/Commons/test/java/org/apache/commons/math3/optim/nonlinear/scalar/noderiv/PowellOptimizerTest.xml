<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.nonlinear.scalar.noderiv">
  <import name="org.apache.commons.math3.analysis.MultivariateFunction" />
  <import name="org.apache.commons.math3.analysis.SumSincFunction" />
  <import name="org.apache.commons.math3.optim.PointValuePair" />
  <import name="org.apache.commons.math3.optim.InitialGuess" />
  <import name="org.apache.commons.math3.optim.MaxEval" />
  <import name="org.apache.commons.math3.optim.SimpleBounds" />
  <import name="org.apache.commons.math3.optim.nonlinear.scalar.GoalType" />
  <import name="org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction" />
  <import name="org.apache.commons.math3.exception.MathUnsupportedOperationException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="PowellOptimizerTest" startLine="32">
    <javadoc>
      <text>* Test for {@link PowellOptimizer}.</text>
    </javadoc>
    <method type="void" name="testBoundsUnsupported" startLine="37" endLine="48">
      <declaration type="MultivariateFunction" name="func" />
      <declaration type="PowellOptimizer" name="optim" />
    </method>
    <method type="void" name="testSumSinc" startLine="51" endLine="76">
      <declaration type="MultivariateFunction" name="func" />
      <declaration type="int" name="dim" />
      <declaration type="double[]" name="minPoint" />
      <scope startLine="56" endLine="58" />
      <declaration type="double[]" name="init" />
      <scope startLine="63" endLine="65" />
      <scope startLine="69" endLine="71" />
      <comment>Initial is minimum.</comment>
      <comment>Initial is far from minimum.</comment>
      <comment>More stringent line search tolerance enhances the precision</comment>
      <comment>of the result.</comment>
    </method>
    <method type="void" name="testQuadratic" startLine="79" endLine="107">
      <declaration type="MultivariateFunction[]" name="func" />
      <method type="double" name="value" startLine="81" endLine="85">
        <declaration type="double" name="a" />
        <declaration type="double" name="b" />
      </method>
      <declaration type="int" name="dim" />
      <declaration type="double[]" name="minPoint" />
      <scope startLine="90" endLine="92" />
      <declaration type="double[]" name="init" />
      <scope startLine="97" endLine="99" />
      <scope startLine="103" endLine="105" />
      <comment>Initial is minimum.</comment>
      <comment>Initial is far from minimum.</comment>
    </method>
    <method type="void" name="testMaximizeQuadratic" startLine="110" endLine="138">
      <declaration type="MultivariateFunction[]" name="func" />
      <method type="double" name="value" startLine="112" endLine="116">
        <declaration type="double" name="a" />
        <declaration type="double" name="b" />
      </method>
      <declaration type="int" name="dim" />
      <declaration type="double[]" name="maxPoint" />
      <scope startLine="121" endLine="123" />
      <declaration type="double[]" name="init" />
      <scope startLine="128" endLine="130" />
      <scope startLine="134" endLine="136" />
      <comment>Initial is minimum.</comment>
      <comment>Initial is far from minimum.</comment>
    </method>
    <javadoc>
      <text>* Ensure that we do not increase the number of function evaluations when
 * the function values are scaled up.
 * Note that the tolerances parameters passed to the constructor must
 * still hold sensible values because they are used to set the line search
 * tolerances.</text>
    </javadoc>
    <method type="void" name="testRelativeToleranceOnScaledValues" startLine="148" endLine="203">
      <declaration type="MultivariateFunction[]" name="func" />
      <method type="double" name="value" startLine="150" endLine="154">
        <declaration type="double" name="a" />
        <declaration type="double" name="b" />
      </method>
      <declaration type="int" name="dim" />
      <declaration type="double[]" name="minPoint" />
      <scope startLine="159" endLine="161" />
      <declaration type="double[]" name="init" />
      <scope startLine="165" endLine="167" />
      <declaration type="double" name="relTol" />
      <declaration type="int" name="maxEval" />
      <declaration type="PowellOptimizer" name="optim" />
      <declaration type="PointValuePair" name="funcResult" />
      <declaration type="double" name="funcValue" />
      <declaration type="int" name="funcEvaluations" />
      <declaration type="double" name="scale" />
      <declaration type="MultivariateFunction[]" name="funcScaled" />
      <method type="double" name="value" startLine="185" endLine="187" />
      <declaration type="PointValuePair" name="funcScaledResult" />
      <declaration type="double" name="funcScaledValue" />
      <declaration type="int" name="funcScaledEvaluations" />
      <comment>Initial is far from minimum.</comment>
      <comment>Very small absolute tolerance to rely solely on the relative</comment>
      <comment>tolerance as a stopping criterion</comment>
      <comment>Check that both minima provide the same objective funciton values,</comment>
      <comment>within the relative function tolerance.</comment>
      <comment>Check that the numbers of evaluations are the same.</comment>
    </method>
    <javadoc>
      <param>func Function to optimize.</param>
      <param>optimum Expected optimum.</param>
      <param>init Starting point.</param>
      <param>goal Minimization or maximization.</param>
      <param>fTol Tolerance (relative error on the objective function) for
 * "Powell" algorithm.</param>
      <param>pointTol Tolerance for checking that the optimum is correct.</param>
    </javadoc>
    <method type="void" name="doTest" startLine="219" endLine="232">
      <declaration type="PowellOptimizer" name="optim" />
      <declaration type="PointValuePair" name="result" />
      <declaration type="double[]" name="point" />
      <scope startLine="228" endLine="231" />
    </method>
    <javadoc>
      <param>func Function to optimize.</param>
      <param>optimum Expected optimum.</param>
      <param>init Starting point.</param>
      <param>goal Minimization or maximization.</param>
      <param>fTol Tolerance (relative error on the objective function) for
 * "Powell" algorithm.</param>
      <param>fLineTol Tolerance (relative error on the objective function)
 * for the internal line search algorithm.</param>
      <param>pointTol Tolerance for checking that the optimum is correct.</param>
    </javadoc>
    <method type="void" name="doTest" startLine="251" endLine="267">
      <declaration type="PowellOptimizer" name="optim" />
      <declaration type="PointValuePair" name="result" />
      <declaration type="double[]" name="point" />
      <scope startLine="261" endLine="264" />
    </method>
  </class>
</source>
