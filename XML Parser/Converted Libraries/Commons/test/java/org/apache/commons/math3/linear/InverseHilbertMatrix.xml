<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.util.ArithmeticUtils" />
  <class name="InverseHilbertMatrix" extends="RealLinearOperator" startLine="22">
    <javadoc>
      <text>* This class implements inverses of Hilbert Matrices as{@link RealLinearOperator}.</text>
    </javadoc>
    <javadoc>
      <text>* The size of the matrix.</text>
    </javadoc>
    <declaration type="int" name="n" />
    <javadoc>
      <text>* Creates a new instance of this class.</text>
      <param>n Size of the matrix to be created.</param>
    </javadoc>
    <method type="constructor" name="InverseHilbertMatrix" startLine="37" endLine="39" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getColumnDimension" startLine="43" endLine="45" />
    <javadoc>
      <text>* Returns the {@code (i, j)} entry of the inverse Hilbert matrix. Exact
 * arithmetic is used; in case of overflow, an exception is thrown.</text>
      <param>i Row index (starts at 0).</param>
      <param>j Column index (starts at 0).</param>
      <return>The coefficient of the inverse Hilbert matrix.</return>
    </javadoc>
    <method type="long" name="getEntry" startLine="55" endLine="65">
      <declaration type="long" name="val" />
      <declaration type="long" name="aux" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getRowDimension" startLine="69" endLine="71" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="RealVector" name="operate" startLine="75" endLine="99">
      <scope startLine="76" endLine="78" />
      <declaration type="double[]" name="y" />
      <scope startLine="80" endLine="97">
        <declaration type="double" name="pos" />
        <declaration type="double" name="neg" />
        <scope startLine="83" endLine="95">
          <declaration type="double" name="xj" />
          <declaration type="long" name="coeff" />
          <declaration type="double" name="daux" />
          <scope startLine="90" endLine="92" />
          <scope startLine="92" endLine="94" />
        </scope>
        <comment>Positive and negative values are sorted out in order to limit</comment>
        <comment>catastrophic cancellations (do not forget that Hilbert</comment>
        <comment>matrices are *very* ill-conditioned!</comment>
      </scope>
    </method>
  </class>
</source>
