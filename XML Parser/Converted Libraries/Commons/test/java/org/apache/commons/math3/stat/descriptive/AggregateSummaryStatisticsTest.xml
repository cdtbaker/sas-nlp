<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive">
  <import name="java.util.ArrayList" />
  <import name="java.util.Collection" />
  <import name="org.apache.commons.math3.TestUtils" />
  <import name="org.apache.commons.math3.distribution.RealDistribution" />
  <import name="org.apache.commons.math3.distribution.UniformRealDistribution" />
  <import name="org.apache.commons.math3.distribution.IntegerDistribution" />
  <import name="org.apache.commons.math3.distribution.UniformIntegerDistribution" />
  <import name="org.apache.commons.math3.util.Precision" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="AggregateSummaryStatisticsTest" startLine="34">
    <javadoc>
      <text>* Test cases for {@link AggregateSummaryStatistics}</text>
    </javadoc>
    <javadoc>
      <text>* Tests the standard aggregation behavior</text>
    </javadoc>
    <method type="void" name="testAggregation" startLine="44" endLine="69">
      <declaration type="AggregateSummaryStatistics" name="aggregate" />
      <declaration type="SummaryStatistics" name="setOneStats" />
      <declaration type="SummaryStatistics" name="setTwoStats" />
    </method>
    <javadoc>
      <text>* Verify that aggregating over a partition gives the same results
 * as direct computation.
 * 1) Randomly generate a dataset of 10-100 values
 * from [-100, 100]
 * 2) Divide the dataset it into 2-5 partitions
 * 3) Create an AggregateSummaryStatistic and ContributingStatistics
 * for each partition
 * 4) Compare results from the AggregateSummaryStatistic with values
 * returned by a single SummaryStatistics instance that is provided
 * the full dataset</text>
    </javadoc>
    <method type="void" name="testAggregationConsistency" startLine="85" endLine="124">
      <declaration type="double[]" name="totalSample" />
      <declaration type="double[][]" name="subSamples" />
      <declaration type="int" name="nSamples" />
      <declaration type="AggregateSummaryStatistics" name="aggregate" />
      <declaration type="SummaryStatistics" name="totalStats" />
      <declaration type="SummaryStatistics[]" name="componentStats" />
      <scope startLine="99" endLine="108">
        <scope startLine="105" endLine="107" />
        <comment>Make componentStats[i] a contributing statistic to aggregate</comment>
        <comment>Add values from subsample</comment>
      </scope>
      <scope startLine="111" endLine="113" />
      <comment>Generate a random sample and random partition</comment>
      <comment>Create aggregator and total stats for comparison</comment>
      <comment>Create array of component stats</comment>
      <comment>Compute totalStats directly</comment>
      <comment>Compare statistics in totalStats with aggregate.
 Note that guaranteed success of this comparison depends on the
 fact that <aggregate> gets values in exactly the same order
 as <totalStats>.</comment>
    </method>
    <javadoc>
      <text>* Test aggregate function by randomly generating a dataset of 10-100 values
 * from [-100, 100], dividing it into 2-5 partitions, computing stats for each
 * partition and comparing the result of aggregate(...) applied to the collection
 * of per-partition SummaryStatistics with a single SummaryStatistics computed
 * over the full sample.</text>
    </javadoc>
    <method type="void" name="testAggregate" startLine="135" endLine="164">
      <declaration type="double[]" name="totalSample" />
      <declaration type="double[][]" name="subSamples" />
      <declaration type="int" name="nSamples" />
      <declaration type="SummaryStatistics" name="totalStats" />
      <scope startLine="144" endLine="146" />
      <declaration type="SummaryStatistics[]" name="subSampleStats" />
      <scope startLine="150" endLine="152" />
      <declaration type="Collection<SummaryStatistics>" name="aggregate" />
      <scope startLine="154" endLine="159">
        <scope startLine="155" endLine="157" />
      </scope>
      <declaration type="StatisticalSummary" name="aggregatedStats" />
      <comment>Generate a random sample and random partition</comment>
      <comment>Compute combined stats directly</comment>
      <comment>Now compute subsample stats individually and aggregate</comment>
      <comment>Compare values</comment>
    </method>
    <method type="void" name="testAggregateDegenerate" startLine="168" endLine="194">
      <declaration type="double[]" name="totalSample" />
      <declaration type="double[][]" name="subSamples" />
      <declaration type="SummaryStatistics" name="totalStats" />
      <scope startLine="174" endLine="176" />
      <declaration type="SummaryStatistics[]" name="subSampleStats" />
      <scope startLine="180" endLine="182" />
      <declaration type="Collection<SummaryStatistics>" name="aggregate" />
      <scope startLine="184" endLine="189">
        <scope startLine="185" endLine="187" />
      </scope>
      <declaration type="StatisticalSummaryValues" name="aggregatedStats" />
      <comment>Compute combined stats directly</comment>
      <comment>Now compute subsample stats individually and aggregate</comment>
      <comment>Compare values</comment>
    </method>
    <method type="void" name="testAggregateSpecialValues" startLine="197" endLine="224">
      <declaration type="double[]" name="totalSample" />
      <declaration type="double[][]" name="subSamples" />
      <declaration type="SummaryStatistics" name="totalStats" />
      <scope startLine="203" endLine="205" />
      <declaration type="SummaryStatistics[]" name="subSampleStats" />
      <scope startLine="209" endLine="211" />
      <declaration type="Collection<SummaryStatistics>" name="aggregate" />
      <scope startLine="213" endLine="218">
        <scope startLine="214" endLine="216" />
      </scope>
      <declaration type="StatisticalSummaryValues" name="aggregatedStats" />
      <comment>Compute combined stats directly</comment>
      <comment>Now compute subsample stats individually and aggregate</comment>
      <comment>Compare values</comment>
    </method>
    <javadoc>
      <text>* Verifies that a StatisticalSummary and a StatisticalSummaryValues are equal up
 * to delta, with NaNs, infinities returned in the same spots. For max, min, n, values
 * have to agree exactly, delta is used only for sum, mean, variance, std dev.</text>
    </javadoc>
    <method type="void" name="assertEquals" startLine="231" endLine="239" />
    <javadoc>
      <text>* Generates a random sample of double values.
 * Sample size is random, between 10 and 100 and values are
 * uniformly distributed over [-100, 100].</text>
      <return>array of random double values</return>
    </javadoc>
    <method type="double[]" name="generateSample" startLine="249" endLine="255">
      <declaration type="IntegerDistribution" name="size" />
      <declaration type="RealDistribution" name="randomData" />
      <declaration type="int" name="sampleSize" />
      <declaration type="double[]" name="out" />
    </method>
    <javadoc>
      <text>* Generates a partition of <sample> into up to 5 sequentially selected
 * subsamples with randomly selected partition points.</text>
      <param>sample array to partition</param>
      <return>rectangular array with rows = subsamples</return>
    </javadoc>
    <method type="double[][]" name="generatePartition" startLine="264" endLine="298">
      <declaration type="int" name="length" />
      <declaration type="double[][][]" name="out" />
      <declaration type="int" name="cur" />
      <declaration type="int" name="offset" />
      <declaration type="int" name="sampleCount" />
      <scope startLine="270" endLine="286">
        <scope startLine="271" endLine="273" />
        <declaration type="int" name="next" />
        <scope startLine="275" endLine="277" />
        <scope startLine="277" endLine="279" />
        <declaration type="int" name="subLength" />
      </scope>
      <scope startLine="287" endLine="295">
        <declaration type="double[][][]" name="out2" />
        <scope startLine="289" endLine="293">
          <declaration type="int" name="curSize" />
        </scope>
      </scope>
      <scope startLine="295" endLine="297" />
      <comment>beginning of current partition segment</comment>
      <comment>end of current partition segment</comment>
      <comment>number of segments defined</comment>
    </method>
  </class>
</source>
