<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.univariate">
  <import name="org.apache.commons.math3.analysis.QuinticFunction" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.function.Sin" />
  <import name="org.apache.commons.math3.analysis.function.StepFunction" />
  <import name="org.apache.commons.math3.analysis.FunctionUtils" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.optim.ConvergenceChecker" />
  <import name="org.apache.commons.math3.optim.nonlinear.scalar.GoalType" />
  <import name="org.apache.commons.math3.optim.MaxEval" />
  <import name="org.apache.commons.math3.stat.descriptive.DescriptiveStatistics" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="BrentOptimizerTest" startLine="36">
    <javadoc>
      <version>$Id$</version>
    </javadoc>
    <method type="void" name="testSinMin" startLine="42" endLine="66">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="UnivariateOptimizer" name="optimizer" />
      <scope startLine="57" endLine="63" />
      <scope startLine="63" endLine="65">
        <comment>expected</comment>
      </scope>
    </method>
    <method type="void" name="testSinMinWithValueChecker" startLine="69" endLine="81">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="ConvergenceChecker<UnivariatePointValuePair>" name="checker" />
      <declaration type="UnivariateOptimizer" name="optimizer" />
      <declaration type="UnivariatePointValuePair" name="result" />
      <comment>The default stopping criterion of Brent's algorithm should not</comment>
      <comment>pass, but the search will stop at the given relative tolerance</comment>
      <comment>for the function value.</comment>
    </method>
    <method type="void" name="testBoundaries" startLine="84" endLine="111">
      <declaration type="double" name="lower" />
      <declaration type="double" name="upper" />
      <declaration type="UnivariateFunction" name="f" />
      <method type="double" name="value" startLine="88" endLine="96">
        <scope startLine="89" endLine="91" />
        <scope startLine="91" endLine="93" />
        <scope startLine="93" endLine="95" />
      </method>
      <declaration type="UnivariateOptimizer" name="optimizer" />
    </method>
    <method type="void" name="testQuinticMin" startLine="114" endLine="134">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="UnivariateOptimizer" name="optimizer" />
      <comment>The function has local minima at -0.27195613 and 0.82221643.</comment>
      <comment>search in a large interval</comment>
    </method>
    <method type="void" name="testQuinticMinStatistics" startLine="137" endLine="165">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="UnivariateOptimizer" name="optimizer" />
      <declaration type="DescriptiveStatistics[]" name="stat" />
      <scope startLine="143" endLine="145" />
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
      <declaration type="int" name="nSamples" />
      <declaration type="double" name="delta" />
      <scope startLine="151" endLine="158">
        <declaration type="double" name="start" />
      </scope>
      <declaration type="double" name="meanOptValue" />
      <declaration type="double" name="medianEval" />
      <comment>The function has local minima at -0.27195613 and 0.82221643.</comment>
    </method>
    <method type="void" name="testQuinticMax" startLine="168" endLine="186">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="UnivariateOptimizer" name="optimizer" />
      <scope startLine="177" endLine="183" />
      <scope startLine="183" endLine="185">
        <comment>expected</comment>
      </scope>
      <comment>The quintic function has zeros at 0, +-0.5 and +-1.</comment>
      <comment>The function has a local maximum at 0.27195613.</comment>
    </method>
    <method type="void" name="testMinEndpoints" startLine="189" endLine="205">
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="UnivariateOptimizer" name="optimizer" />
      <declaration type="double" name="result" />
      <comment>endpoint is minimum</comment>
    </method>
    <method type="void" name="testMath832" startLine="208" endLine="228">
      <declaration type="UnivariateFunction" name="f" />
      <method type="double" name="value" startLine="210" endLine="217">
        <declaration type="double" name="sqrtX" />
        <declaration type="double" name="a" />
        <declaration type="double" name="b" />
        <declaration type="double" name="c" />
      </method>
      <declaration type="UnivariateOptimizer" name="optimizer" />
      <declaration type="double" name="result" />
    </method>
    <javadoc>
      <text>* Contrived example showing that prior to the resolution of MATH-855
 * (second revision), the algorithm would not return the best point if
 * it happened to be the initial guess.</text>
    </javadoc>
    <method type="void" name="testKeepInitIfBest" startLine="236" endLine="267">
      <declaration type="double" name="minSin" />
      <declaration type="double" name="offset" />
      <declaration type="double" name="delta" />
      <declaration type="UnivariateFunction" name="f1" />
      <declaration type="UnivariateFunction[]" name="f2" />
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="double" name="relTol" />
      <declaration type="UnivariateOptimizer" name="optimizer" />
      <declaration type="double" name="init" />
      <declaration type="UnivariatePointValuePair" name="result" />
      <declaration type="int" name="numEval" />
      <declaration type="double" name="sol" />
      <declaration type="double" name="expected" />
      <comment>A slightly less stringent tolerance would make the test pass</comment>
      <comment>even with the previous implementation.</comment>
      <comment>System.out.println("numEval=" + numEval);</comment>
      <comment>System.out.println("min=" + init + " f=" + f.value(init));</comment>
      <comment>System.out.println("sol=" + sol + " f=" + f.value(sol));</comment>
      <comment>System.out.println("exp=" + expected + " f=" + f.value(expected));</comment>
    </method>
    <javadoc>
      <text>* Contrived example showing that prior to the resolution of MATH-855,
 * the algorithm, by always returning the last evaluated point, would
 * sometimes not report the best point it had found.</text>
    </javadoc>
    <method type="void" name="testMath855" startLine="275" endLine="300">
      <declaration type="double" name="minSin" />
      <declaration type="double" name="offset" />
      <declaration type="double" name="delta" />
      <declaration type="UnivariateFunction" name="f1" />
      <declaration type="UnivariateFunction[]" name="f2" />
      <declaration type="UnivariateFunction" name="f" />
      <declaration type="UnivariateOptimizer" name="optimizer" />
      <declaration type="UnivariatePointValuePair" name="result" />
      <declaration type="int" name="numEval" />
      <declaration type="double" name="sol" />
      <declaration type="double" name="expected" />
      <comment>System.out.println("min=" + (minSin + offset) + " f=" + f.value(minSin + offset));</comment>
      <comment>System.out.println("sol=" + sol + " f=" + f.value(sol));</comment>
      <comment>System.out.println("exp=" + expected + " f=" + f.value(expected));</comment>
    </method>
  </class>
</source>
