<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="java.io.Serializable" />
  <import name="java.lang.reflect.Array" />
  <import name="org.apache.commons.math3.Field" />
  <import name="org.apache.commons.math3.FieldElement" />
  <import name="org.apache.commons.math3.TestUtils" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.fraction.Fraction" />
  <import name="org.apache.commons.math3.fraction.FractionField" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="ArrayFieldVectorTest" startLine="32">
    <javadoc>
      <text>* Test cases for the {@link ArrayFieldVector} class.</text>
      <version>$Id: ArrayFieldVectorTest.java 1296542 2012-03-03 00:55:17Z sebb $</version>
    </javadoc>
    <declaration type="Fraction[][]" name="ma1" />
    <declaration type="Fraction[]" name="vec1" />
    <declaration type="Fraction[]" name="vec2" />
    <declaration type="Fraction[]" name="vec3" />
    <declaration type="Fraction[]" name="vec4" />
    <declaration type="Fraction[]" name="vec_null" />
    <declaration type="Fraction[]" name="dvec1" />
    <declaration type="Fraction[][]" name="mat1" />
    <class name="FieldVectorTestImpl" startLine="63">
      <implements name="FieldVector<T>" />
      <implements name="Serializable" />
      <declaration type="long" name="serialVersionUID" />
      <declaration type="Field<T>" name="field" />
      <javadoc>
        <text>* Entries of the vector.</text>
      </javadoc>
      <declaration type="T[]" name="data" />
      <javadoc>
        <text>* Build an array of elements.</text>
        <param>length size of the array to build</param>
        <return>a new array</return>
      </javadoc>
      <method type="T[]" name="buildArray" startLine="78" endLine="80" />
      <method type="constructor" name="FieldVectorTestImpl" startLine="82" endLine="85" />
      <method type="Field<T>" name="getField" startLine="87" endLine="89" />
      <method type="UnsupportedOperationException" name="unsupported" startLine="91" endLine="93" />
      <method type="FieldVector<T>" name="copy" startLine="95" endLine="97" />
      <method type="FieldVector<T>" name="add" startLine="99" endLine="101" />
      <method type="FieldVector<T>" name="add" startLine="103" endLine="105" />
      <method type="FieldVector<T>" name="subtract" startLine="107" endLine="109" />
      <method type="FieldVector<T>" name="subtract" startLine="111" endLine="113" />
      <method type="FieldVector<T>" name="mapAdd" startLine="115" endLine="117" />
      <method type="FieldVector<T>" name="mapAddToSelf" startLine="119" endLine="121" />
      <method type="FieldVector<T>" name="mapSubtract" startLine="123" endLine="125" />
      <method type="FieldVector<T>" name="mapSubtractToSelf" startLine="127" endLine="129" />
      <method type="FieldVector<T>" name="mapMultiply" startLine="131" endLine="137">
        <declaration type="T[]" name="out" />
        <scope startLine="133" endLine="135" />
      </method>
      <method type="FieldVector<T>" name="mapMultiplyToSelf" startLine="139" endLine="141" />
      <method type="FieldVector<T>" name="mapDivide" startLine="143" endLine="145" />
      <method type="FieldVector<T>" name="mapDivideToSelf" startLine="147" endLine="149" />
      <method type="FieldVector<T>" name="mapInv" startLine="151" endLine="153" />
      <method type="FieldVector<T>" name="mapInvToSelf" startLine="155" endLine="157" />
      <method type="FieldVector<T>" name="ebeMultiply" startLine="159" endLine="161" />
      <method type="FieldVector<T>" name="ebeMultiply" startLine="163" endLine="165" />
      <method type="FieldVector<T>" name="ebeDivide" startLine="167" endLine="169" />
      <method type="FieldVector<T>" name="ebeDivide" startLine="171" endLine="173" />
      <method type="T[]" name="getData" startLine="175" endLine="177" />
      <method type="T" name="dotProduct" startLine="179" endLine="185">
        <declaration type="T" name="dot" />
        <scope startLine="181" endLine="183" />
      </method>
      <method type="T" name="dotProduct" startLine="187" endLine="193">
        <declaration type="T" name="dot" />
        <scope startLine="189" endLine="191" />
      </method>
      <method type="FieldVector<T>" name="projection" startLine="195" endLine="197" />
      <method type="FieldVector<T>" name="projection" startLine="199" endLine="201" />
      <method type="FieldMatrix<T>" name="outerProduct" startLine="203" endLine="205" />
      <method type="FieldMatrix<T>" name="outerProduct" startLine="207" endLine="209" />
      <method type="T" name="getEntry" startLine="211" endLine="213" />
      <method type="int" name="getDimension" startLine="215" endLine="217" />
      <method type="FieldVector<T>" name="append" startLine="219" endLine="221" />
      <method type="FieldVector<T>" name="append" startLine="223" endLine="225" />
      <method type="FieldVector<T>" name="append" startLine="227" endLine="229" />
      <method type="FieldVector<T>" name="getSubVector" startLine="231" endLine="233" />
      <method type="void" name="setEntry" startLine="235" endLine="237" />
      <method type="void" name="setSubVector" startLine="239" endLine="241" />
      <method type="void" name="setSubVector" startLine="243" endLine="245" />
      <method type="void" name="set" startLine="247" endLine="249" />
      <method type="T[]" name="toArray" startLine="251" endLine="253" />
      <method type="void" name="testConstructors" startLine="258" endLine="327">
        <declaration type="ArrayFieldVector<Fraction>" name="v0" />
        <declaration type="ArrayFieldVector<Fraction>" name="v1" />
        <declaration type="ArrayFieldVector<Fraction>" name="v2" />
        <declaration type="ArrayFieldVector<Fraction>" name="v3" />
        <declaration type="ArrayFieldVector<Fraction>" name="v4" />
        <scope startLine="278" endLine="281" />
        <scope startLine="281" endLine="283">
          <comment>expected behavior</comment>
        </scope>
        <declaration type="FieldVector<Fraction>" name="v5_i" />
        <declaration type="ArrayFieldVector<Fraction>" name="v5" />
        <declaration type="ArrayFieldVector<Fraction>" name="v6" />
        <scope startLine="296" endLine="299" />
        <scope startLine="299" endLine="301">
          <comment>expected behavior</comment>
        </scope>
        <declaration type="ArrayFieldVector<Fraction>" name="v7" />
        <declaration type="FieldVectorTestImpl<Fraction>" name="v7_i" />
        <declaration type="ArrayFieldVector<Fraction>" name="v7_2" />
        <declaration type="ArrayFieldVector<Fraction>" name="v8" />
        <declaration type="ArrayFieldVector<Fraction>" name="v8_2" />
        <declaration type="ArrayFieldVector<Fraction>" name="v9" />
      </method>
      <method type="void" name="testDataInOut" startLine="330" endLine="423">
        <declaration type="ArrayFieldVector<Fraction>" name="v1" />
        <declaration type="ArrayFieldVector<Fraction>" name="v2" />
        <declaration type="ArrayFieldVector<Fraction>" name="v4" />
        <declaration type="FieldVectorTestImpl<Fraction>" name="v2_t" />
        <declaration type="FieldVector<Fraction>" name="v_append_1" />
        <declaration type="FieldVector<Fraction>" name="v_append_2" />
        <declaration type="FieldVector<Fraction>" name="v_append_4" />
        <declaration type="FieldVector<Fraction>" name="v_copy" />
        <declaration type="Fraction[]" name="a_frac" />
        <declaration type="FieldVector<Fraction>" name="vout5" />
        <scope startLine="366" endLine="369" />
        <scope startLine="369" endLine="371">
          <comment>expected behavior</comment>
        </scope>
        <declaration type="ArrayFieldVector<Fraction>" name="v_set1" />
        <scope startLine="376" endLine="379" />
        <scope startLine="379" endLine="381">
          <comment>expected behavior</comment>
        </scope>
        <declaration type="ArrayFieldVector<Fraction>" name="v_set2" />
        <scope startLine="387" endLine="390" />
        <scope startLine="390" endLine="392">
          <comment>expected behavior</comment>
        </scope>
        <declaration type="ArrayFieldVector<Fraction>" name="v_set3" />
        <scope startLine="398" endLine="401" />
        <scope startLine="401" endLine="403">
          <comment>expected behavior</comment>
        </scope>
        <declaration type="ArrayFieldVector<Fraction>" name="v_set4" />
        <scope startLine="409" endLine="412" />
        <scope startLine="412" endLine="414">
          <comment>expected behavior</comment>
        </scope>
        <declaration type="ArrayFieldVector<Fraction>" name="vout10" />
        <declaration type="ArrayFieldVector<Fraction>" name="vout10_2" />
        <comment>ArrayFieldVector<Fraction> vout4 = (ArrayFieldVector<Fraction>) v1.clone();</comment>
        <comment>Assert.assertEquals(3, vout4.getDimension());</comment>
        <comment>Assert.assertEquals(v1.getDataRef(), vout4.getDataRef());</comment>
      </method>
      <method type="void" name="testMapFunctions" startLine="426" endLine="484">
        <declaration type="ArrayFieldVector<Fraction>" name="v1" />
        <declaration type="FieldVector<Fraction>" name="v_mapAdd" />
        <declaration type="Fraction[]" name="result_mapAdd" />
        <declaration type="FieldVector<Fraction>" name="v_mapAddToSelf" />
        <declaration type="Fraction[]" name="result_mapAddToSelf" />
        <declaration type="FieldVector<Fraction>" name="v_mapSubtract" />
        <declaration type="Fraction[]" name="result_mapSubtract" />
        <declaration type="FieldVector<Fraction>" name="v_mapSubtractToSelf" />
        <declaration type="Fraction[]" name="result_mapSubtractToSelf" />
        <declaration type="FieldVector<Fraction>" name="v_mapMultiply" />
        <declaration type="Fraction[]" name="result_mapMultiply" />
        <declaration type="FieldVector<Fraction>" name="v_mapMultiplyToSelf" />
        <declaration type="Fraction[]" name="result_mapMultiplyToSelf" />
        <declaration type="FieldVector<Fraction>" name="v_mapDivide" />
        <declaration type="Fraction[]" name="result_mapDivide" />
        <declaration type="FieldVector<Fraction>" name="v_mapDivideToSelf" />
        <declaration type="Fraction[]" name="result_mapDivideToSelf" />
        <declaration type="FieldVector<Fraction>" name="v_mapInv" />
        <declaration type="Fraction[]" name="result_mapInv" />
        <declaration type="FieldVector<Fraction>" name="v_mapInvToSelf" />
        <declaration type="Fraction[]" name="result_mapInvToSelf" />
        <comment>octave =  v1 .+ 2.0</comment>
        <comment>octave =  v1 .+ 2.0</comment>
        <comment>octave =  v1 .- 2.0</comment>
        <comment>octave =  v1 .- 2.0</comment>
        <comment>octave =  v1 .* 2.0</comment>
        <comment>octave =  v1 .* 2.0</comment>
        <comment>octave =  v1 ./ 2.0</comment>
        <comment>octave =  v1 ./ 2.0</comment>
        <comment>octave =  v1 .^-1</comment>
        <comment>octave =  v1 .^-1</comment>
      </method>
      <method type="void" name="testBasicFunctions" startLine="487" endLine="553">
        <declaration type="ArrayFieldVector<Fraction>" name="v1" />
        <declaration type="ArrayFieldVector<Fraction>" name="v2" />
        <declaration type="FieldVectorTestImpl<Fraction>" name="v2_t" />
        <declaration type="ArrayFieldVector<Fraction>" name="v_add" />
        <declaration type="Fraction[]" name="result_add" />
        <declaration type="FieldVectorTestImpl<Fraction>" name="vt2" />
        <declaration type="FieldVector<Fraction>" name="v_add_i" />
        <declaration type="Fraction[]" name="result_add_i" />
        <declaration type="ArrayFieldVector<Fraction>" name="v_subtract" />
        <declaration type="Fraction[]" name="result_subtract" />
        <declaration type="FieldVector<Fraction>" name="v_subtract_i" />
        <declaration type="Fraction[]" name="result_subtract_i" />
        <declaration type="ArrayFieldVector<Fraction>" name="v_ebeMultiply" />
        <declaration type="Fraction[]" name="result_ebeMultiply" />
        <declaration type="FieldVector<Fraction>" name="v_ebeMultiply_2" />
        <declaration type="Fraction[]" name="result_ebeMultiply_2" />
        <declaration type="ArrayFieldVector<Fraction>" name="v_ebeDivide" />
        <declaration type="Fraction[]" name="result_ebeDivide" />
        <declaration type="FieldVector<Fraction>" name="v_ebeDivide_2" />
        <declaration type="Fraction[]" name="result_ebeDivide_2" />
        <declaration type="Fraction" name="dot" />
        <declaration type="Fraction" name="dot_2" />
        <declaration type="FieldMatrix<Fraction>" name="m_outerProduct" />
        <declaration type="FieldMatrix<Fraction>" name="m_outerProduct_2" />
        <declaration type="ArrayFieldVector<Fraction>" name="v_projection" />
        <declaration type="Fraction[]" name="result_projection" />
        <declaration type="FieldVector<Fraction>" name="v_projection_2" />
        <declaration type="Fraction[]" name="result_projection_2" />
        <comment>octave =  v1 + v2</comment>
        <comment>octave =  v1 - v2</comment>
        <comment>octave v1 .* v2</comment>
        <comment>octave v1 ./ v2</comment>
        <comment>octave  dot(v1,v2)</comment>
        <comment>octave  dot(v1,v2_t)</comment>
      </method>
      <method type="void" name="testMisc" startLine="556" endLine="589">
        <declaration type="ArrayFieldVector<Fraction>" name="v1" />
        <declaration type="ArrayFieldVector<Fraction>" name="v4" />
        <declaration type="FieldVector<Fraction>" name="v4_2" />
        <declaration type="String" name="out1" />
        <scope startLine="568" endLine="571" />
        <scope startLine="571" endLine="573">
          <comment>expected behavior</comment>
        </scope>
        <scope startLine="575" endLine="578" />
        <scope startLine="578" endLine="580">
          <comment>expected behavior</comment>
        </scope>
        <scope startLine="582" endLine="585" />
        <scope startLine="585" endLine="587">
          <comment>expected behavior</comment>
        </scope>
        <comment>Fraction[] dout1 = v1.copyOut();
Assert.assertEquals(3, dout1.length);
assertNotSame("testData not same object ", v1.getDataRef(), dout1);</comment>
      </method>
      <method type="void" name="testSerial" startLine="592" endLine="595">
        <declaration type="ArrayFieldVector<Fraction>" name="v" />
      </method>
      <method type="void" name="testZeroVectors" startLine="598" endLine="625">
        <scope startLine="601" endLine="604" />
        <scope startLine="604" endLine="606">
          <comment>expected behavior</comment>
        </scope>
        <scope startLine="607" endLine="610" />
        <scope startLine="610" endLine="612">
          <comment>expected behavior</comment>
        </scope>
        <scope startLine="613" endLine="616" />
        <scope startLine="616" endLine="618">
          <comment>expected behavior</comment>
        </scope>
        <comment>when the field is not specified, array cannot be empty</comment>
        <comment>when the field is specified, array can be empty</comment>
      </method>
      <method type="void" name="testOuterProduct" startLine="628" endLine="648">
        <declaration type="ArrayFieldVector<Fraction>[]" name="u" />
        <declaration type="ArrayFieldVector<Fraction>[]" name="v" />
        <declaration type="FieldMatrix<Fraction>" name="uv" />
        <declaration type="double" name="tol" />
      </method>
      <javadoc>
        <text>* verifies that two vectors are equals</text>
      </javadoc>
      <method type="void" name="checkArray" startLine="651" endLine="658">
        <scope startLine="652" endLine="654" />
        <scope startLine="655" endLine="657" />
      </method>
    </class>
    <comment />
    <comment>Testclass to test the FieldVector<Fraction> interface</comment>
    <comment>only with enough content to support the test</comment>
    <comment>field is of type T</comment>
  </class>
</source>
