<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode.events">
  <import name="org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.exception.NoBracketingException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.ode.FirstOrderDifferentialEquations" />
  <import name="org.apache.commons.math3.ode.FirstOrderIntegrator" />
  <import name="org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937a" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="EventFilterTest" startLine="33">
    <method type="void" name="testHistoryIncreasingForward" startLine="36" endLine="50">
      <comment>start point: g > 0</comment>
      <comment>start point: g = 0</comment>
      <comment>start point: g < 0</comment>
    </method>
    <method type="void" name="testHistoryIncreasingBackward" startLine="53" endLine="67">
      <comment>start point: g > 0</comment>
      <comment>start point: g = 0</comment>
      <comment>start point: g < 0</comment>
    </method>
    <method type="void" name="testHistoryDecreasingForward" startLine="70" endLine="84">
      <comment>start point: g > 0</comment>
      <comment>start point: g = 0</comment>
      <comment>start point: g < 0</comment>
    </method>
    <method type="void" name="testHistoryDecreasingBackward" startLine="87" endLine="101">
      <comment>start point: g > 0</comment>
      <comment>start point: g = 0</comment>
      <comment>start point: g < 0</comment>
    </method>
    <method type="void" name="testHistory" startLine="103" endLine="130">
      <declaration type="Event" name="onlyIncreasing" />
      <declaration type="EventFilter" name="eventFilter" />
      <declaration type="double" name="h" />
      <declaration type="double" name="n" />
      <scope startLine="112" endLine="115">
        <declaration type="double" name="t" />
      </scope>
      <declaration type="RandomGenerator" name="rng" />
      <scope startLine="119" endLine="128">
        <declaration type="double" name="t" />
        <declaration type="double[]" name="g" />
        <declaration type="int" name="turn" />
        <scope startLine="123" endLine="125" />
        <scope startLine="125" endLine="127" />
      </scope>
      <comment>first pass to set up switches history for a long period</comment>
      <comment>verify old events are preserved, even if randomly accessed</comment>
    </method>
    <method type="void" name="testIncreasingOnly" startLine="135" endLine="157">
      <declaration type="double" name="e" />
      <declaration type="FirstOrderIntegrator" name="integrator" />
      <declaration type="Event" name="allEvents" />
      <declaration type="Event" name="onlyIncreasing" />
      <declaration type="double" name="t0" />
      <declaration type="double" name="tEnd" />
      <declaration type="double[]" name="y" />
    </method>
    <method type="void" name="testDecreasingOnly" startLine="162" endLine="184">
      <declaration type="double" name="e" />
      <declaration type="FirstOrderIntegrator" name="integrator" />
      <declaration type="Event" name="allEvents" />
      <declaration type="Event" name="onlyDecreasing" />
      <declaration type="double" name="t0" />
      <declaration type="double" name="tEnd" />
      <declaration type="double[]" name="y" />
    </method>
    <method type="void" name="testTwoOppositeFilters" startLine="189" endLine="217">
      <declaration type="double" name="e" />
      <declaration type="FirstOrderIntegrator" name="integrator" />
      <declaration type="Event" name="allEvents" />
      <declaration type="Event" name="onlyIncreasing" />
      <declaration type="Event" name="onlyDecreasing" />
      <declaration type="double" name="t0" />
      <declaration type="double" name="tEnd" />
      <declaration type="double[]" name="y" />
    </method>
    <class name="SineCosine" startLine="219">
      <implements name="FirstOrderDifferentialEquations" />
      <method type="int" name="getDimension" startLine="220" endLine="222" />
      <method type="void" name="computeDerivatives" startLine="224" endLine="227" />
      <class name="Event" startLine="230">
        <implements name="EventHandler" />
        <javadoc>
          <text>* State events for this unit test.</text>
        </javadoc>
        <declaration type="boolean" name="expectDecreasing" />
        <declaration type="boolean" name="expectIncreasing" />
        <declaration type="int" name="eventCount" />
        <method type="constructor" name="Event" startLine="237" endLine="240" />
        <method type="int" name="getEventCount" startLine="242" endLine="244" />
        <method type="void" name="init" startLine="246" endLine="248" />
        <method type="double" name="g" startLine="250" endLine="252" />
        <method type="Action" name="eventOccurred" startLine="254" endLine="262">
          <scope startLine="255" endLine="257" />
          <scope startLine="257" endLine="259" />
        </method>
        <method type="void" name="resetState" startLine="264" endLine="266">
          <comment>in fact, we don't really reset anything for this test</comment>
        </method>
      </class>
    </class>
  </class>
</source>
