<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.genetics">
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="GeneticAlgorithmTestPermutations" startLine="27">
    <javadoc>
      <text>* This is also an example of usage.
 * This algorithm does "stochastic sorting" of a sequence 0,...,N.</text>
    </javadoc>
    <declaration type="int" name="DIMENSION" />
    <declaration type="int" name="POPULATION_SIZE" />
    <declaration type="int" name="NUM_GENERATIONS" />
    <declaration type="double" name="ELITISM_RATE" />
    <declaration type="double" name="CROSSOVER_RATE" />
    <declaration type="double" name="MUTATION_RATE" />
    <declaration type="int" name="TOURNAMENT_ARITY" />
    <declaration type="List<Integer>" name="sequence" />
    <scope startLine="46" endLine="50">
      <scope startLine="47" endLine="49" />
    </scope>
    <method type="void" name="test" startLine="53" endLine="86">
      <declaration type="GeneticAlgorithm" name="ga" />
      <declaration type="Population" name="initial" />
      <declaration type="StoppingCondition" name="stopCond" />
      <declaration type="Chromosome" name="bestInitial" />
      <declaration type="Population" name="finalPopulation" />
      <declaration type="Chromosome" name="bestFinal" />
      <comment>to test a stochastic algorithm is hard, so this will rather be an usage example</comment>
      <comment>initialize a new genetic algorithm</comment>
      <comment>initial population</comment>
      <comment>stopping conditions</comment>
      <comment>best initial chromosome</comment>
      <comment>run the algorithm</comment>
      <comment>best chromosome from the final population</comment>
      <comment>the only thing we can test is whether the final solution is not worse than the initial one</comment>
      <comment>however, for some implementations of GA, this need not be true :)</comment>
      <comment>System.out.println(bestInitial);</comment>
      <comment>System.out.println(bestFinal);</comment>
    </method>
    <javadoc>
      <text>* Initializes a random population</text>
    </javadoc>
    <method type="ElitisticListPopulation" name="randomPopulation" startLine="92" endLine="99">
      <declaration type="List<Chromosome>" name="popList" />
      <scope startLine="94" endLine="97">
        <declaration type="Chromosome" name="randChrom" />
      </scope>
    </method>
    <class name="MinPermutations" extends="RandomKey<Integer>" startLine="101">
      <javadoc>
        <text>* Chromosomes representing a permutation of (0,1,2,...,DIMENSION-1).
 * The goal is to sort the sequence.</text>
      </javadoc>
      <method type="constructor" name="MinPermutations" startLine="108" endLine="110" />
      <method type="double" name="fitness" startLine="112" endLine="125">
        <declaration type="int" name="res" />
        <declaration type="List<Integer>" name="decoded" />
        <scope startLine="115" endLine="121">
          <declaration type="int" name="value" />
          <scope startLine="117" endLine="120" />
          <comment>bad position found</comment>
        </scope>
        <comment>the most fitted chromosome is the one with minimal error</comment>
        <comment>therefore we must return negative value</comment>
      </method>
      <method type="AbstractListChromosome<Double>" name="newFixedLengthChromosome" startLine="128" endLine="130" />
    </class>
    <comment>parameters for the GA</comment>
    <comment>numbers from 0 to N-1</comment>
  </class>
</source>
