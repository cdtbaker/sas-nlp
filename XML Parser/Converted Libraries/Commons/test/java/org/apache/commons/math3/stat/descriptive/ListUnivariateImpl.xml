<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive">
  <import name="java.io.Serializable" />
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.stat.descriptive.UnivariateStatistic" />
  <import name="org.apache.commons.math3.stat.descriptive.DescriptiveStatistics" />
  <import name="org.apache.commons.math3.util.DefaultTransformer" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.NumberTransformer" />
  <class name="ListUnivariateImpl" extends="DescriptiveStatistics" startLine="30">
    <implements name="Serializable" />
    <javadoc>
      <version>$Id: ListUnivariateImpl.java 1334421 2012-05-05 13:41:04Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Holds a reference to a list - GENERICs are going to make
 * our lives easier here as we could only accept List<Number></text>
    </javadoc>
    <declaration type="List<Object>" name="list" />
    <javadoc>
      <text>* Number Transformer maps Objects to Number for us.</text>
    </javadoc>
    <declaration type="NumberTransformer" name="transformer" />
    <javadoc>
      <text>* No argument Constructor</text>
    </javadoc>
    <method type="constructor" name="ListUnivariateImpl" startLine="50" endLine="52" />
    <javadoc>
      <text>* Construct a ListUnivariate with a specific List.</text>
      <param>list The list that will back this DescriptiveStatistics</param>
    </javadoc>
    <method type="constructor" name="ListUnivariateImpl" startLine="58" endLine="60" />
    <javadoc>
      <text>* Construct a ListUnivariate with a specific List.</text>
      <param>list The list that will back this DescriptiveStatistics</param>
      <param>transformer the number transformer used to convert the list items.</param>
    </javadoc>
    <method type="constructor" name="ListUnivariateImpl" startLine="67" endLine="71" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double[]" name="getValues" startLine="75" endLine="96">
      <declaration type="int" name="length" />
      <declaration type="int" name="wSize" />
      <scope startLine="85" endLine="87" />
      <declaration type="double[]" name="copiedArray" />
      <scope startLine="92" endLine="94" />
      <comment>If the window size is not INFINITE_WINDOW AND</comment>
      <comment>the current list is larger that the window size, we need to</comment>
      <comment>take into account only the last n elements of the list</comment>
      <comment>as definied by windowSize</comment>
      <comment>Create an array to hold all values</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getElement" startLine="100" endLine="119">
      <declaration type="double" name="value" />
      <declaration type="int" name="calcIndex" />
      <declaration type="int" name="wSize" />
      <scope startLine="107" endLine="109" />
      <scope startLine="112" endLine="114" />
      <scope startLine="114" endLine="116" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="long" name="getN" startLine="123" endLine="137">
      <declaration type="int" name="n" />
      <declaration type="int" name="wSize" />
      <scope startLine="127" endLine="133">
        <scope startLine="128" endLine="130" />
        <scope startLine="130" endLine="132" />
      </scope>
      <scope startLine="133" endLine="135" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="addValue" startLine="141" endLine="143" />
    <javadoc>
      <text>* Adds an object to this list.</text>
      <param>o Object to add to the list</param>
    </javadoc>
    <method type="void" name="addObject" startLine="149" endLine="151" />
    <javadoc>
      <text>* Clears all statistics.
 * <p>
 * <strong>N.B.: </strong> This method has the side effect of clearing the underlying list.</text>
    </javadoc>
    <method type="void" name="clear" startLine="159" endLine="161" />
    <javadoc>
      <text>* Apply the given statistic to this univariate collection.</text>
      <param>stat the statistic to apply</param>
      <return>the computed value of the statistic.</return>
    </javadoc>
    <method type="double" name="apply" startLine="169" endLine="176">
      <declaration type="double[]" name="v" />
      <scope startLine="172" endLine="174" />
    </method>
    <javadoc>
      <text>* Access the number transformer.</text>
      <return>the number transformer.</return>
    </javadoc>
    <method type="NumberTransformer" name="getTransformer" startLine="182" endLine="184" />
    <javadoc>
      <text>* Modify the number transformer.</text>
      <param>transformer the new number transformer.</param>
    </javadoc>
    <method type="void" name="setTransformer" startLine="190" endLine="192" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setWindowSize" startLine="196" endLine="204">
      <declaration type="int" name="extra" />
      <scope startLine="201" endLine="203" />
      <comment>Discard elements from the front of the list if the windowSize is less than</comment>
      <comment>the size of the list.</comment>
    </method>
  </class>
</source>
