<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.geometry.euclidean.threed">
  <import name="java.text.DecimalFormat" />
  <import name="java.text.DecimalFormatSymbols" />
  <import name="java.text.NumberFormat" />
  <import name="java.util.Locale" />
  <import name="org.apache.commons.math3.analysis.differentiation.DerivativeStructure" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.random.Well1024a" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.Precision" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="FieldVector3DTest" startLine="34">
    <method type="void" name="testConstructors" startLine="37" endLine="126">
      <declaration type="double" name="cosAlpha" />
      <declaration type="double" name="sinAlpha" />
      <declaration type="double" name="cosDelta" />
      <declaration type="double" name="sinDelta" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="u" />
    </method>
    <method type="void" name="testEquals" startLine="129" endLine="148">
      <declaration type="FieldVector3D<DerivativeStructure>" name="u1" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="v" />
    </method>
    <method type="void" name="testHash" startLine="151" endLine="156">
      <declaration type="FieldVector3D<DerivativeStructure>" name="u" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="v" />
    </method>
    <method type="void" name="testInfinite" startLine="159" endLine="165" />
    <method type="void" name="testNaN" startLine="168" endLine="174" />
    <method type="void" name="testToString" startLine="177" endLine="181">
      <declaration type="NumberFormat" name="format" />
    </method>
    <method type="void" name="testWrongDimension" startLine="184" endLine="189" />
    <method type="void" name="testCoordinates" startLine="192" endLine="201">
      <declaration type="FieldVector3D<DerivativeStructure>" name="v" />
      <declaration type="DerivativeStructure[]" name="coordinates" />
    </method>
    <method type="void" name="testNorm1" startLine="204" endLine="210" />
    <method type="void" name="testNorm" startLine="213" endLine="220">
      <declaration type="double" name="r" />
    </method>
    <method type="void" name="testNormSq" startLine="223" endLine="229" />
    <method type="void" name="testNormInf" startLine="232" endLine="258" />
    <method type="void" name="testDistance1" startLine="261" endLine="280">
      <declaration type="FieldVector3D<DerivativeStructure>" name="v1" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="v2" />
      <declaration type="DerivativeStructure" name="distance" />
    </method>
    <method type="void" name="testDistance" startLine="283" endLine="302">
      <declaration type="FieldVector3D<DerivativeStructure>" name="v1" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="v2" />
      <declaration type="DerivativeStructure" name="distance" />
    </method>
    <method type="void" name="testDistanceSq" startLine="305" endLine="324">
      <declaration type="FieldVector3D<DerivativeStructure>" name="v1" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="v2" />
      <declaration type="DerivativeStructure" name="distanceSq" />
    </method>
    <method type="void" name="testDistanceInf" startLine="327" endLine="386">
      <declaration type="FieldVector3D<DerivativeStructure>" name="v1" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="v2" />
      <declaration type="DerivativeStructure" name="distance" />
    </method>
    <method type="void" name="testSubtract" startLine="389" endLine="409">
      <declaration type="FieldVector3D<DerivativeStructure>" name="v1" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="v2" />
    </method>
    <method type="void" name="testAdd" startLine="412" endLine="432">
      <declaration type="FieldVector3D<DerivativeStructure>" name="v1" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="v2" />
    </method>
    <method type="void" name="testScalarProduct" startLine="435" endLine="441">
      <declaration type="FieldVector3D<DerivativeStructure>" name="v" />
    </method>
    <method type="void" name="testVectorialProducts" startLine="444" endLine="467">
      <declaration type="FieldVector3D<DerivativeStructure>" name="v1" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="v2" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="v3" />
    </method>
    <method type="void" name="testCrossProductCancellation" startLine="470" endLine="480">
      <declaration type="FieldVector3D<DerivativeStructure>" name="v1" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="v2" />
      <declaration type="double" name="scale" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="big1" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="small2" />
    </method>
    <method type="void" name="testAngular" startLine="483" endLine="493">
      <declaration type="FieldVector3D<DerivativeStructure>" name="u" />
    </method>
    <method type="void" name="testAngularSeparation" startLine="496" endLine="516">
      <declaration type="FieldVector3D<DerivativeStructure>" name="v1" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="k" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="i" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="v2" />
      <scope startLine="507" endLine="510" />
      <scope startLine="510" endLine="512">
        <comment>expected</comment>
      </scope>
    </method>
    <method type="void" name="testNormalize" startLine="519" endLine="527">
      <scope startLine="521" endLine="524" />
      <scope startLine="524" endLine="526">
        <comment>expected behavior</comment>
      </scope>
    </method>
    <method type="void" name="testNegate" startLine="530" endLine="533" />
    <method type="void" name="testOrthogonal" startLine="536" endLine="551">
      <declaration type="FieldVector3D<DerivativeStructure>" name="v1" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="v2" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="v3" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="v4" />
      <scope startLine="545" endLine="548" />
      <scope startLine="548" endLine="550">
        <comment>expected behavior</comment>
      </scope>
    </method>
    <method type="void" name="testAngle" startLine="554" endLine="570">
      <scope startLine="564" endLine="567" />
      <scope startLine="567" endLine="569">
        <comment>expected behavior</comment>
      </scope>
    </method>
    <method type="void" name="testAccurateDotProduct" startLine="573" endLine="587">
      <declaration type="FieldVector3D<DerivativeStructure>" name="u1" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="u2" />
      <declaration type="DerivativeStructure" name="sNaive" />
      <declaration type="DerivativeStructure" name="sAccurate" />
      <comment>the following two vectors are nearly but not exactly orthogonal</comment>
      <comment>naive dot product (i.e. computing u1.x * u2.x + u1.y * u2.y + u1.z * u2.z</comment>
      <comment>leads to a result of 0.0, instead of the correct -1.855129...</comment>
    </method>
    <method type="void" name="testDotProduct" startLine="590" endLine="620">
      <declaration type="Well1024a" name="random" />
      <scope startLine="594" endLine="619">
        <declaration type="double" name="ux" />
        <declaration type="double" name="uy" />
        <declaration type="double" name="uz" />
        <declaration type="double" name="vx" />
        <declaration type="double" name="vy" />
        <declaration type="double" name="vz" />
        <declaration type="double" name="sNaive" />
        <declaration type="FieldVector3D<DerivativeStructure>" name="uds" />
        <declaration type="FieldVector3D<DerivativeStructure>" name="vds" />
        <declaration type="Vector3D" name="v" />
        <declaration type="DerivativeStructure" name="sAccurate" />
      </scope>
      <comment>we compare accurate versus naive dot product implementations</comment>
      <comment>on regular vectors (i.e. not extreme cases like in the previous test)</comment>
    </method>
    <method type="void" name="testAccurateCrossProduct" startLine="623" endLine="644">
      <declaration type="FieldVector3D<DerivativeStructure>" name="u1" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="u2" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="u3" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="cNaive" />
      <declaration type="FieldVector3D<DerivativeStructure>" name="cAccurate" />
      <comment>the vectors u1 and u2 are nearly but not exactly anti-parallel</comment>
      <comment>(7.31e-16 degrees from 180 degrees) naive cross product (i.e.</comment>
      <comment>computing u1.x * u2.x + u1.y * u2.y + u1.z * u2.z</comment>
      <comment>leads to a result of   [0.0009765, -0.0001220, -0.0039062],</comment>
      <comment>instead of the correct [0.0006913, -0.0001254, -0.0007909]</comment>
    </method>
    <method type="void" name="testCrossProduct" startLine="647" endLine="677">
      <declaration type="Well1024a" name="random" />
      <scope startLine="651" endLine="676">
        <declaration type="double" name="ux" />
        <declaration type="double" name="uy" />
        <declaration type="double" name="uz" />
        <declaration type="double" name="vx" />
        <declaration type="double" name="vy" />
        <declaration type="double" name="vz" />
        <declaration type="Vector3D" name="cNaive" />
        <declaration type="FieldVector3D<DerivativeStructure>" name="uds" />
        <declaration type="FieldVector3D<DerivativeStructure>" name="vds" />
        <declaration type="Vector3D" name="v" />
      </scope>
      <comment>we compare accurate versus naive cross product implementations</comment>
      <comment>on regular vectors (i.e. not extreme cases like in the previous test)</comment>
    </method>
    <method type="FieldVector3D<DerivativeStructure>" name="createVector" startLine="679" endLine="683" />
    <method type="void" name="checkVector" startLine="685" endLine="689" />
    <method type="void" name="checkVector" startLine="694" endLine="707" />
    <method type="void" name="checkVector" startLine="712" endLine="728" />
  </class>
</source>
