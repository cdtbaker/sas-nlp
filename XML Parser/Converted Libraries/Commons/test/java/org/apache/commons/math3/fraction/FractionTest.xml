<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.fraction">
  <import name="org.apache.commons.math3.exception.ConvergenceException" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.TestUtils" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="FractionTest" startLine="28">
    <javadoc>
      <version>$Id: FractionTest.java 1368253 2012-08-01 21:24:27Z tn $</version>
    </javadoc>
    <method type="void" name="assertFraction" startLine="33" endLine="36" />
    <method type="void" name="testConstructor" startLine="39" endLine="67">
      <scope startLine="51" endLine="54" />
      <scope startLine="54" endLine="56">
        <comment>success</comment>
      </scope>
      <scope startLine="57" endLine="60" />
      <scope startLine="60" endLine="62">
        <comment>success</comment>
      </scope>
      <comment>overflow</comment>
    </method>
    <method type="void" name="testGoldenRatio" startLine="70" endLine="73">
      <comment>the golden ratio is notoriously a difficult number for continuous fraction</comment>
    </method>
    <method type="void" name="testDoubleConstructor" startLine="77" endLine="119" />
    <method type="void" name="testDigitLimitConstructor" startLine="123" endLine="132" />
    <method type="void" name="testIntegerOverflow" startLine="135" endLine="140" />
    <method type="void" name="checkIntegerOverflow" startLine="142" endLine="149">
      <scope startLine="143" endLine="146" />
      <scope startLine="146" endLine="148">
        <comment>expected behavior</comment>
      </scope>
    </method>
    <method type="void" name="testEpsilonLimitConstructor" startLine="152" endLine="161" />
    <method type="void" name="testCompareTo" startLine="164" endLine="182">
      <declaration type="Fraction" name="first" />
      <declaration type="Fraction" name="second" />
      <declaration type="Fraction" name="third" />
      <declaration type="Fraction" name="pi1" />
      <declaration type="Fraction" name="pi2" />
      <comment>these two values are different approximations of PI</comment>
      <comment>the first  one is approximately PI - 3.07e-18</comment>
      <comment>the second one is approximately PI + 1.936e-17</comment>
    </method>
    <method type="void" name="testDoubleValue" startLine="185" endLine="191">
      <declaration type="Fraction" name="first" />
      <declaration type="Fraction" name="second" />
    </method>
    <method type="void" name="testFloatValue" startLine="194" endLine="200">
      <declaration type="Fraction" name="first" />
      <declaration type="Fraction" name="second" />
    </method>
    <method type="void" name="testIntValue" startLine="203" endLine="209">
      <declaration type="Fraction" name="first" />
      <declaration type="Fraction" name="second" />
    </method>
    <method type="void" name="testLongValue" startLine="212" endLine="218">
      <declaration type="Fraction" name="first" />
      <declaration type="Fraction" name="second" />
    </method>
    <method type="void" name="testConstructorDouble" startLine="221" endLine="230" />
    <method type="void" name="testAbs" startLine="233" endLine="241">
      <declaration type="Fraction" name="a" />
      <declaration type="Fraction" name="b" />
      <declaration type="Fraction" name="c" />
    </method>
    <method type="void" name="testPercentage" startLine="244" endLine="246" />
    <method type="void" name="testMath835" startLine="249" endLine="257">
      <declaration type="int" name="numer" />
      <declaration type="int" name="denom" />
      <declaration type="double" name="percentage" />
      <declaration type="Fraction" name="frac" />
      <comment>With the implementation that preceded the fix suggested in MATH-835,</comment>
      <comment>this test was failing, due to overflow.</comment>
    </method>
    <method type="void" name="testReciprocal" startLine="260" endLine="289">
      <declaration type="Fraction" name="f" />
      <scope startLine="279" endLine="282" />
      <scope startLine="282" endLine="282" />
      <comment>large values</comment>
    </method>
    <method type="void" name="testNegate" startLine="292" endLine="316">
      <declaration type="Fraction" name="f" />
      <scope startLine="312" endLine="315" />
      <scope startLine="315" endLine="315" />
      <comment>large values</comment>
    </method>
    <method type="void" name="testAdd" startLine="319" endLine="399">
      <declaration type="Fraction" name="a" />
      <declaration type="Fraction" name="b" />
      <declaration type="Fraction" name="f1" />
      <declaration type="Fraction" name="f2" />
      <declaration type="Fraction" name="f" />
      <scope startLine="343" endLine="346" />
      <scope startLine="346" endLine="346" />
      <scope startLine="368" endLine="371">
        <comment>should overflow</comment>
      </scope>
      <scope startLine="371" endLine="371" />
      <scope startLine="376" endLine="379">
        <comment>should overflow</comment>
      </scope>
      <scope startLine="379" endLine="379" />
      <scope startLine="381" endLine="385" />
      <scope startLine="385" endLine="385" />
      <scope startLine="387" endLine="391" />
      <scope startLine="391" endLine="391" />
      <scope startLine="395" endLine="398">
        <comment>should overflow</comment>
      </scope>
      <scope startLine="398" endLine="398" />
      <comment>if this fraction is added naively, it will overflow.</comment>
      <comment>check that it doesn't.</comment>
      <comment>denominator should not be a multiple of 2 or 3 to trigger overflow</comment>
    </method>
    <method type="void" name="testDivide" startLine="402" endLine="461">
      <declaration type="Fraction" name="a" />
      <declaration type="Fraction" name="b" />
      <declaration type="Fraction" name="f1" />
      <declaration type="Fraction" name="f2" />
      <scope startLine="413" endLine="416" />
      <scope startLine="416" endLine="416" />
      <declaration type="Fraction" name="f" />
      <scope startLine="440" endLine="443" />
      <scope startLine="443" endLine="443" />
      <scope startLine="445" endLine="449">
        <comment>should overflow</comment>
      </scope>
      <scope startLine="449" endLine="449" />
      <scope startLine="450" endLine="454">
        <comment>should overflow</comment>
      </scope>
      <scope startLine="454" endLine="454" />
    </method>
    <method type="void" name="testMultiply" startLine="464" endLine="488">
      <declaration type="Fraction" name="a" />
      <declaration type="Fraction" name="b" />
      <declaration type="Fraction" name="f1" />
      <declaration type="Fraction" name="f2" />
      <declaration type="Fraction" name="f" />
      <scope startLine="479" endLine="482" />
      <scope startLine="482" endLine="482" />
    </method>
    <method type="void" name="testSubtract" startLine="491" endLine="562">
      <declaration type="Fraction" name="a" />
      <declaration type="Fraction" name="b" />
      <declaration type="Fraction" name="f" />
      <scope startLine="501" endLine="504" />
      <scope startLine="504" endLine="504" />
      <declaration type="Fraction" name="f1" />
      <declaration type="Fraction" name="f2" />
      <scope startLine="529" endLine="534">
        <comment>should overflow</comment>
      </scope>
      <scope startLine="534" endLine="534" />
      <scope startLine="539" endLine="542">
        <comment>should overflow</comment>
      </scope>
      <scope startLine="542" endLine="542" />
      <scope startLine="544" endLine="548" />
      <scope startLine="548" endLine="548" />
      <scope startLine="550" endLine="554" />
      <scope startLine="554" endLine="554" />
      <scope startLine="558" endLine="561">
        <comment>should overflow</comment>
      </scope>
      <scope startLine="561" endLine="561" />
      <comment>if this fraction is subtracted naively, it will overflow.</comment>
      <comment>check that it doesn't.</comment>
      <comment>denominator should not be a multiple of 2 or 3 to trigger overflow</comment>
    </method>
    <method type="void" name="testEqualsAndHashCode" startLine="565" endLine="576">
      <declaration type="Fraction" name="zero" />
      <declaration type="Fraction" name="nullFraction" />
      <declaration type="Fraction" name="zero2" />
      <declaration type="Fraction" name="one" />
    </method>
    <method type="void" name="testGetReducedFraction" startLine="579" endLine="593">
      <declaration type="Fraction" name="threeFourths" />
      <scope startLine="583" endLine="586" />
      <scope startLine="586" endLine="588">
        <comment>expected</comment>
      </scope>
    </method>
    <method type="void" name="testToString" startLine="596" endLine="600" />
    <method type="void" name="testSerial" startLine="603" endLine="612">
      <declaration type="Fraction[]" name="fractions" />
      <scope startLine="609" endLine="611" />
    </method>
    <comment>MATH-179</comment>
    <comment>MATH-181</comment>
  </class>
</source>
