<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.genetics">
  <import name="java.util.LinkedList" />
  <import name="java.util.List" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="GeneticAlgorithmTestBinary" startLine="26">
    <javadoc>
      <text>* This is also an example of usage.</text>
    </javadoc>
    <declaration type="int" name="DIMENSION" />
    <declaration type="int" name="POPULATION_SIZE" />
    <declaration type="int" name="NUM_GENERATIONS" />
    <declaration type="double" name="ELITISM_RATE" />
    <declaration type="double" name="CROSSOVER_RATE" />
    <declaration type="double" name="MUTATION_RATE" />
    <declaration type="int" name="TOURNAMENT_ARITY" />
    <method type="void" name="test" startLine="41" endLine="75">
      <declaration type="GeneticAlgorithm" name="ga" />
      <declaration type="Population" name="initial" />
      <declaration type="StoppingCondition" name="stopCond" />
      <declaration type="Chromosome" name="bestInitial" />
      <declaration type="Population" name="finalPopulation" />
      <declaration type="Chromosome" name="bestFinal" />
      <comment>to test a stochastic algorithm is hard, so this will rather be an usage example</comment>
      <comment>initialize a new genetic algorithm</comment>
      <comment>all selected chromosomes will be recombined (=crosssover)</comment>
      <comment>initial population</comment>
      <comment>stopping conditions</comment>
      <comment>best initial chromosome</comment>
      <comment>run the algorithm</comment>
      <comment>best chromosome from the final population</comment>
      <comment>the only thing we can test is whether the final solution is not worse than the initial one</comment>
      <comment>however, for some implementations of GA, this need not be true :)</comment>
    </method>
    <javadoc>
      <text>* Initializes a random population.</text>
    </javadoc>
    <method type="ElitisticListPopulation" name="randomPopulation" startLine="83" endLine="91">
      <declaration type="List<Chromosome>" name="popList" />
      <scope startLine="86" endLine="89">
        <declaration type="BinaryChromosome" name="randChrom" />
      </scope>
    </method>
    <class name="FindOnes" extends="BinaryChromosome" startLine="93">
      <javadoc>
        <text>* Chromosomes represented by a binary chromosome.
 * The goal is to set all bits (genes) to 1.</text>
      </javadoc>
      <method type="constructor" name="FindOnes" startLine="100" endLine="102" />
      <javadoc>
        <text>* Returns number of elements != 0</text>
      </javadoc>
      <method type="double" name="fitness" startLine="107" endLine="115">
        <declaration type="int" name="num" />
        <scope startLine="109" endLine="112" />
        <comment>number of elements >= 0</comment>
      </method>
      <method type="AbstractListChromosome<Integer>" name="newFixedLengthChromosome" startLine="118" endLine="120" />
    </class>
    <comment>parameters for the GA</comment>
  </class>
</source>
