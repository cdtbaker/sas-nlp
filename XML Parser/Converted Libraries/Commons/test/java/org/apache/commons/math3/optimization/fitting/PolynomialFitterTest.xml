<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.fitting">
  <import name="java.util.Random" />
  <import name="org.apache.commons.math3.analysis.polynomials.PolynomialFunction" />
  <import name="org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric" />
  <import name="org.apache.commons.math3.exception.ConvergenceException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer" />
  <import name="org.apache.commons.math3.optimization.general.GaussNewtonOptimizer" />
  <import name="org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer" />
  <import name="org.apache.commons.math3.optimization.SimpleVectorValueChecker" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.distribution.RealDistribution" />
  <import name="org.apache.commons.math3.distribution.UniformRealDistribution" />
  <import name="org.apache.commons.math3.TestUtils" />
  <import name="org.junit.Test" />
  <import name="org.junit.Assert" />
  <class name="PolynomialFitterTest" startLine="38">
    <javadoc>
      <text>* Test for class {@link CurveFitter} where the function to fit is a
 * polynomial.</text>
    </javadoc>
    <method type="void" name="testFit" startLine="44" endLine="63">
      <declaration type="RealDistribution" name="rng" />
      <declaration type="LevenbergMarquardtOptimizer" name="optim" />
      <declaration type="PolynomialFitter" name="fitter" />
      <declaration type="double[]" name="coeff" />
      <declaration type="PolynomialFunction" name="f" />
      <scope startLine="54" endLine="57">
        <declaration type="double" name="x" />
      </scope>
      <declaration type="double[][]" name="best" />
      <comment>12.9 - 3.4 x + 2.1 x^2</comment>
      <comment>Collect data from a known polynomial.</comment>
      <comment>Start fit from initial guesses that are far from the optimal values.</comment>
    </method>
    <method type="void" name="testNoError" startLine="66" endLine="85">
      <declaration type="Random" name="randomizer" />
      <scope startLine="68" endLine="84">
        <declaration type="PolynomialFunction" name="p" />
        <declaration type="PolynomialFitter" name="fitter" />
        <scope startLine="72" endLine="74" />
        <declaration type="double[]" name="init" />
        <declaration type="PolynomialFunction" name="fitted" />
        <scope startLine="79" endLine="83">
          <declaration type="double" name="error" />
        </scope>
      </scope>
    </method>
    <method type="void" name="testSmallError" startLine="88" endLine="111">
      <declaration type="Random" name="randomizer" />
      <declaration type="double" name="maxError" />
      <scope startLine="91" endLine="109">
        <declaration type="PolynomialFunction" name="p" />
        <declaration type="PolynomialFitter" name="fitter" />
        <scope startLine="95" endLine="98" />
        <declaration type="double[]" name="init" />
        <declaration type="PolynomialFunction" name="fitted" />
        <scope startLine="103" endLine="108">
          <declaration type="double" name="error" />
        </scope>
      </scope>
    </method>
    <method type="void" name="testMath798" startLine="114" endLine="126">
      <declaration type="double" name="tol" />
      <declaration type="SimpleVectorValueChecker" name="checker" />
      <declaration type="double[][]" name="init" />
      <declaration type="int" name="maxEval" />
      <declaration type="double[]" name="lm" />
      <declaration type="double[]" name="gn" />
      <scope startLine="123" endLine="125" />
    </method>
    <javadoc>
      <text>* This test shows that the user can set the maximum number of iterations
 * to avoid running for too long.
 * But in the test case, the real problem is that the tolerance is way too
 * stringent.</text>
    </javadoc>
    <method type="void" name="testMath798WithToleranceTooLow" startLine="135" endLine="142">
      <declaration type="double" name="tol" />
      <declaration type="SimpleVectorValueChecker" name="checker" />
      <declaration type="double[][]" name="init" />
      <declaration type="int" name="maxEval" />
      <declaration type="double[]" name="gn" />
      <comment>Trying hard to fit.</comment>
    </method>
    <javadoc>
      <text>* This test shows that the user can set the maximum number of iterations
 * to avoid running for too long.
 * Even if the real problem is that the tolerance is way too stringent, it
 * is possible to get the best solution so far, i.e. a checker will return
 * the point when the maximum iteration count has been reached.</text>
    </javadoc>
    <method type="void" name="testMath798WithToleranceTooLowButNoException" startLine="152" endLine="164">
      <declaration type="double" name="tol" />
      <declaration type="double[][]" name="init" />
      <declaration type="int" name="maxEval" />
      <declaration type="SimpleVectorValueChecker" name="checker" />
      <declaration type="double[]" name="lm" />
      <declaration type="double[]" name="gn" />
      <scope startLine="161" endLine="163" />
      <comment>Trying hard to fit.</comment>
    </method>
    <javadoc>
      <param>optimizer Optimizer.</param>
      <param>maxEval Maximum number of function evaluations.</param>
      <param>init First guess.</param>
      <return>the solution found by the given optimizer.</return>
    </javadoc>
    <method type="double[]" name="doMath798" startLine="174" endLine="212">
      <declaration type="CurveFitter<Parametric>" name="fitter" />
      <declaration type="double[]" name="coeff" />
    </method>
    <method type="void" name="testRedundantSolvable" startLine="215" endLine="218">
      <comment>Levenberg-Marquardt should handle redundant information gracefully</comment>
    </method>
    <method type="void" name="testRedundantUnsolvable" startLine="221" endLine="224">
      <comment>Gauss-Newton should not be able to solve redundant information</comment>
    </method>
    <method type="void" name="testLargeSample" startLine="227" endLine="251">
      <declaration type="Random" name="randomizer" />
      <declaration type="double" name="maxError" />
      <scope startLine="230" endLine="249">
        <declaration type="PolynomialFunction" name="p" />
        <declaration type="PolynomialFitter" name="fitter" />
        <scope startLine="234" endLine="238">
          <declaration type="double" name="x" />
        </scope>
        <declaration type="double[]" name="init" />
        <declaration type="PolynomialFunction" name="fitted" />
        <scope startLine="243" endLine="248">
          <declaration type="double" name="error" />
        </scope>
      </scope>
    </method>
    <method type="void" name="checkUnsolvableProblem" startLine="254" endLine="277">
      <declaration type="Random" name="randomizer" />
      <scope startLine="256" endLine="276">
        <declaration type="PolynomialFunction" name="p" />
        <declaration type="PolynomialFitter" name="fitter" />
        <scope startLine="265" endLine="267" />
        <scope startLine="269" endLine="273">
          <declaration type="double[]" name="init" />
        </scope>
        <scope startLine="273" endLine="275" />
        <comment>reusing the same point over and over again does not bring</comment>
        <comment>information, the problem cannot be solved in this case for</comment>
        <comment>degrees greater than 1 (but one point is sufficient for</comment>
        <comment>degree 0)</comment>
      </scope>
    </method>
    <method type="PolynomialFunction" name="buildRandomPolynomial" startLine="279" endLine="285">
      <declaration type="double[]" name="coefficients" />
      <scope startLine="281" endLine="283" />
    </method>
  </class>
</source>
