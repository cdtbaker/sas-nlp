<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.direct">
  <import name="java.util.Arrays" />
  <import name="java.util.Random" />
  <import name="org.apache.commons.math3.Retry" />
  <import name="org.apache.commons.math3.RetryRunner" />
  <import name="org.apache.commons.math3.analysis.MultivariateFunction" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathUnsupportedOperationException" />
  <import name="org.apache.commons.math3.exception.MathIllegalStateException" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.optimization.GoalType" />
  <import name="org.apache.commons.math3.optimization.PointValuePair" />
  <import name="org.apache.commons.math3.optimization.InitialGuess" />
  <import name="org.apache.commons.math3.optimization.SimpleBounds" />
  <import name="org.apache.commons.math3.random.MersenneTwister" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <import name="org.junit.Ignore" />
  <import name="org.junit.runner.RunWith" />
  <class name="CMAESOptimizerTest" startLine="43">
    <javadoc>
      <text>* Test for {@link CMAESOptimizer}.</text>
    </javadoc>
    <declaration type="int" name="DIM" />
    <declaration type="int" name="LAMBDA" />
    <method type="void" name="testInitOutofbounds1" startLine="53" endLine="62">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testInitOutofbounds2" startLine="64" endLine="73">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testBoundariesDimensionMismatch" startLine="76" endLine="85">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testInputSigmaNegative" startLine="88" endLine="97">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testInputSigmaOutOfRange" startLine="100" endLine="109">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testInputSigmaDimensionMismatch" startLine="112" endLine="121">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testRosen" startLine="125" endLine="137">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testMaximize" startLine="141" endLine="158">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testEllipse" startLine="161" endLine="173">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testElliRotated" startLine="176" endLine="188">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testCigar" startLine="191" endLine="203">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testCigarWithBoundaries" startLine="206" endLine="218">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testTwoAxes" startLine="221" endLine="233">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testCigTab" startLine="236" endLine="248">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testSphere" startLine="251" endLine="263">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testTablet" startLine="266" endLine="278">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testDiffPow" startLine="281" endLine="293">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testSsDiffPow" startLine="296" endLine="308">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testAckley" startLine="311" endLine="323">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testRastrigin" startLine="326" endLine="338">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testConstrainedRosen" startLine="341" endLine="353">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testDiagonalRosen" startLine="356" endLine="365">
      <declaration type="double[]" name="startPoint" />
      <declaration type="double[]" name="insigma" />
      <declaration type="double[][]" name="boundaries" />
      <declaration type="PointValuePair" name="expected" />
    </method>
    <method type="void" name="testMath864" startLine="368" endLine="385">
      <declaration type="CMAESOptimizer" name="optimizer" />
      <declaration type="MultivariateFunction[]" name="fitnessFunction" />
      <method type="double" name="value" startLine="371" endLine="375">
        <declaration type="double" name="target" />
        <declaration type="double" name="error" />
      </method>
      <declaration type="double[]" name="start" />
      <declaration type="double[]" name="lower" />
      <declaration type="double[]" name="upper" />
      <declaration type="double[]" name="result" />
    </method>
    <javadoc>
      <text>* Cf. MATH-867</text>
    </javadoc>
    <method type="void" name="testFitAccuracyDependsOnBoundary" startLine="391" endLine="430">
      <declaration type="CMAESOptimizer" name="optimizer" />
      <declaration type="MultivariateFunction[]" name="fitnessFunction" />
      <method type="double" name="value" startLine="394" endLine="398">
        <declaration type="double" name="target" />
        <declaration type="double" name="error" />
      </method>
      <declaration type="double[]" name="start" />
      <declaration type="PointValuePair" name="result" />
      <declaration type="double" name="resNoBound" />
      <declaration type="double[]" name="lower" />
      <declaration type="double[]" name="upper" />
      <declaration type="double" name="resNearLo" />
      <declaration type="double" name="resNearHi" />
      <comment>No bounds.</comment>
      <comment>Optimum is near the lower bound.</comment>
      <comment>Optimum is near the upper bound.</comment>
      <comment>System.out.println("resNoBound=" + resNoBound +</comment>
      <comment>" resNearLo=" + resNearLo +</comment>
      <comment>" resNearHi=" + resNearHi);</comment>
      <comment>The two values currently differ by a substantial amount, indicating that</comment>
      <comment>the bounds definition can prevent reaching the optimum.</comment>
    </method>
    <javadoc>
      <param>func Function to optimize.</param>
      <param>startPoint Starting point.</param>
      <param>inSigma Individual input sigma.</param>
      <param>boundaries Upper / lower point limit.</param>
      <param>goal Minimization or maximization.</param>
      <param>lambda Population size used for offspring.</param>
      <param>isActive Covariance update mechanism.</param>
      <param>diagonalOnly Simplified covariance update.</param>
      <param>stopValue Termination criteria for optimization.</param>
      <param>fTol Tolerance relative error on the objective function.</param>
      <param>pointTol Tolerance for checking that the optimum is correct.</param>
      <param>maxEvaluations Maximum number of evaluations.</param>
      <param>expected Expected point / value.</param>
    </javadoc>
    <method type="void" name="doTest" startLine="459" endLine="481">
      <declaration type="int" name="dim" />
      <declaration type="CMAESOptimizer" name="optim" />
      <declaration type="double[]" name="lB" />
      <declaration type="double[]" name="uB" />
      <declaration type="PointValuePair" name="result" />
      <scope startLine="478" endLine="480" />
      <comment>test diagonalOnly = 0 - slow but normally fewer feval#</comment>
      <comment>System.out.println("sol=" + Arrays.toString(result.getPoint()));</comment>
    </method>
    <method type="double[]" name="point" startLine="483" endLine="487">
      <declaration type="double[]" name="ds" />
    </method>
    <method type="double[][]" name="boundaries" startLine="490" endLine="497">
      <declaration type="double[][]" name="boundaries" />
    </method>
    <class name="Sphere" startLine="499">
      <implements name="MultivariateFunction" />
      <method type="double" name="value" startLine="501" endLine="506">
        <declaration type="double" name="f" />
      </method>
      <class name="Cigar" startLine="509">
        <implements name="MultivariateFunction" />
        <declaration type="double" name="factor" />
        <method type="constructor" name="Cigar" startLine="512" endLine="514" />
        <method type="constructor" name="Cigar" startLine="516" endLine="518" />
        <method type="double" name="value" startLine="520" endLine="525">
          <declaration type="double" name="f" />
        </method>
        <class name="Tablet" startLine="528">
          <implements name="MultivariateFunction" />
          <declaration type="double" name="factor" />
          <method type="constructor" name="Tablet" startLine="531" endLine="533" />
          <method type="constructor" name="Tablet" startLine="535" endLine="537" />
          <method type="double" name="value" startLine="539" endLine="544">
            <declaration type="double" name="f" />
          </method>
          <class name="CigTab" startLine="547">
            <implements name="MultivariateFunction" />
            <declaration type="double" name="factor" />
            <method type="constructor" name="CigTab" startLine="550" endLine="552" />
            <method type="constructor" name="CigTab" startLine="554" endLine="556" />
            <method type="double" name="value" startLine="558" endLine="564">
              <declaration type="int" name="end" />
              <declaration type="double" name="f" />
            </method>
            <class name="TwoAxes" startLine="567">
              <implements name="MultivariateFunction" />
              <declaration type="double" name="factor" />
              <method type="constructor" name="TwoAxes" startLine="571" endLine="573" />
              <method type="constructor" name="TwoAxes" startLine="575" endLine="577" />
              <method type="double" name="value" startLine="579" endLine="584">
                <declaration type="double" name="f" />
              </method>
              <class name="ElliRotated" startLine="587">
                <implements name="MultivariateFunction" />
                <declaration type="Basis" name="B" />
                <declaration type="double" name="factor" />
                <method type="constructor" name="ElliRotated" startLine="591" endLine="593" />
                <method type="constructor" name="ElliRotated" startLine="595" endLine="597" />
                <method type="double" name="value" startLine="599" endLine="605">
                  <declaration type="double" name="f" />
                </method>
                <class name="Elli" startLine="608">
                  <implements name="MultivariateFunction" />
                  <declaration type="double" name="factor" />
                  <method type="constructor" name="Elli" startLine="612" endLine="614" />
                  <method type="constructor" name="Elli" startLine="616" endLine="618" />
                  <method type="double" name="value" startLine="620" endLine="625">
                    <declaration type="double" name="f" />
                  </method>
                  <class name="MinusElli" startLine="628">
                    <implements name="MultivariateFunction" />
                    <method type="double" name="value" startLine="630" endLine="632" />
                    <class name="DiffPow" startLine="635">
                      <implements name="MultivariateFunction" />
                      <method type="double" name="value" startLine="637" endLine="643">
                        <declaration type="double" name="f" />
                      </method>
                      <class name="SsDiffPow" startLine="646">
                        <implements name="MultivariateFunction" />
                        <method type="double" name="value" startLine="648" endLine="651">
                          <declaration type="double" name="f" />
                        </method>
                        <class name="Rosen" startLine="654">
                          <implements name="MultivariateFunction" />
                          <method type="double" name="value" startLine="656" endLine="662">
                            <declaration type="double" name="f" />
                          </method>
                          <class name="Ackley" startLine="665">
                            <implements name="MultivariateFunction" />
                            <declaration type="double" name="axisratio" />
                            <method type="constructor" name="Ackley" startLine="668" endLine="670" />
                            <method type="constructor" name="Ackley" startLine="672" endLine="674" />
                            <method type="double" name="value" startLine="676" endLine="688">
                              <declaration type="double" name="f" />
                              <declaration type="double" name="res2" />
                              <declaration type="double" name="fac" />
                              <scope startLine="680" endLine="684" />
                            </method>
                            <class name="Rastrigin" startLine="691">
                              <implements name="MultivariateFunction" />
                              <declaration type="double" name="axisratio" />
                              <declaration type="double" name="amplitude" />
                              <method type="constructor" name="Rastrigin" startLine="696" endLine="698" />
                              <method type="constructor" name="Rastrigin" startLine="700" endLine="703" />
                              <method type="double" name="value" startLine="705" endLine="716">
                                <declaration type="double" name="f" />
                                <declaration type="double" name="fac" />
                                <scope startLine="708" endLine="714" />
                              </method>
                              <class name="Basis" startLine="719">
                                <declaration type="double[][]" name="basis" />
                                <declaration type="Random" name="rand" />
                                <method type="double[]" name="Rotate" startLine="723" endLine="732">
                                  <declaration type="double[]" name="y" />
                                  <scope startLine="726" endLine="730" />
                                </method>
                                <method type="void" name="GenBasis" startLine="734" endLine="760">
                                  <declaration type="double" name="sp" />
                                  <declaration type="int" name="i" />
                                  <scope startLine="743" endLine="759">
                                    <scope startLine="748" endLine="753" />
                                    <comment>sample components gaussian</comment>
                                    <comment>substract projection of previous vectors</comment>
                                    <comment>sp += basis[i][k]  basis[j][k];  scalar product</comment>
                                    <comment>basis[i][k] -= sp  basis[j][k];  substract</comment>
                                    <comment>normalize</comment>
                                    <comment>sp += basis[i][k]  basis[i][k];  squared norm</comment>
                                  </scope>
                                  <comment>generate orthogonal basis</comment>
                                </method>
                              </class>
                            </class>
                          </class>
                        </class>
                      </class>
                    </class>
                  </class>
                </class>
              </class>
            </class>
          </class>
        </class>
      </class>
    </class>
    <comment>use not always the same basis</comment>
  </class>
</source>
