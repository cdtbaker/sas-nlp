<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.geometry.euclidean.threed">
  <import name="java.text.DecimalFormat" />
  <import name="java.text.DecimalFormatSymbols" />
  <import name="java.text.NumberFormat" />
  <import name="java.util.Locale" />
  <import name="org.apache.commons.math3.TestUtils" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.geometry.Space" />
  <import name="org.apache.commons.math3.random.Well1024a" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.Precision" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="Vector3DTest" startLine="35">
    <method type="void" name="testConstructors" startLine="37" endLine="55">
      <declaration type="double" name="r" />
    </method>
    <method type="void" name="testSpace" startLine="58" endLine="64">
      <declaration type="Space" name="space" />
      <declaration type="Space" name="deserialized" />
    </method>
    <method type="void" name="testZero" startLine="67" endLine="69" />
    <method type="void" name="testEquals" startLine="72" endLine="82">
      <declaration type="Vector3D" name="u1" />
      <declaration type="Vector3D" name="u2" />
    </method>
    <method type="void" name="testHash" startLine="85" endLine="90">
      <declaration type="Vector3D" name="u" />
      <declaration type="Vector3D" name="v" />
    </method>
    <method type="void" name="testInfinite" startLine="93" endLine="99" />
    <method type="void" name="testNaN" startLine="102" endLine="108" />
    <method type="void" name="testToString" startLine="111" endLine="115">
      <declaration type="NumberFormat" name="format" />
    </method>
    <method type="void" name="testWrongDimension" startLine="118" endLine="120" />
    <method type="void" name="testCoordinates" startLine="123" endLine="132">
      <declaration type="Vector3D" name="v" />
      <declaration type="double[]" name="coordinates" />
    </method>
    <method type="void" name="testNorm1" startLine="135" endLine="138" />
    <method type="void" name="testNorm" startLine="141" endLine="144" />
    <method type="void" name="testNormSq" startLine="147" endLine="150" />
    <method type="void" name="testNormInf" startLine="153" endLine="156" />
    <method type="void" name="testDistance1" startLine="159" endLine="165">
      <declaration type="Vector3D" name="v1" />
      <declaration type="Vector3D" name="v2" />
    </method>
    <method type="void" name="testDistance" startLine="168" endLine="174">
      <declaration type="Vector3D" name="v1" />
      <declaration type="Vector3D" name="v2" />
    </method>
    <method type="void" name="testDistanceSq" startLine="177" endLine="184">
      <declaration type="Vector3D" name="v1" />
      <declaration type="Vector3D" name="v2" />
    </method>
    <method type="void" name="testDistanceInf" startLine="187" endLine="193">
      <declaration type="Vector3D" name="v1" />
      <declaration type="Vector3D" name="v2" />
    </method>
    <method type="void" name="testSubtract" startLine="196" endLine="204">
      <declaration type="Vector3D" name="v1" />
      <declaration type="Vector3D" name="v2" />
    </method>
    <method type="void" name="testAdd" startLine="207" endLine="215">
      <declaration type="Vector3D" name="v1" />
      <declaration type="Vector3D" name="v2" />
    </method>
    <method type="void" name="testScalarProduct" startLine="218" endLine="224">
      <declaration type="Vector3D" name="v" />
    </method>
    <method type="void" name="testVectorialProducts" startLine="227" endLine="238">
      <declaration type="Vector3D" name="v1" />
      <declaration type="Vector3D" name="v2" />
      <declaration type="Vector3D" name="v3" />
    </method>
    <method type="void" name="testCrossProductCancellation" startLine="241" endLine="251">
      <declaration type="Vector3D" name="v1" />
      <declaration type="Vector3D" name="v2" />
      <declaration type="double" name="scale" />
      <declaration type="Vector3D" name="big1" />
      <declaration type="Vector3D" name="small2" />
    </method>
    <method type="void" name="testAngular" startLine="254" endLine="265">
      <declaration type="Vector3D" name="u" />
    </method>
    <method type="void" name="testAngularSeparation" startLine="268" endLine="276">
      <declaration type="Vector3D" name="v1" />
      <declaration type="Vector3D" name="k" />
      <declaration type="Vector3D" name="i" />
      <declaration type="Vector3D" name="v2" />
    </method>
    <method type="void" name="testNormalize" startLine="279" endLine="287">
      <scope startLine="281" endLine="284" />
      <scope startLine="284" endLine="286">
        <comment>expected behavior</comment>
      </scope>
    </method>
    <method type="void" name="testNegate" startLine="290" endLine="292" />
    <method type="void" name="testOrthogonal" startLine="295" endLine="310">
      <declaration type="Vector3D" name="v1" />
      <declaration type="Vector3D" name="v2" />
      <declaration type="Vector3D" name="v3" />
      <declaration type="Vector3D" name="v4" />
      <scope startLine="304" endLine="307" />
      <scope startLine="307" endLine="309">
        <comment>expected behavior</comment>
      </scope>
    </method>
    <method type="void" name="testAngle" startLine="312" endLine="328">
      <scope startLine="322" endLine="325" />
      <scope startLine="325" endLine="327">
        <comment>expected behavior</comment>
      </scope>
    </method>
    <method type="void" name="testAccurateDotProduct" startLine="331" endLine="345">
      <declaration type="Vector3D" name="u1" />
      <declaration type="Vector3D" name="u2" />
      <declaration type="double" name="sNaive" />
      <declaration type="double" name="sAccurate" />
      <comment>the following two vectors are nearly but not exactly orthogonal</comment>
      <comment>naive dot product (i.e. computing u1.x * u2.x + u1.y * u2.y + u1.z * u2.z</comment>
      <comment>leads to a result of 0.0, instead of the correct -1.855129...</comment>
    </method>
    <method type="void" name="testDotProduct" startLine="348" endLine="363">
      <declaration type="Well1024a" name="random" />
      <scope startLine="352" endLine="362">
        <declaration type="double" name="ux" />
        <declaration type="double" name="uy" />
        <declaration type="double" name="uz" />
        <declaration type="double" name="vx" />
        <declaration type="double" name="vy" />
        <declaration type="double" name="vz" />
        <declaration type="double" name="sNaive" />
        <declaration type="double" name="sAccurate" />
      </scope>
      <comment>we compare accurate versus naive dot product implementations</comment>
      <comment>on regular vectors (i.e. not extreme cases like in the previous test)</comment>
    </method>
    <method type="void" name="testAccurateCrossProduct" startLine="366" endLine="387">
      <declaration type="Vector3D" name="u1" />
      <declaration type="Vector3D" name="u2" />
      <declaration type="Vector3D" name="u3" />
      <declaration type="Vector3D" name="cNaive" />
      <declaration type="Vector3D" name="cAccurate" />
      <comment>the vectors u1 and u2 are nearly but not exactly anti-parallel</comment>
      <comment>(7.31e-16 degrees from 180 degrees) naive cross product (i.e.</comment>
      <comment>computing u1.x * u2.x + u1.y * u2.y + u1.z * u2.z</comment>
      <comment>leads to a result of   [0.0009765, -0.0001220, -0.0039062],</comment>
      <comment>instead of the correct [0.0006913, -0.0001254, -0.0007909]</comment>
    </method>
    <method type="void" name="testCrossProduct" startLine="390" endLine="405">
      <declaration type="Well1024a" name="random" />
      <scope startLine="394" endLine="404">
        <declaration type="double" name="ux" />
        <declaration type="double" name="uy" />
        <declaration type="double" name="uz" />
        <declaration type="double" name="vx" />
        <declaration type="double" name="vy" />
        <declaration type="double" name="vz" />
        <declaration type="Vector3D" name="cNaive" />
        <declaration type="Vector3D" name="cAccurate" />
      </scope>
      <comment>we compare accurate versus naive cross product implementations</comment>
      <comment>on regular vectors (i.e. not extreme cases like in the previous test)</comment>
    </method>
    <method type="void" name="checkVector" startLine="407" endLine="411" />
  </class>
</source>
