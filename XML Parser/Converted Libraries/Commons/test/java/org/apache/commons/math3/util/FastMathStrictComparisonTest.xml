<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.util">
  <import name="java.lang.reflect.InvocationTargetException" />
  <import name="java.lang.reflect.Method" />
  <import name="java.lang.reflect.Modifier" />
  <import name="java.lang.reflect.Type" />
  <import name="java.util.ArrayList" />
  <import name="java.util.Arrays" />
  <import name="java.util.List" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <import name="org.junit.runner.RunWith" />
  <import name="org.junit.runners.Parameterized" />
  <import name="org.junit.runners.Parameterized.Parameters" />
  <class name="FastMathStrictComparisonTest" startLine="33">
    <javadoc>
      <text>* Test to compare FastMath results against StrictMath results for boundary values.
 * <p>
 * Running all tests independently: <br/>{@code mvn test -Dtest=FastMathStrictComparisonTest}<br/>
 * or just run tests against a single method (e.g. scalb):<br/>{@code mvn test -Dtest=FastMathStrictComparisonTest -DargLine="-DtestMethod=scalb"}</text>
    </javadoc>
    <declaration type="Double[]" name="DOUBLE_SPECIAL_VALUES" />
    <declaration type="Float[]" name="FLOAT_SPECIAL_VALUES" />
    <declaration type="Object[]" name="LONG_SPECIAL_VALUES" />
    <declaration type="Object[]" name="INT_SPECIAL_VALUES" />
    <declaration type="Method" name="mathMethod" />
    <declaration type="Method" name="fastMethod" />
    <declaration type="Type[]" name="types" />
    <declaration type="Object[][]" name="valueArrays" />
    <method type="constructor" name="FastMathStrictComparisonTest" startLine="79" endLine="84" />
    <method type="void" name="test1" startLine="87" endLine="89" />
    <method type="boolean" name="isNumber" startLine="90" endLine="92" />
    <method type="boolean" name="isNumber" startLine="94" endLine="96" />
    <method type="void" name="reportFailedResults" startLine="98" endLine="158">
      <declaration type="String" name="methodName" />
      <declaration type="String" name="format" />
      <declaration type="long" name="actL" />
      <declaration type="long" name="expL" />
      <scope startLine="103" endLine="117">
        <declaration type="Double" name="exp" />
        <declaration type="Double" name="act" />
        <scope startLine="106" endLine="116">
          <scope startLine="109" endLine="114">
            <scope startLine="111" endLine="113" />
          </scope>
        </scope>
        <comment>show difference as hex</comment>
        <comment>Not 100% sure off-by-one errors are allowed everywhere, so only allow for these methods</comment>
      </scope>
      <scope startLine="117" endLine="125">
        <declaration type="Float" name="exp" />
        <declaration type="Float" name="act" />
        <scope startLine="120" endLine="124" />
        <comment>show difference as hex</comment>
      </scope>
      <declaration type="StringBuilder" name="sb" />
      <declaration type="String" name="sep" />
      <scope startLine="132" endLine="136" />
      <scope startLine="138" endLine="140" />
      <scope startLine="140" endLine="142" />
      <scope startLine="144" endLine="146" />
      <scope startLine="146" endLine="148" />
      <declaration type="String" name="message" />
      <declaration type="boolean" name="fatal" />
      <scope startLine="153" endLine="155" />
      <scope startLine="155" endLine="157" />
    </method>
    <method type="void" name="callMethods" startLine="162" endLine="172">
      <scope startLine="163" endLine="169">
        <declaration type="Object" name="expected" />
        <declaration type="Object" name="actual" />
        <scope startLine="166" endLine="168" />
      </scope>
      <scope startLine="169" endLine="171" />
    </method>
    <method type="void" name="setupMethodCall" startLine="175" endLine="195">
      <declaration type="Object[]" name="params" />
      <declaration type="int" name="entry1" />
      <declaration type="int[]" name="entries" />
      <scope startLine="179" endLine="194">
        <scope startLine="183" endLine="191">
          <declaration type="int" name="entry2" />
          <scope startLine="185" endLine="190" />
        </scope>
        <scope startLine="191" endLine="193" />
      </scope>
    </method>
    <method type="List<Object[]>" name="data" startLine="198" endLine="247">
      <declaration type="String" name="singleMethod" />
      <declaration type="List<Object[]>[]" name="list" />
      <scope startLine="201" endLine="245">
        <scope startLine="203" endLine="244">
          <declaration type="Type[]" name="types" />
          <scope startLine="205" endLine="243">
            <scope startLine="206" endLine="240">
              <declaration type="Method[]" name="fastMethod" />
              <scope startLine="209" endLine="237">
                <scope startLine="210" endLine="212" />
                <declaration type="Object[][][]" name="values" />
                <declaration type="int" name="index" />
                <scope startLine="215" endLine="229">
                  <scope startLine="216" endLine="218" />
                  <scope startLine="218" endLine="220" />
                  <scope startLine="220" endLine="222" />
                  <scope startLine="222" endLine="224" />
                  <scope startLine="224" endLine="227" />
                </scope>
              </scope>
              <scope startLine="237" endLine="239" />
            </scope>
            <scope startLine="240" endLine="242" />
          </scope>
        </scope>
        <comment>Only test public methods</comment>
        <comment>Only check methods with at least one parameter</comment>
        <comment>Get the corresponding FastMath method</comment>
        <comment>It must be public too</comment>
        <comment>System.out.println(fastMethod);</comment>
        <comment>The current implementation runs each method as a separate test.
 Could be amended to run each value as a separate test</comment>
        <comment>setupMethodCall(mathMethod, fastMethod, params, data);</comment>
      </scope>
    </method>
    <comment>Values which often need special handling</comment>
    <comment>1,2</comment>
    <comment>3</comment>
    <comment>4,5</comment>
    <comment>6,7</comment>
    <comment>decreasing order of absolute value to help catch first failure</comment>
    <comment>8,9</comment>
    <comment>10,11</comment>
    <comment>12,13</comment>
    <comment>1,2</comment>
    <comment>3</comment>
    <comment>4,5</comment>
    <comment>6,7</comment>
    <comment>8,9</comment>
    <comment>1,2,3</comment>
    <comment>4,5</comment>
    <comment>1,2,3</comment>
    <comment>4,5</comment>
  </class>
</source>
