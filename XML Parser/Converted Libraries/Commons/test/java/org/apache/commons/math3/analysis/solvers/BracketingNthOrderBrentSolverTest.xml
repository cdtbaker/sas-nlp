<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.solvers">
  <import name="org.apache.commons.math3.analysis.QuinticFunction" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.differentiation.DerivativeStructure" />
  <import name="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.junit.Assert" />
  <import name="org.junit.Test" />
  <class name="BracketingNthOrderBrentSolverTest" extends="BaseSecantSolverAbstractTest" startLine="29">
    <javadoc>
      <text>* Test case for {@link BracketingNthOrderBrentSolver bracketing n<sup>th</sup> order Brent} solver.</text>
      <version>$Id: BracketingNthOrderBrentSolverTest.java 1383441 2012-09-11 14:56:39Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="UnivariateSolver" name="getSolver" startLine="37" endLine="39" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int[]" name="getQuinticEvalCounts" startLine="43" endLine="45" />
    <method type="void" name="testInsufficientOrder1" startLine="48" endLine="50" />
    <method type="void" name="testInsufficientOrder2" startLine="53" endLine="55" />
    <method type="void" name="testInsufficientOrder3" startLine="58" endLine="60" />
    <method type="void" name="testConstructorsOK" startLine="63" endLine="67" />
    <method type="void" name="testConvergenceOnFunctionAccuracy" startLine="70" endLine="82">
      <declaration type="BracketingNthOrderBrentSolver" name="solver" />
      <declaration type="QuinticFunction" name="f" />
      <declaration type="double" name="result" />
    </method>
    <method type="void" name="testIssue716" startLine="85" endLine="97">
      <declaration type="BracketingNthOrderBrentSolver" name="solver" />
      <declaration type="UnivariateFunction" name="sharpTurn" />
      <method type="double" name="value" startLine="89" endLine="91" />
      <declaration type="double" name="result" />
    </method>
    <method type="void" name="testFasterThanNewton" startLine="100" endLine="144">
      <method type="DerivativeStructure" name="value" startLine="109" endLine="111" />
      <method type="DerivativeStructure" name="value" startLine="115" endLine="117" />
      <method type="DerivativeStructure" name="value" startLine="121" endLine="123" />
      <method type="DerivativeStructure" name="value" startLine="127" endLine="129" />
      <method type="DerivativeStructure" name="value" startLine="133" endLine="135" />
      <method type="DerivativeStructure" name="value" startLine="139" endLine="141" />
      <comment>the following test functions come from Beny Neta's paper:</comment>
      <comment>"Several New Methods for solving Equations"</comment>
      <comment>intern J. Computer Math Vol 23 pp 265-282</comment>
      <comment>available here: http:www.math.nps.navy.mil/~bneta/SeveralNewMethods.PDF</comment>
      <comment>the reference roots have been computed by the Dfp solver to more than</comment>
      <comment>80 digits and checked with emacs (only the first 20 digits are reproduced here)</comment>
    </method>
    <method type="void" name="compare" startLine="146" endLine="148" />
    <method type="void" name="compare" startLine="151" endLine="178">
      <declaration type="NewtonRaphsonSolver" name="newton" />
      <declaration type="BracketingNthOrderBrentSolver" name="bracketing" />
      <declaration type="double" name="resultN" />
      <scope startLine="156" endLine="158" />
      <scope startLine="158" endLine="160" />
      <declaration type="double" name="resultB" />
      <scope startLine="162" endLine="164" />
      <scope startLine="164" endLine="166" />
      <declaration type="int" name="weightedBracketingEvaluations" />
      <declaration type="int" name="weightedNewtonEvaluations" />
      <comment>bracketing solver evaluates only function value, we set the weight to 1</comment>
      <comment>Newton-Raphson solver evaluates both function value and derivative, we set the weight to 2</comment>
    </method>
    <class name="TestFunction" startLine="180">
      <implements name="UnivariateDifferentiableFunction" />
      <declaration type="double" name="root" />
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
      <method type="constructor" name="TestFunction" startLine="186" endLine="190" />
      <method type="double" name="getRoot" startLine="192" endLine="194" />
      <method type="double" name="getMin" startLine="196" endLine="198" />
      <method type="double" name="getMax" startLine="200" endLine="202" />
      <method type="double" name="value" startLine="204" endLine="206" />
      <method name="value" type="DerivativeStructure" startLine="208" endLine="208" />
    </class>
  </class>
</source>
