<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.fitting">
  <import name="java.util.Random" />
  <import name="org.apache.commons.math3.analysis.polynomials.PolynomialFunction" />
  <import name="org.apache.commons.math3.analysis.polynomials.PolynomialFunction.Parametric" />
  <import name="org.apache.commons.math3.exception.ConvergenceException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer" />
  <import name="org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer" />
  <import name="org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer" />
  <import name="org.apache.commons.math3.optim.SimpleVectorValueChecker" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.distribution.RealDistribution" />
  <import name="org.apache.commons.math3.distribution.UniformRealDistribution" />
  <import name="org.apache.commons.math3.TestUtils" />
  <import name="org.junit.Test" />
  <import name="org.junit.Assert" />
  <class name="PolynomialFitterTest" startLine="35">
    <javadoc>
      <text>* Test for class {@link CurveFitter} where the function to fit is a
 * polynomial.</text>
    </javadoc>
    <method type="void" name="testFit" startLine="41" endLine="60">
      <declaration type="RealDistribution" name="rng" />
      <declaration type="LevenbergMarquardtOptimizer" name="optim" />
      <declaration type="PolynomialFitter" name="fitter" />
      <declaration type="double[]" name="coeff" />
      <declaration type="PolynomialFunction" name="f" />
      <scope startLine="51" endLine="54">
        <declaration type="double" name="x" />
      </scope>
      <declaration type="double[][]" name="best" />
      <comment>12.9 - 3.4 x + 2.1 x^2</comment>
      <comment>Collect data from a known polynomial.</comment>
      <comment>Start fit from initial guesses that are far from the optimal values.</comment>
    </method>
    <method type="void" name="testNoError" startLine="63" endLine="82">
      <declaration type="Random" name="randomizer" />
      <scope startLine="65" endLine="81">
        <declaration type="PolynomialFunction" name="p" />
        <declaration type="PolynomialFitter" name="fitter" />
        <scope startLine="69" endLine="71" />
        <declaration type="double[]" name="init" />
        <declaration type="PolynomialFunction" name="fitted" />
        <scope startLine="76" endLine="80">
          <declaration type="double" name="error" />
        </scope>
      </scope>
    </method>
    <method type="void" name="testSmallError" startLine="85" endLine="108">
      <declaration type="Random" name="randomizer" />
      <declaration type="double" name="maxError" />
      <scope startLine="88" endLine="106">
        <declaration type="PolynomialFunction" name="p" />
        <declaration type="PolynomialFitter" name="fitter" />
        <scope startLine="92" endLine="95" />
        <declaration type="double[]" name="init" />
        <declaration type="PolynomialFunction" name="fitted" />
        <scope startLine="100" endLine="105">
          <declaration type="double" name="error" />
        </scope>
      </scope>
    </method>
    <method type="void" name="testMath798" startLine="111" endLine="123">
      <declaration type="double" name="tol" />
      <declaration type="SimpleVectorValueChecker" name="checker" />
      <declaration type="double[][]" name="init" />
      <declaration type="int" name="maxEval" />
      <declaration type="double[]" name="lm" />
      <declaration type="double[]" name="gn" />
      <scope startLine="120" endLine="122" />
    </method>
    <javadoc>
      <text>* This test shows that the user can set the maximum number of iterations
 * to avoid running for too long.
 * But in the test case, the real problem is that the tolerance is way too
 * stringent.</text>
    </javadoc>
    <method type="void" name="testMath798WithToleranceTooLow" startLine="132" endLine="139">
      <declaration type="double" name="tol" />
      <declaration type="SimpleVectorValueChecker" name="checker" />
      <declaration type="double[][]" name="init" />
      <declaration type="int" name="maxEval" />
      <declaration type="double[]" name="gn" />
      <comment>Trying hard to fit.</comment>
    </method>
    <javadoc>
      <text>* This test shows that the user can set the maximum number of iterations
 * to avoid running for too long.
 * Even if the real problem is that the tolerance is way too stringent, it
 * is possible to get the best solution so far, i.e. a checker will return
 * the point when the maximum iteration count has been reached.</text>
    </javadoc>
    <method type="void" name="testMath798WithToleranceTooLowButNoException" startLine="149" endLine="161">
      <declaration type="double" name="tol" />
      <declaration type="double[][]" name="init" />
      <declaration type="int" name="maxEval" />
      <declaration type="SimpleVectorValueChecker" name="checker" />
      <declaration type="double[]" name="lm" />
      <declaration type="double[]" name="gn" />
      <scope startLine="158" endLine="160" />
      <comment>Trying hard to fit.</comment>
    </method>
    <javadoc>
      <param>optimizer Optimizer.</param>
      <param>maxEval Maximum number of function evaluations.</param>
      <param>init First guess.</param>
      <return>the solution found by the given optimizer.</return>
    </javadoc>
    <method type="double[]" name="doMath798" startLine="171" endLine="209">
      <declaration type="CurveFitter<Parametric>" name="fitter" />
      <declaration type="double[]" name="coeff" />
    </method>
    <method type="void" name="testRedundantSolvable" startLine="212" endLine="215">
      <comment>Levenberg-Marquardt should handle redundant information gracefully</comment>
    </method>
    <method type="void" name="testRedundantUnsolvable" startLine="218" endLine="221">
      <comment>Gauss-Newton should not be able to solve redundant information</comment>
    </method>
    <method type="void" name="testLargeSample" startLine="224" endLine="248">
      <declaration type="Random" name="randomizer" />
      <declaration type="double" name="maxError" />
      <scope startLine="227" endLine="246">
        <declaration type="PolynomialFunction" name="p" />
        <declaration type="PolynomialFitter" name="fitter" />
        <scope startLine="231" endLine="235">
          <declaration type="double" name="x" />
        </scope>
        <declaration type="double[]" name="init" />
        <declaration type="PolynomialFunction" name="fitted" />
        <scope startLine="240" endLine="245">
          <declaration type="double" name="error" />
        </scope>
      </scope>
    </method>
    <method type="void" name="checkUnsolvableProblem" startLine="251" endLine="274">
      <declaration type="Random" name="randomizer" />
      <scope startLine="253" endLine="273">
        <declaration type="PolynomialFunction" name="p" />
        <declaration type="PolynomialFitter" name="fitter" />
        <scope startLine="262" endLine="264" />
        <scope startLine="266" endLine="270">
          <declaration type="double[]" name="init" />
        </scope>
        <scope startLine="270" endLine="272" />
        <comment>reusing the same point over and over again does not bring</comment>
        <comment>information, the problem cannot be solved in this case for</comment>
        <comment>degrees greater than 1 (but one point is sufficient for</comment>
        <comment>degree 0)</comment>
      </scope>
    </method>
    <method type="PolynomialFunction" name="buildRandomPolynomial" startLine="276" endLine="282">
      <declaration type="double[]" name="coefficients" />
      <scope startLine="278" endLine="280" />
    </method>
  </class>
</source>
