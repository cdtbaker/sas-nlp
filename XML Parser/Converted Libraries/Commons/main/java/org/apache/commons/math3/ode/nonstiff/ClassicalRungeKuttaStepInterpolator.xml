<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode.nonstiff">
  <import name="org.apache.commons.math3.ode.sampling.StepInterpolator" />
  <class name="ClassicalRungeKuttaStepInterpolator" extends="RungeKuttaStepInterpolator" startLine="22">
    <javadoc>
      <text>* This class implements a step interpolator for the classical fourth
 * order Runge-Kutta integrator.
 * <p>This interpolator allows to compute dense output inside the last
 * step computed. The interpolation equation is consistent with the
 * integration scheme :
 * <ul>
 * <li>Using reference point at step start:<br>
 * y(t<sub>n</sub> + &theta; h) = y (t<sub>n</sub>)
 * + &theta; (h/6) [  (6 - 9 &theta; + 4 &theta;<sup>2</sup>) y'<sub>1</sub>
 * + (    6 &theta; - 4 &theta;<sup>2</sup>) (y'<sub>2</sub> + y'<sub>3</sub>)
 * + (   -3 &theta; + 4 &theta;<sup>2</sup>) y'<sub>4</sub>
 * ]
 * </li>
 * <li>Using reference point at step end:<br>
 * y(t<sub>n</sub> + &theta; h) = y (t<sub>n</sub> + h)
 * + (1 - &theta;) (h/6) [ (-4 &theta;^2 + 5 &theta; - 1) y'<sub>1</sub>
 * +(4 &theta;^2 - 2 &theta; - 2) (y'<sub>2</sub> + y'<sub>3</sub>)
 * -(4 &theta;^2 +   &theta; + 1) y'<sub>4</sub>
 * ]
 * </li>
 * </ul>
 * </p>
 * where &theta; belongs to [0 ; 1] and where y'<sub>1</sub> to y'<sub>4</sub> are the four
 * evaluations of the derivatives already computed during the
 * step.</p></text>
      <see>ClassicalRungeKuttaIntegrator</see>
      <version>$Id: ClassicalRungeKuttaStepInterpolator.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>1.2</since>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Simple constructor.
 * This constructor builds an instance that is not usable yet, the{@link RungeKuttaStepInterpolator#reinitialize} method should be
 * called before using the instance in order to initialize the
 * internal arrays. This constructor is used only in order to delay
 * the initialization in some cases. The {@link RungeKuttaIntegrator}class uses the prototyping design pattern to create the step
 * interpolators by cloning an uninitialized model and latter initializing
 * the copy.</text>
    </javadoc>
    <method type="constructor" name="ClassicalRungeKuttaStepInterpolator" startLine="72" endLine="73" />
    <javadoc>
      <text>* Copy constructor.</text>
      <param>interpolator interpolator to copy from. The copy is a deep
 * copy: its arrays are separated from the original arrays of the
 * instance</param>
    </javadoc>
    <method type="constructor" name="ClassicalRungeKuttaStepInterpolator" startLine="80" endLine="82" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="StepInterpolator" name="doCopy" startLine="86" endLine="88" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="computeInterpolatedStateAndDerivatives" startLine="93" endLine="132">
      <declaration type="double" name="oneMinusTheta" />
      <declaration type="double" name="oneMinus2Theta" />
      <declaration type="double" name="coeffDot1" />
      <declaration type="double" name="coeffDot23" />
      <declaration type="double" name="coeffDot4" />
      <scope startLine="100" endLine="115">
        <declaration type="double" name="fourTheta2" />
        <declaration type="double" name="s" />
        <declaration type="double" name="coeff1" />
        <declaration type="double" name="coeff23" />
        <declaration type="double" name="coeff4" />
        <scope startLine="106" endLine="114">
          <declaration type="double" name="yDot1" />
          <declaration type="double" name="yDot23" />
          <declaration type="double" name="yDot4" />
        </scope>
      </scope>
      <scope startLine="115" endLine="130">
        <declaration type="double" name="fourTheta" />
        <declaration type="double" name="s" />
        <declaration type="double" name="coeff1" />
        <declaration type="double" name="coeff23" />
        <declaration type="double" name="coeff4" />
        <scope startLine="121" endLine="129">
          <declaration type="double" name="yDot1" />
          <declaration type="double" name="yDot23" />
          <declaration type="double" name="yDot4" />
        </scope>
      </scope>
    </method>
  </class>
</source>
