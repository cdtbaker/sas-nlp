<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.special.Erf" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937c" />
  <class name="NormalDistribution" extends="AbstractRealDistribution" startLine="29">
    <javadoc>
      <text>* Implementation of the normal (gaussian) distribution.</text>
      <see><a href="http://en.wikipedia.org/wiki/Normal_distribution">Normal distribution (Wikipedia)</a></see>
      <see><a href="http://mathworld.wolfram.com/NormalDistribution.html">Normal distribution (MathWorld)</a></see>
      <version>$Id: NormalDistribution.java 1462423 2013-03-29 07:25:18Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* Default inverse cumulative probability accuracy.</text>
      <since>2.1</since>
    </javadoc>
    <declaration type="double" name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" />
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* &radic;(2 &pi;)</text>
    </javadoc>
    <declaration type="double" name="SQRT2PI" />
    <javadoc>
      <text>* &radic;(2)</text>
    </javadoc>
    <declaration type="double" name="SQRT2" />
    <javadoc>
      <text>* Mean of this distribution.</text>
    </javadoc>
    <declaration type="double" name="mean" />
    <javadoc>
      <text>* Standard deviation of this distribution.</text>
    </javadoc>
    <declaration type="double" name="standardDeviation" />
    <javadoc>
      <text>* Inverse cumulative probability accuracy.</text>
    </javadoc>
    <declaration type="double" name="solverAbsoluteAccuracy" />
    <javadoc>
      <text>* Create a normal distribution with mean equal to zero and standard
 * deviation equal to one.</text>
    </javadoc>
    <method type="constructor" name="NormalDistribution" startLine="59" endLine="61" />
    <javadoc>
      <text>* Create a normal distribution using the given mean and standard deviation.</text>
      <param>mean Mean for this distribution.</param>
      <param>sd Standard deviation for this distribution.</param>
      <throws>NotStrictlyPositiveException if {@code sd <= 0}.</throws>
    </javadoc>
    <method type="constructor" name="NormalDistribution" startLine="71" endLine="73" />
    <javadoc>
      <text>* Create a normal distribution using the given mean, standard deviation and
 * inverse cumulative distribution accuracy.</text>
      <param>mean Mean for this distribution.</param>
      <param>sd Standard deviation for this distribution.</param>
      <param>inverseCumAccuracy Inverse cumulative probability accuracy.</param>
      <throws>NotStrictlyPositiveException if {@code sd <= 0}.</throws>
      <since>2.1</since>
    </javadoc>
    <method type="constructor" name="NormalDistribution" startLine="86" endLine="88" />
    <javadoc>
      <text>* Creates a normal distribution.</text>
      <param>rng Random number generator.</param>
      <param>mean Mean for this distribution.</param>
      <param>sd Standard deviation for this distribution.</param>
      <param>inverseCumAccuracy Inverse cumulative probability accuracy.</param>
      <throws>NotStrictlyPositiveException if {@code sd <= 0}.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="NormalDistribution" startLine="104" endLine="114">
      <scope startLine="107" endLine="109" />
    </method>
    <javadoc>
      <text>* Access the mean.</text>
      <return>the mean for this distribution.</return>
    </javadoc>
    <method type="double" name="getMean" startLine="121" endLine="123" />
    <javadoc>
      <text>* Access the standard deviation.</text>
      <return>the standard deviation for this distribution.</return>
    </javadoc>
    <method type="double" name="getStandardDeviation" startLine="130" endLine="132" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="density" startLine="135" endLine="139">
      <declaration type="double" name="x0" />
      <declaration type="double" name="x1" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}If {@code x} is more than 40 standard deviations from the mean, 0 or 1
 * is returned, as in these cases the actual value is within{@code Double.MIN_VALUE} of 0 or 1.</text>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="148" endLine="154">
      <declaration type="double" name="dev" />
      <scope startLine="150" endLine="152" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="double" name="inverseCumulativeProbability" startLine="160" endLine="165">
      <scope startLine="161" endLine="163" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <deprecated>See {@link RealDistribution#cumulativeProbability(double,double)}</deprecated>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="174" endLine="176" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="probability" startLine="182" endLine="191">
      <scope startLine="183" endLine="186" />
      <declaration type="double" name="denom" />
      <declaration type="double" name="v0" />
      <declaration type="double" name="v1" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getSolverAbsoluteAccuracy" startLine="195" endLine="197" />
    <javadoc>
      <text>* {@inheritDoc}For mean parameter {@code mu}, the mean is {@code mu}.</text>
    </javadoc>
    <method type="double" name="getNumericalMean" startLine="204" endLine="206" />
    <javadoc>
      <text>* {@inheritDoc}For standard deviation parameter {@code s}, the variance is {@code s^2}.</text>
    </javadoc>
    <method type="double" name="getNumericalVariance" startLine="213" endLine="216">
      <declaration type="double" name="s" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}The lower bound of the support is always negative infinity
 * no matter the parameters.</text>
      <return>lower bound of the support (always{@code Double.NEGATIVE_INFINITY})</return>
    </javadoc>
    <method type="double" name="getSupportLowerBound" startLine="227" endLine="229" />
    <javadoc>
      <text>* {@inheritDoc}The upper bound of the support is always positive infinity
 * no matter the parameters.</text>
      <return>upper bound of the support (always{@code Double.POSITIVE_INFINITY})</return>
    </javadoc>
    <method type="double" name="getSupportUpperBound" startLine="240" endLine="242" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isSupportLowerBoundInclusive" startLine="245" endLine="247" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isSupportUpperBoundInclusive" startLine="250" endLine="252" />
    <javadoc>
      <text>* {@inheritDoc}The support of this distribution is connected.</text>
      <return>{@code true}</return>
    </javadoc>
    <method type="boolean" name="isSupportConnected" startLine="261" endLine="263" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="sample" startLine="267" endLine="269" />
  </class>
</source>
