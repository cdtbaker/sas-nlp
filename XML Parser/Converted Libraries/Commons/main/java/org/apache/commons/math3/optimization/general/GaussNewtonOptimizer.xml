<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.general">
  <import name="org.apache.commons.math3.exception.ConvergenceException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.MathInternalError" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.linear.ArrayRealVector" />
  <import name="org.apache.commons.math3.linear.BlockRealMatrix" />
  <import name="org.apache.commons.math3.linear.DecompositionSolver" />
  <import name="org.apache.commons.math3.linear.LUDecomposition" />
  <import name="org.apache.commons.math3.linear.QRDecomposition" />
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <import name="org.apache.commons.math3.linear.SingularMatrixException" />
  <import name="org.apache.commons.math3.optimization.ConvergenceChecker" />
  <import name="org.apache.commons.math3.optimization.SimpleVectorValueChecker" />
  <import name="org.apache.commons.math3.optimization.PointVectorValuePair" />
  <class name="GaussNewtonOptimizer" extends="AbstractLeastSquaresOptimizer" startLine="35">
    <javadoc>
      <text>* Gauss-Newton least-squares solver.
 * <p>
 * This class solve a least-square problem by solving the normal equations
 * of the linearized problem at each iteration. Either LU decomposition or
 * QR decomposition can be used to solve the normal equations. LU decomposition
 * is faster but QR decomposition is more robust for difficult problems.
 * </p></text>
      <version>$Id: GaussNewtonOptimizer.java 1423687 2012-12-18 21:56:18Z erans $</version>
      <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Indicator for using LU decomposition.</text>
    </javadoc>
    <declaration type="boolean" name="useLU" />
    <javadoc>
      <text>* Simple constructor with default settings.
 * The normal equations will be solved using LU decomposition and the
 * convergence check is set to a {@link SimpleVectorValueChecker}with default tolerances.</text>
      <deprecated>See {@link SimpleVectorValueChecker#SimpleVectorValueChecker()}</deprecated>
    </javadoc>
    <method type="constructor" name="GaussNewtonOptimizer" startLine="62" endLine="64" />
    <javadoc>
      <text>* Simple constructor with default settings.
 * The normal equations will be solved using LU decomposition.</text>
      <param>checker Convergence checker.</param>
    </javadoc>
    <method type="constructor" name="GaussNewtonOptimizer" startLine="72" endLine="74" />
    <javadoc>
      <text>* Simple constructor with default settings.
 * The convergence check is set to a {@link SimpleVectorValueChecker}with default tolerances.</text>
      <param>useLU If {@code true}, the normal equations will be solved
 * using LU decomposition, otherwise they will be solved using QR
 * decomposition.</param>
      <deprecated>See {@link SimpleVectorValueChecker#SimpleVectorValueChecker()}</deprecated>
    </javadoc>
    <method type="constructor" name="GaussNewtonOptimizer" startLine="87" endLine="89" />
    <javadoc>
      <param>useLU If {@code true}, the normal equations will be solved
 * using LU decomposition, otherwise they will be solved using QR
 * decomposition.</param>
      <param>checker Convergence checker.</param>
    </javadoc>
    <method type="constructor" name="GaussNewtonOptimizer" startLine="98" endLine="101" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="PointVectorValuePair" name="doOptimize" startLine="105" endLine="194">
      <declaration type="ConvergenceChecker<PointVectorValuePair>" name="checker" />
      <scope startLine="110" endLine="112" />
      <declaration type="double[]" name="targetValues" />
      <declaration type="int" name="nR" />
      <declaration type="RealMatrix" name="weightMatrix" />
      <declaration type="double[]" name="residualsWeights" />
      <scope startLine="120" endLine="122" />
      <declaration type="double[]" name="currentPoint" />
      <declaration type="int" name="nC" />
      <declaration type="PointVectorValuePair" name="current" />
      <declaration type="int" name="iter" />
      <scope startLine="130" endLine="191">
        <declaration type="PointVectorValuePair" name="previous" />
        <declaration type="double[]" name="currentObjective" />
        <declaration type="double[]" name="currentResiduals" />
        <declaration type="RealMatrix" name="weightedJacobian" />
        <declaration type="double[]" name="b" />
        <declaration type="double[][]" name="a" />
        <scope startLine="144" endLine="164">
          <declaration type="double[]" name="grad" />
          <declaration type="double" name="weight" />
          <declaration type="double" name="residual" />
          <declaration type="double" name="wr" />
          <scope startLine="152" endLine="154" />
          <scope startLine="157" endLine="163">
            <declaration type="double[]" name="ak" />
            <declaration type="double" name="wgk" />
            <scope startLine="160" endLine="162" />
          </scope>
        </scope>
        <scope startLine="166" endLine="177">
          <declaration type="RealMatrix" name="mA" />
          <declaration type="DecompositionSolver" name="solver" />
          <declaration type="double[]" name="dX" />
          <scope startLine="174" endLine="176" />
        </scope>
        <scope startLine="177" endLine="179" />
        <scope startLine="182" endLine="190">
          <scope startLine="184" endLine="189" />
        </scope>
        <comment>evaluate the objective function and its jacobian</comment>
        <comment>Value of the objective function at "currentPoint".</comment>
        <comment>build the linear problem</comment>
        <comment>compute the normal equation</comment>
        <comment>build the contribution matrix for measurement i</comment>
        <comment>solve the linearized least squares problem</comment>
        <comment>update the estimated parameters</comment>
        <comment>Check convergence.</comment>
        <comment>Update (deprecated) "point" field.</comment>
      </scope>
      <comment>Computation will be useless without a checker (see "for-loop").</comment>
      <comment>Number of observed data.</comment>
      <comment>Diagonal of the weight matrix.</comment>
      <comment>iterate until convergence is reached</comment>
      <comment>Must never happen.</comment>
    </method>
  </class>
</source>
