<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode.nonstiff">
  <import name="org.apache.commons.math3.ode.sampling.StepInterpolator" />
  <class name="MidpointStepInterpolator" extends="RungeKuttaStepInterpolator" startLine="22">
    <javadoc>
      <text>* This class implements a step interpolator for second order
 * Runge-Kutta integrator.
 * <p>This interpolator computes dense output inside the last
 * step computed. The interpolation equation is consistent with the
 * integration scheme :
 * <ul>
 * <li>Using reference point at step start:<br>
 * y(t<sub>n</sub> + &theta; h) = y (t<sub>n</sub>) + &theta; h [(1 - &theta;) y'<sub>1</sub> + &theta; y'<sub>2</sub>]
 * </li>
 * <li>Using reference point at step end:<br>
 * y(t<sub>n</sub> + &theta; h) = y (t<sub>n</sub> + h) + (1-&theta;) h [&theta; y'<sub>1</sub> - (1+&theta;) y'<sub>2</sub>]
 * </li>
 * </ul>
 * </p>
 * where &theta; belongs to [0 ; 1] and where y'<sub>1</sub> and y'<sub>2</sub> are the two
 * evaluations of the derivatives already computed during the
 * step.</p></text>
      <see>MidpointIntegrator</see>
      <version>$Id: MidpointStepInterpolator.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>1.2</since>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Simple constructor.
 * This constructor builds an instance that is not usable yet, the{@link org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#reinitialize}method should be called before using the instance in order to
 * initialize the internal arrays. This constructor is used only
 * in order to delay the initialization in some cases. The {@link RungeKuttaIntegrator} class uses the prototyping design pattern
 * to create the step interpolators by cloning an uninitialized model
 * and later initializing the copy.</text>
    </javadoc>
    <method type="constructor" name="MidpointStepInterpolator" startLine="65" endLine="66" />
    <javadoc>
      <text>* Copy constructor.</text>
      <param>interpolator interpolator to copy from. The copy is a deep
 * copy: its arrays are separated from the original arrays of the
 * instance</param>
    </javadoc>
    <method type="constructor" name="MidpointStepInterpolator" startLine="73" endLine="75" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="StepInterpolator" name="doCopy" startLine="79" endLine="81" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="computeInterpolatedStateAndDerivatives" startLine="87" endLine="112">
      <declaration type="double" name="coeffDot2" />
      <declaration type="double" name="coeffDot1" />
      <scope startLine="92" endLine="101">
        <declaration type="double" name="coeff1" />
        <declaration type="double" name="coeff2" />
        <scope startLine="95" endLine="100">
          <declaration type="double" name="yDot1" />
          <declaration type="double" name="yDot2" />
        </scope>
      </scope>
      <scope startLine="101" endLine="110">
        <declaration type="double" name="coeff1" />
        <declaration type="double" name="coeff2" />
        <scope startLine="104" endLine="109">
          <declaration type="double" name="yDot1" />
          <declaration type="double" name="yDot2" />
        </scope>
      </scope>
    </method>
  </class>
</source>
