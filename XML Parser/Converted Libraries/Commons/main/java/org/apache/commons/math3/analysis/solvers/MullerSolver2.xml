<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.solvers">
  <import name="org.apache.commons.math3.exception.NoBracketingException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="MullerSolver2" extends="AbstractUnivariateSolver" startLine="24">
    <javadoc>
      <text>* This class implements the <a href="http://mathworld.wolfram.com/MullersMethod.html">
 * Muller's Method</a> for root finding of real univariate functions. For
 * reference, see <b>Elementary Numerical Analysis</b>, ISBN 0070124477,
 * chapter 3.
 * <p>
 * Muller's method applies to both real and complex functions, but here we
 * restrict ourselves to real functions.
 * This class differs from {@link MullerSolver} in the way it avoids complex
 * operations.</p>
 * Except for the initial [min, max], it does not require bracketing
 * condition, e.g. f(x0), f(x1), f(x2) can have the same sign. If complex
 * number arises in the computation, we simply use its modulus as real
 * approximation.</p>
 * <p>
 * Because the interval may not be bracketing, bisection alternative is
 * not applicable here. However in practice our treatment usually works
 * well, especially near real zeroes where the imaginary part of complex
 * approximation is often negligible.</p>
 * <p>
 * The formulas here do not use divided differences directly.</p></text>
      <version>$Id: MullerSolver2.java 1379560 2012-08-31 19:40:30Z erans $</version>
      <since>1.2</since>
      <see>MullerSolver</see>
    </javadoc>
    <javadoc>
      <text>* Default absolute accuracy.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_ABSOLUTE_ACCURACY" />
    <javadoc>
      <text>* Construct a solver with default accuracy (1e-6).</text>
    </javadoc>
    <method type="constructor" name="MullerSolver2" startLine="58" endLine="60" />
    <javadoc>
      <text>* Construct a solver.</text>
      <param>absoluteAccuracy Absolute accuracy.</param>
    </javadoc>
    <method type="constructor" name="MullerSolver2" startLine="66" endLine="68" />
    <javadoc>
      <text>* Construct a solver.</text>
      <param>relativeAccuracy Relative accuracy.</param>
      <param>absoluteAccuracy Absolute accuracy.</param>
    </javadoc>
    <method type="constructor" name="MullerSolver2" startLine="76" endLine="78" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="doSolve" startLine="87" endLine="168">
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
      <declaration type="double" name="relativeAccuracy" />
      <declaration type="double" name="absoluteAccuracy" />
      <declaration type="double" name="functionValueAccuracy" />
      <declaration type="double" name="x0" />
      <declaration type="double" name="y0" />
      <scope startLine="103" endLine="105" />
      <declaration type="double" name="x1" />
      <declaration type="double" name="y1" />
      <scope startLine="108" endLine="110" />
      <scope startLine="112" endLine="114" />
      <declaration type="double" name="x2" />
      <declaration type="double" name="y2" />
      <declaration type="double" name="oldx" />
      <scope startLine="120" endLine="167">
        <declaration type="double" name="q" />
        <declaration type="double" name="a" />
        <declaration type="double" name="b" />
        <declaration type="double" name="c" />
        <declaration type="double" name="delta" />
        <declaration type="double" name="x" />
        <declaration type="double" name="denominator" />
        <scope startLine="129" endLine="134">
          <declaration type="double" name="dplus" />
          <declaration type="double" name="dminus" />
        </scope>
        <scope startLine="134" endLine="137" />
        <scope startLine="138" endLine="145">
          <scope startLine="142" endLine="144" />
        </scope>
        <scope startLine="145" endLine="149" />
        <declaration type="double" name="y" />
        <declaration type="double" name="tolerance" />
        <scope startLine="155" endLine="157" />
        <comment>quadratic interpolation through x0, x1, x2</comment>
        <comment>choose a denominator larger in magnitude</comment>
        <comment>take the modulus of (B +/- FastMath.sqrt(delta))</comment>
        <comment>perturb x if it exactly coincides with x1 or x2</comment>
        <comment>the equality tests here are intentional</comment>
        <comment>extremely rare case, get a random number to skip it</comment>
        <comment>check for convergence</comment>
        <comment>prepare the next iteration</comment>
      </scope>
      <comment>x2 is the last root approximation</comment>
      <comment>x is the new approximation and new x2 for next round</comment>
      <comment>x0 < x1 < x2 does not hold here</comment>
    </method>
  </class>
</source>
