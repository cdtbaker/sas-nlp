<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization">
  <import name="java.util.Arrays" />
  <import name="java.util.Comparator" />
  <import name="org.apache.commons.math3.analysis.MultivariateVectorFunction" />
  <import name="org.apache.commons.math3.exception.ConvergenceException" />
  <import name="org.apache.commons.math3.exception.MathIllegalStateException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.random.RandomVectorGenerator" />
  <class name="BaseMultivariateVectorMultiStartOptimizer" startLine="31">
    <implements name="BaseMultivariateVectorOptimizer<FUNC>" />
    <javadoc>
      <text>* Base class for all implementations of a multi-start optimizer.
 * This interface is mainly intended to enforce the internal coherence of
 * Commons-Math. Users of the API are advised to base their code on{@link DifferentiableMultivariateVectorMultiStartOptimizer}.</text>
      <param><FUNC>
 *  Type of the objective function to be optimized.</param>
      <version>$Id: BaseMultivariateVectorMultiStartOptimizer.java 1422230 2012-12-15 12:11:13Z erans $</version>
      <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Underlying classical optimizer.</text>
    </javadoc>
    <declaration type="BaseMultivariateVectorOptimizer<FUNC>" name="optimizer" />
    <javadoc>
      <text>* Maximal number of evaluations allowed.</text>
    </javadoc>
    <declaration type="int" name="maxEvaluations" />
    <javadoc>
      <text>* Number of evaluations already performed for all starts.</text>
    </javadoc>
    <declaration type="int" name="totalEvaluations" />
    <javadoc>
      <text>* Number of starts to go.</text>
    </javadoc>
    <declaration type="int" name="starts" />
    <javadoc>
      <text>* Random generator for multi-start.</text>
    </javadoc>
    <declaration type="RandomVectorGenerator" name="generator" />
    <javadoc>
      <text>* Found optima.</text>
    </javadoc>
    <declaration type="PointVectorValuePair[]" name="optima" />
    <javadoc>
      <text>* Create a multi-start optimizer from a single-start optimizer.</text>
      <param>optimizer Single-start optimizer to wrap.</param>
      <param>starts Number of starts to perform. If {@code starts == 1},
 * the {@link #optimize(int,MultivariateVectorFunction,double[],double[],double[])optimize} will return the same solution as {@code optimizer} would.</param>
      <param>generator Random vector generator to use for restarts.</param>
      <throws>NullArgumentException if {@code optimizer} or {@code generator}is {@code null}.</throws>
      <throws>NotStrictlyPositiveException if {@code starts < 1}.</throws>
    </javadoc>
    <method type="constructor" name="BaseMultivariateVectorMultiStartOptimizer" startLine="74" endLine="86">
      <scope startLine="76" endLine="78" />
      <scope startLine="79" endLine="81" />
    </method>
    <javadoc>
      <text>* Get all the optima found during the last call to {@link #optimize(int,MultivariateVectorFunction,double[],double[],double[]) optimize}.
 * The optimizer stores all the optima found during a set of
 * restarts. The {@link #optimize(int,MultivariateVectorFunction,double[],double[],double[])optimize} method returns the best point only. This method
 * returns all the points found at the end of each starts, including
 * the best one already returned by the {@link #optimize(int,MultivariateVectorFunction,double[],double[],double[]) optimize} method.
 * <br/>
 * The returned array as one element for each start as specified
 * in the constructor. It is ordered with the results from the
 * runs that did converge first, sorted from best to worst
 * objective value (i.e. in ascending order if minimizing and in
 * descending order if maximizing), followed by and null elements
 * corresponding to the runs that did not converge. This means all
 * elements will be null if the {@link #optimize(int,MultivariateVectorFunction,double[],double[],double[]) optimize} method did
 * throw a {@link ConvergenceException}). This also means that if
 * the first element is not {@code null}, it is the best point found
 * across all starts.</text>
      <return>array containing the optima</return>
      <throws>MathIllegalStateException if {@link #optimize(int,MultivariateVectorFunction,double[],double[],double[]) optimize} has not been
 * called.</throws>
    </javadoc>
    <method type="PointVectorValuePair[]" name="getOptima" startLine="115" endLine="120">
      <scope startLine="116" endLine="118" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getMaxEvaluations" startLine="123" endLine="125" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getEvaluations" startLine="128" endLine="130" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="ConvergenceChecker<PointVectorValuePair>" name="getConvergenceChecker" startLine="133" endLine="135" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="PointVectorValuePair" name="optimize" startLine="142" endLine="174">
      <declaration type="RuntimeException" name="lastException" />
      <scope startLine="149" endLine="164">
        <scope startLine="152" endLine="155" />
        <scope startLine="155" endLine="157" />
        <scope startLine="157" endLine="160" />
        <comment>CHECKSTYLE: stop IllegalCatch</comment>
        <comment>CHECKSTYLE: resume IllegalCatch</comment>
      </scope>
      <scope startLine="168" endLine="170">
        <comment>cannot be null if starts >=1</comment>
      </scope>
      <comment>Multi-start loop.</comment>
      <comment>Return the found point given the best objective function value.</comment>
    </method>
    <javadoc>
      <text>* Sort the optima from best to worst, followed by {@code null} elements.</text>
      <param>target Target value for the objective functions at optimum.</param>
      <param>weights Weights for the least-squares cost computation.</param>
    </javadoc>
    <method type="void" name="sortPairs" startLine="183" endLine="204">
      <method type="int" name="compare" startLine="186" endLine="193">
        <scope startLine="187" endLine="189" />
        <scope startLine="189" endLine="191" />
      </method>
      <method type="double" name="weightedResidual" startLine="194" endLine="202">
        <declaration type="double[]" name="value" />
        <declaration type="double" name="sum" />
        <scope startLine="197" endLine="200">
          <declaration type="double" name="ri" />
        </scope>
      </method>
    </method>
  </class>
</source>
