<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.random">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="BitsStreamGenerator" startLine="24">
    <implements name="RandomGenerator" />
    <implements name="Serializable" />
    <javadoc>
      <text>* Base class for random number generators that generates bits streams.</text>
      <version>$Id: BitsStreamGenerator.java 1454897 2013-03-10 19:02:54Z luc $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Next gaussian.</text>
    </javadoc>
    <declaration type="double" name="nextGaussian" />
    <javadoc>
      <text>* Creates a new random number generator.</text>
    </javadoc>
    <method type="constructor" name="BitsStreamGenerator" startLine="40" endLine="42" />
    <method name="setSeed" type="void" startLine="44" endLine="45" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method name="setSeed" type="void" startLine="47" endLine="48" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method name="setSeed" type="void" startLine="50" endLine="51" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method name="next" type="int" startLine="53" endLine="62" />
    <javadoc>
      <text>* Generate next pseudorandom number.
 * <p>This method is the core generation algorithm. It is used by all the
 * public generation methods for the various primitive types {@link #nextBoolean()}, {@link #nextBytes(byte[])}, {@link #nextDouble()},{@link #nextFloat()}, {@link #nextGaussian()}, {@link #nextInt()},{@link #next(int)} and {@link #nextLong()}.</p></text>
      <param>bits number of random bits to produce</param>
      <return>random bits generated</return>
    </javadoc>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="nextBoolean" startLine="65" endLine="67" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="nextBytes" startLine="70" endLine="86">
      <declaration type="int" name="i" />
      <declaration type="int" name="iEnd" />
      <scope startLine="73" endLine="80">
        <declaration type="int" name="random" />
      </scope>
      <declaration type="int" name="random" />
      <scope startLine="82" endLine="85" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="nextDouble" startLine="89" endLine="93">
      <declaration type="long" name="high" />
      <declaration type="int" name="low" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="float" name="nextFloat" startLine="96" endLine="98" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="nextGaussian" startLine="101" endLine="120">
      <declaration type="double" name="random" />
      <scope startLine="104" endLine="112">
        <declaration type="double" name="x" />
        <declaration type="double" name="y" />
        <declaration type="double" name="alpha" />
        <declaration type="double" name="r" />
        <comment>generate a new pair of gaussian numbers</comment>
      </scope>
      <scope startLine="112" endLine="116">
        <comment>use the second element of the pair already generated</comment>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="nextInt" startLine="123" endLine="125" />
    <javadoc>
      <text>* {@inheritDoc}<p>This default implementation is copied from Apache Harmony
 * java.util.Random (r929253).</p>
 * <p>Implementation notes: <ul>
 * <li>If n is a power of 2, this method returns{@code (int) ((n * (long) next(31)) >> 31)}.</li>
 * <li>If n is not a power of 2, what is returned is {@code next(31) % n}with {@code next(31)} values rejected (i.e. regenerated) until a
 * value that is larger than the remainder of {@code Integer.MAX_VALUE / n}is generated. Rejection of this initial segment is necessary to ensure
 * a uniform distribution.</li></ul></p></text>
    </javadoc>
    <method type="int" name="nextInt" startLine="142" endLine="156">
      <scope startLine="143" endLine="154">
        <scope startLine="144" endLine="146" />
        <declaration type="int" name="bits" />
        <declaration type="int" name="val" />
        <scope startLine="149" endLine="152" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="long" name="nextLong" startLine="159" endLine="163">
      <declaration type="long" name="high" />
      <declaration type="long" name="low" />
    </method>
    <javadoc>
      <text>* Returns a pseudorandom, uniformly distributed <tt>long</tt> value
 * between 0 (inclusive) and the specified value (exclusive), drawn from
 * this random number generator's sequence.</text>
      <param>n the bound on the random number to be returned.  Must be
 * positive.</param>
      <return>a pseudorandom, uniformly distributed <tt>long</tt>
 * value between 0 (inclusive) and n (exclusive).</return>
      <throws>IllegalArgumentException  if n is not positive.</throws>
    </javadoc>
    <method type="long" name="nextLong" startLine="176" endLine="188">
      <scope startLine="177" endLine="186">
        <declaration type="long" name="bits" />
        <declaration type="long" name="val" />
        <scope startLine="180" endLine="184" />
      </scope>
    </method>
    <javadoc>
      <text>* Clears the cache used by the default implementation of{@link #nextGaussian}.</text>
    </javadoc>
    <method type="void" name="clear" startLine="194" endLine="196" />
  </class>
</source>
