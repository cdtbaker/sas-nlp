<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.genetics">
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <class name="UniformCrossover" startLine="28">
    <implements name="CrossoverPolicy" />
    <javadoc>
      <text>* Perform Uniform Crossover [UX] on the specified chromosomes. A fixed mixing
 * ratio is used to combine genes from the first and second parents, e.g. using a
 * ratio of 0.5 would result in approximately 50% of genes coming from each
 * parent. This is typically a poor method of crossover, but empirical evidence
 * suggests that it is more exploratory and results in a larger part of the
 * problem space being searched.
 * <p>
 * This crossover policy evaluates each gene of the parent chromosomes by chosing a
 * uniform random number {@code p} in the range [0, 1]. If {@code p} &lt; {@code ratio},
 * the parent genes are swapped. This means with a ratio of 0.7, 30% of the genes from the
 * first parent and 70% from the second parent will be selected for the first offspring (and
 * vice versa for the second offspring).
 * <p>
 * This policy works only on {@link AbstractListChromosome}, and therefore it
 * is parameterized by T. Moreover, the chromosomes must have same lengths.</text>
      <see><a href="http://en.wikipedia.org/wiki/Crossover_%28genetic_algorithm%29">Crossover techniques (Wikipedia)</a></see>
      <see><a href="http://www.obitko.com/tutorials/genetic-algorithms/crossover-mutation.php">Crossover (Obitko.com)</a></see>
      <see><a href="http://www.tomaszgwiazda.com/uniformX.htm">Uniform crossover</a></see>
      <param><T>
 *  generic type of the {@link AbstractListChromosome}s for crossover</param>
      <since>3.1</since>
      <version>$Id: UniformCrossover.java 1385297 2012-09-16 16:05:57Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* The mixing ratio.</text>
    </javadoc>
    <declaration type="double" name="ratio" />
    <javadoc>
      <text>* Creates a new {@link UniformCrossover} policy using the given mixing ratio.</text>
      <param>ratio the mixing ratio</param>
      <throws>OutOfRangeException if the mixing ratio is outside the [0, 1] range</throws>
    </javadoc>
    <method type="constructor" name="UniformCrossover" startLine="63" endLine="68">
      <scope startLine="64" endLine="66" />
    </method>
    <javadoc>
      <text>* Returns the mixing ratio used by this {@link CrossoverPolicy}.</text>
      <return>the mixing ratio</return>
    </javadoc>
    <method type="double" name="getRatio" startLine="75" endLine="77" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <throws>MathIllegalArgumentException iff one of the chromosomes is
 * not an instance of {@link AbstractListChromosome}</throws>
      <throws>DimensionMismatchException if the length of the two chromosomes is different</throws>
    </javadoc>
    <method type="ChromosomePair" name="crossover" startLine="88" endLine="94">
      <scope startLine="90" endLine="92" />
    </method>
    <javadoc>
      <text>* Helper for {@link #crossover(Chromosome,Chromosome)}. Performs the actual crossover.</text>
      <param>first the first chromosome</param>
      <param>second the second chromosome</param>
      <return>the pair of new chromosomes that resulted from the crossover</return>
      <throws>DimensionMismatchException if the length of the two chromosomes is different</throws>
    </javadoc>
    <method type="ChromosomePair" name="mate" startLine="105" endLine="134">
      <declaration type="int" name="length" />
      <scope startLine="107" endLine="109" />
      <declaration type="List<T>" name="parent1Rep" />
      <declaration type="List<T>" name="parent2Rep" />
      <declaration type="List<T>" name="child1Rep" />
      <declaration type="List<T>" name="child2Rep" />
      <declaration type="RandomGenerator" name="random" />
      <scope startLine="120" endLine="130">
        <scope startLine="122" endLine="126" />
        <scope startLine="126" endLine="129" />
        <comment>swap the bits -> take other parent</comment>
      </scope>
      <comment>array representations of the parents</comment>
      <comment>and of the children</comment>
    </method>
  </class>
</source>
