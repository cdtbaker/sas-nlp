<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.util">
  <import name="java.io.Serializable" />
  <import name="java.math.BigDecimal" />
  <import name="java.math.BigInteger" />
  <import name="java.math.MathContext" />
  <import name="java.math.RoundingMode" />
  <import name="org.apache.commons.math3.Field" />
  <import name="org.apache.commons.math3.FieldElement" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <class name="BigReal" startLine="31">
    <implements name="FieldElement<BigReal>" />
    <implements name="Comparable<BigReal>" />
    <implements name="Serializable" />
    <javadoc>
      <text>* Arbitrary precision decimal number.
 * <p>
 * This class is a simple wrapper around the standard <code>BigDecimal</code>
 * in order to implement the {@link FieldElement} interface.
 * </p></text>
      <since>2.0</since>
      <version>$Id: BigReal.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* A big real representing 0.</text>
    </javadoc>
    <declaration type="BigReal" name="ZERO" />
    <javadoc>
      <text>* A big real representing 1.</text>
    </javadoc>
    <declaration type="BigReal" name="ONE" />
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Underlying BigDecimal.</text>
    </javadoc>
    <declaration type="BigDecimal" name="d" />
    <javadoc>
      <text>* Rounding mode for divisions.</text>
    </javadoc>
    <declaration type="RoundingMode" name="roundingMode" />
    <javadoc>
      <text>* BigDecimal scale</text>
    </javadoc>
    <declaration type="int" name="scale" />
    <javadoc>
      <text>* Build an instance from a BigDecimal.</text>
      <param>val value of the instance</param>
    </javadoc>
    <method type="constructor" name="BigReal" startLine="63" endLine="65" />
    <javadoc>
      <text>* Build an instance from a BigInteger.</text>
      <param>val value of the instance</param>
    </javadoc>
    <method type="constructor" name="BigReal" startLine="70" endLine="72" />
    <javadoc>
      <text>* Build an instance from an unscaled BigInteger.</text>
      <param>unscaledVal unscaled value</param>
      <param>scale scale to use</param>
    </javadoc>
    <method type="constructor" name="BigReal" startLine="78" endLine="80" />
    <javadoc>
      <text>* Build an instance from an unscaled BigInteger.</text>
      <param>unscaledVal unscaled value</param>
      <param>scale scale to use</param>
      <param>mc to used</param>
    </javadoc>
    <method type="constructor" name="BigReal" startLine="87" endLine="89" />
    <javadoc>
      <text>* Build an instance from a BigInteger.</text>
      <param>val value of the instance</param>
      <param>mc context to use</param>
    </javadoc>
    <method type="constructor" name="BigReal" startLine="95" endLine="97" />
    <javadoc>
      <text>* Build an instance from a characters representation.</text>
      <param>in character representation of the value</param>
    </javadoc>
    <method type="constructor" name="BigReal" startLine="102" endLine="104" />
    <javadoc>
      <text>* Build an instance from a characters representation.</text>
      <param>in character representation of the value</param>
      <param>offset offset of the first character to analyze</param>
      <param>len length of the array slice to analyze</param>
    </javadoc>
    <method type="constructor" name="BigReal" startLine="111" endLine="113" />
    <javadoc>
      <text>* Build an instance from a characters representation.</text>
      <param>in character representation of the value</param>
      <param>offset offset of the first character to analyze</param>
      <param>len length of the array slice to analyze</param>
      <param>mc context to use</param>
    </javadoc>
    <method type="constructor" name="BigReal" startLine="121" endLine="123" />
    <javadoc>
      <text>* Build an instance from a characters representation.</text>
      <param>in character representation of the value</param>
      <param>mc context to use</param>
    </javadoc>
    <method type="constructor" name="BigReal" startLine="129" endLine="131" />
    <javadoc>
      <text>* Build an instance from a double.</text>
      <param>val value of the instance</param>
    </javadoc>
    <method type="constructor" name="BigReal" startLine="136" endLine="138" />
    <javadoc>
      <text>* Build an instance from a double.</text>
      <param>val value of the instance</param>
      <param>mc context to use</param>
    </javadoc>
    <method type="constructor" name="BigReal" startLine="144" endLine="146" />
    <javadoc>
      <text>* Build an instance from an int.</text>
      <param>val value of the instance</param>
    </javadoc>
    <method type="constructor" name="BigReal" startLine="151" endLine="153" />
    <javadoc>
      <text>* Build an instance from an int.</text>
      <param>val value of the instance</param>
      <param>mc context to use</param>
    </javadoc>
    <method type="constructor" name="BigReal" startLine="159" endLine="161" />
    <javadoc>
      <text>* Build an instance from a long.</text>
      <param>val value of the instance</param>
    </javadoc>
    <method type="constructor" name="BigReal" startLine="166" endLine="168" />
    <javadoc>
      <text>* Build an instance from a long.</text>
      <param>val value of the instance</param>
      <param>mc context to use</param>
    </javadoc>
    <method type="constructor" name="BigReal" startLine="174" endLine="176" />
    <javadoc>
      <text>* Build an instance from a String representation.</text>
      <param>val character representation of the value</param>
    </javadoc>
    <method type="constructor" name="BigReal" startLine="181" endLine="183" />
    <javadoc>
      <text>* Build an instance from a String representation.</text>
      <param>val character representation of the value</param>
      <param>mc context to use</param>
    </javadoc>
    <method type="constructor" name="BigReal" startLine="189" endLine="191" />
    <javadoc>
      <text>* Gets the rounding mode for division operations
 * The default is {@code RoundingMode.HALF_UP}</text>
      <return>the rounding mode.</return>
      <since>2.1</since>
    </javadoc>
    <method type="RoundingMode" name="getRoundingMode" startLine="199" endLine="201" />
    <javadoc>
      <text>* Sets the rounding mode for decimal divisions.</text>
      <param>roundingMode rounding mode for decimal divisions</param>
      <since>2.1</since>
    </javadoc>
    <method type="void" name="setRoundingMode" startLine="208" endLine="210" />
    <javadoc>
      <text>* Sets the scale for division operations.
 * The default is 64</text>
      <return>the scale</return>
      <since>2.1</since>
    </javadoc>
    <method type="int" name="getScale" startLine="218" endLine="220" />
    <javadoc>
      <text>* Sets the scale for division operations.</text>
      <param>scale scale for division operations</param>
      <since>2.1</since>
    </javadoc>
    <method type="void" name="setScale" startLine="227" endLine="229" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="BigReal" name="add" startLine="232" endLine="234" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="BigReal" name="subtract" startLine="237" endLine="239" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="BigReal" name="negate" startLine="242" endLine="244" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <throws>MathArithmeticException if {@code a} is zero</throws>
    </javadoc>
    <method type="BigReal" name="divide" startLine="251" endLine="258">
      <scope startLine="252" endLine="254" />
      <scope startLine="254" endLine="257">
        <comment>Division by zero has occured</comment>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <throws>MathArithmeticException if {@code this} is zero</throws>
    </javadoc>
    <method type="BigReal" name="reciprocal" startLine="265" endLine="272">
      <scope startLine="266" endLine="268" />
      <scope startLine="268" endLine="271">
        <comment>Division by zero has occured</comment>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="BigReal" name="multiply" startLine="275" endLine="277" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="BigReal" name="multiply" startLine="280" endLine="282" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="compareTo" startLine="285" endLine="287" />
    <javadoc>
      <text>* Get the double value corresponding to the instance.</text>
      <return>double value corresponding to the instance</return>
    </javadoc>
    <method type="double" name="doubleValue" startLine="292" endLine="294" />
    <javadoc>
      <text>* Get the BigDecimal value corresponding to the instance.</text>
      <return>BigDecimal value corresponding to the instance</return>
    </javadoc>
    <method type="BigDecimal" name="bigDecimalValue" startLine="299" endLine="301" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="equals" startLine="305" endLine="314">
      <scope startLine="306" endLine="308" />
      <scope startLine="310" endLine="312" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="hashCode" startLine="318" endLine="320" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Field<BigReal>" name="getField" startLine="323" endLine="325" />
  </class>
</source>
