<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.genetics">
  <import name="java.util.ArrayList" />
  <import name="java.util.Collections" />
  <import name="java.util.HashSet" />
  <import name="java.util.List" />
  <import name="java.util.Set" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="OrderedCrossover" startLine="31">
    <implements name="CrossoverPolicy" />
    <javadoc>
      <text>* Order 1 Crossover [OX1] builds offspring from <b>ordered</b> chromosomes by copying a
 * consecutive slice from one parent, and filling up the remaining genes from the other
 * parent as they appear.
 * <p>
 * This policy works by applying the following rules:
 * <ol>
 * <li>select a random slice of consecutive genes from parent 1</li>
 * <li>copy the slice to child 1 and mark out the genes in parent 2</li>
 * <li>starting from the right side of the slice, copy genes from parent 2 as they
 * appear to child 1 if they are not yet marked out.</li>
 * </ol>
 * <p>
 * Example (random sublist from index 3 to 7, underlined):
 * <pre>
 * p1 = (8 4 7 3 6 2 5 1 9 0)   X   c1 = (0 4 7 3 6 2 5 1 8 9)
 * ---------                        ---------
 * p2 = (0 1 2 3 4 5 6 7 8 9)   X   c2 = (8 1 2 3 4 5 6 7 9 0)
 * </pre>
 * <p>
 * This policy works only on {@link AbstractListChromosome}, and therefore it
 * is parameterized by T. Moreover, the chromosomes must have same lengths.</text>
      <see><a href="http://www.rubicite.com/Tutorials/GeneticAlgorithms/CrossoverOperators/Order1CrossoverOperator.aspx">
 * Order 1 Crossover Operator</a></see>
      <param><T>
 *  generic type of the {@link AbstractListChromosome}s for crossover</param>
      <since>3.1</since>
      <version>$Id: OrderedCrossover.java 1385297 2012-09-16 16:05:57Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <throws>MathIllegalArgumentException iff one of the chromosomes is
 * not an instance of {@link AbstractListChromosome}</throws>
      <throws>DimensionMismatchException if the length of the two chromosomes is different</throws>
    </javadoc>
    <method type="ChromosomePair" name="crossover" startLine="72" endLine="78">
      <scope startLine="74" endLine="76" />
    </method>
    <javadoc>
      <text>* Helper for {@link #crossover(Chromosome,Chromosome)}. Performs the actual crossover.</text>
      <param>first the first chromosome</param>
      <param>second the second chromosome</param>
      <return>the pair of new chromosomes that resulted from the crossover</return>
      <throws>DimensionMismatchException if the length of the two chromosomes is different</throws>
    </javadoc>
    <method type="ChromosomePair" name="mate" startLine="89" endLine="150">
      <declaration type="int" name="length" />
      <scope startLine="92" endLine="94" />
      <declaration type="List<T>" name="parent1Rep" />
      <declaration type="List<T>" name="parent2Rep" />
      <declaration type="List<T>" name="child1" />
      <declaration type="List<T>" name="child2" />
      <declaration type="Set<T>" name="child1Set" />
      <declaration type="Set<T>" name="child2Set" />
      <declaration type="RandomGenerator" name="random" />
      <declaration type="int" name="a" />
      <declaration type="int" name="b" />
      <scope startLine="110" endLine="112" />
      <declaration type="int" name="lb" />
      <declaration type="int" name="ub" />
      <scope startLine="124" endLine="142">
        <declaration type="int" name="idx" />
        <declaration type="T" name="item1" />
        <declaration type="T" name="item2" />
        <scope startLine="132" endLine="135" />
        <scope startLine="138" endLine="141" />
        <comment>retrieve the current item in each parent</comment>
        <comment>if the first child already contains the item in the second parent add it</comment>
        <comment>if the second child already contains the item in the first parent add it</comment>
      </scope>
      <comment>array representations of the parents</comment>
      <comment>and of the children</comment>
      <comment>sets of already inserted items for quick access</comment>
      <comment>choose random points, making sure that lb < ub.</comment>
      <comment>determine the lower and upper bounds</comment>
      <comment>add the subLists that are between lb and ub</comment>
      <comment>iterate over every item in the parents</comment>
      <comment>rotate so that the original slice is in the same place as in the parents.</comment>
    </method>
  </class>
</source>
