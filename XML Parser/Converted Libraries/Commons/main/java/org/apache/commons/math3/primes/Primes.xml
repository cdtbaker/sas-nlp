<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.primes">
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="java.util.List" />
  <class name="Primes" startLine="25">
    <javadoc>
      <text>* Methods related to prime numbers in the range of <code>int</code>:
 * <ul>
 * <li>primality test</li>
 * <li>prime number generation</li>
 * <li>factorization</li>
 * </ul></text>
      <version>$Id: Primes.java 1462702 2013-03-30 04:45:52Z psteitz $</version>
      <since>3.2</since>
    </javadoc>
    <javadoc>
      <text>* Hide utility class.</text>
    </javadoc>
    <method type="constructor" name="Primes" startLine="41" endLine="42" />
    <javadoc>
      <text>* Primality test: tells if the argument is a (provable) prime or not.
 * <p>
 * It uses the Miller-Rabin probabilistic test in such a way that a result is guaranteed:
 * it uses the firsts prime numbers as successive base (see Handbook of applied cryptography
 * by Menezes, table 4.1).</text>
      <param>n number to test.</param>
      <return>true if n is prime. (All numbers &lt; 2 return false).</return>
    </javadoc>
    <method type="boolean" name="isPrime" startLine="54" endLine="65">
      <scope startLine="55" endLine="57" />
      <scope startLine="59" endLine="63">
        <scope startLine="60" endLine="62" />
      </scope>
    </method>
    <javadoc>
      <text>* Return the smallest prime greater than or equal to n.</text>
      <param>n a positive number.</param>
      <return>the smallest prime greater than or equal to n.</return>
      <throws>MathIllegalArgumentException if n &lt; 0.</throws>
    </javadoc>
    <method type="int" name="nextPrime" startLine="74" endLine="109">
      <scope startLine="75" endLine="77" />
      <scope startLine="78" endLine="80" />
      <scope startLine="82" endLine="84" />
      <scope startLine="86" endLine="88" />
      <declaration type="int" name="rem" />
      <scope startLine="93" endLine="95">
        <comment>if n % 3 == 0</comment>
        <comment>n % 3 == 2</comment>
        <comment>if n % 3 == 1</comment>
      </scope>
      <scope startLine="95" endLine="98">
        <comment>if (isPrime(n)) return n;</comment>
        <comment>n % 3 == 2</comment>
      </scope>
      <scope startLine="99" endLine="108">
        <scope startLine="100" endLine="102" />
        <scope startLine="104" endLine="106" />
        <comment>this loop skips all multiple of 3</comment>
        <comment>n % 3 == 1</comment>
        <comment>n % 3 == 2</comment>
      </scope>
      <comment>make sure n is odd</comment>
      <comment>prepare entry in the +2, +4 loop:</comment>
      <comment>n should not be a multiple of 3</comment>
    </method>
    <javadoc>
      <text>* Prime factors decomposition</text>
      <param>n number to factorize: must be &ge; 2</param>
      <return>list of prime factors of n</return>
      <throws>MathIllegalArgumentException if n &lt; 2.</throws>
    </javadoc>
    <method type="List<Integer>" name="primeFactors" startLine="118" endLine="128">
      <scope startLine="120" endLine="122" />
      <comment>slower than trial div unless we do an awful lot of computation</comment>
      <comment>(then it finally gets JIT-compiled efficiently</comment>
      <comment>List<Integer> out = PollardRho.primeFactors(n);</comment>
    </method>
  </class>
</source>
