<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.geometry.euclidean.twod">
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D" />
  <import name="org.apache.commons.math3.geometry.euclidean.oned.Interval" />
  <import name="org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet" />
  <import name="org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint" />
  <import name="org.apache.commons.math3.geometry.euclidean.oned.Vector1D" />
  <import name="org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane" />
  <import name="org.apache.commons.math3.geometry.partitioning.BSPTree" />
  <import name="org.apache.commons.math3.geometry.partitioning.Hyperplane" />
  <import name="org.apache.commons.math3.geometry.partitioning.Region" />
  <import name="org.apache.commons.math3.geometry.partitioning.Region.Location" />
  <import name="org.apache.commons.math3.geometry.partitioning.Side" />
  <import name="org.apache.commons.math3.geometry.partitioning.SubHyperplane" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="SubLine" extends="AbstractSubHyperplane<Euclidean2D,Euclidean1D>" startLine="36">
    <javadoc>
      <text>* This class represents a sub-hyperplane for {@link Line}.</text>
      <version>$Id: SubLine.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Simple constructor.</text>
      <param>hyperplane underlying hyperplane</param>
      <param>remainingRegion remaining region of the hyperplane</param>
    </javadoc>
    <method type="constructor" name="SubLine" startLine="47" endLine="49" />
    <javadoc>
      <text>* Create a sub-line from two endpoints.</text>
      <param>start start point</param>
      <param>end end point</param>
    </javadoc>
    <method type="constructor" name="SubLine" startLine="55" endLine="57" />
    <javadoc>
      <text>* Create a sub-line from a segment.</text>
      <param>segment single segment forming the sub-line</param>
    </javadoc>
    <method type="constructor" name="SubLine" startLine="62" endLine="64" />
    <javadoc>
      <text>* Get the endpoints of the sub-line.
 * <p>
 * A subline may be any arbitrary number of disjoints segments, so the endpoints
 * are provided as a list of endpoint pairs. Each element of the list represents
 * one segment, and each segment contains a start point at index 0 and an end point
 * at index 1. If the sub-line is unbounded in the negative infinity direction,
 * the start point of the first segment will have infinite coordinates. If the
 * sub-line is unbounded in the positive infinity direction, the end point of the
 * last segment will have infinite coordinates. So a sub-line covering the whole
 * line will contain just one row and both elements of this row will have infinite
 * coordinates. If the sub-line is empty, the returned list will contain 0 segments.
 * </p></text>
      <return>list of segments endpoints</return>
    </javadoc>
    <method type="List<Segment>" name="getSegments" startLine="80" endLine="94">
      <declaration type="Line" name="line" />
      <declaration type="List<Interval>" name="list" />
      <declaration type="List<Segment>" name="segments" />
      <scope startLine="86" endLine="90">
        <declaration type="Vector2D" name="start" />
        <declaration type="Vector2D" name="end" />
      </scope>
    </method>
    <javadoc>
      <text>* Get the intersection of the instance and another sub-line.
 * <p>
 * This method is related to the {@link Line#intersection(Line)intersection} method in the {@link Line Line} class, but in addition
 * to compute the point along infinite lines, it also checks the point
 * lies on both sub-line ranges.
 * </p></text>
      <param>subLine other sub-line which may intersect instance</param>
      <param>includeEndPoints if true, endpoints are considered to belong to
 * instance (i.e. they are closed sets) and may be returned, otherwise endpoints
 * are considered to not belong to instance (i.e. they are open sets) and intersection
 * occurring on endpoints lead to null being returned</param>
      <return>the intersection point if there is one, null if the sub-lines don't intersect</return>
    </javadoc>
    <method type="Vector2D" name="intersection" startLine="110" endLine="131">
      <declaration type="Line" name="line1" />
      <declaration type="Line" name="line2" />
      <declaration type="Vector2D" name="v2D" />
      <declaration type="Location" name="loc1" />
      <declaration type="Location" name="loc2" />
      <scope startLine="125" endLine="127" />
      <scope startLine="127" endLine="129" />
      <comment>retrieve the underlying lines</comment>
      <comment>compute the intersection on infinite line</comment>
      <comment>check location of point with respect to first sub-line</comment>
      <comment>check location of point with respect to second sub-line</comment>
    </method>
    <javadoc>
      <text>* Build an interval set from two points.</text>
      <param>start start point</param>
      <param>end end point</param>
      <return>an interval set</return>
    </javadoc>
    <method type="IntervalsSet" name="buildIntervalSet" startLine="138" endLine="142">
      <declaration type="Line" name="line" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="AbstractSubHyperplane<Euclidean2D,Euclidean1D>" name="buildNew" startLine="147" endLine="149" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Side" name="side" startLine="153" endLine="170">
      <declaration type="Line" name="thisLine" />
      <declaration type="Line" name="otherLine" />
      <declaration type="Vector2D" name="crossing" />
      <scope startLine="159" endLine="163">
        <declaration type="double" name="global" />
        <comment>the lines are parallel,</comment>
      </scope>
      <declaration type="boolean" name="direct" />
      <declaration type="Vector1D" name="x" />
      <comment>the lines do intersect</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="SplitSubHyperplane<Euclidean2D>" name="split" startLine="174" endLine="207">
      <declaration type="Line" name="thisLine" />
      <declaration type="Line" name="otherLine" />
      <declaration type="Vector2D" name="crossing" />
      <scope startLine="180" endLine="186">
        <declaration type="double" name="global" />
        <comment>the lines are parallel</comment>
      </scope>
      <declaration type="boolean" name="direct" />
      <declaration type="Vector1D" name="x" />
      <declaration type="SubHyperplane<Euclidean1D>" name="subPlus" />
      <declaration type="SubHyperplane<Euclidean1D>" name="subMinus" />
      <declaration type="BSPTree<Euclidean1D>" name="splitTree" />
      <declaration type="BSPTree<Euclidean1D>" name="plusTree" />
      <declaration type="BSPTree<Euclidean1D>" name="minusTree" />
      <comment>the lines do intersect</comment>
    </method>
  </class>
</source>
