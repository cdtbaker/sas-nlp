<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode.sampling">
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.Precision" />
  <class name="StepNormalizer" startLine="24">
    <implements name="StepHandler" />
    <javadoc>
      <text>* This class wraps an object implementing {@link FixedStepHandler}into a {@link StepHandler}.
 * <p>This wrapper allows to use fixed step handlers with general
 * integrators which cannot guaranty their integration steps will
 * remain constant and therefore only accept general step
 * handlers.</p>
 * <p>The stepsize used is selected at construction time. The {@link FixedStepHandler#handleStep handleStep} method of the underlying{@link FixedStepHandler} object is called at normalized times. The
 * normalized times can be influenced by the {@link StepNormalizerMode} and{@link StepNormalizerBounds}.</p>
 * <p>There is no constraint on the integrator, it can use any time step
 * it needs (time steps longer or shorter than the fixed time step and
 * non-integer ratios are all allowed).</p>
 * <p>
 * <table border="1" align="center">
 * <tr BGCOLOR="#CCCCFF"><td colspan=6><font size="+2">Examples (step size = 0.5)</font></td></tr>
 * <tr BGCOLOR="#EEEEFF"><font size="+1"><td>Start time</td><td>End time</td>
 * <td>Direction</td><td>{@link StepNormalizerMode Mode}</td>
 * <td>{@link StepNormalizerBounds Bounds}</td><td>Output</td></font></tr>
 * <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#NEITHER NEITHER}</td><td>0.8, 1.3, 1.8, 2.3, 2.8</td></tr>
 * <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#FIRST FIRST}</td><td>0.3, 0.8, 1.3, 1.8, 2.3, 2.8</td></tr>
 * <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#LAST LAST}</td><td>0.8, 1.3, 1.8, 2.3, 2.8, 3.1</td></tr>
 * <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#BOTH BOTH}</td><td>0.3, 0.8, 1.3, 1.8, 2.3, 2.8, 3.1</td></tr>
 * <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#NEITHER NEITHER}</td><td>0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>
 * <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#FIRST FIRST}</td><td>0.3, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>
 * <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#LAST LAST}</td><td>0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.1</td></tr>
 * <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#BOTH BOTH}</td><td>0.3, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.1</td></tr>
 * <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#NEITHER NEITHER}</td><td>0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>
 * <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#FIRST FIRST}</td><td>0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>
 * <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#LAST LAST}</td><td>0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>
 * <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#BOTH BOTH}</td><td>0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>
 * <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#NEITHER NEITHER}</td><td>0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>
 * <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#FIRST FIRST}</td><td>0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>
 * <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#LAST LAST}</td><td>0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>
 * <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#BOTH BOTH}</td><td>0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>
 * <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#NEITHER NEITHER}</td><td>2.6, 2.1, 1.6, 1.1, 0.6</td></tr>
 * <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#FIRST FIRST}</td><td>3.1, 2.6, 2.1, 1.6, 1.1, 0.6</td></tr>
 * <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#LAST LAST}</td><td>2.6, 2.1, 1.6, 1.1, 0.6, 0.3</td></tr>
 * <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#BOTH BOTH}</td><td>3.1, 2.6, 2.1, 1.6, 1.1, 0.6, 0.3</td></tr>
 * <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#NEITHER NEITHER}</td><td>3.0, 2.5, 2.0, 1.5, 1.0, 0.5</td></tr>
 * <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#FIRST FIRST}</td><td>3.1, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5</td></tr>
 * <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#LAST LAST}</td><td>3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.3</td></tr>
 * <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#BOTH BOTH}</td><td>3.1, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.3</td></tr>
 * <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#NEITHER NEITHER}</td><td>2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>
 * <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#FIRST FIRST}</td><td>3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>
 * <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#LAST LAST}</td><td>2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>
 * <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link StepNormalizerMode#INCREMENT INCREMENT}</td><td>{@link StepNormalizerBounds#BOTH BOTH}</td><td>3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>
 * <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#NEITHER NEITHER}</td><td>2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>
 * <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#FIRST FIRST}</td><td>3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>
 * <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#LAST LAST}</td><td>2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>
 * <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link StepNormalizerMode#MULTIPLES MULTIPLES}</td><td>{@link StepNormalizerBounds#BOTH BOTH}</td><td>3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>
 * </table>
 * </p></text>
      <see>StepHandler</see>
      <see>FixedStepHandler</see>
      <see>StepNormalizerMode</see>
      <see>StepNormalizerBounds</see>
      <version>$Id: StepNormalizer.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>1.2</since>
    </javadoc>
    <javadoc>
      <text>* Fixed time step.</text>
    </javadoc>
    <declaration type="double" name="h" />
    <javadoc>
      <text>* Underlying step handler.</text>
    </javadoc>
    <declaration type="FixedStepHandler" name="handler" />
    <javadoc>
      <text>* First step time.</text>
    </javadoc>
    <declaration type="double" name="firstTime" />
    <javadoc>
      <text>* Last step time.</text>
    </javadoc>
    <declaration type="double" name="lastTime" />
    <javadoc>
      <text>* Last state vector.</text>
    </javadoc>
    <declaration type="double[]" name="lastState" />
    <javadoc>
      <text>* Last derivatives vector.</text>
    </javadoc>
    <declaration type="double[]" name="lastDerivatives" />
    <javadoc>
      <text>* Integration direction indicator.</text>
    </javadoc>
    <declaration type="boolean" name="forward" />
    <javadoc>
      <text>* The step normalizer bounds settings to use.</text>
    </javadoc>
    <declaration type="StepNormalizerBounds" name="bounds" />
    <javadoc>
      <text>* The step normalizer mode to use.</text>
    </javadoc>
    <declaration type="StepNormalizerMode" name="mode" />
    <javadoc>
      <text>* Simple constructor. Uses {@link StepNormalizerMode#INCREMENT INCREMENT}mode, and {@link StepNormalizerBounds#FIRST FIRST} bounds setting, for
 * backwards compatibility.</text>
      <param>h fixed time step (sign is not used)</param>
      <param>handler fixed time step handler to wrap</param>
    </javadoc>
    <method type="constructor" name="StepNormalizer" startLine="126" endLine="129" />
    <javadoc>
      <text>* Simple constructor. Uses {@link StepNormalizerBounds#FIRST FIRST}bounds setting.</text>
      <param>h fixed time step (sign is not used)</param>
      <param>handler fixed time step handler to wrap</param>
      <param>mode step normalizer mode to use</param>
      <since>3.0</since>
    </javadoc>
    <method type="constructor" name="StepNormalizer" startLine="139" endLine="141" />
    <javadoc>
      <text>* Simple constructor. Uses {@link StepNormalizerMode#INCREMENT INCREMENT}mode.</text>
      <param>h fixed time step (sign is not used)</param>
      <param>handler fixed time step handler to wrap</param>
      <param>bounds step normalizer bounds setting to use</param>
      <since>3.0</since>
    </javadoc>
    <method type="constructor" name="StepNormalizer" startLine="151" endLine="153" />
    <javadoc>
      <text>* Simple constructor.</text>
      <param>h fixed time step (sign is not used)</param>
      <param>handler fixed time step handler to wrap</param>
      <param>mode step normalizer mode to use</param>
      <param>bounds step normalizer bounds setting to use</param>
      <since>3.0</since>
    </javadoc>
    <method type="constructor" name="StepNormalizer" startLine="164" endLine="174" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="init" startLine="177" endLine="188">
      <comment>initialize the underlying handler</comment>
    </method>
    <javadoc>
      <text>* Handle the last accepted step</text>
      <param>interpolator interpolator for the last accepted step. For
 * efficiency purposes, the various integrators reuse the same
 * object on each call, so if the instance wants to keep it across
 * all calls (for example to provide at the end of the integration a
 * continuous model valid throughout the integration range), it
 * should build a local copy using the clone method and store this
 * copy.</param>
      <param>isLast true if the step is the last one</param>
      <exception>MaxCountExceededException if the interpolator throws one because
 * the number of functions evaluations is exceeded</exception>
    </javadoc>
    <method type="void" name="handleStep" startLine="204" endLine="255">
      <scope startLine="206" endLine="218">
        <scope startLine="215" endLine="217" />
        <comment>Take the integration direction into account.</comment>
      </scope>
      <declaration type="double" name="nextTime" />
      <scope startLine="225" endLine="227" />
      <declaration type="boolean" name="nextInStep" />
      <scope startLine="231" endLine="241">
        <comment>Output the stored previous step.</comment>
        <comment>Store the next step as last step.</comment>
        <comment>Move on to the next step.</comment>
      </scope>
      <scope startLine="243" endLine="254">
        <declaration type="boolean" name="addLast" />
        <scope startLine="250" endLine="253" />
        <comment>There will be no more steps. The stored one should be given to</comment>
        <comment>the handler. We may have to output one more step. Only the last</comment>
        <comment>one of those should be flagged as being the last.</comment>
      </scope>
      <comment>The first time, update the last state with the start information.</comment>
      <comment>Calculate next normalized step time.</comment>
      <comment>Process normalized steps as long as they are in the current step.</comment>
    </method>
    <javadoc>
      <text>* Returns a value indicating whether the next normalized time is in the
 * current step.</text>
      <param>nextTime the next normalized time</param>
      <param>interpolator interpolator for the last accepted step, to use to
 * get the end time of the current step</param>
      <return>value indicating whether the next normalized time is in the
 * current step</return>
    </javadoc>
    <method type="boolean" name="isNextInStep" startLine="267" endLine="271" />
    <javadoc>
      <text>* Invokes the underlying step handler for the current normalized step.</text>
      <param>isLast true if the step is the last one</param>
    </javadoc>
    <method type="void" name="doNormalizedStep" startLine="277" endLine="282">
      <scope startLine="278" endLine="280" />
    </method>
    <javadoc>
      <text>* Stores the interpolated information for the given time in the current
 * state.</text>
      <param>interpolator interpolator for the last accepted step, to use to
 * get the interpolated information</param>
      <param>t the time for which to store the interpolated information</param>
      <exception>MaxCountExceededException if the interpolator throws one because
 * the number of functions evaluations is exceeded</exception>
    </javadoc>
    <method type="void" name="storeStep" startLine="293" endLine="300" />
  </class>
</source>
