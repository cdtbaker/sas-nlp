<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.ranking">
  <import name="java.util.ArrayList" />
  <import name="java.util.Arrays" />
  <import name="java.util.Iterator" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.exception.MathInternalError" />
  <import name="org.apache.commons.math3.exception.NotANumberException" />
  <import name="org.apache.commons.math3.random.RandomDataGenerator" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="NaturalRanking" startLine="32">
    <implements name="RankingAlgorithm" />
    <javadoc>
      <text>* <p> Ranking based on the natural ordering on doubles.</p>
 * <p>NaNs are treated according to the configured {@link NaNStrategy} and ties
 * are handled using the selected {@link TiesStrategy}.
 * Configuration settings are supplied in optional constructor arguments.
 * Defaults are {@link NaNStrategy#FAILED} and {@link TiesStrategy#AVERAGE},
 * respectively. When using {@link TiesStrategy#RANDOM}, a{@link RandomGenerator} may be supplied as a constructor argument.</p>
 * <p>Examples:
 * <table border="1" cellpadding="3">
 * <tr><th colspan="3">
 * Input data: (20, 17, 30, 42.3, 17, 50, Double.NaN, Double.NEGATIVE_INFINITY, 17)
 * </th></tr>
 * <tr><th>NaNStrategy</th><th>TiesStrategy</th>
 * <th><code>rank(data)</code></th>
 * <tr>
 * <td>default (NaNs maximal)</td>
 * <td>default (ties averaged)</td>
 * <td>(5, 3, 6, 7, 3, 8, 9, 1, 3)</td></tr>
 * <tr>
 * <td>default (NaNs maximal)</td>
 * <td>MINIMUM</td>
 * <td>(5, 2, 6, 7, 2, 8, 9, 1, 2)</td></tr>
 * <tr>
 * <td>MINIMAL</td>
 * <td>default (ties averaged)</td>
 * <td>(6, 4, 7, 8, 4, 9, 1.5, 1.5, 4)</td></tr>
 * <tr>
 * <td>REMOVED</td>
 * <td>SEQUENTIAL</td>
 * <td>(5, 2, 6, 7, 3, 8, 1, 4)</td></tr>
 * <tr>
 * <td>MINIMAL</td>
 * <td>MAXIMUM</td>
 * <td>(6, 5, 7, 8, 5, 9, 2, 2, 5)</td></tr></table></p></text>
      <since>2.0</since>
      <version>$Id: NaturalRanking.java 1454897 2013-03-10 19:02:54Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* default NaN strategy</text>
    </javadoc>
    <declaration type="NaNStrategy" name="DEFAULT_NAN_STRATEGY" />
    <javadoc>
      <text>* default ties strategy</text>
    </javadoc>
    <declaration type="TiesStrategy" name="DEFAULT_TIES_STRATEGY" />
    <javadoc>
      <text>* NaN strategy - defaults to NaNs maximal</text>
    </javadoc>
    <declaration type="NaNStrategy" name="nanStrategy" />
    <javadoc>
      <text>* Ties strategy - defaults to ties averaged</text>
    </javadoc>
    <declaration type="TiesStrategy" name="tiesStrategy" />
    <javadoc>
      <text>* Source of random data - used only when ties strategy is RANDOM</text>
    </javadoc>
    <declaration type="RandomDataGenerator" name="randomData" />
    <javadoc>
      <text>* Create a NaturalRanking with default strategies for handling ties and NaNs.</text>
    </javadoc>
    <method type="constructor" name="NaturalRanking" startLine="91" endLine="96" />
    <javadoc>
      <text>* Create a NaturalRanking with the given TiesStrategy.</text>
      <param>tiesStrategy the TiesStrategy to use</param>
    </javadoc>
    <method type="constructor" name="NaturalRanking" startLine="103" endLine="108" />
    <javadoc>
      <text>* Create a NaturalRanking with the given NaNStrategy.</text>
      <param>nanStrategy the NaNStrategy to use</param>
    </javadoc>
    <method type="constructor" name="NaturalRanking" startLine="115" endLine="120" />
    <javadoc>
      <text>* Create a NaturalRanking with the given NaNStrategy and TiesStrategy.</text>
      <param>nanStrategy NaNStrategy to use</param>
      <param>tiesStrategy TiesStrategy to use</param>
    </javadoc>
    <method type="constructor" name="NaturalRanking" startLine="128" endLine="133" />
    <javadoc>
      <text>* Create a NaturalRanking with TiesStrategy.RANDOM and the given
 * RandomGenerator as the source of random data.</text>
      <param>randomGenerator source of random data</param>
    </javadoc>
    <method type="constructor" name="NaturalRanking" startLine="141" endLine="146" />
    <javadoc>
      <text>* Create a NaturalRanking with the given NaNStrategy, TiesStrategy.RANDOM
 * and the given source of random data.</text>
      <param>nanStrategy NaNStrategy to use</param>
      <param>randomGenerator source of random data</param>
    </javadoc>
    <method type="constructor" name="NaturalRanking" startLine="157" endLine="162" />
    <javadoc>
      <text>* Return the NaNStrategy</text>
      <return>returns the NaNStrategy</return>
    </javadoc>
    <method type="NaNStrategy" name="getNanStrategy" startLine="169" endLine="171" />
    <javadoc>
      <text>* Return the TiesStrategy</text>
      <return>the TiesStrategy</return>
    </javadoc>
    <method type="TiesStrategy" name="getTiesStrategy" startLine="178" endLine="180" />
    <javadoc>
      <text>* Rank <code>data</code> using the natural ordering on Doubles, with
 * NaN values handled according to <code>nanStrategy</code> and ties
 * resolved using <code>tiesStrategy.</code></text>
      <param>data array to be ranked</param>
      <return>array of ranks</return>
      <throws>NotANumberException if the selected {@link NaNStrategy} is {@code FAILED}and a {@link Double#NaN} is encountered in the input data</throws>
    </javadoc>
    <method type="double[]" name="rank" startLine="192" endLine="257">
      <declaration type="IntDoublePair[]" name="ranks" />
      <scope startLine="196" endLine="198" />
      <declaration type="List<Integer>" name="nanPositions" />
      <scope startLine="217" endLine="219" />
      <declaration type="double[]" name="out" />
      <declaration type="int" name="pos" />
      <declaration type="List<Integer>" name="tiesTrace" />
      <scope startLine="235" endLine="249">
        <scope startLine="236" endLine="244">
          <scope startLine="239" endLine="241" />
        </scope>
        <scope startLine="244" endLine="247" />
        <comment>tie sequence has ended (or had length 1)</comment>
        <comment>if seq is nontrivial, resolve</comment>
        <comment>tie sequence continues</comment>
      </scope>
      <scope startLine="250" endLine="252">
        <comment>handle tie sequence at end</comment>
      </scope>
      <scope startLine="253" endLine="255" />
      <comment>Array recording initial positions of data to be ranked</comment>
      <comment>Recode, remove or record positions of NaNs</comment>
      <comment>Replace NaNs with +INFs</comment>
      <comment>Replace NaNs with -INFs</comment>
      <comment>Drop NaNs from data</comment>
      <comment>Record positions of NaNs</comment>
      <comment>this should not happen unless NaNStrategy enum is changed</comment>
      <comment>Sort the IntDoublePairs</comment>
      <comment>Walk the sorted array, filling output array using sorted positions,</comment>
      <comment>resolving ties as we go</comment>
      <comment>position in sorted array</comment>
    </method>
    <javadoc>
      <text>* Returns an array that is a copy of the input array with IntDoublePairs
 * having NaN values removed.</text>
      <param>ranks input array</param>
      <return>array with NaN-valued entries removed</return>
    </javadoc>
    <method type="IntDoublePair[]" name="removeNaNs" startLine="266" endLine="288">
      <scope startLine="267" endLine="269" />
      <declaration type="IntDoublePair[]" name="outRanks" />
      <declaration type="int" name="j" />
      <scope startLine="272" endLine="284">
        <scope startLine="273" endLine="279">
          <scope startLine="275" endLine="278" />
        </scope>
        <scope startLine="279" endLine="283" />
        <comment>drop, but adjust original ranks of later elements</comment>
      </scope>
      <declaration type="IntDoublePair[]" name="returnRanks" />
    </method>
    <javadoc>
      <text>* Recodes NaN values to the given value.</text>
      <param>ranks array to recode</param>
      <param>value the value to replace NaNs with</param>
    </javadoc>
    <method type="void" name="recodeNaNs" startLine="296" endLine="303">
      <scope startLine="297" endLine="302">
        <scope startLine="298" endLine="301" />
      </scope>
    </method>
    <javadoc>
      <text>* Checks for presence of NaNs in <code>ranks.</code></text>
      <param>ranks array to be searched for NaNs</param>
      <return>true iff ranks contains one or more NaNs</return>
    </javadoc>
    <method type="boolean" name="containsNaNs" startLine="311" endLine="318">
      <scope startLine="312" endLine="316">
        <scope startLine="313" endLine="315" />
      </scope>
    </method>
    <javadoc>
      <text>* Resolve a sequence of ties, using the configured {@link TiesStrategy}.
 * The input <code>ranks</code> array is expected to take the same value
 * for all indices in <code>tiesTrace</code>.  The common value is recoded
 * according to the tiesStrategy. For example, if ranks = <5,8,2,6,2,7,1,2>,
 * tiesTrace = <2,4,7> and tiesStrategy is MINIMUM, ranks will be unchanged.
 * The same array and trace with tiesStrategy AVERAGE will come out
 * <5,8,3,6,3,7,1,3>.</text>
      <param>ranks array of ranks</param>
      <param>tiesTrace list of indices where <code>ranks</code> is constant
 * -- that is, for any i and j in TiesTrace, <code> ranks[i] == ranks[j]
 * </code></param>
    </javadoc>
    <method type="void" name="resolveTie" startLine="334" endLine="373">
      <declaration type="double" name="c" />
      <declaration type="int" name="length" />
      <declaration type="Iterator<Integer>" name="iterator" />
      <declaration type="long" name="f" />
      <scope startLine="355" endLine="359">
        <comment>No advertised exception because args are guaranteed valid</comment>
      </scope>
      <declaration type="int" name="i" />
      <scope startLine="366" endLine="368" />
      <comment>constant value of ranks over tiesTrace</comment>
      <comment>length of sequence of tied ranks</comment>
      <comment>Replace ranks with average</comment>
      <comment>Replace ranks with maximum values</comment>
      <comment>Replace ties with minimum</comment>
      <comment>Fill with random integral values in [c, c + length - 1]</comment>
      <comment>Fill sequentially from c to c + length - 1</comment>
      <comment>walk and fill</comment>
      <comment>this should not happen unless TiesStrategy enum is changed</comment>
    </method>
    <javadoc>
      <text>* Sets<code>data[i] = value</code> for each i in <code>tiesTrace.</code></text>
      <param>data array to modify</param>
      <param>tiesTrace list of index values to set</param>
      <param>value value to set</param>
    </javadoc>
    <method type="void" name="fill" startLine="382" endLine="387">
      <declaration type="Iterator<Integer>" name="iterator" />
      <scope startLine="384" endLine="386" />
    </method>
    <javadoc>
      <text>* Set <code>ranks[i] = Double.NaN</code> for each i in <code>nanPositions.</code></text>
      <param>ranks array to modify</param>
      <param>nanPositions list of index values to set to <code>Double.NaN</code></param>
    </javadoc>
    <method type="void" name="restoreNaNs" startLine="395" endLine="404">
      <scope startLine="396" endLine="398" />
      <declaration type="Iterator<Integer>" name="iterator" />
      <scope startLine="400" endLine="402" />
    </method>
    <javadoc>
      <text>* Returns a list of indexes where <code>ranks</code> is <code>NaN.</code></text>
      <param>ranks array to search for <code>NaNs</code></param>
      <return>list of indexes i such that <code>ranks[i] = NaN</code></return>
    </javadoc>
    <method type="List<Integer>" name="getNanPositions" startLine="412" endLine="420">
      <declaration type="ArrayList<Integer>" name="out" />
      <scope startLine="414" endLine="418">
        <scope startLine="415" endLine="417" />
      </scope>
    </method>
    <class name="IntDoublePair" startLine="422">
      <implements name="Comparable<IntDoublePair>" />
      <javadoc>
        <text>* Represents the position of a double value in an ordering.
 * Comparable interface is implemented so Arrays.sort can be used
 * to sort an array of IntDoublePairs by value.  Note that the
 * implicitly defined natural ordering is NOT consistent with equals.</text>
      </javadoc>
      <javadoc>
        <text>* Value of the pair</text>
      </javadoc>
      <declaration type="double" name="value" />
      <javadoc>
        <text>* Original position of the pair</text>
      </javadoc>
      <declaration type="int" name="position" />
      <javadoc>
        <text>* Construct an IntDoublePair with the given value and position.</text>
        <param>value the value of the pair</param>
        <param>position the original position</param>
      </javadoc>
      <method type="constructor" name="IntDoublePair" startLine="441" endLine="444" />
      <javadoc>
        <text>* Compare this IntDoublePair to another pair.
 * Only the <strong>values</strong> are compared.</text>
        <param>other the other pair to compare this to</param>
        <return>result of <code>Double.compare(value, other.value)</code></return>
      </javadoc>
      <method type="int" name="compareTo" startLine="453" endLine="455" />
      <javadoc>
        <text>* Returns the value of the pair.</text>
        <return>value</return>
      </javadoc>
      <method type="double" name="getValue" startLine="463" endLine="465" />
      <javadoc>
        <text>* Returns the original position of the pair.</text>
        <return>position</return>
      </javadoc>
      <method type="int" name="getPosition" startLine="471" endLine="473" />
    </class>
    <comment>N.B. equals() and hashCode() are not implemented; see MATH-610 for discussion.</comment>
  </class>
</source>
