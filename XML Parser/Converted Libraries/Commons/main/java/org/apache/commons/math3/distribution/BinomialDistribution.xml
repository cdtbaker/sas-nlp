<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.special.Beta" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937c" />
  <class name="BinomialDistribution" extends="AbstractIntegerDistribution" startLine="27">
    <javadoc>
      <text>* Implementation of the binomial distribution.</text>
      <see><a href="http://en.wikipedia.org/wiki/Binomial_distribution">Binomial distribution (Wikipedia)</a></see>
      <see><a href="http://mathworld.wolfram.com/BinomialDistribution.html">Binomial Distribution (MathWorld)</a></see>
      <version>$Id: BinomialDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* The number of trials.</text>
    </javadoc>
    <declaration type="int" name="numberOfTrials" />
    <javadoc>
      <text>* The probability of success.</text>
    </javadoc>
    <declaration type="double" name="probabilityOfSuccess" />
    <javadoc>
      <text>* Create a binomial distribution with the given number of trials and
 * probability of success.</text>
      <param>trials Number of trials.</param>
      <param>p Probability of success.</param>
      <throws>NotPositiveException if {@code trials < 0}.</throws>
      <throws>OutOfRangeException if {@code p < 0} or {@code p > 1}.</throws>
    </javadoc>
    <method type="constructor" name="BinomialDistribution" startLine="51" endLine="53" />
    <javadoc>
      <text>* Creates a binomial distribution.</text>
      <param>rng Random number generator.</param>
      <param>trials Number of trials.</param>
      <param>p Probability of success.</param>
      <throws>NotPositiveException if {@code trials < 0}.</throws>
      <throws>OutOfRangeException if {@code p < 0} or {@code p > 1}.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="BinomialDistribution" startLine="67" endLine="80">
      <scope startLine="70" endLine="73" />
      <scope startLine="74" endLine="76" />
    </method>
    <javadoc>
      <text>* Access the number of trials for this distribution.</text>
      <return>the number of trials.</return>
    </javadoc>
    <method type="int" name="getNumberOfTrials" startLine="87" endLine="89" />
    <javadoc>
      <text>* Access the probability of success for this distribution.</text>
      <return>the probability of success.</return>
    </javadoc>
    <method type="double" name="getProbabilityOfSuccess" startLine="96" endLine="98" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="probability" startLine="101" endLine="111">
      <declaration type="double" name="ret" />
      <scope startLine="103" endLine="105" />
      <scope startLine="105" endLine="109" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="114" endLine="125">
      <declaration type="double" name="ret" />
      <scope startLine="116" endLine="118" />
      <scope startLine="118" endLine="120" />
      <scope startLine="120" endLine="123" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}For {@code n} trials and probability parameter {@code p}, the mean is{@code n * p}.</text>
    </javadoc>
    <method type="double" name="getNumericalMean" startLine="133" endLine="135" />
    <javadoc>
      <text>* {@inheritDoc}For {@code n} trials and probability parameter {@code p}, the variance is{@code n * p * (1 - p)}.</text>
    </javadoc>
    <method type="double" name="getNumericalVariance" startLine="143" endLine="146">
      <declaration type="double" name="p" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}The lower bound of the support is always 0 except for the probability
 * parameter {@code p = 1}.</text>
      <return>lower bound of the support (0 or the number of trials)</return>
    </javadoc>
    <method type="int" name="getSupportLowerBound" startLine="156" endLine="158" />
    <javadoc>
      <text>* {@inheritDoc}The upper bound of the support is the number of trials except for the
 * probability parameter {@code p = 0}.</text>
      <return>upper bound of the support (number of trials or 0)</return>
    </javadoc>
    <method type="int" name="getSupportUpperBound" startLine="168" endLine="170" />
    <javadoc>
      <text>* {@inheritDoc}The support of this distribution is connected.</text>
      <return>{@code true}</return>
    </javadoc>
    <method type="boolean" name="isSupportConnected" startLine="179" endLine="181" />
  </class>
</source>
