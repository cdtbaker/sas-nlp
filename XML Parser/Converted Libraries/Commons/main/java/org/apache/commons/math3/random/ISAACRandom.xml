<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.random">
  <import name="java.io.Serializable" />
  <class name="ISAACRandom" extends="BitsStreamGenerator" startLine="22">
    <implements name="Serializable" />
    <javadoc>
      <text>* <a href="http://burtleburtle.net/bob/rand/isaacafa.html">
 * ISAAC: a fast cryptographic pseudo-random number generator</a>
 * <br/>
 * ISAAC (Indirection, Shift, Accumulate, Add, and Count) generates 32-bit
 * random numbers.
 * ISAAC has been designed to be cryptographically secure and is inspired
 * by RC4.
 * Cycles are guaranteed to be at least 2<sup>40</sup> values long, and they
 * are 2<sup>8295</sup> values long on average.
 * The results are uniformly distributed, unbiased, and unpredictable unless
 * you know the seed.
 * <br/>
 * This code is based (with minor changes and improvements) on the original
 * implementation of the algorithm by Bob Jenkins.
 * <br/></text>
      <version>$Id: ISAACRandom.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Log of size of rsl[] and mem[]</text>
    </javadoc>
    <declaration type="int" name="SIZE_L" />
    <javadoc>
      <text>* Size of rsl[] and mem[]</text>
    </javadoc>
    <declaration type="int" name="SIZE" />
    <javadoc>
      <text>* Half-size of rsl[] and mem[]</text>
    </javadoc>
    <declaration type="int" name="H_SIZE" />
    <javadoc>
      <text>* For pseudo-random lookup</text>
    </javadoc>
    <declaration type="int" name="MASK" />
    <javadoc>
      <text>* The golden ratio</text>
    </javadoc>
    <declaration type="int" name="GLD_RATIO" />
    <javadoc>
      <text>* The results given to the user</text>
    </javadoc>
    <declaration type="int[]" name="rsl" />
    <javadoc>
      <text>* The internal state</text>
    </javadoc>
    <declaration type="int[]" name="mem" />
    <javadoc>
      <text>* Count through the results in rsl[]</text>
    </javadoc>
    <declaration type="int" name="count" />
    <javadoc>
      <text>* Accumulator</text>
    </javadoc>
    <declaration type="int" name="isaacA" />
    <javadoc>
      <text>* The last result</text>
    </javadoc>
    <declaration type="int" name="isaacB" />
    <javadoc>
      <text>* Counter, guarantees cycle is at least 2^40</text>
    </javadoc>
    <declaration type="int" name="isaacC" />
    <javadoc>
      <text>* Service variable.</text>
    </javadoc>
    <declaration type="int[]" name="arr" />
    <javadoc>
      <text>* Service variable.</text>
    </javadoc>
    <declaration type="int" name="isaacX" />
    <javadoc>
      <text>* Service variable.</text>
    </javadoc>
    <declaration type="int" name="isaacI" />
    <javadoc>
      <text>* Service variable.</text>
    </javadoc>
    <declaration type="int" name="isaacJ" />
    <javadoc>
      <text>* Creates a new ISAAC random number generator.
 * <br/>
 * The instance is initialized using a combination of the
 * current time and system hash code of the instance as the seed.</text>
    </javadoc>
    <method type="constructor" name="ISAACRandom" startLine="83" endLine="85" />
    <javadoc>
      <text>* Creates a new ISAAC random number generator using a single long seed.</text>
      <param>seed Initial seed.</param>
    </javadoc>
    <method type="constructor" name="ISAACRandom" startLine="92" endLine="94" />
    <javadoc>
      <text>* Creates a new ISAAC random number generator using an int array seed.</text>
      <param>seed Initial seed. If {@code null}, the seed will be related
 * to the current time.</param>
    </javadoc>
    <method type="constructor" name="ISAACRandom" startLine="102" endLine="104" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setSeed" startLine="108" endLine="110" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setSeed" startLine="114" endLine="116" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setSeed" startLine="120" endLine="135">
      <scope startLine="121" endLine="124" />
      <declaration type="int" name="seedLen" />
      <declaration type="int" name="rslLen" />
      <scope startLine="128" endLine="133">
        <scope startLine="129" endLine="132">
          <declaration type="long" name="k" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="next" startLine="139" endLine="145">
      <scope startLine="140" endLine="143" />
    </method>
    <javadoc>
      <text>* Generate 256 results</text>
    </javadoc>
    <method type="void" name="isaac" startLine="148" endLine="159">
      <scope startLine="152" endLine="154" />
      <scope startLine="156" endLine="158" />
    </method>
    <javadoc>
      <text>* Intermediate internal loop.</text>
    </javadoc>
    <method type="void" name="isaac2" startLine="162" endLine="179" />
    <javadoc>
      <text>* Lowest level internal loop.</text>
    </javadoc>
    <method type="void" name="isaac3" startLine="182" endLine="186" />
    <javadoc>
      <text>* Initialize, or reinitialize, this instance of rand.</text>
    </javadoc>
    <method type="void" name="initState" startLine="189" endLine="228">
      <scope startLine="193" endLine="195" />
      <scope startLine="196" endLine="198" />
      <scope startLine="200" endLine="211" />
      <scope startLine="213" endLine="224" />
      <comment>fill in mem[] with messy stuff</comment>
      <comment>second pass makes all of seed affect all of mem</comment>
    </method>
    <javadoc>
      <text>* Shuffle array.</text>
    </javadoc>
    <method type="void" name="shuffle" startLine="231" endLine="256" />
    <javadoc>
      <text>* Set the state by copying the internal arrays.</text>
      <param>start First index into {@link #mem} array.</param>
    </javadoc>
    <method type="void" name="setState" startLine="262" endLine="271" />
  </class>
</source>
