<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.dfp">
  <class name="DfpDec" extends="Dfp" startLine="20">
    <javadoc>
      <text>* Subclass of {@link Dfp} which hides the radix-10000 artifacts of the superclass.
 * This should give outward appearances of being a decimal number with DIGITS*4-3
 * decimal digits. This class can be subclassed to appear to be an arbitrary number
 * of decimal digits less than DIGITS*4-3.</text>
      <version>$Id: DfpDec.java 1449529 2013-02-24 19:13:17Z luc $</version>
      <since>2.2</since>
    </javadoc>
    <javadoc>
      <text>* Makes an instance with a value of zero.</text>
      <param>factory factory linked to this instance</param>
    </javadoc>
    <method type="constructor" name="DfpDec" startLine="32" endLine="34" />
    <javadoc>
      <text>* Create an instance from a byte value.</text>
      <param>factory factory linked to this instance</param>
      <param>x value to convert to an instance</param>
    </javadoc>
    <method type="constructor" name="DfpDec" startLine="40" endLine="42" />
    <javadoc>
      <text>* Create an instance from an int value.</text>
      <param>factory factory linked to this instance</param>
      <param>x value to convert to an instance</param>
    </javadoc>
    <method type="constructor" name="DfpDec" startLine="48" endLine="50" />
    <javadoc>
      <text>* Create an instance from a long value.</text>
      <param>factory factory linked to this instance</param>
      <param>x value to convert to an instance</param>
    </javadoc>
    <method type="constructor" name="DfpDec" startLine="56" endLine="58" />
    <javadoc>
      <text>* Create an instance from a double value.</text>
      <param>factory factory linked to this instance</param>
      <param>x value to convert to an instance</param>
    </javadoc>
    <method type="constructor" name="DfpDec" startLine="64" endLine="67" />
    <javadoc>
      <text>* Copy constructor.</text>
      <param>d instance to copy</param>
    </javadoc>
    <method type="constructor" name="DfpDec" startLine="72" endLine="75" />
    <javadoc>
      <text>* Create an instance from a String representation.</text>
      <param>factory factory linked to this instance</param>
      <param>s string representation of the instance</param>
    </javadoc>
    <method type="constructor" name="DfpDec" startLine="81" endLine="84" />
    <javadoc>
      <text>* Creates an instance with a non-finite value.</text>
      <param>factory factory linked to this instance</param>
      <param>sign sign of the Dfp to create</param>
      <param>nans code of the value, must be one of {@link #INFINITE},{@link #SNAN},  {@link #QNAN}</param>
    </javadoc>
    <method type="constructor" name="DfpDec" startLine="92" endLine="94" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Dfp" name="newInstance" startLine="98" endLine="100" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Dfp" name="newInstance" startLine="104" endLine="106" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Dfp" name="newInstance" startLine="110" endLine="112" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Dfp" name="newInstance" startLine="116" endLine="118" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Dfp" name="newInstance" startLine="122" endLine="124" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Dfp" name="newInstance" startLine="128" endLine="140">
      <scope startLine="131" endLine="136">
        <declaration type="Dfp" name="result" />
      </scope>
      <comment>make sure we don't mix number with different precision</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Dfp" name="newInstance" startLine="144" endLine="146" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Dfp" name="newInstance" startLine="150" endLine="152" />
    <javadoc>
      <text>* Get the number of decimal digits this class is going to represent.
 * Default implementation returns {@link #getRadixDigits()}*4-3. Subclasses can
 * override this to return something less.</text>
      <return>number of decimal digits this class is going to represent</return>
    </javadoc>
    <method type="int" name="getDecimalDigits" startLine="159" endLine="161" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="round" startLine="165" endLine="289">
      <declaration type="int" name="msb" />
      <scope startLine="168" endLine="171">
        <comment>special case -- this == zero</comment>
      </scope>
      <declaration type="int" name="cmaxdigits" />
      <declaration type="int" name="lsbthreshold" />
      <scope startLine="175" endLine="178" />
      <declaration type="int" name="digits" />
      <declaration type="int" name="lsbshift" />
      <declaration type="int" name="lsd" />
      <scope startLine="186" endLine="188" />
      <declaration type="int" name="lsb" />
      <scope startLine="192" endLine="194" />
      <declaration type="int" name="discarded" />
      <declaration type="int" name="n" />
      <scope startLine="198" endLine="203">
        <comment>look to the next digit for rounding</comment>
      </scope>
      <scope startLine="203" endLine="206" />
      <scope startLine="208" endLine="211">
        <comment>need to know if there are any discarded bits</comment>
      </scope>
      <declaration type="boolean" name="inc" />
      <scope startLine="255" endLine="268">
        <declaration type="int" name="rh" />
        <scope startLine="258" endLine="262">
          <declaration type="int" name="r" />
        </scope>
        <scope startLine="264" endLine="267" />
        <comment>increment if necessary</comment>
      </scope>
      <scope startLine="271" endLine="275">
        <comment>Gradual Underflow</comment>
      </scope>
      <scope startLine="277" endLine="281">
        <comment>Overflow</comment>
      </scope>
      <scope startLine="283" endLine="287">
        <comment>Inexact</comment>
      </scope>
      <comment>not looking at this after this point</comment>
      <comment>round up if n!=0</comment>
      <comment>round half up</comment>
      <comment>round half down</comment>
      <comment>round half-even</comment>
      <comment>round half-odd</comment>
      <comment>round ceil</comment>
      <comment>round floor</comment>
      <comment>Check for exceptional cases and raise signals if necessary</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Dfp" name="nextAfter" startLine="293" endLine="367">
      <declaration type="String" name="trapName" />
      <scope startLine="298" endLine="303">
        <declaration type="Dfp" name="result" />
      </scope>
      <declaration type="boolean" name="up" />
      <declaration type="Dfp" name="result" />
      <declaration type="Dfp" name="inc" />
      <scope startLine="310" endLine="312" />
      <scope startLine="314" endLine="316" />
      <scope startLine="318" endLine="320" />
      <scope startLine="322" endLine="335">
        <scope startLine="326" endLine="328" />
        <scope startLine="330" endLine="332" />
        <scope startLine="332" endLine="334" />
      </scope>
      <scope startLine="335" endLine="354">
        <scope startLine="339" endLine="341" />
        <scope startLine="341" endLine="343" />
        <scope startLine="345" endLine="347" />
        <scope startLine="349" endLine="351" />
        <scope startLine="351" endLine="353" />
      </scope>
      <scope startLine="356" endLine="359" />
      <scope startLine="361" endLine="364" />
      <comment>make sure we don't mix number with different precision</comment>
      <comment>if this is greater than x</comment>
    </method>
  </class>
</source>
