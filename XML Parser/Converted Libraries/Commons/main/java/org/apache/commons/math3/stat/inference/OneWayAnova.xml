<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.inference">
  <import name="java.util.ArrayList" />
  <import name="java.util.Collection" />
  <import name="org.apache.commons.math3.distribution.FDistribution" />
  <import name="org.apache.commons.math3.exception.ConvergenceException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.stat.descriptive.SummaryStatistics" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="OneWayAnova" startLine="32">
    <javadoc>
      <text>* Implements one-way ANOVA (analysis of variance) statistics.
 * <p> Tests for differences between two or more categories of univariate data
 * (for example, the body mass index of accountants, lawyers, doctors and
 * computer programmers).  When two categories are given, this is equivalent to
 * the {@link org.apache.commons.math3.stat.inference.TTest}.
 * </p><p>
 * Uses the {@link org.apache.commons.math3.distribution.FDistributioncommons-math F Distribution implementation} to estimate exact p-values.</p>
 * <p>This implementation is based on a description at
 * http://faculty.vassar.edu/lowry/ch13pt1.html</p>
 * <pre>
 * Abbreviations: bg = between groups,
 * wg = within groups,
 * ss = sum squared deviations
 * </pre></text>
      <since>1.2</since>
      <version>$Id: OneWayAnova.java 1462423 2013-03-29 07:25:18Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* Default constructor.</text>
    </javadoc>
    <method type="constructor" name="OneWayAnova" startLine="58" endLine="59" />
    <javadoc>
      <text>* Computes the ANOVA F-value for a collection of <code>double[]</code>
 * arrays.
 * <p><strong>Preconditions</strong>: <ul>
 * <li>The categoryData <code>Collection</code> must contain
 * <code>double[]</code> arrays.</li>
 * <li> There must be at least two <code>double[]</code> arrays in the
 * <code>categoryData</code> collection and each of these arrays must
 * contain at least two values.</li></ul></p><p>
 * This implementation computes the F statistic using the definitional
 * formula<pre>
 * F = msbg/mswg</pre>
 * where<pre>
 * msbg = between group mean square
 * mswg = within group mean square</pre>
 * are as defined <a href="http://faculty.vassar.edu/lowry/ch13pt1.html">
 * here</a></p></text>
      <param>categoryData <code>Collection</code> of <code>double[]</code>
 * arrays each containing data for one category</param>
      <return>Fvalue</return>
      <throws>NullArgumentException if <code>categoryData</code> is <code>null</code></throws>
      <throws>DimensionMismatchException if the length of the <code>categoryData</code>
 * array is less than 2 or a contained <code>double[]</code> array does not have
 * at least two values</throws>
    </javadoc>
    <method type="double" name="anovaFValue" startLine="89" endLine="94">
      <declaration type="AnovaStats" name="a" />
    </method>
    <javadoc>
      <text>* Computes the ANOVA P-value for a collection of <code>double[]</code>
 * arrays.
 * <p><strong>Preconditions</strong>: <ul>
 * <li>The categoryData <code>Collection</code> must contain
 * <code>double[]</code> arrays.</li>
 * <li> There must be at least two <code>double[]</code> arrays in the
 * <code>categoryData</code> collection and each of these arrays must
 * contain at least two values.</li></ul></p><p>
 * This implementation uses the{@link org.apache.commons.math3.distribution.FDistributioncommons-math F Distribution implementation} to estimate the exact
 * p-value, using the formula<pre>
 * p = 1 - cumulativeProbability(F)</pre>
 * where <code>F</code> is the F value and <code>cumulativeProbability</code>
 * is the commons-math implementation of the F distribution.</p></text>
      <param>categoryData <code>Collection</code> of <code>double[]</code>
 * arrays each containing data for one category</param>
      <return>Pvalue</return>
      <throws>NullArgumentException if <code>categoryData</code> is <code>null</code></throws>
      <throws>DimensionMismatchException if the length of the <code>categoryData</code>
 * array is less than 2 or a contained <code>double[]</code> array does not have
 * at least two values</throws>
      <throws>ConvergenceException if the p-value can not be computed due to a convergence error</throws>
      <throws>MaxCountExceededException if the maximum number of iterations is exceeded</throws>
    </javadoc>
    <method type="double" name="anovaPValue" startLine="126" endLine="133">
      <declaration type="AnovaStats" name="a" />
      <declaration type="FDistribution" name="fdist" />
      <comment>No try-catch or advertised exception because args are valid</comment>
    </method>
    <javadoc>
      <text>* Computes the ANOVA P-value for a collection of {@link SummaryStatistics}.
 * <p><strong>Preconditions</strong>: <ul>
 * <li>The categoryData <code>Collection</code> must contain{@link SummaryStatistics}.</li>
 * <li> There must be at least two {@link SummaryStatistics} in the
 * <code>categoryData</code> collection and each of these statistics must
 * contain at least two values.</li></ul></p><p>
 * This implementation uses the{@link org.apache.commons.math3.distribution.FDistributioncommons-math F Distribution implementation} to estimate the exact
 * p-value, using the formula<pre>
 * p = 1 - cumulativeProbability(F)</pre>
 * where <code>F</code> is the F value and <code>cumulativeProbability</code>
 * is the commons-math implementation of the F distribution.</p></text>
      <param>categoryData <code>Collection</code> of {@link SummaryStatistics}each containing data for one category</param>
      <param>allowOneElementData if true, allow computation for one catagory
 * only or for one data element per category</param>
      <return>Pvalue</return>
      <throws>NullArgumentException if <code>categoryData</code> is <code>null</code></throws>
      <throws>DimensionMismatchException if the length of the <code>categoryData</code>
 * array is less than 2 or a contained {@link SummaryStatistics} does not have
 * at least two values</throws>
      <throws>ConvergenceException if the p-value can not be computed due to a convergence error</throws>
      <throws>MaxCountExceededException if the maximum number of iterations is exceeded</throws>
      <since>3.2</since>
    </javadoc>
    <method type="double" name="anovaPValue" startLine="168" endLine="174">
      <declaration type="AnovaStats" name="a" />
      <declaration type="FDistribution" name="fdist" />
    </method>
    <javadoc>
      <text>* This method calls the method that actually does the calculations (except
 * P-value).</text>
      <param>categoryData<code>Collection</code> of <code>double[]</code> arrays each
 * containing data for one category</param>
      <return>computed AnovaStats</return>
      <throws>NullArgumentExceptionif <code>categoryData</code> is <code>null</code></throws>
      <throws>DimensionMismatchExceptionif the length of the <code>categoryData</code> array is less
 * than 2 or a contained <code>double[]</code> array does not
 * contain at least two values</throws>
    </javadoc>
    <method type="AnovaStats" name="anovaStats" startLine="192" endLine="210">
      <declaration type="Collection<SummaryStatistics>" name="categoryDataSummaryStatistics" />
      <scope startLine="200" endLine="206">
        <declaration type="SummaryStatistics" name="dataSummaryStatistics" />
        <scope startLine="203" endLine="205" />
      </scope>
      <comment>convert arrays to SummaryStatistics</comment>
    </method>
    <javadoc>
      <text>* Performs an ANOVA test, evaluating the null hypothesis that there
 * is no difference among the means of the data categories.
 * <p><strong>Preconditions</strong>: <ul>
 * <li>The categoryData <code>Collection</code> must contain
 * <code>double[]</code> arrays.</li>
 * <li> There must be at least two <code>double[]</code> arrays in the
 * <code>categoryData</code> collection and each of these arrays must
 * contain at least two values.</li>
 * <li>alpha must be strictly greater than 0 and less than or equal to 0.5.
 * </li></ul></p><p>
 * This implementation uses the{@link org.apache.commons.math3.distribution.FDistributioncommons-math F Distribution implementation} to estimate the exact
 * p-value, using the formula<pre>
 * p = 1 - cumulativeProbability(F)</pre>
 * where <code>F</code> is the F value and <code>cumulativeProbability</code>
 * is the commons-math implementation of the F distribution.</p>
 * <p>True is returned iff the estimated p-value is less than alpha.</p></text>
      <param>categoryData <code>Collection</code> of <code>double[]</code>
 * arrays each containing data for one category</param>
      <param>alpha significance level of the test</param>
      <return>true if the null hypothesis can be rejected with
 * confidence 1 - alpha</return>
      <throws>NullArgumentException if <code>categoryData</code> is <code>null</code></throws>
      <throws>DimensionMismatchException if the length of the <code>categoryData</code>
 * array is less than 2 or a contained <code>double[]</code> array does not have
 * at least two values</throws>
      <throws>OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]</throws>
      <throws>ConvergenceException if the p-value can not be computed due to a convergence error</throws>
      <throws>MaxCountExceededException if the maximum number of iterations is exceeded</throws>
    </javadoc>
    <method type="boolean" name="anovaTest" startLine="249" endLine="258">
      <scope startLine="251" endLine="255" />
    </method>
    <javadoc>
      <text>* This method actually does the calculations (except P-value).</text>
      <param>categoryData <code>Collection</code> of <code>double[]</code>
 * arrays each containing data for one category</param>
      <param>allowOneElementData if true, allow computation for one catagory
 * only or for one data element per category</param>
      <return>computed AnovaStats</return>
      <throws>NullArgumentException if <code>categoryData</code> is <code>null</code></throws>
      <throws>DimensionMismatchException if <code>allowOneElementData</code> is false and the number of
 * categories is less than 2 or a contained SummaryStatistics does not contain
 * at least two values</throws>
    </javadoc>
    <method type="AnovaStats" name="anovaStats" startLine="275" endLine="324">
      <scope startLine="279" endLine="293">
        <scope startLine="281" endLine="284" />
        <scope startLine="287" endLine="292">
          <scope startLine="288" endLine="291" />
        </scope>
        <comment>check if we have enough categories</comment>
        <comment>check if each category has enough data</comment>
      </scope>
      <declaration type="int" name="dfwg" />
      <declaration type="double" name="sswg" />
      <declaration type="double" name="totsum" />
      <declaration type="double" name="totsumsq" />
      <declaration type="int" name="totnum" />
      <scope startLine="301" endLine="313">
        <declaration type="double" name="sum" />
        <declaration type="double" name="sumsq" />
        <declaration type="int" name="num" />
        <declaration type="double" name="ss" />
      </scope>
      <declaration type="double" name="sst" />
      <declaration type="double" name="ssbg" />
      <declaration type="int" name="dfbg" />
      <declaration type="double" name="msbg" />
      <declaration type="double" name="mswg" />
      <declaration type="double" name="F" />
    </method>
    <class name="AnovaStats" startLine="326">
      <javadoc>
        <text>* Convenience class to pass dfbg,dfwg,F values around within OneWayAnova.
 * No get/set methods provided.</text>
      </javadoc>
      <javadoc>
        <text>* Degrees of freedom in numerator (between groups).</text>
      </javadoc>
      <declaration type="int" name="dfbg" />
      <javadoc>
        <text>* Degrees of freedom in denominator (within groups).</text>
      </javadoc>
      <declaration type="int" name="dfwg" />
      <javadoc>
        <text>* Statistic.</text>
      </javadoc>
      <declaration type="double" name="F" />
      <javadoc>
        <text>* Constructor</text>
        <param>dfbg degrees of freedom in numerator (between groups)</param>
        <param>dfwg degrees of freedom in denominator (within groups)</param>
        <param>F statistic</param>
      </javadoc>
      <method type="constructor" name="AnovaStats" startLine="347" endLine="351" />
    </class>
  </class>
</source>
