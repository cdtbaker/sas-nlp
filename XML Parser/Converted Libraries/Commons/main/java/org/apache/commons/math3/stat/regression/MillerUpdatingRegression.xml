<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.regression">
  <import name="java.util.Arrays" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.Precision" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <class name="MillerUpdatingRegression" startLine="25">
    <implements name="UpdatingMultipleLinearRegression" />
    <javadoc>
      <text>* This class is a concrete implementation of the {@link UpdatingMultipleLinearRegression} interface.
 * <p>The algorithm is described in: <pre>
 * Algorithm AS 274: Least Squares Routines to Supplement Those of Gentleman
 * Author(s): Alan J. Miller
 * Source: Journal of the Royal Statistical Society.
 * Series C (Applied Statistics), Vol. 41, No. 2
 * (1992), pp. 458-478
 * Published by: Blackwell Publishing for the Royal Statistical Society
 * Stable URL: http://www.jstor.org/stable/2347583 </pre></p>
 * <p>This method for multiple regression forms the solution to the OLS problem
 * by updating the QR decomposition as described by Gentleman.</p></text>
      <version>$Id: MillerUpdatingRegression.java 1392358 2012-10-01 14:41:55Z psteitz $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* number of variables in regression</text>
    </javadoc>
    <declaration type="int" name="nvars" />
    <javadoc>
      <text>* diagonals of cross products matrix</text>
    </javadoc>
    <declaration type="double[]" name="d" />
    <javadoc>
      <text>* the elements of the R`Y</text>
    </javadoc>
    <declaration type="double[]" name="rhs" />
    <javadoc>
      <text>* the off diagonal portion of the R matrix</text>
    </javadoc>
    <declaration type="double[]" name="r" />
    <javadoc>
      <text>* the tolerance for each of the variables</text>
    </javadoc>
    <declaration type="double[]" name="tol" />
    <javadoc>
      <text>* residual sum of squares for all nested regressions</text>
    </javadoc>
    <declaration type="double[]" name="rss" />
    <javadoc>
      <text>* order of the regressors</text>
    </javadoc>
    <declaration type="int[]" name="vorder" />
    <javadoc>
      <text>* scratch space for tolerance calc</text>
    </javadoc>
    <declaration type="double[]" name="work_tolset" />
    <javadoc>
      <text>* number of observations entered</text>
    </javadoc>
    <declaration type="long" name="nobs" />
    <javadoc>
      <text>* sum of squared errors of largest regression</text>
    </javadoc>
    <declaration type="double" name="sserr" />
    <javadoc>
      <text>* has rss been called?</text>
    </javadoc>
    <declaration type="boolean" name="rss_set" />
    <javadoc>
      <text>* has the tolerance setting method been called</text>
    </javadoc>
    <declaration type="boolean" name="tol_set" />
    <javadoc>
      <text>* flags for variables with linear dependency problems</text>
    </javadoc>
    <declaration type="boolean[]" name="lindep" />
    <javadoc>
      <text>* singular x values</text>
    </javadoc>
    <declaration type="double[]" name="x_sing" />
    <javadoc>
      <text>* workspace for singularity method</text>
    </javadoc>
    <declaration type="double[]" name="work_sing" />
    <javadoc>
      <text>* summation of Y variable</text>
    </javadoc>
    <declaration type="double" name="sumy" />
    <javadoc>
      <text>* summation of squared Y values</text>
    </javadoc>
    <declaration type="double" name="sumsqy" />
    <javadoc>
      <text>* boolean flag whether a regression constant is added</text>
    </javadoc>
    <declaration type="boolean" name="hasIntercept" />
    <javadoc>
      <text>* zero tolerance</text>
    </javadoc>
    <declaration type="double" name="epsilon" />
    <javadoc>
      <text>* Set the default constructor to private access
 * to prevent inadvertent instantiation</text>
    </javadoc>
    <method type="constructor" name="MillerUpdatingRegression" startLine="88" endLine="90" />
    <javadoc>
      <text>* This is the augmented constructor for the MillerUpdatingRegression class.</text>
      <param>numberOfVariables number of regressors to expect, not including constant</param>
      <param>includeConstant include a constant automatically</param>
      <param>errorTolerance  zero tolerance, how machine zero is determined</param>
      <throws>ModelSpecificationException if {@code numberOfVariables is less than 1}</throws>
    </javadoc>
    <method type="constructor" name="MillerUpdatingRegression" startLine="101" endLine="130">
      <scope startLine="102" endLine="104" />
      <scope startLine="105" endLine="107" />
      <scope startLine="107" endLine="109" />
      <scope startLine="122" endLine="124" />
      <scope startLine="125" endLine="127" />
      <scope startLine="127" endLine="129" />
    </method>
    <javadoc>
      <text>* Primary constructor for the MillerUpdatingRegression.</text>
      <param>numberOfVariables maximum number of potential regressors</param>
      <param>includeConstant include a constant automatically</param>
      <throws>ModelSpecificationException if {@code numberOfVariables is less than 1}</throws>
    </javadoc>
    <method type="constructor" name="MillerUpdatingRegression" startLine="140" endLine="142" />
    <javadoc>
      <text>* A getter method which determines whether a constant is included.</text>
      <return>true regression has an intercept, false no intercept</return>
    </javadoc>
    <method type="boolean" name="hasIntercept" startLine="148" endLine="150" />
    <javadoc>
      <text>* Gets the number of observations added to the regression model.</text>
      <return>number of observations</return>
    </javadoc>
    <method type="long" name="getN" startLine="156" endLine="158" />
    <javadoc>
      <text>* Adds an observation to the regression model.</text>
      <param>x the array with regressor values</param>
      <param>y  the value of dependent variable given these regressors</param>
      <exception>ModelSpecificationException if the length of {@code x} does not equal
 * the number of independent variables in the model</exception>
    </javadoc>
    <method type="void" name="addObservation" startLine="168" endLine="185">
      <scope startLine="171" endLine="174" />
      <scope startLine="175" endLine="177" />
      <scope startLine="177" endLine="182">
        <declaration type="double[]" name="tmp" />
      </scope>
    </method>
    <javadoc>
      <text>* Adds multiple observations to the model.</text>
      <param>x observations on the regressors</param>
      <param>y observations on the regressand</param>
      <throws>ModelSpecificationException if {@code x} is not rectangular, does not match
 * the length of {@code y} or does not contain sufficient data to estimate the model</throws>
    </javadoc>
    <method type="void" name="addObservations" startLine="194" endLine="213">
      <scope startLine="195" endLine="200" />
      <scope startLine="201" endLine="204">
        <comment>Must be no y data either</comment>
      </scope>
      <scope startLine="205" endLine="209" />
      <scope startLine="210" endLine="212" />
    </method>
    <javadoc>
      <text>* The include method is where the QR decomposition occurs. This statement forms all
 * intermediate data which will be used for all derivative measures.
 * According to the miller paper, note that in the original implementation the x vector
 * is overwritten. In this implementation, the include method is passed a copy of the
 * original data vector so that there is no contamination of the data. Additionally,
 * this method differs slightly from Gentleman's method, in that the assumption is
 * of dense design matrices, there is some advantage in using the original gentleman algorithm
 * on sparse matrices.</text>
      <param>x observations on the regressors</param>
      <param>wi weight of the this observation (-1,1)</param>
      <param>yi observation on the regressand</param>
    </javadoc>
    <method type="void" name="include" startLine="229" endLine="285">
      <declaration type="int" name="nextr" />
      <declaration type="double" name="w" />
      <declaration type="double" name="y" />
      <declaration type="double" name="xi" />
      <declaration type="double" name="di" />
      <declaration type="double" name="wxi" />
      <declaration type="double" name="dpi" />
      <declaration type="double" name="xk" />
      <declaration type="double" name="_w" />
      <scope startLine="242" endLine="283">
        <scope startLine="243" endLine="245" />
        <scope startLine="248" endLine="251" />
        <scope startLine="255" endLine="261">
          <declaration type="double" name="tmp" />
          <scope startLine="258" endLine="260" />
        </scope>
        <scope startLine="261" endLine="264" />
        <scope startLine="266" endLine="275">
          <scope startLine="269" endLine="271" />
          <scope startLine="271" endLine="273" />
        </scope>
        <scope startLine="278" endLine="280" />
        <scope startLine="280" endLine="282" />
      </scope>
    </method>
    <javadoc>
      <text>* Adds to number a and b such that the contamination due to
 * numerical smallness of one addend does not corrupt the sum.</text>
      <param>a - an addend</param>
      <param>b - an addend</param>
      <return>the sum of the a and b</return>
    </javadoc>
    <method type="double" name="smartAdd" startLine="294" endLine="310">
      <declaration type="double" name="_a" />
      <declaration type="double" name="_b" />
      <scope startLine="297" endLine="303">
        <declaration type="double" name="eps" />
        <scope startLine="299" endLine="301" />
      </scope>
      <scope startLine="303" endLine="309">
        <declaration type="double" name="eps" />
        <scope startLine="305" endLine="307" />
      </scope>
    </method>
    <javadoc>
      <text>* As the name suggests,  clear wipes the internals and reorders everything in the
 * canonical order.</text>
    </javadoc>
    <method type="void" name="clear" startLine="316" endLine="335">
      <scope startLine="326" endLine="328" />
    </method>
    <javadoc>
      <text>* This sets up tolerances for singularity testing.</text>
    </javadoc>
    <method type="void" name="tolset" startLine="340" endLine="358">
      <declaration type="int" name="pos" />
      <declaration type="double" name="total" />
      <declaration type="double" name="eps" />
      <scope startLine="344" endLine="346" />
      <scope startLine="348" endLine="356">
        <scope startLine="351" endLine="354" />
      </scope>
    </method>
    <javadoc>
      <text>* The regcf method conducts the linear regression and extracts the
 * parameter vector. Notice that the algorithm can do subset regression
 * with no alteration.</text>
      <param>nreq how many of the regressors to include (either in canonical
 * order, or in the current reordered state)</param>
      <return>an array with the estimated slope coefficients</return>
      <throws>ModelSpecificationException if {@code nreq} is less than 1
 * or greater than the number of independent variables</throws>
    </javadoc>
    <method type="double[]" name="regcf" startLine="371" endLine="407">
      <declaration type="int" name="nextr" />
      <scope startLine="373" endLine="375" />
      <scope startLine="376" endLine="379" />
      <scope startLine="380" endLine="382" />
      <declaration type="double[]" name="ret" />
      <declaration type="boolean" name="rankProblem" />
      <scope startLine="385" endLine="398">
        <scope startLine="386" endLine="390" />
        <scope startLine="390" endLine="397">
          <scope startLine="393" endLine="396" />
        </scope>
      </scope>
      <scope startLine="399" endLine="405">
        <scope startLine="400" endLine="404">
          <scope startLine="401" endLine="403" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* The method which checks for singularities and then eliminates the offending
 * columns.</text>
    </javadoc>
    <method type="void" name="singcheck" startLine="413" endLine="453">
      <declaration type="int" name="pos" />
      <scope startLine="415" endLine="417" />
      <scope startLine="418" endLine="452">
        <declaration type="double" name="temp" />
        <scope startLine="424" endLine="429">
          <scope startLine="425" endLine="427" />
        </scope>
        <scope startLine="434" endLine="451">
          <scope startLine="436" endLine="448">
            <declaration type="int" name="_pi" />
            <scope startLine="439" endLine="442" />
            <declaration type="double" name="y" />
            <declaration type="double" name="weight" />
          </scope>
          <scope startLine="448" endLine="450" />
        </scope>
        <comment>Set elements within R to zero if they are less than tol(col) in</comment>
        <comment>absolute value after being scaled by the square root of their row</comment>
        <comment>multiplier</comment>
        <comment>If diagonal element is near zero, set it to zero, set appropriate</comment>
        <comment>element of LINDEP, and use INCLUD to augment the projections in</comment>
        <comment>the lower rows of the orthogonalization.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Calculates the sum of squared errors for the full regression
 * and all subsets in the following manner: <pre>
 * rss[] ={
 * ResidualSumOfSquares_allNvars,
 * ResidualSumOfSquares_FirstNvars-1,
 * ResidualSumOfSquares_FirstNvars-2,
 * ..., ResidualSumOfSquares_FirstVariable} </pre></text>
    </javadoc>
    <method type="void" name="ss" startLine="464" endLine="472">
      <declaration type="double" name="total" />
      <scope startLine="467" endLine="470" />
    </method>
    <javadoc>
      <text>* Calculates the cov matrix assuming only the first nreq variables are
 * included in the calculation. The returned array contains a symmetric
 * matrix stored in lower triangular form. The matrix will have
 * ( nreq + 1 ) * nreq / 2 elements. For illustration <pre>
 * cov =
 * {
 * cov_00,
 * cov_10, cov_11,
 * cov_20, cov_21, cov22,
 * ...
 * } </pre></text>
      <param>nreq how many of the regressors to include (either in canonical
 * order, or in the current reordered state)</param>
      <return>an array with the variance covariance of the included
 * regressors in lower triangular form</return>
    </javadoc>
    <method type="double[]" name="cov" startLine="492" endLine="538">
      <scope startLine="493" endLine="495" />
      <declaration type="double" name="rnk" />
      <scope startLine="497" endLine="501">
        <scope startLine="498" endLine="500" />
      </scope>
      <declaration type="double" name="var" />
      <declaration type="double[]" name="rinv" />
      <declaration type="double[]" name="covmat" />
      <declaration type="int" name="pos2" />
      <declaration type="int" name="pos1" />
      <declaration type="int" name="start" />
      <declaration type="double" name="total" />
      <scope startLine="511" endLine="536">
        <scope startLine="513" endLine="534">
          <scope startLine="514" endLine="533">
            <scope startLine="515" endLine="530">
              <scope startLine="517" endLine="519" />
              <scope startLine="519" endLine="521" />
              <scope startLine="522" endLine="528">
                <scope startLine="523" endLine="525" />
              </scope>
            </scope>
            <scope startLine="530" endLine="532" />
          </scope>
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* This internal method calculates the inverse of the upper-triangular portion
 * of the R matrix.</text>
      <param>rinv  the storage for the inverse of r</param>
      <param>nreq how many of the regressors to include (either in canonical
 * order, or in the current reordered state)</param>
    </javadoc>
    <method type="void" name="inverse" startLine="547" endLine="574">
      <declaration type="int" name="pos" />
      <declaration type="int" name="pos1" />
      <declaration type="int" name="pos2" />
      <declaration type="double" name="total" />
      <scope startLine="553" endLine="573">
        <scope startLine="554" endLine="570">
          <declaration type="int" name="start" />
          <scope startLine="556" endLine="569">
            <scope startLine="560" endLine="566">
              <scope startLine="562" endLine="564" />
            </scope>
          </scope>
        </scope>
        <scope startLine="570" endLine="572" />
      </scope>
    </method>
    <javadoc>
      <text>* In the original algorithm only the partial correlations of the regressors
 * is returned to the user. In this implementation, we have <pre>
 * corr =
 * {
 * corrxx - lower triangular
 * corrxy - bottom row of the matrix
 * }
 * Replaces subroutines PCORR and COR of:
 * ALGORITHM AS274  APPL. STATIST. (1992) VOL.41, NO. 2 </pre>
 * <p>Calculate partial correlations after the variables in rows
 * 1, 2, ..., IN have been forced into the regression.
 * If IN = 1, and the first row of R represents a constant in the
 * model, then the usual simple correlations are returned.</p>
 * <p>If IN = 0, the value returned in array CORMAT for the correlation
 * of variables Xi & Xj is: <pre>
 * sum ( Xi.Xj ) / Sqrt ( sum (Xi^2) . sum (Xj^2) )</pre></p>
 * <p>On return, array CORMAT contains the upper triangle of the matrix of
 * partial correlations stored by rows, excluding the 1's on the diagonal.
 * e.g. if IN = 2, the consecutive elements returned are:
 * (3,4) (3,5) ... (3,ncol), (4,5) (4,6) ... (4,ncol), etc.
 * Array YCORR stores the partial correlations with the Y-variable
 * starting with YCORR(IN+1) = partial correlation with the variable in
 * position (IN+1). </p></text>
      <param>in how many of the regressors to include (either in canonical
 * order, or in the current reordered state)</param>
      <return>an array with the partial correlations of the remainder of
 * regressors with each other and the regressand, in lower triangular form</return>
    </javadoc>
    <method type="double[]" name="getPartialCorrelations" startLine="609" endLine="677">
      <declaration type="double[]" name="output" />
      <declaration type="int" name="pos" />
      <declaration type="int" name="pos1" />
      <declaration type="int" name="pos2" />
      <declaration type="int" name="rms_off" />
      <declaration type="int" name="wrk_off" />
      <declaration type="double[]" name="rms" />
      <declaration type="double[]" name="work" />
      <declaration type="double" name="sumxx" />
      <declaration type="double" name="sumxy" />
      <declaration type="double" name="sumyy" />
      <declaration type="int" name="offXX" />
      <scope startLine="622" endLine="624" />
      <declaration type="int" name="nvm" />
      <declaration type="int" name="base_pos" />
      <scope startLine="627" endLine="629" />
      <scope startLine="630" endLine="642">
        <scope startLine="633" endLine="636" />
        <scope startLine="637" endLine="639" />
        <scope startLine="639" endLine="641" />
      </scope>
      <scope startLine="644" endLine="646" />
      <scope startLine="647" endLine="649" />
      <scope startLine="651" endLine="674">
        <scope startLine="655" endLine="663">
          <scope startLine="657" endLine="660" />
        </scope>
        <scope startLine="665" endLine="671" />
      </scope>
    </method>
    <javadoc>
      <text>* ALGORITHM AS274 APPL. STATIST. (1992) VOL.41, NO. 2.
 * Move variable from position FROM to position TO in an
 * orthogonal reduction produced by AS75.1.</text>
      <param>from initial position</param>
      <param>to destination</param>
    </javadoc>
    <method type="void" name="vmove" startLine="687" endLine="803">
      <declaration type="double" name="d1" />
      <declaration type="double" name="d2" />
      <declaration type="double" name="X" />
      <declaration type="double" name="d1new" />
      <declaration type="double" name="d2new" />
      <declaration type="double" name="cbar" />
      <declaration type="double" name="sbar" />
      <declaration type="double" name="Y" />
      <declaration type="int" name="first" />
      <declaration type="int" name="inc" />
      <declaration type="int" name="m1" />
      <declaration type="int" name="m2" />
      <declaration type="int" name="mp1" />
      <declaration type="int" name="pos" />
      <declaration type="boolean" name="bSkipTo40" />
      <scope startLine="703" endLine="705" />
      <scope startLine="706" endLine="708" />
      <declaration type="int" name="count" />
      <scope startLine="710" endLine="714" />
      <scope startLine="714" endLine="718" />
      <declaration type="int" name="m" />
      <declaration type="int" name="idx" />
      <scope startLine="722" endLine="802">
        <scope startLine="730" endLine="780">
          <scope startLine="732" endLine="734" />
          <scope startLine="735" endLine="751">
            <scope startLine="739" endLine="745" />
          </scope>
          <scope startLine="751" endLine="760">
            <scope startLine="754" endLine="756" />
          </scope>
          <scope startLine="761" endLine="779">
            <scope startLine="769" endLine="775" />
          </scope>
        </scope>
        <scope startLine="781" endLine="789">
          <scope startLine="783" endLine="788" />
        </scope>
        <comment>Special cases.</comment>
        <comment>break;</comment>
        <comment>break;</comment>
        <comment>Adjust variable order (VORDER), the tolerances (TOL) and</comment>
        <comment>the vector of residual sums of squares (RSS).</comment>
      </scope>
    </method>
    <javadoc>
      <text>* ALGORITHM AS274  APPL. STATIST. (1992) VOL.41, NO. 2
 * <p> Re-order the variables in an orthogonal reduction produced by
 * AS75.1 so that the N variables in LIST start at position POS1,
 * though will not necessarily be in the same order as in LIST.
 * Any variables in VORDER before position POS1 are not moved.
 * Auxiliary routine called: VMOVE. </p>
 * <p>This internal method reorders the regressors.</p></text>
      <param>list the regressors to move</param>
      <param>pos1 where the list will be placed</param>
      <return>-1 error, 0 everything ok</return>
    </javadoc>
    <method type="int" name="reorderRegressors" startLine="820" endLine="845">
      <declaration type="int" name="next" />
      <declaration type="int" name="i" />
      <declaration type="int" name="l" />
      <scope startLine="824" endLine="826" />
      <scope startLine="829" endLine="843">
        <scope startLine="831" endLine="841">
          <scope startLine="832" endLine="840">
            <scope startLine="835" endLine="837" />
            <scope startLine="837" endLine="839" />
          </scope>
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Gets the diagonal of the Hat matrix also known as the leverage matrix.</text>
      <param>row_data returns the diagonal of the hat matrix for this observation</param>
      <return>the diagonal element of the hatmatrix</return>
    </javadoc>
    <method type="double" name="getDiagonalOfHatMatrix" startLine="853" endLine="885">
      <declaration type="double[]" name="wk" />
      <declaration type="int" name="pos" />
      <declaration type="double" name="total" />
      <scope startLine="858" endLine="860" />
      <declaration type="double[]" name="xrow" />
      <scope startLine="862" endLine="866" />
      <scope startLine="866" endLine="868" />
      <declaration type="double" name="hii" />
      <scope startLine="870" endLine="883">
        <scope startLine="871" endLine="873" />
        <scope startLine="873" endLine="882">
          <scope startLine="876" endLine="879" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Gets the order of the regressors, useful if some type of reordering
 * has been called. Calling regress with int[]{} args will trigger
 * a reordering.</text>
      <return>int[] with the current order of the regressors</return>
    </javadoc>
    <method type="int[]" name="getOrderOfRegressors" startLine="894" endLine="896" />
    <javadoc>
      <text>* Conducts a regression on the data in the model, using all regressors.</text>
      <return>RegressionResults the structure holding all regression results</return>
      <exception>ModelSpecificationException - thrown if number of observations is
 * less than the number of variables</exception>
    </javadoc>
    <method type="RegressionResults" name="regress" startLine="905" endLine="907" />
    <javadoc>
      <text>* Conducts a regression on the data in the model, using a subset of regressors.</text>
      <param>numberOfRegressors many of the regressors to include (either in canonical
 * order, or in the current reordered state)</param>
      <return>RegressionResults the structure holding all regression results</return>
      <exception>ModelSpecificationException - thrown if number of observations is
 * less than the number of variables or number of regressors requested
 * is greater than the regressors in the model</exception>
    </javadoc>
    <method type="RegressionResults" name="regress" startLine="919" endLine="991">
      <scope startLine="920" endLine="924" />
      <scope startLine="925" endLine="928" />
      <declaration type="double[]" name="beta" />
      <declaration type="double[]" name="cov" />
      <declaration type="int" name="rnk" />
      <scope startLine="940" endLine="944">
        <scope startLine="941" endLine="943" />
      </scope>
      <declaration type="boolean" name="needsReorder" />
      <scope startLine="947" endLine="952">
        <scope startLine="948" endLine="951" />
      </scope>
      <scope startLine="953" endLine="957" />
      <scope startLine="957" endLine="990">
        <declaration type="double[]" name="betaNew" />
        <declaration type="double[]" name="covNew" />
        <declaration type="int[]" name="newIndices" />
        <scope startLine="962" endLine="969">
          <scope startLine="963" endLine="968">
            <scope startLine="964" endLine="967" />
          </scope>
        </scope>
        <declaration type="int" name="idx1" />
        <declaration type="int" name="idx2" />
        <declaration type="int" name="_i" />
        <declaration type="int" name="_j" />
        <scope startLine="975" endLine="986">
          <scope startLine="977" endLine="985">
            <scope startLine="979" endLine="981" />
            <scope startLine="981" endLine="983" />
          </scope>
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Conducts a regression on the data in the model, using regressors in array
 * Calling this method will change the internal order of the regressors
 * and care is required in interpreting the hatmatrix.</text>
      <param>variablesToInclude array of variables to include in regression</param>
      <return>RegressionResults the structure holding all regression results</return>
      <exception>ModelSpecificationException - thrown if number of observations is
 * less than the number of variables, the number of regressors requested
 * is greater than the regressors in the model or a regressor index in
 * regressor array does not exist</exception>
    </javadoc>
    <method type="RegressionResults" name="regress" startLine="1005" endLine="1101">
      <scope startLine="1006" endLine="1009" />
      <scope startLine="1010" endLine="1014" />
      <declaration type="int" name="iExclude" />
      <scope startLine="1017" endLine="1026">
        <scope startLine="1018" endLine="1021" />
        <scope startLine="1022" endLine="1025" />
      </scope>
      <declaration type="int[]" name="series" />
      <scope startLine="1028" endLine="1037">
        <declaration type="int" name="j" />
        <scope startLine="1031" endLine="1036">
          <scope startLine="1032" endLine="1035" />
        </scope>
      </scope>
      <scope startLine="1037" endLine="1039" />
      <declaration type="double[]" name="beta" />
      <declaration type="double[]" name="cov" />
      <declaration type="int" name="rnk" />
      <scope startLine="1052" endLine="1056">
        <scope startLine="1053" endLine="1055" />
      </scope>
      <declaration type="boolean" name="needsReorder" />
      <scope startLine="1059" endLine="1064">
        <scope startLine="1060" endLine="1063" />
      </scope>
      <scope startLine="1065" endLine="1069" />
      <scope startLine="1069" endLine="1100">
        <declaration type="double[]" name="betaNew" />
        <declaration type="int[]" name="newIndices" />
        <scope startLine="1072" endLine="1079">
          <scope startLine="1073" endLine="1078">
            <scope startLine="1074" endLine="1077" />
          </scope>
        </scope>
        <declaration type="double[]" name="covNew" />
        <declaration type="int" name="idx1" />
        <declaration type="int" name="idx2" />
        <declaration type="int" name="_i" />
        <declaration type="int" name="_j" />
        <scope startLine="1085" endLine="1096">
          <scope startLine="1087" endLine="1095">
            <scope startLine="1089" endLine="1091" />
            <scope startLine="1091" endLine="1093" />
          </scope>
        </scope>
      </scope>
    </method>
  </class>
</source>
