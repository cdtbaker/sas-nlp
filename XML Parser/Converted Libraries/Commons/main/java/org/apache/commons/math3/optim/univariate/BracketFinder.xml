<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.univariate">
  <import name="org.apache.commons.math3.util.Incrementor" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.optim.nonlinear.scalar.GoalType" />
  <class name="BracketFinder" startLine="26">
    <javadoc>
      <text>* Provide an interval that brackets a local optimum of a function.
 * This code is based on a Python implementation (from <em>SciPy</em>,
 * module {@code optimize.py} v0.5).</text>
      <version>$Id: BracketFinder.java 1435539 2013-01-19 13:27:24Z tn $</version>
      <since>2.2</since>
    </javadoc>
    <javadoc>
      <text>* Tolerance to avoid division by zero.</text>
    </javadoc>
    <declaration type="double" name="EPS_MIN" />
    <javadoc>
      <text>* Golden section.</text>
    </javadoc>
    <declaration type="double" name="GOLD" />
    <javadoc>
      <text>* Factor for expanding the interval.</text>
    </javadoc>
    <declaration type="double" name="growLimit" />
    <javadoc>
      <text>* Counter for function evaluations.</text>
    </javadoc>
    <declaration type="Incrementor" name="evaluations" />
    <javadoc>
      <text>* Lower bound of the bracket.</text>
    </javadoc>
    <declaration type="double" name="lo" />
    <javadoc>
      <text>* Higher bound of the bracket.</text>
    </javadoc>
    <declaration type="double" name="hi" />
    <javadoc>
      <text>* Point inside the bracket.</text>
    </javadoc>
    <declaration type="double" name="mid" />
    <javadoc>
      <text>* Function value at {@link #lo}.</text>
    </javadoc>
    <declaration type="double" name="fLo" />
    <javadoc>
      <text>* Function value at {@link #hi}.</text>
    </javadoc>
    <declaration type="double" name="fHi" />
    <javadoc>
      <text>* Function value at {@link #mid}.</text>
    </javadoc>
    <declaration type="double" name="fMid" />
    <javadoc>
      <text>* Constructor with default values {@code 100, 50} (see the{@link #BracketFinder(double,int) other constructor}).</text>
    </javadoc>
    <method type="constructor" name="BracketFinder" startLine="78" endLine="80" />
    <javadoc>
      <text>* Create a bracketing interval finder.</text>
      <param>growLimit Expanding factor.</param>
      <param>maxEvaluations Maximum number of evaluations allowed for finding
 * a bracketing interval.</param>
    </javadoc>
    <method type="constructor" name="BracketFinder" startLine="90" endLine="100">
      <scope startLine="91" endLine="93" />
      <scope startLine="94" endLine="96" />
    </method>
    <javadoc>
      <text>* Search new points that bracket a local optimum of the function.</text>
      <param>func Function whose optimum should be bracketed.</param>
      <param>goal {@link GoalType Goal type}.</param>
      <param>xA Initial point.</param>
      <param>xB Initial point.</param>
      <throws>TooManyEvaluationsException if the maximum number of evaluations
 * is exceeded.</throws>
    </javadoc>
    <method type="void" name="search" startLine="112" endLine="208">
      <declaration type="boolean" name="isMinim" />
      <declaration type="double" name="fA" />
      <declaration type="double" name="fB" />
      <scope startLine="120" endLine="129">
        <declaration type="double" name="tmp" />
      </scope>
      <declaration type="double" name="xC" />
      <declaration type="double" name="fC" />
      <scope startLine="134" endLine="190">
        <declaration type="double" name="tmp1" />
        <declaration type="double" name="tmp2" />
        <declaration type="double" name="val" />
        <declaration type="double" name="denom" />
        <declaration type="double" name="w" />
        <declaration type="double" name="wLim" />
        <declaration type="double" name="fW" />
        <scope startLine="145" endLine="164">
          <scope startLine="149" endLine="155" />
          <scope startLine="157" endLine="161" />
        </scope>
        <scope startLine="164" endLine="167" />
        <scope startLine="167" endLine="179">
          <scope startLine="171" endLine="178" />
        </scope>
        <scope startLine="179" endLine="182" />
      </scope>
      <scope startLine="199" endLine="207">
        <declaration type="double" name="tmp" />
      </scope>
    </method>
    <javadoc>
      <return>the number of evalutations.</return>
    </javadoc>
    <method type="int" name="getMaxEvaluations" startLine="213" endLine="215" />
    <javadoc>
      <return>the number of evalutations.</return>
    </javadoc>
    <method type="int" name="getEvaluations" startLine="220" endLine="222" />
    <javadoc>
      <return>the lower bound of the bracket.</return>
      <see>#getFLo()</see>
    </javadoc>
    <method type="double" name="getLo" startLine="228" endLine="230" />
    <javadoc>
      <text>* Get function value at {@link #getLo()}.</text>
      <return>function value at {@link #getLo()}</return>
    </javadoc>
    <method type="double" name="getFLo" startLine="236" endLine="238" />
    <javadoc>
      <return>the higher bound of the bracket.</return>
      <see>#getFHi()</see>
    </javadoc>
    <method type="double" name="getHi" startLine="244" endLine="246" />
    <javadoc>
      <text>* Get function value at {@link #getHi()}.</text>
      <return>function value at {@link #getHi()}</return>
    </javadoc>
    <method type="double" name="getFHi" startLine="252" endLine="254" />
    <javadoc>
      <return>a point in the middle of the bracket.</return>
      <see>#getFMid()</see>
    </javadoc>
    <method type="double" name="getMid" startLine="260" endLine="262" />
    <javadoc>
      <text>* Get function value at {@link #getMid()}.</text>
      <return>function value at {@link #getMid()}</return>
    </javadoc>
    <method type="double" name="getFMid" startLine="268" endLine="270" />
    <javadoc>
      <param>f Function.</param>
      <param>x Argument.</param>
      <return>{@code f(x)}</return>
      <throws>TooManyEvaluationsException if the maximal number of evaluations is
 * exceeded.</throws>
    </javadoc>
    <method type="double" name="eval" startLine="279" endLine="286">
      <scope startLine="280" endLine="282" />
      <scope startLine="282" endLine="284" />
    </method>
  </class>
</source>
