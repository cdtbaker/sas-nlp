<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathIllegalStateException" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="Array2DRowRealMatrix" extends="AbstractRealMatrix" startLine="32">
    <implements name="Serializable" />
    <javadoc>
      <text>* Implementation of {@link RealMatrix} using a {@code double[][]} array to
 * store entries.</text>
      <version>$Id: Array2DRowRealMatrix.java 1459082 2013-03-20 22:24:09Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Entries of the matrix.</text>
    </javadoc>
    <declaration type="double" name="data" />
    <javadoc>
      <text>* Creates a matrix with no data</text>
    </javadoc>
    <method type="constructor" name="Array2DRowRealMatrix" startLine="48" endLine="48" />
    <javadoc>
      <text>* Create a new RealMatrix with the supplied row and column dimensions.</text>
      <param>rowDimension Number of rows in the new matrix.</param>
      <param>columnDimension Number of columns in the new matrix.</param>
      <throws>NotStrictlyPositiveException if the row or column dimension is
 * not positive.</throws>
    </javadoc>
    <method type="constructor" name="Array2DRowRealMatrix" startLine="60" endLine="63" />
    <javadoc>
      <text>* Create a new {@code RealMatrix} using the input array as the underlying
 * data array.
 * <p>The input array is copied, not referenced. This constructor has
 * the same effect as calling {@link #Array2DRowRealMatrix(double[][],boolean)}with the second argument set to {@code true}.</p></text>
      <param>d Data for the new matrix.</param>
      <throws>DimensionMismatchException if {@code d} is not rectangular.</throws>
      <throws>NoDataException if {@code d} row or column dimension is zero.</throws>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
      <see>#Array2DRowRealMatrix(double[][],boolean)</see>
    </javadoc>
    <method type="constructor" name="Array2DRowRealMatrix" startLine="79" endLine="81" />
    <javadoc>
      <text>* Create a new RealMatrix using the input array as the underlying
 * data array.
 * If an array is built specially in order to be embedded in a
 * RealMatrix and not used directly, the {@code copyArray} may be
 * set to {@code false}. This will prevent the copying and improve
 * performance as no new array will be built and no data will be copied.</text>
      <param>d Data for new matrix.</param>
      <param>copyArray if {@code true}, the input array will be copied,
 * otherwise it will be referenced.</param>
      <throws>DimensionMismatchException if {@code d} is not rectangular.</throws>
      <throws>NoDataException if {@code d} row or column dimension is zero.</throws>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
      <see>#Array2DRowRealMatrix(double[][])</see>
    </javadoc>
    <method type="constructor" name="Array2DRowRealMatrix" startLine="101" endLine="123">
      <scope startLine="102" endLine="104" />
      <scope startLine="104" endLine="122">
        <scope startLine="105" endLine="107" />
        <declaration type="int" name="nRows" />
        <scope startLine="109" endLine="111" />
        <declaration type="int" name="nCols" />
        <scope startLine="113" endLine="115" />
        <scope startLine="116" endLine="120">
          <scope startLine="117" endLine="119" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Create a new (column) RealMatrix using {@code v} as the
 * data for the unique column of the created matrix.
 * The input array is copied.</text>
      <param>v Column vector holding data for new matrix.</param>
    </javadoc>
    <method type="constructor" name="Array2DRowRealMatrix" startLine="132" endLine="138">
      <declaration type="int" name="nRows" />
      <scope startLine="135" endLine="137" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="RealMatrix" name="createMatrix" startLine="144" endLine="146" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="RealMatrix" name="copy" startLine="150" endLine="152" />
    <javadoc>
      <text>* Compute the sum of {@code this} and {@code m}.</text>
      <param>m Matrix to be added.</param>
      <return>{@code this + m}.</return>
      <throws>MatrixDimensionMismatchException if {@code m} is not the same
 * size as {@code this}.</throws>
    </javadoc>
    <method type="Array2DRowRealMatrix" name="add" startLine="163" endLine="180">
      <declaration type="int" name="rowCount" />
      <declaration type="int" name="columnCount" />
      <declaration type="double[][]" name="outData" />
      <scope startLine="170" endLine="177">
        <declaration type="double[]" name="dataRow" />
        <declaration type="double[]" name="mRow" />
        <declaration type="double[]" name="outDataRow" />
        <scope startLine="174" endLine="176" />
      </scope>
      <comment>Safety check.</comment>
    </method>
    <javadoc>
      <text>* Returns {@code this} minus {@code m}.</text>
      <param>m Matrix to be subtracted.</param>
      <return>{@code this - m}</return>
      <throws>MatrixDimensionMismatchException if {@code m} is not the same
 * size as {@code this}.</throws>
    </javadoc>
    <method type="Array2DRowRealMatrix" name="subtract" startLine="191" endLine="207">
      <declaration type="int" name="rowCount" />
      <declaration type="int" name="columnCount" />
      <declaration type="double[][]" name="outData" />
      <scope startLine="197" endLine="204">
        <declaration type="double[]" name="dataRow" />
        <declaration type="double[]" name="mRow" />
        <declaration type="double[]" name="outDataRow" />
        <scope startLine="201" endLine="203" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the result of postmultiplying {@code this} by {@code m}.</text>
      <param>m matrix to postmultiply by</param>
      <return>{@code this * m}</return>
      <throws>DimensionMismatchException if{@code columnDimension(this) != rowDimension(m)}</throws>
    </javadoc>
    <method type="Array2DRowRealMatrix" name="multiply" startLine="218" endLine="249">
      <declaration type="int" name="nRows" />
      <declaration type="int" name="nCols" />
      <declaration type="int" name="nSum" />
      <declaration type="double[][]" name="outData" />
      <declaration type="double[]" name="mCol" />
      <declaration type="double[][]" name="mData" />
      <scope startLine="231" endLine="246">
        <scope startLine="234" endLine="236" />
        <scope startLine="238" endLine="245">
          <declaration type="double[]" name="dataRow" />
          <declaration type="double" name="sum" />
          <scope startLine="241" endLine="243" />
        </scope>
        <comment>Copy all elements of column "col" of "m" so that</comment>
        <comment>will be in contiguous memory.</comment>
      </scope>
      <comment>Will hold a column of "m".</comment>
      <comment>Multiply.</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double[][]" name="getData" startLine="253" endLine="255" />
    <javadoc>
      <text>* Get a reference to the underlying data array.</text>
      <return>2-dimensional array of entries.</return>
    </javadoc>
    <method type="double[][]" name="getDataRef" startLine="262" endLine="264" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setSubMatrix" startLine="271" endLine="300">
      <scope startLine="272" endLine="296">
        <scope startLine="273" endLine="275" />
        <scope startLine="276" endLine="278" />
        <declaration type="int" name="nRows" />
        <scope startLine="281" endLine="283" />
        <declaration type="int" name="nCols" />
        <scope startLine="286" endLine="288" />
        <scope startLine="290" endLine="295">
          <scope startLine="291" endLine="293" />
        </scope>
      </scope>
      <scope startLine="296" endLine="298" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getEntry" startLine="305" endLine="308" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setEntry" startLine="313" endLine="316" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="addToEntry" startLine="322" endLine="325" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="multiplyEntry" startLine="331" endLine="334" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getRowDimension" startLine="338" endLine="340" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getColumnDimension" startLine="344" endLine="346" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double[]" name="operate" startLine="351" endLine="367">
      <declaration type="int" name="nRows" />
      <declaration type="int" name="nCols" />
      <scope startLine="354" endLine="356" />
      <declaration type="double[]" name="out" />
      <scope startLine="358" endLine="365">
        <declaration type="double[]" name="dataRow" />
        <declaration type="double" name="sum" />
        <scope startLine="361" endLine="363" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double[]" name="preMultiply" startLine="372" endLine="390">
      <declaration type="int" name="nRows" />
      <declaration type="int" name="nCols" />
      <scope startLine="375" endLine="377" />
      <declaration type="double[]" name="out" />
      <scope startLine="380" endLine="386">
        <declaration type="double" name="sum" />
        <scope startLine="382" endLine="384" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="walkInRowOrder" startLine="394" endLine="405">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="398" endLine="403">
        <declaration type="double[]" name="rowI" />
        <scope startLine="400" endLine="402" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="walkInRowOrder" startLine="409" endLine="420">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="413" endLine="418">
        <declaration type="double[]" name="rowI" />
        <scope startLine="415" endLine="417" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="walkInRowOrder" startLine="427" endLine="438">
      <scope startLine="431" endLine="436">
        <declaration type="double[]" name="rowI" />
        <scope startLine="433" endLine="435" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="walkInRowOrder" startLine="445" endLine="456">
      <scope startLine="449" endLine="454">
        <declaration type="double[]" name="rowI" />
        <scope startLine="451" endLine="453" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="walkInColumnOrder" startLine="460" endLine="471">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="464" endLine="469">
        <scope startLine="465" endLine="468">
          <declaration type="double[]" name="rowI" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="walkInColumnOrder" startLine="475" endLine="485">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="479" endLine="483">
        <scope startLine="480" endLine="482" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="walkInColumnOrder" startLine="492" endLine="503">
      <scope startLine="496" endLine="501">
        <scope startLine="497" endLine="500">
          <declaration type="double[]" name="rowI" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="walkInColumnOrder" startLine="510" endLine="520">
      <scope startLine="514" endLine="518">
        <scope startLine="515" endLine="517" />
      </scope>
    </method>
    <javadoc>
      <text>* Get a fresh copy of the underlying data array.</text>
      <return>a copy of the underlying data array.</return>
    </javadoc>
    <method type="double[][]" name="copyOut" startLine="527" endLine="535">
      <declaration type="int" name="nRows" />
      <declaration type="double[][]" name="out" />
      <scope startLine="531" endLine="533" />
      <comment>can't copy 2-d array in one shot, otherwise get row references</comment>
    </method>
    <javadoc>
      <text>* Replace data with a fresh copy of the input array.</text>
      <param>in Data to copy.</param>
      <throws>NoDataException if the input array is empty.</throws>
      <throws>DimensionMismatchException if the input array is not rectangular.</throws>
      <throws>NullArgumentException if the input array is {@code null}.</throws>
    </javadoc>
    <method type="void" name="copyIn" startLine="546" endLine="548" />
  </class>
</source>
