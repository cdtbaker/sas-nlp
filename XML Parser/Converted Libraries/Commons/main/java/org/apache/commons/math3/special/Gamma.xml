<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.special">
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.util.ContinuedFraction" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="Gamma" startLine="25">
    <javadoc>
      <text>* <p>
 * This is a utility class that provides computation methods related to the
 * &Gamma; (Gamma) family of functions.
 * </p>
 * <p>
 * Implementation of {@link #invGamma1pm1(double)} and{@link #logGamma1p(double)} is based on the algorithms described in
 * <ul>
 * <li><a href="http://dx.doi.org/10.1145/22721.23109">Didonato and Morris
 * (1986)</a>, <em>Computation of the Incomplete Gamma Function Ratios and
 * their Inverse</em>, TOMS 12(4), 377-393,</li>
 * <li><a href="http://dx.doi.org/10.1145/131766.131776">Didonato and Morris
 * (1992)</a>, <em>Algorithm 708: Significant Digit Computation of the
 * Incomplete Beta Function Ratios</em>, TOMS 18(3), 360-373,</li>
 * </ul>
 * and implemented in the
 * <a href="http://www.dtic.mil/docs/citations/ADA476840">NSWC Library of Mathematical Functions</a>,
 * available
 * <a href="http://www.ualberta.ca/CNS/RESEARCH/Software/NumericalNSWC/site.html">here</a>.
 * This library is "approved for public release", and the
 * <a href="http://www.dtic.mil/dtic/pdf/announcements/CopyrightGuidance.pdf">Copyright guidance</a>
 * indicates that unless otherwise stated in the code, all FORTRAN functions in
 * this library are license free. Since no such notice appears in the code these
 * functions can safely be ported to Commons-Math.
 * </p></text>
      <version>$Id: Gamma.java 1422313 2012-12-15 18:53:41Z psteitz $</version>
    </javadoc>
    <javadoc>
      <text>* <a href="http://en.wikipedia.org/wiki/Euler-Mascheroni_constant">Euler-Mascheroni constant</a></text>
      <since>2.0</since>
    </javadoc>
    <declaration type="double" name="GAMMA" />
    <javadoc>
      <text>* The value of the {@code g} constant in the Lanczos approximation, see{@link #lanczos(double)}.</text>
      <since>3.1</since>
    </javadoc>
    <declaration type="double" name="LANCZOS_G" />
    <javadoc>
      <text>* Maximum allowed numerical error.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_EPSILON" />
    <javadoc>
      <text>* Lanczos coefficients</text>
    </javadoc>
    <declaration type="double[]" name="LANCZOS" />
    <javadoc>
      <text>* Avoid repeated computation of log of 2 PI in logGamma</text>
    </javadoc>
    <declaration type="double" name="HALF_LOG_2_PI" />
    <javadoc>
      <text>* The constant value of &radic;(2&pi;).</text>
    </javadoc>
    <declaration type="double" name="SQRT_TWO_PI" />
    <javadoc>
      <text>* C limit.</text>
    </javadoc>
    <declaration type="double" name="C_LIMIT" />
    <javadoc>
      <text>* S limit.</text>
    </javadoc>
    <declaration type="double" name="S_LIMIT" />
    <javadoc>
      <text>* The constant {@code A0} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_A0" />
    <javadoc>
      <text>* The constant {@code A1} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_A1" />
    <javadoc>
      <text>* The constant {@code B1} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_B1" />
    <javadoc>
      <text>* The constant {@code B2} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_B2" />
    <javadoc>
      <text>* The constant {@code B3} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_B3" />
    <javadoc>
      <text>* The constant {@code B4} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_B4" />
    <javadoc>
      <text>* The constant {@code B5} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_B5" />
    <javadoc>
      <text>* The constant {@code B6} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_B6" />
    <javadoc>
      <text>* The constant {@code B7} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_B7" />
    <javadoc>
      <text>* The constant {@code B8} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_B8" />
    <javadoc>
      <text>* The constant {@code P0} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_P0" />
    <javadoc>
      <text>* The constant {@code P1} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_P1" />
    <javadoc>
      <text>* The constant {@code P2} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_P2" />
    <javadoc>
      <text>* The constant {@code P3} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_P3" />
    <javadoc>
      <text>* The constant {@code P4} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_P4" />
    <javadoc>
      <text>* The constant {@code P5} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_P5" />
    <javadoc>
      <text>* The constant {@code P6} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_P6" />
    <javadoc>
      <text>* The constant {@code Q1} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_Q1" />
    <javadoc>
      <text>* The constant {@code Q2} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_Q2" />
    <javadoc>
      <text>* The constant {@code Q3} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_Q3" />
    <javadoc>
      <text>* The constant {@code Q4} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_Q4" />
    <javadoc>
      <text>* The constant {@code C} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_C" />
    <javadoc>
      <text>* The constant {@code C0} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_C0" />
    <javadoc>
      <text>* The constant {@code C1} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_C1" />
    <javadoc>
      <text>* The constant {@code C2} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_C2" />
    <javadoc>
      <text>* The constant {@code C3} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_C3" />
    <javadoc>
      <text>* The constant {@code C4} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_C4" />
    <javadoc>
      <text>* The constant {@code C5} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_C5" />
    <javadoc>
      <text>* The constant {@code C6} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_C6" />
    <javadoc>
      <text>* The constant {@code C7} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_C7" />
    <javadoc>
      <text>* The constant {@code C8} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_C8" />
    <javadoc>
      <text>* The constant {@code C9} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_C9" />
    <javadoc>
      <text>* The constant {@code C10} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_C10" />
    <javadoc>
      <text>* The constant {@code C11} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_C11" />
    <javadoc>
      <text>* The constant {@code C12} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_C12" />
    <javadoc>
      <text>* The constant {@code C13} defined in {@code DGAM1}.</text>
    </javadoc>
    <declaration type="double" name="INV_GAMMA1P_M1_C13" />
    <javadoc>
      <text>* Default constructor.  Prohibit instantiation.</text>
    </javadoc>
    <method type="constructor" name="Gamma" startLine="219" endLine="219" />
    <javadoc>
      <text>* <p>
 * Returns the value of log&nbsp;&Gamma;(x) for x&nbsp;&gt;&nbsp;0.
 * </p>
 * <p>
 * For x &le; 8, the implementation is based on the double precision
 * implementation in the <em>NSWC Library of Mathematics Subroutines</em>,{@code DGAMLN}. For x &gt; 8, the implementation is based on
 * </p>
 * <ul>
 * <li><a href="http://mathworld.wolfram.com/GammaFunction.html">Gamma
 * Function</a>, equation (28).</li>
 * <li><a href="http://mathworld.wolfram.com/LanczosApproximation.html">
 * Lanczos Approximation</a>, equations (1) through (5).</li>
 * <li><a href="http://my.fit.edu/~gabdo/gamma.txt">Paul Godfrey, A note on
 * the computation of the convergent Lanczos complex Gamma
 * approximation</a></li>
 * </ul></text>
      <param>x Argument.</param>
      <return>the value of {@code log(Gamma(x))}, {@code Double.NaN} if{@code x <= 0.0}.</return>
    </javadoc>
    <method type="double" name="logGamma" startLine="244" endLine="268">
      <declaration type="double" name="ret" />
      <scope startLine="247" endLine="249" />
      <scope startLine="249" endLine="251" />
      <scope startLine="251" endLine="253" />
      <scope startLine="253" endLine="260">
        <declaration type="int" name="n" />
        <declaration type="double" name="prod" />
        <scope startLine="256" endLine="258" />
      </scope>
      <scope startLine="260" endLine="265">
        <declaration type="double" name="sum" />
        <declaration type="double" name="tmp" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the regularized gamma function P(a, x).</text>
      <param>a Parameter.</param>
      <param>x Value.</param>
      <return>the regularized gamma function P(a, x).</return>
      <throws>MaxCountExceededException if the algorithm fails to converge.</throws>
    </javadoc>
    <method type="double" name="regularizedGammaP" startLine="278" endLine="280" />
    <javadoc>
      <text>* Returns the regularized gamma function P(a, x).
 * The implementation of this method is based on:
 * <ul>
 * <li>
 * <a href="http://mathworld.wolfram.com/RegularizedGammaFunction.html">
 * Regularized Gamma Function</a>, equation (1)
 * </li>
 * <li>
 * <a href="http://mathworld.wolfram.com/IncompleteGammaFunction.html">
 * Incomplete Gamma Function</a>, equation (4).
 * </li>
 * <li>
 * <a href="http://mathworld.wolfram.com/ConfluentHypergeometricFunctionoftheFirstKind.html">
 * Confluent Hypergeometric Function of the First Kind</a>, equation (1).
 * </li>
 * </ul></text>
      <param>a the a parameter.</param>
      <param>x the value.</param>
      <param>epsilon When the absolute value of the nth item in the
 * series is less than epsilon the approximation ceases to calculate
 * further elements in the series.</param>
      <param>maxIterations Maximum number of "iterations" to complete.</param>
      <return>the regularized gamma function P(a, x)</return>
      <throws>MaxCountExceededException if the algorithm fails to converge.</throws>
    </javadoc>
    <method type="double" name="regularizedGammaP" startLine="313" endLine="349">
      <declaration type="double" name="ret" />
      <scope startLine="316" endLine="318" />
      <scope startLine="318" endLine="320" />
      <scope startLine="320" endLine="324">
        <comment>use regularizedGammaQ because it should converge faster in this</comment>
        <comment>case.</comment>
      </scope>
      <scope startLine="324" endLine="346">
        <declaration type="double" name="n" />
        <declaration type="double" name="an" />
        <declaration type="double" name="sum" />
        <scope startLine="331" endLine="338" />
        <scope startLine="339" endLine="341" />
        <scope startLine="341" endLine="343" />
        <scope startLine="343" endLine="345" />
        <comment>calculate series</comment>
        <comment>current element index</comment>
        <comment>n-th element in the series</comment>
        <comment>partial sum</comment>
        <comment>compute next element in the series</comment>
        <comment>update partial sum</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the regularized gamma function Q(a, x) = 1 - P(a, x).</text>
      <param>a the a parameter.</param>
      <param>x the value.</param>
      <return>the regularized gamma function Q(a, x)</return>
      <throws>MaxCountExceededException if the algorithm fails to converge.</throws>
    </javadoc>
    <method type="double" name="regularizedGammaQ" startLine="359" endLine="361" />
    <javadoc>
      <text>* Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
 * The implementation of this method is based on:
 * <ul>
 * <li>
 * <a href="http://mathworld.wolfram.com/RegularizedGammaFunction.html">
 * Regularized Gamma Function</a>, equation (1).
 * </li>
 * <li>
 * <a href="http://functions.wolfram.com/GammaBetaErf/GammaRegularized/10/0003/">
 * Regularized incomplete gamma function: Continued fraction representations
 * (formula 06.08.10.0003)</a>
 * </li>
 * </ul></text>
      <param>a the a parameter.</param>
      <param>x the value.</param>
      <param>epsilon When the absolute value of the nth item in the
 * series is less than epsilon the approximation ceases to calculate
 * further elements in the series.</param>
      <param>maxIterations Maximum number of "iterations" to complete.</param>
      <return>the regularized gamma function P(a, x)</return>
      <throws>MaxCountExceededException if the algorithm fails to converge.</throws>
    </javadoc>
    <method type="double" name="regularizedGammaQ" startLine="391" endLine="422">
      <declaration type="double" name="ret" />
      <scope startLine="394" endLine="396" />
      <scope startLine="396" endLine="398" />
      <scope startLine="398" endLine="402">
        <comment>use regularizedGammaP because it should converge faster in this</comment>
        <comment>case.</comment>
      </scope>
      <scope startLine="402" endLine="419">
        <declaration type="ContinuedFraction" name="cf" />
        <method type="double" name="getA" startLine="407" endLine="409" />
        <method type="double" name="getB" startLine="412" endLine="414" />
        <comment>create continued fraction</comment>
      </scope>
    </method>
    <javadoc>
      <text>* <p>Computes the digamma function of x.</p>
 * <p>This is an independently written implementation of the algorithm described in
 * Jose Bernardo, Algorithm AS 103: Psi (Digamma) Function, Applied Statistics, 1976.</p>
 * <p>Some of the constants have been changed to increase accuracy at the moderate expense
 * of run-time.  The result should be accurate to within 10^-8 absolute tolerance for
 * x >= 10^-5 and within 10^-8 relative tolerance for x > 0.</p>
 * <p>Performance for large negative values of x will be quite expensive (proportional to
 * |x|).  Accuracy for negative values of x should be about 10^-8 absolute for results
 * less than 10^5 and 10^-8 relative for results larger than that.</p></text>
      <param>x Argument.</param>
      <return>digamma(x) to within 10-8 relative or absolute error whichever is smaller.</return>
      <see><a href="http://en.wikipedia.org/wiki/Digamma_function">Digamma</a></see>
      <see><a href="http://www.uv.es/~bernardo/1976AppStatist.pdf">Bernardo&apos;s original article </a></see>
      <since>2.0</since>
    </javadoc>
    <method type="double" name="digamma" startLine="445" endLine="462">
      <scope startLine="446" endLine="450">
        <comment>use method 5 from Bernardo AS103</comment>
        <comment>accurate to O(x)</comment>
      </scope>
      <scope startLine="452" endLine="459">
        <declaration type="double" name="inv" />
        <comment>use method 4 (accurate to O(1/x^8)</comment>
        <comment>1       1        1         1</comment>
        <comment>log(x) -  --- - ------ + ------- - -------</comment>
        <comment>2 x   12 x^2   120 x^4   252 x^6</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Computes the trigamma function of x.
 * This function is derived by taking the derivative of the implementation
 * of digamma.</text>
      <param>x Argument.</param>
      <return>trigamma(x) to within 10-8 relative or absolute error whichever is smaller</return>
      <see><a href="http://en.wikipedia.org/wiki/Trigamma_function">Trigamma</a></see>
      <see>Gamma#digamma(double)</see>
      <since>2.0</since>
    </javadoc>
    <method type="double" name="trigamma" startLine="475" endLine="490">
      <scope startLine="476" endLine="478" />
      <scope startLine="480" endLine="487">
        <declaration type="double" name="inv" />
        <comment>1    1      1       1       1</comment>
        <comment>- + ---- + ---- - ----- + -----</comment>
        <comment>x      2      3       5       7</comment>
        <comment>2 x    6 x    30 x    42 x</comment>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Returns the Lanczos approximation used to compute the gamma function.
 * The Lanczos approximation is related to the Gamma function by the
 * following equation
 * <center>{@code gamma(x) = sqrt(2 * pi) / x * (x + g + 0.5) ^ (x + 0.5)
 * * exp(-x - g - 0.5) * lanczos(x)},
 * </center>
 * where {@code g} is the Lanczos constant.
 * </p></text>
      <param>x Argument.</param>
      <return>The Lanczos approximation.</return>
      <see><a href="http://mathworld.wolfram.com/LanczosApproximation.html">Lanczos Approximation</a>
 * equations (1) through (5), and Paul Godfrey's
 * <a href="http://my.fit.edu/~gabdo/gamma.txt">Note on the computation
 * of the convergent Lanczos complex Gamma approximation</a></see>
      <since>3.1</since>
    </javadoc>
    <method type="double" name="lanczos" startLine="512" endLine="518">
      <declaration type="double" name="sum" />
      <scope startLine="514" endLine="516" />
    </method>
    <javadoc>
      <text>* Returns the value of 1 / &Gamma;(1 + x) - 1 for -0&#46;5 &le; x &le;
 * 1&#46;5. This implementation is based on the double precision
 * implementation in the <em>NSWC Library of Mathematics Subroutines</em>,{@code DGAM1}.</text>
      <param>x Argument.</param>
      <return>The value of {@code 1.0 / Gamma(1.0 + x) - 1.0}.</return>
      <throws>NumberIsTooSmallException if {@code x < -0.5}</throws>
      <throws>NumberIsTooLargeException if {@code x > 1.5}</throws>
      <since>3.1</since>
    </javadoc>
    <method type="double" name="invGamma1pm1" startLine="532" endLine="612">
      <scope startLine="534" endLine="536" />
      <scope startLine="537" endLine="539" />
      <declaration type="double" name="ret" />
      <declaration type="double" name="t" />
      <scope startLine="543" endLine="574">
        <declaration type="double" name="a" />
        <declaration type="double" name="b" />
        <declaration type="double" name="c" />
        <scope startLine="569" endLine="571" />
        <scope startLine="571" endLine="573" />
      </scope>
      <scope startLine="574" endLine="609">
        <declaration type="double" name="p" />
        <declaration type="double" name="q" />
        <declaration type="double" name="c" />
        <scope startLine="604" endLine="606" />
        <scope startLine="606" endLine="608" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the value of log &Gamma;(1 + x) for -0&#46;5 &le; x &le; 1&#46;5.
 * This implementation is based on the double precision implementation in
 * the <em>NSWC Library of Mathematics Subroutines</em>, {@code DGMLN1}.</text>
      <param>x Argument.</param>
      <return>The value of {@code log(Gamma(1 + x))}.</return>
      <throws>NumberIsTooSmallException if {@code x < -0.5}.</throws>
      <throws>NumberIsTooLargeException if {@code x > 1.5}.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="double" name="logGamma1p" startLine="626" endLine="636">
      <scope startLine="628" endLine="630" />
      <scope startLine="631" endLine="633" />
    </method>
    <javadoc>
      <text>* Returns the value of Γ(x). Based on the <em>NSWC Library of
 * Mathematics Subroutines</em> double precision implementation,{@code DGAMMA}.</text>
      <param>x Argument.</param>
      <return>the value of {@code Gamma(x)}.</return>
      <since>3.1</since>
    </javadoc>
    <method type="double" name="gamma" startLine="648" endLine="710">
      <scope startLine="650" endLine="652" />
      <declaration type="double" name="ret" />
      <declaration type="double" name="absX" />
      <scope startLine="656" endLine="689">
        <scope startLine="657" endLine="673">
          <declaration type="double" name="prod" />
          <declaration type="double" name="t" />
          <scope startLine="668" endLine="671" />
        </scope>
        <scope startLine="673" endLine="688">
          <declaration type="double" name="prod" />
          <declaration type="double" name="t" />
          <scope startLine="683" endLine="686" />
        </scope>
        <comment>From the recurrence relation
 Gamma(x) = (x - 1)  ...  (x - n)  Gamma(x - n),
 then
 Gamma(t) = 1  [1 + invGamma1pm1(t - 1)],
 where t = x - n. This means that t must satisfy
 -0.5 <= t - 1 <= 1.5.</comment>
        <comment>From the recurrence relation
 Gamma(x) = Gamma(x + n + 1)  [x  (x + 1)  ...  (x + n)]
 then
 Gamma(x + n + 1) = 1  [1 + invGamma1pm1(x + n)],
 which requires -0.5 <= x + n <= 1.5.</comment>
      </scope>
      <scope startLine="689" endLine="708">
        <declaration type="double" name="y" />
        <declaration type="double" name="gammaAbs" />
        <scope startLine="694" endLine="696" />
        <scope startLine="696" endLine="707" />
        <comment>From the reflection formula
 Gamma(x)  Gamma(1 - x)  sin(pi  x) = pi,
 and the recurrence relation
 Gamma(1 - x) = -x  Gamma(-x),
 it is found
 Gamma(x) = -pi  [x  sin(pi  x)  Gamma(-x)].</comment>
      </scope>
    </method>
    <comment>limits for switching algorithm in digamma</comment>
    <comment>Constants for the computation of double invGamma1pm1(double).
 Copied from DGAM1 in the NSWC library.</comment>
  </class>
</source>
