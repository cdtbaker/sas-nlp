<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive">
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="SynchronizedDescriptiveStatistics" extends="DescriptiveStatistics" startLine="23">
    <javadoc>
      <text>* Implementation of{@link org.apache.commons.math3.stat.descriptive.DescriptiveStatistics} that
 * is safe to use in a multithreaded environment.  Multiple threads can safely
 * operate on a single instance without causing runtime exceptions due to race
 * conditions.  In effect, this implementation makes modification and access
 * methods atomic operations for a single instance.  That is to say, as one
 * thread is computing a statistic from the instance, no other thread can modify
 * the instance nor compute another statistic.</text>
      <since>1.2</since>
      <version>$Id: SynchronizedDescriptiveStatistics.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serialization UID</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Construct an instance with infinite window</text>
    </javadoc>
    <method type="constructor" name="SynchronizedDescriptiveStatistics" startLine="44" endLine="47">
      <comment>no try-catch or advertized IAE because arg is valid</comment>
    </method>
    <javadoc>
      <text>* Construct an instance with finite window</text>
      <param>window the finite window size.</param>
      <throws>MathIllegalArgumentException if window size is less than 1 but
 * not equal to {@link #INFINITE_WINDOW}</throws>
    </javadoc>
    <method type="constructor" name="SynchronizedDescriptiveStatistics" startLine="55" endLine="57" />
    <javadoc>
      <text>* A copy constructor. Creates a deep-copy of the {@code original}.</text>
      <param>original the {@code SynchronizedDescriptiveStatistics} instance to copy</param>
      <throws>NullArgumentException if original is null</throws>
    </javadoc>
    <method type="constructor" name="SynchronizedDescriptiveStatistics" startLine="66" endLine="68" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="addValue" startLine="74" endLine="76" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="apply" startLine="82" endLine="84" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="clear" startLine="90" endLine="92" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getElement" startLine="98" endLine="100" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="long" name="getN" startLine="106" endLine="108" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getStandardDeviation" startLine="114" endLine="116" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double[]" name="getValues" startLine="122" endLine="124" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getWindowSize" startLine="130" endLine="132" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setWindowSize" startLine="138" endLine="140" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="String" name="toString" startLine="146" endLine="148" />
    <javadoc>
      <text>* Returns a copy of this SynchronizedDescriptiveStatistics instance with the
 * same internal state.</text>
      <return>a copy of this</return>
    </javadoc>
    <method type="SynchronizedDescriptiveStatistics" name="copy" startLine="157" endLine="163">
      <declaration type="SynchronizedDescriptiveStatistics" name="result" />
      <comment>No try-catch or advertised exception because arguments are guaranteed non-null</comment>
    </method>
    <javadoc>
      <text>* Copies source to dest.
 * <p>Neither source nor dest can be null.</p>
 * <p>Acquires synchronization lock on source, then dest before copying.</p></text>
      <param>source SynchronizedDescriptiveStatistics to copy</param>
      <param>dest SynchronizedDescriptiveStatistics to copy to</param>
      <throws>NullArgumentException if either source or dest is null</throws>
    </javadoc>
    <method type="void" name="copy" startLine="176" endLine="184">
      <scope startLine="179" endLine="183">
        <scope startLine="180" endLine="182" />
      </scope>
    </method>
  </class>
</source>
