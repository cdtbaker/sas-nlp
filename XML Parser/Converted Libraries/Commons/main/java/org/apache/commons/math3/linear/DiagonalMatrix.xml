<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <import name="org.apache.commons.math3.util.Precision" />
  <class name="DiagonalMatrix" extends="AbstractRealMatrix" startLine="30">
    <implements name="Serializable" />
    <javadoc>
      <text>* Implementation of a diagonal matrix.</text>
      <version>$Id$</version>
      <since>3.1.1</since>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Entries of the diagonal.</text>
    </javadoc>
    <declaration type="double[]" name="data" />
    <javadoc>
      <text>* Creates a matrix with the supplied dimension.</text>
      <param>dimension Number of rows and columns in the new matrix.</param>
      <throws>NotStrictlyPositiveException if the dimension is
 * not positive.</throws>
    </javadoc>
    <method type="constructor" name="DiagonalMatrix" startLine="51" endLine="54" />
    <javadoc>
      <text>* Creates a matrix using the input array as the underlying data.
 * <br/>
 * The input array is copied, not referenced.</text>
      <param>d Data for the new matrix.</param>
    </javadoc>
    <method type="constructor" name="DiagonalMatrix" startLine="63" endLine="65" />
    <javadoc>
      <text>* Creates a matrix using the input array as the underlying data.
 * <br/>
 * If an array is created specially in order to be embedded in a
 * this instance and not used directly, the {@code copyArray} may be
 * set to {@code false}.
 * This will prevent the copying and improve performance as no new
 * array will be built and no data will be copied.</text>
      <param>d Data for new matrix.</param>
      <param>copyArray if {@code true}, the input array will be copied,
 * otherwise it will be referenced.</param>
      <exception>NullArgumentException if d is null</exception>
    </javadoc>
    <method type="constructor" name="DiagonalMatrix" startLine="82" endLine="85" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <throws>DimensionMismatchException if the requested dimensions are not equal.</throws>
    </javadoc>
    <method type="RealMatrix" name="createMatrix" startLine="96" endLine="102">
      <scope startLine="97" endLine="99" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="RealMatrix" name="copy" startLine="106" endLine="108" />
    <javadoc>
      <text>* Compute the sum of {@code this} and {@code m}.</text>
      <param>m Matrix to be added.</param>
      <return>{@code this + m}.</return>
      <throws>MatrixDimensionMismatchException if {@code m} is not the same
 * size as {@code this}.</throws>
    </javadoc>
    <method type="DiagonalMatrix" name="add" startLine="119" endLine="130">
      <declaration type="int" name="dim" />
      <declaration type="double[]" name="outData" />
      <scope startLine="125" endLine="127" />
      <comment>Safety check.</comment>
    </method>
    <javadoc>
      <text>* Returns {@code this} minus {@code m}.</text>
      <param>m Matrix to be subtracted.</param>
      <return>{@code this - m}</return>
      <throws>MatrixDimensionMismatchException if {@code m} is not the same
 * size as {@code this}.</throws>
    </javadoc>
    <method type="DiagonalMatrix" name="subtract" startLine="141" endLine="151">
      <declaration type="int" name="dim" />
      <declaration type="double[]" name="outData" />
      <scope startLine="146" endLine="148" />
    </method>
    <javadoc>
      <text>* Returns the result of postmultiplying {@code this} by {@code m}.</text>
      <param>m matrix to postmultiply by</param>
      <return>{@code this * m}</return>
      <throws>DimensionMismatchException if{@code columnDimension(this) != rowDimension(m)}</throws>
    </javadoc>
    <method type="DiagonalMatrix" name="multiply" startLine="162" endLine="172">
      <declaration type="int" name="dim" />
      <declaration type="double[]" name="outData" />
      <scope startLine="167" endLine="169" />
    </method>
    <javadoc>
      <text>* Returns the result of postmultiplying {@code this} by {@code m}.</text>
      <param>m matrix to postmultiply by</param>
      <return>{@code this * m}</return>
      <throws>DimensionMismatchException if{@code columnDimension(this) != rowDimension(m)}</throws>
    </javadoc>
    <method type="RealMatrix" name="multiply" startLine="183" endLine="198">
      <scope startLine="184" endLine="186" />
      <scope startLine="186" endLine="197">
        <declaration type="int" name="nRows" />
        <declaration type="int" name="nCols" />
        <declaration type="double[][]" name="product" />
        <scope startLine="191" endLine="195">
          <scope startLine="192" endLine="194" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double[][]" name="getData" startLine="202" endLine="211">
      <declaration type="int" name="dim" />
      <declaration type="double[][]" name="out" />
      <scope startLine="206" endLine="208" />
    </method>
    <javadoc>
      <text>* Gets a reference to the underlying data array.</text>
      <return>1-dimensional array of entries.</return>
    </javadoc>
    <method type="double[]" name="getDataRef" startLine="218" endLine="220" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getEntry" startLine="225" endLine="228" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <throws>NumberIsTooLargeException if {@code row != column} and value is non-zero.</throws>
    </javadoc>
    <method type="void" name="setEntry" startLine="235" endLine="242">
      <scope startLine="236" endLine="239" />
      <scope startLine="239" endLine="241" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <throws>NumberIsTooLargeException if {@code row != column} and increment is non-zero.</throws>
    </javadoc>
    <method type="void" name="addToEntry" startLine="251" endLine="258">
      <scope startLine="252" endLine="255" />
      <scope startLine="255" endLine="257" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="multiplyEntry" startLine="265" endLine="271">
      <scope startLine="267" endLine="270" />
      <comment>we don't care about non-diagonal elements for multiplication</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getRowDimension" startLine="275" endLine="277" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getColumnDimension" startLine="281" endLine="283" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double[]" name="operate" startLine="288" endLine="290" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double[]" name="preMultiply" startLine="295" endLine="297" />
    <javadoc>
      <text>* Ensure a value is zero.</text>
      <param>value value to check</param>
      <exception>NumberIsTooLargeException if value is not zero</exception>
    </javadoc>
    <method type="void" name="ensureZero" startLine="303" endLine="307">
      <scope startLine="304" endLine="306" />
    </method>
  </class>
</source>
