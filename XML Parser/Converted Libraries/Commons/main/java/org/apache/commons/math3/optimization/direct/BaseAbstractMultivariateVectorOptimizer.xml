<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.direct">
  <import name="org.apache.commons.math3.util.Incrementor" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.analysis.MultivariateVectorFunction" />
  <import name="org.apache.commons.math3.optimization.OptimizationData" />
  <import name="org.apache.commons.math3.optimization.InitialGuess" />
  <import name="org.apache.commons.math3.optimization.Target" />
  <import name="org.apache.commons.math3.optimization.Weight" />
  <import name="org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer" />
  <import name="org.apache.commons.math3.optimization.ConvergenceChecker" />
  <import name="org.apache.commons.math3.optimization.PointVectorValuePair" />
  <import name="org.apache.commons.math3.optimization.SimpleVectorValueChecker" />
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <class name="BaseAbstractMultivariateVectorOptimizer" startLine="36">
    <implements name="BaseMultivariateVectorOptimizer<FUNC>" />
    <javadoc>
      <text>* Base class for implementing optimizers for multivariate scalar functions.
 * This base class handles the boiler-plate methods associated to thresholds
 * settings, iterations and evaluations counting.</text>
      <param><FUNC>
 *  the type of the objective function to be optimized</param>
      <version>$Id: BaseAbstractMultivariateVectorOptimizer.java 1422230 2012-12-15 12:11:13Z erans $</version>
      <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Evaluations counter.</text>
    </javadoc>
    <declaration type="Incrementor" name="evaluations" />
    <javadoc>
      <text>* Convergence checker.</text>
    </javadoc>
    <declaration type="ConvergenceChecker<PointVectorValuePair>" name="checker" />
    <javadoc>
      <text>* Target value for the objective functions at optimum.</text>
    </javadoc>
    <declaration type="double[]" name="target" />
    <javadoc>
      <text>* Weight matrix.</text>
    </javadoc>
    <declaration type="RealMatrix" name="weightMatrix" />
    <javadoc>
      <text>* Weight for the least squares cost computation.</text>
      <deprecated />
    </javadoc>
    <declaration type="double[]" name="weight" />
    <javadoc>
      <text>* Initial guess.</text>
    </javadoc>
    <declaration type="double[]" name="start" />
    <javadoc>
      <text>* Objective function.</text>
    </javadoc>
    <declaration type="FUNC" name="function" />
    <javadoc>
      <text>* Simple constructor with default settings.
 * The convergence check is set to a {@link SimpleVectorValueChecker}.</text>
      <deprecated>See {@link SimpleVectorValueChecker#SimpleVectorValueChecker()}</deprecated>
    </javadoc>
    <method type="constructor" name="BaseAbstractMultivariateVectorOptimizer" startLine="73" endLine="75" />
    <javadoc>
      <param>checker Convergence checker.</param>
    </javadoc>
    <method type="constructor" name="BaseAbstractMultivariateVectorOptimizer" startLine="79" endLine="81" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getMaxEvaluations" startLine="84" endLine="86" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getEvaluations" startLine="89" endLine="91" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="ConvergenceChecker<PointVectorValuePair>" name="getConvergenceChecker" startLine="94" endLine="96" />
    <javadoc>
      <text>* Compute the objective function value.</text>
      <param>point Point at which the objective function must be evaluated.</param>
      <return>the objective function value at the specified point.</return>
      <throws>TooManyEvaluationsException if the maximal number of evaluations is
 * exceeded.</throws>
    </javadoc>
    <method type="double[]" name="computeObjectiveValue" startLine="106" endLine="113">
      <scope startLine="107" endLine="109" />
      <scope startLine="109" endLine="111" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <deprecated>As of 3.1. Please use{@link #optimize(int,MultivariateVectorFunction,OptimizationData[])}instead.</deprecated>
    </javadoc>
    <method type="PointVectorValuePair" name="optimize" startLine="123" endLine="125" />
    <javadoc>
      <text>* Optimize an objective function.</text>
      <param>maxEval Allowed number of evaluations of the objective function.</param>
      <param>f Objective function.</param>
      <param>optData Optimization data. The following data will be looked for:
 * <ul>
 * <li>{@link Target}</li>
 * <li>{@link Weight}</li>
 * <li>{@link InitialGuess}</li>
 * </ul></param>
      <return>the point/value pair giving the optimal value of the objective
 * function.</return>
      <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
      <throws>DimensionMismatchException if the initial guess, target, and weight
 * arguments have inconsistent dimensions.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="PointVectorValuePair" name="optimize" startLine="151" endLine="153" />
    <javadoc>
      <text>* Optimize an objective function.
 * Optimization is considered to be a weighted least-squares minimization.
 * The cost function to be minimized is
 * <code>&sum;weight<sub>i</sub>(objective<sub>i</sub> - target<sub>i</sub>)<sup>2</sup></code></text>
      <param>f Objective function.</param>
      <param>t Target value for the objective functions at optimum.</param>
      <param>w Weights for the least squares cost computation.</param>
      <param>startPoint Start point for optimization.</param>
      <return>the point/value pair giving the optimal value for objective
 * function.</return>
      <param>maxEval Maximum number of function evaluations.</param>
      <throws>org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.</throws>
      <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.</throws>
      <throws>org.apache.commons.math3.exception.NullArgumentException if
 * any argument is {@code null}.</throws>
      <deprecated>As of 3.1. Please use{@link #optimizeInternal(int,MultivariateVectorFunction,OptimizationData[])}instead.</deprecated>
    </javadoc>
    <method type="PointVectorValuePair" name="optimizeInternal" startLine="181" endLine="203">
      <scope startLine="183" endLine="185" />
      <scope startLine="186" endLine="188" />
      <scope startLine="189" endLine="191" />
      <scope startLine="192" endLine="194" />
      <scope startLine="195" endLine="197" />
      <comment>Checks.</comment>
    </method>
    <javadoc>
      <text>* Optimize an objective function.</text>
      <param>maxEval Allowed number of evaluations of the objective function.</param>
      <param>f Objective function.</param>
      <param>optData Optimization data. The following data will be looked for:
 * <ul>
 * <li>{@link Target}</li>
 * <li>{@link Weight}</li>
 * <li>{@link InitialGuess}</li>
 * </ul></param>
      <return>the point/value pair giving the optimal value of the objective
 * function.</return>
      <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
      <throws>DimensionMismatchException if the initial guess, target, and weight
 * arguments have inconsistent dimensions.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="PointVectorValuePair" name="optimizeInternal" startLine="229" endLine="242">
      <comment>Set internal state.</comment>
      <comment>Retrieve other settings.</comment>
      <comment>Check input consistency.</comment>
      <comment>Allow subclasses to reset their own internal state.</comment>
      <comment>Perform computation.</comment>
    </method>
    <javadoc>
      <text>* Gets the initial values of the optimized parameters.</text>
      <return>the initial guess.</return>
    </javadoc>
    <method type="double[]" name="getStartPoint" startLine="249" endLine="251" />
    <javadoc>
      <text>* Gets the weight matrix of the observations.</text>
      <return>the weight matrix.</return>
      <since>3.1</since>
    </javadoc>
    <method type="RealMatrix" name="getWeight" startLine="259" endLine="261" />
    <javadoc>
      <text>* Gets the observed values to be matched by the objective vector
 * function.</text>
      <return>the target values.</return>
      <since>3.1</since>
    </javadoc>
    <method type="double[]" name="getTarget" startLine="269" endLine="271" />
    <javadoc>
      <text>* Gets the objective vector function.
 * Note that this access bypasses the evaluation counter.</text>
      <return>the objective vector function.</return>
      <since>3.1</since>
    </javadoc>
    <method type="FUNC" name="getObjectiveFunction" startLine="280" endLine="282" />
    <method name="doOptimize" type="PointVectorValuePair" startLine="284" endLine="290" />
    <javadoc>
      <text>* Perform the bulk of the optimization algorithm.</text>
      <return>the point/value pair giving the optimal value for the
 * objective function.</return>
    </javadoc>
    <javadoc>
      <return>a reference to the {@link #target array}.</return>
      <deprecated>As of 3.1.</deprecated>
    </javadoc>
    <method type="double[]" name="getTargetRef" startLine="297" endLine="299" />
    <javadoc>
      <return>a reference to the {@link #weight array}.</return>
      <deprecated>As of 3.1.</deprecated>
    </javadoc>
    <method type="double[]" name="getWeightRef" startLine="305" endLine="307" />
    <javadoc>
      <text>* Method which a subclass <em>must</em> override whenever its internal
 * state depend on the {@link OptimizationData input} parsed by this base
 * class.
 * It will be called after the parsing step performed in the{@link #optimize(int,MultivariateVectorFunction,OptimizationData[])optimize} method and just before {@link #doOptimize()}.</text>
      <since>3.1</since>
    </javadoc>
    <method type="void" name="setUp" startLine="319" endLine="326">
      <declaration type="int" name="dim" />
      <scope startLine="323" endLine="325" />
      <comment>XXX Temporary code until the new internal data is used everywhere.</comment>
    </method>
    <javadoc>
      <text>* Scans the list of (required and optional) optimization data that
 * characterize the problem.</text>
      <param>optData Optimization data. The following data will be looked for:
 * <ul>
 * <li>{@link Target}</li>
 * <li>{@link Weight}</li>
 * <li>{@link InitialGuess}</li>
 * </ul></param>
    </javadoc>
    <method type="void" name="parseOptimizationData" startLine="339" endLine="356">
      <scope startLine="342" endLine="355">
        <scope startLine="343" endLine="346" />
        <scope startLine="347" endLine="350" />
        <scope startLine="351" endLine="354" />
      </scope>
      <comment>The existing values (as set by the previous call) are reused if</comment>
      <comment>not provided in the argument list.</comment>
    </method>
    <javadoc>
      <text>* Check parameters consistency.</text>
      <throws>DimensionMismatchException if {@link #target} and{@link #weightMatrix} have inconsistent dimensions.</throws>
    </javadoc>
    <method type="void" name="checkParameters" startLine="364" endLine="369">
      <scope startLine="365" endLine="368" />
    </method>
  </class>
</source>
