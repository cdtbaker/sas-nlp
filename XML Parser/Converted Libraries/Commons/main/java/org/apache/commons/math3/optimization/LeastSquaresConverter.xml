<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization">
  <import name="org.apache.commons.math3.analysis.MultivariateFunction" />
  <import name="org.apache.commons.math3.analysis.MultivariateVectorFunction" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <class name="LeastSquaresConverter" startLine="25">
    <implements name="MultivariateFunction" />
    <javadoc>
      <text>* This class converts {@link MultivariateVectorFunction vectorial
 * objective functions} to {@link MultivariateFunction scalar objective functions}when the goal is to minimize them.
 * <p>
 * This class is mostly used when the vectorial objective function represents
 * a theoretical result computed from a point set applied to a model and
 * the models point must be adjusted to fit the theoretical result to some
 * reference observations. The observations may be obtained for example from
 * physical measurements whether the model is built from theoretical
 * considerations.
 * </p>
 * <p>
 * This class computes a possibly weighted squared sum of the residuals, which is
 * a scalar value. The residuals are the difference between the theoretical model
 * (i.e. the output of the vectorial objective function) and the observations. The
 * class implements the {@link MultivariateFunction} interface and can therefore be
 * minimized by any optimizer supporting scalar objectives functions.This is one way
 * to perform a least square estimation. There are other ways to do this without using
 * this converter, as some optimization algorithms directly support vectorial objective
 * functions.
 * </p>
 * <p>
 * This class support combination of residuals with or without weights and correlations.
 * </p></text>
      <see>MultivariateFunction</see>
      <see>MultivariateVectorFunction</see>
      <version>$Id: LeastSquaresConverter.java 1422230 2012-12-15 12:11:13Z erans $</version>
      <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Underlying vectorial function.</text>
    </javadoc>
    <declaration type="MultivariateVectorFunction" name="function" />
    <javadoc>
      <text>* Observations to be compared to objective function to compute residuals.</text>
    </javadoc>
    <declaration type="double[]" name="observations" />
    <javadoc>
      <text>* Optional weights for the residuals.</text>
    </javadoc>
    <declaration type="double[]" name="weights" />
    <javadoc>
      <text>* Optional scaling matrix (weight and correlations) for the residuals.</text>
    </javadoc>
    <declaration type="RealMatrix" name="scale" />
    <javadoc>
      <text>* Build a simple converter for uncorrelated residuals with the same weight.</text>
      <param>function vectorial residuals function to wrap</param>
      <param>observations observations to be compared to objective function to compute residuals</param>
    </javadoc>
    <method type="constructor" name="LeastSquaresConverter" startLine="77" endLine="82" />
    <javadoc>
      <text>* Build a simple converter for uncorrelated residuals with the specific weights.
 * <p>
 * The scalar objective function value is computed as:
 * <pre>
 * objective = &sum;weight<sub>i</sub>(observation<sub>i</sub>-objective<sub>i</sub>)<sup>2</sup>
 * </pre>
 * </p>
 * <p>
 * Weights can be used for example to combine residuals with different standard
 * deviations. As an example, consider a residuals array in which even elements
 * are angular measurements in degrees with a 0.01&deg; standard deviation and
 * odd elements are distance measurements in meters with a 15m standard deviation.
 * In this case, the weights array should be initialized with value
 * 1.0/(0.01<sup>2</sup>) in the even elements and 1.0/(15.0<sup>2</sup>) in the
 * odd elements (i.e. reciprocals of variances).
 * </p>
 * <p>
 * The array computed by the objective function, the observations array and the
 * weights array must have consistent sizes or a {@link DimensionMismatchException}will be triggered while computing the scalar objective.
 * </p></text>
      <param>function vectorial residuals function to wrap</param>
      <param>observations observations to be compared to objective function to compute residuals</param>
      <param>weights weights to apply to the residuals</param>
      <exception>DimensionMismatchException if the observations vector and the weights
 * vector dimensions do not match (objective function dimension is checked only when
 * the {@link #value(double[])} method is called)</exception>
    </javadoc>
    <method type="constructor" name="LeastSquaresConverter" startLine="113" endLine="121">
      <scope startLine="114" endLine="116" />
    </method>
    <javadoc>
      <text>* Build a simple converter for correlated residuals with the specific weights.
 * <p>
 * The scalar objective function value is computed as:
 * <pre>
 * objective = y<sup>T</sup>y with y = scale&times;(observation-objective)
 * </pre>
 * </p>
 * <p>
 * The array computed by the objective function, the observations array and the
 * the scaling matrix must have consistent sizes or a {@link DimensionMismatchException}will be triggered while computing the scalar objective.
 * </p></text>
      <param>function vectorial residuals function to wrap</param>
      <param>observations observations to be compared to objective function to compute residuals</param>
      <param>scale scaling matrix</param>
      <throws>DimensionMismatchException if the observations vector and the scale
 * matrix dimensions do not match (objective function dimension is checked only when
 * the {@link #value(double[])} method is called)</throws>
    </javadoc>
    <method type="constructor" name="LeastSquaresConverter" startLine="143" endLine="151">
      <scope startLine="144" endLine="146" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value" startLine="154" endLine="182">
      <declaration type="double[]" name="residuals" />
      <scope startLine="157" endLine="159" />
      <scope startLine="160" endLine="162" />
      <declaration type="double" name="sumSquares" />
      <scope startLine="166" endLine="171">
        <scope startLine="167" endLine="170">
          <declaration type="double" name="ri" />
        </scope>
      </scope>
      <scope startLine="171" endLine="175">
        <scope startLine="172" endLine="174" />
      </scope>
      <scope startLine="175" endLine="179">
        <scope startLine="176" endLine="178" />
      </scope>
      <comment>compute residuals</comment>
      <comment>compute sum of squares</comment>
    </method>
  </class>
</source>
