<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.util">
  <import name="org.apache.commons.math3.RealFieldElement" />
  <import name="org.apache.commons.math3.Field" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <class name="Decimal64" extends="Number" startLine="23">
    <implements name="RealFieldElement<Decimal64>" />
    <implements name="Comparable<Decimal64>" />
    <javadoc>
      <text>* This class wraps a {@code double} value in an object. It is similar to the
 * standard class {@link Double}, while also implementing the{@link RealFieldElement} interface.</text>
      <since>3.1</since>
      <version>$Id: Decimal64.java 1462423 2013-03-29 07:25:18Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* The constant value of {@code 0d} as a {@code Decimal64}.</text>
    </javadoc>
    <declaration type="Decimal64" name="ZERO" />
    <javadoc>
      <text>* The constant value of {@code 1d} as a {@code Decimal64}.</text>
    </javadoc>
    <declaration type="Decimal64" name="ONE" />
    <javadoc>
      <text>* The constant value of {@link Double#NEGATIVE_INFINITY} as a{@code Decimal64}.</text>
    </javadoc>
    <declaration type="Decimal64" name="NEGATIVE_INFINITY" />
    <javadoc>
      <text>* The constant value of {@link Double#POSITIVE_INFINITY} as a{@code Decimal64}.</text>
    </javadoc>
    <declaration type="Decimal64" name="POSITIVE_INFINITY" />
    <javadoc>
      <text>* The constant value of {@link Double#NaN} as a {@code Decimal64}.</text>
    </javadoc>
    <declaration type="Decimal64" name="NAN" />
    <javadoc />
    <declaration type="long" name="serialVersionUID" />
    <scope startLine="58" endLine="64" />
    <javadoc>
      <text>* The primitive {@code double} value of this object.</text>
    </javadoc>
    <declaration type="double" name="value" />
    <javadoc>
      <text>* Creates a new instance of this class.</text>
      <param>x the primitive {@code double} value of the object to be created</param>
    </javadoc>
    <method type="constructor" name="Decimal64" startLine="74" endLine="76" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Field<Decimal64>" name="getField" startLine="83" endLine="85" />
    <javadoc>
      <text>* {@inheritDoc}The current implementation strictly enforces{@code this.add(a).equals(new Decimal64(this.doubleValue()
 * + a.doubleValue()))}.</text>
    </javadoc>
    <method type="Decimal64" name="add" startLine="94" endLine="96" />
    <javadoc>
      <text>* {@inheritDoc}The current implementation strictly enforces{@code this.subtract(a).equals(new Decimal64(this.doubleValue()
 * - a.doubleValue()))}.</text>
    </javadoc>
    <method type="Decimal64" name="subtract" startLine="105" endLine="107" />
    <javadoc>
      <text>* {@inheritDoc}The current implementation strictly enforces{@code this.negate().equals(new Decimal64(-this.doubleValue()))}.</text>
    </javadoc>
    <method type="Decimal64" name="negate" startLine="115" endLine="117" />
    <javadoc>
      <text>* {@inheritDoc}The current implementation strictly enforces{@code this.multiply(a).equals(new Decimal64(this.doubleValue()
 * * a.doubleValue()))}.</text>
    </javadoc>
    <method type="Decimal64" name="multiply" startLine="126" endLine="128" />
    <javadoc>
      <text>* {@inheritDoc}The current implementation strictly enforces{@code this.multiply(n).equals(new Decimal64(n * this.doubleValue()))}.</text>
    </javadoc>
    <method type="Decimal64" name="multiply" startLine="136" endLine="138" />
    <javadoc>
      <text>* {@inheritDoc}The current implementation strictly enforces{@code this.divide(a).equals(new Decimal64(this.doubleValue()
 * / a.doubleValue()))}.</text>
    </javadoc>
    <method type="Decimal64" name="divide" startLine="148" endLine="150" />
    <javadoc>
      <text>* {@inheritDoc}The current implementation strictly enforces{@code this.reciprocal().equals(new Decimal64(1.0
 * / this.doubleValue()))}.</text>
    </javadoc>
    <method type="Decimal64" name="reciprocal" startLine="159" endLine="161" />
    <javadoc>
      <text>* {@inheritDoc}The current implementation performs casting to a {@code byte}.</text>
    </javadoc>
    <method type="byte" name="byteValue" startLine="173" endLine="175" />
    <javadoc>
      <text>* {@inheritDoc}The current implementation performs casting to a {@code short}.</text>
    </javadoc>
    <method type="short" name="shortValue" startLine="183" endLine="185" />
    <javadoc>
      <text>* {@inheritDoc}The current implementation performs casting to a {@code int}.</text>
    </javadoc>
    <method type="int" name="intValue" startLine="193" endLine="195" />
    <javadoc>
      <text>* {@inheritDoc}The current implementation performs casting to a {@code long}.</text>
    </javadoc>
    <method type="long" name="longValue" startLine="203" endLine="205" />
    <javadoc>
      <text>* {@inheritDoc}The current implementation performs casting to a {@code float}.</text>
    </javadoc>
    <method type="float" name="floatValue" startLine="213" endLine="215" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="doubleValue" startLine="219" endLine="221" />
    <javadoc>
      <text>* {@inheritDoc}The current implementation returns the same value as
 * <center> {@code new Double(this.doubleValue()).compareTo(new
 * Double(o.doubleValue()))} </center></text>
      <see>Double#compareTo(Double)</see>
    </javadoc>
    <method type="int" name="compareTo" startLine="236" endLine="238" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="equals" startLine="246" endLine="253">
      <scope startLine="247" endLine="251">
        <declaration type="Decimal64" name="that" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}The current implementation returns the same value as{@code new Double(this.doubleValue()).hashCode()}</text>
      <see>Double#hashCode()</see>
    </javadoc>
    <method type="int" name="hashCode" startLine="264" endLine="267">
      <declaration type="long" name="v" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}The returned {@code String} is equal to{@code Double.toString(this.doubleValue())}</text>
      <see>Double#toString(double)</see>
    </javadoc>
    <method type="String" name="toString" startLine="278" endLine="280" />
    <javadoc>
      <text>* Returns {@code true} if {@code this} double precision number is infinite
 * ({@link Double#POSITIVE_INFINITY} or {@link Double#NEGATIVE_INFINITY}).</text>
      <return>{@code true} if {@code this} number is infinite</return>
    </javadoc>
    <method type="boolean" name="isInfinite" startLine="292" endLine="294" />
    <javadoc>
      <text>* Returns {@code true} if {@code this} double precision number is
 * Not-a-Number ({@code NaN}), false otherwise.</text>
      <return>{@code true} if {@code this} is {@code NaN}</return>
    </javadoc>
    <method type="boolean" name="isNaN" startLine="302" endLine="304" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="double" name="getReal" startLine="309" endLine="311" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="add" startLine="316" endLine="318" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="subtract" startLine="323" endLine="325" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="multiply" startLine="330" endLine="332" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="divide" startLine="337" endLine="339" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="remainder" startLine="344" endLine="346" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="remainder" startLine="351" endLine="353" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="abs" startLine="358" endLine="360" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="ceil" startLine="365" endLine="367" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="floor" startLine="372" endLine="374" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="rint" startLine="379" endLine="381" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="long" name="round" startLine="386" endLine="388" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="signum" startLine="393" endLine="395" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="copySign" startLine="400" endLine="402" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="copySign" startLine="407" endLine="409" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="scalb" startLine="414" endLine="416" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="hypot" startLine="421" endLine="423" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="sqrt" startLine="428" endLine="430" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="cbrt" startLine="435" endLine="437" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="rootN" startLine="442" endLine="448">
      <scope startLine="443" endLine="445" />
      <scope startLine="445" endLine="447" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="pow" startLine="453" endLine="455" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="pow" startLine="460" endLine="462" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="pow" startLine="467" endLine="469" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="exp" startLine="474" endLine="476" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="expm1" startLine="481" endLine="483" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="log" startLine="488" endLine="490" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="log1p" startLine="495" endLine="497" />
    <javadoc>
      <text>* Base 10 logarithm.</text>
      <return>base 10 logarithm of the instance</return>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="log10" startLine="503" endLine="505" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="cos" startLine="510" endLine="512" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="sin" startLine="517" endLine="519" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="tan" startLine="524" endLine="526" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="acos" startLine="531" endLine="533" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="asin" startLine="538" endLine="540" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="atan" startLine="545" endLine="547" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="atan2" startLine="552" endLine="554" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="cosh" startLine="559" endLine="561" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="sinh" startLine="566" endLine="568" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="tanh" startLine="573" endLine="575" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="acosh" startLine="580" endLine="582" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="asinh" startLine="587" endLine="589" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="atanh" startLine="594" endLine="596" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="linearCombination" startLine="602" endLine="613">
      <scope startLine="603" endLine="605" />
      <declaration type="double[]" name="aDouble" />
      <declaration type="double[]" name="bDouble" />
      <scope startLine="608" endLine="611" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="linearCombination" startLine="619" endLine="628">
      <scope startLine="620" endLine="622" />
      <declaration type="double[]" name="bDouble" />
      <scope startLine="624" endLine="626" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="linearCombination" startLine="634" endLine="637" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="linearCombination" startLine="643" endLine="646" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="linearCombination" startLine="653" endLine="657" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="linearCombination" startLine="664" endLine="668" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="linearCombination" startLine="676" endLine="681" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="Decimal64" name="linearCombination" startLine="689" endLine="694" />
    <comment>Methods from the FieldElement interface.</comment>
    <comment>Methods from the Number abstract class</comment>
    <comment>Methods from the Comparable interface.</comment>
    <comment>Methods from the Object abstract class.</comment>
    <comment>Methods inspired by the Double class.</comment>
  </class>
</source>
