<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.special.Beta" />
  <import name="org.apache.commons.math3.util.ArithmeticUtils" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937c" />
  <class name="PascalDistribution" extends="AbstractIntegerDistribution" startLine="28">
    <javadoc>
      <text>* <p>
 * Implementation of the Pascal distribution. The Pascal distribution is a
 * special case of the Negative Binomial distribution where the number of
 * successes parameter is an integer.
 * </p>
 * <p>
 * There are various ways to express the probability mass and distribution
 * functions for the Pascal distribution. The present implementation represents
 * the distribution of the number of failures before {@code r} successes occur.
 * This is the convention adopted in e.g.
 * <a href="http://mathworld.wolfram.com/NegativeBinomialDistribution.html">MathWorld</a>,
 * but <em>not</em> in
 * <a href="http://en.wikipedia.org/wiki/Negative_binomial_distribution">Wikipedia</a>.
 * </p>
 * <p>
 * For a random variable {@code X} whose values are distributed according to this
 * distribution, the probability mass function is given by<br/>{@code P(X = k) = C(k + r - 1, r - 1) * p^r * (1 - p)^k,}<br/>
 * where {@code r} is the number of successes, {@code p} is the probability of
 * success, and {@code X} is the total number of failures. {@code C(n, k)} is
 * the binomial coefficient ({@code n} choose {@code k}). The mean and variance
 * of {@code X} are<br/>{@code E(X) = (1 - p) * r / p, var(X) = (1 - p) * r / p^2.}<br/>
 * Finally, the cumulative distribution function is given by<br/>{@code P(X <= k) = I(p, r, k + 1)},
 * where I is the regularized incomplete Beta function.
 * </p></text>
      <see><a href="http://en.wikipedia.org/wiki/Negative_binomial_distribution">
 * Negative binomial distribution (Wikipedia)</a></see>
      <see><a href="http://mathworld.wolfram.com/NegativeBinomialDistribution.html">
 * Negative binomial distribution (MathWorld)</a></see>
      <version>$Id: PascalDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>1.2 (changed to concrete class in 3.0)</since>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* The number of successes.</text>
    </javadoc>
    <declaration type="int" name="numberOfSuccesses" />
    <javadoc>
      <text>* The probability of success.</text>
    </javadoc>
    <declaration type="double" name="probabilityOfSuccess" />
    <javadoc>
      <text>* Create a Pascal distribution with the given number of successes and
 * probability of success.</text>
      <param>r Number of successes.</param>
      <param>p Probability of success.</param>
      <throws>NotStrictlyPositiveException if the number of successes is not positive</throws>
      <throws>OutOfRangeException if the probability of success is not in the
 * range {@code [0, 1]}.</throws>
    </javadoc>
    <method type="constructor" name="PascalDistribution" startLine="83" endLine="85" />
    <javadoc>
      <text>* Create a Pascal distribution with the given number of successes and
 * probability of success.</text>
      <param>rng Random number generator.</param>
      <param>r Number of successes.</param>
      <param>p Probability of success.</param>
      <throws>NotStrictlyPositiveException if the number of successes is not positive</throws>
      <throws>OutOfRangeException if the probability of success is not in the
 * range {@code [0, 1]}.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="PascalDistribution" startLine="102" endLine="115">
      <scope startLine="105" endLine="108" />
      <scope startLine="109" endLine="111" />
    </method>
    <javadoc>
      <text>* Access the number of successes for this distribution.</text>
      <return>the number of successes.</return>
    </javadoc>
    <method type="int" name="getNumberOfSuccesses" startLine="122" endLine="124" />
    <javadoc>
      <text>* Access the probability of success for this distribution.</text>
      <return>the probability of success.</return>
    </javadoc>
    <method type="double" name="getProbabilityOfSuccess" startLine="131" endLine="133" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="probability" startLine="136" endLine="147">
      <declaration type="double" name="ret" />
      <scope startLine="138" endLine="140" />
      <scope startLine="140" endLine="145" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="150" endLine="159">
      <declaration type="double" name="ret" />
      <scope startLine="152" endLine="154" />
      <scope startLine="154" endLine="157" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}For number of successes {@code r} and probability of success {@code p},
 * the mean is {@code r * (1 - p) / p}.</text>
    </javadoc>
    <method type="double" name="getNumericalMean" startLine="167" endLine="171">
      <declaration type="double" name="p" />
      <declaration type="double" name="r" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}For number of successes {@code r} and probability of success {@code p},
 * the variance is {@code r * (1 - p) / p^2}.</text>
    </javadoc>
    <method type="double" name="getNumericalVariance" startLine="179" endLine="183">
      <declaration type="double" name="p" />
      <declaration type="double" name="r" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}The lower bound of the support is always 0 no matter the parameters.</text>
      <return>lower bound of the support (always 0)</return>
    </javadoc>
    <method type="int" name="getSupportLowerBound" startLine="192" endLine="194" />
    <javadoc>
      <text>* {@inheritDoc}The upper bound of the support is always positive infinity no matter the
 * parameters. Positive infinity is symbolized by {@code Integer.MAX_VALUE}.</text>
      <return>upper bound of the support (always {@code Integer.MAX_VALUE}for positive infinity)</return>
    </javadoc>
    <method type="int" name="getSupportUpperBound" startLine="205" endLine="207" />
    <javadoc>
      <text>* {@inheritDoc}The support of this distribution is connected.</text>
      <return>{@code true}</return>
    </javadoc>
    <method type="boolean" name="isSupportConnected" startLine="216" endLine="218" />
  </class>
</source>
