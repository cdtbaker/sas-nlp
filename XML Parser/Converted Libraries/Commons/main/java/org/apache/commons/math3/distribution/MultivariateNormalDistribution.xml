<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.linear.Array2DRowRealMatrix" />
  <import name="org.apache.commons.math3.linear.EigenDecomposition" />
  <import name="org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException" />
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <import name="org.apache.commons.math3.linear.SingularMatrixException" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937c" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <class name="MultivariateNormalDistribution" extends="AbstractMultivariateRealDistribution" startLine="30">
    <javadoc>
      <text>* Implementation of the multivariate normal (Gaussian) distribution.</text>
      <see><a href="http://en.wikipedia.org/wiki/Multivariate_normal_distribution">
 * Multivariate normal distribution (Wikipedia)</a></see>
      <see><a href="http://mathworld.wolfram.com/MultivariateNormalDistribution.html">
 * Multivariate normal distribution (MathWorld)</a></see>
      <version>$Id: MultivariateNormalDistribution.java 1433367 2013-01-15 12:15:50Z erans $</version>
      <since>3.1</since>
    </javadoc>
    <javadoc>
      <text>* Vector of means.</text>
    </javadoc>
    <declaration type="double[]" name="means" />
    <javadoc>
      <text>* Covariance matrix.</text>
    </javadoc>
    <declaration type="RealMatrix" name="covarianceMatrix" />
    <javadoc>
      <text>* The matrix inverse of the covariance matrix.</text>
    </javadoc>
    <declaration type="RealMatrix" name="covarianceMatrixInverse" />
    <javadoc>
      <text>* The determinant of the covariance matrix.</text>
    </javadoc>
    <declaration type="double" name="covarianceMatrixDeterminant" />
    <javadoc>
      <text>* Matrix used in computation of samples.</text>
    </javadoc>
    <declaration type="RealMatrix" name="samplingMatrix" />
    <javadoc>
      <text>* Creates a multivariate normal distribution with the given mean vector and
 * covariance matrix.
 * <br/>
 * The number of dimensions is equal to the length of the mean vector
 * and to the number of rows and columns of the covariance matrix.
 * It is frequently written as "p" in formulae.</text>
      <param>means Vector of means.</param>
      <param>covariances Covariance matrix.</param>
      <throws>DimensionMismatchException if the arrays length are
 * inconsistent.</throws>
      <throws>SingularMatrixException if the eigenvalue decomposition cannot
 * be performed on the provided covariance matrix.</throws>
      <throws>NonPositiveDefiniteMatrixException if any of the eigenvalues is
 * negative.</throws>
    </javadoc>
    <method type="constructor" name="MultivariateNormalDistribution" startLine="75" endLine="77" />
    <javadoc>
      <text>* Creates a multivariate normal distribution with the given mean vector and
 * covariance matrix.
 * <br/>
 * The number of dimensions is equal to the length of the mean vector
 * and to the number of rows and columns of the covariance matrix.
 * It is frequently written as "p" in formulae.</text>
      <param>rng Random Number Generator.</param>
      <param>means Vector of means.</param>
      <param>covariances Covariance matrix.</param>
      <throws>DimensionMismatchException if the arrays length are
 * inconsistent.</throws>
      <throws>SingularMatrixException if the eigenvalue decomposition cannot
 * be performed on the provided covariance matrix.</throws>
      <throws>NonPositiveDefiniteMatrixException if any of the eigenvalues is
 * negative.</throws>
    </javadoc>
    <method type="constructor" name="MultivariateNormalDistribution" startLine="102" endLine="156">
      <declaration type="int" name="dim" />
      <scope startLine="107" endLine="109" />
      <scope startLine="111" endLine="115">
        <scope startLine="112" endLine="114" />
      </scope>
      <declaration type="EigenDecomposition" name="covMatDec" />
      <declaration type="double[]" name="covMatEigenvalues" />
      <scope startLine="132" endLine="136">
        <scope startLine="133" endLine="135" />
      </scope>
      <declaration type="Array2DRowRealMatrix" name="covMatEigenvectors" />
      <scope startLine="140" endLine="143">
        <declaration type="double[]" name="evec" />
      </scope>
      <declaration type="RealMatrix" name="tmpMatrix" />
      <scope startLine="148" endLine="153">
        <declaration type="double" name="factor" />
        <scope startLine="150" endLine="152" />
      </scope>
      <comment>Covariance matrix eigen decomposition.</comment>
      <comment>Compute and store the inverse.</comment>
      <comment>Compute and store the determinant.</comment>
      <comment>Eigenvalues of the covariance matrix.</comment>
      <comment>Matrix where each column is an eigenvector of the covariance matrix.</comment>
      <comment>Scale each eigenvector by the square root of its eigenvalue.</comment>
    </method>
    <javadoc>
      <text>* Gets the mean vector.</text>
      <return>the mean vector.</return>
    </javadoc>
    <method type="double[]" name="getMeans" startLine="163" endLine="165" />
    <javadoc>
      <text>* Gets the covariance matrix.</text>
      <return>the covariance matrix.</return>
    </javadoc>
    <method type="RealMatrix" name="getCovariances" startLine="172" endLine="174" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="density" startLine="177" endLine="186">
      <declaration type="int" name="dim" />
      <scope startLine="179" endLine="181" />
    </method>
    <javadoc>
      <text>* Gets the square root of each element on the diagonal of the covariance
 * matrix.</text>
      <return>the standard deviations.</return>
    </javadoc>
    <method type="double[]" name="getStandardDeviations" startLine="194" endLine="202">
      <declaration type="int" name="dim" />
      <declaration type="double[]" name="std" />
      <declaration type="double[][]" name="s" />
      <scope startLine="198" endLine="200" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double[]" name="sample" startLine="205" endLine="220">
      <declaration type="int" name="dim" />
      <declaration type="double[]" name="normalVals" />
      <scope startLine="209" endLine="211" />
      <declaration type="double[]" name="vals" />
      <scope startLine="215" endLine="217" />
    </method>
    <javadoc>
      <text>* Computes the term used in the exponent (see definition of the distribution).</text>
      <param>values Values at which to compute density.</param>
      <return>the multiplication factor of density calculations.</return>
    </javadoc>
    <method type="double" name="getExponentTerm" startLine="228" endLine="239">
      <declaration type="double[]" name="centered" />
      <scope startLine="230" endLine="232" />
      <declaration type="double[]" name="preMultiplied" />
      <declaration type="double" name="sum" />
      <scope startLine="235" endLine="237" />
    </method>
  </class>
</source>
