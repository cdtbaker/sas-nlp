<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive.moment">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="ThirdMoment" extends="SecondMoment" startLine="25">
    <implements name="Serializable" />
    <javadoc>
      <text>* Computes a statistic related to the Third Central Moment.  Specifically,
 * what is computed is the sum of cubed deviations from the sample mean.
 * <p>
 * The following recursive updating formula is used:</p>
 * <p>
 * Let <ul>
 * <li> dev = (current obs - previous mean) </li>
 * <li> m2 = previous value of {@link SecondMoment} </li>
 * <li> n = number of observations (including current obs) </li>
 * </ul>
 * Then</p>
 * <p>
 * new value = old value - 3 * (dev/n) * m2 + (n-1) * (n -2) * (dev^3/n^2)</p>
 * <p>
 * Returns <code>Double.NaN</code> if no data values have been added and
 * returns <code>0</code> if there is just one value in the data set.</p>
 * <p>
 * <strong>Note that this implementation is not synchronized.</strong> If
 * multiple threads access an instance of this class concurrently, and at least
 * one of the threads invokes the <code>increment()</code> or
 * <code>clear()</code> method, it must be synchronized externally.</p></text>
      <version>$Id: ThirdMoment.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* third moment of values that have been added</text>
    </javadoc>
    <declaration type="double" name="m3" />
    <javadoc>
      <text>* Square of deviation of most recently added value from previous first
 * moment, normalized by previous sample size.  Retained to prevent
 * repeated computation in higher order moments.  nDevSq = nDev * nDev.</text>
    </javadoc>
    <declaration type="double" name="nDevSq" />
    <javadoc>
      <text>* Create a FourthMoment instance</text>
    </javadoc>
    <method type="constructor" name="ThirdMoment" startLine="68" endLine="72" />
    <javadoc>
      <text>* Copy constructor, creates a new {@code ThirdMoment} identical
 * to the {@code original}</text>
      <param>original the {@code ThirdMoment} instance to copy</param>
      <throws>NullArgumentException if orginal is null</throws>
    </javadoc>
    <method type="constructor" name="ThirdMoment" startLine="81" endLine="83" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="increment" startLine="89" endLine="99">
      <scope startLine="90" endLine="92" />
      <declaration type="double" name="prevM2" />
      <declaration type="double" name="n0" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getResult" startLine="105" endLine="107" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="clear" startLine="113" endLine="117" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="ThirdMoment" name="copy" startLine="123" endLine="128">
      <declaration type="ThirdMoment" name="result" />
      <comment>No try-catch or advertised exception because args are guaranteed non-null</comment>
    </method>
    <javadoc>
      <text>* Copies source to dest.
 * <p>Neither source nor dest can be null.</p></text>
      <param>source ThirdMoment to copy</param>
      <param>dest ThirdMoment to copy to</param>
      <throws>NullArgumentException if either source or dest is null</throws>
    </javadoc>
    <method type="void" name="copy" startLine="139" endLine="145" />
  </class>
</source>
