<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive.summary">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="Sum" extends="AbstractStorelessUnivariateStatistic" startLine="27">
    <implements name="Serializable" />
    <javadoc>
      <text>* Returns the sum of the available values.
 * <p>
 * If there are no values in the dataset, then 0 is returned.
 * If any of the values are
 * <code>NaN</code>, then <code>NaN</code> is returned.</p>
 * <p>
 * <strong>Note that this implementation is not synchronized.</strong> If
 * multiple threads access an instance of this class concurrently, and at least
 * one of the threads invokes the <code>increment()</code> or
 * <code>clear()</code> method, it must be synchronized externally.</p></text>
      <version>$Id: Sum.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc />
    <declaration type="long" name="n" />
    <javadoc>
      <text>* The currently running sum.</text>
    </javadoc>
    <declaration type="double" name="value" />
    <javadoc>
      <text>* Create a Sum instance</text>
    </javadoc>
    <method type="constructor" name="Sum" startLine="57" endLine="60" />
    <javadoc>
      <text>* Copy constructor, creates a new {@code Sum} identical
 * to the {@code original}</text>
      <param>original the {@code Sum} instance to copy</param>
      <throws>NullArgumentException if original is null</throws>
    </javadoc>
    <method type="constructor" name="Sum" startLine="69" endLine="71" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="increment" startLine="77" endLine="80" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getResult" startLine="86" endLine="88" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="long" name="getN" startLine="93" endLine="95" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="clear" startLine="101" endLine="104" />
    <javadoc>
      <text>* The sum of the entries in the specified portion of
 * the input array, or 0 if the designated subarray
 * is empty.
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if the array is null.</p></text>
      <param>values the input array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the sum of the values or 0 if length = 0</return>
      <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="122" endLine="131">
      <declaration type="double" name="sum" />
      <scope startLine="124" endLine="129">
        <scope startLine="126" endLine="128" />
      </scope>
    </method>
    <javadoc>
      <text>* The weighted sum of the entries in the specified portion of
 * the input array, or 0 if the designated subarray
 * is empty.
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if any of the following are true:
 * <ul><li>the values array is null</li>
 * <li>the weights array is null</li>
 * <li>the weights array does not have the same length as the values array</li>
 * <li>the weights array contains one or more infinite values</li>
 * <li>the weights array contains one or more NaN values</li>
 * <li>the weights array contains negative values</li>
 * <li>the start and length arguments do not determine a valid array</li>
 * </ul></p>
 * <p>
 * Uses the formula, <pre>
 * weighted sum = &Sigma;(values[i] * weights[i])
 * </pre></p></text>
      <param>values the input array</param>
      <param>weights the weights array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the sum of the values or 0 if length = 0</return>
      <throws>MathIllegalArgumentException if the parameters are not valid</throws>
      <since>2.1</since>
    </javadoc>
    <method type="double" name="evaluate" startLine="161" endLine="170">
      <declaration type="double" name="sum" />
      <scope startLine="163" endLine="168">
        <scope startLine="165" endLine="167" />
      </scope>
    </method>
    <javadoc>
      <text>* The weighted sum of the entries in the the input array.
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if any of the following are true:
 * <ul><li>the values array is null</li>
 * <li>the weights array is null</li>
 * <li>the weights array does not have the same length as the values array</li>
 * <li>the weights array contains one or more infinite values</li>
 * <li>the weights array contains one or more NaN values</li>
 * <li>the weights array contains negative values</li>
 * </ul></p>
 * <p>
 * Uses the formula, <pre>
 * weighted sum = &Sigma;(values[i] * weights[i])
 * </pre></p></text>
      <param>values the input array</param>
      <param>weights the weights array</param>
      <return>the sum of the values or Double.NaN if length = 0</return>
      <throws>MathIllegalArgumentException if the parameters are not valid</throws>
      <since>2.1</since>
    </javadoc>
    <method type="double" name="evaluate" startLine="195" endLine="197" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Sum" name="copy" startLine="203" endLine="208">
      <declaration type="Sum" name="result" />
      <comment>No try-catch or advertised exception because args are valid</comment>
    </method>
    <javadoc>
      <text>* Copies source to dest.
 * <p>Neither source nor dest can be null.</p></text>
      <param>source Sum to copy</param>
      <param>dest Sum to copy to</param>
      <throws>NullArgumentException if either source or dest is null</throws>
    </javadoc>
    <method type="void" name="copy" startLine="219" endLine="225" />
  </class>
</source>
