<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.interpolation">
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.NonMonotonicSequenceException" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <import name="org.apache.commons.math3.util.Precision" />
  <import name="org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer" />
  <import name="org.apache.commons.math3.fitting.PolynomialFitter" />
  <import name="org.apache.commons.math3.analysis.polynomials.PolynomialFunction" />
  <import name="org.apache.commons.math3.optim.SimpleVectorValueChecker" />
  <class name="SmoothingPolynomialBicubicSplineInterpolator" extends="BicubicSplineInterpolator" startLine="31">
    <javadoc>
      <text>* Generates a bicubic interpolation function.
 * Prior to generating the interpolating function, the input is smoothed using
 * polynomial fitting.</text>
      <version>$Id: SmoothingPolynomialBicubicSplineInterpolator.java 1455194 2013-03-11 15:45:54Z luc $</version>
      <since>2.2</since>
    </javadoc>
    <javadoc>
      <text>* Fitter for x.</text>
    </javadoc>
    <declaration type="PolynomialFitter" name="xFitter" />
    <javadoc>
      <text>* Degree of the fitting polynomial.</text>
    </javadoc>
    <declaration type="int" name="xDegree" />
    <javadoc>
      <text>* Fitter for y.</text>
    </javadoc>
    <declaration type="PolynomialFitter" name="yFitter" />
    <javadoc>
      <text>* Degree of the fitting polynomial.</text>
    </javadoc>
    <declaration type="int" name="yDegree" />
    <javadoc>
      <text>* Default constructor. The degree of the fitting polynomials is set to 3.</text>
    </javadoc>
    <method type="constructor" name="SmoothingPolynomialBicubicSplineInterpolator" startLine="53" endLine="55" />
    <javadoc>
      <param>degree Degree of the polynomial fitting functions.</param>
      <exception>NotPositiveException if degree is not positive</exception>
    </javadoc>
    <method type="constructor" name="SmoothingPolynomialBicubicSplineInterpolator" startLine="62" endLine="64" />
    <javadoc>
      <param>xDegree Degree of the polynomial fitting functions along the
 * x-dimension.</param>
      <param>yDegree Degree of the polynomial fitting functions along the
 * y-dimension.</param>
      <exception>NotPositiveException if degrees are not positive</exception>
    </javadoc>
    <method type="constructor" name="SmoothingPolynomialBicubicSplineInterpolator" startLine="74" endLine="90">
      <scope startLine="75" endLine="77" />
      <scope startLine="78" endLine="80" />
      <declaration type="double" name="safeFactor" />
      <declaration type="SimpleVectorValueChecker" name="checker" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="BicubicSplineInterpolatingFunction" name="interpolate" startLine="100" endLine="169">
      <scope startLine="101" endLine="103" />
      <scope startLine="104" endLine="106" />
      <declaration type="int" name="xLen" />
      <declaration type="int" name="yLen" />
      <scope startLine="111" endLine="115">
        <scope startLine="112" endLine="114" />
      </scope>
      <declaration type="PolynomialFunction[]" name="yPolyX" />
      <scope startLine="123" endLine="132">
        <scope startLine="125" endLine="127" />
        <comment>Initial guess for the fit is zero for each coefficients (of which</comment>
        <comment>there are "xDegree" + 1).</comment>
      </scope>
      <declaration type="double[][]" name="fval_1" />
      <scope startLine="137" endLine="142">
        <declaration type="PolynomialFunction" name="f" />
        <scope startLine="139" endLine="141" />
      </scope>
      <declaration type="PolynomialFunction[]" name="xPolyY" />
      <scope startLine="147" endLine="156">
        <scope startLine="149" endLine="151" />
        <comment>Initial guess for the fit is zero for each coefficients (of which</comment>
        <comment>there are "yDegree" + 1).</comment>
      </scope>
      <declaration type="double[][]" name="fval_2" />
      <scope startLine="161" endLine="166">
        <declaration type="PolynomialFunction" name="f" />
        <scope startLine="163" endLine="165" />
      </scope>
      <comment>For each line y[j] (0 <= j < yLen), construct a polynomial, with</comment>
      <comment>respect to variable x, fitting array fval[][j]</comment>
      <comment>For every knot (xval[i], yval[j]) of the grid, calculate corrected</comment>
      <comment>values fval_1</comment>
      <comment>For each line x[i] (0 <= i < xLen), construct a polynomial, with</comment>
      <comment>respect to variable y, fitting array fval_1[i][]</comment>
      <comment>For every knot (xval[i], yval[j]) of the grid, calculate corrected</comment>
      <comment>values fval_2</comment>
    </method>
  </class>
</source>
