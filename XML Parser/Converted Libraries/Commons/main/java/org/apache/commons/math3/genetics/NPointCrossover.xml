<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.genetics">
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <class name="NPointCrossover" startLine="29">
    <implements name="CrossoverPolicy" />
    <javadoc>
      <text>* N-point crossover policy. For each iteration a random crossover point is
 * selected and the first part from each parent is copied to the corresponding
 * child, and the second parts are copied crosswise.
 * Example (2-point crossover):
 * <pre>
 * -C- denotes a crossover point
 * -C-       -C-                         -C-        -C-
 * p1 = (1 0  | 1 0 0 1 | 0 1 1)    X    p2 = (0 1  | 1 0 1 0  | 1 1 1)
 * \----/ \-------/ \-----/              \----/ \--------/ \-----/
 * ||      (*)       ||                  ||      (**)       ||
 * VV      (**)      VV                  VV      (*)        VV
 * /----\ /--------\ /-----\             /----\ /--------\ /-----\
 * c1 = (1 0  | 1 0 1 0  | 0 1 1)    X   c2 = (0 1  | 1 0 0 1  | 0 1 1)
 * </pre>
 * This policy works only on {@link AbstractListChromosome}, and therefore it
 * is parameterized by T. Moreover, the chromosomes must have same lengths.</text>
      <param><T>
 *  generic type of the {@link AbstractListChromosome}s for crossover</param>
      <since>3.1</since>
      <version>$Id: NPointCrossover.java 1385297 2012-09-16 16:05:57Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* The number of crossover points.</text>
    </javadoc>
    <declaration type="int" name="crossoverPoints" />
    <javadoc>
      <text>* Creates a new {@link NPointCrossover} policy using the given number of points.
 * <p>
 * <b>Note</b>: the number of crossover points must be &lt; <code>chromosome length - 1</code>.
 * This condition can only be checked at runtime, as the chromosome length is not known in advance.</text>
      <param>crossoverPoints the number of crossover points</param>
      <throws>NotStrictlyPositiveException if the number of {@code crossoverPoints} is not strictly positive</throws>
    </javadoc>
    <method type="constructor" name="NPointCrossover" startLine="67" endLine="72">
      <scope startLine="68" endLine="70" />
    </method>
    <javadoc>
      <text>* Returns the number of crossover points used by this {@link CrossoverPolicy}.</text>
      <return>the number of crossover points</return>
    </javadoc>
    <method type="int" name="getCrossoverPoints" startLine="79" endLine="81" />
    <javadoc>
      <text>* Performs a N-point crossover. N random crossover points are selected and are used
 * to divide the parent chromosomes into segments. The segments are copied in alternate
 * order from the two parents to the corresponding child chromosomes.
 * Example (2-point crossover):
 * <pre>
 * -C- denotes a crossover point
 * -C-       -C-                         -C-        -C-
 * p1 = (1 0  | 1 0 0 1 | 0 1 1)    X    p2 = (0 1  | 1 0 1 0  | 1 1 1)
 * \----/ \-------/ \-----/              \----/ \--------/ \-----/
 * ||      (*)       ||                  ||      (**)       ||
 * VV      (**)      VV                  VV      (*)        VV
 * /----\ /--------\ /-----\             /----\ /--------\ /-----\
 * c1 = (1 0  | 1 0 1 0  | 0 1 1)    X   c2 = (0 1  | 1 0 0 1  | 0 1 1)
 * </pre></text>
      <param>first first parent (p1)</param>
      <param>second second parent (p2)</param>
      <return>pair of two children (c1,c2)</return>
      <throws>MathIllegalArgumentException iff one of the chromosomes is
 * not an instance of {@link AbstractListChromosome}</throws>
      <throws>DimensionMismatchException if the length of the two chromosomes is different</throws>
    </javadoc>
    <method type="ChromosomePair" name="crossover" startLine="109" endLine="115">
      <scope startLine="111" endLine="113" />
    </method>
    <javadoc>
      <text>* Helper for {@link #crossover(Chromosome,Chromosome)}. Performs the actual crossover.</text>
      <param>first the first chromosome</param>
      <param>second the second chromosome</param>
      <return>the pair of new chromosomes that resulted from the crossover</return>
      <throws>DimensionMismatchException if the length of the two chromosomes is different</throws>
      <throws>NumberIsTooLargeException if the number of crossoverPoints is too large for the actual chromosomes</throws>
    </javadoc>
    <method type="ChromosomePair" name="mate" startLine="128" endLine="178">
      <declaration type="int" name="length" />
      <scope startLine="131" endLine="133" />
      <scope startLine="134" endLine="136" />
      <declaration type="List<T>" name="parent1Rep" />
      <declaration type="List<T>" name="parent2Rep" />
      <declaration type="ArrayList<T>" name="child1Rep" />
      <declaration type="ArrayList<T>" name="child2Rep" />
      <declaration type="RandomGenerator" name="random" />
      <declaration type="ArrayList<T>" name="c1" />
      <declaration type="ArrayList<T>" name="c2" />
      <declaration type="int" name="remainingPoints" />
      <declaration type="int" name="lastIndex" />
      <scope startLine="152" endLine="168">
        <declaration type="int" name="crossoverIndex" />
        <scope startLine="157" endLine="160" />
        <declaration type="ArrayList<T>" name="tmp" />
        <comment>select the next crossover point at random</comment>
        <comment>copy the current segment</comment>
        <comment>swap the children for the next segment</comment>
      </scope>
      <scope startLine="171" endLine="174" />
      <comment>array representations of the parents</comment>
      <comment>and of the children</comment>
      <comment>copy the last segment</comment>
    </method>
    <comment>OK because of instanceof checks</comment>
  </class>
</source>
