<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive.moment">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.MathIllegalStateException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic" />
  <import name="org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic" />
  <import name="org.apache.commons.math3.stat.descriptive.summary.SumOfLogs" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="GeometricMean" extends="AbstractStorelessUnivariateStatistic" startLine="31">
    <implements name="Serializable" />
    <javadoc>
      <text>* Returns the <a href="http://www.xycoon.com/geometric_mean.htm">
 * geometric mean </a> of the available values.
 * <p>
 * Uses a {@link SumOfLogs} instance to compute sum of logs and returns
 * <code> exp( 1/n  (sum of logs) ).</code>  Therefore, </p>
 * <ul>
 * <li>If any of values are < 0, the result is <code>NaN.</code></li>
 * <li>If all values are non-negative and less than
 * <code>Double.POSITIVE_INFINITY</code>,  but at least one value is 0, the
 * result is <code>0.</code></li>
 * <li>If both <code>Double.POSITIVE_INFINITY</code> and
 * <code>Double.NEGATIVE_INFINITY</code> are among the values, the result is
 * <code>NaN.</code></li>
 * </ul> </p>
 * <p>
 * <strong>Note that this implementation is not synchronized.</strong> If
 * multiple threads access an instance of this class concurrently, and at least
 * one of the threads invokes the <code>increment()</code> or
 * <code>clear()</code> method, it must be synchronized externally.</p></text>
      <version>$Id: GeometricMean.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Wrapped SumOfLogs instance</text>
    </javadoc>
    <declaration type="StorelessUnivariateStatistic" name="sumOfLogs" />
    <javadoc>
      <text>* Create a GeometricMean instance</text>
    </javadoc>
    <method type="constructor" name="GeometricMean" startLine="66" endLine="68" />
    <javadoc>
      <text>* Copy constructor, creates a new {@code GeometricMean} identical
 * to the {@code original}</text>
      <param>original the {@code GeometricMean} instance to copy</param>
      <throws>NullArgumentException if original is null</throws>
    </javadoc>
    <method type="constructor" name="GeometricMean" startLine="77" endLine="80" />
    <javadoc>
      <text>* Create a GeometricMean instance using the given SumOfLogs instance</text>
      <param>sumOfLogs sum of logs instance to use for computation</param>
    </javadoc>
    <method type="constructor" name="GeometricMean" startLine="86" endLine="88" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="GeometricMean" name="copy" startLine="94" endLine="99">
      <declaration type="GeometricMean" name="result" />
      <comment>no try-catch or advertised exception because args guaranteed non-null</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="increment" startLine="105" endLine="107" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getResult" startLine="113" endLine="119">
      <scope startLine="114" endLine="116" />
      <scope startLine="116" endLine="118" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="clear" startLine="125" endLine="127" />
    <javadoc>
      <text>* Returns the geometric mean of the entries in the specified portion
 * of the input array.
 * <p>
 * See {@link GeometricMean} for details on the computing algorithm.</p>
 * <p>
 * Throws <code>IllegalArgumentException</code> if the array is null.</p></text>
      <param>values input array containing the values</param>
      <param>begin first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the geometric mean or Double.NaN if length = 0 or
 * any of the values are &lt;= 0.</return>
      <throws>MathIllegalArgumentException if the input array is null or the array
 * index parameters are not valid</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="148" endLine="151" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="long" name="getN" startLine="156" endLine="158" />
    <javadoc>
      <text>* <p>Sets the implementation for the sum of logs.</p>
 * <p>This method must be activated before any data has been added - i.e.,
 * before {@link #increment(double) increment} has been used to add data;
 * otherwise an IllegalStateException will be thrown.</p></text>
      <param>sumLogImpl the StorelessUnivariateStatistic instance to use
 * for computing the log sum</param>
      <throws>MathIllegalStateException if data has already been added
 * (i.e if n > 0)</throws>
    </javadoc>
    <method type="void" name="setSumLogImpl" startLine="172" endLine="175" />
    <javadoc>
      <text>* Returns the currently configured sum of logs implementation</text>
      <return>the StorelessUnivariateStatistic implementing the log sum</return>
    </javadoc>
    <method type="StorelessUnivariateStatistic" name="getSumLogImpl" startLine="182" endLine="184" />
    <javadoc>
      <text>* Copies source to dest.
 * <p>Neither source nor dest can be null.</p></text>
      <param>source GeometricMean to copy</param>
      <param>dest GeometricMean to copy to</param>
      <throws>NullArgumentException if either source or dest is null</throws>
    </javadoc>
    <method type="void" name="copy" startLine="195" endLine="200" />
    <javadoc>
      <text>* Throws MathIllegalStateException if n > 0.</text>
      <throws>MathIllegalStateException if data has been added to this statistic</throws>
    </javadoc>
    <method type="void" name="checkEmpty" startLine="207" endLine="213">
      <scope startLine="208" endLine="212" />
    </method>
  </class>
</source>
