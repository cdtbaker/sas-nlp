<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.inference">
  <import name="org.apache.commons.math3.distribution.NormalDistribution" />
  <import name="org.apache.commons.math3.exception.ConvergenceException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.stat.ranking.NaNStrategy" />
  <import name="org.apache.commons.math3.stat.ranking.NaturalRanking" />
  <import name="org.apache.commons.math3.stat.ranking.TiesStrategy" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="WilcoxonSignedRankTest" startLine="31">
    <javadoc>
      <text>* An implementation of the Wilcoxon signed-rank test.</text>
      <version>$Id: WilcoxonSignedRankTest.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Ranking algorithm.</text>
    </javadoc>
    <declaration type="NaturalRanking" name="naturalRanking" />
    <javadoc>
      <text>* Create a test instance where NaN's are left in place and ties get
 * the average of applicable ranks. Use this unless you are very sure
 * of what you are doing.</text>
    </javadoc>
    <method type="constructor" name="WilcoxonSignedRankTest" startLine="46" endLine="49" />
    <javadoc>
      <text>* Create a test instance using the given strategies for NaN's and ties.
 * Only use this if you are sure of what you are doing.</text>
      <param>nanStrategyspecifies the strategy that should be used for Double.NaN's</param>
      <param>tiesStrategyspecifies the strategy that should be used for ties</param>
    </javadoc>
    <method type="constructor" name="WilcoxonSignedRankTest" startLine="61" endLine="63" />
    <javadoc>
      <text>* Ensures that the provided arrays fulfills the assumptions.</text>
      <param>x first sample</param>
      <param>y second sample</param>
      <throws>NullArgumentException if {@code x} or {@code y} are {@code null}.</throws>
      <throws>NoDataException if {@code x} or {@code y} are zero-length.</throws>
      <throws>DimensionMismatchException if {@code x} and {@code y} do not
 * have the same length.</throws>
    </javadoc>
    <method type="void" name="ensureDataConformance" startLine="76" endLine="89">
      <scope startLine="79" endLine="81" />
      <scope startLine="83" endLine="85" />
      <scope startLine="86" endLine="88" />
    </method>
    <javadoc>
      <text>* Calculates y[i] - x[i] for all i</text>
      <param>x first sample</param>
      <param>y second sample</param>
      <return>z = y - x</return>
    </javadoc>
    <method type="double[]" name="calculateDifferences" startLine="98" endLine="107">
      <declaration type="double[]" name="z" />
      <scope startLine="102" endLine="104" />
    </method>
    <javadoc>
      <text>* Calculates |z[i]| for all i</text>
      <param>z sample</param>
      <return>|z|</return>
      <throws>NullArgumentException if {@code z} is {@code null}</throws>
      <throws>NoDataException if {@code z} is zero-length.</throws>
    </javadoc>
    <method type="double[]" name="calculateAbsoluteDifferences" startLine="118" endLine="135">
      <scope startLine="120" endLine="122" />
      <scope startLine="124" endLine="126" />
      <declaration type="double[]" name="zAbs" />
      <scope startLine="130" endLine="132" />
    </method>
    <javadoc>
      <text>* Computes the <a
 * href="http://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test">
 * Wilcoxon signed ranked statistic</a> comparing mean for two related
 * samples or repeated measurements on a single sample.
 * <p>
 * This statistic can be used to perform a Wilcoxon signed ranked test
 * evaluating the null hypothesis that the two related samples or repeated
 * measurements on a single sample has equal mean.
 * </p>
 * <p>
 * Let X<sub>i</sub> denote the i'th individual of the first sample and
 * Y<sub>i</sub> the related i'th individual in the second sample. Let
 * Z<sub>i</sub> = Y<sub>i</sub> - X<sub>i</sub>.
 * </p>
 * <p>
 * <strong>Preconditions</strong>:
 * <ul>
 * <li>The differences Z<sub>i</sub> must be independent.</li>
 * <li>Each Z<sub>i</sub> comes from a continuous population (they must be
 * identical) and is symmetric about a common median.</li>
 * <li>The values that X<sub>i</sub> and Y<sub>i</sub> represent are
 * ordered, so the comparisons greater than, less than, and equal to are
 * meaningful.</li>
 * </ul>
 * </p></text>
      <param>x the first sample</param>
      <param>y the second sample</param>
      <return>wilcoxonSignedRank statistic (the larger of W+ and W-)</return>
      <throws>NullArgumentException if {@code x} or {@code y} are {@code null}.</throws>
      <throws>NoDataException if {@code x} or {@code y} are zero-length.</throws>
      <throws>DimensionMismatchException if {@code x} and {@code y} do not
 * have the same length.</throws>
    </javadoc>
    <method type="double" name="wilcoxonSignedRank" startLine="173" endLine="196">
      <declaration type="double[]" name="z" />
      <declaration type="double[]" name="zAbs" />
      <declaration type="double[]" name="ranks" />
      <declaration type="double" name="Wplus" />
      <scope startLine="186" endLine="190">
        <scope startLine="187" endLine="189" />
      </scope>
      <declaration type="int" name="N" />
      <declaration type="double" name="Wminus" />
      <comment>throws IllegalArgumentException if x and y are not correctly</comment>
      <comment>specified</comment>
    </method>
    <javadoc>
      <text>* Algorithm inspired by
 * http://www.fon.hum.uva.nl/Service/Statistics/Signed_Rank_Algorihms.html#C
 * by Rob van Son, Institute of Phonetic Sciences & IFOTT,
 * University of Amsterdam</text>
      <param>Wmax largest Wilcoxon signed rank value</param>
      <param>N number of subjects (corresponding to x.length)</param>
      <return>two-sided exact p-value</return>
    </javadoc>
    <method type="double" name="calculateExactPValue" startLine="208" endLine="237">
      <declaration type="int" name="m" />
      <declaration type="int" name="largerRankSums" />
      <scope startLine="215" endLine="230">
        <declaration type="int" name="rankSum" />
        <scope startLine="219" endLine="225">
          <scope startLine="222" endLine="224" />
        </scope>
        <scope startLine="227" endLine="229" />
        <comment>Generate all possible rank sums</comment>
        <comment>(i >> j) & 1 extract i's j-th bit from the right</comment>
      </scope>
      <comment>Total number of outcomes (equal to 2^N but a lot faster)</comment>
      <comment>largerRankSums  m gives the one-sided p-value, so it's multiplied
 with 2 to get the two-sided p-value</comment>
    </method>
    <javadoc>
      <param>Wmin smallest Wilcoxon signed rank value</param>
      <param>N number of subjects (corresponding to x.length)</param>
      <return>two-sided asymptotic p-value</return>
    </javadoc>
    <method type="double" name="calculateAsymptoticPValue" startLine="244" endLine="260">
      <declaration type="double" name="ES" />
      <declaration type="double" name="VarS" />
      <declaration type="double" name="z" />
      <declaration type="NormalDistribution" name="standardNormal" />
      <comment>Same as (but saves computations):
 final double VarW = ((double) (N  (N + 1)  (2N + 1)))  24;</comment>
      <comment>- 0.5 is a continuity correction</comment>
      <comment>No try-catch or advertised exception because args are valid</comment>
    </method>
    <javadoc>
      <text>* Returns the <i>observed significance level</i>, or <a href=
 * "http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue">
 * p-value</a>, associated with a <a
 * href="http://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test">
 * Wilcoxon signed ranked statistic</a> comparing mean for two related
 * samples or repeated measurements on a single sample.
 * <p>
 * Let X<sub>i</sub> denote the i'th individual of the first sample and
 * Y<sub>i</sub> the related i'th individual in the second sample. Let
 * Z<sub>i</sub> = Y<sub>i</sub> - X<sub>i</sub>.
 * </p>
 * <p>
 * <strong>Preconditions</strong>:
 * <ul>
 * <li>The differences Z<sub>i</sub> must be independent.</li>
 * <li>Each Z<sub>i</sub> comes from a continuous population (they must be
 * identical) and is symmetric about a common median.</li>
 * <li>The values that X<sub>i</sub> and Y<sub>i</sub> represent are
 * ordered, so the comparisons greater than, less than, and equal to are
 * meaningful.</li>
 * </ul>
 * </p></text>
      <param>x the first sample</param>
      <param>y the second sample</param>
      <param>exactPValueif the exact p-value is wanted (only works for x.length <= 30,
 * if true and x.length > 30, this is ignored because
 * calculations may take too long)</param>
      <return>p-value</return>
      <throws>NullArgumentException if {@code x} or {@code y} are {@code null}.</throws>
      <throws>NoDataException if {@code x} or {@code y} are zero-length.</throws>
      <throws>DimensionMismatchException if {@code x} and {@code y} do not
 * have the same length.</throws>
      <throws>NumberIsTooLargeException if {@code exactPValue} is {@code true}and {@code x.length} > 30</throws>
      <throws>ConvergenceException if the p-value can not be computed due to
 * a convergence error</throws>
      <throws>MaxCountExceededException if the maximum number of iterations
 * is exceeded</throws>
    </javadoc>
    <method type="double" name="wilcoxonSignedRankTest" startLine="307" endLine="324">
      <declaration type="int" name="N" />
      <declaration type="double" name="Wmax" />
      <scope startLine="314" endLine="316" />
      <scope startLine="318" endLine="320" />
      <scope startLine="320" endLine="323">
        <declaration type="double" name="Wmin" />
      </scope>
    </method>
  </class>
</source>
