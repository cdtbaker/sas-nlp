<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.inference">
  <import name="org.apache.commons.math3.distribution.TDistribution" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.stat.StatUtils" />
  <import name="org.apache.commons.math3.stat.descriptive.StatisticalSummary" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="TTest" startLine="33">
    <javadoc>
      <text>* An implementation for Student's t-tests.
 * <p>
 * Tests can be:<ul>
 * <li>One-sample or two-sample</li>
 * <li>One-sided or two-sided</li>
 * <li>Paired or unpaired (for two-sample tests)</li>
 * <li>Homoscedastic (equal variance assumption) or heteroscedastic
 * (for two sample tests)</li>
 * <li>Fixed significance level (boolean-valued) or returning p-values.
 * </li></ul></p>
 * <p>
 * Test statistics are available for all tests.  Methods including "Test" in
 * in their names perform tests, all other methods return t-statistics.  Among
 * the "Test" methods, <code>double-</code>valued methods return p-values;
 * <code>boolean-</code>valued methods perform fixed significance level tests.
 * Significance levels are always specified as numbers between 0 and 0.5
 * (e.g. tests at the 95% level  use <code>alpha=0.05</code>).</p>
 * <p>
 * Input to tests can be either <code>double[]</code> arrays or{@link StatisticalSummary} instances.</p><p>
 * Uses commons-math {@link org.apache.commons.math3.distribution.TDistribution}implementation to estimate exact p-values.</p></text>
      <version>$Id: TTest.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Computes a paired, 2-sample t-statistic based on the data in the input
 * arrays.  The t-statistic returned is equivalent to what would be returned by
 * computing the one-sample t-statistic {@link #t(double,double[])}, with
 * <code>mu = 0</code> and the sample array consisting of the (signed)
 * differences between corresponding entries in <code>sample1</code> and
 * <code>sample2.</code>
 * <p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The input arrays must have the same length and their common length
 * must be at least 2.
 * </li></ul></p></text>
      <param>sample1 array of sample data values</param>
      <param>sample2 array of sample data values</param>
      <return>t statistic</return>
      <throws>NullArgumentException if the arrays are <code>null</code></throws>
      <throws>NoDataException if the arrays are empty</throws>
      <throws>DimensionMismatchException if the length of the arrays is not equal</throws>
      <throws>NumberIsTooSmallException if the length of the arrays is &lt; 2</throws>
    </javadoc>
    <method type="double" name="pairedT" startLine="83" endLine="92">
      <declaration type="double" name="meanDifference" />
    </method>
    <javadoc>
      <text>* Returns the <i>observed significance level</i>, or
 * <i> p-value</i>, associated with a paired, two-sample, two-tailed t-test
 * based on the data in the input arrays.
 * <p>
 * The number returned is the smallest significance level
 * at which one can reject the null hypothesis that the mean of the paired
 * differences is 0 in favor of the two-sided alternative that the mean paired
 * difference is not equal to 0. For a one-sided test, divide the returned
 * value by 2.</p>
 * <p>
 * This test is equivalent to a one-sample t-test computed using{@link #tTest(double,double[])} with <code>mu = 0</code> and the sample
 * array consisting of the signed differences between corresponding elements of
 * <code>sample1</code> and <code>sample2.</code></p>
 * <p>
 * <strong>Usage Note:</strong><br>
 * The validity of the p-value depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * <a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html">
 * here</a></p>
 * <p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The input array lengths must be the same and their common length must
 * be at least 2.
 * </li></ul></p></text>
      <param>sample1 array of sample data values</param>
      <param>sample2 array of sample data values</param>
      <return>p-value for t-test</return>
      <throws>NullArgumentException if the arrays are <code>null</code></throws>
      <throws>NoDataException if the arrays are empty</throws>
      <throws>DimensionMismatchException if the length of the arrays is not equal</throws>
      <throws>NumberIsTooSmallException if the length of the arrays is &lt; 2</throws>
      <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
    </javadoc>
    <method type="double" name="pairedTTest" startLine="132" endLine="139">
      <declaration type="double" name="meanDifference" />
    </method>
    <javadoc>
      <text>* Performs a paired t-test evaluating the null hypothesis that the
 * mean of the paired differences between <code>sample1</code> and
 * <code>sample2</code> is 0 in favor of the two-sided alternative that the
 * mean paired difference is not equal to 0, with significance level
 * <code>alpha</code>.
 * <p>
 * Returns <code>true</code> iff the null hypothesis can be rejected with
 * confidence <code>1 - alpha</code>.  To perform a 1-sided test, use
 * <code>alpha * 2</code></p>
 * <p>
 * <strong>Usage Note:</strong><br>
 * The validity of the test depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * <a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html">
 * here</a></p>
 * <p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The input array lengths must be the same and their common length
 * must be at least 2.
 * </li>
 * <li> <code> 0 &lt; alpha &lt; 0.5 </code>
 * </li></ul></p></text>
      <param>sample1 array of sample data values</param>
      <param>sample2 array of sample data values</param>
      <param>alpha significance level of the test</param>
      <return>true if the null hypothesis can be rejected with
 * confidence 1 - alpha</return>
      <throws>NullArgumentException if the arrays are <code>null</code></throws>
      <throws>NoDataException if the arrays are empty</throws>
      <throws>DimensionMismatchException if the length of the arrays is not equal</throws>
      <throws>NumberIsTooSmallException if the length of the arrays is &lt; 2</throws>
      <throws>OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]</throws>
      <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
    </javadoc>
    <method type="boolean" name="pairedTTest" startLine="180" endLine="185" />
    <javadoc>
      <text>* Computes a <a href="http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula">
 * t statistic </a> given observed values and a comparison constant.
 * <p>
 * This statistic can be used to perform a one sample t-test for the mean.
 * </p><p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The observed array length must be at least 2.
 * </li></ul></p></text>
      <param>mu comparison constant</param>
      <param>observed array of values</param>
      <return>t statistic</return>
      <throws>NullArgumentException if <code>observed</code> is <code>null</code></throws>
      <throws>NumberIsTooSmallException if the length of <code>observed</code> is &lt; 2</throws>
    </javadoc>
    <method type="double" name="t" startLine="204" endLine="211">
      <comment>No try-catch or advertised exception because args have just been checked</comment>
    </method>
    <javadoc>
      <text>* Computes a <a href="http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula">
 * t statistic </a> to use in comparing the mean of the dataset described by
 * <code>sampleStats</code> to <code>mu</code>.
 * <p>
 * This statistic can be used to perform a one sample t-test for the mean.
 * </p><p>
 * <strong>Preconditions</strong>: <ul>
 * <li><code>observed.getN() &ge; 2</code>.
 * </li></ul></p></text>
      <param>mu comparison constant</param>
      <param>sampleStats DescriptiveStatistics holding sample summary statitstics</param>
      <return>t statistic</return>
      <throws>NullArgumentException if <code>sampleStats</code> is <code>null</code></throws>
      <throws>NumberIsTooSmallException if the number of samples is &lt; 2</throws>
    </javadoc>
    <method type="double" name="t" startLine="231" endLine="237" />
    <javadoc>
      <text>* Computes a 2-sample t statistic,  under the hypothesis of equal
 * subpopulation variances.  To compute a t-statistic without the
 * equal variances hypothesis, use {@link #t(double[],double[])}.
 * <p>
 * This statistic can be used to perform a (homoscedastic) two-sample
 * t-test to compare sample means.</p>
 * <p>
 * The t-statistic is</p>
 * <p>
 * &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>
 * </p><p>
 * where <strong><code>n1</code></strong> is the size of first sample;
 * <strong><code> n2</code></strong> is the size of second sample;
 * <strong><code> m1</code></strong> is the mean of first sample;
 * <strong><code> m2</code></strong> is the mean of second sample</li>
 * </ul>
 * and <strong><code>var</code></strong> is the pooled variance estimate:
 * </p><p>
 * <code>var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))</code>
 * </p><p>
 * with <strong><code>var1</code></strong> the variance of the first sample and
 * <strong><code>var2</code></strong> the variance of the second sample.
 * </p><p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The observed array lengths must both be at least 2.
 * </li></ul></p></text>
      <param>sample1 array of sample data values</param>
      <param>sample2 array of sample data values</param>
      <return>t statistic</return>
      <throws>NullArgumentException if the arrays are <code>null</code></throws>
      <throws>NumberIsTooSmallException if the length of the arrays is &lt; 2</throws>
    </javadoc>
    <method type="double" name="homoscedasticT" startLine="274" endLine="283">
      <comment>No try-catch or advertised exception because args have just been checked</comment>
    </method>
    <javadoc>
      <text>* Computes a 2-sample t statistic, without the hypothesis of equal
 * subpopulation variances.  To compute a t-statistic assuming equal
 * variances, use {@link #homoscedasticT(double[],double[])}.
 * <p>
 * This statistic can be used to perform a two-sample t-test to compare
 * sample means.</p>
 * <p>
 * The t-statistic is</p>
 * <p>
 * &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>
 * </p><p>
 * where <strong><code>n1</code></strong> is the size of the first sample
 * <strong><code> n2</code></strong> is the size of the second sample;
 * <strong><code> m1</code></strong> is the mean of the first sample;
 * <strong><code> m2</code></strong> is the mean of the second sample;
 * <strong><code> var1</code></strong> is the variance of the first sample;
 * <strong><code> var2</code></strong> is the variance of the second sample;
 * </p><p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The observed array lengths must both be at least 2.
 * </li></ul></p></text>
      <param>sample1 array of sample data values</param>
      <param>sample2 array of sample data values</param>
      <return>t statistic</return>
      <throws>NullArgumentException if the arrays are <code>null</code></throws>
      <throws>NumberIsTooSmallException if the length of the arrays is &lt; 2</throws>
    </javadoc>
    <method type="double" name="t" startLine="315" endLine="324">
      <comment>No try-catch or advertised exception because args have just been checked</comment>
    </method>
    <javadoc>
      <text>* Computes a 2-sample t statistic </a>, comparing the means of the datasets
 * described by two {@link StatisticalSummary} instances, without the
 * assumption of equal subpopulation variances.  Use{@link #homoscedasticT(StatisticalSummary,StatisticalSummary)} to
 * compute a t-statistic under the equal variances assumption.
 * <p>
 * This statistic can be used to perform a two-sample t-test to compare
 * sample means.</p>
 * <p>
 * The returned  t-statistic is</p>
 * <p>
 * &nbsp;&nbsp; <code>  t = (m1 - m2) / sqrt(var1/n1 + var2/n2)</code>
 * </p><p>
 * where <strong><code>n1</code></strong> is the size of the first sample;
 * <strong><code> n2</code></strong> is the size of the second sample;
 * <strong><code> m1</code></strong> is the mean of the first sample;
 * <strong><code> m2</code></strong> is the mean of the second sample
 * <strong><code> var1</code></strong> is the variance of the first sample;
 * <strong><code> var2</code></strong> is the variance of the second sample
 * </p><p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The datasets described by the two Univariates must each contain
 * at least 2 observations.
 * </li></ul></p></text>
      <param>sampleStats1 StatisticalSummary describing data from the first sample</param>
      <param>sampleStats2 StatisticalSummary describing data from the second sample</param>
      <return>t statistic</return>
      <throws>NullArgumentException if the sample statistics are <code>null</code></throws>
      <throws>NumberIsTooSmallException if the number of samples is &lt; 2</throws>
    </javadoc>
    <method type="double" name="t" startLine="360" endLine="368" />
    <javadoc>
      <text>* Computes a 2-sample t statistic, comparing the means of the datasets
 * described by two {@link StatisticalSummary} instances, under the
 * assumption of equal subpopulation variances.  To compute a t-statistic
 * without the equal variances assumption, use{@link #t(StatisticalSummary,StatisticalSummary)}.
 * <p>
 * This statistic can be used to perform a (homoscedastic) two-sample
 * t-test to compare sample means.</p>
 * <p>
 * The t-statistic returned is</p>
 * <p>
 * &nbsp;&nbsp;<code>  t = (m1 - m2) / (sqrt(1/n1 +1/n2) sqrt(var))</code>
 * </p><p>
 * where <strong><code>n1</code></strong> is the size of first sample;
 * <strong><code> n2</code></strong> is the size of second sample;
 * <strong><code> m1</code></strong> is the mean of first sample;
 * <strong><code> m2</code></strong> is the mean of second sample
 * and <strong><code>var</code></strong> is the pooled variance estimate:
 * </p><p>
 * <code>var = sqrt(((n1 - 1)var1 + (n2 - 1)var2) / ((n1-1) + (n2-1)))</code>
 * </p><p>
 * with <strong><code>var1</code></strong> the variance of the first sample and
 * <strong><code>var2</code></strong> the variance of the second sample.
 * </p><p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The datasets described by the two Univariates must each contain
 * at least 2 observations.
 * </li></ul></p></text>
      <param>sampleStats1 StatisticalSummary describing data from the first sample</param>
      <param>sampleStats2 StatisticalSummary describing data from the second sample</param>
      <return>t statistic</return>
      <throws>NullArgumentException if the sample statistics are <code>null</code></throws>
      <throws>NumberIsTooSmallException if the number of samples is &lt; 2</throws>
    </javadoc>
    <method type="double" name="homoscedasticT" startLine="408" endLine="416" />
    <javadoc>
      <text>* Returns the <i>observed significance level</i>, or
 * <i>p-value</i>, associated with a one-sample, two-tailed t-test
 * comparing the mean of the input array with the constant <code>mu</code>.
 * <p>
 * The number returned is the smallest significance level
 * at which one can reject the null hypothesis that the mean equals
 * <code>mu</code> in favor of the two-sided alternative that the mean
 * is different from <code>mu</code>. For a one-sided test, divide the
 * returned value by 2.</p>
 * <p>
 * <strong>Usage Note:</strong><br>
 * The validity of the test depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * <a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html">here</a>
 * </p><p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The observed array length must be at least 2.
 * </li></ul></p></text>
      <param>mu constant value to compare sample mean against</param>
      <param>sample array of sample data values</param>
      <return>p-value</return>
      <throws>NullArgumentException if the sample array is <code>null</code></throws>
      <throws>NumberIsTooSmallException if the length of the array is &lt; 2</throws>
      <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
    </javadoc>
    <method type="double" name="tTest" startLine="447" endLine="454">
      <comment>No try-catch or advertised exception because args have just been checked</comment>
    </method>
    <javadoc>
      <text>* Performs a <a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm">
 * two-sided t-test</a> evaluating the null hypothesis that the mean of the population from
 * which <code>sample</code> is drawn equals <code>mu</code>.
 * <p>
 * Returns <code>true</code> iff the null hypothesis can be
 * rejected with confidence <code>1 - alpha</code>.  To
 * perform a 1-sided test, use <code>alpha * 2</code></p>
 * <p>
 * <strong>Examples:</strong><br><ol>
 * <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at
 * the 95% level, use <br><code>tTest(mu, sample, 0.05) </code>
 * </li>
 * <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>
 * at the 99% level, first verify that the measured sample mean is less
 * than <code>mu</code> and then use
 * <br><code>tTest(mu, sample, 0.02) </code>
 * </li></ol></p>
 * <p>
 * <strong>Usage Note:</strong><br>
 * The validity of the test depends on the assumptions of the one-sample
 * parametric t-test procedure, as discussed
 * <a href="http://www.basic.nwu.edu/statguidefiles/sg_glos.html#one-sample">here</a>
 * </p><p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The observed array length must be at least 2.
 * </li></ul></p></text>
      <param>mu constant value to compare sample mean against</param>
      <param>sample array of sample data values</param>
      <param>alpha significance level of the test</param>
      <return>p-value</return>
      <throws>NullArgumentException if the sample array is <code>null</code></throws>
      <throws>NumberIsTooSmallException if the length of the array is &lt; 2</throws>
      <throws>OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]</throws>
      <throws>MaxCountExceededException if an error computing the p-value</throws>
    </javadoc>
    <method type="boolean" name="tTest" startLine="495" endLine="500" />
    <javadoc>
      <text>* Returns the <i>observed significance level</i>, or
 * <i>p-value</i>, associated with a one-sample, two-tailed t-test
 * comparing the mean of the dataset described by <code>sampleStats</code>
 * with the constant <code>mu</code>.
 * <p>
 * The number returned is the smallest significance level
 * at which one can reject the null hypothesis that the mean equals
 * <code>mu</code> in favor of the two-sided alternative that the mean
 * is different from <code>mu</code>. For a one-sided test, divide the
 * returned value by 2.</p>
 * <p>
 * <strong>Usage Note:</strong><br>
 * The validity of the test depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * <a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html">
 * here</a></p>
 * <p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The sample must contain at least 2 observations.
 * </li></ul></p></text>
      <param>mu constant value to compare sample mean against</param>
      <param>sampleStats StatisticalSummary describing sample data</param>
      <return>p-value</return>
      <throws>NullArgumentException if <code>sampleStats</code> is <code>null</code></throws>
      <throws>NumberIsTooSmallException if the number of samples is &lt; 2</throws>
      <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
    </javadoc>
    <method type="double" name="tTest" startLine="533" endLine="539" />
    <javadoc>
      <text>* Performs a <a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm">
 * two-sided t-test</a> evaluating the null hypothesis that the mean of the
 * population from which the dataset described by <code>stats</code> is
 * drawn equals <code>mu</code>.
 * <p>
 * Returns <code>true</code> iff the null hypothesis can be rejected with
 * confidence <code>1 - alpha</code>.  To  perform a 1-sided test, use
 * <code>alpha * 2.</code></p>
 * <p>
 * <strong>Examples:</strong><br><ol>
 * <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at
 * the 95% level, use <br><code>tTest(mu, sampleStats, 0.05) </code>
 * </li>
 * <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>
 * at the 99% level, first verify that the measured sample mean is less
 * than <code>mu</code> and then use
 * <br><code>tTest(mu, sampleStats, 0.02) </code>
 * </li></ol></p>
 * <p>
 * <strong>Usage Note:</strong><br>
 * The validity of the test depends on the assumptions of the one-sample
 * parametric t-test procedure, as discussed
 * <a href="http://www.basic.nwu.edu/statguidefiles/sg_glos.html#one-sample">here</a>
 * </p><p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The sample must include at least 2 observations.
 * </li></ul></p></text>
      <param>mu constant value to compare sample mean against</param>
      <param>sampleStats StatisticalSummary describing sample data values</param>
      <param>alpha significance level of the test</param>
      <return>p-value</return>
      <throws>NullArgumentException if <code>sampleStats</code> is <code>null</code></throws>
      <throws>NumberIsTooSmallException if the number of samples is &lt; 2</throws>
      <throws>OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]</throws>
      <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
    </javadoc>
    <method type="boolean" name="tTest" startLine="582" endLine="587" />
    <javadoc>
      <text>* Returns the <i>observed significance level</i>, or
 * <i>p-value</i>, associated with a two-sample, two-tailed t-test
 * comparing the means of the input arrays.
 * <p>
 * The number returned is the smallest significance level
 * at which one can reject the null hypothesis that the two means are
 * equal in favor of the two-sided alternative that they are different.
 * For a one-sided test, divide the returned value by 2.</p>
 * <p>
 * The test does not assume that the underlying popuation variances are
 * equal  and it uses approximated degrees of freedom computed from the
 * sample data to compute the p-value.  The t-statistic used is as defined in{@link #t(double[],double[])} and the Welch-Satterthwaite approximation
 * to the degrees of freedom is used,
 * as described
 * <a href="http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm">
 * here.</a>  To perform the test under the assumption of equal subpopulation
 * variances, use {@link #homoscedasticTTest(double[],double[])}.</p>
 * <p>
 * <strong>Usage Note:</strong><br>
 * The validity of the p-value depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * <a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html">
 * here</a></p>
 * <p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The observed array lengths must both be at least 2.
 * </li></ul></p></text>
      <param>sample1 array of sample data values</param>
      <param>sample2 array of sample data values</param>
      <return>p-value for t-test</return>
      <throws>NullArgumentException if the arrays are <code>null</code></throws>
      <throws>NumberIsTooSmallException if the length of the arrays is &lt; 2</throws>
      <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
    </javadoc>
    <method type="double" name="tTest" startLine="628" endLine="637">
      <comment>No try-catch or advertised exception because args have just been checked</comment>
    </method>
    <javadoc>
      <text>* Returns the <i>observed significance level</i>, or
 * <i>p-value</i>, associated with a two-sample, two-tailed t-test
 * comparing the means of the input arrays, under the assumption that
 * the two samples are drawn from subpopulations with equal variances.
 * To perform the test without the equal variances assumption, use{@link #tTest(double[],double[])}.</p>
 * <p>
 * The number returned is the smallest significance level
 * at which one can reject the null hypothesis that the two means are
 * equal in favor of the two-sided alternative that they are different.
 * For a one-sided test, divide the returned value by 2.</p>
 * <p>
 * A pooled variance estimate is used to compute the t-statistic.  See{@link #homoscedasticT(double[],double[])}. The sum of the sample sizes
 * minus 2 is used as the degrees of freedom.</p>
 * <p>
 * <strong>Usage Note:</strong><br>
 * The validity of the p-value depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * <a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html">
 * here</a></p>
 * <p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The observed array lengths must both be at least 2.
 * </li></ul></p></text>
      <param>sample1 array of sample data values</param>
      <param>sample2 array of sample data values</param>
      <return>p-value for t-test</return>
      <throws>NullArgumentException if the arrays are <code>null</code></throws>
      <throws>NumberIsTooSmallException if the length of the arrays is &lt; 2</throws>
      <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
    </javadoc>
    <method type="double" name="homoscedasticTTest" startLine="675" endLine="686">
      <comment>No try-catch or advertised exception because args have just been checked</comment>
    </method>
    <javadoc>
      <text>* Performs a
 * <a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm">
 * two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code>
 * and <code>sample2</code> are drawn from populations with the same mean,
 * with significance level <code>alpha</code>.  This test does not assume
 * that the subpopulation variances are equal.  To perform the test assuming
 * equal variances, use{@link #homoscedasticTTest(double[],double[],double)}.
 * <p>
 * Returns <code>true</code> iff the null hypothesis that the means are
 * equal can be rejected with confidence <code>1 - alpha</code>.  To
 * perform a 1-sided test, use <code>alpha * 2</code></p>
 * <p>
 * See {@link #t(double[],double[])} for the formula used to compute the
 * t-statistic.  Degrees of freedom are approximated using the
 * <a href="http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm">
 * Welch-Satterthwaite approximation.</a></p>
 * <p>
 * <strong>Examples:</strong><br><ol>
 * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at
 * the 95% level,  use
 * <br><code>tTest(sample1, sample2, 0.05). </code>
 * </li>
 * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>,
 * at the 99% level, first verify that the measured  mean of <code>sample 1</code>
 * is less than the mean of <code>sample 2</code> and then use
 * <br><code>tTest(sample1, sample2, 0.02) </code>
 * </li></ol></p>
 * <p>
 * <strong>Usage Note:</strong><br>
 * The validity of the test depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * <a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html">
 * here</a></p>
 * <p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The observed array lengths must both be at least 2.
 * </li>
 * <li> <code> 0 < alpha < 0.5 </code>
 * </li></ul></p></text>
      <param>sample1 array of sample data values</param>
      <param>sample2 array of sample data values</param>
      <param>alpha significance level of the test</param>
      <return>true if the null hypothesis can be rejected with
 * confidence 1 - alpha</return>
      <throws>NullArgumentException if the arrays are <code>null</code></throws>
      <throws>NumberIsTooSmallException if the length of the arrays is &lt; 2</throws>
      <throws>OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]</throws>
      <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
    </javadoc>
    <method type="boolean" name="tTest" startLine="743" endLine="748" />
    <javadoc>
      <text>* Performs a
 * <a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm">
 * two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code>
 * and <code>sample2</code> are drawn from populations with the same mean,
 * with significance level <code>alpha</code>,  assuming that the
 * subpopulation variances are equal.  Use{@link #tTest(double[],double[],double)} to perform the test without
 * the assumption of equal variances.
 * <p>
 * Returns <code>true</code> iff the null hypothesis that the means are
 * equal can be rejected with confidence <code>1 - alpha</code>.  To
 * perform a 1-sided test, use <code>alpha * 2.</code>  To perform the test
 * without the assumption of equal subpopulation variances, use{@link #tTest(double[],double[],double)}.</p>
 * <p>
 * A pooled variance estimate is used to compute the t-statistic. See{@link #t(double[],double[])} for the formula. The sum of the sample
 * sizes minus 2 is used as the degrees of freedom.</p>
 * <p>
 * <strong>Examples:</strong><br><ol>
 * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at
 * the 95% level, use <br><code>tTest(sample1, sample2, 0.05). </code>
 * </li>
 * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2, </code>
 * at the 99% level, first verify that the measured mean of
 * <code>sample 1</code> is less than the mean of <code>sample 2</code>
 * and then use
 * <br><code>tTest(sample1, sample2, 0.02) </code>
 * </li></ol></p>
 * <p>
 * <strong>Usage Note:</strong><br>
 * The validity of the test depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * <a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html">
 * here</a></p>
 * <p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The observed array lengths must both be at least 2.
 * </li>
 * <li> <code> 0 < alpha < 0.5 </code>
 * </li></ul></p></text>
      <param>sample1 array of sample data values</param>
      <param>sample2 array of sample data values</param>
      <param>alpha significance level of the test</param>
      <return>true if the null hypothesis can be rejected with
 * confidence 1 - alpha</return>
      <throws>NullArgumentException if the arrays are <code>null</code></throws>
      <throws>NumberIsTooSmallException if the length of the arrays is &lt; 2</throws>
      <throws>OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]</throws>
      <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
    </javadoc>
    <method type="boolean" name="homoscedasticTTest" startLine="806" endLine="811" />
    <javadoc>
      <text>* Returns the <i>observed significance level</i>, or
 * <i>p-value</i>, associated with a two-sample, two-tailed t-test
 * comparing the means of the datasets described by two StatisticalSummary
 * instances.
 * <p>
 * The number returned is the smallest significance level
 * at which one can reject the null hypothesis that the two means are
 * equal in favor of the two-sided alternative that they are different.
 * For a one-sided test, divide the returned value by 2.</p>
 * <p>
 * The test does not assume that the underlying population variances are
 * equal  and it uses approximated degrees of freedom computed from the
 * sample data to compute the p-value.   To perform the test assuming
 * equal variances, use{@link #homoscedasticTTest(StatisticalSummary,StatisticalSummary)}.</p>
 * <p>
 * <strong>Usage Note:</strong><br>
 * The validity of the p-value depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * <a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html">
 * here</a></p>
 * <p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The datasets described by the two Univariates must each contain
 * at least 2 observations.
 * </li></ul></p></text>
      <param>sampleStats1  StatisticalSummary describing data from the first sample</param>
      <param>sampleStats2  StatisticalSummary describing data from the second sample</param>
      <return>p-value for t-test</return>
      <throws>NullArgumentException if the sample statistics are <code>null</code></throws>
      <throws>NumberIsTooSmallException if the number of samples is &lt; 2</throws>
      <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
    </javadoc>
    <method type="double" name="tTest" startLine="851" endLine="859" />
    <javadoc>
      <text>* Returns the <i>observed significance level</i>, or
 * <i>p-value</i>, associated with a two-sample, two-tailed t-test
 * comparing the means of the datasets described by two StatisticalSummary
 * instances, under the hypothesis of equal subpopulation variances. To
 * perform a test without the equal variances assumption, use{@link #tTest(StatisticalSummary,StatisticalSummary)}.
 * <p>
 * The number returned is the smallest significance level
 * at which one can reject the null hypothesis that the two means are
 * equal in favor of the two-sided alternative that they are different.
 * For a one-sided test, divide the returned value by 2.</p>
 * <p>
 * See {@link #homoscedasticT(double[],double[])} for the formula used to
 * compute the t-statistic. The sum of the  sample sizes minus 2 is used as
 * the degrees of freedom.</p>
 * <p>
 * <strong>Usage Note:</strong><br>
 * The validity of the p-value depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * <a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html">here</a>
 * </p><p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The datasets described by the two Univariates must each contain
 * at least 2 observations.
 * </li></ul></p></text>
      <param>sampleStats1  StatisticalSummary describing data from the first sample</param>
      <param>sampleStats2  StatisticalSummary describing data from the second sample</param>
      <return>p-value for t-test</return>
      <throws>NullArgumentException if the sample statistics are <code>null</code></throws>
      <throws>NumberIsTooSmallException if the number of samples is &lt; 2</throws>
      <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
    </javadoc>
    <method type="double" name="homoscedasticTTest" startLine="898" endLine="908" />
    <javadoc>
      <text>* Performs a
 * <a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm">
 * two-sided t-test</a> evaluating the null hypothesis that
 * <code>sampleStats1</code> and <code>sampleStats2</code> describe
 * datasets drawn from populations with the same mean, with significance
 * level <code>alpha</code>.   This test does not assume that the
 * subpopulation variances are equal.  To perform the test under the equal
 * variances assumption, use{@link #homoscedasticTTest(StatisticalSummary,StatisticalSummary)}.
 * <p>
 * Returns <code>true</code> iff the null hypothesis that the means are
 * equal can be rejected with confidence <code>1 - alpha</code>.  To
 * perform a 1-sided test, use <code>alpha * 2</code></p>
 * <p>
 * See {@link #t(double[],double[])} for the formula used to compute the
 * t-statistic.  Degrees of freedom are approximated using the
 * <a href="http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm">
 * Welch-Satterthwaite approximation.</a></p>
 * <p>
 * <strong>Examples:</strong><br><ol>
 * <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at
 * the 95%, use
 * <br><code>tTest(sampleStats1, sampleStats2, 0.05) </code>
 * </li>
 * <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>
 * at the 99% level,  first verify that the measured mean of
 * <code>sample 1</code> is less than  the mean of <code>sample 2</code>
 * and then use
 * <br><code>tTest(sampleStats1, sampleStats2, 0.02) </code>
 * </li></ol></p>
 * <p>
 * <strong>Usage Note:</strong><br>
 * The validity of the test depends on the assumptions of the parametric
 * t-test procedure, as discussed
 * <a href="http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html">
 * here</a></p>
 * <p>
 * <strong>Preconditions</strong>: <ul>
 * <li>The datasets described by the two Univariates must each contain
 * at least 2 observations.
 * </li>
 * <li> <code> 0 < alpha < 0.5 </code>
 * </li></ul></p></text>
      <param>sampleStats1 StatisticalSummary describing sample data values</param>
      <param>sampleStats2 StatisticalSummary describing sample data values</param>
      <param>alpha significance level of the test</param>
      <return>true if the null hypothesis can be rejected with
 * confidence 1 - alpha</return>
      <throws>NullArgumentException if the sample statistics are <code>null</code></throws>
      <throws>NumberIsTooSmallException if the number of samples is &lt; 2</throws>
      <throws>OutOfRangeException if <code>alpha</code> is not in the range (0, 0.5]</throws>
      <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
    </javadoc>
    <method type="boolean" name="tTest" startLine="969" endLine="974" />
    <javadoc>
      <text>* Computes approximate degrees of freedom for 2-sample t-test.</text>
      <param>v1 first sample variance</param>
      <param>v2 second sample variance</param>
      <param>n1 first sample n</param>
      <param>n2 second sample n</param>
      <return>approximate degrees of freedom</return>
    </javadoc>
    <method type="double" name="df" startLine="987" endLine="991" />
    <javadoc>
      <text>* Computes t test statistic for 1-sample t-test.</text>
      <param>m sample mean</param>
      <param>mu constant to test against</param>
      <param>v sample variance</param>
      <param>n sample n</param>
      <return>t test statistic</return>
    </javadoc>
    <method type="double" name="t" startLine="1003" endLine="1005" />
    <javadoc>
      <text>* Computes t test statistic for 2-sample t-test.
 * <p>
 * Does not assume that subpopulation variances are equal.</p></text>
      <param>m1 first sample mean</param>
      <param>m2 second sample mean</param>
      <param>v1 first sample variance</param>
      <param>v2 second sample variance</param>
      <param>n1 first sample n</param>
      <param>n2 second sample n</param>
      <return>t test statistic</return>
    </javadoc>
    <method type="double" name="t" startLine="1022" endLine="1024" />
    <javadoc>
      <text>* Computes t test statistic for 2-sample t-test under the hypothesis
 * of equal subpopulation variances.</text>
      <param>m1 first sample mean</param>
      <param>m2 second sample mean</param>
      <param>v1 first sample variance</param>
      <param>v2 second sample variance</param>
      <param>n1 first sample n</param>
      <param>n2 second sample n</param>
      <return>t test statistic</return>
    </javadoc>
    <method type="double" name="homoscedasticT" startLine="1040" endLine="1043">
      <declaration type="double" name="pooledVariance" />
    </method>
    <javadoc>
      <text>* Computes p-value for 2-sided, 1-sample t-test.</text>
      <param>m sample mean</param>
      <param>mu constant to test against</param>
      <param>v sample variance</param>
      <param>n sample n</param>
      <return>p-value</return>
      <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
      <throws>MathIllegalArgumentException if n is not greater than 1</throws>
    </javadoc>
    <method type="double" name="tTest" startLine="1058" endLine="1064">
      <declaration type="double" name="t" />
      <declaration type="TDistribution" name="distribution" />
    </method>
    <javadoc>
      <text>* Computes p-value for 2-sided, 2-sample t-test.
 * <p>
 * Does not assume subpopulation variances are equal. Degrees of freedom
 * are estimated from the data.</p></text>
      <param>m1 first sample mean</param>
      <param>m2 second sample mean</param>
      <param>v1 first sample variance</param>
      <param>v2 second sample variance</param>
      <param>n1 first sample n</param>
      <param>n2 second sample n</param>
      <return>p-value</return>
      <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
      <throws>NotStrictlyPositiveException if the estimated degrees of freedom is not
 * strictly positive</throws>
    </javadoc>
    <method type="double" name="tTest" startLine="1086" endLine="1093">
      <declaration type="double" name="t" />
      <declaration type="double" name="degreesOfFreedom" />
      <declaration type="TDistribution" name="distribution" />
    </method>
    <javadoc>
      <text>* Computes p-value for 2-sided, 2-sample t-test, under the assumption
 * of equal subpopulation variances.
 * <p>
 * The sum of the sample sizes minus 2 is used as degrees of freedom.</p></text>
      <param>m1 first sample mean</param>
      <param>m2 second sample mean</param>
      <param>v1 first sample variance</param>
      <param>v2 second sample variance</param>
      <param>n1 first sample n</param>
      <param>n2 second sample n</param>
      <return>p-value</return>
      <throws>MaxCountExceededException if an error occurs computing the p-value</throws>
      <throws>NotStrictlyPositiveException if the estimated degrees of freedom is not
 * strictly positive</throws>
    </javadoc>
    <method type="double" name="homoscedasticTTest" startLine="1115" endLine="1122">
      <declaration type="double" name="t" />
      <declaration type="double" name="degreesOfFreedom" />
      <declaration type="TDistribution" name="distribution" />
    </method>
    <javadoc>
      <text>* Check significance level.</text>
      <param>alpha significance level</param>
      <throws>OutOfRangeException if the significance level is out of bounds.</throws>
    </javadoc>
    <method type="void" name="checkSignificanceLevel" startLine="1131" endLine="1138">
      <scope startLine="1133" endLine="1136" />
    </method>
    <javadoc>
      <text>* Check sample data.</text>
      <param>data Sample data.</param>
      <throws>NullArgumentException if {@code data} is {@code null}.</throws>
      <throws>NumberIsTooSmallException if there is not enough sample data.</throws>
    </javadoc>
    <method type="void" name="checkSampleData" startLine="1148" endLine="1159">
      <scope startLine="1150" endLine="1152" />
      <scope startLine="1153" endLine="1157" />
    </method>
    <javadoc>
      <text>* Check sample data.</text>
      <param>stat Statistical summary.</param>
      <throws>NullArgumentException if {@code data} is {@code null}.</throws>
      <throws>NumberIsTooSmallException if there is not enough sample data.</throws>
    </javadoc>
    <method type="void" name="checkSampleData" startLine="1169" endLine="1180">
      <scope startLine="1171" endLine="1173" />
      <scope startLine="1174" endLine="1178" />
    </method>
    <comment>----------------------------------------------- Protected methods</comment>
  </class>
</source>
