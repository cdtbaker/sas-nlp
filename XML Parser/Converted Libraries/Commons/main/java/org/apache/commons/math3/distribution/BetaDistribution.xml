<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.special.Gamma" />
  <import name="org.apache.commons.math3.special.Beta" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937c" />
  <class name="BetaDistribution" extends="AbstractRealDistribution" startLine="27">
    <javadoc>
      <text>* Implements the Beta distribution.</text>
      <see><a href="http://en.wikipedia.org/wiki/Beta_distribution">Beta distribution</a></see>
      <version>$Id: BetaDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>2.0 (changed to concrete class in 3.0)</since>
    </javadoc>
    <javadoc>
      <text>* Default inverse cumulative probability accuracy.</text>
      <since>2.1</since>
    </javadoc>
    <declaration type="double" name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" />
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* First shape parameter.</text>
    </javadoc>
    <declaration type="double" name="alpha" />
    <javadoc>
      <text>* Second shape parameter.</text>
    </javadoc>
    <declaration type="double" name="beta" />
    <javadoc>
      <text>* Normalizing factor used in density computations.
 * updated whenever alpha or beta are changed.</text>
    </javadoc>
    <declaration type="double" name="z" />
    <javadoc>
      <text>* Inverse cumulative probability accuracy.</text>
    </javadoc>
    <declaration type="double" name="solverAbsoluteAccuracy" />
    <javadoc>
      <text>* Build a new instance.</text>
      <param>alpha First shape parameter (must be positive).</param>
      <param>beta Second shape parameter (must be positive).</param>
    </javadoc>
    <method type="constructor" name="BetaDistribution" startLine="59" endLine="61" />
    <javadoc>
      <text>* Build a new instance.</text>
      <param>alpha First shape parameter (must be positive).</param>
      <param>beta Second shape parameter (must be positive).</param>
      <param>inverseCumAccuracy Maximum absolute error in inverse
 * cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).</param>
      <since>2.1</since>
    </javadoc>
    <method type="constructor" name="BetaDistribution" startLine="73" endLine="75" />
    <javadoc>
      <text>* Creates a &beta; distribution.</text>
      <param>rng Random number generator.</param>
      <param>alpha First shape parameter (must be positive).</param>
      <param>beta Second shape parameter (must be positive).</param>
      <param>inverseCumAccuracy Maximum absolute error in inverse
 * cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).</param>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="BetaDistribution" startLine="91" endLine="98" />
    <javadoc>
      <text>* Access the first shape parameter, {@code alpha}.</text>
      <return>the first shape parameter.</return>
    </javadoc>
    <method type="double" name="getAlpha" startLine="105" endLine="107" />
    <javadoc>
      <text>* Access the second shape parameter, {@code beta}.</text>
      <return>the second shape parameter.</return>
    </javadoc>
    <method type="double" name="getBeta" startLine="114" endLine="116" />
    <javadoc>
      <text>* Recompute the normalization factor.</text>
    </javadoc>
    <method type="void" name="recomputeZ" startLine="119" endLine="123">
      <scope startLine="120" endLine="122" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="density" startLine="126" endLine="145">
      <scope startLine="128" endLine="130" />
      <scope startLine="130" endLine="135">
        <scope startLine="131" endLine="133" />
      </scope>
      <scope startLine="135" endLine="140">
        <scope startLine="136" endLine="138" />
      </scope>
      <scope startLine="140" endLine="144">
        <declaration type="double" name="logX" />
        <declaration type="double" name="log1mX" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="148" endLine="156">
      <scope startLine="149" endLine="151" />
      <scope startLine="151" endLine="153" />
      <scope startLine="153" endLine="155" />
    </method>
    <javadoc>
      <text>* Return the absolute accuracy setting of the solver used to estimate
 * inverse cumulative probabilities.</text>
      <return>the solver absolute accuracy.</return>
      <since>2.1</since>
    </javadoc>
    <method type="double" name="getSolverAbsoluteAccuracy" startLine="166" endLine="168" />
    <javadoc>
      <text>* {@inheritDoc}For first shape parameter {@code alpha} and second shape parameter{@code beta}, the mean is {@code alpha / (alpha + beta)}.</text>
    </javadoc>
    <method type="double" name="getNumericalMean" startLine="176" endLine="179">
      <declaration type="double" name="a" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}For first shape parameter {@code alpha} and second shape parameter{@code beta}, the variance is{@code (alpha * beta) / [(alpha + beta)^2 * (alpha + beta + 1)]}.</text>
    </javadoc>
    <method type="double" name="getNumericalVariance" startLine="188" endLine="193">
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
      <declaration type="double" name="alphabetasum" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}The lower bound of the support is always 0 no matter the parameters.</text>
      <return>lower bound of the support (always 0)</return>
    </javadoc>
    <method type="double" name="getSupportLowerBound" startLine="202" endLine="204" />
    <javadoc>
      <text>* {@inheritDoc}The upper bound of the support is always 1 no matter the parameters.</text>
      <return>upper bound of the support (always 1)</return>
    </javadoc>
    <method type="double" name="getSupportUpperBound" startLine="213" endLine="215" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isSupportLowerBoundInclusive" startLine="218" endLine="220" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isSupportUpperBoundInclusive" startLine="223" endLine="225" />
    <javadoc>
      <text>* {@inheritDoc}The support of this distribution is connected.</text>
      <return>{@code true}</return>
    </javadoc>
    <method type="boolean" name="isSupportConnected" startLine="234" endLine="236" />
  </class>
</source>
