<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.fraction">
  <import name="java.math.BigInteger" />
  <import name="java.text.FieldPosition" />
  <import name="java.text.NumberFormat" />
  <import name="java.text.ParsePosition" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <class name="ProperBigFractionFormat" extends="BigFractionFormat" startLine="27">
    <javadoc>
      <text>* Formats a BigFraction number in proper format.  The number format for each of
 * the whole number, numerator and, denominator can be configured.
 * <p>
 * Minus signs are only allowed in the whole number part - i.e.,
 * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
 * will result in a <code>ParseException</code>.</p></text>
      <since>1.1</since>
      <version>$Id: ProperBigFractionFormat.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* The format used for the whole number.</text>
    </javadoc>
    <declaration type="NumberFormat" name="wholeFormat" />
    <javadoc>
      <text>* Create a proper formatting instance with the default number format for
 * the whole, numerator, and denominator.</text>
    </javadoc>
    <method type="constructor" name="ProperBigFractionFormat" startLine="50" endLine="52" />
    <javadoc>
      <text>* Create a proper formatting instance with a custom number format for the
 * whole, numerator, and denominator.</text>
      <param>format the custom format for the whole, numerator, and
 * denominator.</param>
    </javadoc>
    <method type="constructor" name="ProperBigFractionFormat" startLine="60" endLine="62" />
    <javadoc>
      <text>* Create a proper formatting instance with a custom number format for each
 * of the whole, numerator, and denominator.</text>
      <param>wholeFormat the custom format for the whole.</param>
      <param>numeratorFormat the custom format for the numerator.</param>
      <param>denominatorFormat the custom format for the denominator.</param>
    </javadoc>
    <method type="constructor" name="ProperBigFractionFormat" startLine="73" endLine="76" />
    <javadoc>
      <text>* Formats a {@link BigFraction} object to produce a string.  The BigFraction
 * is output in proper format.</text>
      <param>fraction the object to format.</param>
      <param>toAppendTo where the text is to be appended</param>
      <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
      <return>the value passed in as toAppendTo.</return>
    </javadoc>
    <method type="StringBuffer" name="format" startLine="90" endLine="112">
      <declaration type="BigInteger" name="num" />
      <declaration type="BigInteger" name="den" />
      <declaration type="BigInteger" name="whole" />
      <scope startLine="100" endLine="106">
        <scope startLine="103" endLine="105" />
      </scope>
    </method>
    <javadoc>
      <text>* Access the whole format.</text>
      <return>the whole format.</return>
    </javadoc>
    <method type="NumberFormat" name="getWholeFormat" startLine="118" endLine="120" />
    <javadoc>
      <text>* Parses a string to produce a {@link BigFraction} object.  This method
 * expects the string to be formatted as a proper BigFraction.
 * <p>
 * Minus signs are only allowed in the whole number part - i.e.,
 * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
 * will result in a <code>ParseException</code>.</p></text>
      <param>source the string to parse</param>
      <param>pos input/ouput parsing parameter.</param>
      <return>the parsed {@link BigFraction} object.</return>
    </javadoc>
    <method type="BigFraction" name="parse" startLine="135" endLine="226">
      <declaration type="BigFraction" name="ret" />
      <scope startLine="138" endLine="140" />
      <declaration type="int" name="initialIndex" />
      <declaration type="BigInteger" name="whole" />
      <scope startLine="149" endLine="155">
        <comment>invalid integer number</comment>
        <comment>set index back to initial, error index should already be set</comment>
        <comment>character examined.</comment>
      </scope>
      <declaration type="BigInteger" name="num" />
      <scope startLine="162" endLine="168">
        <comment>invalid integer number</comment>
        <comment>set index back to initial, error index should already be set</comment>
        <comment>character examined.</comment>
      </scope>
      <scope startLine="170" endLine="174">
        <comment>minus signs should be leading, invalid expression</comment>
      </scope>
      <declaration type="int" name="startIndex" />
      <declaration type="char" name="c" />
      <declaration type="BigInteger" name="den" />
      <scope startLine="201" endLine="207">
        <comment>invalid integer number</comment>
        <comment>set index back to initial, error index should already be set</comment>
        <comment>character examined.</comment>
      </scope>
      <scope startLine="209" endLine="213">
        <comment>minus signs must be leading, invalid</comment>
      </scope>
      <declaration type="boolean" name="wholeIsNeg" />
      <scope startLine="216" endLine="218" />
      <scope startLine="220" endLine="222" />
      <comment>try to parse improper BigFraction</comment>
      <comment>parse whitespace</comment>
      <comment>parse whole</comment>
      <comment>parse whitespace</comment>
      <comment>parse numerator</comment>
      <comment>parse '/'</comment>
      <comment>no '/'</comment>
      <comment>return num as a BigFraction</comment>
      <comment>found '/', continue parsing denominator</comment>
      <comment>invalid '/'</comment>
      <comment>set index back to initial, error index should be the last</comment>
      <comment>character examined.</comment>
      <comment>parse whitespace</comment>
      <comment>parse denominator</comment>
    </method>
    <javadoc>
      <text>* Modify the whole format.</text>
      <param>format The new whole format value.</param>
      <throws>NullArgumentException if {@code format} is {@code null}.</throws>
    </javadoc>
    <method type="void" name="setWholeFormat" startLine="233" endLine="238">
      <scope startLine="234" endLine="236" />
    </method>
  </class>
</source>
