<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.special.Gamma" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <import name="org.apache.commons.math3.util.ArithmeticUtils" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937c" />
  <class name="PoissonDistribution" extends="AbstractIntegerDistribution" startLine="28">
    <javadoc>
      <text>* Implementation of the Poisson distribution.</text>
      <see><a href="http://en.wikipedia.org/wiki/Poisson_distribution">Poisson distribution (Wikipedia)</a></see>
      <see><a href="http://mathworld.wolfram.com/PoissonDistribution.html">Poisson distribution (MathWorld)</a></see>
      <version>$Id: PoissonDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Default maximum number of iterations for cumulative probability calculations.</text>
      <since>2.1</since>
    </javadoc>
    <declaration type="int" name="DEFAULT_MAX_ITERATIONS" />
    <javadoc>
      <text>* Default convergence criterion.</text>
      <since>2.1</since>
    </javadoc>
    <declaration type="double" name="DEFAULT_EPSILON" />
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Distribution used to compute normal approximation.</text>
    </javadoc>
    <declaration type="NormalDistribution" name="normal" />
    <javadoc>
      <text>* Distribution needed for the {@link #sample()} method.</text>
    </javadoc>
    <declaration type="ExponentialDistribution" name="exponential" />
    <javadoc>
      <text>* Mean of the distribution.</text>
    </javadoc>
    <declaration type="double" name="mean" />
    <javadoc>
      <text>* Maximum number of iterations for cumulative probability. Cumulative
 * probabilities are estimated using either Lanczos series approximation
 * of {@link Gamma#regularizedGammaP(double,double,double,int)}or continued fraction approximation of{@link Gamma#regularizedGammaQ(double,double,double,int)}.</text>
    </javadoc>
    <declaration type="int" name="maxIterations" />
    <javadoc>
      <text>* Convergence criterion for cumulative probability.</text>
    </javadoc>
    <declaration type="double" name="epsilon" />
    <javadoc>
      <text>* Creates a new Poisson distribution with specified mean.</text>
      <param>p the Poisson mean</param>
      <throws>NotStrictlyPositiveException if {@code p <= 0}.</throws>
    </javadoc>
    <method type="constructor" name="PoissonDistribution" startLine="73" endLine="75" />
    <javadoc>
      <text>* Creates a new Poisson distribution with specified mean, convergence
 * criterion and maximum number of iterations.</text>
      <param>p Poisson mean.</param>
      <param>epsilon Convergence criterion for cumulative probabilities.</param>
      <param>maxIterations the maximum number of iterations for cumulative
 * probabilities.</param>
      <throws>NotStrictlyPositiveException if {@code p <= 0}.</throws>
      <since>2.1</since>
    </javadoc>
    <method type="constructor" name="PoissonDistribution" startLine="89" endLine="91" />
    <javadoc>
      <text>* Creates a new Poisson distribution with specified mean, convergence
 * criterion and maximum number of iterations.</text>
      <param>rng Random number generator.</param>
      <param>p Poisson mean.</param>
      <param>epsilon Convergence criterion for cumulative probabilities.</param>
      <param>maxIterations the maximum number of iterations for cumulative
 * probabilities.</param>
      <throws>NotStrictlyPositiveException if {@code p <= 0}.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="PoissonDistribution" startLine="109" endLine="124">
      <scope startLine="112" endLine="114" />
      <comment>Use the same RNG instance as the parent class.</comment>
    </method>
    <javadoc>
      <text>* Creates a new Poisson distribution with the specified mean and
 * convergence criterion.</text>
      <param>p Poisson mean.</param>
      <param>epsilon Convergence criterion for cumulative probabilities.</param>
      <throws>NotStrictlyPositiveException if {@code p <= 0}.</throws>
      <since>2.1</since>
    </javadoc>
    <method type="constructor" name="PoissonDistribution" startLine="136" endLine="138" />
    <javadoc>
      <text>* Creates a new Poisson distribution with the specified mean and maximum
 * number of iterations.</text>
      <param>p Poisson mean.</param>
      <param>maxIterations Maximum number of iterations for cumulative
 * probabilities.</param>
      <since>2.1</since>
    </javadoc>
    <method type="constructor" name="PoissonDistribution" startLine="149" endLine="151" />
    <javadoc>
      <text>* Get the mean for the distribution.</text>
      <return>the mean for the distribution.</return>
    </javadoc>
    <method type="double" name="getMean" startLine="158" endLine="160" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="probability" startLine="163" endLine="175">
      <declaration type="double" name="ret" />
      <scope startLine="165" endLine="167" />
      <scope startLine="167" endLine="169" />
      <scope startLine="169" endLine="173" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="178" endLine="187">
      <scope startLine="179" endLine="181" />
      <scope startLine="182" endLine="184" />
    </method>
    <javadoc>
      <text>* Calculates the Poisson distribution function using a normal
 * approximation. The {@code N(mean, sqrt(mean))} distribution is used
 * to approximate the Poisson distribution. The computation uses
 * "half-correction" (evaluating the normal distribution function at{@code x + 0.5}).</text>
      <param>x Upper bound, inclusive.</param>
      <return>the distribution function value calculated using a normal
 * approximation.</return>
    </javadoc>
    <method type="double" name="normalApproximateProbability" startLine="200" endLine="203">
      <comment>calculate the probability using half-correction</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}For mean parameter {@code p}, the mean is {@code p}.</text>
    </javadoc>
    <method type="double" name="getNumericalMean" startLine="210" endLine="212" />
    <javadoc>
      <text>* {@inheritDoc}For mean parameter {@code p}, the variance is {@code p}.</text>
    </javadoc>
    <method type="double" name="getNumericalVariance" startLine="219" endLine="221" />
    <javadoc>
      <text>* {@inheritDoc}The lower bound of the support is always 0 no matter the mean parameter.</text>
      <return>lower bound of the support (always 0)</return>
    </javadoc>
    <method type="int" name="getSupportLowerBound" startLine="230" endLine="232" />
    <javadoc>
      <text>* {@inheritDoc}The upper bound of the support is positive infinity,
 * regardless of the parameter values. There is no integer infinity,
 * so this method returns {@code Integer.MAX_VALUE}.</text>
      <return>upper bound of the support (always {@code Integer.MAX_VALUE} for
 * positive infinity)</return>
    </javadoc>
    <method type="int" name="getSupportUpperBound" startLine="244" endLine="246" />
    <javadoc>
      <text>* {@inheritDoc}The support of this distribution is connected.</text>
      <return>{@code true}</return>
    </javadoc>
    <method type="boolean" name="isSupportConnected" startLine="255" endLine="257" />
    <javadoc>
      <text>* {@inheritDoc}<p>
 * <strong>Algorithm Description</strong>:
 * <ul>
 * <li>For small means, uses simulation of a Poisson process
 * using Uniform deviates, as described
 * <a href="http://irmi.epfl.ch/cmos/Pmmi/interactive/rng7.htm"> here</a>.
 * The Poisson process (and hence value returned) is bounded by 1000 * mean.
 * </li>
 * <li>For large means, uses the rejection algorithm described in
 * <quote>
 * Devroye, Luc. (1981).<i>The Computer Generation of Poisson Random Variables</i>
 * <strong>Computing</strong> vol. 26 pp. 197-207.
 * </quote>
 * </li>
 * </ul>
 * </p></text>
      <return>a random value.</return>
      <since>2.2</since>
    </javadoc>
    <method type="int" name="sample" startLine="282" endLine="284" />
    <javadoc>
      <param>meanPoisson Mean of the Poisson distribution.</param>
      <return>the next sample.</return>
    </javadoc>
    <method type="long" name="nextPoisson" startLine="290" endLine="374">
      <declaration type="double" name="pivot" />
      <scope startLine="292" endLine="308">
        <declaration type="double" name="p" />
        <declaration type="long" name="n" />
        <declaration type="double" name="r" />
        <declaration type="double" name="rnd" />
        <scope startLine="298" endLine="306">
          <scope startLine="301" endLine="303" />
          <scope startLine="303" endLine="305" />
        </scope>
      </scope>
      <scope startLine="308" endLine="373">
        <declaration type="double" name="lambda" />
        <declaration type="double" name="lambdaFractional" />
        <declaration type="double" name="logLambda" />
        <declaration type="double" name="logLambdaFactorial" />
        <declaration type="long" name="y2" />
        <declaration type="double" name="delta" />
        <declaration type="double" name="halfDelta" />
        <declaration type="double" name="twolpd" />
        <declaration type="double" name="a1" />
        <declaration type="double" name="a2" />
        <declaration type="double" name="aSum" />
        <declaration type="double" name="p1" />
        <declaration type="double" name="p2" />
        <declaration type="double" name="c1" />
        <declaration type="double" name="x" />
        <declaration type="double" name="y" />
        <declaration type="double" name="v" />
        <declaration type="int" name="a" />
        <declaration type="double" name="t" />
        <declaration type="double" name="qr" />
        <declaration type="double" name="qa" />
        <scope startLine="331" endLine="371">
          <declaration type="double" name="u" />
          <scope startLine="333" endLine="342">
            <declaration type="double" name="n" />
            <scope startLine="336" endLine="338" />
            <declaration type="double" name="e" />
          </scope>
          <scope startLine="342" endLine="351">
            <scope startLine="343" endLine="346" />
            <scope startLine="346" endLine="350" />
          </scope>
          <scope startLine="354" endLine="357" />
          <scope startLine="360" endLine="363" />
          <scope startLine="364" endLine="366" />
          <scope startLine="367" endLine="370" />
        </scope>
      </scope>
    </method>
  </class>
</source>
