<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.solvers">
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <interface name="BaseUnivariateSolver" startLine="24">
    <javadoc>
      <text>* Interface for (univariate real) rootfinding algorithms.
 * Implementations will search for only one zero in the given interval.
 * This class is not intended for use outside of the Apache Commons Math
 * library, regular user should rely on more specific interfaces like{@link UnivariateSolver}, {@link PolynomialSolver} or {@link DifferentiableUnivariateSolver}.</text>
      <param><FUNC>
 *  Type of function to solve.</param>
      <since>3.0</since>
      <version>$Id: BaseUnivariateSolver.java 1455194 2013-03-11 15:45:54Z luc $</version>
      <see>UnivariateSolver</see>
      <see>PolynomialSolver</see>
      <see>DifferentiableUnivariateSolver</see>
    </javadoc>
    <method name="getMaxEvaluations" type="int" startLine="41" endLine="46" />
    <javadoc>
      <text>* Get the maximum number of function evaluations.</text>
      <return>the maximum number of function evaluations.</return>
    </javadoc>
    <method name="getEvaluations" type="int" startLine="48" endLine="56" />
    <javadoc>
      <text>* Get the number of evaluations of the objective function.
 * The number of evaluations corresponds to the last call to the{@code optimize} method. It is 0 if the method has not been
 * called yet.</text>
      <return>the number of evaluations of the objective function.</return>
    </javadoc>
    <method name="getAbsoluteAccuracy" type="double" startLine="58" endLine="67" />
    <javadoc>
      <text>* Get the absolute accuracy of the solver.  Solutions returned by the
 * solver should be accurate to this tolerance, i.e., if &epsilon; is the
 * absolute accuracy of the solver and {@code v} is a value returned by
 * one of the {@code solve} methods, then a root of the function should
 * exist somewhere in the interval ({@code v} - &epsilon;, {@code v} + &epsilon;).</text>
      <return>the absolute accuracy.</return>
    </javadoc>
    <method name="getRelativeAccuracy" type="double" startLine="69" endLine="79" />
    <javadoc>
      <text>* Get the relative accuracy of the solver.  The contract for relative
 * accuracy is the same as {@link #getAbsoluteAccuracy()}, but using
 * relative, rather than absolute error.  If &rho; is the relative accuracy
 * configured for a solver and {@code v} is a value returned, then a root
 * of the function should exist somewhere in the interval
 * ({@code v} - &rho; {@code v}, {@code v} + &rho; {@code v}).</text>
      <return>the relative accuracy.</return>
    </javadoc>
    <method name="getFunctionValueAccuracy" type="double" startLine="81" endLine="89" />
    <javadoc>
      <text>* Get the function value accuracy of the solver.  If {@code v} is
 * a value returned by the solver for a function {@code f},
 * then by contract, {@code |f(v)|} should be less than or equal to
 * the function value accuracy configured for the solver.</text>
      <return>the function value accuracy.</return>
    </javadoc>
    <method name="solve" type="double" startLine="91" endLine="108" />
    <javadoc>
      <text>* Solve for a zero root in the given interval.
 * A solver may require that the interval brackets a single zero root.
 * Solvers that do require bracketing should be able to handle the case
 * where one of the endpoints is itself a root.</text>
      <param>maxEval Maximum number of evaluations.</param>
      <param>f Function to solve.</param>
      <param>min Lower bound for the interval.</param>
      <param>max Upper bound for the interval.</param>
      <return>a value where the function is zero.</return>
      <throws>MathIllegalArgumentExceptionif the arguments do not satisfy the requirements specified by the solver.</throws>
      <throws>TooManyEvaluationsException if
 * the allowed number of evaluations is exceeded.</throws>
    </javadoc>
    <method name="solve" type="double" startLine="110" endLine="128" />
    <javadoc>
      <text>* Solve for a zero in the given interval, start at {@code startValue}.
 * A solver may require that the interval brackets a single zero root.
 * Solvers that do require bracketing should be able to handle the case
 * where one of the endpoints is itself a root.</text>
      <param>maxEval Maximum number of evaluations.</param>
      <param>f Function to solve.</param>
      <param>min Lower bound for the interval.</param>
      <param>max Upper bound for the interval.</param>
      <param>startValue Start value to use.</param>
      <return>a value where the function is zero.</return>
      <throws>MathIllegalArgumentExceptionif the arguments do not satisfy the requirements specified by the solver.</throws>
      <throws>TooManyEvaluationsException if
 * the allowed number of evaluations is exceeded.</throws>
    </javadoc>
    <method name="solve" type="double" startLine="130" endLine="142" />
    <javadoc>
      <text>* Solve for a zero in the vicinity of {@code startValue}.</text>
      <param>f Function to solve.</param>
      <param>startValue Start value to use.</param>
      <return>a value where the function is zero.</return>
      <param>maxEval Maximum number of evaluations.</param>
      <throws>org.apache.commons.math3.exception.MathIllegalArgumentExceptionif the arguments do not satisfy the requirements specified by the solver.</throws>
      <throws>org.apache.commons.math3.exception.TooManyEvaluationsException if
 * the allowed number of evaluations is exceeded.</throws>
    </javadoc>
  </interface>
</source>
