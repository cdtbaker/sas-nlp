<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.fitting">
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction" />
  <import name="org.apache.commons.math3.analysis.MultivariateMatrixFunction" />
  <import name="org.apache.commons.math3.analysis.ParametricUnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.differentiation.DerivativeStructure" />
  <import name="org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction" />
  <import name="org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer" />
  <import name="org.apache.commons.math3.optimization.MultivariateDifferentiableVectorOptimizer" />
  <import name="org.apache.commons.math3.optimization.PointVectorValuePair" />
  <class name="CurveFitter" startLine="32">
    <javadoc>
      <text>* Fitter for parametric univariate real functions y = f(x).
 * <br/>
 * When a univariate real function y = f(x) does depend on some
 * unknown parameters p<sub>0</sub>, p<sub>1</sub> ... p<sub>n-1</sub>,
 * this class can be used to find these parameters. It does this
 * by <em>fitting</em> the curve so it remains very close to a set of
 * observed points (x<sub>0</sub>, y<sub>0</sub>), (x<sub>1</sub>,
 * y<sub>1</sub>) ... (x<sub>k-1</sub>, y<sub>k-1</sub>). This fitting
 * is done by finding the parameters values that minimizes the objective
 * function &sum;(y<sub>i</sub>-f(x<sub>i</sub>))<sup>2</sup>. This is
 * really a least squares problem.</text>
      <param><T>
 *  Function to use for the fit.</param>
      <version>$Id: CurveFitter.java 1422230 2012-12-15 12:11:13Z erans $</version>
      <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Optimizer to use for the fitting.</text>
      <deprecated>as of 3.1 replaced by {@link #optimizer}</deprecated>
    </javadoc>
    <declaration type="DifferentiableMultivariateVectorOptimizer" name="oldOptimizer" />
    <javadoc>
      <text>* Optimizer to use for the fitting.</text>
    </javadoc>
    <declaration type="MultivariateDifferentiableVectorOptimizer" name="optimizer" />
    <javadoc>
      <text>* Observed points.</text>
    </javadoc>
    <declaration type="List<WeightedObservedPoint>" name="observations" />
    <javadoc>
      <text>* Simple constructor.</text>
      <param>optimizer optimizer to use for the fitting</param>
      <deprecated>as of 3.1 replaced by {@link #CurveFitter(MultivariateDifferentiableVectorOptimizer)}</deprecated>
    </javadoc>
    <method type="constructor" name="CurveFitter" startLine="69" endLine="73" />
    <javadoc>
      <text>* Simple constructor.</text>
      <param>optimizer optimizer to use for the fitting</param>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="CurveFitter" startLine="79" endLine="83" />
    <javadoc>
      <text>* Add an observed (x,y) point to the sample with unit weight.
 * <p>Calling this method is equivalent to call{@code addObservedPoint(1.0, x, y)}.</p></text>
      <param>x abscissa of the point</param>
      <param>y observed value of the point at x, after fitting we should
 * have f(x) as close as possible to this value</param>
      <see>#addObservedPoint(double,double,double)</see>
      <see>#addObservedPoint(WeightedObservedPoint)</see>
      <see>#getObservations()</see>
    </javadoc>
    <method type="void" name="addObservedPoint" startLine="95" endLine="97" />
    <javadoc>
      <text>* Add an observed weighted (x,y) point to the sample.</text>
      <param>weight weight of the observed point in the fit</param>
      <param>x abscissa of the point</param>
      <param>y observed value of the point at x, after fitting we should
 * have f(x) as close as possible to this value</param>
      <see>#addObservedPoint(double,double)</see>
      <see>#addObservedPoint(WeightedObservedPoint)</see>
      <see>#getObservations()</see>
    </javadoc>
    <method type="void" name="addObservedPoint" startLine="108" endLine="110" />
    <javadoc>
      <text>* Add an observed weighted (x,y) point to the sample.</text>
      <param>observed observed point to add</param>
      <see>#addObservedPoint(double,double)</see>
      <see>#addObservedPoint(double,double,double)</see>
      <see>#getObservations()</see>
    </javadoc>
    <method type="void" name="addObservedPoint" startLine="118" endLine="120" />
    <javadoc>
      <text>* Get the observed points.</text>
      <return>observed points</return>
      <see>#addObservedPoint(double,double)</see>
      <see>#addObservedPoint(double,double,double)</see>
      <see>#addObservedPoint(WeightedObservedPoint)</see>
    </javadoc>
    <method type="WeightedObservedPoint[]" name="getObservations" startLine="128" endLine="130" />
    <javadoc>
      <text>* Remove all observations.</text>
    </javadoc>
    <method type="void" name="clearObservations" startLine="135" endLine="137" />
    <javadoc>
      <text>* Fit a curve.
 * This method compute the coefficients of the curve that best
 * fit the sample of observed points previously given through calls
 * to the {@link #addObservedPoint(WeightedObservedPoint)addObservedPoint} method.</text>
      <param>f parametric function to fit.</param>
      <param>initialGuess first guess of the function parameters.</param>
      <return>the fitted parameters.</return>
      <throws>org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.</throws>
    </javadoc>
    <method type="double[]" name="fit" startLine="152" endLine="154" />
    <javadoc>
      <text>* Fit a curve.
 * This method compute the coefficients of the curve that best
 * fit the sample of observed points previously given through calls
 * to the {@link #addObservedPoint(WeightedObservedPoint)addObservedPoint} method.</text>
      <param>f parametric function to fit.</param>
      <param>initialGuess first guess of the function parameters.</param>
      <param>maxEval Maximum number of function evaluations.</param>
      <return>the fitted parameters.</return>
      <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the number of allowed evaluations is exceeded.</throws>
      <throws>org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.</throws>
      <since>3.0</since>
    </javadoc>
    <method type="double[]" name="fit" startLine="174" endLine="198">
      <declaration type="double[]" name="target" />
      <declaration type="double[]" name="weights" />
      <declaration type="int" name="i" />
      <scope startLine="179" endLine="183" />
      <declaration type="PointVectorValuePair" name="optimum" />
      <scope startLine="187" endLine="191">
        <comment>to be removed in 4.0</comment>
      </scope>
      <scope startLine="191" endLine="194" />
      <comment>prepare least squares problem</comment>
      <comment>perform the fit</comment>
      <comment>extract the coefficients</comment>
    </method>
    <class name="OldTheoreticalValuesFunction" startLine="200">
      <implements name="DifferentiableMultivariateVectorFunction" />
      <javadoc>
        <text>* Vectorial function computing function theoretical values.</text>
      </javadoc>
      <javadoc>
        <text>* Function to fit.</text>
      </javadoc>
      <declaration type="ParametricUnivariateFunction" name="f" />
      <javadoc>
        <text>* Simple constructor.</text>
        <param>f function to fit.</param>
      </javadoc>
      <method type="constructor" name="OldTheoreticalValuesFunction" startLine="210" endLine="212" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="MultivariateMatrixFunction" name="jacobian" startLine="215" endLine="228">
        <method type="double[][]" name="value" startLine="217" endLine="226">
          <declaration type="double[][][]" name="jacobian" />
          <declaration type="int" name="i" />
          <scope startLine="221" endLine="223" />
        </method>
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double[]" name="value" startLine="231" endLine="240">
        <declaration type="double[]" name="values" />
        <declaration type="int" name="i" />
        <scope startLine="235" endLine="237" />
        <comment>compute the residuals</comment>
      </method>
      <class name="TheoreticalValuesFunction" startLine="243">
        <implements name="MultivariateDifferentiableVectorFunction" />
        <javadoc>
          <text>* Vectorial function computing function theoretical values.</text>
        </javadoc>
        <javadoc>
          <text>* Function to fit.</text>
        </javadoc>
        <declaration type="ParametricUnivariateFunction" name="f" />
        <javadoc>
          <text>* Simple constructor.</text>
          <param>f function to fit.</param>
        </javadoc>
        <method type="constructor" name="TheoreticalValuesFunction" startLine="252" endLine="254" />
        <javadoc>
          <text>* {@inheritDoc}</text>
        </javadoc>
        <method type="double[]" name="value" startLine="257" endLine="266">
          <declaration type="double[]" name="values" />
          <declaration type="int" name="i" />
          <scope startLine="261" endLine="263" />
          <comment>compute the residuals</comment>
        </method>
        <javadoc>
          <text>* {@inheritDoc}</text>
        </javadoc>
        <method type="DerivativeStructure[]" name="value" startLine="269" endLine="294">
          <declaration type="double[]" name="parameters" />
          <scope startLine="273" endLine="275" />
          <declaration type="DerivativeStructure[]" name="values" />
          <declaration type="int" name="i" />
          <scope startLine="280" endLine="291">
            <declaration type="DerivativeStructure" name="vi" />
            <scope startLine="285" endLine="287" />
            <comment>build the DerivativeStructure by adding first the value as a constant</comment>
            <comment>and then adding derivatives</comment>
          </scope>
          <comment>extract parameters</comment>
          <comment>compute the residuals</comment>
        </method>
      </class>
    </class>
  </class>
</source>
