<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.ArithmeticUtils" />
  <import name="org.apache.commons.math3.util.ResizableDoubleArray" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937c" />
  <class name="ExponentialDistribution" extends="AbstractRealDistribution" startLine="28">
    <javadoc>
      <text>* Implementation of the exponential distribution.</text>
      <see><a href="http://en.wikipedia.org/wiki/Exponential_distribution">Exponential distribution (Wikipedia)</a></see>
      <see><a href="http://mathworld.wolfram.com/ExponentialDistribution.html">Exponential distribution (MathWorld)</a></see>
      <version>$Id: ExponentialDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Default inverse cumulative probability accuracy.</text>
      <since>2.1</since>
    </javadoc>
    <declaration type="double" name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" />
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Used when generating Exponential samples.
 * Table containing the constants
 * q_i = sum_{j=1}^i (ln 2)^j/j! = ln 2 + (ln 2)^2/2 + ... + (ln 2)^i/i!
 * until the largest representable fraction below 1 is exceeded.
 * Note that
 * 1 = 2 - 1 = exp(ln 2) - 1 = sum_{n=1}^infty (ln 2)^n / n!
 * thus q_i -> 1 as i -> +inf,
 * so the higher i, the closer to one we get (the series is not alternating).
 * By trying, n = 16 in Java is enough to reach 1.0.</text>
    </javadoc>
    <declaration type="double[]" name="EXPONENTIAL_SA_QI" />
    <javadoc>
      <text>* The mean of this distribution.</text>
    </javadoc>
    <declaration type="double" name="mean" />
    <javadoc>
      <text>* Inverse cumulative probability accuracy.</text>
    </javadoc>
    <declaration type="double" name="solverAbsoluteAccuracy" />
    <javadoc>
      <text>* Initialize tables.</text>
    </javadoc>
    <scope startLine="65" endLine="89">
      <declaration type="double" name="LN2" />
      <declaration type="double" name="qi" />
      <declaration type="int" name="i" />
      <declaration type="ResizableDoubleArray" name="ra" />
      <scope startLine="82" endLine="86" />
      <javadoc>
        <text>* Filling EXPONENTIAL_SA_QI table.
 * Note that we don't want qi = 0 in the table.</text>
      </javadoc>
      <javadoc>
        <text>* ArithmeticUtils provides factorials up to 20, so let's use that
 * limit together with Precision.EPSILON to generate the following
 * code (a priori, we know that there will be 16 elements, but it is
 * better to not hardcode it).</text>
      </javadoc>
    </scope>
    <javadoc>
      <text>* Create an exponential distribution with the given mean.</text>
      <param>mean mean of this distribution.</param>
    </javadoc>
    <method type="constructor" name="ExponentialDistribution" startLine="95" endLine="97" />
    <javadoc>
      <text>* Create an exponential distribution with the given mean.</text>
      <param>mean Mean of this distribution.</param>
      <param>inverseCumAccuracy Maximum absolute error in inverse
 * cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).</param>
      <throws>NotStrictlyPositiveException if {@code mean <= 0}.</throws>
      <since>2.1</since>
    </javadoc>
    <method type="constructor" name="ExponentialDistribution" startLine="109" endLine="111" />
    <javadoc>
      <text>* Creates an exponential distribution.</text>
      <param>rng Random number generator.</param>
      <param>mean Mean of this distribution.</param>
      <param>inverseCumAccuracy Maximum absolute error in inverse
 * cumulative probability estimates (defaults to{@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).</param>
      <throws>NotStrictlyPositiveException if {@code mean <= 0}.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="ExponentialDistribution" startLine="127" endLine="135">
      <scope startLine="130" endLine="132" />
    </method>
    <javadoc>
      <text>* Access the mean.</text>
      <return>the mean.</return>
    </javadoc>
    <method type="double" name="getMean" startLine="142" endLine="144" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="density" startLine="147" endLine="152">
      <scope startLine="148" endLine="150" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}The implementation of this method is based on:
 * <ul>
 * <li>
 * <a href="http://mathworld.wolfram.com/ExponentialDistribution.html">
 * Exponential Distribution</a>, equation (1).</li>
 * </ul></text>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="164" endLine="172">
      <declaration type="double" name="ret" />
      <scope startLine="166" endLine="168" />
      <scope startLine="168" endLine="170" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}Returns {@code 0} when {@code p= = 0} and{@code Double.POSITIVE_INFINITY} when {@code p == 1}.</text>
    </javadoc>
    <method type="double" name="inverseCumulativeProbability" startLine="181" endLine="193">
      <declaration type="double" name="ret" />
      <scope startLine="184" endLine="186" />
      <scope startLine="186" endLine="188" />
      <scope startLine="188" endLine="190" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}<p><strong>Algorithm Description</strong>: this implementation uses the
 * <a href="http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html">
 * Inversion Method</a> to generate exponentially distributed random values
 * from uniform deviates.</p></text>
      <return>a random value.</return>
      <since>2.2</since>
    </javadoc>
    <method type="double" name="sample" startLine="207" endLine="244">
      <declaration type="double" name="a" />
      <declaration type="double" name="u" />
      <scope startLine="213" endLine="216" />
      <scope startLine="222" endLine="224" />
      <declaration type="int" name="i" />
      <declaration type="double" name="u2" />
      <declaration type="double" name="umin" />
      <scope startLine="232" endLine="241">
        <scope startLine="236" endLine="238" />
        <comment>Step 8:</comment>
        <comment>Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1</comment>
      </scope>
      <comment>Step 1:</comment>
      <comment>Step 2 and 3:</comment>
      <comment>Step 4 (now u >= 0.5):</comment>
      <comment>Step 5:</comment>
      <comment>Step 6:</comment>
      <comment>Should be 1, be we iterate before it in while using 0</comment>
      <comment>Step 7 and 8:</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getSolverAbsoluteAccuracy" startLine="248" endLine="250" />
    <javadoc>
      <text>* {@inheritDoc}For mean parameter {@code k}, the mean is {@code k}.</text>
    </javadoc>
    <method type="double" name="getNumericalMean" startLine="257" endLine="259" />
    <javadoc>
      <text>* {@inheritDoc}For mean parameter {@code k}, the variance is {@code k^2}.</text>
    </javadoc>
    <method type="double" name="getNumericalVariance" startLine="266" endLine="269">
      <declaration type="double" name="m" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}The lower bound of the support is always 0 no matter the mean parameter.</text>
      <return>lower bound of the support (always 0)</return>
    </javadoc>
    <method type="double" name="getSupportLowerBound" startLine="278" endLine="280" />
    <javadoc>
      <text>* {@inheritDoc}The upper bound of the support is always positive infinity
 * no matter the mean parameter.</text>
      <return>upper bound of the support (always Double.POSITIVE_INFINITY)</return>
    </javadoc>
    <method type="double" name="getSupportUpperBound" startLine="290" endLine="292" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isSupportLowerBoundInclusive" startLine="295" endLine="297" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isSupportUpperBoundInclusive" startLine="300" endLine="302" />
    <javadoc>
      <text>* {@inheritDoc}The support of this distribution is connected.</text>
      <return>{@code true}</return>
    </javadoc>
    <method type="boolean" name="isSupportConnected" startLine="311" endLine="313" />
  </class>
</source>
