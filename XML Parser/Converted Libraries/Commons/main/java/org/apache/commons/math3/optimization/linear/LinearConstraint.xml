<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.linear">
  <import name="java.io.IOException" />
  <import name="java.io.ObjectInputStream" />
  <import name="java.io.ObjectOutputStream" />
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.linear.MatrixUtils" />
  <import name="org.apache.commons.math3.linear.RealVector" />
  <import name="org.apache.commons.math3.linear.ArrayRealVector" />
  <class name="LinearConstraint" startLine="30">
    <implements name="Serializable" />
    <javadoc>
      <text>* A linear constraint for a linear optimization problem.
 * <p>
 * A linear constraint has one of the forms:
 * <ul>
 * <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> = v</li>
 * <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> &lt;= v</li>
 * <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> >= v</li>
 * <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> =
 * r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
 * <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> &lt;=
 * r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
 * <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> >=
 * r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
 * </ul>
 * The c<sub>i</sub>, l<sub>i</sub> or r<sub>i</sub> are the coefficients of the constraints, the x<sub>i</sub>
 * are the coordinates of the current point and v is the value of the constraint.
 * </p></text>
      <version>$Id: LinearConstraint.java 1422230 2012-12-15 12:11:13Z erans $</version>
      <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Coefficients of the constraint (left hand side).</text>
    </javadoc>
    <declaration type="RealVector" name="coefficients" />
    <javadoc>
      <text>* Relationship between left and right hand sides (=, &lt;=, >=).</text>
    </javadoc>
    <declaration type="Relationship" name="relationship" />
    <javadoc>
      <text>* Value of the constraint (right hand side).</text>
    </javadoc>
    <declaration type="double" name="value" />
    <javadoc>
      <text>* Build a constraint involving a single linear equation.
 * <p>
 * A linear constraint with a single linear equation has one of the forms:
 * <ul>
 * <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> = v</li>
 * <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> &lt;= v</li>
 * <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> >= v</li>
 * </ul>
 * </p></text>
      <param>coefficients The coefficients of the constraint (left hand side)</param>
      <param>relationship The type of (in)equality used in the constraint</param>
      <param>value The value of the constraint (right hand side)</param>
    </javadoc>
    <method type="constructor" name="LinearConstraint" startLine="82" endLine="84" />
    <javadoc>
      <text>* Build a constraint involving a single linear equation.
 * <p>
 * A linear constraint with a single linear equation has one of the forms:
 * <ul>
 * <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> = v</li>
 * <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> &lt;= v</li>
 * <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> >= v</li>
 * </ul>
 * </p></text>
      <param>coefficients The coefficients of the constraint (left hand side)</param>
      <param>relationship The type of (in)equality used in the constraint</param>
      <param>value The value of the constraint (right hand side)</param>
    </javadoc>
    <method type="constructor" name="LinearConstraint" startLine="101" endLine="105" />
    <javadoc>
      <text>* Build a constraint involving two linear equations.
 * <p>
 * A linear constraint with two linear equation has one of the forms:
 * <ul>
 * <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> =
 * r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
 * <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> &lt;=
 * r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
 * <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> >=
 * r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
 * </ul>
 * </p></text>
      <param>lhsCoefficients The coefficients of the linear expression on the left hand side of the constraint</param>
      <param>lhsConstant The constant term of the linear expression on the left hand side of the constraint</param>
      <param>relationship The type of (in)equality used in the constraint</param>
      <param>rhsCoefficients The coefficients of the linear expression on the right hand side of the constraint</param>
      <param>rhsConstant The constant term of the linear expression on the right hand side of the constraint</param>
    </javadoc>
    <method type="constructor" name="LinearConstraint" startLine="128" endLine="136">
      <declaration type="double[]" name="sub" />
      <scope startLine="130" endLine="132" />
    </method>
    <javadoc>
      <text>* Build a constraint involving two linear equations.
 * <p>
 * A linear constraint with two linear equation has one of the forms:
 * <ul>
 * <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> =
 * r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
 * <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> &lt;=
 * r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
 * <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> >=
 * r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
 * </ul>
 * </p></text>
      <param>lhsCoefficients The coefficients of the linear expression on the left hand side of the constraint</param>
      <param>lhsConstant The constant term of the linear expression on the left hand side of the constraint</param>
      <param>relationship The type of (in)equality used in the constraint</param>
      <param>rhsCoefficients The coefficients of the linear expression on the right hand side of the constraint</param>
      <param>rhsConstant The constant term of the linear expression on the right hand side of the constraint</param>
    </javadoc>
    <method type="constructor" name="LinearConstraint" startLine="159" endLine="163" />
    <javadoc>
      <text>* Get the coefficients of the constraint (left hand side).</text>
      <return>coefficients of the constraint (left hand side)</return>
    </javadoc>
    <method type="RealVector" name="getCoefficients" startLine="169" endLine="171" />
    <javadoc>
      <text>* Get the relationship between left and right hand sides.</text>
      <return>relationship between left and right hand sides</return>
    </javadoc>
    <method type="Relationship" name="getRelationship" startLine="177" endLine="179" />
    <javadoc>
      <text>* Get the value of the constraint (right hand side).</text>
      <return>value of the constraint (right hand side)</return>
    </javadoc>
    <method type="double" name="getValue" startLine="185" endLine="187" />
    <method type="boolean" name="equals" startLine="190" endLine="203">
      <scope startLine="192" endLine="194" />
      <scope startLine="196" endLine="201">
        <declaration type="LinearConstraint" name="rhs" />
      </scope>
    </method>
    <method type="int" name="hashCode" startLine="206" endLine="210" />
    <javadoc>
      <text>* Serialize the instance.</text>
      <param>oos stream where object should be written</param>
      <throws>IOException if object cannot be written to stream</throws>
    </javadoc>
    <method type="void" name="writeObject" startLine="218" endLine="221" />
    <javadoc>
      <text>* Deserialize the instance.</text>
      <param>ois stream from which the object should be read</param>
      <throws>ClassNotFoundException if a class in the stream cannot be found</throws>
      <throws>IOException if object cannot be read from the stream</throws>
    </javadoc>
    <method type="void" name="readObject" startLine="230" endLine="233" />
  </class>
</source>
