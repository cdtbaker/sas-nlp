<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.geometry.partitioning.utilities">
  <class name="AVLTree" startLine="19">
    <javadoc>
      <text>* This class implements AVL trees.
 * <p>The purpose of this class is to sort elements while allowing
 * duplicate elements (i.e. such that {@code a.equals(b)} is
 * true). The {@code SortedSet} interface does not allow this, so
 * a specific class is needed. Null elements are not allowed.</p>
 * <p>Since the {@code equals} method is not sufficient to
 * differentiate elements, the {@link #delete delete} method is
 * implemented using the equality operator.</p>
 * <p>In order to clearly mark the methods provided here do not have
 * the same semantics as the ones specified in the{@code SortedSet} interface, different names are used
 * ({@code add} has been replaced by {@link #insert insert} and{@code remove} has been replaced by {@link #deletedelete}).</p>
 * <p>This class is based on the C implementation Georg Kraml has put
 * in the public domain. Unfortunately, his <a
 * href="www.purists.org/georg/avltree/index.html">page</a> seems not
 * to exist any more.</p></text>
      <param><T>
 *  the type of the elements</param>
      <version>$Id: AVLTree.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Top level node.</text>
    </javadoc>
    <declaration type="Node" name="top" />
    <javadoc>
      <text>* Build an empty tree.</text>
    </javadoc>
    <method type="constructor" name="AVLTree" startLine="54" endLine="56" />
    <javadoc>
      <text>* Insert an element in the tree.</text>
      <param>element element to insert (silently ignored if null)</param>
    </javadoc>
    <method type="void" name="insert" startLine="61" endLine="69">
      <scope startLine="62" endLine="68">
        <scope startLine="63" endLine="65" />
        <scope startLine="65" endLine="67" />
      </scope>
    </method>
    <javadoc>
      <text>* Delete an element from the tree.
 * <p>The element is deleted only if there is a node {@code n}containing exactly the element instance specified, i.e. for which{@code n.getElement() == element}. This is purposely
 * <em>different</em> from the specification of the{@code java.util.Set} {@code remove} method (in fact,
 * this is the reason why a specific class has been developed).</p></text>
      <param>element element to delete (silently ignored if null)</param>
      <return>true if the element was deleted from the tree</return>
    </javadoc>
    <method type="boolean" name="delete" startLine="81" endLine="97">
      <scope startLine="82" endLine="95">
        <scope startLine="83" endLine="94">
          <scope startLine="86" endLine="89" />
          <scope startLine="89" endLine="93" />
        </scope>
        <comment>loop over all elements neither smaller nor larger</comment>
        <comment>than the specified one</comment>
        <comment>all the remaining elements are known to be larger,</comment>
        <comment>the element is not in the tree</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Check if the tree is empty.</text>
      <return>true if the tree is empty</return>
    </javadoc>
    <method type="boolean" name="isEmpty" startLine="102" endLine="104" />
    <javadoc>
      <text>* Get the number of elements of the tree.</text>
      <return>number of elements contained in the tree</return>
    </javadoc>
    <method type="int" name="size" startLine="110" endLine="112" />
    <javadoc>
      <text>* Get the node whose element is the smallest one in the tree.</text>
      <return>the tree node containing the smallest element in the tree
 * or null if the tree is empty</return>
      <see>#getLargest</see>
      <see>#getNotSmaller</see>
      <see>#getNotLarger</see>
      <see>Node#getPrevious</see>
      <see>Node#getNext</see>
    </javadoc>
    <method type="Node" name="getSmallest" startLine="123" endLine="125" />
    <javadoc>
      <text>* Get the node whose element is the largest one in the tree.</text>
      <return>the tree node containing the largest element in the tree
 * or null if the tree is empty</return>
      <see>#getSmallest</see>
      <see>#getNotSmaller</see>
      <see>#getNotLarger</see>
      <see>Node#getPrevious</see>
      <see>Node#getNext</see>
    </javadoc>
    <method type="Node" name="getLargest" startLine="136" endLine="138" />
    <javadoc>
      <text>* Get the node whose element is not smaller than the reference object.</text>
      <param>reference reference object (may not be in the tree)</param>
      <return>the tree node containing the smallest element not smaller
 * than the reference object or null if either the tree is empty or
 * all its elements are smaller than the reference object</return>
      <see>#getSmallest</see>
      <see>#getLargest</see>
      <see>#getNotLarger</see>
      <see>Node#getPrevious</see>
      <see>Node#getNext</see>
    </javadoc>
    <method type="Node" name="getNotSmaller" startLine="151" endLine="168">
      <declaration type="Node" name="candidate" />
      <scope startLine="153" endLine="166">
        <scope startLine="154" endLine="159">
          <scope startLine="155" endLine="157" />
        </scope>
        <scope startLine="159" endLine="165">
          <scope startLine="161" endLine="163" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Get the node whose element is not larger than the reference object.</text>
      <param>reference reference object (may not be in the tree)</param>
      <return>the tree node containing the largest element not larger
 * than the reference object (in which case the node is guaranteed
 * not to be empty) or null if either the tree is empty or all its
 * elements are larger than the reference object</return>
      <see>#getSmallest</see>
      <see>#getLargest</see>
      <see>#getNotSmaller</see>
      <see>Node#getPrevious</see>
      <see>Node#getNext</see>
    </javadoc>
    <method type="Node" name="getNotLarger" startLine="182" endLine="199">
      <declaration type="Node" name="candidate" />
      <scope startLine="184" endLine="197">
        <scope startLine="185" endLine="190">
          <scope startLine="186" endLine="188" />
        </scope>
        <scope startLine="190" endLine="196">
          <scope startLine="192" endLine="194" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Enum for tree skew factor.</text>
    </javadoc>
    <javadoc>
      <text>* Code for left high trees.</text>
    </javadoc>
    <javadoc>
      <text>* Code for right high trees.</text>
    </javadoc>
    <javadoc>
      <text>* Code for Skew.BALANCED trees.</text>
    </javadoc>
    <class name="Node" startLine="213">
      <javadoc>
        <text>* This class implements AVL trees nodes.
 * <p>AVL tree nodes implement all the logical structure of the
 * tree. Nodes are created by the {@link AVLTree AVLTree} class.</p>
 * <p>The nodes are not independant from each other but must obey
 * specific balancing constraints and the tree structure is
 * rearranged as elements are inserted or deleted from the tree. The
 * creation, modification and tree-related navigation methods have
 * therefore restricted access. Only the order-related navigation,
 * reading and delete methods are public.</p></text>
        <see>AVLTree</see>
      </javadoc>
      <javadoc>
        <text>* Element contained in the current node.</text>
      </javadoc>
      <declaration type="T" name="element" />
      <javadoc>
        <text>* Left sub-tree.</text>
      </javadoc>
      <declaration type="Node" name="left" />
      <javadoc>
        <text>* Right sub-tree.</text>
      </javadoc>
      <declaration type="Node" name="right" />
      <javadoc>
        <text>* Parent tree.</text>
      </javadoc>
      <declaration type="Node" name="parent" />
      <javadoc>
        <text>* Skew factor.</text>
      </javadoc>
      <declaration type="Skew" name="skew" />
      <javadoc>
        <text>* Build a node for a specified element.</text>
        <param>element element</param>
        <param>parent parent node</param>
      </javadoc>
      <method type="constructor" name="Node" startLine="245" endLine="251" />
      <javadoc>
        <text>* Get the contained element.</text>
        <return>element contained in the node</return>
      </javadoc>
      <method type="T" name="getElement" startLine="256" endLine="258" />
      <javadoc>
        <text>* Get the number of elements of the tree rooted at this node.</text>
        <return>number of elements contained in the tree rooted at this node</return>
      </javadoc>
      <method type="int" name="size" startLine="263" endLine="265" />
      <javadoc>
        <text>* Get the node whose element is the smallest one in the tree
 * rooted at this node.</text>
        <return>the tree node containing the smallest element in the
 * tree rooted at this node or null if the tree is empty</return>
        <see>#getLargest</see>
      </javadoc>
      <method type="Node" name="getSmallest" startLine="273" endLine="279">
        <declaration type="Node" name="node" />
        <scope startLine="275" endLine="277" />
      </method>
      <javadoc>
        <text>* Get the node whose element is the largest one in the tree
 * rooted at this node.</text>
        <return>the tree node containing the largest element in the
 * tree rooted at this node or null if the tree is empty</return>
        <see>#getSmallest</see>
      </javadoc>
      <method type="Node" name="getLargest" startLine="287" endLine="293">
        <declaration type="Node" name="node" />
        <scope startLine="289" endLine="291" />
      </method>
      <javadoc>
        <text>* Get the node containing the next smaller or equal element.</text>
        <return>node containing the next smaller or equal element or
 * null if there is no smaller or equal element in the tree</return>
        <see>#getNext</see>
      </javadoc>
      <method type="Node" name="getPrevious" startLine="300" endLine="317">
        <scope startLine="302" endLine="307">
          <declaration type="Node" name="node" />
          <scope startLine="304" endLine="306" />
        </scope>
        <scope startLine="309" endLine="313">
          <scope startLine="310" endLine="312" />
        </scope>
      </method>
      <javadoc>
        <text>* Get the node containing the next larger or equal element.</text>
        <return>node containing the next larger or equal element (in
 * which case the node is guaranteed not to be empty) or null if
 * there is no larger or equal element in the tree</return>
        <see>#getPrevious</see>
      </javadoc>
      <method type="Node" name="getNext" startLine="325" endLine="342">
        <scope startLine="327" endLine="332">
          <declaration type="Node" name="node" />
          <scope startLine="329" endLine="331" />
        </scope>
        <scope startLine="334" endLine="338">
          <scope startLine="335" endLine="337" />
        </scope>
      </method>
      <javadoc>
        <text>* Insert an element in a sub-tree.</text>
        <param>newElement element to insert</param>
        <return>true if the parent tree should be re-Skew.BALANCED</return>
      </javadoc>
      <method type="boolean" name="insert" startLine="348" endLine="365">
        <scope startLine="349" endLine="356">
          <scope startLine="351" endLine="354" />
          <comment>the inserted element is smaller than the node</comment>
        </scope>
        <scope startLine="359" endLine="362" />
        <comment>the inserted element is equal to or greater than the node</comment>
      </method>
      <javadoc>
        <text>* Delete the node from the tree.</text>
      </javadoc>
      <method type="void" name="delete" startLine="369" endLine="410">
        <scope startLine="370" endLine="374">
          <comment>this was the last node, the tree is now empty</comment>
        </scope>
        <scope startLine="374" endLine="409">
          <declaration type="Node" name="node" />
          <declaration type="Node" name="child" />
          <declaration type="boolean" name="leftShrunk" />
          <scope startLine="379" endLine="384" />
          <scope startLine="384" endLine="389" />
          <scope startLine="392" endLine="394" />
          <scope startLine="394" endLine="396" />
          <scope startLine="397" endLine="399" />
          <scope startLine="401" endLine="407">
            <scope startLine="402" endLine="404" />
          </scope>
        </scope>
      </method>
      <javadoc>
        <text>* Re-balance the instance as left sub-tree has grown.</text>
        <return>true if the parent tree should be reSkew.BALANCED too</return>
      </javadoc>
      <method type="boolean" name="rebalanceLeftGrown" startLine="415" endLine="449">
        <scope startLine="418" endLine="422" />
        <scope startLine="422" endLine="440">
          <declaration type="Skew" name="s" />
        </scope>
      </method>
      <javadoc>
        <text>* Re-balance the instance as right sub-tree has grown.</text>
        <return>true if the parent tree should be reSkew.BALANCED too</return>
      </javadoc>
      <method type="boolean" name="rebalanceRightGrown" startLine="454" endLine="488">
        <scope startLine="460" endLine="464" />
        <scope startLine="464" endLine="482">
          <declaration type="Skew" name="s" />
        </scope>
      </method>
      <javadoc>
        <text>* Re-balance the instance as left sub-tree has shrunk.</text>
        <return>true if the parent tree should be reSkew.BALANCED too</return>
      </javadoc>
      <method type="boolean" name="rebalanceLeftShrunk" startLine="493" endLine="533">
        <scope startLine="499" endLine="504" />
        <scope startLine="504" endLine="509" />
        <scope startLine="509" endLine="528">
          <declaration type="Skew" name="s" />
        </scope>
      </method>
      <javadoc>
        <text>* Re-balance the instance as right sub-tree has shrunk.</text>
        <return>true if the parent tree should be reSkew.BALANCED too</return>
      </javadoc>
      <method type="boolean" name="rebalanceRightShrunk" startLine="538" endLine="578">
        <scope startLine="544" endLine="549" />
        <scope startLine="549" endLine="554" />
        <scope startLine="554" endLine="573">
          <declaration type="Skew" name="s" />
        </scope>
      </method>
      <javadoc>
        <text>* Perform a clockwise rotation rooted at the instance.
 * <p>The skew factor are not updated by this method, they
 * <em>must</em> be updated by the caller</p></text>
      </javadoc>
      <method type="void" name="rotateCW" startLine="584" endLine="603">
        <declaration type="T" name="tmpElt" />
        <declaration type="Node" name="tmpNode" />
        <scope startLine="596" endLine="598" />
        <scope startLine="599" endLine="601" />
      </method>
      <javadoc>
        <text>* Perform a counter-clockwise rotation rooted at the instance.
 * <p>The skew factor are not updated by this method, they
 * <em>must</em> be updated by the caller</p></text>
      </javadoc>
      <method type="void" name="rotateCCW" startLine="609" endLine="628">
        <declaration type="T" name="tmpElt" />
        <declaration type="Node" name="tmpNode" />
        <scope startLine="621" endLine="623" />
        <scope startLine="624" endLine="626" />
      </method>
    </class>
  </class>
</source>
