<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.solvers">
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.exception.NoBracketingException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.util.Incrementor" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="BaseAbstractUnivariateSolver" startLine="29">
    <implements name="BaseUnivariateSolver<FUNC>" />
    <javadoc>
      <text>* Provide a default implementation for several functions useful to generic
 * solvers.</text>
      <param><FUNC>
 *  Type of function to solve.</param>
      <since>2.0</since>
      <version>$Id: BaseAbstractUnivariateSolver.java 1455194 2013-03-11 15:45:54Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* Default relative accuracy.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_RELATIVE_ACCURACY" />
    <javadoc>
      <text>* Default function value accuracy.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_FUNCTION_VALUE_ACCURACY" />
    <javadoc>
      <text>* Function value accuracy.</text>
    </javadoc>
    <declaration type="double" name="functionValueAccuracy" />
    <javadoc>
      <text>* Absolute accuracy.</text>
    </javadoc>
    <declaration type="double" name="absoluteAccuracy" />
    <javadoc>
      <text>* Relative accuracy.</text>
    </javadoc>
    <declaration type="double" name="relativeAccuracy" />
    <javadoc>
      <text>* Evaluations counter.</text>
    </javadoc>
    <declaration type="Incrementor" name="evaluations" />
    <javadoc>
      <text>* Lower end of search interval.</text>
    </javadoc>
    <declaration type="double" name="searchMin" />
    <javadoc>
      <text>* Higher end of search interval.</text>
    </javadoc>
    <declaration type="double" name="searchMax" />
    <javadoc>
      <text>* Initial guess.</text>
    </javadoc>
    <declaration type="double" name="searchStart" />
    <javadoc>
      <text>* Function to solve.</text>
    </javadoc>
    <declaration type="FUNC" name="function" />
    <javadoc>
      <text>* Construct a solver with given absolute accuracy.</text>
      <param>absoluteAccuracy Maximum absolute error.</param>
    </javadoc>
    <method type="constructor" name="BaseAbstractUnivariateSolver" startLine="66" endLine="70" />
    <javadoc>
      <text>* Construct a solver with given accuracies.</text>
      <param>relativeAccuracy Maximum relative error.</param>
      <param>absoluteAccuracy Maximum absolute error.</param>
    </javadoc>
    <method type="constructor" name="BaseAbstractUnivariateSolver" startLine="79" endLine="83" />
    <javadoc>
      <text>* Construct a solver with given accuracies.</text>
      <param>relativeAccuracy Maximum relative error.</param>
      <param>absoluteAccuracy Maximum absolute error.</param>
      <param>functionValueAccuracy Maximum function value error.</param>
    </javadoc>
    <method type="constructor" name="BaseAbstractUnivariateSolver" startLine="94" endLine="98" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getMaxEvaluations" startLine="101" endLine="103" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getEvaluations" startLine="105" endLine="107" />
    <javadoc>
      <return>the lower end of the search interval.</return>
    </javadoc>
    <method type="double" name="getMin" startLine="111" endLine="113" />
    <javadoc>
      <return>the higher end of the search interval.</return>
    </javadoc>
    <method type="double" name="getMax" startLine="117" endLine="119" />
    <javadoc>
      <return>the initial guess.</return>
    </javadoc>
    <method type="double" name="getStartValue" startLine="123" endLine="125" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getAbsoluteAccuracy" startLine="129" endLine="131" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getRelativeAccuracy" startLine="135" endLine="137" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getFunctionValueAccuracy" startLine="141" endLine="143" />
    <javadoc>
      <text>* Compute the objective function value.</text>
      <param>point Point at which the objective function must be evaluated.</param>
      <return>the objective function value at specified point.</return>
      <throws>TooManyEvaluationsException if the maximal number of evaluations
 * is exceeded.</throws>
    </javadoc>
    <method type="double" name="computeObjectiveValue" startLine="154" endLine="157" />
    <javadoc>
      <text>* Prepare for computation.
 * Subclasses must call this method if they override any of the{@code solve} methods.</text>
      <param>f Function to solve.</param>
      <param>min Lower bound for the interval.</param>
      <param>max Upper bound for the interval.</param>
      <param>startValue Start value to use.</param>
      <param>maxEval Maximum number of evaluations.</param>
      <exception>NullArgumentException if f is null</exception>
    </javadoc>
    <method type="void" name="setup" startLine="175" endLine="186">
      <comment>Checks.</comment>
      <comment>Reset.</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="solve" startLine="191" endLine="197">
      <comment>Initialization.</comment>
      <comment>Perform computation.</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="solve" startLine="200" endLine="202" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="solve" startLine="207" endLine="209" />
    <method name="doSolve" type="double" startLine="211" endLine="222" />
    <javadoc>
      <text>* Method for implementing actual optimization algorithms in derived
 * classes.</text>
      <return>the root.</return>
      <throws>TooManyEvaluationsException if the maximal number of evaluations
 * is exceeded.</throws>
      <throws>NoBracketingException if the initial search interval does not bracket
 * a root and the solver requires it.</throws>
    </javadoc>
    <javadoc>
      <text>* Check whether the function takes opposite signs at the endpoints.</text>
      <param>lower Lower endpoint.</param>
      <param>upper Upper endpoint.</param>
      <return>{@code true} if the function values have opposite signs at the
 * given points.</return>
    </javadoc>
    <method type="boolean" name="isBracketing" startLine="233" endLine="235" />
    <javadoc>
      <text>* Check whether the arguments form a (strictly) increasing sequence.</text>
      <param>start First number.</param>
      <param>mid Second number.</param>
      <param>end Third number.</param>
      <return>{@code true} if the arguments form an increasing sequence.</return>
    </javadoc>
    <method type="boolean" name="isSequence" startLine="247" endLine="249" />
    <javadoc>
      <text>* Check that the endpoints specify an interval.</text>
      <param>lower Lower endpoint.</param>
      <param>upper Upper endpoint.</param>
      <throws>NumberIsTooLargeException if {@code lower >= upper}.</throws>
    </javadoc>
    <method type="void" name="verifyInterval" startLine="260" endLine="262" />
    <javadoc>
      <text>* Check that {@code lower < initial < upper}.</text>
      <param>lower Lower endpoint.</param>
      <param>initial Initial value.</param>
      <param>upper Upper endpoint.</param>
      <throws>NumberIsTooLargeException if {@code lower >= initial} or{@code initial >= upper}.</throws>
    </javadoc>
    <method type="void" name="verifySequence" startLine="276" endLine="278" />
    <javadoc>
      <text>* Check that the endpoints specify an interval and the function takes
 * opposite signs at the endpoints.</text>
      <param>lower Lower endpoint.</param>
      <param>upper Upper endpoint.</param>
      <throws>NullArgumentException if the function has not been set.</throws>
      <throws>NoBracketingException if the function has the same sign at
 * the endpoints.</throws>
    </javadoc>
    <method type="void" name="verifyBracketing" startLine="293" endLine="295" />
    <javadoc>
      <text>* Increment the evaluation count by one.
 * Method {@link #computeObjectiveValue(double)} calls this method internally.
 * It is provided for subclasses that do not exclusively use{@code computeObjectiveValue} to solve the function.
 * See e.g. {@link AbstractUnivariateDifferentiableSolver}.</text>
      <throws>TooManyEvaluationsException when the allowed number of function
 * evaluations has been exhausted.</throws>
    </javadoc>
    <method type="void" name="incrementEvaluationCount" startLine="308" endLine="314">
      <scope startLine="309" endLine="311" />
      <scope startLine="311" endLine="313" />
    </method>
  </class>
</source>
