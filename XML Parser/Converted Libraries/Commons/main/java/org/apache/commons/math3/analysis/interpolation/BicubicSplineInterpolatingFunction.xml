<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.interpolation">
  <import name="org.apache.commons.math3.analysis.BivariateFunction" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.NonMonotonicSequenceException" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <class name="BicubicSplineInterpolatingFunction" startLine="26">
    <implements name="BivariateFunction" />
    <javadoc>
      <text>* Function that implements the
 * <a href="http://en.wikipedia.org/wiki/Bicubic_interpolation">
 * bicubic spline interpolation</a>.</text>
      <since>2.1</since>
      <version>$Id: BicubicSplineInterpolatingFunction.java 1379904 2012-09-01 23:54:52Z erans $</version>
    </javadoc>
    <javadoc>
      <text>* Matrix to compute the spline coefficients from the function values
 * and function derivatives values</text>
    </javadoc>
    <declaration type="double[][]" name="AINV" />
    <javadoc>
      <text>* Samples x-coordinates</text>
    </javadoc>
    <declaration type="double[]" name="xval" />
    <javadoc>
      <text>* Samples y-coordinates</text>
    </javadoc>
    <declaration type="double[]" name="yval" />
    <javadoc>
      <text>* Set of cubic splines patching the whole data grid</text>
    </javadoc>
    <declaration type="BicubicSplineFunction[][]" name="splines" />
    <javadoc>
      <text>* Partial derivatives
 * The value of the first index determines the kind of derivatives:
 * 0 = first partial derivatives wrt x
 * 1 = first partial derivatives wrt y
 * 2 = second partial derivatives wrt x
 * 3 = second partial derivatives wrt y
 * 4 = cross partial derivatives</text>
    </javadoc>
    <declaration type="BivariateFunction[][][]" name="partialDerivatives" />
    <javadoc>
      <param>x Sample values of the x-coordinate, in increasing order.</param>
      <param>y Sample values of the y-coordinate, in increasing order.</param>
      <param>f Values of the function on every grid point.</param>
      <param>dFdX Values of the partial derivative of function with respect
 * to x on every grid point.</param>
      <param>dFdY Values of the partial derivative of function with respect
 * to y on every grid point.</param>
      <param>d2FdXdY Values of the cross partial derivative of function on
 * every grid point.</param>
      <throws>DimensionMismatchException if the various arrays do not contain
 * the expected number of elements.</throws>
      <throws>NonMonotonicSequenceException if {@code x} or {@code y} are
 * not strictly increasing.</throws>
      <throws>NoDataException if any of the arrays has zero length.</throws>
    </javadoc>
    <method type="constructor" name="BicubicSplineInterpolatingFunction" startLine="100" endLine="156">
      <declaration type="int" name="xLen" />
      <declaration type="int" name="yLen" />
      <scope startLine="104" endLine="106" />
      <scope startLine="107" endLine="109" />
      <scope startLine="110" endLine="112" />
      <scope startLine="113" endLine="115" />
      <scope startLine="116" endLine="118" />
      <declaration type="int" name="lastI" />
      <declaration type="int" name="lastJ" />
      <scope startLine="130" endLine="155">
        <scope startLine="131" endLine="133" />
        <scope startLine="134" endLine="136" />
        <scope startLine="137" endLine="139" />
        <scope startLine="140" endLine="142" />
        <declaration type="int" name="ip1" />
        <scope startLine="144" endLine="154">
          <declaration type="int" name="jp1" />
          <declaration type="double[][]" name="beta" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value" startLine="162" endLine="176">
      <declaration type="int" name="i" />
      <scope startLine="164" endLine="166" />
      <declaration type="int" name="j" />
      <scope startLine="168" endLine="170" />
      <declaration type="double" name="xN" />
      <declaration type="double" name="yN" />
    </method>
    <javadoc>
      <param>x x-coordinate.</param>
      <param>y y-coordinate.</param>
      <return>the value at point (x, y) of the first partial derivative with
 * respect to x.</return>
      <throws>OutOfRangeException if {@code x} (resp. {@code y}) is outside
 * the range defined by the boundary values of {@code xval} (resp.{@code yval}).</throws>
    </javadoc>
    <method type="double" name="partialDerivativeX" startLine="188" endLine="190" />
    <javadoc>
      <param>x x-coordinate.</param>
      <param>y y-coordinate.</param>
      <return>the value at point (x, y) of the first partial derivative with
 * respect to y.</return>
      <throws>OutOfRangeException if {@code x} (resp. {@code y}) is outside
 * the range defined by the boundary values of {@code xval} (resp.{@code yval}).</throws>
    </javadoc>
    <method type="double" name="partialDerivativeY" startLine="201" endLine="203" />
    <javadoc>
      <param>x x-coordinate.</param>
      <param>y y-coordinate.</param>
      <return>the value at point (x, y) of the second partial derivative with
 * respect to x.</return>
      <throws>OutOfRangeException if {@code x} (resp. {@code y}) is outside
 * the range defined by the boundary values of {@code xval} (resp.{@code yval}).</throws>
    </javadoc>
    <method type="double" name="partialDerivativeXX" startLine="214" endLine="216" />
    <javadoc>
      <param>x x-coordinate.</param>
      <param>y y-coordinate.</param>
      <return>the value at point (x, y) of the second partial derivative with
 * respect to y.</return>
      <throws>OutOfRangeException if {@code x} (resp. {@code y}) is outside
 * the range defined by the boundary values of {@code xval} (resp.{@code yval}).</throws>
    </javadoc>
    <method type="double" name="partialDerivativeYY" startLine="227" endLine="229" />
    <javadoc>
      <param>x x-coordinate.</param>
      <param>y y-coordinate.</param>
      <return>the value at point (x, y) of the second partial cross-derivative.</return>
      <throws>OutOfRangeException if {@code x} (resp. {@code y}) is outside
 * the range defined by the boundary values of {@code xval} (resp.{@code yval}).</throws>
    </javadoc>
    <method type="double" name="partialDerivativeXY" startLine="239" endLine="241" />
    <javadoc>
      <param>which First index in {@link #partialDerivatives}.</param>
      <param>x x-coordinate.</param>
      <param>y y-coordinate.</param>
      <return>the value at point (x, y) of the selected partial derivative.</return>
      <throws>OutOfRangeException if {@code x} (resp. {@code y}) is outside
 * the range defined by the boundary values of {@code xval} (resp.{@code yval}).</throws>
    </javadoc>
    <method type="double" name="partialDerivative" startLine="253" endLine="271">
      <scope startLine="254" endLine="256" />
      <declaration type="int" name="i" />
      <scope startLine="259" endLine="261" />
      <declaration type="int" name="j" />
      <scope startLine="263" endLine="265" />
      <declaration type="double" name="xN" />
      <declaration type="double" name="yN" />
    </method>
    <javadoc>
      <text>* Compute all partial derivatives.</text>
    </javadoc>
    <method type="void" name="computePartialDerivatives" startLine="276" endLine="291">
      <declaration type="int" name="lastI" />
      <declaration type="int" name="lastJ" />
      <scope startLine="281" endLine="290">
        <scope startLine="282" endLine="289">
          <declaration type="BicubicSplineFunction" name="f" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <param>c Coordinate.</param>
      <param>val Coordinate samples.</param>
      <return>the index in {@code val} corresponding to the interval
 * containing {@code c}, or {@code -1} if {@code c} is out of the
 * range defined by the boundary values of {@code val}.</return>
    </javadoc>
    <method type="int" name="searchIndex" startLine="300" endLine="313">
      <scope startLine="301" endLine="303" />
      <declaration type="int" name="max" />
      <scope startLine="306" endLine="310">
        <scope startLine="307" endLine="309" />
      </scope>
    </method>
    <javadoc>
      <text>* Compute the spline coefficients from the list of function values and
 * function partial derivatives values at the four corners of a grid
 * element. They must be specified in the following order:
 * <ul>
 * <li>f(0,0)</li>
 * <li>f(1,0)</li>
 * <li>f(0,1)</li>
 * <li>f(1,1)</li>
 * <li>f<sub>x</sub>(0,0)</li>
 * <li>f<sub>x</sub>(1,0)</li>
 * <li>f<sub>x</sub>(0,1)</li>
 * <li>f<sub>x</sub>(1,1)</li>
 * <li>f<sub>y</sub>(0,0)</li>
 * <li>f<sub>y</sub>(1,0)</li>
 * <li>f<sub>y</sub>(0,1)</li>
 * <li>f<sub>y</sub>(1,1)</li>
 * <li>f<sub>xy</sub>(0,0)</li>
 * <li>f<sub>xy</sub>(1,0)</li>
 * <li>f<sub>xy</sub>(0,1)</li>
 * <li>f<sub>xy</sub>(1,1)</li>
 * </ul>
 * where the subscripts indicate the partial derivative with respect to
 * the corresponding variable(s).</text>
      <param>beta List of function values and function partial derivatives
 * values.</param>
      <return>the spline coefficients.</return>
    </javadoc>
    <method type="double[]" name="computeSplineCoefficients" startLine="344" endLine="357">
      <declaration type="double[]" name="a" />
      <scope startLine="347" endLine="354">
        <declaration type="double" name="result" />
        <declaration type="double[]" name="row" />
        <scope startLine="350" endLine="352" />
      </scope>
    </method>
    <class name="BicubicSplineFunction" startLine="360">
      <implements name="BivariateFunction" />
      <javadoc>
        <text>* 2D-spline function.</text>
        <version>$Id: BicubicSplineInterpolatingFunction.java 1379904 2012-09-01 23:54:52Z erans $</version>
      </javadoc>
      <javadoc>
        <text>* Number of points.</text>
      </javadoc>
      <declaration type="short" name="N" />
      <javadoc>
        <text>* Coefficients</text>
      </javadoc>
      <declaration type="double[][]" name="a" />
      <javadoc>
        <text>* First partial derivative along x.</text>
      </javadoc>
      <declaration type="BivariateFunction" name="partialDerivativeX" />
      <javadoc>
        <text>* First partial derivative along y.</text>
      </javadoc>
      <declaration type="BivariateFunction" name="partialDerivativeY" />
      <javadoc>
        <text>* Second partial derivative along x.</text>
      </javadoc>
      <declaration type="BivariateFunction" name="partialDerivativeXX" />
      <javadoc>
        <text>* Second partial derivative along y.</text>
      </javadoc>
      <declaration type="BivariateFunction" name="partialDerivativeYY" />
      <javadoc>
        <text>* Second crossed partial derivative.</text>
      </javadoc>
      <declaration type="BivariateFunction" name="partialDerivativeXY" />
      <javadoc>
        <text>* Simple constructor.</text>
        <param>a Spline coefficients</param>
      </javadoc>
      <method type="constructor" name="BicubicSplineFunction" startLine="393" endLine="400">
        <scope startLine="395" endLine="399">
          <scope startLine="396" endLine="398" />
        </scope>
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="405" endLine="422">
        <scope startLine="406" endLine="408" />
        <scope startLine="409" endLine="411" />
        <declaration type="double" name="x2" />
        <declaration type="double" name="x3" />
        <declaration type="double[]" name="pX" />
        <declaration type="double" name="y2" />
        <declaration type="double" name="y3" />
        <declaration type="double[]" name="pY" />
      </method>
      <javadoc>
        <text>* Compute the value of the bicubic polynomial.</text>
        <param>pX Powers of the x-coordinate.</param>
        <param>pY Powers of the y-coordinate.</param>
        <param>coeff Spline coefficients.</param>
        <return>the interpolated value.</return>
      </javadoc>
      <method type="double" name="apply" startLine="432" endLine="441">
        <declaration type="double" name="result" />
        <scope startLine="434" endLine="438">
          <scope startLine="435" endLine="437" />
        </scope>
      </method>
      <javadoc>
        <return>the partial derivative wrt {@code x}.</return>
      </javadoc>
      <method type="BivariateFunction" name="partialDerivativeX" startLine="446" endLine="452">
        <scope startLine="447" endLine="449" />
      </method>
      <javadoc>
        <return>the partial derivative wrt {@code y}.</return>
      </javadoc>
      <method type="BivariateFunction" name="partialDerivativeY" startLine="456" endLine="462">
        <scope startLine="457" endLine="459" />
      </method>
      <javadoc>
        <return>the second partial derivative wrt {@code x}.</return>
      </javadoc>
      <method type="BivariateFunction" name="partialDerivativeXX" startLine="466" endLine="472">
        <scope startLine="467" endLine="469" />
      </method>
      <javadoc>
        <return>the second partial derivative wrt {@code y}.</return>
      </javadoc>
      <method type="BivariateFunction" name="partialDerivativeYY" startLine="476" endLine="482">
        <scope startLine="477" endLine="479" />
      </method>
      <javadoc>
        <return>the second partial cross-derivative.</return>
      </javadoc>
      <method type="BivariateFunction" name="partialDerivativeXY" startLine="486" endLine="492">
        <scope startLine="487" endLine="489" />
      </method>
      <javadoc>
        <text>* Compute all partial derivatives functions.</text>
      </javadoc>
      <method type="void" name="computePartialDerivatives" startLine="497" endLine="572">
        <declaration type="double[][]" name="aX" />
        <declaration type="double[][]" name="aY" />
        <declaration type="double[][]" name="aXX" />
        <declaration type="double[][]" name="aYY" />
        <declaration type="double[][]" name="aXY" />
        <scope startLine="504" endLine="513">
          <scope startLine="505" endLine="512">
            <declaration type="double" name="c" />
          </scope>
        </scope>
        <method type="double" name="value" startLine="516" endLine="525">
          <declaration type="double" name="x2" />
          <declaration type="double[]" name="pX" />
          <declaration type="double" name="y2" />
          <declaration type="double" name="y3" />
          <declaration type="double[]" name="pY" />
        </method>
        <method type="double" name="value" startLine="528" endLine="537">
          <declaration type="double" name="x2" />
          <declaration type="double" name="x3" />
          <declaration type="double[]" name="pX" />
          <declaration type="double" name="y2" />
          <declaration type="double[]" name="pY" />
        </method>
        <method type="double" name="value" startLine="540" endLine="548">
          <declaration type="double[]" name="pX" />
          <declaration type="double" name="y2" />
          <declaration type="double" name="y3" />
          <declaration type="double[]" name="pY" />
        </method>
        <method type="double" name="value" startLine="551" endLine="559">
          <declaration type="double" name="x2" />
          <declaration type="double" name="x3" />
          <declaration type="double[]" name="pX" />
          <declaration type="double[]" name="pY" />
        </method>
        <method type="double" name="value" startLine="562" endLine="570">
          <declaration type="double" name="x2" />
          <declaration type="double[]" name="pX" />
          <declaration type="double" name="y2" />
          <declaration type="double[]" name="pY" />
        </method>
      </method>
    </class>
  </class>
</source>
