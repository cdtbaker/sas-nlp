<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.function">
  <import name="org.apache.commons.math3.analysis.DifferentiableUnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.FunctionUtils" />
  <import name="org.apache.commons.math3.analysis.ParametricUnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.differentiation.DerivativeStructure" />
  <import name="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="Logit" startLine="31">
    <implements name="UnivariateDifferentiableFunction" />
    <implements name="DifferentiableUnivariateFunction" />
    <javadoc>
      <text>* <a href="http://en.wikipedia.org/wiki/Logit">
 * Logit</a> function.
 * It is the inverse of the {@link Sigmoid sigmoid} function.</text>
      <since>3.0</since>
      <version>$Id: Logit.java 1391927 2012-09-30 00:03:30Z erans $</version>
    </javadoc>
    <javadoc>
      <text>* Lower bound.</text>
    </javadoc>
    <declaration type="double" name="lo" />
    <javadoc>
      <text>* Higher bound.</text>
    </javadoc>
    <declaration type="double" name="hi" />
    <javadoc>
      <text>* Usual logit function, where the lower bound is 0 and the higher
 * bound is 1.</text>
    </javadoc>
    <method type="constructor" name="Logit" startLine="49" endLine="51" />
    <javadoc>
      <text>* Logit function.</text>
      <param>lo Lower bound of the function domain.</param>
      <param>hi Higher bound of the function domain.</param>
    </javadoc>
    <method type="constructor" name="Logit" startLine="60" endLine="63" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value" startLine="67" endLine="69" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <deprecated>as of 3.1, replaced by {@link #value(DerivativeStructure)}</deprecated>
    </javadoc>
    <method type="UnivariateFunction" name="derivative" startLine="75" endLine="77" />
    <class name="Parametric" startLine="79">
      <implements name="ParametricUnivariateFunction" />
      <javadoc>
        <text>* Parametric function where the input array contains the parameters of
 * the logit function, ordered as follows:
 * <ul>
 * <li>Lower bound</li>
 * <li>Higher bound</li>
 * </ul></text>
      </javadoc>
      <javadoc>
        <text>* Computes the value of the logit at {@code x}.</text>
        <param>x Value for which the function must be computed.</param>
        <param>param Values of lower bound and higher bounds.</param>
        <return>the value of the function.</return>
        <throws>NullArgumentException if {@code param} is {@code null}.</throws>
        <throws>DimensionMismatchException if the size of {@code param} is
 * not 2.</throws>
      </javadoc>
      <method type="double" name="value" startLine="100" endLine="103" />
      <javadoc>
        <text>* Computes the value of the gradient at {@code x}.
 * The components of the gradient vector are the partial
 * derivatives of the function with respect to each of the
 * <em>parameters</em> (lower bound and higher bound).</text>
        <param>x Value at which the gradient must be computed.</param>
        <param>param Values for lower and higher bounds.</param>
        <return>the gradient vector at {@code x}.</return>
        <throws>NullArgumentException if {@code param} is {@code null}.</throws>
        <throws>DimensionMismatchException if the size of {@code param} is
 * not 2.</throws>
      </javadoc>
      <method type="double[]" name="gradient" startLine="120" endLine="127">
        <declaration type="double" name="lo" />
        <declaration type="double" name="hi" />
      </method>
      <javadoc>
        <text>* Validates parameters to ensure they are appropriate for the evaluation of
 * the {@link #value(double,double[])} and {@link #gradient(double,double[])}methods.</text>
        <param>param Values for lower and higher bounds.</param>
        <throws>NullArgumentException if {@code param} is {@code null}.</throws>
        <throws>DimensionMismatchException if the size of {@code param} is
 * not 2.</throws>
      </javadoc>
      <method type="void" name="validateParameters" startLine="141" endLine="148">
        <scope startLine="142" endLine="144" />
        <scope startLine="145" endLine="147" />
      </method>
      <javadoc>
        <param>x Value at which to compute the logit.</param>
        <param>lo Lower bound.</param>
        <param>hi Higher bound.</param>
        <return>the value of the logit function at {@code x}.</return>
        <throws>OutOfRangeException if {@code x < lo} or {@code x > hi}.</throws>
      </javadoc>
      <method type="double" name="value" startLine="161" endLine="166">
        <scope startLine="162" endLine="164" />
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
        <since>3.1</since>
        <exception>OutOfRangeException if parameter is outside of function domain</exception>
      </javadoc>
      <method type="DerivativeStructure" name="value" startLine="173" endLine="212">
        <declaration type="double" name="x" />
        <scope startLine="175" endLine="177" />
        <declaration type="double[]" name="f" />
        <scope startLine="183" endLine="197">
          <scope startLine="185" endLine="187" />
          <scope startLine="193" endLine="195" />
          <comment>fill the array with infinities</comment>
          <comment>(for x close to lo the signs will flip between -inf and +inf,</comment>
          <comment>for x close to hi the signs will always be +inf)</comment>
          <comment>this is probably overkill, since the call to compose at the end</comment>
          <comment>of the method will transform most infinities into NaN ...</comment>
        </scope>
        <scope startLine="197" endLine="209">
          <declaration type="double" name="invL" />
          <declaration type="double" name="xL" />
          <declaration type="double" name="invH" />
          <declaration type="double" name="xH" />
          <scope startLine="204" endLine="208" />
          <comment>function derivatives</comment>
        </scope>
        <comment>function value</comment>
      </method>
    </class>
  </class>
</source>
