<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3">
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <interface name="RealFieldElement" startLine="21">
    <implements name="FieldElement<T>" />
    <javadoc>
      <text>* Interface representing a <a href="http://mathworld.wolfram.com/RealNumber.html">real</a>
 * <a href="http://mathworld.wolfram.com/Field.html">field</a>.</text>
      <param><T>
 *  the type of the field elements</param>
      <see>FieldElement</see>
      <version>$Id: RealFieldElement.java 1455053 2013-03-11 08:37:12Z luc $</version>
      <since>3.2</since>
    </javadoc>
    <method name="getReal" type="double" startLine="31" endLine="34" />
    <javadoc>
      <text>* Get the real value of the number.</text>
      <return>real value</return>
    </javadoc>
    <method name="add" type="T" startLine="36" endLine="40" />
    <javadoc>
      <text>* '+' operator.</text>
      <param>a right hand side parameter of the operator</param>
      <return>this+a</return>
    </javadoc>
    <method name="subtract" type="T" startLine="42" endLine="46" />
    <javadoc>
      <text>* '-' operator.</text>
      <param>a right hand side parameter of the operator</param>
      <return>this-a</return>
    </javadoc>
    <method name="multiply" type="T" startLine="48" endLine="52" />
    <javadoc>
      <text>* '&times;' operator.</text>
      <param>a right hand side parameter of the operator</param>
      <return>this&times;a</return>
    </javadoc>
    <method name="divide" type="T" startLine="54" endLine="58" />
    <javadoc>
      <text>* '&divides;' operator.</text>
      <param>a right hand side parameter of the operator</param>
      <return>this&divides;a</return>
    </javadoc>
    <method name="remainder" type="T" startLine="60" endLine="65" />
    <javadoc>
      <text>* IEEE remainder operator.</text>
      <param>a right hand side parameter of the operator</param>
      <return>this - n &times; a where n is the closest integer to this/a
 * (the even integer is chosen for n if this/a is halfway between two integers)</return>
    </javadoc>
    <method name="remainder" type="T" startLine="67" endLine="74" />
    <javadoc>
      <text>* IEEE remainder operator.</text>
      <param>a right hand side parameter of the operator</param>
      <return>this - n &times; a where n is the closest integer to this/a
 * (the even integer is chosen for n if this/a is halfway between two integers)</return>
      <exception>DimensionMismatchException if number of free parameters or orders are inconsistent</exception>
    </javadoc>
    <method name="abs" type="T" startLine="76" endLine="79" />
    <javadoc>
      <text>* absolute value.</text>
      <return>abs(this)</return>
    </javadoc>
    <method name="ceil" type="T" startLine="81" endLine="84" />
    <javadoc>
      <text>* Get the smallest whole number larger than instance.</text>
      <return>ceil(this)</return>
    </javadoc>
    <method name="floor" type="T" startLine="86" endLine="89" />
    <javadoc>
      <text>* Get the largest whole number smaller than instance.</text>
      <return>floor(this)</return>
    </javadoc>
    <method name="rint" type="T" startLine="91" endLine="94" />
    <javadoc>
      <text>* Get the whole number that is the nearest to the instance, or the even one if x is exactly half way between two integers.</text>
      <return>a double number r such that r is an integer r - 0.5 <= this <= r + 0.5</return>
    </javadoc>
    <method name="round" type="long" startLine="96" endLine="99" />
    <javadoc>
      <text>* Get the closest long to instance value.</text>
      <return>closest long to {@link #getReal()}</return>
    </javadoc>
    <method name="signum" type="T" startLine="101" endLine="105" />
    <javadoc>
      <text>* Compute the signum of the instance.
 * The signum is -1 for negative numbers, +1 for positive numbers and 0 otherwise</text>
      <return>-1.0, -0.0, +0.0, +1.0 or NaN depending on sign of a</return>
    </javadoc>
    <method name="copySign" type="T" startLine="107" endLine="114" />
    <javadoc>
      <text>* Returns the instance with the sign of the argument.
 * A NaN {@code sign} argument is treated as positive.</text>
      <param>sign the sign for the returned value</param>
      <return>the instance with the same sign as the {@code sign} argument</return>
    </javadoc>
    <method name="copySign" type="T" startLine="116" endLine="123" />
    <javadoc>
      <text>* Returns the instance with the sign of the argument.
 * A NaN {@code sign} argument is treated as positive.</text>
      <param>sign the sign for the returned value</param>
      <return>the instance with the same sign as the {@code sign} argument</return>
    </javadoc>
    <method name="scalb" type="T" startLine="125" endLine="130" />
    <javadoc>
      <text>* Multiply the instance by a power of 2.</text>
      <param>n power of 2</param>
      <return>this &times; 2<sup>n</sup></return>
    </javadoc>
    <method name="hypot" type="T" startLine="132" endLine="147" />
    <javadoc>
      <text>* Returns the hypotenuse of a triangle with sides {@code this} and {@code y}- sqrt(<i>this</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)<br/>
 * avoiding intermediate overflow or underflow.
 * <ul>
 * <li> If either argument is infinite, then the result is positive infinity.</li>
 * <li> else, if either argument is NaN then the result is NaN.</li>
 * </ul></text>
      <param>y a value</param>
      <return>sqrt(<i>this</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)</return>
      <exception>DimensionMismatchException if number of free parameters or orders are inconsistent</exception>
    </javadoc>
    <method name="reciprocal" type="T" startLine="149" endLine="150" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method name="sqrt" type="T" startLine="152" endLine="155" />
    <javadoc>
      <text>* Square root.</text>
      <return>square root of the instance</return>
    </javadoc>
    <method name="cbrt" type="T" startLine="157" endLine="160" />
    <javadoc>
      <text>* Cubic root.</text>
      <return>cubic root of the instance</return>
    </javadoc>
    <method name="rootN" type="T" startLine="162" endLine="166" />
    <javadoc>
      <text>* N<sup>th</sup> root.</text>
      <param>n order of the root</param>
      <return>n<sup>th</sup> root of the instance</return>
    </javadoc>
    <method name="pow" type="T" startLine="168" endLine="172" />
    <javadoc>
      <text>* Power operation.</text>
      <param>p power to apply</param>
      <return>this<sup>p</sup></return>
    </javadoc>
    <method name="pow" type="T" startLine="174" endLine="178" />
    <javadoc>
      <text>* Integer power operation.</text>
      <param>n power to apply</param>
      <return>this<sup>n</sup></return>
    </javadoc>
    <method name="pow" type="T" startLine="180" endLine="186" />
    <javadoc>
      <text>* Power operation.</text>
      <param>e exponent</param>
      <return>this<sup>e</sup></return>
      <exception>DimensionMismatchException if number of free parameters or orders are inconsistent</exception>
    </javadoc>
    <method name="exp" type="T" startLine="188" endLine="191" />
    <javadoc>
      <text>* Exponential.</text>
      <return>exponential of the instance</return>
    </javadoc>
    <method name="expm1" type="T" startLine="193" endLine="196" />
    <javadoc>
      <text>* Exponential minus 1.</text>
      <return>exponential minus one of the instance</return>
    </javadoc>
    <method name="log" type="T" startLine="198" endLine="201" />
    <javadoc>
      <text>* Natural logarithm.</text>
      <return>logarithm of the instance</return>
    </javadoc>
    <method name="log1p" type="T" startLine="203" endLine="206" />
    <javadoc>
      <text>* Shifted natural logarithm.</text>
      <return>logarithm of one plus the instance</return>
    </javadoc>
    <method name="cos" type="T" startLine="215" endLine="218" />
    <javadoc>
      <text>* Cosine operation.</text>
      <return>cos(this)</return>
    </javadoc>
    <method name="sin" type="T" startLine="220" endLine="223" />
    <javadoc>
      <text>* Sine operation.</text>
      <return>sin(this)</return>
    </javadoc>
    <method name="tan" type="T" startLine="225" endLine="228" />
    <javadoc>
      <text>* Tangent operation.</text>
      <return>tan(this)</return>
    </javadoc>
    <method name="acos" type="T" startLine="230" endLine="233" />
    <javadoc>
      <text>* Arc cosine operation.</text>
      <return>acos(this)</return>
    </javadoc>
    <method name="asin" type="T" startLine="235" endLine="238" />
    <javadoc>
      <text>* Arc sine operation.</text>
      <return>asin(this)</return>
    </javadoc>
    <method name="atan" type="T" startLine="240" endLine="243" />
    <javadoc>
      <text>* Arc tangent operation.</text>
      <return>atan(this)</return>
    </javadoc>
    <method name="atan2" type="T" startLine="245" endLine="251" />
    <javadoc>
      <text>* Two arguments arc tangent operation.</text>
      <param>x second argument of the arc tangent</param>
      <return>atan2(this, x)</return>
      <exception>DimensionMismatchException if number of free parameters or orders are inconsistent</exception>
    </javadoc>
    <method name="cosh" type="T" startLine="253" endLine="256" />
    <javadoc>
      <text>* Hyperbolic cosine operation.</text>
      <return>cosh(this)</return>
    </javadoc>
    <method name="sinh" type="T" startLine="258" endLine="261" />
    <javadoc>
      <text>* Hyperbolic sine operation.</text>
      <return>sinh(this)</return>
    </javadoc>
    <method name="tanh" type="T" startLine="263" endLine="266" />
    <javadoc>
      <text>* Hyperbolic tangent operation.</text>
      <return>tanh(this)</return>
    </javadoc>
    <method name="acosh" type="T" startLine="268" endLine="271" />
    <javadoc>
      <text>* Inverse hyperbolic cosine operation.</text>
      <return>acosh(this)</return>
    </javadoc>
    <method name="asinh" type="T" startLine="273" endLine="276" />
    <javadoc>
      <text>* Inverse hyperbolic sine operation.</text>
      <return>asin(this)</return>
    </javadoc>
    <method name="atanh" type="T" startLine="278" endLine="281" />
    <javadoc>
      <text>* Inverse hyperbolic  tangent operation.</text>
      <return>atanh(this)</return>
    </javadoc>
    <method name="linearCombination" type="T" startLine="283" endLine="292" />
    <javadoc>
      <text>* Compute a linear combination.</text>
      <param>a Factors.</param>
      <param>b Factors.</param>
      <return><code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.</return>
      <throws>DimensionMismatchException if arrays dimensions don't match</throws>
      <since>3.2</since>
    </javadoc>
    <method name="linearCombination" type="T" startLine="294" endLine="303" />
    <javadoc>
      <text>* Compute a linear combination.</text>
      <param>a Factors.</param>
      <param>b Factors.</param>
      <return><code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.</return>
      <throws>DimensionMismatchException if arrays dimensions don't match</throws>
      <since>3.2</since>
    </javadoc>
    <method name="linearCombination" type="T" startLine="305" endLine="317" />
    <javadoc>
      <text>* Compute a linear combination.</text>
      <param>a1 first factor of the first term</param>
      <param>b1 second factor of the first term</param>
      <param>a2 first factor of the second term</param>
      <param>b2 second factor of the second term</param>
      <return>a<sub>1</sub>&times;b<sub>1</sub> +
 * a<sub>2</sub>&times;b<sub>2</sub></return>
      <see>#linearCombination(Object,Object,Object,Object,Object,Object)</see>
      <see>#linearCombination(Object,Object,Object,Object,Object,Object,Object,Object)</see>
      <since>3.2</since>
    </javadoc>
    <method name="linearCombination" type="T" startLine="319" endLine="331" />
    <javadoc>
      <text>* Compute a linear combination.</text>
      <param>a1 first factor of the first term</param>
      <param>b1 second factor of the first term</param>
      <param>a2 first factor of the second term</param>
      <param>b2 second factor of the second term</param>
      <return>a<sub>1</sub>&times;b<sub>1</sub> +
 * a<sub>2</sub>&times;b<sub>2</sub></return>
      <see>#linearCombination(double,Object,double,Object,double,Object)</see>
      <see>#linearCombination(double,Object,double,Object,double,Object,double,Object)</see>
      <since>3.2</since>
    </javadoc>
    <method name="linearCombination" type="T" startLine="333" endLine="347" />
    <javadoc>
      <text>* Compute a linear combination.</text>
      <param>a1 first factor of the first term</param>
      <param>b1 second factor of the first term</param>
      <param>a2 first factor of the second term</param>
      <param>b2 second factor of the second term</param>
      <param>a3 first factor of the third term</param>
      <param>b3 second factor of the third term</param>
      <return>a<sub>1</sub>&times;b<sub>1</sub> +
 * a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub></return>
      <see>#linearCombination(Object,Object,Object,Object)</see>
      <see>#linearCombination(Object,Object,Object,Object,Object,Object,Object,Object)</see>
      <since>3.2</since>
    </javadoc>
    <method name="linearCombination" type="T" startLine="349" endLine="363" />
    <javadoc>
      <text>* Compute a linear combination.</text>
      <param>a1 first factor of the first term</param>
      <param>b1 second factor of the first term</param>
      <param>a2 first factor of the second term</param>
      <param>b2 second factor of the second term</param>
      <param>a3 first factor of the third term</param>
      <param>b3 second factor of the third term</param>
      <return>a<sub>1</sub>&times;b<sub>1</sub> +
 * a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub></return>
      <see>#linearCombination(double,Object,double,Object)</see>
      <see>#linearCombination(double,Object,double,Object,double,Object,double,Object)</see>
      <since>3.2</since>
    </javadoc>
    <method name="linearCombination" type="T" startLine="365" endLine="382" />
    <javadoc>
      <text>* Compute a linear combination.</text>
      <param>a1 first factor of the first term</param>
      <param>b1 second factor of the first term</param>
      <param>a2 first factor of the second term</param>
      <param>b2 second factor of the second term</param>
      <param>a3 first factor of the third term</param>
      <param>b3 second factor of the third term</param>
      <param>a4 first factor of the third term</param>
      <param>b4 second factor of the third term</param>
      <return>a<sub>1</sub>&times;b<sub>1</sub> +
 * a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
 * a<sub>4</sub>&times;b<sub>4</sub></return>
      <see>#linearCombination(Object,Object,Object,Object)</see>
      <see>#linearCombination(Object,Object,Object,Object,Object,Object)</see>
      <since>3.2</since>
    </javadoc>
    <method name="linearCombination" type="T" startLine="384" endLine="401" />
    <javadoc>
      <text>* Compute a linear combination.</text>
      <param>a1 first factor of the first term</param>
      <param>b1 second factor of the first term</param>
      <param>a2 first factor of the second term</param>
      <param>b2 second factor of the second term</param>
      <param>a3 first factor of the third term</param>
      <param>b3 second factor of the third term</param>
      <param>a4 first factor of the third term</param>
      <param>b4 second factor of the third term</param>
      <return>a<sub>1</sub>&times;b<sub>1</sub> +
 * a<sub>2</sub>&times;b<sub>2</sub> + a<sub>3</sub>&times;b<sub>3</sub> +
 * a<sub>4</sub>&times;b<sub>4</sub></return>
      <see>#linearCombination(double,Object,double,Object)</see>
      <see>#linearCombination(double,Object,double,Object,double,Object)</see>
      <since>3.2</since>
    </javadoc>
  </interface>
</source>
