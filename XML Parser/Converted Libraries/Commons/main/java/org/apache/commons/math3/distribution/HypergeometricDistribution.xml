<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937c" />
  <class name="HypergeometricDistribution" extends="AbstractIntegerDistribution" startLine="28">
    <javadoc>
      <text>* Implementation of the hypergeometric distribution.</text>
      <see><a href="http://en.wikipedia.org/wiki/Hypergeometric_distribution">Hypergeometric distribution (Wikipedia)</a></see>
      <see><a href="http://mathworld.wolfram.com/HypergeometricDistribution.html">Hypergeometric distribution (MathWorld)</a></see>
      <version>$Id: HypergeometricDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* The number of successes in the population.</text>
    </javadoc>
    <declaration type="int" name="numberOfSuccesses" />
    <javadoc>
      <text>* The population size.</text>
    </javadoc>
    <declaration type="int" name="populationSize" />
    <javadoc>
      <text>* The sample size.</text>
    </javadoc>
    <declaration type="int" name="sampleSize" />
    <javadoc>
      <text>* Cached numerical variance</text>
    </javadoc>
    <declaration type="double" name="numericalVariance" />
    <javadoc>
      <text>* Whether or not the numerical variance has been calculated</text>
    </javadoc>
    <declaration type="boolean" name="numericalVarianceIsCalculated" />
    <javadoc>
      <text>* Construct a new hypergeometric distribution with the specified population
 * size, number of successes in the population, and sample size.</text>
      <param>populationSize Population size.</param>
      <param>numberOfSuccesses Number of successes in the population.</param>
      <param>sampleSize Sample size.</param>
      <throws>NotPositiveException if {@code numberOfSuccesses < 0}.</throws>
      <throws>NotStrictlyPositiveException if {@code populationSize <= 0}.</throws>
      <throws>NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},
 * or {@code sampleSize > populationSize}.</throws>
    </javadoc>
    <method type="constructor" name="HypergeometricDistribution" startLine="62" endLine="64" />
    <javadoc>
      <text>* Creates a new hypergeometric distribution.</text>
      <param>rng Random number generator.</param>
      <param>populationSize Population size.</param>
      <param>numberOfSuccesses Number of successes in the population.</param>
      <param>sampleSize Sample size.</param>
      <throws>NotPositiveException if {@code numberOfSuccesses < 0}.</throws>
      <throws>NotStrictlyPositiveException if {@code populationSize <= 0}.</throws>
      <throws>NumberIsTooLargeException if {@code numberOfSuccesses > populationSize},
 * or {@code sampleSize > populationSize}.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="HypergeometricDistribution" startLine="83" endLine="111">
      <scope startLine="86" endLine="89" />
      <scope startLine="90" endLine="93" />
      <scope startLine="94" endLine="97" />
      <scope startLine="99" endLine="102" />
      <scope startLine="103" endLine="106" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="114" endLine="127">
      <declaration type="double" name="ret" />
      <declaration type="int[]" name="domain" />
      <scope startLine="118" endLine="120" />
      <scope startLine="120" endLine="122" />
      <scope startLine="122" endLine="124" />
    </method>
    <javadoc>
      <text>* Return the domain for the given hypergeometric distribution parameters.</text>
      <param>n Population size.</param>
      <param>m Number of successes in the population.</param>
      <param>k Sample size.</param>
      <return>a two element array containing the lower and upper bounds of the
 * hypergeometric distribution.</return>
    </javadoc>
    <method type="int[]" name="getDomain" startLine="138" endLine="140" />
    <javadoc>
      <text>* Return the lowest domain value for the given hypergeometric distribution
 * parameters.</text>
      <param>n Population size.</param>
      <param>m Number of successes in the population.</param>
      <param>k Sample size.</param>
      <return>the lowest domain value of the hypergeometric distribution.</return>
    </javadoc>
    <method type="int" name="getLowerDomain" startLine="151" endLine="153" />
    <javadoc>
      <text>* Access the number of successes.</text>
      <return>the number of successes.</return>
    </javadoc>
    <method type="int" name="getNumberOfSuccesses" startLine="160" endLine="162" />
    <javadoc>
      <text>* Access the population size.</text>
      <return>the population size.</return>
    </javadoc>
    <method type="int" name="getPopulationSize" startLine="169" endLine="171" />
    <javadoc>
      <text>* Access the sample size.</text>
      <return>the sample size.</return>
    </javadoc>
    <method type="int" name="getSampleSize" startLine="178" endLine="180" />
    <javadoc>
      <text>* Return the highest domain value for the given hypergeometric distribution
 * parameters.</text>
      <param>m Number of successes in the population.</param>
      <param>k Sample size.</param>
      <return>the highest domain value of the hypergeometric distribution.</return>
    </javadoc>
    <method type="int" name="getUpperDomain" startLine="190" endLine="192" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="probability" startLine="195" endLine="215">
      <declaration type="double" name="ret" />
      <declaration type="int[]" name="domain" />
      <scope startLine="199" endLine="201" />
      <scope startLine="201" endLine="212">
        <declaration type="double" name="p" />
        <declaration type="double" name="q" />
        <declaration type="double" name="p1" />
        <declaration type="double" name="p2" />
        <declaration type="double" name="p3" />
      </scope>
    </method>
    <javadoc>
      <text>* For this distribution, {@code X}, this method returns {@code P(X >= x)}.</text>
      <param>x Value at which the CDF is evaluated.</param>
      <return>the upper tail CDF for this distribution.</return>
      <since>1.1</since>
    </javadoc>
    <method type="double" name="upperCumulativeProbability" startLine="224" endLine="237">
      <declaration type="double" name="ret" />
      <declaration type="int[]" name="domain" />
      <scope startLine="228" endLine="230" />
      <scope startLine="230" endLine="232" />
      <scope startLine="232" endLine="234" />
    </method>
    <javadoc>
      <text>* For this distribution, {@code X}, this method returns{@code P(x0 <= X <= x1)}.
 * This probability is computed by summing the point probabilities for the
 * values {@code x0, x0 + 1, x0 + 2, ..., x1}, in the order directed by{@code dx}.</text>
      <param>x0 Inclusive lower bound.</param>
      <param>x1 Inclusive upper bound.</param>
      <param>dx Direction of summation (1 indicates summing from x0 to x1, and
 * 0 indicates summing from x1 to x0).</param>
      <return>{@code P(x0 <= X <= x1)}.</return>
    </javadoc>
    <method type="double" name="innerCumulativeProbability" startLine="252" endLine="259">
      <declaration type="double" name="ret" />
      <scope startLine="254" endLine="257" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the mean is {@code n * m / N}.</text>
    </javadoc>
    <method type="double" name="getNumericalMean" startLine="267" endLine="269" />
    <javadoc>
      <text>* {@inheritDoc}For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the variance is{@code [n * m * (N - n) * (N - m)] / [N^2 * (N - 1)]}.</text>
    </javadoc>
    <method type="double" name="getNumericalVariance" startLine="278" endLine="284">
      <scope startLine="279" endLine="282" />
    </method>
    <javadoc>
      <text>* Used by {@link #getNumericalVariance()}.</text>
      <return>the variance of this distribution</return>
    </javadoc>
    <method type="double" name="calculateNumericalVariance" startLine="291" endLine="296">
      <declaration type="double" name="N" />
      <declaration type="double" name="m" />
      <declaration type="double" name="n" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}For population size {@code N}, number of successes {@code m}, and sample
 * size {@code n}, the lower bound of the support is{@code max(0, n + m - N)}.</text>
      <return>lower bound of the support</return>
    </javadoc>
    <method type="int" name="getSupportLowerBound" startLine="307" endLine="310" />
    <javadoc>
      <text>* {@inheritDoc}For number of successes {@code m} and sample size {@code n}, the upper
 * bound of the support is {@code min(m, n)}.</text>
      <return>upper bound of the support</return>
    </javadoc>
    <method type="int" name="getSupportUpperBound" startLine="320" endLine="322" />
    <javadoc>
      <text>* {@inheritDoc}The support of this distribution is connected.</text>
      <return>{@code true}</return>
    </javadoc>
    <method type="boolean" name="isSupportConnected" startLine="331" endLine="333" />
  </class>
</source>
