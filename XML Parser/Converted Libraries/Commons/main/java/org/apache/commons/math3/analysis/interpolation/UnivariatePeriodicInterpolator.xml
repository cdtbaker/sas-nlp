<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.interpolation">
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NonMonotonicSequenceException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <class name="UnivariatePeriodicInterpolator" startLine="26">
    <implements name="UnivariateInterpolator" />
    <javadoc>
      <text>* Adapter for classes implementing the {@link UnivariateInterpolator}interface.
 * The data to be interpolated is assumed to be periodic. Thus values that are
 * outside of the range can be passed to the interpolation function: They will
 * be wrapped into the initial range before being passed to the class that
 * actually computes the interpolation.</text>
      <version>$Id: UnivariatePeriodicInterpolator.java 1459739 2013-03-22 11:58:11Z erans $</version>
    </javadoc>
    <javadoc>
      <text>* Default number of extension points of the samples array.</text>
    </javadoc>
    <declaration type="int" name="DEFAULT_EXTEND" />
    <javadoc>
      <text>* Interpolator.</text>
    </javadoc>
    <declaration type="UnivariateInterpolator" name="interpolator" />
    <javadoc>
      <text>* Period.</text>
    </javadoc>
    <declaration type="double" name="period" />
    <javadoc>
      <text>* Number of extension points.</text>
    </javadoc>
    <declaration type="int" name="extend" />
    <javadoc>
      <text>* Builds an interpolator.</text>
      <param>interpolator Interpolator.</param>
      <param>period Period.</param>
      <param>extend Number of points to be appended at the beginning and
 * end of the sample arrays in order to avoid interpolation failure at
 * the (periodic) boundaries of the orginal interval. The value is the
 * number of sample points which the original {@code interpolator} needs
 * on each side of the interpolated point.</param>
    </javadoc>
    <method type="constructor" name="UnivariatePeriodicInterpolator" startLine="60" endLine="64" />
    <javadoc>
      <text>* Builds an interpolator.
 * Uses {@link #DEFAULT_EXTEND} as the number of extension points on each side
 * of the original abscissae range.</text>
      <param>interpolator Interpolator.</param>
      <param>period Period.</param>
    </javadoc>
    <method type="constructor" name="UnivariatePeriodicInterpolator" startLine="75" endLine="77" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <throws>NumberIsTooSmallException if the number of extension points
 * is larger than the size of {@code xval}.</throws>
    </javadoc>
    <method type="UnivariateFunction" name="interpolate" startLine="87" endLine="123">
      <scope startLine="88" endLine="90" />
      <declaration type="double" name="offset" />
      <declaration type="int" name="len" />
      <declaration type="double[]" name="x" />
      <declaration type="double[]" name="y" />
      <scope startLine="98" endLine="102">
        <declaration type="int" name="index" />
      </scope>
      <scope startLine="105" endLine="113">
        <declaration type="int" name="index" />
      </scope>
      <declaration type="UnivariateFunction" name="f" />
      <method type="double" name="value" startLine="119" endLine="121" />
      <comment>Wrap to enable interpolation at the boundaries.</comment>
    </method>
  </class>
</source>
