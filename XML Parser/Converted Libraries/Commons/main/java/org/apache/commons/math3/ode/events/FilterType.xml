<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode.events">
  <import name="org.apache.commons.math3.exception.MathInternalError" />
  <javadoc>
    <text>* Enumerate for {@link EventFilter filtering events}.</text>
    <version>$Id: FilterType.java 1458491 2013-03-19 20:13:11Z luc $</version>
    <since>3.2</since>
  </javadoc>
  <javadoc>
    <text>* Constant for triggering only decreasing events.
 * <p>When this filter is used, the wrapped {@link EventHandlerevent handler} {@link EventHandler#eventOccurred(double,double[],boolean) eventOccurred} method will be called <em>only</em> with
 * its {@code increasing} argument set to false.</p></text>
  </javadoc>
  <javadoc>
    <text>* {@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="getTriggeredIncreasing" startLine="39" endLine="41" />
  <javadoc>
    <text>* {@inheritDoc}<p>
 * states scheduling for computing h(t,y) as an altered version of g(t, y)
 * <ul>
 * <li>0 are triggered events for which a zero is produced (here decreasing events)</li>
 * <li>X are ignored events for which zero is masked (here increasing events)</li>
 * </ul>
 * </p>
 * <pre>
 * g(t)
 * ___                     ___                     ___
 * /   \                   /   \                   /   \
 * /     \                 /     \                 /     \
 * /  g>0  \               /  g>0  \               /  g>0  \
 * /         \             /         \             /         \
 * ----- X --------- 0 --------- X --------- 0 --------- X --------- 0 ---
 * /             \         /             \         /             \
 * /               \ g<0   /               \  g<0  /               \ g<0
 * /                 \     /                 \     /                 \     /
 * ___/                   \___/                   \___/                   \___/
 * </pre>
 * <pre>
 * h(t,y)) as an alteration of g(t,y)
 * ___                                 ___         ___
 * \       /   \                               /   \       /   \
 * \     /     \ h=+g                        /     \     /     \
 * \   /       \      h=min(-s,-g,+g)      /       \   /       \
 * \_/         \                         /         \_/         \
 * ------ ---------- 0 ----------_---------- 0 --------------------- 0 ---
 * \         / \         /                         \
 * h=max(+s,-g,+g)    \       /   \       /       h=max(+s,-g,+g)     \
 * \     /     \     / h=-g                        \     /
 * \___/       \___/                               \___/
 * </pre>
 * <p>
 * As shown by the figure above, several expressions are used to compute h,
 * depending on the current state:
 * <ul>
 * <li>h = max(+s,-g,+g)</li>
 * <li>h = +g</li>
 * <li>h = min(-s,-g,+g)</li>
 * <li>h = -g</li>
 * </ul>
 * where s is a tiny positive value: {@link org.apache.commons.math3.util.Precision#SAFE_MIN}.
 * </p></text>
  </javadoc>
  <method type="Transformer" name="selectTransformer" startLine="90" endLine="202">
    <scope startLine="91" endLine="146">
      <scope startLine="95" endLine="98" />
      <scope startLine="98" endLine="101" />
      <scope startLine="101" endLine="105" />
      <scope startLine="107" endLine="111" />
      <scope startLine="111" endLine="114" />
      <scope startLine="116" endLine="120" />
      <scope startLine="120" endLine="123" />
      <scope startLine="125" endLine="129" />
      <scope startLine="129" endLine="132" />
      <scope startLine="134" endLine="138" />
      <scope startLine="138" endLine="141" />
      <comment>we are initializing the first point</comment>
      <comment>initialize as if previous root (i.e. backward one) was an ignored increasing event</comment>
      <comment>initialize as if previous root (i.e. backward one) was a triggered decreasing event</comment>
      <comment>we are exactly at a root, we don't know if it is an increasing</comment>
      <comment>or a decreasing event, we remain in uninitialized state</comment>
      <comment>we have crossed the zero line on an ignored increasing event,</comment>
      <comment>we must change the transformer</comment>
      <comment>we are still in the same status</comment>
      <comment>we have crossed the zero line on an ignored increasing event,</comment>
      <comment>we must change the transformer</comment>
      <comment>we are still in the same status</comment>
      <comment>we have crossed the zero line on a triggered decreasing event,</comment>
      <comment>we must change the transformer</comment>
      <comment>we are still in the same status</comment>
      <comment>we have crossed the zero line on a triggered decreasing event,</comment>
      <comment>we must change the transformer</comment>
      <comment>we are still in the same status</comment>
      <comment>this should never happen</comment>
    </scope>
    <scope startLine="146" endLine="201">
      <scope startLine="150" endLine="153" />
      <scope startLine="153" endLine="156" />
      <scope startLine="156" endLine="160" />
      <scope startLine="162" endLine="166" />
      <scope startLine="166" endLine="169" />
      <scope startLine="171" endLine="175" />
      <scope startLine="175" endLine="178" />
      <scope startLine="180" endLine="184" />
      <scope startLine="184" endLine="187" />
      <scope startLine="189" endLine="193" />
      <scope startLine="193" endLine="196" />
      <comment>we are initializing the first point</comment>
      <comment>initialize as if previous root (i.e. forward one) was a triggered decreasing event</comment>
      <comment>initialize as if previous root (i.e. forward one) was an ignored increasing event</comment>
      <comment>we are exactly at a root, we don't know if it is an increasing</comment>
      <comment>or a decreasing event, we remain in uninitialized state</comment>
      <comment>we have crossed the zero line on an ignored increasing event,</comment>
      <comment>we must change the transformer</comment>
      <comment>we are still in the same status</comment>
      <comment>we have crossed the zero line on an ignored increasing event,</comment>
      <comment>we must change the transformer</comment>
      <comment>we are still in the same status</comment>
      <comment>we have crossed the zero line on a triggered decreasing event,</comment>
      <comment>we must change the transformer</comment>
      <comment>we are still in the same status</comment>
      <comment>we have crossed the zero line on a triggered decreasing event,</comment>
      <comment>we must change the transformer</comment>
      <comment>we are still in the same status</comment>
      <comment>this should never happen</comment>
    </scope>
  </method>
  <javadoc>
    <text>* Constant for triggering only increasing events.
 * <p>When this filter is used, the wrapped {@link EventHandlerevent handler} {@link EventHandler#eventOccurred(double,double[],boolean) eventOccurred} method will be called <em>only</em> with
 * its {@code increasing} argument set to true.</p></text>
  </javadoc>
  <javadoc>
    <text>* {@inheritDoc}</text>
  </javadoc>
  <method type="boolean" name="getTriggeredIncreasing" startLine="215" endLine="217" />
  <javadoc>
    <text>* {@inheritDoc}<p>
 * states scheduling for computing h(t,y) as an altered version of g(t, y)
 * <ul>
 * <li>0 are triggered events for which a zero is produced (here increasing events)</li>
 * <li>X are ignored events for which zero is masked (here decreasing events)</li>
 * </ul>
 * </p>
 * <pre>
 * g(t)
 * ___                     ___                     ___
 * /   \                   /   \                   /   \
 * /     \                 /     \                 /     \
 * /  g>0  \               /  g>0  \               /  g>0  \
 * /         \             /         \             /         \
 * ----- 0 --------- X --------- 0 --------- X --------- 0 --------- X ---
 * /             \         /             \         /             \
 * /               \ g<0   /               \  g<0  /               \ g<0
 * /                 \     /                 \     /                 \     /
 * ___/                   \___/                   \___/                   \___/
 * </pre>
 * <pre>
 * h(t,y)) as an alteration of g(t,y)
 * ___         ___
 * \                               /   \       /   \
 * \ h=-g                        /     \     /     \ h=-g
 * \      h=min(-s,-g,+g)      /       \   /       \      h=min(-s,-g,+g)
 * \                         /         \_/         \
 * ------0 ----------_---------- 0 --------------------- 0 --------- _ ---
 * \         / \         /                         \         / \
 * \       /   \       /       h=max(+s,-g,+g)     \       /   \
 * \     /     \     / h=+g                        \     /     \     /
 * \___/       \___/                               \___/       \___/
 * </pre>
 * <p>
 * As shown by the figure above, several expressions are used to compute h,
 * depending on the current state:
 * <ul>
 * <li>h = max(+s,-g,+g)</li>
 * <li>h = +g</li>
 * <li>h = min(-s,-g,+g)</li>
 * <li>h = -g</li>
 * </ul>
 * where s is a tiny positive value: {@link org.apache.commons.math3.util.Precision#SAFE_MIN}.
 * </p></text>
  </javadoc>
  <method type="Transformer" name="selectTransformer" startLine="266" endLine="378">
    <scope startLine="267" endLine="322">
      <scope startLine="271" endLine="274" />
      <scope startLine="274" endLine="277" />
      <scope startLine="277" endLine="281" />
      <scope startLine="283" endLine="287" />
      <scope startLine="287" endLine="290" />
      <scope startLine="292" endLine="296" />
      <scope startLine="296" endLine="299" />
      <scope startLine="301" endLine="305" />
      <scope startLine="305" endLine="308" />
      <scope startLine="310" endLine="314" />
      <scope startLine="314" endLine="317" />
      <comment>we are initializing the first point</comment>
      <comment>initialize as if previous root (i.e. backward one) was a triggered increasing event</comment>
      <comment>initialize as if previous root (i.e. backward one) was an ignored decreasing event</comment>
      <comment>we are exactly at a root, we don't know if it is an increasing</comment>
      <comment>or a decreasing event, we remain in uninitialized state</comment>
      <comment>we have crossed the zero line on an ignored decreasing event,</comment>
      <comment>we must change the transformer</comment>
      <comment>we are still in the same status</comment>
      <comment>we have crossed the zero line on an ignored decreasing event,</comment>
      <comment>we must change the transformer</comment>
      <comment>we are still in the same status</comment>
      <comment>we have crossed the zero line on a triggered increasing event,</comment>
      <comment>we must change the transformer</comment>
      <comment>we are still in the same status</comment>
      <comment>we have crossed the zero line on a triggered increasing event,</comment>
      <comment>we must change the transformer</comment>
      <comment>we are still in the same status</comment>
      <comment>this should never happen</comment>
    </scope>
    <scope startLine="322" endLine="377">
      <scope startLine="326" endLine="329" />
      <scope startLine="329" endLine="332" />
      <scope startLine="332" endLine="336" />
      <scope startLine="338" endLine="342" />
      <scope startLine="342" endLine="345" />
      <scope startLine="347" endLine="351" />
      <scope startLine="351" endLine="354" />
      <scope startLine="356" endLine="360" />
      <scope startLine="360" endLine="363" />
      <scope startLine="365" endLine="369" />
      <scope startLine="369" endLine="372" />
      <comment>we are initializing the first point</comment>
      <comment>initialize as if previous root (i.e. forward one) was an ignored decreasing event</comment>
      <comment>initialize as if previous root (i.e. forward one) was a triggered increasing event</comment>
      <comment>we are exactly at a root, we don't know if it is an increasing</comment>
      <comment>or a decreasing event, we remain in uninitialized state</comment>
      <comment>we have crossed the zero line on an ignored decreasing event,</comment>
      <comment>we must change the transformer</comment>
      <comment>we are still in the same status</comment>
      <comment>we have crossed the zero line on an ignored decreasing event,</comment>
      <comment>we must change the transformer</comment>
      <comment>we are still in the same status</comment>
      <comment>we have crossed the zero line on a triggered increasing event,</comment>
      <comment>we must change the transformer</comment>
      <comment>we are still in the same status</comment>
      <comment>we have crossed the zero line on a triggered increasing event,</comment>
      <comment>we must change the transformer</comment>
      <comment>we are still in the same status</comment>
      <comment>this should never happen</comment>
    </scope>
  </method>
  <method name="getTriggeredIncreasing" type="boolean" startLine="382" endLine="385" />
  <javadoc>
    <text>* Get the increasing status of triggered events.</text>
    <return>true if triggered events are increasing events</return>
  </javadoc>
  <method name="selectTransformer" type="Transformer" startLine="387" endLine="395" />
  <javadoc>
    <text>* Get next function transformer in the specified direction.</text>
    <param>previous transformer active on the previous point with respect
 * to integration direction (may be null if no previous point is known)</param>
    <param>g current value of the g function</param>
    <param>forward true if integration goes forward</param>
    <return>next transformer transformer</return>
  </javadoc>
</source>
