<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive.moment">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="FourthMoment" extends="ThirdMoment" startLine="24">
    <implements name="Serializable" />
    <javadoc>
      <text>* Computes a statistic related to the Fourth Central Moment.  Specifically,
 * what is computed is the sum of
 * <p>
 * (x_i - xbar) ^ 4, </p>
 * <p>
 * where the x_i are the
 * sample observations and xbar is the sample mean. </p>
 * <p>
 * The following recursive updating formula is used: </p>
 * <p>
 * Let <ul>
 * <li> dev = (current obs - previous mean) </li>
 * <li> m2 = previous value of {@link SecondMoment} </li>
 * <li> m2 = previous value of {@link ThirdMoment} </li>
 * <li> n = number of observations (including current obs) </li>
 * </ul>
 * Then </p>
 * <p>
 * new value = old value - 4 * (dev/n) * m3 + 6 * (dev/n)^2 * m2 + <br>
 * [n^2 - 3 * (n-1)] * dev^4 * (n-1) / n^3 </p>
 * <p>
 * Returns <code>Double.NaN</code> if no data values have been added and
 * returns <code>0</code> if there is just one value in the data set. </p>
 * <p>
 * <strong>Note that this implementation is not synchronized.</strong> If
 * multiple threads access an instance of this class concurrently, and at least
 * one of the threads invokes the <code>increment()</code> or
 * <code>clear()</code> method, it must be synchronized externally. </p></text>
      <version>$Id: FourthMoment.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* fourth moment of values that have been added</text>
    </javadoc>
    <declaration type="double" name="m4" />
    <javadoc>
      <text>* Create a FourthMoment instance</text>
    </javadoc>
    <method type="constructor" name="FourthMoment" startLine="67" endLine="70" />
    <javadoc>
      <text>* Copy constructor, creates a new {@code FourthMoment} identical
 * to the {@code original}</text>
      <param>original the {@code FourthMoment} instance to copy</param>
      <throws>NullArgumentException if original is null</throws>
    </javadoc>
    <method type="constructor" name="FourthMoment" startLine="79" endLine="82" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="increment" startLine="88" endLine="105">
      <scope startLine="89" endLine="94" />
      <declaration type="double" name="prevM3" />
      <declaration type="double" name="prevM2" />
      <declaration type="double" name="n0" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getResult" startLine="111" endLine="113" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="clear" startLine="119" endLine="122" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FourthMoment" name="copy" startLine="128" endLine="133">
      <declaration type="FourthMoment" name="result" />
      <comment>No try-catch or advertised exception because args are guaranteed non-null</comment>
    </method>
    <javadoc>
      <text>* Copies source to dest.
 * <p>Neither source nor dest can be null.</p></text>
      <param>source FourthMoment to copy</param>
      <param>dest FourthMoment to copy to</param>
      <throws>NullArgumentException if either source or dest is null</throws>
    </javadoc>
    <method type="void" name="copy" startLine="144" endLine="149" />
  </class>
</source>
