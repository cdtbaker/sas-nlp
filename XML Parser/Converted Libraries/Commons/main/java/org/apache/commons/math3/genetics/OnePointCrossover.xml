<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.genetics">
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <class name="OnePointCrossover" startLine="27">
    <implements name="CrossoverPolicy" />
    <javadoc>
      <text>* One point crossover policy. A random crossover point is selected and the
 * first part from each parent is copied to the corresponding child, and the
 * second parts are copied crosswise.
 * Example:
 * <pre>
 * -C- denotes a crossover point
 * -C-                                 -C-
 * p1 = (1 0 1 0 0 1  | 0 1 1)    X    p2 = (0 1 1 0 1 0  | 1 1 1)
 * \------------/ \-----/              \------------/ \-----/
 * ||         (*)                       ||        (**)
 * VV         (**)                      VV        (*)
 * /------------\ /-----\              /------------\ /-----\
 * c1 = (1 0 1 0 0 1  | 1 1 1)    X    c2 = (0 1 1 0 1 0  | 0 1 1)
 * </pre>
 * This policy works only on {@link AbstractListChromosome}, and therefore it
 * is parameterized by T. Moreover, the chromosomes must have same lengths.</text>
      <param><T>
 *  generic type of the {@link AbstractListChromosome}s for crossover</param>
      <since>2.0</since>
      <version>$Id: OnePointCrossover.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Performs one point crossover. A random crossover point is selected and the
 * first part from each parent is copied to the corresponding child, and the
 * second parts are copied crosswise.
 * Example:
 * <pre>
 * -C- denotes a crossover point
 * -C-                                 -C-
 * p1 = (1 0 1 0 0 1  | 0 1 1)    X    p2 = (0 1 1 0 1 0  | 1 1 1)
 * \------------/ \-----/              \------------/ \-----/
 * ||         (*)                       ||        (**)
 * VV         (**)                      VV        (*)
 * /------------\ /-----\              /------------\ /-----\
 * c1 = (1 0 1 0 0 1  | 1 1 1)    X    c2 = (0 1 1 0 1 0  | 0 1 1)
 * </pre></text>
      <param>first first parent (p1)</param>
      <param>second second parent (p2)</param>
      <return>pair of two children (c1,c2)</return>
      <throws>MathIllegalArgumentException iff one of the chromosomes is
 * not an instance of {@link AbstractListChromosome}</throws>
      <throws>DimensionMismatchException if the length of the two chromosomes is different</throws>
    </javadoc>
    <method type="ChromosomePair" name="crossover" startLine="80" endLine="86">
      <scope startLine="82" endLine="84" />
    </method>
    <javadoc>
      <text>* Helper for {@link #crossover(Chromosome,Chromosome)}. Performs the actual crossover.</text>
      <param>first the first chromosome.</param>
      <param>second the second chromosome.</param>
      <return>the pair of new chromosomes that resulted from the crossover.</return>
      <throws>DimensionMismatchException if the length of the two chromosomes is different</throws>
    </javadoc>
    <method type="ChromosomePair" name="crossover" startLine="98" endLine="127">
      <declaration type="int" name="length" />
      <scope startLine="100" endLine="102" />
      <declaration type="List<T>" name="parent1Rep" />
      <declaration type="List<T>" name="parent2Rep" />
      <declaration type="ArrayList<T>" name="child1Rep" />
      <declaration type="ArrayList<T>" name="child2Rep" />
      <declaration type="int" name="crossoverIndex" />
      <scope startLine="115" endLine="118" />
      <scope startLine="120" endLine="123" />
      <comment>array representations of the parents</comment>
      <comment>and of the children</comment>
      <comment>select a crossover point at random (0 and length makes no sense)</comment>
      <comment>copy the first part</comment>
      <comment>and switch the second part</comment>
    </method>
    <comment>OK because of instanceof checks</comment>
  </class>
</source>
