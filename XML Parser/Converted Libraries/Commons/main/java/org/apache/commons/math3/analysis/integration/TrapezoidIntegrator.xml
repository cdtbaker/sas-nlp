<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.integration">
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="TrapezoidIntegrator" extends="BaseAbstractUnivariateIntegrator" startLine="27">
    <javadoc>
      <text>* Implements the <a href="http://mathworld.wolfram.com/TrapezoidalRule.html">
 * Trapezoid Rule</a> for integration of real univariate functions. For
 * reference, see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X,
 * chapter 3.
 * <p>
 * The function should be integrable.</p></text>
      <version>$Id: TrapezoidIntegrator.java 1455194 2013-03-11 15:45:54Z luc $</version>
      <since>1.2</since>
    </javadoc>
    <javadoc>
      <text>* Maximum number of iterations for trapezoid.</text>
    </javadoc>
    <declaration type="int" name="TRAPEZOID_MAX_ITERATIONS_COUNT" />
    <javadoc>
      <text>* Intermediate result.</text>
    </javadoc>
    <declaration type="double" name="s" />
    <javadoc>
      <text>* Build a trapezoid integrator with given accuracies and iterations counts.</text>
      <param>relativeAccuracy relative accuracy of the result</param>
      <param>absoluteAccuracy absolute accuracy of the result</param>
      <param>minimalIterationCount minimum number of iterations</param>
      <param>maximalIterationCount maximum number of iterations
 * (must be less than or equal to {@link #TRAPEZOID_MAX_ITERATIONS_COUNT}</param>
      <exception>NotStrictlyPositiveException if minimal number of iterations
 * is not strictly positive</exception>
      <exception>NumberIsTooSmallException if maximal number of iterations
 * is lesser than or equal to the minimal number of iterations</exception>
      <exception>NumberIsTooLargeException if maximal number of iterations
 * is greater than {@link #TRAPEZOID_MAX_ITERATIONS_COUNT}</exception>
    </javadoc>
    <method type="constructor" name="TrapezoidIntegrator" startLine="64" endLine="70">
      <scope startLine="66" endLine="69" />
    </method>
    <javadoc>
      <text>* Build a trapezoid integrator with given iteration counts.</text>
      <param>minimalIterationCount minimum number of iterations</param>
      <param>maximalIterationCount maximum number of iterations
 * (must be less than or equal to {@link #TRAPEZOID_MAX_ITERATIONS_COUNT}</param>
      <exception>NotStrictlyPositiveException if minimal number of iterations
 * is not strictly positive</exception>
      <exception>NumberIsTooSmallException if maximal number of iterations
 * is lesser than or equal to the minimal number of iterations</exception>
      <exception>NumberIsTooLargeException if maximal number of iterations
 * is greater than {@link #TRAPEZOID_MAX_ITERATIONS_COUNT}</exception>
    </javadoc>
    <method type="constructor" name="TrapezoidIntegrator" startLine="86" endLine="92">
      <scope startLine="88" endLine="91" />
    </method>
    <javadoc>
      <text>* Construct a trapezoid integrator with default settings.
 * (max iteration count set to {@link #TRAPEZOID_MAX_ITERATIONS_COUNT})</text>
    </javadoc>
    <method type="constructor" name="TrapezoidIntegrator" startLine="98" endLine="100" />
    <javadoc>
      <text>* Compute the n-th stage integral of trapezoid rule. This function
 * should only be called by API <code>integrate()</code> in the package.
 * To save time it does not verify arguments - caller does.
 * <p>
 * The interval is divided equally into 2^n sections rather than an
 * arbitrary m sections because this configuration can best utilize the
 * already computed values.</p></text>
      <param>baseIntegrator integrator holding integration parameters</param>
      <param>n the stage of 1/2 refinement, n = 0 is no refinement</param>
      <return>the value of n-th stage integral</return>
      <throws>TooManyEvaluationsException if the maximal number of evaluations
 * is exceeded.</throws>
    </javadoc>
    <method type="double" name="stage" startLine="118" endLine="143">
      <scope startLine="120" endLine="127">
        <declaration type="double" name="max" />
        <declaration type="double" name="min" />
      </scope>
      <scope startLine="127" endLine="142">
        <declaration type="long" name="np" />
        <declaration type="double" name="sum" />
        <declaration type="double" name="max" />
        <declaration type="double" name="min" />
        <declaration type="double" name="spacing" />
        <declaration type="double" name="x" />
        <scope startLine="135" endLine="138" />
        <comment>number of new points in this stage</comment>
        <comment>spacing between adjacent new points</comment>
        <comment>the first new point</comment>
        <comment>add the new sum to previously calculated result</comment>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="doIntegrate" startLine="148" endLine="167">
      <declaration type="double" name="oldt" />
      <scope startLine="152" endLine="165">
        <declaration type="int" name="i" />
        <declaration type="double" name="t" />
        <scope startLine="155" endLine="162">
          <declaration type="double" name="delta" />
          <declaration type="double" name="rLimit" />
          <scope startLine="159" endLine="161" />
        </scope>
      </scope>
    </method>
  </class>
</source>
