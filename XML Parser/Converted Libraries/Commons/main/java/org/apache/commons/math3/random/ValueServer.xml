<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.random">
  <import name="java.io.BufferedReader" />
  <import name="java.io.IOException" />
  <import name="java.io.InputStreamReader" />
  <import name="java.net.MalformedURLException" />
  <import name="java.net.URL" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.MathIllegalStateException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.ZeroException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <class name="ValueServer" startLine="31">
    <javadoc>
      <text>* Generates values for use in simulation applications.
 * <p>
 * How values are generated is determined by the <code>mode</code>
 * property.</p>
 * <p>
 * Supported <code>mode</code> values are: <ul>
 * <li> DIGEST_MODE -- uses an empirical distribution </li>
 * <li> REPLAY_MODE -- replays data from <code>valuesFileURL</code></li>
 * <li> UNIFORM_MODE -- generates uniformly distributed random values with
 * mean = <code>mu</code> </li>
 * <li> EXPONENTIAL_MODE -- generates exponentially distributed random values
 * with mean = <code>mu</code></li>
 * <li> GAUSSIAN_MODE -- generates Gaussian distributed random values with
 * mean = <code>mu</code> and
 * standard deviation = <code>sigma</code></li>
 * <li> CONSTANT_MODE -- returns <code>mu</code> every time.</li></ul></p></text>
      <version>$Id: ValueServer.java 1422350 2012-12-15 20:47:47Z psteitz $</version>
    </javadoc>
    <javadoc>
      <text>* Use empirical distribution.</text>
    </javadoc>
    <declaration type="int" name="DIGEST_MODE" />
    <javadoc>
      <text>* Replay data from valuesFilePath.</text>
    </javadoc>
    <declaration type="int" name="REPLAY_MODE" />
    <javadoc>
      <text>* Uniform random deviates with mean = &mu;.</text>
    </javadoc>
    <declaration type="int" name="UNIFORM_MODE" />
    <javadoc>
      <text>* Exponential random deviates with mean = &mu;.</text>
    </javadoc>
    <declaration type="int" name="EXPONENTIAL_MODE" />
    <javadoc>
      <text>* Gaussian random deviates with mean = &mu;, std dev = &sigma;.</text>
    </javadoc>
    <declaration type="int" name="GAUSSIAN_MODE" />
    <javadoc>
      <text>* Always return mu</text>
    </javadoc>
    <declaration type="int" name="CONSTANT_MODE" />
    <javadoc>
      <text>* mode determines how values are generated.</text>
    </javadoc>
    <declaration type="int" name="mode" />
    <javadoc>
      <text>* URI to raw data values.</text>
    </javadoc>
    <declaration type="URL" name="valuesFileURL" />
    <javadoc>
      <text>* Mean for use with non-data-driven modes.</text>
    </javadoc>
    <declaration type="double" name="mu" />
    <javadoc>
      <text>* Standard deviation for use with GAUSSIAN_MODE.</text>
    </javadoc>
    <declaration type="double" name="sigma" />
    <javadoc>
      <text>* Empirical probability distribution for use with DIGEST_MODE.</text>
    </javadoc>
    <declaration type="EmpiricalDistribution" name="empiricalDistribution" />
    <javadoc>
      <text>* File pointer for REPLAY_MODE.</text>
    </javadoc>
    <declaration type="BufferedReader" name="filePointer" />
    <javadoc>
      <text>* RandomDataImpl to use for random data generation.</text>
    </javadoc>
    <declaration type="RandomDataImpl" name="randomData" />
    <javadoc>
      <text>* Creates new ValueServer</text>
    </javadoc>
    <method type="constructor" name="ValueServer" startLine="96" endLine="98" />
    <javadoc>
      <text>* Construct a ValueServer instance using a RandomDataImpl as its source
 * of random data.</text>
      <param>randomData the RandomDataImpl instance used to source random data</param>
      <since>3.0</since>
      <deprecated>use {@link #ValueServer(RandomGenerator)}</deprecated>
    </javadoc>
    <method type="constructor" name="ValueServer" startLine="108" endLine="110" />
    <javadoc>
      <text>* Construct a ValueServer instance using a RandomGenerator as its source
 * of random data.</text>
      <since>3.1</since>
      <param>generator source of random data</param>
    </javadoc>
    <method type="constructor" name="ValueServer" startLine="119" endLine="121" />
    <javadoc>
      <text>* Returns the next generated value, generated according
 * to the mode value (see MODE constants).</text>
      <return>generated value</return>
      <throws>IOException in REPLAY_MODE if a file I/O error occurs</throws>
      <throws>MathIllegalStateException if mode is not recognized</throws>
      <throws>MathIllegalArgumentException if the underlying random generator thwrows one</throws>
    </javadoc>
    <method type="double" name="getNext" startLine="132" endLine="147" />
    <javadoc>
      <text>* Fills the input array with values generated using getNext() repeatedly.</text>
      <param>values array to be filled</param>
      <throws>IOException in REPLAY_MODE if a file I/O error occurs</throws>
      <throws>MathIllegalStateException if mode is not recognized</throws>
      <throws>MathIllegalArgumentException if the underlying random generator thwrows one</throws>
    </javadoc>
    <method type="void" name="fill" startLine="158" endLine="162">
      <scope startLine="159" endLine="161" />
    </method>
    <javadoc>
      <text>* Returns an array of length <code>length</code> with values generated
 * using getNext() repeatedly.</text>
      <param>length length of output array</param>
      <return>array of generated values</return>
      <throws>IOException in REPLAY_MODE if a file I/O error occurs</throws>
      <throws>MathIllegalStateException if mode is not recognized</throws>
      <throws>MathIllegalArgumentException if the underlying random generator thwrows one</throws>
    </javadoc>
    <method type="double[]" name="fill" startLine="175" endLine="181">
      <declaration type="double[]" name="out" />
      <scope startLine="177" endLine="179" />
    </method>
    <javadoc>
      <text>* Computes the empirical distribution using values from the file
 * in <code>valuesFileURL</code>, using the default number of bins.
 * <p>
 * <code>valuesFileURL</code> must exist and be
 * readable by *this at runtime.</p>
 * <p>
 * This method must be called before using <code>getNext()</code>
 * with <code>mode = DIGEST_MODE</code></p></text>
      <throws>IOException if an I/O error occurs reading the input file</throws>
      <throws>NullArgumentException if the {@code valuesFileURL} has not been set</throws>
      <throws>ZeroException if URL contains no data</throws>
    </javadoc>
    <method type="void" name="computeDistribution" startLine="197" endLine="199" />
    <javadoc>
      <text>* Computes the empirical distribution using values from the file
 * in <code>valuesFileURL</code> and <code>binCount</code> bins.
 * <p>
 * <code>valuesFileURL</code> must exist and be readable by this process
 * at runtime.</p>
 * <p>
 * This method must be called before using <code>getNext()</code>
 * with <code>mode = DIGEST_MODE</code></p></text>
      <param>binCount the number of bins used in computing the empirical
 * distribution</param>
      <throws>NullArgumentException if the {@code valuesFileURL} has not been set</throws>
      <throws>IOException if an error occurs reading the input file</throws>
      <throws>ZeroException if URL contains no data</throws>
    </javadoc>
    <method type="void" name="computeDistribution" startLine="217" endLine="222" />
    <javadoc>
      <text>* Returns the data generation mode. See {@link ValueServer the class javadoc}for description of the valid values of this property.</text>
      <return>Value of property mode.</return>
    </javadoc>
    <method type="int" name="getMode" startLine="230" endLine="232" />
    <javadoc>
      <text>* Sets the data generation mode.</text>
      <param>mode New value of the data generation mode.</param>
    </javadoc>
    <method type="void" name="setMode" startLine="239" endLine="241" />
    <javadoc>
      <text>* Returns the URL for the file used to build the empirical distribution
 * when using {@link #DIGEST_MODE}.</text>
      <return>Values file URL.</return>
    </javadoc>
    <method type="URL" name="getValuesFileURL" startLine="249" endLine="251" />
    <javadoc>
      <text>* Sets the {@link #getValuesFileURL() values file URL} using a string
 * URL representation.</text>
      <param>url String representation for new valuesFileURL.</param>
      <throws>MalformedURLException if url is not well formed</throws>
    </javadoc>
    <method type="void" name="setValuesFileURL" startLine="260" endLine="262" />
    <javadoc>
      <text>* Sets the the {@link #getValuesFileURL() values file URL}.
 * <p>The values file <i>must</i> be an ASCII text file containing one
 * valid numeric entry per line.</p></text>
      <param>url URL of the values file.</param>
    </javadoc>
    <method type="void" name="setValuesFileURL" startLine="272" endLine="274" />
    <javadoc>
      <text>* Returns the {@link EmpiricalDistribution} used when operating in {@value #DIGEST_MODE}.</text>
      <return>EmpircalDistribution built by {@link #computeDistribution()}</return>
    </javadoc>
    <method type="EmpiricalDistribution" name="getEmpiricalDistribution" startLine="281" endLine="283" />
    <javadoc>
      <text>* Resets REPLAY_MODE file pointer to the beginning of the <code>valuesFileURL</code>.</text>
      <throws>IOException if an error occurs opening the file</throws>
    </javadoc>
    <method type="void" name="resetReplayFile" startLine="290" endLine="300">
      <scope startLine="291" endLine="298">
        <scope startLine="292" endLine="295" />
        <scope startLine="295" endLine="297" />
        <comment>NOPMD</comment>
        <comment>ignore</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Closes {@code valuesFileURL} after use in REPLAY_MODE.</text>
      <throws>IOException if an error occurs closing the file</throws>
    </javadoc>
    <method type="void" name="closeReplayFile" startLine="307" endLine="312">
      <scope startLine="308" endLine="311" />
    </method>
    <javadoc>
      <text>* Returns the mean used when operating in {@link #GAUSSIAN_MODE}, {@link #EXPONENTIAL_MODE}or {@link #UNIFORM_MODE}.  When operating in {@link #CONSTANT_MODE}, this is the constant
 * value always returned.  Calling {@link #computeDistribution()} sets this value to the
 * overall mean of the values in the {@link #getValuesFileURL() values file}.</text>
      <return>Mean used in data generation.</return>
    </javadoc>
    <method type="double" name="getMu" startLine="322" endLine="324" />
    <javadoc>
      <text>* Sets the {@link #getMu() mean} used in data generation.  Note that calling this method
 * after {@link #computeDistribution()} has been called will have no effect on data
 * generated in {@link #DIGEST_MODE}.</text>
      <param>mu new Mean value.</param>
    </javadoc>
    <method type="void" name="setMu" startLine="333" endLine="335" />
    <javadoc>
      <text>* Returns the standard deviation used when operating in {@link #GAUSSIAN_MODE}.
 * Calling {@link #computeDistribution()} sets this value to the overall standard
 * deviation of the values in the {@link #getValuesFileURL() values file}.  This
 * property has no effect when the data generation mode is not{@link #GAUSSIAN_MODE}.</text>
      <return>Standard deviation used when operating in {@link #GAUSSIAN_MODE}.</return>
    </javadoc>
    <method type="double" name="getSigma" startLine="346" endLine="348" />
    <javadoc>
      <text>* Sets the {@link #getSigma() standard deviation} used in {@link #GAUSSIAN_MODE}.</text>
      <param>sigma New standard deviation.</param>
    </javadoc>
    <method type="void" name="setSigma" startLine="355" endLine="357" />
    <javadoc>
      <text>* Reseeds the random data generator.</text>
      <param>seed Value with which to reseed the {@link RandomDataImpl}used to generate random data.</param>
    </javadoc>
    <method type="void" name="reSeed" startLine="365" endLine="367" />
    <javadoc>
      <text>* Gets a random value in DIGEST_MODE.
 * <p>
 * <strong>Preconditions</strong>: <ul>
 * <li>Before this method is called, <code>computeDistribution()</code>
 * must have completed successfully; otherwise an
 * <code>IllegalStateException</code> will be thrown</li></ul></p></text>
      <return>next random value from the empirical distribution digest</return>
      <throws>MathIllegalStateException if digest has not been initialized</throws>
    </javadoc>
    <method type="double" name="getNextDigest" startLine="382" endLine="388">
      <scope startLine="384" endLine="386" />
    </method>
    <javadoc>
      <text>* Gets next sequential value from the <code>valuesFileURL</code>.
 * <p>
 * Throws an IOException if the read fails.</p>
 * <p>
 * This method will open the <code>valuesFileURL</code> if there is no
 * replay file open.</p>
 * <p>
 * The <code>valuesFileURL</code> will be closed and reopened to wrap around
 * from EOF to BOF if EOF is encountered. EOFException (which is a kind of
 * IOException) may still be thrown if the <code>valuesFileURL</code> is
 * empty.</p></text>
      <return>next value from the replay file</return>
      <throws>IOException if there is a problem reading from the file</throws>
      <throws>MathIllegalStateException if URL contains no data</throws>
      <throws>NumberFormatException if an invalid numeric string is
 * encountered in the file</throws>
    </javadoc>
    <method type="double" name="getNextReplay" startLine="409" endLine="424">
      <declaration type="String" name="str" />
      <scope startLine="411" endLine="413" />
      <scope startLine="414" endLine="422">
        <scope startLine="418" endLine="421" />
        <comment>we have probably reached end of file, wrap around from EOF to BOF</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Gets a uniformly distributed random value with mean = mu.</text>
      <return>random uniform value</return>
      <throws>MathIllegalArgumentException if the underlying random generator thwrows one</throws>
    </javadoc>
    <method type="double" name="getNextUniform" startLine="432" endLine="434" />
    <javadoc>
      <text>* Gets an exponentially distributed random value with mean = mu.</text>
      <return>random exponential value</return>
      <throws>MathIllegalArgumentException if the underlying random generator thwrows one</throws>
    </javadoc>
    <method type="double" name="getNextExponential" startLine="442" endLine="444" />
    <javadoc>
      <text>* Gets a Gaussian distributed random value with mean = mu
 * and standard deviation = sigma.</text>
      <return>random Gaussian value</return>
      <throws>MathIllegalArgumentException if the underlying random generator thwrows one</throws>
    </javadoc>
    <method type="double" name="getNextGaussian" startLine="453" endLine="455" />
    <comment>Data generation modes ======================================</comment>
    <comment>------------- private methods ---------------------------------</comment>
  </class>
</source>
