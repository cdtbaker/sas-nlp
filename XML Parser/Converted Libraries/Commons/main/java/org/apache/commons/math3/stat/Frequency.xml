<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat">
  <import name="java.io.Serializable" />
  <import name="java.text.NumberFormat" />
  <import name="java.util.Collection" />
  <import name="java.util.Iterator" />
  <import name="java.util.Comparator" />
  <import name="java.util.Map" />
  <import name="java.util.TreeMap" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="Frequency" startLine="32">
    <implements name="Serializable" />
    <javadoc>
      <text>* Maintains a frequency distribution.
 * <p>
 * Accepts int, long, char or Comparable values.  New values added must be
 * comparable to those that have been added, otherwise the add method will
 * throw an IllegalArgumentException.</p>
 * <p>
 * Integer values (int, long, Integer, Long) are not distinguished by type --
 * i.e. <code>addValue(Long.valueOf(2)), addValue(2), addValue(2l)</code> all have
 * the same effect (similarly for arguments to <code>getCount,</code> etc.).</p>
 * <p>
 * char values are converted by <code>addValue</code> to Character instances.
 * As such, these values are not comparable to integral values, so attempts
 * to combine integral types with chars in a frequency distribution will fail.
 * </p>
 * <p>
 * The values are ordered using the default (natural order), unless a
 * <code>Comparator</code> is supplied in the constructor.</p></text>
      <version>$Id: Frequency.java 1455703 2013-03-12 20:46:23Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* underlying collection</text>
    </javadoc>
    <declaration type="TreeMap<Comparable<?>,Long>" name="freqTable" />
    <javadoc>
      <text>* Default constructor.</text>
    </javadoc>
    <method type="constructor" name="Frequency" startLine="64" endLine="66" />
    <javadoc>
      <text>* Constructor allowing values Comparator to be specified.</text>
      <param>comparator Comparator used to order values</param>
    </javadoc>
    <method type="constructor" name="Frequency" startLine="74" endLine="76" />
    <javadoc>
      <text>* Return a string representation of this frequency
 * distribution.</text>
      <return>a string representation.</return>
    </javadoc>
    <method type="String" name="toString" startLine="85" endLine="102">
      <declaration type="NumberFormat" name="nf" />
      <declaration type="StringBuilder" name="outBuffer" />
      <declaration type="Iterator<Comparable<?>>" name="iter" />
      <scope startLine="90" endLine="100">
        <declaration type="Comparable<?>" name="value" />
      </scope>
    </method>
    <javadoc>
      <text>* Adds 1 to the frequency count for v.
 * <p>
 * If other objects have already been added to this Frequency, v must
 * be comparable to those that have already been added.
 * </p></text>
      <param>v the value to add.</param>
      <throws>MathIllegalArgumentException if <code>v</code> is not comparable with previous entries</throws>
    </javadoc>
    <method type="void" name="addValue" startLine="114" endLine="116" />
    <javadoc>
      <text>* Increments the frequency count for v.
 * <p>
 * If other objects have already been added to this Frequency, v must
 * be comparable to those that have already been added.
 * </p></text>
      <param>v the value to add.</param>
      <param>increment the amount by which the value should be incremented</param>
      <throws>IllegalArgumentException if <code>v</code> is not comparable with previous entries</throws>
      <since>3.1</since>
    </javadoc>
    <method type="void" name="incrementValue" startLine="130" endLine="148">
      <declaration type="Comparable<?>" name="obj" />
      <scope startLine="132" endLine="134" />
      <scope startLine="135" endLine="142">
        <declaration type="Long" name="count" />
        <scope startLine="137" endLine="139" />
        <scope startLine="139" endLine="141" />
      </scope>
      <scope startLine="142" endLine="147">
        <comment>TreeMap will throw ClassCastException if v is not comparable</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Adds 1 to the frequency count for v.</text>
      <param>v the value to add.</param>
      <throws>MathIllegalArgumentException if the table contains entries not
 * comparable to Integer</throws>
    </javadoc>
    <method type="void" name="addValue" startLine="157" endLine="159" />
    <javadoc>
      <text>* Adds 1 to the frequency count for v.</text>
      <param>v the value to add.</param>
      <throws>MathIllegalArgumentException if the table contains entries not
 * comparable to Long</throws>
    </javadoc>
    <method type="void" name="addValue" startLine="168" endLine="170" />
    <javadoc>
      <text>* Adds 1 to the frequency count for v.</text>
      <param>v the value to add.</param>
      <throws>MathIllegalArgumentException if the table contains entries not
 * comparable to Char</throws>
    </javadoc>
    <method type="void" name="addValue" startLine="179" endLine="181" />
    <javadoc>
      <text>* Clears the frequency table</text>
    </javadoc>
    <method type="void" name="clear" startLine="184" endLine="186" />
    <javadoc>
      <text>* Returns an Iterator over the set of values that have been added.
 * <p>
 * If added values are integral (i.e., integers, longs, Integers, or Longs),
 * they are converted to Longs when they are added, so the objects returned
 * by the Iterator will in this case be Longs.</p></text>
      <return>values Iterator</return>
    </javadoc>
    <method type="Iterator<Comparable<?>>" name="valuesIterator" startLine="197" endLine="199" />
    <javadoc>
      <text>* Return an Iterator over the set of keys and values that have been added.
 * Using the entry set to iterate is more efficient in the case where you
 * need to access respective counts as well as values, since it doesn't
 * require a "get" for every key...the value is provided in the Map.Entry.
 * <p>
 * If added values are integral (i.e., integers, longs, Integers, or Longs),
 * they are converted to Longs when they are added, so the values of the
 * map entries returned by the Iterator will in this case be Longs.</p></text>
      <return>entry set Iterator</return>
      <since>3.1</since>
    </javadoc>
    <method type="Iterator<Map.Entry<Comparable<?>,Long>>" name="entrySetIterator" startLine="214" endLine="216" />
    <javadoc>
      <text>* Returns the sum of all frequencies.</text>
      <return>the total frequency count.</return>
    </javadoc>
    <method type="long" name="getSumFreq" startLine="225" endLine="232">
      <declaration type="long" name="result" />
      <declaration type="Iterator<Long>" name="iterator" />
      <scope startLine="228" endLine="230" />
    </method>
    <javadoc>
      <text>* Returns the number of values = v.
 * Returns 0 if the value is not comparable.</text>
      <param>v the value to lookup.</param>
      <return>the frequency of v.</return>
    </javadoc>
    <method type="long" name="getCount" startLine="241" endLine="255">
      <scope startLine="242" endLine="244" />
      <declaration type="long" name="result" />
      <scope startLine="246" endLine="251">
        <declaration type="Long" name="count" />
        <scope startLine="248" endLine="250" />
        <comment>NOPMD</comment>
      </scope>
      <scope startLine="251" endLine="253">
        <comment>ignore and return 0 -- ClassCastException will be thrown if value is not comparable</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the number of values = v.</text>
      <param>v the value to lookup.</param>
      <return>the frequency of v.</return>
    </javadoc>
    <method type="long" name="getCount" startLine="263" endLine="265" />
    <javadoc>
      <text>* Returns the number of values = v.</text>
      <param>v the value to lookup.</param>
      <return>the frequency of v.</return>
    </javadoc>
    <method type="long" name="getCount" startLine="273" endLine="275" />
    <javadoc>
      <text>* Returns the number of values = v.</text>
      <param>v the value to lookup.</param>
      <return>the frequency of v.</return>
    </javadoc>
    <method type="long" name="getCount" startLine="283" endLine="285" />
    <javadoc>
      <text>* Returns the number of values in the frequency table.</text>
      <return>the number of unique values that have been added to the frequency table.</return>
      <see>#valuesIterator()</see>
    </javadoc>
    <method type="int" name="getUniqueCount" startLine="293" endLine="295" />
    <javadoc>
      <text>* Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.</p></text>
      <param>v the value to lookup</param>
      <return>the proportion of values equal to v</return>
    </javadoc>
    <method type="double" name="getPct" startLine="306" endLine="312">
      <declaration type="long" name="sumFreq" />
      <scope startLine="308" endLine="310" />
    </method>
    <javadoc>
      <text>* Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).</text>
      <param>v the value to lookup</param>
      <return>the proportion of values equal to v</return>
    </javadoc>
    <method type="double" name="getPct" startLine="321" endLine="323" />
    <javadoc>
      <text>* Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).</text>
      <param>v the value to lookup</param>
      <return>the proportion of values equal to v</return>
    </javadoc>
    <method type="double" name="getPct" startLine="332" endLine="334" />
    <javadoc>
      <text>* Returns the percentage of values that are equal to v
 * (as a proportion between 0 and 1).</text>
      <param>v the value to lookup</param>
      <return>the proportion of values equal to v</return>
    </javadoc>
    <method type="double" name="getPct" startLine="343" endLine="345" />
    <javadoc>
      <text>* Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p></text>
      <param>v the value to lookup.</param>
      <return>the proportion of values equal to v</return>
    </javadoc>
    <method type="long" name="getCumFreq" startLine="358" endLine="398">
      <scope startLine="359" endLine="361" />
      <scope startLine="362" endLine="364" />
      <declaration type="Comparator<Comparable<?>>" name="c" />
      <scope startLine="366" endLine="368" />
      <declaration type="long" name="result" />
      <scope startLine="371" endLine="376">
        <declaration type="Long" name="value" />
        <scope startLine="373" endLine="375" />
      </scope>
      <scope startLine="376" endLine="378">
        <comment>v is not comparable</comment>
      </scope>
      <scope startLine="380" endLine="382">
        <comment>v is comparable, but less than first value</comment>
      </scope>
      <scope startLine="384" endLine="386">
        <comment>v is comparable, but greater than the last value</comment>
      </scope>
      <declaration type="Iterator<Comparable<?>>" name="values" />
      <scope startLine="389" endLine="396">
        <declaration type="Comparable<?>" name="nextValue" />
        <scope startLine="391" endLine="393" />
        <scope startLine="393" endLine="395" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p></text>
      <param>v the value to lookup</param>
      <return>the proportion of values equal to v</return>
    </javadoc>
    <method type="long" name="getCumFreq" startLine="408" endLine="410" />
    <javadoc>
      <text>* Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p></text>
      <param>v the value to lookup</param>
      <return>the proportion of values equal to v</return>
    </javadoc>
    <method type="long" name="getCumFreq" startLine="420" endLine="422" />
    <javadoc>
      <text>* Returns the cumulative frequency of values less than or equal to v.
 * <p>
 * Returns 0 if v is not comparable to the values set.</p></text>
      <param>v the value to lookup</param>
      <return>the proportion of values equal to v</return>
    </javadoc>
    <method type="long" name="getCumFreq" startLine="432" endLine="434" />
    <javadoc>
      <text>* Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns <code>Double.NaN</code> if no values have been added.
 * Returns 0 if at least one value has been added, but v is not comparable
 * to the values set.</p></text>
      <param>v the value to lookup</param>
      <return>the proportion of values less than or equal to v</return>
    </javadoc>
    <method type="double" name="getCumPct" startLine="449" endLine="455">
      <declaration type="long" name="sumFreq" />
      <scope startLine="451" endLine="453" />
    </method>
    <javadoc>
      <text>* Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns 0 if v is not comparable to the values set.</p></text>
      <param>v the value to lookup</param>
      <return>the proportion of values less than or equal to v</return>
    </javadoc>
    <method type="double" name="getCumPct" startLine="466" endLine="468" />
    <javadoc>
      <text>* Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns 0 if v is not comparable to the values set.</p></text>
      <param>v the value to lookup</param>
      <return>the proportion of values less than or equal to v</return>
    </javadoc>
    <method type="double" name="getCumPct" startLine="479" endLine="481" />
    <javadoc>
      <text>* Returns the cumulative percentage of values less than or equal to v
 * (as a proportion between 0 and 1).
 * <p>
 * Returns 0 if v is not comparable to the values set.</p></text>
      <param>v the value to lookup</param>
      <return>the proportion of values less than or equal to v</return>
    </javadoc>
    <method type="double" name="getCumPct" startLine="492" endLine="494" />
    <javadoc>
      <text>* Merge another Frequency object's counts into this instance.
 * This Frequency's counts will be incremented (or set when not already set)
 * by the counts represented by other.</text>
      <param>other the other {@link Frequency} object to be merged</param>
      <throws>NullArgumentException if {@code other} is null</throws>
      <since>3.1</since>
    </javadoc>
    <method type="void" name="merge" startLine="507" endLine="515">
      <declaration type="Iterator<Map.Entry<Comparable<?>,Long>>" name="iter" />
      <scope startLine="511" endLine="514">
        <declaration type="Map.Entry<Comparable<?>,Long>" name="entry" />
      </scope>
    </method>
    <javadoc>
      <text>* Merge a {@link Collection} of {@link Frequency} objects into this instance.
 * This Frequency's counts will be incremented (or set when not already set)
 * by the counts represented by each of the others.</text>
      <param>others the other {@link Frequency} objects to be merged</param>
      <throws>NullArgumentException if the collection is null</throws>
      <since>3.1</since>
    </javadoc>
    <method type="void" name="merge" startLine="526" endLine="532">
      <scope startLine="529" endLine="531" />
    </method>
    <class name="NaturalComparator" startLine="536">
      <implements name="Comparator<Comparable<T>>" />
      <implements name="Serializable" />
      <javadoc>
        <text>* A Comparator that compares comparable objects using the
 * natural order.  Copied from Commons Collections ComparableComparator.</text>
      </javadoc>
      <javadoc>
        <text>* Serializable version identifier</text>
      </javadoc>
      <declaration type="long" name="serialVersionUID" />
      <javadoc>
        <text>* Compare the two {@link Comparable Comparable} arguments.
 * This method is equivalent to:
 * <pre>(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)</pre></text>
        <param>o1 the first object</param>
        <param>o2 the second object</param>
        <return>result of comparison</return>
        <throws>NullPointerException when <i>o1</i> is <code>null</code>,
 * or when <code>((Comparable)o1).compareTo(o2)</code> does</throws>
        <throws>ClassCastException when <i>o1</i> is not a {@link Comparable Comparable},
 * or when <code>((Comparable)o1).compareTo(o2)</code> does</throws>
      </javadoc>
      <method type="int" name="compare" startLine="559" endLine="561" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="int" name="hashCode" startLine="566" endLine="572">
        <declaration type="int" name="prime" />
        <declaration type="int" name="result" />
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="boolean" name="equals" startLine="576" endLine="592">
        <scope startLine="577" endLine="579" />
        <scope startLine="580" endLine="582" />
        <declaration type="Frequency" name="other" />
        <scope startLine="584" endLine="588">
          <scope startLine="585" endLine="587" />
        </scope>
        <scope startLine="588" endLine="590" />
      </method>
    </class>
    <comment>TODO is the cast OK?</comment>
    <comment>-------------------------------------------------------------------------</comment>
    <comment>-----------------------------------------------------------------------------------------</comment>
    <comment>----------------------------------------------------------------------------------------------</comment>
    <comment>----------------------------------------------------------------------------------------------</comment>
    <comment>----------------------------------------------------------------------------------------------</comment>
    <comment>cast to (T) may throw ClassCastException, see Javadoc</comment>
  </class>
</source>
