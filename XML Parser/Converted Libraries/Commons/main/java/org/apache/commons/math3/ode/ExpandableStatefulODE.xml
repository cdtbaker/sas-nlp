<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode">
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <class name="ExpandableStatefulODE" startLine="26">
    <javadoc>
      <text>* This class represents a combined set of first order differential equations,
 * with at least a primary set of equations expandable by some sets of secondary
 * equations.
 * <p>
 * One typical use case is the computation of the Jacobian matrix for some ODE.
 * In this case, the primary set of equations corresponds to the raw ODE, and we
 * add to this set another bunch of secondary equations which represent the Jacobian
 * matrix of the primary set.
 * </p>
 * <p>
 * We want the integrator to use <em>only</em> the primary set to estimate the
 * errors and hence the step sizes. It should <em>not</em> use the secondary
 * equations in this computation. The {@link AbstractIntegrator integrator} will
 * be able to know where the primary set ends and so where the secondary sets begin.
 * </p></text>
      <see>FirstOrderDifferentialEquations</see>
      <see>JacobianMatrices</see>
      <version>$Id: ExpandableStatefulODE.java 1463680 2013-04-02 19:02:55Z luc $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Primary differential equation.</text>
    </javadoc>
    <declaration type="FirstOrderDifferentialEquations" name="primary" />
    <javadoc>
      <text>* Mapper for primary equation.</text>
    </javadoc>
    <declaration type="EquationsMapper" name="primaryMapper" />
    <javadoc>
      <text>* Time.</text>
    </javadoc>
    <declaration type="double" name="time" />
    <javadoc>
      <text>* State.</text>
    </javadoc>
    <declaration type="double[]" name="primaryState" />
    <javadoc>
      <text>* State derivative.</text>
    </javadoc>
    <declaration type="double[]" name="primaryStateDot" />
    <javadoc>
      <text>* Components of the expandable ODE.</text>
    </javadoc>
    <declaration type="List<SecondaryComponent>" name="components" />
    <javadoc>
      <text>* Build an expandable set from its primary ODE set.</text>
      <param>primary the primary set of differential equations to be integrated.</param>
    </javadoc>
    <method type="constructor" name="ExpandableStatefulODE" startLine="73" endLine="81">
      <declaration type="int" name="n" />
    </method>
    <javadoc>
      <text>* Get the primary set of differential equations.</text>
      <return>primary set of differential equations</return>
    </javadoc>
    <method type="FirstOrderDifferentialEquations" name="getPrimary" startLine="86" endLine="88" />
    <javadoc>
      <text>* Return the dimension of the complete set of equations.
 * <p>
 * The complete set of equations correspond to the primary set plus all secondary sets.
 * </p></text>
      <return>dimension of the complete set of equations</return>
    </javadoc>
    <method type="int" name="getTotalDimension" startLine="96" endLine="105">
      <scope startLine="97" endLine="100">
        <comment>there are no secondary equations, the complete set is limited to the primary set</comment>
      </scope>
      <scope startLine="100" endLine="104">
        <declaration type="EquationsMapper" name="lastMapper" />
        <comment>there are secondary equations, the complete set ends after the last set</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Get the current time derivative of the complete state vector.</text>
      <param>t current value of the independent <I>time</I> variable</param>
      <param>y array containing the current value of the complete state vector</param>
      <param>yDot placeholder array where to put the time derivative of the complete state vector</param>
      <exception>MaxCountExceededException if the number of functions evaluations is exceeded</exception>
      <exception>DimensionMismatchException if arrays dimensions do not match equations settings</exception>
    </javadoc>
    <method type="void" name="computeDerivatives" startLine="115" endLine="131">
      <scope startLine="122" endLine="127" />
      <comment>compute derivatives of the primary equations</comment>
      <comment>Add contribution for secondary equations</comment>
    </method>
    <javadoc>
      <text>* Add a set of secondary equations to be integrated along with the primary set.</text>
      <param>secondary secondary equations set</param>
      <return>index of the secondary equation in the expanded state</return>
    </javadoc>
    <method type="int" name="addSecondaryEquations" startLine="137" endLine="153">
      <declaration type="int" name="firstIndex" />
      <scope startLine="140" endLine="144">
        <comment>lazy creation of the components list</comment>
      </scope>
      <scope startLine="144" endLine="147">
        <declaration type="SecondaryComponent" name="last" />
      </scope>
    </method>
    <javadoc>
      <text>* Get an equations mapper for the primary equations set.</text>
      <return>mapper for the primary set</return>
      <see>#getSecondaryMappers()</see>
    </javadoc>
    <method type="EquationsMapper" name="getPrimaryMapper" startLine="159" endLine="161" />
    <javadoc>
      <text>* Get the equations mappers for the secondary equations sets.</text>
      <return>equations mappers for the secondary equations sets</return>
      <see>#getPrimaryMapper()</see>
    </javadoc>
    <method type="EquationsMapper[]" name="getSecondaryMappers" startLine="167" endLine="173">
      <declaration type="EquationsMapper[]" name="mappers" />
      <scope startLine="169" endLine="171" />
    </method>
    <javadoc>
      <text>* Set current time.</text>
      <param>time current time</param>
    </javadoc>
    <method type="void" name="setTime" startLine="178" endLine="180" />
    <javadoc>
      <text>* Get current time.</text>
      <return>current time</return>
    </javadoc>
    <method type="double" name="getTime" startLine="185" endLine="187" />
    <javadoc>
      <text>* Set primary part of the current state.</text>
      <param>primaryState primary part of the current state</param>
      <throws>DimensionMismatchException if the dimension of the array does not
 * match the primary set</throws>
    </javadoc>
    <method type="void" name="setPrimaryState" startLine="194" endLine="204">
      <scope startLine="197" endLine="199" />
      <comment>safety checks</comment>
      <comment>set the data</comment>
    </method>
    <javadoc>
      <text>* Get primary part of the current state.</text>
      <return>primary part of the current state</return>
    </javadoc>
    <method type="double[]" name="getPrimaryState" startLine="209" endLine="211" />
    <javadoc>
      <text>* Get primary part of the current state derivative.</text>
      <return>primary part of the current state derivative</return>
    </javadoc>
    <method type="double[]" name="getPrimaryStateDot" startLine="216" endLine="218" />
    <javadoc>
      <text>* Set secondary part of the current state.</text>
      <param>index index of the part to set as returned by {@link #addSecondaryEquations(SecondaryEquations)}</param>
      <param>secondaryState secondary part of the current state</param>
      <throws>DimensionMismatchException if the dimension of the partial state does not
 * match the selected equations set dimension</throws>
    </javadoc>
    <method type="void" name="setSecondaryState" startLine="228" endLine="241">
      <declaration type="double[]" name="localArray" />
      <scope startLine="234" endLine="236" />
      <comment>get either the secondary state</comment>
      <comment>safety checks</comment>
      <comment>set the data</comment>
    </method>
    <javadoc>
      <text>* Get secondary part of the current state.</text>
      <param>index index of the part to set as returned by {@link #addSecondaryEquations(SecondaryEquations)}</param>
      <return>secondary part of the current state</return>
    </javadoc>
    <method type="double[]" name="getSecondaryState" startLine="248" endLine="250" />
    <javadoc>
      <text>* Get secondary part of the current state derivative.</text>
      <param>index index of the part to set as returned by {@link #addSecondaryEquations(SecondaryEquations)}</param>
      <return>secondary part of the current state derivative</return>
    </javadoc>
    <method type="double[]" name="getSecondaryStateDot" startLine="257" endLine="259" />
    <javadoc>
      <text>* Set the complete current state.</text>
      <param>completeState complete current state to copy data from</param>
      <throws>DimensionMismatchException if the dimension of the complete state does not
 * match the complete equations sets dimension</throws>
    </javadoc>
    <method type="void" name="setCompleteState" startLine="267" endLine="280">
      <scope startLine="270" endLine="272" />
      <scope startLine="276" endLine="278" />
      <comment>safety checks</comment>
      <comment>set the data</comment>
    </method>
    <javadoc>
      <text>* Get the complete current state.</text>
      <return>complete current state</return>
      <throws>DimensionMismatchException if the dimension of the complete state does not
 * match the complete equations sets dimension</throws>
    </javadoc>
    <method type="double[]" name="getCompleteState" startLine="287" endLine="300">
      <declaration type="double[]" name="completeState" />
      <scope startLine="294" endLine="296" />
      <comment>allocate complete array</comment>
      <comment>set the data</comment>
    </method>
    <class name="SecondaryComponent" startLine="302">
      <javadoc>
        <text>* Components of the compound stateful ODE.</text>
      </javadoc>
      <javadoc>
        <text>* Secondary differential equation.</text>
      </javadoc>
      <declaration type="SecondaryEquations" name="equation" />
      <javadoc>
        <text>* Mapper between local and complete arrays.</text>
      </javadoc>
      <declaration type="EquationsMapper" name="mapper" />
      <javadoc>
        <text>* State.</text>
      </javadoc>
      <declaration type="double[]" name="state" />
      <javadoc>
        <text>* State derivative.</text>
      </javadoc>
      <declaration type="double[]" name="stateDot" />
      <javadoc>
        <text>* Simple constructor.</text>
        <param>equation secondary differential equation</param>
        <param>firstIndex index to use for the first element in the complete arrays</param>
      </javadoc>
      <method type="constructor" name="SecondaryComponent" startLine="321" endLine="327">
        <declaration type="int" name="n" />
      </method>
    </class>
  </class>
</source>
