<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.solvers">
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.exception.NoBracketingException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <class name="SecantSolver" extends="AbstractUnivariateSolver" startLine="24">
    <javadoc>
      <text>* Implements the <em>Secant</em> method for root-finding (approximating a
 * zero of a univariate real function). The solution that is maintained is
 * not bracketed, and as such convergence is not guaranteed.
 * <p>Implementation based on the following article: M. Dowell and P. Jarratt,
 * <em>A modified regula falsi method for computing the root of an
 * equation</em>, BIT Numerical Mathematics, volume 11, number 2,
 * pages 168-174, Springer, 1971.</p>
 * <p>Note that since release 3.0 this class implements the actual
 * <em>Secant</em> algorithm, and not a modified one. As such, the 3.0 version
 * is not backwards compatible with previous versions. To use an algorithm
 * similar to the pre-3.0 releases, use the{@link IllinoisSolver <em>Illinois</em>} algorithm or the{@link PegasusSolver <em>Pegasus</em>} algorithm.</p></text>
      <version>$Id: SecantSolver.java 1379560 2012-08-31 19:40:30Z erans $</version>
    </javadoc>
    <javadoc>
      <text>* Default absolute accuracy.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_ABSOLUTE_ACCURACY" />
    <javadoc>
      <text>* Construct a solver with default accuracy (1e-6).</text>
    </javadoc>
    <method type="constructor" name="SecantSolver" startLine="49" endLine="51" />
    <javadoc>
      <text>* Construct a solver.</text>
      <param>absoluteAccuracy absolute accuracy</param>
    </javadoc>
    <method type="constructor" name="SecantSolver" startLine="58" endLine="60" />
    <javadoc>
      <text>* Construct a solver.</text>
      <param>relativeAccuracy relative accuracy</param>
      <param>absoluteAccuracy absolute accuracy</param>
    </javadoc>
    <method type="constructor" name="SecantSolver" startLine="69" endLine="71" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="doSolve" startLine="77" endLine="134">
      <declaration type="double" name="x0" />
      <declaration type="double" name="x1" />
      <declaration type="double" name="f0" />
      <declaration type="double" name="f1" />
      <scope startLine="87" endLine="89" />
      <scope startLine="90" endLine="92" />
      <declaration type="double" name="ftol" />
      <declaration type="double" name="atol" />
      <declaration type="double" name="rtol" />
      <scope startLine="103" endLine="133">
        <declaration type="double" name="x" />
        <declaration type="double" name="fx" />
        <scope startLine="111" endLine="113" />
        <scope startLine="124" endLine="126" />
        <scope startLine="130" endLine="132" />
        <comment>Calculate the next approximation.</comment>
        <comment>If the new approximation is the exact root, return it. Since</comment>
        <comment>this is not an under-approximation or an over-approximation,</comment>
        <comment>we can return it regardless of the allowed solutions.</comment>
        <comment>Update the bounds with the new approximation.</comment>
        <comment>If the function value of the last approximation is too small,</comment>
        <comment>given the function value accuracy, then we can't get closer to</comment>
        <comment>the root than we already are.</comment>
        <comment>If the current interval is within the given accuracies, we</comment>
        <comment>are satisfied with the current approximation.</comment>
      </scope>
      <comment>Get initial solution</comment>
      <comment>If one of the bounds is the exact root, return it. Since these are</comment>
      <comment>not under-approximations or over-approximations, we can return them</comment>
      <comment>regardless of the allowed solutions.</comment>
      <comment>Verify bracketing of initial solution.</comment>
      <comment>Get accuracies.</comment>
      <comment>Keep finding better approximations.</comment>
    </method>
  </class>
</source>
