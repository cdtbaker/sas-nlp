<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.linear">
  <import name="java.util.Collection" />
  <import name="org.apache.commons.math3.exception.MathIllegalStateException" />
  <import name="org.apache.commons.math3.optimization.GoalType" />
  <import name="org.apache.commons.math3.optimization.PointValuePair" />
  <interface name="LinearOptimizer" startLine="26">
    <javadoc>
      <text>* This interface represents an optimization algorithm for linear problems.
 * <p>Optimization algorithms find the input point set that either {@link GoalTypemaximize or minimize} an objective function. In the linear case the form of
 * the function is restricted to
 * <pre>
 * c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> = v
 * </pre>
 * and there may be linear constraints too, of one of the forms:
 * <ul>
 * <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> = v</li>
 * <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> &lt;= v</li>
 * <li>c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> >= v</li>
 * <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> =
 * r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
 * <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> &lt;=
 * r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
 * <li>l<sub>1</sub>x<sub>1</sub> + ... l<sub>n</sub>x<sub>n</sub> + l<sub>cst</sub> >=
 * r<sub>1</sub>x<sub>1</sub> + ... r<sub>n</sub>x<sub>n</sub> + r<sub>cst</sub></li>
 * </ul>
 * where the c<sub>i</sub>, l<sub>i</sub> or r<sub>i</sub> are the coefficients of
 * the constraints, the x<sub>i</sub> are the coordinates of the current point and
 * v is the value of the constraint.
 * </p></text>
      <version>$Id: LinearOptimizer.java 1422230 2012-12-15 12:11:13Z erans $</version>
      <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
      <since>2.0</since>
    </javadoc>
    <method name="setMaxIterations" type="void" startLine="57" endLine="61" />
    <javadoc>
      <text>* Set the maximal number of iterations of the algorithm.</text>
      <param>maxIterations maximal number of function calls</param>
    </javadoc>
    <method name="getMaxIterations" type="int" startLine="63" endLine="67" />
    <javadoc>
      <text>* Get the maximal number of iterations of the algorithm.</text>
      <return>maximal number of iterations</return>
    </javadoc>
    <method name="getIterations" type="int" startLine="69" endLine="78" />
    <javadoc>
      <text>* Get the number of iterations realized by the algorithm.
 * <p>
 * The number of evaluations corresponds to the last call to the{@link #optimize(LinearObjectiveFunction,Collection,GoalType,boolean) optimize}method. It is 0 if the method has not been called yet.
 * </p></text>
      <return>number of iterations</return>
    </javadoc>
    <method name="optimize" type="PointValuePair" startLine="80" endLine="91" />
    <javadoc>
      <text>* Optimizes an objective function.</text>
      <param>f linear objective function</param>
      <param>constraints linear constraints</param>
      <param>goalType type of optimization goal: either {@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}</param>
      <param>restrictToNonNegative whether to restrict the variables to non-negative values</param>
      <return>point/value pair giving the optimal value for objective function</return>
      <exception>MathIllegalStateException if no solution fulfilling the constraints
 * can be found in the allowed number of iterations</exception>
    </javadoc>
  </interface>
</source>
