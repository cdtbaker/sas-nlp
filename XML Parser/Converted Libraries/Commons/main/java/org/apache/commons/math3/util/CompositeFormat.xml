<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.util">
  <import name="java.text.FieldPosition" />
  <import name="java.text.NumberFormat" />
  <import name="java.text.ParsePosition" />
  <import name="java.util.Locale" />
  <class name="CompositeFormat" startLine="24">
    <javadoc>
      <text>* Base class for formatters of composite objects (complex numbers, vectors ...).</text>
      <version>$Id: CompositeFormat.java 1462503 2013-03-29 15:48:27Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* Class contains only static methods.</text>
    </javadoc>
    <method type="constructor" name="CompositeFormat" startLine="34" endLine="34" />
    <javadoc>
      <text>* Create a default number format.  The default number format is based on{@link NumberFormat#getInstance()} with the only customizing that the
 * maximum number of fraction digits is set to 10.</text>
      <return>the default number format.</return>
    </javadoc>
    <method type="NumberFormat" name="getDefaultNumberFormat" startLine="42" endLine="44" />
    <javadoc>
      <text>* Create a default number format.  The default number format is based on{@link NumberFormat#getInstance(java.util.Locale)} with the only
 * customizing that the maximum number of fraction digits is set to 10.</text>
      <param>locale the specific locale used by the format.</param>
      <return>the default number format specific to the given locale.</return>
    </javadoc>
    <method type="NumberFormat" name="getDefaultNumberFormat" startLine="53" endLine="57">
      <declaration type="NumberFormat" name="nf" />
    </method>
    <javadoc>
      <text>* Parses <code>source</code> until a non-whitespace character is found.</text>
      <param>source the string to parse</param>
      <param>pos input/output parsing parameter.  On output, <code>pos</code>
 * holds the index of the next non-whitespace character.</param>
    </javadoc>
    <method type="void" name="parseAndIgnoreWhitespace" startLine="67" endLine="70" />
    <javadoc>
      <text>* Parses <code>source</code> until a non-whitespace character is found.</text>
      <param>source the string to parse</param>
      <param>pos input/output parsing parameter.</param>
      <return>the first non-whitespace character.</return>
    </javadoc>
    <method type="char" name="parseNextCharacter" startLine="80" endLine="98">
      <declaration type="int" name="index" />
      <declaration type="int" name="n" />
      <declaration type="char" name="ret" />
      <scope startLine="85" endLine="95">
        <declaration type="char" name="c" />
        <scope startLine="87" endLine="89" />
        <scope startLine="92" endLine="94" />
      </scope>
    </method>
    <javadoc>
      <text>* Parses <code>source</code> for special double values.  These values
 * include Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY.</text>
      <param>source the string to parse</param>
      <param>value the special value to parse.</param>
      <param>pos input/output parsing parameter.</param>
      <return>the special number.</return>
    </javadoc>
    <method type="Number" name="parseNumber" startLine="110" endLine="128">
      <declaration type="Number" name="ret" />
      <declaration type="StringBuilder" name="sb" />
      <declaration type="int" name="n" />
      <declaration type="int" name="startIndex" />
      <declaration type="int" name="endIndex" />
      <scope startLine="122" endLine="125" />
    </method>
    <javadoc>
      <text>* Parses <code>source</code> for a number.  This method can parse normal,
 * numeric values as well as special values.  These special values include
 * Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY.</text>
      <param>source the string to parse</param>
      <param>format the number format used to parse normal, numeric values.</param>
      <param>pos input/output parsing parameter.</param>
      <return>the parsed number.</return>
    </javadoc>
    <method type="Number" name="parseNumber" startLine="141" endLine="161">
      <declaration type="int" name="startIndex" />
      <declaration type="Number" name="number" />
      <declaration type="int" name="endIndex" />
      <scope startLine="147" endLine="158">
        <declaration type="double[]" name="special" />
        <scope startLine="152" endLine="157">
          <scope startLine="154" endLine="156" />
        </scope>
        <comment>try parsing special numbers</comment>
      </scope>
      <comment>check for error parsing number</comment>
    </method>
    <javadoc>
      <text>* Parse <code>source</code> for an expected fixed string.</text>
      <param>source the string to parse</param>
      <param>expected expected string</param>
      <param>pos input/output parsing parameter.</param>
      <return>true if the expected string was there</return>
    </javadoc>
    <method type="boolean" name="parseFixedstring" startLine="172" endLine="188">
      <declaration type="int" name="startIndex" />
      <declaration type="int" name="endIndex" />
      <scope startLine="178" endLine="183">
        <comment>set index back to start, error index should be the start index</comment>
      </scope>
      <comment>the string was here</comment>
    </method>
    <javadoc>
      <text>* Formats a double value to produce a string.  In general, the value is
 * formatted using the formatting rules of <code>format</code>.  There are
 * three exceptions to this:
 * <ol>
 * <li>NaN is formatted as '(NaN)'</li>
 * <li>Positive infinity is formatted as '(Infinity)'</li>
 * <li>Negative infinity is formatted as '(-Infinity)'</li>
 * </ol></text>
      <param>value the double to format.</param>
      <param>format the format used.</param>
      <param>toAppendTo where the text is to be appended</param>
      <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
      <return>the value passed in as toAppendTo.</return>
    </javadoc>
    <method type="StringBuffer" name="formatDouble" startLine="209" endLine="218">
      <scope startLine="210" endLine="214" />
      <scope startLine="214" endLine="216" />
    </method>
  </class>
</source>
