<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.random">
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="StableRandomGenerator" startLine="24">
    <implements name="NormalizedRandomGenerator" />
    <javadoc>
      <text>* <p>This class provides a stable normalized random generator. It samples from a stable
 * distribution with location parameter 0 and scale 1.</p>
 * <p>The implementation uses the Chambers-Mallows-Stuck method as described in
 * <i>Handbook of computational statistics: concepts and methods</i> by
 * James E. Gentle, Wolfgang H&auml;rdle, Yuichi Mori.</p></text>
      <version>$Id: StableRandomGenerator.java 1394763 2012-10-05 19:54:00Z psteitz $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Underlying generator.</text>
    </javadoc>
    <declaration type="RandomGenerator" name="generator" />
    <javadoc>
      <text>* stability parameter</text>
    </javadoc>
    <declaration type="double" name="alpha" />
    <javadoc>
      <text>* skewness parameter</text>
    </javadoc>
    <declaration type="double" name="beta" />
    <javadoc>
      <text>* cache of expression value used in generation</text>
    </javadoc>
    <declaration type="double" name="zeta" />
    <javadoc>
      <text>* Create a new generator.</text>
      <param>generator underlying random generator to use</param>
      <param>alpha Stability parameter. Must be in range (0, 2]</param>
      <param>beta Skewness parameter. Must be in range [-1, 1]</param>
      <throws>NullArgumentException if generator is null</throws>
      <throws>OutOfRangeException if {@code alpha <= 0} or {@code alpha > 2}or {@code beta < -1} or {@code beta > 1}</throws>
    </javadoc>
    <method type="constructor" name="StableRandomGenerator" startLine="60" endLine="83">
      <scope startLine="61" endLine="63" />
      <scope startLine="65" endLine="68" />
      <scope startLine="70" endLine="73" />
      <scope startLine="78" endLine="80" />
      <scope startLine="80" endLine="82" />
    </method>
    <javadoc>
      <text>* Generate a random scalar with zero location and unit scale.</text>
      <return>a random scalar with zero location and unit scale</return>
    </javadoc>
    <method type="double" name="nextNormalizedDouble" startLine="90" endLine="134">
      <declaration type="double" name="omega" />
      <declaration type="double" name="phi" />
      <scope startLine="96" endLine="98" />
      <declaration type="double" name="x" />
      <scope startLine="103" endLine="113">
        <scope startLine="105" endLine="107" />
        <scope startLine="107" endLine="112" />
        <comment>Cauchy distribution case</comment>
      </scope>
      <scope startLine="113" endLine="132">
        <declaration type="double" name="cosPhi" />
        <scope startLine="117" endLine="123">
          <declaration type="double" name="alphaPhi" />
          <declaration type="double" name="invAlphaPhi" />
        </scope>
        <scope startLine="123" endLine="131">
          <declaration type="double" name="betaPhi" />
          <scope startLine="128" endLine="130" />
        </scope>
        <comment>Generic stable distribution</comment>
        <comment>to avoid rounding errors around alpha = 1</comment>
      </scope>
      <comment>we need 2 uniform random numbers to calculate omega and phi</comment>
      <comment>Normal distribution case (Box-Muller algorithm)</comment>
      <comment>when beta = 0, zeta is zero as well</comment>
      <comment>Thus we can exclude it from the formula</comment>
    </method>
  </class>
</source>
