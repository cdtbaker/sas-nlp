<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.nonlinear.vector">
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.analysis.MultivariateVectorFunction" />
  <import name="org.apache.commons.math3.optim.OptimizationData" />
  <import name="org.apache.commons.math3.optim.BaseMultivariateOptimizer" />
  <import name="org.apache.commons.math3.optim.ConvergenceChecker" />
  <import name="org.apache.commons.math3.optim.PointVectorValuePair" />
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <class name="MultivariateVectorOptimizer" extends="BaseMultivariateOptimizer<PointVectorValuePair>" startLine="29">
    <javadoc>
      <text>* Base class for a multivariate vector function optimizer.</text>
      <version>$Id: MultivariateVectorOptimizer.java 1443444 2013-02-07 12:41:36Z erans $</version>
      <since>3.1</since>
    </javadoc>
    <javadoc>
      <text>* Target values for the model function at optimum.</text>
    </javadoc>
    <declaration type="double[]" name="target" />
    <javadoc>
      <text>* Weight matrix.</text>
    </javadoc>
    <declaration type="RealMatrix" name="weightMatrix" />
    <javadoc>
      <text>* Model function.</text>
    </javadoc>
    <declaration type="MultivariateVectorFunction" name="model" />
    <javadoc>
      <param>checker Convergence checker.</param>
    </javadoc>
    <method type="constructor" name="MultivariateVectorOptimizer" startLine="47" endLine="49" />
    <javadoc>
      <text>* Computes the objective function value.
 * This method <em>must</em> be called by subclasses to enforce the
 * evaluation counter limit.</text>
      <param>params Point at which the objective function must be evaluated.</param>
      <return>the objective function value at the specified point.</return>
      <throws>TooManyEvaluationsException if the maximal number of evaluations
 * (of the model vector function) is exceeded.</throws>
    </javadoc>
    <method type="double[]" name="computeObjectiveValue" startLine="61" endLine="64" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <param>optData Optimization data. In addition to those documented in{@link BaseMultivariateOptimizer#parseOptimizationData(OptimizationData[])BaseMultivariateOptimizer}, this method will register the following data:
 * <ul>
 * <li>{@link Target}</li>
 * <li>{@link Weight}</li>
 * <li>{@link ModelFunction}</li>
 * </ul></param>
      <return>{@inheritDoc}</return>
      <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
      <throws>DimensionMismatchException if the initial guess, target, and weight
 * arguments have inconsistent dimensions.</throws>
    </javadoc>
    <method type="PointVectorValuePair" name="optimize" startLine="85" endLine="88">
      <comment>Set up base class and perform computation.</comment>
    </method>
    <javadoc>
      <text>* Gets the weight matrix of the observations.</text>
      <return>the weight matrix.</return>
    </javadoc>
    <method type="RealMatrix" name="getWeight" startLine="95" endLine="97" />
    <javadoc>
      <text>* Gets the observed values to be matched by the objective vector
 * function.</text>
      <return>the target values.</return>
    </javadoc>
    <method type="double[]" name="getTarget" startLine="104" endLine="106" />
    <javadoc>
      <text>* Gets the number of observed values.</text>
      <return>the length of the target vector.</return>
    </javadoc>
    <method type="int" name="getTargetSize" startLine="113" endLine="115" />
    <javadoc>
      <text>* Scans the list of (required and optional) optimization data that
 * characterize the problem.</text>
      <param>optData Optimization data. The following data will be looked for:
 * <ul>
 * <li>{@link Target}</li>
 * <li>{@link Weight}</li>
 * <li>{@link ModelFunction}</li>
 * </ul></param>
    </javadoc>
    <method type="void" name="parseOptimizationData" startLine="129" endLine="152">
      <scope startLine="135" endLine="148">
        <scope startLine="136" endLine="139" />
        <scope startLine="140" endLine="143" />
        <scope startLine="144" endLine="147" />
      </scope>
      <comment>Allow base class to register its own data.</comment>
      <comment>The existing values (as set by the previous call) are reused if</comment>
      <comment>not provided in the argument list.</comment>
      <comment>Check input consistency.</comment>
    </method>
    <javadoc>
      <text>* Check parameters consistency.</text>
      <throws>DimensionMismatchException if {@link #target} and{@link #weightMatrix} have inconsistent dimensions.</throws>
    </javadoc>
    <method type="void" name="checkParameters" startLine="160" endLine="165">
      <scope startLine="161" endLine="164" />
    </method>
  </class>
</source>
