<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.Field" />
  <import name="org.apache.commons.math3.FieldElement" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <import name="org.apache.commons.math3.util.OpenIntToFieldHashMap" />
  <class name="SparseFieldVector" startLine="33">
    <implements name="FieldVector<T>" />
    <implements name="Serializable" />
    <javadoc>
      <text>* This class implements the {@link FieldVector} interface with a {@link OpenIntToFieldHashMap} backing store.</text>
      <param><T>
 *  the type of the field elements</param>
      <version>$Id: SparseFieldVector.java 1455233 2013-03-11 17:00:41Z luc $</version>
      <since>2.0</since>
      <deprecated>As of version 3.1, this class is deprecated, for reasons exposed
 * in this JIRA
 * <a href="https://issues.apache.org/jira/browse/MATH-870">ticket</a>. This
 * class will be removed in version 4.0.</deprecated>
    </javadoc>
    <javadoc>
      <text>* Serialization identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Field to which the elements belong.</text>
    </javadoc>
    <declaration type="Field<T>" name="field" />
    <javadoc>
      <text>* Entries of the vector.</text>
    </javadoc>
    <declaration type="OpenIntToFieldHashMap<T>" name="entries" />
    <javadoc>
      <text>* Dimension of the vector.</text>
    </javadoc>
    <declaration type="int" name="virtualSize" />
    <javadoc>
      <text>* Build a 0-length vector.
 * Zero-length vectors may be used to initialize construction of vectors
 * by data gathering. We start with zero-length and use either the {@link #SparseFieldVector(SparseFieldVector,int)} constructor
 * or one of the {@code append} method ({@link #append(FieldVector)} or{@link #append(SparseFieldVector)}) to gather data into this vector.</text>
      <param>field Field to which the elements belong.</param>
    </javadoc>
    <method type="constructor" name="SparseFieldVector" startLine="64" endLine="66" />
    <javadoc>
      <text>* Construct a vector of zeroes.</text>
      <param>field Field to which the elements belong.</param>
      <param>dimension Size of the vector.</param>
    </javadoc>
    <method type="constructor" name="SparseFieldVector" startLine="75" endLine="79" />
    <javadoc>
      <text>* Build a resized vector, for use with append.</text>
      <param>v Original vector</param>
      <param>resize Amount to add.</param>
    </javadoc>
    <method type="constructor" name="SparseFieldVector" startLine="87" endLine="91" />
    <javadoc>
      <text>* Build a vector with known the sparseness (for advanced use only).</text>
      <param>field Field to which the elements belong.</param>
      <param>dimension Size of the vector.</param>
      <param>expectedSize Expected number of non-zero entries.</param>
    </javadoc>
    <method type="constructor" name="SparseFieldVector" startLine="101" endLine="105" />
    <javadoc>
      <text>* Create from a Field array.
 * Only non-zero entries will be stored.</text>
      <param>field Field to which the elements belong.</param>
      <param>values Set of values to create from.</param>
      <exception>NullArgumentException if values is null</exception>
    </javadoc>
    <method type="constructor" name="SparseFieldVector" startLine="115" endLine="124">
      <scope startLine="120" endLine="123">
        <declaration type="T" name="value" />
      </scope>
    </method>
    <javadoc>
      <text>* Copy constructor.</text>
      <param>v Instance to copy.</param>
    </javadoc>
    <method type="constructor" name="SparseFieldVector" startLine="131" endLine="135" />
    <javadoc>
      <text>* Get the entries of this instance.</text>
      <return>the entries of this instance</return>
    </javadoc>
    <method type="OpenIntToFieldHashMap<T>" name="getEntries" startLine="142" endLine="144" />
    <javadoc>
      <text>* Optimized method to add sparse vectors.</text>
      <param>v Vector to add.</param>
      <return>{@code this + v}.</return>
      <throws>DimensionMismatchException if {@code v} is not the same size as{@code this}.</throws>
    </javadoc>
    <method type="FieldVector<T>" name="add" startLine="155" endLine="171">
      <declaration type="SparseFieldVector<T>" name="res" />
      <declaration type="OpenIntToFieldHashMap<T>.Iterator" name="iter" />
      <scope startLine="159" endLine="168">
        <declaration type="int" name="key" />
        <declaration type="T" name="value" />
        <scope startLine="163" endLine="165" />
        <scope startLine="165" endLine="167" />
      </scope>
    </method>
    <javadoc>
      <text>* Construct a vector by appending a vector to this vector.</text>
      <param>v Vector to append to this one.</param>
      <return>a new vector.</return>
    </javadoc>
    <method type="FieldVector<T>" name="append" startLine="179" endLine="187">
      <declaration type="SparseFieldVector<T>" name="res" />
      <declaration type="OpenIntToFieldHashMap<T>.Iterator" name="iter" />
      <scope startLine="182" endLine="185" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="append" startLine="190" endLine="201">
      <scope startLine="191" endLine="193" />
      <scope startLine="193" endLine="200">
        <declaration type="int" name="n" />
        <declaration type="FieldVector<T>" name="res" />
        <scope startLine="196" endLine="198" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <exception>NullArgumentException if d is null</exception>
    </javadoc>
    <method type="FieldVector<T>" name="append" startLine="206" endLine="211">
      <declaration type="FieldVector<T>" name="res" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="copy" startLine="214" endLine="216" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="dotProduct" startLine="219" endLine="228">
      <declaration type="T" name="res" />
      <declaration type="OpenIntToFieldHashMap<T>.Iterator" name="iter" />
      <scope startLine="223" endLine="226" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="ebeDivide" startLine="232" endLine="241">
      <declaration type="SparseFieldVector<T>" name="res" />
      <declaration type="OpenIntToFieldHashMap<T>.Iterator" name="iter" />
      <scope startLine="236" endLine="239" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="ebeMultiply" startLine="245" endLine="254">
      <declaration type="SparseFieldVector<T>" name="res" />
      <declaration type="OpenIntToFieldHashMap<T>.Iterator" name="iter" />
      <scope startLine="249" endLine="252" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <deprecated>as of 3.1, to be removed in 4.0. Please use the {@link #toArray()} method instead.</deprecated>
    </javadoc>
    <method type="T[]" name="getData" startLine="262" endLine="264" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getDimension" startLine="267" endLine="269" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="getEntry" startLine="272" endLine="275" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Field<T>" name="getField" startLine="278" endLine="280" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="getSubVector" startLine="284" endLine="301">
      <scope startLine="285" endLine="287" />
      <declaration type="SparseFieldVector<T>" name="res" />
      <declaration type="int" name="end" />
      <declaration type="OpenIntToFieldHashMap<T>.Iterator" name="iter" />
      <scope startLine="293" endLine="299">
        <declaration type="int" name="key" />
        <scope startLine="296" endLine="298" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapAdd" startLine="304" endLine="306" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapAddToSelf" startLine="309" endLine="314">
      <scope startLine="310" endLine="312" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapDivide" startLine="318" endLine="320" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapDivideToSelf" startLine="324" endLine="331">
      <declaration type="OpenIntToFieldHashMap<T>.Iterator" name="iter" />
      <scope startLine="326" endLine="329" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapInv" startLine="334" endLine="336" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapInvToSelf" startLine="339" endLine="344">
      <scope startLine="340" endLine="342" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapMultiply" startLine="347" endLine="349" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapMultiplyToSelf" startLine="352" endLine="359">
      <declaration type="OpenIntToFieldHashMap<T>.Iterator" name="iter" />
      <scope startLine="354" endLine="357" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapSubtract" startLine="362" endLine="364" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapSubtractToSelf" startLine="367" endLine="369" />
    <javadoc>
      <text>* Optimized method to compute outer product when both vectors are sparse.</text>
      <param>v vector with which outer product should be computed</param>
      <return>the matrix outer product between instance and v</return>
    </javadoc>
    <method type="FieldMatrix<T>" name="outerProduct" startLine="376" endLine="389">
      <declaration type="int" name="n" />
      <declaration type="SparseFieldMatrix<T>" name="res" />
      <declaration type="OpenIntToFieldHashMap<T>.Iterator" name="iter" />
      <scope startLine="380" endLine="387">
        <declaration type="OpenIntToFieldHashMap<T>.Iterator" name="iter2" />
        <scope startLine="383" endLine="386" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldMatrix<T>" name="outerProduct" startLine="392" endLine="409">
      <scope startLine="393" endLine="395" />
      <scope startLine="395" endLine="408">
        <declaration type="int" name="n" />
        <declaration type="FieldMatrix<T>" name="res" />
        <declaration type="OpenIntToFieldHashMap<T>.Iterator" name="iter" />
        <scope startLine="399" endLine="406">
          <declaration type="int" name="row" />
          <declaration type="FieldElement<T>" name="value" />
          <scope startLine="403" endLine="405" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="projection" startLine="413" endLine="416" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <exception>NullArgumentException if value is null</exception>
    </javadoc>
    <method type="void" name="set" startLine="421" endLine="426">
      <scope startLine="423" endLine="425" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <exception>NullArgumentException if value is null</exception>
    </javadoc>
    <method type="void" name="setEntry" startLine="431" endLine="435" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setSubVector" startLine="439" endLine="446">
      <declaration type="int" name="n" />
      <scope startLine="443" endLine="445" />
    </method>
    <javadoc>
      <text>* Optimized method to compute {@code this} minus {@code v}.</text>
      <param>v vector to be subtracted</param>
      <return>{@code this - v}</return>
      <throws>DimensionMismatchException if {@code v} is not the same size as{@code this}.</throws>
    </javadoc>
    <method type="SparseFieldVector<T>" name="subtract" startLine="456" endLine="470">
      <declaration type="SparseFieldVector<T>" name="res" />
      <declaration type="OpenIntToFieldHashMap<T>.Iterator" name="iter" />
      <scope startLine="460" endLine="468">
        <declaration type="int" name="key" />
        <scope startLine="463" endLine="465" />
        <scope startLine="465" endLine="467" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="subtract" startLine="474" endLine="490">
      <scope startLine="475" endLine="477" />
      <scope startLine="477" endLine="489">
        <declaration type="int" name="n" />
        <declaration type="SparseFieldVector<T>" name="res" />
        <scope startLine="481" endLine="487">
          <scope startLine="482" endLine="484" />
          <scope startLine="484" endLine="486" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T[]" name="toArray" startLine="493" endLine="501">
      <declaration type="T[]" name="res" />
      <declaration type="OpenIntToFieldHashMap<T>.Iterator" name="iter" />
      <scope startLine="496" endLine="499" />
    </method>
    <javadoc>
      <text>* Check whether an index is valid.</text>
      <param>index Index to check.</param>
      <throws>OutOfRangeException if the index is not valid.</throws>
    </javadoc>
    <method type="void" name="checkIndex" startLine="509" endLine="513">
      <scope startLine="510" endLine="512" />
    </method>
    <javadoc>
      <text>* Check if instance dimension is equal to some expected value.</text>
      <param>n Expected dimension.</param>
      <throws>DimensionMismatchException if the dimensions do not match.</throws>
    </javadoc>
    <method type="void" name="checkVectorDimensions" startLine="522" endLine="526">
      <scope startLine="523" endLine="525" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="add" startLine="529" endLine="542">
      <scope startLine="530" endLine="532" />
      <scope startLine="532" endLine="541">
        <declaration type="int" name="n" />
        <declaration type="SparseFieldVector<T>" name="res" />
        <scope startLine="537" endLine="539" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="hashCode" startLine="546" endLine="558">
      <declaration type="int" name="prime" />
      <declaration type="int" name="result" />
      <declaration type="OpenIntToFieldHashMap<T>.Iterator" name="iter" />
      <scope startLine="552" endLine="556">
        <declaration type="int" name="temp" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="equals" startLine="563" endLine="604">
      <scope startLine="565" endLine="567" />
      <scope startLine="569" endLine="571" />
      <declaration type="SparseFieldVector<T>" name="other" />
      <scope startLine="576" endLine="580">
        <scope startLine="577" endLine="579" />
      </scope>
      <scope startLine="580" endLine="582" />
      <scope startLine="583" endLine="585" />
      <declaration type="OpenIntToFieldHashMap<T>.Iterator" name="iter" />
      <scope startLine="588" endLine="594">
        <declaration type="T" name="test" />
        <scope startLine="591" endLine="593" />
      </scope>
      <scope startLine="596" endLine="602">
        <declaration type="T" name="test" />
        <scope startLine="599" endLine="601" />
      </scope>
      <comment>OK, because "else if" check below ensures that</comment>
      <comment>other must be the same type as this</comment>
    </method>
  </class>
</source>
