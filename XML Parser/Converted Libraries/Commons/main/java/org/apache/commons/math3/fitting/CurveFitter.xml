<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.fitting">
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.analysis.MultivariateVectorFunction" />
  <import name="org.apache.commons.math3.analysis.MultivariateMatrixFunction" />
  <import name="org.apache.commons.math3.analysis.ParametricUnivariateFunction" />
  <import name="org.apache.commons.math3.optim.MaxEval" />
  <import name="org.apache.commons.math3.optim.InitialGuess" />
  <import name="org.apache.commons.math3.optim.PointVectorValuePair" />
  <import name="org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer" />
  <import name="org.apache.commons.math3.optim.nonlinear.vector.ModelFunction" />
  <import name="org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian" />
  <import name="org.apache.commons.math3.optim.nonlinear.vector.Target" />
  <import name="org.apache.commons.math3.optim.nonlinear.vector.Weight" />
  <class name="CurveFitter" startLine="33">
    <javadoc>
      <text>* Fitter for parametric univariate real functions y = f(x).
 * <br/>
 * When a univariate real function y = f(x) does depend on some
 * unknown parameters p<sub>0</sub>, p<sub>1</sub> ... p<sub>n-1</sub>,
 * this class can be used to find these parameters. It does this
 * by <em>fitting</em> the curve so it remains very close to a set of
 * observed points (x<sub>0</sub>, y<sub>0</sub>), (x<sub>1</sub>,
 * y<sub>1</sub>) ... (x<sub>k-1</sub>, y<sub>k-1</sub>). This fitting
 * is done by finding the parameters values that minimizes the objective
 * function &sum;(y<sub>i</sub>-f(x<sub>i</sub>))<sup>2</sup>. This is
 * really a least squares problem.</text>
      <param><T>
 *  Function to use for the fit.</param>
      <version>$Id: CurveFitter.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Optimizer to use for the fitting.</text>
    </javadoc>
    <declaration type="MultivariateVectorOptimizer" name="optimizer" />
    <javadoc>
      <text>* Observed points.</text>
    </javadoc>
    <declaration type="List<WeightedObservedPoint>" name="observations" />
    <javadoc>
      <text>* Simple constructor.</text>
      <param>optimizer Optimizer to use for the fitting.</param>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="CurveFitter" startLine="63" endLine="66" />
    <javadoc>
      <text>* Add an observed (x,y) point to the sample with unit weight.
 * <p>Calling this method is equivalent to call{@code addObservedPoint(1.0, x, y)}.</p></text>
      <param>x abscissa of the point</param>
      <param>y observed value of the point at x, after fitting we should
 * have f(x) as close as possible to this value</param>
      <see>#addObservedPoint(double,double,double)</see>
      <see>#addObservedPoint(WeightedObservedPoint)</see>
      <see>#getObservations()</see>
    </javadoc>
    <method type="void" name="addObservedPoint" startLine="78" endLine="80" />
    <javadoc>
      <text>* Add an observed weighted (x,y) point to the sample.</text>
      <param>weight weight of the observed point in the fit</param>
      <param>x abscissa of the point</param>
      <param>y observed value of the point at x, after fitting we should
 * have f(x) as close as possible to this value</param>
      <see>#addObservedPoint(double,double)</see>
      <see>#addObservedPoint(WeightedObservedPoint)</see>
      <see>#getObservations()</see>
    </javadoc>
    <method type="void" name="addObservedPoint" startLine="91" endLine="93" />
    <javadoc>
      <text>* Add an observed weighted (x,y) point to the sample.</text>
      <param>observed observed point to add</param>
      <see>#addObservedPoint(double,double)</see>
      <see>#addObservedPoint(double,double,double)</see>
      <see>#getObservations()</see>
    </javadoc>
    <method type="void" name="addObservedPoint" startLine="101" endLine="103" />
    <javadoc>
      <text>* Get the observed points.</text>
      <return>observed points</return>
      <see>#addObservedPoint(double,double)</see>
      <see>#addObservedPoint(double,double,double)</see>
      <see>#addObservedPoint(WeightedObservedPoint)</see>
    </javadoc>
    <method type="WeightedObservedPoint[]" name="getObservations" startLine="111" endLine="113" />
    <javadoc>
      <text>* Remove all observations.</text>
    </javadoc>
    <method type="void" name="clearObservations" startLine="118" endLine="120" />
    <javadoc>
      <text>* Fit a curve.
 * This method compute the coefficients of the curve that best
 * fit the sample of observed points previously given through calls
 * to the {@link #addObservedPoint(WeightedObservedPoint)addObservedPoint} method.</text>
      <param>f parametric function to fit.</param>
      <param>initialGuess first guess of the function parameters.</param>
      <return>the fitted parameters.</return>
      <throws>org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.</throws>
    </javadoc>
    <method type="double[]" name="fit" startLine="135" endLine="137" />
    <javadoc>
      <text>* Fit a curve.
 * This method compute the coefficients of the curve that best
 * fit the sample of observed points previously given through calls
 * to the {@link #addObservedPoint(WeightedObservedPoint)addObservedPoint} method.</text>
      <param>f parametric function to fit.</param>
      <param>initialGuess first guess of the function parameters.</param>
      <param>maxEval Maximum number of function evaluations.</param>
      <return>the fitted parameters.</return>
      <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the number of allowed evaluations is exceeded.</throws>
      <throws>org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.</throws>
      <since>3.0</since>
    </javadoc>
    <method type="double[]" name="fit" startLine="157" endLine="181">
      <declaration type="double[]" name="target" />
      <declaration type="double[]" name="weights" />
      <declaration type="int" name="i" />
      <scope startLine="162" endLine="166" />
      <declaration type="TheoreticalValuesFunction" name="model" />
      <declaration type="PointVectorValuePair" name="optimum" />
      <comment>Prepare least squares problem.</comment>
      <comment>Input to the optimizer: the model and its Jacobian.</comment>
      <comment>Perform the fit.</comment>
      <comment>Extract the coefficients.</comment>
    </method>
    <class name="TheoreticalValuesFunction" startLine="183">
      <javadoc>
        <text>* Vectorial function computing function theoretical values.</text>
      </javadoc>
      <javadoc>
        <text>* Function to fit.</text>
      </javadoc>
      <declaration type="ParametricUnivariateFunction" name="f" />
      <javadoc>
        <param>f function to fit.</param>
      </javadoc>
      <method type="constructor" name="TheoreticalValuesFunction" startLine="191" endLine="193" />
      <javadoc>
        <return>the model function values.</return>
      </javadoc>
      <method type="ModelFunction" name="getModelFunction" startLine="198" endLine="212">
        <javadoc>
          <text>* {@inheritDoc}</text>
        </javadoc>
        <method type="double[]" name="value" startLine="201" endLine="210">
          <declaration type="double[]" name="values" />
          <declaration type="int" name="i" />
          <scope startLine="205" endLine="207" />
        </method>
        <comment>compute the residuals</comment>
      </method>
      <javadoc>
        <return>the model function Jacobian.</return>
      </javadoc>
      <method type="ModelFunctionJacobian" name="getModelFunctionJacobian" startLine="217" endLine="228">
        <method type="double[][]" name="value" startLine="219" endLine="226">
          <declaration type="double[][][]" name="jacobian" />
          <declaration type="int" name="i" />
          <scope startLine="222" endLine="224" />
        </method>
      </method>
    </class>
  </class>
</source>
