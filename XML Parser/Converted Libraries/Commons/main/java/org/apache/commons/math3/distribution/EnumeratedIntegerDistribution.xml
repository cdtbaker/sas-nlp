<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.NotANumberException" />
  <import name="org.apache.commons.math3.exception.NotFiniteNumberException" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937c" />
  <import name="org.apache.commons.math3.util.Pair" />
  <class name="EnumeratedIntegerDistribution" extends="AbstractIntegerDistribution" startLine="30">
    <javadoc>
      <text>* <p>Implementation of an integer-valued {@link EnumeratedDistribution}.</p>
 * <p>Values with zero-probability are allowed but they do not extend the
 * support.<br/>
 * Duplicate values are allowed. Probabilities of duplicate values are combined
 * when computing cumulative probabilities and statistics.</p></text>
      <version>$Id: EnumeratedIntegerDistribution.java 1456769 2013-03-15 04:51:34Z psteitz $</version>
      <since>3.2</since>
    </javadoc>
    <javadoc>
      <text>* Serializable UID.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* {@link EnumeratedDistribution} instance (using the {@link Integer} wrapper)
 * used to generate the pmf.</text>
    </javadoc>
    <declaration type="EnumeratedDistribution<Integer>" name="innerDistribution" />
    <javadoc>
      <text>* Create a discrete distribution using the given probability mass function
 * definition.</text>
      <param>singletons array of random variable values.</param>
      <param>probabilities array of probabilities.</param>
      <throws>DimensionMismatchException if{@code singletons.length != probabilities.length}</throws>
      <throws>NotPositiveException if any of the probabilities are negative.</throws>
      <throws>NotFiniteNumberException if any of the probabilities are infinite.</throws>
      <throws>NotANumberException if any of the probabilities are NaN.</throws>
      <throws>MathArithmeticException all of the probabilities are 0.</throws>
    </javadoc>
    <method type="constructor" name="EnumeratedIntegerDistribution" startLine="67" endLine="69" />
    <javadoc>
      <text>* Create a discrete distribution using the given random number generator
 * and probability mass function definition.</text>
      <param>rng random number generator.</param>
      <param>singletons array of random variable values.</param>
      <param>probabilities array of probabilities.</param>
      <throws>DimensionMismatchException if{@code singletons.length != probabilities.length}</throws>
      <throws>NotPositiveException if any of the probabilities are negative.</throws>
      <throws>NotFiniteNumberException if any of the probabilities are infinite.</throws>
      <throws>NotANumberException if any of the probabilities are NaN.</throws>
      <throws>MathArithmeticException all of the probabilities are 0.</throws>
    </javadoc>
    <method type="constructor" name="EnumeratedIntegerDistribution" startLine="88" endLine="101">
      <scope startLine="90" endLine="92" />
      <declaration type="List<Pair<Integer,Double>>" name="samples" />
      <scope startLine="96" endLine="98" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="probability" startLine="106" endLine="108" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="113" endLine="123">
      <declaration type="double" name="probability" />
      <scope startLine="116" endLine="120">
        <scope startLine="117" endLine="119" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <return>{@code sum(singletons[i] * probabilities[i])}</return>
    </javadoc>
    <method type="double" name="getNumericalMean" startLine="130" endLine="138">
      <declaration type="double" name="mean" />
      <scope startLine="133" endLine="135" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <return>{@code sum((singletons[i] - mean) ^ 2 * probabilities[i])}</return>
    </javadoc>
    <method type="double" name="getNumericalVariance" startLine="145" endLine="155">
      <declaration type="double" name="mean" />
      <declaration type="double" name="meanOfSquares" />
      <scope startLine="149" endLine="152" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}Returns the lowest value with non-zero probability.</text>
      <return>the lowest value with non-zero probability.</return>
    </javadoc>
    <method type="int" name="getSupportLowerBound" startLine="164" endLine="173">
      <declaration type="int" name="min" />
      <scope startLine="166" endLine="170">
        <scope startLine="167" endLine="169" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}Returns the highest value with non-zero probability.</text>
      <return>the highest value with non-zero probability.</return>
    </javadoc>
    <method type="int" name="getSupportUpperBound" startLine="182" endLine="191">
      <declaration type="int" name="max" />
      <scope startLine="184" endLine="188">
        <scope startLine="185" endLine="187" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}The support of this distribution is connected.</text>
      <return>{@code true}</return>
    </javadoc>
    <method type="boolean" name="isSupportConnected" startLine="200" endLine="202" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="sample" startLine="208" endLine="210" />
  </class>
</source>
