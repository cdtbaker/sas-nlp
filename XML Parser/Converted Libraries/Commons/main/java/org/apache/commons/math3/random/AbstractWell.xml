<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.random">
  <import name="java.io.Serializable" />
  <class name="AbstractWell" extends="BitsStreamGenerator" startLine="22">
    <implements name="Serializable" />
    <javadoc>
      <text>* This abstract class implements the WELL class of pseudo-random number generator
 * from Fran&ccedil;ois Panneton, Pierre L'Ecuyer and Makoto Matsumoto.
 * <p>This generator is described in a paper by Fran&ccedil;ois Panneton,
 * Pierre L'Ecuyer and Makoto Matsumoto <a
 * href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng.pdf">Improved
 * Long-Period Generators Based on Linear Recurrences Modulo 2</a> ACM
 * Transactions on Mathematical Software, 32, 1 (2006). The errata for the paper
 * are in <a href="http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng-errata.txt">wellrng-errata.txt</a>.</p></text>
      <see><a href="http://www.iro.umontreal.ca/~panneton/WELLRNG.html">WELL Random number generator</a></see>
      <version>$Id: AbstractWell.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>2.2</since>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Current index in the bytes pool.</text>
    </javadoc>
    <declaration type="int" name="index" />
    <javadoc>
      <text>* Bytes pool.</text>
    </javadoc>
    <declaration type="int[]" name="v" />
    <javadoc>
      <text>* Index indirection table giving for each index its predecessor taking table size into account.</text>
    </javadoc>
    <declaration type="int[]" name="iRm1" />
    <javadoc>
      <text>* Index indirection table giving for each index its second predecessor taking table size into account.</text>
    </javadoc>
    <declaration type="int[]" name="iRm2" />
    <javadoc>
      <text>* Index indirection table giving for each index the value index + m1 taking table size into account.</text>
    </javadoc>
    <declaration type="int[]" name="i1" />
    <javadoc>
      <text>* Index indirection table giving for each index the value index + m2 taking table size into account.</text>
    </javadoc>
    <declaration type="int[]" name="i2" />
    <javadoc>
      <text>* Index indirection table giving for each index the value index + m3 taking table size into account.</text>
    </javadoc>
    <declaration type="int[]" name="i3" />
    <javadoc>
      <text>* Creates a new random number generator.
 * <p>The instance is initialized using the current time plus the
 * system identity hash code of this instance as the seed.</p></text>
      <param>k number of bits in the pool (not necessarily a multiple of 32)</param>
      <param>m1 first parameter of the algorithm</param>
      <param>m2 second parameter of the algorithm</param>
      <param>m3 third parameter of the algorithm</param>
    </javadoc>
    <method type="constructor" name="AbstractWell" startLine="71" endLine="73" />
    <javadoc>
      <text>* Creates a new random number generator using a single int seed.</text>
      <param>k number of bits in the pool (not necessarily a multiple of 32)</param>
      <param>m1 first parameter of the algorithm</param>
      <param>m2 second parameter of the algorithm</param>
      <param>m3 third parameter of the algorithm</param>
      <param>seed the initial seed (32 bits integer)</param>
    </javadoc>
    <method type="constructor" name="AbstractWell" startLine="82" endLine="84" />
    <javadoc>
      <text>* Creates a new random number generator using an int array seed.</text>
      <param>k number of bits in the pool (not necessarily a multiple of 32)</param>
      <param>m1 first parameter of the algorithm</param>
      <param>m2 second parameter of the algorithm</param>
      <param>m3 third parameter of the algorithm</param>
      <param>seed the initial seed (32 bits integers array), if null
 * the seed of the generator will be related to the current time</param>
    </javadoc>
    <method type="constructor" name="AbstractWell" startLine="94" endLine="122">
      <declaration type="int" name="w" />
      <declaration type="int" name="r" />
      <scope startLine="111" endLine="117" />
      <comment>the bits pool contains k bits, k = r w - p where r is the number</comment>
      <comment>of w bits blocks, w is the block size (always 32 in the original paper)</comment>
      <comment>and p is the number of unused bits in the last block</comment>
      <comment>precompute indirection index tables. These tables are used for optimizing access</comment>
      <comment>they allow saving computations like "(j + r - 2) % r" with costly modulo operations</comment>
      <comment>initialize the pool content</comment>
    </method>
    <javadoc>
      <text>* Creates a new random number generator using a single long seed.</text>
      <param>k number of bits in the pool (not necessarily a multiple of 32)</param>
      <param>m1 first parameter of the algorithm</param>
      <param>m2 second parameter of the algorithm</param>
      <param>m3 third parameter of the algorithm</param>
      <param>seed the initial seed (64 bits integer)</param>
    </javadoc>
    <method type="constructor" name="AbstractWell" startLine="131" endLine="133" />
    <javadoc>
      <text>* Reinitialize the generator as if just built with the given int seed.
 * <p>The state of the generator is exactly the same as a new
 * generator built with the same seed.</p></text>
      <param>seed the initial seed (32 bits integer)</param>
    </javadoc>
    <method type="void" name="setSeed" startLine="141" endLine="143" />
    <javadoc>
      <text>* Reinitialize the generator as if just built with the given int array seed.
 * <p>The state of the generator is exactly the same as a new
 * generator built with the same seed.</p></text>
      <param>seed the initial seed (32 bits integers array). If null
 * the seed of the generator will be the system time plus the system identity
 * hash code of the instance.</param>
    </javadoc>
    <method type="void" name="setSeed" startLine="153" endLine="170">
      <scope startLine="154" endLine="157" />
      <scope startLine="161" endLine="166">
        <scope startLine="162" endLine="165">
          <declaration type="long" name="l" />
        </scope>
      </scope>
      <comment>Clear normal deviate cache</comment>
    </method>
    <javadoc>
      <text>* Reinitialize the generator as if just built with the given long seed.
 * <p>The state of the generator is exactly the same as a new
 * generator built with the same seed.</p></text>
      <param>seed the initial seed (64 bits integer)</param>
    </javadoc>
    <method type="void" name="setSeed" startLine="178" endLine="180" />
    <method name="next" type="int" startLine="182" endLine="184" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
  </class>
</source>
