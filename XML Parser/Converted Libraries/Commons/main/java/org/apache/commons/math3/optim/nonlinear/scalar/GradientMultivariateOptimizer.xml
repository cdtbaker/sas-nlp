<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.nonlinear.scalar">
  <import name="org.apache.commons.math3.analysis.MultivariateVectorFunction" />
  <import name="org.apache.commons.math3.optim.ConvergenceChecker" />
  <import name="org.apache.commons.math3.optim.OptimizationData" />
  <import name="org.apache.commons.math3.optim.PointValuePair" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <class name="GradientMultivariateOptimizer" extends="MultivariateOptimizer" startLine="25">
    <javadoc>
      <text>* Base class for implementing optimizers for multivariate scalar
 * differentiable functions.
 * It contains boiler-plate code for dealing with gradient evaluation.</text>
      <version>$Id: GradientMultivariateOptimizer.java 1443444 2013-02-07 12:41:36Z erans $</version>
      <since>3.1</since>
    </javadoc>
    <javadoc>
      <text>* Gradient of the objective function.</text>
    </javadoc>
    <declaration type="MultivariateVectorFunction" name="gradient" />
    <javadoc>
      <param>checker Convergence checker.</param>
    </javadoc>
    <method type="constructor" name="GradientMultivariateOptimizer" startLine="43" endLine="45" />
    <javadoc>
      <text>* Compute the gradient vector.</text>
      <param>params Point at which the gradient must be evaluated.</param>
      <return>the gradient at the specified point.</return>
    </javadoc>
    <method type="double[]" name="computeObjectiveGradient" startLine="53" endLine="55" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <param>optData Optimization data. In addition to those documented in{@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])MultivariateOptimizer}, this method will register the following data:
 * <ul>
 * <li>{@link ObjectiveFunctionGradient}</li>
 * </ul></param>
      <return>{@inheritDoc}</return>
      <throws>TooManyEvaluationsException if the maximal number of
 * evaluations (of the objective function) is exceeded.</throws>
    </javadoc>
    <method type="PointValuePair" name="optimize" startLine="72" endLine="75">
      <comment>Set up base class and perform computation.</comment>
    </method>
    <javadoc>
      <text>* Scans the list of (required and optional) optimization data that
 * characterize the problem.</text>
      <param>optData Optimization data.
 * The following data will be looked for:
 * <ul>
 * <li>{@link ObjectiveFunctionGradient}</li>
 * </ul></param>
    </javadoc>
    <method type="void" name="parseOptimizationData" startLine="88" endLine="102">
      <scope startLine="94" endLine="101">
        <scope startLine="95" endLine="100" />
        <comment>If more data must be parsed, this statement _must_ be</comment>
        <comment>changed to "continue".</comment>
      </scope>
      <comment>Allow base class to register its own data.</comment>
      <comment>The existing values (as set by the previous call) are reused if</comment>
      <comment>not provided in the argument list.</comment>
    </method>
  </class>
</source>
