<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.inference">
  <import name="org.apache.commons.math3.distribution.ChiSquaredDistribution" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.ZeroException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <class name="GTest" startLine="30">
    <javadoc>
      <text>* Implements <a href="http://en.wikipedia.org/wiki/G-test">G Test</a>
 * statistics.
 * <p>This is known in statistical genetics as the McDonald-Kreitman test.
 * The implementation handles both known and unknown distributions.</p>
 * <p>Two samples tests can be used when the distribution is unknown <i>a priori</i>
 * but provided by one sample, or when the hypothesis under test is that the two
 * samples come from the same underlying distribution.</p></text>
      <version>$Id: GTest.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>3.1</since>
    </javadoc>
    <javadoc>
      <text>* Computes the <a href="http://en.wikipedia.org/wiki/G-test">G statistic
 * for Goodness of Fit</a> comparing {@code observed} and {@code expected}frequency counts.
 * <p>This statistic can be used to perform a G test (Log-Likelihood Ratio
 * Test) evaluating the null hypothesis that the observed counts follow the
 * expected distribution.</p>
 * <p><strong>Preconditions</strong>: <ul>
 * <li>Expected counts must all be positive. </li>
 * <li>Observed counts must all be &ge; 0. </li>
 * <li>The observed and expected arrays must have the same length and their
 * common length must be at least 2. </li></ul></p>
 * <p>If any of the preconditions are not met, a{@code MathIllegalArgumentException} is thrown.</p>
 * <p><strong>Note:</strong>This implementation rescales the{@code expected} array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p></text>
      <param>observed array of observed frequency counts</param>
      <param>expected array of expected frequency counts</param>
      <return>G-Test statistic</return>
      <throws>NotPositiveException if {@code observed} has negative entries</throws>
      <throws>NotStrictlyPositiveException if {@code expected} has entries that
 * are not strictly positive</throws>
      <throws>DimensionMismatchException if the array lengths do not match or
 * are less than 2.</throws>
    </javadoc>
    <method type="double" name="g" startLine="79" endLine="110">
      <scope startLine="81" endLine="83" />
      <scope startLine="84" endLine="86" />
      <declaration type="double" name="sumExpected" />
      <declaration type="double" name="sumObserved" />
      <scope startLine="92" endLine="95" />
      <declaration type="double" name="ratio" />
      <declaration type="boolean" name="rescale" />
      <scope startLine="98" endLine="101" />
      <declaration type="double" name="sum" />
      <scope startLine="103" endLine="108">
        <declaration type="double" name="dev" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns the <i>observed significance level</i>, or <a href=
 * "http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"> p-value</a>,
 * associated with a G-Test for goodness of fit</a> comparing the{@code observed} frequency counts to those in the {@code expected} array.
 * <p>The number returned is the smallest significance level at which one
 * can reject the null hypothesis that the observed counts conform to the
 * frequency distribution described by the expected counts.</p>
 * <p>The probability returned is the tail probability beyond{@link #g(double[],long[]) g(expected, observed)}in the ChiSquare distribution with degrees of freedom one less than the
 * common length of {@code expected} and {@code observed}.</p>
 * <p> <strong>Preconditions</strong>: <ul>
 * <li>Expected counts must all be positive. </li>
 * <li>Observed counts must all be &ge; 0. </li>
 * <li>The observed and expected arrays must have the
 * same length and their common length must be at least 2.</li>
 * </ul></p>
 * <p>If any of the preconditions are not met, a{@code MathIllegalArgumentException} is thrown.</p>
 * <p><strong>Note:</strong>This implementation rescales the{@code expected} array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p></text>
      <param>observed array of observed frequency counts</param>
      <param>expected array of expected frequency counts</param>
      <return>p-value</return>
      <throws>NotPositiveException if {@code observed} has negative entries</throws>
      <throws>NotStrictlyPositiveException if {@code expected} has entries that
 * are not strictly positive</throws>
      <throws>DimensionMismatchException if the array lengths do not match or
 * are less than 2.</throws>
      <throws>MaxCountExceededException if an error occurs computing the
 * p-value.</throws>
    </javadoc>
    <method type="double" name="gTest" startLine="154" endLine="160">
      <declaration type="ChiSquaredDistribution" name="distribution" />
    </method>
    <javadoc>
      <text>* Returns the intrinsic (Hardy-Weinberg proportions) p-Value, as described
 * in p64-69 of McDonald, J.H. 2009. Handbook of Biological Statistics
 * (2nd ed.). Sparky House Publishing, Baltimore, Maryland.
 * <p> The probability returned is the tail probability beyond{@link #g(double[],long[]) g(expected, observed)}in the ChiSquare distribution with degrees of freedom two less than the
 * common length of {@code expected} and {@code observed}.</p></text>
      <param>observed array of observed frequency counts</param>
      <param>expected array of expected frequency counts</param>
      <return>p-value</return>
      <throws>NotPositiveException if {@code observed} has negative entries</throws>
      <throws>NotStrictlyPositiveException {@code expected} has entries that are
 * not strictly positive</throws>
      <throws>DimensionMismatchException if the array lengths do not match or
 * are less than 2.</throws>
      <throws>MaxCountExceededException if an error occurs computing the
 * p-value.</throws>
    </javadoc>
    <method type="double" name="gTestIntrinsic" startLine="185" endLine="191">
      <declaration type="ChiSquaredDistribution" name="distribution" />
    </method>
    <javadoc>
      <text>* Performs a G-Test (Log-Likelihood Ratio Test) for goodness of fit
 * evaluating the null hypothesis that the observed counts conform to the
 * frequency distribution described by the expected counts, with
 * significance level {@code alpha}. Returns true iff the null
 * hypothesis can be rejected with {@code 100 * (1 - alpha)} percent confidence.
 * <p><strong>Example:</strong><br> To test the hypothesis that{@code observed} follows {@code expected} at the 99% level,
 * use </p><p>{@code gTest(expected, observed, 0.01)}</p>
 * <p>Returns true iff {@link #gTest(double[],long[])gTestGoodnessOfFitPValue(expected, observed)} < alpha</p>
 * <p><strong>Preconditions</strong>: <ul>
 * <li>Expected counts must all be positive. </li>
 * <li>Observed counts must all be &ge; 0. </li>
 * <li>The observed and expected arrays must have the same length and their
 * common length must be at least 2.
 * <li> {@code 0 < alpha < 0.5} </li></ul></p>
 * <p>If any of the preconditions are not met, a{@code MathIllegalArgumentException} is thrown.</p>
 * <p><strong>Note:</strong>This implementation rescales the{@code expected} array if necessary to ensure that the sum of the
 * expected and observed counts are equal.</p></text>
      <param>observed array of observed frequency counts</param>
      <param>expected array of expected frequency counts</param>
      <param>alpha significance level of the test</param>
      <return>true iff null hypothesis can be rejected with confidence 1 -
 * alpha</return>
      <throws>NotPositiveException if {@code observed} has negative entries</throws>
      <throws>NotStrictlyPositiveException if {@code expected} has entries that
 * are not strictly positive</throws>
      <throws>DimensionMismatchException if the array lengths do not match or
 * are less than 2.</throws>
      <throws>MaxCountExceededException if an error occurs computing the
 * p-value.</throws>
      <throws>OutOfRangeException if alpha is not strictly greater than zero
 * and less than or equal to 0.5</throws>
    </javadoc>
    <method type="boolean" name="gTest" startLine="240" endLine="247">
      <scope startLine="242" endLine="245" />
    </method>
    <javadoc>
      <text>* Calculates the <a href=
 * "http://en.wikipedia.org/wiki/Entropy_%28information_theory%29">Shannon
 * entropy</a> for 2 Dimensional Matrix.  The value returned is the entropy
 * of the vector formed by concatenating the rows (or columns) of {@code k}to form a vector. See {@link #entropy(long[])}.</text>
      <param>k 2 Dimensional Matrix of long values (for ex. the counts of a
 * trials)</param>
      <return>Shannon Entropy of the given Matrix</return>
    </javadoc>
    <method type="double" name="entropy" startLine="261" endLine="278">
      <declaration type="double" name="h" />
      <declaration type="double" name="sum_k" />
      <scope startLine="264" endLine="268">
        <scope startLine="265" endLine="267" />
      </scope>
      <scope startLine="269" endLine="276">
        <scope startLine="270" endLine="275">
          <scope startLine="271" endLine="274">
            <declaration type="double" name="p_ij" />
          </scope>
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Calculates the <a href="http://en.wikipedia.org/wiki/Entropy_%28information_theory%29">
 * Shannon entropy</a> for a vector.  The values of {@code k} are taken to be
 * incidence counts of the values of a random variable. What is returned is <br/>
 * &sum;p<sub>i</sub>log(p<sub>i</sub><br/>
 * where p<sub>i</sub> = k[i] / (sum of elements in k)</text>
      <param>k Vector (for ex. Row Sums of a trials)</param>
      <return>Shannon Entropy of the given Vector</return>
    </javadoc>
    <method type="double" name="entropy" startLine="291" endLine="304">
      <declaration type="double" name="h" />
      <declaration type="double" name="sum_k" />
      <scope startLine="294" endLine="296" />
      <scope startLine="297" endLine="302">
        <scope startLine="298" endLine="301">
          <declaration type="double" name="p_i" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* <p>Computes a G (Log-Likelihood Ratio) two sample test statistic for
 * independence comparing frequency counts in{@code observed1} and {@code observed2}. The sums of frequency
 * counts in the two samples are not required to be the same. The formula
 * used to compute the test statistic is </p>
 * <p>{@code 2 * totalSum * [H(rowSums) + H(colSums) - H(k)]}</p>
 * <p> where {@code H} is the
 * <a href="http://en.wikipedia.org/wiki/Entropy_%28information_theory%29">
 * Shannon Entropy</a> of the random variable formed by viewing the elements
 * of the argument array as incidence counts; <br/>{@code k} is a matrix with rows {@code [observed1, observed2]}; <br/>{@code rowSums, colSums} are the row/col sums of {@code k}; <br>
 * and {@code totalSum} is the overall sum of all entries in {@code k}.</p>
 * <p>This statistic can be used to perform a G test evaluating the null
 * hypothesis that both observed counts are independent </p>
 * <p> <strong>Preconditions</strong>: <ul>
 * <li>Observed counts must be non-negative. </li>
 * <li>Observed counts for a specific bin must not both be zero. </li>
 * <li>Observed counts for a specific sample must not all be  0. </li>
 * <li>The arrays {@code observed1} and {@code observed2} must have
 * the same length and their common length must be at least 2. </li></ul></p>
 * <p>If any of the preconditions are not met, a{@code MathIllegalArgumentException} is thrown.</p></text>
      <param>observed1 array of observed frequency counts of the first data set</param>
      <param>observed2 array of observed frequency counts of the second data
 * set</param>
      <return>G-Test statistic</return>
      <throws>DimensionMismatchException the the lengths of the arrays do not
 * match or their common length is less than 2</throws>
      <throws>NotPositiveException if any entry in {@code observed1} or{@code observed2} is negative</throws>
      <throws>ZeroException if either all counts of{@code observed1} or {@code observed2} are zero, or if the count
 * at the same index is zero for both arrays.</throws>
    </javadoc>
    <method type="double" name="gDataSetsComparison" startLine="349" endLine="389">
      <scope startLine="352" endLine="354" />
      <scope startLine="355" endLine="357" />
      <declaration type="long" name="countSum1" />
      <declaration type="long" name="countSum2" />
      <declaration type="long[]" name="collSums" />
      <declaration type="long[][]" name="k" />
      <scope startLine="371" endLine="381">
        <scope startLine="372" endLine="374" />
        <scope startLine="374" endLine="380" />
      </scope>
      <scope startLine="383" endLine="385" />
      <declaration type="long[]" name="rowSums" />
      <declaration type="double" name="sum" />
      <comment>Make sure lengths are same</comment>
      <comment>Ensure non-negative counts</comment>
      <comment>Compute and compare count sums</comment>
      <comment>Compute and compare count sums</comment>
      <comment>Ensure neither sample is uniformly 0</comment>
    </method>
    <javadoc>
      <text>* Calculates the root log-likelihood ratio for 2 state Datasets. See{@link #gDataSetsComparison(long[],long[])}.
 * <p>Given two events A and B, let k11 be the number of times both events
 * occur, k12 the incidence of B without A, k21 the count of A without B,
 * and k22 the number of times neither A nor B occurs.  What is returned
 * by this method is </p>
 * <p>{@code} (sgn) sqrt(gValueDataSetsComparison(
 * k11, k12}, {k21, k22})}</p>
 * <p>where {@code sgn} is -1 if {@code k11 / (k11 + k12) < k21 / (k21 + k22))};<br/>
 * 1 otherwise.</p>
 * <p>Signed root LLR has two advantages over the basic LLR: a) it is positive
 * where k11 is bigger than expected, negative where it is lower b) if there is
 * no difference it is asymptotically normally distributed. This allows one
 * to talk about "number of standard deviations" which is a more common frame
 * of reference than the chi^2 distribution.</p></text>
      <param>k11 number of times the two events occurred together (AB)</param>
      <param>k12 number of times the second event occurred WITHOUT the
 * first event (notA,B)</param>
      <param>k21 number of times the first event occurred WITHOUT the
 * second event (A, notB)</param>
      <param>k22 number of times something else occurred (i.e. was neither
 * of these events (notA, notB)</param>
      <return>root log-likelihood ratio</return>
    </javadoc>
    <method type="double" name="rootLogLikelihoodRatio" startLine="422" endLine="430">
      <declaration type="double[]" name="llr" />
      <declaration type="double" name="sqrt" />
      <scope startLine="426" endLine="428" />
    </method>
    <javadoc>
      <text>* <p>Returns the <i>observed significance level</i>, or <a href=
 * "http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue">
 * p-value</a>, associated with a G-Value (Log-Likelihood Ratio) for two
 * sample test comparing bin frequency counts in {@code observed1} and{@code observed2}.</p>
 * <p>The number returned is the smallest significance level at which one
 * can reject the null hypothesis that the observed counts conform to the
 * same distribution. </p>
 * <p>See {@link #gTest(double[],long[])} for details
 * on how the p-value is computed.  The degrees of of freedom used to
 * perform the test is one less than the common length of the input observed
 * count arrays.</p>
 * <p><strong>Preconditions</strong>:
 * <ul> <li>Observed counts must be non-negative. </li>
 * <li>Observed counts for a specific bin must not both be zero. </li>
 * <li>Observed counts for a specific sample must not all be 0. </li>
 * <li>The arrays {@code observed1} and {@code observed2} must
 * have the same length and their common length must be at least 2. </li>
 * </ul><p>
 * <p> If any of the preconditions are not met, a{@code MathIllegalArgumentException} is thrown.</p></text>
      <param>observed1 array of observed frequency counts of the first data set</param>
      <param>observed2 array of observed frequency counts of the second data
 * set</param>
      <return>p-value</return>
      <throws>DimensionMismatchException the the length of the arrays does not
 * match or their common length is less than 2</throws>
      <throws>NotPositiveException if any of the entries in {@code observed1} or{@code observed2} are negative</throws>
      <throws>ZeroException if either all counts of {@code observed1} or{@code observed2} are zero, or if the count at some index is
 * zero for both arrays</throws>
      <throws>MaxCountExceededException if an error occurs computing the
 * p-value.</throws>
    </javadoc>
    <method type="double" name="gTestDataSetsComparison" startLine="475" endLine="480">
      <declaration type="ChiSquaredDistribution" name="distribution" />
    </method>
    <javadoc>
      <text>* <p>Performs a G-Test (Log-Likelihood Ratio Test) comparing two binned
 * data sets. The test evaluates the null hypothesis that the two lists
 * of observed counts conform to the same frequency distribution, with
 * significance level {@code alpha}. Returns true iff the null
 * hypothesis can be rejected  with 100 * (1 - alpha) percent confidence.
 * </p>
 * <p>See {@link #gDataSetsComparison(long[],long[])} for details
 * on the formula used to compute the G (LLR) statistic used in the test and{@link #gTest(double[],long[])} for information on how
 * the observed significance level is computed. The degrees of of freedom used
 * to perform the test is one less than the common length of the input observed
 * count arrays. </p>
 * <strong>Preconditions</strong>: <ul>
 * <li>Observed counts must be non-negative. </li>
 * <li>Observed counts for a specific bin must not both be zero. </li>
 * <li>Observed counts for a specific sample must not all be 0. </li>
 * <li>The arrays {@code observed1} and {@code observed2} must
 * have the same length and their common length must be at least 2. </li>
 * <li>{@code 0 < alpha < 0.5} </li></ul></p>
 * <p>If any of the preconditions are not met, a{@code MathIllegalArgumentException} is thrown.</p></text>
      <param>observed1 array of observed frequency counts of the first data set</param>
      <param>observed2 array of observed frequency counts of the second data
 * set</param>
      <param>alpha significance level of the test</param>
      <return>true iff null hypothesis can be rejected with confidence 1 -
 * alpha</return>
      <throws>DimensionMismatchException the the length of the arrays does not
 * match</throws>
      <throws>NotPositiveException if any of the entries in {@code observed1} or{@code observed2} are negative</throws>
      <throws>ZeroException if either all counts of {@code observed1} or{@code observed2} are zero, or if the count at some index is
 * zero for both arrays</throws>
      <throws>OutOfRangeException if {@code alpha} is not in the range
 * (0, 0.5]</throws>
      <throws>MaxCountExceededException if an error occurs performing the test</throws>
    </javadoc>
    <method type="boolean" name="gTestDataSetsComparison" startLine="529" endLine="536">
      <scope startLine="531" endLine="534" />
    </method>
  </class>
</source>
