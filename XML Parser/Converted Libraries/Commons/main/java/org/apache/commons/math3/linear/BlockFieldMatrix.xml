<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.Field" />
  <import name="org.apache.commons.math3.FieldElement" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="BlockFieldMatrix" extends="AbstractFieldMatrix<T>" startLine="35">
    <implements name="Serializable" />
    <javadoc>
      <text>* Cache-friendly implementation of FieldMatrix using a flat arrays to store
 * square blocks of the matrix.
 * <p>
 * This implementation is specially designed to be cache-friendly. Square blocks are
 * stored as small arrays and allow efficient traversal of data both in row major direction
 * and columns major direction, one block at a time. This greatly increases performances
 * for algorithms that use crossed directions loops like multiplication or transposition.
 * </p>
 * <p>
 * The size of square blocks is a static parameter. It may be tuned according to the cache
 * size of the target computer processor. As a rule of thumbs, it should be the largest
 * value that allows three blocks to be simultaneously cached (this is necessary for example
 * for matrix multiplication). The default value is to use 36x36 blocks.
 * </p>
 * <p>
 * The regular blocks represent {@link #BLOCK_SIZE} x {@link #BLOCK_SIZE} squares. Blocks
 * at right hand side and bottom side which may be smaller to fit matrix dimensions. The square
 * blocks are flattened in row major order in single dimension arrays which are therefore{@link #BLOCK_SIZE}<sup>2</sup> elements long for regular blocks. The blocks are themselves
 * organized in row major order.
 * </p>
 * <p>
 * As an example, for a block size of 36x36, a 100x60 matrix would be stored in 6 blocks.
 * Block 0 would be a Field[1296] array holding the upper left 36x36 square, block 1 would be
 * a Field[1296] array holding the upper center 36x36 square, block 2 would be a Field[1008]
 * array holding the upper right 36x28 rectangle, block 3 would be a Field[864] array holding
 * the lower left 24x36 rectangle, block 4 would be a Field[864] array holding the lower center
 * 24x36 rectangle and block 5 would be a Field[672] array holding the lower right 24x28
 * rectangle.
 * </p>
 * <p>
 * The layout complexity overhead versus simple mapping of matrices to java
 * arrays is negligible for small matrices (about 1%). The gain from cache efficiency leads
 * to up to 3-fold improvements for matrices of moderate to large size.
 * </p></text>
      <param><T>
 *  the type of the field elements</param>
      <version>$Id: BlockFieldMatrix.java 1449528 2013-02-24 19:06:20Z luc $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Block size.</text>
    </javadoc>
    <declaration type="int" name="BLOCK_SIZE" />
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Blocks of matrix entries.</text>
    </javadoc>
    <declaration type="T" name="blocks" />
    <javadoc>
      <text>* Number of rows of the matrix.</text>
    </javadoc>
    <declaration type="int" name="rows" />
    <javadoc>
      <text>* Number of columns of the matrix.</text>
    </javadoc>
    <declaration type="int" name="columns" />
    <javadoc>
      <text>* Number of block rows of the matrix.</text>
    </javadoc>
    <declaration type="int" name="blockRows" />
    <javadoc>
      <text>* Number of block columns of the matrix.</text>
    </javadoc>
    <declaration type="int" name="blockColumns" />
    <javadoc>
      <text>* Create a new matrix with the supplied row and column dimensions.</text>
      <param>field Field to which the elements belong.</param>
      <param>rows Number of rows in the new matrix.</param>
      <param>columns Number of columns in the new matrix.</param>
      <throws>NotStrictlyPositiveException if row or column dimension is not
 * positive.</throws>
    </javadoc>
    <method type="constructor" name="BlockFieldMatrix" startLine="102" endLine="113">
      <comment>number of blocks</comment>
      <comment>allocate storage blocks, taking care of smaller ones at right and bottom</comment>
    </method>
    <javadoc>
      <text>* Create a new dense matrix copying entries from raw layout data.
 * <p>The input array <em>must</em> already be in raw layout.</p>
 * <p>Calling this constructor is equivalent to call:
 * <pre>matrix = new BlockFieldMatrix<T>(getField(), rawData.length, rawData[0].length,
 * toBlocksLayout(rawData), false);</pre>
 * </p></text>
      <param>rawData Data for the new matrix, in raw layout.</param>
      <throws>DimensionMismatchException if the {@code blockData} shape is
 * inconsistent with block layout.</throws>
      <see>#BlockFieldMatrix(int,int,FieldElement[][],boolean)</see>
    </javadoc>
    <method type="constructor" name="BlockFieldMatrix" startLine="129" endLine="131" />
    <javadoc>
      <text>* Create a new dense matrix copying entries from block layout data.
 * <p>The input array <em>must</em> already be in blocks layout.</p></text>
      <param>rows  the number of rows in the new matrix</param>
      <param>columns  the number of columns in the new matrix</param>
      <param>blockData data for new matrix</param>
      <param>copyArray if true, the input array will be copied, otherwise
 * it will be referenced</param>
      <throws>DimensionMismatchException if the {@code blockData} shape is
 * inconsistent with block layout.</throws>
      <throws>NotStrictlyPositiveException if row or column dimension is not
 * positive.</throws>
      <see>#createBlocksLayout(Field,int,int)</see>
      <see>#toBlocksLayout(FieldElement[][])</see>
      <see>#BlockFieldMatrix(FieldElement[][])</see>
    </javadoc>
    <method type="constructor" name="BlockFieldMatrix" startLine="152" endLine="182">
      <scope startLine="161" endLine="164">
        <comment>allocate storage blocks, taking care of smaller ones at right and bottom</comment>
      </scope>
      <scope startLine="164" endLine="167">
        <comment>reference existing array</comment>
      </scope>
      <declaration type="int" name="index" />
      <scope startLine="170" endLine="181">
        <declaration type="int" name="iHeight" />
        <scope startLine="172" endLine="180">
          <scope startLine="173" endLine="176" />
          <scope startLine="177" endLine="179" />
        </scope>
      </scope>
      <comment>number of blocks</comment>
    </method>
    <javadoc>
      <text>* Convert a data array from raw layout to blocks layout.
 * <p>
 * Raw layout is the straightforward layout where element at row i and
 * column j is in array element <code>rawData[i][j]</code>. Blocks layout
 * is the layout used in {@link BlockFieldMatrix} instances, where the matrix
 * is split in square blocks (except at right and bottom side where blocks may
 * be rectangular to fit matrix size) and each block is stored in a flattened
 * one-dimensional array.
 * </p>
 * <p>
 * This method creates an array in blocks layout from an input array in raw layout.
 * It can be used to provide the array argument of the {@link #BlockFieldMatrix(int,int,FieldElement[][],boolean)}constructor.
 * </p></text>
      <param><T>
 *  Type of the field elements.</param>
      <param>rawData Data array in raw layout.</param>
      <return>a new data array containing the same entries but in blocks layout</return>
      <throws>DimensionMismatchException if {@code rawData} is not rectangular
 * (not all rows have the same length).</throws>
      <see>#createBlocksLayout(Field,int,int)</see>
      <see>#BlockFieldMatrix(int,int,FieldElement[][],boolean)</see>
    </javadoc>
    <method type="T[][]" name="toBlocksLayout" startLine="209" endLine="253">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <declaration type="int" name="blockRows" />
      <declaration type="int" name="blockColumns" />
      <scope startLine="217" endLine="222">
        <declaration type="int" name="length" />
        <scope startLine="219" endLine="221" />
      </scope>
      <declaration type="Field<T>" name="field" />
      <declaration type="T[][]" name="blocks" />
      <declaration type="int" name="blockIndex" />
      <scope startLine="228" endLine="250">
        <declaration type="int" name="pStart" />
        <declaration type="int" name="pEnd" />
        <declaration type="int" name="iHeight" />
        <scope startLine="232" endLine="249">
          <declaration type="int" name="qStart" />
          <declaration type="int" name="qEnd" />
          <declaration type="int" name="jWidth" />
          <declaration type="T[]" name="block" />
          <declaration type="int" name="index" />
          <scope startLine="243" endLine="246" />
        </scope>
        <comment>allocate new block</comment>
        <comment>copy data</comment>
      </scope>
      <comment>safety checks</comment>
      <comment>convert array</comment>
    </method>
    <javadoc>
      <text>* Create a data array in blocks layout.
 * <p>
 * This method can be used to create the array argument of the {@link #BlockFieldMatrix(int,int,FieldElement[][],boolean)}constructor.
 * </p></text>
      <param><T>
 *  Type of the field elements.</param>
      <param>field Field to which the elements belong.</param>
      <param>rows Number of rows in the new matrix.</param>
      <param>columns Number of columns in the new matrix.</param>
      <return>a new data array in blocks layout.</return>
      <see>#toBlocksLayout(FieldElement[][])</see>
      <see>#BlockFieldMatrix(int,int,FieldElement[][],boolean)</see>
    </javadoc>
    <method type="T[][]" name="createBlocksLayout" startLine="271" endLine="291">
      <declaration type="int" name="blockRows" />
      <declaration type="int" name="blockColumns" />
      <declaration type="T[][]" name="blocks" />
      <declaration type="int" name="blockIndex" />
      <scope startLine="277" endLine="288">
        <declaration type="int" name="pStart" />
        <declaration type="int" name="pEnd" />
        <declaration type="int" name="iHeight" />
        <scope startLine="281" endLine="287">
          <declaration type="int" name="qStart" />
          <declaration type="int" name="qEnd" />
          <declaration type="int" name="jWidth" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldMatrix<T>" name="createMatrix" startLine="297" endLine="300" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldMatrix<T>" name="copy" startLine="304" endLine="315">
      <declaration type="BlockFieldMatrix<T>" name="copied" />
      <scope startLine="310" endLine="312" />
      <comment>create an empty matrix</comment>
      <comment>copy the blocks</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldMatrix<T>" name="add" startLine="320" endLine="358">
      <scope startLine="321" endLine="323" />
      <scope startLine="323" endLine="357">
        <declaration type="BlockFieldMatrix<T>" name="out" />
        <declaration type="int" name="blockIndex" />
        <scope startLine="332" endLine="354">
          <scope startLine="333" endLine="353">
            <declaration type="T[]" name="outBlock" />
            <declaration type="T[]" name="tBlock" />
            <declaration type="int" name="pStart" />
            <declaration type="int" name="pEnd" />
            <declaration type="int" name="qStart" />
            <declaration type="int" name="qEnd" />
            <declaration type="int" name="k" />
            <scope startLine="343" endLine="348">
              <scope startLine="344" endLine="347" />
            </scope>
          </scope>
        </scope>
        <comment>safety check</comment>
        <comment>perform addition block-wise, to ensure good cache behavior</comment>
        <comment>perform addition on the current block</comment>
        <comment>go to next block</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Compute the sum of {@code this} and {@code m}.</text>
      <param>m matrix to be added</param>
      <return>{@code this + m}</return>
      <throws>MatrixDimensionMismatchException if {@code m} is not the same
 * size as {@code this}</throws>
    </javadoc>
    <method type="BlockFieldMatrix<T>" name="add" startLine="369" endLine="387">
      <declaration type="BlockFieldMatrix<T>" name="out" />
      <scope startLine="377" endLine="384">
        <declaration type="T[]" name="outBlock" />
        <declaration type="T[]" name="tBlock" />
        <declaration type="T[]" name="mBlock" />
        <scope startLine="381" endLine="383" />
      </scope>
      <comment>safety check</comment>
      <comment>perform addition block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldMatrix<T>" name="subtract" startLine="392" endLine="430">
      <scope startLine="393" endLine="395" />
      <scope startLine="395" endLine="429">
        <declaration type="BlockFieldMatrix<T>" name="out" />
        <declaration type="int" name="blockIndex" />
        <scope startLine="404" endLine="426">
          <scope startLine="405" endLine="425">
            <declaration type="T[]" name="outBlock" />
            <declaration type="T[]" name="tBlock" />
            <declaration type="int" name="pStart" />
            <declaration type="int" name="pEnd" />
            <declaration type="int" name="qStart" />
            <declaration type="int" name="qEnd" />
            <declaration type="int" name="k" />
            <scope startLine="415" endLine="420">
              <scope startLine="416" endLine="419" />
            </scope>
          </scope>
        </scope>
        <comment>safety check</comment>
        <comment>perform subtraction block-wise, to ensure good cache behavior</comment>
        <comment>perform subtraction on the current block</comment>
        <comment>go to next block</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Compute {@code this - m}.</text>
      <param>m matrix to be subtracted</param>
      <return>{@code this - m}</return>
      <throws>MatrixDimensionMismatchException if {@code m} is not the same
 * size as {@code this}</throws>
    </javadoc>
    <method type="BlockFieldMatrix<T>" name="subtract" startLine="440" endLine="457">
      <declaration type="BlockFieldMatrix<T>" name="out" />
      <scope startLine="447" endLine="454">
        <declaration type="T[]" name="outBlock" />
        <declaration type="T[]" name="tBlock" />
        <declaration type="T[]" name="mBlock" />
        <scope startLine="451" endLine="453" />
      </scope>
      <comment>safety check</comment>
      <comment>perform subtraction block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldMatrix<T>" name="scalarAdd" startLine="461" endLine="474">
      <declaration type="BlockFieldMatrix<T>" name="out" />
      <scope startLine="465" endLine="471">
        <declaration type="T[]" name="outBlock" />
        <declaration type="T[]" name="tBlock" />
        <scope startLine="468" endLine="470" />
      </scope>
      <comment>perform subtraction block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldMatrix<T>" name="scalarMultiply" startLine="478" endLine="492">
      <declaration type="BlockFieldMatrix<T>" name="out" />
      <scope startLine="483" endLine="489">
        <declaration type="T[]" name="outBlock" />
        <declaration type="T[]" name="tBlock" />
        <scope startLine="486" endLine="488" />
      </scope>
      <comment>perform subtraction block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldMatrix<T>" name="multiply" startLine="497" endLine="553">
      <scope startLine="498" endLine="500" />
      <scope startLine="500" endLine="552">
        <declaration type="BlockFieldMatrix<T>" name="out" />
        <declaration type="T" name="zero" />
        <declaration type="int" name="blockIndex" />
        <scope startLine="510" endLine="549">
          <declaration type="int" name="pStart" />
          <declaration type="int" name="pEnd" />
          <scope startLine="515" endLine="548">
            <declaration type="int" name="qStart" />
            <declaration type="int" name="qEnd" />
            <declaration type="T[]" name="outBlock" />
            <scope startLine="524" endLine="543">
              <declaration type="int" name="kWidth" />
              <declaration type="T[]" name="tBlock" />
              <declaration type="int" name="rStart" />
              <declaration type="int" name="k" />
              <scope startLine="529" endLine="542">
                <declaration type="int" name="lStart" />
                <declaration type="int" name="lEnd" />
                <scope startLine="532" endLine="541">
                  <declaration type="T" name="sum" />
                  <declaration type="int" name="r" />
                  <scope startLine="535" endLine="538" />
                </scope>
              </scope>
            </scope>
          </scope>
        </scope>
        <comment>safety check</comment>
        <comment>perform multiplication block-wise, to ensure good cache behavior</comment>
        <comment>select current block</comment>
        <comment>perform multiplication on current block</comment>
        <comment>go to next block</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the result of postmultiplying {@code this} by {@code m}.</text>
      <param>m matrix to postmultiply by</param>
      <return>{@code this * m}</return>
      <throws>DimensionMismatchException if the matrices are not compatible.</throws>
    </javadoc>
    <method type="BlockFieldMatrix<T>" name="multiply" startLine="563" endLine="625">
      <declaration type="BlockFieldMatrix<T>" name="out" />
      <declaration type="T" name="zero" />
      <declaration type="int" name="blockIndex" />
      <scope startLine="573" endLine="622">
        <declaration type="int" name="pStart" />
        <declaration type="int" name="pEnd" />
        <scope startLine="578" endLine="621">
          <declaration type="int" name="jWidth" />
          <declaration type="int" name="jWidth2" />
          <declaration type="int" name="jWidth3" />
          <declaration type="int" name="jWidth4" />
          <declaration type="T[]" name="outBlock" />
          <scope startLine="588" endLine="617">
            <declaration type="int" name="kWidth" />
            <declaration type="T[]" name="tBlock" />
            <declaration type="T[]" name="mBlock" />
            <declaration type="int" name="k" />
            <scope startLine="593" endLine="616">
              <declaration type="int" name="lStart" />
              <declaration type="int" name="lEnd" />
              <scope startLine="596" endLine="615">
                <declaration type="T" name="sum" />
                <declaration type="int" name="l" />
                <declaration type="int" name="n" />
                <scope startLine="600" endLine="608" />
                <scope startLine="609" endLine="612" />
              </scope>
            </scope>
          </scope>
        </scope>
        <comment>select current block</comment>
        <comment>perform multiplication on current block</comment>
        <comment>go to next block</comment>
      </scope>
      <comment>safety check</comment>
      <comment>perform multiplication block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T[][]" name="getData" startLine="629" endLine="654">
      <declaration type="T[][]" name="data" />
      <declaration type="int" name="lastColumns" />
      <scope startLine="634" endLine="651">
        <declaration type="int" name="pStart" />
        <declaration type="int" name="pEnd" />
        <declaration type="int" name="regularPos" />
        <declaration type="int" name="lastPos" />
        <scope startLine="639" endLine="650">
          <declaration type="T[]" name="dataP" />
          <declaration type="int" name="blockIndex" />
          <declaration type="int" name="dataPos" />
          <scope startLine="643" endLine="646" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldMatrix<T>" name="getSubMatrix" startLine="661" endLine="750">
      <declaration type="BlockFieldMatrix<T>" name="out" />
      <declaration type="int" name="blockStartRow" />
      <declaration type="int" name="rowsShift" />
      <declaration type="int" name="blockStartColumn" />
      <declaration type="int" name="columnsShift" />
      <declaration type="int" name="pBlock" />
      <scope startLine="677" endLine="747">
        <declaration type="int" name="iHeight" />
        <declaration type="int" name="qBlock" />
        <scope startLine="680" endLine="745">
          <declaration type="int" name="jWidth" />
          <declaration type="int" name="outIndex" />
          <declaration type="T[]" name="outBlock" />
          <declaration type="int" name="index" />
          <declaration type="int" name="width" />
          <declaration type="int" name="heightExcess" />
          <declaration type="int" name="widthExcess" />
          <scope startLine="691" endLine="723">
            <scope startLine="693" endLine="712">
              <declaration type="int" name="width2" />
            </scope>
            <scope startLine="712" endLine="722" />
          </scope>
          <scope startLine="723" endLine="743">
            <scope startLine="725" endLine="736">
              <declaration type="int" name="width2" />
            </scope>
            <scope startLine="736" endLine="742" />
          </scope>
        </scope>
        <comment>handle one block of the output matrix</comment>
        <comment>the submatrix block spans on two blocks rows from the original matrix</comment>
        <comment>the submatrix block spans on two blocks columns from the original matrix</comment>
        <comment>the submatrix block spans on one block column from the original matrix</comment>
        <comment>the submatrix block spans on one block row from the original matrix</comment>
        <comment>the submatrix block spans on two blocks columns from the original matrix</comment>
        <comment>the submatrix block spans on one block column from the original matrix</comment>
      </scope>
      <comment>safety checks</comment>
      <comment>create the output matrix</comment>
      <comment>compute blocks shifts</comment>
      <comment>perform extraction block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* Copy a part of a block into another one
 * <p>This method can be called only when the specified part fits in both
 * blocks, no verification is done here.</p></text>
      <param>srcBlock source block</param>
      <param>srcWidth source block width ({@link #BLOCK_SIZE} or smaller)</param>
      <param>srcStartRow start row in the source block</param>
      <param>srcEndRow end row (exclusive) in the source block</param>
      <param>srcStartColumn start column in the source block</param>
      <param>srcEndColumn end column (exclusive) in the source block</param>
      <param>dstBlock destination block</param>
      <param>dstWidth destination block width ({@link #BLOCK_SIZE} or smaller)</param>
      <param>dstStartRow start row in the destination block</param>
      <param>dstStartColumn start column in the destination block</param>
    </javadoc>
    <method type="void" name="copyBlockPart" startLine="771" endLine="780">
      <declaration type="int" name="length" />
      <declaration type="int" name="srcPos" />
      <declaration type="int" name="dstPos" />
      <scope startLine="775" endLine="779" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setSubMatrix" startLine="787" endLine="833">
      <declaration type="int" name="refLength" />
      <scope startLine="791" endLine="793" />
      <declaration type="int" name="endRow" />
      <declaration type="int" name="endColumn" />
      <scope startLine="797" endLine="801">
        <scope startLine="798" endLine="800" />
      </scope>
      <declaration type="int" name="blockStartRow" />
      <declaration type="int" name="blockEndRow" />
      <declaration type="int" name="blockStartColumn" />
      <declaration type="int" name="blockEndColumn" />
      <scope startLine="810" endLine="832">
        <declaration type="int" name="iHeight" />
        <declaration type="int" name="firstRow" />
        <declaration type="int" name="iStart" />
        <declaration type="int" name="iEnd" />
        <scope startLine="816" endLine="831">
          <declaration type="int" name="jWidth" />
          <declaration type="int" name="firstColumn" />
          <declaration type="int" name="jStart" />
          <declaration type="int" name="jEnd" />
          <declaration type="int" name="jLength" />
          <declaration type="T[]" name="block" />
          <scope startLine="825" endLine="829" />
        </scope>
        <comment>handle one block, row by row</comment>
      </scope>
      <comment>safety checks</comment>
      <comment>compute blocks bounds</comment>
      <comment>perform copy block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldMatrix<T>" name="getRowMatrix" startLine="838" endLine="864">
      <declaration type="BlockFieldMatrix<T>" name="out" />
      <declaration type="int" name="iBlock" />
      <declaration type="int" name="iRow" />
      <declaration type="int" name="outBlockIndex" />
      <declaration type="int" name="outIndex" />
      <declaration type="T[]" name="outBlock" />
      <scope startLine="848" endLine="861">
        <declaration type="int" name="jWidth" />
        <declaration type="T[]" name="block" />
        <declaration type="int" name="available" />
        <scope startLine="852" endLine="857" />
        <scope startLine="857" endLine="860" />
      </scope>
      <comment>perform copy block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setRowMatrix" startLine="869" endLine="875">
      <scope startLine="870" endLine="872" />
      <scope startLine="872" endLine="874" />
    </method>
    <javadoc>
      <text>* Sets the entries in row number <code>row</code>
 * as a row matrix.  Row indices start at 0.</text>
      <param>row the row to be set</param>
      <param>matrix row matrix (must have one row and the same number of columns
 * as the instance)</param>
      <throws>MatrixDimensionMismatchException if the matrix dimensions do
 * not match one instance row.</throws>
      <throws>OutOfRangeException if the specified row index is invalid.</throws>
    </javadoc>
    <method type="void" name="setRowMatrix" startLine="889" endLine="919">
      <declaration type="int" name="nCols" />
      <scope startLine="893" endLine="897" />
      <declaration type="int" name="iBlock" />
      <declaration type="int" name="iRow" />
      <declaration type="int" name="mBlockIndex" />
      <declaration type="int" name="mIndex" />
      <declaration type="T[]" name="mBlock" />
      <scope startLine="905" endLine="918">
        <declaration type="int" name="jWidth" />
        <declaration type="T[]" name="block" />
        <declaration type="int" name="available" />
        <scope startLine="909" endLine="914" />
        <scope startLine="914" endLine="917" />
      </scope>
      <comment>perform copy block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldMatrix<T>" name="getColumnMatrix" startLine="924" endLine="948">
      <declaration type="BlockFieldMatrix<T>" name="out" />
      <declaration type="int" name="jBlock" />
      <declaration type="int" name="jColumn" />
      <declaration type="int" name="jWidth" />
      <declaration type="int" name="outBlockIndex" />
      <declaration type="int" name="outIndex" />
      <declaration type="T[]" name="outBlock" />
      <scope startLine="935" endLine="945">
        <declaration type="int" name="iHeight" />
        <declaration type="T[]" name="block" />
        <scope startLine="938" endLine="944">
          <scope startLine="939" endLine="942" />
        </scope>
      </scope>
      <comment>perform copy block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setColumnMatrix" startLine="953" endLine="959">
      <scope startLine="954" endLine="956" />
      <scope startLine="956" endLine="958" />
    </method>
    <javadoc>
      <text>* Sets the entries in column number {@code column}as a column matrix.  Column indices start at 0.</text>
      <param>column Column to be set.</param>
      <param>matrix Column matrix (must have one column and the same number of rows
 * as the instance).</param>
      <throws>MatrixDimensionMismatchException if the matrix dimensions do
 * not match one instance column.</throws>
      <throws>OutOfRangeException if the specified column index is invalid.</throws>
    </javadoc>
    <method type="void" name="setColumnMatrix" startLine="973" endLine="1001">
      <declaration type="int" name="nRows" />
      <scope startLine="977" endLine="981" />
      <declaration type="int" name="jBlock" />
      <declaration type="int" name="jColumn" />
      <declaration type="int" name="jWidth" />
      <declaration type="int" name="mBlockIndex" />
      <declaration type="int" name="mIndex" />
      <declaration type="T[]" name="mBlock" />
      <scope startLine="990" endLine="1000">
        <declaration type="int" name="iHeight" />
        <declaration type="T[]" name="block" />
        <scope startLine="993" endLine="999">
          <scope startLine="994" endLine="997" />
        </scope>
      </scope>
      <comment>perform copy block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="getRowVector" startLine="1006" endLine="1022">
      <declaration type="T[]" name="outData" />
      <declaration type="int" name="iBlock" />
      <declaration type="int" name="iRow" />
      <declaration type="int" name="outIndex" />
      <scope startLine="1014" endLine="1019">
        <declaration type="int" name="jWidth" />
        <declaration type="T[]" name="block" />
      </scope>
      <comment>perform copy block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setRowVector" startLine="1027" endLine="1033">
      <scope startLine="1028" endLine="1030" />
      <scope startLine="1030" endLine="1032" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="getColumnVector" startLine="1038" endLine="1056">
      <declaration type="T[]" name="outData" />
      <declaration type="int" name="jBlock" />
      <declaration type="int" name="jColumn" />
      <declaration type="int" name="jWidth" />
      <declaration type="int" name="outIndex" />
      <scope startLine="1047" endLine="1053">
        <declaration type="int" name="iHeight" />
        <declaration type="T[]" name="block" />
        <scope startLine="1050" endLine="1052" />
      </scope>
      <comment>perform copy block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setColumnVector" startLine="1061" endLine="1067">
      <scope startLine="1062" endLine="1064" />
      <scope startLine="1064" endLine="1066" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T[]" name="getRow" startLine="1071" endLine="1087">
      <declaration type="T[]" name="out" />
      <declaration type="int" name="iBlock" />
      <declaration type="int" name="iRow" />
      <declaration type="int" name="outIndex" />
      <scope startLine="1079" endLine="1084">
        <declaration type="int" name="jWidth" />
        <declaration type="T[]" name="block" />
      </scope>
      <comment>perform copy block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setRow" startLine="1092" endLine="1109">
      <declaration type="int" name="nCols" />
      <scope startLine="1095" endLine="1097" />
      <declaration type="int" name="iBlock" />
      <declaration type="int" name="iRow" />
      <declaration type="int" name="outIndex" />
      <scope startLine="1103" endLine="1108">
        <declaration type="int" name="jWidth" />
        <declaration type="T[]" name="block" />
      </scope>
      <comment>perform copy block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T[]" name="getColumn" startLine="1113" endLine="1131">
      <declaration type="T[]" name="out" />
      <declaration type="int" name="jBlock" />
      <declaration type="int" name="jColumn" />
      <declaration type="int" name="jWidth" />
      <declaration type="int" name="outIndex" />
      <scope startLine="1122" endLine="1128">
        <declaration type="int" name="iHeight" />
        <declaration type="T[]" name="block" />
        <scope startLine="1125" endLine="1127" />
      </scope>
      <comment>perform copy block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setColumn" startLine="1136" endLine="1155">
      <declaration type="int" name="nRows" />
      <scope startLine="1139" endLine="1141" />
      <declaration type="int" name="jBlock" />
      <declaration type="int" name="jColumn" />
      <declaration type="int" name="jWidth" />
      <declaration type="int" name="outIndex" />
      <scope startLine="1148" endLine="1154">
        <declaration type="int" name="iHeight" />
        <declaration type="T[]" name="block" />
        <scope startLine="1151" endLine="1153" />
      </scope>
      <comment>perform copy block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="getEntry" startLine="1160" endLine="1170">
      <declaration type="int" name="iBlock" />
      <declaration type="int" name="jBlock" />
      <declaration type="int" name="k" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setEntry" startLine="1175" endLine="1185">
      <declaration type="int" name="iBlock" />
      <declaration type="int" name="jBlock" />
      <declaration type="int" name="k" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="addToEntry" startLine="1190" endLine="1201">
      <declaration type="int" name="iBlock" />
      <declaration type="int" name="jBlock" />
      <declaration type="int" name="k" />
      <declaration type="T[]" name="blockIJ" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="multiplyEntry" startLine="1206" endLine="1217">
      <declaration type="int" name="iBlock" />
      <declaration type="int" name="jBlock" />
      <declaration type="int" name="k" />
      <declaration type="T[]" name="blockIJ" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldMatrix<T>" name="transpose" startLine="1221" endLine="1256">
      <declaration type="int" name="nRows" />
      <declaration type="int" name="nCols" />
      <declaration type="BlockFieldMatrix<T>" name="out" />
      <declaration type="int" name="blockIndex" />
      <scope startLine="1228" endLine="1253">
        <scope startLine="1229" endLine="1252">
          <declaration type="T[]" name="outBlock" />
          <declaration type="T[]" name="tBlock" />
          <declaration type="int" name="pStart" />
          <declaration type="int" name="pEnd" />
          <declaration type="int" name="qStart" />
          <declaration type="int" name="qEnd" />
          <declaration type="int" name="k" />
          <scope startLine="1239" endLine="1247">
            <declaration type="int" name="lInc" />
            <declaration type="int" name="l" />
            <scope startLine="1242" endLine="1246" />
          </scope>
        </scope>
        <comment>transpose current block</comment>
        <comment>go to next block</comment>
      </scope>
      <comment>perform transpose block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getRowDimension" startLine="1260" endLine="1262" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getColumnDimension" startLine="1266" endLine="1268" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T[]" name="operate" startLine="1272" endLine="1309">
      <scope startLine="1273" endLine="1275" />
      <declaration type="T[]" name="out" />
      <declaration type="T" name="zero" />
      <scope startLine="1280" endLine="1306">
        <declaration type="int" name="pStart" />
        <declaration type="int" name="pEnd" />
        <scope startLine="1283" endLine="1305">
          <declaration type="T[]" name="block" />
          <declaration type="int" name="qStart" />
          <declaration type="int" name="qEnd" />
          <declaration type="int" name="k" />
          <scope startLine="1288" endLine="1304">
            <declaration type="T" name="sum" />
            <declaration type="int" name="q" />
            <scope startLine="1291" endLine="1299" />
            <scope startLine="1300" endLine="1302" />
          </scope>
        </scope>
      </scope>
      <comment>perform multiplication block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T[]" name="preMultiply" startLine="1313" endLine="1356">
      <scope startLine="1315" endLine="1317" />
      <declaration type="T[]" name="out" />
      <declaration type="T" name="zero" />
      <scope startLine="1322" endLine="1353">
        <declaration type="int" name="jWidth" />
        <declaration type="int" name="jWidth2" />
        <declaration type="int" name="jWidth3" />
        <declaration type="int" name="jWidth4" />
        <declaration type="int" name="qStart" />
        <declaration type="int" name="qEnd" />
        <scope startLine="1329" endLine="1352">
          <declaration type="T[]" name="block" />
          <declaration type="int" name="pStart" />
          <declaration type="int" name="pEnd" />
          <scope startLine="1333" endLine="1351">
            <declaration type="int" name="k" />
            <declaration type="T" name="sum" />
            <declaration type="int" name="p" />
            <scope startLine="1337" endLine="1345" />
            <scope startLine="1346" endLine="1349" />
          </scope>
        </scope>
      </scope>
      <comment>perform multiplication block-wise, to ensure good cache behavior</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="walkInRowOrder" startLine="1360" endLine="1380">
      <scope startLine="1362" endLine="1378">
        <declaration type="int" name="pStart" />
        <declaration type="int" name="pEnd" />
        <scope startLine="1365" endLine="1377">
          <scope startLine="1366" endLine="1376">
            <declaration type="int" name="jWidth" />
            <declaration type="int" name="qStart" />
            <declaration type="int" name="qEnd" />
            <declaration type="T[]" name="block" />
            <declaration type="int" name="k" />
            <scope startLine="1372" endLine="1375" />
          </scope>
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="walkInRowOrder" startLine="1384" endLine="1404">
      <scope startLine="1386" endLine="1402">
        <declaration type="int" name="pStart" />
        <declaration type="int" name="pEnd" />
        <scope startLine="1389" endLine="1401">
          <scope startLine="1390" endLine="1400">
            <declaration type="int" name="jWidth" />
            <declaration type="int" name="qStart" />
            <declaration type="int" name="qEnd" />
            <declaration type="T[]" name="block" />
            <declaration type="int" name="k" />
            <scope startLine="1396" endLine="1399" />
          </scope>
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="walkInRowOrder" startLine="1411" endLine="1434">
      <scope startLine="1414" endLine="1432">
        <declaration type="int" name="p0" />
        <declaration type="int" name="pStart" />
        <declaration type="int" name="pEnd" />
        <scope startLine="1418" endLine="1431">
          <scope startLine="1419" endLine="1430">
            <declaration type="int" name="jWidth" />
            <declaration type="int" name="q0" />
            <declaration type="int" name="qStart" />
            <declaration type="int" name="qEnd" />
            <declaration type="T[]" name="block" />
            <declaration type="int" name="k" />
            <scope startLine="1426" endLine="1429" />
          </scope>
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="walkInRowOrder" startLine="1441" endLine="1464">
      <scope startLine="1444" endLine="1462">
        <declaration type="int" name="p0" />
        <declaration type="int" name="pStart" />
        <declaration type="int" name="pEnd" />
        <scope startLine="1448" endLine="1461">
          <scope startLine="1449" endLine="1460">
            <declaration type="int" name="jWidth" />
            <declaration type="int" name="q0" />
            <declaration type="int" name="qStart" />
            <declaration type="int" name="qEnd" />
            <declaration type="T[]" name="block" />
            <declaration type="int" name="k" />
            <scope startLine="1456" endLine="1459" />
          </scope>
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="walkInOptimizedOrder" startLine="1468" endLine="1489">
      <declaration type="int" name="blockIndex" />
      <scope startLine="1471" endLine="1487">
        <declaration type="int" name="pStart" />
        <declaration type="int" name="pEnd" />
        <scope startLine="1474" endLine="1486">
          <declaration type="int" name="qStart" />
          <declaration type="int" name="qEnd" />
          <declaration type="T[]" name="block" />
          <declaration type="int" name="k" />
          <scope startLine="1479" endLine="1484">
            <scope startLine="1480" endLine="1483" />
          </scope>
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="walkInOptimizedOrder" startLine="1493" endLine="1514">
      <declaration type="int" name="blockIndex" />
      <scope startLine="1496" endLine="1512">
        <declaration type="int" name="pStart" />
        <declaration type="int" name="pEnd" />
        <scope startLine="1499" endLine="1511">
          <declaration type="int" name="qStart" />
          <declaration type="int" name="qEnd" />
          <declaration type="T[]" name="block" />
          <declaration type="int" name="k" />
          <scope startLine="1504" endLine="1509">
            <scope startLine="1505" endLine="1508" />
          </scope>
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="walkInOptimizedOrder" startLine="1521" endLine="1544">
      <scope startLine="1524" endLine="1542">
        <declaration type="int" name="p0" />
        <declaration type="int" name="pStart" />
        <declaration type="int" name="pEnd" />
        <scope startLine="1528" endLine="1541">
          <declaration type="int" name="jWidth" />
          <declaration type="int" name="q0" />
          <declaration type="int" name="qStart" />
          <declaration type="int" name="qEnd" />
          <declaration type="T[]" name="block" />
          <scope startLine="1534" endLine="1540">
            <declaration type="int" name="k" />
            <scope startLine="1536" endLine="1539" />
          </scope>
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="walkInOptimizedOrder" startLine="1551" endLine="1574">
      <scope startLine="1554" endLine="1572">
        <declaration type="int" name="p0" />
        <declaration type="int" name="pStart" />
        <declaration type="int" name="pEnd" />
        <scope startLine="1558" endLine="1571">
          <declaration type="int" name="jWidth" />
          <declaration type="int" name="q0" />
          <declaration type="int" name="qStart" />
          <declaration type="int" name="qEnd" />
          <declaration type="T[]" name="block" />
          <scope startLine="1564" endLine="1570">
            <declaration type="int" name="k" />
            <scope startLine="1566" endLine="1569" />
          </scope>
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Get the height of a block.</text>
      <param>blockRow row index (in block sense) of the block</param>
      <return>height (number of rows) of the block</return>
    </javadoc>
    <method type="int" name="blockHeight" startLine="1581" endLine="1583" />
    <javadoc>
      <text>* Get the width of a block.</text>
      <param>blockColumn column index (in block sense) of the block</param>
      <return>width (number of columns) of the block</return>
    </javadoc>
    <method type="int" name="blockWidth" startLine="1590" endLine="1592" />
  </class>
</source>
