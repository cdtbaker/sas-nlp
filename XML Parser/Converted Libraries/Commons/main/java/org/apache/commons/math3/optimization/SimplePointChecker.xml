<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization">
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.Pair" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <class name="SimplePointChecker" extends="AbstractConvergenceChecker<PAIR>" startLine="24">
    <javadoc>
      <text>* Simple implementation of the {@link ConvergenceChecker} interface using
 * only point coordinates.
 * Convergence is considered to have been reached if either the relative
 * difference between each point coordinate are smaller than a threshold
 * or if either the absolute difference between the point coordinates are
 * smaller than another threshold.
 * <br/>
 * The {@link #converged(int,Pair,Pair) converged} method will also return{@code true} if the number of iterations has been set (see{@link #SimplePointChecker(double,double,int) this constructor}).</text>
      <param><PAIR>
 *  Type of the (point, value) pair.
 * The type of the "value" part of the pair (not used by this class).</param>
      <version>$Id: SimplePointChecker.java 1462503 2013-03-29 15:48:27Z luc $</version>
      <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* If {@link #maxIterationCount} is set to this value, the number of
 * iterations will never cause {@link #converged(int,Pair,Pair)}to return {@code true}.</text>
    </javadoc>
    <declaration type="int" name="ITERATION_CHECK_DISABLED" />
    <javadoc>
      <text>* Number of iterations after which the{@link #converged(int,Pair,Pair)} method
 * will return true (unless the check is disabled).</text>
    </javadoc>
    <declaration type="int" name="maxIterationCount" />
    <javadoc>
      <text>* Build an instance with default threshold.</text>
      <deprecated>See {@link AbstractConvergenceChecker#AbstractConvergenceChecker()}</deprecated>
    </javadoc>
    <method type="constructor" name="SimplePointChecker" startLine="65" endLine="67" />
    <javadoc>
      <text>* Build an instance with specified thresholds.
 * In order to perform only relative checks, the absolute tolerance
 * must be set to a negative value. In order to perform only absolute
 * checks, the relative tolerance must be set to a negative value.</text>
      <param>relativeThreshold relative tolerance threshold</param>
      <param>absoluteThreshold absolute tolerance threshold</param>
    </javadoc>
    <method type="constructor" name="SimplePointChecker" startLine="79" endLine="82" />
    <javadoc>
      <text>* Builds an instance with specified thresholds.
 * In order to perform only relative checks, the absolute tolerance
 * must be set to a negative value. In order to perform only absolute
 * checks, the relative tolerance must be set to a negative value.</text>
      <param>relativeThreshold Relative tolerance threshold.</param>
      <param>absoluteThreshold Absolute tolerance threshold.</param>
      <param>maxIter Maximum iteration count.</param>
      <throws>NotStrictlyPositiveException if {@code maxIter <= 0}.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="SimplePointChecker" startLine="99" endLine="106">
      <scope startLine="102" endLine="104" />
    </method>
    <javadoc>
      <text>* Check if the optimization algorithm has converged considering the
 * last two points.
 * This method may be called several times from the same algorithm
 * iteration with different points. This can be detected by checking the
 * iteration number at each call if needed. Each time this method is
 * called, the previous and current point correspond to points with the
 * same role at each iteration, so they can be compared. As an example,
 * simplex-based algorithms call this method for all points of the simplex,
 * not only for the best or worst ones.</text>
      <param>iteration Index of current iteration</param>
      <param>previous Best point in the previous iteration.</param>
      <param>current Best point in the current iteration.</param>
      <return>{@code true} if the arguments satify the convergence criterion.</return>
    </javadoc>
    <method type="boolean" name="converged" startLine="127" endLine="145">
      <scope startLine="128" endLine="130" />
      <declaration type="double[]" name="p" />
      <declaration type="double[]" name="c" />
      <scope startLine="134" endLine="143">
        <declaration type="double" name="pi" />
        <declaration type="double" name="ci" />
        <declaration type="double" name="difference" />
        <declaration type="double" name="size" />
        <scope startLine="140" endLine="142" />
      </scope>
    </method>
  </class>
</source>
