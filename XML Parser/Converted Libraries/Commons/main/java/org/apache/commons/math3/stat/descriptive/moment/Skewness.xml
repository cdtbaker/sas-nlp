<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive.moment">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="Skewness" extends="AbstractStorelessUnivariateStatistic" startLine="27">
    <implements name="Serializable" />
    <javadoc>
      <text>* Computes the skewness of the available values.
 * <p>
 * We use the following (unbiased) formula to define skewness:</p>
 * <p>
 * skewness = [n / (n -1) (n - 2)] sum[(x_i - mean)^3] / std^3 </p>
 * <p>
 * where n is the number of values, mean is the {@link Mean} and std is the{@link StandardDeviation} </p>
 * <p>
 * <strong>Note that this implementation is not synchronized.</strong> If
 * multiple threads access an instance of this class concurrently, and at least
 * one of the threads invokes the <code>increment()</code> or
 * <code>clear()</code> method, it must be synchronized externally. </p></text>
      <version>$Id: Skewness.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Third moment on which this statistic is based</text>
    </javadoc>
    <declaration type="ThirdMoment" name="moment" />
    <javadoc>
      <text>* Determines whether or not this statistic can be incremented or cleared.
 * <p>
 * Statistics based on (constructed from) external moments cannot
 * be incremented or cleared.</p></text>
    </javadoc>
    <declaration type="boolean" name="incMoment" />
    <javadoc>
      <text>* Constructs a Skewness</text>
    </javadoc>
    <method type="constructor" name="Skewness" startLine="63" endLine="66" />
    <javadoc>
      <text>* Constructs a Skewness with an external moment</text>
      <param>m3 external moment</param>
    </javadoc>
    <method type="constructor" name="Skewness" startLine="72" endLine="75" />
    <javadoc>
      <text>* Copy constructor, creates a new {@code Skewness} identical
 * to the {@code original}</text>
      <param>original the {@code Skewness} instance to copy</param>
      <throws>NullArgumentException if original is null</throws>
    </javadoc>
    <method type="constructor" name="Skewness" startLine="84" endLine="86" />
    <javadoc>
      <text>* {@inheritDoc}<p>Note that when {@link #Skewness(ThirdMoment)} is used to
 * create a Skewness, this method does nothing. In that case, the
 * ThirdMoment should be incremented directly.</p></text>
    </javadoc>
    <method type="void" name="increment" startLine="95" endLine="99">
      <scope startLine="96" endLine="98" />
    </method>
    <javadoc>
      <text>* Returns the value of the statistic based on the values that have been added.
 * <p>
 * See {@link Skewness} for the definition used in the computation.</p></text>
      <return>the skewness of the available values.</return>
    </javadoc>
    <method type="double" name="getResult" startLine="109" endLine="122">
      <scope startLine="111" endLine="113" />
      <declaration type="double" name="variance" />
      <scope startLine="115" endLine="117" />
      <scope startLine="117" endLine="121">
        <declaration type="double" name="n0" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="long" name="getN" startLine="127" endLine="129" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="clear" startLine="135" endLine="139">
      <scope startLine="136" endLine="138" />
    </method>
    <javadoc>
      <text>* Returns the Skewness of the entries in the specifed portion of the
 * input array.
 * <p>
 * See {@link Skewness} for the definition used in the computation.</p>
 * <p>
 * Throws <code>IllegalArgumentException</code> if the array is null.</p></text>
      <param>values the input array</param>
      <param>begin the index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the skewness of the values or Double.NaN if length is less than
 * 3</return>
      <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="159" endLine="195">
      <declaration type="double" name="skew" />
      <scope startLine="164" endLine="193">
        <declaration type="Mean" name="mean" />
        <declaration type="double" name="m" />
        <declaration type="double" name="accum" />
        <declaration type="double" name="accum2" />
        <scope startLine="174" endLine="178">
          <declaration type="double" name="d" />
        </scope>
        <declaration type="double" name="variance" />
        <declaration type="double" name="accum3" />
        <scope startLine="182" endLine="185">
          <declaration type="double" name="d" />
        </scope>
        <declaration type="double" name="n0" />
        <comment>Get the mean and the standard deviation</comment>
        <comment>Calc the std, this is implemented here instead</comment>
        <comment>of using the standardDeviation method eliminate</comment>
        <comment>a duplicate pass to get the mean</comment>
        <comment>Get N</comment>
        <comment>Calculate skewness</comment>
      </scope>
      <comment>Initialize the skewness</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Skewness" name="copy" startLine="201" endLine="206">
      <declaration type="Skewness" name="result" />
      <comment>No try-catch or advertised exception because args are guaranteed non-null</comment>
    </method>
    <javadoc>
      <text>* Copies source to dest.
 * <p>Neither source nor dest can be null.</p></text>
      <param>source Skewness to copy</param>
      <param>dest Skewness to copy to</param>
      <throws>NullArgumentException if either source or dest is null</throws>
    </javadoc>
    <method type="void" name="copy" startLine="217" endLine="223" />
  </class>
</source>
