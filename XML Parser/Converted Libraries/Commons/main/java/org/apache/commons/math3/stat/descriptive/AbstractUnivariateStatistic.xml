<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive">
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <class name="AbstractUnivariateStatistic" startLine="26">
    <implements name="UnivariateStatistic" />
    <javadoc>
      <text>* Abstract base class for all implementations of the{@link UnivariateStatistic} interface.
 * <p>
 * Provides a default implementation of <code>evaluate(double[]),</code>
 * delegating to <code>evaluate(double[], int, int)</code> in the natural way.
 * </p>
 * <p>
 * Also includes a <code>test</code> method that performs generic parameter
 * validation for the <code>evaluate</code> methods.</p></text>
      <version>$Id: AbstractUnivariateStatistic.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Stored data.</text>
    </javadoc>
    <declaration type="double[]" name="storedData" />
    <javadoc>
      <text>* Set the data array.
 * <p>
 * The stored value is a copy of the parameter array, not the array itself.
 * </p></text>
      <param>values data array to store (may be null to remove stored data)</param>
      <see>#evaluate()</see>
    </javadoc>
    <method type="void" name="setData" startLine="53" endLine="55" />
    <javadoc>
      <text>* Get a copy of the stored data array.</text>
      <return>copy of the stored data array (may be null)</return>
    </javadoc>
    <method type="double[]" name="getData" startLine="61" endLine="63" />
    <javadoc>
      <text>* Get a reference to the stored data array.</text>
      <return>reference to the stored data array (may be null)</return>
    </javadoc>
    <method type="double[]" name="getDataRef" startLine="69" endLine="71" />
    <javadoc>
      <text>* Set the data array.  The input array is copied, not referenced.</text>
      <param>values data array to store</param>
      <param>begin the index of the first element to include</param>
      <param>length the number of elements to include</param>
      <throws>MathIllegalArgumentException if values is null or the indices
 * are not valid</throws>
      <see>#evaluate()</see>
    </javadoc>
    <method type="void" name="setData" startLine="84" endLine="103">
      <scope startLine="85" endLine="87" />
      <scope startLine="89" endLine="91" />
      <scope startLine="93" endLine="95" />
      <scope startLine="97" endLine="100" />
    </method>
    <javadoc>
      <text>* Returns the result of evaluating the statistic over the stored data.
 * <p>
 * The stored array is the one which was set by previous calls to {@link #setData(double[])}.
 * </p></text>
      <return>the value of the statistic applied to the stored data</return>
      <throws>MathIllegalArgumentException if the stored data array is null</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="113" endLine="115" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="evaluate" startLine="120" endLine="123" />
    <method name="evaluate" type="double" startLine="125" endLine="129" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method name="copy" type="UnivariateStatistic" startLine="131" endLine="134" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <javadoc>
      <text>* This method is used by <code>evaluate(double[], int, int)</code> methods
 * to verify that the input parameters designate a subarray of positive length.
 * <p>
 * <ul>
 * <li>returns <code>true</code> iff the parameters designate a subarray of
 * positive length</li>
 * <li>throws <code>MathIllegalArgumentException</code> if the array is null or
 * or the indices are invalid</li>
 * <li>returns <code>false</li> if the array is non-null, but
 * <code>length</code> is 0.
 * </ul></p></text>
      <param>values the input array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>true if the parameters are valid and designate a subarray of positive length</return>
      <throws>MathIllegalArgumentException if the indices are invalid or the array is null</throws>
    </javadoc>
    <method type="boolean" name="test" startLine="158" endLine="160" />
    <javadoc>
      <text>* This method is used by <code>evaluate(double[], int, int)</code> methods
 * to verify that the input parameters designate a subarray of positive length.
 * <p>
 * <ul>
 * <li>returns <code>true</code> iff the parameters designate a subarray of
 * non-negative length</li>
 * <li>throws <code>IllegalArgumentException</code> if the array is null or
 * or the indices are invalid</li>
 * <li>returns <code>false</li> if the array is non-null, but
 * <code>length</code> is 0 unless <code>allowEmpty</code> is <code>true</code>
 * </ul></p></text>
      <param>values the input array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <param>allowEmpty if <code>true</code> then zero length arrays are allowed</param>
      <return>true if the parameters are valid</return>
      <throws>MathIllegalArgumentException if the indices are invalid or the array is null</throws>
      <since>3.0</since>
    </javadoc>
    <method type="boolean" name="test" startLine="184" endLine="209">
      <scope startLine="186" endLine="188" />
      <scope startLine="190" endLine="192" />
      <scope startLine="194" endLine="196" />
      <scope startLine="198" endLine="201" />
      <scope startLine="203" endLine="205" />
    </method>
    <javadoc>
      <text>* This method is used by <code>evaluate(double[], double[], int, int)</code> methods
 * to verify that the begin and length parameters designate a subarray of positive length
 * and the weights are all non-negative, non-NaN, finite, and not all zero.
 * <p>
 * <ul>
 * <li>returns <code>true</code> iff the parameters designate a subarray of
 * positive length and the weights array contains legitimate values.</li>
 * <li>throws <code>IllegalArgumentException</code> if any of the following are true:
 * <ul><li>the values array is null</li>
 * <li>the weights array is null</li>
 * <li>the weights array does not have the same length as the values array</li>
 * <li>the weights array contains one or more infinite values</li>
 * <li>the weights array contains one or more NaN values</li>
 * <li>the weights array contains negative values</li>
 * <li>the start and length arguments do not determine a valid array</li></ul>
 * </li>
 * <li>returns <code>false</li> if the array is non-null, but
 * <code>length</code> is 0.
 * </ul></p></text>
      <param>values the input array</param>
      <param>weights the weights array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>true if the parameters are valid and designate a subarray of positive length</return>
      <throws>MathIllegalArgumentException if the indices are invalid or the array is null</throws>
      <since>2.1</since>
    </javadoc>
    <method type="boolean" name="test" startLine="244" endLine="246" />
    <javadoc>
      <text>* This method is used by <code>evaluate(double[], double[], int, int)</code> methods
 * to verify that the begin and length parameters designate a subarray of positive length
 * and the weights are all non-negative, non-NaN, finite, and not all zero.
 * <p>
 * <ul>
 * <li>returns <code>true</code> iff the parameters designate a subarray of
 * non-negative length and the weights array contains legitimate values.</li>
 * <li>throws <code>MathIllegalArgumentException</code> if any of the following are true:
 * <ul><li>the values array is null</li>
 * <li>the weights array is null</li>
 * <li>the weights array does not have the same length as the values array</li>
 * <li>the weights array contains one or more infinite values</li>
 * <li>the weights array contains one or more NaN values</li>
 * <li>the weights array contains negative values</li>
 * <li>the start and length arguments do not determine a valid array</li></ul>
 * </li>
 * <li>returns <code>false</li> if the array is non-null, but
 * <code>length</code> is 0 unless <code>allowEmpty</code> is <code>true</code>.
 * </ul></p></text>
      <param>values the input array.</param>
      <param>weights the weights array.</param>
      <param>begin index of the first array element to include.</param>
      <param>length the number of elements to include.</param>
      <param>allowEmpty if {@code true} than allow zero length arrays to pass.</param>
      <return>{@code true} if the parameters are valid.</return>
      <throws>NullArgumentException if either of the arrays are null</throws>
      <throws>MathIllegalArgumentException if the array indices are not valid,
 * the weights array contains NaN, infinite or negative elements, or there
 * are no positive weights.</throws>
      <since>3.0</since>
    </javadoc>
    <method type="boolean" name="test" startLine="282" endLine="313">
      <scope startLine="284" endLine="286" />
      <scope startLine="288" endLine="290" />
      <declaration type="boolean" name="containsPositiveWeight" />
      <scope startLine="293" endLine="306">
        <scope startLine="294" endLine="296" />
        <scope startLine="297" endLine="299" />
        <scope startLine="300" endLine="302" />
        <scope startLine="303" endLine="305" />
      </scope>
      <scope startLine="308" endLine="310" />
    </method>
  </class>
</source>
