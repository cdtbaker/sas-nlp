<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.correlation">
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <import name="org.apache.commons.math3.linear.BlockRealMatrix" />
  <import name="org.apache.commons.math3.stat.descriptive.moment.Mean" />
  <import name="org.apache.commons.math3.stat.descriptive.moment.Variance" />
  <class name="Covariance" startLine="27">
    <javadoc>
      <text>* Computes covariances for pairs of arrays or columns of a matrix.
 * <p>The constructors that take <code>RealMatrix</code> or
 * <code>double[][]</code> arguments generate covariance matrices.  The
 * columns of the input matrices are assumed to represent variable values.</p>
 * <p>The constructor argument <code>biasCorrected</code> determines whether or
 * not computed covariances are bias-corrected.</p>
 * <p>Unbiased covariances are given by the formula</p>
 * <code>cov(X, Y) = &Sigma;[(x<sub>i</sub> - E(X))(y<sub>i</sub> - E(Y))] / (n - 1)</code>
 * where <code>E(X)</code> is the mean of <code>X</code> and <code>E(Y)</code>
 * is the mean of the <code>Y</code> values.
 * <p>Non-bias-corrected estimates use <code>n</code> in place of <code>n - 1</code></text>
      <version>$Id: Covariance.java 1453271 2013-03-06 10:29:51Z luc $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* covariance matrix</text>
    </javadoc>
    <declaration type="RealMatrix" name="covarianceMatrix" />
    <javadoc>
      <text>* Number of observations (length of covariate vectors)</text>
    </javadoc>
    <declaration type="int" name="n" />
    <javadoc>
      <text>* Create a Covariance with no data</text>
    </javadoc>
    <method type="constructor" name="Covariance" startLine="61" endLine="65" />
    <javadoc>
      <text>* Create a Covariance matrix from a rectangular array
 * whose columns represent covariates.
 * <p>The <code>biasCorrected</code> parameter determines whether or not
 * covariance estimates are bias-corrected.</p>
 * <p>The input array must be rectangular with at least one column
 * and two rows.</p></text>
      <param>data rectangular array with columns representing covariates</param>
      <param>biasCorrected true means covariances are bias-corrected</param>
      <throws>MathIllegalArgumentException if the input data array is not
 * rectangular with at least two rows and one column.</throws>
      <throws>NotStrictlyPositiveException if the input data array is not
 * rectangular with at least one row and one column.</throws>
    </javadoc>
    <method type="constructor" name="Covariance" startLine="85" endLine="87" />
    <javadoc>
      <text>* Create a Covariance matrix from a rectangular array
 * whose columns represent covariates.
 * <p>The input array must be rectangular with at least one column
 * and two rows</p></text>
      <param>data rectangular array with columns representing covariates</param>
      <throws>MathIllegalArgumentException if the input data array is not
 * rectangular with at least two rows and one column.</throws>
      <throws>NotStrictlyPositiveException if the input data array is not
 * rectangular with at least one row and one column.</throws>
    </javadoc>
    <method type="constructor" name="Covariance" startLine="103" endLine="105" />
    <javadoc>
      <text>* Create a covariance matrix from a matrix whose columns
 * represent covariates.
 * <p>The <code>biasCorrected</code> parameter determines whether or not
 * covariance estimates are bias-corrected.</p>
 * <p>The matrix must have at least one column and two rows</p></text>
      <param>matrix matrix with columns representing covariates</param>
      <param>biasCorrected true means covariances are bias-corrected</param>
      <throws>MathIllegalArgumentException if the input matrix does not have
 * at least two rows and one column</throws>
    </javadoc>
    <method type="constructor" name="Covariance" startLine="122" endLine="126" />
    <javadoc>
      <text>* Create a covariance matrix from a matrix whose columns
 * represent covariates.
 * <p>The matrix must have at least one column and two rows</p></text>
      <param>matrix matrix with columns representing covariates</param>
      <throws>MathIllegalArgumentException if the input matrix does not have
 * at least two rows and one column</throws>
    </javadoc>
    <method type="constructor" name="Covariance" startLine="138" endLine="140" />
    <javadoc>
      <text>* Returns the covariance matrix</text>
      <return>covariance matrix</return>
    </javadoc>
    <method type="RealMatrix" name="getCovarianceMatrix" startLine="147" endLine="149" />
    <javadoc>
      <text>* Returns the number of observations (length of covariate vectors)</text>
      <return>number of observations</return>
    </javadoc>
    <method type="int" name="getN" startLine="156" endLine="158" />
    <javadoc>
      <text>* Compute a covariance matrix from a matrix whose columns represent
 * covariates.</text>
      <param>matrix input matrix (must have at least one column and two rows)</param>
      <param>biasCorrected determines whether or not covariance estimates are bias-corrected</param>
      <return>covariance matrix</return>
      <throws>MathIllegalArgumentException if the matrix does not contain sufficient data</throws>
    </javadoc>
    <method type="RealMatrix" name="computeCovarianceMatrix" startLine="169" endLine="182">
      <declaration type="int" name="dimension" />
      <declaration type="Variance" name="variance" />
      <declaration type="RealMatrix" name="outMatrix" />
      <scope startLine="173" endLine="180">
        <scope startLine="174" endLine="178">
          <declaration type="double" name="cov" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Create a covariance matrix from a matrix whose columns represent
 * covariates. Covariances are computed using the bias-corrected formula.</text>
      <param>matrix input matrix (must have at least one column and two rows)</param>
      <return>covariance matrix</return>
      <throws>MathIllegalArgumentException if matrix does not contain sufficient data</throws>
      <see>#Covariance</see>
    </javadoc>
    <method type="RealMatrix" name="computeCovarianceMatrix" startLine="193" endLine="195" />
    <javadoc>
      <text>* Compute a covariance matrix from a rectangular array whose columns represent
 * covariates.</text>
      <param>data input array (must have at least one column and two rows)</param>
      <param>biasCorrected determines whether or not covariance estimates are bias-corrected</param>
      <return>covariance matrix</return>
      <throws>MathIllegalArgumentException if the data array does not contain sufficient
 * data</throws>
      <throws>NotStrictlyPositiveException if the input data array is not
 * rectangular with at least one row and one column.</throws>
    </javadoc>
    <method type="RealMatrix" name="computeCovarianceMatrix" startLine="209" endLine="211" />
    <javadoc>
      <text>* Create a covariance matrix from a rectangular array whose columns represent
 * covariates. Covariances are computed using the bias-corrected formula.</text>
      <param>data input array (must have at least one column and two rows)</param>
      <return>covariance matrix</return>
      <throws>MathIllegalArgumentException if the data array does not contain sufficient data</throws>
      <throws>NotStrictlyPositiveException if the input data array is not
 * rectangular with at least one row and one column.</throws>
      <see>#Covariance</see>
    </javadoc>
    <method type="RealMatrix" name="computeCovarianceMatrix" startLine="224" endLine="226" />
    <javadoc>
      <text>* Computes the covariance between the two arrays.
 * <p>Array lengths must match and the common length must be at least 2.</p></text>
      <param>xArray first data array</param>
      <param>yArray second data array</param>
      <param>biasCorrected if true, returned value will be bias-corrected</param>
      <return>returns the covariance for the two arrays</return>
      <throws>MathIllegalArgumentException if the arrays lengths do not match or
 * there is insufficient data</throws>
    </javadoc>
    <method type="double" name="covariance" startLine="241" endLine="261">
      <declaration type="Mean" name="mean" />
      <declaration type="double" name="result" />
      <declaration type="int" name="length" />
      <scope startLine="245" endLine="248" />
      <scope startLine="248" endLine="251" />
      <scope startLine="251" endLine="259">
        <declaration type="double" name="xMean" />
        <declaration type="double" name="yMean" />
        <scope startLine="254" endLine="258">
          <declaration type="double" name="xDev" />
          <declaration type="double" name="yDev" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Computes the covariance between the two arrays, using the bias-corrected
 * formula.
 * <p>Array lengths must match and the common length must be at least 2.</p></text>
      <param>xArray first data array</param>
      <param>yArray second data array</param>
      <return>returns the covariance for the two arrays</return>
      <throws>MathIllegalArgumentException if the arrays lengths do not match or
 * there is insufficient data</throws>
    </javadoc>
    <method type="double" name="covariance" startLine="276" endLine="278" />
    <javadoc>
      <text>* Throws MathIllegalArgumentException if the matrix does not have at least
 * one column and two rows.</text>
      <param>matrix matrix to check</param>
      <throws>MathIllegalArgumentException if the matrix does not contain sufficient data
 * to compute covariance</throws>
    </javadoc>
    <method type="void" name="checkSufficientData" startLine="287" endLine="295">
      <declaration type="int" name="nRows" />
      <declaration type="int" name="nCols" />
      <scope startLine="290" endLine="294" />
    </method>
    <javadoc>
      <text>* Create an empty covariance matrix.</text>
    </javadoc>
  </class>
</source>
