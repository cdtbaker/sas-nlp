<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.direct">
  <import name="org.apache.commons.math3.util.Incrementor" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.analysis.MultivariateFunction" />
  <import name="org.apache.commons.math3.optimization.BaseMultivariateOptimizer" />
  <import name="org.apache.commons.math3.optimization.OptimizationData" />
  <import name="org.apache.commons.math3.optimization.GoalType" />
  <import name="org.apache.commons.math3.optimization.InitialGuess" />
  <import name="org.apache.commons.math3.optimization.SimpleBounds" />
  <import name="org.apache.commons.math3.optimization.ConvergenceChecker" />
  <import name="org.apache.commons.math3.optimization.PointValuePair" />
  <import name="org.apache.commons.math3.optimization.SimpleValueChecker" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <class name="BaseAbstractMultivariateOptimizer" startLine="36">
    <implements name="BaseMultivariateOptimizer<FUNC>" />
    <javadoc>
      <text>* Base class for implementing optimizers for multivariate scalar functions.
 * This base class handles the boiler-plate methods associated to thresholds,
 * evaluations counting, initial guess and simple bounds settings.</text>
      <param><FUNC>
 *  Type of the objective function to be optimized.</param>
      <version>$Id: BaseAbstractMultivariateOptimizer.java 1422313 2012-12-15 18:53:41Z psteitz $</version>
      <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
      <since>2.2</since>
    </javadoc>
    <javadoc>
      <text>* Evaluations counter.</text>
    </javadoc>
    <declaration type="Incrementor" name="evaluations" />
    <javadoc>
      <text>* Convergence checker.</text>
    </javadoc>
    <declaration type="ConvergenceChecker<PointValuePair>" name="checker" />
    <javadoc>
      <text>* Type of optimization.</text>
    </javadoc>
    <declaration type="GoalType" name="goal" />
    <javadoc>
      <text>* Initial guess.</text>
    </javadoc>
    <declaration type="double[]" name="start" />
    <javadoc>
      <text>* Lower bounds.</text>
    </javadoc>
    <declaration type="double[]" name="lowerBound" />
    <javadoc>
      <text>* Upper bounds.</text>
    </javadoc>
    <declaration type="double[]" name="upperBound" />
    <javadoc>
      <text>* Objective function.</text>
    </javadoc>
    <declaration type="MultivariateFunction" name="function" />
    <javadoc>
      <text>* Simple constructor with default settings.
 * The convergence check is set to a {@link SimpleValueChecker}.</text>
      <deprecated>See {@link SimpleValueChecker#SimpleValueChecker()}</deprecated>
    </javadoc>
    <method type="constructor" name="BaseAbstractMultivariateOptimizer" startLine="71" endLine="73" />
    <javadoc>
      <param>checker Convergence checker.</param>
    </javadoc>
    <method type="constructor" name="BaseAbstractMultivariateOptimizer" startLine="77" endLine="79" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getMaxEvaluations" startLine="82" endLine="84" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getEvaluations" startLine="87" endLine="89" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="ConvergenceChecker<PointValuePair>" name="getConvergenceChecker" startLine="92" endLine="94" />
    <javadoc>
      <text>* Compute the objective function value.</text>
      <param>point Point at which the objective function must be evaluated.</param>
      <return>the objective function value at the specified point.</return>
      <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
    </javadoc>
    <method type="double" name="computeObjectiveValue" startLine="104" endLine="111">
      <scope startLine="105" endLine="107" />
      <scope startLine="107" endLine="109" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <deprecated>As of 3.1. Please use{@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])}instead.</deprecated>
    </javadoc>
    <method type="PointValuePair" name="optimize" startLine="122" endLine="124" />
    <javadoc>
      <text>* Optimize an objective function.</text>
      <param>maxEval Allowed number of evaluations of the objective function.</param>
      <param>f Objective function.</param>
      <param>goalType Optimization type.</param>
      <param>optData Optimization data. The following data will be looked for:
 * <ul>
 * <li>{@link InitialGuess}</li>
 * <li>{@link SimpleBounds}</li>
 * </ul></param>
      <return>the point/value pair giving the optimal value of the objective
 * function.</return>
      <since>3.1</since>
    </javadoc>
    <method type="PointValuePair" name="optimize" startLine="144" endLine="146" />
    <javadoc>
      <text>* Optimize an objective function.</text>
      <param>f Objective function.</param>
      <param>goalType Type of optimization goal: either{@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.</param>
      <param>startPoint Start point for optimization.</param>
      <param>maxEval Maximum number of function evaluations.</param>
      <return>the point/value pair giving the optimal value for objective
 * function.</return>
      <throws>org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.</throws>
      <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.</throws>
      <throws>org.apache.commons.math3.exception.NullArgumentException if
 * any argument is {@code null}.</throws>
      <deprecated>As of 3.1. Please use{@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])}instead.</deprecated>
    </javadoc>
    <method type="PointValuePair" name="optimizeInternal" startLine="170" endLine="172" />
    <javadoc>
      <text>* Optimize an objective function.</text>
      <param>maxEval Allowed number of evaluations of the objective function.</param>
      <param>f Objective function.</param>
      <param>goalType Optimization type.</param>
      <param>optData Optimization data. The following data will be looked for:
 * <ul>
 * <li>{@link InitialGuess}</li>
 * <li>{@link SimpleBounds}</li>
 * </ul></param>
      <return>the point/value pair giving the optimal value of the objective
 * function.</return>
      <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="PointValuePair" name="optimizeInternal" startLine="195" endLine="207">
      <comment>Set internal state.</comment>
      <comment>Retrieve other settings.</comment>
      <comment>Check input consistency.</comment>
      <comment>Perform computation.</comment>
    </method>
    <javadoc>
      <text>* Scans the list of (required and optional) optimization data that
 * characterize the problem.</text>
      <param>optData Optimization data. The following data will be looked for:
 * <ul>
 * <li>{@link InitialGuess}</li>
 * <li>{@link SimpleBounds}</li>
 * </ul></param>
    </javadoc>
    <method type="void" name="parseOptimizationData" startLine="219" endLine="234">
      <scope startLine="222" endLine="233">
        <scope startLine="223" endLine="226" />
        <scope startLine="227" endLine="232">
          <declaration type="SimpleBounds" name="bounds" />
        </scope>
      </scope>
      <comment>The existing values (as set by the previous call) are reused if</comment>
      <comment>not provided in the argument list.</comment>
    </method>
    <javadoc>
      <return>the optimization type.</return>
    </javadoc>
    <method type="GoalType" name="getGoalType" startLine="239" endLine="241" />
    <javadoc>
      <return>the initial guess.</return>
    </javadoc>
    <method type="double[]" name="getStartPoint" startLine="246" endLine="248" />
    <javadoc>
      <return>the lower bounds.</return>
      <since>3.1</since>
    </javadoc>
    <method type="double[]" name="getLowerBound" startLine="253" endLine="255" />
    <javadoc>
      <return>the upper bounds.</return>
      <since>3.1</since>
    </javadoc>
    <method type="double[]" name="getUpperBound" startLine="260" endLine="262" />
    <method name="doOptimize" type="PointValuePair" startLine="264" endLine="270" />
    <javadoc>
      <text>* Perform the bulk of the optimization algorithm.</text>
      <return>the point/value pair giving the optimal value of the
 * objective function.</return>
    </javadoc>
    <javadoc>
      <text>* Check parameters consistency.</text>
    </javadoc>
    <method type="void" name="checkParameters" startLine="275" endLine="318">
      <scope startLine="276" endLine="317">
        <declaration type="int" name="dim" />
        <scope startLine="278" endLine="289">
          <scope startLine="279" endLine="281" />
          <scope startLine="282" endLine="288">
            <declaration type="double" name="v" />
            <declaration type="double" name="lo" />
            <scope startLine="285" endLine="287" />
          </scope>
        </scope>
        <scope startLine="290" endLine="301">
          <scope startLine="291" endLine="293" />
          <scope startLine="294" endLine="300">
            <declaration type="double" name="v" />
            <declaration type="double" name="hi" />
            <scope startLine="297" endLine="299" />
          </scope>
        </scope>
        <scope startLine="305" endLine="310">
          <scope startLine="307" endLine="309" />
        </scope>
        <scope startLine="311" endLine="316">
          <scope startLine="313" endLine="315" />
        </scope>
        <comment>If the bounds were not specified, the allowed interval is</comment>
        <comment>assumed to be [-inf, +inf].</comment>
      </scope>
    </method>
  </class>
</source>
