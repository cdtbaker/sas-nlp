<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.complex">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.MathIllegalStateException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.ZeroException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="RootsOfUnity" startLine="28">
    <implements name="Serializable" />
    <javadoc>
      <text>* A helper class for the computation and caching of the {@code n}-th roots of
 * unity.</text>
      <version>$Id: RootsOfUnity.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Serializable version id.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Number of roots of unity.</text>
    </javadoc>
    <declaration type="int" name="omegaCount" />
    <javadoc>
      <text>* Real part of the roots.</text>
    </javadoc>
    <declaration type="double[]" name="omegaReal" />
    <javadoc>
      <text>* Imaginary part of the {@code n}-th roots of unity, for positive values
 * of {@code n}. In this array, the roots are stored in counter-clockwise
 * order.</text>
    </javadoc>
    <declaration type="double[]" name="omegaImaginaryCounterClockwise" />
    <javadoc>
      <text>* Imaginary part of the {@code n}-th roots of unity, for negative values
 * of {@code n}. In this array, the roots are stored in clockwise order.</text>
    </javadoc>
    <declaration type="double[]" name="omegaImaginaryClockwise" />
    <javadoc>
      <text>* {@code true} if {@link #computeRoots(int)} was called with a positive
 * value of its argument {@code n}. In this case, counter-clockwise ordering
 * of the roots of unity should be used.</text>
    </javadoc>
    <declaration type="boolean" name="isCounterClockWise" />
    <javadoc>
      <text>* Build an engine for computing the {@code n}-th roots of unity.</text>
    </javadoc>
    <method type="constructor" name="RootsOfUnity" startLine="69" endLine="76" />
    <javadoc>
      <text>* Returns {@code true} if {@link #computeRoots(int)} was called with a
 * positive value of its argument {@code n}. If {@code true}, then
 * counter-clockwise ordering of the roots of unity should be used.</text>
      <return>{@code true} if the roots of unity are stored in
 * counter-clockwise order</return>
      <throws>MathIllegalStateException if no roots of unity have been computed
 * yet</throws>
    </javadoc>
    <method type="boolean" name="isCounterClockWise" startLine="89" endLine="96">
      <scope startLine="91" endLine="94" />
    </method>
    <javadoc>
      <text>* <p>
 * Computes the {@code n}-th roots of unity. The roots are stored in{@code omega[]}, such that {@code omega[k] = w ^ k}, where{@code k = 0, ..., n - 1}, {@code w = exp(2 * pi * i / n)} and{@code i = sqrt(-1)}.
 * </p>
 * <p>
 * Note that {@code n} can be positive of negative
 * </p>
 * <ul>
 * <li>{@code abs(n)} is always the number of roots of unity.</li>
 * <li>If {@code n > 0}, then the roots are stored in counter-clockwise order.</li>
 * <li>If {@code n < 0}, then the roots are stored in clockwise order.</p>
 * </ul></text>
      <param>n the (signed) number of roots of unity to be computed</param>
      <throws>ZeroException if {@code n = 0}</throws>
    </javadoc>
    <method type="void" name="computeRoots" startLine="117" endLine="151">
      <scope startLine="119" endLine="122" />
      <declaration type="int" name="absN" />
      <scope startLine="129" endLine="131" />
      <declaration type="double" name="t" />
      <declaration type="double" name="cosT" />
      <declaration type="double" name="sinT" />
      <scope startLine="143" endLine="149" />
      <comment>avoid repetitive calculations</comment>
      <comment>calculate everything from scratch</comment>
    </method>
    <javadoc>
      <text>* Get the real part of the {@code k}-th {@code n}-th root of unity.</text>
      <param>k index of the {@code n}-th root of unity</param>
      <return>real part of the {@code k}-th {@code n}-th root of unity</return>
      <throws>MathIllegalStateException if no roots of unity have been
 * computed yet</throws>
      <throws>MathIllegalArgumentException if {@code k} is out of range</throws>
    </javadoc>
    <method type="double" name="getReal" startLine="163" endLine="178">
      <scope startLine="165" endLine="168" />
      <scope startLine="169" endLine="175" />
    </method>
    <javadoc>
      <text>* Get the imaginary part of the {@code k}-th {@code n}-th root of unity.</text>
      <param>k index of the {@code n}-th root of unity</param>
      <return>imaginary part of the {@code k}-th {@code n}-th root of unity</return>
      <throws>MathIllegalStateException if no roots of unity have been
 * computed yet</throws>
      <throws>OutOfRangeException if {@code k} is out of range</throws>
    </javadoc>
    <method type="double" name="getImaginary" startLine="190" endLine="206">
      <scope startLine="192" endLine="195" />
      <scope startLine="196" endLine="202" />
    </method>
    <javadoc>
      <text>* Returns the number of roots of unity currently stored. If{@link #computeRoots(int)} was called with {@code n}, then this method
 * returns {@code abs(n)}. If no roots of unity have been computed yet, this
 * method returns 0.</text>
      <return>the number of roots of unity currently stored</return>
    </javadoc>
    <method type="int" name="getNumberOfRoots" startLine="216" endLine="218" />
  </class>
</source>
