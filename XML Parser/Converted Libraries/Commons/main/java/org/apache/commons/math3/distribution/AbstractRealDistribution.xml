<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.RandomDataImpl" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="AbstractRealDistribution" startLine="31">
    <implements name="RealDistribution" />
    <implements name="Serializable" />
    <javadoc>
      <text>* Base class for probability distributions on the reals.
 * Default implementations are provided for some of the methods
 * that do not vary from distribution to distribution.</text>
      <version>$Id: AbstractRealDistribution.java 1422195 2012-12-15 06:45:18Z psteitz $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Default accuracy.</text>
    </javadoc>
    <declaration type="double" name="SOLVER_DEFAULT_ABSOLUTE_ACCURACY" />
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* RandomData instance used to generate samples from the distribution.</text>
      <deprecated>As of 3.1, to be removed in 4.0. Please use the{@link #random} instance variable instead.</deprecated>
    </javadoc>
    <declaration type="RandomDataImpl" name="randomData" />
    <javadoc>
      <text>* RNG instance used to generate samples from the distribution.</text>
      <since>3.1</since>
    </javadoc>
    <declaration type="RandomGenerator" name="random" />
    <javadoc>
      <text>* Solver absolute accuracy for inverse cumulative computation</text>
    </javadoc>
    <declaration type="double" name="solverAbsoluteAccuracy" />
    <javadoc>
      <deprecated>As of 3.1, to be removed in 4.0. Please use{@link #AbstractRealDistribution(RandomGenerator)} instead.</deprecated>
    </javadoc>
    <method type="constructor" name="AbstractRealDistribution" startLine="67" endLine="71">
      <comment>Legacy users are only allowed to access the deprecated "randomData".</comment>
      <comment>New users are forbidden to use this constructor.</comment>
    </method>
    <javadoc>
      <param>rng Random number generator.</param>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="AbstractRealDistribution" startLine="76" endLine="78" />
    <javadoc>
      <text>* {@inheritDoc}The default implementation uses the identity
 * <p>{@code P(x0 < X <= x1) = P(X <= x1) - P(X <= x0)}</p></text>
      <deprecated>As of 3.1 (to be removed in 4.0). Please use{@link #probability(double,double)} instead.</deprecated>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="90" endLine="92" />
    <javadoc>
      <text>* For a random variable {@code X} whose values are distributed according
 * to this distribution, this method returns {@code P(x0 < X <= x1)}.</text>
      <param>x0 Lower bound (excluded).</param>
      <param>x1 Upper bound (included).</param>
      <return>the probability that a random variable with this distribution
 * takes a value between {@code x0} and {@code x1}, excluding the lower
 * and including the upper endpoint.</return>
      <throws>NumberIsTooLargeException if {@code x0 > x1}.
 * The default implementation uses the identity{@code P(x0 < X <= x1) = P(X <= x1) - P(X <= x0)}</throws>
      <since>3.1</since>
    </javadoc>
    <method type="double" name="probability" startLine="111" endLine="117">
      <scope startLine="112" endLine="115" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}The default implementation returns
 * <ul>
 * <li>{@link #getSupportLowerBound()} for {@code p = 0},</li>
 * <li>{@link #getSupportUpperBound()} for {@code p = 1}.</li>
 * </ul></text>
    </javadoc>
    <method type="double" name="inverseCumulativeProbability" startLine="128" endLine="231">
      <scope startLine="157" endLine="159" />
      <declaration type="double" name="lowerBound" />
      <scope startLine="162" endLine="164" />
      <declaration type="double" name="upperBound" />
      <scope startLine="167" endLine="169" />
      <declaration type="double" name="mu" />
      <declaration type="double" name="sig" />
      <declaration type="boolean" name="chebyshevApplies" />
      <scope startLine="177" endLine="186">
        <scope startLine="178" endLine="180" />
        <scope startLine="180" endLine="185">
          <scope startLine="182" endLine="184" />
        </scope>
      </scope>
      <scope startLine="188" endLine="197">
        <scope startLine="189" endLine="191" />
        <scope startLine="191" endLine="196">
          <scope startLine="193" endLine="195" />
        </scope>
      </scope>
      <declaration type="UnivariateFunction" name="toSolve" />
      <method type="double" name="value" startLine="201" endLine="203" />
      <declaration type="double" name="x" />
      <scope startLine="211" endLine="229">
        <declaration type="double" name="dx" />
        <scope startLine="214" endLine="228">
          <declaration type="double" name="px" />
          <scope startLine="216" endLine="227">
            <scope startLine="218" endLine="225">
              <declaration type="double" name="midPoint" />
              <scope startLine="220" endLine="222" />
              <scope startLine="222" endLine="224" />
            </scope>
          </scope>
        </scope>
        <comment>Test for plateau.</comment>
      </scope>
      <comment>IMPLEMENTATION NOTES
 --------------------
 Where applicable, use is made of the one-sided Chebyshev inequality
 to bracket the root. This inequality states that
 P(X - mu >= k  sig) <= 1  (1 + k^2),
 mu: mean, sig: standard deviation. Equivalently
 1 - P(X < mu + k  sig) <= 1  (1 + k^2),
 F(mu + k  sig) >= k^2  (1 + k^2).

 For k = sqrt(p  (1 - p)), we find
 F(mu + k  sig) >= p,
 and (mu + k  sig) is an upper-bound for the root.

 Then, introducing Y = -X, mean(Y) = -mu, sd(Y) = sig, and
 P(Y >= -mu + k  sig) <= 1  (1 + k^2),
 P(-X >= -mu + k  sig) <= 1  (1 + k^2),
 P(X <= mu - k  sig) <= 1  (1 + k^2),
 F(mu - k  sig) <= 1  (1 + k^2).

 For k = sqrt((1 - p)  p), we find
 F(mu - k  sig) <= p,
 and (mu - k  sig) is a lower-bound for the root.

 In cases where the Chebyshev inequality does not apply, geometric
 progressions 1, 2, 4, ... and -1, -2, -4, ... are used to bracket
 the root.</comment>
    </method>
    <javadoc>
      <text>* Returns the solver absolute accuracy for inverse cumulative computation.
 * You can override this method in order to use a Brent solver with an
 * absolute accuracy different from the default.</text>
      <return>the maximum absolute error in inverse cumulative probability estimates</return>
    </javadoc>
    <method type="double" name="getSolverAbsoluteAccuracy" startLine="240" endLine="242" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="reseedRandomGenerator" startLine="245" endLine="248" />
    <javadoc>
      <text>* {@inheritDoc}The default implementation uses the
 * <a href="http://en.wikipedia.org/wiki/Inverse_transform_sampling">
 * inversion method.
 * </a></text>
    </javadoc>
    <method type="double" name="sample" startLine="258" endLine="260" />
    <javadoc>
      <text>* {@inheritDoc}The default implementation generates the sample by calling{@link #sample()} in a loop.</text>
    </javadoc>
    <method type="double[]" name="sample" startLine="268" endLine="278">
      <scope startLine="269" endLine="272" />
      <declaration type="double[]" name="out" />
      <scope startLine="274" endLine="276" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <return>zero.</return>
      <since>3.1</since>
    </javadoc>
    <method type="double" name="probability" startLine="286" endLine="288" />
  </class>
</source>
