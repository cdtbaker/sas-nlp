<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ml.clustering">
  <import name="java.util.ArrayList" />
  <import name="java.util.Collection" />
  <import name="java.util.HashMap" />
  <import name="java.util.HashSet" />
  <import name="java.util.List" />
  <import name="java.util.Map" />
  <import name="java.util.Set" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.ml.distance.DistanceMeasure" />
  <import name="org.apache.commons.math3.ml.distance.EuclideanDistance" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="DBSCANClusterer" extends="Clusterer<T>" startLine="33">
    <javadoc>
      <text>* DBSCAN (density-based spatial clustering of applications with noise) algorithm.
 * <p>
 * The DBSCAN algorithm forms clusters based on the idea of density connectivity, i.e.
 * a point p is density connected to another point q, if there exists a chain of
 * points p<sub>i</sub>, with i = 1 .. n and p<sub>1</sub> = p and p<sub>n</sub> = q,
 * such that each pair &lt;p<sub>i</sub>, p<sub>i+1</sub>&gt; is directly density-reachable.
 * A point q is directly density-reachable from point p if it is in the &epsilon;-neighborhood
 * of this point.
 * <p>
 * Any point that is not density-reachable from a formed cluster is treated as noise, and
 * will thus not be present in the result.
 * <p>
 * The algorithm requires two parameters:
 * <ul>
 * <li>eps: the distance that defines the &epsilon;-neighborhood of a point
 * <li>minPoints: the minimum number of density-connected points required to form a cluster
 * </ul></text>
      <param><T>
 *  type of the points to cluster</param>
      <see><a href="http://en.wikipedia.org/wiki/DBSCAN">DBSCAN (wikipedia)</a></see>
      <see><a href="http://www.dbs.ifi.lmu.de/Publikationen/Papers/KDD-96.final.frame.pdf">
 * A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise</a></see>
      <version>$Id: DBSCANClusterer.java 1461866 2013-03-27 21:54:36Z tn $</version>
      <since>3.2</since>
    </javadoc>
    <javadoc>
      <text>* Maximum radius of the neighborhood to be considered.</text>
    </javadoc>
    <declaration type="double" name="eps" />
    <javadoc>
      <text>* Minimum number of points needed for a cluster.</text>
    </javadoc>
    <declaration type="int" name="minPts" />
    <javadoc>
      <text>* Status of a point during the clustering process.</text>
    </javadoc>
    <javadoc>
      <text>* The point has is considered to be noise.</text>
    </javadoc>
    <javadoc>
      <text>* The point is already part of a cluster.</text>
    </javadoc>
    <javadoc>
      <text>* Creates a new instance of a DBSCANClusterer.
 * <p>
 * The euclidean distance will be used as default distance measure.</text>
      <param>eps maximum radius of the neighborhood to be considered</param>
      <param>minPts minimum number of points needed for a cluster</param>
      <throws>NotPositiveException if {@code eps < 0.0} or {@code minPts < 0}</throws>
    </javadoc>
    <method type="constructor" name="DBSCANClusterer" startLine="85" endLine="87" />
    <javadoc>
      <text>* Creates a new instance of a DBSCANClusterer.</text>
      <param>eps maximum radius of the neighborhood to be considered</param>
      <param>minPts minimum number of points needed for a cluster</param>
      <param>measure the distance measure to use</param>
      <throws>NotPositiveException if {@code eps < 0.0} or {@code minPts < 0}</throws>
    </javadoc>
    <method type="constructor" name="DBSCANClusterer" startLine="98" endLine="109">
      <scope startLine="101" endLine="103" />
      <scope startLine="104" endLine="106" />
    </method>
    <javadoc>
      <text>* Returns the maximum radius of the neighborhood to be considered.</text>
      <return>maximum radius of the neighborhood</return>
    </javadoc>
    <method type="double" name="getEps" startLine="115" endLine="117" />
    <javadoc>
      <text>* Returns the minimum number of points needed for a cluster.</text>
      <return>minimum number of points needed for a cluster</return>
    </javadoc>
    <method type="int" name="getMinPts" startLine="123" endLine="125" />
    <javadoc>
      <text>* Performs DBSCAN cluster analysis.</text>
      <param>points the points to cluster</param>
      <return>the list of clusters</return>
      <throws>NullArgumentException if the data points are null</throws>
    </javadoc>
    <method type="List<Cluster<T>>" name="cluster" startLine="134" endLine="157">
      <declaration type="List<Cluster<T>>" name="clusters" />
      <declaration type="Map<Clusterable,PointStatus>" name="visited" />
      <scope startLine="142" endLine="154">
        <scope startLine="143" endLine="145" />
        <declaration type="List<T>" name="neighbors" />
        <scope startLine="147" endLine="151">
          <declaration type="Cluster<T>" name="cluster" />
        </scope>
        <scope startLine="151" endLine="153" />
        <comment>DBSCAN does not care about center points</comment>
      </scope>
      <comment>sanity checks</comment>
    </method>
    <javadoc>
      <text>* Expands the cluster to include density-reachable items.</text>
      <param>cluster Cluster to expand</param>
      <param>point Point to add to cluster</param>
      <param>neighbors List of neighbors</param>
      <param>points the data set</param>
      <param>visited the set of already visited points</param>
      <return>the expanded cluster</return>
    </javadoc>
    <method type="Cluster<T>" name="expandCluster" startLine="173" endLine="198">
      <declaration type="List<T>" name="seeds" />
      <declaration type="int" name="index" />
      <scope startLine="179" endLine="196">
        <declaration type="T" name="current" />
        <declaration type="PointStatus" name="pStatus" />
        <scope startLine="183" endLine="188">
          <declaration type="List<T>" name="currentNeighbors" />
          <scope startLine="185" endLine="187" />
        </scope>
        <scope startLine="190" endLine="193" />
        <comment>only check non-visited points</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns a list of density-reachable neighbors of a {@code point}.</text>
      <param>point the point to look for</param>
      <param>points possible neighbors</param>
      <return>the List of neighbors</return>
    </javadoc>
    <method type="List<T>" name="getNeighbors" startLine="207" endLine="215">
      <declaration type="List<T>" name="neighbors" />
      <scope startLine="209" endLine="213">
        <scope startLine="210" endLine="212" />
      </scope>
    </method>
    <javadoc>
      <text>* Merges two lists together.</text>
      <param>one first list</param>
      <param>two second list</param>
      <return>merged lists</return>
    </javadoc>
    <method type="List<T>" name="merge" startLine="224" endLine="232">
      <declaration type="Set<T>" name="oneSet" />
      <scope startLine="226" endLine="230">
        <scope startLine="227" endLine="229" />
      </scope>
    </method>
  </class>
</source>
