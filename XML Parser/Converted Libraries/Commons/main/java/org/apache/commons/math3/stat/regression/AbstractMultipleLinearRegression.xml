<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.regression">
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.linear.NonSquareMatrixException" />
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <import name="org.apache.commons.math3.linear.Array2DRowRealMatrix" />
  <import name="org.apache.commons.math3.linear.RealVector" />
  <import name="org.apache.commons.math3.linear.ArrayRealVector" />
  <import name="org.apache.commons.math3.stat.descriptive.moment.Variance" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="AbstractMultipleLinearRegression" startLine="33">
    <implements name="MultipleLinearRegression" />
    <javadoc>
      <text>* Abstract base class for implementations of MultipleLinearRegression.</text>
      <version>$Id: AbstractMultipleLinearRegression.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* X sample data.</text>
    </javadoc>
    <declaration type="RealMatrix" name="xMatrix" />
    <javadoc>
      <text>* Y sample data.</text>
    </javadoc>
    <declaration type="RealVector" name="yVector" />
    <javadoc>
      <text>* Whether or not the regression model includes an intercept.  True means no intercept.</text>
    </javadoc>
    <declaration type="boolean" name="noIntercept" />
    <javadoc>
      <return>the X sample data.</return>
    </javadoc>
    <method type="RealMatrix" name="getX" startLine="53" endLine="55" />
    <javadoc>
      <return>the Y sample data.</return>
    </javadoc>
    <method type="RealVector" name="getY" startLine="60" endLine="62" />
    <javadoc>
      <return>true if the model has no intercept term; false otherwise</return>
      <since>2.2</since>
    </javadoc>
    <method type="boolean" name="isNoIntercept" startLine="68" endLine="70" />
    <javadoc>
      <param>noIntercept true means the model is to be estimated without an intercept term</param>
      <since>2.2</since>
    </javadoc>
    <method type="void" name="setNoIntercept" startLine="76" endLine="78" />
    <javadoc>
      <text>* <p>Loads model x and y sample data from a flat input array, overriding any previous sample.
 * </p>
 * <p>Assumes that rows are concatenated with y values first in each row.  For example, an input
 * <code>data</code> array containing the sequence of values (1, 2, 3, 4, 5, 6, 7, 8, 9) with
 * <code>nobs = 3</code> and <code>nvars = 2</code> creates a regression dataset with two
 * independent variables, as below:
 * <pre>
 * y   x[0]  x[1]
 * --------------
 * 1     2     3
 * 4     5     6
 * 7     8     9
 * </pre>
 * </p>
 * <p>Note that there is no need to add an initial unitary column (column of 1's) when
 * specifying a model including an intercept term.  If {@link #isNoIntercept()} is <code>true</code>,
 * the X matrix will be created without an initial column of "1"s; otherwise this column will
 * be added.
 * </p>
 * <p>Throws IllegalArgumentException if any of the following preconditions fail:
 * <ul><li><code>data</code> cannot be null</li>
 * <li><code>data.length = nobs * (nvars + 1)</li>
 * <li><code>nobs > nvars</code></li></ul>
 * </p></text>
      <param>data input data array</param>
      <param>nobs number of observations (rows)</param>
      <param>nvars number of independent variables (columns, not counting y)</param>
      <throws>NullArgumentException if the data array is null</throws>
      <throws>DimensionMismatchException if the length of the data array is not equal
 * to <code>nobs * (nvars + 1)</code></throws>
      <throws>NumberIsTooSmallException if <code>nobs</code> is smaller than
 * <code>nvars</code></throws>
    </javadoc>
    <method type="void" name="newSampleData" startLine="115" endLine="140">
      <scope startLine="116" endLine="118" />
      <scope startLine="119" endLine="121" />
      <scope startLine="122" endLine="124" />
      <declaration type="double[]" name="y" />
      <declaration type="int" name="cols" />
      <declaration type="double[][]" name="x" />
      <declaration type="int" name="pointer" />
      <scope startLine="129" endLine="137">
        <scope startLine="131" endLine="133" />
        <scope startLine="134" endLine="136" />
      </scope>
    </method>
    <javadoc>
      <text>* Loads new y sample data, overriding any previous data.</text>
      <param>y the array representing the y sample</param>
      <throws>NullArgumentException if y is null</throws>
      <throws>NoDataException if y is empty</throws>
    </javadoc>
    <method type="void" name="newYSampleData" startLine="149" endLine="157">
      <scope startLine="150" endLine="152" />
      <scope startLine="153" endLine="155" />
    </method>
    <javadoc>
      <text>* <p>Loads new x sample data, overriding any previous data.
 * </p>
 * The input <code>x</code> array should have one row for each sample
 * observation, with columns corresponding to independent variables.
 * For example, if <pre>
 * <code> x = new double[][] {{1, 2}, {3, 4}, {5, 6}} </code></pre>
 * then <code>setXSampleData(x) </code> results in a model with two independent
 * variables and 3 observations:
 * <pre>
 * x[0]  x[1]
 * ----------
 * 1    2
 * 3    4
 * 5    6
 * </pre>
 * </p>
 * <p>Note that there is no need to add an initial unitary column (column of 1's) when
 * specifying a model including an intercept term.
 * </p></text>
      <param>x the rectangular array representing the x sample</param>
      <throws>NullArgumentException if x is null</throws>
      <throws>NoDataException if x is empty</throws>
      <throws>DimensionMismatchException if x is not rectangular</throws>
    </javadoc>
    <method type="void" name="newXSampleData" startLine="184" endLine="205">
      <scope startLine="185" endLine="187" />
      <scope startLine="188" endLine="190" />
      <scope startLine="191" endLine="193">
        <comment>Augment design matrix with initial unitary column</comment>
      </scope>
      <scope startLine="193" endLine="204">
        <declaration type="int" name="nVars" />
        <declaration type="double[][]" name="xAug" />
        <scope startLine="196" endLine="202">
          <scope startLine="197" endLine="199" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Validates sample data.  Checks that
 * <ul><li>Neither x nor y is null or empty;</li>
 * <li>The length (i.e. number of rows) of x equals the length of y</li>
 * <li>x has at least one more row than it has columns (i.e. there is
 * sufficient data to estimate regression coefficients for each of the
 * columns in x plus an intercept.</li>
 * </ul></text>
      <param>x the [n,k] array representing the x data</param>
      <param>y the [n,1] array representing the y data</param>
      <throws>NullArgumentException if {@code x} or {@code y} is null</throws>
      <throws>DimensionMismatchException if {@code x} and {@code y} do not
 * have the same length</throws>
      <throws>NoDataException if {@code x} or {@code y} are zero-length</throws>
      <throws>MathIllegalArgumentException if the number of rows of {@code x}is not larger than the number of columns + 1</throws>
    </javadoc>
    <method type="void" name="validateSampleData" startLine="225" endLine="240">
      <scope startLine="226" endLine="228" />
      <scope startLine="229" endLine="231" />
      <scope startLine="232" endLine="234">
        <comment>Must be no y data either</comment>
      </scope>
      <scope startLine="235" endLine="239" />
    </method>
    <javadoc>
      <text>* Validates that the x data and covariance matrix have the same
 * number of rows and that the covariance matrix is square.</text>
      <param>x the [n,k] array representing the x sample</param>
      <param>covariance the [n,n] array representing the covariance matrix</param>
      <throws>DimensionMismatchException if the number of rows in x is not equal
 * to the number of rows in covariance</throws>
      <throws>NonSquareMatrixException if the covariance matrix is not square</throws>
    </javadoc>
    <method type="void" name="validateCovarianceData" startLine="252" endLine="259">
      <scope startLine="253" endLine="255" />
      <scope startLine="256" endLine="258" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double[]" name="estimateRegressionParameters" startLine="264" endLine="267">
      <declaration type="RealVector" name="b" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double[]" name="estimateResiduals" startLine="272" endLine="276">
      <declaration type="RealVector" name="b" />
      <declaration type="RealVector" name="e" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double[][]" name="estimateRegressionParametersVariance" startLine="281" endLine="283" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double[]" name="estimateRegressionParametersStandardErrors" startLine="288" endLine="297">
      <declaration type="double[][]" name="betaVariance" />
      <declaration type="double" name="sigma" />
      <declaration type="int" name="length" />
      <declaration type="double[]" name="result" />
      <scope startLine="293" endLine="295" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="estimateRegressandVariance" startLine="302" endLine="304" />
    <javadoc>
      <text>* Estimates the variance of the error.</text>
      <return>estimate of the error variance</return>
      <since>2.2</since>
    </javadoc>
    <method type="double" name="estimateErrorVariance" startLine="312" endLine="315" />
    <javadoc>
      <text>* Estimates the standard error of the regression.</text>
      <return>regression standard error</return>
      <since>2.2</since>
    </javadoc>
    <method type="double" name="estimateRegressionStandardError" startLine="323" endLine="325" />
    <method name="calculateBeta" type="RealVector" startLine="327" endLine="332" />
    <javadoc>
      <text>* Calculates the beta of multiple linear regression in matrix notation.</text>
      <return>beta</return>
    </javadoc>
    <method name="calculateBetaVariance" type="RealMatrix" startLine="334" endLine="340" />
    <javadoc>
      <text>* Calculates the beta variance of multiple linear regression in matrix
 * notation.</text>
      <return>beta variance</return>
    </javadoc>
    <javadoc>
      <text>* Calculates the variance of the y values.</text>
      <return>Y variance</return>
    </javadoc>
    <method type="double" name="calculateYVariance" startLine="348" endLine="350" />
    <javadoc>
      <text>* <p>Calculates the variance of the error term.</p>
 * Uses the formula <pre>
 * var(u) = u &middot; u / (n - k)
 * </pre>
 * where n and k are the row and column dimensions of the design
 * matrix X.</text>
      <return>error variance estimate</return>
      <since>2.2</since>
    </javadoc>
    <method type="double" name="calculateErrorVariance" startLine="363" endLine="367">
      <declaration type="RealVector" name="residuals" />
    </method>
    <javadoc>
      <text>* Calculates the residuals of multiple linear regression in matrix
 * notation.
 * <pre>
 * u = y - X * b
 * </pre></text>
      <return>The residuals [n,1] matrix</return>
    </javadoc>
    <method type="RealVector" name="calculateResiduals" startLine="379" endLine="382">
      <declaration type="RealVector" name="b" />
    </method>
  </class>
</source>
