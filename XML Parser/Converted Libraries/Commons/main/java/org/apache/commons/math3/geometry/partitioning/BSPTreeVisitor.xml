<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.geometry.partitioning">
  <import name="org.apache.commons.math3.geometry.Space" />
  <interface name="BSPTreeVisitor" startLine="21">
    <javadoc>
      <text>* This interface is used to visit {@link BSPTree BSP tree} nodes.
 * <p>Navigation through {@link BSPTree BSP trees} can be done using
 * two different point of views:</p>
 * <ul>
 * <li>
 * the first one is in a node-oriented way using the {@link BSPTree#getPlus}, {@link BSPTree#getMinus} and {@link BSPTree#getParent} methods. Terminal nodes without associated{@link SubHyperplane sub-hyperplanes} can be visited this way,
 * there is no constraint in the visit order, and it is possible
 * to visit either all nodes or only a subset of the nodes
 * </li>
 * <li>
 * the second one is in a sub-hyperplane-oriented way using
 * classes implementing this interface which obeys the visitor
 * design pattern. The visit order is provided by the visitor as
 * each node is first encountered. Each node is visited exactly
 * once.
 * </li>
 * </ul></text>
      <param><S>
 *  Type of the space.</param>
      <see>BSPTree</see>
      <see>SubHyperplane</see>
      <version>$Id: BSPTreeVisitor.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Enumerate for visit order with respect to plus sub-tree, minus sub-tree and cut sub-hyperplane.</text>
    </javadoc>
    <javadoc>
      <text>* Indicator for visit order plus sub-tree, then minus sub-tree,
 * and last cut sub-hyperplane.</text>
    </javadoc>
    <javadoc>
      <text>* Indicator for visit order plus sub-tree, then cut sub-hyperplane,
 * and last minus sub-tree.</text>
    </javadoc>
    <javadoc>
      <text>* Indicator for visit order minus sub-tree, then plus sub-tree,
 * and last cut sub-hyperplane.</text>
    </javadoc>
    <javadoc>
      <text>* Indicator for visit order minus sub-tree, then cut sub-hyperplane,
 * and last plus sub-tree.</text>
    </javadoc>
    <javadoc>
      <text>* Indicator for visit order cut sub-hyperplane, then plus sub-tree,
 * and last minus sub-tree.</text>
    </javadoc>
    <javadoc>
      <text>* Indicator for visit order cut sub-hyperplane, then minus sub-tree,
 * and last plus sub-tree.</text>
    </javadoc>
    <method name="visitOrder" type="Order" startLine="86" endLine="98" />
    <javadoc>
      <text>* Determine the visit order for this node.
 * <p>Before attempting to visit an internal node, this method is
 * called to determine the desired ordering of the visit. It is
 * guaranteed that this method will be called before {@link #visitInternalNode visitInternalNode} for a given node, it will be
 * called exactly once for each internal node.</p></text>
      <param>node BSP node guaranteed to have a non null cut sub-hyperplane</param>
      <return>desired visit order, must be one of{@link Order#PLUS_MINUS_SUB}, {@link Order#PLUS_SUB_MINUS},{@link Order#MINUS_PLUS_SUB}, {@link Order#MINUS_SUB_PLUS},{@link Order#SUB_PLUS_MINUS}, {@link Order#SUB_MINUS_PLUS}</return>
    </javadoc>
    <method name="visitInternalNode" type="void" startLine="100" endLine="107" />
    <javadoc>
      <text>* Visit a BSP tree node node having a non-null sub-hyperplane.
 * <p>It is guaranteed that this method will be called after {@link #visitOrder visitOrder} has been called for a given node,
 * it wil be called exactly once for each internal node.</p></text>
      <param>node BSP node guaranteed to have a non null cut sub-hyperplane</param>
      <see>#visitLeafNode</see>
    </javadoc>
    <method name="visitLeafNode" type="void" startLine="109" endLine="113" />
    <javadoc>
      <text>* Visit a leaf BSP tree node node having a null sub-hyperplane.</text>
      <param>node leaf BSP node having a null sub-hyperplane</param>
      <see>#visitInternalNode</see>
    </javadoc>
  </interface>
</source>
