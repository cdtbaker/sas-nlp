<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.linear">
  <import name="java.io.IOException" />
  <import name="java.io.ObjectInputStream" />
  <import name="java.io.ObjectOutputStream" />
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.linear.MatrixUtils" />
  <import name="org.apache.commons.math3.linear.RealVector" />
  <import name="org.apache.commons.math3.linear.ArrayRealVector" />
  <class name="LinearObjectiveFunction" startLine="29">
    <implements name="Serializable" />
    <javadoc>
      <text>* An objective function for a linear optimization problem.
 * <p>
 * A linear objective function has one the form:
 * <pre>
 * c<sub>1</sub>x<sub>1</sub> + ... c<sub>n</sub>x<sub>n</sub> + d
 * </pre>
 * The c<sub>i</sub> and d are the coefficients of the equation,
 * the x<sub>i</sub> are the coordinates of the current point.
 * </p></text>
      <version>$Id: LinearObjectiveFunction.java 1422230 2012-12-15 12:11:13Z erans $</version>
      <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Coefficients of the constraint (c<sub>i</sub>).</text>
    </javadoc>
    <declaration type="RealVector" name="coefficients" />
    <javadoc>
      <text>* Constant term of the linear equation.</text>
    </javadoc>
    <declaration type="double" name="constantTerm" />
    <javadoc>
      <param>coefficients The coefficients for the linear equation being optimized</param>
      <param>constantTerm The constant term of the linear equation</param>
    </javadoc>
    <method type="constructor" name="LinearObjectiveFunction" startLine="59" endLine="61" />
    <javadoc>
      <param>coefficients The coefficients for the linear equation being optimized</param>
      <param>constantTerm The constant term of the linear equation</param>
    </javadoc>
    <method type="constructor" name="LinearObjectiveFunction" startLine="67" endLine="70" />
    <javadoc>
      <text>* Get the coefficients of the linear equation being optimized.</text>
      <return>coefficients of the linear equation being optimized</return>
    </javadoc>
    <method type="RealVector" name="getCoefficients" startLine="76" endLine="78" />
    <javadoc>
      <text>* Get the constant of the linear equation being optimized.</text>
      <return>constant of the linear equation being optimized</return>
    </javadoc>
    <method type="double" name="getConstantTerm" startLine="84" endLine="86" />
    <javadoc>
      <text>* Compute the value of the linear equation at the current point</text>
      <param>point point at which linear equation must be evaluated</param>
      <return>value of the linear equation at the current point</return>
    </javadoc>
    <method type="double" name="getValue" startLine="93" endLine="95" />
    <javadoc>
      <text>* Compute the value of the linear equation at the current point</text>
      <param>point point at which linear equation must be evaluated</param>
      <return>value of the linear equation at the current point</return>
    </javadoc>
    <method type="double" name="getValue" startLine="102" endLine="104" />
    <method type="boolean" name="equals" startLine="107" endLine="119">
      <scope startLine="109" endLine="111" />
      <scope startLine="113" endLine="116">
        <declaration type="LinearObjectiveFunction" name="rhs" />
      </scope>
    </method>
    <method type="int" name="hashCode" startLine="122" endLine="124" />
    <javadoc>
      <text>* Serialize the instance.</text>
      <param>oos stream where object should be written</param>
      <throws>IOException if object cannot be written to stream</throws>
    </javadoc>
    <method type="void" name="writeObject" startLine="132" endLine="135" />
    <javadoc>
      <text>* Deserialize the instance.</text>
      <param>ois stream from which the object should be read</param>
      <throws>ClassNotFoundException if a class in the stream cannot be found</throws>
      <throws>IOException if object cannot be read from the stream</throws>
    </javadoc>
    <method type="void" name="readObject" startLine="144" endLine="147" />
  </class>
</source>
