<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="RectangularCholeskyDecomposition" startLine="22">
    <javadoc>
      <text>* Calculates the rectangular Cholesky decomposition of a matrix.
 * <p>The rectangular Cholesky decomposition of a real symmetric positive
 * semidefinite matrix A consists of a rectangular matrix B with the same
 * number of rows such that: A is almost equal to BB<sup>T</sup>, depending
 * on a user-defined tolerance. In a sense, this is the square root of A.</p>
 * <p>The difference with respect to the regular {@link CholeskyDecomposition}is that rows/columns may be permuted (hence the rectangular shape instead
 * of the traditional triangular shape) and there is a threshold to ignore
 * small diagonal elements. This is used for example to generate {@link org.apache.commons.math3.random.CorrelatedRandomVectorGenerator correlated
 * random n-dimensions vectors} in a p-dimension subspace (p < n).
 * In other words, it allows generating random vectors from a covariance
 * matrix that is only positive semidefinite, and not positive definite.</p>
 * <p>Rectangular Cholesky decomposition is <em>not</em> suited for solving
 * linear systems, so it does not provide any {@link DecompositionSolverdecomposition solver}.</p></text>
      <see><a href="http://mathworld.wolfram.com/CholeskyDecomposition.html">MathWorld</a></see>
      <see><a href="http://en.wikipedia.org/wiki/Cholesky_decomposition">Wikipedia</a></see>
      <version>$Id: RectangularCholeskyDecomposition.java 1422313 2012-12-15 18:53:41Z psteitz $</version>
      <since>2.0 (changed to concrete class in 3.0)</since>
    </javadoc>
    <javadoc>
      <text>* Permutated Cholesky root of the symmetric positive semidefinite matrix.</text>
    </javadoc>
    <declaration type="RealMatrix" name="root" />
    <javadoc>
      <text>* Rank of the symmetric positive semidefinite matrix.</text>
    </javadoc>
    <declaration type="int" name="rank" />
    <javadoc>
      <text>* Decompose a symmetric positive semidefinite matrix.
 * <p>
 * <b>Note:</b> this constructor follows the linpack method to detect dependent
 * columns by proceeding with the Cholesky algorithm until a nonpositive diagonal
 * element is encountered.</text>
      <see><a href="http://eprints.ma.man.ac.uk/1193/01/covered/MIMS_ep2008_56.pdf">
     * Analysis of the Cholesky Decomposition of a Semi-definite Matrix</a></see>
      <param>matrix Symmetric positive semidefinite matrix.</param>
      <exception>NonPositiveDefiniteMatrixException if the matrix is not
 * positive semidefinite.</exception>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="RectangularCholeskyDecomposition" startLine="69" endLine="71" />
    <javadoc>
      <text>* Decompose a symmetric positive semidefinite matrix.</text>
      <param>matrix Symmetric positive semidefinite matrix.</param>
      <param>small Diagonal elements threshold under which columns are
 * considered to be dependent on previous ones and are discarded.</param>
      <exception>NonPositiveDefiniteMatrixException if the matrix is not
 * positive semidefinite.</exception>
    </javadoc>
    <method type="constructor" name="RectangularCholeskyDecomposition" startLine="83" endLine="173">
      <declaration type="int" name="order" />
      <declaration type="double[][]" name="c" />
      <declaration type="double[][]" name="b" />
      <declaration type="int[]" name="index" />
      <scope startLine="90" endLine="92" />
      <declaration type="int" name="r" />
      <scope startLine="95" endLine="162">
        <declaration type="int" name="swapR" />
        <scope startLine="99" endLine="105">
          <declaration type="int" name="ii" />
          <declaration type="int" name="isr" />
          <scope startLine="102" endLine="104" />
        </scope>
        <scope startLine="109" endLine="116">
          <declaration type="int" name="tmpIndex" />
          <declaration type="double[]" name="tmpRow" />
        </scope>
        <declaration type="int" name="ir" />
        <scope startLine="120" endLine="139">
          <scope startLine="122" endLine="124" />
          <scope startLine="127" endLine="133">
            <scope startLine="128" endLine="132" />
          </scope>
        </scope>
        <scope startLine="139" endLine="161">
          <declaration type="double" name="sqrt" />
          <declaration type="double" name="inverse" />
          <declaration type="double" name="inverse2" />
          <scope startLine="146" endLine="157">
            <declaration type="int" name="ii" />
            <declaration type="double" name="e" />
            <scope startLine="151" endLine="156">
              <declaration type="int" name="ij" />
              <declaration type="double" name="f" />
            </scope>
          </scope>
        </scope>
        <comment>find maximal diagonal element</comment>
        <comment>swap elements</comment>
        <comment>check diagonal element</comment>
        <comment>check remaining diagonal elements</comment>
        <comment>there is at least one sufficiently negative diagonal element,</comment>
        <comment>the symmetric positive semidefinite matrix is wrong</comment>
        <comment>all remaining diagonal elements are close to zero, we consider we have</comment>
        <comment>found the rank of the symmetric positive semidefinite matrix</comment>
        <comment>transform the matrix</comment>
        <comment>prepare next iteration</comment>
      </scope>
      <scope startLine="167" endLine="171">
        <scope startLine="168" endLine="170" />
      </scope>
      <comment>build the root matrix</comment>
    </method>
    <javadoc>
      <text>* Get the root of the covariance matrix.
 * The root is the rectangular matrix <code>B</code> such that
 * the covariance matrix is equal to <code>B.B<sup>T</sup></code></text>
      <return>root of the square matrix</return>
      <see>#getRank()</see>
    </javadoc>
    <method type="RealMatrix" name="getRootMatrix" startLine="181" endLine="183" />
    <javadoc>
      <text>* Get the rank of the symmetric positive semidefinite matrix.
 * The r is the number of independent rows in the symmetric positive semidefinite
 * matrix, it is also the number of columns of the rectangular
 * matrix of the decomposition.</text>
      <return>r of the square matrix.</return>
      <see>#getRootMatrix()</see>
    </javadoc>
    <method type="int" name="getRank" startLine="192" endLine="194" />
  </class>
</source>
