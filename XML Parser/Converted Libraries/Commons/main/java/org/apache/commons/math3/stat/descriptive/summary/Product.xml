<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive.summary">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic" />
  <import name="org.apache.commons.math3.stat.descriptive.WeightedEvaluation" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="Product" extends="AbstractStorelessUnivariateStatistic" startLine="28">
    <implements name="Serializable" />
    <implements name="WeightedEvaluation" />
    <javadoc>
      <text>* Returns the product of the available values.
 * <p>
 * If there are no values in the dataset, then 1 is returned.
 * If any of the values are
 * <code>NaN</code>, then <code>NaN</code> is returned.</p>
 * <p>
 * <strong>Note that this implementation is not synchronized.</strong> If
 * multiple threads access an instance of this class concurrently, and at least
 * one of the threads invokes the <code>increment()</code> or
 * <code>clear()</code> method, it must be synchronized externally.</p></text>
      <version>$Id: Product.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* The number of values that have been added</text>
    </javadoc>
    <declaration type="long" name="n" />
    <javadoc>
      <text>* The current Running Product.</text>
    </javadoc>
    <declaration type="double" name="value" />
    <javadoc>
      <text>* Create a Product instance</text>
    </javadoc>
    <method type="constructor" name="Product" startLine="58" endLine="61" />
    <javadoc>
      <text>* Copy constructor, creates a new {@code Product} identical
 * to the {@code original}</text>
      <param>original the {@code Product} instance to copy</param>
      <throws>NullArgumentException  if original is null</throws>
    </javadoc>
    <method type="constructor" name="Product" startLine="70" endLine="72" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="increment" startLine="78" endLine="81" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getResult" startLine="87" endLine="89" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="long" name="getN" startLine="94" endLine="96" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="clear" startLine="102" endLine="105" />
    <javadoc>
      <text>* Returns the product of the entries in the specified portion of
 * the input array, or <code>Double.NaN</code> if the designated subarray
 * is empty.
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if the array is null.</p></text>
      <param>values the input array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the product of the values or 1 if length = 0</return>
      <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="123" endLine="132">
      <declaration type="double" name="product" />
      <scope startLine="125" endLine="130">
        <scope startLine="127" endLine="129" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>Returns the weighted product of the entries in the specified portion of
 * the input array, or <code>Double.NaN</code> if the designated subarray
 * is empty.</p>
 * <p>Throws <code>MathIllegalArgumentException</code> if any of the following are true:
 * <ul><li>the values array is null</li>
 * <li>the weights array is null</li>
 * <li>the weights array does not have the same length as the values array</li>
 * <li>the weights array contains one or more infinite values</li>
 * <li>the weights array contains one or more NaN values</li>
 * <li>the weights array contains negative values</li>
 * <li>the start and length arguments do not determine a valid array</li>
 * </ul></p>
 * <p>Uses the formula, <pre>
 * weighted product = &prod;values[i]<sup>weights[i]</sup>
 * </pre>
 * that is, the weights are applied as exponents when computing the weighted product.</p></text>
      <param>values the input array</param>
      <param>weights the weights array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the product of the values or 1 if length = 0</return>
      <throws>MathIllegalArgumentException if the parameters are not valid</throws>
      <since>2.1</since>
    </javadoc>
    <method type="double" name="evaluate" startLine="163" endLine="172">
      <declaration type="double" name="product" />
      <scope startLine="165" endLine="170">
        <scope startLine="167" endLine="169" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>Returns the weighted product of the entries in the input array.</p>
 * <p>Throws <code>MathIllegalArgumentException</code> if any of the following are true:
 * <ul><li>the values array is null</li>
 * <li>the weights array is null</li>
 * <li>the weights array does not have the same length as the values array</li>
 * <li>the weights array contains one or more infinite values</li>
 * <li>the weights array contains one or more NaN values</li>
 * <li>the weights array contains negative values</li>
 * </ul></p>
 * <p>Uses the formula, <pre>
 * weighted product = &prod;values[i]<sup>weights[i]</sup>
 * </pre>
 * that is, the weights are applied as exponents when computing the weighted product.</p></text>
      <param>values the input array</param>
      <param>weights the weights array</param>
      <return>the product of the values or Double.NaN if length = 0</return>
      <throws>MathIllegalArgumentException if the parameters are not valid</throws>
      <since>2.1</since>
    </javadoc>
    <method type="double" name="evaluate" startLine="198" endLine="200" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Product" name="copy" startLine="207" endLine="212">
      <declaration type="Product" name="result" />
      <comment>No try-catch or advertised exception because args are valid</comment>
    </method>
    <javadoc>
      <text>* Copies source to dest.
 * <p>Neither source nor dest can be null.</p></text>
      <param>source Product to copy</param>
      <param>dest Product to copy to</param>
      <throws>NullArgumentException if either source or dest is null</throws>
    </javadoc>
    <method type="void" name="copy" startLine="223" endLine="229" />
  </class>
</source>
