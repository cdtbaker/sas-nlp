<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode.events">
  <import name="java.util.Arrays" />
  <class name="EventFilter" startLine="22">
    <implements name="EventHandler" />
    <javadoc>
      <text>* Wrapper used to detect only increasing or decreasing events.
 * <p>General {@link EventHandler events} are defined implicitely
 * by a {@link EventHandler#g(double,double[]) g function} crossing
 * zero. This function needs to be continuous in the event neighborhood,
 * and its sign must remain consistent between events. This implies that
 * during an ODE integration, events triggered are alternately events
 * for which the function increases from negative to positive values,
 * and events for which the function decreases from positive to
 * negative values.
 * </p>
 * <p>Sometimes, users are only interested in one type of event (say
 * increasing events for example) and not in the other type. In these
 * cases, looking precisely for all events location and triggering
 * events that will later be ignored is a waste of computing time.</p>
 * <p>Users can wrap a regular {@link EventHandler event handler} in
 * an instance of this class and provide this wrapping instance to
 * the {@link org.apache.commons.math3.ode.FirstOrderIntegrator ODE solver}in order to avoid wasting time looking for uninteresting events.
 * The wrapper will intercept the calls to the {@link EventHandler#g(double,double[]) g function} and to the {@link EventHandler#eventOccurred(double,double[],boolean)eventOccurred} method in order to ignore uninteresting events. The
 * wrapped regular {@link EventHandler event handler} will the see only
 * the interesting events, i.e. either only {@code increasing} events or{@code decreasing} events. the number of calls to the {@link EventHandler#g(double,double[]) g function} will also be reduced.</p></text>
      <version>$Id: EventFilter.java 1458491 2013-03-19 20:13:11Z luc $</version>
      <since>3.2</since>
    </javadoc>
    <javadoc>
      <text>* Number of past transformers updates stored.</text>
    </javadoc>
    <declaration type="int" name="HISTORY_SIZE" />
    <javadoc>
      <text>* Wrapped event handler.</text>
    </javadoc>
    <declaration type="EventHandler" name="rawHandler" />
    <javadoc>
      <text>* Filter to use.</text>
    </javadoc>
    <declaration type="FilterType" name="filter" />
    <javadoc>
      <text>* Transformers of the g function.</text>
    </javadoc>
    <declaration type="Transformer[]" name="transformers" />
    <javadoc>
      <text>* Update time of the transformers.</text>
    </javadoc>
    <declaration type="double[]" name="updates" />
    <javadoc>
      <text>* Indicator for forward integration.</text>
    </javadoc>
    <declaration type="boolean" name="forward" />
    <javadoc>
      <text>* Extreme time encountered so far.</text>
    </javadoc>
    <declaration type="double" name="extremeT" />
    <javadoc>
      <text>* Wrap an {@link EventHandler event handler}.</text>
      <param>rawHandler event handler to wrap</param>
      <param>filter filter to use</param>
    </javadoc>
    <method type="constructor" name="EventFilter" startLine="83" endLine="88" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="init" startLine="91" endLine="102">
      <comment>delegate to raw handler</comment>
      <comment>initialize events triggering logic</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="g" startLine="105" endLine="191">
      <declaration type="double" name="rawG" />
      <scope startLine="110" endLine="150">
        <declaration type="int" name="last" />
        <scope startLine="112" endLine="136">
          <declaration type="Transformer" name="previous" />
          <declaration type="Transformer" name="next" />
          <scope startLine="118" endLine="129" />
        </scope>
        <scope startLine="136" endLine="149">
          <scope startLine="140" endLine="145">
            <scope startLine="141" endLine="144" />
          </scope>
        </scope>
        <comment>we are at the forward end of the history</comment>
        <comment>check if a new rough root has been crossed</comment>
        <comment>there is a root somewhere between extremeT end t</comment>
        <comment>the new transformer, which is valid on both sides of the root,</comment>
        <comment>so it is valid for t (this is how we have just computed it above),</comment>
        <comment>but it was already valid before, so we store the switch at extremeT</comment>
        <comment>for safety, to ensure the previous transformer is not applied too</comment>
        <comment>close of the root</comment>
        <comment>apply the transform</comment>
        <comment>we are in the middle of the history</comment>
        <comment>select the transformer</comment>
        <comment>apply the transform</comment>
      </scope>
      <scope startLine="150" endLine="189">
        <scope startLine="151" endLine="175">
          <declaration type="Transformer" name="previous" />
          <declaration type="Transformer" name="next" />
          <scope startLine="157" endLine="168" />
        </scope>
        <scope startLine="175" endLine="188">
          <scope startLine="179" endLine="184">
            <scope startLine="180" endLine="183" />
          </scope>
        </scope>
        <comment>we are at the backward end of the history</comment>
        <comment>check if a new rough root has been crossed</comment>
        <comment>there is a root somewhere between extremeT end t</comment>
        <comment>the new transformer, which is valid on both sides of the root,</comment>
        <comment>so it is valid for t (this is how we have just computed it above),</comment>
        <comment>but it was already valid before, so we store the switch at extremeT</comment>
        <comment>for safety, to ensure the previous transformer is not applied too</comment>
        <comment>close of the root</comment>
        <comment>apply the transform</comment>
        <comment>we are in the middle of the history</comment>
        <comment>select the transformer</comment>
        <comment>apply the transform</comment>
      </scope>
      <comment>search which transformer should be applied to g</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Action" name="eventOccurred" startLine="194" endLine="197">
      <comment>delegate to raw handler, fixing increasing status on the fly</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="resetState" startLine="200" endLine="203">
      <comment>delegate to raw handler</comment>
    </method>
  </class>
</source>
