<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="java.util.Arrays" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="TriDiagonalTransformer" startLine="25">
    <javadoc>
      <text>* Class transforming a symmetrical matrix to tridiagonal shape.
 * <p>A symmetrical m &times; m matrix A can be written as the product of three matrices:
 * A = Q &times; T &times; Q<sup>T</sup> with Q an orthogonal matrix and T a symmetrical
 * tridiagonal matrix. Both Q and T are m &times; m matrices.</p>
 * <p>This implementation only uses the upper part of the matrix, the part below the
 * diagonal is not accessed at all.</p>
 * <p>Transformation to tridiagonal shape is often not a goal by itself, but it is
 * an intermediate step in more general decomposition algorithms like {@link EigenDecomposition eigen decomposition}. This class is therefore intended for internal
 * use by the library and is not public. As a consequence of this explicitly limited scope,
 * many methods directly returns references to internal arrays, not copies.</p></text>
      <version>$Id: TriDiagonalTransformer.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Householder vectors.</text>
    </javadoc>
    <declaration type="double" name="householderVectors" />
    <javadoc>
      <text>* Main diagonal.</text>
    </javadoc>
    <declaration type="double[]" name="main" />
    <javadoc>
      <text>* Secondary diagonal.</text>
    </javadoc>
    <declaration type="double[]" name="secondary" />
    <javadoc>
      <text>* Cached value of Q.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedQ" />
    <javadoc>
      <text>* Cached value of Qt.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedQt" />
    <javadoc>
      <text>* Cached value of T.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedT" />
    <javadoc>
      <text>* Build the transformation to tridiagonal shape of a symmetrical matrix.
 * <p>The specified matrix is assumed to be symmetrical without any check.
 * Only the upper triangular part of the matrix is used.</p></text>
      <param>matrix Symmetrical matrix to transform.</param>
      <throws>NonSquareMatrixException if the matrix is not square.</throws>
    </javadoc>
    <method type="constructor" name="TriDiagonalTransformer" startLine="62" endLine="78">
      <scope startLine="63" endLine="66" />
      <declaration type="int" name="m" />
      <comment>transform matrix</comment>
    </method>
    <javadoc>
      <text>* Returns the matrix Q of the transform.
 * <p>Q is an orthogonal matrix, i.e. its transpose is also its inverse.</p></text>
      <return>the Q matrix</return>
    </javadoc>
    <method type="RealMatrix" name="getQ" startLine="85" endLine="90">
      <scope startLine="86" endLine="88" />
    </method>
    <javadoc>
      <text>* Returns the transpose of the matrix Q of the transform.
 * <p>Q is an orthogonal matrix, i.e. its transpose is also its inverse.</p></text>
      <return>the Q matrix</return>
    </javadoc>
    <method type="RealMatrix" name="getQT" startLine="97" endLine="132">
      <scope startLine="98" endLine="128">
        <declaration type="int" name="m" />
        <declaration type="double[][]" name="qta" />
        <scope startLine="103" endLine="125">
          <declaration type="double[]" name="hK" />
          <scope startLine="106" endLine="124">
            <declaration type="double" name="inv" />
            <declaration type="double" name="beta" />
            <scope startLine="110" endLine="112" />
            <scope startLine="113" endLine="123">
              <scope startLine="115" endLine="117" />
              <scope startLine="120" endLine="122" />
            </scope>
          </scope>
        </scope>
        <comment>build up first part of the matrix by applying Householder transforms</comment>
      </scope>
      <comment>return the cached matrix</comment>
    </method>
    <javadoc>
      <text>* Returns the tridiagonal matrix T of the transform.</text>
      <return>the T matrix</return>
    </javadoc>
    <method type="RealMatrix" name="getT" startLine="138" endLine="156">
      <scope startLine="139" endLine="152">
        <declaration type="int" name="m" />
        <declaration type="double[][]" name="ta" />
        <scope startLine="142" endLine="150">
          <scope startLine="144" endLine="146" />
          <scope startLine="147" endLine="149" />
        </scope>
      </scope>
      <comment>return the cached matrix</comment>
    </method>
    <javadoc>
      <text>* Get the Householder vectors of the transform.
 * <p>Note that since this class is only intended for internal use,
 * it returns directly a reference to its internal arrays, not a copy.</p></text>
      <return>the main diagonal elements of the B matrix</return>
    </javadoc>
    <method type="double[][]" name="getHouseholderVectorsRef" startLine="164" endLine="166" />
    <javadoc>
      <text>* Get the main diagonal elements of the matrix T of the transform.
 * <p>Note that since this class is only intended for internal use,
 * it returns directly a reference to its internal arrays, not a copy.</p></text>
      <return>the main diagonal elements of the T matrix</return>
    </javadoc>
    <method type="double[]" name="getMainDiagonalRef" startLine="174" endLine="176" />
    <javadoc>
      <text>* Get the secondary diagonal elements of the matrix T of the transform.
 * <p>Note that since this class is only intended for internal use,
 * it returns directly a reference to its internal arrays, not a copy.</p></text>
      <return>the secondary diagonal elements of the T matrix</return>
    </javadoc>
    <method type="double[]" name="getSecondaryDiagonalRef" startLine="184" endLine="186" />
    <javadoc>
      <text>* Transform original matrix to tridiagonal form.
 * <p>Transformation is done using Householder transforms.</p></text>
    </javadoc>
    <method type="void" name="transform" startLine="192" endLine="253">
      <declaration type="int" name="m" />
      <declaration type="double[]" name="z" />
      <scope startLine="195" endLine="251">
        <declaration type="double[]" name="hK" />
        <declaration type="double" name="xNormSqr" />
        <scope startLine="201" endLine="204">
          <declaration type="double" name="c" />
        </scope>
        <declaration type="double" name="a" />
        <scope startLine="207" endLine="250">
          <declaration type="double" name="beta" />
          <scope startLine="218" endLine="228">
            <declaration type="double[]" name="hI" />
            <declaration type="double" name="hKI" />
            <declaration type="double" name="zI" />
            <scope startLine="222" endLine="226">
              <declaration type="double" name="hIJ" />
            </scope>
          </scope>
          <declaration type="double" name="gamma" />
          <scope startLine="232" endLine="234" />
          <scope startLine="238" endLine="240" />
          <scope startLine="244" endLine="249">
            <declaration type="double[]" name="hI" />
            <scope startLine="246" endLine="248" />
          </scope>
        </scope>
        <comment>zero-out a row and a column simultaneously</comment>
        <comment>apply Householder transform from left and right simultaneously</comment>
        <comment>compute a = beta A v, where v is the Householder vector</comment>
        <comment>this loop is written in such a way</comment>
        <comment>1) only the upper triangular part of the matrix is accessed</comment>
        <comment>2) access is cache-friendly for a matrix stored in rows</comment>
        <comment>compute gamma = beta vT z / 2</comment>
        <comment>compute z = z - gamma v</comment>
        <comment>update matrix: A = A - v zT - z vT</comment>
        <comment>only the upper triangular part of the matrix is updated</comment>
      </scope>
    </method>
  </class>
</source>
