<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.fraction">
  <import name="java.io.Serializable" />
  <import name="java.math.BigInteger" />
  <import name="java.text.FieldPosition" />
  <import name="java.text.NumberFormat" />
  <import name="java.text.ParsePosition" />
  <import name="java.util.Locale" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.MathParseException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <class name="BigFractionFormat" extends="AbstractFormat" startLine="31">
    <implements name="Serializable" />
    <javadoc>
      <text>* Formats a BigFraction number in proper format or improper format.
 * <p>
 * The number format for each of the whole number, numerator and,
 * denominator can be configured.
 * </p></text>
      <since>2.0</since>
      <version>$Id: BigFractionFormat.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Create an improper formatting instance with the default number format
 * for the numerator and denominator.</text>
    </javadoc>
    <method type="constructor" name="BigFractionFormat" startLine="50" endLine="51" />
    <javadoc>
      <text>* Create an improper formatting instance with a custom number format for
 * both the numerator and denominator.</text>
      <param>format the custom format for both the numerator and denominator.</param>
    </javadoc>
    <method type="constructor" name="BigFractionFormat" startLine="58" endLine="60" />
    <javadoc>
      <text>* Create an improper formatting instance with a custom number format for
 * the numerator and a custom number format for the denominator.</text>
      <param>numeratorFormat the custom format for the numerator.</param>
      <param>denominatorFormat the custom format for the denominator.</param>
    </javadoc>
    <method type="constructor" name="BigFractionFormat" startLine="69" endLine="71" />
    <javadoc>
      <text>* Get the set of locales for which complex formats are available.  This
 * is the same set as the {@link NumberFormat} set.</text>
      <return>available complex format locales.</return>
    </javadoc>
    <method type="Locale[]" name="getAvailableLocales" startLine="78" endLine="80" />
    <javadoc>
      <text>* This static method calls formatBigFraction() on a default instance of
 * BigFractionFormat.</text>
      <param>f BigFraction object to format</param>
      <return>A formatted BigFraction in proper form.</return>
    </javadoc>
    <method type="String" name="formatBigFraction" startLine="89" endLine="91" />
    <javadoc>
      <text>* Returns the default complex format for the current locale.</text>
      <return>the default complex format.</return>
    </javadoc>
    <method type="BigFractionFormat" name="getImproperInstance" startLine="97" endLine="99" />
    <javadoc>
      <text>* Returns the default complex format for the given locale.</text>
      <param>locale the specific locale used by the format.</param>
      <return>the complex format specific to the given locale.</return>
    </javadoc>
    <method type="BigFractionFormat" name="getImproperInstance" startLine="106" endLine="108" />
    <javadoc>
      <text>* Returns the default complex format for the current locale.</text>
      <return>the default complex format.</return>
    </javadoc>
    <method type="BigFractionFormat" name="getProperInstance" startLine="114" endLine="116" />
    <javadoc>
      <text>* Returns the default complex format for the given locale.</text>
      <param>locale the specific locale used by the format.</param>
      <return>the complex format specific to the given locale.</return>
    </javadoc>
    <method type="BigFractionFormat" name="getProperInstance" startLine="123" endLine="125" />
    <javadoc>
      <text>* Formats a {@link BigFraction} object to produce a string.  The BigFraction is
 * output in improper format.</text>
      <param>BigFraction the object to format.</param>
      <param>toAppendTo where the text is to be appended</param>
      <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
      <return>the value passed in as toAppendTo.</return>
    </javadoc>
    <method type="StringBuffer" name="format" startLine="138" endLine="148" />
    <javadoc>
      <text>* Formats an object and appends the result to a StringBuffer.
 * <code>obj</code> must be either a  {@link BigFraction} object or a{@link BigInteger} object or a {@link Number} object. Any other type of
 * object will result in an {@link IllegalArgumentException} being thrown.</text>
      <param>obj the object to format.</param>
      <param>toAppendTo where the text is to be appended</param>
      <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
      <return>the value passed in as toAppendTo.</return>
      <see>java.text.Format#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)</see>
      <throws>MathIllegalArgumentException if <code>obj</code> is not a valid type.</throws>
    </javadoc>
    <method type="StringBuffer" name="format" startLine="166" endLine="181">
      <declaration type="StringBuffer" name="ret" />
      <scope startLine="169" endLine="171" />
      <scope startLine="171" endLine="173" />
      <scope startLine="173" endLine="176" />
      <scope startLine="176" endLine="178" />
    </method>
    <javadoc>
      <text>* Parses a string to produce a {@link BigFraction} object.</text>
      <param>source the string to parse</param>
      <return>the parsed {@link BigFraction} object.</return>
      <exception>MathParseException if the beginning of the specified string
 * cannot be parsed.</exception>
    </javadoc>
    <method type="BigFraction" name="parse" startLine="191" endLine="198">
      <declaration type="ParsePosition" name="parsePosition" />
      <declaration type="BigFraction" name="result" />
      <scope startLine="194" endLine="196" />
    </method>
    <javadoc>
      <text>* Parses a string to produce a {@link BigFraction} object.
 * This method expects the string to be formatted as an improper BigFraction.</text>
      <param>source the string to parse</param>
      <param>pos input/output parsing parameter.</param>
      <return>the parsed {@link BigFraction} object.</return>
    </javadoc>
    <method type="BigFraction" name="parse" startLine="208" endLine="258">
      <declaration type="int" name="initialIndex" />
      <declaration type="BigInteger" name="num" />
      <scope startLine="216" endLine="222">
        <comment>invalid integer number</comment>
        <comment>set index back to initial, error index should already be set</comment>
        <comment>character examined.</comment>
      </scope>
      <declaration type="int" name="startIndex" />
      <declaration type="char" name="c" />
      <declaration type="BigInteger" name="den" />
      <scope startLine="249" endLine="255">
        <comment>invalid integer number</comment>
        <comment>set index back to initial, error index should already be set</comment>
        <comment>character examined.</comment>
      </scope>
      <comment>parse whitespace</comment>
      <comment>parse numerator</comment>
      <comment>parse '/'</comment>
      <comment>no '/'</comment>
      <comment>return num as a BigFraction</comment>
      <comment>found '/', continue parsing denominator</comment>
      <comment>invalid '/'</comment>
      <comment>set index back to initial, error index should be the last</comment>
      <comment>character examined.</comment>
      <comment>parse whitespace</comment>
      <comment>parse denominator</comment>
    </method>
    <javadoc>
      <text>* Parses a string to produce a <code>BigInteger</code>.</text>
      <param>source the string to parse</param>
      <param>pos input/output parsing parameter.</param>
      <return>a parsed <code>BigInteger</code> or null if string does not
 * contain a BigInteger at the specified position</return>
    </javadoc>
    <method type="BigInteger" name="parseNextBigInteger" startLine="268" endLine="286">
      <declaration type="int" name="start" />
      <declaration type="int" name="end" />
      <scope startLine="273" endLine="275" />
      <scope startLine="277" endLine="281">
        <declaration type="BigInteger" name="n" />
      </scope>
      <scope startLine="281" endLine="284" />
    </method>
  </class>
</source>
