<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.geometry.euclidean.threed">
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.geometry.Vector" />
  <import name="org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D" />
  <import name="org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet" />
  <import name="org.apache.commons.math3.geometry.euclidean.oned.Vector1D" />
  <import name="org.apache.commons.math3.geometry.partitioning.Embedding" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.Precision" />
  <class name="Line" startLine="29">
    <implements name="Embedding<Euclidean3D,Euclidean1D>" />
    <javadoc>
      <text>* The class represent lines in a three dimensional space.
 * <p>Each oriented line is intrinsically associated with an abscissa
 * which is a coordinate on the line. The point at abscissa 0 is the
 * orthogonal projection of the origin on the line, another equivalent
 * way to express this is to say that it is the point of the line
 * which is closest to the origin. Abscissa increases in the line
 * direction.</p></text>
      <version>$Id: Line.java 1453218 2013-03-06 08:53:28Z luc $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Line direction.</text>
    </javadoc>
    <declaration type="Vector3D" name="direction" />
    <javadoc>
      <text>* Line point closest to the origin.</text>
    </javadoc>
    <declaration type="Vector3D" name="zero" />
    <javadoc>
      <text>* Build a line from two points.</text>
      <param>p1 first point belonging to the line (this can be any point)</param>
      <param>p2 second point belonging to the line (this can be any point, different from p1)</param>
      <exception>MathIllegalArgumentException if the points are equal</exception>
    </javadoc>
    <method type="constructor" name="Line" startLine="54" endLine="56" />
    <javadoc>
      <text>* Copy constructor.
 * <p>The created instance is completely independent from the
 * original instance, it is a deep copy.</p></text>
      <param>line line to copy</param>
    </javadoc>
    <method type="constructor" name="Line" startLine="63" endLine="66" />
    <javadoc>
      <text>* Reset the instance as if built from two points.</text>
      <param>p1 first point belonging to the line (this can be any point)</param>
      <param>p2 second point belonging to the line (this can be any point, different from p1)</param>
      <exception>MathIllegalArgumentException if the points are equal</exception>
    </javadoc>
    <method type="void" name="reset" startLine="73" endLine="81">
      <declaration type="Vector3D" name="delta" />
      <declaration type="double" name="norm2" />
      <scope startLine="76" endLine="78" />
    </method>
    <javadoc>
      <text>* Get a line with reversed direction.</text>
      <return>a new instance, with reversed direction</return>
    </javadoc>
    <method type="Line" name="revert" startLine="86" endLine="90">
      <declaration type="Line" name="reverted" />
    </method>
    <javadoc>
      <text>* Get the normalized direction vector.</text>
      <return>normalized direction vector</return>
    </javadoc>
    <method type="Vector3D" name="getDirection" startLine="95" endLine="97" />
    <javadoc>
      <text>* Get the line point closest to the origin.</text>
      <return>line point closest to the origin</return>
    </javadoc>
    <method type="Vector3D" name="getOrigin" startLine="102" endLine="104" />
    <javadoc>
      <text>* Get the abscissa of a point with respect to the line.
 * <p>The abscissa is 0 if the projection of the point and the
 * projection of the frame origin on the line are the same
 * point.</p></text>
      <param>point point to check</param>
      <return>abscissa of the point</return>
    </javadoc>
    <method type="double" name="getAbscissa" startLine="113" endLine="115" />
    <javadoc>
      <text>* Get one point from the line.</text>
      <param>abscissa desired abscissa for the point</param>
      <return>one point belonging to the line, at specified abscissa</return>
    </javadoc>
    <method type="Vector3D" name="pointAt" startLine="121" endLine="123" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>#getAbscissa(Vector3D)</see>
    </javadoc>
    <method type="Vector1D" name="toSubSpace" startLine="128" endLine="130" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <see>#pointAt(double)</see>
    </javadoc>
    <method type="Vector3D" name="toSpace" startLine="135" endLine="137" />
    <javadoc>
      <text>* Check if the instance is similar to another line.
 * <p>Lines are considered similar if they contain the same
 * points. This does not mean they are equal since they can have
 * opposite directions.</p></text>
      <param>line line to which instance should be compared</param>
      <return>true if the lines are similar</return>
    </javadoc>
    <method type="boolean" name="isSimilarTo" startLine="146" endLine="149">
      <declaration type="double" name="angle" />
    </method>
    <javadoc>
      <text>* Check if the instance contains a point.</text>
      <param>p point to check</param>
      <return>true if p belongs to the line</return>
    </javadoc>
    <method type="boolean" name="contains" startLine="155" endLine="157" />
    <javadoc>
      <text>* Compute the distance between the instance and a point.</text>
      <param>p to check</param>
      <return>distance between the instance and the point</return>
    </javadoc>
    <method type="double" name="distance" startLine="163" endLine="167">
      <declaration type="Vector3D" name="d" />
      <declaration type="Vector3D" name="n" />
    </method>
    <javadoc>
      <text>* Compute the shortest distance between the instance and another line.</text>
      <param>line line to check against the instance</param>
      <return>shortest distance between the instance and the line</return>
    </javadoc>
    <method type="double" name="distance" startLine="173" endLine="187">
      <declaration type="Vector3D" name="normal" />
      <declaration type="double" name="n" />
      <scope startLine="177" endLine="180">
        <comment>lines are parallel</comment>
      </scope>
      <declaration type="double" name="offset" />
      <comment>signed separation of the two parallel planes that contains the lines</comment>
    </method>
    <javadoc>
      <text>* Compute the point of the instance closest to another line.</text>
      <param>line line to check against the instance</param>
      <return>point of the instance closest to another line</return>
    </javadoc>
    <method type="Vector3D" name="closestPoint" startLine="193" endLine="208">
      <declaration type="double" name="cos" />
      <declaration type="double" name="n" />
      <scope startLine="197" endLine="200">
        <comment>the lines are parallel</comment>
      </scope>
      <declaration type="Vector3D" name="delta0" />
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
    </method>
    <javadoc>
      <text>* Get the intersection point of the instance and another line.</text>
      <param>line other line</param>
      <return>intersection point of the instance and the other line
 * or null if there are no intersection points</return>
    </javadoc>
    <method type="Vector3D" name="intersection" startLine="215" endLine="218">
      <declaration type="Vector3D" name="closest" />
    </method>
    <javadoc>
      <text>* Build a sub-line covering the whole line.</text>
      <return>a sub-line covering the whole line</return>
    </javadoc>
    <method type="SubLine" name="wholeLine" startLine="223" endLine="225" />
  </class>
</source>
