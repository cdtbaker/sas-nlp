<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.function">
  <import name="java.util.Arrays" />
  <import name="org.apache.commons.math3.analysis.FunctionUtils" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.DifferentiableUnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.ParametricUnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.differentiation.DerivativeStructure" />
  <import name="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.Precision" />
  <class name="Gaussian" startLine="34">
    <implements name="UnivariateDifferentiableFunction" />
    <implements name="DifferentiableUnivariateFunction" />
    <javadoc>
      <text>* <a href="http://en.wikipedia.org/wiki/Gaussian_function">
 * Gaussian</a> function.</text>
      <since>3.0</since>
      <version>$Id: Gaussian.java 1455194 2013-03-11 15:45:54Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* Mean.</text>
    </javadoc>
    <declaration type="double" name="mean" />
    <javadoc>
      <text>* Inverse of the standard deviation.</text>
    </javadoc>
    <declaration type="double" name="is" />
    <javadoc>
      <text>* Inverse of twice the square of the standard deviation.</text>
    </javadoc>
    <declaration type="double" name="i2s2" />
    <javadoc>
      <text>* Normalization factor.</text>
    </javadoc>
    <declaration type="double" name="norm" />
    <javadoc>
      <text>* Gaussian with given normalization factor, mean and standard deviation.</text>
      <param>norm Normalization factor.</param>
      <param>mean Mean.</param>
      <param>sigma Standard deviation.</param>
      <throws>NotStrictlyPositiveException if {@code sigma <= 0}.</throws>
    </javadoc>
    <method type="constructor" name="Gaussian" startLine="62" endLine="71">
      <scope startLine="63" endLine="65" />
    </method>
    <javadoc>
      <text>* Normalized gaussian with given mean and standard deviation.</text>
      <param>mean Mean.</param>
      <param>sigma Standard deviation.</param>
      <throws>NotStrictlyPositiveException if {@code sigma <= 0}.</throws>
    </javadoc>
    <method type="constructor" name="Gaussian" startLine="82" endLine="84" />
    <javadoc>
      <text>* Normalized gaussian with zero mean and unit standard deviation.</text>
    </javadoc>
    <method type="constructor" name="Gaussian" startLine="89" endLine="91" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="value" startLine="94" endLine="96" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <deprecated>as of 3.1, replaced by {@link #value(DerivativeStructure)}</deprecated>
    </javadoc>
    <method type="UnivariateFunction" name="derivative" startLine="102" endLine="104" />
    <class name="Parametric" startLine="106">
      <implements name="ParametricUnivariateFunction" />
      <javadoc>
        <text>* Parametric function where the input array contains the parameters of
 * the Gaussian, ordered as follows:
 * <ul>
 * <li>Norm</li>
 * <li>Mean</li>
 * <li>Standard deviation</li>
 * </ul></text>
      </javadoc>
      <javadoc>
        <text>* Computes the value of the Gaussian at {@code x}.</text>
        <param>x Value for which the function must be computed.</param>
        <param>param Values of norm, mean and standard deviation.</param>
        <return>the value of the function.</return>
        <throws>NullArgumentException if {@code param} is {@code null}.</throws>
        <throws>DimensionMismatchException if the size of {@code param} is
 * not 3.</throws>
        <throws>NotStrictlyPositiveException if {@code param[2]} is negative.</throws>
      </javadoc>
      <method type="double" name="value" startLine="130" endLine="136">
        <declaration type="double" name="diff" />
        <declaration type="double" name="i2s2" />
      </method>
      <javadoc>
        <text>* Computes the value of the gradient at {@code x}.
 * The components of the gradient vector are the partial
 * derivatives of the function with respect to each of the
 * <em>parameters</em> (norm, mean and standard deviation).</text>
        <param>x Value at which the gradient must be computed.</param>
        <param>param Values of norm, mean and standard deviation.</param>
        <return>the gradient vector at {@code x}.</return>
        <throws>NullArgumentException if {@code param} is {@code null}.</throws>
        <throws>DimensionMismatchException if the size of {@code param} is
 * not 3.</throws>
        <throws>NotStrictlyPositiveException if {@code param[2]} is negative.</throws>
      </javadoc>
      <method type="double[]" name="gradient" startLine="155" endLine="168">
        <declaration type="double" name="norm" />
        <declaration type="double" name="diff" />
        <declaration type="double" name="sigma" />
        <declaration type="double" name="i2s2" />
        <declaration type="double" name="n" />
        <declaration type="double" name="m" />
        <declaration type="double" name="s" />
      </method>
      <javadoc>
        <text>* Validates parameters to ensure they are appropriate for the evaluation of
 * the {@link #value(double,double[])} and {@link #gradient(double,double[])}methods.</text>
        <param>param Values of norm, mean and standard deviation.</param>
        <throws>NullArgumentException if {@code param} is {@code null}.</throws>
        <throws>DimensionMismatchException if the size of {@code param} is
 * not 3.</throws>
        <throws>NotStrictlyPositiveException if {@code param[2]} is negative.</throws>
      </javadoc>
      <method type="void" name="validateParameters" startLine="184" endLine="194">
        <scope startLine="185" endLine="187" />
        <scope startLine="188" endLine="190" />
        <scope startLine="191" endLine="193" />
      </method>
      <javadoc>
        <param>xMinusMean {@code x - mean}.</param>
        <param>norm Normalization factor.</param>
        <param>i2s2 Inverse of twice the square of the standard deviation.</param>
        <return>the value of the Gaussian at {@code x}.</return>
      </javadoc>
      <method type="double" name="value" startLine="205" endLine="207" />
      <javadoc>
        <text>* {@inheritDoc}</text>
        <since>3.1</since>
      </javadoc>
      <method type="DerivativeStructure" name="value" startLine="213" endLine="258">
        <declaration type="double" name="u" />
        <declaration type="double[]" name="f" />
        <declaration type="double[]" name="p" />
        <declaration type="double" name="u2" />
        <declaration type="double" name="coeff" />
        <scope startLine="229" endLine="231" />
        <scope startLine="231" endLine="254">
          <scope startLine="233" endLine="253">
            <declaration type="double" name="v" />
            <scope startLine="238" endLine="245">
              <scope startLine="240" endLine="242" />
              <scope startLine="242" endLine="244" />
            </scope>
            <scope startLine="246" endLine="248" />
          </scope>
          <comment>update and evaluate polynomial P_n(x)</comment>
        </scope>
        <comment>the nth order derivative of the Gaussian has the form:</comment>
        <comment>dn(g(x)/dxn = (norm / s^n) P_n(u) exp(-u^2/2) with u=(x-m)/s</comment>
        <comment>where P_n(u) is a degree n polynomial with same parity as n</comment>
        <comment>P_0(u) = 1, P_1(u) = -u, P_2(u) = u^2 - 1, P_3(u) = -u^3 + 3 u...</comment>
        <comment>the general recurrence relation for P_n is:</comment>
        <comment>P_n(u) = P_(n-1)'(u) - u P_(n-1)(u)</comment>
        <comment>as per polynomial parity, we can store coefficients of both P_(n-1) and P_n in the same array</comment>
      </method>
    </class>
  </class>
</source>
