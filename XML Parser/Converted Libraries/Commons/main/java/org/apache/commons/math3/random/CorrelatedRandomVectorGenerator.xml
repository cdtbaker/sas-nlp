<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.random">
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <import name="org.apache.commons.math3.linear.RectangularCholeskyDecomposition" />
  <class name="CorrelatedRandomVectorGenerator" startLine="24">
    <implements name="RandomVectorGenerator" />
    <javadoc>
      <text>* A {@link RandomVectorGenerator} that generates vectors with with
 * correlated components.
 * <p>Random vectors with correlated components are built by combining
 * the uncorrelated components of another random vector in such a way that
 * the resulting correlations are the ones specified by a positive
 * definite covariance matrix.</p>
 * <p>The main use for correlated random vector generation is for Monte-Carlo
 * simulation of physical problems with several variables, for example to
 * generate error vectors to be added to a nominal vector. A particularly
 * interesting case is when the generated vector should be drawn from a <a
 * href="http://en.wikipedia.org/wiki/Multivariate_normal_distribution">
 * Multivariate Normal Distribution</a>. The approach using a Cholesky
 * decomposition is quite usual in this case. However, it can be extended
 * to other cases as long as the underlying random generator provides{@link NormalizedRandomGenerator normalized values} like {@link GaussianRandomGenerator} or {@link UniformRandomGenerator}.</p>
 * <p>Sometimes, the covariance matrix for a given simulation is not
 * strictly positive definite. This means that the correlations are
 * not all independent from each other. In this case, however, the non
 * strictly positive elements found during the Cholesky decomposition
 * of the covariance matrix should not be negative either, they
 * should be null. Another non-conventional extension handling this case
 * is used here. Rather than computing <code>C = U<sup>T</sup>.U</code>
 * where <code>C</code> is the covariance matrix and <code>U</code>
 * is an upper-triangular matrix, we compute <code>C = B.B<sup>T</sup></code>
 * where <code>B</code> is a rectangular matrix having
 * more rows than columns. The number of columns of <code>B</code> is
 * the rank of the covariance matrix, and it is the dimension of the
 * uncorrelated random vector that is needed to compute the component
 * of the correlated vector. This class handles this situation
 * automatically.</p></text>
      <version>$Id: CorrelatedRandomVectorGenerator.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>1.2</since>
    </javadoc>
    <javadoc>
      <text>* Mean vector.</text>
    </javadoc>
    <declaration type="double[]" name="mean" />
    <javadoc>
      <text>* Underlying generator.</text>
    </javadoc>
    <declaration type="NormalizedRandomGenerator" name="generator" />
    <javadoc>
      <text>* Storage for the normalized vector.</text>
    </javadoc>
    <declaration type="double[]" name="normalized" />
    <javadoc>
      <text>* Root of the covariance matrix.</text>
    </javadoc>
    <declaration type="RealMatrix" name="root" />
    <javadoc>
      <text>* Builds a correlated random vector generator from its mean
 * vector and covariance matrix.</text>
      <param>mean Expected mean values for all components.</param>
      <param>covariance Covariance matrix.</param>
      <param>small Diagonal elements threshold under which  column are
 * considered to be dependent on previous ones and are discarded</param>
      <param>generator underlying generator for uncorrelated normalized
 * components.</param>
      <throws>org.apache.commons.math3.linear.NonPositiveDefiniteMatrixExceptionif the covariance matrix is not strictly positive definite.</throws>
      <throws>DimensionMismatchException if the mean and covariance
 * arrays dimensions do not match.</throws>
    </javadoc>
    <method type="constructor" name="CorrelatedRandomVectorGenerator" startLine="89" endLine="103">
      <declaration type="int" name="order" />
      <scope startLine="91" endLine="93" />
      <declaration type="RectangularCholeskyDecomposition" name="decomposition" />
    </method>
    <javadoc>
      <text>* Builds a null mean random correlated vector generator from its
 * covariance matrix.</text>
      <param>covariance Covariance matrix.</param>
      <param>small Diagonal elements threshold under which  column are
 * considered to be dependent on previous ones and are discarded.</param>
      <param>generator Underlying generator for uncorrelated normalized
 * components.</param>
      <throws>org.apache.commons.math3.linear.NonPositiveDefiniteMatrixExceptionif the covariance matrix is not strictly positive definite.</throws>
    </javadoc>
    <method type="constructor" name="CorrelatedRandomVectorGenerator" startLine="118" endLine="132">
      <declaration type="int" name="order" />
      <scope startLine="121" endLine="123" />
      <declaration type="RectangularCholeskyDecomposition" name="decomposition" />
    </method>
    <javadoc>
      <text>* Get the underlying normalized components generator.</text>
      <return>underlying uncorrelated components generator</return>
    </javadoc>
    <method type="NormalizedRandomGenerator" name="getGenerator" startLine="137" endLine="139" />
    <javadoc>
      <text>* Get the rank of the covariance matrix.
 * The rank is the number of independent rows in the covariance
 * matrix, it is also the number of columns of the root matrix.</text>
      <return>rank of the square matrix.</return>
      <see>#getRootMatrix()</see>
    </javadoc>
    <method type="int" name="getRank" startLine="147" endLine="149" />
    <javadoc>
      <text>* Get the root of the covariance matrix.
 * The root is the rectangular matrix <code>B</code> such that
 * the covariance matrix is equal to <code>B.B<sup>T</sup></code></text>
      <return>root of the square matrix</return>
      <see>#getRank()</see>
    </javadoc>
    <method type="RealMatrix" name="getRootMatrix" startLine="157" endLine="159" />
    <javadoc>
      <text>* Generate a correlated random vector.</text>
      <return>a random vector as an array of double. The returned array
 * is created at each call, the caller can do what it wants with it.</return>
    </javadoc>
    <method type="double[]" name="nextVector" startLine="165" endLine="183">
      <scope startLine="168" endLine="170" />
      <declaration type="double[]" name="correlated" />
      <scope startLine="174" endLine="179">
        <scope startLine="176" endLine="178" />
      </scope>
      <comment>generate uncorrelated vector</comment>
      <comment>compute correlated vector</comment>
    </method>
  </class>
</source>
