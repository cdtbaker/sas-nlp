<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.linear">
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.exception.TooManyIterationsException" />
  <import name="org.apache.commons.math3.optim.PointValuePair" />
  <import name="org.apache.commons.math3.util.Precision" />
  <class name="SimplexSolver" extends="LinearOptimizer" startLine="25">
    <javadoc>
      <text>* Solves a linear problem using the "Two-Phase Simplex" method.
 * <p>
 * <b>Note:</b> Depending on the problem definition, the default convergence criteria
 * may be too strict, resulting in {@link NoFeasibleSolutionException} or{@link TooManyIterationsException}. In such a case it is advised to adjust these
 * criteria with more appropriate values, e.g. relaxing the epsilon value.
 * <p>
 * Default convergence criteria:
 * <ul>
 * <li>Algorithm convergence: 1e-6</li>
 * <li>Floating-point comparisons: 10 ulp</li>
 * <li>Cut-Off value: 1e-12</li>
 * </ul>
 * <p>
 * The cut-off value has been introduced to zero out very small numbers in the Simplex tableau,
 * as these may lead to numerical instabilities due to the nature of the Simplex algorithm
 * (the pivot element is used as a denominator). If the problem definition is very tight, the
 * default cut-off value may be too small, thus it is advised to increase it to a larger value,
 * in accordance with the chosen epsilon.
 * <p>
 * It may also be counter-productive to provide a too large value for {@link org.apache.commons.math3.optim.MaxIter MaxIter} as parameter in the call of {@link #optimize(org.apache.commons.math3.optim.OptimizationData) optimize(OptimizationData...)},
 * as the {@link SimplexSolver} will use different strategies depending on the current iteration
 * count. After half of the allowed max iterations has already been reached, the strategy to select
 * pivot rows will change in order to break possible cycles due to degenerate problems.</text>
      <version>$Id: SimplexSolver.java 1462503 2013-03-29 15:48:27Z luc $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Default amount of error to accept in floating point comparisons (as ulps).</text>
    </javadoc>
    <declaration type="int" name="DEFAULT_ULPS" />
    <javadoc>
      <text>* Default cut-off value.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_CUT_OFF" />
    <javadoc>
      <text>* Default amount of error to accept for algorithm convergence.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_EPSILON" />
    <javadoc>
      <text>* Amount of error to accept for algorithm convergence.</text>
    </javadoc>
    <declaration type="double" name="epsilon" />
    <javadoc>
      <text>* Amount of error to accept in floating point comparisons (as ulps).</text>
    </javadoc>
    <declaration type="int" name="maxUlps" />
    <javadoc>
      <text>* Cut-off value for entries in the tableau: values smaller than the cut-off
 * are treated as zero to improve numerical stability.</text>
    </javadoc>
    <declaration type="double" name="cutOff" />
    <javadoc>
      <text>* Builds a simplex solver with default settings.</text>
    </javadoc>
    <method type="constructor" name="SimplexSolver" startLine="81" endLine="83" />
    <javadoc>
      <text>* Builds a simplex solver with a specified accepted amount of error.</text>
      <param>epsilon Amount of error to accept for algorithm convergence.</param>
    </javadoc>
    <method type="constructor" name="SimplexSolver" startLine="90" endLine="92" />
    <javadoc>
      <text>* Builds a simplex solver with a specified accepted amount of error.</text>
      <param>epsilon Amount of error to accept for algorithm convergence.</param>
      <param>maxUlps Amount of error to accept in floating point comparisons.</param>
    </javadoc>
    <method type="constructor" name="SimplexSolver" startLine="100" endLine="102" />
    <javadoc>
      <text>* Builds a simplex solver with a specified accepted amount of error.</text>
      <param>epsilon Amount of error to accept for algorithm convergence.</param>
      <param>maxUlps Amount of error to accept in floating point comparisons.</param>
      <param>cutOff Values smaller than the cutOff are treated as zero.</param>
    </javadoc>
    <method type="constructor" name="SimplexSolver" startLine="111" endLine="115" />
    <javadoc>
      <text>* Returns the column with the most negative coefficient in the objective function row.</text>
      <param>tableau Simple tableau for the problem.</param>
      <return>the column with the most negative coefficient.</return>
    </javadoc>
    <method type="Integer" name="getPivotColumn" startLine="123" endLine="136">
      <declaration type="double" name="minValue" />
      <declaration type="Integer" name="minPos" />
      <scope startLine="126" endLine="134">
        <declaration type="double" name="entry" />
        <scope startLine="130" endLine="133" />
        <comment>check if the entry is strictly smaller than the current minimum</comment>
        <comment>do not use a ulp/epsilon check</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the row with the minimum ratio as given by the minimum ratio test (MRT).</text>
      <param>tableau Simple tableau for the problem.</param>
      <param>col Column to test the ratio of (see {@link #getPivotColumn(SimplexTableau)}).</param>
      <return>the row with the minimum ratio.</return>
    </javadoc>
    <method type="Integer" name="getPivotRow" startLine="145" endLine="213">
      <declaration type="List<Integer>" name="minRatioPositions" />
      <declaration type="double" name="minRatio" />
      <scope startLine="149" endLine="166">
        <declaration type="double" name="rhs" />
        <declaration type="double" name="entry" />
        <scope startLine="153" endLine="165">
          <declaration type="double" name="ratio" />
          <declaration type="int" name="cmp" />
          <scope startLine="158" endLine="160" />
          <scope startLine="160" endLine="164" />
        </scope>
        <comment>check if the entry is strictly equal to the current min ratio</comment>
        <comment>do not use a ulp/epsilon check</comment>
      </scope>
      <scope startLine="168" endLine="170" />
      <scope startLine="170" endLine="211">
        <scope startLine="174" endLine="184">
          <scope startLine="175" endLine="183">
            <scope startLine="176" endLine="182">
              <declaration type="int" name="column" />
              <declaration type="double" name="entry" />
              <scope startLine="179" endLine="181" />
            </scope>
          </scope>
        </scope>
        <scope startLine="195" endLine="210">
          <declaration type="Integer" name="minRow" />
          <declaration type="int" name="minIndex" />
          <declaration type="int" name="varStart" />
          <declaration type="int" name="varEnd" />
          <scope startLine="200" endLine="208">
            <scope startLine="201" endLine="207">
              <declaration type="Integer" name="basicRow" />
              <scope startLine="203" endLine="206" />
            </scope>
          </scope>
        </scope>
        <comment>there's a degeneracy as indicated by a tie in the minimum ratio test</comment>
        <comment>1. check if there's an artificial variable that can be forced out of the basis</comment>
        <comment>2. apply Bland's rule to prevent cycling:</comment>
        <comment>take the row for which the corresponding basic variable has the smallest index</comment>
        <comment />
        <comment>see http:www.stanford.edu/class/msande310/blandrule.pdf</comment>
        <comment>see http:en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)</comment>
        <comment />
        <comment>Additional heuristic: if we did not get a solution after half of maxIterations</comment>
        <comment>revert to the simple case of just returning the top-most row</comment>
        <comment>This heuristic is based on empirical data gathered while investigating MATH-828.</comment>
      </scope>
      <comment>create a list of all the rows that tie for the lowest score in the minimum ratio test</comment>
    </method>
    <javadoc>
      <text>* Runs one iteration of the Simplex method on the given model.</text>
      <param>tableau Simple tableau for the problem.</param>
      <throws>TooManyIterationsException if the allowed number of iterations has been exhausted.</throws>
      <throws>UnboundedSolutionException if the model is found not to have a bounded solution.</throws>
    </javadoc>
    <method type="void" name="doIteration" startLine="224" endLine="245">
      <declaration type="Integer" name="pivotCol" />
      <declaration type="Integer" name="pivotRow" />
      <scope startLine="230" endLine="232" />
      <declaration type="double" name="pivotVal" />
      <scope startLine="239" endLine="244">
        <scope startLine="240" endLine="243">
          <declaration type="double" name="multiplier" />
        </scope>
      </scope>
      <comment>set the pivot element to 1</comment>
      <comment>set the rest of the pivot column to 0</comment>
    </method>
    <javadoc>
      <text>* Solves Phase 1 of the Simplex method.</text>
      <param>tableau Simple tableau for the problem.</param>
      <throws>TooManyIterationsException if the allowed number of iterations has been exhausted.</throws>
      <throws>UnboundedSolutionException if the model is found not to have a bounded solution.</throws>
      <throws>NoFeasibleSolutionException if there is no feasible solution?</throws>
    </javadoc>
    <method type="void" name="solvePhase1" startLine="258" endLine="273">
      <scope startLine="261" endLine="263" />
      <scope startLine="265" endLine="267" />
      <scope startLine="270" endLine="272" />
      <comment>make sure we're in Phase 1</comment>
      <comment>if W is not zero then we have no feasible solution</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="PointValuePair" name="doOptimize" startLine="280" endLine="297">
      <declaration type="SimplexTableau" name="tableau" />
      <scope startLine="293" endLine="295" />
    </method>
  </class>
</source>
