<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optimization.general">
  <import name="org.apache.commons.math3.analysis.DifferentiableMultivariateFunction" />
  <import name="org.apache.commons.math3.analysis.MultivariateVectorFunction" />
  <import name="org.apache.commons.math3.analysis.FunctionUtils" />
  <import name="org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction" />
  <import name="org.apache.commons.math3.optimization.DifferentiableMultivariateOptimizer" />
  <import name="org.apache.commons.math3.optimization.GoalType" />
  <import name="org.apache.commons.math3.optimization.ConvergenceChecker" />
  <import name="org.apache.commons.math3.optimization.PointValuePair" />
  <import name="org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer" />
  <class name="AbstractScalarDifferentiableOptimizer" extends="BaseAbstractMultivariateOptimizer<DifferentiableMultivariateFunction>" startLine="30">
    <implements name="DifferentiableMultivariateOptimizer" />
    <javadoc>
      <text>* Base class for implementing optimizers for multivariate scalar
 * differentiable functions.
 * It contains boiler-plate code for dealing with gradient evaluation.</text>
      <version>$Id: AbstractScalarDifferentiableOptimizer.java 1422230 2012-12-15 12:11:13Z erans $</version>
      <deprecated>As of 3.1 (to be removed in 4.0).</deprecated>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Objective function gradient.</text>
    </javadoc>
    <declaration type="MultivariateVectorFunction" name="gradient" />
    <javadoc>
      <text>* Simple constructor with default settings.
 * The convergence check is set to a{@link org.apache.commons.math3.optimization.SimpleValueCheckerSimpleValueChecker}.</text>
      <deprecated>See {@link org.apache.commons.math3.optimization.SimpleValueChecker#SimpleValueChecker()}</deprecated>
    </javadoc>
    <method type="constructor" name="AbstractScalarDifferentiableOptimizer" startLine="56" endLine="56" />
    <javadoc>
      <param>checker Convergence checker.</param>
    </javadoc>
    <method type="constructor" name="AbstractScalarDifferentiableOptimizer" startLine="61" endLine="63" />
    <javadoc>
      <text>* Compute the gradient vector.</text>
      <param>evaluationPoint Point at which the gradient must be evaluated.</param>
      <return>the gradient at the specified point.</return>
      <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the allowed number of evaluations is exceeded.</throws>
    </javadoc>
    <method type="double[]" name="computeObjectiveGradient" startLine="73" endLine="75" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="PointValuePair" name="optimizeInternal" startLine="82" endLine="87">
      <comment>Store optimization problem characteristics.</comment>
    </method>
    <javadoc>
      <text>* Optimize an objective function.</text>
      <param>f Objective function.</param>
      <param>goalType Type of optimization goal: either{@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.</param>
      <param>startPoint Start point for optimization.</param>
      <param>maxEval Maximum number of function evaluations.</param>
      <return>the point/value pair giving the optimal value for objective
 * function.</return>
      <throws>org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.</throws>
      <throws>org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.</throws>
      <throws>org.apache.commons.math3.exception.NullArgumentException if
 * any argument is {@code null}.</throws>
    </javadoc>
    <method type="PointValuePair" name="optimize" startLine="109" endLine="114" />
  </class>
</source>
