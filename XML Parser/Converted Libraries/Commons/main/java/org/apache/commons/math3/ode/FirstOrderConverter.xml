<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode">
  <class name="FirstOrderConverter" startLine="21">
    <implements name="FirstOrderDifferentialEquations" />
    <javadoc>
      <text>* This class converts second order differential equations to first
 * order ones.
 * <p>This class is a wrapper around a {@link SecondOrderDifferentialEquations} which allow to use a {@link FirstOrderIntegrator} to integrate it.</p>
 * <p>The transformation is done by changing the n dimension state
 * vector to a 2n dimension vector, where the first n components are
 * the initial state variables and the n last components are their
 * first time derivative. The first time derivative of this state
 * vector then really contains both the first and second time
 * derivative of the initial state vector, which can be handled by the
 * underlying second order equations set.</p>
 * <p>One should be aware that the data is duplicated during the
 * transformation process and that for each call to {@link #computeDerivatives computeDerivatives}, this wrapper does copy 4n
 * scalars : 2n before the call to {@link SecondOrderDifferentialEquations#computeSecondDerivativescomputeSecondDerivatives} in order to dispatch the y state vector
 * into z and zDot, and 2n after the call to gather zDot and zDDot
 * into yDot. Since the underlying problem by itself perhaps also
 * needs to copy data and dispatch the arrays into domain objects,
 * this has an impact on both memory and CPU usage. The only way to
 * avoid this duplication is to perform the transformation at the
 * problem level, i.e. to implement the problem as a first order one
 * and then avoid using this class.</p></text>
      <see>FirstOrderIntegrator</see>
      <see>FirstOrderDifferentialEquations</see>
      <see>SecondOrderDifferentialEquations</see>
      <version>$Id: FirstOrderConverter.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>1.2</since>
    </javadoc>
    <javadoc>
      <text>* Underlying second order equations set.</text>
    </javadoc>
    <declaration type="SecondOrderDifferentialEquations" name="equations" />
    <javadoc>
      <text>* second order problem dimension.</text>
    </javadoc>
    <declaration type="int" name="dimension" />
    <javadoc>
      <text>* state vector.</text>
    </javadoc>
    <declaration type="double[]" name="z" />
    <javadoc>
      <text>* first time derivative of the state vector.</text>
    </javadoc>
    <declaration type="double[]" name="zDot" />
    <javadoc>
      <text>* second time derivative of the state vector.</text>
    </javadoc>
    <declaration type="double[]" name="zDDot" />
    <javadoc>
      <text>* Simple constructor.
 * Build a converter around a second order equations set.</text>
      <param>equations second order equations set to convert</param>
    </javadoc>
    <method type="constructor" name="FirstOrderConverter" startLine="78" endLine="84" />
    <javadoc>
      <text>* Get the dimension of the problem.
 * <p>The dimension of the first order problem is twice the
 * dimension of the underlying second order problem.</p></text>
      <return>dimension of the problem</return>
    </javadoc>
    <method type="int" name="getDimension" startLine="91" endLine="93" />
    <javadoc>
      <text>* Get the current time derivative of the state vector.</text>
      <param>t current value of the independent <I>time</I> variable</param>
      <param>y array containing the current value of the state vector</param>
      <param>yDot placeholder array where to put the time derivative of the state vector</param>
    </javadoc>
    <method type="void" name="computeDerivatives" startLine="100" endLine="113">
      <comment>split the state vector in two</comment>
      <comment>apply the underlying equations set</comment>
      <comment>build the result state derivative</comment>
    </method>
  </class>
</source>
