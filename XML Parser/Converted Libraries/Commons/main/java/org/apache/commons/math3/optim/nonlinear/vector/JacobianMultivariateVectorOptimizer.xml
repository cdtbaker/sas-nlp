<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.nonlinear.vector">
  <import name="org.apache.commons.math3.analysis.MultivariateMatrixFunction" />
  <import name="org.apache.commons.math3.optim.ConvergenceChecker" />
  <import name="org.apache.commons.math3.optim.OptimizationData" />
  <import name="org.apache.commons.math3.optim.PointVectorValuePair" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <class name="JacobianMultivariateVectorOptimizer" extends="MultivariateVectorOptimizer" startLine="26">
    <javadoc>
      <text>* Base class for implementing optimizers for multivariate vector
 * differentiable functions.
 * It contains boiler-plate code for dealing with Jacobian evaluation.
 * It assumes that the rows of the Jacobian matrix iterate on the model
 * functions while the columns iterate on the parameters; thus, the numbers
 * of rows is equal to the dimension of the {@link Target} while the
 * number of columns is equal to the dimension of the{@link org.apache.commons.math3.optim.InitialGuess InitialGuess}.</text>
      <version>$Id: JacobianMultivariateVectorOptimizer.java 1454464 2013-03-08 16:58:10Z luc $</version>
      <since>3.1</since>
    </javadoc>
    <javadoc>
      <text>* Jacobian of the model function.</text>
    </javadoc>
    <declaration type="MultivariateMatrixFunction" name="jacobian" />
    <javadoc>
      <param>checker Convergence checker.</param>
    </javadoc>
    <method type="constructor" name="JacobianMultivariateVectorOptimizer" startLine="49" endLine="51" />
    <javadoc>
      <text>* Computes the Jacobian matrix.</text>
      <param>params Point at which the Jacobian must be evaluated.</param>
      <return>the Jacobian at the specified point.</return>
    </javadoc>
    <method type="double[][]" name="computeJacobian" startLine="59" endLine="61" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <param>optData Optimization data. In addition to those documented in{@link MultivariateVectorOptimizer#optimize(OptimizationData)}MultivariateOptimizer}, this method will register the following data:
 * <ul>
 * <li>{@link ModelFunctionJacobian}</li>
 * </ul></param>
      <return>{@inheritDoc}</return>
      <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
      <throws>DimensionMismatchException if the initial guess, target, and weight
 * arguments have inconsistent dimensions.</throws>
    </javadoc>
    <method type="PointVectorValuePair" name="optimize" startLine="81" endLine="84">
      <comment>Set up base class and perform computation.</comment>
    </method>
    <javadoc>
      <text>* Scans the list of (required and optional) optimization data that
 * characterize the problem.</text>
      <param>optData Optimization data.
 * The following data will be looked for:
 * <ul>
 * <li>{@link ModelFunctionJacobian}</li>
 * </ul></param>
    </javadoc>
    <method type="void" name="parseOptimizationData" startLine="97" endLine="111">
      <scope startLine="103" endLine="110">
        <scope startLine="104" endLine="109" />
        <comment>If more data must be parsed, this statement _must_ be</comment>
        <comment>changed to "continue".</comment>
      </scope>
      <comment>Allow base class to register its own data.</comment>
      <comment>The existing values (as set by the previous call) are reused if</comment>
      <comment>not provided in the argument list.</comment>
    </method>
  </class>
</source>
