<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.integration.gauss">
  <import name="java.util.Map" />
  <import name="java.util.TreeMap" />
  <import name="org.apache.commons.math3.util.Pair" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <class name="BaseRuleFactory" startLine="26">
    <javadoc>
      <text>* Base class for rules that determines the integration nodes and their
 * weights.
 * Subclasses must implement the {@link #computeRule(int) computeRule} method.</text>
      <param><T>
 *  Type of the number used to represent the points and weights of
 * the quadrature rules.</param>
      <since>3.1</since>
      <version>$Id: BaseRuleFactory.java 1455194 2013-03-11 15:45:54Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* List of points and weights, indexed by the order of the rule.</text>
    </javadoc>
    <declaration type="Map<Integer,Pair<T[],T[]>>" name="pointsAndWeights" />
    <javadoc>
      <text>* Cache for double-precision rules.</text>
    </javadoc>
    <declaration type="Map<Integer,Pair<double[],double[]>>" name="pointsAndWeightsDouble" />
    <javadoc>
      <text>* Gets a copy of the quadrature rule with the given number of integration
 * points.</text>
      <param>numberOfPoints Number of integration points.</param>
      <return>a copy of the integration rule.</return>
      <throws>NotStrictlyPositiveException if {@code numberOfPoints < 1}.</throws>
      <throws>DimensionMismatchException if the elements of the rule pair do not
 * have the same length.</throws>
    </javadoc>
    <method type="Pair<double[],double[]>" name="getRule" startLine="56" endLine="80">
      <scope startLine="58" endLine="61" />
      <declaration type="Pair<double[],double[]>" name="cached" />
      <scope startLine="66" endLine="75">
        <declaration type="Pair<T[],T[]>" name="rule" />
        <comment>Rule not computed yet.</comment>
        <comment>Compute the rule.</comment>
        <comment>Cache it.</comment>
      </scope>
      <comment>Try to obtain the rule from the cache.</comment>
      <comment>Return a copy.</comment>
    </method>
    <javadoc>
      <text>* Gets a rule.
 * Synchronization ensures that rules will be computed and added to the
 * cache at most once.
 * The returned rule is a reference into the cache.</text>
      <param>numberOfPoints Order of the rule to be retrieved.</param>
      <return>the points and weights corresponding to the given order.</return>
      <throws>DimensionMismatchException if the elements of the rule pair do not
 * have the same length.</throws>
    </javadoc>
    <method type="Pair<T[],T[]>" name="getRuleInternal" startLine="94" endLine="102">
      <declaration type="Pair<T[],T[]>" name="rule" />
      <scope startLine="96" endLine="100">
        <comment>The rule should be available now.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Stores a rule.</text>
      <param>rule Rule to be stored.</param>
      <throws>DimensionMismatchException if the elements of the pair do not
 * have the same length.</throws>
    </javadoc>
    <method type="void" name="addRule" startLine="111" endLine="118">
      <scope startLine="112" endLine="115" />
    </method>
    <method name="computeRule" type="Pair<T[],T[]>" startLine="120" endLine="129" />
    <javadoc>
      <text>* Computes the rule for the given order.</text>
      <param>numberOfPoints Order of the rule to be computed.</param>
      <return>the computed rule.</return>
      <throws>DimensionMismatchException if the elements of the pair do not
 * have the same length.</throws>
    </javadoc>
    <javadoc>
      <text>* Converts the from the actual {@code Number} type to {@code double}</text>
      <param><T>
 *  Type of the number used to represent the points and
 * weights of the quadrature rules.</param>
      <param>rule Points and weights.</param>
      <return>points and weights as {@code double}s.</return>
    </javadoc>
    <method type="Pair<double[],double[]>" name="convertToDouble" startLine="139" endLine="153">
      <declaration type="T[]" name="pT" />
      <declaration type="T[]" name="wT" />
      <declaration type="int" name="len" />
      <declaration type="double[]" name="pD" />
      <declaration type="double[]" name="wD" />
      <scope startLine="147" endLine="150" />
    </method>
  </class>
</source>
