<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.univariate">
  <import name="org.apache.commons.math3.util.Precision" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.optim.ConvergenceChecker" />
  <import name="org.apache.commons.math3.optim.nonlinear.scalar.GoalType" />
  <class name="BrentOptimizer" extends="UnivariateOptimizer" startLine="26">
    <javadoc>
      <text>* For a function defined on some interval {@code (lo, hi)}, this class
 * finds an approximation {@code x} to the point at which the function
 * attains its minimum.
 * It implements Richard Brent's algorithm (from his book "Algorithms for
 * Minimization without Derivatives", p. 79) for finding minima of real
 * univariate functions.
 * <br/>
 * This code is an adaptation, partly based on the Python code from SciPy
 * (module "optimize.py" v0.5); the original algorithm is also modified
 * <ul>
 * <li>to use an initial guess provided by the user,</li>
 * <li>to ensure that the best point encountered is the one returned.</li>
 * </ul></text>
      <version>$Id: BrentOptimizer.java 1462503 2013-03-29 15:48:27Z luc $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Golden section.</text>
    </javadoc>
    <declaration type="double" name="GOLDEN_SECTION" />
    <javadoc>
      <text>* Minimum relative tolerance.</text>
    </javadoc>
    <declaration type="double" name="MIN_RELATIVE_TOLERANCE" />
    <javadoc>
      <text>* Relative threshold.</text>
    </javadoc>
    <declaration type="double" name="relativeThreshold" />
    <javadoc>
      <text>* Absolute threshold.</text>
    </javadoc>
    <declaration type="double" name="absoluteThreshold" />
    <javadoc>
      <text>* The arguments are used implement the original stopping criterion
 * of Brent's algorithm.{@code abs} and {@code rel} define a tolerance{@code tol = rel |x| + abs}. {@code rel} should be no smaller than
 * <em>2 macheps</em> and preferably not much less than <em>sqrt(macheps)</em>,
 * where <em>macheps</em> is the relative machine precision. {@code abs} must
 * be positive.</text>
      <param>rel Relative threshold.</param>
      <param>abs Absolute threshold.</param>
      <param>checker Additional, user-defined, convergence checking
 * procedure.</param>
      <throws>NotStrictlyPositiveException if {@code abs <= 0}.</throws>
      <throws>NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.</throws>
    </javadoc>
    <method type="constructor" name="BrentOptimizer" startLine="80" endLine="92">
      <scope startLine="83" endLine="85" />
      <scope startLine="86" endLine="88" />
    </method>
    <javadoc>
      <text>* The arguments are used for implementing the original stopping criterion
 * of Brent's algorithm.{@code abs} and {@code rel} define a tolerance{@code tol = rel |x| + abs}. {@code rel} should be no smaller than
 * <em>2 macheps</em> and preferably not much less than <em>sqrt(macheps)</em>,
 * where <em>macheps</em> is the relative machine precision. {@code abs} must
 * be positive.</text>
      <param>rel Relative threshold.</param>
      <param>abs Absolute threshold.</param>
      <throws>NotStrictlyPositiveException if {@code abs <= 0}.</throws>
      <throws>NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.</throws>
    </javadoc>
    <method type="constructor" name="BrentOptimizer" startLine="109" endLine="111" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="UnivariatePointValuePair" name="doOptimize" startLine="115" endLine="286">
      <declaration type="boolean" name="isMinim" />
      <declaration type="double" name="lo" />
      <declaration type="double" name="mid" />
      <declaration type="double" name="hi" />
      <declaration type="ConvergenceChecker<UnivariatePointValuePair>" name="checker" />
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
      <scope startLine="127" endLine="130" />
      <scope startLine="130" endLine="133" />
      <declaration type="double" name="x" />
      <declaration type="double" name="v" />
      <declaration type="double" name="w" />
      <declaration type="double" name="d" />
      <declaration type="double" name="e" />
      <declaration type="double" name="fx" />
      <scope startLine="141" endLine="143" />
      <declaration type="double" name="fv" />
      <declaration type="double" name="fw" />
      <declaration type="UnivariatePointValuePair" name="previous" />
      <declaration type="UnivariatePointValuePair" name="current" />
      <declaration type="UnivariatePointValuePair" name="best" />
      <declaration type="int" name="iter" />
      <scope startLine="154" endLine="285">
        <declaration type="double" name="m" />
        <declaration type="double" name="tol1" />
        <declaration type="double" name="tol2" />
        <declaration type="boolean" name="stop" />
        <scope startLine="161" endLine="277">
          <declaration type="double" name="p" />
          <declaration type="double" name="q" />
          <declaration type="double" name="r" />
          <declaration type="double" name="u" />
          <scope startLine="167" endLine="206">
            <scope startLine="173" endLine="175" />
            <scope startLine="175" endLine="177" />
            <scope startLine="184" endLine="197">
              <scope startLine="190" endLine="196">
                <scope startLine="191" endLine="193" />
                <scope startLine="193" endLine="195" />
              </scope>
            </scope>
            <scope startLine="197" endLine="205">
              <scope startLine="199" endLine="201" />
              <scope startLine="201" endLine="203" />
            </scope>
          </scope>
          <scope startLine="206" endLine="214">
            <scope startLine="208" endLine="210" />
            <scope startLine="210" endLine="212" />
          </scope>
          <scope startLine="217" endLine="223">
            <scope startLine="218" endLine="220" />
            <scope startLine="220" endLine="222" />
          </scope>
          <scope startLine="223" endLine="225" />
          <declaration type="double" name="fu" />
          <scope startLine="228" endLine="230" />
          <scope startLine="241" endLine="243" />
          <scope startLine="246" endLine="258">
            <scope startLine="247" endLine="249" />
            <scope startLine="249" endLine="251" />
          </scope>
          <scope startLine="258" endLine="276">
            <scope startLine="259" endLine="261" />
            <scope startLine="261" endLine="263" />
            <scope startLine="265" endLine="270" />
            <scope startLine="272" endLine="275" />
          </scope>
        </scope>
        <scope startLine="277" endLine="283" />
        <comment>Default stopping criterion.</comment>
        <comment>Fit parabola.</comment>
        <comment>Parabolic interpolation step.</comment>
        <comment>f must not be evaluated too close to a or b.</comment>
        <comment>Golden section step.</comment>
        <comment>Golden section step.</comment>
        <comment>Update by at least "tol1".</comment>
        <comment>User-defined convergence checker.</comment>
        <comment>Update a, b, v, w and x.</comment>
        <comment>Default termination (Brent's criterion).</comment>
      </scope>
      <comment>Optional additional convergence criteria.</comment>
      <comment>Best point encountered so far (which is the initial guess).</comment>
    </method>
    <javadoc>
      <text>* Selects the best of two points.</text>
      <param>a Point and value.</param>
      <param>b Point and value.</param>
      <param>isMinim {@code true} if the selected point must be the one with
 * the lowest value.</param>
      <return>the best point, or {@code null} if {@code a} and {@code b} are
 * both {@code null}. When {@code a} and {@code b} have the same function
 * value, {@code a} is returned.</return>
    </javadoc>
    <method type="UnivariatePointValuePair" name="best" startLine="301" endLine="314">
      <scope startLine="302" endLine="304" />
      <scope startLine="305" endLine="307" />
      <scope startLine="309" endLine="311" />
      <scope startLine="311" endLine="313" />
    </method>
  </class>
</source>
