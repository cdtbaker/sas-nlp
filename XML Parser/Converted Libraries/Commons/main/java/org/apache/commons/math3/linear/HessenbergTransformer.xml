<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.Precision" />
  <class name="HessenbergTransformer" startLine="23">
    <javadoc>
      <text>* Class transforming a general real matrix to Hessenberg form.
 * <p>A m &times; m matrix A can be written as the product of three matrices: A = P
 * &times; H &times; P<sup>T</sup> with P an orthogonal matrix and H a Hessenberg
 * matrix. Both P and H are m &times; m matrices.</p>
 * <p>Transformation to Hessenberg form is often not a goal by itself, but it is an
 * intermediate step in more general decomposition algorithms like{@link EigenDecomposition eigen decomposition}. This class is therefore
 * intended for internal use by the library and is not public. As a consequence
 * of this explicitly limited scope, many methods directly returns references to
 * internal arrays, not copies.</p>
 * <p>This class is based on the method orthes in class EigenvalueDecomposition
 * from the <a href="http://math.nist.gov/javanumerics/jama/">JAMA</a> library.</p></text>
      <see><a href="http://mathworld.wolfram.com/HessenbergDecomposition.html">MathWorld</a></see>
      <see><a href="http://en.wikipedia.org/wiki/Householder_transformation">Householder Transformations</a></see>
      <version>$Id: HessenbergTransformer.java 1334644 2012-05-06 14:33:32Z tn $</version>
      <since>3.1</since>
    </javadoc>
    <javadoc>
      <text>* Householder vectors.</text>
    </javadoc>
    <declaration type="double" name="householderVectors" />
    <javadoc>
      <text>* Temporary storage vector.</text>
    </javadoc>
    <declaration type="double" name="ort" />
    <javadoc>
      <text>* Cached value of P.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedP" />
    <javadoc>
      <text>* Cached value of Pt.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedPt" />
    <javadoc>
      <text>* Cached value of H.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedH" />
    <javadoc>
      <text>* Build the transformation to Hessenberg form of a general matrix.</text>
      <param>matrix matrix to transform</param>
      <throws>NonSquareMatrixException if the matrix is not square</throws>
    </javadoc>
    <method type="constructor" name="HessenbergTransformer" startLine="60" endLine="75">
      <scope startLine="61" endLine="64" />
      <declaration type="int" name="m" />
      <comment>transform matrix</comment>
    </method>
    <javadoc>
      <text>* Returns the matrix P of the transform.
 * <p>P is an orthogonal matrix, i.e. its inverse is also its transpose.</p></text>
      <return>the P matrix</return>
    </javadoc>
    <method type="RealMatrix" name="getP" startLine="83" endLine="121">
      <scope startLine="84" endLine="119">
        <declaration type="int" name="n" />
        <declaration type="int" name="high" />
        <declaration type="double[][]" name="pa" />
        <scope startLine="89" endLine="93">
          <scope startLine="90" endLine="92" />
        </scope>
        <scope startLine="95" endLine="116">
          <scope startLine="96" endLine="115">
            <scope startLine="97" endLine="99" />
            <scope startLine="101" endLine="114">
              <declaration type="double" name="g" />
              <scope startLine="104" endLine="106" />
              <scope startLine="111" endLine="113" />
            </scope>
          </scope>
        </scope>
        <comment>Double division avoids possible underflow</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the transpose of the matrix P of the transform.
 * <p>P is an orthogonal matrix, i.e. its inverse is also its transpose.</p></text>
      <return>the transpose of the P matrix</return>
    </javadoc>
    <method type="RealMatrix" name="getPT" startLine="129" endLine="136">
      <scope startLine="130" endLine="132" />
      <comment>return the cached matrix</comment>
    </method>
    <javadoc>
      <text>* Returns the Hessenberg matrix H of the transform.</text>
      <return>the H matrix</return>
    </javadoc>
    <method type="RealMatrix" name="getH" startLine="143" endLine="163">
      <scope startLine="144" endLine="159">
        <declaration type="int" name="m" />
        <declaration type="double[][]" name="h" />
        <scope startLine="147" endLine="157">
          <scope startLine="148" endLine="151" />
          <scope startLine="154" endLine="156" />
        </scope>
        <comment>copy the entry of the lower sub-diagonal</comment>
        <comment>copy upper triangular part of the matrix</comment>
      </scope>
      <comment>return the cached matrix</comment>
    </method>
    <javadoc>
      <text>* Get the Householder vectors of the transform.
 * <p>Note that since this class is only intended for internal use, it returns
 * directly a reference to its internal arrays, not a copy.</p></text>
      <return>the main diagonal elements of the B matrix</return>
    </javadoc>
    <method type="double[][]" name="getHouseholderVectorsRef" startLine="172" endLine="174" />
    <javadoc>
      <text>* Transform original matrix to Hessenberg form.
 * <p>Transformation is done using Householder transforms.</p></text>
    </javadoc>
    <method type="void" name="transform" startLine="180" endLine="232">
      <declaration type="int" name="n" />
      <declaration type="int" name="high" />
      <scope startLine="184" endLine="231">
        <declaration type="double" name="scale" />
        <scope startLine="187" endLine="189" />
        <scope startLine="191" endLine="230">
          <declaration type="double" name="h" />
          <scope startLine="194" endLine="197" />
          <declaration type="double" name="g" />
          <scope startLine="206" endLine="215">
            <declaration type="double" name="f" />
            <scope startLine="208" endLine="210" />
            <scope startLine="212" endLine="214" />
          </scope>
          <scope startLine="217" endLine="226">
            <declaration type="double" name="f" />
            <scope startLine="219" endLine="221" />
            <scope startLine="223" endLine="225" />
          </scope>
        </scope>
        <comment>Scale column.</comment>
        <comment>Compute Householder transformation.</comment>
        <comment>Apply Householder similarity transformation</comment>
        <comment>H = (I - u*u' / h) * H * (I - u*u' / h)</comment>
      </scope>
    </method>
  </class>
</source>
