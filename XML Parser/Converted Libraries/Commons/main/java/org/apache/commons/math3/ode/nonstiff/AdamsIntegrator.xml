<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode.nonstiff">
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.exception.NoBracketingException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.linear.Array2DRowRealMatrix" />
  <import name="org.apache.commons.math3.ode.ExpandableStatefulODE" />
  <import name="org.apache.commons.math3.ode.MultistepIntegrator" />
  <class name="AdamsIntegrator" extends="MultistepIntegrator" startLine="29">
    <javadoc>
      <text>* Base class for {@link AdamsBashforthIntegrator Adams-Bashforth} and{@link AdamsMoultonIntegrator Adams-Moulton} integrators.</text>
      <version>$Id: AdamsIntegrator.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Transformer.</text>
    </javadoc>
    <declaration type="AdamsNordsieckTransformer" name="transformer" />
    <javadoc>
      <text>* Build an Adams integrator with the given order and step control parameters.</text>
      <param>name name of the method</param>
      <param>nSteps number of steps of the method excluding the one being computed</param>
      <param>order order of the method</param>
      <param>minStep minimal step (sign is irrelevant, regardless of
 * integration direction, forward or backward), the last step can
 * be smaller than this</param>
      <param>maxStep maximal step (sign is irrelevant, regardless of
 * integration direction, forward or backward), the last step can
 * be smaller than this</param>
      <param>scalAbsoluteTolerance allowed absolute error</param>
      <param>scalRelativeTolerance allowed relative error</param>
      <exception>NumberIsTooSmallException if order is 1 or less</exception>
    </javadoc>
    <method type="constructor" name="AdamsIntegrator" startLine="58" endLine="62" />
    <javadoc>
      <text>* Build an Adams integrator with the given order and step control parameters.</text>
      <param>name name of the method</param>
      <param>nSteps number of steps of the method excluding the one being computed</param>
      <param>order order of the method</param>
      <param>minStep minimal step (sign is irrelevant, regardless of
 * integration direction, forward or backward), the last step can
 * be smaller than this</param>
      <param>maxStep maximal step (sign is irrelevant, regardless of
 * integration direction, forward or backward), the last step can
 * be smaller than this</param>
      <param>vecAbsoluteTolerance allowed absolute error</param>
      <param>vecRelativeTolerance allowed relative error</param>
      <exception>IllegalArgumentException if order is 1 or less</exception>
    </javadoc>
    <method type="constructor" name="AdamsIntegrator" startLine="83" endLine="87" />
    <method name="integrate" type="void" startLine="89" endLine="93" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Array2DRowRealMatrix" name="initializeHighOrderDerivatives" startLine="99" endLine="101" />
    <javadoc>
      <text>* Update the high order scaled derivatives for Adams integrators (phase 1).
 * <p>The complete update of high order derivatives has a form similar to:
 * <pre>
 * r<sub>n+1</sub> = (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u + P<sup>-1</sup> A P r<sub>n</sub>
 * </pre>
 * this method computes the P<sup>-1</sup> A P r<sub>n</sub> part.</p></text>
      <param>highOrder high order scaled derivatives
 * (h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))</param>
      <return>updated high order derivatives</return>
      <see>#updateHighOrderDerivativesPhase2(double[],double[],Array2DRowRealMatrix)</see>
    </javadoc>
    <method type="Array2DRowRealMatrix" name="updateHighOrderDerivativesPhase1" startLine="114" endLine="116" />
    <javadoc>
      <text>* Update the high order scaled derivatives Adams integrators (phase 2).
 * <p>The complete update of high order derivatives has a form similar to:
 * <pre>
 * r<sub>n+1</sub> = (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u + P<sup>-1</sup> A P r<sub>n</sub>
 * </pre>
 * this method computes the (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u part.</p>
 * <p>Phase 1 of the update must already have been performed.</p></text>
      <param>start first order scaled derivatives at step start</param>
      <param>end first order scaled derivatives at step end</param>
      <param>highOrder high order scaled derivatives, will be modified
 * (h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))</param>
      <see>#updateHighOrderDerivativesPhase1(Array2DRowRealMatrix)</see>
    </javadoc>
    <method type="void" name="updateHighOrderDerivativesPhase2" startLine="133" endLine="135" />
  </class>
</source>
