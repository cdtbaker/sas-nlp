<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive.moment">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="SecondMoment" extends="FirstMoment" startLine="24">
    <implements name="Serializable" />
    <javadoc>
      <text>* Computes a statistic related to the Second Central Moment.  Specifically,
 * what is computed is the sum of squared deviations from the sample mean.
 * <p>
 * The following recursive updating formula is used:</p>
 * <p>
 * Let <ul>
 * <li> dev = (current obs - previous mean) </li>
 * <li> n = number of observations (including current obs) </li>
 * </ul>
 * Then</p>
 * <p>
 * new value = old value + dev^2 * (n -1) / n.</p>
 * <p>
 * Returns <code>Double.NaN</code> if no data values have been added and
 * returns <code>0</code> if there is just one value in the data set.</p>
 * <p>
 * <strong>Note that this implementation is not synchronized.</strong> If
 * multiple threads access an instance of this class concurrently, and at least
 * one of the threads invokes the <code>increment()</code> or
 * <code>clear()</code> method, it must be synchronized externally.</p></text>
      <version>$Id: SecondMoment.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* second moment of values that have been added</text>
    </javadoc>
    <declaration type="double" name="m2" />
    <javadoc>
      <text>* Create a SecondMoment instance</text>
    </javadoc>
    <method type="constructor" name="SecondMoment" startLine="59" endLine="62" />
    <javadoc>
      <text>* Copy constructor, creates a new {@code SecondMoment} identical
 * to the {@code original}</text>
      <param>original the {@code SecondMoment} instance to copy</param>
      <throws>NullArgumentException if original is null</throws>
    </javadoc>
    <method type="constructor" name="SecondMoment" startLine="72" endLine="75" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="increment" startLine="81" endLine="87">
      <scope startLine="82" endLine="84" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="clear" startLine="93" endLine="96" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getResult" startLine="102" endLine="104" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="SecondMoment" name="copy" startLine="110" endLine="115">
      <declaration type="SecondMoment" name="result" />
      <comment>no try-catch or advertised NAE because args are guaranteed non-null</comment>
    </method>
    <javadoc>
      <text>* Copies source to dest.
 * <p>Neither source nor dest can be null.</p></text>
      <param>source SecondMoment to copy</param>
      <param>dest SecondMoment to copy to</param>
      <throws>NullArgumentException if either source or dest is null</throws>
    </javadoc>
    <method type="void" name="copy" startLine="126" endLine="131" />
  </class>
</source>
