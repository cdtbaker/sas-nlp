<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.regression">
  <import name="java.io.Serializable" />
  <import name="java.util.Arrays" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <class name="RegressionResults" startLine="25">
    <implements name="Serializable" />
    <javadoc>
      <text>* Results of a Multiple Linear Regression model fit.</text>
      <version>$Id: RegressionResults.java 1392342 2012-10-01 14:08:52Z psteitz $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* INDEX of Sum of Squared Errors</text>
    </javadoc>
    <declaration type="int" name="SSE_IDX" />
    <javadoc>
      <text>* INDEX of Sum of Squares of Model</text>
    </javadoc>
    <declaration type="int" name="SST_IDX" />
    <javadoc>
      <text>* INDEX of R-Squared of regression</text>
    </javadoc>
    <declaration type="int" name="RSQ_IDX" />
    <javadoc>
      <text>* INDEX of Mean Squared Error</text>
    </javadoc>
    <declaration type="int" name="MSE_IDX" />
    <javadoc>
      <text>* INDEX of Adjusted R Squared</text>
    </javadoc>
    <declaration type="int" name="ADJRSQ_IDX" />
    <javadoc>
      <text>* UID</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* regression slope parameters</text>
    </javadoc>
    <declaration type="double[]" name="parameters" />
    <javadoc>
      <text>* variance covariance matrix of parameters</text>
    </javadoc>
    <declaration type="double[][]" name="varCovData" />
    <javadoc>
      <text>* boolean flag for variance covariance matrix in symm compressed storage</text>
    </javadoc>
    <declaration type="boolean" name="isSymmetricVCD" />
    <javadoc>
      <text>* rank of the solution</text>
    </javadoc>
    <declaration type="int" name="rank" />
    <javadoc>
      <text>* number of observations on which results are based</text>
    </javadoc>
    <declaration type="long" name="nobs" />
    <javadoc>
      <text>* boolean flag indicator of whether a constant was included</text>
    </javadoc>
    <declaration type="boolean" name="containsConstant" />
    <javadoc>
      <text>* array storing global results, SSE, MSE, RSQ, adjRSQ</text>
    </javadoc>
    <declaration type="double[]" name="globalFitInfo" />
    <javadoc>
      <text>* Set the default constructor to private access
 * to prevent inadvertent instantiation</text>
    </javadoc>
    <method type="constructor" name="RegressionResults" startLine="66" endLine="74" />
    <javadoc>
      <text>* Constructor for Regression Results.</text>
      <param>parameters a double array with the regression slope estimates</param>
      <param>varcov the variance covariance matrix, stored either in a square matrix
 * or as a compressed</param>
      <param>isSymmetricCompressed a flag which denotes that the variance covariance
 * matrix is in symmetric compressed format</param>
      <param>nobs the number of observations of the regression estimation</param>
      <param>rank the number of independent variables in the regression</param>
      <param>sumy the sum of the independent variable</param>
      <param>sumysq the sum of the squared independent variable</param>
      <param>sse sum of squared errors</param>
      <param>containsConstant true model has constant,  false model does not have constant</param>
      <param>copyData if true a deep copy of all input data is made, if false only references
 * are copied and the RegressionResults become mutable</param>
    </javadoc>
    <method type="constructor" name="RegressionResults" startLine="99" endLine="137">
      <scope startLine="100" endLine="106">
        <scope startLine="103" endLine="105" />
      </scope>
      <scope startLine="106" endLine="109" />
      <scope startLine="117" endLine="120" />
      <scope startLine="129" endLine="133" />
      <scope startLine="133" endLine="136" />
    </method>
    <javadoc>
      <text>* <p>Returns the parameter estimate for the regressor at the given index.</p>
 * <p>A redundant regressor will have its redundancy flag set, as well as
 * a parameters estimated equal to {@code Double.NaN}</p></text>
      <param>index Index.</param>
      <return>the parameters estimated for regressor at index.</return>
      <throws>OutOfRangeException if {@code index} is not in the interval{@code [0, number of parameters)}.</throws>
    </javadoc>
    <method type="double" name="getParameterEstimate" startLine="150" endLine="158">
      <scope startLine="151" endLine="153" />
      <scope startLine="154" endLine="156" />
    </method>
    <javadoc>
      <text>* <p>Returns a copy of the regression parameters estimates.</p>
 * <p>The parameter estimates are returned in the natural order of the data.</p>
 * <p>A redundant regressor will have its redundancy flag set, as will
 * a parameter estimate equal to {@code Double.NaN}.</p></text>
      <return>array of parameter estimates, null if no estimation occurred</return>
    </javadoc>
    <method type="double[]" name="getParameterEstimates" startLine="170" endLine="175">
      <scope startLine="171" endLine="173" />
    </method>
    <javadoc>
      <text>* Returns the <a href="http://www.xycoon.com/standerrorb(1).htm">standard
 * error of the parameter estimate at index</a>,
 * usually denoted s(b<sub>index</sub>).</text>
      <param>index Index.</param>
      <return>the standard errors associated with parameters estimated at index.</return>
      <throws>OutOfRangeException if {@code index} is not in the interval{@code [0, number of parameters)}.</throws>
    </javadoc>
    <method type="double" name="getStdErrorOfEstimate" startLine="187" endLine="199">
      <scope startLine="188" endLine="190" />
      <scope startLine="191" endLine="193" />
      <declaration type="double" name="var" />
      <scope startLine="195" endLine="197" />
    </method>
    <javadoc>
      <text>* <p>Returns the <a href="http://www.xycoon.com/standerrorb(1).htm">standard
 * error of the parameter estimates</a>,
 * usually denoted s(b<sub>i</sub>).</p>
 * <p>If there are problems with an ill conditioned design matrix then the regressor
 * which is redundant will be assigned <code>Double.NaN</code>. </p></text>
      <return>an array standard errors associated with parameters estimates,
 * null if no estimation occurred</return>
    </javadoc>
    <method type="double[]" name="getStdErrorOfEstimates" startLine="212" endLine="226">
      <scope startLine="213" endLine="215" />
      <declaration type="double[]" name="se" />
      <scope startLine="217" endLine="224">
        <declaration type="double" name="var" />
        <scope startLine="219" endLine="222" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>Returns the covariance between regression parameters i and j.</p>
 * <p>If there are problems with an ill conditioned design matrix then the covariance
 * which involves redundant columns will be assigned {@code Double.NaN}. </p></text>
      <param>i {@code i}th regression parameter.</param>
      <param>j {@code j}th regression parameter.</param>
      <return>the covariance of the parameter estimates.</return>
      <throws>OutOfRangeException if {@code i} or {@code j} is not in the
 * interval {@code [0, number of parameters)}.</throws>
    </javadoc>
    <method type="double" name="getCovarianceOfParameters" startLine="240" endLine="251">
      <scope startLine="241" endLine="243" />
      <scope startLine="244" endLine="246" />
      <scope startLine="247" endLine="249" />
    </method>
    <javadoc>
      <text>* <p>Returns the number of parameters estimated in the model.</p>
 * <p>This is the maximum number of regressors, some techniques may drop
 * redundant parameters</p></text>
      <return>number of regressors, -1 if not estimated</return>
    </javadoc>
    <method type="int" name="getNumberOfParameters" startLine="261" endLine="266">
      <scope startLine="262" endLine="264" />
    </method>
    <javadoc>
      <text>* Returns the number of observations added to the regression model.</text>
      <return>Number of observations, -1 if an error condition prevents estimation</return>
    </javadoc>
    <method type="long" name="getN" startLine="273" endLine="275" />
    <javadoc>
      <text>* <p>Returns the sum of squared deviations of the y values about their mean.</p>
 * <p>This is defined as SSTO
 * <a href="http://www.xycoon.com/SumOfSquares.htm">here</a>.</p>
 * <p>If {@code n < 2}, this returns {@code Double.NaN}.</p></text>
      <return>sum of squared deviations of y values</return>
    </javadoc>
    <method type="double" name="getTotalSumSquares" startLine="287" endLine="289" />
    <javadoc>
      <text>* <p>Returns the sum of squared deviations of the predicted y values about
 * their mean (which equals the mean of y).</p>
 * <p>This is usually abbreviated SSR or SSM.  It is defined as SSM
 * <a href="http://www.xycoon.com/SumOfSquares.htm">here</a></p>
 * <p><strong>Preconditions</strong>: <ul>
 * <li>At least two observations (with at least two different x values)
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, <code>Double.NaN</code> is
 * returned.
 * </li></ul></p></text>
      <return>sum of squared deviations of predicted y values</return>
    </javadoc>
    <method type="double" name="getRegressionSumSquares" startLine="307" endLine="309" />
    <javadoc>
      <text>* <p>Returns the <a href="http://www.xycoon.com/SumOfSquares.htm">
 * sum of squared errors</a> (SSE) associated with the regression
 * model.</p>
 * <p>The return value is constrained to be non-negative - i.e., if due to
 * rounding errors the computational formula returns a negative result,
 * 0 is returned.</p>
 * <p><strong>Preconditions</strong>: <ul>
 * <li>numberOfParameters data pairs
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, <code>Double,NaN</code> is
 * returned.
 * </li></ul></p></text>
      <return>sum of squared errors associated with the regression model</return>
    </javadoc>
    <method type="double" name="getErrorSumSquares" startLine="329" endLine="331" />
    <javadoc>
      <text>* <p>Returns the sum of squared errors divided by the degrees of freedom,
 * usually abbreviated MSE.</p>
 * <p>If there are fewer than <strong>numberOfParameters + 1</strong> data pairs in the model,
 * or if there is no variation in <code>x</code>, this returns
 * <code>Double.NaN</code>.</p></text>
      <return>sum of squared deviations of y values</return>
    </javadoc>
    <method type="double" name="getMeanSquareError" startLine="343" endLine="345" />
    <javadoc>
      <text>* <p>Returns the <a href="http://www.xycoon.com/coefficient1.htm">
 * coefficient of multiple determination</a>,
 * usually denoted r-square.</p>
 * <p><strong>Preconditions</strong>: <ul>
 * <li>At least numberOfParameters observations (with at least numberOfParameters different x values)
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, {@code Double,NaN} is
 * returned.
 * </li></ul></p></text>
      <return>r-square, a double in the interval [0, 1]</return>
    </javadoc>
    <method type="double" name="getRSquared" startLine="361" endLine="363" />
    <javadoc>
      <text>* <p>Returns the adjusted R-squared statistic, defined by the formula <pre>
 * R<sup>2</sup><sub>adj</sub> = 1 - [SSR (n - 1)] / [SSTO (n - p)]
 * </pre>
 * where SSR is the sum of squared residuals},
 * SSTO is the total sum of squares}, n is the number
 * of observations and p is the number of parameters estimated (including the intercept).</p>
 * <p>If the regression is estimated without an intercept term, what is returned is <pre>
 * <code> 1 - (1 - {@link #getRSquared()} ) * (n / (n - p)) </code>
 * </pre></p></text>
      <return>adjusted R-Squared statistic</return>
    </javadoc>
    <method type="double" name="getAdjustedRSquared" startLine="379" endLine="381" />
    <javadoc>
      <text>* Returns true if the regression model has been computed including an intercept.
 * In this case, the coefficient of the intercept is the first element of the{@link #getParameterEstimates() parameter estimates}.</text>
      <return>true if the model has an intercept term</return>
    </javadoc>
    <method type="boolean" name="hasIntercept" startLine="389" endLine="391" />
    <javadoc>
      <text>* Gets the i-jth element of the variance-covariance matrix.</text>
      <param>i first variable index</param>
      <param>j second variable index</param>
      <return>the requested variance-covariance matrix entry</return>
    </javadoc>
    <method type="double" name="getVcvElement" startLine="400" endLine="421">
      <scope startLine="401" endLine="418">
        <scope startLine="402" endLine="411">
          <scope startLine="404" endLine="406" />
          <scope startLine="406" endLine="408" />
          <scope startLine="408" endLine="410" />
        </scope>
        <scope startLine="411" endLine="417">
          <scope startLine="412" endLine="414" />
          <scope startLine="414" endLine="416" />
        </scope>
        <comment>could be stored in upper or lower triangular</comment>
        <comment>could be in single array</comment>
      </scope>
      <scope startLine="418" endLine="420" />
    </method>
  </class>
</source>
