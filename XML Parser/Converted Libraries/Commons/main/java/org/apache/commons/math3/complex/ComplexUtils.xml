<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.complex">
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="ComplexUtils" startLine="24">
    <javadoc>
      <text>* Static implementations of common{@link org.apache.commons.math3.complex.Complex} utilities functions.</text>
      <version>$Id: ComplexUtils.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Default constructor.</text>
    </javadoc>
    <method type="constructor" name="ComplexUtils" startLine="35" endLine="35" />
    <javadoc>
      <text>* Creates a complex number from the given polar representation.
 * <p>
 * The value returned is <code>r&middot;e<sup>i&middot;theta</sup></code>,
 * computed as <code>r&middot;cos(theta) + r&middot;sin(theta)i</code></p>
 * <p>
 * If either <code>r</code> or <code>theta</code> is NaN, or
 * <code>theta</code> is infinite, {@link Complex#NaN} is returned.</p>
 * <p>
 * If <code>r</code> is infinite and <code>theta</code> is finite,
 * infinite or NaN values may be returned in parts of the result, following
 * the rules for double arithmetic.<pre>
 * Examples:
 * <code>
 * polar2Complex(INFINITY, &pi;/4) = INFINITY + INFINITY i
 * polar2Complex(INFINITY, 0) = INFINITY + NaN i
 * polar2Complex(INFINITY, -&pi;/4) = INFINITY - INFINITY i
 * polar2Complex(INFINITY, 5&pi;/4) = -INFINITY - INFINITY i </code></pre></p></text>
      <param>r the modulus of the complex number to create</param>
      <param>theta  the argument of the complex number to create</param>
      <return><code>r&middot;e<sup>i&middot;theta</sup></code></return>
      <throws>MathIllegalArgumentException if {@code r} is negative.</throws>
      <since>1.1</since>
    </javadoc>
    <method type="Complex" name="polar2Complex" startLine="62" endLine="68">
      <scope startLine="63" endLine="66" />
    </method>
    <javadoc>
      <text>* Convert an array of primitive doubles to an array of {@code Complex} objects.</text>
      <param>real Array of numbers to be converted to their {@code Complex}equivalent.</param>
      <return>an array of {@code Complex} objects.</return>
      <since>3.1</since>
    </javadoc>
    <method type="Complex[]" name="convertToComplex" startLine="79" endLine="86">
      <declaration type="Complex[]" name="c" />
      <scope startLine="81" endLine="83" />
    </method>
  </class>
</source>
