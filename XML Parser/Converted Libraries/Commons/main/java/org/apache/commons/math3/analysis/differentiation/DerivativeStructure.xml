<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.differentiation">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.RealFieldElement" />
  <import name="org.apache.commons.math3.Field" />
  <import name="org.apache.commons.math3.FieldElement" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="DerivativeStructure" startLine="31">
    <implements name="RealFieldElement<DerivativeStructure>" />
    <implements name="Serializable" />
    <javadoc>
      <text>* Class representing both the value and the differentials of a function.
 * <p>This class is the workhorse of the differentiation package.</p>
 * <p>This class is an implementation of the extension to Rall's
 * numbers described in Dan Kalman's paper <a
 * href="http://www.math.american.edu/People/kalman/pdffiles/mmgautodiff.pdf">Doubly
 * Recursive Multivariate Automatic Differentiation</a>, Mathematics Magazine, vol. 75,
 * no. 3, June 2002.</p>. Rall's numbers are an extension to the real numbers used
 * throughout mathematical expressions; they hold the derivative together with the
 * value of a function. Dan Kalman's derivative structures hold all partial derivatives
 * up to any specified order, with respect to any number of free parameters. Rall's
 * numbers therefore can be seen as derivative structures for order one derivative and
 * one free parameter, and real numbers can be seen as derivative structures with zero
 * order derivative and no free parameters.</p>
 * <p>{@link DerivativeStructure} instances can be used directly thanks to
 * the arithmetic operators to the mathematical functions provided as static
 * methods by this class (+, -, *, /, %, sin, cos ...).</p>
 * <p>Implementing complex expressions by hand using these classes is
 * a tedious and error-prone task but has the advantage of having no limitation
 * on the derivation order despite no requiring users to compute the derivatives by
 * themselves. Implementing complex expression can also be done by developing computation
 * code using standard primitive double values and to use {@link UnivariateFunctionDifferentiator differentiators} to create the {@link DerivativeStructure}-based instances. This method is simpler but may be limited in
 * the accuracy and derivation orders and may be computationally intensive (this is
 * typically the case for {@link FiniteDifferencesDifferentiator finite differences
 * differentiator}.</p>
 * <p>Instances of this class are guaranteed to be immutable.</p></text>
      <see>DSCompiler</see>
      <version>$Id: DerivativeStructure.java 1462423 2013-03-29 07:25:18Z luc $</version>
      <since>3.1</since>
    </javadoc>
    <javadoc>
      <text>* Serializable UID.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Compiler for the current dimensions.</text>
    </javadoc>
    <declaration type="DSCompiler" name="compiler" />
    <javadoc>
      <text>* Combined array holding all values.</text>
    </javadoc>
    <declaration type="double[]" name="data" />
    <javadoc>
      <text>* Build an instance with all values and derivatives set to 0.</text>
      <param>compiler compiler to use for computation</param>
    </javadoc>
    <method type="constructor" name="DerivativeStructure" startLine="76" endLine="79" />
    <javadoc>
      <text>* Build an instance with all values and derivatives set to 0.</text>
      <param>parameters number of free parameters</param>
      <param>order derivation order</param>
      <throws>NumberIsTooLargeException if order is too large</throws>
    </javadoc>
    <method type="constructor" name="DerivativeStructure" startLine="87" endLine="89" />
    <javadoc>
      <text>* Build an instance representing a constant value.</text>
      <param>parameters number of free parameters</param>
      <param>order derivation order</param>
      <param>value value of the constant</param>
      <throws>NumberIsTooLargeException if order is too large</throws>
      <see>#DerivativeStructure(int,int,int,double)</see>
    </javadoc>
    <method type="constructor" name="DerivativeStructure" startLine="99" endLine="102" />
    <javadoc>
      <text>* Build an instance representing a variable.
 * <p>Instances built using this constructor are considered
 * to be the free variables with respect to which differentials
 * are computed. As such, their differential with respect to
 * themselves is +1.</p></text>
      <param>parameters number of free parameters</param>
      <param>order derivation order</param>
      <param>index index of the variable (from 0 to {@code parameters - 1})</param>
      <param>value value of the variable</param>
      <exception>NumberIsTooLargeException if {@code index >= parameters}.</exception>
      <see>#DerivativeStructure(int,int,double)</see>
    </javadoc>
    <method type="constructor" name="DerivativeStructure" startLine="118" endLine="130">
      <scope startLine="121" endLine="123" />
      <scope startLine="125" endLine="128">
        <comment>the derivative of the variable with respect to itself is 1.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Linear combination constructor.
 * The derivative structure built will be a1 * ds1 + a2 * ds2</text>
      <param>a1 first scale factor</param>
      <param>ds1 first base (unscaled) derivative structure</param>
      <param>a2 second scale factor</param>
      <param>ds2 second base (unscaled) derivative structure</param>
      <exception>DimensionMismatchException if number of free parameters or orders are inconsistent</exception>
    </javadoc>
    <method type="constructor" name="DerivativeStructure" startLine="142" endLine="146" />
    <javadoc>
      <text>* Linear combination constructor.
 * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3</text>
      <param>a1 first scale factor</param>
      <param>ds1 first base (unscaled) derivative structure</param>
      <param>a2 second scale factor</param>
      <param>ds2 second base (unscaled) derivative structure</param>
      <param>a3 third scale factor</param>
      <param>ds3 third base (unscaled) derivative structure</param>
      <exception>DimensionMismatchException if number of free parameters or orders are inconsistent</exception>
    </javadoc>
    <method type="constructor" name="DerivativeStructure" startLine="161" endLine="166" />
    <javadoc>
      <text>* Linear combination constructor.
 * The derivative structure built will be a1 * ds1 + a2 * ds2 + a3 * ds3 + a4 * ds4</text>
      <param>a1 first scale factor</param>
      <param>ds1 first base (unscaled) derivative structure</param>
      <param>a2 second scale factor</param>
      <param>ds2 second base (unscaled) derivative structure</param>
      <param>a3 third scale factor</param>
      <param>ds3 third base (unscaled) derivative structure</param>
      <param>a4 fourth scale factor</param>
      <param>ds4 fourth base (unscaled) derivative structure</param>
      <exception>DimensionMismatchException if number of free parameters or orders are inconsistent</exception>
    </javadoc>
    <method type="constructor" name="DerivativeStructure" startLine="184" endLine="192" />
    <javadoc>
      <text>* Build an instance from all its derivatives.</text>
      <param>parameters number of free parameters</param>
      <param>order derivation order</param>
      <param>derivatives derivatives sorted according to{@link DSCompiler#getPartialDerivativeIndex(int...)}</param>
      <exception>DimensionMismatchException if derivatives array does not match the{@link DSCompiler#getSize() size} expected by the compiler</exception>
      <throws>NumberIsTooLargeException if order is too large</throws>
      <see>#getAllDerivatives()</see>
    </javadoc>
    <method type="constructor" name="DerivativeStructure" startLine="205" endLine="211">
      <scope startLine="207" endLine="209" />
    </method>
    <javadoc>
      <text>* Copy constructor.</text>
      <param>ds instance to copy</param>
    </javadoc>
    <method type="constructor" name="DerivativeStructure" startLine="216" endLine="219" />
    <javadoc>
      <text>* Get the number of free parameters.</text>
      <return>number of free parameters</return>
    </javadoc>
    <method type="int" name="getFreeParameters" startLine="224" endLine="226" />
    <javadoc>
      <text>* Get the derivation order.</text>
      <return>derivation order</return>
    </javadoc>
    <method type="int" name="getOrder" startLine="231" endLine="233" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="double" name="getReal" startLine="238" endLine="240" />
    <javadoc>
      <text>* Get the value part of the derivative structure.</text>
      <return>value part of the derivative structure</return>
      <see>#getPartialDerivative(int...)</see>
    </javadoc>
    <method type="double" name="getValue" startLine="246" endLine="248" />
    <javadoc>
      <text>* Get a partial derivative.</text>
      <param>orders derivation orders with respect to each variable (if all orders are 0,
 * the value is returned)</param>
      <return>partial derivative</return>
      <see>#getValue()</see>
      <exception>DimensionMismatchException if the numbers of variables does not
 * match the instance</exception>
      <exception>NumberIsTooLargeException if sum of derivation orders is larger
 * than the instance limits</exception>
    </javadoc>
    <method type="double" name="getPartialDerivative" startLine="261" endLine="263" />
    <javadoc>
      <text>* Get all partial derivatives.</text>
      <return>a fresh copy of partial derivatives, in an array sorted according to{@link DSCompiler#getPartialDerivativeIndex(int...)}</return>
    </javadoc>
    <method type="double[]" name="getAllDerivatives" startLine="269" endLine="271" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="add" startLine="276" endLine="280">
      <declaration type="DerivativeStructure" name="ds" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
    </javadoc>
    <method type="DerivativeStructure" name="add" startLine="287" endLine="292">
      <declaration type="DerivativeStructure" name="ds" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="subtract" startLine="297" endLine="299" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
    </javadoc>
    <method type="DerivativeStructure" name="subtract" startLine="306" endLine="311">
      <declaration type="DerivativeStructure" name="ds" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="DerivativeStructure" name="multiply" startLine="314" endLine="316" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="multiply" startLine="321" endLine="327">
      <declaration type="DerivativeStructure" name="ds" />
      <scope startLine="323" endLine="325" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
    </javadoc>
    <method type="DerivativeStructure" name="multiply" startLine="334" endLine="339">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="divide" startLine="344" endLine="350">
      <declaration type="DerivativeStructure" name="ds" />
      <scope startLine="346" endLine="348" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
    </javadoc>
    <method type="DerivativeStructure" name="divide" startLine="357" endLine="362">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="DerivativeStructure" name="remainder" startLine="365" endLine="369">
      <declaration type="DerivativeStructure" name="ds" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="remainder" startLine="377" endLine="382">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="DerivativeStructure" name="negate" startLine="385" endLine="391">
      <declaration type="DerivativeStructure" name="ds" />
      <scope startLine="387" endLine="389" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="abs" startLine="396" endLine="403">
      <scope startLine="397" endLine="400">
        <comment>we use the bits representation to also handle -0.0</comment>
      </scope>
      <scope startLine="400" endLine="402" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="ceil" startLine="408" endLine="412" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="floor" startLine="417" endLine="421" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="rint" startLine="426" endLine="430" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="long" name="round" startLine="433" endLine="435" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="signum" startLine="440" endLine="444" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="copySign" startLine="449" endLine="456">
      <declaration type="long" name="m" />
      <declaration type="long" name="s" />
      <scope startLine="452" endLine="454">
        <comment>Sign is currently OK</comment>
      </scope>
      <comment>flip sign</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="copySign" startLine="461" endLine="468">
      <declaration type="long" name="m" />
      <declaration type="long" name="s" />
      <scope startLine="464" endLine="466">
        <comment>Sign is currently OK</comment>
      </scope>
      <comment>flip sign</comment>
    </method>
    <javadoc>
      <text>* Return the exponent of the instance value, removing the bias.
 * <p>
 * For double numbers of the form 2<sup>x</sup>, the unbiased
 * exponent is exactly x.
 * </p></text>
      <return>exponent for instance in IEEE754 representation, without bias</return>
    </javadoc>
    <method type="int" name="getExponent" startLine="478" endLine="480" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="scalb" startLine="485" endLine="491">
      <declaration type="DerivativeStructure" name="ds" />
      <scope startLine="487" endLine="489" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="hypot" startLine="499" endLine="540">
      <scope startLine="503" endLine="507" />
      <scope startLine="507" endLine="511" />
      <scope startLine="511" endLine="539">
        <declaration type="int" name="expX" />
        <declaration type="int" name="expY" />
        <scope startLine="515" endLine="518" />
        <scope startLine="518" endLine="521" />
        <scope startLine="521" endLine="537">
          <declaration type="int" name="middleExp" />
          <declaration type="DerivativeStructure" name="scaledX" />
          <declaration type="DerivativeStructure" name="scaledY" />
          <declaration type="DerivativeStructure" name="scaledH" />
        </scope>
        <comment>y is neglectible with respect to x</comment>
        <comment>x is neglectible with respect to y</comment>
        <comment>find an intermediate scale to avoid both overflow and underflow</comment>
        <comment>scale parameters without losing precision</comment>
        <comment>compute scaled hypotenuse</comment>
        <comment>remove scaling</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the hypotenuse of a triangle with sides {@code x} and {@code y}- sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)<br/>
 * avoiding intermediate overflow or underflow.
 * <ul>
 * <li> If either argument is infinite, then the result is positive infinity.</li>
 * <li> else, if either argument is NaN then the result is NaN.</li>
 * </ul></text>
      <param>x a value</param>
      <param>y a value</param>
      <return>sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)</return>
      <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="hypot" startLine="560" endLine="562" />
    <javadoc>
      <text>* Compute composition of the instance by a univariate function.</text>
      <param>f array of value and derivatives of the function at
 * the current point (i.e. [f({@link #getValue()}),
 * f'({@link #getValue()}), f''({@link #getValue()})...]).</param>
      <return>f(this)</return>
      <exception>DimensionMismatchException if the number of derivatives
 * in the array is not equal to {@link #getOrder() order} + 1</exception>
    </javadoc>
    <method type="DerivativeStructure" name="compose" startLine="573" endLine="580">
      <scope startLine="574" endLine="576" />
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="DerivativeStructure" name="reciprocal" startLine="583" endLine="587">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="sqrt" startLine="592" endLine="594" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="cbrt" startLine="599" endLine="601" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="rootN" startLine="606" endLine="610">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Field<DerivativeStructure>" name="getField" startLine="613" endLine="632">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="DerivativeStructure" name="getZero" startLine="617" endLine="619" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="DerivativeStructure" name="getOne" startLine="622" endLine="624" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="Class<? extends FieldElement<DerivativeStructure>>" name="getRuntimeClass" startLine="627" endLine="629" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="pow" startLine="637" endLine="641">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="pow" startLine="646" endLine="650">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="pow" startLine="658" endLine="663">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="exp" startLine="668" endLine="672">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="expm1" startLine="677" endLine="681">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="log" startLine="686" endLine="690">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="log1p" startLine="695" endLine="699">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* Base 10 logarithm.</text>
      <return>base 10 logarithm of the instance</return>
    </javadoc>
    <method type="DerivativeStructure" name="log10" startLine="704" endLine="708">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="cos" startLine="713" endLine="717">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="sin" startLine="722" endLine="726">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="tan" startLine="731" endLine="735">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="acos" startLine="740" endLine="744">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="asin" startLine="749" endLine="753">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="atan" startLine="758" endLine="762">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="atan2" startLine="768" endLine="773">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* Two arguments arc tangent operation.</text>
      <param>y first argument of the arc tangent</param>
      <param>x second argument of the arc tangent</param>
      <return>atan2(y, x)</return>
      <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="atan2" startLine="784" endLine="786" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="cosh" startLine="791" endLine="795">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="sinh" startLine="800" endLine="804">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="tanh" startLine="809" endLine="813">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="acosh" startLine="818" endLine="822">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="asinh" startLine="827" endLine="831">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="atanh" startLine="836" endLine="840">
      <declaration type="DerivativeStructure" name="result" />
    </method>
    <javadoc>
      <text>* Convert radians to degrees, with error of less than 0.5 ULP</text>
      <return>instance converted into degrees</return>
    </javadoc>
    <method type="DerivativeStructure" name="toDegrees" startLine="845" endLine="851">
      <declaration type="DerivativeStructure" name="ds" />
      <scope startLine="847" endLine="849" />
    </method>
    <javadoc>
      <text>* Convert degrees to radians, with error of less than 0.5 ULP</text>
      <return>instance converted into radians</return>
    </javadoc>
    <method type="DerivativeStructure" name="toRadians" startLine="856" endLine="862">
      <declaration type="DerivativeStructure" name="ds" />
      <scope startLine="858" endLine="860" />
    </method>
    <javadoc>
      <text>* Evaluate Taylor expansion a derivative structure.</text>
      <param>delta parameters offsets (&Delta;x, &Delta;y, ...)</param>
      <return>value of the Taylor expansion at x + &Delta;x, y + &Delta;y, ...</return>
      <throws>MathArithmeticException if factorials becomes too large</throws>
    </javadoc>
    <method type="double" name="taylor" startLine="869" endLine="871" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="linearCombination" startLine="879" endLine="903">
      <declaration type="double[]" name="aDouble" />
      <scope startLine="883" endLine="885" />
      <declaration type="double[]" name="bDouble" />
      <scope startLine="887" endLine="889" />
      <declaration type="double" name="accurateValue" />
      <declaration type="DerivativeStructure" name="simpleValue" />
      <scope startLine="894" endLine="896" />
      <declaration type="double[]" name="all" />
      <comment>compute an accurate value, taking care of cancellations</comment>
      <comment>compute a simple value, with all partial derivatives</comment>
      <comment>create a result with accurate value and all derivatives (not necessarily as accurate as the value)</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="linearCombination" startLine="911" endLine="931">
      <declaration type="double[]" name="bDouble" />
      <scope startLine="915" endLine="917" />
      <declaration type="double" name="accurateValue" />
      <declaration type="DerivativeStructure" name="simpleValue" />
      <scope startLine="922" endLine="924" />
      <declaration type="double[]" name="all" />
      <comment>compute an accurate value, taking care of cancellations</comment>
      <comment>compute a simple value, with all partial derivatives</comment>
      <comment>create a result with accurate value and all derivatives (not necessarily as accurate as the value)</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="linearCombination" startLine="940" endLine="954">
      <declaration type="double" name="accurateValue" />
      <declaration type="DerivativeStructure" name="simpleValue" />
      <declaration type="double[]" name="all" />
      <comment>compute an accurate value, taking care of cancellations</comment>
      <comment>compute a simple value, with all partial derivatives</comment>
      <comment>create a result with accurate value and all derivatives (not necessarily as accurate as the value)</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="linearCombination" startLine="963" endLine="977">
      <declaration type="double" name="accurateValue" />
      <declaration type="DerivativeStructure" name="simpleValue" />
      <declaration type="double[]" name="all" />
      <comment>compute an accurate value, taking care of cancellations</comment>
      <comment>compute a simple value, with all partial derivatives</comment>
      <comment>create a result with accurate value and all derivatives (not necessarily as accurate as the value)</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="linearCombination" startLine="987" endLine="1002">
      <declaration type="double" name="accurateValue" />
      <declaration type="DerivativeStructure" name="simpleValue" />
      <declaration type="double[]" name="all" />
      <comment>compute an accurate value, taking care of cancellations</comment>
      <comment>compute a simple value, with all partial derivatives</comment>
      <comment>create a result with accurate value and all derivatives (not necessarily as accurate as the value)</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="linearCombination" startLine="1012" endLine="1027">
      <declaration type="double" name="accurateValue" />
      <declaration type="DerivativeStructure" name="simpleValue" />
      <declaration type="double[]" name="all" />
      <comment>compute an accurate value, taking care of cancellations</comment>
      <comment>compute a simple value, with all partial derivatives</comment>
      <comment>create a result with accurate value and all derivatives (not necessarily as accurate as the value)</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="linearCombination" startLine="1038" endLine="1054">
      <declaration type="double" name="accurateValue" />
      <declaration type="DerivativeStructure" name="simpleValue" />
      <declaration type="double[]" name="all" />
      <comment>compute an accurate value, taking care of cancellations</comment>
      <comment>compute a simple value, with all partial derivatives</comment>
      <comment>create a result with accurate value and all derivatives (not necessarily as accurate as the value)</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <exception>DimensionMismatchException if number of free parameters
 * or orders do not match</exception>
      <since>3.2</since>
    </javadoc>
    <method type="DerivativeStructure" name="linearCombination" startLine="1065" endLine="1081">
      <declaration type="double" name="accurateValue" />
      <declaration type="DerivativeStructure" name="simpleValue" />
      <declaration type="double[]" name="all" />
      <comment>compute an accurate value, taking care of cancellations</comment>
      <comment>compute a simple value, with all partial derivatives</comment>
      <comment>create a result with accurate value and all derivatives (not necessarily as accurate as the value)</comment>
    </method>
    <javadoc>
      <text>* Test for the equality of two derivative structures.
 * <p>
 * Derivative structures are considered equal if they have the same number
 * of free parameters, the same derivation order, and the same derivatives.
 * </p></text>
      <param>other Object to test for equality to this</param>
      <return>true if two derivative structures are equal</return>
      <since>3.2</since>
    </javadoc>
    <method type="boolean" name="equals" startLine="1094" endLine="1109">
      <scope startLine="1096" endLine="1098" />
      <scope startLine="1100" endLine="1105">
        <declaration type="DerivativeStructure" name="rhs" />
      </scope>
    </method>
    <javadoc>
      <text>* Get a hashCode for the derivative structure.</text>
      <return>a hash code value for this object</return>
      <since>3.2</since>
    </javadoc>
    <method type="int" name="hashCode" startLine="1117" endLine="1119" />
    <javadoc>
      <text>* Replace the instance with a data transfer object for serialization.</text>
      <return>data transfer object that will be serialized</return>
    </javadoc>
    <method type="Object" name="writeReplace" startLine="1125" endLine="1127" />
    <class name="DataTransferObject" startLine="1129">
      <implements name="Serializable" />
      <javadoc>
        <text>* Internal class used only for serialization.</text>
      </javadoc>
      <javadoc>
        <text>* Serializable UID.</text>
      </javadoc>
      <declaration type="long" name="serialVersionUID" />
      <javadoc>
        <text>* Number of variables.</text>
        <serial />
      </javadoc>
      <declaration type="int" name="variables" />
      <javadoc>
        <text>* Derivation order.</text>
        <serial />
      </javadoc>
      <declaration type="int" name="order" />
      <javadoc>
        <text>* Partial derivatives.</text>
        <serial />
      </javadoc>
      <declaration type="double[]" name="data" />
      <javadoc>
        <text>* Simple constructor.</text>
        <param>variables number of variables</param>
        <param>order derivation order</param>
        <param>data partial derivatives</param>
      </javadoc>
      <method type="constructor" name="DataTransferObject" startLine="1155" endLine="1159" />
      <javadoc>
        <text>* Replace the deserialized data transfer object with a {@link DerivativeStructure}.</text>
        <return>replacement {@link DerivativeStructure}</return>
      </javadoc>
      <method type="Object" name="readResolve" startLine="1164" endLine="1166" />
    </class>
  </class>
</source>
