<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.differentiation">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.analysis.UnivariateMatrixFunction" />
  <import name="org.apache.commons.math3.analysis.UnivariateVectorFunction" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="FiniteDifferencesDifferentiator" startLine="30">
    <implements name="UnivariateFunctionDifferentiator" />
    <implements name="UnivariateVectorFunctionDifferentiator" />
    <implements name="UnivariateMatrixFunctionDifferentiator" />
    <implements name="Serializable" />
    <javadoc>
      <text>* Univariate functions differentiator using finite differences.
 * <p>
 * This class creates some wrapper objects around regular{@link UnivariateFunction univariate functions} (or {@link UnivariateVectorFunction univariate vector functions} or {@link UnivariateMatrixFunction univariate matrix functions}). These
 * wrapper objects compute derivatives in addition to function
 * value.
 * </p>
 * <p>
 * The wrapper objects work by calling the underlying function on
 * a sampling grid around the current point and performing polynomial
 * interpolation. A finite differences scheme with n points is
 * theoretically able to compute derivatives up to order n-1, but
 * it is generally better to have a slight margin. The step size must
 * also be small enough in order for the polynomial approximation to
 * be good in the current point neighborhood, but it should not be too
 * small because numerical instability appears quickly (there are several
 * differences of close points). Choosing the number of points and
 * the step size is highly problem dependent.
 * </p>
 * <p>
 * As an example of good and bad settings, lets consider the quintic
 * polynomial function {@code f(x) = (x-1)*(x-0.5)*x*(x+0.5)*(x+1)}.
 * Since it is a polynomial, finite differences with at least 6 points
 * should theoretically recover the exact same polynomial and hence
 * compute accurate derivatives for any order. However, due to numerical
 * errors, we get the following results for a 7 points finite differences
 * for abscissae in the [-10, 10] range:
 * <ul>
 * <li>step size = 0.25, second order derivative error about 9.97e-10</li>
 * <li>step size = 0.25, fourth order derivative error about 5.43e-8</li>
 * <li>step size = 1.0e-6, second order derivative error about 148</li>
 * <li>step size = 1.0e-6, fourth order derivative error about 6.35e+14</li>
 * </ul>
 * This example shows that the small step size is really bad, even simply
 * for second order derivative!
 * </p></text>
      <version>$Id: FiniteDifferencesDifferentiator.java 1420666 2012-12-12 13:33:20Z erans $</version>
      <since>3.1</since>
    </javadoc>
    <javadoc>
      <text>* Serializable UID.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Number of points to use.</text>
    </javadoc>
    <declaration type="int" name="nbPoints" />
    <javadoc>
      <text>* Step size.</text>
    </javadoc>
    <declaration type="double" name="stepSize" />
    <javadoc>
      <text>* Half sample span.</text>
    </javadoc>
    <declaration type="double" name="halfSampleSpan" />
    <javadoc>
      <text>* Lower bound for independent variable.</text>
    </javadoc>
    <declaration type="double" name="tMin" />
    <javadoc>
      <text>* Upper bound for independent variable.</text>
    </javadoc>
    <declaration type="double" name="tMax" />
    <javadoc>
      <text>* Build a differentiator with number of points and step size when independent variable is unbounded.
 * <p>
 * Beware that wrong settings for the finite differences differentiator
 * can lead to highly unstable and inaccurate results, especially for
 * high derivation orders. Using very small step sizes is often a
 * <em>bad</em> idea.
 * </p></text>
      <param>nbPoints number of points to use</param>
      <param>stepSize step size (gap between each point)</param>
      <exception>NotPositiveException if {@code stepsize <= 0} (note that{@link NotPositiveException} extends {@link NumberIsTooSmallException})</exception>
      <exception>NumberIsTooSmallException {@code nbPoint <= 1}</exception>
    </javadoc>
    <method type="constructor" name="FiniteDifferencesDifferentiator" startLine="108" endLine="110" />
    <javadoc>
      <text>* Build a differentiator with number of points and step size when independent variable is bounded.
 * <p>
 * When the independent variable is bounded (tLower &lt; t &lt; tUpper), the sampling
 * points used for differentiation will be adapted to ensure the constraint holds
 * even near the boundaries. This means the sample will not be centered anymore in
 * these cases. At an extreme case, computing derivatives exactly at the lower bound
 * will lead the sample to be entirely on the right side of the derivation point.
 * </p>
 * <p>
 * Note that the boundaries are considered to be excluded for function evaluation.
 * </p>
 * <p>
 * Beware that wrong settings for the finite differences differentiator
 * can lead to highly unstable and inaccurate results, especially for
 * high derivation orders. Using very small step sizes is often a
 * <em>bad</em> idea.
 * </p></text>
      <param>nbPoints number of points to use</param>
      <param>stepSize step size (gap between each point)</param>
      <param>tLower lower bound for independent variable (may be {@code Double.NEGATIVE_INFINITY}if there are no lower bounds)</param>
      <param>tUpper upper bound for independent variable (may be {@code Double.POSITIVE_INFINITY}if there are no upper bounds)</param>
      <exception>NotPositiveException if {@code stepsize <= 0} (note that{@link NotPositiveException} extends {@link NumberIsTooSmallException})</exception>
      <exception>NumberIsTooSmallException {@code nbPoint <= 1}</exception>
      <exception>NumberIsTooLargeException {@code stepSize * (nbPoints - 1) >= tUpper - tLower}</exception>
    </javadoc>
    <method type="constructor" name="FiniteDifferencesDifferentiator" startLine="143" endLine="163">
      <scope startLine="145" endLine="147" />
      <scope startLine="150" endLine="152" />
      <scope startLine="156" endLine="158" />
      <declaration type="double" name="safety" />
    </method>
    <javadoc>
      <text>* Get the number of points to use.</text>
      <return>number of points to use</return>
    </javadoc>
    <method type="int" name="getNbPoints" startLine="169" endLine="171" />
    <javadoc>
      <text>* Get the step size.</text>
      <return>step size</return>
    </javadoc>
    <method type="double" name="getStepSize" startLine="177" endLine="179" />
    <javadoc>
      <text>* Evaluate derivatives from a sample.
 * <p>
 * Evaluation is done using divided differences.
 * </p></text>
      <param>t evaluation abscissa value and derivatives</param>
      <param>t0 first sample point abscissa</param>
      <param>y function values sample {@code y[i] = f(t[i]) = f(t0 + i * stepSize)}</param>
      <return>value and derivatives at {@code t}</return>
      <exception>NumberIsTooLargeException if the requested derivation order
 * is larger or equal to the number of points</exception>
    </javadoc>
    <method type="DerivativeStructure" name="evaluate" startLine="195" endLine="236">
      <declaration type="double[]" name="top" />
      <declaration type="double[]" name="bottom" />
      <scope startLine="201" endLine="212">
        <scope startLine="205" endLine="207" />
        <comment>update the bottom diagonal of the divided differences array</comment>
        <comment>update the top diagonal of the divided differences array</comment>
      </scope>
      <declaration type="int" name="order" />
      <declaration type="int" name="parameters" />
      <declaration type="double[]" name="derivatives" />
      <declaration type="double" name="dt0" />
      <declaration type="DerivativeStructure" name="interpolation" />
      <declaration type="DerivativeStructure" name="monomial" />
      <scope startLine="221" endLine="232">
        <scope startLine="222" endLine="225" />
        <scope startLine="225" endLine="230">
          <declaration type="DerivativeStructure" name="deltaX" />
        </scope>
        <comment>start with monomial(t) = 1</comment>
        <comment>monomial(t) = (t - t0) * (t - t1) * ... * (t - t(i-1))</comment>
      </scope>
      <comment>create divided differences diagonal arrays</comment>
      <comment>evaluate interpolation polynomial (represented by top diagonal) at t</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}<p>The returned object cannot compute derivatives to arbitrary orders. The
 * value function will throw a {@link NumberIsTooLargeException} if the requested
 * derivation order is larger or equal to the number of points.
 * </p></text>
    </javadoc>
    <method type="UnivariateDifferentiableFunction" name="differentiate" startLine="244" endLine="276">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double" name="value" startLine="248" endLine="250" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="DerivativeStructure" name="value" startLine="254" endLine="273">
        <scope startLine="257" endLine="259" />
        <declaration type="double" name="t0" />
        <declaration type="double[]" name="y" />
        <scope startLine="266" endLine="268" />
      </method>
      <comment>check we can achieve the requested derivation order with the sample</comment>
      <comment>compute sample position, trying to be centered if possible</comment>
      <comment>compute sample points</comment>
      <comment>evaluate derivatives</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}<p>The returned object cannot compute derivatives to arbitrary orders. The
 * value function will throw a {@link NumberIsTooLargeException} if the requested
 * derivation order is larger or equal to the number of points.
 * </p></text>
    </javadoc>
    <method type="UnivariateDifferentiableVectorFunction" name="differentiate" startLine="284" endLine="327">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double[]" name="value" startLine="288" endLine="290" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="DerivativeStructure[]" name="value" startLine="294" endLine="324">
        <scope startLine="297" endLine="299" />
        <declaration type="double" name="t0" />
        <declaration type="double[][]" name="y" />
        <scope startLine="306" endLine="314">
          <declaration type="double[]" name="v" />
          <scope startLine="308" endLine="310" />
          <scope startLine="311" endLine="313" />
        </scope>
        <declaration type="DerivativeStructure[]" name="value" />
        <scope startLine="318" endLine="320" />
      </method>
      <comment>check we can achieve the requested derivation order with the sample</comment>
      <comment>compute sample position, trying to be centered if possible</comment>
      <comment>compute sample points</comment>
      <comment>evaluate derivatives</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}<p>The returned object cannot compute derivatives to arbitrary orders. The
 * value function will throw a {@link NumberIsTooLargeException} if the requested
 * derivation order is larger or equal to the number of points.
 * </p></text>
    </javadoc>
    <method type="UnivariateDifferentiableMatrixFunction" name="differentiate" startLine="335" endLine="382">
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="double[][]" name="value" startLine="339" endLine="341" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="DerivativeStructure[][]" name="value" startLine="345" endLine="379">
        <scope startLine="348" endLine="350" />
        <declaration type="double" name="t0" />
        <declaration type="double[][][]" name="y" />
        <scope startLine="357" endLine="367">
          <declaration type="double[][]" name="v" />
          <scope startLine="359" endLine="361" />
          <scope startLine="362" endLine="366">
            <scope startLine="363" endLine="365" />
          </scope>
        </scope>
        <declaration type="DerivativeStructure[][]" name="value" />
        <scope startLine="371" endLine="375">
          <scope startLine="372" endLine="374" />
        </scope>
      </method>
      <comment>check we can achieve the requested derivation order with the sample</comment>
      <comment>compute sample position, trying to be centered if possible</comment>
      <comment>compute sample points</comment>
      <comment>evaluate derivatives</comment>
    </method>
  </class>
</source>
