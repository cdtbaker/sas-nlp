<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.MathInternalError" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.RandomDataImpl" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="AbstractIntegerDistribution" startLine="30">
    <implements name="IntegerDistribution" />
    <implements name="Serializable" />
    <javadoc>
      <text>* Base class for integer-valued discrete distributions.  Default
 * implementations are provided for some of the methods that do not vary
 * from distribution to distribution.</text>
      <version>$Id: AbstractIntegerDistribution.java 1455716 2013-03-12 21:12:21Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* RandomData instance used to generate samples from the distribution.</text>
      <deprecated>As of 3.1, to be removed in 4.0. Please use the{@link #random} instance variable instead.</deprecated>
    </javadoc>
    <declaration type="RandomDataImpl" name="randomData" />
    <javadoc>
      <text>* RNG instance used to generate samples from the distribution.</text>
      <since>3.1</since>
    </javadoc>
    <declaration type="RandomGenerator" name="random" />
    <javadoc>
      <deprecated>As of 3.1, to be removed in 4.0. Please use{@link #AbstractIntegerDistribution(RandomGenerator)} instead.</deprecated>
    </javadoc>
    <method type="constructor" name="AbstractIntegerDistribution" startLine="61" endLine="65">
      <comment>Legacy users are only allowed to access the deprecated "randomData".</comment>
      <comment>New users are forbidden to use this constructor.</comment>
    </method>
    <javadoc>
      <param>rng Random number generator.</param>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="AbstractIntegerDistribution" startLine="71" endLine="73" />
    <javadoc>
      <text>* {@inheritDoc}The default implementation uses the identity
 * <p>{@code P(x0 < X <= x1) = P(X <= x1) - P(X <= x0)}</p></text>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="81" endLine="87">
      <scope startLine="82" endLine="85" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}The default implementation returns
 * <ul>
 * <li>{@link #getSupportLowerBound()} for {@code p = 0},</li>
 * <li>{@link #getSupportUpperBound()} for {@code p = 1}, and</li>
 * <li>{@link #solveInverseCumulativeProbability(double,int,int)} for{@code 0 < p < 1}.</li>
 * </ul></text>
    </javadoc>
    <method type="int" name="inverseCumulativeProbability" startLine="100" endLine="143">
      <scope startLine="101" endLine="103" />
      <declaration type="int" name="lower" />
      <scope startLine="106" endLine="108" />
      <scope startLine="109" endLine="113">
        <scope startLine="110" endLine="112" />
      </scope>
      <scope startLine="113" endLine="116">
        <comment>this ensures cumulativeProbability(lower) < p, which</comment>
        <comment>is important for the solving step</comment>
      </scope>
      <declaration type="int" name="upper" />
      <scope startLine="119" endLine="121" />
      <declaration type="double" name="mu" />
      <declaration type="double" name="sigma" />
      <declaration type="boolean" name="chebyshevApplies" />
      <scope startLine="129" endLine="140">
        <declaration type="double" name="k" />
        <declaration type="double" name="tmp" />
        <scope startLine="132" endLine="134" />
        <scope startLine="137" endLine="139" />
      </scope>
      <comment>use the one-sided Chebyshev inequality to narrow the bracket</comment>
      <comment>cf. AbstractRealDistribution.inverseCumulativeProbability(double)</comment>
    </method>
    <javadoc>
      <text>* This is a utility function used by {@link #inverseCumulativeProbability(double)}. It assumes {@code 0 < p < 1} and
 * that the inverse cumulative probability lies in the bracket {@code(lower, upper]}. The implementation does simple bisection to find the
 * smallest {@code p}-quantile <code>inf{x in Z | P(X<=x) >= p}</code>.</text>
      <param>p the cumulative probability</param>
      <param>lower a value satisfying {@code cumulativeProbability(lower) < p}</param>
      <param>upper a value satisfying {@code p <= cumulativeProbability(upper)}</param>
      <return>the smallest {@code p}-quantile of this distribution</return>
    </javadoc>
    <method type="int" name="solveInverseCumulativeProbability" startLine="157" endLine="177">
      <scope startLine="158" endLine="175">
        <declaration type="int" name="xm" />
        <scope startLine="160" endLine="167" />
        <declaration type="double" name="pm" />
        <scope startLine="170" endLine="172" />
        <scope startLine="172" endLine="174" />
        <comment>Overflow.
 There will never be an overflow in both calculation methods
 for xm at the same time</comment>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="reseedRandomGenerator" startLine="180" endLine="183" />
    <javadoc>
      <text>* {@inheritDoc}The default implementation uses the
 * <a href="http://en.wikipedia.org/wiki/Inverse_transform_sampling">
 * inversion method</a>.</text>
    </javadoc>
    <method type="int" name="sample" startLine="192" endLine="194" />
    <javadoc>
      <text>* {@inheritDoc}The default implementation generates the sample by calling{@link #sample()} in a loop.</text>
    </javadoc>
    <method type="int[]" name="sample" startLine="202" endLine="212">
      <scope startLine="203" endLine="206" />
      <declaration type="int[]" name="out" />
      <scope startLine="208" endLine="210" />
    </method>
    <javadoc>
      <text>* Computes the cumulative probability function and checks for {@code NaN}values returned. Throws {@code MathInternalError} if the value is{@code NaN}. Rethrows any exception encountered evaluating the cumulative
 * probability function. Throws {@code MathInternalError} if the cumulative
 * probability function returns {@code NaN}.</text>
      <param>argument input value</param>
      <return>the cumulative probability</return>
      <throws>MathInternalError if the cumulative probability is {@code NaN}</throws>
    </javadoc>
    <method type="double" name="checkedCumulativeProbability" startLine="226" endLine="234">
      <declaration type="double" name="result" />
      <scope startLine="229" endLine="232" />
    </method>
  </class>
</source>
