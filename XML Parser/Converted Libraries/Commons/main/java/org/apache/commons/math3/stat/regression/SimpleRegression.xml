<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.regression">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.distribution.TDistribution" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.Precision" />
  <class name="SimpleRegression" startLine="29">
    <implements name="Serializable" />
    <implements name="UpdatingMultipleLinearRegression" />
    <javadoc>
      <text>* Estimates an ordinary least squares regression model
 * with one independent variable.
 * <p>
 * <code> y = intercept + slope * x  </code></p>
 * <p>
 * Standard errors for <code>intercept</code> and <code>slope</code> are
 * available as well as ANOVA, r-square and Pearson's r statistics.</p>
 * <p>
 * Observations (x,y pairs) can be added to the model one at a time or they
 * can be provided in a 2-dimensional array.  The observations are not stored
 * in memory, so there is no limit to the number of observations that can be
 * added to the model.</p>
 * <p>
 * <strong>Usage Notes</strong>: <ul>
 * <li> When there are fewer than two observations in the model, or when
 * there is no variation in the x values (i.e. all x values are the same)
 * all statistics return <code>NaN</code>. At least two observations with
 * different x coordinates are required to estimate a bivariate regression
 * model.
 * </li>
 * <li> Getters for the statistics always compute values based on the current
 * set of observations -- i.e., you can get statistics, then add more data
 * and get updated statistics without using a new instance.  There is no
 * "compute" method that updates all statistics.  Each of the getters performs
 * the necessary computations to return the requested statistic.
 * </li>
 * <li> The intercept term may be suppressed by passing {@code false} to
 * the {@link #SimpleRegression(boolean)} constructor.  When the{@code hasIntercept} property is false, the model is estimated without a
 * constant term and {@link #getIntercept()} returns {@code 0}.</li>
 * </ul></p></text>
      <version>$Id: SimpleRegression.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* sum of x values</text>
    </javadoc>
    <declaration type="double" name="sumX" />
    <javadoc>
      <text>* total variation in x (sum of squared deviations from xbar)</text>
    </javadoc>
    <declaration type="double" name="sumXX" />
    <javadoc>
      <text>* sum of y values</text>
    </javadoc>
    <declaration type="double" name="sumY" />
    <javadoc>
      <text>* total variation in y (sum of squared deviations from ybar)</text>
    </javadoc>
    <declaration type="double" name="sumYY" />
    <javadoc>
      <text>* sum of products</text>
    </javadoc>
    <declaration type="double" name="sumXY" />
    <javadoc>
      <text>* number of observations</text>
    </javadoc>
    <declaration type="long" name="n" />
    <javadoc>
      <text>* mean of accumulated x values, used in updating formulas</text>
    </javadoc>
    <declaration type="double" name="xbar" />
    <javadoc>
      <text>* mean of accumulated y values, used in updating formulas</text>
    </javadoc>
    <declaration type="double" name="ybar" />
    <javadoc>
      <text>* include an intercept or not</text>
    </javadoc>
    <declaration type="boolean" name="hasIntercept" />
    <javadoc>
      <text>* Create an empty SimpleRegression instance</text>
    </javadoc>
    <method type="constructor" name="SimpleRegression" startLine="100" endLine="102" />
    <javadoc>
      <text>* Create a SimpleRegression instance, specifying whether or not to estimate
 * an intercept.
 * <p>Use {@code false} to estimate a model with no intercept.  When the{@code hasIntercept} property is false, the model is estimated without a
 * constant term and {@link #getIntercept()} returns {@code 0}.</p></text>
      <param>includeIntercept whether or not to include an intercept term in
 * the regression model</param>
    </javadoc>
    <method type="constructor" name="SimpleRegression" startLine="114" endLine="117" />
    <javadoc>
      <text>* Adds the observation (x,y) to the regression data set.
 * <p>
 * Uses updating formulas for means and sums of squares defined in
 * "Algorithms for Computing the Sample Variance: Analysis and
 * Recommendations", Chan, T.F., Golub, G.H., and LeVeque, R.J.
 * 1983, American Statistician, vol. 37, pp. 242-247, referenced in
 * Weisberg, S. "Applied Linear Regression". 2nd Ed. 1985.</p></text>
      <param>x independent variable value</param>
      <param>y dependent variable value</param>
    </javadoc>
    <method type="void" name="addData" startLine="132" endLine="157">
      <scope startLine="133" endLine="136" />
      <scope startLine="136" endLine="148">
        <scope startLine="137" endLine="147">
          <declaration type="double" name="fact1" />
          <declaration type="double" name="fact2" />
          <declaration type="double" name="dx" />
          <declaration type="double" name="dy" />
        </scope>
      </scope>
      <scope startLine="149" endLine="153" />
    </method>
    <javadoc>
      <text>* Removes the observation (x,y) from the regression data set.
 * <p>
 * Mirrors the addData method.  This method permits the use of
 * SimpleRegression instances in streaming mode where the regression
 * is applied to a sliding "window" of observations, however the caller is
 * responsible for maintaining the set of observations in the window.</p>
 * The method has no effect if there are no points of data (i.e. n=0)</text>
      <param>x independent variable value</param>
      <param>y dependent variable value</param>
    </javadoc>
    <method type="void" name="removeData" startLine="173" endLine="197">
      <scope startLine="174" endLine="196">
        <scope startLine="175" endLine="185">
          <declaration type="double" name="fact1" />
          <declaration type="double" name="fact2" />
          <declaration type="double" name="dx" />
          <declaration type="double" name="dy" />
        </scope>
        <scope startLine="185" endLine="192">
          <declaration type="double" name="fact1" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Adds the observations represented by the elements in
 * <code>data</code>.
 * <p>
 * <code>(data[0][0],data[0][1])</code> will be the first observation, then
 * <code>(data[1][0],data[1][1])</code>, etc.</p>
 * <p>
 * This method does not replace data that has already been added.  The
 * observations represented by <code>data</code> are added to the existing
 * dataset.</p>
 * <p>
 * To replace all data, use <code>clear()</code> before adding the new
 * data.</p></text>
      <param>data array of observations to be added</param>
      <throws>ModelSpecificationException if the length of {@code data[i]} is not
 * greater than or equal to 2</throws>
    </javadoc>
    <method type="void" name="addData" startLine="217" endLine="225">
      <scope startLine="218" endLine="224">
        <scope startLine="219" endLine="222" />
      </scope>
    </method>
    <javadoc>
      <text>* Adds one observation to the regression model.</text>
      <param>x the independent variables which form the design matrix</param>
      <param>y the dependent or response variable</param>
      <throws>ModelSpecificationException if the length of {@code x} does not equal
 * the number of independent variables in the model</throws>
    </javadoc>
    <method type="void" name="addObservation" startLine="236" endLine="241">
      <scope startLine="237" endLine="239" />
    </method>
    <javadoc>
      <text>* Adds a series of observations to the regression model. The lengths of
 * x and y must be the same and x must be rectangular.</text>
      <param>x a series of observations on the independent variables</param>
      <param>y a series of observations on the dependent variable
 * The length of x and y must be the same</param>
      <throws>ModelSpecificationException if {@code x} is not rectangular, does not match
 * the length of {@code y} or does not contain sufficient data to estimate the model</throws>
    </javadoc>
    <method type="void" name="addObservations" startLine="253" endLine="274">
      <scope startLine="254" endLine="259" />
      <declaration type="boolean" name="obsOk" />
      <scope startLine="261" endLine="265">
        <scope startLine="262" endLine="264" />
      </scope>
      <scope startLine="266" endLine="270" />
      <scope startLine="271" endLine="273" />
    </method>
    <javadoc>
      <text>* Removes observations represented by the elements in <code>data</code>.
 * <p>
 * If the array is larger than the current n, only the first n elements are
 * processed.  This method permits the use of SimpleRegression instances in
 * streaming mode where the regression is applied to a sliding "window" of
 * observations, however the caller is responsible for maintaining the set
 * of observations in the window.</p>
 * <p>
 * To remove all data, use <code>clear()</code>.</p></text>
      <param>data array of observations to be removed</param>
    </javadoc>
    <method type="void" name="removeData" startLine="289" endLine="293">
      <scope startLine="290" endLine="292" />
    </method>
    <javadoc>
      <text>* Clears all data from the model.</text>
    </javadoc>
    <method type="void" name="clear" startLine="298" endLine="305" />
    <javadoc>
      <text>* Returns the number of observations that have been added to the model.</text>
      <return>n number of observations that have been added.</return>
    </javadoc>
    <method type="long" name="getN" startLine="312" endLine="314" />
    <javadoc>
      <text>* Returns the "predicted" <code>y</code> value associated with the
 * supplied <code>x</code> value,  based on the data that has been
 * added to the model when this method is activated.
 * <p>
 * <code> predict(x) = intercept + slope * x </code></p>
 * <p>
 * <strong>Preconditions</strong>: <ul>
 * <li>At least two observations (with at least two different x values)
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, <code>Double,NaN</code> is
 * returned.
 * </li></ul></p></text>
      <param>x input <code>x</code> value</param>
      <return>predicted <code>y</code> value</return>
    </javadoc>
    <method type="double" name="predict" startLine="333" endLine="339">
      <declaration type="double" name="b1" />
      <scope startLine="335" endLine="337" />
    </method>
    <javadoc>
      <text>* Returns the intercept of the estimated regression line, if{@link #hasIntercept()} is true; otherwise 0.
 * <p>
 * The least squares estimate of the intercept is computed using the
 * <a href="http://www.xycoon.com/estimation4.htm">normal equations</a>.
 * The intercept is sometimes denoted b0.</p>
 * <p>
 * <strong>Preconditions</strong>: <ul>
 * <li>At least two observations (with at least two different x values)
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, <code>Double,NaN</code> is
 * returned.
 * </li></ul></p></text>
      <return>the intercept of the regression line if the model includes an
 * intercept; 0 otherwise</return>
      <see>#SimpleRegression(boolean)</see>
    </javadoc>
    <method type="double" name="getIntercept" startLine="360" endLine="362" />
    <javadoc>
      <text>* Returns true if the model includes an intercept term.</text>
      <return>true if the regression includes an intercept; false otherwise</return>
      <see>#SimpleRegression(boolean)</see>
    </javadoc>
    <method type="boolean" name="hasIntercept" startLine="370" endLine="372" />
    <javadoc>
      <text>* Returns the slope of the estimated regression line.
 * <p>
 * The least squares estimate of the slope is computed using the
 * <a href="http://www.xycoon.com/estimation4.htm">normal equations</a>.
 * The slope is sometimes denoted b1.</p>
 * <p>
 * <strong>Preconditions</strong>: <ul>
 * <li>At least two observations (with at least two different x values)
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, <code>Double.NaN</code> is
 * returned.
 * </li></ul></p></text>
      <return>the slope of the regression line</return>
    </javadoc>
    <method type="double" name="getSlope" startLine="390" endLine="398">
      <scope startLine="391" endLine="393">
        <comment>not enough data</comment>
      </scope>
      <scope startLine="394" endLine="396">
        <comment>not enough variation in x</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the <a href="http://www.xycoon.com/SumOfSquares.htm">
 * sum of squared errors</a> (SSE) associated with the regression
 * model.
 * <p>
 * The sum is computed using the computational formula</p>
 * <p>
 * <code>SSE = SYY - (SXY * SXY / SXX)</code></p>
 * <p>
 * where <code>SYY</code> is the sum of the squared deviations of the y
 * values about their mean, <code>SXX</code> is similarly defined and
 * <code>SXY</code> is the sum of the products of x and y mean deviations.
 * </p><p>
 * The sums are accumulated using the updating algorithm referenced in{@link #addData}.</p>
 * <p>
 * The return value is constrained to be non-negative - i.e., if due to
 * rounding errors the computational formula returns a negative result,
 * 0 is returned.</p>
 * <p>
 * <strong>Preconditions</strong>: <ul>
 * <li>At least two observations (with at least two different x values)
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, <code>Double,NaN</code> is
 * returned.
 * </li></ul></p></text>
      <return>sum of squared errors associated with the regression model</return>
    </javadoc>
    <method type="double" name="getSumSquaredErrors" startLine="429" endLine="431" />
    <javadoc>
      <text>* Returns the sum of squared deviations of the y values about their mean.
 * <p>
 * This is defined as SSTO
 * <a href="http://www.xycoon.com/SumOfSquares.htm">here</a>.</p>
 * <p>
 * If <code>n < 2</code>, this returns <code>Double.NaN</code>.</p></text>
      <return>sum of squared deviations of y values</return>
    </javadoc>
    <method type="double" name="getTotalSumSquares" startLine="443" endLine="448">
      <scope startLine="444" endLine="446" />
    </method>
    <javadoc>
      <text>* Returns the sum of squared deviations of the x values about their mean.
 * If <code>n < 2</code>, this returns <code>Double.NaN</code>.</p></text>
      <return>sum of squared deviations of x values</return>
    </javadoc>
    <method type="double" name="getXSumSquares" startLine="457" endLine="462">
      <scope startLine="458" endLine="460" />
    </method>
    <javadoc>
      <text>* Returns the sum of crossproducts, x<sub>i</sub>*y<sub>i</sub>.</text>
      <return>sum of cross products</return>
    </javadoc>
    <method type="double" name="getSumOfCrossProducts" startLine="469" endLine="471" />
    <javadoc>
      <text>* Returns the sum of squared deviations of the predicted y values about
 * their mean (which equals the mean of y).
 * <p>
 * This is usually abbreviated SSR or SSM.  It is defined as SSM
 * <a href="http://www.xycoon.com/SumOfSquares.htm">here</a></p>
 * <p>
 * <strong>Preconditions</strong>: <ul>
 * <li>At least two observations (with at least two different x values)
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, <code>Double.NaN</code> is
 * returned.
 * </li></ul></p></text>
      <return>sum of squared deviations of predicted y values</return>
    </javadoc>
    <method type="double" name="getRegressionSumSquares" startLine="489" endLine="491" />
    <javadoc>
      <text>* Returns the sum of squared errors divided by the degrees of freedom,
 * usually abbreviated MSE.
 * <p>
 * If there are fewer than <strong>three</strong> data pairs in the model,
 * or if there is no variation in <code>x</code>, this returns
 * <code>Double.NaN</code>.</p></text>
      <return>sum of squared deviations of y values</return>
    </javadoc>
    <method type="double" name="getMeanSquareError" startLine="503" endLine="508">
      <scope startLine="504" endLine="506" />
    </method>
    <javadoc>
      <text>* Returns <a href="http://mathworld.wolfram.com/CorrelationCoefficient.html">
 * Pearson's product moment correlation coefficient</a>,
 * usually denoted r.
 * <p>
 * <strong>Preconditions</strong>: <ul>
 * <li>At least two observations (with at least two different x values)
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, <code>Double,NaN</code> is
 * returned.
 * </li></ul></p></text>
      <return>Pearson's r</return>
    </javadoc>
    <method type="double" name="getR" startLine="524" endLine="531">
      <declaration type="double" name="b1" />
      <declaration type="double" name="result" />
      <scope startLine="527" endLine="529" />
    </method>
    <javadoc>
      <text>* Returns the <a href="http://www.xycoon.com/coefficient1.htm">
 * coefficient of determination</a>,
 * usually denoted r-square.
 * <p>
 * <strong>Preconditions</strong>: <ul>
 * <li>At least two observations (with at least two different x values)
 * must have been added before invoking this method. If this method is
 * invoked before a model can be estimated, <code>Double,NaN</code> is
 * returned.
 * </li></ul></p></text>
      <return>r-square</return>
    </javadoc>
    <method type="double" name="getRSquare" startLine="547" endLine="550">
      <declaration type="double" name="ssto" />
    </method>
    <javadoc>
      <text>* Returns the <a href="http://www.xycoon.com/standarderrorb0.htm">
 * standard error of the intercept estimate</a>,
 * usually denoted s(b0).
 * <p>
 * If there are fewer that <strong>three</strong> observations in the
 * model, or if there is no variation in x, this returns
 * <code>Double.NaN</code>.</p> Additionally, a <code>Double.NaN</code> is
 * returned when the intercept is constrained to be zero</text>
      <return>standard error associated with intercept estimate</return>
    </javadoc>
    <method type="double" name="getInterceptStdErr" startLine="564" endLine="570">
      <scope startLine="565" endLine="567" />
    </method>
    <javadoc>
      <text>* Returns the <a href="http://www.xycoon.com/standerrorb(1).htm">standard
 * error of the slope estimate</a>,
 * usually denoted s(b1).
 * <p>
 * If there are fewer that <strong>three</strong> data pairs in the model,
 * or if there is no variation in x, this returns <code>Double.NaN</code>.
 * </p></text>
      <return>standard error associated with slope estimate</return>
    </javadoc>
    <method type="double" name="getSlopeStdErr" startLine="583" endLine="585" />
    <javadoc>
      <text>* Returns the half-width of a 95% confidence interval for the slope
 * estimate.
 * <p>
 * The 95% confidence interval is</p>
 * <p>
 * <code>(getSlope() - getSlopeConfidenceInterval(),
 * getSlope() + getSlopeConfidenceInterval())</code></p>
 * <p>
 * If there are fewer that <strong>three</strong> observations in the
 * model, or if there is no variation in x, this returns
 * <code>Double.NaN</code>.</p>
 * <p>
 * <strong>Usage Note</strong>:<br>
 * The validity of this statistic depends on the assumption that the
 * observations included in the model are drawn from a
 * <a href="http://mathworld.wolfram.com/BivariateNormalDistribution.html">
 * Bivariate Normal Distribution</a>.</p></text>
      <return>half-width of 95% confidence interval for the slope estimate</return>
      <throws>OutOfRangeException if the confidence interval can not be computed.</throws>
    </javadoc>
    <method type="double" name="getSlopeConfidenceInterval" startLine="609" endLine="611" />
    <javadoc>
      <text>* Returns the half-width of a (100-100*alpha)% confidence interval for
 * the slope estimate.
 * <p>
 * The (100-100*alpha)% confidence interval is </p>
 * <p>
 * <code>(getSlope() - getSlopeConfidenceInterval(),
 * getSlope() + getSlopeConfidenceInterval())</code></p>
 * <p>
 * To request, for example, a 99% confidence interval, use
 * <code>alpha = .01</code></p>
 * <p>
 * <strong>Usage Note</strong>:<br>
 * The validity of this statistic depends on the assumption that the
 * observations included in the model are drawn from a
 * <a href="http://mathworld.wolfram.com/BivariateNormalDistribution.html">
 * Bivariate Normal Distribution</a>.</p>
 * <p>
 * <strong> Preconditions:</strong><ul>
 * <li>If there are fewer that <strong>three</strong> observations in the
 * model, or if there is no variation in x, this returns
 * <code>Double.NaN</code>.
 * </li>
 * <li><code>(0 < alpha < 1)</code>; otherwise an
 * <code>OutOfRangeException</code> is thrown.
 * </li></ul></p></text>
      <param>alpha the desired significance level</param>
      <return>half-width of 95% confidence interval for the slope estimate</return>
      <throws>OutOfRangeException if the confidence interval can not be computed.</throws>
    </javadoc>
    <method type="double" name="getSlopeConfidenceInterval" startLine="645" endLine="657">
      <scope startLine="646" endLine="648" />
      <scope startLine="649" endLine="652" />
      <declaration type="TDistribution" name="distribution" />
      <comment>No advertised NotStrictlyPositiveException here - will return NaN above</comment>
    </method>
    <javadoc>
      <text>* Returns the significance level of the slope (equiv) correlation.
 * <p>
 * Specifically, the returned value is the smallest <code>alpha</code>
 * such that the slope confidence interval with significance level
 * equal to <code>alpha</code> does not include <code>0</code>.
 * On regression output, this is often denoted <code>Prob(|t| > 0)</code>
 * </p><p>
 * <strong>Usage Note</strong>:<br>
 * The validity of this statistic depends on the assumption that the
 * observations included in the model are drawn from a
 * <a href="http://mathworld.wolfram.com/BivariateNormalDistribution.html">
 * Bivariate Normal Distribution</a>.</p>
 * <p>
 * If there are fewer that <strong>three</strong> observations in the
 * model, or if there is no variation in x, this returns
 * <code>Double.NaN</code>.</p></text>
      <return>significance level for slope/correlation</return>
      <throws>org.apache.commons.math3.exception.MaxCountExceededExceptionif the significance level can not be computed.</throws>
    </javadoc>
    <method type="double" name="getSignificance" startLine="681" endLine="689">
      <scope startLine="682" endLine="684" />
      <declaration type="TDistribution" name="distribution" />
      <comment>No advertised NotStrictlyPositiveException here - will return NaN above</comment>
    </method>
    <javadoc>
      <text>* Returns the intercept of the estimated regression line, given the slope.
 * <p>
 * Will return <code>NaN</code> if slope is <code>NaN</code>.</p></text>
      <param>slope current slope</param>
      <return>the intercept of the regression line</return>
    </javadoc>
    <method type="double" name="getIntercept" startLine="701" endLine="706">
      <scope startLine="702" endLine="704" />
    </method>
    <javadoc>
      <text>* Computes SSR from b1.</text>
      <param>slope regression slope estimate</param>
      <return>sum of squared deviations of predicted y values</return>
    </javadoc>
    <method type="double" name="getRegressionSumSquares" startLine="714" endLine="716" />
    <javadoc>
      <text>* Performs a regression on data present in buffers and outputs a RegressionResults object.
 * <p>If there are fewer than 3 observations in the model and {@code hasIntercept} is true
 * a {@code NoDataException} is thrown.  If there is no intercept term, the model must
 * contain at least 2 observations.</p></text>
      <return>RegressionResults acts as a container of regression output</return>
      <throws>ModelSpecificationException if the model is not correctly specified</throws>
      <throws>NoDataException if there is not sufficient data in the model to
 * estimate the regression parameters</throws>
    </javadoc>
    <method type="RegressionResults" name="regress" startLine="730" endLine="775">
      <scope startLine="731" endLine="757">
        <scope startLine="732" endLine="734" />
        <scope startLine="735" endLine="746">
          <declaration type="double[][]" name="params" />
          <declaration type="double" name="mse" />
          <declaration type="double" name="_syy" />
          <declaration type="double[][]" name="vcv" />
        </scope>
        <scope startLine="746" endLine="756">
          <declaration type="double[][]" name="params" />
          <declaration type="double[][]" name="vcv" />
        </scope>
        <comment>final double mse = getMeanSquareError();</comment>
      </scope>
      <scope startLine="757" endLine="774">
        <scope startLine="758" endLine="760" />
        <scope startLine="761" endLine="767">
          <declaration type="double[][]" name="vcv" />
          <declaration type="double[][]" name="params" />
        </scope>
        <scope startLine="767" endLine="773">
          <declaration type="double[][]" name="vcv" />
          <declaration type="double[][]" name="params" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Performs a regression on data present in buffers including only regressors
 * indexed in variablesToInclude and outputs a RegressionResults object</text>
      <param>variablesToInclude an array of indices of regressors to include</param>
      <return>RegressionResults acts as a container of regression output</return>
      <throws>MathIllegalArgumentException if the variablesToInclude array is null or zero length</throws>
      <throws>OutOfRangeException if a requested variable is not present in model</throws>
    </javadoc>
    <method type="RegressionResults" name="regress" startLine="785" endLine="849">
      <scope startLine="786" endLine="788" />
      <scope startLine="789" endLine="793" />
      <scope startLine="795" endLine="841">
        <scope startLine="796" endLine="806">
          <scope startLine="797" endLine="799" />
          <scope startLine="799" endLine="801" />
          <scope startLine="802" endLine="804" />
        </scope>
        <scope startLine="806" endLine="840">
          <scope startLine="807" endLine="809" />
          <declaration type="double" name="_mean" />
          <declaration type="double" name="_syy" />
          <scope startLine="812" endLine="820">
            <declaration type="double[][]" name="vcv" />
            <declaration type="double[][]" name="params" />
          </scope>
          <scope startLine="820" endLine="839">
            <declaration type="double" name="_sxx" />
            <declaration type="double" name="_sxy" />
            <declaration type="double" name="_sse" />
            <declaration type="double" name="_mse" />
            <scope startLine="826" endLine="832">
              <declaration type="double[][]" name="vcv" />
              <declaration type="double[][]" name="params" />
            </scope>
            <scope startLine="832" endLine="838">
              <declaration type="double[][]" name="vcv" />
              <declaration type="double[][]" name="params" />
            </scope>
          </scope>
        </scope>
        <comment>just the mean</comment>
        <comment>final double _syy = sumYY + sumY * sumY / ((double) n);</comment>
      </scope>
      <scope startLine="841" endLine="846">
        <scope startLine="842" endLine="844" />
      </scope>
    </method>
    <comment>---------------------Public methods--------------------------------------</comment>
    <comment>---------------------Private methods-----------------------------------</comment>
  </class>
</source>
