<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.random">
  <import name="java.io.Serializable" />
  <import name="java.security.NoSuchAlgorithmException" />
  <import name="java.security.NoSuchProviderException" />
  <import name="java.util.Collection" />
  <import name="org.apache.commons.math3.distribution.IntegerDistribution" />
  <import name="org.apache.commons.math3.distribution.RealDistribution" />
  <import name="org.apache.commons.math3.exception.NotANumberException" />
  <import name="org.apache.commons.math3.exception.NotFiniteNumberException" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <class name="RandomDataImpl" startLine="35">
    <implements name="RandomData" />
    <implements name="Serializable" />
    <javadoc>
      <text>* Generates random deviates and other random data using a {@link RandomGenerator}instance to generate non-secure data and a {@link java.security.SecureRandom}instance to provide data for the <code>nextSecureXxx</code> methods. If no
 * <code>RandomGenerator</code> is provided in the constructor, the default is
 * to use a {@link Well19937c} generator. To plug in a different
 * implementation, either implement <code>RandomGenerator</code> directly or
 * extend {@link AbstractRandomGenerator}.
 * <p>
 * Supports reseeding the underlying pseudo-random number generator (PRNG). The
 * <code>SecurityProvider</code> and <code>Algorithm</code> used by the
 * <code>SecureRandom</code> instance can also be reset.
 * </p>
 * <p>
 * For details on the default PRNGs, see {@link java.util.Random} and{@link java.security.SecureRandom}.
 * </p>
 * <p>
 * <strong>Usage Notes</strong>:
 * <ul>
 * <li>
 * Instance variables are used to maintain <code>RandomGenerator</code> and
 * <code>SecureRandom</code> instances used in data generation. Therefore, to
 * generate a random sequence of values or strings, you should use just
 * <strong>one</strong> <code>RandomDataGenerator</code> instance repeatedly.</li>
 * <li>
 * The "secure" methods are *much* slower. These should be used only when a
 * cryptographically secure random sequence is required. A secure random
 * sequence is a sequence of pseudo-random values which, in addition to being
 * well-dispersed (so no subsequence of values is an any more likely than other
 * subsequence of the the same length), also has the additional property that
 * knowledge of values generated up to any point in the sequence does not make
 * it any easier to predict subsequent values.</li>
 * <li>
 * When a new <code>RandomDataGenerator</code> is created, the underlying random
 * number generators are <strong>not</strong> initialized. If you do not
 * explicitly seed the default non-secure generator, it is seeded with the
 * current time in milliseconds plus the system identity hash code on first use.
 * The same holds for the secure generator. If you provide a <code>RandomGenerator</code>
 * to the constructor, however, this generator is not reseeded by the constructor
 * nor is it reseeded on first use.</li>
 * <li>
 * The <code>reSeed</code> and <code>reSeedSecure</code> methods delegate to the
 * corresponding methods on the underlying <code>RandomGenerator</code> and
 * <code>SecureRandom</code> instances. Therefore, <code>reSeed(long)</code>
 * fully resets the initial state of the non-secure random number generator (so
 * that reseeding with a specific value always results in the same subsequent
 * random sequence); whereas reSeedSecure(long) does <strong>not</strong>
 * reinitialize the secure random number generator (so secure sequences started
 * with calls to reseedSecure(long) won't be identical).</li>
 * <li>
 * This implementation is not synchronized. The underlying <code>RandomGenerator</code>
 * or <code>SecureRandom</code> instances are not protected by synchronization and
 * are not guaranteed to be thread-safe.  Therefore, if an instance of this class
 * is concurrently utilized by multiple threads, it is the responsibility of
 * client code to synchronize access to seeding and data generation methods.
 * </li>
 * </ul>
 * </p></text>
      <deprecated>to be removed in 4.0.  Use {@link RandomDataGenerator} instead</deprecated>
      <version>$Id: RandomDataImpl.java 1421917 2012-12-14 15:05:18Z erans $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* RandomDataGenerator delegate</text>
    </javadoc>
    <declaration type="RandomDataGenerator" name="delegate" />
    <javadoc>
      <text>* Construct a RandomDataImpl, using a default random generator as the source
 * of randomness.
 * <p>The default generator is a {@link Well19937c} seeded
 * with {@code System.currentTimeMillis() + System.identityHashCode(this))}.
 * The generator is initialized and seeded on first use.</p></text>
    </javadoc>
    <method type="constructor" name="RandomDataImpl" startLine="114" endLine="116" />
    <javadoc>
      <text>* Construct a RandomDataImpl using the supplied {@link RandomGenerator} as
 * the source of (non-secure) random data.</text>
      <param>rand the source of (non-secure) random data
 * (may be null, resulting in the default generator)</param>
      <since>1.1</since>
    </javadoc>
    <method type="constructor" name="RandomDataImpl" startLine="126" endLine="128" />
    <javadoc>
      <return>the delegate object.</return>
      <deprecated>To be removed in 4.0.</deprecated>
    </javadoc>
    <method type="RandomDataGenerator" name="getDelegate" startLine="135" endLine="137" />
    <javadoc>
      <text>* {@inheritDoc}<p>
 * <strong>Algorithm Description:</strong> hex strings are generated using a
 * 2-step process.
 * <ol>
 * <li>{@code len / 2 + 1} binary bytes are generated using the underlying
 * Random</li>
 * <li>Each binary byte is translated into 2 hex digits</li>
 * </ol>
 * </p></text>
      <param>len the desired string length.</param>
      <return>the random string.</return>
      <throws>NotStrictlyPositiveException if {@code len <= 0}.</throws>
    </javadoc>
    <method type="String" name="nextHexString" startLine="155" endLine="157" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="nextInt" startLine="160" endLine="162" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="long" name="nextLong" startLine="165" endLine="167" />
    <javadoc>
      <text>* {@inheritDoc}<p>
 * <strong>Algorithm Description:</strong> hex strings are generated in
 * 40-byte segments using a 3-step process.
 * <ol>
 * <li>
 * 20 random bytes are generated using the underlying
 * <code>SecureRandom</code>.</li>
 * <li>
 * SHA-1 hash is applied to yield a 20-byte binary digest.</li>
 * <li>
 * Each byte of the binary digest is converted to 2 hex digits.</li>
 * </ol>
 * </p></text>
    </javadoc>
    <method type="String" name="nextSecureHexString" startLine="185" endLine="187" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="nextSecureInt" startLine="190" endLine="192" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="long" name="nextSecureLong" startLine="195" endLine="197" />
    <javadoc>
      <text>* {@inheritDoc}<p>
 * <strong>Algorithm Description</strong>:
 * <ul><li> For small means, uses simulation of a Poisson process
 * using Uniform deviates, as described
 * <a href="http://irmi.epfl.ch/cmos/Pmmi/interactive/rng7.htm"> here.</a>
 * The Poisson process (and hence value returned) is bounded by 1000 * mean.</li>
 * <li> For large means, uses the rejection algorithm described in <br/>
 * Devroye, Luc. (1981).<i>The Computer Generation of Poisson Random Variables</i>
 * <strong>Computing</strong> vol. 26 pp. 197-207.</li></ul></p></text>
    </javadoc>
    <method type="long" name="nextPoisson" startLine="212" endLine="214" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="nextGaussian" startLine="217" endLine="219" />
    <javadoc>
      <text>* {@inheritDoc}<p>
 * <strong>Algorithm Description</strong>: Uses the Algorithm SA (Ahrens)
 * from p. 876 in:
 * [1]: Ahrens, J. H. and Dieter, U. (1972). Computer methods for
 * sampling from the exponential and normal distributions.
 * Communications of the ACM, 15, 873-882.
 * </p></text>
    </javadoc>
    <method type="double" name="nextExponential" startLine="232" endLine="234" />
    <javadoc>
      <text>* {@inheritDoc}<p>
 * <strong>Algorithm Description</strong>: scales the output of
 * Random.nextDouble(), but rejects 0 values (i.e., will generate another
 * random double if Random.nextDouble() returns 0). This is necessary to
 * provide a symmetric output interval (both endpoints excluded).
 * </p></text>
    </javadoc>
    <method type="double" name="nextUniform" startLine="247" endLine="249" />
    <javadoc>
      <text>* {@inheritDoc}<p>
 * <strong>Algorithm Description</strong>: if the lower bound is excluded,
 * scales the output of Random.nextDouble(), but rejects 0 values (i.e.,
 * will generate another random double if Random.nextDouble() returns 0).
 * This is necessary to provide a symmetric output interval (both
 * endpoints excluded).
 * </p></text>
      <since>3.0</since>
    </javadoc>
    <method type="double" name="nextUniform" startLine="264" endLine="266" />
    <javadoc>
      <text>* Generates a random value from the {@link org.apache.commons.math3.distribution.BetaDistribution Beta Distribution}.
 * This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}to generate random values.</text>
      <param>alpha first distribution shape parameter</param>
      <param>beta second distribution shape parameter</param>
      <return>random value sampled from the beta(alpha, beta) distribution</return>
      <since>2.2</since>
    </javadoc>
    <method type="double" name="nextBeta" startLine="278" endLine="280" />
    <javadoc>
      <text>* Generates a random value from the {@link org.apache.commons.math3.distribution.BinomialDistribution Binomial Distribution}.
 * This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}to generate random values.</text>
      <param>numberOfTrials number of trials of the Binomial distribution</param>
      <param>probabilityOfSuccess probability of success of the Binomial distribution</param>
      <return>random value sampled from the Binomial(numberOfTrials, probabilityOfSuccess) distribution</return>
      <since>2.2</since>
    </javadoc>
    <method type="int" name="nextBinomial" startLine="292" endLine="294" />
    <javadoc>
      <text>* Generates a random value from the {@link org.apache.commons.math3.distribution.CauchyDistribution Cauchy Distribution}.
 * This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}to generate random values.</text>
      <param>median the median of the Cauchy distribution</param>
      <param>scale the scale parameter of the Cauchy distribution</param>
      <return>random value sampled from the Cauchy(median, scale) distribution</return>
      <since>2.2</since>
    </javadoc>
    <method type="double" name="nextCauchy" startLine="306" endLine="308" />
    <javadoc>
      <text>* Generates a random value from the {@link org.apache.commons.math3.distribution.ChiSquaredDistribution ChiSquare Distribution}.
 * This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}to generate random values.</text>
      <param>df the degrees of freedom of the ChiSquare distribution</param>
      <return>random value sampled from the ChiSquare(df) distribution</return>
      <since>2.2</since>
    </javadoc>
    <method type="double" name="nextChiSquare" startLine="319" endLine="321" />
    <javadoc>
      <text>* Generates a random value from the {@link org.apache.commons.math3.distribution.FDistribution F Distribution}.
 * This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}to generate random values.</text>
      <param>numeratorDf the numerator degrees of freedom of the F distribution</param>
      <param>denominatorDf the denominator degrees of freedom of the F distribution</param>
      <return>random value sampled from the F(numeratorDf, denominatorDf) distribution</return>
      <throws>NotStrictlyPositiveException if{@code numeratorDf <= 0} or {@code denominatorDf <= 0}.</throws>
      <since>2.2</since>
    </javadoc>
    <method type="double" name="nextF" startLine="335" endLine="337" />
    <javadoc>
      <text>* <p>Generates a random value from the{@link org.apache.commons.math3.distribution.GammaDistribution Gamma Distribution}.</p>
 * <p>This implementation uses the following algorithms: </p>
 * <p>For 0 < shape < 1: <br/>
 * Ahrens, J. H. and Dieter, U., <i>Computer methods for
 * sampling from gamma, beta, Poisson and binomial distributions.</i>
 * Computing, 12, 223-246, 1974.</p>
 * <p>For shape >= 1: <br/>
 * Marsaglia and Tsang, <i>A Simple Method for Generating
 * Gamma Variables.</i> ACM Transactions on Mathematical Software,
 * Volume 26 Issue 3, September, 2000.</p></text>
      <param>shape the median of the Gamma distribution</param>
      <param>scale the scale parameter of the Gamma distribution</param>
      <return>random value sampled from the Gamma(shape, scale) distribution</return>
      <throws>NotStrictlyPositiveException if {@code shape <= 0} or{@code scale <= 0}.</throws>
      <since>2.2</since>
    </javadoc>
    <method type="double" name="nextGamma" startLine="362" endLine="364" />
    <javadoc>
      <text>* Generates a random value from the {@link org.apache.commons.math3.distribution.HypergeometricDistribution Hypergeometric Distribution}.
 * This implementation uses {@link #nextInversionDeviate(IntegerDistribution) inversion}to generate random values.</text>
      <param>populationSize the population size of the Hypergeometric distribution</param>
      <param>numberOfSuccesses number of successes in the population of the Hypergeometric distribution</param>
      <param>sampleSize the sample size of the Hypergeometric distribution</param>
      <return>random value sampled from the Hypergeometric(numberOfSuccesses, sampleSize) distribution</return>
      <throws>NumberIsTooLargeException  if {@code numberOfSuccesses > populationSize},
 * or {@code sampleSize > populationSize}.</throws>
      <throws>NotStrictlyPositiveException if {@code populationSize <= 0}.</throws>
      <throws>NotPositiveException  if {@code numberOfSuccesses < 0}.</throws>
      <since>2.2</since>
    </javadoc>
    <method type="int" name="nextHypergeometric" startLine="382" endLine="384" />
    <javadoc>
      <text>* Generates a random value from the {@link org.apache.commons.math3.distribution.PascalDistribution Pascal Distribution}.
 * This implementation uses {@link #nextInversionDeviate(IntegerDistribution) inversion}to generate random values.</text>
      <param>r the number of successes of the Pascal distribution</param>
      <param>p the probability of success of the Pascal distribution</param>
      <return>random value sampled from the Pascal(r, p) distribution</return>
      <since>2.2</since>
      <throws>NotStrictlyPositiveException if the number of successes is not positive</throws>
      <throws>OutOfRangeException if the probability of success is not in the
 * range {@code [0, 1]}.</throws>
    </javadoc>
    <method type="int" name="nextPascal" startLine="400" endLine="402" />
    <javadoc>
      <text>* Generates a random value from the {@link org.apache.commons.math3.distribution.TDistribution T Distribution}.
 * This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}to generate random values.</text>
      <param>df the degrees of freedom of the T distribution</param>
      <return>random value from the T(df) distribution</return>
      <since>2.2</since>
      <throws>NotStrictlyPositiveException if {@code df <= 0}</throws>
    </javadoc>
    <method type="double" name="nextT" startLine="414" endLine="416" />
    <javadoc>
      <text>* Generates a random value from the {@link org.apache.commons.math3.distribution.WeibullDistribution Weibull Distribution}.
 * This implementation uses {@link #nextInversionDeviate(RealDistribution) inversion}to generate random values.</text>
      <param>shape the shape parameter of the Weibull distribution</param>
      <param>scale the scale parameter of the Weibull distribution</param>
      <return>random value sampled from the Weibull(shape, size) distribution</return>
      <since>2.2</since>
      <throws>NotStrictlyPositiveException if {@code shape <= 0} or{@code scale <= 0}.</throws>
    </javadoc>
    <method type="double" name="nextWeibull" startLine="430" endLine="432" />
    <javadoc>
      <text>* Generates a random value from the {@link org.apache.commons.math3.distribution.ZipfDistribution Zipf Distribution}.
 * This implementation uses {@link #nextInversionDeviate(IntegerDistribution) inversion}to generate random values.</text>
      <param>numberOfElements the number of elements of the ZipfDistribution</param>
      <param>exponent the exponent of the ZipfDistribution</param>
      <return>random value sampled from the Zipf(numberOfElements, exponent) distribution</return>
      <since>2.2</since>
      <exception>NotStrictlyPositiveException if {@code numberOfElements <= 0}or {@code exponent <= 0}.</exception>
    </javadoc>
    <method type="int" name="nextZipf" startLine="446" endLine="448" />
    <javadoc>
      <text>* Reseeds the random number generator with the supplied seed.
 * <p>
 * Will create and initialize if null.
 * </p></text>
      <param>seedthe seed value to use</param>
    </javadoc>
    <method type="void" name="reSeed" startLine="460" endLine="462" />
    <javadoc>
      <text>* Reseeds the secure random number generator with the current time in
 * milliseconds.
 * <p>
 * Will create and initialize if null.
 * </p></text>
    </javadoc>
    <method type="void" name="reSeedSecure" startLine="471" endLine="473" />
    <javadoc>
      <text>* Reseeds the secure random number generator with the supplied seed.
 * <p>
 * Will create and initialize if null.
 * </p></text>
      <param>seedthe seed value to use</param>
    </javadoc>
    <method type="void" name="reSeedSecure" startLine="484" endLine="486" />
    <javadoc>
      <text>* Reseeds the random number generator with{@code System.currentTimeMillis() + System.identityHashCode(this))}.</text>
    </javadoc>
    <method type="void" name="reSeed" startLine="492" endLine="494" />
    <javadoc>
      <text>* Sets the PRNG algorithm for the underlying SecureRandom instance using
 * the Security Provider API. The Security Provider API is defined in <a
 * href =
 * "http://java.sun.com/j2se/1.3/docs/guide/security/CryptoSpec.html#AppA">
 * Java Cryptography Architecture API Specification & Reference.</a>
 * <p>
 * <strong>USAGE NOTE:</strong> This method carries <i>significant</i>
 * overhead and may take several seconds to execute.
 * </p></text>
      <param>algorithmthe name of the PRNG algorithm</param>
      <param>providerthe name of the provider</param>
      <throws>NoSuchAlgorithmExceptionif the specified algorithm is not available</throws>
      <throws>NoSuchProviderExceptionif the specified provider is not installed</throws>
    </javadoc>
    <method type="void" name="setSecureAlgorithm" startLine="517" endLine="519" />
    <javadoc>
      <text>* {@inheritDoc}<p>
 * Uses a 2-cycle permutation shuffle. The shuffling process is described <a
 * href="http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html">
 * here</a>.
 * </p></text>
    </javadoc>
    <method type="int[]" name="nextPermutation" startLine="531" endLine="533" />
    <javadoc>
      <text>* {@inheritDoc}<p>
 * <strong>Algorithm Description</strong>: Uses a 2-cycle permutation
 * shuffle to generate a random permutation of <code>c.size()</code> and
 * then returns the elements whose indexes correspond to the elements of the
 * generated permutation. This technique is described, and proven to
 * generate random samples <a
 * href="http://www.maths.abdn.ac.uk/~igc/tch/mx4002/notes/node83.html">
 * here</a>
 * </p></text>
    </javadoc>
    <method type="Object[]" name="nextSample" startLine="549" endLine="551" />
    <javadoc>
      <text>* Generate a random deviate from the given distribution using the
 * <a href="http://en.wikipedia.org/wiki/Inverse_transform_sampling"> inversion method.</a></text>
      <param>distribution Continuous distribution to generate a random value from</param>
      <return>a random value sampled from the given distribution</return>
      <throws>MathIllegalArgumentException if the underlynig distribution throws one</throws>
      <since>2.2</since>
      <deprecated>use the distribution's sample() method</deprecated>
    </javadoc>
    <method type="double" name="nextInversionDeviate" startLine="564" endLine="567" />
    <javadoc>
      <text>* Generate a random deviate from the given distribution using the
 * <a href="http://en.wikipedia.org/wiki/Inverse_transform_sampling"> inversion method.</a></text>
      <param>distribution Integer distribution to generate a random value from</param>
      <return>a random value sampled from the given distribution</return>
      <throws>MathIllegalArgumentException if the underlynig distribution throws one</throws>
      <since>2.2</since>
      <deprecated>use the distribution's sample() method</deprecated>
    </javadoc>
    <method type="int" name="nextInversionDeviate" startLine="580" endLine="582" />
  </class>
</source>
