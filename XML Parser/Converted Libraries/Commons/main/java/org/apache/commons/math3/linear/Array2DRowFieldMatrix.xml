<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.Field" />
  <import name="org.apache.commons.math3.FieldElement" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathIllegalStateException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="Array2DRowFieldMatrix" extends="AbstractFieldMatrix<T>" startLine="35">
    <implements name="Serializable" />
    <javadoc>
      <text>* Implementation of FieldMatrix<T> using a {@link FieldElement}[][] array to store entries.
 * <p>
 * As specified in the {@link FieldMatrix} interface, matrix element indexing
 * is 0-based -- e.g., <code>getEntry(0, 0)</code>
 * returns the element in the first row, first column of the matrix.</li></ul>
 * </p></text>
      <param><T>
 *  the type of the field elements</param>
      <version>$Id: Array2DRowFieldMatrix.java 1449528 2013-02-24 19:06:20Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Entries of the matrix</text>
    </javadoc>
    <declaration type="T[][]" name="data" />
    <javadoc>
      <text>* Creates a matrix with no data</text>
      <param>field field to which the elements belong</param>
    </javadoc>
    <method type="constructor" name="Array2DRowFieldMatrix" startLine="58" endLine="60" />
    <javadoc>
      <text>* Create a new {@code FieldMatrix<T>} with the supplied row and column dimensions.</text>
      <param>field Field to which the elements belong.</param>
      <param>rowDimension Number of rows in the new matrix.</param>
      <param>columnDimension Number of columns in the new matrix.</param>
      <throws>NotStrictlyPositiveException if row or column dimension is not positive.</throws>
    </javadoc>
    <method type="constructor" name="Array2DRowFieldMatrix" startLine="72" endLine="75" />
    <javadoc>
      <text>* Create a new {@code FieldMatrix<T>} using the input array as the underlying
 * data array.
 * <p>The input array is copied, not referenced. This constructor has
 * the same effect as calling {@link #Array2DRowFieldMatrix(FieldElement[][],boolean)}with the second argument set to {@code true}.</p></text>
      <param>d Data for the new matrix.</param>
      <throws>DimensionMismatchException if {@code d} is not rectangular.</throws>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
      <throws>NoDataException if there are not at least one row and one column.</throws>
      <see>#Array2DRowFieldMatrix(FieldElement[][],boolean)</see>
    </javadoc>
    <method type="constructor" name="Array2DRowFieldMatrix" startLine="92" endLine="94" />
    <javadoc>
      <text>* Create a new {@code FieldMatrix<T>} using the input array as the underlying
 * data array.
 * <p>The input array is copied, not referenced. This constructor has
 * the same effect as calling {@link #Array2DRowFieldMatrix(FieldElement[][],boolean)}with the second argument set to {@code true}.</p></text>
      <param>field Field to which the elements belong.</param>
      <param>d Data for the new matrix.</param>
      <throws>DimensionMismatchException if {@code d} is not rectangular.</throws>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
      <throws>NoDataException if there are not at least one row and one column.</throws>
      <see>#Array2DRowFieldMatrix(FieldElement[][],boolean)</see>
    </javadoc>
    <method type="constructor" name="Array2DRowFieldMatrix" startLine="112" endLine="115" />
    <javadoc>
      <text>* Create a new {@code FieldMatrix<T>} using the input array as the underlying
 * data array.
 * <p>If an array is built specially in order to be embedded in a{@code FieldMatrix<T>} and not used directly, the {@code copyArray} may be
 * set to {@code false}. This will prevent the copying and improve
 * performance as no new array will be built and no data will be copied.</p></text>
      <param>d Data for the new matrix.</param>
      <param>copyArray Whether to copy or reference the input array.</param>
      <throws>DimensionMismatchException if {@code d} is not rectangular.</throws>
      <throws>NoDataException if there are not at least one row and one column.</throws>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
      <see>#Array2DRowFieldMatrix(FieldElement[][])</see>
    </javadoc>
    <method type="constructor" name="Array2DRowFieldMatrix" startLine="134" endLine="136" />
    <javadoc>
      <text>* Create a new {@code FieldMatrix<T>} using the input array as the underlying
 * data array.
 * <p>If an array is built specially in order to be embedded in a{@code FieldMatrix<T>} and not used directly, the {@code copyArray} may be
 * set to {@code false}. This will prevent the copying and improve
 * performance as no new array will be built and no data will be copied.</p></text>
      <param>field Field to which the elements belong.</param>
      <param>d Data for the new matrix.</param>
      <param>copyArray Whether to copy or reference the input array.</param>
      <throws>DimensionMismatchException if {@code d} is not rectangular.</throws>
      <throws>NoDataException if there are not at least one row and one column.</throws>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
      <see>#Array2DRowFieldMatrix(FieldElement[][])</see>
    </javadoc>
    <method type="constructor" name="Array2DRowFieldMatrix" startLine="155" endLine="176">
      <scope startLine="157" endLine="159" />
      <scope startLine="159" endLine="175">
        <declaration type="int" name="nRows" />
        <scope startLine="162" endLine="164" />
        <declaration type="int" name="nCols" />
        <scope startLine="166" endLine="168" />
        <scope startLine="169" endLine="173">
          <scope startLine="170" endLine="172" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Create a new (column) {@code FieldMatrix<T>} using {@code v} as the
 * data for the unique column of the created matrix.
 * The input array is copied.</text>
      <param>v Column vector holding data for new matrix.</param>
      <throws>NoDataException if v is empty</throws>
    </javadoc>
    <method type="constructor" name="Array2DRowFieldMatrix" startLine="186" endLine="188" />
    <javadoc>
      <text>* Create a new (column) {@code FieldMatrix<T>} using {@code v} as the
 * data for the unique column of the created matrix.
 * The input array is copied.</text>
      <param>field Field to which the elements belong.</param>
      <param>v Column vector holding data for new matrix.</param>
    </javadoc>
    <method type="constructor" name="Array2DRowFieldMatrix" startLine="198" endLine="205">
      <declaration type="int" name="nRows" />
      <scope startLine="202" endLine="204" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldMatrix<T>" name="createMatrix" startLine="211" endLine="213" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldMatrix<T>" name="copy" startLine="217" endLine="219" />
    <javadoc>
      <text>* Add {@code m} to this matrix.</text>
      <param>m Matrix to be added.</param>
      <return>{@code this} + m.</return>
      <throws>MatrixDimensionMismatchException if {@code m} is not the same
 * size as this matrix.</throws>
    </javadoc>
    <method type="Array2DRowFieldMatrix<T>" name="add" startLine="230" endLine="247">
      <declaration type="int" name="rowCount" />
      <declaration type="int" name="columnCount" />
      <declaration type="T[][]" name="outData" />
      <scope startLine="237" endLine="244">
        <declaration type="T[]" name="dataRow" />
        <declaration type="T[]" name="mRow" />
        <declaration type="T[]" name="outDataRow" />
        <scope startLine="241" endLine="243" />
      </scope>
      <comment>safety check</comment>
    </method>
    <javadoc>
      <text>* Subtract {@code m} from this matrix.</text>
      <param>m Matrix to be subtracted.</param>
      <return>{@code this} + m.</return>
      <throws>MatrixDimensionMismatchException if {@code m} is not the same
 * size as this matrix.</throws>
    </javadoc>
    <method type="Array2DRowFieldMatrix<T>" name="subtract" startLine="258" endLine="276">
      <declaration type="int" name="rowCount" />
      <declaration type="int" name="columnCount" />
      <declaration type="T[][]" name="outData" />
      <scope startLine="265" endLine="272">
        <declaration type="T[]" name="dataRow" />
        <declaration type="T[]" name="mRow" />
        <declaration type="T[]" name="outDataRow" />
        <scope startLine="269" endLine="271" />
      </scope>
      <comment>safety check</comment>
    </method>
    <javadoc>
      <text>* Postmultiplying this matrix by {@code m}.</text>
      <param>m Matrix to postmultiply by.</param>
      <return>{@code this} * m.</return>
      <throws>DimensionMismatchException if the number of columns of this
 * matrix is not equal to the number of rows of {@code m}.</throws>
    </javadoc>
    <method type="Array2DRowFieldMatrix<T>" name="multiply" startLine="287" endLine="309">
      <declaration type="int" name="nRows" />
      <declaration type="int" name="nCols" />
      <declaration type="int" name="nSum" />
      <declaration type="T[][]" name="outData" />
      <scope startLine="295" endLine="305">
        <declaration type="T[]" name="dataRow" />
        <declaration type="T[]" name="outDataRow" />
        <scope startLine="298" endLine="304">
          <declaration type="T" name="sum" />
          <scope startLine="300" endLine="302" />
        </scope>
      </scope>
      <comment>safety check</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T[][]" name="getData" startLine="313" endLine="315" />
    <javadoc>
      <text>* Get a reference to the underlying data array.
 * This methods returns internal data, <strong>not</strong> fresh copy of it.</text>
      <return>the 2-dimensional array of entries.</return>
    </javadoc>
    <method type="T[][]" name="getDataRef" startLine="323" endLine="325" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setSubMatrix" startLine="332" endLine="360">
      <scope startLine="333" endLine="356">
        <scope startLine="334" endLine="336" />
        <scope startLine="337" endLine="339" />
        <declaration type="int" name="nRows" />
        <scope startLine="341" endLine="343" />
        <declaration type="int" name="nCols" />
        <scope startLine="346" endLine="348" />
        <scope startLine="350" endLine="355">
          <scope startLine="351" endLine="353" />
        </scope>
      </scope>
      <scope startLine="356" endLine="358" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="getEntry" startLine="365" endLine="370" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setEntry" startLine="375" endLine="380" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="addToEntry" startLine="385" endLine="390" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="multiplyEntry" startLine="395" endLine="400" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getRowDimension" startLine="404" endLine="406" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getColumnDimension" startLine="410" endLine="412" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T[]" name="operate" startLine="416" endLine="432">
      <declaration type="int" name="nRows" />
      <declaration type="int" name="nCols" />
      <scope startLine="419" endLine="421" />
      <declaration type="T[]" name="out" />
      <scope startLine="423" endLine="430">
        <declaration type="T[]" name="dataRow" />
        <declaration type="T" name="sum" />
        <scope startLine="426" endLine="428" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T[]" name="preMultiply" startLine="436" endLine="453">
      <declaration type="int" name="nRows" />
      <declaration type="int" name="nCols" />
      <scope startLine="439" endLine="441" />
      <declaration type="T[]" name="out" />
      <scope startLine="444" endLine="450">
        <declaration type="T" name="sum" />
        <scope startLine="446" endLine="448" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="walkInRowOrder" startLine="457" endLine="468">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="461" endLine="466">
        <declaration type="T[]" name="rowI" />
        <scope startLine="463" endLine="465" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="walkInRowOrder" startLine="472" endLine="483">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="476" endLine="481">
        <declaration type="T[]" name="rowI" />
        <scope startLine="478" endLine="480" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="walkInRowOrder" startLine="490" endLine="501">
      <scope startLine="494" endLine="499">
        <declaration type="T[]" name="rowI" />
        <scope startLine="496" endLine="498" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="walkInRowOrder" startLine="508" endLine="519">
      <scope startLine="512" endLine="517">
        <declaration type="T[]" name="rowI" />
        <scope startLine="514" endLine="516" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="walkInColumnOrder" startLine="523" endLine="534">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="527" endLine="532">
        <scope startLine="528" endLine="531">
          <declaration type="T[]" name="rowI" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="walkInColumnOrder" startLine="538" endLine="548">
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <scope startLine="542" endLine="546">
        <scope startLine="543" endLine="545" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="walkInColumnOrder" startLine="555" endLine="566">
      <scope startLine="559" endLine="564">
        <scope startLine="560" endLine="563">
          <declaration type="T[]" name="rowI" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="walkInColumnOrder" startLine="573" endLine="583">
      <scope startLine="577" endLine="581">
        <scope startLine="578" endLine="580" />
      </scope>
    </method>
    <javadoc>
      <text>* Get a fresh copy of the underlying data array.</text>
      <return>a copy of the underlying data array.</return>
    </javadoc>
    <method type="T[][]" name="copyOut" startLine="590" endLine="598">
      <declaration type="int" name="nRows" />
      <declaration type="T[][]" name="out" />
      <scope startLine="594" endLine="596" />
      <comment>can't copy 2-d array in one shot, otherwise get row references</comment>
    </method>
    <javadoc>
      <text>* Replace data with a fresh copy of the input array.</text>
      <param>in Data to copy.</param>
      <throws>NoDataException if the input array is empty.</throws>
      <throws>DimensionMismatchException if the input array is not rectangular.</throws>
      <throws>NullArgumentException if the input array is {@code null}.</throws>
    </javadoc>
    <method type="void" name="copyIn" startLine="610" endLine="612" />
  </class>
</source>
