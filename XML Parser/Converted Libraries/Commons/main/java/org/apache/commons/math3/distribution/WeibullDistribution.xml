<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.special.Gamma" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937c" />
  <class name="WeibullDistribution" extends="AbstractRealDistribution" startLine="28">
    <javadoc>
      <text>* Implementation of the Weibull distribution. This implementation uses the
 * two parameter form of the distribution defined by
 * <a href="http://mathworld.wolfram.com/WeibullDistribution.html">
 * Weibull Distribution</a>, equations (1) and (2).</text>
      <see><a href="http://en.wikipedia.org/wiki/Weibull_distribution">Weibull distribution (Wikipedia)</a></see>
      <see><a href="http://mathworld.wolfram.com/WeibullDistribution.html">Weibull distribution (MathWorld)</a></see>
      <since>1.1 (changed to concrete class in 3.0)</since>
      <version>$Id: WeibullDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Default inverse cumulative probability accuracy.</text>
      <since>2.1</since>
    </javadoc>
    <declaration type="double" name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" />
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* The shape parameter.</text>
    </javadoc>
    <declaration type="double" name="shape" />
    <javadoc>
      <text>* The scale parameter.</text>
    </javadoc>
    <declaration type="double" name="scale" />
    <javadoc>
      <text>* Inverse cumulative probability accuracy.</text>
    </javadoc>
    <declaration type="double" name="solverAbsoluteAccuracy" />
    <javadoc>
      <text>* Cached numerical mean</text>
    </javadoc>
    <declaration type="double" name="numericalMean" />
    <javadoc>
      <text>* Whether or not the numerical mean has been calculated</text>
    </javadoc>
    <declaration type="boolean" name="numericalMeanIsCalculated" />
    <javadoc>
      <text>* Cached numerical variance</text>
    </javadoc>
    <declaration type="double" name="numericalVariance" />
    <javadoc>
      <text>* Whether or not the numerical variance has been calculated</text>
    </javadoc>
    <declaration type="boolean" name="numericalVarianceIsCalculated" />
    <javadoc>
      <text>* Create a Weibull distribution with the given shape and scale and a
 * location equal to zero.</text>
      <param>alpha Shape parameter.</param>
      <param>beta Scale parameter.</param>
      <throws>NotStrictlyPositiveException if {@code alpha <= 0} or{@code beta <= 0}.</throws>
    </javadoc>
    <method type="constructor" name="WeibullDistribution" startLine="72" endLine="74" />
    <javadoc>
      <text>* Create a Weibull distribution with the given shape, scale and inverse
 * cumulative probability accuracy and a location equal to zero.</text>
      <param>alpha Shape parameter.</param>
      <param>beta Scale parameter.</param>
      <param>inverseCumAccuracy Maximum absolute error in inverse
 * cumulative probability estimates
 * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).</param>
      <throws>NotStrictlyPositiveException if {@code alpha <= 0} or{@code beta <= 0}.</throws>
      <since>2.1</since>
    </javadoc>
    <method type="constructor" name="WeibullDistribution" startLine="90" endLine="92" />
    <javadoc>
      <text>* Creates a Weibull distribution.</text>
      <param>rng Random number generator.</param>
      <param>alpha Shape parameter.</param>
      <param>beta Scale parameter.</param>
      <param>inverseCumAccuracy Maximum absolute error in inverse
 * cumulative probability estimates
 * (defaults to {@link #DEFAULT_INVERSE_ABSOLUTE_ACCURACY}).</param>
      <throws>NotStrictlyPositiveException if {@code alpha <= 0} or{@code beta <= 0}.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="WeibullDistribution" startLine="111" endLine="125">
      <scope startLine="114" endLine="117" />
      <scope startLine="118" endLine="121" />
    </method>
    <javadoc>
      <text>* Access the shape parameter, {@code alpha}.</text>
      <return>the shape parameter, {@code alpha}.</return>
    </javadoc>
    <method type="double" name="getShape" startLine="132" endLine="134" />
    <javadoc>
      <text>* Access the scale parameter, {@code beta}.</text>
      <return>the scale parameter, {@code beta}.</return>
    </javadoc>
    <method type="double" name="getScale" startLine="141" endLine="143" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="density" startLine="146" endLine="162">
      <scope startLine="147" endLine="149" />
      <declaration type="double" name="xscale" />
      <declaration type="double" name="xscalepow" />
      <declaration type="double" name="xscalepowshape" />
      <comment>FastMath.pow(x  scale, shape) =
 FastMath.pow(xscale, shape) =
 FastMath.pow(xscale, shape - 1)  xscale</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="165" endLine="173">
      <declaration type="double" name="ret" />
      <scope startLine="167" endLine="169" />
      <scope startLine="169" endLine="171" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}Returns {@code 0} when {@code p == 0} and{@code Double.POSITIVE_INFINITY} when {@code p == 1}.</text>
    </javadoc>
    <method type="double" name="inverseCumulativeProbability" startLine="182" endLine="194">
      <declaration type="double" name="ret" />
      <scope startLine="184" endLine="186" />
      <scope startLine="186" endLine="188" />
      <scope startLine="188" endLine="190" />
      <scope startLine="190" endLine="192" />
    </method>
    <javadoc>
      <text>* Return the absolute accuracy setting of the solver used to estimate
 * inverse cumulative probabilities.</text>
      <return>the solver absolute accuracy.</return>
      <since>2.1</since>
    </javadoc>
    <method type="double" name="getSolverAbsoluteAccuracy" startLine="204" endLine="206" />
    <javadoc>
      <text>* {@inheritDoc}The mean is {@code scale * Gamma(1 + (1 / shape))}, where {@code Gamma()}is the Gamma-function.</text>
    </javadoc>
    <method type="double" name="getNumericalMean" startLine="214" endLine="220">
      <scope startLine="215" endLine="218" />
    </method>
    <javadoc>
      <text>* used by {@link #getNumericalMean()}</text>
      <return>the mean of this distribution</return>
    </javadoc>
    <method type="double" name="calculateNumericalMean" startLine="227" endLine="232">
      <declaration type="double" name="sh" />
      <declaration type="double" name="sc" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}The variance is {@code scale^2 * Gamma(1 + (2 / shape)) - mean^2}where {@code Gamma()} is the Gamma-function.</text>
    </javadoc>
    <method type="double" name="getNumericalVariance" startLine="240" endLine="246">
      <scope startLine="241" endLine="244" />
    </method>
    <javadoc>
      <text>* used by {@link #getNumericalVariance()}</text>
      <return>the variance of this distribution</return>
    </javadoc>
    <method type="double" name="calculateNumericalVariance" startLine="253" endLine="260">
      <declaration type="double" name="sh" />
      <declaration type="double" name="sc" />
      <declaration type="double" name="mn" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}The lower bound of the support is always 0 no matter the parameters.</text>
      <return>lower bound of the support (always 0)</return>
    </javadoc>
    <method type="double" name="getSupportLowerBound" startLine="269" endLine="271" />
    <javadoc>
      <text>* {@inheritDoc}The upper bound of the support is always positive infinity
 * no matter the parameters.</text>
      <return>upper bound of the support (always{@code Double.POSITIVE_INFINITY})</return>
    </javadoc>
    <method type="double" name="getSupportUpperBound" startLine="282" endLine="284" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isSupportLowerBoundInclusive" startLine="287" endLine="289" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isSupportUpperBoundInclusive" startLine="292" endLine="294" />
    <javadoc>
      <text>* {@inheritDoc}The support of this distribution is connected.</text>
      <return>{@code true}</return>
    </javadoc>
    <method type="boolean" name="isSupportConnected" startLine="303" endLine="305" />
  </class>
</source>
