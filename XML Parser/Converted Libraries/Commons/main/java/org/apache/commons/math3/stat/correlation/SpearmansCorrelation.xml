<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.correlation">
  <import name="java.util.ArrayList" />
  <import name="java.util.HashSet" />
  <import name="java.util.List" />
  <import name="java.util.Set" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.linear.BlockRealMatrix" />
  <import name="org.apache.commons.math3.linear.RealMatrix" />
  <import name="org.apache.commons.math3.stat.ranking.NaNStrategy" />
  <import name="org.apache.commons.math3.stat.ranking.NaturalRanking" />
  <import name="org.apache.commons.math3.stat.ranking.RankingAlgorithm" />
  <class name="SpearmansCorrelation" startLine="34">
    <javadoc>
      <text>* Spearman's rank correlation. This implementation performs a rank
 * transformation on the input data and then computes {@link PearsonsCorrelation}on the ranked data.
 * <p>
 * By default, ranks are computed using {@link NaturalRanking} with default
 * strategies for handling NaNs and ties in the data (NaNs maximal, ties averaged).
 * The ranking algorithm can be set using a constructor argument.</text>
      <since>2.0</since>
      <version>$Id: SpearmansCorrelation.java 1461822 2013-03-27 19:44:22Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Input data</text>
    </javadoc>
    <declaration type="RealMatrix" name="data" />
    <javadoc>
      <text>* Ranking algorithm</text>
    </javadoc>
    <declaration type="RankingAlgorithm" name="rankingAlgorithm" />
    <javadoc>
      <text>* Rank correlation</text>
    </javadoc>
    <declaration type="PearsonsCorrelation" name="rankCorrelation" />
    <javadoc>
      <text>* Create a SpearmansCorrelation without data.</text>
    </javadoc>
    <method type="constructor" name="SpearmansCorrelation" startLine="60" endLine="62" />
    <javadoc>
      <text>* Create a SpearmansCorrelation with the given ranking algorithm.
 * <p>
 * From version 4.0 onwards this constructor will throw an exception
 * if the provided {@link NaturalRanking} uses a {@link NaNStrategy#REMOVED} strategy.</text>
      <param>rankingAlgorithm ranking algorithm</param>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="SpearmansCorrelation" startLine="73" endLine="77" />
    <javadoc>
      <text>* Create a SpearmansCorrelation from the given data matrix.</text>
      <param>dataMatrix matrix of data with columns representing
 * variables to correlate</param>
    </javadoc>
    <method type="constructor" name="SpearmansCorrelation" startLine="85" endLine="87" />
    <javadoc>
      <text>* Create a SpearmansCorrelation with the given input data matrix
 * and ranking algorithm.
 * <p>
 * From version 4.0 onwards this constructor will throw an exception
 * if the provided {@link NaturalRanking} uses a {@link NaNStrategy#REMOVED} strategy.</text>
      <param>dataMatrix matrix of data with columns representing
 * variables to correlate</param>
      <param>rankingAlgorithm ranking algorithm</param>
    </javadoc>
    <method type="constructor" name="SpearmansCorrelation" startLine="100" endLine="104" />
    <javadoc>
      <text>* Calculate the Spearman Rank Correlation Matrix.</text>
      <return>Spearman Rank Correlation Matrix</return>
    </javadoc>
    <method type="RealMatrix" name="getCorrelationMatrix" startLine="111" endLine="113" />
    <javadoc>
      <text>* Returns a {@link PearsonsCorrelation} instance constructed from the
 * ranked input data. That is,
 * <code>new SpearmansCorrelation(matrix).getRankCorrelation()</code>
 * is equivalent to
 * <code>new PearsonsCorrelation(rankTransform(matrix))</code> where
 * <code>rankTransform(matrix)</code> is the result of applying the
 * configured <code>RankingAlgorithm</code> to each of the columns of
 * <code>matrix.</code></text>
      <return>PearsonsCorrelation among ranked column data</return>
    </javadoc>
    <method type="PearsonsCorrelation" name="getRankCorrelation" startLine="127" endLine="129" />
    <javadoc>
      <text>* Computes the Spearman's rank correlation matrix for the columns of the
 * input matrix.</text>
      <param>matrix matrix with columns representing variables to correlate</param>
      <return>correlation matrix</return>
    </javadoc>
    <method type="RealMatrix" name="computeCorrelationMatrix" startLine="138" endLine="141">
      <declaration type="RealMatrix" name="matrixCopy" />
    </method>
    <javadoc>
      <text>* Computes the Spearman's rank correlation matrix for the columns of the
 * input rectangular array.  The columns of the array represent values
 * of variables to be correlated.</text>
      <param>matrix matrix with columns representing variables to correlate</param>
      <return>correlation matrix</return>
    </javadoc>
    <method type="RealMatrix" name="computeCorrelationMatrix" startLine="151" endLine="153" />
    <javadoc>
      <text>* Computes the Spearman's rank correlation coefficient between the two arrays.</text>
      <param>xArray first data array</param>
      <param>yArray second data array</param>
      <return>Returns Spearman's rank correlation coefficient for the two arrays</return>
      <throws>DimensionMismatchException if the arrays lengths do not match</throws>
      <throws>MathIllegalArgumentException if the array length is less than 2</throws>
    </javadoc>
    <method type="double" name="correlation" startLine="164" endLine="185">
      <scope startLine="165" endLine="167" />
      <scope startLine="167" endLine="170" />
      <scope startLine="170" endLine="184">
        <declaration type="double[]" name="x" />
        <declaration type="double[]" name="y" />
        <scope startLine="174" endLine="182">
          <declaration type="Set<Integer>" name="nanPositions" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Applies rank transform to each of the columns of <code>matrix</code>
 * using the current <code>rankingAlgorithm</code>.</text>
      <param>matrix matrix to transform</param>
      <return>a rank-transformed matrix</return>
    </javadoc>
    <method type="RealMatrix" name="rankTransform" startLine="194" endLine="223">
      <declaration type="RealMatrix" name="transformed" />
      <scope startLine="198" endLine="212">
        <declaration type="Set<Integer>" name="nanPositions" />
        <scope startLine="200" endLine="202" />
        <scope startLine="205" endLine="211">
          <scope startLine="208" endLine="210" />
        </scope>
        <comment>if we have found NaN values, we have to update the matrix size</comment>
      </scope>
      <scope startLine="214" endLine="216" />
      <scope startLine="218" endLine="220" />
    </method>
    <javadoc>
      <text>* Returns a list containing the indices of NaN values in the input array.</text>
      <param>input the input array</param>
      <return>a list of NaN positions in the input array</return>
    </javadoc>
    <method type="List<Integer>" name="getNaNPositions" startLine="231" endLine="239">
      <declaration type="List<Integer>" name="positions" />
      <scope startLine="233" endLine="237">
        <scope startLine="234" endLine="236" />
      </scope>
    </method>
    <javadoc>
      <text>* Removes all values from the input array at the specified indices.</text>
      <param>input the input array</param>
      <param>indices a set containing the indices to be removed</param>
      <return>the input array without the values at the specified indices</return>
    </javadoc>
    <method type="double[]" name="removeValues" startLine="248" endLine="259">
      <scope startLine="249" endLine="251" />
      <declaration type="double[]" name="result" />
      <scope startLine="253" endLine="257">
        <scope startLine="254" endLine="256" />
      </scope>
    </method>
  </class>
</source>
