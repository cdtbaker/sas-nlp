<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.polynomials">
  <import name="org.apache.commons.math3.analysis.differentiation.DerivativeStructure" />
  <import name="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="PolynomialFunctionNewtonForm" startLine="27">
    <implements name="UnivariateDifferentiableFunction" />
    <javadoc>
      <text>* Implements the representation of a real polynomial function in
 * Newton Form. For reference, see <b>Elementary Numerical Analysis</b>,
 * ISBN 0070124477, chapter 2.
 * <p>
 * The formula of polynomial in Newton form is
 * p(x) = a[0] + a[1](x-c[0]) + a[2](x-c[0])(x-c[1]) + ... +
 * a[n](x-c[0])(x-c[1])...(x-c[n-1])
 * Note that the length of a[] is one more than the length of c[]</p></text>
      <version>$Id: PolynomialFunctionNewtonForm.java 1455194 2013-03-11 15:45:54Z luc $</version>
      <since>1.2</since>
    </javadoc>
    <javadoc>
      <text>* The coefficients of the polynomial, ordered by degree -- i.e.
 * coefficients[0] is the constant term and coefficients[n] is the
 * coefficient of x^n where n is the degree of the polynomial.</text>
    </javadoc>
    <declaration type="double" name="coefficients" />
    <javadoc>
      <text>* Centers of the Newton polynomial.</text>
    </javadoc>
    <declaration type="double" name="c" />
    <javadoc>
      <text>* When all c[i] = 0, a[] becomes normal polynomial coefficients,
 * i.e. a[i] = coefficients[i].</text>
    </javadoc>
    <declaration type="double" name="a" />
    <javadoc>
      <text>* Whether the polynomial coefficients are available.</text>
    </javadoc>
    <declaration type="boolean" name="coefficientsComputed" />
    <javadoc>
      <text>* Construct a Newton polynomial with the given a[] and c[]. The order of
 * centers are important in that if c[] shuffle, then values of a[] would
 * completely change, not just a permutation of old a[].
 * <p>
 * The constructor makes copy of the input arrays and assigns them.</p></text>
      <param>a Coefficients in Newton form formula.</param>
      <param>c Centers.</param>
      <throws>NullArgumentException if any argument is {@code null}.</throws>
      <throws>NoDataException if any array has zero length.</throws>
      <throws>DimensionMismatchException if the size difference between{@code a} and {@code c} is not equal to 1.</throws>
    </javadoc>
    <method type="constructor" name="PolynomialFunctionNewtonForm" startLine="80" endLine="88" />
    <javadoc>
      <text>* Calculate the function value at the given point.</text>
      <param>z Point at which the function value is to be computed.</param>
      <return>the function value.</return>
    </javadoc>
    <method type="double" name="value" startLine="96" endLine="98" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <since>3.1</since>
    </javadoc>
    <method type="DerivativeStructure" name="value" startLine="104" endLine="115">
      <declaration type="int" name="n" />
      <declaration type="DerivativeStructure" name="value" />
      <scope startLine="109" endLine="111" />
    </method>
    <javadoc>
      <text>* Returns the degree of the polynomial.</text>
      <return>the degree of the polynomial</return>
    </javadoc>
    <method type="int" name="degree" startLine="122" endLine="124" />
    <javadoc>
      <text>* Returns a copy of coefficients in Newton form formula.
 * <p>
 * Changes made to the returned copy will not affect the polynomial.</p></text>
      <return>a fresh copy of coefficients in Newton form formula</return>
    </javadoc>
    <method type="double[]" name="getNewtonCoefficients" startLine="133" endLine="137">
      <declaration type="double[]" name="out" />
    </method>
    <javadoc>
      <text>* Returns a copy of the centers array.
 * <p>
 * Changes made to the returned copy will not affect the polynomial.</p></text>
      <return>a fresh copy of the centers array.</return>
    </javadoc>
    <method type="double[]" name="getCenters" startLine="146" endLine="150">
      <declaration type="double[]" name="out" />
    </method>
    <javadoc>
      <text>* Returns a copy of the coefficients array.
 * <p>
 * Changes made to the returned copy will not affect the polynomial.</p></text>
      <return>a fresh copy of the coefficients array.</return>
    </javadoc>
    <method type="double[]" name="getCoefficients" startLine="159" endLine="166">
      <scope startLine="160" endLine="162" />
      <declaration type="double[]" name="out" />
    </method>
    <javadoc>
      <text>* Evaluate the Newton polynomial using nested multiplication. It is
 * also called <a href="http://mathworld.wolfram.com/HornersRule.html">
 * Horner's Rule</a> and takes O(N) time.</text>
      <param>a Coefficients in Newton form formula.</param>
      <param>c Centers.</param>
      <param>z Point at which the function value is to be computed.</param>
      <return>the function value.</return>
      <throws>NullArgumentException if any argument is {@code null}.</throws>
      <throws>NoDataException if any array has zero length.</throws>
      <throws>DimensionMismatchException if the size difference between{@code a} and {@code c} is not equal to 1.</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="183" endLine="193">
      <declaration type="int" name="n" />
      <declaration type="double" name="value" />
      <scope startLine="188" endLine="190" />
    </method>
    <javadoc>
      <text>* Calculate the normal polynomial coefficients given the Newton form.
 * It also uses nested multiplication but takes O(N^2) time.</text>
    </javadoc>
    <method type="void" name="computeCoefficients" startLine="199" endLine="216">
      <declaration type="int" name="n" />
      <scope startLine="203" endLine="205" />
      <scope startLine="208" endLine="213">
        <scope startLine="209" endLine="211" />
      </scope>
    </method>
    <javadoc>
      <text>* Verifies that the input arrays are valid.
 * <p>
 * The centers must be distinct for interpolation purposes, but not
 * for general use. Thus it is not verified here.</p></text>
      <param>a the coefficients in Newton form formula</param>
      <param>c the centers</param>
      <throws>NullArgumentException if any argument is {@code null}.</throws>
      <throws>NoDataException if any array has zero length.</throws>
      <throws>DimensionMismatchException if the size difference between{@code a} and {@code c} is not equal to 1.</throws>
      <see>org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator#computeDividedDifference(double[],double[])</see>
    </javadoc>
    <method type="void" name="verifyInputArray" startLine="234" endLine="244">
      <scope startLine="237" endLine="239" />
      <scope startLine="240" endLine="243" />
    </method>
  </class>
</source>
