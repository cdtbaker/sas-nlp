<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode.nonstiff">
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="DormandPrince54Integrator" extends="EmbeddedRungeKuttaIntegrator" startLine="23">
    <javadoc>
      <text>* This class implements the 5(4) Dormand-Prince integrator for Ordinary
 * Differential Equations.
 * <p>This integrator is an embedded Runge-Kutta integrator
 * of order 5(4) used in local extrapolation mode (i.e. the solution
 * is computed using the high order formula) with stepsize control
 * (and automatic step initialization) and continuous output. This
 * method uses 7 functions evaluations per step. However, since this
 * is an <i>fsal</i>, the last evaluation of one step is the same as
 * the first evaluation of the next step and hence can be avoided. So
 * the cost is really 6 functions evaluations per step.</p>
 * <p>This method has been published (whithout the continuous output
 * that was added by Shampine in 1986) in the following article :
 * <pre>
 * A family of embedded Runge-Kutta formulae
 * J. R. Dormand and P. J. Prince
 * Journal of Computational and Applied Mathematics
 * volume 6, no 1, 1980, pp. 19-26
 * </pre></p></text>
      <version>$Id: DormandPrince54Integrator.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>1.2</since>
    </javadoc>
    <javadoc>
      <text>* Integrator method name.</text>
    </javadoc>
    <declaration type="String" name="METHOD_NAME" />
    <javadoc>
      <text>* Time steps Butcher array.</text>
    </javadoc>
    <declaration type="double[]" name="STATIC_C" />
    <javadoc>
      <text>* Internal weights Butcher array.</text>
    </javadoc>
    <declaration type="double[][]" name="STATIC_A" />
    <javadoc>
      <text>* Propagation weights Butcher array.</text>
    </javadoc>
    <declaration type="double[]" name="STATIC_B" />
    <javadoc>
      <text>* Error array, element 1.</text>
    </javadoc>
    <declaration type="double" name="E1" />
    <javadoc>
      <text>* Error array, element 3.</text>
    </javadoc>
    <declaration type="double" name="E3" />
    <javadoc>
      <text>* Error array, element 4.</text>
    </javadoc>
    <declaration type="double" name="E4" />
    <javadoc>
      <text>* Error array, element 5.</text>
    </javadoc>
    <declaration type="double" name="E5" />
    <javadoc>
      <text>* Error array, element 6.</text>
    </javadoc>
    <declaration type="double" name="E6" />
    <javadoc>
      <text>* Error array, element 7.</text>
    </javadoc>
    <declaration type="double" name="E7" />
    <javadoc>
      <text>* Simple constructor.
 * Build a fifth order Dormand-Prince integrator with the given step bounds</text>
      <param>minStep minimal step (sign is irrelevant, regardless of
 * integration direction, forward or backward), the last step can
 * be smaller than this</param>
      <param>maxStep maximal step (sign is irrelevant, regardless of
 * integration direction, forward or backward), the last step can
 * be smaller than this</param>
      <param>scalAbsoluteTolerance allowed absolute error</param>
      <param>scalRelativeTolerance allowed relative error</param>
    </javadoc>
    <method type="constructor" name="DormandPrince54Integrator" startLine="107" endLine="110" />
    <javadoc>
      <text>* Simple constructor.
 * Build a fifth order Dormand-Prince integrator with the given step bounds</text>
      <param>minStep minimal step (sign is irrelevant, regardless of
 * integration direction, forward or backward), the last step can
 * be smaller than this</param>
      <param>maxStep maximal step (sign is irrelevant, regardless of
 * integration direction, forward or backward), the last step can
 * be smaller than this</param>
      <param>vecAbsoluteTolerance allowed absolute error</param>
      <param>vecRelativeTolerance allowed relative error</param>
    </javadoc>
    <method type="constructor" name="DormandPrince54Integrator" startLine="125" endLine="128" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getOrder" startLine="132" endLine="134" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="estimateError" startLine="140" endLine="160">
      <declaration type="double" name="error" />
      <scope startLine="144" endLine="156">
        <declaration type="double" name="errSum" />
        <declaration type="double" name="yScale" />
        <declaration type="double" name="tol" />
        <declaration type="double" name="ratio" />
      </scope>
    </method>
    <comment>element 2 is zero, so it is neither stored nor used</comment>
  </class>
</source>
