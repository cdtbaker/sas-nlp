<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.random">
  <import name="java.util.Collection" />
  <import name="org.apache.commons.math3.exception.NotANumberException" />
  <import name="org.apache.commons.math3.exception.NotFiniteNumberException" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <interface name="RandomData" startLine="26">
    <javadoc>
      <text>* Random data generation utilities.</text>
      <deprecated>to be removed in 4.0.  Use {@link RandomDataGenerator} directly</deprecated>
      <version>$Id: RandomData.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <method name="nextHexString" type="String" startLine="32" endLine="45" />
    <javadoc>
      <text>* Generates a random string of hex characters of length {@code len}.
 * <p>
 * The generated string will be random, but not cryptographically
 * secure. To generate cryptographically secure strings, use{@link #nextSecureHexString(int)}.
 * </p></text>
      <param>len the length of the string to be generated</param>
      <return>a random string of hex characters of length {@code len}</return>
      <throws>NotStrictlyPositiveExceptionif {@code len <= 0}</throws>
    </javadoc>
    <method name="nextInt" type="int" startLine="47" endLine="62" />
    <javadoc>
      <text>* Generates a uniformly distributed random integer between {@code lower}and {@code upper} (endpoints included).
 * <p>
 * The generated integer will be random, but not cryptographically secure.
 * To generate cryptographically secure integer sequences, use{@link #nextSecureInt(int,int)}.
 * </p></text>
      <param>lower lower bound for generated integer</param>
      <param>upper upper bound for generated integer</param>
      <return>a random integer greater than or equal to {@code lower}and less than or equal to {@code upper}</return>
      <throws>NumberIsTooLargeException if {@code lower >= upper}</throws>
    </javadoc>
    <method name="nextLong" type="long" startLine="64" endLine="79" />
    <javadoc>
      <text>* Generates a uniformly distributed random long integer between{@code lower} and {@code upper} (endpoints included).
 * <p>
 * The generated long integer values will be random, but not
 * cryptographically secure. To generate cryptographically secure sequences
 * of longs, use {@link #nextSecureLong(long,long)}.
 * </p></text>
      <param>lower lower bound for generated long integer</param>
      <param>upper upper bound for generated long integer</param>
      <return>a random long integer greater than or equal to {@code lower} and
 * less than or equal to {@code upper}</return>
      <throws>NumberIsTooLargeException if {@code lower >= upper}</throws>
    </javadoc>
    <method name="nextSecureHexString" type="String" startLine="81" endLine="93" />
    <javadoc>
      <text>* Generates a random string of hex characters from a secure random
 * sequence.
 * <p>
 * If cryptographic security is not required, use{@link #nextHexString(int)}.
 * </p></text>
      <param>len the length of the string to be generated</param>
      <return>a random string of hex characters of length {@code len}</return>
      <throws>NotStrictlyPositiveException if {@code len <= 0}</throws>
    </javadoc>
    <method name="nextSecureInt" type="int" startLine="95" endLine="113" />
    <javadoc>
      <text>* Generates a uniformly distributed random integer between {@code lower}and {@code upper} (endpoints included) from a secure random sequence.
 * <p>
 * Sequences of integers generated using this method will be
 * cryptographically secure. If cryptographic security is not required,{@link #nextInt(int,int)} should be used instead of this method.</p>
 * <p>
 * <strong>Definition</strong>:
 * <a href="http://en.wikipedia.org/wiki/Cryptographically_secure_pseudo-random_number_generator">
 * Secure Random Sequence</a></p></text>
      <param>lower lower bound for generated integer</param>
      <param>upper upper bound for generated integer</param>
      <return>a random integer greater than or equal to {@code lower} and less
 * than or equal to {@code upper}.</return>
      <throws>NumberIsTooLargeException if {@code lower >= upper}.</throws>
    </javadoc>
    <method name="nextSecureLong" type="long" startLine="115" endLine="134" />
    <javadoc>
      <text>* Generates a uniformly distributed random long integer between{@code lower} and {@code upper} (endpoints included) from a secure random
 * sequence.
 * <p>
 * Sequences of long values generated using this method will be
 * cryptographically secure. If cryptographic security is not required,{@link #nextLong(long,long)} should be used instead of this method.</p>
 * <p>
 * <strong>Definition</strong>:
 * <a href="http://en.wikipedia.org/wiki/Cryptographically_secure_pseudo-random_number_generator">
 * Secure Random Sequence</a></p></text>
      <param>lower lower bound for generated integer</param>
      <param>upper upper bound for generated integer</param>
      <return>a random long integer greater than or equal to {@code lower} and
 * less than or equal to {@code upper}.</return>
      <throws>NumberIsTooLargeException if {@code lower >= upper}.</throws>
    </javadoc>
    <method name="nextPoisson" type="long" startLine="136" endLine="148" />
    <javadoc>
      <text>* Generates a random value from the Poisson distribution with the given
 * mean.
 * <p>
 * <strong>Definition</strong>:
 * <a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda366j.htm">
 * Poisson Distribution</a></p></text>
      <param>mean the mean of the Poisson distribution</param>
      <return>a random value following the specified Poisson distribution</return>
      <throws>NotStrictlyPositiveException if {@code mean <= 0}.</throws>
    </javadoc>
    <method name="nextGaussian" type="double" startLine="150" endLine="163" />
    <javadoc>
      <text>* Generates a random value from the Normal (or Gaussian) distribution with
 * specified mean and standard deviation.
 * <p>
 * <strong>Definition</strong>:
 * <a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda3661.htm">
 * Normal Distribution</a></p></text>
      <param>mu the mean of the distribution</param>
      <param>sigma the standard deviation of the distribution</param>
      <return>a random value following the specified Gaussian distribution</return>
      <throws>NotStrictlyPositiveException if {@code sigma <= 0}.</throws>
    </javadoc>
    <method name="nextExponential" type="double" startLine="165" endLine="177" />
    <javadoc>
      <text>* Generates a random value from the exponential distribution
 * with specified mean.
 * <p>
 * <strong>Definition</strong>:
 * <a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda3667.htm">
 * Exponential Distribution</a></p></text>
      <param>mean the mean of the distribution</param>
      <return>a random value following the specified exponential distribution</return>
      <throws>NotStrictlyPositiveException if {@code mean <= 0}.</throws>
    </javadoc>
    <method name="nextUniform" type="double" startLine="179" endLine="198" />
    <javadoc>
      <text>* Generates a uniformly distributed random value from the open interval{@code (lower, upper)} (i.e., endpoints excluded).
 * <p>
 * <strong>Definition</strong>:
 * <a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda3662.htm">
 * Uniform Distribution</a> {@code lower} and {@code upper - lower} are the
 * <a href = "http://www.itl.nist.gov/div898/handbook/eda/section3/eda364.htm">
 * location and scale parameters</a>, respectively.</p></text>
      <param>lower the exclusive lower bound of the support</param>
      <param>upper the exclusive upper bound of the support</param>
      <return>a uniformly distributed random value between lower and upper
 * (exclusive)</return>
      <throws>NumberIsTooLargeException if {@code lower >= upper}</throws>
      <throws>NotFiniteNumberException if one of the bounds is infinite</throws>
      <throws>NotANumberException if one of the bounds is NaN</throws>
    </javadoc>
    <method name="nextUniform" type="double" startLine="200" endLine="224" />
    <javadoc>
      <text>* Generates a uniformly distributed random value from the interval{@code (lower, upper)} or the interval {@code [lower, upper)}. The lower
 * bound is thus optionally included, while the upper bound is always
 * excluded.
 * <p>
 * <strong>Definition</strong>:
 * <a href="http://www.itl.nist.gov/div898/handbook/eda/section3/eda3662.htm">
 * Uniform Distribution</a> {@code lower} and {@code upper - lower} are the
 * <a href = "http://www.itl.nist.gov/div898/handbook/eda/section3/eda364.htm">
 * location and scale parameters</a>, respectively.</p></text>
      <param>lower the lower bound of the support</param>
      <param>upper the exclusive upper bound of the support</param>
      <param>lowerInclusive {@code true} if the lower bound is inclusive</param>
      <return>uniformly distributed random value in the {@code (lower, upper)}interval, if {@code lowerInclusive} is {@code false}, or in the{@code [lower, upper)} interval, if {@code lowerInclusive} is{@code true}</return>
      <throws>NumberIsTooLargeException if {@code lower >= upper}</throws>
      <throws>NotFiniteNumberException if one of the bounds is infinite</throws>
      <throws>NotANumberException if one of the bounds is NaN</throws>
    </javadoc>
    <method name="nextPermutation" type="int[]" startLine="226" endLine="242" />
    <javadoc>
      <text>* Generates an integer array of length {@code k} whose entries are selected
 * randomly, without repetition, from the integers {@code 0, ..., n - 1}(inclusive).
 * <p>
 * Generated arrays represent permutations of {@code n} taken {@code k} at a
 * time.</p></text>
      <param>n the domain of the permutation</param>
      <param>k the size of the permutation</param>
      <return>a random {@code k}-permutation of {@code n}, as an array of
 * integers</return>
      <throws>NumberIsTooLargeException if {@code k > n}.</throws>
      <throws>NotStrictlyPositiveException if {@code k <= 0}.</throws>
    </javadoc>
    <method name="nextSample" type="Object[]" startLine="244" endLine="262" />
    <javadoc>
      <text>* Returns an array of {@code k} objects selected randomly from the
 * Collection {@code c}.
 * <p>
 * Sampling from {@code c} is without replacement; but if {@code c} contains
 * identical objects, the sample may include repeats.  If all elements of{@code c} are distinct, the resulting object array represents a
 * <a href="http://rkb.home.cern.ch/rkb/AN16pp/node250.html#SECTION0002500000000000000000">
 * Simple Random Sample</a> of size {@code k} from the elements of{@code c}.</p></text>
      <param>c the collection to be sampled</param>
      <param>k the size of the sample</param>
      <return>a random sample of {@code k} elements from {@code c}</return>
      <throws>NumberIsTooLargeException if {@code k > c.size()}.</throws>
      <throws>NotStrictlyPositiveException if {@code k <= 0}.</throws>
    </javadoc>
  </interface>
</source>
