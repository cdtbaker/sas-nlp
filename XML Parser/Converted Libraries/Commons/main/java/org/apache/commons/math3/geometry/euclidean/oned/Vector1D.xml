<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.geometry.euclidean.oned">
  <import name="java.text.NumberFormat" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.geometry.Space" />
  <import name="org.apache.commons.math3.geometry.Vector" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="Vector1D" startLine="28">
    <implements name="Vector<Euclidean1D>" />
    <javadoc>
      <text>* This class represents a 1D vector.
 * <p>Instances of this class are guaranteed to be immutable.</p></text>
      <version>$Id: Vector1D.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Origin (coordinates: 0).</text>
    </javadoc>
    <declaration type="Vector1D" name="ZERO" />
    <javadoc>
      <text>* Unit (coordinates: 1).</text>
    </javadoc>
    <declaration type="Vector1D" name="ONE" />
    <javadoc>
      <text>* A vector with all coordinates set to NaN.</text>
    </javadoc>
    <declaration type="Vector1D" name="NaN" />
    <javadoc>
      <text>* A vector with all coordinates set to positive infinity.</text>
    </javadoc>
    <declaration type="Vector1D" name="POSITIVE_INFINITY" />
    <javadoc>
      <text>* A vector with all coordinates set to negative infinity.</text>
    </javadoc>
    <declaration type="Vector1D" name="NEGATIVE_INFINITY" />
    <javadoc>
      <text>* Serializable UID.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Abscissa.</text>
    </javadoc>
    <declaration type="double" name="x" />
    <javadoc>
      <text>* Simple constructor.
 * Build a vector from its coordinates</text>
      <param>x abscissa</param>
      <see>#getX()</see>
    </javadoc>
    <method type="constructor" name="Vector1D" startLine="65" endLine="67" />
    <javadoc>
      <text>* Multiplicative constructor
 * Build a vector from another one and a scale factor.
 * The vector built will be a * u</text>
      <param>a scale factor</param>
      <param>u base (unscaled) vector</param>
    </javadoc>
    <method type="constructor" name="Vector1D" startLine="75" endLine="77" />
    <javadoc>
      <text>* Linear constructor
 * Build a vector from two other ones and corresponding scale factors.
 * The vector built will be a1 * u1 + a2 * u2</text>
      <param>a1 first scale factor</param>
      <param>u1 first base (unscaled) vector</param>
      <param>a2 second scale factor</param>
      <param>u2 second base (unscaled) vector</param>
    </javadoc>
    <method type="constructor" name="Vector1D" startLine="87" endLine="89" />
    <javadoc>
      <text>* Linear constructor
 * Build a vector from three other ones and corresponding scale factors.
 * The vector built will be a1 * u1 + a2 * u2 + a3 * u3</text>
      <param>a1 first scale factor</param>
      <param>u1 first base (unscaled) vector</param>
      <param>a2 second scale factor</param>
      <param>u2 second base (unscaled) vector</param>
      <param>a3 third scale factor</param>
      <param>u3 third base (unscaled) vector</param>
    </javadoc>
    <method type="constructor" name="Vector1D" startLine="102" endLine="104" />
    <javadoc>
      <text>* Linear constructor
 * Build a vector from four other ones and corresponding scale factors.
 * The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4</text>
      <param>a1 first scale factor</param>
      <param>u1 first base (unscaled) vector</param>
      <param>a2 second scale factor</param>
      <param>u2 second base (unscaled) vector</param>
      <param>a3 third scale factor</param>
      <param>u3 third base (unscaled) vector</param>
      <param>a4 fourth scale factor</param>
      <param>u4 fourth base (unscaled) vector</param>
    </javadoc>
    <method type="constructor" name="Vector1D" startLine="119" endLine="121" />
    <javadoc>
      <text>* Get the abscissa of the vector.</text>
      <return>abscissa of the vector</return>
      <see>#Vector1D(double)</see>
    </javadoc>
    <method type="double" name="getX" startLine="127" endLine="129" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Space" name="getSpace" startLine="132" endLine="134" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Vector1D" name="getZero" startLine="137" endLine="139" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getNorm1" startLine="142" endLine="144" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getNorm" startLine="147" endLine="149" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getNormSq" startLine="152" endLine="154" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getNormInf" startLine="157" endLine="159" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Vector1D" name="add" startLine="162" endLine="165">
      <declaration type="Vector1D" name="v1" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Vector1D" name="add" startLine="168" endLine="171">
      <declaration type="Vector1D" name="v1" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Vector1D" name="subtract" startLine="174" endLine="177">
      <declaration type="Vector1D" name="p3" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Vector1D" name="subtract" startLine="180" endLine="183">
      <declaration type="Vector1D" name="v1" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Vector1D" name="normalize" startLine="186" endLine="192">
      <declaration type="double" name="s" />
      <scope startLine="188" endLine="190" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Vector1D" name="negate" startLine="194" endLine="196" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Vector1D" name="scalarMultiply" startLine="199" endLine="201" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isNaN" startLine="204" endLine="206" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="isInfinite" startLine="209" endLine="211" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="distance1" startLine="214" endLine="218">
      <declaration type="Vector1D" name="p3" />
      <declaration type="double" name="dx" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="distance" startLine="221" endLine="225">
      <declaration type="Vector1D" name="p3" />
      <declaration type="double" name="dx" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="distanceInf" startLine="228" endLine="232">
      <declaration type="Vector1D" name="p3" />
      <declaration type="double" name="dx" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="distanceSq" startLine="235" endLine="239">
      <declaration type="Vector1D" name="p3" />
      <declaration type="double" name="dx" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="dotProduct" startLine="242" endLine="245">
      <declaration type="Vector1D" name="v1" />
    </method>
    <javadoc>
      <text>* Compute the distance between two vectors according to the L<sub>2</sub> norm.
 * <p>Calling this method is equivalent to calling:
 * <code>p1.subtract(p2).getNorm()</code> except that no intermediate
 * vector is built</p></text>
      <param>p1 first vector</param>
      <param>p2 second vector</param>
      <return>the distance between p1 and p2 according to the L<sub>2</sub> norm</return>
    </javadoc>
    <method type="double" name="distance" startLine="255" endLine="257" />
    <javadoc>
      <text>* Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
 * <p>Calling this method is equivalent to calling:
 * <code>p1.subtract(p2).getNormInf()</code> except that no intermediate
 * vector is built</p></text>
      <param>p1 first vector</param>
      <param>p2 second vector</param>
      <return>the distance between p1 and p2 according to the L<sub>&infin;</sub> norm</return>
    </javadoc>
    <method type="double" name="distanceInf" startLine="267" endLine="269" />
    <javadoc>
      <text>* Compute the square of the distance between two vectors.
 * <p>Calling this method is equivalent to calling:
 * <code>p1.subtract(p2).getNormSq()</code> except that no intermediate
 * vector is built</p></text>
      <param>p1 first vector</param>
      <param>p2 second vector</param>
      <return>the square of the distance between p1 and p2</return>
    </javadoc>
    <method type="double" name="distanceSq" startLine="279" endLine="281" />
    <javadoc>
      <text>* Test for the equality of two 1D vectors.
 * <p>
 * If all coordinates of two 1D vectors are exactly the same, and none are
 * <code>Double.NaN</code>, the two 1D vectors are considered to be equal.
 * </p>
 * <p>
 * <code>NaN</code> coordinates are considered to affect globally the vector
 * and be equals to each other - i.e, if either (or all) coordinates of the
 * 1D vector are equal to <code>Double.NaN</code>, the 1D vector is equal to{@link #NaN}.
 * </p></text>
      <param>other Object to test for equality to this</param>
      <return>true if two 1D vector objects are equal, false if
 * object is null, not an instance of Vector1D, or
 * not equal to this Vector1D instance</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="303" endLine="318">
      <scope startLine="305" endLine="307" />
      <scope startLine="309" endLine="316">
        <declaration type="Vector1D" name="rhs" />
        <scope startLine="311" endLine="313" />
      </scope>
    </method>
    <javadoc>
      <text>* Get a hashCode for the 1D vector.
 * <p>
 * All NaN values have the same hash code.</p></text>
      <return>a hash code value for this object</return>
    </javadoc>
    <method type="int" name="hashCode" startLine="328" endLine="333">
      <scope startLine="329" endLine="331" />
    </method>
    <javadoc>
      <text>* Get a string representation of this vector.</text>
      <return>a string representation of this vector</return>
    </javadoc>
    <method type="String" name="toString" startLine="339" endLine="341" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="String" name="toString" startLine="344" endLine="346" />
    <comment>CHECKSTYLE: stop ConstantName</comment>
    <comment>CHECKSTYLE: resume ConstantName</comment>
  </class>
</source>
