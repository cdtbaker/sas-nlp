<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="java.io.IOException" />
  <import name="java.io.ObjectInputStream" />
  <import name="java.io.ObjectOutputStream" />
  <import name="java.util.Arrays" />
  <import name="org.apache.commons.math3.Field" />
  <import name="org.apache.commons.math3.FieldElement" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.ZeroException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.fraction.BigFraction" />
  <import name="org.apache.commons.math3.fraction.Fraction" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <import name="org.apache.commons.math3.util.Precision" />
  <class name="MatrixUtils" startLine="41">
    <javadoc>
      <text>* A collection of static methods that operate on or return matrices.</text>
      <version>$Id: MatrixUtils.java 1449528 2013-02-24 19:06:20Z luc $</version>
    </javadoc>
    <javadoc>
      <text>* The default format for {@link RealMatrix} objects.</text>
      <since>3.1</since>
    </javadoc>
    <declaration type="RealMatrixFormat" name="DEFAULT_FORMAT" />
    <javadoc>
      <text>* A format for {@link RealMatrix} objects compatible with octave.</text>
      <since>3.1</since>
    </javadoc>
    <declaration type="RealMatrixFormat" name="OCTAVE_FORMAT" />
    <javadoc>
      <text>* Private constructor.</text>
    </javadoc>
    <method type="constructor" name="MatrixUtils" startLine="63" endLine="65" />
    <javadoc>
      <text>* Returns a {@link RealMatrix} with specified dimensions.
 * <p>The type of matrix returned depends on the dimension. Below
 * 2<sup>12</sup> elements (i.e. 4096 elements or 64&times;64 for a
 * square matrix) which can be stored in a 32kB array, a {@link Array2DRowRealMatrix} instance is built. Above this threshold a {@link BlockRealMatrix} instance is built.</p>
 * <p>The matrix elements are all set to 0.0.</p></text>
      <param>rows number of rows of the matrix</param>
      <param>columns number of columns of the matrix</param>
      <return>RealMatrix with specified dimensions</return>
      <see>#createRealMatrix(double[][])</see>
    </javadoc>
    <method type="RealMatrix" name="createRealMatrix" startLine="80" endLine="83" />
    <javadoc>
      <text>* Returns a {@link FieldMatrix} with specified dimensions.
 * <p>The type of matrix returned depends on the dimension. Below
 * 2<sup>12</sup> elements (i.e. 4096 elements or 64&times;64 for a
 * square matrix), a {@link FieldMatrix} instance is built. Above
 * this threshold a {@link BlockFieldMatrix} instance is built.</p>
 * <p>The matrix elements are all set to field.getZero().</p></text>
      <param><T>
 *  the type of the field elements</param>
      <param>field field to which the matrix elements belong</param>
      <param>rows number of rows of the matrix</param>
      <param>columns number of columns of the matrix</param>
      <return>FieldMatrix with specified dimensions</return>
      <see>#createFieldMatrix(FieldElement[][])</see>
      <since>2.0</since>
    </javadoc>
    <method type="FieldMatrix<T>" name="createFieldMatrix" startLine="102" endLine="105" />
    <javadoc>
      <text>* Returns a {@link RealMatrix} whose entries are the the values in the
 * the input array.
 * <p>The type of matrix returned depends on the dimension. Below
 * 2<sup>12</sup> elements (i.e. 4096 elements or 64&times;64 for a
 * square matrix) which can be stored in a 32kB array, a {@link Array2DRowRealMatrix} instance is built. Above this threshold a {@link BlockRealMatrix} instance is built.</p>
 * <p>The input array is copied, not referenced.</p></text>
      <param>data input array</param>
      <return>RealMatrix containing the values of the array</return>
      <throws>org.apache.commons.math3.exception.DimensionMismatchExceptionif {@code data} is not rectangular (not all rows have the same length).</throws>
      <throws>NoDataException if a row or column is empty.</throws>
      <throws>NullArgumentException if either {@code data} or {@code data[0]}is {@code null}.</throws>
      <throws>DimensionMismatchException if {@code data} is not rectangular.</throws>
      <see>#createRealMatrix(int,int)</see>
    </javadoc>
    <method type="RealMatrix" name="createRealMatrix" startLine="129" endLine="136">
      <scope startLine="131" endLine="133" />
    </method>
    <javadoc>
      <text>* Returns a {@link FieldMatrix} whose entries are the the values in the
 * the input array.
 * <p>The type of matrix returned depends on the dimension. Below
 * 2<sup>12</sup> elements (i.e. 4096 elements or 64&times;64 for a
 * square matrix), a {@link FieldMatrix} instance is built. Above
 * this threshold a {@link BlockFieldMatrix} instance is built.</p>
 * <p>The input array is copied, not referenced.</p></text>
      <param><T>
 *  the type of the field elements</param>
      <param>data input array</param>
      <return>a matrix containing the values of the array.</return>
      <throws>org.apache.commons.math3.exception.DimensionMismatchExceptionif {@code data} is not rectangular (not all rows have the same length).</throws>
      <throws>NoDataException if a row or column is empty.</throws>
      <throws>NullArgumentException if either {@code data} or {@code data[0]}is {@code null}.</throws>
      <see>#createFieldMatrix(Field,int,int)</see>
      <since>2.0</since>
    </javadoc>
    <method type="FieldMatrix<T>" name="createFieldMatrix" startLine="158" endLine="165">
      <scope startLine="160" endLine="162" />
    </method>
    <javadoc>
      <text>* Returns <code>dimension x dimension</code> identity matrix.</text>
      <param>dimension dimension of identity matrix to generate</param>
      <return>identity matrix</return>
      <throws>IllegalArgumentException if dimension is not positive</throws>
      <since>1.1</since>
    </javadoc>
    <method type="RealMatrix" name="createRealIdentityMatrix" startLine="175" endLine="181">
      <declaration type="RealMatrix" name="m" />
      <scope startLine="177" endLine="179" />
    </method>
    <javadoc>
      <text>* Returns <code>dimension x dimension</code> identity matrix.</text>
      <param><T>
 *  the type of the field elements</param>
      <param>field field to which the elements belong</param>
      <param>dimension dimension of identity matrix to generate</param>
      <return>identity matrix</return>
      <throws>IllegalArgumentException if dimension is not positive</throws>
      <since>2.0</since>
    </javadoc>
    <method type="FieldMatrix<T>" name="createFieldIdentityMatrix" startLine="194" endLine="204">
      <declaration type="T" name="zero" />
      <declaration type="T" name="one" />
      <declaration type="T[][]" name="d" />
      <scope startLine="198" endLine="202">
        <declaration type="T[]" name="dRow" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns a diagonal matrix with specified elements.</text>
      <param>diagonal diagonal elements of the matrix (the array elements
 * will be copied)</param>
      <return>diagonal matrix</return>
      <since>2.0</since>
    </javadoc>
    <method type="RealMatrix" name="createRealDiagonalMatrix" startLine="214" endLine="220">
      <declaration type="RealMatrix" name="m" />
      <scope startLine="216" endLine="218" />
    </method>
    <javadoc>
      <text>* Returns a diagonal matrix with specified elements.</text>
      <param><T>
 *  the type of the field elements</param>
      <param>diagonal diagonal elements of the matrix (the array elements
 * will be copied)</param>
      <return>diagonal matrix</return>
      <since>2.0</since>
    </javadoc>
    <method type="FieldMatrix<T>" name="createFieldDiagonalMatrix" startLine="232" endLine="239">
      <declaration type="FieldMatrix<T>" name="m" />
      <scope startLine="235" endLine="237" />
    </method>
    <javadoc>
      <text>* Creates a {@link RealVector} using the data from the input array.</text>
      <param>data the input data</param>
      <return>a data.length RealVector</return>
      <throws>NoDataException if {@code data} is empty.</throws>
      <throws>NullArgumentException if {@code data} is {@code null}.</throws>
    </javadoc>
    <method type="RealVector" name="createRealVector" startLine="250" endLine="255">
      <scope startLine="251" endLine="253" />
    </method>
    <javadoc>
      <text>* Creates a {@link FieldVector} using the data from the input array.</text>
      <param><T>
 *  the type of the field elements</param>
      <param>data the input data</param>
      <return>a data.length FieldVector</return>
      <throws>NoDataException if {@code data} is empty.</throws>
      <throws>NullArgumentException if {@code data} is {@code null}.</throws>
      <throws>ZeroException if {@code data} has 0 elements</throws>
    </javadoc>
    <method type="FieldVector<T>" name="createFieldVector" startLine="268" endLine="276">
      <scope startLine="269" endLine="271" />
      <scope startLine="272" endLine="274" />
    </method>
    <javadoc>
      <text>* Create a row {@link RealMatrix} using the data from the input
 * array.</text>
      <param>rowData the input row data</param>
      <return>a 1 x rowData.length RealMatrix</return>
      <throws>NoDataException if {@code rowData} is empty.</throws>
      <throws>NullArgumentException if {@code rowData} is {@code null}.</throws>
    </javadoc>
    <method type="RealMatrix" name="createRowRealMatrix" startLine="288" endLine="298">
      <scope startLine="289" endLine="291" />
      <declaration type="int" name="nCols" />
      <declaration type="RealMatrix" name="m" />
      <scope startLine="294" endLine="296" />
    </method>
    <javadoc>
      <text>* Create a row {@link FieldMatrix} using the data from the input
 * array.</text>
      <param><T>
 *  the type of the field elements</param>
      <param>rowData the input row data</param>
      <return>a 1 x rowData.length FieldMatrix</return>
      <throws>NoDataException if {@code rowData} is empty.</throws>
      <throws>NullArgumentException if {@code rowData} is {@code null}.</throws>
    </javadoc>
    <method type="FieldMatrix<T>" name="createRowFieldMatrix" startLine="312" endLine="325">
      <scope startLine="313" endLine="315" />
      <declaration type="int" name="nCols" />
      <scope startLine="317" endLine="319" />
      <declaration type="FieldMatrix<T>" name="m" />
      <scope startLine="321" endLine="323" />
    </method>
    <javadoc>
      <text>* Creates a column {@link RealMatrix} using the data from the input
 * array.</text>
      <param>columnData  the input column data</param>
      <return>a columnData x 1 RealMatrix</return>
      <throws>NoDataException if {@code columnData} is empty.</throws>
      <throws>NullArgumentException if {@code columnData} is {@code null}.</throws>
    </javadoc>
    <method type="RealMatrix" name="createColumnRealMatrix" startLine="337" endLine="347">
      <scope startLine="338" endLine="340" />
      <declaration type="int" name="nRows" />
      <declaration type="RealMatrix" name="m" />
      <scope startLine="343" endLine="345" />
    </method>
    <javadoc>
      <text>* Creates a column {@link FieldMatrix} using the data from the input
 * array.</text>
      <param><T>
 *  the type of the field elements</param>
      <param>columnData  the input column data</param>
      <return>a columnData x 1 FieldMatrix</return>
      <throws>NoDataException if {@code data} is empty.</throws>
      <throws>NullArgumentException if {@code columnData} is {@code null}.</throws>
    </javadoc>
    <method type="FieldMatrix<T>" name="createColumnFieldMatrix" startLine="361" endLine="374">
      <scope startLine="362" endLine="364" />
      <declaration type="int" name="nRows" />
      <scope startLine="366" endLine="368" />
      <declaration type="FieldMatrix<T>" name="m" />
      <scope startLine="370" endLine="372" />
    </method>
    <javadoc>
      <text>* Checks whether a matrix is symmetric, within a given relative tolerance.</text>
      <param>matrix Matrix to check.</param>
      <param>relativeTolerance Tolerance of the symmetry check.</param>
      <param>raiseException If {@code true}, an exception will be raised if
 * the matrix is not symmetric.</param>
      <return>{@code true} if {@code matrix} is symmetric.</return>
      <throws>NonSquareMatrixException if the matrix is not square.</throws>
      <throws>NonSymmetricMatrixException if the matrix is not symmetric.</throws>
    </javadoc>
    <method type="boolean" name="isSymmetricInternal" startLine="389" endLine="413">
      <declaration type="int" name="rows" />
      <scope startLine="391" endLine="397">
        <scope startLine="392" endLine="394" />
        <scope startLine="394" endLine="396" />
      </scope>
      <scope startLine="398" endLine="411">
        <scope startLine="399" endLine="410">
          <declaration type="double" name="mij" />
          <declaration type="double" name="mji" />
          <scope startLine="403" endLine="409">
            <scope startLine="404" endLine="406" />
            <scope startLine="406" endLine="408" />
          </scope>
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Checks whether a matrix is symmetric.</text>
      <param>matrix Matrix to check.</param>
      <param>eps Relative tolerance.</param>
      <throws>NonSquareMatrixException if the matrix is not square.</throws>
      <throws>NonSymmetricMatrixException if the matrix is not symmetric.</throws>
      <since>3.1</since>
    </javadoc>
    <method type="void" name="checkSymmetric" startLine="425" endLine="427" />
    <javadoc>
      <text>* Checks whether a matrix is symmetric.</text>
      <param>matrix Matrix to check.</param>
      <param>eps Relative tolerance.</param>
      <return>{@code true} if {@code matrix} is symmetric.</return>
      <since>3.1</since>
    </javadoc>
    <method type="boolean" name="isSymmetric" startLine="438" endLine="440" />
    <javadoc>
      <text>* Check if matrix indices are valid.</text>
      <param>m Matrix.</param>
      <param>row Row index to check.</param>
      <param>column Column index to check.</param>
      <throws>OutOfRangeException if {@code row} or {@code column} is not
 * a valid index.</throws>
    </javadoc>
    <method type="void" name="checkMatrixIndex" startLine="453" endLine="456" />
    <javadoc>
      <text>* Check if a row index is valid.</text>
      <param>m Matrix.</param>
      <param>row Row index to check.</param>
      <throws>OutOfRangeException if {@code row} is not a valid index.</throws>
    </javadoc>
    <method type="void" name="checkRowIndex" startLine="466" endLine="472">
      <scope startLine="468" endLine="471" />
    </method>
    <javadoc>
      <text>* Check if a column index is valid.</text>
      <param>m Matrix.</param>
      <param>column Column index to check.</param>
      <throws>OutOfRangeException if {@code column} is not a valid index.</throws>
    </javadoc>
    <method type="void" name="checkColumnIndex" startLine="482" endLine="487">
      <scope startLine="483" endLine="486" />
    </method>
    <javadoc>
      <text>* Check if submatrix ranges indices are valid.
 * Rows and columns are indicated counting from 0 to {@code n - 1}.</text>
      <param>m Matrix.</param>
      <param>startRow Initial row index.</param>
      <param>endRow Final row index.</param>
      <param>startColumn Initial column index.</param>
      <param>endColumn Final column index.</param>
      <throws>OutOfRangeException if the indices are invalid.</throws>
      <throws>NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.</throws>
    </javadoc>
    <method type="void" name="checkSubMatrixIndex" startLine="505" endLine="521">
      <scope startLine="508" endLine="511" />
      <scope startLine="515" endLine="518" />
    </method>
    <javadoc>
      <text>* Check if submatrix ranges indices are valid.
 * Rows and columns are indicated counting from 0 to n-1.</text>
      <param>m Matrix.</param>
      <param>selectedRows Array of row indices.</param>
      <param>selectedColumns Array of column indices.</param>
      <throws>NullArgumentException if {@code selectedRows} or{@code selectedColumns} are {@code null}.</throws>
      <throws>NoDataException if the row or column selections are empty (zero
 * length).</throws>
      <throws>OutOfRangeException if row or column selections are not valid.</throws>
    </javadoc>
    <method type="void" name="checkSubMatrixIndex" startLine="539" endLine="559">
      <scope startLine="540" endLine="542" />
      <scope startLine="543" endLine="545" />
      <scope startLine="546" endLine="548" />
      <scope startLine="549" endLine="551" />
      <scope startLine="553" endLine="555" />
      <scope startLine="556" endLine="558" />
    </method>
    <javadoc>
      <text>* Check if matrices are addition compatible.</text>
      <param>left Left hand side matrix.</param>
      <param>right Right hand side matrix.</param>
      <throws>MatrixDimensionMismatchException if the matrices are not addition
 * compatible.</throws>
    </javadoc>
    <method type="void" name="checkAdditionCompatible" startLine="570" endLine="576">
      <scope startLine="572" endLine="575" />
    </method>
    <javadoc>
      <text>* Check if matrices are subtraction compatible</text>
      <param>left Left hand side matrix.</param>
      <param>right Right hand side matrix.</param>
      <throws>MatrixDimensionMismatchException if the matrices are not addition
 * compatible.</throws>
    </javadoc>
    <method type="void" name="checkSubtractionCompatible" startLine="587" endLine="593">
      <scope startLine="589" endLine="592" />
    </method>
    <javadoc>
      <text>* Check if matrices are multiplication compatible</text>
      <param>left Left hand side matrix.</param>
      <param>right Right hand side matrix.</param>
      <throws>DimensionMismatchException if matrices are not multiplication
 * compatible.</throws>
    </javadoc>
    <method type="void" name="checkMultiplicationCompatible" startLine="604" endLine="610">
      <scope startLine="606" endLine="609" />
    </method>
    <javadoc>
      <text>* Convert a {@link FieldMatrix}/{@link Fraction} matrix to a {@link RealMatrix}.</text>
      <param>m Matrix to convert.</param>
      <return>the converted matrix.</return>
    </javadoc>
    <method type="Array2DRowRealMatrix" name="fractionMatrixToRealMatrix" startLine="617" endLine="621">
      <declaration type="FractionMatrixConverter" name="converter" />
    </method>
    <class name="FractionMatrixConverter" extends="DefaultFieldMatrixPreservingVisitor<Fraction>" startLine="623">
      <javadoc>
        <text>* Converter for {@link FieldMatrix}/{@link Fraction}.</text>
      </javadoc>
      <javadoc>
        <text>* Converted array.</text>
      </javadoc>
      <declaration type="double[][]" name="data" />
      <javadoc>
        <text>* Simple constructor.</text>
      </javadoc>
      <method type="constructor" name="FractionMatrixConverter" startLine="628" endLine="630" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="void" name="start" startLine="635" endLine="637" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="void" name="visit" startLine="641" endLine="643" />
      <javadoc>
        <text>* Get the converted matrix.</text>
        <return>the converted matrix.</return>
      </javadoc>
      <method type="Array2DRowRealMatrix" name="getConvertedMatrix" startLine="650" endLine="652" />
      <javadoc>
        <text>* Convert a {@link FieldMatrix}/{@link BigFraction} matrix to a {@link RealMatrix}.</text>
        <param>m Matrix to convert.</param>
        <return>the converted matrix.</return>
      </javadoc>
      <method type="Array2DRowRealMatrix" name="bigFractionMatrixToRealMatrix" startLine="662" endLine="666">
        <declaration type="BigFractionMatrixConverter" name="converter" />
      </method>
      <class name="BigFractionMatrixConverter" extends="DefaultFieldMatrixPreservingVisitor<BigFraction>" startLine="668">
        <javadoc>
          <text>* Converter for {@link FieldMatrix}/{@link BigFraction}.</text>
        </javadoc>
        <javadoc>
          <text>* Converted array.</text>
        </javadoc>
        <declaration type="double[][]" name="data" />
        <javadoc>
          <text>* Simple constructor.</text>
        </javadoc>
        <method type="constructor" name="BigFractionMatrixConverter" startLine="673" endLine="675" />
        <javadoc>
          <text>* {@inheritDoc}</text>
        </javadoc>
        <method type="void" name="start" startLine="680" endLine="682" />
        <javadoc>
          <text>* {@inheritDoc}</text>
        </javadoc>
        <method type="void" name="visit" startLine="686" endLine="688" />
        <javadoc>
          <text>* Get the converted matrix.</text>
          <return>the converted matrix.</return>
        </javadoc>
        <method type="Array2DRowRealMatrix" name="getConvertedMatrix" startLine="695" endLine="697" />
        <javadoc>
          <text>* Serialize a {@link RealVector}.
 * <p>
 * This method is intended to be called from within a private
 * <code>writeObject</code> method (after a call to
 * <code>oos.defaultWriteObject()</code>) in a class that has a{@link RealVector} field, which should be declared <code>transient</code>.
 * This way, the default handling does not serialize the vector (the {@link RealVector} interface is not serializable by default) but this method does
 * serialize it specifically.
 * </p>
 * <p>
 * The following example shows how a simple class with a name and a real vector
 * should be written:
 * <pre><code>
 * public class NamedVector implements Serializable {
 * private final String name;
 * private final transient RealVector coefficients;
 * // omitted constructors, getters ...
 * private void writeObject(ObjectOutputStream oos) throws IOException {
 * oos.defaultWriteObject();  // takes care of name field
 * MatrixUtils.serializeRealVector(coefficients, oos);
 * }
 * private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {
 * ois.defaultReadObject();  // takes care of name field
 * MatrixUtils.deserializeRealVector(this, "coefficients", ois);
 * }
 * }
 * </code></pre>
 * </p></text>
          <param>vector real vector to serialize</param>
          <param>oos stream where the real vector should be written</param>
          <exception>IOException if object cannot be written to stream</exception>
          <see>#deserializeRealVector(Object,String,ObjectInputStream)</see>
        </javadoc>
        <method type="void" name="serializeRealVector" startLine="742" endLine="748">
          <declaration type="int" name="n" />
          <scope startLine="745" endLine="747" />
        </method>
        <javadoc>
          <text>* Deserialize  a {@link RealVector} field in a class.
 * <p>
 * This method is intended to be called from within a private
 * <code>readObject</code> method (after a call to
 * <code>ois.defaultReadObject()</code>) in a class that has a{@link RealVector} field, which should be declared <code>transient</code>.
 * This way, the default handling does not deserialize the vector (the {@link RealVector} interface is not serializable by default) but this method does
 * deserialize it specifically.
 * </p></text>
          <param>instance instance in which the field must be set up</param>
          <param>fieldName name of the field within the class (may be private and final)</param>
          <param>ois stream from which the real vector should be read</param>
          <exception>ClassNotFoundException if a class in the stream cannot be found</exception>
          <exception>IOException if object cannot be read from the stream</exception>
          <see>#serializeRealVector(RealVector,ObjectOutputStream)</see>
        </javadoc>
        <method type="void" name="deserializeRealVector" startLine="770" endLine="799">
          <scope startLine="771" endLine="789">
            <declaration type="int" name="n" />
            <declaration type="double[]" name="data" />
            <scope startLine="776" endLine="778" />
            <declaration type="RealVector" name="vector" />
            <declaration type="java.lang.reflect.Field" name="f" />
            <comment>read the vector data</comment>
            <comment>create the instance</comment>
            <comment>set up the field</comment>
          </scope>
          <scope startLine="789" endLine="793">
            <declaration type="IOException" name="ioe" />
          </scope>
          <scope startLine="793" endLine="797">
            <declaration type="IOException" name="ioe" />
          </scope>
        </method>
        <javadoc>
          <text>* Serialize a {@link RealMatrix}.
 * <p>
 * This method is intended to be called from within a private
 * <code>writeObject</code> method (after a call to
 * <code>oos.defaultWriteObject()</code>) in a class that has a{@link RealMatrix} field, which should be declared <code>transient</code>.
 * This way, the default handling does not serialize the matrix (the {@link RealMatrix} interface is not serializable by default) but this method does
 * serialize it specifically.
 * </p>
 * <p>
 * The following example shows how a simple class with a name and a real matrix
 * should be written:
 * <pre><code>
 * public class NamedMatrix implements Serializable {
 * private final String name;
 * private final transient RealMatrix coefficients;
 * // omitted constructors, getters ...
 * private void writeObject(ObjectOutputStream oos) throws IOException {
 * oos.defaultWriteObject();  // takes care of name field
 * MatrixUtils.serializeRealMatrix(coefficients, oos);
 * }
 * private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {
 * ois.defaultReadObject();  // takes care of name field
 * MatrixUtils.deserializeRealMatrix(this, "coefficients", ois);
 * }
 * }
 * </code></pre>
 * </p></text>
          <param>matrix real matrix to serialize</param>
          <param>oos stream where the real matrix should be written</param>
          <exception>IOException if object cannot be written to stream</exception>
          <see>#deserializeRealMatrix(Object,String,ObjectInputStream)</see>
        </javadoc>
        <method type="void" name="serializeRealMatrix" startLine="843" endLine="853">
          <declaration type="int" name="n" />
          <declaration type="int" name="m" />
          <scope startLine="848" endLine="852">
            <scope startLine="849" endLine="851" />
          </scope>
        </method>
        <javadoc>
          <text>* Deserialize  a {@link RealMatrix} field in a class.
 * <p>
 * This method is intended to be called from within a private
 * <code>readObject</code> method (after a call to
 * <code>ois.defaultReadObject()</code>) in a class that has a{@link RealMatrix} field, which should be declared <code>transient</code>.
 * This way, the default handling does not deserialize the matrix (the {@link RealMatrix} interface is not serializable by default) but this method does
 * deserialize it specifically.
 * </p></text>
          <param>instance instance in which the field must be set up</param>
          <param>fieldName name of the field within the class (may be private and final)</param>
          <param>ois stream from which the real matrix should be read</param>
          <exception>ClassNotFoundException if a class in the stream cannot be found</exception>
          <exception>IOException if object cannot be read from the stream</exception>
          <see>#serializeRealMatrix(RealMatrix,ObjectOutputStream)</see>
        </javadoc>
        <method type="void" name="deserializeRealMatrix" startLine="875" endLine="907">
          <scope startLine="876" endLine="898">
            <declaration type="int" name="n" />
            <declaration type="int" name="m" />
            <declaration type="double[][]" name="data" />
            <scope startLine="882" endLine="887">
              <declaration type="double[]" name="dataI" />
              <scope startLine="884" endLine="886" />
            </scope>
            <declaration type="RealMatrix" name="matrix" />
            <declaration type="java.lang.reflect.Field" name="f" />
            <comment>read the matrix data</comment>
            <comment>create the instance</comment>
            <comment>set up the field</comment>
          </scope>
          <scope startLine="898" endLine="902">
            <declaration type="IOException" name="ioe" />
          </scope>
          <scope startLine="902" endLine="906">
            <declaration type="IOException" name="ioe" />
          </scope>
        </method>
        <javadoc>
          <text>* Solve  a  system of composed of a Lower Triangular Matrix{@link RealMatrix}.
 * <p>
 * This method is called to solve systems of equations which are
 * of the lower triangular form. The matrix {@link RealMatrix}is assumed, though not checked, to be in lower triangular form.
 * The vector {@link RealVector} is overwritten with the solution.
 * The matrix is checked that it is square and its dimensions match
 * the length of the vector.
 * </p></text>
          <param>rm RealMatrix which is lower triangular</param>
          <param>b  RealVector this is overwritten</param>
          <throws>DimensionMismatchException if the matrix and vector are not
 * conformable</throws>
          <throws>NonSquareMatrixException if the matrix {@code rm} is not square</throws>
          <throws>MathArithmeticException if the absolute value of one of the diagonal
 * coefficient of {@code rm} is lower than {@link Precision#SAFE_MIN}</throws>
        </javadoc>
        <method type="void" name="solveLowerTriangularSystem" startLine="929" endLine="951">
          <scope startLine="930" endLine="934" />
          <scope startLine="935" endLine="938" />
          <declaration type="int" name="rows" />
          <scope startLine="940" endLine="950">
            <declaration type="double" name="diag" />
            <scope startLine="942" endLine="944" />
            <declaration type="double" name="bi" />
            <scope startLine="947" endLine="949" />
          </scope>
        </method>
        <javadoc>
          <text>* Solver a  system composed  of an Upper Triangular Matrix{@link RealMatrix}.
 * <p>
 * This method is called to solve systems of equations which are
 * of the lower triangular form. The matrix {@link RealMatrix}is assumed, though not checked, to be in upper triangular form.
 * The vector {@link RealVector} is overwritten with the solution.
 * The matrix is checked that it is square and its dimensions match
 * the length of the vector.
 * </p></text>
          <param>rm RealMatrix which is upper triangular</param>
          <param>b  RealVector this is overwritten</param>
          <throws>DimensionMismatchException if the matrix and vector are not
 * conformable</throws>
          <throws>NonSquareMatrixException if the matrix {@code rm} is not
 * square</throws>
          <throws>MathArithmeticException if the absolute value of one of the diagonal
 * coefficient of {@code rm} is lower than {@link Precision#SAFE_MIN}</throws>
        </javadoc>
        <method type="void" name="solveUpperTriangularSystem" startLine="974" endLine="996">
          <scope startLine="975" endLine="979" />
          <scope startLine="980" endLine="983" />
          <declaration type="int" name="rows" />
          <scope startLine="985" endLine="995">
            <declaration type="double" name="diag" />
            <scope startLine="987" endLine="989" />
            <declaration type="double" name="bi" />
            <scope startLine="992" endLine="994" />
          </scope>
        </method>
        <javadoc>
          <text>* Computes the inverse of the given matrix by splitting it into
 * 4 sub-matrices.</text>
          <param>m Matrix whose inverse must be computed.</param>
          <param>splitIndex Index that determines the "split" line and
 * column.
 * The element corresponding to this index will part of the
 * upper-left sub-matrix.</param>
          <return>the inverse of {@code m}.</return>
          <throws>NonSquareMatrixException if {@code m} is not square.</throws>
        </javadoc>
        <method type="RealMatrix" name="blockInverse" startLine="1011" endLine="1049">
          <declaration type="int" name="n" />
          <scope startLine="1013" endLine="1016" />
          <declaration type="int" name="splitIndex1" />
          <declaration type="RealMatrix" name="a" />
          <declaration type="RealMatrix" name="b" />
          <declaration type="RealMatrix" name="c" />
          <declaration type="RealMatrix" name="d" />
          <declaration type="SingularValueDecomposition" name="aDec" />
          <declaration type="RealMatrix" name="aInv" />
          <declaration type="SingularValueDecomposition" name="dDec" />
          <declaration type="RealMatrix" name="dInv" />
          <declaration type="RealMatrix" name="tmp1" />
          <declaration type="SingularValueDecomposition" name="tmp1Dec" />
          <declaration type="RealMatrix" name="result00" />
          <declaration type="RealMatrix" name="tmp2" />
          <declaration type="SingularValueDecomposition" name="tmp2Dec" />
          <declaration type="RealMatrix" name="result11" />
          <declaration type="RealMatrix" name="result01" />
          <declaration type="RealMatrix" name="result10" />
          <declaration type="RealMatrix" name="result" />
        </method>
      </class>
    </class>
  </class>
</source>
