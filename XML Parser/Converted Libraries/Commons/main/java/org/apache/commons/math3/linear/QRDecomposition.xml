<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="java.util.Arrays" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="QRDecomposition" startLine="26">
    <javadoc>
      <text>* Calculates the QR-decomposition of a matrix.
 * <p>The QR-decomposition of a matrix A consists of two matrices Q and R
 * that satisfy: A = QR, Q is orthogonal (Q<sup>T</sup>Q = I), and R is
 * upper triangular. If A is m&times;n, Q is m&times;m and R m&times;n.</p>
 * <p>This class compute the decomposition using Householder reflectors.</p>
 * <p>For efficiency purposes, the decomposition in packed form is transposed.
 * This allows inner loop to iterate inside rows, which is much more cache-efficient
 * in Java.</p>
 * <p>This class is based on the class with similar name from the
 * <a href="http://math.nist.gov/javanumerics/jama/">JAMA</a> library, with the
 * following changes:</p>
 * <ul>
 * <li>a {@link #getQT() getQT} method has been added,</li>
 * <li>the {@code solve} and {@code isFullRank} methods have been replaced
 * by a {@link #getSolver() getSolver} method and the equivalent methods
 * provided by the returned {@link DecompositionSolver}.</li>
 * </ul></text>
      <see><a href="http://mathworld.wolfram.com/QRDecomposition.html">MathWorld</a></see>
      <see><a href="http://en.wikipedia.org/wiki/QR_decomposition">Wikipedia</a></see>
      <version>$Id: QRDecomposition.java 1462423 2013-03-29 07:25:18Z luc $</version>
      <since>1.2 (changed to concrete class in 3.0)</since>
    </javadoc>
    <javadoc>
      <text>* A packed TRANSPOSED representation of the QR decomposition.
 * <p>The elements BELOW the diagonal are the elements of the UPPER triangular
 * matrix R, and the rows ABOVE the diagonal are the Householder reflector vectors
 * from which an explicit form of Q can be recomputed if desired.</p></text>
    </javadoc>
    <declaration type="double[][]" name="qrt" />
    <javadoc>
      <text>* The diagonal elements of R.</text>
    </javadoc>
    <declaration type="double[]" name="rDiag" />
    <javadoc>
      <text>* Cached value of Q.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedQ" />
    <javadoc>
      <text>* Cached value of QT.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedQT" />
    <javadoc>
      <text>* Cached value of R.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedR" />
    <javadoc>
      <text>* Cached value of H.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedH" />
    <javadoc>
      <text>* Singularity threshold.</text>
    </javadoc>
    <declaration type="double" name="threshold" />
    <javadoc>
      <text>* Calculates the QR-decomposition of the given matrix.
 * The singularity threshold defaults to zero.</text>
      <param>matrix The matrix to decompose.</param>
      <see>#QRDecomposition(RealMatrix,double)</see>
    </javadoc>
    <method type="constructor" name="QRDecomposition" startLine="80" endLine="82" />
    <javadoc>
      <text>* Calculates the QR-decomposition of the given matrix.</text>
      <param>matrix The matrix to decompose.</param>
      <param>threshold Singularity threshold.</param>
    </javadoc>
    <method type="constructor" name="QRDecomposition" startLine="91" endLine="105">
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
    </method>
    <javadoc>
      <text>* Decompose matrix.</text>
      <param>matrix transposed matrix</param>
      <since>3.2</since>
    </javadoc>
    <method type="void" name="decompose" startLine="111" endLine="115">
      <scope startLine="112" endLine="114" />
    </method>
    <javadoc>
      <text>* Perform Householder reflection for a minor A(minor, minor) of A.</text>
      <param>minor minor index</param>
      <param>matrix transposed matrix</param>
      <since>3.2</since>
    </javadoc>
    <method type="void" name="performHouseholderReflection" startLine="122" endLine="179">
      <declaration type="double[]" name="qrtMinor" />
      <declaration type="double" name="xNormSqr" />
      <scope startLine="134" endLine="137">
        <declaration type="double" name="c" />
      </scope>
      <declaration type="double" name="a" />
      <scope startLine="141" endLine="178">
        <scope startLine="165" endLine="177">
          <declaration type="double[]" name="qrtCol" />
          <declaration type="double" name="alpha" />
          <scope startLine="168" endLine="170" />
          <scope startLine="174" endLine="176" />
        </scope>
        <comment>Calculate the normalized reflection vector v and transform
 the first column. We know the norm of v beforehand: v = x-ae
 so |v|^2 = <x-ae,x-ae> = <x,x>-2a<x,e>+a^2<e,e> =
 a^2+a^2-2a<x,e> = 2a(a - <x,e>).
 Here <x, e> is now qr[minor][minor].
 v = x-ae is stored in the column at qr:</comment>
        <comment>now |v|^2 = -2a*(qr[minor][minor])</comment>
        <comment>Transform the rest of the columns of the minor:
 They will be transformed by the matrix H = I-2vv'|v|^2.
 If x is a column vector of the minor, then
 Hx = (I-2vv'|v|^2)x = x-2vv'x|v|^2 = x - 2<x,v>|v|^2 v.
 Therefore the transformation is easily calculated by
 subtracting the column vector (2<x,v>|v|^2)v from x.

 Let 2<x,v>|v|^2 = alpha. From above we have
 |v|^2 = -2a(qr[minor][minor]), so
 alpha = -<x,v>(aqr[minor][minor])</comment>
        <comment>Subtract the column vector alpha*v from x.</comment>
      </scope>
      <comment>Let x be the first column of the minor, and a^2 = |x|^2.
 x will be in the positions qr[minor][minor] through qr[m][minor].
 The first column of the transformed minor will be (a,0,0,..)'
 The sign of a is chosen to be opposite to the sign of the first
 component of x. Let's find a:</comment>
    </method>
    <javadoc>
      <text>* Returns the matrix R of the decomposition.
 * <p>R is an upper-triangular matrix</p></text>
      <return>the R matrix</return>
    </javadoc>
    <method type="RealMatrix" name="getR" startLine="187" endLine="207">
      <scope startLine="189" endLine="203">
        <declaration type="int" name="n" />
        <declaration type="int" name="m" />
        <declaration type="double[][]" name="ra" />
        <scope startLine="196" endLine="201">
          <scope startLine="198" endLine="200" />
        </scope>
        <comment>R is supposed to be m x n</comment>
        <comment>copy the diagonal from rDiag and the upper triangle of qr</comment>
      </scope>
      <comment>return the cached matrix</comment>
    </method>
    <javadoc>
      <text>* Returns the matrix Q of the decomposition.
 * <p>Q is an orthogonal matrix</p></text>
      <return>the Q matrix</return>
    </javadoc>
    <method type="RealMatrix" name="getQ" startLine="214" endLine="219">
      <scope startLine="215" endLine="217" />
    </method>
    <javadoc>
      <text>* Returns the transpose of the matrix Q of the decomposition.
 * <p>Q is an orthogonal matrix</p></text>
      <return>the transpose of the Q matrix, Q<sup>T</sup></return>
    </javadoc>
    <method type="RealMatrix" name="getQT" startLine="226" endLine="265">
      <scope startLine="227" endLine="261">
        <declaration type="int" name="n" />
        <declaration type="int" name="m" />
        <declaration type="double[][]" name="qta" />
        <scope startLine="239" endLine="241" />
        <scope startLine="243" endLine="259">
          <declaration type="double[]" name="qrtMinor" />
          <scope startLine="246" endLine="258">
            <scope startLine="247" endLine="257">
              <declaration type="double" name="alpha" />
              <scope startLine="249" endLine="251" />
              <scope startLine="254" endLine="256" />
            </scope>
          </scope>
        </scope>
        <comment>QT is supposed to be m x m</comment>
        <comment>Q = Q1 Q2 ... Q_m, so Q is formed by first constructing Q_m and then
 applying the Householder transformations Q_(m-1),Q_(m-2),...,Q1 in
 succession to the result</comment>
      </scope>
      <comment>return the cached matrix</comment>
    </method>
    <javadoc>
      <text>* Returns the Householder reflector vectors.
 * <p>H is a lower trapezoidal matrix whose columns represent
 * each successive Householder reflector vector. This matrix is used
 * to compute Q.</p></text>
      <return>a matrix containing the Householder reflector vectors</return>
    </javadoc>
    <method type="RealMatrix" name="getH" startLine="274" endLine="290">
      <scope startLine="275" endLine="286">
        <declaration type="int" name="n" />
        <declaration type="int" name="m" />
        <declaration type="double[][]" name="ha" />
        <scope startLine="280" endLine="284">
          <scope startLine="281" endLine="283" />
        </scope>
      </scope>
      <comment>return the cached matrix</comment>
    </method>
    <javadoc>
      <text>* Get a solver for finding the A &times; X = B solution in least square sense.</text>
      <return>a solver</return>
    </javadoc>
    <method type="DecompositionSolver" name="getSolver" startLine="296" endLine="298" />
    <class name="Solver" startLine="300">
      <implements name="DecompositionSolver" />
      <javadoc>
        <text>* Specialized solver.</text>
      </javadoc>
      <javadoc>
        <text>* A packed TRANSPOSED representation of the QR decomposition.
 * <p>The elements BELOW the diagonal are the elements of the UPPER triangular
 * matrix R, and the rows ABOVE the diagonal are the Householder reflector vectors
 * from which an explicit form of Q can be recomputed if desired.</p></text>
      </javadoc>
      <declaration type="double[][]" name="qrt" />
      <javadoc>
        <text>* The diagonal elements of R.</text>
      </javadoc>
      <declaration type="double[]" name="rDiag" />
      <javadoc>
        <text>* Singularity threshold.</text>
      </javadoc>
      <declaration type="double" name="threshold" />
      <javadoc>
        <text>* Build a solver from decomposed matrix.</text>
        <param>qrt Packed TRANSPOSED representation of the QR decomposition.</param>
        <param>rDiag Diagonal elements of R.</param>
        <param>threshold Singularity threshold.</param>
      </javadoc>
      <method type="constructor" name="Solver" startLine="323" endLine="327" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="boolean" name="isNonSingular" startLine="330" endLine="337">
        <scope startLine="331" endLine="335">
          <scope startLine="332" endLine="334" />
        </scope>
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="RealVector" name="solve" startLine="340" endLine="380">
        <declaration type="int" name="n" />
        <declaration type="int" name="m" />
        <scope startLine="343" endLine="345" />
        <scope startLine="346" endLine="348" />
        <declaration type="double[]" name="x" />
        <declaration type="double[]" name="y" />
        <scope startLine="354" endLine="366">
          <declaration type="double[]" name="qrtMinor" />
          <declaration type="double" name="dotProduct" />
          <scope startLine="358" endLine="360" />
          <scope startLine="363" endLine="365" />
        </scope>
        <scope startLine="369" endLine="377">
          <declaration type="double" name="yRow" />
          <declaration type="double[]" name="qrtRow" />
          <scope startLine="374" endLine="376" />
        </scope>
        <comment>apply Householder transforms to solve Q.y = b</comment>
        <comment>solve triangular system R.x = y</comment>
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="RealMatrix" name="solve" startLine="383" endLine="459">
        <declaration type="int" name="n" />
        <declaration type="int" name="m" />
        <scope startLine="386" endLine="388" />
        <scope startLine="389" endLine="391" />
        <declaration type="int" name="columns" />
        <declaration type="int" name="blockSize" />
        <declaration type="int" name="cBlocks" />
        <declaration type="double[][]" name="xBlocks" />
        <declaration type="double[][]" name="y" />
        <declaration type="double[]" name="alpha" />
        <scope startLine="400" endLine="456">
          <declaration type="int" name="kStart" />
          <declaration type="int" name="kEnd" />
          <declaration type="int" name="kWidth" />
          <scope startLine="409" endLine="432">
            <declaration type="double[]" name="qrtMinor" />
            <declaration type="double" name="factor" />
            <scope startLine="414" endLine="420">
              <declaration type="double" name="d" />
              <declaration type="double[]" name="yRow" />
              <scope startLine="417" endLine="419" />
            </scope>
            <scope startLine="421" endLine="423" />
            <scope startLine="425" endLine="431">
              <declaration type="double" name="d" />
              <declaration type="double[]" name="yRow" />
              <scope startLine="428" endLine="430" />
            </scope>
          </scope>
          <scope startLine="435" endLine="455">
            <declaration type="int" name="jBlock" />
            <declaration type="int" name="jStart" />
            <declaration type="double" name="factor" />
            <declaration type="double[]" name="yJ" />
            <declaration type="double[]" name="xBlock" />
            <declaration type="int" name="index" />
            <scope startLine="442" endLine="445" />
            <declaration type="double[]" name="qrtJ" />
            <scope startLine="448" endLine="454">
              <declaration type="double" name="rIJ" />
              <declaration type="double[]" name="yI" />
              <scope startLine="451" endLine="453" />
            </scope>
          </scope>
          <comment>get the right hand side vector</comment>
          <comment>apply Householder transforms to solve Q.y = b</comment>
          <comment>solve triangular system R.x = y</comment>
        </scope>
      </method>
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="RealMatrix" name="getInverse" startLine="462" endLine="464" />
    </class>
  </class>
</source>
