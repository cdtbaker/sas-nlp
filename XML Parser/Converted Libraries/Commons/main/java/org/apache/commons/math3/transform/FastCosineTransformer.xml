<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.transform">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.analysis.FunctionUtils" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.complex.Complex" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.ArithmeticUtils" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="FastCosineTransformer" startLine="29">
    <implements name="RealTransformer" />
    <implements name="Serializable" />
    <javadoc>
      <text>* Implements the Fast Cosine Transform for transformation of one-dimensional
 * real data sets. For reference, see James S. Walker, <em>Fast Fourier
 * Transforms</em>, chapter 3 (ISBN 0849371635).
 * <p>
 * There are several variants of the discrete cosine transform. The present
 * implementation corresponds to DCT-I, with various normalization conventions,
 * which are specified by the parameter {@link DctNormalization}.
 * <p>
 * DCT-I is equivalent to DFT of an <em>even extension</em> of the data series.
 * More precisely, if x<sub>0</sub>, &hellip;, x<sub>N-1</sub> is the data set
 * to be cosine transformed, the extended data set
 * x<sub>0</sub><sup>&#35;</sup>, &hellip;, x<sub>2N-3</sub><sup>&#35;</sup>
 * is defined as follows
 * <ul>
 * <li>x<sub>k</sub><sup>&#35;</sup> = x<sub>k</sub> if 0 &le; k &lt; N,</li>
 * <li>x<sub>k</sub><sup>&#35;</sup> = x<sub>2N-2-k</sub>
 * if N &le; k &lt; 2N - 2.</li>
 * </ul>
 * <p>
 * Then, the standard DCT-I y<sub>0</sub>, &hellip;, y<sub>N-1</sub> of the real
 * data set x<sub>0</sub>, &hellip;, x<sub>N-1</sub> is equal to <em>half</em>
 * of the N first elements of the DFT of the extended data set
 * x<sub>0</sub><sup>&#35;</sup>, &hellip;, x<sub>2N-3</sub><sup>&#35;</sup>
 * <br/>
 * y<sub>n</sub> = (1 / 2) &sum;<sub>k=0</sub><sup>2N-3</sup>
 * x<sub>k</sub><sup>&#35;</sup> exp[-2&pi;i nk / (2N - 2)]
 * &nbsp;&nbsp;&nbsp;&nbsp;k = 0, &hellip;, N-1.
 * <p>
 * The present implementation of the discrete cosine transform as a fast cosine
 * transform requires the length of the data set to be a power of two plus one
 * (N&nbsp;=&nbsp;2<sup>n</sup>&nbsp;+&nbsp;1). Besides, it implicitly assumes
 * that the sampled function is even.</text>
      <version>$Id: FastCosineTransformer.java 1385310 2012-09-16 16:32:10Z tn $</version>
      <since>1.2</since>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* The type of DCT to be performed.</text>
    </javadoc>
    <declaration type="DctNormalization" name="normalization" />
    <javadoc>
      <text>* Creates a new instance of this class, with various normalization
 * conventions.</text>
      <param>normalization the type of normalization to be applied to the
 * transformed data</param>
    </javadoc>
    <method type="constructor" name="FastCosineTransformer" startLine="81" endLine="83" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <throws>MathIllegalArgumentException if the length of the data array is
 * not a power of two plus one</throws>
    </javadoc>
    <method type="double[]" name="transform" startLine="92" endLine="108">
      <scope startLine="93" endLine="99">
        <scope startLine="94" endLine="97">
          <declaration type="double" name="s" />
        </scope>
      </scope>
      <declaration type="double" name="s2" />
      <declaration type="double" name="s1" />
      <scope startLine="102" endLine="104" />
      <scope startLine="104" endLine="106" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <throws>org.apache.commons.math3.exception.NonMonotonicSequenceExceptionif the lower bound is greater than, or equal to the upper bound</throws>
      <throws>org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif the number of sample points is negative</throws>
      <throws>MathIllegalArgumentException if the number of sample points is
 * not a power of two plus one</throws>
    </javadoc>
    <method type="double[]" name="transform" startLine="122" endLine="126">
      <declaration type="double[]" name="data" />
    </method>
    <javadoc>
      <text>* Perform the FCT algorithm (including inverse).</text>
      <param>f the real data array to be transformed</param>
      <return>the real transformed array</return>
      <throws>MathIllegalArgumentException if the length of the data array is
 * not a power of two plus one</throws>
    </javadoc>
    <method type="double[]" name="fct" startLine="137" endLine="181">
      <declaration type="double[]" name="transformed" />
      <declaration type="int" name="n" />
      <scope startLine="142" endLine="146" />
      <scope startLine="147" endLine="151">
        <comment>trivial case</comment>
      </scope>
      <declaration type="double[]" name="x" />
      <declaration type="double" name="t1" />
      <scope startLine="159" endLine="166">
        <declaration type="double" name="a" />
        <declaration type="double" name="b" />
        <declaration type="double" name="c" />
      </scope>
      <declaration type="FastFourierTransformer" name="transformer" />
      <declaration type="Complex[]" name="y" />
      <scope startLine="174" endLine="177" />
      <comment>construct a new array and perform FFT on it</comment>
      <comment>temporary variable for transformed[1]</comment>
      <comment>reconstruct the FCT result for the original array</comment>
    </method>
  </class>
</source>
