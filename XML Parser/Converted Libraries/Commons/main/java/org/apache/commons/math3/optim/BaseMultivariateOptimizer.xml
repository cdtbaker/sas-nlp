<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim">
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <class name="BaseMultivariateOptimizer" extends="BaseOptimizer<PAIR>" startLine="23">
    <javadoc>
      <text>* Base class for implementing optimizers for multivariate functions.
 * It contains the boiler-plate code for initial guess and bounds
 * specifications.
 * <em>It is not a "user" class.</em></text>
      <param><PAIR>
 *  Type of the point/value pair returned by the optimization
 * algorithm.</param>
      <version>$Id: BaseMultivariateOptimizer.java 1443444 2013-02-07 12:41:36Z erans $</version>
      <since>3.1</since>
    </javadoc>
    <javadoc>
      <text>* Initial guess.</text>
    </javadoc>
    <declaration type="double[]" name="start" />
    <javadoc>
      <text>* Lower bounds.</text>
    </javadoc>
    <declaration type="double[]" name="lowerBound" />
    <javadoc>
      <text>* Upper bounds.</text>
    </javadoc>
    <declaration type="double[]" name="upperBound" />
    <javadoc>
      <param>checker Convergence checker.</param>
    </javadoc>
    <method type="constructor" name="BaseMultivariateOptimizer" startLine="47" endLine="49" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <param>optData Optimization data. In addition to those documented in{@link BaseOptimizer#parseOptimizationData(OptimizationData[]) BaseOptimizer},
 * this method will register the following data:
 * <ul>
 * <li>{@link InitialGuess}</li>
 * <li>{@link SimpleBounds}</li>
 * </ul></param>
      <return>{@inheritDoc}</return>
    </javadoc>
    <method type="PAIR" name="optimize" startLine="64" endLine="67">
      <comment>Perform optimization.</comment>
    </method>
    <javadoc>
      <text>* Scans the list of (required and optional) optimization data that
 * characterize the problem.</text>
      <param>optData Optimization data. The following data will be looked for:
 * <ul>
 * <li>{@link InitialGuess}</li>
 * <li>{@link SimpleBounds}</li>
 * </ul></param>
    </javadoc>
    <method type="void" name="parseOptimizationData" startLine="80" endLine="101">
      <scope startLine="86" endLine="97">
        <scope startLine="87" endLine="90" />
        <scope startLine="91" endLine="96">
          <declaration type="SimpleBounds" name="bounds" />
        </scope>
      </scope>
      <comment>Allow base class to register its own data.</comment>
      <comment>The existing values (as set by the previous call) are reused if</comment>
      <comment>not provided in the argument list.</comment>
      <comment>Check input consistency.</comment>
    </method>
    <javadoc>
      <text>* Gets the initial guess.</text>
      <return>the initial guess, or {@code null} if not set.</return>
    </javadoc>
    <method type="double[]" name="getStartPoint" startLine="108" endLine="110" />
    <javadoc>
      <return>the lower bounds, or {@code null} if not set.</return>
    </javadoc>
    <method type="double[]" name="getLowerBound" startLine="114" endLine="116" />
    <javadoc>
      <return>the upper bounds, or {@code null} if not set.</return>
    </javadoc>
    <method type="double[]" name="getUpperBound" startLine="120" endLine="122" />
    <javadoc>
      <text>* Check parameters consistency.</text>
    </javadoc>
    <method type="void" name="checkParameters" startLine="127" endLine="155">
      <scope startLine="128" endLine="154">
        <declaration type="int" name="dim" />
        <scope startLine="130" endLine="141">
          <scope startLine="131" endLine="133" />
          <scope startLine="134" endLine="140">
            <declaration type="double" name="v" />
            <declaration type="double" name="lo" />
            <scope startLine="137" endLine="139" />
          </scope>
        </scope>
        <scope startLine="142" endLine="153">
          <scope startLine="143" endLine="145" />
          <scope startLine="146" endLine="152">
            <declaration type="double" name="v" />
            <declaration type="double" name="hi" />
            <scope startLine="149" endLine="151" />
          </scope>
        </scope>
      </scope>
    </method>
  </class>
</source>
