<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="org.apache.commons.math3.analysis.function.Sqrt" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <class name="JacobiPreconditioner" extends="RealLinearOperator" startLine="22">
    <javadoc>
      <text>* This class implements the standard Jacobi (diagonal) preconditioner. For a
 * matrix A<sub>ij</sub>, this preconditioner is
 * M = diag(1 / A<sub>11</sub>, 1 / A<sub>22</sub>, &hellip;).</text>
      <version>$Id: JacobiPreconditioner.java 1422195 2012-12-15 06:45:18Z psteitz $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* The diagonal coefficients of the preconditioner.</text>
    </javadoc>
    <declaration type="ArrayRealVector" name="diag" />
    <javadoc>
      <text>* Creates a new instance of this class.</text>
      <param>diag the diagonal coefficients of the linear operator to be
 * preconditioned</param>
      <param>deep {@code true} if a deep copy of the above array should be
 * performed</param>
    </javadoc>
    <method type="constructor" name="JacobiPreconditioner" startLine="43" endLine="45" />
    <javadoc>
      <text>* Creates a new instance of this class. This method extracts the diagonal
 * coefficients of the specified linear operator. If {@code a} does not
 * extend {@link AbstractRealMatrix}, then the coefficients of the
 * underlying matrix are not accessible, coefficient extraction is made by
 * matrix-vector products with the basis vectors (and might therefore take
 * some time). With matrices, direct entry access is carried out.</text>
      <param>a the linear operator for which the preconditioner should be built</param>
      <return>the diagonal preconditioner made of the inverse of the diagonal
 * coefficients of the specified linear operator</return>
      <throws>NonSquareOperatorException if {@code a} is not square</throws>
    </javadoc>
    <method type="JacobiPreconditioner" name="create" startLine="61" endLine="81">
      <declaration type="int" name="n" />
      <scope startLine="63" endLine="65" />
      <declaration type="double[]" name="diag" />
      <scope startLine="67" endLine="72">
        <declaration type="AbstractRealMatrix" name="m" />
        <scope startLine="69" endLine="71" />
      </scope>
      <scope startLine="72" endLine="79">
        <declaration type="ArrayRealVector" name="x" />
        <scope startLine="74" endLine="78" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getColumnDimension" startLine="85" endLine="87" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getRowDimension" startLine="91" endLine="93" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="RealVector" name="operate" startLine="97" endLine="102">
      <comment>Dimension check is carried out by ebeDivide</comment>
    </method>
    <javadoc>
      <text>* Returns the square root of {@code this} diagonal operator. More
 * precisely, this method returns
 * P = diag(1 / &radic;A<sub>11</sub>, 1 / &radic;A<sub>22</sub>, &hellip;).</text>
      <return>the square root of {@code this} preconditioner</return>
      <since>3.1</since>
    </javadoc>
    <method type="RealLinearOperator" name="sqrt" startLine="112" endLine="135">
      <declaration type="RealVector" name="sqrtDiag" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="RealVector" name="operate" startLine="117" endLine="121" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="int" name="getRowDimension" startLine="125" endLine="127" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="int" name="getColumnDimension" startLine="131" endLine="133" />
    </method>
  </class>
</source>
