<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="java.io.Serializable" />
  <import name="java.util.Arrays" />
  <import name="org.apache.commons.math3.Field" />
  <import name="org.apache.commons.math3.FieldElement" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.ZeroException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.MathArrays" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="ArrayFieldVector" startLine="35">
    <implements name="FieldVector<T>" />
    <implements name="Serializable" />
    <javadoc>
      <text>* This class implements the {@link FieldVector} interface with a {@link FieldElement} array.</text>
      <param><T>
 *  the type of the field elements</param>
      <version>$Id: ArrayFieldVector.java 1462423 2013-03-29 07:25:18Z luc $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Entries of the vector.</text>
    </javadoc>
    <declaration type="T[]" name="data" />
    <javadoc>
      <text>* Field to which the elements belong.</text>
    </javadoc>
    <declaration type="Field<T>" name="field" />
    <javadoc>
      <text>* Build a 0-length vector.
 * Zero-length vectors may be used to initialize construction of vectors
 * by data gathering. We start with zero-length and use either the {@link #ArrayFieldVector(ArrayFieldVector,ArrayFieldVector)} constructor
 * or one of the {@code append} methods ({@link #add(FieldVector)} or{@link #append(ArrayFieldVector)}) to gather data into this vector.</text>
      <param>field field to which the elements belong</param>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="61" endLine="63" />
    <javadoc>
      <text>* Construct a vector of zeroes.</text>
      <param>field Field to which the elements belong.</param>
      <param>size Size of the vector.</param>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="71" endLine="74" />
    <javadoc>
      <text>* Construct a vector with preset values.</text>
      <param>size Size of the vector.</param>
      <param>preset All entries will be set with this value.</param>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="82" endLine="85" />
    <javadoc>
      <text>* Construct a vector from an array, copying the input array.
 * This constructor needs a non-empty {@code d} array to retrieve
 * the field from its first element. This implies it cannot build
 * 0 length vectors. To build vectors from any size, one should
 * use the {@link #ArrayFieldVector(Field,FieldElement[])} constructor.</text>
      <param>d Array.</param>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
      <throws>ZeroException if {@code d} is empty.</throws>
      <see>#ArrayFieldVector(Field,FieldElement[])</see>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="100" endLine="108">
      <scope startLine="102" endLine="105" />
      <scope startLine="105" endLine="107" />
    </method>
    <javadoc>
      <text>* Construct a vector from an array, copying the input array.</text>
      <param>field Field to which the elements belong.</param>
      <param>d Array.</param>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
      <see>#ArrayFieldVector(FieldElement[])</see>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="119" endLine="123" />
    <javadoc>
      <text>* Create a new ArrayFieldVector using the input array as the underlying
 * data array.
 * If an array is built specially in order to be embedded in a
 * ArrayFieldVector and not used directly, the {@code copyArray} may be
 * set to {@code false}. This will prevent the copying and improve
 * performance as no new array will be built and no data will be copied.
 * This constructor needs a non-empty {@code d} array to retrieve
 * the field from its first element. This implies it cannot build
 * 0 length vectors. To build vectors from any size, one should
 * use the {@link #ArrayFieldVector(Field,FieldElement[],boolean)}constructor.</text>
      <param>d Data for the new vector.</param>
      <param>copyArray If {@code true}, the input array will be copied,
 * otherwise it will be referenced.</param>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
      <throws>ZeroException if {@code d} is empty.</throws>
      <see>#ArrayFieldVector(FieldElement[])</see>
      <see>#ArrayFieldVector(Field,FieldElement[],boolean)</see>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="147" endLine="154">
      <scope startLine="149" endLine="151" />
    </method>
    <javadoc>
      <text>* Create a new ArrayFieldVector using the input array as the underlying
 * data array.
 * If an array is built specially in order to be embedded in a
 * ArrayFieldVector and not used directly, the {@code copyArray} may be
 * set to {@code false}. This will prevent the copying and improve
 * performance as no new array will be built and no data will be copied.</text>
      <param>field Field to which the elements belong.</param>
      <param>d Data for the new vector.</param>
      <param>copyArray If {@code true}, the input array will be copied,
 * otherwise it will be referenced.</param>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
      <see>#ArrayFieldVector(FieldElement[],boolean)</see>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="172" endLine="176" />
    <javadoc>
      <text>* Construct a vector from part of a array.</text>
      <param>d Array.</param>
      <param>pos Position of the first entry.</param>
      <param>size Number of entries to copy.</param>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
      <throws>NumberIsTooLargeException if the size of {@code d} is less
 * than {@code pos + size}.</throws>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="189" endLine="197">
      <scope startLine="191" endLine="193" />
    </method>
    <javadoc>
      <text>* Construct a vector from part of a array.</text>
      <param>field Field to which the elements belong.</param>
      <param>d Array.</param>
      <param>pos Position of the first entry.</param>
      <param>size Number of entries to copy.</param>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
      <throws>NumberIsTooLargeException if the size of {@code d} is less
 * than {@code pos + size}.</throws>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="211" endLine="219">
      <scope startLine="213" endLine="215" />
    </method>
    <javadoc>
      <text>* Construct a vector from another vector, using a deep copy.</text>
      <param>v Vector to copy.</param>
      <throws>NullArgumentException if {@code v} is {@code null}.</throws>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="228" endLine="235">
      <scope startLine="232" endLine="234" />
    </method>
    <javadoc>
      <text>* Construct a vector from another vector, using a deep copy.</text>
      <param>v Vector to copy.</param>
      <throws>NullArgumentException if {@code v} is {@code null}.</throws>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="244" endLine="248" />
    <javadoc>
      <text>* Construct a vector from another vector.</text>
      <param>v Vector to copy.</param>
      <param>deep If {@code true} perform a deep copy, otherwise perform
 * a shallow copy</param>
      <throws>NullArgumentException if {@code v} is {@code null}.</throws>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="259" endLine="263" />
    <javadoc>
      <text>* Construct a vector by appending one vector to another vector.</text>
      <param>v1 First vector (will be put in front of the new vector).</param>
      <param>v2 Second vector (will be put at back of the new vector).</param>
      <throws>NullArgumentException if {@code v1} or {@code v2} is{@code null}.</throws>
      <deprecated>as of 3.2, replaced by {@link #ArrayFieldVector(FieldVector,FieldVector)}</deprecated>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="276" endLine="278" />
    <javadoc>
      <text>* Construct a vector by appending one vector to another vector.</text>
      <param>v1 First vector (will be put in front of the new vector).</param>
      <param>v2 Second vector (will be put at back of the new vector).</param>
      <throws>NullArgumentException if {@code v1} or {@code v2} is{@code null}.</throws>
      <since>3.2</since>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="290" endLine="301">
      <declaration type="T[]" name="v1Data" />
      <declaration type="T[]" name="v2Data" />
    </method>
    <javadoc>
      <text>* Construct a vector by appending one vector to another vector.</text>
      <param>v1 First vector (will be put in front of the new vector).</param>
      <param>v2 Second vector (will be put at back of the new vector).</param>
      <throws>NullArgumentException if {@code v1} or {@code v2} is{@code null}.</throws>
      <deprecated>as of 3.2, replaced by {@link #ArrayFieldVector(FieldVector,FieldElement[])}</deprecated>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="314" endLine="316" />
    <javadoc>
      <text>* Construct a vector by appending one vector to another vector.</text>
      <param>v1 First vector (will be put in front of the new vector).</param>
      <param>v2 Second vector (will be put at back of the new vector).</param>
      <throws>NullArgumentException if {@code v1} or {@code v2} is{@code null}.</throws>
      <since>3.2</since>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="328" endLine="337">
      <declaration type="T[]" name="v1Data" />
    </method>
    <javadoc>
      <text>* Construct a vector by appending one vector to another vector.</text>
      <param>v1 First vector (will be put in front of the new vector).</param>
      <param>v2 Second vector (will be put at back of the new vector).</param>
      <throws>NullArgumentException if {@code v1} or {@code v2} is{@code null}.</throws>
      <deprecated>as of 3.2, replaced by {@link #ArrayFieldVector(FieldElement[],FieldVector)}</deprecated>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="350" endLine="352" />
    <javadoc>
      <text>* Construct a vector by appending one vector to another vector.</text>
      <param>v1 First vector (will be put in front of the new vector).</param>
      <param>v2 Second vector (will be put at back of the new vector).</param>
      <throws>NullArgumentException if {@code v1} or {@code v2} is{@code null}.</throws>
      <since>3.2</since>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="364" endLine="373">
      <declaration type="T[]" name="v2Data" />
    </method>
    <javadoc>
      <text>* Construct a vector by appending one vector to another vector.
 * This constructor needs at least one non-empty array to retrieve
 * the field from its first element. This implies it cannot build
 * 0 length vectors. To build vectors from any size, one should
 * use the {@link #ArrayFieldVector(Field,FieldElement[],FieldElement[])}constructor.</text>
      <param>v1 First vector (will be put in front of the new vector).</param>
      <param>v2 Second vector (will be put at back of the new vector).</param>
      <throws>NullArgumentException if {@code v1} or {@code v2} is{@code null}.</throws>
      <throws>ZeroException if both arrays are empty.</throws>
      <see>#ArrayFieldVector(Field,FieldElement[],FieldElement[])</see>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="391" endLine="401">
      <scope startLine="394" endLine="396" />
    </method>
    <javadoc>
      <text>* Construct a vector by appending one vector to another vector.</text>
      <param>field Field to which the elements belong.</param>
      <param>v1 First vector (will be put in front of the new vector).</param>
      <param>v2 Second vector (will be put at back of the new vector).</param>
      <throws>NullArgumentException if {@code v1} or {@code v2} is{@code null}.</throws>
      <throws>ZeroException if both arrays are empty.</throws>
      <see>#ArrayFieldVector(FieldElement[],FieldElement[])</see>
    </javadoc>
    <method type="constructor" name="ArrayFieldVector" startLine="415" endLine="425">
      <scope startLine="418" endLine="420" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Field<T>" name="getField" startLine="428" endLine="430" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="copy" startLine="433" endLine="435" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="add" startLine="439" endLine="450">
      <scope startLine="440" endLine="442" />
      <scope startLine="442" endLine="449">
        <declaration type="T[]" name="out" />
        <scope startLine="445" endLine="447" />
      </scope>
    </method>
    <javadoc>
      <text>* Compute the sum of {@code this} and {@code v}.</text>
      <param>v vector to be added</param>
      <return>{@code this + v}</return>
      <throws>DimensionMismatchException if {@code v} is not the same size as{@code this}</throws>
    </javadoc>
    <method type="ArrayFieldVector<T>" name="add" startLine="460" endLine="467">
      <declaration type="T[]" name="out" />
      <scope startLine="463" endLine="465" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="subtract" startLine="471" endLine="482">
      <scope startLine="472" endLine="474" />
      <scope startLine="474" endLine="481">
        <declaration type="T[]" name="out" />
        <scope startLine="477" endLine="479" />
      </scope>
    </method>
    <javadoc>
      <text>* Compute {@code this} minus {@code v}.</text>
      <param>v vector to be subtracted</param>
      <return>{@code this - v}</return>
      <throws>DimensionMismatchException if {@code v} is not the same size as{@code this}</throws>
    </javadoc>
    <method type="ArrayFieldVector<T>" name="subtract" startLine="492" endLine="499">
      <declaration type="T[]" name="out" />
      <scope startLine="495" endLine="497" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapAdd" startLine="502" endLine="508">
      <declaration type="T[]" name="out" />
      <scope startLine="504" endLine="506" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapAddToSelf" startLine="511" endLine="516">
      <scope startLine="512" endLine="514" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapSubtract" startLine="519" endLine="525">
      <declaration type="T[]" name="out" />
      <scope startLine="521" endLine="523" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapSubtractToSelf" startLine="528" endLine="533">
      <scope startLine="529" endLine="531" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapMultiply" startLine="536" endLine="542">
      <declaration type="T[]" name="out" />
      <scope startLine="538" endLine="540" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapMultiplyToSelf" startLine="545" endLine="550">
      <scope startLine="546" endLine="548" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapDivide" startLine="554" endLine="561">
      <declaration type="T[]" name="out" />
      <scope startLine="557" endLine="559" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapDivideToSelf" startLine="565" endLine="571">
      <scope startLine="567" endLine="569" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapInv" startLine="574" endLine="585">
      <declaration type="T[]" name="out" />
      <declaration type="T" name="one" />
      <scope startLine="577" endLine="583">
        <scope startLine="578" endLine="580" />
        <scope startLine="580" endLine="582" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="mapInvToSelf" startLine="588" endLine="598">
      <declaration type="T" name="one" />
      <scope startLine="590" endLine="596">
        <scope startLine="591" endLine="593" />
        <scope startLine="593" endLine="595" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="ebeMultiply" startLine="602" endLine="613">
      <scope startLine="603" endLine="605" />
      <scope startLine="605" endLine="612">
        <declaration type="T[]" name="out" />
        <scope startLine="608" endLine="610" />
      </scope>
    </method>
    <javadoc>
      <text>* Element-by-element multiplication.</text>
      <param>v vector by which instance elements must be multiplied</param>
      <return>a vector containing {@code this[i] * v[i]} for all {@code i}</return>
      <throws>DimensionMismatchException if {@code v} is not the same size as{@code this}</throws>
    </javadoc>
    <method type="ArrayFieldVector<T>" name="ebeMultiply" startLine="623" endLine="630">
      <declaration type="T[]" name="out" />
      <scope startLine="626" endLine="628" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="ebeDivide" startLine="634" endLine="649">
      <scope startLine="635" endLine="637" />
      <scope startLine="637" endLine="648">
        <declaration type="T[]" name="out" />
        <scope startLine="640" endLine="646">
          <scope startLine="641" endLine="643" />
          <scope startLine="643" endLine="645" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Element-by-element division.</text>
      <param>v vector by which instance elements must be divided</param>
      <return>a vector containing {@code this[i] / v[i]} for all {@code i}</return>
      <throws>DimensionMismatchException if {@code v} is not the same size as{@code this}</throws>
      <throws>MathArithmeticException if one entry of {@code v} is zero.</throws>
    </javadoc>
    <method type="ArrayFieldVector<T>" name="ebeDivide" startLine="660" endLine="671">
      <declaration type="T[]" name="out" />
      <scope startLine="663" endLine="669">
        <scope startLine="664" endLine="666" />
        <scope startLine="666" endLine="668" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T[]" name="getData" startLine="674" endLine="676" />
    <javadoc>
      <text>* Returns a reference to the underlying data array.
 * <p>Does not make a fresh copy of the underlying data.</p></text>
      <return>array of entries</return>
    </javadoc>
    <method type="T[]" name="getDataRef" startLine="683" endLine="685" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="dotProduct" startLine="689" endLine="700">
      <scope startLine="690" endLine="692" />
      <scope startLine="692" endLine="699">
        <declaration type="T" name="dot" />
        <scope startLine="695" endLine="697" />
      </scope>
    </method>
    <javadoc>
      <text>* Compute the dot product.</text>
      <param>v vector with which dot product should be computed</param>
      <return>the scalar dot product of {@code this} and {@code v}</return>
      <throws>DimensionMismatchException if {@code v} is not the same size as{@code this}</throws>
    </javadoc>
    <method type="T" name="dotProduct" startLine="710" endLine="717">
      <declaration type="T" name="dot" />
      <scope startLine="713" endLine="715" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="projection" startLine="721" endLine="723" />
    <javadoc>
      <text>* Find the orthogonal projection of this vector onto another vector.</text>
      <param>v vector onto which {@code this} must be projected</param>
      <return>projection of {@code this} onto {@code v}</return>
      <throws>DimensionMismatchException if {@code v} is not the same size as{@code this}</throws>
      <throws>MathArithmeticException if {@code v} is the null vector.</throws>
    </javadoc>
    <method type="ArrayFieldVector<T>" name="projection" startLine="733" endLine="735" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldMatrix<T>" name="outerProduct" startLine="738" endLine="752">
      <scope startLine="739" endLine="741" />
      <scope startLine="741" endLine="751">
        <declaration type="int" name="m" />
        <declaration type="int" name="n" />
        <declaration type="FieldMatrix<T>" name="out" />
        <scope startLine="745" endLine="749">
          <scope startLine="746" endLine="748" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* Compute the outer product.</text>
      <param>v vector with which outer product should be computed</param>
      <return>the matrix outer product between instance and v</return>
    </javadoc>
    <method type="FieldMatrix<T>" name="outerProduct" startLine="759" endLine="769">
      <declaration type="int" name="m" />
      <declaration type="int" name="n" />
      <declaration type="FieldMatrix<T>" name="out" />
      <scope startLine="763" endLine="767">
        <scope startLine="764" endLine="766" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T" name="getEntry" startLine="772" endLine="774" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getDimension" startLine="777" endLine="779" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="append" startLine="782" endLine="788">
      <scope startLine="783" endLine="785" />
      <scope startLine="785" endLine="787" />
    </method>
    <javadoc>
      <text>* Construct a vector by appending a vector to this vector.</text>
      <param>v vector to append to this one.</param>
      <return>a new vector</return>
    </javadoc>
    <method type="ArrayFieldVector<T>" name="append" startLine="795" endLine="797" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="append" startLine="800" endLine="805">
      <declaration type="T[]" name="out" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="FieldVector<T>" name="getSubVector" startLine="809" endLine="821">
      <scope startLine="810" endLine="812" />
      <declaration type="ArrayFieldVector<T>" name="out" />
      <scope startLine="814" endLine="816" />
      <scope startLine="816" endLine="819" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setEntry" startLine="824" endLine="830">
      <scope startLine="825" endLine="827" />
      <scope startLine="827" endLine="829" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setSubVector" startLine="833" endLine="846">
      <scope startLine="834" endLine="842">
        <scope startLine="835" endLine="837" />
        <scope startLine="837" endLine="841">
          <scope startLine="838" endLine="840" />
        </scope>
      </scope>
      <scope startLine="842" endLine="845" />
    </method>
    <javadoc>
      <text>* Set a set of consecutive elements.</text>
      <param>index index of first element to be set.</param>
      <param>v vector containing the values to set.</param>
      <throws>OutOfRangeException if the index is invalid.</throws>
    </javadoc>
    <method type="void" name="set" startLine="855" endLine="862">
      <scope startLine="856" endLine="858" />
      <scope startLine="858" endLine="861" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="set" startLine="865" endLine="867" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="T[]" name="toArray" startLine="870" endLine="872" />
    <javadoc>
      <text>* Check if instance and specified vectors have the same dimension.</text>
      <param>v vector to compare instance with</param>
      <exception>DimensionMismatchException if the vectors do not
 * have the same dimensions</exception>
    </javadoc>
    <method type="void" name="checkVectorDimensions" startLine="881" endLine="883" />
    <javadoc>
      <text>* Check if instance dimension is equal to some expected value.</text>
      <param>n Expected dimension.</param>
      <throws>DimensionMismatchException if the dimension is not equal to the
 * size of {@code this} vector.</throws>
    </javadoc>
    <method type="void" name="checkVectorDimensions" startLine="893" endLine="897">
      <scope startLine="894" endLine="896" />
    </method>
    <javadoc>
      <text>* Test for the equality of two vectors.</text>
      <param>other Object to test for equality.</param>
      <return>{@code true} if two vector objects are equal, {@code false}otherwise.</return>
    </javadoc>
    <method type="boolean" name="equals" startLine="907" endLine="932">
      <scope startLine="908" endLine="910" />
      <scope startLine="911" endLine="913" />
      <scope startLine="915" endLine="928">
        <declaration type="FieldVector<T>" name="rhs" />
        <scope startLine="918" endLine="920" />
        <scope startLine="922" endLine="926">
          <scope startLine="923" endLine="925" />
        </scope>
        <comment>May fail, but we ignore ClassCastException</comment>
      </scope>
      <scope startLine="928" endLine="931">
        <comment>ignore exception</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Get a hashCode for the real vector.
 * <p>All NaN values have the same hash code.</p></text>
      <return>a hash code value for this object</return>
    </javadoc>
    <method type="int" name="hashCode" startLine="940" endLine="946">
      <declaration type="int" name="h" />
      <scope startLine="942" endLine="944" />
    </method>
    <javadoc>
      <text>* Check if an index is valid.</text>
      <param>index Index to check.</param>
      <exception>OutOfRangeException if the index is not valid.</exception>
    </javadoc>
    <method type="void" name="checkIndex" startLine="954" endLine="959">
      <scope startLine="955" endLine="958" />
    </method>
  </class>
</source>
