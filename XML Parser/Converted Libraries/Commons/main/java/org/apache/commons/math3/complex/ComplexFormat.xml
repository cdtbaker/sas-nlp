<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.complex">
  <import name="java.text.FieldPosition" />
  <import name="java.text.NumberFormat" />
  <import name="java.text.ParsePosition" />
  <import name="java.util.Locale" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.MathParseException" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.CompositeFormat" />
  <class name="ComplexFormat" startLine="32">
    <javadoc>
      <text>* Formats a Complex number in cartesian format "Re(c) + Im(c)i".  'i' can
 * be replaced with 'j' (or anything else), and the number format for both real
 * and imaginary parts can be configured.</text>
      <version>$Id: ComplexFormat.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* The default imaginary character.</text>
    </javadoc>
    <declaration type="String" name="DEFAULT_IMAGINARY_CHARACTER" />
    <javadoc>
      <text>* The notation used to signify the imaginary part of the complex number.</text>
    </javadoc>
    <declaration type="String" name="imaginaryCharacter" />
    <javadoc>
      <text>* The format used for the imaginary part.</text>
    </javadoc>
    <declaration type="NumberFormat" name="imaginaryFormat" />
    <javadoc>
      <text>* The format used for the real part.</text>
    </javadoc>
    <declaration type="NumberFormat" name="realFormat" />
    <javadoc>
      <text>* Create an instance with the default imaginary character, 'i', and the
 * default number format for both real and imaginary parts.</text>
    </javadoc>
    <method type="constructor" name="ComplexFormat" startLine="54" endLine="58" />
    <javadoc>
      <text>* Create an instance with a custom number format for both real and
 * imaginary parts.</text>
      <param>format the custom format for both real and imaginary parts.</param>
      <throws>NullArgumentException if {@code realFormat} is {@code null}.</throws>
    </javadoc>
    <method type="constructor" name="ComplexFormat" startLine="66" endLine="73">
      <scope startLine="67" endLine="69" />
    </method>
    <javadoc>
      <text>* Create an instance with a custom number format for the real part and a
 * custom number format for the imaginary part.</text>
      <param>realFormat the custom format for the real part.</param>
      <param>imaginaryFormat the custom format for the imaginary part.</param>
      <throws>NullArgumentException if {@code imaginaryFormat} is {@code null}.</throws>
      <throws>NullArgumentException if {@code realFormat} is {@code null}.</throws>
    </javadoc>
    <method type="constructor" name="ComplexFormat" startLine="84" endLine="95">
      <scope startLine="85" endLine="87" />
      <scope startLine="88" endLine="90" />
    </method>
    <javadoc>
      <text>* Create an instance with a custom imaginary character, and the default
 * number format for both real and imaginary parts.</text>
      <param>imaginaryCharacter The custom imaginary character.</param>
      <throws>NullArgumentException if {@code imaginaryCharacter} is{@code null}.</throws>
      <throws>NoDataException if {@code imaginaryCharacter} is an
 * empty string.</throws>
    </javadoc>
    <method type="constructor" name="ComplexFormat" startLine="107" endLine="109" />
    <javadoc>
      <text>* Create an instance with a custom imaginary character, and a custom number
 * format for both real and imaginary parts.</text>
      <param>imaginaryCharacter The custom imaginary character.</param>
      <param>format the custom format for both real and imaginary parts.</param>
      <throws>NullArgumentException if {@code imaginaryCharacter} is{@code null}.</throws>
      <throws>NoDataException if {@code imaginaryCharacter} is an
 * empty string.</throws>
      <throws>NullArgumentException if {@code format} is {@code null}.</throws>
    </javadoc>
    <method type="constructor" name="ComplexFormat" startLine="123" endLine="125" />
    <javadoc>
      <text>* Create an instance with a custom imaginary character, a custom number
 * format for the real part, and a custom number format for the imaginary
 * part.</text>
      <param>imaginaryCharacter The custom imaginary character.</param>
      <param>realFormat the custom format for the real part.</param>
      <param>imaginaryFormat the custom format for the imaginary part.</param>
      <throws>NullArgumentException if {@code imaginaryCharacter} is{@code null}.</throws>
      <throws>NoDataException if {@code imaginaryCharacter} is an
 * empty string.</throws>
      <throws>NullArgumentException if {@code imaginaryFormat} is {@code null}.</throws>
      <throws>NullArgumentException if {@code realFormat} is {@code null}.</throws>
    </javadoc>
    <method type="constructor" name="ComplexFormat" startLine="145" endLine="162">
      <scope startLine="146" endLine="148" />
      <scope startLine="149" endLine="151" />
      <scope startLine="152" endLine="154" />
      <scope startLine="155" endLine="157" />
    </method>
    <javadoc>
      <text>* Get the set of locales for which complex formats are available.
 * <p>This is the same set as the {@link NumberFormat} set.</p></text>
      <return>available complex format locales.</return>
    </javadoc>
    <method type="Locale[]" name="getAvailableLocales" startLine="169" endLine="171" />
    <javadoc>
      <text>* This method calls {@link #format(Object,StringBuffer,FieldPosition)}.</text>
      <param>c Complex object to format.</param>
      <return>A formatted number in the form "Re(c) + Im(c)i".</return>
    </javadoc>
    <method type="String" name="format" startLine="179" endLine="181" />
    <javadoc>
      <text>* This method calls {@link #format(Object,StringBuffer,FieldPosition)}.</text>
      <param>c Double object to format.</param>
      <return>A formatted number.</return>
    </javadoc>
    <method type="String" name="format" startLine="189" endLine="191" />
    <javadoc>
      <text>* Formats a {@link Complex} object to produce a string.</text>
      <param>complex the object to format.</param>
      <param>toAppendTo where the text is to be appended</param>
      <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
      <return>the value passed in as toAppendTo.</return>
    </javadoc>
    <method type="StringBuffer" name="format" startLine="203" endLine="227">
      <declaration type="double" name="re" />
      <declaration type="double" name="im" />
      <declaration type="StringBuffer" name="imAppendTo" />
      <scope startLine="214" endLine="219" />
      <scope startLine="219" endLine="224" />
      <comment>format real</comment>
      <comment>format sign and imaginary</comment>
    </method>
    <javadoc>
      <text>* Format the absolute value of the imaginary part.</text>
      <param>absIm Absolute value of the imaginary part of a complex number.</param>
      <param>toAppendTo where the text is to be appended.</param>
      <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field.</param>
      <return>the value passed in as toAppendTo.</return>
    </javadoc>
    <method type="StringBuffer" name="formatImaginary" startLine="240" endLine="251">
      <scope startLine="245" endLine="248">
        <comment>Remove the character "1" if it is the only one.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Formats a object to produce a string.  {@code obj} must be either a{@link Complex} object or a {@link Number} object.  Any other type of
 * object will result in an {@link IllegalArgumentException} being thrown.</text>
      <param>obj the object to format.</param>
      <param>toAppendTo where the text is to be appended</param>
      <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
      <return>the value passed in as toAppendTo.</return>
      <see>java.text.Format#format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)</see>
      <throws>MathIllegalArgumentException is {@code obj} is not a valid type.</throws>
    </javadoc>
    <method type="StringBuffer" name="format" startLine="268" endLine="283">
      <declaration type="StringBuffer" name="ret" />
      <scope startLine="272" endLine="274" />
      <scope startLine="274" endLine="277" />
      <scope startLine="277" endLine="280" />
    </method>
    <javadoc>
      <text>* Access the imaginaryCharacter.</text>
      <return>the imaginaryCharacter.</return>
    </javadoc>
    <method type="String" name="getImaginaryCharacter" startLine="289" endLine="291" />
    <javadoc>
      <text>* Access the imaginaryFormat.</text>
      <return>the imaginaryFormat.</return>
    </javadoc>
    <method type="NumberFormat" name="getImaginaryFormat" startLine="297" endLine="299" />
    <javadoc>
      <text>* Returns the default complex format for the current locale.</text>
      <return>the default complex format.</return>
    </javadoc>
    <method type="ComplexFormat" name="getInstance" startLine="305" endLine="307" />
    <javadoc>
      <text>* Returns the default complex format for the given locale.</text>
      <param>locale the specific locale used by the format.</param>
      <return>the complex format specific to the given locale.</return>
    </javadoc>
    <method type="ComplexFormat" name="getInstance" startLine="314" endLine="317">
      <declaration type="NumberFormat" name="f" />
    </method>
    <javadoc>
      <text>* Returns the default complex format for the given locale.</text>
      <param>locale the specific locale used by the format.</param>
      <param>imaginaryCharacter Imaginary character.</param>
      <return>the complex format specific to the given locale.</return>
      <throws>NullArgumentException if {@code imaginaryCharacter} is{@code null}.</throws>
      <throws>NoDataException if {@code imaginaryCharacter} is an
 * empty string.</throws>
    </javadoc>
    <method type="ComplexFormat" name="getInstance" startLine="330" endLine="333">
      <declaration type="NumberFormat" name="f" />
    </method>
    <javadoc>
      <text>* Access the realFormat.</text>
      <return>the realFormat.</return>
    </javadoc>
    <method type="NumberFormat" name="getRealFormat" startLine="339" endLine="341" />
    <javadoc>
      <text>* Parses a string to produce a {@link Complex} object.</text>
      <param>source the string to parse.</param>
      <return>the parsed {@link Complex} object.</return>
      <throws>MathParseException if the beginning of the specified string
 * cannot be parsed.</throws>
    </javadoc>
    <method type="Complex" name="parse" startLine="351" endLine="360">
      <declaration type="ParsePosition" name="parsePosition" />
      <declaration type="Complex" name="result" />
      <scope startLine="354" endLine="358" />
    </method>
    <javadoc>
      <text>* Parses a string to produce a {@link Complex} object.</text>
      <param>source the string to parse</param>
      <param>pos input/ouput parsing parameter.</param>
      <return>the parsed {@link Complex} object.</return>
    </javadoc>
    <method type="Complex" name="parse" startLine="369" endLine="427">
      <declaration type="int" name="initialIndex" />
      <declaration type="Number" name="re" />
      <scope startLine="377" endLine="382">
        <comment>invalid real number</comment>
        <comment>set index back to initial, error index should already be set</comment>
      </scope>
      <declaration type="int" name="startIndex" />
      <declaration type="char" name="c" />
      <declaration type="int" name="sign" />
      <declaration type="Number" name="im" />
      <scope startLine="413" endLine="418">
        <comment>invalid imaginary number</comment>
        <comment>set index back to initial, error index should already be set</comment>
      </scope>
      <scope startLine="421" endLine="423" />
      <comment>parse whitespace</comment>
      <comment>parse real</comment>
      <comment>parse sign</comment>
      <comment>no sign</comment>
      <comment>return real only complex number</comment>
      <comment>invalid sign</comment>
      <comment>set index back to initial, error index should be the last</comment>
      <comment>character examined.</comment>
      <comment>parse whitespace</comment>
      <comment>parse imaginary</comment>
      <comment>parse imaginary character</comment>
    </method>
  </class>
</source>
