<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937c" />
  <class name="ZipfDistribution" extends="AbstractIntegerDistribution" startLine="26">
    <javadoc>
      <text>* Implementation of the Zipf distribution.</text>
      <see><a href="http://mathworld.wolfram.com/ZipfDistribution.html">Zipf distribution (MathWorld)</a></see>
      <version>$Id: ZipfDistribution.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Number of elements.</text>
    </javadoc>
    <declaration type="int" name="numberOfElements" />
    <javadoc>
      <text>* Exponent parameter of the distribution.</text>
    </javadoc>
    <declaration type="double" name="exponent" />
    <javadoc>
      <text>* Cached numerical mean</text>
    </javadoc>
    <declaration type="double" name="numericalMean" />
    <javadoc>
      <text>* Whether or not the numerical mean has been calculated</text>
    </javadoc>
    <declaration type="boolean" name="numericalMeanIsCalculated" />
    <javadoc>
      <text>* Cached numerical variance</text>
    </javadoc>
    <declaration type="double" name="numericalVariance" />
    <javadoc>
      <text>* Whether or not the numerical variance has been calculated</text>
    </javadoc>
    <declaration type="boolean" name="numericalVarianceIsCalculated" />
    <javadoc>
      <text>* Create a new Zipf distribution with the given number of elements and
 * exponent.</text>
      <param>numberOfElements Number of elements.</param>
      <param>exponent Exponent.</param>
      <exception>NotStrictlyPositiveException if {@code numberOfElements <= 0}or {@code exponent <= 0}.</exception>
    </javadoc>
    <method type="constructor" name="ZipfDistribution" startLine="57" endLine="59" />
    <javadoc>
      <text>* Creates a Zipf distribution.</text>
      <param>rng Random number generator.</param>
      <param>numberOfElements Number of elements.</param>
      <param>exponent Exponent.</param>
      <exception>NotStrictlyPositiveException if {@code numberOfElements <= 0}or {@code exponent <= 0}.</exception>
      <since>3.1</since>
    </javadoc>
    <method type="constructor" name="ZipfDistribution" startLine="74" endLine="88">
      <scope startLine="77" endLine="80" />
      <scope startLine="81" endLine="84" />
    </method>
    <javadoc>
      <text>* Get the number of elements (e.g. corpus size) for the distribution.</text>
      <return>the number of elements</return>
    </javadoc>
    <method type="int" name="getNumberOfElements" startLine="95" endLine="97" />
    <javadoc>
      <text>* Get the exponent characterizing the distribution.</text>
      <return>the exponent</return>
    </javadoc>
    <method type="double" name="getExponent" startLine="104" endLine="106" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="probability" startLine="109" endLine="115">
      <scope startLine="110" endLine="112" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="118" endLine="126">
      <scope startLine="119" endLine="121" />
      <scope startLine="121" endLine="123" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}For number of elements {@code N} and exponent {@code s}, the mean is{@code Hs1 / Hs}, where
 * <ul>
 * <li>{@code Hs1 = generalizedHarmonic(N, s - 1)},</li>
 * <li>{@code Hs = generalizedHarmonic(N, s)}.</li>
 * </ul></text>
    </javadoc>
    <method type="double" name="getNumericalMean" startLine="138" endLine="144">
      <scope startLine="139" endLine="142" />
    </method>
    <javadoc>
      <text>* Used by {@link #getNumericalMean()}.</text>
      <return>the mean of this distribution</return>
    </javadoc>
    <method type="double" name="calculateNumericalMean" startLine="151" endLine="159">
      <declaration type="int" name="N" />
      <declaration type="double" name="s" />
      <declaration type="double" name="Hs1" />
      <declaration type="double" name="Hs" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}For number of elements {@code N} and exponent {@code s}, the mean is{@code (Hs2 / Hs) - (Hs1^2 / Hs^2)}, where
 * <ul>
 * <li>{@code Hs2 = generalizedHarmonic(N, s - 2)},</li>
 * <li>{@code Hs1 = generalizedHarmonic(N, s - 1)},</li>
 * <li>{@code Hs = generalizedHarmonic(N, s)}.</li>
 * </ul></text>
    </javadoc>
    <method type="double" name="getNumericalVariance" startLine="172" endLine="178">
      <scope startLine="173" endLine="176" />
    </method>
    <javadoc>
      <text>* Used by {@link #getNumericalVariance()}.</text>
      <return>the variance of this distribution</return>
    </javadoc>
    <method type="double" name="calculateNumericalVariance" startLine="185" endLine="194">
      <declaration type="int" name="N" />
      <declaration type="double" name="s" />
      <declaration type="double" name="Hs2" />
      <declaration type="double" name="Hs1" />
      <declaration type="double" name="Hs" />
    </method>
    <javadoc>
      <text>* Calculates the Nth generalized harmonic number. See
 * <a href="http://mathworld.wolfram.com/HarmonicSeries.html">Harmonic
 * Series</a>.</text>
      <param>n Term in the series to calculate (must be larger than 1)</param>
      <param>m Exponent (special case {@code m = 1} is the harmonic series).</param>
      <return>the n<sup>th</sup> generalized harmonic number.</return>
    </javadoc>
    <method type="double" name="generalizedHarmonic" startLine="205" endLine="211">
      <declaration type="double" name="value" />
      <scope startLine="207" endLine="209" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}The lower bound of the support is always 1 no matter the parameters.</text>
      <return>lower bound of the support (always 1)</return>
    </javadoc>
    <method type="int" name="getSupportLowerBound" startLine="220" endLine="222" />
    <javadoc>
      <text>* {@inheritDoc}The upper bound of the support is the number of elements.</text>
      <return>upper bound of the support</return>
    </javadoc>
    <method type="int" name="getSupportUpperBound" startLine="231" endLine="233" />
    <javadoc>
      <text>* {@inheritDoc}The support of this distribution is connected.</text>
      <return>{@code true}</return>
    </javadoc>
    <method type="boolean" name="isSupportConnected" startLine="242" endLine="244" />
  </class>
</source>
