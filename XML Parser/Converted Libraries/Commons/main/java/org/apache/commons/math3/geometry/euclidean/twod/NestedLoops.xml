<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.geometry.euclidean.twod">
  <import name="java.util.ArrayList" />
  <import name="java.util.Iterator" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet" />
  <import name="org.apache.commons.math3.geometry.partitioning.Region" />
  <import name="org.apache.commons.math3.geometry.partitioning.RegionFactory" />
  <import name="org.apache.commons.math3.geometry.partitioning.SubHyperplane" />
  <class name="NestedLoops" startLine="29">
    <javadoc>
      <text>* This class represent a tree of nested 2D boundary loops.
 * <p>This class is used for piecewise polygons construction.
 * Polygons are built using the outline edges as
 * representative of boundaries, the orientation of these lines are
 * meaningful. However, we want to allow the user to specify its
 * outline loops without having to take care of this orientation. This
 * class is devoted to correct mis-oriented loops.<p>
 * <p>Orientation is computed assuming the piecewise polygon is finite,
 * i.e. the outermost loops have their exterior side facing points at
 * infinity, and hence are oriented counter-clockwise. The orientation of
 * internal loops is computed as the reverse of the orientation of
 * their immediate surrounding loop.</p></text>
      <version>$Id: NestedLoops.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Boundary loop.</text>
    </javadoc>
    <declaration type="Vector2D[]" name="loop" />
    <javadoc>
      <text>* Surrounded loops.</text>
    </javadoc>
    <declaration type="ArrayList<NestedLoops>" name="surrounded" />
    <javadoc>
      <text>* Polygon enclosing a finite region.</text>
    </javadoc>
    <declaration type="Region<Euclidean2D>" name="polygon" />
    <javadoc>
      <text>* Indicator for original loop orientation.</text>
    </javadoc>
    <declaration type="boolean" name="originalIsClockwise" />
    <javadoc>
      <text>* Simple Constructor.
 * <p>Build an empty tree of nested loops. This instance will become
 * the root node of a complete tree, it is not associated with any
 * loop by itself, the outermost loops are in the root tree child
 * nodes.</p></text>
    </javadoc>
    <method type="constructor" name="NestedLoops" startLine="67" endLine="69" />
    <javadoc>
      <text>* Constructor.
 * <p>Build a tree node with neither parent nor children</p></text>
      <param>loop boundary loop (will be reversed in place if needed)</param>
      <exception>MathIllegalArgumentException if an outline has an open boundary loop</exception>
    </javadoc>
    <method type="constructor" name="NestedLoops" startLine="76" endLine="106">
      <scope startLine="78" endLine="80" />
      <declaration type="ArrayList<SubHyperplane<Euclidean2D>>" name="edges" />
      <declaration type="Vector2D" name="current" />
      <scope startLine="88" endLine="95">
        <declaration type="Vector2D" name="previous" />
        <declaration type="Line" name="line" />
        <declaration type="IntervalsSet" name="region" />
      </scope>
      <scope startLine="99" endLine="102" />
      <scope startLine="102" endLine="104" />
      <comment>build the polygon defined by the loop</comment>
      <comment>ensure the polygon encloses a finite region of the plane</comment>
    </method>
    <javadoc>
      <text>* Add a loop in a tree.</text>
      <param>bLoop boundary loop (will be reversed in place if needed)</param>
      <exception>MathIllegalArgumentException if an outline has crossing
 * boundary loops or open boundary loops</exception>
    </javadoc>
    <method type="void" name="add" startLine="113" endLine="115" />
    <javadoc>
      <text>* Add a loop in a tree.</text>
      <param>node boundary loop (will be reversed in place if needed)</param>
      <exception>MathIllegalArgumentException if an outline has boundary
 * loops that cross each other</exception>
    </javadoc>
    <method type="void" name="add" startLine="122" endLine="151">
      <scope startLine="125" endLine="130">
        <scope startLine="126" endLine="129" />
      </scope>
      <scope startLine="133" endLine="139">
        <declaration type="NestedLoops" name="child" />
        <scope startLine="135" endLine="138" />
      </scope>
      <declaration type="RegionFactory<Euclidean2D>" name="factory" />
      <scope startLine="143" endLine="147">
        <scope startLine="144" endLine="146" />
      </scope>
      <comment>check if we can go deeper in the tree</comment>
      <comment>check if we can absorb some of the instance children</comment>
      <comment>we should be separate from the remaining children</comment>
    </method>
    <javadoc>
      <text>* Correct the orientation of the loops contained in the tree.
 * <p>This is this method that really inverts the loops that where
 * provided through the {@link #add(Vector2D[]) add} method if
 * they are mis-oriented</p></text>
    </javadoc>
    <method type="void" name="correctOrientation" startLine="158" endLine="162">
      <scope startLine="159" endLine="161" />
    </method>
    <javadoc>
      <text>* Set the loop orientation.</text>
      <param>clockwise if true, the loop should be set to clockwise
 * orientation</param>
    </javadoc>
    <method type="void" name="setClockWise" startLine="168" endLine="186">
      <scope startLine="170" endLine="179">
        <declaration type="int" name="min" />
        <declaration type="int" name="max" />
        <scope startLine="174" endLine="178">
          <declaration type="Vector2D" name="tmp" />
        </scope>
        <comment>we need to inverse the original loop</comment>
      </scope>
      <scope startLine="182" endLine="184" />
      <comment>go deeper in the tree</comment>
    </method>
  </class>
</source>
