<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat.descriptive.moment">
  <import name="java.io.Serializable" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="StandardDeviation" extends="AbstractStorelessUnivariateStatistic" startLine="27">
    <implements name="Serializable" />
    <javadoc>
      <text>* Computes the sample standard deviation.  The standard deviation
 * is the positive square root of the variance.  This implementation wraps a{@link Variance} instance.  The <code>isBiasCorrected</code> property of the
 * wrapped Variance instance is exposed, so that this class can be used to
 * compute both the "sample standard deviation" (the square root of the
 * bias-corrected "sample variance") or the "population standard deviation"
 * (the square root of the non-bias-corrected "population variance"). See{@link Variance} for more information.
 * <p>
 * <strong>Note that this implementation is not synchronized.</strong> If
 * multiple threads access an instance of this class concurrently, and at least
 * one of the threads invokes the <code>increment()</code> or
 * <code>clear()</code> method, it must be synchronized externally.</p></text>
      <version>$Id: StandardDeviation.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Wrapped Variance instance</text>
    </javadoc>
    <declaration type="Variance" name="variance" />
    <javadoc>
      <text>* Constructs a StandardDeviation.  Sets the underlying {@link Variance}instance's <code>isBiasCorrected</code> property to true.</text>
    </javadoc>
    <method type="constructor" name="StandardDeviation" startLine="57" endLine="59" />
    <javadoc>
      <text>* Constructs a StandardDeviation from an external second moment.</text>
      <param>m2 the external moment</param>
    </javadoc>
    <method type="constructor" name="StandardDeviation" startLine="66" endLine="68" />
    <javadoc>
      <text>* Copy constructor, creates a new {@code StandardDeviation} identical
 * to the {@code original}</text>
      <param>original the {@code StandardDeviation} instance to copy</param>
      <throws>NullArgumentException if original is null</throws>
    </javadoc>
    <method type="constructor" name="StandardDeviation" startLine="77" endLine="79" />
    <javadoc>
      <text>* Contructs a StandardDeviation with the specified value for the
 * <code>isBiasCorrected</code> property.  If this property is set to
 * <code>true</code>, the {@link Variance} used in computing results will
 * use the bias-corrected, or "sample" formula.  See {@link Variance} for
 * details.</text>
      <param>isBiasCorrected  whether or not the variance computation will use
 * the bias-corrected formula</param>
    </javadoc>
    <method type="constructor" name="StandardDeviation" startLine="91" endLine="93" />
    <javadoc>
      <text>* Contructs a StandardDeviation with the specified value for the
 * <code>isBiasCorrected</code> property and the supplied external moment.
 * If <code>isBiasCorrected</code> is set to <code>true</code>, the{@link Variance} used in computing results will use the bias-corrected,
 * or "sample" formula.  See {@link Variance} for details.</text>
      <param>isBiasCorrected  whether or not the variance computation will use
 * the bias-corrected formula</param>
      <param>m2 the external moment</param>
    </javadoc>
    <method type="constructor" name="StandardDeviation" startLine="106" endLine="108" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="increment" startLine="114" endLine="116" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="long" name="getN" startLine="121" endLine="123" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getResult" startLine="129" endLine="131" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="clear" startLine="137" endLine="139" />
    <javadoc>
      <text>* Returns the Standard Deviation of the entries in the input array, or
 * <code>Double.NaN</code> if the array is empty.
 * <p>
 * Returns 0 for a single-value (i.e. length = 1) sample.</p>
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if the array is null.</p>
 * <p>
 * Does not change the internal state of the statistic.</p></text>
      <param>values the input array</param>
      <return>the standard deviation of the values or Double.NaN if length = 0</return>
      <throws>MathIllegalArgumentException if the array is null</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="156" endLine="158" />
    <javadoc>
      <text>* Returns the Standard Deviation of the entries in the specified portion of
 * the input array, or <code>Double.NaN</code> if the designated subarray
 * is empty.
 * <p>
 * Returns 0 for a single-value (i.e. length = 1) sample. </p>
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if the array is null.</p>
 * <p>
 * Does not change the internal state of the statistic.</p></text>
      <param>values the input array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the standard deviation of the values or Double.NaN if length = 0</return>
      <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="180" endLine="182" />
    <javadoc>
      <text>* Returns the Standard Deviation of the entries in the specified portion of
 * the input array, using the precomputed mean value.  Returns
 * <code>Double.NaN</code> if the designated subarray is empty.
 * <p>
 * Returns 0 for a single-value (i.e. length = 1) sample.</p>
 * <p>
 * The formula used assumes that the supplied mean value is the arithmetic
 * mean of the sample data, not a known population parameter.  This method
 * is supplied only to save computation when the mean has already been
 * computed.</p>
 * <p>
 * Throws <code>IllegalArgumentException</code> if the array is null.</p>
 * <p>
 * Does not change the internal state of the statistic.</p></text>
      <param>values the input array</param>
      <param>mean the precomputed mean value</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the standard deviation of the values or Double.NaN if length = 0</return>
      <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="209" endLine="211" />
    <javadoc>
      <text>* Returns the Standard Deviation of the entries in the input array, using
 * the precomputed mean value.  Returns
 * <code>Double.NaN</code> if the designated subarray is empty.
 * <p>
 * Returns 0 for a single-value (i.e. length = 1) sample.</p>
 * <p>
 * The formula used assumes that the supplied mean value is the arithmetic
 * mean of the sample data, not a known population parameter.  This method
 * is supplied only to save computation when the mean has already been
 * computed.</p>
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if the array is null.</p>
 * <p>
 * Does not change the internal state of the statistic.</p></text>
      <param>values the input array</param>
      <param>mean the precomputed mean value</param>
      <return>the standard deviation of the values or Double.NaN if length = 0</return>
      <throws>MathIllegalArgumentException if the array is null</throws>
    </javadoc>
    <method type="double" name="evaluate" startLine="235" endLine="237" />
    <javadoc>
      <return>Returns the isBiasCorrected.</return>
    </javadoc>
    <method type="boolean" name="isBiasCorrected" startLine="242" endLine="244" />
    <javadoc>
      <param>isBiasCorrected The isBiasCorrected to set.</param>
    </javadoc>
    <method type="void" name="setBiasCorrected" startLine="249" endLine="251" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="StandardDeviation" name="copy" startLine="257" endLine="262">
      <declaration type="StandardDeviation" name="result" />
      <comment>No try-catch or advertised exception because args are guaranteed non-null</comment>
    </method>
    <javadoc>
      <text>* Copies source to dest.
 * <p>Neither source nor dest can be null.</p></text>
      <param>source StandardDeviation to copy</param>
      <param>dest StandardDeviation to copy to</param>
      <throws>NullArgumentException if either source or dest is null</throws>
    </javadoc>
    <method type="void" name="copy" startLine="274" endLine="279" />
  </class>
</source>
