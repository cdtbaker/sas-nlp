<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="RRQRDecomposition" extends="QRDecomposition" startLine="23">
    <javadoc>
      <text>* Calculates the rank-revealing QR-decomposition of a matrix, with column pivoting.
 * <p>The rank-revealing QR-decomposition of a matrix A consists of three matrices Q,
 * R and P such that AP=QR.  Q is orthogonal (Q<sup>T</sup>Q = I), and R is upper triangular.
 * If A is m&times;n, Q is m&times;m and R is m&times;n and P is n&times;n.</p>
 * <p>QR decomposition with column pivoting produces a rank-revealing QR
 * decomposition and the {@link #getRank(double)} method may be used to return the rank of the
 * input matrix A.</p>
 * <p>This class compute the decomposition using Householder reflectors.</p>
 * <p>For efficiency purposes, the decomposition in packed form is transposed.
 * This allows inner loop to iterate inside rows, which is much more cache-efficient
 * in Java.</p>
 * <p>This class is based on the class with similar name from the
 * <a href="http://math.nist.gov/javanumerics/jama/">JAMA</a> library, with the
 * following changes:</p>
 * <ul>
 * <li>a {@link #getQT() getQT} method has been added,</li>
 * <li>the {@code solve} and {@code isFullRank} methods have been replaced
 * by a {@link #getSolver() getSolver} method and the equivalent methods
 * provided by the returned {@link DecompositionSolver}.</li>
 * </ul></text>
      <see><a href="http://mathworld.wolfram.com/QRDecomposition.html">MathWorld</a></see>
      <see><a href="http://en.wikipedia.org/wiki/QR_decomposition">Wikipedia</a></see>
      <version>$Id: RRQRDecomposition.java 1456956 2013-03-15 13:54:20Z luc $</version>
      <since>3.2</since>
    </javadoc>
    <javadoc>
      <text>* An array to record the column pivoting for later creation of P.</text>
    </javadoc>
    <declaration type="int[]" name="p" />
    <javadoc>
      <text>* Cached value of P.</text>
    </javadoc>
    <declaration type="RealMatrix" name="cachedP" />
    <javadoc>
      <text>* Calculates the QR-decomposition of the given matrix.
 * The singularity threshold defaults to zero.</text>
      <param>matrix The matrix to decompose.</param>
      <see>#RRQRDecomposition(RealMatrix,double)</see>
    </javadoc>
    <method type="constructor" name="RRQRDecomposition" startLine="68" endLine="70" />
    <javadoc>
      <text>* Calculates the QR-decomposition of the given matrix.</text>
      <param>matrix The matrix to decompose.</param>
      <param>threshold Singularity threshold.</param>
      <see>#RRQRDecomposition(RealMatrix)</see>
    </javadoc>
    <method type="constructor" name="RRQRDecomposition" startLine="79" endLine="81" />
    <javadoc>
      <text>* Decompose matrix.</text>
      <param>qrt transposed matrix</param>
    </javadoc>
    <method type="void" name="decompose" startLine="86" endLine="92">
      <scope startLine="88" endLine="90" />
    </method>
    <javadoc>
      <text>* Perform Householder reflection for a minor A(minor, minor) of A.</text>
      <param>minor minor index</param>
      <param>qrt transposed matrix</param>
    </javadoc>
    <method type="void" name="performHouseholderReflection" startLine="98" endLine="125">
      <declaration type="double" name="l2NormSquaredMax" />
      <declaration type="int" name="l2NormSquaredMaxIndex" />
      <scope startLine="103" endLine="112">
        <declaration type="double" name="l2NormSquared" />
        <scope startLine="105" endLine="107" />
        <scope startLine="108" endLine="111" />
      </scope>
      <scope startLine="114" endLine="121">
        <declaration type="double[]" name="tmp1" />
        <declaration type="int" name="tmp2" />
      </scope>
      <comment>Find the unreduced column with the greatest L2-Norm</comment>
      <comment>swap the current column with that with the greated L2-Norm and record in p</comment>
    </method>
    <javadoc>
      <text>* Returns the pivot matrix, P, used in the QR Decomposition of matrix A such that AP = QR.
 * If no pivoting is used in this decomposition then P is equal to the identity matrix.</text>
      <return>a permutation matrix.</return>
    </javadoc>
    <method type="RealMatrix" name="getP" startLine="135" endLine="144">
      <scope startLine="136" endLine="142">
        <declaration type="int" name="n" />
        <scope startLine="139" endLine="141" />
      </scope>
    </method>
    <javadoc>
      <text>* Return the effective numerical matrix rank.
 * <p>The effective numerical rank is the number of non-negligible
 * singular values.</p>
 * <p>This implementation looks at Frobenius norms of the sequence of
 * bottom right submatrices.  When a large fall in norm is seen,
 * the rank is returned. The drop is computed as:</p>
 * <pre>
 * (thisNorm/lastNorm) * rNorm < dropThreshold
 * </pre>
 * <p>
 * where thisNorm is the Frobenius norm of the current submatrix,
 * lastNorm is the Frobenius norm of the previous submatrix,
 * rNorm is is the Frobenius norm of the complete matrix
 * </p></text>
      <param>dropThreshold threshold triggering rank computation</param>
      <return>effective numerical matrix rank</return>
    </javadoc>
    <method type="int" name="getRank" startLine="165" endLine="181">
      <declaration type="RealMatrix" name="r" />
      <declaration type="int" name="rows" />
      <declaration type="int" name="columns" />
      <declaration type="int" name="rank" />
      <declaration type="double" name="lastNorm" />
      <declaration type="double" name="rNorm" />
      <scope startLine="172" endLine="179">
        <declaration type="double" name="thisNorm" />
        <scope startLine="174" endLine="176" />
      </scope>
    </method>
    <javadoc>
      <text>* Get a solver for finding the A &times; X = B solution in least square sense.</text>
      <return>a solver</return>
    </javadoc>
    <method type="DecompositionSolver" name="getSolver" startLine="187" endLine="189" />
    <class name="Solver" startLine="191">
      <implements name="DecompositionSolver" />
      <javadoc>
        <text>* Specialized solver.</text>
      </javadoc>
      <javadoc>
        <text>* Upper level solver.</text>
      </javadoc>
      <declaration type="DecompositionSolver" name="upper" />
      <javadoc>
        <text>* A permutation matrix for the pivots used in the QR decomposition</text>
      </javadoc>
      <declaration type="RealMatrix" name="p" />
      <javadoc>
        <text>* Build a solver from decomposed matrix.</text>
        <param>upper upper level solver.</param>
        <param>p permutation matrix</param>
      </javadoc>
      <method type="constructor" name="Solver" startLine="206" endLine="209" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="boolean" name="isNonSingular" startLine="212" endLine="214" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="RealVector" name="solve" startLine="217" endLine="219" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="RealMatrix" name="solve" startLine="222" endLine="224" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="RealMatrix" name="getInverse" startLine="227" endLine="229" />
    </class>
  </class>
</source>
