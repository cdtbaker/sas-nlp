<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode">
  <import name="java.util.ArrayList" />
  <import name="java.util.Collection" />
  <import name="java.util.Collections" />
  <import name="java.util.Comparator" />
  <import name="java.util.Iterator" />
  <import name="java.util.List" />
  <import name="java.util.SortedSet" />
  <import name="java.util.TreeSet" />
  <import name="org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver" />
  <import name="org.apache.commons.math3.analysis.solvers.UnivariateSolver" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.exception.NoBracketingException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.ode.events.EventHandler" />
  <import name="org.apache.commons.math3.ode.events.EventState" />
  <import name="org.apache.commons.math3.ode.sampling.AbstractStepInterpolator" />
  <import name="org.apache.commons.math3.ode.sampling.StepHandler" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.Incrementor" />
  <import name="org.apache.commons.math3.util.Precision" />
  <class name="AbstractIntegrator" startLine="44">
    <implements name="FirstOrderIntegrator" />
    <javadoc>
      <text>* Base class managing common boilerplate for all integrators.</text>
      <version>$Id: AbstractIntegrator.java 1463684 2013-04-02 19:04:13Z luc $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Step handler.</text>
    </javadoc>
    <declaration type="Collection<StepHandler>" name="stepHandlers" />
    <javadoc>
      <text>* Current step start time.</text>
    </javadoc>
    <declaration type="double" name="stepStart" />
    <javadoc>
      <text>* Current stepsize.</text>
    </javadoc>
    <declaration type="double" name="stepSize" />
    <javadoc>
      <text>* Indicator for last step.</text>
    </javadoc>
    <declaration type="boolean" name="isLastStep" />
    <javadoc>
      <text>* Indicator that a state or derivative reset was triggered by some event.</text>
    </javadoc>
    <declaration type="boolean" name="resetOccurred" />
    <javadoc>
      <text>* Events states.</text>
    </javadoc>
    <declaration type="Collection<EventState>" name="eventsStates" />
    <javadoc>
      <text>* Initialization indicator of events states.</text>
    </javadoc>
    <declaration type="boolean" name="statesInitialized" />
    <javadoc>
      <text>* Name of the method.</text>
    </javadoc>
    <declaration type="String" name="name" />
    <javadoc>
      <text>* Counter for number of evaluations.</text>
    </javadoc>
    <declaration type="Incrementor" name="evaluations" />
    <javadoc>
      <text>* Differential equations to integrate.</text>
    </javadoc>
    <declaration type="ExpandableStatefulODE" name="expandable" />
    <javadoc>
      <text>* Build an instance.</text>
      <param>name name of the method</param>
    </javadoc>
    <method type="constructor" name="AbstractIntegrator" startLine="84" endLine="94" />
    <javadoc>
      <text>* Build an instance with a null name.</text>
    </javadoc>
    <method type="constructor" name="AbstractIntegrator" startLine="98" endLine="100" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="String" name="getName" startLine="103" endLine="105" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="addStepHandler" startLine="108" endLine="110" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Collection<StepHandler>" name="getStepHandlers" startLine="113" endLine="115" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="clearStepHandlers" startLine="118" endLine="120" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="addEventHandler" startLine="126" endLine="130" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="addEventHandler" startLine="137" endLine="140" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="Collection<EventHandler>" name="getEventHandlers" startLine="143" endLine="149">
      <declaration type="List<EventHandler>" name="list" />
      <scope startLine="145" endLine="147" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="clearEventHandlers" startLine="152" endLine="154" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getCurrentStepStart" startLine="157" endLine="159" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getCurrentSignedStepsize" startLine="162" endLine="164" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setMaxEvaluations" startLine="167" endLine="169" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getMaxEvaluations" startLine="172" endLine="174" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getEvaluations" startLine="177" endLine="179" />
    <javadoc>
      <text>* Prepare the start of an integration.</text>
      <param>t0 start value of the independent <i>time</i> variable</param>
      <param>y0 array containing the start value of the state vector</param>
      <param>t target time for the integration</param>
    </javadoc>
    <method type="void" name="initIntegration" startLine="186" endLine="200">
      <scope startLine="190" endLine="192" />
      <scope startLine="194" endLine="196" />
    </method>
    <javadoc>
      <text>* Set the equations.</text>
      <param>equations equations to set</param>
    </javadoc>
    <method type="void" name="setEquations" startLine="205" endLine="207" />
    <javadoc>
      <text>* Get the differential equations to integrate.</text>
      <return>differential equations to integrate</return>
      <since>3.2</since>
    </javadoc>
    <method type="ExpandableStatefulODE" name="getExpandable" startLine="213" endLine="215" />
    <javadoc>
      <text>* Get the evaluations counter.</text>
      <return>evaluations counter</return>
      <since>3.2</since>
    </javadoc>
    <method type="Incrementor" name="getEvaluationsCounter" startLine="221" endLine="223" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="integrate" startLine="229" endLine="250">
      <scope startLine="231" endLine="233" />
      <scope startLine="234" endLine="236" />
      <declaration type="ExpandableStatefulODE" name="expandableODE" />
      <comment>prepare expandable stateful equations</comment>
      <comment>perform integration</comment>
      <comment>extract results back from the stateful equations</comment>
    </method>
    <method name="integrate" type="void" startLine="252" endLine="273" />
    <javadoc>
      <text>* Integrate a set of differential equations up to the given time.
 * <p>This method solves an Initial Value Problem (IVP).</p>
 * <p>The set of differential equations is composed of a main set, which
 * can be extended by some sets of secondary equations. The set of
 * equations must be already set up with initial time and partial states.
 * At integration completion, the final time and partial states will be
 * available in the same object.</p>
 * <p>Since this method stores some internal state variables made
 * available in its public interface during integration ({@link #getCurrentSignedStepsize()}), it is <em>not</em> thread-safe.</p></text>
      <param>equations complete set of differential equations to integrate</param>
      <param>t target time for the integration
 * (can be set to a value smaller than <code>t0</code> for backward integration)</param>
      <exception>NumberIsTooSmallException if integration step is too small</exception>
      <throws>DimensionMismatchException if the dimension of the complete state does not
 * match the complete equations sets dimension</throws>
      <exception>MaxCountExceededException if the number of functions evaluations is exceeded</exception>
      <exception>NoBracketingException if the location of an event cannot be bracketed</exception>
    </javadoc>
    <javadoc>
      <text>* Compute the derivatives and check the number of evaluations.</text>
      <param>t current value of the independent <I>time</I> variable</param>
      <param>y array containing the current value of the state vector</param>
      <param>yDot placeholder array where to put the time derivative of the state vector</param>
      <exception>MaxCountExceededException if the number of functions evaluations is exceeded</exception>
      <exception>DimensionMismatchException if arrays dimensions do not match equations settings</exception>
    </javadoc>
    <method type="void" name="computeDerivatives" startLine="283" endLine="286" />
    <javadoc>
      <text>* Set the stateInitialized flag.
 * <p>This method must be called by integrators with the value{@code false} before they start integration, so a proper lazy
 * initialization is done automatically on the first step.</p></text>
      <param>stateInitialized new value for the flag</param>
      <since>2.2</since>
    </javadoc>
    <method type="void" name="setStateInitialized" startLine="295" endLine="297" />
    <javadoc>
      <text>* Accept a step, triggering events and step handlers.</text>
      <param>interpolator step interpolator</param>
      <param>y state vector at step end time, must be reset if an event
 * asks for resetting or if an events stops integration during the step</param>
      <param>yDot placeholder array where to put the time derivative of the state vector</param>
      <param>tEnd final integration time</param>
      <return>time at end of step</return>
      <exception>MaxCountExceededException if the interpolator throws one because
 * the number of functions evaluations is exceeded</exception>
      <exception>NoBracketingException if the location of an event cannot be bracketed</exception>
      <exception>DimensionMismatchException if arrays dimensions do not match equations settings</exception>
      <since>2.2</since>
    </javadoc>
    <method type="double" name="acceptStep" startLine="314" endLine="429">
      <declaration type="double" name="previousT" />
      <declaration type="double" name="currentT" />
      <scope startLine="320" endLine="325">
        <scope startLine="321" endLine="323" />
      </scope>
      <declaration type="int" name="orderingSign" />
      <declaration type="SortedSet<EventState>" name="occuringEvents" />
      <javadoc>
        <text>* {@inheritDoc}</text>
      </javadoc>
      <method type="int" name="compare" startLine="332" endLine="334" />
      <scope startLine="338" endLine="343">
        <scope startLine="339" endLine="342" />
        <comment>the event occurs during the current step</comment>
      </scope>
      <scope startLine="345" endLine="411">
        <declaration type="Iterator<EventState>" name="iterator" />
        <declaration type="EventState" name="currentEvent" />
        <declaration type="double" name="eventT" />
        <declaration type="double[]" name="eventYPrimary" />
        <declaration type="double[]" name="eventYComplete" />
        <declaration type="int" name="index" />
        <scope startLine="364" endLine="367" />
        <scope startLine="370" endLine="373" />
        <scope startLine="376" endLine="378" />
        <scope startLine="380" endLine="384" />
        <declaration type="boolean" name="needReset" />
        <scope startLine="387" endLine="389" />
        <scope startLine="390" endLine="398" />
        <scope startLine="406" endLine="409" />
        <comment>handle the chronologically first event</comment>
        <comment>restrict the interpolator to the first part of the step, up to the event</comment>
        <comment>get state at event time</comment>
        <comment>advance all event states to current time</comment>
        <comment>handle the first part of the step, up to the event</comment>
        <comment>the event asked to stop integration</comment>
        <comment>some event handler has triggered changes that</comment>
        <comment>invalidate the derivatives, we need to recompute them</comment>
        <comment>prepare handling of the remaining part of the step</comment>
        <comment>check if the same event occurs again in the remaining part of the step</comment>
        <comment>the event occurs during the current step</comment>
      </scope>
      <declaration type="double[]" name="currentY" />
      <scope startLine="416" endLine="419" />
      <scope startLine="423" endLine="425" />
      <comment>initialize the events states if needed</comment>
      <comment>search for next events that may occur during the step</comment>
      <comment>last part of the step, after the last event</comment>
      <comment>handle the remaining part of the step, after all events if any</comment>
    </method>
    <javadoc>
      <text>* Check the integration span.</text>
      <param>equations set of differential equations</param>
      <param>t target time for the integration</param>
      <exception>NumberIsTooSmallException if integration span is too small</exception>
      <exception>DimensionMismatchException if adaptive step size integrators
 * tolerance arrays dimensions are not compatible with equations settings</exception>
    </javadoc>
    <method type="void" name="sanityChecks" startLine="439" endLine="449">
      <declaration type="double" name="threshold" />
      <declaration type="double" name="dt" />
      <scope startLine="444" endLine="447" />
    </method>
  </class>
</source>
