<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.random">
  <interface name="RandomGenerator" startLine="20">
    <javadoc>
      <text>* Interface extracted from <code>java.util.Random</code>.  This interface is
 * implemented by {@link AbstractRandomGenerator}.</text>
      <since>1.1</since>
      <version>$Id: RandomGenerator.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <method name="setSeed" type="void" startLine="29" endLine="37" />
    <javadoc>
      <text>* Sets the seed of the underlying random number generator using an
 * <code>int</code> seed.
 * <p>Sequences of values generated starting with the same seeds
 * should be identical.
 * </p></text>
      <param>seed the seed value</param>
    </javadoc>
    <method name="setSeed" type="void" startLine="39" endLine="47" />
    <javadoc>
      <text>* Sets the seed of the underlying random number generator using an
 * <code>int</code> array seed.
 * <p>Sequences of values generated starting with the same seeds
 * should be identical.
 * </p></text>
      <param>seed the seed value</param>
    </javadoc>
    <method name="setSeed" type="void" startLine="49" endLine="57" />
    <javadoc>
      <text>* Sets the seed of the underlying random number generator using a
 * <code>long</code> seed.
 * <p>Sequences of values generated starting with the same seeds
 * should be identical.
 * </p></text>
      <param>seed the seed value</param>
    </javadoc>
    <method name="nextBytes" type="void" startLine="59" endLine="67" />
    <javadoc>
      <text>* Generates random bytes and places them into a user-supplied
 * byte array.  The number of random bytes produced is equal to
 * the length of the byte array.</text>
      <param>bytes the non-null byte array in which to put the
 * random bytes</param>
    </javadoc>
    <method name="nextInt" type="int" startLine="69" endLine="78" />
    <javadoc>
      <text>* Returns the next pseudorandom, uniformly distributed <code>int</code>
 * value from this random number generator's sequence.
 * All 2<font size="-1"><sup>32</sup></font> possible <tt>int</tt> values
 * should be produced with  (approximately) equal probability.</text>
      <return>the next pseudorandom, uniformly distributed <code>int</code>
 * value from this random number generator's sequence</return>
    </javadoc>
    <method name="nextInt" type="int" startLine="80" endLine="91" />
    <javadoc>
      <text>* Returns a pseudorandom, uniformly distributed <tt>int</tt> value
 * between 0 (inclusive) and the specified value (exclusive), drawn from
 * this random number generator's sequence.</text>
      <param>n the bound on the random number to be returned.  Must be
 * positive.</param>
      <return>a pseudorandom, uniformly distributed <tt>int</tt>
 * value between 0 (inclusive) and n (exclusive).</return>
      <throws>IllegalArgumentException  if n is not positive.</throws>
    </javadoc>
    <method name="nextLong" type="long" startLine="93" endLine="102" />
    <javadoc>
      <text>* Returns the next pseudorandom, uniformly distributed <code>long</code>
 * value from this random number generator's sequence.  All
 * 2<font size="-1"><sup>64</sup></font> possible <tt>long</tt> values
 * should be produced with (approximately) equal probability.</text>
      <return>the next pseudorandom, uniformly distributed <code>long</code>
 * value from this random number generator's sequence</return>
    </javadoc>
    <method name="nextBoolean" type="boolean" startLine="104" endLine="113" />
    <javadoc>
      <text>* Returns the next pseudorandom, uniformly distributed
 * <code>boolean</code> value from this random number generator's
 * sequence.</text>
      <return>the next pseudorandom, uniformly distributed
 * <code>boolean</code> value from this random number generator's
 * sequence</return>
    </javadoc>
    <method name="nextFloat" type="float" startLine="115" endLine="124" />
    <javadoc>
      <text>* Returns the next pseudorandom, uniformly distributed <code>float</code>
 * value between <code>0.0</code> and <code>1.0</code> from this random
 * number generator's sequence.</text>
      <return>the next pseudorandom, uniformly distributed <code>float</code>
 * value between <code>0.0</code> and <code>1.0</code> from this
 * random number generator's sequence</return>
    </javadoc>
    <method name="nextDouble" type="double" startLine="126" endLine="135" />
    <javadoc>
      <text>* Returns the next pseudorandom, uniformly distributed
 * <code>double</code> value between <code>0.0</code> and
 * <code>1.0</code> from this random number generator's sequence.</text>
      <return>the next pseudorandom, uniformly distributed
 * <code>double</code> value between <code>0.0</code> and
 * <code>1.0</code> from this random number generator's sequence</return>
    </javadoc>
    <method name="nextGaussian" type="double" startLine="137" endLine="147" />
    <javadoc>
      <text>* Returns the next pseudorandom, Gaussian ("normally") distributed
 * <code>double</code> value with mean <code>0.0</code> and standard
 * deviation <code>1.0</code> from this random number generator's sequence.</text>
      <return>the next pseudorandom, Gaussian ("normally") distributed
 * <code>double</code> value with mean <code>0.0</code> and
 * standard deviation <code>1.0</code> from this random number
 * generator's sequence</return>
    </javadoc>
  </interface>
</source>
