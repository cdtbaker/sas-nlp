<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.analysis.solvers">
  <import name="org.apache.commons.math3.exception.NoBracketingException" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.Precision" />
  <class name="BrentSolver" extends="AbstractUnivariateSolver" startLine="26">
    <javadoc>
      <text>* This class implements the <a href="http://mathworld.wolfram.com/BrentsMethod.html">
 * Brent algorithm</a> for finding zeros of real univariate functions.
 * The function should be continuous but not necessarily smooth.
 * The {@code solve} method returns a zero {@code x} of the function {@code f}in the given interval {@code [a, b]} to within a tolerance{@code 6 eps abs(x) + t} where {@code eps} is the relative accuracy and{@code t} is the absolute accuracy.
 * The given interval must bracket the root.</text>
      <version>$Id: BrentSolver.java 1379560 2012-08-31 19:40:30Z erans $</version>
    </javadoc>
    <javadoc>
      <text>* Default absolute accuracy.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_ABSOLUTE_ACCURACY" />
    <javadoc>
      <text>* Construct a solver with default accuracy (1e-6).</text>
    </javadoc>
    <method type="constructor" name="BrentSolver" startLine="46" endLine="48" />
    <javadoc>
      <text>* Construct a solver.</text>
      <param>absoluteAccuracy Absolute accuracy.</param>
    </javadoc>
    <method type="constructor" name="BrentSolver" startLine="54" endLine="56" />
    <javadoc>
      <text>* Construct a solver.</text>
      <param>relativeAccuracy Relative accuracy.</param>
      <param>absoluteAccuracy Absolute accuracy.</param>
    </javadoc>
    <method type="constructor" name="BrentSolver" startLine="64" endLine="66" />
    <javadoc>
      <text>* Construct a solver.</text>
      <param>relativeAccuracy Relative accuracy.</param>
      <param>absoluteAccuracy Absolute accuracy.</param>
      <param>functionValueAccuracy Function value accuracy.</param>
    </javadoc>
    <method type="constructor" name="BrentSolver" startLine="76" endLine="78" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="doSolve" startLine="87" endLine="124">
      <declaration type="double" name="min" />
      <declaration type="double" name="max" />
      <declaration type="double" name="initial" />
      <declaration type="double" name="functionValueAccuracy" />
      <declaration type="double" name="yInitial" />
      <scope startLine="97" endLine="99" />
      <declaration type="double" name="yMin" />
      <scope startLine="103" endLine="105" />
      <scope startLine="108" endLine="110" />
      <declaration type="double" name="yMax" />
      <scope startLine="114" endLine="116" />
      <scope startLine="119" endLine="121" />
      <comment>Return the initial guess if it is good enough.</comment>
      <comment>Return the first endpoint if it is good enough.</comment>
      <comment>Reduce interval if min and initial bracket the root.</comment>
      <comment>Return the second endpoint if it is good enough.</comment>
      <comment>Reduce interval if initial and max bracket the root.</comment>
    </method>
    <javadoc>
      <text>* Search for a zero inside the provided interval.
 * This implementation is based on the algorithm described at page 58 of
 * the book
 * <quote>
 * <b>Algorithms for Minimization Without Derivatives</b>
 * <it>Richard P. Brent</it>
 * Dover 0-486-41998-3
 * </quote></text>
      <param>lo Lower bound of the search interval.</param>
      <param>hi Higher bound of the search interval.</param>
      <param>fLo Function value at the lower bound of the search interval.</param>
      <param>fHi Function value at the higher bound of the search interval.</param>
      <return>the value where the function is zero.</return>
    </javadoc>
    <method type="double" name="brent" startLine="143" endLine="233">
      <declaration type="double" name="a" />
      <declaration type="double" name="fa" />
      <declaration type="double" name="b" />
      <declaration type="double" name="fb" />
      <declaration type="double" name="c" />
      <declaration type="double" name="fc" />
      <declaration type="double" name="d" />
      <declaration type="double" name="e" />
      <declaration type="double" name="t" />
      <declaration type="double" name="eps" />
      <scope startLine="156" endLine="232">
        <scope startLine="157" endLine="164" />
        <declaration type="double" name="tol" />
        <declaration type="double" name="m" />
        <scope startLine="170" endLine="172" />
        <scope startLine="174" endLine="178" />
        <scope startLine="178" endLine="213">
          <declaration type="double" name="s" />
          <declaration type="double" name="p" />
          <declaration type="double" name="q" />
          <scope startLine="185" endLine="189" />
          <scope startLine="189" endLine="195">
            <declaration type="double" name="r" />
          </scope>
          <scope startLine="196" endLine="198" />
          <scope startLine="198" endLine="200" />
          <scope startLine="204" endLine="210" />
          <scope startLine="210" endLine="212" />
        </scope>
        <scope startLine="217" endLine="219" />
        <scope startLine="219" endLine="221" />
        <scope startLine="221" endLine="223" />
        <scope startLine="226" endLine="231" />
        <comment>Force bisection.</comment>
        <comment>The equality test (a == c) is intentional,</comment>
        <comment>it is part of the original Brent's method and</comment>
        <comment>it should NOT be replaced by proximity test.</comment>
        <comment>Linear interpolation.</comment>
        <comment>Inverse quadratic interpolation.</comment>
        <comment>Inverse quadratic interpolation gives a value</comment>
        <comment>in the wrong direction, or progress is slow.</comment>
        <comment>Fall back to bisection.</comment>
      </scope>
    </method>
  </class>
</source>
