<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode.nonstiff">
  <import name="java.io.IOException" />
  <import name="java.io.ObjectInput" />
  <import name="java.io.ObjectOutput" />
  <import name="org.apache.commons.math3.ode.AbstractIntegrator" />
  <import name="org.apache.commons.math3.ode.EquationsMapper" />
  <import name="org.apache.commons.math3.ode.sampling.AbstractStepInterpolator" />
  <class name="RungeKuttaStepInterpolator" extends="AbstractStepInterpolator" startLine="28">
    <javadoc>
      <text>* This class represents an interpolator over the last step during an
 * ODE integration for Runge-Kutta and embedded Runge-Kutta integrators.</text>
      <see>RungeKuttaIntegrator</see>
      <see>EmbeddedRungeKuttaIntegrator</see>
      <version>$Id: RungeKuttaStepInterpolator.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>1.2</since>
    </javadoc>
    <javadoc>
      <text>* Previous state.</text>
    </javadoc>
    <declaration type="double[]" name="previousState" />
    <javadoc>
      <text>* Slopes at the intermediate points</text>
    </javadoc>
    <declaration type="double[][]" name="yDotK" />
    <javadoc>
      <text>* Reference to the integrator.</text>
    </javadoc>
    <declaration type="AbstractIntegrator" name="integrator" />
    <javadoc>
      <text>* Simple constructor.
 * This constructor builds an instance that is not usable yet, the{@link #reinitialize} method should be called before using the
 * instance in order to initialize the internal arrays. This
 * constructor is used only in order to delay the initialization in
 * some cases. The {@link RungeKuttaIntegrator} and {@link EmbeddedRungeKuttaIntegrator} classes use the prototyping design
 * pattern to create the step interpolators by cloning an
 * uninitialized model and latter initializing the copy.</text>
    </javadoc>
    <method type="constructor" name="RungeKuttaStepInterpolator" startLine="60" endLine="64" />
    <javadoc>
      <text>* Copy constructor.
 * <p>The copied interpolator should have been finalized before the
 * copy, otherwise the copy will not be able to perform correctly any
 * interpolation and will throw a {@link NullPointerException}later. Since we don't want this constructor to throw the
 * exceptions finalization may involve and since we don't want this
 * method to modify the state of the copied interpolator,
 * finalization is <strong>not</strong> done automatically, it
 * remains under user control.</p>
 * <p>The copy is a deep copy: its arrays are separated from the
 * original arrays of the instance.</p></text>
      <param>interpolator interpolator to copy from.</param>
    </javadoc>
    <method type="constructor" name="RungeKuttaStepInterpolator" startLine="83" endLine="105">
      <scope startLine="87" endLine="96">
        <scope startLine="92" endLine="94" />
      </scope>
      <scope startLine="96" endLine="99" />
      <comment>we cannot keep any reference to the equations in the copy</comment>
      <comment>the interpolator should have been finalized before</comment>
    </method>
    <javadoc>
      <text>* Reinitialize the instance
 * <p>Some Runge-Kutta integrators need fewer functions evaluations
 * than their counterpart step interpolators. So the interpolator
 * should perform the last evaluations they need by themselves. The{@link RungeKuttaIntegrator RungeKuttaIntegrator} and {@link EmbeddedRungeKuttaIntegrator EmbeddedRungeKuttaIntegrator}abstract classes call this method in order to let the step
 * interpolator perform the evaluations it needs. These evaluations
 * will be performed during the call to <code>doFinalize</code> if
 * any, i.e. only if the step handler either calls the {@link AbstractStepInterpolator#finalizeStep finalizeStep} method or the{@link AbstractStepInterpolator#getInterpolatedStategetInterpolatedState} method (for an interpolator which needs a
 * finalization) or if it clones the step interpolator.</p></text>
      <param>rkIntegrator integrator being used</param>
      <param>y reference to the integrator array holding the state at
 * the end of the step</param>
      <param>yDotArray reference to the integrator array holding all the
 * intermediate slopes</param>
      <param>forward integration direction indicator</param>
      <param>primaryMapper equations mapper for the primary equations set</param>
      <param>secondaryMappers equations mappers for the secondary equations sets</param>
    </javadoc>
    <method type="void" name="reinitialize" startLine="133" endLine="138" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="shift" startLine="142" endLine="145" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="writeExternal" startLine="150" endLine="171">
      <declaration type="int" name="n" />
      <scope startLine="157" endLine="159" />
      <declaration type="int" name="kMax" />
      <scope startLine="163" endLine="167">
        <scope startLine="164" endLine="166" />
      </scope>
      <comment>save the state of the base class</comment>
      <comment>save the local attributes</comment>
      <comment>we do not save any reference to the equations</comment>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="readExternal" startLine="176" endLine="210">
      <declaration type="double" name="t" />
      <declaration type="int" name="n" />
      <scope startLine="183" endLine="185" />
      <scope startLine="185" endLine="190">
        <scope startLine="187" endLine="189" />
      </scope>
      <declaration type="int" name="kMax" />
      <scope startLine="194" endLine="199">
        <scope startLine="196" endLine="198" />
      </scope>
      <scope startLine="203" endLine="206">
        <comment>we can now set the interpolated time and state</comment>
      </scope>
      <scope startLine="206" endLine="208" />
      <comment>read the base class</comment>
      <comment>read the local attributes</comment>
    </method>
  </class>
</source>
