<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.distribution">
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.NotANumberException" />
  <import name="org.apache.commons.math3.exception.NotFiniteNumberException" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.random.RandomGenerator" />
  <import name="org.apache.commons.math3.random.Well19937c" />
  <import name="org.apache.commons.math3.util.Pair" />
  <class name="EnumeratedRealDistribution" extends="AbstractRealDistribution" startLine="30">
    <javadoc>
      <text>* <p>Implementation of a real-valued {@link EnumeratedDistribution}.
 * <p>Values with zero-probability are allowed but they do not extend the
 * support.<br/>
 * Duplicate values are allowed. Probabilities of duplicate values are combined
 * when computing cumulative probabilities and statistics.</p></text>
      <version>$Id: EnumeratedRealDistribution.java 1456769 2013-03-15 04:51:34Z psteitz $</version>
      <since>3.2</since>
    </javadoc>
    <javadoc>
      <text>* Serializable UID.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* {@link EnumeratedDistribution} (using the {@link Double} wrapper)
 * used to generate the pmf.</text>
    </javadoc>
    <declaration type="EnumeratedDistribution<Double>" name="innerDistribution" />
    <javadoc>
      <text>* Create a discrete distribution using the given probability mass function
 * enumeration.</text>
      <param>singletons array of random variable values.</param>
      <param>probabilities array of probabilities.</param>
      <throws>DimensionMismatchException if{@code singletons.length != probabilities.length}</throws>
      <throws>NotPositiveException if any of the probabilities are negative.</throws>
      <throws>NotFiniteNumberException if any of the probabilities are infinite.</throws>
      <throws>NotANumberException if any of the probabilities are NaN.</throws>
      <throws>MathArithmeticException all of the probabilities are 0.</throws>
    </javadoc>
    <method type="constructor" name="EnumeratedRealDistribution" startLine="67" endLine="69" />
    <javadoc>
      <text>* Create a discrete distribution using the given random number generator
 * and probability mass function enumeration.</text>
      <param>rng random number generator.</param>
      <param>singletons array of random variable values.</param>
      <param>probabilities array of probabilities.</param>
      <throws>DimensionMismatchException if{@code singletons.length != probabilities.length}</throws>
      <throws>NotPositiveException if any of the probabilities are negative.</throws>
      <throws>NotFiniteNumberException if any of the probabilities are infinite.</throws>
      <throws>NotANumberException if any of the probabilities are NaN.</throws>
      <throws>MathArithmeticException all of the probabilities are 0.</throws>
    </javadoc>
    <method type="constructor" name="EnumeratedRealDistribution" startLine="88" endLine="101">
      <scope startLine="90" endLine="92" />
      <declaration type="List<Pair<Double,Double>>" name="samples" />
      <scope startLine="96" endLine="98" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="probability" startLine="107" endLine="109" />
    <javadoc>
      <text>* For a random variable {@code X} whose values are distributed according to
 * this distribution, this method returns {@code P(X = x)}. In other words,
 * this method represents the probability mass function (PMF) for the
 * distribution.</text>
      <param>x the point at which the PMF is evaluated</param>
      <return>the value of the probability mass function at point {@code x}</return>
    </javadoc>
    <method type="double" name="density" startLine="120" endLine="122" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="cumulativeProbability" startLine="127" endLine="137">
      <declaration type="double" name="probability" />
      <scope startLine="130" endLine="134">
        <scope startLine="131" endLine="133" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <return>{@code sum(singletons[i] * probabilities[i])}</return>
    </javadoc>
    <method type="double" name="getNumericalMean" startLine="144" endLine="152">
      <declaration type="double" name="mean" />
      <scope startLine="147" endLine="149" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
      <return>{@code sum((singletons[i] - mean) ^ 2 * probabilities[i])}</return>
    </javadoc>
    <method type="double" name="getNumericalVariance" startLine="159" endLine="169">
      <declaration type="double" name="mean" />
      <declaration type="double" name="meanOfSquares" />
      <scope startLine="163" endLine="166" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}Returns the lowest value with non-zero probability.</text>
      <return>the lowest value with non-zero probability.</return>
    </javadoc>
    <method type="double" name="getSupportLowerBound" startLine="178" endLine="187">
      <declaration type="double" name="min" />
      <scope startLine="180" endLine="184">
        <scope startLine="181" endLine="183" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}Returns the highest value with non-zero probability.</text>
      <return>the highest value with non-zero probability.</return>
    </javadoc>
    <method type="double" name="getSupportUpperBound" startLine="196" endLine="205">
      <declaration type="double" name="max" />
      <scope startLine="198" endLine="202">
        <scope startLine="199" endLine="201" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}The support of this distribution includes the lower bound.</text>
      <return>{@code true}</return>
    </javadoc>
    <method type="boolean" name="isSupportLowerBoundInclusive" startLine="214" endLine="216" />
    <javadoc>
      <text>* {@inheritDoc}The support of this distribution includes the upper bound.</text>
      <return>{@code true}</return>
    </javadoc>
    <method type="boolean" name="isSupportUpperBoundInclusive" startLine="225" endLine="227" />
    <javadoc>
      <text>* {@inheritDoc}The support of this distribution is connected.</text>
      <return>{@code true}</return>
    </javadoc>
    <method type="boolean" name="isSupportConnected" startLine="236" endLine="238" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="sample" startLine="244" endLine="246" />
  </class>
</source>
