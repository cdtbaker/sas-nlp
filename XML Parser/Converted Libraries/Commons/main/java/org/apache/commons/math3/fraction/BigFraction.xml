<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.fraction">
  <import name="java.io.Serializable" />
  <import name="java.math.BigDecimal" />
  <import name="java.math.BigInteger" />
  <import name="org.apache.commons.math3.FieldElement" />
  <import name="org.apache.commons.math3.exception.MathArithmeticException" />
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.ZeroException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.ArithmeticUtils" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="BigFraction" extends="Number" startLine="33">
    <implements name="FieldElement<BigFraction>" />
    <implements name="Comparable<BigFraction>" />
    <implements name="Serializable" />
    <javadoc>
      <text>* Representation of a rational number without any overflow. This class is
 * immutable.</text>
      <version>$Id: BigFraction.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* A fraction representing "2 / 1".</text>
    </javadoc>
    <declaration type="BigFraction" name="TWO" />
    <javadoc>
      <text>* A fraction representing "1".</text>
    </javadoc>
    <declaration type="BigFraction" name="ONE" />
    <javadoc>
      <text>* A fraction representing "0".</text>
    </javadoc>
    <declaration type="BigFraction" name="ZERO" />
    <javadoc>
      <text>* A fraction representing "-1 / 1".</text>
    </javadoc>
    <declaration type="BigFraction" name="MINUS_ONE" />
    <javadoc>
      <text>* A fraction representing "4/5".</text>
    </javadoc>
    <declaration type="BigFraction" name="FOUR_FIFTHS" />
    <javadoc>
      <text>* A fraction representing "1/5".</text>
    </javadoc>
    <declaration type="BigFraction" name="ONE_FIFTH" />
    <javadoc>
      <text>* A fraction representing "1/2".</text>
    </javadoc>
    <declaration type="BigFraction" name="ONE_HALF" />
    <javadoc>
      <text>* A fraction representing "1/4".</text>
    </javadoc>
    <declaration type="BigFraction" name="ONE_QUARTER" />
    <javadoc>
      <text>* A fraction representing "1/3".</text>
    </javadoc>
    <declaration type="BigFraction" name="ONE_THIRD" />
    <javadoc>
      <text>* A fraction representing "3/5".</text>
    </javadoc>
    <declaration type="BigFraction" name="THREE_FIFTHS" />
    <javadoc>
      <text>* A fraction representing "3/4".</text>
    </javadoc>
    <declaration type="BigFraction" name="THREE_QUARTERS" />
    <javadoc>
      <text>* A fraction representing "2/5".</text>
    </javadoc>
    <declaration type="BigFraction" name="TWO_FIFTHS" />
    <javadoc>
      <text>* A fraction representing "2/4".</text>
    </javadoc>
    <declaration type="BigFraction" name="TWO_QUARTERS" />
    <javadoc>
      <text>* A fraction representing "2/3".</text>
    </javadoc>
    <declaration type="BigFraction" name="TWO_THIRDS" />
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* <code>BigInteger</code> representation of 100.</text>
    </javadoc>
    <declaration type="BigInteger" name="ONE_HUNDRED" />
    <javadoc>
      <text>* The numerator.</text>
    </javadoc>
    <declaration type="BigInteger" name="numerator" />
    <javadoc>
      <text>* The denominator.</text>
    </javadoc>
    <declaration type="BigInteger" name="denominator" />
    <javadoc>
      <text>* <p>
 * Create a {@link BigFraction} equivalent to the passed <tt>BigInteger</tt>, ie
 * "num / 1".
 * </p></text>
      <param>numthe numerator.</param>
    </javadoc>
    <method type="constructor" name="BigFraction" startLine="107" endLine="109" />
    <javadoc>
      <text>* Create a {@link BigFraction} given the numerator and denominator as{@code BigInteger}. The {@link BigFraction} is reduced to lowest terms.</text>
      <param>num the numerator, must not be {@code null}.</param>
      <param>den the denominator, must not be {@code null}.</param>
      <throws>ZeroException if the denominator is zero.</throws>
      <throws>NullArgumentException if either of the arguments is null</throws>
    </javadoc>
    <method type="constructor" name="BigFraction" startLine="120" endLine="149">
      <scope startLine="123" endLine="125" />
      <scope startLine="126" endLine="129" />
      <scope startLine="129" endLine="148">
        <declaration type="BigInteger" name="gcd" />
        <scope startLine="133" endLine="136" />
        <scope startLine="139" endLine="142" />
        <comment>reduce numerator and denominator by greatest common denominator</comment>
        <comment>move sign to numerator</comment>
        <comment>store the values in the final fields</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Create a fraction given the double value.
 * <p>
 * This constructor behaves <em>differently</em> from{@link #BigFraction(double,double,int)}. It converts the double value
 * exactly, considering its internal bits representation. This works for all
 * values except NaN and infinities and does not requires any loop or
 * convergence threshold.
 * </p>
 * <p>
 * Since this conversion is exact and since double numbers are sometimes
 * approximated, the fraction created may seem strange in some cases. For example,
 * calling <code>new BigFraction(1.0 / 3.0)</code> does <em>not</em> create
 * the fraction 1/3, but the fraction 6004799503160661 / 18014398509481984
 * because the double number passed to the constructor is not exactly 1/3
 * (this number cannot be stored exactly in IEEE754).
 * </p></text>
      <see>#BigFraction(double,double,int)</see>
      <param>value the double value to convert to a fraction.</param>
      <exception>MathIllegalArgumentException if value is NaN or infinite</exception>
    </javadoc>
    <method type="constructor" name="BigFraction" startLine="172" endLine="206">
      <scope startLine="173" endLine="175" />
      <scope startLine="176" endLine="178" />
      <declaration type="long" name="bits" />
      <declaration type="long" name="sign" />
      <declaration type="long" name="exponent" />
      <declaration type="long" name="m" />
      <scope startLine="185" endLine="188">
        <comment>this was a normalized number, add the implicit most significant bit</comment>
      </scope>
      <scope startLine="189" endLine="191" />
      <declaration type="int" name="k" />
      <scope startLine="193" endLine="196" />
      <scope startLine="198" endLine="201" />
      <scope startLine="201" endLine="204" />
      <comment>compute m and k such that value = m * 2^k</comment>
    </method>
    <javadoc>
      <text>* Create a fraction given the double value and maximum error allowed.
 * <p>
 * References:
 * <ul>
 * <li><a href="http://mathworld.wolfram.com/ContinuedFraction.html">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p></text>
      <param>valuethe double value to convert to a fraction.</param>
      <param>epsilonmaximum error allowed. The resulting fraction is within
 * <code>epsilon</code> of <code>value</code>, in absolute terms.</param>
      <param>maxIterationsmaximum number of convergents.</param>
      <throws>FractionConversionExceptionif the continued fraction failed to converge.</throws>
      <see>#BigFraction(double)</see>
    </javadoc>
    <method type="constructor" name="BigFraction" startLine="231" endLine="233" />
    <javadoc>
      <text>* Create a fraction given the double value and either the maximum error
 * allowed or the maximum number of denominator digits.
 * <p>
 * NOTE: This constructor is called with EITHER - a valid epsilon value and
 * the maxDenominator set to Integer.MAX_VALUE (that way the maxDenominator
 * has no effect). OR - a valid maxDenominator value and the epsilon value
 * set to zero (that way epsilon only has effect if there is an exact match
 * before the maxDenominator value is reached).
 * </p>
 * <p>
 * It has been done this way so that the same code can be (re)used for both
 * scenarios. However this could be confusing to users if it were part of
 * the public API and this constructor should therefore remain PRIVATE.
 * </p>
 * See JIRA issue ticket MATH-181 for more details:
 * https://issues.apache.org/jira/browse/MATH-181</text>
      <param>valuethe double value to convert to a fraction.</param>
      <param>epsilonmaximum error allowed. The resulting fraction is within
 * <code>epsilon</code> of <code>value</code>, in absolute terms.</param>
      <param>maxDenominatormaximum denominator value allowed.</param>
      <param>maxIterationsmaximum number of convergents.</param>
      <throws>FractionConversionExceptionif the continued fraction failed to converge.</throws>
    </javadoc>
    <method type="constructor" name="BigFraction" startLine="271" endLine="333">
      <declaration type="long" name="overflow" />
      <declaration type="double" name="r0" />
      <declaration type="long" name="a0" />
      <scope startLine="275" endLine="277" />
      <scope startLine="281" endLine="285" />
      <declaration type="long" name="p0" />
      <declaration type="long" name="q0" />
      <declaration type="long" name="p1" />
      <declaration type="long" name="q1" />
      <declaration type="long" name="p2" />
      <declaration type="long" name="q2" />
      <declaration type="int" name="n" />
      <declaration type="boolean" name="stop" />
      <scope startLine="297" endLine="320">
        <declaration type="double" name="r1" />
        <declaration type="long" name="a1" />
        <scope startLine="303" endLine="305" />
        <declaration type="double" name="convergent" />
        <scope startLine="310" endLine="317" />
        <scope startLine="317" endLine="319" />
      </scope>
      <scope startLine="322" endLine="324" />
      <scope startLine="326" endLine="329" />
      <scope startLine="329" endLine="332" />
      <comment>check for (almost) integer arguments, which should not go</comment>
      <comment>to iterations.</comment>
    </method>
    <javadoc>
      <text>* Create a fraction given the double value and maximum denominator.
 * <p>
 * References:
 * <ul>
 * <li><a href="http://mathworld.wolfram.com/ContinuedFraction.html">
 * Continued Fraction</a> equations (11) and (22)-(26)</li>
 * </ul>
 * </p></text>
      <param>valuethe double value to convert to a fraction.</param>
      <param>maxDenominatorThe maximum allowed value for denominator.</param>
      <throws>FractionConversionExceptionif the continued fraction failed to converge.</throws>
    </javadoc>
    <method type="constructor" name="BigFraction" startLine="353" endLine="355" />
    <javadoc>
      <text>* <p>
 * Create a {@link BigFraction} equivalent to the passed <tt>int</tt>, ie
 * "num / 1".
 * </p></text>
      <param>numthe numerator.</param>
    </javadoc>
    <method type="constructor" name="BigFraction" startLine="366" endLine="368" />
    <javadoc>
      <text>* <p>
 * Create a {@link BigFraction} given the numerator and denominator as simple
 * <tt>int</tt>. The {@link BigFraction} is reduced to lowest terms.
 * </p></text>
      <param>numthe numerator.</param>
      <param>denthe denominator.</param>
    </javadoc>
    <method type="constructor" name="BigFraction" startLine="381" endLine="383" />
    <javadoc>
      <text>* <p>
 * Create a {@link BigFraction} equivalent to the passed long, ie "num / 1".
 * </p></text>
      <param>numthe numerator.</param>
    </javadoc>
    <method type="constructor" name="BigFraction" startLine="393" endLine="395" />
    <javadoc>
      <text>* <p>
 * Create a {@link BigFraction} given the numerator and denominator as simple
 * <tt>long</tt>. The {@link BigFraction} is reduced to lowest terms.
 * </p></text>
      <param>numthe numerator.</param>
      <param>denthe denominator.</param>
    </javadoc>
    <method type="constructor" name="BigFraction" startLine="408" endLine="410" />
    <javadoc>
      <text>* <p>
 * Creates a <code>BigFraction</code> instance with the 2 parts of a fraction
 * Y/Z.
 * </p>
 * <p>
 * Any negative signs are resolved to be on the numerator.
 * </p></text>
      <param>numeratorthe numerator, for example the three in 'three sevenths'.</param>
      <param>denominatorthe denominator, for example the seven in 'three sevenths'.</param>
      <return>a new fraction instance, with the numerator and denominator
 * reduced.</return>
      <throws>ArithmeticExceptionif the denominator is <code>zero</code>.</throws>
    </javadoc>
    <method type="BigFraction" name="getReducedFraction" startLine="432" endLine="438">
      <scope startLine="433" endLine="435">
        <comment>normalize zero.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Returns the absolute value of this {@link BigFraction}.
 * </p></text>
      <return>the absolute value as a {@link BigFraction}.</return>
    </javadoc>
    <method type="BigFraction" name="abs" startLine="447" endLine="449" />
    <javadoc>
      <text>* <p>
 * Adds the value of this fraction to the passed {@link BigInteger},
 * returning the result in reduced form.
 * </p></text>
      <param>bgthe {@link BigInteger} to add, must'nt be <code>null</code>.</param>
      <return>a <code>BigFraction</code> instance with the resulting values.</return>
      <throws>NullArgumentExceptionif the {@link BigInteger} is <code>null</code>.</throws>
    </javadoc>
    <method type="BigFraction" name="add" startLine="463" endLine="466" />
    <javadoc>
      <text>* <p>
 * Adds the value of this fraction to the passed <tt>integer</tt>, returning
 * the result in reduced form.
 * </p></text>
      <param>ithe <tt>integer</tt> to add.</param>
      <return>a <code>BigFraction</code> instance with the resulting values.</return>
    </javadoc>
    <method type="BigFraction" name="add" startLine="478" endLine="480" />
    <javadoc>
      <text>* <p>
 * Adds the value of this fraction to the passed <tt>long</tt>, returning
 * the result in reduced form.
 * </p></text>
      <param>lthe <tt>long</tt> to add.</param>
      <return>a <code>BigFraction</code> instance with the resulting values.</return>
    </javadoc>
    <method type="BigFraction" name="add" startLine="492" endLine="494" />
    <javadoc>
      <text>* <p>
 * Adds the value of this fraction to another, returning the result in
 * reduced form.
 * </p></text>
      <param>fractionthe {@link BigFraction} to add, must not be <code>null</code>.</param>
      <return>a {@link BigFraction} instance with the resulting values.</return>
      <throws>NullArgumentException if the {@link BigFraction} is {@code null}.</throws>
    </javadoc>
    <method type="BigFraction" name="add" startLine="507" endLine="527">
      <scope startLine="508" endLine="510" />
      <scope startLine="511" endLine="513" />
      <declaration type="BigInteger" name="num" />
      <declaration type="BigInteger" name="den" />
      <scope startLine="518" endLine="521" />
      <scope startLine="521" endLine="524" />
    </method>
    <javadoc>
      <text>* <p>
 * Gets the fraction as a <code>BigDecimal</code>. This calculates the
 * fraction as the numerator divided by denominator.
 * </p></text>
      <return>the fraction as a <code>BigDecimal</code>.</return>
      <throws>ArithmeticExceptionif the exact quotient does not have a terminating decimal
 * expansion.</throws>
      <see>BigDecimal</see>
    </javadoc>
    <method type="BigDecimal" name="bigDecimalValue" startLine="541" endLine="543" />
    <javadoc>
      <text>* <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed
 * rounding mode. This calculates the fraction as the numerator divided by
 * denominator.
 * </p></text>
      <param>roundingModerounding mode to apply. see {@link BigDecimal} constants.</param>
      <return>the fraction as a <code>BigDecimal</code>.</return>
      <throws>IllegalArgumentExceptionif <tt>roundingMode</tt> does not represent a valid rounding
 * mode.</throws>
      <see>BigDecimal</see>
    </javadoc>
    <method type="BigDecimal" name="bigDecimalValue" startLine="560" endLine="562" />
    <javadoc>
      <text>* <p>
 * Gets the fraction as a <code>BigDecimal</code> following the passed scale
 * and rounding mode. This calculates the fraction as the numerator divided
 * by denominator.
 * </p></text>
      <param>scalescale of the <code>BigDecimal</code> quotient to be returned.
 * see {@link BigDecimal} for more information.</param>
      <param>roundingModerounding mode to apply. see {@link BigDecimal} constants.</param>
      <return>the fraction as a <code>BigDecimal</code>.</return>
      <see>BigDecimal</see>
    </javadoc>
    <method type="BigDecimal" name="bigDecimalValue" startLine="579" endLine="581" />
    <javadoc>
      <text>* <p>
 * Compares this object to another based on size.
 * </p></text>
      <param>objectthe object to compare to, must not be <code>null</code>.</param>
      <return>-1 if this is less than <tt>object</tt>, +1 if this is greater
 * than <tt>object</tt>, 0 if they are equal.</return>
      <see>java.lang.Comparable#compareTo(java.lang.Object)</see>
    </javadoc>
    <method type="int" name="compareTo" startLine="594" endLine="598">
      <declaration type="BigInteger" name="nOd" />
      <declaration type="BigInteger" name="dOn" />
    </method>
    <javadoc>
      <text>* <p>
 * Divide the value of this fraction by the passed {@code BigInteger},
 * ie {@code this * 1 / bg}, returning the result in reduced form.
 * </p></text>
      <param>bg the {@code BigInteger} to divide by, must not be {@code null}</param>
      <return>a {@link BigFraction} instance with the resulting values</return>
      <throws>NullArgumentException if the {@code BigInteger} is {@code null}</throws>
      <throws>MathArithmeticException if the fraction to divide by is zero</throws>
    </javadoc>
    <method type="BigFraction" name="divide" startLine="611" endLine="619">
      <scope startLine="612" endLine="614" />
      <scope startLine="615" endLine="617" />
    </method>
    <javadoc>
      <text>* <p>
 * Divide the value of this fraction by the passed {@code int}, ie{@code this * 1 / i}, returning the result in reduced form.
 * </p></text>
      <param>i the {@code int} to divide by</param>
      <return>a {@link BigFraction} instance with the resulting values</return>
      <throws>MathArithmeticException if the fraction to divide by is zero</throws>
    </javadoc>
    <method type="BigFraction" name="divide" startLine="631" endLine="633" />
    <javadoc>
      <text>* <p>
 * Divide the value of this fraction by the passed {@code long}, ie{@code this * 1 / l}, returning the result in reduced form.
 * </p></text>
      <param>l the {@code long} to divide by</param>
      <return>a {@link BigFraction} instance with the resulting values</return>
      <throws>MathArithmeticException if the fraction to divide by is zero</throws>
    </javadoc>
    <method type="BigFraction" name="divide" startLine="645" endLine="647" />
    <javadoc>
      <text>* <p>
 * Divide the value of this fraction by another, returning the result in
 * reduced form.
 * </p></text>
      <param>fraction Fraction to divide by, must not be {@code null}.</param>
      <return>a {@link BigFraction} instance with the resulting values.</return>
      <throws>NullArgumentException if the {@code fraction} is {@code null}.</throws>
      <throws>MathArithmeticException if the fraction to divide by is zero</throws>
    </javadoc>
    <method type="BigFraction" name="divide" startLine="660" endLine="669">
      <scope startLine="661" endLine="663" />
      <scope startLine="664" endLine="666" />
    </method>
    <javadoc>
      <text>* <p>
 * Gets the fraction as a <tt>double</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * </p></text>
      <return>the fraction as a <tt>double</tt></return>
      <see>java.lang.Number#doubleValue()</see>
    </javadoc>
    <method type="double" name="doubleValue" startLine="681" endLine="692">
      <declaration type="double" name="result" />
      <scope startLine="683" endLine="690">
        <declaration type="int" name="shift" />
        <comment>Numerator and/or denominator must be out of range:</comment>
        <comment>Calculate how far to shift them to put them in range.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Test for the equality of two fractions. If the lowest term numerator and
 * denominators are the same for both fractions, the two fractions are
 * considered to be equal.
 * </p></text>
      <param>otherfraction to test for equality to this fraction, can be
 * <code>null</code>.</param>
      <return>true if two fractions are equal, false if object is
 * <code>null</code>, not an instance of {@link BigFraction}, or not
 * equal to this fraction instance.</return>
      <see>java.lang.Object#equals(java.lang.Object)</see>
    </javadoc>
    <method type="boolean" name="equals" startLine="710" endLine="722">
      <declaration type="boolean" name="ret" />
      <scope startLine="713" endLine="715" />
      <scope startLine="715" endLine="719">
        <declaration type="BigFraction" name="rhs" />
        <declaration type="BigFraction" name="thisOne" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Gets the fraction as a <tt>float</tt>. This calculates the fraction as
 * the numerator divided by denominator.
 * </p></text>
      <return>the fraction as a <tt>float</tt>.</return>
      <see>java.lang.Number#floatValue()</see>
    </javadoc>
    <method type="float" name="floatValue" startLine="734" endLine="745">
      <declaration type="float" name="result" />
      <scope startLine="736" endLine="743">
        <declaration type="int" name="shift" />
        <comment>Numerator and/or denominator must be out of range:</comment>
        <comment>Calculate how far to shift them to put them in range.</comment>
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Access the denominator as a <code>BigInteger</code>.
 * </p></text>
      <return>the denominator as a <code>BigInteger</code>.</return>
    </javadoc>
    <method type="BigInteger" name="getDenominator" startLine="754" endLine="756" />
    <javadoc>
      <text>* <p>
 * Access the denominator as a <tt>int</tt>.
 * </p></text>
      <return>the denominator as a <tt>int</tt>.</return>
    </javadoc>
    <method type="int" name="getDenominatorAsInt" startLine="765" endLine="767" />
    <javadoc>
      <text>* <p>
 * Access the denominator as a <tt>long</tt>.
 * </p></text>
      <return>the denominator as a <tt>long</tt>.</return>
    </javadoc>
    <method type="long" name="getDenominatorAsLong" startLine="776" endLine="778" />
    <javadoc>
      <text>* <p>
 * Access the numerator as a <code>BigInteger</code>.
 * </p></text>
      <return>the numerator as a <code>BigInteger</code>.</return>
    </javadoc>
    <method type="BigInteger" name="getNumerator" startLine="787" endLine="789" />
    <javadoc>
      <text>* <p>
 * Access the numerator as a <tt>int</tt>.
 * </p></text>
      <return>the numerator as a <tt>int</tt>.</return>
    </javadoc>
    <method type="int" name="getNumeratorAsInt" startLine="798" endLine="800" />
    <javadoc>
      <text>* <p>
 * Access the numerator as a <tt>long</tt>.
 * </p></text>
      <return>the numerator as a <tt>long</tt>.</return>
    </javadoc>
    <method type="long" name="getNumeratorAsLong" startLine="809" endLine="811" />
    <javadoc>
      <text>* <p>
 * Gets a hashCode for the fraction.
 * </p></text>
      <return>a hash code value for this object.</return>
      <see>java.lang.Object#hashCode()</see>
    </javadoc>
    <method type="int" name="hashCode" startLine="822" endLine="824" />
    <javadoc>
      <text>* <p>
 * Gets the fraction as an <tt>int</tt>. This returns the whole number part
 * of the fraction.
 * </p></text>
      <return>the whole number fraction part.</return>
      <see>java.lang.Number#intValue()</see>
    </javadoc>
    <method type="int" name="intValue" startLine="836" endLine="838" />
    <javadoc>
      <text>* <p>
 * Gets the fraction as a <tt>long</tt>. This returns the whole number part
 * of the fraction.
 * </p></text>
      <return>the whole number fraction part.</return>
      <see>java.lang.Number#longValue()</see>
    </javadoc>
    <method type="long" name="longValue" startLine="850" endLine="852" />
    <javadoc>
      <text>* <p>
 * Multiplies the value of this fraction by the passed
 * <code>BigInteger</code>, returning the result in reduced form.
 * </p></text>
      <param>bg the {@code BigInteger} to multiply by.</param>
      <return>a {@code BigFraction} instance with the resulting values.</return>
      <throws>NullArgumentException if {@code bg} is {@code null}.</throws>
    </javadoc>
    <method type="BigFraction" name="multiply" startLine="864" endLine="869">
      <scope startLine="865" endLine="867" />
    </method>
    <javadoc>
      <text>* <p>
 * Multiply the value of this fraction by the passed <tt>int</tt>, returning
 * the result in reduced form.
 * </p></text>
      <param>ithe <tt>int</tt> to multiply by.</param>
      <return>a {@link BigFraction} instance with the resulting values.</return>
    </javadoc>
    <method type="BigFraction" name="multiply" startLine="881" endLine="883" />
    <javadoc>
      <text>* <p>
 * Multiply the value of this fraction by the passed <tt>long</tt>,
 * returning the result in reduced form.
 * </p></text>
      <param>lthe <tt>long</tt> to multiply by.</param>
      <return>a {@link BigFraction} instance with the resulting values.</return>
    </javadoc>
    <method type="BigFraction" name="multiply" startLine="895" endLine="897" />
    <javadoc>
      <text>* <p>
 * Multiplies the value of this fraction by another, returning the result in
 * reduced form.
 * </p></text>
      <param>fraction Fraction to multiply by, must not be {@code null}.</param>
      <return>a {@link BigFraction} instance with the resulting values.</return>
      <throws>NullArgumentException if {@code fraction} is {@code null}.</throws>
    </javadoc>
    <method type="BigFraction" name="multiply" startLine="909" endLine="919">
      <scope startLine="910" endLine="912" />
      <scope startLine="914" endLine="916" />
    </method>
    <javadoc>
      <text>* <p>
 * Return the additive inverse of this fraction, returning the result in
 * reduced form.
 * </p></text>
      <return>the negation of this fraction.</return>
    </javadoc>
    <method type="BigFraction" name="negate" startLine="929" endLine="931" />
    <javadoc>
      <text>* <p>
 * Gets the fraction percentage as a <tt>double</tt>. This calculates the
 * fraction as the numerator divided by denominator multiplied by 100.
 * </p></text>
      <return>the fraction percentage as a <tt>double</tt>.</return>
    </javadoc>
    <method type="double" name="percentageValue" startLine="941" endLine="943" />
    <javadoc>
      <text>* <p>
 * Returns a {@code BigFraction} whose value is{@code (this<sup>exponent</sup>)}, returning the result in reduced form.
 * </p></text>
      <param>exponentexponent to which this {@code BigFraction} is to be
 * raised.</param>
      <return><tt>this<sup>exponent</sup></tt>.</return>
    </javadoc>
    <method type="BigFraction" name="pow" startLine="956" endLine="961">
      <scope startLine="957" endLine="959" />
    </method>
    <javadoc>
      <text>* <p>
 * Returns a <code>BigFraction</code> whose value is
 * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.
 * </p></text>
      <param>exponentexponent to which this <code>BigFraction</code> is to be raised.</param>
      <return><tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.</return>
    </javadoc>
    <method type="BigFraction" name="pow" startLine="973" endLine="980">
      <scope startLine="974" endLine="977" />
    </method>
    <javadoc>
      <text>* <p>
 * Returns a <code>BigFraction</code> whose value is
 * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.
 * </p></text>
      <param>exponentexponent to which this <code>BigFraction</code> is to be raised.</param>
      <return><tt>this<sup>exponent</sup></tt> as a <code>BigFraction</code>.</return>
    </javadoc>
    <method type="BigFraction" name="pow" startLine="992" endLine="1000">
      <scope startLine="993" endLine="997">
        <declaration type="BigInteger" name="eNeg" />
      </scope>
    </method>
    <javadoc>
      <text>* <p>
 * Returns a <code>double</code> whose value is
 * <tt>(this<sup>exponent</sup>)</tt>, returning the result in reduced form.
 * </p></text>
      <param>exponentexponent to which this <code>BigFraction</code> is to be raised.</param>
      <return><tt>this<sup>exponent</sup></tt>.</return>
    </javadoc>
    <method type="double" name="pow" startLine="1012" endLine="1015" />
    <javadoc>
      <text>* <p>
 * Return the multiplicative inverse of this fraction.
 * </p></text>
      <return>the reciprocal fraction.</return>
    </javadoc>
    <method type="BigFraction" name="reciprocal" startLine="1024" endLine="1026" />
    <javadoc>
      <text>* <p>
 * Reduce this <code>BigFraction</code> to its lowest terms.
 * </p></text>
      <return>the reduced <code>BigFraction</code>. It doesn't change anything if
 * the fraction can be reduced.</return>
    </javadoc>
    <method type="BigFraction" name="reduce" startLine="1036" endLine="1039">
      <declaration type="BigInteger" name="gcd" />
    </method>
    <javadoc>
      <text>* <p>
 * Subtracts the value of an {@link BigInteger} from the value of this{@code BigFraction}, returning the result in reduced form.
 * </p></text>
      <param>bg the {@link BigInteger} to subtract, cannot be {@code null}.</param>
      <return>a {@code BigFraction} instance with the resulting values.</return>
      <throws>NullArgumentException if the {@link BigInteger} is {@code null}.</throws>
    </javadoc>
    <method type="BigFraction" name="subtract" startLine="1051" endLine="1056">
      <scope startLine="1052" endLine="1054" />
    </method>
    <javadoc>
      <text>* <p>
 * Subtracts the value of an {@code integer} from the value of this{@code BigFraction}, returning the result in reduced form.
 * </p></text>
      <param>i the {@code integer} to subtract.</param>
      <return>a {@code BigFraction} instance with the resulting values.</return>
    </javadoc>
    <method type="BigFraction" name="subtract" startLine="1067" endLine="1069" />
    <javadoc>
      <text>* <p>
 * Subtracts the value of a {@code long} from the value of this{@code BigFraction}, returning the result in reduced form.
 * </p></text>
      <param>l the {@code long} to subtract.</param>
      <return>a {@code BigFraction} instance with the resulting values.</return>
    </javadoc>
    <method type="BigFraction" name="subtract" startLine="1080" endLine="1082" />
    <javadoc>
      <text>* <p>
 * Subtracts the value of another fraction from the value of this one,
 * returning the result in reduced form.
 * </p></text>
      <param>fraction {@link BigFraction} to subtract, must not be {@code null}.</param>
      <return>a {@link BigFraction} instance with the resulting values</return>
      <throws>NullArgumentException if the {@code fraction} is {@code null}.</throws>
    </javadoc>
    <method type="BigFraction" name="subtract" startLine="1094" endLine="1113">
      <scope startLine="1095" endLine="1097" />
      <scope startLine="1098" endLine="1100" />
      <declaration type="BigInteger" name="num" />
      <declaration type="BigInteger" name="den" />
      <scope startLine="1104" endLine="1107" />
      <scope startLine="1107" endLine="1110" />
    </method>
    <javadoc>
      <text>* <p>
 * Returns the <code>String</code> representing this fraction, ie
 * "num / dem" or just "num" if the denominator is one.
 * </p></text>
      <return>a string representation of the fraction.</return>
      <see>java.lang.Object#toString()</see>
    </javadoc>
    <method type="String" name="toString" startLine="1125" endLine="1135">
      <declaration type="String" name="str" />
      <scope startLine="1127" endLine="1129" />
      <scope startLine="1129" endLine="1131" />
      <scope startLine="1131" endLine="1133" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="BigFractionField" name="getField" startLine="1138" endLine="1140" />
  </class>
</source>
