<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.nonlinear.scalar">
  <import name="java.util.Collections" />
  <import name="java.util.List" />
  <import name="java.util.ArrayList" />
  <import name="java.util.Comparator" />
  <import name="org.apache.commons.math3.exception.NotStrictlyPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.random.RandomVectorGenerator" />
  <import name="org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer" />
  <import name="org.apache.commons.math3.optim.PointValuePair" />
  <class name="MultiStartMultivariateOptimizer" extends="BaseMultiStartMultivariateOptimizer<PointValuePair>" startLine="29">
    <javadoc>
      <text>* Multi-start optimizer.
 * This class wraps an optimizer in order to use it several times in
 * turn with different starting points (trying to avoid being trapped
 * in a local extremum when looking for a global one).</text>
      <version>$Id: MultiStartMultivariateOptimizer.java 1435539 2013-01-19 13:27:24Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Underlying optimizer.</text>
    </javadoc>
    <declaration type="MultivariateOptimizer" name="optimizer" />
    <javadoc>
      <text>* Found optima.</text>
    </javadoc>
    <declaration type="List<PointValuePair>" name="optima" />
    <javadoc>
      <text>* Create a multi-start optimizer from a single-start optimizer.</text>
      <param>optimizer Single-start optimizer to wrap.</param>
      <param>starts Number of starts to perform.
 * If {@code starts == 1}, the result will be same as if {@code optimizer}is called directly.</param>
      <param>generator Random vector generator to use for restarts.</param>
      <throws>NullArgumentException if {@code optimizer} or {@code generator}is {@code null}.</throws>
      <throws>NotStrictlyPositiveException if {@code starts < 1}.</throws>
    </javadoc>
    <method type="constructor" name="MultiStartMultivariateOptimizer" startLine="62" endLine="65" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="PointValuePair[]" name="getOptima" startLine="71" endLine="74" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="store" startLine="80" endLine="82" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="clear" startLine="88" endLine="90" />
    <javadoc>
      <return>a comparator for sorting the optima.</return>
    </javadoc>
    <method type="Comparator<PointValuePair>" name="getPairComparator" startLine="95" endLine="110">
      <method type="int" name="compare" startLine="98" endLine="108">
        <scope startLine="99" endLine="101" />
        <scope startLine="101" endLine="103" />
        <declaration type="double" name="v1" />
        <declaration type="double" name="v2" />
      </method>
    </method>
  </class>
</source>
