<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="java.text.FieldPosition" />
  <import name="java.text.NumberFormat" />
  <import name="java.text.ParsePosition" />
  <import name="java.util.ArrayList" />
  <import name="java.util.List" />
  <import name="java.util.Locale" />
  <import name="org.apache.commons.math3.exception.MathParseException" />
  <import name="org.apache.commons.math3.util.CompositeFormat" />
  <class name="RealMatrixFormat" startLine="30">
    <javadoc>
      <text>* Formats a {@code nxm} matrix in components list format
 * "{{a<sub>0</sub><sub>0</sub>,a<sub>0</sub><sub>1</sub>, ...,
 * a<sub>0</sub><sub>m-1</sub>},{a<sub>1</sub><sub>0</sub>,
 * a<sub>1</sub><sub>1</sub>, ..., a<sub>1</sub><sub>m-1</sub>},{...},{
 * a<sub>n-1</sub><sub>0</sub>, a<sub>n-1</sub><sub>1</sub>, ...,
 * a<sub>n-1</sub><sub>m-1</sub>}}".
 * <p>The prefix and suffix "{" and "}", the row prefix and suffix "{" and "}",
 * the row separator "," and the column separator "," can be replaced by any
 * user-defined strings. The number format for components can be configured.</p>
 * <p>White space is ignored at parse time, even if it is in the prefix, suffix
 * or separator specifications. So even if the default separator does include a space
 * character that is used at format time, both input string "{{1,1,1}}" and
 * " { { 1 , 1 , 1 } } " will be parsed without error and the same matrix will be
 * returned. In the second case, however, the parse position after parsing will be
 * just after the closing curly brace, i.e. just before the trailing space.</p>
 * <p><b>Note:</b> the grouping functionality of the used {@link NumberFormat} is
 * disabled to prevent problems when parsing (e.g. 1,345.34 would be a valid number
 * but conflicts with the default column separator).</p></text>
      <since>3.1</since>
      <version>$Id: RealMatrixFormat.java 1364793 2012-07-23 20:46:28Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* The default prefix: "{".</text>
    </javadoc>
    <declaration type="String" name="DEFAULT_PREFIX" />
    <javadoc>
      <text>* The default suffix: "}".</text>
    </javadoc>
    <declaration type="String" name="DEFAULT_SUFFIX" />
    <javadoc>
      <text>* The default row prefix: "{".</text>
    </javadoc>
    <declaration type="String" name="DEFAULT_ROW_PREFIX" />
    <javadoc>
      <text>* The default row suffix: "}".</text>
    </javadoc>
    <declaration type="String" name="DEFAULT_ROW_SUFFIX" />
    <javadoc>
      <text>* The default row separator: ",".</text>
    </javadoc>
    <declaration type="String" name="DEFAULT_ROW_SEPARATOR" />
    <javadoc>
      <text>* The default column separator: ",".</text>
    </javadoc>
    <declaration type="String" name="DEFAULT_COLUMN_SEPARATOR" />
    <javadoc>
      <text>* Prefix.</text>
    </javadoc>
    <declaration type="String" name="prefix" />
    <javadoc>
      <text>* Suffix.</text>
    </javadoc>
    <declaration type="String" name="suffix" />
    <javadoc>
      <text>* Row prefix.</text>
    </javadoc>
    <declaration type="String" name="rowPrefix" />
    <javadoc>
      <text>* Row suffix.</text>
    </javadoc>
    <declaration type="String" name="rowSuffix" />
    <javadoc>
      <text>* Row separator.</text>
    </javadoc>
    <declaration type="String" name="rowSeparator" />
    <javadoc>
      <text>* Column separator.</text>
    </javadoc>
    <declaration type="String" name="columnSeparator" />
    <javadoc>
      <text>* The format used for components.</text>
    </javadoc>
    <declaration type="NumberFormat" name="format" />
    <javadoc>
      <text>* Create an instance with default settings.
 * <p>The instance uses the default prefix, suffix and row/column separator:
 * "[", "]", ";" and ", " and the default number format for components.</p></text>
    </javadoc>
    <method type="constructor" name="RealMatrixFormat" startLine="89" endLine="92" />
    <javadoc>
      <text>* Create an instance with a custom number format for components.</text>
      <param>format the custom format for components.</param>
    </javadoc>
    <method type="constructor" name="RealMatrixFormat" startLine="98" endLine="101" />
    <javadoc>
      <text>* Create an instance with custom prefix, suffix and separator.</text>
      <param>prefix prefix to use instead of the default "{"</param>
      <param>suffix suffix to use instead of the default "}"</param>
      <param>rowPrefix row prefix to use instead of the default "{"</param>
      <param>rowSuffix row suffix to use instead of the default "}"</param>
      <param>rowSeparator tow separator to use instead of the default ";"</param>
      <param>columnSeparator column separator to use instead of the default ", "</param>
    </javadoc>
    <method type="constructor" name="RealMatrixFormat" startLine="114" endLine="117" />
    <javadoc>
      <text>* Create an instance with custom prefix, suffix, separator and format
 * for components.</text>
      <param>prefix prefix to use instead of the default "{"</param>
      <param>suffix suffix to use instead of the default "}"</param>
      <param>rowPrefix row prefix to use instead of the default "{"</param>
      <param>rowSuffix row suffix to use instead of the default "}"</param>
      <param>rowSeparator tow separator to use instead of the default ";"</param>
      <param>columnSeparator column separator to use instead of the default ", "</param>
      <param>format the custom format for components.</param>
    </javadoc>
    <method type="constructor" name="RealMatrixFormat" startLine="133" endLine="143">
      <comment>disable grouping to prevent parsing problems</comment>
    </method>
    <javadoc>
      <text>* Get the set of locales for which real vectors formats are available.
 * <p>This is the same set as the {@link NumberFormat} set.</p></text>
      <return>available real vector format locales.</return>
    </javadoc>
    <method type="Locale[]" name="getAvailableLocales" startLine="150" endLine="152" />
    <javadoc>
      <text>* Get the format prefix.</text>
      <return>format prefix.</return>
    </javadoc>
    <method type="String" name="getPrefix" startLine="158" endLine="160" />
    <javadoc>
      <text>* Get the format suffix.</text>
      <return>format suffix.</return>
    </javadoc>
    <method type="String" name="getSuffix" startLine="166" endLine="168" />
    <javadoc>
      <text>* Get the format prefix.</text>
      <return>format prefix.</return>
    </javadoc>
    <method type="String" name="getRowPrefix" startLine="174" endLine="176" />
    <javadoc>
      <text>* Get the format suffix.</text>
      <return>format suffix.</return>
    </javadoc>
    <method type="String" name="getRowSuffix" startLine="182" endLine="184" />
    <javadoc>
      <text>* Get the format separator between rows of the matrix.</text>
      <return>format separator for rows.</return>
    </javadoc>
    <method type="String" name="getRowSeparator" startLine="190" endLine="192" />
    <javadoc>
      <text>* Get the format separator between components.</text>
      <return>format separator between components.</return>
    </javadoc>
    <method type="String" name="getColumnSeparator" startLine="198" endLine="200" />
    <javadoc>
      <text>* Get the components format.</text>
      <return>components format.</return>
    </javadoc>
    <method type="NumberFormat" name="getFormat" startLine="206" endLine="208" />
    <javadoc>
      <text>* Returns the default real vector format for the current locale.</text>
      <return>the default real vector format.</return>
    </javadoc>
    <method type="RealMatrixFormat" name="getInstance" startLine="214" endLine="216" />
    <javadoc>
      <text>* Returns the default real vector format for the given locale.</text>
      <param>locale the specific locale used by the format.</param>
      <return>the real vector format specific to the given locale.</return>
    </javadoc>
    <method type="RealMatrixFormat" name="getInstance" startLine="223" endLine="225" />
    <javadoc>
      <text>* This method calls {@link #format(RealMatrix,StringBuffer,FieldPosition)}.</text>
      <param>m RealMatrix object to format.</param>
      <return>a formatted matrix.</return>
    </javadoc>
    <method type="String" name="format" startLine="233" endLine="235" />
    <javadoc>
      <text>* Formats a {@link RealMatrix} object to produce a string.</text>
      <param>matrix the object to format.</param>
      <param>toAppendTo where the text is to be appended</param>
      <param>pos On input: an alignment field, if desired. On output: the
 * offsets of the alignment field</param>
      <return>the value passed in as toAppendTo.</return>
    </javadoc>
    <method type="StringBuffer" name="format" startLine="246" endLine="274">
      <declaration type="int" name="rows" />
      <scope startLine="256" endLine="268">
        <scope startLine="258" endLine="263">
          <scope startLine="259" endLine="261" />
        </scope>
        <scope startLine="265" endLine="267" />
      </scope>
      <comment>format prefix</comment>
      <comment>format rows</comment>
      <comment>format suffix</comment>
    </method>
    <javadoc>
      <text>* Parse a string to produce a {@link RealMatrix} object.</text>
      <param>source String to parse.</param>
      <return>the parsed {@link RealMatrix} object.</return>
      <throws>MathParseException if the beginning of the specified string
 * cannot be parsed.</throws>
    </javadoc>
    <method type="RealMatrix" name="parse" startLine="284" endLine="293">
      <declaration type="ParsePosition" name="parsePosition" />
      <declaration type="RealMatrix" name="result" />
      <scope startLine="287" endLine="291" />
    </method>
    <javadoc>
      <text>* Parse a string to produce a {@link RealMatrix} object.</text>
      <param>source String to parse.</param>
      <param>pos input/ouput parsing parameter.</param>
      <return>the parsed {@link RealMatrix} object.</return>
    </javadoc>
    <method type="RealMatrix" name="parse" startLine="302" endLine="394">
      <declaration type="int" name="initialIndex" />
      <declaration type="String" name="trimmedPrefix" />
      <declaration type="String" name="trimmedSuffix" />
      <declaration type="String" name="trimmedRowPrefix" />
      <declaration type="String" name="trimmedRowSuffix" />
      <declaration type="String" name="trimmedColumnSeparator" />
      <declaration type="String" name="trimmedRowSeparator" />
      <scope startLine="314" endLine="316" />
      <declaration type="List<List<Number>>" name="matrix" />
      <declaration type="List<Number>" name="rowComponents" />
      <scope startLine="321" endLine="365">
        <scope startLine="323" endLine="340">
          <scope startLine="325" endLine="339">
            <scope startLine="327" endLine="329" />
            <scope startLine="329" endLine="338">
              <scope startLine="331" endLine="335" />
              <scope startLine="335" endLine="337" />
            </scope>
          </scope>
        </scope>
        <scope startLine="340" endLine="346">
          <scope startLine="343" endLine="345" />
        </scope>
        <scope startLine="348" endLine="363">
          <declaration type="Number" name="component" />
          <scope startLine="351" endLine="353" />
          <scope startLine="353" endLine="362">
            <scope startLine="354" endLine="356" />
            <scope startLine="356" endLine="361" />
          </scope>
        </scope>
        <comment>invalid component</comment>
        <comment>set index back to initial, error index should already be set</comment>
      </scope>
      <scope startLine="367" endLine="369" />
      <scope startLine="373" endLine="375" />
      <scope startLine="378" endLine="381" />
      <declaration type="double[][][]" name="data" />
      <declaration type="int" name="row" />
      <scope startLine="386" endLine="392">
        <scope startLine="388" endLine="390" />
      </scope>
      <comment>parse prefix</comment>
      <comment>parse components</comment>
      <comment>parse suffix</comment>
      <comment>do not allow an empty matrix</comment>
      <comment>build vector</comment>
    </method>
  </class>
</source>
