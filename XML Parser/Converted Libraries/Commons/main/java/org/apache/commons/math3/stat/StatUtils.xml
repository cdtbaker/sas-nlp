<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.stat">
  <import name="org.apache.commons.math3.exception.MathIllegalArgumentException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NoDataException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.stat.descriptive.DescriptiveStatistics" />
  <import name="org.apache.commons.math3.stat.descriptive.UnivariateStatistic" />
  <import name="org.apache.commons.math3.stat.descriptive.moment.GeometricMean" />
  <import name="org.apache.commons.math3.stat.descriptive.moment.Mean" />
  <import name="org.apache.commons.math3.stat.descriptive.moment.Variance" />
  <import name="org.apache.commons.math3.stat.descriptive.rank.Max" />
  <import name="org.apache.commons.math3.stat.descriptive.rank.Min" />
  <import name="org.apache.commons.math3.stat.descriptive.rank.Percentile" />
  <import name="org.apache.commons.math3.stat.descriptive.summary.Product" />
  <import name="org.apache.commons.math3.stat.descriptive.summary.Sum" />
  <import name="org.apache.commons.math3.stat.descriptive.summary.SumOfLogs" />
  <import name="org.apache.commons.math3.stat.descriptive.summary.SumOfSquares" />
  <class name="StatUtils" startLine="37">
    <javadoc>
      <text>* StatUtils provides static methods for computing statistics based on data
 * stored in double[] arrays.</text>
      <version>$Id: StatUtils.java 1416643 2012-12-03 19:37:14Z tn $</version>
    </javadoc>
    <javadoc>
      <text>* sum</text>
    </javadoc>
    <declaration type="UnivariateStatistic" name="SUM" />
    <javadoc>
      <text>* sumSq</text>
    </javadoc>
    <declaration type="UnivariateStatistic" name="SUM_OF_SQUARES" />
    <javadoc>
      <text>* prod</text>
    </javadoc>
    <declaration type="UnivariateStatistic" name="PRODUCT" />
    <javadoc>
      <text>* sumLog</text>
    </javadoc>
    <declaration type="UnivariateStatistic" name="SUM_OF_LOGS" />
    <javadoc>
      <text>* min</text>
    </javadoc>
    <declaration type="UnivariateStatistic" name="MIN" />
    <javadoc>
      <text>* max</text>
    </javadoc>
    <declaration type="UnivariateStatistic" name="MAX" />
    <javadoc>
      <text>* mean</text>
    </javadoc>
    <declaration type="UnivariateStatistic" name="MEAN" />
    <javadoc>
      <text>* variance</text>
    </javadoc>
    <declaration type="Variance" name="VARIANCE" />
    <javadoc>
      <text>* percentile</text>
    </javadoc>
    <declaration type="Percentile" name="PERCENTILE" />
    <javadoc>
      <text>* geometric mean</text>
    </javadoc>
    <declaration type="GeometricMean" name="GEOMETRIC_MEAN" />
    <javadoc>
      <text>* Private Constructor</text>
    </javadoc>
    <method type="constructor" name="StatUtils" startLine="78" endLine="79" />
    <javadoc>
      <text>* Returns the sum of the values in the input array, or
 * <code>Double.NaN</code> if the array is empty.
 * <p>
 * Throws <code>IllegalArgumentException</code> if the input array
 * is null.</p></text>
      <param>values  array of values to sum</param>
      <return>the sum of the values or <code>Double.NaN</code> if the array
 * is empty</return>
      <throws>MathIllegalArgumentException if the array is null</throws>
    </javadoc>
    <method type="double" name="sum" startLine="94" endLine="96" />
    <javadoc>
      <text>* Returns the sum of the entries in the specified portion of
 * the input array, or <code>Double.NaN</code> if the designated subarray
 * is empty.
 * <p>
 * Throws <code>IllegalArgumentException</code> if the array is null.</p></text>
      <param>values the input array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the sum of the values or Double.NaN if length = 0</return>
      <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
    </javadoc>
    <method type="double" name="sum" startLine="113" endLine="115" />
    <javadoc>
      <text>* Returns the sum of the squares of the entries in the input array, or
 * <code>Double.NaN</code> if the array is empty.
 * <p>
 * Throws <code>IllegalArgumentException</code> if the array is null.</p></text>
      <param>values  input array</param>
      <return>the sum of the squared values or <code>Double.NaN</code> if the
 * array is empty</return>
      <throws>MathIllegalArgumentException if the array is null</throws>
    </javadoc>
    <method type="double" name="sumSq" startLine="128" endLine="130" />
    <javadoc>
      <text>* Returns the sum of the squares of the entries in the specified portion of
 * the input array, or <code>Double.NaN</code> if the designated subarray
 * is empty.
 * <p>
 * Throws <code>IllegalArgumentException</code> if the array is null.</p></text>
      <param>values the input array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the sum of the squares of the values or Double.NaN if length = 0</return>
      <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
    </javadoc>
    <method type="double" name="sumSq" startLine="147" endLine="149" />
    <javadoc>
      <text>* Returns the product of the entries in the input array, or
 * <code>Double.NaN</code> if the array is empty.
 * <p>
 * Throws <code>IllegalArgumentException</code> if the array is null.</p></text>
      <param>values the input array</param>
      <return>the product of the values or Double.NaN if the array is empty</return>
      <throws>MathIllegalArgumentException if the array is null</throws>
    </javadoc>
    <method type="double" name="product" startLine="162" endLine="164" />
    <javadoc>
      <text>* Returns the product of the entries in the specified portion of
 * the input array, or <code>Double.NaN</code> if the designated subarray
 * is empty.
 * <p>
 * Throws <code>IllegalArgumentException</code> if the array is null.</p></text>
      <param>values the input array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the product of the values or Double.NaN if length = 0</return>
      <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
    </javadoc>
    <method type="double" name="product" startLine="181" endLine="183" />
    <javadoc>
      <text>* Returns the sum of the natural logs of the entries in the input array, or
 * <code>Double.NaN</code> if the array is empty.
 * <p>
 * Throws <code>IllegalArgumentException</code> if the array is null.</p>
 * <p>
 * See {@link org.apache.commons.math3.stat.descriptive.summary.SumOfLogs}.
 * </p></text>
      <param>values the input array</param>
      <return>the sum of the natural logs of the values or Double.NaN if
 * the array is empty</return>
      <throws>MathIllegalArgumentException if the array is null</throws>
    </javadoc>
    <method type="double" name="sumLog" startLine="200" endLine="202" />
    <javadoc>
      <text>* Returns the sum of the natural logs of the entries in the specified portion of
 * the input array, or <code>Double.NaN</code> if the designated subarray
 * is empty.
 * <p>
 * Throws <code>IllegalArgumentException</code> if the array is null.</p>
 * <p>
 * See {@link org.apache.commons.math3.stat.descriptive.summary.SumOfLogs}.
 * </p></text>
      <param>values the input array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the sum of the natural logs of the values or Double.NaN if
 * length = 0</return>
      <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
    </javadoc>
    <method type="double" name="sumLog" startLine="223" endLine="225" />
    <javadoc>
      <text>* Returns the arithmetic mean of the entries in the input array, or
 * <code>Double.NaN</code> if the array is empty.
 * <p>
 * Throws <code>IllegalArgumentException</code> if the array is null.</p>
 * <p>
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Mean} for
 * details on the computing algorithm.</p></text>
      <param>values the input array</param>
      <return>the mean of the values or Double.NaN if the array is empty</return>
      <throws>MathIllegalArgumentException if the array is null</throws>
    </javadoc>
    <method type="double" name="mean" startLine="241" endLine="243" />
    <javadoc>
      <text>* Returns the arithmetic mean of the entries in the specified portion of
 * the input array, or <code>Double.NaN</code> if the designated subarray
 * is empty.
 * <p>
 * Throws <code>IllegalArgumentException</code> if the array is null.</p>
 * <p>
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Mean} for
 * details on the computing algorithm.</p></text>
      <param>values the input array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the mean of the values or Double.NaN if length = 0</return>
      <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
    </javadoc>
    <method type="double" name="mean" startLine="263" endLine="265" />
    <javadoc>
      <text>* Returns the geometric mean of the entries in the input array, or
 * <code>Double.NaN</code> if the array is empty.
 * <p>
 * Throws <code>IllegalArgumentException</code> if the array is null.</p>
 * <p>
 * See {@link org.apache.commons.math3.stat.descriptive.moment.GeometricMean}for details on the computing algorithm.</p></text>
      <param>values the input array</param>
      <return>the geometric mean of the values or Double.NaN if the array is empty</return>
      <throws>MathIllegalArgumentException if the array is null</throws>
    </javadoc>
    <method type="double" name="geometricMean" startLine="281" endLine="283" />
    <javadoc>
      <text>* Returns the geometric mean of the entries in the specified portion of
 * the input array, or <code>Double.NaN</code> if the designated subarray
 * is empty.
 * <p>
 * Throws <code>IllegalArgumentException</code> if the array is null.</p>
 * <p>
 * See {@link org.apache.commons.math3.stat.descriptive.moment.GeometricMean}for details on the computing algorithm.</p></text>
      <param>values the input array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the geometric mean of the values or Double.NaN if length = 0</return>
      <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
    </javadoc>
    <method type="double" name="geometricMean" startLine="303" endLine="305" />
    <javadoc>
      <text>* Returns the variance of the entries in the input array, or
 * <code>Double.NaN</code> if the array is empty.
 * <p>This method returns the bias-corrected sample variance (using {@code n - 1} in
 * the denominator).  Use {@link #populationVariance(double[])} for the non-bias-corrected
 * population variance.</p>
 * <p>
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
 * details on the computing algorithm.</p>
 * <p>
 * Returns 0 for a single-value (i.e. length = 1) sample.</p>
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if the array is null.</p></text>
      <param>values the input array</param>
      <return>the variance of the values or Double.NaN if the array is empty</return>
      <throws>MathIllegalArgumentException if the array is null</throws>
    </javadoc>
    <method type="double" name="variance" startLine="327" endLine="329" />
    <javadoc>
      <text>* Returns the variance of the entries in the specified portion of
 * the input array, or <code>Double.NaN</code> if the designated subarray
 * is empty.
 * <p>This method returns the bias-corrected sample variance (using {@code n - 1} in
 * the denominator).  Use {@link #populationVariance(double[],int,int)} for the non-bias-corrected
 * population variance.</p>
 * <p>
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
 * details on the computing algorithm.</p>
 * <p>
 * Returns 0 for a single-value (i.e. length = 1) sample.</p>
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if the array is null or the
 * array index parameters are not valid.</p></text>
      <param>values the input array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the variance of the values or Double.NaN if length = 0</return>
      <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
    </javadoc>
    <method type="double" name="variance" startLine="356" endLine="358" />
    <javadoc>
      <text>* Returns the variance of the entries in the specified portion of
 * the input array, using the precomputed mean value.  Returns
 * <code>Double.NaN</code> if the designated subarray is empty.
 * <p>This method returns the bias-corrected sample variance (using {@code n - 1} in
 * the denominator).  Use {@link #populationVariance(double[],double,int,int)} for the non-bias-corrected
 * population variance.</p>
 * <p>
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
 * details on the computing algorithm.</p>
 * <p>
 * The formula used assumes that the supplied mean value is the arithmetic
 * mean of the sample data, not a known population parameter.  This method
 * is supplied only to save computation when the mean has already been
 * computed.</p>
 * <p>
 * Returns 0 for a single-value (i.e. length = 1) sample.</p>
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if the array is null or the
 * array index parameters are not valid.</p></text>
      <param>values the input array</param>
      <param>mean the precomputed mean value</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the variance of the values or Double.NaN if length = 0</return>
      <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
    </javadoc>
    <method type="double" name="variance" startLine="391" endLine="393" />
    <javadoc>
      <text>* Returns the variance of the entries in the input array, using the
 * precomputed mean value.  Returns <code>Double.NaN</code> if the array
 * is empty.
 * <p>This method returns the bias-corrected sample variance (using {@code n - 1} in
 * the denominator).  Use {@link #populationVariance(double[],double)} for the non-bias-corrected
 * population variance.</p>
 * <p>
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
 * details on the computing algorithm.</p>
 * <p>
 * The formula used assumes that the supplied mean value is the arithmetic
 * mean of the sample data, not a known population parameter.  This method
 * is supplied only to save computation when the mean has already been
 * computed.</p>
 * <p>
 * Returns 0 for a single-value (i.e. length = 1) sample.</p>
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if the array is null.</p></text>
      <param>values the input array</param>
      <param>mean the precomputed mean value</param>
      <return>the variance of the values or Double.NaN if the array is empty</return>
      <throws>MathIllegalArgumentException if the array is null</throws>
    </javadoc>
    <method type="double" name="variance" startLine="422" endLine="424" />
    <javadoc>
      <text>* Returns the <a href="http://en.wikibooks.org/wiki/Statistics/Summary/Variance">
 * population variance</a> of the entries in the input array, or
 * <code>Double.NaN</code> if the array is empty.
 * <p>
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
 * details on the formula and computing algorithm.</p>
 * <p>
 * Returns 0 for a single-value (i.e. length = 1) sample.</p>
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if the array is null.</p></text>
      <param>values the input array</param>
      <return>the population variance of the values or Double.NaN if the array is empty</return>
      <throws>MathIllegalArgumentException if the array is null</throws>
    </javadoc>
    <method type="double" name="populationVariance" startLine="443" endLine="445" />
    <javadoc>
      <text>* Returns the <a href="http://en.wikibooks.org/wiki/Statistics/Summary/Variance">
 * population variance</a> of the entries in the specified portion of
 * the input array, or <code>Double.NaN</code> if the designated subarray
 * is empty.
 * <p>
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
 * details on the computing algorithm.</p>
 * <p>
 * Returns 0 for a single-value (i.e. length = 1) sample.</p>
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if the array is null or the
 * array index parameters are not valid.</p></text>
      <param>values the input array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the population variance of the values or Double.NaN if length = 0</return>
      <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
    </javadoc>
    <method type="double" name="populationVariance" startLine="469" endLine="471" />
    <javadoc>
      <text>* Returns the <a href="http://en.wikibooks.org/wiki/Statistics/Summary/Variance">
 * population variance</a> of the entries in the specified portion of
 * the input array, using the precomputed mean value.  Returns
 * <code>Double.NaN</code> if the designated subarray is empty.
 * <p>
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
 * details on the computing algorithm.</p>
 * <p>
 * The formula used assumes that the supplied mean value is the arithmetic
 * mean of the sample data, not a known population parameter.  This method
 * is supplied only to save computation when the mean has already been
 * computed.</p>
 * <p>
 * Returns 0 for a single-value (i.e. length = 1) sample.</p>
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if the array is null or the
 * array index parameters are not valid.</p></text>
      <param>values the input array</param>
      <param>mean the precomputed mean value</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the population variance of the values or Double.NaN if length = 0</return>
      <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
    </javadoc>
    <method type="double" name="populationVariance" startLine="501" endLine="503" />
    <javadoc>
      <text>* Returns the <a href="http://en.wikibooks.org/wiki/Statistics/Summary/Variance">
 * population variance</a> of the entries in the input array, using the
 * precomputed mean value.  Returns <code>Double.NaN</code> if the array
 * is empty.
 * <p>
 * See {@link org.apache.commons.math3.stat.descriptive.moment.Variance} for
 * details on the computing algorithm.</p>
 * <p>
 * The formula used assumes that the supplied mean value is the arithmetic
 * mean of the sample data, not a known population parameter.  This method
 * is supplied only to save computation when the mean has already been
 * computed.</p>
 * <p>
 * Returns 0 for a single-value (i.e. length = 1) sample.</p>
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if the array is null.</p></text>
      <param>values the input array</param>
      <param>mean the precomputed mean value</param>
      <return>the population variance of the values or Double.NaN if the array is empty</return>
      <throws>MathIllegalArgumentException if the array is null</throws>
    </javadoc>
    <method type="double" name="populationVariance" startLine="529" endLine="531" />
    <javadoc>
      <text>* Returns the maximum of the entries in the input array, or
 * <code>Double.NaN</code> if the array is empty.
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if the array is null.</p>
 * <p>
 * <ul>
 * <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
 * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>
 * <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>,
 * the result is <code>Double.POSITIVE_INFINITY.</code></li>
 * </ul></p></text>
      <param>values the input array</param>
      <return>the maximum of the values or Double.NaN if the array is empty</return>
      <throws>MathIllegalArgumentException if the array is null</throws>
    </javadoc>
    <method type="double" name="max" startLine="550" endLine="552" />
    <javadoc>
      <text>* Returns the maximum of the entries in the specified portion of
 * the input array, or <code>Double.NaN</code> if the designated subarray
 * is empty.
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if the array is null or
 * the array index parameters are not valid.</p>
 * <p>
 * <ul>
 * <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
 * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>
 * <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>,
 * the result is <code>Double.POSITIVE_INFINITY.</code></li>
 * </ul></p></text>
      <param>values the input array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the maximum of the values or Double.NaN if length = 0</return>
      <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
    </javadoc>
    <method type="double" name="max" startLine="577" endLine="579" />
    <javadoc>
      <text>* Returns the minimum of the entries in the input array, or
 * <code>Double.NaN</code> if the array is empty.
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if the array is null.</p>
 * <p>
 * <ul>
 * <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
 * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>
 * <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>,
 * the result is <code>Double.NEGATIVE_INFINITY.</code></li>
 * </ul> </p></text>
      <param>values the input array</param>
      <return>the minimum of the values or Double.NaN if the array is empty</return>
      <throws>MathIllegalArgumentException if the array is null</throws>
    </javadoc>
    <method type="double" name="min" startLine="598" endLine="600" />
    <javadoc>
      <text>* Returns the minimum of the entries in the specified portion of
 * the input array, or <code>Double.NaN</code> if the designated subarray
 * is empty.
 * <p>
 * Throws <code>MathIllegalArgumentException</code> if the array is null or
 * the array index parameters are not valid.</p>
 * <p>
 * <ul>
 * <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
 * (i.e. <code>NaN</code> values have no impact on the value of the statistic).</li>
 * <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>,
 * the result is <code>Double.NEGATIVE_INFINITY.</code></li>
 * </ul></p></text>
      <param>values the input array</param>
      <param>begin index of the first array element to include</param>
      <param>length the number of elements to include</param>
      <return>the minimum of the values or Double.NaN if length = 0</return>
      <throws>MathIllegalArgumentException if the array is null or the array index
 * parameters are not valid</throws>
    </javadoc>
    <method type="double" name="min" startLine="625" endLine="627" />
    <javadoc>
      <text>* Returns an estimate of the <code>p</code>th percentile of the values
 * in the <code>values</code> array.
 * <p>
 * <ul>
 * <li>Returns <code>Double.NaN</code> if <code>values</code> has length
 * <code>0</code></li></p>
 * <li>Returns (for any value of <code>p</code>) <code>values[0]</code>
 * if <code>values</code> has length <code>1</code></li>
 * <li>Throws <code>IllegalArgumentException</code> if <code>values</code>
 * is null  or p is not a valid quantile value (p must be greater than 0
 * and less than or equal to 100)</li>
 * </ul></p>
 * <p>
 * See {@link org.apache.commons.math3.stat.descriptive.rank.Percentile} for
 * a description of the percentile estimation algorithm used.</p></text>
      <param>values input array of values</param>
      <param>p the percentile value to compute</param>
      <return>the percentile value or Double.NaN if the array is empty</return>
      <throws>MathIllegalArgumentException if <code>values</code> is null
 * or p is invalid</throws>
    </javadoc>
    <method type="double" name="percentile" startLine="653" endLine="655" />
    <javadoc>
      <text>* Returns an estimate of the <code>p</code>th percentile of the values
 * in the <code>values</code> array, starting with the element in (0-based)
 * position <code>begin</code> in the array and including <code>length</code>
 * values.
 * <p>
 * <ul>
 * <li>Returns <code>Double.NaN</code> if <code>length = 0</code></li>
 * <li>Returns (for any value of <code>p</code>) <code>values[begin]</code>
 * if <code>length = 1 </code></li>
 * <li>Throws <code>MathIllegalArgumentException</code> if <code>values</code>
 * is null , <code>begin</code> or <code>length</code> is invalid, or
 * <code>p</code> is not a valid quantile value (p must be greater than 0
 * and less than or equal to 100)</li>
 * </ul></p>
 * <p>
 * See {@link org.apache.commons.math3.stat.descriptive.rank.Percentile} for
 * a description of the percentile estimation algorithm used.</p></text>
      <param>values array of input values</param>
      <param>p  the percentile to compute</param>
      <param>begin  the first (0-based) element to include in the computation</param>
      <param>length  the number of array elements to include</param>
      <return>the percentile value</return>
      <throws>MathIllegalArgumentException if the parameters are not valid or the
 * input array is null</throws>
    </javadoc>
    <method type="double" name="percentile" startLine="685" endLine="687" />
    <javadoc>
      <text>* Returns the sum of the (signed) differences between corresponding elements of the
 * input arrays -- i.e., sum(sample1[i] - sample2[i]).</text>
      <param>sample1  the first array</param>
      <param>sample2  the second array</param>
      <return>sum of paired differences</return>
      <throws>DimensionMismatchException if the arrays do not have the same
 * (positive) length.</throws>
      <throws>NoDataException if the sample arrays are empty.</throws>
    </javadoc>
    <method type="double" name="sumDifference" startLine="701" endLine="714">
      <declaration type="int" name="n" />
      <scope startLine="703" endLine="705" />
      <scope startLine="706" endLine="708" />
      <declaration type="double" name="result" />
      <scope startLine="710" endLine="712" />
    </method>
    <javadoc>
      <text>* Returns the mean of the (signed) differences between corresponding elements of the
 * input arrays -- i.e., sum(sample1[i] - sample2[i]) / sample1.length.</text>
      <param>sample1  the first array</param>
      <param>sample2  the second array</param>
      <return>mean of paired differences</return>
      <throws>DimensionMismatchException if the arrays do not have the same
 * (positive) length.</throws>
      <throws>NoDataException if the sample arrays are empty.</throws>
    </javadoc>
    <method type="double" name="meanDifference" startLine="728" endLine="730" />
    <javadoc>
      <text>* Returns the variance of the (signed) differences between corresponding elements of the
 * input arrays -- i.e., var(sample1[i] - sample2[i]).</text>
      <param>sample1  the first array</param>
      <param>sample2  the second array</param>
      <param>meanDifference   the mean difference between corresponding entries</param>
      <see>#meanDifference(double[],double[])</see>
      <return>variance of paired differences</return>
      <throws>DimensionMismatchException if the arrays do not have the same
 * length.</throws>
      <throws>NumberIsTooSmallException if the arrays length is less than 2.</throws>
    </javadoc>
    <method type="double" name="varianceDifference" startLine="747" endLine="764">
      <declaration type="double" name="sum1" />
      <declaration type="double" name="sum2" />
      <declaration type="double" name="diff" />
      <declaration type="int" name="n" />
      <scope startLine="752" endLine="754" />
      <scope startLine="755" endLine="757" />
      <scope startLine="758" endLine="762" />
    </method>
    <javadoc>
      <text>* Normalize (standardize) the sample, so it is has a mean of 0 and a standard deviation of 1.</text>
      <param>sample Sample to normalize.</param>
      <return>normalized (standardized) sample.</return>
      <since>2.2</since>
    </javadoc>
    <method type="double[]" name="normalize" startLine="773" endLine="793">
      <declaration type="DescriptiveStatistics" name="stats" />
      <scope startLine="777" endLine="779" />
      <declaration type="double" name="mean" />
      <declaration type="double" name="standardDeviation" />
      <declaration type="double[]" name="standardizedSample" />
      <scope startLine="788" endLine="791">
        <comment>z = (x- mean)/standardDeviation</comment>
      </scope>
      <comment>Add the data from the series to stats</comment>
      <comment>Compute mean and standard deviation</comment>
      <comment>initialize the standardizedSample, which has the same length as the sample</comment>
    </method>
  </class>
</source>
