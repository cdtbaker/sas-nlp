<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.ode.events">
  <import name="org.apache.commons.math3.util.FastMath" />
  <import name="org.apache.commons.math3.util.Precision" />
  <javadoc>
    <text>* Transformer for {@link EventHandler#g(double,double[]) g functions}.</text>
    <see>EventFilter</see>
    <see>FilterType</see>
    <version>$Id: Transformer.java 1458298 2013-03-19 14:09:58Z luc $</version>
    <since>3.2</since>
  </javadoc>
  <javadoc>
    <text>* Transformer computing transformed = 0.
 * <p>
 * This transformer is used when we initialize the filter, until we get at
 * least one non-zero value to select the proper transformer.
 * </p></text>
  </javadoc>
  <javadoc>
    <text>* {@inheritDoc}</text>
  </javadoc>
  <method type="double" name="transformed" startLine="40" endLine="42" />
  <javadoc>
    <text>* Transformer computing transformed = g.
 * <p>
 * When this transformer is applied, the roots of the original function
 * are preserved, with the same {@code increasing/decreasing} status.
 * </p></text>
  </javadoc>
  <javadoc>
    <text>* {@inheritDoc}</text>
  </javadoc>
  <method type="double" name="transformed" startLine="53" endLine="55" />
  <javadoc>
    <text>* Transformer computing transformed = -g.
 * <p>
 * When this transformer is applied, the roots of the original function
 * are preserved, with reversed {@code increasing/decreasing} status.
 * </p></text>
  </javadoc>
  <javadoc>
    <text>* {@inheritDoc}</text>
  </javadoc>
  <method type="double" name="transformed" startLine="66" endLine="68" />
  <javadoc>
    <text>* Transformer computing transformed = min(-{@link Precision#SAFE_MIN}, -g, +g).
 * <p>
 * When this transformer is applied, the transformed function is
 * guaranteed to be always strictly negative (i.e. there are no roots).
 * </p></text>
  </javadoc>
  <javadoc>
    <text>* {@inheritDoc}</text>
  </javadoc>
  <method type="double" name="transformed" startLine="79" endLine="81" />
  <javadoc>
    <text>* Transformer computing transformed = max(+{@link Precision#SAFE_MIN}, -g, +g).
 * <p>
 * When this transformer is applied, the transformed function is
 * guaranteed to be always strictly positive (i.e. there are no roots).
 * </p></text>
  </javadoc>
  <javadoc>
    <text>* {@inheritDoc}</text>
  </javadoc>
  <method type="double" name="transformed" startLine="92" endLine="94" />
  <method name="transformed" type="double" startLine="97" endLine="101" />
  <javadoc>
    <text>* Transform value of function g.</text>
    <param>g raw value of function g</param>
    <return>transformed value of function g</return>
  </javadoc>
</source>
