<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.MaxCountExceededException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.util.IterationManager" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <class name="PreconditionedIterativeLinearSolver" extends="IterativeLinearSolver" startLine="25">
    <javadoc>
      <text>* <p>
 * This abstract class defines preconditioned iterative solvers. When A is
 * ill-conditioned, instead of solving system A &middot; x = b directly, it is
 * preferable to solve either
 * <center>
 * (M &middot; A) &middot; x = M &middot; b
 * </center>
 * (left preconditioning), or
 * <center>
 * (A &middot; M) &middot; y = b, &nbsp;&nbsp;&nbsp;&nbsp;followed by
 * M &middot; y = x
 * </center>
 * (right preconditioning), where M approximates in some way A<sup>-1</sup>,
 * while matrix-vector products of the type M &middot; y remain comparatively
 * easy to compute. In this library, M (not M<sup>-1</sup>!) is called the
 * <em>preconditionner</em>.
 * </p>
 * <p>
 * Concrete implementations of this abstract class must be provided with the
 * preconditioner M, as a {@link RealLinearOperator}.
 * </p></text>
      <version>$Id: PreconditionedIterativeLinearSolver.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>3.0</since>
    </javadoc>
    <javadoc>
      <text>* Creates a new instance of this class, with default iteration manager.</text>
      <param>maxIterations the maximum number of iterations</param>
    </javadoc>
    <method type="constructor" name="PreconditionedIterativeLinearSolver" startLine="59" endLine="61" />
    <javadoc>
      <text>* Creates a new instance of this class, with custom iteration manager.</text>
      <param>manager the custom iteration manager</param>
      <throws>NullArgumentException if {@code manager} is {@code null}</throws>
    </javadoc>
    <method type="constructor" name="PreconditionedIterativeLinearSolver" startLine="70" endLine="72" />
    <javadoc>
      <text>* Returns an estimate of the solution to the linear system A &middot; x =
 * b.</text>
      <param>a the linear operator A of the system</param>
      <param>m the preconditioner, M (can be {@code null})</param>
      <param>b the right-hand side vector</param>
      <param>x0 the initial guess of the solution</param>
      <return>a new vector containing the solution</return>
      <throws>NullArgumentException if one of the parameters is {@code null}</throws>
      <throws>NonSquareOperatorException if {@code a} or {@code m} is not
 * square</throws>
      <throws>DimensionMismatchException if {@code m}, {@code b} or{@code x0} have dimensions inconsistent with {@code a}</throws>
      <throws>MaxCountExceededException at exhaustion of the iteration count,
 * unless a custom{@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}has been set at construction of the {@link IterationManager}</throws>
    </javadoc>
    <method type="RealVector" name="solve" startLine="96" endLine="99" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="RealVector" name="solve" startLine="105" endLine="110">
      <declaration type="RealVector" name="x" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="RealVector" name="solve" startLine="117" endLine="120" />
    <javadoc>
      <text>* Performs all dimension checks on the parameters of{@link #solve(RealLinearOperator,RealLinearOperator,RealVector,RealVector) solve}and{@link #solveInPlace(RealLinearOperator,RealLinearOperator,RealVector,RealVector) solveInPlace},
 * and throws an exception if one of the checks fails.</text>
      <param>a the linear operator A of the system</param>
      <param>m the preconditioner, M (can be {@code null})</param>
      <param>b the right-hand side vector</param>
      <param>x0 the initial guess of the solution</param>
      <throws>NullArgumentException if one of the parameters is {@code null}</throws>
      <throws>NonSquareOperatorException if {@code a} or {@code m} is not
 * square</throws>
      <throws>DimensionMismatchException if {@code m}, {@code b} or{@code x0} have dimensions inconsistent with {@code a}</throws>
    </javadoc>
    <method type="void" name="checkParameters" startLine="142" endLine="154">
      <scope startLine="144" endLine="153">
        <scope startLine="145" endLine="148" />
        <scope startLine="149" endLine="152" />
      </scope>
    </method>
    <javadoc>
      <text>* Returns an estimate of the solution to the linear system A &middot; x =
 * b.</text>
      <param>a the linear operator A of the system</param>
      <param>m the preconditioner, M (can be {@code null})</param>
      <param>b the right-hand side vector</param>
      <return>a new vector containing the solution</return>
      <throws>NullArgumentException if one of the parameters is {@code null}</throws>
      <throws>NonSquareOperatorException if {@code a} or {@code m} is not
 * square</throws>
      <throws>DimensionMismatchException if {@code m} or {@code b} have
 * dimensions inconsistent with {@code a}</throws>
      <throws>MaxCountExceededException at exhaustion of the iteration count,
 * unless a custom{@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}has been set at construction of the {@link IterationManager}</throws>
    </javadoc>
    <method type="RealVector" name="solve" startLine="176" endLine="180">
      <declaration type="RealVector" name="x" />
    </method>
    <method name="solveInPlace" type="RealVector" startLine="182" endLine="205" />
    <javadoc>
      <text>* Returns an estimate of the solution to the linear system A &middot; x =
 * b. The solution is computed in-place (initial guess is modified).</text>
      <param>a the linear operator A of the system</param>
      <param>m the preconditioner, M (can be {@code null})</param>
      <param>b the right-hand side vector</param>
      <param>x0 the initial guess of the solution</param>
      <return>a reference to {@code x0} (shallow copy) updated with the
 * solution</return>
      <throws>NullArgumentException if one of the parameters is {@code null}</throws>
      <throws>NonSquareOperatorException if {@code a} or {@code m} is not
 * square</throws>
      <throws>DimensionMismatchException if {@code m}, {@code b} or{@code x0} have dimensions inconsistent with {@code a}</throws>
      <throws>MaxCountExceededException at exhaustion of the iteration count,
 * unless a custom{@link org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback callback}has been set at construction of the {@link IterationManager}</throws>
    </javadoc>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="RealVector" name="solveInPlace" startLine="212" endLine="214" />
  </class>
</source>
