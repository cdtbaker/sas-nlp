<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.special">
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.util.ContinuedFraction" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="Beta" startLine="24">
    <javadoc>
      <text>* <p>
 * This is a utility class that provides computation methods related to the
 * Beta family of functions.
 * </p>
 * <p>
 * Implementation of {@link #logBeta(double,double)} is based on the
 * algorithms described in
 * <ul>
 * <li><a href="http://dx.doi.org/10.1145/22721.23109">Didonato and Morris
 * (1986)</a>, <em>Computation of the Incomplete Gamma Function Ratios
 * and their Inverse</em>, TOMS 12(4), 377-393,</li>
 * <li><a href="http://dx.doi.org/10.1145/131766.131776">Didonato and Morris
 * (1992)</a>, <em>Algorithm 708: Significant Digit Computation of the
 * Incomplete Beta Function Ratios</em>, TOMS 18(3), 360-373,</li>
 * </ul>
 * and implemented in the
 * <a href="http://www.dtic.mil/docs/citations/ADA476840">NSWC Library of Mathematical Functions</a>,
 * available
 * <a href="http://www.ualberta.ca/CNS/RESEARCH/Software/NumericalNSWC/site.html">here</a>.
 * This library is "approved for public release", and the
 * <a href="http://www.dtic.mil/dtic/pdf/announcements/CopyrightGuidance.pdf">Copyright guidance</a>
 * indicates that unless otherwise stated in the code, all FORTRAN functions in
 * this library are license free. Since no such notice appears in the code these
 * functions can safely be ported to Commons-Math.
 * </p></text>
      <version>$Id: Beta.java 1420669 2012-12-12 13:40:35Z erans $</version>
    </javadoc>
    <javadoc>
      <text>* Maximum allowed numerical error.</text>
    </javadoc>
    <declaration type="double" name="DEFAULT_EPSILON" />
    <javadoc>
      <text>* The constant value of ½log 2π.</text>
    </javadoc>
    <declaration type="double" name="HALF_LOG_TWO_PI" />
    <javadoc>
      <text>* <p>
 * The coefficients of the series expansion of the Δ function. This function
 * is defined as follows
 * </p>
 * <center>Δ(x) = log Γ(x) - (x - 0.5) log a + a - 0.5 log 2π,</center>
 * <p>
 * see equation (23) in Didonato and Morris (1992). The series expansion,
 * which applies for x ≥ 10, reads
 * </p>
 * <pre>
 * 14
 * ====
 * 1  \                2 n
 * Δ(x) = ---  >    d  (10 / x)
 * x  /      n
 * ====
 * n = 0
 * <pre></text>
    </javadoc>
    <declaration type="double[]" name="DELTA" />
    <javadoc>
      <text>* Default constructor.  Prohibit instantiation.</text>
    </javadoc>
    <method type="constructor" name="Beta" startLine="102" endLine="102" />
    <javadoc>
      <text>* Returns the
 * <a href="http://mathworld.wolfram.com/RegularizedBetaFunction.html">
 * regularized beta function</a> I(x, a, b).</text>
      <param>x Value.</param>
      <param>a Parameter {@code a}.</param>
      <param>b Parameter {@code b}.</param>
      <return>the regularized beta function I(x, a, b).</return>
      <throws>org.apache.commons.math3.exception.MaxCountExceededExceptionif the algorithm fails to converge.</throws>
    </javadoc>
    <method type="double" name="regularizedBeta" startLine="116" endLine="118" />
    <javadoc>
      <text>* Returns the
 * <a href="http://mathworld.wolfram.com/RegularizedBetaFunction.html">
 * regularized beta function</a> I(x, a, b).</text>
      <param>x Value.</param>
      <param>a Parameter {@code a}.</param>
      <param>b Parameter {@code b}.</param>
      <param>epsilon When the absolute value of the nth item in the
 * series is less than epsilon the approximation ceases to calculate
 * further elements in the series.</param>
      <return>the regularized beta function I(x, a, b)</return>
      <throws>org.apache.commons.math3.exception.MaxCountExceededExceptionif the algorithm fails to converge.</throws>
    </javadoc>
    <method type="double" name="regularizedBeta" startLine="137" endLine="139" />
    <javadoc>
      <text>* Returns the regularized beta function I(x, a, b).</text>
      <param>x the value.</param>
      <param>a Parameter {@code a}.</param>
      <param>b Parameter {@code b}.</param>
      <param>maxIterations Maximum number of "iterations" to complete.</param>
      <return>the regularized beta function I(x, a, b)</return>
      <throws>org.apache.commons.math3.exception.MaxCountExceededExceptionif the algorithm fails to converge.</throws>
    </javadoc>
    <method type="double" name="regularizedBeta" startLine="154" endLine="156" />
    <javadoc>
      <text>* Returns the regularized beta function I(x, a, b).
 * The implementation of this method is based on:
 * <ul>
 * <li>
 * <a href="http://mathworld.wolfram.com/RegularizedBetaFunction.html">
 * Regularized Beta Function</a>.</li>
 * <li>
 * <a href="http://functions.wolfram.com/06.21.10.0001.01">
 * Regularized Beta Function</a>.</li>
 * </ul></text>
      <param>x the value.</param>
      <param>a Parameter {@code a}.</param>
      <param>b Parameter {@code b}.</param>
      <param>epsilon When the absolute value of the nth item in the
 * series is less than epsilon the approximation ceases to calculate
 * further elements in the series.</param>
      <param>maxIterations Maximum number of "iterations" to complete.</param>
      <return>the regularized beta function I(x, a, b)</return>
      <throws>org.apache.commons.math3.exception.MaxCountExceededExceptionif the algorithm fails to converge.</throws>
    </javadoc>
    <method type="double" name="regularizedBeta" startLine="184" endLine="227">
      <declaration type="double" name="ret" />
      <scope startLine="193" endLine="195" />
      <scope startLine="195" endLine="197" />
      <scope startLine="197" endLine="224">
        <declaration type="ContinuedFraction" name="fraction" />
        <method type="double" name="getB" startLine="201" endLine="214">
          <declaration type="double" name="ret" />
          <declaration type="double" name="m" />
          <scope startLine="204" endLine="208" />
          <scope startLine="208" endLine="212" />
        </method>
        <method type="double" name="getA" startLine="217" endLine="219" />
        <comment>even</comment>
      </scope>
    </method>
    <javadoc>
      <text>* Returns the natural logarithm of the beta function B(a, b).
 * The implementation of this method is based on:
 * <ul>
 * <li><a href="http://mathworld.wolfram.com/BetaFunction.html">
 * Beta Function</a>, equation (1).</li>
 * </ul></text>
      <param>a Parameter {@code a}.</param>
      <param>b Parameter {@code b}.</param>
      <param>epsilon This parameter is ignored.</param>
      <param>maxIterations This parameter is ignored.</param>
      <return>log(B(a, b)).</return>
      <deprecated>as of version 3.1, this method is deprecated as the
 * computation of the beta function is no longer iterative; it will be
 * removed in version 4.0. Current implementation of this method
 * internally calls {@link #logBeta(double,double)}.</deprecated>
    </javadoc>
    <method type="double" name="logBeta" startLine="251" endLine="254" />
    <javadoc>
      <text>* Returns the value of log Γ(a + b) for 1 ≤ a, b ≤ 2. Based on the
 * <em>NSWC Library of Mathematics Subroutines</em> double precision
 * implementation, {@code DGSMLN}. In {@link BetaTest#testLogGammaSum()},
 * this private method is accessed through reflection.</text>
      <param>a First argument.</param>
      <param>b Second argument.</param>
      <return>the value of {@code log(Gamma(a + b))}.</return>
      <throws>OutOfRangeException if {@code a} or {@code b} is lower than{@code 1.0} or greater than {@code 2.0}.</throws>
    </javadoc>
    <method type="double" name="logGammaSum" startLine="270" endLine="287">
      <scope startLine="272" endLine="274" />
      <scope startLine="275" endLine="277" />
      <declaration type="double" name="x" />
      <scope startLine="280" endLine="282" />
      <scope startLine="282" endLine="284" />
      <scope startLine="284" endLine="286" />
    </method>
    <javadoc>
      <text>* Returns the value of log[Γ(b) / Γ(a + b)] for a ≥ 0 and b ≥ 10. Based on
 * the <em>NSWC Library of Mathematics Subroutines</em> double precision
 * implementation, {@code DLGDIV}. In{@link BetaTest#testLogGammaMinusLogGammaSum()}, this private method is
 * accessed through reflection.</text>
      <param>a First argument.</param>
      <param>b Second argument.</param>
      <return>the value of {@code log(Gamma(b) / Gamma(a + b))}.</return>
      <throws>NumberIsTooSmallException if {@code a < 0.0} or {@code b < 10.0}.</throws>
    </javadoc>
    <method type="double" name="logGammaMinusLogGammaSum" startLine="303" endLine="329">
      <scope startLine="305" endLine="307" />
      <scope startLine="308" endLine="310" />
      <declaration type="double" name="d" />
      <declaration type="double" name="w" />
      <scope startLine="317" endLine="320" />
      <scope startLine="320" endLine="323" />
      <declaration type="double" name="u" />
      <declaration type="double" name="v" />
      <comment>d = a + b - 0.5</comment>
    </method>
    <javadoc>
      <text>* Returns the value of Δ(b) - Δ(a + b), with 0 ≤ a ≤ b and b ≥ 10. Based
 * on equations (26), (27) and (28) in Didonato and Morris (1992).</text>
      <param>a First argument.</param>
      <param>b Second argument.</param>
      <return>the value of {@code Delta(b) - Delta(a + b)}</return>
      <throws>OutOfRangeException if {@code a < 0} or {@code a > b}</throws>
      <throws>NumberIsTooSmallException if {@code b < 10}</throws>
    </javadoc>
    <method type="double" name="deltaMinusDeltaSum" startLine="343" endLine="374">
      <scope startLine="345" endLine="347" />
      <scope startLine="348" endLine="350" />
      <declaration type="double" name="h" />
      <declaration type="double" name="p" />
      <declaration type="double" name="q" />
      <declaration type="double" name="q2" />
      <declaration type="double[]" name="s" />
      <scope startLine="361" endLine="363" />
      <declaration type="double" name="sqrtT" />
      <declaration type="double" name="t" />
      <declaration type="double" name="w" />
      <scope startLine="370" endLine="372" />
      <comment>s[i] = 1 + q + ... - q(2  i)</comment>
      <comment>w = Delta(b) - Delta(a + b)</comment>
    </method>
    <javadoc>
      <text>* Returns the value of Δ(p) + Δ(q) - Δ(p + q), with p, q ≥ 10. Based on
 * the <em>NSWC Library of Mathematics Subroutines</em> double precision
 * implementation, {@code DBCORR}. In{@link BetaTest#testSumDeltaMinusDeltaSum()}, this private method is
 * accessed through reflection.</text>
      <param>p First argument.</param>
      <param>q Second argument.</param>
      <return>the value of {@code Delta(p) + Delta(q) - Delta(p + q)}.</return>
      <throws>NumberIsTooSmallException if {@code p < 10.0} or {@code q < 10.0}.</throws>
    </javadoc>
    <method type="double" name="sumDeltaMinusDeltaSum" startLine="389" endLine="407">
      <scope startLine="391" endLine="393" />
      <scope startLine="394" endLine="396" />
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
      <declaration type="double" name="sqrtT" />
      <declaration type="double" name="t" />
      <declaration type="double" name="z" />
      <scope startLine="403" endLine="405" />
    </method>
    <javadoc>
      <text>* Returns the value of log B(p, q) for 0 ≤ x ≤ 1 and p, q > 0. Based on the
 * <em>NSWC Library of Mathematics Subroutines</em> implementation,{@code DBETLN}.</text>
      <param>p First argument.</param>
      <param>q Second argument.</param>
      <return>the value of {@code log(Beta(p, q))}, {@code NaN} if{@code p <= 0} or {@code q <= 0}.</return>
    </javadoc>
    <method type="double" name="logBeta" startLine="419" endLine="510">
      <scope startLine="420" endLine="422" />
      <declaration type="double" name="a" />
      <declaration type="double" name="b" />
      <scope startLine="426" endLine="437">
        <declaration type="double" name="w" />
        <declaration type="double" name="h" />
        <declaration type="double" name="c" />
        <declaration type="double" name="u" />
        <declaration type="double" name="v" />
        <scope startLine="432" endLine="434" />
        <scope startLine="434" endLine="436" />
      </scope>
      <scope startLine="437" endLine="475">
        <scope startLine="438" endLine="449">
          <declaration type="int" name="n" />
          <declaration type="double" name="prod" />
          <declaration type="double" name="ared" />
          <scope startLine="442" endLine="445" />
        </scope>
        <scope startLine="449" endLine="474">
          <declaration type="double" name="prod1" />
          <declaration type="double" name="ared" />
          <scope startLine="452" endLine="456">
            <declaration type="double" name="h" />
          </scope>
          <scope startLine="457" endLine="469">
            <declaration type="double" name="prod2" />
            <declaration type="double" name="bred" />
            <scope startLine="460" endLine="463" />
          </scope>
          <scope startLine="469" endLine="473" />
        </scope>
      </scope>
      <scope startLine="475" endLine="497">
        <scope startLine="476" endLine="492">
          <scope startLine="477" endLine="488">
            <declaration type="double" name="prod" />
            <declaration type="double" name="bred" />
            <scope startLine="480" endLine="483" />
          </scope>
          <scope startLine="488" endLine="491" />
        </scope>
        <scope startLine="492" endLine="496" />
      </scope>
      <scope startLine="497" endLine="509">
        <scope startLine="498" endLine="501" />
        <scope startLine="501" endLine="508" />
        <comment>The following command is the original NSWC implementation.</comment>
        <comment>return Gamma.logGamma(a) +</comment>
        <comment>(Gamma.logGamma(b) - Gamma.logGamma(a + b));</comment>
        <comment>The following command turns out to be more accurate.</comment>
      </scope>
    </method>
  </class>
</source>
