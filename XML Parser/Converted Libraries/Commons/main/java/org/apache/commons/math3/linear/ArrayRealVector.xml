<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.linear">
  <import name="java.io.Serializable" />
  <import name="java.util.Arrays" />
  <import name="java.util.Iterator" />
  <import name="org.apache.commons.math3.analysis.UnivariateFunction" />
  <import name="org.apache.commons.math3.exception.NotPositiveException" />
  <import name="org.apache.commons.math3.exception.NullArgumentException" />
  <import name="org.apache.commons.math3.exception.DimensionMismatchException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooLargeException" />
  <import name="org.apache.commons.math3.exception.NumberIsTooSmallException" />
  <import name="org.apache.commons.math3.exception.OutOfRangeException" />
  <import name="org.apache.commons.math3.exception.util.LocalizedFormats" />
  <import name="org.apache.commons.math3.util.MathUtils" />
  <import name="org.apache.commons.math3.util.FastMath" />
  <class name="ArrayRealVector" extends="RealVector" startLine="34">
    <implements name="Serializable" />
    <javadoc>
      <text>* This class implements the {@link RealVector} interface with a double array.</text>
      <version>$Id: ArrayRealVector.java 1416643 2012-12-03 19:37:14Z tn $</version>
      <since>2.0</since>
    </javadoc>
    <javadoc>
      <text>* Serializable version identifier.</text>
    </javadoc>
    <declaration type="long" name="serialVersionUID" />
    <javadoc>
      <text>* Default format.</text>
    </javadoc>
    <declaration type="RealVectorFormat" name="DEFAULT_FORMAT" />
    <javadoc>
      <text>* Entries of the vector.</text>
    </javadoc>
    <declaration type="double" name="data" />
    <javadoc>
      <text>* Build a 0-length vector.
 * Zero-length vectors may be used to initialized construction of vectors
 * by data gathering. We start with zero-length and use either the {@link #ArrayRealVector(ArrayRealVector,ArrayRealVector)} constructor
 * or one of the {@code append} method ({@link #append(double)},{@link #append(ArrayRealVector)}) to gather data into this vector.</text>
    </javadoc>
    <method type="constructor" name="ArrayRealVector" startLine="56" endLine="58" />
    <javadoc>
      <text>* Construct a vector of zeroes.</text>
      <param>size Size of the vector.</param>
    </javadoc>
    <method type="constructor" name="ArrayRealVector" startLine="65" endLine="67" />
    <javadoc>
      <text>* Construct a vector with preset values.</text>
      <param>size Size of the vector</param>
      <param>preset All entries will be set with this value.</param>
    </javadoc>
    <method type="constructor" name="ArrayRealVector" startLine="75" endLine="78" />
    <javadoc>
      <text>* Construct a vector from an array, copying the input array.</text>
      <param>d Array.</param>
    </javadoc>
    <method type="constructor" name="ArrayRealVector" startLine="85" endLine="87" />
    <javadoc>
      <text>* Create a new ArrayRealVector using the input array as the underlying
 * data array.
 * If an array is built specially in order to be embedded in a
 * ArrayRealVector and not used directly, the {@code copyArray} may be
 * set to {@code false}. This will prevent the copying and improve
 * performance as no new array will be built and no data will be copied.</text>
      <param>d Data for the new vector.</param>
      <param>copyArray if {@code true}, the input array will be copied,
 * otherwise it will be referenced.</param>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
      <see>#ArrayRealVector(double[])</see>
    </javadoc>
    <method type="constructor" name="ArrayRealVector" startLine="104" endLine="109">
      <scope startLine="105" endLine="107" />
    </method>
    <javadoc>
      <text>* Construct a vector from part of a array.</text>
      <param>d Array.</param>
      <param>pos Position of first entry.</param>
      <param>size Number of entries to copy.</param>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
      <throws>NumberIsTooLargeException if the size of {@code d} is less
 * than {@code pos + size}.</throws>
    </javadoc>
    <method type="constructor" name="ArrayRealVector" startLine="122" endLine="131">
      <scope startLine="123" endLine="125" />
      <scope startLine="126" endLine="128" />
    </method>
    <javadoc>
      <text>* Construct a vector from an array.</text>
      <param>d Array of {@code Double}s.</param>
    </javadoc>
    <method type="constructor" name="ArrayRealVector" startLine="138" endLine="143">
      <scope startLine="140" endLine="142" />
    </method>
    <javadoc>
      <text>* Construct a vector from part of an array.</text>
      <param>d Array.</param>
      <param>pos Position of first entry.</param>
      <param>size Number of entries to copy.</param>
      <throws>NullArgumentException if {@code d} is {@code null}.</throws>
      <throws>NumberIsTooLargeException if the size of {@code d} is less
 * than {@code pos + size}.</throws>
    </javadoc>
    <method type="constructor" name="ArrayRealVector" startLine="156" endLine="167">
      <scope startLine="157" endLine="159" />
      <scope startLine="160" endLine="162" />
      <scope startLine="164" endLine="166" />
    </method>
    <javadoc>
      <text>* Construct a vector from another vector, using a deep copy.</text>
      <param>v vector to copy.</param>
      <throws>NullArgumentException if {@code v} is {@code null}.</throws>
    </javadoc>
    <method type="constructor" name="ArrayRealVector" startLine="175" endLine="183">
      <scope startLine="176" endLine="178" />
      <scope startLine="180" endLine="182" />
    </method>
    <javadoc>
      <text>* Construct a vector from another vector, using a deep copy.</text>
      <param>v Vector to copy.</param>
      <throws>NullArgumentException if {@code v} is {@code null}.</throws>
    </javadoc>
    <method type="constructor" name="ArrayRealVector" startLine="191" endLine="193" />
    <javadoc>
      <text>* Construct a vector from another vector.</text>
      <param>v Vector to copy.</param>
      <param>deep If {@code true} perform a deep copy, otherwise perform a
 * shallow copy.</param>
    </javadoc>
    <method type="constructor" name="ArrayRealVector" startLine="202" endLine="204" />
    <javadoc>
      <text>* Construct a vector by appending one vector to another vector.</text>
      <param>v1 First vector (will be put in front of the new vector).</param>
      <param>v2 Second vector (will be put at back of the new vector).</param>
    </javadoc>
    <method type="constructor" name="ArrayRealVector" startLine="211" endLine="215" />
    <javadoc>
      <text>* Construct a vector by appending one vector to another vector.</text>
      <param>v1 First vector (will be put in front of the new vector).</param>
      <param>v2 Second vector (will be put at back of the new vector).</param>
    </javadoc>
    <method type="constructor" name="ArrayRealVector" startLine="222" endLine="230">
      <declaration type="int" name="l1" />
      <declaration type="int" name="l2" />
      <scope startLine="227" endLine="229" />
    </method>
    <javadoc>
      <text>* Construct a vector by appending one vector to another vector.</text>
      <param>v1 First vector (will be put in front of the new vector).</param>
      <param>v2 Second vector (will be put at back of the new vector).</param>
    </javadoc>
    <method type="constructor" name="ArrayRealVector" startLine="237" endLine="245">
      <declaration type="int" name="l1" />
      <declaration type="int" name="l2" />
      <scope startLine="241" endLine="243" />
    </method>
    <javadoc>
      <text>* Construct a vector by appending one vector to another vector.</text>
      <param>v1 First vector (will be put in front of the new vector).</param>
      <param>v2 Second vector (will be put at back of the new vector).</param>
    </javadoc>
    <method type="constructor" name="ArrayRealVector" startLine="252" endLine="258">
      <declaration type="int" name="l1" />
      <declaration type="int" name="l2" />
    </method>
    <javadoc>
      <text>* Construct a vector by appending one vector to another vector.</text>
      <param>v1 First vector (will be put in front of the new vector).</param>
      <param>v2 Second vector (will be put at back of the new vector).</param>
    </javadoc>
    <method type="constructor" name="ArrayRealVector" startLine="265" endLine="271">
      <declaration type="int" name="l1" />
      <declaration type="int" name="l2" />
    </method>
    <javadoc>
      <text>* Construct a vector by appending one vector to another vector.</text>
      <param>v1 first vector (will be put in front of the new vector)</param>
      <param>v2 second vector (will be put at back of the new vector)</param>
    </javadoc>
    <method type="constructor" name="ArrayRealVector" startLine="278" endLine="284">
      <declaration type="int" name="l1" />
      <declaration type="int" name="l2" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="ArrayRealVector" name="copy" startLine="288" endLine="290" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="ArrayRealVector" name="add" startLine="295" endLine="316">
      <scope startLine="296" endLine="306">
        <declaration type="double[]" name="vData" />
        <declaration type="int" name="dim" />
        <declaration type="ArrayRealVector" name="result" />
        <declaration type="double[]" name="resultData" />
        <scope startLine="302" endLine="304" />
      </scope>
      <scope startLine="306" endLine="315">
        <declaration type="double[]" name="out" />
        <declaration type="Iterator<Entry>" name="it" />
        <scope startLine="310" endLine="313">
          <declaration type="Entry" name="e" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="ArrayRealVector" name="subtract" startLine="321" endLine="342">
      <scope startLine="322" endLine="332">
        <declaration type="double[]" name="vData" />
        <declaration type="int" name="dim" />
        <declaration type="ArrayRealVector" name="result" />
        <declaration type="double[]" name="resultData" />
        <scope startLine="328" endLine="330" />
      </scope>
      <scope startLine="332" endLine="341">
        <declaration type="double[]" name="out" />
        <declaration type="Iterator<Entry>" name="it" />
        <scope startLine="336" endLine="339">
          <declaration type="Entry" name="e" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="ArrayRealVector" name="map" startLine="346" endLine="348" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="ArrayRealVector" name="mapToSelf" startLine="352" endLine="357">
      <scope startLine="353" endLine="355" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="RealVector" name="mapAddToSelf" startLine="361" endLine="366">
      <scope startLine="362" endLine="364" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="RealVector" name="mapSubtractToSelf" startLine="370" endLine="375">
      <scope startLine="371" endLine="373" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="RealVector" name="mapMultiplyToSelf" startLine="379" endLine="384">
      <scope startLine="380" endLine="382" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="RealVector" name="mapDivideToSelf" startLine="388" endLine="393">
      <scope startLine="389" endLine="391" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="ArrayRealVector" name="ebeMultiply" startLine="398" endLine="417">
      <scope startLine="399" endLine="409">
        <declaration type="double[]" name="vData" />
        <declaration type="int" name="dim" />
        <declaration type="ArrayRealVector" name="result" />
        <declaration type="double[]" name="resultData" />
        <scope startLine="405" endLine="407" />
      </scope>
      <scope startLine="409" endLine="416">
        <declaration type="double[]" name="out" />
        <scope startLine="412" endLine="414" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="ArrayRealVector" name="ebeDivide" startLine="422" endLine="441">
      <scope startLine="423" endLine="433">
        <declaration type="double[]" name="vData" />
        <declaration type="int" name="dim" />
        <declaration type="ArrayRealVector" name="result" />
        <declaration type="double[]" name="resultData" />
        <scope startLine="429" endLine="431" />
      </scope>
      <scope startLine="433" endLine="440">
        <declaration type="double[]" name="out" />
        <scope startLine="436" endLine="438" />
      </scope>
    </method>
    <javadoc>
      <text>* Get a reference to the underlying data array.
 * This method does not make a fresh copy of the underlying data.</text>
      <return>the array of entries.</return>
    </javadoc>
    <method type="double[]" name="getDataRef" startLine="449" endLine="451" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="dotProduct" startLine="455" endLine="466">
      <scope startLine="456" endLine="464">
        <declaration type="double[]" name="vData" />
        <declaration type="double" name="dot" />
        <scope startLine="460" endLine="462" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getNorm" startLine="470" endLine="476">
      <declaration type="double" name="sum" />
      <scope startLine="472" endLine="474" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getL1Norm" startLine="480" endLine="486">
      <declaration type="double" name="sum" />
      <scope startLine="482" endLine="484" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getLInfNorm" startLine="490" endLine="496">
      <declaration type="double" name="max" />
      <scope startLine="492" endLine="494" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getDistance" startLine="500" endLine="519">
      <scope startLine="501" endLine="510">
        <declaration type="double[]" name="vData" />
        <declaration type="double" name="sum" />
        <scope startLine="505" endLine="508">
          <declaration type="double" name="delta" />
        </scope>
      </scope>
      <scope startLine="510" endLine="518">
        <declaration type="double" name="sum" />
        <scope startLine="513" endLine="516">
          <declaration type="double" name="delta" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getL1Distance" startLine="524" endLine="543">
      <scope startLine="525" endLine="534">
        <declaration type="double[]" name="vData" />
        <declaration type="double" name="sum" />
        <scope startLine="529" endLine="532">
          <declaration type="double" name="delta" />
        </scope>
      </scope>
      <scope startLine="534" endLine="542">
        <declaration type="double" name="sum" />
        <scope startLine="537" endLine="540">
          <declaration type="double" name="delta" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getLInfDistance" startLine="548" endLine="567">
      <scope startLine="549" endLine="558">
        <declaration type="double[]" name="vData" />
        <declaration type="double" name="max" />
        <scope startLine="553" endLine="556">
          <declaration type="double" name="delta" />
        </scope>
      </scope>
      <scope startLine="558" endLine="566">
        <declaration type="double" name="max" />
        <scope startLine="561" endLine="564">
          <declaration type="double" name="delta" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="RealMatrix" name="outerProduct" startLine="571" endLine="594">
      <scope startLine="572" endLine="583">
        <declaration type="double[]" name="vData" />
        <declaration type="int" name="m" />
        <declaration type="int" name="n" />
        <declaration type="RealMatrix" name="out" />
        <scope startLine="577" endLine="581">
          <scope startLine="578" endLine="580" />
        </scope>
      </scope>
      <scope startLine="583" endLine="593">
        <declaration type="int" name="m" />
        <declaration type="int" name="n" />
        <declaration type="RealMatrix" name="out" />
        <scope startLine="587" endLine="591">
          <scope startLine="588" endLine="590" />
        </scope>
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="getEntry" startLine="598" endLine="605">
      <scope startLine="599" endLine="601" />
      <scope startLine="601" endLine="604" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="int" name="getDimension" startLine="609" endLine="611" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="RealVector" name="append" startLine="615" endLine="621">
      <scope startLine="616" endLine="618" />
      <scope startLine="618" endLine="620" />
    </method>
    <javadoc>
      <text>* Construct a vector by appending a vector to this vector.</text>
      <param>v Vector to append to this one.</param>
      <return>a new vector.</return>
    </javadoc>
    <method type="ArrayRealVector" name="append" startLine="629" endLine="631" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="RealVector" name="append" startLine="635" endLine="640">
      <declaration type="double[]" name="out" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="RealVector" name="getSubVector" startLine="645" endLine="657">
      <scope startLine="646" endLine="648" />
      <declaration type="ArrayRealVector" name="out" />
      <scope startLine="650" endLine="652" />
      <scope startLine="652" endLine="655" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setEntry" startLine="661" endLine="667">
      <scope startLine="662" endLine="664" />
      <scope startLine="664" endLine="666" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="addToEntry" startLine="672" endLine="679">
      <scope startLine="673" endLine="675" />
      <scope startLine="675" endLine="678" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="setSubVector" startLine="684" endLine="697">
      <scope startLine="685" endLine="687" />
      <scope startLine="687" endLine="696">
        <scope startLine="688" endLine="692">
          <scope startLine="689" endLine="691" />
        </scope>
        <scope startLine="692" endLine="695" />
      </scope>
    </method>
    <javadoc>
      <text>* Set a set of consecutive elements.</text>
      <param>index Index of first element to be set.</param>
      <param>v Vector containing the values to set.</param>
      <throws>OutOfRangeException if the index is inconsistent with the vector
 * size.</throws>
    </javadoc>
    <method type="void" name="setSubVector" startLine="708" endLine="715">
      <scope startLine="709" endLine="711" />
      <scope startLine="711" endLine="714" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="void" name="set" startLine="719" endLine="721" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double[]" name="toArray" startLine="725" endLine="727" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="String" name="toString" startLine="731" endLine="733" />
    <javadoc>
      <text>* Check if instance and specified vectors have the same dimension.</text>
      <param>v Vector to compare instance with.</param>
      <throws>DimensionMismatchException if the vectors do not
 * have the same dimension.</throws>
    </javadoc>
    <method type="void" name="checkVectorDimensions" startLine="744" endLine="746" />
    <javadoc>
      <text>* Check if instance dimension is equal to some expected value.</text>
      <param>n Expected dimension.</param>
      <throws>DimensionMismatchException if the dimension is
 * inconsistent with vector size.</throws>
    </javadoc>
    <method type="void" name="checkVectorDimensions" startLine="757" endLine="761">
      <scope startLine="758" endLine="760" />
    </method>
    <javadoc>
      <text>* Check if any coordinate of this vector is {@code NaN}.</text>
      <return>{@code true} if any coordinate of this vector is {@code NaN},{@code false} otherwise.</return>
    </javadoc>
    <method type="boolean" name="isNaN" startLine="770" endLine="777">
      <scope startLine="771" endLine="775">
        <scope startLine="772" endLine="774" />
      </scope>
    </method>
    <javadoc>
      <text>* Check whether any coordinate of this vector is infinite and none
 * are {@code NaN}.</text>
      <return>{@code true} if any coordinate of this vector is infinite and
 * none are {@code NaN}, {@code false} otherwise.</return>
    </javadoc>
    <method type="boolean" name="isInfinite" startLine="787" endLine="799">
      <scope startLine="788" endLine="790" />
      <scope startLine="792" endLine="796">
        <scope startLine="793" endLine="795" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="boolean" name="equals" startLine="803" endLine="827">
      <scope startLine="804" endLine="806" />
      <scope startLine="808" endLine="810" />
      <declaration type="RealVector" name="rhs" />
      <scope startLine="813" endLine="815" />
      <scope startLine="817" endLine="819" />
      <scope startLine="821" endLine="825">
        <scope startLine="822" endLine="824" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc} All {@code NaN} values have the same hash code.</text>
    </javadoc>
    <method type="int" name="hashCode" startLine="833" endLine="838">
      <scope startLine="834" endLine="836" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="ArrayRealVector" name="combine" startLine="843" endLine="845" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="ArrayRealVector" name="combineToSelf" startLine="850" endLine="864">
      <scope startLine="851" endLine="857">
        <declaration type="double[]" name="yData" />
        <scope startLine="854" endLine="856" />
      </scope>
      <scope startLine="857" endLine="862">
        <scope startLine="859" endLine="861" />
      </scope>
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="walkInDefaultOrder" startLine="868" endLine="874">
      <scope startLine="870" endLine="872" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="walkInDefaultOrder" startLine="880" endLine="887">
      <scope startLine="883" endLine="885" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}In this implementation, the optimized order is the default order.</text>
    </javadoc>
    <method type="double" name="walkInOptimizedOrder" startLine="895" endLine="897" />
    <javadoc>
      <text>* {@inheritDoc}In this implementation, the optimized order is the default order.</text>
    </javadoc>
    <method type="double" name="walkInOptimizedOrder" startLine="907" endLine="909" />
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="walkInDefaultOrder" startLine="913" endLine="919">
      <scope startLine="915" endLine="917" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}</text>
    </javadoc>
    <method type="double" name="walkInDefaultOrder" startLine="925" endLine="932">
      <scope startLine="928" endLine="930" />
    </method>
    <javadoc>
      <text>* {@inheritDoc}In this implementation, the optimized order is the default order.</text>
    </javadoc>
    <method type="double" name="walkInOptimizedOrder" startLine="940" endLine="942" />
    <javadoc>
      <text>* {@inheritDoc}In this implementation, the optimized order is the default order.</text>
    </javadoc>
    <method type="double" name="walkInOptimizedOrder" startLine="952" endLine="954" />
  </class>
</source>
