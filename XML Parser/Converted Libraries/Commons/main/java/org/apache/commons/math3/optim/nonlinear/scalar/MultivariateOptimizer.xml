<?xml version="1.0" encoding="UTF-8"?>
<source package="org.apache.commons.math3.optim.nonlinear.scalar">
  <import name="org.apache.commons.math3.analysis.MultivariateFunction" />
  <import name="org.apache.commons.math3.optim.BaseMultivariateOptimizer" />
  <import name="org.apache.commons.math3.optim.OptimizationData" />
  <import name="org.apache.commons.math3.optim.ConvergenceChecker" />
  <import name="org.apache.commons.math3.optim.PointValuePair" />
  <import name="org.apache.commons.math3.exception.TooManyEvaluationsException" />
  <class name="MultivariateOptimizer" extends="BaseMultivariateOptimizer<PointValuePair>" startLine="26">
    <javadoc>
      <text>* Base class for a multivariate scalar function optimizer.</text>
      <version>$Id: MultivariateOptimizer.java 1443444 2013-02-07 12:41:36Z erans $</version>
      <since>3.1</since>
    </javadoc>
    <javadoc>
      <text>* Objective function.</text>
    </javadoc>
    <declaration type="MultivariateFunction" name="function" />
    <javadoc>
      <text>* Type of optimization.</text>
    </javadoc>
    <declaration type="GoalType" name="goal" />
    <javadoc>
      <param>checker Convergence checker.</param>
    </javadoc>
    <method type="constructor" name="MultivariateOptimizer" startLine="42" endLine="44" />
    <javadoc>
      <text>* {@inheritDoc}</text>
      <param>optData Optimization data. In addition to those documented in{@link BaseMultivariateOptimizer#parseOptimizationData(OptimizationData[])BaseMultivariateOptimizer}, this method will register the following data:
 * <ul>
 * <li>{@link ObjectiveFunction}</li>
 * <li>{@link GoalType}</li>
 * </ul></param>
      <return>{@inheritDoc}</return>
      <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
    </javadoc>
    <method type="PointValuePair" name="optimize" startLine="62" endLine="65">
      <comment>Set up base class and perform computation.</comment>
    </method>
    <javadoc>
      <text>* Scans the list of (required and optional) optimization data that
 * characterize the problem.</text>
      <param>optData Optimization data.
 * The following data will be looked for:
 * <ul>
 * <li>{@link ObjectiveFunction}</li>
 * <li>{@link GoalType}</li>
 * </ul></param>
    </javadoc>
    <method type="void" name="parseOptimizationData" startLine="79" endLine="95">
      <scope startLine="85" endLine="94">
        <scope startLine="86" endLine="89" />
        <scope startLine="90" endLine="93" />
      </scope>
      <comment>Allow base class to register its own data.</comment>
      <comment>The existing values (as set by the previous call) are reused if</comment>
      <comment>not provided in the argument list.</comment>
    </method>
    <javadoc>
      <return>the optimization type.</return>
    </javadoc>
    <method type="GoalType" name="getGoalType" startLine="100" endLine="102" />
    <javadoc>
      <text>* Computes the objective function value.
 * This method <em>must</em> be called by subclasses to enforce the
 * evaluation counter limit.</text>
      <param>params Point at which the objective function must be evaluated.</param>
      <return>the objective function value at the specified point.</return>
      <throws>TooManyEvaluationsException if the maximal number of
 * evaluations is exceeded.</throws>
    </javadoc>
    <method type="double" name="computeObjectiveValue" startLine="114" endLine="117" />
  </class>
</source>
